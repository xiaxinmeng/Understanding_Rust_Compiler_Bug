{"sha": "4c2a5f857a6bfb626d63045a00a4b90293c3d5aa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjMmE1Zjg1N2E2YmZiNjI2ZDYzMDQ1YTAwYTRiOTAyOTNjM2Q1YWE=", "commit": {"author": {"name": "Lzu Tao", "email": "taolzu@gmail.com", "date": "2020-02-01T10:04:04Z"}, "committer": {"name": "Lzu Tao", "email": "taolzu@gmail.com", "date": "2020-02-05T14:55:03Z"}, "message": "compile-test: Handle CARGO_TARGET_DIR and transitive deps", "tree": {"sha": "a63fce371706d952150fe33d69392b1b374a2fc1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a63fce371706d952150fe33d69392b1b374a2fc1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c2a5f857a6bfb626d63045a00a4b90293c3d5aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c2a5f857a6bfb626d63045a00a4b90293c3d5aa", "html_url": "https://github.com/rust-lang/rust/commit/4c2a5f857a6bfb626d63045a00a4b90293c3d5aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c2a5f857a6bfb626d63045a00a4b90293c3d5aa/comments", "author": {"login": "tesuji", "id": 15225902, "node_id": "MDQ6VXNlcjE1MjI1OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/15225902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tesuji", "html_url": "https://github.com/tesuji", "followers_url": "https://api.github.com/users/tesuji/followers", "following_url": "https://api.github.com/users/tesuji/following{/other_user}", "gists_url": "https://api.github.com/users/tesuji/gists{/gist_id}", "starred_url": "https://api.github.com/users/tesuji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tesuji/subscriptions", "organizations_url": "https://api.github.com/users/tesuji/orgs", "repos_url": "https://api.github.com/users/tesuji/repos", "events_url": "https://api.github.com/users/tesuji/events{/privacy}", "received_events_url": "https://api.github.com/users/tesuji/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tesuji", "id": 15225902, "node_id": "MDQ6VXNlcjE1MjI1OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/15225902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tesuji", "html_url": "https://github.com/tesuji", "followers_url": "https://api.github.com/users/tesuji/followers", "following_url": "https://api.github.com/users/tesuji/following{/other_user}", "gists_url": "https://api.github.com/users/tesuji/gists{/gist_id}", "starred_url": "https://api.github.com/users/tesuji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tesuji/subscriptions", "organizations_url": "https://api.github.com/users/tesuji/orgs", "repos_url": "https://api.github.com/users/tesuji/repos", "events_url": "https://api.github.com/users/tesuji/events{/privacy}", "received_events_url": "https://api.github.com/users/tesuji/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7b3b9f553f58974bd14ee28ba857e3e703fb8c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7b3b9f553f58974bd14ee28ba857e3e703fb8c1", "html_url": "https://github.com/rust-lang/rust/commit/a7b3b9f553f58974bd14ee28ba857e3e703fb8c1"}], "stats": {"total": 177, "additions": 106, "deletions": 71}, "files": [{"sha": "080c5aa89771e291bb813b5ff244d552621f2e81", "filename": "tests/cargo/mod.rs", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/4c2a5f857a6bfb626d63045a00a4b90293c3d5aa/tests%2Fcargo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2a5f857a6bfb626d63045a00a4b90293c3d5aa/tests%2Fcargo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcargo%2Fmod.rs?ref=4c2a5f857a6bfb626d63045a00a4b90293c3d5aa", "patch": "@@ -0,0 +1,75 @@\n+use cargo_metadata::{Message::CompilerArtifact, MetadataCommand};\n+use std::env;\n+use std::ffi::OsStr;\n+use std::mem;\n+use std::path::PathBuf;\n+use std::process::Command;\n+\n+pub struct BuildInfo {\n+    cargo_target_dir: PathBuf,\n+}\n+\n+impl BuildInfo {\n+    pub fn new() -> Self {\n+        let data = MetadataCommand::new().exec().unwrap();\n+        Self {\n+            cargo_target_dir: data.target_directory,\n+        }\n+    }\n+\n+    pub fn host_lib(&self) -> PathBuf {\n+        if let Some(path) = option_env!(\"HOST_LIBS\") {\n+            PathBuf::from(path)\n+        } else {\n+            self.cargo_target_dir.join(env!(\"PROFILE\"))\n+        }\n+    }\n+\n+    pub fn target_lib(&self) -> PathBuf {\n+        if let Some(path) = option_env!(\"TARGET_LIBS\") {\n+            path.into()\n+        } else {\n+            let mut dir = self.cargo_target_dir.clone();\n+            if let Some(target) = env::var_os(\"CARGO_BUILD_TARGET\") {\n+                dir.push(target);\n+            }\n+            dir.push(env!(\"PROFILE\"));\n+            dir\n+        }\n+    }\n+\n+    pub fn clippy_driver_path(&self) -> PathBuf {\n+        if let Some(path) = option_env!(\"CLIPPY_DRIVER_PATH\") {\n+            PathBuf::from(path)\n+        } else {\n+            self.target_lib().join(\"clippy-driver\")\n+        }\n+    }\n+\n+    // When we'll want to use `extern crate ..` for a dependency that is used\n+    // both by the crate and the compiler itself, we can't simply pass -L flags\n+    // as we'll get a duplicate matching versions. Instead, disambiguate with\n+    // `--extern dep=path`.\n+    // See https://github.com/rust-lang/rust-clippy/issues/4015.\n+    pub fn third_party_crates() -> Vec<(&'static str, PathBuf)> {\n+        const THIRD_PARTY_CRATES: [&str; 3] = [\"serde\", \"regex\", \"clippy_lints\"];\n+        let cargo = env::var_os(\"CARGO\");\n+        let cargo = cargo.as_deref().unwrap_or_else(|| OsStr::new(\"cargo\"));\n+        let output = Command::new(cargo)\n+            .arg(\"build\")\n+            .arg(\"--test=compile-test\")\n+            .arg(\"--message-format=json\")\n+            .output()\n+            .unwrap();\n+\n+        let mut crates = Vec::with_capacity(THIRD_PARTY_CRATES.len());\n+        for message in cargo_metadata::parse_messages(output.stdout.as_slice()) {\n+            if let CompilerArtifact(mut artifact) = message.unwrap() {\n+                if let Some(&krate) = THIRD_PARTY_CRATES.iter().find(|&&krate| krate == artifact.target.name) {\n+                    crates.push((krate, mem::take(&mut artifact.filenames[0])));\n+                }\n+            }\n+        }\n+        crates\n+    }\n+}"}, {"sha": "7cfbfcf16a997111fca94964b7545ec5988e7793", "filename": "tests/compile-test.rs", "status": "modified", "additions": 31, "deletions": 71, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/4c2a5f857a6bfb626d63045a00a4b90293c3d5aa/tests%2Fcompile-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2a5f857a6bfb626d63045a00a4b90293c3d5aa/tests%2Fcompile-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-test.rs?ref=4c2a5f857a6bfb626d63045a00a4b90293c3d5aa", "patch": "@@ -1,36 +1,15 @@\n #![feature(test)]\n \n use compiletest_rs as compiletest;\n-extern crate tester as test;\n+use compiletest_rs::common::Mode as TestMode;\n \n-use std::env::{set_var, var};\n+use std::env::{self, set_var};\n use std::ffi::OsStr;\n use std::fs;\n use std::io;\n use std::path::{Path, PathBuf};\n \n-#[must_use]\n-fn clippy_driver_path() -> PathBuf {\n-    if let Some(path) = option_env!(\"CLIPPY_DRIVER_PATH\") {\n-        PathBuf::from(path)\n-    } else {\n-        PathBuf::from(concat!(\"target/\", env!(\"PROFILE\"), \"/clippy-driver\"))\n-    }\n-}\n-\n-#[must_use]\n-fn host_libs() -> PathBuf {\n-    if let Some(path) = option_env!(\"HOST_LIBS\") {\n-        PathBuf::from(path)\n-    } else {\n-        Path::new(\"target\").join(env!(\"PROFILE\"))\n-    }\n-}\n-\n-#[must_use]\n-fn target_libs() -> Option<PathBuf> {\n-    option_env!(\"TARGET_LIBS\").map(PathBuf::from)\n-}\n+mod cargo;\n \n #[must_use]\n fn rustc_test_suite() -> Option<PathBuf> {\n@@ -42,73 +21,52 @@ fn rustc_lib_path() -> PathBuf {\n     option_env!(\"RUSTC_LIB_PATH\").unwrap().into()\n }\n \n-fn config(mode: &str, dir: PathBuf) -> compiletest::Config {\n+fn default_config() -> compiletest::Config {\n+    let build_info = cargo::BuildInfo::new();\n     let mut config = compiletest::Config::default();\n \n-    let cfg_mode = mode.parse().expect(\"Invalid mode\");\n-    if let Ok(name) = var::<&str>(\"TESTNAME\") {\n-        config.filter = Some(name)\n+    if let Ok(name) = env::var(\"TESTNAME\") {\n+        config.filter = Some(name);\n     }\n \n     if rustc_test_suite().is_some() {\n-        config.run_lib_path = rustc_lib_path();\n-        config.compile_lib_path = rustc_lib_path();\n+        let path = rustc_lib_path();\n+        config.run_lib_path = path.clone();\n+        config.compile_lib_path = path;\n     }\n \n-    // When we'll want to use `extern crate ..` for a dependency that is used\n-    // both by the crate and the compiler itself, we can't simply pass -L flags\n-    // as we'll get a duplicate matching versions. Instead, disambiguate with\n-    // `--extern dep=path`.\n-    // See https://github.com/rust-lang/rust-clippy/issues/4015.\n-    let needs_disambiguation = [\"serde\", \"regex\", \"clippy_lints\"];\n-    // This assumes that deps are compiled (they are for Cargo integration tests).\n-    let deps = fs::read_dir(target_libs().unwrap_or_else(host_libs).join(\"deps\")).unwrap();\n-    let disambiguated = deps\n-        .filter_map(|dep| {\n-            let path = dep.ok()?.path();\n-            let name = path.file_name()?.to_string_lossy();\n-            // NOTE: This only handles a single dep\n-            // https://github.com/laumann/compiletest-rs/issues/101\n-            needs_disambiguation.iter().find_map(|dep| {\n-                if name.starts_with(&format!(\"lib{}-\", dep)) && name.ends_with(\".rlib\") {\n-                    Some(format!(\"--extern {}={}\", dep, path.display()))\n-                } else {\n-                    None\n-                }\n-            })\n-        })\n-        .collect::<Vec<_>>();\n+    let disambiguated: Vec<_> = cargo::BuildInfo::third_party_crates()\n+        .iter()\n+        .map(|(krate, path)| format!(\"--extern {}={}\", krate, path.display()))\n+        .collect();\n \n     config.target_rustcflags = Some(format!(\n-        \"-L {0} -L {0}/deps {1} -Dwarnings -Zui-testing {2}\",\n-        host_libs().display(),\n-        target_libs().map_or_else(String::new, |path| format!(\"-L {0} -L {0}/deps\", path.display())),\n+        \"-L {0} -L {1} -Dwarnings -Zui-testing {2}\",\n+        build_info.host_lib().join(\"deps\").display(),\n+        build_info.target_lib().join(\"deps\").display(),\n         disambiguated.join(\" \")\n     ));\n \n-    config.mode = cfg_mode;\n     config.build_base = if rustc_test_suite().is_some() {\n         // we don't need access to the stderr files on travis\n         let mut path = PathBuf::from(env!(\"OUT_DIR\"));\n         path.push(\"test_build_base\");\n         path\n     } else {\n-        let mut path = std::env::current_dir().unwrap();\n-        path.push(\"target/debug/test_build_base\");\n-        path\n+        build_info.host_lib().join(\"test_build_base\")\n     };\n-    config.src_base = dir;\n-    config.rustc_path = clippy_driver_path();\n+    config.rustc_path = build_info.clippy_driver_path();\n     config\n }\n \n-fn run_mode(mode: &str, dir: PathBuf) {\n-    let cfg = config(mode, dir);\n+fn run_mode(cfg: &mut compiletest::Config) {\n+    cfg.mode = TestMode::Ui;\n+    cfg.src_base = Path::new(\"tests\").join(\"ui\");\n     compiletest::run_tests(&cfg);\n }\n \n #[allow(clippy::identity_conversion)]\n-fn run_ui_toml_tests(config: &compiletest::Config, mut tests: Vec<test::TestDescAndFn>) -> Result<bool, io::Error> {\n+fn run_ui_toml_tests(config: &compiletest::Config, mut tests: Vec<tester::TestDescAndFn>) -> Result<bool, io::Error> {\n     let mut result = true;\n     let opts = compiletest::test_opts(config);\n     for dir in fs::read_dir(&config.src_base)? {\n@@ -137,15 +95,16 @@ fn run_ui_toml_tests(config: &compiletest::Config, mut tests: Vec<test::TestDesc\n                 .iter()\n                 .position(|test| test.desc.name == test_name)\n                 .expect(\"The test should be in there\");\n-            result &= test::run_tests_console(&opts, vec![tests.swap_remove(index)])?;\n+            result &= tester::run_tests_console(&opts, vec![tests.swap_remove(index)])?;\n         }\n     }\n     Ok(result)\n }\n \n-fn run_ui_toml() {\n-    let path = PathBuf::from(\"tests/ui-toml\").canonicalize().unwrap();\n-    let config = config(\"ui\", path);\n+fn run_ui_toml(config: &mut compiletest::Config) {\n+    config.mode = TestMode::Ui;\n+    config.src_base = Path::new(\"tests\").join(\"ui-toml\").canonicalize().unwrap();\n+\n     let tests = compiletest::make_tests(&config);\n \n     let res = run_ui_toml_tests(&config, tests);\n@@ -167,6 +126,7 @@ fn prepare_env() {\n #[test]\n fn compile_test() {\n     prepare_env();\n-    run_mode(\"ui\", \"tests/ui\".into());\n-    run_ui_toml();\n+    let mut config = default_config();\n+    run_mode(&mut config);\n+    run_ui_toml(&mut config);\n }"}]}