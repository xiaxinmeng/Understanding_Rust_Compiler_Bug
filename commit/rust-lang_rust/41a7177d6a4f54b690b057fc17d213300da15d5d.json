{"sha": "41a7177d6a4f54b690b057fc17d213300da15d5d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxYTcxNzdkNmE0ZjU0YjY5MGIwNTdmYzE3ZDIxMzMwMGRhMTVkNWQ=", "commit": {"author": {"name": "Ms2ger", "email": "ms2ger@gmail.com", "date": "2015-03-20T11:55:07Z"}, "committer": {"name": "Ms2ger", "email": "ms2ger@gmail.com", "date": "2015-03-20T12:29:01Z"}, "message": "Update librustc's README.txt for some code changes and reformat it.", "tree": {"sha": "a6b74a9782a9ef2530b1e9ef36e7c2cbb51bf258", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a6b74a9782a9ef2530b1e9ef36e7c2cbb51bf258"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/41a7177d6a4f54b690b057fc17d213300da15d5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/41a7177d6a4f54b690b057fc17d213300da15d5d", "html_url": "https://github.com/rust-lang/rust/commit/41a7177d6a4f54b690b057fc17d213300da15d5d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/41a7177d6a4f54b690b057fc17d213300da15d5d/comments", "author": {"login": "Ms2ger", "id": 111161, "node_id": "MDQ6VXNlcjExMTE2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/111161?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ms2ger", "html_url": "https://github.com/Ms2ger", "followers_url": "https://api.github.com/users/Ms2ger/followers", "following_url": "https://api.github.com/users/Ms2ger/following{/other_user}", "gists_url": "https://api.github.com/users/Ms2ger/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ms2ger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ms2ger/subscriptions", "organizations_url": "https://api.github.com/users/Ms2ger/orgs", "repos_url": "https://api.github.com/users/Ms2ger/repos", "events_url": "https://api.github.com/users/Ms2ger/events{/privacy}", "received_events_url": "https://api.github.com/users/Ms2ger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Ms2ger", "id": 111161, "node_id": "MDQ6VXNlcjExMTE2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/111161?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ms2ger", "html_url": "https://github.com/Ms2ger", "followers_url": "https://api.github.com/users/Ms2ger/followers", "following_url": "https://api.github.com/users/Ms2ger/following{/other_user}", "gists_url": "https://api.github.com/users/Ms2ger/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ms2ger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ms2ger/subscriptions", "organizations_url": "https://api.github.com/users/Ms2ger/orgs", "repos_url": "https://api.github.com/users/Ms2ger/repos", "events_url": "https://api.github.com/users/Ms2ger/events{/privacy}", "received_events_url": "https://api.github.com/users/Ms2ger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fda8673531c2ecea13c86216f964feb6091b4ade", "url": "https://api.github.com/repos/rust-lang/rust/commits/fda8673531c2ecea13c86216f964feb6091b4ade", "html_url": "https://github.com/rust-lang/rust/commit/fda8673531c2ecea13c86216f964feb6091b4ade"}], "stats": {"total": 102, "additions": 53, "deletions": 49}, "files": [{"sha": "31812e19aee86d4c90bff5c5ad55a6aee9784cff", "filename": "src/librustc/README.txt", "status": "modified", "additions": 53, "deletions": 49, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/41a7177d6a4f54b690b057fc17d213300da15d5d/src%2Flibrustc%2FREADME.txt", "raw_url": "https://github.com/rust-lang/rust/raw/41a7177d6a4f54b690b057fc17d213300da15d5d/src%2Flibrustc%2FREADME.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2FREADME.txt?ref=41a7177d6a4f54b690b057fc17d213300da15d5d", "patch": "@@ -16,17 +16,17 @@ Your concerns are probably the same as someone else's.\n The crates of rustc\n ===================\n \n-Rustc consists of four crates altogether: `libsyntax`, `librustc`,\n-`librustc_back`, and `librustc_trans` (the names and divisions are not\n-set in stone and may change; in general, a finer-grained division of\n-crates is preferable):\n+Rustc consists of a number of crates, including `libsyntax`,\n+`librustc`, `librustc_back`, `librustc_trans`, and `librustc_driver`\n+(the names and divisions are not set in stone and may change;\n+in general, a finer-grained division of crates is preferable):\n \n-- `libsyntax` contains those things concerned purely with syntax --\n+- `libsyntax` contains those things concerned purely with syntax \u2013\n   that is, the AST, parser, pretty-printer, lexer, macro expander, and\n-  utilities for traversing ASTs -- are in a separate crate called\n-  \"syntax\", whose files are in ./../libsyntax, where . is the current\n-  directory (that is, the parent directory of front/, middle/, back/,\n-  and so on).\n+  utilities for traversing ASTs \u2013 are in a separate crate called\n+  \"syntax\", whose files are in `./../libsyntax`, where `.` is the\n+  current directory (that is, the parent directory of front/, middle/,\n+  back/, and so on).\n \n - `librustc` (the current directory) contains the high-level analysis\n   passes, such as the type checker, borrow checker, and so forth.\n@@ -41,66 +41,70 @@ crates is preferable):\n   of miscellany. In general it contains code that runs towards the\n   end of the compilation process.\n \n+- `librustc_driver` invokes the compiler from `libsyntax`, then the\n+  analysis phases from `librustc`, and finally the lowering and\n+  codegen passes from `librustc_trans`.\n+\n Roughly speaking the \"order\" of the three crates is as follows:\n \n     libsyntax -> librustc -> librustc_trans\n     |                                     |\n     +-----------------+-------------------+\n                       |\n-             librustc_trans/driver\n+              librustc_driver\n \n-Here the role of `librustc_trans/driver` is to invoke the compiler\n-from libsyntax, then the analysis phases from librustc, and finally\n-the lowering and codegen passes from librustc_trans.\n \n Modules in the rustc crate\n ==========================\n \n-The rustc crate itself consists of the following subdirectories\n+The rustc crate itself consists of the following submodules\n (mostly, but not entirely, in their own directories):\n \n-session  - options and data that pertain to the compilation session as a whole\n-middle   - middle-end: name resolution, typechecking, LLVM code\n-                  generation\n-metadata - encoder and decoder for data required by\n-                    separate compilation\n-util     - ubiquitous types and helper functions\n-lib      - bindings to LLVM\n+- session: options and data that pertain to the compilation session as\n+  a whole\n+- middle: middle-end: name resolution, typechecking, LLVM code\n+  generation\n+- metadata: encoder and decoder for data required by separate\n+  compilation\n+- plugin: infrastructure for compiler plugins\n+- lint: infrastructure for compiler warnings\n+- util: ubiquitous types and helper functions\n+- lib: bindings to LLVM\n \n The entry-point for the compiler is main() in the librustc_trans\n crate.\n \n The 3 central data structures:\n ------------------------------\n \n-#1: ./../libsyntax/ast.rs defines the AST. The AST is treated as immutable\n-    after parsing, but it depends on mutable context data structures\n-    (mainly hash maps) to give it meaning.\n+1. `./../libsyntax/ast.rs` defines the AST. The AST is treated as\n+   immutable after parsing, but it depends on mutable context data\n+   structures (mainly hash maps) to give it meaning.\n \n-      - Many -- though not all -- nodes within this data structure are\n-        wrapped in the type `spanned<T>`, meaning that the front-end has\n-        marked the input coordinates of that node. The member .node is\n-        the data itself, the member .span is the input location (file,\n-        line, column; both low and high).\n+   - Many \u2013 though not all \u2013 nodes within this data structure are\n+     wrapped in the type `spanned<T>`, meaning that the front-end has\n+     marked the input coordinates of that node. The member `node` is\n+     the data itself, the member `span` is the input location (file,\n+     line, column; both low and high).\n \n-      - Many other nodes within this data structure carry a\n-        def_id. These nodes represent the 'target' of some name\n-        reference elsewhere in the tree. When the AST is resolved, by\n-        middle/resolve.rs, all names wind up acquiring a def that they\n-        point to. So anything that can be pointed-to by a name winds\n-        up with a def_id.\n+   - Many other nodes within this data structure carry a\n+     `def_id`. These nodes represent the 'target' of some name\n+     reference elsewhere in the tree. When the AST is resolved, by\n+     `middle/resolve.rs`, all names wind up acquiring a def that they\n+     point to. So anything that can be pointed-to by a name winds\n+     up with a `def_id`.\n \n-#2: middle/ty.rs defines the datatype sty.  This is the type that\n-    represents types after they have been resolved and normalized by\n-    the middle-end. The typeck phase converts every ast type to a\n-    ty::sty, and the latter is used to drive later phases of\n-    compilation.  Most variants in the ast::ty tag have a\n-    corresponding variant in the ty::sty tag.\n+2. `middle/ty.rs` defines the datatype `sty`. This is the type that\n+   represents types after they have been resolved and normalized by\n+   the middle-end. The typeck phase converts every ast type to a\n+   `ty::sty`, and the latter is used to drive later phases of\n+   compilation. Most variants in the `ast::ty` tag have a\n+   corresponding variant in the `ty::sty` tag.\n \n-#3: lib/llvm.rs (in librustc_trans) defines the exported types\n-    ValueRef, TypeRef, BasicBlockRef, and several others. Each of\n-    these is an opaque pointer to an LLVM type, manipulated through\n-    the lib::llvm interface.\n+3. `./../librustc_llvm/lib.rs` defines the exported types\n+   `ValueRef`, `TypeRef`, `BasicBlockRef`, and several others.\n+   Each of these is an opaque pointer to an LLVM type,\n+   manipulated through the `lib::llvm` interface.\n \n \n Control and information flow within the compiler:\n@@ -109,10 +113,10 @@ Control and information flow within the compiler:\n - main() in lib.rs assumes control on startup. Options are\n   parsed, platform is detected, etc.\n \n-- ./../libsyntax/parse/parser.rs parses the input files and produces an AST\n-  that represents the input crate.\n+- `./../libsyntax/parse/parser.rs` parses the input files and produces\n+  an AST that represents the input crate.\n \n-- Multiple middle-end passes (middle/resolve.rs, middle/typeck.rs)\n+- Multiple middle-end passes (`middle/resolve.rs`, `middle/typeck.rs`)\n   analyze the semantics of the resulting AST. Each pass generates new\n   information about the AST and stores it in various environment data\n   structures. The driver passes environments to each compiler pass\n@@ -121,4 +125,4 @@ Control and information flow within the compiler:\n - Finally, the `trans` module in `librustc_trans` translates the Rust\n   AST to LLVM bitcode in a type-directed way. When it's finished\n   synthesizing LLVM values, rustc asks LLVM to write them out in some\n-  form (.bc, .o) and possibly run the system linker.\n+  form (`.bc`, `.o`) and possibly run the system linker."}]}