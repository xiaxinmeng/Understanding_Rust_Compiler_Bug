{"sha": "aa51449af43c428fd8ddbdc8dd53a11c3741f3ec", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhNTE0NDlhZjQzYzQyOGZkOGRkYmRjOGRkNTNhMTFjMzc0MWYzZWM=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-10-10T15:59:16Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-10-10T17:00:51Z"}, "message": "Fix hotplug_codegen_backend test", "tree": {"sha": "dc59dc718cd3cc3ed3351e454d90a96851f5d5d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc59dc718cd3cc3ed3351e454d90a96851f5d5d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa51449af43c428fd8ddbdc8dd53a11c3741f3ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa51449af43c428fd8ddbdc8dd53a11c3741f3ec", "html_url": "https://github.com/rust-lang/rust/commit/aa51449af43c428fd8ddbdc8dd53a11c3741f3ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa51449af43c428fd8ddbdc8dd53a11c3741f3ec/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12a294121422a223a8d0a6a9974efbe7577977e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/12a294121422a223a8d0a6a9974efbe7577977e7", "html_url": "https://github.com/rust-lang/rust/commit/12a294121422a223a8d0a6a9974efbe7577977e7"}], "stats": {"total": 58, "additions": 26, "deletions": 32}, "files": [{"sha": "0e1bef6f68d53c8da40cce74c2fbe1bd07bf2e5a", "filename": "src/test/run-make-fulldeps/hotplug_codegen_backend/the_backend.rs", "status": "modified", "additions": 26, "deletions": 32, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/aa51449af43c428fd8ddbdc8dd53a11c3741f3ec/src%2Ftest%2Frun-make-fulldeps%2Fhotplug_codegen_backend%2Fthe_backend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa51449af43c428fd8ddbdc8dd53a11c3741f3ec/src%2Ftest%2Frun-make-fulldeps%2Fhotplug_codegen_backend%2Fthe_backend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fhotplug_codegen_backend%2Fthe_backend.rs?ref=aa51449af43c428fd8ddbdc8dd53a11c3741f3ec", "patch": "@@ -3,7 +3,6 @@\n extern crate rustc_codegen_ssa;\n extern crate rustc_errors;\n extern crate rustc_middle;\n-#[macro_use]\n extern crate rustc_data_structures;\n extern crate rustc_driver;\n extern crate rustc_hir;\n@@ -12,17 +11,19 @@ extern crate rustc_span;\n extern crate rustc_symbol_mangling;\n extern crate rustc_target;\n \n+use rustc_codegen_ssa::back::linker::LinkerInfo;\n use rustc_codegen_ssa::traits::CodegenBackend;\n-use rustc_data_structures::owning_ref::OwningRef;\n+use rustc_codegen_ssa::{CodegenResults, CrateInfo};\n+use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::MetadataRef;\n use rustc_errors::ErrorReported;\n use rustc_middle::dep_graph::DepGraph;\n+use rustc_middle::dep_graph::{WorkProduct, WorkProductId};\n use rustc_middle::middle::cstore::{EncodedMetadata, MetadataLoader, MetadataLoaderDyn};\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::TyCtxt;\n use rustc_session::config::OutputFilenames;\n use rustc_session::Session;\n-use rustc_span::symbol::Symbol;\n use rustc_target::spec::Target;\n use std::any::Any;\n use std::path::Path;\n@@ -31,14 +32,11 @@ pub struct NoLlvmMetadataLoader;\n \n impl MetadataLoader for NoLlvmMetadataLoader {\n     fn get_rlib_metadata(&self, _: &Target, filename: &Path) -> Result<MetadataRef, String> {\n-        let buf =\n-            std::fs::read(filename).map_err(|e| format!(\"metadata file open err: {:?}\", e))?;\n-        let buf: OwningRef<Vec<u8>, [u8]> = OwningRef::new(buf);\n-        Ok(rustc_erase_owner!(buf.map_owner_box()))\n+        unreachable!(\"some_crate.rs shouldn't depend on any external crates\");\n     }\n \n     fn get_dylib_metadata(&self, target: &Target, filename: &Path) -> Result<MetadataRef, String> {\n-        self.get_rlib_metadata(target, filename)\n+        unreachable!(\"some_crate.rs shouldn't depend on any external crates\");\n     }\n }\n \n@@ -49,53 +47,49 @@ impl CodegenBackend for TheBackend {\n         Box::new(NoLlvmMetadataLoader)\n     }\n \n-    fn provide(&self, providers: &mut Providers) {\n-        rustc_symbol_mangling::provide(providers);\n-\n-        providers.supported_target_features = |tcx, _cnum| {\n-            Default::default() // Just a dummy\n-        };\n-        providers.is_reachable_non_generic = |_tcx, _defid| true;\n-        providers.exported_symbols = |_tcx, _crate| &[];\n-    }\n-\n-    fn provide_extern(&self, providers: &mut Providers) {\n-        providers.is_reachable_non_generic = |_tcx, _defid| true;\n-    }\n+    fn provide(&self, providers: &mut Providers) {}\n+    fn provide_extern(&self, providers: &mut Providers) {}\n \n     fn codegen_crate<'a, 'tcx>(\n         &self,\n         tcx: TyCtxt<'tcx>,\n-        _metadata: EncodedMetadata,\n+        metadata: EncodedMetadata,\n         _need_metadata_module: bool,\n     ) -> Box<dyn Any> {\n         use rustc_hir::def_id::LOCAL_CRATE;\n \n-        Box::new(tcx.crate_name(LOCAL_CRATE) as Symbol)\n+        Box::new(CodegenResults {\n+            crate_name: tcx.crate_name(LOCAL_CRATE),\n+            modules: vec![],\n+            allocator_module: None,\n+            metadata_module: None,\n+            metadata,\n+            windows_subsystem: None,\n+            linker_info: LinkerInfo::new(tcx),\n+            crate_info: CrateInfo::new(tcx),\n+        })\n     }\n \n     fn join_codegen(\n         &self,\n         ongoing_codegen: Box<dyn Any>,\n         _sess: &Session,\n-        _dep_graph: &DepGraph,\n-    ) -> Result<Box<dyn Any>, ErrorReported> {\n-        let crate_name = ongoing_codegen\n-            .downcast::<Symbol>()\n-            .expect(\"in join_codegen: ongoing_codegen is not a Symbol\");\n-        Ok(crate_name)\n+    ) -> Result<(CodegenResults, FxHashMap<WorkProductId, WorkProduct>), ErrorReported> {\n+        let codegen_results = ongoing_codegen\n+            .downcast::<CodegenResults>()\n+            .expect(\"in join_codegen: ongoing_codegen is not a CodegenResults\");\n+        Ok((*codegen_results, FxHashMap::default()))\n     }\n \n     fn link(\n         &self,\n         sess: &Session,\n-        codegen_results: Box<dyn Any>,\n+        codegen_results: CodegenResults,\n         outputs: &OutputFilenames,\n     ) -> Result<(), ErrorReported> {\n         use rustc_session::{config::CrateType, output::out_filename};\n         use std::io::Write;\n-        let crate_name =\n-            codegen_results.downcast::<Symbol>().expect(\"in link: codegen_results is not a Symbol\");\n+        let crate_name = codegen_results.crate_name;\n         for &crate_type in sess.opts.crate_types.iter() {\n             if crate_type != CrateType::Rlib {\n                 sess.fatal(&format!(\"Crate type is {:?}\", crate_type));"}]}