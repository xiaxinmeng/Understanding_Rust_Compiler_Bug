{"sha": "6d3acf5129767db78a3d9d62e814ec86b8870d75", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkM2FjZjUxMjk3NjdkYjc4YTNkOWQ2MmU4MTRlYzg2Yjg4NzBkNzU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-22T22:52:07Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-22T22:52:07Z"}, "message": "Auto merge of #76928 - lcnr:opaque-types-cache, r=tmandry\n\ncache types during normalization\n\npartially fixes #75992\n\nreduces the following test from 14 to 3 seconds locally.\n\ncc `@Mark-Simulacrum` would it make sense to add that test to `perf`?\n```rust\n#![recursion_limit=\"2048\"]\n#![type_length_limit=\"112457564\"]\n\npub async fn h0(v: &String, x: &u64) { println!(\"{} {}\", v, x) }\npub async fn h1(v: &String, x: &u64) { h0(v, x).await }\npub async fn h2(v: &String, x: &u64) { h1(v, x).await }\npub async fn h3(v: &String, x: &u64) { h2(v, x).await }\npub async fn h4(v: &String, x: &u64) { h3(v, x).await }\npub async fn h5(v: &String, x: &u64) { h4(v, x).await }\npub async fn h6(v: &String, x: &u64) { h5(v, x).await }\npub async fn h7(v: &String, x: &u64) { h6(v, x).await }\npub async fn h8(v: &String, x: &u64) { h7(v, x).await }\npub async fn h9(v: &String, x: &u64) { h8(v, x).await }\n\npub async fn h10(v: &String, x: &u64) { h9(v, x).await }\npub async fn h11(v: &String, x: &u64) { h10(v, x).await }\npub async fn h12(v: &String, x: &u64) { h11(v, x).await }\npub async fn h13(v: &String, x: &u64) { h12(v, x).await }\npub async fn h14(v: &String, x: &u64) { h13(v, x).await }\npub async fn h15(v: &String, x: &u64) { h14(v, x).await }\npub async fn h16(v: &String, x: &u64) { h15(v, x).await }\npub async fn h17(v: &String, x: &u64) { h16(v, x).await }\npub async fn h18(v: &String, x: &u64) { h17(v, x).await }\npub async fn h19(v: &String, x: &u64) { h18(v, x).await }\n\nmacro_rules! async_recursive {\n    (29, $inner:expr) => { async { async_recursive!(28, $inner) }.await };\n    (28, $inner:expr) => { async { async_recursive!(27, $inner) }.await };\n    (27, $inner:expr) => { async { async_recursive!(26, $inner) }.await };\n    (26, $inner:expr) => { async { async_recursive!(25, $inner) }.await };\n    (25, $inner:expr) => { async { async_recursive!(24, $inner) }.await };\n    (24, $inner:expr) => { async { async_recursive!(23, $inner) }.await };\n    (23, $inner:expr) => { async { async_recursive!(22, $inner) }.await };\n    (22, $inner:expr) => { async { async_recursive!(21, $inner) }.await };\n    (21, $inner:expr) => { async { async_recursive!(20, $inner) }.await };\n    (20, $inner:expr) => { async { async_recursive!(19, $inner) }.await };\n\n    (19, $inner:expr) => { async { async_recursive!(18, $inner) }.await };\n    (18, $inner:expr) => { async { async_recursive!(17, $inner) }.await };\n    (17, $inner:expr) => { async { async_recursive!(16, $inner) }.await };\n    (16, $inner:expr) => { async { async_recursive!(15, $inner) }.await };\n    (15, $inner:expr) => { async { async_recursive!(14, $inner) }.await };\n    (14, $inner:expr) => { async { async_recursive!(13, $inner) }.await };\n    (13, $inner:expr) => { async { async_recursive!(12, $inner) }.await };\n    (12, $inner:expr) => { async { async_recursive!(11, $inner) }.await };\n    (11, $inner:expr) => { async { async_recursive!(10, $inner) }.await };\n    (10, $inner:expr) => { async { async_recursive!(9, $inner) }.await };\n\n    (9, $inner:expr) => { async { async_recursive!(8, $inner) }.await };\n    (8, $inner:expr) => { async { async_recursive!(7, $inner) }.await };\n    (7, $inner:expr) => { async { async_recursive!(6, $inner) }.await };\n    (6, $inner:expr) => { async { async_recursive!(5, $inner) }.await };\n    (5, $inner:expr) => { async { async_recursive!(4, $inner) }.await };\n    (4, $inner:expr) => { async { async_recursive!(3, $inner) }.await };\n    (3, $inner:expr) => { async { async_recursive!(2, $inner) }.await };\n    (2, $inner:expr) => { async { async_recursive!(1, $inner) }.await };\n    (1, $inner:expr) => { async { async_recursive!(0, $inner) }.await };\n    (0, $inner:expr) => { async { h19(&String::from(\"owo\"), &0).await; $inner }.await };\n}\n\nasync fn f() {\n    async_recursive!(14, println!(\"hello\"));\n}\n\nfn main() {\n    let _ = f();\n}\n```\nr? `@eddyb` requires a perf run.", "tree": {"sha": "ad854851aeb92cfe2475a3b7b1dfda6ce1c4dc1b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad854851aeb92cfe2475a3b7b1dfda6ce1c4dc1b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d3acf5129767db78a3d9d62e814ec86b8870d75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d3acf5129767db78a3d9d62e814ec86b8870d75", "html_url": "https://github.com/rust-lang/rust/commit/6d3acf5129767db78a3d9d62e814ec86b8870d75", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d3acf5129767db78a3d9d62e814ec86b8870d75/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0da58007451a154da2480160429e1604a1f5f0ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/0da58007451a154da2480160429e1604a1f5f0ec", "html_url": "https://github.com/rust-lang/rust/commit/0da58007451a154da2480160429e1604a1f5f0ec"}, {"sha": "1146c39da74b3875e6667aeeafde2773644dc8b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/1146c39da74b3875e6667aeeafde2773644dc8b6", "html_url": "https://github.com/rust-lang/rust/commit/1146c39da74b3875e6667aeeafde2773644dc8b6"}], "stats": {"total": 151, "additions": 83, "deletions": 68}, "files": [{"sha": "68288916e6d12682b2ccaf6f1b38b82305c76ace", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d3acf5129767db78a3d9d62e814ec86b8870d75/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/6d3acf5129767db78a3d9d62e814ec86b8870d75/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=6d3acf5129767db78a3d9d62e814ec86b8870d75", "patch": "@@ -3467,6 +3467,7 @@ dependencies = [\n name = \"rustc_data_structures\"\n version = \"0.0.0\"\n dependencies = [\n+ \"arrayvec\",\n  \"bitflags\",\n  \"cfg-if\",\n  \"crossbeam-utils 0.7.2\","}, {"sha": "caaf7c0c3c2505ae927833ac7e3d14836d3553eb", "filename": "compiler/rustc_data_structures/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d3acf5129767db78a3d9d62e814ec86b8870d75/compiler%2Frustc_data_structures%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/6d3acf5129767db78a3d9d62e814ec86b8870d75/compiler%2Frustc_data_structures%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2FCargo.toml?ref=6d3acf5129767db78a3d9d62e814ec86b8870d75", "patch": "@@ -8,6 +8,7 @@ edition = \"2018\"\n doctest = false\n \n [dependencies]\n+arrayvec = { version = \"0.5.1\", default-features = false }\n ena = \"0.14\"\n indexmap = \"1.5.1\"\n tracing = \"0.1\""}, {"sha": "1f977805f5e90237934eb0ac1bef8d5b5ab269d4", "filename": "compiler/rustc_data_structures/src/lib.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6d3acf5129767db78a3d9d62e814ec86b8870d75/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d3acf5129767db78a3d9d62e814ec86b8870d75/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs?ref=6d3acf5129767db78a3d9d62e814ec86b8870d75", "patch": "@@ -88,25 +88,27 @@ pub mod sorted_map;\n pub mod stable_set;\n #[macro_use]\n pub mod stable_hasher;\n+mod atomic_ref;\n+pub mod fingerprint;\n+pub mod profiling;\n pub mod sharded;\n pub mod stack;\n pub mod sync;\n pub mod thin_vec;\n pub mod tiny_list;\n pub mod transitive_relation;\n-pub use ena::undo_log;\n-pub use ena::unify;\n-mod atomic_ref;\n-pub mod fingerprint;\n-pub mod profiling;\n pub mod vec_linked_list;\n pub mod work_queue;\n pub use atomic_ref::AtomicRef;\n pub mod frozen;\n+pub mod mini_map;\n pub mod tagged_ptr;\n pub mod temp_dir;\n pub mod unhash;\n \n+pub use ena::undo_log;\n+pub use ena::unify;\n+\n pub struct OnDrop<F: Fn()>(pub F);\n \n impl<F: Fn()> OnDrop<F> {"}, {"sha": "cd3e949d3831aaaa9b531f67649634c365098a7e", "filename": "compiler/rustc_data_structures/src/mini_map.rs", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/6d3acf5129767db78a3d9d62e814ec86b8870d75/compiler%2Frustc_data_structures%2Fsrc%2Fmini_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d3acf5129767db78a3d9d62e814ec86b8870d75/compiler%2Frustc_data_structures%2Fsrc%2Fmini_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fmini_map.rs?ref=6d3acf5129767db78a3d9d62e814ec86b8870d75", "patch": "@@ -0,0 +1,61 @@\n+use crate::fx::FxHashMap;\n+use arrayvec::ArrayVec;\n+\n+use std::hash::Hash;\n+\n+/// Small-storage-optimized implementation of a map\n+/// made specifically for caching results.\n+///\n+/// Stores elements in a small array up to a certain length\n+/// and switches to `HashMap` when that length is exceeded.\n+pub enum MiniMap<K, V> {\n+    Array(ArrayVec<[(K, V); 8]>),\n+    Map(FxHashMap<K, V>),\n+}\n+\n+impl<K: Eq + Hash, V> MiniMap<K, V> {\n+    /// Creates an empty `MiniMap`.\n+    pub fn new() -> Self {\n+        MiniMap::Array(ArrayVec::new())\n+    }\n+\n+    /// Inserts or updates value in the map.\n+    pub fn insert(&mut self, key: K, value: V) {\n+        match self {\n+            MiniMap::Array(array) => {\n+                for pair in array.iter_mut() {\n+                    if pair.0 == key {\n+                        pair.1 = value;\n+                        return;\n+                    }\n+                }\n+                if let Err(error) = array.try_push((key, value)) {\n+                    let mut map: FxHashMap<K, V> = array.drain(..).collect();\n+                    let (key, value) = error.element();\n+                    map.insert(key, value);\n+                    *self = MiniMap::Map(map);\n+                }\n+            }\n+            MiniMap::Map(map) => {\n+                map.insert(key, value);\n+            }\n+        }\n+    }\n+\n+    /// Return value by key if any.\n+    pub fn get(&self, key: &K) -> Option<&V> {\n+        match self {\n+            MiniMap::Array(array) => {\n+                for pair in array {\n+                    if pair.0 == *key {\n+                        return Some(&pair.1);\n+                    }\n+                }\n+                return None;\n+            }\n+            MiniMap::Map(map) => {\n+                return map.get(key);\n+            }\n+        }\n+    }\n+}"}, {"sha": "6e1471df195b1a9b002880c056fcf85233ee759e", "filename": "compiler/rustc_index/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d3acf5129767db78a3d9d62e814ec86b8870d75/compiler%2Frustc_index%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/6d3acf5129767db78a3d9d62e814ec86b8870d75/compiler%2Frustc_index%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_index%2FCargo.toml?ref=6d3acf5129767db78a3d9d62e814ec86b8870d75", "patch": "@@ -8,6 +8,6 @@ edition = \"2018\"\n doctest = false\n \n [dependencies]\n-arrayvec = \"0.5.1\"\n+arrayvec = { version = \"0.5.1\", default-features = false }\n rustc_serialize = { path = \"../rustc_serialize\" }\n rustc_macros = { path = \"../rustc_macros\" }"}, {"sha": "a540face4f2359dafaa98dcda8b7618d89ab718f", "filename": "compiler/rustc_infer/src/infer/combine.rs", "status": "modified", "additions": 1, "deletions": 60, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/6d3acf5129767db78a3d9d62e814ec86b8870d75/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d3acf5129767db78a3d9d62e814ec86b8870d75/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs?ref=6d3acf5129767db78a3d9d62e814ec86b8870d75", "patch": "@@ -31,13 +31,11 @@ use super::unify_key::replace_if_possible;\n use super::unify_key::{ConstVarValue, ConstVariableValue};\n use super::unify_key::{ConstVariableOrigin, ConstVariableOriginKind};\n use super::{InferCtxt, MiscVariable, TypeTrace};\n-use arrayvec::ArrayVec;\n-use rustc_data_structures::fx::FxHashMap;\n-use std::hash::Hash;\n \n use crate::traits::{Obligation, PredicateObligations};\n \n use rustc_ast as ast;\n+use rustc_data_structures::mini_map::MiniMap;\n use rustc_hir::def_id::DefId;\n use rustc_middle::traits::ObligationCause;\n use rustc_middle::ty::error::TypeError;\n@@ -47,63 +45,6 @@ use rustc_middle::ty::{self, InferConst, ToPredicate, Ty, TyCtxt, TypeFoldable};\n use rustc_middle::ty::{IntType, UintType};\n use rustc_span::{Span, DUMMY_SP};\n \n-/// Small-storage-optimized implementation of a map\n-/// made specifically for caching results.\n-///\n-/// Stores elements in a small array up to a certain length\n-/// and switches to `HashMap` when that length is exceeded.\n-enum MiniMap<K, V> {\n-    Array(ArrayVec<[(K, V); 8]>),\n-    Map(FxHashMap<K, V>),\n-}\n-\n-impl<K: Eq + Hash, V> MiniMap<K, V> {\n-    /// Creates an empty `MiniMap`.\n-    pub fn new() -> Self {\n-        MiniMap::Array(ArrayVec::new())\n-    }\n-\n-    /// Inserts or updates value in the map.\n-    pub fn insert(&mut self, key: K, value: V) {\n-        match self {\n-            MiniMap::Array(array) => {\n-                for pair in array.iter_mut() {\n-                    if pair.0 == key {\n-                        pair.1 = value;\n-                        return;\n-                    }\n-                }\n-                if let Err(error) = array.try_push((key, value)) {\n-                    let mut map: FxHashMap<K, V> = array.drain(..).collect();\n-                    let (key, value) = error.element();\n-                    map.insert(key, value);\n-                    *self = MiniMap::Map(map);\n-                }\n-            }\n-            MiniMap::Map(map) => {\n-                map.insert(key, value);\n-            }\n-        }\n-    }\n-\n-    /// Return value by key if any.\n-    pub fn get(&self, key: &K) -> Option<&V> {\n-        match self {\n-            MiniMap::Array(array) => {\n-                for pair in array {\n-                    if pair.0 == *key {\n-                        return Some(&pair.1);\n-                    }\n-                }\n-                return None;\n-            }\n-            MiniMap::Map(map) => {\n-                return map.get(key);\n-            }\n-        }\n-    }\n-}\n-\n #[derive(Clone)]\n pub struct CombineFields<'infcx, 'tcx> {\n     pub infcx: &'infcx InferCtxt<'infcx, 'tcx>,"}, {"sha": "3dcebbcc244826db633b04a0ab4e2d6ff8066527", "filename": "compiler/rustc_trait_selection/src/traits/query/normalize.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6d3acf5129767db78a3d9d62e814ec86b8870d75/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d3acf5129767db78a3d9d62e814ec86b8870d75/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs?ref=6d3acf5129767db78a3d9d62e814ec86b8870d75", "patch": "@@ -7,6 +7,7 @@ use crate::infer::canonical::OriginalQueryValues;\n use crate::infer::{InferCtxt, InferOk};\n use crate::traits::error_reporting::InferCtxtExt;\n use crate::traits::{Obligation, ObligationCause, PredicateObligation, Reveal};\n+use rustc_data_structures::mini_map::MiniMap;\n use rustc_data_structures::stack::ensure_sufficient_stack;\n use rustc_infer::traits::Normalized;\n use rustc_middle::ty::fold::{TypeFoldable, TypeFolder};\n@@ -57,6 +58,7 @@ impl<'cx, 'tcx> AtExt<'tcx> for At<'cx, 'tcx> {\n             param_env: self.param_env,\n             obligations: vec![],\n             error: false,\n+            cache: MiniMap::new(),\n             anon_depth: 0,\n         };\n \n@@ -85,6 +87,7 @@ struct QueryNormalizer<'cx, 'tcx> {\n     cause: &'cx ObligationCause<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     obligations: Vec<PredicateObligation<'tcx>>,\n+    cache: MiniMap<Ty<'tcx>, Ty<'tcx>>,\n     error: bool,\n     anon_depth: usize,\n }\n@@ -99,8 +102,12 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for QueryNormalizer<'cx, 'tcx> {\n             return ty;\n         }\n \n+        if let Some(ty) = self.cache.get(&ty) {\n+            return ty;\n+        }\n+\n         let ty = ty.super_fold_with(self);\n-        match *ty.kind() {\n+        let res = (|| match *ty.kind() {\n             ty::Opaque(def_id, substs) => {\n                 // Only normalize `impl Trait` after type-checking, usually in codegen.\n                 match self.param_env.reveal() {\n@@ -197,7 +204,9 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for QueryNormalizer<'cx, 'tcx> {\n             }\n \n             _ => ty,\n-        }\n+        })();\n+        self.cache.insert(ty, res);\n+        res\n     }\n \n     fn fold_const(&mut self, constant: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {"}]}