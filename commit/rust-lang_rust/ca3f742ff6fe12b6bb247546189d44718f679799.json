{"sha": "ca3f742ff6fe12b6bb247546189d44718f679799", "node_id": "C_kwDOAAsO6NoAKGNhM2Y3NDJmZjZmZTEyYjZiYjI0NzU0NjE4OWQ0NDcxOGY2Nzk3OTk", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2023-04-30T05:33:57Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2023-04-30T18:59:24Z"}, "message": "MIR pre-codegen test for `mem::replace`", "tree": {"sha": "607f85baf787684e70416e78d58b9b85a2af28b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/607f85baf787684e70416e78d58b9b85a2af28b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca3f742ff6fe12b6bb247546189d44718f679799", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca3f742ff6fe12b6bb247546189d44718f679799", "html_url": "https://github.com/rust-lang/rust/commit/ca3f742ff6fe12b6bb247546189d44718f679799", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca3f742ff6fe12b6bb247546189d44718f679799/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "831c9298c8e6542e3ab395216e98aec21f60b470", "url": "https://api.github.com/repos/rust-lang/rust/commits/831c9298c8e6542e3ab395216e98aec21f60b470", "html_url": "https://github.com/rust-lang/rust/commit/831c9298c8e6542e3ab395216e98aec21f60b470"}], "stats": {"total": 98, "additions": 98, "deletions": 0}, "files": [{"sha": "2b4971e2ef9191dd7b9e32cbd9ffd1aff3c5365e", "filename": "tests/mir-opt/pre-codegen/mem_replace.manual_replace.PreCodegen.after.mir", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ca3f742ff6fe12b6bb247546189d44718f679799/tests%2Fmir-opt%2Fpre-codegen%2Fmem_replace.manual_replace.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/ca3f742ff6fe12b6bb247546189d44718f679799/tests%2Fmir-opt%2Fpre-codegen%2Fmem_replace.manual_replace.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpre-codegen%2Fmem_replace.manual_replace.PreCodegen.after.mir?ref=ca3f742ff6fe12b6bb247546189d44718f679799", "patch": "@@ -0,0 +1,16 @@\n+// MIR for `manual_replace` after PreCodegen\n+\n+fn manual_replace(_1: &mut u32, _2: u32) -> u32 {\n+    debug r => _1;                       // in scope 0 at $DIR/mem_replace.rs:+0:23: +0:24\n+    debug v => _2;                       // in scope 0 at $DIR/mem_replace.rs:+0:36: +0:37\n+    let mut _0: u32;                     // return place in scope 0 at $DIR/mem_replace.rs:+1:9: +1:13\n+    scope 1 {\n+        debug temp => _0;                // in scope 1 at $DIR/mem_replace.rs:+1:9: +1:13\n+    }\n+\n+    bb0: {\n+        _0 = (*_1);                      // scope 0 at $DIR/mem_replace.rs:+1:16: +1:18\n+        (*_1) = _2;                      // scope 1 at $DIR/mem_replace.rs:+2:5: +2:11\n+        return;                          // scope 0 at $DIR/mem_replace.rs:+4:2: +4:2\n+    }\n+}"}, {"sha": "19e79e0a2f08c00bce844fc562a177b2e49e7f65", "filename": "tests/mir-opt/pre-codegen/mem_replace.mem_replace.PreCodegen.after.mir", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/ca3f742ff6fe12b6bb247546189d44718f679799/tests%2Fmir-opt%2Fpre-codegen%2Fmem_replace.mem_replace.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/ca3f742ff6fe12b6bb247546189d44718f679799/tests%2Fmir-opt%2Fpre-codegen%2Fmem_replace.mem_replace.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpre-codegen%2Fmem_replace.mem_replace.PreCodegen.after.mir?ref=ca3f742ff6fe12b6bb247546189d44718f679799", "patch": "@@ -0,0 +1,65 @@\n+// MIR for `mem_replace` after PreCodegen\n+\n+fn mem_replace(_1: &mut u32, _2: u32) -> u32 {\n+    debug r => _1;                       // in scope 0 at $DIR/mem_replace.rs:+0:20: +0:21\n+    debug v => _2;                       // in scope 0 at $DIR/mem_replace.rs:+0:33: +0:34\n+    let mut _0: u32;                     // return place in scope 0 at $DIR/mem_replace.rs:+0:44: +0:47\n+    scope 1 (inlined std::mem::replace::<u32>) { // at $DIR/mem_replace.rs:16:5: 16:28\n+        debug dest => _1;                // in scope 1 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n+        debug src => _2;                 // in scope 1 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n+        let mut _3: *const u32;          // in scope 1 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n+        let mut _4: *mut u32;            // in scope 1 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n+        let mut _5: u32;                 // in scope 1 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n+        scope 2 {\n+            scope 3 {\n+                debug result => _0;      // in scope 3 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n+                scope 7 (inlined std::ptr::write::<u32>) { // at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n+                    debug dst => _4;     // in scope 7 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+                    debug src => _5;     // in scope 7 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+                    let mut _7: *const u32; // in scope 7 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+                    let _8: &u32;        // in scope 7 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+                    let mut _9: *mut u32; // in scope 7 at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+                    scope 8 {\n+                        scope 9 (inlined std::ptr::write::runtime::<u32>) { // at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+                            debug dst => _9; // in scope 9 at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+                        }\n+                    }\n+                }\n+            }\n+            scope 4 (inlined std::ptr::read::<u32>) { // at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n+                debug src => _3;         // in scope 4 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+                let mut _6: *const u32;  // in scope 4 at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+                scope 5 {\n+                    scope 6 (inlined std::ptr::read::runtime::<u32>) { // at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+                        debug src => _6; // in scope 6 at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    bb0: {\n+        StorageLive(_3);                 // scope 2 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n+        _3 = &raw const (*_1);           // scope 2 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n+        StorageLive(_6);                 // scope 2 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n+        _0 = (*_3);                      // scope 5 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+        StorageDead(_6);                 // scope 2 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n+        StorageDead(_3);                 // scope 2 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n+        StorageLive(_4);                 // scope 3 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n+        _4 = &raw mut (*_1);             // scope 3 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n+        StorageLive(_5);                 // scope 3 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n+        _5 = _2;                         // scope 3 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n+        StorageLive(_9);                 // scope 3 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n+        StorageLive(_7);                 // scope 8 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+        StorageLive(_8);                 // scope 8 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+        _8 = &_5;                        // scope 8 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+        _7 = &raw const (*_8);           // scope 8 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+        copy_nonoverlapping(dst = _4, src = move _7, count = const 1_usize); // scope 8 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+        StorageDead(_7);                 // scope 8 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+        StorageDead(_8);                 // scope 8 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+        StorageDead(_9);                 // scope 3 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n+        StorageDead(_5);                 // scope 3 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n+        StorageDead(_4);                 // scope 3 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n+        return;                          // scope 0 at $DIR/mem_replace.rs:+2:2: +2:2\n+    }\n+}"}, {"sha": "e5066c38b9679f48adc4c10bd2d3c907d104ae97", "filename": "tests/mir-opt/pre-codegen/mem_replace.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ca3f742ff6fe12b6bb247546189d44718f679799/tests%2Fmir-opt%2Fpre-codegen%2Fmem_replace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca3f742ff6fe12b6bb247546189d44718f679799/tests%2Fmir-opt%2Fpre-codegen%2Fmem_replace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpre-codegen%2Fmem_replace.rs?ref=ca3f742ff6fe12b6bb247546189d44718f679799", "patch": "@@ -0,0 +1,17 @@\n+// compile-flags: -O -C debuginfo=0 -Zmir-opt-level=2\n+// only-64bit\n+// ignore-debug\n+\n+#![crate_type = \"lib\"]\n+\n+// EMIT_MIR mem_replace.manual_replace.PreCodegen.after.mir\n+pub fn manual_replace(r: &mut u32, v: u32) -> u32 {\n+    let temp = *r;\n+    *r = v;\n+    temp\n+}\n+\n+// EMIT_MIR mem_replace.mem_replace.PreCodegen.after.mir\n+pub fn mem_replace(r: &mut u32, v: u32) -> u32 {\n+    std::mem::replace(r, v)\n+}"}]}