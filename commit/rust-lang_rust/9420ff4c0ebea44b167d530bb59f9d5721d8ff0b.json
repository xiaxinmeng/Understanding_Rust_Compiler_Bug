{"sha": "9420ff4c0ebea44b167d530bb59f9d5721d8ff0b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0MjBmZjRjMGViZWE0NGIxNjdkNTMwYmI1OWY5ZDU3MjFkOGZmMGI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-23T07:27:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-23T07:27:17Z"}, "message": "Auto merge of #66597 - MaulingMonkey:pr-natvis-std-collections-hash, r=michaelwoerister\n\ndebuginfo:  Support for std::collections::Hash* in windows debuggers.\n\nOkay, I finally needed to debug code involving a HashMap!  Added support for HashSet s as well.\n\nr? @michaelwoerister\n\n### Local Testing\n\nVerified these are passing locally:\n```cmd\n:: cmd.exe\npython x.py test --stage 1 --build x86_64-pc-windows-msvc src/test/debuginfo\npython x.py test --stage 1 --build i686-pc-windows-msvc src/test/debuginfo\npython x.py test --stage 1 src/tools/tidy\n\n:: MinGW MSYS2\n./x.py test --stage 1 --build x86_64-pc-windows-gnu src/test/debuginfo\n```\n\n### Related Issues\n\n* https://github.com/rust-lang/rust/issues/36503\n* https://github.com/rust-lang/rust/issues/40460\n* https://github.com/rust-gamedev/wg/issues/20", "tree": {"sha": "83f6563bf56a871442a4909c363273394901073d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/83f6563bf56a871442a4909c363273394901073d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9420ff4c0ebea44b167d530bb59f9d5721d8ff0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9420ff4c0ebea44b167d530bb59f9d5721d8ff0b", "html_url": "https://github.com/rust-lang/rust/commit/9420ff4c0ebea44b167d530bb59f9d5721d8ff0b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9420ff4c0ebea44b167d530bb59f9d5721d8ff0b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9025395c8e46599f062216c818e3388e597d553", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9025395c8e46599f062216c818e3388e597d553", "html_url": "https://github.com/rust-lang/rust/commit/d9025395c8e46599f062216c818e3388e597d553"}, {"sha": "839d58ca56581c432d537ccca7a04010535d748c", "url": "https://api.github.com/repos/rust-lang/rust/commits/839d58ca56581c432d537ccca7a04010535d748c", "html_url": "https://github.com/rust-lang/rust/commit/839d58ca56581c432d537ccca7a04010535d748c"}], "stats": {"total": 200, "additions": 200, "deletions": 0}, "files": [{"sha": "d0c9e0dbaf458eaca013794d91645b636114d3d9", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9420ff4c0ebea44b167d530bb59f9d5721d8ff0b/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9420ff4c0ebea44b167d530bb59f9d5721d8ff0b/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=9420ff4c0ebea44b167d530bb59f9d5721d8ff0b", "patch": "@@ -616,6 +616,7 @@ impl Step for DebuggerScripts {\n             cp_debugger_script(\"natvis/intrinsic.natvis\");\n             cp_debugger_script(\"natvis/liballoc.natvis\");\n             cp_debugger_script(\"natvis/libcore.natvis\");\n+            cp_debugger_script(\"natvis/libstd.natvis\");\n         } else {\n             cp_debugger_script(\"debugger_pretty_printers_common.py\");\n "}, {"sha": "b3fc3d17af7fe15298a7cc57cec96eec6f633ba9", "filename": "src/etc/natvis/libstd.natvis", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/9420ff4c0ebea44b167d530bb59f9d5721d8ff0b/src%2Fetc%2Fnatvis%2Flibstd.natvis", "raw_url": "https://github.com/rust-lang/rust/raw/9420ff4c0ebea44b167d530bb59f9d5721d8ff0b/src%2Fetc%2Fnatvis%2Flibstd.natvis", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fnatvis%2Flibstd.natvis?ref=9420ff4c0ebea44b167d530bb59f9d5721d8ff0b", "patch": "@@ -0,0 +1,102 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<AutoVisualizer xmlns=\"http://schemas.microsoft.com/vstudio/debugger/natvis/2010\">\n+  <!--\n+    std::collection::Hash* container visualizers\n+\n+    Current std impls:\n+      std::collections::hash::set::HashSet<K, S>      is implemented in terms of...\n+      std::collections::hash::map::HashMap<K, V, S>   is implemented in terms of...\n+      hashbrown::map::HashMap<K, V, S>                is implemented in terms of...\n+      hashbrown::raw::RawTable<(K, V)>\n+\n+    Ideally, we'd teach rustc to scan dependencies/crates for .natvis files so\n+    the bulk of this could live alongside the hashbrown crate implementation,\n+    and std would just forward using e.g. <ExpandedItem>base</ExpandedItem>.\n+\n+    However, Given that std...Hash*Set* is currently implemented in terms of\n+    hashbrown...Hash*Map*, which would visualize poorly, we want to customize the\n+    look/feel at the std type level *anyways*...\n+\n+    References:\n+      https://github.com/rust-lang/rust/blob/master/src/libstd/collections/hash/map.rs\n+      https://github.com/rust-lang/rust/blob/master/src/libstd/collections/hash/set.rs\n+      https://github.com/rust-lang/hashbrown/blob/master/src/map.rs\n+      https://github.com/rust-lang/hashbrown/blob/master/src/set.rs\n+      https://github.com/rust-lang/hashbrown/blob/master/src/raw/mod.rs\n+  -->\n+\n+  <Type Name=\"std::collections::hash::map::HashMap&lt;*,*,*&gt;\">\n+    <DisplayString>{{ size={base.table.items} }}</DisplayString>\n+    <Expand>\n+      <Item Name=\"[size]\">base.table.items</Item>\n+      <Item Name=\"[capacity]\">base.table.items + base.table.growth_left</Item>\n+\n+      <CustomListItems>\n+        <Variable Name=\"i\" InitialValue=\"0\" />\n+        <Variable Name=\"n\" InitialValue=\"base.table.items\" />\n+        <Size>base.table.items</Size>\n+        <Loop>\n+          <Break Condition=\"n == 0\" />\n+          <If Condition=\"(base.table.ctrl.pointer[i] &amp; 0x80) == 0\">\n+            <!-- Bucket is populated -->\n+            <Exec>n--</Exec>\n+            <Item Name=\"{base.table.data.pointer[i].__0}\">base.table.data.pointer[i].__1</Item>\n+          </If>\n+          <Exec>i++</Exec>\n+        </Loop>\n+      </CustomListItems>\n+    </Expand>\n+  </Type>\n+\n+  <Type Name=\"std::collections::hash::set::HashSet&lt;*,*&gt;\">\n+    <DisplayString>{{ size={map.base.table.items} }}</DisplayString>\n+    <Expand>\n+      <Item Name=\"[size]\">map.base.table.items</Item>\n+      <Item Name=\"[capacity]\">map.base.table.items + map.base.table.growth_left</Item>\n+\n+      <CustomListItems>\n+        <Variable Name=\"i\" InitialValue=\"0\" />\n+        <Variable Name=\"n\" InitialValue=\"map.base.table.items\" />\n+        <Size>map.base.table.items</Size>\n+        <Loop>\n+          <Break Condition=\"n == 0\" />\n+          <If Condition=\"(map.base.table.ctrl.pointer[i] &amp; 0x80) == 0\">\n+            <!-- Bucket is populated -->\n+            <Exec>n--</Exec>\n+            <Item>map.base.table.data.pointer[i].__0</Item>\n+          </If>\n+          <Exec>i++</Exec>\n+        </Loop>\n+      </CustomListItems>\n+    </Expand>\n+  </Type>\n+\n+  <Type Name=\"hashbrown::raw::RawTable&lt;*&gt;\">\n+    <!-- RawTable has a nice and simple layout.\n+      items                     Number of *populated* values in the RawTable (less than the size of ctrl.pointer / data.pointer)\n+      growth_left               Remaining capacity before growth\n+      ctrl.pointer[i] & 0x80    Indicates the bucket is empty / should be skipped / doesn't count towards items.\n+      data.pointer[i]           The (K,V) tuple, if not empty.\n+    -->\n+    <DisplayString>{{ size={items} }}</DisplayString>\n+    <Expand>\n+      <Item Name=\"[size]\">items</Item>\n+      <Item Name=\"[capacity]\">items + growth_left</Item>\n+\n+      <CustomListItems>\n+        <Variable Name=\"i\" InitialValue=\"0\" />\n+        <Variable Name=\"n\" InitialValue=\"items\" />\n+        <Size>items</Size>\n+        <Loop>\n+          <Break Condition=\"n == 0\" />\n+          <If Condition=\"(ctrl.pointer[i] &amp; 0x80) == 0\">\n+            <!-- Bucket is populated -->\n+            <Exec>n--</Exec>\n+            <Item>data.pointer[i]</Item>\n+          </If>\n+          <Exec>i++</Exec>\n+        </Loop>\n+      </CustomListItems>\n+    </Expand>\n+  </Type>\n+</AutoVisualizer>"}, {"sha": "361b300f28ced614337a106d108863ccb284a2ce", "filename": "src/test/debuginfo/pretty-std-collections-hash.rs", "status": "added", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/9420ff4c0ebea44b167d530bb59f9d5721d8ff0b/src%2Ftest%2Fdebuginfo%2Fpretty-std-collections-hash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9420ff4c0ebea44b167d530bb59f9d5721d8ff0b/src%2Ftest%2Fdebuginfo%2Fpretty-std-collections-hash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fpretty-std-collections-hash.rs?ref=9420ff4c0ebea44b167d530bb59f9d5721d8ff0b", "patch": "@@ -0,0 +1,97 @@\n+// cdb-only\n+// compile-flags:-g\n+\n+// === CDB TESTS ==================================================================================\n+\n+// cdb-command: g\n+\n+// cdb-command: dx hash_set,d\n+// cdb-check:hash_set,d [...] : { size=15 } [Type: [...]::HashSet<u64, [...]>]\n+// cdb-check:    [size]           : 15 [Type: [...]]\n+// cdb-check:    [capacity]       : [...]\n+// cdb-check:    [[...]] [...]    : 0 [Type: unsigned __int64]\n+// cdb-command: dx hash_set,d\n+// cdb-check:    [[...]] [...]    : 1 [Type: unsigned __int64]\n+// cdb-command: dx hash_set,d\n+// cdb-check:    [[...]] [...]    : 2 [Type: unsigned __int64]\n+// cdb-command: dx hash_set,d\n+// cdb-check:    [[...]] [...]    : 3 [Type: unsigned __int64]\n+// cdb-command: dx hash_set,d\n+// cdb-check:    [[...]] [...]    : 4 [Type: unsigned __int64]\n+// cdb-command: dx hash_set,d\n+// cdb-check:    [[...]] [...]    : 5 [Type: unsigned __int64]\n+// cdb-command: dx hash_set,d\n+// cdb-check:    [[...]] [...]    : 6 [Type: unsigned __int64]\n+// cdb-command: dx hash_set,d\n+// cdb-check:    [[...]] [...]    : 7 [Type: unsigned __int64]\n+// cdb-command: dx hash_set,d\n+// cdb-check:    [[...]] [...]    : 8 [Type: unsigned __int64]\n+// cdb-command: dx hash_set,d\n+// cdb-check:    [[...]] [...]    : 9 [Type: unsigned __int64]\n+// cdb-command: dx hash_set,d\n+// cdb-check:    [[...]] [...]    : 10 [Type: unsigned __int64]\n+// cdb-command: dx hash_set,d\n+// cdb-check:    [[...]] [...]    : 11 [Type: unsigned __int64]\n+// cdb-command: dx hash_set,d\n+// cdb-check:    [[...]] [...]    : 12 [Type: unsigned __int64]\n+// cdb-command: dx hash_set,d\n+// cdb-check:    [[...]] [...]    : 13 [Type: unsigned __int64]\n+// cdb-command: dx hash_set,d\n+// cdb-check:    [[...]] [...]    : 14 [Type: unsigned __int64]\n+\n+// cdb-command: dx hash_map,d\n+// cdb-check:hash_map,d [...] : { size=15 } [Type: [...]::HashMap<u64, u64, [...]>]\n+// cdb-check:    [size]           : 15 [Type: [...]]\n+// cdb-check:    [capacity]       : [...]\n+// cdb-check:    [\"0x0\"]          : 0 [Type: unsigned __int64]\n+// cdb-command: dx hash_map,d\n+// cdb-check:    [\"0x1\"]          : 1 [Type: unsigned __int64]\n+// cdb-command: dx hash_map,d\n+// cdb-check:    [\"0x2\"]          : 2 [Type: unsigned __int64]\n+// cdb-command: dx hash_map,d\n+// cdb-check:    [\"0x3\"]          : 3 [Type: unsigned __int64]\n+// cdb-command: dx hash_map,d\n+// cdb-check:    [\"0x4\"]          : 4 [Type: unsigned __int64]\n+// cdb-command: dx hash_map,d\n+// cdb-check:    [\"0x5\"]          : 5 [Type: unsigned __int64]\n+// cdb-command: dx hash_map,d\n+// cdb-check:    [\"0x6\"]          : 6 [Type: unsigned __int64]\n+// cdb-command: dx hash_map,d\n+// cdb-check:    [\"0x7\"]          : 7 [Type: unsigned __int64]\n+// cdb-command: dx hash_map,d\n+// cdb-check:    [\"0x8\"]          : 8 [Type: unsigned __int64]\n+// cdb-command: dx hash_map,d\n+// cdb-check:    [\"0x9\"]          : 9 [Type: unsigned __int64]\n+// cdb-command: dx hash_map,d\n+// cdb-check:    [\"0xa\"]          : 10 [Type: unsigned __int64]\n+// cdb-command: dx hash_map,d\n+// cdb-check:    [\"0xb\"]          : 11 [Type: unsigned __int64]\n+// cdb-command: dx hash_map,d\n+// cdb-check:    [\"0xc\"]          : 12 [Type: unsigned __int64]\n+// cdb-command: dx hash_map,d\n+// cdb-check:    [\"0xd\"]          : 13 [Type: unsigned __int64]\n+// cdb-command: dx hash_map,d\n+// cdb-check:    [\"0xe\"]          : 14 [Type: unsigned __int64]\n+\n+#![allow(unused_variables)]\n+use std::collections::HashSet;\n+use std::collections::HashMap;\n+\n+\n+fn main() {\n+    // HashSet\n+    let mut hash_set = HashSet::new();\n+    for i in 0..15 {\n+        hash_set.insert(i as u64);\n+    }\n+\n+    // HashMap\n+    let mut hash_map = HashMap::new();\n+    for i in 0..15 {\n+        hash_map.insert(i as u64, i as u64);\n+    }\n+\n+    zzz(); // #break\n+}\n+\n+fn zzz() { () }"}]}