{"sha": "864ff4707e21fc038ae33e2aed31264a39c5dac7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2NGZmNDcwN2UyMWZjMDM4YWUzM2UyYWVkMzEyNjRhMzljNWRhYzc=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-03-12T20:24:37Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-03-12T20:25:10Z"}, "message": "rustc: Map region names to their functions. Also speed up region checking by 17x.", "tree": {"sha": "5ce1e6355246a3fe842b00ec3ecbd52e5c890b5c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ce1e6355246a3fe842b00ec3ecbd52e5c890b5c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/864ff4707e21fc038ae33e2aed31264a39c5dac7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/864ff4707e21fc038ae33e2aed31264a39c5dac7", "html_url": "https://github.com/rust-lang/rust/commit/864ff4707e21fc038ae33e2aed31264a39c5dac7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/864ff4707e21fc038ae33e2aed31264a39c5dac7/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db79f3c0a54c8fe27713264cc62d89fa837f62d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/db79f3c0a54c8fe27713264cc62d89fa837f62d7", "html_url": "https://github.com/rust-lang/rust/commit/db79f3c0a54c8fe27713264cc62d89fa837f62d7"}], "stats": {"total": 107, "additions": 65, "deletions": 42}, "files": [{"sha": "834ccab1afeed259224074af052b9548079d5e86", "filename": "src/rustc/middle/region.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/864ff4707e21fc038ae33e2aed31264a39c5dac7/src%2Frustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864ff4707e21fc038ae33e2aed31264a39c5dac7/src%2Frustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fregion.rs?ref=864ff4707e21fc038ae33e2aed31264a39c5dac7", "patch": "@@ -6,6 +6,8 @@\n import driver::session::session;\n import middle::ty;\n import syntax::{ast, visit};\n+import util::common::new_def_hash;\n+\n import std::map;\n import std::map::hashmap;\n \n@@ -27,6 +29,8 @@ type region_map = {\n     ast_type_to_region: hashmap<ast::node_id,ty::region>,\n     /* Mapping from a local variable to its containing block. */\n     local_blocks: hashmap<ast::node_id,ast::node_id>,\n+    /* Mapping from a region name to its function. */\n+    region_name_to_fn: hashmap<ast::def_id,ast::node_id>,\n };\n \n type ctxt = {\n@@ -105,9 +109,15 @@ fn resolve_ty(ty: @ast::ty, cx: ctxt, visitor: visit::vt<ctxt>) {\n                     alt cx.names_in_scope.find(ident) {\n                         some(def_id) { region = ty::re_named(def_id); }\n                         none {\n+                            let def_id = {crate: ast::local_crate,\n+                                          node: region_id};\n+                            cx.names_in_scope.insert(ident, def_id);\n+                            region = ty::re_named(def_id);\n+\n                             alt cx.parent {\n-                                pa_item(_) | pa_nested_fn(_) {\n-                                    /* ok; fall through */\n+                                pa_item(fn_id) | pa_nested_fn(fn_id) {\n+                                    let rf = cx.region_map.region_name_to_fn;\n+                                    rf.insert(def_id, fn_id);\n                                 }\n                                 pa_block(_) {\n                                     cx.sess.span_err(ty.span,\n@@ -120,11 +130,6 @@ fn resolve_ty(ty: @ast::ty, cx: ctxt, visitor: visit::vt<ctxt>) {\n                                                      \"level?!\");\n                                 }\n                             }\n-\n-                            let def_id = {crate: ast::local_crate,\n-                                          node: region_id};\n-                            cx.names_in_scope.insert(ident, def_id);\n-                            region = ty::re_named(def_id);\n                         }\n                     }\n                 }\n@@ -256,7 +261,8 @@ fn resolve_crate(sess: session, def_map: resolve::def_map, crate: @ast::crate)\n                     def_map: def_map,\n                     region_map: @{parents: map::new_int_hash(),\n                                   ast_type_to_region: map::new_int_hash(),\n-                                  local_blocks: map::new_int_hash()},\n+                                  local_blocks: map::new_int_hash(),\n+                                  region_name_to_fn: new_def_hash()},\n                     names_in_scope: map::new_str_hash(),\n                     mut queued_locals: [],\n                     parent: pa_crate,"}, {"sha": "65b1d0673a658731fca22a8acd64d9ddfa06a91f", "filename": "src/rustc/middle/regionck.rs", "status": "modified", "additions": 25, "deletions": 21, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/864ff4707e21fc038ae33e2aed31264a39c5dac7/src%2Frustc%2Fmiddle%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864ff4707e21fc038ae33e2aed31264a39c5dac7/src%2Frustc%2Fmiddle%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fregionck.rs?ref=864ff4707e21fc038ae33e2aed31264a39c5dac7", "patch": "@@ -22,33 +22,37 @@ type ctxt = {\n };\n \n fn check_expr(expr: @ast::expr, cx: ctxt, visitor: visit::vt<ctxt>) {\n-    ty::walk_ty(cx.tcx, ty::expr_ty(cx.tcx, expr)) { |t|\n-        alt ty::get(t).struct {\n-            ty::ty_rptr(region, _) {\n-                alt region {\n-                    ty::re_named(_) | ty::re_caller(_) { /* ok */ }\n-                    ty::re_block(rbi) {\n-                        let referent_block_id = rbi;\n-                        let enclosing_block_id = alt cx.enclosing_block {\n-                            none {\n-                                cx.tcx.sess.span_bug(expr.span, \"block \" +\n-                                                     \"region type outside \" +\n-                                                     \"a block?!\");\n-                            }\n-                            some(eb) { eb }\n-                        };\n+    let t = ty::expr_ty(cx.tcx, expr);\n+    if ty::type_has_rptrs(t) {\n+        ty::walk_ty(cx.tcx, t) { |t|\n+            alt ty::get(t).struct {\n+                ty::ty_rptr(region, _) {\n+                    alt region {\n+                        ty::re_named(_) | ty::re_caller(_) { /* ok */ }\n+                        ty::re_block(rbi) {\n+                            let referent_block_id = rbi;\n+                            let enclosing_block_id = alt cx.enclosing_block {\n+                                none {\n+                                    cx.tcx.sess.span_bug(expr.span,\n+                                                         \"block region \" +\n+                                                         \"type outside a \" +\n+                                                         \"block?!\");\n+                                }\n+                                some(eb) { eb }\n+                            };\n \n-                        if !region::scope_contains(cx.tcx.region_map,\n-                                                   referent_block_id,\n-                                                   enclosing_block_id) {\n+                            if !region::scope_contains(cx.tcx.region_map,\n+                                                       referent_block_id,\n+                                                       enclosing_block_id) {\n \n-                            cx.tcx.sess.span_err(expr.span, \"reference \" +\n-                                                 \"escapes its block\");\n+                                cx.tcx.sess.span_err(expr.span, \"reference \" +\n+                                                     \"escapes its block\");\n+                            }\n                         }\n                     }\n                 }\n+                _ { /* no-op */ }\n             }\n-            _ { /* no-op */ }\n         }\n     }\n "}, {"sha": "01c8b2ca28c85963de2190e03d3f7a41f5118e7c", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 26, "deletions": 13, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/864ff4707e21fc038ae33e2aed31264a39c5dac7/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864ff4707e21fc038ae33e2aed31264a39c5dac7/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=864ff4707e21fc038ae33e2aed31264a39c5dac7", "patch": "@@ -89,7 +89,7 @@ export ty_uniq, mk_uniq, mk_imm_uniq, type_is_unique_box;\n export ty_var, mk_var;\n export ty_self, mk_self;\n export region, re_named, re_caller, re_block;\n-export get, type_has_params, type_has_vars, type_id;\n+export get, type_has_params, type_has_vars, type_has_rptrs, type_id;\n export same_type;\n export ty_var_id;\n export ty_fn_args;\n@@ -187,6 +187,7 @@ type t_box = @{struct: sty,\n                id: uint,\n                has_params: bool,\n                has_vars: bool,\n+               has_rptrs: bool,\n                o_def_id: option<ast::def_id>};\n \n // To reduce refcounting cost, we're representing types as unsafe pointers\n@@ -206,6 +207,7 @@ pure fn get(t: t) -> t_box unsafe {\n \n fn type_has_params(t: t) -> bool { get(t).has_params }\n fn type_has_vars(t: t) -> bool { get(t).has_vars }\n+fn type_has_rptrs(t: t) -> bool { get(t).has_rptrs }\n fn type_def_id(t: t) -> option<ast::def_id> { get(t).o_def_id }\n fn type_id(t: t) -> uint { get(t).id }\n \n@@ -368,11 +370,13 @@ fn mk_t_with_id(cx: ctxt, st: sty, o_def_id: option<ast::def_id>) -> t {\n       some(t) { unsafe { ret unsafe::reinterpret_cast(t); } }\n       _ {}\n     }\n-    let has_params = false, has_vars = false;\n-    fn derive_flags(&has_params: bool, &has_vars: bool, tt: t) {\n+    let has_params = false, has_vars = false, has_rptrs = false;\n+    fn derive_flags(&has_params: bool, &has_vars: bool, &has_rptrs: bool,\n+                    tt: t) {\n         let t = get(tt);\n         has_params |= t.has_params;\n         has_vars |= t.has_vars;\n+        has_rptrs |= t.has_rptrs;\n     }\n     alt st {\n       ty_nil | ty_bot | ty_bool | ty_int(_) | ty_float(_) | ty_uint(_) |\n@@ -381,33 +385,42 @@ fn mk_t_with_id(cx: ctxt, st: sty, o_def_id: option<ast::def_id>) -> t {\n       ty_param(_, _) { has_params = true; }\n       ty_var(_) | ty_self(_) { has_vars = true; }\n       ty_enum(_, tys) | ty_iface(_, tys) | ty_class(_, tys) {\n-        for tt in tys { derive_flags(has_params, has_vars, tt); }\n+        for tt in tys { derive_flags(has_params, has_vars, has_rptrs, tt); }\n       }\n-      ty_box(m) | ty_uniq(m) | ty_vec(m) | ty_ptr(m) | ty_rptr(_, m) {\n-        derive_flags(has_params, has_vars, m.ty);\n+      ty_box(m) | ty_uniq(m) | ty_vec(m) | ty_ptr(m) {\n+        derive_flags(has_params, has_vars, has_rptrs, m.ty);\n+      }\n+      ty_rptr(_, m) {\n+        has_rptrs = true;\n+        derive_flags(has_params, has_vars, has_rptrs, m.ty);\n       }\n       ty_rec(flds) {\n-        for f in flds { derive_flags(has_params, has_vars, f.mt.ty); }\n+        for f in flds {\n+          derive_flags(has_params, has_vars, has_rptrs, f.mt.ty);\n+        }\n       }\n       ty_tup(ts) {\n-        for tt in ts { derive_flags(has_params, has_vars, tt); }\n+        for tt in ts { derive_flags(has_params, has_vars, has_rptrs, tt); }\n       }\n       ty_fn(f) {\n-        for a in f.inputs { derive_flags(has_params, has_vars, a.ty); }\n-        derive_flags(has_params, has_vars, f.output);\n+        for a in f.inputs {\n+          derive_flags(has_params, has_vars, has_rptrs, a.ty);\n+        }\n+        derive_flags(has_params, has_vars, has_rptrs, f.output);\n       }\n       ty_res(_, tt, tps) {\n-        derive_flags(has_params, has_vars, tt);\n-        for tt in tps { derive_flags(has_params, has_vars, tt); }\n+        derive_flags(has_params, has_vars, has_rptrs, tt);\n+        for tt in tps { derive_flags(has_params, has_vars, has_rptrs, tt); }\n       }\n       ty_constr(tt, _) {\n-        derive_flags(has_params, has_vars, tt);\n+        derive_flags(has_params, has_vars, has_rptrs, tt);\n       }\n     }\n     let t = @{struct: st,\n               id: cx.next_id,\n               has_params: has_params,\n               has_vars: has_vars,\n+              has_rptrs: has_rptrs,\n               o_def_id: o_def_id};\n     cx.interner.insert(key, t);\n     cx.next_id += 1u;"}]}