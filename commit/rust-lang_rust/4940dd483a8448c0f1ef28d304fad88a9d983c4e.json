{"sha": "4940dd483a8448c0f1ef28d304fad88a9d983c4e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5NDBkZDQ4M2E4NDQ4YzBmMWVmMjhkMzA0ZmFkODhhOWQ5ODNjNGU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-08T05:05:55Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-08T05:05:55Z"}, "message": "Auto merge of #80962 - jhpratt:const_int_fn-stabilization, r=dtolnay\n\nStabilize remaining integer methods as `const fn`\n\nThis pull request stabilizes the following methods as `const fn`:\n\n- `i*::checked_div`\n- `i*::checked_div_euclid`\n- `i*::checked_rem`\n- `i*::checked_rem_euclid`\n- `i*::div_euclid`\n- `i*::overflowing_div`\n- `i*::overflowing_div_euclid`\n- `i*::overflowing_rem`\n- `i*::overflowing_rem_euclid`\n- `i*::rem_euclid`\n- `i*::wrapping_div`\n- `i*::wrapping_div_euclid`\n- `i*::wrapping_rem`\n- `i*::wrapping_rem_euclid`\n- `u*::checked_div`\n- `u*::checked_div_euclid`\n- `u*::checked_rem`\n- `u*::checked_rem_euclid`\n- `u*::div_euclid`\n- `u*::overflowing_div`\n- `u*::overflowing_div_euclid`\n- `u*::overflowing_rem`\n- `u*::overflowing_rem_euclid`\n- `u*::rem_euclid`\n- `u*::wrapping_div`\n- `u*::wrapping_div_euclid`\n- `u*::wrapping_rem`\n- `u*::wrapping_rem_euclid`\n\nThese can all be implemented on the current stable (1.49). There are two unstable details: const likely/unlikely and unchecked division/remainder. Both of these are for optimizations, and are in no way required to make the methods function; there is no exposure of these details publicly. Per comments below, it seems best practice is to stabilize the intrinsics. As such, `intrinsics::unchecked_div` and `intrinsics::unchecked_rem` have been stabilized as `const` as part of this pull request as well. The methods themselves remain unstable.\n\nI believe part of the reason these were not stabilized previously was the behavior around division by 0 and modulo 0. After testing on nightly, the diagnostic for something like `const _: i8 = 5i8 % 0i8;` is similar to that of `const _: i8 = 5i8.rem_euclid(0i8);` (assuming the appropriate feature flag is enabled). As such, I believe these methods are ready to be stabilized as `const fn`.\n\nThis pull request represents the final methods mentioned in #53718. As such, this PR closes #53718.\n\n`@rustbot` modify labels to +A-const-fn, +T-libs", "tree": {"sha": "51a540860b706b2e0d27ca468d3f2bf6fbaab453", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/51a540860b706b2e0d27ca468d3f2bf6fbaab453"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4940dd483a8448c0f1ef28d304fad88a9d983c4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4940dd483a8448c0f1ef28d304fad88a9d983c4e", "html_url": "https://github.com/rust-lang/rust/commit/4940dd483a8448c0f1ef28d304fad88a9d983c4e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4940dd483a8448c0f1ef28d304fad88a9d983c4e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b7a598e12649d7ab2415a82cbc3fea879fa9dab", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b7a598e12649d7ab2415a82cbc3fea879fa9dab", "html_url": "https://github.com/rust-lang/rust/commit/0b7a598e12649d7ab2415a82cbc3fea879fa9dab"}, {"sha": "f55029ab04e0d416db24af9b537be26e808f6f59", "url": "https://api.github.com/repos/rust-lang/rust/commits/f55029ab04e0d416db24af9b537be26e808f6f59", "html_url": "https://github.com/rust-lang/rust/commit/f55029ab04e0d416db24af9b537be26e808f6f59"}], "stats": {"total": 68, "additions": 30, "deletions": 38}, "files": [{"sha": "080a0a21188ea7ee78bf4fceedf716aa2198d2bd", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4940dd483a8448c0f1ef28d304fad88a9d983c4e/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4940dd483a8448c0f1ef28d304fad88a9d983c4e/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=4940dd483a8448c0f1ef28d304fad88a9d983c4e", "patch": "@@ -1586,15 +1586,15 @@ extern \"rust-intrinsic\" {\n     /// Safe wrappers for this intrinsic are available on the integer\n     /// primitives via the `checked_div` method. For example,\n     /// [`u32::checked_div`]\n-    #[rustc_const_unstable(feature = \"const_int_unchecked_arith\", issue = \"none\")]\n+    #[rustc_const_stable(feature = \"const_int_unchecked_arith\", since = \"1.51.0\")]\n     pub fn unchecked_div<T: Copy>(x: T, y: T) -> T;\n     /// Returns the remainder of an unchecked division, resulting in\n     /// undefined behavior when `y == 0` or `x == T::MIN && y == -1`\n     ///\n     /// Safe wrappers for this intrinsic are available on the integer\n     /// primitives via the `checked_rem` method. For example,\n     /// [`u32::checked_rem`]\n-    #[rustc_const_unstable(feature = \"const_int_unchecked_arith\", issue = \"none\")]\n+    #[rustc_const_stable(feature = \"const_int_unchecked_arith\", since = \"1.51.0\")]\n     pub fn unchecked_rem<T: Copy>(x: T, y: T) -> T;\n \n     /// Performs an unchecked left shift, resulting in undefined behavior when"}, {"sha": "fd4a76c1eb548e4365a40fb8bc5c165a100cbdf5", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4940dd483a8448c0f1ef28d304fad88a9d983c4e/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4940dd483a8448c0f1ef28d304fad88a9d983c4e/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=4940dd483a8448c0f1ef28d304fad88a9d983c4e", "patch": "@@ -73,11 +73,8 @@\n #![feature(const_discriminant)]\n #![feature(const_cell_into_inner)]\n #![feature(const_intrinsic_copy)]\n-#![feature(const_checked_int_methods)]\n-#![feature(const_euclidean_int_methods)]\n #![feature(const_float_classify)]\n #![feature(const_float_bits_conv)]\n-#![feature(const_overflowing_int_methods)]\n #![feature(const_int_unchecked_arith)]\n #![feature(const_mut_refs)]\n #![feature(const_cttz)]"}, {"sha": "1a60c3c7b7eab5f76a850f116b79a112def63b03", "filename": "library/core/src/num/int_macros.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4940dd483a8448c0f1ef28d304fad88a9d983c4e/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4940dd483a8448c0f1ef28d304fad88a9d983c4e/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs?ref=4940dd483a8448c0f1ef28d304fad88a9d983c4e", "patch": "@@ -513,7 +513,7 @@ macro_rules! int_impl {\n         #[doc = concat!(\"assert_eq!((1\", stringify!($SelfT), \").checked_div(0), None);\")]\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        #[rustc_const_unstable(feature = \"const_checked_int_methods\", issue = \"53718\")]\n+        #[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.51.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n@@ -539,7 +539,7 @@ macro_rules! int_impl {\n         #[doc = concat!(\"assert_eq!((1\", stringify!($SelfT), \").checked_div_euclid(0), None);\")]\n         /// ```\n         #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n-        #[rustc_const_unstable(feature = \"const_euclidean_int_methods\", issue = \"53718\")]\n+        #[rustc_const_stable(feature = \"const_euclidean_int_methods\", since = \"1.51.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n@@ -565,7 +565,7 @@ macro_rules! int_impl {\n         #[doc = concat!(\"assert_eq!(\", stringify!($SelfT), \"::MIN.checked_rem(-1), None);\")]\n         /// ```\n         #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-        #[rustc_const_unstable(feature = \"const_checked_int_methods\", issue = \"53718\")]\n+        #[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.51.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n@@ -591,7 +591,7 @@ macro_rules! int_impl {\n         #[doc = concat!(\"assert_eq!(\", stringify!($SelfT), \"::MIN.checked_rem_euclid(-1), None);\")]\n         /// ```\n         #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n-        #[rustc_const_unstable(feature = \"const_euclidean_int_methods\", issue = \"53718\")]\n+        #[rustc_const_stable(feature = \"const_euclidean_int_methods\", since = \"1.51.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n@@ -949,7 +949,7 @@ macro_rules! int_impl {\n         /// assert_eq!((-128i8).wrapping_div(-1), -128);\n         /// ```\n         #[stable(feature = \"num_wrapping\", since = \"1.2.0\")]\n-        #[rustc_const_unstable(feature = \"const_wrapping_int_methods\", issue = \"53718\")]\n+        #[rustc_const_stable(feature = \"const_wrapping_int_methods\", since = \"1.51.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n@@ -977,7 +977,7 @@ macro_rules! int_impl {\n         /// assert_eq!((-128i8).wrapping_div_euclid(-1), -128);\n         /// ```\n         #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n-        #[rustc_const_unstable(feature = \"const_euclidean_int_methods\", issue = \"53718\")]\n+        #[rustc_const_stable(feature = \"const_euclidean_int_methods\", since = \"1.51.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n@@ -1005,7 +1005,7 @@ macro_rules! int_impl {\n         /// assert_eq!((-128i8).wrapping_rem(-1), 0);\n         /// ```\n         #[stable(feature = \"num_wrapping\", since = \"1.2.0\")]\n-        #[rustc_const_unstable(feature = \"const_wrapping_int_methods\", issue = \"53718\")]\n+        #[rustc_const_stable(feature = \"const_wrapping_int_methods\", since = \"1.51.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n@@ -1032,7 +1032,7 @@ macro_rules! int_impl {\n         /// assert_eq!((-128i8).wrapping_rem_euclid(-1), 0);\n         /// ```\n         #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n-        #[rustc_const_unstable(feature = \"const_euclidean_int_methods\", issue = \"53718\")]\n+        #[rustc_const_stable(feature = \"const_euclidean_int_methods\", since = \"1.51.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n@@ -1299,7 +1299,7 @@ macro_rules! int_impl {\n         /// ```\n         #[inline]\n         #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-        #[rustc_const_unstable(feature = \"const_overflowing_int_methods\", issue = \"53718\")]\n+        #[rustc_const_stable(feature = \"const_overflowing_int_methods\", since = \"1.51.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         pub const fn overflowing_div(self, rhs: Self) -> (Self, bool) {\n@@ -1329,7 +1329,7 @@ macro_rules! int_impl {\n         /// ```\n         #[inline]\n         #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n-        #[rustc_const_unstable(feature = \"const_euclidean_int_methods\", issue = \"53718\")]\n+        #[rustc_const_stable(feature = \"const_euclidean_int_methods\", since = \"1.51.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         pub const fn overflowing_div_euclid(self, rhs: Self) -> (Self, bool) {\n@@ -1360,7 +1360,7 @@ macro_rules! int_impl {\n         /// ```\n         #[inline]\n         #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-        #[rustc_const_unstable(feature = \"const_overflowing_int_methods\", issue = \"53718\")]\n+        #[rustc_const_stable(feature = \"const_overflowing_int_methods\", since = \"1.51.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         pub const fn overflowing_rem(self, rhs: Self) -> (Self, bool) {\n@@ -1390,7 +1390,7 @@ macro_rules! int_impl {\n         #[doc = concat!(\"assert_eq!(\", stringify!($SelfT), \"::MIN.overflowing_rem_euclid(-1), (0, true));\")]\n         /// ```\n         #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n-        #[rustc_const_unstable(feature = \"const_euclidean_int_methods\", issue = \"53718\")]\n+        #[rustc_const_stable(feature = \"const_euclidean_int_methods\", since = \"1.51.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n@@ -1615,7 +1615,7 @@ macro_rules! int_impl {\n         /// assert_eq!((-a).div_euclid(-b), 2); // -7 >= -4 * 2\n         /// ```\n         #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n-        #[rustc_const_unstable(feature = \"const_euclidean_int_methods\", issue = \"53718\")]\n+        #[rustc_const_stable(feature = \"const_euclidean_int_methods\", since = \"1.51.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n@@ -1653,7 +1653,7 @@ macro_rules! int_impl {\n         /// assert_eq!((-a).rem_euclid(-b), 1);\n         /// ```\n         #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n-        #[rustc_const_unstable(feature = \"const_euclidean_int_methods\", issue = \"53718\")]\n+        #[rustc_const_stable(feature = \"const_euclidean_int_methods\", since = \"1.51.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]"}, {"sha": "ff5f432acd8ac200040ee97e817efbbce682ff59", "filename": "library/core/src/num/uint_macros.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4940dd483a8448c0f1ef28d304fad88a9d983c4e/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4940dd483a8448c0f1ef28d304fad88a9d983c4e/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs?ref=4940dd483a8448c0f1ef28d304fad88a9d983c4e", "patch": "@@ -522,7 +522,7 @@ macro_rules! uint_impl {\n         #[doc = concat!(\"assert_eq!(1\", stringify!($SelfT), \".checked_div(0), None);\")]\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        #[rustc_const_unstable(feature = \"const_checked_int_methods\", issue = \"53718\")]\n+        #[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.51.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n@@ -548,7 +548,7 @@ macro_rules! uint_impl {\n         #[doc = concat!(\"assert_eq!(1\", stringify!($SelfT), \".checked_div_euclid(0), None);\")]\n         /// ```\n         #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n-        #[rustc_const_unstable(feature = \"const_euclidean_int_methods\", issue = \"53718\")]\n+        #[rustc_const_stable(feature = \"const_euclidean_int_methods\", since = \"1.51.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n@@ -573,7 +573,7 @@ macro_rules! uint_impl {\n         #[doc = concat!(\"assert_eq!(5\", stringify!($SelfT), \".checked_rem(0), None);\")]\n         /// ```\n         #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-        #[rustc_const_unstable(feature = \"const_checked_int_methods\", issue = \"53718\")]\n+        #[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.51.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n@@ -599,7 +599,7 @@ macro_rules! uint_impl {\n         #[doc = concat!(\"assert_eq!(5\", stringify!($SelfT), \".checked_rem_euclid(0), None);\")]\n         /// ```\n         #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n-        #[rustc_const_unstable(feature = \"const_euclidean_int_methods\", issue = \"53718\")]\n+        #[rustc_const_stable(feature = \"const_euclidean_int_methods\", since = \"1.51.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n@@ -876,7 +876,7 @@ macro_rules! uint_impl {\n         #[doc = concat!(\"assert_eq!(100\", stringify!($SelfT), \".wrapping_div(10), 10);\")]\n         /// ```\n         #[stable(feature = \"num_wrapping\", since = \"1.2.0\")]\n-        #[rustc_const_unstable(feature = \"const_wrapping_int_methods\", issue = \"53718\")]\n+        #[rustc_const_stable(feature = \"const_wrapping_int_methods\", since = \"1.51.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n@@ -901,7 +901,7 @@ macro_rules! uint_impl {\n         #[doc = concat!(\"assert_eq!(100\", stringify!($SelfT), \".wrapping_div_euclid(10), 10);\")]\n         /// ```\n         #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n-        #[rustc_const_unstable(feature = \"const_euclidean_int_methods\", issue = \"53718\")]\n+        #[rustc_const_stable(feature = \"const_euclidean_int_methods\", since = \"1.51.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n@@ -924,7 +924,7 @@ macro_rules! uint_impl {\n         #[doc = concat!(\"assert_eq!(100\", stringify!($SelfT), \".wrapping_rem(10), 0);\")]\n         /// ```\n         #[stable(feature = \"num_wrapping\", since = \"1.2.0\")]\n-        #[rustc_const_unstable(feature = \"const_wrapping_int_methods\", issue = \"53718\")]\n+        #[rustc_const_stable(feature = \"const_wrapping_int_methods\", since = \"1.51.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n@@ -950,7 +950,7 @@ macro_rules! uint_impl {\n         #[doc = concat!(\"assert_eq!(100\", stringify!($SelfT), \".wrapping_rem_euclid(10), 0);\")]\n         /// ```\n         #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n-        #[rustc_const_unstable(feature = \"const_euclidean_int_methods\", issue = \"53718\")]\n+        #[rustc_const_stable(feature = \"const_euclidean_int_methods\", since = \"1.51.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n@@ -1185,7 +1185,7 @@ macro_rules! uint_impl {\n         /// ```\n         #[inline]\n         #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-        #[rustc_const_unstable(feature = \"const_overflowing_int_methods\", issue = \"53718\")]\n+        #[rustc_const_stable(feature = \"const_overflowing_int_methods\", since = \"1.51.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         pub const fn overflowing_div(self, rhs: Self) -> (Self, bool) {\n@@ -1215,7 +1215,7 @@ macro_rules! uint_impl {\n         /// ```\n         #[inline]\n         #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n-        #[rustc_const_unstable(feature = \"const_euclidean_int_methods\", issue = \"53718\")]\n+        #[rustc_const_stable(feature = \"const_euclidean_int_methods\", since = \"1.51.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         pub const fn overflowing_div_euclid(self, rhs: Self) -> (Self, bool) {\n@@ -1242,7 +1242,7 @@ macro_rules! uint_impl {\n         /// ```\n         #[inline]\n         #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-        #[rustc_const_unstable(feature = \"const_overflowing_int_methods\", issue = \"53718\")]\n+        #[rustc_const_stable(feature = \"const_overflowing_int_methods\", since = \"1.51.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         pub const fn overflowing_rem(self, rhs: Self) -> (Self, bool) {\n@@ -1272,7 +1272,7 @@ macro_rules! uint_impl {\n         /// ```\n         #[inline]\n         #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n-        #[rustc_const_unstable(feature = \"const_euclidean_int_methods\", issue = \"53718\")]\n+        #[rustc_const_stable(feature = \"const_euclidean_int_methods\", since = \"1.51.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         pub const fn overflowing_rem_euclid(self, rhs: Self) -> (Self, bool) {\n@@ -1456,7 +1456,7 @@ macro_rules! uint_impl {\n         #[doc = concat!(\"assert_eq!(7\", stringify!($SelfT), \".div_euclid(4), 1); // or any other integer type\")]\n         /// ```\n         #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n-        #[rustc_const_unstable(feature = \"const_euclidean_int_methods\", issue = \"53718\")]\n+        #[rustc_const_stable(feature = \"const_euclidean_int_methods\", since = \"1.51.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n@@ -1484,7 +1484,7 @@ macro_rules! uint_impl {\n         #[doc = concat!(\"assert_eq!(7\", stringify!($SelfT), \".rem_euclid(4), 3); // or any other integer type\")]\n         /// ```\n         #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n-        #[rustc_const_unstable(feature = \"const_euclidean_int_methods\", issue = \"53718\")]\n+        #[rustc_const_stable(feature = \"const_euclidean_int_methods\", since = \"1.51.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]"}, {"sha": "b9096648f9235bf2772c5f974807373363679fa8", "filename": "src/test/ui/consts/const-int-arithmetic.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4940dd483a8448c0f1ef28d304fad88a9d983c4e/src%2Ftest%2Fui%2Fconsts%2Fconst-int-arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4940dd483a8448c0f1ef28d304fad88a9d983c4e/src%2Ftest%2Fui%2Fconsts%2Fconst-int-arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-int-arithmetic.rs?ref=4940dd483a8448c0f1ef28d304fad88a9d983c4e", "patch": "@@ -1,10 +1,5 @@\n // run-pass\n \n-#![feature(const_checked_int_methods)]\n-#![feature(const_euclidean_int_methods)]\n-#![feature(const_overflowing_int_methods)]\n-#![feature(const_wrapping_int_methods)]\n-\n macro_rules! suite {\n     ($(\n         $fn:ident -> $ty:ty { $( $label:ident : $expr:expr, $result:expr; )* }"}]}