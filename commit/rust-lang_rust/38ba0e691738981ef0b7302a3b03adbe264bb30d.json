{"sha": "38ba0e691738981ef0b7302a3b03adbe264bb30d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4YmEwZTY5MTczODk4MWVmMGI3MzAyYTNiMDNhZGJlMjY0YmIzMGQ=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-12-13T00:30:34Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-12-13T00:30:34Z"}, "message": "rustc: Add a definition ID to tag patterns", "tree": {"sha": "3fc180ecece0f93564f9b54ca8da4a12937e6893", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3fc180ecece0f93564f9b54ca8da4a12937e6893"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/38ba0e691738981ef0b7302a3b03adbe264bb30d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/38ba0e691738981ef0b7302a3b03adbe264bb30d", "html_url": "https://github.com/rust-lang/rust/commit/38ba0e691738981ef0b7302a3b03adbe264bb30d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/38ba0e691738981ef0b7302a3b03adbe264bb30d/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1cdf42dd63a5ba790d91edabf131ca9347aa52ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/1cdf42dd63a5ba790d91edabf131ca9347aa52ee", "html_url": "https://github.com/rust-lang/rust/commit/1cdf42dd63a5ba790d91edabf131ca9347aa52ee"}], "stats": {"total": 19, "additions": 11, "deletions": 8}, "files": [{"sha": "eb41f8596aed8d36eb016bb81a5a1c3dc50df4a1", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38ba0e691738981ef0b7302a3b03adbe264bb30d/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38ba0e691738981ef0b7302a3b03adbe264bb30d/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=38ba0e691738981ef0b7302a3b03adbe264bb30d", "patch": "@@ -44,11 +44,13 @@ type block_ = rec(vec[@stmt] stmts,\n                   option.t[@expr] expr,\n                   hashmap[ident,uint] index);\n \n+type variant_def = tup(def_id /* tag */, def_id /* variant */);\n+\n type pat = spanned[pat_];\n tag pat_ {\n     pat_wild(ann);\n     pat_bind(ident, def_id, ann);\n-    pat_tag(ident, vec[@pat], ann);\n+    pat_tag(ident, vec[@pat], option.t[variant_def], ann);\n }\n \n tag mutability {"}, {"sha": "a3b0462d2b5bce3d62ae86977c6f218b73cfcaf0", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38ba0e691738981ef0b7302a3b03adbe264bb30d/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38ba0e691738981ef0b7302a3b03adbe264bb30d/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=38ba0e691738981ef0b7302a3b03adbe264bb30d", "patch": "@@ -906,7 +906,7 @@ impure fn parse_pat(parser p) -> @ast.pat {\n                 case (_) { args = vec(); }\n             }\n \n-            pat = ast.pat_tag(id, args, ast.ann_none);\n+            pat = ast.pat_tag(id, args, none[ast.variant_def], ast.ann_none);\n         }\n         case (?tok) {\n             p.err(\"expected pattern but found \" + token.to_str(tok));\n@@ -1088,7 +1088,7 @@ fn index_arm(@ast.pat pat) -> hashmap[ast.ident,ast.def_id] {\n         alt (pat.node) {\n             case (ast.pat_bind(?i, ?def_id, _)) { index.insert(i, def_id); }\n             case (ast.pat_wild(_)) { /* empty */ }\n-            case (ast.pat_tag(_, ?pats, _)) {\n+            case (ast.pat_tag(_, ?pats, _, _)) {\n                 for (@ast.pat p in pats) {\n                     do_index_arm(index, p);\n                 }"}, {"sha": "5a03bc88e183d1a7f62084ee248e4793fc00d9e5", "filename": "src/comp/middle/fold.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/38ba0e691738981ef0b7302a3b03adbe264bb30d/src%2Fcomp%2Fmiddle%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38ba0e691738981ef0b7302a3b03adbe264bb30d/src%2Fcomp%2Fmiddle%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ffold.rs?ref=38ba0e691738981ef0b7302a3b03adbe264bb30d", "patch": "@@ -149,6 +149,7 @@ type ast_fold[ENV] =\n \n      (fn(&ENV e, &span sp,\n          ident i, vec[@pat] args,\n+         option.t[ast.variant_def] d,\n          ann a) -> @pat)                          fold_pat_tag,\n \n \n@@ -344,12 +345,12 @@ fn fold_pat[ENV](&ENV env, ast_fold[ENV] fld, @ast.pat p) -> @ast.pat {\n         case (ast.pat_bind(?id, ?did, ?t)) {\n             ret fld.fold_pat_bind(env_, p.span, id, did, t);\n         }\n-        case (ast.pat_tag(?id, ?pats, ?t)) {\n+        case (ast.pat_tag(?id, ?pats, ?d, ?t)) {\n             let vec[@ast.pat] ppats = vec();\n             for (@ast.pat pat in pats) {\n                 ppats += vec(fold_pat(env_, fld, pat));\n             }\n-            ret fld.fold_pat_tag(env_, p.span, id, ppats, t);\n+            ret fld.fold_pat_tag(env_, p.span, id, ppats, d, t);\n         }\n     }\n }\n@@ -864,8 +865,8 @@ fn identity_fold_pat_bind[ENV](&ENV e, &span sp, ident i, def_id did, ann a)\n }\n \n fn identity_fold_pat_tag[ENV](&ENV e, &span sp, ident i, vec[@pat] args,\n-                              ann a) -> @pat {\n-    ret @respan(sp, ast.pat_tag(i, args, a));\n+                              option.t[ast.variant_def] d, ann a) -> @pat {\n+    ret @respan(sp, ast.pat_tag(i, args, d, a));\n }\n \n \n@@ -1041,7 +1042,7 @@ fn new_identity_fold[ENV]() -> ast_fold[ENV] {\n \n          fold_pat_wild    = bind identity_fold_pat_wild[ENV](_,_,_),\n          fold_pat_bind    = bind identity_fold_pat_bind[ENV](_,_,_,_,_),\n-         fold_pat_tag     = bind identity_fold_pat_tag[ENV](_,_,_,_,_),\n+         fold_pat_tag     = bind identity_fold_pat_tag[ENV](_,_,_,_,_,_),\n \n          fold_stmt_decl   = bind identity_fold_stmt_decl[ENV](_,_,_),\n          fold_stmt_ret    = bind identity_fold_stmt_ret[ENV](_,_,_),"}]}