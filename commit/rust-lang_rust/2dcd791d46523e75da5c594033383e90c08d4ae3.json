{"sha": "2dcd791d46523e75da5c594033383e90c08d4ae3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkY2Q3OTFkNDY1MjNlNzVkYTVjNTk0MDMzMzgzZTkwYzA4ZDRhZTM=", "commit": {"author": {"name": "Daniel Campbell", "email": "campbelldj@hotmail.com", "date": "2015-12-15T04:31:54Z"}, "committer": {"name": "Daniel Campbell", "email": "campbelldj@hotmail.com", "date": "2015-12-15T04:41:03Z"}, "message": "Generated code spans now point to callsite parameters (where applicable)", "tree": {"sha": "2ae5f9940e4d426f20de10d44ef13324a3885d50", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ae5f9940e4d426f20de10d44ef13324a3885d50"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2dcd791d46523e75da5c594033383e90c08d4ae3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2dcd791d46523e75da5c594033383e90c08d4ae3", "html_url": "https://github.com/rust-lang/rust/commit/2dcd791d46523e75da5c594033383e90c08d4ae3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2dcd791d46523e75da5c594033383e90c08d4ae3/comments", "author": {"login": "DanielJCampbell", "id": 5915731, "node_id": "MDQ6VXNlcjU5MTU3MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/5915731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DanielJCampbell", "html_url": "https://github.com/DanielJCampbell", "followers_url": "https://api.github.com/users/DanielJCampbell/followers", "following_url": "https://api.github.com/users/DanielJCampbell/following{/other_user}", "gists_url": "https://api.github.com/users/DanielJCampbell/gists{/gist_id}", "starred_url": "https://api.github.com/users/DanielJCampbell/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DanielJCampbell/subscriptions", "organizations_url": "https://api.github.com/users/DanielJCampbell/orgs", "repos_url": "https://api.github.com/users/DanielJCampbell/repos", "events_url": "https://api.github.com/users/DanielJCampbell/events{/privacy}", "received_events_url": "https://api.github.com/users/DanielJCampbell/received_events", "type": "User", "site_admin": false}, "committer": {"login": "DanielJCampbell", "id": 5915731, "node_id": "MDQ6VXNlcjU5MTU3MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/5915731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DanielJCampbell", "html_url": "https://github.com/DanielJCampbell", "followers_url": "https://api.github.com/users/DanielJCampbell/followers", "following_url": "https://api.github.com/users/DanielJCampbell/following{/other_user}", "gists_url": "https://api.github.com/users/DanielJCampbell/gists{/gist_id}", "starred_url": "https://api.github.com/users/DanielJCampbell/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DanielJCampbell/subscriptions", "organizations_url": "https://api.github.com/users/DanielJCampbell/orgs", "repos_url": "https://api.github.com/users/DanielJCampbell/repos", "events_url": "https://api.github.com/users/DanielJCampbell/events{/privacy}", "received_events_url": "https://api.github.com/users/DanielJCampbell/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9267a3a22250ac225b94e6e150590307d764b2f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/9267a3a22250ac225b94e6e150590307d764b2f9", "html_url": "https://github.com/rust-lang/rust/commit/9267a3a22250ac225b94e6e150590307d764b2f9"}], "stats": {"total": 43, "additions": 35, "deletions": 8}, "files": [{"sha": "16764e5af5cce91bc1c66abf9fa56c3f129a54aa", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2dcd791d46523e75da5c594033383e90c08d4ae3/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dcd791d46523e75da5c594033383e90c08d4ae3/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=2dcd791d46523e75da5c594033383e90c08d4ae3", "patch": "@@ -79,8 +79,8 @@ pub use self::ParseResult::*;\n use self::TokenTreeOrTokenTreeVec::*;\n \n use ast;\n-use ast::{TokenTree, Name};\n-use codemap::{BytePos, mk_sp, Span};\n+use ast::{TokenTree, Name, Ident};\n+use codemap::{BytePos, mk_sp, Span, Spanned};\n use codemap;\n use parse::lexer::*; //resolve bug?\n use parse::ParseSess;\n@@ -526,7 +526,10 @@ pub fn parse_nt(p: &mut Parser, sp: Span, name: &str) -> Nonterminal {\n         \"ty\" => token::NtTy(panictry!(p.parse_ty())),\n         // this could be handled like a token, since it is one\n         \"ident\" => match p.token {\n-            token::Ident(sn,b) => { panictry!(p.bump()); token::NtIdent(Box::new(sn),b) }\n+            token::Ident(sn,b) => {\n+                panictry!(p.bump());\n+                token::NtIdent(Box::new(Spanned::<Ident>{node: sn, span: p.span}),b)\n+            }\n             _ => {\n                 let token_str = pprust::token_to_string(&p.token);\n                 panic!(p.fatal(&format!(\"expected ident, found {}\","}, {"sha": "ba781ae3cc21275d570b929423158d40abe53cc8", "filename": "src/libsyntax/ext/tt/transcribe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2dcd791d46523e75da5c594033383e90c08d4ae3/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dcd791d46523e75da5c594033383e90c08d4ae3/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs?ref=2dcd791d46523e75da5c594033383e90c08d4ae3", "patch": "@@ -293,8 +293,8 @@ pub fn tt_next_token(r: &mut TtReader) -> TokenAndSpan {\n                             // (a) idents can be in lots of places, so it'd be a pain\n                             // (b) we actually can, since it's a token.\n                             MatchedNonterminal(NtIdent(ref sn, b)) => {\n-                                r.cur_span = sp;\n-                                r.cur_tok = token::Ident(**sn, b);\n+                                r.cur_span = sn.span;\n+                                r.cur_tok = token::Ident(sn.node, b);\n                                 return ret_val;\n                             }\n                             MatchedNonterminal(ref other_whole_nt) => {"}, {"sha": "944dd44a0b6c4dd8a148b6d59e717e91af5c6209", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2dcd791d46523e75da5c594033383e90c08d4ae3/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dcd791d46523e75da5c594033383e90c08d4ae3/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=2dcd791d46523e75da5c594033383e90c08d4ae3", "patch": "@@ -663,7 +663,8 @@ pub fn noop_fold_interpolated<T: Folder>(nt: token::Nonterminal, fld: &mut T)\n         token::NtExpr(expr) => token::NtExpr(fld.fold_expr(expr)),\n         token::NtTy(ty) => token::NtTy(fld.fold_ty(ty)),\n         token::NtIdent(id, is_mod_name) =>\n-            token::NtIdent(Box::new(fld.fold_ident(*id)), is_mod_name),\n+            token::NtIdent(Box::new(Spanned::<Ident>{node: fld.fold_ident(id.node), .. *id}),\n+                           is_mod_name),\n         token::NtMeta(meta_item) => token::NtMeta(fld.fold_meta_item(meta_item)),\n         token::NtPath(path) => token::NtPath(Box::new(fld.fold_path(*path))),\n         token::NtTT(tt) => token::NtTT(P(fld.fold_tt(&tt))),"}, {"sha": "b942954c1874af963453d1b81050d3365d0c76ce", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2dcd791d46523e75da5c594033383e90c08d4ae3/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dcd791d46523e75da5c594033383e90c08d4ae3/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=2dcd791d46523e75da5c594033383e90c08d4ae3", "patch": "@@ -377,7 +377,7 @@ pub enum Nonterminal {\n     NtPat(P<ast::Pat>),\n     NtExpr(P<ast::Expr>),\n     NtTy(P<ast::Ty>),\n-    NtIdent(Box<ast::Ident>, IdentStyle),\n+    NtIdent(Box<ast::SpannedIdent>, IdentStyle),\n     /// Stuff inside brackets for attributes\n     NtMeta(P<ast::MetaItem>),\n     NtPath(Box<ast::Path>),"}, {"sha": "d3c570de248c02f6076a9411ccd50ec9d2386273", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2dcd791d46523e75da5c594033383e90c08d4ae3/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dcd791d46523e75da5c594033383e90c08d4ae3/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=2dcd791d46523e75da5c594033383e90c08d4ae3", "patch": "@@ -296,7 +296,7 @@ pub fn token_to_string(tok: &Token) -> String {\n             token::NtBlock(ref e)       => block_to_string(&**e),\n             token::NtStmt(ref e)        => stmt_to_string(&**e),\n             token::NtPat(ref e)         => pat_to_string(&**e),\n-            token::NtIdent(ref e, _)    => ident_to_string(**e),\n+            token::NtIdent(ref e, _)    => ident_to_string(e.node),\n             token::NtTT(ref e)          => tt_to_string(&**e),\n             token::NtArm(ref e)         => arm_to_string(&*e),\n             token::NtImplItem(ref e)    => impl_item_to_string(&**e),"}, {"sha": "2ef697591284dc2ddbabd227de841355840bde61", "filename": "src/test/compile-fail/macro-parameter-span.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/2dcd791d46523e75da5c594033383e90c08d4ae3/src%2Ftest%2Fcompile-fail%2Fmacro-parameter-span.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dcd791d46523e75da5c594033383e90c08d4ae3/src%2Ftest%2Fcompile-fail%2Fmacro-parameter-span.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-parameter-span.rs?ref=2dcd791d46523e75da5c594033383e90c08d4ae3", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+macro_rules! foo {\n+    ($id: ident) => {\n+        $id\n+    }\n+}\n+\n+// Testing that the error span points to the parameter 'x' in the callsite,\n+// not to the macro variable '$id'\n+fn main() {\n+    foo!(\n+        x //~ ERROR unresolved name `x`\n+        );\n+}"}]}