{"sha": "90ccf4f5adfb2562fc95c996b97faac7775a34bb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwY2NmNGY1YWRmYjI1NjJmYzk1Yzk5NmI5N2ZhYWM3Nzc1YTM0YmI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-02T12:40:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-02T12:40:32Z"}, "message": "Auto merge of #80615 - m-ou-se:rollup-xz67at2, r=m-ou-se\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #80546 (clippy fixes for librustdoc)\n - #80555 (Improve library tracking issue template)\n - #80574 (Clean bootstrap artifacts on `x.py clean`)\n - #80578 (improve unconditional_panic description)\n - #80599 (`const_generics_defaults`: don't ICE in the unimplemented parts)\n - #80613 (Diag: print enum variant instead of enum type)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "25efca2e10bef1ef48eb1b54f4f6deaa83121b3a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25efca2e10bef1ef48eb1b54f4f6deaa83121b3a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90ccf4f5adfb2562fc95c996b97faac7775a34bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90ccf4f5adfb2562fc95c996b97faac7775a34bb", "html_url": "https://github.com/rust-lang/rust/commit/90ccf4f5adfb2562fc95c996b97faac7775a34bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90ccf4f5adfb2562fc95c996b97faac7775a34bb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "929f66af9bf587383ed6010403e738e79dfac0d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/929f66af9bf587383ed6010403e738e79dfac0d6", "html_url": "https://github.com/rust-lang/rust/commit/929f66af9bf587383ed6010403e738e79dfac0d6"}, {"sha": "4172756c80abb79ccd8b6f43d37a797691414bcf", "url": "https://api.github.com/repos/rust-lang/rust/commits/4172756c80abb79ccd8b6f43d37a797691414bcf", "html_url": "https://github.com/rust-lang/rust/commit/4172756c80abb79ccd8b6f43d37a797691414bcf"}], "stats": {"total": 267, "additions": 149, "deletions": 118}, "files": [{"sha": "cbc4465fcfe38a6d76d809a440c7097179f8dd41", "filename": ".github/ISSUE_TEMPLATE/library_tracking_issue.md", "status": "modified", "additions": 26, "deletions": 6, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/90ccf4f5adfb2562fc95c996b97faac7775a34bb/.github%2FISSUE_TEMPLATE%2Flibrary_tracking_issue.md", "raw_url": "https://github.com/rust-lang/rust/raw/90ccf4f5adfb2562fc95c996b97faac7775a34bb/.github%2FISSUE_TEMPLATE%2Flibrary_tracking_issue.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2FISSUE_TEMPLATE%2Flibrary_tracking_issue.md?ref=90ccf4f5adfb2562fc95c996b97faac7775a34bb", "patch": "@@ -33,21 +33,41 @@ For most library features, it'd be useful to include a summarized version of the\n -->\n \n ```rust\n-...\n+// core::magic\n+\n+pub struct Magic;\n+\n+impl Magic {\n+    pub fn magic(self);\n+}\n ```\n \n ### Steps / History\n \n <!--\n-In the simplest case, this is a PR implementing the feature followed by a PR\n-that stabilises the feature. However it's not uncommon for the feature to be\n-changed before stabilization. For larger features, the implementation could be\n-split up in multiple steps.\n+For larger features, more steps might be involved.\n+If the feature is changed later, please add those PRs here as well.\n -->\n \n-- [ ] Implementation: ...\n+- [ ] Implementation: #...\n+- [ ] Final commenting period (FCP)\n - [ ] Stabilization PR\n \n+<!--\n+Once the feature has gone through a few release cycles and there are no\n+unresolved questions left, the feature might be ready for stabilization.\n+\n+If this feature didn't go through the RFC process, a final commenting period\n+(FCP) is always needed before stabilization. This works as follows:\n+\n+A library team member can kick off the stabilization process, at which point\n+the rfcbot will ask all the team members to verify they agree with\n+stabilization. Once enough members agree and there are no concerns, the final\n+commenting period begins: this issue will be marked as such and will be listed\n+in the next This Week in Rust newsletter. If no blocking concerns are raised in\n+that period of 10 days, a stabilzation PR can be opened by anyone.\n+-->\n+\n ### Unresolved Questions\n \n <!--"}, {"sha": "0e4f2798bd313e97c6d71bac84bd8f47447dc10b", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/90ccf4f5adfb2562fc95c996b97faac7775a34bb/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90ccf4f5adfb2562fc95c996b97faac7775a34bb/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=90ccf4f5adfb2562fc95c996b97faac7775a34bb", "patch": "@@ -2677,7 +2677,6 @@ impl<'a> State<'a> {\n                     s.print_type_bounds(\":\", &param.bounds);\n                     if let Some(ref _default) = default {\n                         // FIXME(const_generics_defaults): print the `default` value here\n-                        todo!();\n                     }\n                 }\n             }"}, {"sha": "eb6c65fcd8c8114b0d2742c076dbed9d820f8f59", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/90ccf4f5adfb2562fc95c996b97faac7775a34bb/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90ccf4f5adfb2562fc95c996b97faac7775a34bb/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=90ccf4f5adfb2562fc95c996b97faac7775a34bb", "patch": "@@ -2210,7 +2210,6 @@ impl<'a> State<'a> {\n                 self.print_type(ty);\n                 if let Some(ref _default) = default {\n                     // FIXME(const_generics_defaults): print the `default` value here\n-                    todo!();\n                 }\n             }\n         }"}, {"sha": "f90fc7fc9ab3c220cf98bbf2c682bad7042dc5c5", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/90ccf4f5adfb2562fc95c996b97faac7775a34bb/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90ccf4f5adfb2562fc95c996b97faac7775a34bb/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=90ccf4f5adfb2562fc95c996b97faac7775a34bb", "patch": "@@ -221,14 +221,10 @@ declare_lint! {\n     ///\n     /// ### Explanation\n     ///\n-    /// This lint detects code that is very likely incorrect. When possible,\n-    /// the compiler will attempt to detect situations where code can be\n-    /// evaluated at compile-time to generate more efficient code. While\n-    /// evaluating such code, if it detects that the code will unconditionally\n-    /// panic, this usually indicates that it is doing something incorrectly.\n-    /// If this lint is allowed, then the code will not be evaluated at\n-    /// compile-time, and instead continue to generate code to evaluate at\n-    /// runtime, which may panic during runtime.\n+    /// This lint detects code that is very likely incorrect because it will\n+    /// always panic, such as division by zero and out-of-bounds array\n+    /// accesses. Consider adjusting your code if this is a bug, or using the\n+    /// `panic!` or `unreachable!` macro instead in case the panic is intended.\n     pub UNCONDITIONAL_PANIC,\n     Deny,\n     \"operation will cause a panic at runtime\""}, {"sha": "ab3da270fe66faf6cd6481adf88a072551ea29a6", "filename": "compiler/rustc_save_analysis/src/sig.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/90ccf4f5adfb2562fc95c996b97faac7775a34bb/compiler%2Frustc_save_analysis%2Fsrc%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90ccf4f5adfb2562fc95c996b97faac7775a34bb/compiler%2Frustc_save_analysis%2Fsrc%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fsig.rs?ref=90ccf4f5adfb2562fc95c996b97faac7775a34bb", "patch": "@@ -619,7 +619,6 @@ impl<'hir> Sig for hir::Generics<'hir> {\n                 param_text.push_str(&ty_to_string(&ty));\n                 if let Some(ref _default) = default {\n                     // FIXME(const_generics_defaults): push the `default` value here\n-                    todo!();\n                 }\n             }\n             if !param.bounds.is_empty() {"}, {"sha": "e84d813ffbcc01506ae20b46a8f84ba2379ac891", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 36, "deletions": 13, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/90ccf4f5adfb2562fc95c996b97faac7775a34bb/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90ccf4f5adfb2562fc95c996b97faac7775a34bb/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=90ccf4f5adfb2562fc95c996b97faac7775a34bb", "patch": "@@ -1381,19 +1381,42 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             ty,\n         );\n         match variant.ctor_kind {\n-            CtorKind::Fn => {\n-                err.span_label(variant.ident.span, format!(\"`{adt}` defined here\", adt = ty));\n-                err.span_label(field.ident.span, \"field does not exist\");\n-                err.span_label(\n-                    ty_span,\n-                    format!(\n-                        \"`{adt}` is a tuple {kind_name}, \\\n-                         use the appropriate syntax: `{adt}(/* fields */)`\",\n-                        adt = ty,\n-                        kind_name = kind_name\n-                    ),\n-                );\n-            }\n+            CtorKind::Fn => match ty.kind() {\n+                ty::Adt(adt, ..) if adt.is_enum() => {\n+                    err.span_label(\n+                        variant.ident.span,\n+                        format!(\n+                            \"`{adt}::{variant}` defined here\",\n+                            adt = ty,\n+                            variant = variant.ident,\n+                        ),\n+                    );\n+                    err.span_label(field.ident.span, \"field does not exist\");\n+                    err.span_label(\n+                        ty_span,\n+                        format!(\n+                            \"`{adt}::{variant}` is a tuple {kind_name}, \\\n+                             use the appropriate syntax: `{adt}::{variant}(/* fields */)`\",\n+                            adt = ty,\n+                            variant = variant.ident,\n+                            kind_name = kind_name\n+                        ),\n+                    );\n+                }\n+                _ => {\n+                    err.span_label(variant.ident.span, format!(\"`{adt}` defined here\", adt = ty));\n+                    err.span_label(field.ident.span, \"field does not exist\");\n+                    err.span_label(\n+                        ty_span,\n+                        format!(\n+                            \"`{adt}` is a tuple {kind_name}, \\\n+                                 use the appropriate syntax: `{adt}(/* fields */)`\",\n+                            adt = ty,\n+                            kind_name = kind_name\n+                        ),\n+                    );\n+                }\n+            },\n             _ => {\n                 // prevent all specified fields from being suggested\n                 let skip_fields = skip_fields.iter().map(|ref x| x.ident.name);"}, {"sha": "9b9df36e7dc0e4d8a459ab33acf316bdc9c139c6", "filename": "src/bootstrap/clean.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/90ccf4f5adfb2562fc95c996b97faac7775a34bb/src%2Fbootstrap%2Fclean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90ccf4f5adfb2562fc95c996b97faac7775a34bb/src%2Fbootstrap%2Fclean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fclean.rs?ref=90ccf4f5adfb2562fc95c996b97faac7775a34bb", "patch": "@@ -21,6 +21,7 @@ pub fn clean(build: &Build, all: bool) {\n     } else {\n         rm_rf(&build.out.join(\"tmp\"));\n         rm_rf(&build.out.join(\"dist\"));\n+        rm_rf(&build.out.join(\"bootstrap\"));\n \n         for host in &build.hosts {\n             let entries = match build.out.join(host.triple).read_dir() {"}, {"sha": "8b63ddddc1fa1d838b322bcad00e4d2107d4fe3b", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/90ccf4f5adfb2562fc95c996b97faac7775a34bb/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90ccf4f5adfb2562fc95c996b97faac7775a34bb/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=90ccf4f5adfb2562fc95c996b97faac7775a34bb", "patch": "@@ -738,11 +738,11 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n     }\n \n     fn is_fn_ty(&self, tcx: TyCtxt<'_>, ty: &Type) -> bool {\n-        match &ty {\n-            &&Type::ResolvedPath { ref did, .. } => {\n-                *did == tcx.require_lang_item(LangItem::Fn, None)\n-                    || *did == tcx.require_lang_item(LangItem::FnMut, None)\n-                    || *did == tcx.require_lang_item(LangItem::FnOnce, None)\n+        match ty {\n+            &Type::ResolvedPath { did, .. } => {\n+                did == tcx.require_lang_item(LangItem::Fn, None)\n+                    || did == tcx.require_lang_item(LangItem::FnMut, None)\n+                    || did == tcx.require_lang_item(LangItem::FnOnce, None)\n             }\n             _ => false,\n         }"}, {"sha": "444b73246da4b06a919640485746e54d4ba224d0", "filename": "src/librustdoc/clean/cfg.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/90ccf4f5adfb2562fc95c996b97faac7775a34bb/src%2Flibrustdoc%2Fclean%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90ccf4f5adfb2562fc95c996b97faac7775a34bb/src%2Flibrustdoc%2Fclean%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fcfg.rs?ref=90ccf4f5adfb2562fc95c996b97faac7775a34bb", "patch": "@@ -177,29 +177,21 @@ impl Cfg {\n             Cfg::Any(ref sub_cfgs) | Cfg::All(ref sub_cfgs) => {\n                 sub_cfgs.first().map(Cfg::should_capitalize_first_letter).unwrap_or(false)\n             }\n-            Cfg::Cfg(name, _) => match name {\n-                sym::debug_assertions | sym::target_endian => true,\n-                _ => false,\n-            },\n+            Cfg::Cfg(name, _) => name == sym::debug_assertions || name == sym::target_endian,\n         }\n     }\n \n     fn should_append_only_to_description(&self) -> bool {\n         match *self {\n             Cfg::False | Cfg::True => false,\n             Cfg::Any(..) | Cfg::All(..) | Cfg::Cfg(..) => true,\n-            Cfg::Not(ref child) => match **child {\n-                Cfg::Cfg(..) => true,\n-                _ => false,\n-            },\n+            Cfg::Not(box Cfg::Cfg(..)) => true,\n+            Cfg::Not(..) => false,\n         }\n     }\n \n     fn should_use_with_in_description(&self) -> bool {\n-        match *self {\n-            Cfg::Cfg(name, _) if name == sym::target_feature => true,\n-            _ => false,\n-        }\n+        matches!(self, Cfg::Cfg(sym::target_feature, _))\n     }\n \n     /// Attempt to simplify this cfg by assuming that `assume` is already known to be true, will"}, {"sha": "14902c318c91dfb92cb85fd6d230a59e0b68ba00", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/90ccf4f5adfb2562fc95c996b97faac7775a34bb/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90ccf4f5adfb2562fc95c996b97faac7775a34bb/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=90ccf4f5adfb2562fc95c996b97faac7775a34bb", "patch": "@@ -640,10 +640,10 @@ impl Clean<Generics> for hir::Generics<'_> {\n         ///\n         /// [`lifetime_to_generic_param`]: rustc_ast_lowering::LoweringContext::lifetime_to_generic_param\n         fn is_elided_lifetime(param: &hir::GenericParam<'_>) -> bool {\n-            match param.kind {\n-                hir::GenericParamKind::Lifetime { kind: hir::LifetimeParamKind::Elided } => true,\n-                _ => false,\n-            }\n+            matches!(\n+                param.kind,\n+                hir::GenericParamKind::Lifetime { kind: hir::LifetimeParamKind::Elided }\n+            )\n         }\n \n         let impl_trait_params = self\n@@ -801,7 +801,7 @@ impl<'a, 'tcx> Clean<Generics> for (&'a ty::Generics, ty::GenericPredicates<'tcx\n \n         for (param, mut bounds) in impl_trait {\n             // Move trait bounds to the front.\n-            bounds.sort_by_key(|b| if let GenericBound::TraitBound(..) = b { false } else { true });\n+            bounds.sort_by_key(|b| !matches!(b, GenericBound::TraitBound(..)));\n \n             if let crate::core::ImplTraitParam::ParamIndex(idx) = param {\n                 if let Some(proj) = impl_trait_proj.remove(&idx) {"}, {"sha": "d0d37046e5905acd86796b715ff25331de62fcc2", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 8, "deletions": 19, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/90ccf4f5adfb2562fc95c996b97faac7775a34bb/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90ccf4f5adfb2562fc95c996b97faac7775a34bb/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=90ccf4f5adfb2562fc95c996b97faac7775a34bb", "patch": "@@ -175,11 +175,9 @@ impl Item {\n     }\n \n     crate fn is_crate(&self) -> bool {\n-        match *self.kind {\n+        matches!(*self.kind,\n             StrippedItem(box ModuleItem(Module { is_crate: true, .. }))\n-            | ModuleItem(Module { is_crate: true, .. }) => true,\n-            _ => false,\n-        }\n+            | ModuleItem(Module { is_crate: true, .. }))\n     }\n     crate fn is_mod(&self) -> bool {\n         self.type_() == ItemType::Module\n@@ -378,10 +376,7 @@ impl ItemKind {\n     }\n \n     crate fn is_type_alias(&self) -> bool {\n-        match *self {\n-            ItemKind::TypedefItem(_, _) | ItemKind::AssocTypeItem(_, _) => true,\n-            _ => false,\n-        }\n+        matches!(self, ItemKind::TypedefItem(..) | ItemKind::AssocTypeItem(..))\n     }\n }\n \n@@ -674,7 +669,7 @@ impl Attributes {\n                                 span: attr.span,\n                                 doc: contents,\n                                 kind: DocFragmentKind::Include { filename },\n-                                parent_module: parent_module,\n+                                parent_module,\n                             });\n                         }\n                     }\n@@ -750,7 +745,7 @@ impl Attributes {\n                     Some(did) => {\n                         if let Some((mut href, ..)) = href(did) {\n                             if let Some(ref fragment) = *fragment {\n-                                href.push_str(\"#\");\n+                                href.push('#');\n                                 href.push_str(fragment);\n                             }\n                             Some(RenderedLink {\n@@ -945,10 +940,7 @@ crate enum GenericParamDefKind {\n \n impl GenericParamDefKind {\n     crate fn is_type(&self) -> bool {\n-        match *self {\n-            GenericParamDefKind::Type { .. } => true,\n-            _ => false,\n-        }\n+        matches!(self, GenericParamDefKind::Type { .. })\n     }\n \n     // FIXME(eddyb) this either returns the default of a type parameter, or the\n@@ -1292,15 +1284,12 @@ impl Type {\n     }\n \n     crate fn is_full_generic(&self) -> bool {\n-        match *self {\n-            Type::Generic(_) => true,\n-            _ => false,\n-        }\n+        matches!(self, Type::Generic(_))\n     }\n \n     crate fn projection(&self) -> Option<(&Type, DefId, Symbol)> {\n         let (self_, trait_, name) = match self {\n-            QPath { ref self_type, ref trait_, name } => (self_type, trait_, name),\n+            QPath { self_type, trait_, name } => (self_type, trait_, name),\n             _ => return None,\n         };\n         let trait_did = match **trait_ {"}, {"sha": "e43ea965c04237d8b6f9cc9d23d8dbe7251e5968", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/90ccf4f5adfb2562fc95c996b97faac7775a34bb/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90ccf4f5adfb2562fc95c996b97faac7775a34bb/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=90ccf4f5adfb2562fc95c996b97faac7775a34bb", "patch": "@@ -37,10 +37,7 @@ crate enum OutputFormat {\n \n impl OutputFormat {\n     crate fn is_json(&self) -> bool {\n-        match self {\n-            OutputFormat::Json => true,\n-            _ => false,\n-        }\n+        matches!(self, OutputFormat::Json)\n     }\n }\n "}, {"sha": "0edb9babef46c8c6975b0de35939b1c716cec57f", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/90ccf4f5adfb2562fc95c996b97faac7775a34bb/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90ccf4f5adfb2562fc95c996b97faac7775a34bb/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=90ccf4f5adfb2562fc95c996b97faac7775a34bb", "patch": "@@ -636,15 +636,15 @@ fn partition_source(s: &str) -> (String, String, String) {\n         match state {\n             PartitionState::Attrs => {\n                 before.push_str(line);\n-                before.push_str(\"\\n\");\n+                before.push('\\n');\n             }\n             PartitionState::Crates => {\n                 crates.push_str(line);\n-                crates.push_str(\"\\n\");\n+                crates.push('\\n');\n             }\n             PartitionState::Other => {\n                 after.push_str(line);\n-                after.push_str(\"\\n\");\n+                after.push('\\n');\n             }\n         }\n     }"}, {"sha": "4d45c8866a793d91a46f9c21eada49fa04a2d77a", "filename": "src/librustdoc/fold.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90ccf4f5adfb2562fc95c996b97faac7775a34bb/src%2Flibrustdoc%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90ccf4f5adfb2562fc95c996b97faac7775a34bb/src%2Flibrustdoc%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ffold.rs?ref=90ccf4f5adfb2562fc95c996b97faac7775a34bb", "patch": "@@ -61,7 +61,7 @@ crate trait DocFolder: Sized {\n                         j.fields = j.fields.into_iter().filter_map(|x| self.fold_item(x)).collect();\n                         j.fields_stripped |= num_fields != j.fields.len()\n                             || j.fields.iter().any(|f| f.is_stripped());\n-                        VariantItem(Variant { kind: VariantKind::Struct(j), ..i2 })\n+                        VariantItem(Variant { kind: VariantKind::Struct(j) })\n                     }\n                     _ => VariantItem(i2),\n                 }"}, {"sha": "6eeb7ad82c0aca17c5413cc13b0e2264ddd53435", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/90ccf4f5adfb2562fc95c996b97faac7775a34bb/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90ccf4f5adfb2562fc95c996b97faac7775a34bb/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=90ccf4f5adfb2562fc95c996b97faac7775a34bb", "patch": "@@ -245,7 +245,7 @@ impl<'a> fmt::Display for WhereClause<'a> {\n             }\n \n             match pred {\n-                &clean::WherePredicate::BoundPredicate { ref ty, ref bounds } => {\n+                clean::WherePredicate::BoundPredicate { ty, bounds } => {\n                     let bounds = bounds;\n                     if f.alternate() {\n                         clause.push_str(&format!(\n@@ -261,7 +261,7 @@ impl<'a> fmt::Display for WhereClause<'a> {\n                         ));\n                     }\n                 }\n-                &clean::WherePredicate::RegionPredicate { ref lifetime, ref bounds } => {\n+                clean::WherePredicate::RegionPredicate { lifetime, bounds } => {\n                     clause.push_str(&format!(\n                         \"{}: {}\",\n                         lifetime.print(),\n@@ -272,7 +272,7 @@ impl<'a> fmt::Display for WhereClause<'a> {\n                             .join(\" + \")\n                     ));\n                 }\n-                &clean::WherePredicate::EqPredicate { ref lhs, ref rhs } => {\n+                clean::WherePredicate::EqPredicate { lhs, rhs } => {\n                     if f.alternate() {\n                         clause.push_str(&format!(\"{:#} == {:#}\", lhs.print(), rhs.print()));\n                     } else {\n@@ -376,8 +376,8 @@ impl clean::GenericBound {\n impl clean::GenericArgs {\n     fn print(&self) -> impl fmt::Display + '_ {\n         display_fn(move |f| {\n-            match *self {\n-                clean::GenericArgs::AngleBracketed { ref args, ref bindings } => {\n+            match self {\n+                clean::GenericArgs::AngleBracketed { args, bindings } => {\n                     if !args.is_empty() || !bindings.is_empty() {\n                         if f.alternate() {\n                             f.write_str(\"<\")?;\n@@ -414,7 +414,7 @@ impl clean::GenericArgs {\n                         }\n                     }\n                 }\n-                clean::GenericArgs::Parenthesized { ref inputs, ref output } => {\n+                clean::GenericArgs::Parenthesized { inputs, output } => {\n                     f.write_str(\"(\")?;\n                     let mut comma = false;\n                     for ty in inputs {\n@@ -501,7 +501,7 @@ crate fn href(did: DefId) -> Option<(String, ItemType, Vec<String>)> {\n     };\n     for component in &fqp[..fqp.len() - 1] {\n         url.push_str(component);\n-        url.push_str(\"/\");\n+        url.push('/');\n     }\n     match shortty {\n         ItemType::Module => {\n@@ -510,7 +510,7 @@ crate fn href(did: DefId) -> Option<(String, ItemType, Vec<String>)> {\n         }\n         _ => {\n             url.push_str(shortty.as_str());\n-            url.push_str(\".\");\n+            url.push('.');\n             url.push_str(fqp.last().unwrap());\n             url.push_str(\".html\");\n         }\n@@ -1021,7 +1021,7 @@ impl Function<'_> {\n                 } else {\n                     if i > 0 {\n                         args.push_str(\" <br>\");\n-                        args_plain.push_str(\" \");\n+                        args_plain.push(' ');\n                     }\n                     if !input.name.is_empty() {\n                         args.push_str(&format!(\"{}: \", input.name));"}, {"sha": "e519c6ee983f084e607a870ee94792bd5e8c2cca", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/90ccf4f5adfb2562fc95c996b97faac7775a34bb/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90ccf4f5adfb2562fc95c996b97faac7775a34bb/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=90ccf4f5adfb2562fc95c996b97faac7775a34bb", "patch": "@@ -489,15 +489,10 @@ impl<'a, I: Iterator<Item = Event<'a>>> SummaryLine<'a, I> {\n }\n \n fn check_if_allowed_tag(t: &Tag<'_>) -> bool {\n-    match *t {\n-        Tag::Paragraph\n-        | Tag::Item\n-        | Tag::Emphasis\n-        | Tag::Strong\n-        | Tag::Link(..)\n-        | Tag::BlockQuote => true,\n-        _ => false,\n-    }\n+    matches!(\n+        t,\n+        Tag::Paragraph | Tag::Item | Tag::Emphasis | Tag::Strong | Tag::Link(..) | Tag::BlockQuote\n+    )\n }\n \n impl<'a, I: Iterator<Item = Event<'a>>> Iterator for SummaryLine<'a, I> {"}, {"sha": "2f5ee4f238d689c35dbaf0bcef42a3fcf4c0b0d1", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/90ccf4f5adfb2562fc95c996b97faac7775a34bb/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90ccf4f5adfb2562fc95c996b97faac7775a34bb/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=90ccf4f5adfb2562fc95c996b97faac7775a34bb", "patch": "@@ -979,7 +979,7 @@ themePicker.onblur = handleThemeButtonsBlur;\n                 .iter()\n                 .map(|s| format!(\"\\\"{}\\\"\", s.to_str().expect(\"invalid osstring conversion\")))\n                 .collect::<Vec<_>>();\n-            files.sort_unstable_by(|a, b| a.cmp(b));\n+            files.sort_unstable();\n             let subs = subs.iter().map(|s| s.to_json_string()).collect::<Vec<_>>().join(\",\");\n             let dirs =\n                 if subs.is_empty() { String::new() } else { format!(\",\\\"dirs\\\":[{}]\", subs) };\n@@ -1428,7 +1428,7 @@ impl Setting {\n                     .map(|opt| format!(\n                         \"<option value=\\\"{}\\\" {}>{}</option>\",\n                         opt.0,\n-                        if &opt.0 == default_value { \"selected\" } else { \"\" },\n+                        if opt.0 == default_value { \"selected\" } else { \"\" },\n                         opt.1,\n                     ))\n                     .collect::<String>(),\n@@ -1595,7 +1595,7 @@ impl Context<'_> {\n             if let Some(&(ref names, ty)) = cache.paths.get(&it.def_id) {\n                 for name in &names[..names.len() - 1] {\n                     url.push_str(name);\n-                    url.push_str(\"/\");\n+                    url.push('/');\n                 }\n                 url.push_str(&item_path(ty, names.last().unwrap()));\n                 layout::redirect(&url)\n@@ -2308,7 +2308,7 @@ fn short_item_info(\n             let since = &since.as_str();\n             if !stability::deprecation_in_effect(is_since_rustc_version, Some(since)) {\n                 if *since == \"TBD\" {\n-                    format!(\"Deprecating in a future Rust version\")\n+                    String::from(\"Deprecating in a future Rust version\")\n                 } else {\n                     format!(\"Deprecating in {}\", Escape(since))\n                 }\n@@ -4323,9 +4323,11 @@ fn sidebar_assoc_items(it: &clean::Item) -> String {\n                         .any(|i| i.inner_impl().trait_.def_id() == c.deref_mut_trait_did);\n                     let inner_impl = target\n                         .def_id()\n-                        .or(target\n-                            .primitive_type()\n-                            .and_then(|prim| c.primitive_locations.get(&prim).cloned()))\n+                        .or_else(|| {\n+                            target\n+                                .primitive_type()\n+                                .and_then(|prim| c.primitive_locations.get(&prim).cloned())\n+                        })\n                         .and_then(|did| c.impls.get(&did));\n                     if let Some(impls) = inner_impl {\n                         out.push_str(\"<a class=\\\"sidebar-title\\\" href=\\\"#deref-methods\\\">\");"}, {"sha": "c55f2459a9ce2b26a71dbecd4cc0e8adc7bc4081", "filename": "src/librustdoc/html/toc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90ccf4f5adfb2562fc95c996b97faac7775a34bb/src%2Flibrustdoc%2Fhtml%2Ftoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90ccf4f5adfb2562fc95c996b97faac7775a34bb/src%2Flibrustdoc%2Fhtml%2Ftoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Ftoc.rs?ref=90ccf4f5adfb2562fc95c996b97faac7775a34bb", "patch": "@@ -132,7 +132,7 @@ impl TocBuilder {\n                 }\n                 Some(entry) => {\n                     sec_number = entry.sec_number.clone();\n-                    sec_number.push_str(\".\");\n+                    sec_number.push('.');\n                     (entry.level, &entry.children)\n                 }\n             };"}, {"sha": "1719b35a3629dad4903c9ed5cd5c0b81803ccca1", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/90ccf4f5adfb2562fc95c996b97faac7775a34bb/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90ccf4f5adfb2562fc95c996b97faac7775a34bb/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=90ccf4f5adfb2562fc95c996b97faac7775a34bb", "patch": "@@ -1276,7 +1276,7 @@ impl LinkCollector<'_, '_> {\n                         // This could just be a normal link or a broken link\n                         // we could potentially check if something is\n                         // \"intra-doc-link-like\" and warn in that case.\n-                        return None;\n+                        None\n                     }\n                     Err(ErrorKind::AnchorFailure(msg)) => {\n                         anchor_failure(\n@@ -1287,7 +1287,7 @@ impl LinkCollector<'_, '_> {\n                             diag.link_range,\n                             msg,\n                         );\n-                        return None;\n+                        None\n                     }\n                 }\n             }\n@@ -1383,7 +1383,7 @@ impl LinkCollector<'_, '_> {\n                         diag.link_range,\n                         candidates.present_items().collect(),\n                     );\n-                    return None;\n+                    None\n                 }\n             }\n             Some(MacroNS) => {\n@@ -1408,7 +1408,7 @@ impl LinkCollector<'_, '_> {\n                             diag.link_range,\n                             smallvec![kind],\n                         );\n-                        return None;\n+                        None\n                     }\n                 }\n             }"}, {"sha": "38ec2bef0adeb574881b22e17c966eef42312b19", "filename": "src/librustdoc/passes/html_tags.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90ccf4f5adfb2562fc95c996b97faac7775a34bb/src%2Flibrustdoc%2Fpasses%2Fhtml_tags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90ccf4f5adfb2562fc95c996b97faac7775a34bb/src%2Flibrustdoc%2Fpasses%2Fhtml_tags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fhtml_tags.rs?ref=90ccf4f5adfb2562fc95c996b97faac7775a34bb", "patch": "@@ -59,7 +59,7 @@ fn drop_tag(\n                 continue;\n             }\n             let last_tag_name_low = last_tag_name.to_lowercase();\n-            if ALLOWED_UNCLOSED.iter().any(|&at| at == &last_tag_name_low) {\n+            if ALLOWED_UNCLOSED.iter().any(|&at| at == last_tag_name_low) {\n                 continue;\n             }\n             // `tags` is used as a queue, meaning that everything after `pos` is included inside it."}, {"sha": "a276b7a63371b0687af69d0f3ff05a12dd206473", "filename": "src/librustdoc/passes/strip_hidden.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/90ccf4f5adfb2562fc95c996b97faac7775a34bb/src%2Flibrustdoc%2Fpasses%2Fstrip_hidden.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90ccf4f5adfb2562fc95c996b97faac7775a34bb/src%2Flibrustdoc%2Fpasses%2Fstrip_hidden.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fstrip_hidden.rs?ref=90ccf4f5adfb2562fc95c996b97faac7775a34bb", "patch": "@@ -26,9 +26,7 @@ crate fn strip_hidden(krate: clean::Crate, _: &DocContext<'_>) -> clean::Crate {\n \n     // strip all impls referencing stripped items\n     let mut stripper = ImplStripper { retained: &retained };\n-    let krate = stripper.fold_crate(krate);\n-\n-    krate\n+    stripper.fold_crate(krate)\n }\n \n struct Stripper<'a> {"}, {"sha": "2e14a8a977ed757c33838ce20823cb615df11318", "filename": "src/librustdoc/theme.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/90ccf4f5adfb2562fc95c996b97faac7775a34bb/src%2Flibrustdoc%2Ftheme.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90ccf4f5adfb2562fc95c996b97faac7775a34bb/src%2Flibrustdoc%2Ftheme.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftheme.rs?ref=90ccf4f5adfb2562fc95c996b97faac7775a34bb", "patch": "@@ -70,15 +70,12 @@ impl Events {\n     }\n \n     fn is_comment(&self) -> bool {\n-        match *self {\n-            Events::StartLineComment(_) | Events::StartComment(_) | Events::EndComment(_) => true,\n-            _ => false,\n-        }\n+        matches!(self, Events::StartLineComment(_) | Events::StartComment(_) | Events::EndComment(_))\n     }\n }\n \n fn previous_is_line_comment(events: &[Events]) -> bool {\n-    if let Some(&Events::StartLineComment(_)) = events.last() { true } else { false }\n+    matches!(events.last(), Some(&Events::StartLineComment(_)))\n }\n \n fn is_line_comment(pos: usize, v: &[u8], events: &[Events]) -> bool {"}, {"sha": "63f4df359b831ed2b9fe1cb8a5768c29d6ad8af7", "filename": "src/test/ui/issues/issue-80607.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/90ccf4f5adfb2562fc95c996b97faac7775a34bb/src%2Ftest%2Fui%2Fissues%2Fissue-80607.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90ccf4f5adfb2562fc95c996b97faac7775a34bb/src%2Ftest%2Fui%2Fissues%2Fissue-80607.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-80607.rs?ref=90ccf4f5adfb2562fc95c996b97faac7775a34bb", "patch": "@@ -0,0 +1,10 @@\n+// This tests makes sure the diagnostics print the offending enum variant, not just the type.\n+pub enum Enum {\n+    V1(i32),\n+}\n+\n+pub fn foo(x: i32) -> Enum {\n+    Enum::V1 { x } //~ ERROR `Enum::V1` has no field named `x`\n+}\n+\n+fn main() {}"}, {"sha": "5375478942b18e1609feb2646cebde8eb805c8c3", "filename": "src/test/ui/issues/issue-80607.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/90ccf4f5adfb2562fc95c996b97faac7775a34bb/src%2Ftest%2Fui%2Fissues%2Fissue-80607.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/90ccf4f5adfb2562fc95c996b97faac7775a34bb/src%2Ftest%2Fui%2Fissues%2Fissue-80607.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-80607.stderr?ref=90ccf4f5adfb2562fc95c996b97faac7775a34bb", "patch": "@@ -0,0 +1,14 @@\n+error[E0559]: variant `Enum::V1` has no field named `x`\n+  --> $DIR/issue-80607.rs:7:16\n+   |\n+LL |     V1(i32),\n+   |     -- `Enum::V1` defined here\n+...\n+LL |     Enum::V1 { x }\n+   |     --------   ^ field does not exist\n+   |     |\n+   |     `Enum::V1` is a tuple variant, use the appropriate syntax: `Enum::V1(/* fields */)`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0559`."}]}