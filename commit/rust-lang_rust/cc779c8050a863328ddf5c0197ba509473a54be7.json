{"sha": "cc779c8050a863328ddf5c0197ba509473a54be7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjNzc5YzgwNTBhODYzMzI4ZGRmNWMwMTk3YmE1MDk0NzNhNTRiZTc=", "commit": {"author": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2019-07-28T04:41:13Z"}, "committer": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2019-07-28T04:41:13Z"}, "message": "dev-fmt: better error handling\n\nCheck if rustfmt is installed at the start and exit if it isn't.", "tree": {"sha": "531f1175897203b6d6de3aa3bc3fd1130a93872d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/531f1175897203b6d6de3aa3bc3fd1130a93872d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc779c8050a863328ddf5c0197ba509473a54be7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc779c8050a863328ddf5c0197ba509473a54be7", "html_url": "https://github.com/rust-lang/rust/commit/cc779c8050a863328ddf5c0197ba509473a54be7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc779c8050a863328ddf5c0197ba509473a54be7/comments", "author": null, "committer": null, "parents": [{"sha": "dc69a5c0b610df452217291db1a0ebc4f76401e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc69a5c0b610df452217291db1a0ebc4f76401e3", "html_url": "https://github.com/rust-lang/rust/commit/dc69a5c0b610df452217291db1a0ebc4f76401e3"}], "stats": {"total": 29, "additions": 29, "deletions": 0}, "files": [{"sha": "3b5d6d2dbb4ca42ad6027aef9f7d607f7335a23a", "filename": "clippy_dev/src/fmt.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/cc779c8050a863328ddf5c0197ba509473a54be7/clippy_dev%2Fsrc%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc779c8050a863328ddf5c0197ba509473a54be7/clippy_dev%2Fsrc%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Ffmt.rs?ref=cc779c8050a863328ddf5c0197ba509473a54be7", "patch": "@@ -10,6 +10,7 @@ pub enum CliError {\n     CommandFailed(String),\n     IoError(io::Error),\n     ProjectRootNotFound,\n+    RustfmtNotInstalled,\n     WalkDirError(walkdir::Error),\n }\n \n@@ -36,6 +37,8 @@ pub fn run(check: bool, verbose: bool) {\n \n         let project_root = project_root()?;\n \n+        rustfmt_test(context)?;\n+\n         success &= cargo_fmt(context, project_root.as_path())?;\n         success &= cargo_fmt(context, &project_root.join(\"clippy_dev\"))?;\n         success &= cargo_fmt(context, &project_root.join(\"rustc_tools_util\"))?;\n@@ -69,6 +72,9 @@ pub fn run(check: bool, verbose: bool) {\n             CliError::ProjectRootNotFound => {\n                 eprintln!(\"error: Can't determine root of project. Please run inside a Clippy working dir.\");\n             },\n+            CliError::RustfmtNotInstalled => {\n+                eprintln!(\"error: rustfmt nightly is not installed.\");\n+            },\n             CliError::WalkDirError(err) => {\n                 eprintln!(\"error: {}\", err);\n             },\n@@ -139,6 +145,29 @@ fn cargo_fmt(context: &FmtContext, path: &Path) -> Result<bool, CliError> {\n     Ok(success)\n }\n \n+fn rustfmt_test(context: &FmtContext) -> Result<(), CliError> {\n+    let program = \"rustfmt\";\n+    let dir = std::env::current_dir()?;\n+    let args = &[\"+nightly\", \"--version\"];\n+\n+    if context.verbose {\n+        println!(\"{}\", format_command(&program, &dir, args));\n+    }\n+\n+    let output = Command::new(&program).current_dir(&dir).args(args.iter()).output()?;\n+\n+    if output.status.success() {\n+        Ok(())\n+    } else if std::str::from_utf8(&output.stderr)\n+        .unwrap_or(\"\")\n+        .starts_with(\"error: 'rustfmt' is not installed\")\n+    {\n+        Err(CliError::RustfmtNotInstalled)\n+    } else {\n+        Err(CliError::CommandFailed(format_command(&program, &dir, args)))\n+    }\n+}\n+\n fn rustfmt(context: &FmtContext, path: &Path) -> Result<bool, CliError> {\n     let mut args = vec![\"+nightly\".as_ref(), path.as_os_str()];\n     if context.check {"}]}