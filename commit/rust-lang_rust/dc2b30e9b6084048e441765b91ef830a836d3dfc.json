{"sha": "dc2b30e9b6084048e441765b91ef830a836d3dfc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjMmIzMGU5YjYwODQwNDhlNDQxNzY1YjkxZWY4MzBhODM2ZDNkZmM=", "commit": {"author": {"name": "Muhammad Mominul Huque", "email": "mominul2082@gmail.com", "date": "2018-10-11T18:07:44Z"}, "committer": {"name": "Muhammad Mominul Huque", "email": "mominul2082@gmail.com", "date": "2018-10-11T18:07:44Z"}, "message": "Replace HashMap, HashSet with FxHashMap and FxHashSet", "tree": {"sha": "d36cc20ef7c43d33488706cd65427e5d8922430c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d36cc20ef7c43d33488706cd65427e5d8922430c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc2b30e9b6084048e441765b91ef830a836d3dfc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEPNYzeVcwyOf+o1ZNnUcuizYJiVYFAlu/kXAACgkQnUcuizYJ\niVYNrQ/9EC5j2ikQGrZtC/5QTV/ELQDKBEHJAxwJK4zpTfdwSe7nF5yhFl0rzrZe\npvKS55Qoxhnj3sq/wwR5gS3s6Xz+jzSK0tbMQJLB9QafyIstgjwPQpBxmWtVCWXv\nP/e5pfJz0hFPi/jAHsTdhWamFcHeOGxQlvF8+TGqtwx1xuqF4aX+KwAUB5ho3IoK\nCvlOh8+FOZ4zUNIPVJrkjF0PzFbW8+991B+8WFEBesPEp7FBHyKjpaewwbbiDJVP\nBY+4dHDoY33IlvM8CPYBMyULy8cBKAgubEThq56F7Yw0IG7SS/qflhwyLnR5XtXU\nfe2q7x7P/kCLKao2HjHa8qMJxtb24dDGdjBCAlcHZpYqTbMpOBKdnyAVYvTP4fpK\nXwcu/M+k7q/vwbpz3Uf15C5eoqnEsneLBCl1gvjJNjcQVJUPwFKSzBW0PX5mgWq5\n4vWww31Y+KLe0qy0zjfD+hwQPiLc3zfMmEqBV4egTY7ZwlQcdxC/pG5Fyi2aOmIq\nefsLynDClLhAv7XIcEA2B/zTvDtc7ny2d1AfqPqFyvw5VYOQbBda9YgSSSZeDbEm\n/Xkd79PtzrSJqgWVmWaRwlXUMIMau9akPOJyaqU/F5LMFKpnwGOKUFDWW8i8N7n9\nyBghAZUu2ReKVZSGScx8n6CzCG4yPbUHO5o3xgJDP25VYKtshvo=\n=INjF\n-----END PGP SIGNATURE-----", "payload": "tree d36cc20ef7c43d33488706cd65427e5d8922430c\nparent 9b155c89764b8413df6b32edfde94fce1d9c15ec\nauthor Muhammad Mominul Huque <mominul2082@gmail.com> 1539281264 +0600\ncommitter Muhammad Mominul Huque <mominul2082@gmail.com> 1539281264 +0600\n\nReplace HashMap, HashSet with FxHashMap and FxHashSet\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc2b30e9b6084048e441765b91ef830a836d3dfc", "html_url": "https://github.com/rust-lang/rust/commit/dc2b30e9b6084048e441765b91ef830a836d3dfc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc2b30e9b6084048e441765b91ef830a836d3dfc/comments", "author": {"login": "mominul", "id": 9459891, "node_id": "MDQ6VXNlcjk0NTk4OTE=", "avatar_url": "https://avatars.githubusercontent.com/u/9459891?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mominul", "html_url": "https://github.com/mominul", "followers_url": "https://api.github.com/users/mominul/followers", "following_url": "https://api.github.com/users/mominul/following{/other_user}", "gists_url": "https://api.github.com/users/mominul/gists{/gist_id}", "starred_url": "https://api.github.com/users/mominul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mominul/subscriptions", "organizations_url": "https://api.github.com/users/mominul/orgs", "repos_url": "https://api.github.com/users/mominul/repos", "events_url": "https://api.github.com/users/mominul/events{/privacy}", "received_events_url": "https://api.github.com/users/mominul/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mominul", "id": 9459891, "node_id": "MDQ6VXNlcjk0NTk4OTE=", "avatar_url": "https://avatars.githubusercontent.com/u/9459891?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mominul", "html_url": "https://github.com/mominul", "followers_url": "https://api.github.com/users/mominul/followers", "following_url": "https://api.github.com/users/mominul/following{/other_user}", "gists_url": "https://api.github.com/users/mominul/gists{/gist_id}", "starred_url": "https://api.github.com/users/mominul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mominul/subscriptions", "organizations_url": "https://api.github.com/users/mominul/orgs", "repos_url": "https://api.github.com/users/mominul/repos", "events_url": "https://api.github.com/users/mominul/events{/privacy}", "received_events_url": "https://api.github.com/users/mominul/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b155c89764b8413df6b32edfde94fce1d9c15ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b155c89764b8413df6b32edfde94fce1d9c15ec", "html_url": "https://github.com/rust-lang/rust/commit/9b155c89764b8413df6b32edfde94fce1d9c15ec"}], "stats": {"total": 117, "additions": 68, "deletions": 49}, "files": [{"sha": "62feeb539ef2fdd199c0e0f6137991a6f93c3d1b", "filename": "Cargo.lock", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dc2b30e9b6084048e441765b91ef830a836d3dfc/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/dc2b30e9b6084048e441765b91ef830a836d3dfc/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=dc2b30e9b6084048e441765b91ef830a836d3dfc", "patch": "@@ -540,6 +540,7 @@ dependencies = [\n  \"ra_syntax 0.1.0\",\n  \"rayon 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"relative-path 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-hash 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"salsa 0.1.0\",\n  \"test_utils 0.1.0\",\n ]\n@@ -563,6 +564,7 @@ dependencies = [\n  \"itertools 0.7.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"join_to_string 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"ra_syntax 0.1.0\",\n+ \"rustc-hash 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"superslice 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"test_utils 0.1.0\",\n ]\n@@ -585,6 +587,7 @@ dependencies = [\n  \"ra_syntax 0.1.0\",\n  \"rayon 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"relative-path 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-hash 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde 1.0.79 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_derive 1.0.79 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.31 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -727,6 +730,14 @@ name = \"rustc-demangle\"\n version = \"0.1.9\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"rustc-hash\"\n+version = \"1.0.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"byteorder 1.2.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"rustc_version\"\n version = \"0.2.3\"\n@@ -1241,6 +1252,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum ron 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a9fa11b7a38511d46ff1959ae46ebb60bd8a746f17bdd0206b4c8de7559ac47b\"\n \"checksum rowan 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4a1a7366ece9deee5e7df8316a136d585d5c5042854c2297f7f1aee3014c9130\"\n \"checksum rustc-demangle 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bcfe5b13211b4d78e5c2cadfebd7769197d95c639c35a50057eb4c05de811395\"\n+\"checksum rustc-hash 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7540fc8b0c49f096ee9c961cda096467dce8084bec6bdca2fc83895fd9b28cb8\"\n \"checksum rustc_version 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"138e3e0acb6c9fb258b19b67cb8abd63c00679d2851805ea151465464fe9030a\"\n \"checksum ryu 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7153dd96dade874ab973e098cb62fcdbb89a03682e46b144fd09550998d4a4a7\"\n \"checksum safemem 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8dca453248a96cb0749e36ccdfe2b0b4e54a61bfef89fb97ec621eb8e0a93dd9\""}, {"sha": "a82e1761c2874e6a0b5ba2092ded0df01dc131ac", "filename": "crates/ra_analysis/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dc2b30e9b6084048e441765b91ef830a836d3dfc/crates%2Fra_analysis%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/dc2b30e9b6084048e441765b91ef830a836d3dfc/crates%2Fra_analysis%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2FCargo.toml?ref=dc2b30e9b6084048e441765b91ef830a836d3dfc", "patch": "@@ -15,6 +15,7 @@ im = \"12.0.0\"\n ra_syntax = { path = \"../ra_syntax\" }\n ra_editor = { path = \"../ra_editor\" }\n salsa = { path = \"../salsa\" }\n+rustc-hash = \"1.0\"\n \n [dev-dependencies]\n test_utils = { path = \"../test_utils\" }"}, {"sha": "36f6cf2907ef6c3681f988660a0e512d19bf7bc4", "filename": "crates/ra_analysis/src/db/imp.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/dc2b30e9b6084048e441765b91ef830a836d3dfc/crates%2Fra_analysis%2Fsrc%2Fdb%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc2b30e9b6084048e441765b91ef830a836d3dfc/crates%2Fra_analysis%2Fsrc%2Fdb%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fdb%2Fimp.rs?ref=dc2b30e9b6084048e441765b91ef830a836d3dfc", "patch": "@@ -2,9 +2,10 @@ use std::{\n     sync::Arc,\n     any::Any,\n     hash::{Hash, Hasher},\n-    collections::hash_map::{DefaultHasher, HashMap},\n+    collections::hash_map::{DefaultHasher},\n     iter,\n };\n+use rustc_hash::FxHashMap;\n use salsa;\n use {FileId, imp::FileResolverImp};\n use super::{State, Query, QueryCtx};\n@@ -13,7 +14,7 @@ pub(super) type Data = Arc<Any + Send + Sync + 'static>;\n \n #[derive(Debug)]\n pub(super) struct Db {\n-    names: Arc<HashMap<salsa::QueryTypeId, &'static str>>,\n+    names: Arc<FxHashMap<salsa::QueryTypeId, &'static str>>,\n     pub(super) imp: salsa::Db<State, Data>,\n }\n \n@@ -85,7 +86,7 @@ where\n \n pub(super) struct QueryRegistry {\n     config: Option<salsa::QueryConfig<State, Data>>,\n-    names: HashMap<salsa::QueryTypeId, &'static str>,\n+    names: FxHashMap<salsa::QueryTypeId, &'static str>,\n }\n \n impl QueryRegistry {\n@@ -109,7 +110,7 @@ impl QueryRegistry {\n                 (Arc::new(res), fingerprint)\n             })\n         );\n-        let mut names = HashMap::new();\n+        let mut names = FxHashMap::default();\n         names.insert(FILE_TEXT, \"FILE_TEXT\");\n         names.insert(FILE_SET, \"FILE_SET\");\n         QueryRegistry { config: Some(config), names }"}, {"sha": "47bc0032bf58a07539b4643dc09fa8d7f7e0e70c", "filename": "crates/ra_analysis/src/imp.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dc2b30e9b6084048e441765b91ef830a836d3dfc/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc2b30e9b6084048e441765b91ef830a836d3dfc/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fimp.rs?ref=dc2b30e9b6084048e441765b91ef830a836d3dfc", "patch": "@@ -4,11 +4,12 @@ use std::{\n         atomic::{AtomicBool, Ordering::SeqCst},\n     },\n     fmt,\n-    collections::{HashSet, VecDeque},\n+    collections::VecDeque,\n     iter,\n };\n \n use relative_path::RelativePath;\n+use rustc_hash::FxHashSet;\n use ra_editor::{self, FileSymbol, LineIndex, find_node_at_offset, LocalEdit, resolve_local_name};\n use ra_syntax::{\n     TextUnit, TextRange, SmolStr, File, AstNode,\n@@ -84,7 +85,7 @@ impl AnalysisHostImpl {\n         data.root = Arc::new(data.root.apply_changes(&mut iter::empty(), Some(resolver)));\n     }\n     pub fn set_crate_graph(&mut self, graph: CrateGraph) {\n-        let mut visited = HashSet::new();\n+        let mut visited = FxHashSet::default();\n         for &file_id in graph.crate_roots.values() {\n             if !visited.insert(file_id) {\n                 panic!(\"duplicate crate root: {:?}\", file_id);\n@@ -168,7 +169,7 @@ impl AnalysisImpl {\n         let mut res = Vec::new();\n         let mut work = VecDeque::new();\n         work.push_back(file_id);\n-        let mut visited = HashSet::new();\n+        let mut visited = FxHashSet::default();\n         while let Some(id) = work.pop_front() {\n             if let Some(crate_id) = crate_graph.crate_id_for_crate_root(id) {\n                 res.push(crate_id);"}, {"sha": "849fd93e42749aef086975e59c752d1a71913d84", "filename": "crates/ra_analysis/src/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dc2b30e9b6084048e441765b91ef830a836d3dfc/crates%2Fra_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc2b30e9b6084048e441765b91ef830a836d3dfc/crates%2Fra_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Flib.rs?ref=dc2b30e9b6084048e441765b91ef830a836d3dfc", "patch": "@@ -11,6 +11,7 @@ extern crate relative_path;\n extern crate crossbeam_channel;\n extern crate im;\n extern crate salsa;\n+extern crate rustc_hash;\n \n mod symbol_index;\n mod module_map;\n@@ -23,13 +24,13 @@ mod descriptors;\n \n use std::{\n     sync::Arc,\n-    collections::HashMap,\n     fmt::Debug,\n };\n \n use relative_path::{RelativePath, RelativePathBuf};\n use ra_syntax::{File, TextRange, TextUnit, AtomEdit};\n use imp::{AnalysisImpl, AnalysisHostImpl, FileResolverImp};\n+use rustc_hash::FxHashMap;\n \n pub use ra_editor::{\n     StructureNode, LineIndex, FileSymbol,\n@@ -46,7 +47,7 @@ pub struct CrateId(pub u32);\n \n #[derive(Debug, Clone, Default)]\n pub struct CrateGraph {\n-    pub crate_roots: HashMap<CrateId, FileId>,\n+    pub crate_roots: FxHashMap<CrateId, FileId>,\n }\n \n pub trait FileResolver: Debug + Send + Sync + 'static {"}, {"sha": "32a8c5bd05f8a7208cd0077fa5d4f9dccb9626ea", "filename": "crates/ra_analysis/src/roots.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dc2b30e9b6084048e441765b91ef830a836d3dfc/crates%2Fra_analysis%2Fsrc%2Froots.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc2b30e9b6084048e441765b91ef830a836d3dfc/crates%2Fra_analysis%2Fsrc%2Froots.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Froots.rs?ref=dc2b30e9b6084048e441765b91ef830a836d3dfc", "patch": "@@ -1,11 +1,11 @@\n use std::{\n-    collections::HashMap,\n     sync::Arc,\n     panic,\n };\n \n use once_cell::sync::OnceCell;\n use rayon::prelude::*;\n+use rustc_hash::FxHashMap;\n use ra_editor::LineIndex;\n use ra_syntax::File;\n \n@@ -118,7 +118,7 @@ impl FileData {\n #[derive(Debug)]\n pub(crate) struct ReadonlySourceRoot {\n     symbol_index: Arc<SymbolIndex>,\n-    file_map: HashMap<FileId, FileData>,\n+    file_map: FxHashMap<FileId, FileData>,\n     module_tree: Arc<ModuleTreeDescriptor>,\n }\n \n@@ -139,7 +139,7 @@ impl ReadonlySourceRoot {\n         let symbol_index = SymbolIndex::for_files(\n             modules.par_iter().map(|it| (it.0, it.1.clone()))\n         );\n-        let file_map: HashMap<FileId, FileData> = files\n+        let file_map: FxHashMap<FileId, FileData> = files\n             .into_iter()\n             .map(|(id, text)| (id, FileData::new(text)))\n             .collect();"}, {"sha": "a886cd0ff72027820ff8c8c590e59b8d4bc3cecb", "filename": "crates/ra_analysis/tests/tests.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dc2b30e9b6084048e441765b91ef830a836d3dfc/crates%2Fra_analysis%2Ftests%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc2b30e9b6084048e441765b91ef830a836d3dfc/crates%2Fra_analysis%2Ftests%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Ftests%2Ftests.rs?ref=dc2b30e9b6084048e441765b91ef830a836d3dfc", "patch": "@@ -1,12 +1,13 @@\n extern crate relative_path;\n extern crate ra_analysis;\n+extern crate rustc_hash;\n extern crate test_utils;\n \n use std::{\n     sync::Arc,\n-    collections::HashMap,\n };\n \n+use rustc_hash::FxHashMap;\n use relative_path::{RelativePath, RelativePathBuf};\n use ra_analysis::{Analysis, AnalysisHost, FileId, FileResolver, JobHandle, CrateGraph, CrateId};\n use test_utils::assert_eq_dbg;\n@@ -131,7 +132,7 @@ fn test_resolve_crate_root() {\n \n     let crate_graph = CrateGraph {\n         crate_roots: {\n-            let mut m = HashMap::new();\n+            let mut m = FxHashMap::default();\n             m.insert(CrateId(1), FileId(1));\n             m\n         },"}, {"sha": "91cefc8d7696c915bfd167f46d8102d020ce09e6", "filename": "crates/ra_editor/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dc2b30e9b6084048e441765b91ef830a836d3dfc/crates%2Fra_editor%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/dc2b30e9b6084048e441765b91ef830a836d3dfc/crates%2Fra_editor%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2FCargo.toml?ref=dc2b30e9b6084048e441765b91ef830a836d3dfc", "patch": "@@ -8,6 +8,7 @@ publish = false\n itertools = \"0.7.8\"\n superslice = \"0.1.0\"\n join_to_string = \"0.1.1\"\n+rustc-hash = \"1.0\"\n \n ra_syntax = { path = \"../ra_syntax\" }\n "}, {"sha": "20b8484b339b8cb99a3681a0a5dd299d3dc956bc", "filename": "crates/ra_editor/src/completion.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dc2b30e9b6084048e441765b91ef830a836d3dfc/crates%2Fra_editor%2Fsrc%2Fcompletion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc2b30e9b6084048e441765b91ef830a836d3dfc/crates%2Fra_editor%2Fsrc%2Fcompletion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Fcompletion.rs?ref=dc2b30e9b6084048e441765b91ef830a836d3dfc", "patch": "@@ -1,4 +1,4 @@\n-use std::collections::{HashSet, HashMap};\n+use rustc_hash::{FxHashMap, FxHashSet};\n \n use ra_syntax::{\n     File, TextUnit, AstNode, SyntaxNodeRef, SyntaxKind::*,\n@@ -96,7 +96,7 @@ fn complete_name_ref(file: &File, name_ref: ast::NameRef, acc: &mut Vec<Completi\n }\n \n fn param_completions(ctx: SyntaxNodeRef, acc: &mut Vec<CompletionItem>) {\n-    let mut params = HashMap::new();\n+    let mut params = FxHashMap::default();\n     for node in ctx.ancestors() {\n         let _ = visitor_ctx(&mut params)\n             .visit::<ast::Root, _>(process)\n@@ -114,7 +114,7 @@ fn param_completions(ctx: SyntaxNodeRef, acc: &mut Vec<CompletionItem>) {\n             })\n         });\n \n-    fn process<'a, N: ast::FnDefOwner<'a>>(node: N, params: &mut HashMap<String, (u32, ast::Param<'a>)>) {\n+    fn process<'a, N: ast::FnDefOwner<'a>>(node: N, params: &mut FxHashMap<String, (u32, ast::Param<'a>)>) {\n         node.functions()\n             .filter_map(|it| it.param_list())\n             .flat_map(|it| it.params())\n@@ -232,7 +232,7 @@ fn complete_mod_item_snippets(acc: &mut Vec<CompletionItem>) {\n }\n \n fn complete_fn(name_ref: ast::NameRef, scopes: &FnScopes, acc: &mut Vec<CompletionItem>) {\n-    let mut shadowed = HashSet::new();\n+    let mut shadowed = FxHashSet::default();\n     acc.extend(\n         scopes.scope_chain(name_ref.syntax())\n             .flat_map(|scope| scopes.entries(scope).iter())"}, {"sha": "3aabd54ae40bbfd111226f4418ef8d9cf994cb48", "filename": "crates/ra_editor/src/folding_ranges.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dc2b30e9b6084048e441765b91ef830a836d3dfc/crates%2Fra_editor%2Fsrc%2Ffolding_ranges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc2b30e9b6084048e441765b91ef830a836d3dfc/crates%2Fra_editor%2Fsrc%2Ffolding_ranges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Ffolding_ranges.rs?ref=dc2b30e9b6084048e441765b91ef830a836d3dfc", "patch": "@@ -1,4 +1,4 @@\n-use std::collections::HashSet;\n+use rustc_hash::FxHashSet;\n \n use ra_syntax::{\n     File, TextRange, SyntaxNodeRef,\n@@ -20,7 +20,7 @@ pub struct Fold {\n \n pub fn folding_ranges(file: &File) -> Vec<Fold> {\n     let mut res = vec![];\n-    let mut visited = HashSet::new();\n+    let mut visited = FxHashSet::default();\n \n     for node in file.syntax().descendants() {\n         if visited.contains(&node) {\n@@ -56,7 +56,7 @@ pub fn folding_ranges(file: &File) -> Vec<Fold> {\n fn contiguous_range_for<'a>(\n     kind: SyntaxKind,\n     node: SyntaxNodeRef<'a>,\n-    visited: &mut HashSet<SyntaxNodeRef<'a>>,\n+    visited: &mut FxHashSet<SyntaxNodeRef<'a>>,\n ) -> Option<TextRange> {\n     visited.insert(node);\n "}, {"sha": "710afc65d557d4dabb4b056625307457c04b1457", "filename": "crates/ra_editor/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dc2b30e9b6084048e441765b91ef830a836d3dfc/crates%2Fra_editor%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc2b30e9b6084048e441765b91ef830a836d3dfc/crates%2Fra_editor%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Flib.rs?ref=dc2b30e9b6084048e441765b91ef830a836d3dfc", "patch": "@@ -2,6 +2,7 @@ extern crate ra_syntax;\n extern crate superslice;\n extern crate itertools;\n extern crate join_to_string;\n+extern crate rustc_hash;\n #[cfg(test)]\n #[macro_use]\n extern crate test_utils as _test_utils;"}, {"sha": "9a48bda020d4a52c19d3a466f00556a1ffcb16d2", "filename": "crates/ra_editor/src/scope/fn_scope.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/dc2b30e9b6084048e441765b91ef830a836d3dfc/crates%2Fra_editor%2Fsrc%2Fscope%2Ffn_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc2b30e9b6084048e441765b91ef830a836d3dfc/crates%2Fra_editor%2Fsrc%2Fscope%2Ffn_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Fscope%2Ffn_scope.rs?ref=dc2b30e9b6084048e441765b91ef830a836d3dfc", "patch": "@@ -1,7 +1,5 @@\n-use std::{\n-    fmt,\n-    collections::HashMap,\n-};\n+use std::fmt;\n+use rustc_hash::FxHashMap;\n \n use ra_syntax::{\n     SyntaxNodeRef, SyntaxNode, SmolStr, AstNode,\n@@ -15,7 +13,7 @@ type ScopeId = usize;\n pub struct FnScopes {\n     pub self_param: Option<SyntaxNode>,\n     scopes: Vec<ScopeData>,\n-    scope_for: HashMap<SyntaxNode, ScopeId>,\n+    scope_for: FxHashMap<SyntaxNode, ScopeId>,\n }\n \n impl FnScopes {\n@@ -25,7 +23,7 @@ impl FnScopes {\n                 .and_then(|it| it.self_param())\n                 .map(|it| it.syntax().owned()),\n             scopes: Vec::new(),\n-            scope_for: HashMap::new()\n+            scope_for: FxHashMap::default()\n         };\n         let root = scopes.root_scope();\n         scopes.add_params_bindings(root, fn_def.param_list());\n@@ -242,9 +240,9 @@ struct ScopeData {\n }\n \n pub fn resolve_local_name<'a>(name_ref: ast::NameRef, scopes: &'a FnScopes) -> Option<&'a ScopeEntry> {\n-    use std::collections::HashSet;\n+    use rustc_hash::FxHashSet;\n \n-    let mut shadowed = HashSet::new();\n+    let mut shadowed = FxHashSet::default();\n     let ret = scopes.scope_chain(name_ref.syntax())\n         .flat_map(|scope| scopes.entries(scope).iter())\n         .filter(|entry| shadowed.insert(entry.name()))"}, {"sha": "1fe6b2ebe60349876ee2800aa39d215300d387f8", "filename": "crates/ra_lsp_server/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dc2b30e9b6084048e441765b91ef830a836d3dfc/crates%2Fra_lsp_server%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/dc2b30e9b6084048e441765b91ef830a836d3dfc/crates%2Fra_lsp_server%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2FCargo.toml?ref=dc2b30e9b6084048e441765b91ef830a836d3dfc", "patch": "@@ -21,6 +21,7 @@ im = \"12.0.0\"\n cargo_metadata = \"0.6.0\"\n text_unit = { version = \"0.1.2\", features = [\"serde\"] }\n smol_str = { version = \"0.1.5\", features = [\"serde\"] }\n+rustc-hash = \"1.0\"\n \n ra_syntax = { path = \"../ra_syntax\" }\n ra_editor = { path = \"../ra_editor\" }"}, {"sha": "60652d55eee4f57bc26d54434027564b755f1bdd", "filename": "crates/ra_lsp_server/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dc2b30e9b6084048e441765b91ef830a836d3dfc/crates%2Fra_lsp_server%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc2b30e9b6084048e441765b91ef830a836d3dfc/crates%2Fra_lsp_server%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Flib.rs?ref=dc2b30e9b6084048e441765b91ef830a836d3dfc", "patch": "@@ -16,6 +16,7 @@ extern crate walkdir;\n extern crate im;\n extern crate relative_path;\n extern crate cargo_metadata;\n+extern crate rustc_hash;\n \n extern crate gen_lsp_server;\n extern crate ra_editor;"}, {"sha": "ab8be15e98b1e83914ffef14e3649fee06cf4148", "filename": "crates/ra_lsp_server/src/main_loop/handlers.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc2b30e9b6084048e441765b91ef830a836d3dfc/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc2b30e9b6084048e441765b91ef830a836d3dfc/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=dc2b30e9b6084048e441765b91ef830a836d3dfc", "patch": "@@ -1,4 +1,4 @@\n-use std::collections::{HashMap};\n+use rustc_hash::FxHashMap;\n \n use languageserver_types::{\n     Diagnostic, DiagnosticSeverity, DocumentSymbol,\n@@ -267,7 +267,7 @@ pub fn handle_runnables(\n             bin: \"cargo\".to_string(),\n             args,\n             env: {\n-                let mut m = HashMap::new();\n+                let mut m = FxHashMap::default();\n                 m.insert(\n                     \"RUST_BACKTRACE\".to_string(),\n                     \"short\".to_string(),"}, {"sha": "402615e42583f59eaa4b28432a5bba75b7e80427", "filename": "crates/ra_lsp_server/src/main_loop/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dc2b30e9b6084048e441765b91ef830a836d3dfc/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc2b30e9b6084048e441765b91ef830a836d3dfc/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fmod.rs?ref=dc2b30e9b6084048e441765b91ef830a836d3dfc", "patch": "@@ -3,7 +3,6 @@ mod subscriptions;\n \n use std::{\n     path::PathBuf,\n-    collections::{HashMap},\n };\n \n use serde::{Serialize, de::DeserializeOwned};\n@@ -15,6 +14,7 @@ use gen_lsp_server::{\n     RawRequest, RawNotification, RawMessage, RawResponse, ErrorCode,\n     handle_shutdown,\n };\n+use rustc_hash::FxHashMap;\n \n use {\n     req,\n@@ -50,7 +50,7 @@ pub fn main_loop(\n     info!(\"server initialized, serving requests\");\n     let mut state = ServerWorldState::new();\n \n-    let mut pending_requests = HashMap::new();\n+    let mut pending_requests = FxHashMap::default();\n     let mut subs = Subscriptions::new();\n     let main_res = main_loop_inner(\n         internal_mode,\n@@ -95,7 +95,7 @@ fn main_loop_inner(\n     fs_worker: Worker<PathBuf, (PathBuf, Vec<FileEvent>)>,\n     ws_worker: Worker<PathBuf, Result<CargoWorkspace>>,\n     state: &mut ServerWorldState,\n-    pending_requests: &mut HashMap<u64, JobHandle>,\n+    pending_requests: &mut FxHashMap<u64, JobHandle>,\n     subs: &mut Subscriptions,\n ) -> Result<()> {\n     let (libdata_sender, libdata_receiver) = unbounded();\n@@ -213,7 +213,7 @@ fn main_loop_inner(\n fn on_task(\n     task: Task,\n     msg_sender: &Sender<RawMessage>,\n-    pending_requests: &mut HashMap<u64, JobHandle>,\n+    pending_requests: &mut FxHashMap<u64, JobHandle>,\n ) {\n     match task {\n         Task::Respond(response) => {\n@@ -229,7 +229,7 @@ fn on_task(\n \n fn on_request(\n     world: &mut ServerWorldState,\n-    pending_requests: &mut HashMap<u64, JobHandle>,\n+    pending_requests: &mut FxHashMap<u64, JobHandle>,\n     pool: &ThreadPool,\n     sender: &Sender<Task>,\n     req: RawRequest,\n@@ -269,7 +269,7 @@ fn on_request(\n fn on_notification(\n     msg_sender: &Sender<RawMessage>,\n     state: &mut ServerWorldState,\n-    pending_requests: &mut HashMap<u64, JobHandle>,\n+    pending_requests: &mut FxHashMap<u64, JobHandle>,\n     subs: &mut Subscriptions,\n     not: RawNotification,\n ) -> Result<()> {"}, {"sha": "31015338287f7545ecce88325542d36fe25b2a37", "filename": "crates/ra_lsp_server/src/main_loop/subscriptions.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dc2b30e9b6084048e441765b91ef830a836d3dfc/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fsubscriptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc2b30e9b6084048e441765b91ef830a836d3dfc/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fsubscriptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fsubscriptions.rs?ref=dc2b30e9b6084048e441765b91ef830a836d3dfc", "patch": "@@ -1,13 +1,13 @@\n-use std::collections::HashSet;\n+use rustc_hash::FxHashSet;\n use ra_analysis::FileId;\n \n pub struct Subscriptions {\n-    subs: HashSet<FileId>,\n+    subs: FxHashSet<FileId>,\n }\n \n impl Subscriptions {\n     pub fn new() -> Subscriptions {\n-        Subscriptions { subs: HashSet::new() }\n+        Subscriptions { subs: FxHashSet::default() }\n     }\n     pub fn add_sub(&mut self, file_id: FileId) {\n         self.subs.insert(file_id);"}, {"sha": "43e4fd6542b3748afba0cab76ee530143a3a9827", "filename": "crates/ra_lsp_server/src/project_model.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dc2b30e9b6084048e441765b91ef830a836d3dfc/crates%2Fra_lsp_server%2Fsrc%2Fproject_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc2b30e9b6084048e441765b91ef830a836d3dfc/crates%2Fra_lsp_server%2Fsrc%2Fproject_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fproject_model.rs?ref=dc2b30e9b6084048e441765b91ef830a836d3dfc", "patch": "@@ -1,7 +1,7 @@\n use std::{\n-    collections::{HashMap, HashSet},\n     path::{Path, PathBuf},\n };\n+use rustc_hash::{FxHashMap, FxHashSet};\n use cargo_metadata::{metadata_run, CargoOpt};\n use ra_syntax::SmolStr;\n \n@@ -80,11 +80,11 @@ impl CargoWorkspace {\n             true,\n             Some(CargoOpt::AllFeatures)\n         ).map_err(|e| format_err!(\"cargo metadata failed: {}\", e))?;\n-        let mut pkg_by_id = HashMap::new();\n+        let mut pkg_by_id = FxHashMap::default();\n         let mut packages = Vec::new();\n         let mut targets = Vec::new();\n \n-        let ws_members: HashSet<String> = meta.workspace_members\n+        let ws_members: FxHashSet<String> = meta.workspace_members\n             .into_iter()\n             .map(|it| it.raw)\n             .collect();"}, {"sha": "f80957589715b8cf00fbeb22701ced58b0a6ef68", "filename": "crates/ra_lsp_server/src/req.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc2b30e9b6084048e441765b91ef830a836d3dfc/crates%2Fra_lsp_server%2Fsrc%2Freq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc2b30e9b6084048e441765b91ef830a836d3dfc/crates%2Fra_lsp_server%2Fsrc%2Freq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Freq.rs?ref=dc2b30e9b6084048e441765b91ef830a836d3dfc", "patch": "@@ -1,4 +1,4 @@\n-use std::collections::HashMap;\n+use rustc_hash::FxHashMap;\n use languageserver_types::{TextDocumentIdentifier, Range, Url, Position, Location};\n use url_serde;\n \n@@ -149,7 +149,7 @@ pub struct Runnable {\n     pub label: String,\n     pub bin: String,\n     pub args: Vec<String>,\n-    pub env: HashMap<String, String>,\n+    pub env: FxHashMap<String, String>,\n }\n \n #[derive(Serialize, Debug)]"}, {"sha": "c4cdf83d47223b281cd77461eb95e5a3950c342b", "filename": "crates/ra_lsp_server/src/server_world.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dc2b30e9b6084048e441765b91ef830a836d3dfc/crates%2Fra_lsp_server%2Fsrc%2Fserver_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc2b30e9b6084048e441765b91ef830a836d3dfc/crates%2Fra_lsp_server%2Fsrc%2Fserver_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fserver_world.rs?ref=dc2b30e9b6084048e441765b91ef830a836d3dfc", "patch": "@@ -1,10 +1,10 @@\n use std::{\n     fs,\n     path::{PathBuf, Path},\n-    collections::HashMap,\n     sync::Arc,\n };\n \n+use rustc_hash::FxHashMap;\n use languageserver_types::Url;\n use ra_analysis::{FileId, AnalysisHost, Analysis, CrateGraph, CrateId, LibraryData, FileResolver};\n \n@@ -20,7 +20,7 @@ pub struct ServerWorldState {\n     pub workspaces: Arc<Vec<CargoWorkspace>>,\n     pub analysis_host: AnalysisHost,\n     pub path_map: PathMap,\n-    pub mem_map: HashMap<FileId, Option<String>>,\n+    pub mem_map: FxHashMap<FileId, Option<String>>,\n }\n \n #[derive(Clone)]\n@@ -36,7 +36,7 @@ impl ServerWorldState {\n             workspaces: Arc::new(Vec::new()),\n             analysis_host: AnalysisHost::new(),\n             path_map: PathMap::new(),\n-            mem_map: HashMap::new(),\n+            mem_map: FxHashMap::default(),\n         }\n     }\n     pub fn apply_fs_changes(&mut self, events: Vec<FileEvent>) {\n@@ -121,7 +121,7 @@ impl ServerWorldState {\n         Ok(file_id)\n     }\n     pub fn set_workspaces(&mut self, ws: Vec<CargoWorkspace>) {\n-        let mut crate_roots = HashMap::new();\n+        let mut crate_roots = FxHashMap::default();\n         ws.iter()\n           .flat_map(|ws| {\n               ws.packages()"}]}