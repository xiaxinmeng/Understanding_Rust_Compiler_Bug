{"sha": "18268bfd9eb7e8ca6e0277f9a2f8ad06819cac3e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4MjY4YmZkOWViN2U4Y2E2ZTAyNzdmOWEyZjhhZDA2ODE5Y2FjM2U=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-10-14T16:12:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-10-14T16:12:51Z"}, "message": "Auto merge of #29001 - arielb1:normalized-foreign, r=eddyb\n\nThis is needed as item types are allowed to be unnormalized.\r\n\r\nFixes an ICE that occurs when foreign function signatures contained\r\nan associated type.\r\n\r\nFixes #28983", "tree": {"sha": "158563059f5cf17cb1655051849f739d352bc7de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/158563059f5cf17cb1655051849f739d352bc7de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/18268bfd9eb7e8ca6e0277f9a2f8ad06819cac3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/18268bfd9eb7e8ca6e0277f9a2f8ad06819cac3e", "html_url": "https://github.com/rust-lang/rust/commit/18268bfd9eb7e8ca6e0277f9a2f8ad06819cac3e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/18268bfd9eb7e8ca6e0277f9a2f8ad06819cac3e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b28a5502486bebdca89a8f1ce9fd6194827ba4cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/b28a5502486bebdca89a8f1ce9fd6194827ba4cd", "html_url": "https://github.com/rust-lang/rust/commit/b28a5502486bebdca89a8f1ce9fd6194827ba4cd"}, {"sha": "bee664f9d0135c1e5125b5d80f44bed5d29a4584", "url": "https://api.github.com/repos/rust-lang/rust/commits/bee664f9d0135c1e5125b5d80f44bed5d29a4584", "html_url": "https://github.com/rust-lang/rust/commit/bee664f9d0135c1e5125b5d80f44bed5d29a4584"}], "stats": {"total": 43, "additions": 36, "deletions": 7}, "files": [{"sha": "95e9e8581bd614b22c3b643c1834165931404ab2", "filename": "src/librustc_trans/trans/foreign.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/18268bfd9eb7e8ca6e0277f9a2f8ad06819cac3e/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18268bfd9eb7e8ca6e0277f9a2f8ad06819cac3e/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs?ref=18268bfd9eb7e8ca6e0277f9a2f8ad06819cac3e", "patch": "@@ -27,6 +27,7 @@ use trans::monomorphize;\n use trans::type_::Type;\n use trans::type_of::*;\n use trans::type_of;\n+use middle::infer;\n use middle::ty::{self, Ty};\n use middle::subst::Substs;\n \n@@ -254,6 +255,7 @@ pub fn trans_native_call<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n         _ => ccx.sess().bug(\"trans_native_call called on non-function type\")\n     };\n     let fn_sig = ccx.tcx().erase_late_bound_regions(fn_sig);\n+    let fn_sig = infer::normalize_associated_type(ccx.tcx(), &fn_sig);\n     let llsig = foreign_signature(ccx, &fn_sig, &passed_arg_tys[..]);\n     let fn_type = cabi::compute_abi_info(ccx,\n                                          &llsig.llarg_tys,\n@@ -558,15 +560,15 @@ pub fn register_rust_fn_with_foreign_abi(ccx: &CrateContext,\n                                          -> ValueRef {\n     let _icx = push_ctxt(\"foreign::register_foreign_fn\");\n \n-    let tys = foreign_types_for_id(ccx, node_id);\n-    let llfn_ty = lltype_for_fn_from_foreign_types(ccx, &tys);\n     let t = ccx.tcx().node_id_to_type(node_id);\n     let cconv = match t.sty {\n         ty::TyBareFn(_, ref fn_ty) => {\n             llvm_calling_convention(ccx, fn_ty.abi)\n         }\n         _ => panic!(\"expected bare fn in register_rust_fn_with_foreign_abi\")\n     };\n+    let tys = foreign_types_for_fn_ty(ccx, t);\n+    let llfn_ty = lltype_for_fn_from_foreign_types(ccx, &tys);\n     let llfn = base::register_fn_llvmty(ccx, sp, sym, node_id, cconv, llfn_ty);\n     add_argument_attributes(&tys, llfn);\n     debug!(\"register_rust_fn_with_foreign_abi(node_id={}, llfn_ty={}, llfn={})\",\n@@ -937,18 +939,14 @@ fn foreign_signature<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n     }\n }\n \n-fn foreign_types_for_id<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n-                                  id: ast::NodeId) -> ForeignTypes<'tcx> {\n-    foreign_types_for_fn_ty(ccx, ccx.tcx().node_id_to_type(id))\n-}\n-\n fn foreign_types_for_fn_ty<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                                      ty: Ty<'tcx>) -> ForeignTypes<'tcx> {\n     let fn_sig = match ty.sty {\n         ty::TyBareFn(_, ref fn_ty) => &fn_ty.sig,\n         _ => ccx.sess().bug(\"foreign_types_for_fn_ty called on non-function type\")\n     };\n     let fn_sig = ccx.tcx().erase_late_bound_regions(fn_sig);\n+    let fn_sig = infer::normalize_associated_type(ccx.tcx(), &fn_sig);\n     let llsig = foreign_signature(ccx, &fn_sig, &fn_sig.inputs);\n     let fn_ty = cabi::compute_abi_info(ccx,\n                                        &llsig.llarg_tys,"}, {"sha": "658e9e14ee2e061aad929c0b090dd75d3a930b44", "filename": "src/test/run-pass/issue-28983.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/18268bfd9eb7e8ca6e0277f9a2f8ad06819cac3e/src%2Ftest%2Frun-pass%2Fissue-28983.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18268bfd9eb7e8ca6e0277f9a2f8ad06819cac3e/src%2Ftest%2Frun-pass%2Fissue-28983.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-28983.rs?ref=18268bfd9eb7e8ca6e0277f9a2f8ad06819cac3e", "patch": "@@ -0,0 +1,31 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait Test { type T; }\n+\n+impl Test for u32 {\n+    type T = i32;\n+}\n+\n+pub mod export {\n+    #[no_mangle]\n+    pub extern \"C\" fn issue_28983(t: <u32 as ::Test>::T) -> i32 { t*3 }\n+}\n+\n+// to test both exporting and importing functions, import\n+// a function from ourselves.\n+extern \"C\" {\n+    fn issue_28983(t: <u32 as Test>::T) -> i32;\n+}\n+\n+fn main() {\n+    assert_eq!(export::issue_28983(2), 6);\n+    assert_eq!(unsafe { issue_28983(3) }, 9);\n+}"}]}