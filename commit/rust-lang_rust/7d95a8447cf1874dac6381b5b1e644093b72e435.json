{"sha": "7d95a8447cf1874dac6381b5b1e644093b72e435", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkOTVhODQ0N2NmMTg3NGRhYzYzODFiNWIxZTY0NDA5M2I3MmU0MzU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-08-17T14:30:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-17T14:30:24Z"}, "message": "Merge #5776 #5780\n\n5776: Fix eslint errors on .eslintrc.js and rollup.config.js r=matklad a=fuafa\n\nEslint complains if these two files does not include in the `tsconfig.json`.\r\n```\r\nParsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\r\nThe file does not match your project config: .eslintrc.js.\r\nThe file must be included in at least one of the projects provided.eslint\r\n```\r\n![image](https://user-images.githubusercontent.com/20750310/90338269-176d4f80-e01b-11ea-8710-3ea817b235d2.png)\r\n\r\n\n\n5780: Fixup whitespace when adding missing impl items r=matklad a=jDomantas\n\nGenerate properly formatted whitespace when adding impl items - with an empty line between items and removing extra whitespace that often appears at the end.\r\n\r\nThis is my first time working on rust analyzer so I'm not very familiar with its internal APIs. If there's a better way to do such syntax tree editing I'd be glad to hear it.\n\nCo-authored-by: xiaofa <xiaofalzx@gmail.com>\nCo-authored-by: jDomantas <djadenkus@gmail.com>", "tree": {"sha": "5777ebe3d9055a4759c78a30e3474b8e3a60241b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5777ebe3d9055a4759c78a30e3474b8e3a60241b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d95a8447cf1874dac6381b5b1e644093b72e435", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfOpSACRBK7hj4Ov3rIwAAdHIIAHoAiRR1bhyHm2d6u8MG+L5+\nadnA6B2mFVNeRO1wez8JCwcWWVjCmY2qkwg6fcBze05iLGBDsCiyrfdNbBLA1n+B\nJdanH+o4YUkv9kKZgCrwkcz9t8c6juXcpdCjDiURR2IqflGkJOnjbAT7KmPNdyZe\n+xqHFKHhTuxvYA2J1a99Wx40odPL9ONyMktga1QZESVEGgTI/5n5k0EtIVY+kjzA\nKWusySUo03ERFnSvS5BebcMPyKBDm+azGUkvjUiMoqhiJEamaOJrq3pxhaOYb7/z\n7Rmt0jqjKEQYgKB7eqcnSDDr9DdpmKaTw4T5ockTwzIsd+SAHK+rEVhErrJ2Tck=\n=4Qcx\n-----END PGP SIGNATURE-----\n", "payload": "tree 5777ebe3d9055a4759c78a30e3474b8e3a60241b\nparent 6826dd044a5a08359197b2a006905eb8518494a2\nparent 951fc3f65ac023ef61d3a447399e1432e38700fa\nparent a565a42f46a2ad20dac598046943b09429f1a946\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1597674624 +0000\ncommitter GitHub <noreply@github.com> 1597674624 +0000\n\nMerge #5776 #5780\n\n5776: Fix eslint errors on .eslintrc.js and rollup.config.js r=matklad a=fuafa\n\nEslint complains if these two files does not include in the `tsconfig.json`.\r\n```\r\nParsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\r\nThe file does not match your project config: .eslintrc.js.\r\nThe file must be included in at least one of the projects provided.eslint\r\n```\r\n![image](https://user-images.githubusercontent.com/20750310/90338269-176d4f80-e01b-11ea-8710-3ea817b235d2.png)\r\n\r\n\n\n5780: Fixup whitespace when adding missing impl items r=matklad a=jDomantas\n\nGenerate properly formatted whitespace when adding impl items - with an empty line between items and removing extra whitespace that often appears at the end.\r\n\r\nThis is my first time working on rust analyzer so I'm not very familiar with its internal APIs. If there's a better way to do such syntax tree editing I'd be glad to hear it.\n\nCo-authored-by: xiaofa <xiaofalzx@gmail.com>\nCo-authored-by: jDomantas <djadenkus@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d95a8447cf1874dac6381b5b1e644093b72e435", "html_url": "https://github.com/rust-lang/rust/commit/7d95a8447cf1874dac6381b5b1e644093b72e435", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d95a8447cf1874dac6381b5b1e644093b72e435/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6826dd044a5a08359197b2a006905eb8518494a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/6826dd044a5a08359197b2a006905eb8518494a2", "html_url": "https://github.com/rust-lang/rust/commit/6826dd044a5a08359197b2a006905eb8518494a2"}, {"sha": "951fc3f65ac023ef61d3a447399e1432e38700fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/951fc3f65ac023ef61d3a447399e1432e38700fa", "html_url": "https://github.com/rust-lang/rust/commit/951fc3f65ac023ef61d3a447399e1432e38700fa"}, {"sha": "a565a42f46a2ad20dac598046943b09429f1a946", "url": "https://api.github.com/repos/rust-lang/rust/commits/a565a42f46a2ad20dac598046943b09429f1a946", "html_url": "https://github.com/rust-lang/rust/commit/a565a42f46a2ad20dac598046943b09429f1a946"}], "stats": {"total": 98, "additions": 89, "deletions": 9}, "files": [{"sha": "83a2ada9a288f42d6518235145087d452cd7ee74", "filename": "crates/assists/src/handlers/add_missing_impl_members.rs", "status": "modified", "additions": 59, "deletions": 4, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/7d95a8447cf1874dac6381b5b1e644093b72e435/crates%2Fassists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d95a8447cf1874dac6381b5b1e644093b72e435/crates%2Fassists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs?ref=7d95a8447cf1874dac6381b5b1e644093b72e435", "patch": "@@ -48,7 +48,6 @@ enum AddMissingImplMembersMode {\n //     fn foo(&self) -> u32 {\n //         ${0:todo!()}\n //     }\n-//\n // }\n // ```\n pub(crate) fn add_missing_impl_members(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n@@ -89,8 +88,8 @@ pub(crate) fn add_missing_impl_members(acc: &mut Assists, ctx: &AssistContext) -\n // impl Trait for () {\n //     Type X = ();\n //     fn foo(&self) {}\n-//     $0fn bar(&self) {}\n //\n+//     $0fn bar(&self) {}\n // }\n // ```\n pub(crate) fn add_missing_default_members(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n@@ -240,15 +239,18 @@ struct S;\n \n impl Foo for S {\n     fn bar(&self) {}\n+\n     $0type Output;\n+\n     const CONST: usize = 42;\n+\n     fn foo(&self) {\n         todo!()\n     }\n+\n     fn baz(&self) {\n         todo!()\n     }\n-\n }\"#,\n         );\n     }\n@@ -281,10 +283,10 @@ struct S;\n \n impl Foo for S {\n     fn bar(&self) {}\n+\n     fn foo(&self) {\n         ${0:todo!()}\n     }\n-\n }\"#,\n         );\n     }\n@@ -599,6 +601,7 @@ trait Foo {\n struct S;\n impl Foo for S {\n     $0type Output;\n+\n     fn foo(&self) {\n         todo!()\n     }\n@@ -705,6 +708,58 @@ trait Tr {\n \n impl Tr for () {\n     $0type Ty;\n+}\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn test_whitespace_fixup_preserves_bad_tokens() {\n+        check_assist(\n+            add_missing_impl_members,\n+            r#\"\n+trait Tr {\n+    fn foo();\n+}\n+\n+impl Tr for ()<|> {\n+    +++\n+}\"#,\n+            r#\"\n+trait Tr {\n+    fn foo();\n+}\n+\n+impl Tr for () {\n+    fn foo() {\n+        ${0:todo!()}\n+    }\n+    +++\n+}\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn test_whitespace_fixup_preserves_comments() {\n+        check_assist(\n+            add_missing_impl_members,\n+            r#\"\n+trait Tr {\n+    fn foo();\n+}\n+\n+impl Tr for ()<|> {\n+    // very important\n+}\"#,\n+            r#\"\n+trait Tr {\n+    fn foo();\n+}\n+\n+impl Tr for () {\n+    fn foo() {\n+        ${0:todo!()}\n+    }\n+    // very important\n }\"#,\n         )\n     }"}, {"sha": "17356700373c104f10b5d2d55360a279f3b9a465", "filename": "crates/assists/src/tests/generated.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7d95a8447cf1874dac6381b5b1e644093b72e435/crates%2Fassists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d95a8447cf1874dac6381b5b1e644093b72e435/crates%2Fassists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Ftests%2Fgenerated.rs?ref=7d95a8447cf1874dac6381b5b1e644093b72e435", "patch": "@@ -82,8 +82,8 @@ trait Trait {\n impl Trait for () {\n     Type X = ();\n     fn foo(&self) {}\n-    $0fn bar(&self) {}\n \n+    $0fn bar(&self) {}\n }\n \"#####,\n     )\n@@ -115,7 +115,6 @@ impl Trait<u32> for () {\n     fn foo(&self) -> u32 {\n         ${0:todo!()}\n     }\n-\n }\n \"#####,\n     )"}, {"sha": "060b209663e61e6ce9380e4380a8dad47cccd74a", "filename": "crates/syntax/src/ast/edit.rs", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/7d95a8447cf1874dac6381b5b1e644093b72e435/crates%2Fsyntax%2Fsrc%2Fast%2Fedit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d95a8447cf1874dac6381b5b1e644093b72e435/crates%2Fsyntax%2Fsrc%2Fast%2Fedit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fedit.rs?ref=7d95a8447cf1874dac6381b5b1e644093b72e435", "patch": "@@ -91,29 +91,52 @@ impl ast::AssocItemList {\n             res = make_multiline(res);\n         }\n         items.into_iter().for_each(|it| res = res.append_item(it));\n-        res\n+        res.fixup_trailing_whitespace().unwrap_or(res)\n     }\n \n     #[must_use]\n     pub fn append_item(&self, item: ast::AssocItem) -> ast::AssocItemList {\n-        let (indent, position) = match self.assoc_items().last() {\n+        let (indent, position, whitespace) = match self.assoc_items().last() {\n             Some(it) => (\n                 leading_indent(it.syntax()).unwrap_or_default().to_string(),\n                 InsertPosition::After(it.syntax().clone().into()),\n+                \"\\n\\n\",\n             ),\n             None => match self.l_curly_token() {\n                 Some(it) => (\n                     \"    \".to_string() + &leading_indent(self.syntax()).unwrap_or_default(),\n                     InsertPosition::After(it.into()),\n+                    \"\\n\",\n                 ),\n                 None => return self.clone(),\n             },\n         };\n-        let ws = tokens::WsBuilder::new(&format!(\"\\n{}\", indent));\n+        let ws = tokens::WsBuilder::new(&format!(\"{}{}\", whitespace, indent));\n         let to_insert: ArrayVec<[SyntaxElement; 2]> =\n             [ws.ws().into(), item.syntax().clone().into()].into();\n         self.insert_children(position, to_insert)\n     }\n+\n+    /// Remove extra whitespace between last item and closing curly brace.\n+    fn fixup_trailing_whitespace(&self) -> Option<ast::AssocItemList> {\n+        let first_token_after_items =\n+            self.assoc_items().last()?.syntax().next_sibling_or_token()?;\n+        let last_token_before_curly = self.r_curly_token()?.prev_sibling_or_token()?;\n+        if last_token_before_curly != first_token_after_items {\n+            // there is something more between last item and\n+            // right curly than just whitespace - bail out\n+            return None;\n+        }\n+        let whitespace =\n+            last_token_before_curly.clone().into_token().and_then(ast::Whitespace::cast)?;\n+        let text = whitespace.syntax().text();\n+        let newline = text.rfind(\"\\n\")?;\n+        let keep = tokens::WsBuilder::new(&text[newline..]);\n+        Some(self.replace_children(\n+            first_token_after_items..=last_token_before_curly,\n+            std::iter::once(keep.ws().into()),\n+        ))\n+    }\n }\n \n impl ast::RecordExprFieldList {"}, {"sha": "3df5c860bd5950f31719963702f54fcad62372dc", "filename": "editors/code/.eslintignore", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7d95a8447cf1874dac6381b5b1e644093b72e435/editors%2Fcode%2F.eslintignore", "raw_url": "https://github.com/rust-lang/rust/raw/7d95a8447cf1874dac6381b5b1e644093b72e435/editors%2Fcode%2F.eslintignore", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2F.eslintignore?ref=7d95a8447cf1874dac6381b5b1e644093b72e435", "patch": "@@ -0,0 +1,3 @@\n+node_modules\n+.eslintrc.js\n+rollup.config.js\n\\ No newline at end of file"}]}