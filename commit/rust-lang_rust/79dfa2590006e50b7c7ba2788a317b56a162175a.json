{"sha": "79dfa2590006e50b7c7ba2788a317b56a162175a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5ZGZhMjU5MDAwNmU1MGI3YzdiYTI3ODhhMzE3YjU2YTE2MjE3NWE=", "commit": {"author": {"name": "Andrea Canciani", "email": "ranma42@gmail.com", "date": "2016-01-28T14:12:16Z"}, "committer": {"name": "Andrea Canciani", "email": "ranma42@gmail.com", "date": "2016-01-28T14:13:43Z"}, "message": "Improve naming and explanations", "tree": {"sha": "2a16c5d4ea379c384726113d1fcc67da2654d85c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a16c5d4ea379c384726113d1fcc67da2654d85c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/79dfa2590006e50b7c7ba2788a317b56a162175a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/79dfa2590006e50b7c7ba2788a317b56a162175a", "html_url": "https://github.com/rust-lang/rust/commit/79dfa2590006e50b7c7ba2788a317b56a162175a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/79dfa2590006e50b7c7ba2788a317b56a162175a/comments", "author": {"login": "ranma42", "id": 1506030, "node_id": "MDQ6VXNlcjE1MDYwMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1506030?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ranma42", "html_url": "https://github.com/ranma42", "followers_url": "https://api.github.com/users/ranma42/followers", "following_url": "https://api.github.com/users/ranma42/following{/other_user}", "gists_url": "https://api.github.com/users/ranma42/gists{/gist_id}", "starred_url": "https://api.github.com/users/ranma42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ranma42/subscriptions", "organizations_url": "https://api.github.com/users/ranma42/orgs", "repos_url": "https://api.github.com/users/ranma42/repos", "events_url": "https://api.github.com/users/ranma42/events{/privacy}", "received_events_url": "https://api.github.com/users/ranma42/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ranma42", "id": 1506030, "node_id": "MDQ6VXNlcjE1MDYwMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1506030?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ranma42", "html_url": "https://github.com/ranma42", "followers_url": "https://api.github.com/users/ranma42/followers", "following_url": "https://api.github.com/users/ranma42/following{/other_user}", "gists_url": "https://api.github.com/users/ranma42/gists{/gist_id}", "starred_url": "https://api.github.com/users/ranma42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ranma42/subscriptions", "organizations_url": "https://api.github.com/users/ranma42/orgs", "repos_url": "https://api.github.com/users/ranma42/repos", "events_url": "https://api.github.com/users/ranma42/events{/privacy}", "received_events_url": "https://api.github.com/users/ranma42/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b33d39da93a9873fa002c6875c934fd13ec7d4a", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b33d39da93a9873fa002c6875c934fd13ec7d4a", "html_url": "https://github.com/rust-lang/rust/commit/7b33d39da93a9873fa002c6875c934fd13ec7d4a"}], "stats": {"total": 21, "additions": 14, "deletions": 7}, "files": [{"sha": "c97d7b086f4ded7b724f5dc1b525cdcb535d0c8e", "filename": "src/libcore/char.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/79dfa2590006e50b7c7ba2788a317b56a162175a/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79dfa2590006e50b7c7ba2788a317b56a162175a/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=79dfa2590006e50b7c7ba2788a317b56a162175a", "patch": "@@ -300,15 +300,18 @@ impl CharExt for char {\n     #[inline]\n     fn escape_unicode(self) -> EscapeUnicode {\n         let c = self as u32;\n+\n         // or-ing 1 ensures that for c==0 the code computes that one\n         // digit should be printed and (which is the same) avoids the\n         // (31 - 32) underflow\n         let msb = 31 - (c | 1).leading_zeros();\n-        let msdigit = msb / 4;\n+\n+        // the index of the most significant hex digit\n+        let ms_hex_digit = msb / 4;\n         EscapeUnicode {\n             c: self,\n             state: EscapeUnicodeState::Backslash,\n-            offset: msdigit as usize,\n+            hex_digit_idx: ms_hex_digit as usize,\n         }\n     }\n \n@@ -431,7 +434,11 @@ pub fn encode_utf16_raw(mut ch: u32, dst: &mut [u16]) -> Option<usize> {\n pub struct EscapeUnicode {\n     c: char,\n     state: EscapeUnicodeState,\n-    offset: usize,\n+\n+    // The index of the next hex digit to be printed (0 if none),\n+    // i.e. the number of remaining hex digits to be printed;\n+    // increasing from the least significant digit: 0x543210\n+    hex_digit_idx: usize,\n }\n \n #[derive(Clone)]\n@@ -463,11 +470,11 @@ impl Iterator for EscapeUnicode {\n                 Some('{')\n             }\n             EscapeUnicodeState::Value => {\n-                let c = from_digit(((self.c as u32) >> (self.offset * 4)) & 0xf, 16).unwrap();\n-                if self.offset == 0 {\n+                let c = from_digit(((self.c as u32) >> (self.hex_digit_idx * 4)) & 0xf, 16).unwrap();\n+                if self.hex_digit_idx == 0 {\n                     self.state = EscapeUnicodeState::RightBrace;\n                 } else {\n-                    self.offset -= 1;\n+                    self.hex_digit_idx -= 1;\n                 }\n                 Some(c)\n             }\n@@ -488,7 +495,7 @@ impl Iterator for EscapeUnicode {\n             EscapeUnicodeState::RightBrace => 1,\n             EscapeUnicodeState::Done => 0,\n         };\n-        let n = n + self.offset;\n+        let n = n + self.hex_digit_idx;\n         (n, Some(n))\n     }\n }"}]}