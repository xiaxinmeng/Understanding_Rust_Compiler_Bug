{"sha": "adbdf7549c6b24c37629eabdc4be0346e0c8fd56", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkYmRmNzU0OWM2YjI0YzM3NjI5ZWFiZGM0YmUwMzQ2ZTBjOGZkNTY=", "commit": {"author": {"name": "ThibsG", "email": "Thibs@debian.com", "date": "2020-05-03T13:16:00Z"}, "committer": {"name": "Thibaud Genty", "email": "thibaud.genty@cosmian.com", "date": "2020-05-14T14:01:07Z"}, "message": "Merge `for_loop_over_option` and `for_loop_over_result` lints into `for_loop_over_fallible` lint", "tree": {"sha": "861cbf5d6e9df2bbd086ee8fcd006063d83ad9be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/861cbf5d6e9df2bbd086ee8fcd006063d83ad9be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/adbdf7549c6b24c37629eabdc4be0346e0c8fd56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/adbdf7549c6b24c37629eabdc4be0346e0c8fd56", "html_url": "https://github.com/rust-lang/rust/commit/adbdf7549c6b24c37629eabdc4be0346e0c8fd56", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/adbdf7549c6b24c37629eabdc4be0346e0c8fd56/comments", "author": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e8be599cd04a8566224c63eeb07f5fa04605702", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e8be599cd04a8566224c63eeb07f5fa04605702", "html_url": "https://github.com/rust-lang/rust/commit/0e8be599cd04a8566224c63eeb07f5fa04605702"}], "stats": {"total": 116, "additions": 46, "deletions": 70}, "files": [{"sha": "3f9486e09721e471d844924d317c8c668fdd6acb", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/adbdf7549c6b24c37629eabdc4be0346e0c8fd56/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/adbdf7549c6b24c37629eabdc4be0346e0c8fd56/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=adbdf7549c6b24c37629eabdc4be0346e0c8fd56", "patch": "@@ -1361,8 +1361,7 @@ Released 2018-09-13\n [`fn_to_numeric_cast`]: https://rust-lang.github.io/rust-clippy/master/index.html#fn_to_numeric_cast\n [`fn_to_numeric_cast_with_truncation`]: https://rust-lang.github.io/rust-clippy/master/index.html#fn_to_numeric_cast_with_truncation\n [`for_kv_map`]: https://rust-lang.github.io/rust-clippy/master/index.html#for_kv_map\n-[`for_loop_over_option`]: https://rust-lang.github.io/rust-clippy/master/index.html#for_loop_over_option\n-[`for_loop_over_result`]: https://rust-lang.github.io/rust-clippy/master/index.html#for_loop_over_result\n+[`for_loop_over_fallible`]: https://rust-lang.github.io/rust-clippy/master/index.html#for_loop_over_fallible\n [`forget_copy`]: https://rust-lang.github.io/rust-clippy/master/index.html#forget_copy\n [`forget_ref`]: https://rust-lang.github.io/rust-clippy/master/index.html#forget_ref\n [`future_not_send`]: https://rust-lang.github.io/rust-clippy/master/index.html#future_not_send"}, {"sha": "8de94d19d31c757fe10d8d1f367de3fe54baae8f", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/adbdf7549c6b24c37629eabdc4be0346e0c8fd56/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adbdf7549c6b24c37629eabdc4be0346e0c8fd56/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=adbdf7549c6b24c37629eabdc4be0346e0c8fd56", "patch": "@@ -615,8 +615,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &loops::EXPLICIT_INTO_ITER_LOOP,\n         &loops::EXPLICIT_ITER_LOOP,\n         &loops::FOR_KV_MAP,\n-        &loops::FOR_LOOP_OVER_OPTION,\n-        &loops::FOR_LOOP_OVER_RESULT,\n+        &loops::FOR_LOOP_OVER_FALLIBLE,\n         &loops::ITER_NEXT_LOOP,\n         &loops::MANUAL_MEMCPY,\n         &loops::MUT_RANGE_BOUND,\n@@ -1265,8 +1264,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&loops::EMPTY_LOOP),\n         LintId::of(&loops::EXPLICIT_COUNTER_LOOP),\n         LintId::of(&loops::FOR_KV_MAP),\n-        LintId::of(&loops::FOR_LOOP_OVER_OPTION),\n-        LintId::of(&loops::FOR_LOOP_OVER_RESULT),\n+        LintId::of(&loops::FOR_LOOP_OVER_FALLIBLE),\n         LintId::of(&loops::ITER_NEXT_LOOP),\n         LintId::of(&loops::MANUAL_MEMCPY),\n         LintId::of(&loops::MUT_RANGE_BOUND),\n@@ -1641,8 +1639,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&inline_fn_without_body::INLINE_FN_WITHOUT_BODY),\n         LintId::of(&let_underscore::LET_UNDERSCORE_LOCK),\n         LintId::of(&literal_representation::MISTYPED_LITERAL_SUFFIXES),\n-        LintId::of(&loops::FOR_LOOP_OVER_OPTION),\n-        LintId::of(&loops::FOR_LOOP_OVER_RESULT),\n+        LintId::of(&loops::FOR_LOOP_OVER_FALLIBLE),\n         LintId::of(&loops::ITER_NEXT_LOOP),\n         LintId::of(&loops::NEVER_LOOP),\n         LintId::of(&loops::WHILE_IMMUTABLE_CONDITION),"}, {"sha": "da6793a69d63e78c1210dafcef3009c0e652552d", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 27, "deletions": 37, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/adbdf7549c6b24c37629eabdc4be0346e0c8fd56/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adbdf7549c6b24c37629eabdc4be0346e0c8fd56/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=adbdf7549c6b24c37629eabdc4be0346e0c8fd56", "patch": "@@ -168,55 +168,46 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for `for` loops over `Option` values.\n+    /// **What it does:** Checks for `for` loops over `Option` or `Result` values.\n     ///\n     /// **Why is this bad?** Readability. This is more clearly expressed as an `if\n     /// let`.\n     ///\n     /// **Known problems:** None.\n     ///\n     /// **Example:**\n-    /// ```ignore\n-    /// for x in option {\n-    ///     ..\n+    /// ```rust\n+    /// # let opt = Some(1);\n+    ///\n+    /// // Bad\n+    /// for x in opt {\n+    ///     // ..\n     /// }\n-    /// ```\n     ///\n-    /// This should be\n-    /// ```ignore\n-    /// if let Some(x) = option {\n-    ///     ..\n+    /// // Good\n+    /// if let Some(x) = opt {\n+    ///     // ..\n     /// }\n     /// ```\n-    pub FOR_LOOP_OVER_OPTION,\n-    correctness,\n-    \"for-looping over an `Option`, which is more clearly expressed as an `if let`\"\n-}\n-\n-declare_clippy_lint! {\n-    /// **What it does:** Checks for `for` loops over `Result` values.\n     ///\n-    /// **Why is this bad?** Readability. This is more clearly expressed as an `if\n-    /// let`.\n+    /// // or\n     ///\n-    /// **Known problems:** None.\n+    /// ```rust\n+    /// # let res: Result<i32, std::io::Error> = Ok(1);\n     ///\n-    /// **Example:**\n-    /// ```ignore\n-    /// for x in result {\n-    ///     ..\n+    /// // Bad\n+    /// for x in &res {\n+    ///     // ..\n     /// }\n-    /// ```\n     ///\n-    /// This should be\n-    /// ```ignore\n-    /// if let Ok(x) = result {\n-    ///     ..\n+    /// // Good\n+    /// if let Ok(x) = res {\n+    ///     // ..\n     /// }\n     /// ```\n-    pub FOR_LOOP_OVER_RESULT,\n+    pub FOR_LOOP_OVER_FALLIBLE,\n     correctness,\n-    \"for-looping over a `Result`, which is more clearly expressed as an `if let`\"\n+    \"for-looping over an `Option` or a `Result`, which is more clearly expressed as an `if let`\"\n }\n \n declare_clippy_lint! {\n@@ -435,8 +426,7 @@ declare_lint_pass!(Loops => [\n     EXPLICIT_ITER_LOOP,\n     EXPLICIT_INTO_ITER_LOOP,\n     ITER_NEXT_LOOP,\n-    FOR_LOOP_OVER_RESULT,\n-    FOR_LOOP_OVER_OPTION,\n+    FOR_LOOP_OVER_FALLIBLE,\n     WHILE_LET_LOOP,\n     NEEDLESS_COLLECT,\n     EXPLICIT_COUNTER_LOOP,\n@@ -1283,7 +1273,7 @@ fn check_for_loop_arg(cx: &LateContext<'_, '_>, pat: &Pat<'_>, arg: &Expr<'_>, e\n                     ITER_NEXT_LOOP,\n                     expr.span,\n                     \"you are iterating over `Iterator::next()` which is an Option; this will compile but is \\\n-                     probably not what you want\",\n+                    probably not what you want\",\n                 );\n                 next_loop_linted = true;\n             }\n@@ -1300,11 +1290,11 @@ fn check_arg_type(cx: &LateContext<'_, '_>, pat: &Pat<'_>, arg: &Expr<'_>) {\n     if is_type_diagnostic_item(cx, ty, sym!(option_type)) {\n         span_lint_and_help(\n             cx,\n-            FOR_LOOP_OVER_OPTION,\n+            FOR_LOOP_OVER_FALLIBLE,\n             arg.span,\n             &format!(\n                 \"for loop over `{0}`, which is an `Option`. This is more readably written as an \\\n-                 `if let` statement.\",\n+                `if let` statement.\",\n                 snippet(cx, arg.span, \"_\")\n             ),\n             None,\n@@ -1317,11 +1307,11 @@ fn check_arg_type(cx: &LateContext<'_, '_>, pat: &Pat<'_>, arg: &Expr<'_>) {\n     } else if is_type_diagnostic_item(cx, ty, sym!(result_type)) {\n         span_lint_and_help(\n             cx,\n-            FOR_LOOP_OVER_RESULT,\n+            FOR_LOOP_OVER_FALLIBLE,\n             arg.span,\n             &format!(\n                 \"for loop over `{0}`, which is a `Result`. This is more readably written as an \\\n-                 `if let` statement.\",\n+                `if let` statement.\",\n                 snippet(cx, arg.span, \"_\")\n             ),\n             None,"}, {"sha": "0ea0f55a38180ecc30453f590fa16916ef9b53f6", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/adbdf7549c6b24c37629eabdc4be0346e0c8fd56/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adbdf7549c6b24c37629eabdc4be0346e0c8fd56/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=adbdf7549c6b24c37629eabdc4be0346e0c8fd56", "patch": "@@ -676,16 +676,9 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n         module: \"loops\",\n     },\n     Lint {\n-        name: \"for_loop_over_option\",\n+        name: \"for_loop_over_fallible\",\n         group: \"correctness\",\n-        desc: \"for-looping over an `Option`, which is more clearly expressed as an `if let`\",\n-        deprecation: None,\n-        module: \"loops\",\n-    },\n-    Lint {\n-        name: \"for_loop_over_result\",\n-        group: \"correctness\",\n-        desc: \"for-looping over a `Result`, which is more clearly expressed as an `if let`\",\n+        desc: \"for-looping over an `Option` or a `Result`, which is more clearly expressed as an `if let`\",\n         deprecation: None,\n         module: \"loops\",\n     },"}, {"sha": "e52468cdd4b61b027f4b052586ef30f71d26d08c", "filename": "tests/ui/for_loop_over_fallible.rs", "status": "renamed", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/adbdf7549c6b24c37629eabdc4be0346e0c8fd56/tests%2Fui%2Ffor_loop_over_fallible.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adbdf7549c6b24c37629eabdc4be0346e0c8fd56/tests%2Fui%2Ffor_loop_over_fallible.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loop_over_fallible.rs?ref=adbdf7549c6b24c37629eabdc4be0346e0c8fd56", "patch": "@@ -1,18 +1,16 @@\n-#![warn(clippy::for_loop_over_option, clippy::for_loop_over_result)]\n+#![warn(clippy::for_loop_over_fallible)]\n \n-/// Tests for_loop_over_result and for_loop_over_option\n-\n-fn for_loop_over_option_and_result() {\n+fn for_loop_over_fallible() {\n     let option = Some(1);\n     let result = option.ok_or(\"x not found\");\n     let v = vec![0, 1, 2];\n \n-    // check FOR_LOOP_OVER_OPTION lint\n+    // check over an `Option`\n     for x in option {\n         println!(\"{}\", x);\n     }\n \n-    // check FOR_LOOP_OVER_RESULT lint\n+    // check over a `Result`\n     for x in result {\n         println!(\"{}\", x);\n     }", "previous_filename": "tests/ui/for_loop_over_option_result.rs"}, {"sha": "4ce9a144ad8b526a13ad2b675b90b4f9705499af", "filename": "tests/ui/for_loop_over_fallible.stderr", "status": "renamed", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/adbdf7549c6b24c37629eabdc4be0346e0c8fd56/tests%2Fui%2Ffor_loop_over_fallible.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/adbdf7549c6b24c37629eabdc4be0346e0c8fd56/tests%2Fui%2Ffor_loop_over_fallible.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loop_over_fallible.stderr?ref=adbdf7549c6b24c37629eabdc4be0346e0c8fd56", "patch": "@@ -1,55 +1,54 @@\n error: for loop over `option`, which is an `Option`. This is more readably written as an `if let` statement.\n-  --> $DIR/for_loop_over_option_result.rs:11:14\n+  --> $DIR/for_loop_over_fallible.rs:9:14\n    |\n LL |     for x in option {\n    |              ^^^^^^\n    |\n-   = note: `-D clippy::for-loop-over-option` implied by `-D warnings`\n+   = note: `-D clippy::for-loop-over-fallible` implied by `-D warnings`\n    = help: consider replacing `for x in option` with `if let Some(x) = option`\n \n error: for loop over `result`, which is a `Result`. This is more readably written as an `if let` statement.\n-  --> $DIR/for_loop_over_option_result.rs:16:14\n+  --> $DIR/for_loop_over_fallible.rs:14:14\n    |\n LL |     for x in result {\n    |              ^^^^^^\n    |\n-   = note: `-D clippy::for-loop-over-result` implied by `-D warnings`\n    = help: consider replacing `for x in result` with `if let Ok(x) = result`\n \n error: for loop over `option.ok_or(\"x not found\")`, which is a `Result`. This is more readably written as an `if let` statement.\n-  --> $DIR/for_loop_over_option_result.rs:20:14\n+  --> $DIR/for_loop_over_fallible.rs:18:14\n    |\n LL |     for x in option.ok_or(\"x not found\") {\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider replacing `for x in option.ok_or(\"x not found\")` with `if let Ok(x) = option.ok_or(\"x not found\")`\n \n error: you are iterating over `Iterator::next()` which is an Option; this will compile but is probably not what you want\n-  --> $DIR/for_loop_over_option_result.rs:26:14\n+  --> $DIR/for_loop_over_fallible.rs:24:14\n    |\n LL |     for x in v.iter().next() {\n    |              ^^^^^^^^^^^^^^^\n    |\n    = note: `#[deny(clippy::iter_next_loop)]` on by default\n \n error: for loop over `v.iter().next().and(Some(0))`, which is an `Option`. This is more readably written as an `if let` statement.\n-  --> $DIR/for_loop_over_option_result.rs:31:14\n+  --> $DIR/for_loop_over_fallible.rs:29:14\n    |\n LL |     for x in v.iter().next().and(Some(0)) {\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider replacing `for x in v.iter().next().and(Some(0))` with `if let Some(x) = v.iter().next().and(Some(0))`\n \n error: for loop over `v.iter().next().ok_or(\"x not found\")`, which is a `Result`. This is more readably written as an `if let` statement.\n-  --> $DIR/for_loop_over_option_result.rs:35:14\n+  --> $DIR/for_loop_over_fallible.rs:33:14\n    |\n LL |     for x in v.iter().next().ok_or(\"x not found\") {\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider replacing `for x in v.iter().next().ok_or(\"x not found\")` with `if let Ok(x) = v.iter().next().ok_or(\"x not found\")`\n \n error: this loop never actually loops\n-  --> $DIR/for_loop_over_option_result.rs:47:5\n+  --> $DIR/for_loop_over_fallible.rs:45:5\n    |\n LL | /     while let Some(x) = option {\n LL | |         println!(\"{}\", x);\n@@ -60,7 +59,7 @@ LL | |     }\n    = note: `#[deny(clippy::never_loop)]` on by default\n \n error: this loop never actually loops\n-  --> $DIR/for_loop_over_option_result.rs:53:5\n+  --> $DIR/for_loop_over_fallible.rs:51:5\n    |\n LL | /     while let Ok(x) = result {\n LL | |         println!(\"{}\", x);", "previous_filename": "tests/ui/for_loop_over_option_result.stderr"}]}