{"sha": "0ec3aee569a8a34117d265e48eb980a955a2186d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlYzNhZWU1NjlhOGEzNDExN2QyNjVlNDhlYjk4MGE5NTVhMjE4NmQ=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2017-11-29T10:37:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-11-29T10:37:43Z"}, "message": "Rollup merge of #45969 - ia0:mpsc_recv_deadline, r=alexcrichton\n\nAdd std::sync::mpsc::Receiver::recv_deadline()\n\nEssentially renames recv_max_until to recv_deadline (mostly copying recv_timeout\ndocumentation). This function is useful to avoid the often unnecessary call to\nInstant::now in recv_timeout (e.g. when the user already has a deadline). A\nconcrete example would be something along those lines:\n\n```rust\nuse std::sync::mpsc::Receiver;\nuse std::time::{Duration, Instant};\n\n/// Reads a batch of elements\n///\n/// Returns as soon as `max_size` elements have been received or `timeout` expires.\nfn recv_batch_timeout<T>(receiver: &Receiver<T>, timeout: Duration, max_size: usize) -> Vec<T> {\n    recv_batch_deadline(receiver, Instant::now() + timeout, max_size)\n}\n\n/// Reads a batch of elements\n///\n/// Returns as soon as `max_size` elements have been received or `deadline` is reached.\nfn recv_batch_deadline<T>(receiver: &Receiver<T>, deadline: Instant, max_size: usize) -> Vec<T> {\n    let mut result = Vec::new();\n    while let Ok(x) = receiver.recv_deadline(deadline) {\n        result.push(x);\n        if result.len() == max_size {\n            break;\n        }\n    }\n    result\n}\n```", "tree": {"sha": "6839d3966e0bb4d92f20a1f3c0b360fee8d4f453", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6839d3966e0bb4d92f20a1f3c0b360fee8d4f453"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ec3aee569a8a34117d265e48eb980a955a2186d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ec3aee569a8a34117d265e48eb980a955a2186d", "html_url": "https://github.com/rust-lang/rust/commit/0ec3aee569a8a34117d265e48eb980a955a2186d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ec3aee569a8a34117d265e48eb980a955a2186d/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77ab3a1d5ff69c0cb3eb85a75ef734eaf7429f1b", "url": "https://api.github.com/repos/rust-lang/rust/commits/77ab3a1d5ff69c0cb3eb85a75ef734eaf7429f1b", "html_url": "https://github.com/rust-lang/rust/commit/77ab3a1d5ff69c0cb3eb85a75ef734eaf7429f1b"}, {"sha": "8e025d8009b661bde3397bf323aa088ba23e46d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e025d8009b661bde3397bf323aa088ba23e46d1", "html_url": "https://github.com/rust-lang/rust/commit/8e025d8009b661bde3397bf323aa088ba23e46d1"}], "stats": {"total": 65, "additions": 63, "deletions": 2}, "files": [{"sha": "27c5f9f96d9f20daca65723818c22bd299cb88cf", "filename": "src/libstd/sync/mpsc/mod.rs", "status": "modified", "additions": 63, "deletions": 2, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/0ec3aee569a8a34117d265e48eb980a955a2186d/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ec3aee569a8a34117d265e48eb980a955a2186d/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs?ref=0ec3aee569a8a34117d265e48eb980a955a2186d", "patch": "@@ -1297,11 +1297,72 @@ impl<T> Receiver<T> {\n             Err(TryRecvError::Disconnected)\n                 => Err(RecvTimeoutError::Disconnected),\n             Err(TryRecvError::Empty)\n-                => self.recv_max_until(Instant::now() + timeout)\n+                => self.recv_deadline(Instant::now() + timeout)\n         }\n     }\n \n-    fn recv_max_until(&self, deadline: Instant) -> Result<T, RecvTimeoutError> {\n+    /// Attempts to wait for a value on this receiver, returning an error if the\n+    /// corresponding channel has hung up, or if `deadline` is reached.\n+    ///\n+    /// This function will always block the current thread if there is no data\n+    /// available and it's possible for more data to be sent. Once a message is\n+    /// sent to the corresponding [`Sender`][] (or [`SyncSender`]), then this\n+    /// receiver will wake up and return that message.\n+    ///\n+    /// If the corresponding [`Sender`] has disconnected, or it disconnects while\n+    /// this call is blocking, this call will wake up and return [`Err`] to\n+    /// indicate that no more messages can ever be received on this channel.\n+    /// However, since channels are buffered, messages sent before the disconnect\n+    /// will still be properly received.\n+    ///\n+    /// [`Sender`]: struct.Sender.html\n+    /// [`SyncSender`]: struct.SyncSender.html\n+    /// [`Err`]: ../../../std/result/enum.Result.html#variant.Err\n+    ///\n+    /// # Examples\n+    ///\n+    /// Successfully receiving value before reaching deadline:\n+    ///\n+    /// ```no_run\n+    /// #![feature(deadline_api)]\n+    /// use std::thread;\n+    /// use std::time::{Duration, Instant};\n+    /// use std::sync::mpsc;\n+    ///\n+    /// let (send, recv) = mpsc::channel();\n+    ///\n+    /// thread::spawn(move || {\n+    ///     send.send('a').unwrap();\n+    /// });\n+    ///\n+    /// assert_eq!(\n+    ///     recv.recv_deadline(Instant::now() + Duration::from_millis(400)),\n+    ///     Ok('a')\n+    /// );\n+    /// ```\n+    ///\n+    /// Receiving an error upon reaching deadline:\n+    ///\n+    /// ```no_run\n+    /// #![feature(deadline_api)]\n+    /// use std::thread;\n+    /// use std::time::{Duration, Instant};\n+    /// use std::sync::mpsc;\n+    ///\n+    /// let (send, recv) = mpsc::channel();\n+    ///\n+    /// thread::spawn(move || {\n+    ///     thread::sleep(Duration::from_millis(800));\n+    ///     send.send('a').unwrap();\n+    /// });\n+    ///\n+    /// assert_eq!(\n+    ///     recv.recv_deadline(Instant::now() + Duration::from_millis(400)),\n+    ///     Err(mpsc::RecvTimeoutError::Timeout)\n+    /// );\n+    /// ```\n+    #[unstable(feature = \"deadline_api\", issue = \"46316\")]\n+    pub fn recv_deadline(&self, deadline: Instant) -> Result<T, RecvTimeoutError> {\n         use self::RecvTimeoutError::*;\n \n         loop {"}]}