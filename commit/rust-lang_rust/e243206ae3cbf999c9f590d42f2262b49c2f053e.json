{"sha": "e243206ae3cbf999c9f590d42f2262b49c2f053e", "node_id": "C_kwDOAAsO6NoAKGUyNDMyMDZhZTNjYmY5OTljOWY1OTBkNDJmMjI2MmI0OWMyZjA1M2U", "commit": {"author": {"name": "Neven Villani", "email": "vanille@crans.org", "date": "2023-03-16T13:49:00Z"}, "committer": {"name": "Neven Villani", "email": "vanille@crans.org", "date": "2023-03-16T13:56:18Z"}, "message": "TB: new tests", "tree": {"sha": "1721d7017734f9cb3109a1ae34ef80074c2e9451", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1721d7017734f9cb3109a1ae34ef80074c2e9451"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e243206ae3cbf999c9f590d42f2262b49c2f053e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e243206ae3cbf999c9f590d42f2262b49c2f053e", "html_url": "https://github.com/rust-lang/rust/commit/e243206ae3cbf999c9f590d42f2262b49c2f053e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e243206ae3cbf999c9f590d42f2262b49c2f053e/comments", "author": {"login": "Vanille-N", "id": 58042063, "node_id": "MDQ6VXNlcjU4MDQyMDYz", "avatar_url": "https://avatars.githubusercontent.com/u/58042063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Vanille-N", "html_url": "https://github.com/Vanille-N", "followers_url": "https://api.github.com/users/Vanille-N/followers", "following_url": "https://api.github.com/users/Vanille-N/following{/other_user}", "gists_url": "https://api.github.com/users/Vanille-N/gists{/gist_id}", "starred_url": "https://api.github.com/users/Vanille-N/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Vanille-N/subscriptions", "organizations_url": "https://api.github.com/users/Vanille-N/orgs", "repos_url": "https://api.github.com/users/Vanille-N/repos", "events_url": "https://api.github.com/users/Vanille-N/events{/privacy}", "received_events_url": "https://api.github.com/users/Vanille-N/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Vanille-N", "id": 58042063, "node_id": "MDQ6VXNlcjU4MDQyMDYz", "avatar_url": "https://avatars.githubusercontent.com/u/58042063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Vanille-N", "html_url": "https://github.com/Vanille-N", "followers_url": "https://api.github.com/users/Vanille-N/followers", "following_url": "https://api.github.com/users/Vanille-N/following{/other_user}", "gists_url": "https://api.github.com/users/Vanille-N/gists{/gist_id}", "starred_url": "https://api.github.com/users/Vanille-N/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Vanille-N/subscriptions", "organizations_url": "https://api.github.com/users/Vanille-N/orgs", "repos_url": "https://api.github.com/users/Vanille-N/repos", "events_url": "https://api.github.com/users/Vanille-N/events{/privacy}", "received_events_url": "https://api.github.com/users/Vanille-N/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8741303f6e50f0a596a98449138b0ffd8e345a7f", "url": "https://api.github.com/repos/rust-lang/rust/commits/8741303f6e50f0a596a98449138b0ffd8e345a7f", "html_url": "https://github.com/rust-lang/rust/commit/8741303f6e50f0a596a98449138b0ffd8e345a7f"}], "stats": {"total": 888, "additions": 888, "deletions": 0}, "files": [{"sha": "122a8ff8752c5079a89d91601f4690a33cc49573", "filename": "src/tools/miri/tests/fail/tree-borrows/alternate-read-write.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e243206ae3cbf999c9f590d42f2262b49c2f053e/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ftree-borrows%2Falternate-read-write.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e243206ae3cbf999c9f590d42f2262b49c2f053e/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ftree-borrows%2Falternate-read-write.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ftree-borrows%2Falternate-read-write.rs?ref=e243206ae3cbf999c9f590d42f2262b49c2f053e", "patch": "@@ -0,0 +1,19 @@\n+//@compile-flags: -Zmiri-tree-borrows\n+\n+// Check that TB properly rejects alternating Reads and Writes, but tolerates\n+// alternating only Reads to Reserved mutable references.\n+pub fn main() {\n+    let x = &mut 0u8;\n+    let y = unsafe { &mut *(x as *mut u8) };\n+    // Foreign Read, but this is a no-op from the point of view of y (still Reserved)\n+    let _val = *x;\n+    // Now we activate y, for this to succeed y needs to not have been Frozen\n+    // by the previous operation\n+    *y += 1; // Success\n+    // This time y gets Frozen...\n+    let _val = *x;\n+    // ... and the next Write attempt fails.\n+    *y += 1; // Failure //~ ERROR: /write access through .* is forbidden/\n+    let _val = *x;\n+    *y += 1; // Unreachable\n+}"}, {"sha": "7c5bcd4e7b04b747f402605827405618f2c92a38", "filename": "src/tools/miri/tests/fail/tree-borrows/alternate-read-write.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e243206ae3cbf999c9f590d42f2262b49c2f053e/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ftree-borrows%2Falternate-read-write.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e243206ae3cbf999c9f590d42f2262b49c2f053e/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ftree-borrows%2Falternate-read-write.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ftree-borrows%2Falternate-read-write.stderr?ref=e243206ae3cbf999c9f590d42f2262b49c2f053e", "patch": "@@ -0,0 +1,14 @@\n+error: Undefined Behavior: write access through <TAG> is forbidden because it is a child of <TAG> which is Frozen.\n+  --> $DIR/alternate-read-write.rs:LL:CC\n+   |\n+LL |     *y += 1; // Failure\n+   |     ^^^^^^^ write access through <TAG> is forbidden because it is a child of <TAG> which is Frozen.\n+   |\n+   = help: this indicates a potential bug in the program: it performed an invalid operation, but the Tree Borrows rules it violated are still experimental\n+   = note: BACKTRACE:\n+   = note: inside `main` at $DIR/alternate-read-write.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "215100de0a13ce0c715a193ea8f580827c5e30a1", "filename": "src/tools/miri/tests/fail/tree-borrows/fragile-data-race.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/e243206ae3cbf999c9f590d42f2262b49c2f053e/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ftree-borrows%2Ffragile-data-race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e243206ae3cbf999c9f590d42f2262b49c2f053e/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ftree-borrows%2Ffragile-data-race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ftree-borrows%2Ffragile-data-race.rs?ref=e243206ae3cbf999c9f590d42f2262b49c2f053e", "patch": "@@ -0,0 +1,42 @@\n+//! Race-condition-like interaction between a read and a reborrow.\n+//! Even though no write or fake write occurs, reads have an effect on protected\n+//! Reserved. This is a protected-retag/read data race, but is not *detected* as\n+//! a data race violation because reborrows are not writes.\n+//!\n+//! This test is sensitive to the exact schedule so we disable preemption.\n+//@compile-flags: -Zmiri-tree-borrows -Zmiri-preemption-rate=0\n+use std::ptr::addr_of_mut;\n+use std::thread;\n+\n+#[derive(Copy, Clone)]\n+struct SendPtr(*mut u8);\n+\n+unsafe impl Send for SendPtr {}\n+\n+// First thread is just a reborrow, but for an instant `x` is\n+// protected and thus vulnerable to foreign reads.\n+fn thread_1(x: &mut u8) -> SendPtr {\n+    thread::yield_now(); // make the other thread go first\n+    SendPtr(x as *mut u8)\n+}\n+\n+// Second thread simply performs a read.\n+fn thread_2(x: &u8) {\n+    let _val = *x;\n+}\n+\n+fn main() {\n+    let mut x = 0u8;\n+    let x_1 = unsafe { &mut *addr_of_mut!(x) };\n+    let xg = unsafe { &*addr_of_mut!(x) };\n+\n+    // The two threads are executed in parallel on aliasing pointers.\n+    // UB occurs if the read of thread_2 occurs while the protector of thread_1\n+    // is in place.\n+    let hf = thread::spawn(move || thread_1(x_1));\n+    let hg = thread::spawn(move || thread_2(xg));\n+    let SendPtr(p) = hf.join().unwrap();\n+    let () = hg.join().unwrap();\n+\n+    unsafe { *p = 1 }; //~ ERROR: /write access through .* is forbidden/\n+}"}, {"sha": "a078d18d3b02bfafd7729f6d5413350608f84415", "filename": "src/tools/miri/tests/fail/tree-borrows/fragile-data-race.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e243206ae3cbf999c9f590d42f2262b49c2f053e/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ftree-borrows%2Ffragile-data-race.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e243206ae3cbf999c9f590d42f2262b49c2f053e/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ftree-borrows%2Ffragile-data-race.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ftree-borrows%2Ffragile-data-race.stderr?ref=e243206ae3cbf999c9f590d42f2262b49c2f053e", "patch": "@@ -0,0 +1,14 @@\n+error: Undefined Behavior: write access through <TAG> is forbidden because it is a child of <TAG> which is Frozen.\n+  --> $DIR/fragile-data-race.rs:LL:CC\n+   |\n+LL |     unsafe { *p = 1 };\n+   |              ^^^^^^ write access through <TAG> is forbidden because it is a child of <TAG> which is Frozen.\n+   |\n+   = help: this indicates a potential bug in the program: it performed an invalid operation, but the Tree Borrows rules it violated are still experimental\n+   = note: BACKTRACE:\n+   = note: inside `main` at $DIR/fragile-data-race.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "8450e1c168d9a86dbe5f9003d4d1a81fd185a623", "filename": "src/tools/miri/tests/fail/tree-borrows/outside-range.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e243206ae3cbf999c9f590d42f2262b49c2f053e/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ftree-borrows%2Foutside-range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e243206ae3cbf999c9f590d42f2262b49c2f053e/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ftree-borrows%2Foutside-range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ftree-borrows%2Foutside-range.rs?ref=e243206ae3cbf999c9f590d42f2262b49c2f053e", "patch": "@@ -0,0 +1,22 @@\n+//@compile-flags: -Zmiri-tree-borrows\n+\n+// Check that in the case of locations outside the range of a pointer,\n+// protectors trigger if and only if the location has already been accessed\n+fn main() {\n+    unsafe {\n+        let data = &mut [0u8, 1, 2, 3];\n+        let raw = data.as_mut_ptr();\n+        stuff(&mut *raw, raw);\n+    }\n+}\n+\n+unsafe fn stuff(x: &mut u8, y: *mut u8) {\n+    let xraw = x as *mut u8;\n+    // No issue here: location 1 is not accessed\n+    *y.add(1) = 42;\n+    // Still no issue: location 2 is not invalidated\n+    let _val = *xraw.add(2);\n+    // However protector triggers if location is both accessed and invalidated\n+    let _val = *xraw.add(3);\n+    *y.add(3) = 42; //~ ERROR: /write access through .* is forbidden/\n+}"}, {"sha": "4396c63679e105c806022f17d299df370e1dc740", "filename": "src/tools/miri/tests/fail/tree-borrows/outside-range.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e243206ae3cbf999c9f590d42f2262b49c2f053e/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ftree-borrows%2Foutside-range.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e243206ae3cbf999c9f590d42f2262b49c2f053e/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ftree-borrows%2Foutside-range.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ftree-borrows%2Foutside-range.stderr?ref=e243206ae3cbf999c9f590d42f2262b49c2f053e", "patch": "@@ -0,0 +1,19 @@\n+error: Undefined Behavior: write access through <TAG> is forbidden because it is a foreign tag for <TAG>, which would hence change from Reserved to Disabled, but <TAG> is protected\n+  --> $DIR/outside-range.rs:LL:CC\n+   |\n+LL |     *y.add(3) = 42;\n+   |     ^^^^^^^^^^^^^^ write access through <TAG> is forbidden because it is a foreign tag for <TAG>, which would hence change from Reserved to Disabled, but <TAG> is protected\n+   |\n+   = help: this indicates a potential bug in the program: it performed an invalid operation, but the Tree Borrows rules it violated are still experimental\n+   = note: BACKTRACE:\n+   = note: inside `stuff` at $DIR/outside-range.rs:LL:CC\n+note: inside `main`\n+  --> $DIR/outside-range.rs:LL:CC\n+   |\n+LL |         stuff(&mut *raw, raw);\n+   |         ^^^^^^^^^^^^^^^^^^^^^\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "025b7ad22dc347f540ccf97345b0a1f3feddce58", "filename": "src/tools/miri/tests/fail/tree-borrows/read-to-local.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e243206ae3cbf999c9f590d42f2262b49c2f053e/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ftree-borrows%2Fread-to-local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e243206ae3cbf999c9f590d42f2262b49c2f053e/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ftree-borrows%2Fread-to-local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ftree-borrows%2Fread-to-local.rs?ref=e243206ae3cbf999c9f590d42f2262b49c2f053e", "patch": "@@ -0,0 +1,14 @@\n+//@compile-flags: -Zmiri-tree-borrows\n+\n+// Read to local variable kills reborrows *and* raw pointers derived from them.\n+// This test would succeed under Stacked Borrows.\n+fn main() {\n+    unsafe {\n+        let mut root = 6u8;\n+        let mref = &mut root;\n+        let ptr = mref as *mut u8;\n+        *ptr = 0; // Write\n+        assert_eq!(root, 0); // Parent Read\n+        *ptr = 0; //~ ERROR: /write access through .* is forbidden/\n+    }\n+}"}, {"sha": "7d9367c87d051a331ae15a621c4bc6146b7aea51", "filename": "src/tools/miri/tests/fail/tree-borrows/read-to-local.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e243206ae3cbf999c9f590d42f2262b49c2f053e/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ftree-borrows%2Fread-to-local.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e243206ae3cbf999c9f590d42f2262b49c2f053e/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ftree-borrows%2Fread-to-local.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ftree-borrows%2Fread-to-local.stderr?ref=e243206ae3cbf999c9f590d42f2262b49c2f053e", "patch": "@@ -0,0 +1,14 @@\n+error: Undefined Behavior: write access through <TAG> is forbidden because it is a child of <TAG> which is Frozen.\n+  --> $DIR/read-to-local.rs:LL:CC\n+   |\n+LL |         *ptr = 0;\n+   |         ^^^^^^^^ write access through <TAG> is forbidden because it is a child of <TAG> which is Frozen.\n+   |\n+   = help: this indicates a potential bug in the program: it performed an invalid operation, but the Tree Borrows rules it violated are still experimental\n+   = note: BACKTRACE:\n+   = note: inside `main` at $DIR/read-to-local.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "872efe3ad5933cd02245f75f25aa0f3c57918062", "filename": "src/tools/miri/tests/fail/tree-borrows/reserved/cell-protected-write.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/e243206ae3cbf999c9f590d42f2262b49c2f053e/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ftree-borrows%2Freserved%2Fcell-protected-write.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e243206ae3cbf999c9f590d42f2262b49c2f053e/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ftree-borrows%2Freserved%2Fcell-protected-write.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ftree-borrows%2Freserved%2Fcell-protected-write.rs?ref=e243206ae3cbf999c9f590d42f2262b49c2f053e", "patch": "@@ -0,0 +1,34 @@\n+//@compile-flags: -Zmiri-tree-borrows -Zmiri-tag-gc=0\n+\n+// Check how a Reserved with interior mutability\n+// responds to a Foreign Write under a Protector\n+#[path = \"../../../utils/mod.rs\"]\n+mod utils;\n+use utils::macros::*;\n+\n+use std::cell::UnsafeCell;\n+\n+fn main() {\n+    unsafe {\n+        let n = &mut UnsafeCell::new(0u8);\n+        name!(n.get(), \"base\");\n+        let x = &mut *(n as *mut UnsafeCell<_>);\n+        name!(x.get(), \"x\");\n+        let y = (&mut *n).get();\n+        name!(y);\n+        write_second(x, y);\n+        unsafe fn write_second(x: &mut UnsafeCell<u8>, y: *mut u8) {\n+            let alloc_id = alloc_id!(x.get());\n+            name!(x.get(), \"callee:x\");\n+            name!(x.get()=>1, \"caller:x\");\n+            name!(y, \"callee:y\");\n+            name!(y, \"caller:y\");\n+            print_state!(alloc_id);\n+            // Right before the faulty Write, x is\n+            // - Reserved\n+            // - with interior mut\n+            // - Protected\n+            *y = 1; //~ ERROR: /write access through .* is forbidden/\n+        }\n+    }\n+}"}, {"sha": "8ae1c09470a57e0f01572f46db8313d926e91387", "filename": "src/tools/miri/tests/fail/tree-borrows/reserved/cell-protected-write.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e243206ae3cbf999c9f590d42f2262b49c2f053e/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ftree-borrows%2Freserved%2Fcell-protected-write.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e243206ae3cbf999c9f590d42f2262b49c2f053e/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ftree-borrows%2Freserved%2Fcell-protected-write.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ftree-borrows%2Freserved%2Fcell-protected-write.stderr?ref=e243206ae3cbf999c9f590d42f2262b49c2f053e", "patch": "@@ -0,0 +1,28 @@\n+\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n+Warning: this tree is indicative only. Some tags may have been hidden.\n+0..  1\n+| Re*|    \u2514\u2500\u252c\u2500\u2500<TAG=base>\n+| Re*|      \u251c\u2500\u252c\u2500\u2500<TAG=x>\n+| Re*|      \u2502 \u2514\u2500\u252c\u2500\u2500<TAG=caller:x>\n+| Re*|      \u2502   \u2514\u2500\u2500\u2500\u2500<TAG=callee:x> Strongly protected\n+| Re*|      \u2514\u2500\u2500\u2500\u2500<TAG=y,callee:y,caller:y>\n+\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n+error: Undefined Behavior: write access through <TAG> (also named 'y,callee:y,caller:y') is forbidden because it is a foreign tag for <TAG> (also named 'callee:x'), which would hence change from Reserved to Disabled, but <TAG> (also named 'callee:x') is protected\n+  --> $DIR/cell-protected-write.rs:LL:CC\n+   |\n+LL |             *y = 1;\n+   |             ^^^^^^ write access through <TAG> (also named 'y,callee:y,caller:y') is forbidden because it is a foreign tag for <TAG> (also named 'callee:x'), which would hence change from Reserved to Disabled, but <TAG> (also named 'callee:x') is protected\n+   |\n+   = help: this indicates a potential bug in the program: it performed an invalid operation, but the Tree Borrows rules it violated are still experimental\n+   = note: BACKTRACE:\n+   = note: inside `main::write_second` at $DIR/cell-protected-write.rs:LL:CC\n+note: inside `main`\n+  --> $DIR/cell-protected-write.rs:LL:CC\n+   |\n+LL |         write_second(x, y);\n+   |         ^^^^^^^^^^^^^^^^^^\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "3a1205a84f7264ca724b7f271b201893a3610763", "filename": "src/tools/miri/tests/fail/tree-borrows/reserved/int-protected-write.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/e243206ae3cbf999c9f590d42f2262b49c2f053e/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ftree-borrows%2Freserved%2Fint-protected-write.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e243206ae3cbf999c9f590d42f2262b49c2f053e/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ftree-borrows%2Freserved%2Fint-protected-write.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ftree-borrows%2Freserved%2Fint-protected-write.rs?ref=e243206ae3cbf999c9f590d42f2262b49c2f053e", "patch": "@@ -0,0 +1,32 @@\n+//@compile-flags: -Zmiri-tree-borrows -Zmiri-tag-gc=0\n+\n+#[path = \"../../../utils/mod.rs\"]\n+mod utils;\n+use utils::macros::*;\n+\n+// Check how a Reserved without interior mutability responds to a Foreign\n+// Write when under a protector\n+fn main() {\n+    unsafe {\n+        let n = &mut 0u8;\n+        name!(n);\n+        let x = &mut *(n as *mut _);\n+        name!(x);\n+        let y = (&mut *n) as *mut _;\n+        name!(y);\n+        write_second(x, y);\n+        unsafe fn write_second(x: &mut u8, y: *mut u8) {\n+            let alloc_id = alloc_id!(x);\n+            name!(x, \"callee:x\");\n+            name!(x=>1, \"caller:x\");\n+            name!(y, \"callee:y\");\n+            name!(y, \"caller:y\");\n+            print_state!(alloc_id);\n+            // Right before the faulty Write, x is\n+            // - Reserved\n+            // - Protected\n+            // The Write turns it Disabled\n+            *y = 0; //~ ERROR: /write access through .* is forbidden/\n+        }\n+    }\n+}"}, {"sha": "a199fc0f0dacc62f74fc882d01f7a000959496e1", "filename": "src/tools/miri/tests/fail/tree-borrows/reserved/int-protected-write.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e243206ae3cbf999c9f590d42f2262b49c2f053e/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ftree-borrows%2Freserved%2Fint-protected-write.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e243206ae3cbf999c9f590d42f2262b49c2f053e/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ftree-borrows%2Freserved%2Fint-protected-write.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ftree-borrows%2Freserved%2Fint-protected-write.stderr?ref=e243206ae3cbf999c9f590d42f2262b49c2f053e", "patch": "@@ -0,0 +1,28 @@\n+\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n+Warning: this tree is indicative only. Some tags may have been hidden.\n+0..  1\n+| Res|    \u2514\u2500\u252c\u2500\u2500<TAG=n>\n+| Res|      \u251c\u2500\u252c\u2500\u2500<TAG=x>\n+| Res|      \u2502 \u2514\u2500\u252c\u2500\u2500<TAG=caller:x>\n+| Res|      \u2502   \u2514\u2500\u2500\u2500\u2500<TAG=callee:x> Strongly protected\n+| Res|      \u2514\u2500\u2500\u2500\u2500<TAG=y,callee:y,caller:y>\n+\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n+error: Undefined Behavior: write access through <TAG> (also named 'y,callee:y,caller:y') is forbidden because it is a foreign tag for <TAG> (also named 'callee:x'), which would hence change from Reserved to Disabled, but <TAG> (also named 'callee:x') is protected\n+  --> $DIR/int-protected-write.rs:LL:CC\n+   |\n+LL |             *y = 0;\n+   |             ^^^^^^ write access through <TAG> (also named 'y,callee:y,caller:y') is forbidden because it is a foreign tag for <TAG> (also named 'callee:x'), which would hence change from Reserved to Disabled, but <TAG> (also named 'callee:x') is protected\n+   |\n+   = help: this indicates a potential bug in the program: it performed an invalid operation, but the Tree Borrows rules it violated are still experimental\n+   = note: BACKTRACE:\n+   = note: inside `main::write_second` at $DIR/int-protected-write.rs:LL:CC\n+note: inside `main`\n+  --> $DIR/int-protected-write.rs:LL:CC\n+   |\n+LL |         write_second(x, y);\n+   |         ^^^^^^^^^^^^^^^^^^\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "8ef3d23e804b7f474a66709ef5b98ddc9e30822a", "filename": "src/tools/miri/tests/fail/tree-borrows/retag-data-race.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e243206ae3cbf999c9f590d42f2262b49c2f053e/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ftree-borrows%2Fretag-data-race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e243206ae3cbf999c9f590d42f2262b49c2f053e/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ftree-borrows%2Fretag-data-race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ftree-borrows%2Fretag-data-race.rs?ref=e243206ae3cbf999c9f590d42f2262b49c2f053e", "patch": "@@ -0,0 +1,28 @@\n+//! Make sure that a retag acts like a read for the data race model.\n+//! This is a retag/write race condition.\n+//!\n+//! This test is sensitive to the exact schedule so we disable preemption.\n+//@compile-flags: -Zmiri-tree-borrows -Zmiri-preemption-rate=0\n+#[derive(Copy, Clone)]\n+struct SendPtr(*mut u8);\n+\n+unsafe impl Send for SendPtr {}\n+\n+unsafe fn thread_1(SendPtr(p): SendPtr) {\n+    let _r = &*p;\n+}\n+\n+unsafe fn thread_2(SendPtr(p): SendPtr) {\n+    *p = 5; //~ ERROR: Data race detected between (1) Read on thread `<unnamed>` and (2) Write on thread `<unnamed>`\n+}\n+\n+fn main() {\n+    let mut x = 0;\n+    let p = std::ptr::addr_of_mut!(x);\n+    let p = SendPtr(p);\n+\n+    let t1 = std::thread::spawn(move || unsafe { thread_1(p) });\n+    let t2 = std::thread::spawn(move || unsafe { thread_2(p) });\n+    let _ = t1.join();\n+    let _ = t2.join();\n+}"}, {"sha": "f2cdfe7c314d5bfbf23bd008036a52a376a3e503", "filename": "src/tools/miri/tests/fail/tree-borrows/retag-data-race.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e243206ae3cbf999c9f590d42f2262b49c2f053e/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ftree-borrows%2Fretag-data-race.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e243206ae3cbf999c9f590d42f2262b49c2f053e/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ftree-borrows%2Fretag-data-race.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ftree-borrows%2Fretag-data-race.stderr?ref=e243206ae3cbf999c9f590d42f2262b49c2f053e", "patch": "@@ -0,0 +1,25 @@\n+error: Undefined Behavior: Data race detected between (1) Read on thread `<unnamed>` and (2) Write on thread `<unnamed>` at ALLOC. (2) just happened here\n+  --> $DIR/retag-data-race.rs:LL:CC\n+   |\n+LL |     *p = 5;\n+   |     ^^^^^^ Data race detected between (1) Read on thread `<unnamed>` and (2) Write on thread `<unnamed>` at ALLOC. (2) just happened here\n+   |\n+help: and (1) occurred earlier here\n+  --> $DIR/retag-data-race.rs:LL:CC\n+   |\n+LL |     let _r = &*p;\n+   |              ^^^\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+   = note: BACKTRACE (of the first span):\n+   = note: inside `thread_2` at $DIR/retag-data-race.rs:LL:CC\n+note: inside closure\n+  --> $DIR/retag-data-race.rs:LL:CC\n+   |\n+LL |     let t2 = std::thread::spawn(move || unsafe { thread_2(p) });\n+   |                                                  ^^^^^^^^^^^\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "6695d36306bc3893fe27e080f31842b72a3afb10", "filename": "src/tools/miri/tests/fail/tree-borrows/write-during-2phase.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e243206ae3cbf999c9f590d42f2262b49c2f053e/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ftree-borrows%2Fwrite-during-2phase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e243206ae3cbf999c9f590d42f2262b49c2f053e/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ftree-borrows%2Fwrite-during-2phase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ftree-borrows%2Fwrite-during-2phase.rs?ref=e243206ae3cbf999c9f590d42f2262b49c2f053e", "patch": "@@ -0,0 +1,27 @@\n+//@compile-flags: -Zmiri-tree-borrows\n+\n+// We invalidate a reference during a 2-phase borrow by doing a Foreign\n+// Write in between the initial reborrow and function entry. UB occurs\n+// on function entry when reborrow from a Disabled fails.\n+// This test would pass under Stacked Borrows, but Tree Borrows\n+// is more strict on 2-phase borrows.\n+\n+struct Foo(u64);\n+impl Foo {\n+    #[rustfmt::skip] // rustfmt is wrong about which line contains an error\n+    fn add(&mut self, n: u64) -> u64 { //~ ERROR: /read access through .* is forbidden/\n+        self.0 + n\n+    }\n+}\n+\n+pub fn main() {\n+    let mut f = Foo(0);\n+    let inner = &mut f.0 as *mut u64;\n+    let _res = f.add(unsafe {\n+        let n = f.0;\n+        // This is the access at fault, but it's not immediately apparent because\n+        // the reference that got invalidated is not under a Protector.\n+        *inner = 42;\n+        n\n+    });\n+}"}, {"sha": "e511eb9cf8fbb816a2ccb4eb0dd043474bb1a8e4", "filename": "src/tools/miri/tests/fail/tree-borrows/write-during-2phase.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e243206ae3cbf999c9f590d42f2262b49c2f053e/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ftree-borrows%2Fwrite-during-2phase.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e243206ae3cbf999c9f590d42f2262b49c2f053e/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ftree-borrows%2Fwrite-during-2phase.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ftree-borrows%2Fwrite-during-2phase.stderr?ref=e243206ae3cbf999c9f590d42f2262b49c2f053e", "patch": "@@ -0,0 +1,26 @@\n+error: Undefined Behavior: read access through <TAG> is forbidden because it is a child of <TAG> which is Disabled.\n+  --> $DIR/write-during-2phase.rs:LL:CC\n+   |\n+LL |     fn add(&mut self, n: u64) -> u64 {\n+   |            ^^^^^^^^^ read access through <TAG> is forbidden because it is a child of <TAG> which is Disabled.\n+   |\n+   = help: this indicates a potential bug in the program: it performed an invalid operation, but the Tree Borrows rules it violated are still experimental\n+   = note: BACKTRACE:\n+   = note: inside `Foo::add` at $DIR/write-during-2phase.rs:LL:CC\n+note: inside `main`\n+  --> $DIR/write-during-2phase.rs:LL:CC\n+   |\n+LL |       let _res = f.add(unsafe {\n+   |  ________________^\n+LL | |         let n = f.0;\n+LL | |         // This is the access at fault, but it's not immediately apparent because\n+LL | |         // the reference that got invalidated is not under a Protector.\n+LL | |         *inner = 42;\n+LL | |         n\n+LL | |     });\n+   | |______^\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "af52f53791a4fab165bcf72302ac5bcd6247b52d", "filename": "src/tools/miri/tests/pass/tree-borrows/2phase-interiormut.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e243206ae3cbf999c9f590d42f2262b49c2f053e/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Ftree-borrows%2F2phase-interiormut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e243206ae3cbf999c9f590d42f2262b49c2f053e/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Ftree-borrows%2F2phase-interiormut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Ftree-borrows%2F2phase-interiormut.rs?ref=e243206ae3cbf999c9f590d42f2262b49c2f053e", "patch": "@@ -0,0 +1,27 @@\n+//@compile-flags: -Zmiri-tree-borrows\n+\n+// Counterpart to tests/fail/tree-borrows/write-during-2phase.rs,\n+// this is the opposite situation: the Write is not problematic because\n+// the Protector has not yet been added and the Reserved has interior\n+// mutability.\n+use core::cell::Cell;\n+\n+trait Thing: Sized {\n+    fn do_the_thing(&mut self, _s: i32) {}\n+}\n+impl<T> Thing for Cell<T> {}\n+\n+fn main() {\n+    let mut x = Cell::new(1);\n+    let l = &x;\n+\n+    x.do_the_thing({\n+        // Several Foreign accesses (both Reads and Writes) to the location\n+        // being reborrowed. Reserved + unprotected + interior mut\n+        // makes the pointer immune to everything as long as all accesses\n+        // are child accesses to its parent pointer x.\n+        x.set(3);\n+        l.set(4);\n+        x.get() + l.get()\n+    });\n+}"}, {"sha": "1bd94c6df67c806a30bb2e162afc99692f8f9842", "filename": "src/tools/miri/tests/pass/tree-borrows/cell-alternate-writes.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e243206ae3cbf999c9f590d42f2262b49c2f053e/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Ftree-borrows%2Fcell-alternate-writes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e243206ae3cbf999c9f590d42f2262b49c2f053e/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Ftree-borrows%2Fcell-alternate-writes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Ftree-borrows%2Fcell-alternate-writes.rs?ref=e243206ae3cbf999c9f590d42f2262b49c2f053e", "patch": "@@ -0,0 +1,27 @@\n+//@compile-flags: -Zmiri-tree-borrows -Zmiri-tag-gc=0\n+#[path = \"../../utils/mod.rs\"]\n+mod utils;\n+use utils::macros::*;\n+\n+use std::cell::UnsafeCell;\n+\n+// UnsafeCells use the parent tag, so it is possible to use them with\n+// few restrictions when only among themselves.\n+fn main() {\n+    unsafe {\n+        let data = &mut UnsafeCell::new(0u8);\n+        name!(data.get(), \"data\");\n+        let x = &*data;\n+        name!(x.get(), \"x\");\n+        let y = &*data;\n+        name!(y.get(), \"y\");\n+        let alloc_id = alloc_id!(data.get());\n+        print_state!(alloc_id);\n+        // y and x tolerate alternating Writes\n+        *y.get() = 1;\n+        *x.get() = 2;\n+        *y.get() = 3;\n+        *x.get() = 4;\n+        print_state!(alloc_id);\n+    }\n+}"}, {"sha": "d4bc822b4bb064e368701d4e4e543722489c7ed0", "filename": "src/tools/miri/tests/pass/tree-borrows/cell-alternate-writes.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e243206ae3cbf999c9f590d42f2262b49c2f053e/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Ftree-borrows%2Fcell-alternate-writes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e243206ae3cbf999c9f590d42f2262b49c2f053e/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Ftree-borrows%2Fcell-alternate-writes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Ftree-borrows%2Fcell-alternate-writes.stderr?ref=e243206ae3cbf999c9f590d42f2262b49c2f053e", "patch": "@@ -0,0 +1,10 @@\n+\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n+Warning: this tree is indicative only. Some tags may have been hidden.\n+0..  1\n+| Re*|    \u2514\u2500\u2500\u2500\u2500<TAG=data,x,y>\n+\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n+\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n+Warning: this tree is indicative only. Some tags may have been hidden.\n+0..  1\n+| Act|    \u2514\u2500\u2500\u2500\u2500<TAG=data,x,y>\n+\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500"}, {"sha": "23250d6e6dfc5cb77c8de12273cbb61116d49e03", "filename": "src/tools/miri/tests/pass/tree-borrows/copy-nonoverlapping.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/e243206ae3cbf999c9f590d42f2262b49c2f053e/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Ftree-borrows%2Fcopy-nonoverlapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e243206ae3cbf999c9f590d42f2262b49c2f053e/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Ftree-borrows%2Fcopy-nonoverlapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Ftree-borrows%2Fcopy-nonoverlapping.rs?ref=e243206ae3cbf999c9f590d42f2262b49c2f053e", "patch": "@@ -0,0 +1,29 @@\n+//@compile-flags: -Zmiri-tree-borrows\n+\n+// copy_nonoverlapping works regardless of the order in which we construct\n+// the arguments.\n+pub fn main() {\n+    test_to_from();\n+    test_from_to();\n+}\n+\n+fn test_to_from() {\n+    unsafe {\n+        let data = &mut [0u64, 1];\n+        let to = data.as_mut_ptr().add(1);\n+        let from = data.as_ptr();\n+        std::ptr::copy_nonoverlapping(from, to, 1);\n+    }\n+}\n+\n+// Stacked Borrows would not have liked this one because the `as_mut_ptr` reborrow\n+// invalidates the earlier pointer obtained from `as_ptr`, but Tree Borrows is fine\n+// with it.\n+fn test_from_to() {\n+    unsafe {\n+        let data = &mut [0u64, 1];\n+        let from = data.as_ptr();\n+        let to = data.as_mut_ptr().add(1);\n+        std::ptr::copy_nonoverlapping(from, to, 1);\n+    }\n+}"}, {"sha": "76bbc73e662d384ba1de58915dbe43c6f52835b0", "filename": "src/tools/miri/tests/pass/tree-borrows/end-of-protector.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/e243206ae3cbf999c9f590d42f2262b49c2f053e/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Ftree-borrows%2Fend-of-protector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e243206ae3cbf999c9f590d42f2262b49c2f053e/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Ftree-borrows%2Fend-of-protector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Ftree-borrows%2Fend-of-protector.rs?ref=e243206ae3cbf999c9f590d42f2262b49c2f053e", "patch": "@@ -0,0 +1,32 @@\n+//@compile-flags: -Zmiri-tree-borrows -Zmiri-tag-gc=0\n+\n+// Check that a protector goes back to normal behavior when the function\n+// returns.\n+#[path = \"../../utils/mod.rs\"]\n+mod utils;\n+use utils::macros::*;\n+\n+fn main() {\n+    unsafe {\n+        let data = &mut 0u8;\n+        name!(data);\n+        let alloc_id = alloc_id!(data);\n+        let x = &mut *data;\n+        name!(x);\n+        print_state!(alloc_id);\n+        do_nothing(x); // creates then removes a Protector for a child of x\n+        let y = &mut *data;\n+        name!(y);\n+        print_state!(alloc_id);\n+        // Invalidates the previous reborrow, but its Protector has been removed.\n+        *y = 1;\n+        print_state!(alloc_id);\n+    }\n+}\n+\n+unsafe fn do_nothing(x: &mut u8) {\n+    name!(x, \"callee:x\");\n+    name!(x=>1, \"caller:x\");\n+    let alloc_id = alloc_id!(x);\n+    print_state!(alloc_id);\n+}"}, {"sha": "d08d69483203bb1b367360609a8478a1c433d060", "filename": "src/tools/miri/tests/pass/tree-borrows/end-of-protector.stderr", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/e243206ae3cbf999c9f590d42f2262b49c2f053e/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Ftree-borrows%2Fend-of-protector.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e243206ae3cbf999c9f590d42f2262b49c2f053e/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Ftree-borrows%2Fend-of-protector.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Ftree-borrows%2Fend-of-protector.stderr?ref=e243206ae3cbf999c9f590d42f2262b49c2f053e", "patch": "@@ -0,0 +1,32 @@\n+\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n+Warning: this tree is indicative only. Some tags may have been hidden.\n+0..  1\n+| Res|    \u2514\u2500\u252c\u2500\u2500<TAG=data>\n+| Res|      \u2514\u2500\u2500\u2500\u2500<TAG=x>\n+\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n+\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n+Warning: this tree is indicative only. Some tags may have been hidden.\n+0..  1\n+| Res|    \u2514\u2500\u252c\u2500\u2500<TAG=data>\n+| Res|      \u2514\u2500\u252c\u2500\u2500<TAG=x>\n+| Res|        \u2514\u2500\u252c\u2500\u2500<TAG=caller:x>\n+| Res|          \u2514\u2500\u2500\u2500\u2500<TAG=callee:x> Strongly protected\n+\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n+\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n+Warning: this tree is indicative only. Some tags may have been hidden.\n+0..  1\n+| Res|    \u2514\u2500\u252c\u2500\u2500<TAG=data>\n+| Res|      \u251c\u2500\u252c\u2500\u2500<TAG=x>\n+| Res|      \u2502 \u2514\u2500\u252c\u2500\u2500<TAG=caller:x>\n+| Res|      \u2502   \u2514\u2500\u2500\u2500\u2500<TAG=callee:x>\n+| Res|      \u2514\u2500\u2500\u2500\u2500<TAG=y>\n+\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n+\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n+Warning: this tree is indicative only. Some tags may have been hidden.\n+0..  1\n+| Act|    \u2514\u2500\u252c\u2500\u2500<TAG=data>\n+| Dis|      \u251c\u2500\u252c\u2500\u2500<TAG=x>\n+| Dis|      \u2502 \u2514\u2500\u252c\u2500\u2500<TAG=caller:x>\n+| Dis|      \u2502   \u2514\u2500\u2500\u2500\u2500<TAG=callee:x>\n+| Act|      \u2514\u2500\u2500\u2500\u2500<TAG=y>\n+\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500"}, {"sha": "9021c4176383b1c53764d6d5e37f51330a1dfbf9", "filename": "src/tools/miri/tests/pass/tree-borrows/formatting.rs", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/e243206ae3cbf999c9f590d42f2262b49c2f053e/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Ftree-borrows%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e243206ae3cbf999c9f590d42f2262b49c2f053e/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Ftree-borrows%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Ftree-borrows%2Fformatting.rs?ref=e243206ae3cbf999c9f590d42f2262b49c2f053e", "patch": "@@ -0,0 +1,73 @@\n+//@compile-flags: -Zmiri-tree-borrows -Zmiri-tag-gc=0\n+\n+#[path = \"../../utils/mod.rs\"]\n+mod utils;\n+use utils::macros::*;\n+\n+// Check the formatting of the trees.\n+fn main() {\n+    unsafe {\n+        alignment_check();\n+        structure_check();\n+    }\n+}\n+\n+// Alignment check: we split the array at indexes with different amounts of\n+// decimal digits to verify proper padding.\n+unsafe fn alignment_check() {\n+    let data: &mut [u8] = &mut [0; 1024];\n+    name!(data.as_ptr()=>2, \"data\");\n+    let alloc_id = alloc_id!(data.as_ptr());\n+    let x = &mut data[1];\n+    name!(x as *mut _, \"data[1]\");\n+    *x = 1;\n+    let x = &mut data[10];\n+    name!(x as *mut _, \"data[10]\");\n+    *x = 1;\n+    let x = &mut data[100];\n+    name!(x as *mut _, \"data[100]\");\n+    *x = 1;\n+    let _val = data[100]; // So that the above is Frz\n+    let x = &mut data[1000];\n+    name!(x as *mut _, \"data[1000]\");\n+    *x = 1;\n+    print_state!(alloc_id);\n+}\n+\n+// Tree structure check: somewhat complex organization of reborrows.\n+unsafe fn structure_check() {\n+    let x = &0u8;\n+    name!(x);\n+    let xa = &*x;\n+    name!(xa);\n+    let xb = &*x;\n+    name!(xb);\n+    let xc = &*x;\n+    name!(xc);\n+    let xaa = &*xa;\n+    name!(xaa);\n+    let xab = &*xa;\n+    name!(xab);\n+    let xba = &*xb;\n+    name!(xba);\n+    let xbaa = &*xba;\n+    name!(xbaa);\n+    let xbaaa = &*xbaa;\n+    name!(xbaaa);\n+    let xbaaaa = &*xbaaa;\n+    name!(xbaaaa);\n+    let xca = &*xc;\n+    name!(xca);\n+    let xcb = &*xc;\n+    name!(xcb);\n+    let xcaa = &*xca;\n+    name!(xcaa);\n+    let xcab = &*xca;\n+    name!(xcab);\n+    let xcba = &*xcb;\n+    name!(xcba);\n+    let xcbb = &*xcb;\n+    name!(xcbb);\n+    let alloc_id = alloc_id!(x);\n+    print_state!(alloc_id);\n+}"}, {"sha": "a59775cf21f10002f62f3a81c42cba749de9bcbb", "filename": "src/tools/miri/tests/pass/tree-borrows/formatting.stderr", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/e243206ae3cbf999c9f590d42f2262b49c2f053e/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Ftree-borrows%2Fformatting.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e243206ae3cbf999c9f590d42f2262b49c2f053e/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Ftree-borrows%2Fformatting.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Ftree-borrows%2Fformatting.stderr?ref=e243206ae3cbf999c9f590d42f2262b49c2f053e", "patch": "@@ -0,0 +1,29 @@\n+\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n+Warning: this tree is indicative only. Some tags may have been hidden.\n+0..  1..  2.. 10.. 11..100..101..1000..1001..1024\n+| Res| Act| Res| Act| Res| Act|  Res|  Act|  Res|    \u2514\u2500\u252c\u2500\u2500<TAG=data>\n+|----| Act|----|?Dis|----|?Dis| ----| ?Dis| ----|      \u251c\u2500\u2500\u2500\u2500<TAG=data[1]>\n+|----|----|----| Act|----|?Dis| ----| ?Dis| ----|      \u251c\u2500\u2500\u2500\u2500<TAG=data[10]>\n+|----|----|----|----|----| Frz| ----| ?Dis| ----|      \u251c\u2500\u2500\u2500\u2500<TAG=data[100]>\n+|----|----|----|----|----|----| ----|  Act| ----|      \u2514\u2500\u2500\u2500\u2500<TAG=data[1000]>\n+\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n+\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n+Warning: this tree is indicative only. Some tags may have been hidden.\n+0..  1\n+| Frz|    \u2514\u2500\u252c\u2500\u2500<TAG=x>\n+| Frz|      \u251c\u2500\u252c\u2500\u2500<TAG=xa>\n+| Frz|      \u2502 \u251c\u2500\u2500\u2500\u2500<TAG=xaa>\n+| Frz|      \u2502 \u2514\u2500\u2500\u2500\u2500<TAG=xab>\n+| Frz|      \u251c\u2500\u252c\u2500\u2500<TAG=xb>\n+| Frz|      \u2502 \u2514\u2500\u252c\u2500\u2500<TAG=xba>\n+| Frz|      \u2502   \u2514\u2500\u252c\u2500\u2500<TAG=xbaa>\n+| Frz|      \u2502     \u2514\u2500\u252c\u2500\u2500<TAG=xbaaa>\n+| Frz|      \u2502       \u2514\u2500\u2500\u2500\u2500<TAG=xbaaaa>\n+| Frz|      \u2514\u2500\u252c\u2500\u2500<TAG=xc>\n+| Frz|        \u251c\u2500\u252c\u2500\u2500<TAG=xca>\n+| Frz|        \u2502 \u251c\u2500\u2500\u2500\u2500<TAG=xcaa>\n+| Frz|        \u2502 \u2514\u2500\u2500\u2500\u2500<TAG=xcab>\n+| Frz|        \u2514\u2500\u252c\u2500\u2500<TAG=xcb>\n+| Frz|          \u251c\u2500\u2500\u2500\u2500<TAG=xcba>\n+| Frz|          \u2514\u2500\u2500\u2500\u2500<TAG=xcbb>\n+\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500"}, {"sha": "4daf06c777e9a990b7c258e48b96889200221307", "filename": "src/tools/miri/tests/pass/tree-borrows/read-only-from-mut.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e243206ae3cbf999c9f590d42f2262b49c2f053e/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Ftree-borrows%2Fread-only-from-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e243206ae3cbf999c9f590d42f2262b49c2f053e/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Ftree-borrows%2Fread-only-from-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Ftree-borrows%2Fread-only-from-mut.rs?ref=e243206ae3cbf999c9f590d42f2262b49c2f053e", "patch": "@@ -0,0 +1,14 @@\n+//@compile-flags: -Zmiri-tree-borrows\n+\n+// Tree Borrows has no issue with several mutable references existing\n+// at the same time, as long as they are used only immutably.\n+// I.e. multiple Reserved can coexist.\n+pub fn main() {\n+    unsafe {\n+        let base = &mut 42u64;\n+        let r1 = &mut *(base as *mut u64);\n+        let r2 = &mut *(base as *mut u64);\n+        let _l = *r1;\n+        let _l = *r2;\n+    }\n+}"}, {"sha": "e3f3f2d4032fd183eee7a1093deb5422f0bbaa90", "filename": "src/tools/miri/tests/pass/tree-borrows/reborrow-is-read.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e243206ae3cbf999c9f590d42f2262b49c2f053e/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Ftree-borrows%2Freborrow-is-read.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e243206ae3cbf999c9f590d42f2262b49c2f053e/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Ftree-borrows%2Freborrow-is-read.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Ftree-borrows%2Freborrow-is-read.rs?ref=e243206ae3cbf999c9f590d42f2262b49c2f053e", "patch": "@@ -0,0 +1,24 @@\n+//@compile-flags: -Zmiri-tree-borrows -Zmiri-tag-gc=0\n+\n+#[path = \"../../utils/mod.rs\"]\n+mod utils;\n+use utils::macros::*;\n+\n+// To check that a reborrow is counted as a Read access, we use a reborrow\n+// with no additional Read to Freeze an Active pointer.\n+\n+fn main() {\n+    unsafe {\n+        let parent = &mut 0u8;\n+        name!(parent);\n+        let alloc_id = alloc_id!(parent);\n+        let x = &mut *parent;\n+        name!(x);\n+        *x = 0; // x is now Active\n+        print_state!(alloc_id);\n+        let y = &mut *parent;\n+        name!(y);\n+        // Check in the debug output that x has been Frozen by the reborrow\n+        print_state!(alloc_id);\n+    }\n+}"}, {"sha": "b9c52c20640566a1d436bb1d86c4e63d5498e82b", "filename": "src/tools/miri/tests/pass/tree-borrows/reborrow-is-read.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e243206ae3cbf999c9f590d42f2262b49c2f053e/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Ftree-borrows%2Freborrow-is-read.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e243206ae3cbf999c9f590d42f2262b49c2f053e/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Ftree-borrows%2Freborrow-is-read.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Ftree-borrows%2Freborrow-is-read.stderr?ref=e243206ae3cbf999c9f590d42f2262b49c2f053e", "patch": "@@ -0,0 +1,13 @@\n+\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n+Warning: this tree is indicative only. Some tags may have been hidden.\n+0..  1\n+| Act|    \u2514\u2500\u252c\u2500\u2500<TAG=parent>\n+| Act|      \u2514\u2500\u2500\u2500\u2500<TAG=x>\n+\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n+\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n+Warning: this tree is indicative only. Some tags may have been hidden.\n+0..  1\n+| Act|    \u2514\u2500\u252c\u2500\u2500<TAG=parent>\n+| Frz|      \u251c\u2500\u2500\u2500\u2500<TAG=x>\n+| Res|      \u2514\u2500\u2500\u2500\u2500<TAG=y>\n+\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500"}, {"sha": "d8a8c27568d4d70137e65a3a825947e9a25b3e69", "filename": "src/tools/miri/tests/pass/tree-borrows/reserved.rs", "status": "added", "additions": 127, "deletions": 0, "changes": 127, "blob_url": "https://github.com/rust-lang/rust/blob/e243206ae3cbf999c9f590d42f2262b49c2f053e/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Ftree-borrows%2Freserved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e243206ae3cbf999c9f590d42f2262b49c2f053e/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Ftree-borrows%2Freserved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Ftree-borrows%2Freserved.rs?ref=e243206ae3cbf999c9f590d42f2262b49c2f053e", "patch": "@@ -0,0 +1,127 @@\n+//@compile-flags: -Zmiri-tree-borrows -Zmiri-tag-gc=0\n+\n+#[path = \"../../utils/mod.rs\"]\n+mod utils;\n+use utils::macros::*;\n+use utils::miri_extern::miri_write_to_stderr;\n+\n+use std::cell::UnsafeCell;\n+\n+// We exhaustively check that Reserved behaves as we want under all of the\n+// following conditions:\n+// - with or without interior mutability\n+// - with or without a protector\n+// - for a foreign read or write\n+// Of these cases, those in this file are the ones that must not cause\n+// immediate UB, and those that do are in tests/fail/tree-borrows/reserved/\n+// and are the combinations [_ + protected + write]\n+\n+fn main() {\n+    unsafe {\n+        cell_protected_read();\n+        cell_unprotected_read();\n+        cell_unprotected_write();\n+        int_protected_read();\n+        int_unprotected_read();\n+        int_unprotected_write();\n+    }\n+}\n+\n+unsafe fn print(msg: &str) {\n+    miri_write_to_stderr(msg.as_bytes());\n+    miri_write_to_stderr(\"\\n\".as_bytes());\n+}\n+\n+unsafe fn read_second<T>(x: &mut T, y: *mut u8) {\n+    name!(x as *mut T as *mut u8=>1, \"caller:x\");\n+    name!(x as *mut T as *mut u8, \"callee:x\");\n+    name!(y, \"caller:y\");\n+    name!(y, \"callee:y\");\n+    let _val = *y;\n+}\n+\n+// Foreign Read on a interior mutable Protected Reserved turns it Frozen.\n+unsafe fn cell_protected_read() {\n+    print(\"[interior mut + protected] Foreign Read: Re* -> Frz\");\n+    let base = &mut UnsafeCell::new(0u8);\n+    name!(base.get(), \"base\");\n+    let alloc_id = alloc_id!(base.get());\n+    let x = &mut *(base as *mut UnsafeCell<u8>);\n+    name!(x.get(), \"x\");\n+    let y = (&mut *base).get();\n+    name!(y);\n+    read_second(x, y); // Foreign Read for callee:x\n+    print_state!(alloc_id);\n+}\n+\n+// Foreign Read on an interior mutable pointer is a noop.\n+unsafe fn cell_unprotected_read() {\n+    print(\"[interior mut] Foreign Read: Re* -> Re*\");\n+    let base = &mut UnsafeCell::new(0u64);\n+    name!(base.get(), \"base\");\n+    let alloc_id = alloc_id!(base.get());\n+    let x = &mut *(base as *mut UnsafeCell<_>);\n+    name!(x.get(), \"x\");\n+    let y = (&mut *base).get();\n+    name!(y);\n+    let _val = *y; // Foreign Read for x\n+    print_state!(alloc_id);\n+}\n+\n+// Foreign Write on an interior mutable pointer is a noop.\n+// Also y must become Active.\n+unsafe fn cell_unprotected_write() {\n+    print(\"[interior mut] Foreign Write: Re* -> Re*\");\n+    let base = &mut UnsafeCell::new(0u64);\n+    name!(base.get(), \"base\");\n+    let alloc_id = alloc_id!(base.get());\n+    let x = &mut *(base as *mut UnsafeCell<u64>);\n+    name!(x.get(), \"x\");\n+    let y = (&mut *base).get();\n+    name!(y);\n+    *y = 1; // Foreign Write for x\n+    print_state!(alloc_id);\n+}\n+\n+// Foreign Read on a Protected Reserved turns it Frozen.\n+unsafe fn int_protected_read() {\n+    print(\"[protected] Foreign Read: Res -> Frz\");\n+    let base = &mut 0u8;\n+    let alloc_id = alloc_id!(base);\n+    name!(base);\n+    let x = &mut *(base as *mut u8);\n+    name!(x);\n+    let y = (&mut *base) as *mut u8;\n+    name!(y);\n+    read_second(x, y); // Foreign Read for callee:x\n+    print_state!(alloc_id);\n+}\n+\n+// Foreign Read on a Reserved is a noop.\n+// Also y must become Active.\n+unsafe fn int_unprotected_read() {\n+    print(\"[] Foreign Read: Res -> Res\");\n+    let base = &mut 0u8;\n+    name!(base);\n+    let alloc_id = alloc_id!(base);\n+    let x = &mut *(base as *mut u8);\n+    name!(x);\n+    let y = (&mut *base) as *mut u8;\n+    name!(y);\n+    let _val = *y; // Foreign Read for x\n+    print_state!(alloc_id);\n+}\n+\n+// Foreign Write on a Reserved turns it Disabled.\n+unsafe fn int_unprotected_write() {\n+    print(\"[] Foreign Write: Res -> Dis\");\n+    let base = &mut 0u8;\n+    name!(base);\n+    let alloc_id = alloc_id!(base);\n+    let x = &mut *(base as *mut u8);\n+    name!(x);\n+    let y = (&mut *base) as *mut u8;\n+    name!(y);\n+    *y = 1; // Foreign Write for x\n+    print_state!(alloc_id);\n+}"}, {"sha": "d76ee0f826607b50eee70ae60e394c8c56aa027f", "filename": "src/tools/miri/tests/pass/tree-borrows/reserved.stderr", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/e243206ae3cbf999c9f590d42f2262b49c2f053e/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Ftree-borrows%2Freserved.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e243206ae3cbf999c9f590d42f2262b49c2f053e/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Ftree-borrows%2Freserved.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Ftree-borrows%2Freserved.stderr?ref=e243206ae3cbf999c9f590d42f2262b49c2f053e", "patch": "@@ -0,0 +1,52 @@\n+[interior mut + protected] Foreign Read: Re* -> Frz\n+\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n+Warning: this tree is indicative only. Some tags may have been hidden.\n+0..  1\n+| Re*|    \u2514\u2500\u252c\u2500\u2500<TAG=base>\n+| Re*|      \u251c\u2500\u252c\u2500\u2500<TAG=x>\n+| Re*|      \u2502 \u2514\u2500\u252c\u2500\u2500<TAG=caller:x>\n+| Frz|      \u2502   \u2514\u2500\u2500\u2500\u2500<TAG=callee:x>\n+| Re*|      \u2514\u2500\u2500\u2500\u2500<TAG=y,caller:y,callee:y>\n+\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n+[interior mut] Foreign Read: Re* -> Re*\n+\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n+Warning: this tree is indicative only. Some tags may have been hidden.\n+0..  8\n+| Re*|    \u2514\u2500\u252c\u2500\u2500<TAG=base>\n+| Re*|      \u251c\u2500\u2500\u2500\u2500<TAG=x>\n+| Re*|      \u2514\u2500\u2500\u2500\u2500<TAG=y>\n+\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n+[interior mut] Foreign Write: Re* -> Re*\n+\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n+Warning: this tree is indicative only. Some tags may have been hidden.\n+0..  8\n+| Act|    \u2514\u2500\u252c\u2500\u2500<TAG=base>\n+| Re*|      \u251c\u2500\u2500\u2500\u2500<TAG=x>\n+| Act|      \u2514\u2500\u2500\u2500\u2500<TAG=y>\n+\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n+[protected] Foreign Read: Res -> Frz\n+\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n+Warning: this tree is indicative only. Some tags may have been hidden.\n+0..  1\n+| Res|    \u2514\u2500\u252c\u2500\u2500<TAG=base>\n+| Res|      \u251c\u2500\u252c\u2500\u2500<TAG=x>\n+| Res|      \u2502 \u2514\u2500\u252c\u2500\u2500<TAG=caller:x>\n+| Frz|      \u2502   \u2514\u2500\u2500\u2500\u2500<TAG=callee:x>\n+| Res|      \u2514\u2500\u2500\u2500\u2500<TAG=y,caller:y,callee:y>\n+\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n+[] Foreign Read: Res -> Res\n+\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n+Warning: this tree is indicative only. Some tags may have been hidden.\n+0..  1\n+| Res|    \u2514\u2500\u252c\u2500\u2500<TAG=base>\n+| Res|      \u251c\u2500\u2500\u2500\u2500<TAG=x>\n+| Res|      \u2514\u2500\u2500\u2500\u2500<TAG=y>\n+\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n+[] Foreign Write: Res -> Dis\n+\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n+Warning: this tree is indicative only. Some tags may have been hidden.\n+0..  1\n+| Act|    \u2514\u2500\u252c\u2500\u2500<TAG=base>\n+| Dis|      \u251c\u2500\u2500\u2500\u2500<TAG=x>\n+| Act|      \u2514\u2500\u2500\u2500\u2500<TAG=y>\n+\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500"}, {"sha": "e1a9334ab5410b953da12f6c9b18d8ad9011301d", "filename": "src/tools/miri/tests/pass/tree-borrows/transmute-unsafecell.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e243206ae3cbf999c9f590d42f2262b49c2f053e/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Ftree-borrows%2Ftransmute-unsafecell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e243206ae3cbf999c9f590d42f2262b49c2f053e/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Ftree-borrows%2Ftransmute-unsafecell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Ftree-borrows%2Ftransmute-unsafecell.rs?ref=e243206ae3cbf999c9f590d42f2262b49c2f053e", "patch": "@@ -0,0 +1,13 @@\n+//@compile-flags: -Zmiri-tree-borrows\n+\n+use core::cell::UnsafeCell;\n+use core::mem;\n+\n+fn main() {\n+    unsafe {\n+        let x = &0i32;\n+        // As long as we only read, transmuting this to UnsafeCell should be fine.\n+        let cell_x: &UnsafeCell<i32> = mem::transmute(&x);\n+        let _val = *cell_x.get();\n+    }\n+}"}]}