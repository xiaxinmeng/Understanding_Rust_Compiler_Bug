{"sha": "503a10b34a89995ebea6b7a28aa2465038c99627", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwM2ExMGIzNGE4OTk5NWViZWE2YjdhMjhhYTI0NjUwMzhjOTk2Mjc=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-08-28T03:49:56Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-09-05T04:53:25Z"}, "message": "Clean up module processing.", "tree": {"sha": "0104f8928cc76cfaeb57c4ffb5deaab6487edacd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0104f8928cc76cfaeb57c4ffb5deaab6487edacd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/503a10b34a89995ebea6b7a28aa2465038c99627", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/503a10b34a89995ebea6b7a28aa2465038c99627", "html_url": "https://github.com/rust-lang/rust/commit/503a10b34a89995ebea6b7a28aa2465038c99627", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/503a10b34a89995ebea6b7a28aa2465038c99627/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a83574c6af52419af9f723bcc9a9427942a6be8", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a83574c6af52419af9f723bcc9a9427942a6be8", "html_url": "https://github.com/rust-lang/rust/commit/2a83574c6af52419af9f723bcc9a9427942a6be8"}], "stats": {"total": 54, "additions": 20, "deletions": 34}, "files": [{"sha": "3e169131ec8dcf0cb4abffe64bf3643f60aae32b", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 20, "deletions": 34, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/503a10b34a89995ebea6b7a28aa2465038c99627/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/503a10b34a89995ebea6b7a28aa2465038c99627/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=503a10b34a89995ebea6b7a28aa2465038c99627", "patch": "@@ -465,18 +465,28 @@ fn expand_item(item: P<ast::Item>, fld: &mut MacroExpander) -> SmallVector<P<ast\n                 _ => unreachable!(),\n             })\n         }\n-        ast::ItemKind::Mod(_) | ast::ItemKind::ForeignMod(_) => {\n-            let valid_ident =\n-                item.ident.name != keywords::Invalid.name();\n+        ast::ItemKind::Mod(ast::Mod { inner, .. }) => {\n+            fld.cx.mod_push(item.ident);\n+            let macro_use = contains_macro_use(fld, &item.attrs);\n \n-            if valid_ident {\n-                fld.cx.mod_push(item.ident);\n+            let directory = fld.cx.directory.clone();\n+            if item.span.contains(inner) {\n+                fld.cx.directory.push(&*{\n+                    ::attr::first_attr_value_str_by_name(&item.attrs, \"path\")\n+                        .unwrap_or(item.ident.name.as_str())\n+                });\n+            } else {\n+                fld.cx.directory = match inner {\n+                    syntax_pos::DUMMY_SP => PathBuf::new(),\n+                    _ => PathBuf::from(fld.cx.parse_sess.codemap().span_to_filename(inner)),\n+                };\n+                fld.cx.directory.pop();\n             }\n-            let macro_use = contains_macro_use(fld, &item.attrs);\n+\n             let result = fld.with_exts_frame(macro_use, |fld| noop_fold_item(item, fld));\n-            if valid_ident {\n-                fld.cx.mod_pop();\n-            }\n+            fld.cx.directory = directory;\n+\n+            fld.cx.mod_pop();\n             result\n         },\n         _ => noop_fold_item(item, fld),\n@@ -639,31 +649,7 @@ impl<'a, 'b> Folder for MacroExpander<'a, 'b> {\n     }\n \n     fn fold_item(&mut self, item: P<ast::Item>) -> SmallVector<P<ast::Item>> {\n-        use std::mem::replace;\n-        let result;\n-        if let ast::ItemKind::Mod(ast::Mod { inner, .. }) = item.node {\n-            if item.span.contains(inner) {\n-                let directory = self.cx.directory.clone();\n-                self.cx.directory.push(&*{\n-                    ::attr::first_attr_value_str_by_name(&item.attrs, \"path\")\n-                        .unwrap_or(item.ident.name.as_str())\n-                });\n-                result = expand_annotatable(Annotatable::Item(item), self).make_items();\n-                self.cx.directory = directory;\n-            } else {\n-                let mut directory = match inner {\n-                    syntax_pos::DUMMY_SP => PathBuf::new(),\n-                    _ => PathBuf::from(self.cx.parse_sess.codemap().span_to_filename(inner)),\n-                };\n-                directory.pop();\n-                let directory = replace(&mut self.cx.directory, directory);\n-                result = expand_annotatable(Annotatable::Item(item), self).make_items();\n-                self.cx.directory = directory;\n-            }\n-        } else {\n-            result = expand_annotatable(Annotatable::Item(item), self).make_items();\n-        }\n-        result\n+        expand_annotatable(Annotatable::Item(item), self).make_items()\n     }\n \n     fn fold_stmt(&mut self, stmt: ast::Stmt) -> SmallVector<ast::Stmt> {"}]}