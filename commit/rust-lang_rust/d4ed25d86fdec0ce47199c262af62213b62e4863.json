{"sha": "d4ed25d86fdec0ce47199c262af62213b62e4863", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0ZWQyNWQ4NmZkZWMwY2U0NzE5OWMyNjJhZjYyMjEzYjYyZTQ4NjM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-23T15:26:02Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-23T15:26:02Z"}, "message": "introduced better typed AstPtr", "tree": {"sha": "8b6f174292aee253fa6db15184a2ed7b440ca919", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b6f174292aee253fa6db15184a2ed7b440ca919"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4ed25d86fdec0ce47199c262af62213b62e4863", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4ed25d86fdec0ce47199c262af62213b62e4863", "html_url": "https://github.com/rust-lang/rust/commit/d4ed25d86fdec0ce47199c262af62213b62e4863", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4ed25d86fdec0ce47199c262af62213b62e4863/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e22b6edae5787039dc0b85112702bb8d16a2aa60", "url": "https://api.github.com/repos/rust-lang/rust/commits/e22b6edae5787039dc0b85112702bb8d16a2aa60", "html_url": "https://github.com/rust-lang/rust/commit/e22b6edae5787039dc0b85112702bb8d16a2aa60"}], "stats": {"total": 49, "additions": 40, "deletions": 9}, "files": [{"sha": "921ba3c98a3f84a53af14289af1d938b63bb131e", "filename": "crates/ra_hir/src/nameres/lower.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d4ed25d86fdec0ce47199c262af62213b62e4863/crates%2Fra_hir%2Fsrc%2Fnameres%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4ed25d86fdec0ce47199c262af62213b62e4863/crates%2Fra_hir%2Fsrc%2Fnameres%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Flower.rs?ref=d4ed25d86fdec0ce47199c262af62213b62e4863", "patch": "@@ -1,10 +1,10 @@\n use std::sync::Arc;\n \n use ra_syntax::{\n-    SyntaxKind, AstNode, SourceFile, TreeArc, SyntaxNodePtr,\n+    SyntaxKind, AstNode, SourceFile, TreeArc, AstPtr,\n     ast::{self, ModuleItemOwner},\n };\n-use ra_db::{SourceRootId};\n+use ra_db::SourceRootId;\n use ra_arena::{Arena, RawId, impl_arena_id, map::ArenaMap};\n \n use crate::{\n@@ -72,13 +72,12 @@ pub struct LoweredModule {\n \n #[derive(Debug, Default, PartialEq, Eq)]\n pub struct ImportSourceMap {\n-    map: ArenaMap<ImportId, SyntaxNodePtr>,\n+    map: ArenaMap<ImportId, AstPtr<ast::PathSegment>>,\n }\n \n impl ImportSourceMap {\n     fn insert(&mut self, import: ImportId, segment: &ast::PathSegment) {\n-        self.map\n-            .insert(import, SyntaxNodePtr::new(segment.syntax()))\n+        self.map.insert(import, AstPtr::new(segment))\n     }\n \n     pub fn get(&self, source: &ModuleSource, import: ImportId) -> TreeArc<ast::PathSegment> {\n@@ -87,9 +86,7 @@ impl ImportSourceMap {\n             ModuleSource::Module(m) => m.syntax().ancestors().find_map(SourceFile::cast).unwrap(),\n         };\n \n-        ast::PathSegment::cast(self.map[import].to_node(file))\n-            .unwrap()\n-            .to_owned()\n+        self.map[import].to_node(file).to_owned()\n     }\n }\n "}, {"sha": "104f3285159dbbff6b768a71204010545c588627", "filename": "crates/ra_syntax/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4ed25d86fdec0ce47199c262af62213b62e4863/crates%2Fra_syntax%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4ed25d86fdec0ce47199c262af62213b62e4863/crates%2Fra_syntax%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Flib.rs?ref=d4ed25d86fdec0ce47199c262af62213b62e4863", "patch": "@@ -43,7 +43,7 @@ pub use crate::{\n     lexer::{tokenize, Token},\n     syntax_kinds::SyntaxKind,\n     yellow::{Direction, SyntaxError, SyntaxNode, WalkEvent, Location, TreeArc},\n-    ptr::SyntaxNodePtr,\n+    ptr::{SyntaxNodePtr, AstPtr},\n };\n \n use ra_text_edit::AtomTextEdit;"}, {"sha": "b50cd8a520a14c7fbb204909135c591475200c9a", "filename": "crates/ra_syntax/src/ptr.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/d4ed25d86fdec0ce47199c262af62213b62e4863/crates%2Fra_syntax%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4ed25d86fdec0ce47199c262af62213b62e4863/crates%2Fra_syntax%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fptr.rs?ref=d4ed25d86fdec0ce47199c262af62213b62e4863", "patch": "@@ -1,3 +1,5 @@\n+use std::marker::PhantomData;\n+\n use crate::{\n     AstNode, SourceFile, SyntaxKind, SyntaxNode, TextRange,\n     algo::generate,\n@@ -37,6 +39,38 @@ impl SyntaxNodePtr {\n     }\n }\n \n+/// Like `SyntaxNodePtr`, but remembers the type of node\n+#[derive(Debug, PartialEq, Eq, Hash)]\n+pub struct AstPtr<N: AstNode> {\n+    ptr: SyntaxNodePtr,\n+    _ty: PhantomData<N>,\n+}\n+\n+impl<N: AstNode> Copy for AstPtr<N> {}\n+impl<N: AstNode> Clone for AstPtr<N> {\n+    fn clone(&self) -> AstPtr<N> {\n+        *self\n+    }\n+}\n+\n+impl<N: AstNode> AstPtr<N> {\n+    pub fn new(node: &N) -> AstPtr<N> {\n+        AstPtr {\n+            ptr: SyntaxNodePtr::new(node.syntax()),\n+            _ty: PhantomData,\n+        }\n+    }\n+\n+    pub fn to_node(self, source_file: &SourceFile) -> &N {\n+        let syntax_node = self.ptr.to_node(source_file);\n+        N::cast(syntax_node).unwrap()\n+    }\n+\n+    pub fn syntax_node_ptr(self) -> SyntaxNodePtr {\n+        self.ptr\n+    }\n+}\n+\n #[test]\n fn test_local_syntax_ptr() {\n     use crate::{ast, AstNode};"}]}