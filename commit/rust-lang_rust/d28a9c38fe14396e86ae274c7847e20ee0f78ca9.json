{"sha": "d28a9c38fe14396e86ae274c7847e20ee0f78ca9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyOGE5YzM4ZmUxNDM5NmU4NmFlMjc0Yzc4NDdlMjBlZTBmNzhjYTk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-14T01:45:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-14T01:45:26Z"}, "message": "Auto merge of #65240 - michaelwoerister:sp-review-3, r=Mark-Simulacrum\n\nself-profiling: Add events for metadata loading (plus a small dep-tracking optimization)\n\nThis PR\n- adds self-profiling events related to loading things from crate metadata\n- makes the compiler cache the `DepNodeIndex` of upstream crates, so that they don't have to be looked up over and over.\n\nThe commits are best reviewed in isolation.\n\nSelf-profiling tracking issue: https://github.com/rust-lang/rust/issues/58967\n\nr? @Mark-Simulacrum\ncc @wesleywiser", "tree": {"sha": "16203e08715bb94fab326e6842bf10cdcd065676", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/16203e08715bb94fab326e6842bf10cdcd065676"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d28a9c38fe14396e86ae274c7847e20ee0f78ca9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d28a9c38fe14396e86ae274c7847e20ee0f78ca9", "html_url": "https://github.com/rust-lang/rust/commit/d28a9c38fe14396e86ae274c7847e20ee0f78ca9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d28a9c38fe14396e86ae274c7847e20ee0f78ca9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36d4506cc64337bf7dfc1e3120156922e97659c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/36d4506cc64337bf7dfc1e3120156922e97659c7", "html_url": "https://github.com/rust-lang/rust/commit/36d4506cc64337bf7dfc1e3120156922e97659c7"}, {"sha": "a9853fce25723cbcb96380c3881fadb234530410", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9853fce25723cbcb96380c3881fadb234530410", "html_url": "https://github.com/rust-lang/rust/commit/a9853fce25723cbcb96380c3881fadb234530410"}], "stats": {"total": 79, "additions": 55, "deletions": 24}, "files": [{"sha": "25cbf8c88debb387ddef40cc82d6a27b2ae8f9fb", "filename": "src/librustc/dep_graph/graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d28a9c38fe14396e86ae274c7847e20ee0f78ca9/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d28a9c38fe14396e86ae274c7847e20ee0f78ca9/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fgraph.rs?ref=d28a9c38fe14396e86ae274c7847e20ee0f78ca9", "patch": "@@ -30,7 +30,7 @@ rustc_index::newtype_index! {\n }\n \n impl DepNodeIndex {\n-    const INVALID: DepNodeIndex = DepNodeIndex::MAX;\n+    pub const INVALID: DepNodeIndex = DepNodeIndex::MAX;\n }\n \n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]"}, {"sha": "50a2187c937402dde5d7ea08219eede5cd28c705", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d28a9c38fe14396e86ae274c7847e20ee0f78ca9/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d28a9c38fe14396e86ae274c7847e20ee0f78ca9/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=d28a9c38fe14396e86ae274c7847e20ee0f78ca9", "patch": "@@ -3,10 +3,11 @@\n use crate::cstore::{self, CStore, CrateSource, MetadataBlob};\n use crate::locator::{self, CratePaths};\n use crate::schema::{CrateRoot, CrateDep};\n-use rustc_data_structures::sync::{Lrc, RwLock, Lock};\n+use rustc_data_structures::sync::{Lrc, RwLock, Lock, AtomicCell};\n \n use rustc::hir::def_id::CrateNum;\n use rustc_data_structures::svh::Svh;\n+use rustc::dep_graph::DepNodeIndex;\n use rustc::middle::cstore::DepKind;\n use rustc::mir::interpret::AllocDecodingState;\n use rustc::session::{Session, CrateDisambiguator};\n@@ -196,6 +197,9 @@ impl<'a> CrateLoader<'a> {\n         dep_kind: DepKind,\n         name: Symbol\n     ) -> (CrateNum, Lrc<cstore::CrateMetadata>) {\n+        let _prof_timer =\n+            self.sess.prof.generic_activity(\"metadata_register_crate\");\n+\n         let crate_root = lib.metadata.get_root();\n         self.verify_no_symbol_conflicts(span, &crate_root);\n \n@@ -271,7 +275,8 @@ impl<'a> CrateLoader<'a> {\n             },\n             private_dep,\n             span,\n-            raw_proc_macros\n+            raw_proc_macros,\n+            dep_node_index: AtomicCell::new(DepNodeIndex::INVALID),\n         };\n \n         let cmeta = Lrc::new(cmeta);"}, {"sha": "98a08e501f14c2706bc97138eb571af2032e731f", "filename": "src/librustc_metadata/cstore.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d28a9c38fe14396e86ae274c7847e20ee0f78ca9/src%2Flibrustc_metadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d28a9c38fe14396e86ae274c7847e20ee0f78ca9/src%2Flibrustc_metadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore.rs?ref=d28a9c38fe14396e86ae274c7847e20ee0f78ca9", "patch": "@@ -2,14 +2,15 @@\n // crates and libraries\n \n use crate::schema;\n+use rustc::dep_graph::DepNodeIndex;\n use rustc::hir::def_id::{CrateNum, DefIndex};\n use rustc::hir::map::definitions::DefPathTable;\n use rustc::middle::cstore::{DepKind, ExternCrate, MetadataLoader};\n use rustc::mir::interpret::AllocDecodingState;\n use rustc_index::vec::IndexVec;\n use rustc::util::nodemap::{FxHashMap, NodeMap};\n \n-use rustc_data_structures::sync::{Lrc, RwLock, Lock};\n+use rustc_data_structures::sync::{Lrc, RwLock, Lock, AtomicCell};\n use syntax::ast;\n use syntax::ext::base::SyntaxExtension;\n use syntax_pos;\n@@ -83,6 +84,13 @@ pub struct CrateMetadata {\n     pub span: Span,\n \n     pub raw_proc_macros: Option<&'static [ProcMacro]>,\n+\n+    /// The `DepNodeIndex` of the `DepNode` representing this upstream crate.\n+    /// It is initialized on the first access in `get_crate_dep_node_index()`.\n+    /// Do not access the value directly, as it might not have been initialized\n+    /// yet.\n+    /// The field must always be initialized to `DepNodeIndex::INVALID`.\n+    pub(super) dep_node_index: AtomicCell<DepNodeIndex>,\n }\n \n pub struct CStore {"}, {"sha": "642a7632b3df803b3f73aab3176a04fa00f59617", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 11, "deletions": 20, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/d28a9c38fe14396e86ae274c7847e20ee0f78ca9/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d28a9c38fe14396e86ae274c7847e20ee0f78ca9/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=d28a9c38fe14396e86ae274c7847e20ee0f78ca9", "patch": "@@ -48,23 +48,22 @@ macro_rules! provide {\n                 $tcx: TyCtxt<$lt>,\n                 def_id_arg: T,\n             ) -> <ty::queries::$name<$lt> as QueryConfig<$lt>>::Value {\n+                let _prof_timer =\n+                    $tcx.prof.generic_activity(\"metadata_decode_entry\");\n+\n                 #[allow(unused_variables)]\n                 let ($def_id, $other) = def_id_arg.into_args();\n                 assert!(!$def_id.is_local());\n \n-                let def_path_hash = $tcx.def_path_hash(DefId {\n-                    krate: $def_id.krate,\n-                    index: CRATE_DEF_INDEX\n-                });\n-                let dep_node = def_path_hash\n-                    .to_dep_node(rustc::dep_graph::DepKind::CrateMetadata);\n-                // The DepNodeIndex of the DepNode::CrateMetadata should be\n-                // cached somewhere, so that we can use read_index().\n-                $tcx.dep_graph.read(dep_node);\n-\n                 let $cdata = $tcx.crate_data_as_rc_any($def_id.krate);\n                 let $cdata = $cdata.downcast_ref::<cstore::CrateMetadata>()\n                     .expect(\"CrateStore created data is not a CrateMetadata\");\n+\n+                if $tcx.dep_graph.is_fully_enabled() {\n+                    let crate_dep_node_index = $cdata.get_crate_dep_node_index($tcx);\n+                    $tcx.dep_graph.read_index(crate_dep_node_index);\n+                }\n+\n                 $compute\n             })*\n \n@@ -449,6 +448,8 @@ impl cstore::CStore {\n     }\n \n     pub fn load_macro_untracked(&self, id: DefId, sess: &Session) -> LoadedMacro {\n+        let _prof_timer = sess.prof.generic_activity(\"metadata_load_macro\");\n+\n         let data = self.get_crate_data(id.krate);\n         if data.is_proc_macro_crate() {\n             return LoadedMacro::ProcMacro(data.load_proc_macro(id.index, sess));\n@@ -526,20 +527,10 @@ impl CrateStore for cstore::CStore {\n     /// parent `DefId` as well as some idea of what kind of data the\n     /// `DefId` refers to.\n     fn def_key(&self, def: DefId) -> DefKey {\n-        // Note: loading the def-key (or def-path) for a def-id is not\n-        // a *read* of its metadata. This is because the def-id is\n-        // really just an interned shorthand for a def-path, which is the\n-        // canonical name for an item.\n-        //\n-        // self.dep_graph.read(DepNode::MetaData(def));\n         self.get_crate_data(def.krate).def_key(def.index)\n     }\n \n     fn def_path(&self, def: DefId) -> DefPath {\n-        // See `Note` above in `def_key()` for why this read is\n-        // commented out:\n-        //\n-        // self.dep_graph.read(DepNode::MetaData(def));\n         self.get_crate_data(def.krate).def_path(def.index)\n     }\n "}, {"sha": "132ef7d4241316601e2caeded8a158fcee828a13", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/d28a9c38fe14396e86ae274c7847e20ee0f78ca9/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d28a9c38fe14396e86ae274c7847e20ee0f78ca9/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=d28a9c38fe14396e86ae274c7847e20ee0f78ca9", "patch": "@@ -13,6 +13,7 @@ use rustc::hir::def::{self, Res, DefKind, CtorOf, CtorKind};\n use rustc::hir::def_id::{CrateNum, DefId, DefIndex, LocalDefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::FxHashMap;\n+use rustc::dep_graph::{DepNodeIndex, DepKind};\n use rustc::middle::lang_items;\n use rustc::mir::{self, interpret};\n use rustc::mir::interpret::AllocDecodingSession;\n@@ -1365,6 +1366,30 @@ impl<'a, 'tcx> CrateMetadata {\n         // This shouldn't borrow twice, but there is no way to downgrade RefMut to Ref.\n         self.source_map_import_info.borrow()\n     }\n+\n+    /// Get the `DepNodeIndex` corresponding this crate. The result of this\n+    /// method is cached in the `dep_node_index` field.\n+    pub(super) fn get_crate_dep_node_index(&self, tcx: TyCtxt<'tcx>) -> DepNodeIndex {\n+        let mut dep_node_index = self.dep_node_index.load();\n+\n+        if unlikely!(dep_node_index == DepNodeIndex::INVALID) {\n+            // We have not cached the DepNodeIndex for this upstream crate yet,\n+            // so use the dep-graph to find it out and cache it.\n+            // Note that multiple threads can enter this block concurrently.\n+            // That is fine because the DepNodeIndex remains constant\n+            // throughout the whole compilation session, and multiple stores\n+            // would always write the same value.\n+\n+            let def_path_hash = self.def_path_hash(CRATE_DEF_INDEX);\n+            let dep_node = def_path_hash.to_dep_node(DepKind::CrateMetadata);\n+\n+            dep_node_index = tcx.dep_graph.dep_node_index_of(&dep_node);\n+            assert!(dep_node_index != DepNodeIndex::INVALID);\n+            self.dep_node_index.store(dep_node_index);\n+        }\n+\n+        dep_node_index\n+    }\n }\n \n // Cannot be implemented on 'ProcMacro', as libproc_macro"}, {"sha": "6aa684b1c3d014acde3efebc0174c173f710ddb1", "filename": "src/librustc_metadata/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d28a9c38fe14396e86ae274c7847e20ee0f78ca9/src%2Flibrustc_metadata%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d28a9c38fe14396e86ae274c7847e20ee0f78ca9/src%2Flibrustc_metadata%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flib.rs?ref=d28a9c38fe14396e86ae274c7847e20ee0f78ca9", "patch": "@@ -1,6 +1,7 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n \n #![feature(box_patterns)]\n+#![feature(core_intrinsics)]\n #![feature(crate_visibility_modifier)]\n #![feature(drain_filter)]\n #![feature(in_band_lifetimes)]\n@@ -11,6 +12,7 @@\n #![feature(rustc_private)]\n #![feature(slice_patterns)]\n #![feature(specialization)]\n+#![feature(stmt_expr_attributes)]\n \n #![recursion_limit=\"256\"]\n "}]}