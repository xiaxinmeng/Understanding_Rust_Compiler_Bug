{"sha": "e28a5e048a9da3091897c86e48bc7d4fb2cf601c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyOGE1ZTA0OGE5ZGEzMDkxODk3Yzg2ZTQ4YmM3ZDRmYjJjZjYwMWM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-31T08:25:27Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-31T20:23:30Z"}, "message": "parsing scaffold", "tree": {"sha": "6a6310560bf2d32207969b91c341def5c2e4c3c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a6310560bf2d32207969b91c341def5c2e4c3c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e28a5e048a9da3091897c86e48bc7d4fb2cf601c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e28a5e048a9da3091897c86e48bc7d4fb2cf601c", "html_url": "https://github.com/rust-lang/rust/commit/e28a5e048a9da3091897c86e48bc7d4fb2cf601c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e28a5e048a9da3091897c86e48bc7d4fb2cf601c/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2980508ad2a04364f943af72c2c05337e03f4f6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/2980508ad2a04364f943af72c2c05337e03f4f6c", "html_url": "https://github.com/rust-lang/rust/commit/2980508ad2a04364f943af72c2c05337e03f4f6c"}], "stats": {"total": 49, "additions": 45, "deletions": 4}, "files": [{"sha": "2e7f9cbf488aa25ed43d2f897b7b6b0a4f8be1c0", "filename": "crates/ra_hir/src/macros/mbe.rs", "status": "modified", "additions": 45, "deletions": 4, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/e28a5e048a9da3091897c86e48bc7d4fb2cf601c/crates%2Fra_hir%2Fsrc%2Fmacros%2Fmbe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e28a5e048a9da3091897c86e48bc7d4fb2cf601c/crates%2Fra_hir%2Fsrc%2Fmacros%2Fmbe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fmacros%2Fmbe.rs?ref=e28a5e048a9da3091897c86e48bc7d4fb2cf601c", "patch": "@@ -9,8 +9,8 @@ pub(crate) struct MacroRules {\n \n #[derive(Debug)]\n struct Rule {\n-    lhs: TokenTree,\n-    rhs: TokenTree,\n+    lhs: Subtree,\n+    rhs: Subtree,\n }\n \n #[derive(Debug)]\n@@ -75,6 +75,47 @@ struct Var {\n     text: SmolStr,\n }\n \n-pub(crate) fn parse(tt: &tt::Subtree) -> MacroRules {\n-    MacroRules { rules: Vec::new() }\n+pub(crate) fn parse(tt: &tt::Subtree) -> Option<MacroRules> {\n+    let mut parser = RulesParser::new(tt);\n+    let mut rules = Vec::new();\n+    while !parser.is_eof() {\n+        rules.push(parse_rule(&mut parser)?)\n+    }\n+    Some(MacroRules { rules })\n+}\n+\n+fn parse_rule(p: &mut RulesParser) -> Option<Rule> {\n+    let lhs = match p.current()? {\n+        tt::TokenTree::Subtree(sub) => parse_subtree(sub)?,\n+        _ => return None,\n+    };\n+    let rhs = unimplemented!();\n+    Some(Rule { lhs, rhs })\n+}\n+\n+fn parse_subtree(tt: &tt::Subtree) -> Option<Subtree> {\n+    unimplemented!()\n+}\n+\n+struct RulesParser<'a> {\n+    subtree: &'a tt::Subtree,\n+    pos: usize,\n+}\n+\n+impl<'a> RulesParser<'a> {\n+    fn new(subtree: &'a tt::Subtree) -> RulesParser<'a> {\n+        RulesParser { subtree, pos: 0 }\n+    }\n+\n+    fn is_eof(&self) -> bool {\n+        self.pos == self.subtree.token_trees.len()\n+    }\n+\n+    fn current(&self) -> Option<&'a tt::TokenTree> {\n+        self.subtree.token_trees.get(self.pos)\n+    }\n+\n+    fn bump(&mut self) {\n+        self.pos += 1;\n+    }\n }"}]}