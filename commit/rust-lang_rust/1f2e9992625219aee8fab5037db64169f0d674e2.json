{"sha": "1f2e9992625219aee8fab5037db64169f0d674e2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmMmU5OTkyNjI1MjE5YWVlOGZhYjUwMzdkYjY0MTY5ZjBkNjc0ZTI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-04T21:14:36Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-05T04:35:06Z"}, "message": "Use std::os::get_exe_path to determine sysroot", "tree": {"sha": "eddc1196ea4092f3397d2f982796c24b58da16da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eddc1196ea4092f3397d2f982796c24b58da16da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f2e9992625219aee8fab5037db64169f0d674e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f2e9992625219aee8fab5037db64169f0d674e2", "html_url": "https://github.com/rust-lang/rust/commit/1f2e9992625219aee8fab5037db64169f0d674e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f2e9992625219aee8fab5037db64169f0d674e2/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1391154b1492987a357293c1e3774f9326fc640b", "url": "https://api.github.com/repos/rust-lang/rust/commits/1391154b1492987a357293c1e3774f9326fc640b", "html_url": "https://github.com/rust-lang/rust/commit/1391154b1492987a357293c1e3774f9326fc640b"}], "stats": {"total": 32, "additions": 16, "deletions": 16}, "files": [{"sha": "46865d10fa2a298209db84575a3a523f99c225f7", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1f2e9992625219aee8fab5037db64169f0d674e2/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f2e9992625219aee8fab5037db64169f0d674e2/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=1f2e9992625219aee8fab5037db64169f0d674e2", "patch": "@@ -397,12 +397,10 @@ fn build_session_options(match: getopts::match)\n     ret sopts;\n }\n \n-fn build_session(binary: str,\n-                 sopts: @session::options) -> session::session {\n+fn build_session(sopts: @session::options) -> session::session {\n     let target_cfg = build_target_config(sopts);\n     let cstore = cstore::mk_cstore();\n     let filesearch = filesearch::mk_filesearch(\n-        binary,\n         sopts.maybe_sysroot,\n         sopts.target_triple,\n         sopts.addl_lib_search_paths);\n@@ -456,7 +454,7 @@ fn main(args: [str]) {\n         ret;\n     }\n     let sopts = build_session_options(match);\n-    let sess = build_session(binary, sopts);\n+    let sess = build_session(sopts);\n     let n_inputs = vec::len::<str>(match.free);\n     let output_file = getopts::opt_maybe_str(match, \"o\");\n     if n_inputs == 0u {\n@@ -537,7 +535,7 @@ mod test {\n               getopts::success(m) { m }\n             };\n         let sessopts = build_session_options(match);\n-        let sess = build_session(\"whatever\", sessopts);\n+        let sess = build_session(sessopts);\n         let cfg = build_configuration(sess, \"whatever\", \"whatever\");\n         assert (attr::contains_name(cfg, \"test\"));\n     }\n@@ -551,7 +549,7 @@ mod test {\n               getopts::success(m) { m }\n             };\n         let sessopts = build_session_options(match);\n-        let sess = build_session(\"whatever\", sessopts);\n+        let sess = build_session(sessopts);\n         let cfg = build_configuration(sess, \"whatever\", \"whatever\");\n         let test_items = attr::find_meta_items_by_name(cfg, \"test\");\n         assert (vec::len(test_items) == 1u);"}, {"sha": "580360b967f6e74cf43f3be12b2570886c39ba64", "filename": "src/comp/util/filesearch.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1f2e9992625219aee8fab5037db64169f0d674e2/src%2Fcomp%2Futil%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f2e9992625219aee8fab5037db64169f0d674e2/src%2Fcomp%2Futil%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Futil%2Ffilesearch.rs?ref=1f2e9992625219aee8fab5037db64169f0d674e2", "patch": "@@ -4,6 +4,7 @@ import std::option;\n import std::fs;\n import std::vec;\n import std::str;\n+import std::os;\n import back::link;\n \n export filesearch;\n@@ -26,8 +27,7 @@ type filesearch = obj {\n     fn get_target_lib_file_path(file: fs::path) -> fs::path;\n };\n \n-fn mk_filesearch(binary_name: fs::path,\n-                 maybe_sysroot: option::t<fs::path>,\n+fn mk_filesearch(maybe_sysroot: option::t<fs::path>,\n                  target_triple: str,\n                  addl_lib_search_paths: [fs::path]) -> filesearch {\n     obj filesearch_impl(sysroot: fs::path,\n@@ -48,7 +48,7 @@ fn mk_filesearch(binary_name: fs::path,\n         }\n     }\n \n-    let sysroot = get_sysroot(maybe_sysroot, binary_name);\n+    let sysroot = get_sysroot(maybe_sysroot);\n     log #fmt(\"using sysroot = %s\", sysroot);\n     ret filesearch_impl(sysroot, addl_lib_search_paths, target_triple);\n }\n@@ -79,16 +79,18 @@ fn make_target_lib_path(sysroot: fs::path,\n     ret path;\n }\n \n-fn get_default_sysroot(binary: fs::path) -> fs::path {\n-    let dirname = fs::dirname(binary);\n-    if str::eq(dirname, binary) { ret \"../\"; }\n-    ret fs::connect(dirname, \"../\");\n+fn get_default_sysroot() -> fs::path {\n+    alt os::get_exe_path() {\n+      option::some(p) { fs::connect(p, \"../\") }\n+      option::none. {\n+        fail \"can't determine value for sysroot\";\n+      }\n+    }\n }\n \n-fn get_sysroot(maybe_sysroot: option::t<fs::path>,\n-               binary: fs::path) -> fs::path {\n+fn get_sysroot(maybe_sysroot: option::t<fs::path>) -> fs::path {\n     alt maybe_sysroot {\n       option::some(sr) { sr }\n-      option::none. { get_default_sysroot(binary) }\n+      option::none. { get_default_sysroot() }\n     }\n }\n\\ No newline at end of file"}]}