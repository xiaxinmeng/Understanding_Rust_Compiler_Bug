{"sha": "6c58b842d61992a470a726bbc3abfdc540c2c6af", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjNThiODQyZDYxOTkyYTQ3MGE3MjZiYmMzYWJmZGM1NDBjMmM2YWY=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2019-01-05T15:56:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-01-05T15:56:44Z"}, "message": "Rollup merge of #57229 - mikeyhew:fix-56806, r=varkor\n\nFix #56806 by using `delay_span_bug` in object safety layout sanity checks\n\nIt's possible that `is_object_safe` is called on a trait method that with an invalid receiver type. This caused an ICE in #56806, because `receiver_is_dispatchable` returns `true` for `self: Box<dyn Trait>`, which causes one of the layout sanity checks in object_safety.rs to fail. Replacing `bug!` with `delay_span_bug` solves this.\n\nThe fact that `receiver_is_dispatchable` returns `true` here could be considered a bug. It passes the check that the method implements, though: `Box<dyn Trait>` implements `DispatchFromDyn<Box<dyn Trait>>` because `dyn Trait` implements `Unsize<dyn Trait>`. It would be good to hear what @eddyb and @nikomatsakis think.\n\nNote that I only added a test for the case encountered in #56806. I could not come up with a case that triggered an ICE from the other check, `bug!(\"receiver when Self = dyn Trait should be ScalarPair, found Scalar\")`. There is no way, to my knowledge, that you can make `receiver_is_dispatchable` return true but still have a `Scalar` ABI when `Self = dyn Trait`.\n\nOne other case I encountered while debugging #56806 was that if you have a type parameter `T` that implements `Deref<Target=Self>` and `DispatchFromDyn<T>`, and use it as a method receiver, it will cause an ICE during `is_object_safe` because `T` has no layout ([playground](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=d9b7497b3be0ca8382fa7d9497263214)):\n\n```rust\ntrait Trait<T: Deref<Target=Self> + DispatchFromDyn<T>> {\n    fn foo(self: T) -> dyn Trait<T>;\n}\n```\n\nI don't intend to remove the ICE there because it is a pathological case, especially since there is no way to implement `DispatchFromDyn<T>` for `T` \u2014 the checks in typeck/coherence/builtin.rs do not allow that.\n\nfixes #56806\nr? @varkor", "tree": {"sha": "2382a8a5d6c101f46f5d8eea6d3669c7ea39dea6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2382a8a5d6c101f46f5d8eea6d3669c7ea39dea6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c58b842d61992a470a726bbc3abfdc540c2c6af", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcMNO9CRBK7hj4Ov3rIwAAdHIIAEIy+LYZl1TmhQ/q6s83PtP+\nikY2rLokyCq3ChxhA0yyUqSZqiipSNYKMLvK0AG+ZW3nkzFS+Ytc9Z9ESqEEYNTW\nlxhwjLu+PFcibL9gIeI6DucqiSZXQOvoR0oVbnkcqFmhVwM7PuGjEH7Xet/T1wwS\n1szuTzqq7B1X4TdFBa5UV6B8jMc27MJhVPArp6ZGfJVEi1sx3RhgWjZb1z+YBR/q\n5A91T8a755QL1YKlArb03ZPSsbPoK6RxLwIWSDBg9JMDBKGhZerMaeVumSPhEOCe\n88nPYuXL2S9z61Svv8zkUzv1JcQKiZ0IHrY8VeahaOtoH6o4033ljiuzNmVctuI=\n=K1hi\n-----END PGP SIGNATURE-----\n", "payload": "tree 2382a8a5d6c101f46f5d8eea6d3669c7ea39dea6\nparent aa83481a5cfe668bdb081a7189204d4819c986ce\nparent 2433526809644fd8990773b32a6c6e7286d20a95\nauthor kennytm <kennytm@gmail.com> 1546703804 +0800\ncommitter GitHub <noreply@github.com> 1546703804 +0800\n\nRollup merge of #57229 - mikeyhew:fix-56806, r=varkor\n\nFix #56806 by using `delay_span_bug` in object safety layout sanity checks\n\nIt's possible that `is_object_safe` is called on a trait method that with an invalid receiver type. This caused an ICE in #56806, because `receiver_is_dispatchable` returns `true` for `self: Box<dyn Trait>`, which causes one of the layout sanity checks in object_safety.rs to fail. Replacing `bug!` with `delay_span_bug` solves this.\n\nThe fact that `receiver_is_dispatchable` returns `true` here could be considered a bug. It passes the check that the method implements, though: `Box<dyn Trait>` implements `DispatchFromDyn<Box<dyn Trait>>` because `dyn Trait` implements `Unsize<dyn Trait>`. It would be good to hear what @eddyb and @nikomatsakis think.\n\nNote that I only added a test for the case encountered in #56806. I could not come up with a case that triggered an ICE from the other check, `bug!(\"receiver when Self = dyn Trait should be ScalarPair, found Scalar\")`. There is no way, to my knowledge, that you can make `receiver_is_dispatchable` return true but still have a `Scalar` ABI when `Self = dyn Trait`.\n\nOne other case I encountered while debugging #56806 was that if you have a type parameter `T` that implements `Deref<Target=Self>` and `DispatchFromDyn<T>`, and use it as a method receiver, it will cause an ICE during `is_object_safe` because `T` has no layout ([playground](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=d9b7497b3be0ca8382fa7d9497263214)):\n\n```rust\ntrait Trait<T: Deref<Target=Self> + DispatchFromDyn<T>> {\n    fn foo(self: T) -> dyn Trait<T>;\n}\n```\n\nI don't intend to remove the ICE there because it is a pathological case, especially since there is no way to implement `DispatchFromDyn<T>` for `T` \u2014 the checks in typeck/coherence/builtin.rs do not allow that.\n\nfixes #56806\nr? @varkor\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c58b842d61992a470a726bbc3abfdc540c2c6af", "html_url": "https://github.com/rust-lang/rust/commit/6c58b842d61992a470a726bbc3abfdc540c2c6af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c58b842d61992a470a726bbc3abfdc540c2c6af/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa83481a5cfe668bdb081a7189204d4819c986ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa83481a5cfe668bdb081a7189204d4819c986ce", "html_url": "https://github.com/rust-lang/rust/commit/aa83481a5cfe668bdb081a7189204d4819c986ce"}, {"sha": "2433526809644fd8990773b32a6c6e7286d20a95", "url": "https://api.github.com/repos/rust-lang/rust/commits/2433526809644fd8990773b32a6c6e7286d20a95", "html_url": "https://github.com/rust-lang/rust/commit/2433526809644fd8990773b32a6c6e7286d20a95"}], "stats": {"total": 42, "additions": 37, "deletions": 5}, "files": [{"sha": "00967242bed0e93dbd80b0e628b47b8d5e50b662", "filename": "src/librustc/traits/object_safety.rs", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/6c58b842d61992a470a726bbc3abfdc540c2c6af/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c58b842d61992a470a726bbc3abfdc540c2c6af/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fobject_safety.rs?ref=6c58b842d61992a470a726bbc3abfdc540c2c6af", "patch": "@@ -359,7 +359,15 @@ impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {\n \n                 match abi_of_ty(unit_receiver_ty) {\n                     &Abi::Scalar(..) => (),\n-                    abi => bug!(\"Receiver when Self = () should have a Scalar ABI, found {:?}\", abi)\n+                    abi => {\n+                        self.sess.delay_span_bug(\n+                            self.def_span(method.def_id),\n+                            &format!(\n+                                \"Receiver when Self = () should have a Scalar ABI, found {:?}\",\n+                                abi\n+                            ),\n+                        );\n+                    }\n                 }\n \n                 let trait_object_ty = self.object_ty_for_trait(\n@@ -373,10 +381,15 @@ impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {\n \n                 match abi_of_ty(trait_object_receiver) {\n                     &Abi::ScalarPair(..) => (),\n-                    abi => bug!(\n-                        \"Receiver when Self = {} should have a ScalarPair ABI, found {:?}\",\n-                        trait_object_ty, abi\n-                    )\n+                    abi => {\n+                        self.sess.delay_span_bug(\n+                            self.def_span(method.def_id),\n+                            &format!(\n+                                \"Receiver when Self = {} should have a ScalarPair ABI, found {:?}\",\n+                                trait_object_ty, abi\n+                            ),\n+                        );\n+                    }\n                 }\n             }\n         }"}, {"sha": "b6454e578e6af22b8f4fd438efdccd4a5cc3a416", "filename": "src/test/ui/issues/issue-56806.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6c58b842d61992a470a726bbc3abfdc540c2c6af/src%2Ftest%2Fui%2Fissues%2Fissue-56806.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c58b842d61992a470a726bbc3abfdc540c2c6af/src%2Ftest%2Fui%2Fissues%2Fissue-56806.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-56806.rs?ref=6c58b842d61992a470a726bbc3abfdc540c2c6af", "patch": "@@ -0,0 +1,7 @@\n+pub trait Trait {\n+    fn dyn_instead_of_self(self: Box<dyn Trait>);\n+    //~^ ERROR invalid method receiver type: std::boxed::Box<(dyn Trait + 'static)>\n+}\n+\n+pub fn main() {\n+}"}, {"sha": "2dd3add8f60e61aa9cbb57d90b26653bea8a5026", "filename": "src/test/ui/issues/issue-56806.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6c58b842d61992a470a726bbc3abfdc540c2c6af/src%2Ftest%2Fui%2Fissues%2Fissue-56806.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6c58b842d61992a470a726bbc3abfdc540c2c6af/src%2Ftest%2Fui%2Fissues%2Fissue-56806.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-56806.stderr?ref=6c58b842d61992a470a726bbc3abfdc540c2c6af", "patch": "@@ -0,0 +1,12 @@\n+error[E0307]: invalid method receiver type: std::boxed::Box<(dyn Trait + 'static)>\n+  --> $DIR/issue-56806.rs:2:34\n+   |\n+LL |     fn dyn_instead_of_self(self: Box<dyn Trait>);\n+   |                                  ^^^^^^^^^^^^^^\n+   |\n+   = note: type must be `Self` or a type that dereferences to it\n+   = help: consider changing to `self`, `&self`, `&mut self`, or `self: Box<Self>`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0307`."}]}