{"sha": "3bcb85ee658e7a5362f5e381c337f07381f916dc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiY2I4NWVlNjU4ZTdhNTM2MmY1ZTM4MWMzMzdmMDczODFmOTE2ZGM=", "commit": {"author": {"name": "Josef Reinhard Brandl", "email": "mail@josefbrandl.de", "date": "2018-06-23T11:32:53Z"}, "committer": {"name": "Josef Reinhard Brandl", "email": "mail@josefbrandl.de", "date": "2018-06-23T16:29:56Z"}, "message": "`PinMut`: Add safe `get_mut` and rename unsafe fns to `get_mut_unchecked` and `map_unchecked`", "tree": {"sha": "2b081a664a10700167ee929b579ec2fa6700ef6e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b081a664a10700167ee929b579ec2fa6700ef6e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3bcb85ee658e7a5362f5e381c337f07381f916dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3bcb85ee658e7a5362f5e381c337f07381f916dc", "html_url": "https://github.com/rust-lang/rust/commit/3bcb85ee658e7a5362f5e381c337f07381f916dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3bcb85ee658e7a5362f5e381c337f07381f916dc/comments", "author": {"login": "MajorBreakfast", "id": 340142, "node_id": "MDQ6VXNlcjM0MDE0Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/340142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MajorBreakfast", "html_url": "https://github.com/MajorBreakfast", "followers_url": "https://api.github.com/users/MajorBreakfast/followers", "following_url": "https://api.github.com/users/MajorBreakfast/following{/other_user}", "gists_url": "https://api.github.com/users/MajorBreakfast/gists{/gist_id}", "starred_url": "https://api.github.com/users/MajorBreakfast/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MajorBreakfast/subscriptions", "organizations_url": "https://api.github.com/users/MajorBreakfast/orgs", "repos_url": "https://api.github.com/users/MajorBreakfast/repos", "events_url": "https://api.github.com/users/MajorBreakfast/events{/privacy}", "received_events_url": "https://api.github.com/users/MajorBreakfast/received_events", "type": "User", "site_admin": false}, "committer": {"login": "MajorBreakfast", "id": 340142, "node_id": "MDQ6VXNlcjM0MDE0Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/340142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MajorBreakfast", "html_url": "https://github.com/MajorBreakfast", "followers_url": "https://api.github.com/users/MajorBreakfast/followers", "following_url": "https://api.github.com/users/MajorBreakfast/following{/other_user}", "gists_url": "https://api.github.com/users/MajorBreakfast/gists{/gist_id}", "starred_url": "https://api.github.com/users/MajorBreakfast/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MajorBreakfast/subscriptions", "organizations_url": "https://api.github.com/users/MajorBreakfast/orgs", "repos_url": "https://api.github.com/users/MajorBreakfast/repos", "events_url": "https://api.github.com/users/MajorBreakfast/events{/privacy}", "received_events_url": "https://api.github.com/users/MajorBreakfast/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "56e8f29dbe89f2109cacc8eb5e92ea3de32eefb9", "url": "https://api.github.com/repos/rust-lang/rust/commits/56e8f29dbe89f2109cacc8eb5e92ea3de32eefb9", "html_url": "https://github.com/rust-lang/rust/commit/56e8f29dbe89f2109cacc8eb5e92ea3de32eefb9"}], "stats": {"total": 29, "additions": 15, "deletions": 14}, "files": [{"sha": "08bd9289ab48758559b14030151c36e343fbb078", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3bcb85ee658e7a5362f5e381c337f07381f916dc/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bcb85ee658e7a5362f5e381c337f07381f916dc/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=3bcb85ee658e7a5362f5e381c337f07381f916dc", "patch": "@@ -1119,6 +1119,12 @@ impl<'a, T: ?Sized + Unpin> PinMut<'a, T> {\n     pub fn new(reference: &'a mut T) -> PinMut<'a, T> {\n         PinMut { inner: reference }\n     }\n+\n+    /// Get a mutable reference to the data inside of this `PinMut`.\n+    #[unstable(feature = \"pin\", issue = \"49150\")]\n+    pub fn get_mut(this: PinMut<'a, T>) -> &'a mut T {\n+        this.inner\n+    }\n }\n \n \n@@ -1150,21 +1156,21 @@ impl<'a, T: ?Sized> PinMut<'a, T> {\n     /// the data out of the mutable reference you receive when you call this\n     /// function.\n     #[unstable(feature = \"pin\", issue = \"49150\")]\n-    pub unsafe fn get_mut(this: PinMut<'a, T>) -> &'a mut T {\n+    pub unsafe fn get_mut_unchecked(this: PinMut<'a, T>) -> &'a mut T {\n         this.inner\n     }\n \n     /// Construct a new pin by mapping the interior value.\n     ///\n-    /// For example, if you  wanted to get a `PinMut` of a field of something, you\n-    /// could use this to get access to that field in one line of code.\n+    /// For example, if you  wanted to get a `PinMut` of a field of something,\n+    /// you could use this to get access to that field in one line of code.\n     ///\n     /// This function is unsafe. You must guarantee that the data you return\n     /// will not move so long as the argument value does not move (for example,\n     /// because it is one of the fields of that value), and also that you do\n     /// not move out of the argument you receive to the interior function.\n     #[unstable(feature = \"pin\", issue = \"49150\")]\n-    pub unsafe fn map<U, F>(this: PinMut<'a, T>, f: F) -> PinMut<'a, U> where\n+    pub unsafe fn map_unchecked<U, F>(this: PinMut<'a, T>, f: F) -> PinMut<'a, U> where\n         F: FnOnce(&mut T) -> &mut U\n     {\n         PinMut { inner: f(this.inner) }"}, {"sha": "70979f631cdbf5d0c7979e9face304e585789940", "filename": "src/libcore/option.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bcb85ee658e7a5362f5e381c337f07381f916dc/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bcb85ee658e7a5362f5e381c337f07381f916dc/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=3bcb85ee658e7a5362f5e381c337f07381f916dc", "patch": "@@ -275,7 +275,7 @@ impl<T> Option<T> {\n     #[unstable(feature = \"pin\", issue = \"49150\")]\n     pub fn as_pin_mut<'a>(self: PinMut<'a, Self>) -> Option<PinMut<'a, T>> {\n         unsafe {\n-            PinMut::get_mut(self).as_mut().map(|x| PinMut::new_unchecked(x))\n+            PinMut::get_mut_unchecked(self).as_mut().map(|x| PinMut::new_unchecked(x))\n         }\n     }\n "}, {"sha": "c1cc36f3b419a2364eeef8c4df4d608e075d1a06", "filename": "src/libstd/future.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bcb85ee658e7a5362f5e381c337f07381f916dc/src%2Flibstd%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bcb85ee658e7a5362f5e381c337f07381f916dc/src%2Flibstd%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffuture.rs?ref=3bcb85ee658e7a5362f5e381c337f07381f916dc", "patch": "@@ -43,7 +43,7 @@ impl<T: Generator<Yield = ()>> !Unpin for GenFuture<T> {}\n impl<T: Generator<Yield = ()>> Future for GenFuture<T> {\n     type Output = T::Return;\n     fn poll(self: PinMut<Self>, cx: &mut task::Context) -> Poll<Self::Output> {\n-        set_task_cx(cx, || match unsafe { PinMut::get_mut(self).0.resume() } {\n+        set_task_cx(cx, || match unsafe { PinMut::get_mut_unchecked(self).0.resume() } {\n             GeneratorState::Yielded(()) => Poll::Pending,\n             GeneratorState::Complete(x) => Poll::Ready(x),\n         })"}, {"sha": "451420ae88ad8179f1ec1f37efaad1a458bf13fb", "filename": "src/libstd/panic.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3bcb85ee658e7a5362f5e381c337f07381f916dc/src%2Flibstd%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bcb85ee658e7a5362f5e381c337f07381f916dc/src%2Flibstd%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanic.rs?ref=3bcb85ee658e7a5362f5e381c337f07381f916dc", "patch": "@@ -327,14 +327,9 @@ impl<T: fmt::Debug> fmt::Debug for AssertUnwindSafe<T> {\n impl<'a, F: Future> Future for AssertUnwindSafe<F> {\n     type Output = F::Output;\n \n-    fn poll(mut self: PinMut<Self>, cx: &mut task::Context) -> Poll<Self::Output> {\n-        unsafe {\n-            let pinned_field = PinMut::new_unchecked(\n-                &mut PinMut::get_mut(self.reborrow()).0\n-            );\n-\n-            pinned_field.poll(cx)\n-        }\n+    fn poll(self: PinMut<Self>, cx: &mut task::Context) -> Poll<Self::Output> {\n+        let pinned_field = unsafe { PinMut::map_unchecked(self, |x| &mut x.0) };\n+        pinned_field.poll(cx)\n     }\n }\n "}]}