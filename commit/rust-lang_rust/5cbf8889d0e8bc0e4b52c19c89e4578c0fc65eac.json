{"sha": "5cbf8889d0e8bc0e4b52c19c89e4578c0fc65eac", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjYmY4ODg5ZDBlOGJjMGU0YjUyYzE5Yzg5ZTQ1NzhjMGZjNjVlYWM=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-12-21T02:58:18Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-12-21T02:58:18Z"}, "message": "rustc: Add bind expressions to the AST", "tree": {"sha": "c110bc7ad2a237a7cde11057ea2c7761039bb1ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c110bc7ad2a237a7cde11057ea2c7761039bb1ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5cbf8889d0e8bc0e4b52c19c89e4578c0fc65eac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5cbf8889d0e8bc0e4b52c19c89e4578c0fc65eac", "html_url": "https://github.com/rust-lang/rust/commit/5cbf8889d0e8bc0e4b52c19c89e4578c0fc65eac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5cbf8889d0e8bc0e4b52c19c89e4578c0fc65eac/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed1dddc33f2dfb6f9247ae877e64fead5642f360", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed1dddc33f2dfb6f9247ae877e64fead5642f360", "html_url": "https://github.com/rust-lang/rust/commit/ed1dddc33f2dfb6f9247ae877e64fead5642f360"}], "stats": {"total": 26, "additions": 26, "deletions": 0}, "files": [{"sha": "8f1a9638959af5fa4d63e65f35277f626d65d465", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5cbf8889d0e8bc0e4b52c19c89e4578c0fc65eac/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cbf8889d0e8bc0e4b52c19c89e4578c0fc65eac/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=5cbf8889d0e8bc0e4b52c19c89e4578c0fc65eac", "patch": "@@ -139,6 +139,7 @@ tag expr_ {\n     expr_tup(vec[elt], ann);\n     expr_rec(vec[field], ann);\n     expr_call(@expr, vec[@expr], ann);\n+    expr_bind(@expr, vec[option.t[@expr]], ann);\n     expr_binary(binop, @expr, @expr, ann);\n     expr_unary(unop, @expr, ann);\n     expr_lit(@lit, ann);"}, {"sha": "d8efa25d1651835e80297466150cd1a4615f98ec", "filename": "src/comp/middle/fold.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/5cbf8889d0e8bc0e4b52c19c89e4578c0fc65eac/src%2Fcomp%2Fmiddle%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cbf8889d0e8bc0e4b52c19c89e4578c0fc65eac/src%2Fcomp%2Fmiddle%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ffold.rs?ref=5cbf8889d0e8bc0e4b52c19c89e4578c0fc65eac", "patch": "@@ -74,6 +74,10 @@ type ast_fold[ENV] =\n          @expr f, vec[@expr] args,\n          ann a) -> @expr)                         fold_expr_call,\n \n+     (fn(&ENV e, &span sp,\n+         @expr f, vec[option.t[@expr]] args,\n+         ann a) -> @expr)                         fold_expr_bind,\n+\n      (fn(&ENV e, &span sp,\n          ast.binop,\n          @expr lhs, @expr rhs,\n@@ -417,6 +421,20 @@ fn fold_expr[ENV](&ENV env, ast_fold[ENV] fld, &@expr e) -> @expr {\n             ret fld.fold_expr_call(env_, e.span, ff, aargs, t);\n         }\n \n+        case (ast.expr_bind(?f, ?args_opt, ?t)) {\n+            auto ff = fold_expr(env_, fld, f);\n+            let vec[option.t[@ast.expr]] aargs_opt = vec();\n+            for (option.t[@ast.expr] t_opt in args_opt) {\n+                alt (t_opt) {\n+                    case (some[@ast.expr](?e)) {\n+                        aargs_opt += vec(some(fold_expr(env_, fld, e)));\n+                    }\n+                    case (none[@ast.expr]) { /* empty */ }\n+                }\n+            }\n+            ret fld.fold_expr_bind(env_, e.span, ff, aargs_opt, t);\n+        }\n+\n         case (ast.expr_binary(?op, ?a, ?b, ?t)) {\n             auto aa = fold_expr(env_, fld, a);\n             auto bb = fold_expr(env_, fld, b);\n@@ -807,6 +825,12 @@ fn identity_fold_expr_call[ENV](&ENV env, &span sp, @expr f,\n     ret @respan(sp, ast.expr_call(f, args, a));\n }\n \n+fn identity_fold_expr_bind[ENV](&ENV env, &span sp, @expr f,\n+                                vec[option.t[@expr]] args_opt, ann a)\n+        -> @expr {\n+    ret @respan(sp, ast.expr_bind(f, args_opt, a));\n+}\n+\n fn identity_fold_expr_binary[ENV](&ENV env, &span sp, ast.binop b,\n                                   @expr lhs, @expr rhs,\n                                   ann a) -> @expr {\n@@ -1075,6 +1099,7 @@ fn new_identity_fold[ENV]() -> ast_fold[ENV] {\n          fold_expr_tup    = bind identity_fold_expr_tup[ENV](_,_,_,_),\n          fold_expr_rec    = bind identity_fold_expr_rec[ENV](_,_,_,_),\n          fold_expr_call   = bind identity_fold_expr_call[ENV](_,_,_,_,_),\n+         fold_expr_bind   = bind identity_fold_expr_bind[ENV](_,_,_,_,_),\n          fold_expr_binary = bind identity_fold_expr_binary[ENV](_,_,_,_,_,_),\n          fold_expr_unary  = bind identity_fold_expr_unary[ENV](_,_,_,_,_),\n          fold_expr_lit    = bind identity_fold_expr_lit[ENV](_,_,_,_),"}]}