{"sha": "acfc5584018de3a9a431a17f0cc34e0bfaf4cdeb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjZmM1NTg0MDE4ZGUzYTlhNDMxYTE3ZjBjYzM0ZTBiZmFmNGNkZWI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-27T11:18:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-27T11:18:53Z"}, "message": "Auto merge of #72639 - Dylan-DPC:rollup-76upj51, r=Dylan-DPC\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #72348 (Fix confusing error message for comma typo in multiline statement)\n - #72533 (Resolve UB in Arc/Weak interaction (2))\n - #72548 (Add test for old compiler ICE when using `Borrow`)\n - #72606 (Small cell example update)\n - #72610 (Remove font-display settings)\n - #72626 (Add remark regarding DoubleEndedIterator)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "bc831a62648379cfb43fba304bff233e2e4200f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc831a62648379cfb43fba304bff233e2e4200f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/acfc5584018de3a9a431a17f0cc34e0bfaf4cdeb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/acfc5584018de3a9a431a17f0cc34e0bfaf4cdeb", "html_url": "https://github.com/rust-lang/rust/commit/acfc5584018de3a9a431a17f0cc34e0bfaf4cdeb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/acfc5584018de3a9a431a17f0cc34e0bfaf4cdeb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "783139bd8fc3b94fac9a1bf81bba2c506e8221b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/783139bd8fc3b94fac9a1bf81bba2c506e8221b6", "html_url": "https://github.com/rust-lang/rust/commit/783139bd8fc3b94fac9a1bf81bba2c506e8221b6"}, {"sha": "e6353aac9d0365d6541bb7f33548fdeb988b6563", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6353aac9d0365d6541bb7f33548fdeb988b6563", "html_url": "https://github.com/rust-lang/rust/commit/e6353aac9d0365d6541bb7f33548fdeb988b6563"}], "stats": {"total": 162, "additions": 141, "deletions": 21}, "files": [{"sha": "8a45715e89c91a870a703a770d557fb840a15032", "filename": "src/liballoc/sync.rs", "status": "modified", "additions": 26, "deletions": 9, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/acfc5584018de3a9a431a17f0cc34e0bfaf4cdeb/src%2Fliballoc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acfc5584018de3a9a431a17f0cc34e0bfaf4cdeb/src%2Fliballoc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fsync.rs?ref=acfc5584018de3a9a431a17f0cc34e0bfaf4cdeb", "patch": "@@ -867,12 +867,10 @@ impl<T: ?Sized> Arc<T> {\n     unsafe fn drop_slow(&mut self) {\n         // Destroy the data at this time, even though we may not free the box\n         // allocation itself (there may still be weak pointers lying around).\n-        ptr::drop_in_place(&mut self.ptr.as_mut().data);\n+        ptr::drop_in_place(Self::get_mut_unchecked(self));\n \n-        if self.inner().weak.fetch_sub(1, Release) == 1 {\n-            acquire!(self.inner().weak);\n-            Global.dealloc(self.ptr.cast(), Layout::for_value(self.ptr.as_ref()))\n-        }\n+        // Drop the weak ref collectively held by all strong references\n+        drop(Weak { ptr: self.ptr });\n     }\n \n     #[inline]\n@@ -1204,7 +1202,7 @@ impl<T: Clone> Arc<T> {\n \n         // As with `get_mut()`, the unsafety is ok because our reference was\n         // either unique to begin with, or became one upon cloning the contents.\n-        unsafe { &mut this.ptr.as_mut().data }\n+        unsafe { Self::get_mut_unchecked(this) }\n     }\n }\n \n@@ -1280,7 +1278,9 @@ impl<T: ?Sized> Arc<T> {\n     #[inline]\n     #[unstable(feature = \"get_mut_unchecked\", issue = \"63292\")]\n     pub unsafe fn get_mut_unchecked(this: &mut Self) -> &mut T {\n-        &mut this.ptr.as_mut().data\n+        // We are careful to *not* create a reference covering the \"count\" fields, as\n+        // this would alias with concurrent access to the reference counts (e.g. by `Weak`).\n+        &mut (*this.ptr.as_ptr()).data\n     }\n \n     /// Determine whether this is the unique reference (including weak refs) to\n@@ -1571,6 +1571,13 @@ impl<T> Weak<T> {\n     }\n }\n \n+/// Helper type to allow accessing the reference counts without\n+/// making any assertions about the data field.\n+struct WeakInner<'a> {\n+    weak: &'a atomic::AtomicUsize,\n+    strong: &'a atomic::AtomicUsize,\n+}\n+\n impl<T: ?Sized> Weak<T> {\n     /// Attempts to upgrade the `Weak` pointer to an [`Arc`], delaying\n     /// dropping of the inner value if successful.\n@@ -1678,8 +1685,18 @@ impl<T: ?Sized> Weak<T> {\n     /// Returns `None` when the pointer is dangling and there is no allocated `ArcInner`,\n     /// (i.e., when this `Weak` was created by `Weak::new`).\n     #[inline]\n-    fn inner(&self) -> Option<&ArcInner<T>> {\n-        if is_dangling(self.ptr) { None } else { Some(unsafe { self.ptr.as_ref() }) }\n+    fn inner(&self) -> Option<WeakInner<'_>> {\n+        if is_dangling(self.ptr) {\n+            None\n+        } else {\n+            // We are careful to *not* create a reference covering the \"data\" field, as\n+            // the field may be mutated concurrently (for example, if the last `Arc`\n+            // is dropped, the data field will be dropped in-place).\n+            Some(unsafe {\n+                let ptr = self.ptr.as_ptr();\n+                WeakInner { strong: &(*ptr).strong, weak: &(*ptr).weak }\n+            })\n+        }\n     }\n \n     /// Returns `true` if the two `Weak`s point to the same allocation (similar to"}, {"sha": "c4c1d2824b0980626c45ab850ebd6de88120a7c3", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/acfc5584018de3a9a431a17f0cc34e0bfaf4cdeb/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acfc5584018de3a9a431a17f0cc34e0bfaf4cdeb/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=acfc5584018de3a9a431a17f0cc34e0bfaf4cdeb", "patch": "@@ -849,11 +849,11 @@ impl<T: ?Sized> RefCell<T> {\n     /// ```\n     /// use std::cell::RefCell;\n     ///\n-    /// let c = RefCell::new(5);\n+    /// let c = RefCell::new(\"hello\".to_owned());\n     ///\n-    /// *c.borrow_mut() = 7;\n+    /// *c.borrow_mut() = \"bonjour\".to_owned();\n     ///\n-    /// assert_eq!(*c.borrow(), 7);\n+    /// assert_eq!(&*c.borrow(), \"bonjour\");\n     /// ```\n     ///\n     /// An example of panic:"}, {"sha": "f6329c6c593ed778a52f9b20b5df28a0a2b54ed3", "filename": "src/libcore/iter/traits/double_ended.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/acfc5584018de3a9a431a17f0cc34e0bfaf4cdeb/src%2Flibcore%2Fiter%2Ftraits%2Fdouble_ended.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acfc5584018de3a9a431a17f0cc34e0bfaf4cdeb/src%2Flibcore%2Fiter%2Ftraits%2Fdouble_ended.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Ftraits%2Fdouble_ended.rs?ref=acfc5584018de3a9a431a17f0cc34e0bfaf4cdeb", "patch": "@@ -63,6 +63,32 @@ pub trait DoubleEndedIterator: Iterator {\n     /// assert_eq!(None, iter.next());\n     /// assert_eq!(None, iter.next_back());\n     /// ```\n+    ///\n+    /// # Remarks\n+    ///\n+    /// The elements yielded by `DoubleEndedIterator`'s methods may differ from\n+    /// the ones yielded by `Iterator`'s methods:\n+    ///\n+    /// ```\n+    /// let vec = vec![(1, 'a'), (1, 'b'), (1, 'c'), (2, 'a'), (2, 'b')];\n+    /// let uniq_by_fst_comp = || {\n+    ///     let mut seen = std::collections::HashSet::new();\n+    ///     vec.iter().copied().filter(move |x| seen.insert(x.0))\n+    /// };\n+    ///\n+    /// assert_eq!(uniq_by_fst_comp().last(), Some((2, 'a')));\n+    /// assert_eq!(uniq_by_fst_comp().next_back(), Some((2, 'b')));\n+    ///\n+    /// assert_eq!(\n+    ///     uniq_by_fst_comp().fold(vec![], |mut v, x| {v.push(x); v}),\n+    ///     vec![(1, 'a'), (2, 'a')]\n+    /// );\n+    /// assert_eq!(\n+    ///     uniq_by_fst_comp().rfold(vec![], |mut v, x| {v.push(x); v}),\n+    ///     vec![(2, 'b'), (1, 'c')]\n+    /// );\n+    /// ```\n+    ///\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn next_back(&mut self) -> Option<Self::Item>;\n "}, {"sha": "660a63841bcef84680a86bc8a67364968616cedc", "filename": "src/librustc_parse/parser/diagnostics.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/acfc5584018de3a9a431a17f0cc34e0bfaf4cdeb/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acfc5584018de3a9a431a17f0cc34e0bfaf4cdeb/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs?ref=acfc5584018de3a9a431a17f0cc34e0bfaf4cdeb", "patch": "@@ -935,6 +935,19 @@ impl<'a> Parser<'a> {\n             return self.expect(&token::Semi).map(drop);\n         } else if !sm.is_multiline(self.prev_token.span.until(self.token.span)) {\n             // The current token is in the same line as the prior token, not recoverable.\n+        } else if [token::Comma, token::Colon].contains(&self.token.kind)\n+            && &self.prev_token.kind == &token::CloseDelim(token::Paren)\n+        {\n+            // Likely typo: The current token is on a new line and is expected to be\n+            // `.`, `;`, `?`, or an operator after a close delimiter token.\n+            //\n+            // let a = std::process::Command::new(\"echo\")\n+            //         .arg(\"1\")\n+            //         ,arg(\"2\")\n+            //         ^\n+            // https://github.com/rust-lang/rust/issues/72253\n+            self.expect(&token::Semi)?;\n+            return Ok(());\n         } else if self.look_ahead(1, |t| {\n             t == &token::CloseDelim(token::Brace) || t.can_begin_expr() && t.kind != token::Colon\n         }) && [token::Comma, token::Colon].contains(&self.token.kind)"}, {"sha": "2cb3347135c1b4de185c3a1e84bd1d0f14419229", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/acfc5584018de3a9a431a17f0cc34e0bfaf4cdeb/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/acfc5584018de3a9a431a17f0cc34e0bfaf4cdeb/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=acfc5584018de3a9a431a17f0cc34e0bfaf4cdeb", "patch": "@@ -3,14 +3,12 @@\n \tfont-family: 'Fira Sans';\n \tfont-style: normal;\n \tfont-weight: 400;\n-\tfont-display: optional;\n \tsrc: local('Fira Sans'), url(\"FiraSans-Regular.woff\") format('woff');\n }\n @font-face {\n \tfont-family: 'Fira Sans';\n \tfont-style: normal;\n \tfont-weight: 500;\n-\tfont-display: optional;\n \tsrc: local('Fira Sans Medium'), url(\"FiraSans-Medium.woff\") format('woff');\n }\n \n@@ -19,23 +17,18 @@\n \tfont-family: 'Source Serif Pro';\n \tfont-style: normal;\n \tfont-weight: 400;\n-\t/* The difference for body text without this font is greater than other fonts,\n-\t * so the 0~100ms block of fallback is preferred over optional, for legibility. */\n-\tfont-display: fallback;\n \tsrc: local('Source Serif Pro'), url(\"SourceSerifPro-Regular.ttf.woff\") format('woff');\n }\n @font-face {\n \tfont-family: 'Source Serif Pro';\n \tfont-style: italic;\n \tfont-weight: 400;\n-\tfont-display: optional;\n \tsrc: local('Source Serif Pro Italic'), url(\"SourceSerifPro-It.ttf.woff\") format('woff');\n }\n @font-face {\n \tfont-family: 'Source Serif Pro';\n \tfont-style: normal;\n \tfont-weight: 700;\n-\tfont-display: optional;\n \tsrc: local('Source Serif Pro Bold'), url(\"SourceSerifPro-Bold.ttf.woff\") format('woff');\n }\n \n@@ -44,7 +37,6 @@\n \tfont-family: 'Source Code Pro';\n \tfont-style: normal;\n \tfont-weight: 400;\n-\tfont-display: optional;\n \t/* Avoid using locally installed font because bad versions are in circulation:\n \t * see https://github.com/rust-lang/rust/issues/24355 */\n \tsrc: url(\"SourceCodePro-Regular.woff\") format('woff');\n@@ -53,7 +45,6 @@\n \tfont-family: 'Source Code Pro';\n \tfont-style: normal;\n \tfont-weight: 600;\n-\tfont-display: optional;\n \tsrc: url(\"SourceCodePro-Semibold.woff\") format('woff');\n }\n "}, {"sha": "7a8a12c2a93afb77069552dc1fedb5c327ea11c9", "filename": "src/test/ui/issues/issue-50687-ice-on-borrow.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/acfc5584018de3a9a431a17f0cc34e0bfaf4cdeb/src%2Ftest%2Fui%2Fissues%2Fissue-50687-ice-on-borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acfc5584018de3a9a431a17f0cc34e0bfaf4cdeb/src%2Ftest%2Fui%2Fissues%2Fissue-50687-ice-on-borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50687-ice-on-borrow.rs?ref=acfc5584018de3a9a431a17f0cc34e0bfaf4cdeb", "patch": "@@ -0,0 +1,41 @@\n+// This previously caused an ICE at:\n+// librustc/traits/structural_impls.rs:180: impossible case reached\n+\n+#![no_main]\n+\n+use std::borrow::Borrow;\n+use std::io;\n+use std::io::Write;\n+\n+trait Constraint {}\n+\n+struct Container<T> {\n+    t: T,\n+}\n+\n+struct Borrowed;\n+struct Owned;\n+\n+impl<'a, T> Write for &'a Container<T>\n+where\n+    T: Constraint,\n+    &'a T: Write,\n+{\n+    fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n+        Ok(buf.len())\n+    }\n+\n+    fn flush(&mut self) -> io::Result<()> {\n+        Ok(())\n+    }\n+}\n+\n+impl Borrow<Borrowed> for Owned {\n+    fn borrow(&self) -> &Borrowed {\n+        &Borrowed\n+    }\n+}\n+\n+fn func(owned: Owned) {\n+    let _: () = Borrow::borrow(&owned); //~ ERROR mismatched types\n+}"}, {"sha": "f6adfc87dad33ff496eb5501514dc259746f39f9", "filename": "src/test/ui/issues/issue-50687-ice-on-borrow.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/acfc5584018de3a9a431a17f0cc34e0bfaf4cdeb/src%2Ftest%2Fui%2Fissues%2Fissue-50687-ice-on-borrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/acfc5584018de3a9a431a17f0cc34e0bfaf4cdeb/src%2Ftest%2Fui%2Fissues%2Fissue-50687-ice-on-borrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50687-ice-on-borrow.stderr?ref=acfc5584018de3a9a431a17f0cc34e0bfaf4cdeb", "patch": "@@ -0,0 +1,16 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-50687-ice-on-borrow.rs:40:17\n+   |\n+LL |     let _: () = Borrow::borrow(&owned);\n+   |            --   ^^^^^^^^^^^^^^^^^^^^^^\n+   |            |    |\n+   |            |    expected `()`, found reference\n+   |            |    help: consider dereferencing the borrow: `*Borrow::borrow(&owned)`\n+   |            expected due to this\n+   |\n+   = note: expected unit type `()`\n+              found reference `&_`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "6f9af73b039e4aa28e0b463edbce423b00797eb0", "filename": "src/test/ui/issues/issue-72253.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/acfc5584018de3a9a431a17f0cc34e0bfaf4cdeb/src%2Ftest%2Fui%2Fissues%2Fissue-72253.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acfc5584018de3a9a431a17f0cc34e0bfaf4cdeb/src%2Ftest%2Fui%2Fissues%2Fissue-72253.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-72253.rs?ref=acfc5584018de3a9a431a17f0cc34e0bfaf4cdeb", "patch": "@@ -0,0 +1,6 @@\n+fn main() {\n+    let a = std::process::Command::new(\"echo\")\n+        .arg(\"1\")\n+        ,arg(\"2\") //~ ERROR expected one of `.`, `;`, `?`, or an operator, found `,`\n+        .output();\n+}"}, {"sha": "3819fd92a9e2138914005123c934596dc6e16d87", "filename": "src/test/ui/issues/issue-72253.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/acfc5584018de3a9a431a17f0cc34e0bfaf4cdeb/src%2Ftest%2Fui%2Fissues%2Fissue-72253.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/acfc5584018de3a9a431a17f0cc34e0bfaf4cdeb/src%2Ftest%2Fui%2Fissues%2Fissue-72253.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-72253.stderr?ref=acfc5584018de3a9a431a17f0cc34e0bfaf4cdeb", "patch": "@@ -0,0 +1,10 @@\n+error: expected one of `.`, `;`, `?`, or an operator, found `,`\n+  --> $DIR/issue-72253.rs:4:9\n+   |\n+LL |         .arg(\"1\")\n+   |                  - expected one of `.`, `;`, `?`, or an operator\n+LL |         ,arg(\"2\")\n+   |         ^ unexpected token\n+\n+error: aborting due to previous error\n+"}]}