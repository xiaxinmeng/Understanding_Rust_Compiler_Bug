{"sha": "caa5b92985e6df582a0d33d10cf41e2835ef11b1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhYTViOTI5ODVlNmRmNTgyYTBkMzNkMTBjZjQxZTI4MzVlZjExYjE=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-01-28T23:28:20Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-01-28T23:28:20Z"}, "message": "Pass linearized typarams to make_generic_glue. Steps toward derived tydescs.", "tree": {"sha": "9a3baf2478f00bc68d152b02040f59263a885d46", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a3baf2478f00bc68d152b02040f59263a885d46"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/caa5b92985e6df582a0d33d10cf41e2835ef11b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/caa5b92985e6df582a0d33d10cf41e2835ef11b1", "html_url": "https://github.com/rust-lang/rust/commit/caa5b92985e6df582a0d33d10cf41e2835ef11b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/caa5b92985e6df582a0d33d10cf41e2835ef11b1/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea42911561842b4331c3fa5a5a30b97497cbf871", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea42911561842b4331c3fa5a5a30b97497cbf871", "html_url": "https://github.com/rust-lang/rust/commit/ea42911561842b4331c3fa5a5a30b97497cbf871"}], "stats": {"total": 27, "additions": 22, "deletions": 5}, "files": [{"sha": "a4eb945bf3e1cb69484215fa7b6792fd01db1be6", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/caa5b92985e6df582a0d33d10cf41e2835ef11b1/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caa5b92985e6df582a0d33d10cf41e2835ef11b1/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=caa5b92985e6df582a0d33d10cf41e2835ef11b1", "patch": "@@ -949,23 +949,30 @@ fn get_tydesc(&@block_ctxt cx, @ty.t t) -> ValueRef {\n \n     // Does it contain a type param? If so, generate a derived tydesc.\n     let uint n_params = ty.count_ty_params(t);\n+\n     if (ty.count_ty_params(t) > 0u) {\n         auto tys = linearize_ty_params(cx, t);\n+\n+        if (!cx.fcx.ccx.tydescs.contains_key(t)) {\n+            make_tydesc(cx.fcx.ccx, t, tys._0);\n+        }\n+\n         cx.fcx.ccx.sess.unimpl(\"derived type descriptors\");\n     }\n \n     // Otherwise, generate a tydesc if necessary, and return it.\n     if (!cx.fcx.ccx.tydescs.contains_key(t)) {\n-        make_tydesc(cx.fcx.ccx, t);\n+        let vec[ast.def_id] defs = vec();\n+        make_tydesc(cx.fcx.ccx, t, defs);\n     }\n     ret cx.fcx.ccx.tydescs.get(t);\n }\n \n-fn make_tydesc(@crate_ctxt cx, @ty.t t) {\n+fn make_tydesc(@crate_ctxt cx, @ty.t t, vec[ast.def_id] typaram_defs) {\n     auto tg = make_take_glue;\n-    auto take_glue = make_generic_glue(cx, t, \"take\", tg);\n+    auto take_glue = make_generic_glue(cx, t, \"take\", tg, typaram_defs);\n     auto dg = make_drop_glue;\n-    auto drop_glue = make_generic_glue(cx, t, \"drop\", dg);\n+    auto drop_glue = make_generic_glue(cx, t, \"drop\", dg, typaram_defs);\n \n     auto llty = type_of(cx, t);\n     auto pvoid = T_ptr(T_i8());\n@@ -993,7 +1000,8 @@ fn make_tydesc(@crate_ctxt cx, @ty.t t) {\n }\n \n fn make_generic_glue(@crate_ctxt cx, @ty.t t, str name,\n-                     val_and_ty_fn helper) -> ValueRef {\n+                     val_and_ty_fn helper,\n+                     vec[ast.def_id] typaram_defs) -> ValueRef {\n     auto llfnty = T_fn(vec(T_taskptr(),\n                            T_ptr(T_tydesc()),\n                            T_ptr(T_i8())), T_void());\n@@ -1014,6 +1022,15 @@ fn make_generic_glue(@crate_ctxt cx, @ty.t t, str name,\n             llty = type_of(cx, t);\n         }\n \n+        auto lltyparams = llvm.LLVMGetParam(llfn, 1u);\n+        auto p = 0;\n+        for (ast.def_id d in typaram_defs) {\n+            auto llparam = bcx.build.GEP(lltyparams, vec(C_int(p)));\n+            llparam = bcx.build.Load(llparam);\n+            bcx.fcx.lltydescs.insert(d, llparam);\n+            p += 1;\n+        }\n+\n         auto llrawptr = llvm.LLVMGetParam(llfn, 2u);\n         auto llval = bcx.build.BitCast(llrawptr, llty);\n "}]}