{"sha": "4da9bdc563598739100e4d73ef6e0803626311a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkYTliZGM1NjM1OTg3MzkxMDBlNGQ3M2VmNmUwODAzNjI2MzExYTc=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-08-06T19:24:16Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-08-07T18:16:02Z"}, "message": "Update librustc_borrowck error codes check", "tree": {"sha": "da418156e4092d624545d02cb6c19b842cea206f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da418156e4092d624545d02cb6c19b842cea206f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4da9bdc563598739100e4d73ef6e0803626311a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4da9bdc563598739100e4d73ef6e0803626311a7", "html_url": "https://github.com/rust-lang/rust/commit/4da9bdc563598739100e4d73ef6e0803626311a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4da9bdc563598739100e4d73ef6e0803626311a7/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "574fbbf92cd07006e2aa588ded23fc0ee5d04384", "url": "https://api.github.com/repos/rust-lang/rust/commits/574fbbf92cd07006e2aa588ded23fc0ee5d04384", "html_url": "https://github.com/rust-lang/rust/commit/574fbbf92cd07006e2aa588ded23fc0ee5d04384"}], "stats": {"total": 221, "additions": 112, "deletions": 109}, "files": [{"sha": "88f739d1c74bb24089ede620f38c6e737430238d", "filename": "src/librustc_borrowck/diagnostics.rs", "status": "modified", "additions": 109, "deletions": 108, "changes": 217, "blob_url": "https://github.com/rust-lang/rust/blob/4da9bdc563598739100e4d73ef6e0803626311a7/src%2Flibrustc_borrowck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4da9bdc563598739100e4d73ef6e0803626311a7/src%2Flibrustc_borrowck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fdiagnostics.rs?ref=4da9bdc563598739100e4d73ef6e0803626311a7", "patch": "@@ -17,7 +17,7 @@ This error occurs when an attempt is made to use data captured by a closure,\n when that data may no longer exist. It's most commonly seen when attempting to\n return a closure:\n \n-```compile_fail\n+```compile_fail,E0373\n fn foo() -> Box<Fn(u32) -> u32> {\n     let x = 0u32;\n     Box::new(|y| x + y)\n@@ -31,7 +31,7 @@ unsafe.\n \n Another situation where this might be encountered is when spawning threads:\n \n-```compile_fail\n+```compile_fail,E0373\n fn foo() {\n     let x = 0u32;\n     let y = 1u32;\n@@ -66,7 +66,7 @@ about safety.\n E0381: r##\"\n It is not allowed to use or capture an uninitialized variable. For example:\n \n-```compile_fail\n+```compile_fail,E0381\n fn main() {\n     let x: i32;\n     let y = x; // error, use of possibly uninitialized variable\n@@ -88,7 +88,7 @@ E0382: r##\"\n This error occurs when an attempt is made to use a variable after its contents\n have been moved elsewhere. For example:\n \n-```compile_fail\n+```compile_fail,E0382\n struct MyStruct { s: u32 }\n \n fn main() {\n@@ -180,8 +180,8 @@ E0384: r##\"\n This error occurs when an attempt is made to reassign an immutable variable.\n For example:\n \n-```compile_fail\n-fn main(){\n+```compile_fail,E0384\n+fn main() {\n     let x = 3;\n     x = 5; // error, reassignment of immutable variable\n }\n@@ -191,7 +191,7 @@ By default, variables in Rust are immutable. To fix this error, add the keyword\n `mut` after the keyword `let` when declaring the variable. For example:\n \n ```\n-fn main(){\n+fn main() {\n     let mut x = 3;\n     x = 5;\n }\n@@ -204,7 +204,7 @@ reference stored inside an immutable container.\n \n For example, this can happen when storing a `&mut` inside an immutable `Box`:\n \n-```compile_fail\n+```compile_fail,E0386\n let mut x: i64 = 1;\n let y: Box<_> = Box::new(&mut x);\n **y = 2; // error, cannot assign to data in an immutable container\n@@ -234,7 +234,7 @@ E0387: r##\"\n This error occurs when an attempt is made to mutate or mutably reference data\n that a closure has captured immutably. Examples of this error are shown below:\n \n-```compile_fail\n+```compile_fail,E0387\n // Accepts a function or a closure that captures its environment immutably.\n // Closures passed to foo will not be able to mutate their closed-over state.\n fn foo<F: Fn()>(f: F) { }\n@@ -317,9 +317,9 @@ mutable reference (`&(&mut T)`).\n \n Example of erroneous code:\n \n-```compile_fail\n+```compile_fail,E0389\n struct FancyNum {\n-    num: u8\n+    num: u8,\n }\n \n fn main() {\n@@ -339,7 +339,7 @@ To fix this, either remove the outer reference:\n \n ```\n struct FancyNum {\n-    num: u8\n+    num: u8,\n }\n \n fn main() {\n@@ -377,7 +377,7 @@ fn main() {\n E0499: r##\"\n A variable was borrowed as mutable more than once. Erroneous code example:\n \n-```compile_fail\n+```compile_fail,E0499\n let mut i = 0;\n let mut x = &mut i;\n let mut a = &mut i;\n@@ -462,7 +462,7 @@ capturing.\n \n Example of erroneous code:\n \n-```compile_fail\n+```compile_fail,E0501\n fn inside_closure(x: &mut i32) {\n     // Actions which require unique access\n }\n@@ -532,7 +532,7 @@ has already been borrowed as immutable.\n \n Example of erroneous code:\n \n-```compile_fail\n+```compile_fail,E0502\n fn bar(x: &mut i32) {}\n fn foo(a: &mut i32) {\n     let ref y = a; // a is borrowed as immutable.\n@@ -561,7 +561,7 @@ A value was used after it was mutably borrowed.\n \n Example of erroneous code:\n \n-```compile_fail\n+```compile_fail,E0503\n fn main() {\n     let mut value = 3;\n     // Create a mutable borrow of `value`. This borrow\n@@ -618,9 +618,9 @@ closure.\n \n Example of erroneous code:\n \n-```compile_fail\n+```compile_fail,E0504\n struct FancyNum {\n-    num: u8\n+    num: u8,\n }\n \n fn main() {\n@@ -646,7 +646,7 @@ rather than moving:\n \n ```\n struct FancyNum {\n-    num: u8\n+    num: u8,\n }\n \n fn main() {\n@@ -669,7 +669,7 @@ the borrow using a scoped block:\n \n ```\n struct FancyNum {\n-    num: u8\n+    num: u8,\n }\n \n fn main() {\n@@ -698,7 +698,7 @@ use std::sync::Arc;\n use std::thread;\n \n struct FancyNum {\n-    num: u8\n+    num: u8,\n }\n \n fn main() {\n@@ -716,14 +716,94 @@ fn main() {\n ```\n \"##,\n \n+E0505: r##\"\n+A value was moved out while it was still borrowed.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0505\n+struct Value {}\n+\n+fn eat(val: Value) {}\n+\n+fn main() {\n+    let x = Value{};\n+    {\n+        let _ref_to_val: &Value = &x;\n+        eat(x);\n+    }\n+}\n+```\n+\n+Here, the function `eat` takes the ownership of `x`. However,\n+`x` cannot be moved because it was borrowed to `_ref_to_val`.\n+To fix that you can do few different things:\n+\n+* Try to avoid moving the variable.\n+* Release borrow before move.\n+* Implement the `Copy` trait on the type.\n+\n+Examples:\n+\n+```\n+struct Value {}\n+\n+fn eat(val: &Value) {}\n+\n+fn main() {\n+    let x = Value{};\n+    {\n+        let _ref_to_val: &Value = &x;\n+        eat(&x); // pass by reference, if it's possible\n+    }\n+}\n+```\n+\n+Or:\n+\n+```\n+struct Value {}\n+\n+fn eat(val: Value) {}\n+\n+fn main() {\n+    let x = Value{};\n+    {\n+        let _ref_to_val: &Value = &x;\n+    }\n+    eat(x); // release borrow and then move it.\n+}\n+```\n+\n+Or:\n+\n+```\n+#[derive(Clone, Copy)] // implement Copy trait\n+struct Value {}\n+\n+fn eat(val: Value) {}\n+\n+fn main() {\n+    let x = Value{};\n+    {\n+        let _ref_to_val: &Value = &x;\n+        eat(x); // it will be copied here.\n+    }\n+}\n+```\n+\n+You can find more information about borrowing in the rust-book:\n+http://doc.rust-lang.org/stable/book/references-and-borrowing.html\n+\"##,\n+\n E0506: r##\"\n This error occurs when an attempt is made to assign to a borrowed value.\n \n Example of erroneous code:\n \n-```compile_fail\n+```compile_fail,E0506\n struct FancyNum {\n-    num: u8\n+    num: u8,\n }\n \n fn main() {\n@@ -743,7 +823,7 @@ Alternatively, we can move out of `fancy_num` into a second `fancy_num`:\n \n ```\n struct FancyNum {\n-    num: u8\n+    num: u8,\n }\n \n fn main() {\n@@ -760,7 +840,7 @@ a scoped block:\n \n ```\n struct FancyNum {\n-    num: u8\n+    num: u8,\n }\n \n fn main() {\n@@ -781,7 +861,7 @@ Or by moving the reference into a function:\n \n ```\n struct FancyNum {\n-    num: u8\n+    num: u8,\n }\n \n fn main() {\n@@ -800,89 +880,10 @@ fn print_fancy_ref(fancy_ref: &FancyNum){\n ```\n \"##,\n \n-E0505: r##\"\n-A value was moved out while it was still borrowed.\n-Erroneous code example:\n-\n-```compile_fail\n-struct Value {}\n-\n-fn eat(val: Value) {}\n-\n-fn main() {\n-    let x = Value{};\n-    {\n-        let _ref_to_val: &Value = &x;\n-        eat(x);\n-    }\n-}\n-```\n-\n-Here, the function `eat` takes the ownership of `x`. However,\n-`x` cannot be moved because it was borrowed to `_ref_to_val`.\n-To fix that you can do few different things:\n-\n-* Try to avoid moving the variable.\n-* Release borrow before move.\n-* Implement the `Copy` trait on the type.\n-\n-Examples:\n-\n-```\n-struct Value {}\n-\n-fn eat(val: &Value) {}\n-\n-fn main() {\n-    let x = Value{};\n-    {\n-        let _ref_to_val: &Value = &x;\n-        eat(&x); // pass by reference, if it's possible\n-    }\n-}\n-```\n-\n-Or:\n-\n-```\n-struct Value {}\n-\n-fn eat(val: Value) {}\n-\n-fn main() {\n-    let x = Value{};\n-    {\n-        let _ref_to_val: &Value = &x;\n-    }\n-    eat(x); // release borrow and then move it.\n-}\n-```\n-\n-Or:\n-\n-```\n-#[derive(Clone, Copy)] // implement Copy trait\n-struct Value {}\n-\n-fn eat(val: Value) {}\n-\n-fn main() {\n-    let x = Value{};\n-    {\n-        let _ref_to_val: &Value = &x;\n-        eat(x); // it will be copied here.\n-    }\n-}\n-```\n-\n-You can find more information about borrowing in the rust-book:\n-http://doc.rust-lang.org/stable/book/references-and-borrowing.html\n-\"##,\n-\n E0507: r##\"\n You tried to move out of a value which was borrowed. Erroneous code example:\n \n-```compile_fail\n+```compile_fail,E0507\n use std::cell::RefCell;\n \n struct TheDarkKnight;\n@@ -999,7 +1000,7 @@ A value was moved out of a non-copy fixed-size array.\n \n Example of erroneous code:\n \n-```compile_fail\n+```compile_fail,E0508\n struct NonCopy;\n \n fn main() {\n@@ -1044,7 +1045,7 @@ implements the `Drop` trait.\n \n Example of erroneous code:\n \n-```compile_fail\n+```compile_fail,E0509\n struct FancyNum {\n     num: usize\n }"}, {"sha": "5956d35d84aa62d201597edffa5c004a0fd637f5", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4da9bdc563598739100e4d73ef6e0803626311a7/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4da9bdc563598739100e4d73ef6e0803626311a7/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=4da9bdc563598739100e4d73ef6e0803626311a7", "patch": "@@ -2469,6 +2469,8 @@ extern crate collections;\n use collections::range::RangeArgument;\n \n impl<T> RangeArgument<T> for T { } // error\n+\n+fn main() {}\n ```\n \n To work around this, it can be covered with a local type, `MyType`:\n@@ -3226,7 +3228,7 @@ E0370: r##\"\n The maximum value of an enum was reached, so it cannot be automatically\n set in the next enum value. Erroneous code example:\n \n-```compile_fail,E0370\n+```compile_fail\n #[deny(overflowing_literals)]\n enum Foo {\n     X = 0x7fffffffffffffff,"}]}