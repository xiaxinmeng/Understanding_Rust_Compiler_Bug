{"sha": "d61debac64af9d9f0c18db55fe66144941aa76c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2MWRlYmFjNjRhZjlkOWYwYzE4ZGI1NWZlNjYxNDQ5NDFhYTc2Yzc=", "commit": {"author": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2020-05-01T17:49:56Z"}, "committer": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2020-05-01T17:49:56Z"}, "message": "Document unsafety for `*const T` and `*mut T`", "tree": {"sha": "8eb635b07dbd9a2650135eb7be17ff3e70057dfc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8eb635b07dbd9a2650135eb7be17ff3e70057dfc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d61debac64af9d9f0c18db55fe66144941aa76c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d61debac64af9d9f0c18db55fe66144941aa76c7", "html_url": "https://github.com/rust-lang/rust/commit/d61debac64af9d9f0c18db55fe66144941aa76c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d61debac64af9d9f0c18db55fe66144941aa76c7/comments", "author": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a91d64873f5b8daa43f0e82dedad7e2bc39e8fba", "url": "https://api.github.com/repos/rust-lang/rust/commits/a91d64873f5b8daa43f0e82dedad7e2bc39e8fba", "html_url": "https://github.com/rust-lang/rust/commit/a91d64873f5b8daa43f0e82dedad7e2bc39e8fba"}], "stats": {"total": 12, "additions": 8, "deletions": 4}, "files": [{"sha": "94ad77d1ec683defe1a130aa400fc63df2ea6118", "filename": "src/libcore/ptr/const_ptr.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d61debac64af9d9f0c18db55fe66144941aa76c7/src%2Flibcore%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d61debac64af9d9f0c18db55fe66144941aa76c7/src%2Flibcore%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr%2Fconst_ptr.rs?ref=d61debac64af9d9f0c18db55fe66144941aa76c7", "patch": "@@ -3,8 +3,6 @@ use crate::cmp::Ordering::{self, Equal, Greater, Less};\n use crate::intrinsics;\n use crate::mem;\n \n-// ignore-tidy-undocumented-unsafe\n-\n #[lang = \"const_ptr\"]\n impl<T: ?Sized> *const T {\n     /// Returns `true` if the pointer is null.\n@@ -215,6 +213,7 @@ impl<T: ?Sized> *const T {\n     where\n         T: Sized,\n     {\n+        // SAFETY: the `arith_offset` intrinsic has no prerequisites to be called.\n         unsafe { intrinsics::arith_offset(self, count) }\n     }\n \n@@ -702,6 +701,7 @@ impl<T: ?Sized> *const T {\n         if !align.is_power_of_two() {\n             panic!(\"align_offset: align is not a power-of-two\");\n         }\n+        // SAFETY: `align` has been checked to be a power of 2 above\n         unsafe { align_offset(self, align) }\n     }\n }\n@@ -729,6 +729,8 @@ impl<T> *const [T] {\n     #[unstable(feature = \"slice_ptr_len\", issue = \"71146\")]\n     #[rustc_const_unstable(feature = \"const_slice_ptr_len\", issue = \"71146\")]\n     pub const fn len(self) -> usize {\n+        // SAFETY: this is safe because `*const [T]` and `FatPtr<T>` have the same layout.\n+        // Only `std` can make this guarantee.\n         unsafe { Repr { rust: self }.raw }.len\n     }\n }"}, {"sha": "cf9e20aa56941a6f27a331610c3a59b94e645d60", "filename": "src/libcore/ptr/mut_ptr.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d61debac64af9d9f0c18db55fe66144941aa76c7/src%2Flibcore%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d61debac64af9d9f0c18db55fe66144941aa76c7/src%2Flibcore%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr%2Fmut_ptr.rs?ref=d61debac64af9d9f0c18db55fe66144941aa76c7", "patch": "@@ -2,8 +2,6 @@ use super::*;\n use crate::cmp::Ordering::{self, Equal, Greater, Less};\n use crate::intrinsics;\n \n-// ignore-tidy-undocumented-unsafe\n-\n #[lang = \"mut_ptr\"]\n impl<T: ?Sized> *mut T {\n     /// Returns `true` if the pointer is null.\n@@ -208,6 +206,7 @@ impl<T: ?Sized> *mut T {\n     where\n         T: Sized,\n     {\n+        // SAFETY: the `arith_offset` intrinsic has no prerequisites to be called.\n         unsafe { intrinsics::arith_offset(self, count) as *mut T }\n     }\n \n@@ -890,6 +889,7 @@ impl<T: ?Sized> *mut T {\n         if !align.is_power_of_two() {\n             panic!(\"align_offset: align is not a power-of-two\");\n         }\n+        // SAFETY: `align` has been checked to be a power of 2 above\n         unsafe { align_offset(self, align) }\n     }\n }\n@@ -917,6 +917,8 @@ impl<T> *mut [T] {\n     #[unstable(feature = \"slice_ptr_len\", issue = \"71146\")]\n     #[rustc_const_unstable(feature = \"const_slice_ptr_len\", issue = \"71146\")]\n     pub const fn len(self) -> usize {\n+        // SAFETY: this is safe because `*const [T]` and `FatPtr<T>` have the same layout.\n+        // Only `std` can make this guarantee.\n         unsafe { Repr { rust_mut: self }.raw }.len\n     }\n }"}]}