{"sha": "644b445428845a4e662c15059193dfa492bc0c44", "node_id": "C_kwDOAAsO6NoAKDY0NGI0NDU0Mjg4NDVhNGU2NjJjMTUwNTkxOTNkZmE0OTJiYzBjNDQ", "commit": {"author": {"name": "Stefan Lankes", "email": "slankes@eonerc.rwth-aachen.de", "date": "2021-11-24T14:59:28Z"}, "committer": {"name": "Stefan Lankes", "email": "slankes@eonerc.rwth-aachen.de", "date": "2021-11-24T14:59:28Z"}, "message": "If the thread does not get the lock in the short term, yield the CPU\n\nReduces the amount of wasted processor cycles", "tree": {"sha": "6f5938a1d2ef28506a3f4e151985c293719fddf9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6f5938a1d2ef28506a3f4e151985c293719fddf9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/644b445428845a4e662c15059193dfa492bc0c44", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/644b445428845a4e662c15059193dfa492bc0c44", "html_url": "https://github.com/rust-lang/rust/commit/644b445428845a4e662c15059193dfa492bc0c44", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/644b445428845a4e662c15059193dfa492bc0c44/comments", "author": {"login": "stlankes", "id": 5888473, "node_id": "MDQ6VXNlcjU4ODg0NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/5888473?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stlankes", "html_url": "https://github.com/stlankes", "followers_url": "https://api.github.com/users/stlankes/followers", "following_url": "https://api.github.com/users/stlankes/following{/other_user}", "gists_url": "https://api.github.com/users/stlankes/gists{/gist_id}", "starred_url": "https://api.github.com/users/stlankes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stlankes/subscriptions", "organizations_url": "https://api.github.com/users/stlankes/orgs", "repos_url": "https://api.github.com/users/stlankes/repos", "events_url": "https://api.github.com/users/stlankes/events{/privacy}", "received_events_url": "https://api.github.com/users/stlankes/received_events", "type": "User", "site_admin": false}, "committer": {"login": "stlankes", "id": 5888473, "node_id": "MDQ6VXNlcjU4ODg0NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/5888473?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stlankes", "html_url": "https://github.com/stlankes", "followers_url": "https://api.github.com/users/stlankes/followers", "following_url": "https://api.github.com/users/stlankes/following{/other_user}", "gists_url": "https://api.github.com/users/stlankes/gists{/gist_id}", "starred_url": "https://api.github.com/users/stlankes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stlankes/subscriptions", "organizations_url": "https://api.github.com/users/stlankes/orgs", "repos_url": "https://api.github.com/users/stlankes/repos", "events_url": "https://api.github.com/users/stlankes/events{/privacy}", "received_events_url": "https://api.github.com/users/stlankes/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "982c552c908d179eaa38b6ef152ad3fa30268778", "url": "https://api.github.com/repos/rust-lang/rust/commits/982c552c908d179eaa38b6ef152ad3fa30268778", "html_url": "https://github.com/rust-lang/rust/commit/982c552c908d179eaa38b6ef152ad3fa30268778"}], "stats": {"total": 11, "additions": 10, "deletions": 1}, "files": [{"sha": "79692ef2442ca0f052efb7d873b730df3a9673e4", "filename": "library/std/src/sys/hermit/mutex.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/644b445428845a4e662c15059193dfa492bc0c44/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/644b445428845a4e662c15059193dfa492bc0c44/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fmutex.rs?ref=644b445428845a4e662c15059193dfa492bc0c44", "patch": "@@ -46,8 +46,17 @@ impl<T> Spinlock<T> {\n     #[inline]\n     fn obtain_lock(&self) {\n         let ticket = self.queue.fetch_add(1, Ordering::SeqCst) + 1;\n+        let mut counter: u16 = 0;\n         while self.dequeue.load(Ordering::SeqCst) != ticket {\n-            hint::spin_loop();\n+            counter = counter + 1;\n+            if counter < 100 {\n+                hint::spin_loop();\n+            } else {\n+                counter = 0;\n+                unsafe {\n+                    abi::yield_now();\n+                }\n+            }\n         }\n     }\n "}]}