{"sha": "18717ae088a3b956baaf60942028ea1336d1bfef", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4NzE3YWUwODhhM2I5NTZiYWFmNjA5NDIwMjhlYTEzMzZkMWJmZWY=", "commit": {"author": {"name": "Cameron Steffen", "email": "CSteffen@trustwave.com", "date": "2017-10-10T04:00:47Z"}, "committer": {"name": "Cameron Steffen", "email": "CSteffen@trustwave.com", "date": "2017-10-10T04:37:46Z"}, "message": "move single_char_pattern tests", "tree": {"sha": "c1a8e99f0210ae7501216bbb33cded8bfbd9b56e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c1a8e99f0210ae7501216bbb33cded8bfbd9b56e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/18717ae088a3b956baaf60942028ea1336d1bfef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/18717ae088a3b956baaf60942028ea1336d1bfef", "html_url": "https://github.com/rust-lang/rust/commit/18717ae088a3b956baaf60942028ea1336d1bfef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/18717ae088a3b956baaf60942028ea1336d1bfef/comments", "author": null, "committer": null, "parents": [{"sha": "c1a147f48ebf4c53cfc46fc9674d01e61824b4ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1a147f48ebf4c53cfc46fc9674d01e61824b4ad", "html_url": "https://github.com/rust-lang/rust/commit/c1a147f48ebf4c53cfc46fc9674d01e61824b4ad"}], "stats": {"total": 301, "additions": 151, "deletions": 150}, "files": [{"sha": "4769906e2ff578fd9c7c3fb7c186b00ee145000d", "filename": "tests/ui/methods.rs", "status": "modified", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/18717ae088a3b956baaf60942028ea1336d1bfef/tests%2Fui%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18717ae088a3b956baaf60942028ea1336d1bfef/tests%2Fui%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.rs?ref=18717ae088a3b956baaf60942028ea1336d1bfef", "patch": "@@ -498,46 +498,6 @@ fn clone_on_double_ref() {\n     println!(\"{:p} {:p}\",*y, z);\n }\n \n-fn single_char_pattern() {\n-    let x = \"foo\";\n-    x.split(\"x\");\n-    x.split(\"xx\");\n-    x.split('x');\n-\n-    let y = \"x\";\n-    x.split(y);\n-    // Not yet testing for multi-byte characters\n-    // Changing `r.len() == 1` to `r.chars().count() == 1` in `lint_single_char_pattern`\n-    // should have done this but produced an ICE\n-    //\n-    // We may not want to suggest changing these anyway\n-    // See: https://github.com/rust-lang-nursery/rust-clippy/issues/650#issuecomment-184328984\n-    x.split(\"\u00df\");\n-    x.split(\"\u211d\");\n-    x.split(\"\ud83d\udca3\");\n-    // Can't use this lint for unicode code points which don't fit in a char\n-    x.split(\"\u2764\ufe0f\");\n-    x.contains(\"x\");\n-    x.starts_with(\"x\");\n-    x.ends_with(\"x\");\n-    x.find(\"x\");\n-    x.rfind(\"x\");\n-    x.rsplit(\"x\");\n-    x.split_terminator(\"x\");\n-    x.rsplit_terminator(\"x\");\n-    x.splitn(0, \"x\");\n-    x.rsplitn(0, \"x\");\n-    x.matches(\"x\");\n-    x.rmatches(\"x\");\n-    x.match_indices(\"x\");\n-    x.rmatch_indices(\"x\");\n-    x.trim_left_matches(\"x\");\n-    x.trim_right_matches(\"x\");\n-\n-    let h = HashSet::<String>::new();\n-    h.contains(\"X\"); // should not warn\n-}\n-\n #[allow(result_unwrap_used)]\n fn temporary_cstring() {\n     use std::ffi::CString;"}, {"sha": "2500c30b402dd7b1e984ba8977954d1443c012cb", "filename": "tests/ui/methods.stderr", "status": "modified", "additions": 6, "deletions": 110, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/18717ae088a3b956baaf60942028ea1336d1bfef/tests%2Fui%2Fmethods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/18717ae088a3b956baaf60942028ea1336d1bfef/tests%2Fui%2Fmethods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.stderr?ref=18717ae088a3b956baaf60942028ea1336d1bfef", "patch": "@@ -627,128 +627,24 @@ error: using `clone` on a double-reference; this will copy the reference instead\n     |\n     = note: `-D clone-double-ref` implied by `-D warnings`\n \n-error: single-character string constant used as pattern\n-   --> $DIR/methods.rs:503:13\n-    |\n-503 |     x.split(\"x\");\n-    |     --------^^^- help: try using a char instead: `x.split('x')`\n-    |\n-    = note: `-D single-char-pattern` implied by `-D warnings`\n-\n-error: single-character string constant used as pattern\n-   --> $DIR/methods.rs:520:16\n-    |\n-520 |     x.contains(\"x\");\n-    |     -----------^^^- help: try using a char instead: `x.contains('x')`\n-\n-error: single-character string constant used as pattern\n-   --> $DIR/methods.rs:521:19\n-    |\n-521 |     x.starts_with(\"x\");\n-    |     --------------^^^- help: try using a char instead: `x.starts_with('x')`\n-\n-error: single-character string constant used as pattern\n-   --> $DIR/methods.rs:522:17\n-    |\n-522 |     x.ends_with(\"x\");\n-    |     ------------^^^- help: try using a char instead: `x.ends_with('x')`\n-\n-error: single-character string constant used as pattern\n-   --> $DIR/methods.rs:523:12\n-    |\n-523 |     x.find(\"x\");\n-    |     -------^^^- help: try using a char instead: `x.find('x')`\n-\n-error: single-character string constant used as pattern\n-   --> $DIR/methods.rs:524:13\n-    |\n-524 |     x.rfind(\"x\");\n-    |     --------^^^- help: try using a char instead: `x.rfind('x')`\n-\n-error: single-character string constant used as pattern\n-   --> $DIR/methods.rs:525:14\n-    |\n-525 |     x.rsplit(\"x\");\n-    |     ---------^^^- help: try using a char instead: `x.rsplit('x')`\n-\n-error: single-character string constant used as pattern\n-   --> $DIR/methods.rs:526:24\n-    |\n-526 |     x.split_terminator(\"x\");\n-    |     -------------------^^^- help: try using a char instead: `x.split_terminator('x')`\n-\n-error: single-character string constant used as pattern\n-   --> $DIR/methods.rs:527:25\n-    |\n-527 |     x.rsplit_terminator(\"x\");\n-    |     --------------------^^^- help: try using a char instead: `x.rsplit_terminator('x')`\n-\n-error: single-character string constant used as pattern\n-   --> $DIR/methods.rs:528:17\n-    |\n-528 |     x.splitn(0, \"x\");\n-    |     ------------^^^- help: try using a char instead: `x.splitn(0, 'x')`\n-\n-error: single-character string constant used as pattern\n-   --> $DIR/methods.rs:529:18\n-    |\n-529 |     x.rsplitn(0, \"x\");\n-    |     -------------^^^- help: try using a char instead: `x.rsplitn(0, 'x')`\n-\n-error: single-character string constant used as pattern\n-   --> $DIR/methods.rs:530:15\n-    |\n-530 |     x.matches(\"x\");\n-    |     ----------^^^- help: try using a char instead: `x.matches('x')`\n-\n-error: single-character string constant used as pattern\n-   --> $DIR/methods.rs:531:16\n-    |\n-531 |     x.rmatches(\"x\");\n-    |     -----------^^^- help: try using a char instead: `x.rmatches('x')`\n-\n-error: single-character string constant used as pattern\n-   --> $DIR/methods.rs:532:21\n-    |\n-532 |     x.match_indices(\"x\");\n-    |     ----------------^^^- help: try using a char instead: `x.match_indices('x')`\n-\n-error: single-character string constant used as pattern\n-   --> $DIR/methods.rs:533:22\n-    |\n-533 |     x.rmatch_indices(\"x\");\n-    |     -----------------^^^- help: try using a char instead: `x.rmatch_indices('x')`\n-\n-error: single-character string constant used as pattern\n-   --> $DIR/methods.rs:534:25\n-    |\n-534 |     x.trim_left_matches(\"x\");\n-    |     --------------------^^^- help: try using a char instead: `x.trim_left_matches('x')`\n-\n-error: single-character string constant used as pattern\n-   --> $DIR/methods.rs:535:26\n-    |\n-535 |     x.trim_right_matches(\"x\");\n-    |     ---------------------^^^- help: try using a char instead: `x.trim_right_matches('x')`\n-\n error: you are getting the inner pointer of a temporary `CString`\n-   --> $DIR/methods.rs:545:5\n+   --> $DIR/methods.rs:505:5\n     |\n-545 |     CString::new(\"foo\").unwrap().as_ptr();\n+505 |     CString::new(\"foo\").unwrap().as_ptr();\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = note: `-D temporary-cstring-as-ptr` implied by `-D warnings`\n     = note: that pointer will be invalid outside this expression\n help: assign the `CString` to a variable to extend its lifetime\n-   --> $DIR/methods.rs:545:5\n+   --> $DIR/methods.rs:505:5\n     |\n-545 |     CString::new(\"foo\").unwrap().as_ptr();\n+505 |     CString::new(\"foo\").unwrap().as_ptr();\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `cloned().collect()` on a slice to create a `Vec`. Calling `to_vec()` is both faster and more readable\n-   --> $DIR/methods.rs:550:27\n+   --> $DIR/methods.rs:510:27\n     |\n-550 |     let v2 : Vec<isize> = v.iter().cloned().collect();\n+510 |     let v2 : Vec<isize> = v.iter().cloned().collect();\n     |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = note: `-D iter-cloned-collect` implied by `-D warnings`"}, {"sha": "948a8ff0e41e6e5f32177a1d190c4b13bcd0230c", "filename": "tests/ui/single_char_pattern.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/18717ae088a3b956baaf60942028ea1336d1bfef/tests%2Fui%2Fsingle_char_pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18717ae088a3b956baaf60942028ea1336d1bfef/tests%2Fui%2Fsingle_char_pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_char_pattern.rs?ref=18717ae088a3b956baaf60942028ea1336d1bfef", "patch": "@@ -0,0 +1,41 @@\n+use std::collections::HashSet;\n+\n+fn main() {\n+    let x = \"foo\";\n+    x.split(\"x\");\n+    x.split(\"xx\");\n+    x.split('x');\n+\n+    let y = \"x\";\n+    x.split(y);\n+    // Not yet testing for multi-byte characters\n+    // Changing `r.len() == 1` to `r.chars().count() == 1` in `lint_single_char_pattern`\n+    // should have done this but produced an ICE\n+    //\n+    // We may not want to suggest changing these anyway\n+    // See: https://github.com/rust-lang-nursery/rust-clippy/issues/650#issuecomment-184328984\n+    x.split(\"\u00df\");\n+    x.split(\"\u211d\");\n+    x.split(\"\ud83d\udca3\");\n+    // Can't use this lint for unicode code points which don't fit in a char\n+    x.split(\"\u2764\ufe0f\");\n+    x.contains(\"x\");\n+    x.starts_with(\"x\");\n+    x.ends_with(\"x\");\n+    x.find(\"x\");\n+    x.rfind(\"x\");\n+    x.rsplit(\"x\");\n+    x.split_terminator(\"x\");\n+    x.rsplit_terminator(\"x\");\n+    x.splitn(0, \"x\");\n+    x.rsplitn(0, \"x\");\n+    x.matches(\"x\");\n+    x.rmatches(\"x\");\n+    x.match_indices(\"x\");\n+    x.rmatch_indices(\"x\");\n+    x.trim_left_matches(\"x\");\n+    x.trim_right_matches(\"x\");\n+\n+    let h = HashSet::<String>::new();\n+    h.contains(\"X\"); // should not warn\n+}"}, {"sha": "d5f21f210a3b20aba253bfb696c1abfdfa56103a", "filename": "tests/ui/single_char_pattern.stderr", "status": "added", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/18717ae088a3b956baaf60942028ea1336d1bfef/tests%2Fui%2Fsingle_char_pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/18717ae088a3b956baaf60942028ea1336d1bfef/tests%2Fui%2Fsingle_char_pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_char_pattern.stderr?ref=18717ae088a3b956baaf60942028ea1336d1bfef", "patch": "@@ -0,0 +1,104 @@\n+error: single-character string constant used as pattern\n+ --> $DIR/single_char_pattern.rs:5:13\n+  |\n+5 |     x.split(\"x\");\n+  |     --------^^^- help: try using a char instead: `x.split('x')`\n+  |\n+  = note: `-D single-char-pattern` implied by `-D warnings`\n+\n+error: single-character string constant used as pattern\n+  --> $DIR/single_char_pattern.rs:22:16\n+   |\n+22 |     x.contains(\"x\");\n+   |     -----------^^^- help: try using a char instead: `x.contains('x')`\n+\n+error: single-character string constant used as pattern\n+  --> $DIR/single_char_pattern.rs:23:19\n+   |\n+23 |     x.starts_with(\"x\");\n+   |     --------------^^^- help: try using a char instead: `x.starts_with('x')`\n+\n+error: single-character string constant used as pattern\n+  --> $DIR/single_char_pattern.rs:24:17\n+   |\n+24 |     x.ends_with(\"x\");\n+   |     ------------^^^- help: try using a char instead: `x.ends_with('x')`\n+\n+error: single-character string constant used as pattern\n+  --> $DIR/single_char_pattern.rs:25:12\n+   |\n+25 |     x.find(\"x\");\n+   |     -------^^^- help: try using a char instead: `x.find('x')`\n+\n+error: single-character string constant used as pattern\n+  --> $DIR/single_char_pattern.rs:26:13\n+   |\n+26 |     x.rfind(\"x\");\n+   |     --------^^^- help: try using a char instead: `x.rfind('x')`\n+\n+error: single-character string constant used as pattern\n+  --> $DIR/single_char_pattern.rs:27:14\n+   |\n+27 |     x.rsplit(\"x\");\n+   |     ---------^^^- help: try using a char instead: `x.rsplit('x')`\n+\n+error: single-character string constant used as pattern\n+  --> $DIR/single_char_pattern.rs:28:24\n+   |\n+28 |     x.split_terminator(\"x\");\n+   |     -------------------^^^- help: try using a char instead: `x.split_terminator('x')`\n+\n+error: single-character string constant used as pattern\n+  --> $DIR/single_char_pattern.rs:29:25\n+   |\n+29 |     x.rsplit_terminator(\"x\");\n+   |     --------------------^^^- help: try using a char instead: `x.rsplit_terminator('x')`\n+\n+error: single-character string constant used as pattern\n+  --> $DIR/single_char_pattern.rs:30:17\n+   |\n+30 |     x.splitn(0, \"x\");\n+   |     ------------^^^- help: try using a char instead: `x.splitn(0, 'x')`\n+\n+error: single-character string constant used as pattern\n+  --> $DIR/single_char_pattern.rs:31:18\n+   |\n+31 |     x.rsplitn(0, \"x\");\n+   |     -------------^^^- help: try using a char instead: `x.rsplitn(0, 'x')`\n+\n+error: single-character string constant used as pattern\n+  --> $DIR/single_char_pattern.rs:32:15\n+   |\n+32 |     x.matches(\"x\");\n+   |     ----------^^^- help: try using a char instead: `x.matches('x')`\n+\n+error: single-character string constant used as pattern\n+  --> $DIR/single_char_pattern.rs:33:16\n+   |\n+33 |     x.rmatches(\"x\");\n+   |     -----------^^^- help: try using a char instead: `x.rmatches('x')`\n+\n+error: single-character string constant used as pattern\n+  --> $DIR/single_char_pattern.rs:34:21\n+   |\n+34 |     x.match_indices(\"x\");\n+   |     ----------------^^^- help: try using a char instead: `x.match_indices('x')`\n+\n+error: single-character string constant used as pattern\n+  --> $DIR/single_char_pattern.rs:35:22\n+   |\n+35 |     x.rmatch_indices(\"x\");\n+   |     -----------------^^^- help: try using a char instead: `x.rmatch_indices('x')`\n+\n+error: single-character string constant used as pattern\n+  --> $DIR/single_char_pattern.rs:36:25\n+   |\n+36 |     x.trim_left_matches(\"x\");\n+   |     --------------------^^^- help: try using a char instead: `x.trim_left_matches('x')`\n+\n+error: single-character string constant used as pattern\n+  --> $DIR/single_char_pattern.rs:37:26\n+   |\n+37 |     x.trim_right_matches(\"x\");\n+   |     ---------------------^^^- help: try using a char instead: `x.trim_right_matches('x')`\n+"}]}