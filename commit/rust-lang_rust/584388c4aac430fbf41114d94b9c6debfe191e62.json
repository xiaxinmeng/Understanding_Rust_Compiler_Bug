{"sha": "584388c4aac430fbf41114d94b9c6debfe191e62", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4NDM4OGM0YWFjNDMwZmJmNDExMTRkOTRiOWM2ZGViZmUxOTFlNjI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-22T18:40:50Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-22T23:40:52Z"}, "message": "builtin_attrs.rs: cleanup with `(un)gated!`.", "tree": {"sha": "7d81813738cd5da5a1bc7feeb8cd5397d8d6a386", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d81813738cd5da5a1bc7feeb8cd5397d8d6a386"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/584388c4aac430fbf41114d94b9c6debfe191e62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/584388c4aac430fbf41114d94b9c6debfe191e62", "html_url": "https://github.com/rust-lang/rust/commit/584388c4aac430fbf41114d94b9c6debfe191e62", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/584388c4aac430fbf41114d94b9c6debfe191e62/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d19d1d7752bfed460bf7899171865441d6a2d87", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d19d1d7752bfed460bf7899171865441d6a2d87", "html_url": "https://github.com/rust-lang/rust/commit/0d19d1d7752bfed460bf7899171865441d6a2d87"}], "stats": {"total": 517, "additions": 229, "deletions": 288}, "files": [{"sha": "3188e92ed78d5ec7899a4c7f2e9946e1aec69312", "filename": "src/libsyntax/feature_gate/builtin_attrs.rs", "status": "modified", "additions": 229, "deletions": 288, "changes": 517, "blob_url": "https://github.com/rust-lang/rust/blob/584388c4aac430fbf41114d94b9c6debfe191e62/src%2Flibsyntax%2Ffeature_gate%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/584388c4aac430fbf41114d94b9c6debfe191e62/src%2Flibsyntax%2Ffeature_gate%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Fbuiltin_attrs.rs?ref=584388c4aac430fbf41114d94b9c6debfe191e62", "patch": "@@ -128,17 +128,32 @@ macro_rules! template {\n     } };\n }\n \n+macro_rules! ungated {\n+    ($attr:ident, $typ:expr, $tpl:expr $(,)?) => {\n+        (sym::$attr, $typ, $tpl, Ungated)\n+    };\n+}\n+\n+macro_rules! gated {\n+    ($attr:ident, $typ:expr, $tpl:expr, $gate:ident, $msg:expr $(,)?) => {\n+        (sym::$attr, $typ, $tpl, Gated(Stability::Unstable, sym::$gate, $msg, cfg_fn!($gate)))\n+    };\n+    ($attr:ident, $typ:expr, $tpl:expr, $msg:expr $(,)?) => {\n+        (sym::$attr, $typ, $tpl, Gated(Stability::Unstable, sym::$attr, $msg, cfg_fn!($attr)))\n+    };\n+}\n+\n macro_rules! rustc_attr {\n-    (TEST, $gate:ident, $typ:expr, $tpl:expr $(,)?) => {\n+    (TEST, $attr:ident, $typ:expr, $tpl:expr $(,)?) => {\n         rustc_attr!(\n-            $gate, $typ, $tpl,\n-            concat!(\"the `#[\", stringify!($gate), \"]` attribute is just used for rustc unit tests \\\n+            $attr, $typ, $tpl,\n+            concat!(\"the `#[\", stringify!($attr), \"]` attribute is just used for rustc unit tests \\\n                 and will never be stable\",\n             ),\n         )\n     };\n-    ($gate:ident, $typ:expr, $tpl:expr, $msg:expr $(,)?) => {\n-        (sym::$gate, $typ, $tpl,\n+    ($attr:ident, $typ:expr, $tpl:expr, $msg:expr $(,)?) => {\n+        (sym::$attr, $typ, $tpl,\n          Gated(Stability::Unstable, sym::rustc_attrs, $msg, cfg_fn!(rustc_attrs)))\n     };\n }\n@@ -149,145 +164,106 @@ pub type BuiltinAttribute = (Symbol, AttributeType, AttributeTemplate, Attribute\n pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n     // Normal attributes\n \n-    (\n-        sym::warn,\n-        Normal,\n-        template!(List: r#\"lint1, lint2, ..., /*opt*/ reason = \"...\"\"#),\n-        Ungated\n-    ),\n-    (\n-        sym::allow,\n-        Normal,\n-        template!(List: r#\"lint1, lint2, ..., /*opt*/ reason = \"...\"\"#),\n-        Ungated\n+    ungated!(warn, Normal, template!(List: r#\"lint1, lint2, ..., /*opt*/ reason = \"...\"\"#)),\n+    ungated!(allow, Normal, template!(List: r#\"lint1, lint2, ..., /*opt*/ reason = \"...\"\"#)),\n+    ungated!(forbid, Normal, template!(List: r#\"lint1, lint2, ..., /*opt*/ reason = \"...\"\"#)),\n+    ungated!(deny, Normal, template!(List: r#\"lint1, lint2, ..., /*opt*/ reason = \"...\"\"#)),\n+\n+    ungated!(macro_use, Normal, template!(Word, List: \"name1, name2, ...\")),\n+    ungated!(macro_export, Normal, template!(Word, List: \"local_inner_macros\")),\n+    ungated!(plugin_registrar, Normal, template!(Word)),\n+\n+    ungated!(cfg, Normal, template!(List: \"predicate\")),\n+    ungated!(cfg_attr, Normal, template!(List: \"predicate, attr1, attr2, ...\")),\n+    ungated!(main, Normal, template!(Word)),\n+    ungated!(start, Normal, template!(Word)),\n+    ungated!(repr, Normal, template!(List: \"C, packed, ...\")),\n+    ungated!(path, Normal, template!(NameValueStr: \"file\")),\n+    ungated!(automatically_derived, Normal, template!(Word)),\n+    ungated!(no_mangle, Whitelisted, template!(Word)),\n+    ungated!(no_link, Normal, template!(Word)),\n+    ungated!(derive, Normal, template!(List: \"Trait1, Trait2, ...\")),\n+    ungated!(\n+        should_panic, Normal,\n+        template!(Word, List: r#\"expected = \"reason\"#, NameValueStr: \"reason\"),\n     ),\n-    (\n-        sym::forbid,\n-        Normal,\n-        template!(List: r#\"lint1, lint2, ..., /*opt*/ reason = \"...\"\"#),\n-        Ungated\n+    ungated!(ignore, Normal, template!(Word, NameValueStr: \"reason\")),\n+    ungated!(no_implicit_prelude, Normal, template!(Word)),\n+    ungated!(reexport_test_harness_main, Normal, template!(NameValueStr: \"name\")),\n+    gated!(\n+        link_args, Normal, template!(NameValueStr: \"args\"),\n+        \"the `link_args` attribute is experimental and not portable across platforms, \\\n+        it is recommended to use `#[link(name = \\\"foo\\\")] instead\",\n     ),\n-    (\n-        sym::deny,\n-        Normal,\n-        template!(List: r#\"lint1, lint2, ..., /*opt*/ reason = \"...\"\"#),\n-        Ungated\n-    ),\n-\n-    (sym::macro_use, Normal, template!(Word, List: \"name1, name2, ...\"), Ungated),\n-    (sym::macro_export, Normal, template!(Word, List: \"local_inner_macros\"), Ungated),\n-    (sym::plugin_registrar, Normal, template!(Word), Ungated),\n-\n-    (sym::cfg, Normal, template!(List: \"predicate\"), Ungated),\n-    (sym::cfg_attr, Normal, template!(List: \"predicate, attr1, attr2, ...\"), Ungated),\n-    (sym::main, Normal, template!(Word), Ungated),\n-    (sym::start, Normal, template!(Word), Ungated),\n-    (sym::repr, Normal, template!(List: \"C, packed, ...\"), Ungated),\n-    (sym::path, Normal, template!(NameValueStr: \"file\"), Ungated),\n-    (sym::automatically_derived, Normal, template!(Word), Ungated),\n-    (sym::no_mangle, Whitelisted, template!(Word), Ungated),\n-    (sym::no_link, Normal, template!(Word), Ungated),\n-    (sym::derive, Normal, template!(List: \"Trait1, Trait2, ...\"), Ungated),\n-    (\n-        sym::should_panic,\n-        Normal,\n-        template!(Word, List: r#\"expected = \"reason\"#, NameValueStr: \"reason\"),\n-        Ungated\n-    ),\n-    (sym::ignore, Normal, template!(Word, NameValueStr: \"reason\"), Ungated),\n-    (sym::no_implicit_prelude, Normal, template!(Word), Ungated),\n-    (sym::reexport_test_harness_main, Normal, template!(NameValueStr: \"name\"), Ungated),\n-    (sym::link_args, Normal, template!(NameValueStr: \"args\"), Gated(Stability::Unstable,\n-                                sym::link_args,\n-                                \"the `link_args` attribute is experimental and not \\\n-                                portable across platforms, it is recommended to \\\n-                                use `#[link(name = \\\"foo\\\")] instead\",\n-                                cfg_fn!(link_args))),\n-    (sym::macro_escape, Normal, template!(Word), Ungated),\n+    ungated!(macro_escape, Normal, template!(Word)),\n \n     // RFC #1445.\n-    (sym::structural_match, Whitelisted, template!(Word), Gated(Stability::Unstable,\n-                                            sym::structural_match,\n-                                            \"the semantics of constant patterns is \\\n-                                            not yet settled\",\n-                                            cfg_fn!(structural_match))),\n+    gated!(\n+        structural_match, Whitelisted, template!(Word),\n+        \"the semantics of constant patterns is not yet settled\",\n+    ),\n \n     // RFC #2008\n-    (sym::non_exhaustive, Whitelisted, template!(Word), Gated(Stability::Unstable,\n-                                        sym::non_exhaustive,\n-                                        \"non exhaustive is an experimental feature\",\n-                                        cfg_fn!(non_exhaustive))),\n+    gated!(\n+        non_exhaustive, Whitelisted, template!(Word),\n+        \"non exhaustive is an experimental feature\",\n+    ),\n \n     // RFC #1268\n-    (sym::marker, Normal, template!(Word), Gated(Stability::Unstable,\n-                            sym::marker_trait_attr,\n-                            \"marker traits is an experimental feature\",\n-                            cfg_fn!(marker_trait_attr))),\n-\n-    (sym::plugin, CrateLevel, template!(List: \"name|name(args)\"), Gated(Stability::Unstable,\n-                                sym::plugin,\n-                                \"compiler plugins are experimental \\\n-                                and possibly buggy\",\n-                                cfg_fn!(plugin))),\n-\n-    (sym::no_std, CrateLevel, template!(Word), Ungated),\n-    (sym::no_core, CrateLevel, template!(Word), Gated(Stability::Unstable,\n-                                sym::no_core,\n-                                \"no_core is experimental\",\n-                                cfg_fn!(no_core))),\n-    (sym::lang, Normal, template!(NameValueStr: \"name\"), Gated(Stability::Unstable,\n-                        sym::lang_items,\n-                        \"language items are subject to change\",\n-                        cfg_fn!(lang_items))),\n-    (sym::linkage, Whitelisted, template!(NameValueStr: \"external|internal|...\"),\n-                                Gated(Stability::Unstable,\n-                                sym::linkage,\n-                                \"the `linkage` attribute is experimental \\\n-                                    and not portable across platforms\",\n-                                cfg_fn!(linkage))),\n-    (sym::thread_local, Whitelisted, template!(Word), Gated(Stability::Unstable,\n-                                        sym::thread_local,\n-                                        \"`#[thread_local]` is an experimental feature, and does \\\n-                                         not currently handle destructors\",\n-                                        cfg_fn!(thread_local))),\n-\n-    (sym::rustc_on_unimplemented, Whitelisted, template!(List:\n-                        r#\"/*opt*/ message = \"...\", /*opt*/ label = \"...\", /*opt*/ note = \"...\"\"#,\n-                        NameValueStr: \"message\"),\n-                                            Gated(Stability::Unstable,\n-                                            sym::on_unimplemented,\n-                                            \"the `#[rustc_on_unimplemented]` attribute \\\n-                                            is an experimental feature\",\n-                                            cfg_fn!(on_unimplemented))),\n-    (sym::rustc_const_unstable, Normal, template!(List: r#\"feature = \"name\"\"#),\n-                                            Gated(Stability::Unstable,\n-                                            sym::rustc_const_unstable,\n-                                            \"the `#[rustc_const_unstable]` attribute \\\n-                                            is an internal feature\",\n-                                            cfg_fn!(rustc_const_unstable))),\n-    (sym::default_lib_allocator, Whitelisted, template!(Word), Gated(Stability::Unstable,\n-                                            sym::allocator_internals,\n-                                            \"the `#[default_lib_allocator]` \\\n-                                            attribute is an experimental feature\",\n-                                            cfg_fn!(allocator_internals))),\n-    (sym::needs_allocator, Normal, template!(Word), Gated(Stability::Unstable,\n-                                    sym::allocator_internals,\n-                                    \"the `#[needs_allocator]` \\\n-                                    attribute is an experimental \\\n-                                    feature\",\n-                                    cfg_fn!(allocator_internals))),\n-    (sym::panic_runtime, Whitelisted, template!(Word), Gated(Stability::Unstable,\n-                                        sym::panic_runtime,\n-                                        \"the `#[panic_runtime]` attribute is \\\n-                                        an experimental feature\",\n-                                        cfg_fn!(panic_runtime))),\n-    (sym::needs_panic_runtime, Whitelisted, template!(Word), Gated(Stability::Unstable,\n-                                            sym::needs_panic_runtime,\n-                                            \"the `#[needs_panic_runtime]` \\\n-                                                attribute is an experimental \\\n-                                                feature\",\n-                                            cfg_fn!(needs_panic_runtime))),\n+    gated!(\n+        marker, Normal, template!(Word), marker_trait_attr,\n+        \"marker traits is an experimental feature\",\n+    ),\n+\n+    gated!(\n+        plugin, CrateLevel, template!(List: \"name|name(args)\"),\n+        \"compiler plugins are experimental and possibly buggy\",\n+    ),\n+\n+    ungated!(no_std, CrateLevel, template!(Word)),\n+    gated!(no_core, CrateLevel, template!(Word), \"no_core is experimental\"),\n+    gated!(\n+        lang, Normal, template!(NameValueStr: \"name\"), lang_items,\n+        \"language items are subject to change\",\n+    ),\n+    gated!(\n+        linkage, Whitelisted, template!(NameValueStr: \"external|internal|...\"),\n+        \"the `linkage` attribute is experimental and not portable across platforms\",\n+    ),\n+    gated!(\n+        thread_local, Whitelisted, template!(Word),\n+        \"`#[thread_local]` is an experimental feature, and does not currently handle destructors\",\n+    ),\n \n+    gated!(\n+        rustc_on_unimplemented, Whitelisted,\n+        template!(\n+            List: r#\"/*opt*/ message = \"...\", /*opt*/ label = \"...\", /*opt*/ note = \"...\"\"#,\n+            NameValueStr: \"message\"\n+        ),\n+        on_unimplemented,\n+        \"the `#[rustc_on_unimplemented]` attribute is an experimental feature\",\n+    ),\n+    gated!(\n+        rustc_const_unstable, Normal, template!(List: r#\"feature = \"name\"\"#),\n+        \"the `#[rustc_const_unstable]` attribute is an internal feature\",\n+    ),\n+    gated!(\n+        default_lib_allocator, Whitelisted, template!(Word), allocator_internals,\n+        \"the `#[default_lib_allocator]` attribute is an experimental feature\",\n+    ),\n+    gated!(\n+        needs_allocator, Normal, template!(Word), allocator_internals,\n+        \"the `#[needs_allocator]` attribute is an experimental feature\",\n+    ),\n+    gated!(\n+        panic_runtime, Whitelisted, template!(Word),\n+        \"the `#[panic_runtime]` attribute is an experimental feature\",\n+    ),\n+    gated!(\n+        needs_panic_runtime, Whitelisted, template!(Word),\n+        \"the `#[needs_panic_runtime]` attribute is an experimental feature\",\n+    ),\n     rustc_attr!(TEST, rustc_outlives, Normal, template!(Word)),\n     rustc_attr!(TEST, rustc_variance, Normal, template!(Word)),\n     rustc_attr!(TEST, rustc_layout, Normal, template!(List: \"field1, field2, ...\")),\n@@ -359,47 +335,38 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n         template!(NameValueStr: \"transparent|semitransparent|opaque\"),\n         \"used internally for testing macro hygiene\",\n     ),\n-    (sym::compiler_builtins, Whitelisted, template!(Word), Gated(Stability::Unstable,\n-                                            sym::compiler_builtins,\n-                                            \"the `#[compiler_builtins]` attribute is used to \\\n-                                            identify the `compiler_builtins` crate which \\\n-                                            contains compiler-rt intrinsics and will never be \\\n-                                            stable\",\n-                                        cfg_fn!(compiler_builtins))),\n-    (sym::sanitizer_runtime, Whitelisted, template!(Word), Gated(Stability::Unstable,\n-                                            sym::sanitizer_runtime,\n-                                            \"the `#[sanitizer_runtime]` attribute is used to \\\n-                                            identify crates that contain the runtime of a \\\n-                                            sanitizer and will never be stable\",\n-                                            cfg_fn!(sanitizer_runtime))),\n-    (sym::profiler_runtime, Whitelisted, template!(Word), Gated(Stability::Unstable,\n-                                            sym::profiler_runtime,\n-                                            \"the `#[profiler_runtime]` attribute is used to \\\n-                                            identify the `profiler_builtins` crate which \\\n-                                            contains the profiler runtime and will never be \\\n-                                            stable\",\n-                                            cfg_fn!(profiler_runtime))),\n-\n-    (sym::allow_internal_unstable, Normal, template!(Word, List: \"feat1, feat2, ...\"),\n-                                            Gated(Stability::Unstable,\n-                                            sym::allow_internal_unstable,\n-                                            EXPLAIN_ALLOW_INTERNAL_UNSTABLE,\n-                                            cfg_fn!(allow_internal_unstable))),\n-\n-    (sym::allow_internal_unsafe, Normal, template!(Word), Gated(Stability::Unstable,\n-                                            sym::allow_internal_unsafe,\n-                                            EXPLAIN_ALLOW_INTERNAL_UNSAFE,\n-                                            cfg_fn!(allow_internal_unsafe))),\n-\n-    (sym::fundamental, Whitelisted, template!(Word), Gated(Stability::Unstable,\n-                                    sym::fundamental,\n-                                    \"the `#[fundamental]` attribute \\\n-                                        is an experimental feature\",\n-                                    cfg_fn!(fundamental))),\n-\n-    (sym::proc_macro_derive, Normal, template!(List: \"TraitName, \\\n-                                                /*opt*/ attributes(name1, name2, ...)\"),\n-                                    Ungated),\n+\n+    gated!(\n+        compiler_builtins, Whitelisted, template!(Word),\n+        \"the `#[compiler_builtins]` attribute is used to identify the `compiler_builtins` crate \\\n+        which contains compiler-rt intrinsics and will never be stable\",\n+    ),\n+    gated!(\n+        sanitizer_runtime, Whitelisted, template!(Word),\n+        \"the `#[sanitizer_runtime]` attribute is used to identify crates that contain the runtime \\\n+        of a sanitizer and will never be stable\",\n+    ),\n+    gated!(\n+        profiler_runtime, Whitelisted, template!(Word),\n+        \"the `#[profiler_runtime]` attribute is used to identify the `profiler_builtins` crate \\\n+        which contains the profiler runtime and will never be stable\",\n+    ),\n+\n+    gated!(\n+        allow_internal_unstable, Normal, template!(Word, List: \"feat1, feat2, ...\"),\n+        EXPLAIN_ALLOW_INTERNAL_UNSTABLE,\n+    ),\n+    gated!(allow_internal_unsafe, Normal, template!(Word), EXPLAIN_ALLOW_INTERNAL_UNSAFE),\n+\n+    gated!(\n+        fundamental, Whitelisted, template!(Word),\n+        \"the `#[fundamental]` attribute is an experimental feature\",\n+    ),\n+\n+    ungated!(\n+        proc_macro_derive, Normal,\n+        template!(List: \"TraitName, /*opt*/ attributes(name1, name2, ...)\"),\n+    ),\n \n     rustc_attr!(rustc_allocator, Whitelisted, template!(Word), \"internal implementation detail\"),\n     rustc_attr!(\n@@ -418,119 +385,93 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n     rustc_attr!(rustc_dummy, Normal, template!(Word /* doesn't matter*/), \"used by the test suite\"),\n \n     // FIXME: #14408 whitelist docs since rustdoc looks at them\n+    ungated!(doc, Whitelisted, template!(List: \"hidden|inline|...\", NameValueStr: \"string\")),\n+\n+    // FIXME: #14406 these are processed in codegen, which happens after the lint pass\n+\n+    ungated!(cold, Whitelisted, template!(Word)),\n+    gated!(\n+        naked, Whitelisted, template!(Word), naked_functions,\n+        \"the `#[naked]` attribute is an experimental feature\",\n+    ),\n+    gated!(\n+        ffi_returns_twice, Whitelisted, template!(Word),\n+        \"the `#[ffi_returns_twice]` attribute is an experimental feature\",\n+    ),\n+    ungated!(target_feature, Whitelisted, template!(List: r#\"enable = \"name\"\"#)),\n+    ungated!(export_name, Whitelisted, template!(NameValueStr: \"name\")),\n+    ungated!(inline, Whitelisted, template!(Word, List: \"always|never\")),\n+    ungated!(\n+        link, Whitelisted,\n+        template!(List: r#\"name = \"...\", /*opt*/ kind = \"dylib|static|...\", /*opt*/ cfg = \"...\"\"#),\n+    ),\n+    ungated!(link_name, Whitelisted, template!(NameValueStr: \"name\")),\n+    ungated!(link_section, Whitelisted, template!(NameValueStr: \"name\")),\n+    ungated!(no_builtins, Whitelisted, template!(Word)),\n     (\n-        sym::doc,\n-        Whitelisted,\n-        template!(List: \"hidden|inline|...\", NameValueStr: \"string\"),\n-        Ungated\n-    ),\n-\n-    // FIXME: #14406 these are processed in codegen, which happens after the\n-    // lint pass\n-    (sym::cold, Whitelisted, template!(Word), Ungated),\n-    (sym::naked, Whitelisted, template!(Word), Gated(Stability::Unstable,\n-                                sym::naked_functions,\n-                                \"the `#[naked]` attribute \\\n-                                is an experimental feature\",\n-                                cfg_fn!(naked_functions))),\n-    (sym::ffi_returns_twice, Whitelisted, template!(Word), Gated(Stability::Unstable,\n-                                sym::ffi_returns_twice,\n-                                \"the `#[ffi_returns_twice]` attribute \\\n-                                is an experimental feature\",\n-                                cfg_fn!(ffi_returns_twice))),\n-    (sym::target_feature, Whitelisted, template!(List: r#\"enable = \"name\"\"#), Ungated),\n-    (sym::export_name, Whitelisted, template!(NameValueStr: \"name\"), Ungated),\n-    (sym::inline, Whitelisted, template!(Word, List: \"always|never\"), Ungated),\n-    (sym::link, Whitelisted, template!(List: r#\"name = \"...\", /*opt*/ kind = \"dylib|static|...\",\n-                                               /*opt*/ cfg = \"...\"\"#), Ungated),\n-    (sym::link_name, Whitelisted, template!(NameValueStr: \"name\"), Ungated),\n-    (sym::link_section, Whitelisted, template!(NameValueStr: \"name\"), Ungated),\n-    (sym::no_builtins, Whitelisted, template!(Word), Ungated),\n-    (sym::no_debug, Whitelisted, template!(Word), Gated(\n-        Stability::Deprecated(\"https://github.com/rust-lang/rust/issues/29721\", None),\n-        sym::no_debug,\n-        \"the `#[no_debug]` attribute was an experimental feature that has been \\\n-        deprecated due to lack of demand\",\n-        cfg_fn!(no_debug))),\n-    (\n-        sym::omit_gdb_pretty_printer_section,\n-        Whitelisted,\n-        template!(Word),\n+        sym::no_debug, Whitelisted, template!(Word),\n         Gated(\n-            Stability::Unstable,\n-            sym::omit_gdb_pretty_printer_section,\n-            \"the `#[omit_gdb_pretty_printer_section]` \\\n-                attribute is just used for the Rust test \\\n-                suite\",\n-            cfg_fn!(omit_gdb_pretty_printer_section)\n+            Stability::Deprecated(\"https://github.com/rust-lang/rust/issues/29721\", None),\n+            sym::no_debug,\n+            \"the `#[no_debug]` attribute was an experimental feature that has been \\\n+            deprecated due to lack of demand\",\n+            cfg_fn!(no_debug)\n         )\n     ),\n-    (sym::may_dangle,\n-    Normal,\n-    template!(Word),\n-    Gated(Stability::Unstable,\n-        sym::dropck_eyepatch,\n+    gated!(\n+        omit_gdb_pretty_printer_section, Whitelisted, template!(Word),\n+        \"the `#[omit_gdb_pretty_printer_section]` attribute is just used for the Rust test suite\",\n+    ),\n+    gated!(\n+        may_dangle, Normal, template!(Word), dropck_eyepatch,\n         \"`may_dangle` has unstable semantics and may be removed in the future\",\n-        cfg_fn!(dropck_eyepatch))),\n-    (sym::unwind, Whitelisted, template!(List: \"allowed|aborts\"), Gated(Stability::Unstable,\n-                                sym::unwind_attributes,\n-                                \"`#[unwind]` is experimental\",\n-                                cfg_fn!(unwind_attributes))),\n-    (sym::used, Whitelisted, template!(Word), Ungated),\n-\n-    // used in resolve\n-    (sym::prelude_import, Whitelisted, template!(Word), Gated(Stability::Unstable,\n-                                        sym::prelude_import,\n-                                        \"`#[prelude_import]` is for use by rustc only\",\n-                                        cfg_fn!(prelude_import))),\n+    ),\n+    gated!(\n+        unwind, Whitelisted, template!(List: \"allowed|aborts\"), unwind_attributes,\n+        \"`#[unwind]` is experimental\",\n+    ),\n+    ungated!(used, Whitelisted, template!(Word)),\n+\n+    // Used in resolve:\n+    gated!(\n+        prelude_import, Whitelisted, template!(Word),\n+        \"`#[prelude_import]` is for use by rustc only\",\n+    ),\n \n     // FIXME: #14407 these are only looked at on-demand so we can't\n     // guarantee they'll have already been checked\n-    (\n-        sym::rustc_deprecated,\n-        Whitelisted,\n-        template!(List: r#\"since = \"version\", reason = \"...\"\"#),\n-        Ungated\n-    ),\n-    (sym::must_use, Whitelisted, template!(Word, NameValueStr: \"reason\"), Ungated),\n-    (\n-        sym::stable,\n-        Whitelisted,\n-        template!(List: r#\"feature = \"name\", since = \"version\"\"#),\n-        Ungated\n+    ungated!(\n+        rustc_deprecated, Whitelisted,\n+        template!(List: r#\"since = \"version\", reason = \"...\"\"#)\n     ),\n-    (\n-        sym::unstable,\n-        Whitelisted,\n+    ungated!(must_use, Whitelisted, template!(Word, NameValueStr: \"reason\")),\n+    ungated!(stable, Whitelisted, template!(List: r#\"feature = \"name\", since = \"version\"\"#)),\n+    ungated!(\n+        unstable, Whitelisted,\n         template!(List: r#\"feature = \"name\", reason = \"...\", issue = \"N\"\"#),\n-        Ungated\n     ),\n-    (sym::deprecated,\n-        Normal,\n+    ungated!(\n+        deprecated, Normal,\n         template!(\n             Word,\n             List: r#\"/*opt*/ since = \"version\", /*opt*/ note = \"reason\"\"#,\n             NameValueStr: \"reason\"\n         ),\n-        Ungated\n     ),\n \n-    (sym::rustc_paren_sugar, Normal, template!(Word), Gated(Stability::Unstable,\n-                                        sym::unboxed_closures,\n-                                        \"unboxed_closures are still evolving\",\n-                                        cfg_fn!(unboxed_closures))),\n+    gated!(\n+        rustc_paren_sugar, Normal, template!(Word), unboxed_closures,\n+        \"unboxed_closures are still evolving\",\n+    ),\n \n-    (sym::windows_subsystem, Whitelisted, template!(NameValueStr: \"windows|console\"), Ungated),\n+    ungated!(windows_subsystem, Whitelisted, template!(NameValueStr: \"windows|console\")),\n \n-    (sym::proc_macro_attribute, Normal, template!(Word), Ungated),\n-    (sym::proc_macro, Normal, template!(Word), Ungated),\n+    ungated!(proc_macro_attribute, Normal, template!(Word)),\n+    ungated!(proc_macro, Normal, template!(Word)),\n \n     rustc_attr!(rustc_proc_macro_decls, Normal, template!(Word), \"used internally by rustc\"),\n \n-    (sym::allow_fail, Normal, template!(Word), Gated(Stability::Unstable,\n-                                sym::allow_fail,\n-                                \"allow_fail attribute is currently unstable\",\n-                                cfg_fn!(allow_fail))),\n+    gated!(allow_fail, Normal, template!(Word), \"allow_fail attribute is currently unstable\"),\n \n     rustc_attr!(\n         rustc_std_internal_symbol, Whitelisted, template!(Word),\n@@ -545,33 +486,33 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n         rustc_args_required_const, Whitelisted, template!(List: \"N\"),\n         \"this is an internal attribute that will never be stable\",\n     ),\n-    // RFC 2070\n-    (sym::panic_handler, Normal, template!(Word), Ungated),\n \n-    (sym::alloc_error_handler, Normal, template!(Word), Gated(Stability::Unstable,\n-                        sym::alloc_error_handler,\n-                        \"`#[alloc_error_handler]` is an unstable feature\",\n-                        cfg_fn!(alloc_error_handler))),\n+    // RFC 2070\n+    ungated!(panic_handler, Normal, template!(Word)),\n+    gated!(\n+        alloc_error_handler, Normal, template!(Word),\n+        \"`#[alloc_error_handler]` is an unstable feature\",\n+    ),\n \n     // RFC 2412\n-    (sym::optimize, Whitelisted, template!(List: \"size|speed\"), Gated(Stability::Unstable,\n-                            sym::optimize_attribute,\n-                            \"`#[optimize]` attribute is an unstable feature\",\n-                            cfg_fn!(optimize_attribute))),\n+    gated!(\n+        optimize, Whitelisted, template!(List: \"size|speed\"), optimize_attribute,\n+        \"`#[optimize]` attribute is an unstable feature\",\n+    ),\n \n     // Crate level attributes\n-    (sym::crate_name, CrateLevel, template!(NameValueStr: \"name\"), Ungated),\n-    (sym::crate_type, CrateLevel, template!(NameValueStr: \"bin|lib|...\"), Ungated),\n-    (sym::crate_id, CrateLevel, template!(NameValueStr: \"ignored\"), Ungated),\n-    (sym::feature, CrateLevel, template!(List: \"name1, name1, ...\"), Ungated),\n-    (sym::no_start, CrateLevel, template!(Word), Ungated),\n-    (sym::no_main, CrateLevel, template!(Word), Ungated),\n-    (sym::recursion_limit, CrateLevel, template!(NameValueStr: \"N\"), Ungated),\n-    (sym::type_length_limit, CrateLevel, template!(NameValueStr: \"N\"), Ungated),\n-    (sym::test_runner, CrateLevel, template!(List: \"path\"), Gated(Stability::Unstable,\n-                    sym::custom_test_frameworks,\n-                    \"custom test frameworks are an unstable feature\",\n-                    cfg_fn!(custom_test_frameworks))),\n+    ungated!(crate_name, CrateLevel, template!(NameValueStr: \"name\")),\n+    ungated!(crate_type, CrateLevel, template!(NameValueStr: \"bin|lib|...\")),\n+    ungated!(crate_id, CrateLevel, template!(NameValueStr: \"ignored\")),\n+    ungated!(feature, CrateLevel, template!(List: \"name1, name1, ...\")),\n+    ungated!(no_start, CrateLevel, template!(Word)),\n+    ungated!(no_main, CrateLevel, template!(Word)),\n+    ungated!(recursion_limit, CrateLevel, template!(NameValueStr: \"N\")),\n+    ungated!(type_length_limit, CrateLevel, template!(NameValueStr: \"N\")),\n+    gated!(\n+        test_runner, CrateLevel, template!(List: \"path\"), custom_test_frameworks,\n+        \"custom test frameworks are an unstable feature\",\n+    ),\n ];\n \n pub fn deprecated_attributes() -> Vec<&'static BuiltinAttribute> {"}]}