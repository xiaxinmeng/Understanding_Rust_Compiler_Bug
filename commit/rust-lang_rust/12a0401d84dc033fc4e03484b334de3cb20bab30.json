{"sha": "12a0401d84dc033fc4e03484b334de3cb20bab30", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyYTA0MDFkODRkYzAzM2ZjNGUwMzQ4NGIzMzRkZTNjYjIwYmFiMzA=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-09-25T22:15:42Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-09-25T22:22:38Z"}, "message": "Change method res to try autoref more often. Fixes #3585.", "tree": {"sha": "5e3bd153179dd77d34c3fd5bc97b00c0e6dcca29", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e3bd153179dd77d34c3fd5bc97b00c0e6dcca29"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12a0401d84dc033fc4e03484b334de3cb20bab30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12a0401d84dc033fc4e03484b334de3cb20bab30", "html_url": "https://github.com/rust-lang/rust/commit/12a0401d84dc033fc4e03484b334de3cb20bab30", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12a0401d84dc033fc4e03484b334de3cb20bab30/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a770d86201d5b41573b6b5f5bdfe3b70df919b28", "url": "https://api.github.com/repos/rust-lang/rust/commits/a770d86201d5b41573b6b5f5bdfe3b70df919b28", "html_url": "https://github.com/rust-lang/rust/commit/a770d86201d5b41573b6b5f5bdfe3b70df919b28"}], "stats": {"total": 101, "additions": 48, "deletions": 53}, "files": [{"sha": "085ee51eff7defd7696e5af6c048f26434fbd9d5", "filename": "src/rustc/middle/typeck/check/method.rs", "status": "modified", "additions": 11, "deletions": 53, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/12a0401d84dc033fc4e03484b334de3cb20bab30/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12a0401d84dc033fc4e03484b334de3cb20bab30/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=12a0401d84dc033fc4e03484b334de3cb20bab30", "patch": "@@ -48,11 +48,12 @@ candidates in the same way.\n \n If find no matching candidate at all, we proceed to auto-deref the\n receiver type and search again.  We keep doing that until we cannot\n-auto-deref any longer.  At that point, we will attempt an auto-ref.\n-If THAT fails, method lookup fails altogether.  Autoref itself comes\n-in two varieties, autoslice and autoptr.  The former converts `~[]` to\n-`&[]` and the latter converts any type `T` to `&mut T`, `&const T`, or\n-`&T`.\n+auto-deref any longer.  At each step, we also check for candidates\n+based on \"autoptr\", which if the current type is `T`, checks for `&mut\n+T`, `&const T`, and `&T` receivers.  Finally, at the very end, we will\n+also try autoslice, which converts `~[]` to `&[]` (there is no point\n+at trying autoslice earlier, because no autoderefable type is also\n+sliceable).\n \n ## Why two phases?\n \n@@ -159,22 +160,9 @@ impl LookupContext {\n                 None => {}\n             }\n \n-            // some special logic around newtypes:\n-            match ty::get(self_ty).sty {\n-                ty_enum(*) => {\n-                    // Note: in general, we prefer not to auto-ref a\n-                    // partially autoderef'd type, because it\n-                    // seems... crazy.  But we have to be careful\n-                    // around newtype enums.  They can be further\n-                    // deref'd, but they may also have intrinsic\n-                    // methods hanging off of them with interior type.\n-                    match self.search_for_any_autorefd_method(self_ty,\n-                                                              autoderefs) {\n-                        Some(move mme) => { return Some(mme); }\n-                        None => {}\n-                    }\n-                }\n-                _ => {}\n+            match self.search_for_autoptrd_method(self_ty, autoderefs) {\n+                Some(move mme) => { return Some(move mme); }\n+                None => {}\n             }\n \n             match self.deref(self_ty, &enum_dids) {\n@@ -186,7 +174,7 @@ impl LookupContext {\n             }\n         }\n \n-        self.search_for_any_autorefd_method(self_ty, autoderefs)\n+        self.search_for_autosliced_method(self_ty, autoderefs)\n     }\n \n     fn deref(ty: ty::t, enum_dids: &DVec<ast::def_id>) -> Option<ty::t> {\n@@ -516,30 +504,6 @@ impl LookupContext {\n         }\n     }\n \n-    fn search_for_any_autorefd_method(\n-        &self,\n-        self_ty: ty::t,\n-        autoderefs: uint)\n-        -> Option<method_map_entry>\n-    {\n-        /*!\n-         *\n-         * Attempts both auto-slice and auto-ptr, as appropriate.\n-         */\n-\n-        match self.search_for_autosliced_method(self_ty, autoderefs) {\n-            Some(move mme) => { return Some(move mme); }\n-            None => {}\n-        }\n-\n-        match self.search_for_autoptrd_method(self_ty, autoderefs) {\n-            Some(move mme) => { return Some(move mme); }\n-            None => {}\n-        }\n-\n-        return None;\n-    }\n-\n     fn search_for_autosliced_method(\n         &self,\n         self_ty: ty::t,\n@@ -594,13 +558,7 @@ impl LookupContext {\n \n         let tcx = self.tcx();\n         match ty::get(self_ty).sty {\n-            ty_box(*) | ty_uniq(*) | ty_rptr(*) => {\n-                // we should be fully autoderef'd\n-                self.bug(fmt!(\"Receiver type %s should be fully \\\n-                               autoderef'd by this point\",\n-                              self.ty_to_str(self_ty)));\n-            }\n-\n+            ty_box(*) | ty_uniq(*) | ty_rptr(*) |\n             ty_infer(IntVar(_)) | // FIXME(#3211)---should be resolved\n             ty_self | ty_param(*) | ty_nil | ty_bot | ty_bool |\n             ty_int(*) | ty_uint(*) |"}, {"sha": "68e172bacadc4ee1578ab78692d126b750285ad0", "filename": "src/test/run-pass/autoref-intermediate-types-issue-3585.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/12a0401d84dc033fc4e03484b334de3cb20bab30/src%2Ftest%2Frun-pass%2Fautoref-intermediate-types-issue-3585.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12a0401d84dc033fc4e03484b334de3cb20bab30/src%2Ftest%2Frun-pass%2Fautoref-intermediate-types-issue-3585.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoref-intermediate-types-issue-3585.rs?ref=12a0401d84dc033fc4e03484b334de3cb20bab30", "patch": "@@ -0,0 +1,20 @@\n+trait Foo {\n+    fn foo(&self) -> ~str;\n+}\n+\n+impl<T: Foo> @T: Foo {\n+    fn foo(&self) -> ~str {\n+        fmt!(\"@%s\", (**self).foo())\n+    }\n+}\n+\n+impl uint: Foo {\n+    fn foo(&self) -> ~str {\n+        fmt!(\"%u\", *self)\n+    }\n+}\n+\n+fn main() {\n+    let x = @3u;\n+    assert x.foo() == ~\"@3\";\n+}\n\\ No newline at end of file"}, {"sha": "cb70a1810b7c499dd361739d2417c3aa8b7e5f97", "filename": "src/test/run-pass/autoref-vec-push.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/12a0401d84dc033fc4e03484b334de3cb20bab30/src%2Ftest%2Frun-pass%2Fautoref-vec-push.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12a0401d84dc033fc4e03484b334de3cb20bab30/src%2Ftest%2Frun-pass%2Fautoref-vec-push.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoref-vec-push.rs?ref=12a0401d84dc033fc4e03484b334de3cb20bab30", "patch": "@@ -0,0 +1,17 @@\n+trait VecPush<T> {\n+    fn push(&mut self, +t: T);\n+}\n+\n+impl<T> ~[T]: VecPush<T> {\n+    fn push(&mut self, +t: T) {\n+        vec::push(*self, t);\n+    }\n+}\n+\n+fn main() {\n+    let mut x = ~[];\n+    x.push(1);\n+    x.push(2);\n+    x.push(3);\n+    assert x == ~[1, 2, 3];\n+}\n\\ No newline at end of file"}]}