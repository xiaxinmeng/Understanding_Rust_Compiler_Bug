{"sha": "b2c7e7791a0793df5199e209470734e4f26dccbe", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyYzdlNzc5MWEwNzkzZGY1MTk5ZTIwOTQ3MDczNGU0ZjI2ZGNjYmU=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-09-19T15:15:48Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-09-19T15:15:48Z"}, "message": "Rollup merge of #28496 - davidszotten:fix_error_anchors, r=steveklabnik", "tree": {"sha": "3e0b058d56bf56abdd5acb771059e57c083c49c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e0b058d56bf56abdd5acb771059e57c083c49c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b2c7e7791a0793df5199e209470734e4f26dccbe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b2c7e7791a0793df5199e209470734e4f26dccbe", "html_url": "https://github.com/rust-lang/rust/commit/b2c7e7791a0793df5199e209470734e4f26dccbe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b2c7e7791a0793df5199e209470734e4f26dccbe/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d557f4a60f8071ec70e9147540d87b4eae153027", "url": "https://api.github.com/repos/rust-lang/rust/commits/d557f4a60f8071ec70e9147540d87b4eae153027", "html_url": "https://github.com/rust-lang/rust/commit/d557f4a60f8071ec70e9147540d87b4eae153027"}, {"sha": "5ab3058569245171a44283fddee6c119a31765b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ab3058569245171a44283fddee6c119a31765b7", "html_url": "https://github.com/rust-lang/rust/commit/5ab3058569245171a44283fddee6c119a31765b7"}], "stats": {"total": 35, "additions": 24, "deletions": 11}, "files": [{"sha": "18ce93ea06a64b038c952e0f856a886d5196a9b4", "filename": "src/doc/trpl/error-handling.md", "status": "modified", "additions": 24, "deletions": 11, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/b2c7e7791a0793df5199e209470734e4f26dccbe/src%2Fdoc%2Ftrpl%2Ferror-handling.md", "raw_url": "https://github.com/rust-lang/rust/raw/b2c7e7791a0793df5199e209470734e4f26dccbe/src%2Fdoc%2Ftrpl%2Ferror-handling.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Ferror-handling.md?ref=b2c7e7791a0793df5199e209470734e4f26dccbe", "patch": "@@ -28,7 +28,7 @@ systems may want to jump around.\n     * [The `Result` type](#the-result-type)\n         * [Parsing integers](#parsing-integers)\n         * [The `Result` type alias idiom](#the-result-type-alias-idiom)\n-    * [A brief interlude: unwrapping isn't evil](#a-brief-interlude-unwrapping-isnt-evil)\n+    * [A brief interlude: unwrapping isn't evil](#a-brief-interlude:-unwrapping-isn't-evil)\n * [Working with multiple error types](#working-with-multiple-error-types)\n     * [Composing `Option` and `Result`](#composing-option-and-result)\n     * [The limits of combinators](#the-limits-of-combinators)\n@@ -41,11 +41,11 @@ systems may want to jump around.\n     * [The real `try!` macro](#the-real-try!-macro)\n     * [Composing custom error types](#composing-custom-error-types)\n     * [Advice for library writers](#advice-for-library-writers)\n-* [Case study: A program to read population data](#case-study-a-program-to-read-population-data)\n+* [Case study: A program to read population data](#case-study:-a-program-to-read-population-data)\n     * [Initial setup](#initial-setup)\n     * [Argument parsing](#argument-parsing)\n     * [Writing the logic](#writing-the-logic)\n-    * [Error handling with `Box<Error>`](#error-handling-with-box<error>)\n+    * [Error handling with `Box<Error>`](#error-handling-with-box%3Cerror%3E)\n     * [Reading from stdin](#reading-from-stdin)\n     * [Error handling with a custom type](#error-handling-with-a-custom-type)\n     * [Adding functionality](#adding-functionality)\n@@ -87,9 +87,9 @@ thread '<main>' panicked at 'Invalid number: 11', src/bin/panic-simple.rs:5\n Here's another example that is slightly less contrived. A program that accepts\n an integer as an argument, doubles it and prints it.\n \n-<div id=\"code-unwrap-double\">\n-```rust,should_panic\n+<a name=\"code-unwrap-double\"></a>\n \n+```rust,should_panic\n use std::env;\n \n fn main() {\n@@ -99,7 +99,6 @@ fn main() {\n     println!(\"{}\", 2 * n);\n }\n ```\n-</div>\n \n If you give this program zero arguments (error 1) or if the first argument\n isn't an integer (error 2), the program will panic just like in the first\n@@ -140,7 +139,8 @@ system is an important concept because it will cause the compiler to force the\n programmer to handle that absence. Let's take a look at an example that tries\n to find a character in a string:\n \n-<div id=\"code-option-ex-string-find\">\n+<a name=\"code-option-ex-string-find\"></a>\n+\n ```rust\n // Searches `haystack` for the Unicode character `needle`. If one is found, the\n // byte offset of the character is returned. Otherwise, `None` is returned.\n@@ -153,7 +153,6 @@ fn find(haystack: &str, needle: char) -> Option<usize> {\n     None\n }\n ```\n-</div>\n \n Notice that when this function finds a matching character, it doen't just\n return the `offset`. Instead, it returns `Some(offset)`. `Some` is a variant or\n@@ -187,6 +186,8 @@ But wait, what about `unwrap` used in [`unwrap-double`](#code-unwrap-double)?\n There was no case analysis there! Instead, the case analysis was put inside the\n `unwrap` method for you. You could define it yourself if you want:\n \n+<a name=\"code-option-def-unwrap\"></a>\n+\n ```rust\n enum Option<T> {\n     None,\n@@ -210,7 +211,7 @@ that makes `unwrap` ergonomic to use. Unfortunately, that `panic!` means that\n \n ### Composing `Option<T>` values\n \n-In [`option-ex-string-find`](#code-option-ex-string-find-2)\n+In [`option-ex-string-find`](#code-option-ex-string-find)\n we saw how to use `find` to discover the extension in a file name. Of course,\n not all file names have a `.` in them, so it's possible that the file name has\n no extension. This *possibility of absence* is encoded into the types using\n@@ -252,6 +253,8 @@ option is `None`, in which case, just return `None`.\n Rust has parametric polymorphism, so it is very easy to define a combinator\n that abstracts this pattern:\n \n+<a name=\"code-option-map\"></a>\n+\n ```rust\n fn map<F, T, A>(option: Option<T>, f: F) -> Option<A> where F: FnOnce(T) -> A {\n     match option {\n@@ -391,6 +394,8 @@ remove choices because they will panic if `Option<T>` is `None`.\n The `Result` type is also\n [defined in the standard library][6]:\n \n+<a name=\"code-result-def-1\"></a>\n+\n ```rust\n enum Result<T, E> {\n     Ok(T),\n@@ -667,6 +672,8 @@ with both an `Option` and a `Result`, the solution is *usually* to convert the\n (from `env::args()`) means the user didn't invoke the program correctly. We\n could just use a `String` to describe the error. Let's try:\n \n+<a name=\"code-error-double-string\"></a>\n+\n ```rust\n use std::env;\n \n@@ -899,6 +906,8 @@ seen above.\n \n Here is a simplified definition of a `try!` macro:\n \n+<a nama name=\"code-try-def-simple\"></a>\n+\n ```rust\n macro_rules! try {\n     ($e:expr) => (match $e {\n@@ -1159,6 +1168,8 @@ The `std::convert::From` trait is\n [defined in the standard\n library](../std/convert/trait.From.html):\n \n+<a name=\"code-from-def\"></a>\n+\n ```rust\n trait From<T> {\n     fn from(T) -> Self;\n@@ -1236,9 +1247,11 @@ macro_rules! try {\n }\n ```\n \n-This is not it's real definition. It's real definition is\n+This is not its real definition. Its real definition is\n [in the standard library](../std/macro.try!.html):\n \n+<a name=\"code-try-def\"></a>\n+\n ```rust\n macro_rules! try {\n     ($e:expr) => (match $e {\n@@ -1457,7 +1470,7 @@ representation. But certainly, this will vary depending on use cases.\n At a minimum, you should probably implement the\n [`Error`](../std/error/trait.Error.html)\n trait. This will give users of your library some minimum flexibility for\n-[composing errors](#the-real-try-macro). Implementing the `Error` trait also\n+[composing errors](#the-real-try!-macro). Implementing the `Error` trait also\n means that users are guaranteed the ability to obtain a string representation\n of an error (because it requires impls for both `fmt::Debug` and\n `fmt::Display`)."}]}