{"sha": "38e613c4eb165f778fa8bb12107141d34a4c0621", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4ZTYxM2M0ZWIxNjVmNzc4ZmE4YmIxMjEwNzE0MWQzNGE0YzA2MjE=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2020-02-07T15:43:36Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2020-03-14T21:52:29Z"}, "message": "Update `krate_attrs` and `get_module`", "tree": {"sha": "29a2ee15bf184162010b29b5a8fb8d3bcead6068", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29a2ee15bf184162010b29b5a8fb8d3bcead6068"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/38e613c4eb165f778fa8bb12107141d34a4c0621", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/38e613c4eb165f778fa8bb12107141d34a4c0621", "html_url": "https://github.com/rust-lang/rust/commit/38e613c4eb165f778fa8bb12107141d34a4c0621", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/38e613c4eb165f778fa8bb12107141d34a4c0621/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c68b7a7fa55f4a958dd85f140ece052aafc4a2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c68b7a7fa55f4a958dd85f140ece052aafc4a2a", "html_url": "https://github.com/rust-lang/rust/commit/0c68b7a7fa55f4a958dd85f140ece052aafc4a2a"}], "stats": {"total": 127, "additions": 72, "deletions": 55}, "files": [{"sha": "7e626f79c0c9db75436e1ea45ac2b762f93366c2", "filename": "src/librustc/hir/map/collector.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/38e613c4eb165f778fa8bb12107141d34a4c0621/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38e613c4eb165f778fa8bb12107141d34a4c0621/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs?ref=38e613c4eb165f778fa8bb12107141d34a4c0621", "patch": "@@ -133,11 +133,7 @@ impl<'a, 'hir> NodeCollector<'a, 'hir> {\n         // Allocate `DepNode`s for the root module.\n         let (root_mod_sig_dep_index, root_mod_full_dep_index) = {\n             let Crate {\n-                ref module,\n-                // Crate attributes are not copied over to the root `Mod`, so hash\n-                // them explicitly here.\n-                ref attrs,\n-                span,\n+                ref item,\n                 // These fields are handled separately:\n                 exported_macros: _,\n                 non_exported_macro_attrs: _,\n@@ -155,7 +151,7 @@ impl<'a, 'hir> NodeCollector<'a, 'hir> {\n                 dep_graph,\n                 &mut hcx,\n                 root_mod_def_path_hash,\n-                (module, attrs, span),\n+                item,\n                 &mut hir_body_nodes,\n             )\n         };\n@@ -191,7 +187,7 @@ impl<'a, 'hir> NodeCollector<'a, 'hir> {\n             Entry {\n                 parent: hir::CRATE_HIR_ID,\n                 dep_node: root_mod_sig_dep_index,\n-                node: Node::Crate,\n+                node: Node::Crate(&krate.item),\n             },\n         );\n "}, {"sha": "106475e5e1337b308dec5a7f7e5333e1946934e4", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 32, "deletions": 18, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/38e613c4eb165f778fa8bb12107141d34a4c0621/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38e613c4eb165f778fa8bb12107141d34a4c0621/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=38e613c4eb165f778fa8bb12107141d34a4c0621", "patch": "@@ -13,7 +13,7 @@ use rustc_ast::ast::{self, Name, NodeId};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::svh::Svh;\n use rustc_hir::def::{DefKind, Res};\n-use rustc_hir::def_id::{DefId, DefIndex, LocalDefId, CRATE_DEF_INDEX};\n+use rustc_hir::def_id::{DefId, DefIndex, LocalDefId};\n use rustc_hir::intravisit;\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_hir::print::Nested;\n@@ -41,7 +41,7 @@ pub struct Entry<'hir> {\n impl<'hir> Entry<'hir> {\n     fn parent_node(self) -> Option<HirId> {\n         match self.node {\n-            Node::Crate | Node::MacroDef(_) => None,\n+            Node::Crate(_) | Node::MacroDef(_) => None,\n             _ => Some(self.parent),\n         }\n     }\n@@ -389,7 +389,7 @@ impl<'hir> Map<'hir> {\n             | Node::Lifetime(_)\n             | Node::Visibility(_)\n             | Node::Block(_)\n-            | Node::Crate => return None,\n+            | Node::Crate(_) => return None,\n             Node::MacroDef(_) => DefKind::Macro(MacroKind::Bang),\n             Node::GenericParam(param) => match param.kind {\n                 GenericParamKind::Lifetime { .. } => return None,\n@@ -403,6 +403,21 @@ impl<'hir> Map<'hir> {\n         self.lookup(id).cloned()\n     }\n \n+    fn get_entry(&self, id: HirId) -> Entry<'hir> {\n+        if id.local_id == ItemLocalId::from_u32_const(0) {\n+            let owner = self.tcx.hir_owner(id.owner_def_id());\n+            Entry { parent: owner.parent, node: owner.node, dep_node: DepNodeIndex::INVALID }\n+        } else {\n+            let owner = self.tcx.hir_owner_items(id.owner_def_id());\n+            let item = owner.items[id.local_id].as_ref().unwrap();\n+            Entry {\n+                parent: HirId { owner: id.owner, local_id: item.parent },\n+                node: item.node,\n+                dep_node: DepNodeIndex::INVALID,\n+            }\n+        }\n+    }\n+\n     pub fn item(&self, id: HirId) -> &'hir Item<'hir> {\n         match self.find(id).unwrap() {\n             Node::Item(item) => item,\n@@ -528,18 +543,17 @@ impl<'hir> Map<'hir> {\n     /// invoking `krate.attrs` because it registers a tighter\n     /// dep-graph access.\n     pub fn krate_attrs(&self) -> &'hir [ast::Attribute] {\n-        let def_path_hash = self.definitions.def_path_hash(CRATE_DEF_INDEX);\n-\n-        self.dep_graph.read(def_path_hash.to_dep_node(DepKind::Hir));\n-        &self.krate.attrs\n+        match self.get_entry(CRATE_HIR_ID).node {\n+            Node::Crate(item) => item.attrs,\n+            _ => bug!(),\n+        }\n     }\n \n     pub fn get_module(&self, module: DefId) -> (&'hir Mod<'hir>, Span, HirId) {\n         let hir_id = self.as_local_hir_id(module).unwrap();\n-        self.read(hir_id);\n-        match self.find_entry(hir_id).unwrap().node {\n+        match self.get_entry(hir_id).node {\n             Node::Item(&Item { span, kind: ItemKind::Mod(ref m), .. }) => (m, span, hir_id),\n-            Node::Crate => (&self.krate.module, self.krate.span, hir_id),\n+            Node::Crate(item) => (&item.module, item.span, hir_id),\n             node => panic!(\"not a module: {:?}\", node),\n         }\n     }\n@@ -602,9 +616,9 @@ impl<'hir> Map<'hir> {\n \n     /// Retrieves the `Node` corresponding to `id`, returning `None` if cannot be found.\n     pub fn find(&self, hir_id: HirId) -> Option<Node<'hir>> {\n-        let result = self\n-            .find_entry(hir_id)\n-            .and_then(|entry| if let Node::Crate = entry.node { None } else { Some(entry.node) });\n+        let result = self.find_entry(hir_id).and_then(|entry| {\n+            if let Node::Crate(..) = entry.node { None } else { Some(entry.node) }\n+        });\n         if result.is_some() {\n             self.read(hir_id);\n         }\n@@ -675,7 +689,7 @@ impl<'hir> Map<'hir> {\n     pub fn is_hir_id_module(&self, hir_id: HirId) -> bool {\n         match self.lookup(hir_id) {\n             Some(Entry { node: Node::Item(Item { kind: ItemKind::Mod(_), .. }), .. })\n-            | Some(Entry { node: Node::Crate, .. }) => true,\n+            | Some(Entry { node: Node::Crate(..), .. }) => true,\n             _ => false,\n         }\n     }\n@@ -752,7 +766,7 @@ impl<'hir> Map<'hir> {\n     pub fn get_parent_item(&self, hir_id: HirId) -> HirId {\n         for (hir_id, node) in self.parent_iter(hir_id) {\n             match node {\n-                Node::Crate\n+                Node::Crate(_)\n                 | Node::Item(_)\n                 | Node::ForeignItem(_)\n                 | Node::TraitItem(_)\n@@ -973,7 +987,7 @@ impl<'hir> Map<'hir> {\n             // Unit/tuple structs/variants take the attributes straight from\n             // the struct/variant definition.\n             Some(Node::Ctor(..)) => return self.attrs(self.get_parent_item(id)),\n-            Some(Node::Crate) => Some(&self.krate.attrs[..]),\n+            Some(Node::Crate(item)) => Some(&item.attrs[..]),\n             _ => None,\n         };\n         attrs.unwrap_or(&[])\n@@ -1013,7 +1027,7 @@ impl<'hir> Map<'hir> {\n             Some(Node::Visibility(v)) => bug!(\"unexpected Visibility {:?}\", v),\n             Some(Node::Local(local)) => local.span,\n             Some(Node::MacroDef(macro_def)) => macro_def.span,\n-            Some(Node::Crate) => self.krate.span,\n+            Some(Node::Crate(item)) => item.span,\n             None => bug!(\"hir::map::Map::span: id not in map: {:?}\", hir_id),\n         }\n     }\n@@ -1255,7 +1269,7 @@ fn hir_id_to_string(map: &Map<'_>, id: HirId, include_id: bool) -> String {\n         Some(Node::GenericParam(ref param)) => format!(\"generic_param {:?}{}\", param, id_str),\n         Some(Node::Visibility(ref vis)) => format!(\"visibility {:?}{}\", vis, id_str),\n         Some(Node::MacroDef(_)) => format!(\"macro {}{}\", path_str(), id_str),\n-        Some(Node::Crate) => String::from(\"root_crate\"),\n+        Some(Node::Crate(..)) => String::from(\"root_crate\"),\n         None => format!(\"unknown node{}\", id_str),\n     }\n }"}, {"sha": "748b9b7fb40e2883b667e06117acd053b885ea44", "filename": "src/librustc_ast_lowering/lib.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38e613c4eb165f778fa8bb12107141d34a4c0621/src%2Flibrustc_ast_lowering%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38e613c4eb165f778fa8bb12107141d34a4c0621/src%2Flibrustc_ast_lowering%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Flib.rs?ref=38e613c4eb165f778fa8bb12107141d34a4c0621", "patch": "@@ -535,9 +535,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         self.resolver.definitions().init_node_id_to_hir_id_mapping(self.node_id_to_hir_id);\n \n         hir::Crate {\n-            module,\n-            attrs,\n-            span: c.span,\n+            item: hir::CrateItem { module, attrs, span: c.span },\n             exported_macros: self.arena.alloc_from_iter(self.exported_macros),\n             non_exported_macro_attrs: self.arena.alloc_from_iter(self.non_exported_macro_attrs),\n             items: self.items,"}, {"sha": "dbc2ef6f2b05e1b938739e1a1571b055f9645c7d", "filename": "src/librustc_codegen_ssa/back/write.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38e613c4eb165f778fa8bb12107141d34a4c0621/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38e613c4eb165f778fa8bb12107141d34a4c0621/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs?ref=38e613c4eb165f778fa8bb12107141d34a4c0621", "patch": "@@ -341,9 +341,9 @@ pub fn start_async_codegen<B: ExtraBackendMethods>(\n \n     let crate_name = tcx.crate_name(LOCAL_CRATE);\n     let crate_hash = tcx.crate_hash(LOCAL_CRATE);\n-    let no_builtins = attr::contains_name(&tcx.hir().krate().attrs, sym::no_builtins);\n+    let no_builtins = attr::contains_name(&tcx.hir().krate().item.attrs, sym::no_builtins);\n     let subsystem =\n-        attr::first_attr_value_str_by_name(&tcx.hir().krate().attrs, sym::windows_subsystem);\n+        attr::first_attr_value_str_by_name(&tcx.hir().krate().item.attrs, sym::windows_subsystem);\n     let windows_subsystem = subsystem.map(|subsystem| {\n         if subsystem != sym::windows && subsystem != sym::console {\n             tcx.sess.fatal(&format!("}, {"sha": "65bb4b9a6a1f2bcdc08a697acaf1d46b1e23a23d", "filename": "src/librustc_hir/hir.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/38e613c4eb165f778fa8bb12107141d34a4c0621/src%2Flibrustc_hir%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38e613c4eb165f778fa8bb12107141d34a4c0621/src%2Flibrustc_hir%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fhir.rs?ref=38e613c4eb165f778fa8bb12107141d34a4c0621", "patch": "@@ -606,6 +606,14 @@ pub struct ModuleItems {\n     pub impl_items: BTreeSet<ImplItemId>,\n }\n \n+/// A type representing only the top-level module.\n+#[derive(RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n+pub struct CrateItem<'hir> {\n+    pub module: Mod<'hir>,\n+    pub attrs: &'hir [Attribute],\n+    pub span: Span,\n+}\n+\n /// The top-level data structure that stores the entire contents of\n /// the crate currently being compiled.\n ///\n@@ -614,9 +622,7 @@ pub struct ModuleItems {\n /// [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/hir.html\n #[derive(RustcEncodable, RustcDecodable, Debug)]\n pub struct Crate<'hir> {\n-    pub module: Mod<'hir>,\n-    pub attrs: &'hir [Attribute],\n-    pub span: Span,\n+    pub item: CrateItem<'hir>,\n     pub exported_macros: &'hir [MacroDef<'hir>],\n     // Attributes from non-exported macros, kept only for collecting the library feature list.\n     pub non_exported_macro_attrs: &'hir [Attribute],\n@@ -2683,7 +2689,7 @@ pub enum Node<'hir> {\n     GenericParam(&'hir GenericParam<'hir>),\n     Visibility(&'hir Visibility<'hir>),\n \n-    Crate,\n+    Crate(&'hir CrateItem<'hir>),\n }\n \n impl Node<'_> {"}, {"sha": "5f31ddeae95d1a3517b720c7f778f2884f11e580", "filename": "src/librustc_hir/intravisit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38e613c4eb165f778fa8bb12107141d34a4c0621/src%2Flibrustc_hir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38e613c4eb165f778fa8bb12107141d34a4c0621/src%2Flibrustc_hir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fintravisit.rs?ref=38e613c4eb165f778fa8bb12107141d34a4c0621", "patch": "@@ -438,8 +438,8 @@ pub trait Visitor<'v>: Sized {\n \n /// Walks the contents of a crate. See also `Crate::visit_all_items`.\n pub fn walk_crate<'v, V: Visitor<'v>>(visitor: &mut V, krate: &'v Crate<'v>) {\n-    visitor.visit_mod(&krate.module, krate.span, CRATE_HIR_ID);\n-    walk_list!(visitor, visit_attribute, krate.attrs);\n+    visitor.visit_mod(&krate.item.module, krate.item.span, CRATE_HIR_ID);\n+    walk_list!(visitor, visit_attribute, krate.item.attrs);\n     walk_list!(visitor, visit_macro_def, krate.exported_macros);\n }\n "}, {"sha": "1a2c3a38565c8e17ae59197f19729b337579645f", "filename": "src/librustc_hir/print.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38e613c4eb165f778fa8bb12107141d34a4c0621/src%2Flibrustc_hir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38e613c4eb165f778fa8bb12107141d34a4c0621/src%2Flibrustc_hir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fprint.rs?ref=38e613c4eb165f778fa8bb12107141d34a4c0621", "patch": "@@ -102,7 +102,7 @@ impl<'a> State<'a> {\n             Node::Ctor(..) => panic!(\"cannot print isolated Ctor\"),\n             Node::Local(a) => self.print_local_decl(&a),\n             Node::MacroDef(_) => panic!(\"cannot print MacroDef\"),\n-            Node::Crate => panic!(\"cannot print Crate\"),\n+            Node::Crate(..) => panic!(\"cannot print Crate\"),\n         }\n     }\n }\n@@ -151,7 +151,7 @@ pub fn print_crate<'a>(\n     // When printing the AST, we sometimes need to inject `#[no_std]` here.\n     // Since you can't compile the HIR, it's not necessary.\n \n-    s.print_mod(&krate.module, &krate.attrs);\n+    s.print_mod(&krate.item.module, &krate.item.attrs);\n     s.print_remaining_comments();\n     s.s.eof()\n }"}, {"sha": "5f186f0e1b2bd4ca68488671219e54102c96a1c5", "filename": "src/librustc_incremental/assert_dep_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38e613c4eb165f778fa8bb12107141d34a4c0621/src%2Flibrustc_incremental%2Fassert_dep_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38e613c4eb165f778fa8bb12107141d34a4c0621/src%2Flibrustc_incremental%2Fassert_dep_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fassert_dep_graph.rs?ref=38e613c4eb165f778fa8bb12107141d34a4c0621", "patch": "@@ -68,7 +68,7 @@ pub fn assert_dep_graph(tcx: TyCtxt<'_>) {\n         let (if_this_changed, then_this_would_need) = {\n             let mut visitor =\n                 IfThisChanged { tcx, if_this_changed: vec![], then_this_would_need: vec![] };\n-            visitor.process_attrs(hir::CRATE_HIR_ID, &tcx.hir().krate().attrs);\n+            visitor.process_attrs(hir::CRATE_HIR_ID, &tcx.hir().krate().item.attrs);\n             tcx.hir().krate().visit_all_item_likes(&mut visitor.as_deep_visitor());\n             (visitor.if_this_changed, visitor.then_this_would_need)\n         };"}, {"sha": "54d7e0ece503185dfcd241023521c5d556e2c56c", "filename": "src/librustc_incremental/assert_module_sources.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38e613c4eb165f778fa8bb12107141d34a4c0621/src%2Flibrustc_incremental%2Fassert_module_sources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38e613c4eb165f778fa8bb12107141d34a4c0621/src%2Flibrustc_incremental%2Fassert_module_sources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fassert_module_sources.rs?ref=38e613c4eb165f778fa8bb12107141d34a4c0621", "patch": "@@ -44,7 +44,7 @@ pub fn assert_module_sources(tcx: TyCtxt<'_>) {\n \n         let ams = AssertModuleSource { tcx, available_cgus };\n \n-        for attr in tcx.hir().krate().attrs {\n+        for attr in tcx.hir().krate().item.attrs {\n             ams.check_attr(attr);\n         }\n     })"}, {"sha": "852998c9e7da38a42204baf3bfade3fd269d7d0c", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38e613c4eb165f778fa8bb12107141d34a4c0621/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38e613c4eb165f778fa8bb12107141d34a4c0621/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=38e613c4eb165f778fa8bb12107141d34a4c0621", "patch": "@@ -399,7 +399,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingDoc {\n     }\n \n     fn check_crate(&mut self, cx: &LateContext<'_, '_>, krate: &hir::Crate<'_>) {\n-        self.check_missing_docs_attrs(cx, None, &krate.attrs, krate.span, \"crate\");\n+        self.check_missing_docs_attrs(cx, None, &krate.item.attrs, krate.item.span, \"crate\");\n \n         for macro_def in krate.exported_macros {\n             let has_doc = macro_def.attrs.iter().any(|a| has_doc(a));"}, {"sha": "839057a75a655deef6496354d8da2b3f03966a86", "filename": "src/librustc_lint/late.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38e613c4eb165f778fa8bb12107141d34a4c0621/src%2Flibrustc_lint%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38e613c4eb165f778fa8bb12107141d34a4c0621/src%2Flibrustc_lint%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flate.rs?ref=38e613c4eb165f778fa8bb12107141d34a4c0621", "patch": "@@ -419,7 +419,7 @@ fn late_lint_pass_crate<'tcx, T: for<'a> LateLintPass<'a, 'tcx>>(tcx: TyCtxt<'tc\n     let mut cx = LateContextAndPass { context, pass };\n \n     // Visit the whole crate.\n-    cx.with_lint_attrs(hir::CRATE_HIR_ID, &krate.attrs, |cx| {\n+    cx.with_lint_attrs(hir::CRATE_HIR_ID, &krate.item.attrs, |cx| {\n         // since the root module isn't visited as an item (because it isn't an\n         // item), warn for it here.\n         lint_callback!(cx, check_crate, krate);"}, {"sha": "6fddf1535c9c5a4713e5ae44831f86a96805b242", "filename": "src/librustc_lint/levels.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38e613c4eb165f778fa8bb12107141d34a4c0621/src%2Flibrustc_lint%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38e613c4eb165f778fa8bb12107141d34a4c0621/src%2Flibrustc_lint%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flevels.rs?ref=38e613c4eb165f778fa8bb12107141d34a4c0621", "patch": "@@ -29,7 +29,7 @@ fn lint_levels(tcx: TyCtxt<'_>, cnum: CrateNum) -> &LintLevelMap {\n     let mut builder = LintLevelMapBuilder { levels, tcx, store };\n     let krate = tcx.hir().krate();\n \n-    let push = builder.levels.push(&krate.attrs, &store);\n+    let push = builder.levels.push(&krate.item.attrs, &store);\n     builder.levels.register_id(hir::CRATE_HIR_ID);\n     for macro_def in krate.exported_macros {\n         builder.levels.register_id(macro_def.hir_id);"}, {"sha": "13668b2423fddf27452bdda804d8b2be7eb7d6e5", "filename": "src/librustc_metadata/link_args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38e613c4eb165f778fa8bb12107141d34a4c0621/src%2Flibrustc_metadata%2Flink_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38e613c4eb165f778fa8bb12107141d34a4c0621/src%2Flibrustc_metadata%2Flink_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flink_args.rs?ref=38e613c4eb165f778fa8bb12107141d34a4c0621", "patch": "@@ -8,7 +8,7 @@ crate fn collect(tcx: TyCtxt<'_>) -> Vec<String> {\n     let mut collector = Collector { args: Vec::new() };\n     tcx.hir().krate().visit_all_item_likes(&mut collector);\n \n-    for attr in tcx.hir().krate().attrs.iter() {\n+    for attr in tcx.hir().krate().item.attrs.iter() {\n         if attr.has_name(sym::link_args) {\n             if let Some(linkarg) = attr.value_str() {\n                 collector.add_link_args(&linkarg.as_str());"}, {"sha": "e69b4fd619599afe7d71dcdeaf035b5064c00ec2", "filename": "src/librustc_metadata/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38e613c4eb165f778fa8bb12107141d34a4c0621/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38e613c4eb165f778fa8bb12107141d34a4c0621/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs?ref=38e613c4eb165f778fa8bb12107141d34a4c0621", "patch": "@@ -331,7 +331,7 @@ impl<'tcx> EncodeContext<'tcx> {\n     fn encode_info_for_items(&mut self) {\n         let krate = self.tcx.hir().krate();\n         let vis = Spanned { span: rustc_span::DUMMY_SP, node: hir::VisibilityKind::Public };\n-        self.encode_info_for_mod(hir::CRATE_HIR_ID, &krate.module, &krate.attrs, &vis);\n+        self.encode_info_for_mod(hir::CRATE_HIR_ID, &krate.item.module, &krate.item.attrs, &vis);\n         krate.visit_all_item_likes(&mut self.as_deep_visitor());\n         for macro_def in krate.exported_macros {\n             self.visit_macro_def(macro_def);"}, {"sha": "c29c552202aa1b681f79d5bc6836007be0e45070", "filename": "src/librustc_passes/entry.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38e613c4eb165f778fa8bb12107141d34a4c0621/src%2Flibrustc_passes%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38e613c4eb165f778fa8bb12107141d34a4c0621/src%2Flibrustc_passes%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fentry.rs?ref=38e613c4eb165f778fa8bb12107141d34a4c0621", "patch": "@@ -59,7 +59,7 @@ fn entry_fn(tcx: TyCtxt<'_>, cnum: CrateNum) -> Option<(DefId, EntryFnType)> {\n     }\n \n     // If the user wants no main function at all, then stop here.\n-    if attr::contains_name(&tcx.hir().krate().attrs, sym::no_main) {\n+    if attr::contains_name(&tcx.hir().krate().item.attrs, sym::no_main) {\n         return None;\n     }\n \n@@ -157,7 +157,7 @@ fn configure_main(tcx: TyCtxt<'_>, visitor: &EntryContext<'_, '_>) -> Option<(De\n }\n \n fn no_main_err(tcx: TyCtxt<'_>, visitor: &EntryContext<'_, '_>) {\n-    let sp = tcx.hir().krate().span;\n+    let sp = tcx.hir().krate().item.span;\n     if *tcx.sess.parse_sess.reached_eof.borrow() {\n         // There's an unclosed brace that made the parser reach `Eof`, we shouldn't complain about\n         // the missing `fn main()` then as it might have been hidden inside an unclosed block."}, {"sha": "84ba245998ce742d084c5acc3e42bd4ac45f0557", "filename": "src/librustc_passes/stability.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/38e613c4eb165f778fa8bb12107141d34a4c0621/src%2Flibrustc_passes%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38e613c4eb165f778fa8bb12107141d34a4c0621/src%2Flibrustc_passes%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fstability.rs?ref=38e613c4eb165f778fa8bb12107141d34a4c0621", "patch": "@@ -459,8 +459,8 @@ fn new_index(tcx: TyCtxt<'tcx>) -> Index<'tcx> {\n \n         annotator.annotate(\n             hir::CRATE_HIR_ID,\n-            &krate.attrs,\n-            krate.span,\n+            &krate.item.attrs,\n+            krate.item.span,\n             AnnotationKind::Required,\n             |v| intravisit::walk_crate(v, krate),\n         );\n@@ -585,7 +585,7 @@ pub fn check_unused_or_stable_features(tcx: TyCtxt<'_>) {\n     if tcx.stability().staged_api[&LOCAL_CRATE] {\n         let krate = tcx.hir().krate();\n         let mut missing = MissingStabilityAnnotations { tcx, access_levels };\n-        missing.check_missing_stability(hir::CRATE_HIR_ID, krate.span, \"crate\");\n+        missing.check_missing_stability(hir::CRATE_HIR_ID, krate.item.span, \"crate\");\n         intravisit::walk_crate(&mut missing, krate);\n         krate.visit_all_item_likes(&mut missing.as_deep_visitor());\n     }"}, {"sha": "0e0cb8ccb0c61020c27a269d2d3c1e5aaa7c33b9", "filename": "src/librustc_trait_selection/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38e613c4eb165f778fa8bb12107141d34a4c0621/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38e613c4eb165f778fa8bb12107141d34a4c0621/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=38e613c4eb165f778fa8bb12107141d34a4c0621", "patch": "@@ -282,7 +282,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     }\n                 }\n \n-                hir::Node::Crate => return,\n+                hir::Node::Crate(..) => return,\n \n                 _ => {}\n             }"}, {"sha": "e2fca8f39a3983d922646ffc8eb50a878729a1c6", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38e613c4eb165f778fa8bb12107141d34a4c0621/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38e613c4eb165f778fa8bb12107141d34a4c0621/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=38e613c4eb165f778fa8bb12107141d34a4c0621", "patch": "@@ -141,6 +141,7 @@ impl Clean<ExternalCrate> for CrateNum {\n             cx.tcx\n                 .hir()\n                 .krate()\n+                .item\n                 .module\n                 .item_ids\n                 .iter()\n@@ -194,6 +195,7 @@ impl Clean<ExternalCrate> for CrateNum {\n             cx.tcx\n                 .hir()\n                 .krate()\n+                .item\n                 .module\n                 .item_ids\n                 .iter()"}, {"sha": "85ccb55333b321d9ad03303ce53c21c15a88c004", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/38e613c4eb165f778fa8bb12107141d34a4c0621/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38e613c4eb165f778fa8bb12107141d34a4c0621/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=38e613c4eb165f778fa8bb12107141d34a4c0621", "patch": "@@ -112,7 +112,7 @@ pub fn run(options: Options) -> i32 {\n                         compiler.session().opts.unstable_features.is_nightly_build(),\n                     ),\n                 };\n-                hir_collector.visit_testable(\"\".to_string(), &krate.attrs, |this| {\n+                hir_collector.visit_testable(\"\".to_string(), &krate.item.attrs, |this| {\n                     intravisit::walk_crate(this, krate);\n                 });\n             });\n@@ -146,6 +146,7 @@ fn scrape_test_config(krate: &::rustc_hir::Crate) -> TestOptions {\n         TestOptions { no_crate_inject: false, display_warnings: false, attrs: Vec::new() };\n \n     let test_attrs: Vec<_> = krate\n+        .item\n         .attrs\n         .iter()\n         .filter(|a| a.check_name(sym::doc))"}, {"sha": "6e34f731e3bd0c8e1c00f75d95342c262dbaa859", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/38e613c4eb165f778fa8bb12107141d34a4c0621/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38e613c4eb165f778fa8bb12107141d34a4c0621/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=38e613c4eb165f778fa8bb12107141d34a4c0621", "patch": "@@ -64,11 +64,11 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n \n     pub fn visit(mut self, krate: &'tcx hir::Crate) -> Module<'tcx> {\n         let mut module = self.visit_mod_contents(\n-            krate.span,\n-            krate.attrs,\n+            krate.item.span,\n+            krate.item.attrs,\n             &Spanned { span: rustc_span::DUMMY_SP, node: hir::VisibilityKind::Public },\n             hir::CRATE_HIR_ID,\n-            &krate.module,\n+            &krate.item.module,\n             None,\n         );\n         // Attach the crate's exported macros to the top-level module:"}]}