{"sha": "3545289603dae852fb2b99181e9be5e3117b0a2e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1NDUyODk2MDNkYWU4NTJmYjJiOTkxODFlOWJlNWUzMTE3YjBhMmU=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2021-01-02T14:48:22Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2021-01-02T14:48:22Z"}, "message": "Use arena instead of vec", "tree": {"sha": "637b17a8899f5bb0187eebb2ccabaac5736f4b81", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/637b17a8899f5bb0187eebb2ccabaac5736f4b81"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3545289603dae852fb2b99181e9be5e3117b0a2e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3545289603dae852fb2b99181e9be5e3117b0a2e", "html_url": "https://github.com/rust-lang/rust/commit/3545289603dae852fb2b99181e9be5e3117b0a2e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3545289603dae852fb2b99181e9be5e3117b0a2e/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe5340d970b764175ebf8b8c32c971fa04c49efb", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe5340d970b764175ebf8b8c32c971fa04c49efb", "html_url": "https://github.com/rust-lang/rust/commit/fe5340d970b764175ebf8b8c32c971fa04c49efb"}], "stats": {"total": 38, "additions": 16, "deletions": 22}, "files": [{"sha": "6042e15b2280b0d9d2a9a97bbd0c04ccebcccd20", "filename": "crates/hir_expand/src/hygiene.rs", "status": "modified", "additions": 16, "deletions": 22, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/3545289603dae852fb2b99181e9be5e3117b0a2e/crates%2Fhir_expand%2Fsrc%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3545289603dae852fb2b99181e9be5e3117b0a2e/crates%2Fhir_expand%2Fsrc%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fhygiene.rs?ref=3545289603dae852fb2b99181e9be5e3117b0a2e", "patch": "@@ -4,6 +4,7 @@\n //! this moment, this is horribly incomplete and handles only `$crate`.\n use std::sync::Arc;\n \n+use arena::{Arena, Idx};\n use base_db::CrateId;\n use either::Either;\n use mbe::Origin;\n@@ -46,7 +47,7 @@ impl Hygiene {\n         let frames = self.frames.as_ref()?;\n \n         let mut token = path.syntax().first_token()?;\n-        let mut current = frames.0.first();\n+        let mut current = frames.first();\n \n         while let Some((frame, data)) =\n             current.and_then(|it| Some((it, it.expansion.as_ref()?.map_token_up(&token)?)))\n@@ -55,18 +56,15 @@ impl Hygiene {\n             if origin == Origin::Def {\n                 return if frame.local_inner { frame.krate } else { None };\n             }\n-            current = frames.get(frame.call_site?);\n+            current = Some(&frames.0[frame.call_site?]);\n             token = mapped.value;\n         }\n         None\n     }\n }\n \n-#[derive(Clone, Debug, Copy)]\n-struct HygieneFrameId(usize);\n-\n-#[derive(Clone, Debug, Default)]\n-struct HygieneFrames(Vec<HygieneFrame>);\n+#[derive(Default, Debug)]\n+struct HygieneFrames(Arena<HygieneFrame>);\n \n #[derive(Clone, Debug)]\n struct HygieneFrame {\n@@ -76,8 +74,8 @@ struct HygieneFrame {\n     local_inner: bool,\n     krate: Option<CrateId>,\n \n-    call_site: Option<HygieneFrameId>,\n-    def_site: Option<HygieneFrameId>,\n+    call_site: Option<Idx<HygieneFrame>>,\n+    def_site: Option<Idx<HygieneFrame>>,\n }\n \n impl HygieneFrames {\n@@ -87,7 +85,7 @@ impl HygieneFrames {\n         frames\n     }\n \n-    fn add(&mut self, db: &dyn AstDatabase, file_id: HirFileId) -> Option<HygieneFrameId> {\n+    fn add(&mut self, db: &dyn AstDatabase, file_id: HirFileId) -> Option<Idx<HygieneFrame>> {\n         let (krate, local_inner) = match file_id.0 {\n             HirFileIdRepr::FileId(_) => (None, false),\n             HirFileIdRepr::MacroFile(macro_file) => match macro_file.macro_call_id {\n@@ -108,24 +106,20 @@ impl HygieneFrames {\n         let expansion = file_id.expansion_info(db);\n         let expansion = match expansion {\n             None => {\n-                let idx = self.0.len();\n-                self.0.push(HygieneFrame {\n+                return Some(self.0.alloc(HygieneFrame {\n                     expansion: None,\n                     local_inner,\n                     krate,\n                     call_site: None,\n                     def_site: None,\n-                });\n-                return Some(HygieneFrameId(idx));\n+                }));\n             }\n             Some(it) => it,\n         };\n \n         let def_site = expansion.def.clone();\n         let call_site = expansion.arg.file_id;\n-\n-        let idx = self.0.len();\n-        self.0.push(HygieneFrame {\n+        let idx = self.0.alloc(HygieneFrame {\n             expansion: Some(expansion),\n             local_inner,\n             krate,\n@@ -136,16 +130,16 @@ impl HygieneFrames {\n         self.0[idx].call_site = self.add(db, call_site);\n         self.0[idx].def_site = def_site.and_then(|it| self.add(db, it.file_id));\n \n-        Some(HygieneFrameId(idx))\n+        Some(idx)\n     }\n \n-    fn get(&self, id: HygieneFrameId) -> Option<&HygieneFrame> {\n-        self.0.get(id.0)\n+    fn first(&self) -> Option<&HygieneFrame> {\n+        self.0.iter().next().map(|it| it.1)\n     }\n \n     fn root_crate(&self, name_ref: &ast::NameRef) -> Option<CrateId> {\n         let mut token = name_ref.syntax().first_token()?;\n-        let first = self.0.first()?;\n+        let first = self.first()?;\n         let mut result = first.krate;\n         let mut current = Some(first);\n \n@@ -164,7 +158,7 @@ impl HygieneFrames {\n                 Some(it) => it,\n             };\n \n-            current = self.get(site);\n+            current = Some(&self.0[site]);\n             token = mapped.value;\n         }\n "}]}