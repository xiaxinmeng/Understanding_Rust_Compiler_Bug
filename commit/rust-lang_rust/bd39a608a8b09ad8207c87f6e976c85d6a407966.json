{"sha": "bd39a608a8b09ad8207c87f6e976c85d6a407966", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkMzlhNjA4YThiMDlhZDgyMDdjODdmNmU5NzZjODVkNmE0MDc5NjY=", "commit": {"author": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2019-12-03T12:21:00Z"}, "committer": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2019-12-03T12:25:41Z"}, "message": "Formatting", "tree": {"sha": "3587caf518d085c6e1ac065558878661288a3b79", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3587caf518d085c6e1ac065558878661288a3b79"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd39a608a8b09ad8207c87f6e976c85d6a407966", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZxoS6lESXlRGMHWcaTCGhp1QZjcFAl3mVEUACgkQaTCGhp1Q\nZjcKDg/+KUHMVGNFO+Zf5zfya42SrIel4+fm8La73crfrThtIkKaolbXJBDXWHcA\nAgZvvU7bWKDTm1pIS8uqaZWepsysp5dqk9oTHft7cdJInTDQoyl0wpYWKscK5nrO\n5sDBelr0JgRsCXfbkIL3v/ii9lCXBH/kamksJKj/Vqv7FXcu33SF5FIgecUIJrzO\nUxmKZfnfIFdlHZNV6KPxFJL+oMS8DFq6YUMhKdVwVsyDssetYdYw9cqBq6JYozEh\n8AkBaHHphLY2CjqUj6xeYhiZoznV7ulgIXrgj4d7P/E3GJbUiGL8aQJQFUXP+zqh\ntE5oarl9geERPgZvUxtPseA+c3oLZ5BxTm2OhGZVTUq7POrnyrnL371Pk4LLQyfX\nJAcM45z2/+ON5sIWHeq6FfhnjtYdMc5eKP/Bip62WggDYxk6MEdZyfhyu7kmGZY7\n/hjy2z2jLyswhyOqlmSJ4yANBm7jlqjZMZDIBX4R/iimIVDe0w6n708iphNgpKeo\niB41kpbq2owUkjSJHANLV+Ct/RRjcjvXcqVLb+iJQLmQYdrKMI616CEElFra5jKc\n23v8r1GOhSM2Jmg/14W048ShthksqY64CdHV4jFLFEFKOt89XBYjSLKFM7ivh6U1\nLScrK1/Nov3HClGt+D49H41QbCCh+4RSsEstbzIjy6hsqBQsUHE=\n=mHFR\n-----END PGP SIGNATURE-----", "payload": "tree 3587caf518d085c6e1ac065558878661288a3b79\nparent d1d5f790f575c4872f500287d54135a3f0361623\nauthor flip1995 <hello@philkrones.com> 1575375660 +0100\ncommitter flip1995 <hello@philkrones.com> 1575375941 +0100\n\nFormatting\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd39a608a8b09ad8207c87f6e976c85d6a407966", "html_url": "https://github.com/rust-lang/rust/commit/bd39a608a8b09ad8207c87f6e976c85d6a407966", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd39a608a8b09ad8207c87f6e976c85d6a407966/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1d5f790f575c4872f500287d54135a3f0361623", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1d5f790f575c4872f500287d54135a3f0361623", "html_url": "https://github.com/rust-lang/rust/commit/d1d5f790f575c4872f500287d54135a3f0361623"}], "stats": {"total": 59, "additions": 34, "deletions": 25}, "files": [{"sha": "bb294c467fa8302e15b505881c8349a96631f40f", "filename": "clippy_lints/src/swap.rs", "status": "modified", "additions": 34, "deletions": 25, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/bd39a608a8b09ad8207c87f6e976c85d6a407966/clippy_lints%2Fsrc%2Fswap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd39a608a8b09ad8207c87f6e976c85d6a407966/clippy_lints%2Fsrc%2Fswap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fswap.rs?ref=bd39a608a8b09ad8207c87f6e976c85d6a407966", "patch": "@@ -111,42 +111,51 @@ fn check_manual_swap(cx: &LateContext<'_, '_>, block: &Block) {\n                     return;\n                 } else if let Slice::Swappable(slice, idx1, idx2) = slice {\n                     if let Some(slice) = Sugg::hir_opt(cx, slice) {\n-                        (false,\n-                         format!(\" elements of `{}`\", slice),\n-                         format!(\"{}.swap({}, {})\",\n-                                 slice.maybe_par(),\n-                                 snippet(cx, idx1.span, \"..\"),\n-                                 snippet(cx, idx2.span, \"..\")))\n+                        (\n+                            false,\n+                            format!(\" elements of `{}`\", slice),\n+                            format!(\n+                                \"{}.swap({}, {})\",\n+                                slice.maybe_par(),\n+                                snippet(cx, idx1.span, \"..\"),\n+                                snippet(cx, idx2.span, \"..\"),\n+                            ),\n+                        )\n                     } else {\n                         (false, String::new(), String::new())\n                     }\n                 } else if let (Some(first), Some(second)) = (Sugg::hir_opt(cx, lhs1), Sugg::hir_opt(cx, rhs1)) {\n-                    (true, format!(\" `{}` and `{}`\", first, second),\n-                        format!(\"std::mem::swap({}, {})\", first.mut_addr(), second.mut_addr()))\n+                    (\n+                        true,\n+                        format!(\" `{}` and `{}`\", first, second),\n+                        format!(\"std::mem::swap({}, {})\", first.mut_addr(), second.mut_addr()),\n+                    )\n                 } else {\n                     (true, String::new(), String::new())\n                 };\n \n                 let span = w[0].span.to(second.span);\n \n-                span_lint_and_then(cx,\n-                                   MANUAL_SWAP,\n-                                   span,\n-                                   &format!(\"this looks like you are swapping{} manually\", what),\n-                                   |db| {\n-                                       if !sugg.is_empty() {\n-                                           db.span_suggestion(\n-                                               span,\n-                                               \"try\",\n-                                               sugg,\n-                                               Applicability::Unspecified,\n-                                           );\n+                span_lint_and_then(\n+                    cx,\n+                    MANUAL_SWAP,\n+                    span,\n+                    &format!(\"this looks like you are swapping{} manually\", what),\n+                    |db| {\n+                        if !sugg.is_empty() {\n+                            db.span_suggestion(\n+                                span,\n+                                \"try\",\n+                                sugg,\n+                                Applicability::Unspecified,\n+                            );\n \n-                                           if replace {\n-                                               db.note(\"or maybe you should use `std::mem::replace`?\");\n-                                           }\n-                                       }\n-                                   });\n+                            if replace {\n+                                db.note(\"or maybe you should use `std::mem::replace`?\");\n+                            }\n+                        }\n+                    }\n+                );\n             }\n         }\n     }"}]}