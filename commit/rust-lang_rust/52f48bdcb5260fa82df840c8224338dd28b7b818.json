{"sha": "52f48bdcb5260fa82df840c8224338dd28b7b818", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyZjQ4YmRjYjUyNjBmYTgyZGY4NDBjODIyNDMzOGRkMjhiN2I4MTg=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-05-09T22:00:14Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-05-09T22:00:20Z"}, "message": "Rollup merge of #33493 - Manishearth:more-diag, r=Manishearth\n\n r? @GuillaumeGomez", "tree": {"sha": "bba6328b56f6a5e4086c4fb73ae57d55c20c3c31", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bba6328b56f6a5e4086c4fb73ae57d55c20c3c31"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/52f48bdcb5260fa82df840c8224338dd28b7b818", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXMQh0AAoJEDu/TT4u95+Y8ocP/23taA0QhAYEVzoVqMilmCeE\nmCcB+m8ldBYedCLcT23rZfcB7UK9hOYnbuelQHbenVpxkpPEcvDOnronbsJb0wmj\nn5r6v1ilzUJdd5++p2E+xlX6On4SegPjEm5Ny2BTGPa+gmawfSMNZx7KjQ2sO6fH\n9m/4989jpJGpjYhrBvz+9WjeSJxeE6J1EKS/mjhcpRNTRnL4PpUefqlX5XYn7SIL\nMHfu7MeH0mQmU12gNNxuOXOhwibS0483I/g7SZop3uSpLe/+4NTGIPd5dRW5MA1A\n2lsZC56XcCNeyGB5TPRMLUzNel9QpFFK26aI8rcZ1lwBm22uXz3+iR82mRxPjWU3\nor8lO/x7piAEhPAqzR8jJVmOiP2vgJsvHNxljSkPXMp43H3PNYL2FDL/0msKpLhU\np5RR8Vym8hkg1qsymGeNkrdhnuoJ/06i5yZ7sC1jbfOLzpEyA/HDDw3XS7SBDM8N\ninTLi3rcp1c2nQQLeEEfmYdweBnNWRMPZgf2fBV06bCfAPSPQqrtBiit3oxIvLKp\nxpGxrq3nhhFJNTSA7Je7PZoXu+nrRlOPSCyP2zKmUu/ST0Cw3JkCyeYiR+yNDpcp\nc3b3Yh8u+D9PHQT3Nz80zeciaGiOj9I/IW5HSVFVhrDzG0VIxmmT/WThoPpxd/5o\n2yG+g+1QZ4cfMT5a+Cnu\n=lqod\n-----END PGP SIGNATURE-----", "payload": "tree bba6328b56f6a5e4086c4fb73ae57d55c20c3c31\nparent 433f907050432af6396a317525f60579c604b3e0\nparent 84843b73dc8e54f1e8c1e4418b7d56dbd513dd65\nauthor Manish Goregaokar <manishsmail@gmail.com> 1462831214 -0700\ncommitter Manish Goregaokar <manishsmail@gmail.com> 1462831220 -0700\n\nRollup merge of #33493 - Manishearth:more-diag, r=Manishearth\n\n r? @GuillaumeGomez\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/52f48bdcb5260fa82df840c8224338dd28b7b818", "html_url": "https://github.com/rust-lang/rust/commit/52f48bdcb5260fa82df840c8224338dd28b7b818", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/52f48bdcb5260fa82df840c8224338dd28b7b818/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "433f907050432af6396a317525f60579c604b3e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/433f907050432af6396a317525f60579c604b3e0", "html_url": "https://github.com/rust-lang/rust/commit/433f907050432af6396a317525f60579c604b3e0"}, {"sha": "84843b73dc8e54f1e8c1e4418b7d56dbd513dd65", "url": "https://api.github.com/repos/rust-lang/rust/commits/84843b73dc8e54f1e8c1e4418b7d56dbd513dd65", "html_url": "https://github.com/rust-lang/rust/commit/84843b73dc8e54f1e8c1e4418b7d56dbd513dd65"}], "stats": {"total": 115, "additions": 94, "deletions": 21}, "files": [{"sha": "351486220528952eae1c86f36257182369671e96", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 86, "deletions": 4, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/52f48bdcb5260fa82df840c8224338dd28b7b818/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52f48bdcb5260fa82df840c8224338dd28b7b818/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=52f48bdcb5260fa82df840c8224338dd28b7b818", "patch": "@@ -497,6 +497,91 @@ impl Bar {\n ```\n \"##,\n \n+E0408: r##\"\n+An \"or\" pattern was used where the variable bindings are not consistently bound\n+across patterns.\n+\n+Example of erroneous code:\n+\n+```compile_fail\n+match x {\n+    Some(y) | None => { /* use y */ } // error: variable `y` from pattern #1 is\n+                                      //        not bound in pattern #2\n+    _ => ()\n+}\n+```\n+\n+Here, `y` is bound to the contents of the `Some` and can be used within the\n+block corresponding to the match arm. However, in case `x` is `None`, we have\n+not specified what `y` is, and the block will use a nonexistent variable.\n+\n+To fix this error, either split into multiple match arms:\n+\n+```\n+let x = Some(1);\n+match x {\n+    Some(y) => { /* use y */ }\n+    None => { /* ... */ }\n+}\n+```\n+\n+or, bind the variable to a field of the same type in all sub-patterns of the\n+or pattern:\n+\n+```\n+let x = (0, 2);\n+match x {\n+    (0, y) | (y, 0) => { /* use y */}\n+    _ => {}\n+}\n+```\n+\n+In this example, if `x` matches the pattern `(0, _)`, the second field is set\n+to `y`. If it matches `(_, 0)`, the first field is set to `y`; so in all\n+cases `y` is set to some value.\n+\"##,\n+\n+E0409: r##\"\n+An \"or\" pattern was used where the variable bindings are not consistently bound\n+across patterns.\n+\n+Example of erroneous code:\n+\n+```compile_fail\n+let x = (0, 2);\n+match x {\n+    (0, ref y) | (y, 0) => { /* use y */} // error: variable `y` is bound with\n+                                          //        different mode in pattern #2\n+                                          //        than in pattern #1\n+    _ => ()\n+}\n+```\n+\n+Here, `y` is bound by-value in one case and by-reference in the other.\n+\n+To fix this error, just use the same mode in both cases.\n+Generally using `ref` or `ref mut` where not already used will fix this:\n+\n+```ignore\n+let x = (0, 2);\n+match x {\n+    (0, ref y) | (ref y, 0) => { /* use y */}\n+    _ => ()\n+}\n+```\n+\n+Alternatively, split the pattern:\n+\n+```\n+let x = (0, 2);\n+match x {\n+    (y, 0) => { /* use y */ }\n+    (0, ref y) => { /* use y */}\n+    _ => ()\n+}\n+```\n+\"##,\n+\n E0411: r##\"\n The `Self` keyword was used outside an impl or a trait. Erroneous code example:\n \n@@ -1145,10 +1230,7 @@ register_diagnostics! {\n //  E0258,\n     E0402, // cannot use an outer type parameter in this context\n     E0406, // undeclared associated type\n-    E0408, // variable from pattern #1 is not bound in pattern #\n-    E0409, // variable is bound with different mode in pattern # than in\n-           // pattern #1\n-    E0410, // variable from pattern is not bound in pattern 1\n+//  E0410, merged into 408\n     E0418, // is not an enum variant, struct or const\n     E0420, // is not an associated const\n     E0421, // unresolved associated const"}, {"sha": "e3c2a9300baf83beb1ade0215b497dcf950a4555", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 8, "deletions": 17, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/52f48bdcb5260fa82df840c8224338dd28b7b818/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52f48bdcb5260fa82df840c8224338dd28b7b818/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=52f48bdcb5260fa82df840c8224338dd28b7b818", "patch": "@@ -126,12 +126,10 @@ enum ResolutionError<'a> {\n     TypeNotMemberOfTrait(Name, &'a str),\n     /// error E0438: const is not a member of trait\n     ConstNotMemberOfTrait(Name, &'a str),\n-    /// error E0408: variable `{}` from pattern #1 is not bound in pattern\n-    VariableNotBoundInPattern(Name, usize),\n+    /// error E0408: variable `{}` from pattern #{} is not bound in pattern #{}\n+    VariableNotBoundInPattern(Name, usize, usize),\n     /// error E0409: variable is bound with different mode in pattern #{} than in pattern #1\n     VariableBoundWithDifferentMode(Name, usize),\n-    /// error E0410: variable from pattern is not bound in pattern #1\n-    VariableNotBoundInParentPattern(Name, usize),\n     /// error E0411: use of `Self` outside of an impl or trait\n     SelfUsedOutsideImplOrTrait,\n     /// error E0412: use of undeclared\n@@ -272,13 +270,14 @@ fn resolve_struct_error<'b, 'a: 'b, 'tcx: 'a>(resolver: &'b Resolver<'a, 'tcx>,\n                              const_,\n                              trait_)\n         }\n-        ResolutionError::VariableNotBoundInPattern(variable_name, pattern_number) => {\n+        ResolutionError::VariableNotBoundInPattern(variable_name, from, to) => {\n             struct_span_err!(resolver.session,\n                              span,\n                              E0408,\n-                             \"variable `{}` from pattern #1 is not bound in pattern #{}\",\n+                             \"variable `{}` from pattern #{} is not bound in pattern #{}\",\n                              variable_name,\n-                             pattern_number)\n+                             from,\n+                             to)\n         }\n         ResolutionError::VariableBoundWithDifferentMode(variable_name, pattern_number) => {\n             struct_span_err!(resolver.session,\n@@ -289,14 +288,6 @@ fn resolve_struct_error<'b, 'a: 'b, 'tcx: 'a>(resolver: &'b Resolver<'a, 'tcx>,\n                              variable_name,\n                              pattern_number)\n         }\n-        ResolutionError::VariableNotBoundInParentPattern(variable_name, pattern_number) => {\n-            struct_span_err!(resolver.session,\n-                             span,\n-                             E0410,\n-                             \"variable `{}` from pattern #{} is not bound in pattern #1\",\n-                             variable_name,\n-                             pattern_number)\n-        }\n         ResolutionError::SelfUsedOutsideImplOrTrait => {\n             struct_span_err!(resolver.session,\n                              span,\n@@ -2038,7 +2029,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                     None => {\n                         resolve_error(self,\n                                       p.span,\n-                                      ResolutionError::VariableNotBoundInPattern(key, i + 1));\n+                                      ResolutionError::VariableNotBoundInPattern(key, 1, i + 1));\n                     }\n                     Some(binding_i) => {\n                         if binding_0.binding_mode != binding_i.binding_mode {\n@@ -2055,7 +2046,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                 if !map_0.contains_key(&key) {\n                     resolve_error(self,\n                                   binding.span,\n-                                  ResolutionError::VariableNotBoundInParentPattern(key, i + 1));\n+                                  ResolutionError::VariableNotBoundInPattern(key, i + 1, 1));\n                 }\n             }\n         }"}]}