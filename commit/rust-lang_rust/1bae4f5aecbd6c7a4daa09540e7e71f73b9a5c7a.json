{"sha": "1bae4f5aecbd6c7a4daa09540e7e71f73b9a5c7a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiYWU0ZjVhZWNiZDZjN2E0ZGFhMDk1NDBlN2U3MWY3M2I5YTVjN2E=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-08-07T22:01:29Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-08-08T08:51:50Z"}, "message": "optimize redundant borrows", "tree": {"sha": "5e90f302b902b8a46f20e0a278ba6f4d9c9dcf4c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e90f302b902b8a46f20e0a278ba6f4d9c9dcf4c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1bae4f5aecbd6c7a4daa09540e7e71f73b9a5c7a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1bae4f5aecbd6c7a4daa09540e7e71f73b9a5c7a", "html_url": "https://github.com/rust-lang/rust/commit/1bae4f5aecbd6c7a4daa09540e7e71f73b9a5c7a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1bae4f5aecbd6c7a4daa09540e7e71f73b9a5c7a/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b7989d1dffb0d1b36dd8f4a7b11ea98ed7dc2ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b7989d1dffb0d1b36dd8f4a7b11ea98ed7dc2ba", "html_url": "https://github.com/rust-lang/rust/commit/3b7989d1dffb0d1b36dd8f4a7b11ea98ed7dc2ba"}], "stats": {"total": 30, "additions": 22, "deletions": 8}, "files": [{"sha": "2e0cbf4326bc1e03acce2e5b14d67ddae1dd971f", "filename": "src/librustc_mir/borrow_check/borrow_set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bae4f5aecbd6c7a4daa09540e7e71f73b9a5c7a/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bae4f5aecbd6c7a4daa09540e7e71f73b9a5c7a/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs?ref=1bae4f5aecbd6c7a4daa09540e7e71f73b9a5c7a", "patch": "@@ -159,7 +159,7 @@ impl<'a, 'gcx, 'tcx> Visitor<'tcx> for GatherBorrows<'a, 'gcx, 'tcx> {\n         location: mir::Location,\n     ) {\n         if let mir::Rvalue::Ref(region, kind, ref borrowed_place) = *rvalue {\n-            if borrowed_place.is_unsafe_place(self.tcx, self.mir) {\n+            if borrowed_place.ignore_borrow(self.tcx, self.mir) {\n                 return;\n             }\n "}, {"sha": "be0091068c2e20326f77e64b1bc9d8e2d21cf7ce", "filename": "src/librustc_mir/borrow_check/place_ext.rs", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1bae4f5aecbd6c7a4daa09540e7e71f73b9a5c7a/src%2Flibrustc_mir%2Fborrow_check%2Fplace_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bae4f5aecbd6c7a4daa09540e7e71f73b9a5c7a/src%2Flibrustc_mir%2Fborrow_check%2Fplace_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fplace_ext.rs?ref=1bae4f5aecbd6c7a4daa09540e7e71f73b9a5c7a", "patch": "@@ -15,16 +15,19 @@ use rustc::ty::{self, TyCtxt};\n \n /// Extension methods for the `Place` type.\n crate trait PlaceExt<'tcx> {\n-    /// True if this is a deref of a raw pointer.\n-    fn is_unsafe_place(&self, tcx: TyCtxt<'_, '_, 'tcx>, mir: &Mir<'tcx>) -> bool;\n+    /// Returns true if we can safely ignore borrows of this place.\n+    /// This is true whenever there is no action that the user can do\n+    /// to the place `self` that would invalidate the borrow. This is true\n+    /// for borrows of raw pointer dereferents as well as shared references.\n+    fn ignore_borrow(&self, tcx: TyCtxt<'_, '_, 'tcx>, mir: &Mir<'tcx>) -> bool;\n \n     /// If this is a place like `x.f.g`, returns the local\n     /// `x`. Returns `None` if this is based in a static.\n     fn root_local(&self) -> Option<Local>;\n }\n \n impl<'tcx> PlaceExt<'tcx> for Place<'tcx> {\n-    fn is_unsafe_place(&self, tcx: TyCtxt<'_, '_, 'tcx>, mir: &Mir<'tcx>) -> bool {\n+    fn ignore_borrow(&self, tcx: TyCtxt<'_, '_, 'tcx>, mir: &Mir<'tcx>) -> bool {\n         match self {\n             Place::Promoted(_) |\n             Place::Local(_) => false,\n@@ -36,12 +39,23 @@ impl<'tcx> PlaceExt<'tcx> for Place<'tcx> {\n                 | ProjectionElem::Downcast(..)\n                 | ProjectionElem::Subslice { .. }\n                 | ProjectionElem::ConstantIndex { .. }\n-                | ProjectionElem::Index(_) => proj.base.is_unsafe_place(tcx, mir),\n+                | ProjectionElem::Index(_) => proj.base.ignore_borrow(tcx, mir),\n+\n                 ProjectionElem::Deref => {\n                     let ty = proj.base.ty(mir, tcx).to_ty(tcx);\n                     match ty.sty {\n-                        ty::TyRawPtr(..) => true,\n-                        _ => proj.base.is_unsafe_place(tcx, mir),\n+                        // For both derefs of raw pointers and `&T`\n+                        // references, the original path is `Copy` and\n+                        // therefore not significant.  In particular,\n+                        // there is nothing the user can do to the\n+                        // original path that would invalidate the\n+                        // newly created reference -- and if there\n+                        // were, then the user could have copied the\n+                        // original path into a new variable and\n+                        // borrowed *that* one, leaving the original\n+                        // path unborrowed.\n+                        ty::TyRawPtr(..) | ty::TyRef(_, _, hir::MutImmutable) => true,\n+                        _ => proj.base.ignore_borrow(tcx, mir),\n                     }\n                 }\n             },"}, {"sha": "b0c4d37814e8b02b84118cfb0edf36e8a21f5b78", "filename": "src/librustc_mir/dataflow/impls/borrows.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bae4f5aecbd6c7a4daa09540e7e71f73b9a5c7a/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bae4f5aecbd6c7a4daa09540e7e71f73b9a5c7a/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs?ref=1bae4f5aecbd6c7a4daa09540e7e71f73b9a5c7a", "patch": "@@ -233,7 +233,7 @@ impl<'a, 'gcx, 'tcx> BitDenotation for Borrows<'a, 'gcx, 'tcx> {\n                 // propagate_call_return method.\n \n                 if let mir::Rvalue::Ref(region, _, ref place) = *rhs {\n-                    if place.is_unsafe_place(self.tcx, self.mir) { return; }\n+                    if place.ignore_borrow(self.tcx, self.mir) { return; }\n                     let index = self.borrow_set.location_map.get(&location).unwrap_or_else(|| {\n                         panic!(\"could not find BorrowIndex for location {:?}\", location);\n                     });"}]}