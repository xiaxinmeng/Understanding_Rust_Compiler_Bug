{"sha": "c9e568f72e98ea4b754d3b318967f4d45534ab40", "node_id": "C_kwDOAAsO6NoAKGM5ZTU2OGY3MmU5OGVhNGI3NTRkM2IzMTg5NjdmNGQ0NTUzNGFiNDA", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-04-18T14:00:42Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-04-18T14:14:06Z"}, "message": "avoid pairing up AllocId and PointerTag, which is redundant", "tree": {"sha": "4910eb8869dad59ee0fc46174a8be8d1023c6ce7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4910eb8869dad59ee0fc46174a8be8d1023c6ce7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9e568f72e98ea4b754d3b318967f4d45534ab40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9e568f72e98ea4b754d3b318967f4d45534ab40", "html_url": "https://github.com/rust-lang/rust/commit/c9e568f72e98ea4b754d3b318967f4d45534ab40", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9e568f72e98ea4b754d3b318967f4d45534ab40/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54ab357a5b3041acf77cfcb99ddddadf945fe5aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/54ab357a5b3041acf77cfcb99ddddadf945fe5aa", "html_url": "https://github.com/rust-lang/rust/commit/54ab357a5b3041acf77cfcb99ddddadf945fe5aa"}], "stats": {"total": 66, "additions": 43, "deletions": 23}, "files": [{"sha": "f386c7f36dc5c44661d705be01d36b9c23aa5cca", "filename": "compiler/rustc_const_eval/src/interpret/machine.rs", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c9e568f72e98ea4b754d3b318967f4d45534ab40/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9e568f72e98ea4b754d3b318967f4d45534ab40/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs?ref=c9e568f72e98ea4b754d3b318967f4d45534ab40", "patch": "@@ -88,6 +88,10 @@ pub trait Machine<'mir, 'tcx>: Sized {\n     /// Pointers are \"tagged\" with provenance information; typically the `AllocId` they belong to.\n     type PointerTag: Provenance + Eq + Hash + 'static;\n \n+    /// When getting the AllocId of a pointer, some extra data is also obtained from the tag\n+    /// that is passed to memory access hooks so they can do things with it.\n+    type TagExtra: Copy + 'static;\n+\n     /// Machines can define extra (non-instance) things that represent values of function pointers.\n     /// For example, Miri uses this to return a function pointer from `dlsym`\n     /// that can later be called to execute the right thing.\n@@ -285,11 +289,14 @@ pub trait Machine<'mir, 'tcx>: Sized {\n         addr: u64,\n     ) -> Pointer<Option<Self::PointerTag>>;\n \n-    /// Convert a pointer with provenance into an allocation-offset pair.\n+    /// Convert a pointer with provenance into an allocation-offset pair\n+    /// and extra provenance info.\n+    ///\n+    /// The returned `AllocId` must be the same as `ptr.provenance.get_alloc_id()`.\n     fn ptr_get_alloc(\n         ecx: &InterpCx<'mir, 'tcx, Self>,\n         ptr: Pointer<Self::PointerTag>,\n-    ) -> (AllocId, Size);\n+    ) -> (AllocId, Size, Self::TagExtra);\n \n     /// Called to initialize the \"extra\" state of an allocation and make the pointers\n     /// it contains (in relocations) tagged.  The way we construct allocations is\n@@ -321,7 +328,7 @@ pub trait Machine<'mir, 'tcx>: Sized {\n         _tcx: TyCtxt<'tcx>,\n         _machine: &Self,\n         _alloc_extra: &Self::AllocExtra,\n-        _tag: Self::PointerTag,\n+        _tag: (AllocId, Self::TagExtra),\n         _range: AllocRange,\n     ) -> InterpResult<'tcx> {\n         Ok(())\n@@ -333,7 +340,7 @@ pub trait Machine<'mir, 'tcx>: Sized {\n         _tcx: TyCtxt<'tcx>,\n         _machine: &mut Self,\n         _alloc_extra: &mut Self::AllocExtra,\n-        _tag: Self::PointerTag,\n+        _tag: (AllocId, Self::TagExtra),\n         _range: AllocRange,\n     ) -> InterpResult<'tcx> {\n         Ok(())\n@@ -345,7 +352,7 @@ pub trait Machine<'mir, 'tcx>: Sized {\n         _tcx: TyCtxt<'tcx>,\n         _machine: &mut Self,\n         _alloc_extra: &mut Self::AllocExtra,\n-        _tag: Self::PointerTag,\n+        _tag: (AllocId, Self::TagExtra),\n         _range: AllocRange,\n     ) -> InterpResult<'tcx> {\n         Ok(())\n@@ -397,6 +404,8 @@ pub trait Machine<'mir, 'tcx>: Sized {\n // (CTFE and ConstProp) use the same instance.  Here, we share that code.\n pub macro compile_time_machine(<$mir: lifetime, $tcx: lifetime>) {\n     type PointerTag = AllocId;\n+    type TagExtra = ();\n+\n     type ExtraFnVal = !;\n \n     type MemoryMap =\n@@ -474,9 +483,12 @@ pub macro compile_time_machine(<$mir: lifetime, $tcx: lifetime>) {\n     }\n \n     #[inline(always)]\n-    fn ptr_get_alloc(_ecx: &InterpCx<$mir, $tcx, Self>, ptr: Pointer<AllocId>) -> (AllocId, Size) {\n+    fn ptr_get_alloc(\n+        _ecx: &InterpCx<$mir, $tcx, Self>,\n+        ptr: Pointer<AllocId>,\n+    ) -> (AllocId, Size, Self::TagExtra) {\n         // We know `offset` is relative to the allocation, so we can use `into_parts`.\n         let (alloc_id, offset) = ptr.into_parts();\n-        (alloc_id, offset)\n+        (alloc_id, offset, ())\n     }\n }"}, {"sha": "262a53fc2151835a62f2f025d937636a9644a39d", "filename": "compiler/rustc_const_eval/src/interpret/memory.rs", "status": "modified", "additions": 21, "deletions": 16, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/c9e568f72e98ea4b754d3b318967f4d45534ab40/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9e568f72e98ea4b754d3b318967f4d45534ab40/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs?ref=c9e568f72e98ea4b754d3b318967f4d45534ab40", "patch": "@@ -330,7 +330,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             *self.tcx,\n             &mut self.machine,\n             &mut alloc.extra,\n-            tag,\n+            (alloc_id, tag),\n             alloc_range(Size::ZERO, size),\n         )?;\n \n@@ -350,7 +350,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         ptr: Pointer<Option<M::PointerTag>>,\n         size: Size,\n         align: Align,\n-    ) -> InterpResult<'tcx, Option<(AllocId, Size, M::PointerTag)>> {\n+    ) -> InterpResult<'tcx, Option<(AllocId, Size, M::TagExtra)>> {\n         let align = M::enforce_alignment(&self).then_some(align);\n         self.check_and_deref_ptr(\n             ptr,\n@@ -401,11 +401,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         size: Size,\n         align: Option<Align>,\n         msg: CheckInAllocMsg,\n-        alloc_size: impl FnOnce(\n-            AllocId,\n-            Size,\n-            M::PointerTag,\n-        ) -> InterpResult<'tcx, (Size, Align, T)>,\n+        alloc_size: impl FnOnce(AllocId, Size, M::TagExtra) -> InterpResult<'tcx, (Size, Align, T)>,\n     ) -> InterpResult<'tcx, Option<T>> {\n         fn check_offset_align(offset: u64, align: Align) -> InterpResult<'static> {\n             if offset % align.bytes() == 0 {\n@@ -450,7 +446,10 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 // we want the error to be about the bounds.\n                 if let Some(align) = align {\n                     if M::force_int_for_alignment_check(self) {\n-                        assert!(M::PointerTag::OFFSET_IS_ADDR, \"ptr-to-int cast for align check should never fail\");\n+                        assert!(\n+                            M::PointerTag::OFFSET_IS_ADDR,\n+                            \"ptr-to-int cast for align check should never fail\"\n+                        );\n                         let (_, addr) = ptr.into_parts(); // we checked that offset is absolute\n                         check_offset_align(addr.bytes(), align)?;\n                     } else {\n@@ -575,7 +574,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         )?;\n         if let Some((alloc_id, offset, tag, alloc)) = ptr_and_alloc {\n             let range = alloc_range(offset, size);\n-            M::memory_read(*self.tcx, &self.machine, &alloc.extra, tag, range)?;\n+            M::memory_read(*self.tcx, &self.machine, &alloc.extra, (alloc_id, tag), range)?;\n             Ok(Some(AllocRef { alloc, range, tcx: *self.tcx, alloc_id }))\n         } else {\n             // Even in this branch we have to be sure that we actually access the allocation, in\n@@ -636,7 +635,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             // We cannot call `get_raw_mut` inside `check_and_deref_ptr` as that would duplicate `&mut self`.\n             let (alloc, machine) = self.get_alloc_raw_mut(alloc_id)?;\n             let range = alloc_range(offset, size);\n-            M::memory_written(tcx, machine, &mut alloc.extra, tag, range)?;\n+            M::memory_written(tcx, machine, &mut alloc.extra, (alloc_id, tag), range)?;\n             Ok(Some(AllocRefMut { alloc, range, tcx, alloc_id }))\n         } else {\n             Ok(None)\n@@ -1014,7 +1013,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         };\n         let src_alloc = self.get_alloc_raw(src_alloc_id)?;\n         let src_range = alloc_range(src_offset, size);\n-        M::memory_read(*tcx, &self.machine, &src_alloc.extra, src_tag, src_range)?;\n+        M::memory_read(*tcx, &self.machine, &src_alloc.extra, (src_alloc_id, src_tag), src_range)?;\n         // We need the `dest` ptr for the next operation, so we get it now.\n         // We already did the source checks and called the hooks so we are good to return early.\n         let Some((dest_alloc_id, dest_offset, dest_tag)) = dest_parts else {\n@@ -1039,7 +1038,13 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         // Destination alloc preparations and access hooks.\n         let (dest_alloc, extra) = self.get_alloc_raw_mut(dest_alloc_id)?;\n         let dest_range = alloc_range(dest_offset, size * num_copies);\n-        M::memory_written(*tcx, extra, &mut dest_alloc.extra, dest_tag, dest_range)?;\n+        M::memory_written(\n+            *tcx,\n+            extra,\n+            &mut dest_alloc.extra,\n+            (dest_alloc_id, dest_tag),\n+            dest_range,\n+        )?;\n         let dest_bytes = dest_alloc\n             .get_bytes_mut_ptr(&tcx, dest_range)\n             .map_err(|e| e.to_interp_error(dest_alloc_id))?\n@@ -1158,11 +1163,11 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     pub fn ptr_try_get_alloc_id(\n         &self,\n         ptr: Pointer<Option<M::PointerTag>>,\n-    ) -> Result<(AllocId, Size, M::PointerTag), u64> {\n+    ) -> Result<(AllocId, Size, M::TagExtra), u64> {\n         match ptr.into_pointer_or_addr() {\n             Ok(ptr) => {\n-                let (alloc_id, offset) = M::ptr_get_alloc(self, ptr);\n-                Ok((alloc_id, offset, ptr.provenance))\n+                let (alloc_id, offset, extra) = M::ptr_get_alloc(self, ptr);\n+                Ok((alloc_id, offset, extra))\n             }\n             Err(addr) => Err(addr.bytes()),\n         }\n@@ -1173,7 +1178,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     pub fn ptr_get_alloc_id(\n         &self,\n         ptr: Pointer<Option<M::PointerTag>>,\n-    ) -> InterpResult<'tcx, (AllocId, Size, M::PointerTag)> {\n+    ) -> InterpResult<'tcx, (AllocId, Size, M::TagExtra)> {\n         self.ptr_try_get_alloc_id(ptr).map_err(|offset| {\n             err_ub!(DanglingIntPointer(offset, CheckInAllocMsg::InboundsTest)).into()\n         })"}, {"sha": "5ad2f80f06dbb13c144d5315ca9fc3e8ace91625", "filename": "compiler/rustc_middle/src/mir/interpret/pointer.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c9e568f72e98ea4b754d3b318967f4d45534ab40/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fpointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9e568f72e98ea4b754d3b318967f4d45534ab40/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fpointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fpointer.rs?ref=c9e568f72e98ea4b754d3b318967f4d45534ab40", "patch": "@@ -163,6 +163,9 @@ pub struct Pointer<Tag = AllocId> {\n }\n \n static_assert_size!(Pointer, 16);\n+// `Option<Tag>` pointers are also passed around quite a bit\n+// (but not stored in permanent machine state).\n+static_assert_size!(Pointer<Option<AllocId>>, 16);\n \n // We want the `Debug` output to be readable as it is used by `derive(Debug)` for\n // all the Miri types."}]}