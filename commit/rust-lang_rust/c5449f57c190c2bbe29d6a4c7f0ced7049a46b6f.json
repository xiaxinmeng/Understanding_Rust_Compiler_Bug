{"sha": "c5449f57c190c2bbe29d6a4c7f0ced7049a46b6f", "node_id": "C_kwDOAAsO6NoAKGM1NDQ5ZjU3YzE5MGMyYmJlMjlkNmE0YzdmMGNlZDcwNDlhNDZiNmY", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-05-21T12:19:53Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-05-21T12:21:53Z"}, "message": "rustdoc: Stop using `write!` in `UrlFragment::render`", "tree": {"sha": "8efa4aa581e0bfca982cdc155fa52248ec4d56d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8efa4aa581e0bfca982cdc155fa52248ec4d56d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5449f57c190c2bbe29d6a4c7f0ced7049a46b6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5449f57c190c2bbe29d6a4c7f0ced7049a46b6f", "html_url": "https://github.com/rust-lang/rust/commit/c5449f57c190c2bbe29d6a4c7f0ced7049a46b6f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5449f57c190c2bbe29d6a4c7f0ced7049a46b6f/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f7521db243a90d77d8f8cc263c97abb1e598e03d", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7521db243a90d77d8f8cc263c97abb1e598e03d", "html_url": "https://github.com/rust-lang/rust/commit/f7521db243a90d77d8f8cc263c97abb1e598e03d"}], "stats": {"total": 30, "additions": 16, "deletions": 14}, "files": [{"sha": "6ee80a3476c6a398905d6f72eb7ff0fdad9fa19d", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5449f57c190c2bbe29d6a4c7f0ced7049a46b6f/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5449f57c190c2bbe29d6a4c7f0ced7049a46b6f/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=c5449f57c190c2bbe29d6a4c7f0ced7049a46b6f", "patch": "@@ -525,7 +525,7 @@ impl Item {\n                 if let Ok((mut href, ..)) = href(*did, cx) {\n                     debug!(?href);\n                     if let Some(ref fragment) = *fragment {\n-                        fragment.render(&mut href, cx.tcx()).unwrap()\n+                        fragment.render(&mut href, cx.tcx())\n                     }\n                     Some(RenderedLink {\n                         original_text: s.clone(),"}, {"sha": "b20402e532aa97cea33ab50fd5aca245828ba5d7", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/c5449f57c190c2bbe29d6a4c7f0ced7049a46b6f/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5449f57c190c2bbe29d6a4c7f0ced7049a46b6f/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=c5449f57c190c2bbe29d6a4c7f0ced7049a46b6f", "patch": "@@ -20,7 +20,6 @@ use rustc_span::BytePos;\n use smallvec::{smallvec, SmallVec};\n \n use std::borrow::Cow;\n-use std::fmt::Write;\n use std::mem;\n use std::ops::Range;\n \n@@ -226,34 +225,37 @@ pub(crate) enum UrlFragment {\n \n impl UrlFragment {\n     /// Render the fragment, including the leading `#`.\n-    pub(crate) fn render(&self, s: &mut String, tcx: TyCtxt<'_>) -> std::fmt::Result {\n+    pub(crate) fn render(&self, s: &mut String, tcx: TyCtxt<'_>) {\n         s.push('#');\n         match self {\n             &UrlFragment::Item(def_id) => {\n-                let name = tcx.item_name(def_id);\n-                match tcx.def_kind(def_id) {\n+                let kind = match tcx.def_kind(def_id) {\n                     DefKind::AssocFn => {\n                         if tcx.associated_item(def_id).defaultness.has_value() {\n-                            write!(s, \"method.{}\", name)\n+                            \"method.\"\n                         } else {\n-                            write!(s, \"tymethod.{}\", name)\n+                            \"tymethod.\"\n                         }\n                     }\n-                    DefKind::AssocConst => write!(s, \"associatedconstant.{}\", name),\n-                    DefKind::AssocTy => write!(s, \"associatedtype.{}\", name),\n-                    DefKind::Variant => write!(s, \"variant.{}\", name),\n+                    DefKind::AssocConst => \"associatedconstant.\",\n+                    DefKind::AssocTy => \"associatedtype.\",\n+                    DefKind::Variant => \"variant.\",\n                     DefKind::Field => {\n                         let parent_id = tcx.parent(def_id);\n                         if tcx.def_kind(parent_id) == DefKind::Variant {\n-                            write!(s, \"variant.{}.field.{}\", tcx.item_name(parent_id), name)\n+                            s.push_str(\"variant.\");\n+                            s.push_str(tcx.item_name(parent_id).as_str());\n+                            \".field.\"\n                         } else {\n-                            write!(s, \"structfield.{}\", name)\n+                            \"structfield.\"\n                         }\n                     }\n                     kind => bug!(\"unexpected associated item kind: {:?}\", kind),\n-                }\n+                };\n+                s.push_str(kind);\n+                s.push_str(tcx.item_name(def_id).as_str());\n             }\n-            UrlFragment::UserWritten(raw) => Ok(s.push_str(&raw)),\n+            UrlFragment::UserWritten(raw) => s.push_str(&raw),\n         }\n     }\n }"}]}