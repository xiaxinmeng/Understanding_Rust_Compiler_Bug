{"sha": "eaf1c7a0da0bb86eeaf983b8ad05ae471477bb84", "node_id": "C_kwDOAAsO6NoAKGVhZjFjN2EwZGEwYmI4NmVlYWY5ODNiOGFkMDVhZTQ3MTQ3N2JiODQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-09-30T21:38:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-09-30T21:38:27Z"}, "message": "Rollup merge of #102493 - nnethercote:improve-size-assertions-some-more, r=lqd\n\nGroup together more size assertions.\n\nAlso add a few more assertions for some relevant token-related types.\n\nAnd fix an erroneous comment in `rustc_errors`.\n\nr? `@lqd`", "tree": {"sha": "2eaee2a3ee1385f96a2230ab8873f8d2c20562ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2eaee2a3ee1385f96a2230ab8873f8d2c20562ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eaf1c7a0da0bb86eeaf983b8ad05ae471477bb84", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjN2HTCRBK7hj4Ov3rIwAAKh4IAFfsXqLiQFq7DS2B93Hv+WI6\n9/4fiUAkLPu9dLfErnKFTgCQ7iTeL2YNsiOMKDvz71NAK7OhfLuH+DIG1g5SKNVl\njlkv7Y0ZQZGEODgmqBDdHE/m/+V7tTlpnvRolXu6lQH7wFHGAhM1Qak6Fdqvdy9p\nX9wqOMYUMPmt4Yc/JTniKlCgf4wWJJRfgIw8qo3nFMOn1YaMAZ+lw90t+2HGnXF0\n35MkQb1jz9Z4WLzD9IYHZxCD8Y/uYHybnHaV1B1tta6eGV6Avdqe46RdqqCBvfQs\nvphYlihoj7Bwjty6X0Ah9sbW39AqJUmr0uWrxJY7TaODIEcH9+AZWVLBm1EmZ+A=\n=cxcC\n-----END PGP SIGNATURE-----\n", "payload": "tree 2eaee2a3ee1385f96a2230ab8873f8d2c20562ec\nparent 842a7d34f52b6cd644905222192b7f653e6fcdbe\nparent 5ab68a82d592c43f7699d739003a4a7680f35e8f\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1664573907 +0200\ncommitter GitHub <noreply@github.com> 1664573907 +0200\n\nRollup merge of #102493 - nnethercote:improve-size-assertions-some-more, r=lqd\n\nGroup together more size assertions.\n\nAlso add a few more assertions for some relevant token-related types.\n\nAnd fix an erroneous comment in `rustc_errors`.\n\nr? `@lqd`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eaf1c7a0da0bb86eeaf983b8ad05ae471477bb84", "html_url": "https://github.com/rust-lang/rust/commit/eaf1c7a0da0bb86eeaf983b8ad05ae471477bb84", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eaf1c7a0da0bb86eeaf983b8ad05ae471477bb84/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "842a7d34f52b6cd644905222192b7f653e6fcdbe", "url": "https://api.github.com/repos/rust-lang/rust/commits/842a7d34f52b6cd644905222192b7f653e6fcdbe", "html_url": "https://github.com/rust-lang/rust/commit/842a7d34f52b6cd644905222192b7f653e6fcdbe"}, {"sha": "5ab68a82d592c43f7699d739003a4a7680f35e8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ab68a82d592c43f7699d739003a4a7680f35e8f", "html_url": "https://github.com/rust-lang/rust/commit/5ab68a82d592c43f7699d739003a4a7680f35e8f"}], "stats": {"total": 62, "additions": 37, "deletions": 25}, "files": [{"sha": "99034799b3c3121ed1855cf3f6da8c1984c92fa3", "filename": "compiler/rustc_ast/src/token.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/eaf1c7a0da0bb86eeaf983b8ad05ae471477bb84/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf1c7a0da0bb86eeaf983b8ad05ae471477bb84/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs?ref=eaf1c7a0da0bb86eeaf983b8ad05ae471477bb84", "patch": "@@ -256,10 +256,6 @@ pub enum TokenKind {\n     Eof,\n }\n \n-// `TokenKind` is used a lot. Make sure it doesn't unintentionally get bigger.\n-#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-rustc_data_structures::static_assert_size!(TokenKind, 16);\n-\n #[derive(Clone, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]\n pub struct Token {\n     pub kind: TokenKind,\n@@ -752,10 +748,6 @@ pub enum Nonterminal {\n     NtVis(P<ast::Visibility>),\n }\n \n-// `Nonterminal` is used a lot. Make sure it doesn't unintentionally get bigger.\n-#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-rustc_data_structures::static_assert_size!(Nonterminal, 16);\n-\n #[derive(Debug, Copy, Clone, PartialEq, Encodable, Decodable)]\n pub enum NonterminalKind {\n     Item,\n@@ -894,3 +886,16 @@ where\n         panic!(\"interpolated tokens should not be present in the HIR\")\n     }\n }\n+\n+// Some types are used a lot. Make sure they don't unintentionally get bigger.\n+#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n+mod size_asserts {\n+    use super::*;\n+    use rustc_data_structures::static_assert_size;\n+    // These are in alphabetical order, which is easy to maintain.\n+    static_assert_size!(Lit, 12);\n+    static_assert_size!(LitKind, 2);\n+    static_assert_size!(Nonterminal, 16);\n+    static_assert_size!(Token, 24);\n+    static_assert_size!(TokenKind, 16);\n+}"}, {"sha": "824206a99d8d3d0fa9c1c3a5e273f7d9757b28a0", "filename": "compiler/rustc_ast/src/tokenstream.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/eaf1c7a0da0bb86eeaf983b8ad05ae471477bb84/compiler%2Frustc_ast%2Fsrc%2Ftokenstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf1c7a0da0bb86eeaf983b8ad05ae471477bb84/compiler%2Frustc_ast%2Fsrc%2Ftokenstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Ftokenstream.rs?ref=eaf1c7a0da0bb86eeaf983b8ad05ae471477bb84", "patch": "@@ -47,10 +47,6 @@ pub enum TokenTree {\n     Delimited(DelimSpan, Delimiter, TokenStream),\n }\n \n-// This type is used a lot. Make sure it doesn't unintentionally get bigger.\n-#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-rustc_data_structures::static_assert_size!(TokenTree, 32);\n-\n // Ensure all fields of `TokenTree` is `Send` and `Sync`.\n #[cfg(parallel_compiler)]\n fn _dummy()\n@@ -308,10 +304,6 @@ pub struct AttributesData {\n #[derive(Clone, Debug, Default, Encodable, Decodable)]\n pub struct TokenStream(pub(crate) Lrc<Vec<TokenTree>>);\n \n-// `TokenStream` is used a lot. Make sure it doesn't unintentionally get bigger.\n-#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-rustc_data_structures::static_assert_size!(TokenStream, 8);\n-\n #[derive(Clone, Copy, Debug, PartialEq, Encodable, Decodable, HashStable_Generic)]\n pub enum Spacing {\n     Alone,\n@@ -664,3 +656,16 @@ impl DelimSpan {\n         self.open.with_hi(self.close.hi())\n     }\n }\n+\n+// Some types are used a lot. Make sure they don't unintentionally get bigger.\n+#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n+mod size_asserts {\n+    use super::*;\n+    use rustc_data_structures::static_assert_size;\n+    // These are in alphabetical order, which is easy to maintain.\n+    static_assert_size!(AttrTokenStream, 8);\n+    static_assert_size!(AttrTokenTree, 32);\n+    static_assert_size!(LazyAttrTokenStream, 8);\n+    static_assert_size!(TokenStream, 8);\n+    static_assert_size!(TokenTree, 32);\n+}"}, {"sha": "c6ede209e65f62469d87d983b3ce270f2a687df7", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaf1c7a0da0bb86eeaf983b8ad05ae471477bb84/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf1c7a0da0bb86eeaf983b8ad05ae471477bb84/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=eaf1c7a0da0bb86eeaf983b8ad05ae471477bb84", "patch": "@@ -66,7 +66,7 @@ pub type PErr<'a> = DiagnosticBuilder<'a, ErrorGuaranteed>;\n pub type PResult<'a, T> = Result<T, PErr<'a>>;\n \n // `PResult` is used a lot. Make sure it doesn't unintentionally get bigger.\n-// (See also the comment on `DiagnosticBuilder`'s `diagnostic` field.)\n+// (See also the comment on `DiagnosticBuilderInner`'s `diagnostic` field.)\n #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n rustc_data_structures::static_assert_size!(PResult<'_, ()>, 16);\n #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]"}, {"sha": "0dc05475ce9447f3f7189690be8b82afc3f779b2", "filename": "compiler/rustc_parse/src/parser/attr_wrapper.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/eaf1c7a0da0bb86eeaf983b8ad05ae471477bb84/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr_wrapper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf1c7a0da0bb86eeaf983b8ad05ae471477bb84/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr_wrapper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr_wrapper.rs?ref=eaf1c7a0da0bb86eeaf983b8ad05ae471477bb84", "patch": "@@ -32,11 +32,6 @@ pub struct AttrWrapper {\n     start_pos: usize,\n }\n \n-// This struct is passed around very frequently,\n-// so make sure it doesn't accidentally get larger\n-#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-rustc_data_structures::static_assert_size!(AttrWrapper, 16);\n-\n impl AttrWrapper {\n     pub(super) fn new(attrs: AttrVec, start_pos: usize) -> AttrWrapper {\n         AttrWrapper { attrs, start_pos }\n@@ -96,9 +91,6 @@ struct LazyAttrTokenStreamImpl {\n     replace_ranges: Box<[ReplaceRange]>,\n }\n \n-#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-rustc_data_structures::static_assert_size!(LazyAttrTokenStreamImpl, 144);\n-\n impl ToAttrTokenStream for LazyAttrTokenStreamImpl {\n     fn to_attr_token_stream(&self) -> AttrTokenStream {\n         // The token produced by the final call to `{,inlined_}next` was not\n@@ -461,3 +453,13 @@ fn make_token_stream(\n     }\n     AttrTokenStream::new(final_buf.inner)\n }\n+\n+// Some types are used a lot. Make sure they don't unintentionally get bigger.\n+#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n+mod size_asserts {\n+    use super::*;\n+    use rustc_data_structures::static_assert_size;\n+    // These are in alphabetical order, which is easy to maintain.\n+    static_assert_size!(AttrWrapper, 16);\n+    static_assert_size!(LazyAttrTokenStreamImpl, 144);\n+}"}]}