{"sha": "9f6df672381bdb0077a91ed785c80fef78eb8def", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmNmRmNjcyMzgxYmRiMDA3N2E5MWVkNzg1YzgwZmVmNzhlYjhkZWY=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-01-28T21:55:07Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-01-28T21:55:07Z"}, "message": "test track_caller with fn ptrs", "tree": {"sha": "9bda4362971533a5d9b8f8e20b6d50d6c7a70e02", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9bda4362971533a5d9b8f8e20b6d50d6c7a70e02"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f6df672381bdb0077a91ed785c80fef78eb8def", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f6df672381bdb0077a91ed785c80fef78eb8def", "html_url": "https://github.com/rust-lang/rust/commit/9f6df672381bdb0077a91ed785c80fef78eb8def", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f6df672381bdb0077a91ed785c80fef78eb8def/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83403581bb7a2156f4752fc2d0ceef4b3ec75554", "url": "https://api.github.com/repos/rust-lang/rust/commits/83403581bb7a2156f4752fc2d0ceef4b3ec75554", "html_url": "https://github.com/rust-lang/rust/commit/83403581bb7a2156f4752fc2d0ceef4b3ec75554"}], "stats": {"total": 30, "additions": 26, "deletions": 4}, "files": [{"sha": "f6797c24ebecf327ee3458b6cbfa7d2308d6aad3", "filename": "tests/run-pass/track-caller-attribute.rs", "status": "modified", "additions": 26, "deletions": 4, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/9f6df672381bdb0077a91ed785c80fef78eb8def/tests%2Frun-pass%2Ftrack-caller-attribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6df672381bdb0077a91ed785c80fef78eb8def/tests%2Frun-pass%2Ftrack-caller-attribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Ftrack-caller-attribute.rs?ref=9f6df672381bdb0077a91ed785c80fef78eb8def", "patch": "@@ -19,15 +19,33 @@ macro_rules! caller_location_from_macro {\n     () => (core::panic::Location::caller());\n }\n \n+fn test_fn_ptr() {\n+    fn pass_to_ptr_call<T>(f: fn(T), x: T) {\n+        f(x);\n+    }\n+\n+    #[track_caller]\n+    fn tracked_unit(_: ()) {\n+        let expected_line = line!() - 1;\n+        let location = std::panic::Location::caller();\n+        assert_eq!(location.file(), file!());\n+        assert_eq!(location.line(), expected_line, \"call shims report location as fn definition\");\n+    }\n+\n+    pass_to_ptr_call(tracked_unit, ());\n+}\n+\n fn main() {\n     let location = Location::caller();\n+    let expected_line = line!() - 1;\n     assert_eq!(location.file(), file!());\n-    assert_eq!(location.line(), 23);\n+    assert_eq!(location.line(), expected_line);\n     assert_eq!(location.column(), 20);\n \n     let tracked = tracked();\n+    let expected_line = line!() - 1;\n     assert_eq!(tracked.file(), file!());\n-    assert_eq!(tracked.line(), 28);\n+    assert_eq!(tracked.line(), expected_line);\n     assert_eq!(tracked.column(), 19);\n \n     let nested = nested_intrinsic();\n@@ -43,12 +61,16 @@ fn main() {\n     // `Location::caller()` in a macro should behave similarly to `file!` and `line!`,\n     // i.e. point to where the macro was invoked, instead of the macro itself.\n     let inmacro = caller_location_from_macro!();\n+    let expected_line = line!() - 1;\n     assert_eq!(inmacro.file(), file!());\n-    assert_eq!(inmacro.line(), 45);\n+    assert_eq!(inmacro.line(), expected_line);\n     assert_eq!(inmacro.column(), 19);\n \n     let intrinsic = core::intrinsics::caller_location();\n+    let expected_line = line!() - 1;\n     assert_eq!(intrinsic.file(), file!());\n-    assert_eq!(intrinsic.line(), 50);\n+    assert_eq!(intrinsic.line(), expected_line);\n     assert_eq!(intrinsic.column(), 21);\n+\n+    test_fn_ptr();\n }"}]}