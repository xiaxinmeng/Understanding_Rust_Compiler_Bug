{"sha": "df64c5d260d3841ded8affe68f1be6e47ed1fb26", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmNjRjNWQyNjBkMzg0MWRlZDhhZmZlNjhmMWJlNmU0N2VkMWZiMjY=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2020-04-08T18:54:31Z"}, "committer": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2020-04-14T01:58:17Z"}, "message": "Incorporate feedback into diagnostics", "tree": {"sha": "7760084b954794850e135f70324162d0fcf7e787", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7760084b954794850e135f70324162d0fcf7e787"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df64c5d260d3841ded8affe68f1be6e47ed1fb26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df64c5d260d3841ded8affe68f1be6e47ed1fb26", "html_url": "https://github.com/rust-lang/rust/commit/df64c5d260d3841ded8affe68f1be6e47ed1fb26", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df64c5d260d3841ded8affe68f1be6e47ed1fb26/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "00795a99401865e6ade63600619eb5ee5a34e7c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/00795a99401865e6ade63600619eb5ee5a34e7c6", "html_url": "https://github.com/rust-lang/rust/commit/00795a99401865e6ade63600619eb5ee5a34e7c6"}], "stats": {"total": 90, "additions": 41, "deletions": 49}, "files": [{"sha": "77ecdd08f78e0a88d610dba6b567182b992e20d0", "filename": "src/librustc_trait_selection/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 18, "deletions": 26, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/df64c5d260d3841ded8affe68f1be6e47ed1fb26/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df64c5d260d3841ded8affe68f1be6e47ed1fb26/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=df64c5d260d3841ded8affe68f1be6e47ed1fb26", "patch": "@@ -1318,7 +1318,8 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 _ => false,\n             })\n             .unwrap_or(false);\n-        let await_or_yield = if is_async { \"await\" } else { \"yield\" };\n+        let (await_or_yield, an_await_or_yield) =\n+            if is_async { (\"await\", \"an await\") } else { (\"yield\", \"a yield\") };\n         let future_or_generator = if is_async { \"future\" } else { \"generator\" };\n \n         // Special case the primary error message when send or sync is the trait that was\n@@ -1364,38 +1365,26 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             span.push_span_label(original_span, message);\n             err.set_span(span);\n \n-            format!(\"{} is not {}\", future_or_generator, trait_name)\n+            format!(\"is not {}\", trait_name)\n         } else {\n-            format!(\n-                \"{} does not implement `{}`\",\n-                future_or_generator,\n-                trait_ref.print_only_trait_path()\n-            )\n-        };\n-\n-        let push_target_span_with_fallback = |span: &mut MultiSpan, fallback: &str| {\n-            if target_ty.is_impl_trait() {\n-                // It's not very useful to tell the user the type if it's opaque.\n-                span.push_span_label(target_span, fallback.to_string());\n-            } else {\n-                span.push_span_label(target_span, format!(\"has type `{}`\", target_ty));\n-            }\n+            format!(\"does not implement `{}`\", trait_ref.print_only_trait_path())\n         };\n \n         if let Some(await_span) = from_awaited_ty {\n             // The type causing this obligation is one being awaited at await_span.\n             let mut span = MultiSpan::from_span(await_span);\n \n-            if target_span == await_span {\n-                push_target_span_with_fallback(&mut span, \"await occurs here\");\n-            } else {\n-                span.push_span_label(await_span, \"await occurs here\".to_string());\n-                push_target_span_with_fallback(&mut span, \"created here\");\n-            }\n+            span.push_span_label(\n+                await_span,\n+                format!(\"await occurs here on type `{}`, which {}\", target_ty, trait_explanation),\n+            );\n \n             err.span_note(\n                 span,\n-                &format!(\"{} as this value is used in an await\", trait_explanation),\n+                &format!(\n+                    \"future {not_trait} as it awaits another future which {not_trait}\",\n+                    not_trait = trait_explanation\n+                ),\n             );\n         } else {\n             // Look at the last interior type to get a span for the `.await`.\n@@ -1410,7 +1399,10 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 format!(\"{} occurs here, with `{}` maybe used later\", await_or_yield, snippet),\n             );\n \n-            push_target_span_with_fallback(&mut span, \"created here\");\n+            span.push_span_label(\n+                target_span,\n+                format!(\"has type `{}` which {}\", target_ty, trait_explanation),\n+            );\n \n             // If available, use the scope span to annotate the drop location.\n             if let Some(scope_span) = scope_span {\n@@ -1423,8 +1415,8 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             err.span_note(\n                 span,\n                 &format!(\n-                    \"{} as this value is used across an {}\",\n-                    trait_explanation, await_or_yield\n+                    \"{} {} as this value is used across {}\",\n+                    future_or_generator, trait_explanation, an_await_or_yield\n                 ),\n             );\n         }"}, {"sha": "d36d59f1f68f6b6be7d4493dc42084999b9cc7a2", "filename": "src/test/ui/async-await/async-fn-nonsend.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/df64c5d260d3841ded8affe68f1be6e47ed1fb26/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-nonsend.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/df64c5d260d3841ded8affe68f1be6e47ed1fb26/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-nonsend.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-nonsend.stderr?ref=df64c5d260d3841ded8affe68f1be6e47ed1fb26", "patch": "@@ -12,7 +12,7 @@ note: future is not `Send` as this value is used across an await\n   --> $DIR/async-fn-nonsend.rs:24:5\n    |\n LL |     let x = non_send();\n-   |         - created here\n+   |         - has type `impl std::fmt::Debug` which is not `Send`\n LL |     drop(x);\n LL |     fut().await;\n    |     ^^^^^^^^^^^ await occurs here, with `x` maybe used later\n@@ -33,7 +33,7 @@ note: future is not `Send` as this value is used across an await\n   --> $DIR/async-fn-nonsend.rs:33:20\n    |\n LL |     match Some(non_send()) {\n-   |                ---------- created here\n+   |                ---------- has type `impl std::fmt::Debug` which is not `Send`\n LL |         Some(_) => fut().await,\n    |                    ^^^^^^^^^^^ await occurs here, with `non_send()` maybe used later\n ...\n@@ -54,7 +54,7 @@ note: future is not `Send` as this value is used across an await\n   --> $DIR/async-fn-nonsend.rs:42:9\n    |\n LL |     let f: &mut std::fmt::Formatter = panic!();\n-   |         - has type `&mut std::fmt::Formatter<'_>`\n+   |         - has type `&mut std::fmt::Formatter<'_>` which is not `Send`\n LL |     if non_sync().fmt(f).unwrap() == () {\n LL |         fut().await;\n    |         ^^^^^^^^^^^ await occurs here, with `f` maybe used later"}, {"sha": "42e9e4642cea521257bf28b233038ef5b73d4266", "filename": "src/test/ui/async-await/issue-64130-1-sync.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df64c5d260d3841ded8affe68f1be6e47ed1fb26/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-1-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/df64c5d260d3841ded8affe68f1be6e47ed1fb26/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-1-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-1-sync.stderr?ref=df64c5d260d3841ded8affe68f1be6e47ed1fb26", "patch": "@@ -12,7 +12,7 @@ note: future is not `Sync` as this value is used across an await\n   --> $DIR/issue-64130-1-sync.rs:15:5\n    |\n LL |     let x = Foo;\n-   |         - has type `Foo`\n+   |         - has type `Foo` which is not `Sync`\n LL |     baz().await;\n    |     ^^^^^^^^^^^ await occurs here, with `x` maybe used later\n LL | }"}, {"sha": "f6f834618d36f26bb6c70df18b3a33cb84243522", "filename": "src/test/ui/async-await/issue-64130-2-send.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df64c5d260d3841ded8affe68f1be6e47ed1fb26/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-2-send.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/df64c5d260d3841ded8affe68f1be6e47ed1fb26/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-2-send.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-2-send.stderr?ref=df64c5d260d3841ded8affe68f1be6e47ed1fb26", "patch": "@@ -12,7 +12,7 @@ note: future is not `Send` as this value is used across an await\n   --> $DIR/issue-64130-2-send.rs:15:5\n    |\n LL |     let x = Foo;\n-   |         - has type `Foo`\n+   |         - has type `Foo` which is not `Send`\n LL |     baz().await;\n    |     ^^^^^^^^^^^ await occurs here, with `x` maybe used later\n LL | }"}, {"sha": "3475b66b375dd6b4c471dcbf874cb2d6da7ee3b6", "filename": "src/test/ui/async-await/issue-64130-3-other.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df64c5d260d3841ded8affe68f1be6e47ed1fb26/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-3-other.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/df64c5d260d3841ded8affe68f1be6e47ed1fb26/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-3-other.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-3-other.stderr?ref=df64c5d260d3841ded8affe68f1be6e47ed1fb26", "patch": "@@ -16,7 +16,7 @@ note: future does not implement `Qux` as this value is used across an await\n   --> $DIR/issue-64130-3-other.rs:18:5\n    |\n LL |     let x = Foo;\n-   |         - has type `Foo`\n+   |         - has type `Foo` which does not implement `Qux`\n LL |     baz().await;\n    |     ^^^^^^^^^^^ await occurs here, with `x` maybe used later\n LL | }"}, {"sha": "fc231d394c11f6ddbb1b175991e64d4a588383ef", "filename": "src/test/ui/async-await/issue-64130-4-async-move.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df64c5d260d3841ded8affe68f1be6e47ed1fb26/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-4-async-move.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/df64c5d260d3841ded8affe68f1be6e47ed1fb26/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-4-async-move.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-4-async-move.stderr?ref=df64c5d260d3841ded8affe68f1be6e47ed1fb26", "patch": "@@ -18,7 +18,7 @@ note: future is not `Send` as this value is used across an await\n   --> $DIR/issue-64130-4-async-move.rs:21:26\n    |\n LL |         match client.status() {\n-   |               ------ has type `&Client`\n+   |               ------ has type `&Client` which is not `Send`\n LL |             200 => {\n LL |                 let _x = get().await;\n    |                          ^^^^^^^^^^^ await occurs here, with `client` maybe used later"}, {"sha": "f72757339cc5ef1e152116a3b708088f23d6df6e", "filename": "src/test/ui/async-await/issue-64130-non-send-future-diags.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df64c5d260d3841ded8affe68f1be6e47ed1fb26/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-non-send-future-diags.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/df64c5d260d3841ded8affe68f1be6e47ed1fb26/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-non-send-future-diags.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-non-send-future-diags.stderr?ref=df64c5d260d3841ded8affe68f1be6e47ed1fb26", "patch": "@@ -12,7 +12,7 @@ note: future is not `Send` as this value is used across an await\n   --> $DIR/issue-64130-non-send-future-diags.rs:15:5\n    |\n LL |     let g = x.lock().unwrap();\n-   |         - has type `std::sync::MutexGuard<'_, u32>`\n+   |         - has type `std::sync::MutexGuard<'_, u32>` which is not `Send`\n LL |     baz().await;\n    |     ^^^^^^^^^^^ await occurs here, with `g` maybe used later\n LL | }"}, {"sha": "b43478ee2070bc4fe1d6cb04bec50d21ed8f80a3", "filename": "src/test/ui/async-await/issue-67252-unnamed-future.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df64c5d260d3841ded8affe68f1be6e47ed1fb26/src%2Ftest%2Fui%2Fasync-await%2Fissue-67252-unnamed-future.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/df64c5d260d3841ded8affe68f1be6e47ed1fb26/src%2Ftest%2Fui%2Fasync-await%2Fissue-67252-unnamed-future.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-67252-unnamed-future.stderr?ref=df64c5d260d3841ded8affe68f1be6e47ed1fb26", "patch": "@@ -12,7 +12,7 @@ note: future is not `Send` as this value is used across an await\n   --> $DIR/issue-67252-unnamed-future.rs:20:9\n    |\n LL |         let _a = std::ptr::null_mut::<()>(); // `*mut ()` is not `Send`\n-   |             -- has type `*mut ()`\n+   |             -- has type `*mut ()` which is not `Send`\n LL |         AFuture.await;\n    |         ^^^^^^^^^^^^^ await occurs here, with `_a` maybe used later\n LL |     });"}, {"sha": "11b178368080745b1b1c2eb4a5e067587faf2ddb", "filename": "src/test/ui/async-await/issue-68112.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df64c5d260d3841ded8affe68f1be6e47ed1fb26/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df64c5d260d3841ded8affe68f1be6e47ed1fb26/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.rs?ref=df64c5d260d3841ded8affe68f1be6e47ed1fb26", "patch": "@@ -49,6 +49,8 @@ fn make_non_send_future2() -> impl Future<Output = Arc<RefCell<i32>>> {\n     ready2(Arc::new(RefCell::new(0)))\n }\n \n+// Ideally this test would have diagnostics similar to the test above, but right\n+// now it doesn't.\n fn test2() {\n     let send_fut = async {\n         let non_send_fut = make_non_send_future2();"}, {"sha": "78462868ede53b2f70dafe916e947fa459d081c0", "filename": "src/test/ui/async-await/issue-68112.stderr", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/df64c5d260d3841ded8affe68f1be6e47ed1fb26/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/df64c5d260d3841ded8affe68f1be6e47ed1fb26/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.stderr?ref=df64c5d260d3841ded8affe68f1be6e47ed1fb26", "patch": "@@ -8,13 +8,11 @@ LL |     require_send(send_fut);\n    |     ^^^^^^^^^^^^ future created by async block is not `Send`\n    |\n    = help: the trait `std::marker::Sync` is not implemented for `std::cell::RefCell<i32>`\n-note: future is not `Send` as this value is used in an await\n+note: future is not `Send` as it awaits another future which is not `Send`\n   --> $DIR/issue-68112.rs:31:17\n    |\n-LL |         let non_send_fut = make_non_send_future1();\n-   |             ------------ created here\n LL |         let _ = non_send_fut.await;\n-   |                 ^^^^^^^^^^^^ await occurs here\n+   |                 ^^^^^^^^^^^^ await occurs here on type `impl std::future::Future`, which is not `Send`\n \n error: future cannot be sent between threads safely\n   --> $DIR/issue-68112.rs:43:5\n@@ -26,14 +24,14 @@ LL |     require_send(send_fut);\n    |     ^^^^^^^^^^^^ future created by async block is not `Send`\n    |\n    = help: the trait `std::marker::Sync` is not implemented for `std::cell::RefCell<i32>`\n-note: future is not `Send` as this value is used in an await\n+note: future is not `Send` as it awaits another future which is not `Send`\n   --> $DIR/issue-68112.rs:40:17\n    |\n LL |         let _ = make_non_send_future1().await;\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^ await occurs here\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^ await occurs here on type `impl std::future::Future`, which is not `Send`\n \n error[E0277]: `std::cell::RefCell<i32>` cannot be shared between threads safely\n-  --> $DIR/issue-68112.rs:58:5\n+  --> $DIR/issue-68112.rs:60:5\n    |\n LL | fn require_send(_: impl Send) {}\n    |    ------------         ---- required by this bound in `require_send`\n@@ -49,8 +47,8 @@ LL |     require_send(send_fut);\n    = note: required because it appears within the type `impl std::future::Future`\n    = note: required because it appears within the type `impl std::future::Future`\n    = note: required because it appears within the type `{std::future::ResumeTy, impl std::future::Future, (), i32, Ready<i32>}`\n-   = note: required because it appears within the type `[static generator@$DIR/issue-68112.rs:53:26: 57:6 {std::future::ResumeTy, impl std::future::Future, (), i32, Ready<i32>}]`\n-   = note: required because it appears within the type `std::future::from_generator::GenFuture<[static generator@$DIR/issue-68112.rs:53:26: 57:6 {std::future::ResumeTy, impl std::future::Future, (), i32, Ready<i32>}]>`\n+   = note: required because it appears within the type `[static generator@$DIR/issue-68112.rs:55:26: 59:6 {std::future::ResumeTy, impl std::future::Future, (), i32, Ready<i32>}]`\n+   = note: required because it appears within the type `std::future::from_generator::GenFuture<[static generator@$DIR/issue-68112.rs:55:26: 59:6 {std::future::ResumeTy, impl std::future::Future, (), i32, Ready<i32>}]>`\n    = note: required because it appears within the type `impl std::future::Future`\n \n error: aborting due to 3 previous errors"}, {"sha": "49cd30e11a0c17b8fd329662aa3c494d0afa202f", "filename": "src/test/ui/async-await/issues/issue-65436-raw-ptr-not-send.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df64c5d260d3841ded8affe68f1be6e47ed1fb26/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65436-raw-ptr-not-send.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/df64c5d260d3841ded8affe68f1be6e47ed1fb26/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65436-raw-ptr-not-send.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65436-raw-ptr-not-send.stderr?ref=df64c5d260d3841ded8affe68f1be6e47ed1fb26", "patch": "@@ -14,7 +14,7 @@ note: future is not `Send` as this value is used across an await\n LL |         bar(Foo(std::ptr::null())).await;\n    |         ^^^^^^^^----------------^^^^^^^^- `std::ptr::null()` is later dropped here\n    |         |       |\n-   |         |       has type `*const u8`\n+   |         |       has type `*const u8` which is not `Send`\n    |         await occurs here, with `std::ptr::null()` maybe used later\n help: consider moving this into a `let` binding to create a shorter lived borrow\n   --> $DIR/issue-65436-raw-ptr-not-send.rs:14:13"}, {"sha": "4148b503ba8585c887dc65bb74b26bc59fba2992", "filename": "src/test/ui/generator/issue-68112.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/df64c5d260d3841ded8affe68f1be6e47ed1fb26/src%2Ftest%2Fui%2Fgenerator%2Fissue-68112.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/df64c5d260d3841ded8affe68f1be6e47ed1fb26/src%2Ftest%2Fui%2Fgenerator%2Fissue-68112.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fissue-68112.stderr?ref=df64c5d260d3841ded8affe68f1be6e47ed1fb26", "patch": "@@ -8,11 +8,11 @@ LL |     require_send(send_gen);\n    |     ^^^^^^^^^^^^ generator is not `Send`\n    |\n    = help: the trait `std::marker::Sync` is not implemented for `std::cell::RefCell<i32>`\n-note: generator is not `Send` as this value is used across an yield\n+note: generator is not `Send` as this value is used across a yield\n   --> $DIR/issue-68112.rs:31:9\n    |\n LL |         let _non_send_gen = make_non_send_generator();\n-   |             ------------- created here\n+   |             ------------- has type `impl std::ops::Generator` which is not `Send`\n LL |         yield;\n    |         ^^^^^ yield occurs here, with `_non_send_gen` maybe used later\n LL |     };"}, {"sha": "5df2c1b52fb8a0cae66ec01e14e75ecd01b9317e", "filename": "src/test/ui/generator/not-send-sync.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/df64c5d260d3841ded8affe68f1be6e47ed1fb26/src%2Ftest%2Fui%2Fgenerator%2Fnot-send-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/df64c5d260d3841ded8affe68f1be6e47ed1fb26/src%2Ftest%2Fui%2Fgenerator%2Fnot-send-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fnot-send-sync.stderr?ref=df64c5d260d3841ded8affe68f1be6e47ed1fb26", "patch": "@@ -21,11 +21,11 @@ LL |     assert_sync(|| {\n    |     ^^^^^^^^^^^ generator is not `Sync`\n    |\n    = help: within `[generator@$DIR/not-send-sync.rs:9:17: 13:6 {std::cell::Cell<i32>, ()}]`, the trait `std::marker::Sync` is not implemented for `std::cell::Cell<i32>`\n-note: generator is not `Sync` as this value is used across an yield\n+note: generator is not `Sync` as this value is used across a yield\n   --> $DIR/not-send-sync.rs:12:9\n    |\n LL |         let a = Cell::new(2);\n-   |             - has type `std::cell::Cell<i32>`\n+   |             - has type `std::cell::Cell<i32>` which is not `Sync`\n LL |         yield;\n    |         ^^^^^ yield occurs here, with `a` maybe used later\n LL |     });"}]}