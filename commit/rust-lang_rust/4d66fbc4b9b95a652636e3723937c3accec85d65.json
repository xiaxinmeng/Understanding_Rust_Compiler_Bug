{"sha": "4d66fbc4b9b95a652636e3723937c3accec85d65", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkNjZmYmM0YjliOTVhNjUyNjM2ZTM3MjM5MzdjM2FjY2VjODVkNjU=", "commit": {"author": {"name": "Andreas Liljeqvist", "email": "bonega@gmail.com", "date": "2021-08-08T11:34:46Z"}, "committer": {"name": "Andreas Liljeqvist", "email": "bonega@gmail.com", "date": "2021-09-13T19:55:14Z"}, "message": "enum niche allocation grows toward zero if possible", "tree": {"sha": "04562fd8256a218651d97a705f09f79ae2cae75a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/04562fd8256a218651d97a705f09f79ae2cae75a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d66fbc4b9b95a652636e3723937c3accec85d65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d66fbc4b9b95a652636e3723937c3accec85d65", "html_url": "https://github.com/rust-lang/rust/commit/4d66fbc4b9b95a652636e3723937c3accec85d65", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d66fbc4b9b95a652636e3723937c3accec85d65/comments", "author": {"login": "bonega", "id": 411677, "node_id": "MDQ6VXNlcjQxMTY3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/411677?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonega", "html_url": "https://github.com/bonega", "followers_url": "https://api.github.com/users/bonega/followers", "following_url": "https://api.github.com/users/bonega/following{/other_user}", "gists_url": "https://api.github.com/users/bonega/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonega/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonega/subscriptions", "organizations_url": "https://api.github.com/users/bonega/orgs", "repos_url": "https://api.github.com/users/bonega/repos", "events_url": "https://api.github.com/users/bonega/events{/privacy}", "received_events_url": "https://api.github.com/users/bonega/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bonega", "id": 411677, "node_id": "MDQ6VXNlcjQxMTY3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/411677?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonega", "html_url": "https://github.com/bonega", "followers_url": "https://api.github.com/users/bonega/followers", "following_url": "https://api.github.com/users/bonega/following{/other_user}", "gists_url": "https://api.github.com/users/bonega/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonega/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonega/subscriptions", "organizations_url": "https://api.github.com/users/bonega/orgs", "repos_url": "https://api.github.com/users/bonega/repos", "events_url": "https://api.github.com/users/bonega/events{/privacy}", "received_events_url": "https://api.github.com/users/bonega/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "641e02f388acc6b1d316a59c605a32d1711a8758", "url": "https://api.github.com/repos/rust-lang/rust/commits/641e02f388acc6b1d316a59c605a32d1711a8758", "html_url": "https://github.com/rust-lang/rust/commit/641e02f388acc6b1d316a59c605a32d1711a8758"}], "stats": {"total": 91, "additions": 82, "deletions": 9}, "files": [{"sha": "616071592087da8a5573884bdc47b851bcd78ab3", "filename": "compiler/rustc_target/src/abi/mod.rs", "status": "modified", "additions": 43, "deletions": 9, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/4d66fbc4b9b95a652636e3723937c3accec85d65/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d66fbc4b9b95a652636e3723937c3accec85d65/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs?ref=4d66fbc4b9b95a652636e3723937c3accec85d65", "patch": "@@ -1099,19 +1099,53 @@ impl Niche {\n         assert!(size.bits() <= 128);\n         let max_value = size.unsigned_int_max();\n \n-        if count > max_value {\n+        let niche = v.end.wrapping_add(1)..v.start;\n+        let available = niche.end.wrapping_sub(niche.start) & max_value;\n+        if count > available {\n             return None;\n         }\n \n-        // Compute the range of invalid values being reserved.\n-        let start = v.end.wrapping_add(1) & max_value;\n-        let end = v.end.wrapping_add(count) & max_value;\n-\n-        if v.contains(end) {\n-            return None;\n+        // Extend the range of valid values being reserved by moving either `v.start` or `v.end` bound.\n+        // Given an eventual `Option<T>`, we try to maximize the chance for `None` to occupy the niche of zero.\n+        // This is accomplished by prefering enums with 2 variants(`count==1`) and always taking the shortest path to niche zero.\n+        // Having `None` in niche zero can enable some special optimizations.\n+        //\n+        // Bound selection criteria:\n+        // 1. Select closest to zero given wrapping semantics.\n+        // 2. Avoid moving past zero if possible.\n+        //\n+        // In practice this means that enums with `count > 1` are unlikely to claim niche zero, since they have to fit perfectly.\n+        // If niche zero is already reserved, the selection of bounds are of little interest.\n+        let move_start = |v: WrappingRange| {\n+            let start = v.start.wrapping_sub(1) & max_value;\n+            Some((start, Scalar { value, valid_range: v.with_start(start) }))\n+        };\n+        let move_end = |v: WrappingRange| {\n+            let start = v.end.wrapping_add(1) & max_value;\n+            let end = v.end.wrapping_add(count) & max_value;\n+            Some((start, Scalar { value, valid_range: v.with_end(end) }))\n+        };\n+        let distance_end_zero = max_value - v.end;\n+        if v.start > v.end {\n+            // zero is unavailable because wrapping occurs\n+            move_end(v)\n+        } else if v.start <= distance_end_zero {\n+            if count <= v.start {\n+                move_start(v)\n+            } else {\n+                // moved past zero, use other bound\n+                move_end(v)\n+            }\n+        } else {\n+            let end = v.end.wrapping_add(count) & max_value;\n+            let overshot_zero = (1..=v.end).contains(&end);\n+            if overshot_zero {\n+                // moved past zero, use other bound\n+                move_start(v)\n+            } else {\n+                move_end(v)\n+            }\n         }\n-\n-        Some((start, Scalar { value, valid_range: v.with_end(end) }))\n     }\n }\n "}, {"sha": "0ab37a618daaca6796d76e11658394670f006b3d", "filename": "src/test/assembly/niche-prefer-zero.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/4d66fbc4b9b95a652636e3723937c3accec85d65/src%2Ftest%2Fassembly%2Fniche-prefer-zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d66fbc4b9b95a652636e3723937c3accec85d65/src%2Ftest%2Fassembly%2Fniche-prefer-zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fniche-prefer-zero.rs?ref=4d66fbc4b9b95a652636e3723937c3accec85d65", "patch": "@@ -0,0 +1,25 @@\n+// Check that niche selection prefers zero and that jumps are optimized away.\n+// See https://github.com/rust-lang/rust/pull/87794\n+// assembly-output: emit-asm\n+// only-x86\n+// compile-flags: -Copt-level=3\n+\n+#![crate_type = \"lib\"]\n+\n+#[repr(u8)]\n+pub enum Size {\n+    One = 1,\n+    Two = 2,\n+    Three = 3,\n+}\n+\n+#[no_mangle]\n+pub fn handle(x: Option<Size>) -> u8 {\n+    match x {\n+        None => 0,\n+        Some(size) => size as u8,\n+    }\n+}\n+\n+// There should be no jumps in output\n+// CHECK-NOT: j"}, {"sha": "f20607a8903825e03b62b55007c475c21704cbd5", "filename": "src/test/ui/enum-discriminant/niche-prefer-zero.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4d66fbc4b9b95a652636e3723937c3accec85d65/src%2Ftest%2Fui%2Fenum-discriminant%2Fniche-prefer-zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d66fbc4b9b95a652636e3723937c3accec85d65/src%2Ftest%2Fui%2Fenum-discriminant%2Fniche-prefer-zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-discriminant%2Fniche-prefer-zero.rs?ref=4d66fbc4b9b95a652636e3723937c3accec85d65", "patch": "@@ -0,0 +1,14 @@\n+// Check that niche selection prefers zero.\n+// See https://github.com/rust-lang/rust/pull/87794\n+// run-pass\n+#[repr(u8)]\n+pub enum Size {\n+    One = 1,\n+    Two = 2,\n+    Three = 3,\n+}\n+\n+fn main() {\n+    // check that `None` is zero\n+    assert_eq!(0, unsafe { std::mem::transmute::<Option<Size>, u8>(None) });\n+}"}]}