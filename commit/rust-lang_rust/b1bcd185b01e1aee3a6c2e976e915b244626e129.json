{"sha": "b1bcd185b01e1aee3a6c2e976e915b244626e129", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxYmNkMTg1YjAxZTFhZWUzYTZjMmU5NzZlOTE1YjI0NDYyNmUxMjk=", "commit": {"author": {"name": "Eugene Bulkin", "email": "ebulkin@caltech.edu", "date": "2016-09-14T00:58:45Z"}, "committer": {"name": "Eugene Bulkin", "email": "ebulkin@caltech.edu", "date": "2016-09-14T00:58:45Z"}, "message": "Implement add, sub, mul and div methods using checked methods for Duration", "tree": {"sha": "d513f72dc1186da138b657ba1cfb40a6ad1245e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d513f72dc1186da138b657ba1cfb40a6ad1245e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b1bcd185b01e1aee3a6c2e976e915b244626e129", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b1bcd185b01e1aee3a6c2e976e915b244626e129", "html_url": "https://github.com/rust-lang/rust/commit/b1bcd185b01e1aee3a6c2e976e915b244626e129", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b1bcd185b01e1aee3a6c2e976e915b244626e129/comments", "author": null, "committer": null, "parents": [{"sha": "07b41b5555f2582ce741569ce44116451105742c", "url": "https://api.github.com/repos/rust-lang/rust/commits/07b41b5555f2582ce741569ce44116451105742c", "html_url": "https://github.com/rust-lang/rust/commit/07b41b5555f2582ce741569ce44116451105742c"}], "stats": {"total": 39, "additions": 4, "deletions": 35}, "files": [{"sha": "a3493f0593c8c5f0a738736991a5bfa54ccd783d", "filename": "src/libstd/time/duration.rs", "status": "modified", "additions": 4, "deletions": 35, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/b1bcd185b01e1aee3a6c2e976e915b244626e129/src%2Flibstd%2Ftime%2Fduration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1bcd185b01e1aee3a6c2e976e915b244626e129/src%2Flibstd%2Ftime%2Fduration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime%2Fduration.rs?ref=b1bcd185b01e1aee3a6c2e976e915b244626e129", "patch": "@@ -228,15 +228,7 @@ impl Add for Duration {\n     type Output = Duration;\n \n     fn add(self, rhs: Duration) -> Duration {\n-        let mut secs = self.secs.checked_add(rhs.secs)\n-                           .expect(\"overflow when adding durations\");\n-        let mut nanos = self.nanos + rhs.nanos;\n-        if nanos >= NANOS_PER_SEC {\n-            nanos -= NANOS_PER_SEC;\n-            secs = secs.checked_add(1).expect(\"overflow when adding durations\");\n-        }\n-        debug_assert!(nanos < NANOS_PER_SEC);\n-        Duration { secs: secs, nanos: nanos }\n+        self.checked_add(rhs).expect(\"overflow when adding durations\")\n     }\n }\n \n@@ -252,17 +244,7 @@ impl Sub for Duration {\n     type Output = Duration;\n \n     fn sub(self, rhs: Duration) -> Duration {\n-        let mut secs = self.secs.checked_sub(rhs.secs)\n-                           .expect(\"overflow when subtracting durations\");\n-        let nanos = if self.nanos >= rhs.nanos {\n-            self.nanos - rhs.nanos\n-        } else {\n-            secs = secs.checked_sub(1)\n-                       .expect(\"overflow when subtracting durations\");\n-            self.nanos + NANOS_PER_SEC - rhs.nanos\n-        };\n-        debug_assert!(nanos < NANOS_PER_SEC);\n-        Duration { secs: secs, nanos: nanos }\n+        self.checked_sub(rhs).expect(\"overflow when subtracting durations\")\n     }\n }\n \n@@ -278,15 +260,7 @@ impl Mul<u32> for Duration {\n     type Output = Duration;\n \n     fn mul(self, rhs: u32) -> Duration {\n-        // Multiply nanoseconds as u64, because it cannot overflow that way.\n-        let total_nanos = self.nanos as u64 * rhs as u64;\n-        let extra_secs = total_nanos / (NANOS_PER_SEC as u64);\n-        let nanos = (total_nanos % (NANOS_PER_SEC as u64)) as u32;\n-        let secs = self.secs.checked_mul(rhs as u64)\n-                       .and_then(|s| s.checked_add(extra_secs))\n-                       .expect(\"overflow when multiplying duration\");\n-        debug_assert!(nanos < NANOS_PER_SEC);\n-        Duration { secs: secs, nanos: nanos }\n+        self.checked_mul(rhs).expect(\"overflow when multiplying duration by scalar\")\n     }\n }\n \n@@ -302,12 +276,7 @@ impl Div<u32> for Duration {\n     type Output = Duration;\n \n     fn div(self, rhs: u32) -> Duration {\n-        let secs = self.secs / (rhs as u64);\n-        let carry = self.secs - secs * (rhs as u64);\n-        let extra_nanos = carry * (NANOS_PER_SEC as u64) / (rhs as u64);\n-        let nanos = self.nanos / rhs + (extra_nanos as u32);\n-        debug_assert!(nanos < NANOS_PER_SEC);\n-        Duration { secs: secs, nanos: nanos }\n+        self.checked_div(rhs).expect(\"divide by zero error when dividing duration by scalar\")\n     }\n }\n "}]}