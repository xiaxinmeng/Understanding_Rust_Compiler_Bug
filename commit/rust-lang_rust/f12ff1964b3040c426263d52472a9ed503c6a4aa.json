{"sha": "f12ff1964b3040c426263d52472a9ed503c6a4aa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxMmZmMTk2NGIzMDQwYzQyNjI2M2Q1MjQ3MmE5ZWQ1MDNjNmE0YWE=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2014-02-24T01:45:44Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2014-02-25T03:52:29Z"}, "message": "std: minor whitespace cleanup", "tree": {"sha": "0ffcf781c214ffefeff72d9fdecf0352dd23d818", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ffcf781c214ffefeff72d9fdecf0352dd23d818"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f12ff1964b3040c426263d52472a9ed503c6a4aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f12ff1964b3040c426263d52472a9ed503c6a4aa", "html_url": "https://github.com/rust-lang/rust/commit/f12ff1964b3040c426263d52472a9ed503c6a4aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f12ff1964b3040c426263d52472a9ed503c6a4aa/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4bc7672335bf29f28ef88fedaa4b1abaf370f691", "url": "https://api.github.com/repos/rust-lang/rust/commits/4bc7672335bf29f28ef88fedaa4b1abaf370f691", "html_url": "https://github.com/rust-lang/rust/commit/4bc7672335bf29f28ef88fedaa4b1abaf370f691"}], "stats": {"total": 62, "additions": 28, "deletions": 34}, "files": [{"sha": "938b94fb8a42529e53d08b2c4479514b4b727a18", "filename": "src/libcollections/hashmap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f12ff1964b3040c426263d52472a9ed503c6a4aa/src%2Flibcollections%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f12ff1964b3040c426263d52472a9ed503c6a4aa/src%2Flibcollections%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fhashmap.rs?ref=f12ff1964b3040c426263d52472a9ed503c6a4aa", "patch": "@@ -97,7 +97,7 @@ fn resize_at(capacity: uint) -> uint {\n     (capacity * 3) / 4\n }\n \n-impl<K:Hash + Eq,V> HashMap<K, V> {\n+impl<K:Hash + Eq, V> HashMap<K, V> {\n     #[inline]\n     fn to_bucket(&self, h: uint) -> uint {\n         // A good hash function with entropy spread over all of the"}, {"sha": "74d21f114ef64bb842ec7fc7a072cdb559fd5b98", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f12ff1964b3040c426263d52472a9ed503c6a4aa/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f12ff1964b3040c426263d52472a9ed503c6a4aa/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=f12ff1964b3040c426263d52472a9ed503c6a4aa", "patch": "@@ -722,7 +722,7 @@ pub fn is_null(val: ValueRef) -> bool {\n }\n \n // Used to identify cached monomorphized functions and vtables\n-#[deriving(Eq,Hash)]\n+#[deriving(Eq, Hash)]\n pub enum mono_param_id {\n     mono_precise(ty::t, Option<@~[mono_id]>),\n     mono_any,\n@@ -732,7 +732,7 @@ pub enum mono_param_id {\n               datum::RvalueMode),\n }\n \n-#[deriving(Eq,Hash)]\n+#[deriving(Eq, Hash)]\n pub enum MonoDataClass {\n     MonoBits,    // Anything not treated differently from arbitrary integer data\n     MonoNonNull, // Non-null pointers (used for optional-pointer optimization)\n@@ -754,8 +754,7 @@ pub fn mono_data_classify(t: ty::t) -> MonoDataClass {\n     }\n }\n \n-\n-#[deriving(Eq,Hash)]\n+#[deriving(Eq, Hash)]\n pub struct mono_id_ {\n     def: ast::DefId,\n     params: ~[mono_param_id]"}, {"sha": "34e2558638d96e45c1ad5f9b2eb732ca6bb18d8f", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f12ff1964b3040c426263d52472a9ed503c6a4aa/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f12ff1964b3040c426263d52472a9ed503c6a4aa/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=f12ff1964b3040c426263d52472a9ed503c6a4aa", "patch": "@@ -150,7 +150,7 @@ pub struct field_ty {\n \n // Contains information needed to resolve types and (in the future) look up\n // the types of AST nodes.\n-#[deriving(Eq,Hash)]\n+#[deriving(Eq, Hash)]\n pub struct creader_cache_key {\n     cnum: CrateNum,\n     pos: uint,"}, {"sha": "e29aa5e5ed1fcf186c57d0f900a158ec964e13d0", "filename": "src/libstd/io/net/ip.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f12ff1964b3040c426263d52472a9ed503c6a4aa/src%2Flibstd%2Fio%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f12ff1964b3040c426263d52472a9ed503c6a4aa/src%2Flibstd%2Fio%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Fip.rs?ref=f12ff1964b3040c426263d52472a9ed503c6a4aa", "patch": "@@ -55,7 +55,6 @@ pub struct SocketAddr {\n     port: Port,\n }\n \n-\n impl fmt::Show for SocketAddr {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match self.ip {"}, {"sha": "83d2ce53444d233fc5d86bc28c220320accf27a6", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f12ff1964b3040c426263d52472a9ed503c6a4aa/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f12ff1964b3040c426263d52472a9ed503c6a4aa/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=f12ff1964b3040c426263d52472a9ed503c6a4aa", "patch": "@@ -149,7 +149,6 @@ pub mod container;\n pub mod default;\n pub mod any;\n \n-\n /* Common data structures */\n \n pub mod option;"}, {"sha": "c095cec1e7df30e629f92071b115260e1ac2ca6f", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/f12ff1964b3040c426263d52472a9ed503c6a4aa/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f12ff1964b3040c426263d52472a9ed503c6a4aa/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=f12ff1964b3040c426263d52472a9ed503c6a4aa", "patch": "@@ -107,7 +107,7 @@ pub struct SCTable {\n pub static EMPTY_CTXT : SyntaxContext = 0;\n pub static ILLEGAL_CTXT : SyntaxContext = 1;\n \n-#[deriving(Eq, Encodable, Decodable,Hash)]\n+#[deriving(Eq, Encodable, Decodable, Hash)]\n pub enum SyntaxContext_ {\n     EmptyCtxt,\n     Mark (Mrk,SyntaxContext),\n@@ -332,7 +332,7 @@ impl Eq for MetaItem_ {\n     }\n }\n \n-#[deriving(Clone, Eq, Encodable, Decodable,Hash)]\n+#[deriving(Clone, Eq, Encodable, Decodable, Hash)]\n pub struct Block {\n     view_items: ~[ViewItem],\n     stmts: ~[@Stmt],\n@@ -467,7 +467,7 @@ pub enum Stmt_ {\n // FIXME (pending discussion of #1697, #2178...): local should really be\n // a refinement on pat.\n /// Local represents a `let` statement, e.g., `let <pat>:<ty> = <expr>;`\n-#[deriving(Eq, Encodable, Decodable,Hash)]\n+#[deriving(Eq, Encodable, Decodable, Hash)]\n pub struct Local {\n     ty: P<Ty>,\n     pat: @Pat,\n@@ -478,7 +478,7 @@ pub struct Local {\n \n pub type Decl = Spanned<Decl_>;\n \n-#[deriving(Eq, Encodable, Decodable,Hash)]\n+#[deriving(Eq, Encodable, Decodable, Hash)]\n pub enum Decl_ {\n     // a local (let) binding:\n     DeclLocal(@Local),\n@@ -514,7 +514,7 @@ pub enum UnsafeSource {\n     UserProvided,\n }\n \n-#[deriving(Clone, Eq, Encodable, Decodable,Hash)]\n+#[deriving(Clone, Eq, Encodable, Decodable, Hash)]\n pub struct Expr {\n     id: NodeId,\n     node: Expr_,\n@@ -732,7 +732,7 @@ pub struct MutTy {\n     mutbl: Mutability,\n }\n \n-#[deriving(Eq, Encodable, Decodable,Hash)]\n+#[deriving(Eq, Encodable, Decodable, Hash)]\n pub struct TypeField {\n     ident: Ident,\n     mt: MutTy,\n@@ -836,7 +836,7 @@ impl fmt::Show for Onceness {\n     }\n }\n \n-#[deriving(Eq, Encodable, Decodable,Hash)]\n+#[deriving(Eq, Encodable, Decodable, Hash)]\n pub struct ClosureTy {\n     sigil: Sigil,\n     region: Option<Lifetime>,\n@@ -967,7 +967,7 @@ pub enum ExplicitSelf_ {\n \n pub type ExplicitSelf = Spanned<ExplicitSelf_>;\n \n-#[deriving(Eq, Encodable, Decodable,Hash)]\n+#[deriving(Eq, Encodable, Decodable, Hash)]\n pub struct Method {\n     ident: Ident,\n     attrs: ~[Attribute],\n@@ -987,7 +987,7 @@ pub struct Mod {\n     items: ~[@Item],\n }\n \n-#[deriving(Clone, Eq, Encodable, Decodable,Hash)]\n+#[deriving(Clone, Eq, Encodable, Decodable, Hash)]\n pub struct ForeignMod {\n     abis: AbiSet,\n     view_items: ~[ViewItem],\n@@ -1074,14 +1074,14 @@ pub type Attribute = Spanned<Attribute_>;\n // Distinguishes between Attributes that decorate items and Attributes that\n // are contained as statements within items. These two cases need to be\n // distinguished for pretty-printing.\n-#[deriving(Clone, Eq, Encodable, Decodable,Hash)]\n+#[deriving(Clone, Eq, Encodable, Decodable, Hash)]\n pub enum AttrStyle {\n     AttrOuter,\n     AttrInner,\n }\n \n // doc-comments are promoted to attributes that have is_sugared_doc = true\n-#[deriving(Clone, Eq, Encodable, Decodable,Hash)]\n+#[deriving(Clone, Eq, Encodable, Decodable, Hash)]\n pub struct Attribute_ {\n     style: AttrStyle,\n     value: @MetaItem,\n@@ -1095,13 +1095,13 @@ pub struct Attribute_ {\n   If this impl is an ItemImpl, the impl_id is redundant (it could be the\n   same as the impl's node id).\n  */\n-#[deriving(Clone, Eq, Encodable, Decodable,Hash)]\n+#[deriving(Clone, Eq, Encodable, Decodable, Hash)]\n pub struct TraitRef {\n     path: Path,\n     ref_id: NodeId,\n }\n \n-#[deriving(Clone, Eq, Encodable, Decodable,Hash)]\n+#[deriving(Clone, Eq, Encodable, Decodable, Hash)]\n pub enum Visibility {\n     Public,\n     Private,\n@@ -1117,7 +1117,7 @@ impl Visibility {\n     }\n }\n \n-#[deriving(Clone, Eq, Encodable, Decodable,Hash)]\n+#[deriving(Clone, Eq, Encodable, Decodable, Hash)]\n pub struct StructField_ {\n     kind: StructFieldKind,\n     id: NodeId,\n@@ -1127,13 +1127,13 @@ pub struct StructField_ {\n \n pub type StructField = Spanned<StructField_>;\n \n-#[deriving(Clone, Eq, Encodable, Decodable,Hash)]\n+#[deriving(Clone, Eq, Encodable, Decodable, Hash)]\n pub enum StructFieldKind {\n     NamedField(Ident, Visibility),\n     UnnamedField // element of a tuple-like struct\n }\n \n-#[deriving(Eq, Encodable, Decodable,Hash)]\n+#[deriving(Eq, Encodable, Decodable, Hash)]\n pub struct StructDef {\n     fields: ~[StructField], /* fields, not including ctor */\n     /* ID of the constructor. This is only used for tuple- or enum-like\n@@ -1173,7 +1173,7 @@ pub enum Item_ {\n     ItemMac(Mac),\n }\n \n-#[deriving(Eq, Encodable, Decodable,Hash)]\n+#[deriving(Eq, Encodable, Decodable, Hash)]\n pub struct ForeignItem {\n     ident: Ident,\n     attrs: ~[Attribute],\n@@ -1183,7 +1183,7 @@ pub struct ForeignItem {\n     vis: Visibility,\n }\n \n-#[deriving(Eq, Encodable, Decodable,Hash)]\n+#[deriving(Eq, Encodable, Decodable, Hash)]\n pub enum ForeignItem_ {\n     ForeignItemFn(P<FnDecl>, Generics),\n     ForeignItemStatic(P<Ty>, /* is_mutbl */ bool),\n@@ -1192,7 +1192,7 @@ pub enum ForeignItem_ {\n // The data we save and restore about an inlined item or method.  This is not\n // part of the AST that we parse from a file, but it becomes part of the tree\n // that we trans.\n-#[deriving(Eq, Encodable, Decodable,Hash)]\n+#[deriving(Eq, Encodable, Decodable, Hash)]\n pub enum InlinedItem {\n     IIItem(@Item),\n     IIMethod(DefId /* impl id */, bool /* is provided */, @Method),"}, {"sha": "2b1e8a354ea0eb7bc1119ff27109f0c24898a913", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f12ff1964b3040c426263d52472a9ed503c6a4aa/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f12ff1964b3040c426263d52472a9ed503c6a4aa/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=f12ff1964b3040c426263d52472a9ed503c6a4aa", "patch": "@@ -38,7 +38,7 @@ pub struct BytePos(u32);\n /// A character offset. Because of multibyte utf8 characters, a byte offset\n /// is not equivalent to a character offset. The CodeMap will convert BytePos\n /// values to CharPos values as necessary.\n-#[deriving(Eq,Hash, Ord)]\n+#[deriving(Eq, Hash, Ord)]\n pub struct CharPos(uint);\n \n // FIXME: Lots of boilerplate in these impls, but so far my attempts to fix"}, {"sha": "4b5a05f4cb875c3400cd3ef3aea0ec6259621e6e", "filename": "src/libsyntax/util/interner.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f12ff1964b3040c426263d52472a9ed503c6a4aa/src%2Flibsyntax%2Futil%2Finterner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f12ff1964b3040c426263d52472a9ed503c6a4aa/src%2Flibsyntax%2Futil%2Finterner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Finterner.rs?ref=f12ff1964b3040c426263d52472a9ed503c6a4aa", "patch": "@@ -75,8 +75,7 @@ impl<T:Eq + Hash + Freeze + Clone + 'static> Interner<T> {\n         vect.get().len()\n     }\n \n-    pub fn find_equiv<Q:Hash + Equiv<T>>(&self, val: &Q)\n-                                              -> Option<Name> {\n+    pub fn find_equiv<Q:Hash + Equiv<T>>(&self, val: &Q) -> Option<Name> {\n         let map = self.map.borrow();\n         match map.get().find_equiv(val) {\n             Some(v) => Some(*v),\n@@ -207,8 +206,7 @@ impl StrInterner {\n         vect.get().len()\n     }\n \n-    pub fn find_equiv<Q:Hash + Equiv<RcStr>>(&self, val: &Q)\n-                                                         -> Option<Name> {\n+    pub fn find_equiv<Q:Hash + Equiv<RcStr>>(&self, val: &Q) -> Option<Name> {\n         let map = self.map.borrow();\n         match map.get().find_equiv(val) {\n             Some(v) => Some(*v),"}, {"sha": "2ea558b566ec8e154c4c3a19d13b7d25b05c2b09", "filename": "src/test/run-pass/deriving-via-extension-type-params.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f12ff1964b3040c426263d52472a9ed503c6a4aa/src%2Ftest%2Frun-pass%2Fderiving-via-extension-type-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f12ff1964b3040c426263d52472a9ed503c6a4aa/src%2Ftest%2Frun-pass%2Fderiving-via-extension-type-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-via-extension-type-params.rs?ref=f12ff1964b3040c426263d52472a9ed503c6a4aa", "patch": "@@ -10,8 +10,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[deriving(Eq)]\n-#[deriving(Hash)]\n+#[deriving(Eq, Hash)]\n struct Foo<T> {\n     x: int,\n     y: T,"}]}