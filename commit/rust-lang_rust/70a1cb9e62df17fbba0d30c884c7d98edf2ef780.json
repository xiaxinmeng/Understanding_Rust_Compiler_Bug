{"sha": "70a1cb9e62df17fbba0d30c884c7d98edf2ef780", "node_id": "C_kwDOAAsO6NoAKDcwYTFjYjllNjJkZjE3ZmJiYTBkMzBjODg0YzdkOThlZGYyZWY3ODA", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-01-13T12:16:11Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-01-13T12:16:11Z"}, "message": "Pass around Compiler instead of target triples", "tree": {"sha": "e98d1e64fd8b6e09d3bebddef07fbde2f6b4aadd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e98d1e64fd8b6e09d3bebddef07fbde2f6b4aadd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70a1cb9e62df17fbba0d30c884c7d98edf2ef780", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70a1cb9e62df17fbba0d30c884c7d98edf2ef780", "html_url": "https://github.com/rust-lang/rust/commit/70a1cb9e62df17fbba0d30c884c7d98edf2ef780", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70a1cb9e62df17fbba0d30c884c7d98edf2ef780/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf22470de71180e54defc35e71edfd8558685fb4", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf22470de71180e54defc35e71edfd8558685fb4", "html_url": "https://github.com/rust-lang/rust/commit/cf22470de71180e54defc35e71edfd8558685fb4"}], "stats": {"total": 148, "additions": 64, "deletions": 84}, "files": [{"sha": "5f20a377329f59c99022953a6c93bdbf04246995", "filename": "build_system/abi_cafe.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/70a1cb9e62df17fbba0d30c884c7d98edf2ef780/build_system%2Fabi_cafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70a1cb9e62df17fbba0d30c884c7d98edf2ef780/build_system%2Fabi_cafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fabi_cafe.rs?ref=70a1cb9e62df17fbba0d30c884c7d98edf2ef780", "patch": "@@ -17,34 +17,28 @@ pub(crate) fn run(\n     sysroot_kind: SysrootKind,\n     dirs: &Dirs,\n     cg_clif_dylib: &Path,\n-    host_triple: &str,\n-    target_triple: &str,\n+    host_compiler: &Compiler,\n ) {\n     if !config::get_bool(\"testsuite.abi-cafe\") {\n         eprintln!(\"[SKIP] abi-cafe\");\n         return;\n     }\n \n-    if host_triple != target_triple {\n-        eprintln!(\"[SKIP] abi-cafe (cross-compilation not supported)\");\n-        return;\n-    }\n-\n     eprintln!(\"Building sysroot for abi-cafe\");\n     build_sysroot::build_sysroot(\n         dirs,\n         channel,\n         sysroot_kind,\n         cg_clif_dylib,\n-        host_triple,\n-        target_triple,\n+        host_compiler,\n+        &host_compiler.triple,\n     );\n \n     eprintln!(\"Running abi-cafe\");\n \n     let pairs = [\"rustc_calls_cgclif\", \"cgclif_calls_rustc\", \"cgclif_calls_cc\", \"cc_calls_cgclif\"];\n \n-    let mut cmd = ABI_CAFE.run(&Compiler::host(), dirs);\n+    let mut cmd = ABI_CAFE.run(host_compiler, dirs);\n     cmd.arg(\"--\");\n     cmd.arg(\"--pairs\");\n     cmd.args(pairs);"}, {"sha": "f5c5d92cb328679b7fe9ae53c01e4f5b772706e0", "filename": "build_system/bench.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/70a1cb9e62df17fbba0d30c884c7d98edf2ef780/build_system%2Fbench.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70a1cb9e62df17fbba0d30c884c7d98edf2ef780/build_system%2Fbench.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fbench.rs?ref=70a1cb9e62df17fbba0d30c884c7d98edf2ef780", "patch": "@@ -21,20 +21,19 @@ pub(crate) static SIMPLE_RAYTRACER_LLVM: CargoProject =\n pub(crate) static SIMPLE_RAYTRACER: CargoProject =\n     CargoProject::new(&SIMPLE_RAYTRACER_REPO.source_dir(), \"simple_raytracer\");\n \n-pub(crate) fn benchmark(dirs: &Dirs) {\n-    benchmark_simple_raytracer(dirs);\n+pub(crate) fn benchmark(dirs: &Dirs, host_compiler: &Compiler) {\n+    benchmark_simple_raytracer(dirs, host_compiler);\n }\n \n-fn benchmark_simple_raytracer(dirs: &Dirs) {\n+fn benchmark_simple_raytracer(dirs: &Dirs, host_compiler: &Compiler) {\n     if std::process::Command::new(\"hyperfine\").output().is_err() {\n         eprintln!(\"Hyperfine not installed\");\n         eprintln!(\"Hint: Try `cargo install hyperfine` to install hyperfine\");\n         std::process::exit(1);\n     }\n \n     eprintln!(\"[LLVM BUILD] simple-raytracer\");\n-    let host_compiler = Compiler::host();\n-    let build_cmd = SIMPLE_RAYTRACER_LLVM.build(&host_compiler, dirs);\n+    let build_cmd = SIMPLE_RAYTRACER_LLVM.build(host_compiler, dirs);\n     spawn_and_wait(build_cmd);\n     fs::copy(\n         SIMPLE_RAYTRACER_LLVM"}, {"sha": "00d9a6ddea8abe2044b16570c74f2bb043daddda", "filename": "build_system/build_backend.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/70a1cb9e62df17fbba0d30c884c7d98edf2ef780/build_system%2Fbuild_backend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70a1cb9e62df17fbba0d30c884c7d98edf2ef780/build_system%2Fbuild_backend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fbuild_backend.rs?ref=70a1cb9e62df17fbba0d30c884c7d98edf2ef780", "patch": "@@ -10,10 +10,10 @@ static CG_CLIF: CargoProject = CargoProject::new(&RelPath::SOURCE, \"cg_clif\");\n pub(crate) fn build_backend(\n     dirs: &Dirs,\n     channel: &str,\n-    host_triple: &str,\n+    host_compiler: &Compiler,\n     use_unstable_features: bool,\n ) -> PathBuf {\n-    let mut cmd = CG_CLIF.build(&Compiler::host(), dirs);\n+    let mut cmd = CG_CLIF.build(&host_compiler, dirs);\n \n     cmd.env(\"CARGO_BUILD_INCREMENTAL\", \"true\"); // Force incr comp even in release mode\n \n@@ -48,7 +48,7 @@ pub(crate) fn build_backend(\n \n     CG_CLIF\n         .target_dir(dirs)\n-        .join(host_triple)\n+        .join(&host_compiler.triple)\n         .join(channel)\n         .join(get_file_name(\"rustc_codegen_cranelift\", \"dylib\"))\n }"}, {"sha": "f7bdf517976a3f4dcf0fb8a7229dbf1133d25e99", "filename": "build_system/build_sysroot.rs", "status": "modified", "additions": 22, "deletions": 13, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/70a1cb9e62df17fbba0d30c884c7d98edf2ef780/build_system%2Fbuild_sysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70a1cb9e62df17fbba0d30c884c7d98edf2ef780/build_system%2Fbuild_sysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fbuild_sysroot.rs?ref=70a1cb9e62df17fbba0d30c884c7d98edf2ef780", "patch": "@@ -17,7 +17,7 @@ pub(crate) fn build_sysroot(\n     channel: &str,\n     sysroot_kind: SysrootKind,\n     cg_clif_dylib_src: &Path,\n-    host_triple: &str,\n+    host_compiler: &Compiler,\n     target_triple: &str,\n ) {\n     eprintln!(\"[BUILD] sysroot {:?}\", sysroot_kind);\n@@ -53,7 +53,7 @@ pub(crate) fn build_sysroot(\n \n     let default_sysroot = super::rustc_info::get_default_sysroot();\n \n-    let host_rustlib_lib = RUSTLIB_DIR.to_path(dirs).join(host_triple).join(\"lib\");\n+    let host_rustlib_lib = RUSTLIB_DIR.to_path(dirs).join(&host_compiler.triple).join(\"lib\");\n     let target_rustlib_lib = RUSTLIB_DIR.to_path(dirs).join(target_triple).join(\"lib\");\n     fs::create_dir_all(&host_rustlib_lib).unwrap();\n     fs::create_dir_all(&target_rustlib_lib).unwrap();\n@@ -83,7 +83,7 @@ pub(crate) fn build_sysroot(\n         SysrootKind::None => {} // Nothing to do\n         SysrootKind::Llvm => {\n             for file in fs::read_dir(\n-                default_sysroot.join(\"lib\").join(\"rustlib\").join(host_triple).join(\"lib\"),\n+                default_sysroot.join(\"lib\").join(\"rustlib\").join(&host_compiler.triple).join(\"lib\"),\n             )\n             .unwrap()\n             {\n@@ -103,7 +103,7 @@ pub(crate) fn build_sysroot(\n                 try_hard_link(&file, host_rustlib_lib.join(file.file_name().unwrap()));\n             }\n \n-            if target_triple != host_triple {\n+            if target_triple != host_compiler.triple {\n                 for file in fs::read_dir(\n                     default_sysroot.join(\"lib\").join(\"rustlib\").join(target_triple).join(\"lib\"),\n                 )\n@@ -115,9 +115,15 @@ pub(crate) fn build_sysroot(\n             }\n         }\n         SysrootKind::Clif => {\n-            build_clif_sysroot_for_triple(dirs, channel, host_triple, &cg_clif_dylib_path, None);\n+            build_clif_sysroot_for_triple(\n+                dirs,\n+                channel,\n+                host_compiler.clone(),\n+                &cg_clif_dylib_path,\n+                None,\n+            );\n \n-            if host_triple != target_triple {\n+            if host_compiler.triple != target_triple {\n                 // When cross-compiling it is often necessary to manually pick the right linker\n                 let linker = match target_triple {\n                     \"aarch64-unknown-linux-gnu\" => Some(\"aarch64-linux-gnu-gcc\"),\n@@ -127,7 +133,11 @@ pub(crate) fn build_sysroot(\n                 build_clif_sysroot_for_triple(\n                     dirs,\n                     channel,\n-                    target_triple,\n+                    {\n+                        let mut target_compiler = host_compiler.clone();\n+                        target_compiler.triple = target_triple.to_owned();\n+                        target_compiler\n+                    },\n                     &cg_clif_dylib_path,\n                     linker,\n                 );\n@@ -155,7 +165,7 @@ static STANDARD_LIBRARY: CargoProject = CargoProject::new(&BUILD_SYSROOT, \"build\n fn build_clif_sysroot_for_triple(\n     dirs: &Dirs,\n     channel: &str,\n-    triple: &str,\n+    mut compiler: Compiler,\n     cg_clif_dylib_path: &Path,\n     linker: Option<&str>,\n ) {\n@@ -177,7 +187,7 @@ fn build_clif_sysroot_for_triple(\n         }\n     }\n \n-    let build_dir = STANDARD_LIBRARY.target_dir(dirs).join(triple).join(channel);\n+    let build_dir = STANDARD_LIBRARY.target_dir(dirs).join(&compiler.triple).join(channel);\n \n     if !super::config::get_bool(\"keep_sysroot\") {\n         // Cleanup the deps dir, but keep build scripts and the incremental cache for faster\n@@ -188,7 +198,7 @@ fn build_clif_sysroot_for_triple(\n     }\n \n     // Build sysroot\n-    let mut rustflags = \"-Zforce-unstable-if-unmarked -Cpanic=abort\".to_string();\n+    let mut rustflags = \" -Zforce-unstable-if-unmarked -Cpanic=abort\".to_string();\n     rustflags.push_str(&format!(\" -Zcodegen-backend={}\", cg_clif_dylib_path.to_str().unwrap()));\n     rustflags.push_str(&format!(\" --sysroot={}\", DIST_DIR.to_path(dirs).to_str().unwrap()));\n     if channel == \"release\" {\n@@ -198,8 +208,7 @@ fn build_clif_sysroot_for_triple(\n         use std::fmt::Write;\n         write!(rustflags, \" -Clinker={}\", linker).unwrap();\n     }\n-    let mut compiler = Compiler::with_triple(triple.to_owned());\n-    compiler.rustflags = rustflags;\n+    compiler.rustflags += &rustflags;\n     let mut build_cmd = STANDARD_LIBRARY.build(&compiler, dirs);\n     if channel == \"release\" {\n         build_cmd.arg(\"--release\");\n@@ -219,7 +228,7 @@ fn build_clif_sysroot_for_triple(\n         };\n         try_hard_link(\n             entry.path(),\n-            RUSTLIB_DIR.to_path(dirs).join(triple).join(\"lib\").join(entry.file_name()),\n+            RUSTLIB_DIR.to_path(dirs).join(&compiler.triple).join(\"lib\").join(entry.file_name()),\n         );\n     }\n }"}, {"sha": "f2de07cf5eb8535e05780777a4827203481c91b7", "filename": "build_system/mod.rs", "status": "modified", "additions": 22, "deletions": 32, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/70a1cb9e62df17fbba0d30c884c7d98edf2ef780/build_system%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70a1cb9e62df17fbba0d30c884c7d98edf2ef780/build_system%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fmod.rs?ref=70a1cb9e62df17fbba0d30c884c7d98edf2ef780", "patch": "@@ -2,7 +2,7 @@ use std::env;\n use std::path::PathBuf;\n use std::process;\n \n-use self::utils::is_ci;\n+use self::utils::{is_ci, Compiler};\n \n mod abi_cafe;\n mod bench;\n@@ -121,24 +121,16 @@ pub fn main() {\n         }\n     }\n \n-    let host_triple = if let Ok(host_triple) = std::env::var(\"HOST_TRIPLE\") {\n-        host_triple\n-    } else if let Some(host_triple) = config::get_value(\"host\") {\n-        host_triple\n-    } else {\n-        rustc_info::get_host_triple()\n-    };\n-    let target_triple = if let Ok(target_triple) = std::env::var(\"TARGET_TRIPLE\") {\n-        if target_triple != \"\" {\n-            target_triple\n-        } else {\n-            host_triple.clone() // Empty target triple can happen on GHA\n-        }\n-    } else if let Some(target_triple) = config::get_value(\"target\") {\n-        target_triple\n-    } else {\n-        host_triple.clone()\n-    };\n+    let host_compiler = Compiler::llvm_with_triple(\n+        std::env::var(\"HOST_TRIPLE\")\n+            .ok()\n+            .or_else(|| config::get_value(\"host\"))\n+            .unwrap_or_else(|| rustc_info::get_host_triple()),\n+    );\n+    let target_triple = std::env::var(\"TARGET_TRIPLE\")\n+        .ok()\n+        .or_else(|| config::get_value(\"target\"))\n+        .unwrap_or_else(|| host_compiler.triple.clone());\n \n     // FIXME allow changing the location of these dirs using cli arguments\n     let current_dir = std::env::current_dir().unwrap();\n@@ -167,7 +159,7 @@ pub fn main() {\n     }\n \n     let cg_clif_dylib =\n-        build_backend::build_backend(&dirs, channel, &host_triple, use_unstable_features);\n+        build_backend::build_backend(&dirs, channel, &host_compiler, use_unstable_features);\n     match command {\n         Command::Prepare => {\n             // Handled above\n@@ -178,26 +170,24 @@ pub fn main() {\n                 channel,\n                 sysroot_kind,\n                 &cg_clif_dylib,\n-                &host_triple,\n+                &host_compiler,\n                 &target_triple,\n             );\n \n-            abi_cafe::run(\n-                channel,\n-                sysroot_kind,\n-                &dirs,\n-                &cg_clif_dylib,\n-                &host_triple,\n-                &target_triple,\n-            );\n+            if host_compiler.triple == target_triple {\n+                abi_cafe::run(channel, sysroot_kind, &dirs, &cg_clif_dylib, &host_compiler);\n+            } else {\n+                eprintln!(\"[SKIP] abi-cafe (cross-compilation not supported)\");\n+                return;\n+            }\n         }\n         Command::Build => {\n             build_sysroot::build_sysroot(\n                 &dirs,\n                 channel,\n                 sysroot_kind,\n                 &cg_clif_dylib,\n-                &host_triple,\n+                &host_compiler,\n                 &target_triple,\n             );\n         }\n@@ -207,10 +197,10 @@ pub fn main() {\n                 channel,\n                 sysroot_kind,\n                 &cg_clif_dylib,\n-                &host_triple,\n+                &host_compiler,\n                 &target_triple,\n             );\n-            bench::benchmark(&dirs);\n+            bench::benchmark(&dirs, &host_compiler);\n         }\n     }\n }"}, {"sha": "9139b3ccecc1cb1604b7d27ed4a466403cd4318a", "filename": "build_system/tests.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/70a1cb9e62df17fbba0d30c884c7d98edf2ef780/build_system%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70a1cb9e62df17fbba0d30c884c7d98edf2ef780/build_system%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Ftests.rs?ref=70a1cb9e62df17fbba0d30c884c7d98edf2ef780", "patch": "@@ -385,18 +385,19 @@ pub(crate) fn run_tests(\n     channel: &str,\n     sysroot_kind: SysrootKind,\n     cg_clif_dylib: &Path,\n-    host_triple: &str,\n+    host_compiler: &Compiler,\n     target_triple: &str,\n ) {\n-    let runner = TestRunner::new(dirs.clone(), host_triple.to_string(), target_triple.to_string());\n+    let runner =\n+        TestRunner::new(dirs.clone(), host_compiler.triple.clone(), target_triple.to_string());\n \n     if config::get_bool(\"testsuite.no_sysroot\") {\n         build_sysroot::build_sysroot(\n             dirs,\n             channel,\n             SysrootKind::None,\n             cg_clif_dylib,\n-            &host_triple,\n+            host_compiler,\n             &target_triple,\n         );\n \n@@ -415,7 +416,7 @@ pub(crate) fn run_tests(\n             channel,\n             sysroot_kind,\n             cg_clif_dylib,\n-            &host_triple,\n+            host_compiler,\n             &target_triple,\n         );\n     }\n@@ -445,7 +446,7 @@ impl TestRunner {\n     pub fn new(dirs: Dirs, host_triple: String, target_triple: String) -> Self {\n         let is_native = host_triple == target_triple;\n         let jit_supported =\n-            target_triple.contains(\"x86_64\") && is_native && !host_triple.contains(\"windows\");\n+            is_native && host_triple.contains(\"x86_64\") && !host_triple.contains(\"windows\");\n \n         let mut rustflags = env::var(\"RUSTFLAGS\").ok().unwrap_or(\"\".to_string());\n         let mut runner = vec![];"}, {"sha": "d244da1b2e04eafe897a38fa9369fc792d032abf", "filename": "build_system/utils.rs", "status": "modified", "additions": 3, "deletions": 16, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/70a1cb9e62df17fbba0d30c884c7d98edf2ef780/build_system%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70a1cb9e62df17fbba0d30c884c7d98edf2ef780/build_system%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Futils.rs?ref=70a1cb9e62df17fbba0d30c884c7d98edf2ef780", "patch": "@@ -5,10 +5,9 @@ use std::path::{Path, PathBuf};\n use std::process::{self, Command, Stdio};\n \n use super::path::{Dirs, RelPath};\n-use super::rustc_info::{\n-    get_cargo_path, get_host_triple, get_rustc_path, get_rustdoc_path, get_wrapper_file_name,\n-};\n+use super::rustc_info::{get_cargo_path, get_rustc_path, get_rustdoc_path, get_wrapper_file_name};\n \n+#[derive(Clone, Debug)]\n pub(crate) struct Compiler {\n     pub(crate) cargo: PathBuf,\n     pub(crate) rustc: PathBuf,\n@@ -20,19 +19,7 @@ pub(crate) struct Compiler {\n }\n \n impl Compiler {\n-    pub(crate) fn host() -> Compiler {\n-        Compiler {\n-            cargo: get_cargo_path(),\n-            rustc: get_rustc_path(),\n-            rustdoc: get_rustdoc_path(),\n-            rustflags: String::new(),\n-            rustdocflags: String::new(),\n-            triple: get_host_triple(),\n-            runner: vec![],\n-        }\n-    }\n-\n-    pub(crate) fn with_triple(triple: String) -> Compiler {\n+    pub(crate) fn llvm_with_triple(triple: String) -> Compiler {\n         Compiler {\n             cargo: get_cargo_path(),\n             rustc: get_rustc_path(),"}]}