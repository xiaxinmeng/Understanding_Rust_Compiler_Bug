{"sha": "adbd01e84ad791ef370dc1d2baa726603f42094a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkYmQwMWU4NGFkNzkxZWYzNzBkYzFkMmJhYTcyNjYwM2Y0MjA5NGE=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-01-14T04:30:33Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-01-20T09:28:10Z"}, "message": "Track constness while lowering bounds", "tree": {"sha": "b63b6691622fe7905f4363bd6650ced96c37468a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b63b6691622fe7905f4363bd6650ced96c37468a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/adbd01e84ad791ef370dc1d2baa726603f42094a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/adbd01e84ad791ef370dc1d2baa726603f42094a", "html_url": "https://github.com/rust-lang/rust/commit/adbd01e84ad791ef370dc1d2baa726603f42094a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/adbd01e84ad791ef370dc1d2baa726603f42094a/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2aefbb286c94240e25cbe0b8cc92a1336db5408", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2aefbb286c94240e25cbe0b8cc92a1336db5408", "html_url": "https://github.com/rust-lang/rust/commit/d2aefbb286c94240e25cbe0b8cc92a1336db5408"}], "stats": {"total": 112, "additions": 86, "deletions": 26}, "files": [{"sha": "a914537d134089db43b39d45297b8943b36c2165", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/adbd01e84ad791ef370dc1d2baa726603f42094a/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adbd01e84ad791ef370dc1d2baa726603f42094a/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=adbd01e84ad791ef370dc1d2baa726603f42094a", "patch": "@@ -1237,7 +1237,7 @@ impl<'a, 'tcx> Visitor<'tcx> for TypePrivacyVisitor<'a, 'tcx> {\n             // The traits' privacy in bodies is already checked as a part of trait object types.\n             let bounds = rustc_typeck::hir_trait_to_predicates(self.tcx, trait_ref);\n \n-            for (trait_predicate, _) in bounds.trait_bounds {\n+            for (trait_predicate, _, _) in bounds.trait_bounds {\n                 if self.visit_trait(*trait_predicate.skip_binder()) {\n                     return;\n                 }"}, {"sha": "6726a1461052b03bb12107e490809c070286273d", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 35, "deletions": 19, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/adbd01e84ad791ef370dc1d2baa726603f42094a/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adbd01e84ad791ef370dc1d2baa726603f42094a/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=adbd01e84ad791ef370dc1d2baa726603f42094a", "patch": "@@ -31,7 +31,7 @@ use rustc_span::symbol::sym;\n use rustc_span::{MultiSpan, Span, DUMMY_SP};\n use rustc_target::spec::abi;\n use smallvec::SmallVec;\n-use syntax::ast;\n+use syntax::ast::{self, Constness};\n use syntax::util::lev_distance::find_best_match_for_name;\n \n use std::collections::BTreeSet;\n@@ -49,6 +49,8 @@ pub trait AstConv<'tcx> {\n \n     fn item_def_id(&self) -> Option<DefId>;\n \n+    fn default_constness_for_trait_bounds(&self) -> Constness;\n+\n     /// Returns predicates in scope of the form `X: Foo`, where `X` is\n     /// a type parameter `X` with the given id `def_id`. This is a\n     /// subset of the full set of predicates.\n@@ -919,6 +921,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         &self,\n         trait_ref: &hir::TraitRef<'_>,\n         span: Span,\n+        constness: Constness,\n         self_ty: Ty<'tcx>,\n         bounds: &mut Bounds<'tcx>,\n         speculative: bool,\n@@ -947,7 +950,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         );\n         let poly_trait_ref = ty::Binder::bind(ty::TraitRef::new(trait_def_id, substs));\n \n-        bounds.trait_bounds.push((poly_trait_ref, span));\n+        bounds.trait_bounds.push((poly_trait_ref, span, constness));\n \n         let mut dup_bindings = FxHashMap::default();\n         for binding in &assoc_bindings {\n@@ -993,12 +996,14 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n     pub fn instantiate_poly_trait_ref(\n         &self,\n         poly_trait_ref: &hir::PolyTraitRef<'_>,\n+        constness: Constness,\n         self_ty: Ty<'tcx>,\n         bounds: &mut Bounds<'tcx>,\n     ) -> Option<Vec<Span>> {\n         self.instantiate_poly_trait_ref_inner(\n             &poly_trait_ref.trait_ref,\n             poly_trait_ref.span,\n+            constness,\n             self_ty,\n             bounds,\n             false,\n@@ -1181,18 +1186,22 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         let mut trait_bounds = Vec::new();\n         let mut region_bounds = Vec::new();\n \n+        let constness = self.default_constness_for_trait_bounds();\n         for ast_bound in ast_bounds {\n             match *ast_bound {\n                 hir::GenericBound::Trait(ref b, hir::TraitBoundModifier::None) => {\n-                    trait_bounds.push(b)\n+                    trait_bounds.push((b, constness))\n+                }\n+                hir::GenericBound::Trait(ref b, hir::TraitBoundModifier::MaybeConst) => {\n+                    trait_bounds.push((b, Constness::NotConst))\n                 }\n                 hir::GenericBound::Trait(_, hir::TraitBoundModifier::Maybe) => {}\n                 hir::GenericBound::Outlives(ref l) => region_bounds.push(l),\n             }\n         }\n \n-        for bound in trait_bounds {\n-            let _ = self.instantiate_poly_trait_ref(bound, param_ty, bounds);\n+        for (bound, constness) in trait_bounds {\n+            let _ = self.instantiate_poly_trait_ref(bound, constness, param_ty, bounds);\n         }\n \n         bounds.region_bounds.extend(\n@@ -1226,7 +1235,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         let mut bounds = Bounds::default();\n \n         self.add_bounds(param_ty, ast_bounds, &mut bounds);\n-        bounds.trait_bounds.sort_by_key(|(t, _)| t.def_id());\n+        bounds.trait_bounds.sort_by_key(|(t, _, _)| t.def_id());\n \n         bounds.implicitly_sized = if let SizedByDefault::Yes = sized_by_default {\n             if !self.is_unsized(ast_bounds, span) { Some(span) } else { None }\n@@ -1417,15 +1426,21 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         let mut potential_assoc_types = Vec::new();\n         let dummy_self = self.tcx().types.trait_object_dummy_self;\n         for trait_bound in trait_bounds.iter().rev() {\n-            let cur_potential_assoc_types =\n-                self.instantiate_poly_trait_ref(trait_bound, dummy_self, &mut bounds);\n+            let cur_potential_assoc_types = self.instantiate_poly_trait_ref(\n+                trait_bound,\n+                Constness::NotConst,\n+                dummy_self,\n+                &mut bounds,\n+            );\n             potential_assoc_types.extend(cur_potential_assoc_types.into_iter().flatten());\n         }\n \n         // Expand trait aliases recursively and check that only one regular (non-auto) trait\n         // is used and no 'maybe' bounds are used.\n-        let expanded_traits =\n-            traits::expand_trait_aliases(tcx, bounds.trait_bounds.iter().cloned());\n+        let expanded_traits = traits::expand_trait_aliases(\n+            tcx,\n+            bounds.trait_bounds.iter().map(|&(a, b, _)| (a.clone(), b)),\n+        );\n         let (mut auto_traits, regular_traits): (Vec<_>, Vec<_>) =\n             expanded_traits.partition(|i| tcx.trait_is_auto(i.trait_ref().def_id()));\n         if regular_traits.len() > 1 {\n@@ -1481,16 +1496,18 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         let regular_traits_refs_spans = bounds\n             .trait_bounds\n             .into_iter()\n-            .filter(|(trait_ref, _)| !tcx.trait_is_auto(trait_ref.def_id()));\n+            .filter(|(trait_ref, _, _)| !tcx.trait_is_auto(trait_ref.def_id()));\n+\n+        for (base_trait_ref, span, constness) in regular_traits_refs_spans {\n+            assert_eq!(constness, ast::Constness::NotConst);\n \n-        for (base_trait_ref, span) in regular_traits_refs_spans {\n             for trait_ref in traits::elaborate_trait_ref(tcx, base_trait_ref) {\n                 debug!(\n                     \"conv_object_ty_poly_trait_ref: observing object predicate `{:?}`\",\n                     trait_ref\n                 );\n                 match trait_ref {\n-                    ty::Predicate::Trait(pred, constness) => {\n+                    ty::Predicate::Trait(pred, _) => {\n                         associated_types.entry(span).or_default().extend(\n                             tcx.associated_items(pred.def_id())\n                                 .filter(|item| item.kind == ty::AssocKind::Type)\n@@ -2949,7 +2966,7 @@ pub struct Bounds<'tcx> {\n \n     /// A list of trait bounds. So if you had `T: Debug` this would be\n     /// `T: Debug`. Note that the self-type is explicit here.\n-    pub trait_bounds: Vec<(ty::PolyTraitRef<'tcx>, Span)>,\n+    pub trait_bounds: Vec<(ty::PolyTraitRef<'tcx>, Span, Constness)>,\n \n     /// A list of projection equality bounds. So if you had `T:\n     /// Iterator<Item = u32>` this would include `<T as\n@@ -2997,11 +3014,10 @@ impl<'tcx> Bounds<'tcx> {\n                         let outlives = ty::OutlivesPredicate(param_ty, region_bound);\n                         (ty::Binder::bind(outlives).to_predicate(), span)\n                     })\n-                    .chain(\n-                        self.trait_bounds\n-                            .iter()\n-                            .map(|&(bound_trait_ref, span)| (bound_trait_ref.to_predicate(), span)),\n-                    )\n+                    .chain(self.trait_bounds.iter().map(|&(bound_trait_ref, span, constness)| {\n+                        let predicate = bound_trait_ref.with_constness(constness).to_predicate();\n+                        (predicate, span)\n+                    }))\n                     .chain(\n                         self.projection_bounds\n                             .iter()"}, {"sha": "5e1b3a76fd28fbef49faaaf100860c327d40badb", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/adbd01e84ad791ef370dc1d2baa726603f42094a/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adbd01e84ad791ef370dc1d2baa726603f42094a/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=adbd01e84ad791ef370dc1d2baa726603f42094a", "patch": "@@ -90,6 +90,7 @@ pub mod writeback;\n use crate::astconv::{AstConv, PathSeg};\n use crate::middle::lang_items;\n use crate::namespace::Namespace;\n+use rustc::hir::map::blocks::FnLikeNode;\n use rustc::hir::map::Map;\n use rustc::infer::canonical::{Canonical, OriginalQueryValues, QueryResponse};\n use rustc::infer::error_reporting::TypeAnnotationNeeded::E0282;\n@@ -2612,6 +2613,16 @@ impl<'a, 'tcx> AstConv<'tcx> for FnCtxt<'a, 'tcx> {\n         None\n     }\n \n+    fn default_constness_for_trait_bounds(&self) -> ast::Constness {\n+        // FIXME: refactor this into a method\n+        let node = self.tcx.hir().get(self.body_id);\n+        if let Some(fn_like) = FnLikeNode::from_node(node) {\n+            fn_like.constness()\n+        } else {\n+            ast::Constness::NotConst\n+        }\n+    }\n+\n     fn get_type_parameter_bounds(&self, _: Span, def_id: DefId) -> ty::GenericPredicates<'tcx> {\n         let tcx = self.tcx;\n         let hir_id = tcx.hir().as_local_hir_id(def_id).unwrap();"}, {"sha": "45d969a3d574f17c861a0f52775fb92700b5da23", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 38, "deletions": 6, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/adbd01e84ad791ef370dc1d2baa726603f42094a/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adbd01e84ad791ef370dc1d2baa726603f42094a/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=adbd01e84ad791ef370dc1d2baa726603f42094a", "patch": "@@ -20,6 +20,7 @@ use crate::constrained_generic_params as cgp;\n use crate::lint;\n use crate::middle::resolve_lifetime as rl;\n use crate::middle::weak_lang_items;\n+use rustc::hir::map::blocks::FnLikeNode;\n use rustc::hir::map::Map;\n use rustc::middle::codegen_fn_attrs::{CodegenFnAttrFlags, CodegenFnAttrs};\n use rustc::mir::mono::Linkage;\n@@ -288,6 +289,22 @@ impl AstConv<'tcx> for ItemCtxt<'tcx> {\n         Some(self.item_def_id)\n     }\n \n+    fn default_constness_for_trait_bounds(&self) -> ast::Constness {\n+        // FIXME: refactor this into a method\n+        let hir_id = self\n+            .tcx\n+            .hir()\n+            .as_local_hir_id(self.item_def_id)\n+            .expect(\"Non-local call to local provider is_const_fn\");\n+\n+        let node = self.tcx.hir().get(hir_id);\n+        if let Some(fn_like) = FnLikeNode::from_node(node) {\n+            fn_like.constness()\n+        } else {\n+            ast::Constness::NotConst\n+        }\n+    }\n+\n     fn get_type_parameter_bounds(&self, span: Span, def_id: DefId) -> ty::GenericPredicates<'tcx> {\n         self.tcx.at(span).type_param_predicates((self.item_def_id, def_id))\n     }\n@@ -454,6 +471,7 @@ impl ItemCtxt<'tcx> {\n         ty: Ty<'tcx>,\n         only_self_bounds: OnlySelfBounds,\n     ) -> Vec<(ty::Predicate<'tcx>, Span)> {\n+        let constness = self.default_constness_for_trait_bounds();\n         let from_ty_params = ast_generics\n             .params\n             .iter()\n@@ -462,7 +480,7 @@ impl ItemCtxt<'tcx> {\n                 _ => None,\n             })\n             .flat_map(|bounds| bounds.iter())\n-            .flat_map(|b| predicates_from_bound(self, ty, b));\n+            .flat_map(|b| predicates_from_bound(self, ty, b, constness));\n \n         let from_where_clauses = ast_generics\n             .where_clause\n@@ -482,7 +500,7 @@ impl ItemCtxt<'tcx> {\n                 };\n                 bp.bounds.iter().filter_map(move |b| bt.map(|bt| (bt, b)))\n             })\n-            .flat_map(|(bt, b)| predicates_from_bound(self, bt, b));\n+            .flat_map(|(bt, b)| predicates_from_bound(self, bt, b, constness));\n \n         from_ty_params.chain(from_where_clauses).collect()\n     }\n@@ -2107,6 +2125,7 @@ fn explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericPredicat\n     let mut is_default_impl_trait = None;\n \n     let icx = ItemCtxt::new(tcx, def_id);\n+    let constness = icx.default_constness_for_trait_bounds();\n \n     const NO_GENERICS: &hir::Generics<'_> = &hir::Generics::empty();\n \n@@ -2308,11 +2327,18 @@ fn explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericPredicat\n \n                 for bound in bound_pred.bounds.iter() {\n                     match bound {\n-                        &hir::GenericBound::Trait(ref poly_trait_ref, _) => {\n+                        &hir::GenericBound::Trait(ref poly_trait_ref, modifier) => {\n+                            let constness = match modifier {\n+                                hir::TraitBoundModifier::MaybeConst => ast::Constness::NotConst,\n+                                hir::TraitBoundModifier::None => constness,\n+                                hir::TraitBoundModifier::Maybe => bug!(\"this wasn't handled\"),\n+                            };\n+\n                             let mut bounds = Bounds::default();\n                             let _ = AstConv::instantiate_poly_trait_ref(\n                                 &icx,\n                                 poly_trait_ref,\n+                                constness,\n                                 ty,\n                                 &mut bounds,\n                             );\n@@ -2488,19 +2514,25 @@ fn predicates_from_bound<'tcx>(\n     astconv: &dyn AstConv<'tcx>,\n     param_ty: Ty<'tcx>,\n     bound: &'tcx hir::GenericBound<'tcx>,\n+    constness: ast::Constness,\n ) -> Vec<(ty::Predicate<'tcx>, Span)> {\n     match *bound {\n-        hir::GenericBound::Trait(ref tr, hir::TraitBoundModifier::None) => {\n+        hir::GenericBound::Trait(ref tr, modifier) => {\n+            let constness = match modifier {\n+                hir::TraitBoundModifier::Maybe => return vec![],\n+                hir::TraitBoundModifier::MaybeConst => ast::Constness::NotConst,\n+                hir::TraitBoundModifier::None => constness,\n+            };\n+\n             let mut bounds = Bounds::default();\n-            let _ = astconv.instantiate_poly_trait_ref(tr, param_ty, &mut bounds);\n+            let _ = astconv.instantiate_poly_trait_ref(tr, constness, param_ty, &mut bounds);\n             bounds.predicates(astconv.tcx(), param_ty)\n         }\n         hir::GenericBound::Outlives(ref lifetime) => {\n             let region = astconv.ast_region_to_region(lifetime, None);\n             let pred = ty::Binder::bind(ty::OutlivesPredicate(param_ty, region));\n             vec![(ty::Predicate::TypeOutlives(pred), lifetime.span)]\n         }\n-        hir::GenericBound::Trait(_, hir::TraitBoundModifier::Maybe) => vec![],\n     }\n }\n "}, {"sha": "b3cf5f21fab9b09b16ff1b79936f929174032c53", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/adbd01e84ad791ef370dc1d2baa726603f42094a/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adbd01e84ad791ef370dc1d2baa726603f42094a/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=adbd01e84ad791ef370dc1d2baa726603f42094a", "patch": "@@ -382,6 +382,7 @@ pub fn hir_trait_to_predicates<'tcx>(\n         &item_cx,\n         hir_trait,\n         DUMMY_SP,\n+        syntax::ast::Constness::NotConst,\n         tcx.types.err,\n         &mut bounds,\n         true,"}]}