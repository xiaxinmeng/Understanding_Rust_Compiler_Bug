{"sha": "ef01fe6bbc0f675bb2795fb86113ae5ae0c92d3b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmMDFmZTZiYmMwZjY3NWJiMjc5NWZiODYxMTNhZTVhZTBjOTJkM2I=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-26T02:21:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-26T02:21:29Z"}, "message": "Rollup merge of #70375 - RalfJung:check-defined-err, r=oli-obk\n\navoid catching InterpError\n\nAvoid raising and then capturing `InterpError` for the definedness check.\n\nCc https://github.com/rust-lang/rust/issues/69297\nr? @oli-obk", "tree": {"sha": "d03f571f86c0efe065b966f9ea9d834fe0789f6b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d03f571f86c0efe065b966f9ea9d834fe0789f6b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef01fe6bbc0f675bb2795fb86113ae5ae0c92d3b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJefBGpCRBK7hj4Ov3rIwAAdHIIABIXPYRHWvqNLuuRp/2WdPkq\nsQFzmq1lv5STpSoNpG2OMQzHwnQrwf5nSU2uQZ2T/gR6V4tUujssXrPGSpfTc8SU\nZd1gZjcOLYwwSxG43DFemtpnPD/GG1u1749RFktl7dYXM8Z8yBe+jchJa1tQwDyd\n2av5/X9VWBN41Cdfan1s4aNyg5LXW+IGOZh882S6e1rvd2i0llF5ySUdRDOQyhGp\njp9Gb3O1J2Eud4vFWg6MI2jgJqm3kNcaFcShEZmlCGbmp4WESP7nDVkFC6hcKpih\nPdZakH8XuzPnDrVtQjZHaDJkDPvaa5D/7jy3Q9vUb0gIhlNYnux213NW2ePAeXE=\n=6BVW\n-----END PGP SIGNATURE-----\n", "payload": "tree d03f571f86c0efe065b966f9ea9d834fe0789f6b\nparent 9fa4953aa440cb85d13d6cc2a8a532a7d674cfa3\nparent 0fdb7df32b0398f6cdac154c6c1c29e505147da6\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1585189289 +0100\ncommitter GitHub <noreply@github.com> 1585189289 +0100\n\nRollup merge of #70375 - RalfJung:check-defined-err, r=oli-obk\n\navoid catching InterpError\n\nAvoid raising and then capturing `InterpError` for the definedness check.\n\nCc https://github.com/rust-lang/rust/issues/69297\nr? @oli-obk\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef01fe6bbc0f675bb2795fb86113ae5ae0c92d3b", "html_url": "https://github.com/rust-lang/rust/commit/ef01fe6bbc0f675bb2795fb86113ae5ae0c92d3b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef01fe6bbc0f675bb2795fb86113ae5ae0c92d3b/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9fa4953aa440cb85d13d6cc2a8a532a7d674cfa3", "url": "https://api.github.com/repos/rust-lang/rust/commits/9fa4953aa440cb85d13d6cc2a8a532a7d674cfa3", "html_url": "https://github.com/rust-lang/rust/commit/9fa4953aa440cb85d13d6cc2a8a532a7d674cfa3"}, {"sha": "0fdb7df32b0398f6cdac154c6c1c29e505147da6", "url": "https://api.github.com/repos/rust-lang/rust/commits/0fdb7df32b0398f6cdac154c6c1c29e505147da6", "html_url": "https://github.com/rust-lang/rust/commit/0fdb7df32b0398f6cdac154c6c1c29e505147da6"}], "stats": {"total": 16, "additions": 11, "deletions": 5}, "files": [{"sha": "ada02ceb5cbf3cc910d319039ef80e1ab628fa5c", "filename": "src/librustc/mir/interpret/allocation.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ef01fe6bbc0f675bb2795fb86113ae5ae0c92d3b/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef01fe6bbc0f675bb2795fb86113ae5ae0c92d3b/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs?ref=ef01fe6bbc0f675bb2795fb86113ae5ae0c92d3b", "patch": "@@ -367,7 +367,7 @@ impl<'tcx, Tag: Copy, Extra: AllocationExtra<Tag>> Allocation<Tag, Extra> {\n         let bytes = self.get_bytes_with_undef_and_ptr(cx, ptr, size)?;\n         // Undef check happens *after* we established that the alignment is correct.\n         // We must not return `Ok()` for unaligned pointers!\n-        if self.check_defined(ptr, size).is_err() {\n+        if self.is_defined(ptr, size).is_err() {\n             // This inflates undefined bytes to the entire scalar, even if only a few\n             // bytes are undefined.\n             return Ok(ScalarMaybeUndef::Undef);\n@@ -552,13 +552,19 @@ impl<'tcx, Tag: Copy, Extra> Allocation<Tag, Extra> {\n }\n \n /// Undefined bytes.\n-impl<'tcx, Tag, Extra> Allocation<Tag, Extra> {\n+impl<'tcx, Tag: Copy, Extra> Allocation<Tag, Extra> {\n+    /// Checks whether the given range  is entirely defined.\n+    ///\n+    /// Returns `Ok(())` if it's defined. Otherwise returns the index of the byte\n+    /// at which the first undefined access begins.\n+    fn is_defined(&self, ptr: Pointer<Tag>, size: Size) -> Result<(), Size> {\n+        self.undef_mask.is_range_defined(ptr.offset, ptr.offset + size) // `Size` addition\n+    }\n+\n     /// Checks that a range of bytes is defined. If not, returns the `ReadUndefBytes`\n     /// error which will report the first byte which is undefined.\n-    #[inline]\n     fn check_defined(&self, ptr: Pointer<Tag>, size: Size) -> InterpResult<'tcx> {\n-        self.undef_mask\n-            .is_range_defined(ptr.offset, ptr.offset + size) // `Size` addition\n+        self.is_defined(ptr, size)\n             .or_else(|idx| throw_ub!(InvalidUndefBytes(Some(Pointer::new(ptr.alloc_id, idx)))))\n     }\n "}]}