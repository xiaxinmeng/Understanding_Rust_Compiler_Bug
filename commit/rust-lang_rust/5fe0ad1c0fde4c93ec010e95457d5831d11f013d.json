{"sha": "5fe0ad1c0fde4c93ec010e95457d5831d11f013d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmZTBhZDFjMGZkZTRjOTNlYzAxMGU5NTQ1N2Q1ODMxZDExZjAxM2Q=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-12-10T15:59:20Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-12-14T16:11:55Z"}, "message": "Implement `unsafe trait` semantics.", "tree": {"sha": "5cf46e5b4e42399e4fc496e16afcdd262cc06e8e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5cf46e5b4e42399e4fc496e16afcdd262cc06e8e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5fe0ad1c0fde4c93ec010e95457d5831d11f013d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5fe0ad1c0fde4c93ec010e95457d5831d11f013d", "html_url": "https://github.com/rust-lang/rust/commit/5fe0ad1c0fde4c93ec010e95457d5831d11f013d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5fe0ad1c0fde4c93ec010e95457d5831d11f013d/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22f777ba2ecfcd8d914d37db310a6feb4ad5219e", "url": "https://api.github.com/repos/rust-lang/rust/commits/22f777ba2ecfcd8d914d37db310a6feb4ad5219e", "html_url": "https://github.com/rust-lang/rust/commit/22f777ba2ecfcd8d914d37db310a6feb4ad5219e"}], "stats": {"total": 151, "additions": 151, "deletions": 0}, "files": [{"sha": "a55f3c61919402a15c7d14716c77618c839da960", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fe0ad1c0fde4c93ec010e95457d5831d11f013d/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fe0ad1c0fde4c93ec010e95457d5831d11f013d/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=5fe0ad1c0fde4c93ec010e95457d5831d11f013d", "patch": "@@ -50,6 +50,7 @@ use util::ppaux::Repr;\n \n mod orphan;\n mod overlap;\n+mod unsafety;\n \n fn get_base_type<'a, 'tcx>(inference_context: &InferCtxt<'a, 'tcx>,\n                            span: Span,\n@@ -620,6 +621,7 @@ pub fn check_coherence(crate_context: &CrateCtxt) {\n         inference_context: new_infer_ctxt(crate_context.tcx),\n         inherent_impls: RefCell::new(FnvHashMap::new()),\n     }.check(crate_context.tcx.map.krate());\n+    unsafety::check(crate_context.tcx);\n     orphan::check(crate_context.tcx);\n     overlap::check(crate_context.tcx);\n }"}, {"sha": "07a84846c47ad26d96192b791939b2030dff9a84", "filename": "src/librustc_typeck/coherence/unsafety.rs", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/5fe0ad1c0fde4c93ec010e95457d5831d11f013d/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fe0ad1c0fde4c93ec010e95457d5831d11f013d/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs?ref=5fe0ad1c0fde4c93ec010e95457d5831d11f013d", "patch": "@@ -0,0 +1,77 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Unsafety checker: every impl either implements a trait defined in this\n+//! crate or pertains to a type defined in this crate.\n+\n+use middle::ty;\n+use syntax::ast::{Item, ItemImpl};\n+use syntax::ast;\n+use syntax::ast_util;\n+use syntax::visit;\n+use util::ppaux::UserString;\n+\n+pub fn check(tcx: &ty::ctxt) {\n+    let mut orphan = UnsafetyChecker { tcx: tcx };\n+    visit::walk_crate(&mut orphan, tcx.map.krate());\n+}\n+\n+struct UnsafetyChecker<'cx, 'tcx:'cx> {\n+    tcx: &'cx ty::ctxt<'tcx>\n+}\n+\n+impl<'cx, 'tcx,'v> visit::Visitor<'v> for UnsafetyChecker<'cx, 'tcx> {\n+    fn visit_item(&mut self, item: &'v ast::Item) {\n+        match item.node {\n+            ast::ItemImpl(unsafety, _, _, _, _) => {\n+                match ty::impl_trait_ref(self.tcx, ast_util::local_def(item.id)) {\n+                    None => {\n+                        // Inherent impl.\n+                        match unsafety {\n+                            ast::Unsafety::Normal => { /* OK */ }\n+                            ast::Unsafety::Unsafe => {\n+                                self.tcx.sess.span_err(\n+                                    item.span,\n+                                    \"inherent impls cannot be declared as unsafe\");\n+                            }\n+                        }\n+                    }\n+\n+                    Some(trait_ref) => {\n+                        let trait_def = ty::lookup_trait_def(self.tcx, trait_ref.def_id);\n+                        match (trait_def.unsafety, unsafety) {\n+                            (ast::Unsafety::Normal, ast::Unsafety::Unsafe) => {\n+                                self.tcx.sess.span_err(\n+                                    item.span,\n+                                    format!(\"implementing the trait `{}` is not unsafe\",\n+                                            trait_ref.user_string(self.tcx)).as_slice());\n+                            }\n+\n+                            (ast::Unsafety::Unsafe, ast::Unsafety::Normal) => {\n+                                self.tcx.sess.span_err(\n+                                    item.span,\n+                                    format!(\"the trait `{}` requires an `unsafe impl` declaration\",\n+                                            trait_ref.user_string(self.tcx)).as_slice());\n+                            }\n+\n+                            (ast::Unsafety::Unsafe, ast::Unsafety::Unsafe) |\n+                            (ast::Unsafety::Normal, ast::Unsafety::Normal) => {\n+                                /* OK */\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+            _ => { }\n+        }\n+\n+        visit::walk_item(self, item);\n+    }\n+}"}, {"sha": "d174092e4d0ac898312f7e7ab12473db9422df31", "filename": "src/test/compile-fail/trait-safety-fn-body.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/5fe0ad1c0fde4c93ec010e95457d5831d11f013d/src%2Ftest%2Fcompile-fail%2Ftrait-safety-fn-body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fe0ad1c0fde4c93ec010e95457d5831d11f013d/src%2Ftest%2Fcompile-fail%2Ftrait-safety-fn-body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-safety-fn-body.rs?ref=5fe0ad1c0fde4c93ec010e95457d5831d11f013d", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Check that an unsafe impl does not imply that unsafe actions are\n+// legal in the methods.\n+\n+unsafe trait UnsafeTrait {\n+    fn foo(self) { }\n+}\n+\n+unsafe impl UnsafeTrait for *mut int {\n+    fn foo(self) {\n+        // Unsafe actions are not made legal by taking place in an unsafe trait:\n+        *self += 1; //~ ERROR E0133\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "285d4c1ba8d14a312e55c7667e3fb3825830b765", "filename": "src/test/compile-fail/trait-safety-inherent-impl.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5fe0ad1c0fde4c93ec010e95457d5831d11f013d/src%2Ftest%2Fcompile-fail%2Ftrait-safety-inherent-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fe0ad1c0fde4c93ec010e95457d5831d11f013d/src%2Ftest%2Fcompile-fail%2Ftrait-safety-inherent-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-safety-inherent-impl.rs?ref=5fe0ad1c0fde4c93ec010e95457d5831d11f013d", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Check that inherent impls cannot be unsafe.\n+\n+struct SomeStruct;\n+\n+unsafe impl SomeStruct { //~ ERROR inherent impls cannot be declared as unsafe\n+    fn foo(self) { }\n+}\n+\n+fn main() { }"}, {"sha": "1bd6d76360768f8602e46615c73e2eff418776c8", "filename": "src/test/compile-fail/trait-safety-trait-impl.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/5fe0ad1c0fde4c93ec010e95457d5831d11f013d/src%2Ftest%2Fcompile-fail%2Ftrait-safety-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fe0ad1c0fde4c93ec010e95457d5831d11f013d/src%2Ftest%2Fcompile-fail%2Ftrait-safety-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-safety-trait-impl.rs?ref=5fe0ad1c0fde4c93ec010e95457d5831d11f013d", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Check that unsafe traits require unsafe impls and that inherent\n+// impls cannot be unsafe.\n+\n+trait SafeTrait {\n+    fn foo(self) { }\n+}\n+\n+unsafe trait UnsafeTrait {\n+    fn foo(self) { }\n+}\n+\n+unsafe impl UnsafeTrait for u8 { } // OK\n+\n+impl UnsafeTrait for u16 { } //~ ERROR requires an `unsafe impl` declaration\n+\n+unsafe impl SafeTrait for u32 { } //~ ERROR the trait `SafeTrait` is not unsafe\n+\n+fn main() { }"}]}