{"sha": "e3c1aea1578f644d22c909e4c91792919a3ed053", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzYzFhZWExNTc4ZjY0NGQyMmM5MDllNGM5MTc5MjkxOWEzZWQwNTM=", "commit": {"author": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2019-11-07T03:59:13Z"}, "committer": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2019-11-07T03:59:13Z"}, "message": "use-self: correctly ignore dummy paths", "tree": {"sha": "45b81ca635ed24a4518c7eb7d1966568f947faa0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/45b81ca635ed24a4518c7eb7d1966568f947faa0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e3c1aea1578f644d22c909e4c91792919a3ed053", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e3c1aea1578f644d22c909e4c91792919a3ed053", "html_url": "https://github.com/rust-lang/rust/commit/e3c1aea1578f644d22c909e4c91792919a3ed053", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e3c1aea1578f644d22c909e4c91792919a3ed053/comments", "author": null, "committer": null, "parents": [{"sha": "a952708b6c91678c24bfe58f1215c51e2656a4c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/a952708b6c91678c24bfe58f1215c51e2656a4c2", "html_url": "https://github.com/rust-lang/rust/commit/a952708b6c91678c24bfe58f1215c51e2656a4c2"}], "stats": {"total": 170, "additions": 108, "deletions": 62}, "files": [{"sha": "151e1999fece90fc922f01b54cd3cc7806d3bc6b", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 21, "deletions": 19, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/e3c1aea1578f644d22c909e4c91792919a3ed053/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c1aea1578f644d22c909e4c91792919a3ed053/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=e3c1aea1578f644d22c909e4c91792919a3ed053", "patch": "@@ -223,30 +223,32 @@ struct UseSelfVisitor<'a, 'tcx> {\n \n impl<'a, 'tcx> Visitor<'tcx> for UseSelfVisitor<'a, 'tcx> {\n     fn visit_path(&mut self, path: &'tcx Path, _id: HirId) {\n-        if path.segments.len() >= 2 && !path.segments.iter().any(|p| p.ident.span.is_dummy()) {\n-            let last_but_one = &path.segments[path.segments.len() - 2];\n-            if last_but_one.ident.name != kw::SelfUpper {\n-                let enum_def_id = match path.res {\n-                    Res::Def(DefKind::Variant, variant_def_id) => self.cx.tcx.parent(variant_def_id),\n-                    Res::Def(DefKind::Ctor(def::CtorOf::Variant, _), ctor_def_id) => {\n-                        let variant_def_id = self.cx.tcx.parent(ctor_def_id);\n-                        variant_def_id.and_then(|def_id| self.cx.tcx.parent(def_id))\n-                    },\n-                    _ => None,\n-                };\n+        if !path.segments.iter().any(|p| p.ident.span.is_dummy()) {\n+            if path.segments.len() >= 2 {\n+                let last_but_one = &path.segments[path.segments.len() - 2];\n+                if last_but_one.ident.name != kw::SelfUpper {\n+                    let enum_def_id = match path.res {\n+                        Res::Def(DefKind::Variant, variant_def_id) => self.cx.tcx.parent(variant_def_id),\n+                        Res::Def(DefKind::Ctor(def::CtorOf::Variant, _), ctor_def_id) => {\n+                            let variant_def_id = self.cx.tcx.parent(ctor_def_id);\n+                            variant_def_id.and_then(|def_id| self.cx.tcx.parent(def_id))\n+                        },\n+                        _ => None,\n+                    };\n \n-                if self.item_path.res.opt_def_id() == enum_def_id {\n-                    span_use_self_lint(self.cx, path, Some(last_but_one));\n+                    if self.item_path.res.opt_def_id() == enum_def_id {\n+                        span_use_self_lint(self.cx, path, Some(last_but_one));\n+                    }\n                 }\n             }\n-        }\n \n-        if path.segments.last().expect(SEGMENTS_MSG).ident.name != kw::SelfUpper {\n-            if self.item_path.res == path.res {\n-                span_use_self_lint(self.cx, path, None);\n-            } else if let Res::Def(DefKind::Ctor(def::CtorOf::Struct, _), ctor_def_id) = path.res {\n-                if self.item_path.res.opt_def_id() == self.cx.tcx.parent(ctor_def_id) {\n+            if path.segments.last().expect(SEGMENTS_MSG).ident.name != kw::SelfUpper {\n+                if self.item_path.res == path.res {\n                     span_use_self_lint(self.cx, path, None);\n+                } else if let Res::Def(DefKind::Ctor(def::CtorOf::Struct, _), ctor_def_id) = path.res {\n+                    if self.item_path.res.opt_def_id() == self.cx.tcx.parent(ctor_def_id) {\n+                        span_use_self_lint(self.cx, path, None);\n+                    }\n                 }\n             }\n         }"}, {"sha": "55809116882dae659ca0ea27423cc1385550564b", "filename": "tests/ui/use_self.fixed", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e3c1aea1578f644d22c909e4c91792919a3ed053/tests%2Fui%2Fuse_self.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e3c1aea1578f644d22c909e4c91792919a3ed053/tests%2Fui%2Fuse_self.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self.fixed?ref=e3c1aea1578f644d22c909e4c91792919a3ed053", "patch": "@@ -1,4 +1,5 @@\n // run-rustfix\n+// compile-flags: --edition 2018\n \n #![warn(clippy::use_self)]\n #![allow(dead_code)]\n@@ -333,16 +334,31 @@ mod issue3567 {\n     }\n }\n \n-// Test with paths in ranges\n-mod paths_in_ranges {\n+mod paths_created_by_lowering {\n+    use std::ops::Range;\n+\n     struct S {}\n \n     impl S {\n         const A: usize = 0;\n         const B: usize = 1;\n \n+        async fn g() -> Self {\n+            Self {}\n+        }\n+\n         fn f<'a>(&self, p: &'a [u8]) -> &'a [u8] {\n             &p[Self::A..Self::B]\n         }\n     }\n+\n+    trait T {\n+        fn f<'a>(&self, p: &'a [u8]) -> &'a [u8];\n+    }\n+\n+    impl T for Range<u8> {\n+        fn f<'a>(&self, p: &'a [u8]) -> &'a [u8] {\n+            &p[0..1]\n+        }\n+    }\n }"}, {"sha": "3bd89691875b0868382fbec455329789e9c72499", "filename": "tests/ui/use_self.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e3c1aea1578f644d22c909e4c91792919a3ed053/tests%2Fui%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c1aea1578f644d22c909e4c91792919a3ed053/tests%2Fui%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self.rs?ref=e3c1aea1578f644d22c909e4c91792919a3ed053", "patch": "@@ -1,4 +1,5 @@\n // run-rustfix\n+// compile-flags: --edition 2018\n \n #![warn(clippy::use_self)]\n #![allow(dead_code)]\n@@ -333,16 +334,31 @@ mod issue3567 {\n     }\n }\n \n-// Test with paths in ranges\n-mod paths_in_ranges {\n+mod paths_created_by_lowering {\n+    use std::ops::Range;\n+\n     struct S {}\n \n     impl S {\n         const A: usize = 0;\n         const B: usize = 1;\n \n+        async fn g() -> S {\n+            S {}\n+        }\n+\n         fn f<'a>(&self, p: &'a [u8]) -> &'a [u8] {\n             &p[S::A..S::B]\n         }\n     }\n+\n+    trait T {\n+        fn f<'a>(&self, p: &'a [u8]) -> &'a [u8];\n+    }\n+\n+    impl T for Range<u8> {\n+        fn f<'a>(&self, p: &'a [u8]) -> &'a [u8] {\n+            &p[0..1]\n+        }\n+    }\n }"}, {"sha": "664f91b1460d41ac54acd022d996dc1fbf1e5e4b", "filename": "tests/ui/use_self.stderr", "status": "modified", "additions": 51, "deletions": 39, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/e3c1aea1578f644d22c909e4c91792919a3ed053/tests%2Fui%2Fuse_self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3c1aea1578f644d22c909e4c91792919a3ed053/tests%2Fui%2Fuse_self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self.stderr?ref=e3c1aea1578f644d22c909e4c91792919a3ed053", "patch": "@@ -1,145 +1,145 @@\n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:13:21\n+  --> $DIR/use_self.rs:14:21\n    |\n LL |         fn new() -> Foo {\n    |                     ^^^ help: use the applicable keyword: `Self`\n    |\n    = note: `-D clippy::use-self` implied by `-D warnings`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:14:13\n+  --> $DIR/use_self.rs:15:13\n    |\n LL |             Foo {}\n    |             ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:16:22\n+  --> $DIR/use_self.rs:17:22\n    |\n LL |         fn test() -> Foo {\n    |                      ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:17:13\n+  --> $DIR/use_self.rs:18:13\n    |\n LL |             Foo::new()\n    |             ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:22:25\n+  --> $DIR/use_self.rs:23:25\n    |\n LL |         fn default() -> Foo {\n    |                         ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:23:13\n+  --> $DIR/use_self.rs:24:13\n    |\n LL |             Foo::new()\n    |             ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:88:22\n+  --> $DIR/use_self.rs:89:22\n    |\n LL |         fn refs(p1: &Bad) -> &Bad {\n    |                      ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:88:31\n+  --> $DIR/use_self.rs:89:31\n    |\n LL |         fn refs(p1: &Bad) -> &Bad {\n    |                               ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:92:37\n+  --> $DIR/use_self.rs:93:37\n    |\n LL |         fn ref_refs<'a>(p1: &'a &'a Bad) -> &'a &'a Bad {\n    |                                     ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:92:53\n+  --> $DIR/use_self.rs:93:53\n    |\n LL |         fn ref_refs<'a>(p1: &'a &'a Bad) -> &'a &'a Bad {\n    |                                                     ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:96:30\n+  --> $DIR/use_self.rs:97:30\n    |\n LL |         fn mut_refs(p1: &mut Bad) -> &mut Bad {\n    |                              ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:96:43\n+  --> $DIR/use_self.rs:97:43\n    |\n LL |         fn mut_refs(p1: &mut Bad) -> &mut Bad {\n    |                                           ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:100:28\n+  --> $DIR/use_self.rs:101:28\n    |\n LL |         fn nested(_p1: Box<Bad>, _p2: (&u8, &Bad)) {}\n    |                            ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:100:46\n+  --> $DIR/use_self.rs:101:46\n    |\n LL |         fn nested(_p1: Box<Bad>, _p2: (&u8, &Bad)) {}\n    |                                              ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:102:20\n+  --> $DIR/use_self.rs:103:20\n    |\n LL |         fn vals(_: Bad) -> Bad {\n    |                    ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:102:28\n+  --> $DIR/use_self.rs:103:28\n    |\n LL |         fn vals(_: Bad) -> Bad {\n    |                            ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:103:13\n+  --> $DIR/use_self.rs:104:13\n    |\n LL |             Bad::default()\n    |             ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:108:23\n+  --> $DIR/use_self.rs:109:23\n    |\n LL |         type Output = Bad;\n    |                       ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:110:27\n+  --> $DIR/use_self.rs:111:27\n    |\n LL |         fn mul(self, rhs: Bad) -> Bad {\n    |                           ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:110:35\n+  --> $DIR/use_self.rs:111:35\n    |\n LL |         fn mul(self, rhs: Bad) -> Bad {\n    |                                   ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:117:13\n+  --> $DIR/use_self.rs:118:13\n    |\n LL |             Bad\n    |             ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:199:56\n+  --> $DIR/use_self.rs:200:56\n    |\n LL |         fn bad(foos: &[Self]) -> impl Iterator<Item = &Foo> {\n    |                                                        ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:214:13\n+  --> $DIR/use_self.rs:215:13\n    |\n LL |             TS(0)\n    |             ^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:222:25\n+  --> $DIR/use_self.rs:223:25\n    |\n LL |             fn new() -> Foo {\n    |                         ^^^ help: use the applicable keyword: `Self`\n@@ -148,7 +148,7 @@ LL |         use_self_expand!(); // Should lint in local macros\n    |         ------------------- in this macro invocation\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:223:17\n+  --> $DIR/use_self.rs:224:17\n    |\n LL |                 Foo {}\n    |                 ^^^ help: use the applicable keyword: `Self`\n@@ -157,82 +157,94 @@ LL |         use_self_expand!(); // Should lint in local macros\n    |         ------------------- in this macro invocation\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:258:21\n+  --> $DIR/use_self.rs:259:21\n    |\n LL |         fn baz() -> Foo {\n    |                     ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:259:13\n+  --> $DIR/use_self.rs:260:13\n    |\n LL |             Foo {}\n    |             ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:246:29\n+  --> $DIR/use_self.rs:247:29\n    |\n LL |                 fn bar() -> Bar {\n    |                             ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:247:21\n+  --> $DIR/use_self.rs:248:21\n    |\n LL |                     Bar { foo: Foo {} }\n    |                     ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:276:21\n+  --> $DIR/use_self.rs:277:21\n    |\n LL |             let _ = Enum::B(42);\n    |                     ^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:277:21\n+  --> $DIR/use_self.rs:278:21\n    |\n LL |             let _ = Enum::C { field: true };\n    |                     ^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:278:21\n+  --> $DIR/use_self.rs:279:21\n    |\n LL |             let _ = Enum::A;\n    |                     ^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:309:13\n+  --> $DIR/use_self.rs:310:13\n    |\n LL |             nested::A::fun_1();\n    |             ^^^^^^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:310:13\n+  --> $DIR/use_self.rs:311:13\n    |\n LL |             nested::A::A;\n    |             ^^^^^^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:312:13\n+  --> $DIR/use_self.rs:313:13\n    |\n LL |             nested::A {};\n    |             ^^^^^^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:331:13\n+  --> $DIR/use_self.rs:332:13\n    |\n LL |             TestStruct::from_something()\n    |             ^^^^^^^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:345:16\n+  --> $DIR/use_self.rs:346:25\n+   |\n+LL |         async fn g() -> S {\n+   |                         ^ help: use the applicable keyword: `Self`\n+\n+error: unnecessary structure name repetition\n+  --> $DIR/use_self.rs:347:13\n+   |\n+LL |             S {}\n+   |             ^ help: use the applicable keyword: `Self`\n+\n+error: unnecessary structure name repetition\n+  --> $DIR/use_self.rs:351:16\n    |\n LL |             &p[S::A..S::B]\n    |                ^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:345:22\n+  --> $DIR/use_self.rs:351:22\n    |\n LL |             &p[S::A..S::B]\n    |                      ^ help: use the applicable keyword: `Self`\n \n-error: aborting due to 38 previous errors\n+error: aborting due to 40 previous errors\n "}]}