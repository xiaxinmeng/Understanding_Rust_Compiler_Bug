{"sha": "edd6f91cab77c4fabf449a50f4f65e4761c98ca4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkZDZmOTFjYWI3N2M0ZmFiZjQ0OWE1MGY0ZjY1ZTQ3NjFjOThjYTQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-04-24T11:29:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-24T11:29:44Z"}, "message": "Merge #4121\n\n4121: Better label for macros completion r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "0ef0b2fd9d6ad0bb99aed5e297e5dee9de10ce12", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ef0b2fd9d6ad0bb99aed5e297e5dee9de10ce12"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/edd6f91cab77c4fabf449a50f4f65e4761c98ca4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeos2oCRBK7hj4Ov3rIwAAdHIIABPQeOFh2IGa4S2z1EnTwnZI\nLL0NIeYf5xzCIRzdK0yp4DkW7A2ep9WgWPJ8wKbtFwwsHT9wbQwXIacYnvRO9dfF\nyVD4/PHJbfgN8a45B1Mn36BbnbmuOMkbzb9nvwLaFrAgLC2kEDAvEY1ZsI7DQDtZ\n64mYZ1lRjlCN2NfLS6u53Dj2zmgfT6xRT7kpyLLvbW1EFjX8mIHy8fGLrU5nY6cL\n2LoVGvZzrpjr+y7Sjxys5JVzYhhLoz7ELbvsBAzrpVpwH5eaFaEihIMZ4LWZfKHs\n2lf489dl4tzxie7g66HMhx+ix6ZiHPgV6vBj6BhrCAK05+uZLnfXnLyupCcx0zo=\n=MnkZ\n-----END PGP SIGNATURE-----\n", "payload": "tree 0ef0b2fd9d6ad0bb99aed5e297e5dee9de10ce12\nparent 44e6c2cb54312e14b3c7bd9d64a9fa0547c17ad7\nparent 62e08fa53d38e4a46a14a908c0fe0e74eb19cd03\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1587727784 +0000\ncommitter GitHub <noreply@github.com> 1587727784 +0000\n\nMerge #4121\n\n4121: Better label for macros completion r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/edd6f91cab77c4fabf449a50f4f65e4761c98ca4", "html_url": "https://github.com/rust-lang/rust/commit/edd6f91cab77c4fabf449a50f4f65e4761c98ca4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/edd6f91cab77c4fabf449a50f4f65e4761c98ca4/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44e6c2cb54312e14b3c7bd9d64a9fa0547c17ad7", "url": "https://api.github.com/repos/rust-lang/rust/commits/44e6c2cb54312e14b3c7bd9d64a9fa0547c17ad7", "html_url": "https://github.com/rust-lang/rust/commit/44e6c2cb54312e14b3c7bd9d64a9fa0547c17ad7"}, {"sha": "62e08fa53d38e4a46a14a908c0fe0e74eb19cd03", "url": "https://api.github.com/repos/rust-lang/rust/commits/62e08fa53d38e4a46a14a908c0fe0e74eb19cd03", "html_url": "https://github.com/rust-lang/rust/commit/62e08fa53d38e4a46a14a908c0fe0e74eb19cd03"}], "stats": {"total": 107, "additions": 59, "deletions": 48}, "files": [{"sha": "6000106d0131b298d3b73eb6f04d5f5b3e443820", "filename": "crates/ra_ide/src/completion/complete_macro_in_item_position.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/edd6f91cab77c4fabf449a50f4f65e4761c98ca4/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_macro_in_item_position.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edd6f91cab77c4fabf449a50f4f65e4761c98ca4/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_macro_in_item_position.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_macro_in_item_position.rs?ref=edd6f91cab77c4fabf449a50f4f65e4761c98ca4", "patch": "@@ -41,7 +41,7 @@ mod tests {\n             @r###\"\n         [\n             CompletionItem {\n-                label: \"foo!\",\n+                label: \"foo!(\u2026)\",\n                 source_range: [46; 46),\n                 delete: [46; 46),\n                 insert: \"foo!($0)\",\n@@ -81,7 +81,7 @@ mod tests {\n             @r###\"\n         [\n             CompletionItem {\n-                label: \"vec!\",\n+                label: \"vec![\u2026]\",\n                 source_range: [280; 280),\n                 delete: [280; 280),\n                 insert: \"vec![$0]\",\n@@ -118,7 +118,7 @@ mod tests {\n             @r###\"\n         [\n             CompletionItem {\n-                label: \"foo!\",\n+                label: \"foo! {\u2026}\",\n                 source_range: [163; 163),\n                 delete: [163; 163),\n                 insert: \"foo! {$0}\","}, {"sha": "218829b1003027157c213fb049f08f9ecc9def32", "filename": "crates/ra_ide/src/completion/complete_pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/edd6f91cab77c4fabf449a50f4f65e4761c98ca4/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edd6f91cab77c4fabf449a50f4f65e4761c98ca4/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_pattern.rs?ref=edd6f91cab77c4fabf449a50f4f65e4761c98ca4", "patch": "@@ -125,7 +125,7 @@ mod tests {\n                 kind: Enum,\n             },\n             CompletionItem {\n-                label: \"m!\",\n+                label: \"m!(\u2026)\",\n                 source_range: [151; 151),\n                 delete: [151; 151),\n                 insert: \"m!($0)\","}, {"sha": "9f795e441445308913c20e5c31ff5dc3f5acedda", "filename": "crates/ra_ide/src/completion/complete_qualified_path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/edd6f91cab77c4fabf449a50f4f65e4761c98ca4/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_qualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edd6f91cab77c4fabf449a50f4f65e4761c98ca4/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_qualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_qualified_path.rs?ref=edd6f91cab77c4fabf449a50f4f65e4761c98ca4", "patch": "@@ -869,7 +869,7 @@ mod tests {\n             @r###\"\n         [\n             CompletionItem {\n-                label: \"foo!\",\n+                label: \"foo!(\u2026)\",\n                 source_range: [179; 179),\n                 delete: [179; 179),\n                 insert: \"foo!($0)\","}, {"sha": "638f86eda0bebef7bf506ffd0352db547f05d1ba", "filename": "crates/ra_ide/src/completion/complete_unqualified_path.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/edd6f91cab77c4fabf449a50f4f65e4761c98ca4/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_unqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edd6f91cab77c4fabf449a50f4f65e4761c98ca4/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_unqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_unqualified_path.rs?ref=edd6f91cab77c4fabf449a50f4f65e4761c98ca4", "patch": "@@ -733,23 +733,23 @@ mod tests {\n             @r###\"\n         [\n             CompletionItem {\n-                label: \"bar!\",\n+                label: \"bar!(\u2026)\",\n                 source_range: [252; 252),\n                 delete: [252; 252),\n                 insert: \"bar!($0)\",\n                 kind: Macro,\n                 detail: \"macro_rules! bar\",\n             },\n             CompletionItem {\n-                label: \"baz!\",\n+                label: \"baz!(\u2026)\",\n                 source_range: [252; 252),\n                 delete: [252; 252),\n                 insert: \"baz!($0)\",\n                 kind: Macro,\n                 detail: \"#[macro_export]\\nmacro_rules! baz\",\n             },\n             CompletionItem {\n-                label: \"foo!\",\n+                label: \"foo!(\u2026)\",\n                 source_range: [252; 252),\n                 delete: [252; 252),\n                 insert: \"foo!($0)\",\n@@ -802,7 +802,7 @@ mod tests {\n             @r###\"\n         [\n             CompletionItem {\n-                label: \"foo!\",\n+                label: \"foo!(\u2026)\",\n                 source_range: [49; 49),\n                 delete: [49; 49),\n                 insert: \"foo!($0)\",\n@@ -841,7 +841,7 @@ mod tests {\n             @r###\"\n         [\n             CompletionItem {\n-                label: \"foo!\",\n+                label: \"foo!(\u2026)\",\n                 source_range: [57; 57),\n                 delete: [57; 57),\n                 insert: \"foo!($0)\",\n@@ -880,7 +880,7 @@ mod tests {\n             @r###\"\n         [\n             CompletionItem {\n-                label: \"foo!\",\n+                label: \"foo!(\u2026)\",\n                 source_range: [50; 50),\n                 delete: [50; 50),\n                 insert: \"foo!($0)\",\n@@ -953,7 +953,7 @@ mod tests {\n             @r###\"\n         [\n             CompletionItem {\n-                label: \"m!\",\n+                label: \"m!(\u2026)\",\n                 source_range: [145; 145),\n                 delete: [145; 145),\n                 insert: \"m!($0)\",\n@@ -1006,7 +1006,7 @@ mod tests {\n             @r###\"\n         [\n             CompletionItem {\n-                label: \"m!\",\n+                label: \"m!(\u2026)\",\n                 source_range: [145; 146),\n                 delete: [145; 146),\n                 insert: \"m!($0)\",\n@@ -1059,7 +1059,7 @@ mod tests {\n                     @r###\"\n         [\n             CompletionItem {\n-                label: \"m!\",\n+                label: \"m!(\u2026)\",\n                 source_range: [145; 146),\n                 delete: [145; 146),\n                 insert: \"m!($0)\","}, {"sha": "6a6ddc7bd86c6f8cd0ecd165dfab0f1de36698e6", "filename": "crates/ra_ide/src/completion/presentation.rs", "status": "modified", "additions": 45, "deletions": 34, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/edd6f91cab77c4fabf449a50f4f65e4761c98ca4/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edd6f91cab77c4fabf449a50f4f65e4761c98ca4/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs?ref=edd6f91cab77c4fabf449a50f4f65e4761c98ca4", "patch": "@@ -133,29 +133,6 @@ impl Completions {\n         completion_item.kind(kind).set_documentation(docs).add_to(self)\n     }\n \n-    fn guess_macro_braces(&self, macro_name: &str, docs: &str) -> &'static str {\n-        let mut votes = [0, 0, 0];\n-        for (idx, s) in docs.match_indices(&macro_name) {\n-            let (before, after) = (&docs[..idx], &docs[idx + s.len()..]);\n-            // Ensure to match the full word\n-            if after.starts_with('!')\n-                && !before.ends_with(|c: char| c == '_' || c.is_ascii_alphanumeric())\n-            {\n-                // It may have spaces before the braces like `foo! {}`\n-                match after[1..].chars().find(|&c| !c.is_whitespace()) {\n-                    Some('{') => votes[0] += 1,\n-                    Some('[') => votes[1] += 1,\n-                    Some('(') => votes[2] += 1,\n-                    _ => {}\n-                }\n-            }\n-        }\n-\n-        // Insert a space before `{}`.\n-        // We prefer the last one when some votes equal.\n-        *votes.iter().zip(&[\" {$0}\", \"[$0]\", \"($0)\"]).max_by_key(|&(&vote, _)| vote).unwrap().1\n-    }\n-\n     pub(crate) fn add_macro(\n         &mut self,\n         ctx: &CompletionContext,\n@@ -177,21 +154,27 @@ impl Completions {\n         let detail = macro_label(&ast_node);\n \n         let docs = macro_.docs(ctx.db);\n-        let macro_declaration = format!(\"{}!\", name);\n \n-        let mut builder =\n-            CompletionItem::new(CompletionKind::Reference, ctx.source_range(), &macro_declaration)\n-                .kind(CompletionItemKind::Macro)\n-                .set_documentation(docs.clone())\n-                .set_deprecated(is_deprecated(macro_, ctx.db))\n-                .detail(detail);\n+        let mut builder = CompletionItem::new(\n+            CompletionKind::Reference,\n+            ctx.source_range(),\n+            &format!(\"{}!\", name),\n+        )\n+        .kind(CompletionItemKind::Macro)\n+        .set_documentation(docs.clone())\n+        .set_deprecated(is_deprecated(macro_, ctx.db))\n+        .detail(detail);\n \n+        let needs_bang = ctx.use_item_syntax.is_none() && !ctx.is_macro_call;\n         builder = match ctx.config.snippet_cap {\n-            Some(cap) if ctx.use_item_syntax.is_none() && !ctx.is_macro_call => {\n-                let macro_braces_to_insert =\n-                    self.guess_macro_braces(&name, docs.as_ref().map_or(\"\", |s| s.as_str()));\n-                builder.insert_snippet(cap, macro_declaration + macro_braces_to_insert)\n+            Some(cap) if needs_bang => {\n+                let docs = docs.as_ref().map_or(\"\", |s| s.as_str());\n+                let (bra, ket) = guess_macro_braces(&name, docs);\n+                builder\n+                    .insert_snippet(cap, format!(\"{}!{}$0{}\", name, bra, ket))\n+                    .label(format!(\"{}!{}\u2026{}\", name, bra, ket))\n             }\n+            None if needs_bang => builder.insert_text(format!(\"{}!\", name)),\n             _ => {\n                 tested_by!(dont_insert_macro_call_parens_unncessary);\n                 builder.insert_text(name)\n@@ -404,6 +387,34 @@ fn is_deprecated(node: impl HasAttrs, db: &RootDatabase) -> bool {\n     node.attrs(db).by_key(\"deprecated\").exists()\n }\n \n+fn guess_macro_braces(macro_name: &str, docs: &str) -> (&'static str, &'static str) {\n+    let mut votes = [0, 0, 0];\n+    for (idx, s) in docs.match_indices(&macro_name) {\n+        let (before, after) = (&docs[..idx], &docs[idx + s.len()..]);\n+        // Ensure to match the full word\n+        if after.starts_with('!')\n+            && !before.ends_with(|c: char| c == '_' || c.is_ascii_alphanumeric())\n+        {\n+            // It may have spaces before the braces like `foo! {}`\n+            match after[1..].chars().find(|&c| !c.is_whitespace()) {\n+                Some('{') => votes[0] += 1,\n+                Some('[') => votes[1] += 1,\n+                Some('(') => votes[2] += 1,\n+                _ => {}\n+            }\n+        }\n+    }\n+\n+    // Insert a space before `{}`.\n+    // We prefer the last one when some votes equal.\n+    let (_vote, (bra, ket)) = votes\n+        .iter()\n+        .zip(&[(\" {\", \"}\"), (\"[\", \"]\"), (\"(\", \")\")])\n+        .max_by_key(|&(&vote, _)| vote)\n+        .unwrap();\n+    (*bra, *ket)\n+}\n+\n #[cfg(test)]\n mod tests {\n     use insta::assert_debug_snapshot;"}]}