{"sha": "b1f0209cd147e7b3d45059f6fcef050a29e03f6d", "node_id": "C_kwDOAAsO6NoAKGIxZjAyMDljZDE0N2U3YjNkNDUwNTlmNmZjZWYwNTBhMjllMDNmNmQ", "commit": {"author": {"name": "Miguel Guarniz", "email": "mi9uel9@gmail.com", "date": "2022-05-03T21:58:19Z"}, "committer": {"name": "Miguel Guarniz", "email": "mi9uel9@gmail.com", "date": "2022-05-13T15:46:05Z"}, "message": "optimize find_item to fetch Item only when needed\n\nSigned-off-by: Miguel Guarniz <mi9uel9@gmail.com>", "tree": {"sha": "54be6ee33e67e7d4c620c2ef16539842cb1b3761", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54be6ee33e67e7d4c620c2ef16539842cb1b3761"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b1f0209cd147e7b3d45059f6fcef050a29e03f6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b1f0209cd147e7b3d45059f6fcef050a29e03f6d", "html_url": "https://github.com/rust-lang/rust/commit/b1f0209cd147e7b3d45059f6fcef050a29e03f6d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b1f0209cd147e7b3d45059f6fcef050a29e03f6d/comments", "author": {"login": "kckeiks", "id": 24687641, "node_id": "MDQ6VXNlcjI0Njg3NjQx", "avatar_url": "https://avatars.githubusercontent.com/u/24687641?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kckeiks", "html_url": "https://github.com/kckeiks", "followers_url": "https://api.github.com/users/kckeiks/followers", "following_url": "https://api.github.com/users/kckeiks/following{/other_user}", "gists_url": "https://api.github.com/users/kckeiks/gists{/gist_id}", "starred_url": "https://api.github.com/users/kckeiks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kckeiks/subscriptions", "organizations_url": "https://api.github.com/users/kckeiks/orgs", "repos_url": "https://api.github.com/users/kckeiks/repos", "events_url": "https://api.github.com/users/kckeiks/events{/privacy}", "received_events_url": "https://api.github.com/users/kckeiks/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kckeiks", "id": 24687641, "node_id": "MDQ6VXNlcjI0Njg3NjQx", "avatar_url": "https://avatars.githubusercontent.com/u/24687641?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kckeiks", "html_url": "https://github.com/kckeiks", "followers_url": "https://api.github.com/users/kckeiks/followers", "following_url": "https://api.github.com/users/kckeiks/following{/other_user}", "gists_url": "https://api.github.com/users/kckeiks/gists{/gist_id}", "starred_url": "https://api.github.com/users/kckeiks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kckeiks/subscriptions", "organizations_url": "https://api.github.com/users/kckeiks/orgs", "repos_url": "https://api.github.com/users/kckeiks/repos", "events_url": "https://api.github.com/users/kckeiks/events{/privacy}", "received_events_url": "https://api.github.com/users/kckeiks/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb73ae2c8a91cf1de599cc2f55f59b58d1a349ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb73ae2c8a91cf1de599cc2f55f59b58d1a349ec", "html_url": "https://github.com/rust-lang/rust/commit/fb73ae2c8a91cf1de599cc2f55f59b58d1a349ec"}], "stats": {"total": 71, "additions": 42, "deletions": 29}, "files": [{"sha": "b494a0fe2edf9ad7eb60c09e4f9d05880f4e6975", "filename": "compiler/rustc_passes/src/entry.rs", "status": "modified", "additions": 39, "deletions": 26, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/b1f0209cd147e7b3d45059f6fcef050a29e03f6d/compiler%2Frustc_passes%2Fsrc%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1f0209cd147e7b3d45059f6fcef050a29e03f6d/compiler%2Frustc_passes%2Fsrc%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fentry.rs?ref=b1f0209cd147e7b3d45059f6fcef050a29e03f6d", "patch": "@@ -1,7 +1,8 @@\n use rustc_ast::entry::EntryPointType;\n use rustc_errors::struct_span_err;\n+use rustc_hir::def::DefKind;\n use rustc_hir::def_id::{DefId, LocalDefId, CRATE_DEF_ID, LOCAL_CRATE};\n-use rustc_hir::{Item, ItemKind, Node, CRATE_HIR_ID};\n+use rustc_hir::{ItemId, Node, CRATE_HIR_ID};\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{DefIdTree, TyCtxt};\n use rustc_session::config::{CrateType, EntryFnType};\n@@ -40,30 +41,34 @@ fn entry_fn(tcx: TyCtxt<'_>, (): ()) -> Option<(DefId, EntryFnType)> {\n         EntryContext { tcx, attr_main_fn: None, start_fn: None, non_main_fns: Vec::new() };\n \n     for id in tcx.hir().items() {\n-        let item = tcx.hir().item(id);\n-        find_item(item, &mut ctxt);\n+        find_item(id, &mut ctxt);\n     }\n \n     configure_main(tcx, &ctxt)\n }\n \n // Beware, this is duplicated in `librustc_builtin_macros/test_harness.rs`\n // (with `ast::Item`), so make sure to keep them in sync.\n-fn entry_point_type(ctxt: &EntryContext<'_>, item: &Item<'_>, at_root: bool) -> EntryPointType {\n-    let attrs = ctxt.tcx.hir().attrs(item.hir_id());\n+// A small optimization was added so that hir::Item is fetched only when needed.\n+// An equivalent optimization was not applied to the duplicated code in test_harness.rs.\n+fn entry_point_type(ctxt: &EntryContext<'_>, id: ItemId, at_root: bool) -> EntryPointType {\n+    let attrs = ctxt.tcx.hir().attrs(id.hir_id());\n     if ctxt.tcx.sess.contains_name(attrs, sym::start) {\n         EntryPointType::Start\n     } else if ctxt.tcx.sess.contains_name(attrs, sym::rustc_main) {\n         EntryPointType::MainAttr\n-    } else if item.ident.name == sym::main {\n-        if at_root {\n-            // This is a top-level function so can be `main`.\n-            EntryPointType::MainNamed\n+    } else {\n+        let item = ctxt.tcx.hir().item(id);\n+        if item.ident.name == sym::main {\n+            if at_root {\n+                // This is a top-level function so can be `main`.\n+                EntryPointType::MainNamed\n+            } else {\n+                EntryPointType::OtherMain\n+            }\n         } else {\n-            EntryPointType::OtherMain\n+            EntryPointType::None\n         }\n-    } else {\n-        EntryPointType::None\n     }\n }\n \n@@ -72,13 +77,13 @@ fn throw_attr_err(sess: &Session, span: Span, attr: &str) {\n         .emit();\n }\n \n-fn find_item(item: &Item<'_>, ctxt: &mut EntryContext<'_>) {\n-    let at_root = ctxt.tcx.opt_local_parent(item.def_id) == Some(CRATE_DEF_ID);\n+fn find_item(id: ItemId, ctxt: &mut EntryContext<'_>) {\n+    let at_root = ctxt.tcx.opt_local_parent(id.def_id) == Some(CRATE_DEF_ID);\n \n-    match entry_point_type(ctxt, item, at_root) {\n+    match entry_point_type(ctxt, id, at_root) {\n         EntryPointType::None => (),\n-        _ if !matches!(item.kind, ItemKind::Fn(..)) => {\n-            let attrs = ctxt.tcx.hir().attrs(item.hir_id());\n+        _ if !matches!(ctxt.tcx.hir().def_kind(id.def_id), DefKind::Fn) => {\n+            let attrs = ctxt.tcx.hir().attrs(id.hir_id());\n             if let Some(attr) = ctxt.tcx.sess.find_by_name(attrs, sym::start) {\n                 throw_attr_err(&ctxt.tcx.sess, attr.span, \"start\");\n             }\n@@ -88,31 +93,39 @@ fn find_item(item: &Item<'_>, ctxt: &mut EntryContext<'_>) {\n         }\n         EntryPointType::MainNamed => (),\n         EntryPointType::OtherMain => {\n-            ctxt.non_main_fns.push(item.span);\n+            ctxt.non_main_fns.push(ctxt.tcx.def_span(id.def_id.to_def_id()));\n         }\n         EntryPointType::MainAttr => {\n             if ctxt.attr_main_fn.is_none() {\n-                ctxt.attr_main_fn = Some((item.def_id, item.span));\n+                ctxt.attr_main_fn = Some((id.def_id, ctxt.tcx.def_span(id.def_id.to_def_id())));\n             } else {\n                 struct_span_err!(\n                     ctxt.tcx.sess,\n-                    item.span,\n+                    ctxt.tcx.def_span(id.def_id.to_def_id()),\n                     E0137,\n                     \"multiple functions with a `#[main]` attribute\"\n                 )\n-                .span_label(item.span, \"additional `#[main]` function\")\n+                .span_label(\n+                    ctxt.tcx.def_span(id.def_id.to_def_id()),\n+                    \"additional `#[main]` function\",\n+                )\n                 .span_label(ctxt.attr_main_fn.unwrap().1, \"first `#[main]` function\")\n                 .emit();\n             }\n         }\n         EntryPointType::Start => {\n             if ctxt.start_fn.is_none() {\n-                ctxt.start_fn = Some((item.def_id, item.span));\n+                ctxt.start_fn = Some((id.def_id, ctxt.tcx.def_span(id.def_id.to_def_id())));\n             } else {\n-                struct_span_err!(ctxt.tcx.sess, item.span, E0138, \"multiple `start` functions\")\n-                    .span_label(ctxt.start_fn.unwrap().1, \"previous `#[start]` function here\")\n-                    .span_label(item.span, \"multiple `start` functions\")\n-                    .emit();\n+                struct_span_err!(\n+                    ctxt.tcx.sess,\n+                    ctxt.tcx.def_span(id.def_id.to_def_id()),\n+                    E0138,\n+                    \"multiple `start` functions\"\n+                )\n+                .span_label(ctxt.start_fn.unwrap().1, \"previous `#[start]` function here\")\n+                .span_label(ctxt.tcx.def_span(id.def_id.to_def_id()), \"multiple `start` functions\")\n+                .emit();\n             }\n         }\n     }"}, {"sha": "fa8c39427323c8fd89e7d87bf3cf2991c10393c8", "filename": "src/test/ui/error-codes/E0138.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b1f0209cd147e7b3d45059f6fcef050a29e03f6d/src%2Ftest%2Fui%2Ferror-codes%2FE0138.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1f0209cd147e7b3d45059f6fcef050a29e03f6d/src%2Ftest%2Fui%2Ferror-codes%2FE0138.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0138.stderr?ref=b1f0209cd147e7b3d45059f6fcef050a29e03f6d", "patch": "@@ -2,10 +2,10 @@ error[E0138]: multiple `start` functions\n   --> $DIR/E0138.rs:7:1\n    |\n LL | fn foo(argc: isize, argv: *const *const u8) -> isize { 0 }\n-   | ---------------------------------------------------------- previous `#[start]` function here\n+   | ---------------------------------------------------- previous `#[start]` function here\n ...\n LL | fn f(argc: isize, argv: *const *const u8) -> isize { 0 }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ multiple `start` functions\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ multiple `start` functions\n \n error: aborting due to previous error\n "}, {"sha": "3d64b0a67a1dfe5fafe61e52cdfe2c67110facfb", "filename": "src/test/ui/main-wrong-location.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1f0209cd147e7b3d45059f6fcef050a29e03f6d/src%2Ftest%2Fui%2Fmain-wrong-location.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1f0209cd147e7b3d45059f6fcef050a29e03f6d/src%2Ftest%2Fui%2Fmain-wrong-location.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmain-wrong-location.stderr?ref=b1f0209cd147e7b3d45059f6fcef050a29e03f6d", "patch": "@@ -8,7 +8,7 @@ note: here is a function named `main`\n   --> $DIR/main-wrong-location.rs:4:5\n    |\n LL |     fn main() { }\n-   |     ^^^^^^^^^^^^^\n+   |     ^^^^^^^^^\n    = note: you have one or more functions named `main` not defined at the crate level\n    = help: consider moving the `main` function definitions\n "}]}