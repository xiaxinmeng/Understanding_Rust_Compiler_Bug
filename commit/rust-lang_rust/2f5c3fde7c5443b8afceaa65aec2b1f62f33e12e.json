{"sha": "2f5c3fde7c5443b8afceaa65aec2b1f62f33e12e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmNWMzZmRlN2M1NDQzYjhhZmNlYWE2NWFlYzJiMWY2MmYzM2UxMmU=", "commit": {"author": {"name": "Bruno Dutra", "email": "brunocodutra@gmail.com", "date": "2018-08-11T17:08:14Z"}, "committer": {"name": "Bruno Dutra", "email": "brunocodutra@gmail.com", "date": "2018-09-03T18:02:35Z"}, "message": "Make vaious allocation related types generic on the allocation id", "tree": {"sha": "e626bd711d73188438eaa908dd17791f8a72f542", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e626bd711d73188438eaa908dd17791f8a72f542"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f5c3fde7c5443b8afceaa65aec2b1f62f33e12e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f5c3fde7c5443b8afceaa65aec2b1f62f33e12e", "html_url": "https://github.com/rust-lang/rust/commit/2f5c3fde7c5443b8afceaa65aec2b1f62f33e12e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f5c3fde7c5443b8afceaa65aec2b1f62f33e12e/comments", "author": {"login": "brunocodutra", "id": 4043663, "node_id": "MDQ6VXNlcjQwNDM2NjM=", "avatar_url": "https://avatars.githubusercontent.com/u/4043663?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brunocodutra", "html_url": "https://github.com/brunocodutra", "followers_url": "https://api.github.com/users/brunocodutra/followers", "following_url": "https://api.github.com/users/brunocodutra/following{/other_user}", "gists_url": "https://api.github.com/users/brunocodutra/gists{/gist_id}", "starred_url": "https://api.github.com/users/brunocodutra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brunocodutra/subscriptions", "organizations_url": "https://api.github.com/users/brunocodutra/orgs", "repos_url": "https://api.github.com/users/brunocodutra/repos", "events_url": "https://api.github.com/users/brunocodutra/events{/privacy}", "received_events_url": "https://api.github.com/users/brunocodutra/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brunocodutra", "id": 4043663, "node_id": "MDQ6VXNlcjQwNDM2NjM=", "avatar_url": "https://avatars.githubusercontent.com/u/4043663?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brunocodutra", "html_url": "https://github.com/brunocodutra", "followers_url": "https://api.github.com/users/brunocodutra/followers", "following_url": "https://api.github.com/users/brunocodutra/following{/other_user}", "gists_url": "https://api.github.com/users/brunocodutra/gists{/gist_id}", "starred_url": "https://api.github.com/users/brunocodutra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brunocodutra/subscriptions", "organizations_url": "https://api.github.com/users/brunocodutra/orgs", "repos_url": "https://api.github.com/users/brunocodutra/repos", "events_url": "https://api.github.com/users/brunocodutra/events{/privacy}", "received_events_url": "https://api.github.com/users/brunocodutra/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "015f470daa3020ebe92abf61fa4010b56bde006d", "url": "https://api.github.com/repos/rust-lang/rust/commits/015f470daa3020ebe92abf61fa4010b56bde006d", "html_url": "https://github.com/rust-lang/rust/commit/015f470daa3020ebe92abf61fa4010b56bde006d"}], "stats": {"total": 57, "additions": 29, "deletions": 28}, "files": [{"sha": "9b7087ca034837473360154b00ade5aa06421132", "filename": "src/librustc/mir/interpret/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2f5c3fde7c5443b8afceaa65aec2b1f62f33e12e/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f5c3fde7c5443b8afceaa65aec2b1f62f33e12e/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs?ref=2f5c3fde7c5443b8afceaa65aec2b1f62f33e12e", "patch": "@@ -134,8 +134,8 @@ impl<T: layout::HasDataLayout> PointerArithmetic for T {}\n \n \n #[derive(Copy, Clone, Debug, Eq, PartialEq, Ord, PartialOrd, RustcEncodable, RustcDecodable, Hash)]\n-pub struct Pointer {\n-    pub alloc_id: AllocId,\n+pub struct Pointer<Id=AllocId> {\n+    pub alloc_id: Id,\n     pub offset: Size,\n }\n \n@@ -543,16 +543,16 @@ impl Allocation {\n impl<'tcx> ::serialize::UseSpecializedDecodable for &'tcx Allocation {}\n \n #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, RustcEncodable, RustcDecodable)]\n-pub struct Relocations(SortedMap<Size, AllocId>);\n+pub struct Relocations<Id=AllocId>(SortedMap<Size, Id>);\n \n-impl Relocations {\n-    pub fn new() -> Relocations {\n+impl<Id> Relocations<Id> {\n+    pub fn new() -> Self {\n         Relocations(SortedMap::new())\n     }\n \n     // The caller must guarantee that the given relocations are already sorted\n     // by address and contain no duplicates.\n-    pub fn from_presorted(r: Vec<(Size, AllocId)>) -> Relocations {\n+    pub fn from_presorted(r: Vec<(Size, Id)>) -> Self {\n         Relocations(SortedMap::from_presorted_elements(r))\n     }\n }"}, {"sha": "9982da483ce09968cd18a3b601312946d93125ec", "filename": "src/librustc/mir/interpret/value.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2f5c3fde7c5443b8afceaa65aec2b1f62f33e12e/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f5c3fde7c5443b8afceaa65aec2b1f62f33e12e/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs?ref=2f5c3fde7c5443b8afceaa65aec2b1f62f33e12e", "patch": "@@ -326,7 +326,7 @@ impl From<Pointer> for Scalar {\n /// size. Like a range of bytes in an `Allocation`, a `Scalar` can either represent the raw bytes\n /// of a simple value or a pointer into another `Allocation`\n #[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, RustcEncodable, RustcDecodable, Hash)]\n-pub enum Scalar {\n+pub enum Scalar<Id=AllocId> {\n     /// The raw bytes of a simple value.\n     Bits {\n         /// The first `size` bytes are the value.\n@@ -338,12 +338,12 @@ pub enum Scalar {\n     /// A pointer into an `Allocation`. An `Allocation` in the `memory` module has a list of\n     /// relocations, but a `Scalar` is only large enough to contain one, so we just represent the\n     /// relocation and its associated offset together as a `Pointer` here.\n-    Ptr(Pointer),\n+    Ptr(Pointer<Id>),\n }\n \n #[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, RustcEncodable, RustcDecodable, Hash)]\n-pub enum ScalarMaybeUndef {\n-    Scalar(Scalar),\n+pub enum ScalarMaybeUndef<Id=AllocId> {\n+    Scalar(Scalar<Id>),\n     Undef,\n }\n "}, {"sha": "02d87bdb7dcf4ad821af3ee2b9cf05807d4c2394", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2f5c3fde7c5443b8afceaa65aec2b1f62f33e12e/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f5c3fde7c5443b8afceaa65aec2b1f62f33e12e/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=2f5c3fde7c5443b8afceaa65aec2b1f62f33e12e", "patch": "@@ -26,7 +26,7 @@ use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::indexed_vec::IndexVec;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher, StableHasherResult};\n use rustc::mir::interpret::{\n-    GlobalId, Scalar, FrameInfo,\n+    GlobalId, Scalar, FrameInfo, AllocId,\n     EvalResult, EvalErrorKind,\n     ScalarMaybeUndef,\n     truncate, sign_extend,\n@@ -98,7 +98,7 @@ pub struct Frame<'mir, 'tcx: 'mir> {\n     /// The locals are stored as `Option<Value>`s.\n     /// `None` represents a local that is currently dead, while a live local\n     /// can either directly contain `Scalar` or refer to some part of an `Allocation`.\n-    pub locals: IndexVec<mir::Local, LocalValue>,\n+    pub locals: IndexVec<mir::Local, LocalValue<AllocId>>,\n \n     ////////////////////////////////////////////////////////////////////////////////\n     // Current position within the function\n@@ -178,13 +178,13 @@ impl<'a> HashStable<StableHashingContext<'a>> for StackPopCleanup {\n \n // State of a local variable\n #[derive(Copy, Clone, PartialEq, Eq, Hash)]\n-pub enum LocalValue {\n+pub enum LocalValue<Id=AllocId> {\n     Dead,\n     // Mostly for convenience, we re-use the `Operand` type here.\n     // This is an optimization over just always having a pointer here;\n     // we can thus avoid doing an allocation when the local just stores\n     // immediate values *and* never has its address taken.\n-    Live(Operand),\n+    Live(Operand<Id>),\n }\n \n impl<'tcx> LocalValue {"}, {"sha": "4093a6304b360d19e2d849a26c5da07db1a0165a", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2f5c3fde7c5443b8afceaa65aec2b1f62f33e12e/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f5c3fde7c5443b8afceaa65aec2b1f62f33e12e/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=2f5c3fde7c5443b8afceaa65aec2b1f62f33e12e", "patch": "@@ -17,9 +17,10 @@ use std::convert::TryInto;\n use rustc::{mir, ty};\n use rustc::ty::layout::{self, Size, LayoutOf, TyLayout, HasDataLayout, IntegerExt};\n use rustc_data_structures::indexed_vec::Idx;\n-\n use rustc::mir::interpret::{\n-    GlobalId, ConstValue, Scalar, EvalResult, Pointer, ScalarMaybeUndef, EvalErrorKind\n+    GlobalId, AllocId,\n+    ConstValue, Pointer, Scalar, ScalarMaybeUndef,\n+    EvalResult, EvalErrorKind\n };\n use super::{EvalContext, Machine, MemPlace, MPlaceTy, MemoryKind};\n \n@@ -31,9 +32,9 @@ use super::{EvalContext, Machine, MemPlace, MPlaceTy, MemoryKind};\n /// In particular, thanks to `ScalarPair`, arithmetic operations and casts can be entirely\n /// defined on `Value`, and do not have to work with a `Place`.\n #[derive(Copy, Clone, Debug, Hash, PartialEq, Eq)]\n-pub enum Value {\n-    Scalar(ScalarMaybeUndef),\n-    ScalarPair(ScalarMaybeUndef, ScalarMaybeUndef),\n+pub enum Value<Id=AllocId> {\n+    Scalar(ScalarMaybeUndef<Id>),\n+    ScalarPair(ScalarMaybeUndef<Id>, ScalarMaybeUndef<Id>),\n }\n \n impl<'tcx> Value {\n@@ -106,9 +107,9 @@ impl<'tcx> ::std::ops::Deref for ValTy<'tcx> {\n /// or still in memory.  The latter is an optimization, to delay reading that chunk of\n /// memory and to avoid having to store arbitrary-sized data here.\n #[derive(Copy, Clone, Debug, Hash, PartialEq, Eq)]\n-pub enum Operand {\n-    Immediate(Value),\n-    Indirect(MemPlace),\n+pub enum Operand<Id=AllocId> {\n+    Immediate(Value<Id>),\n+    Indirect(MemPlace<Id>),\n }\n \n impl Operand {"}, {"sha": "fd7324c2d17b178fee25ccab01be8acae2b2643f", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2f5c3fde7c5443b8afceaa65aec2b1f62f33e12e/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f5c3fde7c5443b8afceaa65aec2b1f62f33e12e/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=2f5c3fde7c5443b8afceaa65aec2b1f62f33e12e", "patch": "@@ -22,21 +22,21 @@ use rustc_data_structures::indexed_vec::Idx;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher, StableHasherResult};\n \n use rustc::mir::interpret::{\n-    GlobalId, Scalar, EvalResult, Pointer, ScalarMaybeUndef, PointerArithmetic\n+    GlobalId, AllocId, Scalar, EvalResult, Pointer, ScalarMaybeUndef, PointerArithmetic\n };\n use super::{EvalContext, Machine, Value, ValTy, Operand, OpTy, MemoryKind};\n \n #[derive(Copy, Clone, Debug, Hash, PartialEq, Eq)]\n-pub struct MemPlace {\n+pub struct MemPlace<Id=AllocId> {\n     /// A place may have an integral pointer for ZSTs, and since it might\n     /// be turned back into a reference before ever being dereferenced.\n     /// However, it may never be undef.\n-    pub ptr: Scalar,\n+    pub ptr: Scalar<Id>,\n     pub align: Align,\n     /// Metadata for unsized places.  Interpretation is up to the type.\n     /// Must not be present for sized types, but can be missing for unsized types\n     /// (e.g. `extern type`).\n-    pub extra: Option<Scalar>,\n+    pub extra: Option<Scalar<Id>>,\n }\n \n impl_stable_hash_for!(struct ::interpret::MemPlace {\n@@ -46,9 +46,9 @@ impl_stable_hash_for!(struct ::interpret::MemPlace {\n });\n \n #[derive(Copy, Clone, Debug, Hash, PartialEq, Eq)]\n-pub enum Place {\n+pub enum Place<Id=AllocId> {\n     /// A place referring to a value allocated in the `Memory` system.\n-    Ptr(MemPlace),\n+    Ptr(MemPlace<Id>),\n \n     /// To support alloc-free locals, we are able to write directly to a local.\n     /// (Without that optimization, we'd just always be a `MemPlace`.)"}]}