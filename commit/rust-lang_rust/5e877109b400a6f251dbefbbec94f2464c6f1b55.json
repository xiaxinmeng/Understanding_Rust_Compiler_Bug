{"sha": "5e877109b400a6f251dbefbbec94f2464c6f1b55", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlODc3MTA5YjQwMGE2ZjI1MWRiZWZiYmVjOTRmMjQ2NGM2ZjFiNTU=", "commit": {"author": {"name": "The8472", "email": "git@infinite-source.de", "date": "2021-07-05T23:17:20Z"}, "committer": {"name": "The8472", "email": "git@infinite-source.de", "date": "2021-07-06T18:20:16Z"}, "message": "optimize {Path,PathBuf,Components}::{cmp,partial_cmp} for shared prefixes", "tree": {"sha": "79e93339c7e3f8031abf7b4ad6e68af06ac72a3f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79e93339c7e3f8031abf7b4ad6e68af06ac72a3f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e877109b400a6f251dbefbbec94f2464c6f1b55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e877109b400a6f251dbefbbec94f2464c6f1b55", "html_url": "https://github.com/rust-lang/rust/commit/5e877109b400a6f251dbefbbec94f2464c6f1b55", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e877109b400a6f251dbefbbec94f2464c6f1b55/comments", "author": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "committer": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5dcfec332ce9e003f100b4cf9dec895e5634edc3", "url": "https://api.github.com/repos/rust-lang/rust/commits/5dcfec332ce9e003f100b4cf9dec895e5634edc3", "html_url": "https://github.com/rust-lang/rust/commit/5dcfec332ce9e003f100b4cf9dec895e5634edc3"}], "stats": {"total": 96, "additions": 90, "deletions": 6}, "files": [{"sha": "7875c9c9967a3f1b555c3a00adcf303eb288840d", "filename": "library/std/src/path.rs", "status": "modified", "additions": 39, "deletions": 6, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/5e877109b400a6f251dbefbbec94f2464c6f1b55/library%2Fstd%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e877109b400a6f251dbefbbec94f2464c6f1b55/library%2Fstd%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpath.rs?ref=5e877109b400a6f251dbefbbec94f2464c6f1b55", "patch": "@@ -962,16 +962,49 @@ impl cmp::Eq for Components<'_> {}\n impl<'a> cmp::PartialOrd for Components<'a> {\n     #[inline]\n     fn partial_cmp(&self, other: &Components<'a>) -> Option<cmp::Ordering> {\n-        Iterator::partial_cmp(self.clone(), other.clone())\n+        Some(compare_components(self.clone(), other.clone()))\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl cmp::Ord for Components<'_> {\n     #[inline]\n     fn cmp(&self, other: &Self) -> cmp::Ordering {\n-        Iterator::cmp(self.clone(), other.clone())\n+        compare_components(self.clone(), other.clone())\n+    }\n+}\n+\n+fn compare_components(mut left: Components<'_>, mut right: Components<'_>) -> cmp::Ordering {\n+    // Fast path for long shared prefixes\n+    //\n+    // - compare raw bytes to find first mismatch\n+    // - backtrack to find separator before mismatch to avoid ambiguous parsings of '.' or '..' characters\n+    // - if found update state to only do a component-wise comparison on the remainder,\n+    //   otherwise do it on the full path\n+    //\n+    // The fast path isn't taken for paths with a PrefixComponent to avoid backtracking into\n+    // the middle of one\n+    if left.prefix.is_none() && right.prefix.is_none() && left.front == right.front {\n+        // this might benefit from a [u8]::first_mismatch simd implementation, if it existed\n+        let first_difference =\n+            match left.path.iter().zip(right.path.iter()).position(|(&a, &b)| a != b) {\n+                None if left.path.len() == right.path.len() => return cmp::Ordering::Equal,\n+                None => left.path.len().min(right.path.len()),\n+                Some(diff) => diff,\n+            };\n+\n+        if let Some(previous_sep) =\n+            left.path[..first_difference].iter().rposition(|&b| left.is_sep_byte(b))\n+        {\n+            let mismatched_component_start = previous_sep + 1;\n+            left.path = &left.path[mismatched_component_start..];\n+            left.front = State::Body;\n+            right.path = &right.path[mismatched_component_start..];\n+            right.front = State::Body;\n+        }\n     }\n+\n+    Iterator::cmp(left, right)\n }\n \n /// An iterator over [`Path`] and its ancestors.\n@@ -1704,15 +1737,15 @@ impl cmp::Eq for PathBuf {}\n impl cmp::PartialOrd for PathBuf {\n     #[inline]\n     fn partial_cmp(&self, other: &PathBuf) -> Option<cmp::Ordering> {\n-        self.components().partial_cmp(other.components())\n+        Some(compare_components(self.components(), other.components()))\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl cmp::Ord for PathBuf {\n     #[inline]\n     fn cmp(&self, other: &PathBuf) -> cmp::Ordering {\n-        self.components().cmp(other.components())\n+        compare_components(self.components(), other.components())\n     }\n }\n \n@@ -2706,15 +2739,15 @@ impl cmp::Eq for Path {}\n impl cmp::PartialOrd for Path {\n     #[inline]\n     fn partial_cmp(&self, other: &Path) -> Option<cmp::Ordering> {\n-        self.components().partial_cmp(other.components())\n+        Some(compare_components(self.components(), other.components()))\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl cmp::Ord for Path {\n     #[inline]\n     fn cmp(&self, other: &Path) -> cmp::Ordering {\n-        self.components().cmp(other.components())\n+        compare_components(self.components(), other.components())\n     }\n }\n "}, {"sha": "6b7df78d3d7e5cce1eff3037b48da1eeafcc40fa", "filename": "library/std/src/path/tests.rs", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/5e877109b400a6f251dbefbbec94f2464c6f1b55/library%2Fstd%2Fsrc%2Fpath%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e877109b400a6f251dbefbbec94f2464c6f1b55/library%2Fstd%2Fsrc%2Fpath%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpath%2Ftests.rs?ref=5e877109b400a6f251dbefbbec94f2464c6f1b55", "patch": "@@ -1,7 +1,9 @@\n use super::*;\n \n+use crate::collections::BTreeSet;\n use crate::rc::Rc;\n use crate::sync::Arc;\n+use core::hint::black_box;\n \n macro_rules! t(\n     ($path:expr, iter: $iter:expr) => (\n@@ -1392,3 +1394,52 @@ fn into_rc() {\n     assert_eq!(&*rc2, path);\n     assert_eq!(&*arc2, path);\n }\n+\n+#[bench]\n+fn bench_path_cmp_fast_path_buf_sort(b: &mut test::Bencher) {\n+    let prefix = \"my/home\";\n+    let mut paths: Vec<_> =\n+        (0..1000).map(|num| PathBuf::from(prefix).join(format!(\"file {}.rs\", num))).collect();\n+\n+    paths.sort();\n+\n+    b.iter(|| {\n+        black_box(paths.as_mut_slice()).sort_unstable();\n+    });\n+}\n+\n+#[bench]\n+fn bench_path_cmp_fast_path_long(b: &mut test::Bencher) {\n+    let prefix = \"/my/home/is/my/castle/and/my/castle/has/a/rusty/workbench/\";\n+    let paths: Vec<_> =\n+        (0..1000).map(|num| PathBuf::from(prefix).join(format!(\"file {}.rs\", num))).collect();\n+\n+    let mut set = BTreeSet::new();\n+\n+    paths.iter().for_each(|p| {\n+        set.insert(p.as_path());\n+    });\n+\n+    b.iter(|| {\n+        set.remove(paths[500].as_path());\n+        set.insert(paths[500].as_path());\n+    });\n+}\n+\n+#[bench]\n+fn bench_path_cmp_fast_path_short(b: &mut test::Bencher) {\n+    let prefix = \"my/home\";\n+    let paths: Vec<_> =\n+        (0..1000).map(|num| PathBuf::from(prefix).join(format!(\"file {}.rs\", num))).collect();\n+\n+    let mut set = BTreeSet::new();\n+\n+    paths.iter().for_each(|p| {\n+        set.insert(p.as_path());\n+    });\n+\n+    b.iter(|| {\n+        set.remove(paths[500].as_path());\n+        set.insert(paths[500].as_path());\n+    });\n+}"}]}