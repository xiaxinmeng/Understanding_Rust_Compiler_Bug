{"sha": "e1c3f5e017ef93f88158361d06560c8fa7412ac1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxYzNmNWUwMTdlZjkzZjg4MTU4MzYxZDA2NTYwYzhmYTc0MTJhYzE=", "commit": {"author": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2021-06-17T20:00:52Z"}, "committer": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2021-07-10T15:29:00Z"}, "message": "Add clobber-only register classes for asm!\n\nThese are needed to properly express a function call ABI using a clobber\nlist, even though we don't support passing actual values into/out of\nthese registers.", "tree": {"sha": "1c91fe243e19740a9fb398d6e6fe81bad290a134", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c91fe243e19740a9fb398d6e6fe81bad290a134"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1c3f5e017ef93f88158361d06560c8fa7412ac1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1c3f5e017ef93f88158361d06560c8fa7412ac1", "html_url": "https://github.com/rust-lang/rust/commit/e1c3f5e017ef93f88158361d06560c8fa7412ac1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1c3f5e017ef93f88158361d06560c8fa7412ac1/comments", "author": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e13a9bb33debb931d603278b7f1a706b0d11660", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e13a9bb33debb931d603278b7f1a706b0d11660", "html_url": "https://github.com/rust-lang/rust/commit/1e13a9bb33debb931d603278b7f1a706b0d11660"}], "stats": {"total": 265, "additions": 238, "deletions": 27}, "files": [{"sha": "9ea09a2cf31a15f46d50abc8418346d923b5868f", "filename": "compiler/rustc_ast_lowering/src/asm.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e1c3f5e017ef93f88158361d06560c8fa7412ac1/compiler%2Frustc_ast_lowering%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1c3f5e017ef93f88158361d06560c8fa7412ac1/compiler%2Frustc_ast_lowering%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fasm.rs?ref=e1c3f5e017ef93f88158361d06560c8fa7412ac1", "patch": "@@ -199,6 +199,22 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     }\n                 );\n \n+                // Some register classes can only be used as clobbers. This\n+                // means that we disallow passing a value in/out of the asm and\n+                // require that the operand name an explicit register, not a\n+                // register class.\n+                if reg_class.is_clobber_only(asm_arch.unwrap())\n+                    && !(is_clobber && matches!(reg, asm::InlineAsmRegOrRegClass::Reg(_)))\n+                {\n+                    let msg = format!(\n+                        \"register class `{}` can only be used as a clobber, \\\n+                             not as an input or output\",\n+                        reg_class.name()\n+                    );\n+                    sess.struct_span_err(op_sp, &msg).emit();\n+                    continue;\n+                }\n+\n                 if !is_clobber {\n                     // Validate register classes against currently enabled target\n                     // features. We check that at least one type is available for"}, {"sha": "bd2751790aa63679a9918b0d5ac0bb5d01e4d8e9", "filename": "compiler/rustc_codegen_llvm/src/asm.rs", "status": "modified", "additions": 49, "deletions": 1, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/e1c3f5e017ef93f88158361d06560c8fa7412ac1/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1c3f5e017ef93f88158361d06560c8fa7412ac1/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs?ref=e1c3f5e017ef93f88158361d06560c8fa7412ac1", "patch": "@@ -128,6 +128,7 @@ impl AsmBuilderMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n         let mut clobbers = vec![];\n         let mut output_types = vec![];\n         let mut op_idx = FxHashMap::default();\n+        let mut clobbered_x87 = false;\n         for (idx, op) in operands.iter().enumerate() {\n             match *op {\n                 InlineAsmOperandRef::Out { reg, late, place } => {\n@@ -150,7 +151,27 @@ impl AsmBuilderMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n                     let ty = if let Some(ref place) = place {\n                         layout = Some(&place.layout);\n                         llvm_fixup_output_type(self.cx, reg.reg_class(), &place.layout)\n-                    } else if !is_target_supported(reg.reg_class()) {\n+                    } else if matches!(\n+                        reg.reg_class(),\n+                        InlineAsmRegClass::X86(\n+                            X86InlineAsmRegClass::mmx_reg | X86InlineAsmRegClass::x87_reg\n+                        )\n+                    ) {\n+                        // Special handling for x87/mmx registers: we always\n+                        // clobber the whole set if one register is marked as\n+                        // clobbered. This is due to the way LLVM handles the\n+                        // FP stack in inline assembly.\n+                        if !clobbered_x87 {\n+                            clobbered_x87 = true;\n+                            clobbers.push(\"~{st}\".to_string());\n+                            for i in 1..=7 {\n+                                clobbers.push(format!(\"~{{st({})}}\", i));\n+                            }\n+                        }\n+                        continue;\n+                    } else if !is_target_supported(reg.reg_class())\n+                        || reg.reg_class().is_clobber_only(asm_arch)\n+                    {\n                         // We turn discarded outputs into clobber constraints\n                         // if the target feature needed by the register class is\n                         // disabled. This is necessary otherwise LLVM will try\n@@ -564,6 +585,9 @@ fn reg_to_llvm(reg: InlineAsmRegOrRegClass, layout: Option<&TyAndLayout<'tcx>>)\n             InlineAsmRegClass::AArch64(AArch64InlineAsmRegClass::reg) => \"r\",\n             InlineAsmRegClass::AArch64(AArch64InlineAsmRegClass::vreg) => \"w\",\n             InlineAsmRegClass::AArch64(AArch64InlineAsmRegClass::vreg_low16) => \"x\",\n+            InlineAsmRegClass::AArch64(AArch64InlineAsmRegClass::preg) => {\n+                unreachable!(\"clobber-only\")\n+            }\n             InlineAsmRegClass::Arm(ArmInlineAsmRegClass::reg) => \"r\",\n             InlineAsmRegClass::Arm(ArmInlineAsmRegClass::reg_thumb) => \"l\",\n             InlineAsmRegClass::Arm(ArmInlineAsmRegClass::sreg)\n@@ -585,13 +609,19 @@ fn reg_to_llvm(reg: InlineAsmRegOrRegClass, layout: Option<&TyAndLayout<'tcx>>)\n             InlineAsmRegClass::PowerPC(PowerPCInlineAsmRegClass::freg) => \"f\",\n             InlineAsmRegClass::RiscV(RiscVInlineAsmRegClass::reg) => \"r\",\n             InlineAsmRegClass::RiscV(RiscVInlineAsmRegClass::freg) => \"f\",\n+            InlineAsmRegClass::RiscV(RiscVInlineAsmRegClass::vreg) => {\n+                unreachable!(\"clobber-only\")\n+            }\n             InlineAsmRegClass::X86(X86InlineAsmRegClass::reg) => \"r\",\n             InlineAsmRegClass::X86(X86InlineAsmRegClass::reg_abcd) => \"Q\",\n             InlineAsmRegClass::X86(X86InlineAsmRegClass::reg_byte) => \"q\",\n             InlineAsmRegClass::X86(X86InlineAsmRegClass::xmm_reg)\n             | InlineAsmRegClass::X86(X86InlineAsmRegClass::ymm_reg) => \"x\",\n             InlineAsmRegClass::X86(X86InlineAsmRegClass::zmm_reg) => \"v\",\n             InlineAsmRegClass::X86(X86InlineAsmRegClass::kreg) => \"^Yk\",\n+            InlineAsmRegClass::X86(\n+                X86InlineAsmRegClass::x87_reg | X86InlineAsmRegClass::mmx_reg,\n+            ) => unreachable!(\"clobber-only\"),\n             InlineAsmRegClass::Wasm(WasmInlineAsmRegClass::local) => \"r\",\n             InlineAsmRegClass::SpirV(SpirVInlineAsmRegClass::reg) => {\n                 bug!(\"LLVM backend does not support SPIR-V\")\n@@ -614,6 +644,9 @@ fn modifier_to_llvm(\n         | InlineAsmRegClass::AArch64(AArch64InlineAsmRegClass::vreg_low16) => {\n             if modifier == Some('v') { None } else { modifier }\n         }\n+        InlineAsmRegClass::AArch64(AArch64InlineAsmRegClass::preg) => {\n+            unreachable!(\"clobber-only\")\n+        }\n         InlineAsmRegClass::Arm(ArmInlineAsmRegClass::reg)\n         | InlineAsmRegClass::Arm(ArmInlineAsmRegClass::reg_thumb) => None,\n         InlineAsmRegClass::Arm(ArmInlineAsmRegClass::sreg)\n@@ -636,6 +669,9 @@ fn modifier_to_llvm(\n         InlineAsmRegClass::PowerPC(_) => None,\n         InlineAsmRegClass::RiscV(RiscVInlineAsmRegClass::reg)\n         | InlineAsmRegClass::RiscV(RiscVInlineAsmRegClass::freg) => None,\n+        InlineAsmRegClass::RiscV(RiscVInlineAsmRegClass::vreg) => {\n+            unreachable!(\"clobber-only\")\n+        }\n         InlineAsmRegClass::X86(X86InlineAsmRegClass::reg)\n         | InlineAsmRegClass::X86(X86InlineAsmRegClass::reg_abcd) => match modifier {\n             None if arch == InlineAsmArch::X86_64 => Some('q'),\n@@ -660,6 +696,9 @@ fn modifier_to_llvm(\n             _ => unreachable!(),\n         },\n         InlineAsmRegClass::X86(X86InlineAsmRegClass::kreg) => None,\n+        InlineAsmRegClass::X86(X86InlineAsmRegClass::x87_reg | X86InlineAsmRegClass::mmx_reg) => {\n+            unreachable!(\"clobber-only\")\n+        }\n         InlineAsmRegClass::Wasm(WasmInlineAsmRegClass::local) => None,\n         InlineAsmRegClass::SpirV(SpirVInlineAsmRegClass::reg) => {\n             bug!(\"LLVM backend does not support SPIR-V\")\n@@ -677,6 +716,9 @@ fn dummy_output_type(cx: &CodegenCx<'ll, 'tcx>, reg: InlineAsmRegClass) -> &'ll\n         | InlineAsmRegClass::AArch64(AArch64InlineAsmRegClass::vreg_low16) => {\n             cx.type_vector(cx.type_i64(), 2)\n         }\n+        InlineAsmRegClass::AArch64(AArch64InlineAsmRegClass::preg) => {\n+            unreachable!(\"clobber-only\")\n+        }\n         InlineAsmRegClass::Arm(ArmInlineAsmRegClass::reg)\n         | InlineAsmRegClass::Arm(ArmInlineAsmRegClass::reg_thumb) => cx.type_i32(),\n         InlineAsmRegClass::Arm(ArmInlineAsmRegClass::sreg)\n@@ -700,13 +742,19 @@ fn dummy_output_type(cx: &CodegenCx<'ll, 'tcx>, reg: InlineAsmRegClass) -> &'ll\n         InlineAsmRegClass::PowerPC(PowerPCInlineAsmRegClass::freg) => cx.type_f64(),\n         InlineAsmRegClass::RiscV(RiscVInlineAsmRegClass::reg) => cx.type_i32(),\n         InlineAsmRegClass::RiscV(RiscVInlineAsmRegClass::freg) => cx.type_f32(),\n+        InlineAsmRegClass::RiscV(RiscVInlineAsmRegClass::vreg) => {\n+            unreachable!(\"clobber-only\")\n+        }\n         InlineAsmRegClass::X86(X86InlineAsmRegClass::reg)\n         | InlineAsmRegClass::X86(X86InlineAsmRegClass::reg_abcd) => cx.type_i32(),\n         InlineAsmRegClass::X86(X86InlineAsmRegClass::reg_byte) => cx.type_i8(),\n         InlineAsmRegClass::X86(X86InlineAsmRegClass::xmm_reg)\n         | InlineAsmRegClass::X86(X86InlineAsmRegClass::ymm_reg)\n         | InlineAsmRegClass::X86(X86InlineAsmRegClass::zmm_reg) => cx.type_f32(),\n         InlineAsmRegClass::X86(X86InlineAsmRegClass::kreg) => cx.type_i16(),\n+        InlineAsmRegClass::X86(X86InlineAsmRegClass::x87_reg | X86InlineAsmRegClass::mmx_reg) => {\n+            unreachable!(\"clobber-only\")\n+        }\n         InlineAsmRegClass::Wasm(WasmInlineAsmRegClass::local) => cx.type_i32(),\n         InlineAsmRegClass::SpirV(SpirVInlineAsmRegClass::reg) => {\n             bug!(\"LLVM backend does not support SPIR-V\")"}, {"sha": "a8a7797e74a91517a17b054ec2eea79df32f223b", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e1c3f5e017ef93f88158361d06560c8fa7412ac1/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1c3f5e017ef93f88158361d06560c8fa7412ac1/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=e1c3f5e017ef93f88158361d06560c8fa7412ac1", "patch": "@@ -752,6 +752,7 @@ symbols! {\n         minnumf64,\n         mips_target_feature,\n         misc,\n+        mmx_reg,\n         modifiers,\n         module,\n         module_path,\n@@ -894,6 +895,7 @@ symbols! {\n         prefetch_read_instruction,\n         prefetch_write_data,\n         prefetch_write_instruction,\n+        preg,\n         prelude,\n         prelude_import,\n         preserves_flags,\n@@ -1333,6 +1335,7 @@ symbols! {\n         wrapping_mul,\n         wrapping_sub,\n         write_bytes,\n+        x87_reg,\n         xmm_reg,\n         ymm_reg,\n         zmm_reg,"}, {"sha": "4b88a684cd0b28a3affb50fdb4817494529d8adc", "filename": "compiler/rustc_target/src/asm/aarch64.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e1c3f5e017ef93f88158361d06560c8fa7412ac1/compiler%2Frustc_target%2Fsrc%2Fasm%2Faarch64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1c3f5e017ef93f88158361d06560c8fa7412ac1/compiler%2Frustc_target%2Fsrc%2Fasm%2Faarch64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Faarch64.rs?ref=e1c3f5e017ef93f88158361d06560c8fa7412ac1", "patch": "@@ -7,6 +7,7 @@ def_reg_class! {\n         reg,\n         vreg,\n         vreg_low16,\n+        preg,\n     }\n }\n \n@@ -15,6 +16,7 @@ impl AArch64InlineAsmRegClass {\n         match self {\n             Self::reg => &['w', 'x'],\n             Self::vreg | Self::vreg_low16 => &['b', 'h', 's', 'd', 'q', 'v'],\n+            Self::preg => &[],\n         }\n     }\n \n@@ -40,13 +42,15 @@ impl AArch64InlineAsmRegClass {\n                 128 => Some(('q', \"q0\")),\n                 _ => None,\n             },\n+            Self::preg => None,\n         }\n     }\n \n     pub fn default_modifier(self, _arch: InlineAsmArch) -> Option<(char, &'static str)> {\n         match self {\n             Self::reg => Some(('x', \"x0\")),\n             Self::vreg | Self::vreg_low16 => Some(('v', \"v0\")),\n+            Self::preg => None,\n         }\n     }\n \n@@ -61,6 +65,7 @@ impl AArch64InlineAsmRegClass {\n                     VecI8(8), VecI16(4), VecI32(2), VecI64(1), VecF32(2), VecF64(1),\n                     VecI8(16), VecI16(8), VecI32(4), VecI64(2), VecF32(4), VecF64(2);\n             },\n+            Self::preg => &[],\n         }\n     }\n }\n@@ -127,6 +132,23 @@ def_regs! {\n         v29: vreg = [\"v29\", \"b29\", \"h29\", \"s29\", \"d29\", \"q29\"],\n         v30: vreg = [\"v30\", \"b30\", \"h30\", \"s30\", \"d30\", \"q30\"],\n         v31: vreg = [\"v31\", \"b31\", \"h31\", \"s31\", \"d31\", \"q31\"],\n+        p0: preg = [\"p0\"],\n+        p1: preg = [\"p1\"],\n+        p2: preg = [\"p2\"],\n+        p3: preg = [\"p3\"],\n+        p4: preg = [\"p4\"],\n+        p5: preg = [\"p5\"],\n+        p6: preg = [\"p6\"],\n+        p7: preg = [\"p7\"],\n+        p8: preg = [\"p8\"],\n+        p9: preg = [\"p9\"],\n+        p10: preg = [\"p10\"],\n+        p11: preg = [\"p11\"],\n+        p12: preg = [\"p12\"],\n+        p13: preg = [\"p13\"],\n+        p14: preg = [\"p14\"],\n+        p15: preg = [\"p15\"],\n+        ffr: preg = [\"ffr\"],\n         #error = [\"x18\", \"w18\"] =>\n             \"x18 is used as a reserved register on some targets and cannot be used as an operand for inline asm\",\n         #error = [\"x19\", \"w19\"] =>"}, {"sha": "2a033c6c92fc3ef8fcb423b02f22f3cb426282f8", "filename": "compiler/rustc_target/src/asm/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e1c3f5e017ef93f88158361d06560c8fa7412ac1/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1c3f5e017ef93f88158361d06560c8fa7412ac1/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs?ref=e1c3f5e017ef93f88158361d06560c8fa7412ac1", "patch": "@@ -513,6 +513,12 @@ impl InlineAsmRegClass {\n             Self::Err => unreachable!(\"Use of InlineAsmRegClass::Err\"),\n         }\n     }\n+\n+    /// Returns whether registers in this class can only be used as clobbers\n+    /// and not as inputs/outputs.\n+    pub fn is_clobber_only(self, arch: InlineAsmArch) -> bool {\n+        self.supported_types(arch).is_empty()\n+    }\n }\n \n #[derive("}, {"sha": "314bd01de12278f480cc85868e5555048bce9b44", "filename": "compiler/rustc_target/src/asm/riscv.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/e1c3f5e017ef93f88158361d06560c8fa7412ac1/compiler%2Frustc_target%2Fsrc%2Fasm%2Friscv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1c3f5e017ef93f88158361d06560c8fa7412ac1/compiler%2Frustc_target%2Fsrc%2Fasm%2Friscv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Friscv.rs?ref=e1c3f5e017ef93f88158361d06560c8fa7412ac1", "patch": "@@ -7,6 +7,7 @@ def_reg_class! {\n     RiscV RiscVInlineAsmRegClass {\n         reg,\n         freg,\n+        vreg,\n     }\n }\n \n@@ -44,6 +45,7 @@ impl RiscVInlineAsmRegClass {\n                 }\n             }\n             Self::freg => types! { \"f\": F32; \"d\": F64; },\n+            Self::vreg => &[],\n         }\n     }\n }\n@@ -120,6 +122,38 @@ def_regs! {\n         f29: freg = [\"f29\", \"ft9\"],\n         f30: freg = [\"f30\", \"ft10\"],\n         f31: freg = [\"f31\", \"ft11\"],\n+        v0: vreg = [\"v0\"],\n+        v1: vreg = [\"v1\"],\n+        v2: vreg = [\"v2\"],\n+        v3: vreg = [\"v3\"],\n+        v4: vreg = [\"v4\"],\n+        v5: vreg = [\"v5\"],\n+        v6: vreg = [\"v6\"],\n+        v7: vreg = [\"v7\"],\n+        v8: vreg = [\"v8\"],\n+        v9: vreg = [\"v9\"],\n+        v10: vreg = [\"v10\"],\n+        v11: vreg = [\"v11\"],\n+        v12: vreg = [\"v12\"],\n+        v13: vreg = [\"v13\"],\n+        v14: vreg = [\"v14\"],\n+        v15: vreg = [\"v15\"],\n+        v16: vreg = [\"v16\"],\n+        v17: vreg = [\"v17\"],\n+        v18: vreg = [\"v18\"],\n+        v19: vreg = [\"v19\"],\n+        v20: vreg = [\"v20\"],\n+        v21: vreg = [\"v21\"],\n+        v22: vreg = [\"v22\"],\n+        v23: vreg = [\"v23\"],\n+        v24: vreg = [\"v24\"],\n+        v25: vreg = [\"v25\"],\n+        v26: vreg = [\"v26\"],\n+        v27: vreg = [\"v27\"],\n+        v28: vreg = [\"v28\"],\n+        v29: vreg = [\"v29\"],\n+        v30: vreg = [\"v30\"],\n+        v31: vreg = [\"v31\"],\n         #error = [\"x9\", \"s1\"] =>\n             \"s1 is used internally by LLVM and cannot be used as an operand for inline asm\",\n         #error = [\"x8\", \"s0\", \"fp\"] =>"}, {"sha": "5e3828d7d8521063be64bf93c632b098f9460f53", "filename": "compiler/rustc_target/src/asm/x86.rs", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e1c3f5e017ef93f88158361d06560c8fa7412ac1/compiler%2Frustc_target%2Fsrc%2Fasm%2Fx86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1c3f5e017ef93f88158361d06560c8fa7412ac1/compiler%2Frustc_target%2Fsrc%2Fasm%2Fx86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Fx86.rs?ref=e1c3f5e017ef93f88158361d06560c8fa7412ac1", "patch": "@@ -12,6 +12,8 @@ def_reg_class! {\n         ymm_reg,\n         zmm_reg,\n         kreg,\n+        mmx_reg,\n+        x87_reg,\n     }\n }\n \n@@ -35,6 +37,7 @@ impl X86InlineAsmRegClass {\n             Self::reg_byte => &[],\n             Self::xmm_reg | Self::ymm_reg | Self::zmm_reg => &['x', 'y', 'z'],\n             Self::kreg => &[],\n+            Self::mmx_reg | Self::x87_reg => &[],\n         }\n     }\n \n@@ -73,6 +76,7 @@ impl X86InlineAsmRegClass {\n                 _ => Some(('x', \"xmm0\")),\n             },\n             Self::kreg => None,\n+            Self::mmx_reg | Self::x87_reg => None,\n         }\n     }\n \n@@ -90,6 +94,7 @@ impl X86InlineAsmRegClass {\n             Self::ymm_reg => Some(('y', \"ymm0\")),\n             Self::zmm_reg => Some(('z', \"zmm0\")),\n             Self::kreg => None,\n+            Self::mmx_reg | Self::x87_reg => None,\n         }\n     }\n \n@@ -125,6 +130,7 @@ impl X86InlineAsmRegClass {\n                 \"avx512f\": I8, I16;\n                 \"avx512bw\": I32, I64;\n             },\n+            Self::mmx_reg | Self::x87_reg => &[],\n         }\n     }\n }\n@@ -285,16 +291,28 @@ def_regs! {\n         k5: kreg = [\"k5\"],\n         k6: kreg = [\"k6\"],\n         k7: kreg = [\"k7\"],\n+        mm0: mmx_reg = [\"mm0\"],\n+        mm1: mmx_reg = [\"mm1\"],\n+        mm2: mmx_reg = [\"mm2\"],\n+        mm3: mmx_reg = [\"mm3\"],\n+        mm4: mmx_reg = [\"mm4\"],\n+        mm5: mmx_reg = [\"mm5\"],\n+        mm6: mmx_reg = [\"mm6\"],\n+        mm7: mmx_reg = [\"mm7\"],\n+        st0: x87_reg = [\"st(0)\", \"st\"],\n+        st1: x87_reg = [\"st(1)\"],\n+        st2: x87_reg = [\"st(2)\"],\n+        st3: x87_reg = [\"st(3)\"],\n+        st4: x87_reg = [\"st(4)\"],\n+        st5: x87_reg = [\"st(5)\"],\n+        st6: x87_reg = [\"st(6)\"],\n+        st7: x87_reg = [\"st(7)\"],\n         #error = [\"bp\", \"bpl\", \"ebp\", \"rbp\"] =>\n             \"the frame pointer cannot be used as an operand for inline asm\",\n         #error = [\"sp\", \"spl\", \"esp\", \"rsp\"] =>\n             \"the stack pointer cannot be used as an operand for inline asm\",\n         #error = [\"ip\", \"eip\", \"rip\"] =>\n             \"the instruction pointer cannot be used as an operand for inline asm\",\n-        #error = [\"st\", \"st(0)\", \"st(1)\", \"st(2)\", \"st(3)\", \"st(4)\", \"st(5)\", \"st(6)\", \"st(7)\"] =>\n-            \"x87 registers are not currently supported as operands for inline asm\",\n-        #error = [\"mm0\", \"mm1\", \"mm2\", \"mm3\", \"mm4\", \"mm5\", \"mm6\", \"mm7\"] =>\n-            \"MMX registers are not currently supported as operands for inline asm\",\n         #error = [\"k0\"] =>\n             \"the k0 AVX mask register cannot be used as an operand for inline asm\",\n     }"}, {"sha": "544f4704505d86073be3315f1054239e0541ba4e", "filename": "src/doc/unstable-book/src/library-features/asm.md", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e1c3f5e017ef93f88158361d06560c8fa7412ac1/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1c3f5e017ef93f88158361d06560c8fa7412ac1/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md?ref=e1c3f5e017ef93f88158361d06560c8fa7412ac1", "patch": "@@ -544,9 +544,12 @@ Here is the list of currently supported register classes:\n | x86 | `ymm_reg` | `ymm[0-7]` (x86) `ymm[0-15]` (x86-64) | `x` |\n | x86 | `zmm_reg` | `zmm[0-7]` (x86) `zmm[0-31]` (x86-64) | `v` |\n | x86 | `kreg` | `k[1-7]` | `Yk` |\n+| x86 | `x87_reg` | `st([0-7])` | Only clobbers |\n+| x86 | `mmx_reg` | `mm[0-7]` | Only clobbers |\n | AArch64 | `reg` | `x[0-30]` | `r` |\n | AArch64 | `vreg` | `v[0-31]` | `w` |\n | AArch64 | `vreg_low16` | `v[0-15]` | `x` |\n+| AArch64 | `preg` | `p[0-15]`, `ffr` | Only clobbers |\n | ARM | `reg` | `r[0-12]`, `r14` | `r` |\n | ARM (Thumb) | `reg_thumb` | `r[0-r7]` | `l` |\n | ARM (ARM) | `reg_thumb` | `r[0-r12]`, `r14` | `l` |\n@@ -565,6 +568,7 @@ Here is the list of currently supported register classes:\n | NVPTX | `reg64` | None\\* | `l` |\n | RISC-V | `reg` | `x1`, `x[5-7]`, `x[9-15]`, `x[16-31]` (non-RV32E) | `r` |\n | RISC-V | `freg` | `f[0-31]` | `f` |\n+| RISC-V | `vreg` | `v[0-31]` | Only clobbers |\n | Hexagon | `reg` | `r[0-28]` | `r` |\n | PowerPC | `reg` | `r[0-31]` | `r` |\n | PowerPC | `reg_nonzero` | | `r[1-31]` | `b` |\n@@ -578,6 +582,8 @@ Here is the list of currently supported register classes:\n > Note #3: NVPTX doesn't have a fixed register set, so named registers are not supported.\n >\n > Note #4: WebAssembly doesn't have registers, so named registers are not supported.\n+>\n+> Note #5: Some register classes are marked as \"Only clobbers\" which means that they cannot be used for inputs or outputs, only clobbers of the form `out(\"reg\") _` or `lateout(\"reg\") _`.\n \n Additional register classes may be added in the future based on demand (e.g. MMX, x87, etc).\n \n@@ -593,8 +599,11 @@ Each register class has constraints on which value types they can be used with.\n | x86 | `zmm_reg` | `avx512f` | `i32`, `f32`, `i64`, `f64`, <br> `i8x16`, `i16x8`, `i32x4`, `i64x2`, `f32x4`, `f64x2` <br> `i8x32`, `i16x16`, `i32x8`, `i64x4`, `f32x8`, `f64x4` <br> `i8x64`, `i16x32`, `i32x16`, `i64x8`, `f32x16`, `f64x8` |\n | x86 | `kreg` | `axv512f` | `i8`, `i16` |\n | x86 | `kreg` | `axv512bw` | `i32`, `i64` |\n+| x86 | `mmx_reg` | N/A | Only clobbers |\n+| x86 | `x87_reg` | N/A | Only clobbers |\n | AArch64 | `reg` | None | `i8`, `i16`, `i32`, `f32`, `i64`, `f64` |\n | AArch64 | `vreg` | `fp` | `i8`, `i16`, `i32`, `f32`, `i64`, `f64`, <br> `i8x8`, `i16x4`, `i32x2`, `i64x1`, `f32x2`, `f64x1`, <br> `i8x16`, `i16x8`, `i32x4`, `i64x2`, `f32x4`, `f64x2` |\n+| AArch64 | `preg` | N/A | Only clobbers |\n | ARM | `reg` | None | `i8`, `i16`, `i32`, `f32` |\n | ARM | `sreg` | `vfp2` | `i32`, `f32` |\n | ARM | `dreg` | `vfp2` | `i64`, `f64`, `i8x8`, `i16x4`, `i32x2`, `i64x1`, `f32x2` |\n@@ -610,6 +619,7 @@ Each register class has constraints on which value types they can be used with.\n | RISC-V64 | `reg` | None | `i8`, `i16`, `i32`, `f32`, `i64`, `f64` |\n | RISC-V | `freg` | `f` | `f32` |\n | RISC-V | `freg` | `d` | `f64` |\n+| RISC-V | `vreg` | N/A | Only clobbers |\n | Hexagon | `reg` | None | `i8`, `i16`, `i32`, `f32` |\n | PowerPC | `reg` | None | `i8`, `i16`, `i32` |\n | PowerPC | `reg_nonzero` | None | `i8`, `i16`, `i32` |"}, {"sha": "9d7c8b5f1558b9ff0e4c10d12df52acda952d68f", "filename": "src/test/codegen/asm-clobbers.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e1c3f5e017ef93f88158361d06560c8fa7412ac1/src%2Ftest%2Fcodegen%2Fasm-clobbers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1c3f5e017ef93f88158361d06560c8fa7412ac1/src%2Ftest%2Fcodegen%2Fasm-clobbers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fasm-clobbers.rs?ref=e1c3f5e017ef93f88158361d06560c8fa7412ac1", "patch": "@@ -0,0 +1,19 @@\n+// compile-flags: -O\n+// only-x86_64\n+\n+#![crate_type = \"rlib\"]\n+#![feature(asm)]\n+\n+// CHECK-LABEL: @x87_clobber\n+// CHECK: ~{st},~{st(1)},~{st(2)},~{st(3)},~{st(4)},~{st(5)},~{st(6)},~{st(7)}\n+#[no_mangle]\n+pub unsafe fn x87_clobber() {\n+    asm!(\"foo\", out(\"st\") _);\n+}\n+\n+// CHECK-LABEL: @mmx_clobber\n+// CHECK: ~{st},~{st(1)},~{st(2)},~{st(3)},~{st(4)},~{st(5)},~{st(6)},~{st(7)}\n+#[no_mangle]\n+pub unsafe fn mmx_clobber() {\n+    asm!(\"bar\", out(\"mm0\") _, out(\"mm1\") _);\n+}"}, {"sha": "06af08fab80f99afe98558b0cacca3e24cfec13c", "filename": "src/test/ui/asm/bad-reg.rs", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e1c3f5e017ef93f88158361d06560c8fa7412ac1/src%2Ftest%2Fui%2Fasm%2Fbad-reg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1c3f5e017ef93f88158361d06560c8fa7412ac1/src%2Ftest%2Fui%2Fasm%2Fbad-reg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fbad-reg.rs?ref=e1c3f5e017ef93f88158361d06560c8fa7412ac1", "patch": "@@ -31,15 +31,26 @@ fn main() {\n         //~^ ERROR invalid register `rsp`: the stack pointer cannot be used as an operand\n         asm!(\"\", in(\"ip\") foo);\n         //~^ ERROR invalid register `ip`: the instruction pointer cannot be used as an operand\n-        asm!(\"\", in(\"st(2)\") foo);\n-        //~^ ERROR invalid register `st(2)`: x87 registers are not currently supported as operands\n-        asm!(\"\", in(\"mm0\") foo);\n-        //~^ ERROR invalid register `mm0`: MMX registers are not currently supported as operands\n         asm!(\"\", in(\"k0\") foo);\n         //~^ ERROR invalid register `k0`: the k0 AVX mask register cannot be used as an operand\n         asm!(\"\", in(\"ah\") foo);\n         //~^ ERROR invalid register `ah`: high byte registers cannot be used as an operand\n \n+        asm!(\"\", in(\"st(2)\") foo);\n+        //~^ ERROR register class `x87_reg` can only be used as a clobber, not as an input or output\n+        asm!(\"\", in(\"mm0\") foo);\n+        //~^ ERROR register class `mmx_reg` can only be used as a clobber, not as an input or output\n+        asm!(\"\", out(\"st(2)\") _);\n+        asm!(\"\", out(\"mm0\") _);\n+        asm!(\"{}\", in(x87_reg) foo);\n+        //~^ ERROR register class `x87_reg` can only be used as a clobber, not as an input or output\n+        asm!(\"{}\", in(mmx_reg) foo);\n+        //~^ ERROR register class `mmx_reg` can only be used as a clobber, not as an input or output\n+        asm!(\"{}\", out(x87_reg) _);\n+        //~^ ERROR register class `x87_reg` can only be used as a clobber, not as an input or output\n+        asm!(\"{}\", out(mmx_reg) _);\n+        //~^ ERROR register class `mmx_reg` can only be used as a clobber, not as an input or output\n+\n         // Explicit register conflicts\n         // (except in/lateout which don't conflict)\n "}, {"sha": "14740bf62f8e54d133f8ebc758b263295cf90dd6", "filename": "src/test/ui/asm/bad-reg.stderr", "status": "modified", "additions": 42, "deletions": 18, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/e1c3f5e017ef93f88158361d06560c8fa7412ac1/src%2Ftest%2Fui%2Fasm%2Fbad-reg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1c3f5e017ef93f88158361d06560c8fa7412ac1/src%2Ftest%2Fui%2Fasm%2Fbad-reg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fbad-reg.stderr?ref=e1c3f5e017ef93f88158361d06560c8fa7412ac1", "patch": "@@ -76,73 +76,97 @@ error: invalid register `ip`: the instruction pointer cannot be used as an opera\n LL |         asm!(\"\", in(\"ip\") foo);\n    |                  ^^^^^^^^^^^^\n \n-error: invalid register `st(2)`: x87 registers are not currently supported as operands for inline asm\n+error: invalid register `k0`: the k0 AVX mask register cannot be used as an operand for inline asm\n   --> $DIR/bad-reg.rs:34:18\n    |\n+LL |         asm!(\"\", in(\"k0\") foo);\n+   |                  ^^^^^^^^^^^^\n+\n+error: invalid register `ah`: high byte registers cannot be used as an operand on x86_64\n+  --> $DIR/bad-reg.rs:36:18\n+   |\n+LL |         asm!(\"\", in(\"ah\") foo);\n+   |                  ^^^^^^^^^^^^\n+\n+error: register class `x87_reg` can only be used as a clobber, not as an input or output\n+  --> $DIR/bad-reg.rs:39:18\n+   |\n LL |         asm!(\"\", in(\"st(2)\") foo);\n    |                  ^^^^^^^^^^^^^^^\n \n-error: invalid register `mm0`: MMX registers are not currently supported as operands for inline asm\n-  --> $DIR/bad-reg.rs:36:18\n+error: register class `mmx_reg` can only be used as a clobber, not as an input or output\n+  --> $DIR/bad-reg.rs:41:18\n    |\n LL |         asm!(\"\", in(\"mm0\") foo);\n    |                  ^^^^^^^^^^^^^\n \n-error: invalid register `k0`: the k0 AVX mask register cannot be used as an operand for inline asm\n-  --> $DIR/bad-reg.rs:38:18\n+error: register class `x87_reg` can only be used as a clobber, not as an input or output\n+  --> $DIR/bad-reg.rs:45:20\n    |\n-LL |         asm!(\"\", in(\"k0\") foo);\n-   |                  ^^^^^^^^^^^^\n+LL |         asm!(\"{}\", in(x87_reg) foo);\n+   |                    ^^^^^^^^^^^^^^^\n \n-error: invalid register `ah`: high byte registers cannot be used as an operand on x86_64\n-  --> $DIR/bad-reg.rs:40:18\n+error: register class `mmx_reg` can only be used as a clobber, not as an input or output\n+  --> $DIR/bad-reg.rs:47:20\n    |\n-LL |         asm!(\"\", in(\"ah\") foo);\n-   |                  ^^^^^^^^^^^^\n+LL |         asm!(\"{}\", in(mmx_reg) foo);\n+   |                    ^^^^^^^^^^^^^^^\n+\n+error: register class `x87_reg` can only be used as a clobber, not as an input or output\n+  --> $DIR/bad-reg.rs:49:20\n+   |\n+LL |         asm!(\"{}\", out(x87_reg) _);\n+   |                    ^^^^^^^^^^^^^^\n+\n+error: register class `mmx_reg` can only be used as a clobber, not as an input or output\n+  --> $DIR/bad-reg.rs:51:20\n+   |\n+LL |         asm!(\"{}\", out(mmx_reg) _);\n+   |                    ^^^^^^^^^^^^^^\n \n error: register `al` conflicts with register `ax`\n-  --> $DIR/bad-reg.rs:46:33\n+  --> $DIR/bad-reg.rs:57:33\n    |\n LL |         asm!(\"\", in(\"eax\") foo, in(\"al\") bar);\n    |                  -------------  ^^^^^^^^^^^^ register `al`\n    |                  |\n    |                  register `ax`\n \n error: register `ax` conflicts with register `ax`\n-  --> $DIR/bad-reg.rs:48:33\n+  --> $DIR/bad-reg.rs:59:33\n    |\n LL |         asm!(\"\", in(\"rax\") foo, out(\"rax\") bar);\n    |                  -------------  ^^^^^^^^^^^^^^ register `ax`\n    |                  |\n    |                  register `ax`\n    |\n help: use `lateout` instead of `out` to avoid conflict\n-  --> $DIR/bad-reg.rs:48:18\n+  --> $DIR/bad-reg.rs:59:18\n    |\n LL |         asm!(\"\", in(\"rax\") foo, out(\"rax\") bar);\n    |                  ^^^^^^^^^^^^^\n \n error: register `ymm0` conflicts with register `xmm0`\n-  --> $DIR/bad-reg.rs:51:34\n+  --> $DIR/bad-reg.rs:62:34\n    |\n LL |         asm!(\"\", in(\"xmm0\") foo, in(\"ymm0\") bar);\n    |                  --------------  ^^^^^^^^^^^^^^ register `ymm0`\n    |                  |\n    |                  register `xmm0`\n \n error: register `ymm0` conflicts with register `xmm0`\n-  --> $DIR/bad-reg.rs:53:34\n+  --> $DIR/bad-reg.rs:64:34\n    |\n LL |         asm!(\"\", in(\"xmm0\") foo, out(\"ymm0\") bar);\n    |                  --------------  ^^^^^^^^^^^^^^^ register `ymm0`\n    |                  |\n    |                  register `xmm0`\n    |\n help: use `lateout` instead of `out` to avoid conflict\n-  --> $DIR/bad-reg.rs:53:18\n+  --> $DIR/bad-reg.rs:64:18\n    |\n LL |         asm!(\"\", in(\"xmm0\") foo, out(\"ymm0\") bar);\n    |                  ^^^^^^^^^^^^^^\n \n-error: aborting due to 19 previous errors\n+error: aborting due to 23 previous errors\n "}]}