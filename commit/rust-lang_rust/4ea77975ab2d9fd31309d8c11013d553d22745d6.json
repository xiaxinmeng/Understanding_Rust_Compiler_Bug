{"sha": "4ea77975ab2d9fd31309d8c11013d553d22745d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlYTc3OTc1YWIyZDlmZDMxMzA5ZDhjMTEwMTNkNTUzZDIyNzQ1ZDY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-07T22:07:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-09-07T22:07:31Z"}, "message": "Rollup merge of #64066 - petrochenkov:softstab, r=matthewjasper\n\nSupport \"soft\" feature-gating using a lint\n\nUse it for feature-gating `#[bench]`.\n\nCloses https://github.com/rust-lang/rust/issues/63798.", "tree": {"sha": "88f68b325dcd6fbd340c17eeaee9ed6a3865a5d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/88f68b325dcd6fbd340c17eeaee9ed6a3865a5d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ea77975ab2d9fd31309d8c11013d553d22745d6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJddCojCRBK7hj4Ov3rIwAAdHIIAE6HBq/ydUFk2BlLxF7nnl9I\n+HLlrzNWyb/MmM488dCE1nLoHGE7iF61O0zV2yU94PUeExXQX+hF+Wj1wZhm6BIQ\nmmFytjM66GfShb4aRdZ93eaN6e0Mtu1UfNXpVFycJYXTd3acD11zxO6noOdYcW/O\nGc/n1xNymjRIoz+43bTE695vM5FV07vDF4D6hdFsHgVYcDcpztYK5BUVpCTvIli/\n1zpHxDCjOi9FTVJ9l9fdfx95C+obg3o5CNXWSQR9BTrQcMOcqg78rI/obwA3Nxoe\nUJOn2Wh9jbZYGtJDpugLeincdLOQS0ORKblH3GNOMHzpOsSGb+U5z1WYb8HyxQI=\n=Fz6/\n-----END PGP SIGNATURE-----\n", "payload": "tree 88f68b325dcd6fbd340c17eeaee9ed6a3865a5d3\nparent 83e2b5e7afc59ae937b7ff4f8cc8317a6f2f09d7\nparent 74d8679eff1819a8b7aae6f38ca521dc893b448d\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1567894051 +0200\ncommitter GitHub <noreply@github.com> 1567894051 +0200\n\nRollup merge of #64066 - petrochenkov:softstab, r=matthewjasper\n\nSupport \"soft\" feature-gating using a lint\n\nUse it for feature-gating `#[bench]`.\n\nCloses https://github.com/rust-lang/rust/issues/63798.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ea77975ab2d9fd31309d8c11013d553d22745d6", "html_url": "https://github.com/rust-lang/rust/commit/4ea77975ab2d9fd31309d8c11013d553d22745d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ea77975ab2d9fd31309d8c11013d553d22745d6/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83e2b5e7afc59ae937b7ff4f8cc8317a6f2f09d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/83e2b5e7afc59ae937b7ff4f8cc8317a6f2f09d7", "html_url": "https://github.com/rust-lang/rust/commit/83e2b5e7afc59ae937b7ff4f8cc8317a6f2f09d7"}, {"sha": "74d8679eff1819a8b7aae6f38ca521dc893b448d", "url": "https://api.github.com/repos/rust-lang/rust/commits/74d8679eff1819a8b7aae6f38ca521dc893b448d", "html_url": "https://github.com/rust-lang/rust/commit/74d8679eff1819a8b7aae6f38ca521dc893b448d"}], "stats": {"total": 95, "additions": 67, "deletions": 28}, "files": [{"sha": "384bc87499887ad84542a5fd8573e3722b393ff0", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4ea77975ab2d9fd31309d8c11013d553d22745d6/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ea77975ab2d9fd31309d8c11013d553d22745d6/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=4ea77975ab2d9fd31309d8c11013d553d22745d6", "patch": "@@ -1236,8 +1236,10 @@ pub(crate) mod builtin {\n     pub macro test($item:item) { /* compiler built-in */ }\n \n     /// Attribute macro applied to a function to turn it into a benchmark test.\n-    #[unstable(feature = \"test\", issue = \"50297\",\n-               reason = \"`bench` is a part of custom test frameworks which are unstable\")]\n+    #[cfg_attr(not(boostrap_stdarch_ignore_this), unstable(soft, feature = \"test\", issue = \"50297\",\n+               reason = \"`bench` is a part of custom test frameworks which are unstable\"))]\n+    #[cfg_attr(boostrap_stdarch_ignore_this, unstable(feature = \"test\", issue = \"50297\",\n+               reason = \"`bench` is a part of custom test frameworks which are unstable\"))]\n     #[allow_internal_unstable(test, rustc_attrs)]\n     #[rustc_builtin_macro]\n     pub macro bench($item:item) { /* compiler built-in */ }"}, {"sha": "a33181e5925cda13aef96e1b5f138237beb138e3", "filename": "src/librustc/ich/impls_syntax.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4ea77975ab2d9fd31309d8c11013d553d22745d6/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ea77975ab2d9fd31309d8c11013d553d22745d6/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_syntax.rs?ref=4ea77975ab2d9fd31309d8c11013d553d22745d6", "patch": "@@ -115,9 +115,10 @@ for ::syntax::attr::StabilityLevel {\n                                           hasher: &mut StableHasher<W>) {\n         mem::discriminant(self).hash_stable(hcx, hasher);\n         match *self {\n-            ::syntax::attr::StabilityLevel::Unstable { ref reason, ref issue } => {\n+            ::syntax::attr::StabilityLevel::Unstable { ref reason, ref issue, ref is_soft } => {\n                 reason.hash_stable(hcx, hasher);\n                 issue.hash_stable(hcx, hasher);\n+                is_soft.hash_stable(hcx, hasher);\n             }\n             ::syntax::attr::StabilityLevel::Stable { ref since } => {\n                 since.hash_stable(hcx, hasher);"}, {"sha": "dd290572d7bb790208278e70e43dd050050005dd", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4ea77975ab2d9fd31309d8c11013d553d22745d6/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ea77975ab2d9fd31309d8c11013d553d22745d6/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=4ea77975ab2d9fd31309d8c11013d553d22745d6", "patch": "@@ -395,6 +395,12 @@ declare_lint! {\n     \"reservation of a two-phased borrow conflicts with other shared borrows\"\n }\n \n+declare_lint! {\n+    pub SOFT_UNSTABLE,\n+    Deny,\n+    \"a feature gate that doesn't break dependent crates\"\n+}\n+\n declare_lint_pass! {\n     /// Does nothing as a lint pass, but registers some `Lint`s\n     /// that are used by other parts of the compiler.\n@@ -460,6 +466,7 @@ declare_lint_pass! {\n         NESTED_IMPL_TRAIT,\n         MUTABLE_BORROW_RESERVATION_CONFLICT,\n         INDIRECT_STRUCTURAL_MATCH,\n+        SOFT_UNSTABLE,\n     ]\n }\n "}, {"sha": "c06a0feb6a99381f6f8d870e992b80c610832cec", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4ea77975ab2d9fd31309d8c11013d553d22745d6/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ea77975ab2d9fd31309d8c11013d553d22745d6/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=4ea77975ab2d9fd31309d8c11013d553d22745d6", "patch": "@@ -438,6 +438,7 @@ impl<'tcx> Index<'tcx> {\n                     level: attr::StabilityLevel::Unstable {\n                         reason: Some(Symbol::intern(reason)),\n                         issue: 27812,\n+                        is_soft: false,\n                     },\n                     feature: sym::rustc_private,\n                     rustc_depr: None,\n@@ -480,7 +481,7 @@ pub fn provide(providers: &mut Providers<'_>) {\n }\n \n pub fn report_unstable(\n-    sess: &Session, feature: Symbol, reason: Option<Symbol>, issue: u32, span: Span\n+    sess: &Session, feature: Symbol, reason: Option<Symbol>, issue: u32, is_soft: bool, span: Span\n ) {\n     let msg = match reason {\n         Some(r) => format!(\"use of unstable library feature '{}': {}\", feature, r),\n@@ -505,7 +506,13 @@ pub fn report_unstable(\n     let error_id = (DiagnosticMessageId::StabilityId(issue), span_key, msg.clone());\n     let fresh = sess.one_time_diagnostics.borrow_mut().insert(error_id);\n     if fresh {\n-        emit_feature_err(&sess.parse_sess, feature, span, GateIssue::Library(Some(issue)), &msg);\n+        if is_soft {\n+            sess.buffer_lint(lint::builtin::SOFT_UNSTABLE, CRATE_NODE_ID, span, &msg);\n+        } else {\n+            emit_feature_err(\n+                &sess.parse_sess, feature, span, GateIssue::Library(Some(issue)), &msg\n+            );\n+        }\n     }\n }\n \n@@ -621,6 +628,7 @@ pub enum EvalResult {\n         feature: Symbol,\n         reason: Option<Symbol>,\n         issue: u32,\n+        is_soft: bool,\n     },\n     /// The item does not have the `#[stable]` or `#[unstable]` marker assigned.\n     Unmarked,\n@@ -720,7 +728,9 @@ impl<'tcx> TyCtxt<'tcx> {\n         }\n \n         match stability {\n-            Some(&Stability { level: attr::Unstable { reason, issue }, feature, .. }) => {\n+            Some(&Stability {\n+                level: attr::Unstable { reason, issue, is_soft }, feature, ..\n+            }) => {\n                 if span.allows_unstable(feature) {\n                     debug!(\"stability: skipping span={:?} since it is internal\", span);\n                     return EvalResult::Allow;\n@@ -744,7 +754,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                     }\n                 }\n \n-                EvalResult::Deny { feature, reason, issue }\n+                EvalResult::Deny { feature, reason, issue, is_soft }\n             }\n             Some(_) => {\n                 // Stable APIs are always ok to call and deprecated APIs are\n@@ -767,8 +777,8 @@ impl<'tcx> TyCtxt<'tcx> {\n     pub fn check_stability(self, def_id: DefId, id: Option<HirId>, span: Span) {\n         match self.eval_stability(def_id, id, span) {\n             EvalResult::Allow => {}\n-            EvalResult::Deny { feature, reason, issue } =>\n-                report_unstable(self.sess, feature, reason, issue, span),\n+            EvalResult::Deny { feature, reason, issue, is_soft } =>\n+                report_unstable(self.sess, feature, reason, issue, is_soft, span),\n             EvalResult::Unmarked => {\n                 // The API could be uncallable for other reasons, for example when a private module\n                 // was referenced."}, {"sha": "0e054013cd779ed30eab29353d0dd4c1c7cc9b33", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4ea77975ab2d9fd31309d8c11013d553d22745d6/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ea77975ab2d9fd31309d8c11013d553d22745d6/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=4ea77975ab2d9fd31309d8c11013d553d22745d6", "patch": "@@ -435,7 +435,12 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n             id: LintId::of(INDIRECT_STRUCTURAL_MATCH),\n             reference: \"issue #62411 <https://github.com/rust-lang/rust/issues/62411>\",\n             edition: None,\n-        }\n+        },\n+        FutureIncompatibleInfo {\n+            id: LintId::of(SOFT_UNSTABLE),\n+            reference: \"issue #64266 <https://github.com/rust-lang/rust/issues/64266>\",\n+            edition: None,\n+        },\n         ]);\n \n     // Register renamed and removed lints."}, {"sha": "87439440463b3ba2265eaeee52e18505eac58a76", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ea77975ab2d9fd31309d8c11013d553d22745d6/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ea77975ab2d9fd31309d8c11013d553d22745d6/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=4ea77975ab2d9fd31309d8c11013d553d22745d6", "patch": "@@ -774,10 +774,10 @@ impl<'a> Resolver<'a> {\n     fn check_stability_and_deprecation(&self, ext: &SyntaxExtension, path: &ast::Path) {\n         let span = path.span;\n         if let Some(stability) = &ext.stability {\n-            if let StabilityLevel::Unstable { reason, issue } = stability.level {\n+            if let StabilityLevel::Unstable { reason, issue, is_soft } = stability.level {\n                 let feature = stability.feature;\n                 if !self.active_features.contains(&feature) && !span.allows_unstable(feature) {\n-                    stability::report_unstable(self.session, feature, reason, issue, span);\n+                    stability::report_unstable(self.session, feature, reason, issue, is_soft, span);\n                 }\n             }\n             if let Some(depr) = &stability.rustc_depr {"}, {"sha": "b5037b75f79e717387a18a59fbf118d3ef54710b", "filename": "src/libsyntax/attr/builtin.rs", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4ea77975ab2d9fd31309d8c11013d553d22745d6/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ea77975ab2d9fd31309d8c11013d553d22745d6/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fbuiltin.rs?ref=4ea77975ab2d9fd31309d8c11013d553d22745d6", "patch": "@@ -154,23 +154,10 @@ pub struct Stability {\n #[derive(RustcEncodable, RustcDecodable, PartialEq, PartialOrd, Copy, Clone, Debug, Eq, Hash)]\n pub enum StabilityLevel {\n     // Reason for the current stability level and the relevant rust-lang issue\n-    Unstable { reason: Option<Symbol>, issue: u32 },\n+    Unstable { reason: Option<Symbol>, issue: u32, is_soft: bool },\n     Stable { since: Symbol },\n }\n \n-impl Stability {\n-    pub fn unstable(feature: Symbol, reason: Option<Symbol>, issue: u32) -> Stability {\n-        Stability {\n-            level: StabilityLevel::Unstable { reason, issue },\n-            feature,\n-            rustc_depr: None,\n-            const_stability: None,\n-            promotable: false,\n-            allow_const_fn_ptr: false,\n-        }\n-    }\n-}\n-\n impl StabilityLevel {\n     pub fn is_unstable(&self) -> bool {\n         if let StabilityLevel::Unstable {..} = *self {\n@@ -356,19 +343,27 @@ fn find_stability_generic<'a, I>(sess: &ParseSess,\n                     let mut feature = None;\n                     let mut reason = None;\n                     let mut issue = None;\n+                    let mut is_soft = false;\n                     for meta in metas {\n                         if let Some(mi) = meta.meta_item() {\n                             match mi.name_or_empty() {\n                                 sym::feature => if !get(mi, &mut feature) { continue 'outer },\n                                 sym::reason => if !get(mi, &mut reason) { continue 'outer },\n                                 sym::issue => if !get(mi, &mut issue) { continue 'outer },\n+                                sym::soft => {\n+                                    if !mi.is_word() {\n+                                        let msg = \"`soft` should not have any arguments\";\n+                                        sess.span_diagnostic.span_err(mi.span, msg);\n+                                    }\n+                                    is_soft = true;\n+                                }\n                                 _ => {\n                                     handle_errors(\n                                         sess,\n                                         meta.span(),\n                                         AttrError::UnknownMetaItem(\n                                             mi.path.to_string(),\n-                                            &[\"feature\", \"reason\", \"issue\"]\n+                                            &[\"feature\", \"reason\", \"issue\", \"soft\"]\n                                         ),\n                                     );\n                                     continue 'outer\n@@ -400,7 +395,8 @@ fn find_stability_generic<'a, I>(sess: &ParseSess,\n                                                       \"incorrect 'issue'\");\n                                             continue\n                                         }\n-                                    }\n+                                    },\n+                                    is_soft,\n                                 },\n                                 feature,\n                                 rustc_depr: None,"}, {"sha": "ab32d4461ef8775ea73666449e0380ad0f5967a6", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4ea77975ab2d9fd31309d8c11013d553d22745d6/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ea77975ab2d9fd31309d8c11013d553d22745d6/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=4ea77975ab2d9fd31309d8c11013d553d22745d6", "patch": "@@ -626,6 +626,7 @@ symbols! {\n         size,\n         slice_patterns,\n         slicing_syntax,\n+        soft,\n         Some,\n         specialization,\n         speed,"}, {"sha": "afe4dc7d54c9b03339dcb818d3f898bdc34d2328", "filename": "src/test/ui/feature-gates/bench.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4ea77975ab2d9fd31309d8c11013d553d22745d6/src%2Ftest%2Fui%2Ffeature-gates%2Fbench.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ea77975ab2d9fd31309d8c11013d553d22745d6/src%2Ftest%2Fui%2Ffeature-gates%2Fbench.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Fbench.rs?ref=4ea77975ab2d9fd31309d8c11013d553d22745d6", "patch": "@@ -0,0 +1,5 @@\n+#[bench] //~ ERROR use of unstable library feature 'test'\n+         //~| WARN this was previously accepted\n+fn bench() {}\n+\n+fn main() {}"}, {"sha": "b9e24e931d42b9e00a29129098ee445ba19df5ee", "filename": "src/test/ui/feature-gates/bench.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4ea77975ab2d9fd31309d8c11013d553d22745d6/src%2Ftest%2Fui%2Ffeature-gates%2Fbench.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4ea77975ab2d9fd31309d8c11013d553d22745d6/src%2Ftest%2Fui%2Ffeature-gates%2Fbench.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Fbench.stderr?ref=4ea77975ab2d9fd31309d8c11013d553d22745d6", "patch": "@@ -0,0 +1,12 @@\n+error: use of unstable library feature 'test': `bench` is a part of custom test frameworks which are unstable\n+  --> $DIR/bench.rs:1:3\n+   |\n+LL | #[bench]\n+   |   ^^^^^\n+   |\n+   = note: `#[deny(soft_unstable)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #64266 <https://github.com/rust-lang/rust/issues/64266>\n+\n+error: aborting due to previous error\n+"}]}