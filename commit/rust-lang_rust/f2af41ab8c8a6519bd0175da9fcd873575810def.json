{"sha": "f2af41ab8c8a6519bd0175da9fcd873575810def", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyYWY0MWFiOGM4YTY1MTliZDAxNzVkYTlmY2Q4NzM1NzU4MTBkZWY=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-27T08:32:00Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-27T08:32:00Z"}, "message": "use MaybeUninit instead of mem::uninitialized for Windows Mutex", "tree": {"sha": "b7a77d74388a50ae44617628f12e654e0f963fde", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7a77d74388a50ae44617628f12e654e0f963fde"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f2af41ab8c8a6519bd0175da9fcd873575810def", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f2af41ab8c8a6519bd0175da9fcd873575810def", "html_url": "https://github.com/rust-lang/rust/commit/f2af41ab8c8a6519bd0175da9fcd873575810def", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f2af41ab8c8a6519bd0175da9fcd873575810def/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45205f2ac18e926ec61f2672d16ec3b955de5652", "url": "https://api.github.com/repos/rust-lang/rust/commits/45205f2ac18e926ec61f2672d16ec3b955de5652", "html_url": "https://github.com/rust-lang/rust/commit/45205f2ac18e926ec61f2672d16ec3b955de5652"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "3ba19a40d48b95311eb675ec64c1494eca68fea2", "filename": "src/libstd/sys/windows/mutex.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f2af41ab8c8a6519bd0175da9fcd873575810def/src%2Flibstd%2Fsys%2Fwindows%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2af41ab8c8a6519bd0175da9fcd873575810def/src%2Flibstd%2Fsys%2Fwindows%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fmutex.rs?ref=f2af41ab8c8a6519bd0175da9fcd873575810def", "patch": "@@ -30,7 +30,7 @@\n //! detect recursive locks.\n \n use cell::UnsafeCell;\n-use mem;\n+use mem::{self, MaybeUninit};\n use sync::atomic::{AtomicUsize, Ordering};\n use sys::c;\n use sys::compat;\n@@ -157,34 +157,34 @@ fn kind() -> Kind {\n     return ret;\n }\n \n-pub struct ReentrantMutex { inner: UnsafeCell<c::CRITICAL_SECTION> }\n+pub struct ReentrantMutex { inner: MaybeUninit<UnsafeCell<c::CRITICAL_SECTION>> }\n \n unsafe impl Send for ReentrantMutex {}\n unsafe impl Sync for ReentrantMutex {}\n \n impl ReentrantMutex {\n-    pub unsafe fn uninitialized() -> ReentrantMutex {\n-        mem::uninitialized()\n+    pub fn uninitialized() -> ReentrantMutex {\n+        MaybeUninit::uninitialized()\n     }\n \n     pub unsafe fn init(&mut self) {\n-        c::InitializeCriticalSection(self.inner.get());\n+        c::InitializeCriticalSection(self.inner.get_ref().get());\n     }\n \n     pub unsafe fn lock(&self) {\n-        c::EnterCriticalSection(self.inner.get());\n+        c::EnterCriticalSection(self.inner.get_ref().get());\n     }\n \n     #[inline]\n     pub unsafe fn try_lock(&self) -> bool {\n-        c::TryEnterCriticalSection(self.inner.get()) != 0\n+        c::TryEnterCriticalSection(self.inner.get_ref().get()) != 0\n     }\n \n     pub unsafe fn unlock(&self) {\n-        c::LeaveCriticalSection(self.inner.get());\n+        c::LeaveCriticalSection(self.inner.get_ref().get());\n     }\n \n     pub unsafe fn destroy(&self) {\n-        c::DeleteCriticalSection(self.inner.get());\n+        c::DeleteCriticalSection(self.inner.get_ref().get());\n     }\n }"}]}