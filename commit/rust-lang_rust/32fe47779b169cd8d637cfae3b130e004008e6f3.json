{"sha": "32fe47779b169cd8d637cfae3b130e004008e6f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyZmU0Nzc3OWIxNjljZDhkNjM3Y2ZhZTNiMTMwZTAwNDAwOGU2ZjM=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-12-11T03:09:49Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-01-10T08:08:24Z"}, "message": "Promote `Argument`s to constants instead of statics", "tree": {"sha": "b5d3e0fe9683922dcb8ff1c12b9ef9fbf37d6b20", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5d3e0fe9683922dcb8ff1c12b9ef9fbf37d6b20"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/32fe47779b169cd8d637cfae3b130e004008e6f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/32fe47779b169cd8d637cfae3b130e004008e6f3", "html_url": "https://github.com/rust-lang/rust/commit/32fe47779b169cd8d637cfae3b130e004008e6f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/32fe47779b169cd8d637cfae3b130e004008e6f3/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2508f17ac2d8c645ab8127cea87c8e3e77d1053a", "url": "https://api.github.com/repos/rust-lang/rust/commits/2508f17ac2d8c645ab8127cea87c8e3e77d1053a", "html_url": "https://github.com/rust-lang/rust/commit/2508f17ac2d8c645ab8127cea87c8e3e77d1053a"}], "stats": {"total": 36, "additions": 19, "deletions": 17}, "files": [{"sha": "a607383f777895c1801ac15d0a8c1f8b946ffc80", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 19, "deletions": 17, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/32fe47779b169cd8d637cfae3b130e004008e6f3/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32fe47779b169cd8d637cfae3b130e004008e6f3/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=32fe47779b169cd8d637cfae3b130e004008e6f3", "patch": "@@ -908,21 +908,6 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n             let promoted = &mut self.promoted;\n             let promoted_id = Promoted::new(next_promoted_id);\n             let tcx = self.tcx;\n-            let mut promoted_place = |ty, span| {\n-                promoted.span = span;\n-                promoted.local_decls[RETURN_PLACE] = LocalDecl::new_return_place(ty, span);\n-                Place {\n-                    base: PlaceBase::Static(box Static {\n-                        kind: StaticKind::Promoted(\n-                            promoted_id,\n-                            InternalSubsts::identity_for_item(tcx, def_id),\n-                        ),\n-                        ty,\n-                        def_id,\n-                    }),\n-                    projection: List::empty(),\n-                }\n-            };\n             let (blocks, local_decls) = self.source.basic_blocks_and_local_decls_mut();\n             match candidate {\n                 Candidate::Ref(loc) => {\n@@ -1031,8 +1016,25 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n                         TerminatorKind::Call { ref mut args, .. } => {\n                             let ty = args[index].ty(local_decls, self.tcx);\n                             let span = terminator.source_info.span;\n-                            let operand = Operand::Copy(promoted_place(ty, span));\n-                            Rvalue::Use(mem::replace(&mut args[index], operand))\n+\n+                            promoted.span = span;\n+                            promoted.local_decls[RETURN_PLACE] =\n+                                LocalDecl::new_return_place(ty, span);\n+\n+                            let promoted_operand = Operand::Constant(Box::new(Constant {\n+                                span,\n+                                user_ty: None,\n+                                literal: tcx.mk_const(ty::Const {\n+                                    ty,\n+                                    val: ty::ConstKind::Unevaluated(\n+                                        def_id,\n+                                        InternalSubsts::identity_for_item(tcx, def_id),\n+                                        Some(promoted_id),\n+                                    ),\n+                                }),\n+                            }));\n+\n+                            Rvalue::Use(mem::replace(&mut args[index], promoted_operand))\n                         }\n                         // We expected a `TerminatorKind::Call` for which we'd like to promote an\n                         // argument. `qualify_consts` saw a `TerminatorKind::Call` here, but"}]}