{"sha": "09d55d516bdd3e89bef4cb1cabc598a16d9ad401", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5ZDU1ZDUxNmJkZDNlODliZWY0Y2IxY2FiYzU5OGExNmQ5YWQ0MDE=", "commit": {"author": {"name": "Theodore Luo Wang", "email": "wangtheo662@gmail.com", "date": "2021-09-17T03:31:16Z"}, "committer": {"name": "Theodore Luo Wang", "email": "wangtheo662@gmail.com", "date": "2021-09-17T03:31:16Z"}, "message": "Remove special checks to is_assign_to_bool", "tree": {"sha": "bc6b3e1d1296416fb8ea08273522d907ba6b52a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc6b3e1d1296416fb8ea08273522d907ba6b52a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/09d55d516bdd3e89bef4cb1cabc598a16d9ad401", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/09d55d516bdd3e89bef4cb1cabc598a16d9ad401", "html_url": "https://github.com/rust-lang/rust/commit/09d55d516bdd3e89bef4cb1cabc598a16d9ad401", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/09d55d516bdd3e89bef4cb1cabc598a16d9ad401/comments", "author": {"login": "theo-lw", "id": 28904678, "node_id": "MDQ6VXNlcjI4OTA0Njc4", "avatar_url": "https://avatars.githubusercontent.com/u/28904678?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theo-lw", "html_url": "https://github.com/theo-lw", "followers_url": "https://api.github.com/users/theo-lw/followers", "following_url": "https://api.github.com/users/theo-lw/following{/other_user}", "gists_url": "https://api.github.com/users/theo-lw/gists{/gist_id}", "starred_url": "https://api.github.com/users/theo-lw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theo-lw/subscriptions", "organizations_url": "https://api.github.com/users/theo-lw/orgs", "repos_url": "https://api.github.com/users/theo-lw/repos", "events_url": "https://api.github.com/users/theo-lw/events{/privacy}", "received_events_url": "https://api.github.com/users/theo-lw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "theo-lw", "id": 28904678, "node_id": "MDQ6VXNlcjI4OTA0Njc4", "avatar_url": "https://avatars.githubusercontent.com/u/28904678?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theo-lw", "html_url": "https://github.com/theo-lw", "followers_url": "https://api.github.com/users/theo-lw/followers", "following_url": "https://api.github.com/users/theo-lw/following{/other_user}", "gists_url": "https://api.github.com/users/theo-lw/gists{/gist_id}", "starred_url": "https://api.github.com/users/theo-lw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theo-lw/subscriptions", "organizations_url": "https://api.github.com/users/theo-lw/orgs", "repos_url": "https://api.github.com/users/theo-lw/repos", "events_url": "https://api.github.com/users/theo-lw/events{/privacy}", "received_events_url": "https://api.github.com/users/theo-lw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dec7fc3ced5bc3c18d0e5d29921d087f93189cb8", "url": "https://api.github.com/repos/rust-lang/rust/commits/dec7fc3ced5bc3c18d0e5d29921d087f93189cb8", "html_url": "https://github.com/rust-lang/rust/commit/dec7fc3ced5bc3c18d0e5d29921d087f93189cb8"}], "stats": {"total": 27, "additions": 2, "deletions": 25}, "files": [{"sha": "ab6f8742e3f07e5d2bb91d70c7f5f2646692fcf2", "filename": "compiler/rustc_typeck/src/check/coercion.rs", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/09d55d516bdd3e89bef4cb1cabc598a16d9ad401/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09d55d516bdd3e89bef4cb1cabc598a16d9ad401/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs?ref=09d55d516bdd3e89bef4cb1cabc598a16d9ad401", "patch": "@@ -1494,21 +1494,7 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n                     fcx.emit_coerce_suggestions(&mut err, expr, found, expected, None);\n                 }\n \n-                // Error possibly reported in `check_assign` so avoid emitting error again.\n-                let assign_to_bool = expression\n-                    // #67273: Use initial expected type as opposed to `expected`.\n-                    // Otherwise we end up using prior coercions in e.g. a `match` expression:\n-                    // ```\n-                    // match i {\n-                    //     0 => true, // Because of this...\n-                    //     1 => i = 1, // ...`expected == bool` now, but not when checking `i = 1`.\n-                    //     _ => (),\n-                    // };\n-                    // ```\n-                    .filter(|e| fcx.is_assign_to_bool(e, self.expected_ty()))\n-                    .is_some();\n-\n-                err.emit_unless(assign_to_bool || unsized_return);\n+                err.emit_unless(unsized_return);\n \n                 self.final_ty = Some(fcx.tcx.ty_error());\n             }"}, {"sha": "02228b6430794ecf372540cafcd4bad7d84fadd7", "filename": "compiler/rustc_typeck/src/check/demand.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/09d55d516bdd3e89bef4cb1cabc598a16d9ad401/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09d55d516bdd3e89bef4cb1cabc598a16d9ad401/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs?ref=09d55d516bdd3e89bef4cb1cabc598a16d9ad401", "patch": "@@ -166,14 +166,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n-    /// Returns whether the expected type is `bool` and the expression is `x = y`.\n-    pub fn is_assign_to_bool(&self, expr: &hir::Expr<'_>, expected: Ty<'tcx>) -> bool {\n-        if let hir::ExprKind::Assign(..) = expr.kind {\n-            return expected == self.tcx.types.bool;\n-        }\n-        false\n-    }\n-\n     /// If the expected type is an enum (Issue #55250) with any variants whose\n     /// sole field is of the found type, suggest such variants. (Issue #42764)\n     fn suggest_compatible_variants("}, {"sha": "58545d3ec983a48215d3ea485dab206392117974", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/09d55d516bdd3e89bef4cb1cabc598a16d9ad401/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09d55d516bdd3e89bef4cb1cabc598a16d9ad401/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=09d55d516bdd3e89bef4cb1cabc598a16d9ad401", "patch": "@@ -92,8 +92,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             let expr = expr.peel_drop_temps();\n             self.suggest_deref_ref_or_into(&mut err, expr, expected_ty, ty, None);\n             extend_err(&mut err);\n-            // Error possibly reported in `check_assign` so avoid emitting error again.\n-            err.emit_unless(self.is_assign_to_bool(expr, expected_ty));\n+            err.emit();\n         }\n         ty\n     }"}]}