{"sha": "d9aaca71cc61a7c0792da2789b5e278cc294733f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5YWFjYTcxY2M2MWE3YzA3OTJkYTI3ODliNWUyNzhjYzI5NDczM2Y=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-01-28T23:13:21Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-02-03T01:38:16Z"}, "message": "store typeck lints in the `TypeckTables`\n\nOtherwise they are a \"hidden output\"", "tree": {"sha": "3ffe2962528fe925ad364aefffea6e0cf3920257", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ffe2962528fe925ad364aefffea6e0cf3920257"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9aaca71cc61a7c0792da2789b5e278cc294733f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9aaca71cc61a7c0792da2789b5e278cc294733f", "html_url": "https://github.com/rust-lang/rust/commit/d9aaca71cc61a7c0792da2789b5e278cc294733f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9aaca71cc61a7c0792da2789b5e278cc294733f/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65b93ebcb8e2ff2d8747ce731108e8f5d9f7dddf", "url": "https://api.github.com/repos/rust-lang/rust/commits/65b93ebcb8e2ff2d8747ce731108e8f5d9f7dddf", "html_url": "https://github.com/rust-lang/rust/commit/65b93ebcb8e2ff2d8747ce731108e8f5d9f7dddf"}], "stats": {"total": 119, "additions": 87, "deletions": 32}, "files": [{"sha": "f40d50dd59dc1fdf4183355ed368bc9101200780", "filename": "src/Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d9aaca71cc61a7c0792da2789b5e278cc294733f/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/d9aaca71cc61a7c0792da2789b5e278cc294733f/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=d9aaca71cc61a7c0792da2789b5e278cc294733f", "patch": "@@ -364,6 +364,7 @@ dependencies = [\n name = \"rustc_errors\"\n version = \"0.0.0\"\n dependencies = [\n+ \"serialize 0.0.0\",\n  \"syntax_pos 0.0.0\",\n ]\n "}, {"sha": "362117d860a5c15f3aece6d8d2c1a9f497a4f634", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d9aaca71cc61a7c0792da2789b5e278cc294733f/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9aaca71cc61a7c0792da2789b5e278cc294733f/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=d9aaca71cc61a7c0792da2789b5e278cc294733f", "patch": "@@ -33,6 +33,7 @@ use lint::{Level, LevelSource, Lint, LintId, LintPass, LintSource};\n use lint::{EarlyLintPassObject, LateLintPassObject};\n use lint::{Default, CommandLine, Node, Allow, Warn, Deny, Forbid};\n use lint::builtin;\n+use rustc_serialize::{Decoder, Decodable, Encoder, Encodable};\n use util::nodemap::FxHashMap;\n \n use std::cmp;\n@@ -82,7 +83,7 @@ pub struct LintStore {\n \n /// When you call `add_lint` on the session, you wind up storing one\n /// of these, which records a \"potential lint\" at a particular point.\n-#[derive(PartialEq)]\n+#[derive(PartialEq, RustcEncodable, RustcDecodable)]\n pub struct EarlyLint {\n     /// what lint is this? (e.g., `dead_code`)\n     pub id: LintId,\n@@ -558,7 +559,7 @@ pub trait LintContext<'tcx>: Sized {\n         self.lookup_and_emit(lint, Some(span), msg);\n     }\n \n-    fn early_lint(&self, early_lint: EarlyLint) {\n+    fn early_lint(&self, early_lint: &EarlyLint) {\n         let span = early_lint.diagnostic.span.primary_span().expect(\"early lint w/o primary span\");\n         let mut err = self.struct_span_lint(early_lint.id.lint,\n                                             span,\n@@ -774,7 +775,7 @@ impl<'a, 'tcx> hir_visit::Visitor<'tcx> for LateContext<'a, 'tcx> {\n     // Output any lints that were previously added to the session.\n     fn visit_id(&mut self, id: ast::NodeId) {\n         let lints = self.sess().lints.borrow_mut().take(id);\n-        for early_lint in lints {\n+        for early_lint in lints.iter().chain(self.tables.lints.get(id)) {\n             debug!(\"LateContext::visit_id: id={:?} early_lint={:?}\", id, early_lint);\n             self.early_lint(early_lint);\n         }\n@@ -1251,7 +1252,7 @@ pub fn check_ast_crate(sess: &Session, krate: &ast::Crate) {\n         // Lints may be assigned to the whole crate.\n         let lints = cx.sess.lints.borrow_mut().take(ast::CRATE_NODE_ID);\n         for early_lint in lints {\n-            cx.early_lint(early_lint);\n+            cx.early_lint(&early_lint);\n         }\n \n         // since the root module isn't visited as an item (because it isn't an\n@@ -1274,3 +1275,22 @@ pub fn check_ast_crate(sess: &Session, krate: &ast::Crate) {\n         }\n     }\n }\n+\n+impl Encodable for LintId {\n+    fn encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n+        s.emit_str(&self.lint.name.to_lowercase())\n+    }\n+}\n+\n+impl Decodable for LintId {\n+    #[inline]\n+    fn decode<D: Decoder>(d: &mut D) -> Result<LintId, D::Error> {\n+        let s = d.read_str()?;\n+        ty::tls::with(|tcx| {\n+            match tcx.sess.lint_store.borrow().find_lint(&s, tcx.sess, None) {\n+                Ok(id) => Ok(id),\n+                Err(_) => panic!(\"invalid lint-id `{}`\", s),\n+            }\n+        })\n+    }\n+}"}, {"sha": "d12065ca86e144c5d0e682e33b596ed4122d5275", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d9aaca71cc61a7c0792da2789b5e278cc294733f/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9aaca71cc61a7c0792da2789b5e278cc294733f/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=d9aaca71cc61a7c0792da2789b5e278cc294733f", "patch": "@@ -31,13 +31,13 @@\n pub use self::Level::*;\n pub use self::LintSource::*;\n \n+use hir;\n+use hir::intravisit::FnKind;\n use std::hash;\n use std::ascii::AsciiExt;\n use syntax_pos::Span;\n-use hir::intravisit::FnKind;\n use syntax::visit as ast_visit;\n use syntax::ast;\n-use hir;\n \n pub use lint::context::{LateContext, EarlyContext, LintContext, LintStore,\n                         raw_emit_lint, check_crate, check_ast_crate, gather_attrs,"}, {"sha": "f2dab25229ae4e0ec3ed063c38dbd8b70d328637", "filename": "src/librustc/lint/table.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d9aaca71cc61a7c0792da2789b5e278cc294733f/src%2Flibrustc%2Flint%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9aaca71cc61a7c0792da2789b5e278cc294733f/src%2Flibrustc%2Flint%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Ftable.rs?ref=d9aaca71cc61a7c0792da2789b5e278cc294733f", "patch": "@@ -1,9 +1,20 @@\n+// Copyright 2012-2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n use syntax::ast;\n use syntax_pos::MultiSpan;\n use util::nodemap::NodeMap;\n \n use super::{Lint, LintId, EarlyLint, IntoEarlyLint};\n \n+#[derive(RustcEncodable, RustcDecodable)]\n pub struct LintTable {\n     map: NodeMap<Vec<EarlyLint>>\n }\n@@ -44,6 +55,10 @@ impl LintTable {\n         self.map.remove(&id).unwrap_or(vec![])\n     }\n \n+    pub fn transfer(&mut self, into: &mut LintTable) {\n+        into.map.extend(self.map.drain());\n+    }\n+\n     /// Returns the first (id, lint) pair that is non-empty. Used to\n     /// implement a sanity check in lints that all node-ids are\n     /// visited."}, {"sha": "a3b81586738b5dadee1bad445f9eee38dc99eae0", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d9aaca71cc61a7c0792da2789b5e278cc294733f/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9aaca71cc61a7c0792da2789b5e278cc294733f/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=d9aaca71cc61a7c0792da2789b5e278cc294733f", "patch": "@@ -12,6 +12,7 @@\n \n use dep_graph::{DepGraph, DepTrackingMap};\n use session::Session;\n+use lint;\n use middle;\n use hir::TraitMap;\n use hir::def::Def;\n@@ -237,6 +238,9 @@ pub struct TypeckTables<'tcx> {\n     /// Maps a cast expression to its kind. This is keyed on the\n     /// *from* expression of the cast, not the cast itself.\n     pub cast_kinds: NodeMap<ty::cast::CastKind>,\n+\n+    /// Lints for the body of this fn generated by typeck.\n+    pub lints: lint::LintTable,\n }\n \n impl<'tcx> TypeckTables<'tcx> {\n@@ -253,6 +257,7 @@ impl<'tcx> TypeckTables<'tcx> {\n             liberated_fn_sigs: NodeMap(),\n             fru_field_types: NodeMap(),\n             cast_kinds: NodeMap(),\n+            lints: lint::LintTable::new(),\n         }\n     }\n "}, {"sha": "78ff52b4b2371491c5cbf566293a52c588957e01", "filename": "src/librustc_errors/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d9aaca71cc61a7c0792da2789b5e278cc294733f/src%2Flibrustc_errors%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d9aaca71cc61a7c0792da2789b5e278cc294733f/src%2Flibrustc_errors%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2FCargo.toml?ref=d9aaca71cc61a7c0792da2789b5e278cc294733f", "patch": "@@ -9,4 +9,5 @@ path = \"lib.rs\"\n crate-type = [\"dylib\"]\n \n [dependencies]\n+serialize = { path = \"../libserialize\" }\n syntax_pos = { path = \"../libsyntax_pos\" }"}, {"sha": "1b77ead92deb6a4084d6539c7658fa8678af9cbd", "filename": "src/librustc_errors/diagnostic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d9aaca71cc61a7c0792da2789b5e278cc294733f/src%2Flibrustc_errors%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9aaca71cc61a7c0792da2789b5e278cc294733f/src%2Flibrustc_errors%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic.rs?ref=d9aaca71cc61a7c0792da2789b5e278cc294733f", "patch": "@@ -17,7 +17,7 @@ use syntax_pos::{MultiSpan, Span};\n use snippet::Style;\n \n #[must_use]\n-#[derive(Clone, Debug, PartialEq)]\n+#[derive(Clone, Debug, PartialEq, RustcEncodable, RustcDecodable)]\n pub struct Diagnostic {\n     pub level: Level,\n     pub message: Vec<(String, Style)>,\n@@ -27,7 +27,7 @@ pub struct Diagnostic {\n }\n \n /// For example a note attached to an error.\n-#[derive(Clone, Debug, PartialEq)]\n+#[derive(Clone, Debug, PartialEq, RustcEncodable, RustcDecodable)]\n pub struct SubDiagnostic {\n     pub level: Level,\n     pub message: Vec<(String, Style)>,"}, {"sha": "d7bd5ed23c2b0af883ce9687447d15d233f63755", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d9aaca71cc61a7c0792da2789b5e278cc294733f/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9aaca71cc61a7c0792da2789b5e278cc294733f/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=d9aaca71cc61a7c0792da2789b5e278cc294733f", "patch": "@@ -26,6 +26,7 @@\n \n extern crate term;\n extern crate libc;\n+extern crate serialize as rustc_serialize;\n extern crate syntax_pos;\n \n pub use emitter::ColorConfig;\n@@ -49,7 +50,7 @@ mod lock;\n use syntax_pos::{BytePos, Loc, FileLinesResult, FileName, MultiSpan, Span, NO_EXPANSION};\n use syntax_pos::MacroBacktrace;\n \n-#[derive(Clone, Debug, PartialEq)]\n+#[derive(Clone, Debug, PartialEq, RustcEncodable, RustcDecodable)]\n pub enum RenderSpan {\n     /// A FullSpan renders with both with an initial line for the\n     /// message, prefixed by file:linenum, followed by a summary of\n@@ -63,7 +64,7 @@ pub enum RenderSpan {\n     Suggestion(CodeSuggestion),\n }\n \n-#[derive(Clone, Debug, PartialEq)]\n+#[derive(Clone, Debug, PartialEq, RustcEncodable, RustcDecodable)]\n pub struct CodeSuggestion {\n     pub msp: MultiSpan,\n     pub substitutes: Vec<String>,\n@@ -477,7 +478,7 @@ impl Handler {\n }\n \n \n-#[derive(Copy, PartialEq, Clone, Debug)]\n+#[derive(Copy, PartialEq, Clone, Debug, RustcEncodable, RustcDecodable)]\n pub enum Level {\n     Bug,\n     Fatal,"}, {"sha": "5debbf4d37c20286fab1be9ed9b763888c84327f", "filename": "src/librustc_errors/snippet.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9aaca71cc61a7c0792da2789b5e278cc294733f/src%2Flibrustc_errors%2Fsnippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9aaca71cc61a7c0792da2789b5e278cc294733f/src%2Flibrustc_errors%2Fsnippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fsnippet.rs?ref=d9aaca71cc61a7c0792da2789b5e278cc294733f", "patch": "@@ -204,7 +204,7 @@ pub struct StyledString {\n     pub style: Style,\n }\n \n-#[derive(Copy, Clone, Debug, PartialEq)]\n+#[derive(Copy, Clone, Debug, PartialEq, RustcEncodable, RustcDecodable)]\n pub enum Style {\n     HeaderMsg,\n     FileNameStyle,"}, {"sha": "441d427fe499e366303512c107e6733b31e9f414", "filename": "src/librustc_typeck/check/cast.rs", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/d9aaca71cc61a7c0792da2789b5e278cc294733f/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9aaca71cc61a7c0792da2789b5e278cc294733f/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs?ref=d9aaca71cc61a7c0792da2789b5e278cc294733f", "patch": "@@ -311,23 +311,25 @@ impl<'a, 'gcx, 'tcx> CastCheck<'tcx> {\n         let t_cast = self.cast_ty;\n         let t_expr = self.expr_ty;\n         if t_cast.is_numeric() && t_expr.is_numeric() {\n-            fcx.tcx.sess.add_lint(lint::builtin::TRIVIAL_NUMERIC_CASTS,\n-                                  self.expr.id,\n-                                  self.span,\n-                                  format!(\"trivial numeric cast: `{}` as `{}`. Cast can be \\\n-                                           replaced by coercion, this might require type \\\n-                                           ascription or a temporary variable\",\n-                                          fcx.ty_to_string(t_expr),\n-                                          fcx.ty_to_string(t_cast)));\n+            fcx.tables.borrow_mut().lints.add_lint(\n+                lint::builtin::TRIVIAL_NUMERIC_CASTS,\n+                self.expr.id,\n+                self.span,\n+                format!(\"trivial numeric cast: `{}` as `{}`. Cast can be \\\n+                         replaced by coercion, this might require type \\\n+                         ascription or a temporary variable\",\n+                        fcx.ty_to_string(t_expr),\n+                        fcx.ty_to_string(t_cast)));\n         } else {\n-            fcx.tcx.sess.add_lint(lint::builtin::TRIVIAL_CASTS,\n-                                  self.expr.id,\n-                                  self.span,\n-                                  format!(\"trivial cast: `{}` as `{}`. Cast can be \\\n-                                           replaced by coercion, this might require type \\\n-                                           ascription or a temporary variable\",\n-                                          fcx.ty_to_string(t_expr),\n-                                          fcx.ty_to_string(t_cast)));\n+            fcx.tables.borrow_mut().lints.add_lint(\n+                lint::builtin::TRIVIAL_CASTS,\n+                self.expr.id,\n+                self.span,\n+                format!(\"trivial cast: `{}` as `{}`. Cast can be \\\n+                         replaced by coercion, this might require type \\\n+                         ascription or a temporary variable\",\n+                        fcx.ty_to_string(t_expr),\n+                        fcx.ty_to_string(t_cast)));\n         }\n \n     }"}, {"sha": "573cbfcc3b062bbfdd8a8e17945c46e43100662c", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d9aaca71cc61a7c0792da2789b5e278cc294733f/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9aaca71cc61a7c0792da2789b5e278cc294733f/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=d9aaca71cc61a7c0792da2789b5e278cc294733f", "patch": "@@ -1521,9 +1521,10 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         if self.diverges.get() == Diverges::Always {\n             self.diverges.set(Diverges::WarnedAlways);\n \n-            self.tcx.sess.add_lint(lint::builtin::UNREACHABLE_CODE,\n-                                   id, span,\n-                                   format!(\"unreachable {}\", kind));\n+            self.tables.borrow_mut().lints.add_lint(\n+                lint::builtin::UNREACHABLE_CODE,\n+                id, span,\n+                format!(\"unreachable {}\", kind));\n         }\n     }\n "}, {"sha": "3a467c0296a528d7d35c444e6a5664d0e06763c5", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d9aaca71cc61a7c0792da2789b5e278cc294733f/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9aaca71cc61a7c0792da2789b5e278cc294733f/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=d9aaca71cc61a7c0792da2789b5e278cc294733f", "patch": "@@ -52,6 +52,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         wbcx.visit_deferred_obligations(item_id);\n         wbcx.visit_type_nodes();\n         wbcx.visit_cast_types();\n+        wbcx.visit_lints();\n \n         let tables = self.tcx.alloc_tables(wbcx.tables);\n         self.tcx.tables.borrow_mut().insert(item_def_id, tables);\n@@ -301,6 +302,14 @@ impl<'cx, 'gcx, 'tcx> WritebackCx<'cx, 'gcx, 'tcx> {\n             self.fcx.tables.borrow().cast_kinds.iter().map(|(&key, &value)| (key, value)));\n     }\n \n+    fn visit_lints(&mut self) {\n+        if self.fcx.writeback_errors.get() {\n+            return\n+        }\n+\n+        self.fcx.tables.borrow_mut().lints.transfer(&mut self.tables.lints);\n+    }\n+\n     fn visit_anon_types(&self) {\n         if self.fcx.writeback_errors.get() {\n             return"}, {"sha": "3808923e7728f9813d4cb33a5e1d6dd0341dc602", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9aaca71cc61a7c0792da2789b5e278cc294733f/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9aaca71cc61a7c0792da2789b5e278cc294733f/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=d9aaca71cc61a7c0792da2789b5e278cc294733f", "patch": "@@ -66,7 +66,7 @@ pub struct Span {\n ///   the error, and would be rendered with `^^^`.\n /// - they can have a *label*. In this case, the label is written next\n ///   to the mark in the snippet when we render.\n-#[derive(Clone, Debug, Hash, PartialEq, Eq)]\n+#[derive(Clone, Debug, Hash, PartialEq, Eq, RustcEncodable, RustcDecodable)]\n pub struct MultiSpan {\n     primary_spans: Vec<Span>,\n     span_labels: Vec<(Span, String)>,"}]}