{"sha": "422f663a988370a93a6ae21b92215e49750c2e87", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyMmY2NjNhOTg4MzcwYTkzYTZhZTIxYjkyMjE1ZTQ5NzUwYzJlODc=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-06-01T09:11:59Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-06-06T05:07:39Z"}, "message": "core::rt: Implement SharedChan", "tree": {"sha": "db9c62c0b8c99a0f4a56b380a125448b6d25b085", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/db9c62c0b8c99a0f4a56b380a125448b6d25b085"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/422f663a988370a93a6ae21b92215e49750c2e87", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/422f663a988370a93a6ae21b92215e49750c2e87", "html_url": "https://github.com/rust-lang/rust/commit/422f663a988370a93a6ae21b92215e49750c2e87", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/422f663a988370a93a6ae21b92215e49750c2e87/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1507df87ccc93091ef5d918dc2c660f2e6f5a928", "url": "https://api.github.com/repos/rust-lang/rust/commits/1507df87ccc93091ef5d918dc2c660f2e6f5a928", "html_url": "https://github.com/rust-lang/rust/commit/1507df87ccc93091ef5d918dc2c660f2e6f5a928"}], "stats": {"total": 67, "additions": 64, "deletions": 3}, "files": [{"sha": "b97a4df224576d4b378abefe15b5a2cc419258fc", "filename": "src/libstd/rt/comm.rs", "status": "modified", "additions": 64, "deletions": 3, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/422f663a988370a93a6ae21b92215e49750c2e87/src%2Flibstd%2Frt%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/422f663a988370a93a6ae21b92215e49750c2e87/src%2Flibstd%2Frt%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fcomm.rs?ref=422f663a988370a93a6ae21b92215e49750c2e87", "patch": "@@ -22,10 +22,12 @@ use ops::Drop;\n use kinds::Owned;\n use rt::sched::{Scheduler, Coroutine};\n use rt::local::Local;\n-use unstable::atomics::{AtomicUint, SeqCst};\n+use unstable::atomics::{AtomicUint, AtomicOption, SeqCst};\n+use unstable::sync::UnsafeAtomicRcBox;\n use util::Void;\n use comm::{GenericChan, GenericSmartChan, GenericPort, Peekable};\n use cell::Cell;\n+use clone::Clone;\n \n /// A combined refcount / ~Task pointer.\n ///\n@@ -312,16 +314,19 @@ struct StreamPayload<T> {\n     next: PortOne<StreamPayload<T>>\n }\n \n+type StreamChanOne<T> = ChanOne<StreamPayload<T>>;\n+type StreamPortOne<T> = PortOne<StreamPayload<T>>;\n+\n /// A channel with unbounded size.\n pub struct Chan<T> {\n     // FIXME #5372. Using Cell because we don't take &mut self\n-    next: Cell<ChanOne<StreamPayload<T>>>\n+    next: Cell<StreamChanOne<T>>\n }\n \n /// An port with unbounded size.\n pub struct Port<T> {\n     // FIXME #5372. Using Cell because we don't take &mut self\n-    next: Cell<PortOne<StreamPayload<T>>>\n+    next: Cell<StreamPortOne<T>>\n }\n \n pub fn stream<T: Owned>() -> (Port<T>, Chan<T>) {\n@@ -374,6 +379,43 @@ impl<T> Peekable<T> for Port<T> {\n     }\n }\n \n+pub struct SharedChan<T> {\n+    // Just like Chan, but a shared AtomicOption instead of Cell\n+    priv next: UnsafeAtomicRcBox<AtomicOption<StreamChanOne<T>>>\n+}\n+\n+impl<T> SharedChan<T> {\n+    pub fn new(chan: Chan<T>) -> SharedChan<T> {\n+        let next = chan.next.take();\n+        let next = AtomicOption::new(~next);\n+        SharedChan { next: UnsafeAtomicRcBox::new(next) }\n+    }\n+}\n+\n+impl<T: Owned> GenericChan<T> for SharedChan<T> {\n+    fn send(&self, val: T) {\n+        self.try_send(val);\n+    }\n+}\n+\n+impl<T: Owned> GenericSmartChan<T> for SharedChan<T> {\n+    fn try_send(&self, val: T) -> bool {\n+        unsafe {\n+            let (next_pone, next_cone) = oneshot();\n+            let cone = (*self.next.get()).swap(~next_cone, SeqCst);\n+            cone.unwrap().try_send(StreamPayload { val: val, next: next_pone })\n+        }\n+    }\n+}\n+\n+impl<T> Clone for SharedChan<T> {\n+    fn clone(&self) -> SharedChan<T> {\n+        SharedChan {\n+            next: self.next.clone()\n+        }\n+    }\n+}\n+\n #[cfg(test)]\n mod test {\n     use super::*;\n@@ -641,5 +683,24 @@ mod test {\n             for 10000.times { port.recv() }\n         }\n     }\n+\n+    #[test]\n+    fn shared_chan_stress() {\n+        do run_in_mt_newsched_task {\n+            let (port, chan) = stream();\n+            let chan = SharedChan::new(chan);\n+            let total = stress_factor() + 100;\n+            for total.times {\n+                let chan_clone = chan.clone();\n+                do spawntask_random {\n+                    chan_clone.send(());\n+                }\n+            }\n+\n+            for total.times {\n+                port.recv();\n+            }\n+        }\n+    }\n }\n "}]}