{"sha": "9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxNjVhNGUyZGNhYWE4NzhhMzMzNzljNmZmMDk3YzY4ZjBjYTA0ODU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-08-16T05:10:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-08-16T05:10:23Z"}, "message": "Auto merge of #27818 - alexcrichton:tag-all-the-issues, r=aturon\n\nThis commit turns `#[unstable]` attributes missing an `issue` annotation into a hard error. This will require the libs team to ensure that there's a tracking issue for all unstable features in the standard library.\r\n\r\nAll existing unstable features have had issues created and they've all been updated. Yay!\r\n\r\nCloses #26868", "tree": {"sha": "26f976828c10dbfb3e895569bfa434c6bc6e650b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26f976828c10dbfb3e895569bfa434c6bc6e650b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "html_url": "https://github.com/rust-lang/rust/commit/9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc7efab3ab48e119e1a59281c26e666634ad1224", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc7efab3ab48e119e1a59281c26e666634ad1224", "html_url": "https://github.com/rust-lang/rust/commit/fc7efab3ab48e119e1a59281c26e666634ad1224"}, {"sha": "8ef1e3b77f0f0c365c6c11ebc5095997c8f0cd15", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ef1e3b77f0f0c365c6c11ebc5095997c8f0cd15", "html_url": "https://github.com/rust-lang/rust/commit/8ef1e3b77f0f0c365c6c11ebc5095997c8f0cd15"}], "stats": {"total": 1291, "additions": 752, "deletions": 539}, "files": [{"sha": "8af4cee9095196a6efe415ea883fd2bdf31bfdf8", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -137,7 +137,8 @@ impl<T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<Arc<U>> for Arc<T> {}\n /// used to break cycles between `Arc` pointers.\n #[unsafe_no_drop_flag]\n #[unstable(feature = \"arc_weak\",\n-           reason = \"Weak pointers may not belong in this module.\")]\n+           reason = \"Weak pointers may not belong in this module.\",\n+           issue = \"27718\")]\n pub struct Weak<T: ?Sized> {\n     // FIXME #12808: strange name to try to avoid interfering with\n     // field accesses of the contained type via Deref\n@@ -209,7 +210,8 @@ impl<T: ?Sized> Arc<T> {\n     /// let weak_five = five.downgrade();\n     /// ```\n     #[unstable(feature = \"arc_weak\",\n-               reason = \"Weak pointers may not belong in this module.\")]\n+               reason = \"Weak pointers may not belong in this module.\",\n+               issue = \"27718\")]\n     pub fn downgrade(&self) -> Weak<T> {\n         loop {\n             // This Relaxed is OK because we're checking the value in the CAS\n@@ -234,14 +236,14 @@ impl<T: ?Sized> Arc<T> {\n \n     /// Get the number of weak references to this value.\n     #[inline]\n-    #[unstable(feature = \"arc_counts\")]\n+    #[unstable(feature = \"arc_counts\", issue = \"27718\")]\n     pub fn weak_count(this: &Arc<T>) -> usize {\n         this.inner().weak.load(SeqCst) - 1\n     }\n \n     /// Get the number of strong references to this value.\n     #[inline]\n-    #[unstable(feature = \"arc_counts\")]\n+    #[unstable(feature = \"arc_counts\", issue = \"27718\")]\n     pub fn strong_count(this: &Arc<T>) -> usize {\n         this.inner().strong.load(SeqCst)\n     }\n@@ -349,7 +351,7 @@ impl<T: Clone> Arc<T> {\n     /// let mut_five = Arc::make_unique(&mut five);\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"arc_unique\")]\n+    #[unstable(feature = \"arc_unique\", issue = \"27718\")]\n     pub fn make_unique(this: &mut Arc<T>) -> &mut T {\n         // Note that we hold both a strong reference and a weak reference.\n         // Thus, releasing our strong reference only will not, by itself, cause\n@@ -427,7 +429,7 @@ impl<T: ?Sized> Arc<T> {\n     /// # }\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"arc_unique\")]\n+    #[unstable(feature = \"arc_unique\", issue = \"27718\")]\n     pub fn get_mut(this: &mut Arc<T>) -> Option<&mut T> {\n         if this.is_unique() {\n             // This unsafety is ok because we're guaranteed that the pointer\n@@ -541,7 +543,8 @@ impl<T: ?Sized> Drop for Arc<T> {\n }\n \n #[unstable(feature = \"arc_weak\",\n-           reason = \"Weak pointers may not belong in this module.\")]\n+           reason = \"Weak pointers may not belong in this module.\",\n+           issue = \"27718\")]\n impl<T: ?Sized> Weak<T> {\n     /// Upgrades a weak reference to a strong reference.\n     ///\n@@ -589,7 +592,8 @@ impl<T: ?Sized> Weak<T> {\n }\n \n #[unstable(feature = \"arc_weak\",\n-           reason = \"Weak pointers may not belong in this module.\")]\n+           reason = \"Weak pointers may not belong in this module.\",\n+           issue = \"27718\")]\n impl<T: ?Sized> Clone for Weak<T> {\n     /// Makes a clone of the `Weak<T>`.\n     ///"}, {"sha": "e3019f952fe70b54cc74bfd4fa2a5e7ceff0e92d", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -85,13 +85,15 @@ use core::raw::{TraitObject};\n /// ```\n #[lang = \"exchange_heap\"]\n #[unstable(feature = \"box_heap\",\n-           reason = \"may be renamed; uncertain about custom allocator design\")]\n+           reason = \"may be renamed; uncertain about custom allocator design\",\n+           issue = \"27779\")]\n pub const HEAP: ExchangeHeapSingleton =\n     ExchangeHeapSingleton { _force_singleton: () };\n \n /// This the singleton type used solely for `boxed::HEAP`.\n #[unstable(feature = \"box_heap\",\n-           reason = \"may be renamed; uncertain about custom allocator design\")]\n+           reason = \"may be renamed; uncertain about custom allocator design\",\n+           issue = \"27779\")]\n #[derive(Copy, Clone)]\n pub struct ExchangeHeapSingleton { _force_singleton: () }\n \n@@ -121,7 +123,9 @@ pub struct Box<T: ?Sized>(Unique<T>);\n /// the fact that the `align_of` intrinsic currently requires the\n /// input type to be Sized (which I do not think is strictly\n /// necessary).\n-#[unstable(feature = \"placement_in\", reason = \"placement box design is still being worked out.\")]\n+#[unstable(feature = \"placement_in\",\n+           reason = \"placement box design is still being worked out.\",\n+           issue = \"27779\")]\n pub struct IntermediateBox<T: ?Sized>{\n     ptr: *mut u8,\n     size: usize,\n@@ -222,7 +226,8 @@ impl<T : ?Sized> Box<T> {\n     /// lead to memory problems like double-free, for example if the\n     /// function is called twice on the same raw pointer.\n     #[unstable(feature = \"box_raw\",\n-               reason = \"may be renamed or moved out of Box scope\")]\n+               reason = \"may be renamed or moved out of Box scope\",\n+               issue = \"27768\")]\n     #[inline]\n     // NB: may want to be called from_ptr, see comments on CStr::from_ptr\n     pub unsafe fn from_raw(raw: *mut T) -> Self {\n@@ -245,7 +250,8 @@ impl<T : ?Sized> Box<T> {\n     /// let raw = Box::into_raw(seventeen);\n     /// let boxed_again = unsafe { Box::from_raw(raw) };\n     /// ```\n-    #[unstable(feature = \"box_raw\", reason = \"may be renamed\")]\n+    #[unstable(feature = \"box_raw\", reason = \"may be renamed\",\n+               issue = \"27768\")]\n     #[inline]\n     // NB: may want to be called into_ptr, see comments on CStr::from_ptr\n     pub fn into_raw(b: Box<T>) -> *mut T {\n@@ -470,7 +476,7 @@ impl<I: ExactSizeIterator + ?Sized> ExactSizeIterator for Box<I> {}\n /// }\n /// ```\n #[rustc_paren_sugar]\n-#[unstable(feature = \"fnbox\", reason = \"Newly introduced\")]\n+#[unstable(feature = \"fnbox\", reason = \"Newly introduced\", issue = \"0\")]\n pub trait FnBox<A> {\n     type Output;\n "}, {"sha": "10cb84d1da14d1b8c94259efd30ff4228f26c2e8", "filename": "src/liballoc/heap.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Fliballoc%2Fheap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Fliballoc%2Fheap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fheap.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -12,7 +12,8 @@\n             reason = \"the precise API and guarantees it provides may be tweaked \\\n                       slightly, especially to possibly take into account the \\\n                       types being stored to make room for a future \\\n-                      tracing garbage collector\")]\n+                      tracing garbage collector\",\n+            issue = \"27700\")]\n \n use core::{isize, usize};\n "}, {"sha": "630993d8291201087ccc9c148c5cee9bf8f49784", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -64,7 +64,8 @@\n #![allow(unused_attributes)]\n #![unstable(feature = \"alloc\",\n             reason = \"this library is unlikely to be stabilized in its current \\\n-                      form or name\")]\n+                      form or name\",\n+            issue = \"27783\")]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n        html_root_url = \"https://doc.rust-lang.org/nightly/\",\n@@ -131,7 +132,8 @@ pub mod raw_vec;\n /// Common out-of-memory routine\n #[cold]\n #[inline(never)]\n-#[unstable(feature = \"oom\", reason = \"not a scrutinized interface\")]\n+#[unstable(feature = \"oom\", reason = \"not a scrutinized interface\",\n+           issue = \"27700\")]\n pub fn oom() -> ! {\n     // FIXME(#14674): This really needs to do something other than just abort\n     //                here, but any printing done must be *guaranteed* to not"}, {"sha": "c2d7febf98e5e25d1399870dcd164375e3ec8ee1", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -238,7 +238,7 @@ impl<T> Rc<T> {\n     /// assert_eq!(Rc::try_unwrap(x), Err(Rc::new(4)));\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"rc_unique\")]\n+    #[unstable(feature = \"rc_unique\", issue = \"27718\")]\n     pub fn try_unwrap(rc: Rc<T>) -> Result<T, Rc<T>> {\n         if Rc::is_unique(&rc) {\n             unsafe {\n@@ -271,20 +271,21 @@ impl<T: ?Sized> Rc<T> {\n     /// let weak_five = five.downgrade();\n     /// ```\n     #[unstable(feature = \"rc_weak\",\n-               reason = \"Weak pointers may not belong in this module\")]\n+               reason = \"Weak pointers may not belong in this module\",\n+               issue = \"27718\")]\n     pub fn downgrade(&self) -> Weak<T> {\n         self.inc_weak();\n         Weak { _ptr: self._ptr }\n     }\n \n     /// Get the number of weak references to this value.\n     #[inline]\n-    #[unstable(feature = \"rc_counts\")]\n+    #[unstable(feature = \"rc_counts\", issue = \"27718\")]\n     pub fn weak_count(this: &Rc<T>) -> usize { this.weak() - 1 }\n \n     /// Get the number of strong references to this value.\n     #[inline]\n-    #[unstable(feature = \"rc_counts\")]\n+    #[unstable(feature = \"rc_counts\", issue= \"27718\")]\n     pub fn strong_count(this: &Rc<T>) -> usize { this.strong() }\n \n     /// Returns true if there are no other `Rc` or `Weak<T>` values that share\n@@ -302,7 +303,7 @@ impl<T: ?Sized> Rc<T> {\n     /// assert!(Rc::is_unique(&five));\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"rc_unique\")]\n+    #[unstable(feature = \"rc_unique\", issue = \"27718\")]\n     pub fn is_unique(rc: &Rc<T>) -> bool {\n         Rc::weak_count(rc) == 0 && Rc::strong_count(rc) == 1\n     }\n@@ -327,7 +328,7 @@ impl<T: ?Sized> Rc<T> {\n     /// assert!(Rc::get_mut(&mut x).is_none());\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"rc_unique\")]\n+    #[unstable(feature = \"rc_unique\", issue = \"27718\")]\n     pub fn get_mut(rc: &mut Rc<T>) -> Option<&mut T> {\n         if Rc::is_unique(rc) {\n             let inner = unsafe { &mut **rc._ptr };\n@@ -356,7 +357,7 @@ impl<T: Clone> Rc<T> {\n     /// let mut_five = five.make_unique();\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"rc_unique\")]\n+    #[unstable(feature = \"rc_unique\", issue = \"27718\")]\n     pub fn make_unique(&mut self) -> &mut T {\n         if !Rc::is_unique(self) {\n             *self = Rc::new((**self).clone())\n@@ -653,7 +654,8 @@ impl<T> fmt::Pointer for Rc<T> {\n /// See the [module level documentation](./index.html) for more.\n #[unsafe_no_drop_flag]\n #[unstable(feature = \"rc_weak\",\n-           reason = \"Weak pointers may not belong in this module.\")]\n+           reason = \"Weak pointers may not belong in this module.\",\n+           issue = \"27718\")]\n pub struct Weak<T: ?Sized> {\n     // FIXME #12808: strange names to try to avoid interfering with\n     // field accesses of the contained type via Deref\n@@ -666,7 +668,8 @@ impl<T: ?Sized> !marker::Sync for Weak<T> {}\n impl<T: ?Sized+Unsize<U>, U: ?Sized> CoerceUnsized<Weak<U>> for Weak<T> {}\n \n #[unstable(feature = \"rc_weak\",\n-           reason = \"Weak pointers may not belong in this module.\")]\n+           reason = \"Weak pointers may not belong in this module.\",\n+           issue = \"27718\")]\n impl<T: ?Sized> Weak<T> {\n \n     /// Upgrades a weak reference to a strong reference.\n@@ -746,7 +749,8 @@ impl<T: ?Sized> Drop for Weak<T> {\n }\n \n #[unstable(feature = \"rc_weak\",\n-           reason = \"Weak pointers may not belong in this module.\")]\n+           reason = \"Weak pointers may not belong in this module.\",\n+           issue = \"27718\")]\n impl<T: ?Sized> Clone for Weak<T> {\n \n     /// Makes a clone of the `Weak<T>`."}, {"sha": "4179cbe8a7bac6b905848e0cc0bd1a7a10cc8a9e", "filename": "src/liballoc_jemalloc/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Fliballoc_jemalloc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Fliballoc_jemalloc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_jemalloc%2Flib.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -16,7 +16,8 @@\n #![cfg_attr(not(stage0), allocator)]\n #![unstable(feature = \"alloc_jemalloc\",\n             reason = \"this library is unlikely to be stabilized in its current \\\n-                      form or name\")]\n+                      form or name\",\n+            issue = \"27783\")]\n #![feature(allocator)]\n #![feature(libc)]\n #![feature(no_std)]"}, {"sha": "aff4bea19e0f306636d3622df74bc1962bcc1648", "filename": "src/liballoc_system/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Fliballoc_system%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Fliballoc_system%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_system%2Flib.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -16,7 +16,8 @@\n #![cfg_attr(not(stage0), allocator)]\n #![unstable(feature = \"alloc_system\",\n             reason = \"this library is unlikely to be stabilized in its current \\\n-                      form or name\")]\n+                      form or name\",\n+            issue = \"27783\")]\n #![feature(allocator)]\n #![feature(libc)]\n #![feature(no_std)]"}, {"sha": "332e5abdefb0a7af4da91eea9af7362bbaad0950", "filename": "src/libarena/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibarena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibarena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibarena%2Flib.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -22,7 +22,7 @@\n // Do not remove on snapshot creation. Needed for bootstrap. (Issue #22364)\n #![cfg_attr(stage0, feature(custom_attribute))]\n #![crate_name = \"arena\"]\n-#![unstable(feature = \"rustc_private\")]\n+#![unstable(feature = \"rustc_private\", issue = \"27812\")]\n #![staged_api]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]"}, {"sha": "b817ed6a6d0ebfe2e5fce8df4923ff2cb15f9de5", "filename": "src/libcollections/binary_heap.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbinary_heap.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -547,7 +547,8 @@ impl<T: Ord> BinaryHeap<T> {\n     #[inline]\n     #[unstable(feature = \"drain\",\n                reason = \"matches collection reform specification, \\\n-                         waiting for dust to settle\")]\n+                         waiting for dust to settle\",\n+               issue = \"27711\")]\n     pub fn drain(&mut self) -> Drain<T> {\n         Drain { iter: self.data.drain(..) }\n     }\n@@ -685,7 +686,7 @@ impl<T> DoubleEndedIterator for IntoIter<T> {\n impl<T> ExactSizeIterator for IntoIter<T> {}\n \n /// An iterator that drains a `BinaryHeap`.\n-#[unstable(feature = \"drain\", reason = \"recent addition\")]\n+#[unstable(feature = \"drain\", reason = \"recent addition\", issue = \"27711\")]\n pub struct Drain<'a, T: 'a> {\n     iter: vec::Drain<'a, T>,\n }"}, {"sha": "bfd069152509de024da0c8dcd0035a3bcecf2d01", "filename": "src/libcollections/borrow.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibcollections%2Fborrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibcollections%2Fborrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fborrow.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -344,7 +344,8 @@ impl<'a, B: ?Sized> Hash for Cow<'a, B> where B: Hash + ToOwned\n }\n \n /// Trait for moving into a `Cow`.\n-#[unstable(feature = \"into_cow\", reason = \"may be replaced by `convert::Into`\")]\n+#[unstable(feature = \"into_cow\", reason = \"may be replaced by `convert::Into`\",\n+           issue = \"27735\")]\n pub trait IntoCow<'a, B: ?Sized> where B: ToOwned {\n     /// Moves `self` into `Cow`\n     fn into_cow(self) -> Cow<'a, B>;"}, {"sha": "2835e28a9462c61dc0246a9630d183622ec3cb4f", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -157,6 +157,9 @@ impl<K: Ord, V> BTreeMap<K, V> {\n     /// Makes a new empty BTreeMap with the given B.\n     ///\n     /// B cannot be less than 2.\n+    #[unstable(feature = \"btree_b\",\n+               reason = \"probably want this to be on the type, eventually\",\n+               issue = \"27795\")]\n     pub fn with_b(b: usize) -> BTreeMap<K, V> {\n         assert!(b > 1, \"B must be greater than 1\");\n         BTreeMap {\n@@ -1504,7 +1507,8 @@ impl<K: Ord, V> BTreeMap<K, V> {\n     /// assert_eq!(Some((&5, &\"b\")), map.range(Included(&4), Unbounded).next());\n     /// ```\n     #[unstable(feature = \"btree_range\",\n-               reason = \"matches collection reform specification, waiting for dust to settle\")]\n+               reason = \"matches collection reform specification, waiting for dust to settle\",\n+               issue = \"27787\")]\n     pub fn range<Min: ?Sized + Ord = K, Max: ?Sized + Ord = K>(&self, min: Bound<&Min>,\n                                                                max: Bound<&Max>)\n         -> Range<K, V> where\n@@ -1537,7 +1541,8 @@ impl<K: Ord, V> BTreeMap<K, V> {\n     /// }\n     /// ```\n     #[unstable(feature = \"btree_range\",\n-               reason = \"matches collection reform specification, waiting for dust to settle\")]\n+               reason = \"matches collection reform specification, waiting for dust to settle\",\n+               issue = \"27787\")]\n     pub fn range_mut<Min: ?Sized + Ord = K, Max: ?Sized + Ord = K>(&mut self, min: Bound<&Min>,\n                                                                    max: Bound<&Max>)\n         -> RangeMut<K, V> where"}, {"sha": "a942d6aa6696a79736c560d367d13ee883149e6a", "filename": "src/libcollections/btree/set.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fset.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -101,7 +101,8 @@ impl<T: Ord> BTreeSet<T> {\n     ///\n     /// B cannot be less than 2.\n     #[unstable(feature = \"btree_b\",\n-               reason = \"probably want this to be on the type, eventually\")]\n+               reason = \"probably want this to be on the type, eventually\",\n+               issue = \"27795\")]\n     pub fn with_b(b: usize) -> BTreeSet<T> {\n         BTreeSet { map: BTreeMap::with_b(b) }\n     }\n@@ -154,7 +155,8 @@ impl<T: Ord> BTreeSet<T> {\n     /// assert_eq!(Some(&5), set.range(Included(&4), Unbounded).next());\n     /// ```\n     #[unstable(feature = \"btree_range\",\n-               reason = \"matches collection reform specification, waiting for dust to settle\")]\n+               reason = \"matches collection reform specification, waiting for dust to settle\",\n+               issue = \"27787\")]\n     pub fn range<'a, Min: ?Sized + Ord = T, Max: ?Sized + Ord = T>(&'a self, min: Bound<&Min>,\n                                                                    max: Bound<&Max>)\n         -> Range<'a, T> where"}, {"sha": "7e7e8ba2356e36b6396328f19c0769a3f7d41286", "filename": "src/libcollections/enum_set.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibcollections%2Fenum_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibcollections%2Fenum_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fenum_set.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -15,7 +15,8 @@\n \n #![unstable(feature = \"enumset\",\n             reason = \"matches collection reform specification, \\\n-                      waiting for dust to settle\")]\n+                      waiting for dust to settle\",\n+            issue = \"0\")]\n \n use core::marker;\n use core::fmt;"}, {"sha": "702b01f0e2eeeabd290770b8665081efa4872820", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -20,7 +20,8 @@\n #![crate_type = \"rlib\"]\n #![unstable(feature = \"collections\",\n             reason = \"library is unlikely to be stabilized with the current \\\n-                      layout and name, use std::collections instead\")]\n+                      layout and name, use std::collections instead\",\n+            issue = \"27783\")]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n        html_root_url = \"https://doc.rust-lang.org/nightly/\",\n@@ -110,7 +111,7 @@ mod std {\n }\n \n /// An endpoint of a range of keys.\n-#[unstable(feature = \"collections_bound\")]\n+#[unstable(feature = \"collections_bound\", issue = \"27711\")]\n #[derive(Clone, Copy, Debug, Hash, PartialEq, Eq)]\n pub enum Bound<T> {\n     /// An inclusive bound."}, {"sha": "80ef2067819cfcb60be0a8bb40571926a7634f1c", "filename": "src/libcollections/linked_list.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flinked_list.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -801,7 +801,8 @@ impl<'a, A> IterMut<'a, A> {\n     /// ```\n     #[inline]\n     #[unstable(feature = \"linked_list_extras\",\n-               reason = \"this is probably better handled by a cursor type -- we'll see\")]\n+               reason = \"this is probably better handled by a cursor type -- we'll see\",\n+               issue = \"27794\")]\n     pub fn insert_next(&mut self, elt: A) {\n         self.insert_next_node(box Node::new(elt))\n     }\n@@ -825,7 +826,8 @@ impl<'a, A> IterMut<'a, A> {\n     /// ```\n     #[inline]\n     #[unstable(feature = \"linked_list_extras\",\n-               reason = \"this is probably better handled by a cursor type -- we'll see\")]\n+               reason = \"this is probably better handled by a cursor type -- we'll see\",\n+               issue = \"27794\")]\n     pub fn peek_next(&mut self) -> Option<&mut A> {\n         if self.nelem == 0 {\n             return None"}, {"sha": "e7414bcf323f68604394ffdda00a6dafd214038c", "filename": "src/libcollections/range.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibcollections%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibcollections%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Frange.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -8,7 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![unstable(feature = \"collections_range\", reason = \"was just added\")]\n+#![unstable(feature = \"collections_range\", reason = \"was just added\",\n+            issue = \"27711\")]\n \n //! Range syntax.\n "}, {"sha": "76bdd6dbea1221a69da5864a649ebb97f8233b20", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -214,29 +214,29 @@ impl<T> [T] {\n     }\n \n     /// Returns the first and all the rest of the elements of a slice.\n-    #[unstable(feature = \"slice_splits\", reason = \"new API\")]\n+    #[unstable(feature = \"slice_splits\", reason = \"new API\", issue = \"27742\")]\n     #[inline]\n     pub fn split_first(&self) -> Option<(&T, &[T])> {\n         core_slice::SliceExt::split_first(self)\n     }\n \n     /// Returns the first and all the rest of the elements of a slice.\n-    #[unstable(feature = \"slice_splits\", reason = \"new API\")]\n+    #[unstable(feature = \"slice_splits\", reason = \"new API\", issue = \"27742\")]\n     #[inline]\n     pub fn split_first_mut(&mut self) -> Option<(&mut T, &mut [T])> {\n         core_slice::SliceExt::split_first_mut(self)\n     }\n \n     /// Returns the last and all the rest of the elements of a slice.\n-    #[unstable(feature = \"slice_splits\", reason = \"new API\")]\n+    #[unstable(feature = \"slice_splits\", reason = \"new API\", issue = \"27742\")]\n     #[inline]\n     pub fn split_last(&self) -> Option<(&T, &[T])> {\n         core_slice::SliceExt::split_last(self)\n \n     }\n \n     /// Returns the last and all the rest of the elements of a slice.\n-    #[unstable(feature = \"slice_splits\", since = \"1.3.0\")]\n+    #[unstable(feature = \"slice_splits\", reason = \"new API\", issue = \"27742\")]\n     #[inline]\n     pub fn split_last_mut(&mut self) -> Option<(&mut T, &mut [T])> {\n         core_slice::SliceExt::split_last_mut(self)\n@@ -785,7 +785,7 @@ impl<T> [T] {\n     /// assert!(dst.clone_from_slice(&src2) == 3);\n     /// assert!(dst == [3, 4, 5]);\n     /// ```\n-    #[unstable(feature = \"clone_from_slice\")]\n+    #[unstable(feature = \"clone_from_slice\", issue = \"27750\")]\n     pub fn clone_from_slice(&mut self, src: &[T]) -> usize where T: Clone {\n         core_slice::SliceExt::clone_from_slice(self, src)\n     }\n@@ -811,11 +811,13 @@ impl<T> [T] {\n // Extension traits for slices over specific kinds of data\n ////////////////////////////////////////////////////////////////////////////////\n #[unstable(feature = \"slice_concat_ext\",\n-           reason = \"trait should not have to exist\")]\n+           reason = \"trait should not have to exist\",\n+           issue = \"27747\")]\n /// An extension trait for concatenating slices\n pub trait SliceConcatExt<T: ?Sized> {\n     #[unstable(feature = \"slice_concat_ext\",\n-               reason = \"trait should not have to exist\")]\n+               reason = \"trait should not have to exist\",\n+               issue = \"27747\")]\n     /// The resulting type after concatenation\n     type Output;\n "}, {"sha": "657a3f60448e4de348bc01041f460fd20b8aa4cd", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 31, "deletions": 16, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -105,7 +105,7 @@ impl<S: Borrow<str>> SliceConcatExt<str> for [S] {\n ///\n /// For use with the `std::iter` module.\n #[derive(Clone)]\n-#[unstable(feature = \"str_utf16\")]\n+#[unstable(feature = \"str_utf16\", issue = \"27714\")]\n pub struct Utf16Units<'a> {\n     encoder: Utf16Encoder<Chars<'a>>\n }\n@@ -211,7 +211,8 @@ impl str {\n                reason = \"it is unclear whether this method pulls its weight \\\n                          with the existence of the char_indices iterator or \\\n                          this method may want to be replaced with checked \\\n-                         slicing\")]\n+                         slicing\",\n+               issue = \"27754\")]\n     #[inline]\n     pub fn is_char_boundary(&self, index: usize) -> bool {\n         core_str::StrExt::is_char_boundary(self, index)\n@@ -275,7 +276,8 @@ impl str {\n     /// Takes a bytewise mutable slice from a string.\n     ///\n     /// Same as `slice_unchecked`, but works with `&mut str` instead of `&str`.\n-    #[unstable(feature = \"str_slice_mut\", reason = \"recently added\")]\n+    #[unstable(feature = \"str_slice_mut\", reason = \"recently added\",\n+               issue = \"27793\")]\n     #[inline]\n     pub unsafe fn slice_mut_unchecked(&mut self, begin: usize, end: usize) -> &mut str {\n         core_str::StrExt::slice_mut_unchecked(self, begin, end)\n@@ -329,7 +331,8 @@ impl str {\n     #[unstable(feature = \"str_char\",\n                reason = \"often replaced by char_indices, this method may \\\n                          be removed in favor of just char_at() or eventually \\\n-                         removed altogether\")]\n+                         removed altogether\",\n+               issue = \"27754\")]\n     #[inline]\n     pub fn char_range_at(&self, start: usize) -> CharRange {\n         core_str::StrExt::char_range_at(self, start)\n@@ -388,7 +391,8 @@ impl str {\n     #[unstable(feature = \"str_char\",\n                reason = \"often replaced by char_indices, this method may \\\n                          be removed in favor of just char_at_reverse() or \\\n-                         eventually removed altogether\")]\n+                         eventually removed altogether\",\n+               issue = \"27754\")]\n     #[inline]\n     pub fn char_range_at_reverse(&self, start: usize) -> CharRange {\n         core_str::StrExt::char_range_at_reverse(self, start)\n@@ -416,7 +420,8 @@ impl str {\n                          method may be removed or possibly renamed in the \\\n                          future; it is normally replaced by chars/char_indices \\\n                          iterators or by getting the first char from a \\\n-                         subslice\")]\n+                         subslice\",\n+               issue = \"27754\")]\n     #[inline]\n     pub fn char_at(&self, i: usize) -> char {\n         core_str::StrExt::char_at(self, i)\n@@ -443,7 +448,8 @@ impl str {\n     #[unstable(feature = \"str_char\",\n                reason = \"see char_at for more details, but reverse semantics \\\n                          are also somewhat unclear, especially with which \\\n-                         cases generate panics\")]\n+                         cases generate panics\",\n+               issue = \"27754\")]\n     #[inline]\n     pub fn char_at_reverse(&self, i: usize) -> char {\n         core_str::StrExt::char_at_reverse(self, i)\n@@ -478,7 +484,8 @@ impl str {\n     #[unstable(feature = \"str_char\",\n                reason = \"awaiting conventions about shifting and slices and \\\n                          may not be warranted with the existence of the chars \\\n-                         and/or char_indices iterators\")]\n+                         and/or char_indices iterators\",\n+               issue = \"27754\")]\n     #[inline]\n     pub fn slice_shift_char(&self) -> Option<(char, &str)> {\n         core_str::StrExt::slice_shift_char(self)\n@@ -508,14 +515,16 @@ impl str {\n     /// assert_eq!(b, \" \u8001\u864e L\u00e9opard\");\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"str_split_at\", reason = \"recently added\")]\n+    #[unstable(feature = \"str_split_at\", reason = \"recently added\",\n+               issue = \"27792\")]\n     pub fn split_at(&self, mid: usize) -> (&str, &str) {\n         core_str::StrExt::split_at(self, mid)\n     }\n \n     /// Divide one mutable string slice into two at an index.\n     #[inline]\n-    #[unstable(feature = \"str_split_at\", reason = \"recently added\")]\n+    #[unstable(feature = \"str_split_at\", reason = \"recently added\",\n+               issue = \"27792\")]\n     pub fn split_at_mut(&mut self, mid: usize) -> (&mut str, &mut str) {\n         core_str::StrExt::split_at_mut(self, mid)\n     }\n@@ -652,7 +661,8 @@ impl str {\n \n     /// Returns an iterator of `u16` over the string encoded as UTF-16.\n     #[unstable(feature = \"str_utf16\",\n-               reason = \"this functionality may only be provided by libunicode\")]\n+               reason = \"this functionality may only be provided by libunicode\",\n+               issue = \"27714\")]\n     pub fn utf16_units(&self) -> Utf16Units {\n         Utf16Units { encoder: Utf16Encoder::new(self[..].chars()) }\n     }\n@@ -1186,7 +1196,8 @@ impl str {\n     /// assert_eq!(v, [(0, 3)]); // only the first `aba`\n     /// ```\n     #[unstable(feature = \"str_match_indices\",\n-               reason = \"might have its iterator type changed\")]\n+               reason = \"might have its iterator type changed\",\n+               issue = \"27743\")]\n     // NB: Right now MatchIndices yields `(usize, usize)`, but it would\n     // be more consistent with `matches` and `char_indices` to return `(usize, &str)`\n     pub fn match_indices<'a, P: Pattern<'a>>(&'a self, pat: P) -> MatchIndices<'a, P> {\n@@ -1231,7 +1242,8 @@ impl str {\n     /// assert_eq!(v, [(2, 5)]); // only the last `aba`\n     /// ```\n     #[unstable(feature = \"str_match_indices\",\n-               reason = \"might have its iterator type changed\")]\n+               reason = \"might have its iterator type changed\",\n+               issue = \"27743\")]\n     // NB: Right now RMatchIndices yields `(usize, usize)`, but it would\n     // be more consistent with `rmatches` and `char_indices` to return `(usize, &str)`\n     pub fn rmatch_indices<'a, P: Pattern<'a>>(&'a self, pat: P) -> RMatchIndices<'a, P>\n@@ -1476,21 +1488,24 @@ impl str {\n \n     /// Escapes each char in `s` with `char::escape_default`.\n     #[unstable(feature = \"str_escape\",\n-               reason = \"return type may change to be an iterator\")]\n+               reason = \"return type may change to be an iterator\",\n+               issue = \"27791\")]\n     pub fn escape_default(&self) -> String {\n         self.chars().flat_map(|c| c.escape_default()).collect()\n     }\n \n     /// Escapes each char in `s` with `char::escape_unicode`.\n     #[unstable(feature = \"str_escape\",\n-               reason = \"return type may change to be an iterator\")]\n+               reason = \"return type may change to be an iterator\",\n+               issue = \"27791\")]\n     pub fn escape_unicode(&self) -> String {\n         self.chars().flat_map(|c| c.escape_unicode()).collect()\n     }\n \n     /// Converts the `Box<str>` into a `String` without copying or allocating.\n     #[unstable(feature = \"box_str\",\n-               reason = \"recently added, matches RFC\")]\n+               reason = \"recently added, matches RFC\",\n+               issue = \"27785\")]\n     pub fn into_string(self: Box<str>) -> String {\n         unsafe {\n             let slice = mem::transmute::<Box<str>, Box<[u8]>>(self);"}, {"sha": "5c5f6cace6a4b0cf51386c811bbfe153371c4de0", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -343,7 +343,8 @@ impl String {\n     /// Extracts a string slice containing the entire string.\n     #[inline]\n     #[unstable(feature = \"convert\",\n-               reason = \"waiting on RFC revision\")]\n+               reason = \"waiting on RFC revision\",\n+               issue = \"27729\")]\n     pub fn as_str(&self) -> &str {\n         self\n     }\n@@ -698,7 +699,8 @@ impl String {\n     /// assert_eq!(s, \"\");\n     /// ```\n     #[unstable(feature = \"drain\",\n-               reason = \"recently added, matches RFC\")]\n+               reason = \"recently added, matches RFC\",\n+               issue = \"27711\")]\n     pub fn drain<R>(&mut self, range: R) -> Drain where R: RangeArgument<usize> {\n         // Memory safety\n         //\n@@ -728,7 +730,8 @@ impl String {\n     ///\n     /// Note that this will drop any excess capacity.\n     #[unstable(feature = \"box_str\",\n-               reason = \"recently added, matches RFC\")]\n+               reason = \"recently added, matches RFC\",\n+               issue = \"27785\")]\n     pub fn into_boxed_str(self) -> Box<str> {\n         let slice = self.vec.into_boxed_slice();\n         unsafe { mem::transmute::<Box<[u8]>, Box<str>>(slice) }\n@@ -1019,7 +1022,8 @@ impl ops::DerefMut for String {\n \n /// Error returned from `String::from`\n #[unstable(feature = \"str_parse_error\", reason = \"may want to be replaced with \\\n-                                                  Void if it ever exists\")]\n+                                                  Void if it ever exists\",\n+           issue = \"27734\")]\n #[derive(Copy, Clone, Debug, Eq, PartialEq)]\n pub struct ParseError(());\n \n@@ -1110,15 +1114,17 @@ impl Into<Vec<u8>> for String {\n     }\n }\n \n-#[unstable(feature = \"into_cow\", reason = \"may be replaced by `convert::Into`\")]\n+#[unstable(feature = \"into_cow\", reason = \"may be replaced by `convert::Into`\",\n+           issue= \"27735\")]\n impl IntoCow<'static, str> for String {\n     #[inline]\n     fn into_cow(self) -> Cow<'static, str> {\n         Cow::Owned(self)\n     }\n }\n \n-#[unstable(feature = \"into_cow\", reason = \"may be replaced by `convert::Into`\")]\n+#[unstable(feature = \"into_cow\", reason = \"may be replaced by `convert::Into`\",\n+           issue = \"27735\")]\n impl<'a> IntoCow<'a, str> for &'a str {\n     #[inline]\n     fn into_cow(self) -> Cow<'a, str> {\n@@ -1142,7 +1148,7 @@ impl fmt::Write for String {\n }\n \n /// A draining iterator for `String`.\n-#[unstable(feature = \"drain\", reason = \"recently added\")]\n+#[unstable(feature = \"drain\", reason = \"recently added\", issue = \"27711\")]\n pub struct Drain<'a> {\n     /// Will be used as &'a mut String in the destructor\n     string: *mut String,\n@@ -1157,7 +1163,7 @@ pub struct Drain<'a> {\n unsafe impl<'a> Sync for Drain<'a> {}\n unsafe impl<'a> Send for Drain<'a> {}\n \n-#[unstable(feature = \"drain\", reason = \"recently added\")]\n+#[unstable(feature = \"drain\", reason = \"recently added\", issue = \"27711\")]\n impl<'a> Drop for Drain<'a> {\n     fn drop(&mut self) {\n         unsafe {\n@@ -1171,7 +1177,7 @@ impl<'a> Drop for Drain<'a> {\n     }\n }\n \n-#[unstable(feature = \"drain\", reason = \"recently added\")]\n+#[unstable(feature = \"drain\", reason = \"recently added\", issue = \"27711\")]\n impl<'a> Iterator for Drain<'a> {\n     type Item = char;\n \n@@ -1185,7 +1191,7 @@ impl<'a> Iterator for Drain<'a> {\n     }\n }\n \n-#[unstable(feature = \"drain\", reason = \"recently added\")]\n+#[unstable(feature = \"drain\", reason = \"recently added\", issue = \"27711\")]\n impl<'a> DoubleEndedIterator for Drain<'a> {\n     #[inline]\n     fn next_back(&mut self) -> Option<char> {"}, {"sha": "ec3c36d0c813765e15014fc944bf541dbce437d2", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -384,7 +384,8 @@ impl<T> Vec<T> {\n     /// Equivalent to `&s[..]`.\n     #[inline]\n     #[unstable(feature = \"convert\",\n-               reason = \"waiting on RFC revision\")]\n+               reason = \"waiting on RFC revision\",\n+               issue = \"27729\")]\n     pub fn as_slice(&self) -> &[T] {\n         self\n     }\n@@ -394,7 +395,8 @@ impl<T> Vec<T> {\n     /// Equivalent to `&mut s[..]`.\n     #[inline]\n     #[unstable(feature = \"convert\",\n-               reason = \"waiting on RFC revision\")]\n+               reason = \"waiting on RFC revision\",\n+               issue = \"27729\")]\n     pub fn as_mut_slice(&mut self) -> &mut [T] {\n         &mut self[..]\n     }\n@@ -622,7 +624,8 @@ impl<T> Vec<T> {\n     /// ```\n     #[inline]\n     #[unstable(feature = \"append\",\n-               reason = \"new API, waiting for dust to settle\")]\n+               reason = \"new API, waiting for dust to settle\",\n+               issue = \"27765\")]\n     pub fn append(&mut self, other: &mut Self) {\n         self.reserve(other.len());\n         let len = self.len();\n@@ -661,7 +664,8 @@ impl<T> Vec<T> {\n     /// assert_eq!(u, &[1, 2, 3]);\n     /// ```\n     #[unstable(feature = \"drain\",\n-               reason = \"recently added, matches RFC\")]\n+               reason = \"recently added, matches RFC\",\n+               issue = \"27711\")]\n     pub fn drain<R>(&mut self, range: R) -> Drain<T> where R: RangeArgument<usize> {\n         // Memory safety\n         //\n@@ -762,7 +766,8 @@ impl<T> Vec<T> {\n     /// ```\n     #[inline]\n     #[unstable(feature = \"split_off\",\n-               reason = \"new API, waiting for dust to settle\")]\n+               reason = \"new API, waiting for dust to settle\",\n+               issue = \"27766\")]\n     pub fn split_off(&mut self, at: usize) -> Self {\n         assert!(at <= self.len(), \"`at` out of bounds\");\n \n@@ -804,7 +809,8 @@ impl<T: Clone> Vec<T> {\n     /// assert_eq!(vec, [1, 2]);\n     /// ```\n     #[unstable(feature = \"vec_resize\",\n-               reason = \"matches collection reform specification; waiting for dust to settle\")]\n+               reason = \"matches collection reform specification; waiting for dust to settle\",\n+               issue = \"27790\")]\n     pub fn resize(&mut self, new_len: usize, value: T) {\n         let len = self.len();\n \n@@ -854,7 +860,8 @@ impl<T: Clone> Vec<T> {\n     /// ```\n     #[inline]\n     #[unstable(feature = \"vec_push_all\",\n-               reason = \"likely to be replaced by a more optimized extend\")]\n+               reason = \"likely to be replaced by a more optimized extend\",\n+               issue = \"27744\")]\n     pub fn push_all(&mut self, other: &[T]) {\n         self.reserve(other.len());\n \n@@ -1495,7 +1502,7 @@ impl<T> Drop for IntoIter<T> {\n }\n \n /// A draining iterator for `Vec<T>`.\n-#[unstable(feature = \"drain\", reason = \"recently added\")]\n+#[unstable(feature = \"drain\", reason = \"recently added\", issue = \"27711\")]\n pub struct Drain<'a, T: 'a> {\n     /// Index of tail to preserve\n     tail_start: usize,"}, {"sha": "96e24b412d52528bc91bce74733ca16a725ae954", "filename": "src/libcollections/vec_deque.rs", "status": "modified", "additions": 22, "deletions": 11, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_deque.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -467,7 +467,8 @@ impl<T> VecDeque<T> {\n     /// assert_eq!(Some(&5), buf.get(0));\n     /// ```\n     #[unstable(feature = \"deque_extras\",\n-               reason = \"matches collection reform specification; waiting on panic semantics\")]\n+               reason = \"matches collection reform specification; waiting on panic semantics\",\n+               issue = \"27788\")]\n     pub fn truncate(&mut self, len: usize) {\n         for _ in len..self.len() {\n             self.pop_back();\n@@ -528,7 +529,8 @@ impl<T> VecDeque<T> {\n     /// `VecDeque`.\n     #[inline]\n     #[unstable(feature = \"deque_extras\",\n-               reason = \"matches collection reform specification, waiting for dust to settle\")]\n+               reason = \"matches collection reform specification, waiting for dust to settle\",\n+               issue = \"27788\")]\n     pub fn as_slices(&self) -> (&[T], &[T]) {\n         unsafe {\n             let contiguous = self.is_contiguous();\n@@ -548,7 +550,8 @@ impl<T> VecDeque<T> {\n     /// `VecDeque`.\n     #[inline]\n     #[unstable(feature = \"deque_extras\",\n-               reason = \"matches collection reform specification, waiting for dust to settle\")]\n+               reason = \"matches collection reform specification, waiting for dust to settle\",\n+               issue = \"27788\")]\n     pub fn as_mut_slices(&mut self) -> (&mut [T], &mut [T]) {\n         unsafe {\n             let contiguous = self.is_contiguous();\n@@ -615,7 +618,8 @@ impl<T> VecDeque<T> {\n     /// ```\n     #[inline]\n     #[unstable(feature = \"drain\",\n-               reason = \"matches collection reform specification, waiting for dust to settle\")]\n+               reason = \"matches collection reform specification, waiting for dust to settle\",\n+               issue = \"27711\")]\n     pub fn drain(&mut self) -> Drain<T> {\n         Drain {\n             inner: self,\n@@ -864,7 +868,8 @@ impl<T> VecDeque<T> {\n     /// assert_eq!(buf[1], 2);\n     /// ```\n     #[unstable(feature = \"deque_extras\",\n-               reason = \"the naming of this function may be altered\")]\n+               reason = \"the naming of this function may be altered\",\n+               issue = \"27788\")]\n     pub fn swap_back_remove(&mut self, index: usize) -> Option<T> {\n         let length = self.len();\n         if length > 0 && index < length - 1 {\n@@ -901,7 +906,8 @@ impl<T> VecDeque<T> {\n     /// assert_eq!(buf[1], 1);\n     /// ```\n     #[unstable(feature = \"deque_extras\",\n-               reason = \"the naming of this function may be altered\")]\n+               reason = \"the naming of this function may be altered\",\n+               issue = \"27788\")]\n     pub fn swap_front_remove(&mut self, index: usize) -> Option<T> {\n         let length = self.len();\n         if length > 0 && index < length && index != 0 {\n@@ -1311,7 +1317,8 @@ impl<T> VecDeque<T> {\n     /// ```\n     #[inline]\n     #[unstable(feature = \"split_off\",\n-               reason = \"new API, waiting for dust to settle\")]\n+               reason = \"new API, waiting for dust to settle\",\n+               issue = \"27766\")]\n     pub fn split_off(&mut self, at: usize) -> Self {\n         let len = self.len();\n         assert!(at <= len, \"`at` out of bounds\");\n@@ -1375,7 +1382,8 @@ impl<T> VecDeque<T> {\n     /// ```\n     #[inline]\n     #[unstable(feature = \"append\",\n-               reason = \"new API, waiting for dust to settle\")]\n+               reason = \"new API, waiting for dust to settle\",\n+               issue = \"27765\")]\n     pub fn append(&mut self, other: &mut Self) {\n         // naive impl\n         self.extend(other.drain());\n@@ -1402,7 +1410,8 @@ impl<T> VecDeque<T> {\n     /// assert_eq!(&v[..], &[2, 4]);\n     /// ```\n     #[unstable(feature = \"vec_deque_retain\",\n-               reason = \"new API, waiting for dust to settle\")]\n+               reason = \"new API, waiting for dust to settle\",\n+               issue = \"27767\")]\n     pub fn retain<F>(&mut self, mut f: F) where F: FnMut(&T) -> bool {\n         let len = self.len();\n         let mut del = 0;\n@@ -1441,7 +1450,8 @@ impl<T: Clone> VecDeque<T> {\n     /// }\n     /// ```\n     #[unstable(feature = \"deque_extras\",\n-               reason = \"matches collection reform specification; waiting on panic semantics\")]\n+               reason = \"matches collection reform specification; waiting on panic semantics\",\n+               issue = \"27788\")]\n     pub fn resize(&mut self, new_len: usize, value: T) {\n         let len = self.len();\n \n@@ -1610,7 +1620,8 @@ impl<T> ExactSizeIterator for IntoIter<T> {}\n \n /// A draining VecDeque iterator\n #[unstable(feature = \"drain\",\n-           reason = \"matches collection reform specification, waiting for dust to settle\")]\n+           reason = \"matches collection reform specification, waiting for dust to settle\",\n+           issue = \"27711\")]\n pub struct Drain<'a, T: 'a> {\n     inner: &'a mut VecDeque<T>,\n }"}, {"sha": "899e32d29a65b8ab3855d2fbdd2017609f6a0af4", "filename": "src/libcore/any.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibcore%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibcore%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fany.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -91,7 +91,8 @@ use marker::{Reflect, Sized};\n pub trait Any: Reflect + 'static {\n     /// Gets the `TypeId` of `self`.\n     #[unstable(feature = \"get_type_id\",\n-               reason = \"this method will likely be replaced by an associated static\")]\n+               reason = \"this method will likely be replaced by an associated static\",\n+               issue = \"27745\")]\n     fn get_type_id(&self) -> TypeId;\n }\n "}, {"sha": "85a2d2c23f8cc28d9537cf877b34e7fdecd66e9c", "filename": "src/libcore/array.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibcore%2Farray.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibcore%2Farray.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Farray.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -16,7 +16,8 @@\n \n #![unstable(feature = \"fixed_size_array\",\n             reason = \"traits and impls are better expressed through generic \\\n-                      integer constants\")]\n+                      integer constants\",\n+            issue = \"27778\")]\n \n use clone::Clone;\n use cmp::{PartialEq, Eq, PartialOrd, Ord, Ordering};"}, {"sha": "06eb22278080a366b9a9854cd2d6e63d7d1a9487", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -230,7 +230,7 @@ impl<T:Copy> Cell<T> {\n     /// let uc = unsafe { c.as_unsafe_cell() };\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"as_unsafe_cell\")]\n+    #[unstable(feature = \"as_unsafe_cell\", issue = \"27708\")]\n     pub unsafe fn as_unsafe_cell<'a>(&'a self) -> &'a UnsafeCell<T> {\n         &self.value\n     }\n@@ -278,7 +278,7 @@ pub struct RefCell<T: ?Sized> {\n \n /// An enumeration of values returned from the `state` method on a `RefCell<T>`.\n #[derive(Copy, Clone, PartialEq, Eq, Debug)]\n-#[unstable(feature = \"borrow_state\")]\n+#[unstable(feature = \"borrow_state\", issue = \"27733\")]\n pub enum BorrowState {\n     /// The cell is currently being read, there is at least one active `borrow`.\n     Reading,\n@@ -340,7 +340,7 @@ impl<T: ?Sized> RefCell<T> {\n     ///\n     /// The returned value can be dispatched on to determine if a call to\n     /// `borrow` or `borrow_mut` would succeed.\n-    #[unstable(feature = \"borrow_state\")]\n+    #[unstable(feature = \"borrow_state\", issue = \"27733\")]\n     #[inline]\n     pub fn borrow_state(&self) -> BorrowState {\n         match self.borrow.get() {\n@@ -449,7 +449,7 @@ impl<T: ?Sized> RefCell<T> {\n     ///\n     /// This function is `unsafe` because `UnsafeCell`'s field is public.\n     #[inline]\n-    #[unstable(feature = \"as_unsafe_cell\")]\n+    #[unstable(feature = \"as_unsafe_cell\", issue = \"27708\")]\n     pub unsafe fn as_unsafe_cell<'a>(&'a self) -> &'a UnsafeCell<T> {\n         &self.value\n     }\n@@ -556,7 +556,8 @@ impl<'b, T: ?Sized> Ref<'b, T> {\n     /// with the widespread use of `r.borrow().clone()` to clone the contents of\n     /// a `RefCell`.\n     #[unstable(feature = \"cell_extras\",\n-               reason = \"likely to be moved to a method, pending language changes\")]\n+               reason = \"likely to be moved to a method, pending language changes\",\n+               issue = \"27746\")]\n     #[inline]\n     pub fn clone(orig: &Ref<'b, T>) -> Ref<'b, T> {\n         Ref {\n@@ -585,7 +586,8 @@ impl<'b, T: ?Sized> Ref<'b, T> {\n     /// let b2: Ref<u32> = Ref::map(b1, |t| &t.0);\n     /// assert_eq!(*b2, 5)\n     /// ```\n-    #[unstable(feature = \"cell_extras\", reason = \"recently added\")]\n+    #[unstable(feature = \"cell_extras\", reason = \"recently added\",\n+               issue = \"27746\")]\n     #[inline]\n     pub fn map<U: ?Sized, F>(orig: Ref<'b, T>, f: F) -> Ref<'b, U>\n         where F: FnOnce(&T) -> &U\n@@ -616,7 +618,8 @@ impl<'b, T: ?Sized> Ref<'b, T> {\n     /// let b2: Ref<u32> = Ref::filter_map(b1, |o| o.as_ref().ok()).unwrap();\n     /// assert_eq!(*b2, 5)\n     /// ```\n-    #[unstable(feature = \"cell_extras\", reason = \"recently added\")]\n+    #[unstable(feature = \"cell_extras\", reason = \"recently added\",\n+               issue = \"27746\")]\n     #[inline]\n     pub fn filter_map<U: ?Sized, F>(orig: Ref<'b, T>, f: F) -> Option<Ref<'b, U>>\n         where F: FnOnce(&T) -> Option<&U>\n@@ -653,7 +656,8 @@ impl<'b, T: ?Sized> RefMut<'b, T> {\n     /// }\n     /// assert_eq!(*c.borrow(), (42, 'b'));\n     /// ```\n-    #[unstable(feature = \"cell_extras\", reason = \"recently added\")]\n+    #[unstable(feature = \"cell_extras\", reason = \"recently added\",\n+               issue = \"27746\")]\n     #[inline]\n     pub fn map<U: ?Sized, F>(orig: RefMut<'b, T>, f: F) -> RefMut<'b, U>\n         where F: FnOnce(&mut T) -> &mut U\n@@ -690,7 +694,8 @@ impl<'b, T: ?Sized> RefMut<'b, T> {\n     /// }\n     /// assert_eq!(*c.borrow(), Ok(42));\n     /// ```\n-    #[unstable(feature = \"cell_extras\", reason = \"recently added\")]\n+    #[unstable(feature = \"cell_extras\", reason = \"recently added\",\n+               issue = \"27746\")]\n     #[inline]\n     pub fn filter_map<U: ?Sized, F>(orig: RefMut<'b, T>, f: F) -> Option<RefMut<'b, U>>\n         where F: FnOnce(&mut T) -> Option<&mut U>"}, {"sha": "dfcbfd476bc3fff7c23458c5f40dbc194920458e", "filename": "src/libcore/char.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -91,7 +91,8 @@ pub fn from_u32(i: u32) -> Option<char> {\n /// Converts a `u32` to an `char`, not checking whether it is a valid unicode\n /// codepoint.\n #[inline]\n-#[unstable(feature = \"char_from_unchecked\", reason = \"recently added API\")]\n+#[unstable(feature = \"char_from_unchecked\", reason = \"recently added API\",\n+           issue = \"27781\")]\n pub unsafe fn from_u32_unchecked(i: u32) -> char {\n     transmute(i)\n }\n@@ -139,7 +140,8 @@ pub fn from_digit(num: u32, radix: u32) -> Option<char> {\n #[allow(missing_docs)] // docs in libunicode/u_char.rs\n #[doc(hidden)]\n #[unstable(feature = \"core_char_ext\",\n-           reason = \"the stable interface is `impl char` in later crate\")]\n+           reason = \"the stable interface is `impl char` in later crate\",\n+           issue = \"27701\")]\n pub trait CharExt {\n     fn is_digit(self, radix: u32) -> bool;\n     fn to_digit(self, radix: u32) -> Option<u32>;\n@@ -230,7 +232,8 @@ impl CharExt for char {\n /// and a `None` will be returned.\n #[inline]\n #[unstable(feature = \"char_internals\",\n-           reason = \"this function should not be exposed publicly\")]\n+           reason = \"this function should not be exposed publicly\",\n+           issue = \"0\")]\n #[doc(hidden)]\n pub fn encode_utf8_raw(code: u32, dst: &mut [u8]) -> Option<usize> {\n     // Marked #[inline] to allow llvm optimizing it away\n@@ -264,7 +267,8 @@ pub fn encode_utf8_raw(code: u32, dst: &mut [u8]) -> Option<usize> {\n /// and a `None` will be returned.\n #[inline]\n #[unstable(feature = \"char_internals\",\n-           reason = \"this function should not be exposed publicly\")]\n+           reason = \"this function should not be exposed publicly\",\n+           issue = \"0\")]\n #[doc(hidden)]\n pub fn encode_utf16_raw(mut ch: u32, dst: &mut [u16]) -> Option<usize> {\n     // Marked #[inline] to allow llvm optimizing it away"}, {"sha": "764d12dd9033435b0ddf9619731be5e73bff01a8", "filename": "src/libcore/fmt/builders.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibcore%2Ffmt%2Fbuilders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibcore%2Ffmt%2Fbuilders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fbuilders.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -177,7 +177,8 @@ impl<'a, 'b: 'a> DebugTuple<'a, 'b> {\n     }\n \n     /// Returns the wrapped `Formatter`.\n-    #[unstable(feature = \"debug_builder_formatter\", reason = \"recently added\")]\n+    #[unstable(feature = \"debug_builder_formatter\", reason = \"recently added\",\n+               issue = \"27782\")]\n     pub fn formatter(&mut self) -> &mut fmt::Formatter<'b> {\n         &mut self.fmt\n     }"}, {"sha": "32a5aeda195ef8f0a058ad832d550d34fbc326b8", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -33,7 +33,8 @@ pub use self::builders::{DebugStruct, DebugTuple, DebugSet, DebugList, DebugMap}\n mod num;\n mod builders;\n \n-#[unstable(feature = \"fmt_internals\", reason = \"internal to format_args!\")]\n+#[unstable(feature = \"fmt_internals\", reason = \"internal to format_args!\",\n+           issue = \"0\")]\n #[doc(hidden)]\n pub mod rt {\n     pub mod v1;\n@@ -146,7 +147,8 @@ enum Void {}\n /// compile time it is ensured that the function and the value have the correct\n /// types, and then this struct is used to canonicalize arguments to one type.\n #[derive(Copy)]\n-#[unstable(feature = \"fmt_internals\", reason = \"internal to format_args!\")]\n+#[unstable(feature = \"fmt_internals\", reason = \"internal to format_args!\",\n+           issue = \"0\")]\n #[doc(hidden)]\n pub struct ArgumentV1<'a> {\n     value: &'a Void,\n@@ -166,7 +168,8 @@ impl<'a> ArgumentV1<'a> {\n     }\n \n     #[doc(hidden)]\n-    #[unstable(feature = \"fmt_internals\", reason = \"internal to format_args!\")]\n+    #[unstable(feature = \"fmt_internals\", reason = \"internal to format_args!\",\n+               issue = \"0\")]\n     pub fn new<'b, T>(x: &'b T,\n                       f: fn(&T, &mut Formatter) -> Result) -> ArgumentV1<'b> {\n         unsafe {\n@@ -178,7 +181,8 @@ impl<'a> ArgumentV1<'a> {\n     }\n \n     #[doc(hidden)]\n-    #[unstable(feature = \"fmt_internals\", reason = \"internal to format_args!\")]\n+    #[unstable(feature = \"fmt_internals\", reason = \"internal to format_args!\",\n+               issue = \"0\")]\n     pub fn from_usize(x: &usize) -> ArgumentV1 {\n         ArgumentV1::new(x, ArgumentV1::show_usize)\n     }\n@@ -201,7 +205,8 @@ impl<'a> Arguments<'a> {\n     /// When using the format_args!() macro, this function is used to generate the\n     /// Arguments structure.\n     #[doc(hidden)] #[inline]\n-    #[unstable(feature = \"fmt_internals\", reason = \"internal to format_args!\")]\n+    #[unstable(feature = \"fmt_internals\", reason = \"internal to format_args!\",\n+               issue = \"0\")]\n     pub fn new_v1(pieces: &'a [&'a str],\n                   args: &'a [ArgumentV1<'a>]) -> Arguments<'a> {\n         Arguments {\n@@ -218,7 +223,8 @@ impl<'a> Arguments<'a> {\n     /// created with `argumentusize`. However, failing to do so doesn't cause\n     /// unsafety, but will ignore invalid .\n     #[doc(hidden)] #[inline]\n-    #[unstable(feature = \"fmt_internals\", reason = \"internal to format_args!\")]\n+    #[unstable(feature = \"fmt_internals\", reason = \"internal to format_args!\",\n+               issue = \"0\")]\n     pub fn new_v1_formatted(pieces: &'a [&'a str],\n                             args: &'a [ArgumentV1<'a>],\n                             fmt: &'a [rt::v1::Argument]) -> Arguments<'a> {\n@@ -1077,19 +1083,23 @@ impl<'a> Formatter<'a> {\n     pub fn flags(&self) -> u32 { self.flags }\n \n     /// Character used as 'fill' whenever there is alignment\n-    #[unstable(feature = \"fmt_flags\", reason = \"method was just created\")]\n+    #[unstable(feature = \"fmt_flags\", reason = \"method was just created\",\n+               issue = \"27726\")]\n     pub fn fill(&self) -> char { self.fill }\n \n     /// Flag indicating what form of alignment was requested\n-    #[unstable(feature = \"fmt_flags\", reason = \"method was just created\")]\n+    #[unstable(feature = \"fmt_flags\", reason = \"method was just created\",\n+               issue = \"27726\")]\n     pub fn align(&self) -> Alignment { self.align }\n \n     /// Optionally specified integer width that the output should be\n-    #[unstable(feature = \"fmt_flags\", reason = \"method was just created\")]\n+    #[unstable(feature = \"fmt_flags\", reason = \"method was just created\",\n+               issue = \"27726\")]\n     pub fn width(&self) -> Option<usize> { self.width }\n \n     /// Optionally specified precision for numeric types\n-    #[unstable(feature = \"fmt_flags\", reason = \"method was just created\")]\n+    #[unstable(feature = \"fmt_flags\", reason = \"method was just created\",\n+               issue = \"27726\")]\n     pub fn precision(&self) -> Option<usize> { self.precision }\n \n     /// Creates a `DebugStruct` builder designed to assist with creation of"}, {"sha": "022fe6711bdb3c7379585cf3356eca0a20222d64", "filename": "src/libcore/fmt/num.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibcore%2Ffmt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibcore%2Ffmt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fnum.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -133,7 +133,8 @@ radix! { UpperHex, 16, \"0x\", x @  0 ...  9 => b'0' + x,\n /// A radix with in the range of `2..36`.\n #[derive(Clone, Copy, PartialEq)]\n #[unstable(feature = \"fmt_radix\",\n-           reason = \"may be renamed or move to a different module\")]\n+           reason = \"may be renamed or move to a different module\",\n+           issue = \"27728\")]\n pub struct Radix {\n     base: u8,\n }\n@@ -158,7 +159,8 @@ impl GenericRadix for Radix {\n \n /// A helper type for formatting radixes.\n #[unstable(feature = \"fmt_radix\",\n-           reason = \"may be renamed or move to a different module\")]\n+           reason = \"may be renamed or move to a different module\",\n+           issue = \"27728\")]\n #[derive(Copy, Clone)]\n pub struct RadixFmt<T, R>(T, R);\n \n@@ -173,7 +175,8 @@ pub struct RadixFmt<T, R>(T, R);\n /// assert_eq!(format!(\"{}\", radix(55, 36)), \"1j\".to_string());\n /// ```\n #[unstable(feature = \"fmt_radix\",\n-           reason = \"may be renamed or move to a different module\")]\n+           reason = \"may be renamed or move to a different module\",\n+           issue = \"27728\")]\n pub fn radix<T>(x: T, base: u8) -> RadixFmt<T, Radix> {\n     RadixFmt(x, Radix::new(base))\n }"}, {"sha": "5cbca1ba4c68322d5fe1370bf34a75137c5239db", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -42,7 +42,8 @@\n #![unstable(feature = \"core_intrinsics\",\n             reason = \"intrinsics are unlikely to ever be stabilized, instead \\\n                       they should be used through stabilized interfaces \\\n-                      in the rest of the standard library\")]\n+                      in the rest of the standard library\",\n+            issue = \"0\")]\n #![allow(missing_docs)]\n \n use marker::Sized;"}, {"sha": "ee32999ba8fbac3f03b0e024e69e279e290d1604", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 27, "deletions": 14, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -820,7 +820,8 @@ pub trait Iterator {\n     /// ```\n     #[inline]\n     #[unstable(feature = \"iter_cmp\",\n-               reason = \"may want to produce an Ordering directly; see #15311\")]\n+               reason = \"may want to produce an Ordering directly; see #15311\",\n+               issue = \"27724\")]\n     fn max_by<B: Ord, F>(self, f: F) -> Option<Self::Item> where\n         Self: Sized,\n         F: FnMut(&Self::Item) -> B,\n@@ -849,7 +850,8 @@ pub trait Iterator {\n     /// ```\n     #[inline]\n     #[unstable(feature = \"iter_cmp\",\n-               reason = \"may want to produce an Ordering directly; see #15311\")]\n+               reason = \"may want to produce an Ordering directly; see #15311\",\n+               issue = \"27724\")]\n     fn min_by<B: Ord, F>(self, f: F) -> Option<Self::Item> where\n         Self: Sized,\n         F: FnMut(&Self::Item) -> B,\n@@ -972,7 +974,8 @@ pub trait Iterator {\n     /// let it = a.iter();\n     /// assert_eq!(it.sum::<i32>(), 15);\n     /// ```\n-    #[unstable(feature=\"iter_arith\", reason = \"bounds recently changed\")]\n+    #[unstable(feature = \"iter_arith\", reason = \"bounds recently changed\",\n+               issue = \"27739\")]\n     fn sum<S=<Self as Iterator>::Item>(self) -> S where\n         S: Add<Self::Item, Output=S> + Zero,\n         Self: Sized,\n@@ -994,7 +997,8 @@ pub trait Iterator {\n     /// assert_eq!(factorial(1), 1);\n     /// assert_eq!(factorial(5), 120);\n     /// ```\n-    #[unstable(feature=\"iter_arith\", reason = \"bounds recently changed\")]\n+    #[unstable(feature=\"iter_arith\", reason = \"bounds recently changed\",\n+               issue = \"27739\")]\n     fn product<P=<Self as Iterator>::Item>(self) -> P where\n         P: Mul<Self::Item, Output=P> + One,\n         Self: Sized,\n@@ -2136,8 +2140,9 @@ impl<I: DoubleEndedIterator, F> DoubleEndedIterator for Inspect<I, F>\n /// The `steps_between` function provides a way to efficiently compare\n /// two `Step` objects.\n #[unstable(feature = \"step_trait\",\n-           reason = \"likely to be replaced by finer-grained traits\")]\n-pub trait Step: PartialOrd+Sized {\n+           reason = \"likely to be replaced by finer-grained traits\",\n+           issue = \"27741\")]\n+pub trait Step: PartialOrd + Sized {\n     /// Steps `self` if possible.\n     fn step(&self, by: &Self) -> Option<Self>;\n \n@@ -2247,7 +2252,8 @@ step_impl_no_between!(u64 i64);\n /// parameter is the type being iterated over, while `R` is the range\n /// type (usually one of `std::ops::{Range, RangeFrom}`.\n #[derive(Clone)]\n-#[unstable(feature = \"step_by\", reason = \"recent addition\")]\n+#[unstable(feature = \"step_by\", reason = \"recent addition\",\n+           issue = \"27741\")]\n pub struct StepBy<A, R> {\n     step_by: A,\n     range: R,\n@@ -2266,7 +2272,8 @@ impl<A: Step> RangeFrom<A> {\n     /// ```\n     ///\n     /// This prints all even `u8` values.\n-    #[unstable(feature = \"step_by\", reason = \"recent addition\")]\n+    #[unstable(feature = \"step_by\", reason = \"recent addition\",\n+               issue = \"27741\")]\n     pub fn step_by(self, by: A) -> StepBy<A, Self> {\n         StepBy {\n             step_by: by,\n@@ -2300,7 +2307,8 @@ impl<A: Step> ops::Range<A> {\n     /// 6\n     /// 8\n     /// ```\n-    #[unstable(feature = \"step_by\", reason = \"recent addition\")]\n+    #[unstable(feature = \"step_by\", reason = \"recent addition\",\n+               issue = \"27741\")]\n     pub fn step_by(self, by: A) -> StepBy<A, Self> {\n         StepBy {\n             step_by: by,\n@@ -2332,7 +2340,8 @@ impl<A> Iterator for StepBy<A, RangeFrom<A>> where\n /// An iterator over the range [start, stop]\n #[derive(Clone)]\n #[unstable(feature = \"range_inclusive\",\n-           reason = \"likely to be replaced by range notation and adapters\")]\n+           reason = \"likely to be replaced by range notation and adapters\",\n+           issue = \"27777\")]\n pub struct RangeInclusive<A> {\n     range: ops::Range<A>,\n     done: bool,\n@@ -2341,7 +2350,8 @@ pub struct RangeInclusive<A> {\n /// Returns an iterator over the range [start, stop].\n #[inline]\n #[unstable(feature = \"range_inclusive\",\n-           reason = \"likely to be replaced by range notation and adapters\")]\n+           reason = \"likely to be replaced by range notation and adapters\",\n+           issue = \"27777\")]\n pub fn range_inclusive<A>(start: A, stop: A) -> RangeInclusive<A>\n     where A: Step + One + Clone\n {\n@@ -2352,7 +2362,8 @@ pub fn range_inclusive<A>(start: A, stop: A) -> RangeInclusive<A>\n }\n \n #[unstable(feature = \"range_inclusive\",\n-           reason = \"likely to be replaced by range notation and adapters\")]\n+           reason = \"likely to be replaced by range notation and adapters\",\n+           issue = \"27777\")]\n impl<A> Iterator for RangeInclusive<A> where\n     A: PartialEq + Step + One + Clone,\n     for<'a> &'a A: Add<&'a A, Output = A>\n@@ -2385,7 +2396,8 @@ impl<A> Iterator for RangeInclusive<A> where\n }\n \n #[unstable(feature = \"range_inclusive\",\n-           reason = \"likely to be replaced by range notation and adapters\")]\n+           reason = \"likely to be replaced by range notation and adapters\",\n+           issue = \"27777\")]\n impl<A> DoubleEndedIterator for RangeInclusive<A> where\n     A: PartialEq + Step + One + Clone,\n     for<'a> &'a A: Add<&'a A, Output = A>,\n@@ -2642,7 +2654,8 @@ pub fn once<T>(value: T) -> Once<T> {\n ///\n /// If two sequences are equal up until the point where one ends,\n /// the shorter sequence compares less.\n-#[unstable(feature = \"iter_order\", reason = \"needs review and revision\")]\n+#[unstable(feature = \"iter_order\", reason = \"needs review and revision\",\n+           issue = \"27737\")]\n pub mod order {\n     use cmp;\n     use cmp::{Eq, Ord, PartialOrd, PartialEq};"}, {"sha": "ae85e2712ce8122e42329012d0348ade0b36bc1e", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -51,7 +51,8 @@\n #![crate_name = \"core\"]\n #![unstable(feature = \"core\",\n             reason = \"the libcore library has not yet been scrutinized for \\\n-                      stabilization in terms of structure and naming\")]\n+                      stabilization in terms of structure and naming\",\n+            issue = \"27701\")]\n #![staged_api]\n #![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\","}, {"sha": "95b250064a523b8795b86acf020141ce4c77a592", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -54,7 +54,7 @@ pub trait Sized {\n }\n \n /// Types that can be \"unsized\" to a dynamically sized type.\n-#[unstable(feature = \"unsize\")]\n+#[unstable(feature = \"unsize\", issue = \"27779\")]\n #[lang=\"unsize\"]\n pub trait Unsize<T: ?Sized> {\n     // Empty.\n@@ -406,7 +406,8 @@ mod impls {\n /// [1]: http://en.wikipedia.org/wiki/Parametricity\n #[rustc_reflect_like]\n #[unstable(feature = \"reflect_marker\",\n-           reason = \"requires RFC and more experience\")]\n+           reason = \"requires RFC and more experience\",\n+           issue = \"27749\")]\n #[rustc_on_unimplemented = \"`{Self}` does not implement `Any`; \\\n                             ensure all type parameters are bounded by `Any`\"]\n pub trait Reflect {}"}, {"sha": "48d003c2cffbab672cced53cab0eff87b4fd0e58", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -247,7 +247,7 @@ pub unsafe fn zeroed<T>() -> T {\n /// This function is expected to be deprecated with the transition\n /// to non-zeroing drop.\n #[inline]\n-#[unstable(feature = \"filling_drop\")]\n+#[unstable(feature = \"filling_drop\", issue = \"5016\")]\n pub unsafe fn dropped<T>() -> T {\n     #[inline(always)]\n     unsafe fn dropped_impl<T>() -> T { intrinsics::init_dropped() }\n@@ -510,22 +510,22 @@ macro_rules! repeat_u8_as_u64 {\n // But having the sign bit set is a pain, so 0x1d is probably better.\n //\n // And of course, 0x00 brings back the old world of zero'ing on drop.\n-#[unstable(feature = \"filling_drop\")]\n+#[unstable(feature = \"filling_drop\", issue = \"5016\")]\n #[allow(missing_docs)]\n pub const POST_DROP_U8: u8 = 0x1d;\n-#[unstable(feature = \"filling_drop\")]\n+#[unstable(feature = \"filling_drop\", issue = \"5016\")]\n #[allow(missing_docs)]\n pub const POST_DROP_U32: u32 = repeat_u8_as_u32!(POST_DROP_U8);\n-#[unstable(feature = \"filling_drop\")]\n+#[unstable(feature = \"filling_drop\", issue = \"5016\")]\n #[allow(missing_docs)]\n pub const POST_DROP_U64: u64 = repeat_u8_as_u64!(POST_DROP_U8);\n \n #[cfg(target_pointer_width = \"32\")]\n-#[unstable(feature = \"filling_drop\")]\n+#[unstable(feature = \"filling_drop\", issue = \"5016\")]\n #[allow(missing_docs)]\n pub const POST_DROP_USIZE: usize = POST_DROP_U32 as usize;\n #[cfg(target_pointer_width = \"64\")]\n-#[unstable(feature = \"filling_drop\")]\n+#[unstable(feature = \"filling_drop\", issue = \"5016\")]\n #[allow(missing_docs)]\n pub const POST_DROP_USIZE: usize = POST_DROP_U64 as usize;\n "}, {"sha": "2524e5662aa84beedac4d87b77ae8591b377a885", "filename": "src/libcore/nonzero.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibcore%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibcore%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnonzero.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -10,7 +10,8 @@\n \n //! Exposes the NonZero lang item which provides optimization hints.\n #![unstable(feature = \"nonzero\",\n-            reason = \"needs an RFC to flesh out the design\")]\n+            reason = \"needs an RFC to flesh out the design\",\n+            issue = \"27730\")]\n \n use marker::Sized;\n use ops::{CoerceUnsized, Deref};"}, {"sha": "7c3c384ea93b7f5285fd8380b3a7e076454ece43", "filename": "src/libcore/num/dec2flt/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibcore%2Fnum%2Fdec2flt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibcore%2Fnum%2Fdec2flt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fdec2flt%2Fmod.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -92,7 +92,8 @@\n \n #![doc(hidden)]\n #![unstable(feature = \"dec2flt\",\n-            reason = \"internal routines only exposed for testing\")]\n+            reason = \"internal routines only exposed for testing\",\n+            issue = \"0\")]\n \n use prelude::v1::*;\n use num::ParseFloatError as PFE;"}, {"sha": "91e1d6e4e51cb89ce26e14f3d4c34b3ab80820a3", "filename": "src/libcore/num/flt2dec/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibcore%2Fnum%2Fflt2dec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibcore%2Fnum%2Fflt2dec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fflt2dec%2Fmod.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -127,7 +127,8 @@ functions.\n // only made public for testing. do not expose us.\n #![doc(hidden)]\n #![unstable(feature = \"flt2dec\",\n-            reason = \"internal routines only exposed for testing\")]\n+            reason = \"internal routines only exposed for testing\",\n+            issue = \"0\")]\n \n use prelude::v1::*;\n use i16;"}, {"sha": "61dcbdff0169e326bf3707f4bab3f07f9c60b3d7", "filename": "src/libcore/num/int_macros.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibcore%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibcore%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fint_macros.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -15,13 +15,15 @@ macro_rules! int_module { ($T:ty, $bits:expr) => (\n // FIXME(#11621): Should be deprecated once CTFE is implemented in favour of\n // calling the `mem::size_of` function.\n #[unstable(feature = \"num_bits_bytes\",\n-           reason = \"may want to be an associated function\")]\n+           reason = \"may want to be an associated function\",\n+           issue = \"27753\")]\n #[allow(missing_docs)]\n pub const BITS : usize = $bits;\n // FIXME(#11621): Should be deprecated once CTFE is implemented in favour of\n // calling the `mem::size_of` function.\n #[unstable(feature = \"num_bits_bytes\",\n-           reason = \"may want to be an associated function\")]\n+           reason = \"may want to be an associated function\",\n+           issue = \"27753\")]\n #[allow(missing_docs)]\n pub const BYTES : usize = ($bits / 8);\n "}, {"sha": "086437445dec7e85d779970cd19b1475d3f3f61a", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -51,7 +51,8 @@ pub mod dec2flt;\n /// This trait is intended for use in conjunction with `Add`, as an identity:\n /// `x + T::zero() == x`.\n #[unstable(feature = \"zero_one\",\n-           reason = \"unsure of placement, wants to use associated constants\")]\n+           reason = \"unsure of placement, wants to use associated constants\",\n+           issue = \"27739\")]\n pub trait Zero {\n     /// The \"zero\" (usually, additive identity) for this type.\n     fn zero() -> Self;\n@@ -62,7 +63,8 @@ pub trait Zero {\n /// This trait is intended for use in conjunction with `Mul`, as an identity:\n /// `x * T::one() == x`.\n #[unstable(feature = \"zero_one\",\n-           reason = \"unsure of placement, wants to use associated constants\")]\n+           reason = \"unsure of placement, wants to use associated constants\",\n+           issue = \"27739\")]\n pub trait One {\n     /// The \"one\" (usually, multiplicative identity) for this type.\n     fn one() -> Self;\n@@ -1262,7 +1264,8 @@ pub enum FpCategory {\n /// A built-in floating point number.\n #[doc(hidden)]\n #[unstable(feature = \"core_float\",\n-           reason = \"stable interface is via `impl f{32,64}` in later crates\")]\n+           reason = \"stable interface is via `impl f{32,64}` in later crates\",\n+           issue = \"27702\")]\n pub trait Float: Sized {\n     /// Returns the NaN value.\n     fn nan() -> Self;\n@@ -1525,7 +1528,8 @@ enum IntErrorKind {\n impl ParseIntError {\n     #[unstable(feature = \"int_error_internals\",\n                reason = \"available through Error trait and this method should \\\n-                         not be exposed publicly\")]\n+                         not be exposed publicly\",\n+               issue = \"0\")]\n     #[doc(hidden)]\n     pub fn __description(&self) -> &str {\n         match self.kind {\n@@ -1550,13 +1554,15 @@ impl fmt::Display for ParseIntError {\n pub struct ParseFloatError {\n     #[doc(hidden)]\n     #[unstable(feature = \"float_error_internals\",\n-               reason = \"should not be exposed publicly\")]\n+               reason = \"should not be exposed publicly\",\n+               issue = \"0\")]\n     pub __kind: FloatErrorKind\n }\n \n #[derive(Debug, Clone, PartialEq)]\n #[unstable(feature = \"float_error_internals\",\n-           reason = \"should not be exposed publicly\")]\n+           reason = \"should not be exposed publicly\",\n+           issue = \"0\")]\n #[doc(hidden)]\n pub enum FloatErrorKind {\n     Empty,"}, {"sha": "35e1e988f3ed4300296b84f2c352f1ef2a888bc8", "filename": "src/libcore/num/uint_macros.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibcore%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibcore%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fuint_macros.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -13,11 +13,13 @@\n macro_rules! uint_module { ($T:ty, $T_SIGNED:ty, $bits:expr) => (\n \n #[unstable(feature = \"num_bits_bytes\",\n-           reason = \"may want to be an associated function\")]\n+           reason = \"may want to be an associated function\",\n+           issue = \"27753\")]\n #[allow(missing_docs)]\n pub const BITS : usize = $bits;\n #[unstable(feature = \"num_bits_bytes\",\n-           reason = \"may want to be an associated function\")]\n+           reason = \"may want to be an associated function\",\n+           issue = \"27753\")]\n #[allow(missing_docs)]\n pub const BYTES : usize = ($bits / 8);\n "}, {"sha": "0e8ced0aa19348d055686d8fb15f466f9ef8b27b", "filename": "src/libcore/num/wrapping.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibcore%2Fnum%2Fwrapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibcore%2Fnum%2Fwrapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fwrapping.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -9,7 +9,8 @@\n // except according to those terms.\n \n #![allow(missing_docs)]\n-#![unstable(feature = \"wrapping\", reason = \"may be removed or relocated\")]\n+#![unstable(feature = \"wrapping\", reason = \"may be removed or relocated\",\n+            issue = \"27755\")]\n \n use super::Wrapping;\n "}, {"sha": "6d522ad1fab998e317642f1e47a123c8a4228c02", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -1247,7 +1247,7 @@ mod impls {\n \n /// Trait that indicates that this is a pointer or a wrapper for one,\n /// where unsizing can be performed on the pointee.\n-#[unstable(feature = \"coerce_unsized\")]\n+#[unstable(feature = \"coerce_unsized\", issue = \"27732\")]\n #[lang=\"coerce_unsized\"]\n pub trait CoerceUnsized<T> {\n     // Empty.\n@@ -1293,7 +1293,7 @@ impl<T: ?Sized+Unsize<U>, U: ?Sized> CoerceUnsized<*const U> for *const T {}\n /// If evaluating EXPR fails, then the destructor for the\n /// implementation of Place to clean up any intermediate state\n /// (e.g. deallocate box storage, pop a stack, etc).\n-#[unstable(feature = \"placement_new_protocol\")]\n+#[unstable(feature = \"placement_new_protocol\", issue = \"27779\")]\n pub trait Place<Data: ?Sized> {\n     /// Returns the address where the input value will be written.\n     /// Note that the data at this address is generally uninitialized,\n@@ -1324,7 +1324,7 @@ pub trait Place<Data: ?Sized> {\n /// Values for types implementing this trait usually are transient\n /// intermediate values (e.g. the return value of `Vec::emplace_back`)\n /// or `Copy`, since the `make_place` method takes `self` by value.\n-#[unstable(feature = \"placement_new_protocol\")]\n+#[unstable(feature = \"placement_new_protocol\", issue = \"27779\")]\n pub trait Placer<Data: ?Sized> {\n     /// `Place` is the intermedate agent guarding the\n     /// uninitialized state for `Data`.\n@@ -1335,7 +1335,7 @@ pub trait Placer<Data: ?Sized> {\n }\n \n /// Specialization of `Place` trait supporting `in (PLACE) EXPR`.\n-#[unstable(feature = \"placement_new_protocol\")]\n+#[unstable(feature = \"placement_new_protocol\", issue = \"27779\")]\n pub trait InPlace<Data: ?Sized>: Place<Data> {\n     /// `Owner` is the type of the end value of `in (PLACE) EXPR`\n     ///\n@@ -1372,7 +1372,7 @@ pub trait InPlace<Data: ?Sized>: Place<Data> {\n /// `<T as Boxed>` in turn dictates determines which\n /// implementation of `BoxPlace` to use, namely:\n /// `<<T as Boxed>::Place as BoxPlace>`.\n-#[unstable(feature = \"placement_new_protocol\")]\n+#[unstable(feature = \"placement_new_protocol\", issue = \"27779\")]\n pub trait Boxed {\n     /// The kind of data that is stored in this kind of box.\n     type Data;  /* (`Data` unused b/c cannot yet express below bound.) */\n@@ -1386,7 +1386,7 @@ pub trait Boxed {\n }\n \n /// Specialization of `Place` trait supporting `box EXPR`.\n-#[unstable(feature = \"placement_new_protocol\")]\n+#[unstable(feature = \"placement_new_protocol\", issue = \"27779\")]\n pub trait BoxPlace<Data: ?Sized> : Place<Data> {\n     /// Creates a globally fresh place.\n     fn make_place() -> Self;"}, {"sha": "e64048c82d8392e2308f93bb5e197f1bd76cab5b", "filename": "src/libcore/option.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -287,7 +287,8 @@ impl<T> Option<T> {\n     /// ```\n     #[inline]\n     #[unstable(feature = \"as_slice\",\n-               reason = \"waiting for mut conventions\")]\n+               reason = \"waiting for mut conventions\",\n+               issue = \"27776\")]\n     pub fn as_mut_slice<'r>(&'r mut self) -> &'r mut [T] {\n         match *self {\n             Some(ref mut x) => {\n@@ -689,7 +690,8 @@ impl<T> Option<T> {\n \n     /// Converts from `Option<T>` to `&[T]` (without copying)\n     #[inline]\n-    #[unstable(feature = \"as_slice\", since = \"unsure of the utility here\")]\n+    #[unstable(feature = \"as_slice\", since = \"unsure of the utility here\",\n+               issue = \"27776\")]\n     pub fn as_slice<'a>(&'a self) -> &'a [T] {\n         match *self {\n             Some(ref x) => slice::ref_slice(x),"}, {"sha": "b443ae0636faa979a9319b1636f4800098ff3feb", "filename": "src/libcore/panicking.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibcore%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibcore%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpanicking.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -31,7 +31,8 @@\n #![allow(dead_code, missing_docs)]\n #![unstable(feature = \"core_panic\",\n             reason = \"internal details of the implementation of the `panic!` \\\n-                      and related macros\")]\n+                      and related macros\",\n+            issue = \"0\")]\n \n use fmt;\n "}, {"sha": "fc4e4e668174a89f06b732406e19a72fcf4127b9", "filename": "src/libcore/prelude/v1.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibcore%2Fprelude%2Fv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibcore%2Fprelude%2Fv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprelude%2Fv1.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -16,7 +16,8 @@\n \n #![unstable(feature = \"core_prelude\",\n             reason = \"the libcore prelude has not been scrutinized and \\\n-                      stabilized yet\")]\n+                      stabilized yet\",\n+            issue = \"27701\")]\n \n // Reexported core operators\n pub use marker::{Copy, Send, Sized, Sync};"}, {"sha": "b7479b0c604f3d7fcff3a5ce60fdefdb687e4395", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -127,7 +127,8 @@ pub unsafe fn read<T>(src: *const T) -> T {\n /// (which may be more appropriate than zero).\n #[inline(always)]\n #[unstable(feature = \"filling_drop\",\n-           reason = \"may play a larger role in std::ptr future extensions\")]\n+           reason = \"may play a larger role in std::ptr future extensions\",\n+           issue = \"5016\")]\n pub unsafe fn read_and_drop<T>(dest: *mut T) -> T {\n     // Copy the data out from `dest`:\n     let tmp = read(&*dest);\n@@ -177,7 +178,8 @@ impl<T: ?Sized> *const T {\n     #[unstable(feature = \"ptr_as_ref\",\n                reason = \"Option is not clearly the right return type, and we \\\n                          may want to tie the return lifetime to a borrow of \\\n-                         the raw pointer\")]\n+                         the raw pointer\",\n+               issue = \"27780\")]\n     #[inline]\n     pub unsafe fn as_ref<'a>(&self) -> Option<&'a T> where T: Sized {\n         if self.is_null() {\n@@ -225,7 +227,8 @@ impl<T: ?Sized> *mut T {\n     #[unstable(feature = \"ptr_as_ref\",\n                reason = \"Option is not clearly the right return type, and we \\\n                          may want to tie the return lifetime to a borrow of \\\n-                         the raw pointer\")]\n+                         the raw pointer\",\n+               issue = \"27780\")]\n     #[inline]\n     pub unsafe fn as_ref<'a>(&self) -> Option<&'a T> where T: Sized {\n         if self.is_null() {\n@@ -258,7 +261,8 @@ impl<T: ?Sized> *mut T {\n     /// of the returned pointer.\n     #[unstable(feature = \"ptr_as_ref\",\n                reason = \"return value does not necessarily convey all possible \\\n-                         information\")]\n+                         information\",\n+               issue = \"27780\")]\n     #[inline]\n     pub unsafe fn as_mut<'a>(&self) -> Option<&'a mut T> where T: Sized {\n         if self.is_null() {\n@@ -415,7 +419,8 @@ impl<T: ?Sized> PartialOrd for *mut T {\n /// modified without a unique path to the `Unique` reference. Useful\n /// for building abstractions like `Vec<T>` or `Box<T>`, which\n /// internally use raw pointers to manage the memory that they own.\n-#[unstable(feature = \"unique\", reason = \"needs an RFC to flesh out design\")]\n+#[unstable(feature = \"unique\", reason = \"needs an RFC to flesh out design\",\n+           issue = \"27730\")]\n pub struct Unique<T: ?Sized> {\n     pointer: NonZero<*const T>,\n     // NOTE: this marker has no consequences for variance, but is necessary\n@@ -430,17 +435,17 @@ pub struct Unique<T: ?Sized> {\n /// reference is unaliased. Note that this aliasing invariant is\n /// unenforced by the type system; the abstraction using the\n /// `Unique` must enforce it.\n-#[unstable(feature = \"unique\")]\n+#[unstable(feature = \"unique\", issue = \"27730\")]\n unsafe impl<T: Send + ?Sized> Send for Unique<T> { }\n \n /// `Unique` pointers are `Sync` if `T` is `Sync` because the data they\n /// reference is unaliased. Note that this aliasing invariant is\n /// unenforced by the type system; the abstraction using the\n /// `Unique` must enforce it.\n-#[unstable(feature = \"unique\")]\n+#[unstable(feature = \"unique\", issue = \"27730\")]\n unsafe impl<T: Sync + ?Sized> Sync for Unique<T> { }\n \n-#[unstable(feature = \"unique\")]\n+#[unstable(feature = \"unique\", issue = \"27730\")]\n impl<T: ?Sized> Unique<T> {\n     /// Creates a new `Unique`.\n     pub unsafe fn new(ptr: *mut T) -> Unique<T> {\n@@ -458,7 +463,7 @@ impl<T: ?Sized> Unique<T> {\n     }\n }\n \n-#[unstable(feature = \"unique\")]\n+#[unstable(feature = \"unique\", issue= \"27730\")]\n impl<T:?Sized> Deref for Unique<T> {\n     type Target = *mut T;\n "}, {"sha": "382fd0f3788ced524be6e66de1ae874ecb0997b6", "filename": "src/libcore/raw.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibcore%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibcore%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fraw.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n #![allow(missing_docs)]\n-#![unstable(feature = \"raw\")]\n+#![unstable(feature = \"raw\", issue = \"27751\")]\n \n //! Contains struct definitions for the layout of compiler built-in types.\n //!"}, {"sha": "8300faa5a16fec98f8006cff1a321bbc2643878e", "filename": "src/libcore/result.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -405,7 +405,8 @@ impl<T, E> Result<T, E> {\n \n     /// Converts from `Result<T, E>` to `&[T]` (without copying)\n     #[inline]\n-    #[unstable(feature = \"as_slice\", since = \"unsure of the utility here\")]\n+    #[unstable(feature = \"as_slice\", since = \"unsure of the utility here\",\n+               issue = \"27776\")]\n     pub fn as_slice(&self) -> &[T] {\n         match *self {\n             Ok(ref x) => slice::ref_slice(x),\n@@ -436,7 +437,8 @@ impl<T, E> Result<T, E> {\n     /// ```\n     #[inline]\n     #[unstable(feature = \"as_slice\",\n-               reason = \"waiting for mut conventions\")]\n+               reason = \"waiting for mut conventions\",\n+               issue = \"27776\")]\n     pub fn as_mut_slice(&mut self) -> &mut [T] {\n         match *self {\n             Ok(ref mut x) => slice::mut_ref_slice(x),"}, {"sha": "b06c0241093c3d0bf8e1dcdf312e2836e1f5ae20", "filename": "src/libcore/simd.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibcore%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibcore%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsimd.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -35,7 +35,8 @@\n //! warning.\n \n #![unstable(feature = \"core_simd\",\n-            reason = \"needs an RFC to flesh out the design\")]\n+            reason = \"needs an RFC to flesh out the design\",\n+            issue = \"27731\")]\n \n #![allow(non_camel_case_types)]\n #![allow(missing_docs)]"}, {"sha": "e63eb9f4cf835e1ff07b6e4ba1ebff5475b4c7a4", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -64,7 +64,8 @@ use raw::Slice as RawSlice;\n #[allow(missing_docs)] // docs in libcollections\n #[doc(hidden)]\n #[unstable(feature = \"core_slice_ext\",\n-           reason = \"stable interface provided by `impl [T]` in later crates\")]\n+           reason = \"stable interface provided by `impl [T]` in later crates\",\n+           issue = \"27701\")]\n pub trait SliceExt {\n     type Item;\n \n@@ -797,7 +798,7 @@ impl<'a, T> Iter<'a, T> {\n     ///\n     /// This has the same lifetime as the original slice, and so the\n     /// iterator can continue to be used while this exists.\n-    #[unstable(feature = \"iter_to_slice\")]\n+    #[unstable(feature = \"iter_to_slice\", issue = \"27775\")]\n     pub fn as_slice(&self) -> &'a [T] {\n         make_slice!(self.ptr, self.end)\n     }\n@@ -845,7 +846,7 @@ impl<'a, T> IterMut<'a, T> {\n     /// to consume the iterator. Consider using the `Slice` and\n     /// `SliceMut` implementations for obtaining slices with more\n     /// restricted lifetimes that do not consume the iterator.\n-    #[unstable(feature = \"iter_to_slice\")]\n+    #[unstable(feature = \"iter_to_slice\", issue = \"27775\")]\n     pub fn into_slice(self) -> &'a mut [T] {\n         make_mut_slice!(self.ptr, self.end)\n     }\n@@ -1408,15 +1409,15 @@ impl<'a, T> ExactSizeIterator for ChunksMut<'a, T> {}\n //\n \n /// Converts a pointer to A into a slice of length 1 (without copying).\n-#[unstable(feature = \"ref_slice\")]\n+#[unstable(feature = \"ref_slice\", issue = \"27774\")]\n pub fn ref_slice<'a, A>(s: &'a A) -> &'a [A] {\n     unsafe {\n         from_raw_parts(s, 1)\n     }\n }\n \n /// Converts a pointer to A into a slice of length 1 (without copying).\n-#[unstable(feature = \"ref_slice\")]\n+#[unstable(feature = \"ref_slice\", issue = \"27774\")]\n pub fn mut_ref_slice<'a, A>(s: &'a mut A) -> &'a mut [A] {\n     unsafe {\n         from_raw_parts_mut(s, 1)\n@@ -1478,7 +1479,8 @@ pub unsafe fn from_raw_parts_mut<'a, T>(p: *mut T, len: usize) -> &'a mut [T] {\n //\n \n /// Operations on `[u8]`.\n-#[unstable(feature = \"slice_bytes\", reason = \"needs review\")]\n+#[unstable(feature = \"slice_bytes\", reason = \"needs review\",\n+           issue = \"27740\")]\n pub mod bytes {\n     use ptr;\n     use slice::SliceExt;"}, {"sha": "48118c18029fe16753f7f08d45867c4068dd934b", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -117,7 +117,8 @@ impl Utf8Error {\n     ///\n     /// Starting at the index provided, but not necessarily at it precisely, an\n     /// invalid UTF-8 encoding sequence was found.\n-    #[unstable(feature = \"utf8_error\", reason = \"method just added\")]\n+    #[unstable(feature = \"utf8_error\", reason = \"method just added\",\n+               issue = \"27734\")]\n     pub fn valid_up_to(&self) -> usize { self.valid_up_to }\n }\n \n@@ -190,7 +191,7 @@ fn unwrap_or_0(opt: Option<&u8>) -> u8 {\n \n /// Reads the next code point out of a byte iterator (assuming a\n /// UTF-8-like encoding).\n-#[unstable(feature = \"str_internals\")]\n+#[unstable(feature = \"str_internals\", issue = \"0\")]\n #[inline]\n pub fn next_code_point(bytes: &mut slice::Iter<u8>) -> Option<u32> {\n     // Decode UTF-8\n@@ -737,7 +738,8 @@ generate_pattern_iterators! {\n         struct RMatchIndices;\n     stability:\n         #[unstable(feature = \"str_match_indices\",\n-                   reason = \"type may be removed or have its iterator impl changed\")]\n+                   reason = \"type may be removed or have its iterator impl changed\",\n+                   issue = \"27743\")]\n     internal:\n         MatchIndicesInternal yielding ((usize, usize));\n     delegate double ended;\n@@ -1002,7 +1004,8 @@ static UTF8_CHAR_WIDTH: [u8; 256] = [\n #[unstable(feature = \"str_char\",\n            reason = \"existence of this struct is uncertain as it is frequently \\\n                      able to be replaced with char.len_utf8() and/or \\\n-                     char/char_indices iterators\")]\n+                     char/char_indices iterators\",\n+           issue = \"27754\")]\n pub struct CharRange {\n     /// Current `char`\n     pub ch: char,\n@@ -1220,7 +1223,8 @@ mod traits {\n #[allow(missing_docs)]\n #[doc(hidden)]\n #[unstable(feature = \"core_str_ext\",\n-           reason = \"stable interface provided by `impl str` in later crates\")]\n+           reason = \"stable interface provided by `impl str` in later crates\",\n+           issue = \"27701\")]\n pub trait StrExt {\n     // NB there are no docs here are they're all located on the StrExt trait in\n     // libcollections, not here."}, {"sha": "dca3c5bcec86bf8f3d816396f1500628fcce3d11", "filename": "src/libcore/str/pattern.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibcore%2Fstr%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibcore%2Fstr%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fpattern.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -14,7 +14,8 @@\n //! `ReverseSearcher` and `DoubleEndedSearcher`.\n \n #![unstable(feature = \"pattern\",\n-            reason = \"API not fully fleshed out and ready to be stabilized\")]\n+            reason = \"API not fully fleshed out and ready to be stabilized\",\n+            issue = \"27721\")]\n \n use prelude::v1::*;\n "}, {"sha": "d85f653937c8056e55b645e0449af68d5308e3dc", "filename": "src/libflate/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibflate%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibflate%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibflate%2Flib.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -17,7 +17,7 @@\n // Do not remove on snapshot creation. Needed for bootstrap. (Issue #22364)\n #![cfg_attr(stage0, feature(custom_attribute))]\n #![crate_name = \"flate\"]\n-#![unstable(feature = \"rustc_private\")]\n+#![unstable(feature = \"rustc_private\", issue = \"27812\")]\n #![staged_api]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]"}, {"sha": "694382047308e96d2a64bad12c52d043061f251f", "filename": "src/libfmt_macros/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibfmt_macros%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibfmt_macros%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfmt_macros%2Flib.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -17,7 +17,7 @@\n // Do not remove on snapshot creation. Needed for bootstrap. (Issue #22364)\n #![cfg_attr(stage0, feature(custom_attribute))]\n #![crate_name = \"fmt_macros\"]\n-#![unstable(feature = \"rustc_private\")]\n+#![unstable(feature = \"rustc_private\", issue = \"27812\")]\n #![staged_api]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]"}, {"sha": "ef63f85bb133727066e10c4609afddb999257032", "filename": "src/libgetopts/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibgetopts%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibgetopts%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgetopts%2Flib.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -80,7 +80,8 @@\n #![cfg_attr(stage0, feature(custom_attribute))]\n #![crate_name = \"getopts\"]\n #![unstable(feature = \"rustc_private\",\n-            reason = \"use the crates.io `getopts` library instead\")]\n+            reason = \"use the crates.io `getopts` library instead\",\n+            issue = \"27812\")]\n #![staged_api]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]"}, {"sha": "172ae2746b87dd194220fe3c90acd970aa218c54", "filename": "src/libgraphviz/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibgraphviz%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibgraphviz%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgraphviz%2Flib.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -276,7 +276,7 @@\n // Do not remove on snapshot creation. Needed for bootstrap. (Issue #22364)\n #![cfg_attr(stage0, feature(custom_attribute))]\n #![crate_name = \"graphviz\"]\n-#![unstable(feature = \"rustc_private\")]\n+#![unstable(feature = \"rustc_private\", issue = \"27812\")]\n #![feature(staged_api)]\n #![staged_api]\n #![crate_type = \"rlib\"]"}, {"sha": "08f0b2aa895b025e1c358f33d4ebccef890e9626", "filename": "src/liblibc/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Fliblibc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Fliblibc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc%2Flib.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -12,8 +12,9 @@\n #![cfg_attr(stage0, feature(custom_attribute))]\n #![crate_name = \"libc\"]\n #![crate_type = \"rlib\"]\n-#![cfg_attr(not(feature = \"cargo-build\"), unstable(feature = \"libc\",\n-                                                   reason = \"use `libc` from crates.io\"))]\n+#![cfg_attr(not(feature = \"cargo-build\"),\n+            unstable(feature = \"libc\", reason = \"use `libc` from crates.io\",\n+                     issue = \"27783\"))]\n #![cfg_attr(not(feature = \"cargo-build\"), feature(staged_api, no_std))]\n #![cfg_attr(not(feature = \"cargo-build\"), staged_api)]\n #![cfg_attr(not(feature = \"cargo-build\"), no_std)]"}, {"sha": "2187c1fb7dfa437c8651f67a2db16b886ccfd00c", "filename": "src/liblog/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Fliblog%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Fliblog%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblog%2Flib.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -159,7 +159,8 @@\n #![cfg_attr(stage0, feature(custom_attribute))]\n #![crate_name = \"log\"]\n #![unstable(feature = \"rustc_private\",\n-            reason = \"use the crates.io `log` library instead\")]\n+            reason = \"use the crates.io `log` library instead\",\n+            issue = \"27812\")]\n #![staged_api]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]"}, {"sha": "a72bc389286f68db6b212884e9e3a0c5f5249ace", "filename": "src/librand/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibrand%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibrand%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Flib.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -27,7 +27,8 @@\n #![no_std]\n #![staged_api]\n #![unstable(feature = \"rand\",\n-            reason = \"use `rand` from crates.io\")]\n+            reason = \"use `rand` from crates.io\",\n+            issue = \"27703\")]\n #![feature(core_float)]\n #![feature(core_slice_ext)]\n #![feature(no_std)]"}, {"sha": "af36d45ab573d181f9e7c3360a70ea4412362d0c", "filename": "src/librbml/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibrbml%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibrbml%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrbml%2Flib.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -114,7 +114,7 @@\n // Do not remove on snapshot creation. Needed for bootstrap. (Issue #22364)\n #![cfg_attr(stage0, feature(custom_attribute))]\n #![crate_name = \"rbml\"]\n-#![unstable(feature = \"rustc_private\")]\n+#![unstable(feature = \"rustc_private\", issue = \"27812\")]\n #![staged_api]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]"}, {"sha": "370405d82abdbfb9a5afb113aa801839b4bb2474", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -17,7 +17,7 @@\n // Do not remove on snapshot creation. Needed for bootstrap. (Issue #22364)\n #![cfg_attr(stage0, feature(custom_attribute))]\n #![crate_name = \"rustc\"]\n-#![unstable(feature = \"rustc_private\")]\n+#![unstable(feature = \"rustc_private\", issue = \"27812\")]\n #![staged_api]\n #![crate_type = \"dylib\"]\n #![crate_type = \"rlib\"]"}, {"sha": "9f503c0c33c16488924d0b75d07ea4900fe14dcc", "filename": "src/librustc_back/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibrustc_back%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibrustc_back%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Flib.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -24,7 +24,7 @@\n // Do not remove on snapshot creation. Needed for bootstrap. (Issue #22364)\n #![cfg_attr(stage0, feature(custom_attribute))]\n #![crate_name = \"rustc_back\"]\n-#![unstable(feature = \"rustc_private\")]\n+#![unstable(feature = \"rustc_private\", issue = \"27812\")]\n #![staged_api]\n #![crate_type = \"dylib\"]\n #![crate_type = \"rlib\"]"}, {"sha": "3ee45c3506e1907a1fe355efbd437787764ab9fc", "filename": "src/librustc_bitflags/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibrustc_bitflags%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibrustc_bitflags%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_bitflags%2Flib.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -18,7 +18,7 @@\n #![crate_type = \"rlib\"]\n #![feature(no_std)]\n #![no_std]\n-#![unstable(feature = \"rustc_private\")]\n+#![unstable(feature = \"rustc_private\", issue = \"27812\")]\n \n //! A typesafe bitmask flag generator.\n "}, {"sha": "5157e31b8326db76c17146fe96db310262954b5d", "filename": "src/librustc_borrowck/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibrustc_borrowck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibrustc_borrowck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Flib.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -11,7 +11,7 @@\n // Do not remove on snapshot creation. Needed for bootstrap. (Issue #22364)\n #![cfg_attr(stage0, feature(custom_attribute))]\n #![crate_name = \"rustc_borrowck\"]\n-#![unstable(feature = \"rustc_private\")]\n+#![unstable(feature = \"rustc_private\", issue = \"27812\")]\n #![staged_api]\n #![crate_type = \"dylib\"]\n #![crate_type = \"rlib\"]"}, {"sha": "eb9ed83b2b0dcca842b9f117a93a91781f93b920", "filename": "src/librustc_data_structures/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibrustc_data_structures%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibrustc_data_structures%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Flib.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -19,7 +19,7 @@\n // Do not remove on snapshot creation. Needed for bootstrap. (Issue #22364)\n #![cfg_attr(stage0, feature(custom_attribute))]\n #![crate_name = \"rustc_data_structures\"]\n-#![unstable(feature = \"rustc_private\")]\n+#![unstable(feature = \"rustc_private\", issue = \"27812\")]\n #![crate_type = \"dylib\"]\n #![crate_type = \"rlib\"]\n #![staged_api]"}, {"sha": "1d440af269713f8caf052ac344e049e932bf16dd", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -17,7 +17,7 @@\n // Do not remove on snapshot creation. Needed for bootstrap. (Issue #22364)\n #![cfg_attr(stage0, feature(custom_attribute))]\n #![crate_name = \"rustc_driver\"]\n-#![unstable(feature = \"rustc_private\")]\n+#![unstable(feature = \"rustc_private\", issue = \"27812\")]\n #![staged_api]\n #![crate_type = \"dylib\"]\n #![crate_type = \"rlib\"]"}, {"sha": "d97f3dbb79b8a9dc7134b7777b1ec9c3647ae6a8", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -22,7 +22,7 @@\n // Do not remove on snapshot creation. Needed for bootstrap. (Issue #22364)\n #![cfg_attr(stage0, feature(custom_attribute))]\n #![crate_name = \"rustc_lint\"]\n-#![unstable(feature = \"rustc_private\")]\n+#![unstable(feature = \"rustc_private\", issue = \"27812\")]\n #![staged_api]\n #![crate_type = \"dylib\"]\n #![crate_type = \"rlib\"]"}, {"sha": "aa3a991b8b6d4ffdc87c10777537371fbdf352cd", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -17,7 +17,7 @@\n #![allow(trivial_casts)]\n \n #![crate_name = \"rustc_llvm\"]\n-#![unstable(feature = \"rustc_private\")]\n+#![unstable(feature = \"rustc_private\", issue = \"27812\")]\n #![staged_api]\n #![crate_type = \"dylib\"]\n #![crate_type = \"rlib\"]"}, {"sha": "912da8f61c87aa86ee1968245ca6aaed85eb8fb4", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -11,7 +11,7 @@\n // Do not remove on snapshot creation. Needed for bootstrap. (Issue #22364)\n #![cfg_attr(stage0, feature(custom_attribute))]\n #![crate_name = \"rustc_privacy\"]\n-#![unstable(feature = \"rustc_private\")]\n+#![unstable(feature = \"rustc_private\", issue = \"27812\")]\n #![staged_api]\n #![crate_type = \"dylib\"]\n #![crate_type = \"rlib\"]"}, {"sha": "8127c2dee2cbf712b9548b407ca33ad6be49fa56", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -11,7 +11,7 @@\n // Do not remove on snapshot creation. Needed for bootstrap. (Issue #22364)\n #![cfg_attr(stage0, feature(custom_attribute))]\n #![crate_name = \"rustc_resolve\"]\n-#![unstable(feature = \"rustc_private\")]\n+#![unstable(feature = \"rustc_private\", issue = \"27812\")]\n #![staged_api]\n #![crate_type = \"dylib\"]\n #![crate_type = \"rlib\"]"}, {"sha": "6d91ae6fed639fc1284a54e48d01b5e86d78e7b5", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -17,7 +17,7 @@\n // Do not remove on snapshot creation. Needed for bootstrap. (Issue #22364)\n #![cfg_attr(stage0, feature(custom_attribute))]\n #![crate_name = \"rustc_trans\"]\n-#![unstable(feature = \"rustc_private\")]\n+#![unstable(feature = \"rustc_private\", issue = \"27812\")]\n #![staged_api]\n #![crate_type = \"dylib\"]\n #![crate_type = \"rlib\"]"}, {"sha": "08fd4d8dee5d527dc27eb9dbcb964d820e1e3e96", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -65,7 +65,7 @@ This API is completely unstable and subject to change.\n // Do not remove on snapshot creation. Needed for bootstrap. (Issue #22364)\n #![cfg_attr(stage0, feature(custom_attribute))]\n #![crate_name = \"rustc_typeck\"]\n-#![unstable(feature = \"rustc_private\")]\n+#![unstable(feature = \"rustc_private\", issue = \"27812\")]\n #![staged_api]\n #![crate_type = \"dylib\"]\n #![crate_type = \"rlib\"]"}, {"sha": "03df6921a4f72a3fe5d688ff91247d0f71e25792", "filename": "src/librustc_unicode/char.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibrustc_unicode%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibrustc_unicode%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_unicode%2Fchar.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -295,7 +295,8 @@ impl char {\n     /// assert_eq!(result, None);\n     /// ```\n     #[unstable(feature = \"unicode\",\n-               reason = \"pending decision about Iterator/Writer/Reader\")]\n+               reason = \"pending decision about Iterator/Writer/Reader\",\n+               issue = \"27784\")]\n     #[inline]\n     pub fn encode_utf8(self, dst: &mut [u8]) -> Option<usize> {\n         C::encode_utf8(self, dst)\n@@ -334,7 +335,8 @@ impl char {\n     /// assert_eq!(result, None);\n     /// ```\n     #[unstable(feature = \"unicode\",\n-               reason = \"pending decision about Iterator/Writer/Reader\")]\n+               reason = \"pending decision about Iterator/Writer/Reader\",\n+               issue = \"27784\")]\n     #[inline]\n     pub fn encode_utf16(self, dst: &mut [u16]) -> Option<usize> {\n         C::encode_utf16(self, dst)\n@@ -359,7 +361,8 @@ impl char {\n     /// [UAX #31](http://unicode.org/reports/tr31/#NFKC_Modifications),\n     /// mostly similar to ID_Start but modified for closure under NFKx.\n     #[unstable(feature = \"unicode\",\n-               reason = \"mainly needed for compiler internals\")]\n+               reason = \"mainly needed for compiler internals\",\n+               issue = \"0\")]\n     #[inline]\n     pub fn is_xid_start(self) -> bool { derived_property::XID_Start(self) }\n \n@@ -370,7 +373,8 @@ impl char {\n     /// [UAX #31](http://unicode.org/reports/tr31/#NFKC_Modifications),\n     /// mostly similar to 'ID_Continue' but modified for closure under NFKx.\n     #[unstable(feature = \"unicode\",\n-               reason = \"mainly needed for compiler internals\")]\n+               reason = \"mainly needed for compiler internals\",\n+               issue = \"0\")]\n     #[inline]\n     pub fn is_xid_continue(self) -> bool { derived_property::XID_Continue(self) }\n "}, {"sha": "99284fee2d9d54507b11c0927d125b005a41e267", "filename": "src/librustc_unicode/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibrustc_unicode%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibrustc_unicode%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_unicode%2Flib.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -23,7 +23,7 @@\n // Do not remove on snapshot creation. Needed for bootstrap. (Issue #22364)\n #![cfg_attr(stage0, feature(custom_attribute))]\n #![crate_name = \"rustc_unicode\"]\n-#![unstable(feature = \"unicode\")]\n+#![unstable(feature = \"unicode\", issue = \"27783\")]\n #![staged_api]\n #![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\","}, {"sha": "33902363e0a258a1bb89dfc3ba7f7c8407cd5c2a", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -11,7 +11,7 @@\n // Do not remove on snapshot creation. Needed for bootstrap. (Issue #22364)\n #![cfg_attr(stage0, feature(custom_attribute))]\n #![crate_name = \"rustdoc\"]\n-#![unstable(feature = \"rustdoc\")]\n+#![unstable(feature = \"rustdoc\", issue = \"27812\")]\n #![staged_api]\n #![crate_type = \"dylib\"]\n #![crate_type = \"rlib\"]"}, {"sha": "5b7bec41723cde69df2dc823c2030899dae9ee8a", "filename": "src/libserialize/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibserialize%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibserialize%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Flib.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -18,7 +18,8 @@ Core encoding and decoding interfaces.\n #![cfg_attr(stage0, feature(custom_attribute))]\n #![crate_name = \"serialize\"]\n #![unstable(feature = \"rustc_private\",\n-            reason = \"deprecated in favor of rustc-serialize on crates.io\")]\n+            reason = \"deprecated in favor of rustc-serialize on crates.io\",\n+            issue = \"27812\")]\n #![staged_api]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]"}, {"sha": "b6123264ea8db6914f44c9f9c8a394080ce508a8", "filename": "src/libstd/ascii.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibstd%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibstd%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fascii.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -117,7 +117,7 @@ pub trait AsciiExt {\n     ///\n     /// assert_eq!('A', ascii);\n     /// ```\n-    #[unstable(feature = \"ascii\")]\n+    #[unstable(feature = \"ascii\", issue = \"27809\")]\n     fn make_ascii_uppercase(&mut self);\n \n     /// Converts this type to its ASCII lower case equivalent in-place.\n@@ -137,7 +137,7 @@ pub trait AsciiExt {\n     ///\n     /// assert_eq!('a', ascii);\n     /// ```\n-    #[unstable(feature = \"ascii\")]\n+    #[unstable(feature = \"ascii\", issue = \"27809\")]\n     fn make_ascii_lowercase(&mut self);\n }\n "}, {"sha": "d5638bdac69120531f8130c30928cfffbe9f9858", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -553,7 +553,8 @@ impl<K, V, S> HashMap<K, V, S>\n     /// map.insert(1, 2);\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"hashmap_hasher\", reason = \"hasher stuff is unclear\")]\n+    #[unstable(feature = \"hashmap_hasher\", reason = \"hasher stuff is unclear\",\n+               issue = \"27713\")]\n     pub fn with_hash_state(hash_state: S) -> HashMap<K, V, S> {\n         HashMap {\n             hash_state:    hash_state,\n@@ -583,7 +584,8 @@ impl<K, V, S> HashMap<K, V, S>\n     /// map.insert(1, 2);\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"hashmap_hasher\", reason = \"hasher stuff is unclear\")]\n+    #[unstable(feature = \"hashmap_hasher\", reason = \"hasher stuff is unclear\",\n+               issue = \"27713\")]\n     pub fn with_capacity_and_hash_state(capacity: usize, hash_state: S)\n                                         -> HashMap<K, V, S> {\n         let resize_policy = DefaultResizePolicy::new();\n@@ -998,7 +1000,8 @@ impl<K, V, S> HashMap<K, V, S>\n     /// ```\n     #[inline]\n     #[unstable(feature = \"drain\",\n-               reason = \"matches collection reform specification, waiting for dust to settle\")]\n+               reason = \"matches collection reform specification, waiting for dust to settle\",\n+               issue = \"27711\")]\n     pub fn drain(&mut self) -> Drain<K, V> {\n         fn last_two<A, B, C>((_, b, c): (A, B, C)) -> (B, C) { (b, c) }\n         let last_two: fn((SafeHash, K, V)) -> (K, V) = last_two; // coerce to fn pointer\n@@ -1311,7 +1314,8 @@ impl<'a, K, V> Clone for Values<'a, K, V> {\n \n /// HashMap drain iterator.\n #[unstable(feature = \"drain\",\n-           reason = \"matches collection reform specification, waiting for dust to settle\")]\n+           reason = \"matches collection reform specification, waiting for dust to settle\",\n+           issue = \"27711\")]\n pub struct Drain<'a, K: 'a, V: 'a> {\n     inner: iter::Map<table::Drain<'a, K, V>, fn((SafeHash, K, V)) -> (K, V)>\n }\n@@ -1587,14 +1591,16 @@ impl<K, V, S> Extend<(K, V)> for HashMap<K, V, S>\n /// instances are unlikely to produce the same result for the same values.\n #[derive(Clone)]\n #[unstable(feature = \"hashmap_hasher\",\n-           reason = \"hashing an hash maps may be altered\")]\n+           reason = \"hashing an hash maps may be altered\",\n+           issue = \"27713\")]\n pub struct RandomState {\n     k0: u64,\n     k1: u64,\n }\n \n #[unstable(feature = \"hashmap_hasher\",\n-           reason = \"hashing an hash maps may be altered\")]\n+           reason = \"hashing an hash maps may be altered\",\n+           issue = \"27713\")]\n impl RandomState {\n     /// Constructs a new `RandomState` that is initialized with random keys.\n     #[inline]\n@@ -1606,7 +1612,8 @@ impl RandomState {\n }\n \n #[unstable(feature = \"hashmap_hasher\",\n-           reason = \"hashing an hash maps may be altered\")]\n+           reason = \"hashing an hash maps may be altered\",\n+           issue = \"27713\")]\n impl HashState for RandomState {\n     type Hasher = SipHasher;\n     #[inline]"}, {"sha": "ccad088a2982f959b4eb37693e7be897eeeaff52", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -164,7 +164,8 @@ impl<T, S> HashSet<T, S>\n     /// set.insert(2);\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"hashmap_hasher\", reason = \"hasher stuff is unclear\")]\n+    #[unstable(feature = \"hashmap_hasher\", reason = \"hasher stuff is unclear\",\n+               issue = \"27713\")]\n     pub fn with_hash_state(hash_state: S) -> HashSet<T, S> {\n         HashSet::with_capacity_and_hash_state(INITIAL_CAPACITY, hash_state)\n     }\n@@ -190,7 +191,8 @@ impl<T, S> HashSet<T, S>\n     /// set.insert(1);\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"hashmap_hasher\", reason = \"hasher stuff is unclear\")]\n+    #[unstable(feature = \"hashmap_hasher\", reason = \"hasher stuff is unclear\",\n+               issue = \"27713\")]\n     pub fn with_capacity_and_hash_state(capacity: usize, hash_state: S)\n                                         -> HashSet<T, S> {\n         HashSet {\n@@ -411,7 +413,8 @@ impl<T, S> HashSet<T, S>\n     /// Clears the set, returning all elements in an iterator.\n     #[inline]\n     #[unstable(feature = \"drain\",\n-               reason = \"matches collection reform specification, waiting for dust to settle\")]\n+               reason = \"matches collection reform specification, waiting for dust to settle\",\n+               issue = \"27711\")]\n     pub fn drain(&mut self) -> Drain<T> {\n         fn first<A, B>((a, _): (A, B)) -> A { a }\n         let first: fn((T, ())) -> T = first; // coerce to fn pointer"}, {"sha": "1790eeb00b701d397d4258490d51d566d119137d", "filename": "src/libstd/collections/hash/state.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibstd%2Fcollections%2Fhash%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibstd%2Fcollections%2Fhash%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fstate.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -8,7 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![unstable(feature = \"hashmap_hasher\", reason = \"hasher stuff is unclear\")]\n+#![unstable(feature = \"hashmap_hasher\", reason = \"hasher stuff is unclear\",\n+            issue = \"27713\")]\n \n use clone::Clone;\n use default::Default;"}, {"sha": "4367dda84663e5d586f3470a8242c5f71400086a", "filename": "src/libstd/collections/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibstd%2Fcollections%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibstd%2Fcollections%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fmod.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -410,7 +410,8 @@ pub mod hash_set {\n \n /// Experimental support for providing custom hash algorithms to a HashMap and\n /// HashSet.\n-#[unstable(feature = \"hashmap_hasher\", reason = \"module was recently added\")]\n+#[unstable(feature = \"hashmap_hasher\", reason = \"module was recently added\",\n+           issue = \"27713\")]\n pub mod hash_state {\n     pub use super::hash::state::*;\n }"}, {"sha": "43bfce9b9e9e476ef85f2283f54225457dfbed25", "filename": "src/libstd/dynamic_lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibstd%2Fdynamic_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibstd%2Fdynamic_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdynamic_lib.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -14,7 +14,8 @@\n \n #![unstable(feature = \"dynamic_lib\",\n             reason = \"API has not been scrutinized and is highly likely to \\\n-                      either disappear or change\")]\n+                      either disappear or change\",\n+            issue = \"27810\")]\n #![allow(missing_docs)]\n \n use prelude::v1::*;"}, {"sha": "46d03169b2da36b4312705811a67a6f3ec644c76", "filename": "src/libstd/error.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibstd%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibstd%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ferror.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -78,7 +78,8 @@ pub trait Error: Debug + Display + Reflect {\n     /// Get the `TypeId` of `self`\n     #[doc(hidden)]\n     #[unstable(feature = \"error_type_id\",\n-               reason = \"unclear whether to commit to this public implementation detail\")]\n+               reason = \"unclear whether to commit to this public implementation detail\",\n+               issue = \"27745\")]\n     fn type_id(&self) -> TypeId where Self: 'static {\n         TypeId::of::<Self>()\n     }"}, {"sha": "b973dcef6512ad7fb1585707f6dc8b233878ea72", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -205,7 +205,8 @@ impl CString {\n     /// The only appropriate argument is a pointer obtained by calling\n     /// `into_ptr`. The length of the string will be recalculated\n     /// using the pointer.\n-    #[unstable(feature = \"cstr_memory\", reason = \"recently added\")]\n+    #[unstable(feature = \"cstr_memory\", reason = \"recently added\",\n+               issue = \"27769\")]\n     // NB: may want to be called from_raw, needs to consider CStr::from_ptr,\n     //     Box::from_raw (or whatever it's currently called), and\n     //     slice::from_raw_parts\n@@ -223,7 +224,8 @@ impl CString {\n     /// this string.\n     ///\n     /// Failure to call `from_ptr` will lead to a memory leak.\n-    #[unstable(feature = \"cstr_memory\", reason = \"recently added\")]\n+    #[unstable(feature = \"cstr_memory\", reason = \"recently added\",\n+               issue = \"27769\")]\n     // NB: may want to be called into_raw, see comments on from_ptr\n     pub fn into_ptr(self) -> *const libc::c_char {\n         // It is important that the bytes be sized to fit - we need\n@@ -407,11 +409,13 @@ impl CStr {\n     /// > after a 0-cost cast, but it is planned to alter its definition in the\n     /// > future to perform the length calculation in addition to the UTF-8\n     /// > check whenever this method is called.\n-    #[unstable(feature = \"cstr_to_str\", reason = \"recently added\")]\n+    #[unstable(feature = \"cstr_to_str\", reason = \"recently added\",\n+               issue = \"27764\")]\n     pub fn to_str(&self) -> Result<&str, str::Utf8Error> {\n-        // NB: When CStr is changed to perform the length check in .to_bytes() instead of in\n-        // from_ptr(), it may be worth considering if this should be rewritten to do the UTF-8\n-        // check inline with the length calculation instead of doing it afterwards.\n+        // NB: When CStr is changed to perform the length check in .to_bytes()\n+        // instead of in from_ptr(), it may be worth considering if this should\n+        // be rewritten to do the UTF-8 check inline with the length calculation\n+        // instead of doing it afterwards.\n         str::from_utf8(self.to_bytes())\n     }\n \n@@ -426,7 +430,8 @@ impl CStr {\n     /// > after a 0-cost cast, but it is planned to alter its definition in the\n     /// > future to perform the length calculation in addition to the UTF-8\n     /// > check whenever this method is called.\n-    #[unstable(feature = \"cstr_to_str\", reason = \"recently added\")]\n+    #[unstable(feature = \"cstr_to_str\", reason = \"recently added\",\n+               issue = \"27764\")]\n     pub fn to_string_lossy(&self) -> Cow<str> {\n         String::from_utf8_lossy(self.to_bytes())\n     }"}, {"sha": "751c76b996024576df2d64981fd244928df9440e", "filename": "src/libstd/ffi/os_str.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibstd%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibstd%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fos_str.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -29,9 +29,6 @@\n //! for conversion to/from various other string types. Eventually these types\n //! will offer a full-fledged string API.\n \n-#![unstable(feature = \"os_str\",\n-            reason = \"recently added as part of path/io reform\")]\n-\n use borrow::{Borrow, Cow, ToOwned};\n use ffi::CString;\n use fmt::{self, Debug};\n@@ -74,7 +71,7 @@ impl OsString {\n     ///\n     /// On Windows system, only UTF-8 byte sequences will successfully\n     /// convert; non UTF-8 data will produce `None`.\n-    #[unstable(feature = \"convert\", reason = \"recently added\")]\n+    #[unstable(feature = \"convert\", reason = \"recently added\", issue = \"27704\")]\n     pub fn from_bytes<B>(bytes: B) -> Option<OsString> where B: Into<Vec<u8>> {\n         #[cfg(unix)]\n         fn from_bytes_inner(vec: Vec<u8>) -> Option<OsString> {\n@@ -258,7 +255,7 @@ impl OsStr {\n     /// On Windows systems, this returns `None` unless the `OsStr` is\n     /// valid unicode, in which case it produces UTF-8-encoded\n     /// data. This may entail checking validity.\n-    #[unstable(feature = \"convert\", reason = \"recently added\")]\n+    #[unstable(feature = \"convert\", reason = \"recently added\", issue = \"27704\")]\n     pub fn to_bytes(&self) -> Option<&[u8]> {\n         if cfg!(windows) {\n             self.to_str().map(|s| s.as_bytes())\n@@ -274,7 +271,7 @@ impl OsStr {\n     /// This is a convenience for creating a `CString` from\n     /// `self.to_bytes()`, and inherits the platform behavior of the\n     /// `to_bytes` method.\n-    #[unstable(feature = \"convert\", reason = \"recently added\")]\n+    #[unstable(feature = \"convert\", reason = \"recently added\", issue = \"27704\")]\n     pub fn to_cstring(&self) -> Option<CString> {\n         self.to_bytes().and_then(|b| CString::new(b).ok())\n     }"}, {"sha": "0014391670aa3eb4cd13918a88b41f2064dea8a0", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -88,7 +88,8 @@ pub struct DirEntry(fs_imp::DirEntry);\n #[unstable(feature = \"fs_walk\",\n            reason = \"the precise semantics and defaults for a recursive walk \\\n                      may change and this may end up accounting for files such \\\n-                     as symlinks differently\")]\n+                     as symlinks differently\",\n+           issue = \"27707\")]\n pub struct WalkDir {\n     cur: Option<ReadDir>,\n     stack: Vec<io::Result<ReadDir>>,\n@@ -154,7 +155,8 @@ pub struct FileType(fs_imp::FileType);\n /// A builder used to create directories in various manners.\n ///\n /// This builder also supports platform-specific options.\n-#[unstable(feature = \"dir_builder\", reason = \"recently added API\")]\n+#[unstable(feature = \"dir_builder\", reason = \"recently added API\",\n+           issue = \"27710\")]\n pub struct DirBuilder {\n     inner: fs_imp::DirBuilder,\n     recursive: bool,\n@@ -949,7 +951,8 @@ pub fn read_link<P: AsRef<Path>>(path: P) -> io::Result<PathBuf> {\n \n /// Returns the canonical form of a path with all intermediate components\n /// normalized and symbolic links resolved.\n-#[unstable(feature = \"fs_canonicalize\", reason = \"recently added API\")]\n+#[unstable(feature = \"fs_canonicalize\", reason = \"recently added API\",\n+           issue = \"27706\")]\n pub fn canonicalize<P: AsRef<Path>>(path: P) -> io::Result<PathBuf> {\n     fs_imp::canonicalize(path.as_ref())\n }\n@@ -1107,13 +1110,14 @@ pub fn read_dir<P: AsRef<Path>>(path: P) -> io::Result<ReadDir> {\n #[unstable(feature = \"fs_walk\",\n            reason = \"the precise semantics and defaults for a recursive walk \\\n                      may change and this may end up accounting for files such \\\n-                     as symlinks differently\")]\n+                     as symlinks differently\",\n+           issue = \"27707\")]\n pub fn walk_dir<P: AsRef<Path>>(path: P) -> io::Result<WalkDir> {\n     let start = try!(read_dir(path));\n     Ok(WalkDir { cur: Some(start), stack: Vec::new() })\n }\n \n-#[unstable(feature = \"fs_walk\")]\n+#[unstable(feature = \"fs_walk\", issue = \"27707\")]\n impl Iterator for WalkDir {\n     type Item = io::Result<DirEntry>;\n \n@@ -1146,7 +1150,8 @@ impl Iterator for WalkDir {\n #[unstable(feature = \"path_ext\",\n            reason = \"The precise set of methods exposed on this trait may \\\n                      change and some methods may be removed.  For stable code, \\\n-                     see the std::fs::metadata function.\")]\n+                     see the std::fs::metadata function.\",\n+           issue = \"27725\")]\n pub trait PathExt {\n     /// Gets information on the file, directory, etc at this path.\n     ///\n@@ -1242,7 +1247,8 @@ pub fn set_permissions<P: AsRef<Path>>(path: P, perm: Permissions)\n     fs_imp::set_perm(path.as_ref(), perm.0)\n }\n \n-#[unstable(feature = \"dir_builder\", reason = \"recently added API\")]\n+#[unstable(feature = \"dir_builder\", reason = \"recently added API\",\n+           issue = \"27710\")]\n impl DirBuilder {\n     /// Creates a new set of options with default mode/security settings for all\n     /// platforms and also non-recursive."}, {"sha": "17a72e0f1b5e5b7d00321cf88c6a8856e74d3718", "filename": "src/libstd/io/error.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibstd%2Fio%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibstd%2Fio%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ferror.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -150,7 +150,8 @@ pub enum ErrorKind {\n     /// Any I/O error not part of this list.\n     #[unstable(feature = \"io_error_internals\",\n                reason = \"better expressed through extensible enums that this \\\n-                         enum cannot be exhaustively matched against\")]\n+                         enum cannot be exhaustively matched against\",\n+               issue = \"0\")]\n     #[doc(hidden)]\n     __Nonexhaustive,\n }"}, {"sha": "5ad5d0fa4d592e313c88bedef06170c8c5fe9f1a", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 24, "deletions": 12, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -647,7 +647,8 @@ pub trait Read {\n     /// ```\n     #[unstable(feature = \"io\", reason = \"the semantics of a partial read/write \\\n                                          of where errors happen is currently \\\n-                                         unclear and may change\")]\n+                                         unclear and may change\",\n+               issue = \"27802\")]\n     fn chars(self) -> Chars<Self> where Self: Sized {\n         Chars { inner: self }\n     }\n@@ -754,7 +755,8 @@ pub trait Read {\n     /// ```\n     #[unstable(feature = \"io\", reason = \"the semantics of a partial read/write \\\n                                          of where errors happen is currently \\\n-                                         unclear and may change\")]\n+                                         unclear and may change\",\n+               issue = \"27802\")]\n     fn tee<W: Write>(self, out: W) -> Tee<Self, W> where Self: Sized {\n         Tee { reader: self, writer: out }\n     }\n@@ -1016,7 +1018,8 @@ pub trait Write {\n     /// ```\n     #[unstable(feature = \"io\", reason = \"the semantics of a partial read/write \\\n                                          of where errors happen is currently \\\n-                                         unclear and may change\")]\n+                                         unclear and may change\",\n+               issue = \"27802\")]\n     fn broadcast<W: Write>(self, other: W) -> Broadcast<Self, W>\n         where Self: Sized\n     {\n@@ -1401,13 +1404,15 @@ pub trait BufRead: Read {\n /// writer. Please see the documentation of `broadcast()` for more details.\n ///\n /// [broadcast]: trait.Write.html#method.broadcast\n-#[unstable(feature = \"io\", reason = \"awaiting stability of Write::broadcast\")]\n+#[unstable(feature = \"io\", reason = \"awaiting stability of Write::broadcast\",\n+           issue = \"27802\")]\n pub struct Broadcast<T, U> {\n     first: T,\n     second: U,\n }\n \n-#[unstable(feature = \"io\", reason = \"awaiting stability of Write::broadcast\")]\n+#[unstable(feature = \"io\", reason = \"awaiting stability of Write::broadcast\",\n+           issue = \"27802\")]\n impl<T: Write, U: Write> Write for Broadcast<T, U> {\n     fn write(&mut self, data: &[u8]) -> Result<usize> {\n         let n = try!(self.first.write(data));\n@@ -1509,13 +1514,15 @@ impl<T: BufRead> BufRead for Take<T> {\n /// Please see the documentation of `tee()` for more details.\n ///\n /// [tee]: trait.Read.html#method.tee\n-#[unstable(feature = \"io\", reason = \"awaiting stability of Read::tee\")]\n+#[unstable(feature = \"io\", reason = \"awaiting stability of Read::tee\",\n+           issue = \"27802\")]\n pub struct Tee<R, W> {\n     reader: R,\n     writer: W,\n }\n \n-#[unstable(feature = \"io\", reason = \"awaiting stability of Read::tee\")]\n+#[unstable(feature = \"io\", reason = \"awaiting stability of Read::tee\",\n+           issue = \"27802\")]\n impl<R: Read, W: Write> Read for Tee<R, W> {\n     fn read(&mut self, buf: &mut [u8]) -> Result<usize> {\n         let n = try!(self.reader.read(buf));\n@@ -1556,15 +1563,17 @@ impl<R: Read> Iterator for Bytes<R> {\n /// Please see the documentation of `chars()` for more details.\n ///\n /// [chars]: trait.Read.html#method.chars\n-#[unstable(feature = \"io\", reason = \"awaiting stability of Read::chars\")]\n+#[unstable(feature = \"io\", reason = \"awaiting stability of Read::chars\",\n+           issue = \"27802\")]\n pub struct Chars<R> {\n     inner: R,\n }\n \n /// An enumeration of possible errors that can be generated from the `Chars`\n /// adapter.\n #[derive(Debug)]\n-#[unstable(feature = \"io\", reason = \"awaiting stability of Read::chars\")]\n+#[unstable(feature = \"io\", reason = \"awaiting stability of Read::chars\",\n+           issue = \"27802\")]\n pub enum CharsError {\n     /// Variant representing that the underlying stream was read successfully\n     /// but it did not contain valid utf8 data.\n@@ -1574,7 +1583,8 @@ pub enum CharsError {\n     Other(Error),\n }\n \n-#[unstable(feature = \"io\", reason = \"awaiting stability of Read::chars\")]\n+#[unstable(feature = \"io\", reason = \"awaiting stability of Read::chars\",\n+           issue = \"27802\")]\n impl<R: Read> Iterator for Chars<R> {\n     type Item = result::Result<char, CharsError>;\n \n@@ -1606,7 +1616,8 @@ impl<R: Read> Iterator for Chars<R> {\n     }\n }\n \n-#[unstable(feature = \"io\", reason = \"awaiting stability of Read::chars\")]\n+#[unstable(feature = \"io\", reason = \"awaiting stability of Read::chars\",\n+           issue = \"27802\")]\n impl std_error::Error for CharsError {\n     fn description(&self) -> &str {\n         match *self {\n@@ -1622,7 +1633,8 @@ impl std_error::Error for CharsError {\n     }\n }\n \n-#[unstable(feature = \"io\", reason = \"awaiting stability of Read::chars\")]\n+#[unstable(feature = \"io\", reason = \"awaiting stability of Read::chars\",\n+           issue = \"27802\")]\n impl fmt::Display for CharsError {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {"}, {"sha": "e60bdcf0ec64a528ee2cf452c5f333944c80db25", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -531,7 +531,8 @@ impl<'a> Write for StderrLock<'a> {\n /// output handle is to the process's stderr stream.\n #[unstable(feature = \"set_stdio\",\n            reason = \"this function may disappear completely or be replaced \\\n-                     with a more general mechanism\")]\n+                     with a more general mechanism\",\n+           issue = \"0\")]\n #[doc(hidden)]\n pub fn set_panic(sink: Box<Write + Send>) -> Option<Box<Write + Send>> {\n     use panicking::LOCAL_STDERR;\n@@ -554,7 +555,8 @@ pub fn set_panic(sink: Box<Write + Send>) -> Option<Box<Write + Send>> {\n /// output handle is to the process's stdout stream.\n #[unstable(feature = \"set_stdio\",\n            reason = \"this function may disappear completely or be replaced \\\n-                     with a more general mechanism\")]\n+                     with a more general mechanism\",\n+           issue = \"0\")]\n #[doc(hidden)]\n pub fn set_print(sink: Box<Write + Send>) -> Option<Box<Write + Send>> {\n     use mem;\n@@ -567,7 +569,8 @@ pub fn set_print(sink: Box<Write + Send>) -> Option<Box<Write + Send>> {\n }\n \n #[unstable(feature = \"print\",\n-           reason = \"implementation detail which may disappear or be replaced at any time\")]\n+           reason = \"implementation detail which may disappear or be replaced at any time\",\n+           issue = \"0\")]\n #[doc(hidden)]\n pub fn _print(args: fmt::Arguments) {\n     let result = LOCAL_STDOUT.with(|s| {"}, {"sha": "655fa04c2644ee51022ed00f0f8ca08e7d5abd96", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -398,7 +398,7 @@ mod rand;\n // but it may be stabilized long-term. As a result we're exposing a hidden,\n // unstable module so we can get our build working.\n #[doc(hidden)]\n-#[unstable(feature = \"rand\")]\n+#[unstable(feature = \"rand\", issue = \"0\")]\n pub mod __rand {\n     pub use rand::{thread_rng, ThreadRng, Rng};\n }"}, {"sha": "cf0ede30dcc7c8e86aba1fabc837e71e7834aa1b", "filename": "src/libstd/net/addr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibstd%2Fnet%2Faddr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibstd%2Fnet%2Faddr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Faddr.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -48,7 +48,7 @@ pub struct SocketAddrV6 { inner: libc::sockaddr_in6 }\n \n impl SocketAddr {\n     /// Creates a new socket address from the (ip, port) pair.\n-    #[unstable(feature = \"ip_addr\", reason = \"recent addition\")]\n+    #[unstable(feature = \"ip_addr\", reason = \"recent addition\", issue = \"27801\")]\n     pub fn new(ip: IpAddr, port: u16) -> SocketAddr {\n         match ip {\n             IpAddr::V4(a) => SocketAddr::V4(SocketAddrV4::new(a, port)),\n@@ -57,7 +57,7 @@ impl SocketAddr {\n     }\n \n     /// Returns the IP address associated with this socket address.\n-    #[unstable(feature = \"ip_addr\", reason = \"recent addition\")]\n+    #[unstable(feature = \"ip_addr\", reason = \"recent addition\", issue = \"27801\")]\n     pub fn ip(&self) -> IpAddr {\n         match *self {\n             SocketAddr::V4(ref a) => IpAddr::V4(*a.ip()),"}, {"sha": "09aea50cfbe9e00e896ced9161a1b2af0a54826f", "filename": "src/libstd/net/ip.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibstd%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibstd%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fip.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -10,7 +10,8 @@\n \n #![unstable(feature = \"ip\", reason = \"extra functionality has not been \\\n                                       scrutinized to the level that it should \\\n-                                      be stable\")]\n+                                      be stable\",\n+            issue = \"27709\")]\n \n use prelude::v1::*;\n \n@@ -22,7 +23,7 @@ use sys_common::{AsInner, FromInner};\n use net::{hton, ntoh};\n \n /// An IP address, either a IPv4 or IPv6 address.\n-#[unstable(feature = \"ip_addr\", reason = \"recent addition\")]\n+#[unstable(feature = \"ip_addr\", reason = \"recent addition\", issue = \"27801\")]\n #[derive(Copy, Clone, Eq, PartialEq, Debug, Hash, PartialOrd, Ord)]\n pub enum IpAddr {\n     /// Representation of an IPv4 address."}, {"sha": "8a02d37c89be86abf655ea3581eeeefc4651f46b", "filename": "src/libstd/net/mod.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibstd%2Fnet%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibstd%2Fnet%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fmod.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -84,12 +84,14 @@ fn each_addr<A: ToSocketAddrs, F, T>(addr: A, mut f: F) -> io::Result<T>\n /// An iterator over `SocketAddr` values returned from a host lookup operation.\n #[unstable(feature = \"lookup_host\", reason = \"unsure about the returned \\\n                                               iterator and returning socket \\\n-                                              addresses\")]\n+                                              addresses\",\n+           issue = \"27705\")]\n pub struct LookupHost(net_imp::LookupHost);\n \n #[unstable(feature = \"lookup_host\", reason = \"unsure about the returned \\\n                                               iterator and returning socket \\\n-                                              addresses\")]\n+                                              addresses\",\n+           issue = \"27705\")]\n impl Iterator for LookupHost {\n     type Item = io::Result<SocketAddr>;\n     fn next(&mut self) -> Option<io::Result<SocketAddr>> { self.0.next() }\n@@ -116,7 +118,8 @@ impl Iterator for LookupHost {\n /// ```\n #[unstable(feature = \"lookup_host\", reason = \"unsure about the returned \\\n                                               iterator and returning socket \\\n-                                              addresses\")]\n+                                              addresses\",\n+           issue = \"27705\")]\n pub fn lookup_host(host: &str) -> io::Result<LookupHost> {\n     net_imp::lookup_host(host).map(LookupHost)\n }\n@@ -126,7 +129,8 @@ pub fn lookup_host(host: &str) -> io::Result<LookupHost> {\n /// This function may perform a DNS query to resolve `addr` and may also inspect\n /// system configuration to resolve the specified address. If the address\n /// cannot be resolved, it is returned in string format.\n-#[unstable(feature = \"lookup_addr\", reason = \"recent addition\")]\n+#[unstable(feature = \"lookup_addr\", reason = \"recent addition\",\n+           issue = \"27705\")]\n pub fn lookup_addr(addr: &IpAddr) -> io::Result<String> {\n     net_imp::lookup_addr(addr)\n }"}, {"sha": "5467a8575ffff69253a9ac2d493e49fd58f04b95", "filename": "src/libstd/net/tcp.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibstd%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibstd%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Ftcp.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![unstable(feature = \"tcp\", reason = \"remaining functions have not been \\\n-                                       scrutinized enough to be stabilized\")]\n-\n use prelude::v1::*;\n use io::prelude::*;\n \n@@ -133,7 +130,8 @@ impl TcpStream {\n     /// If the value specified is `None`, then `read` calls will block\n     /// indefinitely. It is an error to pass the zero `Duration` to this\n     /// method.\n-    #[unstable(feature = \"socket_timeout\", reason = \"RFC 1047 - recently added\")]\n+    #[unstable(feature = \"socket_timeout\", reason = \"RFC 1047 - recently added\",\n+               issue = \"27773\")]\n     pub fn set_read_timeout(&self, dur: Option<Duration>) -> io::Result<()> {\n         self.0.set_read_timeout(dur)\n     }\n@@ -143,7 +141,8 @@ impl TcpStream {\n     /// If the value specified is `None`, then `write` calls will block\n     /// indefinitely. It is an error to pass the zero `Duration` to this\n     /// method.\n-    #[unstable(feature = \"socket_timeout\", reason = \"RFC 1047 - recently added\")]\n+    #[unstable(feature = \"socket_timeout\", reason = \"RFC 1047 - recently added\",\n+               issue = \"27773\")]\n     pub fn set_write_timeout(&self, dur: Option<Duration>) -> io::Result<()> {\n         self.0.set_write_timeout(dur)\n     }\n@@ -155,7 +154,8 @@ impl TcpStream {\n     /// # Note\n     ///\n     /// Some platforms do not provide access to the current timeout.\n-    #[unstable(feature = \"socket_timeout\", reason = \"RFC 1047 - recently added\")]\n+    #[unstable(feature = \"socket_timeout\", reason = \"RFC 1047 - recently added\",\n+               issue = \"27773\")]\n     pub fn read_timeout(&self) -> io::Result<Option<Duration>> {\n         self.0.read_timeout()\n     }\n@@ -167,7 +167,8 @@ impl TcpStream {\n     /// # Note\n     ///\n     /// Some platforms do not provide access to the current timeout.\n-    #[unstable(feature = \"socket_timeout\", reason = \"RFC 1047 - recently added\")]\n+    #[unstable(feature = \"socket_timeout\", reason = \"RFC 1047 - recently added\",\n+               issue = \"27773\")]\n     pub fn write_timeout(&self) -> io::Result<Option<Duration>> {\n         self.0.write_timeout()\n     }"}, {"sha": "dcb76161d1fb41b361035212e719dd3ec11d5420", "filename": "src/libstd/net/udp.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibstd%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibstd%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fudp.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![unstable(feature = \"udp\", reason = \"remaining functions have not been \\\n-                                       scrutinized enough to be stabilized\")]\n-\n use fmt;\n use io::{self, Error, ErrorKind};\n use net::{ToSocketAddrs, SocketAddr};\n@@ -100,7 +97,8 @@ impl UdpSocket {\n     /// If the value specified is `None`, then `read` calls will block\n     /// indefinitely. It is an error to pass the zero `Duration` to this\n     /// method.\n-    #[unstable(feature = \"socket_timeout\", reason = \"RFC 1047 - recently added\")]\n+    #[unstable(feature = \"socket_timeout\", reason = \"RFC 1047 - recently added\",\n+               issue = \"27773\")]\n     pub fn set_read_timeout(&self, dur: Option<Duration>) -> io::Result<()> {\n         self.0.set_read_timeout(dur)\n     }\n@@ -110,23 +108,26 @@ impl UdpSocket {\n     /// If the value specified is `None`, then `write` calls will block\n     /// indefinitely. It is an error to pass the zero `Duration` to this\n     /// method.\n-    #[unstable(feature = \"socket_timeout\", reason = \"RFC 1047 - recently added\")]\n+    #[unstable(feature = \"socket_timeout\", reason = \"RFC 1047 - recently added\",\n+               issue = \"27773\")]\n     pub fn set_write_timeout(&self, dur: Option<Duration>) -> io::Result<()> {\n         self.0.set_write_timeout(dur)\n     }\n \n     /// Returns the read timeout of this socket.\n     ///\n     /// If the timeout is `None`, then `read` calls will block indefinitely.\n-    #[unstable(feature = \"socket_timeout\", reason = \"RFC 1047 - recently added\")]\n+    #[unstable(feature = \"socket_timeout\", reason = \"RFC 1047 - recently added\",\n+               issue = \"27773\")]\n     pub fn read_timeout(&self) -> io::Result<Option<Duration>> {\n         self.0.read_timeout()\n     }\n \n     /// Returns the write timeout of this socket.\n     ///\n     /// If the timeout is `None`, then `write` calls will block indefinitely.\n-    #[unstable(feature = \"socket_timeout\", reason = \"RFC 1047 - recently added\")]\n+    #[unstable(feature = \"socket_timeout\", reason = \"RFC 1047 - recently added\",\n+               issue = \"27773\")]\n     pub fn write_timeout(&self) -> io::Result<Option<Duration>> {\n         self.0.write_timeout()\n     }"}, {"sha": "bcbd1a80e8b70bc1d091e7bfa8d401679b99f5f7", "filename": "src/libstd/num/f32.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibstd%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibstd%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff32.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -124,7 +124,8 @@ mod cmath {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl f32 {\n     /// Parses a float as with a given radix\n-    #[unstable(feature = \"float_from_str_radix\", reason = \"recently moved API\")]\n+    #[unstable(feature = \"float_from_str_radix\", reason = \"recently moved API\",\n+               issue = \"27736\")]\n     pub fn from_str_radix(s: &str, radix: u32) -> Result<f32, ParseFloatError> {\n         num::Float::from_str_radix(s, radix)\n     }\n@@ -251,7 +252,8 @@ impl f32 {\n     /// assert!(abs_difference <= f32::EPSILON);\n     /// ```\n     /// [floating-point]: ../../../../../reference.html#machine-types\n-    #[unstable(feature = \"float_extras\", reason = \"signature is undecided\")]\n+    #[unstable(feature = \"float_extras\", reason = \"signature is undecided\",\n+               issue = \"27752\")]\n     #[inline]\n     pub fn integer_decode(self) -> (u64, i16, i8) {\n         num::Float::integer_decode(self)\n@@ -607,7 +609,8 @@ impl f32 {\n     ///\n     /// assert!(abs_difference <= f32::EPSILON);\n     /// ```\n-    #[unstable(feature = \"float_extras\", reason = \"desirability is unclear\")]\n+    #[unstable(feature = \"float_extras\", reason = \"desirability is unclear\",\n+               issue = \"27752\")]\n     #[inline]\n     pub fn to_degrees(self) -> f32 { num::Float::to_degrees(self) }\n \n@@ -624,7 +627,8 @@ impl f32 {\n     ///\n     /// assert!(abs_difference <= f32::EPSILON);\n     /// ```\n-    #[unstable(feature = \"float_extras\", reason = \"desirability is unclear\")]\n+    #[unstable(feature = \"float_extras\", reason = \"desirability is unclear\",\n+               issue = \"27752\")]\n     #[inline]\n     pub fn to_radians(self) -> f32 { num::Float::to_radians(self) }\n \n@@ -640,7 +644,8 @@ impl f32 {\n     /// assert!(abs_difference <= f32::EPSILON);\n     /// ```\n     #[unstable(feature = \"float_extras\",\n-               reason = \"pending integer conventions\")]\n+               reason = \"pending integer conventions\",\n+               issue = \"27752\")]\n     #[inline]\n     pub fn ldexp(x: f32, exp: isize) -> f32 {\n         unsafe { cmath::ldexpf(x, exp as c_int) }\n@@ -668,7 +673,8 @@ impl f32 {\n     /// assert!(abs_difference_1 <= f32::EPSILON);\n     /// ```\n     #[unstable(feature = \"float_extras\",\n-               reason = \"pending integer conventions\")]\n+               reason = \"pending integer conventions\",\n+               issue = \"27752\")]\n     #[inline]\n     pub fn frexp(self) -> (f32, isize) {\n         unsafe {\n@@ -693,7 +699,8 @@ impl f32 {\n     /// assert!(abs_diff <= f32::EPSILON);\n     /// ```\n     #[unstable(feature = \"float_extras\",\n-               reason = \"unsure about its place in the world\")]\n+               reason = \"unsure about its place in the world\",\n+               issue = \"27752\")]\n     #[inline]\n     pub fn next_after(self, other: f32) -> f32 {\n         unsafe { cmath::nextafterf(self, other) }"}, {"sha": "ea48c46b611cda418b2cf53f4e5f0f0471f4a44b", "filename": "src/libstd/num/f64.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibstd%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibstd%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff64.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -80,7 +80,8 @@ mod cmath {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl f64 {\n     /// Parses a float as with a given radix\n-    #[unstable(feature = \"float_from_str_radix\", reason = \"recently moved API\")]\n+    #[unstable(feature = \"float_from_str_radix\", reason = \"recently moved API\",\n+               issue = \"27736\")]\n     pub fn from_str_radix(s: &str, radix: u32) -> Result<f64, ParseFloatError> {\n         num::Float::from_str_radix(s, radix)\n     }\n@@ -205,7 +206,8 @@ impl f64 {\n     /// assert!(abs_difference < 1e-10);\n     /// ```\n     /// [floating-point]: ../../../../../reference.html#machine-types\n-    #[unstable(feature = \"float_extras\", reason = \"signature is undecided\")]\n+    #[unstable(feature = \"float_extras\", reason = \"signature is undecided\",\n+               issue = \"27752\")]\n     #[inline]\n     pub fn integer_decode(self) -> (u64, i16, i8) { num::Float::integer_decode(self) }\n \n@@ -575,7 +577,8 @@ impl f64 {\n     /// assert!(abs_difference < 1e-10);\n     /// ```\n     #[unstable(feature = \"float_extras\",\n-               reason = \"pending integer conventions\")]\n+               reason = \"pending integer conventions\",\n+               issue = \"27752\")]\n     #[inline]\n     pub fn ldexp(x: f64, exp: isize) -> f64 {\n         unsafe { cmath::ldexp(x, exp as c_int) }\n@@ -601,7 +604,8 @@ impl f64 {\n     /// assert!(abs_difference_1 < 1e-10);\n     /// ```\n     #[unstable(feature = \"float_extras\",\n-               reason = \"pending integer conventions\")]\n+               reason = \"pending integer conventions\",\n+               issue = \"27752\")]\n     #[inline]\n     pub fn frexp(self) -> (f64, isize) {\n         unsafe {\n@@ -624,7 +628,8 @@ impl f64 {\n     /// assert!(abs_diff < 1e-10);\n     /// ```\n     #[unstable(feature = \"float_extras\",\n-               reason = \"unsure about its place in the world\")]\n+               reason = \"unsure about its place in the world\",\n+               issue = \"27752\")]\n     #[inline]\n     pub fn next_after(self, other: f64) -> f64 {\n         unsafe { cmath::nextafter(self, other) }"}, {"sha": "db487d041b7c19ebef0d88595d014070b3acbb6e", "filename": "src/libstd/os/raw.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibstd%2Fos%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibstd%2Fos%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fraw.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -49,9 +49,11 @@\n #[repr(u8)]\n #[stable(feature = \"raw_os\", since = \"1.1.0\")]\n pub enum c_void {\n-    #[unstable(feature = \"c_void_variant\", reason = \"should not have to exist\")]\n+    #[unstable(feature = \"c_void_variant\", reason = \"should not have to exist\",\n+               issue = \"0\")]\n     #[doc(hidden)] __variant1,\n-    #[unstable(feature = \"c_void_variant\", reason = \"should not have to exist\")]\n+    #[unstable(feature = \"c_void_variant\", reason = \"should not have to exist\",\n+               issue = \"0\")]\n     #[doc(hidden)] __variant2,\n }\n "}, {"sha": "71aed0408711e92b854c7e0ecb555170065f70fc", "filename": "src/libstd/path.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -725,7 +725,7 @@ impl<'a> Components<'a> {\n     }\n \n     /// Examine the next component without consuming it.\n-    #[unstable(feature = \"path_components_peek\")]\n+    #[unstable(feature = \"path_components_peek\", issue = \"27727\")]\n     pub fn peek(&self) -> Option<Component<'a>> {\n         self.clone().next()\n     }\n@@ -1358,7 +1358,9 @@ impl Path {\n     /// Prefixes are relevant only for Windows paths, and consist of volumes\n     /// like `C:`, UNC prefixes like `\\\\server`, and others described in more\n     /// detail in `std::os::windows::PathExt`.\n-    #[unstable(feature = \"path_prefix\", reason = \"uncertain whether to expose this convenience\")]\n+    #[unstable(feature = \"path_prefix\",\n+               reason = \"uncertain whether to expose this convenience\",\n+               issue = \"27722\")]\n     pub fn prefix(&self) -> Option<Prefix> {\n         self.components().prefix\n     }\n@@ -1441,7 +1443,8 @@ impl Path {\n     ///\n     /// If `base` is not a prefix of `self` (i.e. `starts_with`\n     /// returns false), then `relative_from` returns `None`.\n-    #[unstable(feature = \"path_relative_from\", reason = \"see #23284\")]\n+    #[unstable(feature = \"path_relative_from\", reason = \"see #23284\",\n+               issue = \"23284\")]\n     pub fn relative_from<'a, P: ?Sized + AsRef<Path>>(&'a self, base: &'a P) -> Option<&Path>\n     {\n         iter_after(self.components(), base.as_ref().components()).map(|c| c.as_path())"}, {"sha": "7a4a0f96b3090caba206ab827eede372d3a830c9", "filename": "src/libstd/rand/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibstd%2Frand%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibstd%2Frand%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fmod.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -55,7 +55,7 @@\n //!     between the two sources. (Also note that, on some systems e.g. FreeBSD, both `/dev/random`\n //!     and `/dev/urandom` may block once if the CSPRNG has not seeded yet.)\n \n-#![unstable(feature = \"rand\")]\n+#![unstable(feature = \"rand\", issue = \"0\")]\n \n use cell::RefCell;\n use io;"}, {"sha": "5464e7f9d8936c71148678c19ba7682ef6ae3d34", "filename": "src/libstd/rt/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibstd%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibstd%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fmod.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -18,7 +18,8 @@\n \n #![unstable(feature = \"rt\",\n             reason = \"this public module should not exist and is highly likely \\\n-                      to disappear\")]\n+                      to disappear\",\n+            issue = \"0\")]\n #![allow(missing_docs)]\n \n use prelude::v1::*;"}, {"sha": "fc0e08139f4a3a4aa7d5d353b3512c8c847ea39d", "filename": "src/libstd/sync/condvar.rs", "status": "modified", "additions": 24, "deletions": 12, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibstd%2Fsync%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibstd%2Fsync%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fcondvar.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -76,15 +76,17 @@ pub struct Condvar { inner: Box<StaticCondvar> }\n /// static CVAR: StaticCondvar = CONDVAR_INIT;\n /// ```\n #[unstable(feature = \"static_condvar\",\n-           reason = \"may be merged with Condvar in the future\")]\n+           reason = \"may be merged with Condvar in the future\",\n+           issue = \"27717\")]\n pub struct StaticCondvar {\n     inner: sys::Condvar,\n     mutex: AtomicUsize,\n }\n \n /// Constant initializer for a statically allocated condition variable.\n #[unstable(feature = \"static_condvar\",\n-           reason = \"may be merged with Condvar in the future\")]\n+           reason = \"may be merged with Condvar in the future\",\n+           issue = \"27717\")]\n pub const CONDVAR_INIT: StaticCondvar = StaticCondvar::new();\n \n impl Condvar {\n@@ -173,7 +175,8 @@ impl Condvar {\n     ///\n     /// Like `wait`, the lock specified will be re-acquired when this function\n     /// returns, regardless of whether the timeout elapsed or not.\n-    #[unstable(feature = \"wait_timeout\", reason = \"waiting for Duration\")]\n+    #[unstable(feature = \"wait_timeout\", reason = \"waiting for Duration\",\n+               issue = \"27772\")]\n     pub fn wait_timeout<'a, T>(&self, guard: MutexGuard<'a, T>,\n                                dur: Duration)\n                                -> LockResult<(MutexGuard<'a, T>, bool)> {\n@@ -190,7 +193,8 @@ impl Condvar {\n     /// that the implementation will repeatedly wait while the duration has not\n     /// passed and the provided function returns `false`.\n     #[unstable(feature = \"wait_timeout_with\",\n-               reason = \"unsure if this API is broadly needed or what form it should take\")]\n+               reason = \"unsure if this API is broadly needed or what form it should take\",\n+               issue = \"27748\")]\n     pub fn wait_timeout_with<'a, T, F>(&self,\n                                        guard: MutexGuard<'a, T>,\n                                        dur: Duration,\n@@ -234,7 +238,8 @@ impl Drop for Condvar {\n impl StaticCondvar {\n     /// Creates a new condition variable\n     #[unstable(feature = \"static_condvar\",\n-               reason = \"may be merged with Condvar in the future\")]\n+               reason = \"may be merged with Condvar in the future\",\n+               issue = \"27717\")]\n     pub const fn new() -> StaticCondvar {\n         StaticCondvar {\n             inner: sys::Condvar::new(),\n@@ -247,7 +252,8 @@ impl StaticCondvar {\n     ///\n     /// See `Condvar::wait`.\n     #[unstable(feature = \"static_condvar\",\n-               reason = \"may be merged with Condvar in the future\")]\n+               reason = \"may be merged with Condvar in the future\",\n+               issue = \"27717\")]\n     pub fn wait<'a, T>(&'static self, guard: MutexGuard<'a, T>)\n                        -> LockResult<MutexGuard<'a, T>> {\n         let poisoned = unsafe {\n@@ -268,7 +274,8 @@ impl StaticCondvar {\n     ///\n     /// See `Condvar::wait_timeout`.\n     #[unstable(feature = \"static_condvar\",\n-               reason = \"may be merged with Condvar in the future\")]\n+               reason = \"may be merged with Condvar in the future\",\n+               issue = \"27717\")]\n     pub fn wait_timeout_ms<'a, T>(&'static self, guard: MutexGuard<'a, T>, ms: u32)\n                                   -> LockResult<(MutexGuard<'a, T>, bool)> {\n         self.wait_timeout(guard, Duration::from_millis(ms as u64))\n@@ -279,7 +286,8 @@ impl StaticCondvar {\n     ///\n     /// See `Condvar::wait_timeout`.\n     #[unstable(feature = \"static_condvar\",\n-               reason = \"may be merged with Condvar in the future\")]\n+               reason = \"may be merged with Condvar in the future\",\n+               issue = \"27717\")]\n     pub fn wait_timeout<'a, T>(&'static self,\n                                guard: MutexGuard<'a, T>,\n                                timeout: Duration)\n@@ -305,7 +313,8 @@ impl StaticCondvar {\n     ///\n     /// See `Condvar::wait_timeout_with`.\n     #[unstable(feature = \"static_condvar\",\n-               reason = \"may be merged with Condvar in the future\")]\n+               reason = \"may be merged with Condvar in the future\",\n+               issue = \"27717\")]\n     pub fn wait_timeout_with<'a, T, F>(&'static self,\n                                        guard: MutexGuard<'a, T>,\n                                        dur: Duration,\n@@ -351,14 +360,16 @@ impl StaticCondvar {\n     ///\n     /// See `Condvar::notify_one`.\n     #[unstable(feature = \"static_condvar\",\n-               reason = \"may be merged with Condvar in the future\")]\n+               reason = \"may be merged with Condvar in the future\",\n+               issue = \"27717\")]\n     pub fn notify_one(&'static self) { unsafe { self.inner.notify_one() } }\n \n     /// Wakes up all blocked threads on this condvar.\n     ///\n     /// See `Condvar::notify_all`.\n     #[unstable(feature = \"static_condvar\",\n-               reason = \"may be merged with Condvar in the future\")]\n+               reason = \"may be merged with Condvar in the future\",\n+               issue = \"27717\")]\n     pub fn notify_all(&'static self) { unsafe { self.inner.notify_all() } }\n \n     /// Deallocates all resources associated with this static condvar.\n@@ -368,7 +379,8 @@ impl StaticCondvar {\n     /// users of the condvar. This method is required to be called to not leak\n     /// memory on all platforms.\n     #[unstable(feature = \"static_condvar\",\n-               reason = \"may be merged with Condvar in the future\")]\n+               reason = \"may be merged with Condvar in the future\",\n+               issue = \"27717\")]\n     pub unsafe fn destroy(&'static self) {\n         self.inner.destroy()\n     }"}, {"sha": "cc068fd1dea55bfbdc67287cd5cee22f9e3bb22d", "filename": "src/libstd/sync/mpsc/select.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -54,7 +54,8 @@\n                       module will likely be replaced, and it is currently \\\n                       unknown how much API breakage that will cause. The ability \\\n                       to select over a number of channels will remain forever, \\\n-                      but no guarantees beyond this are being made\")]\n+                      but no guarantees beyond this are being made\",\n+            issue = \"27800\")]\n \n \n use core::cell::{Cell, UnsafeCell};"}, {"sha": "e56e5a72c13b98edbc9d5bb50cd53b05d937f7d8", "filename": "src/libstd/sync/mutex.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibstd%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibstd%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmutex.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -151,7 +151,8 @@ unsafe impl<T: ?Sized + Send> Sync for Mutex<T> { }\n /// // lock is unlocked here.\n /// ```\n #[unstable(feature = \"static_mutex\",\n-           reason = \"may be merged with Mutex in the future\")]\n+           reason = \"may be merged with Mutex in the future\",\n+           issue = \"27717\")]\n pub struct StaticMutex {\n     lock: sys::Mutex,\n     poison: poison::Flag,\n@@ -177,7 +178,8 @@ impl<'a, T: ?Sized> !marker::Send for MutexGuard<'a, T> {}\n /// Static initialization of a mutex. This constant can be used to initialize\n /// other mutex constants.\n #[unstable(feature = \"static_mutex\",\n-           reason = \"may be merged with Mutex in the future\")]\n+           reason = \"may be merged with Mutex in the future\",\n+           issue = \"27717\")]\n pub const MUTEX_INIT: StaticMutex = StaticMutex::new();\n \n impl<T> Mutex<T> {\n@@ -271,7 +273,8 @@ unsafe impl Sync for Dummy {}\n static DUMMY: Dummy = Dummy(UnsafeCell::new(()));\n \n #[unstable(feature = \"static_mutex\",\n-           reason = \"may be merged with Mutex in the future\")]\n+           reason = \"may be merged with Mutex in the future\",\n+           issue = \"27717\")]\n impl StaticMutex {\n     /// Creates a new mutex in an unlocked state ready for use.\n     pub const fn new() -> StaticMutex {"}, {"sha": "7210328fad805b31fceddd2303d3f0baa1eded80", "filename": "src/libstd/sync/rwlock.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibstd%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibstd%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Frwlock.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -98,15 +98,17 @@ unsafe impl<T: ?Sized + Send + Sync> Sync for RwLock<T> {}\n /// unsafe { LOCK.destroy() } // free all resources\n /// ```\n #[unstable(feature = \"static_rwlock\",\n-           reason = \"may be merged with RwLock in the future\")]\n+           reason = \"may be merged with RwLock in the future\",\n+           issue = \"27717\")]\n pub struct StaticRwLock {\n     lock: sys::RWLock,\n     poison: poison::Flag,\n }\n \n /// Constant initialization for a statically-initialized rwlock.\n #[unstable(feature = \"static_rwlock\",\n-           reason = \"may be merged with RwLock in the future\")]\n+           reason = \"may be merged with RwLock in the future\",\n+           issue = \"27717\")]\n pub const RW_LOCK_INIT: StaticRwLock = StaticRwLock::new();\n \n /// RAII structure used to release the shared read access of a lock when\n@@ -285,7 +287,8 @@ unsafe impl Sync for Dummy {}\n static DUMMY: Dummy = Dummy(UnsafeCell::new(()));\n \n #[unstable(feature = \"static_rwlock\",\n-           reason = \"may be merged with RwLock in the future\")]\n+           reason = \"may be merged with RwLock in the future\",\n+           issue = \"27717\")]\n impl StaticRwLock {\n     /// Creates a new rwlock.\n     pub const fn new() -> StaticRwLock {"}, {"sha": "891f8775ff236d2eebfea67ee7b46ad2ad7d2583", "filename": "src/libstd/sync/semaphore.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibstd%2Fsync%2Fsemaphore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibstd%2Fsync%2Fsemaphore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fsemaphore.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -10,7 +10,8 @@\n \n #![unstable(feature = \"semaphore\",\n             reason = \"the interaction between semaphores and the acquisition/release \\\n-                      of resources is currently unclear\")]\n+                      of resources is currently unclear\",\n+            issue = \"27798\")]\n \n use ops::Drop;\n use sync::{Mutex, Condvar};"}, {"sha": "4df3441f87b2134ed11241c5ebeefda9f8011893", "filename": "src/libstd/sys/common/remutex.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibstd%2Fsys%2Fcommon%2Fremutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibstd%2Fsys%2Fcommon%2Fremutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fremutex.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -7,7 +7,9 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-#![unstable(feature = \"reentrant_mutex\", reason = \"new API\")]\n+\n+#![unstable(feature = \"reentrant_mutex\", reason = \"new API\",\n+            issue = \"27738\")]\n \n use prelude::v1::*;\n "}, {"sha": "56885cdd56d99a348a75228e287e64ee3038079b", "filename": "src/libstd/sys/common/thread_local.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibstd%2Fsys%2Fcommon%2Fthread_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibstd%2Fsys%2Fcommon%2Fthread_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fthread_local.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -55,7 +55,7 @@\n //! ```\n \n #![allow(non_camel_case_types)]\n-#![unstable(feature = \"thread_local_internals\")]\n+#![unstable(feature = \"thread_local_internals\", issue = \"0\")]\n #![allow(dead_code)] // sys isn't exported yet\n \n use sync::atomic::{self, AtomicUsize, Ordering};"}, {"sha": "46ab83199f0f72264f33e1fa23db4bb38fd1162f", "filename": "src/libstd/sys/unix/ext/fs.rs", "status": "modified", "additions": 25, "deletions": 22, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -22,43 +22,43 @@ use sys::fs::MetadataExt as UnixMetadataExt;\n use sys;\n use sys_common::{FromInner, AsInner, AsInnerMut};\n \n-#[unstable(feature = \"fs_mode\", reason = \"recently added API\")]\n+#[unstable(feature = \"fs_mode\", reason = \"recently added API\", issue = \"27712\")]\n pub const USER_READ: raw::mode_t = 0o400;\n-#[unstable(feature = \"fs_mode\", reason = \"recently added API\")]\n+#[unstable(feature = \"fs_mode\", reason = \"recently added API\", issue = \"27712\")]\n pub const USER_WRITE: raw::mode_t = 0o200;\n-#[unstable(feature = \"fs_mode\", reason = \"recently added API\")]\n+#[unstable(feature = \"fs_mode\", reason = \"recently added API\", issue = \"27712\")]\n pub const USER_EXECUTE: raw::mode_t = 0o100;\n-#[unstable(feature = \"fs_mode\", reason = \"recently added API\")]\n+#[unstable(feature = \"fs_mode\", reason = \"recently added API\", issue = \"27712\")]\n pub const USER_RWX: raw::mode_t = 0o700;\n-#[unstable(feature = \"fs_mode\", reason = \"recently added API\")]\n+#[unstable(feature = \"fs_mode\", reason = \"recently added API\", issue = \"27712\")]\n pub const GROUP_READ: raw::mode_t = 0o040;\n-#[unstable(feature = \"fs_mode\", reason = \"recently added API\")]\n+#[unstable(feature = \"fs_mode\", reason = \"recently added API\", issue = \"27712\")]\n pub const GROUP_WRITE: raw::mode_t = 0o020;\n-#[unstable(feature = \"fs_mode\", reason = \"recently added API\")]\n+#[unstable(feature = \"fs_mode\", reason = \"recently added API\", issue = \"27712\")]\n pub const GROUP_EXECUTE: raw::mode_t = 0o010;\n-#[unstable(feature = \"fs_mode\", reason = \"recently added API\")]\n+#[unstable(feature = \"fs_mode\", reason = \"recently added API\", issue = \"27712\")]\n pub const GROUP_RWX: raw::mode_t = 0o070;\n-#[unstable(feature = \"fs_mode\", reason = \"recently added API\")]\n+#[unstable(feature = \"fs_mode\", reason = \"recently added API\", issue = \"27712\")]\n pub const OTHER_READ: raw::mode_t = 0o004;\n-#[unstable(feature = \"fs_mode\", reason = \"recently added API\")]\n+#[unstable(feature = \"fs_mode\", reason = \"recently added API\", issue = \"27712\")]\n pub const OTHER_WRITE: raw::mode_t = 0o002;\n-#[unstable(feature = \"fs_mode\", reason = \"recently added API\")]\n+#[unstable(feature = \"fs_mode\", reason = \"recently added API\", issue = \"27712\")]\n pub const OTHER_EXECUTE: raw::mode_t = 0o001;\n-#[unstable(feature = \"fs_mode\", reason = \"recently added API\")]\n+#[unstable(feature = \"fs_mode\", reason = \"recently added API\", issue = \"27712\")]\n pub const OTHER_RWX: raw::mode_t = 0o007;\n-#[unstable(feature = \"fs_mode\", reason = \"recently added API\")]\n+#[unstable(feature = \"fs_mode\", reason = \"recently added API\", issue = \"27712\")]\n pub const ALL_READ: raw::mode_t = 0o444;\n-#[unstable(feature = \"fs_mode\", reason = \"recently added API\")]\n+#[unstable(feature = \"fs_mode\", reason = \"recently added API\", issue = \"27712\")]\n pub const ALL_WRITE: raw::mode_t = 0o222;\n-#[unstable(feature = \"fs_mode\", reason = \"recently added API\")]\n+#[unstable(feature = \"fs_mode\", reason = \"recently added API\", issue = \"27712\")]\n pub const ALL_EXECUTE: raw::mode_t = 0o111;\n-#[unstable(feature = \"fs_mode\", reason = \"recently added API\")]\n+#[unstable(feature = \"fs_mode\", reason = \"recently added API\", issue = \"27712\")]\n pub const ALL_RWX: raw::mode_t = 0o777;\n-#[unstable(feature = \"fs_mode\", reason = \"recently added API\")]\n+#[unstable(feature = \"fs_mode\", reason = \"recently added API\", issue = \"27712\")]\n pub const SETUID: raw::mode_t = 0o4000;\n-#[unstable(feature = \"fs_mode\", reason = \"recently added API\")]\n+#[unstable(feature = \"fs_mode\", reason = \"recently added API\", issue = \"27712\")]\n pub const SETGID: raw::mode_t = 0o2000;\n-#[unstable(feature = \"fs_mode\", reason = \"recently added API\")]\n+#[unstable(feature = \"fs_mode\", reason = \"recently added API\", issue = \"27712\")]\n pub const STICKY_BIT: raw::mode_t = 0o1000;\n \n /// Unix-specific extensions to `Permissions`\n@@ -178,7 +178,8 @@ impl MetadataExt for fs::Metadata {\n }\n \n /// Add special unix types (block/char device, fifo and socket)\n-#[unstable(feature = \"file_type_ext\", reason = \"recently added API\")]\n+#[unstable(feature = \"file_type_ext\", reason = \"recently added API\",\n+           issue = \"27796\")]\n pub trait FileTypeExt {\n     /// Returns whether this file type is a block device.\n     fn is_block_device(&self) -> bool;\n@@ -190,7 +191,8 @@ pub trait FileTypeExt {\n     fn is_socket(&self) -> bool;\n }\n \n-#[unstable(feature = \"file_type_ext\", reason = \"recently added API\")]\n+#[unstable(feature = \"file_type_ext\", reason = \"recently added API\",\n+           issue = \"27796\")]\n impl FileTypeExt for fs::FileType {\n     fn is_block_device(&self) -> bool { self.as_inner().is(libc::S_IFBLK) }\n     fn is_char_device(&self) -> bool { self.as_inner().is(libc::S_IFCHR) }\n@@ -240,7 +242,8 @@ pub fn symlink<P: AsRef<Path>, Q: AsRef<Path>>(src: P, dst: Q) -> io::Result<()>\n     sys::fs::symlink(src.as_ref(), dst.as_ref())\n }\n \n-#[unstable(feature = \"dir_builder\", reason = \"recently added API\")]\n+#[unstable(feature = \"dir_builder\", reason = \"recently added API\",\n+           issue = \"27710\")]\n /// An extension trait for `fs::DirBuilder` for unix-specific options.\n pub trait DirBuilderExt {\n     /// Sets the mode to create new directories with. This option defaults to"}, {"sha": "f4184f6a5d58152eabf594ae5a5f3d721a484644", "filename": "src/libstd/sys/unix/ext/io.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibstd%2Fsys%2Funix%2Fext%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibstd%2Fsys%2Funix%2Fext%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Fio.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -61,7 +61,8 @@ pub trait FromRawFd {\n \n /// A trait to express the ability to consume an object and acquire ownership of\n /// its raw file descriptor.\n-#[unstable(feature = \"into_raw_os\", reason = \"recently added API\")]\n+#[unstable(feature = \"into_raw_os\", reason = \"recently added API\",\n+           issue = \"27797\")]\n pub trait IntoRawFd {\n     /// Consumes this object, returning the raw underlying file descriptor.\n     ///"}, {"sha": "81980ea25fb56c75e9c021b0623a963b91dc6a33", "filename": "src/libstd/sys/unix/ext/process.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibstd%2Fsys%2Funix%2Fext%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibstd%2Fsys%2Funix%2Fext%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Fprocess.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -32,15 +32,17 @@ pub trait CommandExt {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn gid(&mut self, id: gid_t) -> &mut process::Command;\n \n-    /// Create a new session (cf. `setsid(2)`) for the child process. This means that the child is\n-    /// the leader of a new process group. The parent process remains the child reaper of the new\n-    /// process.\n+    /// Create a new session (cf. `setsid(2)`) for the child process. This means\n+    /// that the child is the leader of a new process group. The parent process\n+    /// remains the child reaper of the new process.\n     ///\n-    /// This is not enough to create a daemon process. The *init* process should be the child\n-    /// reaper of a daemon. This can be achieved if the parent process exit. Moreover, a daemon\n-    /// should not have a controlling terminal. To acheive this, a session leader (the child) must\n-    /// spawn another process (the daemon) in the same session.\n-    #[unstable(feature = \"process_session_leader\", reason = \"recently added\")]\n+    /// This is not enough to create a daemon process. The *init* process should\n+    /// be the child reaper of a daemon. This can be achieved if the parent\n+    /// process exit. Moreover, a daemon should not have a controlling terminal.\n+    /// To acheive this, a session leader (the child) must spawn another process\n+    /// (the daemon) in the same session.\n+    #[unstable(feature = \"process_session_leader\", reason = \"recently added\",\n+               issue = \"27811\")]\n     fn session_leader(&mut self, on: bool) -> &mut process::Command;\n }\n "}, {"sha": "9fe6527d89e8910543d5e256c563ddd8343893e1", "filename": "src/libstd/sys/windows/ext/fs.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -20,7 +20,8 @@ use sys_common::{AsInnerMut, AsInner};\n \n /// Windows-specific extensions to `OpenOptions`\n #[unstable(feature = \"open_options_ext\",\n-           reason = \"may require more thought/methods\")]\n+           reason = \"may require more thought/methods\",\n+           issue = \"27720\")]\n pub trait OpenOptionsExt {\n     /// Overrides the `dwDesiredAccess` argument to the call to `CreateFile`\n     /// with the specified value."}, {"sha": "a203a23068e54ab808e50772adef2c37aa545ecb", "filename": "src/libstd/sys/windows/ext/io.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fio.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -52,7 +52,8 @@ pub trait FromRawHandle {\n \n /// A trait to express the ability to consume an object and acquire ownership of\n /// its raw `HANDLE`.\n-#[unstable(feature = \"into_raw_os\", reason = \"recently added API\")]\n+#[unstable(feature = \"into_raw_os\", reason = \"recently added API\",\n+           issue = \"27797\")]\n pub trait IntoRawHandle {\n     /// Consumes this object, returning the raw underlying handle.\n     ///\n@@ -110,7 +111,8 @@ pub trait FromRawSocket {\n \n /// A trait to express the ability to consume an object and acquire ownership of\n /// its raw `SOCKET`.\n-#[unstable(feature = \"into_raw_os\", reason = \"recently added API\")]\n+#[unstable(feature = \"into_raw_os\", reason = \"recently added API\",\n+           issue = \"27797\")]\n pub trait IntoRawSocket {\n     /// Consumes this object, returning the raw underlying socket.\n     ///"}, {"sha": "c204f79614ad8f99212f3ab2b07d97a881581cd2", "filename": "src/libstd/thread/local.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibstd%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibstd%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Flocal.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -10,7 +10,7 @@\n \n //! Thread local storage\n \n-#![unstable(feature = \"thread_local_internals\")]\n+#![unstable(feature = \"thread_local_internals\", issue = \"0\")]\n \n use cell::UnsafeCell;\n \n@@ -137,7 +137,8 @@ macro_rules! thread_local {\n \n #[doc(hidden)]\n #[unstable(feature = \"thread_local_internals\",\n-           reason = \"should not be necessary\")]\n+           reason = \"should not be necessary\",\n+           issue = \"0\")]\n #[macro_export]\n #[allow_internal_unstable]\n macro_rules! __thread_local_inner {\n@@ -153,7 +154,8 @@ macro_rules! __thread_local_inner {\n \n /// Indicator of the state of a thread local storage key.\n #[unstable(feature = \"thread_local_state\",\n-           reason = \"state querying was recently added\")]\n+           reason = \"state querying was recently added\",\n+           issue = \"27716\")]\n #[derive(Eq, PartialEq, Copy, Clone)]\n pub enum LocalKeyState {\n     /// All keys are in this state whenever a thread starts. Keys will\n@@ -185,7 +187,8 @@ pub enum LocalKeyState {\n impl<T: 'static> LocalKey<T> {\n     #[doc(hidden)]\n     #[unstable(feature = \"thread_local_internals\",\n-               reason = \"recently added to create a key\")]\n+               reason = \"recently added to create a key\",\n+               issue = \"0\")]\n     pub const fn new(inner: fn() -> &'static __KeyInner<T>,\n                      init: fn() -> T) -> LocalKey<T> {\n         LocalKey {\n@@ -248,7 +251,8 @@ impl<T: 'static> LocalKey<T> {\n     /// to be able to be accessed. Keys in the `Destroyed` state will panic on\n     /// any call to `with`.\n     #[unstable(feature = \"thread_local_state\",\n-               reason = \"state querying was recently added\")]\n+               reason = \"state querying was recently added\",\n+               issue = \"27716\")]\n     pub fn state(&'static self) -> LocalKeyState {\n         unsafe {\n             match (self.inner)().get() {"}, {"sha": "3a4c3e7eef1ddc86a0be72d13c51156d9124c370", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 12, "deletions": 64, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -167,7 +167,6 @@ use any::Any;\n use cell::UnsafeCell;\n use fmt;\n use io;\n-use marker::PhantomData;\n use rt::{self, unwind};\n use sync::{Mutex, Condvar, Arc};\n use sys::thread as imp;\n@@ -185,8 +184,9 @@ use time::Duration;\n pub use self::local::{LocalKey, LocalKeyState};\n \n #[unstable(feature = \"scoped_tls\",\n-            reason = \"scoped TLS has yet to have wide enough use to fully \\\n-                      consider stabilizing its interface\")]\n+           reason = \"scoped TLS has yet to have wide enough use to fully \\\n+                     consider stabilizing its interface\",\n+           issue = \"27715\")]\n pub use self::scoped_tls::ScopedKey;\n \n #[doc(hidden)] pub use self::local::__KeyInner as __LocalKeyInner;\n@@ -375,7 +375,8 @@ pub fn panicking() -> bool {\n /// });\n /// assert!(result.is_err());\n /// ```\n-#[unstable(feature = \"catch_panic\", reason = \"recent API addition\")]\n+#[unstable(feature = \"catch_panic\", reason = \"recent API addition\",\n+           issue = \"27719\")]\n pub fn catch_panic<F, R>(f: F) -> Result<R>\n     where F: FnOnce() -> R + Send + 'static\n {\n@@ -409,7 +410,8 @@ pub fn sleep_ms(ms: u32) {\n /// signal being received or a spurious wakeup. Platforms which do not support\n /// nanosecond precision for sleeping will have `dur` rounded up to the nearest\n /// granularity of time they can sleep for.\n-#[unstable(feature = \"thread_sleep\", reason = \"waiting on Duration\")]\n+#[unstable(feature = \"thread_sleep\", reason = \"waiting on Duration\",\n+           issue = \"27771\")]\n pub fn sleep(dur: Duration) {\n     imp::Thread::sleep(dur)\n }\n@@ -479,7 +481,8 @@ pub fn park_timeout_ms(ms: u32) {\n ///\n /// Platforms which do not support nanosecond precision for sleeping will have\n /// `dur` rounded up to the nearest granularity of time they can sleep for.\n-#[unstable(feature = \"park_timeout\", reason = \"waiting on Duration\")]\n+#[unstable(feature = \"park_timeout\", reason = \"waiting on Duration\",\n+           issue = \"27771\")]\n pub fn park_timeout(dur: Duration) {\n     let thread = current();\n     let mut guard = thread.inner.lock.lock().unwrap();\n@@ -552,7 +555,7 @@ impl thread_info::NewThread for Thread {\n }\n \n ////////////////////////////////////////////////////////////////////////////////\n-// JoinHandle and JoinGuard\n+// JoinHandle\n ////////////////////////////////////////////////////////////////////////////////\n \n /// Indicates the manner in which a thread exited.\n@@ -578,7 +581,7 @@ struct Packet<T>(Arc<UnsafeCell<Option<Result<T>>>>);\n unsafe impl<T: Send> Send for Packet<T> {}\n unsafe impl<T: Sync> Sync for Packet<T> {}\n \n-/// Inner representation for JoinHandle and JoinGuard\n+/// Inner representation for JoinHandle\n struct JoinInner<T> {\n     native: Option<imp::Thread>,\n     thread: Thread,\n@@ -596,8 +599,7 @@ impl<T> JoinInner<T> {\n \n /// An owned permission to join on a thread (block on its termination).\n ///\n-/// Unlike a `JoinGuard`, a `JoinHandle` *detaches* the child thread\n-/// when it is dropped, rather than automatically joining on drop.\n+/// A `JoinHandle` *detaches* the child thread when it is dropped.\n ///\n /// Due to platform restrictions, it is not possible to `Clone` this\n /// handle: the ability to join a child thread is a uniquely-owned\n@@ -622,63 +624,9 @@ impl<T> JoinHandle<T> {\n     }\n }\n \n-/// An RAII-style guard that will block until thread termination when dropped.\n-///\n-/// The type `T` is the return type for the thread's main function.\n-///\n-/// Joining on drop is necessary to ensure memory safety when stack\n-/// data is shared between a parent and child thread.\n-///\n-/// Due to platform restrictions, it is not possible to `Clone` this\n-/// handle: the ability to join a child thread is a uniquely-owned\n-/// permission.\n-#[must_use = \"thread will be immediately joined if `JoinGuard` is not used\"]\n-#[unstable(feature = \"scoped\",\n-           reason = \"memory unsafe if destructor is avoided, see #24292\")]\n-pub struct JoinGuard<'a, T: Send + 'a> {\n-    inner: JoinInner<T>,\n-    _marker: PhantomData<&'a T>,\n-}\n-\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-unsafe impl<'a, T: Send + 'a> Sync for JoinGuard<'a, T> {}\n-\n-impl<'a, T: Send + 'a> JoinGuard<'a, T> {\n-    /// Extracts a handle to the thread this guard will join on.\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn thread(&self) -> &Thread {\n-        &self.inner.thread\n-    }\n-\n-    /// Waits for the associated thread to finish, returning the result of the\n-    /// thread's calculation.\n-    ///\n-    /// # Panics\n-    ///\n-    /// Panics on the child thread are propagated by panicking the parent.\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn join(mut self) -> T {\n-        match self.inner.join() {\n-            Ok(res) => res,\n-            Err(_) => panic!(\"child thread {:?} panicked\", self.thread()),\n-        }\n-    }\n-}\n-\n-#[unstable(feature = \"scoped\",\n-           reason = \"memory unsafe if destructor is avoided, see #24292\")]\n-impl<'a, T: Send + 'a> Drop for JoinGuard<'a, T> {\n-    fn drop(&mut self) {\n-        if self.inner.native.is_some() && self.inner.join().is_err() {\n-            panic!(\"child thread {:?} panicked\", self.thread());\n-        }\n-    }\n-}\n-\n fn _assert_sync_and_send() {\n     fn _assert_both<T: Send + Sync>() {}\n     _assert_both::<JoinHandle<()>>();\n-    _assert_both::<JoinGuard<()>>();\n     _assert_both::<Thread>();\n }\n "}, {"sha": "bfcaabdbc17b8df170b7de15007a14bbbf25772c", "filename": "src/libstd/thread/scoped_tls.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibstd%2Fthread%2Fscoped_tls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibstd%2Fthread%2Fscoped_tls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fscoped_tls.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -40,7 +40,7 @@\n //! });\n //! ```\n \n-#![unstable(feature = \"thread_local_internals\")]\n+#![unstable(feature = \"thread_local_internals\", issue = \"0\")]\n \n #[doc(hidden)]\n pub use self::imp::KeyInner as __KeyInner;\n@@ -54,7 +54,8 @@ pub use self::imp::KeyInner as __KeyInner;\n /// their contents.\n #[unstable(feature = \"scoped_tls\",\n            reason = \"scoped TLS has yet to have wide enough use to fully consider \\\n-                     stabilizing its interface\")]\n+                     stabilizing its interface\",\n+           issue = \"27715\")]\n pub struct ScopedKey<T:'static> { inner: fn() -> &'static imp::KeyInner<T> }\n \n /// Declare a new scoped thread local storage key.\n@@ -116,7 +117,8 @@ macro_rules! __scoped_thread_local_inner {\n \n #[unstable(feature = \"scoped_tls\",\n            reason = \"scoped TLS has yet to have wide enough use to fully consider \\\n-                     stabilizing its interface\")]\n+                     stabilizing its interface\",\n+           issue = \"27715\")]\n impl<T> ScopedKey<T> {\n     #[doc(hidden)]\n     pub const fn new(inner: fn() -> &'static imp::KeyInner<T>) -> ScopedKey<T> {"}, {"sha": "2135b85103294480e61df0a95f82209189195976", "filename": "src/libstd/time/duration.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibstd%2Ftime%2Fduration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibstd%2Ftime%2Fduration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime%2Fduration.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -64,7 +64,8 @@ impl Duration {\n     #[unstable(feature = \"duration_span\",\n                reason = \"unsure if this is the right API or whether it should \\\n                          wait for a more general \\\"moment in time\\\" \\\n-                         abstraction\")]\n+                         abstraction\",\n+               issue = \"27799\")]\n     pub fn span<F>(f: F) -> Duration where F: FnOnce() {\n         let start = SteadyTime::now();\n         f();"}, {"sha": "5e16465b4d4bfa330dda2b4d364d48b915d9a620", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -532,10 +532,9 @@ fn find_stability_generic<'a,\n         }\n     } else if stab.as_ref().map_or(false, |s| s.level == Unstable && s.issue.is_none()) {\n         // non-deprecated unstable items need to point to issues.\n-        // FIXME: uncomment this error\n-        // diagnostic.span_err(item_sp,\n-        //                     \"non-deprecated unstable items need to point \\\n-        //                      to an issue with `issue = \\\"NNN\\\"`\");\n+        diagnostic.span_err(item_sp,\n+                            \"non-deprecated unstable items need to point \\\n+                             to an issue with `issue = \\\"NNN\\\"`\");\n     }\n \n     (stab, used_attrs)"}, {"sha": "0d1fa6dd7265ad17aeb0bc313eb4444310b8e143", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -17,7 +17,7 @@\n // Do not remove on snapshot creation. Needed for bootstrap. (Issue #22364)\n #![cfg_attr(stage0, feature(custom_attribute))]\n #![crate_name = \"syntax\"]\n-#![unstable(feature = \"rustc_private\")]\n+#![unstable(feature = \"rustc_private\", issue = \"27812\")]\n #![staged_api]\n #![crate_type = \"dylib\"]\n #![crate_type = \"rlib\"]"}, {"sha": "8bf8044f814315b00e4acc4c5ef07a9d1ef051d1", "filename": "src/libterm/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibterm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibterm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Flib.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -45,7 +45,8 @@\n #![cfg_attr(stage0, feature(custom_attribute))]\n #![crate_name = \"term\"]\n #![unstable(feature = \"rustc_private\",\n-            reason = \"use the crates.io `term` library instead\")]\n+            reason = \"use the crates.io `term` library instead\",\n+            issue = \"27812\")]\n #![staged_api]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]"}, {"sha": "47c50f70a392a609ec61bc7eb2bb736e61b2b515", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -26,7 +26,7 @@\n // Do not remove on snapshot creation. Needed for bootstrap. (Issue #22364)\n #![cfg_attr(stage0, feature(custom_attribute))]\n #![crate_name = \"test\"]\n-#![unstable(feature = \"test\")]\n+#![unstable(feature = \"test\", issue = \"27812\")]\n #![staged_api]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]"}, {"sha": "f4e6f6d7511a8a20f012cfa0b499e031d454933d", "filename": "src/test/auxiliary/inherited_stability.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Ftest%2Fauxiliary%2Finherited_stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Ftest%2Fauxiliary%2Finherited_stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Finherited_stability.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n #![crate_name=\"inherited_stability\"]\n #![crate_type = \"lib\"]\n-#![unstable(feature = \"test_feature\")]\n+#![unstable(feature = \"test_feature\", issue = \"0\")]\n #![feature(staged_api)]\n #![staged_api]\n \n@@ -26,7 +26,7 @@ pub mod stable_mod {\n     pub fn stable() {}\n }\n \n-#[unstable(feature = \"test_feature\")]\n+#[unstable(feature = \"test_feature\", issue = \"0\")]\n pub mod unstable_mod {\n     #[stable(feature = \"test_feature\", since = \"1.0.0\")]\n     #[deprecated(since = \"1.0.0\")]"}, {"sha": "d9335eb567f693afe8ea9011695a2e2c9672174a", "filename": "src/test/auxiliary/internal_unstable.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Ftest%2Fauxiliary%2Finternal_unstable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Ftest%2Fauxiliary%2Finternal_unstable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Finternal_unstable.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -12,24 +12,24 @@\n #![staged_api]\n #![stable(feature = \"stable\", since = \"1.0.0\")]\n \n-#[unstable(feature = \"function\")]\n+#[unstable(feature = \"function\", issue = \"0\")]\n pub fn unstable() {}\n \n \n #[stable(feature = \"stable\", since = \"1.0.0\")]\n pub struct Foo {\n-    #[unstable(feature = \"struct_field\")]\n+    #[unstable(feature = \"struct_field\", issue = \"0\")]\n     pub x: u8\n }\n \n impl Foo {\n-    #[unstable(feature = \"method\")]\n+    #[unstable(feature = \"method\", issue = \"0\")]\n     pub fn method(&self) {}\n }\n \n #[stable(feature = \"stable\", since = \"1.0.0\")]\n pub struct Bar {\n-    #[unstable(feature = \"struct2_field\")]\n+    #[unstable(feature = \"struct2_field\", issue = \"0\")]\n     pub x: u8\n }\n "}, {"sha": "51fad3ce3cd6939f0df2f8922e04c80e3910d3ed", "filename": "src/test/auxiliary/lint_output_format.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Ftest%2Fauxiliary%2Flint_output_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Ftest%2Fauxiliary%2Flint_output_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Flint_output_format.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -12,20 +12,20 @@\n #![crate_type = \"lib\"]\n #![feature(staged_api)]\n #![staged_api]\n-#![unstable(feature = \"test_feature\")]\n+#![unstable(feature = \"test_feature\", issue = \"0\")]\n \n #[stable(feature = \"test_feature\", since = \"1.0.0\")]\n #[deprecated(since = \"1.0.0\")]\n pub fn foo() -> usize {\n     20\n }\n \n-#[unstable(feature = \"test_feature\")]\n+#[unstable(feature = \"test_feature\", issue = \"0\")]\n pub fn bar() -> usize {\n     40\n }\n \n-#[unstable(feature = \"test_feature\")]\n+#[unstable(feature = \"test_feature\", issue = \"0\")]\n pub fn baz() -> usize {\n     30\n }"}, {"sha": "60097393a259615a6827367f4e995b4f07b8ef3d", "filename": "src/test/auxiliary/lint_stability.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Ftest%2Fauxiliary%2Flint_stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Ftest%2Fauxiliary%2Flint_stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Flint_stability.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -20,16 +20,16 @@ pub fn deprecated() {}\n #[deprecated(since = \"1.0.0\", reason = \"text\")]\n pub fn deprecated_text() {}\n \n-#[unstable(feature = \"test_feature\")]\n+#[unstable(feature = \"test_feature\", issue = \"0\")]\n #[deprecated(since = \"1.0.0\")]\n pub fn deprecated_unstable() {}\n-#[unstable(feature = \"test_feature\")]\n+#[unstable(feature = \"test_feature\", issue = \"0\")]\n #[deprecated(since = \"1.0.0\", reason = \"text\")]\n pub fn deprecated_unstable_text() {}\n \n-#[unstable(feature = \"test_feature\")]\n+#[unstable(feature = \"test_feature\", issue = \"0\")]\n pub fn unstable() {}\n-#[unstable(feature = \"test_feature\", reason = \"text\")]\n+#[unstable(feature = \"test_feature\", reason = \"text\", issue = \"0\")]\n pub fn unstable_text() {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -48,16 +48,16 @@ impl MethodTester {\n     #[deprecated(since = \"1.0.0\", reason = \"text\")]\n     pub fn method_deprecated_text(&self) {}\n \n-    #[unstable(feature = \"test_feature\")]\n+    #[unstable(feature = \"test_feature\", issue = \"0\")]\n     #[deprecated(since = \"1.0.0\")]\n     pub fn method_deprecated_unstable(&self) {}\n-    #[unstable(feature = \"test_feature\")]\n+    #[unstable(feature = \"test_feature\", issue = \"0\")]\n     #[deprecated(since = \"1.0.0\", reason = \"text\")]\n     pub fn method_deprecated_unstable_text(&self) {}\n \n-    #[unstable(feature = \"test_feature\")]\n+    #[unstable(feature = \"test_feature\", issue = \"0\")]\n     pub fn method_unstable(&self) {}\n-    #[unstable(feature = \"test_feature\", reason = \"text\")]\n+    #[unstable(feature = \"test_feature\", reason = \"text\", issue = \"0\")]\n     pub fn method_unstable_text(&self) {}\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -75,16 +75,16 @@ pub trait Trait {\n     #[deprecated(since = \"1.0.0\", reason = \"text\")]\n     fn trait_deprecated_text(&self) {}\n \n-    #[unstable(feature = \"test_feature\")]\n+    #[unstable(feature = \"test_feature\", issue = \"0\")]\n     #[deprecated(since = \"1.0.0\")]\n     fn trait_deprecated_unstable(&self) {}\n-    #[unstable(feature = \"test_feature\")]\n+    #[unstable(feature = \"test_feature\", issue = \"0\")]\n     #[deprecated(since = \"1.0.0\", reason = \"text\")]\n     fn trait_deprecated_unstable_text(&self) {}\n \n-    #[unstable(feature = \"test_feature\")]\n+    #[unstable(feature = \"test_feature\", issue = \"0\")]\n     fn trait_unstable(&self) {}\n-    #[unstable(feature = \"test_feature\", reason = \"text\")]\n+    #[unstable(feature = \"test_feature\", reason = \"text\", issue = \"0\")]\n     fn trait_unstable_text(&self) {}\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -95,20 +95,20 @@ pub trait Trait {\n \n impl Trait for MethodTester {}\n \n-#[unstable(feature = \"test_feature\")]\n+#[unstable(feature = \"test_feature\", issue = \"0\")]\n pub trait UnstableTrait { fn dummy(&self) { } }\n \n #[stable(feature = \"test_feature\", since = \"1.0.0\")]\n #[deprecated(since = \"1.0.0\")]\n pub struct DeprecatedStruct {\n     #[stable(feature = \"test_feature\", since = \"1.0.0\")] pub i: isize\n }\n-#[unstable(feature = \"test_feature\")]\n+#[unstable(feature = \"test_feature\", issue = \"0\")]\n #[deprecated(since = \"1.0.0\")]\n pub struct DeprecatedUnstableStruct {\n     #[stable(feature = \"test_feature\", since = \"1.0.0\")] pub i: isize\n }\n-#[unstable(feature = \"test_feature\")]\n+#[unstable(feature = \"test_feature\", issue = \"0\")]\n pub struct UnstableStruct {\n     #[stable(feature = \"test_feature\", since = \"1.0.0\")] pub i: isize\n }\n@@ -120,10 +120,10 @@ pub struct StableStruct {\n #[stable(feature = \"test_feature\", since = \"1.0.0\")]\n #[deprecated(since = \"1.0.0\")]\n pub struct DeprecatedUnitStruct;\n-#[unstable(feature = \"test_feature\")]\n+#[unstable(feature = \"test_feature\", issue = \"0\")]\n #[deprecated(since = \"1.0.0\")]\n pub struct DeprecatedUnstableUnitStruct;\n-#[unstable(feature = \"test_feature\")]\n+#[unstable(feature = \"test_feature\", issue = \"0\")]\n pub struct UnstableUnitStruct;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct StableUnitStruct;\n@@ -133,10 +133,10 @@ pub enum Enum {\n     #[stable(feature = \"test_feature\", since = \"1.0.0\")]\n     #[deprecated(since = \"1.0.0\")]\n     DeprecatedVariant,\n-    #[unstable(feature = \"test_feature\")]\n+    #[unstable(feature = \"test_feature\", issue = \"0\")]\n     #[deprecated(since = \"1.0.0\")]\n     DeprecatedUnstableVariant,\n-    #[unstable(feature = \"test_feature\")]\n+    #[unstable(feature = \"test_feature\", issue = \"0\")]\n     UnstableVariant,\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -146,10 +146,10 @@ pub enum Enum {\n #[stable(feature = \"test_feature\", since = \"1.0.0\")]\n #[deprecated(since = \"1.0.0\")]\n pub struct DeprecatedTupleStruct(#[stable(feature = \"rust1\", since = \"1.0.0\")] pub isize);\n-#[unstable(feature = \"test_feature\")]\n+#[unstable(feature = \"test_feature\", issue = \"0\")]\n #[deprecated(since = \"1.0.0\")]\n pub struct DeprecatedUnstableTupleStruct(#[stable(feature = \"rust1\", since = \"1.0.0\")] pub isize);\n-#[unstable(feature = \"test_feature\")]\n+#[unstable(feature = \"test_feature\", issue = \"0\")]\n pub struct UnstableTupleStruct(#[stable(feature = \"rust1\", since = \"1.0.0\")] pub isize);\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct StableTupleStruct(#[stable(feature = \"rust1\", since = \"1.0.0\")] pub isize);"}, {"sha": "b45af89dd3b73a47d8702c474d73061be1a98888", "filename": "src/test/auxiliary/lint_stability_fields.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Ftest%2Fauxiliary%2Flint_stability_fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Ftest%2Fauxiliary%2Flint_stability_fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Flint_stability_fields.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -16,45 +16,47 @@\n pub struct Stable {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub inherit: u8, // it's a lie (stable doesn't inherit)\n-    #[unstable(feature = \"test_feature\")]\n+    #[unstable(feature = \"test_feature\", issue = \"0\")]\n     pub override1: u8,\n     #[deprecated(since = \"1.0.0\")]\n-    #[unstable(feature = \"test_feature\")]\n+    #[unstable(feature = \"test_feature\", issue = \"0\")]\n     pub override2: u8,\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Stable2(#[stable(feature = \"rust1\", since = \"1.0.0\")] pub u8,\n-                   #[unstable(feature = \"test_feature\")] pub u8,\n-                   #[unstable(feature = \"test_feature\")] #[deprecated(since = \"1.0.0\")] pub u8);\n+                   #[unstable(feature = \"test_feature\", issue = \"0\")] pub u8,\n+                   #[unstable(feature = \"test_feature\", issue = \"0\")]\n+                   #[deprecated(since = \"1.0.0\")] pub u8);\n \n-#[unstable(feature = \"test_feature\")]\n+#[unstable(feature = \"test_feature\", issue = \"0\")]\n pub struct Unstable {\n     pub inherit: u8,\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub override1: u8,\n     #[deprecated(since = \"1.0.0\")]\n-    #[unstable(feature = \"test_feature\")]\n+    #[unstable(feature = \"test_feature\", issue = \"0\")]\n     pub override2: u8,\n }\n \n-#[unstable(feature = \"test_feature\")]\n+#[unstable(feature = \"test_feature\", issue = \"0\")]\n pub struct Unstable2(pub u8,\n                      #[stable(feature = \"rust1\", since = \"1.0.0\")] pub u8,\n-                     #[unstable(feature = \"test_feature\")] #[deprecated(since = \"1.0.0\")] pub u8);\n+                     #[unstable(feature = \"test_feature\", issue = \"0\")]\n+                     #[deprecated(since = \"1.0.0\")] pub u8);\n \n-#[unstable(feature = \"test_feature\")]\n+#[unstable(feature = \"test_feature\", issue = \"0\")]\n #[deprecated(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Deprecated {\n     pub inherit: u8,\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub override1: u8,\n-    #[unstable(feature = \"test_feature\")]\n+    #[unstable(feature = \"test_feature\", issue = \"0\")]\n     pub override2: u8,\n }\n \n-#[unstable(feature = \"test_feature\")]\n+#[unstable(feature = \"test_feature\", issue = \"0\")]\n #[deprecated(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Deprecated2(pub u8,\n                        #[stable(feature = \"rust1\", since = \"1.0.0\")] pub u8,\n-                       #[unstable(feature = \"test_feature\")] pub u8);\n+                       #[unstable(feature = \"test_feature\", issue = \"0\")] pub u8);"}, {"sha": "8277280f0696f239e8c3f3748987ebdb9700c749", "filename": "src/test/auxiliary/stability_cfg2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Ftest%2Fauxiliary%2Fstability_cfg2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Ftest%2Fauxiliary%2Fstability_cfg2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fstability_cfg2.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -10,7 +10,7 @@\n \n // compile-flags:--cfg foo\n \n-#![cfg_attr(foo, unstable(feature = \"test_feature\"))]\n+#![cfg_attr(foo, unstable(feature = \"test_feature\", issue = \"0\"))]\n #![cfg_attr(not(foo), stable(feature = \"test_feature\", since = \"1.0.0\"))]\n #![feature(staged_api)]\n #![staged_api]"}, {"sha": "7e675ca0bc40d5587f19461c5cbf34273418a90f", "filename": "src/test/compile-fail/lint-stability-fields.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Ftest%2Fcompile-fail%2Flint-stability-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Ftest%2Fcompile-fail%2Flint-stability-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-stability-fields.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -187,48 +187,50 @@ mod this_crate {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     struct Stable {\n         inherit: u8,\n-        #[unstable(feature = \"test_feature\")]\n+        #[unstable(feature = \"test_feature\", issue = \"0\")]\n         override1: u8,\n         #[deprecated(since = \"1.0.0\")]\n-        #[unstable(feature = \"test_feature\")]\n+        #[unstable(feature = \"test_feature\", issue = \"0\")]\n         override2: u8,\n     }\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     struct Stable2(u8,\n                    #[stable(feature = \"rust1\", since = \"1.0.0\")] u8,\n-                   #[unstable(feature = \"test_feature\")] #[deprecated(since = \"1.0.0\")] u8);\n+                   #[unstable(feature = \"test_feature\", issue = \"0\")]\n+                   #[deprecated(since = \"1.0.0\")] u8);\n \n-    #[unstable(feature = \"test_feature\")]\n+    #[unstable(feature = \"test_feature\", issue = \"0\")]\n     struct Unstable {\n         inherit: u8,\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         override1: u8,\n         #[deprecated(since = \"1.0.0\")]\n-        #[unstable(feature = \"test_feature\")]\n+        #[unstable(feature = \"test_feature\", issue = \"0\")]\n         override2: u8,\n     }\n \n-    #[unstable(feature = \"test_feature\")]\n+    #[unstable(feature = \"test_feature\", issue = \"0\")]\n     struct Unstable2(u8,\n                      #[stable(feature = \"rust1\", since = \"1.0.0\")] u8,\n-                     #[unstable(feature = \"test_feature\")] #[deprecated(since = \"1.0.0\")] u8);\n+                     #[unstable(feature = \"test_feature\", issue = \"0\")]\n+                     #[deprecated(since = \"1.0.0\")] u8);\n \n-    #[unstable(feature = \"test_feature\")]\n+    #[unstable(feature = \"test_feature\", issue = \"0\")]\n     #[deprecated(feature = \"rust1\", since = \"1.0.0\")]\n     struct Deprecated {\n         inherit: u8,\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         override1: u8,\n-        #[unstable(feature = \"test_feature\")]\n+        #[unstable(feature = \"test_feature\", issue = \"0\")]\n         override2: u8,\n     }\n \n-    #[unstable(feature = \"test_feature\")]\n+    #[unstable(feature = \"test_feature\", issue = \"0\")]\n     #[deprecated(feature = \"rust1\", since = \"1.0.0\")]\n     struct Deprecated2(u8,\n                        #[stable(feature = \"rust1\", since = \"1.0.0\")] u8,\n-                       #[unstable(feature = \"test_feature\")] u8);\n+                       #[unstable(feature = \"test_feature\", issue = \"0\")] u8);\n \n     pub fn foo() {\n         let x = Stable {"}, {"sha": "6cc73ded9750f77e473d297a9e64beb69b01dd57", "filename": "src/test/compile-fail/lint-stability.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Ftest%2Fcompile-fail%2Flint-stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Ftest%2Fcompile-fail%2Flint-stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-stability.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -257,16 +257,16 @@ mod inheritance {\n }\n \n mod this_crate {\n-    #[unstable(feature = \"test_feature\")]\n+    #[unstable(feature = \"test_feature\", issue = \"0\")]\n     #[deprecated(since = \"1.0.0\")]\n     pub fn deprecated() {}\n-    #[unstable(feature = \"test_feature\")]\n+    #[unstable(feature = \"test_feature\", issue = \"0\")]\n     #[deprecated(since = \"1.0.0\", reason = \"text\")]\n     pub fn deprecated_text() {}\n \n-    #[unstable(feature = \"test_feature\")]\n+    #[unstable(feature = \"test_feature\", issue = \"0\")]\n     pub fn unstable() {}\n-    #[unstable(feature = \"test_feature\", reason = \"text\")]\n+    #[unstable(feature = \"test_feature\", reason = \"text\", issue = \"0\")]\n     pub fn unstable_text() {}\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -278,16 +278,16 @@ mod this_crate {\n     pub struct MethodTester;\n \n     impl MethodTester {\n-        #[unstable(feature = \"test_feature\")]\n+        #[unstable(feature = \"test_feature\", issue = \"0\")]\n         #[deprecated(since = \"1.0.0\")]\n         pub fn method_deprecated(&self) {}\n-        #[unstable(feature = \"test_feature\")]\n+        #[unstable(feature = \"test_feature\", issue = \"0\")]\n         #[deprecated(since = \"1.0.0\", reason = \"text\")]\n         pub fn method_deprecated_text(&self) {}\n \n-        #[unstable(feature = \"test_feature\")]\n+        #[unstable(feature = \"test_feature\", issue = \"0\")]\n         pub fn method_unstable(&self) {}\n-        #[unstable(feature = \"test_feature\", reason = \"text\")]\n+        #[unstable(feature = \"test_feature\", reason = \"text\", issue = \"0\")]\n         pub fn method_unstable_text(&self) {}\n \n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -297,16 +297,16 @@ mod this_crate {\n     }\n \n     pub trait Trait {\n-        #[unstable(feature = \"test_feature\")]\n+        #[unstable(feature = \"test_feature\", issue = \"0\")]\n         #[deprecated(since = \"1.0.0\")]\n         fn trait_deprecated(&self) {}\n-        #[unstable(feature = \"test_feature\")]\n+        #[unstable(feature = \"test_feature\", issue = \"0\")]\n         #[deprecated(since = \"1.0.0\", reason = \"text\")]\n         fn trait_deprecated_text(&self) {}\n \n-        #[unstable(feature = \"test_feature\")]\n+        #[unstable(feature = \"test_feature\", issue = \"0\")]\n         fn trait_unstable(&self) {}\n-        #[unstable(feature = \"test_feature\", reason = \"text\")]\n+        #[unstable(feature = \"test_feature\", reason = \"text\", issue = \"0\")]\n         fn trait_unstable_text(&self) {}\n \n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -317,12 +317,12 @@ mod this_crate {\n \n     impl Trait for MethodTester {}\n \n-    #[unstable(feature = \"test_feature\")]\n+    #[unstable(feature = \"test_feature\", issue = \"0\")]\n     #[deprecated(since = \"1.0.0\")]\n     pub struct DeprecatedStruct {\n         #[stable(feature = \"test_feature\", since = \"1.0.0\")] i: isize\n     }\n-    #[unstable(feature = \"test_feature\")]\n+    #[unstable(feature = \"test_feature\", issue = \"0\")]\n     pub struct UnstableStruct {\n         #[stable(feature = \"test_feature\", since = \"1.0.0\")] i: isize\n     }\n@@ -331,29 +331,29 @@ mod this_crate {\n         #[stable(feature = \"test_feature\", since = \"1.0.0\")] i: isize\n     }\n \n-    #[unstable(feature = \"test_feature\")]\n+    #[unstable(feature = \"test_feature\", issue = \"0\")]\n     #[deprecated(since = \"1.0.0\")]\n     pub struct DeprecatedUnitStruct;\n-    #[unstable(feature = \"test_feature\")]\n+    #[unstable(feature = \"test_feature\", issue = \"0\")]\n     pub struct UnstableUnitStruct;\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub struct StableUnitStruct;\n \n     pub enum Enum {\n-        #[unstable(feature = \"test_feature\")]\n+        #[unstable(feature = \"test_feature\", issue = \"0\")]\n         #[deprecated(since = \"1.0.0\")]\n         DeprecatedVariant,\n-        #[unstable(feature = \"test_feature\")]\n+        #[unstable(feature = \"test_feature\", issue = \"0\")]\n         UnstableVariant,\n \n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         StableVariant,\n     }\n \n-    #[unstable(feature = \"test_feature\")]\n+    #[unstable(feature = \"test_feature\", issue = \"0\")]\n     #[deprecated(since = \"1.0.0\")]\n     pub struct DeprecatedTupleStruct(isize);\n-    #[unstable(feature = \"test_feature\")]\n+    #[unstable(feature = \"test_feature\", issue = \"0\")]\n     pub struct UnstableTupleStruct(isize);\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub struct StableTupleStruct(isize);\n@@ -471,23 +471,23 @@ mod this_crate {\n         foo.trait_stable();\n     }\n \n-    #[unstable(feature = \"test_feature\")]\n+    #[unstable(feature = \"test_feature\", issue = \"0\")]\n     #[deprecated(since = \"1.0.0\")]\n     fn test_fn_body() {\n         fn fn_in_body() {}\n         fn_in_body();\n     }\n \n     impl MethodTester {\n-        #[unstable(feature = \"test_feature\")]\n+        #[unstable(feature = \"test_feature\", issue = \"0\")]\n         #[deprecated(since = \"1.0.0\")]\n         fn test_method_body(&self) {\n             fn fn_in_body() {}\n             fn_in_body();\n         }\n     }\n \n-    #[unstable(feature = \"test_feature\")]\n+    #[unstable(feature = \"test_feature\", issue = \"0\")]\n     #[deprecated(since = \"1.0.0\")]\n     pub trait DeprecatedTrait {\n         fn dummy(&self) { }"}, {"sha": "1f68b7dbf5e3a19e9cce837581813ee3be1ccff2", "filename": "src/test/compile-fail/missing-stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Ftest%2Fcompile-fail%2Fmissing-stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Ftest%2Fcompile-fail%2Fmissing-stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmissing-stability.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -19,7 +19,7 @@ pub fn unmarked() {\n     ()\n }\n \n-#[unstable(feature = \"foo\")]\n+#[unstable(feature = \"foo\", issue = \"0\")]\n pub mod foo {\n     // #[unstable] is inherited\n     pub fn unmarked() {}"}, {"sha": "00c5be0f211e3d7b52e3bade9bf6c95008390fe4", "filename": "src/test/compile-fail/stability-attribute-sanity.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Ftest%2Fcompile-fail%2Fstability-attribute-sanity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Ftest%2Fcompile-fail%2Fstability-attribute-sanity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstability-attribute-sanity.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -56,11 +56,14 @@ mod bogus_attribute_types_2 {\n }\n \n mod missing_feature_names {\n-    #[unstable(since = \"a\")] //~ ERROR missing 'feature'\n+    #[unstable(since = \"a\", issue = \"0\")] //~ ERROR missing 'feature'\n     fn f1() { }\n \n+    #[unstable(feature = \"a\")]\n+    fn f2() { } //~ ERROR need to point to an issue\n+\n     #[stable(since = \"a\")] //~ ERROR missing 'feature'\n-    fn f2() { }\n+    fn f3() { }\n }\n \n mod missing_version {\n@@ -72,12 +75,12 @@ mod missing_version {\n     fn f2() { }\n }\n \n-#[unstable(feature = \"a\", since = \"b\")]\n+#[unstable(feature = \"a\", since = \"b\", issue = \"0\")]\n #[stable(feature = \"a\", since = \"b\")]\n fn multiple1() { } //~ ERROR multiple stability levels\n \n-#[unstable(feature = \"a\", since = \"b\")]\n-#[unstable(feature = \"a\", since = \"b\")]\n+#[unstable(feature = \"a\", since = \"b\", issue = \"0\")]\n+#[unstable(feature = \"a\", since = \"b\", issue = \"0\")]\n fn multiple2() { } //~ ERROR multiple stability levels\n \n #[stable(feature = \"a\", since = \"b\")]"}, {"sha": "9c24694951a5054e41b1a3b1019a13cfc2faeb37", "filename": "src/test/run-make/allow-warnings-cmdline-stability/bar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Ftest%2Frun-make%2Fallow-warnings-cmdline-stability%2Fbar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165a4e2dcaaa878a33379c6ff097c68f0ca0485/src%2Ftest%2Frun-make%2Fallow-warnings-cmdline-stability%2Fbar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fallow-warnings-cmdline-stability%2Fbar.rs?ref=9165a4e2dcaaa878a33379c6ff097c68f0ca0485", "patch": "@@ -11,6 +11,6 @@\n #![crate_type = \"lib\"]\n #![feature(staged_api)]\n #![staged_api]\n-#![unstable(feature = \"test_feature\")]\n+#![unstable(feature = \"test_feature\", issue = \"0\")]\n \n pub fn baz() { }"}]}