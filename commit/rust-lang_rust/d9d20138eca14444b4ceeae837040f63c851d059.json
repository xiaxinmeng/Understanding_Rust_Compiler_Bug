{"sha": "d9d20138eca14444b4ceeae837040f63c851d059", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5ZDIwMTM4ZWNhMTQ0NDRiNGNlZWFlODM3MDQwZjYzYzg1MWQwNTk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-04T18:32:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-04T18:32:33Z"}, "message": "Auto merge of #4966 - bradsherman:iter-nth-zero, r=flip1995\n\nNew Lint: Iter nth zero\n\nCheck for the use of `iter.nth(0)` and encourage `iter.next()` instead as it is more readable\n\nchangelog: add new lint when `iter.nth(0)` is used\n\nFixes #4957", "tree": {"sha": "11454a81236c75ce93354057a2b2bfce919a5b1a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11454a81236c75ce93354057a2b2bfce919a5b1a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9d20138eca14444b4ceeae837040f63c851d059", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9d20138eca14444b4ceeae837040f63c851d059", "html_url": "https://github.com/rust-lang/rust/commit/d9d20138eca14444b4ceeae837040f63c851d059", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9d20138eca14444b4ceeae837040f63c851d059/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05b46034ea734f2b4436b700452771652ecc0074", "url": "https://api.github.com/repos/rust-lang/rust/commits/05b46034ea734f2b4436b700452771652ecc0074", "html_url": "https://github.com/rust-lang/rust/commit/05b46034ea734f2b4436b700452771652ecc0074"}, {"sha": "ab5ff0352e9c6d9a46b5557f68abba9c004e8b93", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab5ff0352e9c6d9a46b5557f68abba9c004e8b93", "html_url": "https://github.com/rust-lang/rust/commit/ab5ff0352e9c6d9a46b5557f68abba9c004e8b93"}], "stats": {"total": 162, "additions": 154, "deletions": 8}, "files": [{"sha": "874cb056bc9eefb9ab61350a804facc72a676442", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d9d20138eca14444b4ceeae837040f63c851d059/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/d9d20138eca14444b4ceeae837040f63c851d059/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=d9d20138eca14444b4ceeae837040f63c851d059", "patch": "@@ -1141,6 +1141,7 @@ Released 2018-09-13\n [`iter_cloned_collect`]: https://rust-lang.github.io/rust-clippy/master/index.html#iter_cloned_collect\n [`iter_next_loop`]: https://rust-lang.github.io/rust-clippy/master/index.html#iter_next_loop\n [`iter_nth`]: https://rust-lang.github.io/rust-clippy/master/index.html#iter_nth\n+[`iter_nth_zero`]: https://rust-lang.github.io/rust-clippy/master/index.html#iter_nth_zero\n [`iter_skip_next`]: https://rust-lang.github.io/rust-clippy/master/index.html#iter_skip_next\n [`iterator_step_by_zero`]: https://rust-lang.github.io/rust-clippy/master/index.html#iterator_step_by_zero\n [`just_underscores_and_digits`]: https://rust-lang.github.io/rust-clippy/master/index.html#just_underscores_and_digits"}, {"sha": "3b4e22c3a392c32e87647205c8101491f24aba18", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9d20138eca14444b4ceeae837040f63c851d059/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/d9d20138eca14444b4ceeae837040f63c851d059/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=d9d20138eca14444b4ceeae837040f63c851d059", "patch": "@@ -6,7 +6,7 @@\n \n A collection of lints to catch common mistakes and improve your [Rust](https://github.com/rust-lang/rust) code.\n \n-[There are 343 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n+[There are 344 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n \n We have a bunch of lint categories to allow you to choose how much Clippy is supposed to ~~annoy~~ help you:\n "}, {"sha": "ff35b81042b7138f4efae68e6bfafdd4a3a83a17", "filename": "clippy_lints/src/inherent_impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d9d20138eca14444b4ceeae837040f63c851d059/clippy_lints%2Fsrc%2Finherent_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9d20138eca14444b4ceeae837040f63c851d059/clippy_lints%2Fsrc%2Finherent_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finherent_impl.rs?ref=d9d20138eca14444b4ceeae837040f63c851d059", "patch": "@@ -61,7 +61,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MultipleInherentImpl {\n     }\n \n     fn check_crate_post(&mut self, cx: &LateContext<'a, 'tcx>, krate: &'tcx Crate<'_>) {\n-        if let Some(item) = krate.items.values().nth(0) {\n+        if let Some(item) = krate.items.values().next() {\n             // Retrieve all inherent implementations from the crate, grouped by type\n             for impls in cx\n                 .tcx\n@@ -71,7 +71,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MultipleInherentImpl {\n             {\n                 // Filter out implementations that have generic params (type or lifetime)\n                 let mut impl_spans = impls.iter().filter_map(|impl_def| self.impls.get(impl_def));\n-                if let Some(initial_span) = impl_spans.nth(0) {\n+                if let Some(initial_span) = impl_spans.next() {\n                     impl_spans.for_each(|additional_span| {\n                         span_lint_and_then(\n                             cx,"}, {"sha": "4a0976fe8007a7daf071d73364a0b7794633366a", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d9d20138eca14444b4ceeae837040f63c851d059/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9d20138eca14444b4ceeae837040f63c851d059/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=d9d20138eca14444b4ceeae837040f63c851d059", "patch": "@@ -618,6 +618,7 @@ pub fn register_plugins(store: &mut lint::LintStore, sess: &Session, conf: &Conf\n         &methods::ITERATOR_STEP_BY_ZERO,\n         &methods::ITER_CLONED_COLLECT,\n         &methods::ITER_NTH,\n+        &methods::ITER_NTH_ZERO,\n         &methods::ITER_SKIP_NEXT,\n         &methods::MANUAL_SATURATING_ARITHMETIC,\n         &methods::MAP_FLATTEN,\n@@ -1197,6 +1198,7 @@ pub fn register_plugins(store: &mut lint::LintStore, sess: &Session, conf: &Conf\n         LintId::of(&methods::ITERATOR_STEP_BY_ZERO),\n         LintId::of(&methods::ITER_CLONED_COLLECT),\n         LintId::of(&methods::ITER_NTH),\n+        LintId::of(&methods::ITER_NTH_ZERO),\n         LintId::of(&methods::ITER_SKIP_NEXT),\n         LintId::of(&methods::MANUAL_SATURATING_ARITHMETIC),\n         LintId::of(&methods::NEW_RET_NO_SELF),\n@@ -1375,6 +1377,7 @@ pub fn register_plugins(store: &mut lint::LintStore, sess: &Session, conf: &Conf\n         LintId::of(&methods::CHARS_LAST_CMP),\n         LintId::of(&methods::INTO_ITER_ON_REF),\n         LintId::of(&methods::ITER_CLONED_COLLECT),\n+        LintId::of(&methods::ITER_NTH_ZERO),\n         LintId::of(&methods::ITER_SKIP_NEXT),\n         LintId::of(&methods::MANUAL_SATURATING_ARITHMETIC),\n         LintId::of(&methods::NEW_RET_NO_SELF),"}, {"sha": "27a8b61fdbaeda499a2e0513e2fa0723c0a35cf4", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 55, "deletions": 4, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/d9d20138eca14444b4ceeae837040f63c851d059/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9d20138eca14444b4ceeae837040f63c851d059/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=d9d20138eca14444b4ceeae837040f63c851d059", "patch": "@@ -20,6 +20,7 @@ use rustc_span::source_map::Span;\n use rustc_span::symbol::{sym, Symbol, SymbolStr};\n use syntax::ast;\n \n+use crate::consts::{constant, Constant};\n use crate::utils::usage::mutated_variables;\n use crate::utils::{\n     get_arg_name, get_parent_expr, get_trait_def_id, has_iter_method, implements_trait, in_macro, is_copy,\n@@ -756,6 +757,33 @@ declare_clippy_lint! {\n     \"using `Iterator::step_by(0)`, which will panic at runtime\"\n }\n \n+declare_clippy_lint! {\n+    /// **What it does:** Checks for the use of `iter.nth(0)`.\n+    ///\n+    /// **Why is this bad?** `iter.nth(0)` is unnecessary, and `iter.next()`\n+    /// is more readable.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust\n+    /// # use std::collections::HashSet;\n+    /// // Bad\n+    /// # let mut s = HashSet::new();\n+    /// # s.insert(1);\n+    /// let x = s.iter().nth(0);\n+    ///\n+    /// // Good\n+    /// # let mut s = HashSet::new();\n+    /// # s.insert(1);\n+    /// let x = s.iter().next();\n+    /// ```\n+    pub ITER_NTH_ZERO,\n+    style,\n+    \"replace `iter.nth(0)` with `iter.next()`\"\n+}\n+\n declare_clippy_lint! {\n     /// **What it does:** Checks for use of `.iter().nth()` (and the related\n     /// `.iter_mut().nth()`) on standard library types with O(1) element access.\n@@ -1136,6 +1164,7 @@ declare_lint_pass!(Methods => [\n     MAP_FLATTEN,\n     ITERATOR_STEP_BY_ZERO,\n     ITER_NTH,\n+    ITER_NTH_ZERO,\n     ITER_SKIP_NEXT,\n     GET_UNWRAP,\n     STRING_EXTEND_CHARS,\n@@ -1191,8 +1220,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Methods {\n             [\"as_ptr\", \"unwrap\"] | [\"as_ptr\", \"expect\"] => {\n                 lint_cstring_as_ptr(cx, expr, &arg_lists[1][0], &arg_lists[0][0])\n             },\n-            [\"nth\", \"iter\"] => lint_iter_nth(cx, expr, arg_lists[1], false),\n-            [\"nth\", \"iter_mut\"] => lint_iter_nth(cx, expr, arg_lists[1], true),\n+            [\"nth\", \"iter\"] => lint_iter_nth(cx, expr, &arg_lists, false),\n+            [\"nth\", \"iter_mut\"] => lint_iter_nth(cx, expr, &arg_lists, true),\n+            [\"nth\", ..] => lint_iter_nth_zero(cx, expr, arg_lists[0]),\n             [\"step_by\", ..] => lint_step_by(cx, expr, arg_lists[0]),\n             [\"next\", \"skip\"] => lint_iter_skip_next(cx, expr),\n             [\"collect\", \"cloned\"] => lint_iter_cloned_collect(cx, expr, arg_lists[1]),\n@@ -1983,7 +2013,6 @@ fn lint_unnecessary_fold(cx: &LateContext<'_, '_>, expr: &hir::Expr<'_>, fold_ar\n \n fn lint_step_by<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &hir::Expr<'_>, args: &'tcx [hir::Expr<'_>]) {\n     if match_trait_method(cx, expr, &paths::ITERATOR) {\n-        use crate::consts::{constant, Constant};\n         if let Some((Constant::Int(0), _)) = constant(cx, cx.tables, &args[1]) {\n             span_lint(\n                 cx,\n@@ -1998,9 +2027,10 @@ fn lint_step_by<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &hir::Expr<'_>, args\n fn lint_iter_nth<'a, 'tcx>(\n     cx: &LateContext<'a, 'tcx>,\n     expr: &hir::Expr<'_>,\n-    iter_args: &'tcx [hir::Expr<'_>],\n+    nth_and_iter_args: &[&'tcx [hir::Expr<'tcx>]],\n     is_mut: bool,\n ) {\n+    let iter_args = nth_and_iter_args[1];\n     let mut_str = if is_mut { \"_mut\" } else { \"\" };\n     let caller_type = if derefs_to_slice(cx, &iter_args[0], cx.tables.expr_ty(&iter_args[0])).is_some() {\n         \"slice\"\n@@ -2009,6 +2039,8 @@ fn lint_iter_nth<'a, 'tcx>(\n     } else if match_type(cx, cx.tables.expr_ty(&iter_args[0]), &paths::VEC_DEQUE) {\n         \"VecDeque\"\n     } else {\n+        let nth_args = nth_and_iter_args[0];\n+        lint_iter_nth_zero(cx, expr, &nth_args);\n         return; // caller is not a type that we want to lint\n     };\n \n@@ -2023,6 +2055,25 @@ fn lint_iter_nth<'a, 'tcx>(\n     );\n }\n \n+fn lint_iter_nth_zero<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &hir::Expr<'_>, nth_args: &'tcx [hir::Expr<'_>]) {\n+    if_chain! {\n+        if match_trait_method(cx, expr, &paths::ITERATOR);\n+        if let Some((Constant::Int(0), _)) = constant(cx, cx.tables, &nth_args[1]);\n+        then {\n+            let mut applicability = Applicability::MachineApplicable;\n+            span_lint_and_sugg(\n+                cx,\n+                ITER_NTH_ZERO,\n+                expr.span,\n+                \"called `.nth(0)` on a `std::iter::Iterator`\",\n+                \"try calling\",\n+                format!(\"{}.next()\", snippet_with_applicability(cx, nth_args[0].span, \"..\", &mut applicability)),\n+                applicability,\n+            );\n+        }\n+    }\n+}\n+\n fn lint_get_unwrap<'a, 'tcx>(\n     cx: &LateContext<'a, 'tcx>,\n     expr: &hir::Expr<'_>,"}, {"sha": "5bc49f7b6002c733ced0431294663fe6b5b100ef", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d9d20138eca14444b4ceeae837040f63c851d059/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9d20138eca14444b4ceeae837040f63c851d059/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=d9d20138eca14444b4ceeae837040f63c851d059", "patch": "@@ -6,7 +6,7 @@ pub use lint::Lint;\n pub use lint::LINT_LEVELS;\n \n // begin lint list, do not remove this comment, it\u2019s used in `update_lints`\n-pub const ALL_LINTS: [Lint; 343] = [\n+pub const ALL_LINTS: [Lint; 344] = [\n     Lint {\n         name: \"absurd_extreme_comparisons\",\n         group: \"correctness\",\n@@ -875,6 +875,13 @@ pub const ALL_LINTS: [Lint; 343] = [\n         deprecation: None,\n         module: \"methods\",\n     },\n+    Lint {\n+        name: \"iter_nth_zero\",\n+        group: \"style\",\n+        desc: \"replace `iter.nth(0)` with `iter.next()`\",\n+        deprecation: None,\n+        module: \"methods\",\n+    },\n     Lint {\n         name: \"iter_skip_next\",\n         group: \"style\","}, {"sha": "b54147c94d192bea1c3ec58030aebd824b4f9bf2", "filename": "tests/ui/iter_nth_zero.fixed", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/d9d20138eca14444b4ceeae837040f63c851d059/tests%2Fui%2Fiter_nth_zero.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/d9d20138eca14444b4ceeae837040f63c851d059/tests%2Fui%2Fiter_nth_zero.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiter_nth_zero.fixed?ref=d9d20138eca14444b4ceeae837040f63c851d059", "patch": "@@ -0,0 +1,31 @@\n+// run-rustfix\n+\n+#![warn(clippy::iter_nth_zero)]\n+use std::collections::HashSet;\n+\n+struct Foo {}\n+\n+impl Foo {\n+    fn nth(&self, index: usize) -> usize {\n+        index + 1\n+    }\n+}\n+\n+fn main() {\n+    let f = Foo {};\n+    f.nth(0); // lint does not apply here\n+\n+    let mut s = HashSet::new();\n+    s.insert(1);\n+    let _x = s.iter().next();\n+\n+    let mut s2 = HashSet::new();\n+    s2.insert(2);\n+    let mut iter = s2.iter();\n+    let _y = iter.next();\n+\n+    let mut s3 = HashSet::new();\n+    s3.insert(3);\n+    let mut iter2 = s3.iter();\n+    let _unwrapped = iter2.next().unwrap();\n+}"}, {"sha": "b92c7d18adb4fb658484c29a640999e23907946b", "filename": "tests/ui/iter_nth_zero.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/d9d20138eca14444b4ceeae837040f63c851d059/tests%2Fui%2Fiter_nth_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9d20138eca14444b4ceeae837040f63c851d059/tests%2Fui%2Fiter_nth_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiter_nth_zero.rs?ref=d9d20138eca14444b4ceeae837040f63c851d059", "patch": "@@ -0,0 +1,31 @@\n+// run-rustfix\n+\n+#![warn(clippy::iter_nth_zero)]\n+use std::collections::HashSet;\n+\n+struct Foo {}\n+\n+impl Foo {\n+    fn nth(&self, index: usize) -> usize {\n+        index + 1\n+    }\n+}\n+\n+fn main() {\n+    let f = Foo {};\n+    f.nth(0); // lint does not apply here\n+\n+    let mut s = HashSet::new();\n+    s.insert(1);\n+    let _x = s.iter().nth(0);\n+\n+    let mut s2 = HashSet::new();\n+    s2.insert(2);\n+    let mut iter = s2.iter();\n+    let _y = iter.nth(0);\n+\n+    let mut s3 = HashSet::new();\n+    s3.insert(3);\n+    let mut iter2 = s3.iter();\n+    let _unwrapped = iter2.nth(0).unwrap();\n+}"}, {"sha": "2b20a4ceb4ab8d9ffcc3b658348920cbdfe53ad5", "filename": "tests/ui/iter_nth_zero.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d9d20138eca14444b4ceeae837040f63c851d059/tests%2Fui%2Fiter_nth_zero.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d9d20138eca14444b4ceeae837040f63c851d059/tests%2Fui%2Fiter_nth_zero.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiter_nth_zero.stderr?ref=d9d20138eca14444b4ceeae837040f63c851d059", "patch": "@@ -0,0 +1,22 @@\n+error: called `.nth(0)` on a `std::iter::Iterator`\n+  --> $DIR/iter_nth_zero.rs:20:14\n+   |\n+LL |     let _x = s.iter().nth(0);\n+   |              ^^^^^^^^^^^^^^^ help: try calling: `s.iter().next()`\n+   |\n+   = note: `-D clippy::iter-nth-zero` implied by `-D warnings`\n+\n+error: called `.nth(0)` on a `std::iter::Iterator`\n+  --> $DIR/iter_nth_zero.rs:25:14\n+   |\n+LL |     let _y = iter.nth(0);\n+   |              ^^^^^^^^^^^ help: try calling: `iter.next()`\n+\n+error: called `.nth(0)` on a `std::iter::Iterator`\n+  --> $DIR/iter_nth_zero.rs:30:22\n+   |\n+LL |     let _unwrapped = iter2.nth(0).unwrap();\n+   |                      ^^^^^^^^^^^^ help: try calling: `iter2.next()`\n+\n+error: aborting due to 3 previous errors\n+"}]}