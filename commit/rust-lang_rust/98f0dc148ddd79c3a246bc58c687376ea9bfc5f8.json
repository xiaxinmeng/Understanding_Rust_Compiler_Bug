{"sha": "98f0dc148ddd79c3a246bc58c687376ea9bfc5f8", "node_id": "C_kwDOAAsO6NoAKDk4ZjBkYzE0OGRkZDc5YzNhMjQ2YmM1OGM2ODczNzZlYTliZmM1Zjg", "commit": {"author": {"name": "antoyo", "email": "antoyo@users.noreply.github.com", "date": "2022-10-01T16:59:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-01T16:59:27Z"}, "message": "Merge pull request #224 from rust-lang/fix/gep-release-mode\n\nAdd CI tests with a sysroot compiled in release mode", "tree": {"sha": "c5f9ad3e338e06f47784b5360969133a215cb8ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c5f9ad3e338e06f47784b5360969133a215cb8ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98f0dc148ddd79c3a246bc58c687376ea9bfc5f8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjOHHvCRBK7hj4Ov3rIwAAECcIADOzMEVyilb129w4hEzQnAdF\nLk0bDvNI66XK1TQ9B8syxZTOF3VQu3BhyZ0wcNMdbaWbtzhmDnr0xdIqDIYdaNop\nO+baUKwbtWxeEQaPkyY/SNEwzrxaZhuO5QcGqVx0K6i1XBm4BJhr/n+LPRdMYGdZ\nqcW71fvafOrNFNQMh9ymmR4NEFhvBqmdiFlmZ+U9yqSTOhPlFRYsPU6U9nGqMIh5\nMZFTuN5EptT4I0cD6uMl1No5IZBAkkEa8bMxlIObTRdccEBBdmtpAhBmaoR51tqz\nIu6j7gafvaX54dtIQ1nRmPZtryrzyyiHEYlXHF9CTazf4Ol3p+cS3NjbwGM3TEo=\n=80fJ\n-----END PGP SIGNATURE-----\n", "payload": "tree c5f9ad3e338e06f47784b5360969133a215cb8ba\nparent 8ead881fbf7355fa45f0cecf72e6913fc7027619\nparent 908304e2571e5f58937a98fd9a5adc37f660c62a\nauthor antoyo <antoyo@users.noreply.github.com> 1664643567 -0400\ncommitter GitHub <noreply@github.com> 1664643567 -0400\n\nMerge pull request #224 from rust-lang/fix/gep-release-mode\n\nAdd CI tests with a sysroot compiled in release mode"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98f0dc148ddd79c3a246bc58c687376ea9bfc5f8", "html_url": "https://github.com/rust-lang/rust/commit/98f0dc148ddd79c3a246bc58c687376ea9bfc5f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98f0dc148ddd79c3a246bc58c687376ea9bfc5f8/comments", "author": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ead881fbf7355fa45f0cecf72e6913fc7027619", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ead881fbf7355fa45f0cecf72e6913fc7027619", "html_url": "https://github.com/rust-lang/rust/commit/8ead881fbf7355fa45f0cecf72e6913fc7027619"}, {"sha": "908304e2571e5f58937a98fd9a5adc37f660c62a", "url": "https://api.github.com/repos/rust-lang/rust/commits/908304e2571e5f58937a98fd9a5adc37f660c62a", "html_url": "https://github.com/rust-lang/rust/commit/908304e2571e5f58937a98fd9a5adc37f660c62a"}], "stats": {"total": 167, "additions": 146, "deletions": 21}, "files": [{"sha": "26b26e3f8410674185295f586ec464b24cdabd8d", "filename": ".github/workflows/release.yml", "status": "added", "additions": 112, "deletions": 0, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/98f0dc148ddd79c3a246bc58c687376ea9bfc5f8/.github%2Fworkflows%2Frelease.yml", "raw_url": "https://github.com/rust-lang/rust/raw/98f0dc148ddd79c3a246bc58c687376ea9bfc5f8/.github%2Fworkflows%2Frelease.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Frelease.yml?ref=98f0dc148ddd79c3a246bc58c687376ea9bfc5f8", "patch": "@@ -0,0 +1,112 @@\n+name: CI with sysroot compiled in release mode\n+\n+on:\n+  - push\n+  - pull_request\n+\n+permissions:\n+  contents: read\n+\n+env:\n+  # Enable backtraces for easier debugging\n+  RUST_BACKTRACE: 1\n+\n+jobs:\n+  build:\n+    runs-on: ubuntu-latest\n+\n+    strategy:\n+      fail-fast: false\n+      matrix:\n+        libgccjit_version:\n+          - { gcc: \"libgccjit.so\", artifacts_branch: \"master\" }\n+\n+    steps:\n+    - uses: actions/checkout@v2\n+\n+    - uses: actions/checkout@v2\n+      with:\n+        repository: llvm/llvm-project\n+        path: llvm\n+\n+    - name: Install packages\n+      run: sudo apt-get install ninja-build ripgrep\n+\n+    - name: Download artifact\n+      uses: dawidd6/action-download-artifact@v2\n+      with:\n+          workflow: main.yml\n+          name: ${{ matrix.libgccjit_version.gcc }}\n+          path: gcc-build\n+          repo: antoyo/gcc\n+          branch: ${{ matrix.libgccjit_version.artifacts_branch }}\n+          event: push\n+          search_artifacts: true # Because, instead, the action only check the last job ran and that won't work since we want multiple artifacts.\n+\n+    - name: Setup path to libgccjit\n+      run: |\n+          echo $(readlink -f gcc-build) > gcc_path\n+          # NOTE: the filename is still libgccjit.so even when the artifact name is different.\n+          ln gcc-build/libgccjit.so gcc-build/libgccjit.so.0\n+\n+    - name: Set env\n+      run: |\n+        echo \"LIBRARY_PATH=$(cat gcc_path)\" >> $GITHUB_ENV\n+        echo \"LD_LIBRARY_PATH=$(cat gcc_path)\" >> $GITHUB_ENV\n+        echo \"workspace=\"$GITHUB_WORKSPACE >> $GITHUB_ENV\n+\n+    - name: Set RUST_COMPILER_RT_ROOT\n+      run: echo \"RUST_COMPILER_RT_ROOT=\"${{ env.workspace }}/llvm/compiler-rt >> $GITHUB_ENV\n+\n+    # https://github.com/actions/cache/issues/133\n+    - name: Fixup owner of ~/.cargo/\n+      # Don't remove the trailing /. It is necessary to follow the symlink.\n+      run: sudo chown -R $(whoami):$(id -ng) ~/.cargo/\n+\n+    - name: Cache cargo installed crates\n+      uses: actions/cache@v1.1.2\n+      with:\n+        path: ~/.cargo/bin\n+        key: cargo-installed-crates2-ubuntu-latest\n+\n+    - name: Cache cargo registry\n+      uses: actions/cache@v1\n+      with:\n+        path: ~/.cargo/registry\n+        key: ${{ runner.os }}-cargo-registry2-${{ hashFiles('**/Cargo.lock') }}\n+\n+    - name: Cache cargo index\n+      uses: actions/cache@v1\n+      with:\n+        path: ~/.cargo/git\n+        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}\n+\n+    - name: Cache cargo target dir\n+      uses: actions/cache@v1.1.2\n+      with:\n+        path: target\n+        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('rust-toolchain') }}\n+\n+    - name: Build\n+      run: |\n+        ./prepare_build.sh\n+        ./build.sh --release --release-sysroot\n+        cargo test\n+        ./clean_all.sh\n+\n+    - name: Prepare dependencies\n+      run: |\n+        git config --global user.email \"user@example.com\"\n+        git config --global user.name \"User\"\n+        ./prepare.sh\n+\n+    # Compile is a separate step, as the actions-rs/cargo action supports error annotations\n+    - name: Compile\n+      uses: actions-rs/cargo@v1.0.3\n+      with:\n+        command: build\n+        args: --release\n+\n+    - name: Run tests\n+      run: |\n+        ./test.sh --release --clean --release-sysroot --build-sysroot --mini-tests --std-tests # --test-libcore # FIXME(antoyo): libcore tests fail."}, {"sha": "5f54ac4ebc69a63c5e372f3b23f73e0587f04901", "filename": "src/back/write.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/98f0dc148ddd79c3a246bc58c687376ea9bfc5f8/src%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98f0dc148ddd79c3a246bc58c687376ea9bfc5f8/src%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fback%2Fwrite.rs?ref=98f0dc148ddd79c3a246bc58c687376ea9bfc5f8", "patch": "@@ -57,6 +57,7 @@ pub(crate) unsafe fn codegen(cgcx: &CodegenContext<GccCodegenBackend>, _diag_han\n                 if env::var(\"CG_GCCJIT_DUMP_TO_FILE\").as_deref() == Ok(\"1\") {\n                     let _ = fs::create_dir(\"/tmp/gccjit_dumps\");\n                     let path = &format!(\"/tmp/gccjit_dumps/{}.c\", module.name);\n+                    context.set_debug_info(true);\n                     context.dump_to_file(path, true);\n                 }\n                 context.compile_to_file(OutputKind::ObjectFile, obj_out.to_str().expect(\"path to str\"));"}, {"sha": "b60382496c2a528ae18e816e5c86b962a1ed4def", "filename": "src/base.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/98f0dc148ddd79c3a246bc58c687376ea9bfc5f8/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98f0dc148ddd79c3a246bc58c687376ea9bfc5f8/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=98f0dc148ddd79c3a246bc58c687376ea9bfc5f8", "patch": "@@ -126,6 +126,9 @@ pub fn compile_codegen_unit<'tcx>(tcx: TyCtxt<'tcx>, cgu_name: Symbol, supports_\n             context.add_command_line_option(\"-fdata-sections\");\n         }\n \n+        if env::var(\"CG_GCCJIT_DUMP_TREE_ALL\").as_deref() == Ok(\"1\") {\n+            context.add_command_line_option(\"-fdump-tree-all\");\n+        }\n         if env::var(\"CG_GCCJIT_DUMP_CODE\").as_deref() == Ok(\"1\") {\n             context.set_dump_code_on_compile(true);\n         }"}, {"sha": "f0582fdcef2decbbf763b2c1dad26422f6ce59b3", "filename": "src/builder.rs", "status": "modified", "additions": 19, "deletions": 14, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/98f0dc148ddd79c3a246bc58c687376ea9bfc5f8/src%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98f0dc148ddd79c3a246bc58c687376ea9bfc5f8/src%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbuilder.rs?ref=98f0dc148ddd79c3a246bc58c687376ea9bfc5f8", "patch": "@@ -858,26 +858,31 @@ impl<'a, 'gcc, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'gcc, 'tcx> {\n     }\n \n     fn gep(&mut self, _typ: Type<'gcc>, ptr: RValue<'gcc>, indices: &[RValue<'gcc>]) -> RValue<'gcc> {\n-        let mut result = ptr;\n+        let ptr_type = ptr.get_type();\n+        let mut pointee_type = ptr.get_type();\n+        // NOTE: we cannot use array indexing here like in inbounds_gep because array indexing is\n+        // always considered in bounds in GCC (TODO(antoyo): to be verified).\n+        // So, we have to cast to a number.\n+        let mut result = self.context.new_bitcast(None, ptr, self.sizet_type);\n+        // FIXME(antoyo): if there were more than 1 index, this code is probably wrong and would\n+        // require dereferencing the pointer.\n         for index in indices {\n-            result = self.context.new_array_access(None, result, *index).get_address(None).to_rvalue();\n+            pointee_type = pointee_type.get_pointee().expect(\"pointee type\");\n+            let pointee_size = self.context.new_rvalue_from_int(index.get_type(), pointee_type.get_size() as i32);\n+            result = result + self.gcc_int_cast(*index * pointee_size, self.sizet_type);\n         }\n-        result\n+        self.context.new_bitcast(None, result, ptr_type)\n     }\n \n     fn inbounds_gep(&mut self, _typ: Type<'gcc>, ptr: RValue<'gcc>, indices: &[RValue<'gcc>]) -> RValue<'gcc> {\n-        // FIXME(antoyo): would be safer if doing the same thing (loop) as gep.\n-        // TODO(antoyo): specify inbounds somehow.\n-        match indices.len() {\n-            1 => {\n-                self.context.new_array_access(None, ptr, indices[0]).get_address(None)\n-            },\n-            2 => {\n-                let array = ptr.dereference(None); // TODO(antoyo): assert that first index is 0?\n-                self.context.new_array_access(None, array, indices[1]).get_address(None)\n-            },\n-            _ => unimplemented!(),\n+        // NOTE: array indexing is always considered in bounds in GCC (TODO(antoyo): to be verified).\n+        let mut indices = indices.into_iter();\n+        let index = indices.next().expect(\"first index in inbounds_gep\");\n+        let mut result = self.context.new_array_access(None, ptr, *index);\n+        for index in indices {\n+            result = self.context.new_array_access(None, result, *index);\n         }\n+        result.get_address(None)\n     }\n \n     fn struct_gep(&mut self, value_type: Type<'gcc>, ptr: RValue<'gcc>, idx: u64) -> RValue<'gcc> {"}, {"sha": "0cf1204791d336c75afe591660e994e7e94fb36a", "filename": "src/int.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/98f0dc148ddd79c3a246bc58c687376ea9bfc5f8/src%2Fint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98f0dc148ddd79c3a246bc58c687376ea9bfc5f8/src%2Fint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fint.rs?ref=98f0dc148ddd79c3a246bc58c687376ea9bfc5f8", "patch": "@@ -389,18 +389,22 @@ impl<'a, 'gcc, 'tcx> Builder<'a, 'gcc, 'tcx> {\n                 };\n             self.context.new_comparison(None, op, cmp, self.context.new_rvalue_from_int(self.int_type, limit))\n         }\n+        else if a_type.get_pointee().is_some() && b_type.get_pointee().is_some() {\n+            // NOTE: gcc cannot compare pointers to different objects, but rustc does that, so cast them to usize.\n+            lhs = self.context.new_bitcast(None, lhs, self.usize_type);\n+            rhs = self.context.new_bitcast(None, rhs, self.usize_type);\n+            self.context.new_comparison(None, op.to_gcc_comparison(), lhs, rhs)\n+        }\n         else {\n-            let left_type = lhs.get_type();\n-            let right_type = rhs.get_type();\n-            if left_type != right_type {\n+            if a_type != b_type {\n                 // NOTE: because libgccjit cannot compare function pointers.\n-                if left_type.dyncast_function_ptr_type().is_some() && right_type.dyncast_function_ptr_type().is_some() {\n+                if a_type.dyncast_function_ptr_type().is_some() && b_type.dyncast_function_ptr_type().is_some() {\n                     lhs = self.context.new_cast(None, lhs, self.usize_type.make_pointer());\n                     rhs = self.context.new_cast(None, rhs, self.usize_type.make_pointer());\n                 }\n                 // NOTE: hack because we try to cast a vector type to the same vector type.\n-                else if format!(\"{:?}\", left_type) != format!(\"{:?}\", right_type) {\n-                    rhs = self.context.new_cast(None, rhs, left_type);\n+                else if format!(\"{:?}\", a_type) != format!(\"{:?}\", b_type) {\n+                    rhs = self.context.new_cast(None, rhs, a_type);\n                 }\n             }\n             self.context.new_comparison(None, op.to_gcc_comparison(), lhs, rhs)"}, {"sha": "4841922416c78f61a59cabe252392eca088016a4", "filename": "test.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98f0dc148ddd79c3a246bc58c687376ea9bfc5f8/test.sh", "raw_url": "https://github.com/rust-lang/rust/raw/98f0dc148ddd79c3a246bc58c687376ea9bfc5f8/test.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test.sh?ref=98f0dc148ddd79c3a246bc58c687376ea9bfc5f8", "patch": "@@ -44,7 +44,7 @@ while [[ $# -gt 0 ]]; do\n             shift\n             ;;\n         \"--test-rustc\")\n-            funcs=(test_rustc)\n+            funcs+=(test_rustc)\n             shift\n             ;;\n         \"--test-successful-rustc\")"}]}