{"sha": "ce8400bbfd8786003a112633992a3ec2b003859b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlODQwMGJiZmQ4Nzg2MDAzYTExMjYzMzk5MmEzZWMyYjAwMzg1OWI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-08-09T15:56:19Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-08-09T15:56:19Z"}, "message": "internal: drop latest requests tracking\n\nFrom the dawn of time, when dinosaurs roamed the and we didn't have\nhierarchical profiling, there was the `latest_requests` infra we used to\ntrack the time of ten last requests.\n\nToday, no one is actually using it and, what's more, it itself became\npretty useless -- LSP grew way more chatty, and 10 requests don't really\npaint any kind of picture.\n\nPersonally, it's been years since I last looked at latest requests in\nthe status output.\n\nSo, let's remove a tiny bit of state from the big ball of complexity\nthat is `GlobalState` and `main_loop`!", "tree": {"sha": "c98b4418ad206d6fbdf4e84b2d4aef439174b9b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c98b4418ad206d6fbdf4e84b2d4aef439174b9b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce8400bbfd8786003a112633992a3ec2b003859b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce8400bbfd8786003a112633992a3ec2b003859b", "html_url": "https://github.com/rust-lang/rust/commit/ce8400bbfd8786003a112633992a3ec2b003859b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce8400bbfd8786003a112633992a3ec2b003859b/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0648494e61b1ab277697ff4cc799f98f516a07d", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0648494e61b1ab277697ff4cc799f98f516a07d", "html_url": "https://github.com/rust-lang/rust/commit/d0648494e61b1ab277697ff4cc799f98f516a07d"}], "stats": {"total": 54, "additions": 1, "deletions": 53}, "files": [{"sha": "a7ebbcd28bc92520acdcb307cacb9a6aa7c4c93a", "filename": "crates/rust-analyzer/src/global_state.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ce8400bbfd8786003a112633992a3ec2b003859b/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce8400bbfd8786003a112633992a3ec2b003859b/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs?ref=ce8400bbfd8786003a112633992a3ec2b003859b", "patch": "@@ -27,7 +27,6 @@ use crate::{\n     mem_docs::MemDocs,\n     op_queue::OpQueue,\n     reload::SourceRootConfig,\n-    request_metrics::{LatestRequests, RequestMetrics},\n     thread_pool::TaskPool,\n     to_proto::url_from_abs_path,\n     Result,\n@@ -105,16 +104,13 @@ pub(crate) struct GlobalState {\n         OpQueue<(Arc<Vec<ProjectWorkspace>>, Vec<anyhow::Result<WorkspaceBuildScripts>>)>,\n \n     pub(crate) prime_caches_queue: OpQueue<()>,\n-\n-    latest_requests: Arc<RwLock<LatestRequests>>,\n }\n \n /// An immutable snapshot of the world's state at a point in time.\n pub(crate) struct GlobalStateSnapshot {\n     pub(crate) config: Arc<Config>,\n     pub(crate) analysis: Analysis,\n     pub(crate) check_fixes: CheckFixes,\n-    pub(crate) latest_requests: Arc<RwLock<LatestRequests>>,\n     mem_docs: MemDocs,\n     pub(crate) semantic_tokens_cache: Arc<Mutex<FxHashMap<Url, SemanticTokens>>>,\n     vfs: Arc<RwLock<(vfs::Vfs, FxHashMap<FileId, LineEndings>)>>,\n@@ -169,7 +165,6 @@ impl GlobalState {\n             prime_caches_queue: OpQueue::default(),\n \n             fetch_build_data_queue: OpQueue::default(),\n-            latest_requests: Default::default(),\n         };\n         // Apply any required database inputs from the config.\n         this.update_configuration(config);\n@@ -230,7 +225,6 @@ impl GlobalState {\n             workspaces: Arc::clone(&self.workspaces),\n             analysis: self.analysis_host.analysis(),\n             vfs: Arc::clone(&self.vfs),\n-            latest_requests: Arc::clone(&self.latest_requests),\n             check_fixes: Arc::clone(&self.diagnostics.check_fixes),\n             mem_docs: self.mem_docs.clone(),\n             semantic_tokens_cache: Arc::clone(&self.semantic_tokens_cache),\n@@ -270,9 +264,7 @@ impl GlobalState {\n     pub(crate) fn respond(&mut self, response: lsp_server::Response) {\n         if let Some((method, start)) = self.req_queue.incoming.complete(response.id.clone()) {\n             let duration = start.elapsed();\n-            log::info!(\"handled req#{} in {:?}\", response.id, duration);\n-            let metrics = RequestMetrics { id: response.id.clone(), method, duration };\n-            self.latest_requests.write().record(metrics);\n+            log::info!(\"handled {} - ({}) in {:0.2?}\", method, response.id, duration);\n             self.send(response.into());\n         }\n     }"}, {"sha": "460271a269f253b3b05390557240906476074fe6", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ce8400bbfd8786003a112633992a3ec2b003859b/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce8400bbfd8786003a112633992a3ec2b003859b/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=ce8400bbfd8786003a112633992a3ec2b003859b", "patch": "@@ -79,12 +79,6 @@ pub(crate) fn handle_analyzer_status(\n             .status(file_id)\n             .unwrap_or_else(|_| \"Analysis retrieval was cancelled\".to_owned()),\n     );\n-    format_to!(buf, \"\\n\\nRequests:\\n\");\n-    let requests = snap.latest_requests.read();\n-    for (is_last, r) in requests.iter() {\n-        let mark = if is_last { \"*\" } else { \" \" };\n-        format_to!(buf, \"{}{:4} {:<36}{}ms\\n\", mark, r.id, r.method, r.duration.as_millis());\n-    }\n     Ok(buf)\n }\n "}, {"sha": "c8c996f0da569d9bc76ba37f44943d9aa29f24eb", "filename": "crates/rust-analyzer/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ce8400bbfd8786003a112633992a3ec2b003859b/crates%2Frust-analyzer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce8400bbfd8786003a112633992a3ec2b003859b/crates%2Frust-analyzer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flib.rs?ref=ce8400bbfd8786003a112633992a3ec2b003859b", "patch": "@@ -30,7 +30,6 @@ mod semantic_tokens;\n mod markdown;\n mod diagnostics;\n mod line_index;\n-mod request_metrics;\n mod lsp_utils;\n mod thread_pool;\n mod mem_docs;"}, {"sha": "b1019e2d6fc5b5de87d53f83451a98b694e283d9", "filename": "crates/rust-analyzer/src/request_metrics.rs", "status": "removed", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/d0648494e61b1ab277697ff4cc799f98f516a07d/crates%2Frust-analyzer%2Fsrc%2Frequest_metrics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0648494e61b1ab277697ff4cc799f98f516a07d/crates%2Frust-analyzer%2Fsrc%2Frequest_metrics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Frequest_metrics.rs?ref=d0648494e61b1ab277697ff4cc799f98f516a07d", "patch": "@@ -1,37 +0,0 @@\n-//! Records stats about requests\n-use std::time::Duration;\n-\n-use lsp_server::RequestId;\n-\n-#[derive(Debug)]\n-pub(crate) struct RequestMetrics {\n-    pub(crate) id: RequestId,\n-    pub(crate) method: String,\n-    pub(crate) duration: Duration,\n-}\n-\n-const N_COMPLETED_REQUESTS: usize = 10;\n-\n-#[derive(Debug, Default)]\n-pub(crate) struct LatestRequests {\n-    // hand-rolling VecDeque here to print things in a nicer way\n-    buf: [Option<RequestMetrics>; N_COMPLETED_REQUESTS],\n-    idx: usize,\n-}\n-\n-impl LatestRequests {\n-    pub(crate) fn record(&mut self, request: RequestMetrics) {\n-        // special case: don't track status request itself\n-        if request.method == \"rust-analyzer/analyzerStatus\" {\n-            return;\n-        }\n-        let idx = self.idx;\n-        self.buf[idx] = Some(request);\n-        self.idx = (idx + 1) % N_COMPLETED_REQUESTS;\n-    }\n-\n-    pub(crate) fn iter(&self) -> impl Iterator<Item = (bool, &RequestMetrics)> {\n-        let idx = self.idx;\n-        self.buf.iter().enumerate().filter_map(move |(i, req)| Some((i == idx, req.as_ref()?)))\n-    }\n-}"}]}