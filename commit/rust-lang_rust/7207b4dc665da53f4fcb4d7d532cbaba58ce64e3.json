{"sha": "7207b4dc665da53f4fcb4d7d532cbaba58ce64e3", "node_id": "C_kwDOAAsO6NoAKDcyMDdiNGRjNjY1ZGE1M2Y0ZmNiNGQ3ZDUzMmNiYWJhNThjZTY0ZTM", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-09-19T14:08:40Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-09-19T14:08:40Z"}, "message": "remove `FnCtxt::to_const`", "tree": {"sha": "7d943ac2eaddbee892b98b313b2ba866c1e5dbfb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d943ac2eaddbee892b98b313b2ba866c1e5dbfb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7207b4dc665da53f4fcb4d7d532cbaba58ce64e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7207b4dc665da53f4fcb4d7d532cbaba58ce64e3", "html_url": "https://github.com/rust-lang/rust/commit/7207b4dc665da53f4fcb4d7d532cbaba58ce64e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7207b4dc665da53f4fcb4d7d532cbaba58ce64e3/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "503e19d01e941b88bf6d5b28e9108d046abcfa2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/503e19d01e941b88bf6d5b28e9108d046abcfa2d", "html_url": "https://github.com/rust-lang/rust/commit/503e19d01e941b88bf6d5b28e9108d046abcfa2d"}], "stats": {"total": 16, "additions": 7, "deletions": 9}, "files": [{"sha": "4af723944bc8317f5f2e9c19068f7b9debc8decf", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7207b4dc665da53f4fcb4d7d532cbaba58ce64e3/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7207b4dc665da53f4fcb4d7d532cbaba58ce64e3/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=7207b4dc665da53f4fcb4d7d532cbaba58ce64e3", "patch": "@@ -489,18 +489,16 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     pub fn array_length_to_const(&self, length: &hir::ArrayLen) -> ty::Const<'tcx> {\n         match length {\n             &hir::ArrayLen::Infer(_, span) => self.ct_infer(self.tcx.types.usize, None, span),\n-            hir::ArrayLen::Body(anon_const) => self.to_const(anon_const),\n+            hir::ArrayLen::Body(anon_const) => {\n+                let const_def_id = self.tcx.hir().local_def_id(anon_const.hir_id);\n+                let span = self.tcx.hir().span(anon_const.hir_id);\n+                let c = ty::Const::from_anon_const(self.tcx, const_def_id);\n+                self.register_wf_obligation(c.into(), span, ObligationCauseCode::WellFormed(None));\n+                self.normalize_associated_types_in(span, c)\n+            }\n         }\n     }\n \n-    pub fn to_const(&self, ast_c: &hir::AnonConst) -> ty::Const<'tcx> {\n-        let const_def_id = self.tcx.hir().local_def_id(ast_c.hir_id);\n-        let span = self.tcx.hir().span(ast_c.hir_id);\n-        let c = ty::Const::from_anon_const(self.tcx, const_def_id);\n-        self.register_wf_obligation(c.into(), span, ObligationCauseCode::WellFormed(None));\n-        self.normalize_associated_types_in(span, c)\n-    }\n-\n     pub fn const_arg_to_const(\n         &self,\n         ast_c: &hir::AnonConst,"}]}