{"sha": "ed6aebbfecb56ae9ec2702572b70d6e350433de2", "node_id": "C_kwDOAAsO6NoAKGVkNmFlYmJmZWNiNTZhZTllYzI3MDI1NzJiNzBkNmUzNTA0MzNkZTI", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-19T01:20:34Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-19T16:15:28Z"}, "message": "trait solver: Implement Fn traits and tuple trait", "tree": {"sha": "9529b05d8fe1669c328a28b0b291b0fedaa74e04", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9529b05d8fe1669c328a28b0b291b0fedaa74e04"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed6aebbfecb56ae9ec2702572b70d6e350433de2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed6aebbfecb56ae9ec2702572b70d6e350433de2", "html_url": "https://github.com/rust-lang/rust/commit/ed6aebbfecb56ae9ec2702572b70d6e350433de2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed6aebbfecb56ae9ec2702572b70d6e350433de2/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69890b2df447e7d3febff1a0f8974f3fcf694128", "url": "https://api.github.com/repos/rust-lang/rust/commits/69890b2df447e7d3febff1a0f8974f3fcf694128", "html_url": "https://github.com/rust-lang/rust/commit/69890b2df447e7d3febff1a0f8974f3fcf694128"}], "stats": {"total": 177, "additions": 170, "deletions": 7}, "files": [{"sha": "31c1bc9ecc062c7870242474521939b59e2279ee", "filename": "compiler/rustc_trait_selection/src/solve/assembly.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ed6aebbfecb56ae9ec2702572b70d6e350433de2/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6aebbfecb56ae9ec2702572b70d6e350433de2/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly.rs?ref=ed6aebbfecb56ae9ec2702572b70d6e350433de2", "patch": "@@ -122,6 +122,17 @@ pub(super) trait GoalKind<'tcx>: TypeFoldable<'tcx> + Copy + Eq {\n         ecx: &mut EvalCtxt<'_, 'tcx>,\n         goal: Goal<'tcx, Self>,\n     ) -> QueryResult<'tcx>;\n+\n+    fn consider_builtin_fn_trait_candidates(\n+        ecx: &mut EvalCtxt<'_, 'tcx>,\n+        goal: Goal<'tcx, Self>,\n+        kind: ty::ClosureKind,\n+    ) -> QueryResult<'tcx>;\n+\n+    fn consider_builtin_tuple_candidate(\n+        ecx: &mut EvalCtxt<'_, 'tcx>,\n+        goal: Goal<'tcx, Self>,\n+    ) -> QueryResult<'tcx>;\n }\n \n impl<'tcx> EvalCtxt<'_, 'tcx> {\n@@ -137,7 +148,9 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n         if goal.predicate.self_ty().is_ty_var() {\n             return vec![Candidate {\n                 source: CandidateSource::BuiltinImpl,\n-                result: self.make_canonical_response(Certainty::Maybe(MaybeCause::Ambiguity)).unwrap(),\n+                result: self\n+                    .make_canonical_response(Certainty::Maybe(MaybeCause::Ambiguity))\n+                    .unwrap(),\n             }];\n         }\n \n@@ -244,6 +257,10 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n             G::consider_builtin_copy_clone_candidate(self, goal)\n         } else if lang_items.pointer_sized() == Some(trait_def_id) {\n             G::consider_builtin_pointer_sized_candidate(self, goal)\n+        } else if let Some(kind) = self.tcx().fn_trait_kind_from_def_id(trait_def_id) {\n+            G::consider_builtin_fn_trait_candidates(self, goal, kind)\n+        } else if lang_items.tuple_trait() == Some(trait_def_id) {\n+            G::consider_builtin_tuple_candidate(self, goal)\n         } else {\n             Err(NoSolution)\n         };"}, {"sha": "e39fa05339286ab86d9d18e512eec92ae0448c3c", "filename": "compiler/rustc_trait_selection/src/solve/project_goals.rs", "status": "modified", "additions": 36, "deletions": 2, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/ed6aebbfecb56ae9ec2702572b70d6e350433de2/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6aebbfecb56ae9ec2702572b70d6e350433de2/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs?ref=ed6aebbfecb56ae9ec2702572b70d6e350433de2", "patch": "@@ -2,6 +2,7 @@ use crate::traits::{specialization_graph, translate_substs};\n \n use super::assembly::{self, Candidate, CandidateSource};\n use super::infcx_ext::InferCtxtExt;\n+use super::trait_goals::structural_traits;\n use super::{Certainty, EvalCtxt, Goal, MaybeCause, QueryResult};\n use rustc_errors::ErrorGuaranteed;\n use rustc_hir::def::DefKind;\n@@ -11,9 +12,9 @@ use rustc_infer::traits::query::NoSolution;\n use rustc_infer::traits::specialization_graph::LeafDef;\n use rustc_infer::traits::Reveal;\n use rustc_middle::ty::fast_reject::{DeepRejectCtxt, TreatParams};\n-use rustc_middle::ty::TypeVisitable;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_middle::ty::{ProjectionPredicate, TypeSuperVisitable, TypeVisitor};\n+use rustc_middle::ty::{ToPredicate, TypeVisitable};\n use rustc_span::DUMMY_SP;\n use std::iter;\n use std::ops::ControlFlow;\n@@ -353,11 +354,44 @@ impl<'tcx> assembly::GoalKind<'tcx> for ProjectionPredicate<'tcx> {\n     }\n \n     fn consider_builtin_pointer_sized_candidate(\n-        ecx: &mut EvalCtxt<'_, 'tcx>,\n+        _ecx: &mut EvalCtxt<'_, 'tcx>,\n         goal: Goal<'tcx, Self>,\n     ) -> QueryResult<'tcx> {\n         bug!(\"`PointerSized` does not have an associated type: {:?}\", goal);\n     }\n+\n+    fn consider_builtin_fn_trait_candidates(\n+        ecx: &mut EvalCtxt<'_, 'tcx>,\n+        goal: Goal<'tcx, Self>,\n+        goal_kind: ty::ClosureKind,\n+    ) -> QueryResult<'tcx> {\n+        if let Some(tupled_inputs_and_output) =\n+            structural_traits::extract_tupled_inputs_and_output_from_callable(\n+                ecx.tcx(),\n+                goal.predicate.self_ty(),\n+                goal_kind,\n+            )?\n+        {\n+            let pred = tupled_inputs_and_output\n+                .map_bound(|(inputs, output)| ty::ProjectionPredicate {\n+                    projection_ty: ecx\n+                        .tcx()\n+                        .mk_alias_ty(goal.predicate.def_id(), [goal.predicate.self_ty(), inputs]),\n+                    term: output.into(),\n+                })\n+                .to_predicate(ecx.tcx());\n+            Self::consider_assumption(ecx, goal, pred)\n+        } else {\n+            ecx.make_canonical_response(Certainty::Maybe(MaybeCause::Ambiguity))\n+        }\n+    }\n+\n+    fn consider_builtin_tuple_candidate(\n+        _ecx: &mut EvalCtxt<'_, 'tcx>,\n+        goal: Goal<'tcx, Self>,\n+    ) -> QueryResult<'tcx> {\n+        bug!(\"`Tuple` does not have an associated type: {:?}\", goal);\n+    }\n }\n \n /// This behavior is also implemented in `rustc_ty_utils` and in the old `project` code."}, {"sha": "9985d7181bb7dd000edebae5c2a0f695309e3b9d", "filename": "compiler/rustc_trait_selection/src/solve/trait_goals.rs", "status": "modified", "additions": 38, "deletions": 3, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/ed6aebbfecb56ae9ec2702572b70d6e350433de2/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6aebbfecb56ae9ec2702572b70d6e350433de2/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs?ref=ed6aebbfecb56ae9ec2702572b70d6e350433de2", "patch": "@@ -4,16 +4,16 @@ use std::iter;\n \n use super::assembly::{self, Candidate, CandidateSource};\n use super::infcx_ext::InferCtxtExt;\n-use super::{Certainty, EvalCtxt, Goal, QueryResult};\n+use super::{Certainty, EvalCtxt, Goal, MaybeCause, QueryResult};\n use rustc_hir::def_id::DefId;\n use rustc_infer::infer::InferCtxt;\n use rustc_infer::traits::query::NoSolution;\n use rustc_middle::ty::fast_reject::{DeepRejectCtxt, TreatParams};\n-use rustc_middle::ty::{self, Ty, TyCtxt};\n+use rustc_middle::ty::{self, ToPredicate, Ty, TyCtxt};\n use rustc_middle::ty::{TraitPredicate, TypeVisitable};\n use rustc_span::DUMMY_SP;\n \n-mod structural_traits;\n+pub mod structural_traits;\n \n impl<'tcx> assembly::GoalKind<'tcx> for TraitPredicate<'tcx> {\n     fn self_ty(self) -> Ty<'tcx> {\n@@ -150,6 +150,41 @@ impl<'tcx> assembly::GoalKind<'tcx> for TraitPredicate<'tcx> {\n             Err(NoSolution)\n         }\n     }\n+\n+    fn consider_builtin_fn_trait_candidates(\n+        ecx: &mut EvalCtxt<'_, 'tcx>,\n+        goal: Goal<'tcx, Self>,\n+        goal_kind: ty::ClosureKind,\n+    ) -> QueryResult<'tcx> {\n+        if let Some(tupled_inputs_and_output) =\n+            structural_traits::extract_tupled_inputs_and_output_from_callable(\n+                ecx.tcx(),\n+                goal.predicate.self_ty(),\n+                goal_kind,\n+            )?\n+        {\n+            let pred = tupled_inputs_and_output\n+                .map_bound(|(inputs, _)| {\n+                    ecx.tcx()\n+                        .mk_trait_ref(goal.predicate.def_id(), [goal.predicate.self_ty(), inputs])\n+                })\n+                .to_predicate(ecx.tcx());\n+            Self::consider_assumption(ecx, goal, pred)\n+        } else {\n+            ecx.make_canonical_response(Certainty::Maybe(MaybeCause::Ambiguity))\n+        }\n+    }\n+\n+    fn consider_builtin_tuple_candidate(\n+        ecx: &mut EvalCtxt<'_, 'tcx>,\n+        goal: Goal<'tcx, Self>,\n+    ) -> QueryResult<'tcx> {\n+        if let ty::Tuple(..) = goal.predicate.self_ty().kind() {\n+            ecx.make_canonical_response(Certainty::Yes)\n+        } else {\n+            Err(NoSolution)\n+        }\n+    }\n }\n \n impl<'tcx> EvalCtxt<'_, 'tcx> {"}, {"sha": "a11cd13cb0856b4df3ace3c1261baf9a69d9d4dc", "filename": "compiler/rustc_trait_selection/src/solve/trait_goals/structural_traits.rs", "status": "modified", "additions": 50, "deletions": 1, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/ed6aebbfecb56ae9ec2702572b70d6e350433de2/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals%2Fstructural_traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6aebbfecb56ae9ec2702572b70d6e350433de2/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals%2Fstructural_traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals%2Fstructural_traits.rs?ref=ed6aebbfecb56ae9ec2702572b70d6e350433de2", "patch": "@@ -1,6 +1,6 @@\n use rustc_hir::{Movability, Mutability};\n use rustc_infer::{infer::InferCtxt, traits::query::NoSolution};\n-use rustc_middle::ty::{self, Ty};\n+use rustc_middle::ty::{self, Ty, TyCtxt};\n \n // Calculates the constituent types of a type for `auto trait` purposes.\n //\n@@ -172,3 +172,52 @@ pub(super) fn instantiate_constituent_tys_for_copy_clone_trait<'tcx>(\n         }\n     }\n }\n+\n+pub(crate) fn extract_tupled_inputs_and_output_from_callable<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    self_ty: Ty<'tcx>,\n+    goal_kind: ty::ClosureKind,\n+) -> Result<Option<ty::Binder<'tcx, (Ty<'tcx>, Ty<'tcx>)>>, NoSolution> {\n+    match *self_ty.kind() {\n+        ty::FnDef(def_id, substs) => Ok(Some(\n+            tcx.bound_fn_sig(def_id)\n+                .subst(tcx, substs)\n+                .map_bound(|sig| (tcx.mk_tup(sig.inputs().iter()), sig.output())),\n+        )),\n+        ty::FnPtr(sig) => {\n+            Ok(Some(sig.map_bound(|sig| (tcx.mk_tup(sig.inputs().iter()), sig.output()))))\n+        }\n+        ty::Closure(_, substs) => {\n+            let closure_substs = substs.as_closure();\n+            match closure_substs.kind_ty().to_opt_closure_kind() {\n+                Some(closure_kind) if closure_kind.extends(goal_kind) => {}\n+                None => return Ok(None),\n+                _ => return Err(NoSolution),\n+            }\n+            Ok(Some(closure_substs.sig().map_bound(|sig| (sig.inputs()[0], sig.output()))))\n+        }\n+        ty::Bool\n+        | ty::Char\n+        | ty::Int(_)\n+        | ty::Uint(_)\n+        | ty::Float(_)\n+        | ty::Adt(_, _)\n+        | ty::Foreign(_)\n+        | ty::Str\n+        | ty::Array(_, _)\n+        | ty::Slice(_)\n+        | ty::RawPtr(_)\n+        | ty::Ref(_, _, _)\n+        | ty::Dynamic(_, _, _)\n+        | ty::Generator(_, _, _)\n+        | ty::GeneratorWitness(_)\n+        | ty::Never\n+        | ty::Tuple(_)\n+        | ty::Alias(_, _)\n+        | ty::Param(_)\n+        | ty::Placeholder(_)\n+        | ty::Bound(_, _)\n+        | ty::Infer(_)\n+        | ty::Error(_) => Err(NoSolution),\n+    }\n+}"}, {"sha": "c0ecf1c91fb384681b3b27ff4d6145019a989101", "filename": "tests/ui/traits/new-solver/fn-trait-closure.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ed6aebbfecb56ae9ec2702572b70d6e350433de2/tests%2Fui%2Ftraits%2Fnew-solver%2Ffn-trait-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6aebbfecb56ae9ec2702572b70d6e350433de2/tests%2Fui%2Ftraits%2Fnew-solver%2Ffn-trait-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Ffn-trait-closure.rs?ref=ed6aebbfecb56ae9ec2702572b70d6e350433de2", "patch": "@@ -0,0 +1,15 @@\n+// compile-flags: -Ztrait-solver=next\n+// known-bug: unknown\n+// failure-status: 101\n+// dont-check-compiler-stderr\n+\n+// This test will fail until we fix `FulfillmentCtxt::relationships`. That's\n+// because we create a type variable for closure upvar types, which is not\n+// constrained until after we try to do fallback on diverging type variables.\n+// Thus, we will call that function, which is unimplemented.\n+\n+fn require_fn(_: impl Fn() -> i32) {}\n+\n+fn main() {\n+    require_fn(|| -> i32 { 1i32 });\n+}"}, {"sha": "d566ead105c8627037706e6d43352aa81796d917", "filename": "tests/ui/traits/new-solver/fn-trait.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ed6aebbfecb56ae9ec2702572b70d6e350433de2/tests%2Fui%2Ftraits%2Fnew-solver%2Ffn-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6aebbfecb56ae9ec2702572b70d6e350433de2/tests%2Fui%2Ftraits%2Fnew-solver%2Ffn-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Ffn-trait.rs?ref=ed6aebbfecb56ae9ec2702572b70d6e350433de2", "patch": "@@ -0,0 +1,13 @@\n+// compile-flags: -Ztrait-solver=next\n+// check-pass\n+\n+fn require_fn(_: impl Fn() -> i32) {}\n+\n+fn f() -> i32 {\n+    1i32\n+}\n+\n+fn main() {\n+    require_fn(f);\n+    require_fn(f as fn() -> i32);\n+}"}]}