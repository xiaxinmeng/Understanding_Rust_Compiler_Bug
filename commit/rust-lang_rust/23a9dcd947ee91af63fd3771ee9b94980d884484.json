{"sha": "23a9dcd947ee91af63fd3771ee9b94980d884484", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzYTlkY2Q5NDdlZTkxYWY2M2ZkMzc3MWVlOWI5NDk4MGQ4ODQ0ODQ=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-02-24T16:25:13Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-03-02T19:47:15Z"}, "message": "Make CastKind::Misc handling more clean and general", "tree": {"sha": "70eb86c4a089a59f3b45f9520a9bad1679c131e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/70eb86c4a089a59f3b45f9520a9bad1679c131e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23a9dcd947ee91af63fd3771ee9b94980d884484", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23a9dcd947ee91af63fd3771ee9b94980d884484", "html_url": "https://github.com/rust-lang/rust/commit/23a9dcd947ee91af63fd3771ee9b94980d884484", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23a9dcd947ee91af63fd3771ee9b94980d884484/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be377f9eb271e460bec4051dec5b9e3e507d98a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/be377f9eb271e460bec4051dec5b9e3e507d98a9", "html_url": "https://github.com/rust-lang/rust/commit/be377f9eb271e460bec4051dec5b9e3e507d98a9"}], "stats": {"total": 180, "additions": 74, "deletions": 106}, "files": [{"sha": "5e508afc9271f8cf2c0868b3e1b899aedeae4aad", "filename": "src/base.rs", "status": "modified", "additions": 74, "deletions": 106, "changes": 180, "blob_url": "https://github.com/rust-lang/rust/blob/23a9dcd947ee91af63fd3771ee9b94980d884484/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23a9dcd947ee91af63fd3771ee9b94980d884484/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=23a9dcd947ee91af63fd3771ee9b94980d884484", "patch": "@@ -466,124 +466,92 @@ fn trans_stmt<'a, 'tcx: 'a>(\n                 Rvalue::Cast(CastKind::Misc, operand, to_ty) => {\n                     let operand = trans_operand(fx, operand);\n                     let from_ty = operand.layout().ty;\n-                    match (&from_ty.sty, &to_ty.sty) {\n-                        (ty::Ref(..), ty::Ref(..))\n-                        | (ty::Ref(..), ty::RawPtr(..))\n-                        | (ty::RawPtr(..), ty::Ref(..))\n-                        | (ty::RawPtr(..), ty::RawPtr(..))\n-                        | (ty::FnPtr(..), ty::RawPtr(..)) => {\n-                            lval.write_cvalue(fx, operand.unchecked_cast_to(dest_layout));\n-                        }\n-                        (ty::RawPtr(..), ty::Uint(_))\n-                        | (ty::RawPtr(..), ty::Int(_))\n-                        | (ty::FnPtr(..), ty::Uint(_))\n-                            if to_ty.sty == fx.tcx.types.usize.sty\n-                                || to_ty.sty == fx.tcx.types.isize.sty\n-                                || fx.clif_type(to_ty).unwrap() == pointer_ty(fx.tcx) =>\n-                        {\n-                            lval.write_cvalue(fx, operand.unchecked_cast_to(dest_layout));\n-                        }\n-                        (ty::Uint(_), ty::RawPtr(..)) if from_ty.sty == fx.tcx.types.usize.sty => {\n-                            lval.write_cvalue(fx, operand.unchecked_cast_to(dest_layout));\n-                        }\n-                        (ty::Int(_), ty::RawPtr(..)) if from_ty.sty == fx.tcx.types.isize.sty => {\n+\n+                    fn is_fat_ptr<'a, 'tcx: 'a>(fx: &FunctionCx<'a, 'tcx, impl Backend>, ty: Ty<'tcx>) -> bool {\n+                        ty\n+                            .builtin_deref(true)\n+                            .map(|ty::TypeAndMut {ty: pointee_ty, mutbl: _ }| fx.layout_of(pointee_ty).is_unsized())\n+                            .unwrap_or(false)\n+                    }\n+\n+                    if is_fat_ptr(fx, from_ty) {\n+                        if is_fat_ptr(fx, to_ty) {\n+                            // fat-ptr -> fat-ptr\n                             lval.write_cvalue(fx, operand.unchecked_cast_to(dest_layout));\n+                        } else {\n+                            // fat-ptr -> thin-ptr\n+                            let (ptr, _extra) = operand.load_value_pair(fx);\n+                            lval.write_cvalue(fx, CValue::ByVal(ptr, dest_layout))\n                         }\n-                        (ty::Char, ty::Uint(_))\n-                        | (ty::Uint(_), ty::Char)\n-                        | (ty::Uint(_), ty::Int(_))\n-                        | (ty::Uint(_), ty::Uint(_)) => {\n-                            let from = operand.load_scalar(fx);\n-                            let res = crate::common::clif_intcast(\n-                                fx,\n-                                from,\n-                                fx.clif_type(to_ty).unwrap(),\n-                                false,\n-                            );\n-                            lval.write_cvalue(fx, CValue::ByVal(res, dest_layout));\n+                    } else if let ty::Adt(adt_def, _substs) = from_ty.sty {\n+                        // enum -> discriminant value\n+                        assert!(adt_def.is_enum());\n+                        match to_ty.sty {\n+                            ty::Uint(_) | ty::Int(_) => {},\n+                            _ => unreachable!(\"cast adt {} -> {}\", from_ty, to_ty),\n                         }\n-                        (ty::Int(_), ty::Int(_)) | (ty::Int(_), ty::Uint(_)) => {\n-                            let from = operand.load_scalar(fx);\n-                            let res = crate::common::clif_intcast(\n+\n+                        // FIXME avoid forcing to stack\n+                        let place =\n+                            CPlace::Addr(operand.force_stack(fx), None, operand.layout());\n+                        let discr = trans_get_discriminant(fx, place, fx.layout_of(to_ty));\n+                        lval.write_cvalue(fx, discr);\n+                    } else {\n+                        let from_clif_ty = fx.clif_type(from_ty).unwrap();\n+                        let to_clif_ty = fx.clif_type(to_ty).unwrap();\n+                        let from = operand.load_scalar(fx);\n+\n+                        let signed = match from_ty.sty {\n+                            ty::Ref(..) | ty::RawPtr(..) | ty::FnPtr(..) | ty::Char | ty::Uint(..) | ty::Bool => false,\n+                            ty::Int(..) => true,\n+                            ty::Float(..) => false, // `signed` is unused for floats\n+                            _ => panic!(\"{}\", from_ty),\n+                        };\n+\n+                        let res = if from_clif_ty.is_int() && to_clif_ty.is_int() {\n+                            // int-like -> int-like\n+                            crate::common::clif_intcast(\n                                 fx,\n                                 from,\n-                                fx.clif_type(to_ty).unwrap(),\n-                                true,\n-                            );\n-                            lval.write_cvalue(fx, CValue::ByVal(res, dest_layout));\n-                        }\n-                        (ty::Float(from_flt), ty::Float(to_flt)) => {\n-                            let from = operand.load_scalar(fx);\n-                            let res = match (from_flt, to_flt) {\n-                                (FloatTy::F32, FloatTy::F64) => {\n-                                    fx.bcx.ins().fpromote(types::F64, from)\n-                                }\n-                                (FloatTy::F64, FloatTy::F32) => {\n-                                    fx.bcx.ins().fdemote(types::F32, from)\n-                                }\n-                                _ => from,\n-                            };\n-                            lval.write_cvalue(fx, CValue::ByVal(res, dest_layout));\n-                        }\n-                        (ty::Float(_), ty::Int(_)) => {\n-                            let from = operand.load_scalar(fx);\n-                            let i_type = fx.clif_type(to_ty).unwrap();\n-                            let res = fx.bcx.ins().fcvt_to_sint_sat(i_type, from);\n-                            lval.write_cvalue(fx, CValue::ByVal(res, dest_layout));\n-                        }\n-                        (ty::Float(_), ty::Uint(_)) => {\n-                            let from = operand.load_scalar(fx);\n-                            let i_type = fx.clif_type(to_ty).unwrap();\n-                            let res = fx.bcx.ins().fcvt_to_uint_sat(i_type, from);\n-                            lval.write_cvalue(fx, CValue::ByVal(res, dest_layout));\n-                        }\n-                        (ty::Int(_), ty::Float(_)) => {\n-                            let from_ty = fx.clif_type(from_ty).unwrap();\n-                            let from = operand.load_scalar(fx);\n+                                to_clif_ty,\n+                                signed,\n+                            )\n+                        } else if from_clif_ty.is_int() && to_clif_ty.is_float() {\n+                            // int-like -> float\n                             // FIXME missing encoding for fcvt_from_sint.f32.i8\n-                            let from = if from_ty == types::I8 || from_ty == types::I16 {\n-                                fx.bcx.ins().sextend(types::I32, from)\n-                            } else {\n-                                from\n-                            };\n-                            let f_type = fx.clif_type(to_ty).unwrap();\n-                            let res = fx.bcx.ins().fcvt_from_sint(f_type, from);\n-                            lval.write_cvalue(fx, CValue::ByVal(res, dest_layout));\n-                        }\n-                        (ty::Uint(_), ty::Float(_)) => {\n-                            let from_ty = fx.clif_type(from_ty).unwrap();\n-                            let from = operand.load_scalar(fx);\n-                            // FIXME missing encoding for fcvt_from_uint.f32.i8\n-                            let from = if from_ty == types::I8 || from_ty == types::I16 {\n+                            let from = if from_clif_ty == types::I8 || from_clif_ty == types::I16 {\n                                 fx.bcx.ins().uextend(types::I32, from)\n                             } else {\n                                 from\n                             };\n-                            let f_type = fx.clif_type(to_ty).unwrap();\n-                            let res = fx.bcx.ins().fcvt_from_uint(f_type, from);\n-                            lval.write_cvalue(fx, CValue::ByVal(res, dest_layout));\n-                        }\n-                        (ty::Bool, ty::Uint(_)) | (ty::Bool, ty::Int(_)) => {\n-                            let to_ty = fx.clif_type(to_ty).unwrap();\n+                            if signed {\n+                                fx.bcx.ins().fcvt_from_sint(to_clif_ty, from)\n+                            } else {\n+                                fx.bcx.ins().fcvt_from_uint(to_clif_ty, from)\n+                            }\n+                        } else if from_clif_ty.is_float() && to_clif_ty.is_int() {\n+                            // float -> int-like\n                             let from = operand.load_scalar(fx);\n-                            let res = if to_ty != types::I8 {\n-                                fx.bcx.ins().uextend(to_ty, from)\n+                            if signed {\n+                                fx.bcx.ins().fcvt_to_sint_sat(to_clif_ty, from)\n                             } else {\n-                                from\n-                            };\n-                            lval.write_cvalue(fx, CValue::ByVal(res, dest_layout));\n-                        }\n-                        (ty::Adt(adt_def, _substs), ty::Uint(_))\n-                        | (ty::Adt(adt_def, _substs), ty::Int(_))\n-                            if adt_def.is_enum() =>\n-                        {\n-                            // FIXME avoid forcing to stack\n-                            let place =\n-                                CPlace::Addr(operand.force_stack(fx), None, operand.layout());\n-                            let discr = trans_get_discriminant(fx, place, fx.layout_of(to_ty));\n-                            lval.write_cvalue(fx, discr);\n-                        }\n-                        _ => unimpl!(\"rval misc {:?} {:?}\", from_ty, to_ty),\n+                                fx.bcx.ins().fcvt_to_uint_sat(to_clif_ty, from)\n+                            }\n+                        } else if from_clif_ty.is_float() && to_clif_ty.is_float() {\n+                            // float -> float\n+                            match (from_clif_ty, to_clif_ty) {\n+                                (types::F32, types::F64) => {\n+                                    fx.bcx.ins().fpromote(types::F64, from)\n+                                }\n+                                (types::F64, types::F32) => {\n+                                    fx.bcx.ins().fdemote(types::F32, from)\n+                                }\n+                                _ => from,\n+                            }\n+                        } else {\n+                            unimpl!(\"rval misc {:?} {:?}\", from_ty, to_ty)\n+                        };\n+                        lval.write_cvalue(fx, CValue::ByVal(res, dest_layout));\n                     }\n                 }\n                 Rvalue::Cast(CastKind::ClosureFnPointer, operand, _ty) => {"}]}