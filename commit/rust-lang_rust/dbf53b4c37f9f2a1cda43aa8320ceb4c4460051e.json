{"sha": "dbf53b4c37f9f2a1cda43aa8320ceb4c4460051e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiZjUzYjRjMzdmOWYyYTFjZGE0M2FhODMyMGNlYjRjNDQ2MDA1MWU=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-02-25T01:00:24Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-02-25T01:00:24Z"}, "message": "Connect the crate and source parsers together.", "tree": {"sha": "e93c27232aeb1afb8613b216b993bab4d3e192ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e93c27232aeb1afb8613b216b993bab4d3e192ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dbf53b4c37f9f2a1cda43aa8320ceb4c4460051e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dbf53b4c37f9f2a1cda43aa8320ceb4c4460051e", "html_url": "https://github.com/rust-lang/rust/commit/dbf53b4c37f9f2a1cda43aa8320ceb4c4460051e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dbf53b4c37f9f2a1cda43aa8320ceb4c4460051e/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9acf4b912717831f628ad078f28c597e10d7ec93", "url": "https://api.github.com/repos/rust-lang/rust/commits/9acf4b912717831f628ad078f28c597e10d7ec93", "html_url": "https://github.com/rust-lang/rust/commit/9acf4b912717831f628ad078f28c597e10d7ec93"}], "stats": {"total": 60, "additions": 58, "deletions": 2}, "files": [{"sha": "7ae0050e1704176801acaeea433ed3085a2a120b", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 58, "deletions": 2, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/dbf53b4c37f9f2a1cda43aa8320ceb4c4460051e/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbf53b4c37f9f2a1cda43aa8320ceb4c4460051e/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=dbf53b4c37f9f2a1cda43aa8320ceb4c4460051e", "patch": "@@ -18,21 +18,29 @@ tag restriction {\n     RESTRICT_NO_CALL_EXPRS;\n }\n \n+tag file_type {\n+    CRATE_FILE;\n+    SOURCE_FILE;\n+}\n+\n state type parser =\n     state obj {\n           fn peek() -> token.token;\n           impure fn bump();\n           impure fn err(str s);\n           impure fn restrict(restriction r);\n           fn get_restriction() -> restriction;\n+          fn get_file_type() -> file_type;\n           fn get_session() -> session.session;\n           fn get_span() -> common.span;\n           fn next_def_id() -> ast.def_id;\n     };\n \n impure fn new_parser(session.session sess,\n-                 ast.crate_num crate, str path) -> parser {\n+                     ast.crate_num crate,\n+                     str path) -> parser {\n     state obj stdio_parser(session.session sess,\n+                           file_type ftype,\n                            mutable token.token tok,\n                            mutable common.pos lo,\n                            mutable common.pos hi,\n@@ -80,11 +88,20 @@ impure fn new_parser(session.session sess,\n                 def += 1;\n                 ret tup(crate, def);\n             }\n+\n+            fn get_file_type() -> file_type {\n+                ret ftype;\n+            }\n+\n         }\n+    auto ftype = SOURCE_FILE;\n+    if (_str.ends_with(path, \".rc\")) {\n+        ftype = CRATE_FILE;\n+    }\n     auto srdr = io.new_stdio_reader(path);\n     auto rdr = lexer.new_reader(srdr, path);\n     auto npos = rdr.get_curr_pos();\n-    ret stdio_parser(sess, lexer.next_token(rdr),\n+    ret stdio_parser(sess, ftype, lexer.next_token(rdr),\n                      npos, npos, 0, UNRESTRICTED, crate, rdr);\n }\n \n@@ -1310,6 +1327,20 @@ impure fn parse_auto(parser p) -> @ast.decl {\n }\n \n impure fn parse_stmt(parser p) -> @ast.stmt {\n+    if (p.get_file_type() == SOURCE_FILE) {\n+        ret parse_source_stmt(p);\n+    } else {\n+        ret parse_crate_stmt(p);\n+    }\n+}\n+\n+impure fn parse_crate_stmt(parser p) -> @ast.stmt {\n+    auto cdir = parse_crate_directive(p);\n+    ret @spanned(cdir.span, cdir.span,\n+                 ast.stmt_crate_directive(@cdir));\n+}\n+\n+impure fn parse_source_stmt(parser p) -> @ast.stmt {\n     auto lo = p.get_span();\n     alt (p.peek()) {\n \n@@ -1485,6 +1516,16 @@ fn stmt_ends_with_semi(@ast.stmt stmt) -> bool {\n                 case (ast.expr_check_expr(_))   { ret true; }\n             }\n         }\n+        case (ast.stmt_crate_directive(?cdir)) {\n+            alt (cdir.node) {\n+                case (ast.cdir_src_mod(_, _))    { ret true; }\n+                case (ast.cdir_view_item(_))     { ret true; }\n+                case (ast.cdir_meta(_))          { ret true; }\n+                case (ast.cdir_syntax(_))        { ret true; }\n+                case (ast.cdir_auth(_, _))       { ret true; }\n+                case (_)                         { ret false; }\n+            }\n+        }\n     }\n }\n \n@@ -2182,6 +2223,21 @@ impure fn parse_crate_directive(parser p) -> ast.crate_directive\n             expect(p, token.RBRACE);\n             ret spanned(lo, hi, ast.cdir_let(id, x, v));\n         }\n+\n+        case (token.USE) {\n+            auto vi = parse_use_or_import(p);\n+            ret spanned(lo, vi.span, ast.cdir_view_item(vi));\n+        }\n+\n+        case (token.IMPORT) {\n+            auto vi = parse_use_or_import(p);\n+            ret spanned(lo, vi.span, ast.cdir_view_item(vi));\n+        }\n+\n+        case (_) {\n+            auto x = parse_expr(p);\n+            ret spanned(lo, x.span, ast.cdir_expr(x));\n+        }\n     }\n     fail;\n }"}]}