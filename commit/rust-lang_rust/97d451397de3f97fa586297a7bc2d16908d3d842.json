{"sha": "97d451397de3f97fa586297a7bc2d16908d3d842", "node_id": "C_kwDOAAsO6NoAKDk3ZDQ1MTM5N2RlM2Y5N2ZhNTg2Mjk3YTdiYzJkMTY5MDhkM2Q4NDI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-20T13:10:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-20T13:10:52Z"}, "message": "Auto merge of #9025 - Alexendoo:unused-async-method, r=dswij\n\nunused_async: lint async methods\n\nNow lints:\n\n```rust\nimpl Foo {\n    async fn method(&self) -> &'static str {\n        \"no await here\"\n    }\n}\n```\n\nchangelog: [`unused_async`]: lint async methods\n\nFixes #9024", "tree": {"sha": "7b9c1b532ffda0dddea766c764e6d0a90bfd1468", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b9c1b532ffda0dddea766c764e6d0a90bfd1468"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97d451397de3f97fa586297a7bc2d16908d3d842", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97d451397de3f97fa586297a7bc2d16908d3d842", "html_url": "https://github.com/rust-lang/rust/commit/97d451397de3f97fa586297a7bc2d16908d3d842", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97d451397de3f97fa586297a7bc2d16908d3d842/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "195f2cba458f0dcdce16b2d22212ec148a6126f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/195f2cba458f0dcdce16b2d22212ec148a6126f5", "html_url": "https://github.com/rust-lang/rust/commit/195f2cba458f0dcdce16b2d22212ec148a6126f5"}, {"sha": "a0b107bbb624ab4bf889f916707d2f025964d3be", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0b107bbb624ab4bf889f916707d2f025964d3be", "html_url": "https://github.com/rust-lang/rust/commit/a0b107bbb624ab4bf889f916707d2f025964d3be"}], "stats": {"total": 84, "additions": 64, "deletions": 20}, "files": [{"sha": "a832dfcccaf36eaba7a3813956f4af40073c5906", "filename": "clippy_lints/src/unused_async.rs", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/97d451397de3f97fa586297a7bc2d16908d3d842/clippy_lints%2Fsrc%2Funused_async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97d451397de3f97fa586297a7bc2d16908d3d842/clippy_lints%2Fsrc%2Funused_async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_async.rs?ref=97d451397de3f97fa586297a7bc2d16908d3d842", "patch": "@@ -1,6 +1,6 @@\n use clippy_utils::diagnostics::span_lint_and_help;\n use rustc_hir::intravisit::{walk_expr, walk_fn, FnKind, Visitor};\n-use rustc_hir::{Body, Expr, ExprKind, FnDecl, FnHeader, HirId, IsAsync, YieldSource};\n+use rustc_hir::{Body, Expr, ExprKind, FnDecl, HirId, IsAsync, YieldSource};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::hir::nested_filter;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -68,20 +68,18 @@ impl<'tcx> LateLintPass<'tcx> for UnusedAsync {\n         span: Span,\n         hir_id: HirId,\n     ) {\n-        if let FnKind::ItemFn(_, _, FnHeader { asyncness, .. }) = &fn_kind {\n-            if matches!(asyncness, IsAsync::Async) {\n-                let mut visitor = AsyncFnVisitor { cx, found_await: false };\n-                walk_fn(&mut visitor, fn_kind, fn_decl, body.id(), span, hir_id);\n-                if !visitor.found_await {\n-                    span_lint_and_help(\n-                        cx,\n-                        UNUSED_ASYNC,\n-                        span,\n-                        \"unused `async` for function with no await statements\",\n-                        None,\n-                        \"consider removing the `async` from this function\",\n-                    );\n-                }\n+        if !span.from_expansion() && fn_kind.asyncness() == IsAsync::Async {\n+            let mut visitor = AsyncFnVisitor { cx, found_await: false };\n+            walk_fn(&mut visitor, fn_kind, fn_decl, body.id(), span, hir_id);\n+            if !visitor.found_await {\n+                span_lint_and_help(\n+                    cx,\n+                    UNUSED_ASYNC,\n+                    span,\n+                    \"unused `async` for function with no await statements\",\n+                    None,\n+                    \"consider removing the `async` from this function\",\n+                );\n             }\n         }\n     }"}, {"sha": "1970c2eae531420a9dbc6f36964d7bba80890d8a", "filename": "tests/ui/methods.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/97d451397de3f97fa586297a7bc2d16908d3d842/tests%2Fui%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97d451397de3f97fa586297a7bc2d16908d3d842/tests%2Fui%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.rs?ref=97d451397de3f97fa586297a7bc2d16908d3d842", "patch": "@@ -15,6 +15,7 @@\n     clippy::use_self,\n     clippy::useless_format,\n     clippy::wrong_self_convention,\n+    clippy::unused_async,\n     clippy::unused_self,\n     unused\n )]"}, {"sha": "b63672dd6fdbb546dac805e74727f9bf8982851f", "filename": "tests/ui/methods.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/97d451397de3f97fa586297a7bc2d16908d3d842/tests%2Fui%2Fmethods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/97d451397de3f97fa586297a7bc2d16908d3d842/tests%2Fui%2Fmethods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.stderr?ref=97d451397de3f97fa586297a7bc2d16908d3d842", "patch": "@@ -1,5 +1,5 @@\n error: methods called `new` usually return `Self`\n-  --> $DIR/methods.rs:103:5\n+  --> $DIR/methods.rs:104:5\n    |\n LL | /     fn new() -> i32 {\n LL | |         0\n@@ -9,7 +9,7 @@ LL | |     }\n    = note: `-D clippy::new-ret-no-self` implied by `-D warnings`\n \n error: called `filter(..).next()` on an `Iterator`. This is more succinctly expressed by calling `.find(..)` instead\n-  --> $DIR/methods.rs:124:13\n+  --> $DIR/methods.rs:125:13\n    |\n LL |       let _ = v.iter().filter(|&x| {\n    |  _____________^"}, {"sha": "50999c6f2198b024c29b657425ccbf89c1692b12", "filename": "tests/ui/should_impl_trait/corner_cases.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/97d451397de3f97fa586297a7bc2d16908d3d842/tests%2Fui%2Fshould_impl_trait%2Fcorner_cases.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97d451397de3f97fa586297a7bc2d16908d3d842/tests%2Fui%2Fshould_impl_trait%2Fcorner_cases.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fshould_impl_trait%2Fcorner_cases.rs?ref=97d451397de3f97fa586297a7bc2d16908d3d842", "patch": "@@ -8,7 +8,8 @@\n     clippy::missing_safety_doc,\n     clippy::wrong_self_convention,\n     clippy::missing_panics_doc,\n-    clippy::return_self_not_must_use\n+    clippy::return_self_not_must_use,\n+    clippy::unused_async\n )]\n \n use std::ops::Mul;"}, {"sha": "4ca7f29b34cd085af07587e6b755a8ee3855dbef", "filename": "tests/ui/unused_async.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/97d451397de3f97fa586297a7bc2d16908d3d842/tests%2Fui%2Funused_async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97d451397de3f97fa586297a7bc2d16908d3d842/tests%2Fui%2Funused_async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funused_async.rs?ref=97d451397de3f97fa586297a7bc2d16908d3d842", "patch": "@@ -1,5 +1,8 @@\n #![warn(clippy::unused_async)]\n \n+use std::future::Future;\n+use std::pin::Pin;\n+\n async fn foo() -> i32 {\n     4\n }\n@@ -8,6 +11,37 @@ async fn bar() -> i32 {\n     foo().await\n }\n \n+struct S;\n+\n+impl S {\n+    async fn unused(&self) -> i32 {\n+        1\n+    }\n+\n+    async fn used(&self) -> i32 {\n+        self.unused().await\n+    }\n+}\n+\n+trait AsyncTrait {\n+    fn trait_method() -> Pin<Box<dyn Future<Output = i32>>>;\n+}\n+\n+macro_rules! async_trait_impl {\n+    () => {\n+        impl AsyncTrait for S {\n+            fn trait_method() -> Pin<Box<dyn Future<Output = i32>>> {\n+                async fn unused() -> i32 {\n+                    5\n+                }\n+\n+                Box::pin(unused())\n+            }\n+        }\n+    };\n+}\n+async_trait_impl!();\n+\n fn main() {\n     foo();\n     bar();"}, {"sha": "8b8ad065a4caa6f9992a3da9f188c2c03cd4180c", "filename": "tests/ui/unused_async.stderr", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/97d451397de3f97fa586297a7bc2d16908d3d842/tests%2Fui%2Funused_async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/97d451397de3f97fa586297a7bc2d16908d3d842/tests%2Fui%2Funused_async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funused_async.stderr?ref=97d451397de3f97fa586297a7bc2d16908d3d842", "patch": "@@ -1,5 +1,5 @@\n error: unused `async` for function with no await statements\n-  --> $DIR/unused_async.rs:3:1\n+  --> $DIR/unused_async.rs:6:1\n    |\n LL | / async fn foo() -> i32 {\n LL | |     4\n@@ -9,5 +9,15 @@ LL | | }\n    = note: `-D clippy::unused-async` implied by `-D warnings`\n    = help: consider removing the `async` from this function\n \n-error: aborting due to previous error\n+error: unused `async` for function with no await statements\n+  --> $DIR/unused_async.rs:17:5\n+   |\n+LL | /     async fn unused(&self) -> i32 {\n+LL | |         1\n+LL | |     }\n+   | |_____^\n+   |\n+   = help: consider removing the `async` from this function\n+\n+error: aborting due to 2 previous errors\n "}]}