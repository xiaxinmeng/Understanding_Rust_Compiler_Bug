{"sha": "c2207f5a48376c7e4ed12975ba1130680cd57455", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyMjA3ZjVhNDgzNzZjN2U0ZWQxMjk3NWJhMTEzMDY4MGNkNTc0NTU=", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-08-27T00:47:29Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-09-11T18:24:54Z"}, "message": "Remove unused `hir_id` parameter from `resolve_type`", "tree": {"sha": "1fd5358c67e58ff4cf7fcfe23e3a40d14eb3f8db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1fd5358c67e58ff4cf7fcfe23e3a40d14eb3f8db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c2207f5a48376c7e4ed12975ba1130680cd57455", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c2207f5a48376c7e4ed12975ba1130680cd57455", "html_url": "https://github.com/rust-lang/rust/commit/c2207f5a48376c7e4ed12975ba1130680cd57455", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c2207f5a48376c7e4ed12975ba1130680cd57455/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a84d347844afc5b228a67ac8bb147f3d0e40ddb", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a84d347844afc5b228a67ac8bb147f3d0e40ddb", "html_url": "https://github.com/rust-lang/rust/commit/6a84d347844afc5b228a67ac8bb147f3d0e40ddb"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "0cd7d5a1ee549314dee8935c66e0741a334b96c7", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c2207f5a48376c7e4ed12975ba1130680cd57455/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2207f5a48376c7e4ed12975ba1130680cd57455/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=c2207f5a48376c7e4ed12975ba1130680cd57455", "patch": "@@ -906,7 +906,7 @@ impl Clean<bool> for hir::IsAuto {\n impl Clean<Type> for hir::TraitRef<'_> {\n     fn clean(&self, cx: &mut DocContext<'_>) -> Type {\n         let path = self.path.clean(cx);\n-        resolve_type(cx, path, self.hir_ref_id)\n+        resolve_type(cx, path)\n     }\n }\n \n@@ -1164,7 +1164,7 @@ impl Clean<Item> for ty::AssocItem {\n \n fn clean_qpath(hir_ty: &hir::Ty<'_>, cx: &mut DocContext<'_>) -> Type {\n     use rustc_hir::GenericParamCount;\n-    let hir::Ty { hir_id, span, ref kind } = *hir_ty;\n+    let hir::Ty { hir_id: _, span, ref kind } = *hir_ty;\n     let qpath = match kind {\n         hir::TyKind::Path(qpath) => qpath,\n         _ => unreachable!(),\n@@ -1271,7 +1271,7 @@ fn clean_qpath(hir_ty: &hir::Ty<'_>, cx: &mut DocContext<'_>) -> Type {\n                 return cx.enter_alias(ty_substs, lt_substs, ct_substs, |cx| ty.clean(cx));\n             }\n             let path = path.clean(cx);\n-            resolve_type(cx, path, hir_id)\n+            resolve_type(cx, path)\n         }\n         hir::QPath::Resolved(Some(ref qself), ref p) => {\n             // Try to normalize `<X as Y>::T` to a type\n@@ -1292,7 +1292,7 @@ fn clean_qpath(hir_ty: &hir::Ty<'_>, cx: &mut DocContext<'_>) -> Type {\n                 name: p.segments.last().expect(\"segments were empty\").ident.name,\n                 self_def_id: Some(DefId::local(qself.hir_id.owner.local_def_index)),\n                 self_type: Box::new(qself.clean(cx)),\n-                trait_: Box::new(resolve_type(cx, trait_path, hir_id)),\n+                trait_: Box::new(resolve_type(cx, trait_path)),\n             }\n         }\n         hir::QPath::TypeRelative(ref qself, ref segment) => {\n@@ -1308,7 +1308,7 @@ fn clean_qpath(hir_ty: &hir::Ty<'_>, cx: &mut DocContext<'_>) -> Type {\n                 name: segment.ident.name,\n                 self_def_id: res.opt_def_id(),\n                 self_type: Box::new(qself.clean(cx)),\n-                trait_: Box::new(resolve_type(cx, trait_path, hir_id)),\n+                trait_: Box::new(resolve_type(cx, trait_path)),\n             }\n         }\n         hir::QPath::LangItem(..) => bug!(\"clean: requiring documentation of lang item\"),"}, {"sha": "64d642884b41655ac70098960c53ca8a3de44b56", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c2207f5a48376c7e4ed12975ba1130680cd57455/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2207f5a48376c7e4ed12975ba1130680cd57455/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=c2207f5a48376c7e4ed12975ba1130680cd57455", "patch": "@@ -407,8 +407,8 @@ crate fn print_const_expr(tcx: TyCtxt<'_>, body: hir::BodyId) -> String {\n }\n \n /// Given a type Path, resolve it to a Type using the TyCtxt\n-crate fn resolve_type(cx: &mut DocContext<'_>, path: Path, id: hir::HirId) -> Type {\n-    debug!(\"resolve_type({:?},{:?})\", path, id);\n+crate fn resolve_type(cx: &mut DocContext<'_>, path: Path) -> Type {\n+    debug!(\"resolve_type({:?})\", path);\n \n     let is_generic = match path.res {\n         Res::PrimTy(p) => return Primitive(PrimitiveType::from(p)),"}]}