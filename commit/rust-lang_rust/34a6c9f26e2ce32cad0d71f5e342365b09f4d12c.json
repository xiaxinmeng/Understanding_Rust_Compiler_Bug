{"sha": "34a6c9f26e2ce32cad0d71f5e342365b09f4d12c", "node_id": "C_kwDOAAsO6NoAKDM0YTZjOWYyNmUyY2UzMmNhZDBkNzFmNWUzNDIzNjViMDlmNGQxMmM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-13T21:04:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-13T21:04:19Z"}, "message": "Auto merge of #95968 - davidtwco:translation-lazy-fallback, r=oli-obk\n\nerrors: lazily load fallback fluent bundle\n\nAddresses (hopefully) https://github.com/rust-lang/rust/pull/95667#issuecomment-1094794087.\n\nLoading the fallback bundle in compilation sessions that won't go on to emit any errors unnecessarily degrades compile time performance, so lazily create the Fluent bundle when it is first required.\n\nr? `@ghost` (just for perf initially)", "tree": {"sha": "beb176a15b3870a559108e5859d608f5e3573ca7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/beb176a15b3870a559108e5859d608f5e3573ca7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/34a6c9f26e2ce32cad0d71f5e342365b09f4d12c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/34a6c9f26e2ce32cad0d71f5e342365b09f4d12c", "html_url": "https://github.com/rust-lang/rust/commit/34a6c9f26e2ce32cad0d71f5e342365b09f4d12c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/34a6c9f26e2ce32cad0d71f5e342365b09f4d12c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc4bfcbdfff651c82eff4bdd311d28e54d1513c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc4bfcbdfff651c82eff4bdd311d28e54d1513c4", "html_url": "https://github.com/rust-lang/rust/commit/dc4bfcbdfff651c82eff4bdd311d28e54d1513c4"}, {"sha": "9bfe0e39e4214c9a76e6c38350286176fa73787a", "url": "https://api.github.com/repos/rust-lang/rust/commits/9bfe0e39e4214c9a76e6c38350286176fa73787a", "html_url": "https://github.com/rust-lang/rust/commit/9bfe0e39e4214c9a76e6c38350286176fa73787a"}], "stats": {"total": 175, "additions": 94, "deletions": 81}, "files": [{"sha": "d5d21775f0abc4ac33c861153f8d168c5f7a7a04", "filename": "compiler/rustc_codegen_ssa/src/back/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34a6c9f26e2ce32cad0d71f5e342365b09f4d12c/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34a6c9f26e2ce32cad0d71f5e342365b09f4d12c/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs?ref=34a6c9f26e2ce32cad0d71f5e342365b09f4d12c", "patch": "@@ -1731,7 +1731,7 @@ impl Emitter for SharedEmitter {\n         None\n     }\n \n-    fn fallback_fluent_bundle(&self) -> &Lrc<rustc_errors::FluentBundle> {\n+    fn fallback_fluent_bundle(&self) -> &rustc_errors::FluentBundle {\n         panic!(\"shared emitter attempted to translate a diagnostic\");\n     }\n }"}, {"sha": "904d6f8cfd80889bdcc18b702daa2405e93ff9ea", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34a6c9f26e2ce32cad0d71f5e342365b09f4d12c/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34a6c9f26e2ce32cad0d71f5e342365b09f4d12c/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=34a6c9f26e2ce32cad0d71f5e342365b09f4d12c", "patch": "@@ -1173,7 +1173,7 @@ static DEFAULT_HOOK: SyncLazy<Box<dyn Fn(&panic::PanicInfo<'_>) + Sync + Send +\n /// hook.\n pub fn report_ice(info: &panic::PanicInfo<'_>, bug_report_url: &str) {\n     let fallback_bundle =\n-        rustc_errors::fallback_fluent_bundle(false).expect(\"failed to load fallback fluent bundle\");\n+        rustc_errors::fallback_fluent_bundle(rustc_errors::DEFAULT_LOCALE_RESOURCES, false);\n     let emitter = Box::new(rustc_errors::emitter::EmitterWriter::stderr(\n         rustc_errors::ColorConfig::Auto,\n         None,"}, {"sha": "24e59a93cea6cde4c80d78a9dbfca5a12bec4850", "filename": "compiler/rustc_error_messages/locales/en-US/parser.ftl", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/34a6c9f26e2ce32cad0d71f5e342365b09f4d12c/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparser.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/34a6c9f26e2ce32cad0d71f5e342365b09f4d12c/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparser.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparser.ftl?ref=34a6c9f26e2ce32cad0d71f5e342365b09f4d12c", "patch": "@@ -0,0 +1,3 @@\n+parser-struct-literal-body-without-path =\n+    struct literal body without path\n+    .suggestion = you might have forgotten to add the struct literal inside the block"}, {"sha": "721201d93124162f438329fb522b9c3e8ccefa42", "filename": "compiler/rustc_error_messages/locales/en-US/typeck.ftl", "status": "renamed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34a6c9f26e2ce32cad0d71f5e342365b09f4d12c/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Ftypeck.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/34a6c9f26e2ce32cad0d71f5e342365b09f4d12c/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Ftypeck.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Ftypeck.ftl?ref=34a6c9f26e2ce32cad0d71f5e342365b09f4d12c", "patch": "@@ -1,7 +1,3 @@\n-parser-struct-literal-body-without-path =\n-    struct literal body without path\n-    .suggestion = you might have forgotten to add the struct literal inside the block\n-\n typeck-field-multiply-specified-in-initializer =\n     field `{$ident}` specified more than once\n     .label = used more than once", "previous_filename": "compiler/rustc_error_messages/locales/en-US/diagnostics.ftl"}, {"sha": "de0dd18cc6ec5402283997b1adcb2581aa34c343", "filename": "compiler/rustc_error_messages/src/lib.rs", "status": "modified", "additions": 29, "deletions": 11, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/34a6c9f26e2ce32cad0d71f5e342365b09f4d12c/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34a6c9f26e2ce32cad0d71f5e342365b09f4d12c/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs?ref=34a6c9f26e2ce32cad0d71f5e342365b09f4d12c", "patch": "@@ -1,5 +1,7 @@\n #![feature(let_chains)]\n+#![feature(once_cell)]\n #![feature(path_try_exists)]\n+#![feature(type_alias_impl_trait)]\n \n use fluent_bundle::FluentResource;\n use fluent_syntax::parser::ParserError;\n@@ -14,6 +16,11 @@ use std::io;\n use std::path::{Path, PathBuf};\n use tracing::{instrument, trace};\n \n+#[cfg(not(parallel_compiler))]\n+use std::lazy::Lazy;\n+#[cfg(parallel_compiler)]\n+use std::lazy::SyncLazy as Lazy;\n+\n #[cfg(parallel_compiler)]\n use intl_memoizer::concurrent::IntlLangMemoizer;\n #[cfg(not(parallel_compiler))]\n@@ -22,7 +29,8 @@ use intl_memoizer::IntlLangMemoizer;\n pub use fluent_bundle::{FluentArgs, FluentError, FluentValue};\n pub use unic_langid::{langid, LanguageIdentifier};\n \n-static FALLBACK_FLUENT_RESOURCE: &'static str = include_str!(\"../locales/en-US/diagnostics.ftl\");\n+pub static DEFAULT_LOCALE_RESOURCES: &'static [&'static str] =\n+    &[include_str!(\"../locales/en-US/typeck.ftl\"), include_str!(\"../locales/en-US/parser.ftl\")];\n \n pub type FluentBundle = fluent_bundle::bundle::FluentBundle<FluentResource, IntlLangMemoizer>;\n \n@@ -192,20 +200,30 @@ pub fn fluent_bundle(\n     Ok(Some(bundle))\n }\n \n+/// Type alias for the result of `fallback_fluent_bundle` - a reference-counted pointer to a lazily\n+/// evaluated fluent bundle.\n+pub type LazyFallbackBundle = Lrc<Lazy<FluentBundle, impl FnOnce() -> FluentBundle>>;\n+\n /// Return the default `FluentBundle` with standard \"en-US\" diagnostic messages.\n #[instrument(level = \"trace\")]\n pub fn fallback_fluent_bundle(\n+    resources: &'static [&'static str],\n     with_directionality_markers: bool,\n-) -> Result<Lrc<FluentBundle>, TranslationBundleError> {\n-    let fallback_resource = FluentResource::try_new(FALLBACK_FLUENT_RESOURCE.to_string())\n-        .map_err(TranslationBundleError::from)?;\n-    trace!(?fallback_resource);\n-    let mut fallback_bundle = new_bundle(vec![langid!(\"en-US\")]);\n-    // See comment in `fluent_bundle`.\n-    fallback_bundle.set_use_isolating(with_directionality_markers);\n-    fallback_bundle.add_resource(fallback_resource).map_err(TranslationBundleError::from)?;\n-    let fallback_bundle = Lrc::new(fallback_bundle);\n-    Ok(fallback_bundle)\n+) -> LazyFallbackBundle {\n+    Lrc::new(Lazy::new(move || {\n+        let mut fallback_bundle = new_bundle(vec![langid!(\"en-US\")]);\n+        // See comment in `fluent_bundle`.\n+        fallback_bundle.set_use_isolating(with_directionality_markers);\n+\n+        for resource in resources {\n+            let resource = FluentResource::try_new(resource.to_string())\n+                .expect(\"failed to parse fallback fluent resource\");\n+            trace!(?resource);\n+            fallback_bundle.add_resource_overriding(resource);\n+        }\n+\n+        fallback_bundle\n+    }))\n }\n \n /// Identifier for the Fluent message/attribute corresponding to a diagnostic message."}, {"sha": "1f270fcf56baa343fadfc70028d1ef6c4a87b0ac", "filename": "compiler/rustc_errors/src/annotate_snippet_emitter_writer.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/34a6c9f26e2ce32cad0d71f5e342365b09f4d12c/compiler%2Frustc_errors%2Fsrc%2Fannotate_snippet_emitter_writer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34a6c9f26e2ce32cad0d71f5e342365b09f4d12c/compiler%2Frustc_errors%2Fsrc%2Fannotate_snippet_emitter_writer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fannotate_snippet_emitter_writer.rs?ref=34a6c9f26e2ce32cad0d71f5e342365b09f4d12c", "patch": "@@ -8,8 +8,8 @@\n use crate::emitter::FileWithAnnotatedLines;\n use crate::snippet::Line;\n use crate::{\n-    CodeSuggestion, Diagnostic, DiagnosticId, DiagnosticMessage, Emitter, FluentBundle, Level,\n-    MultiSpan, Style, SubDiagnostic,\n+    CodeSuggestion, Diagnostic, DiagnosticId, DiagnosticMessage, Emitter, FluentBundle,\n+    LazyFallbackBundle, Level, MultiSpan, Style, SubDiagnostic,\n };\n use annotate_snippets::display_list::{DisplayList, FormatOptions};\n use annotate_snippets::snippet::*;\n@@ -22,7 +22,7 @@ use rustc_span::SourceFile;\n pub struct AnnotateSnippetEmitterWriter {\n     source_map: Option<Lrc<SourceMap>>,\n     fluent_bundle: Option<Lrc<FluentBundle>>,\n-    fallback_bundle: Lrc<FluentBundle>,\n+    fallback_bundle: LazyFallbackBundle,\n \n     /// If true, hides the longer explanation text\n     short_message: bool,\n@@ -67,8 +67,8 @@ impl Emitter for AnnotateSnippetEmitterWriter {\n         self.fluent_bundle.as_ref()\n     }\n \n-    fn fallback_fluent_bundle(&self) -> &Lrc<FluentBundle> {\n-        &self.fallback_bundle\n+    fn fallback_fluent_bundle(&self) -> &FluentBundle {\n+        &**self.fallback_bundle\n     }\n \n     fn should_show_explain(&self) -> bool {\n@@ -101,7 +101,7 @@ impl AnnotateSnippetEmitterWriter {\n     pub fn new(\n         source_map: Option<Lrc<SourceMap>>,\n         fluent_bundle: Option<Lrc<FluentBundle>>,\n-        fallback_bundle: Lrc<FluentBundle>,\n+        fallback_bundle: LazyFallbackBundle,\n         short_message: bool,\n         macro_backtrace: bool,\n     ) -> Self {"}, {"sha": "47cdf39cd52ce056905cff618d64592d361388a9", "filename": "compiler/rustc_errors/src/emitter.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/34a6c9f26e2ce32cad0d71f5e342365b09f4d12c/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34a6c9f26e2ce32cad0d71f5e342365b09f4d12c/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Femitter.rs?ref=34a6c9f26e2ce32cad0d71f5e342365b09f4d12c", "patch": "@@ -16,7 +16,8 @@ use crate::snippet::{Annotation, AnnotationType, Line, MultilineAnnotation, Styl\n use crate::styled_buffer::StyledBuffer;\n use crate::{\n     CodeSuggestion, Diagnostic, DiagnosticArg, DiagnosticId, DiagnosticMessage, FluentBundle,\n-    Handler, Level, MultiSpan, SubDiagnostic, SubstitutionHighlight, SuggestionStyle,\n+    Handler, LazyFallbackBundle, Level, MultiSpan, SubDiagnostic, SubstitutionHighlight,\n+    SuggestionStyle,\n };\n \n use rustc_lint_defs::pluralize;\n@@ -60,7 +61,7 @@ impl HumanReadableErrorType {\n         dst: Box<dyn Write + Send>,\n         source_map: Option<Lrc<SourceMap>>,\n         bundle: Option<Lrc<FluentBundle>>,\n-        fallback_bundle: Lrc<FluentBundle>,\n+        fallback_bundle: LazyFallbackBundle,\n         teach: bool,\n         terminal_width: Option<usize>,\n         macro_backtrace: bool,\n@@ -233,7 +234,7 @@ pub trait Emitter {\n     /// Return `FluentBundle` with localized diagnostics for the default locale of the compiler.\n     /// Used when the user has not requested a specific language or when a localized diagnostic is\n     /// unavailable for the requested locale.\n-    fn fallback_fluent_bundle(&self) -> &Lrc<FluentBundle>;\n+    fn fallback_fluent_bundle(&self) -> &FluentBundle;\n \n     /// Convert diagnostic arguments (a rustc internal type that exists to implement\n     /// `Encodable`/`Decodable`) into `FluentArgs` which is necessary to perform translation.\n@@ -579,8 +580,8 @@ impl Emitter for EmitterWriter {\n         self.fluent_bundle.as_ref()\n     }\n \n-    fn fallback_fluent_bundle(&self) -> &Lrc<FluentBundle> {\n-        &self.fallback_bundle\n+    fn fallback_fluent_bundle(&self) -> &FluentBundle {\n+        &**self.fallback_bundle\n     }\n \n     fn emit_diagnostic(&mut self, diag: &Diagnostic) {\n@@ -635,7 +636,7 @@ impl Emitter for SilentEmitter {\n         None\n     }\n \n-    fn fallback_fluent_bundle(&self) -> &Lrc<FluentBundle> {\n+    fn fallback_fluent_bundle(&self) -> &FluentBundle {\n         panic!(\"silent emitter attempted to translate message\")\n     }\n \n@@ -695,7 +696,7 @@ pub struct EmitterWriter {\n     dst: Destination,\n     sm: Option<Lrc<SourceMap>>,\n     fluent_bundle: Option<Lrc<FluentBundle>>,\n-    fallback_bundle: Lrc<FluentBundle>,\n+    fallback_bundle: LazyFallbackBundle,\n     short_message: bool,\n     teach: bool,\n     ui_testing: bool,\n@@ -716,7 +717,7 @@ impl EmitterWriter {\n         color_config: ColorConfig,\n         source_map: Option<Lrc<SourceMap>>,\n         fluent_bundle: Option<Lrc<FluentBundle>>,\n-        fallback_bundle: Lrc<FluentBundle>,\n+        fallback_bundle: LazyFallbackBundle,\n         short_message: bool,\n         teach: bool,\n         terminal_width: Option<usize>,\n@@ -740,7 +741,7 @@ impl EmitterWriter {\n         dst: Box<dyn Write + Send>,\n         source_map: Option<Lrc<SourceMap>>,\n         fluent_bundle: Option<Lrc<FluentBundle>>,\n-        fallback_bundle: Lrc<FluentBundle>,\n+        fallback_bundle: LazyFallbackBundle,\n         short_message: bool,\n         teach: bool,\n         colored: bool,"}, {"sha": "0139007da4261222d7b565c72da23e59bca2b586", "filename": "compiler/rustc_errors/src/json.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/34a6c9f26e2ce32cad0d71f5e342365b09f4d12c/compiler%2Frustc_errors%2Fsrc%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34a6c9f26e2ce32cad0d71f5e342365b09f4d12c/compiler%2Frustc_errors%2Fsrc%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fjson.rs?ref=34a6c9f26e2ce32cad0d71f5e342365b09f4d12c", "patch": "@@ -15,7 +15,9 @@ use crate::emitter::{Emitter, HumanReadableErrorType};\n use crate::registry::Registry;\n use crate::DiagnosticId;\n use crate::ToolMetadata;\n-use crate::{CodeSuggestion, FluentBundle, MultiSpan, SpanLabel, SubDiagnostic};\n+use crate::{\n+    CodeSuggestion, FluentBundle, LazyFallbackBundle, MultiSpan, SpanLabel, SubDiagnostic,\n+};\n use rustc_lint_defs::Applicability;\n \n use rustc_data_structures::sync::Lrc;\n@@ -38,7 +40,7 @@ pub struct JsonEmitter {\n     registry: Option<Registry>,\n     sm: Lrc<SourceMap>,\n     fluent_bundle: Option<Lrc<FluentBundle>>,\n-    fallback_bundle: Lrc<FluentBundle>,\n+    fallback_bundle: LazyFallbackBundle,\n     pretty: bool,\n     ui_testing: bool,\n     json_rendered: HumanReadableErrorType,\n@@ -51,7 +53,7 @@ impl JsonEmitter {\n         registry: Option<Registry>,\n         source_map: Lrc<SourceMap>,\n         fluent_bundle: Option<Lrc<FluentBundle>>,\n-        fallback_bundle: Lrc<FluentBundle>,\n+        fallback_bundle: LazyFallbackBundle,\n         pretty: bool,\n         json_rendered: HumanReadableErrorType,\n         terminal_width: Option<usize>,\n@@ -75,7 +77,7 @@ impl JsonEmitter {\n         pretty: bool,\n         json_rendered: HumanReadableErrorType,\n         fluent_bundle: Option<Lrc<FluentBundle>>,\n-        fallback_bundle: Lrc<FluentBundle>,\n+        fallback_bundle: LazyFallbackBundle,\n         terminal_width: Option<usize>,\n         macro_backtrace: bool,\n     ) -> JsonEmitter {\n@@ -97,7 +99,7 @@ impl JsonEmitter {\n         registry: Option<Registry>,\n         source_map: Lrc<SourceMap>,\n         fluent_bundle: Option<Lrc<FluentBundle>>,\n-        fallback_bundle: Lrc<FluentBundle>,\n+        fallback_bundle: LazyFallbackBundle,\n         pretty: bool,\n         json_rendered: HumanReadableErrorType,\n         terminal_width: Option<usize>,\n@@ -192,8 +194,8 @@ impl Emitter for JsonEmitter {\n         self.fluent_bundle.as_ref()\n     }\n \n-    fn fallback_fluent_bundle(&self) -> &Lrc<FluentBundle> {\n-        &self.fallback_bundle\n+    fn fallback_fluent_bundle(&self) -> &FluentBundle {\n+        &**self.fallback_bundle\n     }\n \n     fn should_show_explain(&self) -> bool {"}, {"sha": "7eb6a4975fe97b1c075bef047d09796066cd4786", "filename": "compiler/rustc_errors/src/json/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34a6c9f26e2ce32cad0d71f5e342365b09f4d12c/compiler%2Frustc_errors%2Fsrc%2Fjson%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34a6c9f26e2ce32cad0d71f5e342365b09f4d12c/compiler%2Frustc_errors%2Fsrc%2Fjson%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fjson%2Ftests.rs?ref=34a6c9f26e2ce32cad0d71f5e342365b09f4d12c", "patch": "@@ -40,7 +40,7 @@ fn test_positions(code: &str, span: (u32, u32), expected_output: SpanTestData) {\n         let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n         sm.new_source_file(Path::new(\"test.rs\").to_owned().into(), code.to_owned());\n         let fallback_bundle =\n-            crate::fallback_fluent_bundle(false).expect(\"failed to load fallback fluent bundle\");\n+            crate::fallback_fluent_bundle(rustc_error_messages::DEFAULT_LOCALE_RESOURCES, false);\n \n         let output = Arc::new(Mutex::new(Vec::new()));\n         let je = JsonEmitter::new("}, {"sha": "cfad1fc01abb01a279345f9c8a72212f3fec29c2", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/34a6c9f26e2ce32cad0d71f5e342365b09f4d12c/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34a6c9f26e2ce32cad0d71f5e342365b09f4d12c/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=34a6c9f26e2ce32cad0d71f5e342365b09f4d12c", "patch": "@@ -33,7 +33,7 @@ use rustc_data_structures::sync::{self, Lock, Lrc};\n use rustc_data_structures::AtomicRef;\n pub use rustc_error_messages::{\n     fallback_fluent_bundle, fluent_bundle, DiagnosticMessage, FluentBundle, LanguageIdentifier,\n-    MultiSpan, SpanLabel,\n+    LazyFallbackBundle, MultiSpan, SpanLabel, DEFAULT_LOCALE_RESOURCES,\n };\n pub use rustc_lint_defs::{pluralize, Applicability};\n use rustc_serialize::json::Json;\n@@ -547,7 +547,7 @@ impl Handler {\n         treat_err_as_bug: Option<NonZeroUsize>,\n         sm: Option<Lrc<SourceMap>>,\n         fluent_bundle: Option<Lrc<FluentBundle>>,\n-        fallback_bundle: Lrc<FluentBundle>,\n+        fallback_bundle: LazyFallbackBundle,\n     ) -> Self {\n         Self::with_tty_emitter_and_flags(\n             color_config,\n@@ -562,7 +562,7 @@ impl Handler {\n         color_config: ColorConfig,\n         sm: Option<Lrc<SourceMap>>,\n         fluent_bundle: Option<Lrc<FluentBundle>>,\n-        fallback_bundle: Lrc<FluentBundle>,\n+        fallback_bundle: LazyFallbackBundle,\n         flags: HandlerFlags,\n     ) -> Self {\n         let emitter = Box::new(EmitterWriter::stderr("}, {"sha": "693159f9aec4a3e8855d807edf5a22e68bd74d39", "filename": "compiler/rustc_expand/src/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34a6c9f26e2ce32cad0d71f5e342365b09f4d12c/compiler%2Frustc_expand%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34a6c9f26e2ce32cad0d71f5e342365b09f4d12c/compiler%2Frustc_expand%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Ftests.rs?ref=34a6c9f26e2ce32cad0d71f5e342365b09f4d12c", "patch": "@@ -127,8 +127,8 @@ fn test_harness(file_text: &str, span_labels: Vec<SpanLabel>, expected_output: &\n     create_default_session_if_not_set_then(|_| {\n         let output = Arc::new(Mutex::new(Vec::new()));\n \n-        let fallback_bundle = rustc_errors::fallback_fluent_bundle(false)\n-            .expect(\"failed to load fallback fluent bundle\");\n+        let fallback_bundle =\n+            rustc_errors::fallback_fluent_bundle(rustc_errors::DEFAULT_LOCALE_RESOURCES, false);\n         let source_map = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n         source_map.new_source_file(Path::new(\"test.rs\").to_owned().into(), file_text.to_owned());\n "}, {"sha": "6a36ae63c6834ad6ef2224f4a545d2d1312922e2", "filename": "compiler/rustc_session/src/parse.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/34a6c9f26e2ce32cad0d71f5e342365b09f4d12c/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34a6c9f26e2ce32cad0d71f5e342365b09f4d12c/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fparse.rs?ref=34a6c9f26e2ce32cad0d71f5e342365b09f4d12c", "patch": "@@ -173,8 +173,7 @@ pub struct ParseSess {\n impl ParseSess {\n     /// Used for testing.\n     pub fn new(file_path_mapping: FilePathMapping) -> Self {\n-        let fallback_bundle =\n-            fallback_fluent_bundle(false).expect(\"failed to load fallback fluent bundle\");\n+        let fallback_bundle = fallback_fluent_bundle(rustc_errors::DEFAULT_LOCALE_RESOURCES, false);\n         let sm = Lrc::new(SourceMap::new(file_path_mapping));\n         let handler = Handler::with_tty_emitter(\n             ColorConfig::Auto,\n@@ -211,8 +210,7 @@ impl ParseSess {\n     }\n \n     pub fn with_silent_emitter(fatal_note: Option<String>) -> Self {\n-        let fallback_bundle =\n-            fallback_fluent_bundle(false).expect(\"failed to load fallback fluent bundle\");\n+        let fallback_bundle = fallback_fluent_bundle(rustc_errors::DEFAULT_LOCALE_RESOURCES, false);\n         let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n         let fatal_handler =\n             Handler::with_tty_emitter(ColorConfig::Auto, false, None, None, None, fallback_bundle);"}, {"sha": "c461b26788a2f0dc74e730c1a43cedf576db1c1e", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 7, "deletions": 15, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/34a6c9f26e2ce32cad0d71f5e342365b09f4d12c/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34a6c9f26e2ce32cad0d71f5e342365b09f4d12c/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=34a6c9f26e2ce32cad0d71f5e342365b09f4d12c", "patch": "@@ -21,7 +21,7 @@ use rustc_errors::json::JsonEmitter;\n use rustc_errors::registry::Registry;\n use rustc_errors::{\n     fallback_fluent_bundle, DiagnosticBuilder, DiagnosticId, DiagnosticMessage, EmissionGuarantee,\n-    ErrorGuaranteed, FluentBundle, MultiSpan,\n+    ErrorGuaranteed, FluentBundle, LazyFallbackBundle, MultiSpan,\n };\n use rustc_macros::HashStable_Generic;\n pub use rustc_span::def_id::StableCrateId;\n@@ -1080,7 +1080,7 @@ fn default_emitter(\n     registry: rustc_errors::registry::Registry,\n     source_map: Lrc<SourceMap>,\n     bundle: Option<Lrc<FluentBundle>>,\n-    fallback_bundle: Lrc<FluentBundle>,\n+    fallback_bundle: LazyFallbackBundle,\n     emitter_dest: Option<Box<dyn Write + Send>>,\n ) -> Box<dyn Emitter + sync::Send> {\n     let macro_backtrace = sopts.debugging_opts.macro_backtrace;\n@@ -1215,17 +1215,10 @@ pub fn build_session(\n         hash_kind,\n     ));\n \n-    let fallback_bundle =\n-        match fallback_fluent_bundle(sopts.debugging_opts.translate_directionality_markers) {\n-            Ok(bundle) => bundle,\n-            Err(e) => {\n-                early_error(\n-                    sopts.error_format,\n-                    &format!(\"failed to load fallback fluent bundle: {e}\"),\n-                );\n-            }\n-        };\n-\n+    let fallback_bundle = fallback_fluent_bundle(\n+        rustc_errors::DEFAULT_LOCALE_RESOURCES,\n+        sopts.debugging_opts.translate_directionality_markers,\n+    );\n     let emitter =\n         default_emitter(&sopts, registry, source_map.clone(), bundle, fallback_bundle, write_dest);\n \n@@ -1460,8 +1453,7 @@ pub enum IncrCompSession {\n }\n \n fn early_error_handler(output: config::ErrorOutputType) -> rustc_errors::Handler {\n-    let fallback_bundle =\n-        fallback_fluent_bundle(false).expect(\"failed to load fallback fluent bundle\");\n+    let fallback_bundle = fallback_fluent_bundle(rustc_errors::DEFAULT_LOCALE_RESOURCES, false);\n     let emitter: Box<dyn Emitter + sync::Send> = match output {\n         config::ErrorOutputType::HumanReadable(kind) => {\n             let (short, color_config) = kind.unzip();"}, {"sha": "81c11dc30cb58edae9ff907d5804ef08f87d577e", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34a6c9f26e2ce32cad0d71f5e342365b09f4d12c/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34a6c9f26e2ce32cad0d71f5e342365b09f4d12c/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=34a6c9f26e2ce32cad0d71f5e342365b09f4d12c", "patch": "@@ -146,7 +146,7 @@ crate fn new_handler(\n     debugging_opts: &DebuggingOptions,\n ) -> rustc_errors::Handler {\n     let fallback_bundle =\n-        rustc_errors::fallback_fluent_bundle(false).expect(\"failed to load fallback fluent bundle\");\n+        rustc_errors::fallback_fluent_bundle(rustc_errors::DEFAULT_LOCALE_RESOURCES, false);\n     let emitter: Box<dyn Emitter + sync::Send> = match error_format {\n         ErrorOutputType::HumanReadable(kind) => {\n             let (short, color_config) = kind.unzip();"}, {"sha": "618268445743acbb10d3959b33aafffbc3d8e832", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34a6c9f26e2ce32cad0d71f5e342365b09f4d12c/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34a6c9f26e2ce32cad0d71f5e342365b09f4d12c/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=34a6c9f26e2ce32cad0d71f5e342365b09f4d12c", "patch": "@@ -537,8 +537,8 @@ crate fn make_test(\n             // Any errors in parsing should also appear when the doctest is compiled for real, so just\n             // send all the errors that librustc_ast emits directly into a `Sink` instead of stderr.\n             let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n-            let fallback_bundle = rustc_errors::fallback_fluent_bundle(false)\n-                .expect(\"failed to load fallback fluent bundle\");\n+            let fallback_bundle =\n+                rustc_errors::fallback_fluent_bundle(rustc_errors::DEFAULT_LOCALE_RESOURCES, false);\n             supports_color = EmitterWriter::stderr(\n                 ColorConfig::Auto,\n                 None,"}, {"sha": "d66dfca07f186850f5893d4cffb7964fad6ec0e5", "filename": "src/librustdoc/passes/check_code_block_syntax.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/34a6c9f26e2ce32cad0d71f5e342365b09f4d12c/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34a6c9f26e2ce32cad0d71f5e342365b09f4d12c/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs?ref=34a6c9f26e2ce32cad0d71f5e342365b09f4d12c", "patch": "@@ -1,6 +1,6 @@\n //! Validates syntax inside Rust code blocks (\\`\\`\\`rust).\n use rustc_data_structures::sync::{Lock, Lrc};\n-use rustc_errors::{emitter::Emitter, Applicability, Diagnostic, Handler};\n+use rustc_errors::{emitter::Emitter, Applicability, Diagnostic, Handler, LazyFallbackBundle};\n use rustc_middle::lint::LintDiagnosticBuilder;\n use rustc_parse::parse_stream_from_source_str;\n use rustc_session::parse::ParseSess;\n@@ -32,8 +32,8 @@ struct SyntaxChecker<'a, 'tcx> {\n impl<'a, 'tcx> SyntaxChecker<'a, 'tcx> {\n     fn check_rust_syntax(&self, item: &clean::Item, dox: &str, code_block: RustCodeBlock) {\n         let buffer = Lrc::new(Lock::new(Buffer::default()));\n-        let fallback_bundle = rustc_errors::fallback_fluent_bundle(false)\n-            .expect(\"failed to load fallback fluent bundle\");\n+        let fallback_bundle =\n+            rustc_errors::fallback_fluent_bundle(rustc_errors::DEFAULT_LOCALE_RESOURCES, false);\n         let emitter = BufferEmitter { buffer: Lrc::clone(&buffer), fallback_bundle };\n \n         let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n@@ -173,7 +173,7 @@ struct Buffer {\n \n struct BufferEmitter {\n     buffer: Lrc<Lock<Buffer>>,\n-    fallback_bundle: Lrc<rustc_errors::FluentBundle>,\n+    fallback_bundle: LazyFallbackBundle,\n }\n \n impl Emitter for BufferEmitter {\n@@ -194,7 +194,7 @@ impl Emitter for BufferEmitter {\n         None\n     }\n \n-    fn fallback_fluent_bundle(&self) -> &Lrc<rustc_errors::FluentBundle> {\n-        &self.fallback_bundle\n+    fn fallback_fluent_bundle(&self) -> &rustc_errors::FluentBundle {\n+        &**self.fallback_bundle\n     }\n }"}, {"sha": "503cef76775e4c8a56fa5479f8efe0066c2e09d3", "filename": "src/tools/clippy/clippy_lints/src/doc.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/34a6c9f26e2ce32cad0d71f5e342365b09f4d12c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34a6c9f26e2ce32cad0d71f5e342365b09f4d12c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdoc.rs?ref=34a6c9f26e2ce32cad0d71f5e342365b09f4d12c", "patch": "@@ -621,8 +621,10 @@ fn check_code(cx: &LateContext<'_>, text: &str, edition: Edition, span: Span) {\n                 let filename = FileName::anon_source_code(&code);\n \n                 let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n-                let fallback_bundle =\n-                    rustc_errors::fallback_fluent_bundle(false).expect(\"failed to load fallback fluent bundle\");\n+                let fallback_bundle = rustc_errors::fallback_fluent_bundle(\n+                    rustc_errors::DEFAULT_LOCALE_RESOURCES,\n+                    false\n+                );\n                 let emitter = EmitterWriter::new(\n                     Box::new(io::sink()),\n                     None,"}, {"sha": "32a09fdb9d9ffe6b407ea415b95487f863920367", "filename": "src/tools/clippy/src/driver.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/34a6c9f26e2ce32cad0d71f5e342365b09f4d12c/src%2Ftools%2Fclippy%2Fsrc%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34a6c9f26e2ce32cad0d71f5e342365b09f4d12c/src%2Ftools%2Fclippy%2Fsrc%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fsrc%2Fdriver.rs?ref=34a6c9f26e2ce32cad0d71f5e342365b09f4d12c", "patch": "@@ -165,7 +165,8 @@ fn report_clippy_ice(info: &panic::PanicInfo<'_>, bug_report_url: &str) {\n     // Separate the output with an empty line\n     eprintln!();\n \n-    let fallback_bundle = rustc_errors::fallback_fluent_bundle(false).expect(\"failed to load fallback fluent bundle\");\n+    let fallback_bundle =\n+        rustc_errors::fallback_fluent_bundle(rustc_errors::DEFAULT_LOCALE_RESOURCES, false);\n     let emitter = Box::new(rustc_errors::emitter::EmitterWriter::stderr(\n         rustc_errors::ColorConfig::Auto,\n         None,"}, {"sha": "4408e20747a6aa3b18352b360e88525582281144", "filename": "src/tools/rustfmt/src/parse/session.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/34a6c9f26e2ce32cad0d71f5e342365b09f4d12c/src%2Ftools%2Frustfmt%2Fsrc%2Fparse%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34a6c9f26e2ce32cad0d71f5e342365b09f4d12c/src%2Ftools%2Frustfmt%2Fsrc%2Fparse%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fparse%2Fsession.rs?ref=34a6c9f26e2ce32cad0d71f5e342365b09f4d12c", "patch": "@@ -36,7 +36,7 @@ impl Emitter for SilentEmitter {\n     fn fluent_bundle(&self) -> Option<&Lrc<rustc_errors::FluentBundle>> {\n         None\n     }\n-    fn fallback_fluent_bundle(&self) -> &Lrc<rustc_errors::FluentBundle> {\n+    fn fallback_fluent_bundle(&self) -> &rustc_errors::FluentBundle {\n         panic!(\"silent emitter attempted to translate a diagnostic\");\n     }\n }\n@@ -93,7 +93,7 @@ impl Emitter for SilentOnIgnoredFilesEmitter {\n         self.emitter.fluent_bundle()\n     }\n \n-    fn fallback_fluent_bundle(&self) -> &Lrc<rustc_errors::FluentBundle> {\n+    fn fallback_fluent_bundle(&self) -> &rustc_errors::FluentBundle {\n         self.emitter.fallback_fluent_bundle()\n     }\n }\n@@ -114,8 +114,8 @@ fn default_handler(\n     let emitter = if hide_parse_errors {\n         silent_emitter()\n     } else {\n-        let fallback_bundle = rustc_errors::fallback_fluent_bundle(false)\n-            .expect(\"failed to load fallback fluent bundle\");\n+        let fallback_bundle =\n+            rustc_errors::fallback_fluent_bundle(rustc_errors::DEFAULT_LOCALE_RESOURCES, false);\n         Box::new(EmitterWriter::stderr(\n             color_cfg,\n             Some(source_map.clone()),\n@@ -350,7 +350,7 @@ mod tests {\n             fn fluent_bundle(&self) -> Option<&Lrc<rustc_errors::FluentBundle>> {\n                 None\n             }\n-            fn fallback_fluent_bundle(&self) -> &Lrc<rustc_errors::FluentBundle> {\n+            fn fallback_fluent_bundle(&self) -> &rustc_errors::FluentBundle {\n                 panic!(\"test emitter attempted to translate a diagnostic\");\n             }\n         }"}]}