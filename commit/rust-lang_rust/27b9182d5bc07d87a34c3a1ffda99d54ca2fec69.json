{"sha": "27b9182d5bc07d87a34c3a1ffda99d54ca2fec69", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3YjkxODJkNWJjMDdkODdhMzRjM2ExZmZkYTk5ZDU0Y2EyZmVjNjk=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-08-01T02:43:11Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-08-01T03:06:22Z"}, "message": "review changes", "tree": {"sha": "e8d5e38d1414312584c90c7cafdfb7dba36e6753", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8d5e38d1414312584c90c7cafdfb7dba36e6753"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/27b9182d5bc07d87a34c3a1ffda99d54ca2fec69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/27b9182d5bc07d87a34c3a1ffda99d54ca2fec69", "html_url": "https://github.com/rust-lang/rust/commit/27b9182d5bc07d87a34c3a1ffda99d54ca2fec69", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/27b9182d5bc07d87a34c3a1ffda99d54ca2fec69/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bbc00c9e9c162fffddf7e8a4585aab10ecfc9d6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/bbc00c9e9c162fffddf7e8a4585aab10ecfc9d6d", "html_url": "https://github.com/rust-lang/rust/commit/bbc00c9e9c162fffddf7e8a4585aab10ecfc9d6d"}], "stats": {"total": 18, "additions": 11, "deletions": 7}, "files": [{"sha": "ed8a83e9e6e1deebf851a27a4e3bbc7d4e042fbe", "filename": "src/Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/27b9182d5bc07d87a34c3a1ffda99d54ca2fec69/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/27b9182d5bc07d87a34c3a1ffda99d54ca2fec69/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=27b9182d5bc07d87a34c3a1ffda99d54ca2fec69", "patch": "@@ -1549,6 +1549,7 @@ dependencies = [\n  \"rls-span 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n  \"rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc_data_structures 0.0.0\",\n  \"rustc_typeck 0.0.0\",\n  \"syntax 0.0.0\",\n  \"syntax_pos 0.0.0\","}, {"sha": "00b01994eb8b56ceceefb7c3a17cc48cbeda30eb", "filename": "src/librustc_save_analysis/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/27b9182d5bc07d87a34c3a1ffda99d54ca2fec69/src%2Flibrustc_save_analysis%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/27b9182d5bc07d87a34c3a1ffda99d54ca2fec69/src%2Flibrustc_save_analysis%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2FCargo.toml?ref=27b9182d5bc07d87a34c3a1ffda99d54ca2fec69", "patch": "@@ -11,6 +11,7 @@ crate-type = [\"dylib\"]\n [dependencies]\n log = \"0.3\"\n rustc = { path = \"../librustc\" }\n+rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_typeck = { path = \"../librustc_typeck\" }\n syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }"}, {"sha": "f74e8cb216083172a2ddd3cb52bc1e4956b5aaf4", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/27b9182d5bc07d87a34c3a1ffda99d54ca2fec69/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27b9182d5bc07d87a34c3a1ffda99d54ca2fec69/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=27b9182d5bc07d87a34c3a1ffda99d54ca2fec69", "patch": "@@ -29,8 +29,8 @@ use rustc::hir::def_id::DefId;\n use rustc::hir::map::Node;\n use rustc::session::Session;\n use rustc::ty::{self, TyCtxt};\n+use rustc_data_structures::fx::FxHashSet;\n \n-use std::collections::HashSet;\n use std::path::Path;\n \n use syntax::ast::{self, NodeId, PatKind, Attribute, CRATE_NODE_ID};\n@@ -75,7 +75,7 @@ pub struct DumpVisitor<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> {\n     // we only write one macro def per unique macro definition, and\n     // one macro use per unique callsite span.\n     // mac_defs: HashSet<Span>,\n-    macro_calls: HashSet<Span>,\n+    macro_calls: FxHashSet<Span>,\n }\n \n impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n@@ -91,7 +91,7 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n             span: span_utils.clone(),\n             cur_scope: CRATE_NODE_ID,\n             // mac_defs: HashSet::new(),\n-            macro_calls: HashSet::new(),\n+            macro_calls: FxHashSet(),\n         }\n     }\n "}, {"sha": "1dd0df4108fc6dc5708c0079c1ec19d033c7934e", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/27b9182d5bc07d87a34c3a1ffda99d54ca2fec69/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27b9182d5bc07d87a34c3a1ffda99d54ca2fec69/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=27b9182d5bc07d87a34c3a1ffda99d54ca2fec69", "patch": "@@ -23,6 +23,7 @@\n \n #[macro_use] extern crate log;\n #[macro_use] extern crate syntax;\n+extern crate rustc_data_structures;\n extern crate rustc_serialize;\n extern crate rustc_typeck;\n extern crate syntax_pos;"}, {"sha": "e771da2ed4cebfa9a7d9b014cd4fc7b4bfd9a95a", "filename": "src/librustc_save_analysis/span_utils.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/27b9182d5bc07d87a34c3a1ffda99d54ca2fec69/src%2Flibrustc_save_analysis%2Fspan_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27b9182d5bc07d87a34c3a1ffda99d54ca2fec69/src%2Flibrustc_save_analysis%2Fspan_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fspan_utils.rs?ref=27b9182d5bc07d87a34c3a1ffda99d54ca2fec69", "patch": "@@ -398,9 +398,10 @@ impl<'a> SpanUtils<'a> {\n             return false;\n         }\n         // If sub_span is none, filter out generated code.\n-        if sub_span.is_none() {\n-            return true;\n-        }\n+        let sub_span = match sub_span {\n+            Some(ss) => ss,\n+            None => return true,\n+        };\n \n         //If the span comes from a fake filemap, filter it.\n         if !self.sess.codemap().lookup_char_pos(parent.lo).file.is_real_file() {\n@@ -409,7 +410,7 @@ impl<'a> SpanUtils<'a> {\n \n         // Otherwise, a generated span is deemed invalid if it is not a sub-span of the root\n         // callsite. This filters out macro internal variables and most malformed spans.\n-        !parent.source_callsite().contains(sub_span.unwrap())\n+        !parent.source_callsite().contains(sub_span)\n     }\n }\n "}]}