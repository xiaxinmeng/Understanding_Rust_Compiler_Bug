{"sha": "3b1c8a94a4e8a6ba8bc7b39cc3580db9e5b72295", "node_id": "C_kwDOAAsO6NoAKDNiMWM4YTk0YTRlOGE2YmE4YmM3YjM5Y2MzNTgwZGI5ZTViNzIyOTU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-03T08:05:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-03T08:05:54Z"}, "message": "Auto merge of #105609 - bjorn3:shrink_rustc_dev, r=jyn514\n\nOnly include metadata for non-dynamic libraries in rustc-dev\n\nThe actual object code should be linked from librustc_driver.so, which is still included in rustc-dev. This saves on download time and disk usage.\n\nFixes https://github.com/rust-lang/rust/issues/103538", "tree": {"sha": "b51b01e9d18e786cf1f1a4379356cf593291f56f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b51b01e9d18e786cf1f1a4379356cf593291f56f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b1c8a94a4e8a6ba8bc7b39cc3580db9e5b72295", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b1c8a94a4e8a6ba8bc7b39cc3580db9e5b72295", "html_url": "https://github.com/rust-lang/rust/commit/3b1c8a94a4e8a6ba8bc7b39cc3580db9e5b72295", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b1c8a94a4e8a6ba8bc7b39cc3580db9e5b72295/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "442f997f98ac9f16f60ba3a7109f884dbf8d370c", "url": "https://api.github.com/repos/rust-lang/rust/commits/442f997f98ac9f16f60ba3a7109f884dbf8d370c", "html_url": "https://github.com/rust-lang/rust/commit/442f997f98ac9f16f60ba3a7109f884dbf8d370c"}, {"sha": "8c000a68c5988f6e04c74180d4c0107a996110db", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c000a68c5988f6e04c74180d4c0107a996110db", "html_url": "https://github.com/rust-lang/rust/commit/8c000a68c5988f6e04c74180d4c0107a996110db"}], "stats": {"total": 193, "additions": 181, "deletions": 12}, "files": [{"sha": "79b8b417257045a6b60f244acf4f4a0f7acc35d5", "filename": "compiler/rustc_error_messages/locales/en-US/metadata.ftl", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3b1c8a94a4e8a6ba8bc7b39cc3580db9e5b72295/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmetadata.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/3b1c8a94a4e8a6ba8bc7b39cc3580db9e5b72295/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmetadata.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmetadata.ftl?ref=3b1c8a94a4e8a6ba8bc7b39cc3580db9e5b72295", "patch": "@@ -4,6 +4,11 @@ metadata_rlib_required =\n metadata_lib_required =\n     crate `{$crate_name}` required to be available in {$kind} format, but was not found in this form\n \n+metadata_rustc_lib_required =\n+    crate `{$crate_name}` required to be available in {$kind} format, but was not found in this form\n+    .note = only .rmeta files are distributed for `rustc_private` crates other than `rustc_driver`\n+    .help = try adding `extern crate rustc_driver;` at the top level of this crate\n+\n metadata_crate_dep_multiple =\n     cannot satisfy dependencies so `{$crate_name}` only shows up once\n     .help = having upstream crates all available in one format will likely make this go away"}, {"sha": "cee4ba56a9d8f863180eefcb1c3bb4e7745ae23c", "filename": "compiler/rustc_metadata/src/dependency_format.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3b1c8a94a4e8a6ba8bc7b39cc3580db9e5b72295/compiler%2Frustc_metadata%2Fsrc%2Fdependency_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b1c8a94a4e8a6ba8bc7b39cc3580db9e5b72295/compiler%2Frustc_metadata%2Fsrc%2Fdependency_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fdependency_format.rs?ref=3b1c8a94a4e8a6ba8bc7b39cc3580db9e5b72295", "patch": "@@ -54,7 +54,7 @@\n use crate::creader::CStore;\n use crate::errors::{\n     BadPanicStrategy, CrateDepMultiple, IncompatiblePanicInDropStrategy, LibRequired,\n-    RequiredPanicStrategy, RlibRequired, TwoPanicRuntimes,\n+    RequiredPanicStrategy, RlibRequired, RustcLibRequired, TwoPanicRuntimes,\n };\n \n use rustc_data_structures::fx::FxHashMap;\n@@ -224,7 +224,12 @@ fn calculate_type(tcx: TyCtxt<'_>, ty: CrateType) -> DependencyList {\n                     Linkage::Static => \"rlib\",\n                     _ => \"dylib\",\n                 };\n-                sess.emit_err(LibRequired { crate_name: tcx.crate_name(cnum), kind: kind });\n+                let crate_name = tcx.crate_name(cnum);\n+                if crate_name.as_str().starts_with(\"rustc_\") {\n+                    sess.emit_err(RustcLibRequired { crate_name, kind });\n+                } else {\n+                    sess.emit_err(LibRequired { crate_name, kind });\n+                }\n             }\n         }\n     }"}, {"sha": "02c03114eb67f637cf5b1236e0d25d1310239019", "filename": "compiler/rustc_metadata/src/errors.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3b1c8a94a4e8a6ba8bc7b39cc3580db9e5b72295/compiler%2Frustc_metadata%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b1c8a94a4e8a6ba8bc7b39cc3580db9e5b72295/compiler%2Frustc_metadata%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Ferrors.rs?ref=3b1c8a94a4e8a6ba8bc7b39cc3580db9e5b72295", "patch": "@@ -24,6 +24,14 @@ pub struct LibRequired<'a> {\n     pub kind: &'a str,\n }\n \n+#[derive(Diagnostic)]\n+#[diag(metadata_rustc_lib_required)]\n+#[help]\n+pub struct RustcLibRequired<'a> {\n+    pub crate_name: Symbol,\n+    pub kind: &'a str,\n+}\n+\n #[derive(Diagnostic)]\n #[diag(metadata_crate_dep_multiple)]\n #[help]"}, {"sha": "b203ecd3844b039d11358abc156f6d7b427a8be6", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3b1c8a94a4e8a6ba8bc7b39cc3580db9e5b72295/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b1c8a94a4e8a6ba8bc7b39cc3580db9e5b72295/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=3b1c8a94a4e8a6ba8bc7b39cc3580db9e5b72295", "patch": "@@ -105,7 +105,7 @@ impl Step for Std {\n             \"Checking stage{} library artifacts ({} -> {})\",\n             builder.top_stage, &compiler.host, target\n         ));\n-        run_cargo(builder, cargo, &libstd_stamp(builder, compiler, target), vec![], true);\n+        run_cargo(builder, cargo, &libstd_stamp(builder, compiler, target), vec![], true, false);\n \n         // We skip populating the sysroot in non-zero stage because that'll lead\n         // to rlib/rmeta conflicts if std gets built during this session.\n@@ -155,7 +155,14 @@ impl Step for Std {\n             \"Checking stage{} library test/bench/example targets ({} -> {})\",\n             builder.top_stage, &compiler.host, target\n         ));\n-        run_cargo(builder, cargo, &libstd_test_stamp(builder, compiler, target), vec![], true);\n+        run_cargo(\n+            builder,\n+            cargo,\n+            &libstd_test_stamp(builder, compiler, target),\n+            vec![],\n+            true,\n+            false,\n+        );\n     }\n }\n \n@@ -225,7 +232,7 @@ impl Step for Rustc {\n             \"Checking stage{} compiler artifacts ({} -> {})\",\n             builder.top_stage, &compiler.host, target\n         ));\n-        run_cargo(builder, cargo, &librustc_stamp(builder, compiler, target), vec![], true);\n+        run_cargo(builder, cargo, &librustc_stamp(builder, compiler, target), vec![], true, false);\n \n         let libdir = builder.sysroot_libdir(compiler, target);\n         let hostdir = builder.sysroot_libdir(compiler, compiler.host);\n@@ -285,6 +292,7 @@ impl Step for CodegenBackend {\n             &codegen_backend_stamp(builder, compiler, target, backend),\n             vec![],\n             true,\n+            false,\n         );\n     }\n }\n@@ -343,7 +351,7 @@ impl Step for RustAnalyzer {\n             \"Checking stage{} {} artifacts ({} -> {})\",\n             compiler.stage, \"rust-analyzer\", &compiler.host.triple, target.triple\n         ));\n-        run_cargo(builder, cargo, &stamp(builder, compiler, target), vec![], true);\n+        run_cargo(builder, cargo, &stamp(builder, compiler, target), vec![], true, false);\n \n         /// Cargo's output path in a given stage, compiled by a particular\n         /// compiler for the specified target.\n@@ -417,6 +425,7 @@ macro_rules! tool_check_step {\n                     &stamp(builder, compiler, target),\n                     vec![],\n                     true,\n+                    false,\n                 );\n \n                 /// Cargo's output path in a given stage, compiled by a particular"}, {"sha": "147ded3a9eed7c13ee41b09b2117bf6100e7b56f", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 43, "deletions": 6, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/3b1c8a94a4e8a6ba8bc7b39cc3580db9e5b72295/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b1c8a94a4e8a6ba8bc7b39cc3580db9e5b72295/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=3b1c8a94a4e8a6ba8bc7b39cc3580db9e5b72295", "patch": "@@ -141,7 +141,14 @@ impl Step for Std {\n             &compiler.host,\n             target,\n         ));\n-        run_cargo(builder, cargo, &libstd_stamp(builder, compiler, target), target_deps, false);\n+        run_cargo(\n+            builder,\n+            cargo,\n+            &libstd_stamp(builder, compiler, target),\n+            target_deps,\n+            false,\n+            false,\n+        );\n \n         builder.ensure(StdLink::from_std(\n             self,\n@@ -728,7 +735,14 @@ impl Step for Rustc {\n             &compiler.host,\n             target,\n         ));\n-        run_cargo(builder, cargo, &librustc_stamp(builder, compiler, target), vec![], false);\n+        run_cargo(\n+            builder,\n+            cargo,\n+            &librustc_stamp(builder, compiler, target),\n+            vec![],\n+            false,\n+            true, // Only ship rustc_driver.so and .rmeta files, not all intermediate .rlib files.\n+        );\n \n         builder.ensure(RustcLink::from_rustc(\n             self,\n@@ -984,7 +998,7 @@ impl Step for CodegenBackend {\n             \"Building stage{} codegen backend {} ({} -> {})\",\n             compiler.stage, backend, &compiler.host, target\n         ));\n-        let files = run_cargo(builder, cargo, &tmp_stamp, vec![], false);\n+        let files = run_cargo(builder, cargo, &tmp_stamp, vec![], false, false);\n         if builder.config.dry_run() {\n             return;\n         }\n@@ -1411,6 +1425,7 @@ pub fn run_cargo(\n     stamp: &Path,\n     additional_target_deps: Vec<(PathBuf, DependencyType)>,\n     is_check: bool,\n+    rlib_only_metadata: bool,\n ) -> Vec<PathBuf> {\n     if builder.config.dry_run() {\n         return Vec::new();\n@@ -1444,13 +1459,35 @@ pub fn run_cargo(\n         };\n         for filename in filenames {\n             // Skip files like executables\n-            if !(filename.ends_with(\".rlib\")\n-                || filename.ends_with(\".lib\")\n+            let mut keep = false;\n+            if filename.ends_with(\".lib\")\n                 || filename.ends_with(\".a\")\n                 || is_debug_info(&filename)\n                 || is_dylib(&filename)\n-                || (is_check && filename.ends_with(\".rmeta\")))\n             {\n+                // Always keep native libraries, rust dylibs and debuginfo\n+                keep = true;\n+            }\n+            if is_check && filename.ends_with(\".rmeta\") {\n+                // During check builds we need to keep crate metadata\n+                keep = true;\n+            } else if rlib_only_metadata {\n+                if filename.contains(\"jemalloc_sys\") || filename.contains(\"rustc_smir\") {\n+                    // jemalloc_sys and rustc_smir are not linked into librustc_driver.so,\n+                    // so we need to distribute them as rlib to be able to use them.\n+                    keep |= filename.ends_with(\".rlib\");\n+                } else {\n+                    // Distribute the rest of the rustc crates as rmeta files only to reduce\n+                    // the tarball sizes by about 50%. The object files are linked into\n+                    // librustc_driver.so, so it is still possible to link against them.\n+                    keep |= filename.ends_with(\".rmeta\");\n+                }\n+            } else {\n+                // In all other cases keep all rlibs\n+                keep |= filename.ends_with(\".rlib\");\n+            }\n+\n+            if !keep {\n                 continue;\n             }\n "}, {"sha": "384589de3b4807b789679eca7020edfdd3006ad1", "filename": "src/test/run-make-fulldeps/save-analysis/foo.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3b1c8a94a4e8a6ba8bc7b39cc3580db9e5b72295/src%2Ftest%2Frun-make-fulldeps%2Fsave-analysis%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b1c8a94a4e8a6ba8bc7b39cc3580db9e5b72295/src%2Ftest%2Frun-make-fulldeps%2Fsave-analysis%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsave-analysis%2Ffoo.rs?ref=3b1c8a94a4e8a6ba8bc7b39cc3580db9e5b72295", "patch": "@@ -5,6 +5,11 @@\n extern crate rustc_graphviz;\n // A simple rust project\n \n+// Necessary to pull in object code as the rest of the rustc crates are shipped only as rmeta\n+// files.\n+#[allow(unused_extern_crates)]\n+extern crate rustc_driver;\n+\n extern crate krate2;\n extern crate krate2 as krate3;\n "}, {"sha": "1c376f59e5174a4d82654d5724de868e39e933e9", "filename": "src/test/ui-fulldeps/deriving-encodable-decodable-box.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3b1c8a94a4e8a6ba8bc7b39cc3580db9e5b72295/src%2Ftest%2Fui-fulldeps%2Fderiving-encodable-decodable-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b1c8a94a4e8a6ba8bc7b39cc3580db9e5b72295/src%2Ftest%2Fui-fulldeps%2Fderiving-encodable-decodable-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fderiving-encodable-decodable-box.rs?ref=3b1c8a94a4e8a6ba8bc7b39cc3580db9e5b72295", "patch": "@@ -6,6 +6,11 @@\n extern crate rustc_macros;\n extern crate rustc_serialize;\n \n+// Necessary to pull in object code as the rest of the rustc crates are shipped only as rmeta\n+// files.\n+#[allow(unused_extern_crates)]\n+extern crate rustc_driver;\n+\n use rustc_macros::{Decodable, Encodable};\n use rustc_serialize::opaque::{MemDecoder, MemEncoder};\n use rustc_serialize::{Decodable, Encodable, Encoder};"}, {"sha": "844d40f2ecd6a4590500b18a1727df21d8dbbca9", "filename": "src/test/ui-fulldeps/deriving-encodable-decodable-cell-refcell.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3b1c8a94a4e8a6ba8bc7b39cc3580db9e5b72295/src%2Ftest%2Fui-fulldeps%2Fderiving-encodable-decodable-cell-refcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b1c8a94a4e8a6ba8bc7b39cc3580db9e5b72295/src%2Ftest%2Fui-fulldeps%2Fderiving-encodable-decodable-cell-refcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fderiving-encodable-decodable-cell-refcell.rs?ref=3b1c8a94a4e8a6ba8bc7b39cc3580db9e5b72295", "patch": "@@ -8,6 +8,11 @@\n extern crate rustc_macros;\n extern crate rustc_serialize;\n \n+// Necessary to pull in object code as the rest of the rustc crates are shipped only as rmeta\n+// files.\n+#[allow(unused_extern_crates)]\n+extern crate rustc_driver;\n+\n use rustc_macros::{Decodable, Encodable};\n use rustc_serialize::opaque::{MemDecoder, MemEncoder};\n use rustc_serialize::{Decodable, Encodable, Encoder};"}, {"sha": "214bb4368ffdd808aba26eeb77b533fd77bd339c", "filename": "src/test/ui-fulldeps/deriving-global.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3b1c8a94a4e8a6ba8bc7b39cc3580db9e5b72295/src%2Ftest%2Fui-fulldeps%2Fderiving-global.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b1c8a94a4e8a6ba8bc7b39cc3580db9e5b72295/src%2Ftest%2Fui-fulldeps%2Fderiving-global.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fderiving-global.rs?ref=3b1c8a94a4e8a6ba8bc7b39cc3580db9e5b72295", "patch": "@@ -5,6 +5,11 @@\n extern crate rustc_macros;\n extern crate rustc_serialize;\n \n+// Necessary to pull in object code as the rest of the rustc crates are shipped only as rmeta\n+// files.\n+#[allow(unused_extern_crates)]\n+extern crate rustc_driver;\n+\n mod submod {\n     use rustc_macros::{Decodable, Encodable};\n "}, {"sha": "e1084a08fec93f0baf472ca8bbe16f447cdc528f", "filename": "src/test/ui-fulldeps/deriving-hygiene.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3b1c8a94a4e8a6ba8bc7b39cc3580db9e5b72295/src%2Ftest%2Fui-fulldeps%2Fderiving-hygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b1c8a94a4e8a6ba8bc7b39cc3580db9e5b72295/src%2Ftest%2Fui-fulldeps%2Fderiving-hygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fderiving-hygiene.rs?ref=3b1c8a94a4e8a6ba8bc7b39cc3580db9e5b72295", "patch": "@@ -7,6 +7,11 @@ extern crate rustc_serialize;\n \n use rustc_macros::{Decodable, Encodable};\n \n+// Necessary to pull in object code as the rest of the rustc crates are shipped only as rmeta\n+// files.\n+#[allow(unused_extern_crates)]\n+extern crate rustc_driver;\n+\n pub const other: u8 = 1;\n pub const f: u8 = 1;\n pub const d: u8 = 1;"}, {"sha": "ffad80171da7798645608a04194101cdcb475b90", "filename": "src/test/ui-fulldeps/dropck_tarena_sound_drop.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3b1c8a94a4e8a6ba8bc7b39cc3580db9e5b72295/src%2Ftest%2Fui-fulldeps%2Fdropck_tarena_sound_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b1c8a94a4e8a6ba8bc7b39cc3580db9e5b72295/src%2Ftest%2Fui-fulldeps%2Fdropck_tarena_sound_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fdropck_tarena_sound_drop.rs?ref=3b1c8a94a4e8a6ba8bc7b39cc3580db9e5b72295", "patch": "@@ -14,6 +14,11 @@\n \n extern crate rustc_arena;\n \n+// Necessary to pull in object code as the rest of the rustc crates are shipped only as rmeta\n+// files.\n+#[allow(unused_extern_crates)]\n+extern crate rustc_driver;\n+\n use rustc_arena::TypedArena;\n \n trait HasId { fn count(&self) -> usize; }"}, {"sha": "10e8beaa7b119d944d9e4a6bad24a2538dd75f5c", "filename": "src/test/ui-fulldeps/empty-struct-braces-derive.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3b1c8a94a4e8a6ba8bc7b39cc3580db9e5b72295/src%2Ftest%2Fui-fulldeps%2Fempty-struct-braces-derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b1c8a94a4e8a6ba8bc7b39cc3580db9e5b72295/src%2Ftest%2Fui-fulldeps%2Fempty-struct-braces-derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fempty-struct-braces-derive.rs?ref=3b1c8a94a4e8a6ba8bc7b39cc3580db9e5b72295", "patch": "@@ -6,6 +6,11 @@\n extern crate rustc_macros;\n extern crate rustc_serialize;\n \n+// Necessary to pull in object code as the rest of the rustc crates are shipped only as rmeta\n+// files.\n+#[allow(unused_extern_crates)]\n+extern crate rustc_driver;\n+\n use rustc_macros::{Decodable, Encodable};\n \n #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default, Debug, Encodable, Decodable)]"}, {"sha": "309b5c4a03d57c3b3f0e1e95561720dc60129936", "filename": "src/test/ui-fulldeps/issue-14021.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3b1c8a94a4e8a6ba8bc7b39cc3580db9e5b72295/src%2Ftest%2Fui-fulldeps%2Fissue-14021.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b1c8a94a4e8a6ba8bc7b39cc3580db9e5b72295/src%2Ftest%2Fui-fulldeps%2Fissue-14021.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fissue-14021.rs?ref=3b1c8a94a4e8a6ba8bc7b39cc3580db9e5b72295", "patch": "@@ -7,6 +7,11 @@\n extern crate rustc_macros;\n extern crate rustc_serialize;\n \n+// Necessary to pull in object code as the rest of the rustc crates are shipped only as rmeta\n+// files.\n+#[allow(unused_extern_crates)]\n+extern crate rustc_driver;\n+\n use rustc_macros::{Decodable, Encodable};\n use rustc_serialize::opaque::{MemDecoder, MemEncoder};\n use rustc_serialize::{Decodable, Encodable, Encoder};"}, {"sha": "654cd6f6dc9aae55a4465dd2007a1d7a9da4a8a5", "filename": "src/test/ui-fulldeps/missing-rustc-driver-error.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3b1c8a94a4e8a6ba8bc7b39cc3580db9e5b72295/src%2Ftest%2Fui-fulldeps%2Fmissing-rustc-driver-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b1c8a94a4e8a6ba8bc7b39cc3580db9e5b72295/src%2Ftest%2Fui-fulldeps%2Fmissing-rustc-driver-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fmissing-rustc-driver-error.rs?ref=3b1c8a94a4e8a6ba8bc7b39cc3580db9e5b72295", "patch": "@@ -0,0 +1,11 @@\n+// Test that we get the following hint when trying to use a compiler crate without rustc_driver.\n+// error-pattern: try adding `extern crate rustc_driver;` at the top level of this crate\n+// compile-flags: --emit link\n+// The exactly list of required crates depends on the target. as such only test Unix targets.\n+// only-unix\n+\n+#![feature(rustc_private)]\n+\n+extern crate rustc_serialize;\n+\n+fn main() {}"}, {"sha": "ad03ba0103c520cd7b28de8896afd0d8c3d75872", "filename": "src/test/ui-fulldeps/missing-rustc-driver-error.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3b1c8a94a4e8a6ba8bc7b39cc3580db9e5b72295/src%2Ftest%2Fui-fulldeps%2Fmissing-rustc-driver-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3b1c8a94a4e8a6ba8bc7b39cc3580db9e5b72295/src%2Ftest%2Fui-fulldeps%2Fmissing-rustc-driver-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fmissing-rustc-driver-error.stderr?ref=3b1c8a94a4e8a6ba8bc7b39cc3580db9e5b72295", "patch": "@@ -0,0 +1,24 @@\n+error: crate `rustc_serialize` required to be available in rlib format, but was not found in this form\n+   |\n+   = help: try adding `extern crate rustc_driver;` at the top level of this crate\n+\n+error: crate `smallvec` required to be available in rlib format, but was not found in this form\n+\n+error: crate `thin_vec` required to be available in rlib format, but was not found in this form\n+\n+error: crate `indexmap` required to be available in rlib format, but was not found in this form\n+\n+error: crate `hashbrown` required to be available in rlib format, but was not found in this form\n+\n+error: crate `ahash` required to be available in rlib format, but was not found in this form\n+\n+error: crate `once_cell` required to be available in rlib format, but was not found in this form\n+\n+error: crate `getrandom` required to be available in rlib format, but was not found in this form\n+\n+error: crate `cfg_if` required to be available in rlib format, but was not found in this form\n+\n+error: crate `libc` required to be available in rlib format, but was not found in this form\n+\n+error: aborting due to 10 previous errors\n+"}, {"sha": "ff1be0804151b58973c1a41c5616e7a3cc5f73df", "filename": "src/test/ui-fulldeps/mod_dir_path_canonicalized.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3b1c8a94a4e8a6ba8bc7b39cc3580db9e5b72295/src%2Ftest%2Fui-fulldeps%2Fmod_dir_path_canonicalized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b1c8a94a4e8a6ba8bc7b39cc3580db9e5b72295/src%2Ftest%2Fui-fulldeps%2Fmod_dir_path_canonicalized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fmod_dir_path_canonicalized.rs?ref=3b1c8a94a4e8a6ba8bc7b39cc3580db9e5b72295", "patch": "@@ -10,6 +10,11 @@ extern crate rustc_parse;\n extern crate rustc_session;\n extern crate rustc_span;\n \n+// Necessary to pull in object code as the rest of the rustc crates are shipped only as rmeta\n+// files.\n+#[allow(unused_extern_crates)]\n+extern crate rustc_driver;\n+\n use rustc_parse::new_parser_from_file;\n use rustc_session::parse::ParseSess;\n use rustc_span::source_map::FilePathMapping;"}, {"sha": "6dbabc8eb348512d437c60bbd9aad8113017310e", "filename": "src/test/ui-fulldeps/pprust-expr-roundtrip.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3b1c8a94a4e8a6ba8bc7b39cc3580db9e5b72295/src%2Ftest%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b1c8a94a4e8a6ba8bc7b39cc3580db9e5b72295/src%2Ftest%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs?ref=3b1c8a94a4e8a6ba8bc7b39cc3580db9e5b72295", "patch": "@@ -27,6 +27,11 @@ extern crate rustc_session;\n extern crate rustc_span;\n extern crate thin_vec;\n \n+// Necessary to pull in object code as the rest of the rustc crates are shipped only as rmeta\n+// files.\n+#[allow(unused_extern_crates)]\n+extern crate rustc_driver;\n+\n use rustc_ast::mut_visit::{self, visit_clobber, MutVisitor};\n use rustc_ast::ptr::P;\n use rustc_ast::*;"}, {"sha": "63975ef62c591f422762d233682fd092b92a4e81", "filename": "src/test/ui-fulldeps/regions-mock-tcx.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3b1c8a94a4e8a6ba8bc7b39cc3580db9e5b72295/src%2Ftest%2Fui-fulldeps%2Fregions-mock-tcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b1c8a94a4e8a6ba8bc7b39cc3580db9e5b72295/src%2Ftest%2Fui-fulldeps%2Fregions-mock-tcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fregions-mock-tcx.rs?ref=3b1c8a94a4e8a6ba8bc7b39cc3580db9e5b72295", "patch": "@@ -14,6 +14,11 @@\n extern crate rustc_arena;\n extern crate libc;\n \n+// Necessary to pull in object code as the rest of the rustc crates are shipped only as rmeta\n+// files.\n+#[allow(unused_extern_crates)]\n+extern crate rustc_driver;\n+\n use TypeStructure::{TypeInt, TypeFunction};\n use AstKind::{ExprInt, ExprVar, ExprLambda};\n use rustc_arena::TypedArena;"}, {"sha": "509a6b1d22ca61769fc0cc714e64b20cd3014db5", "filename": "src/test/ui-fulldeps/rustc_encodable_hygiene.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3b1c8a94a4e8a6ba8bc7b39cc3580db9e5b72295/src%2Ftest%2Fui-fulldeps%2Frustc_encodable_hygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b1c8a94a4e8a6ba8bc7b39cc3580db9e5b72295/src%2Ftest%2Fui-fulldeps%2Frustc_encodable_hygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Frustc_encodable_hygiene.rs?ref=3b1c8a94a4e8a6ba8bc7b39cc3580db9e5b72295", "patch": "@@ -6,6 +6,11 @@ extern crate rustc_macros;\n #[allow(dead_code)]\n extern crate rustc_serialize;\n \n+// Necessary to pull in object code as the rest of the rustc crates are shipped only as rmeta\n+// files.\n+#[allow(unused_extern_crates)]\n+extern crate rustc_driver;\n+\n use rustc_macros::{Decodable, Encodable};\n \n #[derive(Decodable, Encodable, Debug)]"}, {"sha": "7024927b20561e81f78a432107f579afa683474c", "filename": "src/tools/miri/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3b1c8a94a4e8a6ba8bc7b39cc3580db9e5b72295/src%2Ftools%2Fmiri%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b1c8a94a4e8a6ba8bc7b39cc3580db9e5b72295/src%2Ftools%2Fmiri%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Flib.rs?ref=3b1c8a94a4e8a6ba8bc7b39cc3580db9e5b72295", "patch": "@@ -54,6 +54,11 @@ extern crate rustc_session;\n extern crate rustc_span;\n extern crate rustc_target;\n \n+// Necessary to pull in object code as the rest of the rustc crates are shipped only as rmeta\n+// files.\n+#[allow(unused_extern_crates)]\n+extern crate rustc_driver;\n+\n mod borrow_tracker;\n mod clock;\n mod concurrency;"}, {"sha": "0c27bcacfb83ca73c77744e4ff02b6d640f63215", "filename": "src/tools/rustfmt/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3b1c8a94a4e8a6ba8bc7b39cc3580db9e5b72295/src%2Ftools%2Frustfmt%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b1c8a94a4e8a6ba8bc7b39cc3580db9e5b72295/src%2Ftools%2Frustfmt%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Flib.rs?ref=3b1c8a94a4e8a6ba8bc7b39cc3580db9e5b72295", "patch": "@@ -24,6 +24,11 @@ extern crate rustc_parse;\n extern crate rustc_session;\n extern crate rustc_span;\n \n+// Necessary to pull in object code as the rest of the rustc crates are shipped only as rmeta\n+// files.\n+#[allow(unused_extern_crates)]\n+extern crate rustc_driver;\n+\n use std::cell::RefCell;\n use std::collections::HashMap;\n use std::fmt;"}]}