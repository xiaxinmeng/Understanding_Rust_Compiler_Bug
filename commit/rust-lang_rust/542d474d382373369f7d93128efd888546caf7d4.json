{"sha": "542d474d382373369f7d93128efd888546caf7d4", "node_id": "C_kwDOAAsO6NoAKDU0MmQ0NzRkMzgyMzczMzY5ZjdkOTMxMjhlZmQ4ODg1NDZjYWY3ZDQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-04T13:05:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-04T13:05:27Z"}, "message": "Auto merge of #8930 - kyoto7250:issue_8920, r=Alexendoo\n\nfix(manual_find_map and manual_filter_map): check clone method\n\nclose #8920\n\nAdded conditional branching when the clone method is used.\n\nThank you in advance.\n\n---\n\nchangelog: check `clone()` and other variant preserving methods in [`manual_find_map`] and [`manual_filter_map`]", "tree": {"sha": "0c7d39f08df9e483f17742a5869fcecc24619659", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c7d39f08df9e483f17742a5869fcecc24619659"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/542d474d382373369f7d93128efd888546caf7d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/542d474d382373369f7d93128efd888546caf7d4", "html_url": "https://github.com/rust-lang/rust/commit/542d474d382373369f7d93128efd888546caf7d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/542d474d382373369f7d93128efd888546caf7d4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9ddce8a223cb9916389c039777b6966ea448dc8", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9ddce8a223cb9916389c039777b6966ea448dc8", "html_url": "https://github.com/rust-lang/rust/commit/d9ddce8a223cb9916389c039777b6966ea448dc8"}, {"sha": "42cf98553a72f4b6cdac2c4c6378121d30f3bf5f", "url": "https://api.github.com/repos/rust-lang/rust/commits/42cf98553a72f4b6cdac2c4c6378121d30f3bf5f", "html_url": "https://github.com/rust-lang/rust/commit/42cf98553a72f4b6cdac2c4c6378121d30f3bf5f"}], "stats": {"total": 393, "additions": 389, "deletions": 4}, "files": [{"sha": "7127d8242d810f65cf2b9d96edefa1db8e07728d", "filename": "clippy_lints/src/methods/filter_map.rs", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/542d474d382373369f7d93128efd888546caf7d4/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/542d474d382373369f7d93128efd888546caf7d4/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map.rs?ref=542d474d382373369f7d93128efd888546caf7d4", "patch": "@@ -6,7 +6,7 @@ use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_hir::def::Res;\n-use rustc_hir::{Expr, ExprKind, PatKind, QPath, UnOp};\n+use rustc_hir::{Expr, ExprKind, PatKind, PathSegment, QPath, UnOp};\n use rustc_lint::LateContext;\n use rustc_span::source_map::Span;\n use rustc_span::symbol::{sym, Symbol};\n@@ -155,7 +155,15 @@ pub(super) fn check<'tcx>(\n                 }\n                 false\n             };\n-            if SpanlessEq::new(cx).expr_fallback(eq_fallback).eq_expr(filter_arg, map_arg);\n+\n+            if match map_arg.kind {\n+                ExprKind::MethodCall(method, [original_arg], _) => {\n+                    acceptable_methods(method)\n+                        && SpanlessEq::new(cx).expr_fallback(eq_fallback).eq_expr(filter_arg, original_arg)\n+                },\n+                _ => SpanlessEq::new(cx).expr_fallback(eq_fallback).eq_expr(filter_arg, map_arg)\n+            };\n+\n             then {\n                 let span = filter_span.with_hi(expr.span.hi());\n                 let (filter_name, lint) = if is_find {\n@@ -171,3 +179,18 @@ pub(super) fn check<'tcx>(\n             }\n     }\n }\n+\n+fn acceptable_methods(method: &PathSegment<'_>) -> bool {\n+    let methods: [Symbol; 8] = [\n+        sym::clone,\n+        sym::as_ref,\n+        sym!(copied),\n+        sym!(cloned),\n+        sym!(as_deref),\n+        sym!(as_mut),\n+        sym!(as_deref_mut),\n+        sym!(to_owned),\n+    ];\n+\n+    methods.contains(&method.ident.name)\n+}"}, {"sha": "de0d86148899d4c7be1220c597291729cec6de4a", "filename": "tests/ui/manual_filter_map.fixed", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/542d474d382373369f7d93128efd888546caf7d4/tests%2Fui%2Fmanual_filter_map.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/542d474d382373369f7d93128efd888546caf7d4/tests%2Fui%2Fmanual_filter_map.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_filter_map.fixed?ref=542d474d382373369f7d93128efd888546caf7d4", "patch": "@@ -35,3 +35,53 @@ fn to_opt<T>(_: T) -> Option<T> {\n fn to_res<T>(_: T) -> Result<T, ()> {\n     unimplemented!()\n }\n+\n+struct Issue8920<'a> {\n+    option_field: Option<String>,\n+    result_field: Result<String, ()>,\n+    ref_field: Option<&'a usize>,\n+}\n+\n+fn issue_8920() {\n+    let mut vec = vec![Issue8920 {\n+        option_field: Some(String::from(\"str\")),\n+        result_field: Ok(String::from(\"str\")),\n+        ref_field: Some(&1),\n+    }];\n+\n+    let _ = vec\n+        .iter()\n+        .filter_map(|f| f.option_field.clone());\n+\n+    let _ = vec\n+        .iter()\n+        .filter_map(|f| f.ref_field.cloned());\n+\n+    let _ = vec\n+        .iter()\n+        .filter_map(|f| f.ref_field.copied());\n+\n+    let _ = vec\n+        .iter()\n+        .filter_map(|f| f.result_field.clone().ok());\n+\n+    let _ = vec\n+        .iter()\n+        .filter_map(|f| f.result_field.as_ref().ok());\n+\n+    let _ = vec\n+        .iter()\n+        .filter_map(|f| f.result_field.as_deref().ok());\n+\n+    let _ = vec\n+        .iter_mut()\n+        .filter_map(|f| f.result_field.as_mut().ok());\n+\n+    let _ = vec\n+        .iter_mut()\n+        .filter_map(|f| f.result_field.as_deref_mut().ok());\n+\n+    let _ = vec\n+        .iter()\n+        .filter_map(|f| f.result_field.to_owned().ok());\n+}"}, {"sha": "bd6516f038b29f90e986931fea796df0c45d2ad1", "filename": "tests/ui/manual_filter_map.rs", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/542d474d382373369f7d93128efd888546caf7d4/tests%2Fui%2Fmanual_filter_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/542d474d382373369f7d93128efd888546caf7d4/tests%2Fui%2Fmanual_filter_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_filter_map.rs?ref=542d474d382373369f7d93128efd888546caf7d4", "patch": "@@ -35,3 +35,62 @@ fn to_opt<T>(_: T) -> Option<T> {\n fn to_res<T>(_: T) -> Result<T, ()> {\n     unimplemented!()\n }\n+\n+struct Issue8920<'a> {\n+    option_field: Option<String>,\n+    result_field: Result<String, ()>,\n+    ref_field: Option<&'a usize>,\n+}\n+\n+fn issue_8920() {\n+    let mut vec = vec![Issue8920 {\n+        option_field: Some(String::from(\"str\")),\n+        result_field: Ok(String::from(\"str\")),\n+        ref_field: Some(&1),\n+    }];\n+\n+    let _ = vec\n+        .iter()\n+        .filter(|f| f.option_field.is_some())\n+        .map(|f| f.option_field.clone().unwrap());\n+\n+    let _ = vec\n+        .iter()\n+        .filter(|f| f.ref_field.is_some())\n+        .map(|f| f.ref_field.cloned().unwrap());\n+\n+    let _ = vec\n+        .iter()\n+        .filter(|f| f.ref_field.is_some())\n+        .map(|f| f.ref_field.copied().unwrap());\n+\n+    let _ = vec\n+        .iter()\n+        .filter(|f| f.result_field.is_ok())\n+        .map(|f| f.result_field.clone().unwrap());\n+\n+    let _ = vec\n+        .iter()\n+        .filter(|f| f.result_field.is_ok())\n+        .map(|f| f.result_field.as_ref().unwrap());\n+\n+    let _ = vec\n+        .iter()\n+        .filter(|f| f.result_field.is_ok())\n+        .map(|f| f.result_field.as_deref().unwrap());\n+\n+    let _ = vec\n+        .iter_mut()\n+        .filter(|f| f.result_field.is_ok())\n+        .map(|f| f.result_field.as_mut().unwrap());\n+\n+    let _ = vec\n+        .iter_mut()\n+        .filter(|f| f.result_field.is_ok())\n+        .map(|f| f.result_field.as_deref_mut().unwrap());\n+\n+    let _ = vec\n+        .iter()\n+        .filter(|f| f.result_field.is_ok())\n+        .map(|f| f.result_field.to_owned().unwrap());\n+}"}, {"sha": "465f1b1911017bed9e51509b6a46cac40c3ee744", "filename": "tests/ui/manual_filter_map.stderr", "status": "modified", "additions": 73, "deletions": 1, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/542d474d382373369f7d93128efd888546caf7d4/tests%2Fui%2Fmanual_filter_map.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/542d474d382373369f7d93128efd888546caf7d4/tests%2Fui%2Fmanual_filter_map.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_filter_map.stderr?ref=542d474d382373369f7d93128efd888546caf7d4", "patch": "@@ -18,5 +18,77 @@ error: `filter(..).map(..)` can be simplified as `filter_map(..)`\n LL |     let _ = (0..).filter(|&n| to_res(n).is_ok()).map(|a| to_res(a).unwrap_or(1));\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `filter_map(|a| to_res(a).ok())`\n \n-error: aborting due to 3 previous errors\n+error: `filter(..).map(..)` can be simplified as `filter_map(..)`\n+  --> $DIR/manual_filter_map.rs:54:10\n+   |\n+LL |           .filter(|f| f.option_field.is_some())\n+   |  __________^\n+LL | |         .map(|f| f.option_field.clone().unwrap());\n+   | |_________________________________________________^ help: try: `filter_map(|f| f.option_field.clone())`\n+\n+error: `filter(..).map(..)` can be simplified as `filter_map(..)`\n+  --> $DIR/manual_filter_map.rs:59:10\n+   |\n+LL |           .filter(|f| f.ref_field.is_some())\n+   |  __________^\n+LL | |         .map(|f| f.ref_field.cloned().unwrap());\n+   | |_______________________________________________^ help: try: `filter_map(|f| f.ref_field.cloned())`\n+\n+error: `filter(..).map(..)` can be simplified as `filter_map(..)`\n+  --> $DIR/manual_filter_map.rs:64:10\n+   |\n+LL |           .filter(|f| f.ref_field.is_some())\n+   |  __________^\n+LL | |         .map(|f| f.ref_field.copied().unwrap());\n+   | |_______________________________________________^ help: try: `filter_map(|f| f.ref_field.copied())`\n+\n+error: `filter(..).map(..)` can be simplified as `filter_map(..)`\n+  --> $DIR/manual_filter_map.rs:69:10\n+   |\n+LL |           .filter(|f| f.result_field.is_ok())\n+   |  __________^\n+LL | |         .map(|f| f.result_field.clone().unwrap());\n+   | |_________________________________________________^ help: try: `filter_map(|f| f.result_field.clone().ok())`\n+\n+error: `filter(..).map(..)` can be simplified as `filter_map(..)`\n+  --> $DIR/manual_filter_map.rs:74:10\n+   |\n+LL |           .filter(|f| f.result_field.is_ok())\n+   |  __________^\n+LL | |         .map(|f| f.result_field.as_ref().unwrap());\n+   | |__________________________________________________^ help: try: `filter_map(|f| f.result_field.as_ref().ok())`\n+\n+error: `filter(..).map(..)` can be simplified as `filter_map(..)`\n+  --> $DIR/manual_filter_map.rs:79:10\n+   |\n+LL |           .filter(|f| f.result_field.is_ok())\n+   |  __________^\n+LL | |         .map(|f| f.result_field.as_deref().unwrap());\n+   | |____________________________________________________^ help: try: `filter_map(|f| f.result_field.as_deref().ok())`\n+\n+error: `filter(..).map(..)` can be simplified as `filter_map(..)`\n+  --> $DIR/manual_filter_map.rs:84:10\n+   |\n+LL |           .filter(|f| f.result_field.is_ok())\n+   |  __________^\n+LL | |         .map(|f| f.result_field.as_mut().unwrap());\n+   | |__________________________________________________^ help: try: `filter_map(|f| f.result_field.as_mut().ok())`\n+\n+error: `filter(..).map(..)` can be simplified as `filter_map(..)`\n+  --> $DIR/manual_filter_map.rs:89:10\n+   |\n+LL |           .filter(|f| f.result_field.is_ok())\n+   |  __________^\n+LL | |         .map(|f| f.result_field.as_deref_mut().unwrap());\n+   | |________________________________________________________^ help: try: `filter_map(|f| f.result_field.as_deref_mut().ok())`\n+\n+error: `filter(..).map(..)` can be simplified as `filter_map(..)`\n+  --> $DIR/manual_filter_map.rs:94:10\n+   |\n+LL |           .filter(|f| f.result_field.is_ok())\n+   |  __________^\n+LL | |         .map(|f| f.result_field.to_owned().unwrap());\n+   | |____________________________________________________^ help: try: `filter_map(|f| f.result_field.to_owned().ok())`\n+\n+error: aborting due to 12 previous errors\n "}, {"sha": "d69b6c1dcf3bb7b5ba84cac8d1e9fab1d0fef668", "filename": "tests/ui/manual_find_map.fixed", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/542d474d382373369f7d93128efd888546caf7d4/tests%2Fui%2Fmanual_find_map.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/542d474d382373369f7d93128efd888546caf7d4/tests%2Fui%2Fmanual_find_map.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_find_map.fixed?ref=542d474d382373369f7d93128efd888546caf7d4", "patch": "@@ -35,3 +35,53 @@ fn to_opt<T>(_: T) -> Option<T> {\n fn to_res<T>(_: T) -> Result<T, ()> {\n     unimplemented!()\n }\n+\n+struct Issue8920<'a> {\n+    option_field: Option<String>,\n+    result_field: Result<String, ()>,\n+    ref_field: Option<&'a usize>,\n+}\n+\n+fn issue_8920() {\n+    let mut vec = vec![Issue8920 {\n+        option_field: Some(String::from(\"str\")),\n+        result_field: Ok(String::from(\"str\")),\n+        ref_field: Some(&1),\n+    }];\n+\n+    let _ = vec\n+        .iter()\n+        .find_map(|f| f.option_field.clone());\n+\n+    let _ = vec\n+        .iter()\n+        .find_map(|f| f.ref_field.cloned());\n+\n+    let _ = vec\n+        .iter()\n+        .find_map(|f| f.ref_field.copied());\n+\n+    let _ = vec\n+        .iter()\n+        .find_map(|f| f.result_field.clone().ok());\n+\n+    let _ = vec\n+        .iter()\n+        .find_map(|f| f.result_field.as_ref().ok());\n+\n+    let _ = vec\n+        .iter()\n+        .find_map(|f| f.result_field.as_deref().ok());\n+\n+    let _ = vec\n+        .iter_mut()\n+        .find_map(|f| f.result_field.as_mut().ok());\n+\n+    let _ = vec\n+        .iter_mut()\n+        .find_map(|f| f.result_field.as_deref_mut().ok());\n+\n+    let _ = vec\n+        .iter()\n+        .find_map(|f| f.result_field.to_owned().ok());\n+}"}, {"sha": "1c4e18e31c8b1883fef79057675513ec717ff79a", "filename": "tests/ui/manual_find_map.rs", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/542d474d382373369f7d93128efd888546caf7d4/tests%2Fui%2Fmanual_find_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/542d474d382373369f7d93128efd888546caf7d4/tests%2Fui%2Fmanual_find_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_find_map.rs?ref=542d474d382373369f7d93128efd888546caf7d4", "patch": "@@ -35,3 +35,62 @@ fn to_opt<T>(_: T) -> Option<T> {\n fn to_res<T>(_: T) -> Result<T, ()> {\n     unimplemented!()\n }\n+\n+struct Issue8920<'a> {\n+    option_field: Option<String>,\n+    result_field: Result<String, ()>,\n+    ref_field: Option<&'a usize>,\n+}\n+\n+fn issue_8920() {\n+    let mut vec = vec![Issue8920 {\n+        option_field: Some(String::from(\"str\")),\n+        result_field: Ok(String::from(\"str\")),\n+        ref_field: Some(&1),\n+    }];\n+\n+    let _ = vec\n+        .iter()\n+        .find(|f| f.option_field.is_some())\n+        .map(|f| f.option_field.clone().unwrap());\n+\n+    let _ = vec\n+        .iter()\n+        .find(|f| f.ref_field.is_some())\n+        .map(|f| f.ref_field.cloned().unwrap());\n+\n+    let _ = vec\n+        .iter()\n+        .find(|f| f.ref_field.is_some())\n+        .map(|f| f.ref_field.copied().unwrap());\n+\n+    let _ = vec\n+        .iter()\n+        .find(|f| f.result_field.is_ok())\n+        .map(|f| f.result_field.clone().unwrap());\n+\n+    let _ = vec\n+        .iter()\n+        .find(|f| f.result_field.is_ok())\n+        .map(|f| f.result_field.as_ref().unwrap());\n+\n+    let _ = vec\n+        .iter()\n+        .find(|f| f.result_field.is_ok())\n+        .map(|f| f.result_field.as_deref().unwrap());\n+\n+    let _ = vec\n+        .iter_mut()\n+        .find(|f| f.result_field.is_ok())\n+        .map(|f| f.result_field.as_mut().unwrap());\n+\n+    let _ = vec\n+        .iter_mut()\n+        .find(|f| f.result_field.is_ok())\n+        .map(|f| f.result_field.as_deref_mut().unwrap());\n+\n+    let _ = vec\n+        .iter()\n+        .find(|f| f.result_field.is_ok())\n+        .map(|f| f.result_field.to_owned().unwrap());\n+}"}, {"sha": "9dea42b76868b7d838338d55767aeef8da541a5d", "filename": "tests/ui/manual_find_map.stderr", "status": "modified", "additions": 73, "deletions": 1, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/542d474d382373369f7d93128efd888546caf7d4/tests%2Fui%2Fmanual_find_map.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/542d474d382373369f7d93128efd888546caf7d4/tests%2Fui%2Fmanual_find_map.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_find_map.stderr?ref=542d474d382373369f7d93128efd888546caf7d4", "patch": "@@ -18,5 +18,77 @@ error: `find(..).map(..)` can be simplified as `find_map(..)`\n LL |     let _ = (0..).find(|&n| to_res(n).is_ok()).map(|a| to_res(a).unwrap_or(1));\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `find_map(|a| to_res(a).ok())`\n \n-error: aborting due to 3 previous errors\n+error: `find(..).map(..)` can be simplified as `find_map(..)`\n+  --> $DIR/manual_find_map.rs:54:10\n+   |\n+LL |           .find(|f| f.option_field.is_some())\n+   |  __________^\n+LL | |         .map(|f| f.option_field.clone().unwrap());\n+   | |_________________________________________________^ help: try: `find_map(|f| f.option_field.clone())`\n+\n+error: `find(..).map(..)` can be simplified as `find_map(..)`\n+  --> $DIR/manual_find_map.rs:59:10\n+   |\n+LL |           .find(|f| f.ref_field.is_some())\n+   |  __________^\n+LL | |         .map(|f| f.ref_field.cloned().unwrap());\n+   | |_______________________________________________^ help: try: `find_map(|f| f.ref_field.cloned())`\n+\n+error: `find(..).map(..)` can be simplified as `find_map(..)`\n+  --> $DIR/manual_find_map.rs:64:10\n+   |\n+LL |           .find(|f| f.ref_field.is_some())\n+   |  __________^\n+LL | |         .map(|f| f.ref_field.copied().unwrap());\n+   | |_______________________________________________^ help: try: `find_map(|f| f.ref_field.copied())`\n+\n+error: `find(..).map(..)` can be simplified as `find_map(..)`\n+  --> $DIR/manual_find_map.rs:69:10\n+   |\n+LL |           .find(|f| f.result_field.is_ok())\n+   |  __________^\n+LL | |         .map(|f| f.result_field.clone().unwrap());\n+   | |_________________________________________________^ help: try: `find_map(|f| f.result_field.clone().ok())`\n+\n+error: `find(..).map(..)` can be simplified as `find_map(..)`\n+  --> $DIR/manual_find_map.rs:74:10\n+   |\n+LL |           .find(|f| f.result_field.is_ok())\n+   |  __________^\n+LL | |         .map(|f| f.result_field.as_ref().unwrap());\n+   | |__________________________________________________^ help: try: `find_map(|f| f.result_field.as_ref().ok())`\n+\n+error: `find(..).map(..)` can be simplified as `find_map(..)`\n+  --> $DIR/manual_find_map.rs:79:10\n+   |\n+LL |           .find(|f| f.result_field.is_ok())\n+   |  __________^\n+LL | |         .map(|f| f.result_field.as_deref().unwrap());\n+   | |____________________________________________________^ help: try: `find_map(|f| f.result_field.as_deref().ok())`\n+\n+error: `find(..).map(..)` can be simplified as `find_map(..)`\n+  --> $DIR/manual_find_map.rs:84:10\n+   |\n+LL |           .find(|f| f.result_field.is_ok())\n+   |  __________^\n+LL | |         .map(|f| f.result_field.as_mut().unwrap());\n+   | |__________________________________________________^ help: try: `find_map(|f| f.result_field.as_mut().ok())`\n+\n+error: `find(..).map(..)` can be simplified as `find_map(..)`\n+  --> $DIR/manual_find_map.rs:89:10\n+   |\n+LL |           .find(|f| f.result_field.is_ok())\n+   |  __________^\n+LL | |         .map(|f| f.result_field.as_deref_mut().unwrap());\n+   | |________________________________________________________^ help: try: `find_map(|f| f.result_field.as_deref_mut().ok())`\n+\n+error: `find(..).map(..)` can be simplified as `find_map(..)`\n+  --> $DIR/manual_find_map.rs:94:10\n+   |\n+LL |           .find(|f| f.result_field.is_ok())\n+   |  __________^\n+LL | |         .map(|f| f.result_field.to_owned().unwrap());\n+   | |____________________________________________________^ help: try: `find_map(|f| f.result_field.to_owned().ok())`\n+\n+error: aborting due to 12 previous errors\n "}]}