{"sha": "bd3197c748e7bfa652fb636fbb78fa7a42d826ca", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkMzE5N2M3NDhlN2JmYTY1MmZiNjM2ZmJiNzhmYTdhNDJkODI2Y2E=", "commit": {"author": {"name": "Alex Burka", "email": "aburka@seas.upenn.edu", "date": "2016-01-13T06:27:07Z"}, "committer": {"name": "Alex Burka", "email": "aburka@seas.upenn.edu", "date": "2016-02-27T07:01:41Z"}, "message": "remove range lang items\n\nThe range desugaring does not use the lang items. Hence I did not add\nlang items for inclusive ranges. This cleanup commit removes the old\nunused ones as well.\n\nWhether the desugaring _should_ use lang items is another question:\nsee #30809. But if we decide on a strategy there we can add back these\nlang items, and new ones for inclusive ranges.\n\nFor stage0 we need to keep the attributes as the lang items still exist\neven if they are never used.\n\nThis is surprisingly not a breaking change. Unused #[lang] attributes do\nnot even trigger a lint (see #30881).", "tree": {"sha": "3aa37cd62129b8d7b936479141a8c87ca645b2ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3aa37cd62129b8d7b936479141a8c87ca645b2ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd3197c748e7bfa652fb636fbb78fa7a42d826ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd3197c748e7bfa652fb636fbb78fa7a42d826ca", "html_url": "https://github.com/rust-lang/rust/commit/bd3197c748e7bfa652fb636fbb78fa7a42d826ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd3197c748e7bfa652fb636fbb78fa7a42d826ca/comments", "author": {"login": "durka", "id": 47007, "node_id": "MDQ6VXNlcjQ3MDA3", "avatar_url": "https://avatars.githubusercontent.com/u/47007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/durka", "html_url": "https://github.com/durka", "followers_url": "https://api.github.com/users/durka/followers", "following_url": "https://api.github.com/users/durka/following{/other_user}", "gists_url": "https://api.github.com/users/durka/gists{/gist_id}", "starred_url": "https://api.github.com/users/durka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/durka/subscriptions", "organizations_url": "https://api.github.com/users/durka/orgs", "repos_url": "https://api.github.com/users/durka/repos", "events_url": "https://api.github.com/users/durka/events{/privacy}", "received_events_url": "https://api.github.com/users/durka/received_events", "type": "User", "site_admin": false}, "committer": {"login": "durka", "id": 47007, "node_id": "MDQ6VXNlcjQ3MDA3", "avatar_url": "https://avatars.githubusercontent.com/u/47007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/durka", "html_url": "https://github.com/durka", "followers_url": "https://api.github.com/users/durka/followers", "following_url": "https://api.github.com/users/durka/following{/other_user}", "gists_url": "https://api.github.com/users/durka/gists{/gist_id}", "starred_url": "https://api.github.com/users/durka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/durka/subscriptions", "organizations_url": "https://api.github.com/users/durka/orgs", "repos_url": "https://api.github.com/users/durka/repos", "events_url": "https://api.github.com/users/durka/events{/privacy}", "received_events_url": "https://api.github.com/users/durka/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d792183fdeea5623c7ec909d5aa2eccf9171582c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d792183fdeea5623c7ec909d5aa2eccf9171582c", "html_url": "https://github.com/rust-lang/rust/commit/d792183fdeea5623c7ec909d5aa2eccf9171582c"}], "stats": {"total": 16, "additions": 6, "deletions": 10}, "files": [{"sha": "b5bec3169474f39c11ebca6cd5d3fd9b6ac33bc6", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bd3197c748e7bfa652fb636fbb78fa7a42d826ca/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd3197c748e7bfa652fb636fbb78fa7a42d826ca/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=bd3197c748e7bfa652fb636fbb78fa7a42d826ca", "patch": "@@ -1468,7 +1468,7 @@ pub trait IndexMut<Idx: ?Sized>: Index<Idx> {\n \n /// An unbounded range.\n #[derive(Copy, Clone, PartialEq, Eq)]\n-#[lang = \"range_full\"]\n+#[cfg_attr(stage0, lang = \"range_full\")] // TODO remove attribute after next snapshot\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct RangeFull;\n \n@@ -1481,7 +1481,7 @@ impl fmt::Debug for RangeFull {\n \n /// A (half-open) range which is bounded at both ends.\n #[derive(Clone, PartialEq, Eq)]\n-#[lang = \"range\"]\n+#[cfg_attr(stage0, lang = \"range\")] // TODO remove attribute after next snapshot\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Range<Idx> {\n     /// The lower bound of the range (inclusive).\n@@ -1501,7 +1501,7 @@ impl<Idx: fmt::Debug> fmt::Debug for Range<Idx> {\n \n /// A range which is only bounded below.\n #[derive(Clone, PartialEq, Eq)]\n-#[lang = \"range_from\"]\n+#[cfg_attr(stage0, lang = \"range_from\")] // TODO remove attribute after next snapshot\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct RangeFrom<Idx> {\n     /// The lower bound of the range (inclusive).\n@@ -1518,7 +1518,7 @@ impl<Idx: fmt::Debug> fmt::Debug for RangeFrom<Idx> {\n \n /// A range which is only bounded above.\n #[derive(Copy, Clone, PartialEq, Eq)]\n-#[lang = \"range_to\"]\n+#[cfg_attr(stage0, lang = \"range_to\")] // TODO remove attribute after next snapshot\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct RangeTo<Idx> {\n     /// The upper bound of the range (exclusive)."}, {"sha": "8d407d0aa44739e22d3b091d55f8955fa8e4e377", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bd3197c748e7bfa652fb636fbb78fa7a42d826ca/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd3197c748e7bfa652fb636fbb78fa7a42d826ca/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=bd3197c748e7bfa652fb636fbb78fa7a42d826ca", "patch": "@@ -302,10 +302,6 @@ lets_do_this! {\n     ShrAssignTraitLangItem,          \"shr_assign\",              shr_assign_trait;\n     IndexTraitLangItem,              \"index\",                   index_trait;\n     IndexMutTraitLangItem,           \"index_mut\",               index_mut_trait;\n-    RangeStructLangItem,             \"range\",                   range_struct;\n-    RangeFromStructLangItem,         \"range_from\",              range_from_struct;\n-    RangeToStructLangItem,           \"range_to\",                range_to_struct;\n-    RangeFullStructLangItem,         \"range_full\",              range_full_struct;\n \n     UnsafeCellTypeLangItem,          \"unsafe_cell\",             unsafe_cell_type;\n "}, {"sha": "01f7d6b456582cd4ff4cdc8016c57ebebf91c1bc", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bd3197c748e7bfa652fb636fbb78fa7a42d826ca/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd3197c748e7bfa652fb636fbb78fa7a42d826ca/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=bd3197c748e7bfa652fb636fbb78fa7a42d826ca", "patch": "@@ -3643,8 +3643,8 @@ register_diagnostics! {\n //  E0233,\n //  E0234,\n //  E0235, // structure constructor specifies a structure of type but\n-    E0236, // no lang item for range syntax\n-    E0237, // no lang item for range syntax\n+//  E0236, // no lang item for range syntax\n+//  E0237, // no lang item for range syntax\n     E0238, // parenthesized parameters may only be used with a trait\n //  E0239, // `next` method of `Iterator` trait has unexpected type\n //  E0240,"}]}