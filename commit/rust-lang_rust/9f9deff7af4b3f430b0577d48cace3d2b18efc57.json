{"sha": "9f9deff7af4b3f430b0577d48cace3d2b18efc57", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmOWRlZmY3YWY0YjNmNDMwYjA1NzdkNDhjYWNlM2QyYjE4ZWZjNTc=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2011-10-12T00:50:54Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-12T23:33:07Z"}, "message": "make a good error msg if you try to use an unsafe fn for a test", "tree": {"sha": "3214ad284f13e5e2656f94e07c9a372e40a1136c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3214ad284f13e5e2656f94e07c9a372e40a1136c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f9deff7af4b3f430b0577d48cace3d2b18efc57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f9deff7af4b3f430b0577d48cace3d2b18efc57", "html_url": "https://github.com/rust-lang/rust/commit/9f9deff7af4b3f430b0577d48cace3d2b18efc57", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f9deff7af4b3f430b0577d48cace3d2b18efc57/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b1a9d71218bf1f94960496ccb38e92658e89b246", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1a9d71218bf1f94960496ccb38e92658e89b246", "html_url": "https://github.com/rust-lang/rust/commit/b1a9d71218bf1f94960496ccb38e92658e89b246"}], "stats": {"total": 29, "additions": 21, "deletions": 8}, "files": [{"sha": "46f8da829a631d976f07ae8981c243dc9a188e51", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f9deff7af4b3f430b0577d48cace3d2b18efc57/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f9deff7af4b3f430b0577d48cace3d2b18efc57/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=9f9deff7af4b3f430b0577d48cace3d2b18efc57", "patch": "@@ -110,7 +110,7 @@ fn compile_input(sess: session::session, cfg: ast::crate_cfg, input: str,\n     if sess.get_opts().test {\n         crate =\n             time(time_passes, \"building test harness\",\n-                 bind front::test::modify_for_testing(crate));\n+                 bind front::test::modify_for_testing(sess, crate));\n     }\n     crate =\n         time(time_passes, \"expansion\","}, {"sha": "ce1c0f02088c73405f65f8eaa10b1af165061ef4", "filename": "src/comp/front/test.rs", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/9f9deff7af4b3f430b0577d48cace3d2b18efc57/src%2Fcomp%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f9deff7af4b3f430b0577d48cace3d2b18efc57/src%2Fcomp%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Ftest.rs?ref=9f9deff7af4b3f430b0577d48cace3d2b18efc57", "patch": "@@ -7,6 +7,7 @@ import syntax::ast_util::*;\n import syntax::fold;\n import syntax::print::pprust;\n import syntax::codemap::span;\n+import driver::session;\n import front::attr;\n \n export modify_for_testing;\n@@ -16,13 +17,15 @@ type node_id_gen = fn() -> ast::node_id;\n type test = {span: span, path: [ast::ident], ignore: bool};\n \n type test_ctxt =\n-    @{next_node_id: node_id_gen,\n+    @{sess: session::session,\n+      next_node_id: node_id_gen,\n       mutable path: [ast::ident],\n       mutable testfns: [test]};\n \n // Traverse the crate, collecting all the test functions, eliding any\n // existing main functions, and synthesizing a main test harness\n-fn modify_for_testing(crate: @ast::crate) -> @ast::crate {\n+fn modify_for_testing(sess: session::session,\n+                      crate: @ast::crate) -> @ast::crate {\n \n     // FIXME: This hackasaurus assumes that 200000 is a safe number to start\n     // generating node_ids at (which is totally not the case). pauls is going\n@@ -37,7 +40,8 @@ fn modify_for_testing(crate: @ast::crate) -> @ast::crate {\n               }(next_node_id);\n \n     let cx: test_ctxt =\n-        @{next_node_id: next_node_id_fn,\n+        @{sess: sess,\n+          next_node_id: next_node_id_fn,\n           mutable path: [],\n           mutable testfns: []};\n \n@@ -90,10 +94,19 @@ fn fold_item(cx: test_ctxt, &&i: @ast::item, fld: fold::ast_fold) ->\n     log #fmt[\"current path: %s\", ast_util::path_name_i(cx.path)];\n \n     if is_test_fn(i) {\n-        log \"this is a test function\";\n-        let test = {span: i.span, path: cx.path, ignore: is_ignored(i)};\n-        cx.testfns += [test];\n-        log #fmt[\"have %u test functions\", vec::len(cx.testfns)];\n+        alt i.node {\n+          ast::item_fn(f, _) when f.decl.purity == ast::unsafe_fn {\n+            cx.sess.span_fatal(\n+                i.span,\n+                \"unsafe functions cannot be used for tests\");\n+          }\n+          _ {\n+            log \"this is a test function\";\n+            let test = {span: i.span, path: cx.path, ignore: is_ignored(i)};\n+            cx.testfns += [test];\n+            log #fmt[\"have %u test functions\", vec::len(cx.testfns)];\n+          }\n+        }\n     }\n \n     let res = fold::noop_fold_item(i, fld);"}]}