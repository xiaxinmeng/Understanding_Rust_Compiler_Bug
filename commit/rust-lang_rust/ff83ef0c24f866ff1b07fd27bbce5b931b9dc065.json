{"sha": "ff83ef0c24f866ff1b07fd27bbce5b931b9dc065", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmODNlZjBjMjRmODY2ZmYxYjA3ZmQyN2JiY2U1YjkzMWI5ZGMwNjU=", "commit": {"author": {"name": "csmoe", "email": "35686186+csmoe@users.noreply.github.com", "date": "2018-05-11T10:32:51Z"}, "committer": {"name": "csmoe", "email": "35686186+csmoe@users.noreply.github.com", "date": "2018-07-05T10:49:02Z"}, "message": "merge wellformed(wc)s", "tree": {"sha": "d76770e5edd70b32f6cff47c790e541cde1680f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d76770e5edd70b32f6cff47c790e541cde1680f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff83ef0c24f866ff1b07fd27bbce5b931b9dc065", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff83ef0c24f866ff1b07fd27bbce5b931b9dc065", "html_url": "https://github.com/rust-lang/rust/commit/ff83ef0c24f866ff1b07fd27bbce5b931b9dc065", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff83ef0c24f866ff1b07fd27bbce5b931b9dc065/comments", "author": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dabd3f6935771ef26131b06c29f7937f9c561b38", "url": "https://api.github.com/repos/rust-lang/rust/commits/dabd3f6935771ef26131b06c29f7937f9c561b38", "html_url": "https://github.com/rust-lang/rust/commit/dabd3f6935771ef26131b06c29f7937f9c561b38"}], "stats": {"total": 62, "additions": 24, "deletions": 38}, "files": [{"sha": "cc12a2e1dcdf215b677d10822c2c2ab6ddff1669", "filename": "src/librustc_traits/lowering.rs", "status": "modified", "additions": 17, "deletions": 25, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/ff83ef0c24f866ff1b07fd27bbce5b931b9dc065/src%2Flibrustc_traits%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff83ef0c24f866ff1b07fd27bbce5b931b9dc065/src%2Flibrustc_traits%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flowering.rs?ref=ff83ef0c24f866ff1b07fd27bbce5b931b9dc065", "patch": "@@ -13,10 +13,9 @@ use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc::hir::map::definitions::DefPathData;\n use rustc::hir::{self, ImplPolarity};\n use rustc::traits::{\n-    Clause, Clauses, DomainGoal, FromEnv, Goal, PolyDomainGoal, ProgramClause, WellFormed,\n-    WhereClause,\n+    Clause, Clauses, DomainGoal, Goal, PolyDomainGoal, ProgramClause, WhereClauseAtom,\n };\n-use rustc::ty::query::Providers;\n+use rustc::ty::subst::Substs;\n use rustc::ty::{self, Slice, TyCtxt};\n use rustc_data_structures::fx::FxHashSet;\n use std::mem;\n@@ -278,21 +277,15 @@ fn program_clauses_for_trait<'a, 'tcx>(\n             hypotheses,\n         }))\n         .map(|wc| implied_bound_from_trait(tcx, trait_pred, wc));\n-    let wellformed_clauses = where_clauses[1..]\n-        .into_iter()\n-        .map(|wc| wellformed_from_bound(tcx, trait_pred, wc));\n-    tcx.mk_clauses(\n-        clauses\n-            .chain(implied_bound_clauses)\n-            .chain(wellformed_clauses),\n-    )\n+    let wellformed_clauses = wellformed_from_bound(tcx, trait_pred, &where_clauses[1..]);\n+    tcx.mk_clauses(clauses.chain(implied_bound_clauses).chain(wellformed_clauses))\n }\n \n fn wellformed_from_bound<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     trait_pred: ty::TraitPredicate<'tcx>,\n-    where_clause: &ty::Predicate<'tcx>,\n-) -> Clause<'tcx> {\n+    where_clauses: &[ty::Predicate<'tcx>],\n+) -> iter::Once<Clause<'tcx>> {\n     // Rule WellFormed-TraitRef\n     //\n     // For each where clause WC:\n@@ -309,18 +302,17 @@ fn wellformed_from_bound<'a, 'tcx>(\n         .lower()\n         .map_bound(|wc| wc.into_wellformed_goal());\n     // Implemented(Self: Trait<P1..Pn>) && WellFormed(WC)\n-    let mut where_clauses = vec![impl_trait];\n-    where_clauses.push(wellformed_wc);\n-    Clause::ForAll(where_clause.lower().map_bound(|_| {\n-        ProgramClause {\n-            goal: wellformed_trait,\n-            hypotheses: tcx.mk_goals(\n-                where_clauses\n-                    .into_iter()\n-                    .map(|wc| Goal::from_poly_domain_goal(wc, tcx)),\n-            ),\n-        }\n-    }))\n+    let mut wcs = vec![impl_trait];\n+    wcs.extend(wellformed_wcs);\n+\n+    let clause = ProgramClause {\n+        goal: wellformed_trait,\n+        hypotheses: tcx.mk_goals(\n+            wcs.into_iter()\n+                .map(|wc| Goal::from_poly_domain_goal(wc, tcx)),\n+        ),\n+    };\n+    iter::once(Clause::ForAll(ty::Binder::dummy(clause)))\n }\n \n fn program_clauses_for_impl<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> Clauses<'tcx> {"}, {"sha": "e688d9e8b49e7b362df0976d67407412475165bc", "filename": "src/test/ui/chalkify/lower_env1.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ff83ef0c24f866ff1b07fd27bbce5b931b9dc065/src%2Ftest%2Fui%2Fchalkify%2Flower_env1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff83ef0c24f866ff1b07fd27bbce5b931b9dc065/src%2Ftest%2Fui%2Fchalkify%2Flower_env1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Flower_env1.stderr?ref=ff83ef0c24f866ff1b07fd27bbce5b931b9dc065", "patch": "@@ -7,8 +7,7 @@ LL | #[rustc_dump_program_clauses] //~ ERROR program clause dump\n    = note: FromEnv(Self: Foo) :- FromEnv(Self: Bar).\n    = note: FromEnv(Self: Foo) :- FromEnv(Self: Bar).\n    = note: Implemented(Self: Bar) :- FromEnv(Self: Bar).\n-   = note: WellFormed(Self: Bar) :- Implemented(Self: Bar), WellFormed(Self: Bar).\n-   = note: WellFormed(Self: Bar) :- Implemented(Self: Bar), WellFormed(Self: Foo).\n+   = note: WellFormed(Self: Bar) :- Implemented(Self: Bar), WellFormed(Self: Bar), WellFormed(Self: Foo).\n \n error: program clause dump\n   --> $DIR/lower_env1.rs:19:1\n@@ -21,8 +20,9 @@ LL | #[rustc_dump_env_program_clauses] //~ ERROR program clause dump\n    = note: Implemented(Self: Bar) :- FromEnv(Self: Bar).\n    = note: Implemented(Self: Foo) :- FromEnv(Self: Foo).\n    = note: Implemented(Self: std::marker::Sized) :- FromEnv(Self: std::marker::Sized).\n-   = note: WellFormed(Self: Bar) :- Implemented(Self: Bar), WellFormed(Self: Bar).\n-   = note: WellFormed(Self: Bar) :- Implemented(Self: Bar), WellFormed(Self: Foo).\n+   = note: WellFormed(Self: Bar) :- Implemented(Self: Bar), WellFormed(Self: Bar), WellFormed(Self: Foo).\n+   = note: WellFormed(Self: Foo) :- Implemented(Self: Foo).\n+   = note: WellFormed(Self: std::marker::Sized) :- Implemented(Self: std::marker::Sized).\n \n error: aborting due to 2 previous errors\n "}, {"sha": "c4e768415d60b5501ff5156f6c8a26b8bbab1b0d", "filename": "src/test/ui/chalkify/lower_trait.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff83ef0c24f866ff1b07fd27bbce5b931b9dc065/src%2Ftest%2Fui%2Fchalkify%2Flower_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff83ef0c24f866ff1b07fd27bbce5b931b9dc065/src%2Ftest%2Fui%2Fchalkify%2Flower_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Flower_trait.stderr?ref=ff83ef0c24f866ff1b07fd27bbce5b931b9dc065", "patch": "@@ -8,9 +8,7 @@ LL | #[rustc_dump_program_clauses] //~ ERROR program clause dump\n    = note: FromEnv(T: std::marker::Sized) :- FromEnv(Self: Foo<S, T, U>).\n    = note: FromEnv(U: std::marker::Sized) :- FromEnv(Self: Foo<S, T, U>).\n    = note: Implemented(Self: Foo<S, T, U>) :- FromEnv(Self: Foo<S, T, U>).\n-   = note: WellFormed(Self: Foo<S, T, U>) :- Implemented(Self: Foo<S, T, U>), WellFormed(S: std::marker::Sized).\n-   = note: WellFormed(Self: Foo<S, T, U>) :- Implemented(Self: Foo<S, T, U>), WellFormed(T: std::marker::Sized).\n-   = note: WellFormed(Self: Foo<S, T, U>) :- Implemented(Self: Foo<S, T, U>), WellFormed(U: std::marker::Sized).\n+   = note: WellFormed(Self: Foo<S, T, U>) :- Implemented(Self: Foo<S, T, U>), WellFormed(S: std::marker::Sized), WellFormed(T: std::marker::Sized), WellFormed(U: std::marker::Sized).\n \n error: aborting due to previous error\n "}, {"sha": "ab86b6fdb2586e7b1b6e632937a3ae26a0d411d6", "filename": "src/test/ui/chalkify/lower_trait_higher_rank.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ff83ef0c24f866ff1b07fd27bbce5b931b9dc065/src%2Ftest%2Fui%2Fchalkify%2Flower_trait_higher_rank.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff83ef0c24f866ff1b07fd27bbce5b931b9dc065/src%2Ftest%2Fui%2Fchalkify%2Flower_trait_higher_rank.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Flower_trait_higher_rank.stderr?ref=ff83ef0c24f866ff1b07fd27bbce5b931b9dc065", "patch": "@@ -11,6 +11,7 @@ LL | #[rustc_dump_program_clauses] //~ ERROR program clause dump\n    = note: WellFormed(Self: Foo<F>) :- Implemented(Self: Foo<F>), WellFormed(F: std::marker::Sized).\n    = note: WellFormed(Self: Foo<F>) :- Implemented(Self: Foo<F>), forall<> { WellFormed(<F as std::ops::FnOnce<(&'a (u8, u16),)>>::Output == &'a u8) }.\n    = note: WellFormed(Self: Foo<F>) :- Implemented(Self: Foo<F>), forall<> { WellFormed(F: std::ops::Fn<(&'a (u8, u16),)>) }.\n+   = note: WellFormed(Self: Foo<F>) :- Implemented(Self: Foo<F>), WellFormed(F: std::marker::Sized), forall<> { WellFormed(F: std::ops::Fn<(&'a (u8, u16),)>) }, forall<> { WellFormed(<F as std::ops::FnOnce<(&'a (u8, u16),)>>::Output == &'a u8) }.\n \n error: aborting due to previous error\n "}, {"sha": "5ea397d424b63986b885c9c10fb5f5bf7a768611", "filename": "src/test/ui/chalkify/lower_trait_where_clause.stderr", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ff83ef0c24f866ff1b07fd27bbce5b931b9dc065/src%2Ftest%2Fui%2Fchalkify%2Flower_trait_where_clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff83ef0c24f866ff1b07fd27bbce5b931b9dc065/src%2Ftest%2Fui%2Fchalkify%2Flower_trait_where_clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Flower_trait_where_clause.stderr?ref=ff83ef0c24f866ff1b07fd27bbce5b931b9dc065", "patch": "@@ -11,12 +11,7 @@ LL | #[rustc_dump_program_clauses] //~ ERROR program clause dump\n    = note: Implemented(Self: Foo<'a, 'b, S, T, U>) :- FromEnv(Self: Foo<'a, 'b, S, T, U>).\n    = note: RegionOutlives('a : 'b) :- FromEnv(Self: Foo<'a, 'b, S, T, U>).\n    = note: TypeOutlives(U : 'b) :- FromEnv(Self: Foo<'a, 'b, S, T, U>).\n-   = note: WellFormed(Self: Foo<'a, 'b, S, T, U>) :- Implemented(Self: Foo<'a, 'b, S, T, U>), RegionOutlives('a : 'b).\n-   = note: WellFormed(Self: Foo<'a, 'b, S, T, U>) :- Implemented(Self: Foo<'a, 'b, S, T, U>), TypeOutlives(U : 'b).\n-   = note: WellFormed(Self: Foo<'a, 'b, S, T, U>) :- Implemented(Self: Foo<'a, 'b, S, T, U>), WellFormed(S: std::fmt::Debug).\n-   = note: WellFormed(Self: Foo<'a, 'b, S, T, U>) :- Implemented(Self: Foo<'a, 'b, S, T, U>), WellFormed(S: std::marker::Sized).\n-   = note: WellFormed(Self: Foo<'a, 'b, S, T, U>) :- Implemented(Self: Foo<'a, 'b, S, T, U>), WellFormed(T: std::borrow::Borrow<U>).\n-   = note: WellFormed(Self: Foo<'a, 'b, S, T, U>) :- Implemented(Self: Foo<'a, 'b, S, T, U>), WellFormed(T: std::marker::Sized).\n+   = note: WellFormed(Self: Foo<'a, 'b, S, T, U>) :- Implemented(Self: Foo<'a, 'b, S, T, U>), WellFormed(S: std::marker::Sized), WellFormed(T: std::marker::Sized), WellFormed(S: std::fmt::Debug), WellFormed(T: std::borrow::Borrow<U>), RegionOutlives('a : 'b), TypeOutlives(U : 'b).\n \n error: aborting due to previous error\n "}]}