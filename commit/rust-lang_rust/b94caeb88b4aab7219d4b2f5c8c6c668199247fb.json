{"sha": "b94caeb88b4aab7219d4b2f5c8c6c668199247fb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5NGNhZWI4OGI0YWFiNzIxOWQ0YjJmNWM4YzZjNjY4MTk5MjQ3ZmI=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2020-06-17T16:43:41Z"}, "committer": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2020-06-24T14:53:16Z"}, "message": "ItemTree: Make clonable and add AST access", "tree": {"sha": "89d31a4b49562830470d3acff170787512d536d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89d31a4b49562830470d3acff170787512d536d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b94caeb88b4aab7219d4b2f5c8c6c668199247fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b94caeb88b4aab7219d4b2f5c8c6c668199247fb", "html_url": "https://github.com/rust-lang/rust/commit/b94caeb88b4aab7219d4b2f5c8c6c668199247fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b94caeb88b4aab7219d4b2f5c8c6c668199247fb/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c12f7b610be49901190cde994dfe4f594150dbf9", "url": "https://api.github.com/repos/rust-lang/rust/commits/c12f7b610be49901190cde994dfe4f594150dbf9", "html_url": "https://github.com/rust-lang/rust/commit/c12f7b610be49901190cde994dfe4f594150dbf9"}], "stats": {"total": 84, "additions": 69, "deletions": 15}, "files": [{"sha": "aca2503a0ee39fc2868feb46008835dd25ee74b7", "filename": "crates/ra_hir_def/src/item_tree.rs", "status": "modified", "additions": 69, "deletions": 15, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/b94caeb88b4aab7219d4b2f5c8c6c668199247fb/crates%2Fra_hir_def%2Fsrc%2Fitem_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b94caeb88b4aab7219d4b2f5c8c6c668199247fb/crates%2Fra_hir_def%2Fsrc%2Fitem_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_tree.rs?ref=b94caeb88b4aab7219d4b2f5c8c6c668199247fb", "patch": "@@ -112,10 +112,19 @@ impl ItemTree {\n     }\n }\n \n-pub trait ItemTreeNode: Sized {\n+/// Trait implemented by all nodes in the item tree.\n+pub trait ItemTreeNode: Clone {\n+    /// Looks up an instance of `Self` in an item tree.\n     fn lookup(tree: &ItemTree, index: Idx<Self>) -> &Self;\n }\n \n+/// Trait for item tree nodes that allow accessing the original AST node.\n+pub trait ItemTreeSource: ItemTreeNode {\n+    type Source: AstNode;\n+\n+    fn ast_id(&self) -> FileAstId<Self::Source>;\n+}\n+\n pub struct FileItemTreeId<N: ItemTreeNode> {\n     index: Idx<N>,\n     _p: PhantomData<N>,\n@@ -174,6 +183,32 @@ nodes!(\n     MacroCall in macro_calls,\n );\n \n+macro_rules! source {\n+    ( $($node:ident -> $ast:path),+ $(,)? ) => { $(\n+        impl ItemTreeSource for $node {\n+            type Source = $ast;\n+\n+            fn ast_id(&self) -> FileAstId<Self::Source> {\n+                self.ast_id\n+            }\n+        }\n+    )+ };\n+}\n+\n+source! {\n+    Function -> ast::FnDef,\n+    Struct -> ast::StructDef,\n+    Union -> ast::UnionDef,\n+    Enum -> ast::EnumDef,\n+    Const -> ast::ConstDef,\n+    Static -> ast::StaticDef,\n+    Trait -> ast::TraitDef,\n+    Impl -> ast::ImplDef,\n+    TypeAlias -> ast::TypeAliasDef,\n+    Mod -> ast::Module,\n+    MacroCall -> ast::MacroCall,\n+}\n+\n macro_rules! impl_index {\n     ( $($fld:ident: $t:ty),+ $(,)? ) => {\n         $(\n@@ -225,7 +260,7 @@ pub struct Import {\n     pub is_macro_use: bool,\n }\n \n-#[derive(Debug, Eq, PartialEq)]\n+#[derive(Debug, Clone, Eq, PartialEq)]\n pub struct Function {\n     pub name: Name,\n     pub attrs: Attrs,\n@@ -238,7 +273,7 @@ pub struct Function {\n     // FIXME inner items\n }\n \n-#[derive(Debug, Eq, PartialEq)]\n+#[derive(Debug, Clone, Eq, PartialEq)]\n pub struct Struct {\n     pub name: Name,\n     pub attrs: Attrs,\n@@ -249,7 +284,7 @@ pub struct Struct {\n     pub kind: StructDefKind,\n }\n \n-#[derive(Debug, Eq, PartialEq)]\n+#[derive(Debug, Clone, Eq, PartialEq)]\n pub enum StructDefKind {\n     /// `struct S { ... }` - type namespace only.\n     Record,\n@@ -259,7 +294,7 @@ pub enum StructDefKind {\n     Unit,\n }\n \n-#[derive(Debug, Eq, PartialEq)]\n+#[derive(Debug, Clone, Eq, PartialEq)]\n pub struct Union {\n     pub name: Name,\n     pub attrs: Attrs,\n@@ -269,7 +304,7 @@ pub struct Union {\n     pub ast_id: FileAstId<ast::UnionDef>,\n }\n \n-#[derive(Debug, Eq, PartialEq)]\n+#[derive(Debug, Clone, Eq, PartialEq)]\n pub struct Enum {\n     pub name: Name,\n     pub attrs: Attrs,\n@@ -279,7 +314,7 @@ pub struct Enum {\n     pub ast_id: FileAstId<ast::EnumDef>,\n }\n \n-#[derive(Debug, Eq, PartialEq)]\n+#[derive(Debug, Clone, Eq, PartialEq)]\n pub struct Const {\n     /// const _: () = ();\n     pub name: Option<Name>,\n@@ -288,15 +323,15 @@ pub struct Const {\n     pub ast_id: FileAstId<ast::ConstDef>,\n }\n \n-#[derive(Debug, Eq, PartialEq)]\n+#[derive(Debug, Clone, Eq, PartialEq)]\n pub struct Static {\n     pub name: Name,\n     pub visibility: RawVisibility,\n     pub type_ref: TypeRef,\n     pub ast_id: FileAstId<ast::StaticDef>,\n }\n \n-#[derive(Debug, Eq, PartialEq)]\n+#[derive(Debug, Clone, Eq, PartialEq)]\n pub struct Trait {\n     pub name: Name,\n     pub visibility: RawVisibility,\n@@ -306,7 +341,7 @@ pub struct Trait {\n     pub ast_id: FileAstId<ast::TraitDef>,\n }\n \n-#[derive(Debug, Eq, PartialEq)]\n+#[derive(Debug, Clone, Eq, PartialEq)]\n pub struct Impl {\n     pub generic_params: GenericParams,\n     pub target_trait: Option<TypeRef>,\n@@ -325,15 +360,15 @@ pub struct TypeAlias {\n     pub ast_id: FileAstId<ast::TypeAliasDef>,\n }\n \n-#[derive(Debug, Eq, PartialEq)]\n+#[derive(Debug, Clone, Eq, PartialEq)]\n pub struct Mod {\n     pub name: Name,\n     pub visibility: RawVisibility,\n     pub kind: ModKind,\n     pub ast_id: FileAstId<ast::Module>,\n }\n \n-#[derive(Debug, Eq, PartialEq)]\n+#[derive(Debug, Clone, Eq, PartialEq)]\n pub enum ModKind {\n     /// `mod m { ... }`\n     Inline { items: Vec<ModItem> },\n@@ -342,7 +377,7 @@ pub enum ModKind {\n     Outline {},\n }\n \n-#[derive(Debug, Eq, PartialEq)]\n+#[derive(Debug, Clone, Eq, PartialEq)]\n pub struct MacroCall {\n     /// For `macro_rules!` declarations, this is the name of the declared macro.\n     pub name: Option<Name>,\n@@ -359,7 +394,7 @@ pub struct MacroCall {\n \n // NB: There's no `FileAstId` for `Expr`. The only case where this would be useful is for array\n // lengths, but we don't do much with them yet.\n-#[derive(Debug, Eq, PartialEq)]\n+#[derive(Debug, Clone, Eq, PartialEq)]\n pub struct Expr;\n \n macro_rules! impl_froms {\n@@ -390,6 +425,25 @@ pub enum ModItem {\n     MacroCall(FileItemTreeId<MacroCall>),\n }\n \n+impl ModItem {\n+    pub fn as_assoc_item(&self) -> Option<AssocItem> {\n+        match self {\n+            ModItem::Import(_)\n+            | ModItem::Struct(_)\n+            | ModItem::Union(_)\n+            | ModItem::Enum(_)\n+            | ModItem::Static(_)\n+            | ModItem::Trait(_)\n+            | ModItem::Impl(_)\n+            | ModItem::Mod(_) => None,\n+            ModItem::MacroCall(call) => Some(AssocItem::MacroCall(*call)),\n+            ModItem::Const(konst) => Some(AssocItem::Const(*konst)),\n+            ModItem::TypeAlias(alias) => Some(AssocItem::TypeAlias(*alias)),\n+            ModItem::Function(func) => Some(AssocItem::Function(*func)),\n+        }\n+    }\n+}\n+\n impl_froms!(ModItem {\n     Import(FileItemTreeId<Import>),\n     Function(FileItemTreeId<Function>),\n@@ -405,7 +459,7 @@ impl_froms!(ModItem {\n     MacroCall(FileItemTreeId<MacroCall>),\n });\n \n-#[derive(Debug, Eq, PartialEq)]\n+#[derive(Debug, Copy, Clone, Eq, PartialEq)]\n pub enum AssocItem {\n     Function(FileItemTreeId<Function>),\n     TypeAlias(FileItemTreeId<TypeAlias>),"}]}