{"sha": "cbebdd8e67aa9543d6b4bdd2b5bc4647a97e3f2b", "node_id": "C_kwDOAAsO6NoAKGNiZWJkZDhlNjdhYTk1NDNkNmI0YmRkMmI1YmM0NjQ3YTk3ZTNmMmI", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-10-22T10:42:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-22T10:42:48Z"}, "message": "Rollup merge of #89991 - petrochenkov:visitok2, r=jackh726\n\nrustc_ast: Turn `MutVisitor::token_visiting_enabled` into a constant\n\nIt's a visitor property rather than something that needs to be determined at runtime", "tree": {"sha": "4c5984ffe11e538c9c330faed7dddda363afac17", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c5984ffe11e538c9c330faed7dddda363afac17"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cbebdd8e67aa9543d6b4bdd2b5bc4647a97e3f2b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhcpWoCRBK7hj4Ov3rIwAAMksIAG7VIsEvWY4i0f0VEyWDqrI7\niAcfKGQwhkhp0LdYlP3lxNuMk2sFDcXuSnjfZ1fJId25tp330bdyeP+D+khgu8/p\n63Tp7Zgh2v+HMTLv7UfQxBhj/nKDnVsBFpmK87y5hNHCaJdK6iAsd2NT+K54KX4v\nCoj1l/DbaLDhEW0zefOEg1bCgLgexYhPuGyNbO2R+RkAYA349SBVckVM2qMmktpb\ncbX4+a+is6bEX/QsG//5u5w2BA2vbEGrG/velgStlDsxi3nLpiR12e0aSmVKj4i0\nPSMpxXWh4KADFlNvPY2rQwjjQkpEXN9FLG8pW/APbTY8pmbIIYkc/zixynZWv/8=\n=eRTO\n-----END PGP SIGNATURE-----\n", "payload": "tree 4c5984ffe11e538c9c330faed7dddda363afac17\nparent 8b7adf63e17ea2391b40668501cedb8099e3f8ca\nparent d2470e74e133de90c227e6d22dfd3391277333b3\nauthor Yuki Okushi <jtitor@2k36.org> 1634899368 +0900\ncommitter GitHub <noreply@github.com> 1634899368 +0900\n\nRollup merge of #89991 - petrochenkov:visitok2, r=jackh726\n\nrustc_ast: Turn `MutVisitor::token_visiting_enabled` into a constant\n\nIt's a visitor property rather than something that needs to be determined at runtime\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cbebdd8e67aa9543d6b4bdd2b5bc4647a97e3f2b", "html_url": "https://github.com/rust-lang/rust/commit/cbebdd8e67aa9543d6b4bdd2b5bc4647a97e3f2b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cbebdd8e67aa9543d6b4bdd2b5bc4647a97e3f2b/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b7adf63e17ea2391b40668501cedb8099e3f8ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b7adf63e17ea2391b40668501cedb8099e3f8ca", "html_url": "https://github.com/rust-lang/rust/commit/8b7adf63e17ea2391b40668501cedb8099e3f8ca"}, {"sha": "d2470e74e133de90c227e6d22dfd3391277333b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2470e74e133de90c227e6d22dfd3391277333b3", "html_url": "https://github.com/rust-lang/rust/commit/d2470e74e133de90c227e6d22dfd3391277333b3"}], "stats": {"total": 21, "additions": 8, "deletions": 13}, "files": [{"sha": "74def2bab1bfa2a58319e728f6765a2c9dc0f081", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cbebdd8e67aa9543d6b4bdd2b5bc4647a97e3f2b/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbebdd8e67aa9543d6b4bdd2b5bc4647a97e3f2b/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=cbebdd8e67aa9543d6b4bdd2b5bc4647a97e3f2b", "patch": "@@ -37,9 +37,7 @@ pub trait MutVisitor: Sized {\n     /// Mutable token visiting only exists for the `macro_rules` token marker and should not be\n     /// used otherwise. Token visitor would be entirely separate from the regular visitor if\n     /// the marker didn't have to visit AST fragments in nonterminal tokens.\n-    fn token_visiting_enabled(&self) -> bool {\n-        false\n-    }\n+    const VISIT_TOKENS: bool = false;\n \n     // Methods in this trait have one of three forms:\n     //\n@@ -363,7 +361,7 @@ pub fn visit_mac_args<T: MutVisitor>(args: &mut MacArgs, vis: &mut T) {\n         }\n         MacArgs::Eq(eq_span, token) => {\n             vis.visit_span(eq_span);\n-            if vis.token_visiting_enabled() {\n+            if T::VISIT_TOKENS {\n                 visit_token(token, vis);\n             } else {\n                 // The value in `#[key = VALUE]` must be visited as an expression for backward\n@@ -682,7 +680,7 @@ pub fn visit_tt<T: MutVisitor>(tt: &mut TokenTree, vis: &mut T) {\n \n // No `noop_` prefix because there isn't a corresponding method in `MutVisitor`.\n pub fn visit_tts<T: MutVisitor>(TokenStream(tts): &mut TokenStream, vis: &mut T) {\n-    if vis.token_visiting_enabled() && !tts.is_empty() {\n+    if T::VISIT_TOKENS && !tts.is_empty() {\n         let tts = Lrc::make_mut(tts);\n         visit_vec(tts, |(tree, _is_joint)| visit_tt(tree, vis));\n     }\n@@ -692,14 +690,14 @@ pub fn visit_attr_annotated_tts<T: MutVisitor>(\n     AttrAnnotatedTokenStream(tts): &mut AttrAnnotatedTokenStream,\n     vis: &mut T,\n ) {\n-    if vis.token_visiting_enabled() && !tts.is_empty() {\n+    if T::VISIT_TOKENS && !tts.is_empty() {\n         let tts = Lrc::make_mut(tts);\n         visit_vec(tts, |(tree, _is_joint)| visit_attr_annotated_tt(tree, vis));\n     }\n }\n \n pub fn visit_lazy_tts_opt_mut<T: MutVisitor>(lazy_tts: Option<&mut LazyTokenStream>, vis: &mut T) {\n-    if vis.token_visiting_enabled() {\n+    if T::VISIT_TOKENS {\n         if let Some(lazy_tts) = lazy_tts {\n             let mut tts = lazy_tts.create_token_stream();\n             visit_attr_annotated_tts(&mut tts, vis);"}, {"sha": "88e1623012ba0a43f0b475e828c25e7f99485055", "filename": "compiler/rustc_expand/src/mbe/transcribe.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cbebdd8e67aa9543d6b4bdd2b5bc4647a97e3f2b/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbebdd8e67aa9543d6b4bdd2b5bc4647a97e3f2b/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Ftranscribe.rs?ref=cbebdd8e67aa9543d6b4bdd2b5bc4647a97e3f2b", "patch": "@@ -19,9 +19,7 @@ use std::mem;\n struct Marker(LocalExpnId, Transparency);\n \n impl MutVisitor for Marker {\n-    fn token_visiting_enabled(&self) -> bool {\n-        true\n-    }\n+    const VISIT_TOKENS: bool = true;\n \n     fn visit_span(&mut self, span: &mut Span) {\n         *span = span.apply_mark(self.0.to_expn_id(), self.1)"}, {"sha": "8974d45b4d8cfeaddced965b4cc7eab4db5ed3ec", "filename": "compiler/rustc_expand/src/mut_visit/tests.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cbebdd8e67aa9543d6b4bdd2b5bc4647a97e3f2b/compiler%2Frustc_expand%2Fsrc%2Fmut_visit%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbebdd8e67aa9543d6b4bdd2b5bc4647a97e3f2b/compiler%2Frustc_expand%2Fsrc%2Fmut_visit%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmut_visit%2Ftests.rs?ref=cbebdd8e67aa9543d6b4bdd2b5bc4647a97e3f2b", "patch": "@@ -15,9 +15,8 @@ fn print_crate_items(krate: &ast::Crate) -> String {\n struct ToZzIdentMutVisitor;\n \n impl MutVisitor for ToZzIdentMutVisitor {\n-    fn token_visiting_enabled(&self) -> bool {\n-        true\n-    }\n+    const VISIT_TOKENS: bool = true;\n+\n     fn visit_ident(&mut self, ident: &mut Ident) {\n         *ident = Ident::from_str(\"zz\");\n     }"}]}