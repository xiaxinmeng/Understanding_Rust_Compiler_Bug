{"sha": "bef4c41fc0051444034ad9b488b06b2d512bfd17", "node_id": "C_kwDOAAsO6NoAKGJlZjRjNDFmYzAwNTE0NDQwMzRhZDliNDg4YjA2YjJkNTEyYmZkMTc", "commit": {"author": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2022-11-12T02:31:05Z"}, "committer": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2022-11-12T02:31:05Z"}, "message": "Add test examples", "tree": {"sha": "2d8ce4779044f286266766bd2180a891f0dce6da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d8ce4779044f286266766bd2180a891f0dce6da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bef4c41fc0051444034ad9b488b06b2d512bfd17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bef4c41fc0051444034ad9b488b06b2d512bfd17", "html_url": "https://github.com/rust-lang/rust/commit/bef4c41fc0051444034ad9b488b06b2d512bfd17", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bef4c41fc0051444034ad9b488b06b2d512bfd17/comments", "author": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd53445d05874d7662682b00d81cf073cfdbe505", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd53445d05874d7662682b00d81cf073cfdbe505", "html_url": "https://github.com/rust-lang/rust/commit/fd53445d05874d7662682b00d81cf073cfdbe505"}], "stats": {"total": 54, "additions": 54, "deletions": 0}, "files": [{"sha": "52ed54905199fc6f4fb933de9500719740205602", "filename": "crates/core_simd/src/vector.rs", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/bef4c41fc0051444034ad9b488b06b2d512bfd17/crates%2Fcore_simd%2Fsrc%2Fvector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bef4c41fc0051444034ad9b488b06b2d512bfd17/crates%2Fcore_simd%2Fsrc%2Fvector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvector.rs?ref=bef4c41fc0051444034ad9b488b06b2d512bfd17", "patch": "@@ -373,6 +373,19 @@ where\n     /// # Safety\n     ///\n     /// Each read must satisfy the same conditions as [`core::ptr::read`].\n+    ///\n+    /// # Example\n+    /// ```\n+    /// # #![feature(portable_simd)]\n+    /// # #[cfg(feature = \"as_crate\")] use core_simd::simd;\n+    /// # #[cfg(not(feature = \"as_crate\"))] use core::simd;\n+    /// # use simd::{Simd, SimdConstPtr};\n+    /// let values = [6, 2, 4, 9];\n+    /// let offsets = Simd::from_array([1, 0, 0, 3]);\n+    /// let source = Simd::splat(values.as_ptr()).wrapping_add(offsets);\n+    /// let gathered = unsafe { Simd::gather_ptr(source) };\n+    /// assert_eq!(gathered, Simd::from_array([2, 6, 6, 9]));\n+    /// ```\n     #[must_use]\n     #[inline]\n     #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n@@ -392,6 +405,20 @@ where\n     /// # Safety\n     ///\n     /// Enabled lanes must satisfy the same conditions as [`core::ptr::read`].\n+    ///\n+    /// # Example\n+    /// ```\n+    /// # #![feature(portable_simd)]\n+    /// # #[cfg(feature = \"as_crate\")] use core_simd::simd;\n+    /// # #[cfg(not(feature = \"as_crate\"))] use core::simd;\n+    /// # use simd::{Mask, Simd, SimdConstPtr};\n+    /// let values = [6, 2, 4, 9];\n+    /// let enable = Mask::from_array([true, true, false, true]);\n+    /// let offsets = Simd::from_array([1, 0, 0, 3]);\n+    /// let source = Simd::splat(values.as_ptr()).wrapping_add(offsets);\n+    /// let gathered = unsafe { Simd::gather_select_ptr(source, enable, Simd::splat(0)) };\n+    /// assert_eq!(gathered, Simd::from_array([2, 6, 0, 9]));\n+    /// ```\n     #[must_use]\n     #[inline]\n     #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n@@ -519,6 +546,19 @@ where\n     /// # Safety\n     ///\n     /// Each write must satisfy the same conditions as [`core::ptr::write`].\n+    ///\n+    /// # Example\n+    /// ```\n+    /// # #![feature(portable_simd)]\n+    /// # #[cfg(feature = \"as_crate\")] use core_simd::simd;\n+    /// # #[cfg(not(feature = \"as_crate\"))] use core::simd;\n+    /// # use simd::{Simd, SimdMutPtr};\n+    /// let mut values = [0; 4];\n+    /// let offset = Simd::from_array([3, 2, 1, 0]);\n+    /// let ptrs = Simd::splat(values.as_mut_ptr()).wrapping_add(offset);\n+    /// unsafe { Simd::from_array([6, 3, 5, 7]).scatter_ptr(ptrs); }\n+    /// assert_eq!(values, [7, 5, 3, 6]);\n+    /// ```\n     #[inline]\n     #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n     pub unsafe fn scatter_ptr(self, dest: Simd<*mut T, LANES>) {\n@@ -533,6 +573,20 @@ where\n     /// # Safety\n     ///\n     /// Enabled lanes must satisfy the same conditions as [`core::ptr::write`].\n+    ///\n+    /// # Example\n+    /// ```\n+    /// # #![feature(portable_simd)]\n+    /// # #[cfg(feature = \"as_crate\")] use core_simd::simd;\n+    /// # #[cfg(not(feature = \"as_crate\"))] use core::simd;\n+    /// # use simd::{Mask, Simd, SimdMutPtr};\n+    /// let mut values = [0; 4];\n+    /// let offset = Simd::from_array([3, 2, 1, 0]);\n+    /// let ptrs = Simd::splat(values.as_mut_ptr()).wrapping_add(offset);\n+    /// let enable = Mask::from_array([true, true, false, false]);\n+    /// unsafe { Simd::from_array([6, 3, 5, 7]).scatter_select_ptr(ptrs, enable); }\n+    /// assert_eq!(values, [0, 0, 3, 6]);\n+    /// ```\n     #[inline]\n     #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n     pub unsafe fn scatter_select_ptr(self, dest: Simd<*mut T, LANES>, enable: Mask<isize, LANES>) {"}]}