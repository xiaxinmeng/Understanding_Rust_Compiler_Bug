{"sha": "4338bd178d725c91fa052682ef6e26cc4280bf75", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzMzhiZDE3OGQ3MjVjOTFmYTA1MjY4MmVmNmUyNmNjNDI4MGJmNzU=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-03-06T22:05:03Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-03-09T01:10:03Z"}, "message": "Move epochs to libsyntax", "tree": {"sha": "ef3c775ec325344886dd2a1b83bda20a5c44798e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef3c775ec325344886dd2a1b83bda20a5c44798e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4338bd178d725c91fa052682ef6e26cc4280bf75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4338bd178d725c91fa052682ef6e26cc4280bf75", "html_url": "https://github.com/rust-lang/rust/commit/4338bd178d725c91fa052682ef6e26cc4280bf75", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4338bd178d725c91fa052682ef6e26cc4280bf75/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "604d4ce7577b07b73d115c94fbd8007c1d9c9335", "url": "https://api.github.com/repos/rust-lang/rust/commits/604d4ce7577b07b73d115c94fbd8007c1d9c9335", "html_url": "https://github.com/rust-lang/rust/commit/604d4ce7577b07b73d115c94fbd8007c1d9c9335"}], "stats": {"total": 144, "additions": 83, "deletions": 61}, "files": [{"sha": "c9a838a66286a273e433663efb4673648a102e46", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4338bd178d725c91fa052682ef6e26cc4280bf75/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4338bd178d725c91fa052682ef6e26cc4280bf75/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=4338bd178d725c91fa052682ef6e26cc4280bf75", "patch": "@@ -17,8 +17,8 @@\n use errors::DiagnosticBuilder;\n use lint::{LintPass, LateLintPass, LintArray};\n use session::Session;\n-use session::config::Epoch;\n use syntax::codemap::Span;\n+use syntax::epoch::Epoch;\n \n declare_lint! {\n     pub EXCEEDING_BITSHIFTS,"}, {"sha": "b1e28f729ed75ef68f0c44d2f12661e6369d5845", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4338bd178d725c91fa052682ef6e26cc4280bf75/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4338bd178d725c91fa052682ef6e26cc4280bf75/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=4338bd178d725c91fa052682ef6e26cc4280bf75", "patch": "@@ -42,6 +42,7 @@ use util::nodemap::FxHashMap;\n use std::default::Default as StdDefault;\n use std::cell::{Ref, RefCell};\n use syntax::ast;\n+use syntax::epoch;\n use syntax_pos::{MultiSpan, Span};\n use errors::DiagnosticBuilder;\n use hir;\n@@ -105,7 +106,7 @@ pub struct FutureIncompatibleInfo {\n     pub reference: &'static str,\n     /// If this is an epoch fixing lint, the epoch in which\n     /// this lint becomes obsolete\n-    pub epoch: Option<config::Epoch>,\n+    pub epoch: Option<epoch::Epoch>,\n }\n \n /// The target of the `by_name` map, which accounts for renaming/deprecation.\n@@ -201,7 +202,7 @@ impl LintStore {\n                                         sess: Option<&Session>,\n                                         lints: Vec<FutureIncompatibleInfo>) {\n \n-        for epoch in config::ALL_EPOCHS {\n+        for epoch in epoch::ALL_EPOCHS {\n             let lints = lints.iter().filter(|f| f.epoch == Some(*epoch)).map(|f| f.id)\n                              .collect::<Vec<_>>();\n             if !lints.is_empty() {"}, {"sha": "14f5fe779d10af87bd914235eeca8fccbf132f0e", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4338bd178d725c91fa052682ef6e26cc4280bf75/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4338bd178d725c91fa052682ef6e26cc4280bf75/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=4338bd178d725c91fa052682ef6e26cc4280bf75", "patch": "@@ -38,10 +38,11 @@ use hir::def_id::{CrateNum, LOCAL_CRATE};\n use hir::intravisit::{self, FnKind};\n use hir;\n use lint::builtin::BuiltinLintDiagnostics;\n-use session::{config, Session, DiagnosticMessageId};\n+use session::{Session, DiagnosticMessageId};\n use std::hash;\n use syntax::ast;\n use syntax::codemap::MultiSpan;\n+use syntax::epoch::Epoch;\n use syntax::symbol::Symbol;\n use syntax::visit as ast_visit;\n use syntax_pos::Span;\n@@ -77,7 +78,7 @@ pub struct Lint {\n     pub desc: &'static str,\n \n     /// Deny lint after this epoch\n-    pub epoch_deny: Option<config::Epoch>,\n+    pub epoch_deny: Option<Epoch>,\n }\n \n impl Lint {"}, {"sha": "1c5cfa87ef46fde617218e09a0b890c132bce780", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 3, "deletions": 54, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/4338bd178d725c91fa052682ef6e26cc4280bf75/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4338bd178d725c91fa052682ef6e26cc4280bf75/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=4338bd178d725c91fa052682ef6e26cc4280bf75", "patch": "@@ -28,6 +28,7 @@ use middle::cstore;\n \n use syntax::ast::{self, IntTy, UintTy};\n use syntax::codemap::{FileName, FilePathMapping};\n+use syntax::epoch::Epoch;\n use syntax::parse::token;\n use syntax::parse;\n use syntax::symbol::Symbol;\n@@ -111,59 +112,6 @@ pub enum OutputType {\n     DepInfo,\n }\n \n-/// The epoch of the compiler (RFC 2052)\n-#[derive(Clone, Copy, Hash, PartialOrd, Ord, Eq, PartialEq, Debug)]\n-#[non_exhaustive]\n-pub enum Epoch {\n-    // epochs must be kept in order, newest to oldest\n-    /// The 2015 epoch\n-    Epoch2015,\n-    /// The 2018 epoch\n-    Epoch2018,\n-    // when adding new epochs, be sure to update:\n-    //\n-    // - the list in the `parse_epoch` static\n-    // - the match in the `parse_epoch` function\n-    // - add a `rust_####()` function to the session\n-    // - update the enum in Cargo's sources as well\n-    //\n-    // When -Zepoch becomes --epoch, there will\n-    // also be a check for the epoch being nightly-only\n-    // somewhere. That will need to be updated\n-    // whenever we're stabilizing/introducing a new epoch\n-    // as well as changing the default Cargo template.\n-}\n-\n-pub const ALL_EPOCHS: &[Epoch] = &[Epoch::Epoch2015, Epoch::Epoch2018];\n-\n-impl ToString for Epoch {\n-    fn to_string(&self) -> String {\n-        match *self {\n-            Epoch::Epoch2015 => \"2015\".into(),\n-            Epoch::Epoch2018 => \"2018\".into(),\n-        }\n-    }\n-}\n-\n-impl Epoch {\n-    pub fn lint_name(&self) -> &'static str {\n-        match *self {\n-            Epoch::Epoch2015 => \"epoch_2015\",\n-            Epoch::Epoch2018 => \"epoch_2018\",\n-        }\n-    }\n-}\n-\n-impl str::FromStr for Epoch {\n-    type Err = ();\n-    fn from_str(s: &str) -> Result<Self, ()> {\n-        match s {\n-            \"2015\" => Ok(Epoch::Epoch2015),\n-            \"2018\" => Ok(Epoch::Epoch2018),\n-            _ => Err(()),\n-        }\n-    }\n-}\n \n impl_stable_hash_for!(enum self::OutputType {\n     Bitcode,\n@@ -829,9 +777,10 @@ macro_rules! options {\n \n     #[allow(dead_code)]\n     mod $mod_set {\n-        use super::{$struct_name, Passes, SomePasses, AllPasses, Sanitizer, Lto, Epoch};\n+        use super::{$struct_name, Passes, SomePasses, AllPasses, Sanitizer, Lto};\n         use rustc_back::{LinkerFlavor, PanicStrategy, RelroLevel};\n         use std::path::PathBuf;\n+        use syntax::epoch::Epoch;\n \n         $(\n             pub fn $opt(cg: &mut $struct_name, v: Option<&str>) -> bool {"}, {"sha": "cdbbcf6a8dd1b07af49c93d64333646b3f3abe65", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4338bd178d725c91fa052682ef6e26cc4280bf75/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4338bd178d725c91fa052682ef6e26cc4280bf75/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=4338bd178d725c91fa052682ef6e26cc4280bf75", "patch": "@@ -20,7 +20,7 @@ use lint::builtin::BuiltinLintDiagnostics;\n use middle::allocator::AllocatorKind;\n use middle::dependency_format;\n use session::search_paths::PathKind;\n-use session::config::{DebugInfoLevel, Epoch, OutputType};\n+use session::config::{DebugInfoLevel, OutputType};\n use ty::tls;\n use util::nodemap::{FxHashMap, FxHashSet};\n use util::common::{duration_to_secs_str, ErrorReported};\n@@ -30,6 +30,7 @@ use rustc_data_structures::sync::Lrc;\n use syntax::ast::NodeId;\n use errors::{self, DiagnosticBuilder, DiagnosticId};\n use errors::emitter::{Emitter, EmitterWriter};\n+use syntax::epoch::Epoch;\n use syntax::json::JsonEmitter;\n use syntax::feature_gate;\n use syntax::symbol::Symbol;"}, {"sha": "03e159e74b962dd0ece8e4a0ba04f302a4844558", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4338bd178d725c91fa052682ef6e26cc4280bf75/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4338bd178d725c91fa052682ef6e26cc4280bf75/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=4338bd178d725c91fa052682ef6e26cc4280bf75", "patch": "@@ -47,6 +47,7 @@ use rustc::session;\n use rustc::util;\n \n use session::Session;\n+use syntax::epoch::Epoch;\n use lint::LintId;\n use lint::FutureIncompatibleInfo;\n \n@@ -279,7 +280,7 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n          FutureIncompatibleInfo {\n              id: LintId::of(lint::builtin::BARE_TRAIT_OBJECT),\n              reference: \"issue #48457 <https://github.com/rust-lang/rust/issues/48457>\",\n-             epoch: Some(session::config::Epoch::Epoch2018),\n+             epoch: Some(Epoch::Epoch2018),\n          }\n         ]);\n "}, {"sha": "603729f0de0f6211401cd7ccf6c7c1194010e99a", "filename": "src/libsyntax/epoch.rs", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/4338bd178d725c91fa052682ef6e26cc4280bf75/src%2Flibsyntax%2Fepoch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4338bd178d725c91fa052682ef6e26cc4280bf75/src%2Flibsyntax%2Fepoch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fepoch.rs?ref=4338bd178d725c91fa052682ef6e26cc4280bf75", "patch": "@@ -0,0 +1,67 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::str::FromStr;\n+\n+/// The epoch of the compiler (RFC 2052)\n+#[derive(Clone, Copy, Hash, PartialOrd, Ord, Eq, PartialEq, Debug)]\n+#[non_exhaustive]\n+pub enum Epoch {\n+    // epochs must be kept in order, newest to oldest\n+\n+    /// The 2015 epoch\n+    Epoch2015,\n+    /// The 2018 epoch\n+    Epoch2018,\n+\n+    // when adding new epochs, be sure to update:\n+    //\n+    // - the list in the `parse_epoch` static in librustc::session::config\n+    // - add a `rust_####()` function to the session\n+    // - update the enum in Cargo's sources as well\n+    //\n+    // When -Zepoch becomes --epoch, there will\n+    // also be a check for the epoch being nightly-only\n+    // somewhere. That will need to be updated\n+    // whenever we're stabilizing/introducing a new epoch\n+    // as well as changing the default Cargo template.\n+}\n+\n+// must be in order from oldest to newest\n+pub const ALL_EPOCHS: &[Epoch] = &[Epoch::Epoch2015, Epoch::Epoch2018];\n+\n+impl ToString for Epoch {\n+    fn to_string(&self) -> String {\n+        match *self {\n+            Epoch::Epoch2015 => \"2015\".into(),\n+            Epoch::Epoch2018 => \"2018\".into(),\n+        }\n+    }\n+}\n+\n+impl Epoch {\n+    pub fn lint_name(&self) -> &'static str {\n+        match *self {\n+            Epoch::Epoch2015 => \"epoch_2015\",\n+            Epoch::Epoch2018 => \"epoch_2018\",\n+        }\n+    }\n+}\n+\n+impl FromStr for Epoch {\n+    type Err = ();\n+    fn from_str(s: &str) -> Result<Self, ()> {\n+        match s {\n+            \"2015\" => Ok(Epoch::Epoch2015),\n+            \"2018\" => Ok(Epoch::Epoch2018),\n+            _ => Err(())\n+        }\n+    }\n+}"}, {"sha": "50e94e5cba7ad6ca9145c69a48acb5435d538a2d", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4338bd178d725c91fa052682ef6e26cc4280bf75/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4338bd178d725c91fa052682ef6e26cc4280bf75/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=4338bd178d725c91fa052682ef6e26cc4280bf75", "patch": "@@ -23,6 +23,7 @@\n #![feature(unicode)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(match_default_bindings)]\n+#![feature(non_exhaustive)]\n #![feature(i128_type)]\n #![feature(const_atomic_usize_new)]\n #![feature(rustc_attrs)]\n@@ -114,6 +115,7 @@ pub mod codemap;\n #[macro_use]\n pub mod config;\n pub mod entry;\n+pub mod epoch;\n pub mod feature_gate;\n pub mod fold;\n pub mod parse;"}]}