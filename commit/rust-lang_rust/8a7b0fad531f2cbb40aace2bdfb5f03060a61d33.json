{"sha": "8a7b0fad531f2cbb40aace2bdfb5f03060a61d33", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhN2IwZmFkNTMxZjJjYmI0MGFhY2UyYmRmYjVmMDMwNjBhNjFkMzM=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-08-18T00:00:45Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-08-18T06:32:30Z"}, "message": "trans: Call `fmod` manually for 32-bit float rem\n\nCurrently `f32 % f32` will generate a link error on 32-bit MSVC because LLVM\nwill lower the operation to a call to the nonexistent function `fmodf`. Work\naround in this in the backend by lowering to a call to `fmod` instead with\nnecessary extension/truncation between floats/doubles.\n\nCloses #27859", "tree": {"sha": "99e9e41afaf66e95fcd789d1da50ef83de859b6e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/99e9e41afaf66e95fcd789d1da50ef83de859b6e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a7b0fad531f2cbb40aace2bdfb5f03060a61d33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a7b0fad531f2cbb40aace2bdfb5f03060a61d33", "html_url": "https://github.com/rust-lang/rust/commit/8a7b0fad531f2cbb40aace2bdfb5f03060a61d33", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a7b0fad531f2cbb40aace2bdfb5f03060a61d33/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47ea0cfb6bd250c970e3a61d62bfa1b1c7bb27d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/47ea0cfb6bd250c970e3a61d62bfa1b1c7bb27d4", "html_url": "https://github.com/rust-lang/rust/commit/47ea0cfb6bd250c970e3a61d62bfa1b1c7bb27d4"}], "stats": {"total": 66, "additions": 65, "deletions": 1}, "files": [{"sha": "9e9e65c398cc236de51249dfa06a33ec8b647a8a", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 38, "deletions": 1, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/8a7b0fad531f2cbb40aace2bdfb5f03060a61d33/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a7b0fad531f2cbb40aace2bdfb5f03060a61d33/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=8a7b0fad531f2cbb40aace2bdfb5f03060a61d33", "patch": "@@ -65,6 +65,7 @@ use trans::cleanup::{self, CleanupMethods, DropHintMethods};\n use trans::common::*;\n use trans::datum::*;\n use trans::debuginfo::{self, DebugLoc, ToDebugLoc};\n+use trans::declare;\n use trans::glue;\n use trans::machine;\n use trans::meth;\n@@ -1767,7 +1768,43 @@ fn trans_eager_binop<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n       }\n       ast::BiRem => {\n         if is_float {\n-            FRem(bcx, lhs, rhs, binop_debug_loc)\n+            // LLVM currently always lowers the `frem` instructions appropriate\n+            // library calls typically found in libm. Notably f64 gets wired up\n+            // to `fmod` and f32 gets wired up to `fmodf`. Inconveniently for\n+            // us, 32-bit MSVC does not actually have a `fmodf` symbol, it's\n+            // instead just an inline function in a header that goes up to a\n+            // f64, uses `fmod`, and then comes back down to a f32.\n+            //\n+            // Although LLVM knows that `fmodf` doesn't exist on MSVC, it will\n+            // still unconditionally lower frem instructions over 32-bit floats\n+            // to a call to `fmodf`. To work around this we special case MSVC\n+            // 32-bit float rem instructions and instead do the call out to\n+            // `fmod` ourselves.\n+            //\n+            // Note that this is currently duplicated with src/libcore/ops.rs\n+            // which does the same thing, and it would be nice to perhaps unify\n+            // these two implementations on day! Also note that we call `fmod`\n+            // for both 32 and 64-bit floats because if we emit any FRem\n+            // instruction at all then LLVM is capable of optimizing it into a\n+            // 32-bit FRem (which we're trying to avoid).\n+            let use_fmod = tcx.sess.target.target.options.is_like_msvc &&\n+                           tcx.sess.target.target.arch == \"x86\";\n+            if use_fmod {\n+                let f64t = Type::f64(bcx.ccx());\n+                let fty = Type::func(&[f64t, f64t], &f64t);\n+                let llfn = declare::declare_cfn(bcx.ccx(), \"fmod\", fty,\n+                                                tcx.types.f64);\n+                if lhs_t == tcx.types.f32 {\n+                    let lhs = FPExt(bcx, lhs, f64t);\n+                    let rhs = FPExt(bcx, rhs, f64t);\n+                    let res = Call(bcx, llfn, &[lhs, rhs], None, binop_debug_loc);\n+                    FPTrunc(bcx, res, Type::f32(bcx.ccx()))\n+                } else {\n+                    Call(bcx, llfn, &[lhs, rhs], None, binop_debug_loc)\n+                }\n+            } else {\n+                FRem(bcx, lhs, rhs, binop_debug_loc)\n+            }\n         } else {\n             // Only zero-check integers; fp %0 is NaN\n             bcx = base::fail_if_zero_or_overflows(bcx,"}, {"sha": "900614be612f6d479e11ac857e1a11948a8533cf", "filename": "src/test/run-pass/issue-27859.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/8a7b0fad531f2cbb40aace2bdfb5f03060a61d33/src%2Ftest%2Frun-pass%2Fissue-27859.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a7b0fad531f2cbb40aace2bdfb5f03060a61d33/src%2Ftest%2Frun-pass%2Fissue-27859.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-27859.rs?ref=8a7b0fad531f2cbb40aace2bdfb5f03060a61d33", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[inline(never)]\n+fn foo(a: f32, b: f32) -> f32 {\n+    a % b\n+}\n+\n+#[inline(never)]\n+fn bar(a: f32, b: f32) -> f32 {\n+    ((a as f64) % (b as f64)) as f32\n+}\n+\n+fn main() {\n+    let unknown_float = std::env::args().len();\n+    println!(\"{}\", foo(4.0, unknown_float as f32));\n+    println!(\"{}\", foo(5.0, (unknown_float as f32) + 1.0));\n+    println!(\"{}\", bar(6.0, (unknown_float as f32) + 2.0));\n+    println!(\"{}\", bar(7.0, (unknown_float as f32) + 3.0));\n+}"}]}