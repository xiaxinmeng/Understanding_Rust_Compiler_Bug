{"sha": "b782939c06eb97bb276ce3cd4aac46eb1ebd511a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3ODI5MzljMDZlYjk3YmIyNzZjZTNjZDRhYWM0NmViMWViZDUxMWE=", "commit": {"author": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2021-03-10T17:05:59Z"}, "committer": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2021-03-10T17:15:16Z"}, "message": "Remove `sym::` and `kw::` from generated docs", "tree": {"sha": "156bf7f9c230e443c7125f1222dba53755ae08e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/156bf7f9c230e443c7125f1222dba53755ae08e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b782939c06eb97bb276ce3cd4aac46eb1ebd511a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b782939c06eb97bb276ce3cd4aac46eb1ebd511a", "html_url": "https://github.com/rust-lang/rust/commit/b782939c06eb97bb276ce3cd4aac46eb1ebd511a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b782939c06eb97bb276ce3cd4aac46eb1ebd511a/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4900836ab75b877775905931eba586ea8f13935d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4900836ab75b877775905931eba586ea8f13935d", "html_url": "https://github.com/rust-lang/rust/commit/4900836ab75b877775905931eba586ea8f13935d"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "84c874ee5373aa206051e0e33f1943fffbe84270", "filename": "compiler/rustc_hir/src/lang_items.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b782939c06eb97bb276ce3cd4aac46eb1ebd511a/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b782939c06eb97bb276ce3cd4aac46eb1ebd511a/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs?ref=b782939c06eb97bb276ce3cd4aac46eb1ebd511a", "patch": "@@ -38,7 +38,7 @@ macro_rules! expand_group {\n // So you probably just want to nip down to the end.\n macro_rules! language_item_table {\n     (\n-        $( $(#[$attr:meta])* $variant:ident $($group:expr)?, $name:expr, $method:ident, $target:expr; )*\n+        $( $(#[$attr:meta])* $variant:ident $($group:expr)?, $module:ident :: $name:ident, $method:ident, $target:expr; )*\n     ) => {\n \n         enum_from_u32! {\n@@ -60,7 +60,7 @@ macro_rules! language_item_table {\n             /// would result in [`sym::eq`] since it is `#[lang = \"eq\"]`.\n             pub fn name(self) -> Symbol {\n                 match self {\n-                    $( LangItem::$variant => $name, )*\n+                    $( LangItem::$variant => $module::$name, )*\n                 }\n             }\n \n@@ -128,7 +128,7 @@ macro_rules! language_item_table {\n         /// A mapping from the name of the lang item to its order and the form it must be of.\n         pub static ITEM_REFS: SyncLazy<FxHashMap<Symbol, (usize, Target)>> = SyncLazy::new(|| {\n             let mut item_refs = FxHashMap::default();\n-            $( item_refs.insert($name, (LangItem::$variant as usize, $target)); )*\n+            $( item_refs.insert($module::$name, (LangItem::$variant as usize, $target)); )*\n             item_refs\n         });\n "}]}