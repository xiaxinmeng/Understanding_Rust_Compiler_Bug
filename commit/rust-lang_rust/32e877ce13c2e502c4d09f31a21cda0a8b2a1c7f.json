{"sha": "32e877ce13c2e502c4d09f31a21cda0a8b2a1c7f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyZTg3N2NlMTNjMmU1MDJjNGQwOWYzMWEyMWNkYTBhOGIyYTFjN2Y=", "commit": {"author": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2019-04-24T05:47:01Z"}, "committer": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2019-04-24T20:54:12Z"}, "message": "Update pulldown_cmark to 0.5\n\nWe now no longer have to use our own wrapper around `Parser` and can use\nthe new `OffsetIter`.", "tree": {"sha": "77f8d0cde7851f7a85b02a82f2260cbc9493eec5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77f8d0cde7851f7a85b02a82f2260cbc9493eec5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/32e877ce13c2e502c4d09f31a21cda0a8b2a1c7f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJEBAABCgAuFiEEj4U0bmbiMSg/mWqvgqphyqETl+YFAlzAzPQQHGRldkBwaGFu\nc2NoLm5ldAAKCRCCqmHKoROX5jw/EADWIXmSjYK4iIPDTnpWnIHkM1oujOJYjR8K\nL+qkEnyM/cZkOHInpD9TYI4sYsZHCvnfH5dlg5/E8YXyyXXG/LYs1lPJ9wbFciP6\n7VBIZIpsg1lQKvh+yO+9+C0bXN31xBsOTS6fAaot71FOBV9+zjjRG4WKCEEu0zM6\neMmhxMOkUYcZkbV0nTnE/FYKbsC5MDgkduSUmgL8xu7m6sKTYlOPOSwQfSRADcS6\npN+6/zPcuQBGsFpLTz3D1ZefOMbnbCloAUC83x5NsxQJ4DEUEiMYPTLjR98roesR\n/5zG+Cm1ZXh454VzZ5RIa99vtlfEssUqSKSEroZL6xGl0kydf+R4prdKBWTYmvgi\nGtSwpYA1yvPPbhh02PLy+nEMfXXmihBLDgczN60bmJSlseSUhCmyjqnIasMhTqoK\nohOpOtZxMw1lOBTgchjjDDQL6+/hLK0Im6ULoPwnbT00KB1VAEhbXiBCASGZ2+SN\nxoRSHpWOfAnilSolEKmWuHscjvOcNRpl4ATlPhqtblwklYWmIsv7Y6yuJtBK8h/V\nhyru/BI9rfWoIaZ2hed+RR2Nk1Mh1jUmPB7rIMguXe1w/ThaXZW5E8mBqiZXE+PU\nnBixzg3FW1jUC5Mpjc6zmDkEIZCZxlJpIFE83UkqDw2jWlU/B/Y3XZ9Idd+a1Nxy\nN3iUdFsHHQ==\n=veO9\n-----END PGP SIGNATURE-----", "payload": "tree 77f8d0cde7851f7a85b02a82f2260cbc9493eec5\nparent 9897442f27f15840b459c3e8a480c9082775fbd1\nauthor Philipp Hansch <dev@phansch.net> 1556084821 +0200\ncommitter Philipp Hansch <dev@phansch.net> 1556139252 +0200\n\nUpdate pulldown_cmark to 0.5\n\nWe now no longer have to use our own wrapper around `Parser` and can use\nthe new `OffsetIter`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/32e877ce13c2e502c4d09f31a21cda0a8b2a1c7f", "html_url": "https://github.com/rust-lang/rust/commit/32e877ce13c2e502c4d09f31a21cda0a8b2a1c7f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/32e877ce13c2e502c4d09f31a21cda0a8b2a1c7f/comments", "author": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9897442f27f15840b459c3e8a480c9082775fbd1", "url": "https://api.github.com/repos/rust-lang/rust/commits/9897442f27f15840b459c3e8a480c9082775fbd1", "html_url": "https://github.com/rust-lang/rust/commit/9897442f27f15840b459c3e8a480c9082775fbd1"}], "stats": {"total": 65, "additions": 24, "deletions": 41}, "files": [{"sha": "ecbd0a7e5fa5a2b7b3bda029350a393c9f79f150", "filename": "clippy_lints/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32e877ce13c2e502c4d09f31a21cda0a8b2a1c7f/clippy_lints%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/32e877ce13c2e502c4d09f31a21cda0a8b2a1c7f/clippy_lints%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2FCargo.toml?ref=32e877ce13c2e502c4d09f31a21cda0a8b2a1c7f", "patch": "@@ -28,7 +28,7 @@ serde = \"1.0\"\n serde_derive = \"1.0\"\n toml = \"0.4\"\n unicode-normalization = \"0.1\"\n-pulldown-cmark = \"0.2\"\n+pulldown-cmark = \"0.5.0\"\n url = \"1.7.0\"\n if_chain = \"0.1.3\"\n smallvec = { version = \"0.6.5\", features = [\"union\"] }"}, {"sha": "51be83a8a0677ce5d67b07f25a2a127a3430bb1c", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 23, "deletions": 40, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/32e877ce13c2e502c4d09f31a21cda0a8b2a1c7f/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32e877ce13c2e502c4d09f31a21cda0a8b2a1c7f/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=32e877ce13c2e502c4d09f31a21cda0a8b2a1c7f", "patch": "@@ -4,6 +4,7 @@ use pulldown_cmark;\n use rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n use rustc::{declare_tool_lint, impl_lint_pass};\n use rustc_data_structures::fx::FxHashSet;\n+use std::ops::Range;\n use syntax::ast;\n use syntax::source_map::{BytePos, Span};\n use syntax_pos::Pos;\n@@ -57,25 +58,6 @@ impl EarlyLintPass for DocMarkdown {\n     }\n }\n \n-struct Parser<'a> {\n-    parser: pulldown_cmark::Parser<'a>,\n-}\n-\n-impl<'a> Parser<'a> {\n-    fn new(parser: pulldown_cmark::Parser<'a>) -> Self {\n-        Self { parser }\n-    }\n-}\n-\n-impl<'a> Iterator for Parser<'a> {\n-    type Item = (usize, pulldown_cmark::Event<'a>);\n-\n-    fn next(&mut self) -> Option<Self::Item> {\n-        let offset = self.parser.get_offset();\n-        self.parser.next().map(|event| (offset, event))\n-    }\n-}\n-\n /// Cleanup documentation decoration (`///` and such).\n ///\n /// We can't use `syntax::attr::AttributeMethods::with_desugared_doc` or\n@@ -159,30 +141,31 @@ pub fn check_attrs<'a>(cx: &EarlyContext<'_>, valid_idents: &FxHashSet<String>,\n     }\n \n     if !doc.is_empty() {\n-        let parser = Parser::new(pulldown_cmark::Parser::new(&doc));\n-        let parser = parser.coalesce(|x, y| {\n+        let parser = pulldown_cmark::Parser::new(&doc).into_offset_iter();\n+        // Iterate over all `Events` and combine consecutive events into one\n+        let events = parser.coalesce(|previous, current| {\n             use pulldown_cmark::Event::*;\n \n-            let x_offset = x.0;\n-            let y_offset = y.0;\n+            let previous_range = previous.1;\n+            let current_range = current.1;\n \n-            match (x.1, y.1) {\n-                (Text(x), Text(y)) => {\n-                    let mut x = x.into_owned();\n-                    x.push_str(&y);\n-                    Ok((x_offset, Text(x.into())))\n+            match (previous.0, current.0) {\n+                (Text(previous), Text(current)) => {\n+                    let mut previous = previous.to_string();\n+                    previous.push_str(&current);\n+                    Ok((Text(previous.into()), previous_range))\n                 },\n-                (x, y) => Err(((x_offset, x), (y_offset, y))),\n+                (previous, current) => Err(((previous, previous_range), (current, current_range))),\n             }\n         });\n-        check_doc(cx, valid_idents, parser, &spans);\n+        check_doc(cx, valid_idents, events, &spans);\n     }\n }\n \n-fn check_doc<'a, Events: Iterator<Item = (usize, pulldown_cmark::Event<'a>)>>(\n+fn check_doc<'a, Events: Iterator<Item = (pulldown_cmark::Event<'a>, Range<usize>)>>(\n     cx: &EarlyContext<'_>,\n     valid_idents: &FxHashSet<String>,\n-    docs: Events,\n+    events: Events,\n     spans: &[(usize, Span)],\n ) {\n     use pulldown_cmark::Event::*;\n@@ -191,15 +174,15 @@ fn check_doc<'a, Events: Iterator<Item = (usize, pulldown_cmark::Event<'a>)>>(\n     let mut in_code = false;\n     let mut in_link = None;\n \n-    for (offset, event) in docs {\n+    for (event, range) in events {\n         match event {\n-            Start(CodeBlock(_)) | Start(Code) => in_code = true,\n-            End(CodeBlock(_)) | End(Code) => in_code = false,\n-            Start(Link(link, _)) => in_link = Some(link),\n-            End(Link(_, _)) => in_link = None,\n+            Start(CodeBlock(_)) => in_code = true,\n+            End(CodeBlock(_)) => in_code = false,\n+            Start(Link(_, url, _)) => in_link = Some(url),\n+            End(Link(..)) => in_link = None,\n             Start(_tag) | End(_tag) => (),         // We don't care about other tags\n             Html(_html) | InlineHtml(_html) => (), // HTML is weird, just ignore it\n-            SoftBreak | HardBreak => (),\n+            SoftBreak | HardBreak | TaskListMarker(_) | Code(_) => (),\n             FootnoteReference(text) | Text(text) => {\n                 if Some(&text) == in_link.as_ref() {\n                     // Probably a link of the form `<http://example.com>`\n@@ -209,15 +192,15 @@ fn check_doc<'a, Events: Iterator<Item = (usize, pulldown_cmark::Event<'a>)>>(\n                 }\n \n                 if !in_code {\n-                    let index = match spans.binary_search_by(|c| c.0.cmp(&offset)) {\n+                    let index = match spans.binary_search_by(|c| c.0.cmp(&range.start)) {\n                         Ok(o) => o,\n                         Err(e) => e - 1,\n                     };\n \n                     let (begin, span) = spans[index];\n \n                     // Adjust for the beginning of the current `Event`\n-                    let span = span.with_lo(span.lo() + BytePos::from_usize(offset - begin));\n+                    let span = span.with_lo(span.lo() + BytePos::from_usize(range.start - begin));\n \n                     check_text(cx, valid_idents, &text, span);\n                 }"}]}