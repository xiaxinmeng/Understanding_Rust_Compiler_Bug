{"sha": "dcf107728c4e545b9fee6b0e6a929837429275cf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjZjEwNzcyOGM0ZTU0NWI5ZmVlNmIwZTZhOTI5ODM3NDI5Mjc1Y2Y=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-08T23:05:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-08T23:05:49Z"}, "message": "Auto merge of #75308 - JohnTitor:rollup-vnnny43, r=JohnTitor\n\nRollup of 15 pull requests\n\nSuccessful merges:\n\n - #74712 (Update E0271 explanation)\n - #74842 (adjust remaining targets)\n - #75151 (Consistent variable name alloc for raw_vec)\n - #75162 (Fix the documentation for move about Fn traits implementations)\n - #75248 (Add `as_mut_ptr` to `NonNull<[T]>`)\n - #75262 (Show multi extension example for Path in doctests)\n - #75266 (Add safety section to `NonNull::as_*` method docs)\n - #75284 (Show relative example for Path ancestors)\n - #75285 (Separate example for Path strip_prefix)\n - #75287 (Show Path extension example change multi extension)\n - #75288 (Use assert! for Path exists example to check bool)\n - #75289 (Remove ambiguity from PathBuf pop example)\n - #75290 (fix `min_const_generics` version)\n - #75291 (Clean up E0750)\n - #75292 (Clean up E0502)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "eb866f722712c78a44cb48ecfd59112406c62133", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb866f722712c78a44cb48ecfd59112406c62133"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dcf107728c4e545b9fee6b0e6a929837429275cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dcf107728c4e545b9fee6b0e6a929837429275cf", "html_url": "https://github.com/rust-lang/rust/commit/dcf107728c4e545b9fee6b0e6a929837429275cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dcf107728c4e545b9fee6b0e6a929837429275cf/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ceedf1d5febd65b012b8bcd513d70a0a6a091210", "url": "https://api.github.com/repos/rust-lang/rust/commits/ceedf1d5febd65b012b8bcd513d70a0a6a091210", "html_url": "https://github.com/rust-lang/rust/commit/ceedf1d5febd65b012b8bcd513d70a0a6a091210"}, {"sha": "e6dfd308d39dc07affe3f35b0473de5f2affec6a", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6dfd308d39dc07affe3f35b0473de5f2affec6a", "html_url": "https://github.com/rust-lang/rust/commit/e6dfd308d39dc07affe3f35b0473de5f2affec6a"}], "stats": {"total": 192, "additions": 134, "deletions": 58}, "files": [{"sha": "247b636c808acf5e15a2b16acf212860872c73b3", "filename": "library/alloc/src/raw_vec.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dcf107728c4e545b9fee6b0e6a929837429275cf/library%2Falloc%2Fsrc%2Fraw_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcf107728c4e545b9fee6b0e6a929837429275cf/library%2Falloc%2Fsrc%2Fraw_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fraw_vec.rs?ref=dcf107728c4e545b9fee6b0e6a929837429275cf", "patch": "@@ -203,13 +203,15 @@ impl<T, A: AllocRef> RawVec<T, A> {\n     ///\n     /// # Safety\n     ///\n-    /// The `ptr` must be allocated (via the given allocator `a`), and with the given `capacity`.\n+    /// The `ptr` must be allocated (via the given allocator `alloc`), and with the given\n+    /// `capacity`.\n     /// The `capacity` cannot exceed `isize::MAX` for sized types. (only a concern on 32-bit\n     /// systems). ZST vectors may have a capacity up to `usize::MAX`.\n-    /// If the `ptr` and `capacity` come from a `RawVec` created via `a`, then this is guaranteed.\n+    /// If the `ptr` and `capacity` come from a `RawVec` created via `alloc`, then this is\n+    /// guaranteed.\n     #[inline]\n-    pub unsafe fn from_raw_parts_in(ptr: *mut T, capacity: usize, a: A) -> Self {\n-        Self { ptr: unsafe { Unique::new_unchecked(ptr) }, cap: capacity, alloc: a }\n+    pub unsafe fn from_raw_parts_in(ptr: *mut T, capacity: usize, alloc: A) -> Self {\n+        Self { ptr: unsafe { Unique::new_unchecked(ptr) }, cap: capacity, alloc }\n     }\n \n     /// Gets a raw pointer to the start of the allocation. Note that this is"}, {"sha": "d876ab23653f367925b8f904ad1891705a080356", "filename": "library/core/src/ptr/non_null.rs", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/dcf107728c4e545b9fee6b0e6a929837429275cf/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcf107728c4e545b9fee6b0e6a929837429275cf/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs?ref=dcf107728c4e545b9fee6b0e6a929837429275cf", "patch": "@@ -117,6 +117,24 @@ impl<T: ?Sized> NonNull<T> {\n     /// The resulting lifetime is bound to self so this behaves \"as if\"\n     /// it were actually an instance of T that is getting borrowed. If a longer\n     /// (unbound) lifetime is needed, use `&*my_ptr.as_ptr()`.\n+    ///\n+    /// # Safety\n+    ///\n+    /// When calling this method, you have to ensure that all of the following is true:\n+    /// - `self` is properly aligned\n+    /// - `self` must point to an initialized instance of T; in particular, the pointer must be\n+    ///   \"dereferencable\" in the sense defined [here].\n+    ///\n+    /// This applies even if the result of this method is unused!\n+    /// (The part about being initialized is not yet fully decided, but until\n+    /// it is, the only safe approach is to ensure that they are indeed initialized.)\n+    ///\n+    /// Additionally, the lifetime of `self` does not necessarily reflect the actual\n+    /// lifetime of the data. *You* must enforce Rust's aliasing rules. In particular,\n+    /// for the duration of this lifetime, the memory the pointer points to must not\n+    /// get mutated (except inside `UnsafeCell`).\n+    ///\n+    /// [here]: crate::ptr#safety\n     #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n     #[inline]\n     pub unsafe fn as_ref(&self) -> &T {\n@@ -130,6 +148,24 @@ impl<T: ?Sized> NonNull<T> {\n     /// The resulting lifetime is bound to self so this behaves \"as if\"\n     /// it were actually an instance of T that is getting borrowed. If a longer\n     /// (unbound) lifetime is needed, use `&mut *my_ptr.as_ptr()`.\n+    ///\n+    /// # Safety\n+    ///\n+    /// When calling this method, you have to ensure that all of the following is true:\n+    /// - `self` is properly aligned\n+    /// - `self` must point to an initialized instance of T; in particular, the pointer must be\n+    ///   \"dereferenceable\" in the sense defined [here].\n+    ///\n+    /// This applies even if the result of this method is unused!\n+    /// (The part about being initialized is not yet fully decided, but until\n+    /// it is the only safe approach is to ensure that they are indeed initialized.)\n+    ///\n+    /// Additionally, the lifetime of `self` does not necessarily reflect the actual\n+    /// lifetime of the data. *You* must enforce Rust's aliasing rules. In particular,\n+    /// for the duration of this lifetime, the memory this pointer points to must not\n+    /// get accessed (read or written) through any other pointer.\n+    ///\n+    /// [here]: crate::ptr#safety\n     #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n     #[inline]\n     pub unsafe fn as_mut(&mut self) -> &mut T {\n@@ -224,6 +260,24 @@ impl<T> NonNull<[T]> {\n         unsafe { NonNull::new_unchecked(self.as_ptr().as_mut_ptr()) }\n     }\n \n+    /// Returns a raw pointer to the slice's buffer.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```rust\n+    /// #![feature(slice_ptr_get, nonnull_slice_from_raw_parts)]\n+    /// use std::ptr::NonNull;\n+    ///\n+    /// let slice: NonNull<[i8]> = NonNull::slice_from_raw_parts(NonNull::dangling(), 3);\n+    /// assert_eq!(slice.as_mut_ptr(), 1 as *mut i8);\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"slice_ptr_get\", issue = \"74265\")]\n+    #[rustc_const_unstable(feature = \"slice_ptr_get\", issue = \"74265\")]\n+    pub const fn as_mut_ptr(self) -> *mut T {\n+        self.as_non_null_ptr().as_ptr()\n+    }\n+\n     /// Returns a raw pointer to an element or subslice, without doing bounds\n     /// checking.\n     ///"}, {"sha": "ff343625a19ed75932bf944f9e9cd57f394aa1e1", "filename": "library/std/src/keyword_docs.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/dcf107728c4e545b9fee6b0e6a929837429275cf/library%2Fstd%2Fsrc%2Fkeyword_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcf107728c4e545b9fee6b0e6a929837429275cf/library%2Fstd%2Fsrc%2Fkeyword_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fkeyword_docs.rs?ref=dcf107728c4e545b9fee6b0e6a929837429275cf", "patch": "@@ -943,8 +943,7 @@ mod mod_keyword {}\n /// Capture a [closure]'s environment by value.\n ///\n /// `move` converts any variables captured by reference or mutable reference\n-/// to owned by value variables. The three [`Fn` trait]'s mirror the ways to capture\n-/// variables, when `move` is used, the closures is represented by the `FnOnce` trait.\n+/// to owned by value variables.\n ///\n /// ```rust\n /// let capture = \"hello\";\n@@ -953,6 +952,23 @@ mod mod_keyword {}\n /// };\n /// ```\n ///\n+/// Note: `move` closures may still implement [`Fn`] or [`FnMut`], even though\n+/// they capture variables by `move`. This is because the traits implemented by\n+/// a closure type are determined by *what* the closure does with captured\n+/// values, not *how* it captures them:\n+///\n+/// ```rust\n+/// fn create_fn() -> impl Fn() {\n+///     let text = \"Fn\".to_owned();\n+///\n+///     move || println!(\"This is a: {}\", text)\n+/// }\n+///\n+///     let fn_plain = create_fn();\n+///\n+///     fn_plain();\n+/// ```\n+///\n /// `move` is often used when [threads] are involved.\n ///\n /// ```rust"}, {"sha": "3ce48ce8799de4ab7bfa1adbe17068bf6a07c15c", "filename": "library/std/src/path.rs", "status": "modified", "additions": 19, "deletions": 11, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/dcf107728c4e545b9fee6b0e6a929837429275cf/library%2Fstd%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcf107728c4e545b9fee6b0e6a929837429275cf/library%2Fstd%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpath.rs?ref=dcf107728c4e545b9fee6b0e6a929837429275cf", "patch": "@@ -1232,10 +1232,10 @@ impl PathBuf {\n     /// ```\n     /// use std::path::{Path, PathBuf};\n     ///\n-    /// let mut p = PathBuf::from(\"/test/test.rs\");\n+    /// let mut p = PathBuf::from(\"/spirited/away.rs\");\n     ///\n     /// p.pop();\n-    /// assert_eq!(Path::new(\"/test\"), p);\n+    /// assert_eq!(Path::new(\"/spirited\"), p);\n     /// p.pop();\n     /// assert_eq!(Path::new(\"/\"), p);\n     /// ```\n@@ -1992,6 +1992,13 @@ impl Path {\n     /// assert_eq!(ancestors.next(), Some(Path::new(\"/foo\")));\n     /// assert_eq!(ancestors.next(), Some(Path::new(\"/\")));\n     /// assert_eq!(ancestors.next(), None);\n+    ///\n+    /// let mut ancestors = Path::new(\"../foo/bar\").ancestors();\n+    /// assert_eq!(ancestors.next(), Some(Path::new(\"../foo/bar\")));\n+    /// assert_eq!(ancestors.next(), Some(Path::new(\"../foo\")));\n+    /// assert_eq!(ancestors.next(), Some(Path::new(\"..\")));\n+    /// assert_eq!(ancestors.next(), Some(Path::new(\"\")));\n+    /// assert_eq!(ancestors.next(), None);\n     /// ```\n     ///\n     /// [`None`]: ../../std/option/enum.Option.html#variant.None\n@@ -2053,8 +2060,9 @@ impl Path {\n     /// assert_eq!(path.strip_prefix(\"/test/\"), Ok(Path::new(\"haha/foo.txt\")));\n     /// assert_eq!(path.strip_prefix(\"/test/haha/foo.txt\"), Ok(Path::new(\"\")));\n     /// assert_eq!(path.strip_prefix(\"/test/haha/foo.txt/\"), Ok(Path::new(\"\")));\n-    /// assert_eq!(path.strip_prefix(\"test\").is_ok(), false);\n-    /// assert_eq!(path.strip_prefix(\"/haha\").is_ok(), false);\n+    ///\n+    /// assert!(path.strip_prefix(\"test\").is_err());\n+    /// assert!(path.strip_prefix(\"/haha\").is_err());\n     ///\n     /// let prefix = PathBuf::from(\"/test/\");\n     /// assert_eq!(path.strip_prefix(prefix), Ok(Path::new(\"haha/foo.txt\")));\n@@ -2140,9 +2148,8 @@ impl Path {\n     /// ```\n     /// use std::path::Path;\n     ///\n-    /// let path = Path::new(\"foo.rs\");\n-    ///\n-    /// assert_eq!(\"foo\", path.file_stem().unwrap());\n+    /// assert_eq!(\"foo\", Path::new(\"foo.rs\").file_stem().unwrap());\n+    /// assert_eq!(\"foo.tar\", Path::new(\"foo.tar.gz\").file_stem().unwrap());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn file_stem(&self) -> Option<&OsStr> {\n@@ -2166,9 +2173,8 @@ impl Path {\n     /// ```\n     /// use std::path::Path;\n     ///\n-    /// let path = Path::new(\"foo.rs\");\n-    ///\n-    /// assert_eq!(\"rs\", path.extension().unwrap());\n+    /// assert_eq!(\"rs\", Path::new(\"foo.rs\").extension().unwrap());\n+    /// assert_eq!(\"gz\", Path::new(\"foo.tar.gz\").extension().unwrap());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn extension(&self) -> Option<&OsStr> {\n@@ -2247,6 +2253,8 @@ impl Path {\n     ///\n     /// let path = Path::new(\"foo.tar.gz\");\n     /// assert_eq!(path.with_extension(\"\"), PathBuf::from(\"foo.tar\"));\n+    /// assert_eq!(path.with_extension(\"xz\"), PathBuf::from(\"foo.tar.xz\"));\n+    /// assert_eq!(path.with_extension(\"\").with_extension(\"txt\"), PathBuf::from(\"foo.txt\"));\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn with_extension<S: AsRef<OsStr>>(&self, extension: S) -> PathBuf {\n@@ -2473,7 +2481,7 @@ impl Path {\n     ///\n     /// ```no_run\n     /// use std::path::Path;\n-    /// assert_eq!(Path::new(\"does_not_exist.txt\").exists(), false);\n+    /// assert!(!Path::new(\"does_not_exist.txt\").exists());\n     /// ```\n     ///\n     /// # See Also"}, {"sha": "8eaf07e52d69a228c945b4bb537993866849c3a2", "filename": "library/std/src/sys/hermit/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dcf107728c4e545b9fee6b0e6a929837429275cf/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcf107728c4e545b9fee6b0e6a929837429275cf/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fmod.rs?ref=dcf107728c4e545b9fee6b0e6a929837429275cf", "patch": "@@ -106,7 +106,7 @@ pub unsafe extern \"C\" fn runtime_entry(\n     argv: *const *const c_char,\n     env: *const *const c_char,\n ) -> ! {\n-    use crate::sys::hermit::fast_thread_local::run_dtors;\n+    use crate::sys::hermit::thread_local_dtor::run_dtors;\n     extern \"C\" {\n         fn main(argc: isize, argv: *const *const c_char) -> i32;\n     }"}, {"sha": "7bd71e120de40a02f7cbbc96a3ccc64b8e37cf8f", "filename": "library/std/src/sys/hermit/thread.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dcf107728c4e545b9fee6b0e6a929837429275cf/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcf107728c4e545b9fee6b0e6a929837429275cf/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fthread.rs?ref=dcf107728c4e545b9fee6b0e6a929837429275cf", "patch": "@@ -4,7 +4,7 @@ use crate::ffi::CStr;\n use crate::io;\n use crate::mem;\n use crate::sys::hermit::abi;\n-use crate::sys::hermit::fast_thread_local::run_dtors;\n+use crate::sys::hermit::thread_local_dtor::run_dtors;\n use crate::time::Duration;\n \n pub type Tid = abi::Tid;"}, {"sha": "ddd245b1a2b1b7ea6f1ab08a8a459ed7795a2e98", "filename": "src/librustc_error_codes/error_codes/E0271.md", "status": "modified", "additions": 13, "deletions": 30, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/dcf107728c4e545b9fee6b0e6a929837429275cf/src%2Flibrustc_error_codes%2Ferror_codes%2FE0271.md", "raw_url": "https://github.com/rust-lang/rust/raw/dcf107728c4e545b9fee6b0e6a929837429275cf/src%2Flibrustc_error_codes%2Ferror_codes%2FE0271.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0271.md?ref=dcf107728c4e545b9fee6b0e6a929837429275cf", "patch": "@@ -5,25 +5,6 @@ Erroneous code example:\n ```compile_fail,E0271\n trait Trait { type AssociatedType; }\n \n-fn foo<T>(t: T) where T: Trait<AssociatedType=u32> {\n-    println!(\"in foo\");\n-}\n-\n-impl Trait for i8 { type AssociatedType = &'static str; }\n-\n-foo(3_i8);\n-```\n-\n-This is because of a type mismatch between the associated type of some\n-trait (e.g., `T::Bar`, where `T` implements `trait Quux { type Bar; }`)\n-and another type `U` that is required to be equal to `T::Bar`, but is not.\n-Examples follow.\n-\n-Here is that same example again, with some explanatory comments:\n-\n-```compile_fail,E0271\n-trait Trait { type AssociatedType; }\n-\n fn foo<T>(t: T) where T: Trait<AssociatedType=u32> {\n //                    ~~~~~~~~ ~~~~~~~~~~~~~~~~~~\n //                        |            |\n@@ -56,11 +37,9 @@ foo(3_i8);\n // therefore the type-checker complains with this error code.\n ```\n \n-To avoid those issues, you have to make the types match correctly.\n-So we can fix the previous examples like this:\n-\n+The issue can be resolved by changing the associated type:\n+1) in the `foo` implementation:\n ```\n-// Basic Example:\n trait Trait { type AssociatedType; }\n \n fn foo<T>(t: T) where T: Trait<AssociatedType = &'static str> {\n@@ -70,13 +49,17 @@ fn foo<T>(t: T) where T: Trait<AssociatedType = &'static str> {\n impl Trait for i8 { type AssociatedType = &'static str; }\n \n foo(3_i8);\n+```\n \n-// For-Loop Example:\n-let vs = vec![1, 2, 3, 4];\n-for v in &vs {\n-    match v {\n-        &1 => {}\n-        _ => {}\n-    }\n+2) in the `Trait` implementation for `i8`:\n+```\n+trait Trait { type AssociatedType; }\n+\n+fn foo<T>(t: T) where T: Trait<AssociatedType = u32> {\n+    println!(\"in foo\");\n }\n+\n+impl Trait for i8 { type AssociatedType = u32; }\n+\n+foo(3_i8);\n ```"}, {"sha": "dc3ffdfddd9de772a5317fca6857ccab7e52a483", "filename": "src/librustc_error_codes/error_codes/E0502.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dcf107728c4e545b9fee6b0e6a929837429275cf/src%2Flibrustc_error_codes%2Ferror_codes%2FE0502.md", "raw_url": "https://github.com/rust-lang/rust/raw/dcf107728c4e545b9fee6b0e6a929837429275cf/src%2Flibrustc_error_codes%2Ferror_codes%2FE0502.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0502.md?ref=dcf107728c4e545b9fee6b0e6a929837429275cf", "patch": "@@ -5,7 +5,7 @@ Erroneous code example:\n ```compile_fail,E0502\n fn bar(x: &mut i32) {}\n fn foo(a: &mut i32) {\n-    let ref y = a; // a is borrowed as immutable.\n+    let y = &a; // a is borrowed as immutable.\n     bar(a); // error: cannot borrow `*a` as mutable because `a` is also borrowed\n             //        as immutable\n     println!(\"{}\", y);\n@@ -19,7 +19,7 @@ variable before trying to access it mutably:\n fn bar(x: &mut i32) {}\n fn foo(a: &mut i32) {\n     bar(a);\n-    let ref y = a; // ok!\n+    let y = &a; // ok!\n     println!(\"{}\", y);\n }\n ```"}, {"sha": "905e852f8d579e60e9984aa12fea4e42adb1ca81", "filename": "src/librustc_error_codes/error_codes/E0750.md", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/dcf107728c4e545b9fee6b0e6a929837429275cf/src%2Flibrustc_error_codes%2Ferror_codes%2FE0750.md", "raw_url": "https://github.com/rust-lang/rust/raw/dcf107728c4e545b9fee6b0e6a929837429275cf/src%2Flibrustc_error_codes%2Ferror_codes%2FE0750.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0750.md?ref=dcf107728c4e545b9fee6b0e6a929837429275cf", "patch": "@@ -1,4 +1,18 @@\n-Negative impls cannot be default impls. A default impl supplies\n-default values for the items within to be used by other impls, whereas\n-a negative impl declares that there are no other impls. These don't\n-make sense to combine.\n+A negative impl was made default impl.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0750\n+# #![feature(negative_impls)]\n+# #![feature(specialization)]\n+trait MyTrait {\n+    type Foo;\n+}\n+\n+default impl !MyTrait for u32 {} // error!\n+# fn main() {}\n+```\n+\n+Negative impls cannot be default impls. A default impl supplies default values\n+for the items within to be used by other impls, whereas a negative impl declares\n+that there are no other impls. Combining it does not make sense."}, {"sha": "31aba8aba2515696945d70773b53292fb9220188", "filename": "src/librustc_feature/active.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dcf107728c4e545b9fee6b0e6a929837429275cf/src%2Flibrustc_feature%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcf107728c4e545b9fee6b0e6a929837429275cf/src%2Flibrustc_feature%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2Factive.rs?ref=dcf107728c4e545b9fee6b0e6a929837429275cf", "patch": "@@ -580,7 +580,7 @@ declare_features! (\n     (active, const_fn_transmute, \"1.46.0\", Some(53605), None),\n \n     /// The smallest useful subset of `const_generics`.\n-    (active, min_const_generics, \"1.46.0\", Some(74878), None),\n+    (active, min_const_generics, \"1.47.0\", Some(74878), None),\n \n     // -------------------------------------------------------------------------\n     // feature-group-end: actual feature gates"}, {"sha": "9c36d853ef78dc94728bd8a7852f1329fb20a407", "filename": "src/tools/tidy/src/error_codes_check.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dcf107728c4e545b9fee6b0e6a929837429275cf/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcf107728c4e545b9fee6b0e6a929837429275cf/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes_check.rs?ref=dcf107728c4e545b9fee6b0e6a929837429275cf", "patch": "@@ -16,8 +16,7 @@ const EXEMPTED_FROM_TEST: &[&str] = &[\n ];\n \n // Some error codes don't have any tests apparently...\n-const IGNORE_EXPLANATION_CHECK: &[&str] =\n-    &[\"E0570\", \"E0601\", \"E0602\", \"E0639\", \"E0729\", \"E0749\", \"E0750\"];\n+const IGNORE_EXPLANATION_CHECK: &[&str] = &[\"E0570\", \"E0601\", \"E0602\", \"E0639\", \"E0729\", \"E0749\"];\n \n fn check_error_code_explanation(\n     f: &str,"}]}