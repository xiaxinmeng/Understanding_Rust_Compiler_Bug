{"sha": "2a51e579f5ce78c490f0ed584e83cb376a634e9e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhNTFlNTc5ZjVjZTc4YzQ5MGYwZWQ1ODRlODNjYjM3NmE2MzRlOWU=", "commit": {"author": {"name": "The8472", "email": "git@infinite-source.de", "date": "2019-12-20T19:28:10Z"}, "committer": {"name": "The8472", "email": "git@infinite-source.de", "date": "2020-09-03T18:59:24Z"}, "message": "avoid exposing that binary heap's IntoIter is backed by vec::IntoIter, use a private trait instead", "tree": {"sha": "04048c767aa72fa2986b49f4997dfe6bfd636b56", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/04048c767aa72fa2986b49f4997dfe6bfd636b56"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a51e579f5ce78c490f0ed584e83cb376a634e9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a51e579f5ce78c490f0ed584e83cb376a634e9e", "html_url": "https://github.com/rust-lang/rust/commit/2a51e579f5ce78c490f0ed584e83cb376a634e9e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a51e579f5ce78c490f0ed584e83cb376a634e9e/comments", "author": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "committer": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c731648e77a0986b435b82177c8b3ffcd0714c9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/c731648e77a0986b435b82177c8b3ffcd0714c9a", "html_url": "https://github.com/rust-lang/rust/commit/c731648e77a0986b435b82177c8b3ffcd0714c9a"}], "stats": {"total": 35, "additions": 26, "deletions": 9}, "files": [{"sha": "d133204d66c5c296d9145b83a3217db62217c6d2", "filename": "library/alloc/src/collections/binary_heap.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2a51e579f5ce78c490f0ed584e83cb376a634e9e/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a51e579f5ce78c490f0ed584e83cb376a634e9e/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs?ref=2a51e579f5ce78c490f0ed584e83cb376a634e9e", "patch": "@@ -151,7 +151,7 @@ use core::ops::{Deref, DerefMut};\n use core::ptr;\n \n use crate::slice;\n-use crate::vec::{self, Vec};\n+use crate::vec::{self, Vec, AsIntoIter};\n \n use super::SpecExtend;\n \n@@ -1175,17 +1175,23 @@ impl<T> FusedIterator for IntoIter<T> {}\n \n #[unstable(issue = \"0\", feature = \"inplace_iteration\")]\n unsafe impl<T> SourceIter for IntoIter<T> {\n-    type Source = impl Iterator<Item = T>;\n+    type Source = IntoIter<T>;\n \n     #[inline]\n     fn as_inner(&mut self) -> &mut Self::Source {\n-        &mut self.iter\n+        self\n     }\n }\n \n #[unstable(issue = \"0\", feature = \"inplace_iteration\")]\n unsafe impl<I> InPlaceIterable for IntoIter<I> {}\n \n+impl<I> AsIntoIter<I> for IntoIter<I> {\n+    fn as_into_iter(&mut self) -> &mut vec::IntoIter<I> {\n+        &mut self.iter\n+    }\n+}\n+\n #[unstable(feature = \"binary_heap_into_iter_sorted\", issue = \"59278\")]\n #[derive(Clone, Debug)]\n pub struct IntoIterSorted<T> {"}, {"sha": "5cbd9d380b0d9afe2a021f44656c1ce8b0267d9e", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a51e579f5ce78c490f0ed584e83cb376a634e9e/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a51e579f5ce78c490f0ed584e83cb376a634e9e/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=2a51e579f5ce78c490f0ed584e83cb376a634e9e", "patch": "@@ -107,7 +107,7 @@\n #![feature(map_first_last)]\n #![feature(map_into_keys_values)]\n #![feature(negative_impls)]\n-#![cfg_attr(bootstrap, feature(never_type))]\n+#![feature(never_type)]\n #![feature(new_uninit)]\n #![feature(nll)]\n #![feature(nonnull_slice_from_raw_parts)]"}, {"sha": "8cca3d904ac61ccef2ae3f76578f399b2fe67ea3", "filename": "library/alloc/src/vec.rs", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2a51e579f5ce78c490f0ed584e83cb376a634e9e/library%2Falloc%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a51e579f5ce78c490f0ed584e83cb376a634e9e/library%2Falloc%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec.rs?ref=2a51e579f5ce78c490f0ed584e83cb376a634e9e", "patch": "@@ -2221,7 +2221,7 @@ impl<T> SpecFrom<T, IntoIter<T>> for Vec<T> {\n // T can be split into IN and OUT which only need to have the same size and alignment\n impl<T, I> SpecFrom<T, I> for Vec<T>\n where\n-    I: Iterator<Item = T> + InPlaceIterable + SourceIter<Source = IntoIter<T>>,\n+    I: Iterator<Item = T> + InPlaceIterable + SourceIter<Source: AsIntoIter<T>>,\n {\n     default fn from_iter(mut iterator: I) -> Self {\n         // This specialization only makes sense if we're juggling real allocations.\n@@ -2230,8 +2230,8 @@ where\n             return SpecFromNested::from_iter(iterator);\n         }\n \n-        let src_buf = iterator.as_inner().buf.as_ptr();\n-        let src_end = iterator.as_inner().end;\n+        let src_buf = iterator.as_inner().as_into_iter().buf.as_ptr();\n+        let src_end = iterator.as_inner().as_into_iter().end;\n         let dst = src_buf;\n \n         let dst = if mem::needs_drop::<T>() {\n@@ -2273,14 +2273,14 @@ where\n                 .unwrap()\n         };\n \n-        let src = iterator.as_inner();\n+        let src = iterator.as_inner().as_into_iter();\n         // check if SourceIter and InPlaceIterable contracts were upheld.\n         // caveat: if they weren't we may not even make it to this point\n         debug_assert_eq!(src_buf, src.buf.as_ptr());\n         debug_assert!(dst as *const _ <= src.ptr, \"InPlaceIterable contract violation\");\n \n         if mem::needs_drop::<T>() {\n-            // drop tail if iterator was only partially exhaused\n+            // drop tail if iterator was only partially exhausted\n             unsafe {\n                 ptr::drop_in_place(src.as_mut_slice());\n             }\n@@ -2998,6 +2998,17 @@ unsafe impl<T> SourceIter for IntoIter<T> {\n     }\n }\n \n+// internal helper trait for in-place iteration specialization.\n+pub(crate) trait AsIntoIter<T> {\n+    fn as_into_iter(&mut self) -> &mut IntoIter<T>;\n+}\n+\n+impl<T> AsIntoIter<T> for IntoIter<T> {\n+    fn as_into_iter(&mut self) -> &mut IntoIter<T> {\n+        self\n+    }\n+}\n+\n /// A draining iterator for `Vec<T>`.\n ///\n /// This `struct` is created by [`Vec::drain`]."}]}