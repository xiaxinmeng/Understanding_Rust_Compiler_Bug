{"sha": "f7448a77e4d9ddb2e0b52905a6a89cab86ea35f6", "node_id": "C_kwDOAAsO6NoAKGY3NDQ4YTc3ZTRkOWRkYjJlMGI1MjkwNWE2YTg5Y2FiODZlYTM1ZjY", "commit": {"author": {"name": "Danilo Bargen", "email": "mail@dbrgn.ch", "date": "2022-02-06T01:20:53Z"}, "committer": {"name": "Danilo Bargen", "email": "mail@dbrgn.ch", "date": "2022-02-17T20:19:42Z"}, "message": "core: Implement trim functions on byte slices\n\nCo-authored-by: Jubilee Young <workingjubilee@gmail.com>", "tree": {"sha": "f3aae9afc22e0762928586c12e792440a1a3c263", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f3aae9afc22e0762928586c12e792440a1a3c263"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7448a77e4d9ddb2e0b52905a6a89cab86ea35f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7448a77e4d9ddb2e0b52905a6a89cab86ea35f6", "html_url": "https://github.com/rust-lang/rust/commit/f7448a77e4d9ddb2e0b52905a6a89cab86ea35f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7448a77e4d9ddb2e0b52905a6a89cab86ea35f6/comments", "author": {"login": "dbrgn", "id": 105168, "node_id": "MDQ6VXNlcjEwNTE2OA==", "avatar_url": "https://avatars.githubusercontent.com/u/105168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dbrgn", "html_url": "https://github.com/dbrgn", "followers_url": "https://api.github.com/users/dbrgn/followers", "following_url": "https://api.github.com/users/dbrgn/following{/other_user}", "gists_url": "https://api.github.com/users/dbrgn/gists{/gist_id}", "starred_url": "https://api.github.com/users/dbrgn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dbrgn/subscriptions", "organizations_url": "https://api.github.com/users/dbrgn/orgs", "repos_url": "https://api.github.com/users/dbrgn/repos", "events_url": "https://api.github.com/users/dbrgn/events{/privacy}", "received_events_url": "https://api.github.com/users/dbrgn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dbrgn", "id": 105168, "node_id": "MDQ6VXNlcjEwNTE2OA==", "avatar_url": "https://avatars.githubusercontent.com/u/105168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dbrgn", "html_url": "https://github.com/dbrgn", "followers_url": "https://api.github.com/users/dbrgn/followers", "following_url": "https://api.github.com/users/dbrgn/following{/other_user}", "gists_url": "https://api.github.com/users/dbrgn/gists{/gist_id}", "starred_url": "https://api.github.com/users/dbrgn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dbrgn/subscriptions", "organizations_url": "https://api.github.com/users/dbrgn/orgs", "repos_url": "https://api.github.com/users/dbrgn/repos", "events_url": "https://api.github.com/users/dbrgn/events{/privacy}", "received_events_url": "https://api.github.com/users/dbrgn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88fb06a1f331926bccb448acdb52966fd1ec8a92", "url": "https://api.github.com/repos/rust-lang/rust/commits/88fb06a1f331926bccb448acdb52966fd1ec8a92", "html_url": "https://github.com/rust-lang/rust/commit/88fb06a1f331926bccb448acdb52966fd1ec8a92"}], "stats": {"total": 78, "additions": 78, "deletions": 0}, "files": [{"sha": "a4ad85c9202bc061fa36d65059ea96785a4d84c7", "filename": "library/core/src/slice/ascii.rs", "status": "modified", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/f7448a77e4d9ddb2e0b52905a6a89cab86ea35f6/library%2Fcore%2Fsrc%2Fslice%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7448a77e4d9ddb2e0b52905a6a89cab86ea35f6/library%2Fcore%2Fsrc%2Fslice%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fascii.rs?ref=f7448a77e4d9ddb2e0b52905a6a89cab86ea35f6", "patch": "@@ -80,6 +80,84 @@ impl [u8] {\n     pub fn escape_ascii(&self) -> EscapeAscii<'_> {\n         EscapeAscii { inner: self.iter().flat_map(EscapeByte) }\n     }\n+\n+    /// Returns a byte slice with leading ASCII whitespace bytes removed.\n+    ///\n+    /// 'Whitespace' refers to the definition used by\n+    /// `u8::is_ascii_whitespace`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(byte_slice_trim_ascii)]\n+    ///\n+    /// assert_eq!(b\" \\t hello world\\n\".trim_ascii_start(), b\"hello world\\n\");\n+    /// assert_eq!(b\"  \".trim_ascii_start(), b\"\");\n+    /// assert_eq!(b\"\".trim_ascii_start(), b\"\");\n+    /// ```\n+    #[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]\n+    pub const fn trim_ascii_start(&self) -> &[u8] {\n+        let mut bytes = self;\n+        // Note: A pattern matching based approach (instead of indexing) allows\n+        // making the function const.\n+        while let [first, rest @ ..] = bytes {\n+            if first.is_ascii_whitespace() {\n+                bytes = rest;\n+            } else {\n+                break;\n+            }\n+        }\n+        bytes\n+    }\n+\n+    /// Returns a byte slice with trailing ASCII whitespace bytes removed.\n+    ///\n+    /// 'Whitespace' refers to the definition used by\n+    /// `u8::is_ascii_whitespace`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(byte_slice_trim_ascii)]\n+    ///\n+    /// assert_eq!(b\"\\r hello world\\n \".trim_ascii_end(), b\"\\r hello world\");\n+    /// assert_eq!(b\"  \".trim_ascii_end(), b\"\");\n+    /// assert_eq!(b\"\".trim_ascii_end(), b\"\");\n+    /// ```\n+    #[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]\n+    pub const fn trim_ascii_end(&self) -> &[u8] {\n+        let mut bytes = self;\n+        // Note: A pattern matching based approach (instead of indexing) allows\n+        // making the function const.\n+        while let [rest @ .., last] = bytes {\n+            if last.is_ascii_whitespace() {\n+                bytes = rest;\n+            } else {\n+                break;\n+            }\n+        }\n+        bytes\n+    }\n+\n+    /// Returns a byte slice with leading and trailing ASCII whitespace bytes\n+    /// removed.\n+    ///\n+    /// 'Whitespace' refers to the definition used by\n+    /// `u8::is_ascii_whitespace`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(byte_slice_trim_ascii)]\n+    ///\n+    /// assert_eq!(b\"\\r hello world\\n \".trim_ascii(), b\"hello world\");\n+    /// assert_eq!(b\"  \".trim_ascii(), b\"\");\n+    /// assert_eq!(b\"\".trim_ascii(), b\"\");\n+    /// ```\n+    #[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]\n+    pub const fn trim_ascii(&self) -> &[u8] {\n+        self.trim_ascii_start().trim_ascii_end()\n+    }\n }\n \n impl_fn_for_zst! {"}]}