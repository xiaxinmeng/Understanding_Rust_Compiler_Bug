{"sha": "8de4b138455add55bde6de5553a933a2ab79b71f", "node_id": "C_kwDOAAsO6NoAKDhkZTRiMTM4NDU1YWRkNTViZGU2ZGU1NTUzYTkzM2EyYWI3OWI3MWY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-30T04:18:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-30T04:18:15Z"}, "message": "Auto merge of #104679 - dvdhrm:rw/dso, r=petrochenkov\n\ncodegen-llvm: never combine DSOLocal and DllImport\n\nPrevent DllImport from being attached to DSOLocal definitions in the LLVM IR. The combination makes no sense, since definitions local to the compilation unit will never be imported from external objects.\n\nAdditionally, LLVM will refuse the IR if it encounters the combination (introduced in [1]):\n\n```\n  if (GV.hasDLLImportStorageClass())\n    Assert(!GV.isDSOLocal(),\n           \"GlobalValue with DLLImport Storage is dso_local!\", &GV);\n```\n\nRight now, codegen-llvm will only apply DllImport to constants and rely on call-stubs for functions. Hence, we simply extend the codegen of constants to skip DllImport for any local definitions.\n\nThis was discovered when switching the EFI targets to the static relocation model [2]. With this fixed, we can start another attempt at this.\n\n[1] https://smlnj-gitlab.cs.uchicago.edu/manticore/llvm/commit/509132b368efed10bbdad825403f45e9cf1d6e38\n[2] https://github.com/rust-lang/rust/issues/101656", "tree": {"sha": "80523ff738c51171ba71e83ede2443e03a0cbce0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/80523ff738c51171ba71e83ede2443e03a0cbce0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8de4b138455add55bde6de5553a933a2ab79b71f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8de4b138455add55bde6de5553a933a2ab79b71f", "html_url": "https://github.com/rust-lang/rust/commit/8de4b138455add55bde6de5553a933a2ab79b71f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8de4b138455add55bde6de5553a933a2ab79b71f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d38a99078cd3c4dadac1ba8b729ea77e8d1d5a82", "url": "https://api.github.com/repos/rust-lang/rust/commits/d38a99078cd3c4dadac1ba8b729ea77e8d1d5a82", "html_url": "https://github.com/rust-lang/rust/commit/d38a99078cd3c4dadac1ba8b729ea77e8d1d5a82"}, {"sha": "7b9e1a95f0ca35bde8af529639dde501a0280425", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b9e1a95f0ca35bde8af529639dde501a0280425", "html_url": "https://github.com/rust-lang/rust/commit/7b9e1a95f0ca35bde8af529639dde501a0280425"}], "stats": {"total": 53, "additions": 47, "deletions": 6}, "files": [{"sha": "3c324359565c1081699b70ea2e432b23322ced98", "filename": "compiler/rustc_codegen_llvm/src/consts.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8de4b138455add55bde6de5553a933a2ab79b71f/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8de4b138455add55bde6de5553a933a2ab79b71f/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs?ref=8de4b138455add55bde6de5553a933a2ab79b71f", "patch": "@@ -295,8 +295,18 @@ impl<'ll> CodegenCx<'ll, '_> {\n             llvm::set_thread_local_mode(g, self.tls_model);\n         }\n \n+        let dso_local = unsafe { self.should_assume_dso_local(g, true) };\n+        if dso_local {\n+            unsafe {\n+                llvm::LLVMRustSetDSOLocal(g, true);\n+            }\n+        }\n+\n         if !def_id.is_local() {\n             let needs_dll_storage_attr = self.use_dll_storage_attrs && !self.tcx.is_foreign_item(def_id) &&\n+                // Local definitions can never be imported, so we must not apply\n+                // the DLLImport annotation.\n+                !dso_local &&\n                 // ThinLTO can't handle this workaround in all cases, so we don't\n                 // emit the attrs. Instead we make them unnecessary by disallowing\n                 // dynamic linking when linker plugin based LTO is enabled.\n@@ -340,12 +350,6 @@ impl<'ll> CodegenCx<'ll, '_> {\n             }\n         }\n \n-        unsafe {\n-            if self.should_assume_dso_local(g, true) {\n-                llvm::LLVMRustSetDSOLocal(g, true);\n-            }\n-        }\n-\n         self.instances.borrow_mut().insert(instance, g);\n         g\n     }"}, {"sha": "edc48351869a6a2e7192d43e99ccca138ec8f681", "filename": "src/test/codegen/auxiliary/extern_decl.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8de4b138455add55bde6de5553a933a2ab79b71f/src%2Ftest%2Fcodegen%2Fauxiliary%2Fextern_decl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8de4b138455add55bde6de5553a933a2ab79b71f/src%2Ftest%2Fcodegen%2Fauxiliary%2Fextern_decl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fauxiliary%2Fextern_decl.rs?ref=8de4b138455add55bde6de5553a933a2ab79b71f", "patch": "@@ -0,0 +1,11 @@\n+// Auxiliary crate that exports a function and static. Both always\n+// evaluate to `71`. We force mutability on the static to prevent\n+// it from being inlined as constant.\n+\n+#![crate_type = \"lib\"]\n+\n+#[no_mangle]\n+pub fn extern_fn() -> u8 { unsafe { extern_static } }\n+\n+#[no_mangle]\n+pub static mut extern_static: u8 = 71;"}, {"sha": "b2afc7deb679aa40a23b4372ba4800f18d4afc2e", "filename": "src/test/codegen/static-relocation-model-msvc.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/8de4b138455add55bde6de5553a933a2ab79b71f/src%2Ftest%2Fcodegen%2Fstatic-relocation-model-msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8de4b138455add55bde6de5553a933a2ab79b71f/src%2Ftest%2Fcodegen%2Fstatic-relocation-model-msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fstatic-relocation-model-msvc.rs?ref=8de4b138455add55bde6de5553a933a2ab79b71f", "patch": "@@ -0,0 +1,26 @@\n+// Verify linkage of external symbols in the static relocation model on MSVC.\n+//\n+// compile-flags: -O -C relocation-model=static\n+// aux-build: extern_decl.rs\n+// only-x86_64-pc-windows-msvc\n+\n+#![crate_type = \"rlib\"]\n+\n+extern crate extern_decl;\n+\n+// The `extern_decl` definitions are imported from a statically linked rust\n+// crate, thus they are expected to be marked `dso_local` without `dllimport`.\n+//\n+// The `access_extern()` symbol is from this compilation unit, thus we expect\n+// it to be marked `dso_local` as well, given the static relocation model.\n+//\n+// CHECK: @extern_static = external dso_local local_unnamed_addr global i8\n+// CHECK: define dso_local i8 @access_extern() {{.*}}\n+// CHECK: declare dso_local i8 @extern_fn() {{.*}}\n+\n+#[no_mangle]\n+pub fn access_extern() -> u8 {\n+    unsafe {\n+        extern_decl::extern_fn() + extern_decl::extern_static\n+    }\n+}"}]}