{"sha": "d21ec9b4efd1da012979b050bc0a0426fe45fcdf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyMWVjOWI0ZWZkMWRhMDEyOTc5YjA1MGJjMGEwNDI2ZmU0NWZjZGY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-08-10T08:53:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-08-10T08:53:22Z"}, "message": "Auto merge of #43582 - ivanbakel:unused_mut_ref, r=arielb1\n\nFixed mutable vars being marked used when they weren't\n\n#### NB : bootstrapping is slow on my machine, even with `keep-stage` - fixes for occurances in the current codebase are <s>in the pipeline</s> done. This PR is being put up for review of the fix of the issue.\n\nFixes #43526, Fixes #30280, Fixes #25049\n\n### Issue\nWhenever the compiler detected a mutable deref being used mutably, it marked an associated value as being used mutably as well. In the case of derefencing local variables which were mutable references, this incorrectly marked the reference itself being used mutably, instead of its contents - with the consequence of making the following code emit no warnings\n```\nfn do_thing<T>(mut arg : &mut T) {\n    ... // don't touch arg - just deref it to access the T\n}\n```\n\n### Fix\nMake dereferences not be counted as a mutable use, but only when they're on borrows on local variables.\n#### Why not on things other than local variables?\n  * Whenever you capture a variable in a closure, it gets turned into a hidden reference - when you use it in the closure, it gets dereferenced. If the closure uses the variable mutably, that is actually a mutable use of the thing being dereffed to, so it has to be counted.\n  * If you deref a mutable `Box` to access the contents mutably, you are using the `Box` mutably - so it has to be counted.", "tree": {"sha": "b33492318dcad1da9a032327304bd1b972d2a947", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b33492318dcad1da9a032327304bd1b972d2a947"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d21ec9b4efd1da012979b050bc0a0426fe45fcdf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d21ec9b4efd1da012979b050bc0a0426fe45fcdf", "html_url": "https://github.com/rust-lang/rust/commit/d21ec9b4efd1da012979b050bc0a0426fe45fcdf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d21ec9b4efd1da012979b050bc0a0426fe45fcdf/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ac5f7d249e29ee48737359e0e6dd9e59701a568", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ac5f7d249e29ee48737359e0e6dd9e59701a568", "html_url": "https://github.com/rust-lang/rust/commit/2ac5f7d249e29ee48737359e0e6dd9e59701a568"}, {"sha": "8f78d453ded152e95d66f113d24287f12c680a15", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f78d453ded152e95d66f113d24287f12c680a15", "html_url": "https://github.com/rust-lang/rust/commit/8f78d453ded152e95d66f113d24287f12c680a15"}], "stats": {"total": 180, "additions": 110, "deletions": 70}, "files": [{"sha": "8cea6c482c33d0a65c7a146f43dfd21fc3098d98", "filename": "src/liballoc/btree/node.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d21ec9b4efd1da012979b050bc0a0426fe45fcdf/src%2Fliballoc%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d21ec9b4efd1da012979b050bc0a0426fe45fcdf/src%2Fliballoc%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fbtree%2Fnode.rs?ref=d21ec9b4efd1da012979b050bc0a0426fe45fcdf", "patch": "@@ -1037,7 +1037,7 @@ impl<'a, K: 'a, V: 'a, NodeType>\n         Handle<NodeRef<marker::Mut<'a>, K, V, NodeType>, marker::KV> {\n \n     pub fn into_kv_mut(self) -> (&'a mut K, &'a mut V) {\n-        let (mut keys, mut vals) = self.node.into_slices_mut();\n+        let (keys, vals) = self.node.into_slices_mut();\n         unsafe {\n             (keys.get_unchecked_mut(self.idx), vals.get_unchecked_mut(self.idx))\n         }\n@@ -1047,7 +1047,7 @@ impl<'a, K: 'a, V: 'a, NodeType>\n impl<'a, K, V, NodeType> Handle<NodeRef<marker::Mut<'a>, K, V, NodeType>, marker::KV> {\n     pub fn kv_mut(&mut self) -> (&mut K, &mut V) {\n         unsafe {\n-            let (mut keys, mut vals) = self.node.reborrow_mut().into_slices_mut();\n+            let (keys, vals) = self.node.reborrow_mut().into_slices_mut();\n             (keys.get_unchecked_mut(self.idx), vals.get_unchecked_mut(self.idx))\n         }\n     }"}, {"sha": "160c0ba2ab0e3482f56771f1950a73a3d107bc71", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d21ec9b4efd1da012979b050bc0a0426fe45fcdf/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d21ec9b4efd1da012979b050bc0a0426fe45fcdf/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=d21ec9b4efd1da012979b050bc0a0426fe45fcdf", "patch": "@@ -1751,7 +1751,7 @@ impl<'a, T> IntoIterator for &'a mut Vec<T> {\n     type Item = &'a mut T;\n     type IntoIter = slice::IterMut<'a, T>;\n \n-    fn into_iter(mut self) -> slice::IterMut<'a, T> {\n+    fn into_iter(self) -> slice::IterMut<'a, T> {\n         self.iter_mut()\n     }\n }"}, {"sha": "2068c2c9c5fb56268f5ece03cd97bc06d1022dc6", "filename": "src/liballoc/vec_deque.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d21ec9b4efd1da012979b050bc0a0426fe45fcdf/src%2Fliballoc%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d21ec9b4efd1da012979b050bc0a0426fe45fcdf/src%2Fliballoc%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec_deque.rs?ref=d21ec9b4efd1da012979b050bc0a0426fe45fcdf", "patch": "@@ -2394,7 +2394,7 @@ impl<'a, T> IntoIterator for &'a mut VecDeque<T> {\n     type Item = &'a mut T;\n     type IntoIter = IterMut<'a, T>;\n \n-    fn into_iter(mut self) -> IterMut<'a, T> {\n+    fn into_iter(self) -> IterMut<'a, T> {\n         self.iter_mut()\n     }\n }\n@@ -2558,7 +2558,7 @@ impl<'a, T> Place<T> for PlaceBack<'a, T> {\n impl<'a, T> InPlace<T> for PlaceBack<'a, T> {\n     type Owner = &'a mut T;\n \n-    unsafe fn finalize(mut self) -> &'a mut T {\n+    unsafe fn finalize(self) -> &'a mut T {\n         let head = self.vec_deque.head;\n         self.vec_deque.head = self.vec_deque.wrap_add(head, 1);\n         &mut *(self.vec_deque.ptr().offset(head as isize))\n@@ -2605,7 +2605,7 @@ impl<'a, T> Place<T> for PlaceFront<'a, T> {\n impl<'a, T> InPlace<T> for PlaceFront<'a, T> {\n     type Owner = &'a mut T;\n \n-    unsafe fn finalize(mut self) -> &'a mut T {\n+    unsafe fn finalize(self) -> &'a mut T {\n         self.vec_deque.tail = self.vec_deque.wrap_sub(self.vec_deque.tail, 1);\n         &mut *(self.vec_deque.ptr().offset(self.vec_deque.tail as isize))\n     }"}, {"sha": "c5b3fbca1a6dd492e313c6782cd44b2a2e43fa2c", "filename": "src/libcore/ops/function.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d21ec9b4efd1da012979b050bc0a0426fe45fcdf/src%2Flibcore%2Fops%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d21ec9b4efd1da012979b050bc0a0426fe45fcdf/src%2Flibcore%2Fops%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Ffunction.rs?ref=d21ec9b4efd1da012979b050bc0a0426fe45fcdf", "patch": "@@ -187,7 +187,7 @@ mod impls {\n         where F : FnMut<A>\n     {\n         type Output = F::Output;\n-        extern \"rust-call\" fn call_once(mut self, args: A) -> F::Output {\n+        extern \"rust-call\" fn call_once(self, args: A) -> F::Output {\n             (*self).call_mut(args)\n         }\n     }"}, {"sha": "aecf2ee9325eee9dde0a13cef3d65e293610c147", "filename": "src/libcore/option.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d21ec9b4efd1da012979b050bc0a0426fe45fcdf/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d21ec9b4efd1da012979b050bc0a0426fe45fcdf/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=d21ec9b4efd1da012979b050bc0a0426fe45fcdf", "patch": "@@ -872,7 +872,7 @@ impl<'a, T> IntoIterator for &'a mut Option<T> {\n     type Item = &'a mut T;\n     type IntoIter = IterMut<'a, T>;\n \n-    fn into_iter(mut self) -> IterMut<'a, T> {\n+    fn into_iter(self) -> IterMut<'a, T> {\n         self.iter_mut()\n     }\n }"}, {"sha": "20cfb02afcc7707149236dd940066532ccc151c2", "filename": "src/libcore/result.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d21ec9b4efd1da012979b050bc0a0426fe45fcdf/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d21ec9b4efd1da012979b050bc0a0426fe45fcdf/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=d21ec9b4efd1da012979b050bc0a0426fe45fcdf", "patch": "@@ -909,7 +909,7 @@ impl<'a, T, E> IntoIterator for &'a mut Result<T, E> {\n     type Item = &'a mut T;\n     type IntoIter = IterMut<'a, T>;\n \n-    fn into_iter(mut self) -> IterMut<'a, T> {\n+    fn into_iter(self) -> IterMut<'a, T> {\n         self.iter_mut()\n     }\n }"}, {"sha": "8c31d2e83d3524f797c1417cd27c0db7587028fb", "filename": "src/libcore/tests/slice.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d21ec9b4efd1da012979b050bc0a0426fe45fcdf/src%2Flibcore%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d21ec9b4efd1da012979b050bc0a0426fe45fcdf/src%2Flibcore%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fslice.rs?ref=d21ec9b4efd1da012979b050bc0a0426fe45fcdf", "patch": "@@ -105,27 +105,27 @@ fn test_chunks_last() {\n \n #[test]\n fn test_chunks_mut_count() {\n-    let mut v: &mut [i32] = &mut [0, 1, 2, 3, 4, 5];\n+    let v: &mut [i32] = &mut [0, 1, 2, 3, 4, 5];\n     let c = v.chunks_mut(3);\n     assert_eq!(c.count(), 2);\n \n-    let mut v2: &mut [i32] = &mut [0, 1, 2, 3, 4];\n+    let v2: &mut [i32] = &mut [0, 1, 2, 3, 4];\n     let c2 = v2.chunks_mut(2);\n     assert_eq!(c2.count(), 3);\n \n-    let mut v3: &mut [i32] = &mut [];\n+    let v3: &mut [i32] = &mut [];\n     let c3 = v3.chunks_mut(2);\n     assert_eq!(c3.count(), 0);\n }\n \n #[test]\n fn test_chunks_mut_nth() {\n-    let mut v: &mut [i32] = &mut [0, 1, 2, 3, 4, 5];\n+    let v: &mut [i32] = &mut [0, 1, 2, 3, 4, 5];\n     let mut c = v.chunks_mut(2);\n     assert_eq!(c.nth(1).unwrap()[1], 3);\n     assert_eq!(c.next().unwrap()[0], 4);\n \n-    let mut v2: &mut [i32] = &mut [0, 1, 2, 3, 4];\n+    let v2: &mut [i32] = &mut [0, 1, 2, 3, 4];\n     let mut c2 = v2.chunks_mut(3);\n     assert_eq!(c2.nth(1).unwrap()[1], 4);\n     assert_eq!(c2.next(), None);\n@@ -194,7 +194,7 @@ fn get_range() {\n \n #[test]\n fn get_mut_range() {\n-    let mut v: &mut [i32] = &mut [0, 1, 2, 3, 4, 5];\n+    let v: &mut [i32] = &mut [0, 1, 2, 3, 4, 5];\n     assert_eq!(v.get_mut(..), Some(&mut [0, 1, 2, 3, 4, 5][..]));\n     assert_eq!(v.get_mut(..2), Some(&mut [0, 1][..]));\n     assert_eq!(v.get_mut(2..), Some(&mut [2, 3, 4, 5][..]));"}, {"sha": "9f70b4834ddc5d71b0700be42671d9e584a3678f", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d21ec9b4efd1da012979b050bc0a0426fe45fcdf/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d21ec9b4efd1da012979b050bc0a0426fe45fcdf/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=d21ec9b4efd1da012979b050bc0a0426fe45fcdf", "patch": "@@ -415,8 +415,8 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     /// -------- this type is the same as a type argument in the other type, not highlighted\n     /// ```\n     fn highlight_outer(&self,\n-                       mut value: &mut DiagnosticStyledString,\n-                       mut other_value: &mut DiagnosticStyledString,\n+                       value: &mut DiagnosticStyledString,\n+                       other_value: &mut DiagnosticStyledString,\n                        name: String,\n                        sub: &ty::subst::Substs<'tcx>,\n                        pos: usize,"}, {"sha": "d1938197e652965dbf338ac1c233141f36c9e909", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d21ec9b4efd1da012979b050bc0a0426fe45fcdf/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d21ec9b4efd1da012979b050bc0a0426fe45fcdf/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=d21ec9b4efd1da012979b050bc0a0426fe45fcdf", "patch": "@@ -560,7 +560,7 @@ pub fn fully_normalize<'a, 'gcx, 'tcx, T>(infcx: &InferCtxt<'a, 'gcx, 'tcx>,\n {\n     debug!(\"fully_normalize(value={:?})\", value);\n \n-    let mut selcx = &mut SelectionContext::new(infcx);\n+    let selcx = &mut SelectionContext::new(infcx);\n     // FIXME (@jroesch) ISSUE 26721\n     // I'm not sure if this is a bug or not, needs further investigation.\n     // It appears that by reusing the fulfillment_cx here we incur more"}, {"sha": "b365096b23f08f6b6f94b96b523b05518d39fffd", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d21ec9b4efd1da012979b050bc0a0426fe45fcdf/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d21ec9b4efd1da012979b050bc0a0426fe45fcdf/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=d21ec9b4efd1da012979b050bc0a0426fe45fcdf", "patch": "@@ -494,7 +494,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n             never_obligation.predicate = never_obligation.predicate.map_bound(|mut trait_pred| {\n                 // Swap out () with ! so we can check if the trait is impld for !\n                 {\n-                    let mut trait_ref = &mut trait_pred.trait_ref;\n+                    let trait_ref = &mut trait_pred.trait_ref;\n                     let unit_substs = trait_ref.substs;\n                     let mut never_substs = Vec::with_capacity(unit_substs.len());\n                     never_substs.push(From::from(tcx.types.never));"}, {"sha": "900197f3dbd17c0756ebcf3c410e921270924ff0", "filename": "src/librustc/ty/inhabitedness/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d21ec9b4efd1da012979b050bc0a0426fe45fcdf/src%2Flibrustc%2Fty%2Finhabitedness%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d21ec9b4efd1da012979b050bc0a0426fe45fcdf/src%2Flibrustc%2Fty%2Finhabitedness%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finhabitedness%2Fmod.rs?ref=d21ec9b4efd1da012979b050bc0a0426fe45fcdf", "patch": "@@ -171,7 +171,7 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n         match self.sty {\n             TyAdt(def, substs) => {\n                 {\n-                    let mut substs_set = visited.entry(def.did).or_insert(FxHashSet::default());\n+                    let substs_set = visited.entry(def.did).or_insert(FxHashSet::default());\n                     if !substs_set.insert(substs) {\n                         // We are already calculating the inhabitedness of this type.\n                         // The type must contain a reference to itself. Break the\n@@ -193,7 +193,7 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n                     }\n                 }\n                 let ret = def.uninhabited_from(visited, tcx, substs);\n-                let mut substs_set = visited.get_mut(&def.did).unwrap();\n+                let substs_set = visited.get_mut(&def.did).unwrap();\n                 substs_set.remove(substs);\n                 ret\n             },"}, {"sha": "676c3c51ea2a3d3aca2d09ec8599c32e48c1a646", "filename": "src/librustc_allocator/expand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d21ec9b4efd1da012979b050bc0a0426fe45fcdf/src%2Flibrustc_allocator%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d21ec9b4efd1da012979b050bc0a0426fe45fcdf/src%2Flibrustc_allocator%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_allocator%2Fexpand.rs?ref=d21ec9b4efd1da012979b050bc0a0426fe45fcdf", "patch": "@@ -188,7 +188,7 @@ impl<'a> AllocFnFactory<'a> {\n     fn arg_ty(&self,\n               ty: &AllocatorTy,\n               args: &mut Vec<Arg>,\n-              mut ident: &mut FnMut() -> Ident) -> P<Expr> {\n+              ident: &mut FnMut() -> Ident) -> P<Expr> {\n         match *ty {\n             AllocatorTy::Layout => {\n                 let usize = self.cx.path_ident(self.span, Ident::from_str(\"usize\"));\n@@ -263,7 +263,7 @@ impl<'a> AllocFnFactory<'a> {\n     fn ret_ty(&self,\n               ty: &AllocatorTy,\n               args: &mut Vec<Arg>,\n-              mut ident: &mut FnMut() -> Ident,\n+              ident: &mut FnMut() -> Ident,\n               expr: P<Expr>) -> (P<Ty>, P<Expr>)\n     {\n         match *ty {"}, {"sha": "3d669aa81df6e7bce6aa2bcdffcbe400b6613e55", "filename": "src/librustc_borrowck/borrowck/gather_loans/mod.rs", "status": "modified", "additions": 32, "deletions": 12, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/d21ec9b4efd1da012979b050bc0a0426fe45fcdf/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d21ec9b4efd1da012979b050bc0a0426fe45fcdf/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs?ref=d21ec9b4efd1da012979b050bc0a0426fe45fcdf", "patch": "@@ -436,20 +436,40 @@ impl<'a, 'tcx> GatherLoanCtxt<'a, 'tcx> {\n         //! For mutable loans of content whose mutability derives\n         //! from a local variable, mark the mutability decl as necessary.\n \n-        match loan_path.kind {\n-            LpVar(local_id) |\n-            LpUpvar(ty::UpvarId{ var_id: local_id, closure_expr_id: _ }) => {\n-                self.tcx().used_mut_nodes.borrow_mut().insert(local_id);\n-            }\n-            LpDowncast(ref base, _) |\n-            LpExtend(ref base, mc::McInherited, _) |\n-            LpExtend(ref base, mc::McDeclared, _) => {\n-                self.mark_loan_path_as_mutated(&base);\n-            }\n-            LpExtend(_, mc::McImmutable, _) => {\n-                // Nothing to do.\n+        let mut wrapped_path = Some(loan_path);\n+        let mut through_borrow = false;\n+\n+        while let Some(current_path) = wrapped_path {\n+            wrapped_path = match current_path.kind {\n+                LpVar(local_id) => {\n+                    if !through_borrow {\n+                        self.tcx().used_mut_nodes.borrow_mut().insert(local_id);\n+                    }\n+                    None\n+                }\n+                LpUpvar(ty::UpvarId{ var_id: local_id, closure_expr_id: _ }) => {\n+                    self.tcx().used_mut_nodes.borrow_mut().insert(local_id);\n+                    None\n+                }\n+                LpExtend(ref base, mc::McInherited, LpDeref(pointer_kind)) |\n+                LpExtend(ref base, mc::McDeclared, LpDeref(pointer_kind)) => {\n+                    if pointer_kind != mc::Unique {\n+                        through_borrow = true;\n+                    }\n+                    Some(base)\n+                }\n+                LpDowncast(ref base, _) |\n+                LpExtend(ref base, mc::McInherited, _) |\n+                LpExtend(ref base, mc::McDeclared, _) => {\n+                    Some(base)\n+                }\n+                LpExtend(_, mc::McImmutable, _) => {\n+                    // Nothing to do.\n+                    None\n+                }\n             }\n         }\n+\n     }\n \n     pub fn compute_gen_scope(&self,"}, {"sha": "6b31535c5a5260592066d33039388692fce50cd3", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d21ec9b4efd1da012979b050bc0a0426fe45fcdf/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d21ec9b4efd1da012979b050bc0a0426fe45fcdf/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=d21ec9b4efd1da012979b050bc0a0426fe45fcdf", "patch": "@@ -98,7 +98,7 @@ fn borrowck<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, owner_def_id: DefId) {\n     let body_id = tcx.hir.body_owned_by(owner_id);\n     let tables = tcx.typeck_tables_of(owner_def_id);\n     let region_maps = tcx.region_maps(owner_def_id);\n-    let mut bccx = &mut BorrowckCtxt { tcx, tables, region_maps, owner_def_id };\n+    let bccx = &mut BorrowckCtxt { tcx, tables, region_maps, owner_def_id };\n \n     let body = bccx.tcx.hir.body(body_id);\n "}, {"sha": "df660d08603adfa1cc2fb31a82d63299d1540902", "filename": "src/librustc_data_structures/array_vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d21ec9b4efd1da012979b050bc0a0426fe45fcdf/src%2Flibrustc_data_structures%2Farray_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d21ec9b4efd1da012979b050bc0a0426fe45fcdf/src%2Flibrustc_data_structures%2Farray_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Farray_vec.rs?ref=d21ec9b4efd1da012979b050bc0a0426fe45fcdf", "patch": "@@ -260,7 +260,7 @@ impl<'a, A: Array> Drop for Drain<'a, A> {\n                 let start = source_array_vec.len();\n                 let tail = self.tail_start;\n                 {\n-                    let mut arr = &mut source_array_vec.values as &mut [ManuallyDrop<_>];\n+                    let arr = &mut source_array_vec.values as &mut [ManuallyDrop<_>];\n                     let src = arr.as_ptr().offset(tail as isize);\n                     let dst = arr.as_mut_ptr().offset(start as isize);\n                     ptr::copy(src, dst, self.tail_len);"}, {"sha": "7fc59be780f6e565983e870d3cee6a09c186d21e", "filename": "src/librustc_data_structures/bitvec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d21ec9b4efd1da012979b050bc0a0426fe45fcdf/src%2Flibrustc_data_structures%2Fbitvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d21ec9b4efd1da012979b050bc0a0426fe45fcdf/src%2Flibrustc_data_structures%2Fbitvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fbitvec.rs?ref=d21ec9b4efd1da012979b050bc0a0426fe45fcdf", "patch": "@@ -166,7 +166,7 @@ impl BitMatrix {\n     pub fn add(&mut self, source: usize, target: usize) -> bool {\n         let (start, _) = self.range(source);\n         let (word, mask) = word_mask(target);\n-        let mut vector = &mut self.vector[..];\n+        let vector = &mut self.vector[..];\n         let v1 = vector[start + word];\n         let v2 = v1 | mask;\n         vector[start + word] = v2;"}, {"sha": "1f44378c9e6466f590f1c06aec59f9ef39d3e9a0", "filename": "src/librustc_data_structures/indexed_vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d21ec9b4efd1da012979b050bc0a0426fe45fcdf/src%2Flibrustc_data_structures%2Findexed_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d21ec9b4efd1da012979b050bc0a0426fe45fcdf/src%2Flibrustc_data_structures%2Findexed_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Findexed_vec.rs?ref=d21ec9b4efd1da012979b050bc0a0426fe45fcdf", "patch": "@@ -259,7 +259,7 @@ impl<'a, I: Idx, T> IntoIterator for &'a mut IndexVec<I, T> {\n     type IntoIter = slice::IterMut<'a, T>;\n \n     #[inline]\n-    fn into_iter(mut self) -> slice::IterMut<'a, T> {\n+    fn into_iter(self) -> slice::IterMut<'a, T> {\n         self.raw.iter_mut()\n     }\n }"}, {"sha": "6f0a50180d794b5de9f413f4306109d6e7bfea6f", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d21ec9b4efd1da012979b050bc0a0426fe45fcdf/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d21ec9b4efd1da012979b050bc0a0426fe45fcdf/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=d21ec9b4efd1da012979b050bc0a0426fe45fcdf", "patch": "@@ -422,7 +422,7 @@ fn show_content_with_pager(content: &String) {\n \n     match Command::new(pager_name).stdin(Stdio::piped()).spawn() {\n         Ok(mut pager) => {\n-            if let Some(mut pipe) = pager.stdin.as_mut() {\n+            if let Some(pipe) = pager.stdin.as_mut() {\n                 if pipe.write_all(content.as_bytes()).is_err() {\n                     fallback_to_println = true;\n                 }"}, {"sha": "d2ab9b2fbced359c497376a5f550c7cce1de0389", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d21ec9b4efd1da012979b050bc0a0426fe45fcdf/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d21ec9b4efd1da012979b050bc0a0426fe45fcdf/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=d21ec9b4efd1da012979b050bc0a0426fe45fcdf", "patch": "@@ -479,7 +479,7 @@ impl CrateStore for cstore::CStore {\n                 _ => {},\n             }\n \n-            let mut bfs_queue = &mut VecDeque::new();\n+            let bfs_queue = &mut VecDeque::new();\n             let mut add_child = |bfs_queue: &mut VecDeque<_>, child: def::Export, parent: DefId| {\n                 let child = child.def.def_id();\n "}, {"sha": "c0b54ce2a84decf7947e90f58321115103895471", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d21ec9b4efd1da012979b050bc0a0426fe45fcdf/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d21ec9b4efd1da012979b050bc0a0426fe45fcdf/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=d21ec9b4efd1da012979b050bc0a0426fe45fcdf", "patch": "@@ -206,7 +206,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         self.schedule_drop(span, extent, &Lvalue::Local(local_id), var_ty);\n     }\n \n-    pub fn visit_bindings<F>(&mut self, pattern: &Pattern<'tcx>, mut f: &mut F)\n+    pub fn visit_bindings<F>(&mut self, pattern: &Pattern<'tcx>, f: &mut F)\n         where F: FnMut(&mut Self, Mutability, Name, NodeId, Span, Ty<'tcx>)\n     {\n         match *pattern.kind {"}, {"sha": "f3a82b54063b4710c1fd594c0f0aa093b8784505", "filename": "src/librustc_mir/transform/type_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d21ec9b4efd1da012979b050bc0a0426fe45fcdf/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d21ec9b4efd1da012979b050bc0a0426fe45fcdf/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs?ref=d21ec9b4efd1da012979b050bc0a0426fe45fcdf", "patch": "@@ -721,7 +721,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                value,\n                obligations);\n \n-        let mut fulfill_cx = &mut self.fulfillment_cx;\n+        let fulfill_cx = &mut self.fulfillment_cx;\n         for obligation in obligations {\n             fulfill_cx.register_predicate_obligation(self.infcx, obligation);\n         }"}, {"sha": "3caa9ad34d30a62d34ec662f19db7f2662ab3bf7", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d21ec9b4efd1da012979b050bc0a0426fe45fcdf/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d21ec9b4efd1da012979b050bc0a0426fe45fcdf/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=d21ec9b4efd1da012979b050bc0a0426fe45fcdf", "patch": "@@ -781,7 +781,7 @@ impl<'a, 'tcx> Visitor<'tcx> for TypePrivacyVisitor<'a, 'tcx> {\n             hir::ItemTrait(.., ref trait_item_refs) => {\n                 self.check_item(item.id).generics().predicates();\n                 for trait_item_ref in trait_item_refs {\n-                    let mut check = self.check_item(trait_item_ref.id.node_id);\n+                    let check = self.check_item(trait_item_ref.id.node_id);\n                     check.generics().predicates();\n                     if trait_item_ref.kind != hir::AssociatedItemKind::Type ||\n                        trait_item_ref.defaultness.has_value() {\n@@ -814,7 +814,7 @@ impl<'a, 'tcx> Visitor<'tcx> for TypePrivacyVisitor<'a, 'tcx> {\n             }\n             hir::ItemImpl(.., ref trait_ref, _, ref impl_item_refs) => {\n                 {\n-                    let mut check = self.check_item(item.id);\n+                    let check = self.check_item(item.id);\n                     check.ty().generics().predicates();\n                     if trait_ref.is_some() {\n                         check.impl_trait_ref();"}, {"sha": "41f1f5877d8caba9b9971d52dc659d7a10212f63", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d21ec9b4efd1da012979b050bc0a0426fe45fcdf/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d21ec9b4efd1da012979b050bc0a0426fe45fcdf/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=d21ec9b4efd1da012979b050bc0a0426fe45fcdf", "patch": "@@ -379,7 +379,7 @@ impl<'a> Resolver<'a> {\n         // Ensure that `resolution` isn't borrowed when defining in the module's glob importers,\n         // during which the resolution might end up getting re-defined via a glob cycle.\n         let (binding, t) = {\n-            let mut resolution = &mut *self.resolution(module, ident, ns).borrow_mut();\n+            let resolution = &mut *self.resolution(module, ident, ns).borrow_mut();\n             let old_binding = resolution.binding();\n \n             let t = f(self, resolution);"}, {"sha": "8cbc5155ddeb721e793cf1565b1e72ba8ac58153", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d21ec9b4efd1da012979b050bc0a0426fe45fcdf/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d21ec9b4efd1da012979b050bc0a0426fe45fcdf/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=d21ec9b4efd1da012979b050bc0a0426fe45fcdf", "patch": "@@ -1464,7 +1464,7 @@ fn collect_and_partition_translation_items<'a, 'tcx>(scx: &SharedCrateContext<'a\n                 let mut output = i.to_string(scx.tcx());\n                 output.push_str(\" @@\");\n                 let mut empty = Vec::new();\n-                let mut cgus = item_to_cgus.get_mut(i).unwrap_or(&mut empty);\n+                let cgus = item_to_cgus.get_mut(i).unwrap_or(&mut empty);\n                 cgus.as_mut_slice().sort_by_key(|&(ref name, _)| name.clone());\n                 cgus.dedup();\n                 for &(ref cgu_name, (linkage, _)) in cgus.iter() {"}, {"sha": "63c7b18e8d29054687c954031986ca60fa15a8b0", "filename": "src/librustc_trans/partitioning.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d21ec9b4efd1da012979b050bc0a0426fe45fcdf/src%2Flibrustc_trans%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d21ec9b4efd1da012979b050bc0a0426fe45fcdf/src%2Flibrustc_trans%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fpartitioning.rs?ref=d21ec9b4efd1da012979b050bc0a0426fe45fcdf", "patch": "@@ -335,7 +335,7 @@ fn place_root_translation_items<'a, 'tcx, I>(scx: &SharedCrateContext<'a, 'tcx>,\n                 CodegenUnit::empty(codegen_unit_name.clone())\n             };\n \n-            let mut codegen_unit = codegen_units.entry(codegen_unit_name.clone())\n+            let codegen_unit = codegen_units.entry(codegen_unit_name.clone())\n                                                 .or_insert_with(make_codegen_unit);\n \n             let (linkage, visibility) = match trans_item.explicit_linkage(tcx) {"}, {"sha": "ead6e432561294f048d716aeffb7c1e248e449a3", "filename": "src/librustc_trans/time_graph.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d21ec9b4efd1da012979b050bc0a0426fe45fcdf/src%2Flibrustc_trans%2Ftime_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d21ec9b4efd1da012979b050bc0a0426fe45fcdf/src%2Flibrustc_trans%2Ftime_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftime_graph.rs?ref=d21ec9b4efd1da012979b050bc0a0426fe45fcdf", "patch": "@@ -70,7 +70,7 @@ impl TimeGraph {\n         {\n             let mut table = self.data.lock().unwrap();\n \n-            let mut data = table.entry(timeline).or_insert(PerThread {\n+            let data = table.entry(timeline).or_insert(PerThread {\n                 timings: Vec::new(),\n                 open_work_package: None,\n             });\n@@ -90,7 +90,7 @@ impl TimeGraph {\n         let end = Instant::now();\n \n         let mut table = self.data.lock().unwrap();\n-        let mut data = table.get_mut(&timeline).unwrap();\n+        let data = table.get_mut(&timeline).unwrap();\n \n         if let Some((start, work_package_kind)) = data.open_work_package {\n             data.timings.push(Timing {"}, {"sha": "934a4f9b29689775498bf585460549d951b44843", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d21ec9b4efd1da012979b050bc0a0426fe45fcdf/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d21ec9b4efd1da012979b050bc0a0426fe45fcdf/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=d21ec9b4efd1da012979b050bc0a0426fe45fcdf", "patch": "@@ -1204,7 +1204,7 @@ impl<'gcx, 'tcx, 'exprs, E> CoerceMany<'gcx, 'tcx, 'exprs, E>\n                     }\n                 }\n \n-                if let Some(mut augment_error) = augment_error {\n+                if let Some(augment_error) = augment_error {\n                     augment_error(&mut db);\n                 }\n "}, {"sha": "7bf671d5e9f9376de47ef543d5842d935f692457", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d21ec9b4efd1da012979b050bc0a0426fe45fcdf/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d21ec9b4efd1da012979b050bc0a0426fe45fcdf/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=d21ec9b4efd1da012979b050bc0a0426fe45fcdf", "patch": "@@ -556,7 +556,7 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n             // We can't use normalize_associated_types_in as it will pollute the\n             // fcx's fulfillment context after this probe is over.\n             let cause = traits::ObligationCause::misc(self.span, self.body_id);\n-            let mut selcx = &mut traits::SelectionContext::new(self.fcx);\n+            let selcx = &mut traits::SelectionContext::new(self.fcx);\n             let traits::Normalized { value: xform_self_ty, obligations } =\n                 traits::normalize(selcx, self.param_env, cause, &xform_self_ty);\n             debug!(\"assemble_inherent_impl_probe: xform_self_ty = {:?}\",\n@@ -765,7 +765,7 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n             // as it will pollute the fcx's fulfillment context after this probe\n             // is over.\n             let cause = traits::ObligationCause::misc(self.span, self.body_id);\n-            let mut selcx = &mut traits::SelectionContext::new(self.fcx);\n+            let selcx = &mut traits::SelectionContext::new(self.fcx);\n             let traits::Normalized { value: xform_self_ty, obligations } =\n                 traits::normalize(selcx, self.param_env, cause, &xform_self_ty);\n "}, {"sha": "bd325474fe5790e9a093460d082301defea4236d", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d21ec9b4efd1da012979b050bc0a0426fe45fcdf/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d21ec9b4efd1da012979b050bc0a0426fe45fcdf/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=d21ec9b4efd1da012979b050bc0a0426fe45fcdf", "patch": "@@ -4183,8 +4183,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             let tail_expr_ty = tail_expr.map(|t| self.check_expr_with_expectation(t, expected));\n \n             let mut enclosing_breakables = self.enclosing_breakables.borrow_mut();\n-            let mut ctxt = enclosing_breakables.find_breakable(blk.id);\n-            let mut coerce = ctxt.coerce.as_mut().unwrap();\n+            let ctxt = enclosing_breakables.find_breakable(blk.id);\n+            let coerce = ctxt.coerce.as_mut().unwrap();\n             if let Some(tail_expr_ty) = tail_expr_ty {\n                 let tail_expr = tail_expr.unwrap();\n                 let cause = self.cause(tail_expr.span,"}, {"sha": "c1711491ee48ca2427d0dbfc4f49d3dee71d160b", "filename": "src/librustc_typeck/check/op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d21ec9b4efd1da012979b050bc0a0426fe45fcdf/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d21ec9b4efd1da012979b050bc0a0426fe45fcdf/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fop.rs?ref=d21ec9b4efd1da012979b050bc0a0426fe45fcdf", "patch": "@@ -300,7 +300,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                           lhs_expr: &'gcx hir::Expr,\n                           lhs_ty: Ty<'tcx>,\n                           rhs_ty: Ty<'tcx>,\n-                          mut err: &mut errors::DiagnosticBuilder) -> bool {\n+                          err: &mut errors::DiagnosticBuilder) -> bool {\n         // If this function returns true it means a note was printed, so we don't need\n         // to print the normal \"implementation of `std::ops::Add` might be missing\" note\n         let mut is_string_addition = false;"}, {"sha": "7e2229a8f84a3bb014f169112c02eb40901c7e52", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d21ec9b4efd1da012979b050bc0a0426fe45fcdf/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d21ec9b4efd1da012979b050bc0a0426fe45fcdf/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=d21ec9b4efd1da012979b050bc0a0426fe45fcdf", "patch": "@@ -1618,7 +1618,7 @@ impl<'a, K, V, S> IntoIterator for &'a mut HashMap<K, V, S>\n     type Item = (&'a K, &'a mut V);\n     type IntoIter = IterMut<'a, K, V>;\n \n-    fn into_iter(mut self) -> IterMut<'a, K, V> {\n+    fn into_iter(self) -> IterMut<'a, K, V> {\n         self.iter_mut()\n     }\n }"}, {"sha": "6f7c5a5de42b37a90f75e70fa629219398bb7594", "filename": "src/libstd/collections/hash/table.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d21ec9b4efd1da012979b050bc0a0426fe45fcdf/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d21ec9b4efd1da012979b050bc0a0426fe45fcdf/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs?ref=d21ec9b4efd1da012979b050bc0a0426fe45fcdf", "patch": "@@ -563,7 +563,7 @@ impl<'t, K, V> FullBucket<K, V, &'t mut RawTable<K, V>> {\n     ///\n     /// This works similarly to `put`, building an `EmptyBucket` out of the\n     /// taken bucket.\n-    pub fn take(mut self) -> (EmptyBucket<K, V, &'t mut RawTable<K, V>>, K, V) {\n+    pub fn take(self) -> (EmptyBucket<K, V, &'t mut RawTable<K, V>>, K, V) {\n         self.table.size -= 1;\n \n         unsafe {"}, {"sha": "401552a6ec41729a0234ee455e0027ab256dd14a", "filename": "src/libstd/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d21ec9b4efd1da012979b050bc0a0426fe45fcdf/src%2Flibstd%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d21ec9b4efd1da012979b050bc0a0426fe45fcdf/src%2Flibstd%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ferror.rs?ref=d21ec9b4efd1da012979b050bc0a0426fe45fcdf", "patch": "@@ -514,7 +514,7 @@ mod tests {\n     #[test]\n     fn downcasting() {\n         let mut a = A;\n-        let mut a = &mut a as &mut (Error + 'static);\n+        let a = &mut a as &mut (Error + 'static);\n         assert_eq!(a.downcast_ref::<A>(), Some(&A));\n         assert_eq!(a.downcast_ref::<B>(), None);\n         assert_eq!(a.downcast_mut::<A>(), Some(&mut A));"}, {"sha": "d986021a18bbc7676e072c4001670aa3ae119b45", "filename": "src/libstd/io/cursor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d21ec9b4efd1da012979b050bc0a0426fe45fcdf/src%2Flibstd%2Fio%2Fcursor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d21ec9b4efd1da012979b050bc0a0426fe45fcdf/src%2Flibstd%2Fio%2Fcursor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fcursor.rs?ref=d21ec9b4efd1da012979b050bc0a0426fe45fcdf", "patch": "@@ -456,7 +456,7 @@ mod tests {\n     #[test]\n     fn test_slice_reader() {\n         let in_buf = vec![0, 1, 2, 3, 4, 5, 6, 7];\n-        let mut reader = &mut &in_buf[..];\n+        let reader = &mut &in_buf[..];\n         let mut buf = [];\n         assert_eq!(reader.read(&mut buf).unwrap(), 0);\n         let mut buf = [0];"}, {"sha": "bb18fe95a9dbfb08cfee8456a364bc2b4f50b7c8", "filename": "src/libstd/sync/once.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d21ec9b4efd1da012979b050bc0a0426fe45fcdf/src%2Flibstd%2Fsync%2Fonce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d21ec9b4efd1da012979b050bc0a0426fe45fcdf/src%2Flibstd%2Fsync%2Fonce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fonce.rs?ref=d21ec9b4efd1da012979b050bc0a0426fe45fcdf", "patch": "@@ -267,7 +267,7 @@ impl Once {\n     #[cold]\n     fn call_inner(&'static self,\n                   ignore_poisoning: bool,\n-                  mut init: &mut FnMut(bool)) {\n+                  init: &mut FnMut(bool)) {\n         let mut state = self.state.load(Ordering::SeqCst);\n \n         'outer: loop {"}, {"sha": "1f56a299407edb2fbbb20a41efbaaf4c7da2bcf7", "filename": "src/libstd/sys/unix/rand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d21ec9b4efd1da012979b050bc0a0426fe45fcdf/src%2Flibstd%2Fsys%2Funix%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d21ec9b4efd1da012979b050bc0a0426fe45fcdf/src%2Flibstd%2Fsys%2Funix%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Frand.rs?ref=d21ec9b4efd1da012979b050bc0a0426fe45fcdf", "patch": "@@ -12,13 +12,13 @@ pub use self::imp::OsRng;\n \n use mem;\n \n-fn next_u32(mut fill_buf: &mut FnMut(&mut [u8])) -> u32 {\n+fn next_u32(fill_buf: &mut FnMut(&mut [u8])) -> u32 {\n     let mut buf: [u8; 4] = [0; 4];\n     fill_buf(&mut buf);\n     unsafe { mem::transmute::<[u8; 4], u32>(buf) }\n }\n \n-fn next_u64(mut fill_buf: &mut FnMut(&mut [u8])) -> u64 {\n+fn next_u64(fill_buf: &mut FnMut(&mut [u8])) -> u64 {\n     let mut buf: [u8; 8] = [0; 8];\n     fill_buf(&mut buf);\n     unsafe { mem::transmute::<[u8; 8], u64>(buf) }"}, {"sha": "f2487c1b0bd0af4e4b3032413ca4d823484b32cb", "filename": "src/libstd/sys/windows/fs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d21ec9b4efd1da012979b050bc0a0426fe45fcdf/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d21ec9b4efd1da012979b050bc0a0426fe45fcdf/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs?ref=d21ec9b4efd1da012979b050bc0a0426fe45fcdf", "patch": "@@ -768,8 +768,8 @@ fn symlink_junction_inner(target: &Path, junction: &Path) -> io::Result<()> {\n \n     unsafe {\n         let mut data = [0u8; c::MAXIMUM_REPARSE_DATA_BUFFER_SIZE];\n-        let mut db = data.as_mut_ptr()\n-                        as *mut c::REPARSE_MOUNTPOINT_DATA_BUFFER;\n+        let db = data.as_mut_ptr()\n+                    as *mut c::REPARSE_MOUNTPOINT_DATA_BUFFER;\n         let buf = &mut (*db).ReparseTarget as *mut _;\n         let mut i = 0;\n         // FIXME: this conversion is very hacky"}, {"sha": "146bd5d985699fead5fc4050eadc3f426752b4ca", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d21ec9b4efd1da012979b050bc0a0426fe45fcdf/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d21ec9b4efd1da012979b050bc0a0426fe45fcdf/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=d21ec9b4efd1da012979b050bc0a0426fe45fcdf", "patch": "@@ -211,7 +211,7 @@ pub enum NamedMatch {\n \n fn nameize<I: Iterator<Item=NamedMatch>>(sess: &ParseSess, ms: &[TokenTree], mut res: I)\n                                              -> NamedParseResult {\n-    fn n_rec<I: Iterator<Item=NamedMatch>>(sess: &ParseSess, m: &TokenTree, mut res: &mut I,\n+    fn n_rec<I: Iterator<Item=NamedMatch>>(sess: &ParseSess, m: &TokenTree, res: &mut I,\n              ret_val: &mut HashMap<Ident, Rc<NamedMatch>>)\n              -> Result<(), (syntax_pos::Span, String)> {\n         match *m {\n@@ -445,7 +445,7 @@ pub fn parse(sess: &ParseSess,\n         /* error messages here could be improved with links to orig. rules */\n         if token_name_eq(&parser.token, &token::Eof) {\n             if eof_items.len() == 1 {\n-                let matches = eof_items[0].matches.iter_mut().map(|mut dv| {\n+                let matches = eof_items[0].matches.iter_mut().map(|dv| {\n                     Rc::make_mut(dv).pop().unwrap()\n                 });\n                 return nameize(sess, ms, matches);"}, {"sha": "80b6794d1e3cc4c01aae143a8c5d89faef7f1455", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d21ec9b4efd1da012979b050bc0a0426fe45fcdf/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d21ec9b4efd1da012979b050bc0a0426fe45fcdf/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=d21ec9b4efd1da012979b050bc0a0426fe45fcdf", "patch": "@@ -86,7 +86,7 @@ impl TTMacroExpander for MacroRulesMacroExpander {\n \n fn trace_macros_note(cx: &mut ExtCtxt, sp: Span, message: String) {\n     let sp = sp.macro_backtrace().last().map(|trace| trace.call_site).unwrap_or(sp);\n-    let mut values: &mut Vec<String> = cx.expansions.entry(sp).or_insert_with(Vec::new);\n+    let values: &mut Vec<String> = cx.expansions.entry(sp).or_insert_with(Vec::new);\n     values.push(message);\n }\n "}, {"sha": "16b06424c92fc847acb0ec7b6ea2ab0f63319ca1", "filename": "src/libsyntax_ext/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d21ec9b4efd1da012979b050bc0a0426fe45fcdf/src%2Flibsyntax_ext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d21ec9b4efd1da012979b050bc0a0426fe45fcdf/src%2Flibsyntax_ext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat.rs?ref=d21ec9b4efd1da012979b050bc0a0426fe45fcdf", "patch": "@@ -529,7 +529,7 @@ impl<'a, 'b> Context<'a, 'b> {\n \n     /// Actually builds the expression which the format_args! block will be\n     /// expanded to\n-    fn into_expr(mut self) -> P<ast::Expr> {\n+    fn into_expr(self) -> P<ast::Expr> {\n         let mut locals = Vec::new();\n         let mut counts = Vec::new();\n         let mut pats = Vec::new();"}, {"sha": "26d00755da33b0f28d45971354fff0fc0f16cfc4", "filename": "src/test/compile-fail/lint-unused-mut-variables.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d21ec9b4efd1da012979b050bc0a0426fe45fcdf/src%2Ftest%2Fcompile-fail%2Flint-unused-mut-variables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d21ec9b4efd1da012979b050bc0a0426fe45fcdf/src%2Ftest%2Fcompile-fail%2Flint-unused-mut-variables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unused-mut-variables.rs?ref=d21ec9b4efd1da012979b050bc0a0426fe45fcdf", "patch": "@@ -47,6 +47,26 @@ fn main() {\n     let x = |mut y: isize| 10; //~ ERROR: variable does not need to be mutable\n     fn what(mut foo: isize) {} //~ ERROR: variable does not need to be mutable\n \n+    let mut a = &mut 5; //~ ERROR: variable does not need to be mutable\n+    *a = 4;\n+\n+    let mut a = 5;\n+    let mut b = (&mut a,);\n+    *b.0 = 4; //~^ ERROR: variable does not need to be mutable\n+\n+    let mut x = &mut 1; //~ ERROR: variable does not need to be mutable\n+    let mut f = || {\n+      *x += 1;\n+    };\n+    f();\n+\n+    fn mut_ref_arg(mut arg : &mut [u8]) -> &mut [u8] {\n+        &mut arg[..] //~^ ERROR: variable does not need to be mutable\n+    }\n+\n+    let mut v : &mut Vec<()> = &mut vec![]; //~ ERROR: variable does not need to be mutable\n+    v.push(());\n+\n     // positive cases\n     let mut a = 2;\n     a = 3;"}, {"sha": "7704f7b1fd52607104cc7fdc435d636c9de1fe90", "filename": "src/tools/cargo", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcargo?ref=d21ec9b4efd1da012979b050bc0a0426fe45fcdf", "patch": "@@ -1 +1 @@\n-Subproject commit 305bc25d5e105e84ffe261655b46cf74570f6e5b\n+Subproject commit 7704f7b1fd52607104cc7fdc435d636c9de1fe90"}]}