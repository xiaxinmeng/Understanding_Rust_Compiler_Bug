{"sha": "a01c91c8bc251f46b94c5124f31df6bc094fb0a1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwMWM5MWM4YmMyNTFmNDZiOTRjNTEyNGYzMWRmNmJjMDk0ZmIwYTE=", "commit": {"author": {"name": "Havvy", "email": "ryan.havvy@gmail.com", "date": "2017-06-27T10:59:07Z"}, "committer": {"name": "Havvy", "email": "ryan.havvy@gmail.com", "date": "2017-07-12T19:05:40Z"}, "message": "Document error coercion to false in path-ext methods + see also sections", "tree": {"sha": "11557fd4434584a7e3e7ba8e318efb9e08fdc2c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11557fd4434584a7e3e7ba8e318efb9e08fdc2c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a01c91c8bc251f46b94c5124f31df6bc094fb0a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a01c91c8bc251f46b94c5124f31df6bc094fb0a1", "html_url": "https://github.com/rust-lang/rust/commit/a01c91c8bc251f46b94c5124f31df6bc094fb0a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a01c91c8bc251f46b94c5124f31df6bc094fb0a1/comments", "author": {"login": "Havvy", "id": 731722, "node_id": "MDQ6VXNlcjczMTcyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/731722?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Havvy", "html_url": "https://github.com/Havvy", "followers_url": "https://api.github.com/users/Havvy/followers", "following_url": "https://api.github.com/users/Havvy/following{/other_user}", "gists_url": "https://api.github.com/users/Havvy/gists{/gist_id}", "starred_url": "https://api.github.com/users/Havvy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Havvy/subscriptions", "organizations_url": "https://api.github.com/users/Havvy/orgs", "repos_url": "https://api.github.com/users/Havvy/repos", "events_url": "https://api.github.com/users/Havvy/events{/privacy}", "received_events_url": "https://api.github.com/users/Havvy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Havvy", "id": 731722, "node_id": "MDQ6VXNlcjczMTcyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/731722?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Havvy", "html_url": "https://github.com/Havvy", "followers_url": "https://api.github.com/users/Havvy/followers", "following_url": "https://api.github.com/users/Havvy/following{/other_user}", "gists_url": "https://api.github.com/users/Havvy/gists{/gist_id}", "starred_url": "https://api.github.com/users/Havvy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Havvy/subscriptions", "organizations_url": "https://api.github.com/users/Havvy/orgs", "repos_url": "https://api.github.com/users/Havvy/repos", "events_url": "https://api.github.com/users/Havvy/events{/privacy}", "received_events_url": "https://api.github.com/users/Havvy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f590a44ce61888c78b9044817d8b798db5cd2ffd", "url": "https://api.github.com/repos/rust-lang/rust/commits/f590a44ce61888c78b9044817d8b798db5cd2ffd", "html_url": "https://github.com/rust-lang/rust/commit/f590a44ce61888c78b9044817d8b798db5cd2ffd"}], "stats": {"total": 34, "additions": 34, "deletions": 0}, "files": [{"sha": "f0feb82cd01b138beefd3a5fdb478b4ca6111506", "filename": "src/libstd/path.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/a01c91c8bc251f46b94c5124f31df6bc094fb0a1/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a01c91c8bc251f46b94c5124f31df6bc094fb0a1/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=a01c91c8bc251f46b94c5124f31df6bc094fb0a1", "patch": "@@ -2215,12 +2215,22 @@ impl Path {\n     /// This function will traverse symbolic links to query information about the\n     /// destination file. In case of broken symbolic links this will return `false`.\n     ///\n+    /// If you cannot access the directory containing the file, e.g. because of a\n+    /// permission error, this will return `false`.\n+    ///\n     /// # Examples\n     ///\n     /// ```no_run\n     /// use std::path::Path;\n     /// assert_eq!(Path::new(\"does_not_exist.txt\").exists(), false);\n     /// ```\n+    ///\n+    /// # See Also\n+    ///\n+    /// This is a convenience function that coerces errors to false. If you want to\n+    /// check errors, call [fs::metadata].\n+    ///\n+    /// [fs::metadata]: ../../std/fs/fn.metadata.html\n     #[stable(feature = \"path_ext\", since = \"1.5.0\")]\n     pub fn exists(&self) -> bool {\n         fs::metadata(self).is_ok()\n@@ -2231,13 +2241,25 @@ impl Path {\n     /// This function will traverse symbolic links to query information about the\n     /// destination file. In case of broken symbolic links this will return `false`.\n     ///\n+    /// If you cannot access the directory containing the file, e.g. because of a\n+    /// permission error, this will return `false`.\n+    ///\n     /// # Examples\n     ///\n     /// ```no_run\n     /// use std::path::Path;\n     /// assert_eq!(Path::new(\"./is_a_directory/\").is_file(), false);\n     /// assert_eq!(Path::new(\"a_file.txt\").is_file(), true);\n     /// ```\n+    ///\n+    /// # See Also\n+    ///\n+    /// This is a convenience function that coerces errors to false. If you want to\n+    /// check errors, call [fs::metadata] and handle its Result. Then call\n+    /// [fs::Metadata::is_file] if it was Ok.\n+    ///\n+    /// [fs::metadata]: ../../std/fs/fn.metadata.html\n+    /// [fs::Metadata::is_file]: ../../std/fs/struct.Metadata.html#method.is_file\n     #[stable(feature = \"path_ext\", since = \"1.5.0\")]\n     pub fn is_file(&self) -> bool {\n         fs::metadata(self).map(|m| m.is_file()).unwrap_or(false)\n@@ -2248,13 +2270,25 @@ impl Path {\n     /// This function will traverse symbolic links to query information about the\n     /// destination file. In case of broken symbolic links this will return `false`.\n     ///\n+    /// If you cannot access the directory containing the file, e.g. because of a\n+    /// permission error, this will return `false`.\n+    ///\n     /// # Examples\n     ///\n     /// ```no_run\n     /// use std::path::Path;\n     /// assert_eq!(Path::new(\"./is_a_directory/\").is_dir(), true);\n     /// assert_eq!(Path::new(\"a_file.txt\").is_dir(), false);\n     /// ```\n+    ///\n+    /// # See Also\n+    ///\n+    /// This is a convenience function that coerces errors to false. If you want to\n+    /// check errors, call [fs::metadata] and handle its Result. Then call\n+    /// [fs::Metadata::is_dir] if it was Ok.\n+    ///\n+    /// [fs::metadata]: ../../std/fs/fn.metadata.html\n+    /// [fs::Metadata::is_dir]: ../../std/fs/struct.Metadata.html#method.is_dir\n     #[stable(feature = \"path_ext\", since = \"1.5.0\")]\n     pub fn is_dir(&self) -> bool {\n         fs::metadata(self).map(|m| m.is_dir()).unwrap_or(false)"}]}