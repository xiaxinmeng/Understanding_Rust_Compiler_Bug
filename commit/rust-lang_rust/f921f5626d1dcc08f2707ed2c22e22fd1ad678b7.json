{"sha": "f921f5626d1dcc08f2707ed2c22e22fd1ad678b7", "node_id": "C_kwDOAAsO6NoAKGY5MjFmNTYyNmQxZGNjMDhmMjcwN2VkMmMyMmUyMmZkMWFkNjc4Yjc", "commit": {"author": {"name": "Eric Holk", "email": "ericholk@microsoft.com", "date": "2022-08-31T18:10:19Z"}, "committer": {"name": "Eric Holk", "email": "ericholk@microsoft.com", "date": "2022-08-31T18:15:38Z"}, "message": "Use parent_iter instead of a find_parent_node loop", "tree": {"sha": "b5f8b18027da65c9a292cd860be94b40e88a091a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5f8b18027da65c9a292cd860be94b40e88a091a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f921f5626d1dcc08f2707ed2c22e22fd1ad678b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f921f5626d1dcc08f2707ed2c22e22fd1ad678b7", "html_url": "https://github.com/rust-lang/rust/commit/f921f5626d1dcc08f2707ed2c22e22fd1ad678b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f921f5626d1dcc08f2707ed2c22e22fd1ad678b7/comments", "author": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b9d3f654128ce6ba29e1e9ff31fcc44f2f04b59f", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9d3f654128ce6ba29e1e9ff31fcc44f2f04b59f", "html_url": "https://github.com/rust-lang/rust/commit/b9d3f654128ce6ba29e1e9ff31fcc44f2f04b59f"}], "stats": {"total": 23, "additions": 10, "deletions": 13}, "files": [{"sha": "6217bffb8f76c206b4df1840eb12dd9586c7277a", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f921f5626d1dcc08f2707ed2c22e22fd1ad678b7/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f921f5626d1dcc08f2707ed2c22e22fd1ad678b7/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=f921f5626d1dcc08f2707ed2c22e22fd1ad678b7", "patch": "@@ -291,6 +291,9 @@ impl<'hir> Map<'hir> {\n         Some(def_kind)\n     }\n \n+    /// Finds the id of the parent node to this one.\n+    ///\n+    /// If calling repeatedly and iterating over parents, prefer [`Map::parent_iter`].\n     pub fn find_parent_node(self, id: HirId) -> Option<HirId> {\n         if id.local_id == ItemLocalId::from_u32(0) {\n             Some(self.tcx.hir_owner_parent(id.owner))"}, {"sha": "2710606f91436fe23b60f4f20aef55cd0e208d09", "filename": "compiler/rustc_typeck/src/check/generator_interior.rs", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f921f5626d1dcc08f2707ed2c22e22fd1ad678b7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f921f5626d1dcc08f2707ed2c22e22fd1ad678b7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs?ref=f921f5626d1dcc08f2707ed2c22e22fd1ad678b7", "patch": "@@ -387,18 +387,6 @@ impl<'a, 'tcx> Visitor<'tcx> for InteriorVisitor<'a, 'tcx> {\n             ty.needs_drop(self.fcx.tcx, self.fcx.param_env)\n         };\n \n-        let find_parent_expr = |mut hir_id| {\n-            let hir = self.fcx.tcx.hir();\n-            hir_id = hir.find_parent_node(hir_id)?;\n-            loop {\n-                if let hir::Node::Expr(_) = self.fcx.tcx.hir().find(hir_id)? {\n-                    return Some(hir_id);\n-                } else {\n-                    hir_id = hir.find_parent_node(hir_id)?;\n-                }\n-            }\n-        };\n-\n         // Typically, the value produced by an expression is consumed by its parent in some way,\n         // so we only have to check if the parent contains a yield (note that the parent may, for\n         // example, store the value into a local variable, but then we already consider local\n@@ -421,7 +409,13 @@ impl<'a, 'tcx> Visitor<'tcx> for InteriorVisitor<'a, 'tcx> {\n             }) {\n             self.rvalue_scopes.temporary_scope(self.region_scope_tree, expr.hir_id.local_id)\n         } else {\n-            let parent_expr = find_parent_expr(expr.hir_id);\n+            let parent_expr = self\n+                .fcx\n+                .tcx\n+                .hir()\n+                .parent_iter(expr.hir_id)\n+                .find(|(_, node)| matches!(node, hir::Node::Expr(_)))\n+                .map(|(id, _)| id);\n             debug!(\"parent_expr: {:?}\", parent_expr);\n             match parent_expr {\n                 Some(parent) => Some(Scope { id: parent.local_id, data: ScopeData::Node }),"}]}