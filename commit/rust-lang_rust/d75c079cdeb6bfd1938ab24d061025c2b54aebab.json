{"sha": "d75c079cdeb6bfd1938ab24d061025c2b54aebab", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3NWMwNzljZGViNmJmZDE5MzhhYjI0ZDA2MTAyNWMyYjU0YWViYWI=", "commit": {"author": {"name": "Georg Brandl", "email": "georg@python.org", "date": "2016-05-07T09:22:28Z"}, "committer": {"name": "Georg Brandl", "email": "georg@python.org", "date": "2016-05-07T09:23:49Z"}, "message": "book: fixup code in error handling tutorial\n\nA few oversights happened while porting the example from docopt to\ngetopts.  I retraced all the steps, fixing code and description as\nnecessary.\n\nFixes: #33422", "tree": {"sha": "09570d81ce40ca9d8c55078b0bebec7effee5447", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09570d81ce40ca9d8c55078b0bebec7effee5447"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d75c079cdeb6bfd1938ab24d061025c2b54aebab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d75c079cdeb6bfd1938ab24d061025c2b54aebab", "html_url": "https://github.com/rust-lang/rust/commit/d75c079cdeb6bfd1938ab24d061025c2b54aebab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d75c079cdeb6bfd1938ab24d061025c2b54aebab/comments", "author": {"login": "birkenfeld", "id": 144359, "node_id": "MDQ6VXNlcjE0NDM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/144359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/birkenfeld", "html_url": "https://github.com/birkenfeld", "followers_url": "https://api.github.com/users/birkenfeld/followers", "following_url": "https://api.github.com/users/birkenfeld/following{/other_user}", "gists_url": "https://api.github.com/users/birkenfeld/gists{/gist_id}", "starred_url": "https://api.github.com/users/birkenfeld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/birkenfeld/subscriptions", "organizations_url": "https://api.github.com/users/birkenfeld/orgs", "repos_url": "https://api.github.com/users/birkenfeld/repos", "events_url": "https://api.github.com/users/birkenfeld/events{/privacy}", "received_events_url": "https://api.github.com/users/birkenfeld/received_events", "type": "User", "site_admin": false}, "committer": {"login": "birkenfeld", "id": 144359, "node_id": "MDQ6VXNlcjE0NDM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/144359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/birkenfeld", "html_url": "https://github.com/birkenfeld", "followers_url": "https://api.github.com/users/birkenfeld/followers", "following_url": "https://api.github.com/users/birkenfeld/following{/other_user}", "gists_url": "https://api.github.com/users/birkenfeld/gists{/gist_id}", "starred_url": "https://api.github.com/users/birkenfeld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/birkenfeld/subscriptions", "organizations_url": "https://api.github.com/users/birkenfeld/orgs", "repos_url": "https://api.github.com/users/birkenfeld/repos", "events_url": "https://api.github.com/users/birkenfeld/events{/privacy}", "received_events_url": "https://api.github.com/users/birkenfeld/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6478583cdb57aea8d2b9ceb25dfe5ba60a7083a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/6478583cdb57aea8d2b9ceb25dfe5ba60a7083a3", "html_url": "https://github.com/rust-lang/rust/commit/6478583cdb57aea8d2b9ceb25dfe5ba60a7083a3"}], "stats": {"total": 120, "additions": 61, "deletions": 59}, "files": [{"sha": "a10e98fac7adfafbb918bad27083d2e1ffaa39f3", "filename": "src/doc/book/error-handling.md", "status": "modified", "additions": 61, "deletions": 59, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/d75c079cdeb6bfd1938ab24d061025c2b54aebab/src%2Fdoc%2Fbook%2Ferror-handling.md", "raw_url": "https://github.com/rust-lang/rust/raw/d75c079cdeb6bfd1938ab24d061025c2b54aebab/src%2Fdoc%2Fbook%2Ferror-handling.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Ferror-handling.md?ref=d75c079cdeb6bfd1938ab24d061025c2b54aebab", "patch": "@@ -1573,8 +1573,9 @@ detail on Getopts, but there is [some good documentation][15]\n describing it. The short story is that Getopts generates an argument\n parser and a help message from a vector of options (The fact that it\n is a vector is hidden behind a struct and a set of methods). Once the\n-parsing is done, we can decode the program arguments into a Rust\n-struct. From there, we can get information about the flags, for\n+parsing is done, the parser returns a struct that records matches\n+for defined options, and remaining \"free\" arguments.\n+From there, we can get information about the flags, for\n instance, whether they were passed in, and what arguments they\n had. Here's our program with the appropriate `extern crate`\n statements, and the basic argument setup for Getopts:\n@@ -1605,8 +1606,8 @@ fn main() {\n         print_usage(&program, opts);\n         return;\n     }\n-    let data_path = &args[1];\n-    let city = &args[2];\n+    let data_path = &matches.free[0];\n+    let city: &str = &matches.free[1];\n \n     // Do stuff with information\n }\n@@ -1680,8 +1681,8 @@ fn main() {\n         return;\n     }\n \n-    let data_path = &args[1];\n-    let city: &str = &args[2];\n+    let data_path = &matches.free[0];\n+    let city: &str = &matches.free[1];\n \n     let file = File::open(data_path).unwrap();\n     let mut rdr = csv::Reader::from_reader(file);\n@@ -1792,13 +1793,15 @@ fn main() {\n         Ok(m)  => { m }\n         Err(e) => { panic!(e.to_string()) }\n     };\n+\n     if matches.opt_present(\"h\") {\n         print_usage(&program, opts);\n         return;\n     }\n \n-    let data_path = &args[1];\n-    let city = &args[2];\n+    let data_path = &matches.free[0];\n+    let city: &str = &matches.free[1];\n+\n     for pop in search(data_path, city) {\n         println!(\"{}, {}: {:?}\", pop.city, pop.country, pop.count);\n     }\n@@ -1876,14 +1879,14 @@ when calling `search`:\n \n ```rust,ignore\n ...\n-match search(&data_file, &city) {\n-    Ok(pops) => {\n-        for pop in pops {\n-            println!(\"{}, {}: {:?}\", pop.city, pop.country, pop.count);\n+    match search(data_path, city) {\n+        Ok(pops) => {\n+            for pop in pops {\n+                println!(\"{}, {}: {:?}\", pop.city, pop.country, pop.count);\n+            }\n         }\n+        Err(err) => println!(\"{}\", err)\n     }\n-    Err(err) => println!(\"{}\", err)\n-}\n ...\n ```\n \n@@ -1914,43 +1917,37 @@ fn print_usage(program: &str, opts: Options) {\n     println!(\"{}\", opts.usage(&format!(\"Usage: {} [options] <city>\", program)));\n }\n ```\n-The next part is going to be only a little harder:\n+Of course we need to adapt the argument handling code:\n \n ```rust,ignore\n ...\n-let mut opts = Options::new();\n-opts.optopt(\"f\", \"file\", \"Choose an input file, instead of using STDIN.\", \"NAME\");\n-opts.optflag(\"h\", \"help\", \"Show this usage message.\");\n-...\n-let file = matches.opt_str(\"f\");\n-let data_file = &file.as_ref().map(Path::new);\n-\n-let city = if !matches.free.is_empty() {\n-    &matches.free[0]\n-} else {\n-    print_usage(&program, opts);\n-    return;\n-};\n-\n-match search(data_file, city) {\n-    Ok(pops) => {\n-        for pop in pops {\n-            println!(\"{}, {}: {:?}\", pop.city, pop.country, pop.count);\n+    let mut opts = Options::new();\n+    opts.optopt(\"f\", \"file\", \"Choose an input file, instead of using STDIN.\", \"NAME\");\n+    opts.optflag(\"h\", \"help\", \"Show this usage message.\");\n+    ...\n+    let data_path = matches.opt_str(\"f\");\n+\n+    let city = if !matches.free.is_empty() {\n+        &matches.free[0]\n+    } else {\n+        print_usage(&program, opts);\n+        return;\n+    };\n+\n+    match search(&data_path, city) {\n+        Ok(pops) => {\n+            for pop in pops {\n+                println!(\"{}, {}: {:?}\", pop.city, pop.country, pop.count);\n+            }\n         }\n+        Err(err) => println!(\"{}\", err)\n     }\n-    Err(err) => println!(\"{}\", err)\n-}\n ...\n ```\n \n-In this piece of code, we take `file` (which has the type\n-`Option<String>`), and convert it to a type that `search` can use, in\n-this case, `&Option<AsRef<Path>>`. To do this, we take a reference of\n-file, and map `Path::new` onto it. In this case, `as_ref()` converts\n-the `Option<String>` into an `Option<&str>`, and from there, we can\n-execute `Path::new` to the content of the optional, and return the\n-optional of the new value. Once we have that, it is a simple matter of\n-getting the `city` argument and executing `search`.\n+We've made the user experience a bit nicer by showing the usage message,\n+instead of a panic from an out-of-bounds index, when `city`, the\n+remaining free argument, is not present.\n \n Modifying `search` is slightly trickier. The `csv` crate can build a\n parser out of\n@@ -2000,6 +1997,8 @@ enum CliError {\n And now for impls on `Display` and `Error`:\n \n ```rust,ignore\n+use std::fmt;\n+\n impl fmt::Display for CliError {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n@@ -2020,13 +2019,13 @@ impl Error for CliError {\n         }\n     }\n \n-    fn cause(&self) -> Option<&error::Error> {\n-        match *self {            \n+    fn cause(&self) -> Option<&Error> {\n+        match *self {\n             CliError::Io(ref err) => Some(err),\n-            CliError::Parse(ref err) => Some(err),\n-            // Our custom error doesn't have an underlying cause, but we could\n-            // modify it so that it does.\n-            CliError::NotFound() => None,\n+            CliError::Csv(ref err) => Some(err),\n+            // Our custom error doesn't have an underlying cause,\n+            // but we could modify it so that it does.\n+            CliError::NotFound => None,\n         }\n     }\n }\n@@ -2122,24 +2121,27 @@ string and add a flag to the Option variable. Once we've done that, Getopts does\n \n ```rust,ignore\n ...\n-let mut opts = Options::new();\n-opts.optopt(\"f\", \"file\", \"Choose an input file, instead of using STDIN.\", \"NAME\");\n-opts.optflag(\"h\", \"help\", \"Show this usage message.\");\n-opts.optflag(\"q\", \"quiet\", \"Silences errors and warnings.\");\n+    let mut opts = Options::new();\n+    opts.optopt(\"f\", \"file\", \"Choose an input file, instead of using STDIN.\", \"NAME\");\n+    opts.optflag(\"h\", \"help\", \"Show this usage message.\");\n+    opts.optflag(\"q\", \"quiet\", \"Silences errors and warnings.\");\n ...\n ```\n \n Now we only need to implement our \u201cquiet\u201d functionality. This requires us to\n tweak the case analysis in `main`:\n \n ```rust,ignore\n-match search(&args.arg_data_path, &args.arg_city) {\n-    Err(CliError::NotFound) if args.flag_quiet => process::exit(1),\n-    Err(err) => panic!(\"{}\", err),\n-    Ok(pops) => for pop in pops {\n-        println!(\"{}, {}: {:?}\", pop.city, pop.country, pop.count);\n+use std::process;\n+...\n+    match search(&data_path, city) {\n+        Err(CliError::NotFound) if matches.opt_present(\"q\") => process::exit(1),\n+        Err(err) => panic!(\"{}\", err),\n+        Ok(pops) => for pop in pops {\n+            println!(\"{}, {}: {:?}\", pop.city, pop.country, pop.count);\n+        }\n     }\n-}\n+...\n ```\n \n Certainly, we don't want to be quiet if there was an IO error or if the data"}]}