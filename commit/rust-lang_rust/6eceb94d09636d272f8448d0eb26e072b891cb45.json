{"sha": "6eceb94d09636d272f8448d0eb26e072b891cb45", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlY2ViOTRkMDk2MzZkMjcyZjg0NDhkMGViMjZlMDcyYjg5MWNiNDU=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2018-04-08T00:22:27Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2018-04-08T00:22:27Z"}, "message": "Don't link \"Undefined Behavior\" heading\n\nThe rendered version does not make clear that this is a link to another\npage, and it breaks the anchor link.", "tree": {"sha": "46de4f5180240aa5876415e6dde091459050e8a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/46de4f5180240aa5876415e6dde091459050e8a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6eceb94d09636d272f8448d0eb26e072b891cb45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6eceb94d09636d272f8448d0eb26e072b891cb45", "html_url": "https://github.com/rust-lang/rust/commit/6eceb94d09636d272f8448d0eb26e072b891cb45", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6eceb94d09636d272f8448d0eb26e072b891cb45/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b564c4a0ee96acb0a68b8421b6cecac47e2a2e8b", "url": "https://api.github.com/repos/rust-lang/rust/commits/b564c4a0ee96acb0a68b8421b6cecac47e2a2e8b", "html_url": "https://github.com/rust-lang/rust/commit/b564c4a0ee96acb0a68b8421b6cecac47e2a2e8b"}], "stats": {"total": 40, "additions": 12, "deletions": 28}, "files": [{"sha": "daa43337fd79ca509246502db5780d13607c5733", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6eceb94d09636d272f8448d0eb26e072b891cb45/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6eceb94d09636d272f8448d0eb26e072b891cb45/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=6eceb94d09636d272f8448d0eb26e072b891cb45", "patch": "@@ -975,7 +975,7 @@ extern \"rust-intrinsic\" {\n     /// The caller must ensure that `src` points to a valid sequence of type\n     /// `T`.\n     ///\n-    /// # [Undefined Behavior]\n+    /// # Undefined Behavior\n     ///\n     /// Behavior is undefined if any of the following conditions are violated:\n     ///\n@@ -998,8 +998,6 @@ extern \"rust-intrinsic\" {\n     /// copies of `T`, regardless of whether `T: Copy`, which can result in\n     /// undefined behavior if both copies are used.\n     ///\n-    /// [Undefined Behavior]: ../../reference/behavior-considered-undefined.html\n-    ///\n     /// # Examples\n     ///\n     /// Manually implement [`Vec::append`]:\n@@ -1065,7 +1063,7 @@ extern \"rust-intrinsic\" {\n     /// `copy` is unsafe because it dereferences a raw pointer. The caller must\n     /// ensure that `src` points to a valid sequence of type `T`.\n     ///\n-    /// # [Undefined Behavior]\n+    /// # Undefined Behavior\n     ///\n     /// Behavior is undefined if any of the following conditions are violated:\n     ///\n@@ -1086,7 +1084,6 @@ extern \"rust-intrinsic\" {\n     /// can result in undefined behavior if both copies are used.\n     ///\n     /// [`Copy`]: ../marker/trait.Copy.html\n-    /// [Undefined Behavior]: ../../reference/behavior-considered-undefined.html\n     ///\n     /// # Examples\n     ///\n@@ -1118,7 +1115,7 @@ extern \"rust-intrinsic\" {\n     /// `write_bytes` is unsafe because it dereferences a raw pointer. The\n     /// caller must ensure that the poiinter points to a valid value of type `T`.\n     ///\n-    /// # [Undefined Behavior]\n+    /// # Undefined Behavior\n     ///\n     /// Behavior is undefined if any of the following conditions are violated:\n     ///"}, {"sha": "4cb9c655441d917401732a2bfad578f50fd8f052", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 9, "deletions": 22, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/6eceb94d09636d272f8448d0eb26e072b891cb45/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6eceb94d09636d272f8448d0eb26e072b891cb45/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=6eceb94d09636d272f8448d0eb26e072b891cb45", "patch": "@@ -57,7 +57,7 @@ pub use intrinsics::write_bytes;\n /// `drop_in_place` is unsafe because it dereferences a raw pointer. The caller\n /// must ensure that the pointer points to a valid value of type `T`.\n ///\n-/// # [Undefined Behavior]\n+/// # Undefined Behavior\n ///\n /// Behavior is undefined if any of the following conditions are violated:\n ///\n@@ -73,7 +73,6 @@ pub use intrinsics::write_bytes;\n ///\n /// [`Copy`]: ../marker/trait.Copy.html\n /// [`write`]: ./fn.write.html\n-/// [Undefined Behavior]: ../../reference/behavior-considered-undefined.html\n ///\n /// # Examples\n ///\n@@ -157,16 +156,14 @@ pub const fn null_mut<T>() -> *mut T { 0 as *mut T }\n /// `swap` is unsafe because it dereferences a raw pointer. The caller must\n /// ensure that both pointers point to valid values of type `T`.\n ///\n-/// # [Undefined Behavior]\n+/// # Undefined Behavior\n ///\n /// Behavior is undefined if any of the following conditions are violated:\n ///\n /// * `x` and `y` must point to valid, initialized memory.\n ///\n /// * `x` and `y` must be properly aligned.\n ///\n-/// [Undefined Behavior]: ../../reference/behavior-considered-undefined.html\n-///\n /// # Examples\n ///\n /// Swapping two non-overlapping regions:\n@@ -317,16 +314,14 @@ unsafe fn swap_nonoverlapping_bytes(x: *mut u8, y: *mut u8, len: usize) {\n ///\n /// [`mem::replace`]: ../mem/fn.replace.html\n ///\n-/// # [Undefined Behavior]\n+/// # Undefined Behavior\n ///\n /// Behavior is undefined if any of the following conditions are violated:\n ///\n /// * `dest` must point to valid, initialized memory.\n ///\n /// * `dest` must be properly aligned.\n ///\n-/// [Undefined Behavior]: ../../reference/behavior-considered-undefined.html\n-///\n /// # Examples\n ///\n /// ```\n@@ -358,7 +353,7 @@ pub unsafe fn replace<T>(dest: *mut T, mut src: T) -> T {\n /// `read` is unsafe because it dereferences a raw pointer. The caller\n /// must ensure that the pointer points to a valid value of type `T`.\n ///\n-/// # [Undefined Behavior]\n+/// # Undefined Behavior\n ///\n /// Behavior is undefined if any of the following conditions are violated:\n ///\n@@ -377,7 +372,6 @@ pub unsafe fn replace<T>(dest: *mut T, mut src: T) -> T {\n /// [`Copy`]: ../marker/trait.Copy.html\n /// [`read_unaligned`]: ./fn.read_unaligned.html\n /// [`write`]: ./fn.write.html\n-/// [Undefined Behavior]: ../../reference/behavior-considered-undefined.html\n ///\n /// # Examples\n ///\n@@ -447,7 +441,7 @@ pub unsafe fn read<T>(src: *const T) -> T {\n /// `read_unaligned` is unsafe because it dereferences a raw pointer. The caller\n /// must ensure that the pointer points to a valid value of type `T`.\n ///\n-/// # [Undefined Behavior]\n+/// # Undefined Behavior\n ///\n /// Behavior is undefined if any of the following conditions are violated:\n ///\n@@ -463,7 +457,6 @@ pub unsafe fn read<T>(src: *const T) -> T {\n ///\n /// [`Copy`]: ../marker/trait.Copy.html\n /// [`write_unaligned`]: ./fn.write_unaligned.html\n-/// [Undefined Behavior]: ../../reference/behavior-considered-undefined.html\n ///\n /// # Examples\n ///\n@@ -530,7 +523,7 @@ pub unsafe fn read_unaligned<T>(src: *const T) -> T {\n ///\n /// `write` is unsafe because it dereferences a raw pointer.\n ///\n-/// # [Undefined Behavior]\n+/// # Undefined Behavior\n ///\n /// `write` can trigger undefined behavior if any of the following conditions\n /// are violated:\n@@ -540,7 +533,6 @@ pub unsafe fn read_unaligned<T>(src: *const T) -> T {\n /// * `dst` must be properly aligned. Use [`write_unaligned`] if this is not the\n ///   case.\n ///\n-/// [Undefined Behavior]: ../../reference/behavior-considered-undefined.html\n /// [`write_unaligned`]: ./fn.write_unaligned.html\n ///\n /// # Examples\n@@ -609,15 +601,13 @@ pub unsafe fn write<T>(dst: *mut T, src: T) {\n ///\n /// `write_unaligned` is unsafe because it dereferences a raw pointer.\n ///\n-/// # [Undefined Behavior]\n+/// # Undefined Behavior\n ///\n /// `write_unaligned` can trigger undefined behavior if any of the following\n /// conditions are violated:\n ///\n /// * `dst` must point to valid memory.\n ///\n-/// [Undefined Behavior]: ../../reference/behavior-considered-undefined.html\n-///\n /// # Examples\n ///\n /// Access fields in a packed struct:\n@@ -684,7 +674,7 @@ pub unsafe fn write_unaligned<T>(dst: *mut T, src: T) {\n /// `read_volatile` is unsafe because it dereferences a raw pointer. The caller\n /// must ensure that the pointer points to a valid value of type `T`.\n ///\n-/// # [Undefined Behavior]\n+/// # Undefined Behavior\n ///\n /// Behavior is undefined if any of the following conditions are violated:\n ///\n@@ -702,7 +692,6 @@ pub unsafe fn write_unaligned<T>(dst: *mut T, src: T) {\n ///\n /// [`Copy`]: ../marker/trait.Copy.html\n /// [`write_volatile`]: ./fn.write_volatile.html\n-/// [Undefined Behavior]: ../../reference/behavior-considered-undefined.html\n ///\n /// # Examples\n ///\n@@ -754,7 +743,7 @@ pub unsafe fn read_volatile<T>(src: *const T) -> T {\n ///\n /// `write_volatile` is unsafe because it dereferences a raw pointer.\n ///\n-/// # [Undefined Behavior]\n+/// # Undefined Behavior\n ///\n /// `write_volatile` can trigger undefined behavior if any of the following\n /// conditions are violated:\n@@ -763,8 +752,6 @@ pub unsafe fn read_volatile<T>(src: *const T) -> T {\n ///\n /// * `dst` must be properly aligned.\n ///\n-/// [Undefined Behavior]: ../../reference/behavior-considered-undefined.html\n-///\n /// # Examples\n ///\n /// Basic usage:"}]}