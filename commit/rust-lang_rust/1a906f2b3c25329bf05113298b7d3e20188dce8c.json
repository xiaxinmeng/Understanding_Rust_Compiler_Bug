{"sha": "1a906f2b3c25329bf05113298b7d3e20188dce8c", "node_id": "C_kwDOAAsO6NoAKDFhOTA2ZjJiM2MyNTMyOWJmMDUxMTMyOThiN2QzZTIwMTg4ZGNlOGM", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2023-04-24T17:33:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-04-24T17:33:26Z"}, "message": "Rollup merge of #110590 - oli-obk:object_safe_assoc_types, r=jackh726\n\nAdd some tests around (lack of) object safety of associated types and consts\n\nSee https://rust-lang.zulipchat.com/#narrow/stream/144729-t-types/topic/.60where.20Self.3ASized.60.20on.20assoc.20types/near/351260928 for some discussion around why this isn't allowed.\n\nWe didn't have any tests for these, so I decided to add them now, even if we don't end up doing anything about it.", "tree": {"sha": "a2a9f415bf4362e4afc73ac401e6cc1d99b1b185", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a2a9f415bf4362e4afc73ac401e6cc1d99b1b185"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a906f2b3c25329bf05113298b7d3e20188dce8c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkRr1mCRBK7hj4Ov3rIwAAJdMIABZektq5y08qC69zGlkjWqCY\nKWZF/4JUVURZvfi8ohl9UDcW5OMsZLpSyqmoKBF4e/eO+58jrzlUj2gM1d7NLXBW\noemVaHFRnCQqOXTITI2MeocOygn8akzYII2zsRoglqQdthptSdXdnJ2k54paVjTA\ncTDJpvirttTNwXQIlReX+bj9RiBz2jqsFRbILTuysKqMQIo3RD8kALp6IWyVZ+pJ\npvTHZ45IC+zVtQRI0CF7k9d1gaJ6I2gbXDJ3UkXOakNy1Qp5z7j0W7VchGy2bJCJ\nMOBPh5vgD2rFgs20YW5rSa0srdqzyATwIGaYQ8CK9+jfrHb/mR82366bIVnveA4=\n=rwdx\n-----END PGP SIGNATURE-----\n", "payload": "tree a2a9f415bf4362e4afc73ac401e6cc1d99b1b185\nparent cefb479242629f6b8ddf2cd0e93e54da7f3f493e\nparent 41e3cc4c963450111eea9132c97258d9644e3f1e\nauthor Yuki Okushi <jtitor@2k36.org> 1682357606 +0900\ncommitter GitHub <noreply@github.com> 1682357606 +0900\n\nRollup merge of #110590 - oli-obk:object_safe_assoc_types, r=jackh726\n\nAdd some tests around (lack of) object safety of associated types and consts\n\nSee https://rust-lang.zulipchat.com/#narrow/stream/144729-t-types/topic/.60where.20Self.3ASized.60.20on.20assoc.20types/near/351260928 for some discussion around why this isn't allowed.\n\nWe didn't have any tests for these, so I decided to add them now, even if we don't end up doing anything about it.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a906f2b3c25329bf05113298b7d3e20188dce8c", "html_url": "https://github.com/rust-lang/rust/commit/1a906f2b3c25329bf05113298b7d3e20188dce8c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a906f2b3c25329bf05113298b7d3e20188dce8c/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "url": "https://api.github.com/repos/rust-lang/rust/commits/cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "html_url": "https://github.com/rust-lang/rust/commit/cefb479242629f6b8ddf2cd0e93e54da7f3f493e"}, {"sha": "41e3cc4c963450111eea9132c97258d9644e3f1e", "url": "https://api.github.com/repos/rust-lang/rust/commits/41e3cc4c963450111eea9132c97258d9644e3f1e", "html_url": "https://github.com/rust-lang/rust/commit/41e3cc4c963450111eea9132c97258d9644e3f1e"}], "stats": {"total": 141, "additions": 141, "deletions": 0}, "files": [{"sha": "94b1f63165ba2c25c0f83500750cd2ed0255988c", "filename": "tests/ui/object-safety/assoc_const_bounds.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1a906f2b3c25329bf05113298b7d3e20188dce8c/tests%2Fui%2Fobject-safety%2Fassoc_const_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a906f2b3c25329bf05113298b7d3e20188dce8c/tests%2Fui%2Fobject-safety%2Fassoc_const_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fobject-safety%2Fassoc_const_bounds.rs?ref=1a906f2b3c25329bf05113298b7d3e20188dce8c", "patch": "@@ -0,0 +1,13 @@\n+trait Foo<T> {\n+    const BAR: bool\n+        where //~ ERROR: expected one of `!`, `(`, `+`, `::`, `;`, `<`, or `=`, found keyword `where`\n+            Self: Sized;\n+}\n+\n+trait Cake {}\n+impl Cake for () {}\n+\n+fn foo(_: &dyn Foo<()>) {}\n+fn bar(_: &dyn Foo<i32>) {}\n+\n+fn main() {}"}, {"sha": "09bc11e178a45487fca60ef7e3dd3e02f9738a5e", "filename": "tests/ui/object-safety/assoc_const_bounds.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1a906f2b3c25329bf05113298b7d3e20188dce8c/tests%2Fui%2Fobject-safety%2Fassoc_const_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a906f2b3c25329bf05113298b7d3e20188dce8c/tests%2Fui%2Fobject-safety%2Fassoc_const_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fobject-safety%2Fassoc_const_bounds.stderr?ref=1a906f2b3c25329bf05113298b7d3e20188dce8c", "patch": "@@ -0,0 +1,15 @@\n+error: expected one of `!`, `(`, `+`, `::`, `;`, `<`, or `=`, found keyword `where`\n+  --> $DIR/assoc_const_bounds.rs:3:9\n+   |\n+LL | trait Foo<T> {\n+   |              - while parsing this item list starting here\n+LL |     const BAR: bool\n+   |                    - expected one of 7 possible tokens\n+LL |         where\n+   |         ^^^^^ unexpected token\n+LL |             Self: Sized;\n+LL | }\n+   | - the item list ends here\n+\n+error: aborting due to previous error\n+"}, {"sha": "2a76e5dce2b49982f756f317183d0b60b062f93f", "filename": "tests/ui/object-safety/assoc_const_bounds_sized.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1a906f2b3c25329bf05113298b7d3e20188dce8c/tests%2Fui%2Fobject-safety%2Fassoc_const_bounds_sized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a906f2b3c25329bf05113298b7d3e20188dce8c/tests%2Fui%2Fobject-safety%2Fassoc_const_bounds_sized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fobject-safety%2Fassoc_const_bounds_sized.rs?ref=1a906f2b3c25329bf05113298b7d3e20188dce8c", "patch": "@@ -0,0 +1,9 @@\n+trait Foo {\n+    const BAR: bool\n+        where //~ ERROR: expected one of `!`, `(`, `+`, `::`, `;`, `<`, or `=`, found keyword `where`\n+            Self: Sized;\n+}\n+\n+fn foo(_: &dyn Foo) {}\n+\n+fn main() {}"}, {"sha": "e1f57f677956b6298605c4b26a045811cf36ee34", "filename": "tests/ui/object-safety/assoc_const_bounds_sized.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1a906f2b3c25329bf05113298b7d3e20188dce8c/tests%2Fui%2Fobject-safety%2Fassoc_const_bounds_sized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a906f2b3c25329bf05113298b7d3e20188dce8c/tests%2Fui%2Fobject-safety%2Fassoc_const_bounds_sized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fobject-safety%2Fassoc_const_bounds_sized.stderr?ref=1a906f2b3c25329bf05113298b7d3e20188dce8c", "patch": "@@ -0,0 +1,15 @@\n+error: expected one of `!`, `(`, `+`, `::`, `;`, `<`, or `=`, found keyword `where`\n+  --> $DIR/assoc_const_bounds_sized.rs:3:9\n+   |\n+LL | trait Foo {\n+   |           - while parsing this item list starting here\n+LL |     const BAR: bool\n+   |                    - expected one of 7 possible tokens\n+LL |         where\n+   |         ^^^^^ unexpected token\n+LL |             Self: Sized;\n+LL | }\n+   | - the item list ends here\n+\n+error: aborting due to previous error\n+"}, {"sha": "9abf7939c4302f8411a9cca04759ba927d60b2ce", "filename": "tests/ui/object-safety/assoc_type_bounds.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1a906f2b3c25329bf05113298b7d3e20188dce8c/tests%2Fui%2Fobject-safety%2Fassoc_type_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a906f2b3c25329bf05113298b7d3e20188dce8c/tests%2Fui%2Fobject-safety%2Fassoc_type_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fobject-safety%2Fassoc_type_bounds.rs?ref=1a906f2b3c25329bf05113298b7d3e20188dce8c", "patch": "@@ -0,0 +1,13 @@\n+trait Foo<T> {\n+    type Bar\n+    where\n+        T: Cake;\n+}\n+\n+trait Cake {}\n+impl Cake for () {}\n+\n+fn foo(_: &dyn Foo<()>) {} //~ ERROR: the value of the associated type `Bar` (from trait `Foo`) must be specified\n+fn bar(_: &dyn Foo<i32>) {} //~ ERROR: the value of the associated type `Bar` (from trait `Foo`) must be specified\n+\n+fn main() {}"}, {"sha": "a1396dc3ad40ec630f0075a271fb9b45548a7dfc", "filename": "tests/ui/object-safety/assoc_type_bounds.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1a906f2b3c25329bf05113298b7d3e20188dce8c/tests%2Fui%2Fobject-safety%2Fassoc_type_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a906f2b3c25329bf05113298b7d3e20188dce8c/tests%2Fui%2Fobject-safety%2Fassoc_type_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fobject-safety%2Fassoc_type_bounds.stderr?ref=1a906f2b3c25329bf05113298b7d3e20188dce8c", "patch": "@@ -0,0 +1,21 @@\n+error[E0191]: the value of the associated type `Bar` (from trait `Foo`) must be specified\n+  --> $DIR/assoc_type_bounds.rs:10:16\n+   |\n+LL |     type Bar\n+   |     -------- `Bar` defined here\n+...\n+LL | fn foo(_: &dyn Foo<()>) {}\n+   |                ^^^^^^^ help: specify the associated type: `Foo<(), Bar = Type>`\n+\n+error[E0191]: the value of the associated type `Bar` (from trait `Foo`) must be specified\n+  --> $DIR/assoc_type_bounds.rs:11:16\n+   |\n+LL |     type Bar\n+   |     -------- `Bar` defined here\n+...\n+LL | fn bar(_: &dyn Foo<i32>) {}\n+   |                ^^^^^^^^ help: specify the associated type: `Foo<i32, Bar = Type>`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0191`."}, {"sha": "0112123fd42cd3c2aa36b5122d45bcf5e679f79b", "filename": "tests/ui/object-safety/assoc_type_bounds2.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1a906f2b3c25329bf05113298b7d3e20188dce8c/tests%2Fui%2Fobject-safety%2Fassoc_type_bounds2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a906f2b3c25329bf05113298b7d3e20188dce8c/tests%2Fui%2Fobject-safety%2Fassoc_type_bounds2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fobject-safety%2Fassoc_type_bounds2.rs?ref=1a906f2b3c25329bf05113298b7d3e20188dce8c", "patch": "@@ -0,0 +1,13 @@\n+trait Foo<T> {\n+    type Bar\n+    where\n+        Self: Foo<()>;\n+}\n+\n+trait Cake {}\n+impl Cake for () {}\n+\n+fn foo(_: &dyn Foo<()>) {} //~ ERROR: the value of the associated type `Bar` (from trait `Foo`) must be specified\n+fn bar(_: &dyn Foo<i32>) {} //~ ERROR: the value of the associated type `Bar` (from trait `Foo`) must be specified\n+\n+fn main() {}"}, {"sha": "7a3c0e02d485d415c03944d229c845b2c141c5d7", "filename": "tests/ui/object-safety/assoc_type_bounds2.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1a906f2b3c25329bf05113298b7d3e20188dce8c/tests%2Fui%2Fobject-safety%2Fassoc_type_bounds2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a906f2b3c25329bf05113298b7d3e20188dce8c/tests%2Fui%2Fobject-safety%2Fassoc_type_bounds2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fobject-safety%2Fassoc_type_bounds2.stderr?ref=1a906f2b3c25329bf05113298b7d3e20188dce8c", "patch": "@@ -0,0 +1,21 @@\n+error[E0191]: the value of the associated type `Bar` (from trait `Foo`) must be specified\n+  --> $DIR/assoc_type_bounds2.rs:10:16\n+   |\n+LL |     type Bar\n+   |     -------- `Bar` defined here\n+...\n+LL | fn foo(_: &dyn Foo<()>) {}\n+   |                ^^^^^^^ help: specify the associated type: `Foo<(), Bar = Type>`\n+\n+error[E0191]: the value of the associated type `Bar` (from trait `Foo`) must be specified\n+  --> $DIR/assoc_type_bounds2.rs:11:16\n+   |\n+LL |     type Bar\n+   |     -------- `Bar` defined here\n+...\n+LL | fn bar(_: &dyn Foo<i32>) {}\n+   |                ^^^^^^^^ help: specify the associated type: `Foo<i32, Bar = Type>`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0191`."}, {"sha": "61ad3cf9dc6dc29020ff043c82aa1e5fbc493044", "filename": "tests/ui/object-safety/assoc_type_bounds_sized.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1a906f2b3c25329bf05113298b7d3e20188dce8c/tests%2Fui%2Fobject-safety%2Fassoc_type_bounds_sized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a906f2b3c25329bf05113298b7d3e20188dce8c/tests%2Fui%2Fobject-safety%2Fassoc_type_bounds_sized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fobject-safety%2Fassoc_type_bounds_sized.rs?ref=1a906f2b3c25329bf05113298b7d3e20188dce8c", "patch": "@@ -0,0 +1,9 @@\n+trait Foo {\n+    type Bar\n+    where\n+        Self: Sized;\n+}\n+\n+fn foo(_: &dyn Foo) {} //~ ERROR: the value of the associated type `Bar` (from trait `Foo`) must be specified\n+\n+fn main() {}"}, {"sha": "49d624f9b1d2665f00ca309dc3b9748c3c06e941", "filename": "tests/ui/object-safety/assoc_type_bounds_sized.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1a906f2b3c25329bf05113298b7d3e20188dce8c/tests%2Fui%2Fobject-safety%2Fassoc_type_bounds_sized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a906f2b3c25329bf05113298b7d3e20188dce8c/tests%2Fui%2Fobject-safety%2Fassoc_type_bounds_sized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fobject-safety%2Fassoc_type_bounds_sized.stderr?ref=1a906f2b3c25329bf05113298b7d3e20188dce8c", "patch": "@@ -0,0 +1,12 @@\n+error[E0191]: the value of the associated type `Bar` (from trait `Foo`) must be specified\n+  --> $DIR/assoc_type_bounds_sized.rs:7:16\n+   |\n+LL |     type Bar\n+   |     -------- `Bar` defined here\n+...\n+LL | fn foo(_: &dyn Foo) {}\n+   |                ^^^ help: specify the associated type: `Foo<Bar = Type>`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0191`."}]}