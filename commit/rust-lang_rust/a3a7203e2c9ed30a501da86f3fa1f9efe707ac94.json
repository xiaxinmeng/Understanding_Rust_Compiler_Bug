{"sha": "a3a7203e2c9ed30a501da86f3fa1f9efe707ac94", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzYTcyMDNlMmM5ZWQzMGE1MDFkYTg2ZjNmYTFmOWVmZTcwN2FjOTQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-18T02:54:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-18T02:54:11Z"}, "message": "Auto merge of #46798 - Diggsey:debug-osstr, r=dtolnay\n\nAdd lossless debug implementation for unix OsStrs\n\nFixes #22766\n\nInvalid utf8 byte sequences are replaced with `\\xFF` style escape codes, while valid utf8 goes through the normal `Debug` implementation.\n\nThis is necessarily different from the windows Debug implementation, which uses `\\u{xxxx}` style escape sequences for unpaired surrogates, but both implementations are consistent in that they are both lossless, and display invalid sequences in the way most similar to existing language syntax.\n\nr? @dtolnay", "tree": {"sha": "862a6ca6053469cdac26ec03a14c02076945fd5a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/862a6ca6053469cdac26ec03a14c02076945fd5a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a3a7203e2c9ed30a501da86f3fa1f9efe707ac94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a3a7203e2c9ed30a501da86f3fa1f9efe707ac94", "html_url": "https://github.com/rust-lang/rust/commit/a3a7203e2c9ed30a501da86f3fa1f9efe707ac94", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a3a7203e2c9ed30a501da86f3fa1f9efe707ac94/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc39c31699a83313edf2ac096d0bf3cef871b705", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc39c31699a83313edf2ac096d0bf3cef871b705", "html_url": "https://github.com/rust-lang/rust/commit/dc39c31699a83313edf2ac096d0bf3cef871b705"}, {"sha": "8fac7d95bc2429ff2156bf1afcf8972f92cd6afd", "url": "https://api.github.com/repos/rust-lang/rust/commits/8fac7d95bc2429ff2156bf1afcf8972f92cd6afd", "html_url": "https://github.com/rust-lang/rust/commit/8fac7d95bc2429ff2156bf1afcf8972f92cd6afd"}], "stats": {"total": 66, "additions": 63, "deletions": 3}, "files": [{"sha": "655bfdb916707675f5fcd24ef3fac75e735e1a1c", "filename": "src/libstd/sys/redox/os_str.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a3a7203e2c9ed30a501da86f3fa1f9efe707ac94/src%2Flibstd%2Fsys%2Fredox%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3a7203e2c9ed30a501da86f3fa1f9efe707ac94/src%2Flibstd%2Fsys%2Fredox%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fos_str.rs?ref=a3a7203e2c9ed30a501da86f3fa1f9efe707ac94", "patch": "@@ -18,6 +18,7 @@ use mem;\n use rc::Rc;\n use sync::Arc;\n use sys_common::{AsInner, IntoInner};\n+use sys_common::bytestring::debug_fmt_bytestring;\n use std_unicode::lossy::Utf8Lossy;\n \n #[derive(Clone, Hash)]\n@@ -31,7 +32,7 @@ pub struct Slice {\n \n impl fmt::Debug for Slice {\n     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::Debug::fmt(&Utf8Lossy::from_bytes(&self.inner), formatter)\n+        debug_fmt_bytestring(&self.inner, formatter)\n     }\n }\n "}, {"sha": "e034938799866a5f2341c7d0b7f8fe52fd1a3bc6", "filename": "src/libstd/sys/unix/os_str.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a3a7203e2c9ed30a501da86f3fa1f9efe707ac94/src%2Flibstd%2Fsys%2Funix%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3a7203e2c9ed30a501da86f3fa1f9efe707ac94/src%2Flibstd%2Fsys%2Funix%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fos_str.rs?ref=a3a7203e2c9ed30a501da86f3fa1f9efe707ac94", "patch": "@@ -18,6 +18,7 @@ use mem;\n use rc::Rc;\n use sync::Arc;\n use sys_common::{AsInner, IntoInner};\n+use sys_common::bytestring::debug_fmt_bytestring;\n use std_unicode::lossy::Utf8Lossy;\n \n #[derive(Clone, Hash)]\n@@ -31,7 +32,7 @@ pub struct Slice {\n \n impl fmt::Debug for Slice {\n     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::Debug::fmt(&Utf8Lossy::from_bytes(&self.inner), formatter)\n+        debug_fmt_bytestring(&self.inner, formatter)\n     }\n }\n "}, {"sha": "543c22ebe18a336031efb79b32e3ae9ef1e3fe3a", "filename": "src/libstd/sys/wasm/os_str.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a3a7203e2c9ed30a501da86f3fa1f9efe707ac94/src%2Flibstd%2Fsys%2Fwasm%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3a7203e2c9ed30a501da86f3fa1f9efe707ac94/src%2Flibstd%2Fsys%2Fwasm%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasm%2Fos_str.rs?ref=a3a7203e2c9ed30a501da86f3fa1f9efe707ac94", "patch": "@@ -18,6 +18,7 @@ use mem;\n use rc::Rc;\n use sync::Arc;\n use sys_common::{AsInner, IntoInner};\n+use sys_common::bytestring::debug_fmt_bytestring;\n use std_unicode::lossy::Utf8Lossy;\n \n #[derive(Clone, Hash)]\n@@ -31,7 +32,7 @@ pub struct Slice {\n \n impl fmt::Debug for Slice {\n     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::Debug::fmt(&Utf8Lossy::from_bytes(&self.inner), formatter)\n+        debug_fmt_bytestring(&self.inner, formatter)\n     }\n }\n "}, {"sha": "eb9cad0991505ee71fc1a3458c1327b7bcf00e47", "filename": "src/libstd/sys_common/bytestring.rs", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/a3a7203e2c9ed30a501da86f3fa1f9efe707ac94/src%2Flibstd%2Fsys_common%2Fbytestring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3a7203e2c9ed30a501da86f3fa1f9efe707ac94/src%2Flibstd%2Fsys_common%2Fbytestring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fbytestring.rs?ref=a3a7203e2c9ed30a501da86f3fa1f9efe707ac94", "patch": "@@ -0,0 +1,56 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![allow(dead_code)]\n+\n+use fmt::{Formatter, Result, Write};\n+use std_unicode::lossy::{Utf8Lossy, Utf8LossyChunk};\n+\n+pub fn debug_fmt_bytestring(slice: &[u8], f: &mut Formatter) -> Result {\n+    // Writes out a valid unicode string with the correct escape sequences\n+    fn write_str_escaped(f: &mut Formatter, s: &str) -> Result {\n+        for c in s.chars().flat_map(|c| c.escape_debug()) {\n+            f.write_char(c)?\n+        }\n+        Ok(())\n+    }\n+\n+    f.write_str(\"\\\"\")?;\n+    for Utf8LossyChunk { valid, broken } in Utf8Lossy::from_bytes(slice).chunks() {\n+        write_str_escaped(f, valid)?;\n+        for b in broken {\n+            write!(f, \"\\\\x{:02X}\", b)?;\n+        }\n+    }\n+    f.write_str(\"\\\"\")\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::*;\n+    use fmt::{Formatter, Result, Debug};\n+\n+    #[test]\n+    fn smoke() {\n+        struct Helper<'a>(&'a [u8]);\n+\n+        impl<'a> Debug for Helper<'a> {\n+            fn fmt(&self, f: &mut Formatter) -> Result {\n+                debug_fmt_bytestring(self.0, f)\n+            }\n+        }\n+\n+        let input =      b\"\\xF0hello,\\tworld\";\n+        let expected = r#\"\"\\xF0hello,\\tworld\"\"#;\n+        let output = format!(\"{:?}\", Helper(input));\n+\n+        assert!(output == expected);\n+    }\n+}"}, {"sha": "5c4d7b52754ca768f27ae96c9b0562f257552005", "filename": "src/libstd/sys_common/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a3a7203e2c9ed30a501da86f3fa1f9efe707ac94/src%2Flibstd%2Fsys_common%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3a7203e2c9ed30a501da86f3fa1f9efe707ac94/src%2Flibstd%2Fsys_common%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fmod.rs?ref=a3a7203e2c9ed30a501da86f3fa1f9efe707ac94", "patch": "@@ -43,6 +43,7 @@ pub mod thread_info;\n pub mod thread_local;\n pub mod util;\n pub mod wtf8;\n+pub mod bytestring;\n \n cfg_if! {\n     if #[cfg(any(target_os = \"redox\", target_os = \"l4re\"))] {"}]}