{"sha": "b38dc837f2c2ccca6899d08956c94d6b682091ac", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzOGRjODM3ZjJjMmNjY2E2ODk5ZDA4OTU2Yzk0ZDZiNjgyMDkxYWM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-29T19:36:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-29T19:36:30Z"}, "message": "Auto merge of #1670 - unseddd:abi, r=RalfJung\n\nAdd ABI check for shims\n\nResolves #1631", "tree": {"sha": "07200347a3cc08756207bf3c75be807a291f0b3c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07200347a3cc08756207bf3c75be807a291f0b3c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b38dc837f2c2ccca6899d08956c94d6b682091ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b38dc837f2c2ccca6899d08956c94d6b682091ac", "html_url": "https://github.com/rust-lang/rust/commit/b38dc837f2c2ccca6899d08956c94d6b682091ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b38dc837f2c2ccca6899d08956c94d6b682091ac/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "099e0a166154bb34544b5b073e79e45b459ba624", "url": "https://api.github.com/repos/rust-lang/rust/commits/099e0a166154bb34544b5b073e79e45b459ba624", "html_url": "https://github.com/rust-lang/rust/commit/099e0a166154bb34544b5b073e79e45b459ba624"}, {"sha": "de4eea9d49b5d4d5e10e67e1ae2754bbb720564c", "url": "https://api.github.com/repos/rust-lang/rust/commits/de4eea9d49b5d4d5e10e67e1ae2754bbb720564c", "html_url": "https://github.com/rust-lang/rust/commit/de4eea9d49b5d4d5e10e67e1ae2754bbb720564c"}], "stats": {"total": 89, "additions": 74, "deletions": 15}, "files": [{"sha": "6a12a8f6ba35a7db1807c6f2b74a352a2ab1cb78", "filename": "src/helpers.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b38dc837f2c2ccca6899d08956c94d6b682091ac/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b38dc837f2c2ccca6899d08956c94d6b682091ac/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=b38dc837f2c2ccca6899d08956c94d6b682091ac", "patch": "@@ -9,6 +9,7 @@ use rustc_middle::mir;\n use rustc_middle::ty::{self, List, TyCtxt, layout::TyAndLayout};\n use rustc_hir::def_id::{DefId, CRATE_DEF_INDEX};\n use rustc_target::abi::{LayoutOf, Size, FieldsShape, Variants};\n+use rustc_target::spec::abi::Abi;\n \n use rand::RngCore;\n \n@@ -553,6 +554,15 @@ pub fn check_arg_count<'a, 'tcx, const N: usize>(args: &'a [OpTy<'tcx, Tag>]) ->\n     throw_ub_format!(\"incorrect number of arguments: got {}, expected {}\", args.len(), N)\n }\n \n+/// Check that the ABI is what we expect.\n+pub fn check_abi<'a>(abi: Abi, exp_abi: Abi) -> InterpResult<'a, ()> {\n+    if abi == exp_abi {\n+        Ok(())\n+    } else {\n+        throw_ub_format!(\"calling a function with ABI {:?} using caller ABI {:?}\", exp_abi, abi)\n+    }\n+}\n+\n pub fn isolation_error(name: &str) -> InterpResult<'static> {\n     throw_machine_stop!(TerminationInfo::UnsupportedInIsolation(format!(\n         \"{} not available when isolation is enabled\","}, {"sha": "dd7d0dd3b647d2a146acbc769f109c974cd8aba8", "filename": "src/machine.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b38dc837f2c2ccca6899d08956c94d6b682091ac/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b38dc837f2c2ccca6899d08956c94d6b682091ac/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=b38dc837f2c2ccca6899d08956c94d6b682091ac", "patch": "@@ -357,24 +357,24 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'mir, 'tcx> {\n     fn find_mir_or_eval_fn(\n         ecx: &mut InterpCx<'mir, 'tcx, Self>,\n         instance: ty::Instance<'tcx>,\n-        _abi: Abi,\n+        abi: Abi,\n         args: &[OpTy<'tcx, Tag>],\n         ret: Option<(PlaceTy<'tcx, Tag>, mir::BasicBlock)>,\n         unwind: Option<mir::BasicBlock>,\n     ) -> InterpResult<'tcx, Option<&'mir mir::Body<'tcx>>> {\n-        ecx.find_mir_or_eval_fn(instance, args, ret, unwind)\n+        ecx.find_mir_or_eval_fn(instance, abi, args, ret, unwind)\n     }\n \n     #[inline(always)]\n     fn call_extra_fn(\n         ecx: &mut InterpCx<'mir, 'tcx, Self>,\n         fn_val: Dlsym,\n-        _abi: Abi,\n+        abi: Abi,\n         args: &[OpTy<'tcx, Tag>],\n         ret: Option<(PlaceTy<'tcx, Tag>, mir::BasicBlock)>,\n         _unwind: Option<mir::BasicBlock>,\n     ) -> InterpResult<'tcx> {\n-        ecx.call_dlsym(fn_val, args, ret)\n+        ecx.call_dlsym(fn_val, abi, args, ret)\n     }\n \n     #[inline(always)]"}, {"sha": "a87d8a017573464c21fd1a568fb0d6dd2104d699", "filename": "src/shims/dlsym.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b38dc837f2c2ccca6899d08956c94d6b682091ac/src%2Fshims%2Fdlsym.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b38dc837f2c2ccca6899d08956c94d6b682091ac/src%2Fshims%2Fdlsym.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fdlsym.rs?ref=b38dc837f2c2ccca6899d08956c94d6b682091ac", "patch": "@@ -1,4 +1,5 @@\n use rustc_middle::mir;\n+use rustc_target::spec::abi::Abi;\n \n use crate::*;\n use shims::posix::dlsym as posix;\n@@ -29,13 +30,14 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn call_dlsym(\n         &mut self,\n         dlsym: Dlsym,\n+        abi: Abi,\n         args: &[OpTy<'tcx, Tag>],\n         ret: Option<(PlaceTy<'tcx, Tag>, mir::BasicBlock)>,\n     ) -> InterpResult<'tcx> {\n         let this = self.eval_context_mut();\n         match dlsym {\n-            Dlsym::Posix(dlsym) => posix::EvalContextExt::call_dlsym(this, dlsym, args, ret),\n-            Dlsym::Windows(dlsym) => windows::EvalContextExt::call_dlsym(this, dlsym, args, ret),\n+            Dlsym::Posix(dlsym) => posix::EvalContextExt::call_dlsym(this, dlsym, abi, args, ret),\n+            Dlsym::Windows(dlsym) => windows::EvalContextExt::call_dlsym(this, dlsym, abi, args, ret),\n         }\n     }\n }"}, {"sha": "628e9b69e1741a0e1c7b8293245fa1149dcbfd17", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 34, "deletions": 5, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/b38dc837f2c2ccca6899d08956c94d6b682091ac/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b38dc837f2c2ccca6899d08956c94d6b682091ac/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=b38dc837f2c2ccca6899d08956c94d6b682091ac", "patch": "@@ -4,14 +4,14 @@ use log::trace;\n \n use rustc_hir::def_id::DefId;\n use rustc_middle::mir;\n-use rustc_target::{abi::{Align, Size}, spec::PanicStrategy};\n+use rustc_target::{abi::{Align, Size}, spec::{PanicStrategy, abi::Abi}};\n use rustc_middle::ty;\n use rustc_apfloat::Float;\n use rustc_span::symbol::sym;\n \n use crate::*;\n use super::backtrace::EvalContextExt as _;\n-use helpers::check_arg_count;\n+use helpers::{check_abi, check_arg_count};\n \n impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n@@ -112,6 +112,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn emulate_foreign_item(\n         &mut self,\n         def_id: DefId,\n+        abi: Abi,\n         args: &[OpTy<'tcx, Tag>],\n         ret: Option<(PlaceTy<'tcx, Tag>, mir::BasicBlock)>,\n         unwind: Option<mir::BasicBlock>,\n@@ -130,25 +131,29 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let (dest, ret) = match ret {\n             None => match link_name {\n                 \"miri_start_panic\" => {\n+                    check_abi(abi, Abi::Rust)?;\n                     this.handle_miri_start_panic(args, unwind)?;\n                     return Ok(None);\n                 }\n                 // This matches calls to the foreign item `panic_impl`.\n                 // The implementation is provided by the function with the `#[panic_handler]` attribute.\n                 \"panic_impl\" => {\n+                    check_abi(abi, Abi::Rust)?;\n                     let panic_impl_id = tcx.lang_items().panic_impl().unwrap();\n                     let panic_impl_instance = ty::Instance::mono(tcx, panic_impl_id);\n                     return Ok(Some(&*this.load_mir(panic_impl_instance.def, None)?));\n                 }\n                 | \"exit\"\n                 | \"ExitProcess\"\n                 => {\n+                    check_abi(abi, if link_name == \"exit\" { Abi::C } else { Abi::System })?;\n                     let &[code] = check_arg_count(args)?;\n                     // it's really u32 for ExitProcess, but we have to put it into the `Exit` variant anyway\n                     let code = this.read_scalar(code)?.to_i32()?;\n                     throw_machine_stop!(TerminationInfo::Exit(code.into()));\n                 }\n                 \"abort\" => {\n+                    check_abi(abi, Abi::C)?;\n                     throw_machine_stop!(TerminationInfo::Abort(\"the program aborted execution\".to_owned()))\n                 }\n                 _ => throw_unsup_format!(\"can't call (diverging) foreign function: {}\", link_name),\n@@ -165,6 +170,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             // Normally, this will be either `libpanic_unwind` or `libpanic_abort`, but it could\n             // also be a custom user-provided implementation via `#![feature(panic_runtime)]`\n             \"__rust_start_panic\" | \"__rust_panic_cleanup\" => {\n+                check_abi(abi, Abi::C)?;\n                 // This replicates some of the logic in `inject_panic_runtime`.\n                 // FIXME: is there a way to reuse that logic?\n                 let panic_runtime = match this.tcx.sess.panic_strategy() {\n@@ -179,7 +185,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         }\n \n         // Third: functions that return.\n-        if this.emulate_foreign_item_by_name(link_name, args, dest, ret)? {\n+        if this.emulate_foreign_item_by_name(link_name, abi, args, dest, ret)? {\n             trace!(\"{:?}\", this.dump_place(*dest));\n             this.go_to_block(ret);\n         }\n@@ -193,6 +199,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn emulate_foreign_item_by_name(\n         &mut self,\n         link_name: &str,\n+        abi: Abi,\n         args: &[OpTy<'tcx, Tag>],\n         dest: PlaceTy<'tcx, Tag>,\n         ret: mir::BasicBlock,\n@@ -204,6 +211,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         match link_name {\n             // Miri-specific extern functions\n             \"miri_static_root\" => {\n+                check_abi(abi, Abi::Rust)?;\n                 let &[ptr] = check_arg_count(args)?;\n                 let ptr = this.read_scalar(ptr)?.check_init()?;\n                 let ptr = this.force_ptr(ptr)?;\n@@ -215,23 +223,27 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n             // Obtains a Miri backtrace. See the README for details.\n             \"miri_get_backtrace\" => {\n+                check_abi(abi, Abi::Rust)?;\n                 this.handle_miri_get_backtrace(args, dest)?;\n             }\n \n             // Resolves a Miri backtrace frame. See the README for details.\n             \"miri_resolve_frame\" => {\n+                check_abi(abi, Abi::Rust)?;\n                 this.handle_miri_resolve_frame(args, dest)?;\n             }\n \n \n             // Standard C allocation\n             \"malloc\" => {\n+                check_abi(abi, Abi::C)?;\n                 let &[size] = check_arg_count(args)?;\n                 let size = this.read_scalar(size)?.to_machine_usize(this)?;\n                 let res = this.malloc(size, /*zero_init:*/ false, MiriMemoryKind::C);\n                 this.write_scalar(res, dest)?;\n             }\n             \"calloc\" => {\n+                check_abi(abi, Abi::C)?;\n                 let &[items, len] = check_arg_count(args)?;\n                 let items = this.read_scalar(items)?.to_machine_usize(this)?;\n                 let len = this.read_scalar(len)?.to_machine_usize(this)?;\n@@ -241,11 +253,13 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.write_scalar(res, dest)?;\n             }\n             \"free\" => {\n+                check_abi(abi, Abi::C)?;\n                 let &[ptr] = check_arg_count(args)?;\n                 let ptr = this.read_scalar(ptr)?.check_init()?;\n                 this.free(ptr, MiriMemoryKind::C)?;\n             }\n             \"realloc\" => {\n+                check_abi(abi, Abi::C)?;\n                 let &[old_ptr, new_size] = check_arg_count(args)?;\n                 let old_ptr = this.read_scalar(old_ptr)?.check_init()?;\n                 let new_size = this.read_scalar(new_size)?.to_machine_usize(this)?;\n@@ -257,6 +271,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             // (Usually these would be forwarded to to `#[global_allocator]`; we instead implement a generic\n             // allocation that also checks that all conditions are met, such as not permitting zero-sized allocations.)\n             \"__rust_alloc\" => {\n+                check_abi(abi, Abi::Rust)?;\n                 let &[size, align] = check_arg_count(args)?;\n                 let size = this.read_scalar(size)?.to_machine_usize(this)?;\n                 let align = this.read_scalar(align)?.to_machine_usize(this)?;\n@@ -269,6 +284,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.write_scalar(ptr, dest)?;\n             }\n             \"__rust_alloc_zeroed\" => {\n+                check_abi(abi, Abi::Rust)?;\n                 let &[size, align] = check_arg_count(args)?;\n                 let size = this.read_scalar(size)?.to_machine_usize(this)?;\n                 let align = this.read_scalar(align)?.to_machine_usize(this)?;\n@@ -283,6 +299,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.write_scalar(ptr, dest)?;\n             }\n             \"__rust_dealloc\" => {\n+                check_abi(abi, Abi::Rust)?;\n                 let &[ptr, old_size, align] = check_arg_count(args)?;\n                 let ptr = this.read_scalar(ptr)?.check_init()?;\n                 let old_size = this.read_scalar(old_size)?.to_machine_usize(this)?;\n@@ -296,6 +313,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 )?;\n             }\n             \"__rust_realloc\" => {\n+                check_abi(abi, Abi::Rust)?;\n                 let &[ptr, old_size, align, new_size] = check_arg_count(args)?;\n                 let ptr = this.force_ptr(this.read_scalar(ptr)?.check_init()?)?;\n                 let old_size = this.read_scalar(old_size)?.to_machine_usize(this)?;\n@@ -316,6 +334,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n             // C memory handling functions\n             \"memcmp\" => {\n+                check_abi(abi, Abi::C)?;\n                 let &[left, right, n] = check_arg_count(args)?;\n                 let left = this.read_scalar(left)?.check_init()?;\n                 let right = this.read_scalar(right)?.check_init()?;\n@@ -336,6 +355,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"memrchr\" => {\n+                check_abi(abi, Abi::C)?;\n                 let &[ptr, val, num] = check_arg_count(args)?;\n                 let ptr = this.read_scalar(ptr)?.check_init()?;\n                 let val = this.read_scalar(val)?.to_i32()? as u8;\n@@ -354,6 +374,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 }\n             }\n             \"memchr\" => {\n+                check_abi(abi, Abi::C)?;\n                 let &[ptr, val, num] = check_arg_count(args)?;\n                 let ptr = this.read_scalar(ptr)?.check_init()?;\n                 let val = this.read_scalar(val)?.to_i32()? as u8;\n@@ -371,6 +392,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 }\n             }\n             \"strlen\" => {\n+                check_abi(abi, Abi::C)?;\n                 let &[ptr] = check_arg_count(args)?;\n                 let ptr = this.read_scalar(ptr)?.check_init()?;\n                 let n = this.memory.read_c_str(ptr)?.len();\n@@ -386,6 +408,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             | \"asinf\"\n             | \"atanf\"\n             => {\n+                check_abi(abi, Abi::C)?;\n                 let &[f] = check_arg_count(args)?;\n                 // FIXME: Using host floats.\n                 let f = f32::from_bits(this.read_scalar(f)?.to_u32()?);\n@@ -405,6 +428,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             | \"hypotf\"\n             | \"atan2f\"\n             => {\n+                check_abi(abi, Abi::C)?;\n                 let &[f1, f2] = check_arg_count(args)?;\n                 // underscore case for windows, here and below\n                 // (see https://docs.microsoft.com/en-us/cpp/c-runtime-library/reference/floating-point-primitives?view=vs-2019)\n@@ -426,6 +450,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             | \"asin\"\n             | \"atan\"\n             => {\n+                check_abi(abi, Abi::C)?;\n                 let &[f] = check_arg_count(args)?;\n                 // FIXME: Using host floats.\n                 let f = f64::from_bits(this.read_scalar(f)?.to_u64()?);\n@@ -445,6 +470,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             | \"hypot\"\n             | \"atan2\"\n             => {\n+                check_abi(abi, Abi::C)?;\n                 let &[f1, f2] = check_arg_count(args)?;\n                 // FIXME: Using host floats.\n                 let f1 = f64::from_bits(this.read_scalar(f1)?.to_u64()?);\n@@ -460,6 +486,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             | \"ldexp\"\n             | \"scalbn\"\n             => {\n+                check_abi(abi, Abi::C)?;\n                 let &[x, exp] = check_arg_count(args)?;\n                 // For radix-2 (binary) systems, `ldexp` and `scalbn` are the same.\n                 let x = this.read_scalar(x)?.to_f64()?;\n@@ -481,10 +508,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n             // Architecture-specific shims\n             \"llvm.x86.sse2.pause\" if this.tcx.sess.target.arch == \"x86\" || this.tcx.sess.target.arch == \"x86_64\" => {\n+                check_abi(abi, Abi::C)?;\n                 let &[] = check_arg_count(args)?;\n                 this.yield_active_thread();\n             }\n             \"llvm.aarch64.hint\" if this.tcx.sess.target.arch == \"aarch64\" => {\n+                check_abi(abi, Abi::C)?;\n                 let &[hint] = check_arg_count(args)?;\n                 let hint = this.read_scalar(hint)?.to_i32()?;\n                 match hint {\n@@ -499,8 +528,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n             // Platform-specific shims\n             _ => match this.tcx.sess.target.os.as_str() {\n-                \"linux\" | \"macos\" => return shims::posix::foreign_items::EvalContextExt::emulate_foreign_item_by_name(this, link_name, args, dest, ret),\n-                \"windows\" => return shims::windows::foreign_items::EvalContextExt::emulate_foreign_item_by_name(this, link_name, args, dest, ret),\n+                \"linux\" | \"macos\" => return shims::posix::foreign_items::EvalContextExt::emulate_foreign_item_by_name(this, link_name, abi, args, dest, ret),\n+                \"windows\" => return shims::windows::foreign_items::EvalContextExt::emulate_foreign_item_by_name(this, link_name, abi, args, dest, ret),\n                 target => throw_unsup_format!(\"the target `{}` is not supported\", target),\n             }\n         };"}, {"sha": "c2b8809efbb663f38219f82d3f270bfb2d486217", "filename": "src/shims/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b38dc837f2c2ccca6899d08956c94d6b682091ac/src%2Fshims%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b38dc837f2c2ccca6899d08956c94d6b682091ac/src%2Fshims%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fmod.rs?ref=b38dc837f2c2ccca6899d08956c94d6b682091ac", "patch": "@@ -16,6 +16,7 @@ pub mod tls;\n use log::trace;\n \n use rustc_middle::{mir, ty};\n+use rustc_target::spec::abi::Abi;\n \n use crate::*;\n use helpers::check_arg_count;\n@@ -25,6 +26,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn find_mir_or_eval_fn(\n         &mut self,\n         instance: ty::Instance<'tcx>,\n+        abi: Abi,\n         args: &[OpTy<'tcx, Tag>],\n         ret: Option<(PlaceTy<'tcx, Tag>, mir::BasicBlock)>,\n         unwind: Option<mir::BasicBlock>,\n@@ -48,7 +50,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             // to run extra MIR), and Ok(Some(body)) if we found MIR to run for the\n             // foreign function\n             // Any needed call to `goto_block` will be performed by `emulate_foreign_item`.\n-            return this.emulate_foreign_item(instance.def_id(), args, ret, unwind);\n+            return this.emulate_foreign_item(instance.def_id(), abi, args, ret, unwind);\n         }\n \n         // Otherwise, load the MIR."}, {"sha": "e05419f47e938f3a11481bd60340c87ea07c4847", "filename": "src/shims/posix/dlsym.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b38dc837f2c2ccca6899d08956c94d6b682091ac/src%2Fshims%2Fposix%2Fdlsym.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b38dc837f2c2ccca6899d08956c94d6b682091ac/src%2Fshims%2Fposix%2Fdlsym.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Fdlsym.rs?ref=b38dc837f2c2ccca6899d08956c94d6b682091ac", "patch": "@@ -1,6 +1,8 @@\n use rustc_middle::mir;\n+use rustc_target::spec::abi::Abi;\n \n use crate::*;\n+use helpers::check_abi;\n use shims::posix::linux::dlsym as linux;\n use shims::posix::macos::dlsym as macos;\n \n@@ -27,10 +29,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn call_dlsym(\n         &mut self,\n         dlsym: Dlsym,\n+        abi: Abi,\n         args: &[OpTy<'tcx, Tag>],\n         ret: Option<(PlaceTy<'tcx, Tag>, mir::BasicBlock)>,\n     ) -> InterpResult<'tcx> {\n         let this = self.eval_context_mut();\n+        check_abi(abi, Abi::C)?;\n         match dlsym {\n             Dlsym::Linux(dlsym) => linux::EvalContextExt::call_dlsym(this, dlsym, args, ret),\n             Dlsym::MacOs(dlsym) => macos::EvalContextExt::call_dlsym(this, dlsym, args, ret),"}, {"sha": "e576c6f32e90411eadf2488e44c209fda112c31f", "filename": "src/shims/posix/foreign_items.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b38dc837f2c2ccca6899d08956c94d6b682091ac/src%2Fshims%2Fposix%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b38dc837f2c2ccca6899d08956c94d6b682091ac/src%2Fshims%2Fposix%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Fforeign_items.rs?ref=b38dc837f2c2ccca6899d08956c94d6b682091ac", "patch": "@@ -2,9 +2,10 @@ use log::trace;\n \n use rustc_middle::mir;\n use rustc_target::abi::{Align, LayoutOf, Size};\n+use rustc_target::spec::abi::Abi;\n \n use crate::*;\n-use helpers::check_arg_count;\n+use helpers::{check_abi, check_arg_count};\n use shims::posix::fs::EvalContextExt as _;\n use shims::posix::sync::EvalContextExt as _;\n use shims::posix::thread::EvalContextExt as _;\n@@ -14,12 +15,15 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn emulate_foreign_item_by_name(\n         &mut self,\n         link_name: &str,\n+        abi: Abi,\n         args: &[OpTy<'tcx, Tag>],\n         dest: PlaceTy<'tcx, Tag>,\n         ret: mir::BasicBlock,\n     ) -> InterpResult<'tcx, bool> {\n         let this = self.eval_context_mut();\n \n+        check_abi(abi, Abi::C)?;\n+\n         match link_name {\n             // Environment related shims\n             \"getenv\" => {"}, {"sha": "ce119d1090b1c53e3d713dfe6ff63697bba79f7b", "filename": "src/shims/windows/dlsym.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b38dc837f2c2ccca6899d08956c94d6b682091ac/src%2Fshims%2Fwindows%2Fdlsym.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b38dc837f2c2ccca6899d08956c94d6b682091ac/src%2Fshims%2Fwindows%2Fdlsym.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fwindows%2Fdlsym.rs?ref=b38dc837f2c2ccca6899d08956c94d6b682091ac", "patch": "@@ -1,9 +1,10 @@\n use rustc_middle::mir;\n+use rustc_target::spec::abi::Abi;\n \n use log::trace;\n \n use crate::*;\n-use helpers::check_arg_count;\n+use helpers::{check_abi, check_arg_count};\n use shims::windows::sync::EvalContextExt as _;\n \n #[derive(Debug, Copy, Clone)]\n@@ -38,13 +39,16 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn call_dlsym(\n         &mut self,\n         dlsym: Dlsym,\n+        abi: Abi,\n         args: &[OpTy<'tcx, Tag>],\n         ret: Option<(PlaceTy<'tcx, Tag>, mir::BasicBlock)>,\n     ) -> InterpResult<'tcx> {\n         let this = self.eval_context_mut();\n         let (dest, ret) = ret.expect(\"we don't support any diverging dlsym\");\n         assert!(this.tcx.sess.target.os == \"windows\");\n \n+        check_abi(abi, Abi::System)?;\n+\n         match dlsym {\n             Dlsym::AcquireSRWLockExclusive => {\n                 let &[ptr] = check_arg_count(args)?;"}, {"sha": "52b68b9f1bc3612331320f9d7a5599e40a00fd9f", "filename": "src/shims/windows/foreign_items.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b38dc837f2c2ccca6899d08956c94d6b682091ac/src%2Fshims%2Fwindows%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b38dc837f2c2ccca6899d08956c94d6b682091ac/src%2Fshims%2Fwindows%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fwindows%2Fforeign_items.rs?ref=b38dc837f2c2ccca6899d08956c94d6b682091ac", "patch": "@@ -2,22 +2,26 @@ use std::iter;\n \n use rustc_middle::mir;\n use rustc_target::abi::Size;\n+use rustc_target::spec::abi::Abi;\n \n use crate::*;\n-use helpers::check_arg_count;\n+use helpers::{check_abi, check_arg_count};\n use shims::windows::sync::EvalContextExt as _;\n \n impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n     fn emulate_foreign_item_by_name(\n         &mut self,\n         link_name: &str,\n+        abi: Abi,\n         args: &[OpTy<'tcx, Tag>],\n         dest: PlaceTy<'tcx, Tag>,\n         _ret: mir::BasicBlock,\n     ) -> InterpResult<'tcx, bool> {\n         let this = self.eval_context_mut();\n \n+        check_abi(abi, Abi::System)?;\n+\n         // Windows API stubs.\n         // HANDLE = isize\n         // DWORD = ULONG = u32"}]}