{"sha": "2e6825cc8cf5447b7b13423a56a723d80c6116d9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlNjgyNWNjOGNmNTQ0N2I3YjEzNDIzYTU2YTcyM2Q4MGM2MTE2ZDk=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-09-29T03:49:39Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-09-29T03:49:39Z"}, "message": "Use FnSig in rewrite_fn() and rewrite_fn_base()", "tree": {"sha": "7cd8189ff27d6994a0d0ed02e92874d33b41c07f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7cd8189ff27d6994a0d0ed02e92874d33b41c07f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e6825cc8cf5447b7b13423a56a723d80c6116d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e6825cc8cf5447b7b13423a56a723d80c6116d9", "html_url": "https://github.com/rust-lang/rust/commit/2e6825cc8cf5447b7b13423a56a723d80c6116d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e6825cc8cf5447b7b13423a56a723d80c6116d9/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d448c2b26bd26825d8c83315992cc9175e1d09c", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d448c2b26bd26825d8c83315992cc9175e1d09c", "html_url": "https://github.com/rust-lang/rust/commit/7d448c2b26bd26825d8c83315992cc9175e1d09c"}], "stats": {"total": 87, "additions": 23, "deletions": 64}, "files": [{"sha": "f74ae83cdf482939385894284d67a0309680fecb", "filename": "src/items.rs", "status": "modified", "additions": 18, "deletions": 47, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/2e6825cc8cf5447b7b13423a56a723d80c6116d9/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e6825cc8cf5447b7b13423a56a723d80c6116d9/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=2e6825cc8cf5447b7b13423a56a723d80c6116d9", "patch": "@@ -285,13 +285,7 @@ impl<'a> FmtVisitor<'a> {\n         &mut self,\n         indent: Indent,\n         ident: ast::Ident,\n-        fd: &ast::FnDecl,\n-        generics: &ast::Generics,\n-        unsafety: ast::Unsafety,\n-        constness: ast::Constness,\n-        defaultness: ast::Defaultness,\n-        abi: abi::Abi,\n-        vis: &ast::Visibility,\n+        fn_sig: &FnSig,\n         span: Span,\n         block: &ast::Block,\n     ) -> Option<String> {\n@@ -300,19 +294,14 @@ impl<'a> FmtVisitor<'a> {\n         let block_snippet = self.snippet(mk_sp(block.span.lo(), block.span.hi()));\n         let has_body = !block_snippet[1..block_snippet.len() - 1].trim().is_empty()\n             || !context.config.fn_empty_single_line();\n-        let mut newline_brace = newline_for_brace(self.config, &generics.where_clause, has_body);\n+        let mut newline_brace =\n+            newline_for_brace(self.config, &fn_sig.generics.where_clause, has_body);\n \n         let (mut result, force_newline_brace) = try_opt!(rewrite_fn_base(\n             &context,\n             indent,\n             ident,\n-            fd,\n-            generics,\n-            unsafety,\n-            constness,\n-            defaultness,\n-            abi,\n-            vis,\n+            fn_sig,\n             span,\n             newline_brace,\n             has_body,\n@@ -357,13 +346,7 @@ impl<'a> FmtVisitor<'a> {\n             &context,\n             indent,\n             ident,\n-            &sig.decl,\n-            &sig.generics,\n-            sig.unsafety,\n-            sig.constness.node,\n-            ast::Defaultness::Final,\n-            sig.abi,\n-            &ast::Visibility::Inherited,\n+            &FnSig::from_method_sig(sig),\n             span,\n             false,\n             false,\n@@ -1765,30 +1748,24 @@ fn rewrite_fn_base(\n     context: &RewriteContext,\n     indent: Indent,\n     ident: ast::Ident,\n-    fd: &ast::FnDecl,\n-    generics: &ast::Generics,\n-    unsafety: ast::Unsafety,\n-    constness: ast::Constness,\n-    defaultness: ast::Defaultness,\n-    abi: abi::Abi,\n-    vis: &ast::Visibility,\n+    fn_sig: &FnSig,\n     span: Span,\n     newline_brace: bool,\n     has_body: bool,\n     has_braces: bool,\n ) -> Option<(String, bool)> {\n     let mut force_new_line_for_brace = false;\n \n-    let where_clause = &generics.where_clause;\n+    let where_clause = &fn_sig.generics.where_clause;\n \n     let mut result = String::with_capacity(1024);\n     // Vis defaultness constness unsafety abi.\n-    result.push_str(&*format_visibility(vis));\n-    result.push_str(format_defaultness(defaultness));\n-    result.push_str(format_constness(constness));\n-    result.push_str(format_unsafety(unsafety));\n-    if abi != abi::Abi::Rust {\n-        result.push_str(&format_abi(abi, context.config.force_explicit_abi()));\n+    result.push_str(&*format_visibility(&fn_sig.visibility));\n+    result.push_str(format_defaultness(fn_sig.defaultness));\n+    result.push_str(format_constness(fn_sig.constness));\n+    result.push_str(format_unsafety(fn_sig.unsafety));\n+    if fn_sig.abi != abi::Abi::Rust {\n+        result.push_str(&format_abi(fn_sig.abi, context.config.force_explicit_abi()));\n     }\n \n     // fn foo\n@@ -1810,8 +1787,9 @@ fn rewrite_fn_base(\n         indent: indent,\n         offset: used_width,\n     };\n+    let fd = fn_sig.decl;\n     let g_span = mk_sp(span.lo(), fd.output.span().lo());\n-    let generics_str = try_opt!(rewrite_generics(context, generics, shape, g_span));\n+    let generics_str = try_opt!(rewrite_generics(context, fn_sig.generics, shape, g_span));\n     result.push_str(&generics_str);\n \n     let snuggle_angle_bracket = generics_str\n@@ -1873,7 +1851,8 @@ fn rewrite_fn_base(\n     }\n \n     // A conservative estimation, to goal is to be over all parens in generics\n-    let args_start = generics\n+    let args_start = fn_sig\n+        .generics\n         .ty_params\n         .last()\n         .map_or(span.lo(), |tp| end_typaram(tp));\n@@ -2826,15 +2805,7 @@ impl Rewrite for ast::ForeignItem {\n                     context,\n                     shape.indent,\n                     self.ident,\n-                    fn_decl,\n-                    generics,\n-                    ast::Unsafety::Normal,\n-                    ast::Constness::NotConst,\n-                    ast::Defaultness::Final,\n-                    // These are not actually rust functions,\n-                    // but we format them as such.\n-                    abi::Abi::Rust,\n-                    &self.vis,\n+                    &FnSig::new(fn_decl, generics, self.vis.clone()),\n                     span,\n                     false,\n                     false,"}, {"sha": "b4657f2e0d97388d33093f2043750e145a868669", "filename": "src/visitor.rs", "status": "modified", "additions": 5, "deletions": 17, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2e6825cc8cf5447b7b13423a56a723d80c6116d9/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e6825cc8cf5447b7b13423a56a723d80c6116d9/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=2e6825cc8cf5447b7b13423a56a723d80c6116d9", "patch": "@@ -24,7 +24,7 @@ use comment::rewrite_comment;\n use config::{BraceStyle, Config};\n use items::{format_impl, format_struct, format_struct_struct, format_trait,\n             rewrite_associated_impl_type, rewrite_associated_type, rewrite_static,\n-            rewrite_type_alias};\n+            rewrite_type_alias, FnSig};\n use lists::{itemize_list, write_list, DefinitiveListTactic, ListFormatting, SeparatorPlace,\n             SeparatorTactic};\n use macros::{rewrite_macro, MacroPosition};\n@@ -237,34 +237,22 @@ impl<'a> FmtVisitor<'a> {\n         let indent = self.block_indent;\n         let block;\n         let rewrite = match fk {\n-            visit::FnKind::ItemFn(ident, generics, unsafety, constness, abi, vis, b) => {\n+            visit::FnKind::ItemFn(ident, _, _, _, _, _, b) => {\n                 block = b;\n                 self.rewrite_fn(\n                     indent,\n                     ident,\n-                    fd,\n-                    generics,\n-                    unsafety,\n-                    constness.node,\n-                    defaultness,\n-                    abi,\n-                    vis,\n+                    &FnSig::from_fn_kind(&fk, fd, defaultness),\n                     mk_sp(s.lo(), b.span.lo()),\n                     b,\n                 )\n             }\n-            visit::FnKind::Method(ident, sig, vis, b) => {\n+            visit::FnKind::Method(ident, _, _, b) => {\n                 block = b;\n                 self.rewrite_fn(\n                     indent,\n                     ident,\n-                    fd,\n-                    &sig.generics,\n-                    sig.unsafety,\n-                    sig.constness.node,\n-                    defaultness,\n-                    sig.abi,\n-                    vis.unwrap_or(&ast::Visibility::Inherited),\n+                    &FnSig::from_fn_kind(&fk, fd, defaultness),\n                     mk_sp(s.lo(), b.span.lo()),\n                     b,\n                 )"}]}