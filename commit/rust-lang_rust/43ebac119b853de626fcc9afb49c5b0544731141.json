{"sha": "43ebac119b853de626fcc9afb49c5b0544731141", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzZWJhYzExOWI4NTNkZTYyNmZjYzlhZmI0OWM1YjA1NDQ3MzExNDE=", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2021-03-11T23:01:34Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2021-03-20T16:21:44Z"}, "message": "extract `ConstKind::Unevaluated` into a struct", "tree": {"sha": "6daf3bc9f9a34652a593d85af57253d5c2fe7d8a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6daf3bc9f9a34652a593d85af57253d5c2fe7d8a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/43ebac119b853de626fcc9afb49c5b0544731141", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/43ebac119b853de626fcc9afb49c5b0544731141", "html_url": "https://github.com/rust-lang/rust/commit/43ebac119b853de626fcc9afb49c5b0544731141", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/43ebac119b853de626fcc9afb49c5b0544731141/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "41b315a470d583f6446599984ff9ad3bd61012b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/41b315a470d583f6446599984ff9ad3bd61012b2", "html_url": "https://github.com/rust-lang/rust/commit/41b315a470d583f6446599984ff9ad3bd61012b2"}], "stats": {"total": 215, "additions": 129, "deletions": 86}, "files": [{"sha": "d1425523275a1a53b41e393dbb515e80adbc5de0", "filename": "compiler/rustc_codegen_ssa/src/mir/constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43ebac119b853de626fcc9afb49c5b0544731141/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43ebac119b853de626fcc9afb49c5b0544731141/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fconstant.rs?ref=43ebac119b853de626fcc9afb49c5b0544731141", "patch": "@@ -30,7 +30,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             mir::ConstantKind::Val(val, _) => return Ok(val),\n         };\n         match ct.val {\n-            ty::ConstKind::Unevaluated(def, substs, promoted) => self\n+            ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted }) => self\n                 .cx\n                 .tcx()\n                 .const_eval_resolve(ty::ParamEnv::reveal_all(), def, substs, promoted, None)"}, {"sha": "779d6c90f973f022842b9bdd1b756525f9497676", "filename": "compiler/rustc_middle/src/ty/consts.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/43ebac119b853de626fcc9afb49c5b0544731141/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43ebac119b853de626fcc9afb49c5b0544731141/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs?ref=43ebac119b853de626fcc9afb49c5b0544731141", "patch": "@@ -98,18 +98,18 @@ impl<'tcx> Const<'tcx> {\n                 let name = tcx.hir().name(hir_id);\n                 ty::ConstKind::Param(ty::ParamConst::new(index, name))\n             }\n-            _ => ty::ConstKind::Unevaluated(\n-                def.to_global(),\n-                InternalSubsts::identity_for_item(tcx, def.did.to_def_id()),\n-                None,\n-            ),\n+            _ => ty::ConstKind::Unevaluated(ty::Unevaluated {\n+                def: def.to_global(),\n+                substs: InternalSubsts::identity_for_item(tcx, def.did.to_def_id()),\n+                promoted: None,\n+            }),\n         };\n \n         tcx.mk_const(ty::Const { val, ty })\n     }\n \n-    #[inline]\n     /// Interns the given value as a constant.\n+    #[inline]\n     pub fn from_value(tcx: TyCtxt<'tcx>, val: ConstValue<'tcx>, ty: Ty<'tcx>) -> &'tcx Self {\n         tcx.mk_const(Self { val: ConstKind::Value(val), ty })\n     }"}, {"sha": "be1975785b1b404f0d0276e1061cea7a1f9e7880", "filename": "compiler/rustc_middle/src/ty/consts/kind.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/43ebac119b853de626fcc9afb49c5b0544731141/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43ebac119b853de626fcc9afb49c5b0544731141/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs?ref=43ebac119b853de626fcc9afb49c5b0544731141", "patch": "@@ -12,10 +12,18 @@ use rustc_macros::HashStable;\n use rustc_target::abi::Size;\n \n use super::ScalarInt;\n+/// An unevaluated, potentially generic, constant.\n+#[derive(Copy, Clone, Debug, Eq, PartialEq, PartialOrd, Ord, TyEncodable, TyDecodable)]\n+#[derive(Hash, HashStable)]\n+pub struct Unevaluated<'tcx> {\n+    pub def: ty::WithOptConstParam<DefId>,\n+    pub substs: SubstsRef<'tcx>,\n+    pub promoted: Option<Promoted>,\n+}\n \n /// Represents a constant in Rust.\n-#[derive(Copy, Clone, Debug, Eq, PartialEq, PartialOrd, Ord, TyEncodable, TyDecodable, Hash)]\n-#[derive(HashStable)]\n+#[derive(Copy, Clone, Debug, Eq, PartialEq, PartialOrd, Ord, TyEncodable, TyDecodable)]\n+#[derive(Hash, HashStable)]\n pub enum ConstKind<'tcx> {\n     /// A const generic parameter.\n     Param(ty::ParamConst),\n@@ -31,7 +39,7 @@ pub enum ConstKind<'tcx> {\n \n     /// Used in the HIR by using `Unevaluated` everywhere and later normalizing to one of the other\n     /// variants when the code is monomorphic enough for that.\n-    Unevaluated(ty::WithOptConstParam<DefId>, SubstsRef<'tcx>, Option<Promoted>),\n+    Unevaluated(Unevaluated<'tcx>),\n \n     /// Used to hold computed value.\n     Value(ConstValue<'tcx>),\n@@ -102,7 +110,7 @@ impl<'tcx> ConstKind<'tcx> {\n         tcx: TyCtxt<'tcx>,\n         param_env: ParamEnv<'tcx>,\n     ) -> Option<Result<ConstValue<'tcx>, ErrorReported>> {\n-        if let ConstKind::Unevaluated(def, substs, promoted) = self {\n+        if let ConstKind::Unevaluated(Unevaluated { def, substs, promoted }) = self {\n             use crate::mir::interpret::ErrorHandled;\n \n             // HACK(eddyb) this erases lifetimes even though `const_eval_resolve`"}, {"sha": "d6dc81c5b785d1093e4e3b8f3ea685e6e7b24c4c", "filename": "compiler/rustc_middle/src/ty/flags.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/43ebac119b853de626fcc9afb49c5b0544731141/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43ebac119b853de626fcc9afb49c5b0544731141/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs?ref=43ebac119b853de626fcc9afb49c5b0544731141", "patch": "@@ -270,10 +270,7 @@ impl FlagComputation {\n     fn add_const(&mut self, c: &ty::Const<'_>) {\n         self.add_ty(c.ty);\n         match c.val {\n-            ty::ConstKind::Unevaluated(_, substs, _) => {\n-                self.add_substs(substs);\n-                self.add_flags(TypeFlags::HAS_CT_PROJECTION);\n-            }\n+            ty::ConstKind::Unevaluated(unevaluated) => self.add_unevaluated_const(unevaluated),\n             ty::ConstKind::Infer(infer) => {\n                 self.add_flags(TypeFlags::STILL_FURTHER_SPECIALIZABLE);\n                 match infer {\n@@ -297,6 +294,11 @@ impl FlagComputation {\n         }\n     }\n \n+    fn add_unevaluated_const(&mut self, ct: ty::Unevaluated<'tcx>) {\n+        self.add_substs(ct.substs);\n+        self.add_flags(TypeFlags::HAS_CT_PROJECTION);\n+    }\n+\n     fn add_existential_projection(&mut self, projection: &ty::ExistentialProjection<'_>) {\n         self.add_substs(projection.substs);\n         self.add_ty(projection.ty);"}, {"sha": "e6b4739d0a2f55fdb37684696f882ed64ac82a15", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43ebac119b853de626fcc9afb49c5b0544731141/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43ebac119b853de626fcc9afb49c5b0544731141/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=43ebac119b853de626fcc9afb49c5b0544731141", "patch": "@@ -55,7 +55,7 @@ pub use rustc_type_ir::*;\n \n pub use self::binding::BindingMode;\n pub use self::binding::BindingMode::*;\n-pub use self::consts::{Const, ConstInt, ConstKind, InferConst, ScalarInt, ValTree};\n+pub use self::consts::{Const, ConstInt, ConstKind, InferConst, ScalarInt, Unevaluated, ValTree};\n pub use self::context::{\n     tls, CanonicalUserType, CanonicalUserTypeAnnotation, CanonicalUserTypeAnnotations,\n     CtxtInterners, DelaySpanBugEmitted, FreeRegionInfo, GeneratorInteriorTypeCause, GlobalCtxt,"}, {"sha": "3b72cc011d6ea2253f6b7e138bd999dd3342018e", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43ebac119b853de626fcc9afb49c5b0544731141/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43ebac119b853de626fcc9afb49c5b0544731141/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=43ebac119b853de626fcc9afb49c5b0544731141", "patch": "@@ -915,7 +915,7 @@ pub trait PrettyPrinter<'tcx>:\n         }\n \n         match ct.val {\n-            ty::ConstKind::Unevaluated(def, substs, promoted) => {\n+            ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted }) => {\n                 if let Some(promoted) = promoted {\n                     p!(print_value_path(def.did, substs));\n                     p!(write(\"::{:?}\", promoted));"}, {"sha": "c936c30f456dd93736ea6c2c8010b1cc1106fa4d", "filename": "compiler/rustc_middle/src/ty/relate.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/43ebac119b853de626fcc9afb49c5b0544731141/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43ebac119b853de626fcc9afb49c5b0544731141/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs?ref=43ebac119b853de626fcc9afb49c5b0544731141", "patch": "@@ -531,24 +531,26 @@ pub fn super_relate_consts<R: TypeRelation<'tcx>>(\n             check_const_value_eq(relation, a_val, b_val, a, b)?\n         }\n \n-        (\n-            ty::ConstKind::Unevaluated(a_def, a_substs, None),\n-            ty::ConstKind::Unevaluated(b_def, b_substs, None),\n-        ) if tcx.features().const_evaluatable_checked && !relation.visit_ct_substs() => {\n-            tcx.try_unify_abstract_consts(((a_def, a_substs), (b_def, b_substs)))\n+        (ty::ConstKind::Unevaluated(au), ty::ConstKind::Unevaluated(bu))\n+            if tcx.features().const_evaluatable_checked && !relation.visit_ct_substs() =>\n+        {\n+            tcx.try_unify_abstract_consts(((au.def, au.substs), (bu.def, bu.substs)))\n         }\n \n         // While this is slightly incorrect, it shouldn't matter for `min_const_generics`\n         // and is the better alternative to waiting until `const_evaluatable_checked` can\n         // be stabilized.\n-        (\n-            ty::ConstKind::Unevaluated(a_def, a_substs, a_promoted),\n-            ty::ConstKind::Unevaluated(b_def, b_substs, b_promoted),\n-        ) if a_def == b_def && a_promoted == b_promoted => {\n+        (ty::ConstKind::Unevaluated(au), ty::ConstKind::Unevaluated(bu))\n+            if au.def == bu.def && au.promoted == bu.promoted =>\n+        {\n             let substs =\n-                relation.relate_with_variance(ty::Variance::Invariant, a_substs, b_substs)?;\n+                relation.relate_with_variance(ty::Variance::Invariant, au.substs, bu.substs)?;\n             return Ok(tcx.mk_const(ty::Const {\n-                val: ty::ConstKind::Unevaluated(a_def, substs, a_promoted),\n+                val: ty::ConstKind::Unevaluated(ty::Unevaluated {\n+                    def: au.def,\n+                    substs,\n+                    promoted: au.promoted,\n+                }),\n                 ty: a.ty,\n             }));\n         }"}, {"sha": "2da23b331e0cb19a41e5e64d0664988ba1b344d1", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/43ebac119b853de626fcc9afb49c5b0544731141/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43ebac119b853de626fcc9afb49c5b0544731141/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=43ebac119b853de626fcc9afb49c5b0544731141", "patch": "@@ -1031,8 +1031,12 @@ impl<'tcx> TypeFoldable<'tcx> for ty::ConstKind<'tcx> {\n         match self {\n             ty::ConstKind::Infer(ic) => ty::ConstKind::Infer(ic.fold_with(folder)),\n             ty::ConstKind::Param(p) => ty::ConstKind::Param(p.fold_with(folder)),\n-            ty::ConstKind::Unevaluated(did, substs, promoted) => {\n-                ty::ConstKind::Unevaluated(did, substs.fold_with(folder), promoted)\n+            ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted }) => {\n+                ty::ConstKind::Unevaluated(ty::Unevaluated {\n+                    def,\n+                    substs: substs.fold_with(folder),\n+                    promoted,\n+                })\n             }\n             ty::ConstKind::Value(_)\n             | ty::ConstKind::Bound(..)\n@@ -1045,7 +1049,7 @@ impl<'tcx> TypeFoldable<'tcx> for ty::ConstKind<'tcx> {\n         match *self {\n             ty::ConstKind::Infer(ic) => ic.visit_with(visitor),\n             ty::ConstKind::Param(p) => p.visit_with(visitor),\n-            ty::ConstKind::Unevaluated(_, substs, _) => substs.visit_with(visitor),\n+            ty::ConstKind::Unevaluated(ct) => ct.substs.visit_with(visitor),\n             ty::ConstKind::Value(_)\n             | ty::ConstKind::Bound(..)\n             | ty::ConstKind::Placeholder(_)"}, {"sha": "c2fe5f1ef3f625975eed1ae231d5a5dfa11c8cfe", "filename": "compiler/rustc_middle/src/ty/walk.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/43ebac119b853de626fcc9afb49c5b0544731141/compiler%2Frustc_middle%2Fsrc%2Fty%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43ebac119b853de626fcc9afb49c5b0544731141/compiler%2Frustc_middle%2Fsrc%2Fty%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fwalk.rs?ref=43ebac119b853de626fcc9afb49c5b0544731141", "patch": "@@ -195,8 +195,8 @@ fn push_inner<'tcx>(stack: &mut TypeWalkerStack<'tcx>, parent: GenericArg<'tcx>)\n                 | ty::ConstKind::Value(_)\n                 | ty::ConstKind::Error(_) => {}\n \n-                ty::ConstKind::Unevaluated(_, substs, _) => {\n-                    stack.extend(substs.iter().rev());\n+                ty::ConstKind::Unevaluated(ct) => {\n+                    stack.extend(ct.substs.iter().rev());\n                 }\n             }\n         }"}, {"sha": "aaa2bf4ff1b50740f0a048c9d19ee5456cec64b7", "filename": "compiler/rustc_mir/src/borrow_check/type_check/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/43ebac119b853de626fcc9afb49c5b0544731141/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43ebac119b853de626fcc9afb49c5b0544731141/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=43ebac119b853de626fcc9afb49c5b0544731141", "patch": "@@ -316,14 +316,12 @@ impl<'a, 'b, 'tcx> Visitor<'tcx> for TypeVerifier<'a, 'b, 'tcx> {\n             let tcx = self.tcx();\n             let maybe_uneval = match constant.literal {\n                 ConstantKind::Ty(ct) => match ct.val {\n-                    ty::ConstKind::Unevaluated(def, substs, promoted) => {\n-                        Some((def, substs, promoted))\n-                    }\n+                    ty::ConstKind::Unevaluated(uv) => Some(uv),\n                     _ => None,\n                 },\n                 _ => None,\n             };\n-            if let Some((def, substs, promoted)) = maybe_uneval {\n+            if let Some(ty::Unevaluated { def, substs, promoted }) = maybe_uneval {\n                 if let Some(promoted) = promoted {\n                     let check_err = |verifier: &mut TypeVerifier<'a, 'b, 'tcx>,\n                                      promoted: &Body<'tcx>,"}, {"sha": "c70b57e631a80c6693d17f2c51b3bfea44adecfb", "filename": "compiler/rustc_mir/src/interpret/operand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43ebac119b853de626fcc9afb49c5b0544731141/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43ebac119b853de626fcc9afb49c5b0544731141/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Foperand.rs?ref=43ebac119b853de626fcc9afb49c5b0544731141", "patch": "@@ -560,7 +560,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         match val.val {\n             ty::ConstKind::Param(_) | ty::ConstKind::Bound(..) => throw_inval!(TooGeneric),\n             ty::ConstKind::Error(_) => throw_inval!(AlreadyReported(ErrorReported)),\n-            ty::ConstKind::Unevaluated(def, substs, promoted) => {\n+            ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted }) => {\n                 let instance = self.resolve(def, substs)?;\n                 Ok(self.eval_to_allocation(GlobalId { instance, promoted })?.into())\n             }"}, {"sha": "a4c90a5f68fae14d43a8004f10d2e307ad6b4461", "filename": "compiler/rustc_mir/src/monomorphize/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43ebac119b853de626fcc9afb49c5b0544731141/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43ebac119b853de626fcc9afb49c5b0544731141/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs?ref=43ebac119b853de626fcc9afb49c5b0544731141", "patch": "@@ -646,7 +646,7 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n \n         match substituted_constant.val {\n             ty::ConstKind::Value(val) => collect_const_value(self.tcx, val, self.output),\n-            ty::ConstKind::Unevaluated(def, substs, promoted) => {\n+            ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted }) => {\n                 match self.tcx.const_eval_resolve(param_env, def, substs, promoted, None) {\n                     Ok(val) => collect_const_value(self.tcx, val, self.output),\n                     Err(ErrorHandled::Reported(ErrorReported) | ErrorHandled::Linted) => {}"}, {"sha": "30e758c7fdf05f85502434243480faedac84a77a", "filename": "compiler/rustc_mir/src/monomorphize/polymorphize.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/43ebac119b853de626fcc9afb49c5b0544731141/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpolymorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43ebac119b853de626fcc9afb49c5b0544731141/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpolymorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpolymorphize.rs?ref=43ebac119b853de626fcc9afb49c5b0544731141", "patch": "@@ -299,7 +299,7 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for MarkUsedGenericParams<'a, 'tcx> {\n                 self.unused_parameters.clear(param.index);\n                 ControlFlow::CONTINUE\n             }\n-            ty::ConstKind::Unevaluated(def, _, Some(p))\n+            ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs: _, promoted: Some(p)})\n                 // Avoid considering `T` unused when constants are of the form:\n                 //   `<Self as Foo<T>>::foo::promoted[p]`\n                 if self.def_id == def.did && !self.tcx.generics_of(def.did).has_self =>\n@@ -310,10 +310,10 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for MarkUsedGenericParams<'a, 'tcx> {\n                 self.visit_body(&promoted[p]);\n                 ControlFlow::CONTINUE\n             }\n-            ty::ConstKind::Unevaluated(def, unevaluated_substs, None)\n+            ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted: None })\n                 if self.tcx.def_kind(def.did) == DefKind::AnonConst =>\n             {\n-                self.visit_child_body(def.did, unevaluated_substs);\n+                self.visit_child_body(def.did, substs);\n                 ControlFlow::CONTINUE\n             }\n             _ => c.super_visit_with(self),"}, {"sha": "36644ab3c5918e4dda413a17055ef9e884155711", "filename": "compiler/rustc_mir/src/transform/check_consts/qualifs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43ebac119b853de626fcc9afb49c5b0544731141/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43ebac119b853de626fcc9afb49c5b0544731141/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs?ref=43ebac119b853de626fcc9afb49c5b0544731141", "patch": "@@ -247,7 +247,7 @@ where\n \n     // Check the qualifs of the value of `const` items.\n     if let Some(ct) = constant.literal.const_for_ty() {\n-        if let ty::ConstKind::Unevaluated(def, _, promoted) = ct.val {\n+        if let ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs: _, promoted }) = ct.val {\n             assert!(promoted.is_none());\n             // Don't peek inside trait associated constants.\n             if cx.tcx.trait_of_item(def.did).is_none() {"}, {"sha": "7706316c96516a3e3057837b58a32f31eb6cec9c", "filename": "compiler/rustc_mir/src/transform/const_prop.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/43ebac119b853de626fcc9afb49c5b0544731141/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43ebac119b853de626fcc9afb49c5b0544731141/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs?ref=43ebac119b853de626fcc9afb49c5b0544731141", "patch": "@@ -491,7 +491,11 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n                     let lint_only = match c.literal {\n                         ConstantKind::Ty(ct) => match ct.val {\n                             // Promoteds must lint and not error as the user didn't ask for them\n-                            ConstKind::Unevaluated(_, _, Some(_)) => true,\n+                            ConstKind::Unevaluated(ty::Unevaluated {\n+                                def: _,\n+                                substs: _,\n+                                promoted: Some(_),\n+                            }) => true,\n                             // Out of backwards compatibility we cannot report hard errors in unused\n                             // generic functions using associated constants of the generic parameters.\n                             _ => c.literal.needs_subst(),"}, {"sha": "b6f80763bc8c4c2b94b445b999a0d1bb85c2f3bb", "filename": "compiler/rustc_mir/src/transform/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43ebac119b853de626fcc9afb49c5b0544731141/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43ebac119b853de626fcc9afb49c5b0544731141/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs?ref=43ebac119b853de626fcc9afb49c5b0544731141", "patch": "@@ -630,7 +630,7 @@ impl Inliner<'tcx> {\n                 caller_body.required_consts.extend(\n                     callee_body.required_consts.iter().copied().filter(|&ct| {\n                         match ct.literal.const_for_ty() {\n-                            Some(ct) => matches!(ct.val, ConstKind::Unevaluated(_, _, _)),\n+                            Some(ct) => matches!(ct.val, ConstKind::Unevaluated(_)),\n                             None => true,\n                         }\n                     }),"}, {"sha": "c5a03f3a045b2fb1542e483cd3f9243e433b4574", "filename": "compiler/rustc_mir/src/transform/promote_consts.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/43ebac119b853de626fcc9afb49c5b0544731141/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43ebac119b853de626fcc9afb49c5b0544731141/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fpromote_consts.rs?ref=43ebac119b853de626fcc9afb49c5b0544731141", "patch": "@@ -1001,17 +1001,17 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n                     literal: tcx\n                         .mk_const(ty::Const {\n                             ty,\n-                            val: ty::ConstKind::Unevaluated(\n+                            val: ty::ConstKind::Unevaluated(ty::Unevaluated {\n                                 def,\n-                                InternalSubsts::for_item(tcx, def.did, |param, _| {\n+                                substs: InternalSubsts::for_item(tcx, def.did, |param, _| {\n                                     if let ty::GenericParamDefKind::Lifetime = param.kind {\n                                         tcx.lifetimes.re_erased.into()\n                                     } else {\n                                         tcx.mk_param_from_def(param)\n                                     }\n                                 }),\n-                                Some(promoted_id),\n-                            ),\n+                                promoted: Some(promoted_id),\n+                            }),\n                         })\n                         .into(),\n                 }))"}, {"sha": "8b64ad65ab35ca5ac000eb3c983ce0ea71d14adf", "filename": "compiler/rustc_mir/src/transform/required_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43ebac119b853de626fcc9afb49c5b0544731141/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Frequired_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43ebac119b853de626fcc9afb49c5b0544731141/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Frequired_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Frequired_consts.rs?ref=43ebac119b853de626fcc9afb49c5b0544731141", "patch": "@@ -15,7 +15,7 @@ impl<'a, 'tcx> RequiredConstsVisitor<'a, 'tcx> {\n impl<'a, 'tcx> Visitor<'tcx> for RequiredConstsVisitor<'a, 'tcx> {\n     fn visit_constant(&mut self, constant: &Constant<'tcx>, _: Location) {\n         if let Some(ct) = constant.literal.const_for_ty() {\n-            if let ConstKind::Unevaluated(_, _, _) = ct.val {\n+            if let ConstKind::Unevaluated(_) = ct.val {\n                 self.required_consts.push(*constant);\n             }\n         }"}, {"sha": "9abee283160a47bd4fecaf87d550aad708bb0db3", "filename": "compiler/rustc_mir_build/src/thir/cx/expr.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/43ebac119b853de626fcc9afb49c5b0544731141/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43ebac119b853de626fcc9afb49c5b0544731141/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs?ref=43ebac119b853de626fcc9afb49c5b0544731141", "patch": "@@ -707,11 +707,11 @@ impl<'thir, 'tcx> Cx<'thir, 'tcx> {\n                                 // and not the beginning of discriminants (which is always `0`)\n                                 let substs = InternalSubsts::identity_for_item(self.tcx(), did);\n                                 let lhs = mk_const(self.tcx().mk_const(ty::Const {\n-                                    val: ty::ConstKind::Unevaluated(\n-                                        ty::WithOptConstParam::unknown(did),\n+                                    val: ty::ConstKind::Unevaluated(ty::Unevaluated {\n+                                        def: ty::WithOptConstParam::unknown(did),\n                                         substs,\n-                                        None,\n-                                    ),\n+                                        promoted: None,\n+                                    }),\n                                     ty: var_ty,\n                                 }));\n                                 let bin =\n@@ -905,11 +905,11 @@ impl<'thir, 'tcx> Cx<'thir, 'tcx> {\n                 debug!(\"convert_path_expr: (const) user_ty={:?}\", user_ty);\n                 ExprKind::Literal {\n                     literal: self.tcx.mk_const(ty::Const {\n-                        val: ty::ConstKind::Unevaluated(\n-                            ty::WithOptConstParam::unknown(def_id),\n+                        val: ty::ConstKind::Unevaluated(ty::Unevaluated {\n+                            def: ty::WithOptConstParam::unknown(def_id),\n                             substs,\n-                            None,\n-                        ),\n+                            promoted: None,\n+                        }),\n                         ty: self.typeck_results().node_type(expr.hir_id),\n                     }),\n                     user_ty,"}, {"sha": "495758cedb165d8b501203d7b55ec48befeabe51", "filename": "compiler/rustc_trait_selection/src/traits/auto_trait.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/43ebac119b853de626fcc9afb49c5b0544731141/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43ebac119b853de626fcc9afb49c5b0544731141/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs?ref=43ebac119b853de626fcc9afb49c5b0544731141", "patch": "@@ -803,7 +803,12 @@ impl AutoTraitFinder<'tcx> {\n                 }\n                 ty::PredicateKind::ConstEquate(c1, c2) => {\n                     let evaluate = |c: &'tcx ty::Const<'tcx>| {\n-                        if let ty::ConstKind::Unevaluated(def, substs, promoted) = c.val {\n+                        if let ty::ConstKind::Unevaluated(ty::Unevaluated {\n+                            def,\n+                            substs,\n+                            promoted,\n+                        }) = c.val\n+                        {\n                             match select.infcx().const_eval_resolve(\n                                 obligation.param_env,\n                                 def,"}, {"sha": "a5db742136a6cd39b2f9cdb9760860fd3eb2bb2d", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 28, "deletions": 17, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/43ebac119b853de626fcc9afb49c5b0544731141/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43ebac119b853de626fcc9afb49c5b0544731141/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=43ebac119b853de626fcc9afb49c5b0544731141", "patch": "@@ -239,7 +239,9 @@ impl AbstractConst<'tcx> {\n         ct: &ty::Const<'tcx>,\n     ) -> Result<Option<AbstractConst<'tcx>>, ErrorReported> {\n         match ct.val {\n-            ty::ConstKind::Unevaluated(def, substs, None) => AbstractConst::new(tcx, def, substs),\n+            ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted: _ }) => {\n+                AbstractConst::new(tcx, def, substs)\n+            }\n             ty::ConstKind::Error(_) => Err(ErrorReported),\n             _ => Ok(None),\n         }\n@@ -532,22 +534,25 @@ impl<'a, 'tcx> AbstractConstBuilder<'a, 'tcx> {\n             if let Some(next) = self.build_terminator(block.terminator())? {\n                 block = &self.body.basic_blocks()[next];\n             } else {\n-                assert_eq!(self.locals[mir::RETURN_PLACE], self.nodes.last().unwrap());\n+                break;\n+            }\n+        }\n+\n+        assert_eq!(self.locals[mir::RETURN_PLACE], self.nodes.last().unwrap());\n+        for n in self.nodes.iter() {\n+            if let Node::Leaf(ty::Const { val: ty::ConstKind::Unevaluated(ct), ty: _ }) = n.node {\n                 // `AbstractConst`s should not contain any promoteds as they require references which\n                 // are not allowed.\n-                assert!(!self.nodes.iter().any(|n| matches!(\n-                    n.node,\n-                    Node::Leaf(ty::Const { val: ty::ConstKind::Unevaluated(_, _, Some(_)), ty: _ })\n-                )));\n-\n-                self.nodes[self.locals[mir::RETURN_PLACE]].used = true;\n-                if let Some(&unused) = self.nodes.iter().find(|n| !n.used) {\n-                    self.error(Some(unused.span), \"dead code\")?;\n-                }\n-\n-                return Ok(self.tcx.arena.alloc_from_iter(self.nodes.into_iter().map(|n| n.node)));\n+                assert_eq!(ct.promoted, None);\n             }\n         }\n+\n+        self.nodes[self.locals[mir::RETURN_PLACE]].used = true;\n+        if let Some(&unused) = self.nodes.iter().find(|n| !n.used) {\n+            self.error(Some(unused.span), \"dead code\")?;\n+        }\n+\n+        Ok(self.tcx.arena.alloc_from_iter(self.nodes.into_iter().map(|n| n.node)))\n     }\n }\n \n@@ -673,10 +678,16 @@ pub(super) fn try_unify<'tcx>(\n                 // we do not want to use `assert_eq!(a(), b())` to infer that `N` and `M` have to be `1`. This\n                 // means that we only allow inference variables if they are equal.\n                 (ty::ConstKind::Infer(a_val), ty::ConstKind::Infer(b_val)) => a_val == b_val,\n-                (\n-                    ty::ConstKind::Unevaluated(a_def, a_substs, None),\n-                    ty::ConstKind::Unevaluated(b_def, b_substs, None),\n-                ) => a_def == b_def && a_substs == b_substs,\n+                // We expand generic anonymous constants at the start of this function, so this\n+                // branch should only be taking when dealing with associated constants, at\n+                // which point directly comparing them seems like the desired behavior.\n+                //\n+                // FIXME(const_evaluatable_checked): This isn't actually the case.\n+                // We also take this branch for concrete anonymous constants and\n+                // expand generic anonymous constants with concrete substs.\n+                (ty::ConstKind::Unevaluated(a_uv), ty::ConstKind::Unevaluated(b_uv)) => {\n+                    a_uv == b_uv\n+                }\n                 // FIXME(const_evaluatable_checked): We may want to either actually try\n                 // to evaluate `a_ct` and `b_ct` if they are are fully concrete or something like\n                 // this, for now we just return false here."}, {"sha": "83b537a78951c147b417386bc60b1652799fa465", "filename": "compiler/rustc_trait_selection/src/traits/fulfill.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/43ebac119b853de626fcc9afb49c5b0544731141/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43ebac119b853de626fcc9afb49c5b0544731141/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs?ref=43ebac119b853de626fcc9afb49c5b0544731141", "patch": "@@ -516,15 +516,13 @@ impl<'a, 'b, 'tcx> FulfillProcessor<'a, 'b, 'tcx> {\n                         // if the constants depend on generic parameters.\n                         //\n                         // Let's just see where this breaks :shrug:\n-                        if let (\n-                            ty::ConstKind::Unevaluated(a_def, a_substs, None),\n-                            ty::ConstKind::Unevaluated(b_def, b_substs, None),\n-                        ) = (c1.val, c2.val)\n+                        if let (ty::ConstKind::Unevaluated(a), ty::ConstKind::Unevaluated(b)) =\n+                            (c1.val, c2.val)\n                         {\n                             if self\n                                 .selcx\n                                 .tcx()\n-                                .try_unify_abstract_consts(((a_def, a_substs), (b_def, b_substs)))\n+                                .try_unify_abstract_consts(((a.def, a.substs), (b.def, b.substs)))\n                             {\n                                 return ProcessResult::Changed(vec![]);\n                             }\n@@ -534,7 +532,12 @@ impl<'a, 'b, 'tcx> FulfillProcessor<'a, 'b, 'tcx> {\n                     let stalled_on = &mut pending_obligation.stalled_on;\n \n                     let mut evaluate = |c: &'tcx Const<'tcx>| {\n-                        if let ty::ConstKind::Unevaluated(def, substs, promoted) = c.val {\n+                        if let ty::ConstKind::Unevaluated(ty::Unevaluated {\n+                            def,\n+                            substs,\n+                            promoted,\n+                        }) = c.val\n+                        {\n                             match self.selcx.infcx().const_eval_resolve(\n                                 obligation.param_env,\n                                 def,"}, {"sha": "14cec0029f2ec383d250f112f5bf0e7996277b2c", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/43ebac119b853de626fcc9afb49c5b0544731141/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43ebac119b853de626fcc9afb49c5b0544731141/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=43ebac119b853de626fcc9afb49c5b0544731141", "patch": "@@ -556,7 +556,12 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     debug!(?c1, ?c2, \"evaluate_predicate_recursively: equating consts\");\n \n                     let evaluate = |c: &'tcx ty::Const<'tcx>| {\n-                        if let ty::ConstKind::Unevaluated(def, substs, promoted) = c.val {\n+                        if let ty::ConstKind::Unevaluated(ty::Unevaluated {\n+                            def,\n+                            substs,\n+                            promoted,\n+                        }) = c.val\n+                        {\n                             self.infcx\n                                 .const_eval_resolve(\n                                     obligation.param_env,"}, {"sha": "aee128dec7d12b430f86103416691fda55ead933", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43ebac119b853de626fcc9afb49c5b0544731141/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43ebac119b853de626fcc9afb49c5b0544731141/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=43ebac119b853de626fcc9afb49c5b0544731141", "patch": "@@ -430,7 +430,7 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n \n                 GenericArgKind::Const(constant) => {\n                     match constant.val {\n-                        ty::ConstKind::Unevaluated(def, substs, promoted) => {\n+                        ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted }) => {\n                             assert!(promoted.is_none());\n \n                             let obligations = self.nominal_obligations(def.did, substs);"}, {"sha": "162fccc6020365b0fa51abef9cc9f5793d2407f4", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/43ebac119b853de626fcc9afb49c5b0544731141/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43ebac119b853de626fcc9afb49c5b0544731141/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=43ebac119b853de626fcc9afb49c5b0544731141", "patch": "@@ -2212,10 +2212,11 @@ fn const_evaluatable_predicates_of<'tcx>(\n         fn visit_anon_const(&mut self, c: &'tcx hir::AnonConst) {\n             let def_id = self.tcx.hir().local_def_id(c.hir_id);\n             let ct = ty::Const::from_anon_const(self.tcx, def_id);\n-            if let ty::ConstKind::Unevaluated(def, substs, None) = ct.val {\n+            if let ty::ConstKind::Unevaluated(uv) = ct.val {\n+                assert_eq!(uv.promoted, None);\n                 let span = self.tcx.hir().span(c.hir_id);\n                 self.preds.insert((\n-                    ty::PredicateKind::ConstEvaluatable(def, substs).to_predicate(self.tcx),\n+                    ty::PredicateKind::ConstEvaluatable(uv.def, uv.substs).to_predicate(self.tcx),\n                     span,\n                 ));\n             }"}]}