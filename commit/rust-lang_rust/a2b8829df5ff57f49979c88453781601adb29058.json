{"sha": "a2b8829df5ff57f49979c88453781601adb29058", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyYjg4MjlkZjVmZjU3ZjQ5OTc5Yzg4NDUzNzgxNjAxYWRiMjkwNTg=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-10-14T12:10:54Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-10-14T12:10:54Z"}, "message": "typeck: don't collect to a vector when unnecessary", "tree": {"sha": "82f47664c07ebcf6279ead782c0f751caff7bf17", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82f47664c07ebcf6279ead782c0f751caff7bf17"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a2b8829df5ff57f49979c88453781601adb29058", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a2b8829df5ff57f49979c88453781601adb29058", "html_url": "https://github.com/rust-lang/rust/commit/a2b8829df5ff57f49979c88453781601adb29058", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a2b8829df5ff57f49979c88453781601adb29058/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2bab4bf486aca3c3ba105e9931f56f6ddf445c3d", "url": "https://api.github.com/repos/rust-lang/rust/commits/2bab4bf486aca3c3ba105e9931f56f6ddf445c3d", "html_url": "https://github.com/rust-lang/rust/commit/2bab4bf486aca3c3ba105e9931f56f6ddf445c3d"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "1978f86545e7bfc5d4372273401a45675b1e2891", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a2b8829df5ff57f49979c88453781601adb29058/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2b8829df5ff57f49979c88453781601adb29058/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=a2b8829df5ff57f49979c88453781601adb29058", "patch": "@@ -1592,8 +1592,8 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx>+'o {\n         debug!(\"ty_of_fn\");\n \n         let tcx = self.tcx();\n-        let input_tys: Vec<Ty> =\n-            decl.inputs.iter().map(|a| self.ty_of_arg(a, None)).collect();\n+        let input_tys =\n+            decl.inputs.iter().map(|a| self.ty_of_arg(a, None));\n \n         let output_ty = match decl.output {\n             hir::Return(ref output) => self.ast_ty_to_ty(output),\n@@ -1603,7 +1603,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx>+'o {\n         debug!(\"ty_of_fn: output_ty={:?}\", output_ty);\n \n         let bare_fn_ty = ty::Binder::bind(tcx.mk_fn_sig(\n-            input_tys.into_iter(),\n+            input_tys,\n             output_ty,\n             decl.variadic,\n             unsafety,"}, {"sha": "c9158af178feae0c60341a58f1a52c6dcb534273", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a2b8829df5ff57f49979c88453781601adb29058/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2b8829df5ff57f49979c88453781601adb29058/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=a2b8829df5ff57f49979c88453781601adb29058", "patch": "@@ -626,7 +626,7 @@ https://doc.rust-lang.org/reference/types.html#trait-objects\");\n \n         // Typecheck the patterns first, so that we get types for all the\n         // bindings.\n-        let all_arm_pats_diverge: Vec<_> = arms.iter().map(|arm| {\n+        let all_arm_pats_diverge = arms.iter().map(|arm| {\n             let mut all_pats_diverge = Diverges::WarnedAlways;\n             for p in &arm.pats {\n                 self.diverges.set(Diverges::Maybe);\n@@ -642,7 +642,7 @@ https://doc.rust-lang.org/reference/types.html#trait-objects\");\n                 Diverges::Maybe => Diverges::Maybe,\n                 Diverges::Always | Diverges::WarnedAlways => Diverges::WarnedAlways,\n             }\n-        }).collect();\n+        });\n \n         // Now typecheck the blocks.\n         //"}, {"sha": "d840c587464ee7d0f5857b4289fd5f89b06deedf", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a2b8829df5ff57f49979c88453781601adb29058/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2b8829df5ff57f49979c88453781601adb29058/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=a2b8829df5ff57f49979c88453781601adb29058", "patch": "@@ -1769,7 +1769,7 @@ fn check_transparent<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, sp: Span, def_id: De\n     }\n \n     // For each field, figure out if it's known to be a ZST and align(1)\n-    let field_infos: Vec<_> = adt.non_enum_variant().fields.iter().map(|field| {\n+    let field_infos = adt.non_enum_variant().fields.iter().map(|field| {\n         let ty = field.ty(tcx, Substs::identity_for_item(tcx, field.did));\n         let param_env = tcx.param_env(field.did);\n         let layout = tcx.layout_of(param_env.and(ty));\n@@ -1778,19 +1778,19 @@ fn check_transparent<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, sp: Span, def_id: De\n         let zst = layout.map(|layout| layout.is_zst()).unwrap_or(false);\n         let align1 = layout.map(|layout| layout.align.abi() == 1).unwrap_or(false);\n         (span, zst, align1)\n-    }).collect();\n+    });\n \n-    let non_zst_fields = field_infos.iter().filter(|(_span, zst, _align1)| !*zst);\n+    let non_zst_fields = field_infos.clone().filter(|(_span, zst, _align1)| !*zst);\n     let non_zst_count = non_zst_fields.clone().count();\n     if non_zst_count != 1 {\n-        let field_spans: Vec<_> = non_zst_fields.map(|(span, _zst, _align1)| *span).collect();\n+        let field_spans: Vec<_> = non_zst_fields.map(|(span, _zst, _align1)| span).collect();\n         struct_span_err!(tcx.sess, sp, E0690,\n                          \"transparent struct needs exactly one non-zero-sized field, but has {}\",\n                          non_zst_count)\n         .span_note(field_spans, \"non-zero-sized field\")\n         .emit();\n     }\n-    for &(span, zst, align1) in &field_infos {\n+    for (span, zst, align1) in field_infos {\n         if zst && !align1 {\n             span_err!(tcx.sess, span, E0691,\n                       \"zero-sized field in transparent struct has alignment larger than 1\");"}]}