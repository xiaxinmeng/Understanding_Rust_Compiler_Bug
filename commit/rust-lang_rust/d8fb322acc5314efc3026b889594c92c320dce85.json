{"sha": "d8fb322acc5314efc3026b889594c92c320dce85", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4ZmIzMjJhY2M1MzE0ZWZjMzAyNmI4ODk1OTRjOTJjMzIwZGNlODU=", "commit": {"author": {"name": "Eugene Bulkin", "email": "ebulkin@caltech.edu", "date": "2017-04-01T07:07:55Z"}, "committer": {"name": "Eugene Bulkin", "email": "ebulkin@caltech.edu", "date": "2017-04-01T07:07:55Z"}, "message": "Clean up std::ascii sub-level docs.\n\n* Change `utf8` variable names to `non_ascii` to be more clear, since\nASCII and UTF-8 are compatible.\n\n* Fix `EscapeDefault` struct description to follow the typical iterator\nmethod format with a link to the generating function.\n\n* Add more `escape_default` examples to cover every case mentioned in\nthe function description itself.", "tree": {"sha": "bd388529e3723f91b6ecf731a249d4d43d4f3ad8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd388529e3723f91b6ecf731a249d4d43d4f3ad8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d8fb322acc5314efc3026b889594c92c320dce85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d8fb322acc5314efc3026b889594c92c320dce85", "html_url": "https://github.com/rust-lang/rust/commit/d8fb322acc5314efc3026b889594c92c320dce85", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d8fb322acc5314efc3026b889594c92c320dce85/comments", "author": null, "committer": null, "parents": [{"sha": "40feadb966f825de7aa54a3138416c906b60f54a", "url": "https://api.github.com/repos/rust-lang/rust/commits/40feadb966f825de7aa54a3138416c906b60f54a", "html_url": "https://github.com/rust-lang/rust/commit/40feadb966f825de7aa54a3138416c906b60f54a"}], "stats": {"total": 52, "additions": 44, "deletions": 8}, "files": [{"sha": "12ea9ab431da0f2bb2eef72efa517737583ec866", "filename": "src/libstd/ascii.rs", "status": "modified", "additions": 44, "deletions": 8, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/d8fb322acc5314efc3026b889594c92c320dce85/src%2Flibstd%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8fb322acc5314efc3026b889594c92c320dce85/src%2Flibstd%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fascii.rs?ref=d8fb322acc5314efc3026b889594c92c320dce85", "patch": "@@ -53,11 +53,11 @@ pub trait AsciiExt {\n     /// use std::ascii::AsciiExt;\n     ///\n     /// let ascii = 'a';\n-    /// let utf8 = '\u2764';\n+    /// let non_ascii = '\u2764';\n     /// let int_ascii = 97;\n     ///\n     /// assert!(ascii.is_ascii());\n-    /// assert!(!utf8.is_ascii());\n+    /// assert!(!non_ascii.is_ascii());\n     /// assert!(int_ascii.is_ascii());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -79,11 +79,11 @@ pub trait AsciiExt {\n     /// use std::ascii::AsciiExt;\n     ///\n     /// let ascii = 'a';\n-    /// let utf8 = '\u2764';\n+    /// let non_ascii = '\u2764';\n     /// let int_ascii = 97;\n     ///\n     /// assert_eq!('A', ascii.to_ascii_uppercase());\n-    /// assert_eq!('\u2764', utf8.to_ascii_uppercase());\n+    /// assert_eq!('\u2764', non_ascii.to_ascii_uppercase());\n     /// assert_eq!(65, int_ascii.to_ascii_uppercase());\n     /// ```\n     ///\n@@ -108,11 +108,11 @@ pub trait AsciiExt {\n     /// use std::ascii::AsciiExt;\n     ///\n     /// let ascii = 'A';\n-    /// let utf8 = '\u2764';\n+    /// let non_ascii = '\u2764';\n     /// let int_ascii = 65;\n     ///\n     /// assert_eq!('a', ascii.to_ascii_lowercase());\n-    /// assert_eq!('\u2764', utf8.to_ascii_lowercase());\n+    /// assert_eq!('\u2764', non_ascii.to_ascii_lowercase());\n     /// assert_eq!(97, int_ascii.to_ascii_lowercase());\n     /// ```\n     ///\n@@ -934,8 +934,12 @@ impl AsciiExt for char {\n     }\n }\n \n-/// An iterator over the escaped version of a byte, constructed via\n-/// `std::ascii::escape_default`.\n+/// An iterator over the escaped version of a byte.\n+///\n+/// This `struct` is created by the [`escape_default`] function. See its\n+/// documentation for more.\n+///\n+/// [`escape_default`]: fn.escape_default.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct EscapeDefault {\n     range: Range<usize>,\n@@ -966,6 +970,38 @@ pub struct EscapeDefault {\n ///\n /// assert_eq!(b'\\\\', escaped.next().unwrap());\n /// assert_eq!(b't', escaped.next().unwrap());\n+///\n+/// let mut escaped = ascii::escape_default(b'\\r');\n+///\n+/// assert_eq!(b'\\\\', escaped.next().unwrap());\n+/// assert_eq!(b'r', escaped.next().unwrap());\n+///\n+/// let mut escaped = ascii::escape_default(b'\\n');\n+///\n+/// assert_eq!(b'\\\\', escaped.next().unwrap());\n+/// assert_eq!(b'n', escaped.next().unwrap());\n+///\n+/// let mut escaped = ascii::escape_default(b'\\'');\n+///\n+/// assert_eq!(b'\\\\', escaped.next().unwrap());\n+/// assert_eq!(b'\\'', escaped.next().unwrap());\n+///\n+/// let mut escaped = ascii::escape_default(b'\"');\n+///\n+/// assert_eq!(b'\\\\', escaped.next().unwrap());\n+/// assert_eq!(b'\"', escaped.next().unwrap());\n+///\n+/// let mut escaped = ascii::escape_default(b'\\\\');\n+///\n+/// assert_eq!(b'\\\\', escaped.next().unwrap());\n+/// assert_eq!(b'\\\\', escaped.next().unwrap());\n+///\n+/// let mut escaped = ascii::escape_default(b'\\x9d');\n+///\n+/// assert_eq!(b'\\\\', escaped.next().unwrap());\n+/// assert_eq!(b'x', escaped.next().unwrap());\n+/// assert_eq!(b'9', escaped.next().unwrap());\n+/// assert_eq!(b'd', escaped.next().unwrap());\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn escape_default(c: u8) -> EscapeDefault {"}]}