{"sha": "e61ec99af28584982652a3573d2455424e87a83f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2MWVjOTlhZjI4NTg0OTgyNjUyYTM1NzNkMjQ1NTQyNGU4N2E4M2Y=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-08-27T00:31:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-08-27T00:31:25Z"}, "message": "auto merge of #16704 : flugsio/rust/fix-rustc-ice-lint-underscores-only, r=brson\n\nFix for type identifiers with only underscores (two or more), I assume they doesn't count as camel case.\r\n\r\n```rust\r\ntype __ = int;\r\n\r\nfn main() {\r\n}\r\n```\r\n\r\n```\r\nerror: internal compiler error: unexpected failure\r\nnote: the compiler hit an unexpected failure path. this is a bug.\r\nnote: we would appreciate a bug report: http://doc.rust-lang.org/complement-bugreport.html\r\nnote: run with `RUST_BACKTRACE=1` for a backtrace\r\ntask 'rustc' failed at 'index out of bounds: the len is 0 but the index is 0', /home/rustbuild/src/rust-buildbot/slave/nightly-linux/build/src/librustc/lib.rs:1\r\n\r\nstack backtrace:\r\n   1: 0xb603f5d0 - rt::backtrace::imp::write::ha55f265f6626471dmxr\r\n   2: 0xb6042620 - failure::on_fail::h4d2c6d42b67e94803Sr\r\n   3: 0xb640a180 - unwind::begin_unwind_inner::h484879fa7cc3611fZhe\r\n   4: 0xb6409e50 - unwind::begin_unwind_fmt::hd14e5c64bc9006capfe\r\n   5: 0xb6409df0 - rust_begin_unwind\r\n   6: 0xb6454580 - failure::begin_unwind::h9ab1fc5753bd08f3YDk\r\n   7: 0xb6458cb0 - failure::fail_bounds_check::h88167bad36865909aCk\r\n   8: 0xb6f685d0 - lint::builtin::NonCamelCaseTypes.LintPass::check_item::check_case::he854eeffd105cb0f40E\r\n   9: 0xb6f68050 - lint::builtin::NonCamelCaseTypes.LintPass::check_item::hc35b45d248e41cd43XE\r\n  10: 0xb6f7b760 - lint::context::Context<'a>.Visitor<(*>::visit_item::closure.139262\r\n  11: 0xb6f79510 - lint::context::Context<'a>::with_lint_attrs::hb9efe321fa321ce6spG\r\n  12: 0xb6f81d30 - lint::context::Context<'a>.Visitor<(*>::visit_mod::he4593c831936b308ZMG\r\n  13: 0xb6f8f2f0 - lint::context::check_crate::closure.139319\r\n  14: 0xb6f79510 - lint::context::Context<'a>::with_lint_attrs::hb9efe321fa321ce6spG\r\n  15: 0xb6efda70 - lint::context::check_crate::ha9e64328726b9579q1G\r\n  16: 0xb6efda20 - driver::driver::phase_3_run_analysis_passes::closure.136263\r\n  17: 0xb659d640 - util::common::time::h2837683151147173214\r\n  18: 0xb6e7d130 - driver::driver::phase_3_run_analysis_passes::h7079eff53afc4de3Jfz\r\n  19: 0xb6e783f0 - driver::driver::compile_input::h0ec84a550e24779cP1y\r\n  20: 0xb6f26250 - driver::run_compiler::h7e7c01ecbfd0ad87JzC\r\n  21: 0xb6f26150 - driver::main_args::closure.137215\r\n  22: 0xb6f380d0 - task::TaskBuilder<S>::try_future::closure.138376\r\n  23: 0xb6f37ec0 - task::TaskBuilder<S>::spawn_internal::closure.138353\r\n  24: 0xb774bdd0 - task::spawn_opts::closure.8325\r\n  25: 0xb6409c10 - unwind::try::try_fn::h91f00772748cf73eD8d\r\n  26: 0xb6468ae0 - rust_try_inner\r\n  27: 0xb6468aa0 - rust_try\r\n  28: 0xb6407880 - unwind::try::h78a4fc0e85c326aef6d\r\n  29: 0xb6407640 - task::Task::run::hb6f2d9484116e3d8xcd\r\n  30: 0xb774bba0 - task::spawn_opts::closure.8271\r\n  31: 0xb6409350 - thread::thread_start::h8c02fef9f651da5cjBd\r\n  32: 0xb5ed3fc0 - start_thread\r\n  33: 0xb62e8a32 - __clone\r\n  34:        0x0 - <unknown>\r\n```", "tree": {"sha": "e0c418c5e993937e15c6b46437c1d8d877a7b4bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e0c418c5e993937e15c6b46437c1d8d877a7b4bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e61ec99af28584982652a3573d2455424e87a83f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e61ec99af28584982652a3573d2455424e87a83f", "html_url": "https://github.com/rust-lang/rust/commit/e61ec99af28584982652a3573d2455424e87a83f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e61ec99af28584982652a3573d2455424e87a83f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80b45ddbd351f0a4a939c3a3c4e20b4defec4b35", "url": "https://api.github.com/repos/rust-lang/rust/commits/80b45ddbd351f0a4a939c3a3c4e20b4defec4b35", "html_url": "https://github.com/rust-lang/rust/commit/80b45ddbd351f0a4a939c3a3c4e20b4defec4b35"}, {"sha": "9eb9fcd71962fae50c63431d63caab923c68182e", "url": "https://api.github.com/repos/rust-lang/rust/commits/9eb9fcd71962fae50c63431d63caab923c68182e", "html_url": "https://github.com/rust-lang/rust/commit/9eb9fcd71962fae50c63431d63caab923c68182e"}], "stats": {"total": 14, "additions": 10, "deletions": 4}, "files": [{"sha": "01fea98dfa0768546cc5a74f07000da3508bb394", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e61ec99af28584982652a3573d2455424e87a83f/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e61ec99af28584982652a3573d2455424e87a83f/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=e61ec99af28584982652a3573d2455424e87a83f", "patch": "@@ -754,7 +754,7 @@ impl LintPass for NonCamelCaseTypes {\n \n             // start with a non-lowercase letter rather than non-uppercase\n             // ones (some scripts don't have a concept of upper/lowercase)\n-            !ident.char_at(0).is_lowercase() && !ident.contains_char('_')\n+            ident.len() > 0 && !ident.char_at(0).is_lowercase() && !ident.contains_char('_')\n         }\n \n         fn to_camel_case(s: &str) -> String {\n@@ -768,9 +768,13 @@ impl LintPass for NonCamelCaseTypes {\n             let s = token::get_ident(ident);\n \n             if !is_camel_case(ident) {\n-                cx.span_lint(NON_CAMEL_CASE_TYPES, span,\n-                    format!(\"{} `{}` should have a camel case name such as `{}`\",\n-                            sort, s, to_camel_case(s.get())).as_slice());\n+                let c = to_camel_case(s.get());\n+                let m = if c.is_empty() {\n+                    format!(\"{} `{}` should have a camel case name such as `CamelCase`\", sort, s)\n+                } else {\n+                    format!(\"{} `{}` should have a camel case name such as `{}`\", sort, s, c)\n+                };\n+                cx.span_lint(NON_CAMEL_CASE_TYPES, span, m.as_slice());\n             }\n         }\n "}, {"sha": "f33c7956a1418f45fab80b5a6ab7cc4d62aa558e", "filename": "src/test/compile-fail/lint-non-camel-case-types.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e61ec99af28584982652a3573d2455424e87a83f/src%2Ftest%2Fcompile-fail%2Flint-non-camel-case-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e61ec99af28584982652a3573d2455424e87a83f/src%2Ftest%2Fcompile-fail%2Flint-non-camel-case-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-non-camel-case-types.rs?ref=e61ec99af28584982652a3573d2455424e87a83f", "patch": "@@ -37,4 +37,6 @@ struct foo7 {\n     bar: int,\n }\n \n+type __ = int; //~ ERROR type `__` should have a camel case name such as `CamelCase`\n+\n fn main() { }"}]}