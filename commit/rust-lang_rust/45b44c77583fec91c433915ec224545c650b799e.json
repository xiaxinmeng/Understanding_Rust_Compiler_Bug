{"sha": "45b44c77583fec91c433915ec224545c650b799e", "node_id": "C_kwDOAAsO6NoAKDQ1YjQ0Yzc3NTgzZmVjOTFjNDMzOTE1ZWMyMjQ1NDVjNjUwYjc5OWU", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2023-03-22T09:36:30Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2023-03-22T09:36:30Z"}, "message": "`HirId` to `LocalDefId` cleanup", "tree": {"sha": "2e047b66dadeff2bd626cc9492106d42480c5d6f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e047b66dadeff2bd626cc9492106d42480c5d6f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45b44c77583fec91c433915ec224545c650b799e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45b44c77583fec91c433915ec224545c650b799e", "html_url": "https://github.com/rust-lang/rust/commit/45b44c77583fec91c433915ec224545c650b799e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45b44c77583fec91c433915ec224545c650b799e/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9bdb4881c7e6061fa8acdbb3ddfcd2dd7e11cc89", "url": "https://api.github.com/repos/rust-lang/rust/commits/9bdb4881c7e6061fa8acdbb3ddfcd2dd7e11cc89", "html_url": "https://github.com/rust-lang/rust/commit/9bdb4881c7e6061fa8acdbb3ddfcd2dd7e11cc89"}], "stats": {"total": 18, "additions": 7, "deletions": 11}, "files": [{"sha": "c41e96290df1632f95635926afe9133efc523974", "filename": "compiler/rustc_hir_analysis/src/collect.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/45b44c77583fec91c433915ec224545c650b799e/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45b44c77583fec91c433915ec224545c650b799e/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs?ref=45b44c77583fec91c433915ec224545c650b799e", "patch": "@@ -1208,7 +1208,7 @@ fn infer_return_ty_for_fn_sig<'tcx>(\n                     fn_sig,\n                     Applicability::MachineApplicable,\n                 );\n-            } else if let Some(sugg) = suggest_impl_trait(tcx, ret_ty, ty.span, hir_id, def_id) {\n+            } else if let Some(sugg) = suggest_impl_trait(tcx, ret_ty, ty.span, def_id) {\n                 diag.span_suggestion(\n                     ty.span,\n                     \"replace with an appropriate return type\",\n@@ -1240,12 +1240,10 @@ fn infer_return_ty_for_fn_sig<'tcx>(\n     }\n }\n \n-// FIXME(vincenzopalazzo): remove the hir item when the refactoring is stable\n fn suggest_impl_trait<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     ret_ty: Ty<'tcx>,\n     span: Span,\n-    _hir_id: hir::HirId,\n     def_id: LocalDefId,\n ) -> Option<String> {\n     let format_as_assoc: fn(_, _, _, _, _) -> _ ="}, {"sha": "18a49ef2f0162daae349a10f8afe4b6d2154f49b", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/suggestions.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/45b44c77583fec91c433915ec224545c650b799e/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45b44c77583fec91c433915ec224545c650b799e/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs?ref=45b44c77583fec91c433915ec224545c650b799e", "patch": "@@ -165,8 +165,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         &self,\n         ty: Ty<'tcx>,\n     ) -> Option<(DefIdOrName, Ty<'tcx>, Vec<Ty<'tcx>>)> {\n-        let body_hir_id = self.tcx.hir().local_def_id_to_hir_id(self.body_id);\n-        self.err_ctxt().extract_callable_info(body_hir_id, self.param_env, ty)\n+        self.err_ctxt().extract_callable_info(self.body_id, self.param_env, ty)\n     }\n \n     pub fn suggest_two_fn_call("}, {"sha": "9b0c6e25d16b4903baaf7dde4f5bcafef8a60c7c", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45b44c77583fec91c433915ec224545c650b799e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45b44c77583fec91c433915ec224545c650b799e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=45b44c77583fec91c433915ec224545c650b799e", "patch": "@@ -2525,7 +2525,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         ident\n     }\n \n-    // FIXME(vincenzoapalzzo): move the HirId to a LocalDefId\n+    // FIXME(vincenzopalazzo): move the HirId to a LocalDefId\n     pub fn adjust_ident_and_get_scope(\n         self,\n         mut ident: Ident,"}, {"sha": "09e2f5ea900aea13f1f82c16531a28ca3d007833", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/45b44c77583fec91c433915ec224545c650b799e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45b44c77583fec91c433915ec224545c650b799e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=45b44c77583fec91c433915ec224545c650b799e", "patch": "@@ -212,7 +212,7 @@ pub trait TypeErrCtxtExt<'tcx> {\n \n     fn extract_callable_info(\n         &self,\n-        hir_id: HirId,\n+        hir_id: LocalDefId,\n         param_env: ty::ParamEnv<'tcx>,\n         found: Ty<'tcx>,\n     ) -> Option<(DefIdOrName, Ty<'tcx>, Vec<Ty<'tcx>>)>;\n@@ -909,9 +909,8 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             trait_pred.self_ty(),\n         );\n \n-        let body_hir_id = self.tcx.hir().local_def_id_to_hir_id(obligation.cause.body_id);\n         let Some((def_id_or_name, output, inputs)) = self.extract_callable_info(\n-            body_hir_id,\n+            obligation.cause.body_id,\n             obligation.param_env,\n             self_ty,\n         ) else { return false; };\n@@ -1116,7 +1115,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n     // FIXME(vincenzopalazzo): move the HirId to a LocalDefId\n     fn extract_callable_info(\n         &self,\n-        hir_id: HirId,\n+        body_id: LocalDefId,\n         param_env: ty::ParamEnv<'tcx>,\n         found: Ty<'tcx>,\n     ) -> Option<(DefIdOrName, Ty<'tcx>, Vec<Ty<'tcx>>)> {\n@@ -1168,7 +1167,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                     })\n                 }\n                 ty::Param(param) => {\n-                    let generics = self.tcx.generics_of(hir_id.owner.to_def_id());\n+                    let generics = self.tcx.generics_of(body_id);\n                     let name = if generics.count() > param.index as usize\n                         && let def = generics.param_at(param.index as usize, self.tcx)\n                         && matches!(def.kind, ty::GenericParamDefKind::Type { .. })"}]}