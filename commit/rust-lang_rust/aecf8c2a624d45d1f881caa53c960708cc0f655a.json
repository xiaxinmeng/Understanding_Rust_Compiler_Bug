{"sha": "aecf8c2a624d45d1f881caa53c960708cc0f655a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlY2Y4YzJhNjI0ZDQ1ZDFmODgxY2FhNTNjOTYwNzA4Y2MwZjY1NWE=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-06-21T13:04:53Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-08-02T19:39:29Z"}, "message": "Add trim_start, trim_end, trim_start_matches and trim_end_matches", "tree": {"sha": "ec292152a55a61ef7cec02cf539861f88ba32b96", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec292152a55a61ef7cec02cf539861f88ba32b96"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aecf8c2a624d45d1f881caa53c960708cc0f655a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aecf8c2a624d45d1f881caa53c960708cc0f655a", "html_url": "https://github.com/rust-lang/rust/commit/aecf8c2a624d45d1f881caa53c960708cc0f655a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aecf8c2a624d45d1f881caa53c960708cc0f655a/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03da14ba8cd22acbcfe1cca617f6c274999e5e9e", "url": "https://api.github.com/repos/rust-lang/rust/commits/03da14ba8cd22acbcfe1cca617f6c274999e5e9e", "html_url": "https://github.com/rust-lang/rust/commit/03da14ba8cd22acbcfe1cca617f6c274999e5e9e"}], "stats": {"total": 231, "additions": 218, "deletions": 13}, "files": [{"sha": "0dcbcf50fb401032669b1eb432651ab5df7108c7", "filename": "src/liballoc/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aecf8c2a624d45d1f881caa53c960708cc0f655a/src%2Fliballoc%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aecf8c2a624d45d1f881caa53c960708cc0f655a/src%2Fliballoc%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Flib.rs?ref=aecf8c2a624d45d1f881caa53c960708cc0f655a", "patch": "@@ -25,6 +25,7 @@\n #![feature(unboxed_closures)]\n #![feature(exact_chunks)]\n #![feature(repeat_generic_slice)]\n+#![feature(trim_direction)]\n \n extern crate alloc_system;\n extern crate core;"}, {"sha": "a1940c894b872e0f7eb93b9dd540b08522593104", "filename": "src/liballoc/tests/str.rs", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/aecf8c2a624d45d1f881caa53c960708cc0f655a/src%2Fliballoc%2Ftests%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aecf8c2a624d45d1f881caa53c960708cc0f655a/src%2Fliballoc%2Ftests%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fstr.rs?ref=aecf8c2a624d45d1f881caa53c960708cc0f655a", "patch": "@@ -726,6 +726,36 @@ fn test_is_char_boundary() {\n     }\n }\n \n+#[test]\n+fn test_trim_start_matches() {\n+    let v: &[char] = &[];\n+    assert_eq!(\" *** foo *** \".trim_start_matches(v), \" *** foo *** \");\n+    let chars: &[char] = &['*', ' '];\n+    assert_eq!(\" *** foo *** \".trim_start_matches(chars), \"foo *** \");\n+    assert_eq!(\" ***  *** \".trim_start_matches(chars), \"\");\n+    assert_eq!(\"foo *** \".trim_start_matches(chars), \"foo *** \");\n+\n+    assert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\n+    let chars: &[char] = &['1', '2'];\n+    assert_eq!(\"12foo1bar12\".trim_start_matches(chars), \"foo1bar12\");\n+    assert_eq!(\"123foo1bar123\".trim_start_matches(|c: char| c.is_numeric()), \"foo1bar123\");\n+}\n+\n+#[test]\n+fn test_trim_end_matches() {\n+    let v: &[char] = &[];\n+    assert_eq!(\" *** foo *** \".trim_end_matches(v), \" *** foo *** \");\n+    let chars: &[char] = &['*', ' '];\n+    assert_eq!(\" *** foo *** \".trim_end_matches(chars), \" *** foo\");\n+    assert_eq!(\" ***  *** \".trim_end_matches(chars), \"\");\n+    assert_eq!(\" *** foo\".trim_end_matches(chars), \" *** foo\");\n+\n+    assert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\n+    let chars: &[char] = &['1', '2'];\n+    assert_eq!(\"12foo1bar12\".trim_end_matches(chars), \"12foo1bar\");\n+    assert_eq!(\"123foo1bar123\".trim_end_matches(|c: char| c.is_numeric()), \"123foo1bar\");\n+}\n+\n #[test]\n fn test_trim_left_matches() {\n     let v: &[char] = &[];\n@@ -771,6 +801,26 @@ fn test_trim_matches() {\n     assert_eq!(\"123foo1bar123\".trim_matches(|c: char| c.is_numeric()), \"foo1bar\");\n }\n \n+#[test]\n+fn test_trim_start() {\n+    assert_eq!(\"\".trim_start(), \"\");\n+    assert_eq!(\"a\".trim_start(), \"a\");\n+    assert_eq!(\"    \".trim_start(), \"\");\n+    assert_eq!(\"     blah\".trim_start(), \"blah\");\n+    assert_eq!(\"   \\u{3000}  wut\".trim_start(), \"wut\");\n+    assert_eq!(\"hey \".trim_start(), \"hey \");\n+}\n+\n+#[test]\n+fn test_trim_end() {\n+    assert_eq!(\"\".trim_end(), \"\");\n+    assert_eq!(\"a\".trim_end(), \"a\");\n+    assert_eq!(\"    \".trim_end(), \"\");\n+    assert_eq!(\"blah     \".trim_end(), \"blah\");\n+    assert_eq!(\"wut   \\u{3000}  \".trim_end(), \"wut\");\n+    assert_eq!(\" hey\".trim_end(), \" hey\");\n+}\n+\n #[test]\n fn test_trim_left() {\n     assert_eq!(\"\".trim_left(), \"\");\n@@ -1518,12 +1568,20 @@ fn trim_ws() {\n                     \"a \\t  \");\n     assert_eq!(\" \\t  a \\t  \".trim_right_matches(|c: char| c.is_whitespace()),\n                \" \\t  a\");\n+    assert_eq!(\" \\t  a \\t  \".trim_start_matches(|c: char| c.is_whitespace()),\n+                    \"a \\t  \");\n+    assert_eq!(\" \\t  a \\t  \".trim_end_matches(|c: char| c.is_whitespace()),\n+               \" \\t  a\");\n     assert_eq!(\" \\t  a \\t  \".trim_matches(|c: char| c.is_whitespace()),\n                     \"a\");\n     assert_eq!(\" \\t   \\t  \".trim_left_matches(|c: char| c.is_whitespace()),\n                          \"\");\n     assert_eq!(\" \\t   \\t  \".trim_right_matches(|c: char| c.is_whitespace()),\n                \"\");\n+    assert_eq!(\" \\t   \\t  \".trim_start_matches(|c: char| c.is_whitespace()),\n+                         \"\");\n+    assert_eq!(\" \\t   \\t  \".trim_end_matches(|c: char| c.is_whitespace()),\n+               \"\");\n     assert_eq!(\" \\t   \\t  \".trim_matches(|c: char| c.is_whitespace()),\n                \"\");\n }"}, {"sha": "eda35519636104ee3cacc9c07781b0e34cb2eb1d", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 159, "deletions": 13, "changes": 172, "blob_url": "https://github.com/rust-lang/rust/blob/aecf8c2a624d45d1f881caa53c960708cc0f655a/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aecf8c2a624d45d1f881caa53c960708cc0f655a/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=aecf8c2a624d45d1f881caa53c960708cc0f655a", "patch": "@@ -3587,6 +3587,78 @@ impl str {\n         self.trim_matches(|c: char| c.is_whitespace())\n     }\n \n+    /// Returns a string slice with leading whitespace removed.\n+    ///\n+    /// 'Whitespace' is defined according to the terms of the Unicode Derived\n+    /// Core Property `White_Space`.\n+    ///\n+    /// # Text directionality\n+    ///\n+    /// A string is a sequence of bytes. `start` in this context means the first\n+    /// position of that byte string; for a left-to-right language like English or\n+    /// Russian, this will be left side; and for right-to-left languages like\n+    /// like Arabic or Hebrew, this will be the right side.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// let s = \" Hello\\tworld\\t\";\n+    ///\n+    /// assert_eq!(\"Hello\\tworld\\t\", s.trim_start());\n+    /// ```\n+    ///\n+    /// Directionality:\n+    ///\n+    /// ```\n+    /// let s = \"  English\";\n+    /// assert!(Some('E') == s.trim_start().chars().next());\n+    ///\n+    /// let s = \"  \u05e2\u05d1\u05e8\u05d9\u05ea\";\n+    /// assert!(Some('\u05e2') == s.trim_start().chars().next());\n+    /// ```\n+    #[unstable(feature = \"trim_direction\", issue = \"30459\")]\n+    pub fn trim_start(&self) -> &str {\n+        self.trim_start_matches(|c: char| c.is_whitespace())\n+    }\n+\n+    /// Returns a string slice with trailing whitespace removed.\n+    ///\n+    /// 'Whitespace' is defined according to the terms of the Unicode Derived\n+    /// Core Property `White_Space`.\n+    ///\n+    /// # Text directionality\n+    ///\n+    /// A string is a sequence of bytes. `end` in this context means the last\n+    /// position of that byte string; for a left-to-right language like English or\n+    /// Russian, this will be right side; and for right-to-left languages like\n+    /// like Arabic or Hebrew, this will be the left side.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// let s = \" Hello\\tworld\\t\";\n+    ///\n+    /// assert_eq!(\" Hello\\tworld\", s.trim_end());\n+    /// ```\n+    ///\n+    /// Directionality:\n+    ///\n+    /// ```\n+    /// let s = \"English  \";\n+    /// assert!(Some('h') == s.trim_end().chars().rev().next());\n+    ///\n+    /// let s = \"\u05e2\u05d1\u05e8\u05d9\u05ea  \";\n+    /// assert!(Some('\u05ea') == s.trim_end().chars().rev().next());\n+    /// ```\n+    #[unstable(feature = \"trim_direction\", issue = \"30459\")]\n+    pub fn trim_end(&self) -> &str {\n+        self.trim_end_matches(|c: char| c.is_whitespace())\n+    }\n+\n     /// Returns a string slice with leading whitespace removed.\n     ///\n     /// 'Whitespace' is defined according to the terms of the Unicode Derived\n@@ -3619,8 +3691,9 @@ impl str {\n     /// assert!(Some('\u05e2') == s.trim_left().chars().next());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_deprecated(reason = \"superseded by `trim_start`\", since = \"1.33.0\")]\n     pub fn trim_left(&self) -> &str {\n-        self.trim_left_matches(|c: char| c.is_whitespace())\n+        self.trim_start()\n     }\n \n     /// Returns a string slice with trailing whitespace removed.\n@@ -3655,8 +3728,9 @@ impl str {\n     /// assert!(Some('\u05ea') == s.trim_right().chars().rev().next());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_deprecated(reason = \"superseded by `trim_end`\", since = \"1.33.0\")]\n     pub fn trim_right(&self) -> &str {\n-        self.trim_right_matches(|c: char| c.is_whitespace())\n+        self.trim_end()\n     }\n \n     /// Returns a string slice with all prefixes and suffixes that match a\n@@ -3725,14 +3799,14 @@ impl str {\n     /// Basic usage:\n     ///\n     /// ```\n-    /// assert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\n-    /// assert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n+    /// assert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\n+    /// assert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n     ///\n     /// let x: &[_] = &['1', '2'];\n-    /// assert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n+    /// assert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n     /// ```\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn trim_left_matches<'a, P: Pattern<'a>>(&'a self, pat: P) -> &'a str {\n+    #[unstable(feature = \"trim_direction\", issue = \"30459\")]\n+    pub fn trim_start_matches<'a, P: Pattern<'a>>(&'a self, pat: P) -> &'a str {\n         let mut i = self.len();\n         let mut matcher = pat.into_searcher(self);\n         if let Some((a, _)) = matcher.next_reject() {\n@@ -3764,20 +3838,20 @@ impl str {\n     /// Simple patterns:\n     ///\n     /// ```\n-    /// assert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\n-    /// assert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n+    /// assert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\n+    /// assert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n     ///\n     /// let x: &[_] = &['1', '2'];\n-    /// assert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n+    /// assert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n     /// ```\n     ///\n     /// A more complex pattern, using a closure:\n     ///\n     /// ```\n-    /// assert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n+    /// assert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n     /// ```\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn trim_right_matches<'a, P: Pattern<'a>>(&'a self, pat: P) -> &'a str\n+    #[unstable(feature = \"trim_direction\", issue = \"30459\")]\n+    pub fn trim_end_matches<'a, P: Pattern<'a>>(&'a self, pat: P) -> &'a str\n         where P::Searcher: ReverseSearcher<'a>\n     {\n         let mut j = 0;\n@@ -3791,6 +3865,78 @@ impl str {\n         }\n     }\n \n+    /// Returns a string slice with all prefixes that match a pattern\n+    /// repeatedly removed.\n+    ///\n+    /// The pattern can be a `&str`, [`char`], or a closure that determines if\n+    /// a character matches.\n+    ///\n+    /// [`char`]: primitive.char.html\n+    ///\n+    /// # Text directionality\n+    ///\n+    /// A string is a sequence of bytes. 'Left' in this context means the first\n+    /// position of that byte string; for a language like Arabic or Hebrew\n+    /// which are 'right to left' rather than 'left to right', this will be\n+    /// the _right_ side, not the left.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// assert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\n+    /// assert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n+    ///\n+    /// let x: &[_] = &['1', '2'];\n+    /// assert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n+    /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_deprecated(reason = \"superseded by `trim_start_matches`\", since = \"1.33.0\")]\n+    pub fn trim_left_matches<'a, P: Pattern<'a>>(&'a self, pat: P) -> &'a str {\n+        self.trim_start_matches(pat)\n+    }\n+\n+    /// Returns a string slice with all suffixes that match a pattern\n+    /// repeatedly removed.\n+    ///\n+    /// The pattern can be a `&str`, [`char`], or a closure that\n+    /// determines if a character matches.\n+    ///\n+    /// [`char`]: primitive.char.html\n+    ///\n+    /// # Text directionality\n+    ///\n+    /// A string is a sequence of bytes. 'Right' in this context means the last\n+    /// position of that byte string; for a language like Arabic or Hebrew\n+    /// which are 'right to left' rather than 'left to right', this will be\n+    /// the _left_ side, not the right.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Simple patterns:\n+    ///\n+    /// ```\n+    /// assert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\n+    /// assert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n+    ///\n+    /// let x: &[_] = &['1', '2'];\n+    /// assert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n+    /// ```\n+    ///\n+    /// A more complex pattern, using a closure:\n+    ///\n+    /// ```\n+    /// assert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n+    /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_deprecated(reason = \"superseded by `trim_end_matches`\", since = \"1.33.0\")]\n+    pub fn trim_right_matches<'a, P: Pattern<'a>>(&'a self, pat: P) -> &'a str\n+        where P::Searcher: ReverseSearcher<'a>\n+    {\n+        self.trim_end_matches(pat)\n+    }\n+\n     /// Parses this string slice into another type.\n     ///\n     /// Because `parse` is so general, it can cause problems with type"}]}