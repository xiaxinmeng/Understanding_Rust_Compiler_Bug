{"sha": "2f23a0fccad2f4d85d2ec923f0ac40b4b42211a8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmMjNhMGZjY2FkMmY0ZDg1ZDJlYzkyM2YwYWM0MGI0YjQyMjExYTg=", "commit": {"author": {"name": "The8472", "email": "git@infinite-source.de", "date": "2020-09-03T20:15:47Z"}, "committer": {"name": "The8472", "email": "git@infinite-source.de", "date": "2020-09-03T20:15:47Z"}, "message": "fix debug assertion\n\nThe InPlaceIterable debug assert checks that the write pointer\ndid not advance beyond the read pointer. But TrustedRandomAccess\nnever advances the read pointer, thus triggering the assert.\nSkip the assert if the source pointer did not change during iteration.", "tree": {"sha": "1a29a504c97885e651353f41d4b3f0fa5aac5719", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a29a504c97885e651353f41d4b3f0fa5aac5719"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f23a0fccad2f4d85d2ec923f0ac40b4b42211a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f23a0fccad2f4d85d2ec923f0ac40b4b42211a8", "html_url": "https://github.com/rust-lang/rust/commit/2f23a0fccad2f4d85d2ec923f0ac40b4b42211a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f23a0fccad2f4d85d2ec923f0ac40b4b42211a8/comments", "author": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "committer": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e5fe5569b5ffd59f57e0dab4380ba04b063330e", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e5fe5569b5ffd59f57e0dab4380ba04b063330e", "html_url": "https://github.com/rust-lang/rust/commit/8e5fe5569b5ffd59f57e0dab4380ba04b063330e"}], "stats": {"total": 22, "additions": 18, "deletions": 4}, "files": [{"sha": "9013e3fc16ab918f86c2a5a864bd9662a1147a5e", "filename": "library/alloc/src/vec.rs", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2f23a0fccad2f4d85d2ec923f0ac40b4b42211a8/library%2Falloc%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f23a0fccad2f4d85d2ec923f0ac40b4b42211a8/library%2Falloc%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec.rs?ref=2f23a0fccad2f4d85d2ec923f0ac40b4b42211a8", "patch": "@@ -2285,9 +2285,15 @@ where\n             return SpecFromIterNested::from_iter(iterator);\n         }\n \n-        let (src_buf, dst_buf, dst_end, cap) = unsafe {\n+        let (src_buf, src_ptr, dst_buf, dst_end, cap) = unsafe {\n             let inner = iterator.as_inner().as_into_iter();\n-            (inner.buf.as_ptr(), inner.buf.as_ptr() as *mut T, inner.end as *const T, inner.cap)\n+            (\n+                inner.buf.as_ptr(),\n+                inner.ptr,\n+                inner.buf.as_ptr() as *mut T,\n+                inner.end as *const T,\n+                inner.cap,\n+            )\n         };\n \n         // use try-fold since\n@@ -2302,10 +2308,18 @@ where\n         let dst = mem::ManuallyDrop::new(sink).dst;\n \n         let src = unsafe { iterator.as_inner().as_into_iter() };\n-        // check if SourceIter and InPlaceIterable contracts were upheld.\n+        // check if SourceIter contract was upheld\n         // caveat: if they weren't we may not even make it to this point\n         debug_assert_eq!(src_buf, src.buf.as_ptr());\n-        debug_assert!(dst as *const _ <= src.ptr, \"InPlaceIterable contract violation\");\n+        // check InPlaceIterable contract. This is only possible if the iterator advanced the\n+        // source pointer at all. If it uses unchecked access via TrustedRandomAccess\n+        // then the source pointer will stay in its initial position and we can't use it as reference\n+        if src.ptr != src_ptr {\n+            debug_assert!(\n+                dst as *const _ <= src.ptr,\n+                \"InPlaceIterable contract violation, write pointer advanced beyond read pointer\"\n+            );\n+        }\n \n         // drop any remaining values at the tail of the source\n         src.drop_remaining();"}]}