{"sha": "dd757b9e0622815be615addb3031770922b87874", "node_id": "C_kwDOAAsO6NoAKGRkNzU3YjllMDYyMjgxNWJlNjE1YWRkYjMwMzE3NzA5MjJiODc4NzQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-27T15:32:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-27T15:32:42Z"}, "message": "Auto merge of #90273 - nbdd0121:const, r=fee1-dead\n\nClean up special function const checks\n\nMark them as const and `#[rustc_do_not_const_check]` instead of hard-coding them in const-eval checks.\n\nr? `@oli-obk`\n`@rustbot` label A-const-eval T-compiler", "tree": {"sha": "fbb8045d323dc14d991e5d87c577dbc7aaef2c05", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fbb8045d323dc14d991e5d87c577dbc7aaef2c05"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd757b9e0622815be615addb3031770922b87874", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd757b9e0622815be615addb3031770922b87874", "html_url": "https://github.com/rust-lang/rust/commit/dd757b9e0622815be615addb3031770922b87874", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd757b9e0622815be615addb3031770922b87874/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "337e1565d3b6b8ccb37d270331696da59f793c69", "url": "https://api.github.com/repos/rust-lang/rust/commits/337e1565d3b6b8ccb37d270331696da59f793c69", "html_url": "https://github.com/rust-lang/rust/commit/337e1565d3b6b8ccb37d270331696da59f793c69"}, {"sha": "223f58085aacb586c06c7dbfaa60b85c1b1f1da4", "url": "https://api.github.com/repos/rust-lang/rust/commits/223f58085aacb586c06c7dbfaa60b85c1b1f1da4", "html_url": "https://github.com/rust-lang/rust/commit/223f58085aacb586c06c7dbfaa60b85c1b1f1da4"}], "stats": {"total": 146, "additions": 53, "deletions": 93}, "files": [{"sha": "dacd8f7c12cfd50204f00037a4e3eec8049d5a29", "filename": "compiler/rustc_const_eval/src/const_eval/machine.rs", "status": "modified", "additions": 19, "deletions": 37, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/dd757b9e0622815be615addb3031770922b87874/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd757b9e0622815be615addb3031770922b87874/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs?ref=dd757b9e0622815be615addb3031770922b87874", "patch": "@@ -30,34 +30,25 @@ impl<'mir, 'tcx> InterpCx<'mir, 'tcx, CompileTimeInterpreter<'mir, 'tcx>> {\n         &mut self,\n         instance: ty::Instance<'tcx>,\n         args: &[OpTy<'tcx>],\n-        is_const_fn: bool,\n     ) -> InterpResult<'tcx, Option<ty::Instance<'tcx>>> {\n-        // The list of functions we handle here must be in sync with\n-        // `is_lang_special_const_fn` in `transform/check_consts/mod.rs`.\n+        // All `#[rustc_do_not_const_check]` functions should be hooked here.\n         let def_id = instance.def_id();\n \n-        if is_const_fn {\n-            if Some(def_id) == self.tcx.lang_items().const_eval_select() {\n-                // redirect to const_eval_select_ct\n-                if let Some(const_eval_select) = self.tcx.lang_items().const_eval_select_ct() {\n-                    return Ok(Some(\n-                        ty::Instance::resolve(\n-                            *self.tcx,\n-                            ty::ParamEnv::reveal_all(),\n-                            const_eval_select,\n-                            instance.substs,\n-                        )\n-                        .unwrap()\n-                        .unwrap(),\n-                    ));\n-                }\n+        if Some(def_id) == self.tcx.lang_items().const_eval_select() {\n+            // redirect to const_eval_select_ct\n+            if let Some(const_eval_select) = self.tcx.lang_items().const_eval_select_ct() {\n+                return Ok(Some(\n+                    ty::Instance::resolve(\n+                        *self.tcx,\n+                        ty::ParamEnv::reveal_all(),\n+                        const_eval_select,\n+                        instance.substs,\n+                    )\n+                    .unwrap()\n+                    .unwrap(),\n+                ));\n             }\n-            return Ok(None);\n-        }\n-\n-        if Some(def_id) == self.tcx.lang_items().panic_fn()\n-            || Some(def_id) == self.tcx.lang_items().panic_str()\n-            || Some(def_id) == self.tcx.lang_items().panic_display()\n+        } else if Some(def_id) == self.tcx.lang_items().panic_display()\n             || Some(def_id) == self.tcx.lang_items().begin_panic_fn()\n         {\n             // &str or &&str\n@@ -274,31 +265,22 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n \n         // Only check non-glue functions\n         if let ty::InstanceDef::Item(def) = instance.def {\n-            let mut is_const_fn = true;\n-\n             // Execution might have wandered off into other crates, so we cannot do a stability-\n             // sensitive check here.  But we can at least rule out functions that are not const\n             // at all.\n             if !ecx.tcx.is_const_fn_raw(def.did) {\n                 // allow calling functions marked with #[default_method_body_is_const].\n                 if !ecx.tcx.has_attr(def.did, sym::default_method_body_is_const) {\n-                    is_const_fn = false;\n+                    // We certainly do *not* want to actually call the fn\n+                    // though, so be sure we return here.\n+                    throw_unsup_format!(\"calling non-const function `{}`\", instance)\n                 }\n             }\n \n-            // Some functions we support even if they are non-const -- but avoid testing\n-            // that for const fn!\n-            // `const_eval_select` is a const fn because it must use const trait bounds.\n-            if let Some(new_instance) = ecx.hook_special_const_fn(instance, args, is_const_fn)? {\n+            if let Some(new_instance) = ecx.hook_special_const_fn(instance, args)? {\n                 // We call another const fn instead.\n                 return Self::find_mir_or_eval_fn(ecx, new_instance, _abi, args, _ret, _unwind);\n             }\n-\n-            if !is_const_fn {\n-                // We certainly do *not* want to actually call the fn\n-                // though, so be sure we return here.\n-                throw_unsup_format!(\"calling non-const function `{}`\", instance)\n-            }\n         }\n         // This is a const fn. Call it.\n         Ok(Some(ecx.load_mir(instance.def, None)?))"}, {"sha": "a3f685fb747c7e89648613ca4e158f5546bf8229", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 19, "deletions": 23, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/dd757b9e0622815be615addb3031770922b87874/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd757b9e0622815be615addb3031770922b87874/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=dd757b9e0622815be615addb3031770922b87874", "patch": "@@ -24,7 +24,7 @@ use std::ops::Deref;\n use super::ops::{self, NonConstOp, Status};\n use super::qualifs::{self, CustomEq, HasMutInterior, NeedsDrop, NeedsNonConstDrop};\n use super::resolver::FlowSensitiveAnalysis;\n-use super::{is_lang_panic_fn, is_lang_special_const_fn, ConstCx, Qualif};\n+use super::{ConstCx, Qualif};\n use crate::const_eval::is_unstable_const_fn;\n \n // We are using `MaybeMutBorrowedLocals` as a proxy for whether an item may have been mutated\n@@ -918,31 +918,27 @@ impl Visitor<'tcx> for Checker<'mir, 'tcx> {\n                 }\n \n                 // At this point, we are calling a function, `callee`, whose `DefId` is known...\n-                if is_lang_special_const_fn(tcx, callee) {\n-                    // `begin_panic` and `panic_display` are generic functions that accept\n-                    // types other than str. Check to enforce that only str can be used in\n-                    // const-eval.\n-\n-                    // const-eval of the `begin_panic` fn assumes the argument is `&str`\n-                    if Some(callee) == tcx.lang_items().begin_panic_fn() {\n-                        match args[0].ty(&self.ccx.body.local_decls, tcx).kind() {\n-                            ty::Ref(_, ty, _) if ty.is_str() => (),\n-                            _ => self.check_op(ops::PanicNonStr),\n-                        }\n-                    }\n \n-                    // const-eval of the `panic_display` fn assumes the argument is `&&str`\n-                    if Some(callee) == tcx.lang_items().panic_display() {\n-                        match args[0].ty(&self.ccx.body.local_decls, tcx).kind() {\n-                            ty::Ref(_, ty, _) if matches!(ty.kind(), ty::Ref(_, ty, _) if ty.is_str()) =>\n-                                {}\n-                            _ => self.check_op(ops::PanicNonStr),\n-                        }\n+                // `begin_panic` and `panic_display` are generic functions that accept\n+                // types other than str. Check to enforce that only str can be used in\n+                // const-eval.\n+\n+                // const-eval of the `begin_panic` fn assumes the argument is `&str`\n+                if Some(callee) == tcx.lang_items().begin_panic_fn() {\n+                    match args[0].ty(&self.ccx.body.local_decls, tcx).kind() {\n+                        ty::Ref(_, ty, _) if ty.is_str() => return,\n+                        _ => self.check_op(ops::PanicNonStr),\n                     }\n+                }\n \n-                    if is_lang_panic_fn(tcx, callee) {\n-                        // run stability check on non-panic special const fns.\n-                        return;\n+                // const-eval of the `panic_display` fn assumes the argument is `&&str`\n+                if Some(callee) == tcx.lang_items().panic_display() {\n+                    match args[0].ty(&self.ccx.body.local_decls, tcx).kind() {\n+                        ty::Ref(_, ty, _) if matches!(ty.kind(), ty::Ref(_, ty, _) if ty.is_str()) =>\n+                        {\n+                            return;\n+                        }\n+                        _ => self.check_op(ops::PanicNonStr),\n                     }\n                 }\n "}, {"sha": "dc44409d500a04384f3910b24200f34d34895151", "filename": "compiler/rustc_const_eval/src/transform/check_consts/mod.rs", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/dd757b9e0622815be615addb3031770922b87874/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd757b9e0622815be615addb3031770922b87874/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fmod.rs?ref=dd757b9e0622815be615addb3031770922b87874", "patch": "@@ -72,24 +72,6 @@ impl ConstCx<'mir, 'tcx> {\n     }\n }\n \n-/// Returns `true` if this `DefId` points to one of the official `panic` lang items.\n-pub fn is_lang_panic_fn(tcx: TyCtxt<'tcx>, def_id: DefId) -> bool {\n-    Some(def_id) == tcx.lang_items().panic_fn()\n-        || Some(def_id) == tcx.lang_items().panic_str()\n-        || Some(def_id) == tcx.lang_items().panic_display()\n-        || Some(def_id) == tcx.lang_items().begin_panic_fn()\n-        || Some(def_id) == tcx.lang_items().panic_fmt()\n-}\n-\n-/// Returns `true` if this `DefId` points to one of the lang items that will be handled differently\n-/// in const_eval.\n-pub fn is_lang_special_const_fn(tcx: TyCtxt<'tcx>, def_id: DefId) -> bool {\n-    // We can allow calls to these functions because `hook_special_const_fn` in\n-    // `const_eval/machine.rs` ensures the calls are handled specially.\n-    // Keep in sync with what that function handles!\n-    is_lang_panic_fn(tcx, def_id) || Some(def_id) == tcx.lang_items().const_eval_select()\n-}\n-\n pub fn rustc_allow_const_fn_unstable(\n     tcx: TyCtxt<'tcx>,\n     def_id: DefId,"}, {"sha": "67664d2ede1dd657ca7c78ed0a5b4f72434318f5", "filename": "compiler/rustc_const_eval/src/transform/promote_consts.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dd757b9e0622815be615addb3031770922b87874/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd757b9e0622815be615addb3031770922b87874/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs?ref=dd757b9e0622815be615addb3031770922b87874", "patch": "@@ -26,7 +26,7 @@ use rustc_index::vec::{Idx, IndexVec};\n use std::cell::Cell;\n use std::{cmp, iter, mem};\n \n-use crate::transform::check_consts::{is_lang_special_const_fn, qualifs, ConstCx};\n+use crate::transform::check_consts::{qualifs, ConstCx};\n use crate::transform::MirPass;\n \n /// A `MirPass` for promotion.\n@@ -656,9 +656,7 @@ impl<'tcx> Validator<'_, 'tcx> {\n         }\n \n         let is_const_fn = match *fn_ty.kind() {\n-            ty::FnDef(def_id, _) => {\n-                self.tcx.is_const_fn_raw(def_id) || is_lang_special_const_fn(self.tcx, def_id)\n-            }\n+            ty::FnDef(def_id, _) => self.tcx.is_const_fn_raw(def_id),\n             _ => false,\n         };\n         if !is_const_fn {"}, {"sha": "36496193d037084e89fd1e66341c5b1c2ff3ae3a", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dd757b9e0622815be615addb3031770922b87874/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd757b9e0622815be615addb3031770922b87874/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=dd757b9e0622815be615addb3031770922b87874", "patch": "@@ -107,6 +107,7 @@\n #![feature(const_discriminant)]\n #![feature(const_float_bits_conv)]\n #![feature(const_float_classify)]\n+#![feature(const_fmt_arguments_new)]\n #![feature(const_heap)]\n #![feature(const_inherent_unchecked_arith)]\n #![feature(const_int_unchecked_arith)]"}, {"sha": "29124c87e1bc5ff805c466cdd1ef874843efbbb6", "filename": "library/core/src/panicking.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/dd757b9e0622815be615addb3031770922b87874/library%2Fcore%2Fsrc%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd757b9e0622815be615addb3031770922b87874/library%2Fcore%2Fsrc%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fpanicking.rs?ref=dd757b9e0622815be615addb3031770922b87874", "patch": "@@ -34,13 +34,10 @@ use crate::panic::{Location, PanicInfo};\n // never inline unless panic_immediate_abort to avoid code\n // bloat at the call sites as much as possible\n #[cfg_attr(not(feature = \"panic_immediate_abort\"), inline(never))]\n+#[cfg_attr(feature = \"panic_immediate_abort\", inline)]\n #[track_caller]\n #[lang = \"panic\"] // needed by codegen for panic on overflow and other `Assert` MIR terminators\n-pub fn panic(expr: &'static str) -> ! {\n-    if cfg!(feature = \"panic_immediate_abort\") {\n-        super::intrinsics::abort()\n-    }\n-\n+pub const fn panic(expr: &'static str) -> ! {\n     // Use Arguments::new_v1 instead of format_args!(\"{}\", expr) to potentially\n     // reduce size overhead. The format_args! macro uses str's Display trait to\n     // write expr, which calls Formatter::pad, which must accommodate string\n@@ -52,15 +49,16 @@ pub fn panic(expr: &'static str) -> ! {\n \n #[inline]\n #[track_caller]\n-#[lang = \"panic_str\"] // needed for const-evaluated panics\n-pub fn panic_str(expr: &str) -> ! {\n-    panic_fmt(format_args!(\"{}\", expr));\n+#[lang = \"panic_str\"] // needed for `non-fmt-panics` lint\n+pub const fn panic_str(expr: &str) -> ! {\n+    panic_display(&expr);\n }\n \n #[inline]\n #[track_caller]\n #[lang = \"panic_display\"] // needed for const-evaluated panics\n-pub fn panic_display<T: fmt::Display>(x: &T) -> ! {\n+#[rustc_do_not_const_check] // hooked by const-eval\n+pub const fn panic_display<T: fmt::Display>(x: &T) -> ! {\n     panic_fmt(format_args!(\"{}\", *x));\n }\n \n@@ -89,7 +87,8 @@ fn panic_bounds_check(index: usize, len: usize) -> ! {\n #[cfg_attr(feature = \"panic_immediate_abort\", inline)]\n #[track_caller]\n #[lang = \"panic_fmt\"] // needed for const-evaluated panics\n-pub fn panic_fmt(fmt: fmt::Arguments<'_>) -> ! {\n+#[rustc_do_not_const_check] // hooked by const-eval\n+pub const fn panic_fmt(fmt: fmt::Arguments<'_>) -> ! {\n     if cfg!(feature = \"panic_immediate_abort\") {\n         super::intrinsics::abort()\n     }"}, {"sha": "c2243b259538aee080699b2f79fadf51663931a4", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dd757b9e0622815be615addb3031770922b87874/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd757b9e0622815be615addb3031770922b87874/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=dd757b9e0622815be615addb3031770922b87874", "patch": "@@ -257,6 +257,7 @@\n #![feature(const_cstr_unchecked)]\n #![feature(const_fn_floating_point_arithmetic)]\n #![feature(const_fn_fn_ptr_basics)]\n+#![feature(const_fn_trait_bound)]\n #![feature(const_format_args)]\n #![feature(const_io_structs)]\n #![feature(const_ip)]"}, {"sha": "437fcbb317601c188e80b5b8dd77492fe8736b19", "filename": "library/std/src/panicking.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd757b9e0622815be615addb3031770922b87874/library%2Fstd%2Fsrc%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd757b9e0622815be615addb3031770922b87874/library%2Fstd%2Fsrc%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpanicking.rs?ref=dd757b9e0622815be615addb3031770922b87874", "patch": "@@ -512,7 +512,8 @@ pub fn begin_panic_handler(info: &PanicInfo<'_>) -> ! {\n #[cfg_attr(not(feature = \"panic_immediate_abort\"), inline(never))]\n #[cold]\n #[track_caller]\n-pub fn begin_panic<M: Any + Send>(msg: M) -> ! {\n+#[rustc_do_not_const_check] // hooked by const-eval\n+pub const fn begin_panic<M: Any + Send>(msg: M) -> ! {\n     if cfg!(feature = \"panic_immediate_abort\") {\n         intrinsics::abort()\n     }"}]}