{"sha": "45c7838089576552391237bb41cdd3d46582d3e5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1Yzc4MzgwODk1NzY1NTIzOTEyMzdiYjQxY2RkM2Q0NjU4MmQzZTU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-24T00:49:05Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-24T00:49:05Z"}, "message": "Auto merge of #71496 - Dylan-DPC:rollup-gwxejmk, r=Dylan-DPC\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #70845 (Make the `structural_match` error diagnostic for const generics clearer)\n - #71063 (Document unsafety in core::{option, hash})\n - #71068 (Stabilize UNICODE_VERSION (feature unicode_version))\n - #71426 (fix error code in E0751.md)\n - #71459 (Add leading 0x to offset in Debug fmt of Pointer)\n - #71492 (Document unsafety in core::{panicking, alloc::layout, hint, iter::adapters::zip})\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "be8f505326157d0cad29a4ca5c24ad6ce8eafb19", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be8f505326157d0cad29a4ca5c24ad6ce8eafb19"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45c7838089576552391237bb41cdd3d46582d3e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45c7838089576552391237bb41cdd3d46582d3e5", "html_url": "https://github.com/rust-lang/rust/commit/45c7838089576552391237bb41cdd3d46582d3e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45c7838089576552391237bb41cdd3d46582d3e5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14b15521c52549ebbb113173b4abecd124b5a823", "url": "https://api.github.com/repos/rust-lang/rust/commits/14b15521c52549ebbb113173b4abecd124b5a823", "html_url": "https://github.com/rust-lang/rust/commit/14b15521c52549ebbb113173b4abecd124b5a823"}, {"sha": "8a0e88e653c0382681c81c999dd91ba88ac16568", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a0e88e653c0382681c81c999dd91ba88ac16568", "html_url": "https://github.com/rust-lang/rust/commit/8a0e88e653c0382681c81c999dd91ba88ac16568"}], "stats": {"total": 304, "additions": 185, "deletions": 119}, "files": [{"sha": "a09c2387d0de2b597c476ffec8d78e3a568cefde", "filename": "src/libcore/alloc/layout.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/45c7838089576552391237bb41cdd3d46582d3e5/src%2Flibcore%2Falloc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45c7838089576552391237bb41cdd3d46582d3e5/src%2Flibcore%2Falloc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Falloc%2Flayout.rs?ref=45c7838089576552391237bb41cdd3d46582d3e5", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-undocumented-unsafe\n-\n use crate::cmp;\n use crate::fmt;\n use crate::mem;\n@@ -77,6 +75,8 @@ impl Layout {\n             return Err(LayoutErr { private: () });\n         }\n \n+        // SAFETY: the conditions for `from_size_align_unchecked` have been\n+        // checked above.\n         unsafe { Ok(Layout::from_size_align_unchecked(size, align)) }\n     }\n \n@@ -115,7 +115,7 @@ impl Layout {\n     #[inline]\n     pub const fn new<T>() -> Self {\n         let (size, align) = size_align::<T>();\n-        // Note that the align is guaranteed by rustc to be a power of two and\n+        // SAFETY: the align is guaranteed by Rust to be a power of two and\n         // the size+align combo is guaranteed to fit in our address space. As a\n         // result use the unchecked constructor here to avoid inserting code\n         // that panics if it isn't optimized well enough.\n@@ -129,8 +129,8 @@ impl Layout {\n     #[inline]\n     pub fn for_value<T: ?Sized>(t: &T) -> Self {\n         let (size, align) = (mem::size_of_val(t), mem::align_of_val(t));\n-        // See rationale in `new` for why this is using an unsafe variant below\n         debug_assert!(Layout::from_size_align(size, align).is_ok());\n+        // SAFETY: see rationale in `new` for why this is using an unsafe variant below\n         unsafe { Layout::from_size_align_unchecked(size, align) }\n     }\n \n@@ -143,7 +143,7 @@ impl Layout {\n     #[unstable(feature = \"alloc_layout_extra\", issue = \"55724\")]\n     #[inline]\n     pub const fn dangling(&self) -> NonNull<u8> {\n-        // align is non-zero and a power of two\n+        // SAFETY: align is guaranteed to be non-zero\n         unsafe { NonNull::new_unchecked(self.align() as *mut u8) }\n     }\n \n@@ -249,11 +249,9 @@ impl Layout {\n         let padded_size = self.size() + self.padding_needed_for(self.align());\n         let alloc_size = padded_size.checked_mul(n).ok_or(LayoutErr { private: () })?;\n \n-        unsafe {\n-            // self.align is already known to be valid and alloc_size has been\n-            // padded already.\n-            Ok((Layout::from_size_align_unchecked(alloc_size, self.align()), padded_size))\n-        }\n+        // SAFETY: self.align is already known to be valid and alloc_size has been\n+        // padded already.\n+        unsafe { Ok((Layout::from_size_align_unchecked(alloc_size, self.align()), padded_size)) }\n     }\n \n     /// Creates a layout describing the record for `self` followed by"}, {"sha": "d82a482e0f1a80a102bb2383497832b68c8df24c", "filename": "src/libcore/char/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/45c7838089576552391237bb41cdd3d46582d3e5/src%2Flibcore%2Fchar%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45c7838089576552391237bb41cdd3d46582d3e5/src%2Flibcore%2Fchar%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar%2Fmod.rs?ref=45c7838089576552391237bb41cdd3d46582d3e5", "patch": "@@ -34,9 +34,7 @@ pub use self::convert::ParseCharError;\n pub use self::convert::{from_digit, from_u32};\n #[stable(feature = \"decode_utf16\", since = \"1.9.0\")]\n pub use self::decode::{decode_utf16, DecodeUtf16, DecodeUtf16Error};\n-\n-// unstable re-exports\n-#[unstable(feature = \"unicode_version\", issue = \"49726\")]\n+#[stable(feature = \"unicode_version\", since = \"1.45.0\")]\n pub use crate::unicode::UNICODE_VERSION;\n \n use crate::fmt::{self, Write};"}, {"sha": "d80101753cbef4b554c1a536fcebd4a47523d2c7", "filename": "src/libcore/hash/mod.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/45c7838089576552391237bb41cdd3d46582d3e5/src%2Flibcore%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45c7838089576552391237bb41cdd3d46582d3e5/src%2Flibcore%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash%2Fmod.rs?ref=45c7838089576552391237bb41cdd3d46582d3e5", "patch": "@@ -79,8 +79,6 @@\n //! }\n //! ```\n \n-// ignore-tidy-undocumented-unsafe\n-\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n use crate::fmt;\n@@ -572,6 +570,10 @@ mod impls {\n                 fn hash_slice<H: Hasher>(data: &[$ty], state: &mut H) {\n                     let newlen = data.len() * mem::size_of::<$ty>();\n                     let ptr = data.as_ptr() as *const u8;\n+                    // SAFETY: `ptr` is valid and aligned, as this macro is only used\n+                    // for numeric primitives which have no padding. The new slice only\n+                    // spans across `data` and is never mutated, and its total size is the\n+                    // same as the original `data` so it can't be over `isize::MAX`.\n                     state.write(unsafe { slice::from_raw_parts(ptr, newlen) })\n                 }\n             }\n@@ -691,6 +693,11 @@ mod impls {\n                 state.write_usize(*self as *const () as usize);\n             } else {\n                 // Fat pointer\n+                // SAFETY: we are accessing the memory occupied by `self`\n+                // which is guaranteed to be valid.\n+                // This assumes a fat pointer can be represented by a `(usize, usize)`,\n+                // which is safe to do in `std` because it is shipped and kept in sync\n+                // with the implementation of fat pointers in `rustc`.\n                 let (a, b) = unsafe { *(self as *const Self as *const (usize, usize)) };\n                 state.write_usize(a);\n                 state.write_usize(b);\n@@ -706,6 +713,11 @@ mod impls {\n                 state.write_usize(*self as *const () as usize);\n             } else {\n                 // Fat pointer\n+                // SAFETY: we are accessing the memory occupied by `self`\n+                // which is guaranteed to be valid.\n+                // This assumes a fat pointer can be represented by a `(usize, usize)`,\n+                // which is safe to do in `std` because it is shipped and kept in sync\n+                // with the implementation of fat pointers in `rustc`.\n                 let (a, b) = unsafe { *(self as *const Self as *const (usize, usize)) };\n                 state.write_usize(a);\n                 state.write_usize(b);"}, {"sha": "ac058609f45ed34ef6b6006581104bf0e34a7a0d", "filename": "src/libcore/hash/sip.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/45c7838089576552391237bb41cdd3d46582d3e5/src%2Flibcore%2Fhash%2Fsip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45c7838089576552391237bb41cdd3d46582d3e5/src%2Flibcore%2Fhash%2Fsip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash%2Fsip.rs?ref=45c7838089576552391237bb41cdd3d46582d3e5", "patch": "@@ -1,7 +1,5 @@\n //! An implementation of SipHash.\n \n-// ignore-tidy-undocumented-unsafe\n-\n #![allow(deprecated)] // the types in this module are deprecated\n \n use crate::cmp;\n@@ -265,6 +263,7 @@ impl<S: Sip> super::Hasher for Hasher<S> {\n \n         if self.ntail != 0 {\n             needed = 8 - self.ntail;\n+            // SAFETY: `cmp::min(length, needed)` is guaranteed to not be over `length`\n             self.tail |= unsafe { u8to64_le(msg, 0, cmp::min(length, needed)) } << (8 * self.ntail);\n             if length < needed {\n                 self.ntail += length;\n@@ -279,10 +278,13 @@ impl<S: Sip> super::Hasher for Hasher<S> {\n \n         // Buffered tail is now flushed, process new input.\n         let len = length - needed;\n-        let left = len & 0x7;\n+        let left = len & 0x7; // len % 8\n \n         let mut i = needed;\n         while i < len - left {\n+            // SAFETY: because `len - left` is the biggest multiple of 8 under\n+            // `len`, and because `i` starts at `needed` where `len` is `length - needed`,\n+            // `i + 8` is guaranteed to be less than or equal to `length`.\n             let mi = unsafe { load_int_le!(msg, i, u64) };\n \n             self.state.v3 ^= mi;\n@@ -292,6 +294,9 @@ impl<S: Sip> super::Hasher for Hasher<S> {\n             i += 8;\n         }\n \n+        // SAFETY: `i` is now `needed + len.div_euclid(8) * 8`,\n+        // so `i + left` = `needed + len` = `length`, which is by\n+        // definition equal to `msg.len()`.\n         self.tail = unsafe { u8to64_le(msg, i, left) };\n         self.ntail = left;\n     }"}, {"sha": "0d794de5fe84b3233d904382b15959203c126b33", "filename": "src/libcore/hint.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/45c7838089576552391237bb41cdd3d46582d3e5/src%2Flibcore%2Fhint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45c7838089576552391237bb41cdd3d46582d3e5/src%2Flibcore%2Fhint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhint.rs?ref=45c7838089576552391237bb41cdd3d46582d3e5", "patch": "@@ -2,8 +2,6 @@\n \n //! Hints to compiler that affects how code should be emitted or optimized.\n \n-// ignore-tidy-undocumented-unsafe\n-\n use crate::intrinsics;\n \n /// Informs the compiler that this point in the code is not reachable, enabling\n@@ -68,11 +66,13 @@ pub fn spin_loop() {\n     {\n         #[cfg(target_arch = \"x86\")]\n         {\n+            // SAFETY: the `cfg` attr ensures that we only execute this on x86 targets.\n             unsafe { crate::arch::x86::_mm_pause() };\n         }\n \n         #[cfg(target_arch = \"x86_64\")]\n         {\n+            // SAFETY: the `cfg` attr ensures that we only execute this on x86_64 targets.\n             unsafe { crate::arch::x86_64::_mm_pause() };\n         }\n     }\n@@ -81,10 +81,13 @@ pub fn spin_loop() {\n     {\n         #[cfg(target_arch = \"aarch64\")]\n         {\n+            // SAFETY: the `cfg` attr ensures that we only execute this on aarch64 targets.\n             unsafe { crate::arch::aarch64::__yield() };\n         }\n         #[cfg(target_arch = \"arm\")]\n         {\n+            // SAFETY: the `cfg` attr ensures that we only execute this on arm targets\n+            // with support for the v6 feature.\n             unsafe { crate::arch::arm::__yield() };\n         }\n     }\n@@ -112,6 +115,8 @@ pub fn black_box<T>(dummy: T) -> T {\n     // this. LLVM's interpretation of inline assembly is that it's, well, a black\n     // box. This isn't the greatest implementation since it probably deoptimizes\n     // more than we want, but it's so far good enough.\n+\n+    // SAFETY: the inline assembly is a no-op.\n     unsafe {\n         llvm_asm!(\"\" : : \"r\"(&dummy));\n         dummy"}, {"sha": "e83d36a580f06464022d3b0b51bb0f2c9f64f142", "filename": "src/libcore/iter/adapters/zip.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/45c7838089576552391237bb41cdd3d46582d3e5/src%2Flibcore%2Fiter%2Fadapters%2Fzip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45c7838089576552391237bb41cdd3d46582d3e5/src%2Flibcore%2Fiter%2Fadapters%2Fzip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fadapters%2Fzip.rs?ref=45c7838089576552391237bb41cdd3d46582d3e5", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-undocumented-unsafe\n-\n use crate::cmp;\n \n use super::super::{DoubleEndedIterator, ExactSizeIterator, FusedIterator, Iterator, TrustedLen};\n@@ -176,9 +174,11 @@ where\n         if self.index < self.len {\n             let i = self.index;\n             self.index += 1;\n+            // SAFETY: `i` is smaller than `self.len`, thus smaller than `self.a.len()` and `self.b.len()`\n             unsafe { Some((self.a.get_unchecked(i), self.b.get_unchecked(i))) }\n         } else if A::may_have_side_effect() && self.index < self.a.len() {\n             // match the base implementation's potential side effects\n+            // SAFETY: we just checked that `self.index` < `self.a.len()`\n             unsafe {\n                 self.a.get_unchecked(self.index);\n             }\n@@ -203,11 +203,15 @@ where\n             let i = self.index;\n             self.index += 1;\n             if A::may_have_side_effect() {\n+                // SAFETY: the usage of `cmp::min` to calculate `delta`\n+                // ensures that `end` is smaller than or equal to `self.len`,\n+                // so `i` is also smaller than `self.len`.\n                 unsafe {\n                     self.a.get_unchecked(i);\n                 }\n             }\n             if B::may_have_side_effect() {\n+                // SAFETY: same as above.\n                 unsafe {\n                     self.b.get_unchecked(i);\n                 }\n@@ -243,6 +247,8 @@ where\n         if self.index < self.len {\n             self.len -= 1;\n             let i = self.len;\n+            // SAFETY: `i` is smaller than the previous value of `self.len`,\n+            // which is also smaller than or equal to `self.a.len()` and `self.b.len()`\n             unsafe { Some((self.a.get_unchecked(i), self.b.get_unchecked(i))) }\n         } else {\n             None"}, {"sha": "63a5277100fa81be381c58a382f184d1e4e9d793", "filename": "src/libcore/option.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/45c7838089576552391237bb41cdd3d46582d3e5/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45c7838089576552391237bb41cdd3d46582d3e5/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=45c7838089576552391237bb41cdd3d46582d3e5", "patch": "@@ -133,8 +133,6 @@\n //! [`Box<T>`]: ../../std/boxed/struct.Box.html\n //! [`i32`]: ../../std/primitive.i32.html\n \n-// ignore-tidy-undocumented-unsafe\n-\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n use crate::iter::{FromIterator, FusedIterator, TrustedLen};\n@@ -301,6 +299,8 @@ impl<T> Option<T> {\n     #[inline]\n     #[stable(feature = \"pin\", since = \"1.33.0\")]\n     pub fn as_pin_ref(self: Pin<&Self>) -> Option<Pin<&T>> {\n+        // SAFETY: `x` is guaranteed to be pinned because it comes from `self`\n+        // which is pinned.\n         unsafe { Pin::get_ref(self).as_ref().map(|x| Pin::new_unchecked(x)) }\n     }\n \n@@ -310,6 +310,8 @@ impl<T> Option<T> {\n     #[inline]\n     #[stable(feature = \"pin\", since = \"1.33.0\")]\n     pub fn as_pin_mut(self: Pin<&mut Self>) -> Option<Pin<&mut T>> {\n+        // SAFETY: `get_unchecked_mut` is never used to move the `Option` inside `self`.\n+        // `x` is guaranteed to be pinned because it comes from `self` which is pinned.\n         unsafe { Pin::get_unchecked_mut(self).as_mut().map(|x| Pin::new_unchecked(x)) }\n     }\n \n@@ -858,6 +860,8 @@ impl<T> Option<T> {\n \n         match *self {\n             Some(ref mut v) => v,\n+            // SAFETY: a `None` variant for `self` would have been replaced by a `Some`\n+            // variant in the code above.\n             None => unsafe { hint::unreachable_unchecked() },\n         }\n     }"}, {"sha": "1e4209fd26be3b459e926ba0df8a60dadbf6e1e1", "filename": "src/libcore/panicking.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/45c7838089576552391237bb41cdd3d46582d3e5/src%2Flibcore%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45c7838089576552391237bb41cdd3d46582d3e5/src%2Flibcore%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpanicking.rs?ref=45c7838089576552391237bb41cdd3d46582d3e5", "patch": "@@ -19,8 +19,6 @@\n //! necessary lang items for the compiler. All panics are funneled through this\n //! one function. The actual symbol is declared through the `#[panic_handler]` attribute.\n \n-// ignore-tidy-undocumented-unsafe\n-\n #![allow(dead_code, missing_docs)]\n #![unstable(\n     feature = \"core_panic\",\n@@ -41,6 +39,7 @@ use crate::panic::{Location, PanicInfo};\n #[lang = \"panic\"] // needed by codegen for panic on overflow and other `Assert` MIR terminators\n pub fn panic(expr: &str) -> ! {\n     if cfg!(feature = \"panic_immediate_abort\") {\n+        // SAFETY: the `abort` intrinsic has no requirements to be called.\n         unsafe { super::intrinsics::abort() }\n     }\n \n@@ -63,6 +62,7 @@ pub fn panic(expr: &str) -> ! {\n #[lang = \"panic_bounds_check\"] // needed by codegen for panic on OOB array/slice access\n fn panic_bounds_check(index: usize, len: usize) -> ! {\n     if cfg!(feature = \"panic_immediate_abort\") {\n+        // SAFETY: the `abort` intrinsic has no requirements to be called.\n         unsafe { super::intrinsics::abort() }\n     }\n \n@@ -77,6 +77,7 @@ fn panic_bounds_check(index: usize, len: usize) -> ! {\n #[lang = \"panic_bounds_check\"] // needed by codegen for panic on OOB array/slice access\n fn panic_bounds_check(location: &Location<'_>, index: usize, len: usize) -> ! {\n     if cfg!(feature = \"panic_immediate_abort\") {\n+        // SAFETY: the `abort` intrinsic has no requirements to be called.\n         unsafe { super::intrinsics::abort() }\n     }\n \n@@ -93,6 +94,7 @@ fn panic_bounds_check(location: &Location<'_>, index: usize, len: usize) -> ! {\n #[cfg_attr(not(bootstrap), track_caller)]\n pub fn panic_fmt(fmt: fmt::Arguments<'_>, #[cfg(bootstrap)] location: &Location<'_>) -> ! {\n     if cfg!(feature = \"panic_immediate_abort\") {\n+        // SAFETY: the `abort` intrinsic has no requirements to be called.\n         unsafe { super::intrinsics::abort() }\n     }\n \n@@ -108,5 +110,6 @@ pub fn panic_fmt(fmt: fmt::Arguments<'_>, #[cfg(bootstrap)] location: &Location<\n     #[cfg(not(bootstrap))]\n     let pi = PanicInfo::internal_constructor(Some(&fmt), Location::caller());\n \n+    // SAFETY: `panic_impl` is defined in safe Rust code and thus is safe to call.\n     unsafe { panic_impl(&pi) }\n }"}, {"sha": "28c07f7717046599a1e9db0153ddfe7355ff565d", "filename": "src/libcore/unicode/mod.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/45c7838089576552391237bb41cdd3d46582d3e5/src%2Flibcore%2Funicode%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45c7838089576552391237bb41cdd3d46582d3e5/src%2Flibcore%2Funicode%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funicode%2Fmod.rs?ref=45c7838089576552391237bb41cdd3d46582d3e5", "patch": "@@ -7,9 +7,14 @@ mod unicode_data;\n /// The version of [Unicode](http://www.unicode.org/) that the Unicode parts of\n /// `char` and `str` methods are based on.\n ///\n+/// New versions of Unicode are released regularly and subsequently all methods\n+/// in the standard library depending on Unicode are updated. Therefore the\n+/// behavior of some `char` and `str` methods and the value of this constant\n+/// changes over time. This is *not* considered to be a breaking change.\n+///\n /// The version numbering scheme is explained in\n /// [Unicode 11.0 or later, Section 3.1 Versions of the Unicode Standard](https://www.unicode.org/versions/Unicode11.0.0/ch03.pdf#page=4).\n-#[unstable(feature = \"unicode_version\", issue = \"49726\")]\n+#[stable(feature = \"unicode_version\", since = \"1.45.0\")]\n pub const UNICODE_VERSION: (u8, u8, u8) = unicode_data::UNICODE_VERSION;\n \n // For use in liballoc, not re-exported in libstd."}, {"sha": "809b888d92ac3bf0e1397e3021e779aa3406af30", "filename": "src/librustc_error_codes/error_codes/E0751.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45c7838089576552391237bb41cdd3d46582d3e5/src%2Flibrustc_error_codes%2Ferror_codes%2FE0751.md", "raw_url": "https://github.com/rust-lang/rust/raw/45c7838089576552391237bb41cdd3d46582d3e5/src%2Flibrustc_error_codes%2Ferror_codes%2FE0751.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0751.md?ref=45c7838089576552391237bb41cdd3d46582d3e5", "patch": "@@ -2,7 +2,7 @@ There are both a positive and negative trait implementation for the same type.\n \n Erroneous code example:\n \n-```compile_fail,E0748\n+```compile_fail,E0751\n trait MyTrait {}\n impl MyTrait for i32 { }\n impl !MyTrait for i32 { }"}, {"sha": "8434b45a1e7e795e5b7a9026d664afd7abdc5d21", "filename": "src/librustc_middle/mir/interpret/pointer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/45c7838089576552391237bb41cdd3d46582d3e5/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fpointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45c7838089576552391237bb41cdd3d46582d3e5/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fpointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fpointer.rs?ref=45c7838089576552391237bb41cdd3d46582d3e5", "patch": "@@ -121,13 +121,13 @@ static_assert_size!(Pointer, 16);\n \n impl<Tag: fmt::Debug, Id: fmt::Debug> fmt::Debug for Pointer<Tag, Id> {\n     default fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        write!(f, \"{:?}+{:x}[{:?}]\", self.alloc_id, self.offset.bytes(), self.tag)\n+        write!(f, \"{:?}+0x{:x}[{:?}]\", self.alloc_id, self.offset.bytes(), self.tag)\n     }\n }\n // Specialization for no tag\n impl<Id: fmt::Debug> fmt::Debug for Pointer<(), Id> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        write!(f, \"{:?}+{:x}\", self.alloc_id, self.offset.bytes())\n+        write!(f, \"{:?}+0x{:x}\", self.alloc_id, self.offset.bytes())\n     }\n }\n "}, {"sha": "57d13e35fd2dc6ae4fae3ca25ff095959fd08bff", "filename": "src/librustc_trait_selection/traits/specialize/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45c7838089576552391237bb41cdd3d46582d3e5/src%2Flibrustc_trait_selection%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45c7838089576552391237bb41cdd3d46582d3e5/src%2Flibrustc_trait_selection%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fspecialize%2Fmod.rs?ref=45c7838089576552391237bb41cdd3d46582d3e5", "patch": "@@ -345,7 +345,7 @@ fn report_negative_positive_conflict(\n     let mut err = struct_span_err!(\n         tcx.sess,\n         impl_span,\n-        E0748,\n+        E0751,\n         \"found both positive and negative implementation of trait `{}`{}:\",\n         overlap.trait_desc,\n         overlap.self_desc.clone().map_or(String::new(), |ty| format!(\" for type `{}`\", ty))"}, {"sha": "4991e0bf9333f8494eadff26d446f6c535e7b8fe", "filename": "src/librustc_typeck/collect/type_of.rs", "status": "modified", "additions": 39, "deletions": 11, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/45c7838089576552391237bb41cdd3d46582d3e5/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45c7838089576552391237bb41cdd3d46582d3e5/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs?ref=45c7838089576552391237bb41cdd3d46582d3e5", "patch": "@@ -341,17 +341,45 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                 if traits::search_for_structural_match_violation(param.hir_id, param.span, tcx, ty)\n                     .is_some()\n                 {\n-                    struct_span_err!(\n-                        tcx.sess,\n-                        hir_ty.span,\n-                        E0741,\n-                        \"the types of const generic parameters must derive `PartialEq` and `Eq`\",\n-                    )\n-                    .span_label(\n-                        hir_ty.span,\n-                        format!(\"`{}` doesn't derive both `PartialEq` and `Eq`\", ty),\n-                    )\n-                    .emit();\n+                    // We use the same error code in both branches, because this is really the same\n+                    // issue: we just special-case the message for type parameters to make it\n+                    // clearer.\n+                    if let ty::Param(_) = ty.peel_refs().kind {\n+                        // Const parameters may not have type parameters as their types,\n+                        // because we cannot be sure that the type parameter derives `PartialEq`\n+                        // and `Eq` (just implementing them is not enough for `structural_match`).\n+                        struct_span_err!(\n+                            tcx.sess,\n+                            hir_ty.span,\n+                            E0741,\n+                            \"`{}` is not guaranteed to `#[derive(PartialEq, Eq)]`, so may not be \\\n+                             used as the type of a const parameter\",\n+                            ty,\n+                        )\n+                        .span_label(\n+                            hir_ty.span,\n+                            format!(\"`{}` may not derive both `PartialEq` and `Eq`\", ty),\n+                        )\n+                        .note(\n+                            \"it is not currently possible to use a type parameter as the type of a \\\n+                             const parameter\",\n+                        )\n+                        .emit();\n+                    } else {\n+                        struct_span_err!(\n+                            tcx.sess,\n+                            hir_ty.span,\n+                            E0741,\n+                            \"`{}` must be annotated with `#[derive(PartialEq, Eq)]` to be used as \\\n+                             the type of a const parameter\",\n+                            ty,\n+                        )\n+                        .span_label(\n+                            hir_ty.span,\n+                            format!(\"`{}` doesn't derive both `PartialEq` and `Eq`\", ty),\n+                        )\n+                        .emit();\n+                    }\n                 }\n                 ty\n             }"}, {"sha": "4477b8a3f0d548f29924d1680d3512ae7cc972bb", "filename": "src/test/mir-opt/byte_slice/rustc.main.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/45c7838089576552391237bb41cdd3d46582d3e5/src%2Ftest%2Fmir-opt%2Fbyte_slice%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/45c7838089576552391237bb41cdd3d46582d3e5/src%2Ftest%2Fmir-opt%2Fbyte_slice%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbyte_slice%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir?ref=45c7838089576552391237bb41cdd3d46582d3e5", "patch": "@@ -16,10 +16,10 @@ fn main() -> () {\n         _1 = const b\"foo\";               // bb0[1]: scope 0 at $DIR/byte_slice.rs:5:13: 5:19\n                                          // ty::Const\n                                          // + ty: &[u8; 3]\n-                                         // + val: Value(Scalar(alloc0+0))\n+                                         // + val: Value(Scalar(alloc0+0x0))\n                                          // mir::Constant\n                                          // + span: $DIR/byte_slice.rs:5:13: 5:19\n-                                         // + literal: Const { ty: &[u8; 3], val: Value(Scalar(alloc0+0)) }\n+                                         // + literal: Const { ty: &[u8; 3], val: Value(Scalar(alloc0+0x0)) }\n         StorageLive(_2);                 // bb0[2]: scope 1 at $DIR/byte_slice.rs:6:9: 6:10\n         _2 = [const 5u8, const 120u8];   // bb0[3]: scope 1 at $DIR/byte_slice.rs:6:13: 6:24\n                                          // ty::Const"}, {"sha": "c8456dbbd6165935faf22b700b89c5ac9cd6ec8e", "filename": "src/test/mir-opt/const-promotion-extern-static/rustc.BAR-promoted[0].ConstProp.after.mir", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/45c7838089576552391237bb41cdd3d46582d3e5/src%2Ftest%2Fmir-opt%2Fconst-promotion-extern-static%2Frustc.BAR-promoted%5B0%5D.ConstProp.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/45c7838089576552391237bb41cdd3d46582d3e5/src%2Ftest%2Fmir-opt%2Fconst-promotion-extern-static%2Frustc.BAR-promoted%5B0%5D.ConstProp.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst-promotion-extern-static%2Frustc.BAR-promoted%5B0%5D.ConstProp.after.mir?ref=45c7838089576552391237bb41cdd3d46582d3e5", "patch": "@@ -7,13 +7,13 @@ promoted[0] in BAR: &[&i32; 1] = {\n     let mut _3: &i32;                    // in scope 0 at $DIR/const-promotion-extern-static.rs:9:33: 9:34\n \n     bb0: {\n-        _3 = const {alloc0+0: &i32};     // bb0[0]: scope 0 at $DIR/const-promotion-extern-static.rs:9:33: 9:34\n+        _3 = const {alloc0+0x0: &i32};   // bb0[0]: scope 0 at $DIR/const-promotion-extern-static.rs:9:33: 9:34\n                                          // ty::Const\n                                          // + ty: &i32\n-                                         // + val: Value(Scalar(alloc0+0))\n+                                         // + val: Value(Scalar(alloc0+0x0))\n                                          // mir::Constant\n                                          // + span: $DIR/const-promotion-extern-static.rs:9:33: 9:34\n-                                         // + literal: Const { ty: &i32, val: Value(Scalar(alloc0+0)) }\n+                                         // + literal: Const { ty: &i32, val: Value(Scalar(alloc0+0x0)) }\n         _2 = _3;                         // bb0[1]: scope 0 at $DIR/const-promotion-extern-static.rs:9:32: 9:34\n         _1 = [move _2];                  // bb0[2]: scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:35\n         _0 = &_1;                        // bb0[3]: scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:35"}, {"sha": "dc71961d4e31813f1ebfdcf673933eaaca63ddd9", "filename": "src/test/mir-opt/const-promotion-extern-static/rustc.BAR.PromoteTemps.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/45c7838089576552391237bb41cdd3d46582d3e5/src%2Ftest%2Fmir-opt%2Fconst-promotion-extern-static%2Frustc.BAR.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/45c7838089576552391237bb41cdd3d46582d3e5/src%2Ftest%2Fmir-opt%2Fconst-promotion-extern-static%2Frustc.BAR.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst-promotion-extern-static%2Frustc.BAR.PromoteTemps.diff?ref=45c7838089576552391237bb41cdd3d46582d3e5", "patch": "@@ -16,16 +16,16 @@\n -         StorageLive(_3);                 // bb0[2]: scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:35\n -         StorageLive(_4);                 // bb0[3]: scope 0 at $DIR/const-promotion-extern-static.rs:9:32: 9:34\n -         StorageLive(_5);                 // bb0[4]: scope 0 at $DIR/const-promotion-extern-static.rs:9:33: 9:34\n--         _5 = const {alloc0+0: &i32};     // bb0[5]: scope 0 at $DIR/const-promotion-extern-static.rs:9:33: 9:34\n+-         _5 = const {alloc0+0x0: &i32};   // bb0[5]: scope 0 at $DIR/const-promotion-extern-static.rs:9:33: 9:34\n +         _6 = const BAR::promoted[0];     // bb0[2]: scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:35\n                                            // ty::Const\n -                                          // + ty: &i32\n--                                          // + val: Value(Scalar(alloc0+0))\n+-                                          // + val: Value(Scalar(alloc0+0x0))\n +                                          // + ty: &[&i32; 1]\n +                                          // + val: Unevaluated(DefId(0:6 ~ const_promotion_extern_static[317d]::BAR[0]), [], Some(promoted[0]))\n                                            // mir::Constant\n -                                          // + span: $DIR/const-promotion-extern-static.rs:9:33: 9:34\n--                                          // + literal: Const { ty: &i32, val: Value(Scalar(alloc0+0)) }\n+-                                          // + literal: Const { ty: &i32, val: Value(Scalar(alloc0+0x0)) }\n -         _4 = &(*_5);                     // bb0[6]: scope 0 at $DIR/const-promotion-extern-static.rs:9:32: 9:34\n -         _3 = [move _4];                  // bb0[7]: scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:35\n -         _2 = &_3;                        // bb0[8]: scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:35"}, {"sha": "7a1a95b448a9e2e5ba91e28968296f34abf94eb1", "filename": "src/test/mir-opt/const-promotion-extern-static/rustc.FOO-promoted[0].ConstProp.after.mir", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/45c7838089576552391237bb41cdd3d46582d3e5/src%2Ftest%2Fmir-opt%2Fconst-promotion-extern-static%2Frustc.FOO-promoted%5B0%5D.ConstProp.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/45c7838089576552391237bb41cdd3d46582d3e5/src%2Ftest%2Fmir-opt%2Fconst-promotion-extern-static%2Frustc.FOO-promoted%5B0%5D.ConstProp.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst-promotion-extern-static%2Frustc.FOO-promoted%5B0%5D.ConstProp.after.mir?ref=45c7838089576552391237bb41cdd3d46582d3e5", "patch": "@@ -9,13 +9,13 @@ promoted[0] in FOO: &[&i32; 1] = {\n     }\n \n     bb0: {\n-        _3 = const {alloc2+0: &i32};     // bb0[0]: scope 0 at $DIR/const-promotion-extern-static.rs:13:42: 13:43\n+        _3 = const {alloc2+0x0: &i32};   // bb0[0]: scope 0 at $DIR/const-promotion-extern-static.rs:13:42: 13:43\n                                          // ty::Const\n                                          // + ty: &i32\n-                                         // + val: Value(Scalar(alloc2+0))\n+                                         // + val: Value(Scalar(alloc2+0x0))\n                                          // mir::Constant\n                                          // + span: $DIR/const-promotion-extern-static.rs:13:42: 13:43\n-                                         // + literal: Const { ty: &i32, val: Value(Scalar(alloc2+0)) }\n+                                         // + literal: Const { ty: &i32, val: Value(Scalar(alloc2+0x0)) }\n         _2 = _3;                         // bb0[1]: scope 0 at $DIR/const-promotion-extern-static.rs:13:41: 13:43\n         _1 = [move _2];                  // bb0[2]: scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n         _0 = &_1;                        // bb0[3]: scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46"}, {"sha": "18623743382f83343ecccb346c58b06dec803940", "filename": "src/test/mir-opt/const-promotion-extern-static/rustc.FOO.PromoteTemps.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/45c7838089576552391237bb41cdd3d46582d3e5/src%2Ftest%2Fmir-opt%2Fconst-promotion-extern-static%2Frustc.FOO.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/45c7838089576552391237bb41cdd3d46582d3e5/src%2Ftest%2Fmir-opt%2Fconst-promotion-extern-static%2Frustc.FOO.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst-promotion-extern-static%2Frustc.FOO.PromoteTemps.diff?ref=45c7838089576552391237bb41cdd3d46582d3e5", "patch": "@@ -18,16 +18,16 @@\n -         StorageLive(_3);                 // bb0[2]: scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n -         StorageLive(_4);                 // bb0[3]: scope 0 at $DIR/const-promotion-extern-static.rs:13:32: 13:45\n -         StorageLive(_5);                 // bb0[4]: scope 1 at $DIR/const-promotion-extern-static.rs:13:42: 13:43\n--         _5 = const {alloc2+0: &i32};     // bb0[5]: scope 1 at $DIR/const-promotion-extern-static.rs:13:42: 13:43\n+-         _5 = const {alloc2+0x0: &i32};   // bb0[5]: scope 1 at $DIR/const-promotion-extern-static.rs:13:42: 13:43\n +         _6 = const FOO::promoted[0];     // bb0[2]: scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n                                            // ty::Const\n -                                          // + ty: &i32\n--                                          // + val: Value(Scalar(alloc2+0))\n+-                                          // + val: Value(Scalar(alloc2+0x0))\n +                                          // + ty: &[&i32; 1]\n +                                          // + val: Unevaluated(DefId(0:7 ~ const_promotion_extern_static[317d]::FOO[0]), [], Some(promoted[0]))\n                                            // mir::Constant\n -                                          // + span: $DIR/const-promotion-extern-static.rs:13:42: 13:43\n--                                          // + literal: Const { ty: &i32, val: Value(Scalar(alloc2+0)) }\n+-                                          // + literal: Const { ty: &i32, val: Value(Scalar(alloc2+0x0)) }\n -         _4 = &(*_5);                     // bb0[6]: scope 1 at $DIR/const-promotion-extern-static.rs:13:41: 13:43\n -         _3 = [move _4];                  // bb0[7]: scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n -         _2 = &_3;                        // bb0[8]: scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46"}, {"sha": "5249a63a8f2f58ed253c519ddceead59189f8a21", "filename": "src/test/mir-opt/const_allocation/32bit/rustc.main.ConstProp.after.mir", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/45c7838089576552391237bb41cdd3d46582d3e5/src%2Ftest%2Fmir-opt%2Fconst_allocation%2F32bit%2Frustc.main.ConstProp.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/45c7838089576552391237bb41cdd3d46582d3e5/src%2Ftest%2Fmir-opt%2Fconst_allocation%2F32bit%2Frustc.main.ConstProp.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_allocation%2F32bit%2Frustc.main.ConstProp.after.mir?ref=45c7838089576552391237bb41cdd3d46582d3e5", "patch": "@@ -8,13 +8,13 @@ fn main() -> () {\n     bb0: {\n         StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/const_allocation.rs:8:5: 8:8\n         StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/const_allocation.rs:8:5: 8:8\n-        _2 = const {alloc0+0: &&[(std::option::Option<i32>, &[&str])]}; // bb0[2]: scope 0 at $DIR/const_allocation.rs:8:5: 8:8\n+        _2 = const {alloc0+0x0: &&[(std::option::Option<i32>, &[&str])]}; // bb0[2]: scope 0 at $DIR/const_allocation.rs:8:5: 8:8\n                                          // ty::Const\n                                          // + ty: &&[(std::option::Option<i32>, &[&str])]\n-                                         // + val: Value(Scalar(alloc0+0))\n+                                         // + val: Value(Scalar(alloc0+0x0))\n                                          // mir::Constant\n                                          // + span: $DIR/const_allocation.rs:8:5: 8:8\n-                                         // + literal: Const { ty: &&[(std::option::Option<i32>, &[&str])], val: Value(Scalar(alloc0+0)) }\n+                                         // + literal: Const { ty: &&[(std::option::Option<i32>, &[&str])], val: Value(Scalar(alloc0+0x0)) }\n         _1 = (*_2);                      // bb0[3]: scope 0 at $DIR/const_allocation.rs:8:5: 8:8\n         StorageDead(_2);                 // bb0[4]: scope 0 at $DIR/const_allocation.rs:8:8: 8:9\n         StorageDead(_1);                 // bb0[5]: scope 0 at $DIR/const_allocation.rs:8:8: 8:9"}, {"sha": "66a6c10430a12eb5b6099483bbe9bd30532e980d", "filename": "src/test/mir-opt/const_allocation/64bit/rustc.main.ConstProp.after.mir", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/45c7838089576552391237bb41cdd3d46582d3e5/src%2Ftest%2Fmir-opt%2Fconst_allocation%2F64bit%2Frustc.main.ConstProp.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/45c7838089576552391237bb41cdd3d46582d3e5/src%2Ftest%2Fmir-opt%2Fconst_allocation%2F64bit%2Frustc.main.ConstProp.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_allocation%2F64bit%2Frustc.main.ConstProp.after.mir?ref=45c7838089576552391237bb41cdd3d46582d3e5", "patch": "@@ -8,13 +8,13 @@ fn main() -> () {\n     bb0: {\n         StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/const_allocation.rs:8:5: 8:8\n         StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/const_allocation.rs:8:5: 8:8\n-        _2 = const {alloc0+0: &&[(std::option::Option<i32>, &[&str])]}; // bb0[2]: scope 0 at $DIR/const_allocation.rs:8:5: 8:8\n+        _2 = const {alloc0+0x0: &&[(std::option::Option<i32>, &[&str])]}; // bb0[2]: scope 0 at $DIR/const_allocation.rs:8:5: 8:8\n                                          // ty::Const\n                                          // + ty: &&[(std::option::Option<i32>, &[&str])]\n-                                         // + val: Value(Scalar(alloc0+0))\n+                                         // + val: Value(Scalar(alloc0+0x0))\n                                          // mir::Constant\n                                          // + span: $DIR/const_allocation.rs:8:5: 8:8\n-                                         // + literal: Const { ty: &&[(std::option::Option<i32>, &[&str])], val: Value(Scalar(alloc0+0)) }\n+                                         // + literal: Const { ty: &&[(std::option::Option<i32>, &[&str])], val: Value(Scalar(alloc0+0x0)) }\n         _1 = (*_2);                      // bb0[3]: scope 0 at $DIR/const_allocation.rs:8:5: 8:8\n         StorageDead(_2);                 // bb0[4]: scope 0 at $DIR/const_allocation.rs:8:8: 8:9\n         StorageDead(_1);                 // bb0[5]: scope 0 at $DIR/const_allocation.rs:8:8: 8:9"}, {"sha": "fa45c1022a9f2776b191c165b6187501ad233bf8", "filename": "src/test/mir-opt/const_allocation2/32bit/rustc.main.ConstProp.after.mir", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/45c7838089576552391237bb41cdd3d46582d3e5/src%2Ftest%2Fmir-opt%2Fconst_allocation2%2F32bit%2Frustc.main.ConstProp.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/45c7838089576552391237bb41cdd3d46582d3e5/src%2Ftest%2Fmir-opt%2Fconst_allocation2%2F32bit%2Frustc.main.ConstProp.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_allocation2%2F32bit%2Frustc.main.ConstProp.after.mir?ref=45c7838089576552391237bb41cdd3d46582d3e5", "patch": "@@ -8,13 +8,13 @@ fn main() -> () {\n     bb0: {\n         StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/const_allocation2.rs:5:5: 5:8\n         StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/const_allocation2.rs:5:5: 5:8\n-        _2 = const {alloc0+0: &&[(std::option::Option<i32>, &[&u8])]}; // bb0[2]: scope 0 at $DIR/const_allocation2.rs:5:5: 5:8\n+        _2 = const {alloc0+0x0: &&[(std::option::Option<i32>, &[&u8])]}; // bb0[2]: scope 0 at $DIR/const_allocation2.rs:5:5: 5:8\n                                          // ty::Const\n                                          // + ty: &&[(std::option::Option<i32>, &[&u8])]\n-                                         // + val: Value(Scalar(alloc0+0))\n+                                         // + val: Value(Scalar(alloc0+0x0))\n                                          // mir::Constant\n                                          // + span: $DIR/const_allocation2.rs:5:5: 5:8\n-                                         // + literal: Const { ty: &&[(std::option::Option<i32>, &[&u8])], val: Value(Scalar(alloc0+0)) }\n+                                         // + literal: Const { ty: &&[(std::option::Option<i32>, &[&u8])], val: Value(Scalar(alloc0+0x0)) }\n         _1 = (*_2);                      // bb0[3]: scope 0 at $DIR/const_allocation2.rs:5:5: 5:8\n         StorageDead(_2);                 // bb0[4]: scope 0 at $DIR/const_allocation2.rs:5:8: 5:9\n         StorageDead(_1);                 // bb0[5]: scope 0 at $DIR/const_allocation2.rs:5:8: 5:9"}, {"sha": "fb9865052dbe2867ad545ec58fe2cef58a7ebb0c", "filename": "src/test/mir-opt/const_allocation2/64bit/rustc.main.ConstProp.after.mir", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/45c7838089576552391237bb41cdd3d46582d3e5/src%2Ftest%2Fmir-opt%2Fconst_allocation2%2F64bit%2Frustc.main.ConstProp.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/45c7838089576552391237bb41cdd3d46582d3e5/src%2Ftest%2Fmir-opt%2Fconst_allocation2%2F64bit%2Frustc.main.ConstProp.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_allocation2%2F64bit%2Frustc.main.ConstProp.after.mir?ref=45c7838089576552391237bb41cdd3d46582d3e5", "patch": "@@ -8,13 +8,13 @@ fn main() -> () {\n     bb0: {\n         StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/const_allocation2.rs:5:5: 5:8\n         StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/const_allocation2.rs:5:5: 5:8\n-        _2 = const {alloc0+0: &&[(std::option::Option<i32>, &[&u8])]}; // bb0[2]: scope 0 at $DIR/const_allocation2.rs:5:5: 5:8\n+        _2 = const {alloc0+0x0: &&[(std::option::Option<i32>, &[&u8])]}; // bb0[2]: scope 0 at $DIR/const_allocation2.rs:5:5: 5:8\n                                          // ty::Const\n                                          // + ty: &&[(std::option::Option<i32>, &[&u8])]\n-                                         // + val: Value(Scalar(alloc0+0))\n+                                         // + val: Value(Scalar(alloc0+0x0))\n                                          // mir::Constant\n                                          // + span: $DIR/const_allocation2.rs:5:5: 5:8\n-                                         // + literal: Const { ty: &&[(std::option::Option<i32>, &[&u8])], val: Value(Scalar(alloc0+0)) }\n+                                         // + literal: Const { ty: &&[(std::option::Option<i32>, &[&u8])], val: Value(Scalar(alloc0+0x0)) }\n         _1 = (*_2);                      // bb0[3]: scope 0 at $DIR/const_allocation2.rs:5:5: 5:8\n         StorageDead(_2);                 // bb0[4]: scope 0 at $DIR/const_allocation2.rs:5:8: 5:9\n         StorageDead(_1);                 // bb0[5]: scope 0 at $DIR/const_allocation2.rs:5:8: 5:9"}, {"sha": "b7fda5dedbfc1d78666b03bc735baa157bd6654a", "filename": "src/test/mir-opt/const_allocation3/32bit/rustc.main.ConstProp.after.mir", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/45c7838089576552391237bb41cdd3d46582d3e5/src%2Ftest%2Fmir-opt%2Fconst_allocation3%2F32bit%2Frustc.main.ConstProp.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/45c7838089576552391237bb41cdd3d46582d3e5/src%2Ftest%2Fmir-opt%2Fconst_allocation3%2F32bit%2Frustc.main.ConstProp.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_allocation3%2F32bit%2Frustc.main.ConstProp.after.mir?ref=45c7838089576552391237bb41cdd3d46582d3e5", "patch": "@@ -8,13 +8,13 @@ fn main() -> () {\n     bb0: {\n         StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/const_allocation3.rs:5:5: 5:8\n         StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/const_allocation3.rs:5:5: 5:8\n-        _2 = const {alloc0+0: &&Packed}; // bb0[2]: scope 0 at $DIR/const_allocation3.rs:5:5: 5:8\n+        _2 = const {alloc0+0x0: &&Packed}; // bb0[2]: scope 0 at $DIR/const_allocation3.rs:5:5: 5:8\n                                          // ty::Const\n                                          // + ty: &&Packed\n-                                         // + val: Value(Scalar(alloc0+0))\n+                                         // + val: Value(Scalar(alloc0+0x0))\n                                          // mir::Constant\n                                          // + span: $DIR/const_allocation3.rs:5:5: 5:8\n-                                         // + literal: Const { ty: &&Packed, val: Value(Scalar(alloc0+0)) }\n+                                         // + literal: Const { ty: &&Packed, val: Value(Scalar(alloc0+0x0)) }\n         _1 = (*_2);                      // bb0[3]: scope 0 at $DIR/const_allocation3.rs:5:5: 5:8\n         StorageDead(_2);                 // bb0[4]: scope 0 at $DIR/const_allocation3.rs:5:8: 5:9\n         StorageDead(_1);                 // bb0[5]: scope 0 at $DIR/const_allocation3.rs:5:8: 5:9"}, {"sha": "60caef9585a84633f63ce0ab9c214acd84a0eed1", "filename": "src/test/mir-opt/const_allocation3/64bit/rustc.main.ConstProp.after.mir", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/45c7838089576552391237bb41cdd3d46582d3e5/src%2Ftest%2Fmir-opt%2Fconst_allocation3%2F64bit%2Frustc.main.ConstProp.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/45c7838089576552391237bb41cdd3d46582d3e5/src%2Ftest%2Fmir-opt%2Fconst_allocation3%2F64bit%2Frustc.main.ConstProp.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_allocation3%2F64bit%2Frustc.main.ConstProp.after.mir?ref=45c7838089576552391237bb41cdd3d46582d3e5", "patch": "@@ -8,13 +8,13 @@ fn main() -> () {\n     bb0: {\n         StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/const_allocation3.rs:5:5: 5:8\n         StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/const_allocation3.rs:5:5: 5:8\n-        _2 = const {alloc0+0: &&Packed}; // bb0[2]: scope 0 at $DIR/const_allocation3.rs:5:5: 5:8\n+        _2 = const {alloc0+0x0: &&Packed}; // bb0[2]: scope 0 at $DIR/const_allocation3.rs:5:5: 5:8\n                                          // ty::Const\n                                          // + ty: &&Packed\n-                                         // + val: Value(Scalar(alloc0+0))\n+                                         // + val: Value(Scalar(alloc0+0x0))\n                                          // mir::Constant\n                                          // + span: $DIR/const_allocation3.rs:5:5: 5:8\n-                                         // + literal: Const { ty: &&Packed, val: Value(Scalar(alloc0+0)) }\n+                                         // + literal: Const { ty: &&Packed, val: Value(Scalar(alloc0+0x0)) }\n         _1 = (*_2);                      // bb0[3]: scope 0 at $DIR/const_allocation3.rs:5:5: 5:8\n         StorageDead(_2);                 // bb0[4]: scope 0 at $DIR/const_allocation3.rs:5:8: 5:9\n         StorageDead(_1);                 // bb0[5]: scope 0 at $DIR/const_allocation3.rs:5:8: 5:9"}, {"sha": "826e3695e32b75051418c55ddcfee5749a782eea", "filename": "src/test/mir-opt/const_prop/read_immutable_static/rustc.main.ConstProp.diff", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/45c7838089576552391237bb41cdd3d46582d3e5/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fread_immutable_static%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/45c7838089576552391237bb41cdd3d46582d3e5/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fread_immutable_static%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fread_immutable_static%2Frustc.main.ConstProp.diff?ref=45c7838089576552391237bb41cdd3d46582d3e5", "patch": "@@ -16,13 +16,13 @@\n           StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/read_immutable_static.rs:7:9: 7:10\n           StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/read_immutable_static.rs:7:13: 7:16\n           StorageLive(_3);                 // bb0[2]: scope 0 at $DIR/read_immutable_static.rs:7:13: 7:16\n-          _3 = const {alloc0+0: &u8};      // bb0[3]: scope 0 at $DIR/read_immutable_static.rs:7:13: 7:16\n+          _3 = const {alloc0+0x0: &u8};    // bb0[3]: scope 0 at $DIR/read_immutable_static.rs:7:13: 7:16\n                                            // ty::Const\n                                            // + ty: &u8\n-                                           // + val: Value(Scalar(alloc0+0))\n+                                           // + val: Value(Scalar(alloc0+0x0))\n                                            // mir::Constant\n                                            // + span: $DIR/read_immutable_static.rs:7:13: 7:16\n-                                           // + literal: Const { ty: &u8, val: Value(Scalar(alloc0+0)) }\n+                                           // + literal: Const { ty: &u8, val: Value(Scalar(alloc0+0x0)) }\n -         _2 = (*_3);                      // bb0[4]: scope 0 at $DIR/read_immutable_static.rs:7:13: 7:16\n +         _2 = const 2u8;                  // bb0[4]: scope 0 at $DIR/read_immutable_static.rs:7:13: 7:16\n +                                          // ty::Const\n@@ -33,13 +33,13 @@\n +                                          // + literal: Const { ty: u8, val: Value(Scalar(0x02)) }\n           StorageLive(_4);                 // bb0[5]: scope 0 at $DIR/read_immutable_static.rs:7:19: 7:22\n           StorageLive(_5);                 // bb0[6]: scope 0 at $DIR/read_immutable_static.rs:7:19: 7:22\n-          _5 = const {alloc0+0: &u8};      // bb0[7]: scope 0 at $DIR/read_immutable_static.rs:7:19: 7:22\n+          _5 = const {alloc0+0x0: &u8};    // bb0[7]: scope 0 at $DIR/read_immutable_static.rs:7:19: 7:22\n                                            // ty::Const\n                                            // + ty: &u8\n-                                           // + val: Value(Scalar(alloc0+0))\n+                                           // + val: Value(Scalar(alloc0+0x0))\n                                            // mir::Constant\n                                            // + span: $DIR/read_immutable_static.rs:7:19: 7:22\n-                                           // + literal: Const { ty: &u8, val: Value(Scalar(alloc0+0)) }\n+                                           // + literal: Const { ty: &u8, val: Value(Scalar(alloc0+0x0)) }\n -         _4 = (*_5);                      // bb0[8]: scope 0 at $DIR/read_immutable_static.rs:7:19: 7:22\n -         _1 = Add(move _2, move _4);      // bb0[9]: scope 0 at $DIR/read_immutable_static.rs:7:13: 7:22\n +         _4 = const 2u8;                  // bb0[8]: scope 0 at $DIR/read_immutable_static.rs:7:19: 7:22"}, {"sha": "65dda47066f4eac62a56a73010e2b9d046d438dc", "filename": "src/test/ui/char_unicode.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/45c7838089576552391237bb41cdd3d46582d3e5/src%2Ftest%2Fui%2Fchar_unicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45c7838089576552391237bb41cdd3d46582d3e5/src%2Ftest%2Fui%2Fchar_unicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchar_unicode.rs?ref=45c7838089576552391237bb41cdd3d46582d3e5", "patch": "@@ -1,8 +1,6 @@\n // run-pass\n \n-#![feature(unicode_version)]\n-\n-/// Tests access to the internal Unicode Version type and value.\n+/// Tests access to the Unicode version constant.\n pub fn main() {\n     check(std::char::UNICODE_VERSION);\n }"}, {"sha": "4d9f815c7958184e4d4c2440ea400446fc20a401", "filename": "src/test/ui/coherence/coherence-conflicting-negative-trait-impl.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/45c7838089576552391237bb41cdd3d46582d3e5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-conflicting-negative-trait-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45c7838089576552391237bb41cdd3d46582d3e5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-conflicting-negative-trait-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-conflicting-negative-trait-impl.stderr?ref=45c7838089576552391237bb41cdd3d46582d3e5", "patch": "@@ -1,4 +1,4 @@\n-error[E0748]: found both positive and negative implementation of trait `std::marker::Send` for type `TestType<_>`:\n+error[E0751]: found both positive and negative implementation of trait `std::marker::Send` for type `TestType<_>`:\n   --> $DIR/coherence-conflicting-negative-trait-impl.rs:11:1\n    |\n LL | unsafe impl<T: MyTrait + 'static> Send for TestType<T> {}\n@@ -18,5 +18,5 @@ LL | unsafe impl<T: 'static> Send for TestType<T> {}\n \n error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0119, E0748.\n+Some errors have detailed explanations: E0119, E0751.\n For more information about an error, try `rustc --explain E0119`."}, {"sha": "86ab8075896aa6c51fc503bd809f6d989ed7ebfa", "filename": "src/test/ui/const-generics/const-param-type-depends-on-type-param-ungated.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45c7838089576552391237bb41cdd3d46582d3e5/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param-ungated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45c7838089576552391237bb41cdd3d46582d3e5/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param-ungated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param-ungated.rs?ref=45c7838089576552391237bb41cdd3d46582d3e5", "patch": "@@ -1,6 +1,6 @@\n use std::marker::PhantomData;\n \n struct B<T, const N: T>(PhantomData<[T; N]>); //~ ERROR const generics are unstable\n-//~^ ERROR the types of const generic parameters must derive `PartialEq` and `Eq`\n+//~^ ERROR `T` is not guaranteed to `#[derive(PartialEq, Eq)]`\n \n fn main() {}"}, {"sha": "92a7edf96bccb504f52437e35a89fd5b9c0a24c1", "filename": "src/test/ui/const-generics/const-param-type-depends-on-type-param-ungated.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/45c7838089576552391237bb41cdd3d46582d3e5/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param-ungated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45c7838089576552391237bb41cdd3d46582d3e5/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param-ungated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param-ungated.stderr?ref=45c7838089576552391237bb41cdd3d46582d3e5", "patch": "@@ -7,11 +7,13 @@ LL | struct B<T, const N: T>(PhantomData<[T; N]>);\n    = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n    = help: add `#![feature(const_generics)]` to the crate attributes to enable\n \n-error[E0741]: the types of const generic parameters must derive `PartialEq` and `Eq`\n+error[E0741]: `T` is not guaranteed to `#[derive(PartialEq, Eq)]`, so may not be used as the type of a const parameter\n   --> $DIR/const-param-type-depends-on-type-param-ungated.rs:3:22\n    |\n LL | struct B<T, const N: T>(PhantomData<[T; N]>);\n-   |                      ^ `T` doesn't derive both `PartialEq` and `Eq`\n+   |                      ^ `T` may not derive both `PartialEq` and `Eq`\n+   |\n+   = note: it is not currently possible to use a type parameter as the type of a const parameter\n \n error: aborting due to 2 previous errors\n "}, {"sha": "7468020366cecb6fb4493d808cc777483c00d565", "filename": "src/test/ui/const-generics/const-param-type-depends-on-type-param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45c7838089576552391237bb41cdd3d46582d3e5/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45c7838089576552391237bb41cdd3d46582d3e5/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.rs?ref=45c7838089576552391237bb41cdd3d46582d3e5", "patch": "@@ -7,6 +7,6 @@\n // details.\n \n pub struct Dependent<T, const X: T>([(); X]);\n-//~^ ERROR the types of const generic parameters must derive `PartialEq` and `Eq`\n+//~^ ERROR `T` is not guaranteed to `#[derive(PartialEq, Eq)]`\n \n fn main() {}"}, {"sha": "9f20b06813e378361f7f6d79102ffbe8f5368b84", "filename": "src/test/ui/const-generics/const-param-type-depends-on-type-param.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/45c7838089576552391237bb41cdd3d46582d3e5/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45c7838089576552391237bb41cdd3d46582d3e5/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.stderr?ref=45c7838089576552391237bb41cdd3d46582d3e5", "patch": "@@ -6,11 +6,13 @@ LL | #![feature(const_generics)]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n \n-error[E0741]: the types of const generic parameters must derive `PartialEq` and `Eq`\n+error[E0741]: `T` is not guaranteed to `#[derive(PartialEq, Eq)]`, so may not be used as the type of a const parameter\n   --> $DIR/const-param-type-depends-on-type-param.rs:9:34\n    |\n LL | pub struct Dependent<T, const X: T>([(); X]);\n-   |                                  ^ `T` doesn't derive both `PartialEq` and `Eq`\n+   |                                  ^ `T` may not derive both `PartialEq` and `Eq`\n+   |\n+   = note: it is not currently possible to use a type parameter as the type of a const parameter\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "a30cdc3efdf436c92d6387905c67bb182c83b222", "filename": "src/test/ui/const-generics/forbid-non-structural_match-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45c7838089576552391237bb41cdd3d46582d3e5/src%2Ftest%2Fui%2Fconst-generics%2Fforbid-non-structural_match-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45c7838089576552391237bb41cdd3d46582d3e5/src%2Ftest%2Fui%2Fconst-generics%2Fforbid-non-structural_match-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fforbid-non-structural_match-types.rs?ref=45c7838089576552391237bb41cdd3d46582d3e5", "patch": "@@ -8,6 +8,6 @@ struct B<const X: A>; // ok\n \n struct C;\n \n-struct D<const X: C>; //~ ERROR the types of const generic parameters must derive\n+struct D<const X: C>; //~ ERROR `C` must be annotated with `#[derive(PartialEq, Eq)]`\n \n fn main() {}"}, {"sha": "4f343146263ba1b115d51b6e85a9e0e0de5de4ec", "filename": "src/test/ui/const-generics/forbid-non-structural_match-types.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45c7838089576552391237bb41cdd3d46582d3e5/src%2Ftest%2Fui%2Fconst-generics%2Fforbid-non-structural_match-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45c7838089576552391237bb41cdd3d46582d3e5/src%2Ftest%2Fui%2Fconst-generics%2Fforbid-non-structural_match-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fforbid-non-structural_match-types.stderr?ref=45c7838089576552391237bb41cdd3d46582d3e5", "patch": "@@ -6,7 +6,7 @@ LL | #![feature(const_generics)]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n \n-error[E0741]: the types of const generic parameters must derive `PartialEq` and `Eq`\n+error[E0741]: `C` must be annotated with `#[derive(PartialEq, Eq)]` to be used as the type of a const parameter\n   --> $DIR/forbid-non-structural_match-types.rs:11:19\n    |\n LL | struct D<const X: C>;"}, {"sha": "d091162fced6b926ed6457a618946bc6f9f5c799", "filename": "src/test/ui/issues/issue-33140-hack-boundaries.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45c7838089576552391237bb41cdd3d46582d3e5/src%2Ftest%2Fui%2Fissues%2Fissue-33140-hack-boundaries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45c7838089576552391237bb41cdd3d46582d3e5/src%2Ftest%2Fui%2Fissues%2Fissue-33140-hack-boundaries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-33140-hack-boundaries.rs?ref=45c7838089576552391237bb41cdd3d46582d3e5", "patch": "@@ -23,7 +23,7 @@ trait Trait2 {}\n \n impl Trait2 for dyn Send {}\n impl !Trait2 for dyn Send {}\n-//~^ ERROR E0748\n+//~^ ERROR E0751\n \n // Problem 3: type parameter\n trait Trait3<T: ?Sized> {}"}, {"sha": "ae65701ecb52ab96683b5baf458b46df79a97618", "filename": "src/test/ui/issues/issue-33140-hack-boundaries.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/45c7838089576552391237bb41cdd3d46582d3e5/src%2Ftest%2Fui%2Fissues%2Fissue-33140-hack-boundaries.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45c7838089576552391237bb41cdd3d46582d3e5/src%2Ftest%2Fui%2Fissues%2Fissue-33140-hack-boundaries.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-33140-hack-boundaries.stderr?ref=45c7838089576552391237bb41cdd3d46582d3e5", "patch": "@@ -6,7 +6,7 @@ LL | impl Trait1 for dyn Send {}\n LL | impl Trait1 for dyn Send {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn std::marker::Send + 'static)`\n \n-error[E0748]: found both positive and negative implementation of trait `Trait2` for type `(dyn std::marker::Send + 'static)`:\n+error[E0751]: found both positive and negative implementation of trait `Trait2` for type `(dyn std::marker::Send + 'static)`:\n   --> $DIR/issue-33140-hack-boundaries.rs:25:1\n    |\n LL | impl Trait2 for dyn Send {}\n@@ -64,5 +64,5 @@ LL | impl Trait5 for dyn Send where u32: Copy {}\n \n error: aborting due to 8 previous errors\n \n-Some errors have detailed explanations: E0119, E0748.\n+Some errors have detailed explanations: E0119, E0751.\n For more information about an error, try `rustc --explain E0119`."}, {"sha": "90dbef3075b7f54f8e3e4fdf7f7b718e8542c54f", "filename": "src/test/ui/specialization/specialization-overlap-negative.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45c7838089576552391237bb41cdd3d46582d3e5/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-overlap-negative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45c7838089576552391237bb41cdd3d46582d3e5/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-overlap-negative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-overlap-negative.rs?ref=45c7838089576552391237bb41cdd3d46582d3e5", "patch": "@@ -6,6 +6,6 @@ trait MyTrait {}\n struct TestType<T>(::std::marker::PhantomData<T>);\n \n unsafe impl<T: Clone> Send for TestType<T> {}\n-impl<T: MyTrait> !Send for TestType<T> {} //~ ERROR E0748\n+impl<T: MyTrait> !Send for TestType<T> {} //~ ERROR E0751\n \n fn main() {}"}, {"sha": "e2616534d20412679359a1147a8a2f52500c16af", "filename": "src/test/ui/specialization/specialization-overlap-negative.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/45c7838089576552391237bb41cdd3d46582d3e5/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-overlap-negative.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45c7838089576552391237bb41cdd3d46582d3e5/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-overlap-negative.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-overlap-negative.stderr?ref=45c7838089576552391237bb41cdd3d46582d3e5", "patch": "@@ -1,4 +1,4 @@\n-error[E0748]: found both positive and negative implementation of trait `std::marker::Send` for type `TestType<_>`:\n+error[E0751]: found both positive and negative implementation of trait `std::marker::Send` for type `TestType<_>`:\n   --> $DIR/specialization-overlap-negative.rs:9:1\n    |\n LL | unsafe impl<T: Clone> Send for TestType<T> {}\n@@ -8,4 +8,4 @@ LL | impl<T: MyTrait> !Send for TestType<T> {}\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0748`.\n+For more information about this error, try `rustc --explain E0751`."}, {"sha": "e78035f171075c5016a8a525ee4dc907325fe5d3", "filename": "src/test/ui/specialization/specialization-polarity.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/45c7838089576552391237bb41cdd3d46582d3e5/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-polarity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45c7838089576552391237bb41cdd3d46582d3e5/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-polarity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-polarity.rs?ref=45c7838089576552391237bb41cdd3d46582d3e5", "patch": "@@ -7,11 +7,11 @@\n auto trait Foo {}\n \n impl<T> Foo for T {}\n-impl !Foo for u8 {} //~ ERROR E0748\n+impl !Foo for u8 {} //~ ERROR E0751\n \n auto trait Bar {}\n \n impl<T> !Bar for T {}\n-impl Bar for u8 {} //~ ERROR E0748\n+impl Bar for u8 {} //~ ERROR E0751\n \n fn main() {}"}, {"sha": "44e60cad67aa4b3fe8f1af5430be8871aa066cc6", "filename": "src/test/ui/specialization/specialization-polarity.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/45c7838089576552391237bb41cdd3d46582d3e5/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-polarity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45c7838089576552391237bb41cdd3d46582d3e5/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-polarity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-polarity.stderr?ref=45c7838089576552391237bb41cdd3d46582d3e5", "patch": "@@ -1,12 +1,12 @@\n-error[E0748]: found both positive and negative implementation of trait `Foo` for type `u8`:\n+error[E0751]: found both positive and negative implementation of trait `Foo` for type `u8`:\n   --> $DIR/specialization-polarity.rs:10:1\n    |\n LL | impl<T> Foo for T {}\n    | ----------------- positive implementation here\n LL | impl !Foo for u8 {}\n    | ^^^^^^^^^^^^^^^^ negative implementation here\n \n-error[E0748]: found both positive and negative implementation of trait `Bar` for type `u8`:\n+error[E0751]: found both positive and negative implementation of trait `Bar` for type `u8`:\n   --> $DIR/specialization-polarity.rs:15:1\n    |\n LL | impl<T> !Bar for T {}\n@@ -16,4 +16,4 @@ LL | impl Bar for u8 {}\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0748`.\n+For more information about this error, try `rustc --explain E0751`."}, {"sha": "da22e43377f52a1ec51e17a4402726a14f8f7f2f", "filename": "src/test/ui/traits/negative-impls/negative-specializes-positive-item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45c7838089576552391237bb41cdd3d46582d3e5/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-positive-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45c7838089576552391237bb41cdd3d46582d3e5/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-positive-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-positive-item.rs?ref=45c7838089576552391237bb41cdd3d46582d3e5", "patch": "@@ -8,6 +8,6 @@ trait MyTrait {\n impl<T> MyTrait for T {\n     default fn foo() {}\n }\n-impl !MyTrait for u32 {} //~ ERROR E0748\n+impl !MyTrait for u32 {} //~ ERROR E0751\n \n fn main() {}"}, {"sha": "079546a7df40b8816e96fa6c39f2ed943d117d37", "filename": "src/test/ui/traits/negative-impls/negative-specializes-positive-item.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/45c7838089576552391237bb41cdd3d46582d3e5/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-positive-item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45c7838089576552391237bb41cdd3d46582d3e5/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-positive-item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-positive-item.stderr?ref=45c7838089576552391237bb41cdd3d46582d3e5", "patch": "@@ -1,4 +1,4 @@\n-error[E0748]: found both positive and negative implementation of trait `MyTrait` for type `u32`:\n+error[E0751]: found both positive and negative implementation of trait `MyTrait` for type `u32`:\n   --> $DIR/negative-specializes-positive-item.rs:11:1\n    |\n LL | impl<T> MyTrait for T {\n@@ -9,4 +9,4 @@ LL | impl !MyTrait for u32 {}\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0748`.\n+For more information about this error, try `rustc --explain E0751`."}, {"sha": "1939a098b50ee08aa8d892f7e38cc5459b486a49", "filename": "src/test/ui/traits/negative-impls/negative-specializes-positive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45c7838089576552391237bb41cdd3d46582d3e5/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-positive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45c7838089576552391237bb41cdd3d46582d3e5/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-positive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-positive.rs?ref=45c7838089576552391237bb41cdd3d46582d3e5", "patch": "@@ -4,7 +4,7 @@\n // Negative impl for u32 cannot \"specialize\" the base impl.\n trait MyTrait {}\n impl<T> MyTrait for T {}\n-impl !MyTrait for u32 {} //~ ERROR E0748\n+impl !MyTrait for u32 {} //~ ERROR E0751\n \n // The second impl specializes the first, no error.\n trait MyTrait2 {}"}, {"sha": "ea005c1cbe0c69dab2a0a017b0464c757d32e193", "filename": "src/test/ui/traits/negative-impls/negative-specializes-positive.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/45c7838089576552391237bb41cdd3d46582d3e5/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-positive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45c7838089576552391237bb41cdd3d46582d3e5/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-positive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-positive.stderr?ref=45c7838089576552391237bb41cdd3d46582d3e5", "patch": "@@ -1,4 +1,4 @@\n-error[E0748]: found both positive and negative implementation of trait `MyTrait` for type `u32`:\n+error[E0751]: found both positive and negative implementation of trait `MyTrait` for type `u32`:\n   --> $DIR/negative-specializes-positive.rs:7:1\n    |\n LL | impl<T> MyTrait for T {}\n@@ -8,4 +8,4 @@ LL | impl !MyTrait for u32 {}\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0748`.\n+For more information about this error, try `rustc --explain E0751`."}, {"sha": "499ac461e59a597a268d3bbe86dc74ff9210d039", "filename": "src/test/ui/traits/negative-impls/pin-unsound-issue-66544-clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45c7838089576552391237bb41cdd3d46582d3e5/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpin-unsound-issue-66544-clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45c7838089576552391237bb41cdd3d46582d3e5/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpin-unsound-issue-66544-clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpin-unsound-issue-66544-clone.rs?ref=45c7838089576552391237bb41cdd3d46582d3e5", "patch": "@@ -5,7 +5,7 @@ use std::pin::Pin;\n struct MyType<'a>(Cell<Option<&'a mut MyType<'a>>>, PhantomPinned);\n \n impl<'a> Clone for &'a mut MyType<'a> {\n-    //~^ ERROR E0748\n+    //~^ ERROR E0751\n     fn clone(&self) -> &'a mut MyType<'a> {\n         self.0.replace(None).unwrap()\n     }"}, {"sha": "d7039e3db6bde1a36feefec69285946b6e2d81c7", "filename": "src/test/ui/traits/negative-impls/pin-unsound-issue-66544-clone.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/45c7838089576552391237bb41cdd3d46582d3e5/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpin-unsound-issue-66544-clone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45c7838089576552391237bb41cdd3d46582d3e5/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpin-unsound-issue-66544-clone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpin-unsound-issue-66544-clone.stderr?ref=45c7838089576552391237bb41cdd3d46582d3e5", "patch": "@@ -1,4 +1,4 @@\n-error[E0748]: found both positive and negative implementation of trait `std::clone::Clone` for type `&mut MyType<'_>`:\n+error[E0751]: found both positive and negative implementation of trait `std::clone::Clone` for type `&mut MyType<'_>`:\n   --> $DIR/pin-unsound-issue-66544-clone.rs:7:1\n    |\n LL | impl<'a> Clone for &'a mut MyType<'a> {\n@@ -8,4 +8,4 @@ LL | impl<'a> Clone for &'a mut MyType<'a> {\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0748`.\n+For more information about this error, try `rustc --explain E0751`."}, {"sha": "245be800780565b4c71543e1c37d9481db597377", "filename": "src/test/ui/traits/negative-impls/pin-unsound-issue-66544-derefmut.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45c7838089576552391237bb41cdd3d46582d3e5/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpin-unsound-issue-66544-derefmut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45c7838089576552391237bb41cdd3d46582d3e5/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpin-unsound-issue-66544-derefmut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpin-unsound-issue-66544-derefmut.rs?ref=45c7838089576552391237bb41cdd3d46582d3e5", "patch": "@@ -10,7 +10,7 @@ use std::pin::Pin;\n struct MyType<'a>(Cell<Option<&'a mut MyType<'a>>>, PhantomPinned);\n \n impl<'a> DerefMut for &'a MyType<'a> {\n-    //~^ ERROR E0748\n+    //~^ ERROR E0751\n     fn deref_mut(&mut self) -> &mut MyType<'a> {\n         self.0.replace(None).unwrap()\n     }"}, {"sha": "a0b62a8bab68f32b4c236bcf9155fd8569a45bf6", "filename": "src/test/ui/traits/negative-impls/pin-unsound-issue-66544-derefmut.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/45c7838089576552391237bb41cdd3d46582d3e5/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpin-unsound-issue-66544-derefmut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45c7838089576552391237bb41cdd3d46582d3e5/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpin-unsound-issue-66544-derefmut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpin-unsound-issue-66544-derefmut.stderr?ref=45c7838089576552391237bb41cdd3d46582d3e5", "patch": "@@ -1,4 +1,4 @@\n-error[E0748]: found both positive and negative implementation of trait `std::ops::DerefMut` for type `&MyType<'_>`:\n+error[E0751]: found both positive and negative implementation of trait `std::ops::DerefMut` for type `&MyType<'_>`:\n   --> $DIR/pin-unsound-issue-66544-derefmut.rs:12:1\n    |\n LL | impl<'a> DerefMut for &'a MyType<'a> {\n@@ -8,4 +8,4 @@ LL | impl<'a> DerefMut for &'a MyType<'a> {\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0748`.\n+For more information about this error, try `rustc --explain E0751`."}, {"sha": "f2c5f507a4ebbd5fcf5126b97589fdd05e893fd8", "filename": "src/test/ui/traits/negative-impls/positive-specializes-negative.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45c7838089576552391237bb41cdd3d46582d3e5/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpositive-specializes-negative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45c7838089576552391237bb41cdd3d46582d3e5/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpositive-specializes-negative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpositive-specializes-negative.rs?ref=45c7838089576552391237bb41cdd3d46582d3e5", "patch": "@@ -4,6 +4,6 @@\n trait MyTrait {}\n \n impl<T> !MyTrait for T {}\n-impl MyTrait for u32 {} //~ ERROR E0748\n+impl MyTrait for u32 {} //~ ERROR E0751\n \n fn main() {}"}, {"sha": "a24d7aa442f4ab97326a87a2ae287e26adffd323", "filename": "src/test/ui/traits/negative-impls/positive-specializes-negative.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/45c7838089576552391237bb41cdd3d46582d3e5/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpositive-specializes-negative.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45c7838089576552391237bb41cdd3d46582d3e5/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpositive-specializes-negative.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpositive-specializes-negative.stderr?ref=45c7838089576552391237bb41cdd3d46582d3e5", "patch": "@@ -1,4 +1,4 @@\n-error[E0748]: found both positive and negative implementation of trait `MyTrait` for type `u32`:\n+error[E0751]: found both positive and negative implementation of trait `MyTrait` for type `u32`:\n   --> $DIR/positive-specializes-negative.rs:7:1\n    |\n LL | impl<T> !MyTrait for T {}\n@@ -8,4 +8,4 @@ LL | impl MyTrait for u32 {}\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0748`.\n+For more information about this error, try `rustc --explain E0751`."}]}