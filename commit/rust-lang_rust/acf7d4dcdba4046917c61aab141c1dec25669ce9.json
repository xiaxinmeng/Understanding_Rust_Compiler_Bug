{"sha": "acf7d4dcdba4046917c61aab141c1dec25669ce9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjZjdkNGRjZGJhNDA0NjkxN2M2MWFhYjE0MWMxZGVjMjU2NjljZTk=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-09-18T04:50:48Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-09-19T23:51:52Z"}, "message": "Specialize the `stalled_on` handling in `process_obligation()`.\n\nOptimizing for the common numbers of entries in `stalled_on` wins about\n4% on `keccak` and `inflate`.", "tree": {"sha": "88f6a13572b698e607d1a5a4b719abf986e8612a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/88f6a13572b698e607d1a5a4b719abf986e8612a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/acf7d4dcdba4046917c61aab141c1dec25669ce9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/acf7d4dcdba4046917c61aab141c1dec25669ce9", "html_url": "https://github.com/rust-lang/rust/commit/acf7d4dcdba4046917c61aab141c1dec25669ce9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/acf7d4dcdba4046917c61aab141c1dec25669ce9/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aaff05bd1c420a46c91f61f83c256b9f83605c43", "url": "https://api.github.com/repos/rust-lang/rust/commits/aaff05bd1c420a46c91f61f83c256b9f83605c43", "html_url": "https://github.com/rust-lang/rust/commit/aaff05bd1c420a46c91f61f83c256b9f83605c43"}], "stats": {"total": 59, "additions": 38, "deletions": 21}, "files": [{"sha": "eaef2198e3bcf3836925b43778313b6998765abd", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/acf7d4dcdba4046917c61aab141c1dec25669ce9/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acf7d4dcdba4046917c61aab141c1dec25669ce9/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=acf7d4dcdba4046917c61aab141c1dec25669ce9", "patch": "@@ -1600,8 +1600,8 @@ impl<'a, 'tcx> ShallowResolver<'a, 'tcx> {\n \n     // `resolver.shallow_resolve_changed(ty)` is equivalent to\n     // `resolver.shallow_resolve(ty) != ty`, but more efficient. It's always\n-    // inlined, despite being large, because it has a single call site that is\n-    // extremely hot.\n+    // inlined, despite being large, because it has only two call sites that\n+    // are extremely hot.\n     #[inline(always)]\n     pub fn shallow_resolve_changed(&mut self, typ: Ty<'tcx>) -> bool {\n         match typ.sty {"}, {"sha": "6c421e9df6800aad9c2a69d00a92c51ad559cf2c", "filename": "src/librustc/traits/fulfill.rs", "status": "modified", "additions": 36, "deletions": 19, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/acf7d4dcdba4046917c61aab141c1dec25669ce9/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acf7d4dcdba4046917c61aab141c1dec25669ce9/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ffulfill.rs?ref=acf7d4dcdba4046917c61aab141c1dec25669ce9", "patch": "@@ -256,29 +256,46 @@ impl<'a, 'b, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'b, 'tcx> {\n         &mut self,\n         pending_obligation: &mut Self::Obligation,\n     ) -> ProcessResult<Self::Obligation, Self::Error> {\n-        // If we were stalled on some unresolved variables, first check\n-        // whether any of them have been resolved; if not, don't bother\n-        // doing more work yet\n-        if !pending_obligation.stalled_on.is_empty() {\n-            let mut changed = false;\n-            // This `for` loop was once a call to `all()`, but this lower-level\n-            // form was a perf win. See #64545 for details.\n-            for &ty in &pending_obligation.stalled_on {\n-                if ShallowResolver::new(self.selcx.infcx()).shallow_resolve_changed(ty) {\n-                    changed = true;\n-                    break;\n-                }\n+        // If we were stalled on some unresolved variables, first check whether\n+        // any of them have been resolved; if not, don't bother doing more work\n+        // yet.\n+        let change = match pending_obligation.stalled_on.len() {\n+            // Match arms are in order of frequency, which matters because this\n+            // code is so hot. 1 and 0 dominate; 2+ is fairly rare.\n+            1 => {\n+                let ty = pending_obligation.stalled_on[0];\n+                ShallowResolver::new(self.selcx.infcx()).shallow_resolve_changed(ty)\n+            }\n+            0 => {\n+                // In this case we haven't changed, but wish to make a change.\n+                true\n             }\n-            if !changed {\n-                debug!(\"process_predicate: pending obligation {:?} still stalled on {:?}\",\n-                       self.selcx.infcx()\n-                           .resolve_vars_if_possible(&pending_obligation.obligation),\n-                       pending_obligation.stalled_on);\n-                return ProcessResult::Unchanged;\n+            _ => {\n+                // This `for` loop was once a call to `all()`, but this lower-level\n+                // form was a perf win. See #64545 for details.\n+                (|| {\n+                    for &ty in &pending_obligation.stalled_on {\n+                        if ShallowResolver::new(self.selcx.infcx()).shallow_resolve_changed(ty) {\n+                            return true;\n+                        }\n+                    }\n+                    false\n+                })()\n             }\n-            pending_obligation.stalled_on = vec![];\n+        };\n+\n+        if !change {\n+            debug!(\"process_predicate: pending obligation {:?} still stalled on {:?}\",\n+                   self.selcx.infcx()\n+                       .resolve_vars_if_possible(&pending_obligation.obligation),\n+                   pending_obligation.stalled_on);\n+            return ProcessResult::Unchanged;\n         }\n \n+        // This part of the code is much colder.\n+\n+        pending_obligation.stalled_on.truncate(0);\n+\n         let obligation = &mut pending_obligation.obligation;\n \n         if obligation.predicate.has_infer_types() {"}]}