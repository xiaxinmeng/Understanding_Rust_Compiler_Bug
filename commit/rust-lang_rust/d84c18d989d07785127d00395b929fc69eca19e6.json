{"sha": "d84c18d989d07785127d00395b929fc69eca19e6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4NGMxOGQ5ODlkMDc3ODUxMjdkMDAzOTViOTI5ZmM2OWVjYTE5ZTY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-09-17T13:08:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-17T13:08:09Z"}, "message": "Merge #6017\n\n6017: Don't return any TextEdit if formatting is unchanged r=jonas-schievink a=cuviper\n\nI found that `textDocument/formatting` was always returning a full\r\n`TextEdit` replacement, even when there are no changes, which caused Vim\r\n(w/ vim-lsp) to always indicate a modified buffer after formatting. We\r\ncan easily compare whether there were changes and return `null` if not,\r\nso the client knows there's nothing to do.\n\nCo-authored-by: Josh Stone <cuviper@gmail.com>", "tree": {"sha": "86aab2ab29a6f3b86dcd28f1bb0649badfcc30d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86aab2ab29a6f3b86dcd28f1bb0649badfcc30d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d84c18d989d07785127d00395b929fc69eca19e6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfY1+5CRBK7hj4Ov3rIwAAdHIIADofcWEr27B4D+UCh+GMiSPB\nVTAF2S3wA7Iuu+2xLfVTWTNaytTRo/qVF/4C1Klbw7vYXJejfjpxXzemNwH19L6v\nw2CDHMkUG+SU81hZ8HAkwARvgxN0CfoufGyB1pNd5trD6MuL8E2vH491vA+zcrJX\nkXGU7Z9V7mC8odAf65oNs8BbJwgdKd7QMhoOhrQda9pA1IPe7QhqBwrrxANmuD1b\nDpY9VywDagi2ox1NcIXRSwUnHr0CFRIm4QZNwfcYmUpmdNmDX179E5u2DTwnKsNF\nx+ANqI7P/2ZEMHN6lPxizlNlNx0aR6WUg47oaZPyqTw7tMHf/2sP9bo73u1jS/8=\n=Yss1\n-----END PGP SIGNATURE-----\n", "payload": "tree 86aab2ab29a6f3b86dcd28f1bb0649badfcc30d7\nparent 933fc1eb1837a902def314d400c0f3a6dd2c1283\nparent 29c34213916f8be84d5c715899e5e0629e36adac\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1600348089 +0000\ncommitter GitHub <noreply@github.com> 1600348089 +0000\n\nMerge #6017\n\n6017: Don't return any TextEdit if formatting is unchanged r=jonas-schievink a=cuviper\n\nI found that `textDocument/formatting` was always returning a full\r\n`TextEdit` replacement, even when there are no changes, which caused Vim\r\n(w/ vim-lsp) to always indicate a modified buffer after formatting. We\r\ncan easily compare whether there were changes and return `null` if not,\r\nso the client knows there's nothing to do.\n\nCo-authored-by: Josh Stone <cuviper@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d84c18d989d07785127d00395b929fc69eca19e6", "html_url": "https://github.com/rust-lang/rust/commit/d84c18d989d07785127d00395b929fc69eca19e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d84c18d989d07785127d00395b929fc69eca19e6/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "933fc1eb1837a902def314d400c0f3a6dd2c1283", "url": "https://api.github.com/repos/rust-lang/rust/commits/933fc1eb1837a902def314d400c0f3a6dd2c1283", "html_url": "https://github.com/rust-lang/rust/commit/933fc1eb1837a902def314d400c0f3a6dd2c1283"}, {"sha": "29c34213916f8be84d5c715899e5e0629e36adac", "url": "https://api.github.com/repos/rust-lang/rust/commits/29c34213916f8be84d5c715899e5e0629e36adac", "html_url": "https://github.com/rust-lang/rust/commit/29c34213916f8be84d5c715899e5e0629e36adac"}], "stats": {"total": 49, "additions": 45, "deletions": 4}, "files": [{"sha": "c0943a54dc6c47ed108d251073495e88f0d36f9d", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d84c18d989d07785127d00395b929fc69eca19e6/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d84c18d989d07785127d00395b929fc69eca19e6/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=d84c18d989d07785127d00395b929fc69eca19e6", "patch": "@@ -748,10 +748,15 @@ pub(crate) fn handle_formatting(\n         }\n     }\n \n-    Ok(Some(vec![lsp_types::TextEdit {\n-        range: Range::new(Position::new(0, 0), end_position),\n-        new_text: captured_stdout,\n-    }]))\n+    if *file == captured_stdout {\n+        // The document is already formatted correctly -- no edits needed.\n+        Ok(None)\n+    } else {\n+        Ok(Some(vec![lsp_types::TextEdit {\n+            range: Range::new(Position::new(0, 0), end_position),\n+            new_text: captured_stdout,\n+        }]))\n+    }\n }\n \n fn handle_fixes("}, {"sha": "06726f9576e5185c6a2965be8e74464c67b02f36", "filename": "crates/rust-analyzer/tests/rust-analyzer/main.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/d84c18d989d07785127d00395b929fc69eca19e6/crates%2Frust-analyzer%2Ftests%2Frust-analyzer%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d84c18d989d07785127d00395b929fc69eca19e6/crates%2Frust-analyzer%2Ftests%2Frust-analyzer%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Frust-analyzer%2Fmain.rs?ref=d84c18d989d07785127d00395b929fc69eca19e6", "patch": "@@ -259,6 +259,42 @@ pub use std::collections::HashMap;\n     );\n }\n \n+#[test]\n+fn test_format_document_unchanged() {\n+    if skip_slow_tests() {\n+        return;\n+    }\n+\n+    let server = project(\n+        r#\"\n+//- /Cargo.toml\n+[package]\n+name = \"foo\"\n+version = \"0.0.0\"\n+\n+//- /src/lib.rs\n+fn main() {}\n+\"#,\n+    )\n+    .wait_until_workspace_is_loaded();\n+\n+    server.request::<Formatting>(\n+        DocumentFormattingParams {\n+            text_document: server.doc_id(\"src/lib.rs\"),\n+            options: FormattingOptions {\n+                tab_size: 4,\n+                insert_spaces: false,\n+                insert_final_newline: None,\n+                trim_final_newlines: None,\n+                trim_trailing_whitespace: None,\n+                properties: HashMap::new(),\n+            },\n+            work_done_progress_params: WorkDoneProgressParams::default(),\n+        },\n+        json!(null),\n+    );\n+}\n+\n #[test]\n fn test_missing_module_code_action() {\n     if skip_slow_tests() {"}]}