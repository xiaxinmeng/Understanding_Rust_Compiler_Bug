{"sha": "7979016aff545f7b41cc517031026020b340989d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5NzkwMTZhZmY1NDVmN2I0MWNjNTE3MDMxMDI2MDIwYjM0MDk4OWQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-20T19:45:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-20T19:45:09Z"}, "message": "Auto merge of #65632 - JohnTitor:rollup-adb16gb, r=JohnTitor\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #65460 (Clean up `contains()` `insert()` chains on HashSet)\n - #65463 (Avoid unnecessary arena allocations in `expand_pattern()`.)\n - #65579 (Changed `resolve_type_vars_with_obligations` to also resolve const inference variables)\n - #65605 (Remove unreachable unit tuple compare binop codegen)\n - #65626 (trivial typo fix)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "8169f2caffa37fbc56ba1ab830ca5b2c7baba52a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8169f2caffa37fbc56ba1ab830ca5b2c7baba52a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7979016aff545f7b41cc517031026020b340989d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7979016aff545f7b41cc517031026020b340989d", "html_url": "https://github.com/rust-lang/rust/commit/7979016aff545f7b41cc517031026020b340989d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7979016aff545f7b41cc517031026020b340989d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "89e645ace853d86e8c0002247482eac9073c90fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/89e645ace853d86e8c0002247482eac9073c90fd", "html_url": "https://github.com/rust-lang/rust/commit/89e645ace853d86e8c0002247482eac9073c90fd"}, {"sha": "c609a5aafc41357bd22669ededc1d82028ecac22", "url": "https://api.github.com/repos/rust-lang/rust/commits/c609a5aafc41357bd22669ededc1d82028ecac22", "html_url": "https://github.com/rust-lang/rust/commit/c609a5aafc41357bd22669ededc1d82028ecac22"}], "stats": {"total": 120, "additions": 53, "deletions": 67}, "files": [{"sha": "7c3a338366c9af3f3edf3ab291006e33411875b3", "filename": "src/librustc/infer/resolve.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7979016aff545f7b41cc517031026020b340989d/src%2Flibrustc%2Finfer%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7979016aff545f7b41cc517031026020b340989d/src%2Flibrustc%2Finfer%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fresolve.rs?ref=7979016aff545f7b41cc517031026020b340989d", "patch": "@@ -1,7 +1,7 @@\n use super::{InferCtxt, FixupError, FixupResult, Span};\n use super::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use crate::mir::interpret::ConstValue;\n-use crate::ty::{self, Ty, Const, TyCtxt, TypeFoldable, InferConst, TypeFlags};\n+use crate::ty::{self, Ty, Const, TyCtxt, TypeFoldable, InferConst};\n use crate::ty::fold::{TypeFolder, TypeVisitor};\n \n ///////////////////////////////////////////////////////////////////////////\n@@ -29,7 +29,7 @@ impl<'a, 'tcx> TypeFolder<'tcx> for OpportunisticVarResolver<'a, 'tcx> {\n     }\n \n     fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {\n-        if !t.has_infer_types() {\n+        if !t.has_infer_types() && !t.has_infer_consts() {\n             t // micro-optimize -- if there is nothing in this type that this fold affects...\n         } else {\n             let t = self.infcx.shallow_resolve(t);\n@@ -38,7 +38,7 @@ impl<'a, 'tcx> TypeFolder<'tcx> for OpportunisticVarResolver<'a, 'tcx> {\n     }\n \n     fn fold_const(&mut self, ct: &'tcx Const<'tcx>) -> &'tcx Const<'tcx> {\n-        if !ct.has_type_flags(TypeFlags::HAS_CT_INFER) {\n+        if !ct.has_infer_consts() {\n             ct // micro-optimize -- if there is nothing in this const that this fold affects...\n         } else {\n             let ct = self.infcx.shallow_resolve(ct);"}, {"sha": "b8d1a549ecda3b786b333370eaa4043378d4d76b", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7979016aff545f7b41cc517031026020b340989d/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7979016aff545f7b41cc517031026020b340989d/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=7979016aff545f7b41cc517031026020b340989d", "patch": "@@ -905,11 +905,10 @@ pub fn check_unused_or_stable_features(tcx: TyCtxt<'_>) {\n             // Warn if the user has enabled an already-stable lang feature.\n             unnecessary_stable_feature_lint(tcx, span, feature, since);\n         }\n-        if lang_features.contains(&feature) {\n+        if !lang_features.insert(feature) {\n             // Warn if the user enables a lang feature multiple times.\n             duplicate_feature_err(tcx.sess, span, feature);\n         }\n-        lang_features.insert(feature);\n     }\n \n     let declared_lib_features = &tcx.features().declared_lib_features;"}, {"sha": "a95ed589c3e2a8950442fb0aabebd81105723f01", "filename": "src/librustc/ty/fold.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7979016aff545f7b41cc517031026020b340989d/src%2Flibrustc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7979016aff545f7b41cc517031026020b340989d/src%2Flibrustc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffold.rs?ref=7979016aff545f7b41cc517031026020b340989d", "patch": "@@ -88,6 +88,9 @@ pub trait TypeFoldable<'tcx>: fmt::Debug + Clone {\n     fn has_infer_types(&self) -> bool {\n         self.has_type_flags(TypeFlags::HAS_TY_INFER)\n     }\n+    fn has_infer_consts(&self) -> bool {\n+        self.has_type_flags(TypeFlags::HAS_CT_INFER)\n+    }\n     fn has_local_value(&self) -> bool {\n         self.has_type_flags(TypeFlags::KEEP_IN_LOCAL_TCX)\n     }"}, {"sha": "7bd82ced3c386f7f777bc4897bbb5fe660320698", "filename": "src/librustc_codegen_llvm/debuginfo/metadata.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7979016aff545f7b41cc517031026020b340989d/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7979016aff545f7b41cc517031026020b340989d/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs?ref=7979016aff545f7b41cc517031026020b340989d", "patch": "@@ -2069,11 +2069,9 @@ fn set_members_of_composite_type(cx: &CodegenCx<'ll, 'tcx>,\n     {\n         let mut composite_types_completed =\n             debug_context(cx).composite_types_completed.borrow_mut();\n-        if composite_types_completed.contains(&composite_type_metadata) {\n+        if !composite_types_completed.insert(&composite_type_metadata) {\n             bug!(\"debuginfo::set_members_of_composite_type() - \\\n                   Already completed forward declaration re-encountered.\");\n-        } else {\n-            composite_types_completed.insert(composite_type_metadata);\n         }\n     }\n "}, {"sha": "7e662ea37dbb410bd8c203c80ece30d3bf90792b", "filename": "src/librustc_codegen_ssa/mir/rvalue.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7979016aff545f7b41cc517031026020b340989d/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7979016aff545f7b41cc517031026020b340989d/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs?ref=7979016aff545f7b41cc517031026020b340989d", "patch": "@@ -556,7 +556,6 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n     ) -> Bx::Value {\n         let is_float = input_ty.is_floating_point();\n         let is_signed = input_ty.is_signed();\n-        let is_unit = input_ty.is_unit();\n         match op {\n             mir::BinOp::Add => if is_float {\n                 bx.fadd(lhs, rhs)\n@@ -594,13 +593,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             mir::BinOp::Shl => common::build_unchecked_lshift(bx, lhs, rhs),\n             mir::BinOp::Shr => common::build_unchecked_rshift(bx, input_ty, lhs, rhs),\n             mir::BinOp::Ne | mir::BinOp::Lt | mir::BinOp::Gt |\n-            mir::BinOp::Eq | mir::BinOp::Le | mir::BinOp::Ge => if is_unit {\n-                bx.cx().const_bool(match op {\n-                    mir::BinOp::Ne | mir::BinOp::Lt | mir::BinOp::Gt => false,\n-                    mir::BinOp::Eq | mir::BinOp::Le | mir::BinOp::Ge => true,\n-                    _ => unreachable!()\n-                })\n-            } else if is_float {\n+            mir::BinOp::Eq | mir::BinOp::Le | mir::BinOp::Ge => if is_float {\n                 bx.fcmp(\n                     base::bin_op_to_fcmp_predicate(op.to_hir_binop()),\n                     lhs, rhs"}, {"sha": "a58db6a903bb99f1622fce33cfeb7d42a0d981db", "filename": "src/librustc_metadata/native_libs.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7979016aff545f7b41cc517031026020b340989d/src%2Flibrustc_metadata%2Fnative_libs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7979016aff545f7b41cc517031026020b340989d/src%2Flibrustc_metadata%2Fnative_libs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fnative_libs.rs?ref=7979016aff545f7b41cc517031026020b340989d", "patch": "@@ -198,12 +198,10 @@ impl Collector<'tcx> {\n                     self.tcx.sess.err(&format!(\"renaming of the library `{}` was specified, \\\n                                                 however this crate contains no `#[link(...)]` \\\n                                                 attributes referencing this library.\", name));\n-                } else if renames.contains(name) {\n+                } else if !renames.insert(name) {\n                     self.tcx.sess.err(&format!(\"multiple renamings were \\\n                                                 specified for library `{}` .\",\n                                                name));\n-                } else {\n-                    renames.insert(name);\n                 }\n             }\n         }"}, {"sha": "4c469a82ac3d6b9dc1bce871165c0d47a824707a", "filename": "src/librustc_mir/borrow_check/conflict_errors.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7979016aff545f7b41cc517031026020b340989d/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7979016aff545f7b41cc517031026020b340989d/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs?ref=7979016aff545f7b41cc517031026020b340989d", "patch": "@@ -78,16 +78,14 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 .last()\n                 .unwrap();\n \n-            if self.uninitialized_error_reported.contains(&root_place) {\n+            if !self.uninitialized_error_reported.insert(root_place) {\n                 debug!(\n                     \"report_use_of_moved_or_uninitialized place: error about {:?} suppressed\",\n                     root_place\n                 );\n                 return;\n             }\n \n-            self.uninitialized_error_reported.insert(root_place);\n-\n             let item_msg = match self.describe_place_with_options(used_place,\n                                                                   IncludingDowncast(true)) {\n                 Some(name) => format!(\"`{}`\", name),"}, {"sha": "dc6d4b27886e4c72e043f6bbb958a5dc03a87aee", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7979016aff545f7b41cc517031026020b340989d/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7979016aff545f7b41cc517031026020b340989d/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=7979016aff545f7b41cc517031026020b340989d", "patch": "@@ -189,8 +189,8 @@ use std::ops::RangeInclusive;\n use std::u128;\n use std::convert::TryInto;\n \n-pub fn expand_pattern<'a, 'tcx>(cx: &MatchCheckCtxt<'a, 'tcx>, pat: Pat<'tcx>) -> &'a Pat<'tcx> {\n-    cx.pattern_arena.alloc(LiteralExpander { tcx: cx.tcx }.fold_pattern(&pat))\n+pub fn expand_pattern<'a, 'tcx>(cx: &MatchCheckCtxt<'a, 'tcx>, pat: Pat<'tcx>) -> Pat<'tcx> {\n+    LiteralExpander { tcx: cx.tcx }.fold_pattern(&pat)\n }\n \n struct LiteralExpander<'tcx> {"}, {"sha": "77f3768172fb4013f8bffbfc270a15a7063453ef", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7979016aff545f7b41cc517031026020b340989d/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7979016aff545f7b41cc517031026020b340989d/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=7979016aff545f7b41cc517031026020b340989d", "patch": "@@ -154,7 +154,8 @@ impl<'tcx> MatchVisitor<'_, 'tcx> {\n                         self.tables\n                     );\n                     patcx.include_lint_checks();\n-                    let pattern = expand_pattern(cx, patcx.lower_pattern(&pat));\n+                    let pattern =\n+                        cx.pattern_arena.alloc(expand_pattern(cx, patcx.lower_pattern(&pat))) as &_;\n                     if !patcx.errors.is_empty() {\n                         patcx.report_inlining_errors(pat.span);\n                         have_errors = true;\n@@ -253,8 +254,9 @@ impl<'tcx> MatchVisitor<'_, 'tcx> {\n             patcx.include_lint_checks();\n             let pattern = patcx.lower_pattern(pat);\n             let pattern_ty = pattern.ty;\n+            let pattern = expand_pattern(cx, pattern);\n             let pats: Matrix<'_, '_> = vec![smallvec![\n-                expand_pattern(cx, pattern)\n+                &pattern\n             ]].into_iter().collect();\n \n             let witnesses = match check_not_useful(cx, pattern_ty, &pats, pat.hir_id) {"}, {"sha": "58480912929b305466170164296a405b8e0e29c0", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7979016aff545f7b41cc517031026020b340989d/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7979016aff545f7b41cc517031026020b340989d/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=7979016aff545f7b41cc517031026020b340989d", "patch": "@@ -1214,7 +1214,7 @@ fn search_for_adt_without_structural_match<'tcx>(tcx: TyCtxt<'tcx>,\n \n         // tracks ADT's previously encountered during search, so that\n         // we will not recur on them again.\n-        seen: FxHashSet<&'tcx AdtDef>,\n+        seen: FxHashSet<hir::def_id::DefId>,\n     }\n \n     impl<'tcx> TypeVisitor<'tcx> for Search<'tcx> {\n@@ -1254,14 +1254,12 @@ fn search_for_adt_without_structural_match<'tcx>(tcx: TyCtxt<'tcx>,\n                 return true // Halt visiting!\n             }\n \n-            if self.seen.contains(adt_def) {\n+            if !self.seen.insert(adt_def.did) {\n                 debug!(\"Search already seen adt_def: {:?}\", adt_def);\n                 // let caller continue its search\n                 return false;\n             }\n \n-            self.seen.insert(adt_def);\n-\n             // `#[structural_match]` does not care about the\n             // instantiation of the generics in an ADT (it\n             // instead looks directly at its fields outside"}, {"sha": "158b730b9bd43735e0ce5f1ae22981e75d6bb7d8", "filename": "src/librustc_mir/lints.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7979016aff545f7b41cc517031026020b340989d/src%2Flibrustc_mir%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7979016aff545f7b41cc517031026020b340989d/src%2Flibrustc_mir%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flints.rs?ref=7979016aff545f7b41cc517031026020b340989d", "patch": "@@ -72,13 +72,11 @@ fn check_fn_for_unconditional_recursion(\n     let caller_substs = &InternalSubsts::identity_for_item(tcx, def_id)[..trait_substs_count];\n \n     while let Some(bb) = reachable_without_self_call_queue.pop() {\n-        if visited.contains(bb) {\n+        if !visited.insert(bb) {\n             //already done\n             continue;\n         }\n \n-        visited.insert(bb);\n-\n         let block = &basic_blocks[bb];\n \n         if let Some(ref terminator) = block.terminator {"}, {"sha": "34edd5eaf4fc727b7a86c62fffe51deae201da32", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7979016aff545f7b41cc517031026020b340989d/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7979016aff545f7b41cc517031026020b340989d/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=7979016aff545f7b41cc517031026020b340989d", "patch": "@@ -673,13 +673,12 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n                     self.throw_unresolved_import_error(errors, None);\n                     errors = vec![];\n                 }\n-                if !seen_spans.contains(&err.span) {\n+                if seen_spans.insert(err.span) {\n                     let path = import_path_to_string(\n                         &import.module_path.iter().map(|seg| seg.ident).collect::<Vec<_>>(),\n                         &import.subclass,\n                         err.span,\n                     );\n-                    seen_spans.insert(err.span);\n                     errors.push((path, err));\n                     prev_root_id = import.root_id;\n                 }"}, {"sha": "bfccb032458f5288bef592a4cb1fc2fc02f06ef9", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7979016aff545f7b41cc517031026020b340989d/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7979016aff545f7b41cc517031026020b340989d/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=7979016aff545f7b41cc517031026020b340989d", "patch": "@@ -811,7 +811,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         target: Ty<'tcx>,\n         allow_two_phase: AllowTwoPhase,\n     ) -> RelateResult<'tcx, Ty<'tcx>> {\n-        let source = self.resolve_type_vars_with_obligations(expr_ty);\n+        let source = self.resolve_vars_with_obligations(expr_ty);\n         debug!(\"coercion::try({:?}: {:?} -> {:?})\", expr, source, target);\n \n         let cause = self.cause(expr.span, ObligationCauseCode::ExprAssignable);\n@@ -829,7 +829,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n     /// Same as `try_coerce()`, but without side-effects.\n     pub fn can_coerce(&self, expr_ty: Ty<'tcx>, target: Ty<'tcx>) -> bool {\n-        let source = self.resolve_type_vars_with_obligations(expr_ty);\n+        let source = self.resolve_vars_with_obligations(expr_ty);\n         debug!(\"coercion::can({:?} -> {:?})\", source, target);\n \n         let cause = self.cause(syntax_pos::DUMMY_SP, ObligationCauseCode::ExprAssignable);\n@@ -853,8 +853,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                 -> RelateResult<'tcx, Ty<'tcx>>\n         where E: AsCoercionSite\n     {\n-        let prev_ty = self.resolve_type_vars_with_obligations(prev_ty);\n-        let new_ty = self.resolve_type_vars_with_obligations(new_ty);\n+        let prev_ty = self.resolve_vars_with_obligations(prev_ty);\n+        let new_ty = self.resolve_vars_with_obligations(new_ty);\n         debug!(\"coercion::try_find_coercion_lub({:?}, {:?})\", prev_ty, new_ty);\n \n         // Special-case that coercion alone cannot handle:\n@@ -1333,7 +1333,7 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n             err.span_label(return_sp, \"expected because this return type...\");\n             err.span_label( *sp, format!(\n                 \"...is found to be `{}` here\",\n-                fcx.resolve_type_vars_with_obligations(expected),\n+                fcx.resolve_vars_with_obligations(expected),\n             ));\n         }\n         err"}, {"sha": "3509d6566ec93860315bea31234230f9a6df90f3", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7979016aff545f7b41cc517031026020b340989d/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7979016aff545f7b41cc517031026020b340989d/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=7979016aff545f7b41cc517031026020b340989d", "patch": "@@ -108,7 +108,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                               expected: Ty<'tcx>,\n                               allow_two_phase: AllowTwoPhase)\n                               -> (Ty<'tcx>, Option<DiagnosticBuilder<'tcx>>) {\n-        let expected = self.resolve_type_vars_with_obligations(expected);\n+        let expected = self.resolve_vars_with_obligations(expected);\n \n         let e = match self.try_coerce(expr, checked_ty, expected, allow_two_phase) {\n             Ok(ty) => return (ty, None),\n@@ -117,7 +117,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         let expr = expr.peel_drop_temps();\n         let cause = self.misc(expr.span);\n-        let expr_ty = self.resolve_type_vars_with_obligations(checked_ty);\n+        let expr_ty = self.resolve_vars_with_obligations(checked_ty);\n         let mut err = self.report_mismatched_types(&cause, expected, expr_ty, e);\n \n         if self.is_assign_to_bool(expr, expected) {"}, {"sha": "f5f85bbcb100c4bb7028de09dfc20380326dbc4b", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7979016aff545f7b41cc517031026020b340989d/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7979016aff545f7b41cc517031026020b340989d/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=7979016aff545f7b41cc517031026020b340989d", "patch": "@@ -1010,7 +1010,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         expr: &'tcx hir::Expr,\n     ) -> Ty<'tcx> {\n         let flds = expected.only_has_type(self).and_then(|ty| {\n-            let ty = self.resolve_type_vars_with_obligations(ty);\n+            let ty = self.resolve_vars_with_obligations(ty);\n             match ty.kind {\n                 ty::Tuple(ref flds) => Some(&flds[..]),\n                 _ => None"}, {"sha": "d90ed2a790bb642fdecbcaaf1ac97e149e3bdfbb", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7979016aff545f7b41cc517031026020b340989d/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7979016aff545f7b41cc517031026020b340989d/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=7979016aff545f7b41cc517031026020b340989d", "patch": "@@ -919,7 +919,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // This occurs for UFCS desugaring of `T::method`, where there is no\n         // receiver expression for the method call, and thus no autoderef.\n         if let SelfSource::QPath(_) = source {\n-            return is_local(self.resolve_type_vars_with_obligations(rcvr_ty));\n+            return is_local(self.resolve_vars_with_obligations(rcvr_ty));\n         }\n \n         self.autoderef(span, rcvr_ty).any(|(ty, _)| is_local(ty))"}, {"sha": "73f35dde4f6ebc0d46718300a633553c71c2e774", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7979016aff545f7b41cc517031026020b340989d/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7979016aff545f7b41cc517031026020b340989d/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=7979016aff545f7b41cc517031026020b340989d", "patch": "@@ -2440,23 +2440,23 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         self.cause(span, ObligationCauseCode::MiscObligation)\n     }\n \n-    /// Resolves type variables in `ty` if possible. Unlike the infcx\n+    /// Resolves type and const variables in `ty` if possible. Unlike the infcx\n     /// version (resolve_vars_if_possible), this version will\n     /// also select obligations if it seems useful, in an effort\n     /// to get more type information.\n-    fn resolve_type_vars_with_obligations(&self, mut ty: Ty<'tcx>) -> Ty<'tcx> {\n-        debug!(\"resolve_type_vars_with_obligations(ty={:?})\", ty);\n+    fn resolve_vars_with_obligations(&self, mut ty: Ty<'tcx>) -> Ty<'tcx> {\n+        debug!(\"resolve_vars_with_obligations(ty={:?})\", ty);\n \n         // No Infer()? Nothing needs doing.\n-        if !ty.has_infer_types() {\n-            debug!(\"resolve_type_vars_with_obligations: ty={:?}\", ty);\n+        if !ty.has_infer_types() && !ty.has_infer_consts() {\n+            debug!(\"resolve_vars_with_obligations: ty={:?}\", ty);\n             return ty;\n         }\n \n         // If `ty` is a type variable, see whether we already know what it is.\n         ty = self.resolve_vars_if_possible(&ty);\n-        if !ty.has_infer_types() {\n-            debug!(\"resolve_type_vars_with_obligations: ty={:?}\", ty);\n+        if !ty.has_infer_types() && !ty.has_infer_consts()  {\n+            debug!(\"resolve_vars_with_obligations: ty={:?}\", ty);\n             return ty;\n         }\n \n@@ -2467,7 +2467,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         self.select_obligations_where_possible(false, |_| {});\n         ty = self.resolve_vars_if_possible(&ty);\n \n-        debug!(\"resolve_type_vars_with_obligations: ty={:?}\", ty);\n+        debug!(\"resolve_vars_with_obligations: ty={:?}\", ty);\n         ty\n     }\n \n@@ -3668,7 +3668,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                            formal_ret: Ty<'tcx>,\n                                            formal_args: &[Ty<'tcx>])\n                                            -> Vec<Ty<'tcx>> {\n-        let formal_ret = self.resolve_type_vars_with_obligations(formal_ret);\n+        let formal_ret = self.resolve_vars_with_obligations(formal_ret);\n         let ret_ty = match expected_ret.only_has_type(self) {\n             Some(ret) => ret,\n             None => return Vec::new()\n@@ -4517,7 +4517,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 err.span_suggestion(\n                     span,\n                     \"try adding a return type\",\n-                    format!(\"-> {} \", self.resolve_type_vars_with_obligations(found)),\n+                    format!(\"-> {} \", self.resolve_vars_with_obligations(found)),\n                     Applicability::MachineApplicable);\n                 true\n             }\n@@ -4993,7 +4993,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     // If no resolution is possible, then an error is reported.\n     // Numeric inference variables may be left unresolved.\n     pub fn structurally_resolved_type(&self, sp: Span, ty: Ty<'tcx>) -> Ty<'tcx> {\n-        let ty = self.resolve_type_vars_with_obligations(ty);\n+        let ty = self.resolve_vars_with_obligations(ty);\n         if !ty.is_ty_var() {\n             ty\n         } else {"}, {"sha": "819c347d3ae95988008297ca12de1f10cd5e694e", "filename": "src/librustc_typeck/check/op.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7979016aff545f7b41cc517031026020b340989d/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7979016aff545f7b41cc517031026020b340989d/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fop.rs?ref=7979016aff545f7b41cc517031026020b340989d", "patch": "@@ -179,7 +179,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 self.check_expr_with_needs(lhs_expr, Needs::MutPlace)\n             }\n         };\n-        let lhs_ty = self.resolve_type_vars_with_obligations(lhs_ty);\n+        let lhs_ty = self.resolve_vars_with_obligations(lhs_ty);\n \n         // N.B., as we have not yet type-checked the RHS, we don't have the\n         // type at hand. Make a variable to represent it. The whole reason\n@@ -196,7 +196,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         // see `NB` above\n         let rhs_ty = self.check_expr_coercable_to_type(rhs_expr, rhs_ty_var);\n-        let rhs_ty = self.resolve_type_vars_with_obligations(rhs_ty);\n+        let rhs_ty = self.resolve_vars_with_obligations(rhs_ty);\n \n         let return_ty = match result {\n             Ok(method) => {"}, {"sha": "97c30f208f5ecb8fa8f2d40cdee2b977590563de", "filename": "src/librustc_typeck/check/pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7979016aff545f7b41cc517031026020b340989d/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7979016aff545f7b41cc517031026020b340989d/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs?ref=7979016aff545f7b41cc517031026020b340989d", "patch": "@@ -251,7 +251,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         expected: Ty<'tcx>,\n         mut def_bm: BindingMode,\n     ) -> (Ty<'tcx>, BindingMode) {\n-        let mut expected = self.resolve_type_vars_with_obligations(&expected);\n+        let mut expected = self.resolve_vars_with_obligations(&expected);\n \n         // Peel off as many `&` or `&mut` from the scrutinee type as possible. For example,\n         // for `match &&&mut Some(5)` the loop runs three times, aborting when it reaches"}, {"sha": "3fa13f08d3ab650e5bdc4104634268281d2fd163", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7979016aff545f7b41cc517031026020b340989d/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7979016aff545f7b41cc517031026020b340989d/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=7979016aff545f7b41cc517031026020b340989d", "patch": "@@ -67,7 +67,7 @@ pub struct Globals {\n impl Globals {\n     fn new(edition: Edition) -> Globals {\n         Globals {\n-            // We have no idea how many attributes their will be, so just\n+            // We have no idea how many attributes there will be, so just\n             // initiate the vectors with 0 bits. We'll grow them as necessary.\n             used_attrs: Lock::new(GrowableBitSet::new_empty()),\n             known_attrs: Lock::new(GrowableBitSet::new_empty()),"}, {"sha": "7090cb880fd497b3c587a5d2519466bbd061426b", "filename": "src/test/ui/const-generics/const-argument-cross-crate-mismatch.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7979016aff545f7b41cc517031026020b340989d/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-cross-crate-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7979016aff545f7b41cc517031026020b340989d/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-cross-crate-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-cross-crate-mismatch.stderr?ref=7979016aff545f7b41cc517031026020b340989d", "patch": "@@ -1,20 +1,20 @@\n error[E0308]: mismatched types\n-  --> $DIR/const-argument-cross-crate-mismatch.rs:6:41\n+  --> $DIR/const-argument-cross-crate-mismatch.rs:6:67\n    |\n LL |     let _ = const_generic_lib::function(const_generic_lib::Struct([0u8, 1u8]));\n-   |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `3usize`, found `2usize`\n+   |                                                                   ^^^^^^^^^^ expected an array with a fixed size of 3 elements, found one with 2 elements\n    |\n-   = note: expected type `const_generic_lib::Struct<3usize>`\n-              found type `const_generic_lib::Struct<_: usize>`\n+   = note: expected type `[u8; 3]`\n+              found type `[u8; 2]`\n \n error[E0308]: mismatched types\n-  --> $DIR/const-argument-cross-crate-mismatch.rs:8:39\n+  --> $DIR/const-argument-cross-crate-mismatch.rs:8:65\n    |\n LL |     let _: const_generic_lib::Alias = const_generic_lib::Struct([0u8, 1u8, 2u8]);\n-   |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `2usize`, found `3usize`\n+   |                                                                 ^^^^^^^^^^^^^^^ expected an array with a fixed size of 2 elements, found one with 3 elements\n    |\n-   = note: expected type `const_generic_lib::Struct<2usize>`\n-              found type `const_generic_lib::Struct<_: usize>`\n+   = note: expected type `[u8; 2]`\n+              found type `[u8; 3]`\n \n error: aborting due to 2 previous errors\n "}]}