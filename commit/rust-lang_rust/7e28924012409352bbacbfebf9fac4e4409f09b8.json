{"sha": "7e28924012409352bbacbfebf9fac4e4409f09b8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlMjg5MjQwMTI0MDkzNTJiYmFjYmZlYmY5ZmFjNGU0NDA5ZjA5Yjg=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-11-04T13:43:36Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-11-04T17:38:20Z"}, "message": "Use ? and destructing to simplifed long code", "tree": {"sha": "0d095814496c0ff04d1f1ecc8c6bafa8358a3a65", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d095814496c0ff04d1f1ecc8c6bafa8358a3a65"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e28924012409352bbacbfebf9fac4e4409f09b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e28924012409352bbacbfebf9fac4e4409f09b8", "html_url": "https://github.com/rust-lang/rust/commit/7e28924012409352bbacbfebf9fac4e4409f09b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e28924012409352bbacbfebf9fac4e4409f09b8/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6709f64af1836460aee41aca34eb19ed3a337dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6709f64af1836460aee41aca34eb19ed3a337dd", "html_url": "https://github.com/rust-lang/rust/commit/e6709f64af1836460aee41aca34eb19ed3a337dd"}], "stats": {"total": 36, "additions": 17, "deletions": 19}, "files": [{"sha": "8369c2b40f91078950cf3ddb540ccdff08c7624e", "filename": "crates/ra_hir_expand/src/db.rs", "status": "modified", "additions": 17, "deletions": 19, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/7e28924012409352bbacbfebf9fac4e4409f09b8/crates%2Fra_hir_expand%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e28924012409352bbacbfebf9fac4e4409f09b8/crates%2Fra_hir_expand%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fdb.rs?ref=7e28924012409352bbacbfebf9fac4e4409f09b8", "patch": "@@ -132,35 +132,33 @@ pub(crate) fn parse_macro_with_info(\n             log::warn!(\"fail on macro_parse: (reason: {})\", err,);\n         })\n         .ok()?;\n-    let res = match macro_file.macro_file_kind {\n+\n+    let (parsed, exp_map) = match macro_file.macro_file_kind {\n         MacroFileKind::Items => {\n-            mbe::token_tree_to_items(&tt.0).ok().map(|(p, map)| (Parse::to_syntax(p), map))\n+            mbe::token_tree_to_items(&tt.0).map(|(p, map)| (p.to_syntax(), map)).ok()?\n         }\n         MacroFileKind::Expr => {\n-            mbe::token_tree_to_expr(&tt.0).ok().map(|(p, map)| (Parse::to_syntax(p), map))\n+            mbe::token_tree_to_expr(&tt.0).map(|(p, map)| (p.to_syntax(), map)).ok()?\n         }\n     };\n \n-    res.map(|(parsed, exp_map)| {\n-        let expand_info = tt.1;\n-        let loc: MacroCallLoc = db.lookup_intern_macro(macro_call_id);\n+    let expand_info = tt.1;\n+    let loc: MacroCallLoc = db.lookup_intern_macro(macro_call_id);\n+\n+    let arg_tt = loc.ast_id.to_node(db).token_tree();\n+    let def_tt = loc.def.ast_id.to_node(db).token_tree();\n \n-        let def_start =\n-            loc.def.ast_id.to_node(db).token_tree().map(|t| t.syntax().text_range().start());\n-        let arg_start =\n-            loc.ast_id.to_node(db).token_tree().map(|t| t.syntax().text_range().start());\n+    let arg_start = arg_tt.map(|t| t.syntax().text_range().start());\n+    let def_start = def_tt.map(|t| t.syntax().text_range().start());\n \n-        let arg_map = arg_start\n-            .map(|start| exp_map.ranges(&expand_info.arg_map, start))\n-            .unwrap_or_else(|| Vec::new());\n-        let def_map = def_start\n-            .map(|start| exp_map.ranges(&expand_info.def_map, start))\n-            .unwrap_or_else(|| Vec::new());\n+    let arg_map =\n+        arg_start.map(|start| exp_map.ranges(&expand_info.arg_map, start)).unwrap_or_default();\n+    let def_map =\n+        def_start.map(|start| exp_map.ranges(&expand_info.def_map, start)).unwrap_or_default();\n \n-        let info = ExpansionInfo { arg_map, def_map };\n+    let info = ExpansionInfo { arg_map, def_map };\n \n-        ParseMacroWithInfo { parsed, expansion_info: Arc::new(info) }\n-    })\n+    Some(ParseMacroWithInfo { parsed, expansion_info: Arc::new(info) })\n }\n \n pub(crate) fn macro_expansion_info("}]}