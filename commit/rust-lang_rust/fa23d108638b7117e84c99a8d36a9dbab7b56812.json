{"sha": "fa23d108638b7117e84c99a8d36a9dbab7b56812", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhMjNkMTA4NjM4YjcxMTdlODRjOTlhOGQzNmE5ZGJhYjdiNTY4MTI=", "commit": {"author": {"name": "Leo Testard", "email": "leo.testard@gmail.com", "date": "2016-04-09T16:01:14Z"}, "committer": {"name": "Leo Testard", "email": "leo.testard@gmail.com", "date": "2016-04-21T23:40:33Z"}, "message": "Remove some useless code.", "tree": {"sha": "3171d992f6e061e33f0be4dc533485a4ab290aea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3171d992f6e061e33f0be4dc533485a4ab290aea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa23d108638b7117e84c99a8d36a9dbab7b56812", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa23d108638b7117e84c99a8d36a9dbab7b56812", "html_url": "https://github.com/rust-lang/rust/commit/fa23d108638b7117e84c99a8d36a9dbab7b56812", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa23d108638b7117e84c99a8d36a9dbab7b56812/comments", "author": {"login": "LeoTestard", "id": 907750, "node_id": "MDQ6VXNlcjkwNzc1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/907750?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeoTestard", "html_url": "https://github.com/LeoTestard", "followers_url": "https://api.github.com/users/LeoTestard/followers", "following_url": "https://api.github.com/users/LeoTestard/following{/other_user}", "gists_url": "https://api.github.com/users/LeoTestard/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeoTestard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeoTestard/subscriptions", "organizations_url": "https://api.github.com/users/LeoTestard/orgs", "repos_url": "https://api.github.com/users/LeoTestard/repos", "events_url": "https://api.github.com/users/LeoTestard/events{/privacy}", "received_events_url": "https://api.github.com/users/LeoTestard/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LeoTestard", "id": 907750, "node_id": "MDQ6VXNlcjkwNzc1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/907750?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeoTestard", "html_url": "https://github.com/LeoTestard", "followers_url": "https://api.github.com/users/LeoTestard/followers", "following_url": "https://api.github.com/users/LeoTestard/following{/other_user}", "gists_url": "https://api.github.com/users/LeoTestard/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeoTestard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeoTestard/subscriptions", "organizations_url": "https://api.github.com/users/LeoTestard/orgs", "repos_url": "https://api.github.com/users/LeoTestard/repos", "events_url": "https://api.github.com/users/LeoTestard/events{/privacy}", "received_events_url": "https://api.github.com/users/LeoTestard/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03ab057f97910769846f06ef904eb3eedc20134e", "url": "https://api.github.com/repos/rust-lang/rust/commits/03ab057f97910769846f06ef904eb3eedc20134e", "html_url": "https://github.com/rust-lang/rust/commit/03ab057f97910769846f06ef904eb3eedc20134e"}], "stats": {"total": 52, "additions": 15, "deletions": 37}, "files": [{"sha": "3424696fa7fe7381970623691a5e124a8e8fa7f7", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fa23d108638b7117e84c99a8d36a9dbab7b56812/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa23d108638b7117e84c99a8d36a9dbab7b56812/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=fa23d108638b7117e84c99a8d36a9dbab7b56812", "patch": "@@ -83,10 +83,12 @@ pub fn expand_expr(e: P<ast::Expr>, fld: &mut MacroExpander) -> P<ast::Expr> {\n \n         ast::ExprKind::InPlace(placer, value_expr) => {\n             // Ensure feature-gate is enabled\n-            feature_gate::check_for_placement_in(\n-                fld.cx.ecfg.features,\n-                &fld.cx.parse_sess.span_diagnostic,\n-                expr_span);\n+            if !fld.cx.ecfg.features.unwrap().placement_in_syntax {\n+                feature_gate::emit_feature_err(\n+                    &fld.cx.parse_sess.span_diagnostic, \"placement_in_syntax\", expr_span,\n+                    feature_gate::GateIssue::Language, feature_gate::EXPLAIN_PLACEMENT_IN\n+                );\n+            }\n \n             let placer = fld.fold_expr(placer);\n             let value_expr = fld.fold_expr(value_expr);"}, {"sha": "c6b398507d4532e3b2dff2780edd64ad5d3c49e1", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 9, "deletions": 33, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/fa23d108638b7117e84c99a8d36a9dbab7b56812/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa23d108638b7117e84c99a8d36a9dbab7b56812/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=fa23d108638b7117e84c99a8d36a9dbab7b56812", "patch": "@@ -654,39 +654,6 @@ impl GatedCfg {\n     }\n }\n \n-const EXPLAIN_BOX_SYNTAX: &'static str =\n-    \"box expression syntax is experimental; you can call `Box::new` instead.\";\n-\n-const EXPLAIN_PLACEMENT_IN: &'static str =\n-    \"placement-in expression syntax is experimental and subject to change.\";\n-\n-const EXPLAIN_PUSHPOP_UNSAFE: &'static str =\n-    \"push/pop_unsafe macros are experimental and subject to change.\";\n-\n-const EXPLAIN_STMT_ATTR_SYNTAX: &'static str =\n-    \"attributes on non-item statements and expressions are experimental.\";\n-\n-pub fn check_for_box_syntax(f: Option<&Features>, diag: &Handler, span: Span) {\n-    if let Some(&Features { box_syntax: true, .. }) = f {\n-        return;\n-    }\n-    emit_feature_err(diag, \"box_syntax\", span, GateIssue::Language, EXPLAIN_BOX_SYNTAX);\n-}\n-\n-pub fn check_for_placement_in(f: Option<&Features>, diag: &Handler, span: Span) {\n-    if let Some(&Features { placement_in_syntax: true, .. }) = f {\n-        return;\n-    }\n-    emit_feature_err(diag, \"placement_in_syntax\", span, GateIssue::Language, EXPLAIN_PLACEMENT_IN);\n-}\n-\n-pub fn check_for_pushpop_syntax(f: Option<&Features>, diag: &Handler, span: Span) {\n-    if let Some(&Features { pushpop_unsafe: true, .. }) = f {\n-        return;\n-    }\n-    emit_feature_err(diag, \"pushpop_unsafe\", span, GateIssue::Language, EXPLAIN_PUSHPOP_UNSAFE);\n-}\n-\n struct Context<'a> {\n     features: &'a Features,\n     span_handler: &'a Handler,\n@@ -809,6 +776,12 @@ pub fn emit_feature_err(diag: &Handler, feature: &str, span: Span, issue: GateIs\n     err.emit();\n }\n \n+const EXPLAIN_BOX_SYNTAX: &'static str =\n+    \"box expression syntax is experimental; you can call `Box::new` instead.\";\n+\n+const EXPLAIN_STMT_ATTR_SYNTAX: &'static str =\n+    \"attributes on non-item statements and expressions are experimental.\";\n+\n pub const EXPLAIN_ASM: &'static str =\n     \"inline assembly is not stable enough for use and is subject to change\";\n \n@@ -829,6 +802,9 @@ pub const EXPLAIN_CUSTOM_DERIVE: &'static str =\n pub const EXPLAIN_DERIVE_UNDERSCORE: &'static str =\n     \"attributes of the form `#[derive_*]` are reserved for the compiler\";\n \n+pub const EXPLAIN_PLACEMENT_IN: &'static str =\n+    \"placement-in expression syntax is experimental and subject to change.\";\n+\n struct PostExpansionVisitor<'a> {\n     context: &'a Context<'a>,\n }"}]}