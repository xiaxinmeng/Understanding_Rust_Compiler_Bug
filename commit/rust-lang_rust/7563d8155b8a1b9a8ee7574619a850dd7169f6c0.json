{"sha": "7563d8155b8a1b9a8ee7574619a850dd7169f6c0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1NjNkODE1NWI4YTFiOWE4ZWU3NTc0NjE5YTg1MGRkNzE2OWY2YzA=", "commit": {"author": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-06-06T13:17:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-06-06T13:17:47Z"}, "message": "Merge pull request #2804 from utaal/expr-call-author\n\nAdd support for ExprCall in clippy::author", "tree": {"sha": "3d283148f00561a838da911b3b516c2ed2d4cb12", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d283148f00561a838da911b3b516c2ed2d4cb12"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7563d8155b8a1b9a8ee7574619a850dd7169f6c0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbF977CRBK7hj4Ov3rIwAAdHIIAGZLG7ICCSojmO2Ei0K+gPPT\nAVT3NG9K/AY/du6jTh452109oO+VIN4/JMnUM5VFphhNfy/d+t1IMrP154rDb5of\npLacPQkUIN0FvtPapls0SaJ1nqbNpmFX0ozEOXZhbX5mJwmGHzlKnsefghpRnFUq\ny3zW3PGfYq/KCgy9vFGrALSG07yLOxSdWcWdJbAkWryBWpCj+9ppYZsli5OiQjiB\nwaTRVECJQCDjinqD2I/OtN+NdSsp5Zw5m75Fy5lowmLdhLdkMZbu3rqsB3uxSMOE\nbp51FTWJPPiAoqhnUkgBQZEoyzobImdXnev2L3GEHtkdSRPsJPB5SwBEVd+03ik=\n=v5vR\n-----END PGP SIGNATURE-----\n", "payload": "tree 3d283148f00561a838da911b3b516c2ed2d4cb12\nparent 1e1b4e26ea4bf842edbda888eecfc40c02b60d73\nparent 5db444dfed6dd8cd3a00c62d95ae7ebb6f60e22a\nauthor Oliver Schneider <github35764891676564198441@oli-obk.de> 1528291067 +0200\ncommitter GitHub <noreply@github.com> 1528291067 +0200\n\nMerge pull request #2804 from utaal/expr-call-author\n\nAdd support for ExprCall in clippy::author"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7563d8155b8a1b9a8ee7574619a850dd7169f6c0", "html_url": "https://github.com/rust-lang/rust/commit/7563d8155b8a1b9a8ee7574619a850dd7169f6c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7563d8155b8a1b9a8ee7574619a850dd7169f6c0/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e1b4e26ea4bf842edbda888eecfc40c02b60d73", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e1b4e26ea4bf842edbda888eecfc40c02b60d73", "html_url": "https://github.com/rust-lang/rust/commit/1e1b4e26ea4bf842edbda888eecfc40c02b60d73"}, {"sha": "5db444dfed6dd8cd3a00c62d95ae7ebb6f60e22a", "url": "https://api.github.com/repos/rust-lang/rust/commits/5db444dfed6dd8cd3a00c62d95ae7ebb6f60e22a", "html_url": "https://github.com/rust-lang/rust/commit/5db444dfed6dd8cd3a00c62d95ae7ebb6f60e22a"}], "stats": {"total": 86, "additions": 64, "deletions": 22}, "files": [{"sha": "e10fa60a38b31b552e4ffcf7dddb11a5432fa068", "filename": "clippy_lints/src/utils/author.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7563d8155b8a1b9a8ee7574619a850dd7169f6c0/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7563d8155b8a1b9a8ee7574619a850dd7169f6c0/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=7563d8155b8a1b9a8ee7574619a850dd7169f6c0", "patch": "@@ -210,9 +210,17 @@ impl<'tcx> Visitor<'tcx> for PrintVisitor {\n                     self.visit_expr(element);\n                 }\n             },\n-            Expr_::ExprCall(ref _func, ref _args) => {\n-                println!(\"Call(ref func, ref args) = {};\", current);\n-                println!(\"    // unimplemented: `ExprCall` is not further destructured at the moment\");\n+            Expr_::ExprCall(ref func, ref args) => {\n+                let func_pat = self.next(\"func\");\n+                let args_pat = self.next(\"args\");\n+                println!(\"Call(ref {}, ref {}) = {};\", func_pat, args_pat, current);\n+                self.current = func_pat;\n+                self.visit_expr(func);\n+                println!(\"    if {}.len() == {};\", args_pat, args.len());\n+                for (i, arg) in args.iter().enumerate() {\n+                    self.current = format!(\"{}[{}]\", args_pat, i);\n+                    self.visit_expr(arg);\n+                }\n             },\n             Expr_::ExprMethodCall(ref _method_name, ref _generics, ref _args) => {\n                 println!(\"MethodCall(ref method_name, ref generics, ref args) = {};\", current);"}, {"sha": "8d085112f3bdd6709d0755efe5f8a0f056c3bbde", "filename": "tests/ui/author/call.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7563d8155b8a1b9a8ee7574619a850dd7169f6c0/tests%2Fui%2Fauthor%2Fcall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7563d8155b8a1b9a8ee7574619a850dd7169f6c0/tests%2Fui%2Fauthor%2Fcall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauthor%2Fcall.rs?ref=7563d8155b8a1b9a8ee7574619a850dd7169f6c0", "patch": "@@ -0,0 +1,6 @@\n+#![feature(tool_attributes)]\n+\n+fn main() {\n+    #[clippy::author]\n+    let _ = ::std::cmp::min(3, 4);\n+}"}, {"sha": "3e06bf9ace8bd213016da5f8a6019dd9ac3c2447", "filename": "tests/ui/author/call.stdout", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7563d8155b8a1b9a8ee7574619a850dd7169f6c0/tests%2Fui%2Fauthor%2Fcall.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/7563d8155b8a1b9a8ee7574619a850dd7169f6c0/tests%2Fui%2Fauthor%2Fcall.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauthor%2Fcall.stdout?ref=7563d8155b8a1b9a8ee7574619a850dd7169f6c0", "patch": "@@ -0,0 +1,17 @@\n+if_chain! {\n+    if let Stmt_::StmtDecl(ref decl, _) = stmt.node\n+    if let Decl_::DeclLocal(ref local) = decl.node;\n+    if let Some(ref init) = local.init\n+    if let Expr_::ExprCall(ref func, ref args) = init.node;\n+    if let Expr_::ExprPath(ref path) = func.node;\n+    if match_qpath(path, &[\"{{root}}\", \"std\", \"cmp\", \"min\"]);\n+    if args.len() == 2;\n+    if let Expr_::ExprLit(ref lit) = args[0].node;\n+    if let LitKind::Int(3, _) = lit.node;\n+    if let Expr_::ExprLit(ref lit1) = args[1].node;\n+    if let LitKind::Int(4, _) = lit1.node;\n+    if let PatKind::Wild = local.pat.node;\n+    then {\n+        // report your lint here\n+    }\n+}"}, {"sha": "69bc6d7a0252128b49246e5c16efd64ca123afa8", "filename": "tests/ui/author/for_loop.stdout", "status": "modified", "additions": 30, "deletions": 19, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/7563d8155b8a1b9a8ee7574619a850dd7169f6c0/tests%2Fui%2Fauthor%2Ffor_loop.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/7563d8155b8a1b9a8ee7574619a850dd7169f6c0/tests%2Fui%2Fauthor%2Ffor_loop.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauthor%2Ffor_loop.stdout?ref=7563d8155b8a1b9a8ee7574619a850dd7169f6c0", "patch": "@@ -5,7 +5,13 @@ if_chain! {\n     if let Some(ref init) = local.init\n     if let Expr_::ExprMatch(ref expr, ref arms, MatchSource::ForLoopDesugar) = init.node;\n     if let Expr_::ExprCall(ref func, ref args) = expr.node;\n-    // unimplemented: `ExprCall` is not further destructured at the moment\n+    if let Expr_::ExprPath(ref path) = func.node;\n+    if match_qpath(path, &[\"{{root}}\", \"std\", \"iter\", \"IntoIterator\", \"into_iter\"]);\n+    if args.len() == 1;\n+    if let Expr_::ExprStruct(ref path1, ref fields, None) = args[0].node;\n+    if match_qpath(path1, &[\"{{root}}\", \"std\", \"ops\", \"Range\"]);\n+    if fields.len() == 2;\n+    // unimplemented: field checks\n     if arms.len() == 1;\n     if let Expr_::ExprLoop(ref body, ref label, LoopSource::ForLoop) = arms[0].body.node;\n     if let Stmt_::StmtDecl(ref decl1, _) = body.node\n@@ -14,46 +20,51 @@ if_chain! {\n     if name.node.as_str() == \"__next\";\n     if let Stmt_::StmtExpr(ref e, _) = local1.pat.node\n     if let Expr_::ExprMatch(ref expr1, ref arms1, MatchSource::ForLoopDesugar) = e.node;\n-    if let Expr_::ExprCall(ref func, ref args) = expr1.node;\n-    // unimplemented: `ExprCall` is not further destructured at the moment\n+    if let Expr_::ExprCall(ref func1, ref args1) = expr1.node;\n+    if let Expr_::ExprPath(ref path2) = func1.node;\n+    if match_qpath(path2, &[\"{{root}}\", \"std\", \"iter\", \"Iterator\", \"next\"]);\n+    if args1.len() == 1;\n+    if let Expr_::ExprAddrOf(MutMutable, ref inner) = args1[0].node;\n+    if let Expr_::ExprPath(ref path3) = inner.node;\n+    if match_qpath(path3, &[\"iter\"]);\n     if arms1.len() == 2;\n     if let Expr_::ExprAssign(ref target, ref value) = arms1[0].body.node;\n-    if let Expr_::ExprPath(ref path) = target.node;\n-    if match_qpath(path, &[\"__next\"]);\n-    if let Expr_::ExprPath(ref path1) = value.node;\n-    if match_qpath(path1, &[\"val\"]);\n+    if let Expr_::ExprPath(ref path4) = target.node;\n+    if match_qpath(path4, &[\"__next\"]);\n+    if let Expr_::ExprPath(ref path5) = value.node;\n+    if match_qpath(path5, &[\"val\"]);\n     if arms1[0].pats.len() == 1;\n-    if let PatKind::TupleStruct(ref path2, ref fields, None) = arms1[0].pats[0].node;\n-    if match_qpath(path2, &[\"{{root}}\", \"std\", \"option\", \"Option\", \"Some\"]);\n-    if fields.len() == 1;\n+    if let PatKind::TupleStruct(ref path6, ref fields1, None) = arms1[0].pats[0].node;\n+    if match_qpath(path6, &[\"{{root}}\", \"std\", \"option\", \"Option\", \"Some\"]);\n+    if fields1.len() == 1;\n     // unimplemented: field checks\n     if let Expr_::ExprBreak(ref destination, None) = arms1[1].body.node;\n     if arms1[1].pats.len() == 1;\n-    if let PatKind::Path(ref path3) = arms1[1].pats[0].node;\n-    if match_qpath(path3, &[\"{{root}}\", \"std\", \"option\", \"Option\", \"None\"]);\n-    if let Stmt_::StmtDecl(ref decl2, _) = path3.node\n+    if let PatKind::Path(ref path7) = arms1[1].pats[0].node;\n+    if match_qpath(path7, &[\"{{root}}\", \"std\", \"option\", \"Option\", \"None\"]);\n+    if let Stmt_::StmtDecl(ref decl2, _) = path7.node\n     if let Decl_::DeclLocal(ref local2) = decl2.node;\n     if let Some(ref init1) = local2.init\n-    if let Expr_::ExprPath(ref path4) = init1.node;\n-    if match_qpath(path4, &[\"__next\"]);\n+    if let Expr_::ExprPath(ref path8) = init1.node;\n+    if match_qpath(path8, &[\"__next\"]);\n     if let PatKind::Binding(BindingAnnotation::Unannotated, _, name1, None) = local2.pat.node;\n     if name1.node.as_str() == \"y\";\n     if let Stmt_::StmtExpr(ref e1, _) = local2.pat.node\n     if let Expr_::ExprBlock(ref block1) = e1.node;\n     if let Stmt_::StmtDecl(ref decl3, _) = block1.node\n     if let Decl_::DeclLocal(ref local3) = decl3.node;\n     if let Some(ref init2) = local3.init\n-    if let Expr_::ExprPath(ref path5) = init2.node;\n-    if match_qpath(path5, &[\"y\"]);\n+    if let Expr_::ExprPath(ref path9) = init2.node;\n+    if match_qpath(path9, &[\"y\"]);\n     if let PatKind::Binding(BindingAnnotation::Unannotated, _, name2, None) = local3.pat.node;\n     if name2.node.as_str() == \"z\";\n     if arms[0].pats.len() == 1;\n     if let PatKind::Binding(BindingAnnotation::Mutable, _, name3, None) = arms[0].pats[0].node;\n     if name3.node.as_str() == \"iter\";\n     if let PatKind::Binding(BindingAnnotation::Unannotated, _, name4, None) = local.pat.node;\n     if name4.node.as_str() == \"_result\";\n-    if let Expr_::ExprPath(ref path6) = local.pat.node;\n-    if match_qpath(path6, &[\"_result\"]);\n+    if let Expr_::ExprPath(ref path10) = local.pat.node;\n+    if match_qpath(path10, &[\"_result\"]);\n     then {\n         // report your lint here\n     }"}]}