{"sha": "a2261ad66400c3145f96ebff0d9b75e910fa89dd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyMjYxYWQ2NjQwMGMzMTQ1Zjk2ZWJmZjBkOWI3NWU5MTBmYTg5ZGQ=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-09-13T00:46:05Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-09-13T03:46:23Z"}, "message": "Inline `mark_neighbours_as_waiting_from`.\n\nThis function is very hot, doesn't get inlined because it's recursive,\nand the function calls are significant.\n\nThis commit splits it into inlined and uninlined variants, and uses the\ninlined variant for the hot call site. This wins several percent on a\nfew benchmarks.", "tree": {"sha": "2593d02088380d3f5c745e6495596383183e1214", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2593d02088380d3f5c745e6495596383183e1214"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a2261ad66400c3145f96ebff0d9b75e910fa89dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a2261ad66400c3145f96ebff0d9b75e910fa89dd", "html_url": "https://github.com/rust-lang/rust/commit/a2261ad66400c3145f96ebff0d9b75e910fa89dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a2261ad66400c3145f96ebff0d9b75e910fa89dd/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b8116dced2c6c5d02e1c4359e89dc0919d6001b", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b8116dced2c6c5d02e1c4359e89dc0919d6001b", "html_url": "https://github.com/rust-lang/rust/commit/2b8116dced2c6c5d02e1c4359e89dc0919d6001b"}], "stats": {"total": 17, "additions": 13, "deletions": 4}, "files": [{"sha": "6c52e626ababd86917cf4566556368b03d7cb184", "filename": "src/librustc_data_structures/obligation_forest/mod.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a2261ad66400c3145f96ebff0d9b75e910fa89dd/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2261ad66400c3145f96ebff0d9b75e910fa89dd/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs?ref=a2261ad66400c3145f96ebff0d9b75e910fa89dd", "patch": "@@ -559,13 +559,20 @@ impl<O: ForestObligation> ObligationForest<O> {\n         trace\n     }\n \n-    #[inline]\n-    fn mark_neighbors_as_waiting_from(&self, node: &Node<O>) {\n+    // This always-inlined function is for the hot call site.\n+    #[inline(always)]\n+    fn inlined_mark_neighbors_as_waiting_from(&self, node: &Node<O>) {\n         for dependent in node.parent.iter().chain(node.dependents.iter()) {\n             self.mark_as_waiting_from(&self.nodes[dependent.get()]);\n         }\n     }\n \n+    // This never-inlined function is for the cold call site.\n+    #[inline(never)]\n+    fn uninlined_mark_neighbors_as_waiting_from(&self, node: &Node<O>) {\n+        self.inlined_mark_neighbors_as_waiting_from(node)\n+    }\n+\n     /// Marks all nodes that depend on a pending node as `NodeState::Waiting`.\n     fn mark_as_waiting(&self) {\n         for node in &self.nodes {\n@@ -576,7 +583,8 @@ impl<O: ForestObligation> ObligationForest<O> {\n \n         for node in &self.nodes {\n             if node.state.get() == NodeState::Pending {\n-                self.mark_neighbors_as_waiting_from(node);\n+                // This call site is hot.\n+                self.inlined_mark_neighbors_as_waiting_from(node);\n             }\n         }\n     }\n@@ -588,7 +596,8 @@ impl<O: ForestObligation> ObligationForest<O> {\n             NodeState::Pending | NodeState::Done => {},\n         }\n \n-        self.mark_neighbors_as_waiting_from(node);\n+        // This call site is cold.\n+        self.uninlined_mark_neighbors_as_waiting_from(node);\n     }\n \n     /// Compresses the vector, removing all popped nodes. This adjusts"}]}