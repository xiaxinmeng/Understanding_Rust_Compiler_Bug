{"sha": "8b0b7ef812d38b0ef2f5e69bea29cfd061141e2f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiMGI3ZWY4MTJkMzhiMGVmMmY1ZTY5YmVhMjljZmQwNjExNDFlMmY=", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2021-08-05T01:16:19Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2021-08-18T07:25:26Z"}, "message": "Remove box syntax from rustc_mir_build", "tree": {"sha": "75626069e6e6ac1c5e20af6294bc8895f3aa3339", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/75626069e6e6ac1c5e20af6294bc8895f3aa3339"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b0b7ef812d38b0ef2f5e69bea29cfd061141e2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b0b7ef812d38b0ef2f5e69bea29cfd061141e2f", "html_url": "https://github.com/rust-lang/rust/commit/8b0b7ef812d38b0ef2f5e69bea29cfd061141e2f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b0b7ef812d38b0ef2f5e69bea29cfd061141e2f/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cbe3afece59d85a53b9c7e085c1426c9bac2b526", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbe3afece59d85a53b9c7e085c1426c9bac2b526", "html_url": "https://github.com/rust-lang/rust/commit/cbe3afece59d85a53b9c7e085c1426c9bac2b526"}], "stats": {"total": 133, "additions": 74, "deletions": 59}, "files": [{"sha": "f08c6405af17f2d8fc12236c71b848e66576a3a3", "filename": "compiler/rustc_mir_build/src/build/cfg.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8b0b7ef812d38b0ef2f5e69bea29cfd061141e2f/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b0b7ef812d38b0ef2f5e69bea29cfd061141e2f/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcfg.rs?ref=8b0b7ef812d38b0ef2f5e69bea29cfd061141e2f", "patch": "@@ -40,7 +40,7 @@ impl<'tcx> CFG<'tcx> {\n     ) {\n         self.push(\n             block,\n-            Statement { source_info, kind: StatementKind::Assign(box (place, rvalue)) },\n+            Statement { source_info, kind: StatementKind::Assign(Box::new((place, rvalue))) },\n         );\n     }\n \n@@ -51,7 +51,12 @@ impl<'tcx> CFG<'tcx> {\n         temp: Place<'tcx>,\n         constant: Constant<'tcx>,\n     ) {\n-        self.push_assign(block, source_info, temp, Rvalue::Use(Operand::Constant(box constant)));\n+        self.push_assign(\n+            block,\n+            source_info,\n+            temp,\n+            Rvalue::Use(Operand::Constant(Box::new(constant))),\n+        );\n     }\n \n     crate fn push_assign_unit(\n@@ -65,11 +70,11 @@ impl<'tcx> CFG<'tcx> {\n             block,\n             source_info,\n             place,\n-            Rvalue::Use(Operand::Constant(box Constant {\n+            Rvalue::Use(Operand::Constant(Box::new(Constant {\n                 span: source_info.span,\n                 user_ty: None,\n                 literal: ty::Const::zero_sized(tcx, tcx.types.unit).into(),\n-            })),\n+            }))),\n         );\n     }\n \n@@ -80,7 +85,7 @@ impl<'tcx> CFG<'tcx> {\n         cause: FakeReadCause,\n         place: Place<'tcx>,\n     ) {\n-        let kind = StatementKind::FakeRead(box (cause, place));\n+        let kind = StatementKind::FakeRead(Box::new((cause, place)));\n         let stmt = Statement { source_info, kind };\n         self.push(block, stmt);\n     }"}, {"sha": "bbb2f89fda9399fd3cf3c7436b46160ec249a0be", "filename": "compiler/rustc_mir_build/src/build/expr/as_operand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b0b7ef812d38b0ef2f5e69bea29cfd061141e2f/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_operand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b0b7ef812d38b0ef2f5e69bea29cfd061141e2f/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_operand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_operand.rs?ref=8b0b7ef812d38b0ef2f5e69bea29cfd061141e2f", "patch": "@@ -111,7 +111,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         match category {\n             Category::Constant => {\n                 let constant = this.as_constant(expr);\n-                block.and(Operand::Constant(box constant))\n+                block.and(Operand::Constant(Box::new(constant)))\n             }\n             Category::Place | Category::Rvalue(..) => {\n                 let operand = unpack!(block = this.as_temp(block, scope, expr, Mutability::Mut));"}, {"sha": "05995ddcc00513398e1036cb0b7aa9ed0d8518e4", "filename": "compiler/rustc_mir_build/src/build/expr/as_place.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8b0b7ef812d38b0ef2f5e69bea29cfd061141e2f/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b0b7ef812d38b0ef2f5e69bea29cfd061141e2f/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs?ref=8b0b7ef812d38b0ef2f5e69bea29cfd061141e2f", "patch": "@@ -507,10 +507,10 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         Statement {\n                             source_info,\n                             kind: StatementKind::AscribeUserType(\n-                                box (\n+                                Box::new((\n                                     place,\n                                     UserTypeProjection { base: annotation_index, projs: vec![] },\n-                                ),\n+                                )),\n                                 Variance::Invariant,\n                             ),\n                         },\n@@ -534,10 +534,10 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         Statement {\n                             source_info,\n                             kind: StatementKind::AscribeUserType(\n-                                box (\n+                                Box::new((\n                                     Place::from(temp),\n                                     UserTypeProjection { base: annotation_index, projs: vec![] },\n-                                ),\n+                                )),\n                                 Variance::Invariant,\n                             ),\n                         },\n@@ -691,7 +691,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             lt,\n             Rvalue::BinaryOp(\n                 BinOp::Lt,\n-                box (Operand::Copy(Place::from(index)), Operand::Copy(len)),\n+                Box::new((Operand::Copy(Place::from(index)), Operand::Copy(len))),\n             ),\n         );\n         let msg = BoundsCheck { len: Operand::Move(len), index: Operand::Copy(Place::from(index)) };"}, {"sha": "68de1af613d9f20d7b2e1f18a5082ed8486f2a51", "filename": "compiler/rustc_mir_build/src/build/expr/as_rvalue.rs", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/8b0b7ef812d38b0ef2f5e69bea29cfd061141e2f/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b0b7ef812d38b0ef2f5e69bea29cfd061141e2f/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=8b0b7ef812d38b0ef2f5e69bea29cfd061141e2f", "patch": "@@ -73,7 +73,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         block,\n                         source_info,\n                         is_min,\n-                        Rvalue::BinaryOp(BinOp::Eq, box (arg.to_copy(), minval)),\n+                        Rvalue::BinaryOp(BinOp::Eq, Box::new((arg.to_copy(), minval))),\n                     );\n \n                     block = this.assert(\n@@ -158,7 +158,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     .map(|f| unpack!(block = this.as_operand(block, scope, &this.thir[f])))\n                     .collect();\n \n-                block.and(Rvalue::Aggregate(box AggregateKind::Array(el_ty), fields))\n+                block.and(Rvalue::Aggregate(Box::new(AggregateKind::Array(el_ty)), fields))\n             }\n             ExprKind::Tuple { ref fields } => {\n                 // see (*) above\n@@ -169,7 +169,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     .map(|f| unpack!(block = this.as_operand(block, scope, &this.thir[f])))\n                     .collect();\n \n-                block.and(Rvalue::Aggregate(box AggregateKind::Tuple, fields))\n+                block.and(Rvalue::Aggregate(Box::new(AggregateKind::Tuple), fields))\n             }\n             ExprKind::Closure { closure_id, substs, ref upvars, movability, ref fake_reads } => {\n                 // Convert the closure fake reads, if any, from `ExprRef` to mir `Place`\n@@ -254,19 +254,21 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         // We implicitly set the discriminant to 0. See\n                         // librustc_mir/transform/deaggregator.rs for details.\n                         let movability = movability.unwrap();\n-                        box AggregateKind::Generator(closure_id, substs, movability)\n+                        Box::new(AggregateKind::Generator(closure_id, substs, movability))\n+                    }\n+                    UpvarSubsts::Closure(substs) => {\n+                        Box::new(AggregateKind::Closure(closure_id, substs))\n                     }\n-                    UpvarSubsts::Closure(substs) => box AggregateKind::Closure(closure_id, substs),\n                 };\n                 block.and(Rvalue::Aggregate(result, operands))\n             }\n             ExprKind::Assign { .. } | ExprKind::AssignOp { .. } => {\n                 block = unpack!(this.stmt_expr(block, expr, None));\n-                block.and(Rvalue::Use(Operand::Constant(box Constant {\n+                block.and(Rvalue::Use(Operand::Constant(Box::new(Constant {\n                     span: expr_span,\n                     user_ty: None,\n                     literal: ty::Const::zero_sized(this.tcx, this.tcx.types.unit).into(),\n-                })))\n+                }))))\n             }\n             ExprKind::Yield { .. }\n             | ExprKind::Literal { .. }\n@@ -327,7 +329,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 block,\n                 source_info,\n                 result_value,\n-                Rvalue::CheckedBinaryOp(op, box (lhs.to_copy(), rhs.to_copy())),\n+                Rvalue::CheckedBinaryOp(op, Box::new((lhs.to_copy(), rhs.to_copy()))),\n             );\n             let val_fld = Field::new(0);\n             let of_fld = Field::new(1);\n@@ -360,7 +362,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     block,\n                     source_info,\n                     is_zero,\n-                    Rvalue::BinaryOp(BinOp::Eq, box (rhs.to_copy(), zero)),\n+                    Rvalue::BinaryOp(BinOp::Eq, Box::new((rhs.to_copy(), zero))),\n                 );\n \n                 block = self.assert(block, Operand::Move(is_zero), false, zero_err, span);\n@@ -381,13 +383,13 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         block,\n                         source_info,\n                         is_neg_1,\n-                        Rvalue::BinaryOp(BinOp::Eq, box (rhs.to_copy(), neg_1)),\n+                        Rvalue::BinaryOp(BinOp::Eq, Box::new((rhs.to_copy(), neg_1))),\n                     );\n                     self.cfg.push_assign(\n                         block,\n                         source_info,\n                         is_min,\n-                        Rvalue::BinaryOp(BinOp::Eq, box (lhs.to_copy(), min)),\n+                        Rvalue::BinaryOp(BinOp::Eq, Box::new((lhs.to_copy(), min))),\n                     );\n \n                     let is_neg_1 = Operand::Move(is_neg_1);\n@@ -396,14 +398,14 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         block,\n                         source_info,\n                         of,\n-                        Rvalue::BinaryOp(BinOp::BitAnd, box (is_neg_1, is_min)),\n+                        Rvalue::BinaryOp(BinOp::BitAnd, Box::new((is_neg_1, is_min))),\n                     );\n \n                     block = self.assert(block, Operand::Move(of), false, overflow_err, span);\n                 }\n             }\n \n-            block.and(Rvalue::BinaryOp(op, box (lhs, rhs)))\n+            block.and(Rvalue::BinaryOp(op, Box::new((lhs, rhs))))\n         }\n     }\n "}, {"sha": "32373f1bef7b39aa09f6c33afeac5353a063ff2c", "filename": "compiler/rustc_mir_build/src/build/expr/as_temp.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b0b7ef812d38b0ef2f5e69bea29cfd061141e2f/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_temp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b0b7ef812d38b0ef2f5e69bea29cfd061141e2f/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_temp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_temp.rs?ref=8b0b7ef812d38b0ef2f5e69bea29cfd061141e2f", "patch": "@@ -62,16 +62,16 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     assert!(!this.tcx.is_thread_local_static(def_id));\n                     local_decl.internal = true;\n                     local_decl.local_info =\n-                        Some(box LocalInfo::StaticRef { def_id, is_thread_local: false });\n+                        Some(Box::new(LocalInfo::StaticRef { def_id, is_thread_local: false }));\n                 }\n                 ExprKind::ThreadLocalRef(def_id) => {\n                     assert!(this.tcx.is_thread_local_static(def_id));\n                     local_decl.internal = true;\n                     local_decl.local_info =\n-                        Some(box LocalInfo::StaticRef { def_id, is_thread_local: true });\n+                        Some(Box::new(LocalInfo::StaticRef { def_id, is_thread_local: true }));\n                 }\n                 ExprKind::Literal { const_id: Some(def_id), .. } => {\n-                    local_decl.local_info = Some(box LocalInfo::ConstRef { def_id });\n+                    local_decl.local_info = Some(Box::new(LocalInfo::ConstRef { def_id }));\n                 }\n                 _ => {}\n             }"}, {"sha": "b2e03f13479075b3324e660a51a26a470e69520c", "filename": "compiler/rustc_mir_build/src/build/expr/into.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8b0b7ef812d38b0ef2f5e69bea29cfd061141e2f/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b0b7ef812d38b0ef2f5e69bea29cfd061141e2f/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs?ref=8b0b7ef812d38b0ef2f5e69bea29cfd061141e2f", "patch": "@@ -346,13 +346,13 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         inferred_ty,\n                     })\n                 });\n-                let adt = box AggregateKind::Adt(\n+                let adt = Box::new(AggregateKind::Adt(\n                     adt_def,\n                     variant_index,\n                     substs,\n                     user_ty,\n                     active_field_index,\n-                );\n+                ));\n                 this.cfg.push_assign(\n                     block,\n                     source_info,\n@@ -403,11 +403,15 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         }\n                         thir::InlineAsmOperand::Const { value, span } => {\n                             mir::InlineAsmOperand::Const {\n-                                value: box Constant { span, user_ty: None, literal: value.into() },\n+                                value: Box::new(Constant {\n+                                    span,\n+                                    user_ty: None,\n+                                    literal: value.into(),\n+                                }),\n                             }\n                         }\n                         thir::InlineAsmOperand::SymFn { expr } => mir::InlineAsmOperand::SymFn {\n-                            value: box this.as_constant(&this.thir[expr]),\n+                            value: Box::new(this.as_constant(&this.thir[expr])),\n                         },\n                         thir::InlineAsmOperand::SymStatic { def_id } => {\n                             mir::InlineAsmOperand::SymStatic { def_id }"}, {"sha": "4245535450a27490e5de6fdaab206435b732ae3a", "filename": "compiler/rustc_mir_build/src/build/expr/stmt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b0b7ef812d38b0ef2f5e69bea29cfd061141e2f/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b0b7ef812d38b0ef2f5e69bea29cfd061141e2f/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fstmt.rs?ref=8b0b7ef812d38b0ef2f5e69bea29cfd061141e2f", "patch": "@@ -123,11 +123,11 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     block,\n                     Statement {\n                         source_info,\n-                        kind: StatementKind::LlvmInlineAsm(box LlvmInlineAsm {\n+                        kind: StatementKind::LlvmInlineAsm(Box::new(LlvmInlineAsm {\n                             asm: asm.clone(),\n                             outputs,\n                             inputs,\n-                        }),\n+                        })),\n                     },\n                 );\n                 this.block_context.pop();"}, {"sha": "6e16ee94c50e04b78538f96ea1f4f3ca68d7804e", "filename": "compiler/rustc_mir_build/src/build/matches/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8b0b7ef812d38b0ef2f5e69bea29cfd061141e2f/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b0b7ef812d38b0ef2f5e69bea29cfd061141e2f/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs?ref=8b0b7ef812d38b0ef2f5e69bea29cfd061141e2f", "patch": "@@ -494,7 +494,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     Statement {\n                         source_info: ty_source_info,\n                         kind: StatementKind::AscribeUserType(\n-                            box (place, user_ty),\n+                            Box::new((place, user_ty)),\n                             // We always use invariant as the variance here. This is because the\n                             // variance field from the ascription refers to the variance to use\n                             // when applying the type to the value being matched, but this\n@@ -2004,7 +2004,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 Statement {\n                     source_info,\n                     kind: StatementKind::AscribeUserType(\n-                        box (ascription.source, user_ty),\n+                        Box::new((ascription.source, user_ty)),\n                         ascription.variance,\n                     ),\n                 },\n@@ -2133,11 +2133,11 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         let local = LocalDecl::<'tcx> {\n             mutability,\n             ty: var_ty,\n-            user_ty: if user_ty.is_empty() { None } else { Some(box user_ty) },\n+            user_ty: if user_ty.is_empty() { None } else { Some(Box::new(user_ty)) },\n             source_info,\n             internal: false,\n             is_block_tail: None,\n-            local_info: Some(box LocalInfo::User(ClearCrossCrate::Set(BindingForm::Var(\n+            local_info: Some(Box::new(LocalInfo::User(ClearCrossCrate::Set(BindingForm::Var(\n                 VarBindingForm {\n                     binding_mode,\n                     // hypothetically, `visit_primary_bindings` could try to unzip\n@@ -2148,7 +2148,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     opt_match_place,\n                     pat_span,\n                 },\n-            )))),\n+            ))))),\n         };\n         let for_arm_body = self.local_decls.push(local);\n         self.var_debug_info.push(VarDebugInfo {\n@@ -2166,9 +2166,9 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 source_info,\n                 internal: false,\n                 is_block_tail: None,\n-                local_info: Some(box LocalInfo::User(ClearCrossCrate::Set(\n+                local_info: Some(Box::new(LocalInfo::User(ClearCrossCrate::Set(\n                     BindingForm::RefForGuard,\n-                ))),\n+                )))),\n             });\n             self.var_debug_info.push(VarDebugInfo {\n                 name,"}, {"sha": "42d062c93e9d2e79763f80a3293f86f97b700845", "filename": "compiler/rustc_mir_build/src/build/matches/test.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8b0b7ef812d38b0ef2f5e69bea29cfd061141e2f/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b0b7ef812d38b0ef2f5e69bea29cfd061141e2f/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs?ref=8b0b7ef812d38b0ef2f5e69bea29cfd061141e2f", "patch": "@@ -346,7 +346,12 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         let result = self.temp(bool_ty, source_info.span);\n \n         // result = op(left, right)\n-        self.cfg.push_assign(block, source_info, result, Rvalue::BinaryOp(op, box (left, right)));\n+        self.cfg.push_assign(\n+            block,\n+            source_info,\n+            result,\n+            Rvalue::BinaryOp(op, Box::new((left, right))),\n+        );\n \n         // branch based on result\n         self.cfg.terminate(\n@@ -429,7 +434,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             block,\n             source_info,\n             TerminatorKind::Call {\n-                func: Operand::Constant(box Constant {\n+                func: Operand::Constant(Box::new(Constant {\n                     span: source_info.span,\n \n                     // FIXME(#54571): This constant comes from user input (a\n@@ -439,7 +444,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     user_ty: None,\n \n                     literal: method.into(),\n-                }),\n+                })),\n                 args: vec![val, expect],\n                 destination: Some((eq_result, eq_block)),\n                 cleanup: None,"}, {"sha": "78047daf0ad00f52770da2254b4d0645c503f4a1", "filename": "compiler/rustc_mir_build/src/build/misc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b0b7ef812d38b0ef2f5e69bea29cfd061141e2f/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b0b7ef812d38b0ef2f5e69bea29cfd061141e2f/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmisc.rs?ref=8b0b7ef812d38b0ef2f5e69bea29cfd061141e2f", "patch": "@@ -31,7 +31,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         literal: &'tcx ty::Const<'tcx>,\n     ) -> Operand<'tcx> {\n         let literal = literal.into();\n-        let constant = box Constant { span, user_ty: None, literal };\n+        let constant = Box::new(Constant { span, user_ty: None, literal });\n         Operand::Constant(constant)\n     }\n "}, {"sha": "988cc6254229b38e73f645bfcc04afc19af167c4", "filename": "compiler/rustc_mir_build/src/build/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8b0b7ef812d38b0ef2f5e69bea29cfd061141e2f/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b0b7ef812d38b0ef2f5e69bea29cfd061141e2f/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs?ref=8b0b7ef812d38b0ef2f5e69bea29cfd061141e2f", "patch": "@@ -980,19 +980,19 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         self.local_decls[local].mutability = mutability;\n                         self.local_decls[local].source_info.scope = self.source_scope;\n                         self.local_decls[local].local_info = if let Some(kind) = self_binding {\n-                            Some(box LocalInfo::User(ClearCrossCrate::Set(\n+                            Some(Box::new(LocalInfo::User(ClearCrossCrate::Set(\n                                 BindingForm::ImplicitSelf(*kind),\n-                            )))\n+                            ))))\n                         } else {\n                             let binding_mode = ty::BindingMode::BindByValue(mutability);\n-                            Some(box LocalInfo::User(ClearCrossCrate::Set(BindingForm::Var(\n+                            Some(Box::new(LocalInfo::User(ClearCrossCrate::Set(BindingForm::Var(\n                                 VarBindingForm {\n                                     binding_mode,\n                                     opt_ty_info,\n                                     opt_match_place: Some((Some(place), span)),\n                                     pat_span: span,\n                                 },\n-                            ))))\n+                            )))))\n                         };\n                         self.var_indices.insert(var, LocalsForNode::One(local));\n                     }"}, {"sha": "02023c48a6c98d0371666340c32fff6bb2d1c21a", "filename": "compiler/rustc_mir_build/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8b0b7ef812d38b0ef2f5e69bea29cfd061141e2f/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b0b7ef812d38b0ef2f5e69bea29cfd061141e2f/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs?ref=8b0b7ef812d38b0ef2f5e69bea29cfd061141e2f", "patch": "@@ -2,7 +2,6 @@\n //!\n //! This crate also contains the match exhaustiveness and usefulness checking.\n #![feature(box_patterns)]\n-#![feature(box_syntax)]\n #![feature(control_flow_enum)]\n #![feature(crate_visibility_modifier)]\n #![feature(bool_to_option)]"}, {"sha": "6bbf1faf4837fc2b03c0a68788484e8b2830dc62", "filename": "compiler/rustc_mir_build/src/thir/cx/expr.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8b0b7ef812d38b0ef2f5e69bea29cfd061141e2f/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b0b7ef812d38b0ef2f5e69bea29cfd061141e2f/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs?ref=8b0b7ef812d38b0ef2f5e69bea29cfd061141e2f", "patch": "@@ -132,7 +132,7 @@ impl<'tcx> Cx<'tcx> {\n                     },\n                 };\n \n-                let expr = box [self.thir.exprs.push(expr)];\n+                let expr = Box::new([self.thir.exprs.push(expr)]);\n \n                 self.overloaded_place(hir_expr, adjustment.target, Some(call), expr, deref.span)\n             }\n@@ -190,7 +190,7 @@ impl<'tcx> Cx<'tcx> {\n                     ExprKind::Call {\n                         ty: method.ty,\n                         fun: self.thir.exprs.push(method),\n-                        args: box [self.mirror_expr(fun), tupled_args],\n+                        args: Box::new([self.mirror_expr(fun), tupled_args]),\n                         from_hir_call: true,\n                         fn_span: expr.span,\n                     }\n@@ -266,7 +266,7 @@ impl<'tcx> Cx<'tcx> {\n                 if self.typeck_results().is_method_call(expr) {\n                     let lhs = self.mirror_expr(lhs);\n                     let rhs = self.mirror_expr(rhs);\n-                    self.overloaded_operator(expr, box [lhs, rhs])\n+                    self.overloaded_operator(expr, Box::new([lhs, rhs]))\n                 } else {\n                     ExprKind::AssignOp {\n                         op: bin_op(op.node),\n@@ -286,7 +286,7 @@ impl<'tcx> Cx<'tcx> {\n                 if self.typeck_results().is_method_call(expr) {\n                     let lhs = self.mirror_expr(lhs);\n                     let rhs = self.mirror_expr(rhs);\n-                    self.overloaded_operator(expr, box [lhs, rhs])\n+                    self.overloaded_operator(expr, Box::new([lhs, rhs]))\n                 } else {\n                     // FIXME overflow\n                     match op.node {\n@@ -317,7 +317,7 @@ impl<'tcx> Cx<'tcx> {\n                 if self.typeck_results().is_method_call(expr) {\n                     let lhs = self.mirror_expr(lhs);\n                     let index = self.mirror_expr(index);\n-                    self.overloaded_place(expr, expr_ty, None, box [lhs, index], expr.span)\n+                    self.overloaded_place(expr, expr_ty, None, Box::new([lhs, index]), expr.span)\n                 } else {\n                     ExprKind::Index { lhs: self.mirror_expr(lhs), index: self.mirror_expr(index) }\n                 }\n@@ -326,7 +326,7 @@ impl<'tcx> Cx<'tcx> {\n             hir::ExprKind::Unary(hir::UnOp::Deref, ref arg) => {\n                 if self.typeck_results().is_method_call(expr) {\n                     let arg = self.mirror_expr(arg);\n-                    self.overloaded_place(expr, expr_ty, None, box [arg], expr.span)\n+                    self.overloaded_place(expr, expr_ty, None, Box::new([arg]), expr.span)\n                 } else {\n                     ExprKind::Deref { arg: self.mirror_expr(arg) }\n                 }\n@@ -335,7 +335,7 @@ impl<'tcx> Cx<'tcx> {\n             hir::ExprKind::Unary(hir::UnOp::Not, ref arg) => {\n                 if self.typeck_results().is_method_call(expr) {\n                     let arg = self.mirror_expr(arg);\n-                    self.overloaded_operator(expr, box [arg])\n+                    self.overloaded_operator(expr, Box::new([arg]))\n                 } else {\n                     ExprKind::Unary { op: UnOp::Not, arg: self.mirror_expr(arg) }\n                 }\n@@ -344,7 +344,7 @@ impl<'tcx> Cx<'tcx> {\n             hir::ExprKind::Unary(hir::UnOp::Neg, ref arg) => {\n                 if self.typeck_results().is_method_call(expr) {\n                     let arg = self.mirror_expr(arg);\n-                    self.overloaded_operator(expr, box [arg])\n+                    self.overloaded_operator(expr, Box::new([arg]))\n                 } else if let hir::ExprKind::Lit(ref lit) = arg.kind {\n                     ExprKind::Literal {\n                         literal: self.const_eval_literal(&lit.node, expr_ty, lit.span, true),\n@@ -914,7 +914,7 @@ impl<'tcx> Cx<'tcx> {\n                         variant_index: adt_def.variant_index_with_ctor_id(def_id),\n                         substs,\n                         user_ty: user_provided_type,\n-                        fields: box [],\n+                        fields: Box::new([]),\n                         base: None,\n                     })),\n                     _ => bug!(\"unexpected ty: {:?}\", ty),"}, {"sha": "5221ced1078b37ec5752b11f70d55f5e8a868d3e", "filename": "compiler/rustc_mir_build/src/thir/pattern/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b0b7ef812d38b0ef2f5e69bea29cfd061141e2f/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b0b7ef812d38b0ef2f5e69bea29cfd061141e2f/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs?ref=8b0b7ef812d38b0ef2f5e69bea29cfd061141e2f", "patch": "@@ -600,7 +600,7 @@ crate trait PatternFolder<'tcx>: Sized {\n impl<'tcx, T: PatternFoldable<'tcx>> PatternFoldable<'tcx> for Box<T> {\n     fn super_fold_with<F: PatternFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         let content: T = (**self).fold_with(folder);\n-        box content\n+        Box::new(content)\n     }\n }\n "}]}