{"sha": "e7e1a52f63433c4e5d37836104b8080b3ad4e8c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3ZTFhNTJmNjM0MzNjNGU1ZDM3ODM2MTA0YjgwODBiM2FkNGU4Yzc=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-11-08T13:31:12Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-11-08T13:31:12Z"}, "message": "Refactor code so that block_context observations has nicely named (and documented) methods.", "tree": {"sha": "88491952325e56594074439bd3180d407c7174b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/88491952325e56594074439bd3180d407c7174b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e7e1a52f63433c4e5d37836104b8080b3ad4e8c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e7e1a52f63433c4e5d37836104b8080b3ad4e8c7", "html_url": "https://github.com/rust-lang/rust/commit/e7e1a52f63433c4e5d37836104b8080b3ad4e8c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e7e1a52f63433c4e5d37836104b8080b3ad4e8c7/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "556f583587ce87bfaa5e1fd27bc89d8fdfe84339", "url": "https://api.github.com/repos/rust-lang/rust/commits/556f583587ce87bfaa5e1fd27bc89d8fdfe84339", "html_url": "https://github.com/rust-lang/rust/commit/556f583587ce87bfaa5e1fd27bc89d8fdfe84339"}], "stats": {"total": 84, "additions": 58, "deletions": 26}, "files": [{"sha": "2ef71617b7cb615fd771ed42284d31f37b4f193e", "filename": "src/librustc_mir/build/block.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e7e1a52f63433c4e5d37836104b8080b3ad4e8c7/src%2Flibrustc_mir%2Fbuild%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e1a52f63433c4e5d37836104b8080b3ad4e8c7/src%2Flibrustc_mir%2Fbuild%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fblock.rs?ref=e7e1a52f63433c4e5d37836104b8080b3ad4e8c7", "patch": "@@ -177,17 +177,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         let destination_ty = destination.ty(&this.local_decls, tcx).to_ty(tcx);\n         if let Some(expr) = expr {\n             let tail_result_is_ignored = destination_ty.is_unit() ||\n-                match this.block_context.last() {\n-                    // no context: conservatively assume result is read\n-                    None => false,\n-\n-                    // sub-expression: block result feeds into some computation\n-                    Some(BlockFrame::SubExpr) => false,\n-\n-                    // otherwise: use accumualated is_ignored state.\n-                    Some(BlockFrame::TailExpr { tail_result_is_ignored: ignored }) |\n-                    Some(BlockFrame::Statement { ignores_expr_result: ignored }) => *ignored,\n-                };\n+                this.block_context.currently_ignores_tail_results();\n             this.block_context.push(BlockFrame::TailExpr { tail_result_is_ignored });\n \n             unpack!(block = this.into(destination, block, expr));"}, {"sha": "8f50a1e9a21b9093c746cc71d46c308450c14684", "filename": "src/librustc_mir/build/expr/as_temp.rs", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e7e1a52f63433c4e5d37836104b8080b3ad4e8c7/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_temp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e1a52f63433c4e5d37836104b8080b3ad4e8c7/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_temp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_temp.rs?ref=e7e1a52f63433c4e5d37836104b8080b3ad4e8c7", "patch": "@@ -10,7 +10,7 @@\n \n //! See docs in build/expr/mod.rs\n \n-use build::{BlockAnd, BlockAndExtension, BlockFrame, Builder};\n+use build::{BlockAnd, BlockAndExtension, Builder};\n use hair::*;\n use rustc::middle::region;\n use rustc::mir::*;\n@@ -68,19 +68,9 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             debug!(\"creating temp {:?} with block_context: {:?}\", local_decl, this.block_context);\n             // Find out whether this temp is being created within the\n             // tail expression of a block whose result is ignored.\n-            for bf in this.block_context.iter().rev() {\n-                match bf {\n-                    BlockFrame::SubExpr => continue,\n-                    BlockFrame::Statement { .. } => break,\n-                    &BlockFrame::TailExpr { tail_result_is_ignored } => {\n-                        local_decl = local_decl.block_tail(BlockTailInfo {\n-                            tail_result_is_ignored\n-                        });\n-                        break;\n-                    }\n-                }\n+            if let Some(tail_info) = this.block_context.currently_in_block_tail() {\n+                local_decl = local_decl.block_tail(tail_info);\n             }\n-\n             this.local_decls.push(local_decl)\n         };\n         if !expr_ty.is_never() {"}, {"sha": "a01f8940a948aedebc02717ad1cfa26f216d7ba0", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 54, "deletions": 2, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/e7e1a52f63433c4e5d37836104b8080b3ad4e8c7/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e1a52f63433c4e5d37836104b8080b3ad4e8c7/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=e7e1a52f63433c4e5d37836104b8080b3ad4e8c7", "patch": "@@ -336,6 +336,9 @@ impl BlockFrame {\n     }\n  }\n \n+#[derive(Debug)]\n+struct BlockContext(Vec<BlockFrame>);\n+\n struct Builder<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     hir: Cx<'a, 'gcx, 'tcx>,\n     cfg: CFG<'tcx>,\n@@ -359,7 +362,7 @@ struct Builder<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     /// start just throwing new entries onto that vector in order to\n     /// distinguish the context of EXPR1 from the context of EXPR2 in\n     /// `{ STMTS; EXPR1 } + EXPR2`\n-    block_context: Vec<BlockFrame>,\n+    block_context: BlockContext,\n \n     /// The current unsafe block in scope, even if it is hidden by\n     /// a PushUnsafeBlock\n@@ -409,6 +412,55 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n     }\n }\n \n+impl BlockContext {\n+    fn new() -> Self { BlockContext(vec![]) }\n+    fn push(&mut self, bf: BlockFrame) { self.0.push(bf); }\n+    fn pop(&mut self) -> Option<BlockFrame> { self.0.pop() }\n+\n+    /// Traverses the frames on the BlockContext, searching for either\n+    /// the first block-tail expression frame with no intervening\n+    /// statement frame.\n+    ///\n+    /// Notably, this skips over `SubExpr` frames; this method is\n+    /// meant to be used in the context of understanding the\n+    /// relationship of a temp (created within some complicated\n+    /// expression) with its containing expression, and whether the\n+    /// value of that *containing expression* (not the temp!) is\n+    /// ignored.\n+    fn currently_in_block_tail(&self) -> Option<BlockTailInfo> {\n+        for bf in self.0.iter().rev() {\n+            match bf {\n+                BlockFrame::SubExpr => continue,\n+                BlockFrame::Statement { .. } => break,\n+                &BlockFrame::TailExpr { tail_result_is_ignored } =>\n+                    return Some(BlockTailInfo { tail_result_is_ignored })\n+            }\n+        }\n+\n+        return None;\n+    }\n+\n+    /// Looks at the topmost frame on the BlockContext and reports\n+    /// whether its one that would discard a block tail result.\n+    ///\n+    /// Unlike `currently_within_ignored_tail_expression`, this does\n+    /// *not* skip over `SubExpr` frames: here, we want to know\n+    /// whether the block result itself is discarded.\n+    fn currently_ignores_tail_results(&self) -> bool {\n+        match self.0.last() {\n+            // no context: conservatively assume result is read\n+            None => false,\n+\n+            // sub-expression: block result feeds into some computation\n+            Some(BlockFrame::SubExpr) => false,\n+\n+            // otherwise: use accumulated is_ignored state.\n+            Some(BlockFrame::TailExpr { tail_result_is_ignored: ignored }) |\n+            Some(BlockFrame::Statement { ignores_expr_result: ignored }) => *ignored,\n+        }\n+    }\n+}\n+\n #[derive(Debug)]\n enum LocalsForNode {\n     /// In the usual case, a node-id for an identifier maps to at most\n@@ -764,7 +816,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             fn_span: span,\n             arg_count,\n             scopes: vec![],\n-            block_context: vec![],\n+            block_context: BlockContext::new(),\n             source_scopes: IndexVec::new(),\n             source_scope: OUTERMOST_SOURCE_SCOPE,\n             source_scope_local_data: IndexVec::new(),"}]}