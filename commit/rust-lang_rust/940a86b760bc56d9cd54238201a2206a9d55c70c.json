{"sha": "940a86b760bc56d9cd54238201a2206a9d55c70c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0MGE4NmI3NjBiYzU2ZDljZDU0MjM4MjAxYTIyMDZhOWQ1NWM3MGM=", "commit": {"author": {"name": "Lindsey Kuper", "email": "lindsey@composition.al", "date": "2013-09-14T05:10:48Z"}, "committer": {"name": "Lindsey Kuper", "email": "lindsey@composition.al", "date": "2013-09-14T06:00:04Z"}, "message": "Get rid of unused SimpleVisitor stuff.", "tree": {"sha": "fdf54b137d8ad82ed39e9a694404682b42c6f938", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fdf54b137d8ad82ed39e9a694404682b42c6f938"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/940a86b760bc56d9cd54238201a2206a9d55c70c", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/940a86b760bc56d9cd54238201a2206a9d55c70c", "html_url": "https://github.com/rust-lang/rust/commit/940a86b760bc56d9cd54238201a2206a9d55c70c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/940a86b760bc56d9cd54238201a2206a9d55c70c/comments", "author": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52b9688f923f8fb5bd6547bc6f2dd2d340c4ee4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/52b9688f923f8fb5bd6547bc6f2dd2d340c4ee4d", "html_url": "https://github.com/rust-lang/rust/commit/52b9688f923f8fb5bd6547bc6f2dd2d340c4ee4d"}], "stats": {"total": 147, "additions": 3, "deletions": 144}, "files": [{"sha": "bfeb4175b99573daa3b1c0fe3edfb8dc4dd1a119", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/940a86b760bc56d9cd54238201a2206a9d55c70c/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/940a86b760bc56d9cd54238201a2206a9d55c70c/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=940a86b760bc56d9cd54238201a2206a9d55c70c", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -15,7 +15,7 @@ use codemap::{Span, dummy_sp};\n use fold;\n use opt_vec;\n use parse::token;\n-use visit::{SimpleVisitor, Visitor};\n+use visit::Visitor;\n use visit;\n \n use std::hashmap::HashMap;"}, {"sha": "8d7176117609204e921c3976f2ea5d9da001a308", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 1, "deletions": 142, "changes": 143, "blob_url": "https://github.com/rust-lang/rust/blob/940a86b760bc56d9cd54238201a2206a9d55c70c/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/940a86b760bc56d9cd54238201a2206a9d55c70c/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=940a86b760bc56d9cd54238201a2206a9d55c70c", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -668,144 +668,3 @@ pub fn walk_arm<E:Clone, V:Visitor<E>>(visitor: &mut V, arm: &Arm, env: E) {\n     walk_expr_opt(visitor, arm.guard, env.clone());\n     visitor.visit_block(&arm.body, env)\n }\n-\n-// Simpler, non-context passing interface. Always walks the whole tree, simply\n-// calls the given functions on the nodes.\n-\n-pub trait SimpleVisitor {\n-    fn visit_mod(&mut self, &_mod, Span, NodeId);\n-    fn visit_view_item(&mut self, &view_item);\n-    fn visit_foreign_item(&mut self, @foreign_item);\n-    fn visit_item(&mut self, @item);\n-    fn visit_local(&mut self, @Local);\n-    fn visit_block(&mut self, &Block);\n-    fn visit_stmt(&mut self, @Stmt);\n-    fn visit_arm(&mut self, &Arm);\n-    fn visit_pat(&mut self, @Pat);\n-    fn visit_decl(&mut self, @Decl);\n-    fn visit_expr(&mut self, @Expr);\n-    fn visit_expr_post(&mut self, @Expr);\n-    fn visit_ty(&mut self, &Ty);\n-    fn visit_generics(&mut self, &Generics);\n-    fn visit_fn(&mut self, &fn_kind, &fn_decl, &Block, Span, NodeId);\n-    fn visit_ty_method(&mut self, &TypeMethod);\n-    fn visit_trait_method(&mut self, &trait_method);\n-    fn visit_struct_def(&mut self, @struct_def, Ident, &Generics, NodeId);\n-    fn visit_struct_field(&mut self, @struct_field);\n-    fn visit_struct_method(&mut self, @method);\n-}\n-\n-pub struct SimpleVisitorVisitor {\n-    simple_visitor: @mut SimpleVisitor,\n-}\n-\n-impl Visitor<()> for SimpleVisitorVisitor {\n-    fn visit_mod(&mut self,\n-                 module: &_mod,\n-                 span: Span,\n-                 node_id: NodeId,\n-                 env: ()) {\n-        self.simple_visitor.visit_mod(module, span, node_id);\n-        walk_mod(self, module, env)\n-    }\n-    fn visit_view_item(&mut self, view_item: &view_item, env: ()) {\n-        self.simple_visitor.visit_view_item(view_item);\n-        walk_view_item(self, view_item, env)\n-    }\n-    fn visit_foreign_item(&mut self, foreign_item: @foreign_item, env: ()) {\n-        self.simple_visitor.visit_foreign_item(foreign_item);\n-        walk_foreign_item(self, foreign_item, env)\n-    }\n-    fn visit_item(&mut self, item: @item, env: ()) {\n-        self.simple_visitor.visit_item(item);\n-        walk_item(self, item, env)\n-    }\n-    fn visit_local(&mut self, local: @Local, env: ()) {\n-        self.simple_visitor.visit_local(local);\n-        walk_local(self, local, env)\n-    }\n-    fn visit_block(&mut self, block: &Block, env: ()) {\n-        self.simple_visitor.visit_block(block);\n-        walk_block(self, block, env)\n-    }\n-    fn visit_stmt(&mut self, statement: @Stmt, env: ()) {\n-        self.simple_visitor.visit_stmt(statement);\n-        walk_stmt(self, statement, env)\n-    }\n-    fn visit_arm(&mut self, arm: &Arm, env: ()) {\n-        self.simple_visitor.visit_arm(arm);\n-        walk_arm(self, arm, env)\n-    }\n-    fn visit_pat(&mut self, pattern: @Pat, env: ()) {\n-        self.simple_visitor.visit_pat(pattern);\n-        walk_pat(self, pattern, env)\n-    }\n-    fn visit_decl(&mut self, declaration: @Decl, env: ()) {\n-        self.simple_visitor.visit_decl(declaration);\n-        walk_decl(self, declaration, env)\n-    }\n-    fn visit_expr(&mut self, expression: @Expr, env: ()) {\n-        self.simple_visitor.visit_expr(expression);\n-        walk_expr(self, expression, env)\n-    }\n-    fn visit_expr_post(&mut self, expression: @Expr, _: ()) {\n-        self.simple_visitor.visit_expr_post(expression)\n-    }\n-    fn visit_ty(&mut self, typ: &Ty, env: ()) {\n-        self.simple_visitor.visit_ty(typ);\n-        walk_ty(self, typ, env)\n-    }\n-    fn visit_generics(&mut self, generics: &Generics, env: ()) {\n-        self.simple_visitor.visit_generics(generics);\n-        walk_generics(self, generics, env)\n-    }\n-    fn visit_fn(&mut self,\n-                function_kind: &fn_kind,\n-                function_declaration: &fn_decl,\n-                block: &Block,\n-                span: Span,\n-                node_id: NodeId,\n-                env: ()) {\n-        self.simple_visitor.visit_fn(function_kind,\n-                                     function_declaration,\n-                                     block,\n-                                     span,\n-                                     node_id);\n-        walk_fn(self,\n-                 function_kind,\n-                 function_declaration,\n-                 block,\n-                 span,\n-                 node_id,\n-                 env)\n-    }\n-    fn visit_ty_method(&mut self, method_type: &TypeMethod, env: ()) {\n-        self.simple_visitor.visit_ty_method(method_type);\n-        walk_ty_method(self, method_type, env)\n-    }\n-    fn visit_trait_method(&mut self, trait_method: &trait_method, env: ()) {\n-        self.simple_visitor.visit_trait_method(trait_method);\n-        walk_trait_method(self, trait_method, env)\n-    }\n-    fn visit_struct_def(&mut self,\n-                        struct_definition: @struct_def,\n-                        identifier: Ident,\n-                        generics: &Generics,\n-                        node_id: NodeId,\n-                        env: ()) {\n-        self.simple_visitor.visit_struct_def(struct_definition,\n-                                             identifier,\n-                                             generics,\n-                                             node_id);\n-        walk_struct_def(self,\n-                         struct_definition,\n-                         identifier,\n-                         generics,\n-                         node_id,\n-                         env)\n-    }\n-    fn visit_struct_field(&mut self, struct_field: @struct_field, env: ()) {\n-        self.simple_visitor.visit_struct_field(struct_field);\n-        walk_struct_field(self, struct_field, env)\n-    }\n-}"}]}