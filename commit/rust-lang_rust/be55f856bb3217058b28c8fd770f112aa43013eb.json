{"sha": "be55f856bb3217058b28c8fd770f112aa43013eb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlNTVmODU2YmIzMjE3MDU4YjI4YzhmZDc3MGYxMTJhYTQzMDEzZWI=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-07-11T12:53:48Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-07-11T12:53:48Z"}, "message": "Update tests", "tree": {"sha": "65c7210d9e42eb6c590de505b8401aaac2d98602", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/65c7210d9e42eb6c590de505b8401aaac2d98602"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be55f856bb3217058b28c8fd770f112aa43013eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be55f856bb3217058b28c8fd770f112aa43013eb", "html_url": "https://github.com/rust-lang/rust/commit/be55f856bb3217058b28c8fd770f112aa43013eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be55f856bb3217058b28c8fd770f112aa43013eb/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e3310a6a18d83016209d758ca2694fa1909f74f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3310a6a18d83016209d758ca2694fa1909f74f3", "html_url": "https://github.com/rust-lang/rust/commit/e3310a6a18d83016209d758ca2694fa1909f74f3"}], "stats": {"total": 96, "additions": 41, "deletions": 55}, "files": [{"sha": "5b68b3748991957a6357499c9f07b17c927a042c", "filename": "tests/target/expr-block.rs", "status": "modified", "additions": 14, "deletions": 18, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/be55f856bb3217058b28c8fd770f112aa43013eb/tests%2Ftarget%2Fexpr-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be55f856bb3217058b28c8fd770f112aa43013eb/tests%2Ftarget%2Fexpr-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fexpr-block.rs?ref=be55f856bb3217058b28c8fd770f112aa43013eb", "patch": "@@ -173,17 +173,15 @@ fn macros() {\n     baz!(one_item_macro_which_is_also_loooooooooooooooooooooooooooooooooooooooooooooooong);\n \n     let _ = match option {\n-        None => {\n-            baz!(\n-                function,\n-                like,\n-                macro_as,\n-                expression,\n-                which,\n-                is,\n-                loooooooooooooooong\n-            )\n-        }\n+        None => baz!(\n+            function,\n+            like,\n+            macro_as,\n+            expression,\n+            which,\n+            is,\n+            loooooooooooooooong\n+        ),\n         Some(p) => baz!(one_item_macro_as_expression_which_is_also_loooooooooooooooong),\n     };\n }\n@@ -318,12 +316,10 @@ fn combine_block() {\n         y => func(\n             xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,\n         ),\n-        _ => {\n-            func(\n-                x,\n-                yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy,\n-                zzz,\n-            )\n-        }\n+        _ => func(\n+            x,\n+            yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy,\n+            zzz,\n+        ),\n     }\n }"}, {"sha": "e0b34dbe03d910b86318bb2b7777044b21856564", "filename": "tests/target/indent_match_arms.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/be55f856bb3217058b28c8fd770f112aa43013eb/tests%2Ftarget%2Findent_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be55f856bb3217058b28c8fd770f112aa43013eb/tests%2Ftarget%2Findent_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Findent_match_arms.rs?ref=be55f856bb3217058b28c8fd770f112aa43013eb", "patch": "@@ -15,14 +15,12 @@ fn main() {\n     2 => \"two\",\n     3 => \"three\",\n     4 => \"four\",\n-    5 => {\n-        match y {\n-        'a' => 'A',\n-        'b' => 'B',\n-        'c' => 'C',\n-        _ => \"Nope\",\n-        }\n-    }\n+    5 => match y {\n+    'a' => 'A',\n+    'b' => 'B',\n+    'c' => 'C',\n+    _ => \"Nope\",\n+    },\n     _ => \"something else\",\n     }\n "}, {"sha": "2cf65509c931d9245ac3f1d58e03b9fbc7d86772", "filename": "tests/target/issue-1350.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/be55f856bb3217058b28c8fd770f112aa43013eb/tests%2Ftarget%2Fissue-1350.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be55f856bb3217058b28c8fd770f112aa43013eb/tests%2Ftarget%2Fissue-1350.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-1350.rs?ref=be55f856bb3217058b28c8fd770f112aa43013eb", "patch": "@@ -5,12 +5,10 @@ impl Struct {\n     fn fun() {\n         let result = match <R::RequestResult as serde::Deserialize>::deserialize(&json) {\n             Ok(v) => v,\n-            Err(e) => {\n-                match <R::ErrorResult as serde::Deserialize>::deserialize(&json) {\n-                    Ok(v) => return Err(Error::with_json(v)),\n-                    Err(e2) => return Err(Error::with_json(e)),\n-                }\n-            }\n+            Err(e) => match <R::ErrorResult as serde::Deserialize>::deserialize(&json) {\n+                Ok(v) => return Err(Error::with_json(v)),\n+                Err(e2) => return Err(Error::with_json(e)),\n+            },\n         };\n     }\n }"}, {"sha": "433eacb7ac65c6c3d29b04202dc1f1cf0422c563", "filename": "tests/target/match.rs", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/be55f856bb3217058b28c8fd770f112aa43013eb/tests%2Ftarget%2Fmatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be55f856bb3217058b28c8fd770f112aa43013eb/tests%2Ftarget%2Fmatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmatch.rs?ref=be55f856bb3217058b28c8fd770f112aa43013eb", "patch": "@@ -215,14 +215,12 @@ fn issue355() {\n         wc => println![\"a\", b], // comment\n         xc => vec![1, 2], // comment\n         yc => vec![3; 4], // comment\n-        yd => {\n-            looooooooooooooooooooooooooooooooooooooooooooooooooooooooong_func(\n-                aaaaaaaaaa,\n-                bbbbbbbbbb,\n-                cccccccccc,\n-                dddddddddd,\n-            )\n-        }\n+        yd => looooooooooooooooooooooooooooooooooooooooooooooooooooooooong_func(\n+            aaaaaaaaaa,\n+            bbbbbbbbbb,\n+            cccccccccc,\n+            dddddddddd,\n+        ),\n     }\n }\n \n@@ -342,14 +340,12 @@ fn issue1371() {\n         }\n         sfEvtLostFocus => LostFocus,\n         sfEvtGainedFocus => GainedFocus,\n-        sfEvtTextEntered => {\n-            TextEntered {\n-                unicode: unsafe {\n-                    ::std::char::from_u32((*event.text.as_ref()).unicode)\n-                        .expect(\"Invalid unicode encountered on TextEntered event\")\n-                },\n-            }\n-        }\n+        sfEvtTextEntered => TextEntered {\n+            unicode: unsafe {\n+                ::std::char::from_u32((*event.text.as_ref()).unicode)\n+                    .expect(\"Invalid unicode encountered on TextEntered event\")\n+            },\n+        },\n         sfEvtKeyPressed => {\n             let e = unsafe { event.key.as_ref() };\n "}, {"sha": "339873a3f97d04c91d340ad5094581cad02db0fb", "filename": "tests/target/nested-visual-block.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/be55f856bb3217058b28c8fd770f112aa43013eb/tests%2Ftarget%2Fnested-visual-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be55f856bb3217058b28c8fd770f112aa43013eb/tests%2Ftarget%2Fnested-visual-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fnested-visual-block.rs?ref=be55f856bb3217058b28c8fd770f112aa43013eb", "patch": "@@ -19,13 +19,11 @@ fn main() {\n         },\n         |item| {\n             match *item {\n-                StructLitField::Regular(ref field) => {\n-                    rewrite_field(\n-                        inner_context,\n-                        &field,\n-                        &Constraints::new(v_budget.checked_sub(1).unwrap_or(0), indent),\n-                    )\n-                }\n+                StructLitField::Regular(ref field) => rewrite_field(\n+                    inner_context,\n+                    &field,\n+                    &Constraints::new(v_budget.checked_sub(1).unwrap_or(0), indent),\n+                ),\n                 StructLitField::Base(ref expr) => {\n                     // 2 = ..\n                     expr.rewrite("}]}