{"sha": "2939249f294dd54a9ce78a8ee1f2922a44e7fb7c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5MzkyNDlmMjk0ZGQ1NGE5Y2U3OGE4ZWUxZjI5MjJhNDRlN2ZiN2M=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-03T10:42:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-03T10:42:30Z"}, "message": "Auto merge of #87725 - JohnTitor:rollup-2ywcpuk, r=JohnTitor\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #87645 (Properly find owner of closure in THIR unsafeck)\n - #87646 (Fix a parser ICE on invalid `fn` body)\n - #87652 (Validate that naked functions are never inlined)\n - #87685 (Write docs for SyncOnceCell From and Default impl)\n - #87693 (Add `aarch64-apple-ios-sim` as a possible target to the manifest)\n - #87708 (Add convenience method for handling ipv4-mapped addresses by canonicalizing them)\n - #87711 (Correct typo)\n - #87716 (Allow generic SIMD array element type)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "215f7fbbdcd75b81227c37b506c3e4fccbdc7985", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/215f7fbbdcd75b81227c37b506c3e4fccbdc7985"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2939249f294dd54a9ce78a8ee1f2922a44e7fb7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2939249f294dd54a9ce78a8ee1f2922a44e7fb7c", "html_url": "https://github.com/rust-lang/rust/commit/2939249f294dd54a9ce78a8ee1f2922a44e7fb7c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2939249f294dd54a9ce78a8ee1f2922a44e7fb7c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3354a44d2fa8d5ba6b8d6b40d2596de2c8292ec1", "url": "https://api.github.com/repos/rust-lang/rust/commits/3354a44d2fa8d5ba6b8d6b40d2596de2c8292ec1", "html_url": "https://github.com/rust-lang/rust/commit/3354a44d2fa8d5ba6b8d6b40d2596de2c8292ec1"}, {"sha": "331e78d80422ca779c71b19d9273f5d8ee737643", "url": "https://api.github.com/repos/rust-lang/rust/commits/331e78d80422ca779c71b19d9273f5d8ee737643", "html_url": "https://github.com/rust-lang/rust/commit/331e78d80422ca779c71b19d9273f5d8ee737643"}], "stats": {"total": 327, "additions": 299, "deletions": 28}, "files": [{"sha": "b1948ae072be987ef50dac5c86a21c8970500b68", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2939249f294dd54a9ce78a8ee1f2922a44e7fb7c/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2939249f294dd54a9ce78a8ee1f2922a44e7fb7c/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=2939249f294dd54a9ce78a8ee1f2922a44e7fb7c", "patch": "@@ -2720,6 +2720,9 @@ declare_lint! {\n     /// The asm block must not contain any operands other than `const` and\n     /// `sym`. Additionally, naked function should specify a non-Rust ABI.\n     ///\n+    /// Naked functions cannot be inlined. All forms of the `inline` attribute\n+    /// are prohibited.\n+    ///\n     /// While other definitions of naked functions were previously accepted,\n     /// they are unsupported and might not work reliably. This is a\n     /// [future-incompatible] lint that will transition into hard error in"}, {"sha": "d27ce6ec81a90214d190167c3a652f8ab434c574", "filename": "compiler/rustc_mir_build/src/check_unsafety.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2939249f294dd54a9ce78a8ee1f2922a44e7fb7c/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2939249f294dd54a9ce78a8ee1f2922a44e7fb7c/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs?ref=2939249f294dd54a9ce78a8ee1f2922a44e7fb7c", "patch": "@@ -599,13 +599,10 @@ pub fn check_unsafety<'tcx>(tcx: TyCtxt<'tcx>, def: ty::WithOptConstParam<LocalD\n \n     // Closures are handled by their owner, if it has a body\n     if tcx.is_closure(def.did.to_def_id()) {\n-        let owner = tcx.hir().local_def_id_to_hir_id(def.did).owner;\n-        let owner_hir_id = tcx.hir().local_def_id_to_hir_id(owner);\n-\n-        if tcx.hir().maybe_body_owned_by(owner_hir_id).is_some() {\n-            tcx.ensure().thir_check_unsafety(owner);\n-            return;\n-        }\n+        let hir = tcx.hir();\n+        let owner = hir.enclosing_body_owner(hir.local_def_id_to_hir_id(def.did));\n+        tcx.ensure().thir_check_unsafety(hir.local_def_id(owner));\n+        return;\n     }\n \n     let (thir, expr) = tcx.thir_body(def);"}, {"sha": "9fcf2c4d5ec1efc12d2936b00de2541602f6e16f", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2939249f294dd54a9ce78a8ee1f2922a44e7fb7c/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2939249f294dd54a9ce78a8ee1f2922a44e7fb7c/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=2939249f294dd54a9ce78a8ee1f2922a44e7fb7c", "patch": "@@ -1714,13 +1714,11 @@ impl<'a> Parser<'a> {\n                     // the AST for typechecking.\n                     err.span_label(ident.span, \"while parsing this `fn`\");\n                     err.emit();\n-                    (Vec::new(), None)\n                 } else {\n                     return Err(err);\n                 }\n-            } else {\n-                unreachable!()\n             }\n+            (Vec::new(), None)\n         };\n         attrs.extend(inner_attrs);\n         Ok(body)"}, {"sha": "e05ec205b65b89ed78609cc4da9ae96b9cf7495d", "filename": "compiler/rustc_passes/src/naked_functions.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2939249f294dd54a9ce78a8ee1f2922a44e7fb7c/compiler%2Frustc_passes%2Fsrc%2Fnaked_functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2939249f294dd54a9ce78a8ee1f2922a44e7fb7c/compiler%2Frustc_passes%2Fsrc%2Fnaked_functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fnaked_functions.rs?ref=2939249f294dd54a9ce78a8ee1f2922a44e7fb7c", "patch": "@@ -1,6 +1,6 @@\n //! Checks validity of naked functions.\n \n-use rustc_ast::InlineAsmOptions;\n+use rustc_ast::{Attribute, InlineAsmOptions};\n use rustc_hir as hir;\n use rustc_hir::def_id::LocalDefId;\n use rustc_hir::intravisit::{ErasedMap, FnKind, NestedVisitorMap, Visitor};\n@@ -70,10 +70,20 @@ impl<'tcx> Visitor<'tcx> for CheckNakedFunctions<'tcx> {\n             check_no_patterns(self.tcx, body.params);\n             check_no_parameters_use(self.tcx, body);\n             check_asm(self.tcx, hir_id, body, span);\n+            check_inline(self.tcx, hir_id, attrs);\n         }\n     }\n }\n \n+/// Check that the function isn't inlined.\n+fn check_inline(tcx: TyCtxt<'_>, hir_id: HirId, attrs: &[Attribute]) {\n+    for attr in attrs.iter().filter(|attr| attr.has_name(sym::inline)) {\n+        tcx.struct_span_lint_hir(UNSUPPORTED_NAKED_FUNCTIONS, hir_id, attr.span, |lint| {\n+            lint.build(\"naked functions cannot be inlined\").emit();\n+        });\n+    }\n+}\n+\n /// Checks that function uses non-Rust ABI.\n fn check_abi(tcx: TyCtxt<'_>, hir_id: HirId, abi: Abi, fn_ident_span: Span) {\n     if abi == Abi::Rust {"}, {"sha": "ba99e0c03d8e2d4895b2de7787f94892337cfd8a", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2939249f294dd54a9ce78a8ee1f2922a44e7fb7c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2939249f294dd54a9ce78a8ee1f2922a44e7fb7c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=2939249f294dd54a9ce78a8ee1f2922a44e7fb7c", "patch": "@@ -1220,6 +1220,7 @@ pub fn check_simd(tcx: TyCtxt<'_>, sp: Span, def_id: LocalDefId) {\n             match e.kind() {\n                 ty::Param(_) => (), // pass struct<T>(T, T, T, T) through, let monomorphization catch errors\n                 ty::Int(_) | ty::Uint(_) | ty::Float(_) | ty::RawPtr(_) => (), // struct(u8, u8, u8, u8) is ok\n+                ty::Array(t, _) if matches!(t.kind(), ty::Param(_)) => (), // pass struct<T>([T; N]) through, let monomorphization catch errors\n                 ty::Array(t, _clen)\n                     if matches!(\n                         t.kind(),"}, {"sha": "132733a0525106034097eb4889776bdc2b5cf29a", "filename": "library/std/src/lazy.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/2939249f294dd54a9ce78a8ee1f2922a44e7fb7c/library%2Fstd%2Fsrc%2Flazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2939249f294dd54a9ce78a8ee1f2922a44e7fb7c/library%2Fstd%2Fsrc%2Flazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flazy.rs?ref=2939249f294dd54a9ce78a8ee1f2922a44e7fb7c", "patch": "@@ -87,6 +87,19 @@ impl<T: UnwindSafe> UnwindSafe for SyncOnceCell<T> {}\n \n #[unstable(feature = \"once_cell\", issue = \"74465\")]\n impl<T> Default for SyncOnceCell<T> {\n+    /// Creates a new empty cell.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// #![feature(once_cell)]\n+    ///\n+    /// use std::lazy::SyncOnceCell;\n+    ///\n+    /// fn main() {\n+    ///     assert_eq!(SyncOnceCell::<()>::new(), SyncOnceCell::default());\n+    /// }\n+    /// ```\n     fn default() -> SyncOnceCell<T> {\n         SyncOnceCell::new()\n     }\n@@ -118,6 +131,23 @@ impl<T: Clone> Clone for SyncOnceCell<T> {\n \n #[unstable(feature = \"once_cell\", issue = \"74465\")]\n impl<T> From<T> for SyncOnceCell<T> {\n+    /// Create a new cell with its contents set to `value`.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// #![feature(once_cell)]\n+    ///\n+    /// use std::lazy::SyncOnceCell;\n+    ///\n+    /// # fn main() -> Result<(), i32> {\n+    /// let a = SyncOnceCell::from(3);\n+    /// let b = SyncOnceCell::new();\n+    /// b.set(3)?;\n+    /// assert_eq!(a, b);\n+    /// Ok(())\n+    /// # }\n+    /// ```\n     fn from(value: T) -> Self {\n         let cell = Self::new();\n         match cell.set(value) {"}, {"sha": "ac92cfe19cd334a5428b4fb907b8adaed5eb6985", "filename": "library/std/src/net/ip.rs", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/2939249f294dd54a9ce78a8ee1f2922a44e7fb7c/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2939249f294dd54a9ce78a8ee1f2922a44e7fb7c/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fip.rs?ref=2939249f294dd54a9ce78a8ee1f2922a44e7fb7c", "patch": "@@ -379,6 +379,29 @@ impl IpAddr {\n     pub const fn is_ipv6(&self) -> bool {\n         matches!(self, IpAddr::V6(_))\n     }\n+\n+    /// Converts this address to an `IpAddr::V4` if it is a IPv4-mapped IPv6 addresses, otherwise it\n+    /// return `self` as-is.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(ip)]\n+    /// use std::net::{IpAddr, Ipv4Addr, Ipv6Addr};\n+    ///\n+    /// assert_eq!(IpAddr::V4(Ipv4Addr::new(127, 0, 0, 1)).to_canonical().is_loopback(), true);\n+    /// assert_eq!(IpAddr::V6(Ipv6Addr::new(0, 0, 0, 0, 0, 0xffff, 0x7f00, 0x1)).is_loopback(), false);\n+    /// assert_eq!(IpAddr::V6(Ipv6Addr::new(0, 0, 0, 0, 0, 0xffff, 0x7f00, 0x1)).to_canonical().is_loopback(), true);\n+    /// ```\n+    #[inline]\n+    #[rustc_const_unstable(feature = \"const_ip\", issue = \"76205\")]\n+    #[unstable(feature = \"ip\", issue = \"27709\")]\n+    pub const fn to_canonical(&self) -> IpAddr {\n+        match self {\n+            &v4 @ IpAddr::V4(_) => v4,\n+            IpAddr::V6(v6) => v6.to_canonical(),\n+        }\n+    }\n }\n \n impl Ipv4Addr {\n@@ -1598,6 +1621,28 @@ impl Ipv6Addr {\n         }\n     }\n \n+    /// Converts this address to an `IpAddr::V4` if it is a IPv4-mapped addresses, otherwise it\n+    /// returns self wrapped in a `IpAddr::V6`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(ip)]\n+    /// use std::net::Ipv6Addr;\n+    ///\n+    /// assert_eq!(Ipv6Addr::new(0, 0, 0, 0, 0, 0xffff, 0x7f00, 0x1).is_loopback(), false);\n+    /// assert_eq!(Ipv6Addr::new(0, 0, 0, 0, 0, 0xffff, 0x7f00, 0x1).to_canonical().is_loopback(), true);\n+    /// ```\n+    #[inline]\n+    #[rustc_const_unstable(feature = \"const_ipv6\", issue = \"76205\")]\n+    #[unstable(feature = \"ip\", issue = \"27709\")]\n+    pub const fn to_canonical(&self) -> IpAddr {\n+        if let Some(mapped) = self.to_ipv4_mapped() {\n+            return IpAddr::V4(mapped);\n+        }\n+        IpAddr::V6(*self)\n+    }\n+\n     /// Returns the sixteen eight-bit integers the IPv6 address consists of.\n     ///\n     /// ```"}, {"sha": "8ff600d5334fd0f18c772a5007d027c25679da9b", "filename": "src/doc/unstable-book/src/library-features/asm.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2939249f294dd54a9ce78a8ee1f2922a44e7fb7c/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md", "raw_url": "https://github.com/rust-lang/rust/raw/2939249f294dd54a9ce78a8ee1f2922a44e7fb7c/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md?ref=2939249f294dd54a9ce78a8ee1f2922a44e7fb7c", "patch": "@@ -402,7 +402,7 @@ assert_eq!(a, 5);\n \n This will decrement the `{0}` register value from 10 to 3, then add 2 and store it in `a`.\n \n-This example show a few thing:\n+This example shows a few things:\n \n First that the same number can be used as a label multiple times in the same inline block.\n "}, {"sha": "7075995c2cfff5bd34568b0018c6ba2c40b0fe7b", "filename": "src/test/ui/asm/naked-functions.rs", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/2939249f294dd54a9ce78a8ee1f2922a44e7fb7c/src%2Ftest%2Fui%2Fasm%2Fnaked-functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2939249f294dd54a9ce78a8ee1f2922a44e7fb7c/src%2Ftest%2Fui%2Fasm%2Fnaked-functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fnaked-functions.rs?ref=2939249f294dd54a9ce78a8ee1f2922a44e7fb7c", "patch": "@@ -167,3 +167,46 @@ pub unsafe extern \"C\" fn valid_c() {\n pub unsafe extern \"C\" fn valid_att_syntax() {\n     asm!(\"\", options(noreturn, att_syntax));\n }\n+\n+#[naked]\n+pub unsafe extern \"C\" fn inline_none() {\n+    asm!(\"\", options(noreturn));\n+}\n+\n+#[naked]\n+#[inline]\n+//~^ WARN naked functions cannot be inlined\n+//~| WARN this was previously accepted\n+pub unsafe extern \"C\" fn inline_hint() {\n+    asm!(\"\", options(noreturn));\n+}\n+\n+#[naked]\n+#[inline(always)]\n+//~^ WARN naked functions cannot be inlined\n+//~| WARN this was previously accepted\n+pub unsafe extern \"C\" fn inline_always() {\n+    asm!(\"\", options(noreturn));\n+}\n+\n+#[naked]\n+#[inline(never)]\n+//~^ WARN naked functions cannot be inlined\n+//~| WARN this was previously accepted\n+pub unsafe extern \"C\" fn inline_never() {\n+    asm!(\"\", options(noreturn));\n+}\n+\n+#[naked]\n+#[inline]\n+//~^ WARN naked functions cannot be inlined\n+//~| WARN this was previously accepted\n+#[inline(always)]\n+//~^ WARN naked functions cannot be inlined\n+//~| WARN this was previously accepted\n+#[inline(never)]\n+//~^ WARN naked functions cannot be inlined\n+//~| WARN this was previously accepted\n+pub unsafe extern \"C\" fn inline_all() {\n+    asm!(\"\", options(noreturn));\n+}"}, {"sha": "2a186a69ff4608b5ae6c4848d94f72c3350d90a0", "filename": "src/test/ui/asm/naked-functions.stderr", "status": "modified", "additions": 55, "deletions": 1, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/2939249f294dd54a9ce78a8ee1f2922a44e7fb7c/src%2Ftest%2Fui%2Fasm%2Fnaked-functions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2939249f294dd54a9ce78a8ee1f2922a44e7fb7c/src%2Ftest%2Fui%2Fasm%2Fnaked-functions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fnaked-functions.stderr?ref=2939249f294dd54a9ce78a8ee1f2922a44e7fb7c", "patch": "@@ -296,5 +296,59 @@ LL | pub unsafe extern \"Rust\" fn rust_abi() {\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n-error: aborting due to 8 previous errors; 19 warnings emitted\n+warning: naked functions cannot be inlined\n+  --> $DIR/naked-functions.rs:177:1\n+   |\n+LL | #[inline]\n+   | ^^^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n+\n+warning: naked functions cannot be inlined\n+  --> $DIR/naked-functions.rs:185:1\n+   |\n+LL | #[inline(always)]\n+   | ^^^^^^^^^^^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n+\n+warning: naked functions cannot be inlined\n+  --> $DIR/naked-functions.rs:193:1\n+   |\n+LL | #[inline(never)]\n+   | ^^^^^^^^^^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n+\n+warning: naked functions cannot be inlined\n+  --> $DIR/naked-functions.rs:201:1\n+   |\n+LL | #[inline]\n+   | ^^^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n+\n+warning: naked functions cannot be inlined\n+  --> $DIR/naked-functions.rs:204:1\n+   |\n+LL | #[inline(always)]\n+   | ^^^^^^^^^^^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n+\n+warning: naked functions cannot be inlined\n+  --> $DIR/naked-functions.rs:207:1\n+   |\n+LL | #[inline(never)]\n+   | ^^^^^^^^^^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n+\n+error: aborting due to 8 previous errors; 25 warnings emitted\n "}, {"sha": "da74c1877b16500239587a384792f577a029f83e", "filename": "src/test/ui/parser/issue-87635.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2939249f294dd54a9ce78a8ee1f2922a44e7fb7c/src%2Ftest%2Fui%2Fparser%2Fissue-87635.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2939249f294dd54a9ce78a8ee1f2922a44e7fb7c/src%2Ftest%2Fui%2Fparser%2Fissue-87635.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-87635.rs?ref=2939249f294dd54a9ce78a8ee1f2922a44e7fb7c", "patch": "@@ -0,0 +1,9 @@\n+struct Foo {}\n+\n+impl Foo {\n+    pub fn bar()\n+    //~^ ERROR: expected `;`, found `}`\n+    //~| ERROR: associated function in `impl` without body\n+}\n+\n+fn main() {}"}, {"sha": "920a9f937dd6b3900e83f41d9b145c57d8f131ef", "filename": "src/test/ui/parser/issue-87635.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2939249f294dd54a9ce78a8ee1f2922a44e7fb7c/src%2Ftest%2Fui%2Fparser%2Fissue-87635.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2939249f294dd54a9ce78a8ee1f2922a44e7fb7c/src%2Ftest%2Fui%2Fparser%2Fissue-87635.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-87635.stderr?ref=2939249f294dd54a9ce78a8ee1f2922a44e7fb7c", "patch": "@@ -0,0 +1,19 @@\n+error: expected `;`, found `}`\n+  --> $DIR/issue-87635.rs:4:17\n+   |\n+LL |     pub fn bar()\n+   |                 ^ help: add `;` here\n+...\n+LL | }\n+   | - unexpected token\n+\n+error: associated function in `impl` without body\n+  --> $DIR/issue-87635.rs:4:5\n+   |\n+LL |     pub fn bar()\n+   |     ^^^^^^^^^^^-\n+   |                |\n+   |                help: provide a definition for the function: `{ <body> }`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "fa9d35ee4df854b5c207085c9e4c014faaa25fe2", "filename": "src/test/ui/simd/simd-generics.rs", "status": "modified", "additions": 43, "deletions": 15, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/2939249f294dd54a9ce78a8ee1f2922a44e7fb7c/src%2Ftest%2Fui%2Fsimd%2Fsimd-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2939249f294dd54a9ce78a8ee1f2922a44e7fb7c/src%2Ftest%2Fui%2Fsimd%2Fsimd-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fsimd-generics.rs?ref=2939249f294dd54a9ce78a8ee1f2922a44e7fb7c", "patch": "@@ -10,7 +10,15 @@ struct f32x4(f32, f32, f32, f32);\n \n #[repr(simd)]\n #[derive(Copy, Clone)]\n-struct S<const N: usize>([f32; N]);\n+struct A<const N: usize>([f32; N]);\n+\n+#[repr(simd)]\n+#[derive(Copy, Clone)]\n+struct B<T>([T; 4]);\n+\n+#[repr(simd)]\n+#[derive(Copy, Clone)]\n+struct C<T, const N: usize>([T; N]);\n \n \n extern \"platform-intrinsic\" {\n@@ -29,7 +37,23 @@ impl ops::Add for f32x4 {\n     }\n }\n \n-impl ops::Add for S<4> {\n+impl ops::Add for A<4> {\n+    type Output = Self;\n+\n+    fn add(self, rhs: Self) -> Self {\n+        unsafe { simd_add(self, rhs) }\n+    }\n+}\n+\n+impl ops::Add for B<f32> {\n+    type Output = Self;\n+\n+    fn add(self, rhs: Self) -> Self {\n+        unsafe { simd_add(self, rhs) }\n+    }\n+}\n+\n+impl ops::Add for C<f32, 4> {\n     type Output = Self;\n \n     fn add(self, rhs: Self) -> Self {\n@@ -39,19 +63,23 @@ impl ops::Add for S<4> {\n \n \n pub fn main() {\n-    let lr = f32x4(1.0f32, 2.0f32, 3.0f32, 4.0f32);\n+    let x = [1.0f32, 2.0f32, 3.0f32, 4.0f32];\n+    let y = [2.0f32, 4.0f32, 6.0f32, 8.0f32];\n \n     // lame-o\n-    let f32x4(x, y, z, w) = add(lr, lr);\n-    assert_eq!(x, 2.0f32);\n-    assert_eq!(y, 4.0f32);\n-    assert_eq!(z, 6.0f32);\n-    assert_eq!(w, 8.0f32);\n-\n-    let lr2 = S::<4>([1.0f32, 2.0f32, 3.0f32, 4.0f32]);\n-    let [x, y, z, w] = add(lr2, lr2).0;\n-    assert_eq!(x, 2.0f32);\n-    assert_eq!(y, 4.0f32);\n-    assert_eq!(z, 6.0f32);\n-    assert_eq!(w, 8.0f32);\n+    let a = f32x4(1.0f32, 2.0f32, 3.0f32, 4.0f32);\n+    let f32x4(a0, a1, a2, a3) = add(a, a);\n+    assert_eq!(a0, 2.0f32);\n+    assert_eq!(a1, 4.0f32);\n+    assert_eq!(a2, 6.0f32);\n+    assert_eq!(a3, 8.0f32);\n+\n+    let a = A(x);\n+    assert_eq!(add(a, a).0, y);\n+\n+    let b = B(x);\n+    assert_eq!(add(b, b).0, y);\n+\n+    let c = C(x);\n+    assert_eq!(add(c, c).0, y);\n }"}, {"sha": "0bc73b155801eb5830b453785b98cbfe4b9eba20", "filename": "src/test/ui/simd/simd-type-generic-monomorphisation-non-primitive.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2939249f294dd54a9ce78a8ee1f2922a44e7fb7c/src%2Ftest%2Fui%2Fsimd%2Fsimd-type-generic-monomorphisation-non-primitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2939249f294dd54a9ce78a8ee1f2922a44e7fb7c/src%2Ftest%2Fui%2Fsimd%2Fsimd-type-generic-monomorphisation-non-primitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fsimd-type-generic-monomorphisation-non-primitive.rs?ref=2939249f294dd54a9ce78a8ee1f2922a44e7fb7c", "patch": "@@ -0,0 +1,14 @@\n+// build-fail\n+\n+#![feature(repr_simd)]\n+\n+struct E;\n+\n+// error-pattern:monomorphising SIMD type `S<E>` with a non-primitive-scalar (integer/float/pointer) element type `E`\n+\n+#[repr(simd)]\n+struct S<T>([T; 4]);\n+\n+fn main() {\n+    let _v: Option<S<E>> = None;\n+}"}, {"sha": "9e8f06b824ccf3bd8caa02c8b006e56d9a5315ba", "filename": "src/test/ui/simd/simd-type-generic-monomorphisation-non-primitive.stderr", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2939249f294dd54a9ce78a8ee1f2922a44e7fb7c/src%2Ftest%2Fui%2Fsimd%2Fsimd-type-generic-monomorphisation-non-primitive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2939249f294dd54a9ce78a8ee1f2922a44e7fb7c/src%2Ftest%2Fui%2Fsimd%2Fsimd-type-generic-monomorphisation-non-primitive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fsimd-type-generic-monomorphisation-non-primitive.stderr?ref=2939249f294dd54a9ce78a8ee1f2922a44e7fb7c", "patch": "@@ -0,0 +1,4 @@\n+error: monomorphising SIMD type `S<E>` with a non-primitive-scalar (integer/float/pointer) element type `E`\n+\n+error: aborting due to previous error\n+"}, {"sha": "99e40ba4b4c04b0fe0018616f8fbcb8037f55df9", "filename": "src/test/ui/unsafe/issue-87414-query-cycle.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2939249f294dd54a9ce78a8ee1f2922a44e7fb7c/src%2Ftest%2Fui%2Funsafe%2Fissue-87414-query-cycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2939249f294dd54a9ce78a8ee1f2922a44e7fb7c/src%2Ftest%2Fui%2Funsafe%2Fissue-87414-query-cycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Fissue-87414-query-cycle.rs?ref=2939249f294dd54a9ce78a8ee1f2922a44e7fb7c", "patch": "@@ -0,0 +1,15 @@\n+// Regression test for #87414.\n+\n+// check-pass\n+// compile-flags: -Zthir-unsafeck\n+\n+fn bad<T>() -> Box<dyn Iterator<Item = [(); { |x: u32| { x }; 4 }]>> { todo!() }\n+\n+fn foo() -> [(); { |x: u32| { x }; 4 }] { todo!() }\n+fn bar() { let _: [(); { |x: u32| { x }; 4 }]; }\n+\n+// This one should not cause any errors either:\n+unsafe fn unsf() {}\n+fn bad2<T>() -> Box<dyn Iterator<Item = [(); { unsafe { || { unsf() } }; 4 }]>> { todo!() }\n+\n+fn main() {}"}, {"sha": "ab63a9e2dfa0b8b7b39211e0ca96c52d17101212", "filename": "src/tools/build-manifest/src/main.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2939249f294dd54a9ce78a8ee1f2922a44e7fb7c/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2939249f294dd54a9ce78a8ee1f2922a44e7fb7c/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs?ref=2939249f294dd54a9ce78a8ee1f2922a44e7fb7c", "patch": "@@ -54,6 +54,7 @@ static HOSTS: &[&str] = &[\n static TARGETS: &[&str] = &[\n     \"aarch64-apple-darwin\",\n     \"aarch64-apple-ios\",\n+    \"aarch64-apple-ios-sim\",\n     \"aarch64-fuchsia\",\n     \"aarch64-linux-android\",\n     \"aarch64-pc-windows-msvc\","}]}