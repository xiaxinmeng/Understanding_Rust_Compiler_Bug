{"sha": "aa65b08b1dbaf4b637847646801ebc8c01d7ecbd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhNjViMDhiMWRiYWY0YjYzNzg0NzY0NjgwMWViYzhjMDFkN2VjYmQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-08T17:51:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-08T17:51:10Z"}, "message": "Auto merge of #86982 - GuillaumeGomez:rollup-7sbye3c, r=GuillaumeGomez\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #84961 (Rework SESSION_GLOBALS API)\n - #86726 (Use diagnostic items instead of lang items for rfc2229 migrations)\n - #86789 (Update BTreeSet::drain_filter documentation)\n - #86838 (Checking that function is const if marked with rustc_const_unstable)\n - #86903 (Fix small headers display)\n - #86913 (Document rustdoc with `--document-private-items`)\n - #86957 (Update .mailmap file)\n - #86971 (mailmap: Add alternative addresses for myself)\n\nFailed merges:\n\n - #86869 (Account for capture kind in auto traits migration)\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "9828a028f1c2c73ed4f8c85959c7eebb747ecc48", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9828a028f1c2c73ed4f8c85959c7eebb747ecc48"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa65b08b1dbaf4b637847646801ebc8c01d7ecbd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa65b08b1dbaf4b637847646801ebc8c01d7ecbd", "html_url": "https://github.com/rust-lang/rust/commit/aa65b08b1dbaf4b637847646801ebc8c01d7ecbd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa65b08b1dbaf4b637847646801ebc8c01d7ecbd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0485c7986e0dac6ffd0207aba56467cb9378d85", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0485c7986e0dac6ffd0207aba56467cb9378d85", "html_url": "https://github.com/rust-lang/rust/commit/d0485c7986e0dac6ffd0207aba56467cb9378d85"}, {"sha": "60566820b3800036a00e2b7e5787b8c816dc2342", "url": "https://api.github.com/repos/rust-lang/rust/commits/60566820b3800036a00e2b7e5787b8c816dc2342", "html_url": "https://github.com/rust-lang/rust/commit/60566820b3800036a00e2b7e5787b8c816dc2342"}], "stats": {"total": 562, "additions": 412, "deletions": 150}, "files": [{"sha": "d6b7ab51a48c66d18c6d61ac0ee09ae0ef3d4878", "filename": ".mailmap", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aa65b08b1dbaf4b637847646801ebc8c01d7ecbd/.mailmap", "raw_url": "https://github.com/rust-lang/rust/raw/aa65b08b1dbaf4b637847646801ebc8c01d7ecbd/.mailmap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.mailmap?ref=aa65b08b1dbaf4b637847646801ebc8c01d7ecbd", "patch": "@@ -113,10 +113,14 @@ Hanna Kruppe <hanna.kruppe@gmail.com> <robin.kruppe@gmail.com>\n Heather <heather@cynede.net> <Cynede@Gentoo.org>\n Heather <heather@cynede.net> <Heather@cynede.net>\n Herman J. Radtke III <herman@hermanradtke.com> Herman J. Radtke III <hermanradtke@gmail.com>\n+Ian Jackson <ijackson@chiark.greenend.org.uk> <ian.jackson@citrix.com>\n+Ian Jackson <ijackson@chiark.greenend.org.uk> <ijackson+github@slimy.greenend.org.uk>\n+Ian Jackson <ijackson@chiark.greenend.org.uk> <iwj@xenproject.org>\n Ilyong Cho <ilyoan@gmail.com>\n inquisitivecrystal <22333129+inquisitivecrystal@users.noreply.github.com>\n Ivan Ivaschenko <defuz.net@gmail.com>\n J. J. Weber <jjweber@gmail.com>\n+Jacob Pratt <jacob@jhpratt.dev> <the.z.cuber@gmail.com>\n Jakub Adam Wieczorek <jakub.adam.wieczorek@gmail.com> <jakub.bukaj@yahoo.com>\n Jakub Adam Wieczorek <jakub.adam.wieczorek@gmail.com> <jakub@jakub.cc>\n Jakub Adam Wieczorek <jakub.adam.wieczorek@gmail.com> <jakubw@jakubw.net>"}, {"sha": "6d137f3774fe76a6fe801557956602223e4a3963", "filename": "compiler/rustc_ast/src/util/comments/tests.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/aa65b08b1dbaf4b637847646801ebc8c01d7ecbd/compiler%2Frustc_ast%2Fsrc%2Futil%2Fcomments%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa65b08b1dbaf4b637847646801ebc8c01d7ecbd/compiler%2Frustc_ast%2Fsrc%2Futil%2Fcomments%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Futil%2Fcomments%2Ftests.rs?ref=aa65b08b1dbaf4b637847646801ebc8c01d7ecbd", "patch": "@@ -1,9 +1,9 @@\n use super::*;\n-use rustc_span::with_default_session_globals;\n+use rustc_span::create_default_session_globals_then;\n \n #[test]\n fn test_block_doc_comment_1() {\n-    with_default_session_globals(|| {\n+    create_default_session_globals_then(|| {\n         let comment = \"\\n * Test \\n **  Test\\n *   Test\\n\";\n         let stripped = beautify_doc_string(Symbol::intern(comment));\n         assert_eq!(stripped.as_str(), \" Test \\n*  Test\\n   Test\");\n@@ -12,7 +12,7 @@ fn test_block_doc_comment_1() {\n \n #[test]\n fn test_block_doc_comment_2() {\n-    with_default_session_globals(|| {\n+    create_default_session_globals_then(|| {\n         let comment = \"\\n * Test\\n *  Test\\n\";\n         let stripped = beautify_doc_string(Symbol::intern(comment));\n         assert_eq!(stripped.as_str(), \" Test\\n  Test\");\n@@ -21,7 +21,7 @@ fn test_block_doc_comment_2() {\n \n #[test]\n fn test_block_doc_comment_3() {\n-    with_default_session_globals(|| {\n+    create_default_session_globals_then(|| {\n         let comment = \"\\n let a: *i32;\\n *a = 5;\\n\";\n         let stripped = beautify_doc_string(Symbol::intern(comment));\n         assert_eq!(stripped.as_str(), \" let a: *i32;\\n *a = 5;\");\n@@ -30,7 +30,7 @@ fn test_block_doc_comment_3() {\n \n #[test]\n fn test_line_doc_comment() {\n-    with_default_session_globals(|| {\n+    create_default_session_globals_then(|| {\n         let stripped = beautify_doc_string(Symbol::intern(\" test\"));\n         assert_eq!(stripped.as_str(), \" test\");\n         let stripped = beautify_doc_string(Symbol::intern(\"! test\"));"}, {"sha": "6c8d42f33eb5a74de15756cff7fbf760b3c60adf", "filename": "compiler/rustc_ast_pretty/src/pprust/tests.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aa65b08b1dbaf4b637847646801ebc8c01d7ecbd/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa65b08b1dbaf4b637847646801ebc8c01d7ecbd/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Ftests.rs?ref=aa65b08b1dbaf4b637847646801ebc8c01d7ecbd", "patch": "@@ -1,8 +1,8 @@\n use super::*;\n \n use rustc_ast as ast;\n+use rustc_span::create_default_session_globals_then;\n use rustc_span::symbol::Ident;\n-use rustc_span::with_default_session_globals;\n \n fn fun_to_string(\n     decl: &ast::FnDecl,\n@@ -24,7 +24,7 @@ fn variant_to_string(var: &ast::Variant) -> String {\n \n #[test]\n fn test_fun_to_string() {\n-    with_default_session_globals(|| {\n+    create_default_session_globals_then(|| {\n         let abba_ident = Ident::from_str(\"abba\");\n \n         let decl =\n@@ -39,7 +39,7 @@ fn test_fun_to_string() {\n \n #[test]\n fn test_variant_to_string() {\n-    with_default_session_globals(|| {\n+    create_default_session_globals_then(|| {\n         let ident = Ident::from_str(\"principal_skinner\");\n \n         let var = ast::Variant {"}, {"sha": "7fecfeaa57c283000e81c42e4f6dacb7200d824a", "filename": "compiler/rustc_error_codes/src/error_codes/E0542.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aa65b08b1dbaf4b637847646801ebc8c01d7ecbd/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0542.md", "raw_url": "https://github.com/rust-lang/rust/raw/aa65b08b1dbaf4b637847646801ebc8c01d7ecbd/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0542.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0542.md?ref=aa65b08b1dbaf4b637847646801ebc8c01d7ecbd", "patch": "@@ -10,7 +10,7 @@ Erroneous code example:\n fn _stable_fn() {}\n \n #[rustc_const_stable(feature = \"_stable_const_fn\")] // invalid\n-fn _stable_const_fn() {}\n+const fn _stable_const_fn() {}\n \n #[stable(feature = \"_deprecated_fn\", since = \"0.1.0\")]\n #[rustc_deprecated(\n@@ -29,7 +29,7 @@ To fix this issue, you need to provide the `since` field. Example:\n fn _stable_fn() {}\n \n #[rustc_const_stable(feature = \"_stable_const_fn\", since = \"1.0.0\")] // ok!\n-fn _stable_const_fn() {}\n+const fn _stable_const_fn() {}\n \n #[stable(feature = \"_deprecated_fn\", since = \"0.1.0\")]\n #[rustc_deprecated("}, {"sha": "7aba084f4d3aa82b50e8c3958ec891c5b7d4ef84", "filename": "compiler/rustc_error_codes/src/error_codes/E0545.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aa65b08b1dbaf4b637847646801ebc8c01d7ecbd/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0545.md", "raw_url": "https://github.com/rust-lang/rust/raw/aa65b08b1dbaf4b637847646801ebc8c01d7ecbd/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0545.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0545.md?ref=aa65b08b1dbaf4b637847646801ebc8c01d7ecbd", "patch": "@@ -10,7 +10,7 @@ Erroneous code example:\n fn _unstable_fn() {}\n \n #[rustc_const_unstable(feature = \"_unstable_const_fn\", issue = \"0\")] // invalid\n-fn _unstable_const_fn() {}\n+const fn _unstable_const_fn() {}\n ```\n \n To fix this issue, you need to provide a correct value in the `issue` field.\n@@ -24,7 +24,7 @@ Example:\n fn _unstable_fn() {}\n \n #[rustc_const_unstable(feature = \"_unstable_const_fn\", issue = \"1\")] // ok!\n-fn _unstable_const_fn() {}\n+const fn _unstable_const_fn() {}\n ```\n \n See the [How Rust is Made and \u201cNightly Rust\u201d][how-rust-made-nightly] appendix"}, {"sha": "4950325df640007c23ef4e6b2490f74a49623b9a", "filename": "compiler/rustc_error_codes/src/error_codes/E0547.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aa65b08b1dbaf4b637847646801ebc8c01d7ecbd/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0547.md", "raw_url": "https://github.com/rust-lang/rust/raw/aa65b08b1dbaf4b637847646801ebc8c01d7ecbd/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0547.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0547.md?ref=aa65b08b1dbaf4b637847646801ebc8c01d7ecbd", "patch": "@@ -10,7 +10,7 @@ Erroneous code example:\n fn _unstable_fn() {}\n \n #[rustc_const_unstable(feature = \"_unstable_const_fn\")] // invalid\n-fn _unstable_const_fn() {}\n+const fn _unstable_const_fn() {}\n ```\n \n To fix this issue, you need to provide the `issue` field. Example:\n@@ -26,7 +26,7 @@ fn _unstable_fn() {}\n     feature = \"_unstable_const_fn\",\n     issue = \"none\"\n )] // ok!\n-fn _unstable_const_fn() {}\n+const fn _unstable_const_fn() {}\n ```\n \n See the [How Rust is Made and \u201cNightly Rust\u201d][how-rust-made-nightly] appendix"}, {"sha": "d055937ac36e37f9b21aa3194f9073dab7d71237", "filename": "compiler/rustc_errors/src/json/tests.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/aa65b08b1dbaf4b637847646801ebc8c01d7ecbd/compiler%2Frustc_errors%2Fsrc%2Fjson%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa65b08b1dbaf4b637847646801ebc8c01d7ecbd/compiler%2Frustc_errors%2Fsrc%2Fjson%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fjson%2Ftests.rs?ref=aa65b08b1dbaf4b637847646801ebc8c01d7ecbd", "patch": "@@ -39,16 +39,11 @@ impl<T: Write> Write for Shared<T> {\n     }\n }\n \n-fn with_default_session_globals(f: impl FnOnce()) {\n-    let session_globals = rustc_span::SessionGlobals::new(rustc_span::edition::DEFAULT_EDITION);\n-    rustc_span::SESSION_GLOBALS.set(&session_globals, f);\n-}\n-\n /// Test the span yields correct positions in JSON.\n fn test_positions(code: &str, span: (u32, u32), expected_output: SpanTestData) {\n     let expected_output = TestData { spans: vec![expected_output] };\n \n-    with_default_session_globals(|| {\n+    rustc_span::create_default_session_globals_then(|| {\n         let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n         sm.new_source_file(Path::new(\"test.rs\").to_owned().into(), code.to_owned());\n "}, {"sha": "0068539fb3bd4b075c2176305abe776351b871a2", "filename": "compiler/rustc_expand/src/mut_visit/tests.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aa65b08b1dbaf4b637847646801ebc8c01d7ecbd/compiler%2Frustc_expand%2Fsrc%2Fmut_visit%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa65b08b1dbaf4b637847646801ebc8c01d7ecbd/compiler%2Frustc_expand%2Fsrc%2Fmut_visit%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmut_visit%2Ftests.rs?ref=aa65b08b1dbaf4b637847646801ebc8c01d7ecbd", "patch": "@@ -3,8 +3,8 @@ use crate::tests::{matches_codepattern, string_to_crate};\n use rustc_ast as ast;\n use rustc_ast::mut_visit::MutVisitor;\n use rustc_ast_pretty::pprust;\n+use rustc_span::create_default_session_globals_then;\n use rustc_span::symbol::Ident;\n-use rustc_span::with_default_session_globals;\n \n // This version doesn't care about getting comments or doc-strings in.\n fn print_crate_items(krate: &ast::Crate) -> String {\n@@ -38,7 +38,7 @@ macro_rules! assert_pred {\n // Make sure idents get transformed everywhere.\n #[test]\n fn ident_transformation() {\n-    with_default_session_globals(|| {\n+    create_default_session_globals_then(|| {\n         let mut zz_visitor = ToZzIdentMutVisitor;\n         let mut krate =\n             string_to_crate(\"#[a] mod b {fn c (d : e, f : g) {h!(i,j,k);l;m}}\".to_string());\n@@ -55,7 +55,7 @@ fn ident_transformation() {\n // Make sure idents get transformed even inside macro defs.\n #[test]\n fn ident_transformation_in_defs() {\n-    with_default_session_globals(|| {\n+    create_default_session_globals_then(|| {\n         let mut zz_visitor = ToZzIdentMutVisitor;\n         let mut krate = string_to_crate(\n             \"macro_rules! a {(b $c:expr $(d $e:token)f+ => \\"}, {"sha": "6402a81e7c1a5dba758fff4da279b140b9015ab8", "filename": "compiler/rustc_expand/src/parse/tests.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/aa65b08b1dbaf4b637847646801ebc8c01d7ecbd/compiler%2Frustc_expand%2Fsrc%2Fparse%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa65b08b1dbaf4b637847646801ebc8c01d7ecbd/compiler%2Frustc_expand%2Fsrc%2Fparse%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fparse%2Ftests.rs?ref=aa65b08b1dbaf4b637847646801ebc8c01d7ecbd", "patch": "@@ -10,9 +10,9 @@ use rustc_errors::PResult;\n use rustc_parse::new_parser_from_source_str;\n use rustc_parse::parser::ForceCollect;\n use rustc_session::parse::ParseSess;\n+use rustc_span::create_default_session_globals_then;\n use rustc_span::source_map::FilePathMapping;\n use rustc_span::symbol::{kw, sym, Symbol};\n-use rustc_span::with_default_session_globals;\n use rustc_span::{BytePos, FileName, Pos, Span};\n \n use std::path::PathBuf;\n@@ -51,15 +51,15 @@ fn string_to_item(source_str: String) -> Option<P<ast::Item>> {\n #[should_panic]\n #[test]\n fn bad_path_expr_1() {\n-    with_default_session_globals(|| {\n+    create_default_session_globals_then(|| {\n         string_to_expr(\"::abc::def::return\".to_string());\n     })\n }\n \n // Checks the token-tree-ization of macros.\n #[test]\n fn string_to_tts_macro() {\n-    with_default_session_globals(|| {\n+    create_default_session_globals_then(|| {\n         let tts: Vec<_> =\n             string_to_stream(\"macro_rules! zip (($a)=>($a))\".to_string()).trees().collect();\n         let tts: &[TokenTree] = &tts[..];\n@@ -96,7 +96,7 @@ fn string_to_tts_macro() {\n \n #[test]\n fn string_to_tts_1() {\n-    with_default_session_globals(|| {\n+    create_default_session_globals_then(|| {\n         let tts = string_to_stream(\"fn a (b : i32) { b; }\".to_string());\n \n         let expected = TokenStream::new(vec![\n@@ -131,7 +131,7 @@ fn string_to_tts_1() {\n \n #[test]\n fn parse_use() {\n-    with_default_session_globals(|| {\n+    create_default_session_globals_then(|| {\n         let use_s = \"use foo::bar::baz;\";\n         let vitem = string_to_item(use_s.to_string()).unwrap();\n         let vitem_s = item_to_string(&vitem);\n@@ -146,7 +146,7 @@ fn parse_use() {\n \n #[test]\n fn parse_extern_crate() {\n-    with_default_session_globals(|| {\n+    create_default_session_globals_then(|| {\n         let ex_s = \"extern crate foo;\";\n         let vitem = string_to_item(ex_s.to_string()).unwrap();\n         let vitem_s = item_to_string(&vitem);\n@@ -184,7 +184,7 @@ fn get_spans_of_pat_idents(src: &str) -> Vec<Span> {\n \n #[test]\n fn span_of_self_arg_pat_idents_are_correct() {\n-    with_default_session_globals(|| {\n+    create_default_session_globals_then(|| {\n         let srcs = [\n             \"impl z { fn a (&self, &myarg: i32) {} }\",\n             \"impl z { fn a (&mut self, &myarg: i32) {} }\",\n@@ -208,7 +208,7 @@ fn span_of_self_arg_pat_idents_are_correct() {\n \n #[test]\n fn parse_exprs() {\n-    with_default_session_globals(|| {\n+    create_default_session_globals_then(|| {\n         // just make sure that they parse....\n         string_to_expr(\"3 + 4\".to_string());\n         string_to_expr(\"a::z.froob(b,&(987+3))\".to_string());\n@@ -217,7 +217,7 @@ fn parse_exprs() {\n \n #[test]\n fn attrs_fix_bug() {\n-    with_default_session_globals(|| {\n+    create_default_session_globals_then(|| {\n         string_to_item(\n             \"pub fn mk_file_writer(path: &Path, flags: &[FileFlag])\n                 -> Result<Box<Writer>, String> {\n@@ -238,7 +238,7 @@ let mut fflags: c_int = wb();\n \n #[test]\n fn crlf_doc_comments() {\n-    with_default_session_globals(|| {\n+    create_default_session_globals_then(|| {\n         let sess = sess();\n \n         let name_1 = FileName::Custom(\"crlf_source_1\".to_string());\n@@ -272,7 +272,7 @@ fn ttdelim_span() {\n         new_parser_from_source_str(sess, name, source).parse_expr()\n     }\n \n-    with_default_session_globals(|| {\n+    create_default_session_globals_then(|| {\n         let sess = sess();\n         let expr = parse_expr_from_source_str(\n             PathBuf::from(\"foo\").into(),\n@@ -300,7 +300,7 @@ fn ttdelim_span() {\n // See `recurse_into_file_modules` in the parser.\n #[test]\n fn out_of_line_mod() {\n-    with_default_session_globals(|| {\n+    create_default_session_globals_then(|| {\n         let item = parse_item_from_source_str(\n             PathBuf::from(\"foo\").into(),\n             \"mod foo { struct S; mod this_does_not_exist; }\".to_owned(),"}, {"sha": "ed3aa1eaca84e18fe955553975ee8cef9896d465", "filename": "compiler/rustc_expand/src/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aa65b08b1dbaf4b637847646801ebc8c01d7ecbd/compiler%2Frustc_expand%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa65b08b1dbaf4b637847646801ebc8c01d7ecbd/compiler%2Frustc_expand%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Ftests.rs?ref=aa65b08b1dbaf4b637847646801ebc8c01d7ecbd", "patch": "@@ -2,8 +2,8 @@ use rustc_ast as ast;\n use rustc_ast::tokenstream::TokenStream;\n use rustc_parse::{new_parser_from_source_str, parser::Parser, source_file_to_stream};\n use rustc_session::parse::ParseSess;\n+use rustc_span::create_default_session_if_not_set_then;\n use rustc_span::source_map::{FilePathMapping, SourceMap};\n-use rustc_span::with_default_session_globals;\n use rustc_span::{BytePos, MultiSpan, Span};\n \n use rustc_data_structures::sync::Lrc;\n@@ -124,7 +124,7 @@ impl<T: Write> Write for Shared<T> {\n }\n \n fn test_harness(file_text: &str, span_labels: Vec<SpanLabel>, expected_output: &str) {\n-    with_default_session_globals(|| {\n+    create_default_session_if_not_set_then(|_| {\n         let output = Arc::new(Mutex::new(Vec::new()));\n \n         let source_map = Lrc::new(SourceMap::new(FilePathMapping::empty()));"}, {"sha": "31052bfb54ce8584e445689ddd90d64268a138b4", "filename": "compiler/rustc_expand/src/tokenstream/tests.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/aa65b08b1dbaf4b637847646801ebc8c01d7ecbd/compiler%2Frustc_expand%2Fsrc%2Ftokenstream%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa65b08b1dbaf4b637847646801ebc8c01d7ecbd/compiler%2Frustc_expand%2Fsrc%2Ftokenstream%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Ftokenstream%2Ftests.rs?ref=aa65b08b1dbaf4b637847646801ebc8c01d7ecbd", "patch": "@@ -2,7 +2,7 @@ use crate::tests::string_to_stream;\n \n use rustc_ast::token;\n use rustc_ast::tokenstream::{Spacing, TokenStream, TokenStreamBuilder, TokenTree};\n-use rustc_span::with_default_session_globals;\n+use rustc_span::create_default_session_globals_then;\n use rustc_span::{BytePos, Span, Symbol};\n use smallvec::smallvec;\n \n@@ -20,7 +20,7 @@ fn joint(tree: TokenTree) -> TokenStream {\n \n #[test]\n fn test_concat() {\n-    with_default_session_globals(|| {\n+    create_default_session_globals_then(|| {\n         let test_res = string_to_ts(\"foo::bar::baz\");\n         let test_fst = string_to_ts(\"foo::bar\");\n         let test_snd = string_to_ts(\"::baz\");\n@@ -33,7 +33,7 @@ fn test_concat() {\n \n #[test]\n fn test_to_from_bijection() {\n-    with_default_session_globals(|| {\n+    create_default_session_globals_then(|| {\n         let test_start = string_to_ts(\"foo::bar(baz)\");\n         let test_end = test_start.trees().collect();\n         assert_eq!(test_start, test_end)\n@@ -42,7 +42,7 @@ fn test_to_from_bijection() {\n \n #[test]\n fn test_eq_0() {\n-    with_default_session_globals(|| {\n+    create_default_session_globals_then(|| {\n         let test_res = string_to_ts(\"foo\");\n         let test_eqs = string_to_ts(\"foo\");\n         assert_eq!(test_res, test_eqs)\n@@ -51,7 +51,7 @@ fn test_eq_0() {\n \n #[test]\n fn test_eq_1() {\n-    with_default_session_globals(|| {\n+    create_default_session_globals_then(|| {\n         let test_res = string_to_ts(\"::bar::baz\");\n         let test_eqs = string_to_ts(\"::bar::baz\");\n         assert_eq!(test_res, test_eqs)\n@@ -60,7 +60,7 @@ fn test_eq_1() {\n \n #[test]\n fn test_eq_3() {\n-    with_default_session_globals(|| {\n+    create_default_session_globals_then(|| {\n         let test_res = string_to_ts(\"\");\n         let test_eqs = string_to_ts(\"\");\n         assert_eq!(test_res, test_eqs)\n@@ -69,7 +69,7 @@ fn test_eq_3() {\n \n #[test]\n fn test_diseq_0() {\n-    with_default_session_globals(|| {\n+    create_default_session_globals_then(|| {\n         let test_res = string_to_ts(\"::bar::baz\");\n         let test_eqs = string_to_ts(\"bar::baz\");\n         assert_eq!(test_res == test_eqs, false)\n@@ -78,7 +78,7 @@ fn test_diseq_0() {\n \n #[test]\n fn test_diseq_1() {\n-    with_default_session_globals(|| {\n+    create_default_session_globals_then(|| {\n         let test_res = string_to_ts(\"(bar,baz)\");\n         let test_eqs = string_to_ts(\"bar,baz\");\n         assert_eq!(test_res == test_eqs, false)\n@@ -87,7 +87,7 @@ fn test_diseq_1() {\n \n #[test]\n fn test_is_empty() {\n-    with_default_session_globals(|| {\n+    create_default_session_globals_then(|| {\n         let test0: TokenStream = Vec::<TokenTree>::new().into_iter().collect();\n         let test1: TokenStream =\n             TokenTree::token(token::Ident(Symbol::intern(\"a\"), false), sp(0, 1)).into();\n@@ -101,7 +101,7 @@ fn test_is_empty() {\n \n #[test]\n fn test_dotdotdot() {\n-    with_default_session_globals(|| {\n+    create_default_session_globals_then(|| {\n         let mut builder = TokenStreamBuilder::new();\n         builder.push(joint(TokenTree::token(token::Dot, sp(0, 1))));\n         builder.push(joint(TokenTree::token(token::Dot, sp(1, 2))));"}, {"sha": "28ae08030e63029f34adcc4eccd8153564c7145c", "filename": "compiler/rustc_hir/src/lang_items.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aa65b08b1dbaf4b637847646801ebc8c01d7ecbd/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa65b08b1dbaf4b637847646801ebc8c01d7ecbd/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs?ref=aa65b08b1dbaf4b637847646801ebc8c01d7ecbd", "patch": "@@ -348,7 +348,4 @@ language_item_table! {\n     Range,                   sym::Range,               range_struct,               Target::Struct;\n     RangeToInclusive,        sym::RangeToInclusive,    range_to_inclusive_struct,  Target::Struct;\n     RangeTo,                 sym::RangeTo,             range_to_struct,            Target::Struct;\n-    Send,                    sym::send,                send_trait,                 Target::Trait;\n-    UnwindSafe,              sym::unwind_safe,         unwind_safe_trait,          Target::Trait;\n-    RefUnwindSafe,           sym::ref_unwind_safe,     ref_unwind_safe_trait,      Target::Trait;\n }"}, {"sha": "086c49c73972f6efff13f0c1cbe31950493297b0", "filename": "compiler/rustc_interface/src/interface.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa65b08b1dbaf4b637847646801ebc8c01d7ecbd/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa65b08b1dbaf4b637847646801ebc8c01d7ecbd/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Finterface.rs?ref=aa65b08b1dbaf4b637847646801ebc8c01d7ecbd", "patch": "@@ -76,7 +76,7 @@ impl Compiler {\n \n /// Converts strings provided as `--cfg [cfgspec]` into a `crate_cfg`.\n pub fn parse_cfgspecs(cfgspecs: Vec<String>) -> FxHashSet<(String, Option<String>)> {\n-    rustc_span::with_default_session_globals(move || {\n+    rustc_span::create_default_session_if_not_set_then(move |_| {\n         let cfg = cfgspecs\n             .into_iter()\n             .map(|s| {"}, {"sha": "a053253ec16e00625cd8c3d04c28a8f9772355d6", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/aa65b08b1dbaf4b637847646801ebc8c01d7ecbd/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa65b08b1dbaf4b637847646801ebc8c01d7ecbd/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=aa65b08b1dbaf4b637847646801ebc8c01d7ecbd", "patch": "@@ -107,7 +107,7 @@ fn assert_non_crate_hash_different(x: &Options, y: &Options) {\n // When the user supplies --test we should implicitly supply --cfg test\n #[test]\n fn test_switch_implies_cfg_test() {\n-    rustc_span::with_default_session_globals(|| {\n+    rustc_span::create_default_session_globals_then(|| {\n         let matches = optgroups().parse(&[\"--test\".to_string()]).unwrap();\n         let (sess, cfg) = mk_session(matches);\n         let cfg = build_configuration(&sess, to_crate_config(cfg));\n@@ -118,7 +118,7 @@ fn test_switch_implies_cfg_test() {\n // When the user supplies --test and --cfg test, don't implicitly add another --cfg test\n #[test]\n fn test_switch_implies_cfg_test_unless_cfg_test() {\n-    rustc_span::with_default_session_globals(|| {\n+    rustc_span::create_default_session_globals_then(|| {\n         let matches = optgroups().parse(&[\"--test\".to_string(), \"--cfg=test\".to_string()]).unwrap();\n         let (sess, cfg) = mk_session(matches);\n         let cfg = build_configuration(&sess, to_crate_config(cfg));\n@@ -130,20 +130,20 @@ fn test_switch_implies_cfg_test_unless_cfg_test() {\n \n #[test]\n fn test_can_print_warnings() {\n-    rustc_span::with_default_session_globals(|| {\n+    rustc_span::create_default_session_globals_then(|| {\n         let matches = optgroups().parse(&[\"-Awarnings\".to_string()]).unwrap();\n         let (sess, _) = mk_session(matches);\n         assert!(!sess.diagnostic().can_emit_warnings());\n     });\n \n-    rustc_span::with_default_session_globals(|| {\n+    rustc_span::create_default_session_globals_then(|| {\n         let matches =\n             optgroups().parse(&[\"-Awarnings\".to_string(), \"-Dwarnings\".to_string()]).unwrap();\n         let (sess, _) = mk_session(matches);\n         assert!(sess.diagnostic().can_emit_warnings());\n     });\n \n-    rustc_span::with_default_session_globals(|| {\n+    rustc_span::create_default_session_globals_then(|| {\n         let matches = optgroups().parse(&[\"-Adead_code\".to_string()]).unwrap();\n         let (sess, _) = mk_session(matches);\n         assert!(sess.diagnostic().can_emit_warnings());"}, {"sha": "4f51ce620427b4ecad71acdf53da52719b5e8787", "filename": "compiler/rustc_interface/src/util.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/aa65b08b1dbaf4b637847646801ebc8c01d7ecbd/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa65b08b1dbaf4b637847646801ebc8c01d7ecbd/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Futil.rs?ref=aa65b08b1dbaf4b637847646801ebc8c01d7ecbd", "patch": "@@ -150,7 +150,7 @@ pub fn setup_callbacks_and_run_in_thread_pool_with_globals<F: FnOnce() -> R + Se\n     crate::callbacks::setup_callbacks();\n \n     let main_handler = move || {\n-        rustc_span::with_session_globals(edition, || {\n+        rustc_span::create_session_globals_then(edition, || {\n             io::set_output_capture(stderr.clone());\n             f()\n         })\n@@ -171,12 +171,13 @@ unsafe fn handle_deadlock() {\n     rustc_data_structures::sync::assert_sync::<tls::ImplicitCtxt<'_, '_>>();\n     let icx: &tls::ImplicitCtxt<'_, '_> = &*(context as *const tls::ImplicitCtxt<'_, '_>);\n \n-    let session_globals = rustc_span::SESSION_GLOBALS.with(|sg| sg as *const _);\n+    let session_globals = rustc_span::with_session_globals(|sg| sg as *const _);\n     let session_globals = &*session_globals;\n     thread::spawn(move || {\n         tls::enter_context(icx, |_| {\n-            rustc_span::SESSION_GLOBALS\n-                .set(session_globals, || tls::with(|tcx| tcx.queries.deadlock(tcx, &registry)))\n+            rustc_span::set_session_globals_then(session_globals, || {\n+                tls::with(|tcx| tcx.queries.deadlock(tcx, &registry))\n+            })\n         });\n     });\n }\n@@ -203,13 +204,13 @@ pub fn setup_callbacks_and_run_in_thread_pool_with_globals<F: FnOnce() -> R + Se\n \n     let with_pool = move |pool: &rayon::ThreadPool| pool.install(f);\n \n-    rustc_span::with_session_globals(edition, || {\n-        rustc_span::SESSION_GLOBALS.with(|session_globals| {\n+    rustc_span::create_session_globals_then(edition, || {\n+        rustc_span::with_session_globals(|session_globals| {\n             // The main handler runs for each Rayon worker thread and sets up\n             // the thread local rustc uses. `session_globals` is captured and set\n             // on the new threads.\n             let main_handler = move |thread: rayon::ThreadBuilder| {\n-                rustc_span::SESSION_GLOBALS.set(session_globals, || {\n+                rustc_span::set_session_globals_then(session_globals, || {\n                     io::set_output_capture(stderr.clone());\n                     thread.run()\n                 })"}, {"sha": "fc9d6f636b2142a230e6c21e00a29be85f6973ae", "filename": "compiler/rustc_lint/src/tests.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/aa65b08b1dbaf4b637847646801ebc8c01d7ecbd/compiler%2Frustc_lint%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa65b08b1dbaf4b637847646801ebc8c01d7ecbd/compiler%2Frustc_lint%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftests.rs?ref=aa65b08b1dbaf4b637847646801ebc8c01d7ecbd", "patch": "@@ -1,21 +1,23 @@\n use crate::context::parse_lint_and_tool_name;\n-use rustc_span::{with_default_session_globals, Symbol};\n+use rustc_span::{create_default_session_globals_then, Symbol};\n \n #[test]\n fn parse_lint_no_tool() {\n-    with_default_session_globals(|| assert_eq!(parse_lint_and_tool_name(\"foo\"), (None, \"foo\")));\n+    create_default_session_globals_then(|| {\n+        assert_eq!(parse_lint_and_tool_name(\"foo\"), (None, \"foo\"))\n+    });\n }\n \n #[test]\n fn parse_lint_with_tool() {\n-    with_default_session_globals(|| {\n+    create_default_session_globals_then(|| {\n         assert_eq!(parse_lint_and_tool_name(\"clippy::foo\"), (Some(Symbol::intern(\"clippy\")), \"foo\"))\n     });\n }\n \n #[test]\n fn parse_lint_multiple_path() {\n-    with_default_session_globals(|| {\n+    create_default_session_globals_then(|| {\n         assert_eq!(\n             parse_lint_and_tool_name(\"clippy::foo::bar\"),\n             (Some(Symbol::intern(\"clippy\")), \"foo::bar\")"}, {"sha": "e5b3059a5995fee80d77c0a50a7e4bfc45e66bf6", "filename": "compiler/rustc_mir/src/transform/coverage/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aa65b08b1dbaf4b637847646801ebc8c01d7ecbd/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa65b08b1dbaf4b637847646801ebc8c01d7ecbd/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Ftests.rs?ref=aa65b08b1dbaf4b637847646801ebc8c01d7ecbd", "patch": "@@ -22,7 +22,7 @@\n //! are unrelated to the `TyCtxt` global. Without initializing the `Span` session globals, some\n //! basic, coverage-specific features would be impossible to test, but thankfully initializing these\n //! globals is comparatively simpler. The easiest way is to wrap the test in a closure argument\n-//! to: `rustc_span::with_default_session_globals(|| { test_here(); })`.\n+//! to: `rustc_span::create_default_session_globals_then(|| { test_here(); })`.\n \n use super::counters;\n use super::debug;\n@@ -677,7 +677,7 @@ fn synthesize_body_span_from_terminators(mir_body: &Body<'_>) -> Span {\n \n #[test]\n fn test_make_bcb_counters() {\n-    rustc_span::with_default_session_globals(|| {\n+    rustc_span::create_default_session_globals_then(|| {\n         let mir_body = goto_switchint();\n         let body_span = synthesize_body_span_from_terminators(&mir_body);\n         let mut basic_coverage_blocks = graph::CoverageGraph::from_mir(&mir_body);"}, {"sha": "b7693a85ad955a0365c91ffbe42829a1eabf3aff", "filename": "compiler/rustc_parse_format/src/tests.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aa65b08b1dbaf4b637847646801ebc8c01d7ecbd/compiler%2Frustc_parse_format%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa65b08b1dbaf4b637847646801ebc8c01d7ecbd/compiler%2Frustc_parse_format%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse_format%2Fsrc%2Ftests.rs?ref=aa65b08b1dbaf4b637847646801ebc8c01d7ecbd", "patch": "@@ -144,8 +144,7 @@ fn format_align_fill() {\n }\n #[test]\n fn format_counts() {\n-    use rustc_span::{edition, SessionGlobals, SESSION_GLOBALS};\n-    SESSION_GLOBALS.set(&SessionGlobals::new(edition::DEFAULT_EDITION), || {\n+    rustc_span::create_default_session_globals_then(|| {\n         same(\n             \"{:10x}\",\n             &[NextArgument(Argument {"}, {"sha": "3a88d1932a80a7460e29c18ffca9461ec3d98051", "filename": "compiler/rustc_passes/src/lang_items.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aa65b08b1dbaf4b637847646801ebc8c01d7ecbd/compiler%2Frustc_passes%2Fsrc%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa65b08b1dbaf4b637847646801ebc8c01d7ecbd/compiler%2Frustc_passes%2Fsrc%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Flang_items.rs?ref=aa65b08b1dbaf4b637847646801ebc8c01d7ecbd", "patch": "@@ -257,9 +257,6 @@ impl LanguageItemCollector<'tcx> {\n             | LangItem::Unpin\n             | LangItem::Termination\n             | LangItem::Try\n-            | LangItem::Send\n-            | LangItem::UnwindSafe\n-            | LangItem::RefUnwindSafe\n                 => Some(0),\n \n             // Not a trait"}, {"sha": "cd8dd6984d5b9d3f897d623ac85a003fb36b4af9", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 60, "deletions": 1, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/aa65b08b1dbaf4b637847646801ebc8c01d7ecbd/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa65b08b1dbaf4b637847646801ebc8c01d7ecbd/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=aa65b08b1dbaf4b637847646801ebc8c01d7ecbd", "patch": "@@ -20,6 +20,7 @@ use rustc_session::parse::feature_err;\n use rustc_session::Session;\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n+use rustc_target::spec::abi::Abi;\n \n use std::cmp::Ordering;\n use std::iter;\n@@ -95,10 +96,12 @@ struct Annotator<'a, 'tcx> {\n impl<'a, 'tcx> Annotator<'a, 'tcx> {\n     // Determine the stability for a node based on its attributes and inherited\n     // stability. The stability is recorded in the index and used as the parent.\n+    // If the node is a function, `fn_sig` is its signature\n     fn annotate<F>(\n         &mut self,\n         hir_id: HirId,\n         item_sp: Span,\n+        fn_sig: Option<&'tcx hir::FnSig<'tcx>>,\n         kind: AnnotationKind,\n         inherit_deprecation: InheritDeprecation,\n         inherit_const_stability: InheritConstStability,\n@@ -163,13 +166,30 @@ impl<'a, 'tcx> Annotator<'a, 'tcx> {\n         }\n \n         let (stab, const_stab) = attr::find_stability(&self.tcx.sess, attrs, item_sp);\n+        let mut const_span = None;\n \n-        let const_stab = const_stab.map(|(const_stab, _)| {\n+        let const_stab = const_stab.map(|(const_stab, const_span_node)| {\n             let const_stab = self.tcx.intern_const_stability(const_stab);\n             self.index.const_stab_map.insert(hir_id, const_stab);\n+            const_span = Some(const_span_node);\n             const_stab\n         });\n \n+        // If the current node is a function, has const stability attributes and if it doesn not have an intrinsic ABI,\n+        // check if the function/method is const or the parent impl block is const\n+        if let (Some(const_span), Some(fn_sig)) = (const_span, fn_sig) {\n+            if fn_sig.header.abi != Abi::RustIntrinsic\n+                && fn_sig.header.abi != Abi::PlatformIntrinsic\n+                && !fn_sig.header.is_const()\n+            {\n+                if !self.in_trait_impl\n+                    || (self.in_trait_impl && !self.tcx.is_const_fn_raw(hir_id.owner.to_def_id()))\n+                {\n+                    missing_const_err(&self.tcx.sess, fn_sig.span, const_span);\n+                }\n+            }\n+        }\n+\n         // `impl const Trait for Type` items forward their const stability to their\n         // immediate children.\n         if const_stab.is_none() {\n@@ -367,6 +387,8 @@ impl<'a, 'tcx> Visitor<'tcx> for Annotator<'a, 'tcx> {\n         let orig_in_trait_impl = self.in_trait_impl;\n         let mut kind = AnnotationKind::Required;\n         let mut const_stab_inherit = InheritConstStability::No;\n+        let mut fn_sig = None;\n+\n         match i.kind {\n             // Inherent impls and foreign modules serve only as containers for other items,\n             // they don't have their own stability. They still can be annotated as unstable\n@@ -387,6 +409,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Annotator<'a, 'tcx> {\n                     self.annotate(\n                         ctor_hir_id,\n                         i.span,\n+                        None,\n                         AnnotationKind::Required,\n                         InheritDeprecation::Yes,\n                         InheritConstStability::No,\n@@ -395,12 +418,16 @@ impl<'a, 'tcx> Visitor<'tcx> for Annotator<'a, 'tcx> {\n                     )\n                 }\n             }\n+            hir::ItemKind::Fn(ref item_fn_sig, _, _) => {\n+                fn_sig = Some(item_fn_sig);\n+            }\n             _ => {}\n         }\n \n         self.annotate(\n             i.hir_id(),\n             i.span,\n+            fn_sig,\n             kind,\n             InheritDeprecation::Yes,\n             const_stab_inherit,\n@@ -411,9 +438,15 @@ impl<'a, 'tcx> Visitor<'tcx> for Annotator<'a, 'tcx> {\n     }\n \n     fn visit_trait_item(&mut self, ti: &'tcx hir::TraitItem<'tcx>) {\n+        let fn_sig = match ti.kind {\n+            hir::TraitItemKind::Fn(ref fn_sig, _) => Some(fn_sig),\n+            _ => None,\n+        };\n+\n         self.annotate(\n             ti.hir_id(),\n             ti.span,\n+            fn_sig,\n             AnnotationKind::Required,\n             InheritDeprecation::Yes,\n             InheritConstStability::No,\n@@ -427,9 +460,16 @@ impl<'a, 'tcx> Visitor<'tcx> for Annotator<'a, 'tcx> {\n     fn visit_impl_item(&mut self, ii: &'tcx hir::ImplItem<'tcx>) {\n         let kind =\n             if self.in_trait_impl { AnnotationKind::Prohibited } else { AnnotationKind::Required };\n+\n+        let fn_sig = match ii.kind {\n+            hir::ImplItemKind::Fn(ref fn_sig, _) => Some(fn_sig),\n+            _ => None,\n+        };\n+\n         self.annotate(\n             ii.hir_id(),\n             ii.span,\n+            fn_sig,\n             kind,\n             InheritDeprecation::Yes,\n             InheritConstStability::No,\n@@ -444,6 +484,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Annotator<'a, 'tcx> {\n         self.annotate(\n             var.id,\n             var.span,\n+            None,\n             AnnotationKind::Required,\n             InheritDeprecation::Yes,\n             InheritConstStability::No,\n@@ -453,6 +494,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Annotator<'a, 'tcx> {\n                     v.annotate(\n                         ctor_hir_id,\n                         var.span,\n+                        None,\n                         AnnotationKind::Required,\n                         InheritDeprecation::Yes,\n                         InheritConstStability::No,\n@@ -470,6 +512,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Annotator<'a, 'tcx> {\n         self.annotate(\n             s.hir_id,\n             s.span,\n+            None,\n             AnnotationKind::Required,\n             InheritDeprecation::Yes,\n             InheritConstStability::No,\n@@ -484,6 +527,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Annotator<'a, 'tcx> {\n         self.annotate(\n             i.hir_id(),\n             i.span,\n+            None,\n             AnnotationKind::Required,\n             InheritDeprecation::Yes,\n             InheritConstStability::No,\n@@ -498,6 +542,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Annotator<'a, 'tcx> {\n         self.annotate(\n             md.hir_id(),\n             md.span,\n+            None,\n             AnnotationKind::Required,\n             InheritDeprecation::Yes,\n             InheritConstStability::No,\n@@ -517,6 +562,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Annotator<'a, 'tcx> {\n         self.annotate(\n             p.hir_id,\n             p.span,\n+            None,\n             kind,\n             InheritDeprecation::No,\n             InheritConstStability::No,\n@@ -687,6 +733,7 @@ fn stability_index(tcx: TyCtxt<'tcx>, (): ()) -> Index<'tcx> {\n         annotator.annotate(\n             hir::CRATE_HIR_ID,\n             krate.item.inner,\n+            None,\n             AnnotationKind::Required,\n             InheritDeprecation::Yes,\n             InheritConstStability::No,\n@@ -969,3 +1016,15 @@ fn duplicate_feature_err(sess: &Session, span: Span, feature: Symbol) {\n     struct_span_err!(sess, span, E0636, \"the feature `{}` has already been declared\", feature)\n         .emit();\n }\n+\n+fn missing_const_err(session: &Session, fn_sig_span: Span, const_span: Span) {\n+    const ERROR_MSG: &'static str = \"attributes `#[rustc_const_unstable]` \\\n+         and `#[rustc_const_stable]` require \\\n+         the function or method to be `const`\";\n+\n+    session\n+        .struct_span_err(fn_sig_span, ERROR_MSG)\n+        .span_help(fn_sig_span, \"make the function or method const\")\n+        .span_label(const_span, \"attribute specified here\")\n+        .emit();\n+}"}, {"sha": "b2da51f8f38d2df921d17800e025f6d1d849d4a6", "filename": "compiler/rustc_span/src/hygiene.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/aa65b08b1dbaf4b637847646801ebc8c01d7ecbd/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa65b08b1dbaf4b637847646801ebc8c01d7ecbd/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs?ref=aa65b08b1dbaf4b637847646801ebc8c01d7ecbd", "patch": "@@ -26,7 +26,7 @@\n \n use crate::edition::Edition;\n use crate::symbol::{kw, sym, Symbol};\n-use crate::SESSION_GLOBALS;\n+use crate::with_session_globals;\n use crate::{BytePos, CachingSourceMapView, ExpnIdCache, SourceFile, Span, DUMMY_SP};\n \n use crate::def_id::{CrateNum, DefId, DefPathHash, CRATE_DEF_INDEX, LOCAL_CRATE};\n@@ -201,7 +201,7 @@ impl HygieneData {\n     }\n \n     pub fn with<T, F: FnOnce(&mut HygieneData) -> T>(f: F) -> T {\n-        SESSION_GLOBALS.with(|session_globals| f(&mut *session_globals.hygiene_data.borrow_mut()))\n+        with_session_globals(|session_globals| f(&mut *session_globals.hygiene_data.borrow_mut()))\n     }\n \n     fn fresh_expn(&mut self, mut expn_data: Option<ExpnData>) -> ExpnId {\n@@ -1367,8 +1367,9 @@ fn update_disambiguator(expn_id: ExpnId) {\n         }\n     }\n \n-    let source_map = SESSION_GLOBALS\n-        .with(|session_globals| session_globals.source_map.borrow().as_ref().unwrap().clone());\n+    let source_map = with_session_globals(|session_globals| {\n+        session_globals.source_map.borrow().as_ref().unwrap().clone()\n+    });\n \n     let mut ctx =\n         DummyHashStableContext { caching_source_map: CachingSourceMapView::new(&source_map) };"}, {"sha": "11822e9ef974236c9784405674e178fa70a327b7", "filename": "compiler/rustc_span/src/lev_distance/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aa65b08b1dbaf4b637847646801ebc8c01d7ecbd/compiler%2Frustc_span%2Fsrc%2Flev_distance%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa65b08b1dbaf4b637847646801ebc8c01d7ecbd/compiler%2Frustc_span%2Fsrc%2Flev_distance%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flev_distance%2Ftests.rs?ref=aa65b08b1dbaf4b637847646801ebc8c01d7ecbd", "patch": "@@ -21,8 +21,8 @@ fn test_lev_distance() {\n \n #[test]\n fn test_find_best_match_for_name() {\n-    use crate::with_default_session_globals;\n-    with_default_session_globals(|| {\n+    use crate::create_default_session_globals_then;\n+    create_default_session_globals_then(|| {\n         let input = vec![Symbol::intern(\"aaab\"), Symbol::intern(\"aaabc\")];\n         assert_eq!(\n             find_best_match_for_name(&input, Symbol::intern(\"aaaa\"), None),"}, {"sha": "3ddb10d2a06de781a878189c585d6a48f734c043", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 53, "deletions": 7, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/aa65b08b1dbaf4b637847646801ebc8c01d7ecbd/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa65b08b1dbaf4b637847646801ebc8c01d7ecbd/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=aa65b08b1dbaf4b637847646801ebc8c01d7ecbd", "patch": "@@ -97,19 +97,65 @@ impl SessionGlobals {\n     }\n }\n \n-pub fn with_session_globals<R>(edition: Edition, f: impl FnOnce() -> R) -> R {\n+#[inline]\n+pub fn create_session_globals_then<R>(edition: Edition, f: impl FnOnce() -> R) -> R {\n+    assert!(\n+        !SESSION_GLOBALS.is_set(),\n+        \"SESSION_GLOBALS should never be overwritten! \\\n+         Use another thread if you need another SessionGlobals\"\n+    );\n     let session_globals = SessionGlobals::new(edition);\n     SESSION_GLOBALS.set(&session_globals, f)\n }\n \n-pub fn with_default_session_globals<R>(f: impl FnOnce() -> R) -> R {\n-    with_session_globals(edition::DEFAULT_EDITION, f)\n+#[inline]\n+pub fn set_session_globals_then<R>(session_globals: &SessionGlobals, f: impl FnOnce() -> R) -> R {\n+    assert!(\n+        !SESSION_GLOBALS.is_set(),\n+        \"SESSION_GLOBALS should never be overwritten! \\\n+         Use another thread if you need another SessionGlobals\"\n+    );\n+    SESSION_GLOBALS.set(session_globals, f)\n+}\n+\n+#[inline]\n+pub fn create_default_session_if_not_set_then<R, F>(f: F) -> R\n+where\n+    F: FnOnce(&SessionGlobals) -> R,\n+{\n+    create_session_if_not_set_then(edition::DEFAULT_EDITION, f)\n+}\n+\n+#[inline]\n+pub fn create_session_if_not_set_then<R, F>(edition: Edition, f: F) -> R\n+where\n+    F: FnOnce(&SessionGlobals) -> R,\n+{\n+    if !SESSION_GLOBALS.is_set() {\n+        let session_globals = SessionGlobals::new(edition);\n+        SESSION_GLOBALS.set(&session_globals, || SESSION_GLOBALS.with(f))\n+    } else {\n+        SESSION_GLOBALS.with(f)\n+    }\n+}\n+\n+#[inline]\n+pub fn with_session_globals<R, F>(f: F) -> R\n+where\n+    F: FnOnce(&SessionGlobals) -> R,\n+{\n+    SESSION_GLOBALS.with(f)\n+}\n+\n+#[inline]\n+pub fn create_default_session_globals_then<R>(f: impl FnOnce() -> R) -> R {\n+    create_session_globals_then(edition::DEFAULT_EDITION, f)\n }\n \n // If this ever becomes non thread-local, `decode_syntax_context`\n // and `decode_expn_id` will need to be updated to handle concurrent\n // deserialization.\n-scoped_tls::scoped_thread_local!(pub static SESSION_GLOBALS: SessionGlobals);\n+scoped_tls::scoped_thread_local!(static SESSION_GLOBALS: SessionGlobals);\n \n // FIXME: We should use this enum or something like it to get rid of the\n // use of magic `/rust/1.x/...` paths across the board.\n@@ -855,13 +901,13 @@ impl<D: Decoder> Decodable<D> for Span {\n /// the `SourceMap` provided to this function. If that is not available,\n /// we fall back to printing the raw `Span` field values.\n pub fn with_source_map<T, F: FnOnce() -> T>(source_map: Lrc<SourceMap>, f: F) -> T {\n-    SESSION_GLOBALS.with(|session_globals| {\n+    with_session_globals(|session_globals| {\n         *session_globals.source_map.borrow_mut() = Some(source_map);\n     });\n     struct ClearSourceMap;\n     impl Drop for ClearSourceMap {\n         fn drop(&mut self) {\n-            SESSION_GLOBALS.with(|session_globals| {\n+            with_session_globals(|session_globals| {\n                 session_globals.source_map.borrow_mut().take();\n             });\n         }\n@@ -880,7 +926,7 @@ pub fn debug_with_source_map(\n }\n \n pub fn default_span_debug(span: Span, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-    SESSION_GLOBALS.with(|session_globals| {\n+    with_session_globals(|session_globals| {\n         if let Some(source_map) = &*session_globals.source_map.borrow() {\n             debug_with_source_map(span, f, source_map)\n         } else {"}, {"sha": "cb017709c6c7bfc071268a71779f2c230f34827f", "filename": "compiler/rustc_span/src/span_encoding.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aa65b08b1dbaf4b637847646801ebc8c01d7ecbd/compiler%2Frustc_span%2Fsrc%2Fspan_encoding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa65b08b1dbaf4b637847646801ebc8c01d7ecbd/compiler%2Frustc_span%2Fsrc%2Fspan_encoding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fspan_encoding.rs?ref=aa65b08b1dbaf4b637847646801ebc8c01d7ecbd", "patch": "@@ -5,7 +5,6 @@\n // See https://internals.rust-lang.org/t/rfc-compiler-refactoring-spans/1357/28\n \n use crate::hygiene::SyntaxContext;\n-use crate::SESSION_GLOBALS;\n use crate::{BytePos, SpanData};\n \n use rustc_data_structures::fx::FxIndexSet;\n@@ -122,5 +121,5 @@ impl SpanInterner {\n // If an interner exists, return it. Otherwise, prepare a fresh one.\n #[inline]\n fn with_span_interner<T, F: FnOnce(&mut SpanInterner) -> T>(f: F) -> T {\n-    SESSION_GLOBALS.with(|session_globals| f(&mut *session_globals.span_interner.lock()))\n+    crate::with_session_globals(|session_globals| f(&mut *session_globals.span_interner.lock()))\n }"}, {"sha": "edb97d70517b0f8b14a1cfb61c3465fcf6401067", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/aa65b08b1dbaf4b637847646801ebc8c01d7ecbd/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa65b08b1dbaf4b637847646801ebc8c01d7ecbd/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=aa65b08b1dbaf4b637847646801ebc8c01d7ecbd", "patch": "@@ -13,7 +13,7 @@ use std::fmt;\n use std::hash::{Hash, Hasher};\n use std::str;\n \n-use crate::{Edition, Span, DUMMY_SP, SESSION_GLOBALS};\n+use crate::{with_session_globals, Edition, Span, DUMMY_SP};\n \n #[cfg(test)]\n mod tests;\n@@ -947,7 +947,7 @@ symbols! {\n         receiver,\n         recursion_limit,\n         reexport_test_harness_main,\n-        ref_unwind_safe,\n+        ref_unwind_safe_trait,\n         reference,\n         reflect,\n         reg,\n@@ -1073,7 +1073,6 @@ symbols! {\n         self_in_typedefs,\n         self_struct_ctor,\n         semitransparent,\n-        send,\n         send_trait,\n         shl,\n         shl_assign,\n@@ -1299,7 +1298,7 @@ symbols! {\n         unused_qualifications,\n         unwind,\n         unwind_attributes,\n-        unwind_safe,\n+        unwind_safe_trait,\n         unwrap,\n         unwrap_or,\n         use_extern_macros,\n@@ -1790,7 +1789,7 @@ impl Ident {\n \n #[inline]\n fn with_interner<T, F: FnOnce(&mut Interner) -> T>(f: F) -> T {\n-    SESSION_GLOBALS.with(|session_globals| f(&mut *session_globals.symbol_interner.lock()))\n+    with_session_globals(|session_globals| f(&mut *session_globals.symbol_interner.lock()))\n }\n \n /// An alternative to [`Symbol`], useful when the chars within the symbol need to"}, {"sha": "11dea265b4e66c6adb3769195bf6d234bbf8919f", "filename": "compiler/rustc_span/src/symbol/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aa65b08b1dbaf4b637847646801ebc8c01d7ecbd/compiler%2Frustc_span%2Fsrc%2Fsymbol%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa65b08b1dbaf4b637847646801ebc8c01d7ecbd/compiler%2Frustc_span%2Fsrc%2Fsymbol%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol%2Ftests.rs?ref=aa65b08b1dbaf4b637847646801ebc8c01d7ecbd", "patch": "@@ -1,6 +1,6 @@\n use super::*;\n \n-use crate::{edition, SessionGlobals};\n+use crate::create_default_session_globals_then;\n \n #[test]\n fn interner_tests() {\n@@ -18,7 +18,7 @@ fn interner_tests() {\n \n #[test]\n fn without_first_quote_test() {\n-    SESSION_GLOBALS.set(&SessionGlobals::new(edition::DEFAULT_EDITION), || {\n+    create_default_session_globals_then(|| {\n         let i = Ident::from_str(\"'break\");\n         assert_eq!(i.without_first_quote().name, kw::Break);\n     });"}, {"sha": "26a5a65ed360a51873534dd34250691e5022000a", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/aa65b08b1dbaf4b637847646801ebc8c01d7ecbd/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa65b08b1dbaf4b637847646801ebc8c01d7ecbd/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=aa65b08b1dbaf4b637847646801ebc8c01d7ecbd", "patch": "@@ -688,15 +688,17 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             return false;\n         }\n \n-        // Blacklist traits for which it would be nonsensical to suggest borrowing.\n+        // List of traits for which it would be nonsensical to suggest borrowing.\n         // For instance, immutable references are always Copy, so suggesting to\n         // borrow would always succeed, but it's probably not what the user wanted.\n-        let blacklist: Vec<_> =\n-            [LangItem::Copy, LangItem::Clone, LangItem::Unpin, LangItem::Sized, LangItem::Send]\n+        let mut never_suggest_borrow: Vec<_> =\n+            [LangItem::Copy, LangItem::Clone, LangItem::Unpin, LangItem::Sized]\n                 .iter()\n                 .filter_map(|lang_item| self.tcx.lang_items().require(*lang_item).ok())\n                 .collect();\n \n+        never_suggest_borrow.push(self.tcx.get_diagnostic_item(sym::send_trait).unwrap());\n+\n         let span = obligation.cause.span;\n         let param_env = obligation.param_env;\n         let trait_ref = trait_ref.skip_binder();\n@@ -798,15 +800,15 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 ty::TraitRef::new(trait_ref.def_id, imm_substs),\n                 trait_ref,\n                 false,\n-                &blacklist[..],\n+                &never_suggest_borrow[..],\n             ) {\n                 return true;\n             } else {\n                 return try_borrowing(\n                     ty::TraitRef::new(trait_ref.def_id, mut_substs),\n                     trait_ref,\n                     true,\n-                    &blacklist[..],\n+                    &never_suggest_borrow[..],\n                 );\n             }\n         } else {"}, {"sha": "52436816f77f199b48bb17a361194400ceeea954", "filename": "compiler/rustc_typeck/src/check/upvar.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aa65b08b1dbaf4b637847646801ebc8c01d7ecbd/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa65b08b1dbaf4b637847646801ebc8c01d7ecbd/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs?ref=aa65b08b1dbaf4b637847646801ebc8c01d7ecbd", "patch": "@@ -670,7 +670,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         if self.need_2229_migrations_for_trait(\n             min_captures,\n             var_hir_id,\n-            tcx.lang_items().send_trait(),\n+            tcx.get_diagnostic_item(sym::send_trait),\n         ) {\n             auto_trait_reasons.insert(\"`Send`\");\n         }\n@@ -686,15 +686,15 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         if self.need_2229_migrations_for_trait(\n             min_captures,\n             var_hir_id,\n-            tcx.lang_items().unwind_safe_trait(),\n+            tcx.get_diagnostic_item(sym::unwind_safe_trait),\n         ) {\n             auto_trait_reasons.insert(\"`UnwindSafe`\");\n         }\n \n         if self.need_2229_migrations_for_trait(\n             min_captures,\n             var_hir_id,\n-            tcx.lang_items().ref_unwind_safe_trait(),\n+            tcx.get_diagnostic_item(sym::ref_unwind_safe_trait),\n         ) {\n             auto_trait_reasons.insert(\"`RefUnwindSafe`\");\n         }"}, {"sha": "45ea30b538691743611a54c7fd2fdb997322e5a9", "filename": "library/alloc/src/collections/btree/set.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/aa65b08b1dbaf4b637847646801ebc8c01d7ecbd/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa65b08b1dbaf4b637847646801ebc8c01d7ecbd/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs?ref=aa65b08b1dbaf4b637847646801ebc8c01d7ecbd", "patch": "@@ -940,18 +940,20 @@ impl<T> BTreeSet<T> {\n         BTreeSet { map: self.map.split_off(key) }\n     }\n \n-    /// Creates an iterator which uses a closure to determine if a value should be removed.\n+    /// Creates an iterator that visits all values in ascending order and uses a closure\n+    /// to determine if a value should be removed.\n     ///\n-    /// If the closure returns true, then the value is removed and yielded.\n-    /// If the closure returns false, the value will remain in the list and will not be yielded\n-    /// by the iterator.\n+    /// If the closure returns `true`, the value is removed from the set and yielded. If\n+    /// the closure returns `false`, or panics, the value remains in the set and will\n+    /// not be yielded.\n     ///\n-    /// If the iterator is only partially consumed or not consumed at all, each of the remaining\n-    /// values will still be subjected to the closure and removed and dropped if it returns true.\n+    /// If the iterator is only partially consumed or not consumed at all, each of the\n+    /// remaining values is still subjected to the closure and removed and dropped if it\n+    /// returns `true`.\n     ///\n-    /// It is unspecified how many more values will be subjected to the closure\n-    /// if a panic occurs in the closure, or if a panic occurs while dropping a value, or if the\n-    /// `DrainFilter` itself is leaked.\n+    /// It is unspecified how many more values will be subjected to the closure if a\n+    /// panic occurs in the closure, or if a panic occurs while dropping a value, or if\n+    /// the `DrainFilter` itself is leaked.\n     ///\n     /// # Examples\n     ///"}, {"sha": "fb957348bebd3837dbfc60d43efa5c389fb7fb2b", "filename": "library/core/src/marker.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aa65b08b1dbaf4b637847646801ebc8c01d7ecbd/library%2Fcore%2Fsrc%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa65b08b1dbaf4b637847646801ebc8c01d7ecbd/library%2Fcore%2Fsrc%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmarker.rs?ref=aa65b08b1dbaf4b637847646801ebc8c01d7ecbd", "patch": "@@ -31,7 +31,6 @@ use crate::hash::Hasher;\n /// [ub]: ../../reference/behavior-considered-undefined.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[cfg_attr(not(test), rustc_diagnostic_item = \"send_trait\")]\n-#[lang = \"send\"]\n #[rustc_on_unimplemented(\n     message = \"`{Self}` cannot be sent between threads safely\",\n     label = \"`{Self}` cannot be sent between threads safely\""}, {"sha": "7bc987db8814bd620d26d98e11bc6e810f910fc2", "filename": "library/std/src/panic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aa65b08b1dbaf4b637847646801ebc8c01d7ecbd/library%2Fstd%2Fsrc%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa65b08b1dbaf4b637847646801ebc8c01d7ecbd/library%2Fstd%2Fsrc%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpanic.rs?ref=aa65b08b1dbaf4b637847646801ebc8c01d7ecbd", "patch": "@@ -133,7 +133,7 @@ pub fn panic_any<M: 'static + Any + Send>(msg: M) -> ! {\n /// [`AssertUnwindSafe`] wrapper struct can be used to force this trait to be\n /// implemented for any closed over variables passed to `catch_unwind`.\n #[stable(feature = \"catch_unwind\", since = \"1.9.0\")]\n-#[cfg_attr(not(test), lang = \"unwind_safe\")]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"unwind_safe_trait\")]\n #[rustc_on_unimplemented(\n     message = \"the type `{Self}` may not be safely transferred across an unwind boundary\",\n     label = \"`{Self}` may not be safely transferred across an unwind boundary\"\n@@ -149,7 +149,7 @@ pub auto trait UnwindSafe {}\n /// This is a \"helper marker trait\" used to provide impl blocks for the\n /// [`UnwindSafe`] trait, for more information see that documentation.\n #[stable(feature = \"catch_unwind\", since = \"1.9.0\")]\n-#[cfg_attr(not(test), lang = \"ref_unwind_safe\")]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"ref_unwind_safe_trait\")]\n #[rustc_on_unimplemented(\n     message = \"the type `{Self}` may contain interior mutability and a reference may not be safely \\\n                transferrable across a catch_unwind boundary\","}, {"sha": "d3f2c87c0d22f4c966c2215889c60d4b9392be1d", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/aa65b08b1dbaf4b637847646801ebc8c01d7ecbd/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa65b08b1dbaf4b637847646801ebc8c01d7ecbd/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=aa65b08b1dbaf4b637847646801ebc8c01d7ecbd", "patch": "@@ -600,7 +600,7 @@ impl Step for Rustc {\n }\n \n macro_rules! tool_doc {\n-    ($tool: ident, $should_run: literal, $path: literal, [$($krate: literal),+ $(,)?] $(, binary=$bin:expr)?) => {\n+    ($tool: ident, $should_run: literal, $path: literal, [$($krate: literal),+ $(,)?], binary=$bin:expr) => {\n         #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n         pub struct $tool {\n             stage: u32,\n@@ -669,9 +669,9 @@ macro_rules! tool_doc {\n                     cargo.arg(\"-p\").arg($krate);\n                 )+\n \n-                $(if !$bin {\n+                if !$bin {\n                     cargo.rustdocflag(\"--document-private-items\");\n-                })?\n+                }\n                 cargo.rustdocflag(\"--enable-index-page\");\n                 cargo.rustdocflag(\"--show-type-layout\");\n                 cargo.rustdocflag(\"-Zunstable-options\");\n@@ -681,7 +681,13 @@ macro_rules! tool_doc {\n     }\n }\n \n-tool_doc!(Rustdoc, \"rustdoc-tool\", \"src/tools/rustdoc\", [\"rustdoc\", \"rustdoc-json-types\"]);\n+tool_doc!(\n+    Rustdoc,\n+    \"rustdoc-tool\",\n+    \"src/tools/rustdoc\",\n+    [\"rustdoc\", \"rustdoc-json-types\"],\n+    binary = false\n+);\n tool_doc!(\n     Rustfmt,\n     \"rustfmt-nightly\","}, {"sha": "275d1b3ebd938add90368a1cee9e59077a29d5cf", "filename": "src/librustdoc/clean/cfg/tests.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/aa65b08b1dbaf4b637847646801ebc8c01d7ecbd/src%2Flibrustdoc%2Fclean%2Fcfg%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa65b08b1dbaf4b637847646801ebc8c01d7ecbd/src%2Flibrustdoc%2Fclean%2Fcfg%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fcfg%2Ftests.rs?ref=aa65b08b1dbaf4b637847646801ebc8c01d7ecbd", "patch": "@@ -2,8 +2,8 @@ use super::*;\n \n use rustc_ast::attr;\n use rustc_ast::Path;\n+use rustc_span::create_default_session_globals_then;\n use rustc_span::symbol::{Ident, Symbol};\n-use rustc_span::with_default_session_globals;\n use rustc_span::DUMMY_SP;\n \n fn word_cfg(s: &str) -> Cfg {\n@@ -52,7 +52,7 @@ macro_rules! dummy_meta_item_list {\n \n #[test]\n fn test_cfg_not() {\n-    with_default_session_globals(|| {\n+    create_default_session_globals_then(|| {\n         assert_eq!(!Cfg::False, Cfg::True);\n         assert_eq!(!Cfg::True, Cfg::False);\n         assert_eq!(!word_cfg(\"test\"), Cfg::Not(Box::new(word_cfg(\"test\"))));\n@@ -70,7 +70,7 @@ fn test_cfg_not() {\n \n #[test]\n fn test_cfg_and() {\n-    with_default_session_globals(|| {\n+    create_default_session_globals_then(|| {\n         let mut x = Cfg::False;\n         x &= Cfg::True;\n         assert_eq!(x, Cfg::False);\n@@ -154,7 +154,7 @@ fn test_cfg_and() {\n \n #[test]\n fn test_cfg_or() {\n-    with_default_session_globals(|| {\n+    create_default_session_globals_then(|| {\n         let mut x = Cfg::True;\n         x |= Cfg::False;\n         assert_eq!(x, Cfg::True);\n@@ -238,7 +238,7 @@ fn test_cfg_or() {\n \n #[test]\n fn test_parse_ok() {\n-    with_default_session_globals(|| {\n+    create_default_session_globals_then(|| {\n         let mi = dummy_meta_item_word(\"all\");\n         assert_eq!(Cfg::parse(&mi), Ok(word_cfg(\"all\")));\n \n@@ -271,7 +271,7 @@ fn test_parse_ok() {\n \n #[test]\n fn test_parse_err() {\n-    with_default_session_globals(|| {\n+    create_default_session_globals_then(|| {\n         let mi = attr::mk_name_value_item(Ident::from_str(\"foo\"), LitKind::Bool(false), DUMMY_SP);\n         assert!(Cfg::parse(&mi).is_err());\n \n@@ -303,7 +303,7 @@ fn test_parse_err() {\n \n #[test]\n fn test_render_short_html() {\n-    with_default_session_globals(|| {\n+    create_default_session_globals_then(|| {\n         assert_eq!(word_cfg(\"unix\").render_short_html(), \"Unix\");\n         assert_eq!(name_value_cfg(\"target_os\", \"macos\").render_short_html(), \"macOS\");\n         assert_eq!(name_value_cfg(\"target_pointer_width\", \"16\").render_short_html(), \"16-bit\");\n@@ -358,7 +358,7 @@ fn test_render_short_html() {\n \n #[test]\n fn test_render_long_html() {\n-    with_default_session_globals(|| {\n+    create_default_session_globals_then(|| {\n         assert_eq!(\n             word_cfg(\"unix\").render_long_html(),\n             \"This is supported on <strong>Unix</strong> only.\"\n@@ -442,7 +442,7 @@ fn test_render_long_html() {\n fn test_simplify_with() {\n     // This is a tiny subset of things that could be simplified, but it likely covers 90% of\n     // real world usecases well.\n-    with_default_session_globals(|| {\n+    create_default_session_globals_then(|| {\n         let foo = word_cfg(\"foo\");\n         let bar = word_cfg(\"bar\");\n         let baz = word_cfg(\"baz\");"}, {"sha": "cd914f05e680c72c61527471ef1f0a8788127abf", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa65b08b1dbaf4b637847646801ebc8c01d7ecbd/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa65b08b1dbaf4b637847646801ebc8c01d7ecbd/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=aa65b08b1dbaf4b637847646801ebc8c01d7ecbd", "patch": "@@ -513,7 +513,7 @@ crate fn make_test(\n     // Uses librustc_ast to parse the doctest and find if there's a main fn and the extern\n     // crate already is included.\n     let result = rustc_driver::catch_fatal_errors(|| {\n-        rustc_span::with_session_globals(edition, || {\n+        rustc_span::create_session_if_not_set_then(edition, |_| {\n             use rustc_errors::emitter::{Emitter, EmitterWriter};\n             use rustc_errors::Handler;\n             use rustc_parse::maybe_new_parser_from_source_str;"}, {"sha": "a505865b149c4bc91e0ee1e4480686c38df96502", "filename": "src/librustdoc/html/highlight/tests.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aa65b08b1dbaf4b637847646801ebc8c01d7ecbd/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa65b08b1dbaf4b637847646801ebc8c01d7ecbd/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ftests.rs?ref=aa65b08b1dbaf4b637847646801ebc8c01d7ecbd", "patch": "@@ -1,8 +1,8 @@\n use super::write_code;\n use crate::html::format::Buffer;\n use expect_test::expect_file;\n+use rustc_span::create_default_session_globals_then;\n use rustc_span::edition::Edition;\n-use rustc_span::with_default_session_globals;\n \n const STYLE: &str = r#\"\n <style>\n@@ -18,7 +18,7 @@ const STYLE: &str = r#\"\n \n #[test]\n fn test_html_highlighting() {\n-    with_default_session_globals(|| {\n+    create_default_session_globals_then(|| {\n         let src = include_str!(\"fixtures/sample.rs\");\n         let html = {\n             let mut out = Buffer::new();\n@@ -31,7 +31,7 @@ fn test_html_highlighting() {\n \n #[test]\n fn test_dos_backline() {\n-    with_default_session_globals(|| {\n+    create_default_session_globals_then(|| {\n         let src = \"pub fn foo() {\\r\\n\\\n     println!(\\\"foo\\\");\\r\\n\\\n }\\r\\n\";"}, {"sha": "56d50cb407926acb97b48ef15314bf2a3a84d3d0", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa65b08b1dbaf4b637847646801ebc8c01d7ecbd/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa65b08b1dbaf4b637847646801ebc8c01d7ecbd/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=aa65b08b1dbaf4b637847646801ebc8c01d7ecbd", "patch": "@@ -1027,7 +1027,7 @@ fn render_assoc_items(\n                 write!(\n                     w,\n                     \"<h2 id=\\\"deref-methods\\\" class=\\\"small-section-header\\\">\\\n-                         Methods from {trait_}&lt;Target = {type_}&gt;\\\n+                         <span>Methods from {trait_}&lt;Target = {type_}&gt;</span>\\\n                          <a href=\\\"#deref-methods\\\" class=\\\"anchor\\\"></a>\\\n                      </h2>\",\n                     trait_ = trait_.print(cx),"}, {"sha": "66dfd2fac84c6df91334ce262eba26ce091f0bd0", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/aa65b08b1dbaf4b637847646801ebc8c01d7ecbd/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/aa65b08b1dbaf4b637847646801ebc8c01d7ecbd/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=aa65b08b1dbaf4b637847646801ebc8c01d7ecbd", "patch": "@@ -1092,11 +1092,6 @@ a.test-arrow:hover{\n \tleft: -10px;\n }\n \n-#main > .variant, #main > .structfield {\n-\tdisplay: block;\n-}\n-\n-\n :target > code {\n \topacity: 1;\n }"}, {"sha": "82d1afac5eceb96fd48f1088917c991ef1fc0106", "filename": "src/librustdoc/passes/unindent_comments/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aa65b08b1dbaf4b637847646801ebc8c01d7ecbd/src%2Flibrustdoc%2Fpasses%2Funindent_comments%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa65b08b1dbaf4b637847646801ebc8c01d7ecbd/src%2Flibrustdoc%2Fpasses%2Funindent_comments%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Funindent_comments%2Ftests.rs?ref=aa65b08b1dbaf4b637847646801ebc8c01d7ecbd", "patch": "@@ -1,7 +1,7 @@\n use super::*;\n+use rustc_span::create_default_session_globals_then;\n use rustc_span::source_map::DUMMY_SP;\n use rustc_span::symbol::Symbol;\n-use rustc_span::with_default_session_globals;\n \n fn create_doc_fragment(s: &str) -> Vec<DocFragment> {\n     vec![DocFragment {\n@@ -17,7 +17,7 @@ fn create_doc_fragment(s: &str) -> Vec<DocFragment> {\n \n #[track_caller]\n fn run_test(input: &str, expected: &str) {\n-    with_default_session_globals(|| {\n+    create_default_session_globals_then(|| {\n         let mut s = create_doc_fragment(input);\n         unindent_fragments(&mut s);\n         assert_eq!(&s.iter().collect::<String>(), expected);"}, {"sha": "bb246de0e572dd4aa65f7a92f33ec63303ce9b19", "filename": "src/test/ui-fulldeps/mod_dir_path_canonicalized.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa65b08b1dbaf4b637847646801ebc8c01d7ecbd/src%2Ftest%2Fui-fulldeps%2Fmod_dir_path_canonicalized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa65b08b1dbaf4b637847646801ebc8c01d7ecbd/src%2Ftest%2Fui-fulldeps%2Fmod_dir_path_canonicalized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fmod_dir_path_canonicalized.rs?ref=aa65b08b1dbaf4b637847646801ebc8c01d7ecbd", "patch": "@@ -19,7 +19,7 @@ use std::path::Path;\n mod gravy;\n \n pub fn main() {\n-    rustc_span::with_default_session_globals(|| parse());\n+    rustc_span::create_default_session_globals_then(|| parse());\n \n     assert_eq!(gravy::foo(), 10);\n }"}, {"sha": "36ff8b01fd454dacaabc288843894dcc59b4124b", "filename": "src/test/ui-fulldeps/pprust-expr-roundtrip.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa65b08b1dbaf4b637847646801ebc8c01d7ecbd/src%2Ftest%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa65b08b1dbaf4b637847646801ebc8c01d7ecbd/src%2Ftest%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs?ref=aa65b08b1dbaf4b637847646801ebc8c01d7ecbd", "patch": "@@ -202,7 +202,7 @@ impl MutVisitor for AddParens {\n }\n \n fn main() {\n-    rustc_span::with_default_session_globals(|| run());\n+    rustc_span::create_default_session_globals_then(|| run());\n }\n \n fn run() {"}, {"sha": "4fb259b335c71d7b3f5170012fd24a064a83fd43", "filename": "src/test/ui/consts/rustc-const-stability-require-const.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/aa65b08b1dbaf4b637847646801ebc8c01d7ecbd/src%2Ftest%2Fui%2Fconsts%2Frustc-const-stability-require-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa65b08b1dbaf4b637847646801ebc8c01d7ecbd/src%2Ftest%2Fui%2Fconsts%2Frustc-const-stability-require-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Frustc-const-stability-require-const.rs?ref=aa65b08b1dbaf4b637847646801ebc8c01d7ecbd", "patch": "@@ -0,0 +1,47 @@\n+#![crate_type = \"lib\"]\n+#![feature(staged_api)]\n+#![stable(feature = \"foo\", since = \"1.0.0\")]\n+\n+#[stable(feature = \"foo\", since = \"1.0.0\")]\n+#[rustc_const_unstable(feature = \"const_foo\", issue = \"none\")]\n+pub fn foo() {}\n+//~^ ERROR attributes `#[rustc_const_unstable]` and `#[rustc_const_stable]` require the function or method to be `const`\n+\n+#[stable(feature = \"bar\", since = \"1.0.0\")]\n+#[rustc_const_stable(feature = \"const_bar\", since = \"1.0.0\")]\n+pub fn bar() {}\n+//~^ ERROR attributes `#[rustc_const_unstable]` and `#[rustc_const_stable]` require the function or method to be `const`\n+\n+#[stable(feature = \"potato\", since = \"1.0.0\")]\n+pub struct Potato;\n+\n+impl Potato {\n+    #[stable(feature = \"salad\", since = \"1.0.0\")]\n+    #[rustc_const_unstable(feature = \"const_salad\", issue = \"none\")]\n+    pub fn salad(&self) -> &'static str { \"mmmmmm\" }\n+    //~^ ERROR attributes `#[rustc_const_unstable]` and `#[rustc_const_stable]` require the function or method to be `const`\n+\n+    #[stable(feature = \"roasted\", since = \"1.0.0\")]\n+    #[rustc_const_unstable(feature = \"const_roasted\", issue = \"none\")]\n+    pub fn roasted(&self) -> &'static str { \"mmmmmmmmmm\" }\n+    //~^ ERROR attributes `#[rustc_const_unstable]` and `#[rustc_const_stable]` require the function or method to be `const`\n+}\n+\n+#[stable(feature = \"bar\", since = \"1.0.0\")]\n+#[rustc_const_stable(feature = \"const_bar\", since = \"1.0.0\")]\n+pub extern \"C\" fn bar_c() {}\n+//~^ ERROR attributes `#[rustc_const_unstable]` and `#[rustc_const_stable]` require the function or method to be `const`\n+\n+#[stable(feature = \"foo\", since = \"1.0.0\")]\n+#[rustc_const_unstable(feature = \"const_foo\", issue = \"none\")]\n+pub extern \"C\" fn foo_c() {}\n+//~^ ERROR attributes `#[rustc_const_unstable]` and `#[rustc_const_stable]` require the function or method to be `const`\n+\n+\n+#[stable(feature = \"foobar\", since = \"1.0.0\")]\n+#[rustc_const_unstable(feature = \"foobar_const\", issue = \"none\")]\n+pub const fn foobar() {}\n+\n+#[stable(feature = \"barfoo\", since = \"1.0.0\")]\n+#[rustc_const_stable(feature = \"barfoo_const\", since = \"1.0.0\")]\n+pub const fn barfoo() {}"}, {"sha": "1027b9311b7a671b87331bd68d4624d4af19cff3", "filename": "src/test/ui/consts/rustc-const-stability-require-const.stderr", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/aa65b08b1dbaf4b637847646801ebc8c01d7ecbd/src%2Ftest%2Fui%2Fconsts%2Frustc-const-stability-require-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa65b08b1dbaf4b637847646801ebc8c01d7ecbd/src%2Ftest%2Fui%2Fconsts%2Frustc-const-stability-require-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Frustc-const-stability-require-const.stderr?ref=aa65b08b1dbaf4b637847646801ebc8c01d7ecbd", "patch": "@@ -0,0 +1,86 @@\n+error: attributes `#[rustc_const_unstable]` and `#[rustc_const_stable]` require the function or method to be `const`\n+  --> $DIR/rustc-const-stability-require-const.rs:7:1\n+   |\n+LL | #[rustc_const_unstable(feature = \"const_foo\", issue = \"none\")]\n+   | -------------------------------------------------------------- attribute specified here\n+LL | pub fn foo() {}\n+   | ^^^^^^^^^^^^\n+   |\n+help: make the function or method const\n+  --> $DIR/rustc-const-stability-require-const.rs:7:1\n+   |\n+LL | pub fn foo() {}\n+   | ^^^^^^^^^^^^\n+\n+error: attributes `#[rustc_const_unstable]` and `#[rustc_const_stable]` require the function or method to be `const`\n+  --> $DIR/rustc-const-stability-require-const.rs:12:1\n+   |\n+LL | #[rustc_const_stable(feature = \"const_bar\", since = \"1.0.0\")]\n+   | ------------------------------------------------------------- attribute specified here\n+LL | pub fn bar() {}\n+   | ^^^^^^^^^^^^\n+   |\n+help: make the function or method const\n+  --> $DIR/rustc-const-stability-require-const.rs:12:1\n+   |\n+LL | pub fn bar() {}\n+   | ^^^^^^^^^^^^\n+\n+error: attributes `#[rustc_const_unstable]` and `#[rustc_const_stable]` require the function or method to be `const`\n+  --> $DIR/rustc-const-stability-require-const.rs:21:5\n+   |\n+LL |     #[rustc_const_unstable(feature = \"const_salad\", issue = \"none\")]\n+   |     ---------------------------------------------------------------- attribute specified here\n+LL |     pub fn salad(&self) -> &'static str { \"mmmmmm\" }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: make the function or method const\n+  --> $DIR/rustc-const-stability-require-const.rs:21:5\n+   |\n+LL |     pub fn salad(&self) -> &'static str { \"mmmmmm\" }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: attributes `#[rustc_const_unstable]` and `#[rustc_const_stable]` require the function or method to be `const`\n+  --> $DIR/rustc-const-stability-require-const.rs:26:5\n+   |\n+LL |     #[rustc_const_unstable(feature = \"const_roasted\", issue = \"none\")]\n+   |     ------------------------------------------------------------------ attribute specified here\n+LL |     pub fn roasted(&self) -> &'static str { \"mmmmmmmmmm\" }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: make the function or method const\n+  --> $DIR/rustc-const-stability-require-const.rs:26:5\n+   |\n+LL |     pub fn roasted(&self) -> &'static str { \"mmmmmmmmmm\" }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: attributes `#[rustc_const_unstable]` and `#[rustc_const_stable]` require the function or method to be `const`\n+  --> $DIR/rustc-const-stability-require-const.rs:32:1\n+   |\n+LL | #[rustc_const_stable(feature = \"const_bar\", since = \"1.0.0\")]\n+   | ------------------------------------------------------------- attribute specified here\n+LL | pub extern \"C\" fn bar_c() {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: make the function or method const\n+  --> $DIR/rustc-const-stability-require-const.rs:32:1\n+   |\n+LL | pub extern \"C\" fn bar_c() {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: attributes `#[rustc_const_unstable]` and `#[rustc_const_stable]` require the function or method to be `const`\n+  --> $DIR/rustc-const-stability-require-const.rs:37:1\n+   |\n+LL | #[rustc_const_unstable(feature = \"const_foo\", issue = \"none\")]\n+   | -------------------------------------------------------------- attribute specified here\n+LL | pub extern \"C\" fn foo_c() {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: make the function or method const\n+  --> $DIR/rustc-const-stability-require-const.rs:37:1\n+   |\n+LL | pub extern \"C\" fn foo_c() {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 6 previous errors\n+"}, {"sha": "01daa1c9cb42fb1f76753cdcf97a430bc5d50b6d", "filename": "src/test/ui/consts/rustc-impl-const-stability.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/aa65b08b1dbaf4b637847646801ebc8c01d7ecbd/src%2Ftest%2Fui%2Fconsts%2Frustc-impl-const-stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa65b08b1dbaf4b637847646801ebc8c01d7ecbd/src%2Ftest%2Fui%2Fconsts%2Frustc-impl-const-stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Frustc-impl-const-stability.rs?ref=aa65b08b1dbaf4b637847646801ebc8c01d7ecbd", "patch": "@@ -0,0 +1,21 @@\n+// build-pass\n+\n+#![crate_type = \"lib\"]\n+#![allow(incomplete_features)]\n+#![feature(staged_api)]\n+#![feature(const_trait_impl)]\n+#![stable(feature = \"foo\", since = \"1.0.0\")]\n+\n+\n+#[stable(feature = \"potato\", since = \"1.27.0\")]\n+pub struct Data {\n+    _data: u128\n+}\n+\n+#[stable(feature = \"potato\", since = \"1.27.0\")]\n+impl const Default for Data {\n+    #[rustc_const_unstable(feature = \"data_foo\", issue = \"none\")]\n+    fn default() -> Data {\n+        Data { _data: 42 }\n+    }\n+}"}, {"sha": "d6e3e92fc5eb6b76caf1c6575cfd889f7f4d2d07", "filename": "src/tools/clippy/clippy_lints/src/doc.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/aa65b08b1dbaf4b637847646801ebc8c01d7ecbd/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa65b08b1dbaf4b637847646801ebc8c01d7ecbd/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdoc.rs?ref=aa65b08b1dbaf4b637847646801ebc8c01d7ecbd", "patch": "@@ -26,6 +26,7 @@ use rustc_span::source_map::{BytePos, FilePathMapping, MultiSpan, SourceMap, Spa\n use rustc_span::{sym, FileName, Pos};\n use std::io;\n use std::ops::Range;\n+use std::thread;\n use url::Url;\n \n declare_clippy_lint! {\n@@ -584,10 +585,10 @@ fn get_current_span(spans: &[(usize, Span)], idx: usize) -> (usize, Span) {\n }\n \n fn check_code(cx: &LateContext<'_>, text: &str, edition: Edition, span: Span) {\n-    fn has_needless_main(code: &str, edition: Edition) -> bool {\n+    fn has_needless_main(code: String, edition: Edition) -> bool {\n         rustc_driver::catch_fatal_errors(|| {\n-            rustc_span::with_session_globals(edition, || {\n-                let filename = FileName::anon_source_code(code);\n+            rustc_span::create_session_globals_then(edition, || {\n+                let filename = FileName::anon_source_code(&code);\n \n                 let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n                 let emitter = EmitterWriter::new(box io::sink(), None, false, false, false, None, false);\n@@ -649,7 +650,10 @@ fn check_code(cx: &LateContext<'_>, text: &str, edition: Edition, span: Span) {\n         .unwrap_or_default()\n     }\n \n-    if has_needless_main(text, edition) {\n+    // Because of the global session, we need to create a new session in a different thread with\n+    // the edition we need.\n+    let text = text.to_owned();\n+    if thread::spawn(move || has_needless_main(text, edition)).join().expect(\"thread::spawn failed\") {\n         span_lint(cx, NEEDLESS_DOCTEST_MAIN, span, \"needless `fn main` in doctest\");\n     }\n }"}, {"sha": "01a3fc812b2087cbad4ef95e08524e1d0cf38060", "filename": "src/tools/error_index_generator/main.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aa65b08b1dbaf4b637847646801ebc8c01d7ecbd/src%2Ftools%2Ferror_index_generator%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa65b08b1dbaf4b637847646801ebc8c01d7ecbd/src%2Ftools%2Ferror_index_generator%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ferror_index_generator%2Fmain.rs?ref=aa65b08b1dbaf4b637847646801ebc8c01d7ecbd", "patch": "@@ -284,7 +284,8 @@ fn parse_args() -> (OutputFormat, PathBuf) {\n fn main() {\n     rustc_driver::init_env_logger(\"RUST_LOG\");\n     let (format, dst) = parse_args();\n-    let result = rustc_span::with_default_session_globals(move || main_with_result(format, &dst));\n+    let result =\n+        rustc_span::create_default_session_globals_then(move || main_with_result(format, &dst));\n     if let Err(e) = result {\n         panic!(\"{}\", e.to_string());\n     }"}, {"sha": "e0403574eebc1d73a361c70e144fe67920c4a40a", "filename": "src/tools/rustfmt/src/formatting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa65b08b1dbaf4b637847646801ebc8c01d7ecbd/src%2Ftools%2Frustfmt%2Fsrc%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa65b08b1dbaf4b637847646801ebc8c01d7ecbd/src%2Ftools%2Frustfmt%2Fsrc%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fformatting.rs?ref=aa65b08b1dbaf4b637847646801ebc8c01d7ecbd", "patch": "@@ -34,7 +34,7 @@ impl<'b, T: Write + 'b> Session<'b, T> {\n             return Err(ErrorKind::VersionMismatch);\n         }\n \n-        rustc_span::with_session_globals(self.config.edition().into(), || {\n+        rustc_span::create_session_if_not_set_then(self.config.edition().into(), |_| {\n             if self.config.disable_all_formatting() {\n                 // When the input is from stdin, echo back the input.\n                 if let Input::Text(ref buf) = input {"}]}