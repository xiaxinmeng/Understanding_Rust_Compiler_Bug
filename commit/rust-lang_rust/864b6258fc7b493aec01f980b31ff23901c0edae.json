{"sha": "864b6258fc7b493aec01f980b31ff23901c0edae", "node_id": "C_kwDOAAsO6NoAKDg2NGI2MjU4ZmM3YjQ5M2FlYzAxZjk4MGIzMWZmMjM5MDFjMGVkYWU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-02T02:41:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-02T02:41:42Z"}, "message": "Auto merge of #106673 - flba-eb:add_qnx_nto_stdlib, r=workingjubilee\n\nAdd support for QNX Neutrino to standard library\n\nThis change:\n\n- adds standard library support for QNX Neutrino (7.1).\n- upgrades `libc` to version `0.2.139` which supports QNX Neutrino\n\n`@gh-tr`\n\n\u26a0\ufe0f Backtraces on QNX require https://github.com/rust-lang/backtrace-rs/pull/507 which is not yet merged! (But everything else works without these changes) \u26a0\ufe0f\n\nTested mainly with a x86_64 virtual machine (see qnx-nto.md) and partially with an aarch64 hardware (some tests fail due to constrained resources).", "tree": {"sha": "325aba19c26653880753015b1229155aa88c1e06", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/325aba19c26653880753015b1229155aa88c1e06"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/864b6258fc7b493aec01f980b31ff23901c0edae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/864b6258fc7b493aec01f980b31ff23901c0edae", "html_url": "https://github.com/rust-lang/rust/commit/864b6258fc7b493aec01f980b31ff23901c0edae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/864b6258fc7b493aec01f980b31ff23901c0edae/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b4ba4cf0ed52bb4f1ff9436b9a887fd5f049e6b", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b4ba4cf0ed52bb4f1ff9436b9a887fd5f049e6b", "html_url": "https://github.com/rust-lang/rust/commit/0b4ba4cf0ed52bb4f1ff9436b9a887fd5f049e6b"}, {"sha": "a510715749fd85eb23753cd3838647a7a9f9474a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a510715749fd85eb23753cd3838647a7a9f9474a", "html_url": "https://github.com/rust-lang/rust/commit/a510715749fd85eb23753cd3838647a7a9f9474a"}], "stats": {"total": 684, "additions": 603, "deletions": 81}, "files": [{"sha": "5530541cdd0f1adcd77504814d674d4794dbff8b", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/864b6258fc7b493aec01f980b31ff23901c0edae/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/864b6258fc7b493aec01f980b31ff23901c0edae/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=864b6258fc7b493aec01f980b31ff23901c0edae", "patch": "@@ -2319,9 +2319,9 @@ checksum = \"830d08ce1d1d941e6b30645f1a0eb5643013d835ce3779a5fc208261dbe10f55\"\n \n [[package]]\n name = \"libc\"\n-version = \"0.2.138\"\n+version = \"0.2.139\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"db6d7e329c562c5dfab7a46a2afabc8b987ab9a4834c9d1ca04dc54c1546cef8\"\n+checksum = \"201de327520df007757c1f0adce6e827fe8562fbc28bfd9c15571c66ca1f5f79\"\n dependencies = [\n  \"rustc-std-workspace-core\",\n ]"}, {"sha": "27f6659049c50d14c5f595c5cb3ecbcf810e87cb", "filename": "library/core/src/ffi/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/864b6258fc7b493aec01f980b31ff23901c0edae/library%2Fcore%2Fsrc%2Fffi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864b6258fc7b493aec01f980b31ff23901c0edae/library%2Fcore%2Fsrc%2Fffi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fffi%2Fmod.rs?ref=864b6258fc7b493aec01f980b31ff23901c0edae", "patch": "@@ -144,6 +144,7 @@ mod c_char_definition {\n                 )\n             ),\n             all(target_os = \"fuchsia\", target_arch = \"aarch64\"),\n+            all(target_os = \"nto\", target_arch = \"aarch64\"),\n             target_os = \"horizon\"\n         ))] {\n             pub type c_char = u8;"}, {"sha": "598a4bf928290d8445c9d3f1d9774971dd01f7ac", "filename": "library/std/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/864b6258fc7b493aec01f980b31ff23901c0edae/library%2Fstd%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/864b6258fc7b493aec01f980b31ff23901c0edae/library%2Fstd%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2FCargo.toml?ref=864b6258fc7b493aec01f980b31ff23901c0edae", "patch": "@@ -15,7 +15,7 @@ cfg-if = { version = \"1.0\", features = ['rustc-dep-of-std'] }\n panic_unwind = { path = \"../panic_unwind\", optional = true }\n panic_abort = { path = \"../panic_abort\" }\n core = { path = \"../core\" }\n-libc = { version = \"0.2.138\", default-features = false, features = ['rustc-dep-of-std'] }\n+libc = { version = \"0.2.139\", default-features = false, features = ['rustc-dep-of-std'] }\n compiler_builtins = { version = \"0.1.87\" }\n profiler_builtins = { path = \"../profiler_builtins\", optional = true }\n unwind = { path = \"../unwind\" }"}, {"sha": "ea87966755805d5b64fbc9e504bafcd9b472dbce", "filename": "library/std/build.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/864b6258fc7b493aec01f980b31ff23901c0edae/library%2Fstd%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864b6258fc7b493aec01f980b31ff23901c0edae/library%2Fstd%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fbuild.rs?ref=864b6258fc7b493aec01f980b31ff23901c0edae", "patch": "@@ -31,6 +31,7 @@ fn main() {\n         || target.contains(\"espidf\")\n         || target.contains(\"solid\")\n         || target.contains(\"nintendo-3ds\")\n+        || target.contains(\"nto\")\n     {\n         // These platforms don't have any special requirements.\n     } else {"}, {"sha": "e019bc0b67a15260bac309f498703d6b69dc2be5", "filename": "library/std/src/net/tcp/tests.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/864b6258fc7b493aec01f980b31ff23901c0edae/library%2Fstd%2Fsrc%2Fnet%2Ftcp%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864b6258fc7b493aec01f980b31ff23901c0edae/library%2Fstd%2Fsrc%2Fnet%2Ftcp%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Ftcp%2Ftests.rs?ref=864b6258fc7b493aec01f980b31ff23901c0edae", "patch": "@@ -670,7 +670,10 @@ fn debug() {\n // FIXME: re-enabled openbsd tests once their socket timeout code\n //        no longer has rounding errors.\n // VxWorks ignores SO_SNDTIMEO.\n-#[cfg_attr(any(target_os = \"netbsd\", target_os = \"openbsd\", target_os = \"vxworks\"), ignore)]\n+#[cfg_attr(\n+    any(target_os = \"netbsd\", target_os = \"openbsd\", target_os = \"vxworks\", target_os = \"nto\"),\n+    ignore\n+)]\n #[cfg_attr(target_env = \"sgx\", ignore)] // FIXME: https://github.com/fortanix/rust-sgx/issues/31\n #[test]\n fn timeouts() {"}, {"sha": "892fe2ba8baf8deb50b073af048c3274e4d83cb7", "filename": "library/std/src/net/udp/tests.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/864b6258fc7b493aec01f980b31ff23901c0edae/library%2Fstd%2Fsrc%2Fnet%2Fudp%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864b6258fc7b493aec01f980b31ff23901c0edae/library%2Fstd%2Fsrc%2Fnet%2Fudp%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fudp%2Ftests.rs?ref=864b6258fc7b493aec01f980b31ff23901c0edae", "patch": "@@ -180,7 +180,10 @@ fn debug() {\n // FIXME: re-enabled openbsd/netbsd tests once their socket timeout code\n //        no longer has rounding errors.\n // VxWorks ignores SO_SNDTIMEO.\n-#[cfg_attr(any(target_os = \"netbsd\", target_os = \"openbsd\", target_os = \"vxworks\"), ignore)]\n+#[cfg_attr(\n+    any(target_os = \"netbsd\", target_os = \"openbsd\", target_os = \"vxworks\", target_os = \"nto\"),\n+    ignore\n+)]\n #[test]\n fn timeouts() {\n     let addr = next_test_ip4();"}, {"sha": "b148d8a0091807c56f78ecf7c90f3159930a257a", "filename": "library/std/src/os/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/864b6258fc7b493aec01f980b31ff23901c0edae/library%2Fstd%2Fsrc%2Fos%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864b6258fc7b493aec01f980b31ff23901c0edae/library%2Fstd%2Fsrc%2Fos%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fmod.rs?ref=864b6258fc7b493aec01f980b31ff23901c0edae", "patch": "@@ -127,6 +127,8 @@ pub mod l4re;\n pub mod macos;\n #[cfg(target_os = \"netbsd\")]\n pub mod netbsd;\n+#[cfg(target_os = \"nto\")]\n+pub mod nto;\n #[cfg(target_os = \"openbsd\")]\n pub mod openbsd;\n #[cfg(target_os = \"redox\")]"}, {"sha": "8f915b08c9e2e9c49fdf9adb406989e76448cd4e", "filename": "library/std/src/os/nto/fs.rs", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/864b6258fc7b493aec01f980b31ff23901c0edae/library%2Fstd%2Fsrc%2Fos%2Fnto%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864b6258fc7b493aec01f980b31ff23901c0edae/library%2Fstd%2Fsrc%2Fos%2Fnto%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fnto%2Ffs.rs?ref=864b6258fc7b493aec01f980b31ff23901c0edae", "patch": "@@ -0,0 +1,92 @@\n+#![stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n+\n+use crate::fs::Metadata;\n+use crate::sys_common::AsInner;\n+\n+#[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n+pub trait MetadataExt {\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_dev(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_ino(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_mode(&self) -> u32;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_nlink(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_uid(&self) -> u32;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_gid(&self) -> u32;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_rdev(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_size(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_atime(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_atime_nsec(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_mtime(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_mtime_nsec(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_ctime(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_ctime_nsec(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_blksize(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_blocks(&self) -> u64;\n+}\n+\n+#[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n+impl MetadataExt for Metadata {\n+    fn st_dev(&self) -> u64 {\n+        self.as_inner().as_inner().st_dev as u64\n+    }\n+    fn st_ino(&self) -> u64 {\n+        self.as_inner().as_inner().st_ino as u64\n+    }\n+    fn st_mode(&self) -> u32 {\n+        self.as_inner().as_inner().st_mode as u32\n+    }\n+    fn st_nlink(&self) -> u64 {\n+        self.as_inner().as_inner().st_nlink as u64\n+    }\n+    fn st_uid(&self) -> u32 {\n+        self.as_inner().as_inner().st_uid as u32\n+    }\n+    fn st_gid(&self) -> u32 {\n+        self.as_inner().as_inner().st_gid as u32\n+    }\n+    fn st_rdev(&self) -> u64 {\n+        self.as_inner().as_inner().st_rdev as u64\n+    }\n+    fn st_size(&self) -> u64 {\n+        self.as_inner().as_inner().st_size as u64\n+    }\n+    fn st_atime(&self) -> i64 {\n+        self.as_inner().as_inner().st_atim.tv_sec as i64\n+    }\n+    fn st_atime_nsec(&self) -> i64 {\n+        self.as_inner().as_inner().st_atim.tv_nsec as i64\n+    }\n+    fn st_mtime(&self) -> i64 {\n+        self.as_inner().as_inner().st_mtim.tv_sec as i64\n+    }\n+    fn st_mtime_nsec(&self) -> i64 {\n+        self.as_inner().as_inner().st_mtim.tv_nsec as i64\n+    }\n+    fn st_ctime(&self) -> i64 {\n+        self.as_inner().as_inner().st_ctim.tv_sec as i64\n+    }\n+    fn st_ctime_nsec(&self) -> i64 {\n+        self.as_inner().as_inner().st_ctim.tv_nsec as i64\n+    }\n+    fn st_blksize(&self) -> u64 {\n+        self.as_inner().as_inner().st_blksize as u64\n+    }\n+    fn st_blocks(&self) -> u64 {\n+        self.as_inner().as_inner().st_blocks as u64\n+    }\n+}"}, {"sha": "3e591dace9274acc7e2d4cff1a761629afd1c7e3", "filename": "library/std/src/os/nto/mod.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/864b6258fc7b493aec01f980b31ff23901c0edae/library%2Fstd%2Fsrc%2Fos%2Fnto%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864b6258fc7b493aec01f980b31ff23901c0edae/library%2Fstd%2Fsrc%2Fos%2Fnto%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fnto%2Fmod.rs?ref=864b6258fc7b493aec01f980b31ff23901c0edae", "patch": "@@ -0,0 +1,4 @@\n+#![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+\n+pub mod fs;\n+pub(super) mod raw;"}, {"sha": "90e9ad546432a723b3a7e517fdb615ee93eee493", "filename": "library/std/src/os/nto/raw.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/864b6258fc7b493aec01f980b31ff23901c0edae/library%2Fstd%2Fsrc%2Fos%2Fnto%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864b6258fc7b493aec01f980b31ff23901c0edae/library%2Fstd%2Fsrc%2Fos%2Fnto%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fnto%2Fraw.rs?ref=864b6258fc7b493aec01f980b31ff23901c0edae", "patch": "@@ -0,0 +1,40 @@\n+#![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+#![deprecated(\n+    since = \"1.8.0\",\n+    note = \"these type aliases are no longer supported by \\\n+            the standard library, the `libc` crate on \\\n+            crates.io should be used instead for the correct \\\n+            definitions\"\n+)]\n+#![allow(deprecated)]\n+\n+use crate::os::raw::c_int;\n+\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type dev_t = u32;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type mode_t = u32;\n+\n+#[stable(feature = \"pthread_t\", since = \"1.8.0\")]\n+pub type pthread_t = c_int;\n+\n+#[doc(inline)]\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub use self::arch::{blkcnt_t, blksize_t, ino_t, nlink_t, off_t, time_t};\n+\n+mod arch {\n+    use crate::os::raw::c_long;\n+\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub type blkcnt_t = i64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub type blksize_t = i32;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub type ino_t = u64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub type nlink_t = u32;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub type off_t = i64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub type time_t = c_long;\n+}"}, {"sha": "eb2d7ce117477932f24df9e08335910ec82a5a03", "filename": "library/std/src/os/unix/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/864b6258fc7b493aec01f980b31ff23901c0edae/library%2Fstd%2Fsrc%2Fos%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864b6258fc7b493aec01f980b31ff23901c0edae/library%2Fstd%2Fsrc%2Fos%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fmod.rs?ref=864b6258fc7b493aec01f980b31ff23901c0edae", "patch": "@@ -65,6 +65,8 @@ mod platform {\n     pub use crate::os::macos::*;\n     #[cfg(target_os = \"netbsd\")]\n     pub use crate::os::netbsd::*;\n+    #[cfg(target_os = \"nto\")]\n+    pub use crate::os::nto::*;\n     #[cfg(target_os = \"openbsd\")]\n     pub use crate::os::openbsd::*;\n     #[cfg(target_os = \"redox\")]\n@@ -95,7 +97,8 @@ pub mod thread;\n     target_os = \"watchos\",\n     target_os = \"macos\",\n     target_os = \"netbsd\",\n-    target_os = \"openbsd\"\n+    target_os = \"openbsd\",\n+    target_os = \"nto\",\n ))]\n pub mod ucred;\n "}, {"sha": "272b4f5dcd5adc088c6b94452785dedccb6cb116", "filename": "library/std/src/os/unix/net/datagram.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/864b6258fc7b493aec01f980b31ff23901c0edae/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fdatagram.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864b6258fc7b493aec01f980b31ff23901c0edae/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fdatagram.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fdatagram.rs?ref=864b6258fc7b493aec01f980b31ff23901c0edae", "patch": "@@ -19,7 +19,8 @@ use crate::{fmt, io};\n     target_os = \"freebsd\",\n     target_os = \"openbsd\",\n     target_os = \"netbsd\",\n-    target_os = \"haiku\"\n+    target_os = \"haiku\",\n+    target_os = \"nto\",\n ))]\n use libc::MSG_NOSIGNAL;\n #[cfg(not(any(\n@@ -29,7 +30,8 @@ use libc::MSG_NOSIGNAL;\n     target_os = \"freebsd\",\n     target_os = \"openbsd\",\n     target_os = \"netbsd\",\n-    target_os = \"haiku\"\n+    target_os = \"haiku\",\n+    target_os = \"nto\",\n )))]\n const MSG_NOSIGNAL: libc::c_int = 0x0;\n "}, {"sha": "f8c29a6d3a16a5ab190fdd5892feeca9352b6e8c", "filename": "library/std/src/os/unix/net/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/864b6258fc7b493aec01f980b31ff23901c0edae/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864b6258fc7b493aec01f980b31ff23901c0edae/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Ftests.rs?ref=864b6258fc7b493aec01f980b31ff23901c0edae", "patch": "@@ -167,6 +167,7 @@ fn long_path() {\n }\n \n #[test]\n+#[cfg(not(target_os = \"nto\"))]\n fn timeouts() {\n     let dir = tmpdir();\n     let socket_path = dir.path().join(\"sock\");"}, {"sha": "729c63d184f2c417826c56649187a3469ab7692f", "filename": "library/std/src/os/unix/process.rs", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/864b6258fc7b493aec01f980b31ff23901c0edae/library%2Fstd%2Fsrc%2Fos%2Funix%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864b6258fc7b493aec01f980b31ff23901c0edae/library%2Fstd%2Fsrc%2Fos%2Funix%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fprocess.rs?ref=864b6258fc7b493aec01f980b31ff23901c0edae", "patch": "@@ -12,15 +12,23 @@ use crate::sealed::Sealed;\n use crate::sys;\n use crate::sys_common::{AsInner, AsInnerMut, FromInner, IntoInner};\n \n-#[cfg(not(any(target_os = \"vxworks\", target_os = \"espidf\", target_os = \"horizon\")))]\n-type UserId = u32;\n-#[cfg(not(any(target_os = \"vxworks\", target_os = \"espidf\", target_os = \"horizon\")))]\n-type GroupId = u32;\n-\n-#[cfg(any(target_os = \"vxworks\", target_os = \"espidf\", target_os = \"horizon\"))]\n-type UserId = u16;\n-#[cfg(any(target_os = \"vxworks\", target_os = \"espidf\", target_os = \"horizon\"))]\n-type GroupId = u16;\n+use cfg_if::cfg_if;\n+\n+cfg_if! {\n+    if #[cfg(any(target_os = \"vxworks\", target_os = \"espidf\", target_os = \"horizon\"))] {\n+        type UserId = u16;\n+        type GroupId = u16;\n+    } else if #[cfg(target_os = \"nto\")] {\n+        // Both IDs are signed, see `sys/target_nto.h` of the QNX Neutrino SDP.\n+        // Only positive values should be used, see e.g.\n+        // https://www.qnx.com/developers/docs/7.1/#com.qnx.doc.neutrino.lib_ref/topic/s/setuid.html\n+        type UserId = i32;\n+        type GroupId = i32;\n+    } else {\n+        type UserId = u32;\n+        type GroupId = u32;\n+    }\n+}\n \n /// Unix-specific extensions to the [`process::Command`] builder.\n ///"}, {"sha": "95967eac29520740f3d10142cfee9f99fdda0493", "filename": "library/std/src/os/unix/ucred.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/864b6258fc7b493aec01f980b31ff23901c0edae/library%2Fstd%2Fsrc%2Fos%2Funix%2Fucred.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864b6258fc7b493aec01f980b31ff23901c0edae/library%2Fstd%2Fsrc%2Fos%2Funix%2Fucred.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fucred.rs?ref=864b6258fc7b493aec01f980b31ff23901c0edae", "patch": "@@ -79,7 +79,8 @@ pub mod impl_linux {\n     target_os = \"dragonfly\",\n     target_os = \"freebsd\",\n     target_os = \"openbsd\",\n-    target_os = \"netbsd\"\n+    target_os = \"netbsd\",\n+    target_os = \"nto\",\n ))]\n pub mod impl_bsd {\n     use super::UCred;"}, {"sha": "3d79058b320c5fbadadb5574df8d6a923b5f6d26", "filename": "library/std/src/sys/unix/args.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/864b6258fc7b493aec01f980b31ff23901c0edae/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864b6258fc7b493aec01f980b31ff23901c0edae/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fargs.rs?ref=864b6258fc7b493aec01f980b31ff23901c0edae", "patch": "@@ -69,7 +69,8 @@ impl DoubleEndedIterator for Args {\n     target_os = \"fuchsia\",\n     target_os = \"redox\",\n     target_os = \"vxworks\",\n-    target_os = \"horizon\"\n+    target_os = \"horizon\",\n+    target_os = \"nto\",\n ))]\n mod imp {\n     use super::Args;"}, {"sha": "1a9276f1110096416e008d0621ff8b0cdee66185", "filename": "library/std/src/sys/unix/env.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/864b6258fc7b493aec01f980b31ff23901c0edae/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864b6258fc7b493aec01f980b31ff23901c0edae/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fenv.rs?ref=864b6258fc7b493aec01f980b31ff23901c0edae", "patch": "@@ -185,6 +185,17 @@ pub mod os {\n     pub const EXE_EXTENSION: &str = \"\";\n }\n \n+#[cfg(target_os = \"nto\")]\n+pub mod os {\n+    pub const FAMILY: &str = \"unix\";\n+    pub const OS: &str = \"nto\";\n+    pub const DLL_PREFIX: &str = \"lib\";\n+    pub const DLL_SUFFIX: &str = \".so\";\n+    pub const DLL_EXTENSION: &str = \"so\";\n+    pub const EXE_SUFFIX: &str = \"\";\n+    pub const EXE_EXTENSION: &str = \"\";\n+}\n+\n #[cfg(target_os = \"redox\")]\n pub mod os {\n     pub const FAMILY: &str = \"unix\";"}, {"sha": "53523ca8c1d94e7158ffdc6e8242660c5df82890", "filename": "library/std/src/sys/unix/fd.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/864b6258fc7b493aec01f980b31ff23901c0edae/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864b6258fc7b493aec01f980b31ff23901c0edae/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffd.rs?ref=864b6258fc7b493aec01f980b31ff23901c0edae", "patch": "@@ -53,7 +53,12 @@ const fn max_iov() -> usize {\n     libc::IOV_MAX as usize\n }\n \n-#[cfg(any(target_os = \"android\", target_os = \"emscripten\", target_os = \"linux\"))]\n+#[cfg(any(\n+    target_os = \"android\",\n+    target_os = \"emscripten\",\n+    target_os = \"linux\",\n+    target_os = \"nto\",\n+))]\n const fn max_iov() -> usize {\n     libc::UIO_MAXIOV as usize\n }\n@@ -67,6 +72,7 @@ const fn max_iov() -> usize {\n     target_os = \"linux\",\n     target_os = \"macos\",\n     target_os = \"netbsd\",\n+    target_os = \"nto\",\n     target_os = \"openbsd\",\n     target_os = \"horizon\",\n     target_os = \"watchos\",\n@@ -207,7 +213,8 @@ impl FileDesc {\n         target_os = \"linux\",\n         target_os = \"haiku\",\n         target_os = \"redox\",\n-        target_os = \"vxworks\"\n+        target_os = \"vxworks\",\n+        target_os = \"nto\",\n     )))]\n     pub fn set_cloexec(&self) -> io::Result<()> {\n         unsafe {\n@@ -225,7 +232,8 @@ impl FileDesc {\n         target_os = \"linux\",\n         target_os = \"haiku\",\n         target_os = \"redox\",\n-        target_os = \"vxworks\"\n+        target_os = \"vxworks\",\n+        target_os = \"nto\",\n     ))]\n     pub fn set_cloexec(&self) -> io::Result<()> {\n         unsafe {"}, {"sha": "bdccb784674326378b3dd28a3b220e9338634add", "filename": "library/std/src/sys/unix/fs.rs", "status": "modified", "additions": 65, "deletions": 19, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/864b6258fc7b493aec01f980b31ff23901c0edae/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864b6258fc7b493aec01f980b31ff23901c0edae/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs?ref=864b6258fc7b493aec01f980b31ff23901c0edae", "patch": "@@ -13,7 +13,8 @@ use crate::mem;\n     target_os = \"solaris\",\n     target_os = \"fuchsia\",\n     target_os = \"redox\",\n-    target_os = \"illumos\"\n+    target_os = \"illumos\",\n+    target_os = \"nto\",\n ))]\n use crate::mem::MaybeUninit;\n use crate::os::unix::io::{AsFd, AsRawFd, BorrowedFd, FromRawFd, IntoRawFd};\n@@ -54,7 +55,8 @@ use libc::fstatat64;\n     target_os = \"solaris\",\n     target_os = \"fuchsia\",\n     target_os = \"redox\",\n-    target_os = \"illumos\"\n+    target_os = \"illumos\",\n+    target_os = \"nto\",\n ))]\n use libc::readdir as readdir64;\n #[cfg(target_os = \"linux\")]\n@@ -69,7 +71,8 @@ use libc::readdir64_r;\n     target_os = \"illumos\",\n     target_os = \"l4re\",\n     target_os = \"fuchsia\",\n-    target_os = \"redox\"\n+    target_os = \"redox\",\n+    target_os = \"nto\",\n )))]\n use libc::readdir_r as readdir64_r;\n #[cfg(target_os = \"android\")]\n@@ -277,7 +280,8 @@ unsafe impl Sync for Dir {}\n     target_os = \"solaris\",\n     target_os = \"illumos\",\n     target_os = \"fuchsia\",\n-    target_os = \"redox\"\n+    target_os = \"redox\",\n+    target_os = \"nto\",\n ))]\n pub struct DirEntry {\n     dir: Arc<InnerReadDir>,\n@@ -297,11 +301,12 @@ pub struct DirEntry {\n     target_os = \"solaris\",\n     target_os = \"illumos\",\n     target_os = \"fuchsia\",\n-    target_os = \"redox\"\n+    target_os = \"redox\",\n+    target_os = \"nto\",\n ))]\n struct dirent64_min {\n     d_ino: u64,\n-    #[cfg(not(any(target_os = \"solaris\", target_os = \"illumos\")))]\n+    #[cfg(not(any(target_os = \"solaris\", target_os = \"illumos\", target_os = \"nto\")))]\n     d_type: u8,\n }\n \n@@ -311,7 +316,8 @@ struct dirent64_min {\n     target_os = \"solaris\",\n     target_os = \"illumos\",\n     target_os = \"fuchsia\",\n-    target_os = \"redox\"\n+    target_os = \"redox\",\n+    target_os = \"nto\",\n )))]\n pub struct DirEntry {\n     dir: Arc<InnerReadDir>,\n@@ -438,7 +444,7 @@ impl FileAttr {\n     }\n }\n \n-#[cfg(not(target_os = \"netbsd\"))]\n+#[cfg(not(any(target_os = \"netbsd\", target_os = \"nto\")))]\n impl FileAttr {\n     #[cfg(not(any(target_os = \"vxworks\", target_os = \"espidf\", target_os = \"horizon\")))]\n     pub fn modified(&self) -> io::Result<SystemTime> {\n@@ -524,6 +530,21 @@ impl FileAttr {\n     }\n }\n \n+#[cfg(target_os = \"nto\")]\n+impl FileAttr {\n+    pub fn modified(&self) -> io::Result<SystemTime> {\n+        Ok(SystemTime::new(self.stat.st_mtim.tv_sec, self.stat.st_mtim.tv_nsec))\n+    }\n+\n+    pub fn accessed(&self) -> io::Result<SystemTime> {\n+        Ok(SystemTime::new(self.stat.st_atim.tv_sec, self.stat.st_atim.tv_nsec))\n+    }\n+\n+    pub fn created(&self) -> io::Result<SystemTime> {\n+        Ok(SystemTime::new(self.stat.st_ctim.tv_sec, self.stat.st_ctim.tv_nsec))\n+    }\n+}\n+\n impl AsInner<stat64> for FileAttr {\n     fn as_inner(&self) -> &stat64 {\n         &self.stat\n@@ -603,7 +624,8 @@ impl Iterator for ReadDir {\n         target_os = \"solaris\",\n         target_os = \"fuchsia\",\n         target_os = \"redox\",\n-        target_os = \"illumos\"\n+        target_os = \"illumos\",\n+        target_os = \"nto\",\n     ))]\n     fn next(&mut self) -> Option<io::Result<DirEntry>> {\n         if self.end_of_stream {\n@@ -686,7 +708,11 @@ impl Iterator for ReadDir {\n \n                 let entry = dirent64_min {\n                     d_ino: *offset_ptr!(entry_ptr, d_ino) as u64,\n-                    #[cfg(not(any(target_os = \"solaris\", target_os = \"illumos\")))]\n+                    #[cfg(not(any(\n+                        target_os = \"solaris\",\n+                        target_os = \"illumos\",\n+                        target_os = \"nto\",\n+                    )))]\n                     d_type: *offset_ptr!(entry_ptr, d_type) as u8,\n                 };\n \n@@ -705,7 +731,8 @@ impl Iterator for ReadDir {\n         target_os = \"solaris\",\n         target_os = \"fuchsia\",\n         target_os = \"redox\",\n-        target_os = \"illumos\"\n+        target_os = \"illumos\",\n+        target_os = \"nto\",\n     )))]\n     fn next(&mut self) -> Option<io::Result<DirEntry>> {\n         if self.end_of_stream {\n@@ -794,7 +821,8 @@ impl DirEntry {\n         target_os = \"solaris\",\n         target_os = \"illumos\",\n         target_os = \"haiku\",\n-        target_os = \"vxworks\"\n+        target_os = \"vxworks\",\n+        target_os = \"nto\",\n     ))]\n     pub fn file_type(&self) -> io::Result<FileType> {\n         self.metadata().map(|m| m.file_type())\n@@ -804,7 +832,8 @@ impl DirEntry {\n         target_os = \"solaris\",\n         target_os = \"illumos\",\n         target_os = \"haiku\",\n-        target_os = \"vxworks\"\n+        target_os = \"vxworks\",\n+        target_os = \"nto\",\n     )))]\n     pub fn file_type(&self) -> io::Result<FileType> {\n         match self.entry.d_type {\n@@ -834,7 +863,8 @@ impl DirEntry {\n         target_os = \"redox\",\n         target_os = \"vxworks\",\n         target_os = \"espidf\",\n-        target_os = \"horizon\"\n+        target_os = \"horizon\",\n+        target_os = \"nto\",\n     ))]\n     pub fn ino(&self) -> u64 {\n         self.entry.d_ino as u64\n@@ -887,7 +917,8 @@ impl DirEntry {\n         target_os = \"solaris\",\n         target_os = \"illumos\",\n         target_os = \"fuchsia\",\n-        target_os = \"redox\"\n+        target_os = \"redox\",\n+        target_os = \"nto\",\n     )))]\n     fn name_cstr(&self) -> &CStr {\n         unsafe { CStr::from_ptr(self.entry.d_name.as_ptr()) }\n@@ -898,7 +929,8 @@ impl DirEntry {\n         target_os = \"solaris\",\n         target_os = \"illumos\",\n         target_os = \"fuchsia\",\n-        target_os = \"redox\"\n+        target_os = \"redox\",\n+        target_os = \"nto\",\n     ))]\n     fn name_cstr(&self) -> &CStr {\n         &self.name\n@@ -1051,7 +1083,8 @@ impl File {\n             target_os = \"linux\",\n             target_os = \"android\",\n             target_os = \"netbsd\",\n-            target_os = \"openbsd\"\n+            target_os = \"openbsd\",\n+            target_os = \"nto\",\n         ))]\n         unsafe fn os_datasync(fd: c_int) -> c_int {\n             libc::fdatasync(fd)\n@@ -1065,6 +1098,7 @@ impl File {\n             target_os = \"netbsd\",\n             target_os = \"openbsd\",\n             target_os = \"watchos\",\n+            target_os = \"nto\",\n         )))]\n         unsafe fn os_datasync(fd: c_int) -> c_int {\n             libc::fsync(fd)\n@@ -1750,13 +1784,25 @@ pub fn chroot(dir: &Path) -> io::Result<()> {\n pub use remove_dir_impl::remove_dir_all;\n \n // Fallback for REDOX, ESP-ID, Horizon, and Miri\n-#[cfg(any(target_os = \"redox\", target_os = \"espidf\", target_os = \"horizon\", miri))]\n+#[cfg(any(\n+    target_os = \"redox\",\n+    target_os = \"espidf\",\n+    target_os = \"horizon\",\n+    target_os = \"nto\",\n+    miri\n+))]\n mod remove_dir_impl {\n     pub use crate::sys_common::fs::remove_dir_all;\n }\n \n // Modern implementation using openat(), unlinkat() and fdopendir()\n-#[cfg(not(any(target_os = \"redox\", target_os = \"espidf\", target_os = \"horizon\", miri)))]\n+#[cfg(not(any(\n+    target_os = \"redox\",\n+    target_os = \"espidf\",\n+    target_os = \"horizon\",\n+    target_os = \"nto\",\n+    miri\n+)))]\n mod remove_dir_impl {\n     use super::{lstat, Dir, DirEntry, InnerReadDir, ReadDir};\n     use crate::ffi::CStr;"}, {"sha": "192fa216dfaf5e7c40f6102be89cfda7dbcd918b", "filename": "library/std/src/sys/unix/locks/pthread_condvar.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/864b6258fc7b493aec01f980b31ff23901c0edae/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fpthread_condvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864b6258fc7b493aec01f980b31ff23901c0edae/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fpthread_condvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fpthread_condvar.rs?ref=864b6258fc7b493aec01f980b31ff23901c0edae", "patch": "@@ -2,7 +2,10 @@ use crate::cell::UnsafeCell;\n use crate::ptr;\n use crate::sync::atomic::{AtomicPtr, Ordering::Relaxed};\n use crate::sys::locks::{pthread_mutex, Mutex};\n+#[cfg(not(target_os = \"nto\"))]\n use crate::sys::time::TIMESPEC_MAX;\n+#[cfg(target_os = \"nto\")]\n+use crate::sys::time::TIMESPEC_MAX_CAPPED;\n use crate::sys_common::lazy_box::{LazyBox, LazyInit};\n use crate::time::Duration;\n \n@@ -132,10 +135,18 @@ impl Condvar {\n         let mutex = pthread_mutex::raw(mutex);\n         self.verify(mutex);\n \n+        #[cfg(not(target_os = \"nto\"))]\n         let timeout = Timespec::now(libc::CLOCK_MONOTONIC)\n             .checked_add_duration(&dur)\n             .and_then(|t| t.to_timespec())\n             .unwrap_or(TIMESPEC_MAX);\n+\n+        #[cfg(target_os = \"nto\")]\n+        let timeout = Timespec::now(libc::CLOCK_MONOTONIC)\n+            .checked_add_duration(&dur)\n+            .and_then(|t| t.to_timespec_capped())\n+            .unwrap_or(TIMESPEC_MAX_CAPPED);\n+\n         let r = libc::pthread_cond_timedwait(raw(self), mutex, &timeout);\n         assert!(r == libc::ETIMEDOUT || r == 0);\n         r == 0"}, {"sha": "8e05b618daa02a0bd9455c08087534e77eb5a327", "filename": "library/std/src/sys/unix/net.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/864b6258fc7b493aec01f980b31ff23901c0edae/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864b6258fc7b493aec01f980b31ff23901c0edae/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fnet.rs?ref=864b6258fc7b493aec01f980b31ff23901c0edae", "patch": "@@ -78,6 +78,7 @@ impl Socket {\n                     target_os = \"linux\",\n                     target_os = \"netbsd\",\n                     target_os = \"openbsd\",\n+                    target_os = \"nto\",\n                 ))] {\n                     // On platforms that support it we pass the SOCK_CLOEXEC\n                     // flag to atomically create the socket and set it as\n@@ -115,6 +116,7 @@ impl Socket {\n                     target_os = \"linux\",\n                     target_os = \"netbsd\",\n                     target_os = \"openbsd\",\n+                    target_os = \"nto\",\n                 ))] {\n                     // Like above, set cloexec atomically\n                     cvt(libc::socketpair(fam, ty | libc::SOCK_CLOEXEC, 0, fds.as_mut_ptr()))?;"}, {"sha": "21b035fb37379f3df9719109dde40cf5d04cb47f", "filename": "library/std/src/sys/unix/os.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/864b6258fc7b493aec01f980b31ff23901c0edae/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864b6258fc7b493aec01f980b31ff23901c0edae/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs?ref=864b6258fc7b493aec01f980b31ff23901c0edae", "patch": "@@ -62,6 +62,7 @@ extern \"C\" {\n         link_name = \"__errno\"\n     )]\n     #[cfg_attr(any(target_os = \"solaris\", target_os = \"illumos\"), link_name = \"___errno\")]\n+    #[cfg_attr(target_os = \"nto\", link_name = \"__get_errno_ptr\")]\n     #[cfg_attr(\n         any(target_os = \"macos\", target_os = \"ios\", target_os = \"freebsd\", target_os = \"watchos\"),\n         link_name = \"__error\"\n@@ -361,6 +362,17 @@ pub fn current_exe() -> io::Result<PathBuf> {\n     }\n }\n \n+#[cfg(target_os = \"nto\")]\n+pub fn current_exe() -> io::Result<PathBuf> {\n+    let mut e = crate::fs::read(\"/proc/self/exefile\")?;\n+    // Current versions of QNX Neutrino provide a null-terminated path.\n+    // Ensure the trailing null byte is not returned here.\n+    if let Some(0) = e.last() {\n+        e.pop();\n+    }\n+    Ok(PathBuf::from(OsString::from_vec(e)))\n+}\n+\n #[cfg(any(target_os = \"macos\", target_os = \"ios\", target_os = \"watchos\"))]\n pub fn current_exe() -> io::Result<PathBuf> {\n     unsafe {"}, {"sha": "ceaff5966846094815adc0130a43d4ddf66d3b03", "filename": "library/std/src/sys/unix/process/process_unix.rs", "status": "modified", "additions": 70, "deletions": 4, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/864b6258fc7b493aec01f980b31ff23901c0edae/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864b6258fc7b493aec01f980b31ff23901c0edae/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs?ref=864b6258fc7b493aec01f980b31ff23901c0edae", "patch": "@@ -18,6 +18,7 @@ use crate::sys::weak::raw_syscall;\n     target_os = \"freebsd\",\n     all(target_os = \"linux\", target_env = \"gnu\"),\n     all(target_os = \"linux\", target_env = \"musl\"),\n+    target_os = \"nto\",\n ))]\n use crate::sys::weak::weak;\n \n@@ -30,6 +31,15 @@ use libc::{c_int, pid_t};\n #[cfg(not(any(target_os = \"vxworks\", target_os = \"l4re\")))]\n use libc::{gid_t, uid_t};\n \n+cfg_if::cfg_if! {\n+    if #[cfg(all(target_os = \"nto\", target_env = \"nto71\"))] {\n+        use crate::thread;\n+        use libc::{c_char, posix_spawn_file_actions_t, posix_spawnattr_t};\n+        // arbitrary number of tries:\n+        const MAX_FORKSPAWN_TRIES: u32 = 4;\n+    }\n+}\n+\n ////////////////////////////////////////////////////////////////////////////////\n // Command\n ////////////////////////////////////////////////////////////////////////////////\n@@ -140,11 +150,31 @@ impl Command {\n \n     // Attempts to fork the process. If successful, returns Ok((0, -1))\n     // in the child, and Ok((child_pid, -1)) in the parent.\n-    #[cfg(not(target_os = \"linux\"))]\n+    #[cfg(not(any(target_os = \"linux\", all(target_os = \"nto\", target_env = \"nto71\"))))]\n     unsafe fn do_fork(&mut self) -> Result<(pid_t, pid_t), io::Error> {\n         cvt(libc::fork()).map(|res| (res, -1))\n     }\n \n+    // On QNX Neutrino, fork can fail with EBADF in case \"another thread might have opened\n+    // or closed a file descriptor while the fork() was occurring\".\n+    // Documentation says \"... or try calling fork() again\". This is what we do here.\n+    // See also https://www.qnx.com/developers/docs/7.1/#com.qnx.doc.neutrino.lib_ref/topic/f/fork.html\n+    #[cfg(all(target_os = \"nto\", target_env = \"nto71\"))]\n+    unsafe fn do_fork(&mut self) -> Result<(pid_t, pid_t), io::Error> {\n+        use crate::sys::os::errno;\n+\n+        let mut tries_left = MAX_FORKSPAWN_TRIES;\n+        loop {\n+            let r = libc::fork();\n+            if r == -1 as libc::pid_t && tries_left > 0 && errno() as libc::c_int == libc::EBADF {\n+                thread::yield_now();\n+                tries_left -= 1;\n+            } else {\n+                return cvt(r).map(|res| (res, -1));\n+            }\n+        }\n+    }\n+\n     // Attempts to fork the process. If successful, returns Ok((0, -1))\n     // in the child, and Ok((child_pid, child_pidfd)) in the parent.\n     #[cfg(target_os = \"linux\")]\n@@ -389,6 +419,7 @@ impl Command {\n         target_os = \"freebsd\",\n         all(target_os = \"linux\", target_env = \"gnu\"),\n         all(target_os = \"linux\", target_env = \"musl\"),\n+        target_os = \"nto\",\n     )))]\n     fn posix_spawn(\n         &mut self,\n@@ -405,6 +436,7 @@ impl Command {\n         target_os = \"freebsd\",\n         all(target_os = \"linux\", target_env = \"gnu\"),\n         all(target_os = \"linux\", target_env = \"musl\"),\n+        target_os = \"nto\",\n     ))]\n     fn posix_spawn(\n         &mut self,\n@@ -436,6 +468,34 @@ impl Command {\n             }\n         }\n \n+        // On QNX Neutrino, posix_spawnp can fail with EBADF in case \"another thread might have opened\n+        // or closed a file descriptor while the posix_spawn() was occurring\".\n+        // Documentation says \"... or try calling posix_spawn() again\". This is what we do here.\n+        // See also http://www.qnx.com/developers/docs/7.1/#com.qnx.doc.neutrino.lib_ref/topic/p/posix_spawn.html\n+        #[cfg(all(target_os = \"nto\", target_env = \"nto71\"))]\n+        unsafe fn retrying_libc_posix_spawnp(\n+            pid: *mut pid_t,\n+            file: *const c_char,\n+            file_actions: *const posix_spawn_file_actions_t,\n+            attrp: *const posix_spawnattr_t,\n+            argv: *const *mut c_char,\n+            envp: *const *mut c_char,\n+        ) -> i32 {\n+            let mut tries_left = MAX_FORKSPAWN_TRIES;\n+            loop {\n+                match libc::posix_spawnp(pid, file, file_actions, attrp, argv, envp) {\n+                    libc::EBADF if tries_left > 0 => {\n+                        thread::yield_now();\n+                        tries_left -= 1;\n+                        continue;\n+                    }\n+                    r => {\n+                        return r;\n+                    }\n+                }\n+            }\n+        }\n+\n         // Solaris, glibc 2.29+, and musl 1.24+ can set a new working directory,\n         // and maybe others will gain this non-POSIX function too. We'll check\n         // for this weak symbol as soon as it's needed, so we can return early\n@@ -555,7 +615,12 @@ impl Command {\n             // Make sure we synchronize access to the global `environ` resource\n             let _env_lock = sys::os::env_read_lock();\n             let envp = envp.map(|c| c.as_ptr()).unwrap_or_else(|| *sys::os::environ() as *const _);\n-            cvt_nz(libc::posix_spawnp(\n+\n+            #[cfg(not(target_os = \"nto\"))]\n+            let spawn_fn = libc::posix_spawnp;\n+            #[cfg(target_os = \"nto\")]\n+            let spawn_fn = retrying_libc_posix_spawnp;\n+            cvt_nz(spawn_fn(\n                 &mut p.pid,\n                 self.get_program_cstr().as_ptr(),\n                 file_actions.0.as_ptr(),\n@@ -760,7 +825,7 @@ fn signal_string(signal: i32) -> &'static str {\n             )\n         ))]\n         libc::SIGSTKFLT => \" (SIGSTKFLT)\",\n-        #[cfg(target_os = \"linux\")]\n+        #[cfg(any(target_os = \"linux\", target_os = \"nto\"))]\n         libc::SIGPWR => \" (SIGPWR)\",\n         #[cfg(any(\n             target_os = \"macos\",\n@@ -769,7 +834,8 @@ fn signal_string(signal: i32) -> &'static str {\n             target_os = \"freebsd\",\n             target_os = \"netbsd\",\n             target_os = \"openbsd\",\n-            target_os = \"dragonfly\"\n+            target_os = \"dragonfly\",\n+            target_os = \"nto\",\n         ))]\n         libc::SIGEMT => \" (SIGEMT)\",\n         #[cfg(any("}, {"sha": "15070b1f6a7db8b9bf33e89f2e886ce22e7f2d1f", "filename": "library/std/src/sys/unix/thread.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/864b6258fc7b493aec01f980b31ff23901c0edae/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864b6258fc7b493aec01f980b31ff23901c0edae/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs?ref=864b6258fc7b493aec01f980b31ff23901c0edae", "patch": "@@ -9,7 +9,7 @@ use crate::time::Duration;\n \n #[cfg(all(target_os = \"linux\", target_env = \"gnu\"))]\n use crate::sys::weak::dlsym;\n-#[cfg(any(target_os = \"solaris\", target_os = \"illumos\"))]\n+#[cfg(any(target_os = \"solaris\", target_os = \"illumos\", target_os = \"nto\"))]\n use crate::sys::weak::weak;\n #[cfg(not(any(target_os = \"l4re\", target_os = \"vxworks\", target_os = \"espidf\")))]\n pub const DEFAULT_MIN_STACK_SIZE: usize = 2 * 1024 * 1024;\n@@ -173,7 +173,7 @@ impl Thread {\n         }\n     }\n \n-    #[cfg(any(target_os = \"solaris\", target_os = \"illumos\"))]\n+    #[cfg(any(target_os = \"solaris\", target_os = \"illumos\", target_os = \"nto\"))]\n     pub fn set_name(name: &CStr) {\n         weak! {\n             fn pthread_setname_np(\n@@ -381,6 +381,17 @@ pub fn available_parallelism() -> io::Result<NonZeroUsize> {\n             }\n \n             Ok(unsafe { NonZeroUsize::new_unchecked(cpus as usize) })\n+        } else if #[cfg(target_os = \"nto\")] {\n+            unsafe {\n+                use libc::_syspage_ptr;\n+                if _syspage_ptr.is_null() {\n+                    Err(io::const_io_error!(io::ErrorKind::NotFound, \"No syspage available\"))\n+                } else {\n+                    let cpus = (*_syspage_ptr).num_cpu;\n+                    NonZeroUsize::new(cpus as usize)\n+                        .ok_or(io::const_io_error!(io::ErrorKind::NotFound, \"The number of hardware threads is not known for the target platform\"))\n+                }\n+            }\n         } else if #[cfg(target_os = \"haiku\")] {\n             // system_info cpu_count field gets the static data set at boot time with `smp_set_num_cpus`\n             // `get_system_info` calls then `smp_get_num_cpus`"}, {"sha": "43046ed07b82c9f56eca59e6b2fc6a3b7b159c36", "filename": "library/std/src/sys/unix/thread_parking/pthread.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/864b6258fc7b493aec01f980b31ff23901c0edae/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread_parking%2Fpthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864b6258fc7b493aec01f980b31ff23901c0edae/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread_parking%2Fpthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread_parking%2Fpthread.rs?ref=864b6258fc7b493aec01f980b31ff23901c0edae", "patch": "@@ -6,7 +6,10 @@ use crate::pin::Pin;\n use crate::ptr::addr_of_mut;\n use crate::sync::atomic::AtomicUsize;\n use crate::sync::atomic::Ordering::SeqCst;\n+#[cfg(not(target_os = \"nto\"))]\n use crate::sys::time::TIMESPEC_MAX;\n+#[cfg(target_os = \"nto\")]\n+use crate::sys::time::TIMESPEC_MAX_CAPPED;\n use crate::time::Duration;\n \n const EMPTY: usize = 0;\n@@ -80,8 +83,14 @@ unsafe fn wait_timeout(\n         (Timespec::now(libc::CLOCK_MONOTONIC), dur)\n     };\n \n+    #[cfg(not(target_os = \"nto\"))]\n     let timeout =\n         now.checked_add_duration(&dur).and_then(|t| t.to_timespec()).unwrap_or(TIMESPEC_MAX);\n+    #[cfg(target_os = \"nto\")]\n+    let timeout = now\n+        .checked_add_duration(&dur)\n+        .and_then(|t| t.to_timespec_capped())\n+        .unwrap_or(TIMESPEC_MAX_CAPPED);\n     let r = libc::pthread_cond_timedwait(cond, lock, &timeout);\n     debug_assert!(r == libc::ETIMEDOUT || r == 0);\n }"}, {"sha": "0f11de8f5b8be2320c566fde5ccb25289427649a", "filename": "library/std/src/sys/unix/time.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/864b6258fc7b493aec01f980b31ff23901c0edae/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864b6258fc7b493aec01f980b31ff23901c0edae/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ftime.rs?ref=864b6258fc7b493aec01f980b31ff23901c0edae", "patch": "@@ -9,6 +9,14 @@ pub const UNIX_EPOCH: SystemTime = SystemTime { t: Timespec::zero() };\n pub const TIMESPEC_MAX: libc::timespec =\n     libc::timespec { tv_sec: <libc::time_t>::MAX, tv_nsec: 1_000_000_000 - 1 };\n \n+// This additional constant is only used when calling\n+// `libc::pthread_cond_timedwait`.\n+#[cfg(target_os = \"nto\")]\n+pub(super) const TIMESPEC_MAX_CAPPED: libc::timespec = libc::timespec {\n+    tv_sec: (u64::MAX / NSEC_PER_SEC) as i64,\n+    tv_nsec: (u64::MAX % NSEC_PER_SEC) as i64,\n+};\n+\n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]\n #[repr(transparent)]\n #[rustc_layout_scalar_valid_range_start(0)]\n@@ -144,6 +152,20 @@ impl Timespec {\n             tv_nsec: self.tv_nsec.0.try_into().ok()?,\n         })\n     }\n+\n+    // On QNX Neutrino, the maximum timespec for e.g. pthread_cond_timedwait\n+    // is 2^64 nanoseconds\n+    #[cfg(target_os = \"nto\")]\n+    pub(super) fn to_timespec_capped(&self) -> Option<libc::timespec> {\n+        // Check if timeout in nanoseconds would fit into an u64\n+        if (self.tv_nsec.0 as u64)\n+            .checked_add((self.tv_sec as u64).checked_mul(NSEC_PER_SEC)?)\n+            .is_none()\n+        {\n+            return None;\n+        }\n+        self.to_timespec()\n+    }\n }\n \n impl From<libc::timespec> for Timespec {"}, {"sha": "8752f46ff81e3aa23b9c714ec319028b47c82f58", "filename": "library/std/src/sys_common/backtrace.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/864b6258fc7b493aec01f980b31ff23901c0edae/library%2Fstd%2Fsrc%2Fsys_common%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864b6258fc7b493aec01f980b31ff23901c0edae/library%2Fstd%2Fsrc%2Fsys_common%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fbacktrace.rs?ref=864b6258fc7b493aec01f980b31ff23901c0edae", "patch": "@@ -91,6 +91,19 @@ unsafe fn _print_fmt(fmt: &mut fmt::Formatter<'_>, print_fmt: PrintFmt) -> fmt::\n         if stop {\n             return false;\n         }\n+        #[cfg(target_os = \"nto\")]\n+        if libc::__my_thread_exit as *mut libc::c_void == frame.ip() {\n+            if !hit && start {\n+                use crate::backtrace_rs::SymbolName;\n+                res = bt_fmt.frame().print_raw(\n+                    frame.ip(),\n+                    Some(SymbolName::new(\"__my_thread_exit\".as_bytes())),\n+                    None,\n+                    None,\n+                );\n+            }\n+            return false;\n+        }\n         if !hit && start {\n             res = bt_fmt.frame().print_raw(frame.ip(), None, None, None);\n         }"}, {"sha": "85ecc1def3a2e52d46b0fe8eb09b5c595d6d097d", "filename": "library/std/src/sys_common/net.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/864b6258fc7b493aec01f980b31ff23901c0edae/library%2Fstd%2Fsrc%2Fsys_common%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864b6258fc7b493aec01f980b31ff23901c0edae/library%2Fstd%2Fsrc%2Fsys_common%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fnet.rs?ref=864b6258fc7b493aec01f980b31ff23901c0edae", "patch": "@@ -21,7 +21,7 @@ cfg_if::cfg_if! {\n         target_os = \"dragonfly\", target_os = \"freebsd\",\n         target_os = \"ios\", target_os = \"macos\", target_os = \"watchos\",\n         target_os = \"openbsd\", target_os = \"netbsd\", target_os = \"illumos\",\n-        target_os = \"solaris\", target_os = \"haiku\", target_os = \"l4re\"))] {\n+        target_os = \"solaris\", target_os = \"haiku\", target_os = \"l4re\", target_os = \"nto\"))] {\n         use crate::sys::net::netc::IPV6_JOIN_GROUP as IPV6_ADD_MEMBERSHIP;\n         use crate::sys::net::netc::IPV6_LEAVE_GROUP as IPV6_DROP_MEMBERSHIP;\n     } else {\n@@ -35,7 +35,7 @@ cfg_if::cfg_if! {\n         target_os = \"linux\", target_os = \"android\",\n         target_os = \"dragonfly\", target_os = \"freebsd\",\n         target_os = \"openbsd\", target_os = \"netbsd\",\n-        target_os = \"haiku\"))] {\n+        target_os = \"haiku\", target_os = \"nto\"))] {\n         use libc::MSG_NOSIGNAL;\n     } else {\n         const MSG_NOSIGNAL: c_int = 0x0;\n@@ -46,7 +46,8 @@ cfg_if::cfg_if! {\n     if #[cfg(any(\n         target_os = \"dragonfly\", target_os = \"freebsd\",\n         target_os = \"openbsd\", target_os = \"netbsd\",\n-        target_os = \"solaris\", target_os = \"illumos\"))] {\n+        target_os = \"solaris\", target_os = \"illumos\",\n+        target_os = \"nto\"))] {\n         use crate::ffi::c_uchar;\n         type IpV4MultiCastType = c_uchar;\n     } else {"}, {"sha": "89360e45601a783013b54b4ddb0b4f198b751bb5", "filename": "library/std/src/sys_common/thread_local_key.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/864b6258fc7b493aec01f980b31ff23901c0edae/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_local_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864b6258fc7b493aec01f980b31ff23901c0edae/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_local_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_local_key.rs?ref=864b6258fc7b493aec01f980b31ff23901c0edae", "patch": "@@ -117,9 +117,15 @@ pub struct Key {\n /// This value specifies no destructor by default.\n pub const INIT: StaticKey = StaticKey::new(None);\n \n-// Define a sentinel value that is unlikely to be returned\n-// as a TLS key (but it may be returned).\n+// Define a sentinel value that is likely not to be returned\n+// as a TLS key.\n+#[cfg(not(target_os = \"nto\"))]\n const KEY_SENTVAL: usize = 0;\n+// On QNX Neutrino, 0 is always returned when currently not in use.\n+// Using 0 would mean to always create two keys and remote the first\n+// one (with value of 0) immediately afterwards.\n+#[cfg(target_os = \"nto\")]\n+const KEY_SENTVAL: usize = libc::PTHREAD_KEYS_MAX + 1;\n \n impl StaticKey {\n     #[rustc_const_unstable(feature = \"thread_local_internals\", issue = \"none\")]"}, {"sha": "edc10aa39afbaa0cfacd6c143724b129320eb820", "filename": "library/unwind/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/864b6258fc7b493aec01f980b31ff23901c0edae/library%2Funwind%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864b6258fc7b493aec01f980b31ff23901c0edae/library%2Funwind%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Funwind%2Fsrc%2Flib.rs?ref=864b6258fc7b493aec01f980b31ff23901c0edae", "patch": "@@ -127,3 +127,7 @@ extern \"C\" {}\n #[cfg(target_os = \"haiku\")]\n #[link(name = \"gcc_s\")]\n extern \"C\" {}\n+\n+#[cfg(target_os = \"nto\")]\n+#[link(name = \"gcc_s\")]\n+extern \"C\" {}"}, {"sha": "b2ce2bd529b5ed8a9161b43083089d0cebbf2a5d", "filename": "src/doc/rustc/src/platform-support.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/864b6258fc7b493aec01f980b31ff23901c0edae/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "raw_url": "https://github.com/rust-lang/rust/raw/864b6258fc7b493aec01f980b31ff23901c0edae/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md?ref=864b6258fc7b493aec01f980b31ff23901c0edae", "patch": "@@ -216,7 +216,7 @@ target | std | host | notes\n [`aarch64-kmc-solid_asp3`](platform-support/kmc-solid.md) | \u2713 |  | ARM64 SOLID with TOPPERS/ASP3\n [`aarch64-nintendo-switch-freestanding`](platform-support/aarch64-nintendo-switch-freestanding.md) | * |  | ARM64 Nintendo Switch, Horizon\n [`aarch64-pc-windows-gnullvm`](platform-support/pc-windows-gnullvm.md) | \u2713 | \u2713 |\n-[`aarch64-unknown-nto-qnx710`](platform-support/nto-qnx.md) | ? |  | ARM64 QNX Neutrino 7.1 RTOS |\n+[`aarch64-unknown-nto-qnx710`](platform-support/nto-qnx.md) | \u2713 |  | ARM64 QNX Neutrino 7.1 RTOS |\n `aarch64-unknown-freebsd` | \u2713 | \u2713 | ARM64 FreeBSD\n `aarch64-unknown-hermit` | \u2713 |  | ARM64 HermitCore\n `aarch64-unknown-linux-gnu_ilp32` | \u2713 | \u2713 | ARM64 Linux (ILP32 ABI)\n@@ -308,7 +308,7 @@ target | std | host | notes\n `x86_64-apple-ios-macabi` | \u2713 |  | Apple Catalyst on x86_64\n `x86_64-apple-tvos` | * | | x86 64-bit tvOS\n [`x86_64-apple-watchos-sim`](platform-support/apple-watchos.md) | \u2713 | | x86 64-bit Apple WatchOS simulator\n-[`x86_64-pc-nto-qnx710`](platform-support/nto-qnx.md) | ? |  | x86 64-bit QNX Neutrino 7.1 RTOS |\n+[`x86_64-pc-nto-qnx710`](platform-support/nto-qnx.md) | \u2713 |  | x86 64-bit QNX Neutrino 7.1 RTOS |\n [`x86_64-pc-windows-gnullvm`](platform-support/pc-windows-gnullvm.md) | \u2713 | \u2713 |\n `x86_64-pc-windows-msvc` | * |  | 64-bit Windows XP support\n `x86_64-sun-solaris` | ? |  | Deprecated target for 64-bit Solaris 10/11, illumos"}, {"sha": "38198fe6c3a0a85d8800c843925a234782ef8376", "filename": "src/doc/rustc/src/platform-support/nto-qnx.md", "status": "modified", "additions": 150, "deletions": 25, "changes": 175, "blob_url": "https://github.com/rust-lang/rust/blob/864b6258fc7b493aec01f980b31ff23901c0edae/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Fnto-qnx.md", "raw_url": "https://github.com/rust-lang/rust/raw/864b6258fc7b493aec01f980b31ff23901c0edae/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Fnto-qnx.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Fnto-qnx.md?ref=864b6258fc7b493aec01f980b31ff23901c0edae", "patch": "@@ -2,9 +2,9 @@\n \n **Tier: 3**\n \n-[BlackBerry\u00ae QNX\u00ae][BlackBerry] Neutrino (nto) Real-time operating system.\n+[QNX\u00ae][BlackBerry] Neutrino (nto) Real-time operating system.\n The support has been implemented jointly by [Elektrobit Automotive GmbH][Elektrobit]\n-and [BlackBerry][BlackBerry].\n+and [Blackberry QNX][BlackBerry].\n \n [BlackBerry]: https://blackberry.qnx.com\n [Elektrobit]: https://www.elektrobit.com\n@@ -19,19 +19,24 @@ and [BlackBerry][BlackBerry].\n Currently, only cross-compilation for QNX Neutrino on AArch64 and x86_64 are supported (little endian).\n Adding other architectures that are supported by QNX Neutrino is possible.\n \n-The standard library does not yet support QNX Neutrino. Therefore, only `no_std` code can\n-be compiled.\n+The standard library, including `core` and `alloc` (with default allocator) are supported.\n \n-`core` and `alloc` (with default allocator) are supported.\n+For building or using the Rust toolchain for QNX Neutrino, the\n+[QNX Software Development Platform (SDP)](https://blackberry.qnx.com/en/products/foundation-software/qnx-software-development-platform)\n+must be installed and initialized.\n+Initialization is usually done by sourcing `qnxsdp-env.sh` (this will be installed as part of the SDP, see also installation instruction provided with the SDP).\n+Afterwards [`qcc`](https://www.qnx.com/developers/docs/7.1/#com.qnx.doc.neutrino.utilities/topic/q/qcc.html) (QNX C/C++ compiler)\n+should be available (in the `$PATH` variable).\n+`qcc` will be called e.g. for linking executables.\n \n-Applications must link against `libc.so` (see example). This is required because applications\n-always link against the `crt` library and `crt` depends on `libc.so`.\n-\n-The correct version of `qcc` must be available by setting the `$PATH` variable (e.g. by sourcing `qnxsdp-env.sh` of the\n-QNX Neutrino toolchain).\n+When linking `no_std` applications, they must link against `libc.so` (see example). This is\n+required because applications always link against the `crt` library and `crt` depends on `libc.so`.\n+This is done automatically when using the standard library.\n \n ### Small example application\n \n+Small `no_std` example is shown below. Applications using the standard library work as well.\n+\n ```rust,ignore (platform-specific)\n #![no_std]\n #![no_main]\n@@ -89,30 +94,150 @@ changelog-seen = 2\n \n 2. Compile the Rust toolchain for an `x86_64-unknown-linux-gnu` host (for both `aarch64` and `x86_64` targets)\n \n-Run the following:\n+Compiling the Rust toolchain requires the same environment variables used for compiling C binaries.\n+Refer to the [QNX developer manual](https://www.qnx.com/developers/docs/7.1/#com.qnx.doc.neutrino.prog/topic/devel_OS_version.html).\n+\n+To compile for QNX Neutrino (aarch64 and x86_64) and Linux (x86_64):\n \n ```bash\n-env \\\n-    CC_aarch64-unknown-nto-qnx710=\"qcc\" \\\n-    CFLAGS_aarch64-unknown-nto-qnx710=\"-Vgcc_ntoaarch64le_cxx\" \\\n-    CXX_aarch64-unknown-nto-qnx710=\"qcc\" \\\n-    AR_aarch64_unknown_nto_qnx710=\"ntoaarch64-ar\" \\\n-    CC_x86_64-pc-nto-qnx710=\"qcc\" \\\n-    CFLAGS_x86_64-pc-nto-qnx710=\"-Vgcc_ntox86_64_cxx\" \\\n-    CXX_x86_64-pc-nto-qnx710=\"qcc\" \\\n-    AR_x86_64_pc_nto_qnx710=\"ntox86_64-ar\" \\\n-        ./x.py build --target aarch64-unknown-nto-qnx710 --target x86_64-pc-nto-qnx710 --target x86_64-unknown-linux-gnu rustc library/core library/alloc/\n+export build_env='\n+    CC_aarch64-unknown-nto-qnx710=qcc\n+    CFLAGS_aarch64-unknown-nto-qnx710=-Vgcc_ntoaarch64le_cxx\n+    CXX_aarch64-unknown-nto-qnx710=qcc\n+    AR_aarch64_unknown_nto_qnx710=ntoaarch64-ar\n+    CC_x86_64-pc-nto-qnx710=qcc\n+    CFLAGS_x86_64-pc-nto-qnx710=-Vgcc_ntox86_64_cxx\n+    CXX_x86_64-pc-nto-qnx710=qcc\n+    AR_x86_64_pc_nto_qnx710=ntox86_64-ar'\n+\n+env $build_env \\\n+    ./x.py build \\\n+        --target aarch64-unknown-nto-qnx710 \\\n+        --target x86_64-pc-nto-qnx710 \\\n+        --target x86_64-unknown-linux-gnu \\\n+        rustc library/core library/alloc\n ```\n \n+## Running the Rust test suite\n+\n+The test suites of the Rust compiler and standard library can be executed much like other Rust targets.\n+The environment for testing should match the one used during compiler compilation (refer to `build_env` and `qcc`/`PATH` above) with the\n+addition of the TEST_DEVICE_ADDR environment variable.\n+The TEST_DEVICE_ADDR variable controls the remote runner and should point to the target, despite localhost being shown in the following example.\n+Note that some tests are failing which is why they are currently excluded by the target maintainers which can be seen in the following example.\n+\n+To run all tests on a x86_64 QNX Neutrino target:\n+\n+```bash\n+export TEST_DEVICE_ADDR=\"localhost:12345\" # must address the test target, can be a SSH tunnel\n+export build_env='\n+    CC_aarch64-unknown-nto-qnx710=qcc\n+    CFLAGS_aarch64-unknown-nto-qnx710=-Vgcc_ntoaarch64le_cxx\n+    CXX_aarch64-unknown-nto-qnx710=qcc\n+    AR_aarch64_unknown_nto_qnx710=ntoaarch64-ar\n+    CC_x86_64-pc-nto-qnx710=qcc\n+    CFLAGS_x86_64-pc-nto-qnx710=-Vgcc_ntox86_64_cxx\n+    CXX_x86_64-pc-nto-qnx710=qcc\n+    AR_x86_64_pc_nto_qnx710=ntox86_64-ar'\n+\n+# Disable tests that only work on the host or don't make sense for this target.\n+# See also:\n+# - src/ci/docker/host-x86_64/i686-gnu/Dockerfile\n+# - https://rust-lang.zulipchat.com/#narrow/stream/182449-t-compiler.2Fhelp/topic/Running.20tests.20on.20remote.20target\n+# - .github/workflows/ci.yml\n+export exclude_tests='\n+    --exclude src/bootstrap\n+    --exclude src/tools/error_index_generator\n+    --exclude src/tools/linkchecker\n+    --exclude tests/ui-fulldeps\n+    --exclude rustc\n+    --exclude rustdoc\n+    --exclude tests/run-make-fulldeps'\n+\n+env $build_env \\\n+    ./x.py test -j 1 \\\n+        $exclude_tests \\\n+        --stage 1 \\\n+        --target x86_64-pc-nto-qnx710\n+```\n+\n+Currently, only one thread can be used when testing due to limitations in `libc::fork` and `libc::posix_spawnp`.\n+See [fork documentation](https://www.qnx.com/developers/docs/7.1/#com.qnx.doc.neutrino.lib_ref/topic/f/fork.html)\n+(error section) for more information.\n+This can be achieved by using the `-j 1` parameter in the `x.py` call.\n+This issue is being researched and we will try to allow parallelism in the future.\n+\n ## Building Rust programs\n \n-Rust does not yet ship pre-compiled artifacts for this target. To compile for this target, you must either build Rust with the target enabled (see \"Building the target\" above), or build your own copy of  `core` by using\n-`build-std` or similar.\n+Rust does not yet ship pre-compiled artifacts for this target.\n+To compile for this target, you must either build Rust with the target enabled (see \"Building the target\" above),\n+or build your own copy of `core` by using `build-std` or similar.\n \n ## Testing\n \n-Compiled executables can directly be run on QNX Neutrino.\n+Compiled executables can run directly on QNX Neutrino.\n+\n+### Rust std library test suite\n+\n+The target needs sufficient resources to execute all tests. The commands below assume that a QEMU image\n+is used.\n+\n+* Ensure that the temporary directory used by `remote-test-server` has enough free space and inodes.\n+  5GB of free space and 40000 inodes are known to be sufficient (the test will create more than 32k files).\n+  To create a QEMU image in an empty directory, run this command inside the directory:\n+\n+  ```bash\n+  mkqnximage --type=qemu --ssh-ident=$HOME/.ssh/id_ed25519.pub --data-size=5000 --data-inodes=40000\n+  ```\n+\n+  `/data` should have enough free resources.\n+  Set the `TMPDIR` environment variable accordingly when running `remote-test-server`, e.g.:\n+  ```bash\n+  TMPDIR=/data/tmp/rust remote-test-server --bind 0.0.0.0:12345\n+  ```\n+\n+* Ensure the TCP stack can handle enough parallel connections (default is 200, should be 300 or higher).\n+  After creating an image (see above), edit the file `output/build/startup.sh`:\n+  1. Search for `io-pkt-v6-hc`\n+  2. Add the parameter `-ptcpip threads_max=300`, e.g.:\n+     ```text\n+     io-pkt-v6-hc -U 33:33 -d e1000 -ptcpip threads_max=300\n+     ```\n+  3. Update the image by running `mkqnximage` again with the same parameters as above for creating it.\n+\n+* Running and stopping the virtual machine\n+\n+  To start the virtual machine, run inside the directory of the VM:\n+\n+  ```bash\n+  mkqnximage --run=-h\n+  ```\n+\n+  To stop the virtual machine, run inside the directory of the VM:\n+\n+  ```bash\n+  mkqnximage --stop\n+  ```\n+\n+* Ensure local networking\n+\n+  Ensure that 'localhost' is getting resolved to 127.0.0.1. If you can't ping the localhost, some tests may fail.\n+  Ensure it's appended to /etc/hosts (if first `ping` command fails).\n+  Commands have to be executed inside the virtual machine!\n+\n+  ```bash\n+  $ ping localhost\n+  ping: Cannot resolve \"localhost\" (Host name lookup failure)\n+\n+  $ echo \"127.0.0.1 localhost\" >> /etc/hosts\n+\n+  $ ping localhost\n+  PING localhost (127.0.0.1): 56 data bytes\n+  64 bytes from 127.0.0.1: icmp_seq=0 ttl=255 time=1 ms\n+  ```\n \n ## Cross-compilation toolchains and C code\n \n-Compiling C code requires the same environment variables to be set as compiling the Rust toolchain (see above), to ensure `qcc` is used with proper arguments. To ensure compatibility, do not specify any further arguments that for example change calling conventions or memory layout.\n+Compiling C code requires the same environment variables to be set as compiling the Rust toolchain (see above),\n+to ensure `qcc` is used with proper arguments.\n+To ensure compatibility, do not specify any further arguments that for example change calling conventions or memory layout."}, {"sha": "aa7fab7fb179552c655f092d889158c47ad74b91", "filename": "tests/codegen/thread-local.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/864b6258fc7b493aec01f980b31ff23901c0edae/tests%2Fcodegen%2Fthread-local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864b6258fc7b493aec01f980b31ff23901c0edae/tests%2Fcodegen%2Fthread-local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fthread-local.rs?ref=864b6258fc7b493aec01f980b31ff23901c0edae", "patch": "@@ -4,6 +4,7 @@\n // ignore-wasm globals are used instead of thread locals\n // ignore-emscripten globals are used instead of thread locals\n // ignore-android does not use #[thread_local]\n+// ignore-nto does not use #[thread_local]\n \n #![crate_type = \"lib\"]\n "}, {"sha": "a455eef42eacce130d72698f5e9d6b25fe8780c3", "filename": "tests/ui/abi/stack-probes-lto.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/864b6258fc7b493aec01f980b31ff23901c0edae/tests%2Fui%2Fabi%2Fstack-probes-lto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864b6258fc7b493aec01f980b31ff23901c0edae/tests%2Fui%2Fabi%2Fstack-probes-lto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fabi%2Fstack-probes-lto.rs?ref=864b6258fc7b493aec01f980b31ff23901c0edae", "patch": "@@ -13,5 +13,6 @@\n // ignore-fuchsia no exception handler registered for segfault\n // compile-flags: -C lto\n // no-prefer-dynamic\n+// ignore-nto Crash analysis impossible at SIGSEGV in QNX Neutrino\n \n include!(\"stack-probes.rs\");"}, {"sha": "8dba54c3f81317619a1b9b7e867c8508cdd68b4a", "filename": "tests/ui/abi/stack-probes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/864b6258fc7b493aec01f980b31ff23901c0edae/tests%2Fui%2Fabi%2Fstack-probes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864b6258fc7b493aec01f980b31ff23901c0edae/tests%2Fui%2Fabi%2Fstack-probes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fabi%2Fstack-probes.rs?ref=864b6258fc7b493aec01f980b31ff23901c0edae", "patch": "@@ -9,6 +9,7 @@\n // ignore-emscripten no processes\n // ignore-sgx no processes\n // ignore-fuchsia no exception handler registered for segfault\n+// ignore-nto Crash analysis impossible at SIGSEGV in QNX Neutrino\n \n use std::env;\n use std::mem::MaybeUninit;"}, {"sha": "7e321f2f0cd60d2e3ce1121b7b5fbd95983511d2", "filename": "tests/ui/command/command-setgroups.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/864b6258fc7b493aec01f980b31ff23901c0edae/tests%2Fui%2Fcommand%2Fcommand-setgroups.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864b6258fc7b493aec01f980b31ff23901c0edae/tests%2Fui%2Fcommand%2Fcommand-setgroups.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcommand%2Fcommand-setgroups.rs?ref=864b6258fc7b493aec01f980b31ff23901c0edae", "patch": "@@ -3,6 +3,7 @@\n // ignore-emscripten\n // ignore-sgx\n // ignore-musl - returns dummy result for _SC_NGROUPS_MAX\n+// ignore-nto - does not have `/bin/id`, expects groups to be i32 (not u32)\n \n #![feature(rustc_private)]\n #![feature(setgroups)]"}, {"sha": "b99bb39d062ce6f9a157a9032f386b89f3442ffb", "filename": "tests/ui/intrinsics/intrinsic-alignment.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/864b6258fc7b493aec01f980b31ff23901c0edae/tests%2Fui%2Fintrinsics%2Fintrinsic-alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864b6258fc7b493aec01f980b31ff23901c0edae/tests%2Fui%2Fintrinsics%2Fintrinsic-alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fintrinsics%2Fintrinsic-alignment.rs?ref=864b6258fc7b493aec01f980b31ff23901c0edae", "patch": "@@ -22,7 +22,9 @@ mod rusti {\n           target_os = \"netbsd\",\n           target_os = \"openbsd\",\n           target_os = \"solaris\",\n-          target_os = \"vxworks\"))]\n+          target_os = \"vxworks\",\n+          target_os = \"nto\",\n+))]\n mod m {\n     #[cfg(target_arch = \"x86\")]\n     pub fn main() {"}, {"sha": "7ae14c6b84d2f95b864e681c08276c94d7977547", "filename": "tests/ui/process/process-sigpipe.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/864b6258fc7b493aec01f980b31ff23901c0edae/tests%2Fui%2Fprocess%2Fprocess-sigpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864b6258fc7b493aec01f980b31ff23901c0edae/tests%2Fui%2Fprocess%2Fprocess-sigpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprocess%2Fprocess-sigpipe.rs?ref=864b6258fc7b493aec01f980b31ff23901c0edae", "patch": "@@ -15,6 +15,7 @@\n // ignore-emscripten no threads support\n // ignore-vxworks no 'sh'\n // ignore-fuchsia no 'sh'\n+// ignore-nto no 'yes'\n \n use std::process;\n use std::thread;"}, {"sha": "ff45ace7857a93a10568c7c78360458b494ab34e", "filename": "tests/ui/runtime/out-of-stack.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/864b6258fc7b493aec01f980b31ff23901c0edae/tests%2Fui%2Fruntime%2Fout-of-stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864b6258fc7b493aec01f980b31ff23901c0edae/tests%2Fui%2Fruntime%2Fout-of-stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fruntime%2Fout-of-stack.rs?ref=864b6258fc7b493aec01f980b31ff23901c0edae", "patch": "@@ -6,6 +6,7 @@\n // ignore-emscripten no processes\n // ignore-sgx no processes\n // ignore-fuchsia must translate zircon signal to SIGABRT, FIXME (#58590)\n+// ignore-nto no stack overflow handler used (no alternate stack available)\n \n #![feature(core_intrinsics)]\n #![feature(rustc_private)]"}, {"sha": "37c602ae0b03924d1184062ec02fe89929f2ea52", "filename": "tests/ui/runtime/signal-alternate-stack-cleanup.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/864b6258fc7b493aec01f980b31ff23901c0edae/tests%2Fui%2Fruntime%2Fsignal-alternate-stack-cleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864b6258fc7b493aec01f980b31ff23901c0edae/tests%2Fui%2Fruntime%2Fsignal-alternate-stack-cleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fruntime%2Fsignal-alternate-stack-cleanup.rs?ref=864b6258fc7b493aec01f980b31ff23901c0edae", "patch": "@@ -7,6 +7,7 @@\n // ignore-windows\n // ignore-sgx no libc\n // ignore-vxworks no SIGWINCH in user space\n+// ignore-nto no SA_ONSTACK\n \n #![feature(rustc_private)]\n extern crate libc;"}, {"sha": "f21c9b2c808c5b8dc77de1cc513571c9047c1d3a", "filename": "tests/ui/structs-enums/rec-align-u64.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/864b6258fc7b493aec01f980b31ff23901c0edae/tests%2Fui%2Fstructs-enums%2Frec-align-u64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864b6258fc7b493aec01f980b31ff23901c0edae/tests%2Fui%2Fstructs-enums%2Frec-align-u64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstructs-enums%2Frec-align-u64.rs?ref=864b6258fc7b493aec01f980b31ff23901c0edae", "patch": "@@ -43,7 +43,9 @@ struct Outer {\n           target_os = \"netbsd\",\n           target_os = \"openbsd\",\n           target_os = \"solaris\",\n-          target_os = \"vxworks\"))]\n+          target_os = \"vxworks\",\n+          target_os = \"nto\",\n+))]\n mod m {\n     #[cfg(target_arch = \"x86\")]\n     pub mod m {"}, {"sha": "f03bd3f991bdfb89c38347554b1d58e2c535f2b0", "filename": "tests/ui/thread-local/tls.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/864b6258fc7b493aec01f980b31ff23901c0edae/tests%2Fui%2Fthread-local%2Ftls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864b6258fc7b493aec01f980b31ff23901c0edae/tests%2Fui%2Fthread-local%2Ftls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fthread-local%2Ftls.rs?ref=864b6258fc7b493aec01f980b31ff23901c0edae", "patch": "@@ -1,6 +1,7 @@\n // run-pass\n // ignore-emscripten no threads support\n // compile-flags: -O\n+// ignore-nto Doesn't work without emulated TLS enabled (in LLVM)\n \n #![feature(thread_local)]\n "}, {"sha": "82a1dd63713c129ae2ca6f2c96c7d14edecd98a0", "filename": "tests/ui/wait-forked-but-failed-child.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/864b6258fc7b493aec01f980b31ff23901c0edae/tests%2Fui%2Fwait-forked-but-failed-child.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864b6258fc7b493aec01f980b31ff23901c0edae/tests%2Fui%2Fwait-forked-but-failed-child.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwait-forked-but-failed-child.rs?ref=864b6258fc7b493aec01f980b31ff23901c0edae", "patch": "@@ -3,6 +3,7 @@\n // ignore-sgx no processes\n // ignore-vxworks no 'ps'\n // ignore-fuchsia no 'ps'\n+// ignore-nto no 'ps'\n \n #![feature(rustc_private)]\n "}]}