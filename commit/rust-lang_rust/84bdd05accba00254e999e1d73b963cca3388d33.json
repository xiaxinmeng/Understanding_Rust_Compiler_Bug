{"sha": "84bdd05accba00254e999e1d73b963cca3388d33", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0YmRkMDVhY2NiYTAwMjU0ZTk5OWUxZDczYjk2M2NjYTMzODhkMzM=", "commit": {"author": {"name": "Young-il Choi", "email": "duddlf.choi@samsung.com", "date": "2013-05-03T15:49:18Z"}, "committer": {"name": "Young-il Choi", "email": "duddlf.choi@samsung.com", "date": "2013-05-03T15:49:18Z"}, "message": "compiletest: fix decision rule to run and cleanup", "tree": {"sha": "dd3ad098c3effb1f683a2f269af2d3fef4e2ca01", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd3ad098c3effb1f683a2f269af2d3fef4e2ca01"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/84bdd05accba00254e999e1d73b963cca3388d33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/84bdd05accba00254e999e1d73b963cca3388d33", "html_url": "https://github.com/rust-lang/rust/commit/84bdd05accba00254e999e1d73b963cca3388d33", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/84bdd05accba00254e999e1d73b963cca3388d33/comments", "author": {"login": "yichoi", "id": 3222276, "node_id": "MDQ6VXNlcjMyMjIyNzY=", "avatar_url": "https://avatars.githubusercontent.com/u/3222276?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yichoi", "html_url": "https://github.com/yichoi", "followers_url": "https://api.github.com/users/yichoi/followers", "following_url": "https://api.github.com/users/yichoi/following{/other_user}", "gists_url": "https://api.github.com/users/yichoi/gists{/gist_id}", "starred_url": "https://api.github.com/users/yichoi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yichoi/subscriptions", "organizations_url": "https://api.github.com/users/yichoi/orgs", "repos_url": "https://api.github.com/users/yichoi/repos", "events_url": "https://api.github.com/users/yichoi/events{/privacy}", "received_events_url": "https://api.github.com/users/yichoi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yichoi", "id": 3222276, "node_id": "MDQ6VXNlcjMyMjIyNzY=", "avatar_url": "https://avatars.githubusercontent.com/u/3222276?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yichoi", "html_url": "https://github.com/yichoi", "followers_url": "https://api.github.com/users/yichoi/followers", "following_url": "https://api.github.com/users/yichoi/following{/other_user}", "gists_url": "https://api.github.com/users/yichoi/gists{/gist_id}", "starred_url": "https://api.github.com/users/yichoi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yichoi/subscriptions", "organizations_url": "https://api.github.com/users/yichoi/orgs", "repos_url": "https://api.github.com/users/yichoi/repos", "events_url": "https://api.github.com/users/yichoi/events{/privacy}", "received_events_url": "https://api.github.com/users/yichoi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ecb97ae58c6fde97bfe58aeddd11790899bd4ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ecb97ae58c6fde97bfe58aeddd11790899bd4ec", "html_url": "https://github.com/rust-lang/rust/commit/9ecb97ae58c6fde97bfe58aeddd11790899bd4ec"}], "stats": {"total": 145, "additions": 72, "deletions": 73}, "files": [{"sha": "9997f170a98f00dbb3aee4637a6de5094ee77735", "filename": "mk/tests.mk", "status": "modified", "additions": 35, "deletions": 55, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/84bdd05accba00254e999e1d73b963cca3388d33/mk%2Ftests.mk", "raw_url": "https://github.com/rust-lang/rust/raw/84bdd05accba00254e999e1d73b963cca3388d33/mk%2Ftests.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftests.mk?ref=84bdd05accba00254e999e1d73b963cca3388d33", "patch": "@@ -92,48 +92,44 @@ endef\n $(foreach target,$(CFG_TARGET_TRIPLES), \\\n   $(eval $(call DEF_TARGET_COMMANDS,$(target))))\n \n-# Target specific variables \n+# Target platform specific variables \n # for arm-linux-androidabi\n-define DEF_RUNNABLE_STATUS\n-CFG_RUNNABLE_$(1)=$(2)\n+define DEF_ADB_DEVICE_STATUS\n+CFG_ADB_DEVICE_STATUS=$(1)\n endef\n \n $(foreach target,$(CFG_TARGET_TRIPLES), \\\n-  $(if $(findstring $(target),$(CFG_BUILD_TRIPLE)), \\\n-    $(info check: $(target) test set is runnable \\\n-      $(eval $(call DEF_RUNNABLE_STATUS,$(target),true))), \\\n-    $(if $(findstring $(target),\"arm-linux-androideabi\"), \\\n-      $(if $(findstring adb,$(shell which adb)), \\\n-        $(if $(findstring device,$(shell adb devices 2>/dev/null | grep -E '^[A-Za-z0-9-]+[[:blank:]]+device')), \\\n-          $(info check: $(target) test set is runnable \\\n-            $(info check: adb device attached) \\\n-            $(eval $(call DEF_RUNNABLE_STATUS,$(target),true))), \\\n-          $(info check: $(target) test set is not runnable \\\n-            $(info check: adb device not attached) \\\n-            $(eval $(call DEF_RUNNABLE_STATUS,$(target),false))) \\\n-        ), \\\n-        $(info check: $(target) test set is not runnable \\\n-          $(info check: adb not found) \\\n-          $(eval $(call DEF_RUNNABLE_STATUS,$(target),false))) \\\n+  $(if $(findstring $(target),\"arm-linux-androideabi\"), \\\n+    $(if $(findstring adb,$(CFG_ADB)), \\\n+      $(if $(findstring device,$(shell adb devices 2>/dev/null | grep -E '^[_A-Za-z0-9-]+[[:blank:]]+device')), \\\n+        $(info check: $(target) test enabled \\\n+          $(info check: android device attached) \\\n+          $(eval $(call DEF_ADB_DEVICE_STATUS, true))), \\\n+        $(info check: $(target) test disabled \\\n+          $(info check: android device not attached) \\\n+          $(eval $(call DEF_ADB_DEVICE_STATUS, false))) \\\n       ), \\\n-      $(info check: $(target) test set is not runnable \\\n-        $(eval $(call DEF_RUNNABLE_STATUS,$(target),false)) \\\n-      ) \\\n-    ) \\\n+      $(info check: $(target) test disabled \\\n+        $(info check: adb not found) \\\n+        $(eval $(call DEF_ADB_DEVICE_STATUS, false))) \\\n+    ), \\\n   ) \\\n )\n \n-ifeq ($(CFG_RUNNABLE_arm-linux-androideabi),true)\n-CFG_ADB_DEVICE=true\n-CFG_ADB_PATH := $(shell which adb)\n-CFG_ADB_TEST_DIR=/system/tmp\n+ifeq ($(CFG_ADB_DEVICE_STATUS),true)\n+CFG_ADB_TEST_DIR=/data/tmp\n \n-$(info check: device $(CFG_ADB_TEST_DIR) \\\n- $(shell $(CFG_ADB_PATH) remount 1>/dev/null) \\\n- $(shell $(CFG_ADB_PATH) shell mkdir $(CFG_ADB_TEST_DIR) 1>/dev/null) \\\n+$(info check: android device test dir $(CFG_ADB_TEST_DIR) ready \\\n+ $(shell adb remount 1>/dev/null) \\\n+ $(shell adb shell mkdir $(CFG_ADB_TEST_DIR) 1>/dev/null) \\\n+ $(shell adb push $(CFG_ANDROID_CROSS_PATH)/arm-linux-androideabi/lib/armv7-a/libgnustl_shared.so \\\n+                  $(CFG_ADB_TEST_DIR) 1>/dev/null) \\\n  )\n+else\n+CFG_ADB_TEST_DIR=\n endif\n \n+\n ######################################################################\n # Main test targets\n ######################################################################\n@@ -366,14 +362,15 @@ check-stage$(1)-T-$(2)-H-$(3)-$(4)-exec: $$(call TEST_OK_FILE,$(1),$(2),$(3),$(4\n $$(call TEST_OK_FILE,$(1),$(2),$(3),$(4)): \\\n \t\t$(3)/test/$(4)test.stage$(1)-$(2)$$(X_$(2))\n \t@$$(call E, run: $$< via adb)\n-\t@$(CFG_ADB_PATH) push $$< $(CFG_ADB_TEST_DIR)\n-\t@$(CFG_ADB_PATH) shell $(CFG_ADB_TEST_DIR)/`echo $$< | sed 's/.*\\///'` \\\n+\t@$(CFG_ADB) push $$< $(CFG_ADB_TEST_DIR)\n+\t@$(CFG_ADB) shell LD_LIBRARY_PATH=$(CFG_ADB_TEST_DIR) \\\n+        $(CFG_ADB_TEST_DIR)/`echo $$< | sed 's/.*\\///'` \\\n \t\t--logfile $(CFG_ADB_TEST_DIR)/check-stage$(1)-T-$(2)-H-$(3)-$(4).log > \\\n \t\ttmp/check-stage$(1)-T-$(2)-H-$(3)-$(4).tmp\n \t@cat tmp/check-stage$(1)-T-$(2)-H-$(3)-$(4).tmp\n \t@touch tmp/check-stage$(1)-T-$(2)-H-$(3)-$(4).log\n-\t@$(CFG_ADB_PATH) pull $(CFG_ADB_TEST_DIR)/check-stage$(1)-T-$(2)-H-$(3)-$(4).log tmp/\n-\t@$(CFG_ADB_PATH) shell rm $(CFG_ADB_TEST_DIR)/check-stage$(1)-T-$(2)-H-$(3)-$(4).log\n+\t@$(CFG_ADB) pull $(CFG_ADB_TEST_DIR)/check-stage$(1)-T-$(2)-H-$(3)-$(4).log tmp/\n+\t@$(CFG_ADB) shell rm $(CFG_ADB_TEST_DIR)/check-stage$(1)-T-$(2)-H-$(3)-$(4).log\n \t@if grep -q \"result: ok\" tmp/check-stage$(1)-T-$(2)-H-$(3)-$(4).tmp; \\\n \tthen \\\n \t\trm tmp/check-stage$(1)-T-$(2)-H-$(3)-$(4).tmp; \\\n@@ -400,11 +397,11 @@ $(foreach host,$(CFG_HOST_TRIPLES), \\\n     $(if $(findstring $(target),$(CFG_BUILD_TRIPLE)), \\\n      $(eval $(call DEF_TEST_CRATE_RULES,$(stage),$(target),$(host),$(crate))), \\\n      $(if $(findstring $(target),\"arm-linux-androideabi\"), \\\n-      $(if $(findstring $(CFG_RUNNABLE_arm-linux-androideabi),\"true\"), \\\n+      $(if $(findstring $(CFG_ADB_DEVICE_STATUS),\"true\"), \\\n        $(eval $(call DEF_TEST_CRATE_RULES_arm-linux-androideabi,$(stage),$(target),$(host),$(crate))), \\\n        $(eval $(call DEF_TEST_CRATE_RULES_null,$(stage),$(target),$(host),$(crate))) \\\n       ), \\\n-      $(eval $(call DEF_TEST_CRATE_RULES_null,$(stage),$(target),$(host),$(crate))) \\\n+      $(eval $(call DEF_TEST_CRATE_RULES,$(stage),$(target),$(host),$(crate))) \\\n      )))))) \n \n \n@@ -496,36 +493,19 @@ TEST_SREQ$(1)_T_$(2)_H_$(3) = \\\n \n # Rules for the cfail/rfail/rpass/bench/perf test runner\n \n-ifeq ($(CFG_ADB_DEVICE),true)\n-\n CTEST_COMMON_ARGS$(1)-T-$(2)-H-$(3) :=\t\t\t\t\t\t\\\n \t\t--compile-lib-path $$(HLIB$(1)_H_$(3))\t\t\t\t\\\n         --run-lib-path $$(TLIB$(1)_T_$(2)_H_$(3))\t\t\t\\\n-        --rustc-path $$(HBIN$(1)_H_$(3))/rustc$$(X_$(3))\t\\\n+        --rustc-path $$(HBIN$(1)_H_$(3))/rustc$$(X_$(3))\t\t\t\\\n         --aux-base $$(S)src/test/auxiliary/\t\t\t\t\t\\\n         --stage-id stage$(1)-$(2)\t\t\t\t\t\t\t\\\n         --host $(CFG_BUILD_TRIPLE)                          \\\n         --target $(2)                                       \\\n-        --adb-path=$(CFG_ADB_PATH)                          \\\n+        --adb-path=$(CFG_ADB)                          \\\n         --adb-test-dir=$(CFG_ADB_TEST_DIR)                  \\\n         --rustcflags \"$(RUSTC_FLAGS_$(2)) $$(CFG_RUSTC_FLAGS) --target=$(2)\" \\\n         $$(CTEST_TESTARGS)\n \n-else\n-\n-CTEST_COMMON_ARGS$(1)-T-$(2)-H-$(3) :=\t\t\t\t\t\t\\\n-\t\t--compile-lib-path $$(HLIB$(1)_H_$(3))\t\t\t\t\\\n-        --run-lib-path $$(TLIB$(1)_T_$(2)_H_$(3))\t\t\t\\\n-        --rustc-path $$(HBIN$(1)_H_$(3))/rustc$$(X_$(3))\t\\\n-        --aux-base $$(S)src/test/auxiliary/                 \\\n-        --stage-id stage$(1)-$(2)\t\t\t\t\t\t\t\\\n-        --host $(CFG_BUILD_TRIPLE)                          \\\n-        --target $(2)                                       \\\n-        --rustcflags \"$(RUSTC_FLAGS_$(2)) $$(CFG_RUSTC_FLAGS) --target=$(2)\" \\\n-        $$(CTEST_TESTARGS)\n-\n-endif\n-\n CTEST_DEPS_rpass_$(1)-T-$(2)-H-$(3) = $$(RPASS_TESTS)\n CTEST_DEPS_rpass_full_$(1)-T-$(2)-H-$(3) = $$(RPASS_FULL_TESTS) $$(TLIBRUSTC_DEFAULT$(1)_T_$(2)_H_$(3))\n CTEST_DEPS_rfail_$(1)-T-$(2)-H-$(3) = $$(RFAIL_TESTS)"}, {"sha": "fab73d78021c227ce86938a47038e453bcbd6109", "filename": "src/compiletest/compiletest.rc", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/84bdd05accba00254e999e1d73b963cca3388d33/src%2Fcompiletest%2Fcompiletest.rc", "raw_url": "https://github.com/rust-lang/rust/raw/84bdd05accba00254e999e1d73b963cca3388d33/src%2Fcompiletest%2Fcompiletest.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rc?ref=84bdd05accba00254e999e1d73b963cca3388d33", "patch": "@@ -108,11 +108,13 @@ pub fn parse_config(args: ~[~str]) -> config {\n             else {\n                 match getopts::opt_maybe_str(matches, ~\"target\") {\n                     Some(~\"arm-linux-androideabi\") => {\n-                        if (getopts::opt_maybe_str(matches, ~\"adb-path\") !=\n-                            option::None) { true }\n+                        if (opt_str(getopts::opt_maybe_str(matches, ~\"adb-test-dir\")) !=\n+                            ~\"(none)\" &&\n+                            opt_str(getopts::opt_maybe_str(matches, ~\"adb-test-dir\")) !=\n+                            ~\"\") { true }\n                         else { false }\n                     }\n-                    _ => { false }\n+                    _ => { true }\n                 }\n             },\n         verbose: getopts::opt_present(matches, ~\"verbose\")"}, {"sha": "d1319c395add6ab8f318b53cbfc58dff101a81c5", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 32, "deletions": 15, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/84bdd05accba00254e999e1d73b963cca3388d33/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84bdd05accba00254e999e1d73b963cca3388d33/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=84bdd05accba00254e999e1d73b963cca3388d33", "patch": "@@ -77,9 +77,18 @@ fn run_rfail_test(config: config, props: TestProps, testfile: &Path) {\n         fatal_ProcRes(~\"run-fail test isn't valgrind-clean!\", ProcRes);\n     }\n \n-    if (config.flag_runnable) {\n+    if (config.host == config.target) {\n         check_correct_failure_status(ProcRes);\n         check_error_patterns(props, testfile, ProcRes);\n+    } else {\n+        match (config.target, config.flag_runnable) {\n+\n+            (~\"arm-linux-androideabi\", false) => { }\n+            _ => {\n+                check_correct_failure_status(ProcRes);\n+                check_error_patterns(props, testfile, ProcRes);\n+            }\n+        }\n     }\n }\n \n@@ -490,16 +499,10 @@ fn exec_compiled_test(config: config, props: TestProps,\n                         make_run_args(config, props, testfile),\n                         env,\n                         config.run_lib_path, None)\n-    }\n-    else {\n+    } else {\n         let args = make_run_args(config, props, testfile);\n         let cmdline = make_cmdline(~\"\", args.prog, args.args);\n \n-        let defaultRes = match config.mode {\n-            mode_run_fail => ProcRes {status: 101, stdout: ~\"\", stderr: ~\"\", cmdline: cmdline},\n-            _             => ProcRes {status: 0, stdout: ~\"\", stderr: ~\"\", cmdline: cmdline}\n-        };\n-\n         match (config.target, config.flag_runnable) {\n \n             (~\"arm-linux-androideabi\", true) => {\n@@ -524,8 +527,8 @@ fn exec_compiled_test(config: config, props: TestProps,\n                 // execute program\n                 logv(config, fmt!(\"executing (%s) %s\", config.target, cmdline));\n \n-                // NOTE : adb shell dose not forward to each stdout and stderr of internal result\n-                //        but forward to stdout only\n+                // NOTE: adb shell dose not forward stdout and stderr of internal result\n+                //       to stdout and stderr seperately but to stdout only\n                 let mut newargs_out = ~[];\n                 let mut newargs_err = ~[];\n                 let subargs = args.args;\n@@ -534,12 +537,11 @@ fn exec_compiled_test(config: config, props: TestProps,\n \n                 let mut newcmd_out = ~\"\";\n                 let mut newcmd_err = ~\"\";\n-                newcmd_out.push_str(fmt!(\n-                    \"LD_LIBRARY_PATH=%s; export LD_LIBRARY_PATH; cd %s; ./%s\",\n+\n+                newcmd_out.push_str(fmt!(\"LD_LIBRARY_PATH=%s %s/%s\",\n                     config.adb_test_dir, config.adb_test_dir, prog_short));\n \n-                newcmd_err.push_str(fmt!(\n-                    \"LD_LIBRARY_PATH=%s; export LD_LIBRARY_PATH; cd %s; ./%s\",\n+                newcmd_err.push_str(fmt!(\"LD_LIBRARY_PATH=%s %s/%s\",\n                     config.adb_test_dir, config.adb_test_dir, prog_short));\n \n                 for vec::each(subargs) |tv| {\n@@ -569,7 +571,22 @@ fn exec_compiled_test(config: config, props: TestProps,\n                         stderr: exe_result_err.out, cmdline: cmdline }\n                 }\n             }\n-            _=> defaultRes\n+\n+            (~\"arm-linux-androideabi\", false) => {\n+                match config.mode {\n+                    mode_run_fail => ProcRes {status: 101, stdout: ~\"\",\n+                                             stderr: ~\"\", cmdline: cmdline},\n+                    _             => ProcRes {status: 0, stdout: ~\"\",\n+                                             stderr: ~\"\", cmdline: cmdline}\n+                }\n+            }\n+\n+            _=> {\n+                compose_and_run(config, testfile,\n+                                make_run_args(config, props, testfile),\n+                                env,\n+                                config.run_lib_path, None)\n+            }\n         }\n     }\n }"}]}