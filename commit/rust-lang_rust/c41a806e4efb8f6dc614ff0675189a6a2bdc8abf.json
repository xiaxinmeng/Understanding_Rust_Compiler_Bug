{"sha": "c41a806e4efb8f6dc614ff0675189a6a2bdc8abf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0MWE4MDZlNGVmYjhmNmRjNjE0ZmYwNjc1MTg5YTZhMmJkYzhhYmY=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2016-09-15T17:02:10Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2016-09-20T13:58:46Z"}, "message": "Workaround #34427 by using memset of 0 on ARM to set the discriminant.", "tree": {"sha": "46f9a83b069d6644274226203bdffc420e67829a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/46f9a83b069d6644274226203bdffc420e67829a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c41a806e4efb8f6dc614ff0675189a6a2bdc8abf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c41a806e4efb8f6dc614ff0675189a6a2bdc8abf", "html_url": "https://github.com/rust-lang/rust/commit/c41a806e4efb8f6dc614ff0675189a6a2bdc8abf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c41a806e4efb8f6dc614ff0675189a6a2bdc8abf/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cbd84aeb73ba1db2ce533fc764f28d748b9a0bb5", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbd84aeb73ba1db2ce533fc764f28d748b9a0bb5", "html_url": "https://github.com/rust-lang/rust/commit/cbd84aeb73ba1db2ce533fc764f28d748b9a0bb5"}], "stats": {"total": 51, "additions": 47, "deletions": 4}, "files": [{"sha": "0fd208c95d4db1e85d9e584aafe187ce1cbf4fc0", "filename": "src/librustc_trans/adt.rs", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/c41a806e4efb8f6dc614ff0675189a6a2bdc8abf/src%2Flibrustc_trans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c41a806e4efb8f6dc614ff0675189a6a2bdc8abf/src%2Flibrustc_trans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fadt.rs?ref=c41a806e4efb8f6dc614ff0675189a6a2bdc8abf", "patch": "@@ -54,6 +54,7 @@ use syntax::ast;\n use syntax::attr;\n use syntax::attr::IntType;\n use abi::FAT_PTR_ADDR;\n+use base;\n use build::*;\n use common::*;\n use debuginfo::DebugLoc;\n@@ -963,16 +964,32 @@ pub fn trans_set_discr<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, r: &Repr<'tcx>,\n                 Store(bcx, C_null(llptrty), val);\n             }\n         }\n-        StructWrappedNullablePointer { nndiscr, ref discrfield, .. } => {\n+        StructWrappedNullablePointer { nndiscr, ref discrfield, ref nonnull, .. } => {\n             if discr != nndiscr {\n-                let llptrptr = GEPi(bcx, val, &discrfield[..]);\n-                let llptrty = val_ty(llptrptr).element_type();\n-                Store(bcx, C_null(llptrty), llptrptr);\n+                if target_sets_discr_via_memset(bcx) {\n+                    // Issue #34427: As workaround for LLVM bug on\n+                    // ARM, use memset of 0 on whole struct rather\n+                    // than storing null to single target field.\n+                    let b = B(bcx);\n+                    let llptr = b.pointercast(val, Type::i8(b.ccx).ptr_to());\n+                    let fill_byte = C_u8(b.ccx, 0);\n+                    let size = C_uint(b.ccx, nonnull.size);\n+                    let align = C_i32(b.ccx, nonnull.align as i32);\n+                    base::call_memset(&b, llptr, fill_byte, size, align, false);\n+                } else {\n+                    let llptrptr = GEPi(bcx, val, &discrfield[..]);\n+                    let llptrty = val_ty(llptrptr).element_type();\n+                    Store(bcx, C_null(llptrty), llptrptr);\n+                }\n             }\n         }\n     }\n }\n \n+fn target_sets_discr_via_memset<'blk, 'tcx>(bcx: Block<'blk, 'tcx>) -> bool {\n+    bcx.sess().target.target.arch == \"arm\" || bcx.sess().target.target.arch == \"aarch64\"\n+}\n+\n fn assert_discr_in_range(ity: IntType, min: Disr, max: Disr, discr: Disr) {\n     match ity {\n         attr::UnsignedInt(_) => {"}, {"sha": "6bf8a2ac6a72d788aa0933f3bfdefc748f0bf0ed", "filename": "src/test/run-pass/issue-34427.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c41a806e4efb8f6dc614ff0675189a6a2bdc8abf/src%2Ftest%2Frun-pass%2Fissue-34427.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c41a806e4efb8f6dc614ff0675189a6a2bdc8abf/src%2Ftest%2Frun-pass%2Fissue-34427.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-34427.rs?ref=c41a806e4efb8f6dc614ff0675189a6a2bdc8abf", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Issue #34427: On ARM, the code in `foo` at one time was generating\n+// a machine code instruction of the form: `str r0, [r0, rN]!` (for\n+// some N), which is not legal because the source register and base\n+// register cannot be identical in the preindexed form signalled by\n+// the `!`.\n+//\n+// See LLVM bug: https://llvm.org/bugs/show_bug.cgi?id=28809\n+\n+#[inline(never)]\n+fn foo(n: usize) -> Vec<Option<(*mut (), &'static ())>> {\n+    (0..n).map(|_| None).collect()\n+}\n+\n+fn main() {\n+    let _ = (foo(10), foo(32));\n+}"}]}