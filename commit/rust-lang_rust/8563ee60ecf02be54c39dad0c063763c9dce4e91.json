{"sha": "8563ee60ecf02be54c39dad0c063763c9dce4e91", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1NjNlZTYwZWNmMDJiZTU0YzM5ZGFkMGMwNjM3NjNjOWRjZTRlOTE=", "commit": {"author": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-06-06T00:27:48Z"}, "committer": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-06-06T00:27:48Z"}, "message": "fixed issue #88 in bit_mask", "tree": {"sha": "ff3c9951d9659d6cd719a5715a6003f9bdfd3431", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff3c9951d9659d6cd719a5715a6003f9bdfd3431"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8563ee60ecf02be54c39dad0c063763c9dce4e91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8563ee60ecf02be54c39dad0c063763c9dce4e91", "html_url": "https://github.com/rust-lang/rust/commit/8563ee60ecf02be54c39dad0c063763c9dce4e91", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8563ee60ecf02be54c39dad0c063763c9dce4e91/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b44435ef2843f7ec35684d2cfe37535efc82f360", "url": "https://api.github.com/repos/rust-lang/rust/commits/b44435ef2843f7ec35684d2cfe37535efc82f360", "html_url": "https://github.com/rust-lang/rust/commit/b44435ef2843f7ec35684d2cfe37535efc82f360"}], "stats": {"total": 25, "additions": 17, "deletions": 8}, "files": [{"sha": "f3f95f92d9a7f1597ea9ecbe90a2ce8e95f746be", "filename": "src/bit_mask.rs", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8563ee60ecf02be54c39dad0c063763c9dce4e91/src%2Fbit_mask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8563ee60ecf02be54c39dad0c063763c9dce4e91/src%2Fbit_mask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbit_mask.rs?ref=8563ee60ecf02be54c39dad0c063763c9dce4e91", "patch": "@@ -89,20 +89,26 @@ fn check_compare(cx: &Context, bit_op: &Expr, cmp_op: BinOp_, cmp_value: u64, sp\n \t}\n }\n \n-fn check_bit_mask(cx: &Context, bit_op: BinOp_, cmp_op: BinOp_, mask_value: u64, cmp_value: u64, span: &Span) {\n+fn check_bit_mask(cx: &Context, bit_op: BinOp_, cmp_op: BinOp_, \n+\t\tmask_value: u64, cmp_value: u64, span: &Span) {\n \tmatch cmp_op {\n \t\tBiEq | BiNe => match bit_op {\n \t\t\tBiBitAnd => if mask_value & cmp_value != mask_value {\n-\t\t\t\tcx.span_lint(BAD_BIT_MASK, *span, &format!(\"incompatible bit mask: _ & {} can never be equal to {}\", mask_value,\n-\t\t\t\t\tcmp_value));\n+\t\t\t\tif cmp_value != 0 {\n+\t\t\t\t\tcx.span_lint(BAD_BIT_MASK, *span, &format!(\n+\t\t\t\t\t\t\"incompatible bit mask: _ & {} can never be equal to {}\", \n+\t\t\t\t\t\tmask_value, cmp_value));\n+\t\t\t\t}\n \t\t\t} else { \n \t\t\t\tif mask_value == 0 {\n-\t\t\t\t\tcx.span_lint(BAD_BIT_MASK, *span, &format!(\"&-masking with zero\"));\n+\t\t\t\t\tcx.span_lint(BAD_BIT_MASK, *span, \n+\t\t\t\t\t\t&format!(\"&-masking with zero\"));\n \t\t\t\t}\n \t\t\t},\n \t\t\tBiBitOr => if mask_value | cmp_value != cmp_value {\n-\t\t\t\tcx.span_lint(BAD_BIT_MASK, *span, &format!(\"incompatible bit mask: _ | {} can never be equal to {}\", mask_value,\n-\t\t\t\t\tcmp_value));\n+\t\t\t\tcx.span_lint(BAD_BIT_MASK, *span, &format!(\n+\t\t\t\t\t\"incompatible bit mask: _ | {} can never be equal to {}\", \n+\t\t\t\t\tmask_value, cmp_value));\n \t\t\t},\n \t\t\t_ => ()\n \t\t},\n@@ -113,7 +119,8 @@ fn check_bit_mask(cx: &Context, bit_op: BinOp_, cmp_op: BinOp_, mask_value: u64,\n \t\t\t\t\tmask_value, cmp_value));\n \t\t\t} else { \n \t\t\t\tif mask_value == 0 {\n-\t\t\t\t\tcx.span_lint(BAD_BIT_MASK, *span, &format!(\"&-masking with zero\"));\n+\t\t\t\t\tcx.span_lint(BAD_BIT_MASK, *span, \n+\t\t\t\t\t\t&format!(\"&-masking with zero\"));\n \t\t\t\t}\n \t\t\t},\n \t\t\tBiBitOr => if mask_value >= cmp_value {\n@@ -136,7 +143,8 @@ fn check_bit_mask(cx: &Context, bit_op: BinOp_, cmp_op: BinOp_, mask_value: u64,\n \t\t\t\t\tmask_value, cmp_value));\n \t\t\t} else { \n \t\t\t\tif mask_value == 0 {\n-\t\t\t\t\tcx.span_lint(BAD_BIT_MASK, *span, &format!(\"&-masking with zero\"));\n+\t\t\t\t\tcx.span_lint(BAD_BIT_MASK, *span, \n+\t\t\t\t\t\t&format!(\"&-masking with zero\"));\n \t\t\t\t}\n \t\t\t},\n \t\t\tBiBitOr => if mask_value > cmp_value {"}, {"sha": "e6b89b98564fe60f99f8cfe3f6d4797a84466390", "filename": "tests/compile-fail/bit_masks.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8563ee60ecf02be54c39dad0c063763c9dce4e91/tests%2Fcompile-fail%2Fbit_masks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8563ee60ecf02be54c39dad0c063763c9dce4e91/tests%2Fcompile-fail%2Fbit_masks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fbit_masks.rs?ref=8563ee60ecf02be54c39dad0c063763c9dce4e91", "patch": "@@ -11,6 +11,7 @@ fn main() {\n \t\n \tx & 0 == 0; //~ERROR &-masking with zero\n \tx & 1 == 1; //ok, distinguishes bit 0\n+\tx & 1 == 0; //ok, compared with zero\n \tx & 2 == 1; //~ERROR\n \tx | 0 == 0; //ok, equals x == 0 (maybe warn?)\n \tx | 1 == 3; //ok, equals x == 2 || x == 3"}]}