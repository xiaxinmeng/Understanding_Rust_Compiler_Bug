{"sha": "0e71bda2424c9fabee6db817d7b8365694e59897", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlNzFiZGEyNDI0YzlmYWJlZTZkYjgxN2Q3YjgzNjU2OTRlNTk4OTc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-08-23T20:02:35Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-08-23T20:02:35Z"}, "message": "Auto merge of #27586 - GuillaumeGomez:patch-2, r=Manishearth\n\nPart of #24407.\r\n\r\nThis PR doesn't have code example since I didn't find how to raise it. If someone finds a code which does, please say it !\r\n\r\ncc @pnkfelix\r\ncc @eddyb\r\nr? @Manishearth", "tree": {"sha": "ddb18721d200b4079e3bf83d0858520abd680d85", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ddb18721d200b4079e3bf83d0858520abd680d85"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e71bda2424c9fabee6db817d7b8365694e59897", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e71bda2424c9fabee6db817d7b8365694e59897", "html_url": "https://github.com/rust-lang/rust/commit/0e71bda2424c9fabee6db817d7b8365694e59897", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e71bda2424c9fabee6db817d7b8365694e59897/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f227ca2c2150205fcc39d7a3b1839eb592baee0", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f227ca2c2150205fcc39d7a3b1839eb592baee0", "html_url": "https://github.com/rust-lang/rust/commit/9f227ca2c2150205fcc39d7a3b1839eb592baee0"}, {"sha": "0642d99e81738a5822ddd54cd2db2707ad75db56", "url": "https://api.github.com/repos/rust-lang/rust/commits/0642d99e81738a5822ddd54cd2db2707ad75db56", "html_url": "https://github.com/rust-lang/rust/commit/0642d99e81738a5822ddd54cd2db2707ad75db56"}], "stats": {"total": 192, "additions": 185, "deletions": 7}, "files": [{"sha": "0f2232501837c610e8c6031b4bde3706acbabe5d", "filename": "src/librustc_typeck/coherence/orphan.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0e71bda2424c9fabee6db817d7b8365694e59897/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e71bda2424c9fabee6db817d7b8365694e59897/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs?ref=0e71bda2424c9fabee6db817d7b8365694e59897", "patch": "@@ -50,6 +50,8 @@ impl<'cx, 'tcx> OrphanChecker<'cx, 'tcx> {\n                 span_err!(self.tcx.sess, span, E0390,\n                           \"only a single inherent implementation marked with `#[lang = \\\"{}\\\"]` \\\n                            is allowed for the `{}` primitive\", lang, ty);\n+                span_help!(self.tcx.sess, span,\n+                           \"consider using a trait to implement these methods\");\n             }\n         }\n     }"}, {"sha": "0223079b8bf396272b3d563270b1a7fe1a676d07", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 183, "deletions": 7, "changes": 190, "blob_url": "https://github.com/rust-lang/rust/blob/0e71bda2424c9fabee6db817d7b8365694e59897/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e71bda2424c9fabee6db817d7b8365694e59897/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=0e71bda2424c9fabee6db817d7b8365694e59897", "patch": "@@ -2400,6 +2400,132 @@ for types as needed by the compiler, and it is currently disallowed to\n explicitly implement it for a type.\n \"##,\n \n+E0323: r##\"\n+An associated const was implemented when another trait item was expected.\n+Erroneous code example:\n+\n+```\n+trait Foo {\n+    type N;\n+}\n+\n+struct Bar;\n+\n+impl Foo for Bar {\n+    const N : u32 = 0;\n+    // error: item `N` is an associated const, which doesn't match its\n+    //        trait `<Bar as Foo>`\n+}\n+```\n+\n+Please verify that the associated const wasn't misspelled and the correct trait\n+was implemented. Example:\n+\n+```\n+struct Bar;\n+\n+trait Foo {\n+    type N;\n+}\n+\n+impl Foo for Bar {\n+    type N = u32; // ok!\n+}\n+\n+// or:\n+trait Foo {\n+    const N : u32;\n+}\n+\n+impl Foo for Bar {\n+    const N : u32 = 0; // ok!\n+}\n+```\n+\"##,\n+\n+E0324: r##\"\n+A method was implemented when another trait item was expected. Erroneous\n+code example:\n+\n+```\n+struct Bar;\n+\n+trait Foo {\n+    const N : u32;\n+\n+    fn M();\n+}\n+\n+impl Foo for Bar {\n+    fn N() {}\n+    // error: item `N` is an associated method, which doesn't match its\n+    //        trait `<Bar as Foo>`\n+}\n+```\n+\n+To fix this error, please verify that the method name wasn't misspelled and\n+verify that you are indeed implementing the correct trait items. Example:\n+\n+```\n+struct Bar;\n+\n+trait Foo {\n+    const N : u32;\n+\n+    fn M();\n+}\n+\n+impl Foo for Bar {\n+    const N : u32 = 0;\n+\n+    fn M() {} // ok!\n+}\n+```\n+\"##,\n+\n+E0325: r##\"\n+An associated type was implemented when another trait item was expected.\n+Erroneous code example:\n+\n+```\n+struct Bar;\n+\n+trait Foo {\n+    const N : u32;\n+}\n+\n+impl Foo for Bar {\n+    type N = u32;\n+    // error: item `N` is an associated type, which doesn't match its\n+    //        trait `<Bar as Foo>`\n+}\n+```\n+\n+Please verify that the associated type name wasn't misspelled and your\n+implementation corresponds to the trait definition. Example:\n+\n+```\n+struct Bar;\n+\n+trait Foo {\n+    type N;\n+}\n+\n+impl Foo for Bar {\n+    type N = u32; // ok!\n+}\n+\n+//or:\n+trait Foo {\n+    const N : u32;\n+}\n+\n+impl Foo for Bar {\n+    const N : u32 = 0; // ok!\n+}\n+```\n+\"##,\n+\n E0326: r##\"\n The types of any associated constants in a trait implementation must match the\n types in the trait definition. This error indicates that there was a mismatch.\n@@ -2566,6 +2692,31 @@ to change this.\n [RFC 953]: https://github.com/rust-lang/rfcs/pull/953\n \"##,\n \n+E0369: r##\"\n+A binary operation was attempted on a type which doesn't support it.\n+Erroneous code example:\n+\n+```\n+let x = 12f32; // error: binary operation `<<` cannot be applied to\n+               //        type `f32`\n+\n+x << 2;\n+```\n+\n+To fix this error, please check that this type implements this binary\n+operation. Example:\n+\n+```\n+let x = 12u32; // the `u32` type does implement it:\n+               // https://doc.rust-lang.org/stable/std/ops/trait.Shl.html\n+\n+x << 2; // ok!\n+```\n+\n+It is also possible to overload most operators for your own type by\n+implementing traits from `std::ops`.\n+\"##,\n+\n E0371: r##\"\n When `Trait2` is a subtrait of `Trait1` (for example, when `Trait2` has a\n definition like `trait Trait2: Trait1 { ... }`), it is not allowed to implement\n@@ -2607,6 +2758,37 @@ For more information see the [opt-in builtin traits RFC](https://github.com/rust\n -lang/rfcs/blob/master/text/0019-opt-in-builtin-traits.md).\n \"##,\n \n+E0390: r##\"\n+You tried to implement methods for a primitive type. Erroneous code example:\n+\n+```\n+struct Foo {\n+    x: i32\n+}\n+\n+impl *mut Foo {}\n+// error: only a single inherent implementation marked with\n+//        `#[lang = \"mut_ptr\"]` is allowed for the `*mut T` primitive\n+```\n+\n+This isn't allowed, but using a trait to implement a method is a good solution.\n+Example:\n+\n+```\n+struct Foo {\n+    x: i32\n+}\n+\n+trait Bar {\n+    fn bar();\n+}\n+\n+impl Bar for *mut Foo {\n+    fn bar() {} // ok!\n+}\n+```\n+\"##,\n+\n E0391: r##\"\n This error indicates that some types or traits depend on each other\n and therefore cannot be constructed.\n@@ -2691,7 +2873,7 @@ register_diagnostics! {\n     E0085,\n     E0086,\n     E0090,\n-    E0103,\n+    E0103, // @GuillaumeGomez: I was unable to get this error, try your best!\n     E0104,\n     E0118,\n     E0122,\n@@ -2750,12 +2932,8 @@ register_diagnostics! {\n     E0319, // trait impls for defaulted traits allowed just for structs/enums\n     E0320, // recursive overflow during dropck\n     E0321, // extended coherence rules for defaulted traits violated\n-    E0323, // implemented an associated const when another trait item expected\n-    E0324, // implemented a method when another trait item expected\n-    E0325, // implemented an associated type when another trait item expected\n     E0328, // cannot implement Unsize explicitly\n     E0329, // associated const depends on type parameter or Self.\n-    E0369, // binary operation `<op>` cannot be applied to types\n     E0370, // discriminant overflow\n     E0374, // the trait `CoerceUnsized` may only be implemented for a coercion\n            // between structures with one field being coerced, none found\n@@ -2766,8 +2944,6 @@ register_diagnostics! {\n            // between structures\n     E0377, // the trait `CoerceUnsized` may only be implemented for a coercion\n            // between structures with the same definition\n-    E0390, // only a single inherent implementation marked with\n-           // `#[lang = \\\"{}\\\"]` is allowed for the `{}` primitive\n     E0393, // the type parameter `{}` must be explicitly specified in an object\n            // type because its default value `{}` references the type `Self`\"\n     E0399, // trait items need to be implemented because the associated"}]}