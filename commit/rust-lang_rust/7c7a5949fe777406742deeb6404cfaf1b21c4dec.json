{"sha": "7c7a5949fe777406742deeb6404cfaf1b21c4dec", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjN2E1OTQ5ZmU3Nzc0MDY3NDJkZWViNjQwNGNmYWYxYjIxYzRkZWM=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2016-10-10T23:39:44Z"}, "committer": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2016-10-10T23:40:05Z"}, "message": "Return early to avoid excessive indentation.`", "tree": {"sha": "122a4635802d8ea58d815c01f5849428ce5c9f78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/122a4635802d8ea58d815c01f5849428ce5c9f78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7c7a5949fe777406742deeb6404cfaf1b21c4dec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7c7a5949fe777406742deeb6404cfaf1b21c4dec", "html_url": "https://github.com/rust-lang/rust/commit/7c7a5949fe777406742deeb6404cfaf1b21c4dec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7c7a5949fe777406742deeb6404cfaf1b21c4dec/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8e257091b4fd77e1b9008c9129635fb6b76ac3d", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8e257091b4fd77e1b9008c9129635fb6b76ac3d", "html_url": "https://github.com/rust-lang/rust/commit/a8e257091b4fd77e1b9008c9129635fb6b76ac3d"}], "stats": {"total": 47, "additions": 23, "deletions": 24}, "files": [{"sha": "a589840e5ced96b6d601a40e49f81685384486a8", "filename": "src/librustc/session/filesearch.rs", "status": "modified", "additions": 23, "deletions": 24, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/7c7a5949fe777406742deeb6404cfaf1b21c4dec/src%2Flibrustc%2Fsession%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c7a5949fe777406742deeb6404cfaf1b21c4dec/src%2Flibrustc%2Fsession%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Ffilesearch.rs?ref=7c7a5949fe777406742deeb6404cfaf1b21c4dec", "patch": "@@ -68,33 +68,32 @@ impl<'a> FileSearch<'a> {\n     {\n         self.for_each_lib_search_path(|lib_search_path, kind| {\n             debug!(\"searching {}\", lib_search_path.display());\n-            match fs::read_dir(lib_search_path) {\n-                Ok(files) => {\n-                    let files = files.filter_map(|p| p.ok().map(|s| s.path()))\n-                                     .collect::<Vec<_>>();\n-                    fn is_rlib(p: &Path) -> bool {\n-                        p.extension().and_then(|s| s.to_str()) == Some(\"rlib\")\n+            let files = match fs::read_dir(lib_search_path) {\n+                Ok(files) => files,\n+                Err(..) => return,\n+            };\n+            let files = files.filter_map(|p| p.ok().map(|s| s.path()))\n+                             .collect::<Vec<_>>();\n+            fn is_rlib(p: &Path) -> bool {\n+                p.extension().and_then(|s| s.to_str()) == Some(\"rlib\")\n+            }\n+            // Reading metadata out of rlibs is faster, and if we find both\n+            // an rlib and a dylib we only read one of the files of\n+            // metadata, so in the name of speed, bring all rlib files to\n+            // the front of the search list.\n+            let files1 = files.iter().filter(|p| is_rlib(p));\n+            let files2 = files.iter().filter(|p| !is_rlib(p));\n+            for path in files1.chain(files2) {\n+                debug!(\"testing {}\", path.display());\n+                let maybe_picked = pick(path, kind);\n+                match maybe_picked {\n+                    FileMatches => {\n+                        debug!(\"picked {}\", path.display());\n                     }\n-                    // Reading metadata out of rlibs is faster, and if we find both\n-                    // an rlib and a dylib we only read one of the files of\n-                    // metadata, so in the name of speed, bring all rlib files to\n-                    // the front of the search list.\n-                    let files1 = files.iter().filter(|p| is_rlib(p));\n-                    let files2 = files.iter().filter(|p| !is_rlib(p));\n-                    for path in files1.chain(files2) {\n-                        debug!(\"testing {}\", path.display());\n-                        let maybe_picked = pick(path, kind);\n-                        match maybe_picked {\n-                            FileMatches => {\n-                                debug!(\"picked {}\", path.display());\n-                            }\n-                            FileDoesntMatch => {\n-                                debug!(\"rejected {}\", path.display());\n-                            }\n-                        }\n+                    FileDoesntMatch => {\n+                        debug!(\"rejected {}\", path.display());\n                     }\n                 }\n-                Err(..) => (),\n             }\n         });\n     }"}]}