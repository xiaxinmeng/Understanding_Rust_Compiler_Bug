{"sha": "baf832d6d903afbc39e3a01c752a1aa5218c020e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhZjgzMmQ2ZDkwM2FmYmMzOWUzYTAxYzc1MmExYWE1MjE4YzAyMGU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-02-22T00:27:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-22T00:27:09Z"}, "message": "Merge #3262\n\n3262: Fix handling of const patterns r=matklad a=flodiebold\n\nE.g. in `match x { None => ... }`, `None` is a path pattern (resolving to the\r\noption variant), not a binding. To determine this, we need to try to resolve the\r\nname during lowering. This isn't too hard since we already need to resolve names\r\nfor macro expansion anyway (though maybe a bit hacky).\r\n\r\nFixes #1618.\n\nCo-authored-by: Florian Diebold <florian.diebold@freiheit.com>", "tree": {"sha": "f8d3481c6274e032f166e8c342281216dd24ec0e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8d3481c6274e032f166e8c342281216dd24ec0e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/baf832d6d903afbc39e3a01c752a1aa5218c020e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeUHVdCRBK7hj4Ov3rIwAAdHIIAC8FqGcNf3vANLcKtzlmdzn0\nqiD1W9WLUlYbZEqwbDSLAuUUjtLEfzGkHJzrhYnlkjYWYCLPfkk8lQdHiqbhqq83\nvs2XCqdjk91JLuLf6+5vnqsqjHMMCWHSF/xFiWf3f1DzuERDtL9HX1zaDyVCmkP3\nGRswHtPtxRIEneHc0M4Tf5YSv5A8F7kT1DsAnpYuk5QACHsSkwdY3OHNpCNYbd5T\nH+yxuKOG2TuYEqKDONjW1oFR4JhGECfAa3KF0vApL/eUOJ020eG66cyWbcLCW9a1\nxDkWiUxouMIvUmQTnEuk4EwmGPMJ/MamXKMitdDvMxkOJHCQnOsWuvET54/fp48=\n=YMuo\n-----END PGP SIGNATURE-----\n", "payload": "tree f8d3481c6274e032f166e8c342281216dd24ec0e\nparent d8b09435357462dccf7f026f568b2cd1dc3ec67a\nparent f1f45f9191d60c52dbedec717aee0de4a0580bcc\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1582331229 +0000\ncommitter GitHub <noreply@github.com> 1582331229 +0000\n\nMerge #3262\n\n3262: Fix handling of const patterns r=matklad a=flodiebold\n\nE.g. in `match x { None => ... }`, `None` is a path pattern (resolving to the\r\noption variant), not a binding. To determine this, we need to try to resolve the\r\nname during lowering. This isn't too hard since we already need to resolve names\r\nfor macro expansion anyway (though maybe a bit hacky).\r\n\r\nFixes #1618.\n\nCo-authored-by: Florian Diebold <florian.diebold@freiheit.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/baf832d6d903afbc39e3a01c752a1aa5218c020e", "html_url": "https://github.com/rust-lang/rust/commit/baf832d6d903afbc39e3a01c752a1aa5218c020e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/baf832d6d903afbc39e3a01c752a1aa5218c020e/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8b09435357462dccf7f026f568b2cd1dc3ec67a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8b09435357462dccf7f026f568b2cd1dc3ec67a", "html_url": "https://github.com/rust-lang/rust/commit/d8b09435357462dccf7f026f568b2cd1dc3ec67a"}, {"sha": "f1f45f9191d60c52dbedec717aee0de4a0580bcc", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1f45f9191d60c52dbedec717aee0de4a0580bcc", "html_url": "https://github.com/rust-lang/rust/commit/f1f45f9191d60c52dbedec717aee0de4a0580bcc"}], "stats": {"total": 91, "additions": 85, "deletions": 6}, "files": [{"sha": "2bdfc2b8d1229aaec38f2b22d4027512a45bfba4", "filename": "crates/ra_hir_def/src/adt.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/baf832d6d903afbc39e3a01c752a1aa5218c020e/crates%2Fra_hir_def%2Fsrc%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/baf832d6d903afbc39e3a01c752a1aa5218c020e/crates%2Fra_hir_def%2Fsrc%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fadt.rs?ref=baf832d6d903afbc39e3a01c752a1aa5218c020e", "patch": "@@ -174,6 +174,7 @@ impl HasChildSource for VariantId {\n     }\n }\n \n+#[derive(Debug, Copy, Clone, PartialEq, Eq)]\n pub enum StructKind {\n     Tuple,\n     Record,"}, {"sha": "b3fb6d452aa623edf28913c2aea9f3a9473ecbf0", "filename": "crates/ra_hir_def/src/body/lower.rs", "status": "modified", "additions": 35, "deletions": 3, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/baf832d6d903afbc39e3a01c752a1aa5218c020e/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/baf832d6d903afbc39e3a01c752a1aa5218c020e/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs?ref=baf832d6d903afbc39e3a01c752a1aa5218c020e", "patch": "@@ -15,18 +15,20 @@ use ra_syntax::{\n use test_utils::tested_by;\n \n use crate::{\n+    adt::StructKind,\n     body::{Body, BodySourceMap, Expander, PatPtr},\n     builtin_type::{BuiltinFloat, BuiltinInt},\n     db::DefDatabase,\n     expr::{\n         ArithOp, Array, BinaryOp, BindingAnnotation, CmpOp, Expr, ExprId, Literal, LogicOp,\n         MatchArm, Ordering, Pat, PatId, RecordFieldPat, RecordLitField, Statement,\n     },\n+    item_scope::BuiltinShadowMode,\n     path::GenericArgs,\n     path::Path,\n     type_ref::{Mutability, TypeRef},\n-    ConstLoc, ContainerId, DefWithBodyId, EnumLoc, FunctionLoc, Intern, ModuleDefId, StaticLoc,\n-    StructLoc, TraitLoc, TypeAliasLoc, UnionLoc,\n+    AdtId, ConstLoc, ContainerId, DefWithBodyId, EnumLoc, FunctionLoc, Intern, ModuleDefId,\n+    StaticLoc, StructLoc, TraitLoc, TypeAliasLoc, UnionLoc,\n };\n \n pub(super) fn lower(\n@@ -571,7 +573,37 @@ where\n                 let name = bp.name().map(|nr| nr.as_name()).unwrap_or_else(Name::missing);\n                 let annotation = BindingAnnotation::new(bp.is_mutable(), bp.is_ref());\n                 let subpat = bp.pat().map(|subpat| self.collect_pat(subpat));\n-                Pat::Bind { name, mode: annotation, subpat }\n+                if annotation == BindingAnnotation::Unannotated && subpat.is_none() {\n+                    // This could also be a single-segment path pattern. To\n+                    // decide that, we need to try resolving the name.\n+                    let (resolved, _) = self.expander.crate_def_map.resolve_path(\n+                        self.db,\n+                        self.expander.module.local_id,\n+                        &name.clone().into(),\n+                        BuiltinShadowMode::Other,\n+                    );\n+                    match resolved.take_values() {\n+                        Some(ModuleDefId::ConstId(_)) => Pat::Path(name.into()),\n+                        Some(ModuleDefId::EnumVariantId(_)) => {\n+                            // this is only really valid for unit variants, but\n+                            // shadowing other enum variants with a pattern is\n+                            // an error anyway\n+                            Pat::Path(name.into())\n+                        }\n+                        Some(ModuleDefId::AdtId(AdtId::StructId(s)))\n+                            if self.db.struct_data(s).variant_data.kind() != StructKind::Record =>\n+                        {\n+                            // Funnily enough, record structs *can* be shadowed\n+                            // by pattern bindings (but unit or tuple structs\n+                            // can't).\n+                            Pat::Path(name.into())\n+                        }\n+                        // shadowing statics is an error as well, so we just ignore that case here\n+                        _ => Pat::Bind { name, mode: annotation, subpat },\n+                    }\n+                } else {\n+                    Pat::Bind { name, mode: annotation, subpat }\n+                }\n             }\n             ast::Pat::TupleStructPat(p) => {\n                 let path = p.path().and_then(|path| self.expander.parse_path(path));"}, {"sha": "66d0047173cc9d1b250400ed874100fd748cb040", "filename": "crates/ra_hir_def/src/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/baf832d6d903afbc39e3a01c752a1aa5218c020e/crates%2Fra_hir_def%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/baf832d6d903afbc39e3a01c752a1aa5218c020e/crates%2Fra_hir_def%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fexpr.rs?ref=baf832d6d903afbc39e3a01c752a1aa5218c020e", "patch": "@@ -48,7 +48,7 @@ pub enum Literal {\n \n #[derive(Debug, Clone, Eq, PartialEq)]\n pub enum Expr {\n-    /// This is produced if syntax tree does not have a required expression piece.\n+    /// This is produced if the syntax tree does not have a required expression piece.\n     Missing,\n     Path(Path),\n     If {"}, {"sha": "bf8ea192b7ac2d9a5c05737622ec96d65973bac3", "filename": "crates/ra_hir_ty/src/infer/pat.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/baf832d6d903afbc39e3a01c752a1aa5218c020e/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/baf832d6d903afbc39e3a01c752a1aa5218c020e/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fpat.rs?ref=baf832d6d903afbc39e3a01c752a1aa5218c020e", "patch": "@@ -189,7 +189,9 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n         };\n         // use a new type variable if we got Ty::Unknown here\n         let ty = self.insert_type_vars_shallow(ty);\n-        self.unify(&ty, expected);\n+        if !self.unify(&ty, expected) {\n+            // FIXME record mismatch, we need to change the type of self.type_mismatches for that\n+        }\n         let ty = self.resolve_ty_as_possible(ty);\n         self.write_pat_ty(pat, ty.clone());\n         ty"}, {"sha": "81d00c2afb8bc92d1d6208b01dffe1de0a206a58", "filename": "crates/ra_hir_ty/src/tests/patterns.rs", "status": "modified", "additions": 45, "deletions": 1, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/baf832d6d903afbc39e3a01c752a1aa5218c020e/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/baf832d6d903afbc39e3a01c752a1aa5218c020e/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fpatterns.rs?ref=baf832d6d903afbc39e3a01c752a1aa5218c020e", "patch": "@@ -1,4 +1,4 @@\n-use super::infer;\n+use super::{infer, infer_with_mismatches};\n use insta::assert_snapshot;\n use test_utils::covers;\n \n@@ -236,3 +236,47 @@ fn test(a1: A<u32>, o: Option<u64>) {\n     \"###\n     );\n }\n+\n+#[test]\n+fn infer_const_pattern() {\n+    assert_snapshot!(\n+        infer_with_mismatches(r#\"\n+enum Option<T> { None }\n+use Option::None;\n+struct Foo;\n+const Bar: usize = 1;\n+\n+fn test() {\n+    let a: Option<u32> = None;\n+    let b: Option<i64> = match a {\n+        None => None,\n+    };\n+    let _: () = match () { Foo => Foo }; // Expected mismatch\n+    let _: () = match () { Bar => Bar }; // Expected mismatch\n+}\n+\"#, true),\n+        @r###\"\n+    [74; 75) '1': usize\n+    [88; 310) '{     ...atch }': ()\n+    [98; 99) 'a': Option<u32>\n+    [115; 119) 'None': Option<u32>\n+    [129; 130) 'b': Option<i64>\n+    [146; 183) 'match ...     }': Option<i64>\n+    [152; 153) 'a': Option<u32>\n+    [164; 168) 'None': Option<u32>\n+    [172; 176) 'None': Option<i64>\n+    [193; 194) '_': ()\n+    [201; 224) 'match ... Foo }': Foo\n+    [207; 209) '()': ()\n+    [212; 215) 'Foo': Foo\n+    [219; 222) 'Foo': Foo\n+    [255; 256) '_': ()\n+    [263; 286) 'match ... Bar }': usize\n+    [269; 271) '()': ()\n+    [274; 277) 'Bar': usize\n+    [281; 284) 'Bar': usize\n+    [201; 224): expected (), got Foo\n+    [263; 286): expected (), got usize\n+    \"###\n+    );\n+}"}]}