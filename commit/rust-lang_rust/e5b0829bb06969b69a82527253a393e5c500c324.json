{"sha": "e5b0829bb06969b69a82527253a393e5c500c324", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1YjA4MjliYjA2OTY5YjY5YTgyNTI3MjUzYTM5M2U1YzUwMGMzMjQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-01-22T03:42:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-01-22T03:42:24Z"}, "message": "Auto merge of #39060 - jseyfried:improve_unused, r=nrc\n\nImprove unused `extern crate` and unused `#[macro_use]` warnings\n\nThis PR\n - adds `unused_imports` warnings for unused `#[macro_use] extern crate` macro imports,\n - improves `unused_extern_crates` warnings (avoids false negatives), and\n - removes unused `#[macro_use]` imports and unused `extern crate`s.\n\nr? @nrc", "tree": {"sha": "5d1239898227ea3f7832280c7a6a7a3f8261af67", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d1239898227ea3f7832280c7a6a7a3f8261af67"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e5b0829bb06969b69a82527253a393e5c500c324", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e5b0829bb06969b69a82527253a393e5c500c324", "html_url": "https://github.com/rust-lang/rust/commit/e5b0829bb06969b69a82527253a393e5c500c324", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e5b0829bb06969b69a82527253a393e5c500c324/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b063750343601167f3d061a913172db2a0c2708", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b063750343601167f3d061a913172db2a0c2708", "html_url": "https://github.com/rust-lang/rust/commit/1b063750343601167f3d061a913172db2a0c2708"}, {"sha": "191abc42642c29f589a34e7f6cdebd081c373138", "url": "https://api.github.com/repos/rust-lang/rust/commits/191abc42642c29f589a34e7f6cdebd081c373138", "html_url": "https://github.com/rust-lang/rust/commit/191abc42642c29f589a34e7f6cdebd081c373138"}], "stats": {"total": 231, "additions": 104, "deletions": 127}, "files": [{"sha": "2c10272916fdc58fc8d07e53ac1460377324faaa", "filename": "src/Cargo.lock", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e5b0829bb06969b69a82527253a393e5c500c324/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/e5b0829bb06969b69a82527253a393e5c500c324/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=e5b0829bb06969b69a82527253a393e5c500c324", "patch": "@@ -212,16 +212,13 @@ dependencies = [\n  \"proc_macro_tokens 0.0.0\",\n  \"rustc_plugin 0.0.0\",\n  \"syntax 0.0.0\",\n- \"syntax_pos 0.0.0\",\n ]\n \n [[package]]\n name = \"proc_macro_tokens\"\n version = \"0.0.0\"\n dependencies = [\n- \"log 0.0.0\",\n  \"syntax 0.0.0\",\n- \"syntax_pos 0.0.0\",\n ]\n \n [[package]]\n@@ -240,7 +237,6 @@ name = \"rustc\"\n version = \"0.0.0\"\n dependencies = [\n  \"arena 0.0.0\",\n- \"flate 0.0.0\",\n  \"fmt_macros 0.0.0\",\n  \"graphviz 0.0.0\",\n  \"log 0.0.0\",\n@@ -310,7 +306,6 @@ dependencies = [\n  \"rustc_data_structures 0.0.0\",\n  \"rustc_errors 0.0.0\",\n  \"rustc_i128 0.0.0\",\n- \"serialize 0.0.0\",\n  \"syntax 0.0.0\",\n  \"syntax_pos 0.0.0\",\n ]\n@@ -319,7 +314,6 @@ dependencies = [\n name = \"rustc_const_math\"\n version = \"0.0.0\"\n dependencies = [\n- \"log 0.0.0\",\n  \"rustc_i128 0.0.0\",\n  \"serialize 0.0.0\",\n  \"syntax 0.0.0\",\n@@ -339,7 +333,6 @@ name = \"rustc_driver\"\n version = \"0.0.0\"\n dependencies = [\n  \"arena 0.0.0\",\n- \"flate 0.0.0\",\n  \"graphviz 0.0.0\",\n  \"log 0.0.0\",\n  \"proc_macro_plugin 0.0.0\",\n@@ -371,8 +364,6 @@ dependencies = [\n name = \"rustc_errors\"\n version = \"0.0.0\"\n dependencies = [\n- \"log 0.0.0\",\n- \"serialize 0.0.0\",\n  \"syntax_pos 0.0.0\",\n ]\n \n@@ -388,7 +379,6 @@ dependencies = [\n  \"log 0.0.0\",\n  \"rustc 0.0.0\",\n  \"rustc_data_structures 0.0.0\",\n- \"rustc_i128 0.0.0\",\n  \"serialize 0.0.0\",\n  \"syntax 0.0.0\",\n  \"syntax_pos 0.0.0\",\n@@ -443,7 +433,6 @@ dependencies = [\n  \"graphviz 0.0.0\",\n  \"log 0.0.0\",\n  \"rustc 0.0.0\",\n- \"rustc_back 0.0.0\",\n  \"rustc_bitflags 0.0.0\",\n  \"rustc_const_eval 0.0.0\",\n  \"rustc_const_math 0.0.0\",\n@@ -474,10 +463,8 @@ version = \"0.0.0\"\n name = \"rustc_plugin\"\n version = \"0.0.0\"\n dependencies = [\n- \"log 0.0.0\",\n  \"rustc 0.0.0\",\n  \"rustc_back 0.0.0\",\n- \"rustc_bitflags 0.0.0\",\n  \"rustc_errors 0.0.0\",\n  \"rustc_metadata 0.0.0\",\n  \"syntax 0.0.0\",\n@@ -520,9 +507,7 @@ dependencies = [\n name = \"rustc_trans\"\n version = \"0.0.0\"\n dependencies = [\n- \"arena 0.0.0\",\n  \"flate 0.0.0\",\n- \"graphviz 0.0.0\",\n  \"log 0.0.0\",\n  \"rustc 0.0.0\",\n  \"rustc_back 0.0.0\",\n@@ -535,7 +520,6 @@ dependencies = [\n  \"rustc_incremental 0.0.0\",\n  \"rustc_llvm 0.0.0\",\n  \"rustc_platform_intrinsics 0.0.0\",\n- \"serialize 0.0.0\",\n  \"syntax 0.0.0\",\n  \"syntax_pos 0.0.0\",\n ]\n@@ -585,7 +569,6 @@ dependencies = [\n name = \"serialize\"\n version = \"0.0.0\"\n dependencies = [\n- \"log 0.0.0\",\n  \"rustc_i128 0.0.0\",\n ]\n "}, {"sha": "33fd814cd5f8ba7848e1bc680ae99b72cecaa571", "filename": "src/libproc_macro_plugin/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e5b0829bb06969b69a82527253a393e5c500c324/src%2Flibproc_macro_plugin%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e5b0829bb06969b69a82527253a393e5c500c324/src%2Flibproc_macro_plugin%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro_plugin%2FCargo.toml?ref=e5b0829bb06969b69a82527253a393e5c500c324", "patch": "@@ -11,5 +11,4 @@ crate-type = [\"dylib\"]\n log = { path = \"../liblog\" }\n rustc_plugin = { path = \"../librustc_plugin\" }\n syntax = { path = \"../libsyntax\" }\n-syntax_pos = { path = \"../libsyntax_pos\" }\n proc_macro_tokens = { path = \"../libproc_macro_tokens\" }"}, {"sha": "9d8bb7fa0f57cc2c8e36db215cce7a501a77b09e", "filename": "src/libproc_macro_plugin/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e5b0829bb06969b69a82527253a393e5c500c324/src%2Flibproc_macro_plugin%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5b0829bb06969b69a82527253a393e5c500c324/src%2Flibproc_macro_plugin%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro_plugin%2Flib.rs?ref=e5b0829bb06969b69a82527253a393e5c500c324", "patch": "@@ -88,7 +88,6 @@\n \n extern crate rustc_plugin;\n extern crate syntax;\n-extern crate syntax_pos;\n extern crate proc_macro_tokens;\n #[macro_use] extern crate log;\n "}, {"sha": "2cec4d7af54cb2023295415e5c1fcded0e28f819", "filename": "src/libproc_macro_tokens/Cargo.toml", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5b0829bb06969b69a82527253a393e5c500c324/src%2Flibproc_macro_tokens%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e5b0829bb06969b69a82527253a393e5c500c324/src%2Flibproc_macro_tokens%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro_tokens%2FCargo.toml?ref=e5b0829bb06969b69a82527253a393e5c500c324", "patch": "@@ -10,5 +10,3 @@ crate-type = [\"dylib\"]\n \n [dependencies]\n syntax = { path = \"../libsyntax\" }\n-syntax_pos = { path = \"../libsyntax_pos\" }\n-log = { path = \"../liblog\" }"}, {"sha": "18aa60f9df16edbbd06676fd4b79172f57458b32", "filename": "src/libproc_macro_tokens/build.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e5b0829bb06969b69a82527253a393e5c500c324/src%2Flibproc_macro_tokens%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5b0829bb06969b69a82527253a393e5c500c324/src%2Flibproc_macro_tokens%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro_tokens%2Fbuild.rs?ref=e5b0829bb06969b69a82527253a393e5c500c324", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate syntax;\n-extern crate syntax_pos;\n-\n use syntax::ast::Ident;\n use syntax::codemap::DUMMY_SP;\n use syntax::parse::token::{self, Token};"}, {"sha": "e20ed6899154e70775a880466f12d0b1191a43aa", "filename": "src/libproc_macro_tokens/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5b0829bb06969b69a82527253a393e5c500c324/src%2Flibproc_macro_tokens%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5b0829bb06969b69a82527253a393e5c500c324/src%2Flibproc_macro_tokens%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro_tokens%2Flib.rs?ref=e5b0829bb06969b69a82527253a393e5c500c324", "patch": "@@ -58,8 +58,6 @@\n #![feature(rustc_private)]\n \n extern crate syntax;\n-extern crate syntax_pos;\n-#[macro_use] extern crate log;\n \n pub mod build;\n pub mod parse;"}, {"sha": "73268d0e66283acd212f010c25377e3ce3aa6042", "filename": "src/libproc_macro_tokens/parse.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5b0829bb06969b69a82527253a393e5c500c324/src%2Flibproc_macro_tokens%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5b0829bb06969b69a82527253a393e5c500c324/src%2Flibproc_macro_tokens%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro_tokens%2Fparse.rs?ref=e5b0829bb06969b69a82527253a393e5c500c324", "patch": "@@ -10,8 +10,6 @@\n \n //! Parsing utilities for writing procedural macros.\n \n-extern crate syntax;\n-\n use syntax::parse::{ParseSess, filemap_to_tts};\n use syntax::tokenstream::TokenStream;\n "}, {"sha": "3c455eb05011eef2c0551348221b406cd8faaabc", "filename": "src/librustc/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e5b0829bb06969b69a82527253a393e5c500c324/src%2Flibrustc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e5b0829bb06969b69a82527253a393e5c500c324/src%2Flibrustc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2FCargo.toml?ref=e5b0829bb06969b69a82527253a393e5c500c324", "patch": "@@ -10,7 +10,6 @@ crate-type = [\"dylib\"]\n \n [dependencies]\n arena = { path = \"../libarena\" }\n-flate = { path = \"../libflate\" }\n fmt_macros = { path = \"../libfmt_macros\" }\n graphviz = { path = \"../libgraphviz\" }\n log = { path = \"../liblog\" }"}, {"sha": "619a3e995c3a59ab3077323285e4d485271c0cd1", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e5b0829bb06969b69a82527253a393e5c500c324/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5b0829bb06969b69a82527253a393e5c500c324/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=e5b0829bb06969b69a82527253a393e5c500c324", "patch": "@@ -26,7 +26,6 @@\n #![feature(associated_consts)]\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n-#![feature(collections)]\n #![feature(conservative_impl_trait)]\n #![feature(const_fn)]\n #![feature(core_intrinsics)]\n@@ -39,11 +38,9 @@\n #![feature(slice_patterns)]\n #![feature(staged_api)]\n #![feature(unboxed_closures)]\n-#![cfg_attr(test, feature(test))]\n \n extern crate arena;\n extern crate core;\n-extern crate flate;\n extern crate fmt_macros;\n extern crate getopts;\n extern crate graphviz;\n@@ -52,22 +49,18 @@ extern crate rustc_llvm as llvm;\n extern crate rustc_back;\n extern crate rustc_data_structures;\n extern crate serialize;\n-extern crate collections;\n extern crate rustc_const_math;\n extern crate rustc_errors as errors;\n #[macro_use] extern crate log;\n #[macro_use] extern crate syntax;\n-#[macro_use] extern crate syntax_pos;\n+extern crate syntax_pos;\n #[macro_use] #[no_link] extern crate rustc_bitflags;\n \n extern crate serialize as rustc_serialize; // used by deriving\n \n // SNAP:\n extern crate rustc_i128;\n \n-#[cfg(test)]\n-extern crate test;\n-\n #[macro_use]\n mod macros;\n "}, {"sha": "ff028c202a8497e5772c7575d6c6bdfc938f735c", "filename": "src/librustc_const_eval/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e5b0829bb06969b69a82527253a393e5c500c324/src%2Flibrustc_const_eval%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e5b0829bb06969b69a82527253a393e5c500c324/src%2Flibrustc_const_eval%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2FCargo.toml?ref=e5b0829bb06969b69a82527253a393e5c500c324", "patch": "@@ -11,7 +11,6 @@ crate-type = [\"dylib\"]\n [dependencies]\n arena = { path = \"../libarena\" }\n log = { path = \"../liblog\" }\n-serialize = { path = \"../libserialize\" }\n rustc = { path = \"../librustc\" }\n rustc_back = { path = \"../librustc_back\" }\n rustc_const_math = { path = \"../librustc_const_math\" }"}, {"sha": "2b6f487c2c942a47694201937f499d5e68365d0e", "filename": "src/librustc_const_eval/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e5b0829bb06969b69a82527253a393e5c500c324/src%2Flibrustc_const_eval%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5b0829bb06969b69a82527253a393e5c500c324/src%2Flibrustc_const_eval%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Flib.rs?ref=e5b0829bb06969b69a82527253a393e5c500c324", "patch": "@@ -40,7 +40,6 @@ extern crate rustc_data_structures;\n extern crate rustc_errors;\n extern crate graphviz;\n extern crate syntax_pos;\n-extern crate serialize as rustc_serialize; // used by deriving\n \n extern crate rustc_i128;\n "}, {"sha": "e6db1557fbe3d8c6ba6814cfaa2981e0e8203aa4", "filename": "src/librustc_const_math/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e5b0829bb06969b69a82527253a393e5c500c324/src%2Flibrustc_const_math%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e5b0829bb06969b69a82527253a393e5c500c324/src%2Flibrustc_const_math%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_math%2FCargo.toml?ref=e5b0829bb06969b69a82527253a393e5c500c324", "patch": "@@ -9,7 +9,6 @@ path = \"lib.rs\"\n crate-type = [\"dylib\"]\n \n [dependencies]\n-log = { path = \"../liblog\" }\n serialize = { path = \"../libserialize\" }\n syntax = { path = \"../libsyntax\" }\n rustc_i128 = { path = \"../librustc_i128\" }"}, {"sha": "d40a6aa32fd46b9ef7a69c854372d424f05c13e7", "filename": "src/librustc_const_math/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e5b0829bb06969b69a82527253a393e5c500c324/src%2Flibrustc_const_math%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5b0829bb06969b69a82527253a393e5c500c324/src%2Flibrustc_const_math%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_math%2Flib.rs?ref=e5b0829bb06969b69a82527253a393e5c500c324", "patch": "@@ -28,8 +28,7 @@\n #![feature(const_fn)]\n #![cfg_attr(not(stage0), feature(i128))]\n \n-#[macro_use] extern crate log;\n-#[macro_use] extern crate syntax;\n+extern crate syntax;\n \n // SNAP: remove use of this crate\n extern crate rustc_i128;"}, {"sha": "caa5c8b7e00581562638ea76af04f39571305455", "filename": "src/librustc_driver/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e5b0829bb06969b69a82527253a393e5c500c324/src%2Flibrustc_driver%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e5b0829bb06969b69a82527253a393e5c500c324/src%2Flibrustc_driver%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2FCargo.toml?ref=e5b0829bb06969b69a82527253a393e5c500c324", "patch": "@@ -10,7 +10,6 @@ crate-type = [\"dylib\"]\n \n [dependencies]\n arena = { path = \"../libarena\" }\n-flate = { path = \"../libflate\" }\n graphviz = { path = \"../libgraphviz\" }\n log = { path = \"../liblog\" }\n proc_macro_plugin = { path = \"../libproc_macro_plugin\" }"}, {"sha": "0ecd12b3a903aff65a8b4bc900039752ba57b84d", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5b0829bb06969b69a82527253a393e5c500c324/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5b0829bb06969b69a82527253a393e5c500c324/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=e5b0829bb06969b69a82527253a393e5c500c324", "patch": "@@ -32,7 +32,6 @@\n #![feature(staged_api)]\n \n extern crate arena;\n-extern crate flate;\n extern crate getopts;\n extern crate graphviz;\n extern crate libc;\n@@ -57,7 +56,6 @@ extern crate serialize;\n extern crate rustc_llvm as llvm;\n #[macro_use]\n extern crate log;\n-#[macro_use]\n extern crate syntax;\n extern crate syntax_ext;\n extern crate syntax_pos;"}, {"sha": "2ba1f501a63d800a9b659b33353480e515568bf4", "filename": "src/librustc_errors/Cargo.toml", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5b0829bb06969b69a82527253a393e5c500c324/src%2Flibrustc_errors%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e5b0829bb06969b69a82527253a393e5c500c324/src%2Flibrustc_errors%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2FCargo.toml?ref=e5b0829bb06969b69a82527253a393e5c500c324", "patch": "@@ -9,6 +9,4 @@ path = \"lib.rs\"\n crate-type = [\"dylib\"]\n \n [dependencies]\n-log = { path = \"../liblog\" }\n-serialize = { path = \"../libserialize\" }\n syntax_pos = { path = \"../libsyntax_pos\" }"}, {"sha": "bf5f7cde7eb06b9ac56eaa1119838ecc5f6afbd2", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e5b0829bb06969b69a82527253a393e5c500c324/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5b0829bb06969b69a82527253a393e5c500c324/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=e5b0829bb06969b69a82527253a393e5c500c324", "patch": "@@ -23,16 +23,9 @@\n #![feature(staged_api)]\n #![feature(range_contains)]\n #![feature(libc)]\n-#![feature(unicode)]\n \n-extern crate serialize;\n extern crate term;\n-#[macro_use]\n-extern crate log;\n-#[macro_use]\n extern crate libc;\n-extern crate std_unicode;\n-extern crate serialize as rustc_serialize; // used by deriving\n extern crate syntax_pos;\n \n pub use emitter::ColorConfig;"}, {"sha": "e3ee7527545042211481ecf9d36f6e228c23f0bc", "filename": "src/librustc_incremental/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e5b0829bb06969b69a82527253a393e5c500c324/src%2Flibrustc_incremental%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e5b0829bb06969b69a82527253a393e5c500c324/src%2Flibrustc_incremental%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2FCargo.toml?ref=e5b0829bb06969b69a82527253a393e5c500c324", "patch": "@@ -16,4 +16,3 @@ serialize = { path = \"../libserialize\" }\n log = { path = \"../liblog\" }\n syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n-rustc_i128 = { path = \"../librustc_i128\" }"}, {"sha": "a866a15c4d280e8842afadf7a977c4c1bc6f7afa", "filename": "src/librustc_incremental/lib.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e5b0829bb06969b69a82527253a393e5c500c324/src%2Flibrustc_incremental%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5b0829bb06969b69a82527253a393e5c500c324/src%2Flibrustc_incremental%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Flib.rs?ref=e5b0829bb06969b69a82527253a393e5c500c324", "patch": "@@ -30,11 +30,9 @@ extern crate rustc_data_structures;\n extern crate serialize as rustc_serialize;\n \n #[macro_use] extern crate log;\n-#[macro_use] extern crate syntax;\n+extern crate syntax;\n extern crate syntax_pos;\n \n-extern crate rustc_i128;\n-\n const ATTR_DIRTY: &'static str = \"rustc_dirty\";\n const ATTR_CLEAN: &'static str = \"rustc_clean\";\n const ATTR_DIRTY_METADATA: &'static str = \"rustc_metadata_dirty\";"}, {"sha": "34bc57884ecbbb5b9a19a457fc195cd3bf821eca", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e5b0829bb06969b69a82527253a393e5c500c324/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5b0829bb06969b69a82527253a393e5c500c324/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=e5b0829bb06969b69a82527253a393e5c500c324", "patch": "@@ -37,7 +37,6 @@\n #![feature(slice_patterns)]\n #![feature(staged_api)]\n \n-#[macro_use]\n extern crate syntax;\n #[macro_use]\n extern crate rustc;"}, {"sha": "9f49d02f86cecb6aa09f83e1c771351e11c6cfe4", "filename": "src/librustc_mir/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e5b0829bb06969b69a82527253a393e5c500c324/src%2Flibrustc_mir%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e5b0829bb06969b69a82527253a393e5c500c324/src%2Flibrustc_mir%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2FCargo.toml?ref=e5b0829bb06969b69a82527253a393e5c500c324", "patch": "@@ -12,7 +12,6 @@ crate-type = [\"dylib\"]\n graphviz = { path = \"../libgraphviz\" }\n log = { path = \"../liblog\" }\n rustc = { path = \"../librustc\" }\n-rustc_back = { path = \"../librustc_back\" }\n rustc_const_eval = { path = \"../librustc_const_eval\" }\n rustc_const_math = { path = \"../librustc_const_math\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }"}, {"sha": "e7764d58d75ff55ac6dde6c9f307f5bfe88659eb", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e5b0829bb06969b69a82527253a393e5c500c324/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5b0829bb06969b69a82527253a393e5c500c324/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=e5b0829bb06969b69a82527253a393e5c500c324", "patch": "@@ -31,7 +31,6 @@ extern crate graphviz as dot;\n #[macro_use]\n extern crate rustc;\n extern crate rustc_data_structures;\n-extern crate rustc_back;\n #[macro_use]\n #[no_link]\n extern crate rustc_bitflags;"}, {"sha": "7a465f0ec42392244bb038f8c62ad1dc4c6e76d1", "filename": "src/librustc_passes/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e5b0829bb06969b69a82527253a393e5c500c324/src%2Flibrustc_passes%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5b0829bb06969b69a82527253a393e5c500c324/src%2Flibrustc_passes%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flib.rs?ref=e5b0829bb06969b69a82527253a393e5c500c324", "patch": "@@ -27,7 +27,6 @@\n #![feature(staged_api)]\n #![feature(rustc_private)]\n \n-extern crate core;\n #[macro_use]\n extern crate rustc;\n extern crate rustc_const_eval;"}, {"sha": "7f41d0527617a4161634bcf55ef05edaff10b850", "filename": "src/librustc_plugin/Cargo.toml", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5b0829bb06969b69a82527253a393e5c500c324/src%2Flibrustc_plugin%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e5b0829bb06969b69a82527253a393e5c500c324/src%2Flibrustc_plugin%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2FCargo.toml?ref=e5b0829bb06969b69a82527253a393e5c500c324", "patch": "@@ -10,10 +10,8 @@ path = \"lib.rs\"\n crate-type = [\"dylib\"]\n \n [dependencies]\n-log = { path = \"../liblog\" }\n rustc = { path = \"../librustc\" }\n rustc_back = { path = \"../librustc_back\" }\n-rustc_bitflags = { path = \"../librustc_bitflags\" }\n rustc_metadata = { path = \"../librustc_metadata\" }\n syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }"}, {"sha": "8aa680ca12d10f49845a29f9e55785a695add257", "filename": "src/librustc_plugin/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5b0829bb06969b69a82527253a393e5c500c324/src%2Flibrustc_plugin%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5b0829bb06969b69a82527253a393e5c500c324/src%2Flibrustc_plugin%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Flib.rs?ref=e5b0829bb06969b69a82527253a393e5c500c324", "patch": "@@ -63,9 +63,7 @@\n #![feature(rustc_diagnostic_macros)]\n #![feature(rustc_private)]\n \n-#[macro_use] extern crate log;\n #[macro_use] extern crate syntax;\n-#[macro_use] #[no_link] extern crate rustc_bitflags;\n \n extern crate rustc;\n extern crate rustc_back;"}, {"sha": "f74af416cde09c5a62a40e3f8f1a995fa2fd4bb1", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 35, "deletions": 15, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/e5b0829bb06969b69a82527253a393e5c500c324/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5b0829bb06969b69a82527253a393e5c500c324/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=e5b0829bb06969b69a82527253a393e5c500c324", "patch": "@@ -249,6 +249,8 @@ impl<'a> Resolver<'a> {\n                 // n.b. we don't need to look at the path option here, because cstore already did\n                 let crate_id = self.session.cstore.extern_mod_stmt_cnum(item.id).unwrap();\n                 let module = self.get_extern_crate_root(crate_id);\n+                self.populate_module_if_necessary(module);\n+                let used = self.process_legacy_macro_imports(item, module, expansion);\n                 let binding =\n                     (module, ty::Visibility::Public, sp, expansion).to_name_binding(self.arenas);\n                 let directive = self.arenas.alloc_import_directive(ImportDirective {\n@@ -260,11 +262,11 @@ impl<'a> Resolver<'a> {\n                     module_path: Vec::new(),\n                     vis: Cell::new(vis),\n                     expansion: expansion,\n+                    used: Cell::new(used),\n                 });\n+                self.potentially_unused_imports.push(directive);\n                 let imported_binding = self.import(binding, directive);\n                 self.define(parent, ident, TypeNS, imported_binding);\n-                self.populate_module_if_necessary(module);\n-                self.process_legacy_macro_imports(item, module, expansion);\n             }\n \n             ItemKind::Mod(..) if item.ident == keywords::Invalid.ident() => {} // Crate root\n@@ -522,7 +524,6 @@ impl<'a> Resolver<'a> {\n                            binding: &'a NameBinding<'a>,\n                            span: Span,\n                            allow_shadowing: bool) {\n-        self.used_crates.insert(binding.def().def_id().krate);\n         self.macro_names.insert(name);\n         if self.builtin_macros.insert(name, binding).is_some() && !allow_shadowing {\n             let msg = format!(\"`{}` is already in scope\", name);\n@@ -532,43 +533,61 @@ impl<'a> Resolver<'a> {\n         }\n     }\n \n-    fn process_legacy_macro_imports(&mut self, item: &Item, module: Module<'a>, expansion: Mark) {\n+    // This returns true if we should consider the underlying `extern crate` to be used.\n+    fn process_legacy_macro_imports(&mut self, item: &Item, module: Module<'a>, expansion: Mark)\n+                                    -> bool {\n         let allow_shadowing = expansion == Mark::root();\n         let legacy_imports = self.legacy_macro_imports(&item.attrs);\n-        let cnum = module.def_id().unwrap().krate;\n+        let mut used = legacy_imports != LegacyMacroImports::default();\n \n         // `#[macro_use]` and `#[macro_reexport]` are only allowed at the crate root.\n-        if self.current_module.parent.is_some() && legacy_imports != LegacyMacroImports::default() {\n+        if self.current_module.parent.is_some() && used {\n             span_err!(self.session, item.span, E0468,\n                       \"an `extern crate` loading macros must be at the crate root\");\n-        } else if !self.use_extern_macros &&\n-                  self.session.cstore.dep_kind(cnum).macros_only() &&\n-                  legacy_imports == LegacyMacroImports::default() {\n+        } else if !self.use_extern_macros && !used &&\n+                  self.session.cstore.dep_kind(module.def_id().unwrap().krate).macros_only() {\n             let msg = \"custom derive crates and `#[no_link]` crates have no effect without \\\n                        `#[macro_use]`\";\n             self.session.span_warn(item.span, msg);\n-            self.used_crates.insert(cnum); // Avoid the normal unused extern crate warning\n+            used = true; // Avoid the normal unused extern crate warning\n         }\n \n+        let (graph_root, arenas) = (self.graph_root, self.arenas);\n+        let macro_use_directive = |span| arenas.alloc_import_directive(ImportDirective {\n+            id: item.id,\n+            parent: graph_root,\n+            imported_module: Cell::new(Some(module)),\n+            subclass: ImportDirectiveSubclass::MacroUse,\n+            span: span,\n+            module_path: Vec::new(),\n+            vis: Cell::new(ty::Visibility::Restricted(DefId::local(CRATE_DEF_INDEX))),\n+            expansion: expansion,\n+            used: Cell::new(false),\n+        });\n+\n         if let Some(span) = legacy_imports.import_all {\n+            let directive = macro_use_directive(span);\n+            self.potentially_unused_imports.push(directive);\n             module.for_each_child(|ident, ns, binding| if ns == MacroNS {\n-                self.legacy_import_macro(ident.name, binding, span, allow_shadowing);\n+                let imported_binding = self.import(binding, directive);\n+                self.legacy_import_macro(ident.name, imported_binding, span, allow_shadowing);\n             });\n         } else {\n             for (name, span) in legacy_imports.imports {\n                 let ident = Ident::with_empty_ctxt(name);\n                 let result = self.resolve_ident_in_module(module, ident, MacroNS, false, None);\n                 if let Ok(binding) = result {\n-                    self.legacy_import_macro(name, binding, span, allow_shadowing);\n+                    let directive = macro_use_directive(span);\n+                    self.potentially_unused_imports.push(directive);\n+                    let imported_binding = self.import(binding, directive);\n+                    self.legacy_import_macro(name, imported_binding, span, allow_shadowing);\n                 } else {\n                     span_err!(self.session, span, E0469, \"imported macro not found\");\n                 }\n             }\n         }\n         for (name, span) in legacy_imports.reexports {\n-            let krate = module.def_id().unwrap().krate;\n-            self.used_crates.insert(krate);\n-            self.session.cstore.export_macros(krate);\n+            self.session.cstore.export_macros(module.def_id().unwrap().krate);\n             let ident = Ident::with_empty_ctxt(name);\n             let result = self.resolve_ident_in_module(module, ident, MacroNS, false, None);\n             if let Ok(binding) = result {\n@@ -577,6 +596,7 @@ impl<'a> Resolver<'a> {\n                 span_err!(self.session, span, E0470, \"reexported macro not found\");\n             }\n         }\n+        used\n     }\n \n     // does this attribute list contain \"macro_use\"?"}, {"sha": "d150ff1ff81f55e6eb8cb7d5624bb0679556c568", "filename": "src/librustc_resolve/check_unused.rs", "status": "modified", "additions": 21, "deletions": 11, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/e5b0829bb06969b69a82527253a393e5c500c324/src%2Flibrustc_resolve%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5b0829bb06969b69a82527253a393e5c500c324/src%2Flibrustc_resolve%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fcheck_unused.rs?ref=e5b0829bb06969b69a82527253a393e5c500c324", "patch": "@@ -22,8 +22,9 @@\n use std::ops::{Deref, DerefMut};\n \n use Resolver;\n+use resolve_imports::ImportDirectiveSubclass;\n \n-use rustc::lint;\n+use rustc::{lint, ty};\n use rustc::util::nodemap::NodeMap;\n use syntax::ast::{self, ViewPathGlob, ViewPathList, ViewPathSimple};\n use syntax::visit::{self, Visitor};\n@@ -86,16 +87,6 @@ impl<'a, 'b> Visitor<'a> for UnusedImportCheckVisitor<'a, 'b> {\n         }\n \n         match item.node {\n-            ast::ItemKind::ExternCrate(_) => {\n-                if let Some(crate_num) = self.session.cstore.extern_mod_stmt_cnum(item.id) {\n-                    if !self.used_crates.contains(&crate_num) {\n-                        self.session.add_lint(lint::builtin::UNUSED_EXTERN_CRATES,\n-                                              item.id,\n-                                              item.span,\n-                                              \"unused extern crate\".to_string());\n-                    }\n-                }\n-            }\n             ast::ItemKind::Use(ref p) => {\n                 match p.node {\n                     ViewPathSimple(..) => {\n@@ -124,6 +115,25 @@ impl<'a, 'b> Visitor<'a> for UnusedImportCheckVisitor<'a, 'b> {\n }\n \n pub fn check_crate(resolver: &mut Resolver, krate: &ast::Crate) {\n+    for directive in resolver.potentially_unused_imports.iter() {\n+        match directive.subclass {\n+            _ if directive.used.get() ||\n+                 directive.vis.get() == ty::Visibility::Public ||\n+                 directive.span.source_equal(&DUMMY_SP) => {}\n+            ImportDirectiveSubclass::ExternCrate => {\n+                let lint = lint::builtin::UNUSED_EXTERN_CRATES;\n+                let msg = \"unused extern crate\".to_string();\n+                resolver.session.add_lint(lint, directive.id, directive.span, msg);\n+            }\n+            ImportDirectiveSubclass::MacroUse => {\n+                let lint = lint::builtin::UNUSED_IMPORTS;\n+                let msg = \"unused `#[macro_use]` import\".to_string();\n+                resolver.session.add_lint(lint, directive.id, directive.span, msg);\n+            }\n+            _ => {}\n+        }\n+    }\n+\n     let mut visitor = UnusedImportCheckVisitor {\n         resolver: resolver,\n         unused_imports: NodeMap(),"}, {"sha": "8a206664a7d3af347f80915532115f5d036f1a04", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e5b0829bb06969b69a82527253a393e5c500c324/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5b0829bb06969b69a82527253a393e5c500c324/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=e5b0829bb06969b69a82527253a393e5c500c324", "patch": "@@ -1099,7 +1099,6 @@ pub struct Resolver<'a> {\n     pub glob_map: GlobMap,\n \n     used_imports: FxHashSet<(NodeId, Namespace)>,\n-    used_crates: FxHashSet<CrateNum>,\n     pub maybe_unused_trait_imports: NodeSet,\n \n     privacy_errors: Vec<PrivacyError<'a>>,\n@@ -1130,6 +1129,8 @@ pub struct Resolver<'a> {\n \n     // A set of procedural macros imported by `#[macro_use]` that have already been warned about\n     warned_proc_macros: FxHashSet<Name>,\n+\n+    potentially_unused_imports: Vec<&'a ImportDirective<'a>>,\n }\n \n pub struct ResolverArenas<'a> {\n@@ -1279,7 +1280,6 @@ impl<'a> Resolver<'a> {\n             glob_map: NodeMap(),\n \n             used_imports: FxHashSet(),\n-            used_crates: FxHashSet(),\n             maybe_unused_trait_imports: NodeSet(),\n \n             privacy_errors: Vec::new(),\n@@ -1309,6 +1309,7 @@ impl<'a> Resolver<'a> {\n             whitelisted_legacy_custom_derives: Vec::new(),\n             proc_macro_enabled: features.proc_macro,\n             warned_proc_macros: FxHashSet(),\n+            potentially_unused_imports: Vec::new(),\n         }\n     }\n \n@@ -1354,15 +1355,11 @@ impl<'a> Resolver<'a> {\n \n     fn record_use(&mut self, ident: Ident, ns: Namespace, binding: &'a NameBinding<'a>, span: Span)\n                   -> bool /* true if an error was reported */ {\n-        // track extern crates for unused_extern_crate lint\n-        if let Some(DefId { krate, .. }) = binding.module().and_then(ModuleData::def_id) {\n-            self.used_crates.insert(krate);\n-        }\n-\n         match binding.kind {\n             NameBindingKind::Import { directive, binding, ref used, legacy_self_import }\n                     if !used.get() => {\n                 used.set(true);\n+                directive.used.set(true);\n                 if legacy_self_import {\n                     self.warn_legacy_self_import(directive);\n                     return false;"}, {"sha": "682b3ff834fad1eca4ddb76284ed08d12881cf97", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e5b0829bb06969b69a82527253a393e5c500c324/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5b0829bb06969b69a82527253a393e5c500c324/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=e5b0829bb06969b69a82527253a393e5c500c324", "patch": "@@ -341,12 +341,15 @@ impl<'a> Resolver<'a> {\n             };\n         }\n \n-        let binding = match binding {\n-            Some(binding) => MacroBinding::Legacy(binding),\n-            None => match self.builtin_macros.get(&name).cloned() {\n-                Some(binding) => MacroBinding::Modern(binding),\n-                None => return None,\n-            },\n+        let binding = if let Some(binding) = binding {\n+            MacroBinding::Legacy(binding)\n+        } else if let Some(binding) = self.builtin_macros.get(&name).cloned() {\n+            if !self.use_extern_macros {\n+                self.record_use(Ident::with_empty_ctxt(name), MacroNS, binding, DUMMY_SP);\n+            }\n+            MacroBinding::Modern(binding)\n+        } else {\n+            return None;\n         };\n \n         if !self.use_extern_macros {\n@@ -378,6 +381,7 @@ impl<'a> Resolver<'a> {\n             let (legacy_resolution, resolution) = match (legacy_resolution, resolution) {\n                 (Some(legacy_resolution), Ok(resolution)) => (legacy_resolution, resolution),\n                 (Some(MacroBinding::Modern(binding)), Err(_)) => {\n+                    self.record_use(ident, MacroNS, binding, span);\n                     self.err_if_macro_use_proc_macro(ident.name, span, binding);\n                     continue\n                 },"}, {"sha": "65cdeb9253d89ed4c1d2ab79d2d6cd75756be10e", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e5b0829bb06969b69a82527253a393e5c500c324/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5b0829bb06969b69a82527253a393e5c500c324/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=e5b0829bb06969b69a82527253a393e5c500c324", "patch": "@@ -49,6 +49,7 @@ pub enum ImportDirectiveSubclass<'a> {\n         // n.b. `max_vis` is only used in `finalize_import` to check for reexport errors.\n     },\n     ExternCrate,\n+    MacroUse,\n }\n \n /// One import directive.\n@@ -62,6 +63,7 @@ pub struct ImportDirective<'a> {\n     pub span: Span,\n     pub vis: Cell<ty::Visibility>,\n     pub expansion: Mark,\n+    pub used: Cell<bool>,\n }\n \n impl<'a> ImportDirective<'a> {\n@@ -257,6 +259,7 @@ impl<'a> Resolver<'a> {\n             id: id,\n             vis: Cell::new(vis),\n             expansion: expansion,\n+            used: Cell::new(false),\n         });\n \n         self.indeterminate_imports.push(directive);\n@@ -833,5 +836,6 @@ fn import_directive_subclass_to_string(subclass: &ImportDirectiveSubclass) -> St\n         SingleImport { source, .. } => source.to_string(),\n         GlobImport { .. } => \"*\".to_string(),\n         ExternCrate => \"<extern crate>\".to_string(),\n+        MacroUse => \"#[macro_use]\".to_string(),\n     }\n }"}, {"sha": "36d2ba4f3676b4b9c765efcf3956f9c988375a47", "filename": "src/librustc_trans/Cargo.toml", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e5b0829bb06969b69a82527253a393e5c500c324/src%2Flibrustc_trans%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e5b0829bb06969b69a82527253a393e5c500c324/src%2Flibrustc_trans%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2FCargo.toml?ref=e5b0829bb06969b69a82527253a393e5c500c324", "patch": "@@ -10,9 +10,7 @@ crate-type = [\"dylib\"]\n test = false\n \n [dependencies]\n-arena = { path = \"../libarena\" }\n flate = { path = \"../libflate\" }\n-graphviz = { path = \"../libgraphviz\" }\n log = { path = \"../liblog\" }\n rustc = { path = \"../librustc\" }\n rustc_back = { path = \"../librustc_back\" }\n@@ -25,6 +23,5 @@ rustc_incremental = { path = \"../librustc_incremental\" }\n rustc_llvm = { path = \"../librustc_llvm\" }\n rustc_i128 = { path = \"../librustc_i128\" }\n rustc_platform_intrinsics = { path = \"../librustc_platform_intrinsics\" }\n-serialize = { path = \"../libserialize\" }\n syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }"}, {"sha": "659dbb441ee35000095a2bd69d8290b081d038bf", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e5b0829bb06969b69a82527253a393e5c500c324/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5b0829bb06969b69a82527253a393e5c500c324/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=e5b0829bb06969b69a82527253a393e5c500c324", "patch": "@@ -40,18 +40,14 @@\n \n use rustc::dep_graph::WorkProduct;\n \n-extern crate arena;\n extern crate flate;\n-extern crate getopts;\n-extern crate graphviz;\n extern crate libc;\n #[macro_use] extern crate rustc;\n extern crate rustc_back;\n extern crate rustc_data_structures;\n extern crate rustc_incremental;\n pub extern crate rustc_llvm as llvm;\n extern crate rustc_platform_intrinsics as intrinsics;\n-extern crate serialize;\n extern crate rustc_const_math;\n extern crate rustc_const_eval;\n #[macro_use]"}, {"sha": "47403b459817b839cef1f6f74c288c1365e8e193", "filename": "src/libserialize/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e5b0829bb06969b69a82527253a393e5c500c324/src%2Flibserialize%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e5b0829bb06969b69a82527253a393e5c500c324/src%2Flibserialize%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2FCargo.toml?ref=e5b0829bb06969b69a82527253a393e5c500c324", "patch": "@@ -9,5 +9,4 @@ path = \"lib.rs\"\n crate-type = [\"dylib\", \"rlib\"]\n \n [dependencies]\n-log = { path = \"../liblog\" }\n rustc_i128 = { path = \"../librustc_i128\" }"}, {"sha": "2cfc3924c036eafae36940723b7f2d7a6892c153", "filename": "src/libserialize/lib.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e5b0829bb06969b69a82527253a393e5c500c324/src%2Flibserialize%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5b0829bb06969b69a82527253a393e5c500c324/src%2Flibserialize%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Flib.rs?ref=e5b0829bb06969b69a82527253a393e5c500c324", "patch": "@@ -31,17 +31,10 @@ Core encoding and decoding interfaces.\n #![feature(collections)]\n #![feature(core_intrinsics)]\n #![feature(enumset)]\n-#![feature(rustc_private)]\n #![feature(specialization)]\n #![feature(staged_api)]\n-#![feature(unicode)]\n #![cfg_attr(test, feature(test))]\n \n-// test harness access\n-#[cfg(test)] extern crate test;\n-#[macro_use] extern crate log;\n-\n-extern crate std_unicode;\n extern crate collections;\n \n extern crate rustc_i128;"}, {"sha": "f3c5a49bcf8b65d096b1af44cd04846d58db5a33", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e5b0829bb06969b69a82527253a393e5c500c324/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5b0829bb06969b69a82527253a393e5c500c324/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=e5b0829bb06969b69a82527253a393e5c500c324", "patch": "@@ -26,7 +26,6 @@\n \n #![feature(associated_consts)]\n #![feature(const_fn)]\n-#![feature(libc)]\n #![feature(optin_builtin_traits)]\n #![feature(rustc_private)]\n #![feature(staged_api)]\n@@ -35,10 +34,7 @@\n #![feature(rustc_diagnostic_macros)]\n #![feature(specialization)]\n \n-extern crate core;\n extern crate serialize;\n-extern crate term;\n-extern crate libc;\n #[macro_use] extern crate log;\n #[macro_use] #[no_link] extern crate rustc_bitflags;\n extern crate std_unicode;"}, {"sha": "365521970cd2126f366d3f4e392936bdd622b689", "filename": "src/test/compile-fail/imports/unused-macro-use.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e5b0829bb06969b69a82527253a393e5c500c324/src%2Ftest%2Fcompile-fail%2Fimports%2Funused-macro-use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5b0829bb06969b69a82527253a393e5c500c324/src%2Ftest%2Fcompile-fail%2Fimports%2Funused-macro-use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimports%2Funused-macro-use.rs?ref=e5b0829bb06969b69a82527253a393e5c500c324", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![deny(unused)]\n+\n+#[macro_use] //~ ERROR unused `#[macro_use]` import\n+extern crate core;\n+\n+#[macro_use(\n+    panic //~ ERROR unused `#[macro_use]` import\n+)]\n+extern crate core as core_2;\n+\n+fn main() {}"}, {"sha": "40671353f8ac6f9d98a4091c2119252f5b87153e", "filename": "src/test/compile-fail/lint-unused-extern-crate.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e5b0829bb06969b69a82527253a393e5c500c324/src%2Ftest%2Fcompile-fail%2Flint-unused-extern-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5b0829bb06969b69a82527253a393e5c500c324/src%2Ftest%2Fcompile-fail%2Flint-unused-extern-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unused-extern-crate.rs?ref=e5b0829bb06969b69a82527253a393e5c500c324", "patch": "@@ -26,13 +26,16 @@ extern crate rand; // no error, the use marks it as used\n \n extern crate lint_unused_extern_crate as other; // no error, the use * marks it as used\n \n-#[macro_use] extern crate core; // no error, the `#[macro_use]` marks it as used\n-\n #[allow(unused_imports)]\n use rand::isaac::IsaacRng;\n \n use other::*;\n \n+mod foo {\n+    // Test that this is unused even though an earler `extern crate rand` is used.\n+    extern crate rand; //~ ERROR unused extern crate\n+}\n+\n fn main() {\n     let x: collecs::vec::Vec<usize> = Vec::new();\n     let y = foo();"}, {"sha": "83fd766c547398a91214a5db57fe62d7b362ab10", "filename": "src/tools/cargotest/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5b0829bb06969b69a82527253a393e5c500c324/src%2Ftools%2Fcargotest%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5b0829bb06969b69a82527253a393e5c500c324/src%2Ftools%2Fcargotest%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcargotest%2Fmain.rs?ref=e5b0829bb06969b69a82527253a393e5c500c324", "patch": "@@ -25,7 +25,7 @@ const TEST_REPOS: &'static [Test] = &[\n     Test {\n         name: \"cargo\",\n         repo: \"https://github.com/rust-lang/cargo\",\n-        sha: \"b7be4f2ef2cf743492edc6dfb55d087ed88f2d76\",\n+        sha: \"2324c2bbaf7fc6ea9cbdd77c034ef1af769cb617\",\n         lock: None,\n     },\n     Test {"}]}