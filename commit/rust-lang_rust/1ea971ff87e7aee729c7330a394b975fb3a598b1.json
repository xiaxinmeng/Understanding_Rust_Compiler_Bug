{"sha": "1ea971ff87e7aee729c7330a394b975fb3a598b1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlYTk3MWZmODdlN2FlZTcyOWM3MzMwYTM5NGI5NzVmYjNhNTk4YjE=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2015-03-18T21:05:24Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2015-03-19T17:52:30Z"}, "message": "Add test case for stable import of invalid span information.", "tree": {"sha": "d961091051a758ea0c265dfb0785936fa22d1fe2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d961091051a758ea0c265dfb0785936fa22d1fe2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ea971ff87e7aee729c7330a394b975fb3a598b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ea971ff87e7aee729c7330a394b975fb3a598b1", "html_url": "https://github.com/rust-lang/rust/commit/1ea971ff87e7aee729c7330a394b975fb3a598b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ea971ff87e7aee729c7330a394b975fb3a598b1/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f77a47f6b906bc67d71534c0365c6f9efe9389d", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f77a47f6b906bc67d71534c0365c6f9efe9389d", "html_url": "https://github.com/rust-lang/rust/commit/5f77a47f6b906bc67d71534c0365c6f9efe9389d"}], "stats": {"total": 67, "additions": 67, "deletions": 0}, "files": [{"sha": "b37533d2da76337c6eb1bdccd2c47341aef82870", "filename": "src/test/auxiliary/crate_with_invalid_spans.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/1ea971ff87e7aee729c7330a394b975fb3a598b1/src%2Ftest%2Fauxiliary%2Fcrate_with_invalid_spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea971ff87e7aee729c7330a394b975fb3a598b1/src%2Ftest%2Fauxiliary%2Fcrate_with_invalid_spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcrate_with_invalid_spans.rs?ref=1ea971ff87e7aee729c7330a394b975fb3a598b1", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_type = \"rlib\"]\n+// no-prefer-dynamic\n+\n+// compile-flags: -g\n+\n+#[macro_use]\n+mod crate_with_invalid_spans_macros;\n+\n+pub fn exported_generic<T>(x: T, y: u32) -> (T, u32) {\n+    // Using the add1 macro will produce an invalid span, because the `y` passed\n+    // to the macro will have a span from this file, but the rest of the code\n+    // generated from the macro will have spans from the macro-defining file.\n+    // The AST node for the (1 + y) expression generated by the macro will then\n+    // take it's `lo` span bound from the `1` literal in the macro-defining file\n+    // and it's `hi` bound from `y` in this file, which should be lower than the\n+    // `lo` and even lower than the lower bound of the FileMap it is supposedly\n+    // contained in because the FileMap for this file was allocated earlier than\n+    // the FileMap of the macro-defining file.\n+    return (x, add1!(y));\n+}"}, {"sha": "112315af8448555ba326ad700118bb96abc57a21", "filename": "src/test/auxiliary/crate_with_invalid_spans_macros.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1ea971ff87e7aee729c7330a394b975fb3a598b1/src%2Ftest%2Fauxiliary%2Fcrate_with_invalid_spans_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea971ff87e7aee729c7330a394b975fb3a598b1/src%2Ftest%2Fauxiliary%2Fcrate_with_invalid_spans_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcrate_with_invalid_spans_macros.rs?ref=1ea971ff87e7aee729c7330a394b975fb3a598b1", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+macro_rules! add1 {\n+    ($e:expr) => ({\n+        let a = 1 + $e;\n+        let b = $e + 1;\n+        a + b - 1\n+    })\n+}"}, {"sha": "a949f25f41e095a5e83f86d27f3724b1c6ace29b", "filename": "src/test/run-pass/import-crate-with-invalid-spans.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1ea971ff87e7aee729c7330a394b975fb3a598b1/src%2Ftest%2Frun-pass%2Fimport-crate-with-invalid-spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea971ff87e7aee729c7330a394b975fb3a598b1/src%2Ftest%2Frun-pass%2Fimport-crate-with-invalid-spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport-crate-with-invalid-spans.rs?ref=1ea971ff87e7aee729c7330a394b975fb3a598b1", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:crate_with_invalid_spans.rs\n+\n+extern crate crate_with_invalid_spans;\n+\n+fn main() {\n+    // The AST of `exported_generic` stored in crate_with_invalid_spans's\n+    // metadata should contain an invalid span where span.lo > span.hi.\n+    // Let's make sure the compiler doesn't crash when encountering this.\n+    let _ = crate_with_invalid_spans::exported_generic(32u32, 7u32);\n+}"}]}