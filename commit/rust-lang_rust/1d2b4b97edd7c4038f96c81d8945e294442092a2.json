{"sha": "1d2b4b97edd7c4038f96c81d8945e294442092a2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkMmI0Yjk3ZWRkN2M0MDM4Zjk2YzgxZDg5NDVlMjk0NDQyMDkyYTI=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-02-23T13:59:27Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-02-23T16:00:19Z"}, "message": "Optimize str::replace", "tree": {"sha": "d052289fd18688f69777e7a8e829baef279e5a31", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d052289fd18688f69777e7a8e829baef279e5a31"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d2b4b97edd7c4038f96c81d8945e294442092a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d2b4b97edd7c4038f96c81d8945e294442092a2", "html_url": "https://github.com/rust-lang/rust/commit/1d2b4b97edd7c4038f96c81d8945e294442092a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d2b4b97edd7c4038f96c81d8945e294442092a2/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d802c1fbd2b3a9d1b16977379b93c5f3095d6f38", "url": "https://api.github.com/repos/rust-lang/rust/commits/d802c1fbd2b3a9d1b16977379b93c5f3095d6f38", "html_url": "https://github.com/rust-lang/rust/commit/d802c1fbd2b3a9d1b16977379b93c5f3095d6f38"}], "stats": {"total": 89, "additions": 49, "deletions": 40}, "files": [{"sha": "2b8a8956c8304b54b044111106eb2ae38e9b06a2", "filename": "src/libcore/str.rs", "status": "modified", "additions": 49, "deletions": 40, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/1d2b4b97edd7c4038f96c81d8945e294442092a2/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d2b4b97edd7c4038f96c81d8945e294442092a2/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=1d2b4b97edd7c4038f96c81d8945e294442092a2", "patch": "@@ -37,7 +37,7 @@ export\n    slice,\n    split, splitn, split_nonempty,\n    split_char, splitn_char, split_char_nonempty,\n-   split_str,\n+   split_str, split_str_nonempty,\n    lines,\n    lines_any,\n    words,\n@@ -494,31 +494,20 @@ fn split_inner(s: str, sepfn: fn(cc: char) -> bool, count: uint,\n     result\n }\n \n-/*\n-Function: split_str\n-\n-Splits a string into a vector of the substrings separated by a given string\n-\n-Note that this has recently been changed.  For example:\n->  assert [\"\", \"XXX\", \"YYY\", \"\"] == split_str(\".XXX.YYY.\", \".\")\n-\n-FIXME: Boyer-Moore should be faster\n-*/\n-fn split_str(s: str, sep: str) -> [str] unsafe {\n+// FIXME use Boyer-Moore\n+fn iter_matches(s: str, sep: str, f: fn(uint, uint)) {\n     let sep_len = len(sep), l = len(s);\n     assert sep_len > 0u;\n-    let result = [], i = 0u, start = 0u;\n-    let match_start = 0u, match_i = 0u;\n+    let i = 0u, match_start = 0u, match_i = 0u;\n \n     while i < l {\n         if s[i] == sep[match_i] {\n             if match_i == 0u { match_start = i; }\n             match_i += 1u;\n             // Found a match\n             if match_i == sep_len {\n-                result += [unsafe::slice_bytes(s, start, match_start)];\n+                f(match_start, i + 1u);\n                 match_i = 0u;\n-                start = i + 1u;\n             }\n             i += 1u;\n         } else {\n@@ -531,7 +520,40 @@ fn split_str(s: str, sep: str) -> [str] unsafe {\n             }\n         }\n     }\n-    result += [unsafe::slice_bytes(s, start, l)];\n+}\n+\n+fn iter_between_matches(s: str, sep: str, f: fn(uint, uint)) {\n+    let last_end = 0u;\n+    iter_matches(s, sep) {|from, to|\n+        f(last_end, from);\n+        last_end = to;\n+    }\n+    f(last_end, len(s));\n+}\n+\n+/*\n+Function: split_str\n+\n+Splits a string into a vector of the substrings separated by a given string\n+\n+Note that this has recently been changed.  For example:\n+>  assert [\"\", \"XXX\", \"YYY\", \"\"] == split_str(\".XXX.YYY.\", \".\")\n+*/\n+fn split_str(s: str, sep: str) -> [str] {\n+    let result = [];\n+    iter_between_matches(s, sep) {|from, to|\n+        unsafe { result += [unsafe::slice_bytes(s, from, to)]; }\n+    }\n+    result\n+}\n+\n+fn split_str_nonempty(s: str, sep: str) -> [str] {\n+    let result = [];\n+    iter_between_matches(s, sep) {|from, to|\n+        if to > from {\n+            unsafe { result += [unsafe::slice_bytes(s, from, to)]; }\n+        }\n+    }\n     result\n }\n \n@@ -587,7 +609,6 @@ fn to_upper(s: str) -> str {\n     map(s, char::to_upper)\n }\n \n-// FIXME: This is super-inefficient: stop the extra slicing copies\n /*\n Function: replace\n \n@@ -604,24 +625,12 @@ Returns:\n The original string with all occurances of `from` replaced with `to`\n */\n fn replace(s: str, from: str, to: str) -> str unsafe {\n-    assert is_not_empty(from);\n-    if len(s) == 0u {\n-        ret \"\";\n-    } else if starts_with(s, from) {\n-        ret to + replace(\n-                     unsafe::slice_bytes(s, len(from), len(s)),\n-                                       from, to);\n-    } else {\n-        let idx;\n-        alt find(s, from) {\n-            some(x) { idx = x; }\n-            none { ret s; }\n-        }\n-        let before = unsafe::slice_bytes(s, 0u, idx as uint);\n-        let after  = unsafe::slice_bytes(s, idx as uint + len(from),\n-                                         len(s));\n-        ret before + to + replace(after, from, to);\n+    let result = \"\", first = true;\n+    iter_between_matches(s, from) {|start, end|\n+        if first { first = false; } else { result += to; }\n+        unsafe { result += unsafe::slice_bytes(s, start, end); }\n     }\n+    result\n }\n \n /*\n@@ -1911,12 +1920,12 @@ mod tests {\n     #[test]\n     fn test_replace() {\n         let a = \"a\";\n-        assert (replace(\"\", a, \"b\") == \"\");\n-        assert (replace(\"a\", a, \"b\") == \"b\");\n-        assert (replace(\"ab\", a, \"b\") == \"bb\");\n+        assert replace(\"\", a, \"b\") == \"\";\n+        assert replace(\"a\", a, \"b\") == \"b\";\n+        assert replace(\"ab\", a, \"b\") == \"bb\";\n         let test = \"test\";\n-        assert (replace(\" test test \", test, \"toast\") == \" toast toast \");\n-        assert (replace(\" test test \", test, \"\") == \"   \");\n+        assert replace(\" test test \", test, \"toast\") == \" toast toast \";\n+        assert replace(\" test test \", test, \"\") == \"   \";\n     }\n \n     #[test]"}]}