{"sha": "448d07683a6defd567996114793a09c9a8aef5df", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0OGQwNzY4M2E2ZGVmZDU2Nzk5NjExNDc5M2EwOWM5YThhZWY1ZGY=", "commit": {"author": {"name": "Wesley Norris", "email": "repnop@outlook.com", "date": "2021-01-21T02:49:04Z"}, "committer": {"name": "Wesley Norris", "email": "repnop@outlook.com", "date": "2021-04-05T21:36:51Z"}, "message": "Allow specifying alignment for functions", "tree": {"sha": "31166353d2a3494c2e009ab8f692b5a8bb99d982", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31166353d2a3494c2e009ab8f692b5a8bb99d982"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/448d07683a6defd567996114793a09c9a8aef5df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/448d07683a6defd567996114793a09c9a8aef5df", "html_url": "https://github.com/rust-lang/rust/commit/448d07683a6defd567996114793a09c9a8aef5df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/448d07683a6defd567996114793a09c9a8aef5df/comments", "author": {"login": "repnop", "id": 24203105, "node_id": "MDQ6VXNlcjI0MjAzMTA1", "avatar_url": "https://avatars.githubusercontent.com/u/24203105?v=4", "gravatar_id": "", "url": "https://api.github.com/users/repnop", "html_url": "https://github.com/repnop", "followers_url": "https://api.github.com/users/repnop/followers", "following_url": "https://api.github.com/users/repnop/following{/other_user}", "gists_url": "https://api.github.com/users/repnop/gists{/gist_id}", "starred_url": "https://api.github.com/users/repnop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/repnop/subscriptions", "organizations_url": "https://api.github.com/users/repnop/orgs", "repos_url": "https://api.github.com/users/repnop/repos", "events_url": "https://api.github.com/users/repnop/events{/privacy}", "received_events_url": "https://api.github.com/users/repnop/received_events", "type": "User", "site_admin": false}, "committer": {"login": "repnop", "id": 24203105, "node_id": "MDQ6VXNlcjI0MjAzMTA1", "avatar_url": "https://avatars.githubusercontent.com/u/24203105?v=4", "gravatar_id": "", "url": "https://api.github.com/users/repnop", "html_url": "https://github.com/repnop", "followers_url": "https://api.github.com/users/repnop/followers", "following_url": "https://api.github.com/users/repnop/following{/other_user}", "gists_url": "https://api.github.com/users/repnop/gists{/gist_id}", "starred_url": "https://api.github.com/users/repnop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/repnop/subscriptions", "organizations_url": "https://api.github.com/users/repnop/orgs", "repos_url": "https://api.github.com/users/repnop/repos", "events_url": "https://api.github.com/users/repnop/events{/privacy}", "received_events_url": "https://api.github.com/users/repnop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "138fd56cf9598b4bf016634c768dca128a83a5d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/138fd56cf9598b4bf016634c768dca128a83a5d7", "html_url": "https://github.com/rust-lang/rust/commit/138fd56cf9598b4bf016634c768dca128a83a5d7"}], "stats": {"total": 220, "additions": 137, "deletions": 83}, "files": [{"sha": "20971ebb95748888568d994fbf31286e33ea2282", "filename": "compiler/rustc_attr/src/builtin.rs", "status": "modified", "additions": 14, "deletions": 36, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/448d07683a6defd567996114793a09c9a8aef5df/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/448d07683a6defd567996114793a09c9a8aef5df/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs?ref=448d07683a6defd567996114793a09c9a8aef5df", "patch": "@@ -862,18 +862,6 @@ pub fn find_repr_attrs(sess: &Session, attr: &Attribute) -> Vec<ReprAttr> {\n         if let Some(items) = attr.meta_item_list() {\n             sess.mark_attr_used(attr);\n             for item in items {\n-                if !item.is_meta_item() {\n-                    handle_errors(\n-                        &sess.parse_sess,\n-                        item.span(),\n-                        AttrError::UnsupportedLiteral(\n-                            \"meta item in `repr` must be an identifier\",\n-                            false,\n-                        ),\n-                    );\n-                    continue;\n-                }\n-\n                 let mut recognised = false;\n                 if item.is_word() {\n                     let hint = match item.name_or_empty() {\n@@ -890,23 +878,6 @@ pub fn find_repr_attrs(sess: &Session, attr: &Attribute) -> Vec<ReprAttr> {\n                         acc.push(h);\n                     }\n                 } else if let Some((name, value)) = item.name_value_literal() {\n-                    let parse_alignment = |node: &ast::LitKind| -> Result<u32, &'static str> {\n-                        if let ast::LitKind::Int(literal, ast::LitIntType::Unsuffixed) = node {\n-                            if literal.is_power_of_two() {\n-                                // rustc_middle::ty::layout::Align restricts align to <= 2^29\n-                                if *literal <= 1 << 29 {\n-                                    Ok(*literal as u32)\n-                                } else {\n-                                    Err(\"larger than 2^29\")\n-                                }\n-                            } else {\n-                                Err(\"not a power of two\")\n-                            }\n-                        } else {\n-                            Err(\"not an unsuffixed integer\")\n-                        }\n-                    };\n-\n                     let mut literal_error = None;\n                     if name == sym::align {\n                         recognised = true;\n@@ -966,13 +937,7 @@ pub fn find_repr_attrs(sess: &Session, attr: &Attribute) -> Vec<ReprAttr> {\n                 }\n                 if !recognised {\n                     // Not a word we recognize\n-                    struct_span_err!(\n-                        diagnostic,\n-                        item.span(),\n-                        E0552,\n-                        \"unrecognized representation hint\"\n-                    )\n-                    .emit();\n+                    diagnostic.delay_span_bug(item.span(), \"unrecognized representation hint\");\n                 }\n             }\n         }\n@@ -1080,3 +1045,16 @@ fn allow_unstable<'a>(\n         name\n     })\n }\n+\n+pub fn parse_alignment(node: &ast::LitKind) -> Result<u32, &'static str> {\n+    if let ast::LitKind::Int(literal, ast::LitIntType::Unsuffixed) = node {\n+        if literal.is_power_of_two() {\n+            // rustc_middle::ty::layout::Align restricts align to <= 2^29\n+            if *literal <= 1 << 29 { Ok(*literal as u32) } else { Err(\"larger than 2^29\") }\n+        } else {\n+            Err(\"not a power of two\")\n+        }\n+    } else {\n+        Err(\"not an unsuffixed integer\")\n+    }\n+}"}, {"sha": "e50a9d16ca4bfadbe261e78add94ab5393f69150", "filename": "compiler/rustc_codegen_llvm/src/attributes.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/448d07683a6defd567996114793a09c9a8aef5df/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/448d07683a6defd567996114793a09c9a8aef5df/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs?ref=448d07683a6defd567996114793a09c9a8aef5df", "patch": "@@ -279,6 +279,9 @@ pub fn from_fn_attrs(cx: &CodegenCx<'ll, 'tcx>, llfn: &'ll Value, instance: ty::\n     if codegen_fn_attrs.flags.contains(CodegenFnAttrFlags::CMSE_NONSECURE_ENTRY) {\n         llvm::AddFunctionAttrString(llfn, Function, cstr!(\"cmse_nonsecure_entry\"));\n     }\n+    if let Some(align) = codegen_fn_attrs.alignment {\n+        llvm::set_alignment(llfn, align as usize);\n+    }\n     sanitize(cx, codegen_fn_attrs.no_sanitize, llfn);\n \n     // Always annotate functions with the target-cpu they are compiled for."}, {"sha": "b2d891b967495fc67a92c1f8b1c8e55b0aea85b2", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/448d07683a6defd567996114793a09c9a8aef5df/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/448d07683a6defd567996114793a09c9a8aef5df/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=448d07683a6defd567996114793a09c9a8aef5df", "patch": "@@ -645,6 +645,9 @@ declare_features! (\n     /// Allows `extern \"C-unwind\" fn` to enable unwinding across ABI boundaries.\n     (active, c_unwind, \"1.52.0\", Some(74990), None),\n \n+    /// Allows using `#[repr(align(...))]` on function items\n+    (active, fn_align, \"1.53.0\", Some(82232), None),\n+\n     // -------------------------------------------------------------------------\n     // feature-group-end: actual feature gates\n     // -------------------------------------------------------------------------"}, {"sha": "8f83589753d3239467aa6018650697ff50a4eff9", "filename": "compiler/rustc_middle/src/middle/codegen_fn_attrs.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/448d07683a6defd567996114793a09c9a8aef5df/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcodegen_fn_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/448d07683a6defd567996114793a09c9a8aef5df/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcodegen_fn_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcodegen_fn_attrs.rs?ref=448d07683a6defd567996114793a09c9a8aef5df", "patch": "@@ -38,6 +38,9 @@ pub struct CodegenFnAttrs {\n     /// be generated against a specific instruction set. Only usable on architectures which allow\n     /// switching between multiple instruction sets.\n     pub instruction_set: Option<InstructionSetAttr>,\n+    /// The `#[repr(align(...))]` attribute. Indicates the value of which the function should be\n+    /// aligned to.\n+    pub alignment: Option<u32>,\n }\n \n bitflags! {\n@@ -103,6 +106,7 @@ impl CodegenFnAttrs {\n             link_section: None,\n             no_sanitize: SanitizerSet::empty(),\n             instruction_set: None,\n+            alignment: None,\n         }\n     }\n "}, {"sha": "df292b141760dc3d76693e5f8deb7bfe956e5a15", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 40, "deletions": 6, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/448d07683a6defd567996114793a09c9a8aef5df/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/448d07683a6defd567996114793a09c9a8aef5df/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=448d07683a6defd567996114793a09c9a8aef5df", "patch": "@@ -1127,17 +1127,41 @@ impl CheckAttrVisitor<'tcx> {\n         let mut is_transparent = false;\n \n         for hint in &hints {\n+            if !hint.is_meta_item() {\n+                struct_span_err!(\n+                    self.tcx.sess,\n+                    hint.span(),\n+                    E0565,\n+                    \"meta item in `repr` must be an identifier\"\n+                )\n+                .emit();\n+                continue;\n+            }\n+\n             let (article, allowed_targets) = match hint.name_or_empty() {\n-                _ if !matches!(target, Target::Struct | Target::Enum | Target::Union) => {\n-                    (\"a\", \"struct, enum, or union\")\n-                }\n-                name @ sym::C | name @ sym::align => {\n-                    is_c |= name == sym::C;\n+                sym::C => {\n+                    is_c = true;\n                     match target {\n                         Target::Struct | Target::Union | Target::Enum => continue,\n                         _ => (\"a\", \"struct, enum, or union\"),\n                     }\n                 }\n+                sym::align => {\n+                    if let (Target::Fn, true) = (target, !self.tcx.features().fn_align) {\n+                        feature_err(\n+                            &self.tcx.sess.parse_sess,\n+                            sym::fn_align,\n+                            hint.span(),\n+                            \"`repr(align)` attributes on functions are unstable\",\n+                        )\n+                        .emit();\n+                    }\n+\n+                    match target {\n+                        Target::Struct | Target::Union | Target::Enum | Target::Fn => continue,\n+                        _ => (\"a\", \"struct, enum, function, or union\"),\n+                    }\n+                }\n                 sym::packed => {\n                     if target != Target::Struct && target != Target::Union {\n                         (\"a\", \"struct or union\")\n@@ -1194,7 +1218,17 @@ impl CheckAttrVisitor<'tcx> {\n                         continue;\n                     }\n                 }\n-                _ => continue,\n+                _ => {\n+                    struct_span_err!(\n+                        self.tcx.sess,\n+                        hint.span(),\n+                        E0552,\n+                        \"unrecognized representation hint\"\n+                    )\n+                    .emit();\n+\n+                    continue;\n+                }\n             };\n \n             struct_span_err!("}, {"sha": "03fe5bcd2971b876407c95ff8853a1f0054b8a60", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/448d07683a6defd567996114793a09c9a8aef5df/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/448d07683a6defd567996114793a09c9a8aef5df/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=448d07683a6defd567996114793a09c9a8aef5df", "patch": "@@ -561,6 +561,7 @@ symbols! {\n         fmt,\n         fmt_internals,\n         fmul_fast,\n+        fn_align,\n         fn_must_use,\n         fn_mut,\n         fn_once,"}, {"sha": "067b0e8cff814270b98b3d0103b2ee412ccbd202", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/448d07683a6defd567996114793a09c9a8aef5df/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/448d07683a6defd567996114793a09c9a8aef5df/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=448d07683a6defd567996114793a09c9a8aef5df", "patch": "@@ -15,6 +15,8 @@\n //! At present, however, we do run collection across all items in the\n //! crate as a kind of pass. This should eventually be factored away.\n \n+// ignore-tidy-filelength\n+\n use crate::astconv::{AstConv, SizedByDefault};\n use crate::bounds::Bounds;\n use crate::check::intrinsic::intrinsic_operation_unsafety;\n@@ -2884,6 +2886,36 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n                     None\n                 }\n             };\n+        } else if tcx.sess.check_name(attr, sym::repr) {\n+            codegen_fn_attrs.alignment = match attr.meta_item_list() {\n+                Some(items) => match items.as_slice() {\n+                    [item] => match item.name_value_literal() {\n+                        Some((sym::align, literal)) => {\n+                            let alignment = rustc_attr::parse_alignment(&literal.kind);\n+\n+                            match alignment {\n+                                Ok(align) => Some(align),\n+                                Err(msg) => {\n+                                    struct_span_err!(\n+                                        tcx.sess.diagnostic(),\n+                                        attr.span,\n+                                        E0589,\n+                                        \"invalid `repr(align)` attribute: {}\",\n+                                        msg\n+                                    )\n+                                    .emit();\n+\n+                                    None\n+                                }\n+                            }\n+                        }\n+                        _ => None,\n+                    },\n+                    [] => None,\n+                    _ => None,\n+                },\n+                None => None,\n+            };\n         }\n     }\n "}, {"sha": "c5886cf28081a3b6186c5bb01ca454276a53f803", "filename": "src/test/codegen/align-fn.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/448d07683a6defd567996114793a09c9a8aef5df/src%2Ftest%2Fcodegen%2Falign-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/448d07683a6defd567996114793a09c9a8aef5df/src%2Ftest%2Fcodegen%2Falign-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Falign-fn.rs?ref=448d07683a6defd567996114793a09c9a8aef5df", "patch": "@@ -0,0 +1,9 @@\n+// compile-flags: -C no-prepopulate-passes -Z mir-opt-level=0\n+\n+#![crate_type = \"lib\"]\n+#![feature(fn_align)]\n+\n+// CHECK: align 16\n+#[no_mangle]\n+#[repr(align(16))]\n+pub fn fn_align() {}"}, {"sha": "d663431d6836fe1abca2206bc4633be09688264b", "filename": "src/test/ui/attributes/nonterminal-expansion.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/448d07683a6defd567996114793a09c9a8aef5df/src%2Ftest%2Fui%2Fattributes%2Fnonterminal-expansion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/448d07683a6defd567996114793a09c9a8aef5df/src%2Ftest%2Fui%2Fattributes%2Fnonterminal-expansion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fnonterminal-expansion.rs?ref=448d07683a6defd567996114793a09c9a8aef5df", "patch": "@@ -3,7 +3,6 @@\n macro_rules! pass_nonterminal {\n     ($n:expr) => {\n         #[repr(align($n))] //~ ERROR expected unsuffixed literal or identifier, found `n!()`\n-                           //~| ERROR unrecognized representation hint\n         struct S;\n     };\n }"}, {"sha": "75663a666a56de765f5ba2ef5c159d476f767be3", "filename": "src/test/ui/attributes/nonterminal-expansion.stderr", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/448d07683a6defd567996114793a09c9a8aef5df/src%2Ftest%2Fui%2Fattributes%2Fnonterminal-expansion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/448d07683a6defd567996114793a09c9a8aef5df/src%2Ftest%2Fui%2Fattributes%2Fnonterminal-expansion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fnonterminal-expansion.stderr?ref=448d07683a6defd567996114793a09c9a8aef5df", "patch": "@@ -9,17 +9,5 @@ LL | pass_nonterminal!(n!());\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error[E0552]: unrecognized representation hint\n-  --> $DIR/nonterminal-expansion.rs:5:16\n-   |\n-LL |         #[repr(align($n))]\n-   |                ^^^^^^^^^\n-...\n-LL | pass_nonterminal!(n!());\n-   | ------------------------ in this macro invocation\n-   |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0552`."}, {"sha": "df76f6b13af9b4f8a147ee7f2e927cb9cd371afe", "filename": "src/test/ui/error-codes/E0565.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/448d07683a6defd567996114793a09c9a8aef5df/src%2Ftest%2Fui%2Ferror-codes%2FE0565.rs", "raw_url": "https://github.com/rust-lang/rust/raw/448d07683a6defd567996114793a09c9a8aef5df/src%2Ftest%2Fui%2Ferror-codes%2FE0565.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0565.rs?ref=448d07683a6defd567996114793a09c9a8aef5df", "patch": "@@ -1,6 +1,5 @@\n // repr currently doesn't support literals\n #[repr(\"C\")] //~ ERROR E0565\n-             //~| ERROR E0565\n-struct A {  }\n+struct A {}\n \n-fn main() {  }\n+fn main() {}"}, {"sha": "6ed90c0ae4ffe10e97ed190a0cea077e17ed65e3", "filename": "src/test/ui/error-codes/E0565.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/448d07683a6defd567996114793a09c9a8aef5df/src%2Ftest%2Fui%2Ferror-codes%2FE0565.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/448d07683a6defd567996114793a09c9a8aef5df/src%2Ftest%2Fui%2Ferror-codes%2FE0565.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0565.stderr?ref=448d07683a6defd567996114793a09c9a8aef5df", "patch": "@@ -4,12 +4,6 @@ error[E0565]: meta item in `repr` must be an identifier\n LL | #[repr(\"C\")]\n    |        ^^^\n \n-error[E0565]: meta item in `repr` must be an identifier\n-  --> $DIR/E0565.rs:2:8\n-   |\n-LL | #[repr(\"C\")]\n-   |        ^^^\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0565`."}, {"sha": "ea873dba269c4ee57fb9e82420b310c10629e38d", "filename": "src/test/ui/feature-gates/feature-gate-fn_align.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/448d07683a6defd567996114793a09c9a8aef5df/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-fn_align.rs", "raw_url": "https://github.com/rust-lang/rust/raw/448d07683a6defd567996114793a09c9a8aef5df/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-fn_align.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-fn_align.rs?ref=448d07683a6defd567996114793a09c9a8aef5df", "patch": "@@ -0,0 +1,4 @@\n+#![crate_type = \"lib\"]\n+\n+#[repr(align(16))] //~ ERROR `repr(align)` attributes on functions are unstable\n+fn requires_alignment() {}"}, {"sha": "5ff124e48dca9c952e941569ee4fd4bc210070b1", "filename": "src/test/ui/feature-gates/feature-gate-fn_align.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/448d07683a6defd567996114793a09c9a8aef5df/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-fn_align.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/448d07683a6defd567996114793a09c9a8aef5df/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-fn_align.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-fn_align.stderr?ref=448d07683a6defd567996114793a09c9a8aef5df", "patch": "@@ -0,0 +1,12 @@\n+error[E0658]: `repr(align)` attributes on functions are unstable\n+  --> $DIR/feature-gate-fn_align.rs:3:8\n+   |\n+LL | #[repr(align(16))]\n+   |        ^^^^^^^^^\n+   |\n+   = note: see issue #82232 <https://github.com/rust-lang/rust/issues/82232> for more information\n+   = help: add `#![feature(fn_align)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "b114e8e03333d99ca90680b50633d0439c792e50", "filename": "src/test/ui/issues/issue-43988.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/448d07683a6defd567996114793a09c9a8aef5df/src%2Ftest%2Fui%2Fissues%2Fissue-43988.rs", "raw_url": "https://github.com/rust-lang/rust/raw/448d07683a6defd567996114793a09c9a8aef5df/src%2Ftest%2Fui%2Fissues%2Fissue-43988.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43988.rs?ref=448d07683a6defd567996114793a09c9a8aef5df", "patch": "@@ -13,13 +13,13 @@ fn main() {\n \n     #[repr(nothing)]\n     let _x = 0;\n-    //~^^ ERROR attribute should be applied to a struct, enum, or union\n+    //~^^ ERROR E0552\n \n     #[repr(something_not_real)]\n     loop {\n         ()\n     };\n-    //~^^^^ ERROR attribute should be applied to a struct, enum, or union\n+    //~^^^^ ERROR E0552\n \n     #[repr]\n     let _y = \"123\";"}, {"sha": "03aa37f52075f73b9a70fb8401136f06273e4363", "filename": "src/test/ui/issues/issue-43988.stderr", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/448d07683a6defd567996114793a09c9a8aef5df/src%2Ftest%2Fui%2Fissues%2Fissue-43988.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/448d07683a6defd567996114793a09c9a8aef5df/src%2Ftest%2Fui%2Fissues%2Fissue-43988.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43988.stderr?ref=448d07683a6defd567996114793a09c9a8aef5df", "patch": "@@ -26,23 +26,17 @@ LL |     #[inline(XYZ)]\n LL |     let _b = 4;\n    |     ----------- not a function or closure\n \n-error[E0517]: attribute should be applied to a struct, enum, or union\n+error[E0552]: unrecognized representation hint\n   --> $DIR/issue-43988.rs:14:12\n    |\n LL |     #[repr(nothing)]\n    |            ^^^^^^^\n-LL |     let _x = 0;\n-   |     ----------- not a struct, enum, or union\n \n-error[E0517]: attribute should be applied to a struct, enum, or union\n+error[E0552]: unrecognized representation hint\n   --> $DIR/issue-43988.rs:18:12\n    |\n-LL |       #[repr(something_not_real)]\n-   |              ^^^^^^^^^^^^^^^^^^\n-LL | /     loop {\n-LL | |         ()\n-LL | |     };\n-   | |_____- not a struct, enum, or union\n+LL |     #[repr(something_not_real)]\n+   |            ^^^^^^^^^^^^^^^^^^\n \n error[E0518]: attribute should be applied to function or closure\n   --> $DIR/issue-43988.rs:30:5\n@@ -54,5 +48,5 @@ LL |     foo();\n \n error: aborting due to 7 previous errors\n \n-Some errors have detailed explanations: E0517, E0518.\n-For more information about an error, try `rustc --explain E0517`.\n+Some errors have detailed explanations: E0518, E0552.\n+For more information about an error, try `rustc --explain E0518`."}, {"sha": "d9bd0b0e38a692bbe527612187c8a53c8cf7b311", "filename": "src/test/ui/repr/repr-disallow-on-variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/448d07683a6defd567996114793a09c9a8aef5df/src%2Ftest%2Fui%2Frepr%2Frepr-disallow-on-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/448d07683a6defd567996114793a09c9a8aef5df/src%2Ftest%2Fui%2Frepr%2Frepr-disallow-on-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepr%2Frepr-disallow-on-variant.rs?ref=448d07683a6defd567996114793a09c9a8aef5df", "patch": "@@ -2,7 +2,7 @@ struct Test;\n \n enum Foo {\n     #[repr(u8)]\n-    //~^ ERROR attribute should be applied to a struct, enum, or union\n+    //~^ ERROR attribute should be applied to an enum\n     Variant,\n }\n "}, {"sha": "f7e4dcc9d81be39db1bb52a2ffc97809ac67267a", "filename": "src/test/ui/repr/repr-disallow-on-variant.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/448d07683a6defd567996114793a09c9a8aef5df/src%2Ftest%2Fui%2Frepr%2Frepr-disallow-on-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/448d07683a6defd567996114793a09c9a8aef5df/src%2Ftest%2Fui%2Frepr%2Frepr-disallow-on-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepr%2Frepr-disallow-on-variant.stderr?ref=448d07683a6defd567996114793a09c9a8aef5df", "patch": "@@ -1,11 +1,11 @@\n-error[E0517]: attribute should be applied to a struct, enum, or union\n+error[E0517]: attribute should be applied to an enum\n   --> $DIR/repr-disallow-on-variant.rs:4:12\n    |\n LL |     #[repr(u8)]\n    |            ^^\n LL |\n LL |     Variant,\n-   |     ------- not a struct, enum, or union\n+   |     ------- not an enum\n \n error: aborting due to previous error\n "}]}