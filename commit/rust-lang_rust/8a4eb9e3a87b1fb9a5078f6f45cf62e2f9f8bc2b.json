{"sha": "8a4eb9e3a87b1fb9a5078f6f45cf62e2f9f8bc2b", "node_id": "C_kwDOAAsO6NoAKDhhNGViOWUzYTg3YjFmYjlhNTA3OGY2ZjQ1Y2Y2MmUyZjlmOGJjMmI", "commit": {"author": {"name": "Martin Gammels\u00e6ter", "email": "martin@mg.am", "date": "2023-03-15T16:23:48Z"}, "committer": {"name": "Martin Gammels\u00e6ter", "email": "martin@mg.am", "date": "2023-03-15T16:27:23Z"}, "message": "Skip serializing ascii chars in case LUTs\n\nSince ascii chars are already handled by a special case in the\n`to_lower` and `to_upper` functions, there's no need to waste space on\nthem in the LUTs.", "tree": {"sha": "902a80b786e1a68027ff10d9a6f4e1d1e9d75eb5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/902a80b786e1a68027ff10d9a6f4e1d1e9d75eb5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a4eb9e3a87b1fb9a5078f6f45cf62e2f9f8bc2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a4eb9e3a87b1fb9a5078f6f45cf62e2f9f8bc2b", "html_url": "https://github.com/rust-lang/rust/commit/8a4eb9e3a87b1fb9a5078f6f45cf62e2f9f8bc2b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a4eb9e3a87b1fb9a5078f6f45cf62e2f9f8bc2b/comments", "author": {"login": "martingms", "id": 458783, "node_id": "MDQ6VXNlcjQ1ODc4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/458783?v=4", "gravatar_id": "", "url": "https://api.github.com/users/martingms", "html_url": "https://github.com/martingms", "followers_url": "https://api.github.com/users/martingms/followers", "following_url": "https://api.github.com/users/martingms/following{/other_user}", "gists_url": "https://api.github.com/users/martingms/gists{/gist_id}", "starred_url": "https://api.github.com/users/martingms/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/martingms/subscriptions", "organizations_url": "https://api.github.com/users/martingms/orgs", "repos_url": "https://api.github.com/users/martingms/repos", "events_url": "https://api.github.com/users/martingms/events{/privacy}", "received_events_url": "https://api.github.com/users/martingms/received_events", "type": "User", "site_admin": false}, "committer": {"login": "martingms", "id": 458783, "node_id": "MDQ6VXNlcjQ1ODc4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/458783?v=4", "gravatar_id": "", "url": "https://api.github.com/users/martingms", "html_url": "https://github.com/martingms", "followers_url": "https://api.github.com/users/martingms/followers", "following_url": "https://api.github.com/users/martingms/following{/other_user}", "gists_url": "https://api.github.com/users/martingms/gists{/gist_id}", "starred_url": "https://api.github.com/users/martingms/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/martingms/subscriptions", "organizations_url": "https://api.github.com/users/martingms/orgs", "repos_url": "https://api.github.com/users/martingms/repos", "events_url": "https://api.github.com/users/martingms/events{/privacy}", "received_events_url": "https://api.github.com/users/martingms/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "992d154f3a84cc8abcefcf6e6cf3698e4821b506", "url": "https://api.github.com/repos/rust-lang/rust/commits/992d154f3a84cc8abcefcf6e6cf3698e4821b506", "html_url": "https://github.com/rust-lang/rust/commit/992d154f3a84cc8abcefcf6e6cf3698e4821b506"}], "stats": {"total": 51, "additions": 11, "deletions": 40}, "files": [{"sha": "aac706f31736ee85562b201dbccd07bd3dfcb142", "filename": "library/core/src/unicode/unicode_data.rs", "status": "modified", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/8a4eb9e3a87b1fb9a5078f6f45cf62e2f9f8bc2b/library%2Fcore%2Fsrc%2Funicode%2Funicode_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a4eb9e3a87b1fb9a5078f6f45cf62e2f9f8bc2b/library%2Fcore%2Fsrc%2Funicode%2Funicode_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Funicode%2Funicode_data.rs?ref=8a4eb9e3a87b1fb9a5078f6f45cf62e2f9f8bc2b", "patch": "@@ -606,19 +606,6 @@ pub mod conversions {\n         table.binary_search_by(|&(key, _)| key.cmp(&c)).ok()\n     }\n     static LOWERCASE_TABLE: &[(char, [char; 3])] = &[\n-        ('A', ['a', '\\u{0}', '\\u{0}']), ('B', ['b', '\\u{0}', '\\u{0}']),\n-        ('C', ['c', '\\u{0}', '\\u{0}']), ('D', ['d', '\\u{0}', '\\u{0}']),\n-        ('E', ['e', '\\u{0}', '\\u{0}']), ('F', ['f', '\\u{0}', '\\u{0}']),\n-        ('G', ['g', '\\u{0}', '\\u{0}']), ('H', ['h', '\\u{0}', '\\u{0}']),\n-        ('I', ['i', '\\u{0}', '\\u{0}']), ('J', ['j', '\\u{0}', '\\u{0}']),\n-        ('K', ['k', '\\u{0}', '\\u{0}']), ('L', ['l', '\\u{0}', '\\u{0}']),\n-        ('M', ['m', '\\u{0}', '\\u{0}']), ('N', ['n', '\\u{0}', '\\u{0}']),\n-        ('O', ['o', '\\u{0}', '\\u{0}']), ('P', ['p', '\\u{0}', '\\u{0}']),\n-        ('Q', ['q', '\\u{0}', '\\u{0}']), ('R', ['r', '\\u{0}', '\\u{0}']),\n-        ('S', ['s', '\\u{0}', '\\u{0}']), ('T', ['t', '\\u{0}', '\\u{0}']),\n-        ('U', ['u', '\\u{0}', '\\u{0}']), ('V', ['v', '\\u{0}', '\\u{0}']),\n-        ('W', ['w', '\\u{0}', '\\u{0}']), ('X', ['x', '\\u{0}', '\\u{0}']),\n-        ('Y', ['y', '\\u{0}', '\\u{0}']), ('Z', ['z', '\\u{0}', '\\u{0}']),\n         ('\\u{c0}', ['\\u{e0}', '\\u{0}', '\\u{0}']), ('\\u{c1}', ['\\u{e1}', '\\u{0}', '\\u{0}']),\n         ('\\u{c2}', ['\\u{e2}', '\\u{0}', '\\u{0}']), ('\\u{c3}', ['\\u{e3}', '\\u{0}', '\\u{0}']),\n         ('\\u{c4}', ['\\u{e4}', '\\u{0}', '\\u{0}']), ('\\u{c5}', ['\\u{e5}', '\\u{0}', '\\u{0}']),\n@@ -1456,19 +1443,6 @@ pub mod conversions {\n     ];\n \n     static UPPERCASE_TABLE: &[(char, [char; 3])] = &[\n-        ('a', ['A', '\\u{0}', '\\u{0}']), ('b', ['B', '\\u{0}', '\\u{0}']),\n-        ('c', ['C', '\\u{0}', '\\u{0}']), ('d', ['D', '\\u{0}', '\\u{0}']),\n-        ('e', ['E', '\\u{0}', '\\u{0}']), ('f', ['F', '\\u{0}', '\\u{0}']),\n-        ('g', ['G', '\\u{0}', '\\u{0}']), ('h', ['H', '\\u{0}', '\\u{0}']),\n-        ('i', ['I', '\\u{0}', '\\u{0}']), ('j', ['J', '\\u{0}', '\\u{0}']),\n-        ('k', ['K', '\\u{0}', '\\u{0}']), ('l', ['L', '\\u{0}', '\\u{0}']),\n-        ('m', ['M', '\\u{0}', '\\u{0}']), ('n', ['N', '\\u{0}', '\\u{0}']),\n-        ('o', ['O', '\\u{0}', '\\u{0}']), ('p', ['P', '\\u{0}', '\\u{0}']),\n-        ('q', ['Q', '\\u{0}', '\\u{0}']), ('r', ['R', '\\u{0}', '\\u{0}']),\n-        ('s', ['S', '\\u{0}', '\\u{0}']), ('t', ['T', '\\u{0}', '\\u{0}']),\n-        ('u', ['U', '\\u{0}', '\\u{0}']), ('v', ['V', '\\u{0}', '\\u{0}']),\n-        ('w', ['W', '\\u{0}', '\\u{0}']), ('x', ['X', '\\u{0}', '\\u{0}']),\n-        ('y', ['Y', '\\u{0}', '\\u{0}']), ('z', ['Z', '\\u{0}', '\\u{0}']),\n         ('\\u{b5}', ['\\u{39c}', '\\u{0}', '\\u{0}']), ('\\u{df}', ['S', 'S', '\\u{0}']),\n         ('\\u{e0}', ['\\u{c0}', '\\u{0}', '\\u{0}']), ('\\u{e1}', ['\\u{c1}', '\\u{0}', '\\u{0}']),\n         ('\\u{e2}', ['\\u{c2}', '\\u{0}', '\\u{0}']), ('\\u{e3}', ['\\u{c3}', '\\u{0}', '\\u{0}']),"}, {"sha": "b8153a71118176abb781f998a967159c56396883", "filename": "src/tools/unicode-table-generator/src/case_mapping.rs", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/8a4eb9e3a87b1fb9a5078f6f45cf62e2f9f8bc2b/src%2Ftools%2Funicode-table-generator%2Fsrc%2Fcase_mapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a4eb9e3a87b1fb9a5078f6f45cf62e2f9f8bc2b/src%2Ftools%2Funicode-table-generator%2Fsrc%2Fcase_mapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Funicode-table-generator%2Fsrc%2Fcase_mapping.rs?ref=8a4eb9e3a87b1fb9a5078f6f45cf62e2f9f8bc2b", "patch": "@@ -1,27 +1,24 @@\n use crate::{fmt_list, UnicodeData};\n-use std::fmt;\n+use std::{collections::BTreeMap, fmt};\n \n pub(crate) fn generate_case_mapping(data: &UnicodeData) -> String {\n     let mut file = String::new();\n \n     file.push_str(HEADER.trim_start());\n-\n-    let decl_type = \"&[(char, [char; 3])]\";\n-\n-    file.push_str(&format!(\n-        \"static LOWERCASE_TABLE: {} = &[{}];\",\n-        decl_type,\n-        fmt_list(data.to_lower.iter().map(to_mapping))\n-    ));\n+    file.push_str(&generate_table(\"LOWER\", &data.to_lower));\n     file.push_str(\"\\n\\n\");\n-    file.push_str(&format!(\n-        \"static UPPERCASE_TABLE: {} = &[{}];\",\n-        decl_type,\n-        fmt_list(data.to_upper.iter().map(to_mapping))\n-    ));\n+    file.push_str(&generate_table(\"UPPER\", &data.to_upper));\n     file\n }\n \n+fn generate_table(case: &str, data: &BTreeMap<u32, (u32, u32, u32)>) -> String {\n+    format!(\n+        \"static {}CASE_TABLE: &[(char, [char; 3])] = &[{}];\",\n+        case,\n+        fmt_list(data.iter().map(to_mapping).filter(|(k, _)| !k.0.is_ascii()))\n+    )\n+}\n+\n fn to_mapping((key, (a, b, c)): (&u32, &(u32, u32, u32))) -> (CharEscape, [CharEscape; 3]) {\n     (\n         CharEscape(std::char::from_u32(*key).unwrap()),"}]}