{"sha": "b4c20e3589372ba1536cec1bfe7de6acd2f40a4d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0YzIwZTM1ODkzNzJiYTE1MzZjZWMxYmZlN2RlNmFjZDJmNDBhNGQ=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-03-24T22:07:54Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-03-24T22:10:13Z"}, "message": "Fix chalk_ir assertion\n\nFixes #8150.", "tree": {"sha": "18a40f362334376c31afbc41cdd8a304f6b6d23d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18a40f362334376c31afbc41cdd8a304f6b6d23d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4c20e3589372ba1536cec1bfe7de6acd2f40a4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4c20e3589372ba1536cec1bfe7de6acd2f40a4d", "html_url": "https://github.com/rust-lang/rust/commit/b4c20e3589372ba1536cec1bfe7de6acd2f40a4d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4c20e3589372ba1536cec1bfe7de6acd2f40a4d/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a1f5d367db3b5c6ec27d96c96c98b89988c0b3a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a1f5d367db3b5c6ec27d96c96c98b89988c0b3a", "html_url": "https://github.com/rust-lang/rust/commit/4a1f5d367db3b5c6ec27d96c96c98b89988c0b3a"}], "stats": {"total": 60, "additions": 42, "deletions": 18}, "files": [{"sha": "69265286f5f8caaf2a51244a992bf7dcb4d1dcb0", "filename": "crates/hir_ty/src/lib.rs", "status": "modified", "additions": 26, "deletions": 7, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/b4c20e3589372ba1536cec1bfe7de6acd2f40a4d/crates%2Fhir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4c20e3589372ba1536cec1bfe7de6acd2f40a4d/crates%2Fhir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flib.rs?ref=b4c20e3589372ba1536cec1bfe7de6acd2f40a4d", "patch": "@@ -538,12 +538,6 @@ impl<T: TypeWalk> Binders<T> {\n         assert_eq!(subst.len(), self.num_binders);\n         self.value.subst_bound_vars(subst)\n     }\n-\n-    /// Substitutes just a prefix of the variables (shifting the rest).\n-    pub fn subst_prefix(self, subst: &Substitution) -> Binders<T> {\n-        assert!(subst.len() < self.num_binders);\n-        Binders::new(self.num_binders - subst.len(), self.value.subst_bound_vars(subst))\n-    }\n }\n \n impl<T: TypeWalk> TypeWalk for Binders<T> {\n@@ -698,7 +692,15 @@ impl CallableSig {\n \n     pub fn from_fn_ptr(fn_ptr: &FnPointer) -> CallableSig {\n         CallableSig {\n-            params_and_return: fn_ptr.substs.interned(&Interner).iter().cloned().collect(),\n+            // FIXME: what to do about lifetime params?\n+            params_and_return: fn_ptr\n+                .substs\n+                .clone()\n+                .shift_bound_vars_out(DebruijnIndex::ONE)\n+                .interned(&Interner)\n+                .iter()\n+                .cloned()\n+                .collect(),\n             is_varargs: fn_ptr.sig.variadic,\n         }\n     }\n@@ -1131,6 +1133,23 @@ pub trait TypeWalk {\n             DebruijnIndex::INNERMOST,\n         )\n     }\n+\n+    /// Shifts debruijn indices of `TyKind::Bound` vars out (down) by `n`.\n+    fn shift_bound_vars_out(self, n: DebruijnIndex) -> Self\n+    where\n+        Self: Sized + std::fmt::Debug,\n+    {\n+        self.fold_binders(\n+            &mut |ty, binders| match ty.interned(&Interner) {\n+                TyKind::BoundVar(bound) if bound.debruijn >= binders => {\n+                    TyKind::BoundVar(bound.shifted_out_to(n).unwrap_or(bound.clone()))\n+                        .intern(&Interner)\n+                }\n+                _ => ty,\n+            },\n+            DebruijnIndex::INNERMOST,\n+        )\n+    }\n }\n \n impl TypeWalk for Ty {"}, {"sha": "c87789d45bdaa1d6fb8e72c1d1533bf88b5a051f", "filename": "crates/hir_ty/src/lower.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b4c20e3589372ba1536cec1bfe7de6acd2f40a4d/crates%2Fhir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4c20e3589372ba1536cec1bfe7de6acd2f40a4d/crates%2Fhir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flower.rs?ref=b4c20e3589372ba1536cec1bfe7de6acd2f40a4d", "patch": "@@ -828,14 +828,18 @@ pub fn associated_type_shorthand_candidates<R>(\n     let traits_from_env: Vec<_> = match res {\n         TypeNs::SelfType(impl_id) => match db.impl_trait(impl_id) {\n             None => vec![],\n-            Some(trait_ref) => vec![trait_ref.value],\n+            // FIXME: how to correctly handle higher-ranked bounds here?\n+            Some(trait_ref) => vec![trait_ref.value.shift_bound_vars_out(DebruijnIndex::ONE)],\n         },\n         TypeNs::GenericParam(param_id) => {\n             let predicates = db.generic_predicates_for_param(param_id);\n             let mut traits_: Vec<_> = predicates\n                 .iter()\n                 .filter_map(|pred| match &pred.value.value {\n-                    WhereClause::Implemented(tr) => Some(tr.clone()),\n+                    // FIXME: how to correctly handle higher-ranked bounds here?\n+                    WhereClause::Implemented(tr) => {\n+                        Some(tr.clone().shift_bound_vars_out(DebruijnIndex::ONE))\n+                    }\n                     _ => None,\n                 })\n                 .collect();\n@@ -1156,10 +1160,9 @@ fn type_for_type_alias(db: &dyn HirDatabase, t: TypeAliasId) -> Binders<Ty> {\n     if db.type_alias_data(t).is_extern {\n         Binders::new(0, TyKind::ForeignType(crate::to_foreign_def_id(t)).intern(&Interner))\n     } else {\n-        let substs = Substitution::bound_vars(&generics, DebruijnIndex::INNERMOST);\n         let type_ref = &db.type_alias_data(t).type_ref;\n         let inner = ctx.lower_ty(type_ref.as_ref().unwrap_or(&TypeRef::Error));\n-        Binders::new(substs.len(), inner)\n+        Binders::new(generics.len(), inner)\n     }\n }\n "}, {"sha": "011bef6f69324afe6627bbfea602b2223511fae0", "filename": "crates/hir_ty/src/traits/chalk.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b4c20e3589372ba1536cec1bfe7de6acd2f40a4d/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4c20e3589372ba1536cec1bfe7de6acd2f40a4d/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk.rs?ref=b4c20e3589372ba1536cec1bfe7de6acd2f40a4d", "patch": "@@ -21,8 +21,8 @@ use crate::{\n     method_resolution::{TyFingerprint, ALL_FLOAT_FPS, ALL_INT_FPS},\n     to_assoc_type_id, to_chalk_trait_id,\n     utils::generics,\n-    AliasEq, AliasTy, BoundVar, CallableDefId, CallableSig, DebruijnIndex, FnDefId, ProjectionTy,\n-    Substitution, TraitRef, Ty, TyKind, WhereClause,\n+    AliasEq, AliasTy, BoundVar, CallableDefId, DebruijnIndex, FnDefId, ProjectionTy, Substitution,\n+    TraitRef, Ty, TyKind, WhereClause,\n };\n use mapping::{\n     convert_where_clauses, generic_predicate_to_inline_bound, make_binders, TypeAliasAsValue,\n@@ -288,9 +288,7 @@ impl<'a> chalk_solve::RustIrDatabase<Interner> for ChalkContext<'a> {\n     ) -> chalk_ir::Binders<rust_ir::FnDefInputsAndOutputDatum<Interner>> {\n         let sig_ty: Ty =\n             from_chalk(self.db, substs.at(&Interner, 0).assert_ty_ref(&Interner).clone());\n-        let sig = CallableSig::from_substs(\n-            &sig_ty.substs().expect(\"first closure param should be fn ptr\"),\n-        );\n+        let sig = &sig_ty.callable_sig(self.db).expect(\"first closure param should be fn ptr\");\n         let io = rust_ir::FnDefInputsAndOutputDatum {\n             argument_types: sig.params().iter().map(|ty| ty.clone().to_chalk(self.db)).collect(),\n             return_type: sig.ret().clone().to_chalk(self.db),"}, {"sha": "42d7af146542410ead4e77ff70946c3380170598", "filename": "crates/hir_ty/src/utils.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b4c20e3589372ba1536cec1bfe7de6acd2f40a4d/crates%2Fhir_ty%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4c20e3589372ba1536cec1bfe7de6acd2f40a4d/crates%2Fhir_ty%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Futils.rs?ref=b4c20e3589372ba1536cec1bfe7de6acd2f40a4d", "patch": "@@ -2,6 +2,7 @@\n //! query, but can't be computed directly from `*Data` (ie, which need a `db`).\n use std::sync::Arc;\n \n+use chalk_ir::DebruijnIndex;\n use hir_def::{\n     adt::VariantData,\n     db::DefDatabase,\n@@ -15,7 +16,7 @@ use hir_def::{\n };\n use hir_expand::name::{name, Name};\n \n-use crate::{db::HirDatabase, TraitRef, WhereClause};\n+use crate::{db::HirDatabase, TraitRef, TypeWalk, WhereClause};\n \n fn direct_super_traits(db: &dyn DefDatabase, trait_: TraitId) -> Vec<TraitId> {\n     let resolver = trait_.resolver(db);\n@@ -64,7 +65,10 @@ fn direct_super_trait_refs(db: &dyn HirDatabase, trait_ref: &TraitRef) -> Vec<Tr\n         .iter()\n         .filter_map(|pred| {\n             pred.as_ref().filter_map(|pred| match pred.skip_binders() {\n-                WhereClause::Implemented(tr) => Some(tr.clone()),\n+                // FIXME: how to correctly handle higher-ranked bounds here?\n+                WhereClause::Implemented(tr) => {\n+                    Some(tr.clone().shift_bound_vars_out(DebruijnIndex::ONE))\n+                }\n                 _ => None,\n             })\n         })"}]}