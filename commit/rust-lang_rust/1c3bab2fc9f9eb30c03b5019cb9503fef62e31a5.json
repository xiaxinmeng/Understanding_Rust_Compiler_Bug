{"sha": "1c3bab2fc9f9eb30c03b5019cb9503fef62e31a5", "node_id": "C_kwDOAAsO6NoAKDFjM2JhYjJmYzlmOWViMzBjMDNiNTAxOWNiOTUwM2ZlZjYyZTMxYTU", "commit": {"author": {"name": "Caio", "email": "c410.f3r@gmail.com", "date": "2022-07-08T10:25:50Z"}, "committer": {"name": "Caio", "email": "c410.f3r@gmail.com", "date": "2022-07-08T10:25:50Z"}, "message": "Fix last let_chains blocker", "tree": {"sha": "1823265c5608aab2a233d6dcca8df5d34e2c6178", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1823265c5608aab2a233d6dcca8df5d34e2c6178"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c3bab2fc9f9eb30c03b5019cb9503fef62e31a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c3bab2fc9f9eb30c03b5019cb9503fef62e31a5", "html_url": "https://github.com/rust-lang/rust/commit/1c3bab2fc9f9eb30c03b5019cb9503fef62e31a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c3bab2fc9f9eb30c03b5019cb9503fef62e31a5/comments", "author": {"login": "c410-f3r", "id": 17877264, "node_id": "MDQ6VXNlcjE3ODc3MjY0", "avatar_url": "https://avatars.githubusercontent.com/u/17877264?v=4", "gravatar_id": "", "url": "https://api.github.com/users/c410-f3r", "html_url": "https://github.com/c410-f3r", "followers_url": "https://api.github.com/users/c410-f3r/followers", "following_url": "https://api.github.com/users/c410-f3r/following{/other_user}", "gists_url": "https://api.github.com/users/c410-f3r/gists{/gist_id}", "starred_url": "https://api.github.com/users/c410-f3r/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/c410-f3r/subscriptions", "organizations_url": "https://api.github.com/users/c410-f3r/orgs", "repos_url": "https://api.github.com/users/c410-f3r/repos", "events_url": "https://api.github.com/users/c410-f3r/events{/privacy}", "received_events_url": "https://api.github.com/users/c410-f3r/received_events", "type": "User", "site_admin": false}, "committer": {"login": "c410-f3r", "id": 17877264, "node_id": "MDQ6VXNlcjE3ODc3MjY0", "avatar_url": "https://avatars.githubusercontent.com/u/17877264?v=4", "gravatar_id": "", "url": "https://api.github.com/users/c410-f3r", "html_url": "https://github.com/c410-f3r", "followers_url": "https://api.github.com/users/c410-f3r/followers", "following_url": "https://api.github.com/users/c410-f3r/following{/other_user}", "gists_url": "https://api.github.com/users/c410-f3r/gists{/gist_id}", "starred_url": "https://api.github.com/users/c410-f3r/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/c410-f3r/subscriptions", "organizations_url": "https://api.github.com/users/c410-f3r/orgs", "repos_url": "https://api.github.com/users/c410-f3r/repos", "events_url": "https://api.github.com/users/c410-f3r/events{/privacy}", "received_events_url": "https://api.github.com/users/c410-f3r/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f97e02bdc7a53176aa96a53ff8b533947d7649c", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f97e02bdc7a53176aa96a53ff8b533947d7649c", "html_url": "https://github.com/rust-lang/rust/commit/0f97e02bdc7a53176aa96a53ff8b533947d7649c"}], "stats": {"total": 1128, "additions": 827, "deletions": 301}, "files": [{"sha": "f9387e29262ae19684d8425f281ed78ae534c9dd", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 24, "deletions": 8, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/1c3bab2fc9f9eb30c03b5019cb9503fef62e31a5/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c3bab2fc9f9eb30c03b5019cb9503fef62e31a5/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=1c3bab2fc9f9eb30c03b5019cb9503fef62e31a5", "patch": "@@ -1393,7 +1393,9 @@ impl<'a> Parser<'a> {\n             self.parse_yield_expr(attrs)\n         } else if self.is_do_yeet() {\n             self.parse_yeet_expr(attrs)\n-        } else if self.eat_keyword(kw::Let) {\n+        } else if self.check_keyword(kw::Let) {\n+            self.manage_let_chains_context();\n+            self.bump();\n             self.parse_let_expr(attrs)\n         } else if self.eat_keyword(kw::Underscore) {\n             Ok(self.mk_expr(self.prev_token.span, ExprKind::Underscore, attrs))\n@@ -2355,16 +2357,30 @@ impl<'a> Parser<'a> {\n         Ok(cond)\n     }\n \n+    // Checks if `let` is in an invalid position like `let x = let y = 1;` or\n+    // if the current `let` is in a let_chains context but nested in another\n+    // expression like `if let Some(_) = _opt && [1, 2, 3][let _ = ()] = 1`.\n+    //\n+    // This method expects that the current token is `let`.\n+    fn manage_let_chains_context(&mut self) {\n+        debug_assert!(matches!(self.token.kind, TokenKind::Ident(kw::Let, _)));\n+        let is_in_a_let_chains_context_but_nested_in_other_expr = self.let_expr_allowed\n+            && !matches!(\n+                self.prev_token.kind,\n+                TokenKind::AndAnd\n+                    | TokenKind::CloseDelim(Delimiter::Brace)\n+                    | TokenKind::Ident(kw::If, _)\n+                    | TokenKind::Ident(kw::While, _)\n+            );\n+        if !self.let_expr_allowed || is_in_a_let_chains_context_but_nested_in_other_expr {\n+            self.struct_span_err(self.token.span, \"expected expression, found `let` statement\")\n+                .emit();\n+        }\n+    }\n+\n     /// Parses a `let $pat = $expr` pseudo-expression.\n     /// The `let` token has already been eaten.\n     fn parse_let_expr(&mut self, attrs: AttrVec) -> PResult<'a, P<Expr>> {\n-        if !self.let_expr_allowed {\n-            self.struct_span_err(\n-                self.prev_token.span,\n-                \"expected expression, found `let` statement\",\n-            )\n-            .emit();\n-        }\n         let lo = self.prev_token.span;\n         let pat = self.parse_pat_allow_top_alt(\n             None,"}, {"sha": "d8febd273c96e6cbba1d8487231110197a803630", "filename": "src/test/ui/rfc-2294-if-let-guard/feature-gate.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1c3bab2fc9f9eb30c03b5019cb9503fef62e31a5/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ffeature-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c3bab2fc9f9eb30c03b5019cb9503fef62e31a5/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ffeature-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ffeature-gate.rs?ref=1c3bab2fc9f9eb30c03b5019cb9503fef62e31a5", "patch": "@@ -9,9 +9,11 @@ fn _if_let_guard() {\n \n         () if (let 0 = 1) => {}\n         //~^ ERROR `let` expressions in this position are unstable\n+        //~| ERROR expected expression, found `let` statement\n \n         () if (((let 0 = 1))) => {}\n         //~^ ERROR `let` expressions in this position are unstable\n+        //~| ERROR expected expression, found `let` statement\n \n         () if true && let 0 = 1 => {}\n         //~^ ERROR `if let` guards are experimental\n@@ -23,13 +25,17 @@ fn _if_let_guard() {\n \n         () if (let 0 = 1) && true => {}\n         //~^ ERROR `let` expressions in this position are unstable\n+        //~| ERROR expected expression, found `let` statement\n \n         () if true && (let 0 = 1) => {}\n         //~^ ERROR `let` expressions in this position are unstable\n+        //~| ERROR expected expression, found `let` statement\n \n         () if (let 0 = 1) && (let 0 = 1) => {}\n         //~^ ERROR `let` expressions in this position are unstable\n         //~| ERROR `let` expressions in this position are unstable\n+        //~| ERROR expected expression, found `let` statement\n+        //~| ERROR expected expression, found `let` statement\n \n         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) => {}\n         //~^ ERROR `if let` guards are experimental\n@@ -38,6 +44,7 @@ fn _if_let_guard() {\n         //~| ERROR `let` expressions in this position are unstable\n         //~| ERROR `let` expressions in this position are unstable\n         //~| ERROR `let` expressions in this position are unstable\n+        //~| ERROR expected expression, found `let` statement\n \n         () if let Range { start: _, end: _ } = (true..true) && false => {}\n         //~^ ERROR `if let` guards are experimental"}, {"sha": "52b5bca628ac7adeb887bf1bf7781ab2c26a8f50", "filename": "src/test/ui/rfc-2294-if-let-guard/feature-gate.stderr", "status": "modified", "additions": 66, "deletions": 24, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/1c3bab2fc9f9eb30c03b5019cb9503fef62e31a5/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ffeature-gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c3bab2fc9f9eb30c03b5019cb9503fef62e31a5/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ffeature-gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ffeature-gate.stderr?ref=1c3bab2fc9f9eb30c03b5019cb9503fef62e31a5", "patch": "@@ -1,17 +1,59 @@\n error: expected expression, found `let` statement\n-  --> $DIR/feature-gate.rs:59:16\n+  --> $DIR/feature-gate.rs:10:16\n+   |\n+LL |         () if (let 0 = 1) => {}\n+   |                ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/feature-gate.rs:14:18\n+   |\n+LL |         () if (((let 0 = 1))) => {}\n+   |                  ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/feature-gate.rs:26:16\n+   |\n+LL |         () if (let 0 = 1) && true => {}\n+   |                ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/feature-gate.rs:30:24\n+   |\n+LL |         () if true && (let 0 = 1) => {}\n+   |                        ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/feature-gate.rs:34:16\n+   |\n+LL |         () if (let 0 = 1) && (let 0 = 1) => {}\n+   |                ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/feature-gate.rs:34:31\n+   |\n+LL |         () if (let 0 = 1) && (let 0 = 1) => {}\n+   |                               ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/feature-gate.rs:40:42\n+   |\n+LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) => {}\n+   |                                          ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/feature-gate.rs:66:16\n    |\n LL |     use_expr!((let 0 = 1 && 0 == 0));\n    |                ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/feature-gate.rs:62:16\n+  --> $DIR/feature-gate.rs:69:16\n    |\n LL |     use_expr!((let 0 = 1));\n    |                ^^^\n \n error: no rules expected the token `let`\n-  --> $DIR/feature-gate.rs:71:15\n+  --> $DIR/feature-gate.rs:78:15\n    |\n LL |     macro_rules! use_expr {\n    |     --------------------- when calling this macro\n@@ -30,7 +72,7 @@ LL |         () if let 0 = 1 => {}\n    = help: you can write `if matches!(<expr>, <pattern>)` instead of `if let <pattern> = <expr>`\n \n error[E0658]: `if let` guards are experimental\n-  --> $DIR/feature-gate.rs:16:12\n+  --> $DIR/feature-gate.rs:18:12\n    |\n LL |         () if true && let 0 = 1 => {}\n    |            ^^^^^^^^^^^^^^^^^^^^\n@@ -40,7 +82,7 @@ LL |         () if true && let 0 = 1 => {}\n    = help: you can write `if matches!(<expr>, <pattern>)` instead of `if let <pattern> = <expr>`\n \n error[E0658]: `if let` guards are experimental\n-  --> $DIR/feature-gate.rs:20:12\n+  --> $DIR/feature-gate.rs:22:12\n    |\n LL |         () if let 0 = 1 && true => {}\n    |            ^^^^^^^^^^^^^^^^^^^^\n@@ -50,7 +92,7 @@ LL |         () if let 0 = 1 && true => {}\n    = help: you can write `if matches!(<expr>, <pattern>)` instead of `if let <pattern> = <expr>`\n \n error[E0658]: `if let` guards are experimental\n-  --> $DIR/feature-gate.rs:34:12\n+  --> $DIR/feature-gate.rs:40:12\n    |\n LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) => {}\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -60,7 +102,7 @@ LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 =\n    = help: you can write `if matches!(<expr>, <pattern>)` instead of `if let <pattern> = <expr>`\n \n error[E0658]: `if let` guards are experimental\n-  --> $DIR/feature-gate.rs:42:12\n+  --> $DIR/feature-gate.rs:49:12\n    |\n LL |         () if let Range { start: _, end: _ } = (true..true) && false => {}\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -70,7 +112,7 @@ LL |         () if let Range { start: _, end: _ } = (true..true) && false => {}\n    = help: you can write `if matches!(<expr>, <pattern>)` instead of `if let <pattern> = <expr>`\n \n error[E0658]: `if let` guards are experimental\n-  --> $DIR/feature-gate.rs:67:12\n+  --> $DIR/feature-gate.rs:74:12\n    |\n LL |         () if let 0 = 1 => {}\n    |            ^^^^^^^^^^^^\n@@ -89,7 +131,7 @@ LL |         () if (let 0 = 1) => {}\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:13:18\n+  --> $DIR/feature-gate.rs:14:18\n    |\n LL |         () if (((let 0 = 1))) => {}\n    |                  ^^^^^^^^^\n@@ -98,7 +140,7 @@ LL |         () if (((let 0 = 1))) => {}\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:16:23\n+  --> $DIR/feature-gate.rs:18:23\n    |\n LL |         () if true && let 0 = 1 => {}\n    |                       ^^^^^^^^^\n@@ -107,7 +149,7 @@ LL |         () if true && let 0 = 1 => {}\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:20:15\n+  --> $DIR/feature-gate.rs:22:15\n    |\n LL |         () if let 0 = 1 && true => {}\n    |               ^^^^^^^^^\n@@ -116,7 +158,7 @@ LL |         () if let 0 = 1 && true => {}\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:24:16\n+  --> $DIR/feature-gate.rs:26:16\n    |\n LL |         () if (let 0 = 1) && true => {}\n    |                ^^^^^^^^^\n@@ -125,7 +167,7 @@ LL |         () if (let 0 = 1) && true => {}\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:27:24\n+  --> $DIR/feature-gate.rs:30:24\n    |\n LL |         () if true && (let 0 = 1) => {}\n    |                        ^^^^^^^^^\n@@ -134,7 +176,7 @@ LL |         () if true && (let 0 = 1) => {}\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:30:16\n+  --> $DIR/feature-gate.rs:34:16\n    |\n LL |         () if (let 0 = 1) && (let 0 = 1) => {}\n    |                ^^^^^^^^^\n@@ -143,7 +185,7 @@ LL |         () if (let 0 = 1) && (let 0 = 1) => {}\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:30:31\n+  --> $DIR/feature-gate.rs:34:31\n    |\n LL |         () if (let 0 = 1) && (let 0 = 1) => {}\n    |                               ^^^^^^^^^\n@@ -152,7 +194,7 @@ LL |         () if (let 0 = 1) && (let 0 = 1) => {}\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:34:15\n+  --> $DIR/feature-gate.rs:40:15\n    |\n LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) => {}\n    |               ^^^^^^^^^\n@@ -161,7 +203,7 @@ LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 =\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:34:28\n+  --> $DIR/feature-gate.rs:40:28\n    |\n LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) => {}\n    |                            ^^^^^^^^^\n@@ -170,7 +212,7 @@ LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 =\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:34:42\n+  --> $DIR/feature-gate.rs:40:42\n    |\n LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) => {}\n    |                                          ^^^^^^^^^\n@@ -179,7 +221,7 @@ LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 =\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:34:55\n+  --> $DIR/feature-gate.rs:40:55\n    |\n LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) => {}\n    |                                                       ^^^^^^^^^\n@@ -188,7 +230,7 @@ LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 =\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:34:68\n+  --> $DIR/feature-gate.rs:40:68\n    |\n LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) => {}\n    |                                                                    ^^^^^^^^^\n@@ -197,7 +239,7 @@ LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 =\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:42:15\n+  --> $DIR/feature-gate.rs:49:15\n    |\n LL |         () if let Range { start: _, end: _ } = (true..true) && false => {}\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -206,7 +248,7 @@ LL |         () if let Range { start: _, end: _ } = (true..true) && false => {}\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:59:16\n+  --> $DIR/feature-gate.rs:66:16\n    |\n LL |     use_expr!((let 0 = 1 && 0 == 0));\n    |                ^^^^^^^^^\n@@ -215,14 +257,14 @@ LL |     use_expr!((let 0 = 1 && 0 == 0));\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:62:16\n+  --> $DIR/feature-gate.rs:69:16\n    |\n LL |     use_expr!((let 0 = 1));\n    |                ^^^^^^^^^\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n-error: aborting due to 25 previous errors\n+error: aborting due to 32 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "069d2dc414dea8b89baecb4013bfae59161790c0", "filename": "src/test/ui/rfc-2497-if-let-chains/disallowed-positions.rs", "status": "modified", "additions": 123, "deletions": 45, "changes": 168, "blob_url": "https://github.com/rust-lang/rust/blob/1c3bab2fc9f9eb30c03b5019cb9503fef62e31a5/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c3bab2fc9f9eb30c03b5019cb9503fef62e31a5/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.rs?ref=1c3bab2fc9f9eb30c03b5019cb9503fef62e31a5", "patch": "@@ -28,47 +28,61 @@ fn main() {}\n fn _if() {\n     if (let 0 = 1) {}\n     //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR expected expression, found `let` statement\n \n     if (((let 0 = 1))) {}\n     //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR expected expression, found `let` statement\n \n     if (let 0 = 1) && true {}\n     //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR expected expression, found `let` statement\n \n     if true && (let 0 = 1) {}\n     //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR expected expression, found `let` statement\n \n     if (let 0 = 1) && (let 0 = 1) {}\n     //~^ ERROR `let` expressions are not supported here\n     //~| ERROR `let` expressions are not supported here\n+    //~| ERROR expected expression, found `let` statement\n+    //~| ERROR expected expression, found `let` statement\n \n     if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n     //~^ ERROR `let` expressions are not supported here\n     //~| ERROR `let` expressions are not supported here\n     //~| ERROR `let` expressions are not supported here\n+    //~| ERROR expected expression, found `let` statement\n }\n \n fn _while() {\n     while (let 0 = 1) {}\n     //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR expected expression, found `let` statement\n \n     while (((let 0 = 1))) {}\n     //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR expected expression, found `let` statement\n \n     while (let 0 = 1) && true {}\n     //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR expected expression, found `let` statement\n \n     while true && (let 0 = 1) {}\n     //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR expected expression, found `let` statement\n \n     while (let 0 = 1) && (let 0 = 1) {}\n     //~^ ERROR `let` expressions are not supported here\n     //~| ERROR `let` expressions are not supported here\n+    //~| ERROR expected expression, found `let` statement\n+    //~| ERROR expected expression, found `let` statement\n \n     while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n     //~^ ERROR `let` expressions are not supported here\n     //~| ERROR `let` expressions are not supported here\n     //~| ERROR `let` expressions are not supported here\n+    //~| ERROR expected expression, found `let` statement\n }\n \n fn _macros() {\n@@ -89,39 +103,64 @@ fn _macros() {\n }\n \n fn nested_within_if_expr() {\n-    if &let 0 = 0 {} //~ ERROR `let` expressions are not supported here\n-    //~^ ERROR mismatched types\n+    if &let 0 = 0 {}\n+    //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR mismatched types\n+    //~| ERROR expected expression, found `let` statement\n \n-    if !let 0 = 0 {} //~ ERROR `let` expressions are not supported here\n-    if *let 0 = 0 {} //~ ERROR `let` expressions are not supported here\n-    //~^ ERROR type `bool` cannot be dereferenced\n-    if -let 0 = 0 {} //~ ERROR `let` expressions are not supported here\n-    //~^ ERROR cannot apply unary operator `-` to type `bool`\n+    if !let 0 = 0 {}\n+    //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR expected expression, found `let` statement\n+    if *let 0 = 0 {}\n+    //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR type `bool` cannot be dereferenced\n+    //~| ERROR expected expression, found `let` statement\n+    if -let 0 = 0 {}\n+    //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR cannot apply unary operator `-` to type `bool`\n+    //~| ERROR expected expression, found `let` statement\n \n     fn _check_try_binds_tighter() -> Result<(), ()> {\n         if let 0 = 0? {}\n         //~^ ERROR the `?` operator can only be applied to values that implement `Try`\n         Ok(())\n     }\n-    if (let 0 = 0)? {} //~ ERROR `let` expressions are not supported here\n-    //~^ ERROR the `?` operator can only be applied to values that implement `Try`\n+    if (let 0 = 0)? {}\n+    //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR the `?` operator can only be applied to values that implement `Try`\n     //~| ERROR the `?` operator can only be used in a function that returns `Result`\n+    //~| ERROR expected expression, found `let` statement\n \n-    if true || let 0 = 0 {} //~ ERROR `let` expressions are not supported here\n-    if (true || let 0 = 0) {} //~ ERROR `let` expressions are not supported here\n-    if true && (true || let 0 = 0) {} //~ ERROR `let` expressions are not supported here\n-    if true || (true && let 0 = 0) {} //~ ERROR `let` expressions are not supported here\n+    if true || let 0 = 0 {}\n+    //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR expected expression, found `let` statement\n+    if (true || let 0 = 0) {}\n+    //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR expected expression, found `let` statement\n+    if true && (true || let 0 = 0) {}\n+    //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR expected expression, found `let` statement\n+    if true || (true && let 0 = 0) {}\n+    //~^ ERROR `let` expressions are not supported here\n \n     let mut x = true;\n-    if x = let 0 = 0 {} //~ ERROR `let` expressions are not supported here\n-    //~^ ERROR mismatched types\n+    if x = let 0 = 0 {}\n+    //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR mismatched types\n+    //~| ERROR expected expression, found `let` statement\n \n-    if true..(let 0 = 0) {} //~ ERROR `let` expressions are not supported here\n-    //~^ ERROR mismatched types\n-    if ..(let 0 = 0) {} //~ ERROR `let` expressions are not supported here\n-    //~^ ERROR mismatched types\n-    if (let 0 = 0).. {} //~ ERROR `let` expressions are not supported here\n-    //~^ ERROR mismatched types\n+    if true..(let 0 = 0) {}\n+    //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR mismatched types\n+    //~| ERROR expected expression, found `let` statement\n+    if ..(let 0 = 0) {}\n+    //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR mismatched types\n+    //~| ERROR expected expression, found `let` statement\n+    if (let 0 = 0).. {}\n+    //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR mismatched types\n+    //~| ERROR expected expression, found `let` statement\n \n     // Binds as `(let ... = true)..true &&/|| false`.\n     if let Range { start: _, end: _ } = true..true && false {}\n@@ -151,42 +190,68 @@ fn nested_within_if_expr() {\n \n     if let true = let true = true {}\n     //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR expected expression, found `let` statement\n }\n \n fn nested_within_while_expr() {\n-    while &let 0 = 0 {} //~ ERROR `let` expressions are not supported here\n-    //~^ ERROR mismatched types\n+    while &let 0 = 0 {}\n+    //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR mismatched types\n+    //~| ERROR expected expression, found `let` statement\n \n-    while !let 0 = 0 {} //~ ERROR `let` expressions are not supported here\n-    while *let 0 = 0 {} //~ ERROR `let` expressions are not supported here\n-    //~^ ERROR type `bool` cannot be dereferenced\n-    while -let 0 = 0 {} //~ ERROR `let` expressions are not supported here\n-    //~^ ERROR cannot apply unary operator `-` to type `bool`\n+    while !let 0 = 0 {}\n+    //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR expected expression, found `let` statement\n+    while *let 0 = 0 {}\n+    //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR type `bool` cannot be dereferenced\n+    //~| ERROR expected expression, found `let` statement\n+    while -let 0 = 0 {}\n+    //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR cannot apply unary operator `-` to type `bool`\n+    //~| ERROR expected expression, found `let` statement\n \n     fn _check_try_binds_tighter() -> Result<(), ()> {\n         while let 0 = 0? {}\n         //~^ ERROR the `?` operator can only be applied to values that implement `Try`\n         Ok(())\n     }\n-    while (let 0 = 0)? {} //~ ERROR `let` expressions are not supported here\n-    //~^ ERROR the `?` operator can only be applied to values that implement `Try`\n+    while (let 0 = 0)? {}\n+    //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR the `?` operator can only be applied to values that implement `Try`\n     //~| ERROR the `?` operator can only be used in a function that returns `Result`\n+    //~| ERROR expected expression, found `let` statement\n \n-    while true || let 0 = 0 {} //~ ERROR `let` expressions are not supported here\n-    while (true || let 0 = 0) {} //~ ERROR `let` expressions are not supported here\n-    while true && (true || let 0 = 0) {} //~ ERROR `let` expressions are not supported here\n-    while true || (true && let 0 = 0) {} //~ ERROR `let` expressions are not supported here\n+    while true || let 0 = 0 {}\n+    //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR expected expression, found `let` statement\n+    while (true || let 0 = 0) {}\n+    //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR expected expression, found `let` statement\n+    while true && (true || let 0 = 0) {}\n+    //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR expected expression, found `let` statement\n+    while true || (true && let 0 = 0) {}\n+    //~^ ERROR `let` expressions are not supported here\n \n     let mut x = true;\n-    while x = let 0 = 0 {} //~ ERROR `let` expressions are not supported here\n-    //~^ ERROR mismatched types\n+    while x = let 0 = 0 {}\n+    //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR mismatched types\n+    //~| ERROR expected expression, found `let` statement\n \n-    while true..(let 0 = 0) {} //~ ERROR `let` expressions are not supported here\n-    //~^ ERROR mismatched types\n-    while ..(let 0 = 0) {} //~ ERROR `let` expressions are not supported here\n-    //~^ ERROR mismatched types\n-    while (let 0 = 0).. {} //~ ERROR `let` expressions are not supported here\n-    //~^ ERROR mismatched types\n+    while true..(let 0 = 0) {}\n+    //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR mismatched types\n+    //~| ERROR expected expression, found `let` statement\n+    while ..(let 0 = 0) {}\n+    //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR mismatched types\n+    //~| ERROR expected expression, found `let` statement\n+    while (let 0 = 0).. {}\n+    //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR mismatched types\n+    //~| ERROR expected expression, found `let` statement\n \n     // Binds as `(let ... = true)..true &&/|| false`.\n     while let Range { start: _, end: _ } = true..true && false {}\n@@ -216,6 +281,7 @@ fn nested_within_while_expr() {\n \n     while let true = let true = true {}\n     //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR expected expression, found `let` statement\n }\n \n fn not_error_because_clarified_intent() {\n@@ -316,15 +382,18 @@ fn inside_const_generic_arguments() {\n     impl<const B: bool> A<{B}> { const O: u32 = 5; }\n \n     if let A::<{\n-        true && let 1 = 1 //~ ERROR `let` expressions are not supported here\n+        true && let 1 = 1\n+        //~^ ERROR `let` expressions are not supported here\n     }>::O = 5 {}\n \n     while let A::<{\n-        true && let 1 = 1 //~ ERROR `let` expressions are not supported here\n+        true && let 1 = 1\n+        //~^ ERROR `let` expressions are not supported here\n     }>::O = 5 {}\n \n     if A::<{\n-        true && let 1 = 1 //~ ERROR `let` expressions are not supported here\n+        true && let 1 = 1\n+        //~^ ERROR `let` expressions are not supported here\n     }>::O == 5 {}\n \n     // In the cases above we have `ExprKind::Block` to help us out.\n@@ -345,28 +414,37 @@ fn with_parenthesis() {\n \n     if (let Some(a) = opt && true) {\n     //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR expected expression, found `let` statement\n     }\n \n     if (let Some(a) = opt) && true {\n     //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR expected expression, found `let` statement\n     }\n     if (let Some(a) = opt) && (let Some(b) = a) {\n     //~^ ERROR `let` expressions are not supported here\n     //~| ERROR `let` expressions are not supported here\n+    //~| ERROR expected expression, found `let` statement\n+    //~| ERROR expected expression, found `let` statement\n     }\n     if let Some(a) = opt && (true && true) {\n     }\n \n     if (let Some(a) = opt && (let Some(b) = a)) && b == 1 {\n     //~^ ERROR `let` expressions are not supported here\n     //~| ERROR `let` expressions are not supported here\n+    //~| ERROR expected expression, found `let` statement\n+    //~| ERROR expected expression, found `let` statement\n     }\n     if (let Some(a) = opt && (let Some(b) = a)) && true {\n     //~^ ERROR `let` expressions are not supported here\n     //~| ERROR `let` expressions are not supported here\n+    //~| ERROR expected expression, found `let` statement\n+    //~| ERROR expected expression, found `let` statement\n     }\n     if (let Some(a) = opt && (true)) && true {\n     //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR expected expression, found `let` statement\n     }\n \n     if (true && (true)) && let Some(a) = opt {"}, {"sha": "cca5310ee0f3a7ee0e4b637c640211441840671d", "filename": "src/test/ui/rfc-2497-if-let-chains/disallowed-positions.stderr", "status": "modified", "additions": 506, "deletions": 212, "changes": 718, "blob_url": "https://github.com/rust-lang/rust/blob/1c3bab2fc9f9eb30c03b5019cb9503fef62e31a5/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c3bab2fc9f9eb30c03b5019cb9503fef62e31a5/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr?ref=1c3bab2fc9f9eb30c03b5019cb9503fef62e31a5", "patch": "@@ -1,113 +1,353 @@\n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:232:6\n+  --> $DIR/disallowed-positions.rs:29:9\n+   |\n+LL |     if (let 0 = 1) {}\n+   |         ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:33:11\n+   |\n+LL |     if (((let 0 = 1))) {}\n+   |           ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:37:9\n+   |\n+LL |     if (let 0 = 1) && true {}\n+   |         ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:41:17\n+   |\n+LL |     if true && (let 0 = 1) {}\n+   |                 ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:45:9\n+   |\n+LL |     if (let 0 = 1) && (let 0 = 1) {}\n+   |         ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:45:24\n+   |\n+LL |     if (let 0 = 1) && (let 0 = 1) {}\n+   |                        ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:51:35\n+   |\n+LL |     if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n+   |                                   ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:59:12\n+   |\n+LL |     while (let 0 = 1) {}\n+   |            ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:63:14\n+   |\n+LL |     while (((let 0 = 1))) {}\n+   |              ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:67:12\n+   |\n+LL |     while (let 0 = 1) && true {}\n+   |            ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:71:20\n+   |\n+LL |     while true && (let 0 = 1) {}\n+   |                    ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:75:12\n+   |\n+LL |     while (let 0 = 1) && (let 0 = 1) {}\n+   |            ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:75:27\n+   |\n+LL |     while (let 0 = 1) && (let 0 = 1) {}\n+   |                           ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:81:38\n+   |\n+LL |     while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n+   |                                      ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:106:9\n+   |\n+LL |     if &let 0 = 0 {}\n+   |         ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:111:9\n+   |\n+LL |     if !let 0 = 0 {}\n+   |         ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:114:9\n+   |\n+LL |     if *let 0 = 0 {}\n+   |         ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:118:9\n+   |\n+LL |     if -let 0 = 0 {}\n+   |         ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:128:9\n+   |\n+LL |     if (let 0 = 0)? {}\n+   |         ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:134:16\n+   |\n+LL |     if true || let 0 = 0 {}\n+   |                ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:137:17\n+   |\n+LL |     if (true || let 0 = 0) {}\n+   |                 ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:140:25\n+   |\n+LL |     if true && (true || let 0 = 0) {}\n+   |                         ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:147:12\n+   |\n+LL |     if x = let 0 = 0 {}\n+   |            ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:152:15\n+   |\n+LL |     if true..(let 0 = 0) {}\n+   |               ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:156:11\n+   |\n+LL |     if ..(let 0 = 0) {}\n+   |           ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:160:9\n+   |\n+LL |     if (let 0 = 0).. {}\n+   |         ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:191:19\n+   |\n+LL |     if let true = let true = true {}\n+   |                   ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:197:12\n+   |\n+LL |     while &let 0 = 0 {}\n+   |            ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:202:12\n+   |\n+LL |     while !let 0 = 0 {}\n+   |            ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:205:12\n+   |\n+LL |     while *let 0 = 0 {}\n+   |            ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:209:12\n+   |\n+LL |     while -let 0 = 0 {}\n+   |            ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:219:12\n+   |\n+LL |     while (let 0 = 0)? {}\n+   |            ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:225:19\n+   |\n+LL |     while true || let 0 = 0 {}\n+   |                   ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:228:20\n+   |\n+LL |     while (true || let 0 = 0) {}\n+   |                    ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:231:28\n+   |\n+LL |     while true && (true || let 0 = 0) {}\n+   |                            ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:238:15\n+   |\n+LL |     while x = let 0 = 0 {}\n+   |               ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:243:18\n+   |\n+LL |     while true..(let 0 = 0) {}\n+   |                  ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:247:14\n+   |\n+LL |     while ..(let 0 = 0) {}\n+   |              ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:251:12\n+   |\n+LL |     while (let 0 = 0).. {}\n+   |            ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:282:22\n+   |\n+LL |     while let true = let true = true {}\n+   |                      ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:298:6\n    |\n LL |     &let 0 = 0;\n    |      ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:236:6\n+  --> $DIR/disallowed-positions.rs:302:6\n    |\n LL |     !let 0 = 0;\n    |      ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:239:6\n+  --> $DIR/disallowed-positions.rs:305:6\n    |\n LL |     *let 0 = 0;\n    |      ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:243:6\n+  --> $DIR/disallowed-positions.rs:309:6\n    |\n LL |     -let 0 = 0;\n    |      ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:253:6\n+  --> $DIR/disallowed-positions.rs:319:6\n    |\n LL |     (let 0 = 0)?;\n    |      ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:259:13\n+  --> $DIR/disallowed-positions.rs:325:13\n    |\n LL |     true || let 0 = 0;\n    |             ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:262:14\n+  --> $DIR/disallowed-positions.rs:328:14\n    |\n LL |     (true || let 0 = 0);\n    |              ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:265:22\n+  --> $DIR/disallowed-positions.rs:331:22\n    |\n LL |     true && (true || let 0 = 0);\n    |                      ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:270:9\n+  --> $DIR/disallowed-positions.rs:336:9\n    |\n LL |     x = let 0 = 0;\n    |         ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:274:12\n+  --> $DIR/disallowed-positions.rs:340:12\n    |\n LL |     true..(let 0 = 0);\n    |            ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:277:8\n+  --> $DIR/disallowed-positions.rs:343:8\n    |\n LL |     ..(let 0 = 0);\n    |        ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:280:6\n+  --> $DIR/disallowed-positions.rs:346:6\n    |\n LL |     (let 0 = 0)..;\n    |      ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:284:6\n+  --> $DIR/disallowed-positions.rs:350:6\n    |\n LL |     (let Range { start: _, end: _ } = true..true || false);\n    |      ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:289:6\n+  --> $DIR/disallowed-positions.rs:355:6\n    |\n LL |     (let true = let true = true);\n    |      ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:289:17\n+  --> $DIR/disallowed-positions.rs:355:17\n    |\n LL |     (let true = let true = true);\n    |                 ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:296:25\n+  --> $DIR/disallowed-positions.rs:362:25\n    |\n LL |         let x = true && let y = 1;\n    |                         ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:302:19\n+  --> $DIR/disallowed-positions.rs:368:19\n    |\n LL |         [1, 2, 3][let _ = ()]\n    |                   ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:307:6\n+  --> $DIR/disallowed-positions.rs:373:6\n    |\n LL |     &let 0 = 0\n    |      ^^^\n \n error: expressions must be enclosed in braces to be used as const generic arguments\n-  --> $DIR/disallowed-positions.rs:337:9\n+  --> $DIR/disallowed-positions.rs:406:9\n    |\n LL |         true && let 1 = 1\n    |         ^^^^^^^^^^^^^^^^^\n@@ -118,25 +358,79 @@ LL |         { true && let 1 = 1 }\n    |         +                   +\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:384:22\n+  --> $DIR/disallowed-positions.rs:415:9\n+   |\n+LL |     if (let Some(a) = opt && true) {\n+   |         ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:420:9\n+   |\n+LL |     if (let Some(a) = opt) && true {\n+   |         ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:424:9\n+   |\n+LL |     if (let Some(a) = opt) && (let Some(b) = a) {\n+   |         ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:424:32\n+   |\n+LL |     if (let Some(a) = opt) && (let Some(b) = a) {\n+   |                                ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:433:9\n+   |\n+LL |     if (let Some(a) = opt && (let Some(b) = a)) && b == 1 {\n+   |         ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:433:31\n+   |\n+LL |     if (let Some(a) = opt && (let Some(b) = a)) && b == 1 {\n+   |                               ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:439:9\n+   |\n+LL |     if (let Some(a) = opt && (let Some(b) = a)) && true {\n+   |         ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:439:31\n+   |\n+LL |     if (let Some(a) = opt && (let Some(b) = a)) && true {\n+   |                               ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:445:9\n+   |\n+LL |     if (let Some(a) = opt && (true)) && true {\n+   |         ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:462:22\n    |\n LL |     let x = (true && let y = 1);\n    |                      ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:389:20\n+  --> $DIR/disallowed-positions.rs:467:20\n    |\n LL |         ([1, 2, 3][let _ = ()])\n    |                    ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:81:16\n+  --> $DIR/disallowed-positions.rs:95:16\n    |\n LL |     use_expr!((let 0 = 1 && 0 == 0));\n    |                ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:85:16\n+  --> $DIR/disallowed-positions.rs:99:16\n    |\n LL |     use_expr!((let 0 = 1));\n    |                ^^^\n@@ -155,957 +449,957 @@ LL |     if (let 0 = 1) {}\n    |         ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:32:11\n+  --> $DIR/disallowed-positions.rs:33:11\n    |\n LL |     if (((let 0 = 1))) {}\n    |           ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:32:11\n+  --> $DIR/disallowed-positions.rs:33:11\n    |\n LL |     if (((let 0 = 1))) {}\n    |           ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:35:9\n+  --> $DIR/disallowed-positions.rs:37:9\n    |\n LL |     if (let 0 = 1) && true {}\n    |         ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:35:9\n+  --> $DIR/disallowed-positions.rs:37:9\n    |\n LL |     if (let 0 = 1) && true {}\n    |         ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:38:17\n+  --> $DIR/disallowed-positions.rs:41:17\n    |\n LL |     if true && (let 0 = 1) {}\n    |                 ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:38:17\n+  --> $DIR/disallowed-positions.rs:41:17\n    |\n LL |     if true && (let 0 = 1) {}\n    |                 ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:41:9\n+  --> $DIR/disallowed-positions.rs:45:9\n    |\n LL |     if (let 0 = 1) && (let 0 = 1) {}\n    |         ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:41:9\n+  --> $DIR/disallowed-positions.rs:45:9\n    |\n LL |     if (let 0 = 1) && (let 0 = 1) {}\n    |         ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:41:24\n+  --> $DIR/disallowed-positions.rs:45:24\n    |\n LL |     if (let 0 = 1) && (let 0 = 1) {}\n    |                        ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:41:24\n+  --> $DIR/disallowed-positions.rs:45:24\n    |\n LL |     if (let 0 = 1) && (let 0 = 1) {}\n    |                        ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:45:35\n+  --> $DIR/disallowed-positions.rs:51:35\n    |\n LL |     if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |                                   ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:45:35\n+  --> $DIR/disallowed-positions.rs:51:35\n    |\n LL |     if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:45:48\n+  --> $DIR/disallowed-positions.rs:51:48\n    |\n LL |     if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |                                                ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:45:35\n+  --> $DIR/disallowed-positions.rs:51:35\n    |\n LL |     if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:45:61\n+  --> $DIR/disallowed-positions.rs:51:61\n    |\n LL |     if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |                                                             ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:45:35\n+  --> $DIR/disallowed-positions.rs:51:35\n    |\n LL |     if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:52:12\n+  --> $DIR/disallowed-positions.rs:59:12\n    |\n LL |     while (let 0 = 1) {}\n    |            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:52:12\n+  --> $DIR/disallowed-positions.rs:59:12\n    |\n LL |     while (let 0 = 1) {}\n    |            ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:55:14\n+  --> $DIR/disallowed-positions.rs:63:14\n    |\n LL |     while (((let 0 = 1))) {}\n    |              ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:55:14\n+  --> $DIR/disallowed-positions.rs:63:14\n    |\n LL |     while (((let 0 = 1))) {}\n    |              ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:58:12\n+  --> $DIR/disallowed-positions.rs:67:12\n    |\n LL |     while (let 0 = 1) && true {}\n    |            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:58:12\n+  --> $DIR/disallowed-positions.rs:67:12\n    |\n LL |     while (let 0 = 1) && true {}\n    |            ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:61:20\n+  --> $DIR/disallowed-positions.rs:71:20\n    |\n LL |     while true && (let 0 = 1) {}\n    |                    ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:61:20\n+  --> $DIR/disallowed-positions.rs:71:20\n    |\n LL |     while true && (let 0 = 1) {}\n    |                    ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:64:12\n+  --> $DIR/disallowed-positions.rs:75:12\n    |\n LL |     while (let 0 = 1) && (let 0 = 1) {}\n    |            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:64:12\n+  --> $DIR/disallowed-positions.rs:75:12\n    |\n LL |     while (let 0 = 1) && (let 0 = 1) {}\n    |            ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:64:27\n+  --> $DIR/disallowed-positions.rs:75:27\n    |\n LL |     while (let 0 = 1) && (let 0 = 1) {}\n    |                           ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:64:27\n+  --> $DIR/disallowed-positions.rs:75:27\n    |\n LL |     while (let 0 = 1) && (let 0 = 1) {}\n    |                           ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:68:38\n+  --> $DIR/disallowed-positions.rs:81:38\n    |\n LL |     while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |                                      ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:68:38\n+  --> $DIR/disallowed-positions.rs:81:38\n    |\n LL |     while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:68:51\n+  --> $DIR/disallowed-positions.rs:81:51\n    |\n LL |     while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |                                                   ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:68:38\n+  --> $DIR/disallowed-positions.rs:81:38\n    |\n LL |     while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:68:64\n+  --> $DIR/disallowed-positions.rs:81:64\n    |\n LL |     while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |                                                                ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:68:38\n+  --> $DIR/disallowed-positions.rs:81:38\n    |\n LL |     while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:81:16\n+  --> $DIR/disallowed-positions.rs:95:16\n    |\n LL |     use_expr!((let 0 = 1 && 0 == 0));\n    |                ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:81:16\n+  --> $DIR/disallowed-positions.rs:95:16\n    |\n LL |     use_expr!((let 0 = 1 && 0 == 0));\n    |                ^^^^^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:81:16\n+  --> $DIR/disallowed-positions.rs:95:16\n    |\n LL |     use_expr!((let 0 = 1 && 0 == 0));\n    |                ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:81:16\n+  --> $DIR/disallowed-positions.rs:95:16\n    |\n LL |     use_expr!((let 0 = 1 && 0 == 0));\n    |                ^^^^^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:85:16\n+  --> $DIR/disallowed-positions.rs:99:16\n    |\n LL |     use_expr!((let 0 = 1));\n    |                ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:85:16\n+  --> $DIR/disallowed-positions.rs:99:16\n    |\n LL |     use_expr!((let 0 = 1));\n    |                ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:85:16\n+  --> $DIR/disallowed-positions.rs:99:16\n    |\n LL |     use_expr!((let 0 = 1));\n    |                ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:85:16\n+  --> $DIR/disallowed-positions.rs:99:16\n    |\n LL |     use_expr!((let 0 = 1));\n    |                ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:92:9\n+  --> $DIR/disallowed-positions.rs:106:9\n    |\n LL |     if &let 0 = 0 {}\n    |         ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:95:9\n+  --> $DIR/disallowed-positions.rs:111:9\n    |\n LL |     if !let 0 = 0 {}\n    |         ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:96:9\n+  --> $DIR/disallowed-positions.rs:114:9\n    |\n LL |     if *let 0 = 0 {}\n    |         ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:98:9\n+  --> $DIR/disallowed-positions.rs:118:9\n    |\n LL |     if -let 0 = 0 {}\n    |         ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:106:9\n+  --> $DIR/disallowed-positions.rs:128:9\n    |\n LL |     if (let 0 = 0)? {}\n    |         ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:106:9\n+  --> $DIR/disallowed-positions.rs:128:9\n    |\n LL |     if (let 0 = 0)? {}\n    |         ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:110:16\n+  --> $DIR/disallowed-positions.rs:134:16\n    |\n LL |     if true || let 0 = 0 {}\n    |                ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `||` operators are not supported in let chain expressions\n-  --> $DIR/disallowed-positions.rs:110:13\n+  --> $DIR/disallowed-positions.rs:134:13\n    |\n LL |     if true || let 0 = 0 {}\n    |             ^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:111:17\n+  --> $DIR/disallowed-positions.rs:137:17\n    |\n LL |     if (true || let 0 = 0) {}\n    |                 ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `||` operators are not supported in let chain expressions\n-  --> $DIR/disallowed-positions.rs:111:14\n+  --> $DIR/disallowed-positions.rs:137:14\n    |\n LL |     if (true || let 0 = 0) {}\n    |              ^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:112:25\n+  --> $DIR/disallowed-positions.rs:140:25\n    |\n LL |     if true && (true || let 0 = 0) {}\n    |                         ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `||` operators are not supported in let chain expressions\n-  --> $DIR/disallowed-positions.rs:112:22\n+  --> $DIR/disallowed-positions.rs:140:22\n    |\n LL |     if true && (true || let 0 = 0) {}\n    |                      ^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:113:25\n+  --> $DIR/disallowed-positions.rs:143:25\n    |\n LL |     if true || (true && let 0 = 0) {}\n    |                         ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:113:17\n+  --> $DIR/disallowed-positions.rs:143:17\n    |\n LL |     if true || (true && let 0 = 0) {}\n    |                 ^^^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:116:12\n+  --> $DIR/disallowed-positions.rs:147:12\n    |\n LL |     if x = let 0 = 0 {}\n    |            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:119:15\n+  --> $DIR/disallowed-positions.rs:152:15\n    |\n LL |     if true..(let 0 = 0) {}\n    |               ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:119:15\n+  --> $DIR/disallowed-positions.rs:152:15\n    |\n LL |     if true..(let 0 = 0) {}\n    |               ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:121:11\n+  --> $DIR/disallowed-positions.rs:156:11\n    |\n LL |     if ..(let 0 = 0) {}\n    |           ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:121:11\n+  --> $DIR/disallowed-positions.rs:156:11\n    |\n LL |     if ..(let 0 = 0) {}\n    |           ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:123:9\n+  --> $DIR/disallowed-positions.rs:160:9\n    |\n LL |     if (let 0 = 0).. {}\n    |         ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:123:9\n+  --> $DIR/disallowed-positions.rs:160:9\n    |\n LL |     if (let 0 = 0).. {}\n    |         ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:127:8\n+  --> $DIR/disallowed-positions.rs:166:8\n    |\n LL |     if let Range { start: _, end: _ } = true..true && false {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:131:8\n+  --> $DIR/disallowed-positions.rs:170:8\n    |\n LL |     if let Range { start: _, end: _ } = true..true || false {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:138:8\n+  --> $DIR/disallowed-positions.rs:177:8\n    |\n LL |     if let Range { start: F, end } = F..|| true {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:146:8\n+  --> $DIR/disallowed-positions.rs:185:8\n    |\n LL |     if let Range { start: true, end } = t..&&false {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:152:19\n+  --> $DIR/disallowed-positions.rs:191:19\n    |\n LL |     if let true = let true = true {}\n    |                   ^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:157:12\n+  --> $DIR/disallowed-positions.rs:197:12\n    |\n LL |     while &let 0 = 0 {}\n    |            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:160:12\n+  --> $DIR/disallowed-positions.rs:202:12\n    |\n LL |     while !let 0 = 0 {}\n    |            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:161:12\n+  --> $DIR/disallowed-positions.rs:205:12\n    |\n LL |     while *let 0 = 0 {}\n    |            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:163:12\n+  --> $DIR/disallowed-positions.rs:209:12\n    |\n LL |     while -let 0 = 0 {}\n    |            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:171:12\n+  --> $DIR/disallowed-positions.rs:219:12\n    |\n LL |     while (let 0 = 0)? {}\n    |            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:171:12\n+  --> $DIR/disallowed-positions.rs:219:12\n    |\n LL |     while (let 0 = 0)? {}\n    |            ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:175:19\n+  --> $DIR/disallowed-positions.rs:225:19\n    |\n LL |     while true || let 0 = 0 {}\n    |                   ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `||` operators are not supported in let chain expressions\n-  --> $DIR/disallowed-positions.rs:175:16\n+  --> $DIR/disallowed-positions.rs:225:16\n    |\n LL |     while true || let 0 = 0 {}\n    |                ^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:176:20\n+  --> $DIR/disallowed-positions.rs:228:20\n    |\n LL |     while (true || let 0 = 0) {}\n    |                    ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `||` operators are not supported in let chain expressions\n-  --> $DIR/disallowed-positions.rs:176:17\n+  --> $DIR/disallowed-positions.rs:228:17\n    |\n LL |     while (true || let 0 = 0) {}\n    |                 ^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:177:28\n+  --> $DIR/disallowed-positions.rs:231:28\n    |\n LL |     while true && (true || let 0 = 0) {}\n    |                            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `||` operators are not supported in let chain expressions\n-  --> $DIR/disallowed-positions.rs:177:25\n+  --> $DIR/disallowed-positions.rs:231:25\n    |\n LL |     while true && (true || let 0 = 0) {}\n    |                         ^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:178:28\n+  --> $DIR/disallowed-positions.rs:234:28\n    |\n LL |     while true || (true && let 0 = 0) {}\n    |                            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:178:20\n+  --> $DIR/disallowed-positions.rs:234:20\n    |\n LL |     while true || (true && let 0 = 0) {}\n    |                    ^^^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:181:15\n+  --> $DIR/disallowed-positions.rs:238:15\n    |\n LL |     while x = let 0 = 0 {}\n    |               ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:184:18\n+  --> $DIR/disallowed-positions.rs:243:18\n    |\n LL |     while true..(let 0 = 0) {}\n    |                  ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:184:18\n+  --> $DIR/disallowed-positions.rs:243:18\n    |\n LL |     while true..(let 0 = 0) {}\n    |                  ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:186:14\n+  --> $DIR/disallowed-positions.rs:247:14\n    |\n LL |     while ..(let 0 = 0) {}\n    |              ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:186:14\n+  --> $DIR/disallowed-positions.rs:247:14\n    |\n LL |     while ..(let 0 = 0) {}\n    |              ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:188:12\n+  --> $DIR/disallowed-positions.rs:251:12\n    |\n LL |     while (let 0 = 0).. {}\n    |            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:188:12\n+  --> $DIR/disallowed-positions.rs:251:12\n    |\n LL |     while (let 0 = 0).. {}\n    |            ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:192:11\n+  --> $DIR/disallowed-positions.rs:257:11\n    |\n LL |     while let Range { start: _, end: _ } = true..true && false {}\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:196:11\n+  --> $DIR/disallowed-positions.rs:261:11\n    |\n LL |     while let Range { start: _, end: _ } = true..true || false {}\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:203:11\n+  --> $DIR/disallowed-positions.rs:268:11\n    |\n LL |     while let Range { start: F, end } = F..|| true {}\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:211:11\n+  --> $DIR/disallowed-positions.rs:276:11\n    |\n LL |     while let Range { start: true, end } = t..&&false {}\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:217:22\n+  --> $DIR/disallowed-positions.rs:282:22\n    |\n LL |     while let true = let true = true {}\n    |                      ^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:232:6\n+  --> $DIR/disallowed-positions.rs:298:6\n    |\n LL |     &let 0 = 0;\n    |      ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:236:6\n+  --> $DIR/disallowed-positions.rs:302:6\n    |\n LL |     !let 0 = 0;\n    |      ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:239:6\n+  --> $DIR/disallowed-positions.rs:305:6\n    |\n LL |     *let 0 = 0;\n    |      ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:243:6\n+  --> $DIR/disallowed-positions.rs:309:6\n    |\n LL |     -let 0 = 0;\n    |      ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:253:6\n+  --> $DIR/disallowed-positions.rs:319:6\n    |\n LL |     (let 0 = 0)?;\n    |      ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:253:6\n+  --> $DIR/disallowed-positions.rs:319:6\n    |\n LL |     (let 0 = 0)?;\n    |      ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:259:13\n+  --> $DIR/disallowed-positions.rs:325:13\n    |\n LL |     true || let 0 = 0;\n    |             ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `||` operators are not supported in let chain expressions\n-  --> $DIR/disallowed-positions.rs:259:10\n+  --> $DIR/disallowed-positions.rs:325:10\n    |\n LL |     true || let 0 = 0;\n    |          ^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:262:14\n+  --> $DIR/disallowed-positions.rs:328:14\n    |\n LL |     (true || let 0 = 0);\n    |              ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `||` operators are not supported in let chain expressions\n-  --> $DIR/disallowed-positions.rs:262:11\n+  --> $DIR/disallowed-positions.rs:328:11\n    |\n LL |     (true || let 0 = 0);\n    |           ^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:265:22\n+  --> $DIR/disallowed-positions.rs:331:22\n    |\n LL |     true && (true || let 0 = 0);\n    |                      ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `||` operators are not supported in let chain expressions\n-  --> $DIR/disallowed-positions.rs:265:19\n+  --> $DIR/disallowed-positions.rs:331:19\n    |\n LL |     true && (true || let 0 = 0);\n    |                   ^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:270:9\n+  --> $DIR/disallowed-positions.rs:336:9\n    |\n LL |     x = let 0 = 0;\n    |         ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:274:12\n+  --> $DIR/disallowed-positions.rs:340:12\n    |\n LL |     true..(let 0 = 0);\n    |            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:274:12\n+  --> $DIR/disallowed-positions.rs:340:12\n    |\n LL |     true..(let 0 = 0);\n    |            ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:277:8\n+  --> $DIR/disallowed-positions.rs:343:8\n    |\n LL |     ..(let 0 = 0);\n    |        ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:277:8\n+  --> $DIR/disallowed-positions.rs:343:8\n    |\n LL |     ..(let 0 = 0);\n    |        ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:280:6\n+  --> $DIR/disallowed-positions.rs:346:6\n    |\n LL |     (let 0 = 0)..;\n    |      ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:280:6\n+  --> $DIR/disallowed-positions.rs:346:6\n    |\n LL |     (let 0 = 0)..;\n    |      ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:284:6\n+  --> $DIR/disallowed-positions.rs:350:6\n    |\n LL |     (let Range { start: _, end: _ } = true..true || false);\n    |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:289:6\n+  --> $DIR/disallowed-positions.rs:355:6\n    |\n LL |     (let true = let true = true);\n    |      ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:289:6\n+  --> $DIR/disallowed-positions.rs:355:6\n    |\n LL |     (let true = let true = true);\n    |      ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:307:6\n+  --> $DIR/disallowed-positions.rs:373:6\n    |\n LL |     &let 0 = 0\n    |      ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:319:17\n+  --> $DIR/disallowed-positions.rs:385:17\n    |\n LL |         true && let 1 = 1\n    |                 ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:323:17\n+  --> $DIR/disallowed-positions.rs:390:17\n    |\n LL |         true && let 1 = 1\n    |                 ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:327:17\n+  --> $DIR/disallowed-positions.rs:395:17\n    |\n LL |         true && let 1 = 1\n    |                 ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:337:17\n+  --> $DIR/disallowed-positions.rs:406:17\n    |\n LL |         true && let 1 = 1\n    |                 ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:346:9\n+  --> $DIR/disallowed-positions.rs:415:9\n    |\n LL |     if (let Some(a) = opt && true) {\n    |         ^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:346:9\n+  --> $DIR/disallowed-positions.rs:415:9\n    |\n LL |     if (let Some(a) = opt && true) {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:350:9\n+  --> $DIR/disallowed-positions.rs:420:9\n    |\n LL |     if (let Some(a) = opt) && true {\n    |         ^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:350:9\n+  --> $DIR/disallowed-positions.rs:420:9\n    |\n LL |     if (let Some(a) = opt) && true {\n    |         ^^^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:353:9\n+  --> $DIR/disallowed-positions.rs:424:9\n    |\n LL |     if (let Some(a) = opt) && (let Some(b) = a) {\n    |         ^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:353:9\n+  --> $DIR/disallowed-positions.rs:424:9\n    |\n LL |     if (let Some(a) = opt) && (let Some(b) = a) {\n    |         ^^^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:353:32\n+  --> $DIR/disallowed-positions.rs:424:32\n    |\n LL |     if (let Some(a) = opt) && (let Some(b) = a) {\n    |                                ^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:353:32\n+  --> $DIR/disallowed-positions.rs:424:32\n    |\n LL |     if (let Some(a) = opt) && (let Some(b) = a) {\n    |                                ^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:360:9\n+  --> $DIR/disallowed-positions.rs:433:9\n    |\n LL |     if (let Some(a) = opt && (let Some(b) = a)) && b == 1 {\n    |         ^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:360:9\n+  --> $DIR/disallowed-positions.rs:433:9\n    |\n LL |     if (let Some(a) = opt && (let Some(b) = a)) && b == 1 {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:360:31\n+  --> $DIR/disallowed-positions.rs:433:31\n    |\n LL |     if (let Some(a) = opt && (let Some(b) = a)) && b == 1 {\n    |                               ^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:360:31\n+  --> $DIR/disallowed-positions.rs:433:31\n    |\n LL |     if (let Some(a) = opt && (let Some(b) = a)) && b == 1 {\n    |                               ^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:364:9\n+  --> $DIR/disallowed-positions.rs:439:9\n    |\n LL |     if (let Some(a) = opt && (let Some(b) = a)) && true {\n    |         ^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:364:9\n+  --> $DIR/disallowed-positions.rs:439:9\n    |\n LL |     if (let Some(a) = opt && (let Some(b) = a)) && true {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:364:31\n+  --> $DIR/disallowed-positions.rs:439:31\n    |\n LL |     if (let Some(a) = opt && (let Some(b) = a)) && true {\n    |                               ^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:364:31\n+  --> $DIR/disallowed-positions.rs:439:31\n    |\n LL |     if (let Some(a) = opt && (let Some(b) = a)) && true {\n    |                               ^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:368:9\n+  --> $DIR/disallowed-positions.rs:445:9\n    |\n LL |     if (let Some(a) = opt && (true)) && true {\n    |         ^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:368:9\n+  --> $DIR/disallowed-positions.rs:445:9\n    |\n LL |     if (let Some(a) = opt && (true)) && true {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:92:8\n+  --> $DIR/disallowed-positions.rs:106:8\n    |\n LL |     if &let 0 = 0 {}\n    |        ^^^^^^^^^^ expected `bool`, found `&bool`\n@@ -1117,27 +1411,27 @@ LL +     if let 0 = 0 {}\n    |\n \n error[E0614]: type `bool` cannot be dereferenced\n-  --> $DIR/disallowed-positions.rs:96:8\n+  --> $DIR/disallowed-positions.rs:114:8\n    |\n LL |     if *let 0 = 0 {}\n    |        ^^^^^^^^^^\n \n error[E0600]: cannot apply unary operator `-` to type `bool`\n-  --> $DIR/disallowed-positions.rs:98:8\n+  --> $DIR/disallowed-positions.rs:118:8\n    |\n LL |     if -let 0 = 0 {}\n    |        ^^^^^^^^^^ cannot apply unary operator `-`\n \n error[E0277]: the `?` operator can only be applied to values that implement `Try`\n-  --> $DIR/disallowed-positions.rs:106:8\n+  --> $DIR/disallowed-positions.rs:128:8\n    |\n LL |     if (let 0 = 0)? {}\n    |        ^^^^^^^^^^^^ the `?` operator cannot be applied to type `bool`\n    |\n    = help: the trait `Try` is not implemented for `bool`\n \n error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `FromResidual`)\n-  --> $DIR/disallowed-positions.rs:106:19\n+  --> $DIR/disallowed-positions.rs:128:19\n    |\n LL | / fn nested_within_if_expr() {\n LL | |     if &let 0 = 0 {}\n@@ -1154,7 +1448,7 @@ LL | | }\n    = help: the trait `FromResidual<_>` is not implemented for `()`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:116:8\n+  --> $DIR/disallowed-positions.rs:147:8\n    |\n LL |     if x = let 0 = 0 {}\n    |        ^^^^^^^^^^^^^ expected `bool`, found `()`\n@@ -1165,7 +1459,7 @@ LL |     if x == let 0 = 0 {}\n    |          ~~\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:119:8\n+  --> $DIR/disallowed-positions.rs:152:8\n    |\n LL |     if true..(let 0 = 0) {}\n    |        ^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n@@ -1174,7 +1468,7 @@ LL |     if true..(let 0 = 0) {}\n             found struct `std::ops::Range<bool>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:121:8\n+  --> $DIR/disallowed-positions.rs:156:8\n    |\n LL |     if ..(let 0 = 0) {}\n    |        ^^^^^^^^^^^^^ expected `bool`, found struct `RangeTo`\n@@ -1183,7 +1477,7 @@ LL |     if ..(let 0 = 0) {}\n             found struct `RangeTo<bool>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:123:8\n+  --> $DIR/disallowed-positions.rs:160:8\n    |\n LL |     if (let 0 = 0).. {}\n    |        ^^^^^^^^^^^^^ expected `bool`, found struct `RangeFrom`\n@@ -1192,7 +1486,7 @@ LL |     if (let 0 = 0).. {}\n             found struct `RangeFrom<bool>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:127:12\n+  --> $DIR/disallowed-positions.rs:166:12\n    |\n LL |     if let Range { start: _, end: _ } = true..true && false {}\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^   ---- this expression has type `bool`\n@@ -1203,7 +1497,7 @@ LL |     if let Range { start: _, end: _ } = true..true && false {}\n             found struct `std::ops::Range<_>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:127:8\n+  --> $DIR/disallowed-positions.rs:166:8\n    |\n LL |     if let Range { start: _, end: _ } = true..true && false {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n@@ -1212,7 +1506,7 @@ LL |     if let Range { start: _, end: _ } = true..true && false {}\n             found struct `std::ops::Range<bool>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:131:12\n+  --> $DIR/disallowed-positions.rs:170:12\n    |\n LL |     if let Range { start: _, end: _ } = true..true || false {}\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^   ---- this expression has type `bool`\n@@ -1223,7 +1517,7 @@ LL |     if let Range { start: _, end: _ } = true..true || false {}\n             found struct `std::ops::Range<_>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:131:8\n+  --> $DIR/disallowed-positions.rs:170:8\n    |\n LL |     if let Range { start: _, end: _ } = true..true || false {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n@@ -1232,7 +1526,7 @@ LL |     if let Range { start: _, end: _ } = true..true || false {}\n             found struct `std::ops::Range<bool>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:138:12\n+  --> $DIR/disallowed-positions.rs:177:12\n    |\n LL |     if let Range { start: F, end } = F..|| true {}\n    |            ^^^^^^^^^^^^^^^^^^^^^^^   - this expression has type `fn() -> bool`\n@@ -1243,20 +1537,20 @@ LL |     if let Range { start: F, end } = F..|| true {}\n                   found struct `std::ops::Range<_>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:138:41\n+  --> $DIR/disallowed-positions.rs:177:41\n    |\n LL |     if let Range { start: F, end } = F..|| true {}\n    |                                         ^^^^^^^ expected `bool`, found closure\n    |\n    = note: expected type `bool`\n-           found closure `[closure@$DIR/disallowed-positions.rs:138:41: 138:43]`\n+           found closure `[closure@$DIR/disallowed-positions.rs:177:41: 177:43]`\n help: use parentheses to call this closure\n    |\n LL |     if let Range { start: F, end } = F..(|| true)() {}\n    |                                         +       +++\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:138:8\n+  --> $DIR/disallowed-positions.rs:177:8\n    |\n LL |     if let Range { start: F, end } = F..|| true {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n@@ -1265,7 +1559,7 @@ LL |     if let Range { start: F, end } = F..|| true {}\n             found struct `std::ops::Range<bool>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:146:12\n+  --> $DIR/disallowed-positions.rs:185:12\n    |\n LL |     if let Range { start: true, end } = t..&&false {}\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^   - this expression has type `&&bool`\n@@ -1276,7 +1570,7 @@ LL |     if let Range { start: true, end } = t..&&false {}\n             found struct `std::ops::Range<_>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:146:44\n+  --> $DIR/disallowed-positions.rs:185:44\n    |\n LL |     if let Range { start: true, end } = t..&&false {}\n    |                                            ^^^^^^^ expected `bool`, found `&&bool`\n@@ -1288,7 +1582,7 @@ LL +     if let Range { start: true, end } = t..false {}\n    |\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:146:8\n+  --> $DIR/disallowed-positions.rs:185:8\n    |\n LL |     if let Range { start: true, end } = t..&&false {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n@@ -1297,15 +1591,15 @@ LL |     if let Range { start: true, end } = t..&&false {}\n             found struct `std::ops::Range<bool>`\n \n error[E0277]: the `?` operator can only be applied to values that implement `Try`\n-  --> $DIR/disallowed-positions.rs:102:20\n+  --> $DIR/disallowed-positions.rs:124:20\n    |\n LL |         if let 0 = 0? {}\n    |                    ^^ the `?` operator cannot be applied to type `{integer}`\n    |\n    = help: the trait `Try` is not implemented for `{integer}`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:157:11\n+  --> $DIR/disallowed-positions.rs:197:11\n    |\n LL |     while &let 0 = 0 {}\n    |           ^^^^^^^^^^ expected `bool`, found `&bool`\n@@ -1317,27 +1611,27 @@ LL +     while let 0 = 0 {}\n    |\n \n error[E0614]: type `bool` cannot be dereferenced\n-  --> $DIR/disallowed-positions.rs:161:11\n+  --> $DIR/disallowed-positions.rs:205:11\n    |\n LL |     while *let 0 = 0 {}\n    |           ^^^^^^^^^^\n \n error[E0600]: cannot apply unary operator `-` to type `bool`\n-  --> $DIR/disallowed-positions.rs:163:11\n+  --> $DIR/disallowed-positions.rs:209:11\n    |\n LL |     while -let 0 = 0 {}\n    |           ^^^^^^^^^^ cannot apply unary operator `-`\n \n error[E0277]: the `?` operator can only be applied to values that implement `Try`\n-  --> $DIR/disallowed-positions.rs:171:11\n+  --> $DIR/disallowed-positions.rs:219:11\n    |\n LL |     while (let 0 = 0)? {}\n    |           ^^^^^^^^^^^^ the `?` operator cannot be applied to type `bool`\n    |\n    = help: the trait `Try` is not implemented for `bool`\n \n error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `FromResidual`)\n-  --> $DIR/disallowed-positions.rs:171:22\n+  --> $DIR/disallowed-positions.rs:219:22\n    |\n LL | / fn nested_within_while_expr() {\n LL | |     while &let 0 = 0 {}\n@@ -1354,7 +1648,7 @@ LL | | }\n    = help: the trait `FromResidual<_>` is not implemented for `()`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:181:11\n+  --> $DIR/disallowed-positions.rs:238:11\n    |\n LL |     while x = let 0 = 0 {}\n    |           ^^^^^^^^^^^^^ expected `bool`, found `()`\n@@ -1365,7 +1659,7 @@ LL |     while x == let 0 = 0 {}\n    |             ~~\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:184:11\n+  --> $DIR/disallowed-positions.rs:243:11\n    |\n LL |     while true..(let 0 = 0) {}\n    |           ^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n@@ -1374,7 +1668,7 @@ LL |     while true..(let 0 = 0) {}\n             found struct `std::ops::Range<bool>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:186:11\n+  --> $DIR/disallowed-positions.rs:247:11\n    |\n LL |     while ..(let 0 = 0) {}\n    |           ^^^^^^^^^^^^^ expected `bool`, found struct `RangeTo`\n@@ -1383,7 +1677,7 @@ LL |     while ..(let 0 = 0) {}\n             found struct `RangeTo<bool>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:188:11\n+  --> $DIR/disallowed-positions.rs:251:11\n    |\n LL |     while (let 0 = 0).. {}\n    |           ^^^^^^^^^^^^^ expected `bool`, found struct `RangeFrom`\n@@ -1392,7 +1686,7 @@ LL |     while (let 0 = 0).. {}\n             found struct `RangeFrom<bool>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:192:15\n+  --> $DIR/disallowed-positions.rs:257:15\n    |\n LL |     while let Range { start: _, end: _ } = true..true && false {}\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^   ---- this expression has type `bool`\n@@ -1403,7 +1697,7 @@ LL |     while let Range { start: _, end: _ } = true..true && false {}\n             found struct `std::ops::Range<_>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:192:11\n+  --> $DIR/disallowed-positions.rs:257:11\n    |\n LL |     while let Range { start: _, end: _ } = true..true && false {}\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n@@ -1412,7 +1706,7 @@ LL |     while let Range { start: _, end: _ } = true..true && false {}\n             found struct `std::ops::Range<bool>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:196:15\n+  --> $DIR/disallowed-positions.rs:261:15\n    |\n LL |     while let Range { start: _, end: _ } = true..true || false {}\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^   ---- this expression has type `bool`\n@@ -1423,7 +1717,7 @@ LL |     while let Range { start: _, end: _ } = true..true || false {}\n             found struct `std::ops::Range<_>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:196:11\n+  --> $DIR/disallowed-positions.rs:261:11\n    |\n LL |     while let Range { start: _, end: _ } = true..true || false {}\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n@@ -1432,7 +1726,7 @@ LL |     while let Range { start: _, end: _ } = true..true || false {}\n             found struct `std::ops::Range<bool>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:203:15\n+  --> $DIR/disallowed-positions.rs:268:15\n    |\n LL |     while let Range { start: F, end } = F..|| true {}\n    |               ^^^^^^^^^^^^^^^^^^^^^^^   - this expression has type `fn() -> bool`\n@@ -1443,20 +1737,20 @@ LL |     while let Range { start: F, end } = F..|| true {}\n                   found struct `std::ops::Range<_>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:203:44\n+  --> $DIR/disallowed-positions.rs:268:44\n    |\n LL |     while let Range { start: F, end } = F..|| true {}\n    |                                            ^^^^^^^ expected `bool`, found closure\n    |\n    = note: expected type `bool`\n-           found closure `[closure@$DIR/disallowed-positions.rs:203:44: 203:46]`\n+           found closure `[closure@$DIR/disallowed-positions.rs:268:44: 268:46]`\n help: use parentheses to call this closure\n    |\n LL |     while let Range { start: F, end } = F..(|| true)() {}\n    |                                            +       +++\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:203:11\n+  --> $DIR/disallowed-positions.rs:268:11\n    |\n LL |     while let Range { start: F, end } = F..|| true {}\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n@@ -1465,7 +1759,7 @@ LL |     while let Range { start: F, end } = F..|| true {}\n             found struct `std::ops::Range<bool>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:211:15\n+  --> $DIR/disallowed-positions.rs:276:15\n    |\n LL |     while let Range { start: true, end } = t..&&false {}\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^   - this expression has type `&&bool`\n@@ -1476,7 +1770,7 @@ LL |     while let Range { start: true, end } = t..&&false {}\n             found struct `std::ops::Range<_>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:211:47\n+  --> $DIR/disallowed-positions.rs:276:47\n    |\n LL |     while let Range { start: true, end } = t..&&false {}\n    |                                               ^^^^^^^ expected `bool`, found `&&bool`\n@@ -1488,7 +1782,7 @@ LL +     while let Range { start: true, end } = t..false {}\n    |\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:211:11\n+  --> $DIR/disallowed-positions.rs:276:11\n    |\n LL |     while let Range { start: true, end } = t..&&false {}\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n@@ -1497,35 +1791,35 @@ LL |     while let Range { start: true, end } = t..&&false {}\n             found struct `std::ops::Range<bool>`\n \n error[E0277]: the `?` operator can only be applied to values that implement `Try`\n-  --> $DIR/disallowed-positions.rs:167:23\n+  --> $DIR/disallowed-positions.rs:215:23\n    |\n LL |         while let 0 = 0? {}\n    |                       ^^ the `?` operator cannot be applied to type `{integer}`\n    |\n    = help: the trait `Try` is not implemented for `{integer}`\n \n error[E0614]: type `bool` cannot be dereferenced\n-  --> $DIR/disallowed-positions.rs:239:5\n+  --> $DIR/disallowed-positions.rs:305:5\n    |\n LL |     *let 0 = 0;\n    |     ^^^^^^^^^^\n \n error[E0600]: cannot apply unary operator `-` to type `bool`\n-  --> $DIR/disallowed-positions.rs:243:5\n+  --> $DIR/disallowed-positions.rs:309:5\n    |\n LL |     -let 0 = 0;\n    |     ^^^^^^^^^^ cannot apply unary operator `-`\n \n error[E0277]: the `?` operator can only be applied to values that implement `Try`\n-  --> $DIR/disallowed-positions.rs:253:5\n+  --> $DIR/disallowed-positions.rs:319:5\n    |\n LL |     (let 0 = 0)?;\n    |     ^^^^^^^^^^^^ the `?` operator cannot be applied to type `bool`\n    |\n    = help: the trait `Try` is not implemented for `bool`\n \n error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `FromResidual`)\n-  --> $DIR/disallowed-positions.rs:253:16\n+  --> $DIR/disallowed-positions.rs:319:16\n    |\n LL | / fn outside_if_and_while_expr() {\n LL | |     &let 0 = 0;\n@@ -1542,7 +1836,7 @@ LL | | }\n    = help: the trait `FromResidual<_>` is not implemented for `()`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:284:10\n+  --> $DIR/disallowed-positions.rs:350:10\n    |\n LL |     (let Range { start: _, end: _ } = true..true || false);\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^   ---- this expression has type `bool`\n@@ -1553,7 +1847,7 @@ LL |     (let Range { start: _, end: _ } = true..true || false);\n             found struct `std::ops::Range<_>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:307:5\n+  --> $DIR/disallowed-positions.rs:373:5\n    |\n LL | fn outside_if_and_while_expr() {\n    |                                - help: try adding a return type: `-> &bool`\n@@ -1562,14 +1856,14 @@ LL |     &let 0 = 0\n    |     ^^^^^^^^^^ expected `()`, found `&bool`\n \n error[E0277]: the `?` operator can only be applied to values that implement `Try`\n-  --> $DIR/disallowed-positions.rs:249:17\n+  --> $DIR/disallowed-positions.rs:315:17\n    |\n LL |         let 0 = 0?;\n    |                 ^^ the `?` operator cannot be applied to type `{integer}`\n    |\n    = help: the trait `Try` is not implemented for `{integer}`\n \n-error: aborting due to 156 previous errors\n+error: aborting due to 205 previous errors\n \n Some errors have detailed explanations: E0277, E0308, E0600, E0614.\n For more information about an error, try `rustc --explain E0277`."}, {"sha": "2b407ef510c5211a90234a1f5e553d846ef7a2e0", "filename": "src/test/ui/rfc-2497-if-let-chains/feature-gate.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1c3bab2fc9f9eb30c03b5019cb9503fef62e31a5/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Ffeature-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c3bab2fc9f9eb30c03b5019cb9503fef62e31a5/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Ffeature-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Ffeature-gate.rs?ref=1c3bab2fc9f9eb30c03b5019cb9503fef62e31a5", "patch": "@@ -19,6 +19,11 @@ fn _if() {\n \n     if let Range { start: _, end: _ } = (true..true) && false {}\n     //~^ ERROR `let` expressions in this position are unstable [E0658]\n+\n+    if let 1 = 1 && let true = { true } && false {\n+    //~^ ERROR `let` expressions in this position are unstable [E0658]\n+    //~| ERROR `let` expressions in this position are unstable [E0658]\n+    }\n }\n \n fn _while() {"}, {"sha": "feea1c254d8da844f8c4fee012e93c21e2c5781f", "filename": "src/test/ui/rfc-2497-if-let-chains/feature-gate.stderr", "status": "modified", "additions": 27, "deletions": 9, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/1c3bab2fc9f9eb30c03b5019cb9503fef62e31a5/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Ffeature-gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c3bab2fc9f9eb30c03b5019cb9503fef62e31a5/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Ffeature-gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Ffeature-gate.stderr?ref=1c3bab2fc9f9eb30c03b5019cb9503fef62e31a5", "patch": "@@ -1,17 +1,17 @@\n error: expected expression, found `let` statement\n-  --> $DIR/feature-gate.rs:50:20\n+  --> $DIR/feature-gate.rs:55:20\n    |\n LL |     #[cfg(FALSE)] (let 0 = 1);\n    |                    ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/feature-gate.rs:40:17\n+  --> $DIR/feature-gate.rs:45:17\n    |\n LL |     noop_expr!((let 0 = 1));\n    |                 ^^^\n \n error: no rules expected the token `let`\n-  --> $DIR/feature-gate.rs:53:15\n+  --> $DIR/feature-gate.rs:58:15\n    |\n LL |     macro_rules! use_expr {\n    |     --------------------- when calling this macro\n@@ -47,7 +47,25 @@ LL |     if let Range { start: _, end: _ } = (true..true) && false {}\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:27:19\n+  --> $DIR/feature-gate.rs:23:8\n+   |\n+LL |     if let 1 = 1 && let true = { true } && false {\n+   |        ^^^^^^^^^\n+   |\n+   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n+   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n+\n+error[E0658]: `let` expressions in this position are unstable\n+  --> $DIR/feature-gate.rs:23:21\n+   |\n+LL |     if let 1 = 1 && let true = { true } && false {\n+   |                     ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n+   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n+\n+error[E0658]: `let` expressions in this position are unstable\n+  --> $DIR/feature-gate.rs:32:19\n    |\n LL |     while true && let 0 = 1 {}\n    |                   ^^^^^^^^^\n@@ -56,7 +74,7 @@ LL |     while true && let 0 = 1 {}\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:30:11\n+  --> $DIR/feature-gate.rs:35:11\n    |\n LL |     while let 0 = 1 && true {}\n    |           ^^^^^^^^^\n@@ -65,7 +83,7 @@ LL |     while let 0 = 1 && true {}\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:33:11\n+  --> $DIR/feature-gate.rs:38:11\n    |\n LL |     while let Range { start: _, end: _ } = (true..true) && false {}\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -74,7 +92,7 @@ LL |     while let Range { start: _, end: _ } = (true..true) && false {}\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:50:20\n+  --> $DIR/feature-gate.rs:55:20\n    |\n LL |     #[cfg(FALSE)] (let 0 = 1);\n    |                    ^^^^^^^^^\n@@ -83,14 +101,14 @@ LL |     #[cfg(FALSE)] (let 0 = 1);\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:40:17\n+  --> $DIR/feature-gate.rs:45:17\n    |\n LL |     noop_expr!((let 0 = 1));\n    |                 ^^^^^^^^^\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n-error: aborting due to 11 previous errors\n+error: aborting due to 13 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "a942d1f4cafbfaccc17095f143907126aa0e0bb0", "filename": "src/test/ui/rfc-2497-if-let-chains/invalid-let-in-a-valid-let-context.rs", "status": "modified", "additions": 31, "deletions": 3, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/1c3bab2fc9f9eb30c03b5019cb9503fef62e31a5/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Finvalid-let-in-a-valid-let-context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c3bab2fc9f9eb30c03b5019cb9503fef62e31a5/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Finvalid-let-in-a-valid-let-context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Finvalid-let-in-a-valid-let-context.rs?ref=1c3bab2fc9f9eb30c03b5019cb9503fef62e31a5", "patch": "@@ -1,17 +1,45 @@\n-// check-pass\n-// known-bug\n-\n #![feature(let_chains)]\n \n fn main() {\n     let _opt = Some(1i32);\n \n+    #[cfg(FALSE)]\n+    {\n+        let _ = &&let Some(x) = Some(42);\n+        //~^ ERROR expected expression, found `let` statement\n+    }\n+    #[cfg(FALSE)]\n+    {\n+        if let Some(elem) = _opt && [1, 2, 3][let _ = &&let Some(x) = Some(42)] = 1 {\n+        //~^ ERROR expected expression, found `let` statement\n+        //~| ERROR expected expression, found `let` statement\n+            true\n+        }\n+    }\n+\n     #[cfg(FALSE)]\n     {\n         if let Some(elem) = _opt && {\n             [1, 2, 3][let _ = ()];\n+            //~^ ERROR expected expression, found `let` statement\n             true\n         } {\n         }\n     }\n+\n+    #[cfg(FALSE)]\n+    {\n+        if let Some(elem) = _opt && [1, 2, 3][let _ = ()] = 1 {\n+        //~^ ERROR expected expression, found `let` statement\n+            true\n+        }\n+    }\n+    #[cfg(FALSE)]\n+    {\n+        if let a = 1 && {\n+            let x = let y = 1;\n+            //~^ ERROR expected expression, found `let` statement\n+        } {\n+        }\n+    }\n }"}, {"sha": "d1ce83c723329d2bf7e64d75bc3fe9a48d370666", "filename": "src/test/ui/rfc-2497-if-let-chains/invalid-let-in-a-valid-let-context.stderr", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/1c3bab2fc9f9eb30c03b5019cb9503fef62e31a5/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Finvalid-let-in-a-valid-let-context.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c3bab2fc9f9eb30c03b5019cb9503fef62e31a5/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Finvalid-let-in-a-valid-let-context.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Finvalid-let-in-a-valid-let-context.stderr?ref=1c3bab2fc9f9eb30c03b5019cb9503fef62e31a5", "patch": "@@ -0,0 +1,38 @@\n+error: expected expression, found `let` statement\n+  --> $DIR/invalid-let-in-a-valid-let-context.rs:8:19\n+   |\n+LL |         let _ = &&let Some(x) = Some(42);\n+   |                   ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/invalid-let-in-a-valid-let-context.rs:13:47\n+   |\n+LL |         if let Some(elem) = _opt && [1, 2, 3][let _ = &&let Some(x) = Some(42)] = 1 {\n+   |                                               ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/invalid-let-in-a-valid-let-context.rs:13:57\n+   |\n+LL |         if let Some(elem) = _opt && [1, 2, 3][let _ = &&let Some(x) = Some(42)] = 1 {\n+   |                                                         ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/invalid-let-in-a-valid-let-context.rs:23:23\n+   |\n+LL |             [1, 2, 3][let _ = ()];\n+   |                       ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/invalid-let-in-a-valid-let-context.rs:32:47\n+   |\n+LL |         if let Some(elem) = _opt && [1, 2, 3][let _ = ()] = 1 {\n+   |                                               ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/invalid-let-in-a-valid-let-context.rs:40:21\n+   |\n+LL |             let x = let y = 1;\n+   |                     ^^^\n+\n+error: aborting due to 6 previous errors\n+"}]}