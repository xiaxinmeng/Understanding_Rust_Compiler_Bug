{"sha": "419d3ae02849d47899f8fc221d37b05ac24f4efd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxOWQzYWUwMjg0OWQ0Nzg5OWY4ZmMyMjFkMzdiMDVhYzI0ZjRlZmQ=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-10-20T20:31:54Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-12-17T18:24:40Z"}, "message": "Prefer regions with an `external_name` in `approx_universal_upper_bound`\n\nFixes #75785\n\nWhen displaying a MIR borrowcheck error, we may need to find an upper\nbound for a region, which gives us a region to point to in the error\nmessage. However, a region might outlive multiple distinct universal\nregions, in which case the only upper bound is 'static\n\nTo try to display a meaningful error message, we compute an\n'approximate' upper bound by picking one of the universal regions.\nCurrently, we pick the region with the lowest index - however, this\ncaused us to produce a suboptimal error message in issue #75785\n\nThis PR `approx_universal_upper_bound` to prefer regions with an\n`external_name`. This causes us to prefer regions from function\narguments/upvars, which seems to lead to a nicer error message in some\ncases.", "tree": {"sha": "74e550e80e64fc42f648ff447086a03c0b870b8d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/74e550e80e64fc42f648ff447086a03c0b870b8d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/419d3ae02849d47899f8fc221d37b05ac24f4efd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAl/bomkACgkQtAh+UQ6Y\nsWRGTg/8DcTXYWTKz2nmBelArNAiZoCf0G8ja7COtPaTd+cLTxd+Co1vkHJqZ6K6\nbJWY808Z0LL/aEtrvYR7Z2nV7MpGjlfVl2iOzn+tL78nSvfshvA/AakbJQfrEQsE\nlY2vLKyQOde83AVfIz6JBmOrH0JFyte4IhN27YHSLPCOdEsiAGuJJXxkRSFBZNpM\nVSkP2QCSdZVlidl32Myv8R0QePHtuemcCtW3vwWsP7NyIi3T2rg5grOiEFp6DOsh\nHMFkSoDcmbFkBdH1rQ9qQrhWBCnKfIMvNIQjZDtuLLRXFhu4MizfD6b/dyw2iWUo\nSpsvcSA3omcPnuNbcSaRpBpcNk1GKk4Q5/N3S2qUoiM3nIsuImkfjEZksusUNFcu\nQv7HY8CN+xhP1dmHSXbD55rtNGagKKwrehDfpBCGWK+6NT2VV3pYB5SZJBKDPYt7\nSal7KdqFLR7tEPFQ3nNEnRTOyuWYbydwz5WfJ2DGWlZgDcHOCpdn8vghK11n0Frf\nmjndgeMPUnkqo/UsHVwRl15sa9KmluCl7U88RgP+AxZFY4VLphgyNbCWVJb7wYCM\nVL88QXsCMb0U0hyzlo9lkdTB9FtDdnHkx4r+3/X3vInnc4jHxMMkHQvsP6HY+oBQ\nl/WDIe4DKqD1f6ngh1j+92LroOSc4B1N0RGpPNVtbOodyLfF+iw=\n=ktBV\n-----END PGP SIGNATURE-----", "payload": "tree 74e550e80e64fc42f648ff447086a03c0b870b8d\nparent d23e08448332425a84ae23124bea4dbd685536ce\nauthor Aaron Hill <aa1ronham@gmail.com> 1603225914 -0400\ncommitter Aaron Hill <aa1ronham@gmail.com> 1608229480 -0500\n\nPrefer regions with an `external_name` in `approx_universal_upper_bound`\n\nFixes #75785\n\nWhen displaying a MIR borrowcheck error, we may need to find an upper\nbound for a region, which gives us a region to point to in the error\nmessage. However, a region might outlive multiple distinct universal\nregions, in which case the only upper bound is 'static\n\nTo try to display a meaningful error message, we compute an\n'approximate' upper bound by picking one of the universal regions.\nCurrently, we pick the region with the lowest index - however, this\ncaused us to produce a suboptimal error message in issue #75785\n\nThis PR `approx_universal_upper_bound` to prefer regions with an\n`external_name`. This causes us to prefer regions from function\narguments/upvars, which seems to lead to a nicer error message in some\ncases.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/419d3ae02849d47899f8fc221d37b05ac24f4efd", "html_url": "https://github.com/rust-lang/rust/commit/419d3ae02849d47899f8fc221d37b05ac24f4efd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/419d3ae02849d47899f8fc221d37b05ac24f4efd/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d23e08448332425a84ae23124bea4dbd685536ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/d23e08448332425a84ae23124bea4dbd685536ce", "html_url": "https://github.com/rust-lang/rust/commit/d23e08448332425a84ae23124bea4dbd685536ce"}], "stats": {"total": 48, "additions": 46, "deletions": 2}, "files": [{"sha": "9d45f6fd0d348878f92e0bdb7c17181391ae6a50", "filename": "compiler/rustc_mir/src/borrow_check/region_infer/mod.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/419d3ae02849d47899f8fc221d37b05ac24f4efd/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419d3ae02849d47899f8fc221d37b05ac24f4efd/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fregion_infer%2Fmod.rs?ref=419d3ae02849d47899f8fc221d37b05ac24f4efd", "patch": "@@ -1145,8 +1145,24 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         for ur in self.scc_values.universal_regions_outlived_by(r_scc) {\n             let new_lub = self.universal_region_relations.postdom_upper_bound(lub, ur);\n             debug!(\"approx_universal_upper_bound: ur={:?} lub={:?} new_lub={:?}\", ur, lub, new_lub);\n+            // The upper bound of two non-static regions is static: this\n+            // means we know nothing about the relationship between these\n+            // two regions. Pick a 'better' one to use when constructing\n+            // a diagnostic\n             if ur != static_r && lub != static_r && new_lub == static_r {\n-                lub = std::cmp::min(ur, lub);\n+                // Prefer the region with an `external_name` - this\n+                // indicates that the region is early-bound, so working with\n+                // it can produce a nicer error.\n+                if self.region_definition(ur).external_name.is_some() {\n+                    lub = ur;\n+                } else if self.region_definition(lub).external_name.is_some() {\n+                    // Leave lub unchanged\n+                } else {\n+                    // If we get here, we don't have any reason to prefer\n+                    // one region over the other. Just pick the\n+                    // one with the lower index for now.\n+                    lub = std::cmp::min(ur, lub);\n+                }\n             } else {\n                 lub = new_lub;\n             }"}, {"sha": "b96cab9f0f51affffcac89671167a6490b5cc134", "filename": "src/test/ui/async-await/issue-74072-lifetime-name-annotations.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/419d3ae02849d47899f8fc221d37b05ac24f4efd/src%2Ftest%2Fui%2Fasync-await%2Fissue-74072-lifetime-name-annotations.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/419d3ae02849d47899f8fc221d37b05ac24f4efd/src%2Ftest%2Fui%2Fasync-await%2Fissue-74072-lifetime-name-annotations.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-74072-lifetime-name-annotations.stderr?ref=419d3ae02849d47899f8fc221d37b05ac24f4efd", "patch": "@@ -2,7 +2,7 @@ error[E0506]: cannot assign to `*x` because it is borrowed\n   --> $DIR/issue-74072-lifetime-name-annotations.rs:9:5\n    |\n LL | pub async fn async_fn(x: &mut i32) -> &i32 {\n-   |                                       - let's call the lifetime of this reference `'1`\n+   |                          - let's call the lifetime of this reference `'1`\n LL |     let y = &*x;\n    |             --- borrow of `*x` occurs here\n LL |     *x += 1;"}, {"sha": "452614087be947c15a60911692280c2c058b2c16", "filename": "src/test/ui/async-await/issue-75785-confusing-named-region.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/419d3ae02849d47899f8fc221d37b05ac24f4efd/src%2Ftest%2Fui%2Fasync-await%2Fissue-75785-confusing-named-region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419d3ae02849d47899f8fc221d37b05ac24f4efd/src%2Ftest%2Fui%2Fasync-await%2Fissue-75785-confusing-named-region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-75785-confusing-named-region.rs?ref=419d3ae02849d47899f8fc221d37b05ac24f4efd", "patch": "@@ -0,0 +1,13 @@\n+// edition:2018\n+//\n+// Regression test for issue #75785\n+// Tests that we don't point to a confusing named\n+// region when emitting a diagnostic\n+\n+pub async fn async_fn(x: &mut i32) -> (&i32, &i32) {\n+    let y = &*x;\n+    *x += 1; //~ ERROR cannot assign to\n+    (&32, y)\n+}\n+\n+fn main() {}"}, {"sha": "3b731d9c60a6ae20b51e776fc86dc88cd4468fc0", "filename": "src/test/ui/async-await/issue-75785-confusing-named-region.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/419d3ae02849d47899f8fc221d37b05ac24f4efd/src%2Ftest%2Fui%2Fasync-await%2Fissue-75785-confusing-named-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/419d3ae02849d47899f8fc221d37b05ac24f4efd/src%2Ftest%2Fui%2Fasync-await%2Fissue-75785-confusing-named-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-75785-confusing-named-region.stderr?ref=419d3ae02849d47899f8fc221d37b05ac24f4efd", "patch": "@@ -0,0 +1,15 @@\n+error[E0506]: cannot assign to `*x` because it is borrowed\n+  --> $DIR/issue-75785-confusing-named-region.rs:9:5\n+   |\n+LL | pub async fn async_fn(x: &mut i32) -> (&i32, &i32) {\n+   |                          - let's call the lifetime of this reference `'1`\n+LL |     let y = &*x;\n+   |             --- borrow of `*x` occurs here\n+LL |     *x += 1;\n+   |     ^^^^^^^ assignment to borrowed `*x` occurs here\n+LL |     (&32, y)\n+   |     -------- returning this value requires that `*x` is borrowed for `'1`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0506`."}]}