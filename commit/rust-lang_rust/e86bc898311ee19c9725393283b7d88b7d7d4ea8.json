{"sha": "e86bc898311ee19c9725393283b7d88b7d7d4ea8", "node_id": "C_kwDOAAsO6NoAKGU4NmJjODk4MzExZWUxOWM5NzI1MzkzMjgzYjdkODhiN2Q3ZDRlYTg", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-10-19T05:15:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-19T05:15:31Z"}, "message": "Rollup merge of #103176 - nnethercote:fix-TyKind-is_simple_path, r=spastorino\n\nFix `TyKind::is_simple_path`\n\nFixes #103157.\n\nr? `@spastorino`", "tree": {"sha": "d15cac20b945fe5bfbcb4d7922eda521137d19df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d15cac20b945fe5bfbcb4d7922eda521137d19df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e86bc898311ee19c9725393283b7d88b7d7d4ea8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjT4fzCRBK7hj4Ov3rIwAA+JkIADTjN46OQ6ezsVk+g6Oqm7IK\nVjIMbTANUtGRGdAf3F43+VJRQ24xKUt2w3/+WoWKwWZUEBw0IKPznpJeNys0N/l5\nZFB9AIiXIAQVVTDfk9r85Sy4SeHnkxOehBVSFeb0knueSjU4n++l9oe/QEjfcuUv\nmv4yxoipej8zK0XhNS67H6KQae+NwKJLk4u0PwSgAI6AzE/5OFIFqtiF/bhqZ9nP\nEkmUfYFMQ/XlV9aXVbpB30/QVRSSHum1zItGeuzJNXI7ksBKIt+HfBttnY+ZsY3n\nko0Imgxupqbq7UGFCRiGg7xzWCpRrCI6k/qa/AKivc+3Pzc0vWCkNgVapoQ3dmI=\n=7f5n\n-----END PGP SIGNATURE-----\n", "payload": "tree d15cac20b945fe5bfbcb4d7922eda521137d19df\nparent d6eb7bca0918b7c5a9f252310ade34d393d4cc14\nparent 9a23f60f9c801dd0b4686cc75c6a9979bd8928fa\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1666156531 +0200\ncommitter GitHub <noreply@github.com> 1666156531 +0200\n\nRollup merge of #103176 - nnethercote:fix-TyKind-is_simple_path, r=spastorino\n\nFix `TyKind::is_simple_path`\n\nFixes #103157.\n\nr? `@spastorino`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e86bc898311ee19c9725393283b7d88b7d7d4ea8", "html_url": "https://github.com/rust-lang/rust/commit/e86bc898311ee19c9725393283b7d88b7d7d4ea8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e86bc898311ee19c9725393283b7d88b7d7d4ea8/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6eb7bca0918b7c5a9f252310ade34d393d4cc14", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6eb7bca0918b7c5a9f252310ade34d393d4cc14", "html_url": "https://github.com/rust-lang/rust/commit/d6eb7bca0918b7c5a9f252310ade34d393d4cc14"}, {"sha": "9a23f60f9c801dd0b4686cc75c6a9979bd8928fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a23f60f9c801dd0b4686cc75c6a9979bd8928fa", "html_url": "https://github.com/rust-lang/rust/commit/9a23f60f9c801dd0b4686cc75c6a9979bd8928fa"}], "stats": {"total": 59, "additions": 54, "deletions": 5}, "files": [{"sha": "7112c26757717c1044f63a2d21e571a0cbea3e9a", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e86bc898311ee19c9725393283b7d88b7d7d4ea8/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e86bc898311ee19c9725393283b7d88b7d7d4ea8/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=e86bc898311ee19c9725393283b7d88b7d7d4ea8", "patch": "@@ -2060,8 +2060,11 @@ impl TyKind {\n     }\n \n     pub fn is_simple_path(&self) -> Option<Symbol> {\n-        if let TyKind::Path(None, Path { segments, .. }) = &self && segments.len() == 1 {\n-            Some(segments[0].ident.name)\n+        if let TyKind::Path(None, Path { segments, .. }) = &self\n+            && let [segment] = &segments[..]\n+            && segment.args.is_none()\n+        {\n+            Some(segment.ident.name)\n         } else {\n             None\n         }"}, {"sha": "ba7809413bd804bc2b7ffa828c12b733abed418b", "filename": "src/test/ui/deriving/deriving-all-codegen.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e86bc898311ee19c9725393283b7d88b7d7d4ea8/src%2Ftest%2Fui%2Fderiving%2Fderiving-all-codegen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e86bc898311ee19c9725393283b7d88b7d7d4ea8/src%2Ftest%2Fui%2Fderiving%2Fderiving-all-codegen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderiving%2Fderiving-all-codegen.rs?ref=e86bc898311ee19c9725393283b7d88b7d7d4ea8", "patch": "@@ -85,7 +85,7 @@ enum Mixed {\n     P,\n     Q,\n     R(u32),\n-    S { d1: u32, d2: u32 },\n+    S { d1: Option<u32>, d2: Option<i32> },\n }\n \n // An enum with no fieldless variants. Note that `Default` cannot be derived"}, {"sha": "92fce6888c089767d68f64ab4e9d6691d054e63d", "filename": "src/test/ui/deriving/deriving-all-codegen.stdout", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e86bc898311ee19c9725393283b7d88b7d7d4ea8/src%2Ftest%2Fui%2Fderiving%2Fderiving-all-codegen.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/e86bc898311ee19c9725393283b7d88b7d7d4ea8/src%2Ftest%2Fui%2Fderiving%2Fderiving-all-codegen.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderiving%2Fderiving-all-codegen.stdout?ref=e86bc898311ee19c9725393283b7d88b7d7d4ea8", "patch": "@@ -809,15 +809,17 @@ enum Mixed {\n     Q,\n     R(u32),\n     S {\n-        d1: u32,\n-        d2: u32,\n+        d1: Option<u32>,\n+        d2: Option<i32>,\n     },\n }\n #[automatically_derived]\n impl ::core::clone::Clone for Mixed {\n     #[inline]\n     fn clone(&self) -> Mixed {\n         let _: ::core::clone::AssertParamIsClone<u32>;\n+        let _: ::core::clone::AssertParamIsClone<Option<u32>>;\n+        let _: ::core::clone::AssertParamIsClone<Option<i32>>;\n         *self\n     }\n }\n@@ -886,6 +888,8 @@ impl ::core::cmp::Eq for Mixed {\n     #[no_coverage]\n     fn assert_receiver_is_total_eq(&self) -> () {\n         let _: ::core::cmp::AssertParamIsEq<u32>;\n+        let _: ::core::cmp::AssertParamIsEq<Option<u32>>;\n+        let _: ::core::cmp::AssertParamIsEq<Option<i32>>;\n     }\n }\n #[automatically_derived]"}, {"sha": "52b4c7898d87bae0e2262ff36f3e330c5d23cdf1", "filename": "src/test/ui/deriving/issue-103157.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e86bc898311ee19c9725393283b7d88b7d7d4ea8/src%2Ftest%2Fui%2Fderiving%2Fissue-103157.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e86bc898311ee19c9725393283b7d88b7d7d4ea8/src%2Ftest%2Fui%2Fderiving%2Fissue-103157.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderiving%2Fissue-103157.rs?ref=e86bc898311ee19c9725393283b7d88b7d7d4ea8", "patch": "@@ -0,0 +1,12 @@\n+// check-fail\n+\n+#[derive(PartialEq, Eq)]\n+pub enum Value {\n+    Boolean(Option<bool>),\n+    Float(Option<f64>), //~ ERROR the trait bound `f64: Eq` is not satisfied\n+}\n+\n+fn main() {\n+    let a = Value::Float(Some(f64::NAN));\n+    assert!(a == a);\n+}"}, {"sha": "ee3528fe1062ddd7f418667689da0e7376c0c352", "filename": "src/test/ui/deriving/issue-103157.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/e86bc898311ee19c9725393283b7d88b7d7d4ea8/src%2Ftest%2Fui%2Fderiving%2Fissue-103157.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e86bc898311ee19c9725393283b7d88b7d7d4ea8/src%2Ftest%2Fui%2Fderiving%2Fissue-103157.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderiving%2Fissue-103157.stderr?ref=e86bc898311ee19c9725393283b7d88b7d7d4ea8", "patch": "@@ -0,0 +1,30 @@\n+error[E0277]: the trait bound `f64: Eq` is not satisfied\n+  --> $DIR/issue-103157.rs:6:11\n+   |\n+LL | #[derive(PartialEq, Eq)]\n+   |                     -- in this derive macro expansion\n+...\n+LL |     Float(Option<f64>),\n+   |           ^^^^^^^^^^^ the trait `Eq` is not implemented for `f64`\n+   |\n+   = help: the following other types implement trait `Eq`:\n+             i128\n+             i16\n+             i32\n+             i64\n+             i8\n+             isize\n+             u128\n+             u16\n+           and 4 others\n+   = note: required for `Option<f64>` to implement `Eq`\n+note: required by a bound in `AssertParamIsEq`\n+  --> $SRC_DIR/core/src/cmp.rs:LL:COL\n+   |\n+LL | pub struct AssertParamIsEq<T: Eq + ?Sized> {\n+   |                               ^^ required by this bound in `AssertParamIsEq`\n+   = note: this error originates in the derive macro `Eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}]}