{"sha": "e8197b1a1a1af705aefa52194024876d14173a75", "node_id": "C_kwDOAAsO6NoAKGU4MTk3YjFhMWExYWY3MDVhZWZhNTIxOTQwMjQ4NzZkMTQxNzNhNzU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-20T23:19:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-20T23:19:19Z"}, "message": "Auto merge of #109999 - m-ou-se:flatten-format-args, r=oli-obk\n\nEnable flatten-format-args by default.\n\nPart of https://github.com/rust-lang/rust/issues/99012.\n\nThis enables the `flatten-format-args` feature that was added by https://github.com/rust-lang/rust/pull/106824:\n\n> This change inlines string literals, integer literals and nested format_args!() into format_args!() during ast lowering, making all of the following pairs result in equivalent hir:\n>\n> ```rust\n> println!(\"Hello, {}!\", \"World\");\n> println!(\"Hello, World!\");\n> ```\n>\n> ```rust\n> println!(\"[info] {}\", format_args!(\"error\"));\n> println!(\"[info] error\");\n> ```\n>\n> ```rust\n> println!(\"[{}] {}\", status, format_args!(\"error: {}\", msg));\n> println!(\"[{}] error: {}\", status, msg);\n> ```\n>\n> ```rust\n> println!(\"{} + {} = {}\", 1, 2, 1 + 2);\n> println!(\"1 + 2 = {}\", 1 + 2);\n> ```\n>\n> And so on.\n>\n> This is useful for macros. E.g. a `log::info!()` macro could just pass the tokens from the user directly into a `format_args!()` that gets efficiently flattened/inlined into a `format_args!(\"info: {}\")`.\n>\n> It also means that `dbg!(x)` will have its file, line, and expression name inlined:\n>\n> ```rust\n> eprintln!(\"[{}:{}] {} = {:#?}\", file!(), line!(), stringify!(x), x); // before\n> eprintln!(\"[example.rs:1] x = {:#?}\", x); // after\n> ```\n>\n> Which can be nice in some cases, but also means a lot more unique static strings than before if dbg!() is used a lot.\n\nThis is mostly an optimization, except that it will be visible through [`fmt::Arguments::as_str()`](https://doc.rust-lang.org/nightly/std/fmt/struct.Arguments.html#method.as_str).\n\nIn https://github.com/rust-lang/rust/pull/106823, there was already a libs-api FCP about the documentation of `fmt::Arguments::as_str()` to allow it to give `Some` rather than `None` depending on optimizations like this. That was just a documentation update though. This PR is the one that actually makes the user visible change:\n\n```rust\nassert_eq!(format_args!(\"abc\").as_str(), Some(\"abc\")); // Unchanged.\nassert_eq!(format_args!(\"ab{}\", \"c\").as_str(), Some(\"abc\")); // Was `None` before!\n```", "tree": {"sha": "eff37d1b9e351cd43982902f3cd9fee173a524b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eff37d1b9e351cd43982902f3cd9fee173a524b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e8197b1a1a1af705aefa52194024876d14173a75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e8197b1a1a1af705aefa52194024876d14173a75", "html_url": "https://github.com/rust-lang/rust/commit/e8197b1a1a1af705aefa52194024876d14173a75", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e8197b1a1a1af705aefa52194024876d14173a75/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3b1001ba4e7451f8ab87f35decd94d056971064", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3b1001ba4e7451f8ab87f35decd94d056971064", "html_url": "https://github.com/rust-lang/rust/commit/d3b1001ba4e7451f8ab87f35decd94d056971064"}, {"sha": "89f0aaaec60f5e67604fd2f98b1e43500c1a0578", "url": "https://api.github.com/repos/rust-lang/rust/commits/89f0aaaec60f5e67604fd2f98b1e43500c1a0578", "html_url": "https://github.com/rust-lang/rust/commit/89f0aaaec60f5e67604fd2f98b1e43500c1a0578"}], "stats": {"total": 3, "additions": 3, "deletions": 0}, "files": [{"sha": "205905d50913557f721e264dc365d23a464d728a", "filename": "src/driver.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e8197b1a1a1af705aefa52194024876d14173a75/src%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8197b1a1a1af705aefa52194024876d14173a75/src%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver.rs?ref=e8197b1a1a1af705aefa52194024876d14173a75", "patch": "@@ -160,6 +160,9 @@ impl rustc_driver::Callbacks for ClippyCallbacks {\n         // MIR passes can be enabled / disabled separately, we should figure out, what passes to\n         // use for Clippy.\n         config.opts.unstable_opts.mir_opt_level = Some(0);\n+\n+        // Disable flattening and inlining of format_args!(), so the HIR matches with the AST.\n+        config.opts.unstable_opts.flatten_format_args = false;\n     }\n }\n "}]}