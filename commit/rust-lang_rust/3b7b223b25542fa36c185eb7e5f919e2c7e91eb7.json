{"sha": "3b7b223b25542fa36c185eb7e5f919e2c7e91eb7", "node_id": "C_kwDOAAsO6NoAKDNiN2IyMjNiMjU1NDJmYTM2YzE4NWViN2U1ZjkxOWUyYzdlOTFlYjc", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-03-20T18:13:50Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-03-20T18:13:50Z"}, "message": "Simplify", "tree": {"sha": "dd281f08d2089e5b9499c6db6ae28989a14d769e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd281f08d2089e5b9499c6db6ae28989a14d769e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b7b223b25542fa36c185eb7e5f919e2c7e91eb7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b7b223b25542fa36c185eb7e5f919e2c7e91eb7", "html_url": "https://github.com/rust-lang/rust/commit/3b7b223b25542fa36c185eb7e5f919e2c7e91eb7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b7b223b25542fa36c185eb7e5f919e2c7e91eb7/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68de7b30e04ed56c7acd61f5aecc5f447691be12", "url": "https://api.github.com/repos/rust-lang/rust/commits/68de7b30e04ed56c7acd61f5aecc5f447691be12", "html_url": "https://github.com/rust-lang/rust/commit/68de7b30e04ed56c7acd61f5aecc5f447691be12"}], "stats": {"total": 37, "additions": 16, "deletions": 21}, "files": [{"sha": "d1cfc501e5f67adadccf69898eabe1a0bbbbe83a", "filename": "crates/hir_def/src/body/lower.rs", "status": "modified", "additions": 15, "deletions": 21, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/3b7b223b25542fa36c185eb7e5f919e2c7e91eb7/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b7b223b25542fa36c185eb7e5f919e2c7e91eb7/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs?ref=3b7b223b25542fa36c185eb7e5f919e2c7e91eb7", "patch": "@@ -508,11 +508,8 @@ impl ExprCollector<'_> {\n             }\n             ast::Expr::MacroCall(e) => {\n                 let macro_ptr = AstPtr::new(&e);\n-                let mut id = None;\n-                self.collect_macro_call(e, macro_ptr.clone(), true, |this, expansion| {\n-                    if let Some(it) = expansion {\n-                        id.get_or_insert(this.collect_expr(it));\n-                    }\n+                let id = self.collect_macro_call(e, macro_ptr.clone(), true, |this, expansion| {\n+                    expansion.map(|it| this.collect_expr(it))\n                 });\n                 match id {\n                     Some(id) => {\n@@ -537,13 +534,17 @@ impl ExprCollector<'_> {\n         })\n     }\n \n-    fn collect_macro_call<F: FnOnce(&mut Self, Option<T>), T: ast::AstNode>(\n+    fn collect_macro_call<F, T, U>(\n         &mut self,\n         mcall: ast::MacroCall,\n         syntax_ptr: AstPtr<ast::MacroCall>,\n         record_diagnostics: bool,\n         collector: F,\n-    ) {\n+    ) -> U\n+    where\n+        F: FnOnce(&mut Self, Option<T>) -> U,\n+        T: ast::AstNode,\n+    {\n         // File containing the macro call. Expansion errors will be attached here.\n         let outer_file = self.expander.current_file_id;\n \n@@ -559,8 +560,7 @@ impl ExprCollector<'_> {\n                         path,\n                     });\n                 }\n-                collector(self, None);\n-                return;\n+                return collector(self, None);\n             }\n         };\n \n@@ -634,7 +634,6 @@ impl ExprCollector<'_> {\n                     let syntax_ptr = AstPtr::new(&stmt.expr().unwrap());\n \n                     let prev_stmt = self.statements_in_scope.len();\n-                    let mut tail = None;\n                     self.collect_macro_call(m, macro_ptr.clone(), false, |this, expansion| {\n                         match expansion {\n                             Some(expansion) => {\n@@ -643,7 +642,6 @@ impl ExprCollector<'_> {\n                                 statements.statements().for_each(|stmt| this.collect_stmt(stmt));\n                                 if let Some(expr) = statements.expr() {\n                                     let expr = this.collect_expr(expr);\n-                                    tail = Some(expr);\n                                     this.statements_in_scope\n                                         .push(Statement::Expr { expr, has_semi });\n                                 }\n@@ -654,6 +652,7 @@ impl ExprCollector<'_> {\n                             }\n                         }\n                     });\n+\n                     let mut macro_exprs = smallvec![];\n                     for stmt in &self.statements_in_scope[prev_stmt..] {\n                         match *stmt {\n@@ -664,7 +663,6 @@ impl ExprCollector<'_> {\n                             Statement::Expr { expr, .. } => macro_exprs.push(expr),\n                         }\n                     }\n-                    macro_exprs.extend(tail);\n                     if !macro_exprs.is_empty() {\n                         self.source_map\n                             .macro_call_to_exprs\n@@ -894,15 +892,11 @@ impl ExprCollector<'_> {\n             ast::Pat::MacroPat(mac) => match mac.macro_call() {\n                 Some(call) => {\n                     let macro_ptr = AstPtr::new(&call);\n-                    let mut pat = None;\n-                    self.collect_macro_call(call, macro_ptr, true, |this, expanded_pat| {\n-                        pat = Some(this.collect_pat_opt_(expanded_pat));\n-                    });\n-\n-                    match pat {\n-                        Some(pat) => return pat,\n-                        None => Pat::Missing,\n-                    }\n+                    let pat =\n+                        self.collect_macro_call(call, macro_ptr, true, |this, expanded_pat| {\n+                            this.collect_pat_opt_(expanded_pat)\n+                        });\n+                    return pat;\n                 }\n                 None => Pat::Missing,\n             },"}, {"sha": "b0fc49fc6197ba84fc29054ef2a4c8c7cf6e9584", "filename": "crates/hir_ty/src/diagnostics/unsafe_check.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3b7b223b25542fa36c185eb7e5f919e2c7e91eb7/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Funsafe_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b7b223b25542fa36c185eb7e5f919e2c7e91eb7/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Funsafe_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Funsafe_check.rs?ref=3b7b223b25542fa36c185eb7e5f919e2c7e91eb7", "patch": "@@ -37,6 +37,7 @@ pub struct UnsafeExpr {\n     pub inside_unsafe_block: bool,\n }\n \n+// FIXME: Move this out, its not a diagnostic only thing anymore, and handle unsafe pattern accesses as well\n pub fn unsafe_expressions(\n     db: &dyn HirDatabase,\n     infer: &InferenceResult,"}]}