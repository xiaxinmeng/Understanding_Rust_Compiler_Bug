{"sha": "256096da9ee680366b839f912e8d3ecccc0da033", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1NjA5NmRhOWVlNjgwMzY2YjgzOWY5MTJlOGQzZWNjY2MwZGEwMzM=", "commit": {"author": {"name": "Mark Mansi", "email": "markm@cs.wisc.edu", "date": "2018-04-25T21:33:02Z"}, "committer": {"name": "Mark Mansi", "email": "markm@cs.wisc.edu", "date": "2018-04-25T21:33:02Z"}, "message": "Make Vec::new const", "tree": {"sha": "af468b7e26785c13cd95894035a3144500243bf4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af468b7e26785c13cd95894035a3144500243bf4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/256096da9ee680366b839f912e8d3ecccc0da033", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/256096da9ee680366b839f912e8d3ecccc0da033", "html_url": "https://github.com/rust-lang/rust/commit/256096da9ee680366b839f912e8d3ecccc0da033", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/256096da9ee680366b839f912e8d3ecccc0da033/comments", "author": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25749ad66de71ffb46e6b04fb0cccf1ae4fc5ed5", "url": "https://api.github.com/repos/rust-lang/rust/commits/25749ad66de71ffb46e6b04fb0cccf1ae4fc5ed5", "html_url": "https://github.com/rust-lang/rust/commit/25749ad66de71ffb46e6b04fb0cccf1ae4fc5ed5"}], "stats": {"total": 38, "additions": 34, "deletions": 4}, "files": [{"sha": "dc8ad9ee06169279fafa461a96769a32593f04c7", "filename": "src/liballoc/raw_vec.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/256096da9ee680366b839f912e8d3ecccc0da033/src%2Fliballoc%2Fraw_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/256096da9ee680366b839f912e8d3ecccc0da033/src%2Fliballoc%2Fraw_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fraw_vec.rs?ref=256096da9ee680366b839f912e8d3ecccc0da033", "patch": "@@ -68,6 +68,16 @@ impl<T, A: Alloc> RawVec<T, A> {\n         }\n     }\n \n+    /// Like `empty` but parametrized over the choice of allocator for the returned `RawVec`.\n+    pub const fn empty_in(a: A) -> Self {\n+        // Unique::empty() doubles as \"unallocated\" and \"zero-sized allocation\"\n+        RawVec {\n+            ptr: Unique::empty(),\n+            cap: 0,\n+            a,\n+        }\n+    }\n+\n     /// Like `with_capacity` but parameterized over the choice of\n     /// allocator for the returned RawVec.\n     #[inline]\n@@ -124,6 +134,12 @@ impl<T> RawVec<T, Global> {\n         Self::new_in(Global)\n     }\n \n+    /// Create a `RawVec` with capcity 0 (on the system heap), regardless of `T`, without\n+    /// allocating.\n+    pub fn empty() -> Self {\n+        Self::empty_in(Global)\n+    }\n+\n     /// Creates a RawVec (on the system heap) with exactly the\n     /// capacity and alignment requirements for a `[T; cap]`. This is\n     /// equivalent to calling RawVec::new when `cap` is 0 or T is"}, {"sha": "757606607bbcfc3f9184b72eb88dc337d48a693a", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/256096da9ee680366b839f912e8d3ecccc0da033/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/256096da9ee680366b839f912e8d3ecccc0da033/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=256096da9ee680366b839f912e8d3ecccc0da033", "patch": "@@ -324,7 +324,7 @@ impl<T> Vec<T> {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn new() -> Vec<T> {\n         Vec {\n-            buf: RawVec::new(),\n+            buf: RawVec::empty(),\n             len: 0,\n         }\n     }"}, {"sha": "b612a278a34a759bcb110208860756bd920ed033", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/256096da9ee680366b839f912e8d3ecccc0da033/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/256096da9ee680366b839f912e8d3ecccc0da033/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=256096da9ee680366b839f912e8d3ecccc0da033", "patch": "@@ -2551,10 +2551,9 @@ impl<T: Sized> Unique<T> {\n     /// This is useful for initializing types which lazily allocate, like\n     /// `Vec::new` does.\n     // FIXME: rename to dangling() to match NonNull?\n-    pub fn empty() -> Self {\n+    pub const fn empty() -> Self {\n         unsafe {\n-            let ptr = mem::align_of::<T>() as *mut T;\n-            Unique::new_unchecked(ptr)\n+            Unique::new_unchecked(mem::align_of::<T>() as *mut T)\n         }\n     }\n }"}, {"sha": "02d8cfdcf988d6748fa4fedb4c08441881d246fb", "filename": "src/test/run-pass/vec-const-new.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/256096da9ee680366b839f912e8d3ecccc0da033/src%2Ftest%2Frun-pass%2Fvec-const-new.rs", "raw_url": "https://github.com/rust-lang/rust/raw/256096da9ee680366b839f912e8d3ecccc0da033/src%2Ftest%2Frun-pass%2Fvec-const-new.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-const-new.rs?ref=256096da9ee680366b839f912e8d3ecccc0da033", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that Vec::new() can be used for constants\n+\n+const MY_VEC: Vec<usize> = Vec::new();\n+\n+pub fn main() {}"}]}