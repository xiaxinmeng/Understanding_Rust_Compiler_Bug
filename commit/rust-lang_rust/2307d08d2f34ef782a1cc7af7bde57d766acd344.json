{"sha": "2307d08d2f34ef782a1cc7af7bde57d766acd344", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzMDdkMDhkMmYzNGVmNzgyYTFjYzdhZjdiZGU1N2Q3NjZhY2QzNDQ=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2021-01-23T05:50:03Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2021-02-01T22:08:37Z"}, "message": "Use UFCS instead of method calls in `derive(Debug)`. See issue 81211 for discussion.", "tree": {"sha": "e260f5b30eeea68b848929119d7ae1a173251bbc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e260f5b30eeea68b848929119d7ae1a173251bbc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2307d08d2f34ef782a1cc7af7bde57d766acd344", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2307d08d2f34ef782a1cc7af7bde57d766acd344", "html_url": "https://github.com/rust-lang/rust/commit/2307d08d2f34ef782a1cc7af7bde57d766acd344", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2307d08d2f34ef782a1cc7af7bde57d766acd344/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02b85d722050d61b40ae9746b3bac54ab55b1056", "url": "https://api.github.com/repos/rust-lang/rust/commits/02b85d722050d61b40ae9746b3bac54ab55b1056", "html_url": "https://github.com/rust-lang/rust/commit/02b85d722050d61b40ae9746b3bac54ab55b1056"}], "stats": {"total": 42, "additions": 27, "deletions": 15}, "files": [{"sha": "55ab9d38385ada82b31e0ba30038c8d9b7d6ae38", "filename": "compiler/rustc_builtin_macros/src/deriving/debug.rs", "status": "modified", "additions": 25, "deletions": 15, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/2307d08d2f34ef782a1cc7af7bde57d766acd344/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2307d08d2f34ef782a1cc7af7bde57d766acd344/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdebug.rs?ref=2307d08d2f34ef782a1cc7af7bde57d766acd344", "patch": "@@ -8,6 +8,10 @@ use rustc_expand::base::{Annotatable, ExtCtxt};\n use rustc_span::symbol::{sym, Ident};\n use rustc_span::{Span, DUMMY_SP};\n \n+fn make_mut_borrow(cx: &mut ExtCtxt<'_>, sp: Span, expr: P<Expr>) -> P<Expr> {\n+    cx.expr(sp, ast::ExprKind::AddrOf(ast::BorrowKind::Ref, ast::Mutability::Mut, expr))\n+}\n+\n pub fn expand_deriving_debug(\n     cx: &mut ExtCtxt<'_>,\n     span: Span,\n@@ -67,34 +71,37 @@ fn show_substructure(cx: &mut ExtCtxt<'_>, span: Span, substr: &Substructure<'_>\n     let fmt = substr.nonself_args[0].clone();\n \n     let mut stmts = Vec::with_capacity(fields.len() + 2);\n+    let fn_path_finish;\n     match vdata {\n         ast::VariantData::Tuple(..) | ast::VariantData::Unit(..) => {\n             // tuple struct/\"normal\" variant\n-            let expr =\n-                cx.expr_method_call(span, fmt, Ident::new(sym::debug_tuple, span), vec![name]);\n+            let fn_path_debug_tuple = cx.std_path(&[sym::fmt, sym::Formatter, sym::debug_tuple]);\n+            let expr = cx.expr_call_global(span, fn_path_debug_tuple, vec![fmt, name]);\n             stmts.push(cx.stmt_let(span, true, builder, expr));\n \n             for field in fields {\n                 // Use double indirection to make sure this works for unsized types\n                 let field = cx.expr_addr_of(field.span, field.self_.clone());\n                 let field = cx.expr_addr_of(field.span, field);\n \n-                let expr = cx.expr_method_call(\n-                    span,\n-                    builder_expr.clone(),\n-                    Ident::new(sym::field, span),\n-                    vec![field],\n-                );\n+                let fn_path_field = cx.std_path(&[sym::fmt, sym::DebugTuple, sym::field]);\n+                let builder_recv = make_mut_borrow(cx, span, builder_expr.clone());\n+                let expr = cx.expr_call_global(span, fn_path_field, vec![builder_recv, field]);\n \n                 // Use `let _ = expr;` to avoid triggering the\n                 // unused_results lint.\n                 stmts.push(stmt_let_underscore(cx, span, expr));\n             }\n+\n+            fn_path_finish = cx.std_path(&[sym::fmt, sym::DebugTuple, sym::finish]);\n         }\n         ast::VariantData::Struct(..) => {\n             // normal struct/struct variant\n-            let expr =\n-                cx.expr_method_call(span, fmt, Ident::new(sym::debug_struct, span), vec![name]);\n+            let fn_path_debug_struct =\n+                cx.std_path(&[sym::fmt, sym::Formatter, sym::debug_struct]);\n+            let expr = cx.expr_call_global(\n+                span, fn_path_debug_struct, vec![fmt, name]\n+            );\n             stmts.push(cx.stmt_let(DUMMY_SP, true, builder, expr));\n \n             for field in fields {\n@@ -104,20 +111,23 @@ fn show_substructure(cx: &mut ExtCtxt<'_>, span: Span, substr: &Substructure<'_>\n                 );\n \n                 // Use double indirection to make sure this works for unsized types\n+                let fn_path_field = cx.std_path(&[sym::fmt, sym::DebugStruct, sym::field]);\n                 let field = cx.expr_addr_of(field.span, field.self_.clone());\n                 let field = cx.expr_addr_of(field.span, field);\n-                let expr = cx.expr_method_call(\n+                let builder_recv = make_mut_borrow(cx, span, builder_expr.clone());\n+                let expr = cx.expr_call_global(\n                     span,\n-                    builder_expr.clone(),\n-                    Ident::new(sym::field, span),\n-                    vec![name, field],\n+                    fn_path_field,\n+                    vec![builder_recv, name, field],\n                 );\n                 stmts.push(stmt_let_underscore(cx, span, expr));\n             }\n+            fn_path_finish = cx.std_path(&[sym::fmt, sym::DebugStruct, sym::finish]);\n         }\n     }\n \n-    let expr = cx.expr_method_call(span, builder_expr, Ident::new(sym::finish, span), vec![]);\n+    let builder_recv = make_mut_borrow(cx, span, builder_expr);\n+    let expr = cx.expr_call_global(span, fn_path_finish, vec![builder_recv]);\n \n     stmts.push(cx.stmt_expr(expr));\n     let block = cx.block(span, stmts);"}, {"sha": "bc094c129349f95b7f07821aec49d4465a6c22f1", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2307d08d2f34ef782a1cc7af7bde57d766acd344/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2307d08d2f34ef782a1cc7af7bde57d766acd344/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=2307d08d2f34ef782a1cc7af7bde57d766acd344", "patch": "@@ -133,6 +133,8 @@ symbols! {\n         Copy,\n         Count,\n         Debug,\n+        DebugStruct,\n+        DebugTuple,\n         Decodable,\n         Decoder,\n         Default,"}]}