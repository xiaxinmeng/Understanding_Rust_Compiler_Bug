{"sha": "f3cd4a7f64c50ff5935f4d507ae1103c93b8a2ad", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzY2Q0YTdmNjRjNTBmZjU5MzVmNGQ1MDdhZTExMDNjOTNiOGEyYWQ=", "commit": {"author": {"name": "leonardo.yvens", "email": "leoyvens@gmail.com", "date": "2017-12-13T15:56:57Z"}, "committer": {"name": "leonardo.yvens", "email": "leoyvens@gmail.com", "date": "2018-01-27T17:42:54Z"}, "message": "Refactor away `fn default_type_parameters`\n\nIt had only one caller.", "tree": {"sha": "deaec08383c41f4483ca4d4dd822631a76a5f8bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/deaec08383c41f4483ca4d4dd822631a76a5f8bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f3cd4a7f64c50ff5935f4d507ae1103c93b8a2ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f3cd4a7f64c50ff5935f4d507ae1103c93b8a2ad", "html_url": "https://github.com/rust-lang/rust/commit/f3cd4a7f64c50ff5935f4d507ae1103c93b8a2ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f3cd4a7f64c50ff5935f4d507ae1103c93b8a2ad/comments", "author": {"login": "leoyvens", "id": 9885558, "node_id": "MDQ6VXNlcjk4ODU1NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/9885558?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leoyvens", "html_url": "https://github.com/leoyvens", "followers_url": "https://api.github.com/users/leoyvens/followers", "following_url": "https://api.github.com/users/leoyvens/following{/other_user}", "gists_url": "https://api.github.com/users/leoyvens/gists{/gist_id}", "starred_url": "https://api.github.com/users/leoyvens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leoyvens/subscriptions", "organizations_url": "https://api.github.com/users/leoyvens/orgs", "repos_url": "https://api.github.com/users/leoyvens/repos", "events_url": "https://api.github.com/users/leoyvens/events{/privacy}", "received_events_url": "https://api.github.com/users/leoyvens/received_events", "type": "User", "site_admin": false}, "committer": {"login": "leoyvens", "id": 9885558, "node_id": "MDQ6VXNlcjk4ODU1NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/9885558?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leoyvens", "html_url": "https://github.com/leoyvens", "followers_url": "https://api.github.com/users/leoyvens/followers", "following_url": "https://api.github.com/users/leoyvens/following{/other_user}", "gists_url": "https://api.github.com/users/leoyvens/gists{/gist_id}", "starred_url": "https://api.github.com/users/leoyvens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leoyvens/subscriptions", "organizations_url": "https://api.github.com/users/leoyvens/orgs", "repos_url": "https://api.github.com/users/leoyvens/repos", "events_url": "https://api.github.com/users/leoyvens/events{/privacy}", "received_events_url": "https://api.github.com/users/leoyvens/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d83fc914a0f116ad0e4412d5ccc0be24b3b7af2", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d83fc914a0f116ad0e4412d5ccc0be24b3b7af2", "html_url": "https://github.com/rust-lang/rust/commit/3d83fc914a0f116ad0e4412d5ccc0be24b3b7af2"}], "stats": {"total": 46, "additions": 17, "deletions": 29}, "files": [{"sha": "666b8e06522ea79018b7b0c3983c326952a79ddf", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 17, "deletions": 29, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/f3cd4a7f64c50ff5935f4d507ae1103c93b8a2ad/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3cd4a7f64c50ff5935f4d507ae1103c93b8a2ad/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=f3cd4a7f64c50ff5935f4d507ae1103c93b8a2ad", "patch": "@@ -2127,34 +2127,6 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         }\n     }\n \n-    /// Apply \"fallbacks\" to some types\n-    /// unconstrained types get replaced with ! or () (depending on whether\n-    /// feature(never_type) is enabled), unconstrained ints with i32, and\n-    /// unconstrained floats with f64.\n-    fn default_type_parameters(&self) {\n-        // Defaulting inference variables becomes very dubious if we have\n-        // encountered type-checking errors. Therefore, if we think we saw\n-        // some errors in this function, just resolve all uninstanted type\n-        // varibles to TyError.\n-        if self.is_tainted_by_errors() {\n-            for ty in &self.unsolved_variables() {\n-                if let ty::TyInfer(_) = self.shallow_resolve(ty).sty {\n-                    debug!(\"default_type_parameters: defaulting `{:?}` to error\", ty);\n-                    self.demand_eqtype(syntax_pos::DUMMY_SP, *ty, self.tcx().types.err);\n-                }\n-            }\n-            return;\n-        }\n-\n-        for ty in &self.unsolved_variables() {\n-            let resolved = self.resolve_type_vars_if_possible(ty);\n-            if resolved.is_ty_infer() {\n-                self.apply_diverging_fallback_to_type(ty);\n-                self.apply_numeric_fallback_to_type(ty);\n-            }\n-        }\n-    }\n-\n     fn apply_diverging_fallback_to_type(&self, ty: Ty<'tcx>) {\n         assert!(ty.is_ty_infer());\n         if self.type_var_diverges(ty) {\n@@ -2185,7 +2157,23 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         assert!(self.deferred_call_resolutions.borrow().is_empty());\n \n         self.select_obligations_where_possible();\n-        self.default_type_parameters();\n+\n+        // Apply fallbacks to unsolved variables.\n+        // Non-numerics get replaced with ! or () (depending on whether\n+        // feature(never_type) is enabled), unconstrained ints with i32,\n+        // unconstrained floats with f64.\n+        for ty in &self.unsolved_variables() {\n+            if self.is_tainted_by_errors() {\n+                // Defaulting inference variables becomes very dubious if we have\n+                // encountered type-checking errors. In that case,\n+                // just resolve all uninstanted type variables to TyError.\n+                debug!(\"default_type_parameters: defaulting `{:?}` to error\", ty);\n+                self.demand_eqtype(syntax_pos::DUMMY_SP, *ty, self.tcx().types.err);\n+            } else {\n+                self.apply_diverging_fallback_to_type(ty);\n+                self.apply_numeric_fallback_to_type(ty);\n+            }\n+        }\n \n         let mut fulfillment_cx = self.fulfillment_cx.borrow_mut();\n "}]}