{"sha": "2df25adbed10c4f12e3a0b2d092c6d06c3746454", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkZjI1YWRiZWQxMGM0ZjEyZTNhMGIyZDA5MmM2ZDA2YzM3NDY0NTQ=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-09-28T22:28:19Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-10-07T21:54:01Z"}, "message": "Combine `std_inject::{no_core, no_std}` into `std_inject::injected_crate_name`.", "tree": {"sha": "49413850e202cb77f9db8b07d114efb91c0bf020", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/49413850e202cb77f9db8b07d114efb91c0bf020"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2df25adbed10c4f12e3a0b2d092c6d06c3746454", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2df25adbed10c4f12e3a0b2d092c6d06c3746454", "html_url": "https://github.com/rust-lang/rust/commit/2df25adbed10c4f12e3a0b2d092c6d06c3746454", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2df25adbed10c4f12e3a0b2d092c6d06c3746454/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75c155b834e3bd667ca50187741c1b7abbf9e3df", "url": "https://api.github.com/repos/rust-lang/rust/commits/75c155b834e3bd667ca50187741c1b7abbf9e3df", "html_url": "https://github.com/rust-lang/rust/commit/75c155b834e3bd667ca50187741c1b7abbf9e3df"}], "stats": {"total": 40, "additions": 15, "deletions": 25}, "files": [{"sha": "2290428264221205d3397bfdf8938ad39cdc9b2c", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2df25adbed10c4f12e3a0b2d092c6d06c3746454/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2df25adbed10c4f12e3a0b2d092c6d06c3746454/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=2df25adbed10c4f12e3a0b2d092c6d06c3746454", "patch": "@@ -95,13 +95,7 @@ pub fn lower_crate(sess: &Session,\n     let _ignore = sess.dep_graph.in_ignore();\n \n     LoweringContext {\n-        crate_root: if std_inject::no_core(krate) {\n-            None\n-        } else if std_inject::no_std(krate) {\n-            Some(\"core\")\n-        } else {\n-            Some(\"std\")\n-        },\n+        crate_root: std_inject::injected_crate_name(krate),\n         sess: sess,\n         parent_def: None,\n         resolver: resolver,"}, {"sha": "ece4f057b34effa5164b78a68383755e9e94666b", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2df25adbed10c4f12e3a0b2d092c6d06c3746454/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2df25adbed10c4f12e3a0b2d092c6d06c3746454/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=2df25adbed10c4f12e3a0b2d092c6d06c3746454", "patch": "@@ -739,13 +739,7 @@ impl<'a> ExtCtxt<'a> {\n     }\n \n     pub fn initialize(&mut self, user_exts: Vec<NamedSyntaxExtension>, krate: &ast::Crate) {\n-        if std_inject::no_core(&krate) {\n-            self.crate_root = None;\n-        } else if std_inject::no_std(&krate) {\n-            self.crate_root = Some(\"core\");\n-        } else {\n-            self.crate_root = Some(\"std\");\n-        }\n+        self.crate_root = std_inject::injected_crate_name(krate);\n \n         for (name, extension) in user_exts {\n             let ident = ast::Ident::with_empty_ctxt(name);"}, {"sha": "ecb437f31a5ad03d6462ed034d20a3a86a49fa28", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2df25adbed10c4f12e3a0b2d092c6d06c3746454/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2df25adbed10c4f12e3a0b2d092c6d06c3746454/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=2df25adbed10c4f12e3a0b2d092c6d06c3746454", "patch": "@@ -112,7 +112,7 @@ pub fn print_crate<'a>(cm: &'a CodeMap,\n                                       out,\n                                       ann,\n                                       is_expanded);\n-    if is_expanded && !std_inject::no_std(krate) {\n+    if is_expanded && !std_inject::injected_crate_name(krate).is_none() {\n         // We need to print `#![no_std]` (and its feature gate) so that\n         // compiling pretty-printed source won't inject libstd again.\n         // However we don't want these attributes in the AST because"}, {"sha": "1b63a2b70763aff5da297077c8134a958490c0d9", "filename": "src/libsyntax/std_inject.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2df25adbed10c4f12e3a0b2d092c6d06c3746454/src%2Flibsyntax%2Fstd_inject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2df25adbed10c4f12e3a0b2d092c6d06c3746454/src%2Flibsyntax%2Fstd_inject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fstd_inject.rs?ref=2df25adbed10c4f12e3a0b2d092c6d06c3746454", "patch": "@@ -34,23 +34,25 @@ fn ignored_span(sess: &ParseSess, sp: Span) -> Span {\n     return sp;\n }\n \n-pub fn no_core(krate: &ast::Crate) -> bool {\n-    attr::contains_name(&krate.attrs, \"no_core\")\n-}\n-\n-pub fn no_std(krate: &ast::Crate) -> bool {\n-    attr::contains_name(&krate.attrs, \"no_std\") || no_core(krate)\n+pub fn injected_crate_name(krate: &ast::Crate) -> Option<&'static str> {\n+    if attr::contains_name(&krate.attrs, \"no_core\") {\n+        None\n+    } else if attr::contains_name(&krate.attrs, \"no_std\") {\n+        Some(\"core\")\n+    } else {\n+        Some(\"std\")\n+    }\n }\n \n pub fn maybe_inject_crates_ref(sess: &ParseSess,\n                                mut krate: ast::Crate,\n                                alt_std_name: Option<String>)\n                                -> ast::Crate {\n-    if no_core(&krate) {\n-        return krate;\n-    }\n+    let name = match injected_crate_name(&krate) {\n+        Some(name) => name,\n+        None => return krate,\n+    };\n \n-    let name = if no_std(&krate) { \"core\" } else { \"std\" };\n     let crate_name = token::intern(&alt_std_name.unwrap_or(name.to_string()));\n \n     krate.module.items.insert(0, P(ast::Item {"}]}