{"sha": "f0fb7ab0e7a25a516d32f01bf9d7e0e30e054ec3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwZmI3YWIwZTdhMjVhNTE2ZDMyZjAxYmY5ZDdlMGUzMGUwNTRlYzM=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-08-11T11:46:12Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-08-12T14:54:12Z"}, "message": "Add missing link in fmt::format function", "tree": {"sha": "19fa08046f48b5d0e8d4df61433dcc7aea3ddfb9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/19fa08046f48b5d0e8d4df61433dcc7aea3ddfb9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f0fb7ab0e7a25a516d32f01bf9d7e0e30e054ec3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f0fb7ab0e7a25a516d32f01bf9d7e0e30e054ec3", "html_url": "https://github.com/rust-lang/rust/commit/f0fb7ab0e7a25a516d32f01bf9d7e0e30e054ec3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f0fb7ab0e7a25a516d32f01bf9d7e0e30e054ec3/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5938ef3c4b653db16c60f9a3d19a776a04c5194", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5938ef3c4b653db16c60f9a3d19a776a04c5194", "html_url": "https://github.com/rust-lang/rust/commit/e5938ef3c4b653db16c60f9a3d19a776a04c5194"}], "stats": {"total": 46, "additions": 24, "deletions": 22}, "files": [{"sha": "480fb4b9eaa2bebebaf3e3b21fbf0316e300b951", "filename": "src/liballoc/fmt.rs", "status": "modified", "additions": 22, "deletions": 20, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/f0fb7ab0e7a25a516d32f01bf9d7e0e30e054ec3/src%2Fliballoc%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0fb7ab0e7a25a516d32f01bf9d7e0e30e054ec3/src%2Fliballoc%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ffmt.rs?ref=f0fb7ab0e7a25a516d32f01bf9d7e0e30e054ec3", "patch": "@@ -149,7 +149,7 @@\n //!\n //! Additionally, the return value of this function is [`fmt::Result`] which is a\n //! type alias of [`Result`]`<(), `[`std::fmt::Error`]`>`. Formatting implementations\n-//! should ensure that they propagate errors from the [`Formatter`] (e.g., when\n+//! should ensure that they propagate errors from the [`Formatter`][`Formatter`] (e.g., when\n //! calling [`write!`]) however, they should never return errors spuriously. That\n //! is, a formatting implementation must and may only return an error if the\n //! passed-in [`Formatter`] returns an error. This is because, contrary to what\n@@ -209,7 +209,7 @@\n //!\n //! These two formatting traits have distinct purposes:\n //!\n-//! - [`fmt::Display`][`Display] implementations assert that the type can be faithfully\n+//! - [`fmt::Display`][`Display`] implementations assert that the type can be faithfully\n //!   represented as a UTF-8 string at all times. It is **not** expected that\n //!   all types implement the `Display` trait.\n //! - [`fmt::Debug`][`Debug`] implementations should be implemented for **all** public types.\n@@ -357,7 +357,7 @@\n //! * `-` - Currently not used\n //! * `#` - This flag is indicates that the \"alternate\" form of printing should\n //!         be used. The alternate forms are:\n-//!     * `#?` - pretty-print the `Debug` formatting\n+//!     * `#?` - pretty-print the [`Debug`] formatting\n //!     * `#x` - precedes the argument with a `0x`\n //!     * `#X` - precedes the argument with a `0x`\n //!     * `#b` - precedes the argument with a `0b`\n@@ -475,25 +475,25 @@\n //! them with the same character. For example, the `{` character is escaped with\n //! `{{` and the `}` character is escaped with `}}`.\n //!\n-//! [`format!`]: ../macro.format.html\n-//! [`usize`]: ../primitive.usize.html\n-//! [`isize`]: ../primitive.isize.html\n-//! [`i8`]: ../primitive.i8.html\n+//! [`format!`]: ../../macro.format.html\n+//! [`usize`]: ../../std/primitive.usize.html\n+//! [`isize`]: ../../std/primitive.isize.html\n+//! [`i8`]: ../../std/primitive.i8.html\n //! [`Display`]: trait.Display.html\n //! [`Binary`]: trait.Binary.html\n //! [`fmt::Result`]: type.Result.html\n-//! [`Result`]: ../result/enum.Result.html\n+//! [`Result`]: ../../std/result/enum.Result.html\n //! [`std::fmt::Error`]: struct.Error.html\n //! [`Formatter`]: struct.Formatter.html\n-//! [`write!`]: ../macro.write.html\n+//! [`write!`]: ../../std/macro.write.html\n //! [`Debug`]: trait.Debug.html\n-//! [`format!`]: ../macro.format.html\n-//! [`writeln!`]: ../macro.writeln.html\n-//! [`write_fmt`]: ../io/trait.Write.html#method.write_fmt\n-//! [`std::io::Write`]: ../io/trait.Write.html\n-//! [`println!`]: ../macro.println.html\n-//! [`write!`]: ../macro.write.html\n-//! [`format_args!`]: ../macro.format_args.html\n+//! [`format!`]: ../../std/macro.format.html\n+//! [`writeln!`]: ../../std/macro.writeln.html\n+//! [`write_fmt`]: ../../std/io/trait.Write.html#method.write_fmt\n+//! [`std::io::Write`]: ../../std/io/trait.Write.html\n+//! [`println!`]: ../../std/macro.println.html\n+//! [`write!`]: ../../std/macro.write.html\n+//! [`format_args!`]: ../../std/macro.format_args.html\n //! [`fmt::Arguments`]: struct.Arguments.html\n //! [`write`]: fn.write.html\n //! [`format`]: fn.format.html\n@@ -521,10 +521,10 @@ pub use core::fmt::{DebugList, DebugMap, DebugSet, DebugStruct, DebugTuple};\n \n use string;\n \n-/// The `format` function takes an `Arguments` struct and returns the resulting\n+/// The `format` function takes an [`Arguments`] struct and returns the resulting\n /// formatted string.\n ///\n-/// The `Arguments` instance can be created with the `format_args!` macro.\n+/// The [`Arguments`] instance can be created with the [`format_args!`] macro.\n ///\n /// # Examples\n ///\n@@ -537,15 +537,17 @@ use string;\n /// assert_eq!(s, \"Hello, world!\");\n /// ```\n ///\n-/// Please note that using [`format!`][format!] might be preferrable.\n+/// Please note that using [`format!`] might be preferrable.\n /// Example:\n ///\n /// ```\n /// let s = format!(\"Hello, {}!\", \"world\");\n /// assert_eq!(s, \"Hello, world!\");\n /// ```\n ///\n-/// [format!]: ../macro.format.html\n+/// [`Arguments`]: struct.Arguments.html\n+/// [`format_args!`]: ../../std/macro.format_args.html\n+/// [`format!`]: ../../std/macro.format.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn format(args: Arguments) -> string::String {\n     let capacity = args.estimated_capacity();"}, {"sha": "fc241c023cdaf25f6e3c8f3fe4e51db2e357ee38", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0fb7ab0e7a25a516d32f01bf9d7e0e30e054ec3/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0fb7ab0e7a25a516d32f01bf9d7e0e30e054ec3/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=f0fb7ab0e7a25a516d32f01bf9d7e0e30e054ec3", "patch": "@@ -67,7 +67,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             Ok(InferOk { obligations, value: () }) => {\n                 self.register_predicates(obligations);\n                 None\n-            },\n+            }\n             Err(e) => {\n                 Some(self.report_mismatched_types(cause, expected, actual, e))\n             }\n@@ -82,7 +82,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n     // Checks that the type of `expr` can be coerced to `expected`.\n     //\n-    // NB: This code relies on `self.diverges` to be accurate.  In\n+    // NB: This code relies on `self.diverges` to be accurate. In\n     // particular, assignments to `!` will be permitted if the\n     // diverges flag is currently \"always\".\n     pub fn demand_coerce_diag(&self,"}]}