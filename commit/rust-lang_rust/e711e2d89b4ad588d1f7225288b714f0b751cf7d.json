{"sha": "e711e2d89b4ad588d1f7225288b714f0b751cf7d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3MTFlMmQ4OWI0YWQ1ODhkMWY3MjI1Mjg4YjcxNGYwYjc1MWNmN2Q=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2014-12-17T13:42:50Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2014-12-22T15:06:14Z"}, "message": "Add `-Z unstable-options` debugging flag, which can then be used to\nextend the `rustc` command line interface with options that we do not\nwant to commit to making part of the long-term public interface for\n`rustc`.", "tree": {"sha": "383b3f43ae96cadee1e250592e0ac5ac9bc8cd76", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/383b3f43ae96cadee1e250592e0ac5ac9bc8cd76"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e711e2d89b4ad588d1f7225288b714f0b751cf7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e711e2d89b4ad588d1f7225288b714f0b751cf7d", "html_url": "https://github.com/rust-lang/rust/commit/e711e2d89b4ad588d1f7225288b714f0b751cf7d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e711e2d89b4ad588d1f7225288b714f0b751cf7d/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34d680009205de2302b902d8f9f5f7ae7a042f1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/34d680009205de2302b902d8f9f5f7ae7a042f1a", "html_url": "https://github.com/rust-lang/rust/commit/34d680009205de2302b902d8f9f5f7ae7a042f1a"}], "stats": {"total": 207, "additions": 158, "deletions": 49}, "files": [{"sha": "fd3819527538133f5ebdd0268ec591e2c86db42c", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 122, "deletions": 42, "changes": 164, "blob_url": "https://github.com/rust-lang/rust/blob/e711e2d89b4ad588d1f7225288b714f0b751cf7d/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e711e2d89b4ad588d1f7225288b714f0b751cf7d/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=e711e2d89b4ad588d1f7225288b714f0b751cf7d", "patch": "@@ -34,7 +34,6 @@ use syntax::parse::token::InternedString;\n \n use std::collections::HashMap;\n use std::collections::hash_map::Entry::{Occupied, Vacant};\n-use getopts::{optopt, optmulti, optflag, optflagopt};\n use getopts;\n use std::cell::{RefCell};\n use std::fmt;\n@@ -278,7 +277,8 @@ debugging_opts! {\n         PRINT_REGION_GRAPH,\n         PARSE_ONLY,\n         NO_TRANS,\n-        NO_ANALYSIS\n+        NO_ANALYSIS,\n+        UNSTABLE_OPTIONS\n     ]\n     0\n }\n@@ -330,7 +330,8 @@ pub fn debugging_opts_map() -> Vec<(&'static str, &'static str, u64)> {\n      (\"no-trans\", \"Run all passes except translation; no output\", NO_TRANS),\n      (\"no-analysis\", \"Parse and expand the source, but run no analysis and\",\n       NO_TRANS),\n-    ]\n+     (\"unstable-options\", \"Adds unstable command line options to rustc interface\",\n+      UNSTABLE_OPTIONS)]\n }\n \n #[deriving(Clone)]\n@@ -653,95 +654,174 @@ pub fn build_target_config(opts: &Options, sp: &SpanHandler) -> Config {\n     }\n }\n \n+/// Returns the \"short\" subset of the stable rustc command line options.\n pub fn short_optgroups() -> Vec<getopts::OptGroup> {\n+    rustc_short_optgroups().into_iter()\n+        .filter(|g|g.is_stable())\n+        .map(|g|g.opt_group)\n+        .collect()\n+}\n+\n+/// Returns all of the stable rustc command line options.\n+pub fn optgroups() -> Vec<getopts::OptGroup> {\n+    rustc_optgroups().into_iter()\n+        .filter(|g|g.is_stable())\n+        .map(|g|g.opt_group)\n+        .collect()\n+}\n+\n+#[deriving(Copy, Clone, PartialEq, Eq, Show)]\n+pub enum OptionStability { Stable, Unstable }\n+\n+#[deriving(Clone, PartialEq, Eq)]\n+pub struct RustcOptGroup {\n+    pub opt_group: getopts::OptGroup,\n+    pub stability: OptionStability,\n+}\n+\n+impl RustcOptGroup {\n+    pub fn is_stable(&self) -> bool {\n+        self.stability == OptionStability::Stable\n+    }\n+\n+    fn stable(g: getopts::OptGroup) -> RustcOptGroup {\n+        RustcOptGroup { opt_group: g, stability: OptionStability::Stable }\n+    }\n+\n+    fn unstable(g: getopts::OptGroup) -> RustcOptGroup {\n+        RustcOptGroup { opt_group: g, stability: OptionStability::Unstable }\n+    }\n+}\n+\n+// The `opt` local module holds wrappers around the `getopts` API that\n+// adds extra rustc-specific metadata to each option; such metadata\n+// is exposed by .  The public\n+// functions below ending with `_u` are the functions that return\n+// *unstable* options, i.e. options that are only enabled when the\n+// user also passes the `-Z unstable-options` debugging flag.\n+mod opt {\n+    // The `fn opt_u` etc below are written so that we can use them\n+    // in the future; do not warn about them not being used right now.\n+    #![allow(dead_code)]\n+\n+    use getopts;\n+    use super::RustcOptGroup;\n+\n+    type R = RustcOptGroup;\n+    type S<'a> = &'a str;\n+\n+    fn stable(g: getopts::OptGroup) -> R { RustcOptGroup::stable(g) }\n+    fn unstable(g: getopts::OptGroup) -> R { RustcOptGroup::unstable(g) }\n+\n+    // FIXME (pnkfelix): We default to stable since the current set of\n+    // options is defacto stable.  However, it would be good to revise the\n+    // code so that a stable option is the thing that takes extra effort\n+    // to encode.\n+\n+    pub fn     opt(a: S, b: S, c: S, d: S) -> R { stable(getopts::optopt(a, b, c, d)) }\n+    pub fn   multi(a: S, b: S, c: S, d: S) -> R { stable(getopts::optmulti(a, b, c, d)) }\n+    pub fn    flag(a: S, b: S, c: S)       -> R { stable(getopts::optflag(a, b, c)) }\n+    pub fn flagopt(a: S, b: S, c: S, d: S) -> R { stable(getopts::optflagopt(a, b, c, d)) }\n+\n+    pub fn     opt_u(a: S, b: S, c: S, d: S) -> R { unstable(getopts::optopt(a, b, c, d)) }\n+    pub fn   multi_u(a: S, b: S, c: S, d: S) -> R { unstable(getopts::optmulti(a, b, c, d)) }\n+    pub fn    flag_u(a: S, b: S, c: S)       -> R { unstable(getopts::optflag(a, b, c)) }\n+    pub fn flagopt_u(a: S, b: S, c: S, d: S) -> R { unstable(getopts::optflagopt(a, b, c, d)) }\n+}\n+\n+/// Returns the \"short\" subset of the rustc command line options,\n+/// including metadata for each option, such as whether the option is\n+/// part of the stable long-term interface for rustc.\n+pub fn rustc_short_optgroups() -> Vec<RustcOptGroup> {\n     vec![\n-        optflag(\"h\", \"help\", \"Display this message\"),\n-        optmulti(\"\", \"cfg\", \"Configure the compilation environment\", \"SPEC\"),\n-        optmulti(\"L\", \"\",   \"Add a directory to the library search path\", \"PATH\"),\n-        optmulti(\"l\", \"\",   \"Link the generated crate(s) to the specified native\n+        opt::flag(\"h\", \"help\", \"Display this message\"),\n+        opt::multi(\"\", \"cfg\", \"Configure the compilation environment\", \"SPEC\"),\n+        opt::multi(\"L\", \"\",   \"Add a directory to the library search path\", \"PATH\"),\n+        opt::multi(\"l\", \"\",   \"Link the generated crate(s) to the specified native\n                              library NAME. The optional KIND can be one of,\n                              static, dylib, or framework. If omitted, dylib is\n                              assumed.\", \"NAME[:KIND]\"),\n-        optmulti(\"\", \"crate-type\", \"Comma separated list of types of crates\n+        opt::multi(\"\", \"crate-type\", \"Comma separated list of types of crates\n                                     for the compiler to emit\",\n                  \"[bin|lib|rlib|dylib|staticlib|dep-info]\"),\n-        optopt(\"\", \"crate-name\", \"Specify the name of the crate being built\",\n+        opt::opt(\"\", \"crate-name\", \"Specify the name of the crate being built\",\n                \"NAME\"),\n-        optmulti(\"\", \"emit\", \"Comma separated list of types of output for \\\n+        opt::multi(\"\", \"emit\", \"Comma separated list of types of output for \\\n                               the compiler to emit\",\n                  \"[asm|llvm-bc|llvm-ir|obj|link]\"),\n-        optmulti(\"\", \"print\", \"Comma separated list of compiler information to \\\n+        opt::multi(\"\", \"print\", \"Comma separated list of compiler information to \\\n                                print on stdout\",\n                  \"[crate-name|output-file-names|sysroot]\"),\n-        optflag(\"g\",  \"\",  \"Equivalent to --debuginfo=2\"),\n-        optflag(\"O\", \"\", \"Equivalent to --opt-level=2\"),\n-        optopt(\"o\", \"\", \"Write output to <filename>\", \"FILENAME\"),\n-        optopt(\"\",  \"out-dir\", \"Write output to compiler-chosen filename \\\n+        opt::flag(\"g\",  \"\",  \"Equivalent to --debuginfo=2\"),\n+        opt::flag(\"O\", \"\", \"Equivalent to --opt-level=2\"),\n+        opt::opt(\"o\", \"\", \"Write output to <filename>\", \"FILENAME\"),\n+        opt::opt(\"\",  \"out-dir\", \"Write output to compiler-chosen filename \\\n                                 in <dir>\", \"DIR\"),\n-        optopt(\"\", \"explain\", \"Provide a detailed explanation of an error \\\n+        opt::opt(\"\", \"explain\", \"Provide a detailed explanation of an error \\\n                                message\", \"OPT\"),\n-        optflag(\"\", \"test\", \"Build a test harness\"),\n-        optopt(\"\", \"target\", \"Target triple cpu-manufacturer-kernel[-os] \\\n+        opt::flag(\"\", \"test\", \"Build a test harness\"),\n+        opt::opt(\"\", \"target\", \"Target triple cpu-manufacturer-kernel[-os] \\\n                               to compile for (see chapter 3.4 of \\\n                               http://www.sourceware.org/autobook/\n                               for details)\",\n                \"TRIPLE\"),\n-        optmulti(\"W\", \"warn\", \"Set lint warnings\", \"OPT\"),\n-        optmulti(\"A\", \"allow\", \"Set lint allowed\", \"OPT\"),\n-        optmulti(\"D\", \"deny\", \"Set lint denied\", \"OPT\"),\n-        optmulti(\"F\", \"forbid\", \"Set lint forbidden\", \"OPT\"),\n-        optmulti(\"C\", \"codegen\", \"Set a codegen option\", \"OPT[=VALUE]\"),\n-        optflag(\"V\", \"version\", \"Print version info and exit\"),\n-        optflag(\"v\", \"verbose\", \"Use verbose output\"),\n+        opt::multi(\"W\", \"warn\", \"Set lint warnings\", \"OPT\"),\n+        opt::multi(\"A\", \"allow\", \"Set lint allowed\", \"OPT\"),\n+        opt::multi(\"D\", \"deny\", \"Set lint denied\", \"OPT\"),\n+        opt::multi(\"F\", \"forbid\", \"Set lint forbidden\", \"OPT\"),\n+        opt::multi(\"C\", \"codegen\", \"Set a codegen option\", \"OPT[=VALUE]\"),\n+        opt::flag(\"V\", \"version\", \"Print version info and exit\"),\n+        opt::flag(\"v\", \"verbose\", \"Use verbose output\"),\n     ]\n }\n \n-// rustc command line options\n-pub fn optgroups() -> Vec<getopts::OptGroup> {\n-    let mut opts = short_optgroups();\n+/// Returns all rustc command line options, including metadata for\n+/// each option, such as whether the option is part of the stable\n+/// long-term interface for rustc.\n+pub fn rustc_optgroups() -> Vec<RustcOptGroup> {\n+    let mut opts = rustc_short_optgroups();\n     opts.push_all(&[\n-        optmulti(\"\", \"extern\", \"Specify where an external rust library is \\\n+        opt::multi(\"\", \"extern\", \"Specify where an external rust library is \\\n                                 located\",\n                  \"NAME=PATH\"),\n-        optopt(\"\", \"opt-level\", \"Optimize with possible levels 0-3\", \"LEVEL\"),\n-        optopt(\"\", \"sysroot\", \"Override the system root\", \"PATH\"),\n-        optmulti(\"Z\", \"\", \"Set internal debugging options\", \"FLAG\"),\n-        optopt(\"\", \"color\", \"Configure coloring of output:\n+        opt::opt(\"\", \"opt-level\", \"Optimize with possible levels 0-3\", \"LEVEL\"),\n+        opt::opt(\"\", \"sysroot\", \"Override the system root\", \"PATH\"),\n+        opt::multi(\"Z\", \"\", \"Set internal debugging options\", \"FLAG\"),\n+        opt::opt(\"\", \"color\", \"Configure coloring of output:\n             auto   = colorize, if output goes to a tty (default);\n             always = always colorize output;\n             never  = never colorize output\", \"auto|always|never\"),\n \n         // DEPRECATED\n-        optflag(\"\", \"print-crate-name\", \"Output the crate name and exit\"),\n-        optflag(\"\", \"print-file-name\", \"Output the file(s) that would be \\\n+        opt::flag(\"\", \"print-crate-name\", \"Output the crate name and exit\"),\n+        opt::flag(\"\", \"print-file-name\", \"Output the file(s) that would be \\\n                                         written if compilation \\\n                                         continued and exit\"),\n-        optopt(\"\",  \"debuginfo\",  \"Emit DWARF debug info to the objects created:\n+        opt::opt(\"\",  \"debuginfo\",  \"Emit DWARF debug info to the objects created:\n              0 = no debug info,\n              1 = line-tables only (for stacktraces and breakpoints),\n              2 = full debug info with variable and type information \\\n                     (same as -g)\", \"LEVEL\"),\n-        optflag(\"\", \"no-trans\", \"Run all passes except translation; no output\"),\n-        optflag(\"\", \"no-analysis\", \"Parse and expand the source, but run no \\\n+        opt::flag(\"\", \"no-trans\", \"Run all passes except translation; no output\"),\n+        opt::flag(\"\", \"no-analysis\", \"Parse and expand the source, but run no \\\n                                     analysis and produce no output\"),\n-        optflag(\"\", \"parse-only\", \"Parse only; do not compile, assemble, \\\n+        opt::flag(\"\", \"parse-only\", \"Parse only; do not compile, assemble, \\\n                                    or link\"),\n-        optflagopt(\"\", \"pretty\",\n+        opt::flagopt(\"\", \"pretty\",\n                    \"Pretty-print the input instead of compiling;\n                    valid types are: `normal` (un-annotated source),\n                    `expanded` (crates expanded),\n                    `typed` (crates expanded, with type annotations),\n                    `expanded,identified` (fully parenthesized, AST nodes with IDs), or\n                    `flowgraph=<nodeid>` (graphviz formatted flowgraph for node)\",\n                  \"TYPE\"),\n-        optflagopt(\"\", \"dep-info\",\n+        opt::flagopt(\"\", \"dep-info\",\n                  \"Output dependency info to <filename> after compiling, \\\n                   in a format suitable for use by Makefiles\", \"FILENAME\"),\n     ]);\n     opts\n }\n \n-\n // Convert strings provided as --cfg [cfgspec] into a crate_cfg\n pub fn parse_cfgspecs(cfgspecs: Vec<String> ) -> ast::CrateConfig {\n     cfgspecs.into_iter().map(|s| {"}, {"sha": "7a0a8fd50d444528e65b5d1f6faa63ac6a106d27", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 36, "deletions": 7, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/e711e2d89b4ad588d1f7225288b714f0b751cf7d/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e711e2d89b4ad588d1f7225288b714f0b751cf7d/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=e711e2d89b4ad588d1f7225288b714f0b751cf7d", "patch": "@@ -196,12 +196,16 @@ pub fn version(binary: &str, matches: &getopts::Matches) {\n     }\n }\n \n-fn usage(verbose: bool) {\n+fn usage(verbose: bool, include_unstable_options: bool) {\n     let groups = if verbose {\n-        config::optgroups()\n+        config::rustc_optgroups()\n     } else {\n-        config::short_optgroups()\n+        config::rustc_short_optgroups()\n     };\n+    let groups : Vec<_> = groups.into_iter()\n+        .filter(|x| include_unstable_options || x.is_stable())\n+        .map(|x|x.opt_group)\n+        .collect();\n     let message = format!(\"Usage: rustc [OPTIONS] INPUT\");\n     let extra_help = if verbose {\n         \"\"\n@@ -362,20 +366,45 @@ pub fn handle_options(mut args: Vec<String>) -> Option<getopts::Matches> {\n     let _binary = args.remove(0).unwrap();\n \n     if args.is_empty() {\n-        usage(false);\n+        // user did not write `-v` nor `-Z unstable-options`, so do not\n+        // include that extra information.\n+        usage(false, false);\n         return None;\n     }\n \n     let matches =\n         match getopts::getopts(args.as_slice(), config::optgroups().as_slice()) {\n             Ok(m) => m,\n-            Err(f) => {\n-                early_error(f.to_string().as_slice());\n+            Err(f_stable_attempt) => {\n+                // redo option parsing, including unstable options this time,\n+                // in anticipation that the mishandled option was one of the\n+                // unstable ones.\n+                let all_groups : Vec<getopts::OptGroup>\n+                    = config::rustc_optgroups().into_iter().map(|x|x.opt_group).collect();\n+                match getopts::getopts(args.as_slice(), all_groups.as_slice()) {\n+                    Ok(m_unstable) => {\n+                        let r = m_unstable.opt_strs(\"Z\");\n+                        let include_unstable_options = r.iter().any(|x| *x == \"unstable-options\");\n+                        if include_unstable_options {\n+                            m_unstable\n+                        } else {\n+                            early_error(f_stable_attempt.to_string().as_slice());\n+                        }\n+                    }\n+                    Err(_) => {\n+                        // ignore the error from the unstable attempt; just\n+                        // pass the error we got from the first try.\n+                        early_error(f_stable_attempt.to_string().as_slice());\n+                    }\n+                }\n             }\n         };\n \n+    let r = matches.opt_strs(\"Z\");\n+    let include_unstable_options = r.iter().any(|x| *x == \"unstable-options\");\n+\n     if matches.opt_present(\"h\") || matches.opt_present(\"help\") {\n-        usage(matches.opt_present(\"verbose\"));\n+        usage(matches.opt_present(\"verbose\"), include_unstable_options);\n         return None;\n     }\n "}]}