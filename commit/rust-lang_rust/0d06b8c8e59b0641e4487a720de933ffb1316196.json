{"sha": "0d06b8c8e59b0641e4487a720de933ffb1316196", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkMDZiOGM4ZTU5YjA2NDFlNDQ4N2E3MjBkZTkzM2ZmYjEzMTYxOTY=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-10-18T17:09:49Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-10-28T08:16:10Z"}, "message": "Add note linking to Rust 2018 path semantics docs.\n\nThis commit extends existing path suggestions to link to documentation\non the changed semantics of `use` in Rust 2018.", "tree": {"sha": "d72122763acca185238b2c86a867863579c70d91", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d72122763acca185238b2c86a867863579c70d91"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d06b8c8e59b0641e4487a720de933ffb1316196", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEWwgxPGhT5b/6kagXAXYLT59T8VQFAlvVcEoACgkQAXYLT59T\n8VT9vA//WQnTBacsx+M2nIbv+gyaA0Amlx4SqwwlXxa3UlIsw5zu3fk65YV+WpcN\nGKYkJCWSCw2/TQgrMSxGROt1xv1pSctqrvOzjD7i9ZFblXdfVH7Fp7dTMwGSp8YV\nSX04aoCBShAnc9vRjaVYBZk533cFRgyzD+vr60P484uiNV0vTJqVyFE3NPIn4nhi\nBGqhYqtfYwM6NmY9MB5xYvN420sTkTbPNTxVADWmTva6Sd0pEZpHFrpasUG6LLdz\ntz6qiFm/S0Qj1XNypegq0CBj4HqzLOjKcZFTopSKi9ggbFQziC+2hvEE2/idfW37\n39Cm2Nhxdg2oSHAJ+buXlmznVnKo3BAsdal5ghyY0aC/nQvCOZimHpeklNj+vM/B\n7dya0aNdbgsDK3A//RctzLfDyFETuK/gyrQiO21hKxXnmy83pPSckrVJOf1PpflU\nP1t+RsYHnSxaNk4aXvqsOsgcHA+Bwg/FjUhCG3gJ94QPS1UBGPL+tr+egXJ4QoSG\n9S4laVJw/kay6HmKwGHpk8xhkWjCAd9XpKhR3FbAG0Wf2nhoiprKPKeWMBNqKV1x\n2X9UT6DQUYJJrpEeZUv1vcuMkgA51FjLXx2A3araiBfcJbdnfdcpuEjHNlVtpj2d\n0wHESOkVE8ZOBGziaiU8G259GS4XZXWzp+eLpulCp3ENQ6Y+99g=\n=n+UU\n-----END PGP SIGNATURE-----", "payload": "tree d72122763acca185238b2c86a867863579c70d91\nparent 1982f1887ad524951f24c12a6cc7bf05148aec14\nauthor David Wood <david@davidtw.co> 1539882589 +0200\ncommitter David Wood <david@davidtw.co> 1540714570 +0100\n\nAdd note linking to Rust 2018 path semantics docs.\n\nThis commit extends existing path suggestions to link to documentation\non the changed semantics of `use` in Rust 2018.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d06b8c8e59b0641e4487a720de933ffb1316196", "html_url": "https://github.com/rust-lang/rust/commit/0d06b8c8e59b0641e4487a720de933ffb1316196", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d06b8c8e59b0641e4487a720de933ffb1316196/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1982f1887ad524951f24c12a6cc7bf05148aec14", "url": "https://api.github.com/repos/rust-lang/rust/commits/1982f1887ad524951f24c12a6cc7bf05148aec14", "html_url": "https://github.com/rust-lang/rust/commit/1982f1887ad524951f24c12a6cc7bf05148aec14"}], "stats": {"total": 92, "additions": 63, "deletions": 29}, "files": [{"sha": "50ab8ef9c7be7cfaa543466579af248d96beaa5a", "filename": "src/librustc_resolve/error_reporting.rs", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0d06b8c8e59b0641e4487a720de933ffb1316196/src%2Flibrustc_resolve%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d06b8c8e59b0641e4487a720de933ffb1316196/src%2Flibrustc_resolve%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Ferror_reporting.rs?ref=0d06b8c8e59b0641e4487a720de933ffb1316196", "patch": "@@ -26,7 +26,7 @@ impl<'a, 'b:'a, 'c: 'b> ImportResolver<'a, 'b, 'c> {\n         span: Span,\n         path: Vec<Segment>,\n         parent_scope: &ParentScope<'b>,\n-    ) -> Option<Vec<Segment>> {\n+    ) -> Option<(Vec<Segment>, Option<String>)> {\n         debug!(\"make_path_suggestion: span={:?} path={:?}\", span, path);\n         // If we don't have a path to suggest changes to, then return.\n         if path.is_empty() {\n@@ -65,13 +65,13 @@ impl<'a, 'b:'a, 'c: 'b> ImportResolver<'a, 'b, 'c> {\n         span: Span,\n         mut path: Vec<Segment>,\n         parent_scope: &ParentScope<'b>,\n-    ) -> Option<Vec<Segment>> {\n+    ) -> Option<(Vec<Segment>, Option<String>)> {\n         // Replace first ident with `self` and check if that is valid.\n         path[0].ident.name = keywords::SelfValue.name();\n         let result = self.resolve_path(None, &path, None, parent_scope, false, span, CrateLint::No);\n         debug!(\"make_missing_self_suggestion: path={:?} result={:?}\", path, result);\n         if let PathResult::Module(..) = result {\n-            Some(path)\n+            Some((path, None))\n         } else {\n             None\n         }\n@@ -89,13 +89,20 @@ impl<'a, 'b:'a, 'c: 'b> ImportResolver<'a, 'b, 'c> {\n         span: Span,\n         mut path: Vec<Segment>,\n         parent_scope: &ParentScope<'b>,\n-    ) -> Option<Vec<Segment>> {\n+    ) -> Option<(Vec<Segment>, Option<String>)> {\n         // Replace first ident with `crate` and check if that is valid.\n         path[0].ident.name = keywords::Crate.name();\n         let result = self.resolve_path(None, &path, None, parent_scope, false, span, CrateLint::No);\n         debug!(\"make_missing_crate_suggestion:  path={:?} result={:?}\", path, result);\n         if let PathResult::Module(..) = result {\n-            Some(path)\n+            Some((\n+                path,\n+                Some(\n+                    \"`use` statements changed in Rust 2018; read more at \\\n+                     <https://doc.rust-lang.org/edition-guide/rust-2018/module-system/path-\\\n+                     clarity.html>\".to_string()\n+                ),\n+            ))\n         } else {\n             None\n         }\n@@ -113,13 +120,13 @@ impl<'a, 'b:'a, 'c: 'b> ImportResolver<'a, 'b, 'c> {\n         span: Span,\n         mut path: Vec<Segment>,\n         parent_scope: &ParentScope<'b>,\n-    ) -> Option<Vec<Segment>> {\n+    ) -> Option<(Vec<Segment>, Option<String>)> {\n         // Replace first ident with `crate` and check if that is valid.\n         path[0].ident.name = keywords::Super.name();\n         let result = self.resolve_path(None, &path, None, parent_scope, false, span, CrateLint::No);\n         debug!(\"make_missing_super_suggestion:  path={:?} result={:?}\", path, result);\n         if let PathResult::Module(..) = result {\n-            Some(path)\n+            Some((path, None))\n         } else {\n             None\n         }\n@@ -140,7 +147,7 @@ impl<'a, 'b:'a, 'c: 'b> ImportResolver<'a, 'b, 'c> {\n         span: Span,\n         mut path: Vec<Segment>,\n         parent_scope: &ParentScope<'b>,\n-    ) -> Option<Vec<Segment>> {\n+    ) -> Option<(Vec<Segment>, Option<String>)> {\n         // Need to clone else we can't call `resolve_path` without a borrow error. We also store\n         // into a `BTreeMap` so we can get consistent ordering (and therefore the same diagnostic)\n         // each time.\n@@ -162,7 +169,7 @@ impl<'a, 'b:'a, 'c: 'b> ImportResolver<'a, 'b, 'c> {\n             debug!(\"make_external_crate_suggestion: name={:?} path={:?} result={:?}\",\n                     name, path, result);\n             if let PathResult::Module(..) = result {\n-                return Some(path)\n+                return Some((path, None));\n             }\n         }\n "}, {"sha": "359640ccda2b1eb6360e868f45c0dd69c42df2b6", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 45, "deletions": 20, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/0d06b8c8e59b0641e4487a720de933ffb1316196/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d06b8c8e59b0641e4487a720de933ffb1316196/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=0d06b8c8e59b0641e4487a720de933ffb1316196", "patch": "@@ -707,7 +707,7 @@ impl<'a, 'b:'a, 'c: 'b> ImportResolver<'a, 'b, 'c> {\n                         }\n                     }\n                 });\n-            } else if let Some((span, err)) = error {\n+            } else if let Some((span, err, note)) = error {\n                 errors = true;\n \n                 if let SingleImport { source, ref result, .. } = import.subclass {\n@@ -737,7 +737,7 @@ impl<'a, 'b:'a, 'c: 'b> ImportResolver<'a, 'b, 'c> {\n                         &import.subclass,\n                         span,\n                     );\n-                    error_vec.push((span, path, err));\n+                    error_vec.push((span, path, err, note));\n                     seen_spans.insert(span);\n                     prev_root_id = import.root_id;\n                 }\n@@ -829,27 +829,45 @@ impl<'a, 'b:'a, 'c: 'b> ImportResolver<'a, 'b, 'c> {\n         }\n     }\n \n-    fn throw_unresolved_import_error(&self, error_vec: Vec<(Span, String, String)>,\n-                                     span: Option<MultiSpan>) {\n+    fn throw_unresolved_import_error(\n+        &self,\n+        error_vec: Vec<(Span, String, String, Option<String>)>,\n+        span: Option<MultiSpan>,\n+    ) {\n         let max_span_label_msg_count = 10;  // upper limit on number of span_label message.\n-        let (span, msg) = if error_vec.is_empty() {\n-            (span.unwrap(), \"unresolved import\".to_string())\n+        let (span, msg, note) = if error_vec.is_empty() {\n+            (span.unwrap(), \"unresolved import\".to_string(), None)\n         } else {\n-            let span = MultiSpan::from_spans(error_vec.clone().into_iter()\n-                .map(|elem: (Span, String, String)| { elem.0 })\n-                .collect());\n+            let span = MultiSpan::from_spans(\n+                error_vec.clone().into_iter()\n+                .map(|elem: (Span, String, String, Option<String>)| elem.0)\n+                .collect()\n+            );\n+\n+            let note: Option<String> = error_vec.clone().into_iter()\n+                .filter_map(|elem: (Span, String, String, Option<String>)| elem.3)\n+                .last();\n+\n             let path_vec: Vec<String> = error_vec.clone().into_iter()\n-                .map(|elem: (Span, String, String)| { format!(\"`{}`\", elem.1) })\n+                .map(|elem: (Span, String, String, Option<String>)| format!(\"`{}`\", elem.1))\n                 .collect();\n             let path = path_vec.join(\", \");\n-            let msg = format!(\"unresolved import{} {}\",\n-                if path_vec.len() > 1 { \"s\" } else { \"\" }, path);\n-            (span, msg)\n+            let msg = format!(\n+                \"unresolved import{} {}\",\n+                if path_vec.len() > 1 { \"s\" } else { \"\" },\n+                path\n+            );\n+\n+            (span, msg, note)\n         };\n+\n         let mut err = struct_span_err!(self.resolver.session, span, E0432, \"{}\", &msg);\n         for span_error in error_vec.into_iter().take(max_span_label_msg_count) {\n             err.span_label(span_error.0, span_error.2);\n         }\n+        if let Some(note) = note {\n+            err.note(&note);\n+        }\n         err.emit();\n     }\n \n@@ -945,7 +963,10 @@ impl<'a, 'b:'a, 'c: 'b> ImportResolver<'a, 'b, 'c> {\n     }\n \n     // If appropriate, returns an error to report.\n-    fn finalize_import(&mut self, directive: &'b ImportDirective<'b>) -> Option<(Span, String)> {\n+    fn finalize_import(\n+        &mut self,\n+        directive: &'b ImportDirective<'b>\n+    ) -> Option<(Span, String, Option<String>)> {\n         self.current_module = directive.parent_scope.module;\n         let ImportDirective { ref module_path, span, .. } = *directive;\n \n@@ -969,15 +990,16 @@ impl<'a, 'b:'a, 'c: 'b> ImportResolver<'a, 'b, 'c> {\n                 return None;\n             }\n             PathResult::Failed(span, msg, true) => {\n-                return if let Some(suggested_path) = self.make_path_suggestion(\n+                return if let Some((suggested_path, note)) = self.make_path_suggestion(\n                     span, module_path.clone(), &directive.parent_scope\n                 ) {\n                     Some((\n                         span,\n-                        format!(\"Did you mean `{}`?\", Segment::names_to_string(&suggested_path))\n+                        format!(\"Did you mean `{}`?\", Segment::names_to_string(&suggested_path)),\n+                        note,\n                     ))\n                 } else {\n-                    Some((span, msg))\n+                    Some((span, msg, None))\n                 };\n             },\n             _ => return None,\n@@ -1002,8 +1024,11 @@ impl<'a, 'b:'a, 'c: 'b> ImportResolver<'a, 'b, 'c> {\n                 if let ModuleOrUniformRoot::Module(module) = module {\n                     if module.def_id() == directive.parent_scope.module.def_id() {\n                         // Importing a module into itself is not allowed.\n-                        return Some((directive.span,\n-                            \"Cannot glob-import a module into itself.\".to_string()));\n+                        return Some((\n+                            directive.span,\n+                            \"Cannot glob-import a module into itself.\".to_string(),\n+                            None,\n+                        ));\n                     }\n                 }\n                 if !is_prelude &&\n@@ -1101,7 +1126,7 @@ impl<'a, 'b:'a, 'c: 'b> ImportResolver<'a, 'b, 'c> {\n                         }\n                     }\n                 };\n-                Some((span, msg))\n+                Some((span, msg, None))\n             } else {\n                 // `resolve_ident_in_module` reported a privacy error.\n                 self.import_dummy_binding(directive);"}, {"sha": "2293f4b001749cc45642dad5ae6fd1c840edd75d", "filename": "src/test/ui/rust-2018/local-path-suggestions-2018.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d06b8c8e59b0641e4487a720de933ffb1316196/src%2Ftest%2Fui%2Frust-2018%2Flocal-path-suggestions-2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0d06b8c8e59b0641e4487a720de933ffb1316196/src%2Ftest%2Fui%2Frust-2018%2Flocal-path-suggestions-2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Flocal-path-suggestions-2018.stderr?ref=0d06b8c8e59b0641e4487a720de933ffb1316196", "patch": "@@ -3,6 +3,8 @@ error[E0432]: unresolved import `foo`\n    |\n LL |     use foo::Bar;\n    |         ^^^ Did you mean `crate::foo`?\n+   |\n+   = note: `use` statements changed in Rust 2018; read more at <https://doc.rust-lang.org/edition-guide/rust-2018/module-system/path-clarity.html>\n \n error[E0432]: unresolved import `foo`\n   --> $DIR/local-path-suggestions-2018.rs:27:5"}]}