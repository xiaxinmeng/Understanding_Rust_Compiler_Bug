{"sha": "8817397828f2e4aedf4251bdc02c6299d1d1654c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4MTczOTc4MjhmMmU0YWVkZjQyNTFiZGMwMmM2Mjk5ZDFkMTY1NGM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-23T22:42:03Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-24T08:11:48Z"}, "message": "test harness informs tests about suitable temp dir", "tree": {"sha": "240d25654b21020332b279da5fb288fb8a04a209", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/240d25654b21020332b279da5fb288fb8a04a209"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8817397828f2e4aedf4251bdc02c6299d1d1654c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8817397828f2e4aedf4251bdc02c6299d1d1654c", "html_url": "https://github.com/rust-lang/rust/commit/8817397828f2e4aedf4251bdc02c6299d1d1654c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8817397828f2e4aedf4251bdc02c6299d1d1654c/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ba588db496c99eb6a9280400271af4cb1958a91", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ba588db496c99eb6a9280400271af4cb1958a91", "html_url": "https://github.com/rust-lang/rust/commit/3ba588db496c99eb6a9280400271af4cb1958a91"}], "stats": {"total": 23, "additions": 16, "deletions": 7}, "files": [{"sha": "d082a2cc484bd4238129f5849c3bff49ad2b4052", "filename": "tests/compiletest.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8817397828f2e4aedf4251bdc02c6299d1d1654c/tests%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8817397828f2e4aedf4251bdc02c6299d1d1654c/tests%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompiletest.rs?ref=8817397828f2e4aedf4251bdc02c6299d1d1654c", "patch": "@@ -110,6 +110,8 @@ fn get_target() -> String {\n fn test_runner(_tests: &[&()]) {\n     // Add a test env var to do environment communication tests.\n     std::env::set_var(\"MIRI_ENV_VAR_TEST\", \"0\");\n+    // Let the tests know where to store temp files (they might run for a different target, which can make this hard to find).\n+    std::env::set_var(\"MIRI_TEMP\", std::env::temp_dir());\n \n     let target = get_target();\n     miri_pass(\"tests/run-pass\", &target);"}, {"sha": "104ba46c3e458f839bde5dfff06ae9b0a90042b9", "filename": "tests/run-pass/fs.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8817397828f2e4aedf4251bdc02c6299d1d1654c/tests%2Frun-pass%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8817397828f2e4aedf4251bdc02c6299d1d1654c/tests%2Frun-pass%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Ffs.rs?ref=8817397828f2e4aedf4251bdc02c6299d1d1654c", "patch": "@@ -16,19 +16,21 @@ fn main() {\n     test_directory();\n }\n \n+fn tmp() -> PathBuf {\n+    std::env::var(\"MIRI_TEMP\").map(PathBuf::from).unwrap_or_else(|_| std::env::temp_dir())\n+}\n+\n /// Prepare: compute filename and make sure the file does not exist.\n fn prepare(filename: &str) -> PathBuf {\n-    let tmp = std::env::temp_dir();\n-    let path = tmp.join(filename);\n+    let path = tmp().join(filename);\n     // Clean the paths for robustness.\n     remove_file(&path).ok();\n     path\n }\n \n /// Prepare directory: compute directory name and make sure it does not exist.\n fn prepare_dir(dirname: &str) -> PathBuf {\n-    let tmp = std::env::temp_dir();\n-    let path = tmp.join(&dirname);\n+    let path = tmp().join(&dirname);\n     // Clean the directory for robustness.\n     remove_dir_all(&path).ok();\n     path"}, {"sha": "064c00e81bb86f78f1fa39d0f9321e2fd8a1750b", "filename": "tests/run-pass/libc.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8817397828f2e4aedf4251bdc02c6299d1d1654c/tests%2Frun-pass%2Flibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8817397828f2e4aedf4251bdc02c6299d1d1654c/tests%2Frun-pass%2Flibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Flibc.rs?ref=8817397828f2e4aedf4251bdc02c6299d1d1654c", "patch": "@@ -2,19 +2,24 @@\n // compile-flags: -Zmiri-disable-isolation\n \n #![feature(rustc_private)]\n+#![allow(unused)] // necessary on macos due to conditional compilation\n+\n+use std::path::PathBuf;\n \n-#[allow(unused)] // necessary on macos due to conditional compilation\n extern crate libc;\n \n+fn tmp() -> PathBuf {\n+    std::env::var(\"MIRI_TEMP\").map(PathBuf::from).unwrap_or_else(|_| std::env::temp_dir())\n+}\n+\n #[cfg(not(target_os = \"macos\"))]\n fn test_posix_fadvise() {\n     use std::convert::TryInto;\n-    use std::env::temp_dir;\n     use std::fs::{File, remove_file};\n     use std::io::Write;\n     use std::os::unix::io::AsRawFd;\n \n-    let path = temp_dir().join(\"miri_test_libc.txt\");\n+    let path = tmp().join(\"miri_test_libc.txt\");\n     // Cleanup before test\n     remove_file(&path).ok();\n "}]}