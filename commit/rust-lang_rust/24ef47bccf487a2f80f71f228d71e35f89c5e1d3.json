{"sha": "24ef47bccf487a2f80f71f228d71e35f89c5e1d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0ZWY0N2JjY2Y0ODdhMmY4MGY3MWYyMjhkNzFlMzVmODljNWUxZDM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-09-07T15:14:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-09-07T15:14:52Z"}, "message": "Auto merge of #53893 - petrochenkov:cfgexpr, r=pnkfelix\n\nValidate syntax of `cfg` attributes\n\nFixes https://github.com/rust-lang/rust/issues/53298", "tree": {"sha": "69dadaae1b4c213d5e085e4ea5b781f59424bba0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/69dadaae1b4c213d5e085e4ea5b781f59424bba0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/24ef47bccf487a2f80f71f228d71e35f89c5e1d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/24ef47bccf487a2f80f71f228d71e35f89c5e1d3", "html_url": "https://github.com/rust-lang/rust/commit/24ef47bccf487a2f80f71f228d71e35f89c5e1d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/24ef47bccf487a2f80f71f228d71e35f89c5e1d3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a3292f163da3327523ddec5bc44d17c2378ec37", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a3292f163da3327523ddec5bc44d17c2378ec37", "html_url": "https://github.com/rust-lang/rust/commit/5a3292f163da3327523ddec5bc44d17c2378ec37"}, {"sha": "a6adeae104c7dcc20025d92b984fd56427d93c1f", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6adeae104c7dcc20025d92b984fd56427d93c1f", "html_url": "https://github.com/rust-lang/rust/commit/a6adeae104c7dcc20025d92b984fd56427d93c1f"}], "stats": {"total": 234, "additions": 180, "deletions": 54}, "files": [{"sha": "73c9729feee32864d18ea9a227558fbf4a67fa03", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 25, "deletions": 14, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/24ef47bccf487a2f80f71f228d71e35f89c5e1d3/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24ef47bccf487a2f80f71f228d71e35f89c5e1d3/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=24ef47bccf487a2f80f71f228d71e35f89c5e1d3", "patch": "@@ -21,7 +21,7 @@ use rustc_target::spec::{Target, TargetTriple};\n use lint;\n use middle::cstore;\n \n-use syntax::ast::{self, IntTy, UintTy};\n+use syntax::ast::{self, IntTy, UintTy, MetaItemKind};\n use syntax::source_map::{FileName, FilePathMapping};\n use syntax::edition::{Edition, EDITION_NAME_LIST, DEFAULT_EDITION};\n use syntax::parse::token;\n@@ -1735,22 +1735,33 @@ pub fn parse_cfgspecs(cfgspecs: Vec<String>) -> ast::CrateConfig {\n             let mut parser =\n                 parse::new_parser_from_source_str(&sess, FileName::CfgSpec, s.to_string());\n \n-            let meta_item = panictry!(parser.parse_meta_item());\n+            macro_rules! error {($reason: expr) => {\n+                early_error(ErrorOutputType::default(),\n+                            &format!(concat!(\"invalid `--cfg` argument: `{}` (\", $reason, \")\"), s));\n+            }}\n \n-            if parser.token != token::Eof {\n-                early_error(\n-                    ErrorOutputType::default(),\n-                    &format!(\"invalid --cfg argument: {}\", s),\n-                )\n-            } else if meta_item.is_meta_item_list() {\n-                let msg = format!(\n-                    \"invalid predicate in --cfg command line argument: `{}`\",\n-                    meta_item.ident\n-                );\n-                early_error(ErrorOutputType::default(), &msg)\n+            match &mut parser.parse_meta_item() {\n+                Ok(meta_item) if parser.token == token::Eof => {\n+                    if meta_item.ident.segments.len() != 1 {\n+                        error!(\"argument key must be an identifier\");\n+                    }\n+                    match &meta_item.node {\n+                        MetaItemKind::List(..) => {\n+                            error!(r#\"expected `key` or `key=\"value\"`\"#);\n+                        }\n+                        MetaItemKind::NameValue(lit) if !lit.node.is_str() => {\n+                            error!(\"argument value must be a string\");\n+                        }\n+                        MetaItemKind::NameValue(..) | MetaItemKind::Word => {\n+                            return (meta_item.name(), meta_item.value_str());\n+                        }\n+                    }\n+                }\n+                Ok(..) => {}\n+                Err(err) => err.cancel(),\n             }\n \n-            (meta_item.name(), meta_item.value_str())\n+            error!(r#\"expected `key` or `key=\"value\"`\"#);\n         })\n         .collect::<ast::CrateConfig>()\n }"}, {"sha": "5fc9c5578e1f202cd445fdd1d4693641e3f6b9c4", "filename": "src/libsyntax/attr/builtin.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/24ef47bccf487a2f80f71f228d71e35f89c5e1d3/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24ef47bccf487a2f80f71f228d71e35f89c5e1d3/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fbuiltin.rs?ref=24ef47bccf487a2f80f71f228d71e35f89c5e1d3", "patch": "@@ -433,7 +433,21 @@ pub fn cfg_matches(cfg: &ast::MetaItem, sess: &ParseSess, features: Option<&Feat\n         if let (Some(feats), Some(gated_cfg)) = (features, GatedCfg::gate(cfg)) {\n             gated_cfg.check_and_emit(sess, feats);\n         }\n-        sess.config.contains(&(cfg.name(), cfg.value_str()))\n+        let error = |span, msg| { sess.span_diagnostic.span_err(span, msg); true };\n+        if cfg.ident.segments.len() != 1 {\n+            return error(cfg.ident.span, \"`cfg` predicate key must be an identifier\");\n+        }\n+        match &cfg.node {\n+            MetaItemKind::List(..) => {\n+                error(cfg.span, \"unexpected parentheses after `cfg` predicate key\")\n+            }\n+            MetaItemKind::NameValue(lit) if !lit.node.is_str() => {\n+                error(lit.span, \"literal in `cfg` predicate value must be a string\")\n+            }\n+            MetaItemKind::NameValue(..) | MetaItemKind::Word => {\n+                sess.config.contains(&(cfg.name(), cfg.value_str()))\n+            }\n+        }\n     })\n }\n "}, {"sha": "63b70b1224840a6afb70c42754e0bec111d7feda", "filename": "src/libsyntax/config.rs", "status": "modified", "additions": 32, "deletions": 12, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/24ef47bccf487a2f80f71f228d71e35f89c5e1d3/src%2Flibsyntax%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24ef47bccf487a2f80f71f228d71e35f89c5e1d3/src%2Flibsyntax%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fconfig.rs?ref=24ef47bccf487a2f80f71f228d71e35f89c5e1d3", "patch": "@@ -116,25 +116,45 @@ impl<'a> StripUnconfigured<'a> {\n     // Determine if a node with the given attributes should be included in this configuration.\n     pub fn in_cfg(&mut self, attrs: &[ast::Attribute]) -> bool {\n         attrs.iter().all(|attr| {\n-            let mis = if !is_cfg(attr) {\n+            if !is_cfg(attr) {\n                 return true;\n-            } else if let Some(mis) = attr.meta_item_list() {\n-                mis\n+            }\n+\n+            let error = |span, msg, suggestion: &str| {\n+                let mut err = self.sess.span_diagnostic.struct_span_err(span, msg);\n+                if !suggestion.is_empty() {\n+                    err.span_suggestion(span, \"expected syntax is\", suggestion.into());\n+                }\n+                err.emit();\n+                true\n+            };\n+\n+            let meta_item = if let Some(meta_item) = attr.meta() {\n+                meta_item\n             } else {\n-                return true;\n+                // Not a well-formed meta-item. Why? We don't know.\n+                return error(attr.span, \"`cfg` is not a well-formed meta-item\",\n+                                        \"#[cfg(/* predicate */)]\");\n+            };\n+            let nested_meta_items = if let Some(nested_meta_items) = meta_item.meta_item_list() {\n+                nested_meta_items\n+            } else {\n+                return error(meta_item.span, \"`cfg` is not followed by parentheses\",\n+                                             \"cfg(/* predicate */)\");\n             };\n \n-            if mis.len() != 1 {\n-                self.sess.span_diagnostic.span_err(attr.span, \"expected 1 cfg-pattern\");\n-                return true;\n+            if nested_meta_items.is_empty() {\n+                return error(meta_item.span, \"`cfg` predicate is not specified\", \"\");\n+            } else if nested_meta_items.len() > 1 {\n+                return error(nested_meta_items.last().unwrap().span,\n+                             \"multiple `cfg` predicates are specified\", \"\");\n             }\n \n-            if !mis[0].is_meta_item() {\n-                self.sess.span_diagnostic.span_err(mis[0].span, \"unexpected literal\");\n-                return true;\n+            match nested_meta_items[0].meta_item() {\n+                Some(meta_item) => attr::cfg_matches(meta_item, self.sess, self.features),\n+                None => error(nested_meta_items[0].span,\n+                              \"`cfg` predicate key cannot be a literal\", \"\"),\n             }\n-\n-            attr::cfg_matches(mis[0].meta_item().unwrap(), self.sess, self.features)\n         })\n     }\n "}, {"sha": "36dd78dd2b19a28d9571f486396251fb7795bf23", "filename": "src/test/ui/cfg-arg-invalid-1.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/24ef47bccf487a2f80f71f228d71e35f89c5e1d3/src%2Ftest%2Fui%2Fcfg-arg-invalid-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24ef47bccf487a2f80f71f228d71e35f89c5e1d3/src%2Ftest%2Fui%2Fcfg-arg-invalid-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcfg-arg-invalid-1.rs?ref=24ef47bccf487a2f80f71f228d71e35f89c5e1d3", "patch": "@@ -0,0 +1,3 @@\n+// compile-flags: --cfg a(b=c)\n+// error-pattern: invalid `--cfg` argument: `a(b=c)` (expected `key` or `key=\"value\"`)\n+fn main() {}"}, {"sha": "48d656a4a28d92ffac76fb6aaf0a5d789c6c9c95", "filename": "src/test/ui/cfg-arg-invalid-2.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/24ef47bccf487a2f80f71f228d71e35f89c5e1d3/src%2Ftest%2Fui%2Fcfg-arg-invalid-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24ef47bccf487a2f80f71f228d71e35f89c5e1d3/src%2Ftest%2Fui%2Fcfg-arg-invalid-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcfg-arg-invalid-2.rs?ref=24ef47bccf487a2f80f71f228d71e35f89c5e1d3", "patch": "@@ -0,0 +1,3 @@\n+// compile-flags: --cfg a{b}\n+// error-pattern: invalid `--cfg` argument: `a{b}` (expected `key` or `key=\"value\"`)\n+fn main() {}"}, {"sha": "96ac7828c5c3b9dd766d89a6fd62503f6b7f1289", "filename": "src/test/ui/cfg-arg-invalid-3.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/24ef47bccf487a2f80f71f228d71e35f89c5e1d3/src%2Ftest%2Fui%2Fcfg-arg-invalid-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24ef47bccf487a2f80f71f228d71e35f89c5e1d3/src%2Ftest%2Fui%2Fcfg-arg-invalid-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcfg-arg-invalid-3.rs?ref=24ef47bccf487a2f80f71f228d71e35f89c5e1d3", "patch": "@@ -0,0 +1,3 @@\n+// compile-flags: --cfg a::b\n+// error-pattern: invalid `--cfg` argument: `a::b` (argument key must be an identifier)\n+fn main() {}"}, {"sha": "e7dfa17b4b6c414a9cd3132cad8e1f2013a5c204", "filename": "src/test/ui/cfg-arg-invalid-4.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/24ef47bccf487a2f80f71f228d71e35f89c5e1d3/src%2Ftest%2Fui%2Fcfg-arg-invalid-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24ef47bccf487a2f80f71f228d71e35f89c5e1d3/src%2Ftest%2Fui%2Fcfg-arg-invalid-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcfg-arg-invalid-4.rs?ref=24ef47bccf487a2f80f71f228d71e35f89c5e1d3", "patch": "@@ -0,0 +1,3 @@\n+// compile-flags: --cfg a(b)\n+// error-pattern: invalid `--cfg` argument: `a(b)` (expected `key` or `key=\"value\"`)\n+fn main() {}"}, {"sha": "a939f451038896b240fe514c9059d147ed67a2d7", "filename": "src/test/ui/cfg-arg-invalid-5.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/24ef47bccf487a2f80f71f228d71e35f89c5e1d3/src%2Ftest%2Fui%2Fcfg-arg-invalid-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24ef47bccf487a2f80f71f228d71e35f89c5e1d3/src%2Ftest%2Fui%2Fcfg-arg-invalid-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcfg-arg-invalid-5.rs?ref=24ef47bccf487a2f80f71f228d71e35f89c5e1d3", "patch": "@@ -0,0 +1,3 @@\n+// compile-flags: --cfg a=10\n+// error-pattern: invalid `--cfg` argument: `a=10` (argument value must be a string)\n+fn main() {}"}, {"sha": "404630399c601e15450d7311422c58936218960a", "filename": "src/test/ui/cfg-arg-invalid.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Fcfg-arg-invalid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Fcfg-arg-invalid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcfg-arg-invalid.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -1,13 +0,0 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// compile-flags: --cfg a{b}\n-// error-pattern: invalid --cfg argument: a{b}\n-fn main() {}"}, {"sha": "06a22eff25c218c6b8aef73cf76e887d1333e713", "filename": "src/test/ui/cfg-attr-syntax-validation.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/24ef47bccf487a2f80f71f228d71e35f89c5e1d3/src%2Ftest%2Fui%2Fcfg-attr-syntax-validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24ef47bccf487a2f80f71f228d71e35f89c5e1d3/src%2Ftest%2Fui%2Fcfg-attr-syntax-validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcfg-attr-syntax-validation.rs?ref=24ef47bccf487a2f80f71f228d71e35f89c5e1d3", "patch": "@@ -0,0 +1,32 @@\n+#[cfg] //~ ERROR `cfg` is not followed by parentheses\n+struct S1;\n+\n+#[cfg = 10] //~ ERROR `cfg` is not followed by parentheses\n+struct S2;\n+\n+#[cfg()] //~ ERROR `cfg` predicate is not specified\n+struct S3;\n+\n+#[cfg(a, b)] //~ ERROR multiple `cfg` predicates are specified\n+struct S4;\n+\n+#[cfg(\"str\")] //~ ERROR `cfg` predicate key cannot be a literal\n+struct S5;\n+\n+#[cfg(a::b)] //~ ERROR `cfg` predicate key must be an identifier\n+struct S6;\n+\n+#[cfg(a())] //~ ERROR invalid predicate `a`\n+struct S7;\n+\n+#[cfg(a = 10)] //~ ERROR literal in `cfg` predicate value must be a string\n+struct S8;\n+\n+macro_rules! generate_s9 {\n+    ($expr: expr) => {\n+        #[cfg(feature = $expr)] //~ ERROR `cfg` is not a well-formed meta-item\n+        struct S9;\n+    }\n+}\n+\n+generate_s9!(concat!(\"nonexistent\"));"}, {"sha": "7773fdb8cf9848f9ed01f6f4a37cc1cfc7f84734", "filename": "src/test/ui/cfg-attr-syntax-validation.stderr", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/24ef47bccf487a2f80f71f228d71e35f89c5e1d3/src%2Ftest%2Fui%2Fcfg-attr-syntax-validation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/24ef47bccf487a2f80f71f228d71e35f89c5e1d3/src%2Ftest%2Fui%2Fcfg-attr-syntax-validation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcfg-attr-syntax-validation.stderr?ref=24ef47bccf487a2f80f71f228d71e35f89c5e1d3", "patch": "@@ -0,0 +1,60 @@\n+error: `cfg` is not followed by parentheses\n+  --> $DIR/cfg-attr-syntax-validation.rs:1:1\n+   |\n+LL | #[cfg] //~ ERROR `cfg` is not followed by parentheses\n+   | ^^^^^^ help: expected syntax is: `cfg(/* predicate */)`\n+\n+error: `cfg` is not followed by parentheses\n+  --> $DIR/cfg-attr-syntax-validation.rs:4:1\n+   |\n+LL | #[cfg = 10] //~ ERROR `cfg` is not followed by parentheses\n+   | ^^^^^^^^^^^ help: expected syntax is: `cfg(/* predicate */)`\n+\n+error: `cfg` predicate is not specified\n+  --> $DIR/cfg-attr-syntax-validation.rs:7:1\n+   |\n+LL | #[cfg()] //~ ERROR `cfg` predicate is not specified\n+   | ^^^^^^^^\n+\n+error: multiple `cfg` predicates are specified\n+  --> $DIR/cfg-attr-syntax-validation.rs:10:10\n+   |\n+LL | #[cfg(a, b)] //~ ERROR multiple `cfg` predicates are specified\n+   |          ^\n+\n+error: `cfg` predicate key cannot be a literal\n+  --> $DIR/cfg-attr-syntax-validation.rs:13:7\n+   |\n+LL | #[cfg(\"str\")] //~ ERROR `cfg` predicate key cannot be a literal\n+   |       ^^^^^\n+\n+error: `cfg` predicate key must be an identifier\n+  --> $DIR/cfg-attr-syntax-validation.rs:16:7\n+   |\n+LL | #[cfg(a::b)] //~ ERROR `cfg` predicate key must be an identifier\n+   |       ^^^^\n+\n+error[E0537]: invalid predicate `a`\n+  --> $DIR/cfg-attr-syntax-validation.rs:19:7\n+   |\n+LL | #[cfg(a())] //~ ERROR invalid predicate `a`\n+   |       ^^^\n+\n+error: literal in `cfg` predicate value must be a string\n+  --> $DIR/cfg-attr-syntax-validation.rs:22:11\n+   |\n+LL | #[cfg(a = 10)] //~ ERROR literal in `cfg` predicate value must be a string\n+   |           ^^\n+\n+error: `cfg` is not a well-formed meta-item\n+  --> $DIR/cfg-attr-syntax-validation.rs:27:9\n+   |\n+LL |         #[cfg(feature = $expr)] //~ ERROR `cfg` is not a well-formed meta-item\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^ help: expected syntax is: `#[cfg(/* predicate */)]`\n+...\n+LL | generate_s9!(concat!(\"nonexistent\"));\n+   | ------------------------------------- in this macro invocation\n+\n+error: aborting due to 9 previous errors\n+\n+For more information about this error, try `rustc --explain E0537`."}, {"sha": "5cf8135ca6bc6795d333c5c9abde6250e0933fc9", "filename": "src/test/ui/cfg-empty-codemap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/24ef47bccf487a2f80f71f228d71e35f89c5e1d3/src%2Ftest%2Fui%2Fcfg-empty-codemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24ef47bccf487a2f80f71f228d71e35f89c5e1d3/src%2Ftest%2Fui%2Fcfg-empty-codemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcfg-empty-codemap.rs?ref=24ef47bccf487a2f80f71f228d71e35f89c5e1d3", "patch": "@@ -12,7 +12,7 @@\n \n // compile-flags: --cfg \"\"\n \n-// error-pattern: expected identifier, found\n+// error-pattern: invalid `--cfg` argument: `\"\"` (expected `key` or `key=\"value\"`)\n \n pub fn main() {\n }"}, {"sha": "794b8bb86bb5741a3a9ac850ce563a87116b12a3", "filename": "src/test/ui/issues/issue-31495.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Fissues%2Fissue-31495.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Fissues%2Fissue-31495.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-31495.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -1,13 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// compile-flags: --cfg foo(bar)\n-// error-pattern: invalid predicate in --cfg command line argument: `foo`\n-fn main() {}"}]}