{"sha": "eb3a73484b5d5b8cadbf92074c2cbe6a38cb11b1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViM2E3MzQ4NGI1ZDViOGNhZGJmOTIwNzRjMmNiZTZhMzhjYjExYjE=", "commit": {"author": {"name": "Sebastian Dr\u00f6ge", "email": "sebastian@centricular.com", "date": "2018-05-29T07:41:33Z"}, "committer": {"name": "Sebastian Dr\u00f6ge", "email": "sebastian@centricular.com", "date": "2018-06-04T06:03:21Z"}, "message": "Move slice::exact_chunks directly above exact_chunks_mut for more consistent docs order\n\nSee https://github.com/rust-lang/rust/issues/47115#issuecomment-392532855", "tree": {"sha": "a8121d0255accc0a54403c6254ff8224944be440", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a8121d0255accc0a54403c6254ff8224944be440"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb3a73484b5d5b8cadbf92074c2cbe6a38cb11b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb3a73484b5d5b8cadbf92074c2cbe6a38cb11b1", "html_url": "https://github.com/rust-lang/rust/commit/eb3a73484b5d5b8cadbf92074c2cbe6a38cb11b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb3a73484b5d5b8cadbf92074c2cbe6a38cb11b1/comments", "author": {"login": "sdroege", "id": 301846, "node_id": "MDQ6VXNlcjMwMTg0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/301846?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sdroege", "html_url": "https://github.com/sdroege", "followers_url": "https://api.github.com/users/sdroege/followers", "following_url": "https://api.github.com/users/sdroege/following{/other_user}", "gists_url": "https://api.github.com/users/sdroege/gists{/gist_id}", "starred_url": "https://api.github.com/users/sdroege/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sdroege/subscriptions", "organizations_url": "https://api.github.com/users/sdroege/orgs", "repos_url": "https://api.github.com/users/sdroege/repos", "events_url": "https://api.github.com/users/sdroege/events{/privacy}", "received_events_url": "https://api.github.com/users/sdroege/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sdroege", "id": 301846, "node_id": "MDQ6VXNlcjMwMTg0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/301846?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sdroege", "html_url": "https://github.com/sdroege", "followers_url": "https://api.github.com/users/sdroege/followers", "following_url": "https://api.github.com/users/sdroege/following{/other_user}", "gists_url": "https://api.github.com/users/sdroege/gists{/gist_id}", "starred_url": "https://api.github.com/users/sdroege/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sdroege/subscriptions", "organizations_url": "https://api.github.com/users/sdroege/orgs", "repos_url": "https://api.github.com/users/sdroege/repos", "events_url": "https://api.github.com/users/sdroege/events{/privacy}", "received_events_url": "https://api.github.com/users/sdroege/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6232478d26b0feca02fd6660edbf78a5c6327ec5", "url": "https://api.github.com/repos/rust-lang/rust/commits/6232478d26b0feca02fd6660edbf78a5c6327ec5", "html_url": "https://github.com/rust-lang/rust/commit/6232478d26b0feca02fd6660edbf78a5c6327ec5"}], "stats": {"total": 70, "additions": 35, "deletions": 35}, "files": [{"sha": "63f9a8097ba3aace3759b902549b3f4230fee375", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 35, "deletions": 35, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/eb3a73484b5d5b8cadbf92074c2cbe6a38cb11b1/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb3a73484b5d5b8cadbf92074c2cbe6a38cb11b1/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=eb3a73484b5d5b8cadbf92074c2cbe6a38cb11b1", "patch": "@@ -691,41 +691,6 @@ impl<T> [T] {\n         Chunks { v: self, chunk_size: chunk_size }\n     }\n \n-    /// Returns an iterator over `chunk_size` elements of the slice at a\n-    /// time. The chunks are slices and do not overlap. If `chunk_size` does\n-    /// not divide the length of the slice, then the last up to `chunk_size-1`\n-    /// elements will be omitted.\n-    ///\n-    /// Due to each chunk having exactly `chunk_size` elements, the compiler\n-    /// can often optimize the resulting code better than in the case of\n-    /// [`chunks`].\n-    ///\n-    /// # Panics\n-    ///\n-    /// Panics if `chunk_size` is 0.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// #![feature(exact_chunks)]\n-    ///\n-    /// let slice = ['l', 'o', 'r', 'e', 'm'];\n-    /// let mut iter = slice.exact_chunks(2);\n-    /// assert_eq!(iter.next().unwrap(), &['l', 'o']);\n-    /// assert_eq!(iter.next().unwrap(), &['r', 'e']);\n-    /// assert!(iter.next().is_none());\n-    /// ```\n-    ///\n-    /// [`chunks`]: #method.chunks\n-    #[unstable(feature = \"exact_chunks\", issue = \"47115\")]\n-    #[inline]\n-    pub fn exact_chunks(&self, chunk_size: usize) -> ExactChunks<T> {\n-        assert!(chunk_size != 0);\n-        let rem = self.len() % chunk_size;\n-        let len = self.len() - rem;\n-        ExactChunks { v: &self[..len], chunk_size: chunk_size}\n-    }\n-\n     /// Returns an iterator over `chunk_size` elements of the slice at a time.\n     /// The chunks are mutable slices, and do not overlap. If `chunk_size` does\n     /// not divide the length of the slice, then the last chunk will not\n@@ -761,6 +726,41 @@ impl<T> [T] {\n         ChunksMut { v: self, chunk_size: chunk_size }\n     }\n \n+    /// Returns an iterator over `chunk_size` elements of the slice at a\n+    /// time. The chunks are slices and do not overlap. If `chunk_size` does\n+    /// not divide the length of the slice, then the last up to `chunk_size-1`\n+    /// elements will be omitted.\n+    ///\n+    /// Due to each chunk having exactly `chunk_size` elements, the compiler\n+    /// can often optimize the resulting code better than in the case of\n+    /// [`chunks`].\n+    ///\n+    /// # Panics\n+    ///\n+    /// Panics if `chunk_size` is 0.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(exact_chunks)]\n+    ///\n+    /// let slice = ['l', 'o', 'r', 'e', 'm'];\n+    /// let mut iter = slice.exact_chunks(2);\n+    /// assert_eq!(iter.next().unwrap(), &['l', 'o']);\n+    /// assert_eq!(iter.next().unwrap(), &['r', 'e']);\n+    /// assert!(iter.next().is_none());\n+    /// ```\n+    ///\n+    /// [`chunks`]: #method.chunks\n+    #[unstable(feature = \"exact_chunks\", issue = \"47115\")]\n+    #[inline]\n+    pub fn exact_chunks(&self, chunk_size: usize) -> ExactChunks<T> {\n+        assert!(chunk_size != 0);\n+        let rem = self.len() % chunk_size;\n+        let len = self.len() - rem;\n+        ExactChunks { v: &self[..len], chunk_size: chunk_size}\n+    }\n+\n     /// Returns an iterator over `chunk_size` elements of the slice at a time.\n     /// The chunks are mutable slices, and do not overlap. If `chunk_size` does\n     /// not divide the length of the slice, then the last up to `chunk_size-1`"}]}