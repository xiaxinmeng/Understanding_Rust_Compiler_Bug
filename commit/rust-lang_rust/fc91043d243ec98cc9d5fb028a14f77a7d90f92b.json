{"sha": "fc91043d243ec98cc9d5fb028a14f77a7d90f92b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjOTEwNDNkMjQzZWM5OGNjOWQ1ZmIwMjhhMTRmNzdhN2Q5MGY5MmI=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-05-16T23:51:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-16T23:51:30Z"}, "message": "Rollup merge of #72233 - dtolnay:literal, r=petrochenkov\n\nFix {:#?} representation of proc_macro::Literal\n\nBefore:\n\n```rust\nTokenStream [\n    Ident {\n        ident: \"name\",\n        span: #0 bytes(37..41),\n    },\n    Punct {\n        ch: '=',\n        spacing: Alone,\n        span: #0 bytes(42..43),\n    },\n    Literal { lit: Lit { kind: Str, symbol: \"SNPP\", suffix: None }, span: Span { lo: BytePos(44), hi: BytePos(50), ctxt: #0 } },\n    Punct {\n        ch: ',',\n        spacing: Alone,\n        span: #0 bytes(50..51),\n    },\n    Ident {\n        ident: \"owner\",\n        span: #0 bytes(56..61),\n    },\n    Punct {\n        ch: '=',\n        spacing: Alone,\n        span: #0 bytes(62..63),\n    },\n    Literal { lit: Lit { kind: Str, symbol: \"Canary M Burns\", suffix: None }, span: Span { lo: BytePos(64), hi: BytePos(80), ctxt: #0 } },\n]\n```\n\nAfter:\n\n```rust\nTokenStream [\n    Ident {\n        ident: \"name\",\n        span: #0 bytes(37..41),\n    },\n    Punct {\n        ch: '=',\n        spacing: Alone,\n        span: #0 bytes(42..43),\n    },\n    Literal {\n        kind: Str,\n        symbol: \"SNPP\",\n        suffix: None,\n        span: #0 bytes(44..50),\n    },\n    Punct {\n        ch: ',',\n        spacing: Alone,\n        span: #0 bytes(50..51),\n    },\n    Ident {\n        ident: \"owner\",\n        span: #0 bytes(56..61),\n    },\n    Punct {\n        ch: '=',\n        spacing: Alone,\n        span: #0 bytes(62..63),\n    },\n    Literal {\n        kind: Str,\n        symbol: \"Canary M Burns\",\n        suffix: None,\n        span: #0 bytes(64..80),\n    },\n]\n```", "tree": {"sha": "60fa0fe1c882d18e698150cd1f4af8e9ec2b6772", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/60fa0fe1c882d18e698150cd1f4af8e9ec2b6772"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc91043d243ec98cc9d5fb028a14f77a7d90f92b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJewHyCCRBK7hj4Ov3rIwAAdHIIACL6WqvJDNU+SaeOMqZTQi+E\n0vp06JUvHgFr2wvWz9vKd1WBPDyyLcKC+X4Padam1O2qD0H5XNW9NqhsUe5ZNI7s\n42ZapZOfuPtP+eecVZdSFqNJY2F0a4ZV7vHjPGAjUCNIzV9m4FHA/+9Yr4pX2fOB\n6qHWzwMQPOJd20gPZRRCqqFWaz0d884Z5lbJtPbmjbUI4kwzbvgHhmLc1qztaAex\nlA1jFzT+XI6YDNIuPeNpndGtVFh+rscZteER10CnaFCwRHS82CkwwH5R0SQHDMNP\nUmLuJagxvi9y9D6mB6VKDqixSyZbYXSwg1TWbImiRhDXbMYHMH1u4guPr28w/tI=\n=4HI/\n-----END PGP SIGNATURE-----\n", "payload": "tree 60fa0fe1c882d18e698150cd1f4af8e9ec2b6772\nparent dd927a5b0f29342f7ad919fb52ca29510d2e7362\nparent bea2c59ea56cb3daa7e3bacabd7c95f002f9aca0\nauthor Dylan DPC <dylan.dpc@gmail.com> 1589673090 +0200\ncommitter GitHub <noreply@github.com> 1589673090 +0200\n\nRollup merge of #72233 - dtolnay:literal, r=petrochenkov\n\nFix {:#?} representation of proc_macro::Literal\n\nBefore:\n\n```rust\nTokenStream [\n    Ident {\n        ident: \"name\",\n        span: #0 bytes(37..41),\n    },\n    Punct {\n        ch: '=',\n        spacing: Alone,\n        span: #0 bytes(42..43),\n    },\n    Literal { lit: Lit { kind: Str, symbol: \"SNPP\", suffix: None }, span: Span { lo: BytePos(44), hi: BytePos(50), ctxt: #0 } },\n    Punct {\n        ch: ',',\n        spacing: Alone,\n        span: #0 bytes(50..51),\n    },\n    Ident {\n        ident: \"owner\",\n        span: #0 bytes(56..61),\n    },\n    Punct {\n        ch: '=',\n        spacing: Alone,\n        span: #0 bytes(62..63),\n    },\n    Literal { lit: Lit { kind: Str, symbol: \"Canary M Burns\", suffix: None }, span: Span { lo: BytePos(64), hi: BytePos(80), ctxt: #0 } },\n]\n```\n\nAfter:\n\n```rust\nTokenStream [\n    Ident {\n        ident: \"name\",\n        span: #0 bytes(37..41),\n    },\n    Punct {\n        ch: '=',\n        spacing: Alone,\n        span: #0 bytes(42..43),\n    },\n    Literal {\n        kind: Str,\n        symbol: \"SNPP\",\n        suffix: None,\n        span: #0 bytes(44..50),\n    },\n    Punct {\n        ch: ',',\n        spacing: Alone,\n        span: #0 bytes(50..51),\n    },\n    Ident {\n        ident: \"owner\",\n        span: #0 bytes(56..61),\n    },\n    Punct {\n        ch: '=',\n        spacing: Alone,\n        span: #0 bytes(62..63),\n    },\n    Literal {\n        kind: Str,\n        symbol: \"Canary M Burns\",\n        suffix: None,\n        span: #0 bytes(64..80),\n    },\n]\n```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc91043d243ec98cc9d5fb028a14f77a7d90f92b", "html_url": "https://github.com/rust-lang/rust/commit/fc91043d243ec98cc9d5fb028a14f77a7d90f92b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc91043d243ec98cc9d5fb028a14f77a7d90f92b/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd927a5b0f29342f7ad919fb52ca29510d2e7362", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd927a5b0f29342f7ad919fb52ca29510d2e7362", "html_url": "https://github.com/rust-lang/rust/commit/dd927a5b0f29342f7ad919fb52ca29510d2e7362"}, {"sha": "bea2c59ea56cb3daa7e3bacabd7c95f002f9aca0", "url": "https://api.github.com/repos/rust-lang/rust/commits/bea2c59ea56cb3daa7e3bacabd7c95f002f9aca0", "html_url": "https://github.com/rust-lang/rust/commit/bea2c59ea56cb3daa7e3bacabd7c95f002f9aca0"}], "stats": {"total": 250, "additions": 241, "deletions": 9}, "files": [{"sha": "283aa25b0ea13e1603903972505699c560f4d89a", "filename": "src/libproc_macro/bridge/client.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fc91043d243ec98cc9d5fb028a14f77a7d90f92b/src%2Flibproc_macro%2Fbridge%2Fclient.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc91043d243ec98cc9d5fb028a14f77a7d90f92b/src%2Flibproc_macro%2Fbridge%2Fclient.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Fbridge%2Fclient.rs?ref=fc91043d243ec98cc9d5fb028a14f77a7d90f92b", "patch": "@@ -202,10 +202,16 @@ impl Clone for Literal {\n     }\n }\n \n-// FIXME(eddyb) `Literal` should not expose internal `Debug` impls.\n impl fmt::Debug for Literal {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        f.write_str(&self.debug())\n+        f.debug_struct(\"Literal\")\n+            // format the kind without quotes, as in `kind: Float`\n+            .field(\"kind\", &format_args!(\"{}\", &self.debug_kind()))\n+            .field(\"symbol\", &self.symbol())\n+            // format `Some(\"...\")` on one line even in {:#?} mode\n+            .field(\"suffix\", &format_args!(\"{:?}\", &self.suffix()))\n+            .field(\"span\", &self.span())\n+            .finish()\n     }\n }\n "}, {"sha": "bf0d8fcee5b8f4cd31b9fe908f0316874c2a7792", "filename": "src/libproc_macro/bridge/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fc91043d243ec98cc9d5fb028a14f77a7d90f92b/src%2Flibproc_macro%2Fbridge%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc91043d243ec98cc9d5fb028a14f77a7d90f92b/src%2Flibproc_macro%2Fbridge%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Fbridge%2Fmod.rs?ref=fc91043d243ec98cc9d5fb028a14f77a7d90f92b", "patch": "@@ -103,8 +103,9 @@ macro_rules! with_api {\n             Literal {\n                 fn drop($self: $S::Literal);\n                 fn clone($self: &$S::Literal) -> $S::Literal;\n-                // FIXME(eddyb) `Literal` should not expose internal `Debug` impls.\n-                fn debug($self: &$S::Literal) -> String;\n+                fn debug_kind($self: &$S::Literal) -> String;\n+                fn symbol($self: &$S::Literal) -> String;\n+                fn suffix($self: &$S::Literal) -> Option<String>;\n                 fn integer(n: &str) -> $S::Literal;\n                 fn typed_integer(n: &str, kind: &str) -> $S::Literal;\n                 fn float(n: &str) -> $S::Literal;"}, {"sha": "f11401b5a0c7c2afc2558d4d9c833de4022fbd77", "filename": "src/libproc_macro/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fc91043d243ec98cc9d5fb028a14f77a7d90f92b/src%2Flibproc_macro%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc91043d243ec98cc9d5fb028a14f77a7d90f92b/src%2Flibproc_macro%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Flib.rs?ref=fc91043d243ec98cc9d5fb028a14f77a7d90f92b", "patch": "@@ -1141,7 +1141,6 @@ impl fmt::Display for Literal {\n #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n impl fmt::Debug for Literal {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        // FIXME(eddyb) `Literal` should not expose internal `Debug` impls.\n         self.0.fmt(f)\n     }\n }"}, {"sha": "b9693c2c862785dc52138c470950b728db073218", "filename": "src/librustc_expand/proc_macro_server.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fc91043d243ec98cc9d5fb028a14f77a7d90f92b/src%2Flibrustc_expand%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc91043d243ec98cc9d5fb028a14f77a7d90f92b/src%2Flibrustc_expand%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fproc_macro_server.rs?ref=fc91043d243ec98cc9d5fb028a14f77a7d90f92b", "patch": "@@ -507,9 +507,14 @@ impl server::Ident for Rustc<'_> {\n }\n \n impl server::Literal for Rustc<'_> {\n-    // FIXME(eddyb) `Literal` should not expose internal `Debug` impls.\n-    fn debug(&mut self, literal: &Self::Literal) -> String {\n-        format!(\"{:?}\", literal)\n+    fn debug_kind(&mut self, literal: &Self::Literal) -> String {\n+        format!(\"{:?}\", literal.lit.kind)\n+    }\n+    fn symbol(&mut self, literal: &Self::Literal) -> String {\n+        literal.lit.symbol.to_string()\n+    }\n+    fn suffix(&mut self, literal: &Self::Literal) -> Option<String> {\n+        literal.lit.suffix.as_ref().map(Symbol::to_string)\n     }\n     fn integer(&mut self, n: &str) -> Self::Literal {\n         self.lit(token::Integer, Symbol::intern(n), None)"}, {"sha": "bc0c533032413f3f3d40ea3821c01ed8b5ebb566", "filename": "src/test/ui/lint/redundant-semicolon/redundant-semi-proc-macro.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc91043d243ec98cc9d5fb028a14f77a7d90f92b/src%2Ftest%2Fui%2Flint%2Fredundant-semicolon%2Fredundant-semi-proc-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc91043d243ec98cc9d5fb028a14f77a7d90f92b/src%2Ftest%2Fui%2Flint%2Fredundant-semicolon%2Fredundant-semi-proc-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fredundant-semicolon%2Fredundant-semi-proc-macro.stderr?ref=fc91043d243ec98cc9d5fb028a14f77a7d90f92b", "patch": "@@ -1,4 +1,4 @@\n-TokenStream [Ident { ident: \"fn\", span: #0 bytes(198..200) }, Ident { ident: \"span_preservation\", span: #0 bytes(201..218) }, Group { delimiter: Parenthesis, stream: TokenStream [], span: #0 bytes(218..220) }, Group { delimiter: Brace, stream: TokenStream [Ident { ident: \"let\", span: #0 bytes(228..231) }, Ident { ident: \"tst\", span: #0 bytes(232..235) }, Punct { ch: '=', spacing: Alone, span: #0 bytes(236..237) }, Literal { lit: Lit { kind: Integer, symbol: \"123\", suffix: None }, span: Span { lo: BytePos(238), hi: BytePos(241), ctxt: #0 } }, Punct { ch: ';', spacing: Joint, span: #0 bytes(241..242) }, Punct { ch: ';', spacing: Alone, span: #0 bytes(242..243) }, Ident { ident: \"match\", span: #0 bytes(289..294) }, Ident { ident: \"tst\", span: #0 bytes(295..298) }, Group { delimiter: Brace, stream: TokenStream [Literal { lit: Lit { kind: Integer, symbol: \"123\", suffix: None }, span: Span { lo: BytePos(483), hi: BytePos(486), ctxt: #0 } }, Punct { ch: '=', spacing: Joint, span: #0 bytes(487..489) }, Punct { ch: '>', spacing: Alone, span: #0 bytes(487..489) }, Group { delimiter: Parenthesis, stream: TokenStream [], span: #0 bytes(490..492) }, Punct { ch: ',', spacing: Alone, span: #0 bytes(492..493) }, Ident { ident: \"_\", span: #0 bytes(502..503) }, Punct { ch: '=', spacing: Joint, span: #0 bytes(504..506) }, Punct { ch: '>', spacing: Alone, span: #0 bytes(504..506) }, Group { delimiter: Parenthesis, stream: TokenStream [], span: #0 bytes(507..509) }], span: #0 bytes(299..515) }, Punct { ch: ';', spacing: Joint, span: #0 bytes(515..516) }, Punct { ch: ';', spacing: Joint, span: #0 bytes(516..517) }, Punct { ch: ';', spacing: Alone, span: #0 bytes(517..518) }], span: #0 bytes(222..562) }]\n+TokenStream [Ident { ident: \"fn\", span: #0 bytes(198..200) }, Ident { ident: \"span_preservation\", span: #0 bytes(201..218) }, Group { delimiter: Parenthesis, stream: TokenStream [], span: #0 bytes(218..220) }, Group { delimiter: Brace, stream: TokenStream [Ident { ident: \"let\", span: #0 bytes(228..231) }, Ident { ident: \"tst\", span: #0 bytes(232..235) }, Punct { ch: '=', spacing: Alone, span: #0 bytes(236..237) }, Literal { kind: Integer, symbol: \"123\", suffix: None, span: #0 bytes(238..241) }, Punct { ch: ';', spacing: Joint, span: #0 bytes(241..242) }, Punct { ch: ';', spacing: Alone, span: #0 bytes(242..243) }, Ident { ident: \"match\", span: #0 bytes(289..294) }, Ident { ident: \"tst\", span: #0 bytes(295..298) }, Group { delimiter: Brace, stream: TokenStream [Literal { kind: Integer, symbol: \"123\", suffix: None, span: #0 bytes(483..486) }, Punct { ch: '=', spacing: Joint, span: #0 bytes(487..489) }, Punct { ch: '>', spacing: Alone, span: #0 bytes(487..489) }, Group { delimiter: Parenthesis, stream: TokenStream [], span: #0 bytes(490..492) }, Punct { ch: ',', spacing: Alone, span: #0 bytes(492..493) }, Ident { ident: \"_\", span: #0 bytes(502..503) }, Punct { ch: '=', spacing: Joint, span: #0 bytes(504..506) }, Punct { ch: '>', spacing: Alone, span: #0 bytes(504..506) }, Group { delimiter: Parenthesis, stream: TokenStream [], span: #0 bytes(507..509) }], span: #0 bytes(299..515) }, Punct { ch: ';', spacing: Joint, span: #0 bytes(515..516) }, Punct { ch: ';', spacing: Joint, span: #0 bytes(516..517) }, Punct { ch: ';', spacing: Alone, span: #0 bytes(517..518) }], span: #0 bytes(222..562) }]\n error: unnecessary trailing semicolon\n   --> $DIR/redundant-semi-proc-macro.rs:9:19\n    |"}, {"sha": "56ad0612f74bd8c83b4d54b29fff6d12291e8295", "filename": "src/test/ui/proc-macro/debug/auxiliary/macro-dump-debug.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/fc91043d243ec98cc9d5fb028a14f77a7d90f92b/src%2Ftest%2Fui%2Fproc-macro%2Fdebug%2Fauxiliary%2Fmacro-dump-debug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc91043d243ec98cc9d5fb028a14f77a7d90f92b/src%2Ftest%2Fui%2Fproc-macro%2Fdebug%2Fauxiliary%2Fmacro-dump-debug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fdebug%2Fauxiliary%2Fmacro-dump-debug.rs?ref=fc91043d243ec98cc9d5fb028a14f77a7d90f92b", "patch": "@@ -0,0 +1,15 @@\n+// force-host\n+// no-prefer-dynamic\n+\n+#![crate_type = \"proc-macro\"]\n+#![crate_name = \"macro_dump_debug\"]\n+\n+extern crate proc_macro;\n+use proc_macro::TokenStream;\n+\n+#[proc_macro]\n+pub fn dump_debug(tokens: TokenStream) -> TokenStream {\n+    eprintln!(\"{:?}\", tokens);\n+    eprintln!(\"{:#?}\", tokens);\n+    TokenStream::new()\n+}"}, {"sha": "0ed36b690f49b8620ca1adc4fb98373bfdb41d5e", "filename": "src/test/ui/proc-macro/debug/dump-debug.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/fc91043d243ec98cc9d5fb028a14f77a7d90f92b/src%2Ftest%2Fui%2Fproc-macro%2Fdebug%2Fdump-debug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc91043d243ec98cc9d5fb028a14f77a7d90f92b/src%2Ftest%2Fui%2Fproc-macro%2Fdebug%2Fdump-debug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fdebug%2Fdump-debug.rs?ref=fc91043d243ec98cc9d5fb028a14f77a7d90f92b", "patch": "@@ -0,0 +1,40 @@\n+// run-pass\n+// aux-build:macro-dump-debug.rs\n+\n+extern crate macro_dump_debug;\n+use macro_dump_debug::dump_debug;\n+\n+dump_debug! {\n+    ident   // ident\n+    r#ident // raw ident\n+    ,       // alone punct\n+    ==>     // joint punct\n+    ()      // empty group\n+    [_]     // nonempty group\n+\n+    // unsuffixed literals\n+    0\n+    1.0\n+    \"S\"\n+    b\"B\"\n+    r\"R\"\n+    r##\"R\"##\n+    br\"BR\"\n+    br##\"BR\"##\n+    'C'\n+    b'B'\n+\n+    // suffixed literals\n+    0q\n+    1.0q\n+    \"S\"q\n+    b\"B\"q\n+    r\"R\"q\n+    r##\"R\"##q\n+    br\"BR\"q\n+    br##\"BR\"##q\n+    'C'q\n+    b'B'q\n+}\n+\n+fn main() {}"}, {"sha": "0aedefd4e6091f4b5d03d872e88919141049e076", "filename": "src/test/ui/proc-macro/debug/dump-debug.stderr", "status": "added", "additions": 166, "deletions": 0, "changes": 166, "blob_url": "https://github.com/rust-lang/rust/blob/fc91043d243ec98cc9d5fb028a14f77a7d90f92b/src%2Ftest%2Fui%2Fproc-macro%2Fdebug%2Fdump-debug.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc91043d243ec98cc9d5fb028a14f77a7d90f92b/src%2Ftest%2Fui%2Fproc-macro%2Fdebug%2Fdump-debug.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fdebug%2Fdump-debug.stderr?ref=fc91043d243ec98cc9d5fb028a14f77a7d90f92b", "patch": "@@ -0,0 +1,166 @@\n+TokenStream [Ident { ident: \"ident\", span: #0 bytes(130..135) }, Ident { ident: \"r#ident\", span: #0 bytes(151..158) }, Punct { ch: ',', spacing: Alone, span: #0 bytes(176..177) }, Punct { ch: '=', spacing: Joint, span: #0 bytes(203..205) }, Punct { ch: '=', spacing: Joint, span: #0 bytes(203..205) }, Punct { ch: '>', spacing: Alone, span: #0 bytes(205..206) }, Group { delimiter: Parenthesis, stream: TokenStream [], span: #0 bytes(230..232) }, Group { delimiter: Bracket, stream: TokenStream [Ident { ident: \"_\", span: #0 bytes(258..259) }], span: #0 bytes(257..260) }, Literal { kind: Integer, symbol: \"0\", suffix: None, span: #0 bytes(315..316) }, Literal { kind: Float, symbol: \"1.0\", suffix: None, span: #0 bytes(321..324) }, Literal { kind: Str, symbol: \"S\", suffix: None, span: #0 bytes(329..332) }, Literal { kind: ByteStr, symbol: \"B\", suffix: None, span: #0 bytes(337..341) }, Literal { kind: StrRaw(0), symbol: \"R\", suffix: None, span: #0 bytes(346..350) }, Literal { kind: StrRaw(2), symbol: \"R\", suffix: None, span: #0 bytes(355..363) }, Literal { kind: ByteStrRaw(0), symbol: \"BR\", suffix: None, span: #0 bytes(368..374) }, Literal { kind: ByteStrRaw(2), symbol: \"BR\", suffix: None, span: #0 bytes(379..389) }, Literal { kind: Char, symbol: \"C\", suffix: None, span: #0 bytes(394..397) }, Literal { kind: Byte, symbol: \"B\", suffix: None, span: #0 bytes(402..406) }, Literal { kind: Integer, symbol: \"0\", suffix: Some(\"q\"), span: #0 bytes(437..439) }, Literal { kind: Float, symbol: \"1.0\", suffix: Some(\"q\"), span: #0 bytes(444..448) }, Literal { kind: Str, symbol: \"S\", suffix: Some(\"q\"), span: #0 bytes(453..457) }, Literal { kind: ByteStr, symbol: \"B\", suffix: Some(\"q\"), span: #0 bytes(462..467) }, Literal { kind: StrRaw(0), symbol: \"R\", suffix: Some(\"q\"), span: #0 bytes(472..477) }, Literal { kind: StrRaw(2), symbol: \"R\", suffix: Some(\"q\"), span: #0 bytes(482..491) }, Literal { kind: ByteStrRaw(0), symbol: \"BR\", suffix: Some(\"q\"), span: #0 bytes(496..503) }, Literal { kind: ByteStrRaw(2), symbol: \"BR\", suffix: Some(\"q\"), span: #0 bytes(508..519) }, Literal { kind: Char, symbol: \"C\", suffix: Some(\"q\"), span: #0 bytes(524..528) }, Literal { kind: Byte, symbol: \"B\", suffix: Some(\"q\"), span: #0 bytes(533..538) }]\n+TokenStream [\n+    Ident {\n+        ident: \"ident\",\n+        span: #0 bytes(130..135),\n+    },\n+    Ident {\n+        ident: \"r#ident\",\n+        span: #0 bytes(151..158),\n+    },\n+    Punct {\n+        ch: ',',\n+        spacing: Alone,\n+        span: #0 bytes(176..177),\n+    },\n+    Punct {\n+        ch: '=',\n+        spacing: Joint,\n+        span: #0 bytes(203..205),\n+    },\n+    Punct {\n+        ch: '=',\n+        spacing: Joint,\n+        span: #0 bytes(203..205),\n+    },\n+    Punct {\n+        ch: '>',\n+        spacing: Alone,\n+        span: #0 bytes(205..206),\n+    },\n+    Group {\n+        delimiter: Parenthesis,\n+        stream: TokenStream [],\n+        span: #0 bytes(230..232),\n+    },\n+    Group {\n+        delimiter: Bracket,\n+        stream: TokenStream [\n+            Ident {\n+                ident: \"_\",\n+                span: #0 bytes(258..259),\n+            },\n+        ],\n+        span: #0 bytes(257..260),\n+    },\n+    Literal {\n+        kind: Integer,\n+        symbol: \"0\",\n+        suffix: None,\n+        span: #0 bytes(315..316),\n+    },\n+    Literal {\n+        kind: Float,\n+        symbol: \"1.0\",\n+        suffix: None,\n+        span: #0 bytes(321..324),\n+    },\n+    Literal {\n+        kind: Str,\n+        symbol: \"S\",\n+        suffix: None,\n+        span: #0 bytes(329..332),\n+    },\n+    Literal {\n+        kind: ByteStr,\n+        symbol: \"B\",\n+        suffix: None,\n+        span: #0 bytes(337..341),\n+    },\n+    Literal {\n+        kind: StrRaw(0),\n+        symbol: \"R\",\n+        suffix: None,\n+        span: #0 bytes(346..350),\n+    },\n+    Literal {\n+        kind: StrRaw(2),\n+        symbol: \"R\",\n+        suffix: None,\n+        span: #0 bytes(355..363),\n+    },\n+    Literal {\n+        kind: ByteStrRaw(0),\n+        symbol: \"BR\",\n+        suffix: None,\n+        span: #0 bytes(368..374),\n+    },\n+    Literal {\n+        kind: ByteStrRaw(2),\n+        symbol: \"BR\",\n+        suffix: None,\n+        span: #0 bytes(379..389),\n+    },\n+    Literal {\n+        kind: Char,\n+        symbol: \"C\",\n+        suffix: None,\n+        span: #0 bytes(394..397),\n+    },\n+    Literal {\n+        kind: Byte,\n+        symbol: \"B\",\n+        suffix: None,\n+        span: #0 bytes(402..406),\n+    },\n+    Literal {\n+        kind: Integer,\n+        symbol: \"0\",\n+        suffix: Some(\"q\"),\n+        span: #0 bytes(437..439),\n+    },\n+    Literal {\n+        kind: Float,\n+        symbol: \"1.0\",\n+        suffix: Some(\"q\"),\n+        span: #0 bytes(444..448),\n+    },\n+    Literal {\n+        kind: Str,\n+        symbol: \"S\",\n+        suffix: Some(\"q\"),\n+        span: #0 bytes(453..457),\n+    },\n+    Literal {\n+        kind: ByteStr,\n+        symbol: \"B\",\n+        suffix: Some(\"q\"),\n+        span: #0 bytes(462..467),\n+    },\n+    Literal {\n+        kind: StrRaw(0),\n+        symbol: \"R\",\n+        suffix: Some(\"q\"),\n+        span: #0 bytes(472..477),\n+    },\n+    Literal {\n+        kind: StrRaw(2),\n+        symbol: \"R\",\n+        suffix: Some(\"q\"),\n+        span: #0 bytes(482..491),\n+    },\n+    Literal {\n+        kind: ByteStrRaw(0),\n+        symbol: \"BR\",\n+        suffix: Some(\"q\"),\n+        span: #0 bytes(496..503),\n+    },\n+    Literal {\n+        kind: ByteStrRaw(2),\n+        symbol: \"BR\",\n+        suffix: Some(\"q\"),\n+        span: #0 bytes(508..519),\n+    },\n+    Literal {\n+        kind: Char,\n+        symbol: \"C\",\n+        suffix: Some(\"q\"),\n+        span: #0 bytes(524..528),\n+    },\n+    Literal {\n+        kind: Byte,\n+        symbol: \"B\",\n+        suffix: Some(\"q\"),\n+        span: #0 bytes(533..538),\n+    },\n+]"}]}