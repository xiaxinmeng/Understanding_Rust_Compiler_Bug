{"sha": "fbe2d5aad2912e718541443357784cea4b65a0b8", "node_id": "C_kwDOAAsO6NoAKGZiZTJkNWFhZDI5MTJlNzE4NTQxNDQzMzU3Nzg0Y2VhNGI2NWEwYjg", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-12-05T17:00:26Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-01-12T17:14:17Z"}, "message": "Remove `output_filenames` field from TyCtxt and feed the query instead", "tree": {"sha": "cfe5e42cb29f4a4b5326dfc5cfd2d9dd94946ffd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cfe5e42cb29f4a4b5326dfc5cfd2d9dd94946ffd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fbe2d5aad2912e718541443357784cea4b65a0b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fbe2d5aad2912e718541443357784cea4b65a0b8", "html_url": "https://github.com/rust-lang/rust/commit/fbe2d5aad2912e718541443357784cea4b65a0b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fbe2d5aad2912e718541443357784cea4b65a0b8/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "33b6a7790eb6de10f0d240ec92008e7faa1da44c", "url": "https://api.github.com/repos/rust-lang/rust/commits/33b6a7790eb6de10f0d240ec92008e7faa1da44c", "html_url": "https://github.com/rust-lang/rust/commit/33b6a7790eb6de10f0d240ec92008e7faa1da44c"}], "stats": {"total": 13, "additions": 4, "deletions": 9}, "files": [{"sha": "8d9e1ee7c2c4e29c0d8b4ced65b232e1f56fd5f7", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fbe2d5aad2912e718541443357784cea4b65a0b8/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbe2d5aad2912e718541443357784cea4b65a0b8/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=fbe2d5aad2912e718541443357784cea4b65a0b8", "patch": "@@ -822,7 +822,6 @@ pub fn create_global_ctxt<'tcx>(\n                 queries.on_disk_cache.as_ref().map(OnDiskCache::as_dyn),\n                 queries.as_dyn(),\n                 rustc_query_impl::query_callbacks(arena),\n-                outputs,\n             )\n         })\n     });\n@@ -834,6 +833,7 @@ pub fn create_global_ctxt<'tcx>(\n             tcx.arena.alloc(Steal::new((untracked_resolver_for_lowering, krate))),\n         );\n         feed.resolutions(tcx.arena.alloc(untracked_resolutions));\n+        feed.output_filenames(tcx.arena.alloc(std::sync::Arc::new(outputs)));\n         let feed = tcx.feed_local_crate();\n         feed.crate_name(crate_name);\n     });"}, {"sha": "f816d614500a07b9322ae679745de27cb097fc98", "filename": "compiler/rustc_middle/src/arena.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fbe2d5aad2912e718541443357784cea4b65a0b8/compiler%2Frustc_middle%2Fsrc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbe2d5aad2912e718541443357784cea4b65a0b8/compiler%2Frustc_middle%2Fsrc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Farena.rs?ref=fbe2d5aad2912e718541443357784cea4b65a0b8", "patch": "@@ -34,6 +34,7 @@ macro_rules! arena_types {\n                 rustc_middle::ty::ResolverAstLowering,\n                 rustc_data_structures::sync::Lrc<rustc_ast::Crate>,\n             )>,\n+            [] output_filenames: std::sync::Arc<rustc_session::config::OutputFilenames>,\n             [] resolutions: rustc_middle::ty::ResolverGlobalCtxt,\n             [decode] unsafety_check_result: rustc_middle::mir::UnsafetyCheckResult,\n             [decode] code_region: rustc_middle::mir::coverage::CodeRegion,"}, {"sha": "6efdbfff19dedd13f01eeb133fa1924feb3ef31d", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fbe2d5aad2912e718541443357784cea4b65a0b8/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbe2d5aad2912e718541443357784cea4b65a0b8/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=fbe2d5aad2912e718541443357784cea4b65a0b8", "patch": "@@ -1857,7 +1857,7 @@ rustc_queries! {\n     /// This query returns an `&Arc` because codegen backends need the value even after the `TyCtxt`\n     /// has been destroyed.\n     query output_filenames(_: ()) -> &'tcx Arc<OutputFilenames> {\n-        eval_always\n+        feedable\n         desc { \"getting output filenames\" }\n     }\n "}, {"sha": "74537ea6a183caca15aed95a441997c52055277c", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fbe2d5aad2912e718541443357784cea4b65a0b8/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbe2d5aad2912e718541443357784cea4b65a0b8/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=fbe2d5aad2912e718541443357784cea4b65a0b8", "patch": "@@ -51,7 +51,7 @@ use rustc_macros::HashStable;\n use rustc_query_system::dep_graph::DepNodeIndex;\n use rustc_query_system::ich::StableHashingContext;\n use rustc_serialize::opaque::{FileEncodeResult, FileEncoder};\n-use rustc_session::config::{CrateType, OutputFilenames};\n+use rustc_session::config::CrateType;\n use rustc_session::cstore::{CrateStoreDyn, Untracked};\n use rustc_session::lint::Lint;\n use rustc_session::Limit;\n@@ -74,7 +74,6 @@ use std::hash::{Hash, Hasher};\n use std::iter;\n use std::mem;\n use std::ops::{Bound, Deref};\n-use std::sync::Arc;\n \n pub trait OnDiskCache<'tcx>: rustc_data_structures::sync::Sync {\n     /// Creates a new `OnDiskCache` instance from the serialized data in `data`.\n@@ -460,8 +459,6 @@ pub struct GlobalCtxt<'tcx> {\n \n     /// Stores memory for globals (statics/consts).\n     pub(crate) alloc_map: Lock<interpret::AllocMap<'tcx>>,\n-\n-    output_filenames: Arc<OutputFilenames>,\n }\n \n impl<'tcx> TyCtxt<'tcx> {\n@@ -591,7 +588,6 @@ impl<'tcx> TyCtxt<'tcx> {\n         on_disk_cache: Option<&'tcx dyn OnDiskCache<'tcx>>,\n         queries: &'tcx dyn query::QueryEngine<'tcx>,\n         query_kinds: &'tcx [DepKindStruct<'tcx>],\n-        output_filenames: OutputFilenames,\n     ) -> GlobalCtxt<'tcx> {\n         let data_layout = s.target.parse_data_layout().unwrap_or_else(|err| {\n             s.emit_fatal(err);\n@@ -623,7 +619,6 @@ impl<'tcx> TyCtxt<'tcx> {\n             evaluation_cache: Default::default(),\n             data_layout,\n             alloc_map: Lock::new(interpret::AllocMap::new()),\n-            output_filenames: Arc::new(output_filenames),\n         }\n     }\n \n@@ -2407,7 +2402,6 @@ pub fn provide(providers: &mut ty::query::Providers) {\n \n     providers.extern_mod_stmt_cnum =\n         |tcx, id| tcx.resolutions(()).extern_crate_map.get(&id).cloned();\n-    providers.output_filenames = |tcx, ()| &tcx.output_filenames;\n     providers.features_query = |tcx, ()| tcx.sess.features_untracked();\n     providers.is_panic_runtime = |tcx, cnum| {\n         assert_eq!(cnum, LOCAL_CRATE);"}]}