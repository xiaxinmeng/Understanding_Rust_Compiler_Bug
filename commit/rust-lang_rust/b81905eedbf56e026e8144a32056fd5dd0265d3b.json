{"sha": "b81905eedbf56e026e8144a32056fd5dd0265d3b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4MTkwNWVlZGJmNTZlMDI2ZTgxNDRhMzIwNTZmZDVkZDAyNjVkM2I=", "commit": {"author": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2014-07-02T05:11:47Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-07-03T19:54:51Z"}, "message": "Fix ICE with nested macro_rules!-style macros\n\nFixes #10536.", "tree": {"sha": "f89e6e14e2032e05d8fa8d41c46377fda7ccd00e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f89e6e14e2032e05d8fa8d41c46377fda7ccd00e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b81905eedbf56e026e8144a32056fd5dd0265d3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b81905eedbf56e026e8144a32056fd5dd0265d3b", "html_url": "https://github.com/rust-lang/rust/commit/b81905eedbf56e026e8144a32056fd5dd0265d3b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b81905eedbf56e026e8144a32056fd5dd0265d3b/comments", "author": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9868b65b153a5bed9ca75eca750efae13e93cc44", "url": "https://api.github.com/repos/rust-lang/rust/commits/9868b65b153a5bed9ca75eca750efae13e93cc44", "html_url": "https://github.com/rust-lang/rust/commit/9868b65b153a5bed9ca75eca750efae13e93cc44"}], "stats": {"total": 38, "additions": 36, "deletions": 2}, "files": [{"sha": "f3789e25bc8a7e5e39bc1e1ded000561e43c4578", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b81905eedbf56e026e8144a32056fd5dd0265d3b/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b81905eedbf56e026e8144a32056fd5dd0265d3b/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=b81905eedbf56e026e8144a32056fd5dd0265d3b", "patch": "@@ -3248,7 +3248,7 @@ impl<'a> Parser<'a> {\n                 None      => {\n                     // we only expect an ident if we didn't parse one\n                     // above.\n-                    let ident_str = if id == token::special_idents::invalid {\n+                    let ident_str = if id.name == token::special_idents::invalid.name {\n                         \"identifier, \"\n                     } else {\n                         \"\"\n@@ -3268,7 +3268,7 @@ impl<'a> Parser<'a> {\n             );\n             let hi = self.span.hi;\n \n-            if id == token::special_idents::invalid {\n+            if id.name == token::special_idents::invalid.name {\n                 return box(GC) spanned(lo, hi, StmtMac(\n                     spanned(lo, hi, MacInvocTT(pth, tts, EMPTY_CTXT)), false));\n             } else {"}, {"sha": "36afc729de9590c3f498cc73bf751ea3eb15f97b", "filename": "src/test/compile-fail/issue-10536.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/b81905eedbf56e026e8144a32056fd5dd0265d3b/src%2Ftest%2Fcompile-fail%2Fissue-10536.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b81905eedbf56e026e8144a32056fd5dd0265d3b/src%2Ftest%2Fcompile-fail%2Fissue-10536.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-10536.rs?ref=b81905eedbf56e026e8144a32056fd5dd0265d3b", "patch": "@@ -0,0 +1,34 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// We only want to assert that this doesn't ICE, we don't particularly care\n+// about whether it nor it fails to compile.\n+\n+// error-pattern:\n+\n+#![feature(macro_rules)]\n+\n+macro_rules! foo{\n+    () => {{\n+        macro_rules! bar{() => (())}\n+        1\n+    }}\n+}\n+\n+pub fn main() {\n+    foo!();\n+\n+    assert!({one! two()});\n+\n+    // regardless of whether nested macro_rules works, the following should at\n+    // least throw a conventional error.\n+    assert!({one! two});\n+}\n+"}]}