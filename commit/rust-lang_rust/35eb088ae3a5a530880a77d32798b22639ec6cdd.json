{"sha": "35eb088ae3a5a530880a77d32798b22639ec6cdd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1ZWIwODhhZTNhNWE1MzA4ODBhNzdkMzI3OThiMjI2MzllYzZjZGQ=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-11-05T22:23:03Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-11-05T22:23:03Z"}, "message": "rustc: Implement function types", "tree": {"sha": "1dc4f4fdf7f07c203ceed3c581cb6805a49b1361", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1dc4f4fdf7f07c203ceed3c581cb6805a49b1361"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/35eb088ae3a5a530880a77d32798b22639ec6cdd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/35eb088ae3a5a530880a77d32798b22639ec6cdd", "html_url": "https://github.com/rust-lang/rust/commit/35eb088ae3a5a530880a77d32798b22639ec6cdd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/35eb088ae3a5a530880a77d32798b22639ec6cdd/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91b1885ba2a82cd1ac3701a71bb47bf6b7ddd8e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/91b1885ba2a82cd1ac3701a71bb47bf6b7ddd8e9", "html_url": "https://github.com/rust-lang/rust/commit/91b1885ba2a82cd1ac3701a71bb47bf6b7ddd8e9"}], "stats": {"total": 61, "additions": 60, "deletions": 1}, "files": [{"sha": "830856e0c6f68c085ffef707bdb88e689a02daa2", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/35eb088ae3a5a530880a77d32798b22639ec6cdd/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35eb088ae3a5a530880a77d32798b22639ec6cdd/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=35eb088ae3a5a530880a77d32798b22639ec6cdd", "patch": "@@ -130,6 +130,7 @@ tag ty_ {\n     ty_box(@ty);\n     ty_vec(@ty);\n     ty_tup(vec[tup(bool /* mutability */, @ty)]);\n+    ty_fn(vec[rec(mode mode, @ty ty)], @ty);        // TODO: effect\n     ty_path(path, option.t[def]);\n }\n "}, {"sha": "7ce5703f62846791dc4c3046f0e97fa59b5f5351", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/35eb088ae3a5a530880a77d32798b22639ec6cdd/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35eb088ae3a5a530880a77d32798b22639ec6cdd/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=35eb088ae3a5a530880a77d32798b22639ec6cdd", "patch": "@@ -108,6 +108,45 @@ impure fn parse_possibly_mutable_ty(parser p) -> tup(bool, @ast.ty) {\n     ret tup(mut, parse_ty(p));\n }\n \n+impure fn parse_ty_fn(parser p) -> ast.ty_ {\n+    impure fn parse_fn_input_ty(parser p) -> rec(ast.mode mode, @ast.ty ty) {\n+        auto mode;\n+        if (p.peek() == token.BINOP(token.AND)) {\n+            p.bump();\n+            mode = ast.alias;\n+        } else {\n+            mode = ast.val;\n+        }\n+\n+        auto t = parse_ty(p);\n+\n+        alt (p.peek()) {\n+            case (token.IDENT(_)) { p.bump(); /* ignore the param name */ }\n+            case (_) { /* no param name present */ }\n+        }\n+\n+        ret rec(mode=mode, ty=t);\n+    }\n+\n+    auto lo = p.get_span();\n+\n+    expect(p, token.FN);\n+\n+    auto f = parse_fn_input_ty; // FIXME: trans_const_lval bug\n+    auto inputs = parse_seq[rec(ast.mode mode, @ast.ty ty)](token.LPAREN,\n+        token.RPAREN, some(token.COMMA), f, p);\n+\n+    let @ast.ty output;\n+    if (p.peek() == token.RARROW) {\n+        p.bump();\n+        output = parse_ty(p);\n+    } else {\n+        output = @spanned(lo, inputs.span, ast.ty_nil);\n+    }\n+\n+    ret ast.ty_fn(inputs.node, output);\n+}\n+            \n impure fn parse_ty(parser p) -> @ast.ty {\n     auto lo = p.get_span();\n     let ast.ty_ t;\n@@ -135,6 +174,10 @@ impure fn parse_ty(parser p) -> @ast.ty {\n             t = ast.ty_tup(elems.node);\n         }\n \n+        case (token.FN) {\n+            t = parse_ty_fn(p);\n+        }\n+\n         case (_) {\n             p.err(\"expecting type\");\n             t = ast.ty_nil;"}, {"sha": "51b9595a020fd3588736889d4080b9e7d82aa1f1", "filename": "src/comp/middle/fold.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/35eb088ae3a5a530880a77d32798b22639ec6cdd/src%2Fcomp%2Fmiddle%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35eb088ae3a5a530880a77d32798b22639ec6cdd/src%2Fcomp%2Fmiddle%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ffold.rs?ref=35eb088ae3a5a530880a77d32798b22639ec6cdd", "patch": "@@ -46,8 +46,12 @@ type ast_fold[ENV] =\n      (fn(&ENV e, &span sp,\n          vec[tup(bool, @ty)] elts) -> @ty)        fold_ty_tup,\n \n+     (fn(&ENV e, &span sp,\n+         vec[rec(ast.mode mode, @ty ty)] inputs,\n+         @ty output) -> @ty)                      fold_ty_fn,\n+\n      (fn(&ENV e, &span sp, ast.path p,\n-         &option.t[def] d) -> @ty)                  fold_ty_path,\n+         &option.t[def] d) -> @ty)                fold_ty_path,\n \n      // Expr folds.\n      (fn(&ENV e, &span sp,\n@@ -226,6 +230,10 @@ fn fold_ty[ENV](&ENV env, ast_fold[ENV] fld, @ty t) -> @ty {\n             }\n             ret fld.fold_ty_path(env_, t.span, path, ref_opt);\n         }\n+\n+        case (ast.ty_fn(?inputs, ?output)) {\n+            ret fld.fold_ty_fn(env_, t.span, inputs, output);\n+        }\n     }\n }\n \n@@ -567,6 +575,12 @@ fn identity_fold_ty_tup[ENV](&ENV env, &span sp, vec[tup(bool,@ty)] elts)\n     ret @respan(sp, ast.ty_tup(elts));\n }\n \n+fn identity_fold_ty_fn[ENV](&ENV env, &span sp,\n+                            vec[rec(ast.mode mode, @ty ty)] inputs,\n+                            @ty output) -> @ty {\n+    ret @respan(sp, ast.ty_fn(inputs, output));\n+}\n+\n fn identity_fold_ty_path[ENV](&ENV env, &span sp, ast.path p,\n                         &option.t[def] d) -> @ty {\n     ret @respan(sp, ast.ty_path(p, d));\n@@ -785,6 +799,7 @@ fn new_identity_fold[ENV]() -> ast_fold[ENV] {\n          fold_ty_box     = bind identity_fold_ty_box[ENV](_,_,_),\n          fold_ty_vec     = bind identity_fold_ty_vec[ENV](_,_,_),\n          fold_ty_tup     = bind identity_fold_ty_tup[ENV](_,_,_),\n+         fold_ty_fn      = bind identity_fold_ty_fn[ENV](_,_,_,_),\n          fold_ty_path    = bind identity_fold_ty_path[ENV](_,_,_,_),\n \n          fold_expr_vec    = bind identity_fold_expr_vec[ENV](_,_,_,_),"}]}