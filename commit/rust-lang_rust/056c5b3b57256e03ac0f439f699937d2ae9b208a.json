{"sha": "056c5b3b57256e03ac0f439f699937d2ae9b208a", "node_id": "C_kwDOAAsO6NoAKDA1NmM1YjNiNTcyNTZlMDNhYzBmNDM5ZjY5OTkzN2QyYWU5YjIwOGE", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2023-02-17T16:33:05Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2023-02-21T21:15:46Z"}, "message": "Make query keys `Copy`", "tree": {"sha": "d33e8201246c373273e251ea2e02641031511fbf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d33e8201246c373273e251ea2e02641031511fbf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/056c5b3b57256e03ac0f439f699937d2ae9b208a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/056c5b3b57256e03ac0f439f699937d2ae9b208a", "html_url": "https://github.com/rust-lang/rust/commit/056c5b3b57256e03ac0f439f699937d2ae9b208a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/056c5b3b57256e03ac0f439f699937d2ae9b208a/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4f5fc3e5cc70b7a43bf7b518c455f3d9bada9e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4f5fc3e5cc70b7a43bf7b518c455f3d9bada9e3", "html_url": "https://github.com/rust-lang/rust/commit/f4f5fc3e5cc70b7a43bf7b518c455f3d9bada9e3"}], "stats": {"total": 35, "additions": 18, "deletions": 17}, "files": [{"sha": "4b3cd16c29f25914d6fea13aa84819feaeb8f7f1", "filename": "compiler/rustc_query_system/src/query/caches.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/056c5b3b57256e03ac0f439f699937d2ae9b208a/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fcaches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056c5b3b57256e03ac0f439f699937d2ae9b208a/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fcaches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fcaches.rs?ref=056c5b3b57256e03ac0f439f699937d2ae9b208a", "patch": "@@ -21,7 +21,7 @@ pub trait QueryStorage {\n }\n \n pub trait QueryCache: QueryStorage + Sized {\n-    type Key: Hash + Eq + Clone + Debug;\n+    type Key: Hash + Eq + Copy + Debug;\n \n     /// Checks if the query is already computed and in the cache.\n     /// It returns the shard index and a lock guard to the shard,\n@@ -61,7 +61,7 @@ impl<K: Eq + Hash, V: Copy + Debug> QueryStorage for DefaultCache<K, V> {\n \n impl<K, V> QueryCache for DefaultCache<K, V>\n where\n-    K: Eq + Hash + Clone + Debug,\n+    K: Eq + Hash + Copy + Debug,\n     V: Copy + Debug,\n {\n     type Key = K;\n@@ -179,7 +179,7 @@ impl<K: Eq + Idx, V: Copy + Debug> QueryStorage for VecCache<K, V> {\n \n impl<K, V> QueryCache for VecCache<K, V>\n where\n-    K: Eq + Idx + Clone + Debug,\n+    K: Eq + Idx + Copy + Debug,\n     V: Copy + Debug,\n {\n     type Key = K;"}, {"sha": "d563738734657e3c64171cde5bf1f23608780888", "filename": "compiler/rustc_query_system/src/query/config.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/056c5b3b57256e03ac0f439f699937d2ae9b208a/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056c5b3b57256e03ac0f439f699937d2ae9b208a/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fconfig.rs?ref=056c5b3b57256e03ac0f439f699937d2ae9b208a", "patch": "@@ -19,7 +19,9 @@ pub type TryLoadFromDisk<Qcx, Q> =\n pub trait QueryConfig<Qcx: QueryContext> {\n     const NAME: &'static str;\n \n-    type Key: DepNodeParams<Qcx::DepContext> + Eq + Hash + Clone + Debug;\n+    // `Key` and `Value` are `Copy` instead of `Clone` to ensure copying them stays cheap,\n+    // but it isn't necessary.\n+    type Key: DepNodeParams<Qcx::DepContext> + Eq + Hash + Copy + Debug;\n     type Value: Debug + Copy;\n \n     type Cache: QueryCache<Key = Self::Key, Value = Self::Value>;"}, {"sha": "f9a4175e5c57b62e0f371d803323ba615e20d98d", "filename": "compiler/rustc_query_system/src/query/plumbing.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/056c5b3b57256e03ac0f439f699937d2ae9b208a/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056c5b3b57256e03ac0f439f699937d2ae9b208a/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs?ref=056c5b3b57256e03ac0f439f699937d2ae9b208a", "patch": "@@ -49,7 +49,7 @@ enum QueryResult<D: DepKind> {\n \n impl<K, D> QueryState<K, D>\n where\n-    K: Eq + Hash + Clone + Debug,\n+    K: Eq + Hash + Copy + Debug,\n     D: DepKind,\n {\n     pub fn all_inactive(&self) -> bool {\n@@ -78,7 +78,7 @@ where\n             for shard in shards.iter() {\n                 for (k, v) in shard.iter() {\n                     if let QueryResult::Started(ref job) = *v {\n-                        let query = make_query(qcx, k.clone());\n+                        let query = make_query(qcx, *k);\n                         jobs.insert(job.id, QueryJobInfo { query, job: job.clone() });\n                     }\n                 }\n@@ -92,7 +92,7 @@ where\n             // really hurt much.)\n             for (k, v) in self.active.try_lock()?.iter() {\n                 if let QueryResult::Started(ref job) = *v {\n-                    let query = make_query(qcx, k.clone());\n+                    let query = make_query(qcx, *k);\n                     jobs.insert(job.id, QueryJobInfo { query, job: job.clone() });\n                 }\n             }\n@@ -112,7 +112,7 @@ impl<K, D: DepKind> Default for QueryState<K, D> {\n /// This will poison the relevant query if dropped.\n struct JobOwner<'tcx, K, D: DepKind>\n where\n-    K: Eq + Hash + Clone,\n+    K: Eq + Hash + Copy,\n {\n     state: &'tcx QueryState<K, D>,\n     key: K,\n@@ -164,7 +164,7 @@ where\n \n impl<'tcx, K, D: DepKind> JobOwner<'tcx, K, D>\n where\n-    K: Eq + Hash + Clone,\n+    K: Eq + Hash + Copy,\n {\n     /// Either gets a `JobOwner` corresponding the query, allowing us to\n     /// start executing the query, or returns with the result of the query.\n@@ -196,7 +196,7 @@ where\n                 let job = qcx.current_query_job();\n                 let job = QueryJob::new(id, span, job);\n \n-                let key = entry.key().clone();\n+                let key = *entry.key();\n                 entry.insert(QueryResult::Started(job));\n \n                 let owner = JobOwner { state, id, key };\n@@ -275,7 +275,7 @@ where\n \n impl<'tcx, K, D> Drop for JobOwner<'tcx, K, D>\n where\n-    K: Eq + Hash + Clone,\n+    K: Eq + Hash + Copy,\n     D: DepKind,\n {\n     #[inline(never)]\n@@ -292,7 +292,7 @@ where\n                 QueryResult::Started(job) => job,\n                 QueryResult::Poisoned => panic!(),\n             };\n-            shard.insert(self.key.clone(), QueryResult::Poisoned);\n+            shard.insert(self.key, QueryResult::Poisoned);\n             job\n         };\n         // Also signal the completion of the job, so waiters\n@@ -311,7 +311,7 @@ pub(crate) struct CycleError<D: DepKind> {\n /// The result of `try_start`.\n enum TryGetJob<'tcx, K, D>\n where\n-    K: Eq + Hash + Clone,\n+    K: Eq + Hash + Copy,\n     D: DepKind,\n {\n     /// The query is not yet started. Contains a guard to the cache eventually used to start it.\n@@ -359,10 +359,9 @@ where\n     Q: QueryConfig<Qcx>,\n     Qcx: QueryContext,\n {\n-    match JobOwner::<'_, Q::Key, Qcx::DepKind>::try_start(&qcx, state, span, key.clone()) {\n+    match JobOwner::<'_, Q::Key, Qcx::DepKind>::try_start(&qcx, state, span, key) {\n         TryGetJob::NotYetStarted(job) => {\n-            let (result, dep_node_index) =\n-                execute_job::<Q, Qcx>(qcx, key.clone(), dep_node, job.id);\n+            let (result, dep_node_index) = execute_job::<Q, Qcx>(qcx, key, dep_node, job.id);\n             if Q::FEEDABLE {\n                 // We may have put a value inside the cache from inside the execution.\n                 // Verify that it has the same hash as what we have now, to ensure consistency.\n@@ -547,7 +546,7 @@ where\n     let prof_timer = qcx.dep_context().profiler().query_provider();\n \n     // The dep-graph for this computation is already in-place.\n-    let result = dep_graph.with_ignore(|| Q::compute(qcx, key.clone()));\n+    let result = dep_graph.with_ignore(|| Q::compute(qcx, *key));\n \n     prof_timer.finish_with_query_invocation_id(dep_node_index.into());\n "}]}