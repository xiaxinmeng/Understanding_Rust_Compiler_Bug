{"sha": "85fb3b6fc0a6698a001ad8b26b26d389645c3507", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1ZmIzYjZmYzBhNjY5OGEwMDFhZDhiMjZiMjZkMzg5NjQ1YzM1MDc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-12-30T14:19:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-12-30T14:19:08Z"}, "message": "Auto merge of #30526 - Ms2ger:PathParameters, r=brson", "tree": {"sha": "ad24ee33104ccda6f28f86758e88efbbc9a916dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad24ee33104ccda6f28f86758e88efbbc9a916dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/85fb3b6fc0a6698a001ad8b26b26d389645c3507", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/85fb3b6fc0a6698a001ad8b26b26d389645c3507", "html_url": "https://github.com/rust-lang/rust/commit/85fb3b6fc0a6698a001ad8b26b26d389645c3507", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/85fb3b6fc0a6698a001ad8b26b26d389645c3507/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "176ee349a704a1aee9dfb79c27c5da20db7942a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/176ee349a704a1aee9dfb79c27c5da20db7942a5", "html_url": "https://github.com/rust-lang/rust/commit/176ee349a704a1aee9dfb79c27c5da20db7942a5"}, {"sha": "2359ab0dc9c52ab3447b581b88e4994c8f99d200", "url": "https://api.github.com/repos/rust-lang/rust/commits/2359ab0dc9c52ab3447b581b88e4994c8f99d200", "html_url": "https://github.com/rust-lang/rust/commit/2359ab0dc9c52ab3447b581b88e4994c8f99d200"}], "stats": {"total": 71, "additions": 36, "deletions": 35}, "files": [{"sha": "81d3367ab00dc97ccccb3b2c2ff564315b51c477", "filename": "src/librustc_front/lowering.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85fb3b6fc0a6698a001ad8b26b26d389645c3507/src%2Flibrustc_front%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fb3b6fc0a6698a001ad8b26b26d389645c3507/src%2Flibrustc_front%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Flowering.rs?ref=85fb3b6fc0a6698a001ad8b26b26d389645c3507", "patch": "@@ -319,9 +319,9 @@ pub fn lower_path_parameters(lctx: &LoweringContext,\n                              path_parameters: &PathParameters)\n                              -> hir::PathParameters {\n     match *path_parameters {\n-        AngleBracketedParameters(ref data) =>\n+        PathParameters::AngleBracketed(ref data) =>\n             hir::AngleBracketedParameters(lower_angle_bracketed_parameter_data(lctx, data)),\n-        ParenthesizedParameters(ref data) =>\n+        PathParameters::Parenthesized(ref data) =>\n             hir::ParenthesizedParameters(lower_parenthesized_parameter_data(lctx, data)),\n     }\n }"}, {"sha": "9617ae6bae54c9cf29a46ef2ec74e846db7ae7bb", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/85fb3b6fc0a6698a001ad8b26b26d389645c3507/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fb3b6fc0a6698a001ad8b26b26d389645c3507/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=85fb3b6fc0a6698a001ad8b26b26d389645c3507", "patch": "@@ -250,14 +250,14 @@ pub struct PathSegment {\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum PathParameters {\n     /// The `<'a, A,B,C>` in `foo::bar::baz::<'a, A,B,C>`\n-    AngleBracketedParameters(AngleBracketedParameterData),\n+    AngleBracketed(AngleBracketedParameterData),\n     /// The `(A,B)` and `C` in `Foo(A,B) -> C`\n-    ParenthesizedParameters(ParenthesizedParameterData),\n+    Parenthesized(ParenthesizedParameterData),\n }\n \n impl PathParameters {\n     pub fn none() -> PathParameters {\n-        AngleBracketedParameters(AngleBracketedParameterData {\n+        PathParameters::AngleBracketed(AngleBracketedParameterData {\n             lifetimes: Vec::new(),\n             types: P::empty(),\n             bindings: P::empty(),\n@@ -266,36 +266,36 @@ impl PathParameters {\n \n     pub fn is_empty(&self) -> bool {\n         match *self {\n-            AngleBracketedParameters(ref data) => data.is_empty(),\n+            PathParameters::AngleBracketed(ref data) => data.is_empty(),\n \n             // Even if the user supplied no types, something like\n             // `X()` is equivalent to `X<(),()>`.\n-            ParenthesizedParameters(..) => false,\n+            PathParameters::Parenthesized(..) => false,\n         }\n     }\n \n     pub fn has_lifetimes(&self) -> bool {\n         match *self {\n-            AngleBracketedParameters(ref data) => !data.lifetimes.is_empty(),\n-            ParenthesizedParameters(_) => false,\n+            PathParameters::AngleBracketed(ref data) => !data.lifetimes.is_empty(),\n+            PathParameters::Parenthesized(_) => false,\n         }\n     }\n \n     pub fn has_types(&self) -> bool {\n         match *self {\n-            AngleBracketedParameters(ref data) => !data.types.is_empty(),\n-            ParenthesizedParameters(..) => true,\n+            PathParameters::AngleBracketed(ref data) => !data.types.is_empty(),\n+            PathParameters::Parenthesized(..) => true,\n         }\n     }\n \n     /// Returns the types that the user wrote. Note that these do not necessarily map to the type\n     /// parameters in the parenthesized case.\n     pub fn types(&self) -> Vec<&P<Ty>> {\n         match *self {\n-            AngleBracketedParameters(ref data) => {\n+            PathParameters::AngleBracketed(ref data) => {\n                 data.types.iter().collect()\n             }\n-            ParenthesizedParameters(ref data) => {\n+            PathParameters::Parenthesized(ref data) => {\n                 data.inputs.iter()\n                     .chain(data.output.iter())\n                     .collect()\n@@ -305,21 +305,21 @@ impl PathParameters {\n \n     pub fn lifetimes(&self) -> Vec<&Lifetime> {\n         match *self {\n-            AngleBracketedParameters(ref data) => {\n+            PathParameters::AngleBracketed(ref data) => {\n                 data.lifetimes.iter().collect()\n             }\n-            ParenthesizedParameters(_) => {\n+            PathParameters::Parenthesized(_) => {\n                 Vec::new()\n             }\n         }\n     }\n \n     pub fn bindings(&self) -> Vec<&P<TypeBinding>> {\n         match *self {\n-            AngleBracketedParameters(ref data) => {\n+            PathParameters::AngleBracketed(ref data) => {\n                 data.bindings.iter().collect()\n             }\n-            ParenthesizedParameters(_) => {\n+            PathParameters::Parenthesized(_) => {\n                 Vec::new()\n             }\n         }"}, {"sha": "ba4d1e2193e5f0f49be54071dd73dca53783f282", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fb3b6fc0a6698a001ad8b26b26d389645c3507/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fb3b6fc0a6698a001ad8b26b26d389645c3507/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=85fb3b6fc0a6698a001ad8b26b26d389645c3507", "patch": "@@ -40,7 +40,7 @@ pub fn ident_to_path(s: Span, identifier: Ident) -> Path {\n         segments: vec!(\n             ast::PathSegment {\n                 identifier: identifier,\n-                parameters: ast::AngleBracketedParameters(ast::AngleBracketedParameterData {\n+                parameters: ast::PathParameters::AngleBracketed(ast::AngleBracketedParameterData {\n                     lifetimes: Vec::new(),\n                     types: P::empty(),\n                     bindings: P::empty(),"}, {"sha": "a74c2340cecb8621ae1d3ce2034bec3c43f75594", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85fb3b6fc0a6698a001ad8b26b26d389645c3507/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fb3b6fc0a6698a001ad8b26b26d389645c3507/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=85fb3b6fc0a6698a001ad8b26b26d389645c3507", "patch": "@@ -328,7 +328,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         }).collect();\n         segments.push(ast::PathSegment {\n             identifier: last_identifier,\n-            parameters: ast::AngleBracketedParameters(ast::AngleBracketedParameterData {\n+            parameters: ast::PathParameters::AngleBracketed(ast::AngleBracketedParameterData {\n                 lifetimes: lifetimes,\n                 types: P::from_vec(types),\n                 bindings: P::from_vec(bindings),\n@@ -366,7 +366,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         let mut path = trait_path;\n         path.segments.push(ast::PathSegment {\n             identifier: ident,\n-            parameters: ast::AngleBracketedParameters(ast::AngleBracketedParameterData {\n+            parameters: ast::PathParameters::AngleBracketed(ast::AngleBracketedParameterData {\n                 lifetimes: lifetimes,\n                 types: P::from_vec(types),\n                 bindings: P::from_vec(bindings),"}, {"sha": "1de6d6c002f065d60033eb3f0d9cc4228ff575bd", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/85fb3b6fc0a6698a001ad8b26b26d389645c3507/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fb3b6fc0a6698a001ad8b26b26d389645c3507/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=85fb3b6fc0a6698a001ad8b26b26d389645c3507", "patch": "@@ -469,10 +469,10 @@ pub fn noop_fold_path_parameters<T: Folder>(path_parameters: PathParameters, fld\n                                             -> PathParameters\n {\n     match path_parameters {\n-        AngleBracketedParameters(data) =>\n-            AngleBracketedParameters(fld.fold_angle_bracketed_parameter_data(data)),\n-        ParenthesizedParameters(data) =>\n-            ParenthesizedParameters(fld.fold_parenthesized_parameter_data(data)),\n+        PathParameters::AngleBracketed(data) =>\n+            PathParameters::AngleBracketed(fld.fold_angle_bracketed_parameter_data(data)),\n+        PathParameters::Parenthesized(data) =>\n+            PathParameters::Parenthesized(fld.fold_parenthesized_parameter_data(data)),\n     }\n }\n "}, {"sha": "92ece0a268485cc266197d2dd708c8b4efd16541", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/85fb3b6fc0a6698a001ad8b26b26d389645c3507/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fb3b6fc0a6698a001ad8b26b26d389645c3507/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=85fb3b6fc0a6698a001ad8b26b26d389645c3507", "patch": "@@ -1697,7 +1697,7 @@ impl<'a> Parser<'a> {\n             let parameters = if try!(self.eat_lt() ){\n                 let (lifetimes, types, bindings) = try!(self.parse_generic_values_after_lt());\n \n-                ast::AngleBracketedParameters(ast::AngleBracketedParameterData {\n+                ast::PathParameters::AngleBracketed(ast::AngleBracketedParameterData {\n                     lifetimes: lifetimes,\n                     types: P::from_vec(types),\n                     bindings: P::from_vec(bindings),\n@@ -1718,7 +1718,7 @@ impl<'a> Parser<'a> {\n \n                 let hi = self.last_span.hi;\n \n-                ast::ParenthesizedParameters(ast::ParenthesizedParameterData {\n+                ast::PathParameters::Parenthesized(ast::ParenthesizedParameterData {\n                     span: mk_sp(lo, hi),\n                     inputs: inputs,\n                     output: output_ty,\n@@ -1759,13 +1759,14 @@ impl<'a> Parser<'a> {\n             if try!(self.eat_lt() ){\n                 // Consumed `a::b::<`, go look for types\n                 let (lifetimes, types, bindings) = try!(self.parse_generic_values_after_lt());\n+                let parameters = ast::AngleBracketedParameterData {\n+                    lifetimes: lifetimes,\n+                    types: P::from_vec(types),\n+                    bindings: P::from_vec(bindings),\n+                };\n                 segments.push(ast::PathSegment {\n                     identifier: identifier,\n-                    parameters: ast::AngleBracketedParameters(ast::AngleBracketedParameterData {\n-                        lifetimes: lifetimes,\n-                        types: P::from_vec(types),\n-                        bindings: P::from_vec(bindings),\n-                    }),\n+                    parameters: ast::PathParameters::AngleBracketed(parameters),\n                 });\n \n                 // Consumed `a::b::<T,U>`, check for `::` before proceeding"}, {"sha": "67817ee0740e6d38a0f5bbdba768d778e31b79bb", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85fb3b6fc0a6698a001ad8b26b26d389645c3507/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fb3b6fc0a6698a001ad8b26b26d389645c3507/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=85fb3b6fc0a6698a001ad8b26b26d389645c3507", "patch": "@@ -2403,7 +2403,7 @@ impl<'a> State<'a> {\n         }\n \n         match *parameters {\n-            ast::AngleBracketedParameters(ref data) => {\n+            ast::PathParameters::AngleBracketed(ref data) => {\n                 try!(word(&mut self.s, \"<\"));\n \n                 let mut comma = false;\n@@ -2440,7 +2440,7 @@ impl<'a> State<'a> {\n                 try!(word(&mut self.s, \">\"))\n             }\n \n-            ast::ParenthesizedParameters(ref data) => {\n+            ast::PathParameters::Parenthesized(ref data) => {\n                 try!(word(&mut self.s, \"(\"));\n                 try!(self.commasep(\n                     Inconsistent,"}, {"sha": "9b102cd99f305faac1e88a662cd0284c27bcd63c", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85fb3b6fc0a6698a001ad8b26b26d389645c3507/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fb3b6fc0a6698a001ad8b26b26d389645c3507/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=85fb3b6fc0a6698a001ad8b26b26d389645c3507", "patch": "@@ -399,12 +399,12 @@ pub fn walk_path_parameters<'v, V: Visitor<'v>>(visitor: &mut V,\n                                                 _path_span: Span,\n                                                 path_parameters: &'v PathParameters) {\n     match *path_parameters {\n-        AngleBracketedParameters(ref data) => {\n+        PathParameters::AngleBracketed(ref data) => {\n             walk_list!(visitor, visit_ty, &data.types);\n             walk_list!(visitor, visit_lifetime, &data.lifetimes);\n             walk_list!(visitor, visit_assoc_type_binding, &data.bindings);\n         }\n-        ParenthesizedParameters(ref data) => {\n+        PathParameters::Parenthesized(ref data) => {\n             walk_list!(visitor, visit_ty, &data.inputs);\n             walk_list!(visitor, visit_ty, &data.output);\n         }"}]}