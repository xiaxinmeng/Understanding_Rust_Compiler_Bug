{"sha": "c2066cf0694c304c0fc43f17bebefb518b066619", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyMDY2Y2YwNjk0YzMwNGMwZmM0M2YxN2JlYmVmYjUxOGIwNjY2MTk=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2021-02-09T21:16:00Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2021-02-09T21:16:00Z"}, "message": "Remove unnecessary note on errors\n\nSeeing the trait definition doesn't help with implementation not general\nenough errors, so don't make the error message larger to show it.", "tree": {"sha": "ca952a7fb55c206cd4fca4ef5a106f4dadc55c68", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca952a7fb55c206cd4fca4ef5a106f4dadc55c68"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c2066cf0694c304c0fc43f17bebefb518b066619", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c2066cf0694c304c0fc43f17bebefb518b066619", "html_url": "https://github.com/rust-lang/rust/commit/c2066cf0694c304c0fc43f17bebefb518b066619", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c2066cf0694c304c0fc43f17bebefb518b066619/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "638980a07f72e20fcbcdab12b74b2a1a8663741d", "url": "https://api.github.com/repos/rust-lang/rust/commits/638980a07f72e20fcbcdab12b74b2a1a8663741d", "html_url": "https://github.com/rust-lang/rust/commit/638980a07f72e20fcbcdab12b74b2a1a8663741d"}], "stats": {"total": 170, "additions": 28, "deletions": 142}, "files": [{"sha": "d99e79005fbb8bd02c59fcf2bc787f3b9f7e2fa2", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/placeholder_error.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c2066cf0694c304c0fc43f17bebefb518b066619/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2066cf0694c304c0fc43f17bebefb518b066619/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs?ref=c2066cf0694c304c0fc43f17bebefb518b066619", "patch": "@@ -207,10 +207,6 @@ impl NiceRegionError<'me, 'tcx> {\n             self.tcx().def_path_str(trait_def_id),\n         );\n         let mut err = self.tcx().sess.struct_span_err(span, &msg);\n-        err.span_label(\n-            self.tcx().def_span(trait_def_id),\n-            format!(\"trait `{}` defined here\", self.tcx().def_path_str(trait_def_id)),\n-        );\n \n         let leading_ellipsis = if let ObligationCauseCode::ItemObligation(def_id) = cause.code {\n             err.span_label(span, \"doesn't satisfy where-clause\");"}, {"sha": "6188d9ca979cf212df43fc27f6a790b0fd3036af", "filename": "src/test/ui/associated-types/associated-types-eq-hr.stderr", "status": "modified", "additions": 10, "deletions": 45, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/c2066cf0694c304c0fc43f17bebefb518b066619/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2066cf0694c304c0fc43f17bebefb518b066619/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.stderr?ref=c2066cf0694c304c0fc43f17bebefb518b066619", "patch": "@@ -31,79 +31,44 @@ LL |     bar::<IntStruct>();\n error: implementation of `TheTrait` is not general enough\n   --> $DIR/associated-types-eq-hr.rs:96:5\n    |\n-LL | / pub trait TheTrait<T> {\n-LL | |     type A;\n-LL | |\n-LL | |     fn get(&self, t: T) -> Self::A;\n-LL | | }\n-   | |_- trait `TheTrait` defined here\n-...\n-LL |       tuple_one::<Tuple>();\n-   |       ^^^^^^^^^^^^^^^^^^ implementation of `TheTrait` is not general enough\n+LL |     tuple_one::<Tuple>();\n+   |     ^^^^^^^^^^^^^^^^^^ implementation of `TheTrait` is not general enough\n    |\n    = note: `Tuple` must implement `TheTrait<(&'0 isize, &'1 isize)>`, for any two lifetimes `'0` and `'1`...\n    = note: ...but `Tuple` actually implements `TheTrait<(&'2 isize, &'2 isize)>`, for some specific lifetime `'2`\n \n error: implementation of `TheTrait` is not general enough\n   --> $DIR/associated-types-eq-hr.rs:96:5\n    |\n-LL | / pub trait TheTrait<T> {\n-LL | |     type A;\n-LL | |\n-LL | |     fn get(&self, t: T) -> Self::A;\n-LL | | }\n-   | |_- trait `TheTrait` defined here\n-...\n-LL |       tuple_one::<Tuple>();\n-   |       ^^^^^^^^^^^^^^^^^^ implementation of `TheTrait` is not general enough\n+LL |     tuple_one::<Tuple>();\n+   |     ^^^^^^^^^^^^^^^^^^ implementation of `TheTrait` is not general enough\n    |\n    = note: `Tuple` must implement `TheTrait<(&'0 isize, &'1 isize)>`, for any two lifetimes `'0` and `'1`...\n    = note: ...but `Tuple` actually implements `TheTrait<(&'2 isize, &'2 isize)>`, for some specific lifetime `'2`\n \n error: implementation of `TheTrait` is not general enough\n   --> $DIR/associated-types-eq-hr.rs:102:5\n    |\n-LL | / pub trait TheTrait<T> {\n-LL | |     type A;\n-LL | |\n-LL | |     fn get(&self, t: T) -> Self::A;\n-LL | | }\n-   | |_- trait `TheTrait` defined here\n-...\n-LL |       tuple_two::<Tuple>();\n-   |       ^^^^^^^^^^^^^^^^^^ implementation of `TheTrait` is not general enough\n+LL |     tuple_two::<Tuple>();\n+   |     ^^^^^^^^^^^^^^^^^^ implementation of `TheTrait` is not general enough\n    |\n    = note: `Tuple` must implement `TheTrait<(&'0 isize, &'1 isize)>`, for any two lifetimes `'0` and `'1`...\n    = note: ...but `Tuple` actually implements `TheTrait<(&'2 isize, &'2 isize)>`, for some specific lifetime `'2`\n \n error: implementation of `TheTrait` is not general enough\n   --> $DIR/associated-types-eq-hr.rs:102:5\n    |\n-LL | / pub trait TheTrait<T> {\n-LL | |     type A;\n-LL | |\n-LL | |     fn get(&self, t: T) -> Self::A;\n-LL | | }\n-   | |_- trait `TheTrait` defined here\n-...\n-LL |       tuple_two::<Tuple>();\n-   |       ^^^^^^^^^^^^^^^^^^ implementation of `TheTrait` is not general enough\n+LL |     tuple_two::<Tuple>();\n+   |     ^^^^^^^^^^^^^^^^^^ implementation of `TheTrait` is not general enough\n    |\n    = note: `Tuple` must implement `TheTrait<(&'0 isize, &'1 isize)>`, for any two lifetimes `'0` and `'1`...\n    = note: ...but `Tuple` actually implements `TheTrait<(&'2 isize, &'2 isize)>`, for some specific lifetime `'2`\n \n error: implementation of `TheTrait` is not general enough\n   --> $DIR/associated-types-eq-hr.rs:112:5\n    |\n-LL | / pub trait TheTrait<T> {\n-LL | |     type A;\n-LL | |\n-LL | |     fn get(&self, t: T) -> Self::A;\n-LL | | }\n-   | |_- trait `TheTrait` defined here\n-...\n-LL |       tuple_four::<Tuple>();\n-   |       ^^^^^^^^^^^^^^^^^^^ implementation of `TheTrait` is not general enough\n+LL |     tuple_four::<Tuple>();\n+   |     ^^^^^^^^^^^^^^^^^^^ implementation of `TheTrait` is not general enough\n    |\n    = note: `Tuple` must implement `TheTrait<(&'0 isize, &'1 isize)>`, for any two lifetimes `'0` and `'1`...\n    = note: ...but `Tuple` actually implements `TheTrait<(&'2 isize, &'2 isize)>`, for some specific lifetime `'2`"}, {"sha": "5fe4193905c72f0931e7df09619e71febbd53b9c", "filename": "src/test/ui/generator/auto-trait-regions.stderr", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c2066cf0694c304c0fc43f17bebefb518b066619/src%2Ftest%2Fui%2Fgenerator%2Fauto-trait-regions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2066cf0694c304c0fc43f17bebefb518b066619/src%2Ftest%2Fui%2Fgenerator%2Fauto-trait-regions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fauto-trait-regions.stderr?ref=c2066cf0694c304c0fc43f17bebefb518b066619", "patch": "@@ -1,9 +1,6 @@\n error: implementation of `Foo` is not general enough\n   --> $DIR/auto-trait-regions.rs:31:5\n    |\n-LL | auto trait Foo {}\n-   | ----------------- trait `Foo` defined here\n-...\n LL |     assert_foo(gen);\n    |     ^^^^^^^^^^ implementation of `Foo` is not general enough\n    |\n@@ -13,9 +10,6 @@ LL |     assert_foo(gen);\n error: implementation of `Foo` is not general enough\n   --> $DIR/auto-trait-regions.rs:31:5\n    |\n-LL | auto trait Foo {}\n-   | ----------------- trait `Foo` defined here\n-...\n LL |     assert_foo(gen);\n    |     ^^^^^^^^^^ implementation of `Foo` is not general enough\n    |\n@@ -25,9 +19,6 @@ LL |     assert_foo(gen);\n error: implementation of `Foo` is not general enough\n   --> $DIR/auto-trait-regions.rs:50:5\n    |\n-LL | auto trait Foo {}\n-   | ----------------- trait `Foo` defined here\n-...\n LL |     assert_foo(gen);\n    |     ^^^^^^^^^^ implementation of `Foo` is not general enough\n    |\n@@ -37,9 +28,6 @@ LL |     assert_foo(gen);\n error: implementation of `Foo` is not general enough\n   --> $DIR/auto-trait-regions.rs:50:5\n    |\n-LL | auto trait Foo {}\n-   | ----------------- trait `Foo` defined here\n-...\n LL |     assert_foo(gen);\n    |     ^^^^^^^^^^ implementation of `Foo` is not general enough\n    |"}, {"sha": "520938a633514b6c41bdf929605ab24a2f061843", "filename": "src/test/ui/hrtb/due-to-where-clause.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c2066cf0694c304c0fc43f17bebefb518b066619/src%2Ftest%2Fui%2Fhrtb%2Fdue-to-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2066cf0694c304c0fc43f17bebefb518b066619/src%2Ftest%2Fui%2Fhrtb%2Fdue-to-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fdue-to-where-clause.stderr?ref=c2066cf0694c304c0fc43f17bebefb518b066619", "patch": "@@ -3,9 +3,6 @@ error: implementation of `Foo` is not general enough\n    |\n LL |     test::<FooS>(&mut 42);\n    |     ^^^^^^^^^^^^ implementation of `Foo` is not general enough\n-...\n-LL | trait Foo<'a> {}\n-   | ---------------- trait `Foo` defined here\n    |\n    = note: `FooS<'_>` must implement `Foo<'0>`, for any lifetime `'0`...\n    = note: ...but `FooS<'_>` actually implements `Foo<'1>`, for some specific lifetime `'1`"}, {"sha": "f014eab8601fa4a728a6411304841a81553f5eeb", "filename": "src/test/ui/hrtb/hrtb-cache-issue-54302.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c2066cf0694c304c0fc43f17bebefb518b066619/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-cache-issue-54302.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2066cf0694c304c0fc43f17bebefb518b066619/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-cache-issue-54302.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-cache-issue-54302.stderr?ref=c2066cf0694c304c0fc43f17bebefb518b066619", "patch": "@@ -1,9 +1,6 @@\n error: implementation of `Deserialize` is not general enough\n   --> $DIR/hrtb-cache-issue-54302.rs:19:5\n    |\n-LL | trait Deserialize<'de> {}\n-   | ------------------------- trait `Deserialize` defined here\n-...\n LL |     assert_deserialize_owned::<&'static str>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ implementation of `Deserialize` is not general enough\n    |"}, {"sha": "7a0ede5af201ca1522622bbbf9caf9367f88e218", "filename": "src/test/ui/hrtb/hrtb-conflate-regions.stderr", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c2066cf0694c304c0fc43f17bebefb518b066619/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-conflate-regions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2066cf0694c304c0fc43f17bebefb518b066619/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-conflate-regions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-conflate-regions.stderr?ref=c2066cf0694c304c0fc43f17bebefb518b066619", "patch": "@@ -1,13 +1,8 @@\n error: implementation of `Foo` is not general enough\n   --> $DIR/hrtb-conflate-regions.rs:27:10\n    |\n-LL | / trait Foo<X> {\n-LL | |     fn foo(&self, x: X) { }\n-LL | | }\n-   | |_- trait `Foo` defined here\n-...\n-LL |   fn b() { want_foo2::<SomeStruct>(); }\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough\n+LL | fn b() { want_foo2::<SomeStruct>(); }\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough\n    |\n    = note: `SomeStruct` must implement `Foo<(&'0 isize, &'1 isize)>`, for any two lifetimes `'0` and `'1`...\n    = note: ...but `SomeStruct` actually implements `Foo<(&'2 isize, &'2 isize)>`, for some specific lifetime `'2`"}, {"sha": "2f946c7d9bfe8d48e4b818510c240268c3eb3596", "filename": "src/test/ui/hrtb/hrtb-exists-forall-trait-contravariant.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c2066cf0694c304c0fc43f17bebefb518b066619/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-contravariant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2066cf0694c304c0fc43f17bebefb518b066619/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-contravariant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-contravariant.stderr?ref=c2066cf0694c304c0fc43f17bebefb518b066619", "patch": "@@ -1,9 +1,6 @@\n error: implementation of `Trait` is not general enough\n   --> $DIR/hrtb-exists-forall-trait-contravariant.rs:34:5\n    |\n-LL | trait Trait<T> {}\n-   | ----------------- trait `Trait` defined here\n-...\n LL |     foo::<()>();\n    |     ^^^^^^^^^ implementation of `Trait` is not general enough\n    |"}, {"sha": "ba244e0f2ebc7ac3b0eb2435ed305807bb7bd20f", "filename": "src/test/ui/hrtb/hrtb-exists-forall-trait-invariant.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c2066cf0694c304c0fc43f17bebefb518b066619/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-invariant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2066cf0694c304c0fc43f17bebefb518b066619/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-invariant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-invariant.stderr?ref=c2066cf0694c304c0fc43f17bebefb518b066619", "patch": "@@ -1,9 +1,6 @@\n error: implementation of `Trait` is not general enough\n   --> $DIR/hrtb-exists-forall-trait-invariant.rs:28:5\n    |\n-LL | trait Trait<T> {}\n-   | ----------------- trait `Trait` defined here\n-...\n LL |     foo::<()>();\n    |     ^^^^^^^^^ implementation of `Trait` is not general enough\n    |"}, {"sha": "0d46a130e093ea9540f12d7482fbfd7249a761eb", "filename": "src/test/ui/hrtb/hrtb-just-for-static.stderr", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c2066cf0694c304c0fc43f17bebefb518b066619/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2066cf0694c304c0fc43f17bebefb518b066619/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.stderr?ref=c2066cf0694c304c0fc43f17bebefb518b066619", "patch": "@@ -1,27 +1,17 @@\n error: implementation of `Foo` is not general enough\n   --> $DIR/hrtb-just-for-static.rs:24:5\n    |\n-LL | / trait Foo<X> {\n-LL | |     fn foo(&self, x: X) { }\n-LL | | }\n-   | |_- trait `Foo` defined here\n-...\n-LL |       want_hrtb::<StaticInt>()\n-   |       ^^^^^^^^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough\n+LL |     want_hrtb::<StaticInt>()\n+   |     ^^^^^^^^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough\n    |\n    = note: `StaticInt` must implement `Foo<&'0 isize>`, for any lifetime `'0`...\n    = note: ...but `StaticInt` actually implements `Foo<&'1 isize>`, for some specific lifetime `'1`\n \n error: implementation of `Foo` is not general enough\n   --> $DIR/hrtb-just-for-static.rs:30:5\n    |\n-LL | / trait Foo<X> {\n-LL | |     fn foo(&self, x: X) { }\n-LL | | }\n-   | |_- trait `Foo` defined here\n-...\n-LL |       want_hrtb::<&'a u32>()\n-   |       ^^^^^^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough\n+LL |     want_hrtb::<&'a u32>()\n+   |     ^^^^^^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough\n    |\n    = note: `Foo<&'0 isize>` would have to be implemented for the type `&'a u32`, for any lifetime `'0`...\n    = note: ...but `Foo<&'1 isize>` is actually implemented for the type `&'1 u32`, for some specific lifetime `'1`"}, {"sha": "f3d906cae4cc3c43c939b51befe8c4d9568045e0", "filename": "src/test/ui/hrtb/issue-46989.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c2066cf0694c304c0fc43f17bebefb518b066619/src%2Ftest%2Fui%2Fhrtb%2Fissue-46989.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2066cf0694c304c0fc43f17bebefb518b066619/src%2Ftest%2Fui%2Fhrtb%2Fissue-46989.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-46989.stderr?ref=c2066cf0694c304c0fc43f17bebefb518b066619", "patch": "@@ -1,9 +1,6 @@\n error: implementation of `Foo` is not general enough\n   --> $DIR/issue-46989.rs:38:5\n    |\n-LL | trait Foo {}\n-   | ------------ trait `Foo` defined here\n-...\n LL |     assert_foo::<fn(&i32)>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough\n    |"}, {"sha": "baa75f28d37f32c39cef43b2226a9a8b23f94837", "filename": "src/test/ui/issues/issue-54302-cases.stderr", "status": "modified", "additions": 8, "deletions": 28, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/c2066cf0694c304c0fc43f17bebefb518b066619/src%2Ftest%2Fui%2Fissues%2Fissue-54302-cases.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2066cf0694c304c0fc43f17bebefb518b066619/src%2Ftest%2Fui%2Fissues%2Fissue-54302-cases.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54302-cases.stderr?ref=c2066cf0694c304c0fc43f17bebefb518b066619", "patch": "@@ -1,55 +1,35 @@\n error: implementation of `Foo` is not general enough\n   --> $DIR/issue-54302-cases.rs:63:5\n    |\n-LL | / trait Foo<'x, T> {\n-LL | |     fn foo(self) -> &'x T;\n-LL | | }\n-   | |_- trait `Foo` defined here\n-...\n-LL |       <u32 as RefFoo<u32>>::ref_foo(a)\n-   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough\n+LL |     <u32 as RefFoo<u32>>::ref_foo(a)\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough\n    |\n    = note: `Foo<'static, u32>` would have to be implemented for the type `&'0 u32`, for any lifetime `'0`...\n    = note: ...but `Foo<'_, u32>` is actually implemented for the type `&'1 u32`, for some specific lifetime `'1`\n \n error: implementation of `Foo` is not general enough\n   --> $DIR/issue-54302-cases.rs:69:5\n    |\n-LL | / trait Foo<'x, T> {\n-LL | |     fn foo(self) -> &'x T;\n-LL | | }\n-   | |_- trait `Foo` defined here\n-...\n-LL |       <i32 as RefFoo<i32>>::ref_foo(a)\n-   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough\n+LL |     <i32 as RefFoo<i32>>::ref_foo(a)\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough\n    |\n    = note: `Foo<'static, i32>` would have to be implemented for the type `&'0 i32`, for any lifetime `'0`...\n    = note: ...but `Foo<'_, i32>` is actually implemented for the type `&'1 i32`, for some specific lifetime `'1`\n \n error: implementation of `Foo` is not general enough\n   --> $DIR/issue-54302-cases.rs:75:5\n    |\n-LL | / trait Foo<'x, T> {\n-LL | |     fn foo(self) -> &'x T;\n-LL | | }\n-   | |_- trait `Foo` defined here\n-...\n-LL |       <u64 as RefFoo<u64>>::ref_foo(a)\n-   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough\n+LL |     <u64 as RefFoo<u64>>::ref_foo(a)\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough\n    |\n    = note: `Foo<'static, u64>` would have to be implemented for the type `&'0 u64`, for any lifetime `'0`...\n    = note: ...but `Foo<'_, u64>` is actually implemented for the type `&'1 u64`, for some specific lifetime `'1`\n \n error: implementation of `Foo` is not general enough\n   --> $DIR/issue-54302-cases.rs:81:5\n    |\n-LL | / trait Foo<'x, T> {\n-LL | |     fn foo(self) -> &'x T;\n-LL | | }\n-   | |_- trait `Foo` defined here\n-...\n-LL |       <i64 as RefFoo<i64>>::ref_foo(a)\n-   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough\n+LL |     <i64 as RefFoo<i64>>::ref_foo(a)\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough\n    |\n    = note: `Foo<'static, i64>` would have to be implemented for the type `&'0 i64`, for any lifetime `'0`...\n    = note: ...but `Foo<'_, i64>` is actually implemented for the type `&'1 i64`, for some specific lifetime `'1`"}, {"sha": "26c46571f9cb232d8155abcfc30a47d74d98a216", "filename": "src/test/ui/issues/issue-54302.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c2066cf0694c304c0fc43f17bebefb518b066619/src%2Ftest%2Fui%2Fissues%2Fissue-54302.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2066cf0694c304c0fc43f17bebefb518b066619/src%2Ftest%2Fui%2Fissues%2Fissue-54302.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54302.stderr?ref=c2066cf0694c304c0fc43f17bebefb518b066619", "patch": "@@ -1,9 +1,6 @@\n error: implementation of `Deserialize` is not general enough\n   --> $DIR/issue-54302.rs:13:5\n    |\n-LL | trait Deserialize<'de> {}\n-   | ------------------------- trait `Deserialize` defined here\n-...\n LL |     assert_deserialize_owned::<&'static str>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ implementation of `Deserialize` is not general enough\n    |"}, {"sha": "de327cd3cc23cc87a79129f2d39cf7465ea87fb1", "filename": "src/test/ui/issues/issue-55731.stderr", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c2066cf0694c304c0fc43f17bebefb518b066619/src%2Ftest%2Fui%2Fissues%2Fissue-55731.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2066cf0694c304c0fc43f17bebefb518b066619/src%2Ftest%2Fui%2Fissues%2Fissue-55731.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-55731.stderr?ref=c2066cf0694c304c0fc43f17bebefb518b066619", "patch": "@@ -1,13 +1,8 @@\n error: implementation of `DistributedIteratorMulti` is not general enough\n   --> $DIR/issue-55731.rs:48:5\n    |\n-LL | / trait DistributedIteratorMulti<Source> {\n-LL | |     type Item;\n-LL | | }\n-   | |_- trait `DistributedIteratorMulti` defined here\n-...\n-LL |       multi(Map {\n-   |       ^^^^^ implementation of `DistributedIteratorMulti` is not general enough\n+LL |     multi(Map {\n+   |     ^^^^^ implementation of `DistributedIteratorMulti` is not general enough\n    |\n    = note: `DistributedIteratorMulti<&'0 ()>` would have to be implemented for the type `Cloned<&()>`, for any lifetime `'0`...\n    = note: ...but `DistributedIteratorMulti<&'1 ()>` is actually implemented for the type `Cloned<&'1 ()>`, for some specific lifetime `'1`"}, {"sha": "4f8b19291db4083194a379e12079d079e24af286", "filename": "src/test/ui/where-clauses/where-for-self-2.stderr", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c2066cf0694c304c0fc43f17bebefb518b066619/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2066cf0694c304c0fc43f17bebefb518b066619/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self-2.stderr?ref=c2066cf0694c304c0fc43f17bebefb518b066619", "patch": "@@ -1,13 +1,8 @@\n error: implementation of `Bar` is not general enough\n   --> $DIR/where-for-self-2.rs:23:5\n    |\n-LL | / trait Bar {\n-LL | |     fn bar(&self);\n-LL | | }\n-   | |_- trait `Bar` defined here\n-...\n-LL |       foo(&X);\n-   |       ^^^ implementation of `Bar` is not general enough\n+LL |     foo(&X);\n+   |     ^^^ implementation of `Bar` is not general enough\n    |\n    = note: `Bar` would have to be implemented for the type `&'0 u32`, for any lifetime `'0`...\n    = note: ...but `Bar` is actually implemented for the type `&'1 u32`, for some specific lifetime `'1`"}]}