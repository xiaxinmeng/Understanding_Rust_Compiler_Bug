{"sha": "c699b0530604105d0ceaa391453b89765ddfb75d", "node_id": "C_kwDOAAsO6NoAKGM2OTliMDUzMDYwNDEwNWQwY2VhYTM5MTQ1M2I4OTc2NWRkZmI3NWQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-12-06T15:54:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-12-06T15:54:55Z"}, "message": "Rollup merge of #105286 - willcrichton:maximal-hir-to-mir-coverage, r=cjgillot\n\nAdd -Z maximal-hir-to-mir-coverage flag\n\nThis PR adds a new unstable flag `-Z maximal-hir-to-mir-coverage` that changes the behavior of `maybe_lint_level_root_bounded`, pursuant to [a discussion on Zulip](https://rust-lang.zulipchat.com/#narrow/stream/131828-t-compiler/topic/Mapping.20MIR.20to.20HIR). When enabled, this function will not search upwards for a lint root, but rather immediately return the provided HIR node ID. This change increases the granularity of the mapping between MIR locations and HIR nodes inside the `SourceScopeLocalData` data structures. This increase in granularity is useful for rustc consumers like [Flowistry](https://github.com/willcrichton/flowistry) that rely on getting source-mapping information about the MIR CFG that is as precise as possible.\n\nA test `maximal_mir_to_hir_coverage.rs` has been added to verify that this flag does not break anything.\n\nr? `@cjgillot`\n\ncc `@gavinleroy`", "tree": {"sha": "4e776903974848b06ab2c92b093abb1ed1475dbb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e776903974848b06ab2c92b093abb1ed1475dbb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c699b0530604105d0ceaa391453b89765ddfb75d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjj2XPCRBK7hj4Ov3rIwAA0lsIAAMmPLVMsx9yCN6g5CkSmKUJ\ngxO7/2zYEw+0rts6WJBh+lFDouFrn/zADNDYXmLvJc7ivsgzps1Vl/5aN7s8rxy8\nIaVhTukNduIBNaVz8z2ix6kMnGCPI1d6gg7598wZJRUpiTAqjQ9ZAUtviB5aA3cr\nOEPa/2cFpXG0aV0NCt9CJWvPIiwk+I0h1urqmU9ZH0Z6zrwcMc3PzRTIRLnc94YK\nNpeDE+MXNBnmbkfrXJDinnF1bEqUV2RuEb6L/ud/AxVT1Gk2acVh+nECIrDtqrCV\n+mCXbIdTeVw+NuNfFuCgOYvbOs83Pzoa6wiIIPoLSXgbLCBysQVfy+tis1xusbU=\n=gH4/\n-----END PGP SIGNATURE-----\n", "payload": "tree 4e776903974848b06ab2c92b093abb1ed1475dbb\nparent 967085ecdf589ec92f528c71cfb9ace723cbabb1\nparent d595884302240f07576239288c771b0e9717fc19\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1670342095 +0100\ncommitter GitHub <noreply@github.com> 1670342095 +0100\n\nRollup merge of #105286 - willcrichton:maximal-hir-to-mir-coverage, r=cjgillot\n\nAdd -Z maximal-hir-to-mir-coverage flag\n\nThis PR adds a new unstable flag `-Z maximal-hir-to-mir-coverage` that changes the behavior of `maybe_lint_level_root_bounded`, pursuant to [a discussion on Zulip](https://rust-lang.zulipchat.com/#narrow/stream/131828-t-compiler/topic/Mapping.20MIR.20to.20HIR). When enabled, this function will not search upwards for a lint root, but rather immediately return the provided HIR node ID. This change increases the granularity of the mapping between MIR locations and HIR nodes inside the `SourceScopeLocalData` data structures. This increase in granularity is useful for rustc consumers like [Flowistry](https://github.com/willcrichton/flowistry) that rely on getting source-mapping information about the MIR CFG that is as precise as possible.\n\nA test `maximal_mir_to_hir_coverage.rs` has been added to verify that this flag does not break anything.\n\nr? `@cjgillot`\n\ncc `@gavinleroy`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c699b0530604105d0ceaa391453b89765ddfb75d", "html_url": "https://github.com/rust-lang/rust/commit/c699b0530604105d0ceaa391453b89765ddfb75d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c699b0530604105d0ceaa391453b89765ddfb75d/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "967085ecdf589ec92f528c71cfb9ace723cbabb1", "url": "https://api.github.com/repos/rust-lang/rust/commits/967085ecdf589ec92f528c71cfb9ace723cbabb1", "html_url": "https://github.com/rust-lang/rust/commit/967085ecdf589ec92f528c71cfb9ace723cbabb1"}, {"sha": "d595884302240f07576239288c771b0e9717fc19", "url": "https://api.github.com/repos/rust-lang/rust/commits/d595884302240f07576239288c771b0e9717fc19", "html_url": "https://github.com/rust-lang/rust/commit/d595884302240f07576239288c771b0e9717fc19"}], "stats": {"total": 91, "additions": 59, "deletions": 32}, "files": [{"sha": "2b8f6557c829b32042879be2c525ed09e4fbef8f", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c699b0530604105d0ceaa391453b89765ddfb75d/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c699b0530604105d0ceaa391453b89765ddfb75d/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=c699b0530604105d0ceaa391453b89765ddfb75d", "patch": "@@ -747,6 +747,7 @@ fn test_unstable_options_tracking_hash() {\n     tracked!(link_only, true);\n     tracked!(llvm_plugins, vec![String::from(\"plugin_name\")]);\n     tracked!(location_detail, LocationDetail { file: true, line: false, column: false });\n+    tracked!(maximal_hir_to_mir_coverage, true);\n     tracked!(merge_functions, Some(MergeFunctions::Disabled));\n     tracked!(mir_emit_retag, true);\n     tracked!(mir_enable_passes, vec![(\"DestProp\".to_string(), false)]);"}, {"sha": "007f3b55ec8bb156b6c53c338fdfbbfacd3641f8", "filename": "compiler/rustc_mir_build/src/build/mod.rs", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c699b0530604105d0ceaa391453b89765ddfb75d/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c699b0530604105d0ceaa391453b89765ddfb75d/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs?ref=c699b0530604105d0ceaa391453b89765ddfb75d", "patch": "@@ -948,20 +948,12 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         original_source_scope: SourceScope,\n         pattern_span: Span,\n     ) {\n-        let tcx = self.tcx;\n-        let current_root = tcx.maybe_lint_level_root_bounded(arg_hir_id, self.hir_id);\n-        let parent_root = tcx.maybe_lint_level_root_bounded(\n-            self.source_scopes[original_source_scope]\n-                .local_data\n-                .as_ref()\n-                .assert_crate_local()\n-                .lint_root,\n-            self.hir_id,\n-        );\n-        if current_root != parent_root {\n-            self.source_scope =\n-                self.new_source_scope(pattern_span, LintLevel::Explicit(current_root), None);\n-        }\n+        let parent_id = self.source_scopes[original_source_scope]\n+            .local_data\n+            .as_ref()\n+            .assert_crate_local()\n+            .lint_root;\n+        self.maybe_new_source_scope(pattern_span, None, arg_hir_id, parent_id);\n     }\n \n     fn get_unit_temp(&mut self) -> Place<'tcx> {"}, {"sha": "33f49ffdaf6403fd4ae06a43b763e86789ab567b", "filename": "compiler/rustc_mir_build/src/build/scope.rs", "status": "modified", "additions": 38, "deletions": 18, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/c699b0530604105d0ceaa391453b89765ddfb75d/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c699b0530604105d0ceaa391453b89765ddfb75d/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs?ref=c699b0530604105d0ceaa391453b89765ddfb75d", "patch": "@@ -85,6 +85,7 @@ use std::mem;\n \n use crate::build::{BlockAnd, BlockAndExtension, BlockFrame, Builder, CFG};\n use rustc_data_structures::fx::FxHashMap;\n+use rustc_hir::HirId;\n use rustc_index::vec::IndexVec;\n use rustc_middle::middle::region;\n use rustc_middle::mir::*;\n@@ -567,25 +568,10 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         F: FnOnce(&mut Builder<'a, 'tcx>) -> BlockAnd<R>,\n     {\n         let source_scope = self.source_scope;\n-        let tcx = self.tcx;\n         if let LintLevel::Explicit(current_hir_id) = lint_level {\n-            // Use `maybe_lint_level_root_bounded` with `root_lint_level` as a bound\n-            // to avoid adding Hir dependencies on our parents.\n-            // We estimate the true lint roots here to avoid creating a lot of source scopes.\n-\n-            let parent_root = tcx.maybe_lint_level_root_bounded(\n-                self.source_scopes[source_scope].local_data.as_ref().assert_crate_local().lint_root,\n-                self.hir_id,\n-            );\n-            let current_root = tcx.maybe_lint_level_root_bounded(current_hir_id, self.hir_id);\n-\n-            if parent_root != current_root {\n-                self.source_scope = self.new_source_scope(\n-                    region_scope.1.span,\n-                    LintLevel::Explicit(current_root),\n-                    None,\n-                );\n-            }\n+            let parent_id =\n+                self.source_scopes[source_scope].local_data.as_ref().assert_crate_local().lint_root;\n+            self.maybe_new_source_scope(region_scope.1.span, None, current_hir_id, parent_id);\n         }\n         self.push_scope(region_scope);\n         let mut block;\n@@ -758,6 +744,40 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         ))\n     }\n \n+    /// Possibly creates a new source scope if `current_root` and `parent_root`\n+    /// are different, or if -Zmaximal-hir-to-mir-coverage is enabled.\n+    pub(crate) fn maybe_new_source_scope(\n+        &mut self,\n+        span: Span,\n+        safety: Option<Safety>,\n+        current_id: HirId,\n+        parent_id: HirId,\n+    ) {\n+        let (current_root, parent_root) =\n+            if self.tcx.sess.opts.unstable_opts.maximal_hir_to_mir_coverage {\n+                // Some consumers of rustc need to map MIR locations back to HIR nodes. Currently the\n+                // the only part of rustc that tracks MIR -> HIR is the `SourceScopeLocalData::lint_root`\n+                // field that tracks lint levels for MIR locations.  Normally the number of source scopes\n+                // is limited to the set of nodes with lint annotations. The -Zmaximal-hir-to-mir-coverage\n+                // flag changes this behavior to maximize the number of source scopes, increasing the\n+                // granularity of the MIR->HIR mapping.\n+                (current_id, parent_id)\n+            } else {\n+                // Use `maybe_lint_level_root_bounded` with `self.hir_id` as a bound\n+                // to avoid adding Hir dependencies on our parents.\n+                // We estimate the true lint roots here to avoid creating a lot of source scopes.\n+                (\n+                    self.tcx.maybe_lint_level_root_bounded(current_id, self.hir_id),\n+                    self.tcx.maybe_lint_level_root_bounded(parent_id, self.hir_id),\n+                )\n+            };\n+\n+        if current_root != parent_root {\n+            let lint_level = LintLevel::Explicit(current_root);\n+            self.source_scope = self.new_source_scope(span, lint_level, safety);\n+        }\n+    }\n+\n     /// Creates a new source scope, nested in the current one.\n     pub(crate) fn new_source_scope(\n         &mut self,"}, {"sha": "8e9198b79dff7cb39284333ad0f1fe6f53e27d78", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c699b0530604105d0ceaa391453b89765ddfb75d/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c699b0530604105d0ceaa391453b89765ddfb75d/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=c699b0530604105d0ceaa391453b89765ddfb75d", "patch": "@@ -1382,6 +1382,9 @@ options! {\n         \"list the symbols defined by a library crate (default: no)\"),\n     macro_backtrace: bool = (false, parse_bool, [UNTRACKED],\n         \"show macro backtraces (default: no)\"),\n+    maximal_hir_to_mir_coverage: bool = (false, parse_bool, [TRACKED],\n+        \"save as much information as possible about the correspondence between MIR and HIR \\\n+        as source scopes (default: no)\"),\n     merge_functions: Option<MergeFunctions> = (None, parse_merge_functions, [TRACKED],\n         \"control the operation of the MergeFunctions LLVM pass, taking \\\n         the same values as the target option of the same name\"),"}, {"sha": "94cf7b94241df8d79144969b852f538de8ccfa88", "filename": "src/test/rustdoc-ui/z-help.stdout", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c699b0530604105d0ceaa391453b89765ddfb75d/src%2Ftest%2Frustdoc-ui%2Fz-help.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/c699b0530604105d0ceaa391453b89765ddfb75d/src%2Ftest%2Frustdoc-ui%2Fz-help.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fz-help.stdout?ref=c699b0530604105d0ceaa391453b89765ddfb75d", "patch": "@@ -77,6 +77,7 @@\n     -Z                         location-detail=val -- what location details should be tracked when using caller_location, either `none`, or a comma separated list of location details, for which valid options are `file`, `line`, and `column` (default: `file,line,column`)\n     -Z                                      ls=val -- list the symbols defined by a library crate (default: no)\n     -Z                         macro-backtrace=val -- show macro backtraces (default: no)\n+    -Z             maximal-hir-to-mir-coverage=val -- save as much information as possible about the correspondence between MIR and HIR as source scopes (default: no)\n     -Z                         merge-functions=val -- control the operation of the MergeFunctions LLVM pass, taking the same values as the target option of the same name\n     -Z                              meta-stats=val -- gather metadata statistics (default: no)\n     -Z                          mir-emit-retag=val -- emit Retagging MIR statements, interpreted e.g., by miri; implies -Zmir-opt-level=0 (default: no)"}, {"sha": "5ca54633f219a14650af9be6d11208443dc25bc2", "filename": "src/test/ui/maximal_mir_to_hir_coverage.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c699b0530604105d0ceaa391453b89765ddfb75d/src%2Ftest%2Fui%2Fmaximal_mir_to_hir_coverage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c699b0530604105d0ceaa391453b89765ddfb75d/src%2Ftest%2Fui%2Fmaximal_mir_to_hir_coverage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmaximal_mir_to_hir_coverage.rs?ref=c699b0530604105d0ceaa391453b89765ddfb75d", "patch": "@@ -0,0 +1,10 @@\n+// compile-flags: -Zmaximal-hir-to-mir-coverage\n+// run-pass\n+\n+// Just making sure this flag is accepted and doesn't crash the compiler\n+\n+fn main() {\n+  let x = 1;\n+  let y = x + 1;\n+  println!(\"{y}\");\n+}"}]}