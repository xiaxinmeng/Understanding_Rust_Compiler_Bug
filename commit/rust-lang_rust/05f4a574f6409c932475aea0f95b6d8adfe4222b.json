{"sha": "05f4a574f6409c932475aea0f95b6d8adfe4222b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1ZjRhNTc0ZjY0MDljOTMyNDc1YWVhMGY5NWI2ZDhhZGZlNDIyMmI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-06-30T21:49:37Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-06-30T22:16:26Z"}, "message": "forward read_c_str method from Memory to Alloc", "tree": {"sha": "bee4a59df26ddd3b41c7808b7496f2e20d6ce98f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bee4a59df26ddd3b41c7808b7496f2e20d6ce98f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05f4a574f6409c932475aea0f95b6d8adfe4222b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05f4a574f6409c932475aea0f95b6d8adfe4222b", "html_url": "https://github.com/rust-lang/rust/commit/05f4a574f6409c932475aea0f95b6d8adfe4222b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05f4a574f6409c932475aea0f95b6d8adfe4222b/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0af8e872ea5ac77effa59f8d3f8794f12cb8865c", "url": "https://api.github.com/repos/rust-lang/rust/commits/0af8e872ea5ac77effa59f8d3f8794f12cb8865c", "html_url": "https://github.com/rust-lang/rust/commit/0af8e872ea5ac77effa59f8d3f8794f12cb8865c"}], "stats": {"total": 10, "additions": 10, "deletions": 0}, "files": [{"sha": "f76107078807e300c0b4f136ad2bf73bc7b0780c", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/05f4a574f6409c932475aea0f95b6d8adfe4222b/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05f4a574f6409c932475aea0f95b6d8adfe4222b/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=05f4a574f6409c932475aea0f95b6d8adfe4222b", "patch": "@@ -677,6 +677,8 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n \n /// Reading and writing.\n impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n+    /// Reads the given number of bytes from memory. Returns them as a slice.\n+    ///\n     /// Performs appropriate bounds checks.\n     pub fn read_bytes(\n         &self,\n@@ -690,6 +692,14 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n         self.get(ptr.alloc_id)?.get_bytes(self, ptr, size)\n     }\n \n+    /// Reads a 0-terminated sequence of bytes from memory. Returns them as a slice.\n+    ///\n+    /// Performs appropriate bounds checks.\n+    pub fn read_c_str(&self, ptr: Scalar<M::PointerTag>) -> InterpResult<'tcx, &[u8]> {\n+        let ptr = self.force_ptr(ptr)?; // We need to read at least 1 byte, so we *need* a ptr.\n+        self.get(ptr.alloc_id)?.read_c_str(self, ptr)\n+    }\n+\n     /// Performs appropriate bounds checks.\n     pub fn copy(\n         &mut self,"}]}