{"sha": "b5361d0d41871874926bd489b8dc014a016c3f52", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1MzYxZDBkNDE4NzE4NzQ5MjZiZDQ4OWI4ZGMwMTRhMDE2YzNmNTI=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-12-21T15:03:16Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-12-24T00:04:15Z"}, "message": "rustc: Set release mode cgus to 16 by default\n\nThis commit is the next attempt to enable multiple codegen units by default in\nrelease mode, getting some of those sweet, sweet parallelism wins by running\ncodegen in parallel. Performance should not be lost due to ThinLTO being on by\ndefault as well.\n\nCloses #45320", "tree": {"sha": "a770c90135b8d67b3ab73e657c7288f434cf1d33", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a770c90135b8d67b3ab73e657c7288f434cf1d33"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b5361d0d41871874926bd489b8dc014a016c3f52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b5361d0d41871874926bd489b8dc014a016c3f52", "html_url": "https://github.com/rust-lang/rust/commit/b5361d0d41871874926bd489b8dc014a016c3f52", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b5361d0d41871874926bd489b8dc014a016c3f52/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de38f49528b537414385d42a66dda711c8c8a309", "url": "https://api.github.com/repos/rust-lang/rust/commits/de38f49528b537414385d42a66dda711c8c8a309", "html_url": "https://github.com/rust-lang/rust/commit/de38f49528b537414385d42a66dda711c8c8a309"}], "stats": {"total": 36, "additions": 32, "deletions": 4}, "files": [{"sha": "748a734d1d7accdf0ec14146ec8122ea8fc0879c", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b5361d0d41871874926bd489b8dc014a016c3f52/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5361d0d41871874926bd489b8dc014a016c3f52/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=b5361d0d41871874926bd489b8dc014a016c3f52", "patch": "@@ -785,10 +785,7 @@ impl Session {\n         // As a result 16 was chosen here! Mostly because it was a power of 2\n         // and most benchmarks agreed it was roughly a local optimum. Not very\n         // scientific.\n-        match self.opts.optimize {\n-            config::OptLevel::No => 16,\n-            _ => 1, // FIXME(#46346) this should be 16\n-        }\n+        16\n     }\n \n     /// Returns whether ThinLTO is enabled for this compilation"}, {"sha": "7d653494465169a2bb5631815830278523d78b0d", "filename": "src/librustc_llvm/ffi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b5361d0d41871874926bd489b8dc014a016c3f52/src%2Flibrustc_llvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5361d0d41871874926bd489b8dc014a016c3f52/src%2Flibrustc_llvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fffi.rs?ref=b5361d0d41871874926bd489b8dc014a016c3f52", "patch": "@@ -1732,4 +1732,5 @@ extern \"C\" {\n                                            CU1: *mut *mut c_void,\n                                            CU2: *mut *mut c_void);\n     pub fn LLVMRustThinLTOPatchDICompileUnit(M: ModuleRef, CU: *mut c_void);\n+    pub fn LLVMRustThinLTORemoveAvailableExternally(M: ModuleRef);\n }"}, {"sha": "298716840926a49bb2dcc90032cb572686ebed0d", "filename": "src/librustc_trans/back/lto.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b5361d0d41871874926bd489b8dc014a016c3f52/src%2Flibrustc_trans%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5361d0d41871874926bd489b8dc014a016c3f52/src%2Flibrustc_trans%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flto.rs?ref=b5361d0d41871874926bd489b8dc014a016c3f52", "patch": "@@ -726,6 +726,21 @@ impl ThinModule {\n         run_pass_manager(cgcx, tm, llmod, config, true);\n         cgcx.save_temp_bitcode(&mtrans, \"thin-lto-after-pm\");\n         timeline.record(\"thin-done\");\n+\n+        // FIXME: this is a hack around a bug in LLVM right now. Discovered in\n+        // #46910 it was found out that on 32-bit MSVC LLVM will hit a codegen\n+        // error if there's an available_externally function in the LLVM module.\n+        // Typically we don't actually use these functions but ThinLTO makes\n+        // heavy use of them when inlining across modules.\n+        //\n+        // Tracked upstream at https://bugs.llvm.org/show_bug.cgi?id=35736 this\n+        // function call (and its definition on the C++ side of things)\n+        // shouldn't be necessary eventually and we can safetly delete these few\n+        // lines.\n+        llvm::LLVMRustThinLTORemoveAvailableExternally(llmod);\n+        cgcx.save_temp_bitcode(&mtrans, \"thin-lto-after-rm-ae\");\n+        timeline.record(\"no-ae\");\n+\n         Ok(mtrans)\n     }\n }"}, {"sha": "4e326c9e199b1a05cfdaedffd002b4bffc6ca3a9", "filename": "src/rustllvm/PassWrapper.cpp", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b5361d0d41871874926bd489b8dc014a016c3f52/src%2Frustllvm%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/b5361d0d41871874926bd489b8dc014a016c3f52/src%2Frustllvm%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FPassWrapper.cpp?ref=b5361d0d41871874926bd489b8dc014a016c3f52", "patch": "@@ -1182,6 +1182,15 @@ LLVMRustThinLTOPatchDICompileUnit(LLVMModuleRef Mod, DICompileUnit *Unit) {\n   MD->addOperand(Unit);\n }\n \n+extern \"C\" void\n+LLVMRustThinLTORemoveAvailableExternally(LLVMModuleRef Mod) {\n+  Module *M = unwrap(Mod);\n+  for (Function &F : M->functions()) {\n+    if (F.hasAvailableExternallyLinkage())\n+      F.deleteBody();\n+  }\n+}\n+\n #else\n \n extern \"C\" bool\n@@ -1272,4 +1281,10 @@ extern \"C\" void\n LLVMRustThinLTOPatchDICompileUnit(LLVMModuleRef Mod) {\n   report_fatal_error(\"ThinLTO not available\");\n }\n+\n+extern \"C\" void\n+LLVMRustThinLTORemoveAvailableExternally(LLVMModuleRef Mod) {\n+  report_fatal_error(\"ThinLTO not available\");\n+}\n+\n #endif // LLVM_VERSION_GE(4, 0)"}]}