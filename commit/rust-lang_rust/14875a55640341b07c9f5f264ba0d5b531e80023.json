{"sha": "14875a55640341b07c9f5f264ba0d5b531e80023", "node_id": "C_kwDOAAsO6NoAKDE0ODc1YTU1NjQwMzQxYjA3YzlmNWYyNjRiYTBkNWI1MzFlODAwMjM", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-03-18T03:16:45Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-03-18T03:21:13Z"}, "message": "Reorder cases in `parse_tt_inner`.\n\nI find the new order easier to read: within a matcher; past the end of a\nrepetition; at end of input. It also reduces the indentation level by\none for", "tree": {"sha": "528865d823032e7cea7f76600ba793be7f87d9e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/528865d823032e7cea7f76600ba793be7f87d9e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14875a55640341b07c9f5f264ba0d5b531e80023", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14875a55640341b07c9f5f264ba0d5b531e80023", "html_url": "https://github.com/rust-lang/rust/commit/14875a55640341b07c9f5f264ba0d5b531e80023", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14875a55640341b07c9f5f264ba0d5b531e80023/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83044714a107dc80d0a85f300a4f7223c1a447bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/83044714a107dc80d0a85f300a4f7223c1a447bf", "html_url": "https://github.com/rust-lang/rust/commit/83044714a107dc80d0a85f300a4f7223c1a447bf"}], "stats": {"total": 116, "additions": 55, "deletions": 61}, "files": [{"sha": "f67cba00fa1a187cbf511e20fd385b770ad73ef0", "filename": "compiler/rustc_expand/src/mbe/macro_parser.rs", "status": "modified", "additions": 55, "deletions": 61, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/14875a55640341b07c9f5f264ba0d5b531e80023/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14875a55640341b07c9f5f264ba0d5b531e80023/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs?ref=14875a55640341b07c9f5f264ba0d5b531e80023", "patch": "@@ -540,67 +540,7 @@ fn parse_tt_inner<'root, 'tt>(\n         let idx = item.idx;\n         let len = item.top_elts.len();\n \n-        // If `idx >= len`, then we are at or past the end of the matcher of `item`.\n-        if idx >= len {\n-            // We are repeating iff there is a parent. If the matcher is inside of a repetition,\n-            // then we could be at the end of a sequence or at the beginning of the next\n-            // repetition.\n-            if let Some(repetition) = &item.repetition {\n-                debug_assert!(idx <= len + 1);\n-                debug_assert!(matches!(item.top_elts, Tt(TokenTree::Sequence(..))));\n-\n-                // At this point, regardless of whether there is a separator, we should add all\n-                // matches from the complete repetition of the sequence to the shared, top-level\n-                // `matches` list (actually, `up.matches`, which could itself not be the top-level,\n-                // but anyway...). Moreover, we add another item to `cur_items` in which the \"dot\"\n-                // is at the end of the `up` matcher. This ensures that the \"dot\" in the `up`\n-                // matcher is also advanced sufficiently.\n-                //\n-                // NOTE: removing the condition `idx == len` allows trailing separators.\n-                if idx == len {\n-                    // Get the `up` matcher\n-                    let mut new_pos = repetition.up.clone();\n-\n-                    // Add matches from this repetition to the `matches` of `up`\n-                    for idx in item.match_lo..item.match_hi {\n-                        let sub = item.matches[idx].clone();\n-                        new_pos.push_match(idx, MatchedSeq(sub));\n-                    }\n-\n-                    // Move the \"dot\" past the repetition in `up`\n-                    new_pos.match_cur = item.match_hi;\n-                    new_pos.idx += 1;\n-                    cur_items.push(new_pos);\n-                }\n-\n-                // Check if we need a separator.\n-                if idx == len && repetition.sep.is_some() {\n-                    // We have a separator, and it is the current token. We can advance past the\n-                    // separator token.\n-                    if repetition.sep.as_ref().map_or(false, |sep| token_name_eq(token, sep)) {\n-                        item.idx += 1;\n-                        next_items.push(item);\n-                    }\n-                } else if repetition.seq_op != mbe::KleeneOp::ZeroOrOne {\n-                    // We don't need a separator. Move the \"dot\" back to the beginning of the\n-                    // matcher and try to match again UNLESS we are only allowed to have _one_\n-                    // repetition.\n-                    item.match_cur = item.match_lo;\n-                    item.idx = 0;\n-                    cur_items.push(item);\n-                }\n-            } else {\n-                // If we are not in a repetition, then being at the end of a matcher means that we\n-                // have reached the potential end of the input.\n-                debug_assert_eq!(idx, len);\n-                if *token == token::Eof {\n-                    eof_items = match eof_items {\n-                        EofItems::None => EofItems::One(item),\n-                        EofItems::One(_) | EofItems::Multiple => EofItems::Multiple,\n-                    }\n-                }\n-            }\n-        } else {\n+        if idx < len {\n             // We are in the middle of a matcher. Look at what token in the matcher we are trying\n             // to match the current token (`token`) against. Depending on that, we may generate new\n             // items.\n@@ -677,6 +617,60 @@ fn parse_tt_inner<'root, 'tt>(\n \n                 TokenTree::MetaVar(..) | TokenTree::MetaVarExpr(..) => unreachable!(),\n             }\n+        } else if let Some(repetition) = &item.repetition {\n+            // We are past the end of a repetition.\n+            debug_assert!(idx <= len + 1);\n+            debug_assert!(matches!(item.top_elts, Tt(TokenTree::Sequence(..))));\n+\n+            // At this point, regardless of whether there is a separator, we should add all\n+            // matches from the complete repetition of the sequence to the shared, top-level\n+            // `matches` list (actually, `up.matches`, which could itself not be the top-level,\n+            // but anyway...). Moreover, we add another item to `cur_items` in which the \"dot\"\n+            // is at the end of the `up` matcher. This ensures that the \"dot\" in the `up`\n+            // matcher is also advanced sufficiently.\n+            //\n+            // NOTE: removing the condition `idx == len` allows trailing separators.\n+            if idx == len {\n+                // Get the `up` matcher\n+                let mut new_pos = repetition.up.clone();\n+\n+                // Add matches from this repetition to the `matches` of `up`\n+                for idx in item.match_lo..item.match_hi {\n+                    let sub = item.matches[idx].clone();\n+                    new_pos.push_match(idx, MatchedSeq(sub));\n+                }\n+\n+                // Move the \"dot\" past the repetition in `up`\n+                new_pos.match_cur = item.match_hi;\n+                new_pos.idx += 1;\n+                cur_items.push(new_pos);\n+            }\n+\n+            // Check if we need a separator.\n+            if idx == len && repetition.sep.is_some() {\n+                // We have a separator, and it is the current token. We can advance past the\n+                // separator token.\n+                if repetition.sep.as_ref().map_or(false, |sep| token_name_eq(token, sep)) {\n+                    item.idx += 1;\n+                    next_items.push(item);\n+                }\n+            } else if repetition.seq_op != mbe::KleeneOp::ZeroOrOne {\n+                // We don't need a separator. Move the \"dot\" back to the beginning of the\n+                // matcher and try to match again UNLESS we are only allowed to have _one_\n+                // repetition.\n+                item.match_cur = item.match_lo;\n+                item.idx = 0;\n+                cur_items.push(item);\n+            }\n+        } else {\n+            // We are past the end of the matcher, and not in a repetition. Look for end of input.\n+            debug_assert_eq!(idx, len);\n+            if *token == token::Eof {\n+                eof_items = match eof_items {\n+                    EofItems::None => EofItems::One(item),\n+                    EofItems::One(_) | EofItems::Multiple => EofItems::Multiple,\n+                }\n+            }\n         }\n     }\n "}]}