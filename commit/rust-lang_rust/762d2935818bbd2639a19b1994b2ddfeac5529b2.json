{"sha": "762d2935818bbd2639a19b1994b2ddfeac5529b2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2MmQyOTM1ODE4YmJkMjYzOWExOWIxOTk0YjJkZGZlYWM1NTI5YjI=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-01-28T15:19:41Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-01-28T15:19:41Z"}, "message": "Apply the proposed refactoring", "tree": {"sha": "49f4f5f3589a5a60d73e0ea662b5edac6c6700d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/49f4f5f3589a5a60d73e0ea662b5edac6c6700d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/762d2935818bbd2639a19b1994b2ddfeac5529b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/762d2935818bbd2639a19b1994b2ddfeac5529b2", "html_url": "https://github.com/rust-lang/rust/commit/762d2935818bbd2639a19b1994b2ddfeac5529b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/762d2935818bbd2639a19b1994b2ddfeac5529b2/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a2e449424227c7f6cebe0581513287023297999", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a2e449424227c7f6cebe0581513287023297999", "html_url": "https://github.com/rust-lang/rust/commit/7a2e449424227c7f6cebe0581513287023297999"}], "stats": {"total": 81, "additions": 43, "deletions": 38}, "files": [{"sha": "ebfd6e21171a91d99bc2d3118c489ad3e6449b6a", "filename": "crates/ra_hir_def/src/find_path.rs", "status": "modified", "additions": 43, "deletions": 38, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/762d2935818bbd2639a19b1994b2ddfeac5529b2/crates%2Fra_hir_def%2Fsrc%2Ffind_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/762d2935818bbd2639a19b1994b2ddfeac5529b2/crates%2Fra_hir_def%2Fsrc%2Ffind_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Ffind_path.rs?ref=762d2935818bbd2639a19b1994b2ddfeac5529b2", "patch": "@@ -11,6 +11,34 @@ use hir_expand::name::{known, Name};\n \n const MAX_PATH_LEN: usize = 15;\n \n+impl ModPath {\n+    fn starts_with_std(&self) -> bool {\n+        self.segments.first().filter(|&first_segment| first_segment == &known::std).is_some()\n+    }\n+\n+    // When std library is present, paths starting with `std::`\n+    // should be preferred over paths starting with `core::` and `alloc::`\n+    fn should_start_with_std(&self) -> bool {\n+        self.segments\n+            .first()\n+            .filter(|&first_segment| {\n+                first_segment == &known::alloc || first_segment == &known::core\n+            })\n+            .is_some()\n+    }\n+\n+    fn len(&self) -> usize {\n+        self.segments.len()\n+            + match self.kind {\n+                PathKind::Plain => 0,\n+                PathKind::Super(i) => i as usize,\n+                PathKind::Crate => 1,\n+                PathKind::Abs => 0,\n+                PathKind::DollarCrate(_) => 1,\n+            }\n+    }\n+}\n+\n // FIXME: handle local items\n \n /// Find a path that can be used to refer to a certain item. This can depend on\n@@ -102,7 +130,7 @@ fn find_path_inner(\n     let mut best_path = None;\n     let mut best_path_len = max_len;\n     for (module_id, name) in importable_locations {\n-        let mut new_path = match find_path_inner(\n+        let mut path = match find_path_inner(\n             db,\n             ItemInNs::Types(ModuleDefId::ModuleId(module_id)),\n             from,\n@@ -111,51 +139,28 @@ fn find_path_inner(\n             None => continue,\n             Some(path) => path,\n         };\n-        new_path.segments.push(name);\n+        path.segments.push(name);\n \n-        if prefer_new_path(best_path_len, best_path.as_ref(), &new_path) {\n-            best_path_len = path_len(&new_path);\n-            best_path = Some(new_path);\n-        }\n+        let new_path =\n+            if let Some(best_path) = best_path { select_best_path(best_path, path) } else { path };\n+        best_path_len = new_path.len();\n+        best_path = Some(new_path);\n     }\n     best_path\n }\n \n-fn prefer_new_path(old_path_len: usize, old_path: Option<&ModPath>, new_path: &ModPath) -> bool {\n-    match (old_path.and_then(|mod_path| mod_path.segments.first()), new_path.segments.first()) {\n-        (Some(old_path_start), Some(new_path_start))\n-            if old_path_start == &known::std && use_std_instead(new_path_start) =>\n-        {\n-            false\n-        }\n-        (Some(old_path_start), Some(new_path_start))\n-            if new_path_start == &known::std && use_std_instead(old_path_start) =>\n-        {\n-            true\n-        }\n-        (None, Some(_)) => true,\n-        (Some(_), None) => false,\n-        _ => path_len(new_path) < old_path_len,\n+fn select_best_path(old_path: ModPath, new_path: ModPath) -> ModPath {\n+    if old_path.starts_with_std() && new_path.should_start_with_std() {\n+        old_path\n+    } else if new_path.starts_with_std() && old_path.should_start_with_std() {\n+        new_path\n+    } else if new_path.len() < old_path.len() {\n+        new_path\n+    } else {\n+        old_path\n     }\n }\n \n-// When std library is present, paths starting with `std::`\n-// should be preferred over paths starting with `core::` and `alloc::`\n-fn use_std_instead(name: &Name) -> bool {\n-    name == &known::core || name == &known::alloc\n-}\n-\n-fn path_len(path: &ModPath) -> usize {\n-    path.segments.len()\n-        + match path.kind {\n-            PathKind::Plain => 0,\n-            PathKind::Super(i) => i as usize,\n-            PathKind::Crate => 1,\n-            PathKind::Abs => 0,\n-            PathKind::DollarCrate(_) => 1,\n-        }\n-}\n-\n fn find_importable_locations(\n     db: &impl DefDatabase,\n     item: ItemInNs,"}]}