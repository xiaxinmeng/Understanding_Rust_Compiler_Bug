{"sha": "4ac89cd27613ffe574a6fc6009793c1900e5cfca", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhYzg5Y2QyNzYxM2ZmZTU3NGE2ZmM2MDA5NzkzYzE5MDBlNWNmY2E=", "commit": {"author": {"name": "Douglas Young", "email": "rcxdude@gmail.com", "date": "2014-04-17T15:52:25Z"}, "committer": {"name": "Douglas Young", "email": "rcxdude@gmail.com", "date": "2014-04-23T19:33:54Z"}, "message": "Enable use of syntax extensions when cross compiling.\n\nThis adds the target triple to the crate metadata.\nWhen searching for a crate the phase (link, syntax) is taken into account.\nDuring link phase only crates matching the target triple are considered.\nDuring syntax phase, either the target or host triple will be accepted, unless\nthe crate defines a macro_registrar, in which case only the host triple will\nmatch.", "tree": {"sha": "6074687f891d2b332e0e6bc988fffc577f25cfaf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6074687f891d2b332e0e6bc988fffc577f25cfaf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ac89cd27613ffe574a6fc6009793c1900e5cfca", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ac89cd27613ffe574a6fc6009793c1900e5cfca", "html_url": "https://github.com/rust-lang/rust/commit/4ac89cd27613ffe574a6fc6009793c1900e5cfca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ac89cd27613ffe574a6fc6009793c1900e5cfca/comments", "author": {"login": "rcxdude", "id": 316786, "node_id": "MDQ6VXNlcjMxNjc4Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/316786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rcxdude", "html_url": "https://github.com/rcxdude", "followers_url": "https://api.github.com/users/rcxdude/followers", "following_url": "https://api.github.com/users/rcxdude/following{/other_user}", "gists_url": "https://api.github.com/users/rcxdude/gists{/gist_id}", "starred_url": "https://api.github.com/users/rcxdude/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rcxdude/subscriptions", "organizations_url": "https://api.github.com/users/rcxdude/orgs", "repos_url": "https://api.github.com/users/rcxdude/repos", "events_url": "https://api.github.com/users/rcxdude/events{/privacy}", "received_events_url": "https://api.github.com/users/rcxdude/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rcxdude", "id": 316786, "node_id": "MDQ6VXNlcjMxNjc4Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/316786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rcxdude", "html_url": "https://github.com/rcxdude", "followers_url": "https://api.github.com/users/rcxdude/followers", "following_url": "https://api.github.com/users/rcxdude/following{/other_user}", "gists_url": "https://api.github.com/users/rcxdude/gists{/gist_id}", "starred_url": "https://api.github.com/users/rcxdude/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rcxdude/subscriptions", "organizations_url": "https://api.github.com/users/rcxdude/orgs", "repos_url": "https://api.github.com/users/rcxdude/repos", "events_url": "https://api.github.com/users/rcxdude/events{/privacy}", "received_events_url": "https://api.github.com/users/rcxdude/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09bfb92fdc3ccff42dfcf91b0af368f88dc3e446", "url": "https://api.github.com/repos/rust-lang/rust/commits/09bfb92fdc3ccff42dfcf91b0af368f88dc3e446", "html_url": "https://github.com/rust-lang/rust/commit/09bfb92fdc3ccff42dfcf91b0af368f88dc3e446"}], "stats": {"total": 466, "additions": 257, "deletions": 209}, "files": [{"sha": "9fc1c7390ccd044eb6f79a5083162e87f713175a", "filename": "mk/tests.mk", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ac89cd27613ffe574a6fc6009793c1900e5cfca/mk%2Ftests.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4ac89cd27613ffe574a6fc6009793c1900e5cfca/mk%2Ftests.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftests.mk?ref=4ac89cd27613ffe574a6fc6009793c1900e5cfca", "patch": "@@ -526,8 +526,6 @@ endif\n # triples).  The associated message will be printed as a warning\n # during attempts to run those tests.\n \n-CTEST_DISABLE_NONSELFHOST_rpass-full = \"run-pass-full suite is unavailable when cross-compiling.\"\n-\n define DEF_CTEST_VARS\n \n # All the per-stage build rules you might want to call from the\n@@ -573,7 +571,7 @@ CTEST_COMMON_ARGS$(1)-T-$(2)-H-$(3) :=\t\t\t\t\t\t\\\n         $$(CTEST_TESTARGS)\n \n CTEST_DEPS_rpass_$(1)-T-$(2)-H-$(3) = $$(RPASS_TESTS)\n-CTEST_DEPS_rpass-full_$(1)-T-$(2)-H-$(3) = $$(RPASS_FULL_TESTS) $$(CSREQ$(1)_T_$(2)_H_$(3))\n+CTEST_DEPS_rpass-full_$(1)-T-$(2)-H-$(3) = $$(RPASS_FULL_TESTS) $$(CSREQ$(1)_T_$(3)_H_$(3)) $$(SREQ$(1)_T_$(2)_H_$(3))\n CTEST_DEPS_rfail_$(1)-T-$(2)-H-$(3) = $$(RFAIL_TESTS)\n CTEST_DEPS_cfail_$(1)-T-$(2)-H-$(3) = $$(CFAIL_TESTS)\n CTEST_DEPS_bench_$(1)-T-$(2)-H-$(3) = $$(BENCH_TESTS)"}, {"sha": "7ecea29db2ead761e7bf836eae1542daec53a2e7", "filename": "src/librustc/back/archive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ac89cd27613ffe574a6fc6009793c1900e5cfca/src%2Flibrustc%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ac89cd27613ffe574a6fc6009793c1900e5cfca/src%2Flibrustc%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Farchive.rs?ref=4ac89cd27613ffe574a6fc6009793c1900e5cfca", "patch": "@@ -184,7 +184,7 @@ impl<'a> Archive<'a> {\n         let unixlibname = format!(\"lib{}.a\", name);\n \n         let mut rustpath = filesearch::rust_path();\n-        rustpath.push(self.sess.filesearch().get_target_lib_path());\n+        rustpath.push(self.sess.target_filesearch().get_lib_path());\n         let search = self.sess.opts.addl_lib_search_paths.borrow();\n         for path in search.iter().chain(rustpath.iter()) {\n             debug!(\"looking for {} inside {}\", name, path.display());"}, {"sha": "b7842936af3b0ea22a592881aa13d86d6ff6e89f", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ac89cd27613ffe574a6fc6009793c1900e5cfca/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ac89cd27613ffe574a6fc6009793c1900e5cfca/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=4ac89cd27613ffe574a6fc6009793c1900e5cfca", "patch": "@@ -1088,7 +1088,7 @@ fn link_args(sess: &Session,\n     // The default library location, we need this to find the runtime.\n     // The location of crates will be determined as needed.\n     // FIXME (#9639): This needs to handle non-utf8 paths\n-    let lib_path = sess.filesearch().get_target_lib_path();\n+    let lib_path = sess.target_filesearch().get_lib_path();\n     let stage: ~str = \"-L\".to_owned() + lib_path.as_str().unwrap();\n \n     let mut args = vec!(stage);"}, {"sha": "ce79bea5cee7d459b908bc9b64190060e43448c8", "filename": "src/librustc/back/rpath.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ac89cd27613ffe574a6fc6009793c1900e5cfca/src%2Flibrustc%2Fback%2Frpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ac89cd27613ffe574a6fc6009793c1900e5cfca/src%2Flibrustc%2Fback%2Frpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Frpath.rs?ref=4ac89cd27613ffe574a6fc6009793c1900e5cfca", "patch": "@@ -40,7 +40,7 @@ pub fn get_rpath_flags(sess: &Session, out_filename: &Path) -> Vec<~str> {\n \n     debug!(\"preparing the RPATH!\");\n \n-    let sysroot = sess.filesearch().sysroot;\n+    let sysroot = sess.sysroot();\n     let output = out_filename;\n     let libs = sess.cstore.get_used_crates(cstore::RequireDynamic);\n     let libs = libs.move_iter().filter_map(|(_, l)| {"}, {"sha": "95ee250e24c1f080eacbc9879419be5490112ec3", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4ac89cd27613ffe574a6fc6009793c1900e5cfca/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ac89cd27613ffe574a6fc6009793c1900e5cfca/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=4ac89cd27613ffe574a6fc6009793c1900e5cfca", "patch": "@@ -284,9 +284,7 @@ pub fn phase_3_run_analysis_passes(sess: Session,\n     let time_passes = sess.time_passes();\n \n     time(time_passes, \"external crate/lib resolution\", (), |_|\n-         creader::read_crates(&sess, krate,\n-                              session::sess_os_to_meta_os(sess.targ_cfg.os),\n-                              token::get_ident_interner()));\n+         creader::read_crates(&sess, krate));\n \n     let lang_items = time(time_passes, \"language item collection\", (), |_|\n                           middle::lang_items::collect_language_items(krate, &sess));\n@@ -794,7 +792,7 @@ pub fn build_target_config(sopts: &session::Options) -> session::Config {\n     }\n }\n \n-pub fn host_triple() -> ~str {\n+pub fn host_triple() -> &'static str {\n     // Get the host triple out of the build environment. This ensures that our\n     // idea of the host triple is the same as for the set of libraries we've\n     // actually built.  We can't just take LLVM's host triple because they\n@@ -803,7 +801,7 @@ pub fn host_triple() -> ~str {\n     // Instead of grabbing the host triple (for the current host), we grab (at\n     // compile time) the target triple that this rustc is built with and\n     // calling that (at runtime) the host triple.\n-    (env!(\"CFG_COMPILER_HOST_TRIPLE\")).to_owned()\n+    env!(\"CFG_COMPILER_HOST_TRIPLE\")\n }\n \n pub fn build_session_options(matches: &getopts::Matches) -> session::Options {\n@@ -895,7 +893,7 @@ pub fn build_session_options(matches: &getopts::Matches) -> session::Options {\n     }\n \n     let sysroot_opt = matches.opt_str(\"sysroot\").map(|m| Path::new(m));\n-    let target = matches.opt_str(\"target\").unwrap_or(host_triple());\n+    let target = matches.opt_str(\"target\").unwrap_or(host_triple().to_owned());\n     let opt_level = {\n         if (debugging_opts & session::NO_OPT) != 0 {\n             No"}, {"sha": "950e6bd8ee8333621f3437cbff875083ac8a7f1c", "filename": "src/librustc/driver/session.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4ac89cd27613ffe574a6fc6009793c1900e5cfca/src%2Flibrustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ac89cd27613ffe574a6fc6009793c1900e5cfca/src%2Flibrustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fsession.rs?ref=4ac89cd27613ffe574a6fc6009793c1900e5cfca", "patch": "@@ -319,17 +319,25 @@ impl Session {\n     pub fn show_span(&self) -> bool {\n         self.debugging_opt(SHOW_SPAN)\n     }\n-    pub fn filesearch<'a>(&'a self) -> filesearch::FileSearch<'a> {\n-        let sysroot = match self.opts.maybe_sysroot {\n-            Some(ref sysroot) => sysroot,\n+    pub fn sysroot<'a>(&'a self) -> &'a Path {\n+        match self.opts.maybe_sysroot {\n+            Some (ref sysroot) => sysroot,\n             None => self.default_sysroot.as_ref()\n                         .expect(\"missing sysroot and default_sysroot in Session\")\n-        };\n+        }\n+    }\n+    pub fn target_filesearch<'a>(&'a self) -> filesearch::FileSearch<'a> {\n         filesearch::FileSearch::new(\n-            sysroot,\n+            self.sysroot(),\n             self.opts.target_triple,\n             &self.opts.addl_lib_search_paths)\n     }\n+    pub fn host_filesearch<'a>(&'a self) -> filesearch::FileSearch<'a> {\n+        filesearch::FileSearch::new(\n+            self.sysroot(),\n+            host_triple(),\n+            &self.opts.addl_lib_search_paths)\n+    }\n }\n \n /// Some reasonable defaults\n@@ -343,7 +351,7 @@ pub fn basic_options() -> Options {\n         output_types: Vec::new(),\n         addl_lib_search_paths: RefCell::new(HashSet::new()),\n         maybe_sysroot: None,\n-        target_triple: host_triple(),\n+        target_triple: host_triple().to_owned(),\n         cfg: Vec::new(),\n         test: false,\n         parse_only: false,"}, {"sha": "7f05b89dc8471e1707b1bb324b48185653dcf352", "filename": "src/librustc/metadata/common.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ac89cd27613ffe574a6fc6009793c1900e5cfca/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ac89cd27613ffe574a6fc6009793c1900e5cfca/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcommon.rs?ref=4ac89cd27613ffe574a6fc6009793c1900e5cfca", "patch": "@@ -200,6 +200,8 @@ pub static tag_macro_registrar_fn: uint = 0x8b;\n pub static tag_exported_macros: uint = 0x8c;\n pub static tag_macro_def: uint = 0x8d;\n \n+pub static tag_crate_triple: uint = 0x66;\n+\n #[deriving(Clone, Show)]\n pub struct LinkMeta {\n     pub crateid: CrateId,"}, {"sha": "916d2a6f07ca28f27517651b37989b95e85ce640", "filename": "src/librustc/metadata/creader.rs", "status": "modified", "additions": 118, "deletions": 88, "changes": 206, "blob_url": "https://github.com/rust-lang/rust/blob/4ac89cd27613ffe574a6fc6009793c1900e5cfca/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ac89cd27613ffe574a6fc6009793c1900e5cfca/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcreader.rs?ref=4ac89cd27613ffe574a6fc6009793c1900e5cfca", "patch": "@@ -14,13 +14,12 @@\n \n use back::link;\n use back::svh::Svh;\n-use driver::{driver, session};\n use driver::session::Session;\n+use driver::{driver, session};\n use metadata::cstore;\n use metadata::cstore::CStore;\n use metadata::decoder;\n use metadata::loader;\n-use metadata::loader::Os;\n use metadata::loader::CratePaths;\n \n use std::rc::Rc;\n@@ -32,29 +31,23 @@ use syntax::attr::AttrMetaMethods;\n use syntax::codemap::{Span};\n use syntax::diagnostic::SpanHandler;\n use syntax::ext::base::{CrateLoader, MacroCrate};\n-use syntax::parse::token::{IdentInterner, InternedString};\n+use syntax::parse::token::InternedString;\n use syntax::parse::token;\n use syntax::crateid::CrateId;\n use syntax::visit;\n \n struct Env<'a> {\n     sess: &'a Session,\n-    os: loader::Os,\n     next_crate_num: ast::CrateNum,\n-    intr: Rc<IdentInterner>\n }\n \n // Traverses an AST, reading all the information about use'd crates and extern\n // libraries necessary for later resolving, typechecking, linking, etc.\n pub fn read_crates(sess: &Session,\n-                   krate: &ast::Crate,\n-                   os: loader::Os,\n-                   intr: Rc<IdentInterner>) {\n+                   krate: &ast::Crate) {\n     let mut e = Env {\n         sess: sess,\n-        os: os,\n         next_crate_num: sess.cstore.next_crate_num(),\n-        intr: intr\n     };\n     visit_crate(&e, krate);\n     visit::walk_crate(&mut e, krate, ());\n@@ -84,7 +77,6 @@ fn dump_crates(cstore: &CStore) {\n \n fn warn_if_multiple_versions(diag: &SpanHandler, cstore: &CStore) {\n     let mut map = HashMap::new();\n-\n     cstore.iter_crate_data(|cnum, data| {\n         let crateid = data.crate_id();\n         let key = (crateid.name.clone(), crateid.path.clone());\n@@ -129,7 +121,7 @@ fn visit_view_item(e: &mut Env, i: &ast::ViewItem) {\n     match extract_crate_info(e, i) {\n         Some(info) => {\n             let (cnum, _, _) = resolve_crate(e, &None, info.ident,\n-                                             &info.crate_id, None, true,\n+                                             &info.crate_id, None,\n                                              i.span);\n             e.sess.cstore.add_extern_mod_stmt_cnum(info.id, cnum);\n         }\n@@ -272,13 +264,60 @@ fn existing_match(e: &Env, crate_id: &CrateId,\n     return ret;\n }\n \n+fn register_crate<'a>(e: &mut Env,\n+                  root: &Option<CratePaths>,\n+                  ident: &str,\n+                  crate_id: &CrateId,\n+                  span: Span,\n+                  lib: loader::Library)\n+                        -> (ast::CrateNum, Rc<cstore::crate_metadata>,\n+                            cstore::CrateSource) {\n+    // Claim this crate number and cache it\n+    let cnum = e.next_crate_num;\n+    e.next_crate_num += 1;\n+\n+    // Stash paths for top-most crate locally if necessary.\n+    let crate_paths = if root.is_none() {\n+        Some(CratePaths {\n+            ident: ident.to_owned(),\n+            dylib: lib.dylib.clone(),\n+            rlib:  lib.rlib.clone(),\n+        })\n+    } else {\n+        None\n+    };\n+    // Maintain a reference to the top most crate.\n+    let root = if root.is_some() { root } else { &crate_paths };\n+\n+    let cnum_map = resolve_crate_deps(e, root, lib.metadata.as_slice(), span);\n+\n+    let loader::Library{ dylib, rlib, metadata } = lib;\n+\n+    let cmeta = Rc::new( cstore::crate_metadata {\n+        name: crate_id.name.to_owned(),\n+        data: metadata,\n+        cnum_map: cnum_map,\n+        cnum: cnum,\n+        span: span,\n+    });\n+\n+    let source = cstore::CrateSource {\n+        dylib: dylib,\n+        rlib: rlib,\n+        cnum: cnum,\n+    };\n+\n+    e.sess.cstore.set_crate_data(cnum, cmeta.clone());\n+    e.sess.cstore.add_used_crate_source(source.clone());\n+    (cnum, cmeta, source)\n+}\n+\n fn resolve_crate<'a>(e: &mut Env,\n-                     root: &Option<CratePaths>,\n-                     ident: &str,\n-                     crate_id: &CrateId,\n-                     hash: Option<&Svh>,\n-                     should_link: bool,\n-                     span: Span)\n+                 root: &Option<CratePaths>,\n+                 ident: &str,\n+                 crate_id: &CrateId,\n+                 hash: Option<&Svh>,\n+                 span: Span)\n                      -> (ast::CrateNum, Rc<cstore::crate_metadata>,\n                          cstore::CrateSource) {\n     match existing_match(e, crate_id, hash) {\n@@ -291,64 +330,15 @@ fn resolve_crate<'a>(e: &mut Env,\n                 crate_id: crate_id,\n                 id_hash: id_hash,\n                 hash: hash.map(|a| &*a),\n-                os: e.os,\n-                intr: e.intr.clone(),\n+                filesearch: e.sess.target_filesearch(),\n+                os: session::sess_os_to_meta_os(e.sess.targ_cfg.os),\n+                triple: e.sess.targ_cfg.target_strs.target_triple.as_slice(),\n+                root: root,\n                 rejected_via_hash: vec!(),\n+                rejected_via_triple: vec!(),\n             };\n-            let loader::Library {\n-                dylib, rlib, metadata\n-            } = load_ctxt.load_library_crate(root);\n-\n-            // Stash paths for top-most crate locally if necessary.\n-            let crate_paths = if root.is_none() {\n-                Some(CratePaths {\n-                    ident: load_ctxt.ident.to_owned(),\n-                    dylib: dylib.clone(),\n-                    rlib:  rlib.clone(),\n-                })\n-            } else {\n-                None\n-            };\n-            // Maintain a reference to the top most crate.\n-            let root = if root.is_some() { root } else { &crate_paths };\n-\n-            // Now resolve the crates referenced by this crate\n-            let cnum_map = if should_link {\n-                resolve_crate_deps(e, root, metadata.as_slice(), span)\n-            } else {\n-                HashMap::new()\n-            };\n-\n-            // Claim this crate number and cache it if we're linking to the\n-            // crate, otherwise it's a syntax-only crate and we don't need to\n-            // reserve a number\n-            let cnum = if should_link {\n-                let n = e.next_crate_num;\n-                e.next_crate_num += 1;\n-                n\n-            } else {\n-                -1\n-            };\n-\n-            let cmeta = Rc::new(cstore::crate_metadata {\n-                name: load_ctxt.crate_id.name.to_owned(),\n-                data: metadata,\n-                cnum_map: cnum_map,\n-                cnum: cnum,\n-                span: span,\n-            });\n-\n-            let source = cstore::CrateSource {\n-                dylib: dylib,\n-                rlib: rlib,\n-                cnum: cnum,\n-            };\n-\n-            if should_link {\n-                e.sess.cstore.set_crate_data(cnum, cmeta.clone());\n-                e.sess.cstore.add_used_crate_source(source.clone());\n-            }\n-            (cnum, cmeta, source)\n+            let library = load_ctxt.load_library_crate();\n+            register_crate(e, root, ident, crate_id, span, library)\n         }\n         Some(cnum) => (cnum,\n                        e.sess.cstore.get_crate_data(cnum),\n@@ -370,7 +360,6 @@ fn resolve_crate_deps(e: &mut Env,\n                                                dep.crate_id.name.as_slice(),\n                                                &dep.crate_id,\n                                                Some(&dep.hash),\n-                                               true,\n                                                span);\n         (dep.cnum, local_cnum)\n     }).collect()\n@@ -382,14 +371,10 @@ pub struct Loader<'a> {\n \n impl<'a> Loader<'a> {\n     pub fn new(sess: &'a Session) -> Loader<'a> {\n-        let os = driver::get_os(driver::host_triple()).unwrap();\n-        let os = session::sess_os_to_meta_os(os);\n         Loader {\n             env: Env {\n                 sess: sess,\n-                os: os,\n                 next_crate_num: sess.cstore.next_crate_num(),\n-                intr: token::get_ident_interner(),\n             }\n         }\n     }\n@@ -398,18 +383,63 @@ impl<'a> Loader<'a> {\n impl<'a> CrateLoader for Loader<'a> {\n     fn load_crate(&mut self, krate: &ast::ViewItem) -> MacroCrate {\n         let info = extract_crate_info(&self.env, krate).unwrap();\n-        let (_, data, library) = resolve_crate(&mut self.env, &None,\n-                                               info.ident, &info.crate_id,\n-                                               None, info.should_link,\n-                                               krate.span);\n-        let macros = decoder::get_exported_macros(&*data);\n-        let registrar = decoder::get_macro_registrar_fn(&*data).map(|id| {\n-            decoder::get_symbol(data.data.as_slice(), id)\n+        let target_triple = self.env.sess.targ_cfg.target_strs.target_triple.as_slice();\n+        let is_cross = target_triple != driver::host_triple();\n+        let mut should_link = info.should_link && !is_cross;\n+        let id_hash = link::crate_id_hash(&info.crate_id);\n+        let os = driver::get_os(driver::host_triple()).unwrap();\n+        let mut load_ctxt = loader::Context {\n+            sess: self.env.sess,\n+            span: krate.span,\n+            ident: info.ident,\n+            crate_id: &info.crate_id,\n+            id_hash: id_hash,\n+            hash: None,\n+            filesearch: self.env.sess.host_filesearch(),\n+            triple: driver::host_triple(),\n+            os: session::sess_os_to_meta_os(os),\n+            root: &None,\n+            rejected_via_hash: vec!(),\n+            rejected_via_triple: vec!(),\n+        };\n+        let library = match load_ctxt.maybe_load_library_crate() {\n+            Some (l) => l,\n+            None if is_cross => {\n+                // try loading from target crates (only valid if there are\n+                // no syntax extensions)\n+                load_ctxt.triple = target_triple;\n+                load_ctxt.os = session::sess_os_to_meta_os(self.env.sess.targ_cfg.os);\n+                load_ctxt.filesearch = self.env.sess.target_filesearch();\n+                let lib = load_ctxt.load_library_crate();\n+                if decoder::get_macro_registrar_fn(lib.metadata.as_slice()).is_some() {\n+                    let message = format!(\"crate `{}` contains a macro_registrar fn but \\\n+                                  only a version for triple `{}` could be found (need {})\",\n+                                  info.ident, target_triple, driver::host_triple());\n+                    self.env.sess.span_err(krate.span, message);\n+                    // need to abort now because the syntax expansion\n+                    // code will shortly attempt to load and execute\n+                    // code from the found library.\n+                    self.env.sess.abort_if_errors();\n+                }\n+                should_link = info.should_link;\n+                lib\n+            }\n+            None => { load_ctxt.report_load_errs(); unreachable!() },\n+        };\n+        let macros = decoder::get_exported_macros(library.metadata.as_slice());\n+        let registrar = decoder::get_macro_registrar_fn(library.metadata.as_slice()).map(|id| {\n+            decoder::get_symbol(library.metadata.as_slice(), id)\n         });\n-        MacroCrate {\n-            lib: library.dylib,\n+        let mc = MacroCrate {\n+            lib: library.dylib.clone(),\n             macros: macros.move_iter().collect(),\n             registrar_symbol: registrar,\n+        };\n+        if should_link {\n+            // register crate now to avoid double-reading metadata\n+            register_crate(&mut self.env, &None, info.ident.as_slice(),\n+                           &info.crate_id, krate.span, library);\n         }\n+        mc\n     }\n }"}, {"sha": "77b4871ea8b6f1c1991fe57171134196e72fbf07", "filename": "src/librustc/metadata/csearch.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4ac89cd27613ffe574a6fc6009793c1900e5cfca/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ac89cd27613ffe574a6fc6009793c1900e5cfca/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcsearch.rs?ref=4ac89cd27613ffe574a6fc6009793c1900e5cfca", "patch": "@@ -277,20 +277,6 @@ pub fn get_trait_of_method(cstore: &cstore::CStore,\n     decoder::get_trait_of_method(&*cdata, def_id.node, tcx)\n }\n \n-pub fn get_macro_registrar_fn(cstore: &cstore::CStore,\n-                              crate_num: ast::CrateNum)\n-                              -> Option<ast::NodeId> {\n-    let cdata = cstore.get_crate_data(crate_num);\n-    decoder::get_macro_registrar_fn(&*cdata)\n-}\n-\n-pub fn get_exported_macros(cstore: &cstore::CStore,\n-                           crate_num: ast::CrateNum)\n-                           -> Vec<~str> {\n-    let cdata = cstore.get_crate_data(crate_num);\n-    decoder::get_exported_macros(&*cdata)\n-}\n-\n pub fn get_tuple_struct_definition_if_ctor(cstore: &cstore::CStore,\n                                            def_id: ast::DefId)\n     -> Option<ast::DefId>"}, {"sha": "648a18cc09377937d1ba5b356f214bf960ded61d", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4ac89cd27613ffe574a6fc6009793c1900e5cfca/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ac89cd27613ffe574a6fc6009793c1900e5cfca/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=4ac89cd27613ffe574a6fc6009793c1900e5cfca", "patch": "@@ -1126,6 +1126,12 @@ pub fn maybe_get_crate_id(data: &[u8]) -> Option<CrateId> {\n     })\n }\n \n+pub fn get_crate_triple(data: &[u8]) -> ~str {\n+    let cratedoc = reader::Doc(data);\n+    let triple_doc = reader::maybe_get_doc(cratedoc, tag_crate_triple);\n+    triple_doc.expect(\"No triple in crate\").as_str()\n+}\n+\n pub fn get_crate_id(data: &[u8]) -> CrateId {\n     let cratedoc = reader::Doc(data);\n     let hashdoc = reader::get_doc(cratedoc, tag_crate_crateid);\n@@ -1231,13 +1237,13 @@ pub fn get_native_libraries(cdata: Cmd) -> Vec<(cstore::NativeLibaryKind, ~str)>\n     return result;\n }\n \n-pub fn get_macro_registrar_fn(cdata: Cmd) -> Option<ast::NodeId> {\n-    reader::maybe_get_doc(reader::Doc(cdata.data()), tag_macro_registrar_fn)\n+pub fn get_macro_registrar_fn(data: &[u8]) -> Option<ast::NodeId> {\n+    reader::maybe_get_doc(reader::Doc(data), tag_macro_registrar_fn)\n         .map(|doc| FromPrimitive::from_u32(reader::doc_as_u32(doc)).unwrap())\n }\n \n-pub fn get_exported_macros(cdata: Cmd) -> Vec<~str> {\n-    let macros = reader::get_doc(reader::Doc(cdata.data()),\n+pub fn get_exported_macros(data: &[u8]) -> Vec<~str> {\n+    let macros = reader::get_doc(reader::Doc(data),\n                                  tag_exported_macros);\n     let mut result = Vec::new();\n     reader::tagged_docs(macros, tag_macro_def, |macro_doc| {"}, {"sha": "9ce1cebf7384999d9cbe205936523cd4ae6d4e4a", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4ac89cd27613ffe574a6fc6009793c1900e5cfca/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ac89cd27613ffe574a6fc6009793c1900e5cfca/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=4ac89cd27613ffe574a6fc6009793c1900e5cfca", "patch": "@@ -1669,6 +1669,12 @@ fn encode_crate_id(ebml_w: &mut Encoder, crate_id: &CrateId) {\n     ebml_w.end_tag();\n }\n \n+fn encode_crate_triple(ebml_w: &mut Encoder, triple: &str) {\n+    ebml_w.start_tag(tag_crate_triple);\n+    ebml_w.writer.write(triple.as_bytes());\n+    ebml_w.end_tag();\n+}\n+\n // NB: Increment this as you change the metadata encoding version.\n pub static metadata_encoding_version : &'static [u8] =\n     &[0x72, //'r' as u8,\n@@ -1738,6 +1744,7 @@ fn encode_metadata_inner(wr: &mut MemWriter, parms: EncodeParams, krate: &Crate)\n     let mut ebml_w = writer::Encoder(wr);\n \n     encode_crate_id(&mut ebml_w, &ecx.link_meta.crateid);\n+    encode_crate_triple(&mut ebml_w, tcx.sess.targ_cfg.target_strs.target_triple);\n     encode_hash(&mut ebml_w, &ecx.link_meta.crate_hash);\n \n     let mut i = ebml_w.writer.tell().unwrap();"}, {"sha": "3e1e4e3f2f73df14670e3cf14b37dcbb8574043b", "filename": "src/librustc/metadata/filesearch.rs", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/4ac89cd27613ffe574a6fc6009793c1900e5cfca/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ac89cd27613ffe574a6fc6009793c1900e5cfca/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs?ref=4ac89cd27613ffe574a6fc6009793c1900e5cfca", "patch": "@@ -30,7 +30,7 @@ pub type pick<'a> = |path: &Path|: 'a -> FileMatch;\n pub struct FileSearch<'a> {\n     pub sysroot: &'a Path,\n     pub addl_lib_search_paths: &'a RefCell<HashSet<Path>>,\n-    pub target_triple: &'a str\n+    pub triple: &'a str,\n }\n \n impl<'a> FileSearch<'a> {\n@@ -48,22 +48,23 @@ impl<'a> FileSearch<'a> {\n             visited_dirs.insert(path.as_vec().to_owned());\n         }\n \n-        debug!(\"filesearch: searching target lib path\");\n+        debug!(\"filesearch: searching lib path\");\n         let tlib_path = make_target_lib_path(self.sysroot,\n-                                    self.target_triple);\n+                                    self.triple);\n         if !visited_dirs.contains_equiv(&tlib_path.as_vec()) {\n             match f(&tlib_path) {\n                 FileMatches => found = true,\n                 FileDoesntMatch => ()\n             }\n         }\n+\n         visited_dirs.insert(tlib_path.as_vec().to_owned());\n         // Try RUST_PATH\n         if !found {\n             let rustpath = rust_path();\n             for path in rustpath.iter() {\n-                let tlib_path = make_rustpkg_target_lib_path(\n-                    self.sysroot, path, self.target_triple);\n+                let tlib_path = make_rustpkg_lib_path(\n+                    self.sysroot, path, self.triple);\n                 debug!(\"is {} in visited_dirs? {:?}\", tlib_path.display(),\n                         visited_dirs.contains_equiv(&tlib_path.as_vec().to_owned()));\n \n@@ -82,8 +83,8 @@ impl<'a> FileSearch<'a> {\n         }\n     }\n \n-    pub fn get_target_lib_path(&self) -> Path {\n-        make_target_lib_path(self.sysroot, self.target_triple)\n+    pub fn get_lib_path(&self) -> Path {\n+        make_target_lib_path(self.sysroot, self.triple)\n     }\n \n     pub fn search(&self, pick: pick) {\n@@ -122,13 +123,13 @@ impl<'a> FileSearch<'a> {\n     }\n \n     pub fn new(sysroot: &'a Path,\n-               target_triple: &'a str,\n+               triple: &'a str,\n                addl_lib_search_paths: &'a RefCell<HashSet<Path>>) -> FileSearch<'a> {\n-        debug!(\"using sysroot = {}\", sysroot.display());\n+        debug!(\"using sysroot = {}, triple = {}\", sysroot.display(), triple);\n         FileSearch {\n             sysroot: sysroot,\n             addl_lib_search_paths: addl_lib_search_paths,\n-            target_triple: target_triple\n+            triple: triple,\n         }\n     }\n }\n@@ -147,11 +148,11 @@ fn make_target_lib_path(sysroot: &Path,\n     sysroot.join(&relative_target_lib_path(sysroot, target_triple))\n }\n \n-fn make_rustpkg_target_lib_path(sysroot: &Path,\n-                                dir: &Path,\n-                                target_triple: &str) -> Path {\n+fn make_rustpkg_lib_path(sysroot: &Path,\n+                         dir: &Path,\n+                         triple: &str) -> Path {\n     let mut p = dir.join(find_libdir(sysroot));\n-    p.push(target_triple);\n+    p.push(triple);\n     p\n }\n "}, {"sha": "4e6f4e2c96520f00b5fd9a8a3df781fbd8f19bf7", "filename": "src/librustc/metadata/loader.rs", "status": "modified", "additions": 80, "deletions": 44, "changes": 124, "blob_url": "https://github.com/rust-lang/rust/blob/4ac89cd27613ffe574a6fc6009793c1900e5cfca/src%2Flibrustc%2Fmetadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ac89cd27613ffe574a6fc6009793c1900e5cfca/src%2Flibrustc%2Fmetadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Floader.rs?ref=4ac89cd27613ffe574a6fc6009793c1900e5cfca", "patch": "@@ -17,10 +17,9 @@ use lib::llvm::{False, llvm, ObjectFile, mk_section_iter};\n use metadata::cstore::{MetadataBlob, MetadataVec, MetadataArchive};\n use metadata::decoder;\n use metadata::encoder;\n-use metadata::filesearch::{FileMatches, FileDoesntMatch};\n+use metadata::filesearch::{FileSearch, FileMatches, FileDoesntMatch};\n use syntax::codemap::Span;\n use syntax::diagnostic::SpanHandler;\n-use syntax::parse::token::IdentInterner;\n use syntax::crateid::CrateId;\n use syntax::attr::AttrMetaMethods;\n \n@@ -30,7 +29,6 @@ use std::cmp;\n use std::io;\n use std::os::consts::{macos, freebsd, linux, android, win32};\n use std::ptr;\n-use std::rc::Rc;\n use std::slice;\n use std::str;\n \n@@ -46,8 +44,9 @@ pub enum Os {\n     OsFreebsd\n }\n \n-pub struct HashMismatch {\n+pub struct CrateMismatch {\n     path: Path,\n+    got: ~str,\n }\n \n pub struct Context<'a> {\n@@ -57,9 +56,12 @@ pub struct Context<'a> {\n     pub crate_id: &'a CrateId,\n     pub id_hash: &'a str,\n     pub hash: Option<&'a Svh>,\n+    pub triple: &'a str,\n     pub os: Os,\n-    pub intr: Rc<IdentInterner>,\n-    pub rejected_via_hash: Vec<HashMismatch>\n+    pub filesearch: FileSearch<'a>,\n+    pub root: &'a Option<CratePaths>,\n+    pub rejected_via_hash: Vec<CrateMismatch>,\n+    pub rejected_via_triple: Vec<CrateMismatch>,\n }\n \n pub struct Library {\n@@ -104,52 +106,69 @@ fn realpath(p: &Path) -> Path {\n }\n \n impl<'a> Context<'a> {\n-    pub fn load_library_crate(&mut self, root: &Option<CratePaths>) -> Library {\n+    pub fn maybe_load_library_crate(&mut self) -> Option<Library> {\n+        self.find_library_crate()\n+    }\n+\n+    pub fn load_library_crate(&mut self) -> Library {\n         match self.find_library_crate() {\n             Some(t) => t,\n             None => {\n-                self.sess.abort_if_errors();\n-                let message = if self.rejected_via_hash.len() > 0 {\n-                    format!(\"found possibly newer version of crate `{}`\",\n-                            self.ident)\n-                } else {\n-                    format!(\"can't find crate for `{}`\", self.ident)\n-                };\n-                let message = match root {\n-                    &None => message,\n-                    &Some(ref r) => format!(\"{} which `{}` depends on\",\n-                                            message, r.ident)\n-                };\n-                self.sess.span_err(self.span, message);\n-\n-                if self.rejected_via_hash.len() > 0 {\n-                    self.sess.span_note(self.span, \"perhaps this crate needs \\\n-                                                    to be recompiled?\");\n-                    let mismatches = self.rejected_via_hash.iter();\n-                    for (i, &HashMismatch{ ref path }) in mismatches.enumerate() {\n+                self.report_load_errs();\n+                unreachable!()\n+            }\n+        }\n+    }\n+\n+    pub fn report_load_errs(&mut self) {\n+        let message = if self.rejected_via_hash.len() > 0 {\n+            format!(\"found possibly newer version of crate `{}`\",\n+                    self.ident)\n+        } else if self.rejected_via_triple.len() > 0 {\n+            format!(\"found incorrect triple for crate `{}`\", self.ident)\n+        } else {\n+            format!(\"can't find crate for `{}`\", self.ident)\n+        };\n+        let message = match self.root {\n+            &None => message,\n+            &Some(ref r) => format!(\"{} which `{}` depends on\",\n+                                    message, r.ident)\n+        };\n+        self.sess.span_err(self.span, message);\n+\n+        let mismatches = self.rejected_via_triple.iter();\n+        if self.rejected_via_triple.len() > 0 {\n+            self.sess.span_note(self.span, format!(\"expected triple of {}\", self.triple));\n+            for (i, &CrateMismatch{ ref path, ref got }) in mismatches.enumerate() {\n+                self.sess.fileline_note(self.span,\n+                    format!(\"crate `{}` path \\\\#{}, triple {}: {}\",\n+                            self.ident, i+1, got, path.display()));\n+            }\n+        }\n+        if self.rejected_via_hash.len() > 0 {\n+            self.sess.span_note(self.span, \"perhaps this crate needs \\\n+                                            to be recompiled?\");\n+            let mismatches = self.rejected_via_hash.iter();\n+            for (i, &CrateMismatch{ ref path, .. }) in mismatches.enumerate() {\n+                self.sess.fileline_note(self.span,\n+                    format!(\"crate `{}` path \\\\#{}: {}\",\n+                            self.ident, i+1, path.display()));\n+            }\n+            match self.root {\n+                &None => {}\n+                &Some(ref r) => {\n+                    for (i, path) in r.paths().iter().enumerate() {\n                         self.sess.fileline_note(self.span,\n                             format!(\"crate `{}` path \\\\#{}: {}\",\n-                                    self.ident, i+1, path.display()));\n-                    }\n-                    match root {\n-                        &None => {}\n-                        &Some(ref r) => {\n-                            for (i, path) in r.paths().iter().enumerate() {\n-                                self.sess.fileline_note(self.span,\n-                                    format!(\"crate `{}` path \\\\#{}: {}\",\n-                                            r.ident, i+1, path.display()));\n-                            }\n-                        }\n+                                    r.ident, i+1, path.display()));\n                     }\n                 }\n-                self.sess.abort_if_errors();\n-                unreachable!()\n             }\n         }\n+        self.sess.abort_if_errors();\n     }\n \n     fn find_library_crate(&mut self) -> Option<Library> {\n-        let filesearch = self.sess.filesearch();\n         let (dyprefix, dysuffix) = self.dylibname();\n \n         // want: crate_name.dir_part() + prefix + crate_name.file_part + \"-\"\n@@ -171,11 +190,12 @@ impl<'a> Context<'a> {\n         // of the crate id (path/name/id).\n         //\n         // The goal of this step is to look at as little metadata as possible.\n-        filesearch.search(|path| {\n+        self.filesearch.search(|path| {\n             let file = match path.filename_str() {\n                 None => return FileDoesntMatch,\n                 Some(file) => file,\n             };\n+            info!(\"file: {}\", file);\n             if file.starts_with(rlib_prefix) && file.ends_with(\".rlib\") {\n                 info!(\"rlib candidate: {}\", path.display());\n                 match self.try_match(file, rlib_prefix, \".rlib\") {\n@@ -376,16 +396,30 @@ impl<'a> Context<'a> {\n     fn crate_matches(&mut self, crate_data: &[u8], libpath: &Path) -> bool {\n         match decoder::maybe_get_crate_id(crate_data) {\n             Some(ref id) if self.crate_id.matches(id) => {}\n-            _ => return false\n+            _ => { info!(\"Rejecting via crate_id\"); return false }\n         }\n         let hash = match decoder::maybe_get_crate_hash(crate_data) {\n-            Some(hash) => hash, None => return false\n+            Some(hash) => hash, None => {\n+                info!(\"Rejecting via lack of crate hash\");\n+                return false;\n+            }\n         };\n+\n+        let triple = decoder::get_crate_triple(crate_data);\n+        if triple.as_slice() != self.triple {\n+            info!(\"Rejecting via crate triple: expected {} got {}\", self.triple, triple);\n+            self.rejected_via_triple.push(CrateMismatch{ path: libpath.clone(),\n+                                                         got: triple.to_owned() });\n+            return false;\n+        }\n+\n         match self.hash {\n             None => true,\n             Some(myhash) => {\n                 if *myhash != hash {\n-                    self.rejected_via_hash.push(HashMismatch{ path: libpath.clone() });\n+                    info!(\"Rejecting via hash: expected {} got {}\", *myhash, hash);\n+                    self.rejected_via_hash.push(CrateMismatch{ path: libpath.clone(),\n+                                                               got: myhash.as_str().to_owned() });\n                     false\n                 } else {\n                     true\n@@ -394,6 +428,7 @@ impl<'a> Context<'a> {\n         }\n     }\n \n+\n     // Returns the corresponding (prefix, suffix) that files need to have for\n     // dynamic libraries\n     fn dylibname(&self) -> (&'static str, &'static str) {\n@@ -405,6 +440,7 @@ impl<'a> Context<'a> {\n             OsFreebsd => (freebsd::DLL_PREFIX, freebsd::DLL_SUFFIX),\n         }\n     }\n+\n }\n \n pub fn note_crateid_attr(diag: &SpanHandler, crateid: &CrateId) {"}, {"sha": "f8eb9868a5b69413047261f344dfd11aeb957be9", "filename": "src/test/compile-fail/macro-crate-unexported-macro.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4ac89cd27613ffe574a6fc6009793c1900e5cfca/src%2Ftest%2Fcompile-fail%2Fmacro-crate-unexported-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ac89cd27613ffe574a6fc6009793c1900e5cfca/src%2Ftest%2Fcompile-fail%2Fmacro-crate-unexported-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-crate-unexported-macro.rs?ref=4ac89cd27613ffe574a6fc6009793c1900e5cfca", "patch": "@@ -11,7 +11,6 @@\n // aux-build:macro_crate_test.rs\n // ignore-stage1\n // ignore-android\n-// ignore-cross-compile #12102\n \n #![feature(phase)]\n "}, {"sha": "2053f81683d7a3d50582dc9276c74da5cbd5766d", "filename": "src/test/compile-fail/phase-syntax-doesnt-resolve.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4ac89cd27613ffe574a6fc6009793c1900e5cfca/src%2Ftest%2Fcompile-fail%2Fphase-syntax-doesnt-resolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ac89cd27613ffe574a6fc6009793c1900e5cfca/src%2Ftest%2Fcompile-fail%2Fphase-syntax-doesnt-resolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fphase-syntax-doesnt-resolve.rs?ref=4ac89cd27613ffe574a6fc6009793c1900e5cfca", "patch": "@@ -11,7 +11,6 @@\n // aux-build:macro_crate_test.rs\n // ignore-stage1\n // ignore-android\n-// ignore-cross-compile #12102\n \n #![feature(phase)]\n "}, {"sha": "fbcdf55f1acbfca0380ef9f9861feaf62fda58e3", "filename": "src/test/compile-fail/syntax-extension-fourcc-bad-len.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4ac89cd27613ffe574a6fc6009793c1900e5cfca/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-fourcc-bad-len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ac89cd27613ffe574a6fc6009793c1900e5cfca/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-fourcc-bad-len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-fourcc-bad-len.rs?ref=4ac89cd27613ffe574a6fc6009793c1900e5cfca", "patch": "@@ -10,7 +10,6 @@\n \n // ignore-stage1\n // ignore-pretty\n-// ignore-cross-compile #12102\n \n #![feature(phase)]\n "}, {"sha": "569b54b93fb097f346853b3e4839b7efd4dfbfc9", "filename": "src/test/compile-fail/syntax-extension-fourcc-invalid-endian.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4ac89cd27613ffe574a6fc6009793c1900e5cfca/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-fourcc-invalid-endian.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ac89cd27613ffe574a6fc6009793c1900e5cfca/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-fourcc-invalid-endian.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-fourcc-invalid-endian.rs?ref=4ac89cd27613ffe574a6fc6009793c1900e5cfca", "patch": "@@ -10,7 +10,6 @@\n \n // ignore-stage1\n // ignore-pretty\n-// ignore-cross-compile #12102\n \n #![feature(phase)]\n "}, {"sha": "c0e2304354cc478d74260c3a32fb9c5054bbbef5", "filename": "src/test/compile-fail/syntax-extension-fourcc-non-ascii-str.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4ac89cd27613ffe574a6fc6009793c1900e5cfca/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-fourcc-non-ascii-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ac89cd27613ffe574a6fc6009793c1900e5cfca/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-fourcc-non-ascii-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-fourcc-non-ascii-str.rs?ref=4ac89cd27613ffe574a6fc6009793c1900e5cfca", "patch": "@@ -10,7 +10,6 @@\n \n // ignore-stage1\n // ignore-pretty\n-// ignore-cross-compile #12102\n \n #![feature(phase)]\n "}, {"sha": "536594f3063111ce1c0345418322999de5bbd8b6", "filename": "src/test/compile-fail/syntax-extension-fourcc-non-literal.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4ac89cd27613ffe574a6fc6009793c1900e5cfca/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-fourcc-non-literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ac89cd27613ffe574a6fc6009793c1900e5cfca/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-fourcc-non-literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-fourcc-non-literal.rs?ref=4ac89cd27613ffe574a6fc6009793c1900e5cfca", "patch": "@@ -10,7 +10,6 @@\n \n // ignore-stage1\n // ignore-pretty\n-// ignore-cross-compile #12102\n \n #![feature(phase)]\n "}, {"sha": "8a0b0856d24de8897e0b03b22d7ffd615c5c41e1", "filename": "src/test/compile-fail/syntax-extension-fourcc-unsupported-literal.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4ac89cd27613ffe574a6fc6009793c1900e5cfca/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-fourcc-unsupported-literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ac89cd27613ffe574a6fc6009793c1900e5cfca/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-fourcc-unsupported-literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-fourcc-unsupported-literal.rs?ref=4ac89cd27613ffe574a6fc6009793c1900e5cfca", "patch": "@@ -10,7 +10,6 @@\n \n // ignore-stage1\n // ignore-pretty\n-// ignore-cross-compile #12102\n \n #![feature(phase)]\n "}, {"sha": "1cd4f654d2e37106192cca90b5fd161cabcdcccd", "filename": "src/test/compile-fail/syntax-extension-hexfloat-bad-lits.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4ac89cd27613ffe574a6fc6009793c1900e5cfca/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-hexfloat-bad-lits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ac89cd27613ffe574a6fc6009793c1900e5cfca/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-hexfloat-bad-lits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-hexfloat-bad-lits.rs?ref=4ac89cd27613ffe574a6fc6009793c1900e5cfca", "patch": "@@ -10,7 +10,6 @@\n \n // ignore-stage1\n // ignore-pretty\n-// ignore-cross-compile #12102\n \n #![feature(phase)]\n "}, {"sha": "4a6475cea96722b2998d4a7bb4120d1b3952da9b", "filename": "src/test/compile-fail/syntax-extension-hexfloat-bad-types.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4ac89cd27613ffe574a6fc6009793c1900e5cfca/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-hexfloat-bad-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ac89cd27613ffe574a6fc6009793c1900e5cfca/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-hexfloat-bad-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-hexfloat-bad-types.rs?ref=4ac89cd27613ffe574a6fc6009793c1900e5cfca", "patch": "@@ -10,7 +10,6 @@\n \n // ignore-stage1\n // ignore-pretty\n-// ignore-cross-compile #12102\n \n #![feature(phase)]\n "}, {"sha": "d72c82852dd72cc50f04600f041bed0b77171982", "filename": "src/test/run-pass-fulldeps/issue-13560.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ac89cd27613ffe574a6fc6009793c1900e5cfca/src%2Ftest%2Frun-pass-fulldeps%2Fissue-13560.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ac89cd27613ffe574a6fc6009793c1900e5cfca/src%2Ftest%2Frun-pass-fulldeps%2Fissue-13560.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fissue-13560.rs?ref=4ac89cd27613ffe574a6fc6009793c1900e5cfca", "patch": "@@ -12,8 +12,6 @@\n // aux-build:issue-13560-2.rs\n // aux-build:issue-13560-3.rs\n // ignore-stage1\n-// ignore-android\n-// ignore-cross-compile #12102\n \n // Regression test for issue #13560, the test itself is all in the dependent\n // libraries. The fail which previously failed to compile is the one numbered 3."}, {"sha": "58663bb44c7440efac69ba493d6155b520240a29", "filename": "src/test/run-pass-fulldeps/macro-crate-outlive-expansion-phase.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ac89cd27613ffe574a6fc6009793c1900e5cfca/src%2Ftest%2Frun-pass-fulldeps%2Fmacro-crate-outlive-expansion-phase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ac89cd27613ffe574a6fc6009793c1900e5cfca/src%2Ftest%2Frun-pass-fulldeps%2Fmacro-crate-outlive-expansion-phase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fmacro-crate-outlive-expansion-phase.rs?ref=4ac89cd27613ffe574a6fc6009793c1900e5cfca", "patch": "@@ -10,8 +10,6 @@\n \n // aux-build:macro_crate_outlive_expansion_phase.rs\n // ignore-stage1\n-// ignore-android\n-// ignore-cross-compile #12102\n \n #![feature(phase)]\n "}, {"sha": "0c086ae99f74ebe9f140be7e66062566f8c14776", "filename": "src/test/run-pass-fulldeps/macro-crate.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ac89cd27613ffe574a6fc6009793c1900e5cfca/src%2Ftest%2Frun-pass-fulldeps%2Fmacro-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ac89cd27613ffe574a6fc6009793c1900e5cfca/src%2Ftest%2Frun-pass-fulldeps%2Fmacro-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fmacro-crate.rs?ref=4ac89cd27613ffe574a6fc6009793c1900e5cfca", "patch": "@@ -10,8 +10,6 @@\n \n // aux-build:macro_crate_test.rs\n // ignore-stage1\n-// ignore-android\n-// ignore-cross-compile #12102\n \n #![feature(phase)]\n "}, {"sha": "b8d3ab2383100010a96a9f97a6426885838c74e0", "filename": "src/test/run-pass-fulldeps/phase-syntax-link-does-resolve.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4ac89cd27613ffe574a6fc6009793c1900e5cfca/src%2Ftest%2Frun-pass-fulldeps%2Fphase-syntax-link-does-resolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ac89cd27613ffe574a6fc6009793c1900e5cfca/src%2Ftest%2Frun-pass-fulldeps%2Fphase-syntax-link-does-resolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fphase-syntax-link-does-resolve.rs?ref=4ac89cd27613ffe574a6fc6009793c1900e5cfca", "patch": "@@ -10,17 +10,10 @@\n \n // aux-build:macro_crate_test.rs\n // ignore-stage1\n-// ignore-android\n-// force-host\n-\n-// You'll note that there's lots of directives above. This is a very particular\n-// test in which we're both linking to a macro crate and loading macros from it.\n-// This implies that both versions are the host architecture, meaning this test\n-// must also be compiled with the host arch.\n+// ignore-cross-compile\n //\n-// because this doesn't work with that test runner, ignore-android because it\n-// can't run host binaries, and force-host to make this test build as the host\n-// arch.\n+// macro_crate_test will not compile on a cross-compiled target because\n+// libsyntax is not compiled for it.\n \n #![feature(phase)]\n "}, {"sha": "0681ec63b9ed08c7ac61964ef6964ee490919db2", "filename": "src/test/run-pass-fulldeps/syntax-extension-fourcc.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4ac89cd27613ffe574a6fc6009793c1900e5cfca/src%2Ftest%2Frun-pass-fulldeps%2Fsyntax-extension-fourcc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ac89cd27613ffe574a6fc6009793c1900e5cfca/src%2Ftest%2Frun-pass-fulldeps%2Fsyntax-extension-fourcc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fsyntax-extension-fourcc.rs?ref=4ac89cd27613ffe574a6fc6009793c1900e5cfca", "patch": "@@ -10,7 +10,6 @@\n \n // ignore-stage1\n // ignore-pretty\n-// ignore-cross-compile\n \n #![feature(phase)]\n "}, {"sha": "3601b6101159890dd577389652af4372d693fd5b", "filename": "src/test/run-pass-fulldeps/syntax-extension-hexfloat.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4ac89cd27613ffe574a6fc6009793c1900e5cfca/src%2Ftest%2Frun-pass-fulldeps%2Fsyntax-extension-hexfloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ac89cd27613ffe574a6fc6009793c1900e5cfca/src%2Ftest%2Frun-pass-fulldeps%2Fsyntax-extension-hexfloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fsyntax-extension-hexfloat.rs?ref=4ac89cd27613ffe574a6fc6009793c1900e5cfca", "patch": "@@ -10,7 +10,6 @@\n \n // ignore-stage1\n // ignore-pretty\n-// ignore-cross-compile #12102\n \n #![feature(phase)]\n #[phase(syntax)]"}]}