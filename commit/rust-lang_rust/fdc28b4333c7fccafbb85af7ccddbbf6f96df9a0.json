{"sha": "fdc28b4333c7fccafbb85af7ccddbbf6f96df9a0", "node_id": "C_kwDOAAsO6NoAKGZkYzI4YjQzMzNjN2ZjY2FmYmI4NWFmN2NjZGRiYmY2Zjk2ZGY5YTA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-22T14:00:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-22T14:00:23Z"}, "message": "Auto merge of #13021 - N3xed:fix-gat-panics, r=flodiebold\n\nfix: Fix panics on GATs involving const generics\n\nThis workaround avoids constant crashing of rust analyzer when using GATs with const generics,\neven when the const generics are only on the `impl` block.\n\nThe workaround treats GATs as non-existing if either itself or the parent has const generics and\nremoves relevant panicking code-paths.\n\nFixes #11989, fixes #12193", "tree": {"sha": "bb2d3bec515d35de3ee5c21d9a3e58f8b895c806", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb2d3bec515d35de3ee5c21d9a3e58f8b895c806"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fdc28b4333c7fccafbb85af7ccddbbf6f96df9a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fdc28b4333c7fccafbb85af7ccddbbf6f96df9a0", "html_url": "https://github.com/rust-lang/rust/commit/fdc28b4333c7fccafbb85af7ccddbbf6f96df9a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fdc28b4333c7fccafbb85af7ccddbbf6f96df9a0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2310a0af606791248a2d6a6ce98212b1e809179", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2310a0af606791248a2d6a6ce98212b1e809179", "html_url": "https://github.com/rust-lang/rust/commit/c2310a0af606791248a2d6a6ce98212b1e809179"}, {"sha": "ac8cb8ce3b81b4f4559809a3aec50cb0799c126f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac8cb8ce3b81b4f4559809a3aec50cb0799c126f", "html_url": "https://github.com/rust-lang/rust/commit/ac8cb8ce3b81b4f4559809a3aec50cb0799c126f"}], "stats": {"total": 58, "additions": 49, "deletions": 9}, "files": [{"sha": "8b360337a82c88d8dd5c75d41e9a411c8be839cb", "filename": "crates/hir-ty/src/lower.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fdc28b4333c7fccafbb85af7ccddbbf6f96df9a0/crates%2Fhir-ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdc28b4333c7fccafbb85af7ccddbbf6f96df9a0/crates%2Fhir-ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Flower.rs?ref=fdc28b4333c7fccafbb85af7ccddbbf6f96df9a0", "patch": "@@ -479,7 +479,14 @@ impl<'a> TyLoweringContext<'a> {\n                         TyKind::Placeholder(to_placeholder_idx(self.db, param_id.into()))\n                     }\n                     ParamLoweringMode::Variable => {\n-                        let idx = generics.param_idx(param_id.into()).expect(\"matching generics\");\n+                        let idx = match generics.param_idx(param_id.into()) {\n+                            None => {\n+                                never!(\"no matching generics\");\n+                                return (TyKind::Error.intern(Interner), None);\n+                            }\n+                            Some(idx) => idx,\n+                        };\n+\n                         TyKind::BoundVar(BoundVar::new(self.in_binders, idx))\n                     }\n                 }"}, {"sha": "c7895db1afbf5e523a3e6c9a03f09df74cd0aa73", "filename": "crates/hir-ty/src/tests/regression.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/fdc28b4333c7fccafbb85af7ccddbbf6f96df9a0/crates%2Fhir-ty%2Fsrc%2Ftests%2Fregression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdc28b4333c7fccafbb85af7ccddbbf6f96df9a0/crates%2Fhir-ty%2Fsrc%2Ftests%2Fregression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftests%2Fregression.rs?ref=fdc28b4333c7fccafbb85af7ccddbbf6f96df9a0", "patch": "@@ -1526,6 +1526,34 @@ unsafe impl Storage for InlineStorage {\n     );\n }\n \n+#[test]\n+fn gat_crash_3() {\n+    // FIXME: This test currently crashes rust analyzer in a debug build but not in a\n+    // release build (i.e. for the user). With the assumption that tests will always be run\n+    // in debug mode, we catch the unwind and expect that it panicked. See the\n+    // [`crate::utils::generics`] function for more information.\n+    cov_mark::check!(ignore_gats);\n+    std::panic::catch_unwind(|| {\n+        check_no_mismatches(\n+            r#\"\n+trait Collection {\n+    type Item;\n+    type Member<T>: Collection<Item = T>;\n+    fn add(&mut self, value: Self::Item) -> Result<(), Self::Error>;\n+}\n+struct ConstGen<T, const N: usize> {\n+    data: [T; N],\n+}\n+impl<T, const N: usize> Collection for ConstGen<T, N> {\n+    type Item = T;\n+    type Member<U> = ConstGen<U, N>;\n+}\n+        \"#,\n+        );\n+    })\n+    .expect_err(\"must panic\");\n+}\n+\n #[test]\n fn cfgd_out_self_param() {\n     cov_mark::check!(cfgd_out_self_param);"}, {"sha": "d6638db02851183c5f080dc8cfc3fed5503ae76c", "filename": "crates/hir-ty/src/utils.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/fdc28b4333c7fccafbb85af7ccddbbf6f96df9a0/crates%2Fhir-ty%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdc28b4333c7fccafbb85af7ccddbbf6f96df9a0/crates%2Fhir-ty%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Futils.rs?ref=fdc28b4333c7fccafbb85af7ccddbbf6f96df9a0", "patch": "@@ -176,10 +176,19 @@ pub(crate) fn generics(db: &dyn DefDatabase, def: GenericDefId) -> Generics {\n     let parent_generics = parent_generic_def(db, def).map(|def| Box::new(generics(db, def)));\n     if parent_generics.is_some() && matches!(def, GenericDefId::TypeAliasId(_)) {\n         let params = db.generic_params(def);\n+        let parent_params = &parent_generics.as_ref().unwrap().params;\n         let has_consts =\n             params.iter().any(|(_, x)| matches!(x, TypeOrConstParamData::ConstParamData(_)));\n-        return if has_consts {\n-            // XXX: treat const generic associated types as not existing to avoid crashes (#11769)\n+        let parent_has_consts =\n+            parent_params.iter().any(|(_, x)| matches!(x, TypeOrConstParamData::ConstParamData(_)));\n+        return if has_consts || parent_has_consts {\n+            // XXX: treat const generic associated types as not existing to avoid crashes\n+            // (#11769)\n+            //\n+            // Note: Also crashes when the parent has const generics (also even if the GAT\n+            // doesn't use them), see `tests::regression::gat_crash_3` for an example.\n+            // Avoids that by disabling GATs when the parent (i.e. `impl` block) has\n+            // const generics (#12193).\n             //\n             // Chalk expects the inner associated type's parameters to come\n             // *before*, not after the trait's generics as we've always done it.\n@@ -264,12 +273,8 @@ impl Generics {\n \n     fn find_param(&self, param: TypeOrConstParamId) -> Option<(usize, &TypeOrConstParamData)> {\n         if param.parent == self.def {\n-            let (idx, (_local_id, data)) = self\n-                .params\n-                .iter()\n-                .enumerate()\n-                .find(|(_, (idx, _))| *idx == param.local_id)\n-                .unwrap();\n+            let (idx, (_local_id, data)) =\n+                self.params.iter().enumerate().find(|(_, (idx, _))| *idx == param.local_id)?;\n             let parent_len = self.parent_generics().map_or(0, Generics::len);\n             Some((parent_len + idx, data))\n         } else {"}]}