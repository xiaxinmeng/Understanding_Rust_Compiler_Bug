{"sha": "3b6bbf7d16dd8b42fadf8dcdbad4d4d872a3e88c", "node_id": "C_kwDOAAsO6NoAKDNiNmJiZjdkMTZkZDhiNDJmYWRmOGRjZGJhZDRkNGQ4NzJhM2U4OGM", "commit": {"author": {"name": "alex-semenyuk", "email": "alexsemenyuk88@gmail.com", "date": "2022-11-07T07:51:52Z"}, "committer": {"name": "alex-semenyuk", "email": "alexsemenyuk88@gmail.com", "date": "2022-12-10T17:35:49Z"}, "message": "Fix match_single_binding suggestion introduced an extra semicolon", "tree": {"sha": "4987c3082b12f4ea7c9507f69c40dc972563b06f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4987c3082b12f4ea7c9507f69c40dc972563b06f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b6bbf7d16dd8b42fadf8dcdbad4d4d872a3e88c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b6bbf7d16dd8b42fadf8dcdbad4d4d872a3e88c", "html_url": "https://github.com/rust-lang/rust/commit/3b6bbf7d16dd8b42fadf8dcdbad4d4d872a3e88c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b6bbf7d16dd8b42fadf8dcdbad4d4d872a3e88c/comments", "author": {"login": "alex-semenyuk", "id": 5480441, "node_id": "MDQ6VXNlcjU0ODA0NDE=", "avatar_url": "https://avatars.githubusercontent.com/u/5480441?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alex-semenyuk", "html_url": "https://github.com/alex-semenyuk", "followers_url": "https://api.github.com/users/alex-semenyuk/followers", "following_url": "https://api.github.com/users/alex-semenyuk/following{/other_user}", "gists_url": "https://api.github.com/users/alex-semenyuk/gists{/gist_id}", "starred_url": "https://api.github.com/users/alex-semenyuk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alex-semenyuk/subscriptions", "organizations_url": "https://api.github.com/users/alex-semenyuk/orgs", "repos_url": "https://api.github.com/users/alex-semenyuk/repos", "events_url": "https://api.github.com/users/alex-semenyuk/events{/privacy}", "received_events_url": "https://api.github.com/users/alex-semenyuk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alex-semenyuk", "id": 5480441, "node_id": "MDQ6VXNlcjU0ODA0NDE=", "avatar_url": "https://avatars.githubusercontent.com/u/5480441?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alex-semenyuk", "html_url": "https://github.com/alex-semenyuk", "followers_url": "https://api.github.com/users/alex-semenyuk/followers", "following_url": "https://api.github.com/users/alex-semenyuk/following{/other_user}", "gists_url": "https://api.github.com/users/alex-semenyuk/gists{/gist_id}", "starred_url": "https://api.github.com/users/alex-semenyuk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alex-semenyuk/subscriptions", "organizations_url": "https://api.github.com/users/alex-semenyuk/orgs", "repos_url": "https://api.github.com/users/alex-semenyuk/repos", "events_url": "https://api.github.com/users/alex-semenyuk/events{/privacy}", "received_events_url": "https://api.github.com/users/alex-semenyuk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d822110d3b5625b9dc80ccc442e06fc3cc851d76", "url": "https://api.github.com/repos/rust-lang/rust/commits/d822110d3b5625b9dc80ccc442e06fc3cc851d76", "html_url": "https://github.com/rust-lang/rust/commit/d822110d3b5625b9dc80ccc442e06fc3cc851d76"}], "stats": {"total": 72, "additions": 58, "deletions": 14}, "files": [{"sha": "c94a1f763306e14758f0cd6874dd900cfcdb1b03", "filename": "clippy_lints/src/matches/match_single_binding.rs", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3b6bbf7d16dd8b42fadf8dcdbad4d4d872a3e88c/clippy_lints%2Fsrc%2Fmatches%2Fmatch_single_binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b6bbf7d16dd8b42fadf8dcdbad4d4d872a3e88c/clippy_lints%2Fsrc%2Fmatches%2Fmatch_single_binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fmatch_single_binding.rs?ref=3b6bbf7d16dd8b42fadf8dcdbad4d4d872a3e88c", "patch": "@@ -31,19 +31,11 @@ pub(crate) fn check<'a>(cx: &LateContext<'a>, ex: &Expr<'a>, arms: &[Arm<'_>], e\n     };\n \n     // Do we need to add ';' to suggestion ?\n-    match match_body.kind {\n-        ExprKind::Block(block, _) => {\n-            // macro + expr_ty(body) == ()\n-            if block.span.from_expansion() && cx.typeck_results().expr_ty(match_body).is_unit() {\n-                snippet_body.push(';');\n-            }\n-        },\n-        _ => {\n-            // expr_ty(body) == ()\n-            if cx.typeck_results().expr_ty(match_body).is_unit() {\n-                snippet_body.push(';');\n-            }\n-        },\n+    if let ExprKind::Block(block, _) = match_body.kind {\n+        // macro + expr_ty(body) == ()\n+        if block.span.from_expansion() && cx.typeck_results().expr_ty(match_body).is_unit() {\n+            snippet_body.push(';');\n+        }\n     }\n \n     let mut applicability = Applicability::MaybeIncorrect;"}, {"sha": "6cfb6661a03945fc1cfc87691f463aa7fe28ca5b", "filename": "tests/ui/match_single_binding.fixed", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3b6bbf7d16dd8b42fadf8dcdbad4d4d872a3e88c/tests%2Fui%2Fmatch_single_binding.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/3b6bbf7d16dd8b42fadf8dcdbad4d4d872a3e88c/tests%2Fui%2Fmatch_single_binding.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_single_binding.fixed?ref=3b6bbf7d16dd8b42fadf8dcdbad4d4d872a3e88c", "patch": "@@ -133,3 +133,16 @@ fn issue_9575() {\n         println!(\"Needs curlies\");\n     };\n }\n+\n+#[allow(dead_code)]\n+fn issue_9725(r: Option<u32>) {\n+    let x = r;\n+    match x {\n+        Some(_) => {\n+            println!(\"Some\");\n+        },\n+        None => {\n+            println!(\"None\");\n+        },\n+    };\n+}"}, {"sha": "f188aeb5f2ff5ce84789643697a816079ea965dd", "filename": "tests/ui/match_single_binding.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3b6bbf7d16dd8b42fadf8dcdbad4d4d872a3e88c/tests%2Fui%2Fmatch_single_binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b6bbf7d16dd8b42fadf8dcdbad4d4d872a3e88c/tests%2Fui%2Fmatch_single_binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_single_binding.rs?ref=3b6bbf7d16dd8b42fadf8dcdbad4d4d872a3e88c", "patch": "@@ -148,3 +148,17 @@ fn issue_9575() {\n         _ => println!(\"Needs curlies\"),\n     };\n }\n+\n+#[allow(dead_code)]\n+fn issue_9725(r: Option<u32>) {\n+    match r {\n+        x => match x {\n+            Some(_) => {\n+                println!(\"Some\");\n+            },\n+            None => {\n+                println!(\"None\");\n+            },\n+        },\n+    };\n+}"}, {"sha": "e960d64ad2b03dcdbc90ea104535d9d9fa70a5cf", "filename": "tests/ui/match_single_binding.stderr", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/3b6bbf7d16dd8b42fadf8dcdbad4d4d872a3e88c/tests%2Fui%2Fmatch_single_binding.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3b6bbf7d16dd8b42fadf8dcdbad4d4d872a3e88c/tests%2Fui%2Fmatch_single_binding.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_single_binding.stderr?ref=3b6bbf7d16dd8b42fadf8dcdbad4d4d872a3e88c", "patch": "@@ -213,5 +213,30 @@ LL +         println!(\"Needs curlies\");\n LL ~     };\n    |\n \n-error: aborting due to 14 previous errors\n+error: this match could be written as a `let` statement\n+  --> $DIR/match_single_binding.rs:154:5\n+   |\n+LL | /     match r {\n+LL | |         x => match x {\n+LL | |             Some(_) => {\n+LL | |                 println!(\"Some\");\n+...  |\n+LL | |         },\n+LL | |     };\n+   | |_____^\n+   |\n+help: consider using a `let` statement\n+   |\n+LL ~     let x = r;\n+LL +     match x {\n+LL +         Some(_) => {\n+LL +             println!(\"Some\");\n+LL +         },\n+LL +         None => {\n+LL +             println!(\"None\");\n+LL +         },\n+LL ~     };\n+   |\n+\n+error: aborting due to 15 previous errors\n "}]}