{"sha": "eb804261dce7f13056566377148a41f460feed28", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViODA0MjYxZGNlN2YxMzA1NjU2NjM3NzE0OGE0MWY0NjBmZWVkMjg=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-02-19T10:46:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-19T10:46:00Z"}, "message": "Merge #3228\n\n3228: Use proper range for hover on macro arguments r=matklad a=edwin0cheng\n\nThis PR use `original_range` to remap the range of found syntax node in `hover` and thus it should return the proper text range now.\r\n\r\nfixed #3000 \r\nfixed #3135 \r\n\n\nCo-authored-by: Edwin Cheng <edwin0cheng@gmail.com>", "tree": {"sha": "0ed558c9654d41b66b7a80143d8fe378c29a567f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ed558c9654d41b66b7a80143d8fe378c29a567f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb804261dce7f13056566377148a41f460feed28", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeTRHoCRBK7hj4Ov3rIwAAdHIIAFTeVYAQOlVALWD8S9gFlwqD\nHpdrMTDqzzRd3EAmjBhfrljyHs0QjpY0Eo4XLjk5G6q9twDUlQPG+YIHevutFFCK\nGPMGHprPViP5rQMwArueIIaydc8W9ouJp/G285VumwFIrRLYVZ5XSBHTSGjweZfi\nq0TBfSwHL0N0U50PJuR1XP4oi/zqHJ9v0uyk6hl508kXAJmTFP1uLUcwSc/w+UFO\n8ObzUtH3iis1uYDE9GnXyakoOyLg5ruAPmwxU9lDmEIh6OwwqnsHhtC3f66KcpmD\nz6b1zfxvDWcsb/lH+2R5RfQMv+Y/DpLSwprvA4XJelyp7fMNM1/UL4FKI/qsa10=\n=fvDT\n-----END PGP SIGNATURE-----\n", "payload": "tree 0ed558c9654d41b66b7a80143d8fe378c29a567f\nparent d07f043ef1c99491cb172f3c3474b31c97501d7a\nparent b9d94d73a2682be4418cb5de4f77cbd8db7b6901\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1582109160 +0000\ncommitter GitHub <noreply@github.com> 1582109160 +0000\n\nMerge #3228\n\n3228: Use proper range for hover on macro arguments r=matklad a=edwin0cheng\n\nThis PR use `original_range` to remap the range of found syntax node in `hover` and thus it should return the proper text range now.\r\n\r\nfixed #3000 \r\nfixed #3135 \r\n\n\nCo-authored-by: Edwin Cheng <edwin0cheng@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb804261dce7f13056566377148a41f460feed28", "html_url": "https://github.com/rust-lang/rust/commit/eb804261dce7f13056566377148a41f460feed28", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb804261dce7f13056566377148a41f460feed28/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d07f043ef1c99491cb172f3c3474b31c97501d7a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d07f043ef1c99491cb172f3c3474b31c97501d7a", "html_url": "https://github.com/rust-lang/rust/commit/d07f043ef1c99491cb172f3c3474b31c97501d7a"}, {"sha": "b9d94d73a2682be4418cb5de4f77cbd8db7b6901", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9d94d73a2682be4418cb5de4f77cbd8db7b6901", "html_url": "https://github.com/rust-lang/rust/commit/b9d94d73a2682be4418cb5de4f77cbd8db7b6901"}], "stats": {"total": 26, "additions": 17, "deletions": 9}, "files": [{"sha": "6d4416c0bbc9e81a373ea96e099700ee223ed394", "filename": "crates/ra_ide/src/hover.rs", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/eb804261dce7f13056566377148a41f460feed28/crates%2Fra_ide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb804261dce7f13056566377148a41f460feed28/crates%2Fra_ide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fhover.rs?ref=eb804261dce7f13056566377148a41f460feed28", "patch": "@@ -13,7 +13,7 @@ use ra_syntax::{\n \n use crate::{\n     display::{macro_label, rust_code_markup, rust_code_markup_with_doc, ShortLabel},\n-    expand::descend_into_macros,\n+    expand::{descend_into_macros, original_range},\n     references::{classify_name, classify_name_ref, NameKind, NameKind::*},\n     FilePosition, FileRange, RangeInfo,\n };\n@@ -148,17 +148,18 @@ pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeIn\n     let mut res = HoverResult::new();\n \n     let mut sb = SourceBinder::new(db);\n-    if let Some((range, name_kind)) = match_ast! {\n+    if let Some((node, name_kind)) = match_ast! {\n         match (token.value.parent()) {\n             ast::NameRef(name_ref) => {\n-                classify_name_ref(&mut sb, token.with_value(&name_ref)).map(|d| (name_ref.syntax().text_range(), d.kind))\n+                classify_name_ref(&mut sb, token.with_value(&name_ref)).map(|d| (name_ref.syntax().clone(), d.kind))\n             },\n             ast::Name(name) => {\n-                classify_name(&mut sb, token.with_value(&name)).map(|d| (name.syntax().text_range(), d.kind))\n+                classify_name(&mut sb, token.with_value(&name)).map(|d| (name.syntax().clone(), d.kind))\n             },\n             _ => None,\n         }\n     } {\n+        let range = original_range(db, token.with_value(&node)).range;\n         res.extend(hover_text_from_name_kind(db, name_kind));\n \n         if !res.is_empty() {\n@@ -171,8 +172,7 @@ pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeIn\n         .ancestors()\n         .find(|n| ast::Expr::cast(n.clone()).is_some() || ast::Pat::cast(n.clone()).is_some())?;\n \n-    // The following logic will not work if token is coming from a macro\n-    let frange = FileRange { file_id: position.file_id, range: node.text_range() };\n+    let frange = original_range(db, token.with_value(&node));\n     res.extend(type_of(db, frange).map(rust_code_markup));\n     if res.is_empty() {\n         return None;\n@@ -220,6 +220,7 @@ mod tests {\n     use crate::mock_analysis::{\n         analysis_and_position, single_file_with_position, single_file_with_range,\n     };\n+    use ra_db::FileLoader;\n     use ra_syntax::TextRange;\n \n     fn trim_markup(s: &str) -> &str {\n@@ -230,7 +231,7 @@ mod tests {\n         s.map(trim_markup)\n     }\n \n-    fn check_hover_result(fixture: &str, expected: &[&str]) {\n+    fn check_hover_result(fixture: &str, expected: &[&str]) -> String {\n         let (analysis, position) = analysis_and_position(fixture);\n         let hover = analysis.hover(position).unwrap().unwrap();\n         let mut results = Vec::from(hover.info.results());\n@@ -243,6 +244,9 @@ mod tests {\n         }\n \n         assert_eq!(hover.info.len(), expected.len());\n+\n+        let content = analysis.db.file_text(position.file_id);\n+        content[hover.range].to_string()\n     }\n \n     #[test]\n@@ -711,7 +715,7 @@ fn func(foo: i32) { if true { <|>foo; }; }\n \n     #[test]\n     fn test_hover_through_macro() {\n-        check_hover_result(\n+        let hover_on = check_hover_result(\n             \"\n             //- /lib.rs\n             macro_rules! id {\n@@ -726,11 +730,13 @@ fn func(foo: i32) { if true { <|>foo; }; }\n             \",\n             &[\"fn foo()\"],\n         );\n+\n+        assert_eq!(hover_on, \"foo\")\n     }\n \n     #[test]\n     fn test_hover_through_expr_in_macro() {\n-        check_hover_result(\n+        let hover_on = check_hover_result(\n             \"\n             //- /lib.rs\n             macro_rules! id {\n@@ -742,6 +748,8 @@ fn func(foo: i32) { if true { <|>foo; }; }\n             \",\n             &[\"u32\"],\n         );\n+\n+        assert_eq!(hover_on, \"bar\")\n     }\n \n     #[test]"}]}