{"sha": "dc17f38e041e6bde95c6f6c5c6170dbb3917d51e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjMTdmMzhlMDQxZTZiZGU5NWM2ZjZjNWM2MTcwZGJiMzkxN2Q1MWU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-01-28T00:58:14Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-01-28T01:30:47Z"}, "message": "check_unsafety: more code reuse", "tree": {"sha": "6d40ae0915aa04f9a32db4697a7686496b53a9c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d40ae0915aa04f9a32db4697a7686496b53a9c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc17f38e041e6bde95c6f6c5c6170dbb3917d51e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc17f38e041e6bde95c6f6c5c6170dbb3917d51e", "html_url": "https://github.com/rust-lang/rust/commit/dc17f38e041e6bde95c6f6c5c6170dbb3917d51e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc17f38e041e6bde95c6f6c5c6170dbb3917d51e/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a79d08fa57e1c257d647c9848e35defcb379c07", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a79d08fa57e1c257d647c9848e35defcb379c07", "html_url": "https://github.com/rust-lang/rust/commit/8a79d08fa57e1c257d647c9848e35defcb379c07"}], "stats": {"total": 57, "additions": 18, "deletions": 39}, "files": [{"sha": "343488b2f9500f58fbff05c81c14da1a95d3cc01", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 18, "deletions": 39, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/dc17f38e041e6bde95c6f6c5c6170dbb3917d51e/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc17f38e041e6bde95c6f6c5c6170dbb3917d51e/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=dc17f38e041e6bde95c6f6c5c6170dbb3917d51e", "patch": "@@ -148,16 +148,10 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                 let cast_out = CastTy::from_ty(cast_ty).expect(\"bad output type for cast\");\n                 match (cast_in, cast_out) {\n                     (CastTy::Ptr(_), CastTy::Int(_)) | (CastTy::FnPtr, CastTy::Int(_)) => {\n-                        self.register_violations(\n-                            &[UnsafetyViolation {\n-                                source_info: self.source_info,\n-                                description: Symbol::intern(\"cast of pointer to int\"),\n-                                details: Symbol::intern(\n-                                    \"casting pointers to integers in constants\",\n-                                ),\n-                                kind: UnsafetyViolationKind::General,\n-                            }],\n-                            &[],\n+                        self.require_unsafe(\n+                            \"cast of pointer to int\",\n+                            \"casting pointers to integers in constants\",\n+                            UnsafetyViolationKind::General,\n                         );\n                     }\n                     _ => {}\n@@ -171,14 +165,10 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                 if self.const_context && self.tcx.features().const_compare_raw_pointers =>\n             {\n                 if let ty::RawPtr(_) | ty::FnPtr(..) = lhs.ty(self.body, self.tcx).kind {\n-                    self.register_violations(\n-                        &[UnsafetyViolation {\n-                            source_info: self.source_info,\n-                            description: Symbol::intern(\"pointer operation\"),\n-                            details: Symbol::intern(\"operations on pointers in constants\"),\n-                            kind: UnsafetyViolationKind::General,\n-                        }],\n-                        &[],\n+                    self.require_unsafe(\n+                        \"pointer operation\",\n+                        \"operations on pointers in constants\",\n+                        UnsafetyViolationKind::General,\n                     );\n                 }\n             }\n@@ -199,18 +189,12 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                         .as_ref()\n                         .assert_crate_local()\n                         .lint_root;\n-                    self.register_violations(\n-                        &[UnsafetyViolation {\n-                            source_info,\n-                            description: Symbol::intern(\"borrow of packed field\"),\n-                            details: Symbol::intern(\n-                                \"fields of packed structs might be misaligned: dereferencing a \\\n-                            misaligned pointer or even just creating a misaligned reference \\\n-                            is undefined behavior\",\n-                            ),\n-                            kind: UnsafetyViolationKind::BorrowPacked(lint_root),\n-                        }],\n-                        &[],\n+                    self.require_unsafe(\n+                        \"borrow of packed field\",\n+                        \"fields of packed structs might be misaligned: dereferencing a \\\n+                        misaligned pointer or even just creating a misaligned reference \\\n+                        is undefined behavior\",\n+                        UnsafetyViolationKind::BorrowPacked(lint_root),\n                     );\n                 }\n             }\n@@ -435,15 +419,10 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n                                         the field can be changed to invalid values\",\n                                     )\n                                 };\n-                                let source_info = self.source_info;\n-                                self.register_violations(\n-                                    &[UnsafetyViolation {\n-                                        source_info,\n-                                        description: Symbol::intern(description),\n-                                        details: Symbol::intern(details),\n-                                        kind: UnsafetyViolationKind::GeneralAndConstFn,\n-                                    }],\n-                                    &[],\n+                                self.require_unsafe(\n+                                    description,\n+                                    details,\n+                                    UnsafetyViolationKind::GeneralAndConstFn,\n                                 );\n                             }\n                         },"}]}