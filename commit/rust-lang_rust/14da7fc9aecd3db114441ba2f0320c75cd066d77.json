{"sha": "14da7fc9aecd3db114441ba2f0320c75cd066d77", "node_id": "C_kwDOAAsO6NoAKDE0ZGE3ZmM5YWVjZDNkYjExNDQ0MWJhMmYwMzIwYzc1Y2QwNjZkNzc", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2021-10-06T19:33:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-06T19:33:16Z"}, "message": "Rollup merge of #89245 - DeveloperC286:iter_mut_fields_to_private, r=joshtriplett\n\nrefactor: make VecDeque's IterMut fields module-private, not just crate-private\n\nMade the fields of VecDeque's IterMut private by creating a IterMut::new(...) function to create a new instance of IterMut and migrating usage to use IterMut::new(...).", "tree": {"sha": "32fdfc2a473e7f348e5445d5abd59212b3277b8f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/32fdfc2a473e7f348e5445d5abd59212b3277b8f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14da7fc9aecd3db114441ba2f0320c75cd066d77", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhXfn8CRBK7hj4Ov3rIwAAewUIAEUxh7rU43kpbVqyUJMD7AFf\ni0wfbd21KqcRQL3LRlYZRVFCPdHbQVc+K76+/cGmXr9gU2PlwOnF699QLwp2XRz2\nmp9Z4PNGo8qzaMyMynPmP5RLf2ETAhk9BDkGFUx0NuifRsbKKYO/7LxUE+cSYLRl\nrcshWAElGJAWs3nLDuvvknhAEjmB2nGRmuGqnYHu38iDJq8x7GIGLS4qK5Jj0SN2\noZz1kbjy+eVmV8tBWXSOlyhXmm98oCcLsSgemN8HutyhTOn1l6jOwrouRPFVGgqR\nh0Ag/oyNU1nhLoIH1MpK/Ctakqkf5OsAW/4URxqxBYEBHz4hcBz+TKm/mUaIWl8=\n=Sf0N\n-----END PGP SIGNATURE-----\n", "payload": "tree 32fdfc2a473e7f348e5445d5abd59212b3277b8f\nparent 91e3b5172ce53ff957b0955533f4b3cc39aebf56\nparent 5af61cb114e4af46e5c1c6c97b4556d5f007536f\nauthor Manish Goregaokar <manishsmail@gmail.com> 1633548796 -0700\ncommitter GitHub <noreply@github.com> 1633548796 -0700\n\nRollup merge of #89245 - DeveloperC286:iter_mut_fields_to_private, r=joshtriplett\n\nrefactor: make VecDeque's IterMut fields module-private, not just crate-private\n\nMade the fields of VecDeque's IterMut private by creating a IterMut::new(...) function to create a new instance of IterMut and migrating usage to use IterMut::new(...).\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14da7fc9aecd3db114441ba2f0320c75cd066d77", "html_url": "https://github.com/rust-lang/rust/commit/14da7fc9aecd3db114441ba2f0320c75cd066d77", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14da7fc9aecd3db114441ba2f0320c75cd066d77/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91e3b5172ce53ff957b0955533f4b3cc39aebf56", "url": "https://api.github.com/repos/rust-lang/rust/commits/91e3b5172ce53ff957b0955533f4b3cc39aebf56", "html_url": "https://github.com/rust-lang/rust/commit/91e3b5172ce53ff957b0955533f4b3cc39aebf56"}, {"sha": "5af61cb114e4af46e5c1c6c97b4556d5f007536f", "url": "https://api.github.com/repos/rust-lang/rust/commits/5af61cb114e4af46e5c1c6c97b4556d5f007536f", "html_url": "https://github.com/rust-lang/rust/commit/5af61cb114e4af46e5c1c6c97b4556d5f007536f"}], "stats": {"total": 37, "additions": 21, "deletions": 16}, "files": [{"sha": "31e6e3b06af5fdd1e7e27ee88b013db480d0283d", "filename": "library/alloc/src/collections/vec_deque/iter_mut.rs", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/14da7fc9aecd3db114441ba2f0320c75cd066d77/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fiter_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14da7fc9aecd3db114441ba2f0320c75cd066d77/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fiter_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fiter_mut.rs?ref=14da7fc9aecd3db114441ba2f0320c75cd066d77", "patch": "@@ -13,10 +13,21 @@ use super::{count, wrap_index, RingSlices};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct IterMut<'a, T: 'a> {\n     // Internal safety invariant: the entire slice is dereferencable.\n-    pub(crate) ring: *mut [T],\n-    pub(crate) tail: usize,\n-    pub(crate) head: usize,\n-    pub(crate) phantom: PhantomData<&'a mut [T]>,\n+    ring: *mut [T],\n+    tail: usize,\n+    head: usize,\n+    phantom: PhantomData<&'a mut [T]>,\n+}\n+\n+impl<'a, T> IterMut<'a, T> {\n+    pub(super) unsafe fn new(\n+        ring: *mut [T],\n+        tail: usize,\n+        head: usize,\n+        phantom: PhantomData<&'a mut [T]>,\n+    ) -> Self {\n+        IterMut { ring, tail, head, phantom }\n+    }\n }\n \n // SAFETY: we do nothing thread-local and there is no interior mutability,"}, {"sha": "e996784bbad284c6114ddb0c02eaf642ff854df2", "filename": "library/alloc/src/collections/vec_deque/mod.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/14da7fc9aecd3db114441ba2f0320c75cd066d77/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14da7fc9aecd3db114441ba2f0320c75cd066d77/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs?ref=14da7fc9aecd3db114441ba2f0320c75cd066d77", "patch": "@@ -1000,12 +1000,9 @@ impl<T, A: Allocator> VecDeque<T, A> {\n     pub fn iter_mut(&mut self) -> IterMut<'_, T> {\n         // SAFETY: The internal `IterMut` safety invariant is established because the\n         // `ring` we create is a dereferencable slice for lifetime '_.\n-        IterMut {\n-            tail: self.tail,\n-            head: self.head,\n-            ring: ptr::slice_from_raw_parts_mut(self.ptr(), self.cap()),\n-            phantom: PhantomData,\n-        }\n+        let ring = ptr::slice_from_raw_parts_mut(self.ptr(), self.cap());\n+\n+        unsafe { IterMut::new(ring, self.tail, self.head, PhantomData) }\n     }\n \n     /// Returns a pair of slices which contain, in order, the contents of the\n@@ -1192,12 +1189,9 @@ impl<T, A: Allocator> VecDeque<T, A> {\n \n         // SAFETY: The internal `IterMut` safety invariant is established because the\n         // `ring` we create is a dereferencable slice for lifetime '_.\n-        IterMut {\n-            tail,\n-            head,\n-            ring: ptr::slice_from_raw_parts_mut(self.ptr(), self.cap()),\n-            phantom: PhantomData,\n-        }\n+        let ring = ptr::slice_from_raw_parts_mut(self.ptr(), self.cap());\n+\n+        unsafe { IterMut::new(ring, tail, head, PhantomData) }\n     }\n \n     /// Creates a draining iterator that removes the specified range in the"}]}