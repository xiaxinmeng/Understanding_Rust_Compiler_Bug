{"sha": "12e4907728eeeb658c1a8d528dbacab9ad485d25", "node_id": "C_kwDOAAsO6NoAKDEyZTQ5MDc3MjhlZWViNjU4YzFhOGQ1MjhkYmFjYWI5YWQ0ODVkMjU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-12-22T23:28:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-22T23:28:54Z"}, "message": "Rollup merge of #92139 - dtolnay:backtrace, r=m-ou-se\n\nChange Backtrace::enabled atomic from SeqCst to Relaxed\n\nThis atomic is not synchronizing anything outside of its own value, so we don't need the `Acquire`/`Release` guarantee that all memory operations prior to the store are visible after the subsequent load, nor the `SeqCst` guarantee of all threads seeing all of the sequentially consistent operations in the same order.\n\nUsing `Relaxed` reduces the overhead of `Backtrace::capture()` in the case that backtraces are not enabled.\n\n## Benchmark\n\n```rust\n#![feature(backtrace)]\n\nuse std::backtrace::Backtrace;\nuse std::sync::atomic::{AtomicUsize, Ordering};\nuse std::thread;\nuse std::time::Instant;\n\nfn main() {\n    let begin = Instant::now();\n    let mut threads = Vec::new();\n    for _ in 0..64 {\n        threads.push(thread::spawn(|| {\n            for _ in 0..10_000_000 {\n                let _ = Backtrace::capture();\n                static LOL: AtomicUsize = AtomicUsize::new(0);\n                LOL.store(1, Ordering::Release);\n            }\n        }));\n    }\n    for thread in threads {\n        let _ = thread.join();\n    }\n    println!(\"{:?}\", begin.elapsed());\n}\n```\n\n**Before:**&ensp;6.73 seconds\n**After:**&ensp;5.18 seconds", "tree": {"sha": "6412060e2cb80e8c1e6a5d6dfe4526d067c12ebd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6412060e2cb80e8c1e6a5d6dfe4526d067c12ebd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12e4907728eeeb658c1a8d528dbacab9ad485d25", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhw7S2CRBK7hj4Ov3rIwAAeJIIAAliwjFkNHtTMz3nXJqxk2Gu\n/V4JIlt7ueQzOZtnuobMmxre4Xsx+5Xz3/QPruBENG5h5WNw+AuihknajS7kpC8e\ntP6EOqwov9KCjfu/Gn2PqESZgRhBIDWJCKt+XlNwLj6Uwd+5iDZ7RmkMkLq2UoMZ\nQLsJFhBopD1TnoyldD4HAjCmguJey1tAyk2h/X471tPmHntUOlzYyEha83Tjo1br\nP13y3zSjstXZf/9A9CqC8foHoUV6ap7eas+lNtPisRjkVVYzDeUdvPKvhlfw2ghG\nsUYyVWncxeVeSTTB98dLinqlWWG+1zsYvCXG4yiZIeDi9aoUfdazsDNeX7lv1Tk=\n=d3g/\n-----END PGP SIGNATURE-----\n", "payload": "tree 6412060e2cb80e8c1e6a5d6dfe4526d067c12ebd\nparent 554ad50fa24f88f5db83b8678b39410c51038ca7\nparent 984b10da169bff9bcc1fcf75984467f0f218108a\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1640215734 +0100\ncommitter GitHub <noreply@github.com> 1640215734 +0100\n\nRollup merge of #92139 - dtolnay:backtrace, r=m-ou-se\n\nChange Backtrace::enabled atomic from SeqCst to Relaxed\n\nThis atomic is not synchronizing anything outside of its own value, so we don't need the `Acquire`/`Release` guarantee that all memory operations prior to the store are visible after the subsequent load, nor the `SeqCst` guarantee of all threads seeing all of the sequentially consistent operations in the same order.\n\nUsing `Relaxed` reduces the overhead of `Backtrace::capture()` in the case that backtraces are not enabled.\n\n## Benchmark\n\n```rust\n#![feature(backtrace)]\n\nuse std::backtrace::Backtrace;\nuse std::sync::atomic::{AtomicUsize, Ordering};\nuse std::thread;\nuse std::time::Instant;\n\nfn main() {\n    let begin = Instant::now();\n    let mut threads = Vec::new();\n    for _ in 0..64 {\n        threads.push(thread::spawn(|| {\n            for _ in 0..10_000_000 {\n                let _ = Backtrace::capture();\n                static LOL: AtomicUsize = AtomicUsize::new(0);\n                LOL.store(1, Ordering::Release);\n            }\n        }));\n    }\n    for thread in threads {\n        let _ = thread.join();\n    }\n    println!(\"{:?}\", begin.elapsed());\n}\n```\n\n**Before:**&ensp;6.73 seconds\n**After:**&ensp;5.18 seconds\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12e4907728eeeb658c1a8d528dbacab9ad485d25", "html_url": "https://github.com/rust-lang/rust/commit/12e4907728eeeb658c1a8d528dbacab9ad485d25", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12e4907728eeeb658c1a8d528dbacab9ad485d25/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "554ad50fa24f88f5db83b8678b39410c51038ca7", "url": "https://api.github.com/repos/rust-lang/rust/commits/554ad50fa24f88f5db83b8678b39410c51038ca7", "html_url": "https://github.com/rust-lang/rust/commit/554ad50fa24f88f5db83b8678b39410c51038ca7"}, {"sha": "984b10da169bff9bcc1fcf75984467f0f218108a", "url": "https://api.github.com/repos/rust-lang/rust/commits/984b10da169bff9bcc1fcf75984467f0f218108a", "html_url": "https://github.com/rust-lang/rust/commit/984b10da169bff9bcc1fcf75984467f0f218108a"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "94e6070c0f794f70d5b11226c492e6315cbcc37b", "filename": "library/std/src/backtrace.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/12e4907728eeeb658c1a8d528dbacab9ad485d25/library%2Fstd%2Fsrc%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12e4907728eeeb658c1a8d528dbacab9ad485d25/library%2Fstd%2Fsrc%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fbacktrace.rs?ref=12e4907728eeeb658c1a8d528dbacab9ad485d25", "patch": "@@ -99,7 +99,7 @@ use crate::cell::UnsafeCell;\n use crate::env;\n use crate::ffi::c_void;\n use crate::fmt;\n-use crate::sync::atomic::{AtomicUsize, Ordering::SeqCst};\n+use crate::sync::atomic::{AtomicUsize, Ordering::Relaxed};\n use crate::sync::Once;\n use crate::sys_common::backtrace::{lock, output_filename};\n use crate::vec::Vec;\n@@ -256,7 +256,7 @@ impl Backtrace {\n         // backtrace captures speedy, because otherwise reading environment\n         // variables every time can be somewhat slow.\n         static ENABLED: AtomicUsize = AtomicUsize::new(0);\n-        match ENABLED.load(SeqCst) {\n+        match ENABLED.load(Relaxed) {\n             0 => {}\n             1 => return false,\n             _ => return true,\n@@ -268,7 +268,7 @@ impl Backtrace {\n                 Err(_) => false,\n             },\n         };\n-        ENABLED.store(enabled as usize + 1, SeqCst);\n+        ENABLED.store(enabled as usize + 1, Relaxed);\n         enabled\n     }\n "}]}