{"sha": "300b821d51969261469b61d1cf87eaab01e64284", "node_id": "C_kwDOAAsO6NoAKDMwMGI4MjFkNTE5NjkyNjE0NjliNjFkMWNmODdlYWFiMDFlNjQyODQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-20T20:35:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-20T20:35:58Z"}, "message": "Auto merge of #7838 - nhamovitz:trailing_zs_arr_wo_repr, r=Manishearth\n\nWarn on structs with a trailing zero-sized array but no `repr` attribute\n\nCloses #2868\n\nchangelog: Implement ``[`trailing_empty_array`]``, which warns if a struct is defined where the last field is a zero-sized array but there are no `repr` attributes. Zero-sized arrays aren't very useful in Rust itself, so such a struct is likely being created to pass to C code or in some other situation where control over memory layout matters. Either way, a `repr` attribute is needed.", "tree": {"sha": "a058c13d9660773c96d0e3aa65d8f59cdc8678b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a058c13d9660773c96d0e3aa65d8f59cdc8678b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/300b821d51969261469b61d1cf87eaab01e64284", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/300b821d51969261469b61d1cf87eaab01e64284", "html_url": "https://github.com/rust-lang/rust/commit/300b821d51969261469b61d1cf87eaab01e64284", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/300b821d51969261469b61d1cf87eaab01e64284/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f11905af15e5fc3037478128760be20da550bc7f", "url": "https://api.github.com/repos/rust-lang/rust/commits/f11905af15e5fc3037478128760be20da550bc7f", "html_url": "https://github.com/rust-lang/rust/commit/f11905af15e5fc3037478128760be20da550bc7f"}, {"sha": "0f9f591e30074bf5e31e4ca279280425685f33ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f9f591e30074bf5e31e4ca279280425685f33ff", "html_url": "https://github.com/rust-lang/rust/commit/0f9f591e30074bf5e31e4ca279280425685f33ff"}], "stats": {"total": 389, "additions": 389, "deletions": 0}, "files": [{"sha": "dacf552d606914b60eb1fdb8b9c967e3fb5bb552", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/300b821d51969261469b61d1cf87eaab01e64284/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/300b821d51969261469b61d1cf87eaab01e64284/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=300b821d51969261469b61d1cf87eaab01e64284", "patch": "@@ -3022,6 +3022,7 @@ Released 2018-09-13\n [`too_many_arguments`]: https://rust-lang.github.io/rust-clippy/master/index.html#too_many_arguments\n [`too_many_lines`]: https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines\n [`toplevel_ref_arg`]: https://rust-lang.github.io/rust-clippy/master/index.html#toplevel_ref_arg\n+[`trailing_empty_array`]: https://rust-lang.github.io/rust-clippy/master/index.html#trailing_empty_array\n [`trait_duplication_in_bounds`]: https://rust-lang.github.io/rust-clippy/master/index.html#trait_duplication_in_bounds\n [`transmute_bytes_to_str`]: https://rust-lang.github.io/rust-clippy/master/index.html#transmute_bytes_to_str\n [`transmute_float_to_int`]: https://rust-lang.github.io/rust-clippy/master/index.html#transmute_float_to_int"}, {"sha": "b1aa2aa930e894baf5849f7d37740e9d99e86a49", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/300b821d51969261469b61d1cf87eaab01e64284/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/300b821d51969261469b61d1cf87eaab01e64284/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=300b821d51969261469b61d1cf87eaab01e64284", "patch": "@@ -444,6 +444,7 @@ store.register_lints(&[\n     temporary_assignment::TEMPORARY_ASSIGNMENT,\n     to_digit_is_some::TO_DIGIT_IS_SOME,\n     to_string_in_display::TO_STRING_IN_DISPLAY,\n+    trailing_empty_array::TRAILING_EMPTY_ARRAY,\n     trait_bounds::TRAIT_DUPLICATION_IN_BOUNDS,\n     trait_bounds::TYPE_REPETITION_IN_BOUNDS,\n     transmute::CROSSPOINTER_TRANSMUTE,"}, {"sha": "1e54482a8dafdc7b5f73d3798f5fd5a04864cc2b", "filename": "clippy_lints/src/lib.register_nursery.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/300b821d51969261469b61d1cf87eaab01e64284/clippy_lints%2Fsrc%2Flib.register_nursery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/300b821d51969261469b61d1cf87eaab01e64284/clippy_lints%2Fsrc%2Flib.register_nursery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_nursery.rs?ref=300b821d51969261469b61d1cf87eaab01e64284", "patch": "@@ -25,6 +25,7 @@ store.register_group(true, \"clippy::nursery\", Some(\"clippy_nursery\"), vec![\n     LintId::of(regex::TRIVIAL_REGEX),\n     LintId::of(strings::STRING_LIT_AS_BYTES),\n     LintId::of(suspicious_operation_groupings::SUSPICIOUS_OPERATION_GROUPINGS),\n+    LintId::of(trailing_empty_array::TRAILING_EMPTY_ARRAY),\n     LintId::of(transmute::USELESS_TRANSMUTE),\n     LintId::of(use_self::USE_SELF),\n ])"}, {"sha": "58e4c061892d6797b663ef89819c232dc04e87c7", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/300b821d51969261469b61d1cf87eaab01e64284/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/300b821d51969261469b61d1cf87eaab01e64284/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=300b821d51969261469b61d1cf87eaab01e64284", "patch": "@@ -355,6 +355,7 @@ mod tabs_in_doc_comments;\n mod temporary_assignment;\n mod to_digit_is_some;\n mod to_string_in_display;\n+mod trailing_empty_array;\n mod trait_bounds;\n mod transmute;\n mod transmuting_null;\n@@ -777,6 +778,8 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(move || Box::new(undocumented_unsafe_blocks::UndocumentedUnsafeBlocks::default()));\n     store.register_late_pass(|| Box::new(match_str_case_mismatch::MatchStrCaseMismatch));\n     store.register_late_pass(move || Box::new(format_args::FormatArgs));\n+    store.register_late_pass(|| Box::new(trailing_empty_array::TrailingEmptyArray));\n+\n }\n \n #[rustfmt::skip]"}, {"sha": "c216a1f81ea547630840e7403bd0f8ebe4820204", "filename": "clippy_lints/src/trailing_empty_array.rs", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/300b821d51969261469b61d1cf87eaab01e64284/clippy_lints%2Fsrc%2Ftrailing_empty_array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/300b821d51969261469b61d1cf87eaab01e64284/clippy_lints%2Fsrc%2Ftrailing_empty_array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrailing_empty_array.rs?ref=300b821d51969261469b61d1cf87eaab01e64284", "patch": "@@ -0,0 +1,77 @@\n+use clippy_utils::diagnostics::span_lint_and_help;\n+use rustc_hir::{HirId, Item, ItemKind};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::ty::Const;\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::sym;\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Displays a warning when a struct with a trailing zero-sized array is declared without a `repr` attribute.\n+    ///\n+    /// ### Why is this bad?\n+    /// Zero-sized arrays aren't very useful in Rust itself, so such a struct is likely being created to pass to C code or in some other situation where control over memory layout matters (for example, in conjuction with manual allocation to make it easy to compute the offset of the array). Either way, `#[repr(C)]` (or another `repr` attribute) is needed.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// struct RarelyUseful {\n+    ///     some_field: u32,\n+    ///     last: [u32; 0],\n+    /// }\n+    /// ```\n+    ///\n+    /// Use instead:\n+    /// ```rust\n+    /// #[repr(C)]\n+    /// struct MoreOftenUseful {\n+    ///     some_field: usize,\n+    ///     last: [u32; 0],\n+    /// }\n+    /// ```\n+    pub TRAILING_EMPTY_ARRAY,\n+    nursery,\n+    \"struct with a trailing zero-sized array but without `#[repr(C)]` or another `repr` attribute\"\n+}\n+declare_lint_pass!(TrailingEmptyArray => [TRAILING_EMPTY_ARRAY]);\n+\n+impl<'tcx> LateLintPass<'tcx> for TrailingEmptyArray {\n+    fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'tcx>) {\n+        if is_struct_with_trailing_zero_sized_array(cx, item) && !has_repr_attr(cx, item.hir_id()) {\n+            span_lint_and_help(\n+                cx,\n+                TRAILING_EMPTY_ARRAY,\n+                item.span,\n+                \"trailing zero-sized array in a struct which is not marked with a `repr` attribute\",\n+                None,\n+                &format!(\n+                    \"consider annotating `{}` with `#[repr(C)]` or another `repr` attribute\",\n+                    cx.tcx.def_path_str(item.def_id.to_def_id())\n+                ),\n+            );\n+        }\n+    }\n+}\n+\n+fn is_struct_with_trailing_zero_sized_array(cx: &LateContext<'tcx>, item: &'tcx Item<'tcx>) -> bool {\n+    if_chain! {\n+        // First check if last field is an array\n+        if let ItemKind::Struct(data, _) = &item.kind;\n+        if let Some(last_field) = data.fields().last();\n+        if let rustc_hir::TyKind::Array(_, length) = last_field.ty.kind;\n+\n+        // Then check if that that array zero-sized\n+        let length_ldid = cx.tcx.hir().local_def_id(length.hir_id);\n+        let length = Const::from_anon_const(cx.tcx, length_ldid);\n+        let length = length.try_eval_usize(cx.tcx, cx.param_env);\n+        if let Some(length) = length;\n+        then {\n+            length == 0\n+        } else {\n+            false\n+        }\n+    }\n+}\n+\n+fn has_repr_attr(cx: &LateContext<'_>, hir_id: HirId) -> bool {\n+    cx.tcx.hir().attrs(hir_id).iter().any(|attr| attr.has_name(sym::repr))\n+}"}, {"sha": "501c9eb7651f8320b7e0d914de982b879ab382a3", "filename": "tests/ui/trailing_empty_array.rs", "status": "added", "additions": 186, "deletions": 0, "changes": 186, "blob_url": "https://github.com/rust-lang/rust/blob/300b821d51969261469b61d1cf87eaab01e64284/tests%2Fui%2Ftrailing_empty_array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/300b821d51969261469b61d1cf87eaab01e64284/tests%2Fui%2Ftrailing_empty_array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrailing_empty_array.rs?ref=300b821d51969261469b61d1cf87eaab01e64284", "patch": "@@ -0,0 +1,186 @@\n+#![warn(clippy::trailing_empty_array)]\n+#![feature(const_generics_defaults)]\n+\n+// Do lint:\n+\n+struct RarelyUseful {\n+    field: i32,\n+    last: [usize; 0],\n+}\n+\n+struct OnlyField {\n+    first_and_last: [usize; 0],\n+}\n+\n+struct GenericArrayType<T> {\n+    field: i32,\n+    last: [T; 0],\n+}\n+\n+#[must_use]\n+struct OnlyAnotherAttribute {\n+    field: i32,\n+    last: [usize; 0],\n+}\n+\n+#[derive(Debug)]\n+struct OnlyADeriveAttribute {\n+    field: i32,\n+    last: [usize; 0],\n+}\n+\n+const ZERO: usize = 0;\n+struct ZeroSizedWithConst {\n+    field: i32,\n+    last: [usize; ZERO],\n+}\n+\n+#[allow(clippy::eq_op)]\n+const fn compute_zero() -> usize {\n+    (4 + 6) - (2 * 5)\n+}\n+struct ZeroSizedWithConstFunction {\n+    field: i32,\n+    last: [usize; compute_zero()],\n+}\n+\n+const fn compute_zero_from_arg(x: usize) -> usize {\n+    x - 1\n+}\n+struct ZeroSizedWithConstFunction2 {\n+    field: i32,\n+    last: [usize; compute_zero_from_arg(1)],\n+}\n+\n+struct ZeroSizedArrayWrapper([usize; 0]);\n+\n+struct TupleStruct(i32, [usize; 0]);\n+\n+struct LotsOfFields {\n+    f1: u32,\n+    f2: u32,\n+    f3: u32,\n+    f4: u32,\n+    f5: u32,\n+    f6: u32,\n+    f7: u32,\n+    f8: u32,\n+    f9: u32,\n+    f10: u32,\n+    f11: u32,\n+    f12: u32,\n+    f13: u32,\n+    f14: u32,\n+    f15: u32,\n+    f16: u32,\n+    last: [usize; 0],\n+}\n+\n+// Don't lint\n+\n+#[repr(C)]\n+struct GoodReason {\n+    field: i32,\n+    last: [usize; 0],\n+}\n+\n+#[repr(C)]\n+struct OnlyFieldWithReprC {\n+    first_and_last: [usize; 0],\n+}\n+\n+struct NonZeroSizedArray {\n+    field: i32,\n+    last: [usize; 1],\n+}\n+\n+struct NotLastField {\n+    f1: u32,\n+    zero_sized: [usize; 0],\n+    last: i32,\n+}\n+\n+const ONE: usize = 1;\n+struct NonZeroSizedWithConst {\n+    field: i32,\n+    last: [usize; ONE],\n+}\n+\n+#[derive(Debug)]\n+#[repr(C)]\n+struct AlsoADeriveAttribute {\n+    field: i32,\n+    last: [usize; 0],\n+}\n+\n+#[must_use]\n+#[repr(C)]\n+struct AlsoAnotherAttribute {\n+    field: i32,\n+    last: [usize; 0],\n+}\n+\n+#[repr(packed)]\n+struct ReprPacked {\n+    field: i32,\n+    last: [usize; 0],\n+}\n+\n+#[repr(C, packed)]\n+struct ReprCPacked {\n+    field: i32,\n+    last: [usize; 0],\n+}\n+\n+#[repr(align(64))]\n+struct ReprAlign {\n+    field: i32,\n+    last: [usize; 0],\n+}\n+#[repr(C, align(64))]\n+struct ReprCAlign {\n+    field: i32,\n+    last: [usize; 0],\n+}\n+\n+// NOTE: because of https://doc.rust-lang.org/stable/reference/type-layout.html#primitive-representation-of-enums-with-fields and I'm not sure when in the compilation pipeline that would happen\n+#[repr(C)]\n+enum DontLintAnonymousStructsFromDesuraging {\n+    A(u32),\n+    B(f32, [u64; 0]),\n+    C { x: u32, y: [u64; 0] },\n+}\n+\n+#[repr(C)]\n+struct TupleStructReprC(i32, [usize; 0]);\n+\n+type NamedTuple = (i32, [usize; 0]);\n+\n+#[rustfmt::skip] // [rustfmt#4995](https://github.com/rust-lang/rustfmt/issues/4995)\n+struct ConstParamZeroDefault<const N: usize = 0> {\n+    field: i32,\n+    last: [usize; N],\n+}\n+\n+struct ConstParamNoDefault<const N: usize> {\n+    field: i32,\n+    last: [usize; N],\n+}\n+\n+#[rustfmt::skip] \n+struct ConstParamNonZeroDefault<const N: usize = 1> {\n+    field: i32,\n+    last: [usize; N],\n+}\n+\n+struct TwoGenericParams<T, const N: usize> {\n+    field: i32,\n+    last: [T; N],\n+}\n+\n+type A = ConstParamZeroDefault;\n+type B = ConstParamZeroDefault<0>;\n+type C = ConstParamNoDefault<0>;\n+type D = ConstParamNonZeroDefault<0>;\n+\n+fn main() {}"}, {"sha": "d88aa0504b537b39f2176d4346a261aa0be1e9f4", "filename": "tests/ui/trailing_empty_array.stderr", "status": "added", "additions": 120, "deletions": 0, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/300b821d51969261469b61d1cf87eaab01e64284/tests%2Fui%2Ftrailing_empty_array.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/300b821d51969261469b61d1cf87eaab01e64284/tests%2Fui%2Ftrailing_empty_array.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrailing_empty_array.stderr?ref=300b821d51969261469b61d1cf87eaab01e64284", "patch": "@@ -0,0 +1,120 @@\n+error: trailing zero-sized array in a struct which is not marked with a `repr` attribute\n+  --> $DIR/trailing_empty_array.rs:6:1\n+   |\n+LL | / struct RarelyUseful {\n+LL | |     field: i32,\n+LL | |     last: [usize; 0],\n+LL | | }\n+   | |_^\n+   |\n+   = note: `-D clippy::trailing-empty-array` implied by `-D warnings`\n+   = help: consider annotating `RarelyUseful` with `#[repr(C)]` or another `repr` attribute\n+\n+error: trailing zero-sized array in a struct which is not marked with a `repr` attribute\n+  --> $DIR/trailing_empty_array.rs:11:1\n+   |\n+LL | / struct OnlyField {\n+LL | |     first_and_last: [usize; 0],\n+LL | | }\n+   | |_^\n+   |\n+   = help: consider annotating `OnlyField` with `#[repr(C)]` or another `repr` attribute\n+\n+error: trailing zero-sized array in a struct which is not marked with a `repr` attribute\n+  --> $DIR/trailing_empty_array.rs:15:1\n+   |\n+LL | / struct GenericArrayType<T> {\n+LL | |     field: i32,\n+LL | |     last: [T; 0],\n+LL | | }\n+   | |_^\n+   |\n+   = help: consider annotating `GenericArrayType` with `#[repr(C)]` or another `repr` attribute\n+\n+error: trailing zero-sized array in a struct which is not marked with a `repr` attribute\n+  --> $DIR/trailing_empty_array.rs:21:1\n+   |\n+LL | / struct OnlyAnotherAttribute {\n+LL | |     field: i32,\n+LL | |     last: [usize; 0],\n+LL | | }\n+   | |_^\n+   |\n+   = help: consider annotating `OnlyAnotherAttribute` with `#[repr(C)]` or another `repr` attribute\n+\n+error: trailing zero-sized array in a struct which is not marked with a `repr` attribute\n+  --> $DIR/trailing_empty_array.rs:27:1\n+   |\n+LL | / struct OnlyADeriveAttribute {\n+LL | |     field: i32,\n+LL | |     last: [usize; 0],\n+LL | | }\n+   | |_^\n+   |\n+   = help: consider annotating `OnlyADeriveAttribute` with `#[repr(C)]` or another `repr` attribute\n+\n+error: trailing zero-sized array in a struct which is not marked with a `repr` attribute\n+  --> $DIR/trailing_empty_array.rs:33:1\n+   |\n+LL | / struct ZeroSizedWithConst {\n+LL | |     field: i32,\n+LL | |     last: [usize; ZERO],\n+LL | | }\n+   | |_^\n+   |\n+   = help: consider annotating `ZeroSizedWithConst` with `#[repr(C)]` or another `repr` attribute\n+\n+error: trailing zero-sized array in a struct which is not marked with a `repr` attribute\n+  --> $DIR/trailing_empty_array.rs:42:1\n+   |\n+LL | / struct ZeroSizedWithConstFunction {\n+LL | |     field: i32,\n+LL | |     last: [usize; compute_zero()],\n+LL | | }\n+   | |_^\n+   |\n+   = help: consider annotating `ZeroSizedWithConstFunction` with `#[repr(C)]` or another `repr` attribute\n+\n+error: trailing zero-sized array in a struct which is not marked with a `repr` attribute\n+  --> $DIR/trailing_empty_array.rs:50:1\n+   |\n+LL | / struct ZeroSizedWithConstFunction2 {\n+LL | |     field: i32,\n+LL | |     last: [usize; compute_zero_from_arg(1)],\n+LL | | }\n+   | |_^\n+   |\n+   = help: consider annotating `ZeroSizedWithConstFunction2` with `#[repr(C)]` or another `repr` attribute\n+\n+error: trailing zero-sized array in a struct which is not marked with a `repr` attribute\n+  --> $DIR/trailing_empty_array.rs:55:1\n+   |\n+LL | struct ZeroSizedArrayWrapper([usize; 0]);\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider annotating `ZeroSizedArrayWrapper` with `#[repr(C)]` or another `repr` attribute\n+\n+error: trailing zero-sized array in a struct which is not marked with a `repr` attribute\n+  --> $DIR/trailing_empty_array.rs:57:1\n+   |\n+LL | struct TupleStruct(i32, [usize; 0]);\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider annotating `TupleStruct` with `#[repr(C)]` or another `repr` attribute\n+\n+error: trailing zero-sized array in a struct which is not marked with a `repr` attribute\n+  --> $DIR/trailing_empty_array.rs:59:1\n+   |\n+LL | / struct LotsOfFields {\n+LL | |     f1: u32,\n+LL | |     f2: u32,\n+LL | |     f3: u32,\n+...  |\n+LL | |     last: [usize; 0],\n+LL | | }\n+   | |_^\n+   |\n+   = help: consider annotating `LotsOfFields` with `#[repr(C)]` or another `repr` attribute\n+\n+error: aborting due to 11 previous errors\n+"}]}