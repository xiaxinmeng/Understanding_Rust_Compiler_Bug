{"sha": "8782d0fe78762db6c8cf750cc9707ede94026832", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3ODJkMGZlNzg3NjJkYjZjOGNmNzUwY2M5NzA3ZWRlOTQwMjY4MzI=", "commit": {"author": {"name": "sinkuu", "email": "sinkuu@sinkuu.xyz", "date": "2017-10-06T14:57:00Z"}, "committer": {"name": "sinkuu", "email": "sinkuu@sinkuu.xyz", "date": "2017-10-06T15:02:54Z"}, "message": "Better error for missing tuple pattern in args (#44150)", "tree": {"sha": "aef70c8eb7447247c4fc9fbb6dce63f44c066544", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aef70c8eb7447247c4fc9fbb6dce63f44c066544"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8782d0fe78762db6c8cf750cc9707ede94026832", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8782d0fe78762db6c8cf750cc9707ede94026832", "html_url": "https://github.com/rust-lang/rust/commit/8782d0fe78762db6c8cf750cc9707ede94026832", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8782d0fe78762db6c8cf750cc9707ede94026832/comments", "author": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ed8b698421291f5057059da885cd670d76a47e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ed8b698421291f5057059da885cd670d76a47e9", "html_url": "https://github.com/rust-lang/rust/commit/3ed8b698421291f5057059da885cd670d76a47e9"}], "stats": {"total": 114, "additions": 87, "deletions": 27}, "files": [{"sha": "372f05647261feb655f05eca2dedc43706708396", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 72, "deletions": 22, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/8782d0fe78762db6c8cf750cc9707ede94026832/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8782d0fe78762db6c8cf750cc9707ede94026832/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=8782d0fe78762db6c8cf750cc9707ede94026832", "patch": "@@ -718,7 +718,9 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                     return;\n                 }\n                 let expected_trait_ty = expected_trait_ref.self_ty();\n-                let found_span = expected_trait_ty.ty_to_def_id().and_then(|did| {\n+\n+                let found_did = expected_trait_ty.ty_to_def_id();\n+                let found_span = found_did.and_then(|did| {\n                     self.tcx.hir.span_if_local(did)\n                 });\n \n@@ -727,23 +729,57 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                         ty::TyTuple(ref tys, _) => tys.len(),\n                         _ => 1,\n                     };\n-                let arg_ty_count =\n+                let (arg_tys, arg_ty_count) =\n                     match actual_trait_ref.skip_binder().substs.type_at(1).sty {\n-                        ty::TyTuple(ref tys, _) => tys.len(),\n-                        _ => 1,\n+                        ty::TyTuple(ref tys, _) =>\n+                            (tys.iter().map(|t| &t.sty).collect(), tys.len()),\n+                        ref sty => (vec![sty], 1),\n                     };\n                 if self_ty_count == arg_ty_count {\n                     self.report_closure_arg_mismatch(span,\n                                                      found_span,\n                                                      expected_trait_ref,\n                                                      actual_trait_ref)\n                 } else {\n-                    // Expected `|| { }`, found `|x, y| { }`\n-                    // Expected `fn(x) -> ()`, found `|| { }`\n+                    let arg_tuple = if arg_ty_count == 1 {\n+                        arg_tys.first().and_then(|t| {\n+                            if let &&ty::TyTuple(ref tuptys, _) = t {\n+                                Some(tuptys.len())\n+                            } else {\n+                                None\n+                            }\n+                        })\n+                    } else {\n+                        None\n+                    };\n+\n+                    // FIXME(#44150): Expand this to \"N args expected bug a N-tuple found\".\n+                    // Type of the 1st expected argument is somehow provided as type of a\n+                    // found one in that case.\n+                    //\n+                    // ```\n+                    // [1i32, 2, 3].sort_by(|(a, b)| ..)\n+                    // //                   ^^^^^^^^\n+                    // //   actual_trait_ref:  std::ops::FnMut<(&i32, &i32)>\n+                    // // expected_trait_ref:  std::ops::FnMut<(&i32,)>\n+                    // ```\n+\n+                    let closure_args_span = found_did.and_then(|did| self.tcx.hir.get_if_local(did))\n+                        .and_then(|node| {\n+                            if let hir::map::NodeExpr(\n+                                &hir::Expr { node: hir::ExprClosure(_, _, _, span, _), .. }) = node\n+                            {\n+                                Some(span)\n+                            } else {\n+                                None\n+                            }\n+                        });\n+\n                     self.report_arg_count_mismatch(\n                         span,\n-                        found_span,\n+                        closure_args_span.or(found_span),\n                         arg_ty_count,\n+                        arg_tuple,\n                         self_ty_count,\n                         expected_trait_ty.is_closure()\n                     )\n@@ -771,28 +807,42 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                                  span: Span,\n                                  found_span: Option<Span>,\n                                  expected: usize,\n+                                 expected_tuple: Option<usize>,\n                                  found: usize,\n                                  is_closure: bool)\n         -> DiagnosticBuilder<'tcx>\n     {\n+        let kind = if is_closure { \"closure\" } else { \"function\" };\n+\n+        let tuple_or_args = |tuple, args|  if let Some(n) = tuple {\n+            format!(\"a {}-tuple\", n)\n+        } else {\n+            format!(\n+                \"{} argument{}\",\n+                args,\n+                if args == 1 { \"\" } else { \"s\" }\n+            )\n+        };\n+\n+        let found_str = tuple_or_args(None, found);\n+        let expected_str = tuple_or_args(expected_tuple, expected);\n+\n         let mut err = struct_span_err!(self.tcx.sess, span, E0593,\n-            \"{} takes {} argument{} but {} argument{} {} required\",\n-            if is_closure { \"closure\" } else { \"function\" },\n-            found,\n-            if found == 1 { \"\" } else { \"s\" },\n-            expected,\n-            if expected == 1 { \"\" } else { \"s\" },\n-            if expected == 1 { \"is\" } else { \"are\" });\n-\n-        err.span_label(span, format!(\"expected {} that takes {} argument{}\",\n-                                      if is_closure { \"closure\" } else { \"function\" },\n-                                      expected,\n-                                      if expected == 1 { \"\" } else { \"s\" }));\n+            \"{} takes {} but {} {} required\",\n+            kind,\n+            found_str,\n+            expected_str,\n+            if expected_tuple.is_some() || expected == 1 { \"is\" } else { \"are\" });\n+\n+        err.span_label(\n+            span,\n+            format!(\"expected {} that takes {}\", kind, expected_str)\n+        );\n+\n         if let Some(span) = found_span {\n-            err.span_label(span, format!(\"takes {} argument{}\",\n-                                          found,\n-                                          if found == 1 { \"\" } else { \"s\" }));\n+            err.span_label(span, format!(\"takes {}\", found_str));\n         }\n+\n         err\n     }\n "}, {"sha": "a2a31d44a499f11b4c23c3de4db5d37232351f0a", "filename": "src/test/ui/mismatched_types/closure-arg-count.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8782d0fe78762db6c8cf750cc9707ede94026832/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8782d0fe78762db6c8cf750cc9707ede94026832/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.rs?ref=8782d0fe78762db6c8cf750cc9707ede94026832", "patch": "@@ -16,4 +16,6 @@ fn main() {\n     [1, 2, 3].sort_by(|tuple| panic!());\n     [1, 2, 3].sort_by(|(tuple, tuple2)| panic!());\n     f(|| panic!());\n+\n+    let _it = vec![1, 2, 3].into_iter().enumerate().map(|i, x| i);\n }"}, {"sha": "e59a585149b897790bc1b15af86ff461442335eb", "filename": "src/test/ui/mismatched_types/closure-arg-count.stderr", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8782d0fe78762db6c8cf750cc9707ede94026832/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8782d0fe78762db6c8cf750cc9707ede94026832/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr?ref=8782d0fe78762db6c8cf750cc9707ede94026832", "patch": "@@ -2,15 +2,15 @@ error[E0593]: closure takes 0 arguments but 2 arguments are required\n   --> $DIR/closure-arg-count.rs:15:15\n    |\n 15 |     [1, 2, 3].sort_by(|| panic!());\n-   |               ^^^^^^^ ----------- takes 0 arguments\n+   |               ^^^^^^^ -- takes 0 arguments\n    |               |\n    |               expected closure that takes 2 arguments\n \n error[E0593]: closure takes 1 argument but 2 arguments are required\n   --> $DIR/closure-arg-count.rs:16:15\n    |\n 16 |     [1, 2, 3].sort_by(|tuple| panic!());\n-   |               ^^^^^^^ ---------------- takes 1 argument\n+   |               ^^^^^^^ ------- takes 1 argument\n    |               |\n    |               expected closure that takes 2 arguments\n \n@@ -27,19 +27,27 @@ error[E0593]: closure takes 1 argument but 2 arguments are required\n   --> $DIR/closure-arg-count.rs:17:15\n    |\n 17 |     [1, 2, 3].sort_by(|(tuple, tuple2)| panic!());\n-   |               ^^^^^^^ -------------------------- takes 1 argument\n+   |               ^^^^^^^ ----------------- takes 1 argument\n    |               |\n    |               expected closure that takes 2 arguments\n \n error[E0593]: closure takes 0 arguments but 1 argument is required\n   --> $DIR/closure-arg-count.rs:18:5\n    |\n 18 |     f(|| panic!());\n-   |     ^ ----------- takes 0 arguments\n+   |     ^ -- takes 0 arguments\n    |     |\n    |     expected closure that takes 1 argument\n    |\n    = note: required by `f`\n \n-error: aborting due to 5 previous errors\n+error[E0593]: closure takes 2 arguments but a 2-tuple is required\n+  --> $DIR/closure-arg-count.rs:20:53\n+   |\n+20 |     let _it = vec![1, 2, 3].into_iter().enumerate().map(|i, x| i);\n+   |                                                     ^^^ ------ takes 2 arguments\n+   |                                                     |\n+   |                                                     expected closure that takes a 2-tuple\n+\n+error: aborting due to 6 previous errors\n "}]}