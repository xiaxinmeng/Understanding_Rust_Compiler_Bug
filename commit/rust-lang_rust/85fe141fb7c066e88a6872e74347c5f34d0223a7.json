{"sha": "85fe141fb7c066e88a6872e74347c5f34d0223a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1ZmUxNDFmYjdjMDY2ZTg4YTY4NzJlNzQzNDdjNWYzNGQwMjIzYTc=", "commit": {"author": {"name": "Chase Southwood", "email": "chase.southwood@gmail.com", "date": "2014-12-12T07:02:19Z"}, "committer": {"name": "Chase Southwood", "email": "chase.southwood@gmail.com", "date": "2014-12-16T01:28:45Z"}, "message": "Use wrapper structs for `HashMap`'s iterators.\n\nUsing a type alias for iterator implementations is fragile since this\nexposes the implementation to users of the iterator, and any changes\ncould break existing code.\n\nThis commit changes the keys and values iterators of `HashMap` to use\nproper new types, rather than type aliases.  However, since it is\nfair-game to treat a type-alias as the aliased type, this is a:\n\n[breaking-change].", "tree": {"sha": "39da1b2599e4ee0000a28aa7b26ce3b5964f6996", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/39da1b2599e4ee0000a28aa7b26ce3b5964f6996"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/85fe141fb7c066e88a6872e74347c5f34d0223a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/85fe141fb7c066e88a6872e74347c5f34d0223a7", "html_url": "https://github.com/rust-lang/rust/commit/85fe141fb7c066e88a6872e74347c5f34d0223a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/85fe141fb7c066e88a6872e74347c5f34d0223a7/comments", "author": {"login": "csouth3", "id": 6758080, "node_id": "MDQ6VXNlcjY3NTgwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/6758080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csouth3", "html_url": "https://github.com/csouth3", "followers_url": "https://api.github.com/users/csouth3/followers", "following_url": "https://api.github.com/users/csouth3/following{/other_user}", "gists_url": "https://api.github.com/users/csouth3/gists{/gist_id}", "starred_url": "https://api.github.com/users/csouth3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csouth3/subscriptions", "organizations_url": "https://api.github.com/users/csouth3/orgs", "repos_url": "https://api.github.com/users/csouth3/repos", "events_url": "https://api.github.com/users/csouth3/events{/privacy}", "received_events_url": "https://api.github.com/users/csouth3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "csouth3", "id": 6758080, "node_id": "MDQ6VXNlcjY3NTgwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/6758080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csouth3", "html_url": "https://github.com/csouth3", "followers_url": "https://api.github.com/users/csouth3/followers", "following_url": "https://api.github.com/users/csouth3/following{/other_user}", "gists_url": "https://api.github.com/users/csouth3/gists{/gist_id}", "starred_url": "https://api.github.com/users/csouth3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csouth3/subscriptions", "organizations_url": "https://api.github.com/users/csouth3/orgs", "repos_url": "https://api.github.com/users/csouth3/repos", "events_url": "https://api.github.com/users/csouth3/events{/privacy}", "received_events_url": "https://api.github.com/users/csouth3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a81c3ab468ad7aebcab8a545b196e74c2fb3ac32", "url": "https://api.github.com/repos/rust-lang/rust/commits/a81c3ab468ad7aebcab8a545b196e74c2fb3ac32", "html_url": "https://github.com/rust-lang/rust/commit/a81c3ab468ad7aebcab8a545b196e74c2fb3ac32"}], "stats": {"total": 69, "additions": 31, "deletions": 38}, "files": [{"sha": "d22e7b2f764f50262a9fceee9487ea1221737778", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 29, "deletions": 35, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/85fe141fb7c066e88a6872e74347c5f34d0223a7/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fe141fb7c066e88a6872e74347c5f34d0223a7/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=85fe141fb7c066e88a6872e74347c5f34d0223a7", "patch": "@@ -20,7 +20,7 @@ use cmp::{max, Eq, Equiv, PartialEq};\n use default::Default;\n use fmt::{mod, Show};\n use hash::{Hash, Hasher, RandomSipHasher};\n-use iter::{mod, Iterator, IteratorExt, FromIterator, Extend};\n+use iter::{mod, Iterator, IteratorExt, FromIterator, Extend, Map};\n use kinds::Sized;\n use mem::{mod, replace};\n use num::{Int, UnsignedInt};\n@@ -859,7 +859,7 @@ impl<K: Eq + Hash<S>, V, S, H: Hasher<S>> HashMap<K, V, H> {\n     pub fn keys(&self) -> Keys<K, V> {\n         fn first<A, B>((a, _): (A, B)) -> A { a }\n \n-        self.iter().map(first)\n+        Keys { inner: self.iter().map(first) }\n     }\n \n     /// An iterator visiting all values in arbitrary order.\n@@ -883,7 +883,7 @@ impl<K: Eq + Hash<S>, V, S, H: Hasher<S>> HashMap<K, V, H> {\n     pub fn values(&self) -> Values<K, V> {\n         fn second<A, B>((_, b): (A, B)) -> B { b }\n \n-        self.iter().map(second)\n+        Values { inner: self.iter().map(second) }\n     }\n \n     /// An iterator visiting all key-value pairs in arbitrary order.\n@@ -1335,6 +1335,16 @@ pub struct MoveEntries<K, V> {\n     >\n }\n \n+/// HashMap keys iterator\n+pub struct Keys<'a, K: 'a, V: 'a> {\n+    inner: Map<(&'a K, &'a V), &'a K, Entries<'a, K, V>, fn((&'a K, &'a V)) -> &'a K>\n+}\n+\n+/// HashMap values iterator\n+pub struct Values<'a, K: 'a, V: 'a> {\n+    inner: Map<(&'a K, &'a V), &'a V, Entries<'a, K, V>, fn((&'a K, &'a V)) -> &'a V>\n+}\n+\n /// A view into a single occupied location in a HashMap\n pub struct OccupiedEntry<'a, K:'a, V:'a> {\n     elem: FullBucket<K, V, &'a mut RawTable<K, V>>,\n@@ -1365,36 +1375,28 @@ enum VacantEntryState<K, V, M> {\n }\n \n impl<'a, K, V> Iterator<(&'a K, &'a V)> for Entries<'a, K, V> {\n-    #[inline]\n-    fn next(&mut self) -> Option<(&'a K, &'a V)> {\n-        self.inner.next()\n-    }\n-    #[inline]\n-    fn size_hint(&self) -> (uint, Option<uint>) {\n-        self.inner.size_hint()\n-    }\n+    #[inline] fn next(&mut self) -> Option<(&'a K, &'a V)> { self.inner.next() }\n+    #[inline] fn size_hint(&self) -> (uint, Option<uint>) { self.inner.size_hint() }\n }\n \n impl<'a, K, V> Iterator<(&'a K, &'a mut V)> for MutEntries<'a, K, V> {\n-    #[inline]\n-    fn next(&mut self) -> Option<(&'a K, &'a mut V)> {\n-        self.inner.next()\n-    }\n-    #[inline]\n-    fn size_hint(&self) -> (uint, Option<uint>) {\n-        self.inner.size_hint()\n-    }\n+    #[inline] fn next(&mut self) -> Option<(&'a K, &'a mut V)> { self.inner.next() }\n+    #[inline] fn size_hint(&self) -> (uint, Option<uint>) { self.inner.size_hint() }\n }\n \n impl<K, V> Iterator<(K, V)> for MoveEntries<K, V> {\n-    #[inline]\n-    fn next(&mut self) -> Option<(K, V)> {\n-        self.inner.next()\n-    }\n-    #[inline]\n-    fn size_hint(&self) -> (uint, Option<uint>) {\n-        self.inner.size_hint()\n-    }\n+    #[inline] fn next(&mut self) -> Option<(K, V)> { self.inner.next() }\n+    #[inline] fn size_hint(&self) -> (uint, Option<uint>) { self.inner.size_hint() }\n+}\n+\n+impl<'a, K, V> Iterator<&'a K> for Keys<'a, K, V> {\n+    #[inline] fn next(&mut self) -> Option<(&'a K)> { self.inner.next() }\n+    #[inline] fn size_hint(&self) -> (uint, Option<uint>) { self.inner.size_hint() }\n+}\n+\n+impl<'a, K, V> Iterator<&'a V> for Values<'a, K, V> {\n+    #[inline] fn next(&mut self) -> Option<(&'a V)> { self.inner.next() }\n+    #[inline] fn size_hint(&self) -> (uint, Option<uint>) { self.inner.size_hint() }\n }\n \n impl<'a, K, V> OccupiedEntry<'a, K, V> {\n@@ -1448,14 +1450,6 @@ impl<'a, K, V> VacantEntry<'a, K, V> {\n     }\n }\n \n-/// HashMap keys iterator\n-pub type Keys<'a, K, V> =\n-    iter::Map<(&'a K, &'a V), &'a K, Entries<'a, K, V>, fn((&'a K, &'a V)) -> &'a K>;\n-\n-/// HashMap values iterator\n-pub type Values<'a, K, V> =\n-    iter::Map<(&'a K, &'a V), &'a V, Entries<'a, K, V>, fn((&'a K, &'a V)) -> &'a V>;\n-\n impl<K: Eq + Hash<S>, V, S, H: Hasher<S> + Default> FromIterator<(K, V)> for HashMap<K, V, H> {\n     fn from_iter<T: Iterator<(K, V)>>(iter: T) -> HashMap<K, V, H> {\n         let (lower, _) = iter.size_hint();"}, {"sha": "3993a23140b45ad230a6ad4ae616f00a6937c6ac", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/85fe141fb7c066e88a6872e74347c5f34d0223a7/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fe141fb7c066e88a6872e74347c5f34d0223a7/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=85fe141fb7c066e88a6872e74347c5f34d0223a7", "patch": "@@ -22,7 +22,7 @@ use iter;\n use option::Option::{Some, None, mod};\n use result::Result::{Ok, Err};\n \n-use super::map::{HashMap, Entries, MoveEntries, INITIAL_CAPACITY};\n+use super::map::{HashMap, MoveEntries, Keys, INITIAL_CAPACITY};\n \n // FIXME(conventions): implement BitOr, BitAnd, BitXor, and Sub\n \n@@ -617,8 +617,7 @@ impl<T: Eq + Hash<S>, S, H: Hasher<S> + Default> Default for HashSet<T, H> {\n }\n \n /// HashSet iterator\n-pub type SetItems<'a, K> =\n-    iter::Map<(&'a K, &'a ()), &'a K, Entries<'a, K, ()>, fn((&'a K, &'a ())) -> &'a K>;\n+pub type SetItems<'a, K> = Keys<'a, K, ()>;\n \n /// HashSet move iterator\n pub type SetMoveItems<K> = iter::Map<(K, ()), K, MoveEntries<K, ()>, fn((K, ())) -> K>;"}]}