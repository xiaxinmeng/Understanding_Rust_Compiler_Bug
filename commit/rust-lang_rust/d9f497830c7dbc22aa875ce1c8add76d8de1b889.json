{"sha": "d9f497830c7dbc22aa875ce1c8add76d8de1b889", "node_id": "C_kwDOAAsO6NoAKGQ5ZjQ5NzgzMGM3ZGJjMjJhYTg3NWNlMWM4YWRkNzZkOGRlMWI4ODk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-30T22:05:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-30T22:05:13Z"}, "message": "Auto merge of #8899 - botahamec:use-self-tuple-struct-variants, r=Alexendoo\n\nFix `[use_self]` false negative with on struct and tuple struct patterns\n\nfixes #8845\n\nchangelog: Triggered the warning for ``[`use_self`]`` on `TupleStruct` and `Struct` patterns, whereas currently it's only triggered for `Path` patterns", "tree": {"sha": "6b352ca7c42e3ad4a9cbf12a0412a84211cd792e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b352ca7c42e3ad4a9cbf12a0412a84211cd792e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9f497830c7dbc22aa875ce1c8add76d8de1b889", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9f497830c7dbc22aa875ce1c8add76d8de1b889", "html_url": "https://github.com/rust-lang/rust/commit/d9f497830c7dbc22aa875ce1c8add76d8de1b889", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9f497830c7dbc22aa875ce1c8add76d8de1b889/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39231b4b503955626c1ccf965b8328ac67c523bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/39231b4b503955626c1ccf965b8328ac67c523bb", "html_url": "https://github.com/rust-lang/rust/commit/39231b4b503955626c1ccf965b8328ac67c523bb"}, {"sha": "2aa45693039c2a5c235125e065c68c5e155fbaf1", "url": "https://api.github.com/repos/rust-lang/rust/commits/2aa45693039c2a5c235125e065c68c5e155fbaf1", "html_url": "https://github.com/rust-lang/rust/commit/2aa45693039c2a5c235125e065c68c5e155fbaf1"}], "stats": {"total": 212, "additions": 206, "deletions": 6}, "files": [{"sha": "486ea5e5ccfa90c54386b6e7da4971136f9717fd", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d9f497830c7dbc22aa875ce1c8add76d8de1b889/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9f497830c7dbc22aa875ce1c8add76d8de1b889/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=d9f497830c7dbc22aa875ce1c8add76d8de1b889", "patch": "@@ -258,13 +258,21 @@ impl<'tcx> LateLintPass<'tcx> for UseSelf {\n             if !pat.span.from_expansion();\n             if meets_msrv(self.msrv, msrvs::TYPE_ALIAS_ENUM_VARIANTS);\n             if let Some(&StackItem::Check { impl_id, .. }) = self.stack.last();\n-            if let PatKind::Path(QPath::Resolved(_, path)) = pat.kind;\n-            if !matches!(path.res, Res::SelfTy { .. } | Res::Def(DefKind::TyParam, _));\n+            // get the path from the pattern\n+            if let PatKind::Path(QPath::Resolved(_, path))\n+                 | PatKind::TupleStruct(QPath::Resolved(_, path), _, _)\n+                 | PatKind::Struct(QPath::Resolved(_, path), _, _) = pat.kind;\n             if cx.typeck_results().pat_ty(pat) == cx.tcx.type_of(impl_id);\n-            if let [first, ..] = path.segments;\n-            if let Some(hir_id) = first.hir_id;\n             then {\n-                span_lint(cx, cx.tcx.hir().span(hir_id));\n+                match path.res {\n+                    Res::Def(DefKind::Ctor(ctor_of, _), ..) => match ctor_of {\n+                            CtorOf::Variant => lint_path_to_variant(cx, path),\n+                            CtorOf::Struct => span_lint(cx, path.span),\n+                    },\n+                    Res::Def(DefKind::Variant, ..) => lint_path_to_variant(cx, path),\n+                    Res::Def(DefKind::Struct, ..) => span_lint(cx, path.span),\n+                    _ => ()\n+                }\n             }\n         }\n     }"}, {"sha": "4f80aaecc902d1d49aa1d2c09ab19ce76787b26d", "filename": "tests/ui/use_self.fixed", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/d9f497830c7dbc22aa875ce1c8add76d8de1b889/tests%2Fui%2Fuse_self.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/d9f497830c7dbc22aa875ce1c8add76d8de1b889/tests%2Fui%2Fuse_self.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self.fixed?ref=d9f497830c7dbc22aa875ce1c8add76d8de1b889", "patch": "@@ -542,3 +542,69 @@ mod use_self_in_pat {\n         }\n     }\n }\n+\n+mod issue8845 {\n+    pub enum Something {\n+        Num(u8),\n+        TupleNums(u8, u8),\n+        StructNums { one: u8, two: u8 },\n+    }\n+\n+    struct Foo(u8);\n+\n+    struct Bar {\n+        x: u8,\n+        y: usize,\n+    }\n+\n+    impl Something {\n+        fn get_value(&self) -> u8 {\n+            match self {\n+                Self::Num(n) => *n,\n+                Self::TupleNums(n, _m) => *n,\n+                Self::StructNums { one, two: _ } => *one,\n+            }\n+        }\n+\n+        fn use_crate(&self) -> u8 {\n+            match self {\n+                Self::Num(n) => *n,\n+                Self::TupleNums(n, _m) => *n,\n+                Self::StructNums { one, two: _ } => *one,\n+            }\n+        }\n+\n+        fn imported_values(&self) -> u8 {\n+            use Something::*;\n+            match self {\n+                Num(n) => *n,\n+                TupleNums(n, _m) => *n,\n+                StructNums { one, two: _ } => *one,\n+            }\n+        }\n+    }\n+\n+    impl Foo {\n+        fn get_value(&self) -> u8 {\n+            let Self(x) = self;\n+            *x\n+        }\n+\n+        fn use_crate(&self) -> u8 {\n+            let Self(x) = self;\n+            *x\n+        }\n+    }\n+\n+    impl Bar {\n+        fn get_value(&self) -> u8 {\n+            let Self { x, .. } = self;\n+            *x\n+        }\n+\n+        fn use_crate(&self) -> u8 {\n+            let Self { x, .. } = self;\n+            *x\n+        }\n+    }\n+}"}, {"sha": "52da72db53ce3a9706847825d85b8a0fe062eb65", "filename": "tests/ui/use_self.rs", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/d9f497830c7dbc22aa875ce1c8add76d8de1b889/tests%2Fui%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9f497830c7dbc22aa875ce1c8add76d8de1b889/tests%2Fui%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self.rs?ref=d9f497830c7dbc22aa875ce1c8add76d8de1b889", "patch": "@@ -542,3 +542,69 @@ mod use_self_in_pat {\n         }\n     }\n }\n+\n+mod issue8845 {\n+    pub enum Something {\n+        Num(u8),\n+        TupleNums(u8, u8),\n+        StructNums { one: u8, two: u8 },\n+    }\n+\n+    struct Foo(u8);\n+\n+    struct Bar {\n+        x: u8,\n+        y: usize,\n+    }\n+\n+    impl Something {\n+        fn get_value(&self) -> u8 {\n+            match self {\n+                Something::Num(n) => *n,\n+                Something::TupleNums(n, _m) => *n,\n+                Something::StructNums { one, two: _ } => *one,\n+            }\n+        }\n+\n+        fn use_crate(&self) -> u8 {\n+            match self {\n+                crate::issue8845::Something::Num(n) => *n,\n+                crate::issue8845::Something::TupleNums(n, _m) => *n,\n+                crate::issue8845::Something::StructNums { one, two: _ } => *one,\n+            }\n+        }\n+\n+        fn imported_values(&self) -> u8 {\n+            use Something::*;\n+            match self {\n+                Num(n) => *n,\n+                TupleNums(n, _m) => *n,\n+                StructNums { one, two: _ } => *one,\n+            }\n+        }\n+    }\n+\n+    impl Foo {\n+        fn get_value(&self) -> u8 {\n+            let Foo(x) = self;\n+            *x\n+        }\n+\n+        fn use_crate(&self) -> u8 {\n+            let crate::issue8845::Foo(x) = self;\n+            *x\n+        }\n+    }\n+\n+    impl Bar {\n+        fn get_value(&self) -> u8 {\n+            let Bar { x, .. } = self;\n+            *x\n+        }\n+\n+        fn use_crate(&self) -> u8 {\n+            let crate::issue8845::Bar { x, .. } = self;\n+            *x\n+        }\n+    }\n+}"}, {"sha": "f06bb959b3bdefe38cd776bf016403187e09b1e4", "filename": "tests/ui/use_self.stderr", "status": "modified", "additions": 61, "deletions": 1, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/d9f497830c7dbc22aa875ce1c8add76d8de1b889/tests%2Fui%2Fuse_self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d9f497830c7dbc22aa875ce1c8add76d8de1b889/tests%2Fui%2Fuse_self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self.stderr?ref=d9f497830c7dbc22aa875ce1c8add76d8de1b889", "patch": "@@ -186,5 +186,65 @@ error: unnecessary structure name repetition\n LL |             if let Foo::Bar = self {\n    |                    ^^^ help: use the applicable keyword: `Self`\n \n-error: aborting due to 31 previous errors\n+error: unnecessary structure name repetition\n+  --> $DIR/use_self.rs:563:17\n+   |\n+LL |                 Something::Num(n) => *n,\n+   |                 ^^^^^^^^^ help: use the applicable keyword: `Self`\n+\n+error: unnecessary structure name repetition\n+  --> $DIR/use_self.rs:564:17\n+   |\n+LL |                 Something::TupleNums(n, _m) => *n,\n+   |                 ^^^^^^^^^ help: use the applicable keyword: `Self`\n+\n+error: unnecessary structure name repetition\n+  --> $DIR/use_self.rs:565:17\n+   |\n+LL |                 Something::StructNums { one, two: _ } => *one,\n+   |                 ^^^^^^^^^ help: use the applicable keyword: `Self`\n+\n+error: unnecessary structure name repetition\n+  --> $DIR/use_self.rs:571:17\n+   |\n+LL |                 crate::issue8845::Something::Num(n) => *n,\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the applicable keyword: `Self`\n+\n+error: unnecessary structure name repetition\n+  --> $DIR/use_self.rs:572:17\n+   |\n+LL |                 crate::issue8845::Something::TupleNums(n, _m) => *n,\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the applicable keyword: `Self`\n+\n+error: unnecessary structure name repetition\n+  --> $DIR/use_self.rs:573:17\n+   |\n+LL |                 crate::issue8845::Something::StructNums { one, two: _ } => *one,\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the applicable keyword: `Self`\n+\n+error: unnecessary structure name repetition\n+  --> $DIR/use_self.rs:589:17\n+   |\n+LL |             let Foo(x) = self;\n+   |                 ^^^ help: use the applicable keyword: `Self`\n+\n+error: unnecessary structure name repetition\n+  --> $DIR/use_self.rs:594:17\n+   |\n+LL |             let crate::issue8845::Foo(x) = self;\n+   |                 ^^^^^^^^^^^^^^^^^^^^^ help: use the applicable keyword: `Self`\n+\n+error: unnecessary structure name repetition\n+  --> $DIR/use_self.rs:601:17\n+   |\n+LL |             let Bar { x, .. } = self;\n+   |                 ^^^ help: use the applicable keyword: `Self`\n+\n+error: unnecessary structure name repetition\n+  --> $DIR/use_self.rs:606:17\n+   |\n+LL |             let crate::issue8845::Bar { x, .. } = self;\n+   |                 ^^^^^^^^^^^^^^^^^^^^^ help: use the applicable keyword: `Self`\n+\n+error: aborting due to 41 previous errors\n "}]}