{"sha": "a79f9af290ad69cd4fb32a3e1b5e610a21262717", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3OWY5YWYyOTBhZDY5Y2Q0ZmIzMmEzZTFiNWU2MTBhMjEyNjI3MTc=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-08-26T23:14:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-26T23:14:06Z"}, "message": "Rollup merge of #75780 - matklad:unconfuseunpindocs, r=KodrAus\n\nUnconfuse Unpin docs a bit\n\n* Don't say that Unpin is used to prevent moves, because it is used\n  to *allow* moves\n* Be more precise about kindedness of things, it is\n  `Pin<Pointer<Data>>`, rather than just `Pin<Pointer>`.", "tree": {"sha": "06e4beb6222dc0bbc5a22cc1ee817a1a16d9fe7a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06e4beb6222dc0bbc5a22cc1ee817a1a16d9fe7a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a79f9af290ad69cd4fb32a3e1b5e610a21262717", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfRuy/CRBK7hj4Ov3rIwAAdHIIAHMpVCHE2cKOFe55GZzN1VZD\nwqDnDx61HQb4dooWo6vOOOkFw7yWEoIcL8/ydNiuZqrTaPC7PVW42Pf1AMhaWf2O\noELTQ04UywNlXO0opSgb4XlCGUvdOEX2R5BigKPIhROsq6BgkYB9MAfeqABqZRaI\nvuRJ4cOknuaNwOwiXGfLvV7nmvESM8ofT3Ht7ca+He5bQQyGYsClgK6q+07fMLcF\nG96vGbTC9iJBSLoUdqUYuNQ7e7NPSEVdA5xE2CTyayD6mWEz5zDIVFSF+5oIa3pW\nVg+t6Itfca+S4a4XVOK13l74v4GjRu8hau9mzAdmOIPm0R2a+R5uVfd1yAleOwQ=\n=0OyA\n-----END PGP SIGNATURE-----\n", "payload": "tree 06e4beb6222dc0bbc5a22cc1ee817a1a16d9fe7a\nparent 730449d22ad6d152f4f58719ef2f3c459984a361\nparent daa6620c95f0c3817b1a344a607edce1faa3e48f\nauthor Dylan DPC <dylan.dpc@gmail.com> 1598483646 +0200\ncommitter GitHub <noreply@github.com> 1598483646 +0200\n\nRollup merge of #75780 - matklad:unconfuseunpindocs, r=KodrAus\n\nUnconfuse Unpin docs a bit\n\n* Don't say that Unpin is used to prevent moves, because it is used\n  to *allow* moves\n* Be more precise about kindedness of things, it is\n  `Pin<Pointer<Data>>`, rather than just `Pin<Pointer>`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a79f9af290ad69cd4fb32a3e1b5e610a21262717", "html_url": "https://github.com/rust-lang/rust/commit/a79f9af290ad69cd4fb32a3e1b5e610a21262717", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a79f9af290ad69cd4fb32a3e1b5e610a21262717/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "730449d22ad6d152f4f58719ef2f3c459984a361", "url": "https://api.github.com/repos/rust-lang/rust/commits/730449d22ad6d152f4f58719ef2f3c459984a361", "html_url": "https://github.com/rust-lang/rust/commit/730449d22ad6d152f4f58719ef2f3c459984a361"}, {"sha": "daa6620c95f0c3817b1a344a607edce1faa3e48f", "url": "https://api.github.com/repos/rust-lang/rust/commits/daa6620c95f0c3817b1a344a607edce1faa3e48f", "html_url": "https://github.com/rust-lang/rust/commit/daa6620c95f0c3817b1a344a607edce1faa3e48f"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "b44ca95b00230b712fbff11bb805057ed0ba42f6", "filename": "library/core/src/marker.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a79f9af290ad69cd4fb32a3e1b5e610a21262717/library%2Fcore%2Fsrc%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a79f9af290ad69cd4fb32a3e1b5e610a21262717/library%2Fcore%2Fsrc%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmarker.rs?ref=a79f9af290ad69cd4fb32a3e1b5e610a21262717", "patch": "@@ -728,23 +728,23 @@ unsafe impl<T: ?Sized> Freeze for &mut T {}\n \n /// Types that can be safely moved after being pinned.\n ///\n-/// Since Rust itself has no notion of immovable types, and considers moves\n-/// (e.g., through assignment or [`mem::replace`]) to always be safe,\n-/// this trait cannot prevent types from moving by itself.\n+/// Rust itself has no notion of immovable types, and considers moves (e.g.,\n+/// through assignment or [`mem::replace`]) to always be safe.\n ///\n-/// Instead it is used to prevent moves through the type system,\n-/// by controlling the behavior of pointers `P` wrapped in the [`Pin<P>`] wrapper,\n-/// which \"pin\" the type in place by not allowing it to be moved out of them.\n-/// See the [`pin module`] documentation for more information on pinning.\n+/// The [`Pin`][Pin] type is used instead to prevent moves through the type\n+/// system. Pointers `P<T>` wrapped in the [`Pin<P<T>>`][Pin] wrapper can't be\n+/// moved out of. See the [`pin module`] documentation for more information on\n+/// pinning.\n ///\n-/// Implementing this trait lifts the restrictions of pinning off a type,\n-/// which then allows it to move out with functions such as [`mem::replace`].\n+/// Implementing the `Unpin` trait for `T` lifts the restrictions of pinning off\n+/// the type, which then allows moving `T` out of [`Pin<P<T>>`][Pin] with\n+/// functions such as [`mem::replace`].\n ///\n /// `Unpin` has no consequence at all for non-pinned data. In particular,\n /// [`mem::replace`] happily moves `!Unpin` data (it works for any `&mut T`, not\n-/// just when `T: Unpin`). However, you cannot use\n-/// [`mem::replace`] on data wrapped inside a [`Pin<P>`] because you cannot get the\n-/// `&mut T` you need for that, and *that* is what makes this system work.\n+/// just when `T: Unpin`). However, you cannot use [`mem::replace`] on data\n+/// wrapped inside a [`Pin<P<T>>`][Pin] because you cannot get the `&mut T` you\n+/// need for that, and *that* is what makes this system work.\n ///\n /// So this, for example, can only be done on types implementing `Unpin`:\n ///\n@@ -765,8 +765,8 @@ unsafe impl<T: ?Sized> Freeze for &mut T {}\n /// This trait is automatically implemented for almost every type.\n ///\n /// [`mem::replace`]: ../../std/mem/fn.replace.html\n-/// [`Pin<P>`]: ../pin/struct.Pin.html\n-/// [`pin module`]: ../../std/pin/index.html\n+/// [Pin]: crate::pin::Pin\n+/// [`pin module`]: crate::pin\n #[stable(feature = \"pin\", since = \"1.33.0\")]\n #[rustc_on_unimplemented(\n     on(_Self = \"std::future::Future\", note = \"consider using `Box::pin`\",),"}]}