{"sha": "2b7a23ed304d4298247b030eea0820018c05cd30", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiN2EyM2VkMzA0ZDQyOTgyNDdiMDMwZWVhMDgyMDAxOGMwNWNkMzA=", "commit": {"author": {"name": "Andrew Cann", "email": "shum@canndrew.org", "date": "2017-01-25T06:48:20Z"}, "committer": {"name": "Andrew Cann", "email": "shum@canndrew.org", "date": "2017-01-25T06:48:20Z"}, "message": "Hide uninhabitedness checks behind feature gate", "tree": {"sha": "b114ab43f1ea24327ccc255095a1b6978a07c34c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b114ab43f1ea24327ccc255095a1b6978a07c34c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2b7a23ed304d4298247b030eea0820018c05cd30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2b7a23ed304d4298247b030eea0820018c05cd30", "html_url": "https://github.com/rust-lang/rust/commit/2b7a23ed304d4298247b030eea0820018c05cd30", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2b7a23ed304d4298247b030eea0820018c05cd30/comments", "author": {"login": "canndrew", "id": 5555066, "node_id": "MDQ6VXNlcjU1NTUwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5555066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/canndrew", "html_url": "https://github.com/canndrew", "followers_url": "https://api.github.com/users/canndrew/followers", "following_url": "https://api.github.com/users/canndrew/following{/other_user}", "gists_url": "https://api.github.com/users/canndrew/gists{/gist_id}", "starred_url": "https://api.github.com/users/canndrew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/canndrew/subscriptions", "organizations_url": "https://api.github.com/users/canndrew/orgs", "repos_url": "https://api.github.com/users/canndrew/repos", "events_url": "https://api.github.com/users/canndrew/events{/privacy}", "received_events_url": "https://api.github.com/users/canndrew/received_events", "type": "User", "site_admin": false}, "committer": {"login": "canndrew", "id": 5555066, "node_id": "MDQ6VXNlcjU1NTUwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5555066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/canndrew", "html_url": "https://github.com/canndrew", "followers_url": "https://api.github.com/users/canndrew/followers", "following_url": "https://api.github.com/users/canndrew/following{/other_user}", "gists_url": "https://api.github.com/users/canndrew/gists{/gist_id}", "starred_url": "https://api.github.com/users/canndrew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/canndrew/subscriptions", "organizations_url": "https://api.github.com/users/canndrew/orgs", "repos_url": "https://api.github.com/users/canndrew/repos", "events_url": "https://api.github.com/users/canndrew/events{/privacy}", "received_events_url": "https://api.github.com/users/canndrew/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0d0e68be4f8bb9d8522bd72a7a1b8ef95b84c6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0d0e68be4f8bb9d8522bd72a7a1b8ef95b84c6c", "html_url": "https://github.com/rust-lang/rust/commit/c0d0e68be4f8bb9d8522bd72a7a1b8ef95b84c6c"}], "stats": {"total": 122, "additions": 81, "deletions": 41}, "files": [{"sha": "6c49493a655597abb1b95ec23aeba408ea0bcffa", "filename": "src/librustc/ty/inhabitedness/mod.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2b7a23ed304d4298247b030eea0820018c05cd30/src%2Flibrustc%2Fty%2Finhabitedness%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b7a23ed304d4298247b030eea0820018c05cd30/src%2Flibrustc%2Fty%2Finhabitedness%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finhabitedness%2Fmod.rs?ref=2b7a23ed304d4298247b030eea0820018c05cd30", "patch": "@@ -191,11 +191,7 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n                 }\n             }\n             TyRef(_, ref tm) => {\n-                if tcx.sess.features.borrow().never_type {\n-                    tm.ty.uninhabited_from(visited, tcx)\n-                } else {\n-                    DefIdForest::empty()\n-                }\n+                tm.ty.uninhabited_from(visited, tcx)\n             }\n \n             _ => DefIdForest::empty(),"}, {"sha": "1770a112cdf231ab159d3782581f7902f50f55dc", "filename": "src/librustc_const_eval/_match.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2b7a23ed304d4298247b030eea0820018c05cd30/src%2Flibrustc_const_eval%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b7a23ed304d4298247b030eea0820018c05cd30/src%2Flibrustc_const_eval%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2F_match.rs?ref=2b7a23ed304d4298247b030eea0820018c05cd30", "patch": "@@ -379,19 +379,24 @@ impl<'tcx> Witness<'tcx> {\n fn all_constructors<'a, 'tcx: 'a>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n                                   pcx: PatternContext<'tcx>) -> Vec<Constructor>\n {\n+    let check_inhabited = cx.tcx.sess.features.borrow().never_type;\n     debug!(\"all_constructors({:?})\", pcx.ty);\n     match pcx.ty.sty {\n         ty::TyBool =>\n             [true, false].iter().map(|b| ConstantValue(ConstVal::Bool(*b))).collect(),\n         ty::TySlice(ref sub_ty) => {\n-            if sub_ty.is_uninhabited_from(cx.module, cx.tcx) {\n+            if sub_ty.is_uninhabited_from(cx.module, cx.tcx)\n+                && check_inhabited\n+            {\n                 vec![Slice(0)]\n             } else {\n                 (0..pcx.max_slice_length+1).map(|length| Slice(length)).collect()\n             }\n         }\n         ty::TyArray(ref sub_ty, length) => {\n-            if length == 0 || !sub_ty.is_uninhabited_from(cx.module, cx.tcx) {\n+            if length == 0 || !(sub_ty.is_uninhabited_from(cx.module, cx.tcx)\n+                                && check_inhabited)\n+            {\n                 vec![Slice(length)]\n             } else {\n                 vec![]\n@@ -403,15 +408,19 @@ fn all_constructors<'a, 'tcx: 'a>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n                 let forest = v.uninhabited_from(&mut visited,\n                                                 cx.tcx, substs,\n                                                 AdtKind::Enum);\n-                if forest.contains(cx.tcx, cx.module) {\n+                if forest.contains(cx.tcx, cx.module)\n+                    && check_inhabited\n+                {\n                     None\n                 } else {\n                     Some(Variant(v.did))\n                 }\n             }).collect()\n         }\n         _ => {\n-            if pcx.ty.is_uninhabited_from(cx.module, cx.tcx) {\n+            if pcx.ty.is_uninhabited_from(cx.module, cx.tcx)\n+                    && check_inhabited\n+            {\n                 vec![]\n             } else {\n                 vec![Single]"}, {"sha": "e94d35195c21336cc162a8f777ca2e7a303eecb5", "filename": "src/librustc_mir/build/matches/simplify.rs", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/2b7a23ed304d4298247b030eea0820018c05cd30/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b7a23ed304d4298247b030eea0820018c05cd30/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs?ref=2b7a23ed304d4298247b030eea0820018c05cd30", "patch": "@@ -99,20 +99,24 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             }\n \n             PatternKind::Variant { adt_def, substs, variant_index, ref subpatterns } => {\n-                let irrefutable = adt_def.variants.iter().enumerate().all(|(i, v)| {\n-                    i == variant_index || {\n-                        let mut visited = FxHashSet::default();\n-                        let node_set = v.uninhabited_from(&mut visited,\n-                                                          self.hir.tcx(),\n-                                                          substs,\n-                                                          adt_def.adt_kind());\n-                        !node_set.is_empty()\n+                if self.hir.tcx().sess.features.borrow().never_type {\n+                    let irrefutable = adt_def.variants.iter().enumerate().all(|(i, v)| {\n+                        i == variant_index || {\n+                            let mut visited = FxHashSet::default();\n+                            let node_set = v.uninhabited_from(&mut visited,\n+                                                              self.hir.tcx(),\n+                                                              substs,\n+                                                              adt_def.adt_kind());\n+                            !node_set.is_empty()\n+                        }\n+                    });\n+                    if irrefutable {\n+                        let lvalue = match_pair.lvalue.downcast(adt_def, variant_index);\n+                        candidate.match_pairs.extend(self.field_match_pairs(lvalue, subpatterns));\n+                        Ok(())\n+                    } else {\n+                        Err(match_pair)\n                     }\n-                });\n-                if irrefutable {\n-                    let lvalue = match_pair.lvalue.downcast(adt_def, variant_index);\n-                    candidate.match_pairs.extend(self.field_match_pairs(lvalue, subpatterns));\n-                    Ok(())\n                 } else {\n                     Err(match_pair)\n                 }"}, {"sha": "0f8b0a6c238d08f03c4d2ae88554f4c3775313e5", "filename": "src/test/compile-fail/uninhabited-matches-feature-gated.rs", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/2b7a23ed304d4298247b030eea0820018c05cd30/src%2Ftest%2Fcompile-fail%2Funinhabited-matches-feature-gated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b7a23ed304d4298247b030eea0820018c05cd30/src%2Ftest%2Fcompile-fail%2Funinhabited-matches-feature-gated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funinhabited-matches-feature-gated.rs?ref=2b7a23ed304d4298247b030eea0820018c05cd30", "patch": "@@ -0,0 +1,50 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(slice_patterns)]\n+\n+enum Void {}\n+\n+fn main() {\n+    let x: Result<u32, &'static Void> = Ok(23);\n+    let _ = match x {   //~ ERROR non-exhaustive\n+        Ok(n) => n,\n+    };\n+\n+    let x: &Void = unsafe { std::mem::uninitialized() };\n+    let _ = match x {};\n+    //~^ ERROR non-exhaustive\n+\n+    let x: (Void,) = unsafe { std::mem::uninitialized() };\n+    let _ = match x {};\n+    //~^ ERROR non-exhaustive\n+\n+    let x: [Void; 1] = unsafe { std::mem::uninitialized() };\n+    let _ = match x {};\n+    //~^ ERROR non-exhaustive\n+\n+    let x: &[Void] = unsafe { std::mem::uninitialized() };\n+    let _ = match x {   //~ ERROR non-exhaustive\n+        &[] => (),\n+    };\n+\n+    let x: Void = unsafe { std::mem::uninitialized() };\n+    let _ = match x {}; // okay\n+\n+    let x: Result<u32, Void> = Ok(23);\n+    let _ = match x {   //~ ERROR non-exhaustive\n+        Ok(x) => x,\n+    };\n+\n+    let x: Result<u32, Void> = Ok(23);\n+    let Ok(x) = x;\n+    //~^ ERROR refutable\n+}\n+"}, {"sha": "8f246eddbcde498dba0c5f7e9a0c701c7b708618", "filename": "src/test/compile-fail/uninhabited-reference-type-feature-gated.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c0d0e68be4f8bb9d8522bd72a7a1b8ef95b84c6c/src%2Ftest%2Fcompile-fail%2Funinhabited-reference-type-feature-gated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0d0e68be4f8bb9d8522bd72a7a1b8ef95b84c6c/src%2Ftest%2Fcompile-fail%2Funinhabited-reference-type-feature-gated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funinhabited-reference-type-feature-gated.rs?ref=c0d0e68be4f8bb9d8522bd72a7a1b8ef95b84c6c", "patch": "@@ -1,19 +0,0 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-enum Void {}\n-\n-fn main() {\n-    let x: Result<u32, &'static Void> = Ok(23);\n-    let _ = match x {   //~ ERROR non-exhaustive\n-        Ok(n) => n,\n-    };\n-}\n-"}]}