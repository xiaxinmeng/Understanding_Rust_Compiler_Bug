{"sha": "a18a63185ca79126842d94505746fccef3ade1b8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExOGE2MzE4NWNhNzkxMjY4NDJkOTQ1MDU3NDZmY2NlZjNhZGUxYjg=", "commit": {"author": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2014-06-26T20:19:34Z"}, "committer": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2014-06-28T04:41:17Z"}, "message": "WIP match hygiene, compiles", "tree": {"sha": "3fe802e7fde7b548405743a11208d6319b4210d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3fe802e7fde7b548405743a11208d6319b4210d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a18a63185ca79126842d94505746fccef3ade1b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a18a63185ca79126842d94505746fccef3ade1b8", "html_url": "https://github.com/rust-lang/rust/commit/a18a63185ca79126842d94505746fccef3ade1b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a18a63185ca79126842d94505746fccef3ade1b8/comments", "author": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84e8143c4f423011cd337d2a7bfdc54a753eea81", "url": "https://api.github.com/repos/rust-lang/rust/commits/84e8143c4f423011cd337d2a7bfdc54a753eea81", "html_url": "https://github.com/rust-lang/rust/commit/84e8143c4f423011cd337d2a7bfdc54a753eea81"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "c40049a58a7bf58af3f509e01a7aaf71f1e97dfd", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a18a63185ca79126842d94505746fccef3ade1b8/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a18a63185ca79126842d94505746fccef3ade1b8/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=a18a63185ca79126842d94505746fccef3ade1b8", "patch": "@@ -659,15 +659,15 @@ fn expand_non_macro_stmt(s: &Stmt, fld: &mut MacroExpander)\n }\n \n fn expand_arm(arm: &ast::Arm, fld: &mut MacroExpander) -> ast::Arm {\n-    if a.pats.len() == 0 {\n+    if arm.pats.len() == 0 {\n         fail!(\"encountered match arm with 0 patterns\");\n     }\n-    let first_pat = match a.pats.get(0) {\n-        \n-    }\n+    // all of the pats must have the same set of bindings, so use the\n+    // first one to extract them and generate new names:\n+    let first_pat = arm.pats.get(0);\n     // code duplicated from 'let', above. Perhaps this can be lifted\n     // into a separate function:\n-    let expanded_pat = fld.fold_pat(pat);\n+    let expanded_pat = fld.fold_pat(*first_pat);\n     let mut name_finder = new_name_finder(Vec::new());\n     name_finder.visit_pat(&*expanded_pat,());\n     let mut new_pending_renames = Vec::new();\n@@ -681,13 +681,13 @@ fn expand_arm(arm: &ast::Arm, fld: &mut MacroExpander) -> ast::Arm {\n         // ones have already been applied):\n         rename_fld.fold_pat(expanded_pat)\n     };\n-    \n-    let bound_names\n-        ast::Arm {\n-        attrs: a.attrs.iter().map(|x| self.fold_attribute(*x)).collect(),\n-        pats: a.pats.iter().map(|x| self.fold_pat(*x)).collect(),\n-        guard: a.guard.map(|x| self.fold_expr(x)),\n-        body: self.fold_expr(a.body),\n+    /*\n+    */\n+    ast::Arm {\n+        attrs: arm.attrs.iter().map(|x| fld.fold_attribute(*x)).collect(),\n+        pats: arm.pats.iter().map(|x| fld.fold_pat(*x)).collect(),\n+        guard: arm.guard.map(|x| fld.fold_expr(x)),\n+        body: fld.fold_expr(arm.body),\n     }    \n }\n "}]}