{"sha": "e521a8d46b4437f94ba1bb85826bb7d00ba13436", "node_id": "C_kwDOAAsO6NoAKGU1MjFhOGQ0NmI0NDM3Zjk0YmExYmI4NTgyNmJiN2QwMGJhMTM0MzY", "commit": {"author": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2022-10-05T18:59:45Z"}, "committer": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2022-10-23T19:30:16Z"}, "message": "Prevent foreign Rust exceptions from being caught", "tree": {"sha": "96ab686aa695bbc3f7b8ee181b6b725ab652f52f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96ab686aa695bbc3f7b8ee181b6b725ab652f52f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e521a8d46b4437f94ba1bb85826bb7d00ba13436", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e521a8d46b4437f94ba1bb85826bb7d00ba13436", "html_url": "https://github.com/rust-lang/rust/commit/e521a8d46b4437f94ba1bb85826bb7d00ba13436", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e521a8d46b4437f94ba1bb85826bb7d00ba13436/comments", "author": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ca6777c014813e3bdb98d155562fc3d111d86dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ca6777c014813e3bdb98d155562fc3d111d86dd", "html_url": "https://github.com/rust-lang/rust/commit/1ca6777c014813e3bdb98d155562fc3d111d86dd"}], "stats": {"total": 30, "additions": 27, "deletions": 3}, "files": [{"sha": "777ae41fab1242fad85bcac31aee4fd21c3e1e1a", "filename": "library/panic_unwind/src/gcc.rs", "status": "modified", "additions": 27, "deletions": 3, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/e521a8d46b4437f94ba1bb85826bb7d00ba13436/library%2Fpanic_unwind%2Fsrc%2Fgcc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e521a8d46b4437f94ba1bb85826bb7d00ba13436/library%2Fpanic_unwind%2Fsrc%2Fgcc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fpanic_unwind%2Fsrc%2Fgcc.rs?ref=e521a8d46b4437f94ba1bb85826bb7d00ba13436", "patch": "@@ -38,12 +38,23 @@\n \n use alloc::boxed::Box;\n use core::any::Any;\n+use core::ptr;\n \n use unwind as uw;\n \n+// In case where multiple copies of std is compiled into a single binary,\n+// we use address of this static variable to distinguish an exception raised by\n+// this copy and some other copy (which needs to be treated as foreign exception).\n+static CANARY: u8 = 0;\n+\n+// NOTE(nbdd0121)\n+// Once `c_unwind` feature is stabilized, there will be ABI stability requirement\n+// on this struct. The first two field must be `_Unwind_Exception` and `canary`,\n+// as it may be accessed by a different version of the std with a different compiler.\n #[repr(C)]\n struct Exception {\n     _uwe: uw::_Unwind_Exception,\n+    canary: *const u8,\n     cause: Box<dyn Any + Send>,\n }\n \n@@ -54,6 +65,7 @@ pub unsafe fn panic(data: Box<dyn Any + Send>) -> u32 {\n             exception_cleanup,\n             private: [0; uw::unwinder_private_data_size],\n         },\n+        canary: &CANARY,\n         cause: data,\n     });\n     let exception_param = Box::into_raw(exception) as *mut uw::_Unwind_Exception;\n@@ -75,10 +87,22 @@ pub unsafe fn cleanup(ptr: *mut u8) -> Box<dyn Any + Send> {\n     if (*exception).exception_class != rust_exception_class() {\n         uw::_Unwind_DeleteException(exception);\n         super::__rust_foreign_exception();\n-    } else {\n-        let exception = Box::from_raw(exception as *mut Exception);\n-        exception.cause\n     }\n+\n+    let exception = exception.cast::<Exception>();\n+    // Just access the canary field, avoid accessing the entire `Exception` as\n+    // it can be a foreign Rust exception.\n+    let canary = ptr::addr_of!((*exception).canary).read();\n+    if !ptr::eq(canary, &CANARY) {\n+        // A foreign Rust exception, treat it slightly differently from other\n+        // foreign exceptions, because call into `_Unwind_DeleteException` will\n+        // call into `__rust_drop_panic` which produces a confusing\n+        // \"Rust panic must be rethrown\" message.\n+        super::__rust_foreign_exception();\n+    }\n+\n+    let exception = Box::from_raw(exception as *mut Exception);\n+    exception.cause\n }\n \n // Rust's exception class identifier.  This is used by personality routines to"}]}