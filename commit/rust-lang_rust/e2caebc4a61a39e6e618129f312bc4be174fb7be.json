{"sha": "e2caebc4a61a39e6e618129f312bc4be174fb7be", "node_id": "C_kwDOAAsO6NoAKGUyY2FlYmM0YTYxYTM5ZTZlNjE4MTI5ZjMxMmJjNGJlMTc0ZmI3YmU", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-04-28T16:51:40Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-05-04T21:50:46Z"}, "message": "Add tests.", "tree": {"sha": "717b45daceb2d23d6823a7e762af03dc4e5b08fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/717b45daceb2d23d6823a7e762af03dc4e5b08fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e2caebc4a61a39e6e618129f312bc4be174fb7be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e2caebc4a61a39e6e618129f312bc4be174fb7be", "html_url": "https://github.com/rust-lang/rust/commit/e2caebc4a61a39e6e618129f312bc4be174fb7be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e2caebc4a61a39e6e618129f312bc4be174fb7be/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb7a7434215dd9d4b7cc18746ad1d0e531c25325", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb7a7434215dd9d4b7cc18746ad1d0e531c25325", "html_url": "https://github.com/rust-lang/rust/commit/eb7a7434215dd9d4b7cc18746ad1d0e531c25325"}], "stats": {"total": 68, "additions": 68, "deletions": 0}, "files": [{"sha": "8a8e869ba0316f9bf8503ecb2e712ee61adec1a8", "filename": "tests/mir-opt/const_prop/address_of_pair.fn0.ConstProp.diff", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/e2caebc4a61a39e6e618129f312bc4be174fb7be/tests%2Fmir-opt%2Fconst_prop%2Faddress_of_pair.fn0.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e2caebc4a61a39e6e618129f312bc4be174fb7be/tests%2Fmir-opt%2Fconst_prop%2Faddress_of_pair.fn0.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Faddress_of_pair.fn0.ConstProp.diff?ref=e2caebc4a61a39e6e618129f312bc4be174fb7be", "patch": "@@ -0,0 +1,51 @@\n+- // MIR for `fn0` before ConstProp\n++ // MIR for `fn0` after ConstProp\n+  \n+  fn fn0() -> bool {\n+      let mut _0: bool;                    // return place in scope 0 at $DIR/address_of_pair.rs:+0:17: +0:21\n+      let mut _1: !;                       // in scope 0 at $DIR/address_of_pair.rs:+0:22: +9:2\n+      let mut _2: (i32, bool);             // in scope 0 at $DIR/address_of_pair.rs:+1:9: +1:17\n+      let _4: ();                          // in scope 0 at $DIR/address_of_pair.rs:+4:5: +6:6\n+      let mut _6: bool;                    // in scope 0 at $DIR/address_of_pair.rs:+7:16: +7:22\n+      scope 1 {\n+          debug pair => _2;                // in scope 1 at $DIR/address_of_pair.rs:+1:9: +1:17\n+          let _3: *mut bool;               // in scope 1 at $DIR/address_of_pair.rs:+2:9: +2:12\n+          scope 2 {\n+              debug ptr => _3;             // in scope 2 at $DIR/address_of_pair.rs:+2:9: +2:12\n+              let _5: bool;                // in scope 2 at $DIR/address_of_pair.rs:+7:9: +7:12\n+              scope 3 {\n+              }\n+              scope 4 {\n+                  debug ret => _5;         // in scope 4 at $DIR/address_of_pair.rs:+7:9: +7:12\n+              }\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_2);                 // scope 0 at $DIR/address_of_pair.rs:+1:9: +1:17\n+-         _2 = (const 1_i32, const false); // scope 0 at $DIR/address_of_pair.rs:+1:20: +1:30\n++         _2 = const (1_i32, false);       // scope 0 at $DIR/address_of_pair.rs:+1:20: +1:30\n+          StorageLive(_3);                 // scope 1 at $DIR/address_of_pair.rs:+2:9: +2:12\n+          _3 = &raw mut (_2.1: bool);      // scope 1 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+-         _2 = (const 1_i32, const false); // scope 2 at $DIR/address_of_pair.rs:+3:5: +3:22\n++         _2 = const (1_i32, false);       // scope 2 at $DIR/address_of_pair.rs:+3:5: +3:22\n+          StorageLive(_4);                 // scope 2 at $DIR/address_of_pair.rs:+4:5: +6:6\n+          (*_3) = const true;              // scope 3 at $DIR/address_of_pair.rs:+5:9: +5:20\n+          _4 = const ();                   // scope 3 at $DIR/address_of_pair.rs:+4:5: +6:6\n+          StorageDead(_4);                 // scope 2 at $DIR/address_of_pair.rs:+6:5: +6:6\n+          StorageLive(_5);                 // scope 2 at $DIR/address_of_pair.rs:+7:9: +7:12\n+          StorageLive(_6);                 // scope 2 at $DIR/address_of_pair.rs:+7:16: +7:22\n+-         _6 = (_2.1: bool);               // scope 2 at $DIR/address_of_pair.rs:+7:16: +7:22\n+-         _5 = Not(move _6);               // scope 2 at $DIR/address_of_pair.rs:+7:15: +7:22\n++         _6 = const false;                // scope 2 at $DIR/address_of_pair.rs:+7:16: +7:22\n++         _5 = const true;                 // scope 2 at $DIR/address_of_pair.rs:+7:15: +7:22\n+          StorageDead(_6);                 // scope 2 at $DIR/address_of_pair.rs:+7:21: +7:22\n+-         _0 = _5;                         // scope 4 at $DIR/address_of_pair.rs:+8:12: +8:15\n++         _0 = const true;                 // scope 4 at $DIR/address_of_pair.rs:+8:12: +8:15\n+          StorageDead(_5);                 // scope 2 at $DIR/address_of_pair.rs:+9:1: +9:2\n+          StorageDead(_3);                 // scope 1 at $DIR/address_of_pair.rs:+9:1: +9:2\n+          StorageDead(_2);                 // scope 0 at $DIR/address_of_pair.rs:+9:1: +9:2\n+          return;                          // scope 0 at $DIR/address_of_pair.rs:+9:2: +9:2\n+      }\n+  }\n+  "}, {"sha": "43dc9bae625347336da5b3724d1d0be813b5e877", "filename": "tests/mir-opt/const_prop/address_of_pair.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e2caebc4a61a39e6e618129f312bc4be174fb7be/tests%2Fmir-opt%2Fconst_prop%2Faddress_of_pair.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2caebc4a61a39e6e618129f312bc4be174fb7be/tests%2Fmir-opt%2Fconst_prop%2Faddress_of_pair.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Faddress_of_pair.rs?ref=e2caebc4a61a39e6e618129f312bc4be174fb7be", "patch": "@@ -0,0 +1,17 @@\n+// unit-test: ConstProp\n+\n+// EMIT_MIR address_of_pair.fn0.ConstProp.diff\n+pub fn fn0() -> bool {\n+    let mut pair = (1, false);\n+    let ptr = core::ptr::addr_of_mut!(pair.1);\n+    pair = (1, false);\n+    unsafe {\n+        *ptr = true;\n+    }\n+    let ret = !pair.1;\n+    return ret;\n+}\n+\n+pub fn main() {\n+    println!(\"{}\", fn0());\n+}"}]}