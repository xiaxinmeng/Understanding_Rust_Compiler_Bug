{"sha": "94fa49c0a33be4dd6ae41afb35b6f3033b01dfcc", "node_id": "C_kwDOAAsO6NoAKDk0ZmE0OWMwYTMzYmU0ZGQ2YWU0MWFmYjM1YjZmMzAzM2IwMWRmY2M", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-10-06T15:05:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-06T15:05:40Z"}, "message": "Merge #10420\n\n10420: Parse outer attributes on StructPatternEtCetera r=jonas-schievink a=XFFXFF\n\nTry to fix https://github.com/rust-analyzer/rust-analyzer/issues/8610  \r\nRelated pr in ungrammer: https://github.com/rust-analyzer/ungrammar/pull/41\n\nCo-authored-by: zhoufan <1247714429@qq.com>", "tree": {"sha": "169f46ff74bf7436a2f53d86a376fdfd6abe7281", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/169f46ff74bf7436a2f53d86a376fdfd6abe7281"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/94fa49c0a33be4dd6ae41afb35b6f3033b01dfcc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhXbtECRBK7hj4Ov3rIwAA2owIAHmm2wSaYgMiRHBkiRwBsDvt\n76XZh1tK7Ik6ocSV4UJ1HnImPOc59M6Zf8b1HKH2Wn4jXJoXG24iUExHzvCo2f9u\nIEnZ9Xzs4w/+i0SrFvfXQAq103hs5itrYmTWbl9JjsARJuKUJ/qPyJrfYDY8Zp7L\nT3CTxa/KcVVoipn2IJbaMGb7DS8mFEZo17PAVKQ1qDlKNSHxQujtItIO/w8DMY5Y\n0Uxa5gJpHOWZDjh5n1yHwZmESowmnCgvRkojfAgqVk5PZ+WoGjnCfEM58odOVfSx\n4HV8oRrzr31l/M2O1bF4YHEAr4QsxfgHAtgGN3TX1mCgMVxJdzRQiKaeKI5OYNI=\n=a5bL\n-----END PGP SIGNATURE-----\n", "payload": "tree 169f46ff74bf7436a2f53d86a376fdfd6abe7281\nparent 4cfe237a561373ff8cfe8dfc642437604026e464\nparent 116c7aef7fad2835f127c8573543a05de8376978\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1633532740 +0000\ncommitter GitHub <noreply@github.com> 1633532740 +0000\n\nMerge #10420\n\n10420: Parse outer attributes on StructPatternEtCetera r=jonas-schievink a=XFFXFF\n\nTry to fix https://github.com/rust-analyzer/rust-analyzer/issues/8610  \r\nRelated pr in ungrammer: https://github.com/rust-analyzer/ungrammar/pull/41\n\nCo-authored-by: zhoufan <1247714429@qq.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/94fa49c0a33be4dd6ae41afb35b6f3033b01dfcc", "html_url": "https://github.com/rust-lang/rust/commit/94fa49c0a33be4dd6ae41afb35b6f3033b01dfcc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/94fa49c0a33be4dd6ae41afb35b6f3033b01dfcc/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4cfe237a561373ff8cfe8dfc642437604026e464", "url": "https://api.github.com/repos/rust-lang/rust/commits/4cfe237a561373ff8cfe8dfc642437604026e464", "html_url": "https://github.com/rust-lang/rust/commit/4cfe237a561373ff8cfe8dfc642437604026e464"}, {"sha": "116c7aef7fad2835f127c8573543a05de8376978", "url": "https://api.github.com/repos/rust-lang/rust/commits/116c7aef7fad2835f127c8573543a05de8376978", "html_url": "https://github.com/rust-lang/rust/commit/116c7aef7fad2835f127c8573543a05de8376978"}], "stats": {"total": 138, "additions": 101, "deletions": 37}, "files": [{"sha": "372cf9aba8acb8eef03524c78634be1d3681bcde", "filename": "crates/hir_def/src/body/lower.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94fa49c0a33be4dd6ae41afb35b6f3033b01dfcc/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94fa49c0a33be4dd6ae41afb35b6f3033b01dfcc/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs?ref=94fa49c0a33be4dd6ae41afb35b6f3033b01dfcc", "patch": "@@ -818,7 +818,7 @@ impl ExprCollector<'_> {\n                 let ellipsis = p\n                     .record_pat_field_list()\n                     .expect(\"every struct should have a field list\")\n-                    .dotdot_token()\n+                    .rest_pat()\n                     .is_some();\n \n                 Pat::Record { path, args, ellipsis }"}, {"sha": "9da94ce16266be2da02dbead81781cfb74886943", "filename": "crates/parser/src/grammar/patterns.rs", "status": "modified", "additions": 43, "deletions": 25, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/94fa49c0a33be4dd6ae41afb35b6f3033b01dfcc/crates%2Fparser%2Fsrc%2Fgrammar%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94fa49c0a33be4dd6ae41afb35b6f3033b01dfcc/crates%2Fparser%2Fsrc%2Fgrammar%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fpatterns.rs?ref=94fa49c0a33be4dd6ae41afb35b6f3033b01dfcc", "patch": "@@ -205,46 +205,64 @@ fn tuple_pat_fields(p: &mut Parser) {\n     p.expect(T![')']);\n }\n \n+// test record_pat_field\n+// fn foo() {\n+//     let S { 0: 1 } = ();\n+//     let S { x: 1 } = ();\n+//     let S { #[cfg(any())] x: 1 } = ();\n+// }\n+fn record_pat_field(p: &mut Parser) {\n+    match p.current() {\n+        IDENT | INT_NUMBER if p.nth(1) == T![:] => {\n+            name_ref_or_index(p);\n+            p.bump(T![:]);\n+            pattern(p);\n+        }\n+        T![.] => {\n+            if p.at(T![..]) {\n+                p.bump(T![..]);\n+            } else {\n+                ident_pat(p, false);\n+            }\n+        }\n+        T![box] => {\n+            // FIXME: not all box patterns should be allowed\n+            box_pat(p);\n+        }\n+        _ => {\n+            ident_pat(p, false);\n+        }\n+    }\n+}\n+\n // test record_pat_field_list\n // fn foo() {\n //     let S {} = ();\n //     let S { f, ref mut g } = ();\n //     let S { h: _, ..} = ();\n //     let S { h: _, } = ();\n+//     let S { #[cfg(any())] .. } = ();\n // }\n fn record_pat_field_list(p: &mut Parser) {\n     assert!(p.at(T!['{']));\n     let m = p.start();\n     p.bump(T!['{']);\n     while !p.at(EOF) && !p.at(T!['}']) {\n+        let m = p.start();\n+        attributes::outer_attrs(p);\n+\n         match p.current() {\n             // A trailing `..` is *not* treated as a REST_PAT.\n-            T![.] if p.at(T![..]) => p.bump(T![..]),\n-            T!['{'] => error_block(p, \"expected ident\"),\n-\n+            T![.] if p.at(T![..]) => {\n+                p.bump(T![..]);\n+                m.complete(p, REST_PAT);\n+            }\n+            T!['{'] => {\n+                error_block(p, \"expected ident\");\n+                m.abandon(p);\n+            }\n             _ => {\n-                let m = p.start();\n-                attributes::outer_attrs(p);\n-                match p.current() {\n-                    // test record_pat_field\n-                    // fn foo() {\n-                    //     let S { 0: 1 } = ();\n-                    //     let S { x: 1 } = ();\n-                    //     let S { #[cfg(any())] x: 1 } = ();\n-                    // }\n-                    IDENT | INT_NUMBER if p.nth(1) == T![:] => {\n-                        name_ref_or_index(p);\n-                        p.bump(T![:]);\n-                        pattern(p);\n-                    }\n-                    T![box] => {\n-                        // FIXME: not all box patterns should be allowed\n-                        box_pat(p);\n-                    }\n-                    _ => {\n-                        ident_pat(p, false);\n-                    }\n-                }\n+                record_pat_field(p);\n                 m.complete(p, RECORD_PAT_FIELD);\n             }\n         }"}, {"sha": "3c5adb97fba107472d456709b8dec2a7e4d56415", "filename": "crates/syntax/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94fa49c0a33be4dd6ae41afb35b6f3033b01dfcc/crates%2Fsyntax%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/94fa49c0a33be4dd6ae41afb35b6f3033b01dfcc/crates%2Fsyntax%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2FCargo.toml?ref=94fa49c0a33be4dd6ae41afb35b6f3033b01dfcc", "patch": "@@ -29,7 +29,7 @@ rayon = \"1\"\n expect-test = \"1.1\"\n proc-macro2 = \"1.0.8\"\n quote = \"1.0.2\"\n-ungrammar = \"=1.14.5\"\n+ungrammar = \"=1.14.6\"\n \n test_utils = { path = \"../test_utils\" }\n sourcegen = { path = \"../sourcegen\" }"}, {"sha": "f69c87366389241149147a69e1e6a943f406be9f", "filename": "crates/syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94fa49c0a33be4dd6ae41afb35b6f3033b01dfcc/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94fa49c0a33be4dd6ae41afb35b6f3033b01dfcc/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=94fa49c0a33be4dd6ae41afb35b6f3033b01dfcc", "patch": "@@ -1290,6 +1290,7 @@ impl BoxPat {\n pub struct RestPat {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl ast::HasAttrs for RestPat {}\n impl RestPat {\n     pub fn dotdot_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![..]) }\n }\n@@ -1418,7 +1419,7 @@ pub struct RecordPatFieldList {\n impl RecordPatFieldList {\n     pub fn l_curly_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['{']) }\n     pub fn fields(&self) -> AstChildren<RecordPatField> { support::children(&self.syntax) }\n-    pub fn dotdot_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![..]) }\n+    pub fn rest_pat(&self) -> Option<RestPat> { support::child(&self.syntax) }\n     pub fn r_curly_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['}']) }\n }\n \n@@ -3836,6 +3837,7 @@ impl AstNode for AnyHasAttrs {\n             | MATCH_ARM_LIST\n             | MATCH_ARM\n             | IDENT_PAT\n+            | REST_PAT\n             | RECORD_PAT_FIELD => true,\n             _ => false,\n         }"}, {"sha": "c20e41ffae7badfaef3d96afb808f41949230b56", "filename": "crates/syntax/test_data/parser/inline/ok/0008_path_part.rast", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94fa49c0a33be4dd6ae41afb35b6f3033b01dfcc/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0008_path_part.rast", "raw_url": "https://github.com/rust-lang/rust/raw/94fa49c0a33be4dd6ae41afb35b6f3033b01dfcc/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0008_path_part.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0008_path_part.rast?ref=94fa49c0a33be4dd6ae41afb35b6f3033b01dfcc", "patch": "@@ -62,7 +62,8 @@ SOURCE_FILE@0..103\n             RECORD_PAT_FIELD_LIST@66..72\n               L_CURLY@66..67 \"{\"\n               WHITESPACE@67..68 \" \"\n-              DOT2@68..70 \"..\"\n+              REST_PAT@68..70\n+                DOT2@68..70 \"..\"\n               WHITESPACE@70..71 \" \"\n               R_CURLY@71..72 \"}\"\n           WHITESPACE@72..73 \" \""}, {"sha": "761438d2ec6c8e4b8975ea4a4095f9155193fc62", "filename": "crates/syntax/test_data/parser/inline/ok/0102_record_pat_field_list.rast", "status": "modified", "additions": 50, "deletions": 8, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/94fa49c0a33be4dd6ae41afb35b6f3033b01dfcc/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0102_record_pat_field_list.rast", "raw_url": "https://github.com/rust-lang/rust/raw/94fa49c0a33be4dd6ae41afb35b6f3033b01dfcc/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0102_record_pat_field_list.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0102_record_pat_field_list.rast?ref=94fa49c0a33be4dd6ae41afb35b6f3033b01dfcc", "patch": "@@ -1,5 +1,5 @@\n-SOURCE_FILE@0..119\n-  FN@0..118\n+SOURCE_FILE@0..156\n+  FN@0..155\n     FN_KW@0..2 \"fn\"\n     WHITESPACE@2..3 \" \"\n     NAME@3..6\n@@ -8,8 +8,8 @@ SOURCE_FILE@0..119\n       L_PAREN@6..7 \"(\"\n       R_PAREN@7..8 \")\"\n     WHITESPACE@8..9 \" \"\n-    BLOCK_EXPR@9..118\n-      STMT_LIST@9..118\n+    BLOCK_EXPR@9..155\n+      STMT_LIST@9..155\n         L_CURLY@9..10 \"{\"\n         WHITESPACE@10..15 \"\\n    \"\n         LET_STMT@15..29\n@@ -89,7 +89,8 @@ SOURCE_FILE@0..119\n                   UNDERSCORE@78..79 \"_\"\n               COMMA@79..80 \",\"\n               WHITESPACE@80..81 \" \"\n-              DOT2@81..83 \"..\"\n+              REST_PAT@81..83\n+                DOT2@81..83 \"..\"\n               R_CURLY@83..84 \"}\"\n           WHITESPACE@84..85 \" \"\n           EQ@85..86 \"=\"\n@@ -128,6 +129,47 @@ SOURCE_FILE@0..119\n             L_PAREN@113..114 \"(\"\n             R_PAREN@114..115 \")\"\n           SEMICOLON@115..116 \";\"\n-        WHITESPACE@116..117 \"\\n\"\n-        R_CURLY@117..118 \"}\"\n-  WHITESPACE@118..119 \"\\n\"\n+        WHITESPACE@116..121 \"\\n    \"\n+        LET_STMT@121..153\n+          LET_KW@121..124 \"let\"\n+          WHITESPACE@124..125 \" \"\n+          RECORD_PAT@125..147\n+            PATH@125..126\n+              PATH_SEGMENT@125..126\n+                NAME_REF@125..126\n+                  IDENT@125..126 \"S\"\n+            WHITESPACE@126..127 \" \"\n+            RECORD_PAT_FIELD_LIST@127..147\n+              L_CURLY@127..128 \"{\"\n+              WHITESPACE@128..129 \" \"\n+              REST_PAT@129..145\n+                ATTR@129..142\n+                  POUND@129..130 \"#\"\n+                  L_BRACK@130..131 \"[\"\n+                  META@131..141\n+                    PATH@131..134\n+                      PATH_SEGMENT@131..134\n+                        NAME_REF@131..134\n+                          IDENT@131..134 \"cfg\"\n+                    TOKEN_TREE@134..141\n+                      L_PAREN@134..135 \"(\"\n+                      IDENT@135..138 \"any\"\n+                      TOKEN_TREE@138..140\n+                        L_PAREN@138..139 \"(\"\n+                        R_PAREN@139..140 \")\"\n+                      R_PAREN@140..141 \")\"\n+                  R_BRACK@141..142 \"]\"\n+                WHITESPACE@142..143 \" \"\n+                DOT2@143..145 \"..\"\n+              WHITESPACE@145..146 \" \"\n+              R_CURLY@146..147 \"}\"\n+          WHITESPACE@147..148 \" \"\n+          EQ@148..149 \"=\"\n+          WHITESPACE@149..150 \" \"\n+          TUPLE_EXPR@150..152\n+            L_PAREN@150..151 \"(\"\n+            R_PAREN@151..152 \")\"\n+          SEMICOLON@152..153 \";\"\n+        WHITESPACE@153..154 \"\\n\"\n+        R_CURLY@154..155 \"}\"\n+  WHITESPACE@155..156 \"\\n\""}, {"sha": "0bfaae7c4d02622d2911d2b575bd3d10b4ab528a", "filename": "crates/syntax/test_data/parser/inline/ok/0102_record_pat_field_list.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/94fa49c0a33be4dd6ae41afb35b6f3033b01dfcc/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0102_record_pat_field_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94fa49c0a33be4dd6ae41afb35b6f3033b01dfcc/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0102_record_pat_field_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0102_record_pat_field_list.rs?ref=94fa49c0a33be4dd6ae41afb35b6f3033b01dfcc", "patch": "@@ -3,4 +3,5 @@ fn foo() {\n     let S { f, ref mut g } = ();\n     let S { h: _, ..} = ();\n     let S { h: _, } = ();\n+    let S { #[cfg(any())] .. } = ();\n }"}]}