{"sha": "165f3668d602c4eaa02125cf86fb8d12719cb441", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2NWYzNjY4ZDYwMmM0ZWFhMDIxMjVjZjg2ZmI4ZDEyNzE5Y2I0NDE=", "commit": {"author": {"name": "Djzin", "email": "djzin@users.noreply.github.com", "date": "2017-05-07T19:26:19Z"}, "committer": {"name": "Djzin", "email": "djzin@users.noreply.github.com", "date": "2017-05-07T19:26:19Z"}, "message": "optimize out stack alignment for sizes < 32", "tree": {"sha": "6d050fccd4dbadfa4defe8a01bc35b708c821e34", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d050fccd4dbadfa4defe8a01bc35b708c821e34"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/165f3668d602c4eaa02125cf86fb8d12719cb441", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/165f3668d602c4eaa02125cf86fb8d12719cb441", "html_url": "https://github.com/rust-lang/rust/commit/165f3668d602c4eaa02125cf86fb8d12719cb441", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/165f3668d602c4eaa02125cf86fb8d12719cb441/comments", "author": {"login": "djzin", "id": 22416015, "node_id": "MDQ6VXNlcjIyNDE2MDE1", "avatar_url": "https://avatars.githubusercontent.com/u/22416015?v=4", "gravatar_id": "", "url": "https://api.github.com/users/djzin", "html_url": "https://github.com/djzin", "followers_url": "https://api.github.com/users/djzin/followers", "following_url": "https://api.github.com/users/djzin/following{/other_user}", "gists_url": "https://api.github.com/users/djzin/gists{/gist_id}", "starred_url": "https://api.github.com/users/djzin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/djzin/subscriptions", "organizations_url": "https://api.github.com/users/djzin/orgs", "repos_url": "https://api.github.com/users/djzin/repos", "events_url": "https://api.github.com/users/djzin/events{/privacy}", "received_events_url": "https://api.github.com/users/djzin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "djzin", "id": 22416015, "node_id": "MDQ6VXNlcjIyNDE2MDE1", "avatar_url": "https://avatars.githubusercontent.com/u/22416015?v=4", "gravatar_id": "", "url": "https://api.github.com/users/djzin", "html_url": "https://github.com/djzin", "followers_url": "https://api.github.com/users/djzin/followers", "following_url": "https://api.github.com/users/djzin/following{/other_user}", "gists_url": "https://api.github.com/users/djzin/gists{/gist_id}", "starred_url": "https://api.github.com/users/djzin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/djzin/subscriptions", "organizations_url": "https://api.github.com/users/djzin/orgs", "repos_url": "https://api.github.com/users/djzin/repos", "events_url": "https://api.github.com/users/djzin/events{/privacy}", "received_events_url": "https://api.github.com/users/djzin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c6ca81aa921415a33e1c8f32e0c53a2c5eb6b485", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6ca81aa921415a33e1c8f32e0c53a2c5eb6b485", "html_url": "https://github.com/rust-lang/rust/commit/c6ca81aa921415a33e1c8f32e0c53a2c5eb6b485"}], "stats": {"total": 17, "additions": 12, "deletions": 5}, "files": [{"sha": "2dc1f0e04bcc846dcd9964e8967976a0f48ef12b", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/165f3668d602c4eaa02125cf86fb8d12719cb441/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/165f3668d602c4eaa02125cf86fb8d12719cb441/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=165f3668d602c4eaa02125cf86fb8d12719cb441", "patch": "@@ -453,22 +453,26 @@ pub fn swap<T>(x: &mut T, y: &mut T) {\n         // #[repr(simd)], even if we don't actually use this struct directly.\n         #[repr(simd)]\n         struct Block(u64, u64, u64, u64);\n-        let block_size = size_of::<Block>();\n+        struct UnalignedBlock(u64, u64, u64, u64);\n \n-        // Create some uninitialized memory as scratch space\n-        let mut t: Block = uninitialized();\n+        let block_size = size_of::<Block>();\n \n-        // Get raw pointers to the bytes of x, y & t for easier manipulation\n+        // Get raw pointers to the bytes of x & y for easier manipulation\n         let x = x as *mut T as *mut u8;\n         let y = y as *mut T as *mut u8;\n-        let t = &mut t as *mut _ as *mut u8;\n \n         // Loop through x & y, copying them `Block` at a time\n         // The optimizer should unroll the loop fully for most types\n         // N.B. We can't use a for loop as the `range` impl calls `mem::swap` recursively\n         let len = size_of::<T>() as isize;\n         let mut i = 0;\n         while i + block_size as isize <= len {\n+            // Create some uninitialized memory as scratch space\n+            // Moving the declaration of `t` here avoids aligning the stack when\n+            // this loop is unused\n+            let mut t: Block = uninitialized();\n+            let t = &mut t as *mut _ as *mut u8;\n+\n             // Swap a block of bytes of x & y, using t as a temporary buffer\n             // This should be optimized into efficient SIMD operations where available\n             ptr::copy_nonoverlapping(x.offset(i), t, block_size);\n@@ -478,6 +482,9 @@ pub fn swap<T>(x: &mut T, y: &mut T) {\n         }\n         if i < len {\n             // Swap any remaining bytes\n+            let mut t: UnalignedBlock = uninitialized();\n+            let t = &mut t as *mut _ as *mut u8;\n+\n             let rem = (len - i) as usize;\n             ptr::copy_nonoverlapping(x.offset(i), t, rem);\n             ptr::copy_nonoverlapping(y.offset(i), x.offset(i), rem);"}]}