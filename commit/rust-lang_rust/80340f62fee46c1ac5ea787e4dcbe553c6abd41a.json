{"sha": "80340f62fee46c1ac5ea787e4dcbe553c6abd41a", "node_id": "C_kwDOAAsO6NoAKDgwMzQwZjYyZmVlNDZjMWFjNWVhNzg3ZTRkY2JlNTUzYzZhYmQ0MWE", "commit": {"author": {"name": "JP Posma", "email": "janpaul123@users.noreply.github.com", "date": "2022-03-16T16:34:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-16T16:34:12Z"}, "message": "Docs: make Vec::from_raw_parts documentation less strict\n\nThis is my first PR; be gentle!\r\n\r\nIn https://users.rust-lang.org/t/why-does-vec-from-raw-parts-require-same-size-and-not-same-size-capacity/73036/2?u=janpaul123 it was suggested to me that I should make a PR to make the documentation of `Vec::from_raw_parts` less strict, since we don't require `T` to have the same size, just `size_of::<T>() * capacity` to be the same, since that is what results in `Layout::size` being the same in `dealloc`, which is really what matters.\r\n\r\nAlso in https://users.rust-lang.org/t/why-does-vec-from-raw-parts-require-same-size-and-not-same-size-capacity/73036/8?u=janpaul123 it was suggested that it's better to use `slice::from_raw_parts`, which I think is useful advise that could also be mentioned in the docs, so I added that too.\r\n\r\nLet me know what you think! :)", "tree": {"sha": "7256127b11375cf0bd94324fa5862cd48035b7eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7256127b11375cf0bd94324fa5862cd48035b7eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/80340f62fee46c1ac5ea787e4dcbe553c6abd41a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiMhGECRBK7hj4Ov3rIwAA3d8IABWvDysoYCXZ0gDrNQKxEvQw\nVqJJ+EwT9vZHRvd1XG0j3SxhPFZ+49lCulFL01QVrHVjcu4/HyAr3G/58fkdiW3f\nehtshplCjoGbYNr9mhPaJll6XeEOKzVFu/JLP85Xm9py7TcQXi3MHriwQqoPv/zE\nzESQthBPt5vkX2zRsFgTvRRk0gynpF83xHGwPxrF1arSdDQ8o7bqqEs3lR5vbRnW\nCnAaUxN0GKiGfLky2F2ixFbKHLeL+HI0ipXB6/V7CP9F8ealnmjbQeFL55bk99JE\nDgVj2eChmX4biMXCZP2JUaX7Ph7MnRZ7F8tndyBqg465IR7Dc6jADTs64NWhbbY=\n=6hFQ\n-----END PGP SIGNATURE-----\n", "payload": "tree 7256127b11375cf0bd94324fa5862cd48035b7eb\nparent 461e8078010433ff7de2db2aaae8a3cfb0847215\nauthor JP Posma <janpaul123@users.noreply.github.com> 1647448452 -0700\ncommitter GitHub <noreply@github.com> 1647448452 -0700\n\nDocs: make Vec::from_raw_parts documentation less strict\n\nThis is my first PR; be gentle!\r\n\r\nIn https://users.rust-lang.org/t/why-does-vec-from-raw-parts-require-same-size-and-not-same-size-capacity/73036/2?u=janpaul123 it was suggested to me that I should make a PR to make the documentation of `Vec::from_raw_parts` less strict, since we don't require `T` to have the same size, just `size_of::<T>() * capacity` to be the same, since that is what results in `Layout::size` being the same in `dealloc`, which is really what matters.\r\n\r\nAlso in https://users.rust-lang.org/t/why-does-vec-from-raw-parts-require-same-size-and-not-same-size-capacity/73036/8?u=janpaul123 it was suggested that it's better to use `slice::from_raw_parts`, which I think is useful advise that could also be mentioned in the docs, so I added that too.\r\n\r\nLet me know what you think! :)"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/80340f62fee46c1ac5ea787e4dcbe553c6abd41a", "html_url": "https://github.com/rust-lang/rust/commit/80340f62fee46c1ac5ea787e4dcbe553c6abd41a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/80340f62fee46c1ac5ea787e4dcbe553c6abd41a/comments", "author": {"login": "janpaul123", "id": 177461, "node_id": "MDQ6VXNlcjE3NzQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/177461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janpaul123", "html_url": "https://github.com/janpaul123", "followers_url": "https://api.github.com/users/janpaul123/followers", "following_url": "https://api.github.com/users/janpaul123/following{/other_user}", "gists_url": "https://api.github.com/users/janpaul123/gists{/gist_id}", "starred_url": "https://api.github.com/users/janpaul123/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janpaul123/subscriptions", "organizations_url": "https://api.github.com/users/janpaul123/orgs", "repos_url": "https://api.github.com/users/janpaul123/repos", "events_url": "https://api.github.com/users/janpaul123/events{/privacy}", "received_events_url": "https://api.github.com/users/janpaul123/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "461e8078010433ff7de2db2aaae8a3cfb0847215", "url": "https://api.github.com/repos/rust-lang/rust/commits/461e8078010433ff7de2db2aaae8a3cfb0847215", "html_url": "https://github.com/rust-lang/rust/commit/461e8078010433ff7de2db2aaae8a3cfb0847215"}], "stats": {"total": 10, "additions": 7, "deletions": 3}, "files": [{"sha": "13d13a9d7d123d4b9bae32f0b1eef635500954b1", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/80340f62fee46c1ac5ea787e4dcbe553c6abd41a/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80340f62fee46c1ac5ea787e4dcbe553c6abd41a/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=80340f62fee46c1ac5ea787e4dcbe553c6abd41a", "patch": "@@ -479,20 +479,24 @@ impl<T> Vec<T> {\n     ///\n     /// * `ptr` needs to have been previously allocated via [`String`]/`Vec<T>`\n     ///   (at least, it's highly likely to be incorrect if it wasn't).\n-    /// * `T` needs to have the same size and alignment as what `ptr` was allocated with.\n+    /// * `T` needs to have the same alignment as what `ptr` was allocated with.\n     ///   (`T` having a less strict alignment is not sufficient, the alignment really\n     ///   needs to be equal to satisfy the [`dealloc`] requirement that memory must be\n     ///   allocated and deallocated with the same layout.)\n+    /// * The size of `T` times the `capacity` (ie. the allocated size in bytes) needs\n+    ///   to be the same size as the pointer was allocated with. (Because similar to\n+    ///   alignment, [`dealloc`] must be called with the same layout `size`.)\n     /// * `length` needs to be less than or equal to `capacity`.\n-    /// * `capacity` needs to be the capacity that the pointer was allocated with.\n     ///\n     /// Violating these may cause problems like corrupting the allocator's\n     /// internal data structures. For example it is **not** safe\n     /// to build a `Vec<u8>` from a pointer to a C `char` array with length `size_t`.\n     /// It's also not safe to build one from a `Vec<u16>` and its length, because\n     /// the allocator cares about the alignment, and these two types have different\n     /// alignments. The buffer was allocated with alignment 2 (for `u16`), but after\n-    /// turning it into a `Vec<u8>` it'll be deallocated with alignment 1.\n+    /// turning it into a `Vec<u8>` it'll be deallocated with alignment 1. To avoid\n+    /// these issues, it is often preferable to do casting/transmuting using\n+    /// [`slice::from_raw_parts`] instead.\n     ///\n     /// The ownership of `ptr` is effectively transferred to the\n     /// `Vec<T>` which may then deallocate, reallocate or change the"}]}