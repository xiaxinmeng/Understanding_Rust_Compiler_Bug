{"sha": "abf2e7aa959a4611bc2f607bc7e9200b8b81c089", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiZjJlN2FhOTU5YTQ2MTFiYzJmNjA3YmM3ZTkyMDBiOGI4MWMwODk=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-07T23:08:09Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-12T17:05:05Z"}, "message": "Remove `ast::{Impl,Trait}{Item,ItemKind}`.", "tree": {"sha": "74750f2a8b65450bc7b091921681ce63684da9ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/74750f2a8b65450bc7b091921681ce63684da9ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/abf2e7aa959a4611bc2f607bc7e9200b8b81c089", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/abf2e7aa959a4611bc2f607bc7e9200b8b81c089", "html_url": "https://github.com/rust-lang/rust/commit/abf2e7aa959a4611bc2f607bc7e9200b8b81c089", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/abf2e7aa959a4611bc2f607bc7e9200b8b81c089/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35e9e097e7c7e977f36795c0febceb327e1fa33f", "url": "https://api.github.com/repos/rust-lang/rust/commits/35e9e097e7c7e977f36795c0febceb327e1fa33f", "html_url": "https://github.com/rust-lang/rust/commit/35e9e097e7c7e977f36795c0febceb327e1fa33f"}], "stats": {"total": 257, "additions": 123, "deletions": 134}, "files": [{"sha": "78df14adc5d6d3a90d22e657878ec883cc41e952", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/abf2e7aa959a4611bc2f607bc7e9200b8b81c089/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abf2e7aa959a4611bc2f607bc7e9200b8b81c089/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=abf2e7aa959a4611bc2f607bc7e9200b8b81c089", "patch": "@@ -477,11 +477,11 @@ impl<'a> LoweringContext<'a> {\n                 });\n             }\n \n-            fn visit_trait_item(&mut self, item: &'tcx TraitItem) {\n+            fn visit_trait_item(&mut self, item: &'tcx AssocItem) {\n                 self.lctx.allocate_hir_id_counter(item.id);\n \n                 match item.kind {\n-                    TraitItemKind::Method(_, None) => {\n+                    AssocItemKind::Method(_, None) => {\n                         // Ignore patterns in trait methods without bodies\n                         self.with_hir_id_owner(None, |this| {\n                             visit::walk_trait_item(this, item)\n@@ -493,7 +493,7 @@ impl<'a> LoweringContext<'a> {\n                 }\n             }\n \n-            fn visit_impl_item(&mut self, item: &'tcx ImplItem) {\n+            fn visit_impl_item(&mut self, item: &'tcx AssocItem) {\n                 self.lctx.allocate_hir_id_counter(item.id);\n                 self.with_hir_id_owner(Some(item.id), |this| {\n                     visit::walk_impl_item(this, item);"}, {"sha": "f25714f741b8da45737b66d3ce89612738904cfe", "filename": "src/librustc/hir/lowering/item.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/abf2e7aa959a4611bc2f607bc7e9200b8b81c089/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abf2e7aa959a4611bc2f607bc7e9200b8b81c089/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs?ref=abf2e7aa959a4611bc2f607bc7e9200b8b81c089", "patch": "@@ -86,7 +86,7 @@ impl<'tcx, 'interner> Visitor<'tcx> for ItemLowerer<'tcx, 'interner> {\n         }\n     }\n \n-    fn visit_trait_item(&mut self, item: &'tcx TraitItem) {\n+    fn visit_trait_item(&mut self, item: &'tcx AssocItem) {\n         self.lctx.with_hir_id_owner(item.id, |lctx| {\n             let hir_item = lctx.lower_trait_item(item);\n             let id = hir::TraitItemId { hir_id: hir_item.hir_id };\n@@ -97,7 +97,7 @@ impl<'tcx, 'interner> Visitor<'tcx> for ItemLowerer<'tcx, 'interner> {\n         visit::walk_assoc_item(self, item);\n     }\n \n-    fn visit_impl_item(&mut self, item: &'tcx ImplItem) {\n+    fn visit_impl_item(&mut self, item: &'tcx AssocItem) {\n         self.lctx.with_hir_id_owner(item.id, |lctx| {\n             let hir_item = lctx.lower_impl_item(item);\n             let id = hir::ImplItemId { hir_id: hir_item.hir_id };\n@@ -813,11 +813,11 @@ impl LoweringContext<'_> {\n         }\n     }\n \n-    fn lower_trait_item(&mut self, i: &TraitItem) -> hir::TraitItem {\n+    fn lower_trait_item(&mut self, i: &AssocItem) -> hir::TraitItem {\n         let trait_item_def_id = self.resolver.definitions().local_def_id(i.id);\n \n         let (generics, kind) = match i.kind {\n-            TraitItemKind::Const(ref ty, ref default) => (\n+            AssocItemKind::Const(ref ty, ref default) => (\n                 self.lower_generics(&i.generics, ImplTraitContext::disallowed()),\n                 hir::TraitItemKind::Const(\n                     self.lower_ty(ty, ImplTraitContext::disallowed()),\n@@ -826,7 +826,7 @@ impl LoweringContext<'_> {\n                         .map(|x| self.lower_const_body(i.span, Some(x))),\n                 ),\n             ),\n-            TraitItemKind::Method(ref sig, None) => {\n+            AssocItemKind::Method(ref sig, None) => {\n                 let names = self.lower_fn_params_to_names(&sig.decl);\n                 let (generics, sig) = self.lower_method_sig(\n                     &i.generics,\n@@ -837,7 +837,7 @@ impl LoweringContext<'_> {\n                 );\n                 (generics, hir::TraitItemKind::Method(sig, hir::TraitMethod::Required(names)))\n             }\n-            TraitItemKind::Method(ref sig, Some(ref body)) => {\n+            AssocItemKind::Method(ref sig, Some(ref body)) => {\n                 let body_id = self.lower_fn_body_block(i.span, &sig.decl, Some(body));\n                 let (generics, sig) = self.lower_method_sig(\n                     &i.generics,\n@@ -848,7 +848,7 @@ impl LoweringContext<'_> {\n                 );\n                 (generics, hir::TraitItemKind::Method(sig, hir::TraitMethod::Provided(body_id)))\n             }\n-            TraitItemKind::TyAlias(ref bounds, ref default) => {\n+            AssocItemKind::TyAlias(ref bounds, ref default) => {\n                 let generics = self.lower_generics(&i.generics, ImplTraitContext::disallowed());\n                 let kind = hir::TraitItemKind::Type(\n                     self.lower_param_bounds(bounds, ImplTraitContext::disallowed()),\n@@ -859,7 +859,7 @@ impl LoweringContext<'_> {\n \n                 (generics, kind)\n             },\n-            TraitItemKind::Macro(..) => bug!(\"macro item shouldn't exist at this point\"),\n+            AssocItemKind::Macro(..) => bug!(\"macro item shouldn't exist at this point\"),\n         };\n \n         hir::TraitItem {\n@@ -872,21 +872,21 @@ impl LoweringContext<'_> {\n         }\n     }\n \n-    fn lower_trait_item_ref(&mut self, i: &TraitItem) -> hir::TraitItemRef {\n+    fn lower_trait_item_ref(&mut self, i: &AssocItem) -> hir::TraitItemRef {\n         let (kind, has_default) = match i.kind {\n-            TraitItemKind::Const(_, ref default) => {\n+            AssocItemKind::Const(_, ref default) => {\n                 (hir::AssocItemKind::Const, default.is_some())\n             }\n-            TraitItemKind::TyAlias(_, ref default) => {\n+            AssocItemKind::TyAlias(_, ref default) => {\n                 (hir::AssocItemKind::Type, default.is_some())\n             }\n-            TraitItemKind::Method(ref sig, ref default) => (\n+            AssocItemKind::Method(ref sig, ref default) => (\n                 hir::AssocItemKind::Method {\n                     has_self: sig.decl.has_self(),\n                 },\n                 default.is_some(),\n             ),\n-            TraitItemKind::Macro(..) => unimplemented!(),\n+            AssocItemKind::Macro(..) => unimplemented!(),\n         };\n         hir::TraitItemRef {\n             id: hir::TraitItemId { hir_id: self.lower_node_id(i.id) },\n@@ -902,18 +902,18 @@ impl LoweringContext<'_> {\n         self.expr(span, hir::ExprKind::Err, ThinVec::new())\n     }\n \n-    fn lower_impl_item(&mut self, i: &ImplItem) -> hir::ImplItem {\n+    fn lower_impl_item(&mut self, i: &AssocItem) -> hir::ImplItem {\n         let impl_item_def_id = self.resolver.definitions().local_def_id(i.id);\n \n         let (generics, kind) = match i.kind {\n-            ImplItemKind::Const(ref ty, ref expr) => (\n+            AssocItemKind::Const(ref ty, ref expr) => (\n                 self.lower_generics(&i.generics, ImplTraitContext::disallowed()),\n                 hir::ImplItemKind::Const(\n                     self.lower_ty(ty, ImplTraitContext::disallowed()),\n                     self.lower_const_body(i.span, expr.as_deref()),\n                 ),\n             ),\n-            ImplItemKind::Method(ref sig, ref body) => {\n+            AssocItemKind::Method(ref sig, ref body) => {\n                 self.current_item = Some(i.span);\n                 let body_id = self.lower_maybe_async_body(\n                     i.span,\n@@ -932,7 +932,7 @@ impl LoweringContext<'_> {\n \n                 (generics, hir::ImplItemKind::Method(sig, body_id))\n             }\n-            ImplItemKind::TyAlias(_, ref ty) => {\n+            AssocItemKind::TyAlias(_, ref ty) => {\n                 let generics = self.lower_generics(&i.generics, ImplTraitContext::disallowed());\n                 let kind = match ty {\n                     None => {\n@@ -951,7 +951,7 @@ impl LoweringContext<'_> {\n                 };\n                 (generics, kind)\n             },\n-            ImplItemKind::Macro(..) => bug!(\"`TyMac` should have been expanded by now\"),\n+            AssocItemKind::Macro(..) => bug!(\"`TyMac` should have been expanded by now\"),\n         };\n \n         hir::ImplItem {\n@@ -968,26 +968,26 @@ impl LoweringContext<'_> {\n         // [1] since `default impl` is not yet implemented, this is always true in impls\n     }\n \n-    fn lower_impl_item_ref(&mut self, i: &ImplItem) -> hir::ImplItemRef {\n+    fn lower_impl_item_ref(&mut self, i: &AssocItem) -> hir::ImplItemRef {\n         hir::ImplItemRef {\n             id: hir::ImplItemId { hir_id: self.lower_node_id(i.id) },\n             ident: i.ident,\n             span: i.span,\n             vis: self.lower_visibility(&i.vis, Some(i.id)),\n             defaultness: self.lower_defaultness(i.defaultness, true /* [1] */),\n             kind: match &i.kind {\n-                ImplItemKind::Const(..) => hir::AssocItemKind::Const,\n-                ImplItemKind::TyAlias(_, ty) => match ty\n+                AssocItemKind::Const(..) => hir::AssocItemKind::Const,\n+                AssocItemKind::TyAlias(_, ty) => match ty\n                     .as_deref()\n                     .and_then(|ty| ty.kind.opaque_top_hack())\n                 {\n                     None => hir::AssocItemKind::Type,\n                     Some(_) => hir::AssocItemKind::OpaqueTy,\n                 },\n-                ImplItemKind::Method(sig, _) => hir::AssocItemKind::Method {\n+                AssocItemKind::Method(sig, _) => hir::AssocItemKind::Method {\n                     has_self: sig.decl.has_self(),\n                 },\n-                ImplItemKind::Macro(..) => unimplemented!(),\n+                AssocItemKind::Macro(..) => unimplemented!(),\n             },\n         }\n "}, {"sha": "0fdd509a0bbec6c79b87977e5cad5b639bf9e12c", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/abf2e7aa959a4611bc2f607bc7e9200b8b81c089/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abf2e7aa959a4611bc2f607bc7e9200b8b81c089/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=abf2e7aa959a4611bc2f607bc7e9200b8b81c089", "patch": "@@ -1249,15 +1249,15 @@ impl<'a, T: EarlyLintPass> ast_visit::Visitor<'a> for EarlyContextAndPass<'a, T>\n         ast_visit::walk_poly_trait_ref(self, t, m);\n     }\n \n-    fn visit_trait_item(&mut self, trait_item: &'a ast::TraitItem) {\n+    fn visit_trait_item(&mut self, trait_item: &'a ast::AssocItem) {\n         self.with_lint_attrs(trait_item.id, &trait_item.attrs, |cx| {\n             run_early_pass!(cx, check_trait_item, trait_item);\n             ast_visit::walk_trait_item(cx, trait_item);\n             run_early_pass!(cx, check_trait_item_post, trait_item);\n         });\n     }\n \n-    fn visit_impl_item(&mut self, impl_item: &'a ast::ImplItem) {\n+    fn visit_impl_item(&mut self, impl_item: &'a ast::AssocItem) {\n         self.with_lint_attrs(impl_item.id, &impl_item.attrs, |cx| {\n             run_early_pass!(cx, check_impl_item, impl_item);\n             ast_visit::walk_impl_item(cx, impl_item);"}, {"sha": "0054f149f8c2753fde9ef532ddfd73c20a8d05c3", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/abf2e7aa959a4611bc2f607bc7e9200b8b81c089/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abf2e7aa959a4611bc2f607bc7e9200b8b81c089/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=abf2e7aa959a4611bc2f607bc7e9200b8b81c089", "patch": "@@ -258,10 +258,10 @@ macro_rules! early_lint_methods {\n                 c: Span,\n                 d: ast::NodeId\n             );\n-            fn check_trait_item(a: &ast::TraitItem);\n-            fn check_trait_item_post(a: &ast::TraitItem);\n-            fn check_impl_item(a: &ast::ImplItem);\n-            fn check_impl_item_post(a: &ast::ImplItem);\n+            fn check_trait_item(a: &ast::AssocItem);\n+            fn check_trait_item_post(a: &ast::AssocItem);\n+            fn check_impl_item(a: &ast::AssocItem);\n+            fn check_impl_item_post(a: &ast::AssocItem);\n             fn check_struct_def(a: &ast::VariantData);\n             fn check_struct_def_post(a: &ast::VariantData);\n             fn check_struct_field(a: &ast::StructField);"}, {"sha": "da8eae6028e36070c1a8bd3030d67a8b09a23ab4", "filename": "src/librustc_interface/util.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/abf2e7aa959a4611bc2f607bc7e9200b8b81c089/src%2Flibrustc_interface%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abf2e7aa959a4611bc2f607bc7e9200b8b81c089/src%2Flibrustc_interface%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Futil.rs?ref=abf2e7aa959a4611bc2f607bc7e9200b8b81c089", "patch": "@@ -776,22 +776,17 @@ impl<'a> MutVisitor for ReplaceBodyWithLoop<'a, '_> {\n         self.run(is_const, |s| noop_visit_item_kind(i, s))\n     }\n \n-    fn flat_map_trait_item(&mut self, i: ast::TraitItem) -> SmallVec<[ast::TraitItem; 1]> {\n+    fn flat_map_trait_item(&mut self, i: ast::AssocItem) -> SmallVec<[ast::AssocItem; 1]> {\n         let is_const = match i.kind {\n-            ast::TraitItemKind::Const(..) => true,\n-            ast::TraitItemKind::Method(ref sig, _) => Self::is_sig_const(sig),\n+            ast::AssocItemKind::Const(..) => true,\n+            ast::AssocItemKind::Method(ref sig, _) => Self::is_sig_const(sig),\n             _ => false,\n         };\n         self.run(is_const, |s| noop_flat_map_assoc_item(i, s))\n     }\n \n-    fn flat_map_impl_item(&mut self, i: ast::ImplItem) -> SmallVec<[ast::ImplItem; 1]> {\n-        let is_const = match i.kind {\n-            ast::ImplItemKind::Const(..) => true,\n-            ast::ImplItemKind::Method(ref sig, _) => Self::is_sig_const(sig),\n-            _ => false,\n-        };\n-        self.run(is_const, |s| noop_flat_map_assoc_item(i, s))\n+    fn flat_map_impl_item(&mut self, i: ast::AssocItem) -> SmallVec<[ast::AssocItem; 1]> {\n+        self.flat_map_trait_item(i)\n     }\n \n     fn visit_anon_const(&mut self, c: &mut ast::AnonConst) {"}, {"sha": "8916fc088387156d4b36b49df8ffcaea17bf66d0", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/abf2e7aa959a4611bc2f607bc7e9200b8b81c089/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abf2e7aa959a4611bc2f607bc7e9200b8b81c089/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=abf2e7aa959a4611bc2f607bc7e9200b8b81c089", "patch": "@@ -268,8 +268,8 @@ impl EarlyLintPass for UnsafeCode {\n         }\n     }\n \n-    fn check_trait_item(&mut self, cx: &EarlyContext<'_>, item: &ast::TraitItem) {\n-        if let ast::TraitItemKind::Method(ref sig, None) = item.kind {\n+    fn check_trait_item(&mut self, cx: &EarlyContext<'_>, item: &ast::AssocItem) {\n+        if let ast::AssocItemKind::Method(ref sig, None) = item.kind {\n             if sig.header.unsafety == ast::Unsafety::Unsafe {\n                 self.report_unsafe(cx, item.span, \"declaration of an `unsafe` method\")\n             }\n@@ -615,9 +615,9 @@ declare_lint_pass!(\n );\n \n impl EarlyLintPass for AnonymousParameters {\n-    fn check_trait_item(&mut self, cx: &EarlyContext<'_>, it: &ast::TraitItem) {\n+    fn check_trait_item(&mut self, cx: &EarlyContext<'_>, it: &ast::AssocItem) {\n         match it.kind {\n-            ast::TraitItemKind::Method(ref sig, _) => {\n+            ast::AssocItemKind::Method(ref sig, _) => {\n                 for arg in sig.decl.inputs.iter() {\n                     match arg.pat.kind {\n                         ast::PatKind::Ident(_, ident, None) => {"}, {"sha": "609885cb254b77ae565967b95a5ebae7b558c738", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abf2e7aa959a4611bc2f607bc7e9200b8b81c089/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abf2e7aa959a4611bc2f607bc7e9200b8b81c089/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=abf2e7aa959a4611bc2f607bc7e9200b8b81c089", "patch": "@@ -544,7 +544,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                 }\n                 for impl_item in impl_items {\n                     self.invalid_visibility(&impl_item.vis, None);\n-                    if let ImplItemKind::Method(ref sig, _) = impl_item.kind {\n+                    if let AssocItemKind::Method(ref sig, _) = impl_item.kind {\n                         self.check_trait_fn_not_const(sig.header.constness);\n                         self.check_trait_fn_not_async(impl_item.span, sig.header.asyncness.node);\n                     }"}, {"sha": "66ceb4212c8aca9423e0a6505567420334613408", "filename": "src/librustc_passes/hir_stats.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/abf2e7aa959a4611bc2f607bc7e9200b8b81c089/src%2Flibrustc_passes%2Fhir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abf2e7aa959a4611bc2f607bc7e9200b8b81c089/src%2Flibrustc_passes%2Fhir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fhir_stats.rs?ref=abf2e7aa959a4611bc2f607bc7e9200b8b81c089", "patch": "@@ -314,12 +314,12 @@ impl<'v> ast_visit::Visitor<'v> for StatCollector<'v> {\n         ast_visit::walk_fn(self, fk, fd, s)\n     }\n \n-    fn visit_trait_item(&mut self, ti: &'v ast::TraitItem) {\n+    fn visit_trait_item(&mut self, ti: &'v ast::AssocItem) {\n         self.record(\"TraitItem\", Id::None, ti);\n         ast_visit::walk_trait_item(self, ti)\n     }\n \n-    fn visit_impl_item(&mut self, ii: &'v ast::ImplItem) {\n+    fn visit_impl_item(&mut self, ii: &'v ast::AssocItem) {\n         self.record(\"ImplItem\", Id::None, ii);\n         ast_visit::walk_impl_item(self, ii)\n     }"}, {"sha": "dc3013754404b39323a6e5ce6f9d9d80248d38e7", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/abf2e7aa959a4611bc2f607bc7e9200b8b81c089/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abf2e7aa959a4611bc2f607bc7e9200b8b81c089/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=abf2e7aa959a4611bc2f607bc7e9200b8b81c089", "patch": "@@ -30,7 +30,7 @@ use errors::Applicability;\n use syntax::ast::{Name, Ident};\n use syntax::attr;\n use syntax::ast::{self, Block, ForeignItem, ForeignItemKind, Item, ItemKind, NodeId};\n-use syntax::ast::{MetaItemKind, StmtKind, TraitItem, TraitItemKind};\n+use syntax::ast::{MetaItemKind, StmtKind, AssocItem, AssocItemKind};\n use syntax::token::{self, Token};\n use syntax::span_err;\n use syntax::source_map::{respan, Spanned};\n@@ -1164,26 +1164,26 @@ impl<'a, 'b> Visitor<'b> for BuildReducedGraphVisitor<'a, 'b> {\n         self.parent_scope.legacy = orig_current_legacy_scope;\n     }\n \n-    fn visit_trait_item(&mut self, item: &'b TraitItem) {\n+    fn visit_trait_item(&mut self, item: &'b AssocItem) {\n         let parent = self.parent_scope.module;\n \n-        if let TraitItemKind::Macro(_) = item.kind {\n+        if let AssocItemKind::Macro(_) = item.kind {\n             self.visit_invoc(item.id);\n             return\n         }\n \n         // Add the item to the trait info.\n         let item_def_id = self.r.definitions.local_def_id(item.id);\n         let (res, ns) = match item.kind {\n-            TraitItemKind::Const(..) => (Res::Def(DefKind::AssocConst, item_def_id), ValueNS),\n-            TraitItemKind::Method(ref sig, _) => {\n+            AssocItemKind::Const(..) => (Res::Def(DefKind::AssocConst, item_def_id), ValueNS),\n+            AssocItemKind::Method(ref sig, _) => {\n                 if sig.decl.has_self() {\n                     self.r.has_self.insert(item_def_id);\n                 }\n                 (Res::Def(DefKind::Method, item_def_id), ValueNS)\n             }\n-            TraitItemKind::TyAlias(..) => (Res::Def(DefKind::AssocTy, item_def_id), TypeNS),\n-            TraitItemKind::Macro(_) => bug!(),  // handled above\n+            AssocItemKind::TyAlias(..) => (Res::Def(DefKind::AssocTy, item_def_id), TypeNS),\n+            AssocItemKind::Macro(_) => bug!(),  // handled above\n         };\n \n         let vis = ty::Visibility::Public;\n@@ -1193,8 +1193,8 @@ impl<'a, 'b> Visitor<'b> for BuildReducedGraphVisitor<'a, 'b> {\n         visit::walk_trait_item(self, item);\n     }\n \n-    fn visit_impl_item(&mut self, item: &'b ast::ImplItem) {\n-        if let ast::ImplItemKind::Macro(..) = item.kind {\n+    fn visit_impl_item(&mut self, item: &'b ast::AssocItem) {\n+        if let ast::AssocItemKind::Macro(..) = item.kind {\n             self.visit_invoc(item.id);\n         } else {\n             self.resolve_visibility(&item.vis);"}, {"sha": "6e26553d82f8262fe5e3272fd189d476f2e22d95", "filename": "src/librustc_resolve/def_collector.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/abf2e7aa959a4611bc2f607bc7e9200b8b81c089/src%2Flibrustc_resolve%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abf2e7aa959a4611bc2f607bc7e9200b8b81c089/src%2Flibrustc_resolve%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdef_collector.rs?ref=abf2e7aa959a4611bc2f607bc7e9200b8b81c089", "patch": "@@ -212,23 +212,23 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n         visit::walk_generic_param(self, param);\n     }\n \n-    fn visit_trait_item(&mut self, ti: &'a TraitItem) {\n+    fn visit_trait_item(&mut self, ti: &'a AssocItem) {\n         let def_data = match ti.kind {\n-            TraitItemKind::Method(..) | TraitItemKind::Const(..) =>\n+            AssocItemKind::Method(..) | AssocItemKind::Const(..) =>\n                 DefPathData::ValueNs(ti.ident.name),\n-            TraitItemKind::TyAlias(..) => {\n+            AssocItemKind::TyAlias(..) => {\n                 DefPathData::TypeNs(ti.ident.name)\n             },\n-            TraitItemKind::Macro(..) => return self.visit_macro_invoc(ti.id),\n+            AssocItemKind::Macro(..) => return self.visit_macro_invoc(ti.id),\n         };\n \n         let def = self.create_def(ti.id, def_data, ti.span);\n         self.with_parent(def, |this| visit::walk_trait_item(this, ti));\n     }\n \n-    fn visit_impl_item(&mut self, ii: &'a ImplItem) {\n+    fn visit_impl_item(&mut self, ii: &'a AssocItem) {\n         let def_data = match ii.kind {\n-            ImplItemKind::Method(FnSig {\n+            AssocItemKind::Method(FnSig {\n                 ref header,\n                 ref decl,\n             }, ref body) if header.asyncness.node.is_async() => {\n@@ -242,10 +242,10 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n                     body.as_deref(),\n                 )\n             }\n-            ImplItemKind::Method(..) |\n-            ImplItemKind::Const(..) => DefPathData::ValueNs(ii.ident.name),\n-            ImplItemKind::TyAlias(..) => DefPathData::TypeNs(ii.ident.name),\n-            ImplItemKind::Macro(..) => return self.visit_macro_invoc(ii.id),\n+            AssocItemKind::Method(..) |\n+            AssocItemKind::Const(..) => DefPathData::ValueNs(ii.ident.name),\n+            AssocItemKind::TyAlias(..) => DefPathData::TypeNs(ii.ident.name),\n+            AssocItemKind::Macro(..) => return self.visit_macro_invoc(ii.id),\n         };\n \n         let def = self.create_def(ii.id, def_data, ii.span);"}, {"sha": "ad29fd9e1db1e62e1cd5eb7eb4e6c414623a1d34", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/abf2e7aa959a4611bc2f607bc7e9200b8b81c089/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abf2e7aa959a4611bc2f607bc7e9200b8b81c089/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=abf2e7aa959a4611bc2f607bc7e9200b8b81c089", "patch": "@@ -806,7 +806,7 @@ impl<'a, 'b> LateResolutionVisitor<'a, '_> {\n                                 this.with_generic_param_rib(&trait_item.generics, AssocItemRibKind,\n                                     |this| {\n                                         match trait_item.kind {\n-                                            TraitItemKind::Const(ref ty, ref default) => {\n+                                            AssocItemKind::Const(ref ty, ref default) => {\n                                                 this.visit_ty(ty);\n \n                                                 // Only impose the restrictions of\n@@ -818,13 +818,13 @@ impl<'a, 'b> LateResolutionVisitor<'a, '_> {\n                                                     });\n                                                 }\n                                             }\n-                                            TraitItemKind::Method(_, _) => {\n+                                            AssocItemKind::Method(_, _) => {\n                                                 visit::walk_assoc_item(this, trait_item)\n                                             }\n-                                            TraitItemKind::TyAlias(..) => {\n+                                            AssocItemKind::TyAlias(..) => {\n                                                 visit::walk_assoc_item(this, trait_item)\n                                             }\n-                                            TraitItemKind::Macro(_) => {\n+                                            AssocItemKind::Macro(_) => {\n                                                 panic!(\"unexpanded macro in resolve!\")\n                                             }\n                                         };\n@@ -989,13 +989,13 @@ impl<'a, 'b> LateResolutionVisitor<'a, '_> {\n     /// When evaluating a `trait` use its associated types' idents for suggestionsa in E0412.\n     fn with_trait_items<T>(\n         &mut self,\n-        trait_items: &Vec<TraitItem>,\n+        trait_items: &Vec<AssocItem>,\n         f: impl FnOnce(&mut Self) -> T,\n     ) -> T {\n         let trait_assoc_types = replace(\n             &mut self.diagnostic_metadata.current_trait_assoc_types,\n             trait_items.iter().filter_map(|item| match &item.kind {\n-                TraitItemKind::TyAlias(bounds, _) if bounds.len() == 0 => Some(item.ident),\n+                AssocItemKind::TyAlias(bounds, _) if bounds.len() == 0 => Some(item.ident),\n                 _ => None,\n             }).collect(),\n         );\n@@ -1063,7 +1063,7 @@ impl<'a, 'b> LateResolutionVisitor<'a, '_> {\n                               opt_trait_reference: &Option<TraitRef>,\n                               self_type: &Ty,\n                               item_id: NodeId,\n-                              impl_items: &[ImplItem]) {\n+                              impl_items: &[AssocItem]) {\n         debug!(\"resolve_implementation\");\n         // If applicable, create a rib for the type parameters.\n         self.with_generic_param_rib(generics, ItemRibKind(HasGenericParams::Yes), |this| {\n@@ -1092,9 +1092,9 @@ impl<'a, 'b> LateResolutionVisitor<'a, '_> {\n                                                                 |this| {\n                                         use crate::ResolutionError::*;\n                                         match impl_item.kind {\n-                                            ImplItemKind::Const(..) => {\n+                                            AssocItemKind::Const(..) => {\n                                                 debug!(\n-                                                    \"resolve_implementation ImplItemKind::Const\",\n+                                                    \"resolve_implementation AssocItemKind::Const\",\n                                                 );\n                                                 // If this is a trait impl, ensure the const\n                                                 // exists in trait\n@@ -1109,7 +1109,7 @@ impl<'a, 'b> LateResolutionVisitor<'a, '_> {\n                                                     visit::walk_assoc_item(this, impl_item)\n                                                 });\n                                             }\n-                                            ImplItemKind::Method(..) => {\n+                                            AssocItemKind::Method(..) => {\n                                                 // If this is a trait impl, ensure the method\n                                                 // exists in trait\n                                                 this.check_trait_item(impl_item.ident,\n@@ -1119,7 +1119,7 @@ impl<'a, 'b> LateResolutionVisitor<'a, '_> {\n \n                                                 visit::walk_assoc_item(this, impl_item);\n                                             }\n-                                            ImplItemKind::TyAlias(_, Some(ref ty)) => {\n+                                            AssocItemKind::TyAlias(_, Some(ref ty)) => {\n                                                 // If this is a trait impl, ensure the type\n                                                 // exists in trait\n                                                 this.check_trait_item(impl_item.ident,\n@@ -1129,8 +1129,8 @@ impl<'a, 'b> LateResolutionVisitor<'a, '_> {\n \n                                                 this.visit_ty(ty);\n                                             }\n-                                            ImplItemKind::TyAlias(_, None) => {}\n-                                            ImplItemKind::Macro(_) =>\n+                                            AssocItemKind::TyAlias(_, None) => {}\n+                                            AssocItemKind::Macro(_) =>\n                                                 panic!(\"unexpanded macro in resolve!\"),\n                                         }\n                                     });"}, {"sha": "3b36c1c70f9f2ff905bca78401feae21eee8ba49", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/abf2e7aa959a4611bc2f607bc7e9200b8b81c089/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abf2e7aa959a4611bc2f607bc7e9200b8b81c089/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=abf2e7aa959a4611bc2f607bc7e9200b8b81c089", "patch": "@@ -676,7 +676,7 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n         generics: &'l ast::Generics,\n         trait_ref: &'l Option<ast::TraitRef>,\n         typ: &'l ast::Ty,\n-        impl_items: &'l [ast::ImplItem],\n+        impl_items: &'l [ast::AssocItem],\n     ) {\n         if let Some(impl_data) = self.save_ctxt.get_item_data(item) {\n             if !self.span.filter_generated(item.span) {\n@@ -707,7 +707,7 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n         item: &'l ast::Item,\n         generics: &'l ast::Generics,\n         trait_refs: &'l ast::GenericBounds,\n-        methods: &'l [ast::TraitItem],\n+        methods: &'l [ast::AssocItem],\n     ) {\n         let name = item.ident.to_string();\n         let qualname = format!(\"::{}\",\n@@ -1029,11 +1029,11 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n         // }\n     }\n \n-    fn process_trait_item(&mut self, trait_item: &'l ast::TraitItem, trait_id: DefId) {\n+    fn process_trait_item(&mut self, trait_item: &'l ast::AssocItem, trait_id: DefId) {\n         self.process_macro_use(trait_item.span);\n         let vis_span = trait_item.span.shrink_to_lo();\n         match trait_item.kind {\n-            ast::TraitItemKind::Const(ref ty, ref expr) => {\n+            ast::AssocItemKind::Const(ref ty, ref expr) => {\n                 self.process_assoc_const(\n                     trait_item.id,\n                     trait_item.ident,\n@@ -1044,7 +1044,7 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n                     &trait_item.attrs,\n                 );\n             }\n-            ast::TraitItemKind::Method(ref sig, ref body) => {\n+            ast::AssocItemKind::Method(ref sig, ref body) => {\n                 self.process_method(\n                     sig,\n                     body.as_ref().map(|x| &**x),\n@@ -1055,7 +1055,7 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n                     trait_item.span,\n                 );\n             }\n-            ast::TraitItemKind::TyAlias(ref bounds, ref default_ty) => {\n+            ast::AssocItemKind::TyAlias(ref bounds, ref default_ty) => {\n                 // FIXME do something with _bounds (for type refs)\n                 let name = trait_item.ident.name.to_string();\n                 let qualname = format!(\"::{}\",\n@@ -1097,14 +1097,14 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n                     self.visit_ty(default_ty)\n                 }\n             }\n-            ast::TraitItemKind::Macro(_) => {}\n+            ast::AssocItemKind::Macro(_) => {}\n         }\n     }\n \n-    fn process_impl_item(&mut self, impl_item: &'l ast::ImplItem, impl_id: DefId) {\n+    fn process_impl_item(&mut self, impl_item: &'l ast::AssocItem, impl_id: DefId) {\n         self.process_macro_use(impl_item.span);\n         match impl_item.kind {\n-            ast::ImplItemKind::Const(ref ty, ref expr) => {\n+            ast::AssocItemKind::Const(ref ty, ref expr) => {\n                 self.process_assoc_const(\n                     impl_item.id,\n                     impl_item.ident,\n@@ -1115,7 +1115,7 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n                     &impl_item.attrs,\n                 );\n             }\n-            ast::ImplItemKind::Method(ref sig, ref body) => {\n+            ast::AssocItemKind::Method(ref sig, ref body) => {\n                 self.process_method(\n                     sig,\n                     body.as_deref(),\n@@ -1126,14 +1126,14 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n                     impl_item.span,\n                 );\n             }\n-            ast::ImplItemKind::TyAlias(_, None) => {}\n-            ast::ImplItemKind::TyAlias(_, Some(ref ty)) => {\n+            ast::AssocItemKind::TyAlias(_, None) => {}\n+            ast::AssocItemKind::TyAlias(_, Some(ref ty)) => {\n                 // FIXME: uses of the assoc type should ideally point to this\n                 // 'def' and the name here should be a ref to the def in the\n                 // trait.\n                 self.visit_ty(ty)\n             }\n-            ast::ImplItemKind::Macro(_) => {}\n+            ast::AssocItemKind::Macro(_) => {}\n         }\n     }\n "}, {"sha": "1b729ebaf43764c9a84061aefe93bcd4fcedcffa", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/abf2e7aa959a4611bc2f607bc7e9200b8b81c089/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abf2e7aa959a4611bc2f607bc7e9200b8b81c089/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=abf2e7aa959a4611bc2f607bc7e9200b8b81c089", "patch": "@@ -1603,16 +1603,10 @@ pub struct FnSig {\n     pub decl: P<FnDecl>,\n }\n \n-// FIXME(Centril): Remove all of these.\n-pub type TraitItem = AssocItem<AssocItemKind>;\n-pub type TraitItemKind = AssocItemKind;\n-pub type ImplItem = AssocItem<AssocItemKind>;\n-pub type ImplItemKind = AssocItemKind;\n-\n /// Represents associated items.\n /// These include items in `impl` and `trait` definitions.\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n-pub struct AssocItem<K = ImplItemKind> {\n+pub struct AssocItem {\n     pub attrs: Vec<Attribute>,\n     pub id: NodeId,\n     pub span: Span,\n@@ -1621,7 +1615,7 @@ pub struct AssocItem<K = ImplItemKind> {\n \n     pub defaultness: Defaultness,\n     pub generics: Generics,\n-    pub kind: K,\n+    pub kind: AssocItemKind,\n     /// See `Item::tokens` for what this is.\n     pub tokens: Option<TokenStream>,\n }\n@@ -2598,7 +2592,7 @@ pub enum ItemKind {\n     /// A trait declaration (`trait`).\n     ///\n     /// E.g., `trait Foo { .. }`, `trait Foo<T> { .. }` or `auto trait Foo {}`.\n-    Trait(IsAuto, Unsafety, Generics, GenericBounds, Vec<TraitItem>),\n+    Trait(IsAuto, Unsafety, Generics, GenericBounds, Vec<AssocItem>),\n     /// Trait alias\n     ///\n     /// E.g., `trait Foo = Bar + Quux;`.\n@@ -2613,7 +2607,7 @@ pub enum ItemKind {\n         Generics,\n         Option<TraitRef>, // (optional) trait this impl implements\n         P<Ty>,            // self\n-        Vec<ImplItem>,\n+        Vec<AssocItem>,\n     ),\n     /// A macro invocation.\n     ///"}, {"sha": "fcce9d4e95f5af738d289b91be43832c5a9cb29b", "filename": "src/libsyntax/feature_gate/check.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/abf2e7aa959a4611bc2f607bc7e9200b8b81c089/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abf2e7aa959a4611bc2f607bc7e9200b8b81c089/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs?ref=abf2e7aa959a4611bc2f607bc7e9200b8b81c089", "patch": "@@ -571,17 +571,17 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n         visit::walk_assoc_ty_constraint(self, constraint)\n     }\n \n-    fn visit_trait_item(&mut self, ti: &'a ast::TraitItem) {\n+    fn visit_trait_item(&mut self, ti: &'a ast::AssocItem) {\n         match ti.kind {\n-            ast::TraitItemKind::Method(ref sig, ref block) => {\n+            ast::AssocItemKind::Method(ref sig, ref block) => {\n                 if block.is_none() {\n                     self.check_extern(sig.header.ext);\n                 }\n                 if sig.header.constness.node == ast::Constness::Const {\n                     gate_feature_post!(&self, const_fn, ti.span, \"const fn is unstable\");\n                 }\n             }\n-            ast::TraitItemKind::TyAlias(_, ref default) => {\n+            ast::AssocItemKind::TyAlias(_, ref default) => {\n                 if let Some(_) = default {\n                     gate_feature_post!(\n                         &self, associated_type_defaults, ti.span,"}, {"sha": "263f8192241f2e728fcdafb8ed2272dc5f28a522", "filename": "src/libsyntax/token.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/abf2e7aa959a4611bc2f607bc7e9200b8b81c089/src%2Flibsyntax%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abf2e7aa959a4611bc2f607bc7e9200b8b81c089/src%2Flibsyntax%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftoken.rs?ref=abf2e7aa959a4611bc2f607bc7e9200b8b81c089", "patch": "@@ -685,8 +685,8 @@ pub enum Nonterminal {\n     // Used only for passing items to proc macro attributes (they are not\n     // strictly necessary for that, `Annotatable` can be converted into\n     // tokens directly, but doing that naively regresses pretty-printing).\n-    NtTraitItem(ast::TraitItem),\n-    NtImplItem(ast::ImplItem),\n+    NtTraitItem(ast::AssocItem),\n+    NtImplItem(ast::AssocItem),\n     NtForeignItem(ast::ForeignItem),\n }\n "}, {"sha": "2cfcbd3161f4dde183b4870cff2faceac25e429b", "filename": "src/libsyntax_expand/base.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/abf2e7aa959a4611bc2f607bc7e9200b8b81c089/src%2Flibsyntax_expand%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abf2e7aa959a4611bc2f607bc7e9200b8b81c089/src%2Flibsyntax_expand%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fbase.rs?ref=abf2e7aa959a4611bc2f607bc7e9200b8b81c089", "patch": "@@ -31,8 +31,8 @@ crate use syntax_pos::hygiene::MacroKind;\n #[derive(Debug,Clone)]\n pub enum Annotatable {\n     Item(P<ast::Item>),\n-    TraitItem(P<ast::TraitItem>),\n-    ImplItem(P<ast::ImplItem>),\n+    TraitItem(P<ast::AssocItem>),\n+    ImplItem(P<ast::AssocItem>),\n     ForeignItem(P<ast::ForeignItem>),\n     Stmt(P<ast::Stmt>),\n     Expr(P<ast::Expr>),\n@@ -137,14 +137,14 @@ impl Annotatable {\n         }\n     }\n \n-    pub fn expect_trait_item(self) -> ast::TraitItem {\n+    pub fn expect_trait_item(self) -> ast::AssocItem {\n         match self {\n             Annotatable::TraitItem(i) => i.into_inner(),\n             _ => panic!(\"expected Item\")\n         }\n     }\n \n-    pub fn expect_impl_item(self) -> ast::ImplItem {\n+    pub fn expect_impl_item(self) -> ast::AssocItem {\n         match self {\n             Annotatable::ImplItem(i) => i.into_inner(),\n             _ => panic!(\"expected Item\")\n@@ -382,12 +382,12 @@ pub trait MacResult {\n     }\n \n     /// Creates zero or more impl items.\n-    fn make_impl_items(self: Box<Self>) -> Option<SmallVec<[ast::ImplItem; 1]>> {\n+    fn make_impl_items(self: Box<Self>) -> Option<SmallVec<[ast::AssocItem; 1]>> {\n         None\n     }\n \n     /// Creates zero or more trait items.\n-    fn make_trait_items(self: Box<Self>) -> Option<SmallVec<[ast::TraitItem; 1]>> {\n+    fn make_trait_items(self: Box<Self>) -> Option<SmallVec<[ast::AssocItem; 1]>> {\n         None\n     }\n \n@@ -468,8 +468,8 @@ make_MacEager! {\n     expr: P<ast::Expr>,\n     pat: P<ast::Pat>,\n     items: SmallVec<[P<ast::Item>; 1]>,\n-    impl_items: SmallVec<[ast::ImplItem; 1]>,\n-    trait_items: SmallVec<[ast::TraitItem; 1]>,\n+    impl_items: SmallVec<[ast::AssocItem; 1]>,\n+    trait_items: SmallVec<[ast::AssocItem; 1]>,\n     foreign_items: SmallVec<[ast::ForeignItem; 1]>,\n     stmts: SmallVec<[ast::Stmt; 1]>,\n     ty: P<ast::Ty>,\n@@ -484,11 +484,11 @@ impl MacResult for MacEager {\n         self.items\n     }\n \n-    fn make_impl_items(self: Box<Self>) -> Option<SmallVec<[ast::ImplItem; 1]>> {\n+    fn make_impl_items(self: Box<Self>) -> Option<SmallVec<[ast::AssocItem; 1]>> {\n         self.impl_items\n     }\n \n-    fn make_trait_items(self: Box<Self>) -> Option<SmallVec<[ast::TraitItem; 1]>> {\n+    fn make_trait_items(self: Box<Self>) -> Option<SmallVec<[ast::AssocItem; 1]>> {\n         self.trait_items\n     }\n \n@@ -588,11 +588,11 @@ impl MacResult for DummyResult {\n         Some(SmallVec::new())\n     }\n \n-    fn make_impl_items(self: Box<DummyResult>) -> Option<SmallVec<[ast::ImplItem; 1]>> {\n+    fn make_impl_items(self: Box<DummyResult>) -> Option<SmallVec<[ast::AssocItem; 1]>> {\n         Some(SmallVec::new())\n     }\n \n-    fn make_trait_items(self: Box<DummyResult>) -> Option<SmallVec<[ast::TraitItem; 1]>> {\n+    fn make_trait_items(self: Box<DummyResult>) -> Option<SmallVec<[ast::AssocItem; 1]>> {\n         Some(SmallVec::new())\n     }\n "}, {"sha": "d4223af27abe6ca1dbdee1129b82fc19b9c4a531", "filename": "src/libsyntax_expand/expand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/abf2e7aa959a4611bc2f607bc7e9200b8b81c089/src%2Flibsyntax_expand%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abf2e7aa959a4611bc2f607bc7e9200b8b81c089/src%2Flibsyntax_expand%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fexpand.rs?ref=abf2e7aa959a4611bc2f607bc7e9200b8b81c089", "patch": "@@ -155,10 +155,10 @@ ast_fragments! {\n     Items(SmallVec<[P<ast::Item>; 1]>) {\n         \"item\"; many fn flat_map_item; fn visit_item; fn make_items;\n     }\n-    TraitItems(SmallVec<[ast::TraitItem; 1]>) {\n+    TraitItems(SmallVec<[ast::AssocItem; 1]>) {\n         \"trait item\"; many fn flat_map_trait_item; fn visit_trait_item; fn make_trait_items;\n     }\n-    ImplItems(SmallVec<[ast::ImplItem; 1]>) {\n+    ImplItems(SmallVec<[ast::AssocItem; 1]>) {\n         \"impl item\"; many fn flat_map_impl_item; fn visit_impl_item; fn make_impl_items;\n     }\n     ForeignItems(SmallVec<[ast::ForeignItem; 1]>) {"}, {"sha": "22e99baae5be0e9289e260cdaabd9fef7ae3adfd", "filename": "src/libsyntax_expand/placeholders.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/abf2e7aa959a4611bc2f607bc7e9200b8b81c089/src%2Flibsyntax_expand%2Fplaceholders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abf2e7aa959a4611bc2f607bc7e9200b8b81c089/src%2Flibsyntax_expand%2Fplaceholders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fplaceholders.rs?ref=abf2e7aa959a4611bc2f607bc7e9200b8b81c089", "patch": "@@ -50,15 +50,15 @@ pub fn placeholder(kind: AstFragmentKind, id: ast::NodeId, vis: Option<ast::Visi\n             kind: ast::ItemKind::Mac(mac_placeholder()),\n             tokens: None,\n         })]),\n-        AstFragmentKind::TraitItems => AstFragment::TraitItems(smallvec![ast::TraitItem {\n+        AstFragmentKind::TraitItems => AstFragment::TraitItems(smallvec![ast::AssocItem {\n             id, span, ident, vis, attrs, generics,\n-            kind: ast::TraitItemKind::Macro(mac_placeholder()),\n+            kind: ast::AssocItemKind::Macro(mac_placeholder()),\n             defaultness: ast::Defaultness::Final,\n             tokens: None,\n         }]),\n-        AstFragmentKind::ImplItems => AstFragment::ImplItems(smallvec![ast::ImplItem {\n+        AstFragmentKind::ImplItems => AstFragment::ImplItems(smallvec![ast::AssocItem {\n             id, span, ident, vis, attrs, generics,\n-            kind: ast::ImplItemKind::Macro(mac_placeholder()),\n+            kind: ast::AssocItemKind::Macro(mac_placeholder()),\n             defaultness: ast::Defaultness::Final,\n             tokens: None,\n         }]),"}, {"sha": "1c1fcc4f301bc8eb6bed7bd361f3eef2a15ce82d", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/abf2e7aa959a4611bc2f607bc7e9200b8b81c089/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abf2e7aa959a4611bc2f607bc7e9200b8b81c089/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=abf2e7aa959a4611bc2f607bc7e9200b8b81c089", "patch": "@@ -504,21 +504,21 @@ impl<'a> TraitDef<'a> {\n                            type_ident: Ident,\n                            generics: &Generics,\n                            field_tys: Vec<P<ast::Ty>>,\n-                           methods: Vec<ast::ImplItem>)\n+                           methods: Vec<ast::AssocItem>)\n                            -> P<ast::Item> {\n         let trait_path = self.path.to_path(cx, self.span, type_ident, generics);\n \n-        // Transform associated types from `deriving::ty::Ty` into `ast::ImplItem`\n+        // Transform associated types from `deriving::ty::Ty` into `ast::AssocItem`\n         let associated_types = self.associated_types.iter().map(|&(ident, ref type_def)| {\n-            ast::ImplItem {\n+            ast::AssocItem {\n                 id: ast::DUMMY_NODE_ID,\n                 span: self.span,\n                 ident,\n                 vis: respan(self.span.shrink_to_lo(), ast::VisibilityKind::Inherited),\n                 defaultness: ast::Defaultness::Final,\n                 attrs: Vec::new(),\n                 generics: Generics::default(),\n-                kind: ast::ImplItemKind::TyAlias(\n+                kind: ast::AssocItemKind::TyAlias(\n                     Vec::new(),\n                     Some(type_def.to_ty(cx, self.span, type_ident, generics)),\n                 ),\n@@ -912,7 +912,7 @@ impl<'a> MethodDef<'a> {\n                      explicit_self: Option<ast::ExplicitSelf>,\n                      arg_types: Vec<(Ident, P<ast::Ty>)>,\n                      body: P<Expr>)\n-                     -> ast::ImplItem {\n+                     -> ast::AssocItem {\n         // Create the generics that aren't for `Self`.\n         let fn_generics = self.generics.to_generics(cx, trait_.span, type_ident, generics);\n \n@@ -950,15 +950,15 @@ impl<'a> MethodDef<'a> {\n         };\n \n         // Create the method.\n-        ast::ImplItem {\n+        ast::AssocItem {\n             id: ast::DUMMY_NODE_ID,\n             attrs: self.attributes.clone(),\n             generics: fn_generics,\n             span: trait_.span,\n             vis: respan(trait_lo_sp, ast::VisibilityKind::Inherited),\n             defaultness: ast::Defaultness::Final,\n             ident: method_ident,\n-            kind: ast::ImplItemKind::Method(sig, Some(body_block)),\n+            kind: ast::AssocItemKind::Method(sig, Some(body_block)),\n             tokens: None,\n         }\n     }"}]}