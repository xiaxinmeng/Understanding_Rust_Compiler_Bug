{"sha": "5de1391b88007a1d4f7b1517657a86aae352af1e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkZTEzOTFiODgwMDdhMWQ0ZjdiMTUxNzY1N2E4NmFhZTM1MmFmMWU=", "commit": {"author": {"name": "Jacob Hoffman-Andrews", "email": "github@hoffman-andrews.com", "date": "2021-06-12T07:25:26Z"}, "committer": {"name": "Jacob Hoffman-Andrews", "email": "github@hoffman-andrews.com", "date": "2021-06-17T05:46:53Z"}, "message": "Factor out render_rightside\n\nThis covers rendering of stability_since and the srclink across methods\nand trait implementations, so their DOM representation is consistent.", "tree": {"sha": "e893244668a85360558152b16cc19f3017fa93f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e893244668a85360558152b16cc19f3017fa93f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5de1391b88007a1d4f7b1517657a86aae352af1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5de1391b88007a1d4f7b1517657a86aae352af1e", "html_url": "https://github.com/rust-lang/rust/commit/5de1391b88007a1d4f7b1517657a86aae352af1e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5de1391b88007a1d4f7b1517657a86aae352af1e/comments", "author": {"login": "jsha", "id": 220205, "node_id": "MDQ6VXNlcjIyMDIwNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/220205?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsha", "html_url": "https://github.com/jsha", "followers_url": "https://api.github.com/users/jsha/followers", "following_url": "https://api.github.com/users/jsha/following{/other_user}", "gists_url": "https://api.github.com/users/jsha/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsha/subscriptions", "organizations_url": "https://api.github.com/users/jsha/orgs", "repos_url": "https://api.github.com/users/jsha/repos", "events_url": "https://api.github.com/users/jsha/events{/privacy}", "received_events_url": "https://api.github.com/users/jsha/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsha", "id": 220205, "node_id": "MDQ6VXNlcjIyMDIwNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/220205?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsha", "html_url": "https://github.com/jsha", "followers_url": "https://api.github.com/users/jsha/followers", "following_url": "https://api.github.com/users/jsha/following{/other_user}", "gists_url": "https://api.github.com/users/jsha/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsha/subscriptions", "organizations_url": "https://api.github.com/users/jsha/orgs", "repos_url": "https://api.github.com/users/jsha/repos", "events_url": "https://api.github.com/users/jsha/events{/privacy}", "received_events_url": "https://api.github.com/users/jsha/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "593d6d1cb15c55c88319470dabb40126c7b7f1e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/593d6d1cb15c55c88319470dabb40126c7b7f1e2", "html_url": "https://github.com/rust-lang/rust/commit/593d6d1cb15c55c88319470dabb40126c7b7f1e2"}], "stats": {"total": 84, "additions": 30, "deletions": 54}, "files": [{"sha": "a210d0c843cc660666dec14e18340080210ea64d", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 30, "deletions": 43, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/5de1391b88007a1d4f7b1517657a86aae352af1e/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5de1391b88007a1d4f7b1517657a86aae352af1e/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=5de1391b88007a1d4f7b1517657a86aae352af1e", "patch": "@@ -1294,7 +1294,6 @@ fn render_impl(\n     ) {\n         let item_type = item.type_();\n         let name = item.name.as_ref().unwrap();\n-        let tcx = cx.tcx();\n \n         let render_method_item = match render_mode {\n             RenderMode::Normal => true,\n@@ -1363,6 +1362,7 @@ fn render_impl(\n                         \"<div id=\\\"{}\\\" class=\\\"{}{} has-srclink\\\">\",\n                         id, item_type, in_trait_class,\n                     );\n+                    render_rightside(w, cx, item, outer_version, outer_const_version);\n                     w.write_str(\"<code>\");\n                     render_assoc_item(\n                         w,\n@@ -1372,15 +1372,7 @@ fn render_impl(\n                         cx,\n                     );\n                     w.write_str(\"</code>\");\n-                    render_stability_since_raw(\n-                        w,\n-                        item.stable_since(tcx).as_deref(),\n-                        item.const_stable_since(tcx).as_deref(),\n-                        outer_version,\n-                        outer_const_version,\n-                    );\n                     write!(w, \"<a href=\\\"#{}\\\" class=\\\"anchor\\\"></a>\", id);\n-                    write_srclink(cx, item, w);\n                     w.write_str(\"</div>\");\n                 }\n             }\n@@ -1413,6 +1405,7 @@ fn render_impl(\n                     \"<div id=\\\"{}\\\" class=\\\"{}{} has-srclink\\\"><code>\",\n                     id, item_type, in_trait_class\n                 );\n+                render_rightside(w, cx, item, outer_version, outer_const_version);\n                 assoc_const(\n                     w,\n                     item,\n@@ -1423,15 +1416,7 @@ fn render_impl(\n                     cx,\n                 );\n                 w.write_str(\"</code>\");\n-                render_stability_since_raw(\n-                    w,\n-                    item.stable_since(tcx).as_deref(),\n-                    item.const_stable_since(tcx).as_deref(),\n-                    outer_version,\n-                    outer_const_version,\n-                );\n                 write!(w, \"<a href=\\\"#{}\\\" class=\\\"anchor\\\"></a>\", id);\n-                write_srclink(cx, item, w);\n                 w.write_str(\"</div>\");\n             }\n             clean::AssocTypeItem(ref bounds, ref default) => {\n@@ -1590,6 +1575,28 @@ fn render_impl(\n     w.write_str(&close_tags);\n }\n \n+fn render_rightside(\n+    w: &mut Buffer,\n+    cx: &Context<'_>,\n+    item: &clean::Item,\n+    outer_version: Option<&str>,\n+    outer_const_version: Option<&str>,\n+) {\n+    let tcx = cx.tcx();\n+\n+    write!(w, \"<div class=\\\"rightside\\\">\");\n+    render_stability_since_raw(\n+        w,\n+        item.stable_since(tcx).as_deref(),\n+        item.const_stable_since(tcx).as_deref(),\n+        outer_version,\n+        outer_const_version,\n+    );\n+\n+    write_srclink(cx, item, w);\n+    w.write_str(\"</div>\");\n+}\n+\n pub(crate) fn render_impl_summary(\n     w: &mut Buffer,\n     cx: &Context<'_>,\n@@ -1604,7 +1611,6 @@ pub(crate) fn render_impl_summary(\n     // in documentation pages for trait with automatic implementations like \"Send\" and \"Sync\".\n     aliases: &[String],\n ) {\n-    let tcx = cx.tcx();\n     let id = cx.derive_id(match i.inner_impl().trait_ {\n         Some(ref t) => {\n             if is_on_foreign_type {\n@@ -1620,13 +1626,11 @@ pub(crate) fn render_impl_summary(\n     } else {\n         format!(\" data-aliases=\\\"{}\\\"\", aliases.join(\",\"))\n     };\n+    write!(w, \"<div id=\\\"{}\\\" class=\\\"impl has-srclink\\\"{}>\", id, aliases);\n+    render_rightside(w, cx, &i.impl_item, outer_version, outer_const_version);\n+    write!(w, \"<code class=\\\"in-band\\\">\");\n+\n     if let Some(use_absolute) = use_absolute {\n-        write!(\n-            w,\n-            \"<div id=\\\"{}\\\" class=\\\"impl has-srclink\\\"{}>\\\n-                     <code class=\\\"in-band\\\">\",\n-            id, aliases\n-        );\n         write!(w, \"{}\", i.inner_impl().print(use_absolute, cx));\n         if show_def_docs {\n             for it in &i.inner_impl().items {\n@@ -1637,28 +1641,11 @@ pub(crate) fn render_impl_summary(\n                 }\n             }\n         }\n-        w.write_str(\"</code>\");\n     } else {\n-        write!(\n-            w,\n-            \"<div id=\\\"{}\\\" class=\\\"impl has-srclink\\\"{}>\\\n-                     <code class=\\\"in-band\\\">{}</code>\",\n-            id,\n-            aliases,\n-            i.inner_impl().print(false, cx)\n-        );\n+        write!(w, \"{}\", i.inner_impl().print(false, cx));\n     }\n+    write!(w, \"</code>\");\n     write!(w, \"<a href=\\\"#{}\\\" class=\\\"anchor\\\"></a>\", id);\n-    write!(w, \"<div class=\\\"rightside\\\">\");\n-    render_stability_since_raw(\n-        w,\n-        i.impl_item.stable_since(tcx).as_deref(),\n-        i.impl_item.const_stable_since(tcx).as_deref(),\n-        outer_version,\n-        outer_const_version,\n-    );\n-    write_srclink(cx, &i.impl_item, w);\n-    w.write_str(\"</div>\"); // end of \"rightside\"\n \n     let is_trait = i.inner_impl().trait_.is_some();\n     if is_trait {"}, {"sha": "e6646586c4125411b19ae59c2a1041f935a801f2", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5de1391b88007a1d4f7b1517657a86aae352af1e/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/5de1391b88007a1d4f7b1517657a86aae352af1e/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=5de1391b88007a1d4f7b1517657a86aae352af1e", "patch": "@@ -899,9 +899,6 @@ body.blur > :not(#help) {\n .since {\n \tfont-weight: normal;\n \tfont-size: initial;\n-\tposition: absolute;\n-\tright: 0;\n-\ttop: 0;\n }\n \n .impl-items .since, .impl .since, .methods .since {\n@@ -1606,11 +1603,6 @@ details.undocumented[open] > summary::before {\n \t\tmargin-left: 0;\n \t}\n \n-\t.content .impl-items .method, .content .impl-items > .type, .impl-items > .associatedconstant,\n-\t.impl-items > .associatedtype {\n-\t\tdisplay: flex;\n-\t}\n-\n \t.anchor {\n \t\tdisplay: none !important;\n \t}"}, {"sha": "d5f9d4fc58b8c3e76fbed31eb2bc8cb34edc5a9b", "filename": "src/test/rustdoc-gui/hash-item-expansion.goml", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5de1391b88007a1d4f7b1517657a86aae352af1e/src%2Ftest%2Frustdoc-gui%2Fhash-item-expansion.goml", "raw_url": "https://github.com/rust-lang/rust/raw/5de1391b88007a1d4f7b1517657a86aae352af1e/src%2Ftest%2Frustdoc-gui%2Fhash-item-expansion.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fhash-item-expansion.goml?ref=5de1391b88007a1d4f7b1517657a86aae352af1e", "patch": "@@ -2,9 +2,6 @@\n goto: file://|DOC_PATH|/test_docs/struct.Foo.html#method.borrow\n // In the blanket implementations list, \"Borrow\" is the second one, hence the \":nth(2)\".\n assert: (\"#blanket-implementations-list > details:nth-child(2)\", \"open\", \"\")\n-// Please note the \"\\\" below is needed because otherwise \".borrow\" would be interpreted as\n-// a class selector.\n-assert: (\"#method\\.borrow\", {\"display\": \"flex\"})\n // We first check that the impl block is open by default.\n assert: (\"#implementations + details\", \"open\", \"\")\n // We collapse it."}]}