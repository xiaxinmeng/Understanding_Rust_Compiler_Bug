{"sha": "e2fcd29bbd7dc58b4af5f498cb1f323822ffc254", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyZmNkMjliYmQ3ZGM1OGI0YWY1ZjQ5OGNiMWYzMjM4MjJmZmMyNTQ=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2011-06-27T23:56:18Z"}, "committer": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2011-07-14T23:45:55Z"}, "message": "Consolidate some arguments in typeck by just passing the record they came from.", "tree": {"sha": "fc7147d7d787445467384bbf1e82ac11afd280da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc7147d7d787445467384bbf1e82ac11afd280da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e2fcd29bbd7dc58b4af5f498cb1f323822ffc254", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e2fcd29bbd7dc58b4af5f498cb1f323822ffc254", "html_url": "https://github.com/rust-lang/rust/commit/e2fcd29bbd7dc58b4af5f498cb1f323822ffc254", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e2fcd29bbd7dc58b4af5f498cb1f323822ffc254/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "53c4cb6a2fa99df20a2cd720890e888402773fe7", "url": "https://api.github.com/repos/rust-lang/rust/commits/53c4cb6a2fa99df20a2cd720890e888402773fe7", "html_url": "https://github.com/rust-lang/rust/commit/53c4cb6a2fa99df20a2cd720890e888402773fe7"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "54c662851aaa4ac78dc10ed9475f94eed2915578", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e2fcd29bbd7dc58b4af5f498cb1f323822ffc254/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2fcd29bbd7dc58b4af5f498cb1f323822ffc254/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=e2fcd29bbd7dc58b4af5f498cb1f323822ffc254", "patch": "@@ -1163,7 +1163,7 @@ type gather_result =\n         hashmap[ast::node_id, ast::ident] local_names,\n         int next_var_id);\n \n-fn gather_locals(&@crate_ctxt ccx, &ast::fn_decl decl, &ast::block body,\n+fn gather_locals(&@crate_ctxt ccx, &ast::_fn f,\n                  &ast::node_id id) -> gather_result {\n     fn next_var_id(@mutable int nvi) -> int {\n         auto rv = *nvi;\n@@ -1207,8 +1207,8 @@ fn gather_locals(&@crate_ctxt ccx, &ast::fn_decl decl, &ast::block body,\n     auto args = ty::ty_fn_args(ccx.tcx, ty::node_id_to_type(ccx.tcx, id));\n     auto i = 0u;\n     for (ty::arg arg in args) {\n-        assign(ccx.tcx, vb, locals, local_names, nvi, decl.inputs.(i).id,\n-               decl.inputs.(i).ident, some[ty::t](arg.ty));\n+        assign(ccx.tcx, vb, locals, local_names, nvi, f.decl.inputs.(i).id,\n+               f.decl.inputs.(i).ident, some[ty::t](arg.ty));\n         i += 1u;\n     }\n     // Add explicitly-declared locals.\n@@ -1253,7 +1253,7 @@ fn gather_locals(&@crate_ctxt ccx, &ast::fn_decl decl, &ast::block body,\n             visit_pat_pre=bind visit_pat_pre(ccx, vb, locals, local_names,\n                                              nvi, _)\n             with walk::default_visitor());\n-    walk::walk_block(visit, body);\n+    walk::walk_block(visit, f.body);\n     ret rec(var_bindings=vb,\n             locals=locals,\n             local_names=local_names,\n@@ -1999,7 +1999,7 @@ fn check_expr(&@fn_ctxt fcx, &@ast::expr expr) {\n                 collect::ty_of_fn_decl(cx, convert, ty_of_arg, f.decl,\n                                        f.proto, ~[], none)._1;\n             write::ty_only_fixup(fcx, id, fty);\n-            check_fn(fcx.ccx, f.decl, f.proto, f.body, id);\n+            check_fn(fcx.ccx, f, id);\n         }\n         case (ast::expr_block(?b)) {\n             check_block(fcx, b);\n@@ -2577,9 +2577,10 @@ fn check_const(&@crate_ctxt ccx, &span sp, &@ast::expr e, &ast::node_id id) {\n     check_expr(fcx, e);\n }\n \n-fn check_fn(&@crate_ctxt ccx, &ast::fn_decl decl, ast::proto proto,\n-            &ast::block body, &ast::node_id id) {\n-    auto gather_result = gather_locals(ccx, decl, body, id);\n+fn check_fn(&@crate_ctxt ccx, &ast::_fn f, &ast::node_id id) {\n+    auto decl = f.decl;\n+    auto body = f.body;\n+    auto gather_result = gather_locals(ccx, f, id);\n     let ast::node_id[] fixups = ~[];\n     let @fn_ctxt fcx =\n         @rec(ret_ty=ast_ty_to_ty_crate(ccx, decl.output),\n@@ -2621,8 +2622,7 @@ fn check_fn(&@crate_ctxt ccx, &ast::fn_decl decl, ast::proto proto,\n }\n \n fn check_method(&@crate_ctxt ccx, &@ast::method method) {\n-    auto m = method.node.meth;\n-    check_fn(ccx, m.decl, m.proto, m.body, method.node.id);\n+    check_fn(ccx, method.node.meth, method.node.id);\n }\n \n fn check_item(@crate_ctxt ccx, &@ast::item it) {\n@@ -2631,10 +2631,10 @@ fn check_item(@crate_ctxt ccx, &@ast::item it) {\n             check_const(ccx, it.span, e, it.id);\n         }\n         case (ast::item_fn(?f, _)) {\n-            check_fn(ccx, f.decl, f.proto, f.body, it.id);\n+            check_fn(ccx, f, it.id);\n         }\n         case (ast::item_res(?f, ?dtor_id, _, _)) {\n-            check_fn(ccx, f.decl, f.proto, f.body, dtor_id);\n+            check_fn(ccx, f, dtor_id);\n         }\n         case (ast::item_obj(?ob, _, _)) {\n             // We're entering an object, so gather up the info we need."}]}