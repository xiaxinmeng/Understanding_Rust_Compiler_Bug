{"sha": "c7041a60a55d95a3070b2ada4c3203f737bb4f7f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3MDQxYTYwYTU1ZDk1YTMwNzBiMmFkYTRjMzIwM2Y3MzdiYjRmN2Y=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-08-14T23:16:05Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-08-14T23:16:05Z"}, "message": "Updated the most glaring instances of weak tests w.r.t. NLL that came from #53196.\n\nSee also the bulletpoint list on #53351.", "tree": {"sha": "aa71a5ac0535d156dcb11fa5eeb81add94f53031", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa71a5ac0535d156dcb11fa5eeb81add94f53031"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c7041a60a55d95a3070b2ada4c3203f737bb4f7f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c7041a60a55d95a3070b2ada4c3203f737bb4f7f", "html_url": "https://github.com/rust-lang/rust/commit/c7041a60a55d95a3070b2ada4c3203f737bb4f7f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c7041a60a55d95a3070b2ada4c3203f737bb4f7f/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5733050de780ae4d11e3a7af615df792fdf908e", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5733050de780ae4d11e3a7af615df792fdf908e", "html_url": "https://github.com/rust-lang/rust/commit/a5733050de780ae4d11e3a7af615df792fdf908e"}], "stats": {"total": 756, "additions": 626, "deletions": 130}, "files": [{"sha": "855488e1eef1b59ac4c92e36f989120d20ac1c1c", "filename": "src/test/ui/borrowck/borrow-tuple-fields.nll.stderr", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/c7041a60a55d95a3070b2ada4c3203f737bb4f7f/src%2Ftest%2Fui%2Fborrowck%2Fborrow-tuple-fields.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c7041a60a55d95a3070b2ada4c3203f737bb4f7f/src%2Ftest%2Fui%2Fborrowck%2Fborrow-tuple-fields.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrow-tuple-fields.nll.stderr?ref=c7041a60a55d95a3070b2ada4c3203f737bb4f7f", "patch": "@@ -0,0 +1,65 @@\n+error[E0505]: cannot move out of `x` because it is borrowed\n+  --> $DIR/borrow-tuple-fields.rs:22:13\n+   |\n+LL |     let r = &x.0;\n+   |             ---- borrow of `x.0` occurs here\n+LL |     let y = x; //~ ERROR cannot move out of `x` because it is borrowed\n+   |             ^ move out of `x` occurs here\n+LL | \n+LL |     r.use_ref();\n+   |     - borrow later used here\n+\n+error[E0502]: cannot borrow `x.0` as mutable because it is also borrowed as immutable\n+  --> $DIR/borrow-tuple-fields.rs:28:13\n+   |\n+LL |     let a = &x.0;\n+   |             ---- immutable borrow occurs here\n+LL |     let b = &mut x.0; //~ ERROR cannot borrow `x.0` as mutable because it is also borrowed as\n+   |             ^^^^^^^^ mutable borrow occurs here\n+LL |     a.use_ref();\n+   |     - borrow later used here\n+\n+error[E0499]: cannot borrow `x.0` as mutable more than once at a time\n+  --> $DIR/borrow-tuple-fields.rs:33:13\n+   |\n+LL |     let a = &mut x.0;\n+   |             -------- first mutable borrow occurs here\n+LL |     let b = &mut x.0; //~ ERROR cannot borrow `x.0` as mutable more than once at a time\n+   |             ^^^^^^^^ second mutable borrow occurs here\n+LL |     a.use_ref();\n+   |     - borrow later used here\n+\n+error[E0505]: cannot move out of `x` because it is borrowed\n+  --> $DIR/borrow-tuple-fields.rs:38:13\n+   |\n+LL |     let r = &x.0;\n+   |             ---- borrow of `x.0` occurs here\n+LL |     let y = x; //~ ERROR cannot move out of `x` because it is borrowed\n+   |             ^ move out of `x` occurs here\n+LL |     r.use_ref();\n+   |     - borrow later used here\n+\n+error[E0502]: cannot borrow `x.0` as mutable because it is also borrowed as immutable\n+  --> $DIR/borrow-tuple-fields.rs:43:13\n+   |\n+LL |     let a = &x.0;\n+   |             ---- immutable borrow occurs here\n+LL |     let b = &mut x.0; //~ ERROR cannot borrow `x.0` as mutable because it is also borrowed as\n+   |             ^^^^^^^^ mutable borrow occurs here\n+LL |     a.use_ref();\n+   |     - borrow later used here\n+\n+error[E0499]: cannot borrow `x.0` as mutable more than once at a time\n+  --> $DIR/borrow-tuple-fields.rs:48:13\n+   |\n+LL |     let a = &mut x.0;\n+   |             -------- first mutable borrow occurs here\n+LL |     let b = &mut x.0; //~ ERROR cannot borrow `x.0` as mutable more than once at a time\n+   |             ^^^^^^^^ second mutable borrow occurs here\n+LL |     a.use_mut();\n+   |     - borrow later used here\n+\n+error: aborting due to 6 previous errors\n+\n+Some errors occurred: E0499, E0502, E0505.\n+For more information about an error, try `rustc --explain E0499`."}, {"sha": "de3a5c799cbbfd1a00b695bec223d3988662ffd9", "filename": "src/test/ui/borrowck/borrow-tuple-fields.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c7041a60a55d95a3070b2ada4c3203f737bb4f7f/src%2Ftest%2Fui%2Fborrowck%2Fborrow-tuple-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7041a60a55d95a3070b2ada4c3203f737bb4f7f/src%2Ftest%2Fui%2Fborrowck%2Fborrow-tuple-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrow-tuple-fields.rs?ref=c7041a60a55d95a3070b2ada4c3203f737bb4f7f", "patch": "@@ -8,10 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-compare-mode-nll\n-\n #![feature(box_syntax)]\n \n+\n+\n struct Foo(Box<isize>, isize);\n \n struct Bar(isize, isize);\n@@ -21,24 +21,33 @@ fn main() {\n     let r = &x.0;\n     let y = x; //~ ERROR cannot move out of `x` because it is borrowed\n \n+    r.use_ref();\n+\n     let mut x = (1, 2);\n     let a = &x.0;\n     let b = &mut x.0; //~ ERROR cannot borrow `x.0` as mutable because it is also borrowed as\n+    a.use_ref();\n \n     let mut x = (1, 2);\n     let a = &mut x.0;\n     let b = &mut x.0; //~ ERROR cannot borrow `x.0` as mutable more than once at a time\n-\n+    a.use_ref();\n \n     let x = Foo(box 1, 2);\n     let r = &x.0;\n     let y = x; //~ ERROR cannot move out of `x` because it is borrowed\n+    r.use_ref();\n \n     let mut x = Bar(1, 2);\n     let a = &x.0;\n     let b = &mut x.0; //~ ERROR cannot borrow `x.0` as mutable because it is also borrowed as\n+    a.use_ref();\n \n     let mut x = Bar(1, 2);\n     let a = &mut x.0;\n     let b = &mut x.0; //~ ERROR cannot borrow `x.0` as mutable more than once at a time\n+    a.use_mut();\n }\n+\n+trait Fake { fn use_mut(&mut self) { } fn use_ref(&self) { }  }\n+impl<T> Fake for T { }"}, {"sha": "1cbfcdfc06a3a946877b41831d61e0cc1fcbc2e0", "filename": "src/test/ui/borrowck/borrow-tuple-fields.stderr", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c7041a60a55d95a3070b2ada4c3203f737bb4f7f/src%2Ftest%2Fui%2Fborrowck%2Fborrow-tuple-fields.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c7041a60a55d95a3070b2ada4c3203f737bb4f7f/src%2Ftest%2Fui%2Fborrowck%2Fborrow-tuple-fields.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrow-tuple-fields.stderr?ref=c7041a60a55d95a3070b2ada4c3203f737bb4f7f", "patch": "@@ -7,7 +7,7 @@ LL |     let y = x; //~ ERROR cannot move out of `x` because it is borrowed\n    |         ^ move out of `x` occurs here\n \n error[E0502]: cannot borrow `x.0` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrow-tuple-fields.rs:26:18\n+  --> $DIR/borrow-tuple-fields.rs:28:18\n    |\n LL |     let a = &x.0;\n    |              --- immutable borrow occurs here\n@@ -18,7 +18,7 @@ LL | }\n    | - immutable borrow ends here\n \n error[E0499]: cannot borrow `x.0` as mutable more than once at a time\n-  --> $DIR/borrow-tuple-fields.rs:30:18\n+  --> $DIR/borrow-tuple-fields.rs:33:18\n    |\n LL |     let a = &mut x.0;\n    |                  --- first mutable borrow occurs here\n@@ -29,15 +29,15 @@ LL | }\n    | - first borrow ends here\n \n error[E0505]: cannot move out of `x` because it is borrowed\n-  --> $DIR/borrow-tuple-fields.rs:35:9\n+  --> $DIR/borrow-tuple-fields.rs:38:9\n    |\n LL |     let r = &x.0;\n    |              --- borrow of `x.0` occurs here\n LL |     let y = x; //~ ERROR cannot move out of `x` because it is borrowed\n    |         ^ move out of `x` occurs here\n \n error[E0502]: cannot borrow `x.0` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrow-tuple-fields.rs:39:18\n+  --> $DIR/borrow-tuple-fields.rs:43:18\n    |\n LL |     let a = &x.0;\n    |              --- immutable borrow occurs here\n@@ -48,12 +48,13 @@ LL | }\n    | - immutable borrow ends here\n \n error[E0499]: cannot borrow `x.0` as mutable more than once at a time\n-  --> $DIR/borrow-tuple-fields.rs:43:18\n+  --> $DIR/borrow-tuple-fields.rs:48:18\n    |\n LL |     let a = &mut x.0;\n    |                  --- first mutable borrow occurs here\n LL |     let b = &mut x.0; //~ ERROR cannot borrow `x.0` as mutable more than once at a time\n    |                  ^^^ second mutable borrow occurs here\n+LL |     a.use_mut();\n LL | }\n    | - first borrow ends here\n "}, {"sha": "9c3d0b170d90e28162e048a79b7dec16845b878b", "filename": "src/test/ui/borrowck/borrowck-borrow-mut-object-twice.nll.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c7041a60a55d95a3070b2ada4c3203f737bb4f7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-mut-object-twice.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c7041a60a55d95a3070b2ada4c3203f737bb4f7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-mut-object-twice.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-mut-object-twice.nll.stderr?ref=c7041a60a55d95a3070b2ada4c3203f737bb4f7f", "patch": "@@ -0,0 +1,13 @@\n+error[E0499]: cannot borrow `*x` as mutable more than once at a time\n+  --> $DIR/borrowck-borrow-mut-object-twice.rs:23:5\n+   |\n+LL |     let y = x.f1();\n+   |             - first mutable borrow occurs here\n+LL |     x.f2(); //~ ERROR cannot borrow `*x` as mutable\n+   |     ^ second mutable borrow occurs here\n+LL |     y.use_ref();\n+   |     - borrow later used here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0499`."}, {"sha": "63a64631f44a082d50caf0ea161836297803a45e", "filename": "src/test/ui/borrowck/borrowck-borrow-mut-object-twice.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c7041a60a55d95a3070b2ada4c3203f737bb4f7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-mut-object-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7041a60a55d95a3070b2ada4c3203f737bb4f7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-mut-object-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-mut-object-twice.rs?ref=c7041a60a55d95a3070b2ada4c3203f737bb4f7f", "patch": "@@ -8,19 +8,23 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-compare-mode-nll\n-\n // Check that `&mut` objects cannot be borrowed twice, just like\n // other `&mut` pointers.\n \n+\n+\n trait Foo {\n     fn f1(&mut self) -> &();\n     fn f2(&mut self);\n }\n \n fn test(x: &mut Foo) {\n-    let _y = x.f1();\n+    let y = x.f1();\n     x.f2(); //~ ERROR cannot borrow `*x` as mutable\n+    y.use_ref();\n }\n \n fn main() {}\n+\n+trait Fake { fn use_mut(&mut self) { } fn use_ref(&self) { }  }\n+impl<T> Fake for T { }"}, {"sha": "de2fa8db96f643f606973d19706fad0ea995ca13", "filename": "src/test/ui/borrowck/borrowck-borrow-mut-object-twice.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c7041a60a55d95a3070b2ada4c3203f737bb4f7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-mut-object-twice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c7041a60a55d95a3070b2ada4c3203f737bb4f7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-mut-object-twice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-mut-object-twice.stderr?ref=c7041a60a55d95a3070b2ada4c3203f737bb4f7f", "patch": "@@ -1,10 +1,11 @@\n error[E0499]: cannot borrow `*x` as mutable more than once at a time\n   --> $DIR/borrowck-borrow-mut-object-twice.rs:23:5\n    |\n-LL |     let _y = x.f1();\n-   |              - first mutable borrow occurs here\n+LL |     let y = x.f1();\n+   |             - first mutable borrow occurs here\n LL |     x.f2(); //~ ERROR cannot borrow `*x` as mutable\n    |     ^ second mutable borrow occurs here\n+LL |     y.use_ref();\n LL | }\n    | - first borrow ends here\n "}, {"sha": "b8f17570a6471309dd978410e0e6881d3165a5bd", "filename": "src/test/ui/borrowck/borrowck-closures-unique-imm.nll.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c7041a60a55d95a3070b2ada4c3203f737bb4f7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-unique-imm.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c7041a60a55d95a3070b2ada4c3203f737bb4f7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-unique-imm.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-unique-imm.nll.stderr?ref=c7041a60a55d95a3070b2ada4c3203f737bb4f7f", "patch": "@@ -0,0 +1,13 @@\n+error[E0502]: cannot borrow `this.x` as mutable because it is also borrowed as immutable\n+  --> $DIR/borrowck-closures-unique-imm.rs:23:9\n+   |\n+LL |         let p = &this.x;\n+   |                 ------- immutable borrow occurs here\n+LL |         &mut this.x; //~ ERROR cannot borrow\n+   |         ^^^^^^^^^^^ mutable borrow occurs here\n+LL |         p.use_ref();\n+   |         - borrow later used here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0502`."}, {"sha": "c4b15a9c0fe4d4c96869c35ce8ab5bb1a9c34290", "filename": "src/test/ui/borrowck/borrowck-closures-unique-imm.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c7041a60a55d95a3070b2ada4c3203f737bb4f7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-unique-imm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7041a60a55d95a3070b2ada4c3203f737bb4f7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-unique-imm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-unique-imm.rs?ref=c7041a60a55d95a3070b2ada4c3203f737bb4f7f", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-compare-mode-nll\n+\n \n struct Foo {\n     x: isize,\n@@ -21,6 +21,10 @@ pub fn main() {\n     let mut r = || {\n         let p = &this.x;\n         &mut this.x; //~ ERROR cannot borrow\n+        p.use_ref();\n     };\n     r()\n }\n+\n+trait Fake { fn use_mut(&mut self) { } fn use_ref(&self) { }  }\n+impl<T> Fake for T { }"}, {"sha": "5ab9685850ee48bb3b5f58f7d41544794b3fa1d3", "filename": "src/test/ui/borrowck/borrowck-closures-unique-imm.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c7041a60a55d95a3070b2ada4c3203f737bb4f7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-unique-imm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c7041a60a55d95a3070b2ada4c3203f737bb4f7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-unique-imm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-unique-imm.stderr?ref=c7041a60a55d95a3070b2ada4c3203f737bb4f7f", "patch": "@@ -5,6 +5,7 @@ LL |         let p = &this.x;\n    |                  ------ immutable borrow occurs here\n LL |         &mut this.x; //~ ERROR cannot borrow\n    |              ^^^^^^ mutable borrow occurs here\n+LL |         p.use_ref();\n LL |     };\n    |     - immutable borrow ends here\n "}, {"sha": "8d2bef315c854e17f1b0986810b9c8bf218c5fc5", "filename": "src/test/ui/borrowck/borrowck-issue-2657-1.nll.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c7041a60a55d95a3070b2ada4c3203f737bb4f7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-2657-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c7041a60a55d95a3070b2ada4c3203f737bb4f7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-2657-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-2657-1.nll.stderr?ref=c7041a60a55d95a3070b2ada4c3203f737bb4f7f", "patch": "@@ -0,0 +1,13 @@\n+error[E0505]: cannot move out of `x` because it is borrowed\n+  --> $DIR/borrowck-issue-2657-1.rs:19:18\n+   |\n+LL |       Some(ref _y) => {\n+   |            ------ borrow of `x.0` occurs here\n+LL |         let _a = x; //~ ERROR cannot move\n+   |                  ^ move out of `x` occurs here\n+LL |         _y.use_ref();\n+   |         -- borrow later used here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0505`."}, {"sha": "3eb939c0ddadd2517eda42ca7761a78102752f84", "filename": "src/test/ui/borrowck/borrowck-issue-2657-1.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c7041a60a55d95a3070b2ada4c3203f737bb4f7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-2657-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7041a60a55d95a3070b2ada4c3203f737bb4f7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-2657-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-2657-1.rs?ref=c7041a60a55d95a3070b2ada4c3203f737bb4f7f", "patch": "@@ -8,16 +8,20 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-compare-mode-nll\n-\n #![feature(box_syntax)]\n \n+\n+\n fn main() {\n     let x: Option<Box<_>> = Some(box 1);\n     match x {\n       Some(ref _y) => {\n         let _a = x; //~ ERROR cannot move\n+        _y.use_ref();\n       }\n       _ => {}\n     }\n }\n+\n+trait Fake { fn use_mut(&mut self) { } fn use_ref(&self) { }  }\n+impl<T> Fake for T { }"}, {"sha": "6f0f23b24c6469c0e4f0f9a606ad09eac0073f61", "filename": "src/test/ui/borrowck/borrowck-loan-blocks-move-cc.nll.stderr", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/c7041a60a55d95a3070b2ada4c3203f737bb4f7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-blocks-move-cc.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c7041a60a55d95a3070b2ada4c3203f737bb4f7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-blocks-move-cc.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-blocks-move-cc.nll.stderr?ref=c7041a60a55d95a3070b2ada4c3203f737bb4f7f", "patch": "@@ -0,0 +1,29 @@\n+error[E0505]: cannot move out of `v` because it is borrowed\n+  --> $DIR/borrowck-loan-blocks-move-cc.rs:24:19\n+   |\n+LL |     let w = &v;\n+   |             -- borrow of `v` occurs here\n+LL |     thread::spawn(move|| {\n+   |                   ^^^^^^ move out of `v` occurs here\n+LL |         println!(\"v={}\", *v);\n+   |                           - move occurs due to use in closure\n+...\n+LL |     w.use_ref();\n+   |     - borrow later used here\n+\n+error[E0505]: cannot move out of `v` because it is borrowed\n+  --> $DIR/borrowck-loan-blocks-move-cc.rs:34:19\n+   |\n+LL |     let w = &v;\n+   |             -- borrow of `v` occurs here\n+LL |     thread::spawn(move|| {\n+   |                   ^^^^^^ move out of `v` occurs here\n+LL |         println!(\"v={}\", *v);\n+   |                           - move occurs due to use in closure\n+...\n+LL |     w.use_ref();\n+   |     - borrow later used here\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0505`."}, {"sha": "27296085d9a411cbda38486d11252fa539d22146", "filename": "src/test/ui/borrowck/borrowck-loan-blocks-move-cc.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c7041a60a55d95a3070b2ada4c3203f737bb4f7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-blocks-move-cc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7041a60a55d95a3070b2ada4c3203f737bb4f7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-blocks-move-cc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-blocks-move-cc.rs?ref=c7041a60a55d95a3070b2ada4c3203f737bb4f7f", "patch": "@@ -8,33 +8,38 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-compare-mode-nll\n-\n #![feature(box_syntax)]\n \n use std::thread;\n \n+\n+\n fn borrow<F>(v: &isize, f: F) where F: FnOnce(&isize) {\n     f(v);\n }\n \n fn box_imm() {\n     let v: Box<_> = box 3;\n-    let _w = &v;\n+    let w = &v;\n     thread::spawn(move|| {\n         println!(\"v={}\", *v);\n         //~^ ERROR cannot move `v` into closure\n     });\n+    w.use_ref();\n }\n \n fn box_imm_explicit() {\n     let v: Box<_> = box 3;\n-    let _w = &v;\n+    let w = &v;\n     thread::spawn(move|| {\n         println!(\"v={}\", *v);\n         //~^ ERROR cannot move\n     });\n+    w.use_ref();\n }\n \n fn main() {\n }\n+\n+trait Fake { fn use_mut(&mut self) { } fn use_ref(&self) { }  }\n+impl<T> Fake for T { }"}, {"sha": "575672959929c4057cecf68079095429a16988c5", "filename": "src/test/ui/borrowck/borrowck-loan-blocks-move-cc.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c7041a60a55d95a3070b2ada4c3203f737bb4f7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-blocks-move-cc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c7041a60a55d95a3070b2ada4c3203f737bb4f7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-blocks-move-cc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-blocks-move-cc.stderr?ref=c7041a60a55d95a3070b2ada4c3203f737bb4f7f", "patch": "@@ -1,17 +1,17 @@\n error[E0504]: cannot move `v` into closure because it is borrowed\n   --> $DIR/borrowck-loan-blocks-move-cc.rs:25:27\n    |\n-LL |     let _w = &v;\n-   |               - borrow of `v` occurs here\n+LL |     let w = &v;\n+   |              - borrow of `v` occurs here\n LL |     thread::spawn(move|| {\n LL |         println!(\"v={}\", *v);\n    |                           ^ move into closure occurs here\n \n error[E0504]: cannot move `v` into closure because it is borrowed\n-  --> $DIR/borrowck-loan-blocks-move-cc.rs:34:27\n+  --> $DIR/borrowck-loan-blocks-move-cc.rs:35:27\n    |\n-LL |     let _w = &v;\n-   |               - borrow of `v` occurs here\n+LL |     let w = &v;\n+   |              - borrow of `v` occurs here\n LL |     thread::spawn(move|| {\n LL |         println!(\"v={}\", *v);\n    |                           ^ move into closure occurs here"}, {"sha": "432137cdae1ba34dc5c6a49ca44a1bf6a6707ef3", "filename": "src/test/ui/borrowck/borrowck-loan-blocks-move.nll.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c7041a60a55d95a3070b2ada4c3203f737bb4f7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-blocks-move.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c7041a60a55d95a3070b2ada4c3203f737bb4f7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-blocks-move.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-blocks-move.nll.stderr?ref=c7041a60a55d95a3070b2ada4c3203f737bb4f7f", "patch": "@@ -0,0 +1,13 @@\n+error[E0505]: cannot move out of `v` because it is borrowed\n+  --> $DIR/borrowck-loan-blocks-move.rs:21:10\n+   |\n+LL |     let w = &v;\n+   |             -- borrow of `v` occurs here\n+LL |     take(v); //~ ERROR cannot move out of `v` because it is borrowed\n+   |          ^ move out of `v` occurs here\n+LL |     w.use_ref();\n+   |     - borrow later used here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0505`."}, {"sha": "b1241ae020efc29cc40f2d834773f5b443b4acd5", "filename": "src/test/ui/borrowck/borrowck-loan-blocks-move.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c7041a60a55d95a3070b2ada4c3203f737bb4f7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-blocks-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7041a60a55d95a3070b2ada4c3203f737bb4f7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-blocks-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-blocks-move.rs?ref=c7041a60a55d95a3070b2ada4c3203f737bb4f7f", "patch": "@@ -8,18 +8,22 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-compare-mode-nll\n-\n #![feature(box_syntax)]\n \n+\n+\n fn take(_v: Box<isize>) {\n }\n \n fn box_imm() {\n     let v = box 3;\n-    let _w = &v;\n+    let w = &v;\n     take(v); //~ ERROR cannot move out of `v` because it is borrowed\n+    w.use_ref();\n }\n \n fn main() {\n }\n+\n+trait Fake { fn use_mut(&mut self) { } fn use_ref(&self) { }  }\n+impl<T> Fake for T { }"}, {"sha": "5edbf6a9b2c21034ab3f9df7c64f68dd989e140f", "filename": "src/test/ui/borrowck/borrowck-loan-blocks-move.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c7041a60a55d95a3070b2ada4c3203f737bb4f7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-blocks-move.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c7041a60a55d95a3070b2ada4c3203f737bb4f7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-blocks-move.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-blocks-move.stderr?ref=c7041a60a55d95a3070b2ada4c3203f737bb4f7f", "patch": "@@ -1,8 +1,8 @@\n error[E0505]: cannot move out of `v` because it is borrowed\n   --> $DIR/borrowck-loan-blocks-move.rs:21:10\n    |\n-LL |     let _w = &v;\n-   |               - borrow of `v` occurs here\n+LL |     let w = &v;\n+   |              - borrow of `v` occurs here\n LL |     take(v); //~ ERROR cannot move out of `v` because it is borrowed\n    |          ^ move out of `v` occurs here\n "}, {"sha": "bd5d19ffe054c1200687b0d3c98478422d7dd400", "filename": "src/test/ui/borrowck/borrowck-move-from-subpath-of-borrowed-path.nll.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c7041a60a55d95a3070b2ada4c3203f737bb4f7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-from-subpath-of-borrowed-path.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c7041a60a55d95a3070b2ada4c3203f737bb4f7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-from-subpath-of-borrowed-path.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-from-subpath-of-borrowed-path.nll.stderr?ref=c7041a60a55d95a3070b2ada4c3203f737bb4f7f", "patch": "@@ -0,0 +1,14 @@\n+error[E0505]: cannot move out of `*a` because it is borrowed\n+  --> $DIR/borrowck-move-from-subpath-of-borrowed-path.rs:22:13\n+   |\n+LL |     let b = &a;\n+   |             -- borrow of `a` occurs here\n+LL | \n+LL |     let z = *a; //~ ERROR: cannot move out of `*a` because it is borrowed\n+   |             ^^ move out of `*a` occurs here\n+LL |     b.use_ref();\n+   |     - borrow later used here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0505`."}, {"sha": "1216fb89667e84fdef38a3d54c372ce4818fdd9c", "filename": "src/test/ui/borrowck/borrowck-move-from-subpath-of-borrowed-path.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c7041a60a55d95a3070b2ada4c3203f737bb4f7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-from-subpath-of-borrowed-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7041a60a55d95a3070b2ada4c3203f737bb4f7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-from-subpath-of-borrowed-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-from-subpath-of-borrowed-path.rs?ref=c7041a60a55d95a3070b2ada4c3203f737bb4f7f", "patch": "@@ -8,16 +8,20 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-compare-mode-nll\n-\n // verify that an error is raised when trying to move out of a\n // borrowed path.\n \n+\n+\n #![feature(box_syntax)]\n \n fn main() {\n     let a: Box<Box<_>> = box box 2;\n     let b = &a;\n \n     let z = *a; //~ ERROR: cannot move out of `*a` because it is borrowed\n+    b.use_ref();\n }\n+\n+trait Fake { fn use_mut(&mut self) { } fn use_ref(&self) { }  }\n+impl<T> Fake for T { }"}, {"sha": "9d31d2b4aff9f93ff89038ec27ee73b569b1c738", "filename": "src/test/ui/borrowck/borrowck-move-mut-base-ptr.nll.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c7041a60a55d95a3070b2ada4c3203f737bb4f7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-mut-base-ptr.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c7041a60a55d95a3070b2ada4c3203f737bb4f7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-mut-base-ptr.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-mut-base-ptr.nll.stderr?ref=c7041a60a55d95a3070b2ada4c3203f737bb4f7f", "patch": "@@ -0,0 +1,14 @@\n+error[E0505]: cannot move out of `t0` because it is borrowed\n+  --> $DIR/borrowck-move-mut-base-ptr.rs:20:14\n+   |\n+LL |     let p: &isize = &*t0; // Freezes `*t0`\n+   |                     ---- borrow of `*t0` occurs here\n+LL |     let t1 = t0;        //~ ERROR cannot move out of `t0`\n+   |              ^^ move out of `t0` occurs here\n+LL |     *t1 = 22;\n+LL |     p.use_ref();\n+   |     - borrow later used here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0505`."}, {"sha": "eb7b310a8bf07ed55fb3566062c3dbd8f3ffbe36", "filename": "src/test/ui/borrowck/borrowck-move-mut-base-ptr.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c7041a60a55d95a3070b2ada4c3203f737bb4f7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-mut-base-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7041a60a55d95a3070b2ada4c3203f737bb4f7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-mut-base-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-mut-base-ptr.rs?ref=c7041a60a55d95a3070b2ada4c3203f737bb4f7f", "patch": "@@ -8,18 +8,22 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-compare-mode-nll\n-\n // Test that attempt to move `&mut` pointer while pointee is borrowed\n // yields an error.\n //\n // Example from src/librustc_borrowck/borrowck/README.md\n \n+\n+\n fn foo(t0: &mut isize) {\n     let p: &isize = &*t0; // Freezes `*t0`\n     let t1 = t0;        //~ ERROR cannot move out of `t0`\n     *t1 = 22;\n+    p.use_ref();\n }\n \n fn main() {\n }\n+\n+trait Fake { fn use_mut(&mut self) { } fn use_ref(&self) { }  }\n+impl<T> Fake for T { }"}, {"sha": "0684e787bae7f3a2146f60e561371ec03e985892", "filename": "src/test/ui/borrowck/borrowck-mut-borrow-of-mut-base-ptr.nll.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c7041a60a55d95a3070b2ada4c3203f737bb4f7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mut-borrow-of-mut-base-ptr.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c7041a60a55d95a3070b2ada4c3203f737bb4f7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mut-borrow-of-mut-base-ptr.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mut-borrow-of-mut-base-ptr.nll.stderr?ref=c7041a60a55d95a3070b2ada4c3203f737bb4f7f", "patch": "@@ -0,0 +1,26 @@\n+error[E0502]: cannot borrow `t0` as mutable because it is also borrowed as immutable\n+  --> $DIR/borrowck-mut-borrow-of-mut-base-ptr.rs:21:18\n+   |\n+LL |     let p: &isize = &*t0;     // Freezes `*t0`\n+   |                     ---- immutable borrow occurs here\n+LL |     let mut t2 = &mut t0;   //~ ERROR cannot borrow `t0`\n+   |                  ^^^^^^^ mutable borrow occurs here\n+LL |     **t2 += 1;              // Mutates `*t0`\n+LL |     p.use_ref();\n+   |     - borrow later used here\n+\n+error[E0499]: cannot borrow `t0` as mutable more than once at a time\n+  --> $DIR/borrowck-mut-borrow-of-mut-base-ptr.rs:29:18\n+   |\n+LL |     let p: &mut isize = &mut *t0; // Claims `*t0`\n+   |                         -------- first mutable borrow occurs here\n+LL |     let mut t2 = &mut t0;       //~ ERROR cannot borrow `t0`\n+   |                  ^^^^^^^ second mutable borrow occurs here\n+LL |     **t2 += 1;                  // Mutates `*t0` but not through `*p`\n+LL |     p.use_mut();\n+   |     - borrow later used here\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors occurred: E0499, E0502.\n+For more information about an error, try `rustc --explain E0499`."}, {"sha": "45768ef51146e66022a522c0a3287fd8552f17ce", "filename": "src/test/ui/borrowck/borrowck-mut-borrow-of-mut-base-ptr.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c7041a60a55d95a3070b2ada4c3203f737bb4f7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mut-borrow-of-mut-base-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7041a60a55d95a3070b2ada4c3203f737bb4f7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mut-borrow-of-mut-base-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mut-borrow-of-mut-base-ptr.rs?ref=c7041a60a55d95a3070b2ada4c3203f737bb4f7f", "patch": "@@ -8,26 +8,31 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-compare-mode-nll\n-\n // Test that attempt to mutably borrow `&mut` pointer while pointee is\n // borrowed yields an error.\n //\n // Example from src/librustc_borrowck/borrowck/README.md\n \n+\n+\n fn foo<'a>(mut t0: &'a mut isize,\n            mut t1: &'a mut isize) {\n     let p: &isize = &*t0;     // Freezes `*t0`\n     let mut t2 = &mut t0;   //~ ERROR cannot borrow `t0`\n     **t2 += 1;              // Mutates `*t0`\n+    p.use_ref();\n }\n \n fn bar<'a>(mut t0: &'a mut isize,\n            mut t1: &'a mut isize) {\n     let p: &mut isize = &mut *t0; // Claims `*t0`\n     let mut t2 = &mut t0;       //~ ERROR cannot borrow `t0`\n     **t2 += 1;                  // Mutates `*t0` but not through `*p`\n+    p.use_mut();\n }\n \n fn main() {\n }\n+\n+trait Fake { fn use_mut(&mut self) { } fn use_ref(&self) { }  }\n+impl<T> Fake for T { }"}, {"sha": "d5b883196297881944ec7a6402356fc50705de1e", "filename": "src/test/ui/borrowck/borrowck-mut-borrow-of-mut-base-ptr.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c7041a60a55d95a3070b2ada4c3203f737bb4f7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mut-borrow-of-mut-base-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c7041a60a55d95a3070b2ada4c3203f737bb4f7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mut-borrow-of-mut-base-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mut-borrow-of-mut-base-ptr.stderr?ref=c7041a60a55d95a3070b2ada4c3203f737bb4f7f", "patch": "@@ -5,18 +5,18 @@ LL |     let p: &isize = &*t0;     // Freezes `*t0`\n    |                      --- immutable borrow occurs here\n LL |     let mut t2 = &mut t0;   //~ ERROR cannot borrow `t0`\n    |                       ^^ mutable borrow occurs here\n-LL |     **t2 += 1;              // Mutates `*t0`\n+...\n LL | }\n    | - immutable borrow ends here\n \n error[E0499]: cannot borrow `t0` as mutable more than once at a time\n-  --> $DIR/borrowck-mut-borrow-of-mut-base-ptr.rs:28:23\n+  --> $DIR/borrowck-mut-borrow-of-mut-base-ptr.rs:29:23\n    |\n LL |     let p: &mut isize = &mut *t0; // Claims `*t0`\n    |                              --- first mutable borrow occurs here\n LL |     let mut t2 = &mut t0;       //~ ERROR cannot borrow `t0`\n    |                       ^^ second mutable borrow occurs here\n-LL |     **t2 += 1;                  // Mutates `*t0` but not through `*p`\n+...\n LL | }\n    | - first borrow ends here\n "}, {"sha": "e4e2dfe86bd83d693a90569e3013f7843fd6c590", "filename": "src/test/ui/borrowck/borrowck-object-lifetime.nll.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c7041a60a55d95a3070b2ada4c3203f737bb4f7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-object-lifetime.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c7041a60a55d95a3070b2ada4c3203f737bb4f7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-object-lifetime.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-object-lifetime.nll.stderr?ref=c7041a60a55d95a3070b2ada4c3203f737bb4f7f", "patch": "@@ -0,0 +1,23 @@\n+error[E0502]: cannot borrow `*x` as mutable because it is also borrowed as immutable\n+  --> $DIR/borrowck-object-lifetime.rs:30:13\n+   |\n+LL |     let y = x.borrowed();\n+   |             - immutable borrow occurs here\n+LL |     let z = x.mut_borrowed(); //~ ERROR cannot borrow\n+   |             ^^^^^^^^^^^^^^^^ mutable borrow occurs here\n+LL |     y.use_ref();\n+   |     - borrow later used here\n+\n+error[E0502]: cannot borrow `x` as mutable because it is also borrowed as immutable\n+  --> $DIR/borrowck-object-lifetime.rs:36:13\n+   |\n+LL |     let y = x.borrowed();\n+   |             - immutable borrow occurs here\n+LL |     let z = &mut x; //~ ERROR cannot borrow\n+   |             ^^^^^^ mutable borrow occurs here\n+LL |     y.use_ref();\n+   |     - borrow later used here\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0502`."}, {"sha": "cb7486aefa28ba8c7b2fcb09fa9d5dc0260da765", "filename": "src/test/ui/borrowck/borrowck-object-lifetime.rs", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/c7041a60a55d95a3070b2ada4c3203f737bb4f7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-object-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7041a60a55d95a3070b2ada4c3203f737bb4f7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-object-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-object-lifetime.rs?ref=c7041a60a55d95a3070b2ada4c3203f737bb4f7f", "patch": "@@ -8,34 +8,43 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-compare-mode-nll\n-\n // Test that borrows that occur due to calls to object methods\n // properly \"claim\" the object path.\n \n+\n+\n trait Foo {\n     fn borrowed(&self) -> &();\n     fn mut_borrowed(&mut self) -> &();\n }\n \n fn borrowed_receiver(x: &Foo) {\n-    let _y = x.borrowed();\n-    let _z = x.borrowed();\n+    let y = x.borrowed();\n+    let z = x.borrowed();\n+    z.use_ref();\n+    y.use_ref();\n }\n \n fn mut_borrowed_receiver(x: &mut Foo) {\n-    let _y = x.borrowed();\n-    let _z = x.mut_borrowed(); //~ ERROR cannot borrow\n+    let y = x.borrowed();\n+    let z = x.mut_borrowed(); //~ ERROR cannot borrow\n+    y.use_ref();\n }\n \n fn mut_owned_receiver(mut x: Box<Foo>) {\n-    let _y = x.borrowed();\n-    let _z = &mut x; //~ ERROR cannot borrow\n+    let y = x.borrowed();\n+    let z = &mut x; //~ ERROR cannot borrow\n+    y.use_ref();\n }\n \n fn imm_owned_receiver(mut x: Box<Foo>) {\n-    let _y = x.borrowed();\n-    let _z = &x;\n+    let y = x.borrowed();\n+    let z = &x;\n+    z.use_ref();\n+    y.use_ref();\n }\n \n fn main() {}\n+\n+trait Fake { fn use_mut(&mut self) { } fn use_ref(&self) { }  }\n+impl<T> Fake for T { }"}, {"sha": "5e9045d3e3868fde942c113c57dd7ce5ee643c81", "filename": "src/test/ui/borrowck/borrowck-object-lifetime.stderr", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c7041a60a55d95a3070b2ada4c3203f737bb4f7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-object-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c7041a60a55d95a3070b2ada4c3203f737bb4f7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-object-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-object-lifetime.stderr?ref=c7041a60a55d95a3070b2ada4c3203f737bb4f7f", "patch": "@@ -1,20 +1,22 @@\n error[E0502]: cannot borrow `*x` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-object-lifetime.rs:28:14\n+  --> $DIR/borrowck-object-lifetime.rs:30:13\n    |\n-LL |     let _y = x.borrowed();\n-   |              - immutable borrow occurs here\n-LL |     let _z = x.mut_borrowed(); //~ ERROR cannot borrow\n-   |              ^ mutable borrow occurs here\n+LL |     let y = x.borrowed();\n+   |             - immutable borrow occurs here\n+LL |     let z = x.mut_borrowed(); //~ ERROR cannot borrow\n+   |             ^ mutable borrow occurs here\n+LL |     y.use_ref();\n LL | }\n    | - immutable borrow ends here\n \n error[E0502]: cannot borrow `x` as mutable because `*x` is also borrowed as immutable\n-  --> $DIR/borrowck-object-lifetime.rs:33:19\n+  --> $DIR/borrowck-object-lifetime.rs:36:18\n    |\n-LL |     let _y = x.borrowed();\n-   |              - immutable borrow occurs here\n-LL |     let _z = &mut x; //~ ERROR cannot borrow\n-   |                   ^ mutable borrow occurs here\n+LL |     let y = x.borrowed();\n+   |             - immutable borrow occurs here\n+LL |     let z = &mut x; //~ ERROR cannot borrow\n+   |                  ^ mutable borrow occurs here\n+LL |     y.use_ref();\n LL | }\n    | - immutable borrow ends here\n "}, {"sha": "994492d8575c9f65e6205595beead5d90e5f2152", "filename": "src/test/ui/borrowck/borrowck-overloaded-index-autoderef.nll.stderr", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/c7041a60a55d95a3070b2ada4c3203f737bb4f7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-index-autoderef.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c7041a60a55d95a3070b2ada4c3203f737bb4f7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-index-autoderef.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-index-autoderef.nll.stderr?ref=c7041a60a55d95a3070b2ada4c3203f737bb4f7f", "patch": "@@ -0,0 +1,84 @@\n+error[E0502]: cannot borrow `*f` as immutable because it is also borrowed as mutable\n+  --> $DIR/borrowck-overloaded-index-autoderef.rs:47:14\n+   |\n+LL |     let p = &mut f[&s];\n+   |                  - mutable borrow occurs here\n+LL |     let q = &f[&s]; //~ ERROR cannot borrow\n+   |              ^ immutable borrow occurs here\n+LL |     p.use_mut();\n+   |     - borrow later used here\n+\n+error[E0499]: cannot borrow `*f` as mutable more than once at a time\n+  --> $DIR/borrowck-overloaded-index-autoderef.rs:53:18\n+   |\n+LL |     let p = &mut f[&s];\n+   |                  - first mutable borrow occurs here\n+LL |     let q = &mut f[&s]; //~ ERROR cannot borrow\n+   |                  ^ second mutable borrow occurs here\n+LL |     p.use_mut();\n+   |     - borrow later used here\n+\n+error[E0499]: cannot borrow `f.foo` as mutable more than once at a time\n+  --> $DIR/borrowck-overloaded-index-autoderef.rs:63:18\n+   |\n+LL |     let p = &mut f.foo[&s];\n+   |                  ----- first mutable borrow occurs here\n+LL |     let q = &mut f.foo[&s]; //~ ERROR cannot borrow\n+   |                  ^^^^^ second mutable borrow occurs here\n+LL |     p.use_mut();\n+   |     - borrow later used here\n+\n+error[E0502]: cannot borrow `f.foo` as mutable because it is also borrowed as immutable\n+  --> $DIR/borrowck-overloaded-index-autoderef.rs:75:18\n+   |\n+LL |     let p = &f.foo[&s];\n+   |              ----- immutable borrow occurs here\n+LL |     let q = &mut f.foo[&s]; //~ ERROR cannot borrow\n+   |                  ^^^^^ mutable borrow occurs here\n+LL |     p.use_ref();\n+   |     - borrow later used here\n+\n+error[E0506]: cannot assign to `f.foo` because it is borrowed\n+  --> $DIR/borrowck-overloaded-index-autoderef.rs:81:5\n+   |\n+LL |     let p = &f.foo[&s];\n+   |              ----- borrow of `f.foo` occurs here\n+LL |     f.foo = g; //~ ERROR cannot assign\n+   |     ^^^^^^^^^ assignment to borrowed `f.foo` occurs here\n+LL |     p.use_ref();\n+   |     - borrow later used here\n+\n+error[E0506]: cannot assign to `*f` because it is borrowed\n+  --> $DIR/borrowck-overloaded-index-autoderef.rs:87:5\n+   |\n+LL |     let p = &f.foo[&s];\n+   |              ----- borrow of `*f` occurs here\n+LL |     *f = g; //~ ERROR cannot assign\n+   |     ^^^^^^ assignment to borrowed `*f` occurs here\n+LL |     p.use_ref();\n+   |     - borrow later used here\n+\n+error[E0506]: cannot assign to `f.foo` because it is borrowed\n+  --> $DIR/borrowck-overloaded-index-autoderef.rs:93:5\n+   |\n+LL |     let p = &mut f.foo[&s];\n+   |                  ----- borrow of `f.foo` occurs here\n+LL |     f.foo = g; //~ ERROR cannot assign\n+   |     ^^^^^^^^^ assignment to borrowed `f.foo` occurs here\n+LL |     p.use_mut();\n+   |     - borrow later used here\n+\n+error[E0506]: cannot assign to `*f` because it is borrowed\n+  --> $DIR/borrowck-overloaded-index-autoderef.rs:99:5\n+   |\n+LL |     let p = &mut f.foo[&s];\n+   |                  ----- borrow of `*f` occurs here\n+LL |     *f = g; //~ ERROR cannot assign\n+   |     ^^^^^^ assignment to borrowed `*f` occurs here\n+LL |     p.use_mut();\n+   |     - borrow later used here\n+\n+error: aborting due to 8 previous errors\n+\n+Some errors occurred: E0499, E0502, E0506.\n+For more information about an error, try `rustc --explain E0499`."}, {"sha": "5ab3d75f181789a05fe739f8c40f07f4e859951e", "filename": "src/test/ui/borrowck/borrowck-overloaded-index-autoderef.rs", "status": "modified", "additions": 28, "deletions": 16, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/c7041a60a55d95a3070b2ada4c3203f737bb4f7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-index-autoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7041a60a55d95a3070b2ada4c3203f737bb4f7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-index-autoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-index-autoderef.rs?ref=c7041a60a55d95a3070b2ada4c3203f737bb4f7f", "patch": "@@ -8,13 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-compare-mode-nll\n-\n // Test that we still see borrowck errors of various kinds when using\n // indexing and autoderef in combination.\n \n use std::ops::{Index, IndexMut};\n \n+\n+\n struct Foo {\n     x: isize,\n     y: isize,\n@@ -43,53 +43,65 @@ impl<'a> IndexMut<&'a String> for Foo {\n }\n \n fn test1(mut f: Box<Foo>, s: String) {\n-    let _p = &mut f[&s];\n-    let _q = &f[&s]; //~ ERROR cannot borrow\n+    let p = &mut f[&s];\n+    let q = &f[&s]; //~ ERROR cannot borrow\n+    p.use_mut();\n }\n \n fn test2(mut f: Box<Foo>, s: String) {\n-    let _p = &mut f[&s];\n-    let _q = &mut f[&s]; //~ ERROR cannot borrow\n+    let p = &mut f[&s];\n+    let q = &mut f[&s]; //~ ERROR cannot borrow\n+    p.use_mut();\n }\n \n struct Bar {\n     foo: Foo\n }\n \n fn test3(mut f: Box<Bar>, s: String) {\n-    let _p = &mut f.foo[&s];\n-    let _q = &mut f.foo[&s]; //~ ERROR cannot borrow\n+    let p = &mut f.foo[&s];\n+    let q = &mut f.foo[&s]; //~ ERROR cannot borrow\n+    p.use_mut();\n }\n \n fn test4(mut f: Box<Bar>, s: String) {\n-    let _p = &f.foo[&s];\n-    let _q = &f.foo[&s];\n+    let p = &f.foo[&s];\n+    let q = &f.foo[&s];\n+    p.use_ref();\n }\n \n fn test5(mut f: Box<Bar>, s: String) {\n-    let _p = &f.foo[&s];\n-    let _q = &mut f.foo[&s]; //~ ERROR cannot borrow\n+    let p = &f.foo[&s];\n+    let q = &mut f.foo[&s]; //~ ERROR cannot borrow\n+    p.use_ref();\n }\n \n fn test6(mut f: Box<Bar>, g: Foo, s: String) {\n-    let _p = &f.foo[&s];\n+    let p = &f.foo[&s];\n     f.foo = g; //~ ERROR cannot assign\n+    p.use_ref();\n }\n \n fn test7(mut f: Box<Bar>, g: Bar, s: String) {\n-    let _p = &f.foo[&s];\n+    let p = &f.foo[&s];\n     *f = g; //~ ERROR cannot assign\n+    p.use_ref();\n }\n \n fn test8(mut f: Box<Bar>, g: Foo, s: String) {\n-    let _p = &mut f.foo[&s];\n+    let p = &mut f.foo[&s];\n     f.foo = g; //~ ERROR cannot assign\n+    p.use_mut();\n }\n \n fn test9(mut f: Box<Bar>, g: Bar, s: String) {\n-    let _p = &mut f.foo[&s];\n+    let p = &mut f.foo[&s];\n     *f = g; //~ ERROR cannot assign\n+    p.use_mut();\n }\n \n fn main() {\n }\n+\n+trait Fake { fn use_mut(&mut self) { } fn use_ref(&self) { }  }\n+impl<T> Fake for T { }"}, {"sha": "7a17a5570e4bea9f3049793ace16c69faf36b66c", "filename": "src/test/ui/borrowck/borrowck-overloaded-index-autoderef.stderr", "status": "modified", "additions": 36, "deletions": 32, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/c7041a60a55d95a3070b2ada4c3203f737bb4f7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-index-autoderef.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c7041a60a55d95a3070b2ada4c3203f737bb4f7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-index-autoderef.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-index-autoderef.stderr?ref=c7041a60a55d95a3070b2ada4c3203f737bb4f7f", "patch": "@@ -1,72 +1,76 @@\n error[E0502]: cannot borrow `*f` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-overloaded-index-autoderef.rs:47:15\n+  --> $DIR/borrowck-overloaded-index-autoderef.rs:47:14\n    |\n-LL |     let _p = &mut f[&s];\n-   |                   - mutable borrow occurs here\n-LL |     let _q = &f[&s]; //~ ERROR cannot borrow\n-   |               ^ immutable borrow occurs here\n+LL |     let p = &mut f[&s];\n+   |                  - mutable borrow occurs here\n+LL |     let q = &f[&s]; //~ ERROR cannot borrow\n+   |              ^ immutable borrow occurs here\n+LL |     p.use_mut();\n LL | }\n    | - mutable borrow ends here\n \n error[E0499]: cannot borrow `*f` as mutable more than once at a time\n-  --> $DIR/borrowck-overloaded-index-autoderef.rs:52:19\n+  --> $DIR/borrowck-overloaded-index-autoderef.rs:53:18\n    |\n-LL |     let _p = &mut f[&s];\n-   |                   - first mutable borrow occurs here\n-LL |     let _q = &mut f[&s]; //~ ERROR cannot borrow\n-   |                   ^ second mutable borrow occurs here\n+LL |     let p = &mut f[&s];\n+   |                  - first mutable borrow occurs here\n+LL |     let q = &mut f[&s]; //~ ERROR cannot borrow\n+   |                  ^ second mutable borrow occurs here\n+LL |     p.use_mut();\n LL | }\n    | - first borrow ends here\n \n error[E0499]: cannot borrow `f.foo` as mutable more than once at a time\n-  --> $DIR/borrowck-overloaded-index-autoderef.rs:61:19\n+  --> $DIR/borrowck-overloaded-index-autoderef.rs:63:18\n    |\n-LL |     let _p = &mut f.foo[&s];\n-   |                   ----- first mutable borrow occurs here\n-LL |     let _q = &mut f.foo[&s]; //~ ERROR cannot borrow\n-   |                   ^^^^^ second mutable borrow occurs here\n+LL |     let p = &mut f.foo[&s];\n+   |                  ----- first mutable borrow occurs here\n+LL |     let q = &mut f.foo[&s]; //~ ERROR cannot borrow\n+   |                  ^^^^^ second mutable borrow occurs here\n+LL |     p.use_mut();\n LL | }\n    | - first borrow ends here\n \n error[E0502]: cannot borrow `f.foo` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-overloaded-index-autoderef.rs:71:19\n+  --> $DIR/borrowck-overloaded-index-autoderef.rs:75:18\n    |\n-LL |     let _p = &f.foo[&s];\n-   |               ----- immutable borrow occurs here\n-LL |     let _q = &mut f.foo[&s]; //~ ERROR cannot borrow\n-   |                   ^^^^^ mutable borrow occurs here\n+LL |     let p = &f.foo[&s];\n+   |              ----- immutable borrow occurs here\n+LL |     let q = &mut f.foo[&s]; //~ ERROR cannot borrow\n+   |                  ^^^^^ mutable borrow occurs here\n+LL |     p.use_ref();\n LL | }\n    | - immutable borrow ends here\n \n error[E0506]: cannot assign to `f.foo` because it is borrowed\n-  --> $DIR/borrowck-overloaded-index-autoderef.rs:76:5\n+  --> $DIR/borrowck-overloaded-index-autoderef.rs:81:5\n    |\n-LL |     let _p = &f.foo[&s];\n-   |               ----- borrow of `f.foo` occurs here\n+LL |     let p = &f.foo[&s];\n+   |              ----- borrow of `f.foo` occurs here\n LL |     f.foo = g; //~ ERROR cannot assign\n    |     ^^^^^^^^^ assignment to borrowed `f.foo` occurs here\n \n error[E0506]: cannot assign to `*f` because it is borrowed\n-  --> $DIR/borrowck-overloaded-index-autoderef.rs:81:5\n+  --> $DIR/borrowck-overloaded-index-autoderef.rs:87:5\n    |\n-LL |     let _p = &f.foo[&s];\n-   |               ----- borrow of `*f` occurs here\n+LL |     let p = &f.foo[&s];\n+   |              ----- borrow of `*f` occurs here\n LL |     *f = g; //~ ERROR cannot assign\n    |     ^^^^^^ assignment to borrowed `*f` occurs here\n \n error[E0506]: cannot assign to `f.foo` because it is borrowed\n-  --> $DIR/borrowck-overloaded-index-autoderef.rs:86:5\n+  --> $DIR/borrowck-overloaded-index-autoderef.rs:93:5\n    |\n-LL |     let _p = &mut f.foo[&s];\n-   |                   ----- borrow of `f.foo` occurs here\n+LL |     let p = &mut f.foo[&s];\n+   |                  ----- borrow of `f.foo` occurs here\n LL |     f.foo = g; //~ ERROR cannot assign\n    |     ^^^^^^^^^ assignment to borrowed `f.foo` occurs here\n \n error[E0506]: cannot assign to `*f` because it is borrowed\n-  --> $DIR/borrowck-overloaded-index-autoderef.rs:91:5\n+  --> $DIR/borrowck-overloaded-index-autoderef.rs:99:5\n    |\n-LL |     let _p = &mut f.foo[&s];\n-   |                   ----- borrow of `*f` occurs here\n+LL |     let p = &mut f.foo[&s];\n+   |                  ----- borrow of `*f` occurs here\n LL |     *f = g; //~ ERROR cannot assign\n    |     ^^^^^^ assignment to borrowed `*f` occurs here\n "}, {"sha": "5f605694c5bccaa9759a6c6408186335e97d0ed1", "filename": "src/test/ui/borrowck/borrowck-swap-mut-base-ptr.nll.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c7041a60a55d95a3070b2ada4c3203f737bb4f7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-swap-mut-base-ptr.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c7041a60a55d95a3070b2ada4c3203f737bb4f7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-swap-mut-base-ptr.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-swap-mut-base-ptr.nll.stderr?ref=c7041a60a55d95a3070b2ada4c3203f737bb4f7f", "patch": "@@ -0,0 +1,14 @@\n+error[E0502]: cannot borrow `t0` as mutable because it is also borrowed as immutable\n+  --> $DIR/borrowck-swap-mut-base-ptr.rs:23:10\n+   |\n+LL |     let p: &isize = &*t0;     // Freezes `*t0`\n+   |                     ---- immutable borrow occurs here\n+LL |     swap(&mut t0, &mut t1); //~ ERROR cannot borrow `t0`\n+   |          ^^^^^^^ mutable borrow occurs here\n+LL |     *t1 = 22;\n+LL |     p.use_ref();\n+   |     - borrow later used here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0502`."}, {"sha": "b4b78bbb747fbe7a7bb3a07e297fae5c725890f7", "filename": "src/test/ui/borrowck/borrowck-swap-mut-base-ptr.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c7041a60a55d95a3070b2ada4c3203f737bb4f7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-swap-mut-base-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7041a60a55d95a3070b2ada4c3203f737bb4f7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-swap-mut-base-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-swap-mut-base-ptr.rs?ref=c7041a60a55d95a3070b2ada4c3203f737bb4f7f", "patch": "@@ -8,21 +8,25 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-compare-mode-nll\n-\n // Test that attempt to swap `&mut` pointer while pointee is borrowed\n // yields an error.\n //\n // Example from src/librustc_borrowck/borrowck/README.md\n \n use std::mem::swap;\n \n+\n+\n fn foo<'a>(mut t0: &'a mut isize,\n            mut t1: &'a mut isize) {\n     let p: &isize = &*t0;     // Freezes `*t0`\n     swap(&mut t0, &mut t1); //~ ERROR cannot borrow `t0`\n     *t1 = 22;\n+    p.use_ref();\n }\n \n fn main() {\n }\n+\n+trait Fake { fn use_mut(&mut self) { } fn use_ref(&self) { }  }\n+impl<T> Fake for T { }"}, {"sha": "27824725e53edfcb870512bf5bbd201bf98bce1d", "filename": "src/test/ui/borrowck/borrowck-swap-mut-base-ptr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7041a60a55d95a3070b2ada4c3203f737bb4f7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-swap-mut-base-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c7041a60a55d95a3070b2ada4c3203f737bb4f7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-swap-mut-base-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-swap-mut-base-ptr.stderr?ref=c7041a60a55d95a3070b2ada4c3203f737bb4f7f", "patch": "@@ -5,7 +5,7 @@ LL |     let p: &isize = &*t0;     // Freezes `*t0`\n    |                      --- immutable borrow occurs here\n LL |     swap(&mut t0, &mut t1); //~ ERROR cannot borrow `t0`\n    |               ^^ mutable borrow occurs here\n-LL |     *t1 = 22;\n+...\n LL | }\n    | - immutable borrow ends here\n "}, {"sha": "eaba196f8ac7ac4b5d5a4e92abdf74dd8677fc2e", "filename": "src/test/ui/borrowck/borrowck-union-borrow-nested.nll.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c7041a60a55d95a3070b2ada4c3203f737bb4f7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-borrow-nested.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c7041a60a55d95a3070b2ada4c3203f737bb4f7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-borrow-nested.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-borrow-nested.nll.stderr?ref=c7041a60a55d95a3070b2ada4c3203f737bb4f7f", "patch": "@@ -0,0 +1,13 @@\n+error[E0503]: cannot use `u.c` because it was mutably borrowed\n+  --> $DIR/borrowck-union-borrow-nested.rs:36:21\n+   |\n+LL |             let ra = &mut u.s.a;\n+   |                      ---------- borrow of `u.s.a` occurs here\n+LL |             let b = u.c; //~ ERROR cannot use `u.c` because it was mutably borrowed\n+   |                     ^^^ use of borrowed `u.s.a`\n+LL |             ra.use_mut();\n+   |             -- borrow later used here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0503`."}, {"sha": "0839d2430a9702b3f274c919f706623304b67ac0", "filename": "src/test/ui/borrowck/borrowck-union-borrow-nested.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c7041a60a55d95a3070b2ada4c3203f737bb4f7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-borrow-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7041a60a55d95a3070b2ada4c3203f737bb4f7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-borrow-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-borrow-nested.rs?ref=c7041a60a55d95a3070b2ada4c3203f737bb4f7f", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-compare-mode-nll\n+\n \n #[derive(Clone, Copy)]\n struct S {\n@@ -28,11 +28,16 @@ fn main() {\n             let mut u = U { s: S { a: 0, b: 1 } };\n             let ra = &mut u.s.a;\n             let b = u.s.b; // OK\n+            ra.use_mut();\n         }\n         {\n             let mut u = U { s: S { a: 0, b: 1 } };\n             let ra = &mut u.s.a;\n             let b = u.c; //~ ERROR cannot use `u.c` because it was mutably borrowed\n+            ra.use_mut();\n         }\n     }\n }\n+\n+trait Fake { fn use_mut(&mut self) { } fn use_ref(&self) { }  }\n+impl<T> Fake for T { }"}, {"sha": "8f90254469b5948f807f11f7c261545be3752bc7", "filename": "src/test/ui/borrowck/borrowck-union-borrow-nested.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7041a60a55d95a3070b2ada4c3203f737bb4f7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-borrow-nested.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c7041a60a55d95a3070b2ada4c3203f737bb4f7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-borrow-nested.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-borrow-nested.stderr?ref=c7041a60a55d95a3070b2ada4c3203f737bb4f7f", "patch": "@@ -1,5 +1,5 @@\n error[E0503]: cannot use `u.c` because it was mutably borrowed\n-  --> $DIR/borrowck-union-borrow-nested.rs:35:17\n+  --> $DIR/borrowck-union-borrow-nested.rs:36:17\n    |\n LL |             let ra = &mut u.s.a;\n    |                           ----- borrow of `u.s.a` occurs here"}, {"sha": "a918550fabfc14fd315cba0f7b47313d5a11c813", "filename": "src/test/ui/borrowck/borrowck-uniq-via-lend.nll.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c7041a60a55d95a3070b2ada4c3203f737bb4f7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uniq-via-lend.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c7041a60a55d95a3070b2ada4c3203f737bb4f7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uniq-via-lend.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uniq-via-lend.nll.stderr?ref=c7041a60a55d95a3070b2ada4c3203f737bb4f7f", "patch": "@@ -0,0 +1,23 @@\n+error[E0502]: cannot borrow `*v` as immutable because it is also borrowed as mutable\n+  --> $DIR/borrowck-uniq-via-lend.rs:46:12\n+   |\n+LL |     let w = &mut v;\n+   |             ------ mutable borrow occurs here\n+LL |     borrow(&*v); //~ ERROR cannot borrow `*v`\n+   |            ^^^ immutable borrow occurs here\n+LL |     w.use_mut();\n+   |     - borrow later used here\n+\n+error[E0502]: cannot borrow `*v` as immutable because it is also borrowed as mutable\n+  --> $DIR/borrowck-uniq-via-lend.rs:63:12\n+   |\n+LL |     x = &mut v;\n+   |         ------ mutable borrow occurs here\n+LL |     borrow(&*v); //~ ERROR cannot borrow `*v`\n+   |            ^^^ immutable borrow occurs here\n+LL |     x.use_mut();\n+   |     - borrow later used here\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0502`."}, {"sha": "6fbadc9be25d24ce3119c66e0b6230b026af306c", "filename": "src/test/ui/borrowck/borrowck-uniq-via-lend.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c7041a60a55d95a3070b2ada4c3203f737bb4f7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uniq-via-lend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7041a60a55d95a3070b2ada4c3203f737bb4f7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uniq-via-lend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uniq-via-lend.rs?ref=c7041a60a55d95a3070b2ada4c3203f737bb4f7f", "patch": "@@ -8,10 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-compare-mode-nll\n-\n #![feature(box_syntax)]\n \n+\n+\n fn borrow(_v: &isize) {}\n \n fn local() {\n@@ -35,30 +35,37 @@ fn local_recs() {\n \n fn aliased_imm() {\n     let mut v: Box<_> = box 3;\n-    let _w = &v;\n+    let w = &v;\n     borrow(&*v);\n+    w.use_ref();\n }\n \n fn aliased_mut() {\n     let mut v: Box<_> = box 3;\n-    let _w = &mut v;\n+    let w = &mut v;\n     borrow(&*v); //~ ERROR cannot borrow `*v`\n+    w.use_mut();\n }\n \n fn aliased_other() {\n     let mut v: Box<_> = box 3;\n     let mut w: Box<_> = box 4;\n-    let _x = &mut w;\n+    let x = &mut w;\n     borrow(&*v);\n+    x.use_mut();\n }\n \n fn aliased_other_reassign() {\n     let mut v: Box<_> = box 3;\n     let mut w: Box<_> = box 4;\n-    let mut _x = &mut w;\n-    _x = &mut v;\n+    let mut x = &mut w;\n+    x = &mut v;\n     borrow(&*v); //~ ERROR cannot borrow `*v`\n+    x.use_mut();\n }\n \n fn main() {\n }\n+\n+trait Fake { fn use_mut(&mut self) { } fn use_ref(&self) { }  }\n+impl<T> Fake for T { }"}, {"sha": "00b434401839639d2c55e474e1afcdf7e22c28d0", "filename": "src/test/ui/borrowck/borrowck-uniq-via-lend.stderr", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c7041a60a55d95a3070b2ada4c3203f737bb4f7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uniq-via-lend.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c7041a60a55d95a3070b2ada4c3203f737bb4f7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uniq-via-lend.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uniq-via-lend.stderr?ref=c7041a60a55d95a3070b2ada4c3203f737bb4f7f", "patch": "@@ -1,20 +1,22 @@\n error[E0502]: cannot borrow `*v` as immutable because `v` is also borrowed as mutable\n-  --> $DIR/borrowck-uniq-via-lend.rs:45:13\n+  --> $DIR/borrowck-uniq-via-lend.rs:46:13\n    |\n-LL |     let _w = &mut v;\n-   |                   - mutable borrow occurs here\n+LL |     let w = &mut v;\n+   |                  - mutable borrow occurs here\n LL |     borrow(&*v); //~ ERROR cannot borrow `*v`\n    |             ^^ immutable borrow occurs here\n+LL |     w.use_mut();\n LL | }\n    | - mutable borrow ends here\n \n error[E0502]: cannot borrow `*v` as immutable because `v` is also borrowed as mutable\n-  --> $DIR/borrowck-uniq-via-lend.rs:60:13\n+  --> $DIR/borrowck-uniq-via-lend.rs:63:13\n    |\n-LL |     _x = &mut v;\n-   |               - mutable borrow occurs here\n+LL |     x = &mut v;\n+   |              - mutable borrow occurs here\n LL |     borrow(&*v); //~ ERROR cannot borrow `*v`\n    |             ^^ immutable borrow occurs here\n+LL |     x.use_mut();\n LL | }\n    | - mutable borrow ends here\n "}, {"sha": "f876aa281d11195297e9805bc5453361db6c5291", "filename": "src/test/ui/methods/method-self-arg-2.nll.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c7041a60a55d95a3070b2ada4c3203f737bb4f7f/src%2Ftest%2Fui%2Fmethods%2Fmethod-self-arg-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c7041a60a55d95a3070b2ada4c3203f737bb4f7f/src%2Ftest%2Fui%2Fmethods%2Fmethod-self-arg-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-self-arg-2.nll.stderr?ref=c7041a60a55d95a3070b2ada4c3203f737bb4f7f", "patch": "@@ -0,0 +1,24 @@\n+error[E0502]: cannot borrow `x` as immutable because it is also borrowed as mutable\n+  --> $DIR/method-self-arg-2.rs:25:14\n+   |\n+LL |     let y = &mut x;\n+   |             ------ mutable borrow occurs here\n+LL |     Foo::bar(&x); //~ERROR cannot borrow `x`\n+   |              ^^ immutable borrow occurs here\n+LL |     y.use_mut();\n+   |     - borrow later used here\n+\n+error[E0499]: cannot borrow `x` as mutable more than once at a time\n+  --> $DIR/method-self-arg-2.rs:30:14\n+   |\n+LL |     let y = &mut x;\n+   |             ------ first mutable borrow occurs here\n+LL |     Foo::baz(&mut x); //~ERROR cannot borrow `x`\n+   |              ^^^^^^ second mutable borrow occurs here\n+LL |     y.use_mut();\n+   |     - borrow later used here\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors occurred: E0499, E0502.\n+For more information about an error, try `rustc --explain E0499`."}, {"sha": "cba4e6da6d99bb77a5d3293463a030bf9bae4955", "filename": "src/test/ui/methods/method-self-arg-2.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c7041a60a55d95a3070b2ada4c3203f737bb4f7f/src%2Ftest%2Fui%2Fmethods%2Fmethod-self-arg-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7041a60a55d95a3070b2ada4c3203f737bb4f7f/src%2Ftest%2Fui%2Fmethods%2Fmethod-self-arg-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-self-arg-2.rs?ref=c7041a60a55d95a3070b2ada4c3203f737bb4f7f", "patch": "@@ -8,10 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-compare-mode-nll\n-\n // Test method calls with self as an argument cannot subvert borrow checking.\n \n+\n+\n struct Foo;\n \n impl Foo {\n@@ -23,8 +23,13 @@ fn main() {\n     let mut x = Foo;\n     let y = &mut x;\n     Foo::bar(&x); //~ERROR cannot borrow `x`\n+    y.use_mut();\n \n     let mut x = Foo;\n     let y = &mut x;\n     Foo::baz(&mut x); //~ERROR cannot borrow `x`\n+    y.use_mut();\n }\n+\n+trait Fake { fn use_mut(&mut self) { } fn use_ref(&self) { }  }\n+impl<T> Fake for T { }"}, {"sha": "0bfa6034135a2390c2d07905c0f5c3d26b5bf23d", "filename": "src/test/ui/methods/method-self-arg-2.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c7041a60a55d95a3070b2ada4c3203f737bb4f7f/src%2Ftest%2Fui%2Fmethods%2Fmethod-self-arg-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c7041a60a55d95a3070b2ada4c3203f737bb4f7f/src%2Ftest%2Fui%2Fmethods%2Fmethod-self-arg-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-self-arg-2.stderr?ref=c7041a60a55d95a3070b2ada4c3203f737bb4f7f", "patch": "@@ -10,12 +10,13 @@ LL | }\n    | - mutable borrow ends here\n \n error[E0499]: cannot borrow `x` as mutable more than once at a time\n-  --> $DIR/method-self-arg-2.rs:29:19\n+  --> $DIR/method-self-arg-2.rs:30:19\n    |\n LL |     let y = &mut x;\n    |                  - first mutable borrow occurs here\n LL |     Foo::baz(&mut x); //~ERROR cannot borrow `x`\n    |                   ^ second mutable borrow occurs here\n+LL |     y.use_mut();\n LL | }\n    | - first borrow ends here\n "}, {"sha": "e2758f810db7d67a18ca43912d0bec300df9acb5", "filename": "src/test/ui/mut/mut-cant-alias.nll.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c7041a60a55d95a3070b2ada4c3203f737bb4f7f/src%2Ftest%2Fui%2Fmut%2Fmut-cant-alias.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c7041a60a55d95a3070b2ada4c3203f737bb4f7f/src%2Ftest%2Fui%2Fmut%2Fmut-cant-alias.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmut%2Fmut-cant-alias.nll.stderr?ref=c7041a60a55d95a3070b2ada4c3203f737bb4f7f", "patch": "@@ -0,0 +1,13 @@\n+error[E0499]: cannot borrow `b` as mutable more than once at a time\n+  --> $DIR/mut-cant-alias.rs:19:20\n+   |\n+LL |     let b1 = &mut *b;\n+   |                    - first mutable borrow occurs here\n+LL |     let b2 = &mut *b; //~ ERROR cannot borrow\n+   |                    ^ second mutable borrow occurs here\n+LL |     b1.use_mut();\n+   |     -- borrow later used here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0499`."}, {"sha": "af7d0e2742a0fa1003dcb54f471aef89d25343d6", "filename": "src/test/ui/mut/mut-cant-alias.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c7041a60a55d95a3070b2ada4c3203f737bb4f7f/src%2Ftest%2Fui%2Fmut%2Fmut-cant-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7041a60a55d95a3070b2ada4c3203f737bb4f7f/src%2Ftest%2Fui%2Fmut%2Fmut-cant-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmut%2Fmut-cant-alias.rs?ref=c7041a60a55d95a3070b2ada4c3203f737bb4f7f", "patch": "@@ -8,13 +8,17 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-compare-mode-nll\n-\n use std::cell::RefCell;\n \n+\n+\n fn main() {\n     let m = RefCell::new(0);\n     let mut b = m.borrow_mut();\n     let b1 = &mut *b;\n     let b2 = &mut *b; //~ ERROR cannot borrow\n+    b1.use_mut();\n }\n+\n+trait Fake { fn use_mut(&mut self) { } fn use_ref(&self) { }  }\n+impl<T> Fake for T { }"}, {"sha": "b15ffe649dd638b36afa393f6f12f0144dc7ed70", "filename": "src/test/ui/mut/mut-cant-alias.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c7041a60a55d95a3070b2ada4c3203f737bb4f7f/src%2Ftest%2Fui%2Fmut%2Fmut-cant-alias.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c7041a60a55d95a3070b2ada4c3203f737bb4f7f/src%2Ftest%2Fui%2Fmut%2Fmut-cant-alias.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmut%2Fmut-cant-alias.stderr?ref=c7041a60a55d95a3070b2ada4c3203f737bb4f7f", "patch": "@@ -5,6 +5,7 @@ LL |     let b1 = &mut *b;\n    |                    - first mutable borrow occurs here\n LL |     let b2 = &mut *b; //~ ERROR cannot borrow\n    |                    ^ second mutable borrow occurs here\n+LL |     b1.use_mut();\n LL | }\n    | - first borrow ends here\n "}]}