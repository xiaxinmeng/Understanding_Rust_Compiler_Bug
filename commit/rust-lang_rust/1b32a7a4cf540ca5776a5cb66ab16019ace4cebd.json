{"sha": "1b32a7a4cf540ca5776a5cb66ab16019ace4cebd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiMzJhN2E0Y2Y1NDBjYTU3NzZhNWNiNjZhYjE2MDE5YWNlNGNlYmQ=", "commit": {"author": {"name": "Jacob Pratt", "email": "jacob@jhpratt.dev", "date": "2021-02-09T00:22:08Z"}, "committer": {"name": "Jacob Pratt", "email": "jacob@jhpratt.dev", "date": "2021-02-09T00:26:01Z"}, "message": "Bump stabilization version for const int methods\n\nThese methods missed the beta cutoff", "tree": {"sha": "a88478abc2e70b22ddafb124310b3ff2d932c9c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a88478abc2e70b22ddafb124310b3ff2d932c9c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b32a7a4cf540ca5776a5cb66ab16019ace4cebd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYIAB0WIQTgxeqBxcDGar1sVhy4DhnkZitapAUCYCHWmQAKCRC4DhnkZita\npLwvAQCOnTBk7WFYnT8PD8tbumU40qkbR/5VdTXNzD/PSn47wwD/TIQLDcPJAeVJ\naZAX5M5kz8tg0ZEsBqM+Kd527ku5Vw4=\n=uLns\n-----END PGP SIGNATURE-----", "payload": "tree a88478abc2e70b22ddafb124310b3ff2d932c9c0\nparent f55029ab04e0d416db24af9b537be26e808f6f59\nauthor Jacob Pratt <jacob@jhpratt.dev> 1612830128 -0500\ncommitter Jacob Pratt <jacob@jhpratt.dev> 1612830361 -0500\n\nBump stabilization version for const int methods\n\nThese methods missed the beta cutoff\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b32a7a4cf540ca5776a5cb66ab16019ace4cebd", "html_url": "https://github.com/rust-lang/rust/commit/1b32a7a4cf540ca5776a5cb66ab16019ace4cebd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b32a7a4cf540ca5776a5cb66ab16019ace4cebd/comments", "author": {"login": "jhpratt", "id": 3161395, "node_id": "MDQ6VXNlcjMxNjEzOTU=", "avatar_url": "https://avatars.githubusercontent.com/u/3161395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhpratt", "html_url": "https://github.com/jhpratt", "followers_url": "https://api.github.com/users/jhpratt/followers", "following_url": "https://api.github.com/users/jhpratt/following{/other_user}", "gists_url": "https://api.github.com/users/jhpratt/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhpratt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhpratt/subscriptions", "organizations_url": "https://api.github.com/users/jhpratt/orgs", "repos_url": "https://api.github.com/users/jhpratt/repos", "events_url": "https://api.github.com/users/jhpratt/events{/privacy}", "received_events_url": "https://api.github.com/users/jhpratt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jhpratt", "id": 3161395, "node_id": "MDQ6VXNlcjMxNjEzOTU=", "avatar_url": "https://avatars.githubusercontent.com/u/3161395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhpratt", "html_url": "https://github.com/jhpratt", "followers_url": "https://api.github.com/users/jhpratt/followers", "following_url": "https://api.github.com/users/jhpratt/following{/other_user}", "gists_url": "https://api.github.com/users/jhpratt/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhpratt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhpratt/subscriptions", "organizations_url": "https://api.github.com/users/jhpratt/orgs", "repos_url": "https://api.github.com/users/jhpratt/repos", "events_url": "https://api.github.com/users/jhpratt/events{/privacy}", "received_events_url": "https://api.github.com/users/jhpratt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f55029ab04e0d416db24af9b537be26e808f6f59", "url": "https://api.github.com/repos/rust-lang/rust/commits/f55029ab04e0d416db24af9b537be26e808f6f59", "html_url": "https://github.com/rust-lang/rust/commit/f55029ab04e0d416db24af9b537be26e808f6f59"}], "stats": {"total": 60, "additions": 30, "deletions": 30}, "files": [{"sha": "cced686494bdd502112772f80fb4f7979e2cb905", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b32a7a4cf540ca5776a5cb66ab16019ace4cebd/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b32a7a4cf540ca5776a5cb66ab16019ace4cebd/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=1b32a7a4cf540ca5776a5cb66ab16019ace4cebd", "patch": "@@ -1593,15 +1593,15 @@ extern \"rust-intrinsic\" {\n     /// Safe wrappers for this intrinsic are available on the integer\n     /// primitives via the `checked_div` method. For example,\n     /// [`u32::checked_div`]\n-    #[rustc_const_stable(feature = \"const_int_unchecked_arith\", since = \"1.51.0\")]\n+    #[rustc_const_stable(feature = \"const_int_unchecked_arith\", since = \"1.52.0\")]\n     pub fn unchecked_div<T: Copy>(x: T, y: T) -> T;\n     /// Returns the remainder of an unchecked division, resulting in\n     /// undefined behavior when `y == 0` or `x == T::MIN && y == -1`\n     ///\n     /// Safe wrappers for this intrinsic are available on the integer\n     /// primitives via the `checked_rem` method. For example,\n     /// [`u32::checked_rem`]\n-    #[rustc_const_stable(feature = \"const_int_unchecked_arith\", since = \"1.51.0\")]\n+    #[rustc_const_stable(feature = \"const_int_unchecked_arith\", since = \"1.52.0\")]\n     pub fn unchecked_rem<T: Copy>(x: T, y: T) -> T;\n \n     /// Performs an unchecked left shift, resulting in undefined behavior when"}, {"sha": "c449e50f8296cd0f19943243fdea0178459c6cd6", "filename": "library/core/src/num/int_macros.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/1b32a7a4cf540ca5776a5cb66ab16019ace4cebd/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b32a7a4cf540ca5776a5cb66ab16019ace4cebd/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs?ref=1b32a7a4cf540ca5776a5cb66ab16019ace4cebd", "patch": "@@ -513,7 +513,7 @@ macro_rules! int_impl {\n         #[doc = concat!(\"assert_eq!((1\", stringify!($SelfT), \").checked_div(0), None);\")]\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        #[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.51.0\")]\n+        #[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.52.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n@@ -539,7 +539,7 @@ macro_rules! int_impl {\n         #[doc = concat!(\"assert_eq!((1\", stringify!($SelfT), \").checked_div_euclid(0), None);\")]\n         /// ```\n         #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n-        #[rustc_const_stable(feature = \"const_euclidean_int_methods\", since = \"1.51.0\")]\n+        #[rustc_const_stable(feature = \"const_euclidean_int_methods\", since = \"1.52.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n@@ -565,7 +565,7 @@ macro_rules! int_impl {\n         #[doc = concat!(\"assert_eq!(\", stringify!($SelfT), \"::MIN.checked_rem(-1), None);\")]\n         /// ```\n         #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-        #[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.51.0\")]\n+        #[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.52.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n@@ -591,7 +591,7 @@ macro_rules! int_impl {\n         #[doc = concat!(\"assert_eq!(\", stringify!($SelfT), \"::MIN.checked_rem_euclid(-1), None);\")]\n         /// ```\n         #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n-        #[rustc_const_stable(feature = \"const_euclidean_int_methods\", since = \"1.51.0\")]\n+        #[rustc_const_stable(feature = \"const_euclidean_int_methods\", since = \"1.52.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n@@ -949,7 +949,7 @@ macro_rules! int_impl {\n         /// assert_eq!((-128i8).wrapping_div(-1), -128);\n         /// ```\n         #[stable(feature = \"num_wrapping\", since = \"1.2.0\")]\n-        #[rustc_const_stable(feature = \"const_wrapping_int_methods\", since = \"1.51.0\")]\n+        #[rustc_const_stable(feature = \"const_wrapping_int_methods\", since = \"1.52.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n@@ -977,7 +977,7 @@ macro_rules! int_impl {\n         /// assert_eq!((-128i8).wrapping_div_euclid(-1), -128);\n         /// ```\n         #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n-        #[rustc_const_stable(feature = \"const_euclidean_int_methods\", since = \"1.51.0\")]\n+        #[rustc_const_stable(feature = \"const_euclidean_int_methods\", since = \"1.52.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n@@ -1005,7 +1005,7 @@ macro_rules! int_impl {\n         /// assert_eq!((-128i8).wrapping_rem(-1), 0);\n         /// ```\n         #[stable(feature = \"num_wrapping\", since = \"1.2.0\")]\n-        #[rustc_const_stable(feature = \"const_wrapping_int_methods\", since = \"1.51.0\")]\n+        #[rustc_const_stable(feature = \"const_wrapping_int_methods\", since = \"1.52.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n@@ -1032,7 +1032,7 @@ macro_rules! int_impl {\n         /// assert_eq!((-128i8).wrapping_rem_euclid(-1), 0);\n         /// ```\n         #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n-        #[rustc_const_stable(feature = \"const_euclidean_int_methods\", since = \"1.51.0\")]\n+        #[rustc_const_stable(feature = \"const_euclidean_int_methods\", since = \"1.52.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n@@ -1299,7 +1299,7 @@ macro_rules! int_impl {\n         /// ```\n         #[inline]\n         #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-        #[rustc_const_stable(feature = \"const_overflowing_int_methods\", since = \"1.51.0\")]\n+        #[rustc_const_stable(feature = \"const_overflowing_int_methods\", since = \"1.52.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         pub const fn overflowing_div(self, rhs: Self) -> (Self, bool) {\n@@ -1329,7 +1329,7 @@ macro_rules! int_impl {\n         /// ```\n         #[inline]\n         #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n-        #[rustc_const_stable(feature = \"const_euclidean_int_methods\", since = \"1.51.0\")]\n+        #[rustc_const_stable(feature = \"const_euclidean_int_methods\", since = \"1.52.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         pub const fn overflowing_div_euclid(self, rhs: Self) -> (Self, bool) {\n@@ -1360,7 +1360,7 @@ macro_rules! int_impl {\n         /// ```\n         #[inline]\n         #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-        #[rustc_const_stable(feature = \"const_overflowing_int_methods\", since = \"1.51.0\")]\n+        #[rustc_const_stable(feature = \"const_overflowing_int_methods\", since = \"1.52.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         pub const fn overflowing_rem(self, rhs: Self) -> (Self, bool) {\n@@ -1390,7 +1390,7 @@ macro_rules! int_impl {\n         #[doc = concat!(\"assert_eq!(\", stringify!($SelfT), \"::MIN.overflowing_rem_euclid(-1), (0, true));\")]\n         /// ```\n         #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n-        #[rustc_const_stable(feature = \"const_euclidean_int_methods\", since = \"1.51.0\")]\n+        #[rustc_const_stable(feature = \"const_euclidean_int_methods\", since = \"1.52.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n@@ -1615,7 +1615,7 @@ macro_rules! int_impl {\n         /// assert_eq!((-a).div_euclid(-b), 2); // -7 >= -4 * 2\n         /// ```\n         #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n-        #[rustc_const_stable(feature = \"const_euclidean_int_methods\", since = \"1.51.0\")]\n+        #[rustc_const_stable(feature = \"const_euclidean_int_methods\", since = \"1.52.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n@@ -1653,7 +1653,7 @@ macro_rules! int_impl {\n         /// assert_eq!((-a).rem_euclid(-b), 1);\n         /// ```\n         #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n-        #[rustc_const_stable(feature = \"const_euclidean_int_methods\", since = \"1.51.0\")]\n+        #[rustc_const_stable(feature = \"const_euclidean_int_methods\", since = \"1.52.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]"}, {"sha": "6b61e4bffe736e47203793f8d7731ed079c1b009", "filename": "library/core/src/num/uint_macros.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/1b32a7a4cf540ca5776a5cb66ab16019ace4cebd/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b32a7a4cf540ca5776a5cb66ab16019ace4cebd/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs?ref=1b32a7a4cf540ca5776a5cb66ab16019ace4cebd", "patch": "@@ -522,7 +522,7 @@ macro_rules! uint_impl {\n         #[doc = concat!(\"assert_eq!(1\", stringify!($SelfT), \".checked_div(0), None);\")]\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        #[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.51.0\")]\n+        #[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.52.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n@@ -548,7 +548,7 @@ macro_rules! uint_impl {\n         #[doc = concat!(\"assert_eq!(1\", stringify!($SelfT), \".checked_div_euclid(0), None);\")]\n         /// ```\n         #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n-        #[rustc_const_stable(feature = \"const_euclidean_int_methods\", since = \"1.51.0\")]\n+        #[rustc_const_stable(feature = \"const_euclidean_int_methods\", since = \"1.52.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n@@ -573,7 +573,7 @@ macro_rules! uint_impl {\n         #[doc = concat!(\"assert_eq!(5\", stringify!($SelfT), \".checked_rem(0), None);\")]\n         /// ```\n         #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-        #[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.51.0\")]\n+        #[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.52.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n@@ -599,7 +599,7 @@ macro_rules! uint_impl {\n         #[doc = concat!(\"assert_eq!(5\", stringify!($SelfT), \".checked_rem_euclid(0), None);\")]\n         /// ```\n         #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n-        #[rustc_const_stable(feature = \"const_euclidean_int_methods\", since = \"1.51.0\")]\n+        #[rustc_const_stable(feature = \"const_euclidean_int_methods\", since = \"1.52.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n@@ -876,7 +876,7 @@ macro_rules! uint_impl {\n         #[doc = concat!(\"assert_eq!(100\", stringify!($SelfT), \".wrapping_div(10), 10);\")]\n         /// ```\n         #[stable(feature = \"num_wrapping\", since = \"1.2.0\")]\n-        #[rustc_const_stable(feature = \"const_wrapping_int_methods\", since = \"1.51.0\")]\n+        #[rustc_const_stable(feature = \"const_wrapping_int_methods\", since = \"1.52.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n@@ -901,7 +901,7 @@ macro_rules! uint_impl {\n         #[doc = concat!(\"assert_eq!(100\", stringify!($SelfT), \".wrapping_div_euclid(10), 10);\")]\n         /// ```\n         #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n-        #[rustc_const_stable(feature = \"const_euclidean_int_methods\", since = \"1.51.0\")]\n+        #[rustc_const_stable(feature = \"const_euclidean_int_methods\", since = \"1.52.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n@@ -924,7 +924,7 @@ macro_rules! uint_impl {\n         #[doc = concat!(\"assert_eq!(100\", stringify!($SelfT), \".wrapping_rem(10), 0);\")]\n         /// ```\n         #[stable(feature = \"num_wrapping\", since = \"1.2.0\")]\n-        #[rustc_const_stable(feature = \"const_wrapping_int_methods\", since = \"1.51.0\")]\n+        #[rustc_const_stable(feature = \"const_wrapping_int_methods\", since = \"1.52.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n@@ -950,7 +950,7 @@ macro_rules! uint_impl {\n         #[doc = concat!(\"assert_eq!(100\", stringify!($SelfT), \".wrapping_rem_euclid(10), 0);\")]\n         /// ```\n         #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n-        #[rustc_const_stable(feature = \"const_euclidean_int_methods\", since = \"1.51.0\")]\n+        #[rustc_const_stable(feature = \"const_euclidean_int_methods\", since = \"1.52.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n@@ -1185,7 +1185,7 @@ macro_rules! uint_impl {\n         /// ```\n         #[inline]\n         #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-        #[rustc_const_stable(feature = \"const_overflowing_int_methods\", since = \"1.51.0\")]\n+        #[rustc_const_stable(feature = \"const_overflowing_int_methods\", since = \"1.52.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         pub const fn overflowing_div(self, rhs: Self) -> (Self, bool) {\n@@ -1215,7 +1215,7 @@ macro_rules! uint_impl {\n         /// ```\n         #[inline]\n         #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n-        #[rustc_const_stable(feature = \"const_euclidean_int_methods\", since = \"1.51.0\")]\n+        #[rustc_const_stable(feature = \"const_euclidean_int_methods\", since = \"1.52.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         pub const fn overflowing_div_euclid(self, rhs: Self) -> (Self, bool) {\n@@ -1242,7 +1242,7 @@ macro_rules! uint_impl {\n         /// ```\n         #[inline]\n         #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-        #[rustc_const_stable(feature = \"const_overflowing_int_methods\", since = \"1.51.0\")]\n+        #[rustc_const_stable(feature = \"const_overflowing_int_methods\", since = \"1.52.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         pub const fn overflowing_rem(self, rhs: Self) -> (Self, bool) {\n@@ -1272,7 +1272,7 @@ macro_rules! uint_impl {\n         /// ```\n         #[inline]\n         #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n-        #[rustc_const_stable(feature = \"const_euclidean_int_methods\", since = \"1.51.0\")]\n+        #[rustc_const_stable(feature = \"const_euclidean_int_methods\", since = \"1.52.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         pub const fn overflowing_rem_euclid(self, rhs: Self) -> (Self, bool) {\n@@ -1456,7 +1456,7 @@ macro_rules! uint_impl {\n         #[doc = concat!(\"assert_eq!(7\", stringify!($SelfT), \".div_euclid(4), 1); // or any other integer type\")]\n         /// ```\n         #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n-        #[rustc_const_stable(feature = \"const_euclidean_int_methods\", since = \"1.51.0\")]\n+        #[rustc_const_stable(feature = \"const_euclidean_int_methods\", since = \"1.52.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n@@ -1484,7 +1484,7 @@ macro_rules! uint_impl {\n         #[doc = concat!(\"assert_eq!(7\", stringify!($SelfT), \".rem_euclid(4), 3); // or any other integer type\")]\n         /// ```\n         #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n-        #[rustc_const_stable(feature = \"const_euclidean_int_methods\", since = \"1.51.0\")]\n+        #[rustc_const_stable(feature = \"const_euclidean_int_methods\", since = \"1.52.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]"}]}