{"sha": "3f9e7fc0497a08983078cbe987af79f131da6419", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmOWU3ZmMwNDk3YTA4OTgzMDc4Y2JlOTg3YWY3OWYxMzFkYTY0MTk=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-09-16T10:34:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-16T10:34:21Z"}, "message": "Rollup merge of #76699 - lcnr:const-infer-err, r=varkor\n\nimprove const infer error\n\ncc #72328\n\nreduces it from\n```\nerror[E0282]: type annotations needed\n  --> src/main.rs:17:5\n   |\n17 |     Foo.bar().bar().bar().bar().baz();\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: unable to infer the value of a const parameter\n```\nto\n```\nerror[E0282]: type annotations needed\n  --> $DIR/method-chain.rs:21:33\n   |\nLL |     Foo.bar().bar().bar().bar().baz();\n   |                                 ^^^\n   |\n   = note: cannot infer the value of the const parameter `N`\n```\n\nr? @varkor", "tree": {"sha": "d8a81a3a6ed44da399a38d35af845c53bebd6290", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d8a81a3a6ed44da399a38d35af845c53bebd6290"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f9e7fc0497a08983078cbe987af79f131da6419", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfYeouCRBK7hj4Ov3rIwAAdHIIAHPKkYGZZZn3ib6JvgFxEctL\n8tJkurSRpVU4rRqywCVSmOPqLR2BYxQhdsaxlKB0xJxTaqrKAW6d/0Be7kcoU+tH\n2A4W4165CH+K7OmEzExRHkhc1SRUYhMw8d+UsoDeMhoXFTFPEIcMoqQTDrk+tu+n\nQMBu9D8fSONOrNTJ7LhZnon2fWuMAposhsjig2mcs0bjWErj1pVvJJIBQeewsYfP\ng/OxTiw6FCLujhzJq4kq1ly3wGXNetPuEkwUps+Dz9cSeXBjhbU3P+hvcc9NVCjw\njk29cT+vD5HFNVaGzLSVuWhyUIefN48CeYEtTRIn/F8kpKYtZ+SUiHesIz2Dp18=\n=s96r\n-----END PGP SIGNATURE-----\n", "payload": "tree d8a81a3a6ed44da399a38d35af845c53bebd6290\nparent 54d77285fcba0ab3d9d5ad8ff8a02bd6187bcf58\nparent 035f8791668406bc49fc315253835cbdec247549\nauthor Dylan DPC <dylan.dpc@gmail.com> 1600252461 +0200\ncommitter GitHub <noreply@github.com> 1600252461 +0200\n\nRollup merge of #76699 - lcnr:const-infer-err, r=varkor\n\nimprove const infer error\n\ncc #72328\n\nreduces it from\n```\nerror[E0282]: type annotations needed\n  --> src/main.rs:17:5\n   |\n17 |     Foo.bar().bar().bar().bar().baz();\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: unable to infer the value of a const parameter\n```\nto\n```\nerror[E0282]: type annotations needed\n  --> $DIR/method-chain.rs:21:33\n   |\nLL |     Foo.bar().bar().bar().bar().baz();\n   |                                 ^^^\n   |\n   = note: cannot infer the value of the const parameter `N`\n```\n\nr? @varkor\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f9e7fc0497a08983078cbe987af79f131da6419", "html_url": "https://github.com/rust-lang/rust/commit/3f9e7fc0497a08983078cbe987af79f131da6419", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f9e7fc0497a08983078cbe987af79f131da6419/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54d77285fcba0ab3d9d5ad8ff8a02bd6187bcf58", "url": "https://api.github.com/repos/rust-lang/rust/commits/54d77285fcba0ab3d9d5ad8ff8a02bd6187bcf58", "html_url": "https://github.com/rust-lang/rust/commit/54d77285fcba0ab3d9d5ad8ff8a02bd6187bcf58"}, {"sha": "035f8791668406bc49fc315253835cbdec247549", "url": "https://api.github.com/repos/rust-lang/rust/commits/035f8791668406bc49fc315253835cbdec247549", "html_url": "https://github.com/rust-lang/rust/commit/035f8791668406bc49fc315253835cbdec247549"}], "stats": {"total": 88, "additions": 73, "deletions": 15}, "files": [{"sha": "f87406c2ce469c97f15da28c3d9950abb90942d6", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/3f9e7fc0497a08983078cbe987af79f131da6419/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f9e7fc0497a08983078cbe987af79f131da6419/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=3f9e7fc0497a08983078cbe987af79f131da6419", "patch": "@@ -6,9 +6,10 @@ use rustc_hir::def::{DefKind, Namespace};\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::{Body, Expr, ExprKind, FnRetTy, HirId, Local, Pat};\n use rustc_middle::hir::map::Map;\n+use rustc_middle::infer::unify_key::ConstVariableOriginKind;\n use rustc_middle::ty::print::Print;\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind};\n-use rustc_middle::ty::{self, DefIdTree, Ty};\n+use rustc_middle::ty::{self, DefIdTree, InferConst, Ty};\n use rustc_span::source_map::DesugaringKind;\n use rustc_span::symbol::kw;\n use rustc_span::Span;\n@@ -569,14 +570,26 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             local_visitor.visit_expr(expr);\n         }\n \n+        let mut param_name = None;\n+        let span = if let ty::ConstKind::Infer(InferConst::Var(vid)) = ct.val {\n+            let origin = self.inner.borrow_mut().const_unification_table().probe_value(vid).origin;\n+            if let ConstVariableOriginKind::ConstParameterDefinition(param) = origin.kind {\n+                param_name = Some(param);\n+            }\n+            origin.span\n+        } else {\n+            local_visitor.target_span\n+        };\n+\n         let error_code = error_code.into();\n-        let mut err = self.tcx.sess.struct_span_err_with_code(\n-            local_visitor.target_span,\n-            \"type annotations needed\",\n-            error_code,\n-        );\n+        let mut err =\n+            self.tcx.sess.struct_span_err_with_code(span, \"type annotations needed\", error_code);\n \n-        err.note(\"unable to infer the value of a const parameter\");\n+        if let Some(param_name) = param_name {\n+            err.note(&format!(\"cannot infer the value of the const parameter `{}`\", param_name));\n+        } else {\n+            err.note(\"unable to infer the value of a const parameter\");\n+        }\n \n         err\n     }"}, {"sha": "a60a17befeffdce2b344112e4508b5910445d03e", "filename": "compiler/rustc_middle/src/infer/unify_key.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3f9e7fc0497a08983078cbe987af79f131da6419/compiler%2Frustc_middle%2Fsrc%2Finfer%2Funify_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f9e7fc0497a08983078cbe987af79f131da6419/compiler%2Frustc_middle%2Fsrc%2Finfer%2Funify_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Finfer%2Funify_key.rs?ref=3f9e7fc0497a08983078cbe987af79f131da6419", "patch": "@@ -124,6 +124,7 @@ pub struct ConstVariableOrigin {\n pub enum ConstVariableOriginKind {\n     MiscVariable,\n     ConstInference,\n+    // FIXME(const_generics): Consider storing the `DefId` of the param here.\n     ConstParameterDefinition(Symbol),\n     SubstitutionPlaceholder,\n }"}, {"sha": "84e75cc3764167ca8b3975039a06967e72beb156", "filename": "src/test/ui/const-generics/infer/cannot-infer-const-args.full.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f9e7fc0497a08983078cbe987af79f131da6419/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fcannot-infer-const-args.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f9e7fc0497a08983078cbe987af79f131da6419/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fcannot-infer-const-args.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fcannot-infer-const-args.full.stderr?ref=3f9e7fc0497a08983078cbe987af79f131da6419", "patch": "@@ -4,7 +4,7 @@ error[E0282]: type annotations needed\n LL |     foo();\n    |     ^^^\n    |\n-   = note: unable to infer the value of a const parameter\n+   = note: cannot infer the value of the const parameter `X`\n \n error: aborting due to previous error\n ", "previous_filename": "src/test/ui/const-generics/cannot-infer-const-args.full.stderr"}, {"sha": "84e75cc3764167ca8b3975039a06967e72beb156", "filename": "src/test/ui/const-generics/infer/cannot-infer-const-args.min.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f9e7fc0497a08983078cbe987af79f131da6419/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fcannot-infer-const-args.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f9e7fc0497a08983078cbe987af79f131da6419/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fcannot-infer-const-args.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fcannot-infer-const-args.min.stderr?ref=3f9e7fc0497a08983078cbe987af79f131da6419", "patch": "@@ -4,7 +4,7 @@ error[E0282]: type annotations needed\n LL |     foo();\n    |     ^^^\n    |\n-   = note: unable to infer the value of a const parameter\n+   = note: cannot infer the value of the const parameter `X`\n \n error: aborting due to previous error\n ", "previous_filename": "src/test/ui/const-generics/cannot-infer-const-args.min.stderr"}, {"sha": "2d74b4788bf4b61c4eab058198a1f4930bfcc891", "filename": "src/test/ui/const-generics/infer/cannot-infer-const-args.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3f9e7fc0497a08983078cbe987af79f131da6419/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fcannot-infer-const-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f9e7fc0497a08983078cbe987af79f131da6419/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fcannot-infer-const-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fcannot-infer-const-args.rs?ref=3f9e7fc0497a08983078cbe987af79f131da6419", "previous_filename": "src/test/ui/const-generics/cannot-infer-const-args.rs"}, {"sha": "e65bc3f109681227c401e5010a61956cfcfbb29f", "filename": "src/test/ui/const-generics/infer/method-chain.full.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3f9e7fc0497a08983078cbe987af79f131da6419/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fmethod-chain.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f9e7fc0497a08983078cbe987af79f131da6419/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fmethod-chain.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fmethod-chain.full.stderr?ref=3f9e7fc0497a08983078cbe987af79f131da6419", "patch": "@@ -0,0 +1,11 @@\n+error[E0282]: type annotations needed\n+  --> $DIR/method-chain.rs:21:33\n+   |\n+LL |     Foo.bar().bar().bar().bar().baz();\n+   |                                 ^^^\n+   |\n+   = note: cannot infer the value of the const parameter `N`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0282`."}, {"sha": "e65bc3f109681227c401e5010a61956cfcfbb29f", "filename": "src/test/ui/const-generics/infer/method-chain.min.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3f9e7fc0497a08983078cbe987af79f131da6419/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fmethod-chain.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f9e7fc0497a08983078cbe987af79f131da6419/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fmethod-chain.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fmethod-chain.min.stderr?ref=3f9e7fc0497a08983078cbe987af79f131da6419", "patch": "@@ -0,0 +1,11 @@\n+error[E0282]: type annotations needed\n+  --> $DIR/method-chain.rs:21:33\n+   |\n+LL |     Foo.bar().bar().bar().bar().baz();\n+   |                                 ^^^\n+   |\n+   = note: cannot infer the value of the const parameter `N`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0282`."}, {"sha": "9389ca20d106fd7d54e3c7dc1dc2cfb6bf3bad9b", "filename": "src/test/ui/const-generics/infer/method-chain.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3f9e7fc0497a08983078cbe987af79f131da6419/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fmethod-chain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f9e7fc0497a08983078cbe987af79f131da6419/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fmethod-chain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fmethod-chain.rs?ref=3f9e7fc0497a08983078cbe987af79f131da6419", "patch": "@@ -0,0 +1,22 @@\n+// revisions: full min\n+\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n+\n+struct Foo;\n+\n+impl Foo {\n+    fn bar(self) -> Foo {\n+        Foo\n+    }\n+\n+    fn baz<const N: usize>(self) -> Foo {\n+        println!(\"baz: {}\", N);\n+        Foo\n+    }\n+}\n+\n+fn main() {\n+    Foo.bar().bar().bar().bar().baz(); //~ ERROR type annotations needed\n+}"}, {"sha": "e47b6bd5dc691f49dc65c0a5cdd6db608ed97f35", "filename": "src/test/ui/const-generics/infer/uninferred-consts.full.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3f9e7fc0497a08983078cbe987af79f131da6419/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Funinferred-consts.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f9e7fc0497a08983078cbe987af79f131da6419/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Funinferred-consts.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Funinferred-consts.full.stderr?ref=3f9e7fc0497a08983078cbe987af79f131da6419", "patch": "@@ -1,10 +1,10 @@\n error[E0282]: type annotations needed\n-  --> $DIR/uninferred-consts.rs:14:5\n+  --> $DIR/uninferred-consts.rs:14:9\n    |\n LL |     Foo.foo();\n-   |     ^^^^^^^^^\n+   |         ^^^\n    |\n-   = note: unable to infer the value of a const parameter\n+   = note: cannot infer the value of the const parameter `N`\n \n error: aborting due to previous error\n ", "previous_filename": "src/test/ui/const-generics/uninferred-consts.full.stderr"}, {"sha": "e47b6bd5dc691f49dc65c0a5cdd6db608ed97f35", "filename": "src/test/ui/const-generics/infer/uninferred-consts.min.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3f9e7fc0497a08983078cbe987af79f131da6419/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Funinferred-consts.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f9e7fc0497a08983078cbe987af79f131da6419/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Funinferred-consts.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Funinferred-consts.min.stderr?ref=3f9e7fc0497a08983078cbe987af79f131da6419", "patch": "@@ -1,10 +1,10 @@\n error[E0282]: type annotations needed\n-  --> $DIR/uninferred-consts.rs:14:5\n+  --> $DIR/uninferred-consts.rs:14:9\n    |\n LL |     Foo.foo();\n-   |     ^^^^^^^^^\n+   |         ^^^\n    |\n-   = note: unable to infer the value of a const parameter\n+   = note: cannot infer the value of the const parameter `N`\n \n error: aborting due to previous error\n ", "previous_filename": "src/test/ui/const-generics/uninferred-consts.min.stderr"}, {"sha": "ec5b3ffe5440bca973d7657e38d86ceed9562c71", "filename": "src/test/ui/const-generics/infer/uninferred-consts.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3f9e7fc0497a08983078cbe987af79f131da6419/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Funinferred-consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f9e7fc0497a08983078cbe987af79f131da6419/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Funinferred-consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Funinferred-consts.rs?ref=3f9e7fc0497a08983078cbe987af79f131da6419", "previous_filename": "src/test/ui/const-generics/uninferred-consts.rs"}]}