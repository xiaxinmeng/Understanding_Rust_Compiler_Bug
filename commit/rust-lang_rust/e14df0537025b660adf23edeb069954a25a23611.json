{"sha": "e14df0537025b660adf23edeb069954a25a23611", "node_id": "C_kwDOAAsO6NoAKGUxNGRmMDUzNzAyNWI2NjBhZGYyM2VkZWIwNjk5NTRhMjVhMjM2MTE", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-23T21:46:02Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-23T21:46:02Z"}, "message": "set runner for all targets via 'all()'", "tree": {"sha": "2e2fa40959fe548847cfce6b2d906abe4ee8098b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e2fa40959fe548847cfce6b2d906abe4ee8098b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e14df0537025b660adf23edeb069954a25a23611", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e14df0537025b660adf23edeb069954a25a23611", "html_url": "https://github.com/rust-lang/rust/commit/e14df0537025b660adf23edeb069954a25a23611", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e14df0537025b660adf23edeb069954a25a23611/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd01870657fa415bb5f1fa1b66dc7d7b1aa3e08c", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd01870657fa415bb5f1fa1b66dc7d7b1aa3e08c", "html_url": "https://github.com/rust-lang/rust/commit/dd01870657fa415bb5f1fa1b66dc7d7b1aa3e08c"}], "stats": {"total": 25, "additions": 7, "deletions": 18}, "files": [{"sha": "ff3361899c4bf4cff5639b338be968722b35b4aa", "filename": "cargo-miri/bin.rs", "status": "modified", "additions": 7, "deletions": 18, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e14df0537025b660adf23edeb069954a25a23611/cargo-miri%2Fbin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e14df0537025b660adf23edeb069954a25a23611/cargo-miri%2Fbin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/cargo-miri%2Fbin.rs?ref=e14df0537025b660adf23edeb069954a25a23611", "patch": "@@ -715,28 +715,17 @@ fn phase_cargo_miri(mut args: impl Iterator<Item = String>) {\n     // This is needed to make the `target.runner` settings do something,\n     // and it later helps us detect which crates are proc-macro/build-script\n     // (host crates) and which crates are needed for the program itself.\n-    let host = version_info().host;\n-    let target = get_arg_flag_value(\"--target\");\n-    let target = if let Some(ref target) = target {\n-        target\n-    } else {\n-        // No target given. Pick default and tell cargo about it.\n+    if get_arg_flag_value(\"--target\").is_none() {\n+        // No target given. Explicitly pick the host.\n         cmd.arg(\"--target\");\n-        cmd.arg(&host);\n-        &host\n-    };\n+        cmd.arg(version_info().host);\n+    }\n \n+    // Set ourselves as runner for al binaries invoked by cargo.\n+    // We use `all()` since `true` is not a thing in cfg-lang, but the empty conjunction is. :)\n     let cargo_miri_path_for_toml = escape_for_toml(&cargo_miri_path);\n     cmd.arg(\"--config\")\n-        .arg(format!(\"target.{target}.runner=[{cargo_miri_path_for_toml}, 'runner']\",));\n-    if &host != target {\n-        // Set ourselves as runner for host and target. (Unit tests of `proc-macro` crates are run on\n-        // the host, so we set the host runner to us in order to skip them.)\n-        // But only do that if host and target are different; setting this command twice otherwise\n-        // makes cargo concatenate the two arrays.\n-        cmd.arg(\"--config\")\n-            .arg(format!(\"target.{host}.runner=[{cargo_miri_path_for_toml}, 'runner']\",));\n-    }\n+        .arg(format!(\"target.'cfg(all())'.runner=[{cargo_miri_path_for_toml}, 'runner']\"));\n \n     // Forward all further arguments after `--` to cargo.\n     cmd.arg(\"--\").args(args);"}]}