{"sha": "e4fedf4be4c0cf735787bc81ff5ea0d7086fe6cd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0ZmVkZjRiZTRjMGNmNzM1Nzg3YmM4MWZmNWVhMGQ3MDg2ZmU2Y2Q=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2019-01-23T00:54:30Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2019-01-23T00:58:37Z"}, "message": "Don't try to clean predicates involving ReErased\n\nThere's nothing to render when we have a bound involving ReErased (either\na type or region outliving it), so we don't attempt to generate a clean\nWherePredicate\n\nFixes #57806", "tree": {"sha": "65bcb74be4420a6e6eca1fba1a423af805027a2a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/65bcb74be4420a6e6eca1fba1a423af805027a2a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e4fedf4be4c0cf735787bc81ff5ea0d7086fe6cd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAlxHvEIACgkQtAh+UQ6Y\nsWTl9A/8CneJOrJpyU8755IIiNJi4gacDgFgnkvRJ43K5YMxUotUCE8i/3c71CXi\n3bp+T5zRrG93NKcciV97frqnKo0ytRmAqahv16yKq7kmkfd1wiM7CpQNTtjZNmRh\n0qyJw0qYwkUcNuRKdmshMDQsvMCsB19mNNHEzRvs1DnSlzbmRRWYDIdOyk8Nayi7\nFuQUzt8GLWwzKe+pGsKDJs7eJXFUpuKHq8aRIZnTJP5DMUn+K1oDkoeRzD/qLhfN\nsjQ/6ArSZZXK8+yZmM8SRUG6VRjJX9+BVtu9LbHMuKTo4e7y41IEPRHwnlQZuxoA\niV53a3ZkPlPVaLOphKnfcEvR9zR5rJekIjCjs7bqKgiP9Vokf7+4Tkn6xg5BN5Qu\n/iKWOc8SdODWMKCJxJwUqkDm342MvOPxCYVwnhxmGJIYMWsKoh4aHcYMsQqeI5VF\nOhhIAULnxl82kqce+Ya9tVp6Jr3FsDD/UkNmheaoR1iiab12h4KdGddQDg32TyMX\nFiix/OqwgMLxTzrhkGpqgDMoVp80b53ZBcheTYc9OQWsU7JN9k74L0JJD2CzEDS3\nCjh4D5HZvHqyX5gDKIUIvUcKhf1jeB6CaMKhnDmhZWWnqFgeuC+Pc56Nvo6Z22rQ\nVF+DYgA6sCDnWSLcSKQVZjXKWHqZYeeeYbk9cvp1aoI7qiPxQ9g=\n=VUnJ\n-----END PGP SIGNATURE-----", "payload": "tree 65bcb74be4420a6e6eca1fba1a423af805027a2a\nparent 4c2be9c97fb60a01c545b8e8fa61e4247ae5c9b2\nauthor Aaron Hill <aa1ronham@gmail.com> 1548204870 -0500\ncommitter Aaron Hill <aa1ronham@gmail.com> 1548205117 -0500\n\nDon't try to clean predicates involving ReErased\n\nThere's nothing to render when we have a bound involving ReErased (either\na type or region outliving it), so we don't attempt to generate a clean\nWherePredicate\n\nFixes #57806\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e4fedf4be4c0cf735787bc81ff5ea0d7086fe6cd", "html_url": "https://github.com/rust-lang/rust/commit/e4fedf4be4c0cf735787bc81ff5ea0d7086fe6cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e4fedf4be4c0cf735787bc81ff5ea0d7086fe6cd/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c2be9c97fb60a01c545b8e8fa61e4247ae5c9b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c2be9c97fb60a01c545b8e8fa61e4247ae5c9b2", "html_url": "https://github.com/rust-lang/rust/commit/4c2be9c97fb60a01c545b8e8fa61e4247ae5c9b2"}], "stats": {"total": 52, "additions": 37, "deletions": 15}, "files": [{"sha": "b99181c0d4f9e0fafa5ec4dd5e8778c373ec141d", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4fedf4be4c0cf735787bc81ff5ea0d7086fe6cd/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4fedf4be4c0cf735787bc81ff5ea0d7086fe6cd/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=e4fedf4be4c0cf735787bc81ff5ea0d7086fe6cd", "patch": "@@ -574,6 +574,10 @@ impl<'a, 'tcx, 'rcx> AutoTraitFinder<'a, 'tcx, 'rcx> {\n         let mut ty_to_fn: FxHashMap<Type, (Option<PolyTrait>, Option<Type>)> = Default::default();\n \n         for (orig_p, p) in clean_where_predicates {\n+            if p.is_none() {\n+                continue;\n+            }\n+            let p = p.unwrap();\n             match p {\n                 WherePredicate::BoundPredicate { ty, mut bounds } => {\n                     // Writing a projection trait bound of the form"}, {"sha": "a7ce0520b6d3dadf0e2c8fe0699dfc180c025d80", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 33, "deletions": 15, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/e4fedf4be4c0cf735787bc81ff5ea0d7086fe6cd/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4fedf4be4c0cf735787bc81ff5ea0d7086fe6cd/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=e4fedf4be4c0cf735787bc81ff5ea0d7086fe6cd", "patch": "@@ -1271,7 +1271,10 @@ impl Clean<Option<Lifetime>> for ty::RegionKind {\n             ty::RePlaceholder(..) |\n             ty::ReEmpty |\n             ty::ReClosureBound(_) |\n-            ty::ReErased => None\n+            ty::ReErased => {\n+                debug!(\"Cannot clean region {:?}\", self);\n+                None\n+            }\n         }\n     }\n }\n@@ -1310,16 +1313,16 @@ impl Clean<WherePredicate> for hir::WherePredicate {\n     }\n }\n \n-impl<'a> Clean<WherePredicate> for ty::Predicate<'a> {\n-    fn clean(&self, cx: &DocContext) -> WherePredicate {\n+impl<'a> Clean<Option<WherePredicate>> for ty::Predicate<'a> {\n+    fn clean(&self, cx: &DocContext) -> Option<WherePredicate> {\n         use rustc::ty::Predicate;\n \n         match *self {\n-            Predicate::Trait(ref pred) => pred.clean(cx),\n-            Predicate::Subtype(ref pred) => pred.clean(cx),\n+            Predicate::Trait(ref pred) => Some(pred.clean(cx)),\n+            Predicate::Subtype(ref pred) => Some(pred.clean(cx)),\n             Predicate::RegionOutlives(ref pred) => pred.clean(cx),\n             Predicate::TypeOutlives(ref pred) => pred.clean(cx),\n-            Predicate::Projection(ref pred) => pred.clean(cx),\n+            Predicate::Projection(ref pred) => Some(pred.clean(cx)),\n \n             Predicate::WellFormed(..) |\n             Predicate::ObjectSafe(..) |\n@@ -1345,24 +1348,39 @@ impl<'tcx> Clean<WherePredicate> for ty::SubtypePredicate<'tcx> {\n     }\n }\n \n-impl<'tcx> Clean<WherePredicate> for ty::OutlivesPredicate<ty::Region<'tcx>, ty::Region<'tcx>> {\n-    fn clean(&self, cx: &DocContext) -> WherePredicate {\n+impl<'tcx> Clean<Option<WherePredicate>> for\n+    ty::OutlivesPredicate<ty::Region<'tcx>,ty::Region<'tcx>> {\n+\n+    fn clean(&self, cx: &DocContext) -> Option<WherePredicate> {\n         let ty::OutlivesPredicate(ref a, ref b) = *self;\n-        WherePredicate::RegionPredicate {\n+\n+        match (a, b) {\n+            (ty::ReEmpty, ty::ReEmpty) => {\n+                return None;\n+            },\n+            _ => {}\n+        }\n+\n+        Some(WherePredicate::RegionPredicate {\n             lifetime: a.clean(cx).expect(\"failed to clean lifetime\"),\n             bounds: vec![GenericBound::Outlives(b.clean(cx).expect(\"failed to clean bounds\"))]\n-        }\n+        })\n     }\n }\n \n-impl<'tcx> Clean<WherePredicate> for ty::OutlivesPredicate<Ty<'tcx>, ty::Region<'tcx>> {\n-    fn clean(&self, cx: &DocContext) -> WherePredicate {\n+impl<'tcx> Clean<Option<WherePredicate>> for ty::OutlivesPredicate<Ty<'tcx>, ty::Region<'tcx>> {\n+    fn clean(&self, cx: &DocContext) -> Option<WherePredicate> {\n         let ty::OutlivesPredicate(ref ty, ref lt) = *self;\n \n-        WherePredicate::BoundPredicate {\n+        match lt {\n+            ty::ReEmpty => return None,\n+            _ => {}\n+        }\n+\n+        Some(WherePredicate::BoundPredicate {\n             ty: ty.clean(cx),\n             bounds: vec![GenericBound::Outlives(lt.clean(cx).expect(\"failed to clean lifetimes\"))]\n-        }\n+        })\n     }\n }\n \n@@ -1579,7 +1597,7 @@ impl<'a, 'tcx> Clean<Generics> for (&'a ty::Generics,\n         }).collect::<Vec<GenericParamDef>>();\n \n         let mut where_predicates = preds.predicates.iter()\n-            .map(|(p, _)| p.clean(cx))\n+            .flat_map(|(p, _)| p.clean(cx))\n             .collect::<Vec<_>>();\n \n         // Type parameters and have a Sized bound by default unless removed with"}]}