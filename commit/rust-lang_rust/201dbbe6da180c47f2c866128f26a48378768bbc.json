{"sha": "201dbbe6da180c47f2c866128f26a48378768bbc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwMWRiYmU2ZGExODBjNDdmMmM4NjYxMjhmMjZhNDgzNzg3NjhiYmM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-05-16T17:03:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-05-16T17:03:43Z"}, "message": "Merge #8854\n\n8854: internal: use mutable syntax trees when filling fields r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "6a8235bfb9867ed912236e7ebb67af118321061e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a8235bfb9867ed912236e7ebb67af118321061e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/201dbbe6da180c47f2c866128f26a48378768bbc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgoVBvCRBK7hj4Ov3rIwAAOOQIAFNLX30p6sb0TS2BEwcoJIV3\nFc8YUqZqWG4ZHUpVw6ZN92jOpegT9XGrUe+NdNrvjMpJeDSzz74khKsExbU8YZqN\nHvTtDbnVbg55ppv+OT2exzf4C6ZS0ItntIG+cNvUnGdD2Tyx/sf+CPbHwKAYVgJP\nsuyWlheb/JB1LyWic+6P98V6dfnW0j5asb5Sdw6XIJyiKfyrkcfKpBqz6T2FcQZT\nlwiiSjd3ji16fNKpiGkzfq244W6rMf4YcmA0pAvAcoh35OX5VXJb/KNcBQlZ/Iko\n3xzE+18iy+dJ6D0tc13t4Kwn0rCzgwPqTA48DRLtgqbdJkkIATxYbaCxWOv9mOA=\n=NVTK\n-----END PGP SIGNATURE-----\n", "payload": "tree 6a8235bfb9867ed912236e7ebb67af118321061e\nparent 9df0a2336829c54fbbc57ee8c8585aff345d9e47\nparent 1859df37fd6e308ea4304f69baae038ec09fe424\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1621184623 +0000\ncommitter GitHub <noreply@github.com> 1621184623 +0000\n\nMerge #8854\n\n8854: internal: use mutable syntax trees when filling fields r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/201dbbe6da180c47f2c866128f26a48378768bbc", "html_url": "https://github.com/rust-lang/rust/commit/201dbbe6da180c47f2c866128f26a48378768bbc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/201dbbe6da180c47f2c866128f26a48378768bbc/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9df0a2336829c54fbbc57ee8c8585aff345d9e47", "url": "https://api.github.com/repos/rust-lang/rust/commits/9df0a2336829c54fbbc57ee8c8585aff345d9e47", "html_url": "https://github.com/rust-lang/rust/commit/9df0a2336829c54fbbc57ee8c8585aff345d9e47"}, {"sha": "1859df37fd6e308ea4304f69baae038ec09fe424", "url": "https://api.github.com/repos/rust-lang/rust/commits/1859df37fd6e308ea4304f69baae038ec09fe424", "html_url": "https://github.com/rust-lang/rust/commit/1859df37fd6e308ea4304f69baae038ec09fe424"}], "stats": {"total": 153, "additions": 49, "deletions": 104}, "files": [{"sha": "d5fba6740fadc8d5166253fb0dbdf083d56643a9", "filename": "crates/ide/src/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/201dbbe6da180c47f2c866128f26a48378768bbc/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/201dbbe6da180c47f2c866128f26a48378768bbc/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics.rs?ref=201dbbe6da180c47f2c866128f26a48378768bbc", "patch": "@@ -579,7 +579,7 @@ fn test_fn() {\n struct TestStruct { one: i32, two: i64 }\n \n fn test_fn() {\n-    let s = TestStruct { one: (), two: ()};\n+    let s = TestStruct { one: (), two: () };\n }\n \"#,\n         );\n@@ -599,7 +599,7 @@ impl TestStruct {\n struct TestStruct { one: i32 }\n \n impl TestStruct {\n-    fn test_fn() { let s = Self { one: ()}; }\n+    fn test_fn() { let s = Self { one: () }; }\n }\n \"#,\n         );\n@@ -792,7 +792,7 @@ fn main() {\n pub struct Foo { pub a: i32, pub b: i32 }\n \"#,\n             r#\"\n-fn some(, b: ()) {}\n+fn some(, b: () ) {}\n fn items() {}\n fn here() {}\n "}, {"sha": "695b59e27e6c7dce4deaf6222e1576335017844b", "filename": "crates/ide/src/diagnostics/fixes.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/201dbbe6da180c47f2c866128f26a48378768bbc/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/201dbbe6da180c47f2c866128f26a48378768bbc/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes.rs?ref=201dbbe6da180c47f2c866128f26a48378768bbc", "patch": "@@ -100,11 +100,12 @@ impl DiagnosticWithFix for MissingFields {\n         let root = sema.db.parse_or_expand(self.file)?;\n         let field_list_parent = self.field_list_parent.to_node(&root);\n         let old_field_list = field_list_parent.record_expr_field_list()?;\n-        let mut new_field_list = old_field_list.clone();\n+        let new_field_list = old_field_list.clone_for_update();\n         for f in self.missed_fields.iter() {\n             let field =\n-                make::record_expr_field(make::name_ref(&f.to_string()), Some(make::expr_unit()));\n-            new_field_list = new_field_list.append_field(&field);\n+                make::record_expr_field(make::name_ref(&f.to_string()), Some(make::expr_unit()))\n+                    .clone_for_update();\n+            new_field_list.add_field(field);\n         }\n \n         let edit = {"}, {"sha": "61952377f63fae83bf5d09d1660d9290d1f268e7", "filename": "crates/syntax/src/ast/edit.rs", "status": "modified", "additions": 2, "deletions": 98, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/201dbbe6da180c47f2c866128f26a48378768bbc/crates%2Fsyntax%2Fsrc%2Fast%2Fedit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/201dbbe6da180c47f2c866128f26a48378768bbc/crates%2Fsyntax%2Fsrc%2Fast%2Fedit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fedit.rs?ref=201dbbe6da180c47f2c866128f26a48378768bbc", "patch": "@@ -10,12 +10,8 @@ use arrayvec::ArrayVec;\n \n use crate::{\n     algo,\n-    ast::{\n-        self,\n-        make::{self, tokens},\n-        AstNode,\n-    },\n-    ted, AstToken, Direction, InsertPosition, NodeOrToken, SmolStr, SyntaxElement, SyntaxKind,\n+    ast::{self, make, AstNode},\n+    ted, AstToken, InsertPosition, NodeOrToken, SyntaxElement, SyntaxKind,\n     SyntaxKind::{ATTR, COMMENT, WHITESPACE},\n     SyntaxNode, SyntaxToken, T,\n };\n@@ -29,82 +25,6 @@ impl ast::BinExpr {\n     }\n }\n \n-impl ast::RecordExprFieldList {\n-    #[must_use]\n-    pub fn append_field(&self, field: &ast::RecordExprField) -> ast::RecordExprFieldList {\n-        self.insert_field(InsertPosition::Last, field)\n-    }\n-\n-    #[must_use]\n-    pub fn insert_field(\n-        &self,\n-        position: InsertPosition<&'_ ast::RecordExprField>,\n-        field: &ast::RecordExprField,\n-    ) -> ast::RecordExprFieldList {\n-        let is_multiline = self.syntax().text().contains_char('\\n');\n-        let ws;\n-        let space = if is_multiline {\n-            ws = tokens::WsBuilder::new(&format!(\n-                \"\\n{}    \",\n-                leading_indent(self.syntax()).unwrap_or_default()\n-            ));\n-            ws.ws()\n-        } else {\n-            tokens::single_space()\n-        };\n-\n-        let mut to_insert: ArrayVec<SyntaxElement, 4> = ArrayVec::new();\n-        to_insert.push(space.into());\n-        to_insert.push(field.syntax().clone().into());\n-        to_insert.push(make::token(T![,]).into());\n-\n-        macro_rules! after_l_curly {\n-            () => {{\n-                let anchor = match self.l_curly_token() {\n-                    Some(it) => it.into(),\n-                    None => return self.clone(),\n-                };\n-                InsertPosition::After(anchor)\n-            }};\n-        }\n-\n-        macro_rules! after_field {\n-            ($anchor:expr) => {\n-                if let Some(comma) = $anchor\n-                    .syntax()\n-                    .siblings_with_tokens(Direction::Next)\n-                    .find(|it| it.kind() == T![,])\n-                {\n-                    InsertPosition::After(comma)\n-                } else {\n-                    to_insert.insert(0, make::token(T![,]).into());\n-                    InsertPosition::After($anchor.syntax().clone().into())\n-                }\n-            };\n-        }\n-\n-        let position = match position {\n-            InsertPosition::First => after_l_curly!(),\n-            InsertPosition::Last => {\n-                if !is_multiline {\n-                    // don't insert comma before curly\n-                    to_insert.pop();\n-                }\n-                match self.fields().last() {\n-                    Some(it) => after_field!(it),\n-                    None => after_l_curly!(),\n-                }\n-            }\n-            InsertPosition::Before(anchor) => {\n-                InsertPosition::Before(anchor.syntax().clone().into())\n-            }\n-            InsertPosition::After(anchor) => after_field!(anchor),\n-        };\n-\n-        self.insert_children(position, to_insert)\n-    }\n-}\n-\n impl ast::Path {\n     #[must_use]\n     pub fn with_segment(&self, segment: ast::PathSegment) -> ast::Path {\n@@ -308,22 +228,6 @@ impl IndentLevel {\n     }\n }\n \n-// FIXME: replace usages with IndentLevel above\n-fn leading_indent(node: &SyntaxNode) -> Option<SmolStr> {\n-    for token in prev_tokens(node.first_token()?) {\n-        if let Some(ws) = ast::Whitespace::cast(token.clone()) {\n-            let ws_text = ws.text();\n-            if let Some(pos) = ws_text.rfind('\\n') {\n-                return Some(ws_text[pos + 1..].into());\n-            }\n-        }\n-        if token.text().contains('\\n') {\n-            break;\n-        }\n-    }\n-    None\n-}\n-\n fn prev_tokens(token: SyntaxToken) -> impl Iterator<Item = SyntaxToken> {\n     iter::successors(Some(token), |token| token.prev_token())\n }"}, {"sha": "14624c68252c745b0d50a0e7f33970aa78f0e816", "filename": "crates/syntax/src/ast/edit_in_place.rs", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/201dbbe6da180c47f2c866128f26a48378768bbc/crates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/201dbbe6da180c47f2c866128f26a48378768bbc/crates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs?ref=201dbbe6da180c47f2c866128f26a48378768bbc", "patch": "@@ -368,6 +368,46 @@ impl ast::MatchArmList {\n     }\n }\n \n+impl ast::RecordExprFieldList {\n+    pub fn add_field(&self, field: ast::RecordExprField) {\n+        let is_multiline = self.syntax().text().contains_char('\\n');\n+        let whitespace = if is_multiline {\n+            let indent = IndentLevel::from_node(self.syntax()) + 1;\n+            make::tokens::whitespace(&format!(\"\\n{}\", indent))\n+        } else {\n+            make::tokens::single_space()\n+        };\n+\n+        let position = match self.fields().last() {\n+            Some(last_field) => {\n+                let comma = match last_field\n+                    .syntax()\n+                    .siblings_with_tokens(Direction::Next)\n+                    .filter_map(|it| it.into_token())\n+                    .find(|it| it.kind() == T![,])\n+                {\n+                    Some(it) => it,\n+                    None => {\n+                        let comma = ast::make::token(T![,]);\n+                        ted::insert(Position::after(last_field.syntax()), &comma);\n+                        comma\n+                    }\n+                };\n+                Position::after(comma)\n+            }\n+            None => match self.l_curly_token() {\n+                Some(it) => Position::after(it),\n+                None => Position::last_child_of(self.syntax()),\n+            },\n+        };\n+\n+        ted::insert_all(position, vec![whitespace.into(), field.syntax().clone().into()]);\n+        if is_multiline {\n+            ted::insert(Position::after(field.syntax()), ast::make::token(T![,]));\n+        }\n+    }\n+}\n+\n fn normalize_ws_between_braces(node: &SyntaxNode) -> Option<()> {\n     let l = node\n         .children_with_tokens()"}]}