{"sha": "69aeaea01f9dfd9f0b0f11acb8619246f2928acf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5YWVhZWEwMWY5ZGZkOWYwYjBmMTFhY2I4NjE5MjQ2ZjI5MjhhY2Y=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-09-27T14:59:48Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-09-27T14:59:48Z"}, "message": "rustup", "tree": {"sha": "5aecd65c37122927295f157a64fafae4684c548a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5aecd65c37122927295f157a64fafae4684c548a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69aeaea01f9dfd9f0b0f11acb8619246f2928acf", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJX6olkAAoJEFbW7qD8Z6xGyYQP/1XeArIdkav4EabQk9FIkqZl\n/c9OakhmrYSXib+7StfFIge7QutXAdJZkfrW+72yDP7wI93ydh+c9Sbh7sJSDFry\nndMsp1Vpvi4jrBGrAW7Iy5nvAcZLjqCNnQVgstcEr5ybbd6AqS68LBCVH7AdZOcd\nQcFYnSxjZVXgREKA3Qm+MNHg9Ya0k53ocAEE62+qwCVF+VoIG+loXed3s+COzWxf\nDrKox2MgcmhjX5W9LDPYILhDbZHLR5Ecv5lL19iKBsPCXbBwohGL4N1El1S/dc/y\nEjGXVBhiZVPCD+MhctDoznq8+aSRUYH7rmBmt9DK5zFdCGP0otqTTaAO6zmrb9xO\nB+I93GiN2bJiVxCFRbRt6Yqx1c+KZGMTR5qoS04s5DI/fhY65iUGHpwClBkMhI1B\nGerjK3s7rrd0aCtRE8+cI4rNRPTcQM7nrSeNVl05jeRa4+63zWzg3pTDQxu20Do6\nBcoeJqc5AGGTAhKg6cc9oak2Ju+Vt9FaOV0aYsJGDfvhwqHx8mZCO978EN0BoaJw\nkePNwd8zRPzagx2GrJKvc/iYQEfokscxz/mKgWUzuWRJHCFax3BuZnx4Kc1KjWYJ\nqyL/QOGowN2rxqdm2St0fn2/VBoF8YC2x74d5hSX8ia+wO/LoU8hxseVq6IuMsta\n++HX+p6SR4+nr4//gcSf\n=4DcN\n-----END PGP SIGNATURE-----", "payload": "tree 5aecd65c37122927295f157a64fafae4684c548a\nparent d6f1ba89ce7ebb7589e69903b6f3c92fb9b5d2fa\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1474988388 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1474988388 +0200\n\nrustup"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69aeaea01f9dfd9f0b0f11acb8619246f2928acf", "html_url": "https://github.com/rust-lang/rust/commit/69aeaea01f9dfd9f0b0f11acb8619246f2928acf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69aeaea01f9dfd9f0b0f11acb8619246f2928acf/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6f1ba89ce7ebb7589e69903b6f3c92fb9b5d2fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6f1ba89ce7ebb7589e69903b6f3c92fb9b5d2fa", "html_url": "https://github.com/rust-lang/rust/commit/d6f1ba89ce7ebb7589e69903b6f3c92fb9b5d2fa"}], "stats": {"total": 28, "additions": 9, "deletions": 19}, "files": [{"sha": "54001bbc71226a5729d2dc05abb3eb9d821c8d97", "filename": "src/interpreter/vtable.rs", "status": "modified", "additions": 9, "deletions": 19, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/69aeaea01f9dfd9f0b0f11acb8619246f2928acf/src%2Finterpreter%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69aeaea01f9dfd9f0b0f11acb8619246f2928acf/src%2Finterpreter%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fvtable.rs?ref=69aeaea01f9dfd9f0b0f11acb8619246f2928acf", "patch": "@@ -112,35 +112,25 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n \n         self.tcx.populate_implementations_for_trait_if_necessary(trait_id);\n \n-        let trait_item_def_ids = self.tcx.trait_item_def_ids(trait_id);\n+        let trait_item_def_ids = self.tcx.impl_or_trait_items(trait_id);\n         trait_item_def_ids\n             .iter()\n \n             // Filter out non-method items.\n-            .filter_map(|item_def_id| {\n-                match *item_def_id {\n-                    ty::MethodTraitItemId(def_id) => Some(def_id),\n-                    _ => None,\n-                }\n-            })\n-\n-            // Now produce pointers for each remaining method. If the\n-            // method could never be called from this object, just supply\n-            // null.\n-            .map(|trait_method_def_id| {\n+            .filter_map(|&trait_method_def_id| {\n+                let trait_method_type = match self.tcx.impl_or_trait_item(trait_method_def_id) {\n+                    ty::MethodTraitItem(trait_method_type) => trait_method_type,\n+                    _ => return None,\n+                };\n                 debug!(\"get_vtable_methods: trait_method_def_id={:?}\",\n                        trait_method_def_id);\n \n-                let trait_method_type = match self.tcx.impl_or_trait_item(trait_method_def_id) {\n-                    ty::MethodTraitItem(m) => m,\n-                    _ => bug!(\"should be a method, not other assoc item\"),\n-                };\n                 let name = trait_method_type.name;\n \n                 // Some methods cannot be called on an object; skip those.\n                 if !self.tcx.is_vtable_safe_method(trait_id, &trait_method_type) {\n                     debug!(\"get_vtable_methods: not vtable safe\");\n-                    return None;\n+                    return Some(None);\n                 }\n \n                 debug!(\"get_vtable_methods: trait_method_type={:?}\",\n@@ -167,11 +157,11 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                     let predicates = mth.method.predicates.predicates.subst(self.tcx, mth.substs);\n                     if !self.normalize_and_test_predicates(predicates) {\n                         debug!(\"get_vtable_methods: predicates do not hold\");\n-                        return None;\n+                        return Some(None);\n                     }\n                 }\n \n-                Some(mth)\n+                Some(Some(mth))\n             })\n             .collect()\n     }"}]}