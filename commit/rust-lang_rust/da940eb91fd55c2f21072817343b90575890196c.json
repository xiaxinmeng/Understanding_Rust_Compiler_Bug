{"sha": "da940eb91fd55c2f21072817343b90575890196c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhOTQwZWI5MWZkNTVjMmYyMTA3MjgxNzM0M2I5MDU3NTg5MDE5NmM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-27T09:33:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-27T09:33:30Z"}, "message": "Auto merge of #1354 - divergentdave:dump-alloc-on-undef-read, r=RalfJung\n\nPrint hex dump of alloc on reading undef bytes\n\nHere's a small addition I made locally to the UB diagnostics, in case you're interested in it. This PR calls `dump_alloc()` on the relevant allocation if Miri fails on UB due to reading undefined bytes. This came in handy when diagnosing such an issue in a large program using unsafe Rust, in part because it wasn't deterministic enough to use `-Zmiri-track-alloc-id=`. If you'd like to put this behind another -Z flag, let me know.", "tree": {"sha": "91a99257bd64db52d230f8043250db5380a4fd77", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91a99257bd64db52d230f8043250db5380a4fd77"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da940eb91fd55c2f21072817343b90575890196c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da940eb91fd55c2f21072817343b90575890196c", "html_url": "https://github.com/rust-lang/rust/commit/da940eb91fd55c2f21072817343b90575890196c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da940eb91fd55c2f21072817343b90575890196c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97ae5b6d87b7bcd6c1aeb5efd5133b8719321b0f", "url": "https://api.github.com/repos/rust-lang/rust/commits/97ae5b6d87b7bcd6c1aeb5efd5133b8719321b0f", "html_url": "https://github.com/rust-lang/rust/commit/97ae5b6d87b7bcd6c1aeb5efd5133b8719321b0f"}, {"sha": "e267fb4edec86c84b6c0e415a647ba9f8b9f0c9e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e267fb4edec86c84b6c0e415a647ba9f8b9f0c9e", "html_url": "https://github.com/rust-lang/rust/commit/e267fb4edec86c84b6c0e415a647ba9f8b9f0c9e"}], "stats": {"total": 38, "additions": 34, "deletions": 4}, "files": [{"sha": "114f1d9be3623bdb77d95d582b897398d02811ca", "filename": "src/diagnostics.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/da940eb91fd55c2f21072817343b90575890196c/src%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da940eb91fd55c2f21072817343b90575890196c/src%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdiagnostics.rs?ref=da940eb91fd55c2f21072817343b90575890196c", "patch": "@@ -115,7 +115,19 @@ pub fn report_error<'tcx, 'mir>(\n \n     e.print_backtrace();\n     let msg = e.to_string();\n-    report_msg(ecx, &format!(\"{}: {}\", title, msg), msg, helps, true)\n+    report_msg(ecx, &format!(\"{}: {}\", title, msg), msg, helps, true);\n+\n+    // Extra output to help debug specific issues.\n+    if let UndefinedBehavior(UndefinedBehaviorInfo::InvalidUndefBytes(Some(ptr))) = e.kind {\n+        eprintln!(\n+            \"Uninitialized read occurred at offset 0x{:x} into this allocation:\",\n+            ptr.offset.bytes(),\n+        );\n+        ecx.memory.dump_alloc(ptr.alloc_id);\n+        eprintln!();\n+    }\n+\n+    None\n }\n \n /// Report an error or note (depending on the `error` argument) at the current frame's current statement.\n@@ -126,7 +138,7 @@ fn report_msg<'tcx, 'mir>(\n     span_msg: String,\n     mut helps: Vec<String>,\n     error: bool,\n-) -> Option<i64> {\n+) {\n     let span = if let Some(frame) = ecx.machine.stack.last() {\n         frame.current_source_info().unwrap().span\n     } else {\n@@ -167,8 +179,6 @@ fn report_msg<'tcx, 'mir>(\n             trace!(\"    local {}: {:?}\", i, local.value);\n         }\n     }\n-    // Let the reported error determine the return code.\n-    return None;\n }\n \n thread_local! {"}, {"sha": "dac02a8690e9e216280828ba7c60a38d0d6ff0e6", "filename": "tests/compile-fail/undefined_buffer.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/da940eb91fd55c2f21072817343b90575890196c/tests%2Fcompile-fail%2Fundefined_buffer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da940eb91fd55c2f21072817343b90575890196c/tests%2Fcompile-fail%2Fundefined_buffer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fundefined_buffer.rs?ref=da940eb91fd55c2f21072817343b90575890196c", "patch": "@@ -0,0 +1,20 @@\n+// error-pattern: reading uninitialized memory\n+\n+use std::alloc::{alloc, dealloc, Layout};\n+use std::slice::from_raw_parts;\n+\n+fn main() {\n+    let layout = Layout::from_size_align(32, 8).unwrap();\n+    unsafe {\n+        let ptr = alloc(layout);\n+        *ptr = 0x41;\n+        *ptr.add(1) = 0x42;\n+        *ptr.add(2) = 0x43;\n+        *ptr.add(3) = 0x44;\n+        *ptr.add(16) = 0x00;\n+        let slice1 = from_raw_parts(ptr, 16);\n+        let slice2 = from_raw_parts(ptr.add(16), 16);\n+        drop(slice1.cmp(slice2));\n+        dealloc(ptr, layout);\n+    }\n+}"}]}