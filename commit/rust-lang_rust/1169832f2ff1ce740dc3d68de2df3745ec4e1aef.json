{"sha": "1169832f2ff1ce740dc3d68de2df3745ec4e1aef", "node_id": "C_kwDOAAsO6NoAKDExNjk4MzJmMmZmMWNlNzQwZGMzZDY4ZGUyZGYzNzQ1ZWM0ZTFhZWY", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-06-16T16:50:57Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-07-17T23:32:06Z"}, "message": "rustdoc: extend `#[doc(tuple_variadic)]` to fn pointers\n\nThe attribute is also renamed `fake_variadic`.", "tree": {"sha": "787992af670a5860306399e1fdc94e5818dbc0fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/787992af670a5860306399e1fdc94e5818dbc0fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1169832f2ff1ce740dc3d68de2df3745ec4e1aef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1169832f2ff1ce740dc3d68de2df3745ec4e1aef", "html_url": "https://github.com/rust-lang/rust/commit/1169832f2ff1ce740dc3d68de2df3745ec4e1aef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1169832f2ff1ce740dc3d68de2df3745ec4e1aef/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "263edd43c5255084292329423c61a9d69715ebfa", "url": "https://api.github.com/repos/rust-lang/rust/commits/263edd43c5255084292329423c61a9d69715ebfa", "html_url": "https://github.com/rust-lang/rust/commit/263edd43c5255084292329423c61a9d69715ebfa"}], "stats": {"total": 103, "additions": 61, "deletions": 42}, "files": [{"sha": "e7004ff4bc5b6099a24d88f1c0d3c0a59bae8460", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1169832f2ff1ce740dc3d68de2df3745ec4e1aef/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1169832f2ff1ce740dc3d68de2df3745ec4e1aef/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=1169832f2ff1ce740dc3d68de2df3745ec4e1aef", "patch": "@@ -402,8 +402,8 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                     gate_feature_post!(self, rustdoc_internals, attr.span, msg);\n                 }\n \n-                if nested_meta.has_name(sym::tuple_variadic) {\n-                    let msg = \"`#[doc(tuple_variadic)]` is meant for internal use only\";\n+                if nested_meta.has_name(sym::fake_variadic) {\n+                    let msg = \"`#[doc(fake_variadic)]` is meant for internal use only\";\n                     gate_feature_post!(self, rustdoc_internals, attr.span, msg);\n                 }\n             }"}, {"sha": "04c67cf8ff73ae3542c4ee5676c0876d9f5a555c", "filename": "compiler/rustc_error_messages/locales/en-US/passes.ftl", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1169832f2ff1ce740dc3d68de2df3745ec4e1aef/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fpasses.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/1169832f2ff1ce740dc3d68de2df3745ec4e1aef/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fpasses.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fpasses.ftl?ref=1169832f2ff1ce740dc3d68de2df3745ec4e1aef", "patch": "@@ -81,8 +81,8 @@ passes-doc-keyword-not-mod = `#[doc(keyword = \"...\")]` should be used on modules\n \n passes-doc-keyword-invalid-ident = `{$doc_keyword}` is not a valid identifier\n \n-passes-doc-tuple-variadic-not-first =\n-    `#[doc(tuple_variadic)]` must be used on the first of a set of tuple trait impls with varying arity\n+passes-doc-fake-variadic-not-valid =\n+    `#[doc(fake_variadic)]` must be used on the first of a set of tuple or fn pointer trait impls with varying arity\n \n passes-doc-keyword-only-impl = `#[doc(keyword = \"...\")]` should be used on impl blocks\n "}, {"sha": "f88997f884a4478bf5f5618fc14ab356e7631c9e", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1169832f2ff1ce740dc3d68de2df3745ec4e1aef/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1169832f2ff1ce740dc3d68de2df3745ec4e1aef/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=1169832f2ff1ce740dc3d68de2df3745ec4e1aef", "patch": "@@ -706,14 +706,20 @@ impl CheckAttrVisitor<'_> {\n         true\n     }\n \n-    fn check_doc_tuple_variadic(&self, meta: &NestedMetaItem, hir_id: HirId) -> bool {\n+    fn check_doc_fake_variadic(&self, meta: &NestedMetaItem, hir_id: HirId) -> bool {\n         match self.tcx.hir().find(hir_id).and_then(|node| match node {\n             hir::Node::Item(item) => Some(&item.kind),\n             _ => None,\n         }) {\n             Some(ItemKind::Impl(ref i)) => {\n-                if !matches!(&i.self_ty.kind, hir::TyKind::Tup([_])) {\n-                    self.tcx.sess.emit_err(errors::DocTupleVariadicNotFirst { span: meta.span() });\n+                let is_valid = matches!(&i.self_ty.kind, hir::TyKind::Tup([_]))\n+                    || if let hir::TyKind::BareFn(bare_fn_ty) = &i.self_ty.kind {\n+                        bare_fn_ty.decl.inputs.len() == 1\n+                    } else {\n+                        false\n+                    };\n+                if !is_valid {\n+                    self.tcx.sess.emit_err(errors::DocFakeVariadicNotValid { span: meta.span() });\n                     return false;\n                 }\n             }\n@@ -887,9 +893,9 @@ impl CheckAttrVisitor<'_> {\n                             is_valid = false\n                         }\n \n-                        sym::tuple_variadic\n-                            if !self.check_attr_not_crate_level(meta, hir_id, \"tuple_variadic\")\n-                                || !self.check_doc_tuple_variadic(meta, hir_id) =>\n+                        sym::fake_variadic\n+                            if !self.check_attr_not_crate_level(meta, hir_id, \"fake_variadic\")\n+                                || !self.check_doc_fake_variadic(meta, hir_id) =>\n                         {\n                             is_valid = false\n                         }\n@@ -939,7 +945,7 @@ impl CheckAttrVisitor<'_> {\n                         | sym::notable_trait\n                         | sym::passes\n                         | sym::plugins\n-                        | sym::tuple_variadic => {}\n+                        | sym::fake_variadic => {}\n \n                         sym::test => {\n                             if !self.check_test_attr(meta, hir_id) {"}, {"sha": "fcd1e9363b1bed01018495447afebf0d5e9fe647", "filename": "compiler/rustc_passes/src/errors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1169832f2ff1ce740dc3d68de2df3745ec4e1aef/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1169832f2ff1ce740dc3d68de2df3745ec4e1aef/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs?ref=1169832f2ff1ce740dc3d68de2df3745ec4e1aef", "patch": "@@ -212,8 +212,8 @@ pub struct DocKeywordInvalidIdent {\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(passes::doc_tuple_variadic_not_first)]\n-pub struct DocTupleVariadicNotFirst {\n+#[error(passes::doc_fake_variadic_not_valid)]\n+pub struct DocFakeVariadicNotValid {\n     #[primary_span]\n     pub span: Span,\n }"}, {"sha": "924bc2b6bceeaf3b0340a53f9be6c2e177e08264", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1169832f2ff1ce740dc3d68de2df3745ec4e1aef/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1169832f2ff1ce740dc3d68de2df3745ec4e1aef/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=1169832f2ff1ce740dc3d68de2df3745ec4e1aef", "patch": "@@ -685,6 +685,7 @@ symbols! {\n         fabsf32,\n         fabsf64,\n         fadd_fast,\n+        fake_variadic,\n         fdiv_fast,\n         feature,\n         fence,\n@@ -1460,7 +1461,6 @@ symbols! {\n         tuple,\n         tuple_from_req,\n         tuple_indexing,\n-        tuple_variadic,\n         two_phase,\n         ty,\n         type_alias_enum_variants,"}, {"sha": "372141e0933f560600fdcbe7ac79ec8400170513", "filename": "library/core/src/fmt/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1169832f2ff1ce740dc3d68de2df3745ec4e1aef/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1169832f2ff1ce740dc3d68de2df3745ec4e1aef/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs?ref=1169832f2ff1ce740dc3d68de2df3745ec4e1aef", "patch": "@@ -2562,7 +2562,7 @@ macro_rules! tuple {\n \n macro_rules! maybe_tuple_doc {\n     ($a:ident @ #[$meta:meta] $item:item) => {\n-        #[doc(tuple_variadic)]\n+        #[cfg_attr(not(bootstrap), doc(fake_variadic))]\n         #[doc = \"This trait is implemented for tuples up to twelve items long.\"]\n         #[$meta]\n         $item"}, {"sha": "5974562aced4ebee6c2742545792598c60d2f0cb", "filename": "library/core/src/hash/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1169832f2ff1ce740dc3d68de2df3745ec4e1aef/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1169832f2ff1ce740dc3d68de2df3745ec4e1aef/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs?ref=1169832f2ff1ce740dc3d68de2df3745ec4e1aef", "patch": "@@ -900,7 +900,7 @@ mod impls {\n \n     macro_rules! maybe_tuple_doc {\n         ($a:ident @ #[$meta:meta] $item:item) => {\n-            #[doc(tuple_variadic)]\n+            #[cfg_attr(not(bootstrap), doc(fake_variadic))]\n             #[doc = \"This trait is implemented for tuples up to twelve items long.\"]\n             #[$meta]\n             $item"}, {"sha": "4f08b5626851bab29c015bad2a900151a1c50b06", "filename": "library/core/src/primitive_docs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1169832f2ff1ce740dc3d68de2df3745ec4e1aef/library%2Fcore%2Fsrc%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1169832f2ff1ce740dc3d68de2df3745ec4e1aef/library%2Fcore%2Fsrc%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fprimitive_docs.rs?ref=1169832f2ff1ce740dc3d68de2df3745ec4e1aef", "patch": "@@ -996,7 +996,7 @@ impl<T> (T,) {}\n // Fake impl that's only really used for docs.\n #[cfg(doc)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[doc(tuple_variadic)]\n+#[cfg_attr(not(bootstrap), doc(fake_variadic))]\n /// This trait is implemented on arbitrary-length tuples.\n impl<T: Clone> Clone for (T,) {\n     fn clone(&self) -> Self {\n@@ -1007,7 +1007,7 @@ impl<T: Clone> Clone for (T,) {\n // Fake impl that's only really used for docs.\n #[cfg(doc)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[doc(tuple_variadic)]\n+#[cfg_attr(not(bootstrap), doc(fake_variadic))]\n /// This trait is implemented on arbitrary-length tuples.\n impl<T: Copy> Copy for (T,) {\n     // empty"}, {"sha": "d189e6400f1e87951c5ca8eb9166f192af9be3b1", "filename": "library/core/src/tuple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1169832f2ff1ce740dc3d68de2df3745ec4e1aef/library%2Fcore%2Fsrc%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1169832f2ff1ce740dc3d68de2df3745ec4e1aef/library%2Fcore%2Fsrc%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftuple.rs?ref=1169832f2ff1ce740dc3d68de2df3745ec4e1aef", "patch": "@@ -107,7 +107,7 @@ macro_rules! tuple_impls {\n // Otherwise, it hides the docs entirely.\n macro_rules! maybe_tuple_doc {\n     ($a:ident @ #[$meta:meta] $item:item) => {\n-        #[doc(tuple_variadic)]\n+        #[cfg_attr(not(bootstrap), doc(fake_variadic))]\n         #[doc = \"This trait is implemented for tuples up to twelve items long.\"]\n         #[$meta]\n         $item"}, {"sha": "4f08b5626851bab29c015bad2a900151a1c50b06", "filename": "library/std/src/primitive_docs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1169832f2ff1ce740dc3d68de2df3745ec4e1aef/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1169832f2ff1ce740dc3d68de2df3745ec4e1aef/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprimitive_docs.rs?ref=1169832f2ff1ce740dc3d68de2df3745ec4e1aef", "patch": "@@ -996,7 +996,7 @@ impl<T> (T,) {}\n // Fake impl that's only really used for docs.\n #[cfg(doc)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[doc(tuple_variadic)]\n+#[cfg_attr(not(bootstrap), doc(fake_variadic))]\n /// This trait is implemented on arbitrary-length tuples.\n impl<T: Clone> Clone for (T,) {\n     fn clone(&self) -> Self {\n@@ -1007,7 +1007,7 @@ impl<T: Clone> Clone for (T,) {\n // Fake impl that's only really used for docs.\n #[cfg(doc)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[doc(tuple_variadic)]\n+#[cfg_attr(not(bootstrap), doc(fake_variadic))]\n /// This trait is implemented on arbitrary-length tuples.\n impl<T: Copy> Copy for (T,) {\n     // empty"}, {"sha": "ce10ca9aa3df434e90a76ff035f440787bd41578", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1169832f2ff1ce740dc3d68de2df3745ec4e1aef/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1169832f2ff1ce740dc3d68de2df3745ec4e1aef/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=1169832f2ff1ce740dc3d68de2df3745ec4e1aef", "patch": "@@ -506,8 +506,8 @@ pub(crate) fn build_impl(\n             for_,\n             items: trait_items,\n             polarity,\n-            kind: if utils::has_doc_flag(tcx, did, sym::tuple_variadic) {\n-                ImplKind::TupleVaradic\n+            kind: if utils::has_doc_flag(tcx, did, sym::fake_variadic) {\n+                ImplKind::FakeVaradic\n             } else {\n                 ImplKind::Normal\n             },"}, {"sha": "a5c5d1ac1820eb44271c8487b8e6c1fe5470d47a", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1169832f2ff1ce740dc3d68de2df3745ec4e1aef/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1169832f2ff1ce740dc3d68de2df3745ec4e1aef/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=1169832f2ff1ce740dc3d68de2df3745ec4e1aef", "patch": "@@ -2005,8 +2005,8 @@ fn clean_impl<'tcx>(\n             for_,\n             items,\n             polarity: tcx.impl_polarity(def_id),\n-            kind: if utils::has_doc_flag(tcx, def_id.to_def_id(), sym::tuple_variadic) {\n-                ImplKind::TupleVaradic\n+            kind: if utils::has_doc_flag(tcx, def_id.to_def_id(), sym::fake_variadic) {\n+                ImplKind::FakeVaradic\n             } else {\n                 ImplKind::Normal\n             },"}, {"sha": "5ddf7ea8a85f4c1cddb4325a73eae99c04211683", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1169832f2ff1ce740dc3d68de2df3745ec4e1aef/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1169832f2ff1ce740dc3d68de2df3745ec4e1aef/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=1169832f2ff1ce740dc3d68de2df3745ec4e1aef", "patch": "@@ -2394,7 +2394,7 @@ impl Impl {\n pub(crate) enum ImplKind {\n     Normal,\n     Auto,\n-    TupleVaradic,\n+    FakeVaradic,\n     Blanket(Box<Type>),\n }\n \n@@ -2407,8 +2407,8 @@ impl ImplKind {\n         matches!(self, ImplKind::Blanket(_))\n     }\n \n-    pub(crate) fn is_tuple_variadic(&self) -> bool {\n-        matches!(self, ImplKind::TupleVaradic)\n+    pub(crate) fn is_fake_variadic(&self) -> bool {\n+        matches!(self, ImplKind::FakeVaradic)\n     }\n \n     pub(crate) fn as_blanket_ty(&self) -> Option<&Type> {"}, {"sha": "291e6bc2fe4c7c5c7076c92fb47eb1c75ddd6ff1", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1169832f2ff1ce740dc3d68de2df3745ec4e1aef/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1169832f2ff1ce740dc3d68de2df3745ec4e1aef/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=1169832f2ff1ce740dc3d68de2df3745ec4e1aef", "patch": "@@ -1165,10 +1165,23 @@ impl clean::Impl {\n \n             if let clean::Type::Tuple(types) = &self.for_ &&\n                 let [clean::Type::Generic(name)] = &types[..] &&\n-                (self.kind.is_tuple_variadic() || self.kind.is_auto()) {\n+                (self.kind.is_fake_variadic() || self.kind.is_auto()) {\n                 // Hardcoded anchor library/core/src/primitive_docs.rs\n                 // Link should match `# Trait implementations`\n                 primitive_link_fragment(f, PrimitiveType::Tuple, &format!(\"({name}\u2081, {name}\u2082, \u2026, {name}\u2099)\"), \"#trait-implementations-1\", cx)?;\n+            } else if let clean::Type::BareFunction(bare_fn) = &self.for_ &&\n+                let [clean::Argument { type_: clean::Type::Generic(name), .. }] = &bare_fn.decl.inputs.values[..] &&\n+                (self.kind.is_fake_variadic() || self.kind.is_auto()) {\n+                // Hardcoded anchor library/core/src/primitive_docs.rs\n+                // Link should match `# Trait implementations`\n+                primitive_link_fragment(f, PrimitiveType::Tuple, &format!(\"fn ({name}\u2081, {name}\u2082, \u2026, {name}\u2099)\"), \"#trait-implementations-1\", cx)?;\n+                // Not implemented.\n+                assert!(!bare_fn.decl.c_variadic);\n+                // Write output.\n+                if let clean::FnRetTy::Return(ty) = &bare_fn.decl.output {\n+                    write!(f, \" -> \")?;\n+                    fmt_type(ty, f, use_absolute, cx)?;\n+                }\n             } else if let Some(ty) = self.kind.as_blanket_ty() {\n                 fmt_type(ty, f, use_absolute, cx)?;\n             } else {"}, {"sha": "9000ab472d96e43983f70ae1743e8ac895b69317", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1169832f2ff1ce740dc3d68de2df3745ec4e1aef/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1169832f2ff1ce740dc3d68de2df3745ec4e1aef/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=1169832f2ff1ce740dc3d68de2df3745ec4e1aef", "patch": "@@ -574,7 +574,7 @@ impl FromWithTcx<clean::Impl> for Impl {\n         let trait_ = trait_.map(|path| clean::Type::Path { path }.into_tcx(tcx));\n         // FIXME: use something like ImplKind in JSON?\n         let (synthetic, blanket_impl) = match kind {\n-            clean::ImplKind::Normal | clean::ImplKind::TupleVaradic => (false, None),\n+            clean::ImplKind::Normal | clean::ImplKind::FakeVaradic => (false, None),\n             clean::ImplKind::Auto => (true, None),\n             clean::ImplKind::Blanket(ty) => (false, Some(*ty)),\n         };"}, {"sha": "505de53481f85c9c11453cf650cfd41b24428876", "filename": "src/test/rustdoc-ui/tuple-variadic-check.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1169832f2ff1ce740dc3d68de2df3745ec4e1aef/src%2Ftest%2Frustdoc-ui%2Ftuple-variadic-check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1169832f2ff1ce740dc3d68de2df3745ec4e1aef/src%2Ftest%2Frustdoc-ui%2Ftuple-variadic-check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ftuple-variadic-check.rs?ref=1169832f2ff1ce740dc3d68de2df3745ec4e1aef", "patch": "@@ -3,13 +3,13 @@\n trait Mine {}\n \n // This one is fine\n-#[doc(tuple_variadic)]\n+#[doc(fake_variadic)]\n impl<T> Mine for (T,) {}\n \n trait Mine2 {}\n \n // This one is not\n-#[doc(tuple_variadic)] //~ ERROR\n+#[doc(fake_variadic)] //~ ERROR\n impl<T, U> Mine for (T,U) {}\n \n fn main() {}"}, {"sha": "d127fb858d176d303adfd5677956c9278f58e625", "filename": "src/test/rustdoc-ui/tuple-variadic-check.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1169832f2ff1ce740dc3d68de2df3745ec4e1aef/src%2Ftest%2Frustdoc-ui%2Ftuple-variadic-check.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1169832f2ff1ce740dc3d68de2df3745ec4e1aef/src%2Ftest%2Frustdoc-ui%2Ftuple-variadic-check.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ftuple-variadic-check.stderr?ref=1169832f2ff1ce740dc3d68de2df3745ec4e1aef", "patch": "@@ -1,8 +1,8 @@\n-error: `#[doc(tuple_variadic)]` must be used on the first of a set of tuple trait impls with varying arity\n+error: `#[doc(fake_variadic)]` must be used on the first of a set of tuple or fn pointer trait impls with varying arity\n   --> $DIR/tuple-variadic-check.rs:12:7\n    |\n-LL | #[doc(tuple_variadic)]\n-   |       ^^^^^^^^^^^^^^\n+LL | #[doc(fake_variadic)]\n+   |       ^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "a2fbbf078d5178468408174845ce1dfe99d1ea88", "filename": "src/test/rustdoc/primitive-tuple-auto-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1169832f2ff1ce740dc3d68de2df3745ec4e1aef/src%2Ftest%2Frustdoc%2Fprimitive-tuple-auto-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1169832f2ff1ce740dc3d68de2df3745ec4e1aef/src%2Ftest%2Frustdoc%2Fprimitive-tuple-auto-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fprimitive-tuple-auto-trait.rs?ref=1169832f2ff1ce740dc3d68de2df3745ec4e1aef", "patch": "@@ -16,7 +16,7 @@\n // @has - '//h2[@id=\"trait-implementations-1\"]' 'Trait implementations'\n /// # Trait implementations\n ///\n-/// This header is hard-coded in the HTML format linking for `#[doc(tuple_variadics)]`.\n+/// This header is hard-coded in the HTML format linking for `#[doc(fake_variadics)]`.\n /// To make sure it gets linked correctly, we need to make sure the hardcoded anchor\n /// in the code matches what rustdoc generates for the header.\n mod tuple_prim {}"}, {"sha": "db7cfd60c71a67e3dc8ab4d993d902fe21277700", "filename": "src/test/rustdoc/primitive-tuple-variadic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1169832f2ff1ce740dc3d68de2df3745ec4e1aef/src%2Ftest%2Frustdoc%2Fprimitive-tuple-variadic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1169832f2ff1ce740dc3d68de2df3745ec4e1aef/src%2Ftest%2Frustdoc%2Fprimitive-tuple-variadic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fprimitive-tuple-variadic.rs?ref=1169832f2ff1ce740dc3d68de2df3745ec4e1aef", "patch": "@@ -7,12 +7,12 @@ pub trait Foo {}\n \n // @has foo/trait.Foo.html\n // @has - '//section[@id=\"impl-Foo-for-(T%2C)\"]/h3' 'impl<T> Foo for (T\u2081, T\u2082, \u2026, T\u2099)'\n-#[doc(tuple_variadic)]\n+#[doc(fake_variadic)]\n impl<T> Foo for (T,) {}\n \n pub trait Bar {}\n \n // @has foo/trait.Bar.html\n // @has - '//section[@id=\"impl-Bar-for-(U%2C)\"]/h3' 'impl<U: Foo> Bar for (U\u2081, U\u2082, \u2026, U\u2099)'\n-#[doc(tuple_variadic)]\n+#[doc(fake_variadic)]\n impl<U: Foo> Bar for (U,) {}"}, {"sha": "58306a4cfc9c9d03e342167e0d044c3cef27029f", "filename": "src/test/ui/feature-gates/feature-gate-rustdoc_internals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1169832f2ff1ce740dc3d68de2df3745ec4e1aef/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustdoc_internals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1169832f2ff1ce740dc3d68de2df3745ec4e1aef/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustdoc_internals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustdoc_internals.rs?ref=1169832f2ff1ce740dc3d68de2df3745ec4e1aef", "patch": "@@ -4,7 +4,7 @@ mod foo {}\n \n trait Mine {}\n \n-#[doc(tuple_variadic)]  //~ ERROR: `#[doc(tuple_variadic)]` is meant for internal use only\n+#[doc(fake_variadic)]  //~ ERROR: `#[doc(fake_variadic)]` is meant for internal use only\n impl<T> Mine for (T,) {}\n \n fn main() {}"}, {"sha": "c4272a2c04c2ae5d46e7cea98de233bda0cab7e0", "filename": "src/test/ui/feature-gates/feature-gate-rustdoc_internals.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1169832f2ff1ce740dc3d68de2df3745ec4e1aef/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustdoc_internals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1169832f2ff1ce740dc3d68de2df3745ec4e1aef/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustdoc_internals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustdoc_internals.stderr?ref=1169832f2ff1ce740dc3d68de2df3745ec4e1aef", "patch": "@@ -7,11 +7,11 @@ LL | #[doc(keyword = \"match\")]\n    = note: see issue #90418 <https://github.com/rust-lang/rust/issues/90418> for more information\n    = help: add `#![feature(rustdoc_internals)]` to the crate attributes to enable\n \n-error[E0658]: `#[doc(tuple_variadic)]` is meant for internal use only\n+error[E0658]: `#[doc(fake_variadic)]` is meant for internal use only\n   --> $DIR/feature-gate-rustdoc_internals.rs:7:1\n    |\n-LL | #[doc(tuple_variadic)]\n-   | ^^^^^^^^^^^^^^^^^^^^^^\n+LL | #[doc(fake_variadic)]\n+   | ^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #90418 <https://github.com/rust-lang/rust/issues/90418> for more information\n    = help: add `#![feature(rustdoc_internals)]` to the crate attributes to enable"}]}