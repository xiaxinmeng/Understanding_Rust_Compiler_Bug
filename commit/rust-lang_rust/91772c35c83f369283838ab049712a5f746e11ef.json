{"sha": "91772c35c83f369283838ab049712a5f746e11ef", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxNzcyYzM1YzgzZjM2OTI4MzgzOGFiMDQ5NzEyYTVmNzQ2ZTExZWY=", "commit": {"author": {"name": "Albin Hedman", "email": "albin9604@gmail.com", "date": "2020-12-02T02:01:18Z"}, "committer": {"name": "Albin Hedman", "email": "albin9604@gmail.com", "date": "2020-12-02T02:22:47Z"}, "message": "Even more const", "tree": {"sha": "240aedae10356bed4d6d8c00630dd8eadf43f354", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/240aedae10356bed4d6d8c00630dd8eadf43f354"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91772c35c83f369283838ab049712a5f746e11ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91772c35c83f369283838ab049712a5f746e11ef", "html_url": "https://github.com/rust-lang/rust/commit/91772c35c83f369283838ab049712a5f746e11ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91772c35c83f369283838ab049712a5f746e11ef/comments", "author": {"login": "usbalbin", "id": 10927717, "node_id": "MDQ6VXNlcjEwOTI3NzE3", "avatar_url": "https://avatars.githubusercontent.com/u/10927717?v=4", "gravatar_id": "", "url": "https://api.github.com/users/usbalbin", "html_url": "https://github.com/usbalbin", "followers_url": "https://api.github.com/users/usbalbin/followers", "following_url": "https://api.github.com/users/usbalbin/following{/other_user}", "gists_url": "https://api.github.com/users/usbalbin/gists{/gist_id}", "starred_url": "https://api.github.com/users/usbalbin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/usbalbin/subscriptions", "organizations_url": "https://api.github.com/users/usbalbin/orgs", "repos_url": "https://api.github.com/users/usbalbin/repos", "events_url": "https://api.github.com/users/usbalbin/events{/privacy}", "received_events_url": "https://api.github.com/users/usbalbin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "usbalbin", "id": 10927717, "node_id": "MDQ6VXNlcjEwOTI3NzE3", "avatar_url": "https://avatars.githubusercontent.com/u/10927717?v=4", "gravatar_id": "", "url": "https://api.github.com/users/usbalbin", "html_url": "https://github.com/usbalbin", "followers_url": "https://api.github.com/users/usbalbin/followers", "following_url": "https://api.github.com/users/usbalbin/following{/other_user}", "gists_url": "https://api.github.com/users/usbalbin/gists{/gist_id}", "starred_url": "https://api.github.com/users/usbalbin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/usbalbin/subscriptions", "organizations_url": "https://api.github.com/users/usbalbin/orgs", "repos_url": "https://api.github.com/users/usbalbin/repos", "events_url": "https://api.github.com/users/usbalbin/events{/privacy}", "received_events_url": "https://api.github.com/users/usbalbin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8bd80e25f0bdb7a3282fecee148afed966067f1e", "url": "https://api.github.com/repos/rust-lang/rust/commits/8bd80e25f0bdb7a3282fecee148afed966067f1e", "html_url": "https://github.com/rust-lang/rust/commit/8bd80e25f0bdb7a3282fecee148afed966067f1e"}], "stats": {"total": 13, "additions": 9, "deletions": 4}, "files": [{"sha": "a901375a958abce8aff85f8c8e874ae751001f0e", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/91772c35c83f369283838ab049712a5f746e11ef/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91772c35c83f369283838ab049712a5f746e11ef/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=91772c35c83f369283838ab049712a5f746e11ef", "patch": "@@ -92,6 +92,7 @@\n #![feature(const_ptr_offset)]\n #![feature(const_ptr_offset_from)]\n #![feature(const_raw_ptr_comparison)]\n+#![feature(const_raw_ptr_deref)]\n #![feature(const_slice_from_raw_parts)]\n #![feature(const_slice_ptr_len)]\n #![feature(const_size_of_val)]"}, {"sha": "6251355b90999bc933a14675d1b257f045e08860", "filename": "library/core/src/mem/maybe_uninit.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/91772c35c83f369283838ab049712a5f746e11ef/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91772c35c83f369283838ab049712a5f746e11ef/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs?ref=91772c35c83f369283838ab049712a5f746e11ef", "patch": "@@ -813,8 +813,9 @@ impl<T> MaybeUninit<T> {\n     ///\n     /// [`assume_init_ref`]: MaybeUninit::assume_init_ref\n     #[unstable(feature = \"maybe_uninit_slice\", issue = \"63569\")]\n+    #[rustc_const_unstable(feature = \"const_maybe_assume_init\", issue = \"none\")]\n     #[inline(always)]\n-    pub unsafe fn slice_assume_init_ref(slice: &[Self]) -> &[T] {\n+    pub const unsafe fn slice_assume_init_ref(slice: &[Self]) -> &[T] {\n         // SAFETY: casting slice to a `*const [T]` is safe since the caller guarantees that\n         // `slice` is initialized, and`MaybeUninit` is guaranteed to have the same layout as `T`.\n         // The pointer obtained is valid since it refers to memory owned by `slice` which is a\n@@ -834,24 +835,27 @@ impl<T> MaybeUninit<T> {\n     ///\n     /// [`assume_init_mut`]: MaybeUninit::assume_init_mut\n     #[unstable(feature = \"maybe_uninit_slice\", issue = \"63569\")]\n+    #[rustc_const_unstable(feature = \"const_maybe_assume_init\", issue = \"none\")]\n     #[inline(always)]\n-    pub unsafe fn slice_assume_init_mut(slice: &mut [Self]) -> &mut [T] {\n+    pub const unsafe fn slice_assume_init_mut(slice: &mut [Self]) -> &mut [T] {\n         // SAFETY: similar to safety notes for `slice_get_ref`, but we have a\n         // mutable reference which is also guaranteed to be valid for writes.\n         unsafe { &mut *(slice as *mut [Self] as *mut [T]) }\n     }\n \n     /// Gets a pointer to the first element of the array.\n     #[unstable(feature = \"maybe_uninit_slice\", issue = \"63569\")]\n+    #[rustc_const_unstable(feature = \"const_maybe_assume_init\", issue = \"none\")]\n     #[inline(always)]\n-    pub fn slice_as_ptr(this: &[MaybeUninit<T>]) -> *const T {\n+    pub const fn slice_as_ptr(this: &[MaybeUninit<T>]) -> *const T {\n         this.as_ptr() as *const T\n     }\n \n     /// Gets a mutable pointer to the first element of the array.\n     #[unstable(feature = \"maybe_uninit_slice\", issue = \"63569\")]\n+    #[rustc_const_unstable(feature = \"const_maybe_assume_init\", issue = \"none\")]\n     #[inline(always)]\n-    pub fn slice_as_mut_ptr(this: &mut [MaybeUninit<T>]) -> *mut T {\n+    pub const fn slice_as_mut_ptr(this: &mut [MaybeUninit<T>]) -> *mut T {\n         this.as_mut_ptr() as *mut T\n     }\n }"}]}