{"sha": "964fc862e061a01a399c537bc36b076e672ffaa1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2NGZjODYyZTA2MWEwMWEzOTljNTM3YmMzNmIwNzZlNjcyZmZhYTE=", "commit": {"author": {"name": "Diggory Hardy", "email": "diggory.hardy@gmail.com", "date": "2013-04-04T16:13:12Z"}, "committer": {"name": "Diggory Hardy", "email": "diggory.hardy@gmail.com", "date": "2013-04-04T16:13:12Z"}, "message": "Tutorial: comment on how mutability applies to boxes", "tree": {"sha": "e8f3793be560c2f745968820755d46147d07d5f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8f3793be560c2f745968820755d46147d07d5f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/964fc862e061a01a399c537bc36b076e672ffaa1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/964fc862e061a01a399c537bc36b076e672ffaa1", "html_url": "https://github.com/rust-lang/rust/commit/964fc862e061a01a399c537bc36b076e672ffaa1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/964fc862e061a01a399c537bc36b076e672ffaa1/comments", "author": null, "committer": null, "parents": [{"sha": "cb91e914185f4be9073dcec9a96ca6b78b7e877f", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb91e914185f4be9073dcec9a96ca6b78b7e877f", "html_url": "https://github.com/rust-lang/rust/commit/cb91e914185f4be9073dcec9a96ca6b78b7e877f"}], "stats": {"total": 30, "additions": 30, "deletions": 0}, "files": [{"sha": "54340c0a4c10dd2fdc27d884960fbcc5d14d48fa", "filename": "doc/tutorial.md", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/964fc862e061a01a399c537bc36b076e672ffaa1/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/964fc862e061a01a399c537bc36b076e672ffaa1/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=964fc862e061a01a399c537bc36b076e672ffaa1", "patch": "@@ -1067,6 +1067,26 @@ let mut d = @mut 5; // mutable variable, mutable box\n d = @mut 15;\n ~~~~\n \n+A mutable variable and an immutable variable can refer to the same box, given \n+that their types are compatible. Mutability of a box is a property of its type, \n+however, so for example a mutable hande to an immutable box cannot be assigned \n+a reference to a mutable box.\n+\n+~~~~\n+let a = @1;     // immutable box\n+let b = @mut 2; // mutable box\n+\n+let mut c : @int;       // declare a variable with type managed immutable int\n+let mut d : @mut int;   // and one of type managed mutable int\n+\n+c = a;          // box type is the same\n+d = b;          // box type is the same\n+\n+// but b cannot be assigned to c, or a to d\n+c = b;          // error\n+~~~~\n+\n+\n # Move semantics\n \n Rust uses a shallow copy for parameter passing, assignment and returning values\n@@ -1081,6 +1101,16 @@ let y = x.clone(); // y is a newly allocated box\n let z = x; // no new memory allocated, x can no longer be used\n ~~~~\n \n+Since in owned boxes mutabilility is a property of the owner, not the \n+box, mutable boxes may become immutable when they are moved, and vice-versa.\n+\n+~~~~\n+let r = ~13;\n+let mut s = r; // box becomes mutable\n+*s += 1;\n+let t = s; // box becomes immutable\n+~~~~\n+\n # Borrowed pointers\n \n Rust's borrowed pointers are a general purpose reference type. In contrast with"}]}