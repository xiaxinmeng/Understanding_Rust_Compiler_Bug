{"sha": "ddf3c6de74e2ec991fa10ed627343bb1e865ed9c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkZjNjNmRlNzRlMmVjOTkxZmExMGVkNjI3MzQzYmIxZTg2NWVkOWM=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-19T23:44:33Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T21:01:26Z"}, "message": "librustc: Remove unused `TypeNames::find_name` function", "tree": {"sha": "491ffef924bad9fefdc5910d6b9bc192b5b5a828", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/491ffef924bad9fefdc5910d6b9bc192b5b5a828"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ddf3c6de74e2ec991fa10ed627343bb1e865ed9c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ddf3c6de74e2ec991fa10ed627343bb1e865ed9c", "html_url": "https://github.com/rust-lang/rust/commit/ddf3c6de74e2ec991fa10ed627343bb1e865ed9c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ddf3c6de74e2ec991fa10ed627343bb1e865ed9c/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "303a39477b3645e96c8e78e7eb077e31dca3b0f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/303a39477b3645e96c8e78e7eb077e31dca3b0f9", "html_url": "https://github.com/rust-lang/rust/commit/303a39477b3645e96c8e78e7eb077e31dca3b0f9"}], "stats": {"total": 7, "additions": 0, "deletions": 7}, "files": [{"sha": "711f6133b5de5c7fb46b7f1fe01b3b6dcfecfc9f", "filename": "src/librustc/lib/llvm.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ddf3c6de74e2ec991fa10ed627343bb1e865ed9c/src%2Flibrustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddf3c6de74e2ec991fa10ed627343bb1e865ed9c/src%2Flibrustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib%2Fllvm.rs?ref=ddf3c6de74e2ec991fa10ed627343bb1e865ed9c", "patch": "@@ -1821,13 +1821,6 @@ impl TypeNames {\n         assert!(self.named_types.insert(s.to_owned(), t.to_ref()));\n     }\n \n-    pub fn find_name<'r>(&'r self, ty: &Type) -> Option<&'r str> {\n-        match self.type_names.find(&ty.to_ref()) {\n-            Some(a) => Some(a.slice(0, a.len())),\n-            None => None\n-        }\n-    }\n-\n     pub fn find_type(&self, s: &str) -> Option<Type> {\n         self.named_types.find_equiv(&s).map(|x| Type::from_ref(*x))\n     }"}]}