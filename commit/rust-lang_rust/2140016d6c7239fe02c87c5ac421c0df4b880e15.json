{"sha": "2140016d6c7239fe02c87c5ac421c0df4b880e15", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxNDAwMTZkNmM3MjM5ZmUwMmM4N2M1YWM0MjFjMGRmNGI4ODBlMTU=", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2021-07-19T10:13:25Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2021-08-26T09:00:30Z"}, "message": "don't just compare `ty::Const`", "tree": {"sha": "7260639e926d47b0773743597ec375db4176baa3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7260639e926d47b0773743597ec375db4176baa3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2140016d6c7239fe02c87c5ac421c0df4b880e15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2140016d6c7239fe02c87c5ac421c0df4b880e15", "html_url": "https://github.com/rust-lang/rust/commit/2140016d6c7239fe02c87c5ac421c0df4b880e15", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2140016d6c7239fe02c87c5ac421c0df4b880e15/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab9108b70f25ecd9cce1ab756b82cb00de6c6927", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab9108b70f25ecd9cce1ab756b82cb00de6c6927", "html_url": "https://github.com/rust-lang/rust/commit/ab9108b70f25ecd9cce1ab756b82cb00de6c6927"}], "stats": {"total": 46, "additions": 46, "deletions": 0}, "files": [{"sha": "32308910aa7d9b4da96c8ae7a2edf80e6f874f79", "filename": "compiler/rustc_infer/src/infer/combine.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2140016d6c7239fe02c87c5ac421c0df4b880e15/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2140016d6c7239fe02c87c5ac421c0df4b880e15/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs?ref=2140016d6c7239fe02c87c5ac421c0df4b880e15", "patch": "@@ -129,6 +129,8 @@ impl<'infcx, 'tcx> InferCtxt<'infcx, 'tcx> {\n     where\n         R: ConstEquateRelation<'tcx>,\n     {\n+        let a = self.tcx.expose_default_const_substs(a);\n+        let b = self.tcx.expose_default_const_substs(b);\n         debug!(\"{}.consts({:?}, {:?})\", relation.tag(), a, b);\n         if a == b {\n             return Ok(a);"}, {"sha": "b249dc8d6f92f04f78dd9ca268298e3848760efb", "filename": "compiler/rustc_middle/src/ty/fold.rs", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/2140016d6c7239fe02c87c5ac421c0df4b880e15/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2140016d6c7239fe02c87c5ac421c0df4b880e15/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs?ref=2140016d6c7239fe02c87c5ac421c0df4b880e15", "patch": "@@ -213,6 +213,10 @@ pub trait TypeFolder<'tcx>: Sized {\n         c.super_fold_with(self)\n     }\n \n+    fn fold_predicate(&mut self, p: ty::Predicate<'tcx>) -> ty::Predicate<'tcx> {\n+        p.super_fold_with(self)\n+    }\n+\n     fn fold_mir_const(&mut self, c: mir::ConstantKind<'tcx>) -> mir::ConstantKind<'tcx> {\n         bug!(\"most type folders should not be folding MIR datastructures: {:?}\", c)\n     }\n@@ -1205,6 +1209,42 @@ impl<'tcx> TypeVisitor<'tcx> for HasTypeFlagsVisitor<'tcx> {\n     }\n }\n \n+impl<'tcx> TyCtxt<'tcx> {\n+    /// This is a HACK(const_generics) and should probably not be needed.\n+    /// Might however be perf relevant, so who knows.\n+    ///\n+    /// FIXME(@lcnr): explain this function a bit more\n+    pub fn expose_default_const_substs<T: TypeFoldable<'tcx>>(self, v: T) -> T {\n+        v.fold_with(&mut ExposeDefaultConstSubstsFolder { tcx: self })\n+    }\n+}\n+\n+struct ExposeDefaultConstSubstsFolder<'tcx> {\n+    tcx: TyCtxt<'tcx>,\n+}\n+\n+impl<'tcx> TypeFolder<'tcx> for ExposeDefaultConstSubstsFolder<'tcx> {\n+    fn tcx(&self) -> TyCtxt<'tcx> {\n+        self.tcx\n+    }\n+\n+    fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {\n+        if ty.flags().intersects(TypeFlags::HAS_UNKNOWN_DEFAULT_CONST_SUBSTS) {\n+            ty.super_fold_with(self)\n+        } else {\n+            ty\n+        }\n+    }\n+\n+    fn fold_predicate(&mut self, pred: ty::Predicate<'tcx>) -> ty::Predicate<'tcx> {\n+        if pred.inner.flags.intersects(TypeFlags::HAS_UNKNOWN_DEFAULT_CONST_SUBSTS) {\n+            pred.super_fold_with(self)\n+        } else {\n+            pred\n+        }\n+    }\n+}\n+\n /// Collects all the late-bound regions at the innermost binding level\n /// into a hash set.\n struct LateBoundRegionsCollector<'tcx> {"}, {"sha": "dcdea8025fa9ba04e16b2996cd3926e0b6c0c843", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2140016d6c7239fe02c87c5ac421c0df4b880e15/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2140016d6c7239fe02c87c5ac421c0df4b880e15/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=2140016d6c7239fe02c87c5ac421c0df4b880e15", "patch": "@@ -974,6 +974,10 @@ impl<'tcx> TypeFoldable<'tcx> for ty::Region<'tcx> {\n }\n \n impl<'tcx> TypeFoldable<'tcx> for ty::Predicate<'tcx> {\n+    fn fold_with<F: TypeFolder<'tcx>>(self, folder: &mut F) -> Self {\n+        folder.fold_predicate(self)\n+    }\n+\n     fn super_fold_with<F: TypeFolder<'tcx>>(self, folder: &mut F) -> Self {\n         let new = self.inner.kind.fold_with(folder);\n         folder.tcx().reuse_or_mk_predicate(self, new)"}]}