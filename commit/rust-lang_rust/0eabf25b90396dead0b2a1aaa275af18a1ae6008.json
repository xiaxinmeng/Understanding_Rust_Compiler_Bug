{"sha": "0eabf25b90396dead0b2a1aaa275af18a1ae6008", "node_id": "C_kwDOAAsO6NoAKDBlYWJmMjViOTAzOTZkZWFkMGIyYTFhYWEyNzVhZjE4YTFhZTYwMDg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-06T20:17:28Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-06T20:17:28Z"}, "message": "Auto merge of #89608 - Manishearth:rollup-m7kd76f, r=Manishearth\n\nRollup of 12 pull requests\n\nSuccessful merges:\n\n - #87601 (Add functions to add unsigned and signed integers)\n - #88523 (Expand documentation for `FpCategory`.)\n - #89050 (refactor: VecDeques Drain fields to private)\n - #89245 (refactor: make VecDeque's IterMut fields module-private, not just crate-private)\n - #89324 (Rename `std::thread::available_conccurrency` to `std::thread::available_parallelism`)\n - #89329 (print-type-sizes: skip field printing for primitives)\n - #89501 (Note specific regions involved in 'borrowed data escapes' error)\n - #89506 (librustdoc: Use correct heading levels.)\n - #89528 (Fix suggestion to borrow when casting from pointer to reference)\n - #89531 (library std, libc dependency update)\n - #89588 (Add a test for generic_const_exprs)\n - #89591 (fix: alloc-optimisation is only for rust llvm)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "7ce2589de14b749b44e1db96f5df0588cc1536ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ce2589de14b749b44e1db96f5df0588cc1536ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0eabf25b90396dead0b2a1aaa275af18a1ae6008", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0eabf25b90396dead0b2a1aaa275af18a1ae6008", "html_url": "https://github.com/rust-lang/rust/commit/0eabf25b90396dead0b2a1aaa275af18a1ae6008", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0eabf25b90396dead0b2a1aaa275af18a1ae6008/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d480ceff384f80394e9367b5e9d3596d62f20585", "url": "https://api.github.com/repos/rust-lang/rust/commits/d480ceff384f80394e9367b5e9d3596d62f20585", "html_url": "https://github.com/rust-lang/rust/commit/d480ceff384f80394e9367b5e9d3596d62f20585"}, {"sha": "f31c805038652fd820c0b10502e97472b83151bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/f31c805038652fd820c0b10502e97472b83151bb", "html_url": "https://github.com/rust-lang/rust/commit/f31c805038652fd820c0b10502e97472b83151bb"}], "stats": {"total": 1233, "additions": 984, "deletions": 249}, "files": [{"sha": "197b2c8f3f06a2cf32f7d22e78b3fd870d00c7b9", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0eabf25b90396dead0b2a1aaa275af18a1ae6008/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/0eabf25b90396dead0b2a1aaa275af18a1ae6008/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=0eabf25b90396dead0b2a1aaa275af18a1ae6008", "patch": "@@ -1879,9 +1879,9 @@ checksum = \"830d08ce1d1d941e6b30645f1a0eb5643013d835ce3779a5fc208261dbe10f55\"\n \n [[package]]\n name = \"libc\"\n-version = \"0.2.99\"\n+version = \"0.2.103\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"a7f823d141fe0a24df1e23b4af4e3c7ba9e5966ec514ea068c93024aa7deb765\"\n+checksum = \"dd8f7255a17a627354f321ef0055d63b898c6fb27eff628af4d1b66b7331edf6\"\n dependencies = [\n  \"rustc-std-workspace-core\",\n ]"}, {"sha": "11cdbe84accb7a2c4e4f4bcbd76d9f2830154678", "filename": "compiler/rustc_borrowck/src/diagnostics/region_errors.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/0eabf25b90396dead0b2a1aaa275af18a1ae6008/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0eabf25b90396dead0b2a1aaa275af18a1ae6008/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs?ref=0eabf25b90396dead0b2a1aaa275af18a1ae6008", "patch": "@@ -498,6 +498,27 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n             diag.span_label(*span, format!(\"`{}` escapes the {} body here\", fr_name, escapes_from));\n         }\n \n+        // Only show an extra note if we can find an 'error region' for both of the region\n+        // variables. This avoids showing a noisy note that just mentions 'synthetic' regions\n+        // that don't help the user understand the error.\n+        if self.to_error_region(errci.fr).is_some()\n+            && self.to_error_region(errci.outlived_fr).is_some()\n+        {\n+            let fr_region_name = self.give_region_a_name(errci.fr).unwrap();\n+            fr_region_name.highlight_region_name(&mut diag);\n+            let outlived_fr_region_name = self.give_region_a_name(errci.outlived_fr).unwrap();\n+            outlived_fr_region_name.highlight_region_name(&mut diag);\n+\n+            diag.span_label(\n+                *span,\n+                format!(\n+                    \"{}requires that `{}` must outlive `{}`\",\n+                    category.description(),\n+                    fr_region_name,\n+                    outlived_fr_region_name,\n+                ),\n+            );\n+        }\n         diag\n     }\n "}, {"sha": "fee13fd2e2eaff797bcd0c85967a06654c395c06", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0eabf25b90396dead0b2a1aaa275af18a1ae6008/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0eabf25b90396dead0b2a1aaa275af18a1ae6008/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=0eabf25b90396dead0b2a1aaa275af18a1ae6008", "patch": "@@ -1826,8 +1826,11 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n \n         match layout.variants {\n             Variants::Single { index } => {\n-                debug!(\"print-type-size `{:#?}` variant {}\", layout, adt_def.variants[index].ident);\n-                if !adt_def.variants.is_empty() {\n+                if !adt_def.variants.is_empty() && layout.fields != FieldsShape::Primitive {\n+                    debug!(\n+                        \"print-type-size `{:#?}` variant {}\",\n+                        layout, adt_def.variants[index].ident\n+                    );\n                     let variant_def = &adt_def.variants[index];\n                     let fields: Vec<_> = variant_def.fields.iter().map(|f| f.ident.name).collect();\n                     record("}, {"sha": "51c766fe57c104ea907074397984428291a952aa", "filename": "compiler/rustc_typeck/src/check/cast.rs", "status": "modified", "additions": 36, "deletions": 8, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/0eabf25b90396dead0b2a1aaa275af18a1ae6008/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0eabf25b90396dead0b2a1aaa275af18a1ae6008/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs?ref=0eabf25b90396dead0b2a1aaa275af18a1ae6008", "patch": "@@ -351,7 +351,7 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n                 );\n                 let mut sugg = None;\n                 let mut sugg_mutref = false;\n-                if let ty::Ref(reg, _, mutbl) = *self.cast_ty.kind() {\n+                if let ty::Ref(reg, cast_ty, mutbl) = *self.cast_ty.kind() {\n                     if let ty::RawPtr(TypeAndMut { ty: expr_ty, .. }) = *self.expr_ty.kind() {\n                         if fcx\n                             .try_coerce(\n@@ -366,7 +366,7 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n                             )\n                             .is_ok()\n                         {\n-                            sugg = Some(format!(\"&{}*\", mutbl.prefix_str()));\n+                            sugg = Some((format!(\"&{}*\", mutbl.prefix_str()), cast_ty == expr_ty));\n                         }\n                     } else if let ty::Ref(expr_reg, expr_ty, expr_mutbl) = *self.expr_ty.kind() {\n                         if expr_mutbl == Mutability::Not\n@@ -400,7 +400,7 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n                             )\n                             .is_ok()\n                     {\n-                        sugg = Some(format!(\"&{}\", mutbl.prefix_str()));\n+                        sugg = Some((format!(\"&{}\", mutbl.prefix_str()), false));\n                     }\n                 } else if let ty::RawPtr(TypeAndMut { mutbl, .. }) = *self.cast_ty.kind() {\n                     if fcx\n@@ -416,19 +416,47 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n                         )\n                         .is_ok()\n                     {\n-                        sugg = Some(format!(\"&{}\", mutbl.prefix_str()));\n+                        sugg = Some((format!(\"&{}\", mutbl.prefix_str()), false));\n                     }\n                 }\n                 if sugg_mutref {\n                     err.span_label(self.span, \"invalid cast\");\n                     err.span_note(self.expr.span, \"this reference is immutable\");\n                     err.span_note(self.cast_span, \"trying to cast to a mutable reference type\");\n-                } else if let Some(sugg) = sugg {\n+                } else if let Some((sugg, remove_cast)) = sugg {\n                     err.span_label(self.span, \"invalid cast\");\n-                    err.span_suggestion_verbose(\n-                        self.expr.span.shrink_to_lo(),\n+\n+                    let has_parens = fcx\n+                        .tcx\n+                        .sess\n+                        .source_map()\n+                        .span_to_snippet(self.expr.span)\n+                        .map_or(false, |snip| snip.starts_with(\"(\"));\n+\n+                    // Very crude check to see whether the expression must be wrapped\n+                    // in parentheses for the suggestion to work (issue #89497).\n+                    // Can/should be extended in the future.\n+                    let needs_parens = !has_parens\n+                        && match self.expr.kind {\n+                            hir::ExprKind::Cast(..) => true,\n+                            _ => false,\n+                        };\n+\n+                    let mut suggestion = vec![(self.expr.span.shrink_to_lo(), sugg)];\n+                    if needs_parens {\n+                        suggestion[0].1 += \"(\";\n+                        suggestion.push((self.expr.span.shrink_to_hi(), \")\".to_string()));\n+                    }\n+                    if remove_cast {\n+                        suggestion.push((\n+                            self.expr.span.shrink_to_hi().to(self.cast_span),\n+                            String::new(),\n+                        ));\n+                    }\n+\n+                    err.multipart_suggestion_verbose(\n                         \"consider borrowing the value\",\n-                        sugg,\n+                        suggestion,\n                         Applicability::MachineApplicable,\n                     );\n                 } else if !matches!("}, {"sha": "05f94da6de70d796d077e22d3b4f6509b39cea25", "filename": "library/alloc/src/collections/vec_deque/drain.rs", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0eabf25b90396dead0b2a1aaa275af18a1ae6008/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fdrain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0eabf25b90396dead0b2a1aaa275af18a1ae6008/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fdrain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fdrain.rs?ref=0eabf25b90396dead0b2a1aaa275af18a1ae6008", "patch": "@@ -18,10 +18,21 @@ pub struct Drain<\n     T: 'a,\n     #[unstable(feature = \"allocator_api\", issue = \"32838\")] A: Allocator = Global,\n > {\n-    pub(crate) after_tail: usize,\n-    pub(crate) after_head: usize,\n-    pub(crate) iter: Iter<'a, T>,\n-    pub(crate) deque: NonNull<VecDeque<T, A>>,\n+    after_tail: usize,\n+    after_head: usize,\n+    iter: Iter<'a, T>,\n+    deque: NonNull<VecDeque<T, A>>,\n+}\n+\n+impl<'a, T, A: Allocator> Drain<'a, T, A> {\n+    pub(super) unsafe fn new(\n+        after_tail: usize,\n+        after_head: usize,\n+        iter: Iter<'a, T>,\n+        deque: NonNull<VecDeque<T, A>>,\n+    ) -> Self {\n+        Drain { after_tail, after_head, iter, deque }\n+    }\n }\n \n #[stable(feature = \"collection_debug\", since = \"1.17.0\")]"}, {"sha": "31e6e3b06af5fdd1e7e27ee88b013db480d0283d", "filename": "library/alloc/src/collections/vec_deque/iter_mut.rs", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0eabf25b90396dead0b2a1aaa275af18a1ae6008/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fiter_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0eabf25b90396dead0b2a1aaa275af18a1ae6008/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fiter_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fiter_mut.rs?ref=0eabf25b90396dead0b2a1aaa275af18a1ae6008", "patch": "@@ -13,10 +13,21 @@ use super::{count, wrap_index, RingSlices};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct IterMut<'a, T: 'a> {\n     // Internal safety invariant: the entire slice is dereferencable.\n-    pub(crate) ring: *mut [T],\n-    pub(crate) tail: usize,\n-    pub(crate) head: usize,\n-    pub(crate) phantom: PhantomData<&'a mut [T]>,\n+    ring: *mut [T],\n+    tail: usize,\n+    head: usize,\n+    phantom: PhantomData<&'a mut [T]>,\n+}\n+\n+impl<'a, T> IterMut<'a, T> {\n+    pub(super) unsafe fn new(\n+        ring: *mut [T],\n+        tail: usize,\n+        head: usize,\n+        phantom: PhantomData<&'a mut [T]>,\n+    ) -> Self {\n+        IterMut { ring, tail, head, phantom }\n+    }\n }\n \n // SAFETY: we do nothing thread-local and there is no interior mutability,"}, {"sha": "e996784bbad284c6114ddb0c02eaf642ff854df2", "filename": "library/alloc/src/collections/vec_deque/mod.rs", "status": "modified", "additions": 17, "deletions": 25, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/0eabf25b90396dead0b2a1aaa275af18a1ae6008/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0eabf25b90396dead0b2a1aaa275af18a1ae6008/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs?ref=0eabf25b90396dead0b2a1aaa275af18a1ae6008", "patch": "@@ -1000,12 +1000,9 @@ impl<T, A: Allocator> VecDeque<T, A> {\n     pub fn iter_mut(&mut self) -> IterMut<'_, T> {\n         // SAFETY: The internal `IterMut` safety invariant is established because the\n         // `ring` we create is a dereferencable slice for lifetime '_.\n-        IterMut {\n-            tail: self.tail,\n-            head: self.head,\n-            ring: ptr::slice_from_raw_parts_mut(self.ptr(), self.cap()),\n-            phantom: PhantomData,\n-        }\n+        let ring = ptr::slice_from_raw_parts_mut(self.ptr(), self.cap());\n+\n+        unsafe { IterMut::new(ring, self.tail, self.head, PhantomData) }\n     }\n \n     /// Returns a pair of slices which contain, in order, the contents of the\n@@ -1192,12 +1189,9 @@ impl<T, A: Allocator> VecDeque<T, A> {\n \n         // SAFETY: The internal `IterMut` safety invariant is established because the\n         // `ring` we create is a dereferencable slice for lifetime '_.\n-        IterMut {\n-            tail,\n-            head,\n-            ring: ptr::slice_from_raw_parts_mut(self.ptr(), self.cap()),\n-            phantom: PhantomData,\n-        }\n+        let ring = ptr::slice_from_raw_parts_mut(self.ptr(), self.cap());\n+\n+        unsafe { IterMut::new(ring, tail, head, PhantomData) }\n     }\n \n     /// Creates a draining iterator that removes the specified range in the\n@@ -1269,19 +1263,17 @@ impl<T, A: Allocator> VecDeque<T, A> {\n         // the drain is complete and the Drain destructor is run.\n         self.head = drain_tail;\n \n-        Drain {\n-            deque: NonNull::from(&mut *self),\n-            after_tail: drain_head,\n-            after_head: head,\n-            iter: Iter {\n-                tail: drain_tail,\n-                head: drain_head,\n-                // Crucially, we only create shared references from `self` here and read from\n-                // it.  We do not write to `self` nor reborrow to a mutable reference.\n-                // Hence the raw pointer we created above, for `deque`, remains valid.\n-                ring: unsafe { self.buffer_as_slice() },\n-            },\n-        }\n+        let deque = NonNull::from(&mut *self);\n+        let iter = Iter {\n+            tail: drain_tail,\n+            head: drain_head,\n+            // Crucially, we only create shared references from `self` here and read from\n+            // it.  We do not write to `self` nor reborrow to a mutable reference.\n+            // Hence the raw pointer we created above, for `deque`, remains valid.\n+            ring: unsafe { self.buffer_as_slice() },\n+        };\n+\n+        unsafe { Drain::new(drain_head, head, iter, deque) }\n     }\n \n     /// Clears the `VecDeque`, removing all values."}, {"sha": "f9d517ce8c0eb52beae244452b9f1069cdbfb84e", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0eabf25b90396dead0b2a1aaa275af18a1ae6008/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0eabf25b90396dead0b2a1aaa275af18a1ae6008/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=0eabf25b90396dead0b2a1aaa275af18a1ae6008", "patch": "@@ -142,6 +142,7 @@\n #![feature(link_llvm_intrinsics)]\n #![feature(llvm_asm)]\n #![feature(min_specialization)]\n+#![feature(mixed_integer_ops)]\n #![cfg_attr(not(bootstrap), feature(must_not_suspend))]\n #![feature(negative_impls)]\n #![feature(never_type)]"}, {"sha": "12dda61400f2a62ccd816e9c9b2bb9abba0ce7fe", "filename": "library/core/src/num/int_macros.rs", "status": "modified", "additions": 192, "deletions": 0, "changes": 192, "blob_url": "https://github.com/rust-lang/rust/blob/0eabf25b90396dead0b2a1aaa275af18a1ae6008/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0eabf25b90396dead0b2a1aaa275af18a1ae6008/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs?ref=0eabf25b90396dead0b2a1aaa275af18a1ae6008", "patch": "@@ -433,6 +433,28 @@ macro_rules! int_impl {\n             unsafe { intrinsics::unchecked_add(self, rhs) }\n         }\n \n+        /// Checked addition with an unsigned integer. Computes `self + rhs`,\n+        /// returning `None` if overflow occurred.\n+        ///\n+        /// # Examples\n+        ///\n+        /// Basic usage:\n+        ///\n+        /// ```\n+        /// # #![feature(mixed_integer_ops)]\n+        #[doc = concat!(\"assert_eq!(1\", stringify!($SelfT), \".checked_add_unsigned(2), Some(3));\")]\n+        #[doc = concat!(\"assert_eq!((\", stringify!($SelfT), \"::MAX - 2).checked_add_unsigned(3), None);\")]\n+        /// ```\n+        #[unstable(feature = \"mixed_integer_ops\", issue = \"87840\")]\n+        #[rustc_const_unstable(feature = \"mixed_integer_ops\", issue = \"87840\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n+        #[inline]\n+        pub const fn checked_add_unsigned(self, rhs: $UnsignedT) -> Option<Self> {\n+            let (a, b) = self.overflowing_add_unsigned(rhs);\n+            if unlikely!(b) {None} else {Some(a)}\n+        }\n+\n         /// Checked integer subtraction. Computes `self - rhs`, returning `None` if\n         /// overflow occurred.\n         ///\n@@ -479,6 +501,28 @@ macro_rules! int_impl {\n             unsafe { intrinsics::unchecked_sub(self, rhs) }\n         }\n \n+        /// Checked subtraction with an unsigned integer. Computes `self - rhs`,\n+        /// returning `None` if overflow occurred.\n+        ///\n+        /// # Examples\n+        ///\n+        /// Basic usage:\n+        ///\n+        /// ```\n+        /// # #![feature(mixed_integer_ops)]\n+        #[doc = concat!(\"assert_eq!(1\", stringify!($SelfT), \".checked_sub_unsigned(2), Some(-1));\")]\n+        #[doc = concat!(\"assert_eq!((\", stringify!($SelfT), \"::MIN + 2).checked_sub_unsigned(3), None);\")]\n+        /// ```\n+        #[unstable(feature = \"mixed_integer_ops\", issue = \"87840\")]\n+        #[rustc_const_unstable(feature = \"mixed_integer_ops\", issue = \"87840\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n+        #[inline]\n+        pub const fn checked_sub_unsigned(self, rhs: $UnsignedT) -> Option<Self> {\n+            let (a, b) = self.overflowing_sub_unsigned(rhs);\n+            if unlikely!(b) {None} else {Some(a)}\n+        }\n+\n         /// Checked integer multiplication. Computes `self * rhs`, returning `None` if\n         /// overflow occurred.\n         ///\n@@ -826,6 +870,32 @@ macro_rules! int_impl {\n             intrinsics::saturating_add(self, rhs)\n         }\n \n+        /// Saturating addition with an unsigned integer. Computes `self + rhs`,\n+        /// saturating at the numeric bounds instead of overflowing.\n+        ///\n+        /// # Examples\n+        ///\n+        /// Basic usage:\n+        ///\n+        /// ```\n+        /// # #![feature(mixed_integer_ops)]\n+        #[doc = concat!(\"assert_eq!(1\", stringify!($SelfT), \".saturating_add_unsigned(2), 3);\")]\n+        #[doc = concat!(\"assert_eq!(\", stringify!($SelfT), \"::MAX.saturating_add_unsigned(100), \", stringify!($SelfT), \"::MAX);\")]\n+        /// ```\n+        #[unstable(feature = \"mixed_integer_ops\", issue = \"87840\")]\n+        #[rustc_const_unstable(feature = \"mixed_integer_ops\", issue = \"87840\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n+        #[inline]\n+        pub const fn saturating_add_unsigned(self, rhs: $UnsignedT) -> Self {\n+            // Overflow can only happen at the upper bound\n+            // We cannot use `unwrap_or` here because it is not `const`\n+            match self.checked_add_unsigned(rhs) {\n+                Some(x) => x,\n+                None => Self::MAX,\n+            }\n+        }\n+\n         /// Saturating integer subtraction. Computes `self - rhs`, saturating at the\n         /// numeric bounds instead of overflowing.\n         ///\n@@ -847,6 +917,32 @@ macro_rules! int_impl {\n             intrinsics::saturating_sub(self, rhs)\n         }\n \n+        /// Saturating subtraction with an unsigned integer. Computes `self - rhs`,\n+        /// saturating at the numeric bounds instead of overflowing.\n+        ///\n+        /// # Examples\n+        ///\n+        /// Basic usage:\n+        ///\n+        /// ```\n+        /// # #![feature(mixed_integer_ops)]\n+        #[doc = concat!(\"assert_eq!(100\", stringify!($SelfT), \".saturating_sub_unsigned(127), -27);\")]\n+        #[doc = concat!(\"assert_eq!(\", stringify!($SelfT), \"::MIN.saturating_sub_unsigned(100), \", stringify!($SelfT), \"::MIN);\")]\n+        /// ```\n+        #[unstable(feature = \"mixed_integer_ops\", issue = \"87840\")]\n+        #[rustc_const_unstable(feature = \"mixed_integer_ops\", issue = \"87840\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n+        #[inline]\n+        pub const fn saturating_sub_unsigned(self, rhs: $UnsignedT) -> Self {\n+            // Overflow can only happen at the lower bound\n+            // We cannot use `unwrap_or` here because it is not `const`\n+            match self.checked_sub_unsigned(rhs) {\n+                Some(x) => x,\n+                None => Self::MIN,\n+            }\n+        }\n+\n         /// Saturating integer negation. Computes `-self`, returning `MAX` if `self == MIN`\n         /// instead of overflowing.\n         ///\n@@ -1002,6 +1098,27 @@ macro_rules! int_impl {\n             intrinsics::wrapping_add(self, rhs)\n         }\n \n+        /// Wrapping (modular) addition with an unsigned integer. Computes\n+        /// `self + rhs`, wrapping around at the boundary of the type.\n+        ///\n+        /// # Examples\n+        ///\n+        /// Basic usage:\n+        ///\n+        /// ```\n+        /// # #![feature(mixed_integer_ops)]\n+        #[doc = concat!(\"assert_eq!(100\", stringify!($SelfT), \".wrapping_add_unsigned(27), 127);\")]\n+        #[doc = concat!(\"assert_eq!(\", stringify!($SelfT), \"::MAX.wrapping_add_unsigned(2), \", stringify!($SelfT), \"::MIN + 1);\")]\n+        /// ```\n+        #[unstable(feature = \"mixed_integer_ops\", issue = \"87840\")]\n+        #[rustc_const_unstable(feature = \"mixed_integer_ops\", issue = \"87840\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n+        #[inline(always)]\n+        pub const fn wrapping_add_unsigned(self, rhs: $UnsignedT) -> Self {\n+            self.wrapping_add(rhs as Self)\n+        }\n+\n         /// Wrapping (modular) subtraction. Computes `self - rhs`, wrapping around at the\n         /// boundary of the type.\n         ///\n@@ -1022,6 +1139,27 @@ macro_rules! int_impl {\n             intrinsics::wrapping_sub(self, rhs)\n         }\n \n+        /// Wrapping (modular) subtraction with an unsigned integer. Computes\n+        /// `self - rhs`, wrapping around at the boundary of the type.\n+        ///\n+        /// # Examples\n+        ///\n+        /// Basic usage:\n+        ///\n+        /// ```\n+        /// # #![feature(mixed_integer_ops)]\n+        #[doc = concat!(\"assert_eq!(0\", stringify!($SelfT), \".wrapping_sub_unsigned(127), -127);\")]\n+        #[doc = concat!(\"assert_eq!((-2\", stringify!($SelfT), \").wrapping_sub_unsigned(\", stringify!($UnsignedT), \"::MAX), -1);\")]\n+        /// ```\n+        #[unstable(feature = \"mixed_integer_ops\", issue = \"87840\")]\n+        #[rustc_const_unstable(feature = \"mixed_integer_ops\", issue = \"87840\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n+        #[inline(always)]\n+        pub const fn wrapping_sub_unsigned(self, rhs: $UnsignedT) -> Self {\n+            self.wrapping_sub(rhs as Self)\n+        }\n+\n         /// Wrapping (modular) multiplication. Computes `self * rhs`, wrapping around at\n         /// the boundary of the type.\n         ///\n@@ -1372,6 +1510,33 @@ macro_rules! int_impl {\n             (sum as $SelfT, carry)\n         }\n \n+        /// Calculates `self` + `rhs` with an unsigned `rhs`\n+        ///\n+        /// Returns a tuple of the addition along with a boolean indicating\n+        /// whether an arithmetic overflow would occur. If an overflow would\n+        /// have occurred then the wrapped value is returned.\n+        ///\n+        /// # Examples\n+        ///\n+        /// Basic usage:\n+        ///\n+        /// ```\n+        /// # #![feature(mixed_integer_ops)]\n+        #[doc = concat!(\"assert_eq!(1\", stringify!($SelfT), \".overflowing_add_unsigned(2), (3, false));\")]\n+        #[doc = concat!(\"assert_eq!((\", stringify!($SelfT), \"::MIN).overflowing_add_unsigned(\", stringify!($UnsignedT), \"::MAX), (\", stringify!($SelfT), \"::MAX, false));\")]\n+        #[doc = concat!(\"assert_eq!((\", stringify!($SelfT), \"::MAX - 2).overflowing_add_unsigned(3), (\", stringify!($SelfT), \"::MIN, true));\")]\n+        /// ```\n+        #[unstable(feature = \"mixed_integer_ops\", issue = \"87840\")]\n+        #[rustc_const_unstable(feature = \"mixed_integer_ops\", issue = \"87840\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n+        #[inline]\n+        pub const fn overflowing_add_unsigned(self, rhs: $UnsignedT) -> (Self, bool) {\n+            let rhs = rhs as Self;\n+            let (res, overflowed) = self.overflowing_add(rhs);\n+            (res, overflowed ^ (rhs < 0))\n+        }\n+\n         /// Calculates `self` - `rhs`\n         ///\n         /// Returns a tuple of the subtraction along with a boolean indicating whether an arithmetic overflow\n@@ -1423,6 +1588,33 @@ macro_rules! int_impl {\n             (sum as $SelfT, borrow)\n         }\n \n+        /// Calculates `self` - `rhs` with an unsigned `rhs`\n+        ///\n+        /// Returns a tuple of the subtraction along with a boolean indicating\n+        /// whether an arithmetic overflow would occur. If an overflow would\n+        /// have occurred then the wrapped value is returned.\n+        ///\n+        /// # Examples\n+        ///\n+        /// Basic usage:\n+        ///\n+        /// ```\n+        /// # #![feature(mixed_integer_ops)]\n+        #[doc = concat!(\"assert_eq!(1\", stringify!($SelfT), \".overflowing_sub_unsigned(2), (-1, false));\")]\n+        #[doc = concat!(\"assert_eq!((\", stringify!($SelfT), \"::MAX).overflowing_sub_unsigned(\", stringify!($UnsignedT), \"::MAX), (\", stringify!($SelfT), \"::MIN, false));\")]\n+        #[doc = concat!(\"assert_eq!((\", stringify!($SelfT), \"::MIN + 2).overflowing_sub_unsigned(3), (\", stringify!($SelfT), \"::MAX, true));\")]\n+        /// ```\n+        #[unstable(feature = \"mixed_integer_ops\", issue = \"87840\")]\n+        #[rustc_const_unstable(feature = \"mixed_integer_ops\", issue = \"87840\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n+        #[inline]\n+        pub const fn overflowing_sub_unsigned(self, rhs: $UnsignedT) -> (Self, bool) {\n+            let rhs = rhs as Self;\n+            let (res, overflowed) = self.overflowing_sub(rhs);\n+            (res, overflowed ^ (rhs < 0))\n+        }\n+\n         /// Calculates the multiplication of `self` and `rhs`.\n         ///\n         /// Returns a tuple of the multiplication along with a boolean indicating whether an arithmetic overflow"}, {"sha": "d5fb98eff575ddbf4f2605f3a86038825a57eb76", "filename": "library/core/src/num/mod.rs", "status": "modified", "additions": 30, "deletions": 12, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/0eabf25b90396dead0b2a1aaa275af18a1ae6008/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0eabf25b90396dead0b2a1aaa275af18a1ae6008/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs?ref=0eabf25b90396dead0b2a1aaa275af18a1ae6008", "patch": "@@ -245,7 +245,7 @@ const ASCII_CASE_MASK: u8 = 0b0010_0000;\n #[lang = \"u8\"]\n impl u8 {\n     widening_impl! { u8, u16, 8 }\n-    uint_impl! { u8, u8, 8, 255, 2, \"0x82\", \"0xa\", \"0x12\", \"0x12\", \"0x48\", \"[0x12]\",\n+    uint_impl! { u8, u8, i8, 8, 255, 2, \"0x82\", \"0xa\", \"0x12\", \"0x12\", \"0x48\", \"[0x12]\",\n     \"[0x12]\", \"\", \"\" }\n \n     /// Checks if the value is within the ASCII range.\n@@ -779,21 +779,21 @@ impl u8 {\n #[lang = \"u16\"]\n impl u16 {\n     widening_impl! { u16, u32, 16 }\n-    uint_impl! { u16, u16, 16, 65535, 4, \"0xa003\", \"0x3a\", \"0x1234\", \"0x3412\", \"0x2c48\",\n+    uint_impl! { u16, u16, i16, 16, 65535, 4, \"0xa003\", \"0x3a\", \"0x1234\", \"0x3412\", \"0x2c48\",\n     \"[0x34, 0x12]\", \"[0x12, 0x34]\", \"\", \"\" }\n }\n \n #[lang = \"u32\"]\n impl u32 {\n     widening_impl! { u32, u64, 32 }\n-    uint_impl! { u32, u32, 32, 4294967295, 8, \"0x10000b3\", \"0xb301\", \"0x12345678\",\n+    uint_impl! { u32, u32, i32, 32, 4294967295, 8, \"0x10000b3\", \"0xb301\", \"0x12345678\",\n     \"0x78563412\", \"0x1e6a2c48\", \"[0x78, 0x56, 0x34, 0x12]\", \"[0x12, 0x34, 0x56, 0x78]\", \"\", \"\" }\n }\n \n #[lang = \"u64\"]\n impl u64 {\n     widening_impl! { u64, u128, 64 }\n-    uint_impl! { u64, u64, 64, 18446744073709551615, 12, \"0xaa00000000006e1\", \"0x6e10aa\",\n+    uint_impl! { u64, u64, i64, 64, 18446744073709551615, 12, \"0xaa00000000006e1\", \"0x6e10aa\",\n     \"0x1234567890123456\", \"0x5634129078563412\", \"0x6a2c48091e6a2c48\",\n     \"[0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12]\",\n     \"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56]\",\n@@ -802,7 +802,7 @@ impl u64 {\n \n #[lang = \"u128\"]\n impl u128 {\n-    uint_impl! { u128, u128, 128, 340282366920938463463374607431768211455, 16,\n+    uint_impl! { u128, u128, i128, 128, 340282366920938463463374607431768211455, 16,\n     \"0x13f40000000000000000000000004f76\", \"0x4f7613f4\", \"0x12345678901234567890123456789012\",\n     \"0x12907856341290785634129078563412\", \"0x48091e6a2c48091e6a2c48091e6a2c48\",\n     \"[0x12, 0x90, 0x78, 0x56, 0x34, 0x12, 0x90, 0x78, \\\n@@ -816,15 +816,15 @@ impl u128 {\n #[lang = \"usize\"]\n impl usize {\n     widening_impl! { usize, u32, 16 }\n-    uint_impl! { usize, u16, 16, 65535, 4, \"0xa003\", \"0x3a\", \"0x1234\", \"0x3412\", \"0x2c48\",\n+    uint_impl! { usize, u16, isize, 16, 65535, 4, \"0xa003\", \"0x3a\", \"0x1234\", \"0x3412\", \"0x2c48\",\n     \"[0x34, 0x12]\", \"[0x12, 0x34]\",\n     usize_isize_to_xe_bytes_doc!(), usize_isize_from_xe_bytes_doc!() }\n }\n #[cfg(target_pointer_width = \"32\")]\n #[lang = \"usize\"]\n impl usize {\n     widening_impl! { usize, u64, 32 }\n-    uint_impl! { usize, u32, 32, 4294967295, 8, \"0x10000b3\", \"0xb301\", \"0x12345678\",\n+    uint_impl! { usize, u32, isize, 32, 4294967295, 8, \"0x10000b3\", \"0xb301\", \"0x12345678\",\n     \"0x78563412\", \"0x1e6a2c48\", \"[0x78, 0x56, 0x34, 0x12]\", \"[0x12, 0x34, 0x56, 0x78]\",\n     usize_isize_to_xe_bytes_doc!(), usize_isize_from_xe_bytes_doc!() }\n }\n@@ -833,7 +833,7 @@ impl usize {\n #[lang = \"usize\"]\n impl usize {\n     widening_impl! { usize, u128, 64 }\n-    uint_impl! { usize, u64, 64, 18446744073709551615, 12, \"0xaa00000000006e1\", \"0x6e10aa\",\n+    uint_impl! { usize, u64, isize, 64, 18446744073709551615, 12, \"0xaa00000000006e1\", \"0x6e10aa\",\n     \"0x1234567890123456\", \"0x5634129078563412\", \"0x6a2c48091e6a2c48\",\n     \"[0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12]\",\n      \"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56]\",\n@@ -865,23 +865,41 @@ impl usize {\n #[derive(Copy, Clone, PartialEq, Eq, Debug)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub enum FpCategory {\n-    /// \"Not a Number\", often obtained by dividing by zero.\n+    /// NaN (not a number): this value results from calculations like `(-1.0).sqrt()`.\n+    ///\n+    /// See [the documentation for `f32`](f32) for more information on the unusual properties\n+    /// of NaN.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     Nan,\n \n-    /// Positive or negative infinity.\n+    /// Positive or negative infinity, which often results from dividing a nonzero number\n+    /// by zero.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     Infinite,\n \n     /// Positive or negative zero.\n+    ///\n+    /// See [the documentation for `f32`](f32) for more information on the signedness of zeroes.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     Zero,\n \n-    /// De-normalized floating point representation (less precise than `Normal`).\n+    /// \u201cSubnormal\u201d or \u201cdenormal\u201d floating point representation (less precise, relative to\n+    /// their magnitude, than [`Normal`]).\n+    ///\n+    /// Subnormal numbers are larger in magnitude than [`Zero`] but smaller in magnitude than all\n+    /// [`Normal`] numbers.\n+    ///\n+    /// [`Normal`]: Self::Normal\n+    /// [`Zero`]: Self::Zero\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     Subnormal,\n \n-    /// A regular floating point number.\n+    /// A regular floating point number, not any of the exceptional categories.\n+    ///\n+    /// The smallest positive normal numbers are [`f32::MIN_POSITIVE`] and [`f64::MIN_POSITIVE`],\n+    /// and the largest positive normal numbers are [`f32::MAX`] and [`f64::MAX`]. (Unlike signed\n+    /// integers, floating point numbers are symmetric in their range, so negating any of these\n+    /// constants will produce their negative counterpart.)\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     Normal,\n }"}, {"sha": "25cd582bb67d7a3fd98087fa3f2cd417080b2f9e", "filename": "library/core/src/num/uint_macros.rs", "status": "modified", "additions": 101, "deletions": 1, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/0eabf25b90396dead0b2a1aaa275af18a1ae6008/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0eabf25b90396dead0b2a1aaa275af18a1ae6008/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs?ref=0eabf25b90396dead0b2a1aaa275af18a1ae6008", "patch": "@@ -1,5 +1,5 @@\n macro_rules! uint_impl {\n-    ($SelfT:ty, $ActualT:ident, $BITS:expr, $MaxV:expr,\n+    ($SelfT:ty, $ActualT:ident, $SignedT:ident, $BITS:expr, $MaxV:expr,\n         $rot:expr, $rot_op:expr, $rot_result:expr, $swap_op:expr, $swapped:expr,\n         $reversed:expr, $le_bytes:expr, $be_bytes:expr,\n         $to_xe_bytes_doc:expr, $from_xe_bytes_doc:expr) => {\n@@ -442,6 +442,29 @@ macro_rules! uint_impl {\n             unsafe { intrinsics::unchecked_add(self, rhs) }\n         }\n \n+        /// Checked addition with a signed integer. Computes `self + rhs`,\n+        /// returning `None` if overflow occurred.\n+        ///\n+        /// # Examples\n+        ///\n+        /// Basic usage:\n+        ///\n+        /// ```\n+        /// # #![feature(mixed_integer_ops)]\n+        #[doc = concat!(\"assert_eq!(1\", stringify!($SelfT), \".checked_add_signed(2), Some(3));\")]\n+        #[doc = concat!(\"assert_eq!(1\", stringify!($SelfT), \".checked_add_signed(-2), None);\")]\n+        #[doc = concat!(\"assert_eq!((\", stringify!($SelfT), \"::MAX - 2).checked_add_signed(3), None);\")]\n+        /// ```\n+        #[unstable(feature = \"mixed_integer_ops\", issue = \"87840\")]\n+        #[rustc_const_unstable(feature = \"mixed_integer_ops\", issue = \"87840\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n+        #[inline]\n+        pub const fn checked_add_signed(self, rhs: $SignedT) -> Option<Self> {\n+            let (a, b) = self.overflowing_add_signed(rhs);\n+            if unlikely!(b) {None} else {Some(a)}\n+        }\n+\n         /// Checked integer subtraction. Computes `self - rhs`, returning\n         /// `None` if overflow occurred.\n         ///\n@@ -995,6 +1018,35 @@ macro_rules! uint_impl {\n             intrinsics::saturating_add(self, rhs)\n         }\n \n+        /// Saturating addition with a signed integer. Computes `self + rhs`,\n+        /// saturating at the numeric bounds instead of overflowing.\n+        ///\n+        /// # Examples\n+        ///\n+        /// Basic usage:\n+        ///\n+        /// ```\n+        /// # #![feature(mixed_integer_ops)]\n+        #[doc = concat!(\"assert_eq!(1\", stringify!($SelfT), \".saturating_add_signed(2), 3);\")]\n+        #[doc = concat!(\"assert_eq!(1\", stringify!($SelfT), \".saturating_add_signed(-2), 0);\")]\n+        #[doc = concat!(\"assert_eq!((\", stringify!($SelfT), \"::MAX - 2).saturating_add_signed(4), \", stringify!($SelfT), \"::MAX);\")]\n+        /// ```\n+        #[unstable(feature = \"mixed_integer_ops\", issue = \"87840\")]\n+        #[rustc_const_unstable(feature = \"mixed_integer_ops\", issue = \"87840\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n+        #[inline]\n+        pub const fn saturating_add_signed(self, rhs: $SignedT) -> Self {\n+            let (res, overflow) = self.overflowing_add(rhs as Self);\n+            if overflow == (rhs < 0) {\n+                res\n+            } else if overflow {\n+                Self::MAX\n+            } else {\n+                0\n+            }\n+        }\n+\n         /// Saturating integer subtraction. Computes `self - rhs`, saturating\n         /// at the numeric bounds instead of overflowing.\n         ///\n@@ -1111,6 +1163,28 @@ macro_rules! uint_impl {\n             intrinsics::wrapping_add(self, rhs)\n         }\n \n+        /// Wrapping (modular) addition with a signed integer. Computes\n+        /// `self + rhs`, wrapping around at the boundary of the type.\n+        ///\n+        /// # Examples\n+        ///\n+        /// Basic usage:\n+        ///\n+        /// ```\n+        /// # #![feature(mixed_integer_ops)]\n+        #[doc = concat!(\"assert_eq!(1\", stringify!($SelfT), \".wrapping_add_signed(2), 3);\")]\n+        #[doc = concat!(\"assert_eq!(1\", stringify!($SelfT), \".wrapping_add_signed(-2), \", stringify!($SelfT), \"::MAX);\")]\n+        #[doc = concat!(\"assert_eq!((\", stringify!($SelfT), \"::MAX - 2).wrapping_add_signed(4), 1);\")]\n+        /// ```\n+        #[unstable(feature = \"mixed_integer_ops\", issue = \"87840\")]\n+        #[rustc_const_unstable(feature = \"mixed_integer_ops\", issue = \"87840\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n+        #[inline]\n+        pub const fn wrapping_add_signed(self, rhs: $SignedT) -> Self {\n+            self.wrapping_add(rhs as Self)\n+        }\n+\n         /// Wrapping (modular) subtraction. Computes `self - rhs`,\n         /// wrapping around at the boundary of the type.\n         ///\n@@ -1435,6 +1509,32 @@ macro_rules! uint_impl {\n             (c, b | d)\n         }\n \n+        /// Calculates `self` + `rhs` with a signed `rhs`\n+        ///\n+        /// Returns a tuple of the addition along with a boolean indicating\n+        /// whether an arithmetic overflow would occur. If an overflow would\n+        /// have occurred then the wrapped value is returned.\n+        ///\n+        /// # Examples\n+        ///\n+        /// Basic usage:\n+        ///\n+        /// ```\n+        /// # #![feature(mixed_integer_ops)]\n+        #[doc = concat!(\"assert_eq!(1\", stringify!($SelfT), \".overflowing_add_signed(2), (3, false));\")]\n+        #[doc = concat!(\"assert_eq!(1\", stringify!($SelfT), \".overflowing_add_signed(-2), (\", stringify!($SelfT), \"::MAX, true));\")]\n+        #[doc = concat!(\"assert_eq!((\", stringify!($SelfT), \"::MAX - 2).overflowing_add_signed(4), (1, true));\")]\n+        /// ```\n+        #[unstable(feature = \"mixed_integer_ops\", issue = \"87840\")]\n+        #[rustc_const_unstable(feature = \"mixed_integer_ops\", issue = \"87840\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n+        #[inline]\n+        pub const fn overflowing_add_signed(self, rhs: $SignedT) -> (Self, bool) {\n+            let (res, overflowed) = self.overflowing_add(rhs as Self);\n+            (res, overflowed ^ (rhs < 0))\n+        }\n+\n         /// Calculates `self` - `rhs`\n         ///\n         /// Returns a tuple of the subtraction along with a boolean indicating"}, {"sha": "6bc445c6f2b07b084ca4c110747bdcd84eba14ef", "filename": "library/std/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0eabf25b90396dead0b2a1aaa275af18a1ae6008/library%2Fstd%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0eabf25b90396dead0b2a1aaa275af18a1ae6008/library%2Fstd%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2FCargo.toml?ref=0eabf25b90396dead0b2a1aaa275af18a1ae6008", "patch": "@@ -15,7 +15,7 @@ cfg-if = { version = \"0.1.8\", features = ['rustc-dep-of-std'] }\n panic_unwind = { path = \"../panic_unwind\", optional = true }\n panic_abort = { path = \"../panic_abort\" }\n core = { path = \"../core\" }\n-libc = { version = \"0.2.99\", default-features = false, features = ['rustc-dep-of-std'] }\n+libc = { version = \"0.2.103\", default-features = false, features = ['rustc-dep-of-std'] }\n compiler_builtins = { version = \"0.1.44\" }\n profiler_builtins = { path = \"../profiler_builtins\", optional = true }\n unwind = { path = \"../unwind\" }"}, {"sha": "980b2531192e8649c422c21f4b83f9e28b633a09", "filename": "library/std/src/io/cursor.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0eabf25b90396dead0b2a1aaa275af18a1ae6008/library%2Fstd%2Fsrc%2Fio%2Fcursor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0eabf25b90396dead0b2a1aaa275af18a1ae6008/library%2Fstd%2Fsrc%2Fio%2Fcursor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fcursor.rs?ref=0eabf25b90396dead0b2a1aaa275af18a1ae6008", "patch": "@@ -292,12 +292,7 @@ where\n             SeekFrom::End(n) => (self.inner.as_ref().len() as u64, n),\n             SeekFrom::Current(n) => (self.pos, n),\n         };\n-        let new_pos = if offset >= 0 {\n-            base_pos.checked_add(offset as u64)\n-        } else {\n-            base_pos.checked_sub((offset.wrapping_neg()) as u64)\n-        };\n-        match new_pos {\n+        match base_pos.checked_add_signed(offset) {\n             Some(n) => {\n                 self.pos = n;\n                 Ok(self.pos)"}, {"sha": "a7516bf4ffd375e8816396eeee60b8b0cf1687b0", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0eabf25b90396dead0b2a1aaa275af18a1ae6008/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0eabf25b90396dead0b2a1aaa275af18a1ae6008/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=0eabf25b90396dead0b2a1aaa275af18a1ae6008", "patch": "@@ -297,6 +297,7 @@\n #![feature(maybe_uninit_slice)]\n #![feature(maybe_uninit_uninit_array)]\n #![feature(min_specialization)]\n+#![feature(mixed_integer_ops)]\n #![cfg_attr(not(bootstrap), feature(must_not_suspend))]\n #![feature(needs_panic_runtime)]\n #![feature(negative_impls)]"}, {"sha": "81b21fbbb1656c8758ffd982f153a85e7de04486", "filename": "library/std/src/sys/hermit/thread.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0eabf25b90396dead0b2a1aaa275af18a1ae6008/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0eabf25b90396dead0b2a1aaa275af18a1ae6008/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fthread.rs?ref=0eabf25b90396dead0b2a1aaa275af18a1ae6008", "patch": "@@ -97,7 +97,7 @@ impl Thread {\n     }\n }\n \n-pub fn available_concurrency() -> io::Result<NonZeroUsize> {\n+pub fn available_parallelism() -> io::Result<NonZeroUsize> {\n     unsupported()\n }\n "}, {"sha": "d745a619614041dc7e9eb9335f4f3bb48ee97d50", "filename": "library/std/src/sys/sgx/thread.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0eabf25b90396dead0b2a1aaa275af18a1ae6008/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0eabf25b90396dead0b2a1aaa275af18a1ae6008/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fthread.rs?ref=0eabf25b90396dead0b2a1aaa275af18a1ae6008", "patch": "@@ -137,7 +137,7 @@ impl Thread {\n     }\n }\n \n-pub fn available_concurrency() -> io::Result<NonZeroUsize> {\n+pub fn available_parallelism() -> io::Result<NonZeroUsize> {\n     unsupported()\n }\n "}, {"sha": "891f3413e9138fd4f93ae6a38bf8e392380e8625", "filename": "library/std/src/sys/unix/thread.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0eabf25b90396dead0b2a1aaa275af18a1ae6008/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0eabf25b90396dead0b2a1aaa275af18a1ae6008/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs?ref=0eabf25b90396dead0b2a1aaa275af18a1ae6008", "patch": "@@ -263,7 +263,7 @@ impl Drop for Thread {\n     }\n }\n \n-pub fn available_concurrency() -> io::Result<NonZeroUsize> {\n+pub fn available_parallelism() -> io::Result<NonZeroUsize> {\n     cfg_if::cfg_if! {\n         if #[cfg(any(\n             target_os = \"android\","}, {"sha": "a8db251de201768e75c6383decf0a8bb97d5dd99", "filename": "library/std/src/sys/unsupported/thread.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0eabf25b90396dead0b2a1aaa275af18a1ae6008/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0eabf25b90396dead0b2a1aaa275af18a1ae6008/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fthread.rs?ref=0eabf25b90396dead0b2a1aaa275af18a1ae6008", "patch": "@@ -31,7 +31,7 @@ impl Thread {\n     }\n }\n \n-pub fn available_concurrency() -> io::Result<NonZeroUsize> {\n+pub fn available_parallelism() -> io::Result<NonZeroUsize> {\n     unsupported()\n }\n "}, {"sha": "2e4e474c4492c55a5b4c4e1c1373cd2ed898bdac", "filename": "library/std/src/sys/wasi/thread.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0eabf25b90396dead0b2a1aaa275af18a1ae6008/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0eabf25b90396dead0b2a1aaa275af18a1ae6008/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fthread.rs?ref=0eabf25b90396dead0b2a1aaa275af18a1ae6008", "patch": "@@ -64,7 +64,7 @@ impl Thread {\n     }\n }\n \n-pub fn available_concurrency() -> io::Result<NonZeroUsize> {\n+pub fn available_parallelism() -> io::Result<NonZeroUsize> {\n     unsupported()\n }\n "}, {"sha": "16418a06226e4884a89e022feb6152f255ecae7d", "filename": "library/std/src/sys/wasm/atomics/thread.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0eabf25b90396dead0b2a1aaa275af18a1ae6008/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fatomics%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0eabf25b90396dead0b2a1aaa275af18a1ae6008/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fatomics%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fatomics%2Fthread.rs?ref=0eabf25b90396dead0b2a1aaa275af18a1ae6008", "patch": "@@ -40,7 +40,7 @@ impl Thread {\n     pub fn join(self) {}\n }\n \n-pub fn available_concurrency() -> io::Result<NonZeroUsize> {\n+pub fn available_parallelism() -> io::Result<NonZeroUsize> {\n     unsupported()\n }\n "}, {"sha": "75f70c2076ee13efc9578ad91804aa82adc8d756", "filename": "library/std/src/sys/windows/thread.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0eabf25b90396dead0b2a1aaa275af18a1ae6008/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0eabf25b90396dead0b2a1aaa275af18a1ae6008/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fthread.rs?ref=0eabf25b90396dead0b2a1aaa275af18a1ae6008", "patch": "@@ -100,7 +100,7 @@ impl Thread {\n     }\n }\n \n-pub fn available_concurrency() -> io::Result<NonZeroUsize> {\n+pub fn available_parallelism() -> io::Result<NonZeroUsize> {\n     let res = unsafe {\n         let mut sysinfo: c::SYSTEM_INFO = crate::mem::zeroed();\n         c::GetSystemInfo(&mut sysinfo);"}, {"sha": "707a55b625814f4f25ae63ced2abcfd01727becb", "filename": "library/std/src/thread/mod.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0eabf25b90396dead0b2a1aaa275af18a1ae6008/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0eabf25b90396dead0b2a1aaa275af18a1ae6008/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs?ref=0eabf25b90396dead0b2a1aaa275af18a1ae6008", "patch": "@@ -1453,12 +1453,14 @@ fn _assert_sync_and_send() {\n ///\n /// ```\n /// # #![allow(dead_code)]\n-/// #![feature(available_concurrency)]\n+/// #![feature(available_parallelism)]\n /// use std::thread;\n ///\n-/// let count = thread::available_concurrency().map(|n| n.get()).unwrap_or(1);\n+/// let count = thread::available_parallelism().map(|n| n.get()).unwrap_or(1);\n /// ```\n-#[unstable(feature = \"available_concurrency\", issue = \"74479\")]\n-pub fn available_concurrency() -> io::Result<NonZeroUsize> {\n-    imp::available_concurrency()\n+#[doc(alias = \"hardware_concurrency\")] // Alias for C++ `std::thread::hardware_concurrency`.\n+#[doc(alias = \"available_concurrency\")] // Alias for a name we gave this API on unstable.\n+#[unstable(feature = \"available_parallelism\", issue = \"74479\")]\n+pub fn available_parallelism() -> io::Result<NonZeroUsize> {\n+    imp::available_parallelism()\n }"}, {"sha": "e25f524ec05667f52fa58a7c06d0c5ff99b11cdc", "filename": "library/test/src/helpers/concurrency.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0eabf25b90396dead0b2a1aaa275af18a1ae6008/library%2Ftest%2Fsrc%2Fhelpers%2Fconcurrency.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0eabf25b90396dead0b2a1aaa275af18a1ae6008/library%2Ftest%2Fsrc%2Fhelpers%2Fconcurrency.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fhelpers%2Fconcurrency.rs?ref=0eabf25b90396dead0b2a1aaa275af18a1ae6008", "patch": "@@ -9,6 +9,6 @@ pub fn get_concurrency() -> usize {\n             _ => panic!(\"RUST_TEST_THREADS is `{}`, should be a positive integer.\", value),\n         }\n     } else {\n-        thread::available_concurrency().map(|n| n.get()).unwrap_or(1)\n+        thread::available_parallelism().map(|n| n.get()).unwrap_or(1)\n     }\n }"}, {"sha": "6732c6c61c204f59ee52cee2e9883d6f7a78e9b4", "filename": "library/test/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0eabf25b90396dead0b2a1aaa275af18a1ae6008/library%2Ftest%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0eabf25b90396dead0b2a1aaa275af18a1ae6008/library%2Ftest%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Flib.rs?ref=0eabf25b90396dead0b2a1aaa275af18a1ae6008", "patch": "@@ -23,7 +23,7 @@\n #![feature(libc)]\n #![feature(rustc_private)]\n #![feature(nll)]\n-#![feature(available_concurrency)]\n+#![feature(available_parallelism)]\n #![feature(bench_black_box)]\n #![feature(internal_output_capture)]\n #![feature(panic_unwind)]"}, {"sha": "04e20fdd41c0f89f6b906b53175d438ec74a08e9", "filename": "src/doc/rustc/src/tests/index.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0eabf25b90396dead0b2a1aaa275af18a1ae6008/src%2Fdoc%2Frustc%2Fsrc%2Ftests%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/0eabf25b90396dead0b2a1aaa275af18a1ae6008/src%2Fdoc%2Frustc%2Fsrc%2Ftests%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Ftests%2Findex.md?ref=0eabf25b90396dead0b2a1aaa275af18a1ae6008", "patch": "@@ -161,7 +161,7 @@ The following options affect how tests are executed.\n \n Sets the number of threads to use for running tests in parallel. By default,\n uses the amount of concurrency available on the hardware as indicated by\n-[`available_concurrency`].\n+[`available_parallelism`].\n \n This can also be specified with the `RUST_TEST_THREADS` environment variable.\n \n@@ -265,7 +265,7 @@ Experimental support for using custom test harnesses is available on the\n \n [`--test` option]: ../command-line-arguments.md#option-test\n [`-Z panic-abort-tests`]: https://github.com/rust-lang/rust/issues/67650\n-[`available_concurrency`]: ../../std/thread/fn.available_concurrency.html\n+[`available_parallelism`]: ../../std/thread/fn.available_parallelism.html\n [`cargo test`]: ../../cargo/commands/cargo-test.html\n [`libtest`]: ../../test/index.html\n [`main` function]: ../../reference/crates-and-source-files.html#main-functions"}, {"sha": "302fc5a677771ffe6b7957cdc512cbcf31815f18", "filename": "src/librustdoc/externalfiles.rs", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0eabf25b90396dead0b2a1aaa275af18a1ae6008/src%2Flibrustdoc%2Fexternalfiles.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0eabf25b90396dead0b2a1aaa275af18a1ae6008/src%2Flibrustdoc%2Fexternalfiles.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fexternalfiles.rs?ref=0eabf25b90396dead0b2a1aaa275af18a1ae6008", "patch": "@@ -1,4 +1,4 @@\n-use crate::html::markdown::{ErrorCodes, IdMap, Markdown, Playground};\n+use crate::html::markdown::{ErrorCodes, HeadingOffset, IdMap, Markdown, Playground};\n use crate::rustc_span::edition::Edition;\n use std::fs;\n use std::path::Path;\n@@ -39,14 +39,32 @@ impl ExternalHtml {\n         let bc = format!(\n             \"{}{}\",\n             bc,\n-            Markdown(&m_bc, &[], id_map, codes, edition, playground).into_string()\n+            Markdown {\n+                content: &m_bc,\n+                links: &[],\n+                ids: id_map,\n+                error_codes: codes,\n+                edition,\n+                playground,\n+                heading_offset: HeadingOffset::H2,\n+            }\n+            .into_string()\n         );\n         let ac = load_external_files(after_content, diag)?;\n         let m_ac = load_external_files(md_after_content, diag)?;\n         let ac = format!(\n             \"{}{}\",\n             ac,\n-            Markdown(&m_ac, &[], id_map, codes, edition, playground).into_string()\n+            Markdown {\n+                content: &m_ac,\n+                links: &[],\n+                ids: id_map,\n+                error_codes: codes,\n+                edition,\n+                playground,\n+                heading_offset: HeadingOffset::H2,\n+            }\n+            .into_string()\n         );\n         Some(ExternalHtml { in_header: ih, before_content: bc, after_content: ac })\n     }"}, {"sha": "9f2e282fce1c386a7ddc32254671a31c5fac29a8", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 55, "deletions": 17, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/0eabf25b90396dead0b2a1aaa275af18a1ae6008/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0eabf25b90396dead0b2a1aaa275af18a1ae6008/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=0eabf25b90396dead0b2a1aaa275af18a1ae6008", "patch": "@@ -8,11 +8,19 @@\n //! extern crate rustc_span;\n //!\n //! use rustc_span::edition::Edition;\n-//! use rustdoc::html::markdown::{IdMap, Markdown, ErrorCodes};\n+//! use rustdoc::html::markdown::{HeadingOffset, IdMap, Markdown, ErrorCodes};\n //!\n //! let s = \"My *markdown* _text_\";\n //! let mut id_map = IdMap::new();\n-//! let md = Markdown(s, &[], &mut id_map, ErrorCodes::Yes, Edition::Edition2015, &None);\n+//! let md = Markdown {\n+//!     content: s,\n+//!     links: &[],\n+//!     ids: &mut id_map,\n+//!     error_codes: ErrorCodes::Yes,\n+//!     edition: Edition::Edition2015,\n+//!     playground: &None,\n+//!     heading_offset: HeadingOffset::H2,\n+//! };\n //! let html = md.into_string();\n //! // ... something using html\n //! ```\n@@ -47,6 +55,8 @@ use pulldown_cmark::{\n #[cfg(test)]\n mod tests;\n \n+const MAX_HEADER_LEVEL: u32 = 6;\n+\n /// Options for rendering Markdown in the main body of documentation.\n pub(crate) fn main_body_opts() -> Options {\n     Options::ENABLE_TABLES\n@@ -65,20 +75,33 @@ pub(crate) fn summary_opts() -> Options {\n         | Options::ENABLE_SMART_PUNCTUATION\n }\n \n+#[derive(Debug, Clone, Copy)]\n+pub enum HeadingOffset {\n+    H1 = 0,\n+    H2,\n+    H3,\n+    H4,\n+    H5,\n+    H6,\n+}\n+\n /// When `to_string` is called, this struct will emit the HTML corresponding to\n /// the rendered version of the contained markdown string.\n-pub struct Markdown<'a>(\n-    pub &'a str,\n+pub struct Markdown<'a> {\n+    pub content: &'a str,\n     /// A list of link replacements.\n-    pub &'a [RenderedLink],\n+    pub links: &'a [RenderedLink],\n     /// The current list of used header IDs.\n-    pub &'a mut IdMap,\n+    pub ids: &'a mut IdMap,\n     /// Whether to allow the use of explicit error codes in doctest lang strings.\n-    pub ErrorCodes,\n+    pub error_codes: ErrorCodes,\n     /// Default edition to use when parsing doctests (to add a `fn main`).\n-    pub Edition,\n-    pub &'a Option<Playground>,\n-);\n+    pub edition: Edition,\n+    pub playground: &'a Option<Playground>,\n+    /// Offset at which we render headings.\n+    /// E.g. if `heading_offset: HeadingOffset::H2`, then `# something` renders an `<h2>`.\n+    pub heading_offset: HeadingOffset,\n+}\n /// A tuple struct like `Markdown` that renders the markdown with a table of contents.\n crate struct MarkdownWithToc<'a>(\n     crate &'a str,\n@@ -489,11 +512,17 @@ struct HeadingLinks<'a, 'b, 'ids, I> {\n     toc: Option<&'b mut TocBuilder>,\n     buf: VecDeque<SpannedEvent<'a>>,\n     id_map: &'ids mut IdMap,\n+    heading_offset: HeadingOffset,\n }\n \n impl<'a, 'b, 'ids, I> HeadingLinks<'a, 'b, 'ids, I> {\n-    fn new(iter: I, toc: Option<&'b mut TocBuilder>, ids: &'ids mut IdMap) -> Self {\n-        HeadingLinks { inner: iter, toc, buf: VecDeque::new(), id_map: ids }\n+    fn new(\n+        iter: I,\n+        toc: Option<&'b mut TocBuilder>,\n+        ids: &'ids mut IdMap,\n+        heading_offset: HeadingOffset,\n+    ) -> Self {\n+        HeadingLinks { inner: iter, toc, buf: VecDeque::new(), id_map: ids, heading_offset }\n     }\n }\n \n@@ -530,6 +559,7 @@ impl<'a, 'b, 'ids, I: Iterator<Item = SpannedEvent<'a>>> Iterator\n                 self.buf.push_front((Event::Html(format!(\"{} \", sec).into()), 0..0));\n             }\n \n+            let level = std::cmp::min(level + (self.heading_offset as u32), MAX_HEADER_LEVEL);\n             self.buf.push_back((Event::Html(format!(\"</a></h{}>\", level).into()), 0..0));\n \n             let start_tags = format!(\n@@ -1005,7 +1035,15 @@ impl LangString {\n \n impl Markdown<'_> {\n     pub fn into_string(self) -> String {\n-        let Markdown(md, links, mut ids, codes, edition, playground) = self;\n+        let Markdown {\n+            content: md,\n+            links,\n+            mut ids,\n+            error_codes: codes,\n+            edition,\n+            playground,\n+            heading_offset,\n+        } = self;\n \n         // This is actually common enough to special-case\n         if md.is_empty() {\n@@ -1026,7 +1064,7 @@ impl Markdown<'_> {\n \n         let mut s = String::with_capacity(md.len() * 3 / 2);\n \n-        let p = HeadingLinks::new(p, None, &mut ids);\n+        let p = HeadingLinks::new(p, None, &mut ids, heading_offset);\n         let p = Footnotes::new(p);\n         let p = LinkReplacer::new(p.map(|(ev, _)| ev), links);\n         let p = TableWrapper::new(p);\n@@ -1048,7 +1086,7 @@ impl MarkdownWithToc<'_> {\n         let mut toc = TocBuilder::new();\n \n         {\n-            let p = HeadingLinks::new(p, Some(&mut toc), &mut ids);\n+            let p = HeadingLinks::new(p, Some(&mut toc), &mut ids, HeadingOffset::H1);\n             let p = Footnotes::new(p);\n             let p = TableWrapper::new(p.map(|(ev, _)| ev));\n             let p = CodeBlocks::new(p, codes, edition, playground);\n@@ -1077,7 +1115,7 @@ impl MarkdownHtml<'_> {\n \n         let mut s = String::with_capacity(md.len() * 3 / 2);\n \n-        let p = HeadingLinks::new(p, None, &mut ids);\n+        let p = HeadingLinks::new(p, None, &mut ids, HeadingOffset::H1);\n         let p = Footnotes::new(p);\n         let p = TableWrapper::new(p.map(|(ev, _)| ev));\n         let p = CodeBlocks::new(p, codes, edition, playground);\n@@ -1295,7 +1333,7 @@ crate fn markdown_links(md: &str) -> Vec<MarkdownLink> {\n     // There's no need to thread an IdMap through to here because\n     // the IDs generated aren't going to be emitted anywhere.\n     let mut ids = IdMap::new();\n-    let iter = Footnotes::new(HeadingLinks::new(p, None, &mut ids));\n+    let iter = Footnotes::new(HeadingLinks::new(p, None, &mut ids, HeadingOffset::H1));\n \n     for ev in iter {\n         if let Event::Start(Tag::Link(kind, dest, _)) = ev.0 {"}, {"sha": "68ab002f138676d878902e4e4c14d7d434f49f09", "filename": "src/librustdoc/html/markdown/tests.rs", "status": "modified", "additions": 34, "deletions": 18, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/0eabf25b90396dead0b2a1aaa275af18a1ae6008/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0eabf25b90396dead0b2a1aaa275af18a1ae6008/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs?ref=0eabf25b90396dead0b2a1aaa275af18a1ae6008", "patch": "@@ -1,5 +1,5 @@\n use super::{find_testable_code, plain_text_summary, short_markdown_summary};\n-use super::{ErrorCodes, IdMap, Ignore, LangString, Markdown, MarkdownHtml};\n+use super::{ErrorCodes, HeadingOffset, IdMap, Ignore, LangString, Markdown, MarkdownHtml};\n use rustc_span::edition::{Edition, DEFAULT_EDITION};\n \n #[test]\n@@ -147,74 +147,90 @@ fn test_lang_string_tokenizer() {\n fn test_header() {\n     fn t(input: &str, expect: &str) {\n         let mut map = IdMap::new();\n-        let output =\n-            Markdown(input, &[], &mut map, ErrorCodes::Yes, DEFAULT_EDITION, &None).into_string();\n+        let output = Markdown {\n+            content: input,\n+            links: &[],\n+            ids: &mut map,\n+            error_codes: ErrorCodes::Yes,\n+            edition: DEFAULT_EDITION,\n+            playground: &None,\n+            heading_offset: HeadingOffset::H2,\n+        }\n+        .into_string();\n         assert_eq!(output, expect, \"original: {}\", input);\n     }\n \n     t(\n         \"# Foo bar\",\n-        \"<h1 id=\\\"foo-bar\\\" class=\\\"section-header\\\"><a href=\\\"#foo-bar\\\">Foo bar</a></h1>\",\n+        \"<h2 id=\\\"foo-bar\\\" class=\\\"section-header\\\"><a href=\\\"#foo-bar\\\">Foo bar</a></h2>\",\n     );\n     t(\n         \"## Foo-bar_baz qux\",\n-        \"<h2 id=\\\"foo-bar_baz-qux\\\" class=\\\"section-header\\\">\\\n-         <a href=\\\"#foo-bar_baz-qux\\\">Foo-bar_baz qux</a></h2>\",\n+        \"<h3 id=\\\"foo-bar_baz-qux\\\" class=\\\"section-header\\\">\\\n+         <a href=\\\"#foo-bar_baz-qux\\\">Foo-bar_baz qux</a></h3>\",\n     );\n     t(\n         \"### **Foo** *bar* baz!?!& -_qux_-%\",\n-        \"<h3 id=\\\"foo-bar-baz--qux-\\\" class=\\\"section-header\\\">\\\n+        \"<h4 id=\\\"foo-bar-baz--qux-\\\" class=\\\"section-header\\\">\\\n             <a href=\\\"#foo-bar-baz--qux-\\\"><strong>Foo</strong> \\\n             <em>bar</em> baz!?!&amp; -<em>qux</em>-%</a>\\\n-         </h3>\",\n+         </h4>\",\n     );\n     t(\n         \"#### **Foo?** & \\\\*bar?!*  _`baz`_ \u2764 #qux\",\n-        \"<h4 id=\\\"foo--bar--baz--qux\\\" class=\\\"section-header\\\">\\\n+        \"<h5 id=\\\"foo--bar--baz--qux\\\" class=\\\"section-header\\\">\\\n              <a href=\\\"#foo--bar--baz--qux\\\"><strong>Foo?</strong> &amp; *bar?!*  \\\n              <em><code>baz</code></em> \u2764 #qux</a>\\\n-         </h4>\",\n+         </h5>\",\n     );\n }\n \n #[test]\n fn test_header_ids_multiple_blocks() {\n     let mut map = IdMap::new();\n     fn t(map: &mut IdMap, input: &str, expect: &str) {\n-        let output =\n-            Markdown(input, &[], map, ErrorCodes::Yes, DEFAULT_EDITION, &None).into_string();\n+        let output = Markdown {\n+            content: input,\n+            links: &[],\n+            ids: map,\n+            error_codes: ErrorCodes::Yes,\n+            edition: DEFAULT_EDITION,\n+            playground: &None,\n+            heading_offset: HeadingOffset::H2,\n+        }\n+        .into_string();\n         assert_eq!(output, expect, \"original: {}\", input);\n     }\n \n     t(\n         &mut map,\n         \"# Example\",\n-        \"<h1 id=\\\"example\\\" class=\\\"section-header\\\"><a href=\\\"#example\\\">Example</a></h1>\",\n+        \"<h2 id=\\\"example\\\" class=\\\"section-header\\\"><a href=\\\"#example\\\">Example</a></h2>\",\n     );\n     t(\n         &mut map,\n         \"# Panics\",\n-        \"<h1 id=\\\"panics\\\" class=\\\"section-header\\\"><a href=\\\"#panics\\\">Panics</a></h1>\",\n+        \"<h2 id=\\\"panics\\\" class=\\\"section-header\\\"><a href=\\\"#panics\\\">Panics</a></h2>\",\n     );\n     t(\n         &mut map,\n         \"# Example\",\n-        \"<h1 id=\\\"example-1\\\" class=\\\"section-header\\\"><a href=\\\"#example-1\\\">Example</a></h1>\",\n+        \"<h2 id=\\\"example-1\\\" class=\\\"section-header\\\"><a href=\\\"#example-1\\\">Example</a></h2>\",\n     );\n     t(\n         &mut map,\n         \"# Main\",\n-        \"<h1 id=\\\"main-1\\\" class=\\\"section-header\\\"><a href=\\\"#main-1\\\">Main</a></h1>\",\n+        \"<h2 id=\\\"main-1\\\" class=\\\"section-header\\\"><a href=\\\"#main-1\\\">Main</a></h2>\",\n     );\n     t(\n         &mut map,\n         \"# Example\",\n-        \"<h1 id=\\\"example-2\\\" class=\\\"section-header\\\"><a href=\\\"#example-2\\\">Example</a></h1>\",\n+        \"<h2 id=\\\"example-2\\\" class=\\\"section-header\\\"><a href=\\\"#example-2\\\">Example</a></h2>\",\n     );\n     t(\n         &mut map,\n         \"# Panics\",\n-        \"<h1 id=\\\"panics-1\\\" class=\\\"section-header\\\"><a href=\\\"#panics-1\\\">Panics</a></h1>\",\n+        \"<h2 id=\\\"panics-1\\\" class=\\\"section-header\\\"><a href=\\\"#panics-1\\\">Panics</a></h2>\",\n     );\n }\n "}, {"sha": "11682afdf899ba0580be428629ebf1cb6a655c7d", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 60, "deletions": 30, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/0eabf25b90396dead0b2a1aaa275af18a1ae6008/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0eabf25b90396dead0b2a1aaa275af18a1ae6008/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=0eabf25b90396dead0b2a1aaa275af18a1ae6008", "patch": "@@ -67,7 +67,7 @@ use crate::html::format::{\n     href, print_abi_with_space, print_constness_with_space, print_default_space,\n     print_generic_bounds, print_where_clause, Buffer, HrefError, PrintWithSpace,\n };\n-use crate::html::markdown::{Markdown, MarkdownHtml, MarkdownSummaryLine};\n+use crate::html::markdown::{HeadingOffset, Markdown, MarkdownHtml, MarkdownSummaryLine};\n \n /// A pair of name and its optional document.\n crate type NameDoc = (String, Option<String>);\n@@ -470,32 +470,45 @@ fn settings(root_path: &str, suffix: &str, themes: &[StylePath]) -> Result<Strin\n     ))\n }\n \n-fn document(w: &mut Buffer, cx: &Context<'_>, item: &clean::Item, parent: Option<&clean::Item>) {\n+fn document(\n+    w: &mut Buffer,\n+    cx: &Context<'_>,\n+    item: &clean::Item,\n+    parent: Option<&clean::Item>,\n+    heading_offset: HeadingOffset,\n+) {\n     if let Some(ref name) = item.name {\n         info!(\"Documenting {}\", name);\n     }\n     document_item_info(w, cx, item, parent);\n     if parent.is_none() {\n-        document_full_collapsible(w, item, cx);\n+        document_full_collapsible(w, item, cx, heading_offset);\n     } else {\n-        document_full(w, item, cx);\n+        document_full(w, item, cx, heading_offset);\n     }\n }\n \n /// Render md_text as markdown.\n-fn render_markdown(w: &mut Buffer, cx: &Context<'_>, md_text: &str, links: Vec<RenderedLink>) {\n+fn render_markdown(\n+    w: &mut Buffer,\n+    cx: &Context<'_>,\n+    md_text: &str,\n+    links: Vec<RenderedLink>,\n+    heading_offset: HeadingOffset,\n+) {\n     let mut ids = cx.id_map.borrow_mut();\n     write!(\n         w,\n         \"<div class=\\\"docblock\\\">{}</div>\",\n-        Markdown(\n-            md_text,\n-            &links,\n-            &mut ids,\n-            cx.shared.codes,\n-            cx.shared.edition(),\n-            &cx.shared.playground\n-        )\n+        Markdown {\n+            content: md_text,\n+            links: &links,\n+            ids: &mut ids,\n+            error_codes: cx.shared.codes,\n+            edition: cx.shared.edition(),\n+            playground: &cx.shared.playground,\n+            heading_offset,\n+        }\n         .into_string()\n     )\n }\n@@ -531,15 +544,31 @@ fn document_short(\n     }\n }\n \n-fn document_full_collapsible(w: &mut Buffer, item: &clean::Item, cx: &Context<'_>) {\n-    document_full_inner(w, item, cx, true);\n+fn document_full_collapsible(\n+    w: &mut Buffer,\n+    item: &clean::Item,\n+    cx: &Context<'_>,\n+    heading_offset: HeadingOffset,\n+) {\n+    document_full_inner(w, item, cx, true, heading_offset);\n }\n \n-fn document_full(w: &mut Buffer, item: &clean::Item, cx: &Context<'_>) {\n-    document_full_inner(w, item, cx, false);\n+fn document_full(\n+    w: &mut Buffer,\n+    item: &clean::Item,\n+    cx: &Context<'_>,\n+    heading_offset: HeadingOffset,\n+) {\n+    document_full_inner(w, item, cx, false, heading_offset);\n }\n \n-fn document_full_inner(w: &mut Buffer, item: &clean::Item, cx: &Context<'_>, is_collapsible: bool) {\n+fn document_full_inner(\n+    w: &mut Buffer,\n+    item: &clean::Item,\n+    cx: &Context<'_>,\n+    is_collapsible: bool,\n+    heading_offset: HeadingOffset,\n+) {\n     if let Some(s) = cx.shared.maybe_collapsed_doc_value(item) {\n         debug!(\"Doc block: =====\\n{}\\n=====\", s);\n         if is_collapsible {\n@@ -549,10 +578,10 @@ fn document_full_inner(w: &mut Buffer, item: &clean::Item, cx: &Context<'_>, is_\n                      <span>Expand description</span>\\\n                 </summary>\",\n             );\n-            render_markdown(w, cx, &s, item.links(cx));\n+            render_markdown(w, cx, &s, item.links(cx), heading_offset);\n             w.write_str(\"</details>\");\n         } else {\n-            render_markdown(w, cx, &s, item.links(cx));\n+            render_markdown(w, cx, &s, item.links(cx), heading_offset);\n         }\n     }\n }\n@@ -1321,7 +1350,7 @@ fn render_impl(\n                         // because impls can't have a stability.\n                         if item.doc_value().is_some() {\n                             document_item_info(&mut info_buffer, cx, it, Some(parent));\n-                            document_full(&mut doc_buffer, item, cx);\n+                            document_full(&mut doc_buffer, item, cx, HeadingOffset::H5);\n                             short_documented = false;\n                         } else {\n                             // In case the item isn't documented,\n@@ -1339,7 +1368,7 @@ fn render_impl(\n                 } else {\n                     document_item_info(&mut info_buffer, cx, item, Some(parent));\n                     if rendering_params.show_def_docs {\n-                        document_full(&mut doc_buffer, item, cx);\n+                        document_full(&mut doc_buffer, item, cx, HeadingOffset::H5);\n                         short_documented = false;\n                     }\n                 }\n@@ -1573,14 +1602,15 @@ fn render_impl(\n             write!(\n                 w,\n                 \"<div class=\\\"docblock\\\">{}</div>\",\n-                Markdown(\n-                    &*dox,\n-                    &i.impl_item.links(cx),\n-                    &mut ids,\n-                    cx.shared.codes,\n-                    cx.shared.edition(),\n-                    &cx.shared.playground\n-                )\n+                Markdown {\n+                    content: &*dox,\n+                    links: &i.impl_item.links(cx),\n+                    ids: &mut ids,\n+                    error_codes: cx.shared.codes,\n+                    edition: cx.shared.edition(),\n+                    playground: &cx.shared.playground,\n+                    heading_offset: HeadingOffset::H2\n+                }\n                 .into_string()\n             );\n         }"}, {"sha": "1275fa4e1561769a0025de04798acd79cf9c99a4", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/0eabf25b90396dead0b2a1aaa275af18a1ae6008/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0eabf25b90396dead0b2a1aaa275af18a1ae6008/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=0eabf25b90396dead0b2a1aaa275af18a1ae6008", "patch": "@@ -30,7 +30,7 @@ use crate::html::format::{\n };\n use crate::html::highlight;\n use crate::html::layout::Page;\n-use crate::html::markdown::MarkdownSummaryLine;\n+use crate::html::markdown::{HeadingOffset, MarkdownSummaryLine};\n \n const ITEM_TABLE_OPEN: &'static str = \"<div class=\\\"item-table\\\">\";\n const ITEM_TABLE_CLOSE: &'static str = \"</div>\";\n@@ -175,7 +175,7 @@ fn toggle_close(w: &mut Buffer) {\n }\n \n fn item_module(w: &mut Buffer, cx: &Context<'_>, item: &clean::Item, items: &[clean::Item]) {\n-    document(w, cx, item, None);\n+    document(w, cx, item, None, HeadingOffset::H2);\n \n     let mut indices = (0..items.len()).filter(|i| !items[*i].is_stripped()).collect::<Vec<usize>>();\n \n@@ -482,7 +482,7 @@ fn item_function(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, f: &clean::\n             notable_traits = notable_traits_decl(&f.decl, cx),\n         );\n     });\n-    document(w, cx, it, None)\n+    document(w, cx, it, None, HeadingOffset::H2)\n }\n \n fn item_trait(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::Trait) {\n@@ -605,7 +605,7 @@ fn item_trait(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::Tra\n     });\n \n     // Trait documentation\n-    document(w, cx, it, None);\n+    document(w, cx, it, None, HeadingOffset::H2);\n \n     fn write_small_section_header(w: &mut Buffer, id: &str, title: &str, extra_content: &str) {\n         write!(\n@@ -623,7 +623,7 @@ fn item_trait(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::Tra\n         let item_type = m.type_();\n         let id = cx.derive_id(format!(\"{}.{}\", item_type, name));\n         let mut content = Buffer::empty_from(w);\n-        document(&mut content, cx, m, Some(t));\n+        document(&mut content, cx, m, Some(t), HeadingOffset::H5);\n         let toggled = !content.is_empty();\n         if toggled {\n             write!(w, \"<details class=\\\"rustdoc-toggle\\\" open><summary>\");\n@@ -837,7 +837,7 @@ fn item_trait_alias(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clea\n         );\n     });\n \n-    document(w, cx, it, None);\n+    document(w, cx, it, None, HeadingOffset::H2);\n \n     // Render any items associated directly to this alias, as otherwise they\n     // won't be visible anywhere in the docs. It would be nice to also show\n@@ -859,7 +859,7 @@ fn item_opaque_ty(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean:\n         );\n     });\n \n-    document(w, cx, it, None);\n+    document(w, cx, it, None, HeadingOffset::H2);\n \n     // Render any items associated directly to this alias, as otherwise they\n     // won't be visible anywhere in the docs. It would be nice to also show\n@@ -890,7 +890,7 @@ fn item_typedef(\n         );\n     });\n \n-    document(w, cx, it, None);\n+    document(w, cx, it, None, HeadingOffset::H2);\n \n     let def_id = it.def_id.expect_def_id();\n     // Render any items associated directly to this alias, as otherwise they\n@@ -908,7 +908,7 @@ fn item_union(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, s: &clean::Uni\n         });\n     });\n \n-    document(w, cx, it, None);\n+    document(w, cx, it, None, HeadingOffset::H2);\n \n     let mut fields = s\n         .fields\n@@ -941,7 +941,7 @@ fn item_union(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, s: &clean::Uni\n             if let Some(stability_class) = field.stability_class(cx.tcx()) {\n                 write!(w, \"<span class=\\\"stab {stab}\\\"></span>\", stab = stability_class);\n             }\n-            document(w, cx, field, Some(it));\n+            document(w, cx, field, Some(it), HeadingOffset::H2);\n         }\n     }\n     let def_id = it.def_id.expect_def_id();\n@@ -1023,7 +1023,7 @@ fn item_enum(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, e: &clean::Enum\n         });\n     });\n \n-    document(w, cx, it, None);\n+    document(w, cx, it, None, HeadingOffset::H2);\n \n     if !e.variants.is_empty() {\n         write!(\n@@ -1052,7 +1052,7 @@ fn item_enum(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, e: &clean::Enum\n             w.write_str(\"</code>\");\n             render_stability_since(w, variant, it, cx.tcx());\n             w.write_str(\"</div>\");\n-            document(w, cx, variant, Some(it));\n+            document(w, cx, variant, Some(it), HeadingOffset::H2);\n             document_non_exhaustive(w, variant);\n \n             use crate::clean::Variant;\n@@ -1092,7 +1092,7 @@ fn item_enum(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, e: &clean::Enum\n                                 f = field.name.as_ref().unwrap(),\n                                 t = ty.print(cx)\n                             );\n-                            document(w, cx, field, Some(variant));\n+                            document(w, cx, field, Some(variant), HeadingOffset::H2);\n                         }\n                         _ => unreachable!(),\n                     }\n@@ -1119,7 +1119,7 @@ fn item_macro(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::Mac\n             None,\n         );\n     });\n-    document(w, cx, it, None)\n+    document(w, cx, it, None, HeadingOffset::H2)\n }\n \n fn item_proc_macro(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, m: &clean::ProcMacro) {\n@@ -1149,11 +1149,11 @@ fn item_proc_macro(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, m: &clean\n             });\n         }\n     }\n-    document(w, cx, it, None)\n+    document(w, cx, it, None, HeadingOffset::H2)\n }\n \n fn item_primitive(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item) {\n-    document(w, cx, it, None);\n+    document(w, cx, it, None, HeadingOffset::H2);\n     render_assoc_items(w, cx, it, it.def_id.expect_def_id(), AssocItemRender::All)\n }\n \n@@ -1192,7 +1192,7 @@ fn item_constant(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, c: &clean::\n         }\n     });\n \n-    document(w, cx, it, None)\n+    document(w, cx, it, None, HeadingOffset::H2)\n }\n \n fn item_struct(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, s: &clean::Struct) {\n@@ -1203,7 +1203,7 @@ fn item_struct(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, s: &clean::St\n         });\n     });\n \n-    document(w, cx, it, None);\n+    document(w, cx, it, None, HeadingOffset::H2);\n \n     let mut fields = s\n         .fields\n@@ -1239,7 +1239,7 @@ fn item_struct(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, s: &clean::St\n                     name = field_name,\n                     ty = ty.print(cx)\n                 );\n-                document(w, cx, field, Some(it));\n+                document(w, cx, field, Some(it), HeadingOffset::H2);\n             }\n         }\n     }\n@@ -1260,7 +1260,7 @@ fn item_static(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, s: &clean::St\n             typ = s.type_.print(cx)\n         );\n     });\n-    document(w, cx, it, None)\n+    document(w, cx, it, None, HeadingOffset::H2)\n }\n \n fn item_foreign_type(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item) {\n@@ -1275,13 +1275,13 @@ fn item_foreign_type(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item) {\n         );\n     });\n \n-    document(w, cx, it, None);\n+    document(w, cx, it, None, HeadingOffset::H2);\n \n     render_assoc_items(w, cx, it, it.def_id.expect_def_id(), AssocItemRender::All)\n }\n \n fn item_keyword(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item) {\n-    document(w, cx, it, None)\n+    document(w, cx, it, None, HeadingOffset::H2)\n }\n \n /// Compare two strings treating multi-digit numbers as single units (i.e. natural sort order)."}, {"sha": "5d33681847a4131ae0bf3eed3f7a89459402bed2", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0eabf25b90396dead0b2a1aaa275af18a1ae6008/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/0eabf25b90396dead0b2a1aaa275af18a1ae6008/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=0eabf25b90396dead0b2a1aaa275af18a1ae6008", "patch": "@@ -126,7 +126,7 @@ h2 {\n h3 {\n \tfont-size: 1.3em;\n }\n-h1, h2, h3, h4 {\n+h1, h2, h3, h4, h5, h6 {\n \tfont-weight: 500;\n \tmargin: 20px 0 15px 0;\n \tpadding-bottom: 6px;\n@@ -179,7 +179,7 @@ div.impl-items > div {\n \tpadding-left: 0;\n }\n \n-h1, h2, h3, h4,\n+h1, h2, h3, h4, h5, h6,\n .sidebar, a.source, .search-input, .search-results .result-name,\n .content table td:first-child > a,\n .item-left > a,\n@@ -501,21 +501,20 @@ nav.sub {\n \twhite-space: pre-wrap;\n }\n \n-.docblock h1, .docblock h2, .docblock h3, .docblock h4, .docblock h5 {\n+.docblock h1, .docblock h2, .docblock h3, .docblock h4, .docblock h5, .docblock h6 {\n \tborder-bottom: 1px solid;\n }\n \n-.top-doc .docblock h1 { font-size: 1.3em; }\n-.top-doc .docblock h2 { font-size: 1.15em; }\n-.top-doc .docblock h3,\n+.top-doc .docblock h2 { font-size: 1.3em; }\n+.top-doc .docblock h3 { font-size: 1.15em; }\n .top-doc .docblock h4,\n-.top-doc .docblock h5 {\n+.top-doc .docblock h5,\n+.top-doc .docblock h6 {\n \tfont-size: 1em;\n }\n \n-.docblock h1 { font-size: 1em; }\n-.docblock h2 { font-size: 0.95em; }\n-.docblock h3, .docblock h4, .docblock h5 { font-size: 0.9em; }\n+.docblock h5 { font-size: 1em; }\n+.docblock h6 { font-size: 0.95em; }\n \n .docblock {\n \tmargin-left: 24px;"}, {"sha": "0fd6462a8f5dd82851928adc60e510088b4664d1", "filename": "src/librustdoc/html/static/css/themes/ayu.css", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0eabf25b90396dead0b2a1aaa275af18a1ae6008/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "raw_url": "https://github.com/rust-lang/rust/raw/0eabf25b90396dead0b2a1aaa275af18a1ae6008/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css?ref=0eabf25b90396dead0b2a1aaa275af18a1ae6008", "patch": "@@ -136,7 +136,7 @@ pre, .rustdoc.source .example-wrap {\n \tborder-right: 1px solid #ffb44c;\n }\n \n-.docblock h1, .docblock h2, .docblock h3, .docblock h4, .docblock h5 {\n+.docblock h1, .docblock h2, .docblock h3, .docblock h4, .docblock h5, .docblock h6 {\n \tborder-bottom-color: #5c6773;\n }\n "}, {"sha": "d863701dd73c7a320d570dbb695ec5661c7c2f43", "filename": "src/librustdoc/html/static/css/themes/dark.css", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0eabf25b90396dead0b2a1aaa275af18a1ae6008/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "raw_url": "https://github.com/rust-lang/rust/raw/0eabf25b90396dead0b2a1aaa275af18a1ae6008/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css?ref=0eabf25b90396dead0b2a1aaa275af18a1ae6008", "patch": "@@ -93,7 +93,7 @@ pre, .rustdoc.source .example-wrap {\n \tbackground-color: #0a042f !important;\n }\n \n-.docblock h1, .docblock h2, .docblock h3, .docblock h4, .docblock h5 {\n+.docblock h1, .docblock h2, .docblock h3, .docblock h4, .docblock h5, .docblock h6 {\n \tborder-bottom-color: #DDD;\n }\n "}, {"sha": "28d2e99a3d07359fa8147753cc14ca3fddf78817", "filename": "src/librustdoc/html/static/css/themes/light.css", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0eabf25b90396dead0b2a1aaa275af18a1ae6008/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "raw_url": "https://github.com/rust-lang/rust/raw/0eabf25b90396dead0b2a1aaa275af18a1ae6008/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css?ref=0eabf25b90396dead0b2a1aaa275af18a1ae6008", "patch": "@@ -93,7 +93,7 @@ pre, .rustdoc.source .example-wrap {\n \tbackground-color: #f6fdb0 !important;\n }\n \n-.docblock h1, .docblock h2, .docblock h3, .docblock h4, .docblock h5 {\n+.docblock h1, .docblock h2, .docblock h3, .docblock h4, .docblock h5, .docblock h6 {\n \tborder-bottom-color: #ddd;\n }\n "}, {"sha": "47b24d40edc27ccaac299bfe59f804cd9ca4675d", "filename": "src/librustdoc/markdown.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0eabf25b90396dead0b2a1aaa275af18a1ae6008/src%2Flibrustdoc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0eabf25b90396dead0b2a1aaa275af18a1ae6008/src%2Flibrustdoc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown.rs?ref=0eabf25b90396dead0b2a1aaa275af18a1ae6008", "patch": "@@ -10,7 +10,9 @@ use crate::config::{Options, RenderOptions};\n use crate::doctest::{Collector, TestOptions};\n use crate::html::escape::Escape;\n use crate::html::markdown;\n-use crate::html::markdown::{find_testable_code, ErrorCodes, IdMap, Markdown, MarkdownWithToc};\n+use crate::html::markdown::{\n+    find_testable_code, ErrorCodes, HeadingOffset, IdMap, Markdown, MarkdownWithToc,\n+};\n \n /// Separate any lines at the start of the file that begin with `# ` or `%`.\n fn extract_leading_metadata(s: &str) -> (Vec<&str>, &str) {\n@@ -70,7 +72,16 @@ crate fn render<P: AsRef<Path>>(\n     let text = if !options.markdown_no_toc {\n         MarkdownWithToc(text, &mut ids, error_codes, edition, &playground).into_string()\n     } else {\n-        Markdown(text, &[], &mut ids, error_codes, edition, &playground).into_string()\n+        Markdown {\n+            content: text,\n+            links: &[],\n+            ids: &mut ids,\n+            error_codes,\n+            edition,\n+            playground: &playground,\n+            heading_offset: HeadingOffset::H1,\n+        }\n+        .into_string()\n     };\n \n     let err = write!("}, {"sha": "aee93b93e3737177ab4fdb96a114c201e905de07", "filename": "src/test/codegen/alloc-optimisation.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0eabf25b90396dead0b2a1aaa275af18a1ae6008/src%2Ftest%2Fcodegen%2Falloc-optimisation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0eabf25b90396dead0b2a1aaa275af18a1ae6008/src%2Ftest%2Fcodegen%2Falloc-optimisation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Falloc-optimisation.rs?ref=0eabf25b90396dead0b2a1aaa275af18a1ae6008", "patch": "@@ -1,4 +1,5 @@\n //\n+// no-system-llvm\n // min-llvm-version: 10.0.1\n // compile-flags: -O\n #![crate_type=\"lib\"]"}, {"sha": "3f8e16882911ae3195db0a21e0311d3c956bcc63", "filename": "src/test/rustdoc/external-cross.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0eabf25b90396dead0b2a1aaa275af18a1ae6008/src%2Ftest%2Frustdoc%2Fexternal-cross.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0eabf25b90396dead0b2a1aaa275af18a1ae6008/src%2Ftest%2Frustdoc%2Fexternal-cross.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fexternal-cross.rs?ref=0eabf25b90396dead0b2a1aaa275af18a1ae6008", "patch": "@@ -6,5 +6,5 @@\n extern crate external_cross;\n \n // @has host/struct.NeedMoreDocs.html\n-// @has - '//h1' 'Cross-crate imported docs'\n+// @has - '//h2' 'Cross-crate imported docs'\n pub use external_cross::NeedMoreDocs;"}, {"sha": "bd322d67a370d4ddbca64ffd4373a7195e43c510", "filename": "src/test/rustdoc/external-doc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0eabf25b90396dead0b2a1aaa275af18a1ae6008/src%2Ftest%2Frustdoc%2Fexternal-doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0eabf25b90396dead0b2a1aaa275af18a1ae6008/src%2Ftest%2Frustdoc%2Fexternal-doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fexternal-doc.rs?ref=0eabf25b90396dead0b2a1aaa275af18a1ae6008", "patch": "@@ -1,14 +1,14 @@\n // @has external_doc/struct.IncludeStrDocs.html\n-// @has - '//h1' 'External Docs'\n-// @has - '//h2' 'Inline Docs'\n+// @has - '//h2' 'External Docs'\n+// @has - '//h3' 'Inline Docs'\n #[doc = include_str!(\"auxiliary/external-doc.md\")]\n /// ## Inline Docs\n pub struct IncludeStrDocs;\n \n macro_rules! dir { () => { \"auxiliary\" } }\n \n // @has external_doc/struct.EagerExpansion.html\n-// @has - '//h1' 'External Docs'\n+// @has - '//h2' 'External Docs'\n #[doc = include_str!(concat!(dir!(), \"/external-doc.md\"))]\n /// ## Inline Docs\n pub struct EagerExpansion;"}, {"sha": "4944f8157014ed4a7562635f366ee1aaad8b541b", "filename": "src/test/rustdoc/issue-42760.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0eabf25b90396dead0b2a1aaa275af18a1ae6008/src%2Ftest%2Frustdoc%2Fissue-42760.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0eabf25b90396dead0b2a1aaa275af18a1ae6008/src%2Ftest%2Frustdoc%2Fissue-42760.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-42760.rs?ref=0eabf25b90396dead0b2a1aaa275af18a1ae6008", "patch": "@@ -1,5 +1,5 @@\n // @has issue_42760/struct.NonGen.html\n-// @has - '//h1' 'Example'\n+// @has - '//h2' 'Example'\n \n /// Item docs.\n ///"}, {"sha": "bb706c28ffa51c32760acc534142ec592b835127", "filename": "src/test/rustdoc/issue-89309-heading-levels.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/0eabf25b90396dead0b2a1aaa275af18a1ae6008/src%2Ftest%2Frustdoc%2Fissue-89309-heading-levels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0eabf25b90396dead0b2a1aaa275af18a1ae6008/src%2Ftest%2Frustdoc%2Fissue-89309-heading-levels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-89309-heading-levels.rs?ref=0eabf25b90396dead0b2a1aaa275af18a1ae6008", "patch": "@@ -0,0 +1,29 @@\n+#![crate_name = \"foo\"]\n+\n+// @has foo/trait.Read.html\n+// @has - '//h2' 'Trait examples'\n+/// # Trait examples\n+pub trait Read {\n+    // @has - '//h5' 'Function examples'\n+    /// # Function examples\n+    fn read(&mut self, buf: &mut [u8]) -> Result<usize, ()>;\n+}\n+\n+pub struct Foo;\n+\n+// @has foo/struct.Foo.html\n+impl Foo {\n+    // @has - '//h5' 'Implementation header'\n+    /// # Implementation header\n+    pub fn bar(&self) -> usize {\n+        1\n+    }\n+}\n+\n+impl Read for Foo {\n+    // @has - '//h5' 'Trait implementation header'\n+    /// # Trait implementation header\n+    fn read(&mut self, buf: &mut [u8]) -> Result<usize, ()> {\n+        Ok(1)\n+    }\n+}"}, {"sha": "17c44eab091a6fc79cde810baff664ff5ff4f45f", "filename": "src/test/rustdoc/short-docblock.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0eabf25b90396dead0b2a1aaa275af18a1ae6008/src%2Ftest%2Frustdoc%2Fshort-docblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0eabf25b90396dead0b2a1aaa275af18a1ae6008/src%2Ftest%2Frustdoc%2Fshort-docblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fshort-docblock.rs?ref=0eabf25b90396dead0b2a1aaa275af18a1ae6008", "patch": "@@ -2,7 +2,7 @@\n \n // @has foo/index.html '//*[@class=\"item-right docblock-short\"]/p' 'fooo'\n // @!has foo/index.html '//*[@class=\"item-right docblock-short\"]/p/h1' 'fooo'\n-// @has foo/fn.foo.html '//h1[@id=\"fooo\"]/a[@href=\"#fooo\"]' 'fooo'\n+// @has foo/fn.foo.html '//h2[@id=\"fooo\"]/a[@href=\"#fooo\"]' 'fooo'\n \n /// # fooo\n ///\n@@ -11,7 +11,7 @@ pub fn foo() {}\n \n // @has foo/index.html '//*[@class=\"item-right docblock-short\"]/p' 'mooood'\n // @!has foo/index.html '//*[@class=\"item-right docblock-short\"]/p/h2' 'mooood'\n-// @has foo/foo/index.html '//h2[@id=\"mooood\"]/a[@href=\"#mooood\"]' 'mooood'\n+// @has foo/foo/index.html '//h3[@id=\"mooood\"]/a[@href=\"#mooood\"]' 'mooood'\n \n /// ## mooood\n ///"}, {"sha": "7ae5bd699457919018fce65274c802c68c393511", "filename": "src/test/rustdoc/smart-punct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0eabf25b90396dead0b2a1aaa275af18a1ae6008/src%2Ftest%2Frustdoc%2Fsmart-punct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0eabf25b90396dead0b2a1aaa275af18a1ae6008/src%2Ftest%2Frustdoc%2Fsmart-punct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsmart-punct.rs?ref=0eabf25b90396dead0b2a1aaa275af18a1ae6008", "patch": "@@ -21,7 +21,7 @@\n //! ```\n \n // @has \"foo/index.html\" \"//p\" \"This is the \u201cstart\u201d of the \u2018document\u2019! How\u2019d you know that \u201cit\u2019s\u201d the start?\"\n-// @has \"foo/index.html\" \"//h1\" \"Header with \u201csmart punct\u2019\u201d\"\n+// @has \"foo/index.html\" \"//h2\" \"Header with \u201csmart punct\u2019\u201d\"\n // @has \"foo/index.html\" '//a[@href=\"https://www.rust-lang.org\"]' \"link with \u201csmart punct\u2019\u201d \u2013 yessiree!\"\n // @has \"foo/index.html\" '//code' \"this inline code -- it shouldn't have \\\"smart punct\\\"\"\n // @has \"foo/index.html\" '//pre' \"let x = \\\"don't smart-punct me -- please!\\\";\""}, {"sha": "786f621326049b7eb9cf1ccf62e3e8d5d186218a", "filename": "src/test/ui/async-await/issues/issue-62097.nll.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0eabf25b90396dead0b2a1aaa275af18a1ae6008/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0eabf25b90396dead0b2a1aaa275af18a1ae6008/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.nll.stderr?ref=0eabf25b90396dead0b2a1aaa275af18a1ae6008", "patch": "@@ -20,9 +20,15 @@ error[E0521]: borrowed data escapes outside of associated function\n   --> $DIR/issue-62097.rs:13:9\n    |\n LL |     pub async fn run_dummy_fn(&self) {\n-   |                               ----- `self` is a reference that is only valid in the associated function body\n+   |                               -----\n+   |                               |\n+   |                               `self` is a reference that is only valid in the associated function body\n+   |                               let's call the lifetime of this reference `'1`\n LL |         foo(|| self.bar()).await;\n-   |         ^^^^^^^^^^^^^^^^^^ `self` escapes the associated function body here\n+   |         ^^^^^^^^^^^^^^^^^^\n+   |         |\n+   |         `self` escapes the associated function body here\n+   |         argument requires that `'1` must outlive `'static`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "04c10a5f79ed4d580244dfce4f031e3279100fe8", "filename": "src/test/ui/cast/issue-89497.fixed", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0eabf25b90396dead0b2a1aaa275af18a1ae6008/src%2Ftest%2Fui%2Fcast%2Fissue-89497.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0eabf25b90396dead0b2a1aaa275af18a1ae6008/src%2Ftest%2Fui%2Fcast%2Fissue-89497.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast%2Fissue-89497.fixed?ref=0eabf25b90396dead0b2a1aaa275af18a1ae6008", "patch": "@@ -0,0 +1,10 @@\n+// Regression test for issue #89497.\n+\n+// run-rustfix\n+\n+fn main() {\n+    let pointer: usize = &1_i32 as *const i32 as usize;\n+    let _reference: &'static i32 = unsafe { &*(pointer as *const i32) };\n+    //~^ ERROR: non-primitive cast\n+    //~| HELP: consider borrowing the value\n+}"}, {"sha": "76301b704c81c08b8b81807152d09a98e99c618d", "filename": "src/test/ui/cast/issue-89497.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0eabf25b90396dead0b2a1aaa275af18a1ae6008/src%2Ftest%2Fui%2Fcast%2Fissue-89497.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0eabf25b90396dead0b2a1aaa275af18a1ae6008/src%2Ftest%2Fui%2Fcast%2Fissue-89497.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast%2Fissue-89497.rs?ref=0eabf25b90396dead0b2a1aaa275af18a1ae6008", "patch": "@@ -0,0 +1,10 @@\n+// Regression test for issue #89497.\n+\n+// run-rustfix\n+\n+fn main() {\n+    let pointer: usize = &1_i32 as *const i32 as usize;\n+    let _reference: &'static i32 = unsafe { pointer as *const i32 as &'static i32 };\n+    //~^ ERROR: non-primitive cast\n+    //~| HELP: consider borrowing the value\n+}"}, {"sha": "3726f8a41015ec540f014fba07e4c24e0bc5e491", "filename": "src/test/ui/cast/issue-89497.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0eabf25b90396dead0b2a1aaa275af18a1ae6008/src%2Ftest%2Fui%2Fcast%2Fissue-89497.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0eabf25b90396dead0b2a1aaa275af18a1ae6008/src%2Ftest%2Fui%2Fcast%2Fissue-89497.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast%2Fissue-89497.stderr?ref=0eabf25b90396dead0b2a1aaa275af18a1ae6008", "patch": "@@ -0,0 +1,15 @@\n+error[E0605]: non-primitive cast: `*const i32` as `&'static i32`\n+  --> $DIR/issue-89497.rs:7:45\n+   |\n+LL |     let _reference: &'static i32 = unsafe { pointer as *const i32 as &'static i32 };\n+   |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ invalid cast\n+   |\n+help: consider borrowing the value\n+   |\n+LL -     let _reference: &'static i32 = unsafe { pointer as *const i32 as &'static i32 };\n+LL +     let _reference: &'static i32 = unsafe { &*(pointer as *const i32) };\n+   | \n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0605`."}, {"sha": "b79bc262d2bac1877a3ee9af2dfea10e5ab12189", "filename": "src/test/ui/const-generics/generic_const_exprs/const_eval_resolve_canonical.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/0eabf25b90396dead0b2a1aaa275af18a1ae6008/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fconst_eval_resolve_canonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0eabf25b90396dead0b2a1aaa275af18a1ae6008/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fconst_eval_resolve_canonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fconst_eval_resolve_canonical.rs?ref=0eabf25b90396dead0b2a1aaa275af18a1ae6008", "patch": "@@ -0,0 +1,29 @@\n+// run-pass\n+#![feature(generic_const_exprs)]\n+#![allow(incomplete_features)]\n+\n+trait Foo<const N: usize> {\n+    type Assoc: Default;\n+}\n+\n+impl Foo<0> for () {\n+    type Assoc = u32;\n+}\n+\n+impl Foo<3> for () {\n+    type Assoc = i64;\n+}\n+\n+fn foo<T, const N: usize>(_: T) -> <() as Foo<{ N + 1 }>>::Assoc\n+where\n+    (): Foo<{ N + 1 }>,\n+{\n+    Default::default()\n+}\n+\n+fn main() {\n+    // Test that we can correctly infer `T` which requires evaluating\n+    // `{ N + 1 }` which has substs containing an inference var\n+    let mut _q = Default::default();\n+    _q = foo::<_, 2>(_q);\n+}"}, {"sha": "d082b6c10cc2a5ffa41360809d104496ebc990be", "filename": "src/test/ui/error-codes/E0605.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0eabf25b90396dead0b2a1aaa275af18a1ae6008/src%2Ftest%2Fui%2Ferror-codes%2FE0605.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0eabf25b90396dead0b2a1aaa275af18a1ae6008/src%2Ftest%2Fui%2Ferror-codes%2FE0605.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0605.stderr?ref=0eabf25b90396dead0b2a1aaa275af18a1ae6008", "patch": "@@ -12,8 +12,9 @@ LL |     v as &u8;\n    |\n help: consider borrowing the value\n    |\n-LL |     &*v as &u8;\n-   |     ++\n+LL -     v as &u8;\n+LL +     &*v;\n+   | \n \n error: aborting due to 2 previous errors\n "}, {"sha": "88c260b18cbb001aacac64cc9d47f6b35d7b141d", "filename": "src/test/ui/impl-header-lifetime-elision/dyn-trait.nll.stderr", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0eabf25b90396dead0b2a1aaa275af18a1ae6008/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fdyn-trait.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0eabf25b90396dead0b2a1aaa275af18a1ae6008/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fdyn-trait.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fdyn-trait.nll.stderr?ref=0eabf25b90396dead0b2a1aaa275af18a1ae6008", "patch": "@@ -2,9 +2,14 @@ error[E0521]: borrowed data escapes outside of function\n   --> $DIR/dyn-trait.rs:20:5\n    |\n LL | fn with_dyn_debug_static<'a>(x: Box<dyn Debug + 'a>) {\n-   |                              - `x` is a reference that is only valid in the function body\n+   |                          --  - `x` is a reference that is only valid in the function body\n+   |                          |\n+   |                          lifetime `'a` defined here\n LL |     static_val(x);\n-   |     ^^^^^^^^^^^^^ `x` escapes the function body here\n+   |     ^^^^^^^^^^^^^\n+   |     |\n+   |     `x` escapes the function body here\n+   |     argument requires that `'a` must outlive `'static`\n \n error: aborting due to previous error\n "}, {"sha": "0e8f520353fbafc1b0ecbb06ee3ed0169a29ec2d", "filename": "src/test/ui/issues/issue-16683.nll.stderr", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0eabf25b90396dead0b2a1aaa275af18a1ae6008/src%2Ftest%2Fui%2Fissues%2Fissue-16683.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0eabf25b90396dead0b2a1aaa275af18a1ae6008/src%2Ftest%2Fui%2Fissues%2Fissue-16683.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16683.nll.stderr?ref=0eabf25b90396dead0b2a1aaa275af18a1ae6008", "patch": "@@ -1,10 +1,19 @@\n error[E0521]: borrowed data escapes outside of associated function\n   --> $DIR/issue-16683.rs:4:9\n    |\n+LL | trait T<'a> {\n+   |         -- lifetime `'a` defined here\n+LL |     fn a(&'a self) -> &'a bool;\n LL |     fn b(&self) {\n-   |          ----- `self` is a reference that is only valid in the associated function body\n+   |          -----\n+   |          |\n+   |          `self` is a reference that is only valid in the associated function body\n+   |          let's call the lifetime of this reference `'1`\n LL |         self.a();\n-   |         ^^^^^^^^ `self` escapes the associated function body here\n+   |         ^^^^^^^^\n+   |         |\n+   |         `self` escapes the associated function body here\n+   |         argument requires that `'1` must outlive `'a`\n \n error: aborting due to previous error\n "}, {"sha": "b929fdbf3687aa83839050fdbef148e43252f084", "filename": "src/test/ui/issues/issue-17758.nll.stderr", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0eabf25b90396dead0b2a1aaa275af18a1ae6008/src%2Ftest%2Fui%2Fissues%2Fissue-17758.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0eabf25b90396dead0b2a1aaa275af18a1ae6008/src%2Ftest%2Fui%2Fissues%2Fissue-17758.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17758.nll.stderr?ref=0eabf25b90396dead0b2a1aaa275af18a1ae6008", "patch": "@@ -1,10 +1,19 @@\n error[E0521]: borrowed data escapes outside of associated function\n   --> $DIR/issue-17758.rs:7:9\n    |\n+LL | trait Foo<'a> {\n+   |           -- lifetime `'a` defined here\n+LL |     fn foo(&'a self);\n LL |     fn bar(&self) {\n-   |            ----- `self` is a reference that is only valid in the associated function body\n+   |            -----\n+   |            |\n+   |            `self` is a reference that is only valid in the associated function body\n+   |            let's call the lifetime of this reference `'1`\n LL |         self.foo();\n-   |         ^^^^^^^^^^ `self` escapes the associated function body here\n+   |         ^^^^^^^^^^\n+   |         |\n+   |         `self` escapes the associated function body here\n+   |         argument requires that `'1` must outlive `'a`\n \n error: aborting due to previous error\n "}, {"sha": "7616f987d7312803c1813a4e19a03528248c5079", "filename": "src/test/ui/issues/issue-2995.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0eabf25b90396dead0b2a1aaa275af18a1ae6008/src%2Ftest%2Fui%2Fissues%2Fissue-2995.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0eabf25b90396dead0b2a1aaa275af18a1ae6008/src%2Ftest%2Fui%2Fissues%2Fissue-2995.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-2995.stderr?ref=0eabf25b90396dead0b2a1aaa275af18a1ae6008", "patch": "@@ -6,8 +6,9 @@ LL |     let _q: &isize = p as &isize;\n    |\n help: consider borrowing the value\n    |\n-LL |     let _q: &isize = &*p as &isize;\n-   |                      ++\n+LL -     let _q: &isize = p as &isize;\n+LL +     let _q: &isize = &*p;\n+   | \n \n error: aborting due to previous error\n "}, {"sha": "6f3f84096e4002c9b10d3188893e891606b99537", "filename": "src/test/ui/lifetimes/lifetime-bound-will-change-warning.nll.stderr", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0eabf25b90396dead0b2a1aaa275af18a1ae6008/src%2Ftest%2Fui%2Flifetimes%2Flifetime-bound-will-change-warning.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0eabf25b90396dead0b2a1aaa275af18a1ae6008/src%2Ftest%2Fui%2Flifetimes%2Flifetime-bound-will-change-warning.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-bound-will-change-warning.nll.stderr?ref=0eabf25b90396dead0b2a1aaa275af18a1ae6008", "patch": "@@ -2,19 +2,29 @@ error[E0521]: borrowed data escapes outside of function\n   --> $DIR/lifetime-bound-will-change-warning.rs:34:5\n    |\n LL | fn test2<'a>(x: &'a Box<dyn Fn() + 'a>) {\n-   |              - `x` is a reference that is only valid in the function body\n+   |          --  - `x` is a reference that is only valid in the function body\n+   |          |\n+   |          lifetime `'a` defined here\n LL |     // but ref_obj will not, so warn.\n LL |     ref_obj(x)\n-   |     ^^^^^^^^^^ `x` escapes the function body here\n+   |     ^^^^^^^^^^\n+   |     |\n+   |     `x` escapes the function body here\n+   |     argument requires that `'a` must outlive `'static`\n \n error[E0521]: borrowed data escapes outside of function\n   --> $DIR/lifetime-bound-will-change-warning.rs:39:5\n    |\n LL | fn test2cc<'a>(x: &'a Box<dyn Fn() + 'a>) {\n-   |                - `x` is a reference that is only valid in the function body\n+   |            --  - `x` is a reference that is only valid in the function body\n+   |            |\n+   |            lifetime `'a` defined here\n LL |     // same as test2, but cross crate\n LL |     lib::ref_obj(x)\n-   |     ^^^^^^^^^^^^^^^ `x` escapes the function body here\n+   |     ^^^^^^^^^^^^^^^\n+   |     |\n+   |     `x` escapes the function body here\n+   |     argument requires that `'a` must outlive `'static`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "7f91d5ed42ce4d6c446585c160b6af6ab8871ed1", "filename": "src/test/ui/mismatched_types/cast-rfc0401.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0eabf25b90396dead0b2a1aaa275af18a1ae6008/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0eabf25b90396dead0b2a1aaa275af18a1ae6008/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr?ref=0eabf25b90396dead0b2a1aaa275af18a1ae6008", "patch": "@@ -28,8 +28,9 @@ LL |     let _ = v as &u8;\n    |\n help: consider borrowing the value\n    |\n-LL |     let _ = &*v as &u8;\n-   |             ++\n+LL -     let _ = v as &u8;\n+LL +     let _ = &*v;\n+   | \n \n error[E0605]: non-primitive cast: `*const u8` as `E`\n   --> $DIR/cast-rfc0401.rs:30:13"}, {"sha": "d77793291c5c53bafa231b757373d26ec9a3cc4b", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-no-bound.stderr", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0eabf25b90396dead0b2a1aaa275af18a1ae6008/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0eabf25b90396dead0b2a1aaa275af18a1ae6008/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr?ref=0eabf25b90396dead0b2a1aaa275af18a1ae6008", "patch": "@@ -38,14 +38,19 @@ error[E0521]: borrowed data escapes outside of function\n   --> $DIR/propagate-approximated-shorter-to-static-no-bound.rs:32:5\n    |\n LL |   fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n-   |                     ------ `cell_a` is a reference that is only valid in the function body\n+   |             --      ------ `cell_a` is a reference that is only valid in the function body\n+   |             |\n+   |             lifetime `'a` defined here\n LL | /     establish_relationships(&cell_a, &cell_b, |_outlives, x, y| {\n LL | |\n LL | |\n LL | |         // Only works if 'x: 'y:\n LL | |         demand_y(x, y, x.get())\n LL | |     });\n-   | |______^ `cell_a` escapes the function body here\n+   | |      ^\n+   | |      |\n+   | |______`cell_a` escapes the function body here\n+   |        argument requires that `'a` must outlive `'static`\n \n error: aborting due to previous error\n "}, {"sha": "cc67270ad20c1761a9be5d97ac208153cbce3ab4", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-wrong-bound.stderr", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0eabf25b90396dead0b2a1aaa275af18a1ae6008/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0eabf25b90396dead0b2a1aaa275af18a1ae6008/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr?ref=0eabf25b90396dead0b2a1aaa275af18a1ae6008", "patch": "@@ -38,14 +38,19 @@ error[E0521]: borrowed data escapes outside of function\n   --> $DIR/propagate-approximated-shorter-to-static-wrong-bound.rs:35:5\n    |\n LL |   fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n-   |                     ------ `cell_a` is a reference that is only valid in the function body\n+   |             --      ------ `cell_a` is a reference that is only valid in the function body\n+   |             |\n+   |             lifetime `'a` defined here\n LL | /     establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x, y| {\n LL | |\n LL | |\n LL | |         // Only works if 'x: 'y:\n LL | |         demand_y(x, y, x.get())\n LL | |     });\n-   | |______^ `cell_a` escapes the function body here\n+   | |      ^\n+   | |      |\n+   | |______`cell_a` escapes the function body here\n+   |        argument requires that `'a` must outlive `'static`\n \n error: aborting due to previous error\n "}, {"sha": "8c21737e05fe89fc74946acf1173a925a1b7fccf", "filename": "src/test/ui/nll/issue-67007-escaping-data.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0eabf25b90396dead0b2a1aaa275af18a1ae6008/src%2Ftest%2Fui%2Fnll%2Fissue-67007-escaping-data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0eabf25b90396dead0b2a1aaa275af18a1ae6008/src%2Ftest%2Fui%2Fnll%2Fissue-67007-escaping-data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-67007-escaping-data.rs?ref=0eabf25b90396dead0b2a1aaa275af18a1ae6008", "patch": "@@ -0,0 +1,26 @@\n+// Regression test for issue #67007\n+// Ensures that we show information about the specific regions involved\n+\n+#![feature(nll)]\n+\n+// Covariant over 'a, invariant over 'tcx\n+struct FnCtxt<'a, 'tcx: 'a>(&'a (), *mut &'tcx ());\n+\n+impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n+    fn use_it(&self, _: &'tcx ()) {}\n+}\n+\n+struct Consumer<'tcx>(&'tcx ());\n+\n+impl<'tcx> Consumer<'tcx> {\n+    fn bad_method<'a>(&self, fcx: &FnCtxt<'a, 'tcx>) {\n+        let other = self.use_fcx(fcx); //~ ERROR borrowed data\n+        fcx.use_it(other);\n+    }\n+\n+    fn use_fcx<'a>(&self, _: &FnCtxt<'a, 'tcx>) -> &'a () {\n+        &()\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "2834d6fb0d2143101de9401948683f4370afa20b", "filename": "src/test/ui/nll/issue-67007-escaping-data.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/0eabf25b90396dead0b2a1aaa275af18a1ae6008/src%2Ftest%2Fui%2Fnll%2Fissue-67007-escaping-data.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0eabf25b90396dead0b2a1aaa275af18a1ae6008/src%2Ftest%2Fui%2Fnll%2Fissue-67007-escaping-data.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-67007-escaping-data.stderr?ref=0eabf25b90396dead0b2a1aaa275af18a1ae6008", "patch": "@@ -0,0 +1,21 @@\n+error[E0521]: borrowed data escapes outside of associated function\n+  --> $DIR/issue-67007-escaping-data.rs:17:21\n+   |\n+LL | impl<'tcx> Consumer<'tcx> {\n+   |      ---- lifetime `'tcx` defined here\n+LL |     fn bad_method<'a>(&self, fcx: &FnCtxt<'a, 'tcx>) {\n+   |                   --  -----  --- `fcx` is a reference that is only valid in the associated function body\n+   |                   |   |\n+   |                   |   `self` declared here, outside of the associated function body\n+   |                   lifetime `'a` defined here\n+LL |         let other = self.use_fcx(fcx);\n+   |                     ^^^^^^^^^^^^^^^^^\n+   |                     |\n+   |                     `fcx` escapes the associated function body here\n+   |                     argument requires that `'a` must outlive `'tcx`\n+   |\n+   = help: consider adding the following bound: `'a: 'tcx`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0521`."}, {"sha": "3b2017d2d03a1e8b467ad8088825eca4e6850b9b", "filename": "src/test/ui/nll/outlives-suggestion-simple.stderr", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0eabf25b90396dead0b2a1aaa275af18a1ae6008/src%2Ftest%2Fui%2Fnll%2Foutlives-suggestion-simple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0eabf25b90396dead0b2a1aaa275af18a1ae6008/src%2Ftest%2Fui%2Fnll%2Foutlives-suggestion-simple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Foutlives-suggestion-simple.stderr?ref=0eabf25b90396dead0b2a1aaa275af18a1ae6008", "patch": "@@ -92,13 +92,20 @@ LL |         self.x\n error[E0521]: borrowed data escapes outside of associated function\n   --> $DIR/outlives-suggestion-simple.rs:73:9\n    |\n+LL | impl<'a> Foo2<'a> {\n+   |      -- lifetime `'a` defined here\n+LL |     // should not produce outlives suggestions to name 'self\n LL |     fn get_bar(&self) -> Bar2 {\n    |                -----\n    |                |\n    |                `self` declared here, outside of the associated function body\n    |                `self` is a reference that is only valid in the associated function body\n+   |                let's call the lifetime of this reference `'1`\n LL |         Bar2::new(&self)\n-   |         ^^^^^^^^^^^^^^^^ `self` escapes the associated function body here\n+   |         ^^^^^^^^^^^^^^^^\n+   |         |\n+   |         `self` escapes the associated function body here\n+   |         argument requires that `'1` must outlive `'a`\n \n error: aborting due to 9 previous errors\n "}, {"sha": "20002e4591d1aeb0108e0e137b31935ebc53008b", "filename": "src/test/ui/nll/user-annotations/closure-substs.stderr", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0eabf25b90396dead0b2a1aaa275af18a1ae6008/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fclosure-substs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0eabf25b90396dead0b2a1aaa275af18a1ae6008/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fclosure-substs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fclosure-substs.stderr?ref=0eabf25b90396dead0b2a1aaa275af18a1ae6008", "patch": "@@ -28,9 +28,14 @@ error[E0521]: borrowed data escapes outside of closure\n   --> $DIR/closure-substs.rs:29:9\n    |\n LL |     |x: &i32, b: fn(&'static i32)| {\n-   |      - `x` is a reference that is only valid in the closure body\n+   |      -  - let's call the lifetime of this reference `'1`\n+   |      |\n+   |      `x` is a reference that is only valid in the closure body\n LL |         b(x);\n-   |         ^^^^ `x` escapes the closure body here\n+   |         ^^^^\n+   |         |\n+   |         `x` escapes the closure body here\n+   |         argument requires that `'1` must outlive `'static`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "af20c5e5fc0dac1065f4ee1ba837969ec235dd1a", "filename": "src/test/ui/object-lifetime/object-lifetime-default-mybox.nll.stderr", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0eabf25b90396dead0b2a1aaa275af18a1ae6008/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-mybox.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0eabf25b90396dead0b2a1aaa275af18a1ae6008/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-mybox.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-mybox.nll.stderr?ref=0eabf25b90396dead0b2a1aaa275af18a1ae6008", "patch": "@@ -15,9 +15,14 @@ error[E0521]: borrowed data escapes outside of function\n   --> $DIR/object-lifetime-default-mybox.rs:31:5\n    |\n LL | fn load2<'a>(ss: &MyBox<dyn SomeTrait + 'a>) -> MyBox<dyn SomeTrait + 'a> {\n-   |              -- `ss` is a reference that is only valid in the function body\n+   |          --  -- `ss` is a reference that is only valid in the function body\n+   |          |\n+   |          lifetime `'a` defined here\n LL |     load0(ss)\n-   |     ^^^^^^^^^ `ss` escapes the function body here\n+   |     ^^^^^^^^^\n+   |     |\n+   |     `ss` escapes the function body here\n+   |     argument requires that `'a` must outlive `'static`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "06a62db4ebb0f37014d835f0e71fc2f2fe85ad25", "filename": "src/test/ui/print_type_sizes/uninhabited.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0eabf25b90396dead0b2a1aaa275af18a1ae6008/src%2Ftest%2Fui%2Fprint_type_sizes%2Funinhabited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0eabf25b90396dead0b2a1aaa275af18a1ae6008/src%2Ftest%2Fui%2Fprint_type_sizes%2Funinhabited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Funinhabited.rs?ref=0eabf25b90396dead0b2a1aaa275af18a1ae6008", "patch": "@@ -11,5 +11,5 @@\n fn start(_: isize, _: *const *const u8) -> isize {\n     let _x: Option<!> = None;\n     let _y: Result<u32, !> = Ok(42);\n-    0\n+    let _z: Result<!, !> = loop {};\n }"}, {"sha": "5eb5384bce34060023359990010bc47617a2e145", "filename": "src/test/ui/print_type_sizes/uninhabited.stdout", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0eabf25b90396dead0b2a1aaa275af18a1ae6008/src%2Ftest%2Fui%2Fprint_type_sizes%2Funinhabited.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/0eabf25b90396dead0b2a1aaa275af18a1ae6008/src%2Ftest%2Fui%2Fprint_type_sizes%2Funinhabited.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Funinhabited.stdout?ref=0eabf25b90396dead0b2a1aaa275af18a1ae6008", "patch": "@@ -3,3 +3,4 @@ print-type-size     variant `Ok`: 4 bytes\n print-type-size         field `.0`: 4 bytes\n print-type-size type: `std::option::Option<!>`: 0 bytes, alignment: 1 bytes\n print-type-size     variant `None`: 0 bytes\n+print-type-size type: `std::result::Result<!, !>`: 0 bytes, alignment: 1 bytes"}, {"sha": "721dafac0be7664ecbd28e6cd77b50eeda3bb712", "filename": "src/test/ui/regions/issue-78262.nll.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0eabf25b90396dead0b2a1aaa275af18a1ae6008/src%2Ftest%2Fui%2Fregions%2Fissue-78262.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0eabf25b90396dead0b2a1aaa275af18a1ae6008/src%2Ftest%2Fui%2Fregions%2Fissue-78262.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fissue-78262.nll.stderr?ref=0eabf25b90396dead0b2a1aaa275af18a1ae6008", "patch": "@@ -2,8 +2,11 @@ error[E0521]: borrowed data escapes outside of closure\n   --> $DIR/issue-78262.rs:14:26\n    |\n LL |     let f = |x: &dyn TT| x.func();\n-   |              -           ^^^^^^^^ `x` escapes the closure body here\n-   |              |\n+   |              -  -        ^^^^^^^^\n+   |              |  |        |\n+   |              |  |        `x` escapes the closure body here\n+   |              |  |        argument requires that `'1` must outlive `'static`\n+   |              |  let's call the lifetime of this reference `'1`\n    |              `x` is a reference that is only valid in the closure body\n \n error: aborting due to previous error"}, {"sha": "721dafac0be7664ecbd28e6cd77b50eeda3bb712", "filename": "src/test/ui/regions/issue-78262.polonius.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0eabf25b90396dead0b2a1aaa275af18a1ae6008/src%2Ftest%2Fui%2Fregions%2Fissue-78262.polonius.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0eabf25b90396dead0b2a1aaa275af18a1ae6008/src%2Ftest%2Fui%2Fregions%2Fissue-78262.polonius.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fissue-78262.polonius.stderr?ref=0eabf25b90396dead0b2a1aaa275af18a1ae6008", "patch": "@@ -2,8 +2,11 @@ error[E0521]: borrowed data escapes outside of closure\n   --> $DIR/issue-78262.rs:14:26\n    |\n LL |     let f = |x: &dyn TT| x.func();\n-   |              -           ^^^^^^^^ `x` escapes the closure body here\n-   |              |\n+   |              -  -        ^^^^^^^^\n+   |              |  |        |\n+   |              |  |        `x` escapes the closure body here\n+   |              |  |        argument requires that `'1` must outlive `'static`\n+   |              |  let's call the lifetime of this reference `'1`\n    |              `x` is a reference that is only valid in the closure body\n \n error: aborting due to previous error"}, {"sha": "e220cbf55595630f7457e3c152d4a39881cfb791", "filename": "src/test/ui/regions/region-invariant-static-error-reporting.nll.stderr", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0eabf25b90396dead0b2a1aaa275af18a1ae6008/src%2Ftest%2Fui%2Fregions%2Fregion-invariant-static-error-reporting.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0eabf25b90396dead0b2a1aaa275af18a1ae6008/src%2Ftest%2Fui%2Fregions%2Fregion-invariant-static-error-reporting.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-invariant-static-error-reporting.nll.stderr?ref=0eabf25b90396dead0b2a1aaa275af18a1ae6008", "patch": "@@ -2,10 +2,15 @@ error[E0521]: borrowed data escapes outside of function\n   --> $DIR/region-invariant-static-error-reporting.rs:15:9\n    |\n LL | fn unify<'a>(x: Option<Invariant<'a>>, f: fn(Invariant<'a>)) {\n-   |              - `x` is a reference that is only valid in the function body\n+   |          --  - `x` is a reference that is only valid in the function body\n+   |          |\n+   |          lifetime `'a` defined here\n LL |     let bad = if x.is_some() {\n LL |         x.unwrap()\n-   |         ^^^^^^^^^^ `x` escapes the function body here\n+   |         ^^^^^^^^^^\n+   |         |\n+   |         `x` escapes the function body here\n+   |         argument requires that `'a` must outlive `'static`\n \n error: aborting due to previous error\n "}, {"sha": "83d6e13dc0a685d15b52d72c89f2aca0fc1a5a0b", "filename": "src/test/ui/regions/regions-bounded-method-type-parameters-trait-bound.nll.stderr", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0eabf25b90396dead0b2a1aaa275af18a1ae6008/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-method-type-parameters-trait-bound.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0eabf25b90396dead0b2a1aaa275af18a1ae6008/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-method-type-parameters-trait-bound.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-method-type-parameters-trait-bound.nll.stderr?ref=0eabf25b90396dead0b2a1aaa275af18a1ae6008", "patch": "@@ -2,12 +2,17 @@ error[E0521]: borrowed data escapes outside of function\n   --> $DIR/regions-bounded-method-type-parameters-trait-bound.rs:20:5\n    |\n LL | fn caller2<'a,'b,F:Foo<'a>>(a: Inv<'a>, b: Inv<'b>, f: F) {\n-   |                             -           - `b` is a reference that is only valid in the function body\n-   |                             |\n-   |                             `a` declared here, outside of the function body\n+   |            -- --            -           - `b` is a reference that is only valid in the function body\n+   |            |  |             |\n+   |            |  |             `a` declared here, outside of the function body\n+   |            |  lifetime `'b` defined here\n+   |            lifetime `'a` defined here\n LL |     // Here the value provided for 'y is 'b, and hence 'b:'a does not hold.\n LL |     f.method(b);\n-   |     ^^^^^^^^^^^ `b` escapes the function body here\n+   |     ^^^^^^^^^^^\n+   |     |\n+   |     `b` escapes the function body here\n+   |     argument requires that `'b` must outlive `'a`\n    |\n    = help: consider adding the following bound: `'b: 'a`\n "}, {"sha": "a1ef32c5445b59c754ec1d149b1fcd016c55d6bf", "filename": "src/test/ui/suggestions/impl-on-dyn-trait-with-implicit-static-bound.nll.stderr", "status": "modified", "additions": 28, "deletions": 8, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/0eabf25b90396dead0b2a1aaa275af18a1ae6008/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0eabf25b90396dead0b2a1aaa275af18a1ae6008/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound.nll.stderr?ref=0eabf25b90396dead0b2a1aaa275af18a1ae6008", "patch": "@@ -2,33 +2,53 @@ error[E0521]: borrowed data escapes outside of function\n   --> $DIR/impl-on-dyn-trait-with-implicit-static-bound.rs:20:9\n    |\n LL |     fn use_it<'a, T>(val: &'a dyn ObjectTrait<T>) -> impl OtherTrait<'a> + 'a {\n-   |                      --- `val` is a reference that is only valid in the function body\n+   |               --     --- `val` is a reference that is only valid in the function body\n+   |               |\n+   |               lifetime `'a` defined here\n LL |         val.use_self::<T>()\n-   |         ^^^^^^^^^^^^^^^^^^^ `val` escapes the function body here\n+   |         ^^^^^^^^^^^^^^^^^^^\n+   |         |\n+   |         `val` escapes the function body here\n+   |         argument requires that `'a` must outlive `'static`\n \n error[E0521]: borrowed data escapes outside of function\n   --> $DIR/impl-on-dyn-trait-with-implicit-static-bound.rs:69:9\n    |\n LL |     fn use_it<'a>(val: &'a dyn ObjectTrait) -> impl OtherTrait<'a> + 'a {\n-   |                   --- `val` is a reference that is only valid in the function body\n+   |               --  --- `val` is a reference that is only valid in the function body\n+   |               |\n+   |               lifetime `'a` defined here\n LL |         val.use_self()\n-   |         ^^^^^^^^^^^^^^ `val` escapes the function body here\n+   |         ^^^^^^^^^^^^^^\n+   |         |\n+   |         `val` escapes the function body here\n+   |         argument requires that `'a` must outlive `'static`\n \n error[E0521]: borrowed data escapes outside of function\n   --> $DIR/impl-on-dyn-trait-with-implicit-static-bound.rs:88:9\n    |\n LL |     fn use_it<'a>(val: &'a dyn ObjectTrait) -> impl OtherTrait<'a> {\n-   |                   --- `val` is a reference that is only valid in the function body\n+   |               --  --- `val` is a reference that is only valid in the function body\n+   |               |\n+   |               lifetime `'a` defined here\n LL |         val.use_self()\n-   |         ^^^^^^^^^^^^^^ `val` escapes the function body here\n+   |         ^^^^^^^^^^^^^^\n+   |         |\n+   |         `val` escapes the function body here\n+   |         argument requires that `'a` must outlive `'static`\n \n error[E0521]: borrowed data escapes outside of function\n   --> $DIR/impl-on-dyn-trait-with-implicit-static-bound.rs:108:9\n    |\n LL |     fn use_it<'a>(val: &'a dyn ObjectTrait) -> impl OtherTrait<'a> + 'a {\n-   |                   --- `val` is a reference that is only valid in the function body\n+   |               --  --- `val` is a reference that is only valid in the function body\n+   |               |\n+   |               lifetime `'a` defined here\n LL |         MyTrait::use_self(val)\n-   |         ^^^^^^^^^^^^^^^^^^^^^^ `val` escapes the function body here\n+   |         ^^^^^^^^^^^^^^^^^^^^^^\n+   |         |\n+   |         `val` escapes the function body here\n+   |         argument requires that `'a` must outlive `'static`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "39498c99e64d658b8b8456e03a21300b020c14d6", "filename": "src/tools/error_index_generator/main.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0eabf25b90396dead0b2a1aaa275af18a1ae6008/src%2Ftools%2Ferror_index_generator%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0eabf25b90396dead0b2a1aaa275af18a1ae6008/src%2Ftools%2Ferror_index_generator%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ferror_index_generator%2Fmain.rs?ref=0eabf25b90396dead0b2a1aaa275af18a1ae6008", "patch": "@@ -14,7 +14,7 @@ use std::path::PathBuf;\n \n use rustc_span::edition::DEFAULT_EDITION;\n \n-use rustdoc::html::markdown::{ErrorCodes, IdMap, Markdown, Playground};\n+use rustdoc::html::markdown::{ErrorCodes, HeadingOffset, IdMap, Markdown, Playground};\n \n pub struct ErrorMetadata {\n     pub description: Option<String>,\n@@ -119,14 +119,15 @@ impl Formatter for HTMLFormatter {\n                 write!(\n                     output,\n                     \"{}\",\n-                    Markdown(\n-                        desc,\n-                        &[],\n-                        &mut id_map,\n-                        ErrorCodes::Yes,\n-                        DEFAULT_EDITION,\n-                        &Some(playground)\n-                    )\n+                    Markdown {\n+                        content: desc,\n+                        links: &[],\n+                        ids: &mut id_map,\n+                        error_codes: ErrorCodes::Yes,\n+                        edition: DEFAULT_EDITION,\n+                        playground: &Some(playground),\n+                        heading_offset: HeadingOffset::H1,\n+                    }\n                     .into_string()\n                 )?\n             }"}]}