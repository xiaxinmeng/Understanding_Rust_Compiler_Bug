{"sha": "fb10829aefbb7493c41ee1a5ec4c958692b33c28", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiMTA4MjlhZWZiYjc0OTNjNDFlZTFhNWVjNGM5NTg2OTJiMzNjMjg=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-07-04T19:59:50Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-07-04T20:00:07Z"}, "message": "Switch the alias checking pass to use span_err instead of span_fatal\n\nIt'll now spit out all problems it finds, and only abort after\nthe whole pass has run.", "tree": {"sha": "4b8b1b3b17988605e2b2cb37929506f44d9f1ad6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b8b1b3b17988605e2b2cb37929506f44d9f1ad6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb10829aefbb7493c41ee1a5ec4c958692b33c28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb10829aefbb7493c41ee1a5ec4c958692b33c28", "html_url": "https://github.com/rust-lang/rust/commit/fb10829aefbb7493c41ee1a5ec4c958692b33c28", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb10829aefbb7493c41ee1a5ec4c958692b33c28/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b1423be1d6bbb077bc97928e36a6019e2a74c029", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1423be1d6bbb077bc97928e36a6019e2a74c029", "html_url": "https://github.com/rust-lang/rust/commit/b1423be1d6bbb077bc97928e36a6019e2a74c029"}], "stats": {"total": 25, "additions": 13, "deletions": 12}, "files": [{"sha": "3c482cc252e7683905cc8572a8beeffddcfed0ad", "filename": "src/comp/middle/alias.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/fb10829aefbb7493c41ee1a5ec4c958692b33c28/src%2Fcomp%2Fmiddle%2Falias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb10829aefbb7493c41ee1a5ec4c958692b33c28/src%2Fcomp%2Fmiddle%2Falias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Falias.rs?ref=fb10829aefbb7493c41ee1a5ec4c958692b33c28", "patch": "@@ -51,6 +51,7 @@ fn check_crate(@ty::ctxt tcx, &@ast::crate crate) {\n              visit_expr=bind visit_expr(cx, _, _, _)\n              with *visit::default_visitor[scope]());\n     visit::visit_crate(*crate, [], visit::vtor(v));\n+    tcx.sess.abort_if_errors();\n }\n \n fn visit_fn(@ctx cx, &ast::_fn f, &vec[ast::ty_param] tp, &span sp,\n@@ -93,7 +94,7 @@ fn visit_expr(@ctx cx, &@ast::expr ex, &scope sc, &vt[scope] v) {\n                 case (some(?ex)) {\n                     auto root = expr_root(*cx, ex, false);\n                     if (mut_field(root.ds)) {\n-                        cx.tcx.sess.span_fatal(ex.span,\n+                        cx.tcx.sess.span_err(ex.span,\n                                              \"result of put must be\" +\n                                                  \" immutably rooted\");\n                     }\n@@ -153,7 +154,7 @@ fn check_call(&ctx cx, &@ast::expr f, &vec[@ast::expr] args, &scope sc) ->\n                             auto m =\n                                 \"passing a temporary value or \\\n                                  immutable field by mutable alias\";\n-                            cx.tcx.sess.span_fatal(arg.span, m);\n+                            cx.tcx.sess.span_err(arg.span, m);\n                         }\n                     }\n                 }\n@@ -176,7 +177,7 @@ fn check_call(&ctx cx, &@ast::expr f, &vec[@ast::expr] args, &scope sc) ->\n         alt (f.node) {\n             case (ast::expr_path(_)) {\n                 if (def_is_local(cx.tcx.def_map.get(f.id), true)) {\n-                    cx.tcx.sess.span_fatal(f.span,\n+                    cx.tcx.sess.span_err(f.span,\n                                          #fmt(\"function may alias with \\\n                          argument %u, which is not immutably rooted\",\n                                               unsafe_t_offsets.(0)));\n@@ -195,7 +196,7 @@ fn check_call(&ctx cx, &@ast::expr f, &vec[@ast::expr] args, &scope sc) ->\n             if (i != offset &&\n                     ty_can_unsafely_include(cx, unsafe, arg_t.ty, mut_alias))\n                {\n-                cx.tcx.sess.span_fatal(args.(i).span,\n+                cx.tcx.sess.span_err(args.(i).span,\n                                      #fmt(\"argument %u may alias with \\\n                      argument %u, which is not immutably rooted\",\n                                           i, offset));\n@@ -213,7 +214,7 @@ fn check_call(&ctx cx, &@ast::expr f, &vec[@ast::expr] args, &scope sc) ->\n             }\n         }\n         if (mut_alias_to_root) {\n-            cx.tcx.sess.span_fatal(args.(root._0).span,\n+            cx.tcx.sess.span_err(args.(root._0).span,\n                                  \"passing a mutable alias to a \\\n                  variable that roots another alias\");\n         }\n@@ -239,7 +240,7 @@ fn check_tail_call(&ctx cx, &@ast::expr call) {\n                     alt (cx.local_map.find(dnum)) {\n                         case (some(arg(ast::alias(?mut)))) {\n                             if (mut_a && !mut) {\n-                                cx.tcx.sess.span_fatal(args.(i).span,\n+                                cx.tcx.sess.span_err(args.(i).span,\n                                                       \"passing an immutable \\\n                                      alias by mutable alias\");\n                             }\n@@ -250,7 +251,7 @@ fn check_tail_call(&ctx cx, &@ast::expr call) {\n                 case (_) { ok = false; }\n             }\n             if (!ok) {\n-                cx.tcx.sess.span_fatal(args.(i).span,\n+                cx.tcx.sess.span_err(args.(i).span,\n                                       \"can not pass a local value by \\\n                                      alias to a tail call\");\n             }\n@@ -386,10 +387,10 @@ fn check_lval(&@ctx cx, &@ast::expr dest, &scope sc, &vt[scope] v) {\n         case (ast::expr_path(?p)) {\n             auto dnum = ast::def_id_of_def(cx.tcx.def_map.get(dest.id))._1;\n             if (is_immutable_alias(cx, sc, dnum)) {\n-                cx.tcx.sess.span_fatal(dest.span,\n+                cx.tcx.sess.span_err(dest.span,\n                                      \"assigning to immutable alias\");\n             } else if (is_immutable_objfield(cx, dnum)) {\n-                cx.tcx.sess.span_fatal(dest.span,\n+                cx.tcx.sess.span_err(dest.span,\n                                      \"assigning to immutable obj field\");\n             }\n             for (restrict r in sc) {\n@@ -402,15 +403,15 @@ fn check_lval(&@ctx cx, &@ast::expr dest, &scope sc, &vt[scope] v) {\n         case (_) {\n             auto root = expr_root(*cx, dest, false);\n             if (vec::len(root.ds) == 0u) {\n-                cx.tcx.sess.span_fatal(dest.span, \"assignment to non-lvalue\");\n+                cx.tcx.sess.span_err(dest.span, \"assignment to non-lvalue\");\n             } else if (!root.ds.(0).mut) {\n                 auto name =\n                     alt (root.ds.(0).kind) {\n                         case (unbox) { \"box\" }\n                         case (field) { \"field\" }\n                         case (index) { \"vec content\" }\n                     };\n-                cx.tcx.sess.span_fatal(dest.span,\n+                cx.tcx.sess.span_err(dest.span,\n                                      \"assignment to immutable \" + name);\n             }\n             visit_expr(cx, dest, sc, v);\n@@ -456,7 +457,7 @@ fn test_scope(&ctx cx, &scope sc, &restrict r, &ast::path p) {\n                     tup(sp, \"taking the value of \" + ast::path_name(vpt))\n                 }\n             };\n-        cx.tcx.sess.span_fatal(msg._0,\n+        cx.tcx.sess.span_err(msg._0,\n                              msg._1 + \" will invalidate alias \" +\n                                  ast::path_name(p) + \", which is still used\");\n     }"}]}