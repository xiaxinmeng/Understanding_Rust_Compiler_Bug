{"sha": "299ed9af947db19a35e540bbb4ac5dac5a72e0ae", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5OWVkOWFmOTQ3ZGIxOWEzNWU1NDBiYmI0YWM1ZGFjNWE3MmUwYWU=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-03-01T14:13:30Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-03-02T06:48:53Z"}, "message": "driver: fix test", "tree": {"sha": "3cf938345ea4398c43cbe9ad3d008e55c0d645af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3cf938345ea4398c43cbe9ad3d008e55c0d645af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/299ed9af947db19a35e540bbb4ac5dac5a72e0ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/299ed9af947db19a35e540bbb4ac5dac5a72e0ae", "html_url": "https://github.com/rust-lang/rust/commit/299ed9af947db19a35e540bbb4ac5dac5a72e0ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/299ed9af947db19a35e540bbb4ac5dac5a72e0ae/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa61c67fe63df1d69979f116a29bb72ade0c6308", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa61c67fe63df1d69979f116a29bb72ade0c6308", "html_url": "https://github.com/rust-lang/rust/commit/fa61c67fe63df1d69979f116a29bb72ade0c6308"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "65f8ce75bd1135d29e73f7591bbca5dd8d806b52", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/299ed9af947db19a35e540bbb4ac5dac5a72e0ae/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/299ed9af947db19a35e540bbb4ac5dac5a72e0ae/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=299ed9af947db19a35e540bbb4ac5dac5a72e0ae", "patch": "@@ -249,7 +249,7 @@ impl<'a, 'gcx, 'tcx> Env<'a, 'gcx, 'tcx> {\n     }\n \n     #[allow(dead_code)] // this seems like it could be useful, even if we don't use it now\n-    pub fn lookup_item(&self, names: &[String]) -> ast::NodeId {\n+    pub fn lookup_item(&self, names: &[String]) -> hir::HirId {\n         return match search_mod(self, &self.infcx.tcx.hir().krate().module, 0, names) {\n             Some(id) => id,\n             None => {\n@@ -262,7 +262,7 @@ impl<'a, 'gcx, 'tcx> Env<'a, 'gcx, 'tcx> {\n             m: &hir::Mod,\n             idx: usize,\n             names: &[String],\n-        ) -> Option<ast::NodeId> {\n+        ) -> Option<hir::HirId> {\n             assert!(idx < names.len());\n             for item in &m.item_ids {\n                 let item = this.infcx.tcx.hir().expect_item(item.id);\n@@ -273,9 +273,9 @@ impl<'a, 'gcx, 'tcx> Env<'a, 'gcx, 'tcx> {\n             return None;\n         }\n \n-        fn search(this: &Env, it: &hir::Item, idx: usize, names: &[String]) -> Option<ast::NodeId> {\n+        fn search(this: &Env, it: &hir::Item, idx: usize, names: &[String]) -> Option<hir::HirId> {\n             if idx == names.len() {\n-                return Some(it.id);\n+                return Some(it.hir_id);\n             }\n \n             return match it.node {"}]}