{"sha": "2549be750e4c611a582bc0845b1da71e131f1118", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1NDliZTc1MGU0YzYxMWE1ODJiYzA4NDViMWRhNzFlMTMxZjExMTg=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-11-12T15:30:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-12T15:30:36Z"}, "message": "Merge #2217\n\n2217: Implement FromStr for enum Edition r=matklad a=clemarescx\n\nJust did this as I came across the comment in the code asking for implementing `std::str::FromStr` for `input::Edition`.\r\nNot sure what was meant by \"proper error handling\" though, `panic!` with a descriptive message might not be it :sweat_smile: \n\nCo-authored-by: Metabaron <metabaron@tuta.io>", "tree": {"sha": "fec19f32a3b9dd7ced95281b291674ed7ee3a4cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fec19f32a3b9dd7ced95281b291674ed7ee3a4cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2549be750e4c611a582bc0845b1da71e131f1118", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdytAcCRBK7hj4Ov3rIwAAdHIIABBFANpzJgXPElx5XD3KQXyj\nZEPlUULeHU/OFnkB/dl01aYXQwCGApN0mlzFVGEQ2bLsWW0anXMQpRoLqPSXvdpn\ncNTs4NlRgDGu3eB5rWT5eaO2BmSkzthj93445KLRoZGQE1VDSCSyDiH0f23nFY1X\nGjwYaycdO9NaSbylMMvzdcECOD0CNQ7X/EAatv8wWtYV0MOvxaE2s51EMLQt7gZV\nVQZcEGJsihMIqJNDMaAwJQIP3xcMVRlrmTvpdyPDwYFk0SAb2RT0FwqsqnzWIU6E\nwJGStzl/FfXDXkDCj4lSdwicgq4qWv7oT/X7sV+MZCUMTFDzzTZ/fo1i3yD3pQ8=\n=gU/d\n-----END PGP SIGNATURE-----\n", "payload": "tree fec19f32a3b9dd7ced95281b291674ed7ee3a4cd\nparent 55f3ff241a2105d2903266703474acbd24a85e84\nparent dae087656abf5d120cd9c051bf4fc446fca101e1\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1573572636 +0000\ncommitter GitHub <noreply@github.com> 1573572636 +0000\n\nMerge #2217\n\n2217: Implement FromStr for enum Edition r=matklad a=clemarescx\n\nJust did this as I came across the comment in the code asking for implementing `std::str::FromStr` for `input::Edition`.\r\nNot sure what was meant by \"proper error handling\" though, `panic!` with a descriptive message might not be it :sweat_smile: \n\nCo-authored-by: Metabaron <metabaron@tuta.io>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2549be750e4c611a582bc0845b1da71e131f1118", "html_url": "https://github.com/rust-lang/rust/commit/2549be750e4c611a582bc0845b1da71e131f1118", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2549be750e4c611a582bc0845b1da71e131f1118/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "55f3ff241a2105d2903266703474acbd24a85e84", "url": "https://api.github.com/repos/rust-lang/rust/commits/55f3ff241a2105d2903266703474acbd24a85e84", "html_url": "https://github.com/rust-lang/rust/commit/55f3ff241a2105d2903266703474acbd24a85e84"}, {"sha": "dae087656abf5d120cd9c051bf4fc446fca101e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/dae087656abf5d120cd9c051bf4fc446fca101e1", "html_url": "https://github.com/rust-lang/rust/commit/dae087656abf5d120cd9c051bf4fc446fca101e1"}], "stats": {"total": 34, "additions": 23, "deletions": 11}, "files": [{"sha": "ee883b615457f48fcbffaef9bf2c284bb54a7205", "filename": "crates/ra_db/src/fixture.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2549be750e4c611a582bc0845b1da71e131f1118/crates%2Fra_db%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2549be750e4c611a582bc0845b1da71e131f1118/crates%2Fra_db%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Ffixture.rs?ref=2549be750e4c611a582bc0845b1da71e131f1118", "patch": "@@ -1,5 +1,6 @@\n //! FIXME: write short doc here\n \n+use std::str::FromStr;\n use std::sync::Arc;\n \n use ra_cfg::CfgOptions;\n@@ -164,7 +165,7 @@ fn parse_meta(meta: &str) -> ParsedMeta {\n         match key {\n             \"crate\" => krate = Some(value.to_string()),\n             \"deps\" => deps = value.split(',').map(|it| it.to_string()).collect(),\n-            \"edition\" => edition = Edition::from_string(&value),\n+            \"edition\" => edition = Edition::from_str(&value).unwrap(),\n             \"cfg\" => {\n                 for key in value.split(',') {\n                     match split1(key, '=') {"}, {"sha": "c0d95a13fa1bfbdcdb52a3625e9a652ede8ebacf", "filename": "crates/ra_db/src/input.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2549be750e4c611a582bc0845b1da71e131f1118/crates%2Fra_db%2Fsrc%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2549be750e4c611a582bc0845b1da71e131f1118/crates%2Fra_db%2Fsrc%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Finput.rs?ref=2549be750e4c611a582bc0845b1da71e131f1118", "patch": "@@ -13,6 +13,7 @@ use ra_syntax::SmolStr;\n use rustc_hash::FxHashSet;\n \n use crate::{RelativePath, RelativePathBuf};\n+use std::str::FromStr;\n \n /// `FileId` is an integer which uniquely identifies a file. File paths are\n /// messy and system-dependent, so most of the code should work directly with\n@@ -97,12 +98,18 @@ pub enum Edition {\n     Edition2015,\n }\n \n-impl Edition {\n-    //FIXME: replace with FromStr with proper error handling\n-    pub fn from_string(s: &str) -> Edition {\n+#[derive(Debug)]\n+pub struct ParseEditionError {\n+    pub msg: String,\n+}\n+\n+impl FromStr for Edition {\n+    type Err = ParseEditionError;\n+    fn from_str(s: &str) -> Result<Self, Self::Err> {\n         match s {\n-            \"2015\" => Edition::Edition2015,\n-            \"2018\" | _ => Edition::Edition2018,\n+            \"2015\" => Ok(Edition::Edition2015),\n+            \"2018\" => Ok(Edition::Edition2018),\n+            _ => Err(ParseEditionError { msg: format!(\"unknown edition: {}\", s) }),\n         }\n     }\n }"}, {"sha": "cf88911b751b3a86e224f28155b1c63a734f266e", "filename": "crates/ra_project_model/src/cargo_workspace.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2549be750e4c611a582bc0845b1da71e131f1118/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2549be750e4c611a582bc0845b1da71e131f1118/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs?ref=2549be750e4c611a582bc0845b1da71e131f1118", "patch": "@@ -1,6 +1,7 @@\n //! FIXME: write short doc here\n \n use std::path::{Path, PathBuf};\n+use std::str::FromStr;\n \n use cargo_metadata::{CargoOpt, MetadataCommand};\n use ra_arena::{impl_arena_id, Arena, RawId};\n@@ -140,18 +141,21 @@ impl CargoWorkspace {\n         let ws_members = &meta.workspace_members;\n \n         for meta_pkg in meta.packages {\n-            let is_member = ws_members.contains(&meta_pkg.id);\n+            let cargo_metadata::Package { id, edition, name, manifest_path, .. } = meta_pkg;\n+            let is_member = ws_members.contains(&id);\n+            let edition = Edition::from_str(&edition)\n+                .map_err(|e| (format!(\"metadata for package {} failed: {}\", &name, e.msg)))?;\n             let pkg = packages.alloc(PackageData {\n-                name: meta_pkg.name,\n-                manifest: meta_pkg.manifest_path.clone(),\n+                name,\n+                manifest: manifest_path,\n                 targets: Vec::new(),\n                 is_member,\n-                edition: Edition::from_string(&meta_pkg.edition),\n+                edition,\n                 dependencies: Vec::new(),\n                 features: Vec::new(),\n             });\n             let pkg_data = &mut packages[pkg];\n-            pkg_by_id.insert(meta_pkg.id.clone(), pkg);\n+            pkg_by_id.insert(id, pkg);\n             for meta_tgt in meta_pkg.targets {\n                 let tgt = targets.alloc(TargetData {\n                     pkg,"}]}