{"sha": "9dafad2402426c190dbc7d134fd265f7ecedaf6b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkYWZhZDI0MDI0MjZjMTkwZGJjN2QxMzRmZDI2NWY3ZWNlZGFmNmI=", "commit": {"author": {"name": "Ville Penttinen", "email": "villem.penttinen@gmail.com", "date": "2019-02-23T12:59:41Z"}, "committer": {"name": "Ville Penttinen", "email": "villem.penttinen@gmail.com", "date": "2019-02-23T13:05:26Z"}, "message": "Fix fill_match_arms not working with references", "tree": {"sha": "e01e0ca0b0eab5944ee5519d7974e506b5997573", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e01e0ca0b0eab5944ee5519d7974e506b5997573"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9dafad2402426c190dbc7d134fd265f7ecedaf6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9dafad2402426c190dbc7d134fd265f7ecedaf6b", "html_url": "https://github.com/rust-lang/rust/commit/9dafad2402426c190dbc7d134fd265f7ecedaf6b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9dafad2402426c190dbc7d134fd265f7ecedaf6b/comments", "author": {"login": "vipentti", "id": 4726680, "node_id": "MDQ6VXNlcjQ3MjY2ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/4726680?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vipentti", "html_url": "https://github.com/vipentti", "followers_url": "https://api.github.com/users/vipentti/followers", "following_url": "https://api.github.com/users/vipentti/following{/other_user}", "gists_url": "https://api.github.com/users/vipentti/gists{/gist_id}", "starred_url": "https://api.github.com/users/vipentti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vipentti/subscriptions", "organizations_url": "https://api.github.com/users/vipentti/orgs", "repos_url": "https://api.github.com/users/vipentti/repos", "events_url": "https://api.github.com/users/vipentti/events{/privacy}", "received_events_url": "https://api.github.com/users/vipentti/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vipentti", "id": 4726680, "node_id": "MDQ6VXNlcjQ3MjY2ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/4726680?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vipentti", "html_url": "https://github.com/vipentti", "followers_url": "https://api.github.com/users/vipentti/followers", "following_url": "https://api.github.com/users/vipentti/following{/other_user}", "gists_url": "https://api.github.com/users/vipentti/gists{/gist_id}", "starred_url": "https://api.github.com/users/vipentti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vipentti/subscriptions", "organizations_url": "https://api.github.com/users/vipentti/orgs", "repos_url": "https://api.github.com/users/vipentti/repos", "events_url": "https://api.github.com/users/vipentti/events{/privacy}", "received_events_url": "https://api.github.com/users/vipentti/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5fb33a94618d45051192d99e859bdd44c3daa36", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5fb33a94618d45051192d99e859bdd44c3daa36", "html_url": "https://github.com/rust-lang/rust/commit/e5fb33a94618d45051192d99e859bdd44c3daa36"}], "stats": {"total": 103, "additions": 103, "deletions": 0}, "files": [{"sha": "0050885404a4586589644b1081bdbf003a825ae2", "filename": "crates/ra_assists/src/fill_match_arms.rs", "status": "modified", "additions": 103, "deletions": 0, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/9dafad2402426c190dbc7d134fd265f7ecedaf6b/crates%2Fra_assists%2Fsrc%2Ffill_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dafad2402426c190dbc7d134fd265f7ecedaf6b/crates%2Fra_assists%2Fsrc%2Ffill_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Ffill_match_arms.rs?ref=9dafad2402426c190dbc7d134fd265f7ecedaf6b", "patch": "@@ -28,6 +28,10 @@ pub(crate) fn fill_match_arms(mut ctx: AssistCtx<impl HirDatabase>) -> Option<As\n     let match_expr_ty = infer_result[node_expr].clone();\n     let enum_def = match match_expr_ty {\n         Ty::Adt { def_id: AdtDef::Enum(e), .. } => e,\n+        Ty::Ref(adt, _) => match *adt {\n+            Ty::Adt { def_id: AdtDef::Enum(e), .. } => e,\n+            _ => return None,\n+        },\n         _ => return None,\n     };\n     let enum_name = enum_def.name(ctx.db)?;\n@@ -119,6 +123,105 @@ mod tests {\n             \"#,\n         );\n     }\n+\n+    #[test]\n+    fn test_fill_match_arm_refs() {\n+        check_assist(\n+            fill_match_arms,\n+            r#\"\n+            enum A {\n+                As,\n+                Bs,\n+                Cs(String),\n+                Ds(String, String),\n+                Es{x: usize, y: usize}\n+            }\n+\n+            fn foo(a: &A) {\n+                match a<|> {\n+                }\n+            }\n+            \"#,\n+            r#\"\n+            enum A {\n+                As,\n+                Bs,\n+                Cs(String),\n+                Ds(String, String),\n+                Es{x: usize, y: usize}\n+            }\n+\n+            fn foo(a: &A) {\n+                match <|>a {\n+                    A::As => (),\n+                    A::Bs => (),\n+                    A::Cs(_) => (),\n+                    A::Ds(_, _) => (),\n+                    A::Es{x, y} => (),\n+                }\n+            }\n+            \"#,\n+        );\n+\n+        check_assist(\n+            fill_match_arms,\n+            r#\"\n+            enum A {\n+                As,\n+                Bs,\n+                Cs(String),\n+                Ds(String, String),\n+                Es{x: usize, y: usize}\n+            }\n+\n+            fn foo(a: &mut A) {\n+                match a<|> {\n+                }\n+            }\n+            \"#,\n+            r#\"\n+            enum A {\n+                As,\n+                Bs,\n+                Cs(String),\n+                Ds(String, String),\n+                Es{x: usize, y: usize}\n+            }\n+\n+            fn foo(a: &mut A) {\n+                match <|>a {\n+                    A::As => (),\n+                    A::Bs => (),\n+                    A::Cs(_) => (),\n+                    A::Ds(_, _) => (),\n+                    A::Es{x, y} => (),\n+                }\n+            }\n+            \"#,\n+        );\n+\n+        check_assist(\n+            fill_match_arms,\n+            r#\"\n+            enum E { X, Y}\n+\n+            fn main() {\n+                match &E::X<|>\n+            }\n+            \"#,\n+            r#\"\n+            enum E { X, Y}\n+\n+            fn main() {\n+                match <|>&E::X {\n+                    E::X => (),\n+                    E::Y => (),\n+                }\n+            }\n+            \"#,\n+        );\n+    }\n+\n     #[test]\n     fn fill_match_arms_no_body() {\n         check_assist("}]}