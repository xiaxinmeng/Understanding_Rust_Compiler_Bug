{"sha": "d0ad15d8cfc29683215d094808fbec3ae1840d63", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwYWQxNWQ4Y2ZjMjk2ODMyMTVkMDk0ODA4ZmJlYzNhZTE4NDBkNjM=", "commit": {"author": {"name": "Jack Huey", "email": "jack.huey@umassmed.edu", "date": "2020-05-27T05:26:51Z"}, "committer": {"name": "Jack Huey", "email": "jack.huey@umassmed.edu", "date": "2020-06-19T18:05:14Z"}, "message": "Remove RustDefId", "tree": {"sha": "b87cd04b9a5e5f5cc2574404d71350ae7efc7b00", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b87cd04b9a5e5f5cc2574404d71350ae7efc7b00"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d0ad15d8cfc29683215d094808fbec3ae1840d63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d0ad15d8cfc29683215d094808fbec3ae1840d63", "html_url": "https://github.com/rust-lang/rust/commit/d0ad15d8cfc29683215d094808fbec3ae1840d63", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d0ad15d8cfc29683215d094808fbec3ae1840d63/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a42e5a14c46dd57493fe38cc2fa51909edb70848", "url": "https://api.github.com/repos/rust-lang/rust/commits/a42e5a14c46dd57493fe38cc2fa51909edb70848", "html_url": "https://github.com/rust-lang/rust/commit/a42e5a14c46dd57493fe38cc2fa51909edb70848"}], "stats": {"total": 269, "additions": 86, "deletions": 183}, "files": [{"sha": "9ce6cc3a5111402b52728a5b1fa3b238a3b75151", "filename": "src/librustc_middle/traits/chalk.rs", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d0ad15d8cfc29683215d094808fbec3ae1840d63/src%2Flibrustc_middle%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0ad15d8cfc29683215d094808fbec3ae1840d63/src%2Flibrustc_middle%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Ftraits%2Fchalk.rs?ref=d0ad15d8cfc29683215d094808fbec3ae1840d63", "patch": "@@ -16,19 +16,6 @@ use std::cmp::Ordering;\n use std::fmt;\n use std::hash::{Hash, Hasher};\n \n-/// Since Chalk doesn't have full support for all Rust builtin types yet, we\n-/// need to use an enum here, rather than just `DefId`.\n-#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]\n-pub enum RustDefId {\n-    Adt(DefId),\n-\n-    FnDef(DefId),\n-    Trait(DefId),\n-    Impl(DefId),\n-    AssocTy(DefId),\n-    Opaque(DefId),\n-}\n-\n #[derive(Copy, Clone)]\n pub struct RustInterner<'tcx> {\n     pub tcx: TyCtxt<'tcx>,\n@@ -86,8 +73,8 @@ impl<'tcx> chalk_ir::interner::Interner for RustInterner<'tcx> {\n     type InternedQuantifiedWhereClauses = Vec<chalk_ir::QuantifiedWhereClause<Self>>;\n     type InternedVariableKinds = Vec<chalk_ir::VariableKind<Self>>;\n     type InternedCanonicalVarKinds = Vec<chalk_ir::CanonicalVarKind<Self>>;\n-    type DefId = RustDefId;\n-    type InternedAdtId = RustDefId;\n+    type DefId = DefId;\n+    type InternedAdtId = DefId;\n     type Identifier = ();\n \n     fn debug_program_clause_implication("}, {"sha": "33faf448a91d6f0161a5e7759a4a5309aa04d342", "filename": "src/librustc_middle/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d0ad15d8cfc29683215d094808fbec3ae1840d63/src%2Flibrustc_middle%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0ad15d8cfc29683215d094808fbec3ae1840d63/src%2Flibrustc_middle%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Ftraits%2Fmod.rs?ref=d0ad15d8cfc29683215d094808fbec3ae1840d63", "patch": "@@ -33,8 +33,7 @@ pub use self::ObligationCauseCode::*;\n pub use self::SelectionError::*;\n \n pub use self::chalk::{\n-    ChalkEnvironmentAndGoal, ChalkEnvironmentClause, RustDefId as ChalkRustDefId,\n-    RustInterner as ChalkRustInterner,\n+    ChalkEnvironmentAndGoal, ChalkEnvironmentClause, RustInterner as ChalkRustInterner,\n };\n \n /// Depending on the stage of compilation, we want projection to be"}, {"sha": "818839e2e3b3355730e19ad108a882c1ff4a24e6", "filename": "src/librustc_traits/chalk/db.rs", "status": "modified", "additions": 73, "deletions": 150, "changes": 223, "blob_url": "https://github.com/rust-lang/rust/blob/d0ad15d8cfc29683215d094808fbec3ae1840d63/src%2Flibrustc_traits%2Fchalk%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0ad15d8cfc29683215d094808fbec3ae1840d63/src%2Flibrustc_traits%2Fchalk%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk%2Fdb.rs?ref=d0ad15d8cfc29683215d094808fbec3ae1840d63", "patch": "@@ -6,7 +6,7 @@\n //! either the `TyCtxt` (for information about types) or\n //! `crate::chalk::lowering` (to lower rustc types into Chalk types).\n \n-use rustc_middle::traits::{ChalkRustDefId as RustDefId, ChalkRustInterner as RustInterner};\n+use rustc_middle::traits::ChalkRustInterner as RustInterner;\n use rustc_middle::ty::subst::{InternalSubsts, Subst, SubstsRef};\n use rustc_middle::ty::{self, AssocItemContainer, AssocKind, TyCtxt};\n \n@@ -39,10 +39,7 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n         &self,\n         assoc_type_id: chalk_ir::AssocTypeId<RustInterner<'tcx>>,\n     ) -> Arc<chalk_solve::rust_ir::AssociatedTyDatum<RustInterner<'tcx>>> {\n-        let def_id = match assoc_type_id.0 {\n-            RustDefId::AssocTy(def_id) => def_id,\n-            _ => bug!(\"Did not use `AssocTy` variant when expecting associated type.\"),\n-        };\n+        let def_id = assoc_type_id.0;\n         let assoc_item = self.tcx.associated_item(def_id);\n         let trait_def_id = match assoc_item.container {\n             AssocItemContainer::TraitContainer(def_id) => def_id,\n@@ -64,7 +61,7 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n             .filter_map(|wc| LowerInto::<Option<chalk_ir::QuantifiedWhereClause<RustInterner<'tcx>>>>::lower_into(wc, &self.interner)).collect();\n \n         Arc::new(chalk_solve::rust_ir::AssociatedTyDatum {\n-            trait_id: chalk_ir::TraitId(RustDefId::Trait(trait_def_id)),\n+            trait_id: chalk_ir::TraitId(trait_def_id),\n             id: assoc_type_id,\n             name: (),\n             binders: chalk_ir::Binders::new(\n@@ -78,10 +75,7 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n         &self,\n         trait_id: chalk_ir::TraitId<RustInterner<'tcx>>,\n     ) -> Arc<chalk_solve::rust_ir::TraitDatum<RustInterner<'tcx>>> {\n-        let def_id = match trait_id.0 {\n-            RustDefId::Trait(def_id) => def_id,\n-            _ => bug!(\"Did not use `Trait` variant when expecting trait.\"),\n-        };\n+        let def_id = trait_id.0;\n         let trait_def = self.tcx.trait_def(def_id);\n \n         let bound_vars = bound_vars_for_item(self.tcx, def_id);\n@@ -125,62 +119,54 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n         &self,\n         struct_id: chalk_ir::AdtId<RustInterner<'tcx>>,\n     ) -> Arc<chalk_solve::rust_ir::AdtDatum<RustInterner<'tcx>>> {\n-        match struct_id.0 {\n-            RustDefId::Adt(adt_def_id) => {\n-                let adt_def = self.tcx.adt_def(adt_def_id);\n+        let adt_def_id = struct_id.0;\n+        let adt_def = self.tcx.adt_def(adt_def_id);\n \n-                let bound_vars = bound_vars_for_item(self.tcx, adt_def_id);\n-                let binders = binders_for(&self.interner, bound_vars);\n+        let bound_vars = bound_vars_for_item(self.tcx, adt_def_id);\n+        let binders = binders_for(&self.interner, bound_vars);\n \n-                let predicates = self.tcx.predicates_of(adt_def_id).predicates;\n-                let where_clauses: Vec<_> = predicates\n+        let predicates = self.tcx.predicates_of(adt_def_id).predicates;\n+        let where_clauses: Vec<_> = predicates\n+            .into_iter()\n+            .map(|(wc, _)| wc.subst(self.tcx, bound_vars))\n+            .filter_map(|wc| LowerInto::<Option<chalk_ir::QuantifiedWhereClause<RustInterner<'tcx>>>>::lower_into(wc, &self.interner))\n+            .collect();\n+        let fields = match adt_def.adt_kind() {\n+            ty::AdtKind::Struct | ty::AdtKind::Union => {\n+                let variant = adt_def.non_enum_variant();\n+                variant\n+                    .fields\n                     .iter()\n-                    .map(|(wc, _)| wc.subst(self.tcx, bound_vars))\n-                    .filter_map(|wc| LowerInto::<Option<chalk_ir::QuantifiedWhereClause<RustInterner<'tcx>>>>::lower_into(wc, &self.interner))\n-                    .collect();\n-                let fields = match adt_def.adt_kind() {\n-                    ty::AdtKind::Struct | ty::AdtKind::Union => {\n-                        let variant = adt_def.non_enum_variant();\n-                        variant\n-                            .fields\n-                            .iter()\n-                            .map(|field| {\n-                                self.tcx\n-                                    .type_of(field.did)\n-                                    .subst(self.tcx, bound_vars)\n-                                    .lower_into(&self.interner)\n-                            })\n-                            .collect()\n-                    }\n-                    // FIXME(chalk): handle enums; force_impl_for requires this\n-                    ty::AdtKind::Enum => vec![],\n-                };\n-                let struct_datum = Arc::new(chalk_solve::rust_ir::AdtDatum {\n-                    id: struct_id,\n-                    binders: chalk_ir::Binders::new(\n-                        binders,\n-                        chalk_solve::rust_ir::AdtDatumBound { fields, where_clauses },\n-                    ),\n-                    flags: chalk_solve::rust_ir::AdtFlags {\n-                        upstream: !adt_def_id.is_local(),\n-                        fundamental: adt_def.is_fundamental(),\n-                    },\n-                });\n-                struct_datum\n+                    .map(|field| {\n+                        self.tcx\n+                            .type_of(field.did)\n+                            .subst(self.tcx, bound_vars)\n+                            .lower_into(&self.interner)\n+                    })\n+                    .collect()\n             }\n-\n-            v => bug!(\"Used not struct variant ({:?}) when expecting struct variant.\", v),\n-        }\n+            // FIXME(chalk): handle enums; force_impl_for requires this\n+            ty::AdtKind::Enum => vec![],\n+        };\n+        let struct_datum = Arc::new(chalk_solve::rust_ir::AdtDatum {\n+            id: struct_id,\n+            binders: chalk_ir::Binders::new(\n+                binders,\n+                chalk_solve::rust_ir::AdtDatumBound { fields, where_clauses },\n+            ),\n+            flags: chalk_solve::rust_ir::AdtFlags {\n+                upstream: !adt_def_id.is_local(),\n+                fundamental: adt_def.is_fundamental(),\n+            },\n+        });\n+        return struct_datum;\n     }\n \n     fn fn_def_datum(\n         &self,\n         fn_def_id: chalk_ir::FnDefId<RustInterner<'tcx>>,\n     ) -> Arc<chalk_solve::rust_ir::FnDefDatum<RustInterner<'tcx>>> {\n-        let def_id = match fn_def_id.0 {\n-            RustDefId::FnDef(def_id) => def_id,\n-            _ => bug!(\"Did not use `FnDef` variant when expecting FnDef.\"),\n-        };\n+        let def_id = fn_def_id.0;\n         let bound_vars = bound_vars_for_item(self.tcx, def_id);\n         let binders = binders_for(&self.interner, bound_vars);\n \n@@ -214,10 +200,7 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n         &self,\n         impl_id: chalk_ir::ImplId<RustInterner<'tcx>>,\n     ) -> Arc<chalk_solve::rust_ir::ImplDatum<RustInterner<'tcx>>> {\n-        let def_id = match impl_id.0 {\n-            RustDefId::Impl(def_id) => def_id,\n-            _ => bug!(\"Did not use `Impl` variant when expecting impl.\"),\n-        };\n+        let def_id = impl_id.0;\n         let bound_vars = bound_vars_for_item(self.tcx, def_id);\n         let binders = binders_for(&self.interner, bound_vars);\n \n@@ -248,10 +231,7 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n         trait_id: chalk_ir::TraitId<RustInterner<'tcx>>,\n         parameters: &[chalk_ir::GenericArg<RustInterner<'tcx>>],\n     ) -> Vec<chalk_ir::ImplId<RustInterner<'tcx>>> {\n-        let def_id: DefId = match trait_id.0 {\n-            RustDefId::Trait(def_id) => def_id,\n-            _ => bug!(\"Did not use `Trait` variant when expecting trait.\"),\n-        };\n+        let def_id = trait_id.0;\n \n         // FIXME(chalk): use TraitDef::for_each_relevant_impl, but that will\n         // require us to be able to interconvert `Ty<'tcx>`, and we're\n@@ -270,9 +250,7 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n             parameters[0].assert_ty_ref(&self.interner).could_match(&self.interner, &lowered_ty)\n         });\n \n-        let impls = matched_impls\n-            .map(|matched_impl| chalk_ir::ImplId(RustDefId::Impl(matched_impl)))\n-            .collect();\n+        let impls = matched_impls.map(|matched_impl| chalk_ir::ImplId(matched_impl)).collect();\n         impls\n     }\n \n@@ -281,19 +259,8 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n         auto_trait_id: chalk_ir::TraitId<RustInterner<'tcx>>,\n         struct_id: chalk_ir::AdtId<RustInterner<'tcx>>,\n     ) -> bool {\n-        let trait_def_id: DefId = match auto_trait_id.0 {\n-            RustDefId::Trait(def_id) => def_id,\n-            _ => bug!(\"Did not use `Trait` variant when expecting trait.\"),\n-        };\n-        // FIXME(chalk): this match can be removed when builtin types supported\n-        match struct_id.0 {\n-            RustDefId::Adt(_) => {}\n-            _ => bug!(\"Did not use `Adt` variant when expecting adt.\"),\n-        }\n-        let adt_def_id: DefId = match struct_id.0 {\n-            RustDefId::Adt(def_id) => def_id,\n-            _ => bug!(\"Did not use `Adt` variant when expecting adt.\"),\n-        };\n+        let trait_def_id = auto_trait_id.0;\n+        let adt_def_id = struct_id.0;\n         let all_impls = self.tcx.all_impls(trait_def_id);\n         for impl_def_id in all_impls {\n             let trait_ref = self.tcx.impl_trait_ref(impl_def_id).unwrap();\n@@ -314,10 +281,7 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n         &self,\n         associated_ty_id: chalk_solve::rust_ir::AssociatedTyValueId<RustInterner<'tcx>>,\n     ) -> Arc<chalk_solve::rust_ir::AssociatedTyValue<RustInterner<'tcx>>> {\n-        let def_id = match associated_ty_id.0 {\n-            RustDefId::AssocTy(def_id) => def_id,\n-            _ => bug!(\"Did not use `AssocTy` variant when expecting associated type.\"),\n-        };\n+        let def_id = associated_ty_id.0;\n         let assoc_item = self.tcx.associated_item(def_id);\n         let impl_id = match assoc_item.container {\n             AssocItemContainer::TraitContainer(def_id) => def_id,\n@@ -332,8 +296,8 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n         let ty = self.tcx.type_of(def_id);\n \n         Arc::new(chalk_solve::rust_ir::AssociatedTyValue {\n-            impl_id: chalk_ir::ImplId(RustDefId::Impl(impl_id)),\n-            associated_ty_id: chalk_ir::AssocTypeId(RustDefId::AssocTy(def_id)),\n+            impl_id: chalk_ir::ImplId(impl_id),\n+            associated_ty_id: chalk_ir::AssocTypeId(def_id),\n             value: chalk_ir::Binders::new(\n                 binders,\n                 chalk_solve::rust_ir::AssociatedTyValueBound { ty: ty.lower_into(&self.interner) },\n@@ -381,25 +345,14 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n         match well_known {\n             chalk_solve::rust_ir::WellKnownTrait::SizedTrait => match ty {\n                 Apply(apply) => match apply.name {\n-                    chalk_ir::TypeName::Adt(chalk_ir::AdtId(rust_def_id)) => {\n-                        use rustc_middle::traits::ChalkRustDefId::*;\n-                        match rust_def_id {\n-                            Adt(adt_def_id) => {\n-                                let adt_def = self.tcx.adt_def(adt_def_id);\n-                                match adt_def.adt_kind() {\n-                                    ty::AdtKind::Struct | ty::AdtKind::Union => None,\n-                                    ty::AdtKind::Enum => {\n-                                        let constraint = self.tcx.adt_sized_constraint(adt_def_id);\n-                                        if !constraint.0.is_empty() {\n-                                            unimplemented!()\n-                                        } else {\n-                                            Some(true)\n-                                        }\n-                                    }\n-                                }\n+                    chalk_ir::TypeName::Adt(chalk_ir::AdtId(adt_def_id)) => {\n+                        let adt_def = self.tcx.adt_def(adt_def_id);\n+                        match adt_def.adt_kind() {\n+                            ty::AdtKind::Struct | ty::AdtKind::Union => None,\n+                            ty::AdtKind::Enum => {\n+                                let constraint = self.tcx.adt_sized_constraint(adt_def_id);\n+                                if constraint.0.len() > 0 { unimplemented!() } else { Some(true) }\n                             }\n-\n-                            FnDef(_) | Trait(_) | Impl(_) | AssocTy(_) | Opaque(_) => panic!(),\n                         }\n                     }\n                     _ => None,\n@@ -414,24 +367,14 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n             chalk_solve::rust_ir::WellKnownTrait::CopyTrait\n             | chalk_solve::rust_ir::WellKnownTrait::CloneTrait => match ty {\n                 Apply(apply) => match apply.name {\n-                    chalk_ir::TypeName::Adt(chalk_ir::AdtId(rust_def_id)) => {\n-                        use rustc_middle::traits::ChalkRustDefId::*;\n-                        match rust_def_id {\n-                            Adt(adt_def_id) => {\n-                                let adt_def = self.tcx.adt_def(adt_def_id);\n-                                match adt_def.adt_kind() {\n-                                    ty::AdtKind::Struct | ty::AdtKind::Union => None,\n-                                    ty::AdtKind::Enum => {\n-                                        let constraint = self.tcx.adt_sized_constraint(adt_def_id);\n-                                        if !constraint.0.is_empty() {\n-                                            unimplemented!()\n-                                        } else {\n-                                            Some(true)\n-                                        }\n-                                    }\n-                                }\n+                    chalk_ir::TypeName::Adt(chalk_ir::AdtId(adt_def_id)) => {\n+                        let adt_def = self.tcx.adt_def(adt_def_id);\n+                        match adt_def.adt_kind() {\n+                            ty::AdtKind::Struct | ty::AdtKind::Union => None,\n+                            ty::AdtKind::Enum => {\n+                                let constraint = self.tcx.adt_sized_constraint(adt_def_id);\n+                                if constraint.0.len() > 0 { unimplemented!() } else { Some(true) }\n                             }\n-                            FnDef(_) | Trait(_) | Impl(_) | AssocTy(_) | Opaque(_) => panic!(),\n                         }\n                     }\n                     _ => None,\n@@ -460,40 +403,20 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n     ) -> Option<chalk_ir::TraitId<RustInterner<'tcx>>> {\n         use chalk_solve::rust_ir::WellKnownTrait::*;\n         let t = match well_known_trait {\n-            SizedTrait => self\n-                .tcx\n-                .lang_items()\n-                .sized_trait()\n-                .map(|t| chalk_ir::TraitId(RustDefId::Trait(t)))\n-                .unwrap(),\n-            CopyTrait => self\n-                .tcx\n-                .lang_items()\n-                .copy_trait()\n-                .map(|t| chalk_ir::TraitId(RustDefId::Trait(t)))\n-                .unwrap(),\n-            CloneTrait => self\n-                .tcx\n-                .lang_items()\n-                .clone_trait()\n-                .map(|t| chalk_ir::TraitId(RustDefId::Trait(t)))\n-                .unwrap(),\n-            DropTrait => self\n-                .tcx\n-                .lang_items()\n-                .drop_trait()\n-                .map(|t| chalk_ir::TraitId(RustDefId::Trait(t)))\n-                .unwrap(),\n+            SizedTrait => {\n+                self.tcx.lang_items().sized_trait().map(|t| chalk_ir::TraitId(t)).unwrap()\n+            }\n+            CopyTrait => self.tcx.lang_items().copy_trait().map(|t| chalk_ir::TraitId(t)).unwrap(),\n+            CloneTrait => {\n+                self.tcx.lang_items().clone_trait().map(|t| chalk_ir::TraitId(t)).unwrap()\n+            }\n+            DropTrait => self.tcx.lang_items().drop_trait().map(|t| chalk_ir::TraitId(t)).unwrap(),\n         };\n         Some(t)\n     }\n \n     fn is_object_safe(&self, trait_id: chalk_ir::TraitId<RustInterner<'tcx>>) -> bool {\n-        let def_id: DefId = match trait_id.0 {\n-            RustDefId::Trait(def_id) => def_id,\n-            _ => bug!(\"Did not use `Trait` variant when expecting trait.\"),\n-        };\n-        self.tcx.is_object_safe(def_id)\n+        self.tcx.is_object_safe(trait_id.0)\n     }\n }\n "}, {"sha": "2d9b4247fd90fd9f3f0b476220b2e3eafbc6e4a6", "filename": "src/librustc_traits/chalk/lowering.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d0ad15d8cfc29683215d094808fbec3ae1840d63/src%2Flibrustc_traits%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0ad15d8cfc29683215d094808fbec3ae1840d63/src%2Flibrustc_traits%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk%2Flowering.rs?ref=d0ad15d8cfc29683215d094808fbec3ae1840d63", "patch": "@@ -32,8 +32,7 @@\n //! variables from the current `Binder`.\n \n use rustc_middle::traits::{\n-    ChalkEnvironmentAndGoal, ChalkEnvironmentClause, ChalkRustDefId as RustDefId,\n-    ChalkRustInterner as RustInterner,\n+    ChalkEnvironmentAndGoal, ChalkEnvironmentClause, ChalkRustInterner as RustInterner,\n };\n use rustc_middle::ty::fold::TypeFolder;\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind, SubstsRef};\n@@ -62,7 +61,7 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::Substitution<RustInterner<'tcx>>> for Subst\n impl<'tcx> LowerInto<'tcx, chalk_ir::AliasTy<RustInterner<'tcx>>> for ty::ProjectionTy<'tcx> {\n     fn lower_into(self, interner: &RustInterner<'tcx>) -> chalk_ir::AliasTy<RustInterner<'tcx>> {\n         chalk_ir::AliasTy::Projection(chalk_ir::ProjectionTy {\n-            associated_ty_id: chalk_ir::AssocTypeId(RustDefId::AssocTy(self.item_def_id)),\n+            associated_ty_id: chalk_ir::AssocTypeId(self.item_def_id),\n             substitution: self.substs.lower_into(interner),\n         })\n     }\n@@ -203,7 +202,7 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::TraitRef<RustInterner<'tcx>>>\n {\n     fn lower_into(self, interner: &RustInterner<'tcx>) -> chalk_ir::TraitRef<RustInterner<'tcx>> {\n         chalk_ir::TraitRef {\n-            trait_id: chalk_ir::TraitId(RustDefId::Trait(self.def_id)),\n+            trait_id: chalk_ir::TraitId(self.def_id),\n             substitution: self.substs.lower_into(interner),\n         }\n     }\n@@ -296,9 +295,7 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::Ty<RustInterner<'tcx>>> for Ty<'tcx> {\n                 ast::FloatTy::F32 => float(chalk_ir::FloatTy::F32),\n                 ast::FloatTy::F64 => float(chalk_ir::FloatTy::F64),\n             },\n-            Adt(def, substs) => {\n-                apply(struct_ty(RustDefId::Adt(def.did)), substs.lower_into(interner))\n-            }\n+            Adt(def, substs) => apply(struct_ty(def.did), substs.lower_into(interner)),\n             Foreign(_def_id) => unimplemented!(),\n             Str => apply(chalk_ir::TypeName::Str, empty()),\n             Array(ty, _) => apply(\n@@ -352,7 +349,7 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::Ty<RustInterner<'tcx>>> for Ty<'tcx> {\n                 )\n             }\n             FnDef(def_id, substs) => apply(\n-                chalk_ir::TypeName::FnDef(chalk_ir::FnDefId(RustDefId::FnDef(def_id))),\n+                chalk_ir::TypeName::FnDef(chalk_ir::FnDefId(def_id)),\n                 substs.lower_into(interner),\n             ),\n             FnPtr(sig) => {\n@@ -384,7 +381,7 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::Ty<RustInterner<'tcx>>> for Ty<'tcx> {\n             Projection(proj) => TyData::Alias(proj.lower_into(interner)).intern(interner),\n             Opaque(def_id, substs) => {\n                 TyData::Alias(chalk_ir::AliasTy::Opaque(chalk_ir::OpaqueTy {\n-                    opaque_ty_id: chalk_ir::OpaqueTyId(RustDefId::Opaque(def_id)),\n+                    opaque_ty_id: chalk_ir::OpaqueTyId(def_id),\n                     substitution: substs.lower_into(interner),\n                 }))\n                 .intern(interner)\n@@ -515,7 +512,7 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::Binders<chalk_ir::QuantifiedWhereClauses<Ru\n                 chalk_ir::Binders::new(\n                     chalk_ir::VariableKinds::new(interner),\n                     chalk_ir::WhereClause::Implemented(chalk_ir::TraitRef {\n-                        trait_id: chalk_ir::TraitId(RustDefId::Trait(*def_id)),\n+                        trait_id: chalk_ir::TraitId(*def_id),\n                         substitution: substs.lower_into(interner),\n                     }),\n                 )\n@@ -524,7 +521,7 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::Binders<chalk_ir::QuantifiedWhereClauses<Ru\n             ty::ExistentialPredicate::AutoTrait(def_id) => chalk_ir::Binders::new(\n                 chalk_ir::VariableKinds::new(interner),\n                 chalk_ir::WhereClause::Implemented(chalk_ir::TraitRef {\n-                    trait_id: chalk_ir::TraitId(RustDefId::Trait(*def_id)),\n+                    trait_id: chalk_ir::TraitId(*def_id),\n                     substitution: chalk_ir::Substitution::empty(interner),\n                 }),\n             ),"}, {"sha": "4d047d2107af5e27c30389ddd468a362ac0baecf", "filename": "src/librustc_traits/chalk/mod.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d0ad15d8cfc29683215d094808fbec3ae1840d63/src%2Flibrustc_traits%2Fchalk%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0ad15d8cfc29683215d094808fbec3ae1840d63/src%2Flibrustc_traits%2Fchalk%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk%2Fmod.rs?ref=d0ad15d8cfc29683215d094808fbec3ae1840d63", "patch": "@@ -22,7 +22,7 @@ use rustc_middle::ty::{\n use rustc_infer::infer::canonical::{\n     Canonical, CanonicalVarValues, Certainty, QueryRegionConstraints, QueryResponse,\n };\n-use rustc_infer::traits::{self, ChalkCanonicalGoal, ChalkRustDefId as RustDefId};\n+use rustc_infer::traits::{self, ChalkCanonicalGoal};\n \n use crate::chalk::db::RustIrDatabase as ChalkRustIrDatabase;\n use crate::chalk::lowering::{LowerInto, ParamsSubstitutor};\n@@ -106,10 +106,7 @@ crate fn evaluate_goal<'tcx>(\n                     let _data = _t.data(&interner);\n                     let kind = match _data {\n                         TyData::Apply(_application_ty) => match _application_ty.name {\n-                            chalk_ir::TypeName::Adt(_struct_id) => match _struct_id.0 {\n-                                RustDefId::Adt(_) => unimplemented!(),\n-                                _ => panic!(\"Unexpected struct id\"),\n-                            },\n+                            chalk_ir::TypeName::Adt(_struct_id) => unimplemented!(),\n                             chalk_ir::TypeName::Scalar(scalar) => match scalar {\n                                 chalk_ir::Scalar::Bool => ty::Bool,\n                                 chalk_ir::Scalar::Char => ty::Char,"}]}