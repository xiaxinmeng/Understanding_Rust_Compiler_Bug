{"sha": "ed39b45e8d3d567649d8aec78b3bc63aa5c9f19c", "node_id": "C_kwDOAAsO6NoAKGVkMzliNDVlOGQzZDU2NzY0OWQ4YWVjNzhiM2JjNjNhYTVjOWYxOWM", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-10-25T19:47:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-25T19:47:41Z"}, "message": "Merge #10635\n\n10635: fix: fix extract_variable not working on macro_call r=Veykril a=Veykril\n\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/7410\r\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "8531b6b306d1f46aefb13d323c683e8e9feff470", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8531b6b306d1f46aefb13d323c683e8e9feff470"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed39b45e8d3d567649d8aec78b3bc63aa5c9f19c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhdwndCRBK7hj4Ov3rIwAAhfoIAHB77jZy/l21ywFAynqQffsS\n1RC9m7JPOWn42LHAzCqtVdjZvoKLiNRpYWmPWlTHfdxv3xLik3m6EL8S+9tPaGXT\nOfK0QioOSTzCeeIuMXBNxnjlDxN6lUxwWJ7sgVYNKdhZDeOT7EV251vK4EstOHyC\nHi8it/TD+aRoG7WaNYQt37rm1crPatu1IhROA44DzkxFf2S/7nFAIyiThza6UwjO\n1xJH4M3IICjcwA2qLeRd9wEbBtRJLky1B0W2nIXhphI6w49bkSyKGsDXfzHh+YeA\nVXcNMFmO2p2Wh7wOOJKZF7n0e/Peq6QSgenze5Wo6BePzADzTYcYzzhH5wdupZc=\n=PhGA\n-----END PGP SIGNATURE-----\n", "payload": "tree 8531b6b306d1f46aefb13d323c683e8e9feff470\nparent e4ca952be655b5b5c3426ac47d9f3cac66b0a642\nparent a2365ea18a8809b611d405b5aeb1cce2b38183e7\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1635191261 +0000\ncommitter GitHub <noreply@github.com> 1635191261 +0000\n\nMerge #10635\n\n10635: fix: fix extract_variable not working on macro_call r=Veykril a=Veykril\n\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/7410\r\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed39b45e8d3d567649d8aec78b3bc63aa5c9f19c", "html_url": "https://github.com/rust-lang/rust/commit/ed39b45e8d3d567649d8aec78b3bc63aa5c9f19c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed39b45e8d3d567649d8aec78b3bc63aa5c9f19c/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4ca952be655b5b5c3426ac47d9f3cac66b0a642", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4ca952be655b5b5c3426ac47d9f3cac66b0a642", "html_url": "https://github.com/rust-lang/rust/commit/e4ca952be655b5b5c3426ac47d9f3cac66b0a642"}, {"sha": "a2365ea18a8809b611d405b5aeb1cce2b38183e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2365ea18a8809b611d405b5aeb1cce2b38183e7", "html_url": "https://github.com/rust-lang/rust/commit/a2365ea18a8809b611d405b5aeb1cce2b38183e7"}], "stats": {"total": 29, "additions": 29, "deletions": 0}, "files": [{"sha": "7a57ab3b9b7cc2b45722653605c480e6881d3ed3", "filename": "crates/ide_assists/src/handlers/extract_variable.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/ed39b45e8d3d567649d8aec78b3bc63aa5c9f19c/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed39b45e8d3d567649d8aec78b3bc63aa5c9f19c/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_variable.rs?ref=ed39b45e8d3d567649d8aec78b3bc63aa5c9f19c", "patch": "@@ -160,6 +160,9 @@ impl Anchor {\n             .ancestors()\n             .take_while(|it| !ast::Item::can_cast(it.kind()) || ast::MacroCall::can_cast(it.kind()))\n             .find_map(|node| {\n+                if ast::MacroCall::can_cast(node.kind()) {\n+                    return None;\n+                }\n                 if let Some(expr) =\n                     node.parent().and_then(ast::StmtList::cast).and_then(|it| it.tail_expr())\n                 {\n@@ -816,6 +819,32 @@ fn foo() {\n         )\n     }\n \n+    #[test]\n+    fn extract_macro_call() {\n+        check_assist(\n+            extract_variable,\n+            r\"\n+struct Vec;\n+macro_rules! vec {\n+    () => {Vec}\n+}\n+fn main() {\n+    let _ = $0vec![]$0;\n+}\n+\",\n+            r\"\n+struct Vec;\n+macro_rules! vec {\n+    () => {Vec}\n+}\n+fn main() {\n+    let $0vec = vec![];\n+    let _ = vec;\n+}\n+\",\n+        );\n+    }\n+\n     #[test]\n     fn test_extract_var_for_return_not_applicable() {\n         check_assist_not_applicable(extract_variable, \"fn foo() { $0return$0; } \");"}]}