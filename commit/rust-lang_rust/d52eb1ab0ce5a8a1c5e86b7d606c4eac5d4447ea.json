{"sha": "d52eb1ab0ce5a8a1c5e86b7d606c4eac5d4447ea", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1MmViMWFiMGNlNWE4YTFjNWU4NmI3ZDYwNmM0ZWFjNWQ0NDQ3ZWE=", "commit": {"author": {"name": "Seo Sanghyeon", "email": "sanxiyn@gmail.com", "date": "2016-08-16T07:52:30Z"}, "committer": {"name": "Seo Sanghyeon", "email": "sanxiyn@gmail.com", "date": "2016-08-16T07:52:30Z"}, "message": "RUST_NEW_ERROR_FORMAT is no more", "tree": {"sha": "d5b687507845c7815d9bb191ecb84bf11fa02ee5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d5b687507845c7815d9bb191ecb84bf11fa02ee5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d52eb1ab0ce5a8a1c5e86b7d606c4eac5d4447ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d52eb1ab0ce5a8a1c5e86b7d606c4eac5d4447ea", "html_url": "https://github.com/rust-lang/rust/commit/d52eb1ab0ce5a8a1c5e86b7d606c4eac5d4447ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d52eb1ab0ce5a8a1c5e86b7d606c4eac5d4447ea/comments", "author": {"login": "sanxiyn", "id": 45249, "node_id": "MDQ6VXNlcjQ1MjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/45249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanxiyn", "html_url": "https://github.com/sanxiyn", "followers_url": "https://api.github.com/users/sanxiyn/followers", "following_url": "https://api.github.com/users/sanxiyn/following{/other_user}", "gists_url": "https://api.github.com/users/sanxiyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanxiyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanxiyn/subscriptions", "organizations_url": "https://api.github.com/users/sanxiyn/orgs", "repos_url": "https://api.github.com/users/sanxiyn/repos", "events_url": "https://api.github.com/users/sanxiyn/events{/privacy}", "received_events_url": "https://api.github.com/users/sanxiyn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sanxiyn", "id": 45249, "node_id": "MDQ6VXNlcjQ1MjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/45249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanxiyn", "html_url": "https://github.com/sanxiyn", "followers_url": "https://api.github.com/users/sanxiyn/followers", "following_url": "https://api.github.com/users/sanxiyn/following{/other_user}", "gists_url": "https://api.github.com/users/sanxiyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanxiyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanxiyn/subscriptions", "organizations_url": "https://api.github.com/users/sanxiyn/orgs", "repos_url": "https://api.github.com/users/sanxiyn/repos", "events_url": "https://api.github.com/users/sanxiyn/events{/privacy}", "received_events_url": "https://api.github.com/users/sanxiyn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13ff307f07327843348c0fb7476c4de77f95f89f", "url": "https://api.github.com/repos/rust-lang/rust/commits/13ff307f07327843348c0fb7476c4de77f95f89f", "html_url": "https://github.com/rust-lang/rust/commit/13ff307f07327843348c0fb7476c4de77f95f89f"}], "stats": {"total": 65, "additions": 24, "deletions": 41}, "files": [{"sha": "2cf3b66dd77c81ea4930c019da850a6885d914c5", "filename": "src/test/ui/codemap_tests/empty_span.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d52eb1ab0ce5a8a1c5e86b7d606c4eac5d4447ea/src%2Ftest%2Fui%2Fcodemap_tests%2Fempty_span.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d52eb1ab0ce5a8a1c5e86b7d606c4eac5d4447ea/src%2Ftest%2Fui%2Fcodemap_tests%2Fempty_span.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Fempty_span.rs?ref=d52eb1ab0ce5a8a1c5e86b7d606c4eac5d4447ea", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// rustc-env:RUST_NEW_ERROR_FORMAT\n #![feature(optin_builtin_traits)]\n fn main() {\n     struct Foo;"}, {"sha": "b33dee6b4a472ed04086888a61d93accf8f11e91", "filename": "src/test/ui/codemap_tests/empty_span.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d52eb1ab0ce5a8a1c5e86b7d606c4eac5d4447ea/src%2Ftest%2Fui%2Fcodemap_tests%2Fempty_span.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d52eb1ab0ce5a8a1c5e86b7d606c4eac5d4447ea/src%2Ftest%2Fui%2Fcodemap_tests%2Fempty_span.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Fempty_span.stderr?ref=d52eb1ab0ce5a8a1c5e86b7d606c4eac5d4447ea", "patch": "@@ -1,7 +1,7 @@\n error[E0321]: cross-crate traits with a default impl, like `std::marker::Send`, can only be implemented for a struct/enum type, not `&'static main::Foo`\n-  --> $DIR/empty_span.rs:18:5\n+  --> $DIR/empty_span.rs:17:5\n    |\n-18 |     unsafe impl Send for &'static Foo { }\n+17 |     unsafe impl Send for &'static Foo { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error"}, {"sha": "5a058d483915a5f8e28714b75f90f65508ce67ed", "filename": "src/test/ui/codemap_tests/huge_multispan_highlight.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d52eb1ab0ce5a8a1c5e86b7d606c4eac5d4447ea/src%2Ftest%2Fui%2Fcodemap_tests%2Fhuge_multispan_highlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d52eb1ab0ce5a8a1c5e86b7d606c4eac5d4447ea/src%2Ftest%2Fui%2Fcodemap_tests%2Fhuge_multispan_highlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Fhuge_multispan_highlight.rs?ref=d52eb1ab0ce5a8a1c5e86b7d606c4eac5d4447ea", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// rustc-env:RUST_NEW_ERROR_FORMAT\n-\n fn main() {\n     let x = \"foo\";\n \n@@ -96,9 +94,8 @@ fn main() {\n \n \n \n-\n-    let y = &mut x;\n-}\n \n \n \n+    let y = &mut x;\n+}"}, {"sha": "edbfd72df615fd49723fa6fd6715f38a3a64419c", "filename": "src/test/ui/codemap_tests/huge_multispan_highlight.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d52eb1ab0ce5a8a1c5e86b7d606c4eac5d4447ea/src%2Ftest%2Fui%2Fcodemap_tests%2Fhuge_multispan_highlight.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d52eb1ab0ce5a8a1c5e86b7d606c4eac5d4447ea/src%2Ftest%2Fui%2Fcodemap_tests%2Fhuge_multispan_highlight.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Fhuge_multispan_highlight.stderr?ref=d52eb1ab0ce5a8a1c5e86b7d606c4eac5d4447ea", "patch": "@@ -1,7 +1,7 @@\n error: cannot borrow immutable local variable `x` as mutable\n    --> $DIR/huge_multispan_highlight.rs:100:18\n     |\n-14  |     let x = \"foo\";\n+12  |     let x = \"foo\";\n     |         - use `mut x` here to make mutable\n ...\n 100 |     let y = &mut x;"}, {"sha": "ba1ce6abcd3d4804bdfd160a4a59dcf6b8952078", "filename": "src/test/ui/codemap_tests/issue-11715.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d52eb1ab0ce5a8a1c5e86b7d606c4eac5d4447ea/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-11715.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d52eb1ab0ce5a8a1c5e86b7d606c4eac5d4447ea/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-11715.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-11715.rs?ref=d52eb1ab0ce5a8a1c5e86b7d606c4eac5d4447ea", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// rustc-env:RUST_NEW_ERROR_FORMAT\n+\n \n \n \n@@ -99,6 +99,3 @@ fn main() {\n     let y = &mut x;\n     let z = &mut x;\n }\n-\n-\n-"}, {"sha": "e50091d56062258fda1fed1da5a8c725196fdcef", "filename": "src/test/ui/codemap_tests/one_line.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d52eb1ab0ce5a8a1c5e86b7d606c4eac5d4447ea/src%2Ftest%2Fui%2Fcodemap_tests%2Fone_line.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d52eb1ab0ce5a8a1c5e86b7d606c4eac5d4447ea/src%2Ftest%2Fui%2Fcodemap_tests%2Fone_line.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Fone_line.rs?ref=d52eb1ab0ce5a8a1c5e86b7d606c4eac5d4447ea", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// rustc-env:RUST_NEW_ERROR_FORMAT\n-\n fn main() {\n     let mut v = vec![Some(\"foo\"), Some(\"bar\")];\n     v.push(v.pop().unwrap());"}, {"sha": "a73575a8d57f1ae65783eec6492c758db02c3c5c", "filename": "src/test/ui/codemap_tests/one_line.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d52eb1ab0ce5a8a1c5e86b7d606c4eac5d4447ea/src%2Ftest%2Fui%2Fcodemap_tests%2Fone_line.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d52eb1ab0ce5a8a1c5e86b7d606c4eac5d4447ea/src%2Ftest%2Fui%2Fcodemap_tests%2Fone_line.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Fone_line.stderr?ref=d52eb1ab0ce5a8a1c5e86b7d606c4eac5d4447ea", "patch": "@@ -1,7 +1,7 @@\n error[E0499]: cannot borrow `v` as mutable more than once at a time\n-  --> $DIR/one_line.rs:15:12\n+  --> $DIR/one_line.rs:13:12\n    |\n-15 |     v.push(v.pop().unwrap());\n+13 |     v.push(v.pop().unwrap());\n    |     -      ^               - first borrow ends here\n    |     |      |\n    |     |      second mutable borrow occurs here"}, {"sha": "7c1f0db16dd0920e87da2e7a18cbfe10d97decbb", "filename": "src/test/ui/codemap_tests/overlapping_spans.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d52eb1ab0ce5a8a1c5e86b7d606c4eac5d4447ea/src%2Ftest%2Fui%2Fcodemap_tests%2Foverlapping_spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d52eb1ab0ce5a8a1c5e86b7d606c4eac5d4447ea/src%2Ftest%2Fui%2Fcodemap_tests%2Foverlapping_spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Foverlapping_spans.rs?ref=d52eb1ab0ce5a8a1c5e86b7d606c4eac5d4447ea", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// rustc-env:RUST_NEW_ERROR_FORMAT\n #[derive(Debug)]\n struct Foo { }\n "}, {"sha": "d32b18d670308c4379da0ed8060db3694a1f1bdd", "filename": "src/test/ui/codemap_tests/overlapping_spans.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d52eb1ab0ce5a8a1c5e86b7d606c4eac5d4447ea/src%2Ftest%2Fui%2Fcodemap_tests%2Foverlapping_spans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d52eb1ab0ce5a8a1c5e86b7d606c4eac5d4447ea/src%2Ftest%2Fui%2Fcodemap_tests%2Foverlapping_spans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Foverlapping_spans.stderr?ref=d52eb1ab0ce5a8a1c5e86b7d606c4eac5d4447ea", "patch": "@@ -1,7 +1,7 @@\n error[E0509]: cannot move out of type `S`, which implements the `Drop` trait\n-  --> $DIR/overlapping_spans.rs:22:9\n+  --> $DIR/overlapping_spans.rs:21:9\n    |\n-22 |         S {f:_s} => {}\n+21 |         S {f:_s} => {}\n    |         ^^^^^--^\n    |         |    |\n    |         |    hint: to prevent move, use `ref _s` or `ref mut _s`"}, {"sha": "0672b5508b607f838242eff2ee226481e381d52e", "filename": "src/test/ui/codemap_tests/tab.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d52eb1ab0ce5a8a1c5e86b7d606c4eac5d4447ea/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d52eb1ab0ce5a8a1c5e86b7d606c4eac5d4447ea/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab.rs?ref=d52eb1ab0ce5a8a1c5e86b7d606c4eac5d4447ea", "patch": "@@ -8,9 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// rustc-env:RUST_NEW_ERROR_FORMAT\n // ignore-tidy-tab\n+\n fn main() {\n \tbar;\n }\n-"}, {"sha": "fe5eba93b233115860e6ecb7a65d7104bd44f46d", "filename": "src/test/ui/codemap_tests/two_files.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d52eb1ab0ce5a8a1c5e86b7d606c4eac5d4447ea/src%2Ftest%2Fui%2Fcodemap_tests%2Ftwo_files.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d52eb1ab0ce5a8a1c5e86b7d606c4eac5d4447ea/src%2Ftest%2Fui%2Fcodemap_tests%2Ftwo_files.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Ftwo_files.rs?ref=d52eb1ab0ce5a8a1c5e86b7d606c4eac5d4447ea", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// rustc-env:RUST_NEW_ERROR_FORMAT\n include!(\"two_files_data.rs\");\n \n struct Baz { }"}, {"sha": "d58e7148f6104025a40004e386bb4f72c77c90d9", "filename": "src/test/ui/codemap_tests/two_files.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d52eb1ab0ce5a8a1c5e86b7d606c4eac5d4447ea/src%2Ftest%2Fui%2Fcodemap_tests%2Ftwo_files.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d52eb1ab0ce5a8a1c5e86b7d606c4eac5d4447ea/src%2Ftest%2Fui%2Fcodemap_tests%2Ftwo_files.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Ftwo_files.stderr?ref=d52eb1ab0ce5a8a1c5e86b7d606c4eac5d4447ea", "patch": "@@ -1,7 +1,7 @@\n error[E0404]: `Bar` is not a trait\n-  --> $DIR/two_files.rs:16:6\n+  --> $DIR/two_files.rs:15:6\n    |\n-16 | impl Bar for Baz { }\n+15 | impl Bar for Baz { }\n    |      ^^^ not a trait\n    |\n    = note: type aliases cannot be used for traits"}, {"sha": "a3dcea0546d388a6b258b1b3b3018b934fa47afd", "filename": "src/test/ui/codemap_tests/two_files_data.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d52eb1ab0ce5a8a1c5e86b7d606c4eac5d4447ea/src%2Ftest%2Fui%2Fcodemap_tests%2Ftwo_files_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d52eb1ab0ce5a8a1c5e86b7d606c4eac5d4447ea/src%2Ftest%2Fui%2Fcodemap_tests%2Ftwo_files_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Ftwo_files_data.rs?ref=d52eb1ab0ce5a8a1c5e86b7d606c4eac5d4447ea", "patch": "@@ -8,9 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// rustc-env:RUST_NEW_ERROR_FORMAT\n // ignore-test\n+\n trait Foo { }\n \n type Bar = Foo;\n-"}, {"sha": "b206722d4f36887c6f94f937b2a5256e1bf27851", "filename": "src/test/ui/codemap_tests/unicode.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d52eb1ab0ce5a8a1c5e86b7d606c4eac5d4447ea/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d52eb1ab0ce5a8a1c5e86b7d606c4eac5d4447ea/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode.rs?ref=d52eb1ab0ce5a8a1c5e86b7d606c4eac5d4447ea", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// rustc-env:RUST_NEW_ERROR_FORMAT\n extern \"\u8def\u6feb\u72fc\u00e1\u0301\u0301\" fn foo() {}\n \n fn main() { }"}, {"sha": "aa42ae341c54542e20508839e372ce1690b5ff29", "filename": "src/test/ui/codemap_tests/unicode.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d52eb1ab0ce5a8a1c5e86b7d606c4eac5d4447ea/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d52eb1ab0ce5a8a1c5e86b7d606c4eac5d4447ea/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode.stderr?ref=d52eb1ab0ce5a8a1c5e86b7d606c4eac5d4447ea", "patch": "@@ -1,7 +1,7 @@\n error: invalid ABI: expected one of [cdecl, stdcall, fastcall, vectorcall, aapcs, win64, Rust, C, system, rust-intrinsic, rust-call, platform-intrinsic], found `\u8def\u6feb\u72fc\u00e1\u0301\u0301`\n-  --> $DIR/unicode.rs:12:8\n+  --> $DIR/unicode.rs:11:8\n    |\n-12 | extern \"\u8def\u6feb\u72fc\u00e1\u0301\u0301\" fn foo() {}\n+11 | extern \"\u8def\u6feb\u72fc\u00e1\u0301\u0301\" fn foo() {}\n    |        ^^^^^^^^\n \n error: aborting due to previous error"}, {"sha": "f842627e76fee1fbe5ceff7249204cf3d063e9f5", "filename": "src/test/ui/mismatched_types/issue-26480.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d52eb1ab0ce5a8a1c5e86b7d606c4eac5d4447ea/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d52eb1ab0ce5a8a1c5e86b7d606c4eac5d4447ea/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480.rs?ref=d52eb1ab0ce5a8a1c5e86b7d606c4eac5d4447ea", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// rustc-env:RUST_NEW_ERROR_FORMAT\n extern {\n     fn write(fildes: i32, buf: *const i8, nbyte: u64) -> i64;\n }"}, {"sha": "13f23a5d01ac1aea63c45eddc76abd776f139b2b", "filename": "src/test/ui/mismatched_types/issue-26480.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d52eb1ab0ce5a8a1c5e86b7d606c4eac5d4447ea/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d52eb1ab0ce5a8a1c5e86b7d606c4eac5d4447ea/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480.stderr?ref=d52eb1ab0ce5a8a1c5e86b7d606c4eac5d4447ea", "patch": "@@ -1,16 +1,16 @@\n error[E0308]: mismatched types\n-  --> $DIR/issue-26480.rs:27:19\n+  --> $DIR/issue-26480.rs:26:19\n    |\n-27 |                   $arr.len() * size_of($arr[0]));\n+26 |                   $arr.len() * size_of($arr[0]));\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected u64, found usize\n-$DIR/issue-26480.rs:38:5: 38:19 note: in this expansion of write! (defined in $DIR/issue-26480.rs)\n+$DIR/issue-26480.rs:37:5: 37:19 note: in this expansion of write! (defined in $DIR/issue-26480.rs)\n \n error: non-scalar cast: `{integer}` as `()`\n-  --> $DIR/issue-26480.rs:33:19\n+  --> $DIR/issue-26480.rs:32:19\n    |\n-33 |     ($x:expr) => ($x as ())\n+32 |     ($x:expr) => ($x as ())\n    |                   ^^^^^^^^\n-$DIR/issue-26480.rs:39:5: 39:14 note: in this expansion of cast! (defined in $DIR/issue-26480.rs)\n+$DIR/issue-26480.rs:38:5: 38:14 note: in this expansion of cast! (defined in $DIR/issue-26480.rs)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "f7f1c78c3ba0d47365091484147002d916989a60", "filename": "src/test/ui/mismatched_types/main.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d52eb1ab0ce5a8a1c5e86b7d606c4eac5d4447ea/src%2Ftest%2Fui%2Fmismatched_types%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d52eb1ab0ce5a8a1c5e86b7d606c4eac5d4447ea/src%2Ftest%2Fui%2Fmismatched_types%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fmain.rs?ref=d52eb1ab0ce5a8a1c5e86b7d606c4eac5d4447ea", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// rustc-env:RUST_NEW_ERROR_FORMAT\n-\n fn main() {\n     let x: u32 = (\n     );"}, {"sha": "9e26be6fdddeb1021d9d5979a88326753b3f3daf", "filename": "src/test/ui/mismatched_types/main.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d52eb1ab0ce5a8a1c5e86b7d606c4eac5d4447ea/src%2Ftest%2Fui%2Fmismatched_types%2Fmain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d52eb1ab0ce5a8a1c5e86b7d606c4eac5d4447ea/src%2Ftest%2Fui%2Fmismatched_types%2Fmain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fmain.stderr?ref=d52eb1ab0ce5a8a1c5e86b7d606c4eac5d4447ea", "patch": "@@ -1,7 +1,7 @@\n error[E0308]: mismatched types\n-  --> $DIR/main.rs:14:18\n+  --> $DIR/main.rs:12:18\n    |\n-14 |     let x: u32 = (\n+12 |     let x: u32 = (\n    |                  ^ expected u32, found ()\n    |\n    = note: expected type `u32`"}]}