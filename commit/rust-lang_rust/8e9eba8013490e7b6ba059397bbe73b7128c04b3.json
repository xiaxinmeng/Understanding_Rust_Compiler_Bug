{"sha": "8e9eba8013490e7b6ba059397bbe73b7128c04b3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlOWViYTgwMTM0OTBlN2I2YmEwNTkzOTdiYmU3M2I3MTI4YzA0YjM=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-05-17T08:41:14Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-05-21T13:33:58Z"}, "message": "syntax/ext: remove the ~str dependence of the deriving code.", "tree": {"sha": "7c631e1c918d4cab90c734be56acb065d847a8b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c631e1c918d4cab90c734be56acb065d847a8b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e9eba8013490e7b6ba059397bbe73b7128c04b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e9eba8013490e7b6ba059397bbe73b7128c04b3", "html_url": "https://github.com/rust-lang/rust/commit/8e9eba8013490e7b6ba059397bbe73b7128c04b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e9eba8013490e7b6ba059397bbe73b7128c04b3/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc7b83d18659503f47ae622918c3576d430a926e", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc7b83d18659503f47ae622918c3576d430a926e", "html_url": "https://github.com/rust-lang/rust/commit/dc7b83d18659503f47ae622918c3576d430a926e"}], "stats": {"total": 160, "additions": 81, "deletions": 79}, "files": [{"sha": "1759cde0fc9757c1b294e1d01e6f66713984f813", "filename": "src/libsyntax/ext/deriving/clone.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8e9eba8013490e7b6ba059397bbe73b7128c04b3/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e9eba8013490e7b6ba059397bbe73b7128c04b3/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs?ref=8e9eba8013490e7b6ba059397bbe73b7128c04b3", "patch": "@@ -21,12 +21,12 @@ pub fn expand_deriving_clone(cx: @ext_ctxt,\n                              in_items: ~[@item])\n                           -> ~[@item] {\n     let trait_def = TraitDef {\n-        path: Path::new(~[~\"core\", ~\"clone\", ~\"Clone\"]),\n+        path: Path::new(~[\"core\", \"clone\", \"Clone\"]),\n         additional_bounds: ~[],\n         generics: LifetimeBounds::empty(),\n         methods: ~[\n             MethodDef {\n-                name: ~\"clone\",\n+                name: \"clone\",\n                 generics: LifetimeBounds::empty(),\n                 explicit_self: borrowed_explicit_self(),\n                 args: ~[],\n@@ -48,12 +48,12 @@ pub fn expand_deriving_deep_clone(cx: @ext_ctxt,\n                                  in_items: ~[@item])\n     -> ~[@item] {\n     let trait_def = TraitDef {\n-        path: Path::new(~[~\"core\", ~\"clone\", ~\"DeepClone\"]),\n+        path: Path::new(~[\"core\", \"clone\", \"DeepClone\"]),\n         additional_bounds: ~[],\n         generics: LifetimeBounds::empty(),\n         methods: ~[\n             MethodDef {\n-                name: ~\"deep_clone\",\n+                name: \"deep_clone\",\n                 generics: LifetimeBounds::empty(),\n                 explicit_self: borrowed_explicit_self(),\n                 args: ~[],"}, {"sha": "e6fcfdf5563544e9581a573502c780cdc4f19e90", "filename": "src/libsyntax/ext/deriving/cmp/eq.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8e9eba8013490e7b6ba059397bbe73b7128c04b3/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Feq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e9eba8013490e7b6ba059397bbe73b7128c04b3/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Feq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Feq.rs?ref=8e9eba8013490e7b6ba059397bbe73b7128c04b3", "patch": "@@ -36,20 +36,20 @@ pub fn expand_deriving_eq(cx: @ext_ctxt,\n                 generics: LifetimeBounds::empty(),\n                 explicit_self: borrowed_explicit_self(),\n                 args: ~[borrowed_self()],\n-                ret_ty: Literal(Path::new(~[~\"bool\"])),\n+                ret_ty: Literal(Path::new(~[\"bool\"])),\n                 const_nonmatching: true,\n                 combine_substructure: $f\n             },\n         }\n     );\n \n     let trait_def = TraitDef {\n-        path: Path::new(~[~\"core\", ~\"cmp\", ~\"Eq\"]),\n+        path: Path::new(~[\"core\", \"cmp\", \"Eq\"]),\n         additional_bounds: ~[],\n         generics: LifetimeBounds::empty(),\n         methods: ~[\n-            md!(~\"eq\", cs_eq),\n-            md!(~\"ne\", cs_ne)\n+            md!(\"eq\", cs_eq),\n+            md!(\"ne\", cs_ne)\n         ]\n     };\n "}, {"sha": "5aae8454c09b461d3df519330a922a706dfcecd6", "filename": "src/libsyntax/ext/deriving/cmp/ord.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8e9eba8013490e7b6ba059397bbe73b7128c04b3/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e9eba8013490e7b6ba059397bbe73b7128c04b3/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs?ref=8e9eba8013490e7b6ba059397bbe73b7128c04b3", "patch": "@@ -26,7 +26,7 @@ pub fn expand_deriving_ord(cx: @ext_ctxt,\n                 generics: LifetimeBounds::empty(),\n                 explicit_self: borrowed_explicit_self(),\n                 args: ~[borrowed_self()],\n-                ret_ty: Literal(Path::new(~[~\"bool\"])),\n+                ret_ty: Literal(Path::new(~[\"bool\"])),\n                 const_nonmatching: false,\n                 combine_substructure: |cx, span, substr|\n                     cs_ord($less, $equal, cx, span, substr)\n@@ -37,15 +37,15 @@ pub fn expand_deriving_ord(cx: @ext_ctxt,\n \n \n     let trait_def = TraitDef {\n-        path: Path::new(~[~\"core\", ~\"cmp\", ~\"Ord\"]),\n+        path: Path::new(~[\"core\", \"cmp\", \"Ord\"]),\n         // XXX: Ord doesn't imply Eq yet\n-        additional_bounds: ~[Literal(Path::new(~[~\"core\", ~\"cmp\", ~\"Eq\"]))],\n+        additional_bounds: ~[Literal(Path::new(~[\"core\", \"cmp\", \"Eq\"]))],\n         generics: LifetimeBounds::empty(),\n         methods: ~[\n-            md!(~\"lt\", true,  false),\n-            md!(~\"le\", true,  true),\n-            md!(~\"gt\", false, false),\n-            md!(~\"ge\", false, true)\n+            md!(\"lt\", true,  false),\n+            md!(\"le\", true,  true),\n+            md!(\"gt\", false, false),\n+            md!(\"ge\", false, true)\n         ]\n     };\n "}, {"sha": "9ab44f506bade850d8744feaeaf975f7e8a1bc95", "filename": "src/libsyntax/ext/deriving/cmp/totaleq.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8e9eba8013490e7b6ba059397bbe73b7128c04b3/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotaleq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e9eba8013490e7b6ba059397bbe73b7128c04b3/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotaleq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotaleq.rs?ref=8e9eba8013490e7b6ba059397bbe73b7128c04b3", "patch": "@@ -26,16 +26,16 @@ pub fn expand_deriving_totaleq(cx: @ext_ctxt,\n     }\n \n     let trait_def = TraitDef {\n-        path: Path::new(~[~\"core\", ~\"cmp\", ~\"TotalEq\"]),\n+        path: Path::new(~[\"core\", \"cmp\", \"TotalEq\"]),\n         additional_bounds: ~[],\n         generics: LifetimeBounds::empty(),\n         methods: ~[\n             MethodDef {\n-                name: ~\"equals\",\n+                name: \"equals\",\n                 generics: LifetimeBounds::empty(),\n                 explicit_self: borrowed_explicit_self(),\n                 args: ~[borrowed_self()],\n-                ret_ty: Literal(Path::new(~[~\"bool\"])),\n+                ret_ty: Literal(Path::new(~[\"bool\"])),\n                 const_nonmatching: true,\n                 combine_substructure: cs_equals\n             }"}, {"sha": "1b6ea16b86e2d438dae71a2d4463161690bafd46", "filename": "src/libsyntax/ext/deriving/cmp/totalord.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8e9eba8013490e7b6ba059397bbe73b7128c04b3/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotalord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e9eba8013490e7b6ba059397bbe73b7128c04b3/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotalord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotalord.rs?ref=8e9eba8013490e7b6ba059397bbe73b7128c04b3", "patch": "@@ -20,16 +20,16 @@ pub fn expand_deriving_totalord(cx: @ext_ctxt,\n                                 mitem: @meta_item,\n                                 in_items: ~[@item]) -> ~[@item] {\n     let trait_def = TraitDef {\n-        path: Path::new(~[~\"core\", ~\"cmp\", ~\"TotalOrd\"]),\n+        path: Path::new(~[\"core\", \"cmp\", \"TotalOrd\"]),\n         additional_bounds: ~[],\n         generics: LifetimeBounds::empty(),\n         methods: ~[\n             MethodDef {\n-                name: ~\"cmp\",\n+                name: \"cmp\",\n                 generics: LifetimeBounds::empty(),\n                 explicit_self: borrowed_explicit_self(),\n                 args: ~[borrowed_self()],\n-                ret_ty: Literal(Path::new(~[~\"core\", ~\"cmp\", ~\"Ordering\"])),\n+                ret_ty: Literal(Path::new(~[\"core\", \"cmp\", \"Ordering\"])),\n                 const_nonmatching: false,\n                 combine_substructure: cs_cmp\n             }"}, {"sha": "ae9c4c1fefb4496820ad1350cb05420b940a87f0", "filename": "src/libsyntax/ext/deriving/generic.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8e9eba8013490e7b6ba059397bbe73b7128c04b3/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e9eba8013490e7b6ba059397bbe73b7128c04b3/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs?ref=8e9eba8013490e7b6ba059397bbe73b7128c04b3", "patch": "@@ -195,34 +195,34 @@ pub fn expand_deriving_generic(cx: @ext_ctxt,\n \n pub struct TraitDef<'self> {\n     /// Path of the trait, including any type parameters\n-    path: Path,\n+    path: Path<'self>,\n     /// Additional bounds required of any type parameters of the type,\n     /// other than the current trait\n-    additional_bounds: ~[Ty],\n+    additional_bounds: ~[Ty<'self>],\n \n     /// Any extra lifetimes and/or bounds, e.g. `D: std::serialize::Decoder`\n-    generics: LifetimeBounds,\n+    generics: LifetimeBounds<'self>,\n \n     methods: ~[MethodDef<'self>]\n }\n \n \n pub struct MethodDef<'self> {\n     /// name of the method\n-    name: ~str,\n+    name: &'self str,\n     /// List of generics, e.g. `R: core::rand::Rng`\n-    generics: LifetimeBounds,\n+    generics: LifetimeBounds<'self>,\n \n     /// Whether there is a self argument (outer Option) i.e. whether\n     /// this is a static function, and whether it is a pointer (inner\n     /// Option)\n-    explicit_self: Option<Option<PtrTy>>,\n+    explicit_self: Option<Option<PtrTy<'self>>>,\n \n     /// Arguments other than the self argument\n-    args: ~[Ty],\n+    args: ~[Ty<'self>],\n \n     /// Return type\n-    ret_ty: Ty,\n+    ret_ty: Ty<'self>,\n \n     /// if the value of the nonmatching enums is independent of the\n     /// actual enum variants, i.e. can use _ => .. match."}, {"sha": "9b8f127d42a0b10aabd301be2497dc5fb5b77226", "filename": "src/libsyntax/ext/deriving/iter_bytes.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8e9eba8013490e7b6ba059397bbe73b7128c04b3/src%2Flibsyntax%2Fext%2Fderiving%2Fiter_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e9eba8013490e7b6ba059397bbe73b7128c04b3/src%2Flibsyntax%2Fext%2Fderiving%2Fiter_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fiter_bytes.rs?ref=8e9eba8013490e7b6ba059397bbe73b7128c04b3", "patch": "@@ -19,19 +19,19 @@ pub fn expand_deriving_iter_bytes(cx: @ext_ctxt,\n                                   mitem: @meta_item,\n                                   in_items: ~[@item]) -> ~[@item] {\n     let trait_def = TraitDef {\n-        path: Path::new(~[~\"core\", ~\"to_bytes\", ~\"IterBytes\"]),\n+        path: Path::new(~[\"core\", \"to_bytes\", \"IterBytes\"]),\n         additional_bounds: ~[],\n         generics: LifetimeBounds::empty(),\n         methods: ~[\n             MethodDef {\n-                name: ~\"iter_bytes\",\n+                name: \"iter_bytes\",\n                 generics: LifetimeBounds::empty(),\n                 explicit_self: borrowed_explicit_self(),\n                 args: ~[\n-                    Literal(Path::new(~[~\"bool\"])),\n-                    Literal(Path::new(~[~\"core\", ~\"to_bytes\", ~\"Cb\"]))\n+                    Literal(Path::new(~[\"bool\"])),\n+                    Literal(Path::new(~[\"core\", \"to_bytes\", \"Cb\"]))\n                 ],\n-                ret_ty: Literal(Path::new(~[~\"bool\"])),\n+                ret_ty: Literal(Path::new(~[\"bool\"])),\n                 const_nonmatching: false,\n                 combine_substructure: iter_bytes_substructure\n             }"}, {"sha": "2fb47c1e53ec21e2f870a6340e9fda665055750b", "filename": "src/libsyntax/ext/deriving/rand.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8e9eba8013490e7b6ba059397bbe73b7128c04b3/src%2Flibsyntax%2Fext%2Fderiving%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e9eba8013490e7b6ba059397bbe73b7128c04b3/src%2Flibsyntax%2Fext%2Fderiving%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Frand.rs?ref=8e9eba8013490e7b6ba059397bbe73b7128c04b3", "patch": "@@ -21,20 +21,20 @@ pub fn expand_deriving_rand(cx: @ext_ctxt,\n                             in_items: ~[@item])\n     -> ~[@item] {\n     let trait_def = TraitDef {\n-        path: Path::new(~[~\"core\", ~\"rand\", ~\"Rand\"]),\n+        path: Path::new(~[\"core\", \"rand\", \"Rand\"]),\n         additional_bounds: ~[],\n         generics: LifetimeBounds::empty(),\n         methods: ~[\n             MethodDef {\n-                name: ~\"rand\",\n+                name: \"rand\",\n                 generics: LifetimeBounds {\n                     lifetimes: ~[],\n-                    bounds: ~[(~\"R\",\n-                               ~[ Path::new(~[~\"core\", ~\"rand\", ~\"Rng\"]) ])]\n+                    bounds: ~[(\"R\",\n+                               ~[ Path::new(~[\"core\", \"rand\", \"Rng\"]) ])]\n                 },\n                 explicit_self: None,\n                 args: ~[\n-                    Ptr(~Literal(Path::new_local(~\"R\")),\n+                    Ptr(~Literal(Path::new_local(\"R\")),\n                         Borrowed(None, ast::m_mutbl))\n                 ],\n                 ret_ty: Self,"}, {"sha": "0c12a1948cd4cc9043e7e9932ffcab3ff4f24afe", "filename": "src/libsyntax/ext/deriving/to_str.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8e9eba8013490e7b6ba059397bbe73b7128c04b3/src%2Flibsyntax%2Fext%2Fderiving%2Fto_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e9eba8013490e7b6ba059397bbe73b7128c04b3/src%2Flibsyntax%2Fext%2Fderiving%2Fto_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fto_str.rs?ref=8e9eba8013490e7b6ba059397bbe73b7128c04b3", "patch": "@@ -20,16 +20,16 @@ pub fn expand_deriving_to_str(cx: @ext_ctxt,\n                               in_items: ~[@item])\n     -> ~[@item] {\n     let trait_def = TraitDef {\n-        path: Path::new(~[~\"core\", ~\"to_str\", ~\"ToStr\"]),\n+        path: Path::new(~[\"core\", \"to_str\", \"ToStr\"]),\n         additional_bounds: ~[],\n         generics: LifetimeBounds::empty(),\n         methods: ~[\n             MethodDef {\n-                name: ~\"to_str\",\n+                name: \"to_str\",\n                 generics: LifetimeBounds::empty(),\n                 explicit_self: borrowed_explicit_self(),\n                 args: ~[],\n-                ret_ty: Ptr(~Literal(Path::new_local(~\"str\")), Owned),\n+                ret_ty: Ptr(~Literal(Path::new_local(\"str\")), Owned),\n                 const_nonmatching: false,\n                 combine_substructure: to_str_substructure\n             }"}, {"sha": "bbc6b6634e383f5d62a29948b32726a00b27281a", "filename": "src/libsyntax/ext/deriving/ty.rs", "status": "modified", "additions": 39, "deletions": 37, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/8e9eba8013490e7b6ba059397bbe73b7128c04b3/src%2Flibsyntax%2Fext%2Fderiving%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e9eba8013490e7b6ba059397bbe73b7128c04b3/src%2Flibsyntax%2Fext%2Fderiving%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fty.rs?ref=8e9eba8013490e7b6ba059397bbe73b7128c04b3", "patch": "@@ -21,31 +21,30 @@ use codemap::{span,respan};\n use opt_vec;\n \n /// The types of pointers\n-#[deriving(Eq)]\n-pub enum PtrTy {\n+pub enum PtrTy<'self> {\n     Owned, // ~\n     Managed(ast::mutability), // @[mut]\n-    Borrowed(Option<~str>, ast::mutability), // &['lifetime] [mut]\n+    Borrowed(Option<&'self str>, ast::mutability), // &['lifetime] [mut]\n }\n \n /// A path, e.g. `::core::option::Option::<int>` (global). Has support\n /// for type parameters and a lifetime.\n-#[deriving(Eq)]\n-pub struct Path {\n-    path: ~[~str],\n-    lifetime: Option<~str>,\n-    params: ~[~Ty],\n+pub struct Path<'self> {\n+    path: ~[&'self str],\n+    lifetime: Option<&'self str>,\n+    params: ~[~Ty<'self>],\n     global: bool\n }\n \n-pub impl Path {\n-    fn new(path: ~[~str]) -> Path {\n+pub impl<'self> Path<'self> {\n+    fn new<'r>(path: ~[&'r str]) -> Path<'r> {\n         Path::new_(path, None, ~[], true)\n     }\n-    fn new_local(path: ~str) -> Path {\n+    fn new_local<'r>(path: &'r str) -> Path<'r> {\n         Path::new_(~[ path ], None, ~[], false)\n     }\n-    fn new_(path: ~[~str], lifetime: Option<~str>, params: ~[~Ty], global: bool) -> Path {\n+    fn new_<'r>(path: ~[&'r str], lifetime: Option<&'r str>, params: ~[~Ty<'r>], global: bool)\n+        -> Path<'r> {\n         Path {\n             path: path,\n             lifetime: lifetime,\n@@ -56,9 +55,9 @@ pub impl Path {\n \n     fn to_ty(&self, cx: @ext_ctxt, span: span,\n              self_ty: ident, self_generics: &Generics) -> @ast::Ty {\n-                build::mk_ty_path_path(cx, span,\n-                                       self.to_path(cx, span,\n-                                                    self_ty, self_generics))\n+        build::mk_ty_path_path(cx, span,\n+                               self.to_path(cx, span,\n+                                            self_ty, self_generics))\n     }\n     fn to_path(&self, cx: @ext_ctxt, span: span,\n                self_ty: ident, self_generics: &Generics) -> @ast::Path {\n@@ -75,45 +74,44 @@ pub impl Path {\n }\n \n /// A type. Supports pointers (except for *), Self, and literals\n-#[deriving(Eq)]\n-pub enum Ty {\n+pub enum Ty<'self> {\n     Self,\n     // &/~/@ Ty\n-    Ptr(~Ty, PtrTy),\n+    Ptr(~Ty<'self>, PtrTy<'self>),\n     // mod::mod::Type<[lifetime], [Params...]>, including a plain type\n     // parameter, and things like `int`\n-    Literal(Path),\n+    Literal(Path<'self>),\n     // includes nil\n-    Tuple(~[Ty])\n+    Tuple(~[Ty<'self>])\n }\n \n-pub fn borrowed_ptrty() -> PtrTy {\n+pub fn borrowed_ptrty<'r>() -> PtrTy<'r> {\n     Borrowed(None, ast::m_imm)\n }\n-pub fn borrowed(ty: ~Ty) -> Ty {\n+pub fn borrowed<'r>(ty: ~Ty<'r>) -> Ty<'r> {\n     Ptr(ty, borrowed_ptrty())\n }\n \n-pub fn borrowed_explicit_self() -> Option<Option<PtrTy>> {\n+pub fn borrowed_explicit_self<'r>() -> Option<Option<PtrTy<'r>>> {\n     Some(Some(borrowed_ptrty()))\n }\n \n-pub fn borrowed_self() -> Ty {\n+pub fn borrowed_self<'r>() -> Ty<'r> {\n     borrowed(~Self)\n }\n \n-pub fn nil_ty() -> Ty {\n+pub fn nil_ty() -> Ty<'static> {\n     Tuple(~[])\n }\n \n-fn mk_lifetime(cx: @ext_ctxt, span: span, lt: &Option<~str>) -> Option<@ast::Lifetime> {\n+fn mk_lifetime(cx: @ext_ctxt, span: span, lt: &Option<&str>) -> Option<@ast::Lifetime> {\n     match *lt {\n         Some(ref s) => Some(@build::mk_lifetime(cx, span, cx.ident_of(*s))),\n         None => None\n     }\n }\n \n-pub impl Ty {\n+pub impl<'self> Ty<'self> {\n     fn to_ty(&self, cx: @ext_ctxt, span: span,\n              self_ty: ident, self_generics: &Generics) -> @ast::Ty {\n         match *self {\n@@ -174,7 +172,7 @@ pub impl Ty {\n }\n \n \n-fn mk_ty_param(cx: @ext_ctxt, span: span, name: ~str, bounds: ~[Path],\n+fn mk_ty_param(cx: @ext_ctxt, span: span, name: &str, bounds: &[Path],\n                self_ident: ident, self_generics: &Generics) -> ast::TyParam {\n     let bounds = opt_vec::from(\n         do bounds.map |b| {\n@@ -192,24 +190,28 @@ fn mk_generics(lifetimes: ~[ast::Lifetime],  ty_params: ~[ast::TyParam]) -> Gene\n }\n \n /// Lifetimes and bounds on type parameters\n-pub struct LifetimeBounds {\n-    lifetimes: ~[~str],\n-    bounds: ~[(~str, ~[Path])]\n+pub struct LifetimeBounds<'self> {\n+    lifetimes: ~[&'self str],\n+    bounds: ~[(&'self str, ~[Path<'self>])]\n }\n \n-pub impl LifetimeBounds {\n-    fn empty() -> LifetimeBounds {\n+pub impl<'self> LifetimeBounds<'self> {\n+    fn empty() -> LifetimeBounds<'static> {\n         LifetimeBounds {\n             lifetimes: ~[], bounds: ~[]\n         }\n     }\n     fn to_generics(&self, cx: @ext_ctxt, span: span,\n                    self_ty: ident, self_generics: &Generics) -> Generics {\n-        let lifetimes = do self.lifetimes.map |&lt| {\n-            build::mk_lifetime(cx, span, cx.ident_of(lt))\n+        let lifetimes = do self.lifetimes.map |lt| {\n+            build::mk_lifetime(cx, span, cx.ident_of(*lt))\n         };\n-        let ty_params = do self.bounds.map |&(name, bounds)| {\n-            mk_ty_param(cx, span, name, bounds, self_ty, self_generics)\n+        let ty_params = do self.bounds.map |t| {\n+            match t {\n+                &(ref name, ref bounds) => {\n+                    mk_ty_param(cx, span, *name, *bounds, self_ty, self_generics)\n+                }\n+            }\n         };\n         mk_generics(lifetimes, ty_params)\n     }"}]}