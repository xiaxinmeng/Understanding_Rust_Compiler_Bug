{"sha": "f4210fc12f6090288c85dc0c9d9cb341c9acf72d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0MjEwZmMxMmY2MDkwMjg4Yzg1ZGMwYzlkOWNiMzQxYzlhY2Y3MmQ=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-06-05T02:17:01Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-06-05T02:17:01Z"}, "message": "Revert \"Revert \"Move llvm submodule updates to rustbuild\"\"\n\nThis reverts commit ad308264a38531bc8d2179324bac3652a1cda640.", "tree": {"sha": "6caefbeb0d28eac1b8dfd62fa1a9cf3da431ecb1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6caefbeb0d28eac1b8dfd62fa1a9cf3da431ecb1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4210fc12f6090288c85dc0c9d9cb341c9acf72d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4210fc12f6090288c85dc0c9d9cb341c9acf72d", "html_url": "https://github.com/rust-lang/rust/commit/f4210fc12f6090288c85dc0c9d9cb341c9acf72d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4210fc12f6090288c85dc0c9d9cb341c9acf72d/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4c2ab57a43737867982fafc8cfacd9b069fee96", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4c2ab57a43737867982fafc8cfacd9b069fee96", "html_url": "https://github.com/rust-lang/rust/commit/c4c2ab57a43737867982fafc8cfacd9b069fee96"}], "stats": {"total": 111, "additions": 98, "deletions": 13}, "files": [{"sha": "bd5b3797ea825fa68eb5b3a67b2979d5c2dd2173", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f4210fc12f6090288c85dc0c9d9cb341c9acf72d/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/f4210fc12f6090288c85dc0c9d9cb341c9acf72d/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=f4210fc12f6090288c85dc0c9d9cb341c9acf72d", "patch": "@@ -991,28 +991,20 @@ def update_submodules(self):\n         ).decode(default_encoding).splitlines()]\n         filtered_submodules = []\n         submodules_names = []\n-        llvm_checked_out = os.path.exists(os.path.join(self.rust_root, \"src/llvm-project/.git\"))\n-        external_llvm_provided = self.get_toml('llvm-config') or self.downloading_llvm()\n-        llvm_needed = not self.get_toml('codegen-backends', 'rust') \\\n-            or \"llvm\" in self.get_toml('codegen-backends', 'rust')\n         for module in submodules:\n+            # This is handled by native::Llvm in rustbuild, not here\n             if module.endswith(\"llvm-project\"):\n-                # Don't sync the llvm-project submodule if an external LLVM was\n-                # provided, if we are downloading LLVM or if the LLVM backend is\n-                # not being built. Also, if the submodule has been initialized\n-                # already, sync it anyways so that it doesn't mess up contributor\n-                # pull requests.\n-                if external_llvm_provided or not llvm_needed:\n-                    if self.get_toml('lld') != 'true' and not llvm_checked_out:\n-                        continue\n+                continue\n             check = self.check_submodule(module, slow_submodules)\n             filtered_submodules.append((module, check))\n             submodules_names.append(module)\n         recorded = subprocess.Popen([\"git\", \"ls-tree\", \"HEAD\"] + submodules_names,\n                                     cwd=self.rust_root, stdout=subprocess.PIPE)\n         recorded = recorded.communicate()[0].decode(default_encoding).strip().splitlines()\n+        # { filename: hash }\n         recorded_submodules = {}\n         for data in recorded:\n+            # [mode, kind, hash, filename]\n             data = data.split()\n             recorded_submodules[data[3]] = data[2]\n         for module in filtered_submodules:"}, {"sha": "a351290a4206fec219a7ac1c41e20674646ab1fa", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f4210fc12f6090288c85dc0c9d9cb341c9acf72d/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4210fc12f6090288c85dc0c9d9cb341c9acf72d/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=f4210fc12f6090288c85dc0c9d9cb341c9acf72d", "patch": "@@ -472,12 +472,22 @@ impl Build {\n         slice::from_ref(&self.build.triple)\n     }\n \n+    /// If the LLVM submodule has been initialized already, sync it unconditionally. This avoids\n+    /// contributors checking in a submodule change by accident.\n+    pub fn maybe_update_llvm_submodule(&self) {\n+        if self.in_tree_llvm_info.is_git() {\n+            native::update_llvm_submodule(self);\n+        }\n+    }\n+\n     /// Executes the entire build, as configured by the flags and configuration.\n     pub fn build(&mut self) {\n         unsafe {\n             job::setup(self);\n         }\n \n+        self.maybe_update_llvm_submodule();\n+\n         if let Subcommand::Format { check, paths } = &self.config.cmd {\n             return format::format(self, *check, &paths);\n         }"}, {"sha": "20155c0fcde0505ff3b97fbf83f7d62a6e6b8bcf", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 83, "deletions": 1, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/f4210fc12f6090288c85dc0c9d9cb341c9acf72d/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4210fc12f6090288c85dc0c9d9cb341c9acf72d/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=f4210fc12f6090288c85dc0c9d9cb341c9acf72d", "patch": "@@ -21,7 +21,7 @@ use build_helper::{output, t};\n use crate::builder::{Builder, RunConfig, ShouldRun, Step};\n use crate::config::TargetSelection;\n use crate::util::{self, exe};\n-use crate::GitRepo;\n+use crate::{Build, GitRepo};\n use build_helper::up_to_date;\n \n pub struct Meta {\n@@ -91,6 +91,85 @@ pub fn prebuilt_llvm_config(\n     Err(Meta { stamp, build_llvm_config, out_dir, root: root.into() })\n }\n \n+// modified from `check_submodule` and `update_submodule` in bootstrap.py\n+pub(crate) fn update_llvm_submodule(build: &Build) {\n+    let llvm_project = &Path::new(\"src\").join(\"llvm-project\");\n+\n+    fn dir_is_empty(dir: &Path) -> bool {\n+        t!(std::fs::read_dir(dir)).next().is_none()\n+    }\n+\n+    // NOTE: The check for the empty directory is here because when running x.py\n+    // the first time, the llvm submodule won't be checked out. Check it out\n+    // now so we can build it.\n+    if !build.in_tree_llvm_info.is_git() && !dir_is_empty(&build.config.src.join(llvm_project)) {\n+        return;\n+    }\n+\n+    // check_submodule\n+    let checked_out = if build.config.fast_submodules {\n+        Some(output(\n+            Command::new(\"git\")\n+                .args(&[\"rev-parse\", \"HEAD\"])\n+                .current_dir(build.config.src.join(llvm_project)),\n+        ))\n+    } else {\n+        None\n+    };\n+\n+    // update_submodules\n+    let recorded = output(\n+        Command::new(\"git\")\n+            .args(&[\"ls-tree\", \"HEAD\"])\n+            .arg(llvm_project)\n+            .current_dir(&build.config.src),\n+    );\n+    let hash =\n+        recorded.split(' ').nth(2).unwrap_or_else(|| panic!(\"unexpected output `{}`\", recorded));\n+\n+    // update_submodule\n+    if let Some(llvm_hash) = checked_out {\n+        if hash == llvm_hash {\n+            // already checked out\n+            return;\n+        }\n+    }\n+\n+    println!(\"Updating submodule {}\", llvm_project.display());\n+    build.run(\n+        Command::new(\"git\")\n+            .args(&[\"submodule\", \"-q\", \"sync\"])\n+            .arg(llvm_project)\n+            .current_dir(&build.config.src),\n+    );\n+\n+    // Try passing `--progress` to start, then run git again without if that fails.\n+    let update = |progress: bool| {\n+        let mut git = Command::new(\"git\");\n+        git.args(&[\"submodule\", \"update\", \"--init\", \"--recursive\"]);\n+        if progress {\n+            git.arg(\"--progress\");\n+        }\n+        git.arg(llvm_project).current_dir(&build.config.src);\n+        git\n+    };\n+    // NOTE: doesn't use `try_run` because this shouldn't print an error if it fails.\n+    if !update(true).status().map_or(false, |status| status.success()) {\n+        build.run(&mut update(false));\n+    }\n+\n+    build.run(\n+        Command::new(\"git\")\n+            .args(&[\"reset\", \"-q\", \"--hard\"])\n+            .current_dir(build.config.src.join(llvm_project)),\n+    );\n+    build.run(\n+        Command::new(\"git\")\n+            .args(&[\"clean\", \"-qdfx\"])\n+            .current_dir(build.config.src.join(llvm_project)),\n+    );\n+}\n+\n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct Llvm {\n     pub target: TargetSelection,\n@@ -128,6 +207,9 @@ impl Step for Llvm {\n                 Err(m) => m,\n             };\n \n+        if !builder.config.dry_run {\n+            update_llvm_submodule(builder);\n+        }\n         if builder.config.llvm_link_shared\n             && (target.contains(\"windows\") || target.contains(\"apple-darwin\"))\n         {"}, {"sha": "b1ec072f3f8aae7da31f1d171b770bf097948197", "filename": "src/build_helper/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f4210fc12f6090288c85dc0c9d9cb341c9acf72d/src%2Fbuild_helper%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4210fc12f6090288c85dc0c9d9cb341c9acf72d/src%2Fbuild_helper%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbuild_helper%2Flib.rs?ref=f4210fc12f6090288c85dc0c9d9cb341c9acf72d", "patch": "@@ -130,6 +130,7 @@ pub fn make(host: &str) -> PathBuf {\n     }\n }\n \n+#[track_caller]\n pub fn output(cmd: &mut Command) -> String {\n     let output = match cmd.stderr(Stdio::inherit()).output() {\n         Ok(status) => status,"}]}