{"sha": "b790b78eec5f23f018becd6b854dd02aa62d0c8f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3OTBiNzhlZWM1ZjIzZjAxOGJlY2Q2Yjg1NGRkMDJhYTYyZDBjOGY=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2014-12-25T23:21:14Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2014-12-25T23:21:14Z"}, "message": "Merge branch 'master' of github.com:Manishearth/rust-clippy", "tree": {"sha": "0d66363bbc9b6398a53c65b4b5923987fa1ac4ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d66363bbc9b6398a53c65b4b5923987fa1ac4ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b790b78eec5f23f018becd6b854dd02aa62d0c8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b790b78eec5f23f018becd6b854dd02aa62d0c8f", "html_url": "https://github.com/rust-lang/rust/commit/b790b78eec5f23f018becd6b854dd02aa62d0c8f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b790b78eec5f23f018becd6b854dd02aa62d0c8f/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39481a521c626148b88385dca5197af8b07358e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/39481a521c626148b88385dca5197af8b07358e3", "html_url": "https://github.com/rust-lang/rust/commit/39481a521c626148b88385dca5197af8b07358e3"}, {"sha": "84f39f08f863b593d7bc02676c718558767a1989", "url": "https://api.github.com/repos/rust-lang/rust/commits/84f39f08f863b593d7bc02676c718558767a1989", "html_url": "https://github.com/rust-lang/rust/commit/84f39f08f863b593d7bc02676c718558767a1989"}], "stats": {"total": 46, "additions": 43, "deletions": 3}, "files": [{"sha": "3d5e366f56dbc15abe25d231ffdc39128dea610e", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b790b78eec5f23f018becd6b854dd02aa62d0c8f/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/b790b78eec5f23f018becd6b854dd02aa62d0c8f/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=b790b78eec5f23f018becd6b854dd02aa62d0c8f", "patch": "@@ -10,6 +10,7 @@ Lints included in this crate:\n  - `clippy_box_vec`: Warns on usage of `Box<Vec<T>>`\n  - `clippy_dlist`: Warns on usage of `DList`\n  - `clippy_str_to_string`: Warns on usage of `str::to_string()`\n+ - `clippy_toplevel_ref_arg`: Warns when a function argument is declared `ref` (i.e. `fn foo(ref x: u8)`, but not `fn foo((ref x, ref y): (u8, u8))`).\n \n More to come, please [file an issue](https://github.com/Manishearth/rust-clippy/issues) if you have ideas!\n "}, {"sha": "0be737f90288d2413e376d21efe4dd912fb381f2", "filename": "examples/toplevel_ref_arg.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b790b78eec5f23f018becd6b854dd02aa62d0c8f/examples%2Ftoplevel_ref_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b790b78eec5f23f018becd6b854dd02aa62d0c8f/examples%2Ftoplevel_ref_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/examples%2Ftoplevel_ref_arg.rs?ref=b790b78eec5f23f018becd6b854dd02aa62d0c8f", "patch": "@@ -0,0 +1,14 @@\n+#![feature(phase)]\n+\n+#[phase(plugin)]\n+extern crate rust_clippy;\n+\n+fn the_answer(ref mut x: u8) {\n+  *x = 42;\n+}\n+\n+fn main() {\n+  let mut x = 0;\n+  the_answer(x);\n+  println!(\"The answer is {}.\", x);\n+}"}, {"sha": "9ac74eb2320b833e59728cafc583a9e6446a05c0", "filename": "src/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b790b78eec5f23f018becd6b854dd02aa62d0c8f/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b790b78eec5f23f018becd6b854dd02aa62d0c8f/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=b790b78eec5f23f018becd6b854dd02aa62d0c8f", "patch": "@@ -1,8 +1,8 @@\n-#![feature(globs, phase, plugin_registrar)] \n+#![feature(globs, phase, plugin_registrar)]\n \n #![allow(unused_imports)]\n \n-#[phase(plugin,link)]\n+#[phase(plugin, link)]\n extern crate syntax;\n #[phase(plugin, link)]\n extern crate rustc;\n@@ -21,4 +21,5 @@ pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_lint_pass(box types::TypePass as LintPassObject);\n     reg.register_lint_pass(box misc::MiscPass as LintPassObject);\n     reg.register_lint_pass(box misc::StrToStringPass as LintPassObject);\n+    reg.register_lint_pass(box misc::TopLevelRefPass as LintPassObject);\n }"}, {"sha": "c72f39ba315035d6c0bf46134a5368f9492a115d", "filename": "src/misc.rs", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b790b78eec5f23f018becd6b854dd02aa62d0c8f/src%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b790b78eec5f23f018becd6b854dd02aa62d0c8f/src%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmisc.rs?ref=b790b78eec5f23f018becd6b854dd02aa62d0c8f", "patch": "@@ -1,6 +1,7 @@\n use syntax::ptr::P;\n use syntax::ast;\n use syntax::ast::*;\n+use syntax::visit::{FnKind};\n use rustc::lint::{Context, LintPass, LintArray, Lint, Level};\n use rustc::middle::ty::{mod, expr_ty, ty_str, ty_ptr, ty_rptr};\n use syntax::codemap::Span;\n@@ -39,7 +40,7 @@ impl LintPass for MiscPass {\n                               format!(\"Try if let {} = {} {{ ... }}\",\n                                       map.span_to_snippet(arms[0].pats[0].span).unwrap_or(\"..\".to_string()),\n                                       map.span_to_snippet(ex.span).unwrap_or(\"..\".to_string())).as_slice()\n-                        );                        \n+                        );\n                     }\n                 }\n             }\n@@ -83,3 +84,26 @@ impl LintPass for StrToStringPass {\n         }\n     }\n }\n+\n+\n+declare_lint!(CLIPPY_TOPLEVEL_REF_ARG, Warn, \"Warn about pattern matches with top-level `ref` bindings\");\n+\n+pub struct TopLevelRefPass;\n+\n+impl LintPass for TopLevelRefPass {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(CLIPPY_TOPLEVEL_REF_ARG)\n+    }\n+\n+    fn check_fn(&mut self, cx: &Context, _: FnKind, decl: &FnDecl, _: &Block, _: Span, _: NodeId) {\n+        for ref arg in decl.inputs.iter() {\n+            if let PatIdent(BindByRef(_), _, _) = arg.pat.node {\n+                cx.span_lint(\n+                    CLIPPY_TOPLEVEL_REF_ARG,\n+                    arg.pat.span,\n+                    \"`ref` directly on a function argument is ignored. Have you considered using a reference type instead?\"\n+                );\n+            }\n+        }\n+    }\n+}"}]}