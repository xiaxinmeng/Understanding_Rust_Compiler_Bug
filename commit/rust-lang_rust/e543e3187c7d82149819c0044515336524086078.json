{"sha": "e543e3187c7d82149819c0044515336524086078", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1NDNlMzE4N2M3ZDgyMTQ5ODE5YzAwNDQ1MTUzMzY1MjQwODYwNzg=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-03-21T16:19:48Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-03-21T17:48:37Z"}, "message": "resolve: Avoid \"self-confirming\" import resolutions in one more case", "tree": {"sha": "cbfd6063b449efe8e9cd34ac12ab28285bcc1e41", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cbfd6063b449efe8e9cd34ac12ab28285bcc1e41"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e543e3187c7d82149819c0044515336524086078", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e543e3187c7d82149819c0044515336524086078", "html_url": "https://github.com/rust-lang/rust/commit/e543e3187c7d82149819c0044515336524086078", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e543e3187c7d82149819c0044515336524086078/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7900b2bc135a0e02d945143176cf3a80b6e92aa8", "url": "https://api.github.com/repos/rust-lang/rust/commits/7900b2bc135a0e02d945143176cf3a80b6e92aa8", "html_url": "https://github.com/rust-lang/rust/commit/7900b2bc135a0e02d945143176cf3a80b6e92aa8"}], "stats": {"total": 24, "additions": 24, "deletions": 0}, "files": [{"sha": "d375ae4a447a3801e09bbb8d7ebf258d65b0f2a6", "filename": "src/librustc_resolve/imports.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e543e3187c7d82149819c0044515336524086078/src%2Flibrustc_resolve%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e543e3187c7d82149819c0044515336524086078/src%2Flibrustc_resolve%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fimports.rs?ref=e543e3187c7d82149819c0044515336524086078", "patch": "@@ -874,6 +874,12 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n     /// consolidate multiple unresolved import errors into a single diagnostic.\n     fn finalize_import(&mut self, import: &'b Import<'b>) -> Option<UnresolvedImportError> {\n         let orig_vis = import.vis.replace(ty::Visibility::Invisible);\n+        let orig_blacklisted_binding = match &import.kind {\n+            ImportKind::Single { target_bindings, .. } => {\n+                Some(mem::replace(&mut self.r.blacklisted_binding, target_bindings[TypeNS].get()))\n+            }\n+            _ => None,\n+        };\n         let prev_ambiguity_errors_len = self.r.ambiguity_errors.len();\n         let path_res = self.r.resolve_path(\n             &import.module_path,\n@@ -884,6 +890,9 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n             import.crate_lint(),\n         );\n         let no_ambiguity = self.r.ambiguity_errors.len() == prev_ambiguity_errors_len;\n+        if let Some(orig_blacklisted_binding) = orig_blacklisted_binding {\n+            self.r.blacklisted_binding = orig_blacklisted_binding;\n+        }\n         import.vis.set(orig_vis);\n         if let PathResult::Failed { .. } | PathResult::NonModule(..) = path_res {\n             // Consider erroneous imports used to avoid duplicate diagnostics."}, {"sha": "984d3f0ca92f4a9fac073acc37eab85fe426609d", "filename": "src/test/ui/imports/issue-62767.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e543e3187c7d82149819c0044515336524086078/src%2Ftest%2Fui%2Fimports%2Fissue-62767.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e543e3187c7d82149819c0044515336524086078/src%2Ftest%2Fui%2Fimports%2Fissue-62767.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fissue-62767.rs?ref=e543e3187c7d82149819c0044515336524086078", "patch": "@@ -0,0 +1,15 @@\n+// check-pass\n+\n+mod m {\n+    pub enum Same {\n+        Same,\n+    }\n+}\n+\n+use m::*;\n+\n+// The variant `Same` introduced by this import is not considered when resolving the prefix\n+// `Same::` during import validation (issue #62767).\n+use Same::Same;\n+\n+fn main() {}"}]}