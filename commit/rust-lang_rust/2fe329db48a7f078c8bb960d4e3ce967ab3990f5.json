{"sha": "2fe329db48a7f078c8bb960d4e3ce967ab3990f5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmZTMyOWRiNDhhN2YwNzhjOGJiOTYwZDRlM2NlOTY3YWIzOTkwZjU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-05-09T16:23:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-05-09T16:23:03Z"}, "message": "Merge #8782\n\n8782: internal: fix make API r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "24ef111ade85a182e36ebe0265c15225eb2cb238", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24ef111ade85a182e36ebe0265c15225eb2cb238"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2fe329db48a7f078c8bb960d4e3ce967ab3990f5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgmAxnCRBK7hj4Ov3rIwAAyJYIADdtfMfvWJgagCGoWQEiqmRR\n8qhT+SLzcIfHX6ccub8R8FxDrset5dWRyDTu/IWkZEgr3Vl5RICjU6l17E9oSqFK\nM4jZ1AxGCtMUZyVcHIA8B97h0A/Lr31LM/07fL5O5rkClAAnkV1+T9CmckO1cpov\nPs1rEdIs3EtKqPzVt5bEaLadt82MQDrGu9GwsxGOpmbR0LF3/UU9jFrGp81xdQrb\nHN1inulxRhY2vKb30L/6Ie39WIpmU6uvHGOIsOEFEelA9byzffzGonNUelsPrqW5\nLUUP8iVETNnkTyO+S2Ues4+McS7g3EypzMdo5Vx0eIlqplz7azd5i+QxjfDqUH0=\n=PuH7\n-----END PGP SIGNATURE-----\n", "payload": "tree 24ef111ade85a182e36ebe0265c15225eb2cb238\nparent a3b034938ebe12b29ef37ff6e54bad3c574464be\nparent 680a0d54e4d2d474ae41f4f4a95c749495a02883\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1620577383 +0000\ncommitter GitHub <noreply@github.com> 1620577383 +0000\n\nMerge #8782\n\n8782: internal: fix make API r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2fe329db48a7f078c8bb960d4e3ce967ab3990f5", "html_url": "https://github.com/rust-lang/rust/commit/2fe329db48a7f078c8bb960d4e3ce967ab3990f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2fe329db48a7f078c8bb960d4e3ce967ab3990f5/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3b034938ebe12b29ef37ff6e54bad3c574464be", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3b034938ebe12b29ef37ff6e54bad3c574464be", "html_url": "https://github.com/rust-lang/rust/commit/a3b034938ebe12b29ef37ff6e54bad3c574464be"}, {"sha": "680a0d54e4d2d474ae41f4f4a95c749495a02883", "url": "https://api.github.com/repos/rust-lang/rust/commits/680a0d54e4d2d474ae41f4f4a95c749495a02883", "html_url": "https://github.com/rust-lang/rust/commit/680a0d54e4d2d474ae41f4f4a95c749495a02883"}], "stats": {"total": 93, "additions": 49, "deletions": 44}, "files": [{"sha": "494ef4621e0f75325b1b905fa4b93556faa81a8e", "filename": "crates/ide_assists/src/handlers/extract_function.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fe329db48a7f078c8bb960d4e3ce967ab3990f5/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fe329db48a7f078c8bb960d4e3ce967ab3990f5/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs?ref=2fe329db48a7f078c8bb960d4e3ce967ab3990f5", "patch": "@@ -1192,7 +1192,7 @@ fn make_ret_ty(ctx: &AssistContext, module: hir::Module, fun: &Function) -> Opti\n                 vec![fun_ty.make_ty(ctx, module), handler_ty],\n             )\n         }\n-        FlowHandler::If { .. } => make::ty(\"bool\"),\n+        FlowHandler::If { .. } => make::ty_bool(),\n         FlowHandler::IfOption { action } => {\n             let handler_ty = action\n                 .expr_ty(ctx)"}, {"sha": "68bc15120b6d25f80a0660de58a46e8a88ed172f", "filename": "crates/ide_assists/src/handlers/introduce_named_lifetime.rs", "status": "modified", "additions": 14, "deletions": 32, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/2fe329db48a7f078c8bb960d4e3ce967ab3990f5/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fintroduce_named_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fe329db48a7f078c8bb960d4e3ce967ab3990f5/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fintroduce_named_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fintroduce_named_lifetime.rs?ref=2fe329db48a7f078c8bb960d4e3ce967ab3990f5", "patch": "@@ -89,14 +89,12 @@ fn generate_fn_def_assist(\n         let loc_needing_lifetime =\n             loc_needing_lifetime.and_then(|it| it.make_mut(builder).to_position());\n \n-        add_lifetime_param(fn_def.get_or_create_generic_param_list(), new_lifetime_param);\n-        ted::replace(\n-            lifetime.syntax(),\n-            make_ast_lifetime(new_lifetime_param).clone_for_update().syntax(),\n+        fn_def.get_or_create_generic_param_list().add_generic_param(\n+            make::lifetime_param(new_lifetime_param.clone()).clone_for_update().into(),\n         );\n-        loc_needing_lifetime.map(|position| {\n-            ted::insert(position, make_ast_lifetime(new_lifetime_param).clone_for_update().syntax())\n-        });\n+        ted::replace(lifetime.syntax(), new_lifetime_param.clone_for_update().syntax());\n+        loc_needing_lifetime\n+            .map(|position| ted::insert(position, new_lifetime_param.clone_for_update().syntax()));\n     })\n }\n \n@@ -112,43 +110,27 @@ fn generate_impl_def_assist(\n         let impl_def = builder.make_ast_mut(impl_def);\n         let lifetime = builder.make_ast_mut(lifetime);\n \n-        add_lifetime_param(impl_def.get_or_create_generic_param_list(), new_lifetime_param);\n-        ted::replace(\n-            lifetime.syntax(),\n-            make_ast_lifetime(new_lifetime_param).clone_for_update().syntax(),\n+        impl_def.get_or_create_generic_param_list().add_generic_param(\n+            make::lifetime_param(new_lifetime_param.clone()).clone_for_update().into(),\n         );\n+        ted::replace(lifetime.syntax(), new_lifetime_param.clone_for_update().syntax());\n     })\n }\n \n /// Given a type parameter list, generate a unique lifetime parameter name\n /// which is not in the list\n fn generate_unique_lifetime_param_name(\n     existing_type_param_list: Option<ast::GenericParamList>,\n-) -> Option<char> {\n+) -> Option<ast::Lifetime> {\n     match existing_type_param_list {\n         Some(type_params) => {\n-            let used_lifetime_params: FxHashSet<_> = type_params\n-                .lifetime_params()\n-                .map(|p| p.syntax().text().to_string()[1..].to_owned())\n-                .collect();\n-            (b'a'..=b'z').map(char::from).find(|c| !used_lifetime_params.contains(&c.to_string()))\n+            let used_lifetime_params: FxHashSet<_> =\n+                type_params.lifetime_params().map(|p| p.syntax().text().to_string()).collect();\n+            ('a'..='z').map(|it| format!(\"'{}\", it)).find(|it| !used_lifetime_params.contains(it))\n         }\n-        None => Some('a'),\n+        None => Some(\"'a\".to_string()),\n     }\n-}\n-\n-fn add_lifetime_param(type_params: ast::GenericParamList, new_lifetime_param: char) {\n-    let generic_param =\n-        make::generic_param(&format!(\"'{}\", new_lifetime_param), None).clone_for_update();\n-    type_params.add_generic_param(generic_param);\n-}\n-\n-fn make_ast_lifetime(new_lifetime_param: char) -> ast::Lifetime {\n-    make::generic_param(&format!(\"'{}\", new_lifetime_param), None)\n-        .syntax()\n-        .descendants()\n-        .find_map(ast::Lifetime::cast)\n-        .unwrap()\n+    .map(|it| make::lifetime(&it))\n }\n \n enum NeedsLifetime {"}, {"sha": "15420aedfb07b51adbe95a19b1bce4d994ffcd6a", "filename": "crates/ide_assists/src/handlers/replace_impl_trait_with_generic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2fe329db48a7f078c8bb960d4e3ce967ab3990f5/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_impl_trait_with_generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fe329db48a7f078c8bb960d4e3ce967ab3990f5/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_impl_trait_with_generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_impl_trait_with_generic.rs?ref=2fe329db48a7f078c8bb960d4e3ce967ab3990f5", "patch": "@@ -37,12 +37,12 @@ pub(crate) fn replace_impl_trait_with_generic(\n \n             let type_param_name = suggest_name::for_generic_parameter(&impl_trait_type);\n \n-            let type_param =\n-                make::generic_param(&type_param_name, Some(type_bound_list)).clone_for_update();\n+            let type_param = make::type_param(make::name(&type_param_name), Some(type_bound_list))\n+                .clone_for_update();\n             let new_ty = make::ty(&type_param_name).clone_for_update();\n \n             ted::replace(impl_trait_type.syntax(), new_ty.syntax());\n-            fn_.get_or_create_generic_param_list().add_generic_param(type_param)\n+            fn_.get_or_create_generic_param_list().add_generic_param(type_param.into())\n         },\n     )\n }"}, {"sha": "c39e248ce6aa89f29037294a69869f9cdc5295a7", "filename": "crates/syntax/src/ast/make.rs", "status": "modified", "additions": 31, "deletions": 8, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/2fe329db48a7f078c8bb960d4e3ce967ab3990f5/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fe329db48a7f078c8bb960d4e3ce967ab3990f5/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs?ref=2fe329db48a7f078c8bb960d4e3ce967ab3990f5", "patch": "@@ -10,7 +10,7 @@\n //! `parse(format!())` we use internally is an implementation detail -- long\n //! term, it will be replaced with direct tree manipulation.\n use itertools::Itertools;\n-use stdx::format_to;\n+use stdx::{format_to, never};\n \n use crate::{ast, AstNode, SourceFile, SyntaxKind, SyntaxNode, SyntaxToken};\n \n@@ -22,6 +22,16 @@ pub fn name_ref(text: &str) -> ast::NameRef {\n     ast_from_text(&format!(\"fn f() {{ {}{}; }}\", raw_ident_esc(text), text))\n }\n \n+pub fn lifetime(text: &str) -> ast::Lifetime {\n+    let mut text = text;\n+    let tmp;\n+    if never!(!text.starts_with('\\'')) {\n+        tmp = format!(\"'{}\", text);\n+        text = &tmp;\n+    }\n+    ast_from_text(&format!(\"fn f<{}>() {{ }}\", text))\n+}\n+\n fn raw_ident_esc(ident: &str) -> &'static str {\n     let is_keyword = parser::SyntaxKind::from_keyword(ident).is_some();\n     if is_keyword && !matches!(ident, \"self\" | \"crate\" | \"super\" | \"Self\") {\n@@ -34,10 +44,13 @@ fn raw_ident_esc(ident: &str) -> &'static str {\n // FIXME: replace stringly-typed constructor with a family of typed ctors, a-la\n // `expr_xxx`.\n pub fn ty(text: &str) -> ast::Type {\n-    ast_from_text(&format!(\"fn f() -> {} {{}}\", text))\n+    ty_from_text(text)\n }\n pub fn ty_unit() -> ast::Type {\n-    ty(\"()\")\n+    ty_from_text(\"()\")\n+}\n+pub fn ty_bool() -> ast::Type {\n+    ty_path(path_unqualified(path_segment(name_ref(\"bool\"))))\n }\n pub fn ty_tuple(types: impl IntoIterator<Item = ast::Type>) -> ast::Type {\n     let mut count: usize = 0;\n@@ -46,15 +59,21 @@ pub fn ty_tuple(types: impl IntoIterator<Item = ast::Type>) -> ast::Type {\n         contents.push(',');\n     }\n \n-    ty(&format!(\"({})\", contents))\n+    ty_from_text(&format!(\"({})\", contents))\n }\n // FIXME: handle path to type\n pub fn ty_generic(name: ast::NameRef, types: impl IntoIterator<Item = ast::Type>) -> ast::Type {\n     let contents = types.into_iter().join(\", \");\n-    ty(&format!(\"{}<{}>\", name, contents))\n+    ty_from_text(&format!(\"{}<{}>\", name, contents))\n }\n pub fn ty_ref(target: ast::Type, exclusive: bool) -> ast::Type {\n-    ty(&if exclusive { format!(\"&mut {}\", target) } else { format!(\"&{}\", target) })\n+    ty_from_text(&if exclusive { format!(\"&mut {}\", target) } else { format!(\"&{}\", target) })\n+}\n+pub fn ty_path(path: ast::Path) -> ast::Type {\n+    ty_from_text(&path.to_string())\n+}\n+fn ty_from_text(text: &str) -> ast::Type {\n+    ast_from_text(&format!(\"type _T = {};\", text))\n }\n \n pub fn assoc_item_list() -> ast::AssocItemList {\n@@ -475,15 +494,19 @@ pub fn param_list(\n     };\n     ast_from_text(&list)\n }\n-// FIXME: s/&str/ast:Name\n-pub fn generic_param(name: &str, ty: Option<ast::TypeBoundList>) -> ast::GenericParam {\n+\n+pub fn type_param(name: ast::Name, ty: Option<ast::TypeBoundList>) -> ast::TypeParam {\n     let bound = match ty {\n         Some(it) => format!(\": {}\", it),\n         None => String::new(),\n     };\n     ast_from_text(&format!(\"fn f<{}{}>() {{ }}\", name, bound))\n }\n \n+pub fn lifetime_param(lifetime: ast::Lifetime) -> ast::LifetimeParam {\n+    ast_from_text(&format!(\"fn f<{}>() {{ }}\", lifetime))\n+}\n+\n pub fn generic_param_list(\n     pats: impl IntoIterator<Item = ast::GenericParam>,\n ) -> ast::GenericParamList {"}]}