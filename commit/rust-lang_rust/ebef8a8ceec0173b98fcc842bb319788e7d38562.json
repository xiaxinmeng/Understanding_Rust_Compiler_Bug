{"sha": "ebef8a8ceec0173b98fcc842bb319788e7d38562", "node_id": "C_kwDOAAsO6NoAKGViZWY4YThjZWVjMDE3M2I5OGZjYzg0MmJiMzE5Nzg4ZTdkMzg1NjI", "commit": {"author": {"name": "Jack Wrenn", "email": "jack@wrenn.fyi", "date": "2021-11-04T16:31:18Z"}, "committer": {"name": "Jack Wrenn", "email": "jack@wrenn.fyi", "date": "2021-12-27T00:22:09Z"}, "message": "relax priv-in-pub lint on generic bounds and where clauses in trait impls", "tree": {"sha": "99156a7141f8aab3ca5a83f7c0a0aff3b27fe517", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/99156a7141f8aab3ca5a83f7c0a0aff3b27fe517"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ebef8a8ceec0173b98fcc842bb319788e7d38562", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ebef8a8ceec0173b98fcc842bb319788e7d38562", "html_url": "https://github.com/rust-lang/rust/commit/ebef8a8ceec0173b98fcc842bb319788e7d38562", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ebef8a8ceec0173b98fcc842bb319788e7d38562/comments", "author": {"login": "jswrenn", "id": 3820879, "node_id": "MDQ6VXNlcjM4MjA4Nzk=", "avatar_url": "https://avatars.githubusercontent.com/u/3820879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jswrenn", "html_url": "https://github.com/jswrenn", "followers_url": "https://api.github.com/users/jswrenn/followers", "following_url": "https://api.github.com/users/jswrenn/following{/other_user}", "gists_url": "https://api.github.com/users/jswrenn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jswrenn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jswrenn/subscriptions", "organizations_url": "https://api.github.com/users/jswrenn/orgs", "repos_url": "https://api.github.com/users/jswrenn/repos", "events_url": "https://api.github.com/users/jswrenn/events{/privacy}", "received_events_url": "https://api.github.com/users/jswrenn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jswrenn", "id": 3820879, "node_id": "MDQ6VXNlcjM4MjA4Nzk=", "avatar_url": "https://avatars.githubusercontent.com/u/3820879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jswrenn", "html_url": "https://github.com/jswrenn", "followers_url": "https://api.github.com/users/jswrenn/followers", "following_url": "https://api.github.com/users/jswrenn/following{/other_user}", "gists_url": "https://api.github.com/users/jswrenn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jswrenn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jswrenn/subscriptions", "organizations_url": "https://api.github.com/users/jswrenn/orgs", "repos_url": "https://api.github.com/users/jswrenn/repos", "events_url": "https://api.github.com/users/jswrenn/events{/privacy}", "received_events_url": "https://api.github.com/users/jswrenn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "473eaa42e9365c47d129f72693b5d163a20cf369", "url": "https://api.github.com/repos/rust-lang/rust/commits/473eaa42e9365c47d129f72693b5d163a20cf369", "html_url": "https://github.com/rust-lang/rust/commit/473eaa42e9365c47d129f72693b5d163a20cf369"}], "stats": {"total": 407, "additions": 325, "deletions": 82}, "files": [{"sha": "639b23568ec014d52677886af080e09c17a4771d", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ebef8a8ceec0173b98fcc842bb319788e7d38562/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebef8a8ceec0173b98fcc842bb319788e7d38562/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=ebef8a8ceec0173b98fcc842bb319788e7d38562", "patch": "@@ -2069,7 +2069,11 @@ impl<'tcx> Visitor<'tcx> for PrivateItemsInPublicInterfacesVisitor<'tcx> {\n             // Subitems of trait impls have inherited publicity.\n             hir::ItemKind::Impl(ref impl_) => {\n                 let impl_vis = ty::Visibility::of_impl(item.def_id, tcx, &Default::default());\n-                self.check(item.def_id, impl_vis).generics().predicates();\n+                // check that private components do not appear in the generics or predicates of inherent impls\n+                // this check is intentionally NOT performed for impls of traits, per #90586\n+                if impl_.of_trait.is_none() {\n+                    self.check(item.def_id, impl_vis).generics().predicates();\n+                }\n                 for impl_item_ref in impl_.items {\n                     let impl_item_vis = if impl_.of_trait.is_none() {\n                         min(tcx.visibility(impl_item_ref.id.def_id), impl_vis, tcx)"}, {"sha": "8023b998a4099ebc3afff2b28ac4b98915cb0976", "filename": "src/test/ui/const-generics/generic_const_exprs/eval-privacy.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ebef8a8ceec0173b98fcc842bb319788e7d38562/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Feval-privacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebef8a8ceec0173b98fcc842bb319788e7d38562/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Feval-privacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Feval-privacy.rs?ref=ebef8a8ceec0173b98fcc842bb319788e7d38562", "patch": "@@ -9,12 +9,7 @@ pub trait Trait {\n     fn assoc_fn() -> Self::AssocTy;\n }\n \n-impl<const U: u8> Trait for Const<U>\n-//~^ WARN private type\n-//~| WARN this was previously\n-//~| WARN private type\n-//~| WARN this was previously\n-\n+impl<const U: u8> Trait for Const<U> // OK, trait impl predicates\n where\n     Const<{ my_const_fn(U) }>: ,\n {"}, {"sha": "c6b0ce931450deeb96c8fa5a8bbf42ae5ada398c", "filename": "src/test/ui/const-generics/generic_const_exprs/eval-privacy.stderr", "status": "modified", "additions": 2, "deletions": 33, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/ebef8a8ceec0173b98fcc842bb319788e7d38562/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Feval-privacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ebef8a8ceec0173b98fcc842bb319788e7d38562/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Feval-privacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Feval-privacy.stderr?ref=ebef8a8ceec0173b98fcc842bb319788e7d38562", "patch": "@@ -1,43 +1,12 @@\n-warning: private type `fn(u8) -> u8 {my_const_fn}` in public interface (error E0446)\n-  --> $DIR/eval-privacy.rs:12:1\n-   |\n-LL | / impl<const U: u8> Trait for Const<U>\n-LL | |\n-LL | |\n-LL | |\n-...  |\n-LL | |     }\n-LL | | }\n-   | |_^\n-   |\n-   = note: `#[warn(private_in_public)]` on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n-\n-warning: private type `fn(u8) -> u8 {my_const_fn}` in public interface (error E0446)\n-  --> $DIR/eval-privacy.rs:12:1\n-   |\n-LL | / impl<const U: u8> Trait for Const<U>\n-LL | |\n-LL | |\n-LL | |\n-...  |\n-LL | |     }\n-LL | | }\n-   | |_^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n-\n error[E0446]: private type `fn(u8) -> u8 {my_const_fn}` in public interface\n-  --> $DIR/eval-privacy.rs:21:5\n+  --> $DIR/eval-privacy.rs:16:5\n    |\n LL |     type AssocTy = Const<{ my_const_fn(U) }>;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can't leak private type\n ...\n LL | const fn my_const_fn(val: u8) -> u8 {\n    | ----------------------------------- `fn(u8) -> u8 {my_const_fn}` declared as private\n \n-error: aborting due to previous error; 2 warnings emitted\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0446`."}, {"sha": "0fa1de975b0403beed8d0df922beafeb888f5b85", "filename": "src/test/ui/privacy/private-in-public-warn.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ebef8a8ceec0173b98fcc842bb319788e7d38562/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-warn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebef8a8ceec0173b98fcc842bb319788e7d38562/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-warn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-warn.rs?ref=ebef8a8ceec0173b98fcc842bb319788e7d38562", "patch": "@@ -63,8 +63,7 @@ mod traits {\n     }\n     impl<T: PrivTr> Pub<T> {} //~ ERROR private trait `traits::PrivTr` in public interface\n         //~^ WARNING hard error\n-    impl<T: PrivTr> PubTr for Pub<T> {} //~ ERROR private trait `traits::PrivTr` in public interface\n-        //~^ WARNING hard error\n+    impl<T: PrivTr> PubTr for Pub<T> {} // OK, trait impl predicates\n }\n \n mod traits_where {\n@@ -87,9 +86,7 @@ mod traits_where {\n     impl<T> Pub<T> where T: PrivTr {}\n         //~^ ERROR private trait `traits_where::PrivTr` in public interface\n         //~| WARNING hard error\n-    impl<T> PubTr for Pub<T> where T: PrivTr {}\n-        //~^ ERROR private trait `traits_where::PrivTr` in public interface\n-        //~| WARNING hard error\n+    impl<T> PubTr for Pub<T> where T: PrivTr {} // OK, trait impl predicates\n }\n \n mod generics {"}, {"sha": "a72d824779279dc95b9834f17a7218486e1e9b7a", "filename": "src/test/ui/privacy/private-in-public-warn.stderr", "status": "modified", "additions": 19, "deletions": 37, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/ebef8a8ceec0173b98fcc842bb319788e7d38562/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-warn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ebef8a8ceec0173b98fcc842bb319788e7d38562/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-warn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-warn.stderr?ref=ebef8a8ceec0173b98fcc842bb319788e7d38562", "patch": "@@ -156,17 +156,8 @@ LL |     impl<T: PrivTr> Pub<T> {}\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n \n-error: private trait `traits::PrivTr` in public interface (error E0445)\n-  --> $DIR/private-in-public-warn.rs:66:5\n-   |\n-LL |     impl<T: PrivTr> PubTr for Pub<T> {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n-\n error: private trait `traits_where::PrivTr` in public interface (error E0445)\n-  --> $DIR/private-in-public-warn.rs:75:5\n+  --> $DIR/private-in-public-warn.rs:74:5\n    |\n LL |     pub type Alias<T> where T: PrivTr = T;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -175,7 +166,7 @@ LL |     pub type Alias<T> where T: PrivTr = T;\n    = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n \n error: private trait `traits_where::PrivTr` in public interface (error E0445)\n-  --> $DIR/private-in-public-warn.rs:79:5\n+  --> $DIR/private-in-public-warn.rs:78:5\n    |\n LL |     pub trait Tr2<T> where T: PrivTr {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -184,7 +175,7 @@ LL |     pub trait Tr2<T> where T: PrivTr {}\n    = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n \n error: private trait `traits_where::PrivTr` in public interface (error E0445)\n-  --> $DIR/private-in-public-warn.rs:83:9\n+  --> $DIR/private-in-public-warn.rs:82:9\n    |\n LL |         fn f<T>(arg: T) where T: PrivTr {}\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -193,25 +184,16 @@ LL |         fn f<T>(arg: T) where T: PrivTr {}\n    = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n \n error: private trait `traits_where::PrivTr` in public interface (error E0445)\n-  --> $DIR/private-in-public-warn.rs:87:5\n+  --> $DIR/private-in-public-warn.rs:86:5\n    |\n LL |     impl<T> Pub<T> where T: PrivTr {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n \n-error: private trait `traits_where::PrivTr` in public interface (error E0445)\n-  --> $DIR/private-in-public-warn.rs:90:5\n-   |\n-LL |     impl<T> PubTr for Pub<T> where T: PrivTr {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n-\n error: private trait `generics::PrivTr<generics::Pub>` in public interface (error E0445)\n-  --> $DIR/private-in-public-warn.rs:101:5\n+  --> $DIR/private-in-public-warn.rs:98:5\n    |\n LL |     pub trait Tr1: PrivTr<Pub> {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -220,7 +202,7 @@ LL |     pub trait Tr1: PrivTr<Pub> {}\n    = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n \n error: private type `generics::Priv` in public interface (error E0446)\n-  --> $DIR/private-in-public-warn.rs:104:5\n+  --> $DIR/private-in-public-warn.rs:101:5\n    |\n LL |     pub trait Tr2: PubTr<Priv> {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -229,7 +211,7 @@ LL |     pub trait Tr2: PubTr<Priv> {}\n    = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n \n error: private type `generics::Priv` in public interface (error E0446)\n-  --> $DIR/private-in-public-warn.rs:106:5\n+  --> $DIR/private-in-public-warn.rs:103:5\n    |\n LL |     pub trait Tr3: PubTr<[Priv; 1]> {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -238,7 +220,7 @@ LL |     pub trait Tr3: PubTr<[Priv; 1]> {}\n    = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n \n error: private type `generics::Priv` in public interface (error E0446)\n-  --> $DIR/private-in-public-warn.rs:108:5\n+  --> $DIR/private-in-public-warn.rs:105:5\n    |\n LL |     pub trait Tr4: PubTr<Pub<Priv>> {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -247,7 +229,7 @@ LL |     pub trait Tr4: PubTr<Pub<Priv>> {}\n    = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n \n error[E0446]: private type `impls::Priv` in public interface\n-  --> $DIR/private-in-public-warn.rs:135:9\n+  --> $DIR/private-in-public-warn.rs:132:9\n    |\n LL |     struct Priv;\n    |     ------------ `impls::Priv` declared as private\n@@ -256,7 +238,7 @@ LL |         type Alias = Priv;\n    |         ^^^^^^^^^^^^^^^^^^ can't leak private type\n \n error: private type `aliases_pub::Priv` in public interface (error E0446)\n-  --> $DIR/private-in-public-warn.rs:206:9\n+  --> $DIR/private-in-public-warn.rs:203:9\n    |\n LL |         pub fn f(arg: Priv) {}\n    |         ^^^^^^^^^^^^^^^^^^^\n@@ -265,7 +247,7 @@ LL |         pub fn f(arg: Priv) {}\n    = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n \n error[E0446]: private type `aliases_pub::Priv` in public interface\n-  --> $DIR/private-in-public-warn.rs:210:9\n+  --> $DIR/private-in-public-warn.rs:207:9\n    |\n LL |     struct Priv;\n    |     ------------ `aliases_pub::Priv` declared as private\n@@ -274,7 +256,7 @@ LL |         type Check = Priv;\n    |         ^^^^^^^^^^^^^^^^^^ can't leak private type\n \n error[E0446]: private type `aliases_pub::Priv` in public interface\n-  --> $DIR/private-in-public-warn.rs:213:9\n+  --> $DIR/private-in-public-warn.rs:210:9\n    |\n LL |     struct Priv;\n    |     ------------ `aliases_pub::Priv` declared as private\n@@ -283,7 +265,7 @@ LL |         type Check = Priv;\n    |         ^^^^^^^^^^^^^^^^^^ can't leak private type\n \n error[E0446]: private type `aliases_pub::Priv` in public interface\n-  --> $DIR/private-in-public-warn.rs:216:9\n+  --> $DIR/private-in-public-warn.rs:213:9\n    |\n LL |     struct Priv;\n    |     ------------ `aliases_pub::Priv` declared as private\n@@ -292,7 +274,7 @@ LL |         type Check = Priv;\n    |         ^^^^^^^^^^^^^^^^^^ can't leak private type\n \n error[E0446]: private type `aliases_pub::Priv` in public interface\n-  --> $DIR/private-in-public-warn.rs:219:9\n+  --> $DIR/private-in-public-warn.rs:216:9\n    |\n LL |     struct Priv;\n    |     ------------ `aliases_pub::Priv` declared as private\n@@ -301,7 +283,7 @@ LL |         type Check = Priv;\n    |         ^^^^^^^^^^^^^^^^^^ can't leak private type\n \n error: private trait `PrivTr1` in public interface (error E0445)\n-  --> $DIR/private-in-public-warn.rs:249:5\n+  --> $DIR/private-in-public-warn.rs:246:5\n    |\n LL |     pub trait Tr1: PrivUseAliasTr {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -310,7 +292,7 @@ LL |     pub trait Tr1: PrivUseAliasTr {}\n    = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n \n error: private trait `PrivTr1<Priv2>` in public interface (error E0445)\n-  --> $DIR/private-in-public-warn.rs:252:5\n+  --> $DIR/private-in-public-warn.rs:249:5\n    |\n LL |     pub trait Tr2: PrivUseAliasTr<PrivAlias> {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -319,7 +301,7 @@ LL |     pub trait Tr2: PrivUseAliasTr<PrivAlias> {}\n    = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n \n error: private type `Priv2` in public interface (error E0446)\n-  --> $DIR/private-in-public-warn.rs:252:5\n+  --> $DIR/private-in-public-warn.rs:249:5\n    |\n LL |     pub trait Tr2: PrivUseAliasTr<PrivAlias> {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -341,7 +323,7 @@ LL +     pub type Alias<T> = T;\n    | \n \n warning: where clauses are not enforced in type aliases\n-  --> $DIR/private-in-public-warn.rs:75:29\n+  --> $DIR/private-in-public-warn.rs:74:29\n    |\n LL |     pub type Alias<T> where T: PrivTr = T;\n    |                             ^^^^^^^^^\n@@ -352,6 +334,6 @@ LL -     pub type Alias<T> where T: PrivTr = T;\n LL +     pub type Alias<T>  = T;\n    | \n \n-error: aborting due to 36 previous errors; 2 warnings emitted\n+error: aborting due to 34 previous errors; 2 warnings emitted\n \n For more information about this error, try `rustc --explain E0446`."}, {"sha": "66ee9c4bbd8836b74aeb8e792a224b362b54999f", "filename": "src/test/ui/privacy/where-priv-type.rs", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/ebef8a8ceec0173b98fcc842bb319788e7d38562/src%2Ftest%2Fui%2Fprivacy%2Fwhere-priv-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebef8a8ceec0173b98fcc842bb319788e7d38562/src%2Ftest%2Fui%2Fprivacy%2Fwhere-priv-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fwhere-priv-type.rs?ref=ebef8a8ceec0173b98fcc842bb319788e7d38562", "patch": "@@ -0,0 +1,90 @@\n+// priv-in-pub lint tests where the private type appears in the\n+// `where` clause of a public item\n+\n+#![crate_type = \"lib\"]\n+#![feature(generic_const_exprs)]\n+#![allow(incomplete_features)]\n+\n+\n+struct PrivTy;\n+trait PrivTr {}\n+pub struct PubTy;\n+pub struct PubTyGeneric<T>(T);\n+pub trait PubTr {}\n+impl PubTr for PrivTy {}\n+pub trait PubTrWithAssocTy { type AssocTy; }\n+impl PubTrWithAssocTy for PrivTy { type AssocTy = PrivTy; }\n+\n+\n+pub struct S\n+//~^ WARNING private type `PrivTy` in public interface\n+//~| WARNING hard error\n+where\n+    PrivTy:\n+{}\n+\n+\n+pub enum E\n+//~^ WARNING private type `PrivTy` in public interface\n+//~| WARNING hard error\n+where\n+    PrivTy:\n+{}\n+\n+\n+pub fn f()\n+//~^ WARNING private type `PrivTy` in public interface\n+//~| WARNING hard error\n+where\n+    PrivTy:\n+{}\n+\n+\n+impl S\n+//~^ ERROR private type `PrivTy` in public interface\n+where\n+    PrivTy:\n+{\n+    pub fn f()\n+    //~^ WARNING private type `PrivTy` in public interface\n+    //~| WARNING hard error\n+    where\n+        PrivTy:\n+    {}\n+}\n+\n+\n+impl PubTr for PubTy\n+where\n+    PrivTy:\n+{}\n+\n+\n+impl<T> PubTr for PubTyGeneric<T>\n+where\n+    T: PubTrWithAssocTy<AssocTy=PrivTy>\n+{}\n+\n+\n+pub struct Const<const U: u8>;\n+\n+pub trait Trait {\n+    type AssocTy;\n+    fn assoc_fn() -> Self::AssocTy;\n+}\n+\n+impl<const U: u8> Trait for Const<U>\n+where\n+    Const<{ my_const_fn(U) }>: ,\n+{\n+    type AssocTy = Const<{ my_const_fn(U) }>;\n+    //~^ ERROR private type\n+    fn assoc_fn() -> Self::AssocTy {\n+        Const\n+    }\n+}\n+\n+const fn my_const_fn(val: u8) -> u8 {\n+    // body of this function doesn't matter\n+    val\n+}"}, {"sha": "378c14810d92d7c82334a9acf649e15f16e32ff3", "filename": "src/test/ui/privacy/where-priv-type.stderr", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/ebef8a8ceec0173b98fcc842bb319788e7d38562/src%2Ftest%2Fui%2Fprivacy%2Fwhere-priv-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ebef8a8ceec0173b98fcc842bb319788e7d38562/src%2Ftest%2Fui%2Fprivacy%2Fwhere-priv-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fwhere-priv-type.stderr?ref=ebef8a8ceec0173b98fcc842bb319788e7d38562", "patch": "@@ -0,0 +1,82 @@\n+warning: private type `PrivTy` in public interface (error E0446)\n+  --> $DIR/where-priv-type.rs:19:1\n+   |\n+LL | / pub struct S\n+LL | |\n+LL | |\n+LL | | where\n+LL | |     PrivTy:\n+LL | | {}\n+   | |__^\n+   |\n+   = note: `#[warn(private_in_public)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n+\n+warning: private type `PrivTy` in public interface (error E0446)\n+  --> $DIR/where-priv-type.rs:27:1\n+   |\n+LL | / pub enum E\n+LL | |\n+LL | |\n+LL | | where\n+LL | |     PrivTy:\n+LL | | {}\n+   | |__^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n+\n+warning: private type `PrivTy` in public interface (error E0446)\n+  --> $DIR/where-priv-type.rs:35:1\n+   |\n+LL | / pub fn f()\n+LL | |\n+LL | |\n+LL | | where\n+LL | |     PrivTy:\n+   | |___________^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n+\n+error[E0446]: private type `PrivTy` in public interface\n+  --> $DIR/where-priv-type.rs:43:1\n+   |\n+LL |   struct PrivTy;\n+   |   -------------- `PrivTy` declared as private\n+...\n+LL | / impl S\n+LL | |\n+LL | | where\n+LL | |     PrivTy:\n+...  |\n+LL | |     {}\n+LL | | }\n+   | |_^ can't leak private type\n+\n+warning: private type `PrivTy` in public interface (error E0446)\n+  --> $DIR/where-priv-type.rs:48:5\n+   |\n+LL | /     pub fn f()\n+LL | |\n+LL | |\n+LL | |     where\n+LL | |         PrivTy:\n+   | |_______________^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n+\n+error[E0446]: private type `fn(u8) -> u8 {my_const_fn}` in public interface\n+  --> $DIR/where-priv-type.rs:80:5\n+   |\n+LL |     type AssocTy = Const<{ my_const_fn(U) }>;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can't leak private type\n+...\n+LL | const fn my_const_fn(val: u8) -> u8 {\n+   | ----------------------------------- `fn(u8) -> u8 {my_const_fn}` declared as private\n+\n+error: aborting due to 2 previous errors; 4 warnings emitted\n+\n+For more information about this error, try `rustc --explain E0446`."}, {"sha": "87c211df16937d35ac5f1fc753f87026945e01c8", "filename": "src/test/ui/privacy/where-pub-type-impls-priv-trait.rs", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/ebef8a8ceec0173b98fcc842bb319788e7d38562/src%2Ftest%2Fui%2Fprivacy%2Fwhere-pub-type-impls-priv-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebef8a8ceec0173b98fcc842bb319788e7d38562/src%2Ftest%2Fui%2Fprivacy%2Fwhere-pub-type-impls-priv-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fwhere-pub-type-impls-priv-trait.rs?ref=ebef8a8ceec0173b98fcc842bb319788e7d38562", "patch": "@@ -0,0 +1,56 @@\n+// priv-in-pub lint tests where the private trait bounds a public type\n+\n+#![crate_type = \"lib\"]\n+#![feature(generic_const_exprs)]\n+#![allow(incomplete_features)]\n+\n+\n+struct PrivTy;\n+trait PrivTr {}\n+pub struct PubTy;\n+pub struct PubTyGeneric<T>(T);\n+pub trait PubTr {}\n+impl PubTr for PrivTy {}\n+impl PrivTr for PubTy {}\n+pub trait PubTrWithAssocTy { type AssocTy; }\n+impl PubTrWithAssocTy for PrivTy { type AssocTy = PrivTy; }\n+\n+\n+pub struct S\n+//~^ ERROR private trait `PrivTr` in public interface\n+where\n+    PubTy: PrivTr\n+{}\n+\n+\n+pub enum E\n+//~^ ERROR private trait `PrivTr` in public interface\n+where\n+    PubTy: PrivTr\n+{}\n+\n+\n+pub fn f()\n+//~^ ERROR private trait `PrivTr` in public interface\n+where\n+    PubTy: PrivTr\n+{}\n+\n+\n+impl S\n+//~^ ERROR private trait `PrivTr` in public interface\n+where\n+    PubTy: PrivTr\n+{\n+    pub fn f()\n+    //~^ ERROR private trait `PrivTr` in public interface\n+    where\n+        PubTy: PrivTr\n+    {}\n+}\n+\n+\n+impl PubTr for PubTy\n+where\n+    PubTy: PrivTr\n+{}"}, {"sha": "9ce7b9a139f5e7b29f0029351f90fb44a37f72e3", "filename": "src/test/ui/privacy/where-pub-type-impls-priv-trait.stderr", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/ebef8a8ceec0173b98fcc842bb319788e7d38562/src%2Ftest%2Fui%2Fprivacy%2Fwhere-pub-type-impls-priv-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ebef8a8ceec0173b98fcc842bb319788e7d38562/src%2Ftest%2Fui%2Fprivacy%2Fwhere-pub-type-impls-priv-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fwhere-pub-type-impls-priv-trait.stderr?ref=ebef8a8ceec0173b98fcc842bb319788e7d38562", "patch": "@@ -0,0 +1,68 @@\n+error[E0445]: private trait `PrivTr` in public interface\n+  --> $DIR/where-pub-type-impls-priv-trait.rs:19:1\n+   |\n+LL |   trait PrivTr {}\n+   |   ------------ `PrivTr` declared as private\n+...\n+LL | / pub struct S\n+LL | |\n+LL | | where\n+LL | |     PubTy: PrivTr\n+LL | | {}\n+   | |__^ can't leak private trait\n+\n+error[E0445]: private trait `PrivTr` in public interface\n+  --> $DIR/where-pub-type-impls-priv-trait.rs:26:1\n+   |\n+LL |   trait PrivTr {}\n+   |   ------------ `PrivTr` declared as private\n+...\n+LL | / pub enum E\n+LL | |\n+LL | | where\n+LL | |     PubTy: PrivTr\n+LL | | {}\n+   | |__^ can't leak private trait\n+\n+error[E0445]: private trait `PrivTr` in public interface\n+  --> $DIR/where-pub-type-impls-priv-trait.rs:33:1\n+   |\n+LL |   trait PrivTr {}\n+   |   ------------ `PrivTr` declared as private\n+...\n+LL | / pub fn f()\n+LL | |\n+LL | | where\n+LL | |     PubTy: PrivTr\n+   | |_________________^ can't leak private trait\n+\n+error[E0445]: private trait `PrivTr` in public interface\n+  --> $DIR/where-pub-type-impls-priv-trait.rs:40:1\n+   |\n+LL |   trait PrivTr {}\n+   |   ------------ `PrivTr` declared as private\n+...\n+LL | / impl S\n+LL | |\n+LL | | where\n+LL | |     PubTy: PrivTr\n+...  |\n+LL | |     {}\n+LL | | }\n+   | |_^ can't leak private trait\n+\n+error[E0445]: private trait `PrivTr` in public interface\n+  --> $DIR/where-pub-type-impls-priv-trait.rs:45:5\n+   |\n+LL |   trait PrivTr {}\n+   |   ------------ `PrivTr` declared as private\n+...\n+LL | /     pub fn f()\n+LL | |\n+LL | |     where\n+LL | |         PubTy: PrivTr\n+   | |_____________________^ can't leak private trait\n+\n+error: aborting due to 5 previous errors\n+\n+For more information about this error, try `rustc --explain E0445`."}]}