{"sha": "9d01db1966a3ab073691eb8e5203e36624b9f992", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkMDFkYjE5NjZhM2FiMDczNjkxZWI4ZTUyMDNlMzY2MjRiOWY5OTI=", "commit": {"author": {"name": "Jakub Bukaj", "email": "jakub@jakub.cc", "date": "2014-11-24T19:53:12Z"}, "committer": {"name": "Jakub Bukaj", "email": "jakub@jakub.cc", "date": "2014-11-26T22:21:52Z"}, "message": "Do not print any warnings if '-A warnings' is specified on the command line", "tree": {"sha": "ae15b481ed531e4fae600c41ca41107f6ad3e279", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae15b481ed531e4fae600c41ca41107f6ad3e279"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d01db1966a3ab073691eb8e5203e36624b9f992", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d01db1966a3ab073691eb8e5203e36624b9f992", "html_url": "https://github.com/rust-lang/rust/commit/9d01db1966a3ab073691eb8e5203e36624b9f992", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d01db1966a3ab073691eb8e5203e36624b9f992/comments", "author": null, "committer": null, "parents": [{"sha": "5804a306868aee5ff0a3d7829db7924978317f0e", "url": "https://api.github.com/repos/rust-lang/rust/commits/5804a306868aee5ff0a3d7829db7924978317f0e", "html_url": "https://github.com/rust-lang/rust/commit/5804a306868aee5ff0a3d7829db7924978317f0e"}], "stats": {"total": 56, "additions": 53, "deletions": 3}, "files": [{"sha": "3c2dbae665fa98d9b2cde79ae35025da841210ef", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/9d01db1966a3ab073691eb8e5203e36624b9f992/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d01db1966a3ab073691eb8e5203e36624b9f992/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=9d01db1966a3ab073691eb8e5203e36624b9f992", "patch": "@@ -948,4 +948,38 @@ mod test {\n         assert!(test_items.next().is_some());\n         assert!(test_items.next().is_none());\n     }\n+\n+    #[test]\n+    fn test_can_print_warnings() {\n+        {\n+            let matches = getopts(&[\n+                \"-Awarnings\".to_string()\n+            ], optgroups().as_slice()).unwrap();\n+            let registry = diagnostics::registry::Registry::new(&[]);\n+            let sessopts = build_session_options(&matches);\n+            let sess = build_session(sessopts, None, registry);\n+            assert!(!sess.can_print_warnings);\n+        }\n+\n+        {\n+            let matches = getopts(&[\n+                \"-Awarnings\".to_string(),\n+                \"-Dwarnings\".to_string()\n+            ], optgroups().as_slice()).unwrap();\n+            let registry = diagnostics::registry::Registry::new(&[]);\n+            let sessopts = build_session_options(&matches);\n+            let sess = build_session(sessopts, None, registry);\n+            assert!(sess.can_print_warnings);\n+        }\n+\n+        {\n+            let matches = getopts(&[\n+                \"-Adead_code\".to_string()\n+            ], optgroups().as_slice()).unwrap();\n+            let registry = diagnostics::registry::Registry::new(&[]);\n+            let sessopts = build_session_options(&matches);\n+            let sess = build_session(sessopts, None, registry);\n+            assert!(sess.can_print_warnings);\n+        }\n+    }\n }"}, {"sha": "047e5985569ae41f0f2f4cb0f56194151da5112c", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9d01db1966a3ab073691eb8e5203e36624b9f992/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d01db1966a3ab073691eb8e5203e36624b9f992/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=9d01db1966a3ab073691eb8e5203e36624b9f992", "patch": "@@ -54,6 +54,8 @@ pub struct Session {\n     /// The maximum recursion limit for potentially infinitely recursive\n     /// operations such as auto-dereference and monomorphization.\n     pub recursion_limit: Cell<uint>,\n+\n+    pub can_print_warnings: bool\n }\n \n impl Session {\n@@ -82,13 +84,19 @@ impl Session {\n         self.diagnostic().handler().abort_if_errors()\n     }\n     pub fn span_warn(&self, sp: Span, msg: &str) {\n-        self.diagnostic().span_warn(sp, msg)\n+        if self.can_print_warnings {\n+            self.diagnostic().span_warn(sp, msg)\n+        }\n     }\n     pub fn span_warn_with_code(&self, sp: Span, msg: &str, code: &str) {\n-        self.diagnostic().span_warn_with_code(sp, msg, code)\n+        if self.can_print_warnings {\n+            self.diagnostic().span_warn_with_code(sp, msg, code)\n+        }\n     }\n     pub fn warn(&self, msg: &str) {\n-        self.diagnostic().handler().warn(msg)\n+        if self.can_print_warnings {\n+            self.diagnostic().handler().warn(msg)\n+        }\n     }\n     pub fn opt_span_warn(&self, opt_sp: Option<Span>, msg: &str) {\n         match opt_sp {\n@@ -247,6 +255,13 @@ pub fn build_session_(sopts: config::Options,\n         }\n     );\n \n+    let can_print_warnings = sopts.lint_opts\n+        .iter()\n+        .filter(|&&(ref key, _)| key.as_slice() == \"warnings\")\n+        .map(|&(_, ref level)| *level != lint::Allow)\n+        .last()\n+        .unwrap_or(true);\n+\n     let sess = Session {\n         target: target_cfg,\n         opts: sopts,\n@@ -265,6 +280,7 @@ pub fn build_session_(sopts: config::Options,\n         crate_metadata: RefCell::new(Vec::new()),\n         features: RefCell::new(feature_gate::Features::new()),\n         recursion_limit: Cell::new(64),\n+        can_print_warnings: can_print_warnings\n     };\n \n     sess.lint_store.borrow_mut().register_builtin(Some(&sess));"}]}