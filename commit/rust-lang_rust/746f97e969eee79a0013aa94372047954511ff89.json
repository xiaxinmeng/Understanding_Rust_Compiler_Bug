{"sha": "746f97e969eee79a0013aa94372047954511ff89", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0NmY5N2U5NjllZWU3OWEwMDEzYWE5NDM3MjA0Nzk1NDUxMWZmODk=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-05-06T22:38:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-05-06T22:38:41Z"}, "message": "Rollup merge of #84872 - bjorn3:cg_clif_tidy, r=Mark-Simulacrum\n\nWire up tidy dependency checks for cg_clif\n\nAlso contains a fix and improvement to tidy.\n\nRequired for https://github.com/rust-lang/rust/pull/81746.", "tree": {"sha": "f454f3c9d00b00f362c38ea7d380c81412667a27", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f454f3c9d00b00f362c38ea7d380c81412667a27"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/746f97e969eee79a0013aa94372047954511ff89", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJglG/xCRBK7hj4Ov3rIwAAwVoIAHh8mxBc2ZWlSeiE87V2xz9f\nXqKj1PW4A5N0R8tJYoljRf6p/yPbaX58D4jWfNq8/gQquOSkEOflhR/zvS2BRLAa\n60kI97OS7/Q+8gJ5WPdu9QtiQoiIDfeV/1njlMkh4NppQRSG8bVnuOQnR2gEYc4W\nCW2s5KsVMlvshlsOKbsu7fIieWqal6ytYawFemF+fD50eQkCzwyK+2W+giz1NmPb\nCr2Ka6xOFS/3mQAaL6m+Q0EXCv2I+VLEVJN24EMbOEDPbGTqQT2sh9Za4w5ebv0t\n3uz6/9jycxCZg5Jqvda0mOQN6+TCuR/JtjA19+1cLG06jZ6Rb5nfBhlayVDzPpA=\n=Dzp5\n-----END PGP SIGNATURE-----\n", "payload": "tree f454f3c9d00b00f362c38ea7d380c81412667a27\nparent aaf23892ab95b9d4cc15a308bd4cff4be3d08de3\nparent 24def637b36df2945f3a54d06ba5f791a3d78dd7\nauthor Dylan DPC <dylan.dpc@gmail.com> 1620340721 +0200\ncommitter GitHub <noreply@github.com> 1620340721 +0200\n\nRollup merge of #84872 - bjorn3:cg_clif_tidy, r=Mark-Simulacrum\n\nWire up tidy dependency checks for cg_clif\n\nAlso contains a fix and improvement to tidy.\n\nRequired for https://github.com/rust-lang/rust/pull/81746.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/746f97e969eee79a0013aa94372047954511ff89", "html_url": "https://github.com/rust-lang/rust/commit/746f97e969eee79a0013aa94372047954511ff89", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/746f97e969eee79a0013aa94372047954511ff89/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aaf23892ab95b9d4cc15a308bd4cff4be3d08de3", "url": "https://api.github.com/repos/rust-lang/rust/commits/aaf23892ab95b9d4cc15a308bd4cff4be3d08de3", "html_url": "https://github.com/rust-lang/rust/commit/aaf23892ab95b9d4cc15a308bd4cff4be3d08de3"}, {"sha": "24def637b36df2945f3a54d06ba5f791a3d78dd7", "url": "https://api.github.com/repos/rust-lang/rust/commits/24def637b36df2945f3a54d06ba5f791a3d78dd7", "html_url": "https://github.com/rust-lang/rust/commit/24def637b36df2945f3a54d06ba5f791a3d78dd7"}], "stats": {"total": 183, "additions": 136, "deletions": 47}, "files": [{"sha": "064dd716521f51dda66b7afa0667b7a12ea0edf8", "filename": "src/tools/tidy/src/deps.rs", "status": "modified", "additions": 136, "deletions": 47, "changes": 183, "blob_url": "https://github.com/rust-lang/rust/blob/746f97e969eee79a0013aa94372047954511ff89/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/746f97e969eee79a0013aa94372047954511ff89/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs?ref=746f97e969eee79a0013aa94372047954511ff89", "patch": "@@ -44,12 +44,29 @@ const EXCEPTIONS: &[(&str, &str)] = &[\n     (\"fortanix-sgx-abi\", \"MPL-2.0\"), // libstd but only for `sgx` target\n ];\n \n+const EXCEPTIONS_CRANELIFT: &[(&str, &str)] = &[\n+    (\"cranelift-bforest\", \"Apache-2.0 WITH LLVM-exception\"),\n+    (\"cranelift-codegen\", \"Apache-2.0 WITH LLVM-exception\"),\n+    (\"cranelift-codegen-meta\", \"Apache-2.0 WITH LLVM-exception\"),\n+    (\"cranelift-codegen-shared\", \"Apache-2.0 WITH LLVM-exception\"),\n+    (\"cranelift-entity\", \"Apache-2.0 WITH LLVM-exception\"),\n+    (\"cranelift-frontend\", \"Apache-2.0 WITH LLVM-exception\"),\n+    (\"cranelift-jit\", \"Apache-2.0 WITH LLVM-exception\"),\n+    (\"cranelift-module\", \"Apache-2.0 WITH LLVM-exception\"),\n+    (\"cranelift-native\", \"Apache-2.0 WITH LLVM-exception\"),\n+    (\"cranelift-object\", \"Apache-2.0 WITH LLVM-exception\"),\n+    (\"libloading\", \"ISC\"),\n+    (\"mach\", \"BSD-2-Clause\"),\n+    (\"regalloc\", \"Apache-2.0 WITH LLVM-exception\"),\n+    (\"target-lexicon\", \"Apache-2.0 WITH LLVM-exception\"),\n+];\n+\n /// These are the root crates that are part of the runtime. The licenses for\n /// these and all their dependencies *must not* be in the exception list.\n const RUNTIME_CRATES: &[&str] = &[\"std\", \"core\", \"alloc\", \"test\", \"panic_abort\", \"panic_unwind\"];\n \n /// Crates whose dependencies must be explicitly permitted.\n-const RESTRICTED_DEPENDENCY_CRATES: &[&str] = &[\"rustc_middle\", \"rustc_codegen_llvm\"];\n+const RESTRICTED_DEPENDENCY_CRATES: &[&str] = &[\"rustc_driver\", \"rustc_codegen_llvm\"];\n \n /// Crates rustc is allowed to depend on. Avoid adding to the list if possible.\n ///\n@@ -72,7 +89,10 @@ const PERMITTED_DEPENDENCIES: &[&str] = &[\n     \"cc\",\n     \"cfg-if\",\n     \"chalk-derive\",\n+    \"chalk-engine\",\n     \"chalk-ir\",\n+    \"chalk-solve\",\n+    \"chrono\",\n     \"cmake\",\n     \"compiler_builtins\",\n     \"cpuid-bool\",\n@@ -92,6 +112,7 @@ const PERMITTED_DEPENDENCIES: &[&str] = &[\n     \"expect-test\",\n     \"fake-simd\",\n     \"filetime\",\n+    \"fixedbitset\",\n     \"flate2\",\n     \"fortanix-sgx-abi\",\n     \"fuchsia-zircon\",\n@@ -107,13 +128,15 @@ const PERMITTED_DEPENDENCIES: &[&str] = &[\n     \"indexmap\",\n     \"instant\",\n     \"itertools\",\n+    \"itoa\",\n     \"jobserver\",\n     \"kernel32-sys\",\n     \"lazy_static\",\n     \"libc\",\n     \"libz-sys\",\n     \"lock_api\",\n     \"log\",\n+    \"matchers\",\n     \"maybe-uninit\",\n     \"md-5\",\n     \"measureme\",\n@@ -123,13 +146,16 @@ const PERMITTED_DEPENDENCIES: &[&str] = &[\n     \"memoffset\",\n     \"miniz_oxide\",\n     \"num_cpus\",\n+    \"num-integer\",\n+    \"num-traits\",\n     \"object\",\n     \"once_cell\",\n     \"opaque-debug\",\n     \"parking_lot\",\n     \"parking_lot_core\",\n     \"pathdiff\",\n     \"perf-event-open-sys\",\n+    \"petgraph\",\n     \"pin-project-lite\",\n     \"pkg-config\",\n     \"polonius-engine\",\n@@ -147,22 +173,28 @@ const PERMITTED_DEPENDENCIES: &[&str] = &[\n     \"rand_xorshift\",\n     \"redox_syscall\",\n     \"regex\",\n+    \"regex-automata\",\n     \"regex-syntax\",\n     \"remove_dir_all\",\n+    \"rls-data\",\n+    \"rls-span\",\n     \"rustc-demangle\",\n     \"rustc-hash\",\n     \"rustc-rayon\",\n     \"rustc-rayon-core\",\n     \"rustc_version\",\n+    \"ryu\",\n     \"scoped-tls\",\n     \"scopeguard\",\n     \"semver\",\n     \"semver-parser\",\n     \"serde\",\n     \"serde_derive\",\n+    \"serde_json\",\n     \"sha-1\",\n     \"sha2\",\n     \"smallvec\",\n+    \"sharded-slab\",\n     \"snap\",\n     \"stable_deref_trait\",\n     \"stacker\",\n@@ -172,9 +204,15 @@ const PERMITTED_DEPENDENCIES: &[&str] = &[\n     \"termcolor\",\n     \"termize\",\n     \"thread_local\",\n+    \"time\",\n+    \"tinyvec\",\n     \"tracing\",\n     \"tracing-attributes\",\n     \"tracing-core\",\n+    \"tracing-log\",\n+    \"tracing-serde\",\n+    \"tracing-subscriber\",\n+    \"tracing-tree\",\n     \"typenum\",\n     \"unicode-normalization\",\n     \"unicode-script\",\n@@ -193,6 +231,59 @@ const PERMITTED_DEPENDENCIES: &[&str] = &[\n     \"yansi-term\",\n ];\n \n+const PERMITTED_CRANELIFT_DEPENDENCIES: &[&str] = &[\n+    \"anyhow\",\n+    \"ar\",\n+    \"autocfg\",\n+    \"bitflags\",\n+    \"byteorder\",\n+    \"cfg-if\",\n+    \"cranelift-bforest\",\n+    \"cranelift-codegen\",\n+    \"cranelift-codegen-meta\",\n+    \"cranelift-codegen-shared\",\n+    \"cranelift-entity\",\n+    \"cranelift-frontend\",\n+    \"cranelift-jit\",\n+    \"cranelift-module\",\n+    \"cranelift-native\",\n+    \"cranelift-object\",\n+    \"crc32fast\",\n+    \"errno\",\n+    \"errno-dragonfly\",\n+    \"gcc\",\n+    \"gimli\",\n+    \"hashbrown\",\n+    \"indexmap\",\n+    \"libc\",\n+    \"libloading\",\n+    \"log\",\n+    \"mach\",\n+    \"object\",\n+    \"proc-macro2\",\n+    \"quote\",\n+    \"regalloc\",\n+    \"region\",\n+    \"rustc-hash\",\n+    \"smallvec\",\n+    \"syn\",\n+    \"target-lexicon\",\n+    \"thiserror\",\n+    \"thiserror-impl\",\n+    \"unicode-xid\",\n+    \"winapi\",\n+    \"winapi-i686-pc-windows-gnu\",\n+    \"winapi-x86_64-pc-windows-gnu\",\n+];\n+\n+const FORBIDDEN_TO_HAVE_DUPLICATES: &[&str] = &[\n+    // These two crates take quite a long time to build, so don't allow two versions of them\n+    // to accidentally sneak into our dependency graph, in order to ensure we keep our CI times\n+    // under control.\n+    \"cargo\",\n+    \"rustc-ap-rustc_ast\",\n+];\n+\n /// Dependency checks.\n ///\n /// `root` is path to the directory with the root `Cargo.toml` (for the workspace). `cargo` is path\n@@ -203,17 +294,39 @@ pub fn check(root: &Path, cargo: &Path, bad: &mut bool) {\n         .manifest_path(root.join(\"Cargo.toml\"))\n         .features(cargo_metadata::CargoOpt::AllFeatures);\n     let metadata = t!(cmd.exec());\n-    check_exceptions(&metadata, bad);\n-    check_dependencies(&metadata, bad);\n-    check_crate_duplicate(&metadata, bad);\n+    let runtime_ids = compute_runtime_crates(&metadata);\n+    check_exceptions(&metadata, EXCEPTIONS, runtime_ids, bad);\n+    check_dependencies(&metadata, PERMITTED_DEPENDENCIES, RESTRICTED_DEPENDENCY_CRATES, bad);\n+    check_crate_duplicate(&metadata, FORBIDDEN_TO_HAVE_DUPLICATES, bad);\n+\n+    // Check rustc_codegen_cranelift independently as it has it's own workspace.\n+    let mut cmd = cargo_metadata::MetadataCommand::new();\n+    cmd.cargo_path(cargo)\n+        .manifest_path(root.join(\"compiler/rustc_codegen_cranelift/Cargo.toml\"))\n+        .features(cargo_metadata::CargoOpt::AllFeatures);\n+    let metadata = t!(cmd.exec());\n+    let runtime_ids = HashSet::new();\n+    check_exceptions(&metadata, EXCEPTIONS_CRANELIFT, runtime_ids, bad);\n+    check_dependencies(\n+        &metadata,\n+        PERMITTED_CRANELIFT_DEPENDENCIES,\n+        &[\"rustc_codegen_cranelift\"],\n+        bad,\n+    );\n+    check_crate_duplicate(&metadata, &[], bad);\n }\n \n /// Check that all licenses are in the valid list in `LICENSES`.\n ///\n /// Packages listed in `EXCEPTIONS` are allowed for tools.\n-fn check_exceptions(metadata: &Metadata, bad: &mut bool) {\n+fn check_exceptions(\n+    metadata: &Metadata,\n+    exceptions: &[(&str, &str)],\n+    runtime_ids: HashSet<&PackageId>,\n+    bad: &mut bool,\n+) {\n     // Validate the EXCEPTIONS list hasn't changed.\n-    for (name, license) in EXCEPTIONS {\n+    for (name, license) in exceptions {\n         // Check that the package actually exists.\n         if !metadata.packages.iter().any(|p| p.name == *name) {\n             tidy_error!(\n@@ -225,13 +338,6 @@ fn check_exceptions(metadata: &Metadata, bad: &mut bool) {\n         }\n         // Check that the license hasn't changed.\n         for pkg in metadata.packages.iter().filter(|p| p.name == *name) {\n-            if pkg.name == \"fuchsia-cprng\" {\n-                // This package doesn't declare a license expression. Manual\n-                // inspection of the license file is necessary, which appears\n-                // to be BSD-3-Clause.\n-                assert!(pkg.license.is_none());\n-                continue;\n-            }\n             match &pkg.license {\n                 None => {\n                     tidy_error!(\n@@ -242,14 +348,6 @@ fn check_exceptions(metadata: &Metadata, bad: &mut bool) {\n                 }\n                 Some(pkg_license) => {\n                     if pkg_license.as_str() != *license {\n-                        if *name == \"crossbeam-queue\"\n-                            && *license == \"MIT/Apache-2.0 AND BSD-2-Clause\"\n-                        {\n-                            // We have two versions of crossbeam-queue and both\n-                            // are fine.\n-                            continue;\n-                        }\n-\n                         println!(\"dependency exception `{}` license has changed\", name);\n                         println!(\"    previously `{}` now `{}`\", license, pkg_license);\n                         println!(\"    update EXCEPTIONS for the new license\");\n@@ -260,8 +358,7 @@ fn check_exceptions(metadata: &Metadata, bad: &mut bool) {\n         }\n     }\n \n-    let exception_names: Vec<_> = EXCEPTIONS.iter().map(|(name, _license)| *name).collect();\n-    let runtime_ids = compute_runtime_crates(metadata);\n+    let exception_names: Vec<_> = exceptions.iter().map(|(name, _license)| *name).collect();\n \n     // Check if any package does not have a valid license.\n     for pkg in &metadata.packages {\n@@ -296,9 +393,14 @@ fn check_exceptions(metadata: &Metadata, bad: &mut bool) {\n /// `true` if a check failed.\n ///\n /// Specifically, this checks that the dependencies are on the `PERMITTED_DEPENDENCIES`.\n-fn check_dependencies(metadata: &Metadata, bad: &mut bool) {\n+fn check_dependencies(\n+    metadata: &Metadata,\n+    permitted_dependencies: &[&'static str],\n+    restricted_dependency_crates: &[&'static str],\n+    bad: &mut bool,\n+) {\n     // Check that the PERMITTED_DEPENDENCIES does not have unused entries.\n-    for name in PERMITTED_DEPENDENCIES {\n+    for name in permitted_dependencies {\n         if !metadata.packages.iter().any(|p| p.name == *name) {\n             tidy_error!(\n                 bad,\n@@ -309,12 +411,12 @@ fn check_dependencies(metadata: &Metadata, bad: &mut bool) {\n         }\n     }\n     // Get the list in a convenient form.\n-    let permitted_dependencies: HashSet<_> = PERMITTED_DEPENDENCIES.iter().cloned().collect();\n+    let permitted_dependencies: HashSet<_> = permitted_dependencies.iter().cloned().collect();\n \n     // Check dependencies.\n     let mut visited = BTreeSet::new();\n     let mut unapproved = BTreeSet::new();\n-    for &krate in RESTRICTED_DEPENDENCY_CRATES.iter() {\n+    for &krate in restricted_dependency_crates.iter() {\n         let pkg = pkg_from_name(metadata, krate);\n         let mut bad =\n             check_crate_dependencies(&permitted_dependencies, metadata, &mut visited, pkg);\n@@ -367,16 +469,12 @@ fn check_crate_dependencies<'a>(\n }\n \n /// Prevents multiple versions of some expensive crates.\n-fn check_crate_duplicate(metadata: &Metadata, bad: &mut bool) {\n-    const FORBIDDEN_TO_HAVE_DUPLICATES: &[&str] = &[\n-        // These two crates take quite a long time to build, so don't allow two versions of them\n-        // to accidentally sneak into our dependency graph, in order to ensure we keep our CI times\n-        // under control.\n-        \"cargo\",\n-        \"rustc-ap-rustc_ast\",\n-    ];\n-\n-    for &name in FORBIDDEN_TO_HAVE_DUPLICATES {\n+fn check_crate_duplicate(\n+    metadata: &Metadata,\n+    forbidden_to_have_duplicates: &[&str],\n+    bad: &mut bool,\n+) {\n+    for &name in forbidden_to_have_duplicates {\n         let matches: Vec<_> = metadata.packages.iter().filter(|pkg| pkg.name == name).collect();\n         match matches.len() {\n             0 => {\n@@ -456,16 +554,7 @@ fn normal_deps_of_r<'a>(\n         .iter()\n         .find(|n| &n.id == pkg_id)\n         .unwrap_or_else(|| panic!(\"could not find `{}` in resolve\", pkg_id));\n-    // Don't care about dev-dependencies.\n-    // Build dependencies *shouldn't* matter unless they do some kind of\n-    // codegen. For now we'll assume they don't.\n-    let deps = node.deps.iter().filter(|node_dep| {\n-        node_dep\n-            .dep_kinds\n-            .iter()\n-            .any(|kind_info| kind_info.kind == cargo_metadata::DependencyKind::Normal)\n-    });\n-    for dep in deps {\n+    for dep in &node.deps {\n         normal_deps_of_r(resolve, &dep.pkg, result);\n     }\n }"}]}