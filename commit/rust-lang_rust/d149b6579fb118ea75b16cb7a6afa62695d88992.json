{"sha": "d149b6579fb118ea75b16cb7a6afa62695d88992", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxNDliNjU3OWZiMTE4ZWE3NWIxNmNiN2E2YWZhNjI2OTVkODg5OTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-13T08:40:07Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-13T08:40:07Z"}, "message": "Auto merge of #79956 - camelid:variant-field-vis, r=petrochenkov\n\nResolve enum field visibility correctly\n\nFixes #79593. :tada:\n\nPreviously, this code treated enum fields' visibility as if they were\nstruct fields. However, that's not correct because the visibility of a\nstruct field with `ast::VisibilityKind::Inherited` is private to the\nmodule it's defined in, whereas the visibility of an *enum* field with\n`ast::VisibilityKind::Inherited` is the visibility of the enum it\nbelongs to.", "tree": {"sha": "ab9f532faa43571c4c195df281f8211d20e45db4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab9f532faa43571c4c195df281f8211d20e45db4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d149b6579fb118ea75b16cb7a6afa62695d88992", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d149b6579fb118ea75b16cb7a6afa62695d88992", "html_url": "https://github.com/rust-lang/rust/commit/d149b6579fb118ea75b16cb7a6afa62695d88992", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d149b6579fb118ea75b16cb7a6afa62695d88992/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12813159a985d87a98578e05cc39200e4e8c2102", "url": "https://api.github.com/repos/rust-lang/rust/commits/12813159a985d87a98578e05cc39200e4e8c2102", "html_url": "https://github.com/rust-lang/rust/commit/12813159a985d87a98578e05cc39200e4e8c2102"}, {"sha": "5ce3f4c16636b261a8ce9ddfbbb30896338b9e37", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ce3f4c16636b261a8ce9ddfbbb30896338b9e37", "html_url": "https://github.com/rust-lang/rust/commit/5ce3f4c16636b261a8ce9ddfbbb30896338b9e37"}], "stats": {"total": 78, "additions": 75, "deletions": 3}, "files": [{"sha": "06e9969697d09b835ec3364255e6b61f22d83833", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d149b6579fb118ea75b16cb7a6afa62695d88992/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d149b6579fb118ea75b16cb7a6afa62695d88992/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=d149b6579fb118ea75b16cb7a6afa62695d88992", "patch": "@@ -258,7 +258,16 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                 Ok(ty::Visibility::Restricted(DefId::local(CRATE_DEF_INDEX)))\n             }\n             ast::VisibilityKind::Inherited => {\n-                Ok(ty::Visibility::Restricted(parent_scope.module.normal_ancestor_id))\n+                if matches!(self.parent_scope.module.kind, ModuleKind::Def(DefKind::Enum, _, _)) {\n+                    // Any inherited visibility resolved directly inside an enum\n+                    // (e.g. variants or fields) inherits from the visibility of the enum.\n+                    let parent_enum = self.parent_scope.module.def_id().unwrap().expect_local();\n+                    Ok(self.r.visibilities[&parent_enum])\n+                } else {\n+                    // If it's not in an enum, its visibility is restricted to the `mod` item\n+                    // that it's defined in.\n+                    Ok(ty::Visibility::Restricted(self.parent_scope.module.normal_ancestor_id))\n+                }\n             }\n             ast::VisibilityKind::Restricted { ref path, id, .. } => {\n                 // For visibilities we are not ready to provide correct implementation of \"uniform"}, {"sha": "f764fbc3f8dac83c9cbcacfd6912f7ddfbcf78ca", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d149b6579fb118ea75b16cb7a6afa62695d88992/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d149b6579fb118ea75b16cb7a6afa62695d88992/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=d149b6579fb118ea75b16cb7a6afa62695d88992", "patch": "@@ -403,6 +403,7 @@ enum PathResult<'a> {\n     },\n }\n \n+#[derive(Debug)]\n enum ModuleKind {\n     /// An anonymous module; e.g., just a block.\n     ///"}, {"sha": "ec0e039b5d29d99867fa0672f3104a6421f41129", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d149b6579fb118ea75b16cb7a6afa62695d88992/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d149b6579fb118ea75b16cb7a6afa62695d88992/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=d149b6579fb118ea75b16cb7a6afa62695d88992", "patch": "@@ -1248,7 +1248,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             if no_accessible_remaining_fields {\n                 self.report_no_accessible_fields(adt_ty, span);\n             } else {\n-                self.report_missing_field(adt_ty, span, remaining_fields);\n+                self.report_missing_fields(adt_ty, span, remaining_fields);\n             }\n         }\n \n@@ -1279,7 +1279,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     ///\n     /// error: aborting due to previous error\n     /// ```\n-    fn report_missing_field(\n+    fn report_missing_fields(\n         &self,\n         adt_ty: Ty<'tcx>,\n         span: Span,"}, {"sha": "fb54b36940d514f33f60756af0de0d2c57885024", "filename": "src/test/ui/issues/issue-79593.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/d149b6579fb118ea75b16cb7a6afa62695d88992/src%2Ftest%2Fui%2Fissues%2Fissue-79593.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d149b6579fb118ea75b16cb7a6afa62695d88992/src%2Ftest%2Fui%2Fissues%2Fissue-79593.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-79593.rs?ref=d149b6579fb118ea75b16cb7a6afa62695d88992", "patch": "@@ -0,0 +1,29 @@\n+mod foo {\n+    pub struct Pub { private: () }\n+\n+    pub enum Enum {\n+        Variant { x: (), y: () },\n+        Other\n+    }\n+\n+    fn correct() {\n+        Pub {};\n+        //~^ ERROR missing field `private` in initializer of `Pub`\n+        Enum::Variant { x: () };\n+        //~^ ERROR missing field `y` in initializer of `Enum`\n+    }\n+}\n+\n+fn correct() {\n+    foo::Pub {};\n+    //~^ ERROR cannot construct `Pub` with struct literal syntax due to inaccessible fields\n+}\n+\n+fn wrong() {\n+    foo::Enum::Variant { x: () };\n+    //~^ ERROR missing field `y` in initializer of `Enum`\n+    foo::Enum::Variant { };\n+    //~^ ERROR missing fields `x`, `y` in initializer of `Enum`\n+}\n+\n+fn main() {}"}, {"sha": "33dbd85032eab6c4206940e346dbf0bb16798811", "filename": "src/test/ui/issues/issue-79593.stderr", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/d149b6579fb118ea75b16cb7a6afa62695d88992/src%2Ftest%2Fui%2Fissues%2Fissue-79593.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d149b6579fb118ea75b16cb7a6afa62695d88992/src%2Ftest%2Fui%2Fissues%2Fissue-79593.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-79593.stderr?ref=d149b6579fb118ea75b16cb7a6afa62695d88992", "patch": "@@ -0,0 +1,33 @@\n+error[E0063]: missing field `private` in initializer of `Pub`\n+  --> $DIR/issue-79593.rs:10:9\n+   |\n+LL |         Pub {};\n+   |         ^^^ missing `private`\n+\n+error[E0063]: missing field `y` in initializer of `Enum`\n+  --> $DIR/issue-79593.rs:12:9\n+   |\n+LL |         Enum::Variant { x: () };\n+   |         ^^^^^^^^^^^^^ missing `y`\n+\n+error: cannot construct `Pub` with struct literal syntax due to inaccessible fields\n+  --> $DIR/issue-79593.rs:18:5\n+   |\n+LL |     foo::Pub {};\n+   |     ^^^^^^^^\n+\n+error[E0063]: missing field `y` in initializer of `Enum`\n+  --> $DIR/issue-79593.rs:23:5\n+   |\n+LL |     foo::Enum::Variant { x: () };\n+   |     ^^^^^^^^^^^^^^^^^^ missing `y`\n+\n+error[E0063]: missing fields `x`, `y` in initializer of `Enum`\n+  --> $DIR/issue-79593.rs:25:5\n+   |\n+LL |     foo::Enum::Variant { };\n+   |     ^^^^^^^^^^^^^^^^^^ missing `x`, `y`\n+\n+error: aborting due to 5 previous errors\n+\n+For more information about this error, try `rustc --explain E0063`."}]}