{"sha": "c6707dc15aa37ea53dd837b0f55d6d2f13393fc1", "node_id": "C_kwDOAAsO6NoAKGM2NzA3ZGMxNWFhMzdlYTUzZGQ4MzdiMGY1NWQ2ZDJmMTMzOTNmYzE", "commit": {"author": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2023-06-07T12:48:45Z"}, "committer": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2023-06-12T07:34:06Z"}, "message": "return dummy cc and friends during dry runs\n\nSome targets are added to these hashmaps at runtime, and are not present\nduring dry runs. To avoid errors, this commit changes all the related\nfunctions to always return empty strings/paths during dry runs.", "tree": {"sha": "f7b0941c7a0825907d6d52f9c2de673aae4e8c67", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7b0941c7a0825907d6d52f9c2de673aae4e8c67"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6707dc15aa37ea53dd837b0f55d6d2f13393fc1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEMycKYjxLY0eb13b7zXazX3c0dp4FAmSGym8ACgkQzXazX3c0\ndp71tw//UbPTCWkhskxlDFFV4+N5Gya3nrhLyfvLrNTnATO3fhmYSd4oQUxgeaw/\n6EDfIEVXeiPOYUhyNuMhHnlPp3avPJW/Unq92+idvNHz+fJoN7tgR+LOHlC5bY9z\nadPTfyIU3Zvj8xyKEtZRbTYKKDdcXbEBtDqq+VjeQ4HtdvjwNMM+v3HGloY91i/5\nEFSceyIdPsiCKelawmqM3fdwsRuQfWbC19bKPDauAbwoiP6sNxgihILHLWWmIdWq\nyj7gzqbzD2uOTFjcHHcWZSt6ctDzzO4BCTce2ij85MMASHR3sEfdXpz5IGZR1kPt\n5eB3gVIArbqQOVlFC2HG3nN71P3lXPdABXPPHRosrI16IdpEnzKbhNnr/pbCtvPG\ncsZgQQFVDH8nka+J+xKxeH2NTvcm5zcJjsAa7HtTezDu1AL9WNFravGBWRMqbUHZ\n6X6ITMInV0QbMuMmMrT1LCUw7kPb84fDmi41CQMMJXa4NHmVU0SBJrlBUfuzzOuj\nOvDCUymGS5mfoZ//VtPUEFHWGp6vFInb/A6tSmu/rMiOrHpEJTbZYyhB66f+sm9G\nHPQeJQyKIZm8kD7JballH35yR9HDOayFeMvIRfGA5lWOvsyqrvGrieYPlMudW8e1\nHyf6IiJll6onrYWb+ytny2X/YyN8PRpRtpo89EzwKD1vtZzKs4A=\n=FgAZ\n-----END PGP SIGNATURE-----", "payload": "tree f7b0941c7a0825907d6d52f9c2de673aae4e8c67\nparent 68d458bb402b873b9ae80423710c2672967479df\nauthor Pietro Albini <pietro.albini@ferrous-systems.com> 1686142125 +0200\ncommitter Pietro Albini <pietro.albini@ferrous-systems.com> 1686555246 +0200\n\nreturn dummy cc and friends during dry runs\n\nSome targets are added to these hashmaps at runtime, and are not present\nduring dry runs. To avoid errors, this commit changes all the related\nfunctions to always return empty strings/paths during dry runs.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6707dc15aa37ea53dd837b0f55d6d2f13393fc1", "html_url": "https://github.com/rust-lang/rust/commit/c6707dc15aa37ea53dd837b0f55d6d2f13393fc1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6707dc15aa37ea53dd837b0f55d6d2f13393fc1/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68d458bb402b873b9ae80423710c2672967479df", "url": "https://api.github.com/repos/rust-lang/rust/commits/68d458bb402b873b9ae80423710c2672967479df", "html_url": "https://github.com/rust-lang/rust/commit/68d458bb402b873b9ae80423710c2672967479df"}], "stats": {"total": 23, "additions": 22, "deletions": 1}, "files": [{"sha": "fe0c1dfb70ba0573d3f22d2e20cab4ec06b6daa6", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6707dc15aa37ea53dd837b0f55d6d2f13393fc1/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6707dc15aa37ea53dd837b0f55d6d2f13393fc1/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=c6707dc15aa37ea53dd837b0f55d6d2f13393fc1", "patch": "@@ -1650,7 +1650,7 @@ impl<'a> Builder<'a> {\n             }\n         };\n         cargo.env(profile_var(\"DEBUG\"), debuginfo_level.to_string());\n-        if self.cc.borrow()[&target].args().iter().any(|arg| arg == \"-gz\") {\n+        if !self.config.dry_run() && self.cc.borrow()[&target].args().iter().any(|arg| arg == \"-gz\") {\n             rustflags.arg(\"-Clink-arg=-gz\");\n         }\n         cargo.env("}, {"sha": "8f2e7d755234ea780c2c0399bc619bb92569db11", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c6707dc15aa37ea53dd837b0f55d6d2f13393fc1/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6707dc15aa37ea53dd837b0f55d6d2f13393fc1/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=c6707dc15aa37ea53dd837b0f55d6d2f13393fc1", "patch": "@@ -1272,6 +1272,9 @@ pub fn compiler_file(\n     c: CLang,\n     file: &str,\n ) -> PathBuf {\n+    if builder.config.dry_run() {\n+        return PathBuf::new();\n+    }\n     let mut cmd = Command::new(compiler);\n     cmd.args(builder.cflags(target, GitRepo::Rustc, c));\n     cmd.arg(format!(\"-print-file-name={}\", file));"}, {"sha": "c9d256028d4dc84f52035cebeb86ef5d1062aa0b", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c6707dc15aa37ea53dd837b0f55d6d2f13393fc1/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6707dc15aa37ea53dd837b0f55d6d2f13393fc1/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=c6707dc15aa37ea53dd837b0f55d6d2f13393fc1", "patch": "@@ -1104,12 +1104,18 @@ impl Build {\n \n     /// Returns the path to the C compiler for the target specified.\n     fn cc(&self, target: TargetSelection) -> PathBuf {\n+        if self.config.dry_run() {\n+            return PathBuf::new();\n+        }\n         self.cc.borrow()[&target].path().into()\n     }\n \n     /// Returns a list of flags to pass to the C compiler for the target\n     /// specified.\n     fn cflags(&self, target: TargetSelection, which: GitRepo, c: CLang) -> Vec<String> {\n+        if self.config.dry_run() {\n+            return Vec::new();\n+        }\n         let base = match c {\n             CLang::C => self.cc.borrow()[&target].clone(),\n             CLang::Cxx => self.cxx.borrow()[&target].clone(),\n@@ -1154,16 +1160,25 @@ impl Build {\n \n     /// Returns the path to the `ar` archive utility for the target specified.\n     fn ar(&self, target: TargetSelection) -> Option<PathBuf> {\n+        if self.config.dry_run() {\n+            return None;\n+        }\n         self.ar.borrow().get(&target).cloned()\n     }\n \n     /// Returns the path to the `ranlib` utility for the target specified.\n     fn ranlib(&self, target: TargetSelection) -> Option<PathBuf> {\n+        if self.config.dry_run() {\n+            return None;\n+        }\n         self.ranlib.borrow().get(&target).cloned()\n     }\n \n     /// Returns the path to the C++ compiler for the target specified.\n     fn cxx(&self, target: TargetSelection) -> Result<PathBuf, String> {\n+        if self.config.dry_run() {\n+            return Ok(PathBuf::new());\n+        }\n         match self.cxx.borrow().get(&target) {\n             Some(p) => Ok(p.path().into()),\n             None => {\n@@ -1174,6 +1189,9 @@ impl Build {\n \n     /// Returns the path to the linker for the given target if it needs to be overridden.\n     fn linker(&self, target: TargetSelection) -> Option<PathBuf> {\n+        if self.config.dry_run() {\n+            return Some(PathBuf::new());\n+        }\n         if let Some(linker) = self.config.target_config.get(&target).and_then(|c| c.linker.clone())\n         {\n             Some(linker)"}]}