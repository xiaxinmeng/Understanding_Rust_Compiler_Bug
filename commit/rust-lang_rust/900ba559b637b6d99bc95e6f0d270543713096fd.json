{"sha": "900ba559b637b6d99bc95e6f0d270543713096fd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwMGJhNTU5YjYzN2I2ZDk5YmM5NWU2ZjBkMjcwNTQzNzEzMDk2ZmQ=", "commit": {"author": {"name": "Marco Castelluccio", "email": "mcastelluccio@mozilla.com", "date": "2017-06-12T22:08:08Z"}, "committer": {"name": "Marco Castelluccio", "email": "mcastelluccio@mozilla.com", "date": "2017-06-12T22:08:08Z"}, "message": "Compile WindowsMMap too on MSVC", "tree": {"sha": "6e21a5eee51d76be308a67591299e27a1b43f346", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e21a5eee51d76be308a67591299e27a1b43f346"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/900ba559b637b6d99bc95e6f0d270543713096fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/900ba559b637b6d99bc95e6f0d270543713096fd", "html_url": "https://github.com/rust-lang/rust/commit/900ba559b637b6d99bc95e6f0d270543713096fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/900ba559b637b6d99bc95e6f0d270543713096fd/comments", "author": {"login": "marco-c", "id": 1616846, "node_id": "MDQ6VXNlcjE2MTY4NDY=", "avatar_url": "https://avatars.githubusercontent.com/u/1616846?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marco-c", "html_url": "https://github.com/marco-c", "followers_url": "https://api.github.com/users/marco-c/followers", "following_url": "https://api.github.com/users/marco-c/following{/other_user}", "gists_url": "https://api.github.com/users/marco-c/gists{/gist_id}", "starred_url": "https://api.github.com/users/marco-c/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marco-c/subscriptions", "organizations_url": "https://api.github.com/users/marco-c/orgs", "repos_url": "https://api.github.com/users/marco-c/repos", "events_url": "https://api.github.com/users/marco-c/events{/privacy}", "received_events_url": "https://api.github.com/users/marco-c/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marco-c", "id": 1616846, "node_id": "MDQ6VXNlcjE2MTY4NDY=", "avatar_url": "https://avatars.githubusercontent.com/u/1616846?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marco-c", "html_url": "https://github.com/marco-c", "followers_url": "https://api.github.com/users/marco-c/followers", "following_url": "https://api.github.com/users/marco-c/following{/other_user}", "gists_url": "https://api.github.com/users/marco-c/gists{/gist_id}", "starred_url": "https://api.github.com/users/marco-c/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marco-c/subscriptions", "organizations_url": "https://api.github.com/users/marco-c/orgs", "repos_url": "https://api.github.com/users/marco-c/repos", "events_url": "https://api.github.com/users/marco-c/events{/privacy}", "received_events_url": "https://api.github.com/users/marco-c/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce56daf37b7b5b101db7ef895e6be4586d80d08e", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce56daf37b7b5b101db7ef895e6be4586d80d08e", "html_url": "https://github.com/rust-lang/rust/commit/ce56daf37b7b5b101db7ef895e6be4586d80d08e"}], "stats": {"total": 29, "additions": 15, "deletions": 14}, "files": [{"sha": "4397d2ebb21e62f5dbe2e56fa667c3a9a9266fd9", "filename": "src/libprofiler_builtins/build.rs", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/900ba559b637b6d99bc95e6f0d270543713096fd/src%2Flibprofiler_builtins%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/900ba559b637b6d99bc95e6f0d270543713096fd/src%2Flibprofiler_builtins%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibprofiler_builtins%2Fbuild.rs?ref=900ba559b637b6d99bc95e6f0d270543713096fd", "patch": "@@ -21,9 +21,24 @@ fn main() {\n     let target = env::var(\"TARGET\").expect(\"TARGET was not set\");\n     let cfg = &mut gcc::Config::new();\n \n+    let mut profile_sources = vec![\"GCDAProfiling.c\",\n+                                   \"InstrProfiling.c\",\n+                                   \"InstrProfilingBuffer.c\",\n+                                   \"InstrProfilingFile.c\",\n+                                   \"InstrProfilingMerge.c\",\n+                                   \"InstrProfilingMergeFile.c\",\n+                                   \"InstrProfilingPlatformDarwin.c\",\n+                                   \"InstrProfilingPlatformLinux.c\",\n+                                   \"InstrProfilingPlatformOther.c\",\n+                                   \"InstrProfilingRuntime.cc\",\n+                                   \"InstrProfilingUtil.c\",\n+                                   \"InstrProfilingValue.c\",\n+                                   \"InstrProfilingWriter.c\"];\n+\n     if target.contains(\"msvc\") {\n         // Don't pull in extra libraries on MSVC\n         cfg.flag(\"/Zl\");\n+        profile_sources.push(\"WindowsMMap.c\");\n     } else {\n         // Turn off various features of gcc and such, mostly copying\n         // compiler-rt's build system already\n@@ -34,20 +49,6 @@ fn main() {\n         cfg.define(\"VISIBILITY_HIDDEN\", None);\n     }\n \n-    let profile_sources = &[\"GCDAProfiling.c\",\n-                            \"InstrProfiling.c\",\n-                            \"InstrProfilingBuffer.c\",\n-                            \"InstrProfilingFile.c\",\n-                            \"InstrProfilingMerge.c\",\n-                            \"InstrProfilingMergeFile.c\",\n-                            \"InstrProfilingPlatformDarwin.c\",\n-                            \"InstrProfilingPlatformLinux.c\",\n-                            \"InstrProfilingPlatformOther.c\",\n-                            \"InstrProfilingRuntime.cc\",\n-                            \"InstrProfilingUtil.c\",\n-                            \"InstrProfilingValue.c\",\n-                            \"InstrProfilingWriter.c\"];\n-\n     for src in profile_sources {\n         cfg.file(Path::new(\"../compiler-rt/lib/profile\").join(src));\n     }"}]}