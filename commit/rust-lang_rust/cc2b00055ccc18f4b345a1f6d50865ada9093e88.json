{"sha": "cc2b00055ccc18f4b345a1f6d50865ada9093e88", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjMmIwMDA1NWNjYzE4ZjRiMzQ1YTFmNmQ1MDg2NWFkYTkwOTNlODg=", "commit": {"author": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2021-02-25T19:11:01Z"}, "committer": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2021-02-27T05:16:02Z"}, "message": "return when the ty doesn't have `len()`", "tree": {"sha": "39782116f9df195f058f9dc324331b98e0682328", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/39782116f9df195f058f9dc324331b98e0682328"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc2b00055ccc18f4b345a1f6d50865ada9093e88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc2b00055ccc18f4b345a1f6d50865ada9093e88", "html_url": "https://github.com/rust-lang/rust/commit/cc2b00055ccc18f4b345a1f6d50865ada9093e88", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc2b00055ccc18f4b345a1f6d50865ada9093e88/comments", "author": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9958af4229d4bee06ee65b921ac11b1fe498e831", "url": "https://api.github.com/repos/rust-lang/rust/commits/9958af4229d4bee06ee65b921ac11b1fe498e831", "html_url": "https://github.com/rust-lang/rust/commit/9958af4229d4bee06ee65b921ac11b1fe498e831"}], "stats": {"total": 195, "additions": 169, "deletions": 26}, "files": [{"sha": "1bcdb57ad29e99f0ff3d8b279d8c036036f484e9", "filename": "clippy_lints/src/methods/iter_count.rs", "status": "modified", "additions": 22, "deletions": 11, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/cc2b00055ccc18f4b345a1f6d50865ada9093e88/clippy_lints%2Fsrc%2Fmethods%2Fiter_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc2b00055ccc18f4b345a1f6d50865ada9093e88/clippy_lints%2Fsrc%2Fmethods%2Fiter_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fiter_count.rs?ref=cc2b00055ccc18f4b345a1f6d50865ada9093e88", "patch": "@@ -1,7 +1,8 @@\n use crate::utils::{\n-    derefs_to_slice, is_type_diagnostic_item, match_trait_method, method_chain_args, paths, snippet_with_applicability,\n+    derefs_to_slice, is_type_diagnostic_item, match_type, method_chain_args, paths, snippet_with_applicability,\n     span_lint_and_sugg,\n };\n+\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::Expr;\n@@ -19,19 +20,29 @@ pub(crate) fn lints<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'_>, iter_args: &'\n     } else {\n         return;\n     };\n+    let ty = cx.typeck_results().expr_ty(&iter_args[0]);\n     if_chain! {\n-        let caller_type = if derefs_to_slice(cx, &iter_args[0], cx.typeck_results().expr_ty(&iter_args[0])).is_some() {\n-            Some(\"slice\")\n-        } else if is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(&iter_args[0]), sym::vec_type) {\n-            Some(\"Vec\")\n-        } else if is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(&iter_args[0]), sym!(vecdeque_type)) {\n-            Some(\"VecDeque\")\n-        } else if match_trait_method(cx, expr, &paths::ITERATOR) {\n-            Some(\"std::iter::Iterator\")\n+        let caller_type = if derefs_to_slice(cx, &iter_args[0], ty).is_some() {\n+            \"slice\"\n+        } else if is_type_diagnostic_item(cx, ty, sym::vec_type) {\n+            \"Vec\"\n+        } else if is_type_diagnostic_item(cx, ty, sym!(vecdeque_type)) {\n+            \"VecDeque\"\n+        } else if is_type_diagnostic_item(cx, ty, sym!(hashset_type)) {\n+            \"HashSet\"\n+        } else if is_type_diagnostic_item(cx, ty, sym!(hashmap_type)) {\n+            \"HashMap\"\n+        } else if match_type(cx, ty, &paths::BTREEMAP) {\n+            \"BTreeMap\"\n+        } else if match_type(cx, ty, &paths::BTREESET) {\n+            \"BTreeSet\"\n+        } else if match_type(cx, ty, &paths::LINKED_LIST) {\n+            \"LinkedList\"\n+        } else if match_type(cx, ty, &paths::BINARY_HEAP) {\n+            \"BinaryHeap\"\n         } else {\n-            None\n+            return\n         };\n-        if let Some(caller_type) = caller_type;\n         then {\n             let mut applicability = Applicability::MachineApplicable;\n             span_lint_and_sugg("}, {"sha": "b11dadda6c24ed753f23663492f5a675a6f82702", "filename": "tests/ui/iter_count.fixed", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/cc2b00055ccc18f4b345a1f6d50865ada9093e88/tests%2Fui%2Fiter_count.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/cc2b00055ccc18f4b345a1f6d50865ada9093e88/tests%2Fui%2Fiter_count.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiter_count.fixed?ref=cc2b00055ccc18f4b345a1f6d50865ada9093e88", "patch": "@@ -13,7 +13,7 @@\n extern crate option_helpers;\n \n use option_helpers::IteratorFalsePositives;\n-use std::collections::{HashSet, VecDeque};\n+use std::collections::{BTreeMap, BTreeSet, BinaryHeap, HashMap, HashSet, LinkedList, VecDeque};\n \n /// Struct to generate false positives for things with `.iter()`.\n #[derive(Copy, Clone)]\n@@ -38,21 +38,45 @@ fn main() {\n     let mut boxed_slice: Box<[u8]> = Box::new([0, 1, 2, 3]);\n     let mut vec_deque: VecDeque<_> = vec.iter().cloned().collect();\n     let mut hash_set = HashSet::new();\n+    let mut hash_map = HashMap::new();\n+    let mut b_tree_map = BTreeMap::new();\n+    let mut b_tree_set = BTreeSet::new();\n+    let mut linked_list = LinkedList::new();\n+    let mut binary_heap = BinaryHeap::new();\n     hash_set.insert(1);\n+    hash_map.insert(1, 2);\n+    b_tree_map.insert(1, 2);\n+    b_tree_set.insert(1);\n+    linked_list.push_back(1);\n+    binary_heap.push(1);\n \n     &vec[..].len();\n     vec.len();\n     boxed_slice.len();\n     vec_deque.len();\n     hash_set.len();\n+    hash_map.len();\n+    b_tree_map.len();\n+    b_tree_set.len();\n+    linked_list.len();\n+    binary_heap.len();\n \n     vec.len();\n     &vec[..].len();\n     vec_deque.len();\n+    hash_map.len();\n+    b_tree_map.len();\n+    linked_list.len();\n \n     &vec[..].len();\n     vec.len();\n     vec_deque.len();\n+    hash_set.len();\n+    hash_map.len();\n+    b_tree_map.len();\n+    b_tree_set.len();\n+    linked_list.len();\n+    binary_heap.len();\n \n     // Make sure we don't lint for non-relevant types.\n     let false_positive = HasIter;"}, {"sha": "7d49c6a3dbbb939d90144b60e51123e85293d620", "filename": "tests/ui/iter_count.rs", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/cc2b00055ccc18f4b345a1f6d50865ada9093e88/tests%2Fui%2Fiter_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc2b00055ccc18f4b345a1f6d50865ada9093e88/tests%2Fui%2Fiter_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiter_count.rs?ref=cc2b00055ccc18f4b345a1f6d50865ada9093e88", "patch": "@@ -13,7 +13,7 @@\n extern crate option_helpers;\n \n use option_helpers::IteratorFalsePositives;\n-use std::collections::{HashSet, VecDeque};\n+use std::collections::{BTreeMap, BTreeSet, BinaryHeap, HashMap, HashSet, LinkedList, VecDeque};\n \n /// Struct to generate false positives for things with `.iter()`.\n #[derive(Copy, Clone)]\n@@ -38,21 +38,45 @@ fn main() {\n     let mut boxed_slice: Box<[u8]> = Box::new([0, 1, 2, 3]);\n     let mut vec_deque: VecDeque<_> = vec.iter().cloned().collect();\n     let mut hash_set = HashSet::new();\n+    let mut hash_map = HashMap::new();\n+    let mut b_tree_map = BTreeMap::new();\n+    let mut b_tree_set = BTreeSet::new();\n+    let mut linked_list = LinkedList::new();\n+    let mut binary_heap = BinaryHeap::new();\n     hash_set.insert(1);\n+    hash_map.insert(1, 2);\n+    b_tree_map.insert(1, 2);\n+    b_tree_set.insert(1);\n+    linked_list.push_back(1);\n+    binary_heap.push(1);\n \n     &vec[..].iter().count();\n     vec.iter().count();\n     boxed_slice.iter().count();\n     vec_deque.iter().count();\n     hash_set.iter().count();\n+    hash_map.iter().count();\n+    b_tree_map.iter().count();\n+    b_tree_set.iter().count();\n+    linked_list.iter().count();\n+    binary_heap.iter().count();\n \n     vec.iter_mut().count();\n     &vec[..].iter_mut().count();\n     vec_deque.iter_mut().count();\n+    hash_map.iter_mut().count();\n+    b_tree_map.iter_mut().count();\n+    linked_list.iter_mut().count();\n \n     &vec[..].into_iter().count();\n     vec.into_iter().count();\n     vec_deque.into_iter().count();\n+    hash_set.into_iter().count();\n+    hash_map.into_iter().count();\n+    b_tree_map.into_iter().count();\n+    b_tree_set.into_iter().count();\n+    linked_list.into_iter().count();\n+    binary_heap.into_iter().count();\n \n     // Make sure we don't lint for non-relevant types.\n     let false_positive = HasIter;"}, {"sha": "f3fb98e65b9906aa35381897f64948aa21635d42", "filename": "tests/ui/iter_count.stderr", "status": "modified", "additions": 97, "deletions": 13, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/cc2b00055ccc18f4b345a1f6d50865ada9093e88/tests%2Fui%2Fiter_count.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cc2b00055ccc18f4b345a1f6d50865ada9093e88/tests%2Fui%2Fiter_count.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiter_count.stderr?ref=cc2b00055ccc18f4b345a1f6d50865ada9093e88", "patch": "@@ -1,70 +1,154 @@\n error: called `.iter().count()` on a `slice`\n-  --> $DIR/iter_count.rs:43:6\n+  --> $DIR/iter_count.rs:53:6\n    |\n LL |     &vec[..].iter().count();\n    |      ^^^^^^^^^^^^^^^^^^^^^^ help: try: `vec[..].len()`\n    |\n    = note: `-D clippy::iter-count` implied by `-D warnings`\n \n error: called `.iter().count()` on a `Vec`\n-  --> $DIR/iter_count.rs:44:5\n+  --> $DIR/iter_count.rs:54:5\n    |\n LL |     vec.iter().count();\n    |     ^^^^^^^^^^^^^^^^^^ help: try: `vec.len()`\n \n error: called `.iter().count()` on a `slice`\n-  --> $DIR/iter_count.rs:45:5\n+  --> $DIR/iter_count.rs:55:5\n    |\n LL |     boxed_slice.iter().count();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `boxed_slice.len()`\n \n error: called `.iter().count()` on a `VecDeque`\n-  --> $DIR/iter_count.rs:46:5\n+  --> $DIR/iter_count.rs:56:5\n    |\n LL |     vec_deque.iter().count();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `vec_deque.len()`\n \n-error: called `.iter().count()` on a `std::iter::Iterator`\n-  --> $DIR/iter_count.rs:47:5\n+error: called `.iter().count()` on a `HashSet`\n+  --> $DIR/iter_count.rs:57:5\n    |\n LL |     hash_set.iter().count();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ help: try: `hash_set.len()`\n \n+error: called `.iter().count()` on a `HashMap`\n+  --> $DIR/iter_count.rs:58:5\n+   |\n+LL |     hash_map.iter().count();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^ help: try: `hash_map.len()`\n+\n+error: called `.iter().count()` on a `BTreeMap`\n+  --> $DIR/iter_count.rs:59:5\n+   |\n+LL |     b_tree_map.iter().count();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `b_tree_map.len()`\n+\n+error: called `.iter().count()` on a `BTreeSet`\n+  --> $DIR/iter_count.rs:60:5\n+   |\n+LL |     b_tree_set.iter().count();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `b_tree_set.len()`\n+\n+error: called `.iter().count()` on a `LinkedList`\n+  --> $DIR/iter_count.rs:61:5\n+   |\n+LL |     linked_list.iter().count();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `linked_list.len()`\n+\n+error: called `.iter().count()` on a `BinaryHeap`\n+  --> $DIR/iter_count.rs:62:5\n+   |\n+LL |     binary_heap.iter().count();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `binary_heap.len()`\n+\n error: called `.iter_mut().count()` on a `Vec`\n-  --> $DIR/iter_count.rs:49:5\n+  --> $DIR/iter_count.rs:64:5\n    |\n LL |     vec.iter_mut().count();\n    |     ^^^^^^^^^^^^^^^^^^^^^^ help: try: `vec.len()`\n \n error: called `.iter_mut().count()` on a `slice`\n-  --> $DIR/iter_count.rs:50:6\n+  --> $DIR/iter_count.rs:65:6\n    |\n LL |     &vec[..].iter_mut().count();\n    |      ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `vec[..].len()`\n \n error: called `.iter_mut().count()` on a `VecDeque`\n-  --> $DIR/iter_count.rs:51:5\n+  --> $DIR/iter_count.rs:66:5\n    |\n LL |     vec_deque.iter_mut().count();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `vec_deque.len()`\n \n+error: called `.iter_mut().count()` on a `HashMap`\n+  --> $DIR/iter_count.rs:67:5\n+   |\n+LL |     hash_map.iter_mut().count();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `hash_map.len()`\n+\n+error: called `.iter_mut().count()` on a `BTreeMap`\n+  --> $DIR/iter_count.rs:68:5\n+   |\n+LL |     b_tree_map.iter_mut().count();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `b_tree_map.len()`\n+\n+error: called `.iter_mut().count()` on a `LinkedList`\n+  --> $DIR/iter_count.rs:69:5\n+   |\n+LL |     linked_list.iter_mut().count();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `linked_list.len()`\n+\n error: called `.into_iter().count()` on a `slice`\n-  --> $DIR/iter_count.rs:53:6\n+  --> $DIR/iter_count.rs:71:6\n    |\n LL |     &vec[..].into_iter().count();\n    |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `vec[..].len()`\n \n error: called `.into_iter().count()` on a `Vec`\n-  --> $DIR/iter_count.rs:54:5\n+  --> $DIR/iter_count.rs:72:5\n    |\n LL |     vec.into_iter().count();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ help: try: `vec.len()`\n \n error: called `.into_iter().count()` on a `VecDeque`\n-  --> $DIR/iter_count.rs:55:5\n+  --> $DIR/iter_count.rs:73:5\n    |\n LL |     vec_deque.into_iter().count();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `vec_deque.len()`\n \n-error: aborting due to 11 previous errors\n+error: called `.into_iter().count()` on a `HashSet`\n+  --> $DIR/iter_count.rs:74:5\n+   |\n+LL |     hash_set.into_iter().count();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `hash_set.len()`\n+\n+error: called `.into_iter().count()` on a `HashMap`\n+  --> $DIR/iter_count.rs:75:5\n+   |\n+LL |     hash_map.into_iter().count();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `hash_map.len()`\n+\n+error: called `.into_iter().count()` on a `BTreeMap`\n+  --> $DIR/iter_count.rs:76:5\n+   |\n+LL |     b_tree_map.into_iter().count();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `b_tree_map.len()`\n+\n+error: called `.into_iter().count()` on a `BTreeSet`\n+  --> $DIR/iter_count.rs:77:5\n+   |\n+LL |     b_tree_set.into_iter().count();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `b_tree_set.len()`\n+\n+error: called `.into_iter().count()` on a `LinkedList`\n+  --> $DIR/iter_count.rs:78:5\n+   |\n+LL |     linked_list.into_iter().count();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `linked_list.len()`\n+\n+error: called `.into_iter().count()` on a `BinaryHeap`\n+  --> $DIR/iter_count.rs:79:5\n+   |\n+LL |     binary_heap.into_iter().count();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `binary_heap.len()`\n+\n+error: aborting due to 25 previous errors\n "}]}