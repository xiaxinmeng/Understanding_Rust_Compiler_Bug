{"sha": "d86863aeb404b042a3ba1a60d5d961f392b8cb64", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4Njg2M2FlYjQwNGIwNDJhM2JhMWE2MGQ1ZDk2MWYzOTJiOGNiNjQ=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2020-10-21T12:17:00Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2020-10-22T07:51:11Z"}, "message": "Rewrite algo::diff to support insertion and deletion", "tree": {"sha": "acb92c7fe095120b149beaf1843512d337e7abc3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/acb92c7fe095120b149beaf1843512d337e7abc3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d86863aeb404b042a3ba1a60d5d961f392b8cb64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d86863aeb404b042a3ba1a60d5d961f392b8cb64", "html_url": "https://github.com/rust-lang/rust/commit/d86863aeb404b042a3ba1a60d5d961f392b8cb64", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d86863aeb404b042a3ba1a60d5d961f392b8cb64/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc63f153f07af0d494f6bdfba9291e821a839807", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc63f153f07af0d494f6bdfba9291e821a839807", "html_url": "https://github.com/rust-lang/rust/commit/cc63f153f07af0d494f6bdfba9291e821a839807"}], "stats": {"total": 93, "additions": 68, "deletions": 25}, "files": [{"sha": "59f743eface275ab2bbddc67010ed76910fcbeec", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d86863aeb404b042a3ba1a60d5d961f392b8cb64/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/d86863aeb404b042a3ba1a60d5d961f392b8cb64/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=d86863aeb404b042a3ba1a60d5d961f392b8cb64", "patch": "@@ -1607,6 +1607,7 @@ version = \"0.0.0\"\n dependencies = [\n  \"arrayvec\",\n  \"expect-test\",\n+ \"indexmap\",\n  \"itertools\",\n  \"once_cell\",\n  \"parser\","}, {"sha": "76b52fa047ae7b196c1e7294eb4466f13b13c9a9", "filename": "crates/ide/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d86863aeb404b042a3ba1a60d5d961f392b8cb64/crates%2Fide%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d86863aeb404b042a3ba1a60d5d961f392b8cb64/crates%2Fide%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2FCargo.toml?ref=d86863aeb404b042a3ba1a60d5d961f392b8cb64", "patch": "@@ -11,7 +11,7 @@ doctest = false\n \n [dependencies]\n either = \"1.5.3\"\n-indexmap = \"1.3.2\"\n+indexmap = \"1.4.0\"\n itertools = \"0.9.0\"\n log = \"0.4.8\"\n rustc-hash = \"1.1.0\""}, {"sha": "232074c3dff5dce0184ac11e310509a176dc1e24", "filename": "crates/ide/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d86863aeb404b042a3ba1a60d5d961f392b8cb64/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d86863aeb404b042a3ba1a60d5d961f392b8cb64/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics.rs?ref=d86863aeb404b042a3ba1a60d5d961f392b8cb64", "patch": "@@ -613,7 +613,7 @@ fn main() {\n pub struct Foo { pub a: i32, pub b: i32 }\n \"#,\n             r#\"\n-fn {a:42, b: ()} {}\n+fn some(, b: ()} {}\n fn items() {}\n fn here() {}\n "}, {"sha": "8c0b0abbbc54803bfb97ae7cac3ffdb538e28a31", "filename": "crates/syntax/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d86863aeb404b042a3ba1a60d5d961f392b8cb64/crates%2Fsyntax%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d86863aeb404b042a3ba1a60d5d961f392b8cb64/crates%2Fsyntax%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2FCargo.toml?ref=d86863aeb404b042a3ba1a60d5d961f392b8cb64", "patch": "@@ -17,6 +17,7 @@ rustc_lexer = { version = \"683.0.0\", package = \"rustc-ap-rustc_lexer\" }\n rustc-hash = \"1.1.0\"\n arrayvec = \"0.5.1\"\n once_cell = \"1.3.1\"\n+indexmap = \"1.4.0\"\n # This crate transitively depends on `smol_str` via `rowan`.\n # ideally, `serde` should be enabled by `rust-analyzer`, but we enable it here\n # to reduce number of compilations"}, {"sha": "f53875f28235964bd868e4a0667dc8cc33a5a68c", "filename": "crates/syntax/src/algo.rs", "status": "modified", "additions": 64, "deletions": 23, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/d86863aeb404b042a3ba1a60d5d961f392b8cb64/crates%2Fsyntax%2Fsrc%2Falgo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d86863aeb404b042a3ba1a60d5d961f392b8cb64/crates%2Fsyntax%2Fsrc%2Falgo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Falgo.rs?ref=d86863aeb404b042a3ba1a60d5d961f392b8cb64", "patch": "@@ -2,9 +2,11 @@\n \n use std::{\n     fmt,\n+    hash::BuildHasherDefault,\n     ops::{self, RangeInclusive},\n };\n \n+use indexmap::IndexMap;\n use itertools::Itertools;\n use rustc_hash::FxHashMap;\n use text_edit::TextEditBuilder;\n@@ -106,42 +108,56 @@ pub enum InsertPosition<T> {\n     After(T),\n }\n \n+type FxIndexMap<K, V> = IndexMap<K, V, BuildHasherDefault<rustc_hash::FxHasher>>;\n+\n pub struct TreeDiff {\n     replacements: FxHashMap<SyntaxElement, SyntaxElement>,\n+    deletions: Vec<SyntaxElement>,\n+    // the vec as well as the indexmap are both here to preserve order\n+    insertions: FxIndexMap<SyntaxElement, Vec<SyntaxElement>>,\n }\n \n impl TreeDiff {\n     pub fn into_text_edit(&self, builder: &mut TextEditBuilder) {\n+        for (anchor, to) in self.insertions.iter() {\n+            to.iter().for_each(|to| builder.insert(anchor.text_range().end(), to.to_string()));\n+        }\n         for (from, to) in self.replacements.iter() {\n             builder.replace(from.text_range(), to.to_string())\n         }\n+        for text_range in self.deletions.iter().map(SyntaxElement::text_range) {\n+            builder.delete(text_range);\n+        }\n     }\n \n     pub fn is_empty(&self) -> bool {\n-        self.replacements.is_empty()\n+        self.replacements.is_empty() && self.deletions.is_empty() && self.insertions.is_empty()\n     }\n }\n \n /// Finds minimal the diff, which, applied to `from`, will result in `to`.\n ///\n-/// Specifically, returns a map whose keys are descendants of `from` and values\n-/// are descendants of `to`, such that  `replace_descendants(from, map) == to`.\n+/// Specifically, returns a structure that consists of a replacements, insertions and deletions\n+/// such that applying this map on `from` will result in `to`.\n ///\n-/// A trivial solution is a singleton map `{ from: to }`, but this function\n-/// tries to find a more fine-grained diff.\n+/// This function tries to find a fine-grained diff.\n pub fn diff(from: &SyntaxNode, to: &SyntaxNode) -> TreeDiff {\n-    let mut buf = FxHashMap::default();\n+    let mut diff = TreeDiff {\n+        replacements: FxHashMap::default(),\n+        insertions: FxIndexMap::default(),\n+        deletions: Vec::new(),\n+    };\n+    let (from, to) = (from.clone().into(), to.clone().into());\n+\n     // FIXME: this is both horrible inefficient and gives larger than\n     // necessary diff. I bet there's a cool algorithm to diff trees properly.\n-    go(&mut buf, from.clone().into(), to.clone().into());\n-    return TreeDiff { replacements: buf };\n+    if !syntax_element_eq(&from, &to) {\n+        go(&mut diff, from, to);\n+    }\n+    return diff;\n \n-    fn go(\n-        buf: &mut FxHashMap<SyntaxElement, SyntaxElement>,\n-        lhs: SyntaxElement,\n-        rhs: SyntaxElement,\n-    ) {\n-        if lhs.kind() == rhs.kind()\n+    fn syntax_element_eq(lhs: &SyntaxElement, rhs: &SyntaxElement) -> bool {\n+        lhs.kind() == rhs.kind()\n             && lhs.text_range().len() == rhs.text_range().len()\n             && match (&lhs, &rhs) {\n                 (NodeOrToken::Node(lhs), NodeOrToken::Node(rhs)) => {\n@@ -150,18 +166,43 @@ pub fn diff(from: &SyntaxNode, to: &SyntaxNode) -> TreeDiff {\n                 (NodeOrToken::Token(lhs), NodeOrToken::Token(rhs)) => lhs.text() == rhs.text(),\n                 _ => false,\n             }\n-        {\n-            return;\n-        }\n-        if let (Some(lhs), Some(rhs)) = (lhs.as_node(), rhs.as_node()) {\n-            if lhs.children_with_tokens().count() == rhs.children_with_tokens().count() {\n-                for (lhs, rhs) in lhs.children_with_tokens().zip(rhs.children_with_tokens()) {\n-                    go(buf, lhs, rhs)\n-                }\n+    }\n+\n+    fn go(diff: &mut TreeDiff, lhs: SyntaxElement, rhs: SyntaxElement) {\n+        let (lhs, rhs) = match lhs.as_node().zip(rhs.as_node()) {\n+            Some((lhs, rhs)) => (lhs, rhs),\n+            _ => {\n+                diff.replacements.insert(lhs, rhs);\n                 return;\n             }\n+        };\n+\n+        let mut rhs_children = rhs.children_with_tokens();\n+        let mut lhs_children = lhs.children_with_tokens();\n+        let mut last_lhs = None;\n+        loop {\n+            let lhs_child = lhs_children.next();\n+            match (lhs_child.clone(), rhs_children.next()) {\n+                (None, None) => break,\n+                (None, Some(element)) => match last_lhs.clone() {\n+                    Some(prev) => {\n+                        diff.insertions.entry(prev).or_insert_with(Vec::new).push(element);\n+                    }\n+                    // first iteration, this means we got no anchor element to insert after\n+                    // therefor replace the parent node instead\n+                    None => {\n+                        diff.replacements.insert(lhs.clone().into(), rhs.clone().into());\n+                        break;\n+                    }\n+                },\n+                (Some(element), None) => {\n+                    diff.deletions.push(element);\n+                }\n+                (Some(ref lhs_ele), Some(ref rhs_ele)) if syntax_element_eq(lhs_ele, rhs_ele) => {}\n+                (Some(lhs_ele), Some(rhs_ele)) => go(diff, lhs_ele, rhs_ele),\n+            }\n+            last_lhs = lhs_child.or(last_lhs);\n         }\n-        buf.insert(lhs, rhs);\n     }\n }\n "}]}