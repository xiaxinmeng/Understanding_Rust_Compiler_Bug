{"sha": "6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "node_id": "C_kwDOAAsO6NoAKDZjZDZiYWQ1MWZiMzRhMGQ4OWU5N2MyNzgxNDA0MWZlNGQwODM4YjU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-28T01:05:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-28T01:05:29Z"}, "message": "Auto merge of #101692 - cjgillot:generator-lazy-witness, r=oli-obk\n\nCompute generator saved locals on MIR\n\nGenerators are currently type-checked by introducing a `witness` type variable, which is unified with a `GeneratorWitness(captured types)` whose purpose is to ensure that the auto traits correctly migrate from the captured types to the `witness` type.  This requires computing the captured types on HIR during type-checking, only to re-do it on MIR later.\n\nThis PR proposes to drop the HIR-based computation, and only keep the MIR one.  This is done in 3 steps.\n1. During type-checking, the `witness` type variable is never unified.  This allows to stall all the obligations that depend on it until the end of type-checking.  Then, the stalled obligations are marked as successful, and saved into the typeck results for later verification.\n2. At type-checking writeback, `witness` is replaced by `GeneratorWitnessMIR(def_id, substs)`.  From this point on, all trait selection involving `GeneratorWitnessMIR` will fetch the MIR-computed locals, similar to what opaque types do.  There is no lifetime to be preserved here: we consider all the lifetimes appearing in this witness type to be higher-ranked.\n3. After borrowck, the stashed obligations are verified against the actually computed types, in the `check_generator_obligations` query.  If any obligation was wrongly marked as fulfilled in step 1, it should be reported here.\n\nThere are still many issues:\n- ~I am not too happy having to filter out some locals from the checked bounds, I think this is MIR building that introduces raw pointers polluting the analysis;~ solved by a check specific to static variables.\n- the diagnostics for captured types don't show where they are used/dropped;\n- I do not attempt to support chalk.\n\ncc `@eholk` `@jyn514` for the drop-tracking work\nr? `@oli-obk` as you warned me of potential unsoundness", "tree": {"sha": "12df4507b73b7fb3515178a55f0ef54cf2583a8a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12df4507b73b7fb3515178a55f0ef54cf2583a8a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "html_url": "https://github.com/rust-lang/rust/commit/6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d4df2d30eb342af1ef136d83d70d281f34adcd7", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d4df2d30eb342af1ef136d83d70d281f34adcd7", "html_url": "https://github.com/rust-lang/rust/commit/7d4df2d30eb342af1ef136d83d70d281f34adcd7"}, {"sha": "d3d626920abf2a4c93bd50640a9d66ce9d5a9009", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3d626920abf2a4c93bd50640a9d66ce9d5a9009", "html_url": "https://github.com/rust-lang/rust/commit/d3d626920abf2a4c93bd50640a9d66ce9d5a9009"}], "stats": {"total": 6870, "additions": 6269, "deletions": 601}, "files": [{"sha": "b0e007ce0097bd4c966edc23d1ce16017a0885c6", "filename": "compiler/rustc_codegen_ssa/src/debuginfo/type_names.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -414,6 +414,7 @@ fn push_debuginfo_type_name<'tcx>(\n         | ty::Placeholder(..)\n         | ty::Alias(..)\n         | ty::Bound(..)\n+        | ty::GeneratorWitnessMIR(..)\n         | ty::GeneratorWitness(..) => {\n             bug!(\n                 \"debuginfo: Trying to create type name for \\"}, {"sha": "c52886b77e64bc77388757aa9c520a6b96ea43e4", "filename": "compiler/rustc_const_eval/src/const_eval/valtrees.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fvaltrees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fvaltrees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fvaltrees.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -151,7 +151,7 @@ pub(crate) fn const_to_valtree_inner<'tcx>(\n         // FIXME(oli-obk): we can probably encode closures just like structs\n         | ty::Closure(..)\n         | ty::Generator(..)\n-        | ty::GeneratorWitness(..) => Err(ValTreeCreationError::NonSupportedType),\n+        | ty::GeneratorWitness(..) |ty::GeneratorWitnessMIR(..)=> Err(ValTreeCreationError::NonSupportedType),\n     }\n }\n \n@@ -314,6 +314,7 @@ pub fn valtree_to_const_value<'tcx>(\n         | ty::Closure(..)\n         | ty::Generator(..)\n         | ty::GeneratorWitness(..)\n+        | ty::GeneratorWitnessMIR(..)\n         | ty::FnPtr(_)\n         | ty::RawPtr(_)\n         | ty::Str"}, {"sha": "907f014dfb5180f90b48e2a2403c9d6b38dd699e", "filename": "compiler/rustc_const_eval/src/interpret/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -101,6 +101,7 @@ pub(crate) fn eval_nullary_intrinsic<'tcx>(\n             | ty::Closure(_, _)\n             | ty::Generator(_, _, _)\n             | ty::GeneratorWitness(_)\n+            | ty::GeneratorWitnessMIR(_, _)\n             | ty::Never\n             | ty::Tuple(_)\n             | ty::Error(_) => ConstValue::from_machine_usize(0u64, &tcx),"}, {"sha": "aa539516d5e503ee328cb9734b7b55ff034c4d74", "filename": "compiler/rustc_const_eval/src/interpret/validity.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -602,6 +602,7 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n             | ty::Bound(..)\n             | ty::Param(..)\n             | ty::Alias(..)\n+            | ty::GeneratorWitnessMIR(..)\n             | ty::GeneratorWitness(..) => bug!(\"Encountered invalid type {:?}\", ty),\n         }\n     }"}, {"sha": "fab92f6f6f3ba2c2d83f4211e45a95ab6280b6f9", "filename": "compiler/rustc_const_eval/src/transform/validate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -372,12 +372,12 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n                                 return;\n                             };\n \n-                            let Some(&f_ty) = layout.field_tys.get(local) else {\n+                            let Some(f_ty) = layout.field_tys.get(local) else {\n                                 self.fail(location, format!(\"Out of bounds local {:?} for {:?}\", local, parent_ty));\n                                 return;\n                             };\n \n-                            f_ty\n+                            f_ty.ty\n                         } else {\n                             let Some(f_ty) = substs.as_generator().prefix_tys().nth(f.index()) else {\n                                 fail_out_of_bounds(self, location);"}, {"sha": "4e80a28518668ef10f9f77971f281fb069abd557", "filename": "compiler/rustc_const_eval/src/util/type_name.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Ftype_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Ftype_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Ftype_name.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -64,6 +64,7 @@ impl<'tcx> Printer<'tcx> for AbsolutePathPrinter<'tcx> {\n             ty::Foreign(def_id) => self.print_def_path(def_id, &[]),\n \n             ty::GeneratorWitness(_) => bug!(\"type_name: unexpected `GeneratorWitness`\"),\n+            ty::GeneratorWitnessMIR(..) => bug!(\"type_name: unexpected `GeneratorWitnessMIR`\"),\n         }\n     }\n "}, {"sha": "b688922a31130681a65d537d852638d0b82c4699", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -2106,8 +2106,8 @@ pub enum LocalSource {\n }\n \n /// Hints at the original code for a `match _ { .. }`.\n-#[derive(Copy, Clone, PartialEq, Eq, Encodable, Hash, Debug)]\n-#[derive(HashStable_Generic)]\n+#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]\n+#[derive(HashStable_Generic, Encodable, Decodable)]\n pub enum MatchSource {\n     /// A `match _ { .. }`.\n     Normal,"}, {"sha": "c89db538aa6d395e642a3e5a1bc983ae3b8a4f3c", "filename": "compiler/rustc_hir_analysis/src/check/check.rs", "status": "modified", "additions": 35, "deletions": 3, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -14,7 +14,7 @@ use rustc_hir::{ItemKind, Node, PathSegment};\n use rustc_infer::infer::opaque_types::ConstrainOpaqueTypeRegionVisitor;\n use rustc_infer::infer::outlives::env::OutlivesEnvironment;\n use rustc_infer::infer::{DefiningAnchor, RegionVariableOrigin, TyCtxtInferExt};\n-use rustc_infer::traits::Obligation;\n+use rustc_infer::traits::{Obligation, TraitEngineExt as _};\n use rustc_lint::builtin::REPR_TRANSPARENT_EXTERNAL_PRIVATE_FIELDS;\n use rustc_middle::hir::nested_filter;\n use rustc_middle::middle::stability::EvalResult;\n@@ -28,7 +28,7 @@ use rustc_span::{self, Span};\n use rustc_target::spec::abi::Abi;\n use rustc_trait_selection::traits::error_reporting::on_unimplemented::OnUnimplementedDirective;\n use rustc_trait_selection::traits::error_reporting::TypeErrCtxtExt as _;\n-use rustc_trait_selection::traits::{self, ObligationCtxt};\n+use rustc_trait_selection::traits::{self, ObligationCtxt, TraitEngine, TraitEngineExt as _};\n \n use std::ops::ControlFlow;\n \n@@ -1460,7 +1460,8 @@ fn opaque_type_cycle_error(\n                 for def_id in visitor.opaques {\n                     let ty_span = tcx.def_span(def_id);\n                     if !seen.contains(&ty_span) {\n-                        err.span_label(ty_span, &format!(\"returning this opaque type `{ty}`\"));\n+                        let descr = if ty.is_impl_trait() { \"opaque \" } else { \"\" };\n+                        err.span_label(ty_span, &format!(\"returning this {descr}type `{ty}`\"));\n                         seen.insert(ty_span);\n                     }\n                     err.span_label(sp, &format!(\"returning here with type `{ty}`\"));\n@@ -1507,3 +1508,34 @@ fn opaque_type_cycle_error(\n     }\n     err.emit()\n }\n+\n+pub(super) fn check_generator_obligations(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n+    debug_assert!(tcx.sess.opts.unstable_opts.drop_tracking_mir);\n+    debug_assert!(matches!(tcx.def_kind(def_id), DefKind::Generator));\n+\n+    let typeck = tcx.typeck(def_id);\n+    let param_env = tcx.param_env(def_id);\n+\n+    let generator_interior_predicates = &typeck.generator_interior_predicates[&def_id];\n+    debug!(?generator_interior_predicates);\n+\n+    let infcx = tcx\n+        .infer_ctxt()\n+        // typeck writeback gives us predicates with their regions erased.\n+        // As borrowck already has checked lifetimes, we do not need to do it again.\n+        .ignoring_regions()\n+        // Bind opaque types to `def_id` as they should have been checked by borrowck.\n+        .with_opaque_type_inference(DefiningAnchor::Bind(def_id))\n+        .build();\n+\n+    let mut fulfillment_cx = <dyn TraitEngine<'_>>::new(infcx.tcx);\n+    for (predicate, cause) in generator_interior_predicates {\n+        let obligation = Obligation::new(tcx, cause.clone(), param_env, *predicate);\n+        fulfillment_cx.register_predicate_obligation(&infcx, obligation);\n+    }\n+    let errors = fulfillment_cx.select_all_or_error(&infcx);\n+    debug!(?errors);\n+    if !errors.is_empty() {\n+        infcx.err_ctxt().report_fulfillment_errors(&errors, None);\n+    }\n+}"}, {"sha": "bec693439a46c1d26a3ec9ba2753d71d9f75fe64", "filename": "compiler/rustc_hir_analysis/src/check/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fmod.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -105,6 +105,7 @@ pub fn provide(providers: &mut Providers) {\n         region_scope_tree,\n         collect_return_position_impl_trait_in_trait_tys,\n         compare_impl_const: compare_impl_item::compare_impl_const_raw,\n+        check_generator_obligations: check::check_generator_obligations,\n         ..*providers\n     };\n }"}, {"sha": "c1b0237b2d1f13813c9ccd195d60441e532b4ea2", "filename": "compiler/rustc_hir_analysis/src/coherence/inherent_impls.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Finherent_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Finherent_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Finherent_impls.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -240,6 +240,7 @@ impl<'tcx> InherentCollect<'tcx> {\n             | ty::Closure(..)\n             | ty::Generator(..)\n             | ty::GeneratorWitness(..)\n+            | ty::GeneratorWitnessMIR(..)\n             | ty::Bound(..)\n             | ty::Placeholder(_)\n             | ty::Infer(_) => {"}, {"sha": "a1872822d365a6d9a34ddb8defbabbc4c93cce22", "filename": "compiler/rustc_hir_analysis/src/variance/constraints.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fconstraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fconstraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fconstraints.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -295,12 +295,12 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n                 // types, where we use Error as the Self type\n             }\n \n-            ty::Placeholder(..) | ty::GeneratorWitness(..) | ty::Bound(..) | ty::Infer(..) => {\n-                bug!(\n-                    \"unexpected type encountered in \\\n-                      variance inference: {}\",\n-                    ty\n-                );\n+            ty::Placeholder(..)\n+            | ty::GeneratorWitness(..)\n+            | ty::GeneratorWitnessMIR(..)\n+            | ty::Bound(..)\n+            | ty::Infer(..) => {\n+                bug!(\"unexpected type encountered in variance inference: {}\", ty);\n             }\n         }\n     }"}, {"sha": "8e21c084841d0d1707edea19be3f534c4fb7fd36", "filename": "compiler/rustc_hir_typeck/src/cast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_hir_typeck%2Fsrc%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_hir_typeck%2Fsrc%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcast.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -130,6 +130,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             | ty::Float(_)\n             | ty::Array(..)\n             | ty::GeneratorWitness(..)\n+            | ty::GeneratorWitnessMIR(..)\n             | ty::RawPtr(_)\n             | ty::Ref(..)\n             | ty::FnDef(..)"}, {"sha": "17f736475dd37e0d7e4d5d3599ae4d0a8e52888f", "filename": "compiler/rustc_hir_typeck/src/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_hir_typeck%2Fsrc%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_hir_typeck%2Fsrc%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcheck.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -130,7 +130,7 @@ pub(super) fn check_fn<'a, 'tcx>(\n     let gen_ty = if let (Some(_), Some(gen_kind)) = (can_be_generator, body.generator_kind) {\n         let interior = fcx\n             .next_ty_var(TypeVariableOrigin { kind: TypeVariableOriginKind::MiscVariable, span });\n-        fcx.deferred_generator_interiors.borrow_mut().push((body.id(), interior, gen_kind));\n+        fcx.deferred_generator_interiors.borrow_mut().push((fn_id, body.id(), interior, gen_kind));\n \n         let (resume_ty, yield_ty) = fcx.resume_yield_tys.unwrap();\n         Some(GeneratorTypes {"}, {"sha": "126355c5bfa27bc105b91be13138029ca4cc7ffb", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/_impl.rs", "status": "modified", "additions": 61, "deletions": 4, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -517,16 +517,73 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     }\n \n     pub(in super::super) fn resolve_generator_interiors(&self, def_id: DefId) {\n+        if self.tcx.sess.opts.unstable_opts.drop_tracking_mir {\n+            self.save_generator_interior_predicates(def_id);\n+            return;\n+        }\n+\n+        self.select_obligations_where_possible(|_| {});\n+\n         let mut generators = self.deferred_generator_interiors.borrow_mut();\n-        for (body_id, interior, kind) in generators.drain(..) {\n-            self.select_obligations_where_possible(|_| {});\n+        for (_, body_id, interior, kind) in generators.drain(..) {\n             crate::generator_interior::resolve_interior(self, def_id, body_id, interior, kind);\n+            self.select_obligations_where_possible(|_| {});\n+        }\n+    }\n+\n+    /// Unify the inference variables corresponding to generator witnesses, and save all the\n+    /// predicates that were stalled on those inference variables.\n+    ///\n+    /// This process allows to conservatively save all predicates that do depend on the generator\n+    /// interior types, for later processing by `check_generator_obligations`.\n+    ///\n+    /// We must not attempt to select obligations after this method has run, or risk query cycle\n+    /// ICE.\n+    #[instrument(level = \"debug\", skip(self))]\n+    fn save_generator_interior_predicates(&self, def_id: DefId) {\n+        // Try selecting all obligations that are not blocked on inference variables.\n+        // Once we start unifying generator witnesses, trying to select obligations on them will\n+        // trigger query cycle ICEs, as doing so requires MIR.\n+        self.select_obligations_where_possible(|_| {});\n+\n+        let generators = std::mem::take(&mut *self.deferred_generator_interiors.borrow_mut());\n+        debug!(?generators);\n+\n+        for &(expr_hir_id, body_id, interior, _) in generators.iter() {\n+            let expr_def_id = self.tcx.hir().local_def_id(expr_hir_id);\n+            debug!(?expr_def_id);\n+\n+            // Create the `GeneratorWitness` type that we will unify with `interior`.\n+            let substs = ty::InternalSubsts::identity_for_item(\n+                self.tcx,\n+                self.tcx.typeck_root_def_id(expr_def_id.to_def_id()),\n+            );\n+            let witness = self.tcx.mk_generator_witness_mir(expr_def_id.to_def_id(), substs);\n+\n+            // Unify `interior` with `witness` and collect all the resulting obligations.\n+            let span = self.tcx.hir().body(body_id).value.span;\n+            let ok = self\n+                .at(&self.misc(span), self.param_env)\n+                .eq(interior, witness)\n+                .expect(\"Failed to unify generator interior type\");\n+            let mut obligations = ok.obligations;\n+\n+            // Also collect the obligations that were unstalled by this unification.\n+            obligations\n+                .extend(self.fulfillment_cx.borrow_mut().drain_unstalled_obligations(&self.infcx));\n+\n+            let obligations = obligations.into_iter().map(|o| (o.predicate, o.cause)).collect();\n+            debug!(?obligations);\n+            self.typeck_results\n+                .borrow_mut()\n+                .generator_interior_predicates\n+                .insert(expr_def_id, obligations);\n         }\n     }\n \n     #[instrument(skip(self), level = \"debug\")]\n-    pub(in super::super) fn select_all_obligations_or_error(&self) {\n-        let mut errors = self.fulfillment_cx.borrow_mut().select_all_or_error(&self);\n+    pub(in super::super) fn report_ambiguity_errors(&self) {\n+        let mut errors = self.fulfillment_cx.borrow_mut().collect_remaining_errors();\n \n         if !errors.is_empty() {\n             self.adjust_fulfillment_errors_for_expr_obligation(&mut errors);"}, {"sha": "c6ce2f450d915111ac72ef90bdbd3c1a4a002f7d", "filename": "compiler/rustc_hir_typeck/src/inherited.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_hir_typeck%2Fsrc%2Finherited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_hir_typeck%2Fsrc%2Finherited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Finherited.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -56,7 +56,7 @@ pub struct Inherited<'tcx> {\n     pub(super) deferred_asm_checks: RefCell<Vec<(&'tcx hir::InlineAsm<'tcx>, hir::HirId)>>,\n \n     pub(super) deferred_generator_interiors:\n-        RefCell<Vec<(hir::BodyId, Ty<'tcx>, hir::GeneratorKind)>>,\n+        RefCell<Vec<(hir::HirId, hir::BodyId, Ty<'tcx>, hir::GeneratorKind)>>,\n \n     pub(super) body_id: Option<hir::BodyId>,\n "}, {"sha": "323bacf70ab9ca911b5f34c5619eb6c41b0828d6", "filename": "compiler/rustc_hir_typeck/src/lib.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -294,14 +294,24 @@ fn typeck_with_fallback<'tcx>(\n         // Before the generator analysis, temporary scopes shall be marked to provide more\n         // precise information on types to be captured.\n         fcx.resolve_rvalue_scopes(def_id.to_def_id());\n-        fcx.resolve_generator_interiors(def_id.to_def_id());\n \n         for (ty, span, code) in fcx.deferred_sized_obligations.borrow_mut().drain(..) {\n             let ty = fcx.normalize(span, ty);\n             fcx.require_type_is_sized(ty, span, code);\n         }\n \n-        fcx.select_all_obligations_or_error();\n+        fcx.select_obligations_where_possible(|_| {});\n+\n+        debug!(pending_obligations = ?fcx.fulfillment_cx.borrow().pending_obligations());\n+\n+        // This must be the last thing before `report_ambiguity_errors`.\n+        fcx.resolve_generator_interiors(def_id.to_def_id());\n+\n+        debug!(pending_obligations = ?fcx.fulfillment_cx.borrow().pending_obligations());\n+\n+        if let None = fcx.infcx.tainted_by_errors() {\n+            fcx.report_ambiguity_errors();\n+        }\n \n         if let None = fcx.infcx.tainted_by_errors() {\n             fcx.check_transmutes();"}, {"sha": "20d6ce5ed516d684440630f7140a58475f0e3e95", "filename": "compiler/rustc_hir_typeck/src/writeback.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -545,6 +545,10 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n         assert_eq!(fcx_typeck_results.hir_owner, self.typeck_results.hir_owner);\n         self.typeck_results.generator_interior_types =\n             fcx_typeck_results.generator_interior_types.clone();\n+        for (&expr_def_id, predicates) in fcx_typeck_results.generator_interior_predicates.iter() {\n+            let predicates = self.resolve(predicates.clone(), &self.fcx.tcx.def_span(expr_def_id));\n+            self.typeck_results.generator_interior_predicates.insert(expr_def_id, predicates);\n+        }\n     }\n \n     #[instrument(skip(self), level = \"debug\")]"}, {"sha": "87c6dfad5fa2bd01b79578277f8f8c329af1f567", "filename": "compiler/rustc_infer/src/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -435,6 +435,7 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for Canonicalizer<'cx, 'tcx> {\n             ty::Closure(..)\n             | ty::Generator(..)\n             | ty::GeneratorWitness(..)\n+            | ty::GeneratorWitnessMIR(..)\n             | ty::Bool\n             | ty::Char\n             | ty::Int(..)"}, {"sha": "9174bd524bee6d50b74246c8ea0e8df156907041", "filename": "compiler/rustc_infer/src/infer/canonical/query_response.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -17,7 +17,7 @@ use crate::infer::region_constraints::{Constraint, RegionConstraintData};\n use crate::infer::{InferCtxt, InferOk, InferResult, NllRegionVariableOrigin};\n use crate::traits::query::{Fallible, NoSolution};\n use crate::traits::{Obligation, ObligationCause, PredicateObligation};\n-use crate::traits::{PredicateObligations, TraitEngine};\n+use crate::traits::{PredicateObligations, TraitEngine, TraitEngineExt};\n use rustc_data_structures::captures::Captures;\n use rustc_index::vec::Idx;\n use rustc_index::vec::IndexVec;"}, {"sha": "83d71edc2abd927a640819ce5a71e28b4b8409a4", "filename": "compiler/rustc_infer/src/infer/freshen.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffreshen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffreshen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffreshen.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -209,6 +209,7 @@ impl<'a, 'tcx> TypeFolder<'tcx> for TypeFreshener<'a, 'tcx> {\n             | ty::Foreign(..)\n             | ty::Param(..)\n             | ty::Closure(..)\n+            | ty::GeneratorWitnessMIR(..)\n             | ty::GeneratorWitness(..) => t.super_fold_with(self),\n \n             ty::Placeholder(..) | ty::Bound(..) => bug!(\"unexpected type {:?}\", t),"}, {"sha": "e3d9566917125546c49c5383572fe27625861895", "filename": "compiler/rustc_infer/src/infer/outlives/components.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fcomponents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fcomponents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fcomponents.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -112,7 +112,7 @@ fn compute_components<'tcx>(\n             }\n \n             // All regions are bound inside a witness\n-            ty::GeneratorWitness(..) => (),\n+            ty::GeneratorWitness(..) | ty::GeneratorWitnessMIR(..) => (),\n \n             // OutlivesTypeParameterEnv -- the actual checking that `X:'a`\n             // is implied by the environment is done in regionck."}, {"sha": "f75344f20b6d98e842f622dfd3e39d23e8e22385", "filename": "compiler/rustc_infer/src/traits/engine.rs", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fengine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fengine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fengine.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -36,11 +36,19 @@ pub trait TraitEngine<'tcx>: 'tcx {\n         obligation: PredicateObligation<'tcx>,\n     );\n \n-    fn select_all_or_error(&mut self, infcx: &InferCtxt<'tcx>) -> Vec<FulfillmentError<'tcx>>;\n-\n     fn select_where_possible(&mut self, infcx: &InferCtxt<'tcx>) -> Vec<FulfillmentError<'tcx>>;\n \n+    fn collect_remaining_errors(&mut self) -> Vec<FulfillmentError<'tcx>>;\n+\n     fn pending_obligations(&self) -> Vec<PredicateObligation<'tcx>>;\n+\n+    /// Among all pending obligations, collect those are stalled on a inference variable which has\n+    /// changed since the last call to `select_where_possible`. Those obligations are marked as\n+    /// successful and returned.\n+    fn drain_unstalled_obligations(\n+        &mut self,\n+        infcx: &InferCtxt<'tcx>,\n+    ) -> Vec<PredicateObligation<'tcx>>;\n }\n \n pub trait TraitEngineExt<'tcx> {\n@@ -49,6 +57,8 @@ pub trait TraitEngineExt<'tcx> {\n         infcx: &InferCtxt<'tcx>,\n         obligations: impl IntoIterator<Item = PredicateObligation<'tcx>>,\n     );\n+\n+    fn select_all_or_error(&mut self, infcx: &InferCtxt<'tcx>) -> Vec<FulfillmentError<'tcx>>;\n }\n \n impl<'tcx, T: ?Sized + TraitEngine<'tcx>> TraitEngineExt<'tcx> for T {\n@@ -61,4 +71,13 @@ impl<'tcx, T: ?Sized + TraitEngine<'tcx>> TraitEngineExt<'tcx> for T {\n             self.register_predicate_obligation(infcx, obligation);\n         }\n     }\n+\n+    fn select_all_or_error(&mut self, infcx: &InferCtxt<'tcx>) -> Vec<FulfillmentError<'tcx>> {\n+        let errors = self.select_where_possible(infcx);\n+        if !errors.is_empty() {\n+            return errors;\n+        }\n+\n+        self.collect_remaining_errors()\n+    }\n }"}, {"sha": "60b60edd2c8119a9a2cfb1d2377356a8e3fa0275", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -893,6 +893,15 @@ fn analysis(tcx: TyCtxt<'_>, (): ()) -> Result<()> {\n         }\n     });\n \n+    if tcx.sess.opts.unstable_opts.drop_tracking_mir {\n+        tcx.hir().par_body_owners(|def_id| {\n+            if let rustc_hir::def::DefKind::Generator = tcx.def_kind(def_id) {\n+                tcx.ensure().mir_generator_witnesses(def_id);\n+                tcx.ensure().check_generator_obligations(def_id);\n+            }\n+        });\n+    }\n+\n     sess.time(\"layout_testing\", || layout_test::test_layout(tcx));\n \n     // Avoid overwhelming user with errors if borrow checking failed."}, {"sha": "c32aeaa87223617dffee4ffbf8c7177fc48bddc4", "filename": "compiler/rustc_lint/src/types.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -1107,6 +1107,7 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n             | ty::Closure(..)\n             | ty::Generator(..)\n             | ty::GeneratorWitness(..)\n+            | ty::GeneratorWitnessMIR(..)\n             | ty::Placeholder(..)\n             | ty::FnDef(..) => bug!(\"unexpected type in foreign function: {:?}\", ty),\n         }"}, {"sha": "9b1401f4a44dfdf922120faf9bd9f165c902d3c9", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -202,6 +202,7 @@ provide! { tcx, def_id, other, cdata,\n     thir_abstract_const => { table }\n     optimized_mir => { table }\n     mir_for_ctfe => { table }\n+    mir_generator_witnesses => { table }\n     promoted_mir => { table }\n     def_span => { table }\n     def_ident_span => { table }"}, {"sha": "a72089338ee32b1aab683bd005aa625ca5951b39", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -1414,6 +1414,10 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             debug!(\"EntryBuilder::encode_mir({:?})\", def_id);\n             if encode_opt {\n                 record!(self.tables.optimized_mir[def_id.to_def_id()] <- tcx.optimized_mir(def_id));\n+\n+                if let DefKind::Generator = self.tcx.def_kind(def_id) {\n+                    record!(self.tables.mir_generator_witnesses[def_id.to_def_id()] <- tcx.mir_generator_witnesses(def_id));\n+                }\n             }\n             if encode_const {\n                 record!(self.tables.mir_for_ctfe[def_id.to_def_id()] <- tcx.mir_for_ctfe(def_id));"}, {"sha": "37af9e64e9a3da5002ee527d5b6f655d05366506", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -376,6 +376,7 @@ define_tables! {\n     object_lifetime_default: Table<DefIndex, LazyValue<ObjectLifetimeDefault>>,\n     optimized_mir: Table<DefIndex, LazyValue<mir::Body<'static>>>,\n     mir_for_ctfe: Table<DefIndex, LazyValue<mir::Body<'static>>>,\n+    mir_generator_witnesses: Table<DefIndex, LazyValue<mir::GeneratorLayout<'static>>>,\n     promoted_mir: Table<DefIndex, LazyValue<IndexVec<mir::Promoted, mir::Body<'static>>>>,\n     // FIXME(compiler-errors): Why isn't this a LazyArray?\n     thir_abstract_const: Table<DefIndex, LazyValue<ty::Const<'static>>>,"}, {"sha": "63b8dd055bd5b413f4c02d3e6f3d91449dcd4230", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -902,6 +902,8 @@ pub enum LocalInfo<'tcx> {\n     AggregateTemp,\n     /// A temporary created during the pass `Derefer` to avoid it's retagging\n     DerefTemp,\n+    /// A temporary created for borrow checking.\n+    FakeBorrow,\n }\n \n impl<'tcx> LocalDecl<'tcx> {"}, {"sha": "6155f2bb56ce93bdb0f4c72fa6189e53359254f7", "filename": "compiler/rustc_middle/src/mir/query.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -135,11 +135,20 @@ rustc_index::newtype_index! {\n     pub struct GeneratorSavedLocal {}\n }\n \n+#[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable, TypeFoldable, TypeVisitable)]\n+pub struct GeneratorSavedTy<'tcx> {\n+    pub ty: Ty<'tcx>,\n+    /// Source info corresponding to the local in the original MIR body.\n+    pub source_info: SourceInfo,\n+    /// Whether the local should be ignored for trait bound computations.\n+    pub ignore_for_traits: bool,\n+}\n+\n /// The layout of generator state.\n #[derive(Clone, TyEncodable, TyDecodable, HashStable, TypeFoldable, TypeVisitable)]\n pub struct GeneratorLayout<'tcx> {\n     /// The type of every local stored inside the generator.\n-    pub field_tys: IndexVec<GeneratorSavedLocal, Ty<'tcx>>,\n+    pub field_tys: IndexVec<GeneratorSavedLocal, GeneratorSavedTy<'tcx>>,\n \n     /// Which of the above fields are in each variant. Note that one field may\n     /// be stored in multiple variants."}, {"sha": "e4df309e0089bb59eb4513264aeae2654ce8cecb", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -471,6 +471,17 @@ rustc_queries! {\n         }\n     }\n \n+    query mir_generator_witnesses(key: DefId) -> mir::GeneratorLayout<'tcx> {\n+        arena_cache\n+        desc { |tcx| \"generator witness types for `{}`\", tcx.def_path_str(key) }\n+        cache_on_disk_if { key.is_local() }\n+        separate_provide_extern\n+    }\n+\n+    query check_generator_obligations(key: LocalDefId) {\n+        desc { |tcx| \"verify auto trait bounds for generator interior type `{}`\", tcx.def_path_str(key.to_def_id()) }\n+    }\n+\n     /// MIR after our optimization passes have run. This is MIR that is ready\n     /// for codegen. This is also the only query that can fetch non-local MIR, at present.\n     query optimized_mir(key: DefId) -> &'tcx mir::Body<'tcx> {"}, {"sha": "cf3dce48064923a0b582c25ca028827c673eecdf", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -37,7 +37,7 @@ pub use self::chalk::{ChalkEnvironmentAndGoal, RustInterner as ChalkRustInterner\n \n /// Depending on the stage of compilation, we want projection to be\n /// more or less conservative.\n-#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, HashStable)]\n+#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, HashStable, Encodable, Decodable)]\n pub enum Reveal {\n     /// At type-checking time, we refuse to project any associated\n     /// type that is marked `default`. Non-`default` (\"final\") types\n@@ -90,7 +90,8 @@ pub enum Reveal {\n ///\n /// We do not want to intern this as there are a lot of obligation causes which\n /// only live for a short period of time.\n-#[derive(Clone, Debug, PartialEq, Eq, Lift)]\n+#[derive(Clone, Debug, PartialEq, Eq, Lift, HashStable, TyEncodable, TyDecodable)]\n+#[derive(TypeVisitable, TypeFoldable)]\n pub struct ObligationCause<'tcx> {\n     pub span: Span,\n \n@@ -197,14 +198,16 @@ impl<'tcx> ObligationCause<'tcx> {\n     }\n }\n \n-#[derive(Clone, Debug, PartialEq, Eq, Hash, Lift)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, Lift, HashStable, TyEncodable, TyDecodable)]\n+#[derive(TypeVisitable, TypeFoldable)]\n pub struct UnifyReceiverContext<'tcx> {\n     pub assoc_item: ty::AssocItem,\n     pub param_env: ty::ParamEnv<'tcx>,\n     pub substs: SubstsRef<'tcx>,\n }\n \n-#[derive(Clone, PartialEq, Eq, Hash, Lift, Default)]\n+#[derive(Clone, PartialEq, Eq, Hash, Lift, Default, HashStable)]\n+#[derive(TypeVisitable, TypeFoldable, TyEncodable, TyDecodable)]\n pub struct InternedObligationCauseCode<'tcx> {\n     /// `None` for `ObligationCauseCode::MiscObligation` (a common case, occurs ~60% of\n     /// the time). `Some` otherwise.\n@@ -239,7 +242,8 @@ impl<'tcx> std::ops::Deref for InternedObligationCauseCode<'tcx> {\n     }\n }\n \n-#[derive(Clone, Debug, PartialEq, Eq, Hash, Lift)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, Lift, HashStable, TyEncodable, TyDecodable)]\n+#[derive(TypeVisitable, TypeFoldable)]\n pub enum ObligationCauseCode<'tcx> {\n     /// Not well classified or should be obvious from the span.\n     MiscObligation,\n@@ -447,7 +451,8 @@ pub enum ObligationCauseCode<'tcx> {\n /// This information is used to obtain an `hir::Ty`, which\n /// we can walk in order to obtain precise spans for any\n /// 'nested' types (e.g. `Foo` in `Option<Foo>`).\n-#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, HashStable)]\n+#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, HashStable, Encodable, Decodable)]\n+#[derive(TypeVisitable, TypeFoldable)]\n pub enum WellFormedLoc {\n     /// Use the type of the provided definition.\n     Ty(LocalDefId),\n@@ -464,7 +469,8 @@ pub enum WellFormedLoc {\n     },\n }\n \n-#[derive(Clone, Debug, PartialEq, Eq, Hash, Lift)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, Lift, HashStable, TyEncodable, TyDecodable)]\n+#[derive(TypeVisitable, TypeFoldable)]\n pub struct ImplDerivedObligationCause<'tcx> {\n     pub derived: DerivedObligationCause<'tcx>,\n     pub impl_def_id: DefId,\n@@ -518,7 +524,8 @@ impl<'tcx> ty::Lift<'tcx> for StatementAsExpression {\n     }\n }\n \n-#[derive(Clone, Debug, PartialEq, Eq, Hash, Lift)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, Lift, HashStable, TyEncodable, TyDecodable)]\n+#[derive(TypeVisitable, TypeFoldable)]\n pub struct MatchExpressionArmCause<'tcx> {\n     pub arm_block_id: Option<hir::HirId>,\n     pub arm_ty: Ty<'tcx>,\n@@ -534,7 +541,7 @@ pub struct MatchExpressionArmCause<'tcx> {\n }\n \n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n-#[derive(Lift, TypeFoldable, TypeVisitable)]\n+#[derive(Lift, TypeFoldable, TypeVisitable, HashStable, TyEncodable, TyDecodable)]\n pub struct IfExpressionCause<'tcx> {\n     pub then_id: hir::HirId,\n     pub else_id: hir::HirId,\n@@ -544,7 +551,8 @@ pub struct IfExpressionCause<'tcx> {\n     pub opt_suggest_box_span: Option<Span>,\n }\n \n-#[derive(Clone, Debug, PartialEq, Eq, Hash, Lift)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, Lift, HashStable, TyEncodable, TyDecodable)]\n+#[derive(TypeVisitable, TypeFoldable)]\n pub struct DerivedObligationCause<'tcx> {\n     /// The trait predicate of the parent obligation that led to the\n     /// current obligation. Note that only trait obligations lead to"}, {"sha": "099a784511827b2ffe69250ccf2155b7200f4765", "filename": "compiler/rustc_middle/src/ty/adt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadt.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -188,7 +188,7 @@ impl<'tcx> AdtDef<'tcx> {\n     }\n }\n \n-#[derive(Copy, Clone, Debug, Eq, PartialEq, Hash, TyEncodable, TyDecodable)]\n+#[derive(Copy, Clone, Debug, Eq, PartialEq, Hash, HashStable, TyEncodable, TyDecodable)]\n pub enum AdtKind {\n     Struct,\n     Union,"}, {"sha": "b9a1e23879cca7f9b407633698f06c8717f74401", "filename": "compiler/rustc_middle/src/ty/codec.rs", "status": "modified", "additions": 31, "deletions": 2, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -157,6 +157,14 @@ impl<'tcx, E: TyEncoder<I = TyCtxt<'tcx>>> Encodable<E> for AllocId {\n     }\n }\n \n+impl<'tcx, E: TyEncoder<I = TyCtxt<'tcx>>> Encodable<E> for ty::ParamEnv<'tcx> {\n+    fn encode(&self, e: &mut E) {\n+        self.caller_bounds().encode(e);\n+        self.reveal().encode(e);\n+        self.constness().encode(e);\n+    }\n+}\n+\n #[inline]\n fn decode_arena_allocable<\n     'tcx,\n@@ -280,8 +288,17 @@ impl<'tcx, D: TyDecoder<I = TyCtxt<'tcx>>> Decodable<D> for ty::SymbolName<'tcx>\n     }\n }\n \n+impl<'tcx, D: TyDecoder<I = TyCtxt<'tcx>>> Decodable<D> for ty::ParamEnv<'tcx> {\n+    fn decode(d: &mut D) -> Self {\n+        let caller_bounds = Decodable::decode(d);\n+        let reveal = Decodable::decode(d);\n+        let constness = Decodable::decode(d);\n+        ty::ParamEnv::new(caller_bounds, reveal, constness)\n+    }\n+}\n+\n macro_rules! impl_decodable_via_ref {\n-    ($($t:ty),+) => {\n+    ($($t:ty,)+) => {\n         $(impl<'tcx, D: TyDecoder<I = TyCtxt<'tcx>>> Decodable<D> for $t {\n             fn decode(decoder: &mut D) -> Self {\n                 RefDecodable::decode(decoder)\n@@ -373,6 +390,15 @@ impl<'tcx, D: TyDecoder<I = TyCtxt<'tcx>>> RefDecodable<'tcx, D> for ty::List<ty\n     }\n }\n \n+impl<'tcx, D: TyDecoder<I = TyCtxt<'tcx>>> RefDecodable<'tcx, D> for ty::List<ty::Predicate<'tcx>> {\n+    fn decode(decoder: &mut D) -> &'tcx Self {\n+        let len = decoder.read_usize();\n+        let predicates: Vec<_> =\n+            (0..len).map::<ty::Predicate<'tcx>, _>(|_| Decodable::decode(decoder)).collect();\n+        decoder.interner().intern_predicates(&predicates)\n+    }\n+}\n+\n impl_decodable_via_ref! {\n     &'tcx ty::TypeckResults<'tcx>,\n     &'tcx ty::List<Ty<'tcx>>,\n@@ -382,7 +408,8 @@ impl_decodable_via_ref! {\n     &'tcx mir::UnsafetyCheckResult,\n     &'tcx mir::BorrowCheckResult<'tcx>,\n     &'tcx mir::coverage::CodeRegion,\n-    &'tcx ty::List<ty::BoundVariableKind>\n+    &'tcx ty::List<ty::BoundVariableKind>,\n+    &'tcx ty::List<ty::Predicate<'tcx>>,\n }\n \n #[macro_export]\n@@ -519,6 +546,8 @@ macro_rules! impl_binder_encode_decode {\n impl_binder_encode_decode! {\n     &'tcx ty::List<Ty<'tcx>>,\n     ty::FnSig<'tcx>,\n+    ty::Predicate<'tcx>,\n+    ty::TraitPredicate<'tcx>,\n     ty::ExistentialPredicate<'tcx>,\n     ty::TraitRef<'tcx>,\n     Vec<ty::GeneratorInteriorTypeCause<'tcx>>,"}, {"sha": "c680eeb1fdaf088ccb4888d9d165e0fe02033561", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -1306,6 +1306,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                     Placeholder,\n                     Generator,\n                     GeneratorWitness,\n+                    GeneratorWitnessMIR,\n                     Dynamic,\n                     Closure,\n                     Tuple,\n@@ -1815,6 +1816,11 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.mk_mut_ref(self.lifetimes.re_erased, context_ty)\n     }\n \n+    #[inline]\n+    pub fn mk_generator_witness_mir(self, id: DefId, substs: SubstsRef<'tcx>) -> Ty<'tcx> {\n+        self.mk_ty(GeneratorWitnessMIR(id, substs))\n+    }\n+\n     #[inline]\n     pub fn mk_ty_var(self, v: TyVid) -> Ty<'tcx> {\n         self.mk_ty_infer(TyVar(v))"}, {"sha": "d83fc95ac4eeb04995110044354443608befb283", "filename": "compiler/rustc_middle/src/ty/error.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -325,7 +325,8 @@ impl<'tcx> Ty<'tcx> {\n             ty::Dynamic(..) => \"trait object\".into(),\n             ty::Closure(..) => \"closure\".into(),\n             ty::Generator(def_id, ..) => tcx.generator_kind(def_id).unwrap().descr().into(),\n-            ty::GeneratorWitness(..) => \"generator witness\".into(),\n+            ty::GeneratorWitness(..) |\n+            ty::GeneratorWitnessMIR(..) => \"generator witness\".into(),\n             ty::Tuple(..) => \"tuple\".into(),\n             ty::Infer(ty::TyVar(_)) => \"inferred type\".into(),\n             ty::Infer(ty::IntVar(_)) => \"integer\".into(),\n@@ -373,7 +374,7 @@ impl<'tcx> Ty<'tcx> {\n             ty::Dynamic(..) => \"trait object\".into(),\n             ty::Closure(..) => \"closure\".into(),\n             ty::Generator(def_id, ..) => tcx.generator_kind(def_id).unwrap().descr().into(),\n-            ty::GeneratorWitness(..) => \"generator witness\".into(),\n+            ty::GeneratorWitness(..) | ty::GeneratorWitnessMIR(..) => \"generator witness\".into(),\n             ty::Tuple(..) => \"tuple\".into(),\n             ty::Placeholder(..) => \"higher-ranked type\".into(),\n             ty::Bound(..) => \"bound type variable\".into(),"}, {"sha": "9afa37e9ef3ee137467dcaf2c7d1944b090bead5", "filename": "compiler/rustc_middle/src/ty/fast_reject.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffast_reject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffast_reject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffast_reject.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -32,6 +32,7 @@ pub enum SimplifiedType {\n     ClosureSimplifiedType(DefId),\n     GeneratorSimplifiedType(DefId),\n     GeneratorWitnessSimplifiedType(usize),\n+    GeneratorWitnessMIRSimplifiedType(DefId),\n     FunctionSimplifiedType(usize),\n     PlaceholderSimplifiedType,\n }\n@@ -108,6 +109,7 @@ pub fn simplify_type<'tcx>(\n         ty::FnDef(def_id, _) | ty::Closure(def_id, _) => Some(ClosureSimplifiedType(def_id)),\n         ty::Generator(def_id, _, _) => Some(GeneratorSimplifiedType(def_id)),\n         ty::GeneratorWitness(tys) => Some(GeneratorWitnessSimplifiedType(tys.skip_binder().len())),\n+        ty::GeneratorWitnessMIR(def_id, _) => Some(GeneratorWitnessMIRSimplifiedType(def_id)),\n         ty::Never => Some(NeverSimplifiedType),\n         ty::Tuple(tys) => Some(TupleSimplifiedType(tys.len())),\n         ty::FnPtr(f) => Some(FunctionSimplifiedType(f.skip_binder().inputs().len())),\n@@ -139,7 +141,8 @@ impl SimplifiedType {\n             | ForeignSimplifiedType(d)\n             | TraitSimplifiedType(d)\n             | ClosureSimplifiedType(d)\n-            | GeneratorSimplifiedType(d) => Some(d),\n+            | GeneratorSimplifiedType(d)\n+            | GeneratorWitnessMIRSimplifiedType(d) => Some(d),\n             _ => None,\n         }\n     }\n@@ -208,6 +211,7 @@ impl DeepRejectCtxt {\n             | ty::Closure(..)\n             | ty::Generator(..)\n             | ty::GeneratorWitness(..)\n+            | ty::GeneratorWitnessMIR(..)\n             | ty::Placeholder(..)\n             | ty::Bound(..)\n             | ty::Infer(_) => bug!(\"unexpected impl_ty: {impl_ty}\"),\n@@ -306,7 +310,7 @@ impl DeepRejectCtxt {\n \n             ty::Error(_) => true,\n \n-            ty::GeneratorWitness(..) | ty::Bound(..) => {\n+            ty::GeneratorWitness(..) | ty::GeneratorWitnessMIR(..) | ty::Bound(..) => {\n                 bug!(\"unexpected obligation type: {:?}\", obligation_ty)\n             }\n         }"}, {"sha": "dc6f5851b7d883ad6a2fd843615d23446f06a87b", "filename": "compiler/rustc_middle/src/ty/flags.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -125,6 +125,16 @@ impl FlagComputation {\n                 self.bound_computation(ts, |flags, ts| flags.add_tys(ts));\n             }\n \n+            &ty::GeneratorWitnessMIR(_, ref substs) => {\n+                let should_remove_further_specializable =\n+                    !self.flags.contains(TypeFlags::STILL_FURTHER_SPECIALIZABLE);\n+                self.add_substs(substs);\n+                if should_remove_further_specializable {\n+                    self.flags -= TypeFlags::STILL_FURTHER_SPECIALIZABLE;\n+                }\n+                self.add_flags(TypeFlags::HAS_TY_GENERATOR);\n+            }\n+\n             &ty::Closure(_, substs) => {\n                 let substs = substs.as_closure();\n                 let should_remove_further_specializable ="}, {"sha": "cdcd6281f209bb4d25761ebb9e0a6cd9d1fac8f3", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -645,6 +645,7 @@ where\n                 | ty::Never\n                 | ty::FnDef(..)\n                 | ty::GeneratorWitness(..)\n+                | ty::GeneratorWitnessMIR(..)\n                 | ty::Foreign(..)\n                 | ty::Dynamic(_, _, ty::Dyn) => {\n                     bug!(\"TyAndLayout::field({:?}): not applicable\", this)"}, {"sha": "7ff58f02623dc1aa399f0c8cda4844a62f51d6b2", "filename": "compiler/rustc_middle/src/ty/opaque_types.rs", "status": "modified", "additions": 49, "deletions": 46, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fopaque_types.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -3,6 +3,7 @@ use crate::ty::fold::{TypeFolder, TypeSuperFoldable};\n use crate::ty::subst::{GenericArg, GenericArgKind};\n use crate::ty::{self, Ty, TyCtxt, TypeFoldable};\n use rustc_data_structures::fx::FxHashMap;\n+use rustc_span::def_id::DefId;\n use rustc_span::Span;\n \n /// Converts generic params of a TypeFoldable from one\n@@ -47,6 +48,47 @@ impl<'tcx> ReverseMapper<'tcx> {\n         assert!(!self.do_not_error);\n         kind.fold_with(self)\n     }\n+\n+    fn fold_closure_substs(\n+        &mut self,\n+        def_id: DefId,\n+        substs: ty::SubstsRef<'tcx>,\n+    ) -> ty::SubstsRef<'tcx> {\n+        // I am a horrible monster and I pray for death. When\n+        // we encounter a closure here, it is always a closure\n+        // from within the function that we are currently\n+        // type-checking -- one that is now being encapsulated\n+        // in an opaque type. Ideally, we would\n+        // go through the types/lifetimes that it references\n+        // and treat them just like we would any other type,\n+        // which means we would error out if we find any\n+        // reference to a type/region that is not in the\n+        // \"reverse map\".\n+        //\n+        // **However,** in the case of closures, there is a\n+        // somewhat subtle (read: hacky) consideration. The\n+        // problem is that our closure types currently include\n+        // all the lifetime parameters declared on the\n+        // enclosing function, even if they are unused by the\n+        // closure itself. We can't readily filter them out,\n+        // so here we replace those values with `'empty`. This\n+        // can't really make a difference to the rest of the\n+        // compiler; those regions are ignored for the\n+        // outlives relation, and hence don't affect trait\n+        // selection or auto traits, and they are erased\n+        // during codegen.\n+\n+        let generics = self.tcx.generics_of(def_id);\n+        self.tcx.mk_substs(substs.iter().enumerate().map(|(index, kind)| {\n+            if index < generics.parent_count {\n+                // Accommodate missing regions in the parent kinds...\n+                self.fold_kind_no_missing_regions_error(kind)\n+            } else {\n+                // ...but not elsewhere.\n+                self.fold_kind_normally(kind)\n+            }\n+        }))\n+    }\n }\n \n impl<'tcx> TypeFolder<'tcx> for ReverseMapper<'tcx> {\n@@ -104,59 +146,20 @@ impl<'tcx> TypeFolder<'tcx> for ReverseMapper<'tcx> {\n     fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {\n         match *ty.kind() {\n             ty::Closure(def_id, substs) => {\n-                // I am a horrible monster and I pray for death. When\n-                // we encounter a closure here, it is always a closure\n-                // from within the function that we are currently\n-                // type-checking -- one that is now being encapsulated\n-                // in an opaque type. Ideally, we would\n-                // go through the types/lifetimes that it references\n-                // and treat them just like we would any other type,\n-                // which means we would error out if we find any\n-                // reference to a type/region that is not in the\n-                // \"reverse map\".\n-                //\n-                // **However,** in the case of closures, there is a\n-                // somewhat subtle (read: hacky) consideration. The\n-                // problem is that our closure types currently include\n-                // all the lifetime parameters declared on the\n-                // enclosing function, even if they are unused by the\n-                // closure itself. We can't readily filter them out,\n-                // so here we replace those values with `'empty`. This\n-                // can't really make a difference to the rest of the\n-                // compiler; those regions are ignored for the\n-                // outlives relation, and hence don't affect trait\n-                // selection or auto traits, and they are erased\n-                // during codegen.\n-\n-                let generics = self.tcx.generics_of(def_id);\n-                let substs = self.tcx.mk_substs(substs.iter().enumerate().map(|(index, kind)| {\n-                    if index < generics.parent_count {\n-                        // Accommodate missing regions in the parent kinds...\n-                        self.fold_kind_no_missing_regions_error(kind)\n-                    } else {\n-                        // ...but not elsewhere.\n-                        self.fold_kind_normally(kind)\n-                    }\n-                }));\n-\n+                let substs = self.fold_closure_substs(def_id, substs);\n                 self.tcx.mk_closure(def_id, substs)\n             }\n \n             ty::Generator(def_id, substs, movability) => {\n-                let generics = self.tcx.generics_of(def_id);\n-                let substs = self.tcx.mk_substs(substs.iter().enumerate().map(|(index, kind)| {\n-                    if index < generics.parent_count {\n-                        // Accommodate missing regions in the parent kinds...\n-                        self.fold_kind_no_missing_regions_error(kind)\n-                    } else {\n-                        // ...but not elsewhere.\n-                        self.fold_kind_normally(kind)\n-                    }\n-                }));\n-\n+                let substs = self.fold_closure_substs(def_id, substs);\n                 self.tcx.mk_generator(def_id, substs, movability)\n             }\n \n+            ty::GeneratorWitnessMIR(def_id, substs) => {\n+                let substs = self.fold_closure_substs(def_id, substs);\n+                self.tcx.mk_generator_witness_mir(def_id, substs)\n+            }\n+\n             ty::Param(param) => {\n                 // Look it up in the substitution list.\n                 match self.map.get(&ty.into()).map(|k| k.unpack()) {"}, {"sha": "84edb5f2a4288fd4cfa12327c9504877866dd6f6", "filename": "compiler/rustc_middle/src/ty/parameterized.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fparameterized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fparameterized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fparameterized.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -117,6 +117,7 @@ macro_rules! parameterized_over_tcx {\n parameterized_over_tcx! {\n     crate::middle::exported_symbols::ExportedSymbol,\n     crate::mir::Body,\n+    crate::mir::GeneratorLayout,\n     ty::Ty,\n     ty::FnSig,\n     ty::GenericPredicates,"}, {"sha": "90bf3288ccf5489946a63560ca32c066c30f5e6d", "filename": "compiler/rustc_middle/src/ty/print/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -265,6 +265,7 @@ fn characteristic_def_id_of_type_cached<'a>(\n         ty::FnDef(def_id, _)\n         | ty::Closure(def_id, _)\n         | ty::Generator(def_id, _, _)\n+        | ty::GeneratorWitnessMIR(def_id, _)\n         | ty::Foreign(def_id) => Some(def_id),\n \n         ty::Bool"}, {"sha": "f2abec216b7b371d594bd85f5a657fbca09e7f05", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -811,6 +811,28 @@ pub trait PrettyPrinter<'tcx>:\n             ty::GeneratorWitness(types) => {\n                 p!(in_binder(&types));\n             }\n+            ty::GeneratorWitnessMIR(did, substs) => {\n+                p!(write(\"[\"));\n+                if !self.tcx().sess.verbose() {\n+                    p!(\"generator witness\");\n+                    // FIXME(eddyb) should use `def_span`.\n+                    if let Some(did) = did.as_local() {\n+                        let span = self.tcx().def_span(did);\n+                        p!(write(\n+                            \"@{}\",\n+                            // This may end up in stderr diagnostics but it may also be emitted\n+                            // into MIR. Hence we use the remapped path if available\n+                            self.tcx().sess.source_map().span_to_embeddable_string(span)\n+                        ));\n+                    } else {\n+                        p!(write(\"@\"), print_def_path(did, substs));\n+                    }\n+                } else {\n+                    p!(print_def_path(did, substs));\n+                }\n+\n+                p!(\"]\")\n+            }\n             ty::Closure(did, substs) => {\n                 p!(write(\"[\"));\n                 if !self.should_print_verbose() {"}, {"sha": "7122e864cf231e879b87b76c8c26f68b2ded7ccb", "filename": "compiler/rustc_middle/src/ty/relate.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -473,6 +473,16 @@ pub fn super_relate_tys<'tcx, R: TypeRelation<'tcx>>(\n             Ok(tcx.mk_generator_witness(types))\n         }\n \n+        (&ty::GeneratorWitnessMIR(a_id, a_substs), &ty::GeneratorWitnessMIR(b_id, b_substs))\n+            if a_id == b_id =>\n+        {\n+            // All GeneratorWitness types with the same id represent\n+            // the (anonymous) type of the same generator expression. So\n+            // all of their regions should be equated.\n+            let substs = relation.relate(a_substs, b_substs)?;\n+            Ok(tcx.mk_generator_witness_mir(a_id, substs))\n+        }\n+\n         (&ty::Closure(a_id, a_substs), &ty::Closure(b_id, b_substs)) if a_id == b_id => {\n             // All Closure types with the same id represent\n             // the (anonymous) type of the same closure expression. So"}, {"sha": "034aab0c38ea32a9a60d4be70d82bd37460c43a3", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -201,6 +201,7 @@ TrivialTypeTraversalAndLiftImpls! {\n     bool,\n     usize,\n     ::rustc_target::abi::VariantIdx,\n+    u16,\n     u32,\n     u64,\n     String,\n@@ -655,6 +656,9 @@ impl<'tcx> TypeSuperFoldable<'tcx> for Ty<'tcx> {\n                 ty::Generator(did, substs.try_fold_with(folder)?, movability)\n             }\n             ty::GeneratorWitness(types) => ty::GeneratorWitness(types.try_fold_with(folder)?),\n+            ty::GeneratorWitnessMIR(did, substs) => {\n+                ty::GeneratorWitnessMIR(did, substs.try_fold_with(folder)?)\n+            }\n             ty::Closure(did, substs) => ty::Closure(did, substs.try_fold_with(folder)?),\n             ty::Alias(kind, data) => ty::Alias(kind, data.try_fold_with(folder)?),\n \n@@ -700,6 +704,7 @@ impl<'tcx> TypeSuperVisitable<'tcx> for Ty<'tcx> {\n             }\n             ty::Generator(_did, ref substs, _) => substs.visit_with(visitor),\n             ty::GeneratorWitness(ref types) => types.visit_with(visitor),\n+            ty::GeneratorWitnessMIR(_did, ref substs) => substs.visit_with(visitor),\n             ty::Closure(_did, ref substs) => substs.visit_with(visitor),\n             ty::Alias(_, ref data) => data.visit_with(visitor),\n "}, {"sha": "f97d2e753a3b6d0ee1a5fb065b46d74cf7c26a0f", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -571,9 +571,9 @@ impl<'tcx> GeneratorSubsts<'tcx> {\n     ) -> impl Iterator<Item = impl Iterator<Item = Ty<'tcx>> + Captures<'tcx>> {\n         let layout = tcx.generator_layout(def_id).unwrap();\n         layout.variant_fields.iter().map(move |variant| {\n-            variant\n-                .iter()\n-                .map(move |field| ty::EarlyBinder(layout.field_tys[*field]).subst(tcx, self.substs))\n+            variant.iter().map(move |field| {\n+                ty::EarlyBinder(layout.field_tys[*field].ty).subst(tcx, self.substs)\n+            })\n         })\n     }\n \n@@ -2175,6 +2175,7 @@ impl<'tcx> Ty<'tcx> {\n             | ty::Dynamic(..)\n             | ty::Closure(..)\n             | ty::GeneratorWitness(..)\n+            | ty::GeneratorWitnessMIR(..)\n             | ty::Never\n             | ty::Tuple(_)\n             | ty::Error(_)\n@@ -2210,6 +2211,7 @@ impl<'tcx> Ty<'tcx> {\n             | ty::Ref(..)\n             | ty::Generator(..)\n             | ty::GeneratorWitness(..)\n+            | ty::GeneratorWitnessMIR(..)\n             | ty::Array(..)\n             | ty::Closure(..)\n             | ty::Never\n@@ -2296,6 +2298,7 @@ impl<'tcx> Ty<'tcx> {\n             | ty::Ref(..)\n             | ty::Generator(..)\n             | ty::GeneratorWitness(..)\n+            | ty::GeneratorWitnessMIR(..)\n             | ty::Array(..)\n             | ty::Closure(..)\n             | ty::Never\n@@ -2360,7 +2363,7 @@ impl<'tcx> Ty<'tcx> {\n             // anything with custom metadata it might be more complicated.\n             ty::Ref(_, _, hir::Mutability::Not) | ty::RawPtr(..) => false,\n \n-            ty::Generator(..) | ty::GeneratorWitness(..) => false,\n+            ty::Generator(..) | ty::GeneratorWitness(..) | ty::GeneratorWitnessMIR(..) => false,\n \n             // Might be, but not \"trivial\" so just giving the safe answer.\n             ty::Adt(..) | ty::Closure(..) => false,"}, {"sha": "79a6c730d7159a5abcbf323ae029566c709952e6", "filename": "compiler/rustc_middle/src/ty/typeck_results.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftypeck_results.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftypeck_results.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftypeck_results.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -1,6 +1,7 @@\n use crate::{\n     hir::place::Place as HirPlace,\n     infer::canonical::Canonical,\n+    traits::ObligationCause,\n     ty::{\n         self, tls, BindingMode, BoundVar, CanonicalPolyFnSig, ClosureSizeProfileData,\n         GenericArgKind, InternalSubsts, SubstsRef, Ty, UserSubsts,\n@@ -193,6 +194,11 @@ pub struct TypeckResults<'tcx> {\n     /// that are live across the yield of this generator (if a generator).\n     pub generator_interior_types: ty::Binder<'tcx, Vec<GeneratorInteriorTypeCause<'tcx>>>,\n \n+    /// Stores the predicates that apply on generator witness types.\n+    /// formatting modified file tests/ui/generator/retain-resume-ref.rs\n+    pub generator_interior_predicates:\n+        FxHashMap<LocalDefId, Vec<(ty::Predicate<'tcx>, ObligationCause<'tcx>)>>,\n+\n     /// We sometimes treat byte string literals (which are of type `&[u8; N]`)\n     /// as `&[u8]`, depending on the pattern in which they are used.\n     /// This hashset records all instances where we behave\n@@ -271,6 +277,7 @@ impl<'tcx> TypeckResults<'tcx> {\n             closure_fake_reads: Default::default(),\n             rvalue_scopes: Default::default(),\n             generator_interior_types: ty::Binder::dummy(Default::default()),\n+            generator_interior_predicates: Default::default(),\n             treat_byte_string_as_slice: Default::default(),\n             closure_size_eval: Default::default(),\n         }"}, {"sha": "796164b0d6af39652c2f64f1f019b54267071a80", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 84, "deletions": 4, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -615,6 +615,36 @@ impl<'tcx> TyCtxt<'tcx> {\n         }\n     }\n \n+    /// Return the set of types that should be taken into accound when checking\n+    /// trait bounds on a generator's internal state.\n+    pub fn generator_hidden_types(\n+        self,\n+        def_id: DefId,\n+    ) -> impl Iterator<Item = ty::EarlyBinder<Ty<'tcx>>> {\n+        let generator_layout = &self.mir_generator_witnesses(def_id);\n+        generator_layout\n+            .field_tys\n+            .iter()\n+            .filter(|decl| !decl.ignore_for_traits)\n+            .map(|decl| ty::EarlyBinder(decl.ty))\n+    }\n+\n+    /// Normalizes all opaque types in the given value, replacing them\n+    /// with their underlying types.\n+    pub fn expand_opaque_types(self, val: Ty<'tcx>) -> Ty<'tcx> {\n+        let mut visitor = OpaqueTypeExpander {\n+            seen_opaque_tys: FxHashSet::default(),\n+            expanded_cache: FxHashMap::default(),\n+            primary_def_id: None,\n+            found_recursion: false,\n+            found_any_recursion: false,\n+            check_recursion: false,\n+            expand_generators: false,\n+            tcx: self,\n+        };\n+        val.fold_with(&mut visitor)\n+    }\n+\n     /// Expands the given impl trait type, stopping if the type is recursive.\n     #[instrument(skip(self), level = \"debug\", ret)]\n     pub fn try_expand_impl_trait_type(\n@@ -629,6 +659,7 @@ impl<'tcx> TyCtxt<'tcx> {\n             found_recursion: false,\n             found_any_recursion: false,\n             check_recursion: true,\n+            expand_generators: true,\n             tcx: self,\n         };\n \n@@ -741,6 +772,7 @@ struct OpaqueTypeExpander<'tcx> {\n     primary_def_id: Option<DefId>,\n     found_recursion: bool,\n     found_any_recursion: bool,\n+    expand_generators: bool,\n     /// Whether or not to check for recursive opaque types.\n     /// This is `true` when we're explicitly checking for opaque type\n     /// recursion, and 'false' otherwise to avoid unnecessary work.\n@@ -777,6 +809,37 @@ impl<'tcx> OpaqueTypeExpander<'tcx> {\n             None\n         }\n     }\n+\n+    fn expand_generator(&mut self, def_id: DefId, substs: SubstsRef<'tcx>) -> Option<Ty<'tcx>> {\n+        if self.found_any_recursion {\n+            return None;\n+        }\n+        let substs = substs.fold_with(self);\n+        if !self.check_recursion || self.seen_opaque_tys.insert(def_id) {\n+            let expanded_ty = match self.expanded_cache.get(&(def_id, substs)) {\n+                Some(expanded_ty) => *expanded_ty,\n+                None => {\n+                    for bty in self.tcx.generator_hidden_types(def_id) {\n+                        let hidden_ty = bty.subst(self.tcx, substs);\n+                        self.fold_ty(hidden_ty);\n+                    }\n+                    let expanded_ty = self.tcx.mk_generator_witness_mir(def_id, substs);\n+                    self.expanded_cache.insert((def_id, substs), expanded_ty);\n+                    expanded_ty\n+                }\n+            };\n+            if self.check_recursion {\n+                self.seen_opaque_tys.remove(&def_id);\n+            }\n+            Some(expanded_ty)\n+        } else {\n+            // If another opaque type that we contain is recursive, then it\n+            // will report the error, so we don't have to.\n+            self.found_any_recursion = true;\n+            self.found_recursion = def_id == *self.primary_def_id.as_ref().unwrap();\n+            None\n+        }\n+    }\n }\n \n impl<'tcx> TypeFolder<'tcx> for OpaqueTypeExpander<'tcx> {\n@@ -785,13 +848,19 @@ impl<'tcx> TypeFolder<'tcx> for OpaqueTypeExpander<'tcx> {\n     }\n \n     fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {\n-        if let ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs, .. }) = *t.kind() {\n+        let mut t = if let ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs, .. }) = *t.kind() {\n             self.expand_opaque_ty(def_id, substs).unwrap_or(t)\n-        } else if t.has_opaque_types() {\n+        } else if t.has_opaque_types() || t.has_generators() {\n             t.super_fold_with(self)\n         } else {\n             t\n+        };\n+        if self.expand_generators {\n+            if let ty::GeneratorWitnessMIR(def_id, substs) = *t.kind() {\n+                t = self.expand_generator(def_id, substs).unwrap_or(t);\n+            }\n         }\n+        t\n     }\n }\n \n@@ -896,6 +965,7 @@ impl<'tcx> Ty<'tcx> {\n             | ty::Foreign(_)\n             | ty::Generator(..)\n             | ty::GeneratorWitness(_)\n+            | ty::GeneratorWitnessMIR(..)\n             | ty::Infer(_)\n             | ty::Alias(..)\n             | ty::Param(_)\n@@ -935,6 +1005,7 @@ impl<'tcx> Ty<'tcx> {\n             | ty::Foreign(_)\n             | ty::Generator(..)\n             | ty::GeneratorWitness(_)\n+            | ty::GeneratorWitnessMIR(..)\n             | ty::Infer(_)\n             | ty::Alias(..)\n             | ty::Param(_)\n@@ -1062,7 +1133,10 @@ impl<'tcx> Ty<'tcx> {\n                 false\n             }\n \n-            ty::Foreign(_) | ty::GeneratorWitness(..) | ty::Error(_) => false,\n+            ty::Foreign(_)\n+            | ty::GeneratorWitness(..)\n+            | ty::GeneratorWitnessMIR(..)\n+            | ty::Error(_) => false,\n         }\n     }\n \n@@ -1158,6 +1232,7 @@ pub fn needs_drop_components<'tcx>(\n         | ty::FnPtr(_)\n         | ty::Char\n         | ty::GeneratorWitness(..)\n+        | ty::GeneratorWitnessMIR(..)\n         | ty::RawPtr(_)\n         | ty::Ref(..)\n         | ty::Str => Ok(SmallVec::new()),\n@@ -1228,7 +1303,11 @@ pub fn is_trivially_const_drop(ty: Ty<'_>) -> bool {\n \n         // Not trivial because they have components, and instead of looking inside,\n         // we'll just perform trait selection.\n-        ty::Closure(..) | ty::Generator(..) | ty::GeneratorWitness(_) | ty::Adt(..) => false,\n+        ty::Closure(..)\n+        | ty::Generator(..)\n+        | ty::GeneratorWitness(_)\n+        | ty::GeneratorWitnessMIR(..)\n+        | ty::Adt(..) => false,\n \n         ty::Array(ty, _) | ty::Slice(ty) => is_trivially_const_drop(ty),\n \n@@ -1289,6 +1368,7 @@ pub fn reveal_opaque_types_in_bounds<'tcx>(\n         found_recursion: false,\n         found_any_recursion: false,\n         check_recursion: false,\n+        expand_generators: false,\n         tcx,\n     };\n     val.fold_with(&mut visitor)"}, {"sha": "d7b7a094737266e4d348a958b2f0b92cff7f708b", "filename": "compiler/rustc_middle/src/ty/visit.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvisit.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -100,6 +100,9 @@ pub trait TypeVisitable<'tcx>: fmt::Debug + Clone {\n     fn has_opaque_types(&self) -> bool {\n         self.has_type_flags(TypeFlags::HAS_TY_OPAQUE)\n     }\n+    fn has_generators(&self) -> bool {\n+        self.has_type_flags(TypeFlags::HAS_TY_GENERATOR)\n+    }\n     fn references_error(&self) -> bool {\n         self.has_type_flags(TypeFlags::HAS_ERROR)\n     }"}, {"sha": "182945b9c3db1ba01c210154cee3c1ecc015f0c6", "filename": "compiler/rustc_middle/src/ty/walk.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fwalk.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -190,6 +190,7 @@ fn push_inner<'tcx>(stack: &mut TypeWalkerStack<'tcx>, parent: GenericArg<'tcx>)\n             ty::Adt(_, substs)\n             | ty::Closure(_, substs)\n             | ty::Generator(_, substs, _)\n+            | ty::GeneratorWitnessMIR(_, substs)\n             | ty::FnDef(_, substs) => {\n                 stack.extend(substs.iter().rev());\n             }"}, {"sha": "6b960ebdb16f1291c4a6461049e9347e942daf17", "filename": "compiler/rustc_mir_build/src/build/matches/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -1747,8 +1747,10 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 };\n                 let fake_borrow_deref_ty = matched_place.ty(&self.local_decls, tcx).ty;\n                 let fake_borrow_ty = tcx.mk_imm_ref(tcx.lifetimes.re_erased, fake_borrow_deref_ty);\n-                let fake_borrow_temp =\n-                    self.local_decls.push(LocalDecl::new(fake_borrow_ty, temp_span));\n+                let mut fake_borrow_temp = LocalDecl::new(fake_borrow_ty, temp_span);\n+                fake_borrow_temp.internal = self.local_decls[matched_place.local].internal;\n+                fake_borrow_temp.local_info = Some(Box::new(LocalInfo::FakeBorrow));\n+                let fake_borrow_temp = self.local_decls.push(fake_borrow_temp);\n \n                 (matched_place, fake_borrow_temp)\n             })"}, {"sha": "e8871ff37f24ab2d3e67740fc2ffd4f8d354b9cf", "filename": "compiler/rustc_mir_transform/src/generator.rs", "status": "modified", "additions": 311, "deletions": 29, "changes": 340, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -54,7 +54,8 @@ use crate::deref_separator::deref_finder;\n use crate::simplify;\n use crate::util::expand_aggregate;\n use crate::MirPass;\n-use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_errors::pluralize;\n use rustc_hir as hir;\n use rustc_hir::lang_items::LangItem;\n use rustc_hir::GeneratorKind;\n@@ -70,6 +71,9 @@ use rustc_mir_dataflow::impls::{\n };\n use rustc_mir_dataflow::storage::always_storage_live_locals;\n use rustc_mir_dataflow::{self, Analysis};\n+use rustc_span::def_id::DefId;\n+use rustc_span::symbol::sym;\n+use rustc_span::Span;\n use rustc_target::abi::VariantIdx;\n use rustc_target::spec::PanicStrategy;\n use std::{iter, ops};\n@@ -854,7 +858,7 @@ fn sanitize_witness<'tcx>(\n     body: &Body<'tcx>,\n     witness: Ty<'tcx>,\n     upvars: Vec<Ty<'tcx>>,\n-    saved_locals: &GeneratorSavedLocals,\n+    layout: &GeneratorLayout<'tcx>,\n ) {\n     let did = body.source.def_id();\n     let param_env = tcx.param_env(did);\n@@ -873,31 +877,36 @@ fn sanitize_witness<'tcx>(\n         }\n     };\n \n-    for (local, decl) in body.local_decls.iter_enumerated() {\n-        // Ignore locals which are internal or not saved between yields.\n-        if !saved_locals.contains(local) || decl.internal {\n+    let mut mismatches = Vec::new();\n+    for fty in &layout.field_tys {\n+        if fty.ignore_for_traits {\n             continue;\n         }\n-        let decl_ty = tcx.normalize_erasing_regions(param_env, decl.ty);\n+        let decl_ty = tcx.normalize_erasing_regions(param_env, fty.ty);\n \n         // Sanity check that typeck knows about the type of locals which are\n         // live across a suspension point\n         if !allowed.contains(&decl_ty) && !allowed_upvars.contains(&decl_ty) {\n-            span_bug!(\n-                body.span,\n-                \"Broken MIR: generator contains type {} in MIR, \\\n-                       but typeck only knows about {} and {:?}\",\n-                decl_ty,\n-                allowed,\n-                allowed_upvars\n-            );\n+            mismatches.push(decl_ty);\n         }\n     }\n+\n+    if !mismatches.is_empty() {\n+        span_bug!(\n+            body.span,\n+            \"Broken MIR: generator contains type {:?} in MIR, \\\n+                       but typeck only knows about {} and {:?}\",\n+            mismatches,\n+            allowed,\n+            allowed_upvars\n+        );\n+    }\n }\n \n fn compute_layout<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n     liveness: LivenessInfo,\n-    body: &mut Body<'tcx>,\n+    body: &Body<'tcx>,\n ) -> (\n     FxHashMap<Local, (Ty<'tcx>, VariantIdx, usize)>,\n     GeneratorLayout<'tcx>,\n@@ -915,9 +924,33 @@ fn compute_layout<'tcx>(\n     let mut locals = IndexVec::<GeneratorSavedLocal, _>::new();\n     let mut tys = IndexVec::<GeneratorSavedLocal, _>::new();\n     for (saved_local, local) in saved_locals.iter_enumerated() {\n-        locals.push(local);\n-        tys.push(body.local_decls[local].ty);\n         debug!(\"generator saved local {:?} => {:?}\", saved_local, local);\n+\n+        locals.push(local);\n+        let decl = &body.local_decls[local];\n+        debug!(?decl);\n+\n+        let ignore_for_traits = if tcx.sess.opts.unstable_opts.drop_tracking_mir {\n+            match decl.local_info {\n+                // Do not include raw pointers created from accessing `static` items, as those could\n+                // well be re-created by another access to the same static.\n+                Some(box LocalInfo::StaticRef { is_thread_local, .. }) => !is_thread_local,\n+                // Fake borrows are only read by fake reads, so do not have any reality in\n+                // post-analysis MIR.\n+                Some(box LocalInfo::FakeBorrow) => true,\n+                _ => false,\n+            }\n+        } else {\n+            // FIXME(#105084) HIR-based drop tracking does not account for all the temporaries that\n+            // MIR building may introduce. This leads to wrongly ignored types, but this is\n+            // necessary for internal consistency and to avoid ICEs.\n+            decl.internal\n+        };\n+        let decl =\n+            GeneratorSavedTy { ty: decl.ty, source_info: decl.source_info, ignore_for_traits };\n+        debug!(?decl);\n+\n+        tys.push(decl);\n     }\n \n     // Leave empty variants for the UNRESUMED, RETURNED, and POISONED states.\n@@ -947,7 +980,7 @@ fn compute_layout<'tcx>(\n             // just use the first one here. That's fine; fields do not move\n             // around inside generators, so it doesn't matter which variant\n             // index we access them by.\n-            remap.entry(locals[saved_local]).or_insert((tys[saved_local], variant_index, idx));\n+            remap.entry(locals[saved_local]).or_insert((tys[saved_local].ty, variant_index, idx));\n         }\n         variant_fields.push(fields);\n         variant_source_info.push(source_info_at_suspension_points[suspension_point_idx]);\n@@ -957,6 +990,7 @@ fn compute_layout<'tcx>(\n \n     let layout =\n         GeneratorLayout { field_tys: tys, variant_fields, variant_source_info, storage_conflicts };\n+    debug!(?layout);\n \n     (remap, layout, storage_liveness)\n }\n@@ -1351,6 +1385,52 @@ fn create_cases<'tcx>(\n         .collect()\n }\n \n+#[instrument(level = \"debug\", skip(tcx), ret)]\n+pub(crate) fn mir_generator_witnesses<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    def_id: DefId,\n+) -> GeneratorLayout<'tcx> {\n+    let def_id = def_id.expect_local();\n+\n+    let (body, _) = tcx.mir_promoted(ty::WithOptConstParam::unknown(def_id));\n+    let body = body.borrow();\n+    let body = &*body;\n+\n+    // The first argument is the generator type passed by value\n+    let gen_ty = body.local_decls[ty::CAPTURE_STRUCT_LOCAL].ty;\n+\n+    // Get the interior types and substs which typeck computed\n+    let (upvars, interior, movable) = match *gen_ty.kind() {\n+        ty::Generator(_, substs, movability) => {\n+            let substs = substs.as_generator();\n+            (\n+                substs.upvar_tys().collect::<Vec<_>>(),\n+                substs.witness(),\n+                movability == hir::Movability::Movable,\n+            )\n+        }\n+        _ => span_bug!(body.span, \"unexpected generator type {}\", gen_ty),\n+    };\n+\n+    // When first entering the generator, move the resume argument into its new local.\n+    let always_live_locals = always_storage_live_locals(&body);\n+\n+    let liveness_info = locals_live_across_suspend_points(tcx, body, &always_live_locals, movable);\n+\n+    // Extract locals which are live across suspension point into `layout`\n+    // `remap` gives a mapping from local indices onto generator struct indices\n+    // `storage_liveness` tells us which locals have live storage at suspension points\n+    let (_, generator_layout, _) = compute_layout(tcx, liveness_info, body);\n+\n+    if tcx.sess.opts.unstable_opts.drop_tracking_mir {\n+        check_suspend_tys(tcx, &generator_layout, &body);\n+    } else {\n+        sanitize_witness(tcx, body, interior, upvars, &generator_layout);\n+    }\n+\n+    generator_layout\n+}\n+\n impl<'tcx> MirPass<'tcx> for StateTransform {\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n         let Some(yield_ty) = body.yield_ty() else {\n@@ -1363,16 +1443,11 @@ impl<'tcx> MirPass<'tcx> for StateTransform {\n         // The first argument is the generator type passed by value\n         let gen_ty = body.local_decls.raw[1].ty;\n \n-        // Get the interior types and substs which typeck computed\n-        let (upvars, interior, discr_ty, movable) = match *gen_ty.kind() {\n+        // Get the discriminant type and substs which typeck computed\n+        let (discr_ty, movable) = match *gen_ty.kind() {\n             ty::Generator(_, substs, movability) => {\n                 let substs = substs.as_generator();\n-                (\n-                    substs.upvar_tys().collect(),\n-                    substs.witness(),\n-                    substs.discr_ty(tcx),\n-                    movability == hir::Movability::Movable,\n-                )\n+                (substs.discr_ty(tcx), movability == hir::Movability::Movable)\n             }\n             _ => {\n                 tcx.sess\n@@ -1434,8 +1509,6 @@ impl<'tcx> MirPass<'tcx> for StateTransform {\n         let liveness_info =\n             locals_live_across_suspend_points(tcx, body, &always_live_locals, movable);\n \n-        sanitize_witness(tcx, body, interior, upvars, &liveness_info.saved_locals);\n-\n         if tcx.sess.opts.unstable_opts.validate_mir {\n             let mut vis = EnsureGeneratorFieldAssignmentsNeverAlias {\n                 assigned_local: None,\n@@ -1449,7 +1522,7 @@ impl<'tcx> MirPass<'tcx> for StateTransform {\n         // Extract locals which are live across suspension point into `layout`\n         // `remap` gives a mapping from local indices onto generator struct indices\n         // `storage_liveness` tells us which locals have live storage at suspension points\n-        let (remap, layout, storage_liveness) = compute_layout(liveness_info, body);\n+        let (remap, layout, storage_liveness) = compute_layout(tcx, liveness_info, body);\n \n         let can_return = can_return(tcx, body, tcx.param_env(body.source.def_id()));\n \n@@ -1631,3 +1704,212 @@ impl<'tcx> Visitor<'tcx> for EnsureGeneratorFieldAssignmentsNeverAlias<'_> {\n         }\n     }\n }\n+\n+fn check_suspend_tys<'tcx>(tcx: TyCtxt<'tcx>, layout: &GeneratorLayout<'tcx>, body: &Body<'tcx>) {\n+    let mut linted_tys = FxHashSet::default();\n+\n+    // We want a user-facing param-env.\n+    let param_env = tcx.param_env(body.source.def_id());\n+\n+    for (variant, yield_source_info) in\n+        layout.variant_fields.iter().zip(&layout.variant_source_info)\n+    {\n+        debug!(?variant);\n+        for &local in variant {\n+            let decl = &layout.field_tys[local];\n+            debug!(?decl);\n+\n+            if !decl.ignore_for_traits && linted_tys.insert(decl.ty) {\n+                let Some(hir_id) = decl.source_info.scope.lint_root(&body.source_scopes) else { continue };\n+\n+                check_must_not_suspend_ty(\n+                    tcx,\n+                    decl.ty,\n+                    hir_id,\n+                    param_env,\n+                    SuspendCheckData {\n+                        source_span: decl.source_info.span,\n+                        yield_span: yield_source_info.span,\n+                        plural_len: 1,\n+                        ..Default::default()\n+                    },\n+                );\n+            }\n+        }\n+    }\n+}\n+\n+#[derive(Default)]\n+struct SuspendCheckData<'a> {\n+    source_span: Span,\n+    yield_span: Span,\n+    descr_pre: &'a str,\n+    descr_post: &'a str,\n+    plural_len: usize,\n+}\n+\n+// Returns whether it emitted a diagnostic or not\n+// Note that this fn and the proceeding one are based on the code\n+// for creating must_use diagnostics\n+//\n+// Note that this technique was chosen over things like a `Suspend` marker trait\n+// as it is simpler and has precedent in the compiler\n+fn check_must_not_suspend_ty<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    ty: Ty<'tcx>,\n+    hir_id: hir::HirId,\n+    param_env: ty::ParamEnv<'tcx>,\n+    data: SuspendCheckData<'_>,\n+) -> bool {\n+    if ty.is_unit() {\n+        return false;\n+    }\n+\n+    let plural_suffix = pluralize!(data.plural_len);\n+\n+    debug!(\"Checking must_not_suspend for {}\", ty);\n+\n+    match *ty.kind() {\n+        ty::Adt(..) if ty.is_box() => {\n+            let boxed_ty = ty.boxed_ty();\n+            let descr_pre = &format!(\"{}boxed \", data.descr_pre);\n+            check_must_not_suspend_ty(\n+                tcx,\n+                boxed_ty,\n+                hir_id,\n+                param_env,\n+                SuspendCheckData { descr_pre, ..data },\n+            )\n+        }\n+        ty::Adt(def, _) => check_must_not_suspend_def(tcx, def.did(), hir_id, data),\n+        // FIXME: support adding the attribute to TAITs\n+        ty::Alias(ty::Opaque, ty::AliasTy { def_id: def, .. }) => {\n+            let mut has_emitted = false;\n+            for &(predicate, _) in tcx.explicit_item_bounds(def) {\n+                // We only look at the `DefId`, so it is safe to skip the binder here.\n+                if let ty::PredicateKind::Clause(ty::Clause::Trait(ref poly_trait_predicate)) =\n+                    predicate.kind().skip_binder()\n+                {\n+                    let def_id = poly_trait_predicate.trait_ref.def_id;\n+                    let descr_pre = &format!(\"{}implementer{} of \", data.descr_pre, plural_suffix);\n+                    if check_must_not_suspend_def(\n+                        tcx,\n+                        def_id,\n+                        hir_id,\n+                        SuspendCheckData { descr_pre, ..data },\n+                    ) {\n+                        has_emitted = true;\n+                        break;\n+                    }\n+                }\n+            }\n+            has_emitted\n+        }\n+        ty::Dynamic(binder, _, _) => {\n+            let mut has_emitted = false;\n+            for predicate in binder.iter() {\n+                if let ty::ExistentialPredicate::Trait(ref trait_ref) = predicate.skip_binder() {\n+                    let def_id = trait_ref.def_id;\n+                    let descr_post = &format!(\" trait object{}{}\", plural_suffix, data.descr_post);\n+                    if check_must_not_suspend_def(\n+                        tcx,\n+                        def_id,\n+                        hir_id,\n+                        SuspendCheckData { descr_post, ..data },\n+                    ) {\n+                        has_emitted = true;\n+                        break;\n+                    }\n+                }\n+            }\n+            has_emitted\n+        }\n+        ty::Tuple(fields) => {\n+            let mut has_emitted = false;\n+            for (i, ty) in fields.iter().enumerate() {\n+                let descr_post = &format!(\" in tuple element {i}\");\n+                if check_must_not_suspend_ty(\n+                    tcx,\n+                    ty,\n+                    hir_id,\n+                    param_env,\n+                    SuspendCheckData { descr_post, ..data },\n+                ) {\n+                    has_emitted = true;\n+                }\n+            }\n+            has_emitted\n+        }\n+        ty::Array(ty, len) => {\n+            let descr_pre = &format!(\"{}array{} of \", data.descr_pre, plural_suffix);\n+            check_must_not_suspend_ty(\n+                tcx,\n+                ty,\n+                hir_id,\n+                param_env,\n+                SuspendCheckData {\n+                    descr_pre,\n+                    plural_len: len.try_eval_usize(tcx, param_env).unwrap_or(0) as usize + 1,\n+                    ..data\n+                },\n+            )\n+        }\n+        // If drop tracking is enabled, we want to look through references, since the referrent\n+        // may not be considered live across the await point.\n+        ty::Ref(_region, ty, _mutability) => {\n+            let descr_pre = &format!(\"{}reference{} to \", data.descr_pre, plural_suffix);\n+            check_must_not_suspend_ty(\n+                tcx,\n+                ty,\n+                hir_id,\n+                param_env,\n+                SuspendCheckData { descr_pre, ..data },\n+            )\n+        }\n+        _ => false,\n+    }\n+}\n+\n+fn check_must_not_suspend_def(\n+    tcx: TyCtxt<'_>,\n+    def_id: DefId,\n+    hir_id: hir::HirId,\n+    data: SuspendCheckData<'_>,\n+) -> bool {\n+    if let Some(attr) = tcx.get_attr(def_id, sym::must_not_suspend) {\n+        let msg = format!(\n+            \"{}`{}`{} held across a suspend point, but should not be\",\n+            data.descr_pre,\n+            tcx.def_path_str(def_id),\n+            data.descr_post,\n+        );\n+        tcx.struct_span_lint_hir(\n+            rustc_session::lint::builtin::MUST_NOT_SUSPEND,\n+            hir_id,\n+            data.source_span,\n+            msg,\n+            |lint| {\n+                // add span pointing to the offending yield/await\n+                lint.span_label(data.yield_span, \"the value is held across this suspend point\");\n+\n+                // Add optional reason note\n+                if let Some(note) = attr.value_str() {\n+                    // FIXME(guswynn): consider formatting this better\n+                    lint.span_note(data.source_span, note.as_str());\n+                }\n+\n+                // Add some quick suggestions on what to do\n+                // FIXME: can `drop` work as a suggestion here as well?\n+                lint.span_help(\n+                    data.source_span,\n+                    \"consider using a block (`{ ... }`) \\\n+                    to shrink the value's scope, ending before the suspend point\",\n+                )\n+            },\n+        );\n+\n+        true\n+    } else {\n+        false\n+    }\n+}"}, {"sha": "84640b703c8021659b3cd61df5253896ce69086f", "filename": "compiler/rustc_mir_transform/src/inline.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -947,12 +947,12 @@ impl<'tcx> Visitor<'tcx> for CostChecker<'_, 'tcx> {\n                             return;\n                         };\n \n-                        let Some(&f_ty) = layout.field_tys.get(local) else {\n+                        let Some(f_ty) = layout.field_tys.get(local) else {\n                             self.validation = Err(\"malformed MIR\");\n                             return;\n                         };\n \n-                        f_ty\n+                        f_ty.ty\n                     } else {\n                         let Some(f_ty) = substs.as_generator().prefix_tys().nth(f.index()) else {\n                             self.validation = Err(\"malformed MIR\");"}, {"sha": "fe3d5b1cce4589470872382c17aa82a06d77af5f", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -123,6 +123,7 @@ pub fn provide(providers: &mut Providers) {\n         mir_drops_elaborated_and_const_checked,\n         mir_for_ctfe,\n         mir_for_ctfe_of_const_arg,\n+        mir_generator_witnesses: generator::mir_generator_witnesses,\n         optimized_mir,\n         is_mir_available,\n         is_ctfe_mir_available: |tcx, did| is_mir_available(tcx, did),\n@@ -425,6 +426,9 @@ fn mir_drops_elaborated_and_const_checked(\n         return tcx.mir_drops_elaborated_and_const_checked(def);\n     }\n \n+    if tcx.generator_kind(def.did).is_some() {\n+        tcx.ensure().mir_generator_witnesses(def.did);\n+    }\n     let mir_borrowck = tcx.mir_borrowck_opt_const_arg(def);\n \n     let is_fn_like = tcx.def_kind(def.did).is_fn_like();"}, {"sha": "59972b2e408bcac2e35b8350dcfd2859b38322d3", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -271,7 +271,8 @@ where\n             | ty::FnPtr(..)\n             | ty::Param(..)\n             | ty::Error(_)\n-            | ty::GeneratorWitness(..) => {}\n+            | ty::GeneratorWitness(..)\n+            | ty::GeneratorWitnessMIR(..) => {}\n             ty::Bound(..) | ty::Placeholder(..) | ty::Infer(..) => {\n                 bug!(\"unexpected type: {:?}\", ty)\n             }"}, {"sha": "66b100c103e4528292ae973b7e8bb0b8517e9704", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -1290,6 +1290,8 @@ options! {\n         (default: no)\"),\n     drop_tracking: bool = (false, parse_bool, [TRACKED],\n         \"enables drop tracking in generators (default: no)\"),\n+    drop_tracking_mir: bool = (false, parse_bool, [TRACKED],\n+        \"enables drop tracking on MIR in generators (default: no)\"),\n     dual_proc_macros: bool = (false, parse_bool, [TRACKED],\n         \"load proc macros for both target and host, but only link to the target (default: no)\"),\n     dump_dep_graph: bool = (false, parse_bool, [UNTRACKED],"}, {"sha": "c9b4ab0a38d6ee185538827ce623ac2c8f6b0424", "filename": "compiler/rustc_symbol_mangling/src/typeid/typeid_itanium_cxx_abi.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -640,6 +640,7 @@ fn encode_ty<'tcx>(\n         ty::Bound(..)\n         | ty::Error(..)\n         | ty::GeneratorWitness(..)\n+        | ty::GeneratorWitnessMIR(..)\n         | ty::Infer(..)\n         | ty::Alias(..)\n         | ty::Param(..)\n@@ -793,6 +794,7 @@ fn transform_ty<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>, options: TransformTyOptio\n         ty::Bound(..)\n         | ty::Error(..)\n         | ty::GeneratorWitness(..)\n+        | ty::GeneratorWitnessMIR(..)\n         | ty::Infer(..)\n         | ty::Alias(..)\n         | ty::Param(..)"}, {"sha": "00d1ff5ceedf7cc326dd1bc610b47b48f8cc962c", "filename": "compiler/rustc_symbol_mangling/src/v0.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -490,6 +490,7 @@ impl<'tcx> Printer<'tcx> for &mut SymbolMangler<'tcx> {\n             }\n \n             ty::GeneratorWitness(_) => bug!(\"symbol_names: unexpected `GeneratorWitness`\"),\n+            ty::GeneratorWitnessMIR(..) => bug!(\"symbol_names: unexpected `GeneratorWitnessMIR`\"),\n         }\n \n         // Only cache types that do not refer to an enclosing"}, {"sha": "0c18fc355e9ed0e8924dda6e96110143f50ffd33", "filename": "compiler/rustc_trait_selection/src/solve/assembly.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -331,6 +331,7 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n             | ty::Closure(..)\n             | ty::Generator(..)\n             | ty::GeneratorWitness(_)\n+            | ty::GeneratorWitnessMIR(..)\n             | ty::Never\n             | ty::Tuple(_)\n             | ty::Param(_)\n@@ -382,6 +383,7 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n             | ty::Closure(..)\n             | ty::Generator(..)\n             | ty::GeneratorWitness(_)\n+            | ty::GeneratorWitnessMIR(..)\n             | ty::Never\n             | ty::Tuple(_)\n             | ty::Param(_)"}, {"sha": "a2c15123b4fbd7cbb7e818c0bf6859f76ee845cb", "filename": "compiler/rustc_trait_selection/src/solve/fulfill.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ffulfill.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -40,12 +40,7 @@ impl<'tcx> TraitEngine<'tcx> for FulfillmentCtxt<'tcx> {\n         self.obligations.push(obligation);\n     }\n \n-    fn select_all_or_error(&mut self, infcx: &InferCtxt<'tcx>) -> Vec<FulfillmentError<'tcx>> {\n-        let errors = self.select_where_possible(infcx);\n-        if !errors.is_empty() {\n-            return errors;\n-        }\n-\n+    fn collect_remaining_errors(&mut self) -> Vec<FulfillmentError<'tcx>> {\n         self.obligations\n             .drain(..)\n             .map(|obligation| FulfillmentError {\n@@ -144,4 +139,11 @@ impl<'tcx> TraitEngine<'tcx> for FulfillmentCtxt<'tcx> {\n     fn pending_obligations(&self) -> Vec<PredicateObligation<'tcx>> {\n         self.obligations.clone()\n     }\n+\n+    fn drain_unstalled_obligations(\n+        &mut self,\n+        _: &InferCtxt<'tcx>,\n+    ) -> Vec<PredicateObligation<'tcx>> {\n+        unimplemented!()\n+    }\n }"}, {"sha": "518d6fff938021bd9da32cad2c5facf24e9a4ee6", "filename": "compiler/rustc_trait_selection/src/solve/project_goals.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -414,6 +414,7 @@ impl<'tcx> assembly::GoalKind<'tcx> for ProjectionPredicate<'tcx> {\n                 | ty::Infer(ty::IntVar(..) | ty::FloatVar(..))\n                 | ty::Generator(..)\n                 | ty::GeneratorWitness(..)\n+                | ty::GeneratorWitnessMIR(..)\n                 | ty::Never\n                 | ty::Foreign(..) => tcx.types.unit,\n "}, {"sha": "5007a019e1892a3995400c1a7fa8e2550743b284", "filename": "compiler/rustc_trait_selection/src/solve/trait_goals/structural_traits.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals%2Fstructural_traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals%2Fstructural_traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals%2Fstructural_traits.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -57,6 +57,8 @@ pub(super) fn instantiate_constituent_tys_for_auto_trait<'tcx>(\n             Ok(infcx.replace_bound_vars_with_placeholders(types).to_vec())\n         }\n \n+        ty::GeneratorWitnessMIR(..) => todo!(),\n+\n         // For `PhantomData<T>`, we pass `T`.\n         ty::Adt(def, substs) if def.is_phantom_data() => Ok(vec![substs.type_at(0)]),\n \n@@ -88,6 +90,7 @@ pub(super) fn instantiate_constituent_tys_for_sized_trait<'tcx>(\n         | ty::Ref(..)\n         | ty::Generator(..)\n         | ty::GeneratorWitness(..)\n+        | ty::GeneratorWitnessMIR(..)\n         | ty::Array(..)\n         | ty::Closure(..)\n         | ty::Never\n@@ -173,6 +176,8 @@ pub(super) fn instantiate_constituent_tys_for_copy_clone_trait<'tcx>(\n         ty::GeneratorWitness(types) => {\n             Ok(infcx.replace_bound_vars_with_placeholders(types).to_vec())\n         }\n+\n+        ty::GeneratorWitnessMIR(..) => todo!(),\n     }\n }\n \n@@ -215,6 +220,7 @@ pub(crate) fn extract_tupled_inputs_and_output_from_callable<'tcx>(\n         | ty::Dynamic(_, _, _)\n         | ty::Generator(_, _, _)\n         | ty::GeneratorWitness(_)\n+        | ty::GeneratorWitnessMIR(..)\n         | ty::Never\n         | ty::Tuple(_)\n         | ty::Alias(_, _)"}, {"sha": "e26bef0b8b7f5c11266b62ae0083304b82580d9a", "filename": "compiler/rustc_trait_selection/src/traits/chalk_fulfill.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fchalk_fulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fchalk_fulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fchalk_fulfill.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -40,15 +40,7 @@ impl<'tcx> TraitEngine<'tcx> for FulfillmentContext<'tcx> {\n         self.obligations.insert(obligation);\n     }\n \n-    fn select_all_or_error(&mut self, infcx: &InferCtxt<'tcx>) -> Vec<FulfillmentError<'tcx>> {\n-        {\n-            let errors = self.select_where_possible(infcx);\n-\n-            if !errors.is_empty() {\n-                return errors;\n-            }\n-        }\n-\n+    fn collect_remaining_errors(&mut self) -> Vec<FulfillmentError<'tcx>> {\n         // any remaining obligations are errors\n         self.obligations\n             .iter()\n@@ -143,6 +135,13 @@ impl<'tcx> TraitEngine<'tcx> for FulfillmentContext<'tcx> {\n         errors\n     }\n \n+    fn drain_unstalled_obligations(\n+        &mut self,\n+        _: &InferCtxt<'tcx>,\n+    ) -> Vec<PredicateObligation<'tcx>> {\n+        unimplemented!()\n+    }\n+\n     fn pending_obligations(&self) -> Vec<PredicateObligation<'tcx>> {\n         self.obligations.iter().cloned().collect()\n     }"}, {"sha": "61f508a7a0750c37746591d9c94ac3f14106b25d", "filename": "compiler/rustc_trait_selection/src/traits/coherence.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -696,7 +696,9 @@ impl<'tcx> TypeVisitor<'tcx> for OrphanChecker<'tcx> {\n             // This should only be created when checking whether we have to check whether some\n             // auto trait impl applies. There will never be multiple impls, so we can just\n             // act as if it were a local type here.\n-            ty::GeneratorWitness(_) => ControlFlow::Break(OrphanCheckEarlyExit::LocalTy(ty)),\n+            ty::GeneratorWitness(_) | ty::GeneratorWitnessMIR(..) => {\n+                ControlFlow::Break(OrphanCheckEarlyExit::LocalTy(ty))\n+            }\n             ty::Alias(ty::Opaque, ..) => {\n                 // This merits some explanation.\n                 // Normally, opaque types are not involved when performing"}, {"sha": "e9842b2cba516a6d692f71765f86b1b2e0a366d9", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 34, "deletions": 5, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -101,6 +101,18 @@ pub trait InferCtxtExt<'tcx> {\n }\n \n pub trait TypeErrCtxtExt<'tcx> {\n+    fn build_overflow_error<T>(\n+        &self,\n+        predicate: &T,\n+        span: Span,\n+        suggest_increasing_limit: bool,\n+    ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed>\n+    where\n+        T: fmt::Display\n+            + TypeFoldable<'tcx>\n+            + Print<'tcx, FmtPrinter<'tcx, 'tcx>, Output = FmtPrinter<'tcx, 'tcx>>,\n+        <T as Print<'tcx, FmtPrinter<'tcx, 'tcx>>>::Error: std::fmt::Debug;\n+\n     fn report_overflow_error<T>(\n         &self,\n         predicate: &T,\n@@ -478,6 +490,26 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         suggest_increasing_limit: bool,\n         mutate: impl FnOnce(&mut Diagnostic),\n     ) -> !\n+    where\n+        T: fmt::Display\n+            + TypeFoldable<'tcx>\n+            + Print<'tcx, FmtPrinter<'tcx, 'tcx>, Output = FmtPrinter<'tcx, 'tcx>>,\n+        <T as Print<'tcx, FmtPrinter<'tcx, 'tcx>>>::Error: std::fmt::Debug,\n+    {\n+        let mut err = self.build_overflow_error(predicate, span, suggest_increasing_limit);\n+        mutate(&mut err);\n+        err.emit();\n+\n+        self.tcx.sess.abort_if_errors();\n+        bug!();\n+    }\n+\n+    fn build_overflow_error<T>(\n+        &self,\n+        predicate: &T,\n+        span: Span,\n+        suggest_increasing_limit: bool,\n+    ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed>\n     where\n         T: fmt::Display\n             + TypeFoldable<'tcx>\n@@ -511,11 +543,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             self.suggest_new_overflow_limit(&mut err);\n         }\n \n-        mutate(&mut err);\n-\n-        err.emit();\n-        self.tcx.sess.abort_if_errors();\n-        bug!();\n+        err\n     }\n \n     /// Reports that an overflow has occurred and halts compilation. We\n@@ -1891,6 +1919,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                 ty::Generator(..) => Some(16),\n                 ty::Foreign(..) => Some(17),\n                 ty::GeneratorWitness(..) => Some(18),\n+                ty::GeneratorWitnessMIR(..) => Some(19),\n                 ty::Placeholder(..) | ty::Bound(..) | ty::Infer(..) | ty::Error(_) => None,\n             }\n         }"}, {"sha": "f7f787dea95b4d970bad5c5cfd4be6bfda3cc210", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 50, "deletions": 2, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -2226,7 +2226,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                     );\n \n                     match *ty.kind() {\n-                        ty::Generator(did, ..) => {\n+                        ty::Generator(did, ..) | ty::GeneratorWitnessMIR(did, _) => {\n                             generator = generator.or(Some(did));\n                             outer_generator = Some(did);\n                         }\n@@ -2256,7 +2256,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                     );\n \n                     match *ty.kind() {\n-                        ty::Generator(did, ..) => {\n+                        ty::Generator(did, ..) | ty::GeneratorWitnessMIR(did, ..) => {\n                             generator = generator.or(Some(did));\n                             outer_generator = Some(did);\n                         }\n@@ -2345,6 +2345,11 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             _ => return false,\n         };\n \n+        let generator_within_in_progress_typeck = match &self.typeck_results {\n+            Some(t) => t.hir_owner.to_def_id() == generator_did_root,\n+            _ => false,\n+        };\n+\n         let mut interior_or_upvar_span = None;\n \n         let from_awaited_ty = generator_data.get_from_await_ty(visitor, hir, ty_matches);\n@@ -2364,6 +2369,35 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                 *span,\n                 Some((*scope_span, *yield_span, *expr, from_awaited_ty)),\n             ));\n+\n+            if interior_or_upvar_span.is_none() && generator_data.is_foreign() {\n+                interior_or_upvar_span = Some(GeneratorInteriorOrUpvar::Interior(*span, None));\n+            }\n+        } else if self.tcx.sess.opts.unstable_opts.drop_tracking_mir\n+            // Avoid disclosing internal information to downstream crates.\n+            && generator_did.is_local()\n+            // Try to avoid cycles.\n+            && !generator_within_in_progress_typeck\n+        {\n+            let generator_info = &self.tcx.mir_generator_witnesses(generator_did);\n+            debug!(?generator_info);\n+\n+            'find_source: for (variant, source_info) in\n+                generator_info.variant_fields.iter().zip(&generator_info.variant_source_info)\n+            {\n+                debug!(?variant);\n+                for &local in variant {\n+                    let decl = &generator_info.field_tys[local];\n+                    debug!(?decl);\n+                    if ty_matches(ty::Binder::dummy(decl.ty)) && !decl.ignore_for_traits {\n+                        interior_or_upvar_span = Some(GeneratorInteriorOrUpvar::Interior(\n+                            decl.source_info.span,\n+                            Some((None, source_info.span, None, from_awaited_ty)),\n+                        ));\n+                        break 'find_source;\n+                    }\n+                }\n+            }\n         }\n \n         if interior_or_upvar_span.is_none() {\n@@ -3012,6 +3046,20 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                                 }\n                                 err.note(msg.trim_end_matches(\", \"))\n                             }\n+                            ty::GeneratorWitnessMIR(def_id, substs) => {\n+                                use std::fmt::Write;\n+\n+                                // FIXME: this is kind of an unusual format for rustc, can we make it more clear?\n+                                // Maybe we should just remove this note altogether?\n+                                // FIXME: only print types which don't meet the trait requirement\n+                                let mut msg =\n+                                    \"required because it captures the following types: \".to_owned();\n+                                for bty in tcx.generator_hidden_types(*def_id) {\n+                                    let ty = bty.subst(tcx, substs);\n+                                    write!(msg, \"`{}`, \", ty).unwrap();\n+                                }\n+                                err.note(msg.trim_end_matches(\", \"))\n+                            }\n                             ty::Generator(def_id, _, _) => {\n                                 let sp = self.tcx.def_span(def_id);\n "}, {"sha": "6c18bf8d22df830235169bac1a2ca38614cf8ce4", "filename": "compiler/rustc_trait_selection/src/traits/fulfill.rs", "status": "modified", "additions": 50, "deletions": 8, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -132,14 +132,7 @@ impl<'tcx> TraitEngine<'tcx> for FulfillmentContext<'tcx> {\n             .register_obligation(PendingPredicateObligation { obligation, stalled_on: vec![] });\n     }\n \n-    fn select_all_or_error(&mut self, infcx: &InferCtxt<'tcx>) -> Vec<FulfillmentError<'tcx>> {\n-        {\n-            let errors = self.select_where_possible(infcx);\n-            if !errors.is_empty() {\n-                return errors;\n-            }\n-        }\n-\n+    fn collect_remaining_errors(&mut self) -> Vec<FulfillmentError<'tcx>> {\n         self.predicates.to_errors(CodeAmbiguity).into_iter().map(to_fulfillment_error).collect()\n     }\n \n@@ -148,6 +141,55 @@ impl<'tcx> TraitEngine<'tcx> for FulfillmentContext<'tcx> {\n         self.select(selcx)\n     }\n \n+    fn drain_unstalled_obligations(\n+        &mut self,\n+        infcx: &InferCtxt<'tcx>,\n+    ) -> Vec<PredicateObligation<'tcx>> {\n+        let mut processor = DrainProcessor { removed_predicates: Vec::new(), infcx };\n+        let outcome: Outcome<_, _> = self.predicates.process_obligations(&mut processor);\n+        assert!(outcome.errors.is_empty());\n+        return processor.removed_predicates;\n+\n+        struct DrainProcessor<'a, 'tcx> {\n+            infcx: &'a InferCtxt<'tcx>,\n+            removed_predicates: Vec<PredicateObligation<'tcx>>,\n+        }\n+\n+        impl<'tcx> ObligationProcessor for DrainProcessor<'_, 'tcx> {\n+            type Obligation = PendingPredicateObligation<'tcx>;\n+            type Error = !;\n+            type OUT = Outcome<Self::Obligation, Self::Error>;\n+\n+            fn needs_process_obligation(&self, pending_obligation: &Self::Obligation) -> bool {\n+                pending_obligation\n+                    .stalled_on\n+                    .iter()\n+                    .any(|&var| self.infcx.ty_or_const_infer_var_changed(var))\n+            }\n+\n+            fn process_obligation(\n+                &mut self,\n+                pending_obligation: &mut PendingPredicateObligation<'tcx>,\n+            ) -> ProcessResult<PendingPredicateObligation<'tcx>, !> {\n+                assert!(self.needs_process_obligation(pending_obligation));\n+                self.removed_predicates.push(pending_obligation.obligation.clone());\n+                ProcessResult::Changed(vec![])\n+            }\n+\n+            fn process_backedge<'c, I>(\n+                &mut self,\n+                cycle: I,\n+                _marker: PhantomData<&'c PendingPredicateObligation<'tcx>>,\n+            ) -> Result<(), !>\n+            where\n+                I: Clone + Iterator<Item = &'c PendingPredicateObligation<'tcx>>,\n+            {\n+                self.removed_predicates.extend(cycle.map(|c| c.obligation.clone()));\n+                Ok(())\n+            }\n+        }\n+    }\n+\n     fn pending_obligations(&self) -> Vec<PredicateObligation<'tcx>> {\n         self.predicates.map_pending_obligations(|o| o.obligation.clone())\n     }"}, {"sha": "a11c5e819695296e429657dd82234c44c827c103", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -1605,6 +1605,7 @@ fn assemble_candidates_from_impls<'cx, 'tcx>(\n                         | ty::Closure(..)\n                         | ty::Generator(..)\n                         | ty::GeneratorWitness(..)\n+                        | ty::GeneratorWitnessMIR(..)\n                         | ty::Never\n                         | ty::Tuple(..)\n                         // Integers and floats always have `u8` as their discriminant.\n@@ -1654,6 +1655,7 @@ fn assemble_candidates_from_impls<'cx, 'tcx>(\n                         | ty::Closure(..)\n                         | ty::Generator(..)\n                         | ty::GeneratorWitness(..)\n+                        | ty::GeneratorWitnessMIR(..)\n                         | ty::Never\n                         // Extern types have unit metadata, according to RFC 2850\n                         | ty::Foreign(_)"}, {"sha": "455b53bfb7d8fa351b09487b74f46010f3765780", "filename": "compiler/rustc_trait_selection/src/traits/query/dropck_outlives.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fdropck_outlives.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -31,6 +31,7 @@ pub fn trivial_dropck_outlives<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> bool {\n         | ty::FnPtr(_)\n         | ty::Char\n         | ty::GeneratorWitness(..)\n+        | ty::GeneratorWitnessMIR(..)\n         | ty::RawPtr(_)\n         | ty::Ref(..)\n         | ty::Str"}, {"sha": "1b2533a5cf649ce303f556de21e725d5b64f107a", "filename": "compiler/rustc_trait_selection/src/traits/query/normalize.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -216,12 +216,16 @@ impl<'cx, 'tcx> FallibleTypeFolder<'tcx> for QueryNormalizer<'cx, 'tcx> {\n                         let substs = substs.try_fold_with(self)?;\n                         let recursion_limit = self.tcx().recursion_limit();\n                         if !recursion_limit.value_within_limit(self.anon_depth) {\n-                            self.infcx.err_ctxt().report_overflow_error(\n-                                &ty,\n-                                self.cause.span,\n-                                true,\n-                                |_| {},\n-                            );\n+                            // A closure or generator may have itself as in its upvars.\n+                            // This should be checked handled by the recursion check for opaque\n+                            // types, but we may end up here before that check can happen.\n+                            // In that case, we delay a bug to mark the trip, and continue without\n+                            // revealing the opaque.\n+                            self.infcx\n+                                .err_ctxt()\n+                                .build_overflow_error(&ty, self.cause.span, true)\n+                                .delay_as_bug();\n+                            return ty.try_super_fold_with(self);\n                         }\n \n                         let generic_ty = self.tcx().bound_type_of(def_id);"}, {"sha": "52f4d29181d2922005e6bfa99a31ae30dd6ecbdd", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -765,7 +765,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             | ty::Closure(..)\n             | ty::Generator(..)\n             | ty::Tuple(_)\n-            | ty::GeneratorWitness(_) => {\n+            | ty::GeneratorWitness(_)\n+            | ty::GeneratorWitnessMIR(..) => {\n                 // These are built-in, and cannot have a custom `impl const Destruct`.\n                 candidates.vec.push(ConstDestructCandidate(None));\n             }\n@@ -826,6 +827,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             | ty::Closure(_, _)\n             | ty::Generator(_, _, _)\n             | ty::GeneratorWitness(_)\n+            | ty::GeneratorWitnessMIR(..)\n             | ty::Never\n             | ty::Alias(..)\n             | ty::Param(_)"}, {"sha": "61d3531cfc44e71d4008c900f4e665256e1f60ee", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -13,7 +13,7 @@ use rustc_infer::infer::InferOk;\n use rustc_infer::infer::LateBoundRegionConversionTime::HigherRankedType;\n use rustc_middle::ty::{\n     self, Binder, GenericArg, GenericArgKind, GenericParamDefKind, InternalSubsts, SubstsRef,\n-    ToPolyTraitRef, ToPredicate, TraitRef, Ty, TyCtxt,\n+    ToPolyTraitRef, ToPredicate, TraitRef, Ty, TyCtxt, TypeVisitable,\n };\n use rustc_session::config::TraitSolver;\n use rustc_span::def_id::DefId;\n@@ -1285,6 +1285,14 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 ty::GeneratorWitness(tys) => {\n                     stack.extend(tcx.erase_late_bound_regions(tys).to_vec());\n                 }\n+                ty::GeneratorWitnessMIR(def_id, substs) => {\n+                    let tcx = self.tcx();\n+                    stack.extend(tcx.generator_hidden_types(def_id).map(|bty| {\n+                        let ty = bty.subst(tcx, substs);\n+                        debug_assert!(!ty.has_late_bound_regions());\n+                        ty\n+                    }))\n+                }\n \n                 // If we have a projection type, make sure to normalize it so we replace it\n                 // with a fresh infer variable"}, {"sha": "efd21b979ceb58289dfc7933dd5145841bda46d7", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -2066,6 +2066,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             | ty::Ref(..)\n             | ty::Generator(..)\n             | ty::GeneratorWitness(..)\n+            | ty::GeneratorWitnessMIR(..)\n             | ty::Array(..)\n             | ty::Closure(..)\n             | ty::Never\n@@ -2182,6 +2183,16 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 Where(ty::Binder::bind_with_vars(witness_tys.to_vec(), all_vars))\n             }\n \n+            ty::GeneratorWitnessMIR(def_id, ref substs) => {\n+                let hidden_types = bind_generator_hidden_types_above(\n+                    self.infcx,\n+                    def_id,\n+                    substs,\n+                    obligation.predicate.bound_vars(),\n+                );\n+                Where(hidden_types)\n+            }\n+\n             ty::Closure(_, substs) => {\n                 // (*) binder moved here\n                 let ty = self.infcx.shallow_resolve(substs.as_closure().tupled_upvars_ty());\n@@ -2279,6 +2290,10 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 types.map_bound(|types| types.to_vec())\n             }\n \n+            ty::GeneratorWitnessMIR(def_id, ref substs) => {\n+                bind_generator_hidden_types_above(self.infcx, def_id, substs, t.bound_vars())\n+            }\n+\n             // For `PhantomData<T>`, we pass `T`.\n             ty::Adt(def, substs) if def.is_phantom_data() => t.rebind(substs.types().collect()),\n \n@@ -2921,3 +2936,56 @@ pub enum ProjectionMatchesProjection {\n     Ambiguous,\n     No,\n }\n+\n+/// Replace all regions inside the generator interior with late bound regions.\n+/// Note that each region slot in the types gets a new fresh late bound region, which means that\n+/// none of the regions inside relate to any other, even if typeck had previously found constraints\n+/// that would cause them to be related.\n+#[instrument(level = \"trace\", skip(infcx), ret)]\n+fn bind_generator_hidden_types_above<'tcx>(\n+    infcx: &InferCtxt<'tcx>,\n+    def_id: DefId,\n+    substs: ty::SubstsRef<'tcx>,\n+    bound_vars: &ty::List<ty::BoundVariableKind>,\n+) -> ty::Binder<'tcx, Vec<Ty<'tcx>>> {\n+    let tcx = infcx.tcx;\n+    let mut seen_tys = FxHashSet::default();\n+\n+    let considering_regions = infcx.considering_regions;\n+\n+    let num_bound_variables = bound_vars.len() as u32;\n+    let mut counter = num_bound_variables;\n+\n+    let hidden_types: Vec<_> = tcx\n+        .generator_hidden_types(def_id)\n+        // Deduplicate tys to avoid repeated work.\n+        .filter(|bty| seen_tys.insert(*bty))\n+        .map(|bty| {\n+            let mut ty = bty.subst(tcx, substs);\n+\n+            // Only remap erased regions if we use them.\n+            if considering_regions {\n+                ty = tcx.fold_regions(ty, |mut r, current_depth| {\n+                    if let ty::ReErased = r.kind() {\n+                        let br = ty::BoundRegion {\n+                            var: ty::BoundVar::from_u32(counter),\n+                            kind: ty::BrAnon(counter, None),\n+                        };\n+                        counter += 1;\n+                        r = tcx.mk_region(ty::ReLateBound(current_depth, br));\n+                    }\n+                    r\n+                })\n+            }\n+\n+            ty\n+        })\n+        .collect();\n+    if considering_regions {\n+        debug_assert!(!hidden_types.has_erased_regions());\n+    }\n+    let bound_vars = tcx.mk_bound_variable_kinds(bound_vars.iter().chain(\n+        (num_bound_variables..counter).map(|i| ty::BoundVariableKind::Region(ty::BrAnon(i, None))),\n+    ));\n+    ty::Binder::bind_with_vars(hidden_types, bound_vars)\n+}"}, {"sha": "69b965f3a389a58ca3ed4c2ce218c3e0cd2431d9", "filename": "compiler/rustc_trait_selection/src/traits/structural_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -101,7 +101,7 @@ impl<'tcx> TypeVisitor<'tcx> for Search<'tcx> {\n             ty::Closure(..) => {\n                 return ControlFlow::Break(ty);\n             }\n-            ty::Generator(..) | ty::GeneratorWitness(..) => {\n+            ty::Generator(..) | ty::GeneratorWitness(..) | ty::GeneratorWitnessMIR(..) => {\n                 return ControlFlow::Break(ty);\n             }\n             ty::FnDef(..) => {"}, {"sha": "7c5e147a950f19ba225a50d558f876e04ccc4647", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -551,6 +551,7 @@ impl<'tcx> WfPredicates<'tcx> {\n                 | ty::Error(_)\n                 | ty::Str\n                 | ty::GeneratorWitness(..)\n+                | ty::GeneratorWitnessMIR(..)\n                 | ty::Never\n                 | ty::Param(_)\n                 | ty::Bound(..)"}, {"sha": "3a254105162095aae614f679bf85c39eaa2abe62", "filename": "compiler/rustc_traits/src/chalk/lowering.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -343,6 +343,7 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::Ty<RustInterner<'tcx>>> for Ty<'tcx> {\n                 substs.lower_into(interner),\n             ),\n             ty::GeneratorWitness(_) => unimplemented!(),\n+            ty::GeneratorWitnessMIR(..) => unimplemented!(),\n             ty::Never => chalk_ir::TyKind::Never,\n             ty::Tuple(types) => {\n                 chalk_ir::TyKind::Tuple(types.len(), types.as_substs().lower_into(interner))"}, {"sha": "6f81d343e0fd85f54a66dc1921a2033116a94962", "filename": "compiler/rustc_traits/src/codegen.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_traits%2Fsrc%2Fcodegen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_traits%2Fsrc%2Fcodegen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fcodegen.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -4,7 +4,7 @@\n // general routines.\n \n use rustc_infer::infer::{DefiningAnchor, TyCtxtInferExt};\n-use rustc_infer::traits::FulfillmentErrorCode;\n+use rustc_infer::traits::{FulfillmentErrorCode, TraitEngineExt as _};\n use rustc_middle::traits::CodegenObligationError;\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_trait_selection::traits::error_reporting::TypeErrCtxtExt;"}, {"sha": "8b7f8033bfaceb7d7636eb89ab1576f43db2925c", "filename": "compiler/rustc_traits/src/dropck_outlives.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_traits%2Fsrc%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_traits%2Fsrc%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fdropck_outlives.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -164,7 +164,8 @@ fn dtorck_constraint_for_ty<'tcx>(\n         | ty::Ref(..)\n         | ty::FnDef(..)\n         | ty::FnPtr(_)\n-        | ty::GeneratorWitness(..) => {\n+        | ty::GeneratorWitness(..)\n+        | ty::GeneratorWitnessMIR(..) => {\n             // these types never have a destructor\n         }\n "}, {"sha": "378cd5a99ed864ce3bdd23a2fbb20d2216109ac1", "filename": "compiler/rustc_ty_utils/src/layout.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -470,7 +470,10 @@ fn layout_of_uncached<'tcx>(\n             return Err(LayoutError::Unknown(ty));\n         }\n \n-        ty::Placeholder(..) | ty::GeneratorWitness(..) | ty::Infer(_) => {\n+        ty::Placeholder(..)\n+        | ty::GeneratorWitness(..)\n+        | ty::GeneratorWitnessMIR(..)\n+        | ty::Infer(_) => {\n             bug!(\"Layout::compute: unexpected type `{}`\", ty)\n         }\n \n@@ -640,7 +643,7 @@ fn generator_layout<'tcx>(\n \n     let promoted_layouts = ineligible_locals\n         .iter()\n-        .map(|local| subst_field(info.field_tys[local]))\n+        .map(|local| subst_field(info.field_tys[local].ty))\n         .map(|ty| tcx.mk_maybe_uninit(ty))\n         .map(|ty| cx.layout_of(ty));\n     let prefix_layouts = substs\n@@ -710,7 +713,7 @@ fn generator_layout<'tcx>(\n                     Assigned(_) => bug!(\"assignment does not match variant\"),\n                     Ineligible(_) => false,\n                 })\n-                .map(|local| subst_field(info.field_tys[*local]));\n+                .map(|local| subst_field(info.field_tys[*local].ty));\n \n             let mut variant = univariant_uninterned(\n                 cx,"}, {"sha": "cd1475391a4d90f5e9c6c0849896986170c6c583", "filename": "compiler/rustc_ty_utils/src/needs_drop.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_ty_utils%2Fsrc%2Fneeds_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_ty_utils%2Fsrc%2Fneeds_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fneeds_drop.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -109,6 +109,13 @@ where\n \n             for component in components {\n                 match *component.kind() {\n+                    // The information required to determine whether a generator has drop is\n+                    // computed on MIR, while this very method is used to build MIR.\n+                    // To avoid cycles, we consider that generators always require drop.\n+                    ty::Generator(..) if tcx.sess.opts.unstable_opts.drop_tracking_mir => {\n+                        return Some(Err(AlwaysRequiresDrop));\n+                    }\n+\n                     _ if component.is_copy_modulo_regions(tcx, self.param_env) => (),\n \n                     ty::Closure(_, substs) => {"}, {"sha": "89abffebdc68406b887a4b73f54303a3164065ba", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -16,7 +16,13 @@ fn sized_constraint_for_ty<'tcx>(\n         Bool | Char | Int(..) | Uint(..) | Float(..) | RawPtr(..) | Ref(..) | FnDef(..)\n         | FnPtr(_) | Array(..) | Closure(..) | Generator(..) | Never => vec![],\n \n-        Str | Dynamic(..) | Slice(_) | Foreign(..) | Error(_) | GeneratorWitness(..) => {\n+        Str\n+        | Dynamic(..)\n+        | Slice(_)\n+        | Foreign(..)\n+        | Error(_)\n+        | GeneratorWitness(..)\n+        | GeneratorWitnessMIR(..) => {\n             // these are never sized - return the target type\n             vec![ty]\n         }"}, {"sha": "d5de457a82ce98ece71342abaa4d3ff6f0ee2225", "filename": "compiler/rustc_type_ir/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -265,6 +265,9 @@ bitflags! {\n \n         /// Does this value have `InferConst::Fresh`?\n         const HAS_CT_FRESH                = 1 << 21;\n+\n+        /// Does this have `Generator` or `GeneratorWitness`?\n+        const HAS_TY_GENERATOR            = 1 << 22;\n     }\n }\n "}, {"sha": "e7bb30553736c492533962e8f576f1101a43e87b", "filename": "compiler/rustc_type_ir/src/sty.rs", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_type_ir%2Fsrc%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/compiler%2Frustc_type_ir%2Fsrc%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_type_ir%2Fsrc%2Fsty.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -160,6 +160,32 @@ pub enum TyKind<I: Interner> {\n     /// ```\n     GeneratorWitness(I::BinderListTy),\n \n+    /// A type representing the types stored inside a generator.\n+    /// This should only appear as part of the `GeneratorSubsts`.\n+    ///\n+    /// Unlike upvars, the witness can reference lifetimes from\n+    /// inside of the generator itself. To deal with them in\n+    /// the type of the generator, we convert them to higher ranked\n+    /// lifetimes bound by the witness itself.\n+    ///\n+    /// This variant is only using when `drop_tracking_mir` is set.\n+    /// This contains the `DefId` and the `SubstRef` of the generator.\n+    /// The actual witness types are computed on MIR by the `mir_generator_witnesses` query.\n+    ///\n+    /// Looking at the following example, the witness for this generator\n+    /// may end up as something like `for<'a> [Vec<i32>, &'a Vec<i32>]`:\n+    ///\n+    /// ```ignore UNSOLVED (ask @compiler-errors, should this error? can we just swap the yields?)\n+    /// #![feature(generators)]\n+    /// |a| {\n+    ///     let x = &vec![3];\n+    ///     yield a;\n+    ///     yield x[0];\n+    /// }\n+    /// # ;\n+    /// ```\n+    GeneratorWitnessMIR(I::DefId, I::SubstsRef),\n+\n     /// The never type `!`.\n     Never,\n \n@@ -241,6 +267,7 @@ const fn tykind_discriminant<I: Interner>(value: &TyKind<I>) -> usize {\n         Placeholder(_) => 23,\n         Infer(_) => 24,\n         Error(_) => 25,\n+        GeneratorWitnessMIR(_, _) => 26,\n     }\n }\n \n@@ -266,6 +293,7 @@ impl<I: Interner> Clone for TyKind<I> {\n             Closure(d, s) => Closure(d.clone(), s.clone()),\n             Generator(d, s, m) => Generator(d.clone(), s.clone(), m.clone()),\n             GeneratorWitness(g) => GeneratorWitness(g.clone()),\n+            GeneratorWitnessMIR(d, s) => GeneratorWitnessMIR(d.clone(), s.clone()),\n             Never => Never,\n             Tuple(t) => Tuple(t.clone()),\n             Alias(k, p) => Alias(*k, p.clone()),\n@@ -303,6 +331,10 @@ impl<I: Interner> PartialEq for TyKind<I> {\n                     a_d == b_d && a_s == b_s && a_m == b_m\n                 }\n                 (GeneratorWitness(a_g), GeneratorWitness(b_g)) => a_g == b_g,\n+                (\n+                    &GeneratorWitnessMIR(ref a_d, ref a_s),\n+                    &GeneratorWitnessMIR(ref b_d, ref b_s),\n+                ) => a_d == b_d && a_s == b_s,\n                 (Tuple(a_t), Tuple(b_t)) => a_t == b_t,\n                 (Alias(a_i, a_p), Alias(b_i, b_p)) => a_i == b_i && a_p == b_p,\n                 (Param(a_p), Param(b_p)) => a_p == b_p,\n@@ -360,6 +392,13 @@ impl<I: Interner> Ord for TyKind<I> {\n                     a_d.cmp(b_d).then_with(|| a_s.cmp(b_s).then_with(|| a_m.cmp(b_m)))\n                 }\n                 (GeneratorWitness(a_g), GeneratorWitness(b_g)) => a_g.cmp(b_g),\n+                (\n+                    &GeneratorWitnessMIR(ref a_d, ref a_s),\n+                    &GeneratorWitnessMIR(ref b_d, ref b_s),\n+                ) => match Ord::cmp(a_d, b_d) {\n+                    Ordering::Equal => Ord::cmp(a_s, b_s),\n+                    cmp => cmp,\n+                },\n                 (Tuple(a_t), Tuple(b_t)) => a_t.cmp(b_t),\n                 (Alias(a_i, a_p), Alias(b_i, b_p)) => a_i.cmp(b_i).then_with(|| a_p.cmp(b_p)),\n                 (Param(a_p), Param(b_p)) => a_p.cmp(b_p),\n@@ -421,6 +460,10 @@ impl<I: Interner> hash::Hash for TyKind<I> {\n                 m.hash(state)\n             }\n             GeneratorWitness(g) => g.hash(state),\n+            GeneratorWitnessMIR(d, s) => {\n+                d.hash(state);\n+                s.hash(state);\n+            }\n             Tuple(t) => t.hash(state),\n             Alias(i, p) => {\n                 i.hash(state);\n@@ -461,6 +504,7 @@ impl<I: Interner> fmt::Debug for TyKind<I> {\n             Closure(d, s) => f.debug_tuple_field2_finish(\"Closure\", d, s),\n             Generator(d, s, m) => f.debug_tuple_field3_finish(\"Generator\", d, s, m),\n             GeneratorWitness(g) => f.debug_tuple_field1_finish(\"GeneratorWitness\", g),\n+            GeneratorWitnessMIR(d, s) => f.debug_tuple_field2_finish(\"GeneratorWitnessMIR\", d, s),\n             Never => f.write_str(\"Never\"),\n             Tuple(t) => f.debug_tuple_field1_finish(\"Tuple\", t),\n             Alias(i, a) => f.debug_tuple_field2_finish(\"Alias\", i, a),\n@@ -559,6 +603,10 @@ where\n             GeneratorWitness(b) => e.emit_enum_variant(disc, |e| {\n                 b.encode(e);\n             }),\n+            GeneratorWitnessMIR(def_id, substs) => e.emit_enum_variant(disc, |e| {\n+                def_id.encode(e);\n+                substs.encode(e);\n+            }),\n             Never => e.emit_enum_variant(disc, |_| {}),\n             Tuple(substs) => e.emit_enum_variant(disc, |e| {\n                 substs.encode(e);\n@@ -641,6 +689,7 @@ where\n             23 => Placeholder(Decodable::decode(d)),\n             24 => Infer(Decodable::decode(d)),\n             25 => Error(Decodable::decode(d)),\n+            26 => GeneratorWitnessMIR(Decodable::decode(d), Decodable::decode(d)),\n             _ => panic!(\n                 \"{}\",\n                 format!(\n@@ -742,6 +791,10 @@ where\n             GeneratorWitness(b) => {\n                 b.hash_stable(__hcx, __hasher);\n             }\n+            GeneratorWitnessMIR(def_id, substs) => {\n+                def_id.hash_stable(__hcx, __hasher);\n+                substs.hash_stable(__hcx, __hasher);\n+            }\n             Never => {}\n             Tuple(substs) => {\n                 substs.hash_stable(__hcx, __hasher);"}, {"sha": "614a262beda9bbc51e0ab20f06bd510adeb87d96", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -1855,6 +1855,7 @@ pub(crate) fn clean_middle_ty<'tcx>(\n         ty::Bound(..) => panic!(\"Bound\"),\n         ty::Placeholder(..) => panic!(\"Placeholder\"),\n         ty::GeneratorWitness(..) => panic!(\"GeneratorWitness\"),\n+        ty::GeneratorWitnessMIR(..) => panic!(\"GeneratorWitnessMIR\"),\n         ty::Infer(..) => panic!(\"Infer\"),\n         ty::Error(_) => rustc_errors::FatalError.raise(),\n     }"}, {"sha": "8435972bb11f2805ba6252f3b6eab16f2fa0bf14", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -542,6 +542,7 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n             | ty::Closure(..)\n             | ty::Generator(..)\n             | ty::GeneratorWitness(_)\n+            | ty::GeneratorWitnessMIR(..)\n             | ty::Dynamic(..)\n             | ty::Param(_)\n             | ty::Bound(..)"}, {"sha": "8e921839e8b2fd48ac55a06530d3f33ee8a35390", "filename": "src/tools/clippy/clippy_lints/src/dereference.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdereference.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -1419,6 +1419,7 @@ fn ty_auto_deref_stability<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>, precedenc\n             | ty::FnDef(..)\n             | ty::Generator(..)\n             | ty::GeneratorWitness(..)\n+            | ty::GeneratorWitnessMIR(..)\n             | ty::Closure(..)\n             | ty::Never\n             | ty::Tuple(_)"}, {"sha": "1449247aedad3c57808717a5d60703b4652146cb", "filename": "tests/mir-opt/building/async_await.b-{closure#0}.generator_resume.0.mir", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fmir-opt%2Fbuilding%2Fasync_await.b-%7Bclosure%230%7D.generator_resume.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fmir-opt%2Fbuilding%2Fasync_await.b-%7Bclosure%230%7D.generator_resume.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fasync_await.b-%7Bclosure%230%7D.generator_resume.0.mir?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -1,8 +1,22 @@\n // MIR for `b::{closure#0}` 0 generator_resume\n /* generator_layout = GeneratorLayout {\n     field_tys: {\n-        _0: impl std::future::Future<Output = ()>,\n-        _1: impl std::future::Future<Output = ()>,\n+        _0: GeneratorSavedTy {\n+            ty: impl std::future::Future<Output = ()>,\n+            source_info: SourceInfo {\n+                span: $DIR/async_await.rs:15:8: 15:14 (#9),\n+                scope: scope[0],\n+            },\n+            ignore_for_traits: false,\n+        },\n+        _1: GeneratorSavedTy {\n+            ty: impl std::future::Future<Output = ()>,\n+            source_info: SourceInfo {\n+                span: $DIR/async_await.rs:16:8: 16:14 (#12),\n+                scope: scope[0],\n+            },\n+            ignore_for_traits: false,\n+        },\n     },\n     variant_fields: {\n         Unresumed(0): [],"}, {"sha": "afe518642146fcd0c40e9b63678fabe8137e5812", "filename": "tests/mir-opt/generator_drop_cleanup.main-{closure#0}.generator_drop.0.mir", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fmir-opt%2Fgenerator_drop_cleanup.main-%7Bclosure%230%7D.generator_drop.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fmir-opt%2Fgenerator_drop_cleanup.main-%7Bclosure%230%7D.generator_drop.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fgenerator_drop_cleanup.main-%7Bclosure%230%7D.generator_drop.0.mir?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -1,7 +1,14 @@\n // MIR for `main::{closure#0}` 0 generator_drop\n /* generator_layout = GeneratorLayout {\n     field_tys: {\n-        _0: std::string::String,\n+        _0: GeneratorSavedTy {\n+            ty: std::string::String,\n+            source_info: SourceInfo {\n+                span: $DIR/generator_drop_cleanup.rs:11:13: 11:15 (#0),\n+                scope: scope[0],\n+            },\n+            ignore_for_traits: false,\n+        },\n     },\n     variant_fields: {\n         Unresumed(0): [],"}, {"sha": "2f096c3e0a189e07c2b25dab943efc4f9e03b119", "filename": "tests/mir-opt/generator_tiny.main-{closure#0}.generator_resume.0.mir", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fmir-opt%2Fgenerator_tiny.main-%7Bclosure%230%7D.generator_resume.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fmir-opt%2Fgenerator_tiny.main-%7Bclosure%230%7D.generator_resume.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fgenerator_tiny.main-%7Bclosure%230%7D.generator_resume.0.mir?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -1,7 +1,14 @@\n // MIR for `main::{closure#0}` 0 generator_resume\n /* generator_layout = GeneratorLayout {\n     field_tys: {\n-        _0: HasDrop,\n+        _0: GeneratorSavedTy {\n+            ty: HasDrop,\n+            source_info: SourceInfo {\n+                span: $DIR/generator_tiny.rs:20:13: 20:15 (#0),\n+                scope: scope[0],\n+            },\n+            ignore_for_traits: false,\n+        },\n     },\n     variant_fields: {\n         Unresumed(0): [],"}, {"sha": "546df947c0f910e24daf713f13d986774836b607", "filename": "tests/rustdoc-ui/z-help.stdout", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Frustdoc-ui%2Fz-help.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Frustdoc-ui%2Fz-help.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fz-help.stdout?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -20,6 +20,7 @@\n     -Z                                 dlltool=val -- import library generation tool (windows-gnu only)\n     -Z                 dont-buffer-diagnostics=val -- emit diagnostics rather than buffering (breaks NLL error downgrading, sorting) (default: no)\n     -Z                           drop-tracking=val -- enables drop tracking in generators (default: no)\n+    -Z                       drop-tracking-mir=val -- enables drop tracking on MIR in generators (default: no)\n     -Z                        dual-proc-macros=val -- load proc macros for both target and host, but only link to the target (default: no)\n     -Z                          dump-dep-graph=val -- dump the dependency graph to $RUST_DEP_GRAPH (default: /tmp/dep_graph.gv) (default: no)\n     -Z                  dump-drop-tracking-cfg=val -- dump drop-tracking control-flow graph as a `.dot` file (default: no)"}, {"sha": "bf655510a5ad88c1051e1bacd8f49e4d25b7eaf3", "filename": "tests/ui-fulldeps/internal-lints/ty_tykind_usage.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui-fulldeps%2Finternal-lints%2Fty_tykind_usage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui-fulldeps%2Finternal-lints%2Fty_tykind_usage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-fulldeps%2Finternal-lints%2Fty_tykind_usage.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -31,6 +31,7 @@ fn main() {\n         TyKind::Closure(..) => (),          //~ ERROR usage of `ty::TyKind::<kind>`\n         TyKind::Generator(..) => (),        //~ ERROR usage of `ty::TyKind::<kind>`\n         TyKind::GeneratorWitness(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+        TyKind::GeneratorWitnessMIR(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n         TyKind::Never => (),                //~ ERROR usage of `ty::TyKind::<kind>`\n         TyKind::Tuple(..) => (),            //~ ERROR usage of `ty::TyKind::<kind>`\n         TyKind::Alias(..) => (),            //~ ERROR usage of `ty::TyKind::<kind>`"}, {"sha": "9f8c0bea0eeff5df39bbb7c32df95e0e3bd47e5e", "filename": "tests/ui-fulldeps/internal-lints/ty_tykind_usage.stderr", "status": "modified", "additions": 19, "deletions": 13, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui-fulldeps%2Finternal-lints%2Fty_tykind_usage.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui-fulldeps%2Finternal-lints%2Fty_tykind_usage.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-fulldeps%2Finternal-lints%2Fty_tykind_usage.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -121,88 +121,94 @@ LL |         TyKind::GeneratorWitness(..) => (),\n error: usage of `ty::TyKind::<kind>`\n   --> $DIR/ty_tykind_usage.rs:34:9\n    |\n-LL |         TyKind::Never => (),\n+LL |         TyKind::GeneratorWitnessMIR(..) => (),\n    |         ^^^^^^ help: try using `ty::<kind>` directly: `ty`\n \n error: usage of `ty::TyKind::<kind>`\n   --> $DIR/ty_tykind_usage.rs:35:9\n    |\n-LL |         TyKind::Tuple(..) => (),\n+LL |         TyKind::Never => (),\n    |         ^^^^^^ help: try using `ty::<kind>` directly: `ty`\n \n error: usage of `ty::TyKind::<kind>`\n   --> $DIR/ty_tykind_usage.rs:36:9\n    |\n-LL |         TyKind::Alias(..) => (),\n+LL |         TyKind::Tuple(..) => (),\n    |         ^^^^^^ help: try using `ty::<kind>` directly: `ty`\n \n error: usage of `ty::TyKind::<kind>`\n   --> $DIR/ty_tykind_usage.rs:37:9\n    |\n-LL |         TyKind::Param(..) => (),\n+LL |         TyKind::Alias(..) => (),\n    |         ^^^^^^ help: try using `ty::<kind>` directly: `ty`\n \n error: usage of `ty::TyKind::<kind>`\n   --> $DIR/ty_tykind_usage.rs:38:9\n    |\n-LL |         TyKind::Bound(..) => (),\n+LL |         TyKind::Param(..) => (),\n    |         ^^^^^^ help: try using `ty::<kind>` directly: `ty`\n \n error: usage of `ty::TyKind::<kind>`\n   --> $DIR/ty_tykind_usage.rs:39:9\n    |\n-LL |         TyKind::Placeholder(..) => (),\n+LL |         TyKind::Bound(..) => (),\n    |         ^^^^^^ help: try using `ty::<kind>` directly: `ty`\n \n error: usage of `ty::TyKind::<kind>`\n   --> $DIR/ty_tykind_usage.rs:40:9\n    |\n-LL |         TyKind::Infer(..) => (),\n+LL |         TyKind::Placeholder(..) => (),\n    |         ^^^^^^ help: try using `ty::<kind>` directly: `ty`\n \n error: usage of `ty::TyKind::<kind>`\n   --> $DIR/ty_tykind_usage.rs:41:9\n    |\n+LL |         TyKind::Infer(..) => (),\n+   |         ^^^^^^ help: try using `ty::<kind>` directly: `ty`\n+\n+error: usage of `ty::TyKind::<kind>`\n+  --> $DIR/ty_tykind_usage.rs:42:9\n+   |\n LL |         TyKind::Error(_) => (),\n    |         ^^^^^^ help: try using `ty::<kind>` directly: `ty`\n \n error: usage of `ty::TyKind::<kind>`\n-  --> $DIR/ty_tykind_usage.rs:46:12\n+  --> $DIR/ty_tykind_usage.rs:47:12\n    |\n LL |     if let TyKind::Int(int_ty) = kind {}\n    |            ^^^^^^ help: try using `ty::<kind>` directly: `ty`\n \n error: usage of `ty::TyKind`\n-  --> $DIR/ty_tykind_usage.rs:48:24\n+  --> $DIR/ty_tykind_usage.rs:49:24\n    |\n LL |     fn ty_kind(ty_bad: TyKind<'_>, ty_good: Ty<'_>) {}\n    |                        ^^^^^^^^^^\n    |\n    = help: try using `Ty` instead\n \n error: usage of `ty::TyKind`\n-  --> $DIR/ty_tykind_usage.rs:50:37\n+  --> $DIR/ty_tykind_usage.rs:51:37\n    |\n LL |     fn ir_ty_kind<I: Interner>(bad: IrTyKind<I>) -> IrTyKind<I> {\n    |                                     ^^^^^^^^^^^\n    |\n    = help: try using `Ty` instead\n \n error: usage of `ty::TyKind`\n-  --> $DIR/ty_tykind_usage.rs:50:53\n+  --> $DIR/ty_tykind_usage.rs:51:53\n    |\n LL |     fn ir_ty_kind<I: Interner>(bad: IrTyKind<I>) -> IrTyKind<I> {\n    |                                                     ^^^^^^^^^^^\n    |\n    = help: try using `Ty` instead\n \n error: usage of `ty::TyKind::<kind>`\n-  --> $DIR/ty_tykind_usage.rs:53:9\n+  --> $DIR/ty_tykind_usage.rs:54:9\n    |\n LL |         IrTyKind::Bool\n    |         --------^^^^^^\n    |         |\n    |         help: try using `ty::<kind>` directly: `ty`\n \n-error: aborting due to 32 previous errors\n+error: aborting due to 33 previous errors\n "}, {"sha": "fb83ca90a37873dcbcb572a25e6ff5c676dc5f55", "filename": "tests/ui/async-await/async-await-let-else.drop_tracking.stderr", "status": "added", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fasync-await-let-else.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fasync-await-let-else.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fasync-await-let-else.drop_tracking.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -0,0 +1,106 @@\n+error: future cannot be sent between threads safely\n+  --> $DIR/async-await-let-else.rs:48:13\n+   |\n+LL |     is_send(foo(Some(true)));\n+   |             ^^^^^^^^^^^^^^^ future returned by `foo` is not `Send`\n+   |\n+   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Rc<()>`\n+note: future is not `Send` as this value is used across an await\n+  --> $DIR/async-await-let-else.rs:11:14\n+   |\n+LL |         let r = Rc::new(());\n+   |             - has type `Rc<()>` which is not `Send`\n+LL |         bar().await\n+   |              ^^^^^^ await occurs here, with `r` maybe used later\n+LL |     };\n+   |     - `r` is later dropped here\n+note: required by a bound in `is_send`\n+  --> $DIR/async-await-let-else.rs:19:15\n+   |\n+LL | fn is_send<T: Send>(_: T) {}\n+   |               ^^^^ required by this bound in `is_send`\n+\n+error[E0277]: `Rc<()>` cannot be sent between threads safely\n+  --> $DIR/async-await-let-else.rs:50:13\n+   |\n+LL | async fn foo2(x: Option<bool>) {\n+   |                                - within this `impl Future<Output = ()>`\n+...\n+LL |     is_send(foo2(Some(true)));\n+   |     ------- ^^^^^^^^^^^^^^^^ `Rc<()>` cannot be sent between threads safely\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Rc<()>`\n+note: required because it's used within this `async fn` body\n+  --> $DIR/async-await-let-else.rs:27:29\n+   |\n+LL |   async fn bar2<T>(_: T) -> ! {\n+   |  _____________________________^\n+LL | |     panic!()\n+LL | | }\n+   | |_^\n+   = note: required because it captures the following types: `ResumeTy`, `Option<bool>`, `impl Future<Output = !>`, `()`\n+note: required because it's used within this `async fn` body\n+  --> $DIR/async-await-let-else.rs:21:32\n+   |\n+LL |   async fn foo2(x: Option<bool>) {\n+   |  ________________________________^\n+LL | |     let Some(_) = x else {\n+LL | |         bar2(Rc::new(())).await\n+LL | |     };\n+LL | | }\n+   | |_^\n+note: required by a bound in `is_send`\n+  --> $DIR/async-await-let-else.rs:19:15\n+   |\n+LL | fn is_send<T: Send>(_: T) {}\n+   |               ^^^^ required by this bound in `is_send`\n+\n+error: future cannot be sent between threads safely\n+  --> $DIR/async-await-let-else.rs:52:13\n+   |\n+LL |     is_send(foo3(Some(true)));\n+   |             ^^^^^^^^^^^^^^^^ future returned by `foo3` is not `Send`\n+   |\n+   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Rc<()>`\n+note: future is not `Send` as this value is used across an await\n+  --> $DIR/async-await-let-else.rs:33:28\n+   |\n+LL |         (Rc::new(()), bar().await);\n+   |          -----------       ^^^^^^ - `Rc::new(())` is later dropped here\n+   |          |                 |\n+   |          |                 await occurs here, with `Rc::new(())` maybe used later\n+   |          has type `Rc<()>` which is not `Send`\n+note: required by a bound in `is_send`\n+  --> $DIR/async-await-let-else.rs:19:15\n+   |\n+LL | fn is_send<T: Send>(_: T) {}\n+   |               ^^^^ required by this bound in `is_send`\n+\n+error: future cannot be sent between threads safely\n+  --> $DIR/async-await-let-else.rs:54:13\n+   |\n+LL |     is_send(foo4(Some(true)));\n+   |             ^^^^^^^^^^^^^^^^ future returned by `foo4` is not `Send`\n+   |\n+   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Rc<()>`\n+note: future is not `Send` as this value is used across an await\n+  --> $DIR/async-await-let-else.rs:41:14\n+   |\n+LL |         let r = Rc::new(());\n+   |             - has type `Rc<()>` which is not `Send`\n+LL |         bar().await;\n+   |              ^^^^^^ await occurs here, with `r` maybe used later\n+...\n+LL |     };\n+   |     - `r` is later dropped here\n+note: required by a bound in `is_send`\n+  --> $DIR/async-await-let-else.rs:19:15\n+   |\n+LL | fn is_send<T: Send>(_: T) {}\n+   |               ^^^^ required by this bound in `is_send`\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "c284bbfb1cc66de61500ee72435369c86fd9a3eb", "filename": "tests/ui/async-await/async-await-let-else.drop_tracking_mir.stderr", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fasync-await-let-else.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fasync-await-let-else.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fasync-await-let-else.drop_tracking_mir.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -0,0 +1,100 @@\n+error: future cannot be sent between threads safely\n+  --> $DIR/async-await-let-else.rs:48:13\n+   |\n+LL |     is_send(foo(Some(true)));\n+   |             ^^^^^^^^^^^^^^^ future returned by `foo` is not `Send`\n+   |\n+   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Rc<()>`\n+note: future is not `Send` as this value is used across an await\n+  --> $DIR/async-await-let-else.rs:11:14\n+   |\n+LL |         let r = Rc::new(());\n+   |             - has type `Rc<()>` which is not `Send`\n+LL |         bar().await\n+   |              ^^^^^^ await occurs here, with `r` maybe used later\n+note: required by a bound in `is_send`\n+  --> $DIR/async-await-let-else.rs:19:15\n+   |\n+LL | fn is_send<T: Send>(_: T) {}\n+   |               ^^^^ required by this bound in `is_send`\n+\n+error[E0277]: `Rc<()>` cannot be sent between threads safely\n+  --> $DIR/async-await-let-else.rs:50:13\n+   |\n+LL | async fn foo2(x: Option<bool>) {\n+   |                                - within this `impl Future<Output = ()>`\n+...\n+LL |     is_send(foo2(Some(true)));\n+   |     ------- ^^^^^^^^^^^^^^^^ `Rc<()>` cannot be sent between threads safely\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Rc<()>`\n+note: required because it's used within this `async fn` body\n+  --> $DIR/async-await-let-else.rs:27:29\n+   |\n+LL |   async fn bar2<T>(_: T) -> ! {\n+   |  _____________________________^\n+LL | |     panic!()\n+LL | | }\n+   | |_^\n+   = note: required because it captures the following types: `impl Future<Output = !>`\n+note: required because it's used within this `async fn` body\n+  --> $DIR/async-await-let-else.rs:21:32\n+   |\n+LL |   async fn foo2(x: Option<bool>) {\n+   |  ________________________________^\n+LL | |     let Some(_) = x else {\n+LL | |         bar2(Rc::new(())).await\n+LL | |     };\n+LL | | }\n+   | |_^\n+note: required by a bound in `is_send`\n+  --> $DIR/async-await-let-else.rs:19:15\n+   |\n+LL | fn is_send<T: Send>(_: T) {}\n+   |               ^^^^ required by this bound in `is_send`\n+\n+error: future cannot be sent between threads safely\n+  --> $DIR/async-await-let-else.rs:52:13\n+   |\n+LL |     is_send(foo3(Some(true)));\n+   |             ^^^^^^^^^^^^^^^^ future returned by `foo3` is not `Send`\n+   |\n+   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Rc<()>`\n+note: future is not `Send` as this value is used across an await\n+  --> $DIR/async-await-let-else.rs:33:28\n+   |\n+LL |         (Rc::new(()), bar().await);\n+   |          -----------       ^^^^^^ await occurs here, with `Rc::new(())` maybe used later\n+   |          |\n+   |          has type `Rc<()>` which is not `Send`\n+note: required by a bound in `is_send`\n+  --> $DIR/async-await-let-else.rs:19:15\n+   |\n+LL | fn is_send<T: Send>(_: T) {}\n+   |               ^^^^ required by this bound in `is_send`\n+\n+error: future cannot be sent between threads safely\n+  --> $DIR/async-await-let-else.rs:54:13\n+   |\n+LL |     is_send(foo4(Some(true)));\n+   |             ^^^^^^^^^^^^^^^^ future returned by `foo4` is not `Send`\n+   |\n+   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Rc<()>`\n+note: future is not `Send` as this value is used across an await\n+  --> $DIR/async-await-let-else.rs:41:14\n+   |\n+LL |         let r = Rc::new(());\n+   |             - has type `Rc<()>` which is not `Send`\n+LL |         bar().await;\n+   |              ^^^^^^ await occurs here, with `r` maybe used later\n+note: required by a bound in `is_send`\n+  --> $DIR/async-await-let-else.rs:19:15\n+   |\n+LL | fn is_send<T: Send>(_: T) {}\n+   |               ^^^^ required by this bound in `is_send`\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "d3c5e80a30df443ee5cf66c942c445ba95cec701", "filename": "tests/ui/async-await/async-await-let-else.no_drop_tracking.stderr", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fasync-await-let-else.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fasync-await-let-else.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fasync-await-let-else.no_drop_tracking.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -0,0 +1,90 @@\n+error: future cannot be sent between threads safely\n+  --> $DIR/async-await-let-else.rs:48:13\n+   |\n+LL |     is_send(foo(Some(true)));\n+   |             ^^^^^^^^^^^^^^^ future returned by `foo` is not `Send`\n+   |\n+   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Rc<()>`\n+note: future is not `Send` as this value is used across an await\n+  --> $DIR/async-await-let-else.rs:11:14\n+   |\n+LL |         let r = Rc::new(());\n+   |             - has type `Rc<()>` which is not `Send`\n+LL |         bar().await\n+   |              ^^^^^^ await occurs here, with `r` maybe used later\n+LL |     };\n+   |     - `r` is later dropped here\n+note: required by a bound in `is_send`\n+  --> $DIR/async-await-let-else.rs:19:15\n+   |\n+LL | fn is_send<T: Send>(_: T) {}\n+   |               ^^^^ required by this bound in `is_send`\n+\n+error: future cannot be sent between threads safely\n+  --> $DIR/async-await-let-else.rs:50:13\n+   |\n+LL |     is_send(foo2(Some(true)));\n+   |             ^^^^^^^^^^^^^^^^ future returned by `foo2` is not `Send`\n+   |\n+   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Rc<()>`\n+note: future is not `Send` as this value is used across an await\n+  --> $DIR/async-await-let-else.rs:23:26\n+   |\n+LL |         bar2(Rc::new(())).await\n+   |              ----------- ^^^^^^ await occurs here, with `Rc::new(())` maybe used later\n+   |              |\n+   |              has type `Rc<()>` which is not `Send`\n+LL |     };\n+   |     - `Rc::new(())` is later dropped here\n+note: required by a bound in `is_send`\n+  --> $DIR/async-await-let-else.rs:19:15\n+   |\n+LL | fn is_send<T: Send>(_: T) {}\n+   |               ^^^^ required by this bound in `is_send`\n+\n+error: future cannot be sent between threads safely\n+  --> $DIR/async-await-let-else.rs:52:13\n+   |\n+LL |     is_send(foo3(Some(true)));\n+   |             ^^^^^^^^^^^^^^^^ future returned by `foo3` is not `Send`\n+   |\n+   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Rc<()>`\n+note: future is not `Send` as this value is used across an await\n+  --> $DIR/async-await-let-else.rs:33:28\n+   |\n+LL |         (Rc::new(()), bar().await);\n+   |          -----------       ^^^^^^ - `Rc::new(())` is later dropped here\n+   |          |                 |\n+   |          |                 await occurs here, with `Rc::new(())` maybe used later\n+   |          has type `Rc<()>` which is not `Send`\n+note: required by a bound in `is_send`\n+  --> $DIR/async-await-let-else.rs:19:15\n+   |\n+LL | fn is_send<T: Send>(_: T) {}\n+   |               ^^^^ required by this bound in `is_send`\n+\n+error: future cannot be sent between threads safely\n+  --> $DIR/async-await-let-else.rs:54:13\n+   |\n+LL |     is_send(foo4(Some(true)));\n+   |             ^^^^^^^^^^^^^^^^ future returned by `foo4` is not `Send`\n+   |\n+   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Rc<()>`\n+note: future is not `Send` as this value is used across an await\n+  --> $DIR/async-await-let-else.rs:41:14\n+   |\n+LL |         let r = Rc::new(());\n+   |             - has type `Rc<()>` which is not `Send`\n+LL |         bar().await;\n+   |              ^^^^^^ await occurs here, with `r` maybe used later\n+...\n+LL |     };\n+   |     - `r` is later dropped here\n+note: required by a bound in `is_send`\n+  --> $DIR/async-await-let-else.rs:19:15\n+   |\n+LL | fn is_send<T: Send>(_: T) {}\n+   |               ^^^^ required by this bound in `is_send`\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "113d576b5e762cfba33f6ee12d0631636cc88a34", "filename": "tests/ui/async-await/async-await-let-else.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fasync-await-let-else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fasync-await-let-else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fasync-await-let-else.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -1,7 +1,7 @@\n // edition:2021\n-// revisions: drop-tracking no-drop-tracking\n-// [drop-tracking] compile-flags: -Zdrop-tracking=yes\n-// [no-drop-tracking] compile-flags: -Zdrop-tracking=no\n+// revisions: no_drop_tracking drop_tracking drop_tracking_mir\n+// [drop_tracking] compile-flags: -Zdrop-tracking\n+// [drop_tracking_mir] compile-flags: -Zdrop-tracking-mir\n \n use std::rc::Rc;\n "}, {"sha": "c6257cb324d9a62fa156cdfe6e5b79a51cc6ed4d", "filename": "tests/ui/async-await/async-error-span.drop_tracking.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fasync-error-span.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fasync-error-span.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fasync-error-span.drop_tracking.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: `()` is not a future\n-  --> $DIR/async-error-span.rs:7:20\n+  --> $DIR/async-error-span.rs:10:20\n    |\n LL | fn get_future() -> impl Future<Output = ()> {\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^ `()` is not a future\n@@ -8,13 +8,13 @@ LL | fn get_future() -> impl Future<Output = ()> {\n    = note: () must be a future or must implement `IntoFuture` to be awaited\n \n error[E0698]: type inside `async fn` body must be known in this context\n-  --> $DIR/async-error-span.rs:13:9\n+  --> $DIR/async-error-span.rs:16:9\n    |\n LL |     let a;\n    |         ^ cannot infer type\n    |\n note: the type is part of the `async fn` body because of this `await`\n-  --> $DIR/async-error-span.rs:14:17\n+  --> $DIR/async-error-span.rs:19:17\n    |\n LL |     get_future().await;\n    |                 ^^^^^^", "previous_filename": "tests/ui/async-await/async-error-span.stderr"}, {"sha": "2f29ee6cdb0a1e7856af15d0964a2fdf64e11236", "filename": "tests/ui/async-await/async-error-span.drop_tracking_mir.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fasync-error-span.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fasync-error-span.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fasync-error-span.drop_tracking_mir.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -0,0 +1,24 @@\n+error[E0277]: `()` is not a future\n+  --> $DIR/async-error-span.rs:10:20\n+   |\n+LL | fn get_future() -> impl Future<Output = ()> {\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^ `()` is not a future\n+   |\n+   = help: the trait `Future` is not implemented for `()`\n+   = note: () must be a future or must implement `IntoFuture` to be awaited\n+\n+error[E0282]: type annotations needed\n+  --> $DIR/async-error-span.rs:16:9\n+   |\n+LL |     let a;\n+   |         ^\n+   |\n+help: consider giving `a` an explicit type\n+   |\n+LL |     let a: /* Type */;\n+   |          ++++++++++++\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0277, E0282.\n+For more information about an error, try `rustc --explain E0277`."}, {"sha": "c6257cb324d9a62fa156cdfe6e5b79a51cc6ed4d", "filename": "tests/ui/async-await/async-error-span.no_drop_tracking.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fasync-error-span.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fasync-error-span.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fasync-error-span.no_drop_tracking.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -0,0 +1,25 @@\n+error[E0277]: `()` is not a future\n+  --> $DIR/async-error-span.rs:10:20\n+   |\n+LL | fn get_future() -> impl Future<Output = ()> {\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^ `()` is not a future\n+   |\n+   = help: the trait `Future` is not implemented for `()`\n+   = note: () must be a future or must implement `IntoFuture` to be awaited\n+\n+error[E0698]: type inside `async fn` body must be known in this context\n+  --> $DIR/async-error-span.rs:16:9\n+   |\n+LL |     let a;\n+   |         ^ cannot infer type\n+   |\n+note: the type is part of the `async fn` body because of this `await`\n+  --> $DIR/async-error-span.rs:19:17\n+   |\n+LL |     get_future().await;\n+   |                 ^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0277, E0698.\n+For more information about an error, try `rustc --explain E0277`."}, {"sha": "c9ecf359e3de59bdd0effb82a030ad73e3df4e18", "filename": "tests/ui/async-await/async-error-span.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fasync-error-span.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fasync-error-span.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fasync-error-span.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -1,3 +1,6 @@\n+// revisions: no_drop_tracking drop_tracking drop_tracking_mir\n+// [drop_tracking] compile-flags: -Zdrop-tracking\n+// [drop_tracking_mir] compile-flags: -Zdrop-tracking-mir\n // edition:2018\n \n // Regression test for issue #62382.\n@@ -10,7 +13,9 @@ fn get_future() -> impl Future<Output = ()> {\n }\n \n async fn foo() {\n-    let a; //~ ERROR type inside `async fn` body must be known in this context\n+    let a;\n+    //[no_drop_tracking,drop_tracking]~^ ERROR type inside `async fn` body must be known in this context\n+    //[drop_tracking_mir]~^^ ERROR type annotations needed\n     get_future().await;\n }\n "}, {"sha": "0f0dc335e7f27cad0cfec72ccc3cc110f38ede13", "filename": "tests/ui/async-await/async-fn-nonsend.drop_tracking.stderr", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fasync-fn-nonsend.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fasync-fn-nonsend.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fasync-fn-nonsend.drop_tracking.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -0,0 +1,49 @@\n+error: future cannot be sent between threads safely\n+  --> $DIR/async-fn-nonsend.rs:72:17\n+   |\n+LL |     assert_send(non_send_temporary_in_match());\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ future returned by `non_send_temporary_in_match` is not `Send`\n+   |\n+   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Rc<()>`\n+note: future is not `Send` as this value is used across an await\n+  --> $DIR/async-fn-nonsend.rs:36:25\n+   |\n+LL |     match Some(non_send()) {\n+   |           ---------------- has type `Option<impl Debug>` which is not `Send`\n+LL |         Some(_) => fut().await,\n+   |                         ^^^^^^ await occurs here, with `Some(non_send())` maybe used later\n+...\n+LL | }\n+   | - `Some(non_send())` is later dropped here\n+note: required by a bound in `assert_send`\n+  --> $DIR/async-fn-nonsend.rs:67:24\n+   |\n+LL | fn assert_send(_: impl Send) {}\n+   |                        ^^^^ required by this bound in `assert_send`\n+\n+error: future cannot be sent between threads safely\n+  --> $DIR/async-fn-nonsend.rs:74:17\n+   |\n+LL |     assert_send(non_sync_with_method_call());\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ future returned by `non_sync_with_method_call` is not `Send`\n+   |\n+   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `dyn std::fmt::Write`\n+note: future is not `Send` as this value is used across an await\n+  --> $DIR/async-fn-nonsend.rs:49:14\n+   |\n+LL |     let f: &mut std::fmt::Formatter = &mut get_formatter();\n+   |                                            --------------- has type `Formatter<'_>` which is not `Send`\n+...\n+LL |         fut().await;\n+   |              ^^^^^^ await occurs here, with `get_formatter()` maybe used later\n+LL |     }\n+LL | }\n+   | - `get_formatter()` is later dropped here\n+note: required by a bound in `assert_send`\n+  --> $DIR/async-fn-nonsend.rs:67:24\n+   |\n+LL | fn assert_send(_: impl Send) {}\n+   |                        ^^^^ required by this bound in `assert_send`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "57a01280145540072361cee6057922861e8f3bf9", "filename": "tests/ui/async-await/async-fn-nonsend.drop_tracking_mir.stderr", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fasync-fn-nonsend.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fasync-fn-nonsend.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fasync-fn-nonsend.drop_tracking_mir.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -0,0 +1,43 @@\n+error: future cannot be sent between threads safely\n+  --> $DIR/async-fn-nonsend.rs:72:17\n+   |\n+LL |     assert_send(non_send_temporary_in_match());\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ future returned by `non_send_temporary_in_match` is not `Send`\n+   |\n+   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Rc<()>`\n+note: future is not `Send` as this value is used across an await\n+  --> $DIR/async-fn-nonsend.rs:36:25\n+   |\n+LL |     match Some(non_send()) {\n+   |           ---------------- has type `Option<impl Debug>` which is not `Send`\n+LL |         Some(_) => fut().await,\n+   |                         ^^^^^^ await occurs here, with `Some(non_send())` maybe used later\n+note: required by a bound in `assert_send`\n+  --> $DIR/async-fn-nonsend.rs:67:24\n+   |\n+LL | fn assert_send(_: impl Send) {}\n+   |                        ^^^^ required by this bound in `assert_send`\n+\n+error: future cannot be sent between threads safely\n+  --> $DIR/async-fn-nonsend.rs:74:17\n+   |\n+LL |     assert_send(non_sync_with_method_call());\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ future returned by `non_sync_with_method_call` is not `Send`\n+   |\n+   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `dyn std::fmt::Write`\n+note: future is not `Send` as this value is used across an await\n+  --> $DIR/async-fn-nonsend.rs:49:14\n+   |\n+LL |     let f: &mut std::fmt::Formatter = &mut get_formatter();\n+   |                                            --------------- has type `Formatter<'_>` which is not `Send`\n+...\n+LL |         fut().await;\n+   |              ^^^^^^ await occurs here, with `get_formatter()` maybe used later\n+note: required by a bound in `assert_send`\n+  --> $DIR/async-fn-nonsend.rs:67:24\n+   |\n+LL | fn assert_send(_: impl Send) {}\n+   |                        ^^^^ required by this bound in `assert_send`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "5cec21d890ef16e8af1aa17c4861f007f4f6fc4a", "filename": "tests/ui/async-await/async-fn-nonsend.no_drop_tracking.stderr", "status": "added", "additions": 120, "deletions": 0, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fasync-fn-nonsend.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fasync-fn-nonsend.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fasync-fn-nonsend.no_drop_tracking.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -0,0 +1,120 @@\n+error: future cannot be sent between threads safely\n+  --> $DIR/async-fn-nonsend.rs:70:17\n+   |\n+LL |     assert_send(local_dropped_before_await());\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ future returned by `local_dropped_before_await` is not `Send`\n+   |\n+   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Rc<()>`\n+note: future is not `Send` as this value is used across an await\n+  --> $DIR/async-fn-nonsend.rs:27:10\n+   |\n+LL |     let x = non_send();\n+   |         - has type `impl Debug` which is not `Send`\n+LL |     drop(x);\n+LL |     fut().await;\n+   |          ^^^^^^ await occurs here, with `x` maybe used later\n+LL | }\n+   | - `x` is later dropped here\n+note: required by a bound in `assert_send`\n+  --> $DIR/async-fn-nonsend.rs:67:24\n+   |\n+LL | fn assert_send(_: impl Send) {}\n+   |                        ^^^^ required by this bound in `assert_send`\n+\n+error: future cannot be sent between threads safely\n+  --> $DIR/async-fn-nonsend.rs:72:17\n+   |\n+LL |     assert_send(non_send_temporary_in_match());\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ future returned by `non_send_temporary_in_match` is not `Send`\n+   |\n+   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Rc<()>`\n+note: future is not `Send` as this value is used across an await\n+  --> $DIR/async-fn-nonsend.rs:36:25\n+   |\n+LL |     match Some(non_send()) {\n+   |                ---------- has type `impl Debug` which is not `Send`\n+LL |         Some(_) => fut().await,\n+   |                         ^^^^^^ await occurs here, with `non_send()` maybe used later\n+...\n+LL | }\n+   | - `non_send()` is later dropped here\n+note: required by a bound in `assert_send`\n+  --> $DIR/async-fn-nonsend.rs:67:24\n+   |\n+LL | fn assert_send(_: impl Send) {}\n+   |                        ^^^^ required by this bound in `assert_send`\n+\n+error: future cannot be sent between threads safely\n+  --> $DIR/async-fn-nonsend.rs:74:17\n+   |\n+LL |     assert_send(non_sync_with_method_call());\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ future returned by `non_sync_with_method_call` is not `Send`\n+   |\n+   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `dyn std::fmt::Write`\n+note: future is not `Send` as this value is used across an await\n+  --> $DIR/async-fn-nonsend.rs:49:14\n+   |\n+LL |     let f: &mut std::fmt::Formatter = &mut get_formatter();\n+   |                                            --------------- has type `Formatter<'_>` which is not `Send`\n+...\n+LL |         fut().await;\n+   |              ^^^^^^ await occurs here, with `get_formatter()` maybe used later\n+LL |     }\n+LL | }\n+   | - `get_formatter()` is later dropped here\n+note: required by a bound in `assert_send`\n+  --> $DIR/async-fn-nonsend.rs:67:24\n+   |\n+LL | fn assert_send(_: impl Send) {}\n+   |                        ^^^^ required by this bound in `assert_send`\n+\n+error: future cannot be sent between threads safely\n+  --> $DIR/async-fn-nonsend.rs:76:17\n+   |\n+LL |     assert_send(non_sync_with_method_call_panic());\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ future returned by `non_sync_with_method_call_panic` is not `Send`\n+   |\n+   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `dyn std::fmt::Write`\n+note: future is not `Send` as this value is used across an await\n+  --> $DIR/async-fn-nonsend.rs:56:14\n+   |\n+LL |     let f: &mut std::fmt::Formatter = panic!();\n+   |         - has type `&mut Formatter<'_>` which is not `Send`\n+LL |     if non_sync().fmt(f).unwrap() == () {\n+LL |         fut().await;\n+   |              ^^^^^^ await occurs here, with `f` maybe used later\n+LL |     }\n+LL | }\n+   | - `f` is later dropped here\n+note: required by a bound in `assert_send`\n+  --> $DIR/async-fn-nonsend.rs:67:24\n+   |\n+LL | fn assert_send(_: impl Send) {}\n+   |                        ^^^^ required by this bound in `assert_send`\n+\n+error: future cannot be sent between threads safely\n+  --> $DIR/async-fn-nonsend.rs:78:17\n+   |\n+LL |     assert_send(non_sync_with_method_call_infinite_loop());\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ future returned by `non_sync_with_method_call_infinite_loop` is not `Send`\n+   |\n+   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `dyn std::fmt::Write`\n+note: future is not `Send` as this value is used across an await\n+  --> $DIR/async-fn-nonsend.rs:63:14\n+   |\n+LL |     let f: &mut std::fmt::Formatter = loop {};\n+   |         - has type `&mut Formatter<'_>` which is not `Send`\n+LL |     if non_sync().fmt(f).unwrap() == () {\n+LL |         fut().await;\n+   |              ^^^^^^ await occurs here, with `f` maybe used later\n+LL |     }\n+LL | }\n+   | - `f` is later dropped here\n+note: required by a bound in `assert_send`\n+  --> $DIR/async-fn-nonsend.rs:67:24\n+   |\n+LL | fn assert_send(_: impl Send) {}\n+   |                        ^^^^ required by this bound in `assert_send`\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "ed440bd0182a6d4ac338ca2bdb307e778abc1c5b", "filename": "tests/ui/async-await/async-fn-nonsend.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fasync-fn-nonsend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fasync-fn-nonsend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fasync-fn-nonsend.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -1,5 +1,8 @@\n+// revisions: no_drop_tracking drop_tracking drop_tracking_mir\n+// [drop_tracking] compile-flags: -Zdrop-tracking\n+// [drop_tracking_mir] compile-flags: -Zdrop-tracking-mir\n // edition:2018\n-// compile-flags: --crate-type lib -Zdrop-tracking\n+// compile-flags: --crate-type lib\n \n use std::{cell::RefCell, fmt::Debug, rc::Rc};\n \n@@ -65,10 +68,13 @@ fn assert_send(_: impl Send) {}\n \n pub fn pass_assert() {\n     assert_send(local_dropped_before_await());\n+    //[no_drop_tracking]~^ ERROR future cannot be sent between threads safely\n     assert_send(non_send_temporary_in_match());\n     //~^ ERROR future cannot be sent between threads safely\n     assert_send(non_sync_with_method_call());\n     //~^ ERROR future cannot be sent between threads safely\n     assert_send(non_sync_with_method_call_panic());\n+    //[no_drop_tracking]~^ ERROR future cannot be sent between threads safely\n     assert_send(non_sync_with_method_call_infinite_loop());\n+    //[no_drop_tracking]~^ ERROR future cannot be sent between threads safely\n }"}, {"sha": "0f0dc335e7f27cad0cfec72ccc3cc110f38ede13", "filename": "tests/ui/async-await/async-fn-nonsend.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fasync-fn-nonsend.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fasync-fn-nonsend.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fasync-fn-nonsend.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -1,12 +1,12 @@\n error: future cannot be sent between threads safely\n-  --> $DIR/async-fn-nonsend.rs:68:17\n+  --> $DIR/async-fn-nonsend.rs:72:17\n    |\n LL |     assert_send(non_send_temporary_in_match());\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ future returned by `non_send_temporary_in_match` is not `Send`\n    |\n    = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Rc<()>`\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/async-fn-nonsend.rs:33:25\n+  --> $DIR/async-fn-nonsend.rs:36:25\n    |\n LL |     match Some(non_send()) {\n    |           ---------------- has type `Option<impl Debug>` which is not `Send`\n@@ -16,20 +16,20 @@ LL |         Some(_) => fut().await,\n LL | }\n    | - `Some(non_send())` is later dropped here\n note: required by a bound in `assert_send`\n-  --> $DIR/async-fn-nonsend.rs:64:24\n+  --> $DIR/async-fn-nonsend.rs:67:24\n    |\n LL | fn assert_send(_: impl Send) {}\n    |                        ^^^^ required by this bound in `assert_send`\n \n error: future cannot be sent between threads safely\n-  --> $DIR/async-fn-nonsend.rs:70:17\n+  --> $DIR/async-fn-nonsend.rs:74:17\n    |\n LL |     assert_send(non_sync_with_method_call());\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ future returned by `non_sync_with_method_call` is not `Send`\n    |\n    = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `dyn std::fmt::Write`\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/async-fn-nonsend.rs:46:14\n+  --> $DIR/async-fn-nonsend.rs:49:14\n    |\n LL |     let f: &mut std::fmt::Formatter = &mut get_formatter();\n    |                                            --------------- has type `Formatter<'_>` which is not `Send`\n@@ -40,7 +40,7 @@ LL |     }\n LL | }\n    | - `get_formatter()` is later dropped here\n note: required by a bound in `assert_send`\n-  --> $DIR/async-fn-nonsend.rs:64:24\n+  --> $DIR/async-fn-nonsend.rs:67:24\n    |\n LL | fn assert_send(_: impl Send) {}\n    |                        ^^^^ required by this bound in `assert_send`"}, {"sha": "daee8469a1406fce5850d94f9e645d1a28faf0f4", "filename": "tests/ui/async-await/default-struct-update.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fdefault-struct-update.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fdefault-struct-update.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fdefault-struct-update.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -1,6 +1,8 @@\n+// revisions: no_drop_tracking drop_tracking drop_tracking_mir\n+// [drop_tracking] compile-flags: -Zdrop-tracking\n+// [drop_tracking_mir] compile-flags: -Zdrop-tracking-mir\n // build-pass\n // edition:2018\n-// compile-flags: -Zdrop-tracking=y\n \n fn main() {\n     let _ = foo();"}, {"sha": "e520dfbdccebba4c062457d42fb90c4289eee686", "filename": "tests/ui/async-await/drop-and-assign.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fdrop-and-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fdrop-and-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fdrop-and-assign.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -1,5 +1,7 @@\n+// revisions: no_drop_tracking drop_tracking drop_tracking_mir\n+// [drop_tracking] compile-flags: -Zdrop-tracking\n+// [drop_tracking_mir] compile-flags: -Zdrop-tracking-mir\n // edition:2021\n-// compile-flags: -Zdrop-tracking\n // build-pass\n \n struct A;"}, {"sha": "e2bba812d05b1677d01381178dc0a70bf0904f29", "filename": "tests/ui/async-await/drop-track-field-assign-nonsend.drop_tracking.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fdrop-track-field-assign-nonsend.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fdrop-track-field-assign-nonsend.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fdrop-track-field-assign-nonsend.drop_tracking.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -1,12 +1,12 @@\n error: future cannot be sent between threads safely\n-  --> $DIR/drop-track-field-assign-nonsend.rs:43:17\n+  --> $DIR/drop-track-field-assign-nonsend.rs:45:17\n    |\n LL |     assert_send(agent.handle());\n    |                 ^^^^^^^^^^^^^^ future returned by `handle` is not `Send`\n    |\n    = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Rc<String>`\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/drop-track-field-assign-nonsend.rs:21:38\n+  --> $DIR/drop-track-field-assign-nonsend.rs:23:38\n    |\n LL |         let mut info = self.info_result.clone();\n    |             -------- has type `InfoResult` which is not `Send`\n@@ -16,7 +16,7 @@ LL |         let _ = send_element(element).await;\n LL |     }\n    |     - `mut info` is later dropped here\n note: required by a bound in `assert_send`\n-  --> $DIR/drop-track-field-assign-nonsend.rs:38:19\n+  --> $DIR/drop-track-field-assign-nonsend.rs:40:19\n    |\n LL | fn assert_send<T: Send>(_: T) {}\n    |                   ^^^^ required by this bound in `assert_send`", "previous_filename": "tests/ui/async-await/drop-track-field-assign-nonsend.stderr"}, {"sha": "b89d8680407500997cdc244932c9aadc7dc2c0cf", "filename": "tests/ui/async-await/drop-track-field-assign-nonsend.drop_tracking_mir.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fdrop-track-field-assign-nonsend.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fdrop-track-field-assign-nonsend.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fdrop-track-field-assign-nonsend.drop_tracking_mir.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -0,0 +1,23 @@\n+error: future cannot be sent between threads safely\n+  --> $DIR/drop-track-field-assign-nonsend.rs:45:17\n+   |\n+LL |     assert_send(agent.handle());\n+   |                 ^^^^^^^^^^^^^^ future returned by `handle` is not `Send`\n+   |\n+   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Rc<String>`\n+note: future is not `Send` as this value is used across an await\n+  --> $DIR/drop-track-field-assign-nonsend.rs:23:38\n+   |\n+LL |         let mut info = self.info_result.clone();\n+   |             -------- has type `InfoResult` which is not `Send`\n+...\n+LL |         let _ = send_element(element).await;\n+   |                                      ^^^^^^ await occurs here, with `mut info` maybe used later\n+note: required by a bound in `assert_send`\n+  --> $DIR/drop-track-field-assign-nonsend.rs:40:19\n+   |\n+LL | fn assert_send<T: Send>(_: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+\n+error: aborting due to previous error\n+"}, {"sha": "e2bba812d05b1677d01381178dc0a70bf0904f29", "filename": "tests/ui/async-await/drop-track-field-assign-nonsend.no_drop_tracking.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fdrop-track-field-assign-nonsend.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fdrop-track-field-assign-nonsend.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fdrop-track-field-assign-nonsend.no_drop_tracking.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -0,0 +1,25 @@\n+error: future cannot be sent between threads safely\n+  --> $DIR/drop-track-field-assign-nonsend.rs:45:17\n+   |\n+LL |     assert_send(agent.handle());\n+   |                 ^^^^^^^^^^^^^^ future returned by `handle` is not `Send`\n+   |\n+   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Rc<String>`\n+note: future is not `Send` as this value is used across an await\n+  --> $DIR/drop-track-field-assign-nonsend.rs:23:38\n+   |\n+LL |         let mut info = self.info_result.clone();\n+   |             -------- has type `InfoResult` which is not `Send`\n+...\n+LL |         let _ = send_element(element).await;\n+   |                                      ^^^^^^ await occurs here, with `mut info` maybe used later\n+LL |     }\n+   |     - `mut info` is later dropped here\n+note: required by a bound in `assert_send`\n+  --> $DIR/drop-track-field-assign-nonsend.rs:40:19\n+   |\n+LL | fn assert_send<T: Send>(_: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+\n+error: aborting due to previous error\n+"}, {"sha": "3e22280008fcf251f7c6247dbccc1b8f67b00220", "filename": "tests/ui/async-await/drop-track-field-assign-nonsend.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fdrop-track-field-assign-nonsend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fdrop-track-field-assign-nonsend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fdrop-track-field-assign-nonsend.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -1,6 +1,8 @@\n+// revisions: no_drop_tracking drop_tracking drop_tracking_mir\n+// [drop_tracking] compile-flags: -Zdrop-tracking\n+// [drop_tracking_mir] compile-flags: -Zdrop-tracking-mir\n // Derived from an ICE found in tokio-xmpp during a crater run.\n // edition:2021\n-// compile-flags: -Zdrop-tracking\n \n #![allow(dead_code)]\n "}, {"sha": "dd0e3f11ccc013c5fc8a5c94b9e518d08d80e09f", "filename": "tests/ui/async-await/drop-track-field-assign.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fdrop-track-field-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fdrop-track-field-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fdrop-track-field-assign.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -1,6 +1,8 @@\n+// revisions: no_drop_tracking drop_tracking drop_tracking_mir\n+// [drop_tracking] compile-flags: -Zdrop-tracking\n+// [drop_tracking_mir] compile-flags: -Zdrop-tracking-mir\n // Derived from an ICE found in tokio-xmpp during a crater run.\n // edition:2021\n-// compile-flags: -Zdrop-tracking\n // build-pass\n \n #![allow(dead_code)]"}, {"sha": "ac461a671a82afd9d51a11c8c8e0ab5fb12ee6fd", "filename": "tests/ui/async-await/field-assign-nonsend.drop_tracking.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Ffield-assign-nonsend.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Ffield-assign-nonsend.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Ffield-assign-nonsend.drop_tracking.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -0,0 +1,25 @@\n+error: future cannot be sent between threads safely\n+  --> $DIR/field-assign-nonsend.rs:45:17\n+   |\n+LL |     assert_send(agent.handle());\n+   |                 ^^^^^^^^^^^^^^ future returned by `handle` is not `Send`\n+   |\n+   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Rc<String>`\n+note: future is not `Send` as this value is used across an await\n+  --> $DIR/field-assign-nonsend.rs:23:38\n+   |\n+LL |         let mut info = self.info_result.clone();\n+   |             -------- has type `InfoResult` which is not `Send`\n+...\n+LL |         let _ = send_element(element).await;\n+   |                                      ^^^^^^ await occurs here, with `mut info` maybe used later\n+LL |     }\n+   |     - `mut info` is later dropped here\n+note: required by a bound in `assert_send`\n+  --> $DIR/field-assign-nonsend.rs:40:19\n+   |\n+LL | fn assert_send<T: Send>(_: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+\n+error: aborting due to previous error\n+"}, {"sha": "8c9d14d624cd97182fb062327adb7144e6ba62a2", "filename": "tests/ui/async-await/field-assign-nonsend.drop_tracking_mir.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Ffield-assign-nonsend.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Ffield-assign-nonsend.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Ffield-assign-nonsend.drop_tracking_mir.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -0,0 +1,23 @@\n+error: future cannot be sent between threads safely\n+  --> $DIR/field-assign-nonsend.rs:45:17\n+   |\n+LL |     assert_send(agent.handle());\n+   |                 ^^^^^^^^^^^^^^ future returned by `handle` is not `Send`\n+   |\n+   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Rc<String>`\n+note: future is not `Send` as this value is used across an await\n+  --> $DIR/field-assign-nonsend.rs:23:38\n+   |\n+LL |         let mut info = self.info_result.clone();\n+   |             -------- has type `InfoResult` which is not `Send`\n+...\n+LL |         let _ = send_element(element).await;\n+   |                                      ^^^^^^ await occurs here, with `mut info` maybe used later\n+note: required by a bound in `assert_send`\n+  --> $DIR/field-assign-nonsend.rs:40:19\n+   |\n+LL | fn assert_send<T: Send>(_: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+\n+error: aborting due to previous error\n+"}, {"sha": "ac461a671a82afd9d51a11c8c8e0ab5fb12ee6fd", "filename": "tests/ui/async-await/field-assign-nonsend.no_drop_tracking.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Ffield-assign-nonsend.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Ffield-assign-nonsend.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Ffield-assign-nonsend.no_drop_tracking.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -0,0 +1,25 @@\n+error: future cannot be sent between threads safely\n+  --> $DIR/field-assign-nonsend.rs:45:17\n+   |\n+LL |     assert_send(agent.handle());\n+   |                 ^^^^^^^^^^^^^^ future returned by `handle` is not `Send`\n+   |\n+   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Rc<String>`\n+note: future is not `Send` as this value is used across an await\n+  --> $DIR/field-assign-nonsend.rs:23:38\n+   |\n+LL |         let mut info = self.info_result.clone();\n+   |             -------- has type `InfoResult` which is not `Send`\n+...\n+LL |         let _ = send_element(element).await;\n+   |                                      ^^^^^^ await occurs here, with `mut info` maybe used later\n+LL |     }\n+   |     - `mut info` is later dropped here\n+note: required by a bound in `assert_send`\n+  --> $DIR/field-assign-nonsend.rs:40:19\n+   |\n+LL | fn assert_send<T: Send>(_: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+\n+error: aborting due to previous error\n+"}, {"sha": "3e22280008fcf251f7c6247dbccc1b8f67b00220", "filename": "tests/ui/async-await/field-assign-nonsend.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Ffield-assign-nonsend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Ffield-assign-nonsend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Ffield-assign-nonsend.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -0,0 +1,47 @@\n+// revisions: no_drop_tracking drop_tracking drop_tracking_mir\n+// [drop_tracking] compile-flags: -Zdrop-tracking\n+// [drop_tracking_mir] compile-flags: -Zdrop-tracking-mir\n+// Derived from an ICE found in tokio-xmpp during a crater run.\n+// edition:2021\n+\n+#![allow(dead_code)]\n+\n+#[derive(Clone)]\n+struct InfoResult {\n+    node: Option<std::rc::Rc<String>>\n+}\n+\n+struct Agent {\n+    info_result: InfoResult\n+}\n+\n+impl Agent {\n+    async fn handle(&mut self) {\n+        let mut info = self.info_result.clone();\n+        info.node = None;\n+        let element = parse_info(info);\n+        let _ = send_element(element).await;\n+    }\n+}\n+\n+struct Element {\n+}\n+\n+async fn send_element(_: Element) {}\n+\n+fn parse(_: &[u8]) -> Result<(), ()> {\n+    Ok(())\n+}\n+\n+fn parse_info(_: InfoResult) -> Element {\n+    Element { }\n+}\n+\n+fn assert_send<T: Send>(_: T) {}\n+\n+fn main() {\n+    let agent = Agent { info_result: InfoResult { node: None } };\n+    // FIXME: It would be nice for this to work. See #94067.\n+    assert_send(agent.handle());\n+    //~^ cannot be sent between threads safely\n+}"}, {"sha": "dd0e3f11ccc013c5fc8a5c94b9e518d08d80e09f", "filename": "tests/ui/async-await/field-assign.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Ffield-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Ffield-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Ffield-assign.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -0,0 +1,46 @@\n+// revisions: no_drop_tracking drop_tracking drop_tracking_mir\n+// [drop_tracking] compile-flags: -Zdrop-tracking\n+// [drop_tracking_mir] compile-flags: -Zdrop-tracking-mir\n+// Derived from an ICE found in tokio-xmpp during a crater run.\n+// edition:2021\n+// build-pass\n+\n+#![allow(dead_code)]\n+\n+#[derive(Clone)]\n+struct InfoResult {\n+    node: Option<String>\n+}\n+\n+struct Agent {\n+    info_result: InfoResult\n+}\n+\n+impl Agent {\n+    async fn handle(&mut self) {\n+        let mut info = self.info_result.clone();\n+        info.node = Some(\"bar\".into());\n+        let element = parse_info(info);\n+        let _ = send_element(element).await;\n+    }\n+}\n+\n+struct Element {\n+}\n+\n+async fn send_element(_: Element) {}\n+\n+fn parse(_: &[u8]) -> Result<(), ()> {\n+    Ok(())\n+}\n+\n+fn parse_info(_: InfoResult) -> Element {\n+    Element { }\n+}\n+\n+fn main() {\n+    let mut agent = Agent {\n+        info_result: InfoResult { node: None }\n+    };\n+    let _ = agent.handle();\n+}"}, {"sha": "c4c7f26c7c70b00962b2e375730376571f54f7bd", "filename": "tests/ui/async-await/issue-64130-1-sync.drop_tracking.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fissue-64130-1-sync.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fissue-64130-1-sync.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-64130-1-sync.drop_tracking.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -0,0 +1,25 @@\n+error: future cannot be shared between threads safely\n+  --> $DIR/issue-64130-1-sync.rs:25:13\n+   |\n+LL |     is_sync(bar());\n+   |             ^^^^^ future returned by `bar` is not `Sync`\n+   |\n+   = help: within `impl Future<Output = ()>`, the trait `Sync` is not implemented for `Foo`\n+note: future is not `Sync` as this value is used across an await\n+  --> $DIR/issue-64130-1-sync.rs:18:10\n+   |\n+LL |     let x = Foo;\n+   |         - has type `Foo` which is not `Sync`\n+LL |     baz().await;\n+   |          ^^^^^^ await occurs here, with `x` maybe used later\n+LL |     drop(x);\n+LL | }\n+   | - `x` is later dropped here\n+note: required by a bound in `is_sync`\n+  --> $DIR/issue-64130-1-sync.rs:14:15\n+   |\n+LL | fn is_sync<T: Sync>(t: T) { }\n+   |               ^^^^ required by this bound in `is_sync`\n+\n+error: aborting due to previous error\n+"}, {"sha": "6f43b568a7a6814fa9e90553ab6f53a1b1bc1b29", "filename": "tests/ui/async-await/issue-64130-1-sync.drop_tracking_mir.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fissue-64130-1-sync.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fissue-64130-1-sync.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-64130-1-sync.drop_tracking_mir.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -0,0 +1,22 @@\n+error: future cannot be shared between threads safely\n+  --> $DIR/issue-64130-1-sync.rs:25:13\n+   |\n+LL |     is_sync(bar());\n+   |             ^^^^^ future returned by `bar` is not `Sync`\n+   |\n+   = help: within `impl Future<Output = ()>`, the trait `Sync` is not implemented for `Foo`\n+note: future is not `Sync` as this value is used across an await\n+  --> $DIR/issue-64130-1-sync.rs:18:10\n+   |\n+LL |     let x = Foo;\n+   |         - has type `Foo` which is not `Sync`\n+LL |     baz().await;\n+   |          ^^^^^^ await occurs here, with `x` maybe used later\n+note: required by a bound in `is_sync`\n+  --> $DIR/issue-64130-1-sync.rs:14:15\n+   |\n+LL | fn is_sync<T: Sync>(t: T) { }\n+   |               ^^^^ required by this bound in `is_sync`\n+\n+error: aborting due to previous error\n+"}, {"sha": "c4c7f26c7c70b00962b2e375730376571f54f7bd", "filename": "tests/ui/async-await/issue-64130-1-sync.no_drop_tracking.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fissue-64130-1-sync.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fissue-64130-1-sync.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-64130-1-sync.no_drop_tracking.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -0,0 +1,25 @@\n+error: future cannot be shared between threads safely\n+  --> $DIR/issue-64130-1-sync.rs:25:13\n+   |\n+LL |     is_sync(bar());\n+   |             ^^^^^ future returned by `bar` is not `Sync`\n+   |\n+   = help: within `impl Future<Output = ()>`, the trait `Sync` is not implemented for `Foo`\n+note: future is not `Sync` as this value is used across an await\n+  --> $DIR/issue-64130-1-sync.rs:18:10\n+   |\n+LL |     let x = Foo;\n+   |         - has type `Foo` which is not `Sync`\n+LL |     baz().await;\n+   |          ^^^^^^ await occurs here, with `x` maybe used later\n+LL |     drop(x);\n+LL | }\n+   | - `x` is later dropped here\n+note: required by a bound in `is_sync`\n+  --> $DIR/issue-64130-1-sync.rs:14:15\n+   |\n+LL | fn is_sync<T: Sync>(t: T) { }\n+   |               ^^^^ required by this bound in `is_sync`\n+\n+error: aborting due to previous error\n+"}, {"sha": "44646e0e5f27be0c911ac795e76a97201c9e47d8", "filename": "tests/ui/async-await/issue-64130-1-sync.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fissue-64130-1-sync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fissue-64130-1-sync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-64130-1-sync.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -1,3 +1,6 @@\n+// revisions: no_drop_tracking drop_tracking drop_tracking_mir\n+// [drop_tracking] compile-flags: -Zdrop-tracking\n+// [drop_tracking_mir] compile-flags: -Zdrop-tracking-mir\n #![feature(negative_impls)]\n // edition:2018\n \n@@ -13,6 +16,7 @@ fn is_sync<T: Sync>(t: T) { }\n async fn bar() {\n     let x = Foo;\n     baz().await;\n+    drop(x);\n }\n \n async fn baz() { }"}, {"sha": "8d5169a6302eea0afeec7e746712b17b2d24661c", "filename": "tests/ui/async-await/issue-64130-1-sync.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fissue-64130-1-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fissue-64130-1-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-64130-1-sync.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -1,12 +1,12 @@\n error: future cannot be shared between threads safely\n-  --> $DIR/issue-64130-1-sync.rs:21:13\n+  --> $DIR/issue-64130-1-sync.rs:24:13\n    |\n LL |     is_sync(bar());\n    |             ^^^^^ future returned by `bar` is not `Sync`\n    |\n    = help: within `impl Future<Output = ()>`, the trait `Sync` is not implemented for `Foo`\n note: future is not `Sync` as this value is used across an await\n-  --> $DIR/issue-64130-1-sync.rs:15:10\n+  --> $DIR/issue-64130-1-sync.rs:18:10\n    |\n LL |     let x = Foo;\n    |         - has type `Foo` which is not `Sync`\n@@ -15,7 +15,7 @@ LL |     baz().await;\n LL | }\n    | - `x` is later dropped here\n note: required by a bound in `is_sync`\n-  --> $DIR/issue-64130-1-sync.rs:11:15\n+  --> $DIR/issue-64130-1-sync.rs:14:15\n    |\n LL | fn is_sync<T: Sync>(t: T) { }\n    |               ^^^^ required by this bound in `is_sync`"}, {"sha": "b6a73c2a5cb83fdf34d93403d007134d510c3681", "filename": "tests/ui/async-await/issue-64130-2-send.drop_tracking.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fissue-64130-2-send.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fissue-64130-2-send.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-64130-2-send.drop_tracking.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -0,0 +1,28 @@\n+error: future cannot be sent between threads safely\n+  --> $DIR/issue-64130-2-send.rs:24:13\n+   |\n+LL |     is_send(bar());\n+   |             ^^^^^ future returned by `bar` is not `Send`\n+   |\n+   = note: the trait bound `Unique<Foo>: Send` is not satisfied\n+note: future is not `Send` as this value is used across an await\n+  --> $DIR/issue-64130-2-send.rs:18:10\n+   |\n+LL |     let x = Box::new(Foo);\n+   |         - has type `Box<Foo>` which is not `Send`\n+LL |     baz().await;\n+   |          ^^^^^^ await occurs here, with `x` maybe used later\n+LL | }\n+   | - `x` is later dropped here\n+note: required by a bound in `is_send`\n+  --> $DIR/issue-64130-2-send.rs:14:15\n+   |\n+LL | fn is_send<T: Send>(t: T) { }\n+   |               ^^^^ required by this bound in `is_send`\n+help: consider borrowing here\n+   |\n+LL |     is_send(&bar());\n+   |             +\n+\n+error: aborting due to previous error\n+"}, {"sha": "560560f60366e69233c5d92ffc9a15528df580fe", "filename": "tests/ui/async-await/issue-64130-2-send.drop_tracking_mir.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fissue-64130-2-send.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fissue-64130-2-send.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-64130-2-send.drop_tracking_mir.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -0,0 +1,26 @@\n+error: future cannot be sent between threads safely\n+  --> $DIR/issue-64130-2-send.rs:24:13\n+   |\n+LL |     is_send(bar());\n+   |             ^^^^^ future returned by `bar` is not `Send`\n+   |\n+   = note: the trait bound `Unique<Foo>: Send` is not satisfied\n+note: future is not `Send` as this value is used across an await\n+  --> $DIR/issue-64130-2-send.rs:18:10\n+   |\n+LL |     let x = Box::new(Foo);\n+   |         - has type `Box<Foo>` which is not `Send`\n+LL |     baz().await;\n+   |          ^^^^^^ await occurs here, with `x` maybe used later\n+note: required by a bound in `is_send`\n+  --> $DIR/issue-64130-2-send.rs:14:15\n+   |\n+LL | fn is_send<T: Send>(t: T) { }\n+   |               ^^^^ required by this bound in `is_send`\n+help: consider borrowing here\n+   |\n+LL |     is_send(&bar());\n+   |             +\n+\n+error: aborting due to previous error\n+"}, {"sha": "b6a73c2a5cb83fdf34d93403d007134d510c3681", "filename": "tests/ui/async-await/issue-64130-2-send.no_drop_tracking.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fissue-64130-2-send.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fissue-64130-2-send.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-64130-2-send.no_drop_tracking.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -0,0 +1,28 @@\n+error: future cannot be sent between threads safely\n+  --> $DIR/issue-64130-2-send.rs:24:13\n+   |\n+LL |     is_send(bar());\n+   |             ^^^^^ future returned by `bar` is not `Send`\n+   |\n+   = note: the trait bound `Unique<Foo>: Send` is not satisfied\n+note: future is not `Send` as this value is used across an await\n+  --> $DIR/issue-64130-2-send.rs:18:10\n+   |\n+LL |     let x = Box::new(Foo);\n+   |         - has type `Box<Foo>` which is not `Send`\n+LL |     baz().await;\n+   |          ^^^^^^ await occurs here, with `x` maybe used later\n+LL | }\n+   | - `x` is later dropped here\n+note: required by a bound in `is_send`\n+  --> $DIR/issue-64130-2-send.rs:14:15\n+   |\n+LL | fn is_send<T: Send>(t: T) { }\n+   |               ^^^^ required by this bound in `is_send`\n+help: consider borrowing here\n+   |\n+LL |     is_send(&bar());\n+   |             +\n+\n+error: aborting due to previous error\n+"}, {"sha": "d6d855bac0762b4dddc5bc68fc29b5dcbead4e48", "filename": "tests/ui/async-await/issue-64130-2-send.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fissue-64130-2-send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fissue-64130-2-send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-64130-2-send.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -1,3 +1,6 @@\n+// revisions: no_drop_tracking drop_tracking drop_tracking_mir\n+// [drop_tracking] compile-flags: -Zdrop-tracking\n+// [drop_tracking_mir] compile-flags: -Zdrop-tracking-mir\n #![feature(negative_impls)]\n // edition:2018\n \n@@ -11,7 +14,7 @@ impl !Send for Foo {}\n fn is_send<T: Send>(t: T) { }\n \n async fn bar() {\n-    let x = Foo;\n+    let x = Box::new(Foo);\n     baz().await;\n }\n "}, {"sha": "f6505cad69e21236a093873947d39d3c16d5b5d5", "filename": "tests/ui/async-await/issue-64130-2-send.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fissue-64130-2-send.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fissue-64130-2-send.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-64130-2-send.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -1,12 +1,12 @@\n error: future cannot be sent between threads safely\n-  --> $DIR/issue-64130-2-send.rs:21:13\n+  --> $DIR/issue-64130-2-send.rs:24:13\n    |\n LL |     is_send(bar());\n    |             ^^^^^ future returned by `bar` is not `Send`\n    |\n    = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Foo`\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/issue-64130-2-send.rs:15:10\n+  --> $DIR/issue-64130-2-send.rs:18:10\n    |\n LL |     let x = Foo;\n    |         - has type `Foo` which is not `Send`\n@@ -15,7 +15,7 @@ LL |     baz().await;\n LL | }\n    | - `x` is later dropped here\n note: required by a bound in `is_send`\n-  --> $DIR/issue-64130-2-send.rs:11:15\n+  --> $DIR/issue-64130-2-send.rs:14:15\n    |\n LL | fn is_send<T: Send>(t: T) { }\n    |               ^^^^ required by this bound in `is_send`"}, {"sha": "d65aae8cc3fdd86402257767c78065c17fad6edb", "filename": "tests/ui/async-await/issue-64130-3-other.drop_tracking.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fissue-64130-3-other.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fissue-64130-3-other.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-64130-3-other.drop_tracking.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -0,0 +1,27 @@\n+error[E0277]: the trait bound `Foo: Qux` is not satisfied in `impl Future<Output = ()>`\n+  --> $DIR/issue-64130-3-other.rs:27:12\n+   |\n+LL | async fn bar() {\n+   |                - within this `impl Future<Output = ()>`\n+...\n+LL |     is_qux(bar());\n+   |            ^^^^^ within `impl Future<Output = ()>`, the trait `Qux` is not implemented for `Foo`\n+   |\n+note: future does not implement `Qux` as this value is used across an await\n+  --> $DIR/issue-64130-3-other.rs:21:10\n+   |\n+LL |     let x = Box::new(Foo);\n+   |         - has type `Box<Foo>` which does not implement `Qux`\n+LL |     baz().await;\n+   |          ^^^^^^ await occurs here, with `x` maybe used later\n+LL | }\n+   | - `x` is later dropped here\n+note: required by a bound in `is_qux`\n+  --> $DIR/issue-64130-3-other.rs:17:14\n+   |\n+LL | fn is_qux<T: Qux>(t: T) {}\n+   |              ^^^ required by this bound in `is_qux`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "8fed69d9d8898c09942674f2ad1f2535bfd1217c", "filename": "tests/ui/async-await/issue-64130-3-other.drop_tracking_mir.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fissue-64130-3-other.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fissue-64130-3-other.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-64130-3-other.drop_tracking_mir.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -0,0 +1,25 @@\n+error[E0277]: the trait bound `Foo: Qux` is not satisfied in `impl Future<Output = ()>`\n+  --> $DIR/issue-64130-3-other.rs:27:12\n+   |\n+LL | async fn bar() {\n+   |                - within this `impl Future<Output = ()>`\n+...\n+LL |     is_qux(bar());\n+   |            ^^^^^ within `impl Future<Output = ()>`, the trait `Qux` is not implemented for `Foo`\n+   |\n+note: future does not implement `Qux` as this value is used across an await\n+  --> $DIR/issue-64130-3-other.rs:21:10\n+   |\n+LL |     let x = Box::new(Foo);\n+   |         - has type `Box<Foo>` which does not implement `Qux`\n+LL |     baz().await;\n+   |          ^^^^^^ await occurs here, with `x` maybe used later\n+note: required by a bound in `is_qux`\n+  --> $DIR/issue-64130-3-other.rs:17:14\n+   |\n+LL | fn is_qux<T: Qux>(t: T) {}\n+   |              ^^^ required by this bound in `is_qux`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "d65aae8cc3fdd86402257767c78065c17fad6edb", "filename": "tests/ui/async-await/issue-64130-3-other.no_drop_tracking.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fissue-64130-3-other.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fissue-64130-3-other.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-64130-3-other.no_drop_tracking.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -0,0 +1,27 @@\n+error[E0277]: the trait bound `Foo: Qux` is not satisfied in `impl Future<Output = ()>`\n+  --> $DIR/issue-64130-3-other.rs:27:12\n+   |\n+LL | async fn bar() {\n+   |                - within this `impl Future<Output = ()>`\n+...\n+LL |     is_qux(bar());\n+   |            ^^^^^ within `impl Future<Output = ()>`, the trait `Qux` is not implemented for `Foo`\n+   |\n+note: future does not implement `Qux` as this value is used across an await\n+  --> $DIR/issue-64130-3-other.rs:21:10\n+   |\n+LL |     let x = Box::new(Foo);\n+   |         - has type `Box<Foo>` which does not implement `Qux`\n+LL |     baz().await;\n+   |          ^^^^^^ await occurs here, with `x` maybe used later\n+LL | }\n+   | - `x` is later dropped here\n+note: required by a bound in `is_qux`\n+  --> $DIR/issue-64130-3-other.rs:17:14\n+   |\n+LL | fn is_qux<T: Qux>(t: T) {}\n+   |              ^^^ required by this bound in `is_qux`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "92d3b7c81fb62e8ec1de472de5aaa3059762a647", "filename": "tests/ui/async-await/issue-64130-3-other.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fissue-64130-3-other.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fissue-64130-3-other.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-64130-3-other.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -1,3 +1,6 @@\n+// revisions: no_drop_tracking drop_tracking drop_tracking_mir\n+// [drop_tracking] compile-flags: -Zdrop-tracking\n+// [drop_tracking_mir] compile-flags: -Zdrop-tracking-mir\n #![feature(auto_traits)]\n #![feature(negative_impls)]\n // edition:2018\n@@ -14,7 +17,7 @@ impl !Qux for Foo {}\n fn is_qux<T: Qux>(t: T) {}\n \n async fn bar() {\n-    let x = Foo;\n+    let x = Box::new(Foo);\n     baz().await;\n }\n "}, {"sha": "cb36a3811b2803eb5fe1ed98875321716c4fbaa6", "filename": "tests/ui/async-await/issue-64130-3-other.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fissue-64130-3-other.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fissue-64130-3-other.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-64130-3-other.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `Foo: Qux` is not satisfied in `impl Future<Output = ()>`\n-  --> $DIR/issue-64130-3-other.rs:24:12\n+  --> $DIR/issue-64130-3-other.rs:27:12\n    |\n LL | async fn bar() {\n    |                - within this `impl Future<Output = ()>`\n@@ -8,7 +8,7 @@ LL |     is_qux(bar());\n    |            ^^^^^ within `impl Future<Output = ()>`, the trait `Qux` is not implemented for `Foo`\n    |\n note: future does not implement `Qux` as this value is used across an await\n-  --> $DIR/issue-64130-3-other.rs:18:10\n+  --> $DIR/issue-64130-3-other.rs:21:10\n    |\n LL |     let x = Foo;\n    |         - has type `Foo` which does not implement `Qux`\n@@ -17,7 +17,7 @@ LL |     baz().await;\n LL | }\n    | - `x` is later dropped here\n note: required by a bound in `is_qux`\n-  --> $DIR/issue-64130-3-other.rs:14:14\n+  --> $DIR/issue-64130-3-other.rs:17:14\n    |\n LL | fn is_qux<T: Qux>(t: T) {}\n    |              ^^^ required by this bound in `is_qux`"}, {"sha": "884619f4dd69d4151a9c79a1bc401789173e29a9", "filename": "tests/ui/async-await/issue-64130-4-async-move.drop-tracking.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fissue-64130-4-async-move.drop-tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fissue-64130-4-async-move.drop-tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-64130-4-async-move.drop-tracking.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -1,12 +1,12 @@\n error: future cannot be sent between threads safely\n-  --> $DIR/issue-64130-4-async-move.rs:19:17\n+  --> $DIR/issue-64130-4-async-move.rs:20:17\n    |\n LL | pub fn foo() -> impl Future + Send {\n    |                 ^^^^^^^^^^^^^^^^^^ future created by async block is not `Send`\n    |\n    = help: the trait `Sync` is not implemented for `(dyn Any + Send + 'static)`\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/issue-64130-4-async-move.rs:25:31\n+  --> $DIR/issue-64130-4-async-move.rs:27:31\n    |\n LL |         match client.status() {\n    |               ------ has type `&Client` which is not `Send`\n@@ -17,7 +17,7 @@ LL |                 let _x = get().await;\n LL |     }\n    |     - `client` is later dropped here\n help: consider moving this into a `let` binding to create a shorter lived borrow\n-  --> $DIR/issue-64130-4-async-move.rs:23:15\n+  --> $DIR/issue-64130-4-async-move.rs:25:15\n    |\n LL |         match client.status() {\n    |               ^^^^^^^^^^^^^^^"}, {"sha": "0bc7cb2f2acdab035f7a1d13a16ae44f2339432d", "filename": "tests/ui/async-await/issue-64130-4-async-move.no_drop_tracking.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fissue-64130-4-async-move.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fissue-64130-4-async-move.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-64130-4-async-move.no_drop_tracking.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -1,12 +1,12 @@\n error: future cannot be sent between threads safely\n-  --> $DIR/issue-64130-4-async-move.rs:19:17\n+  --> $DIR/issue-64130-4-async-move.rs:21:17\n    |\n LL | pub fn foo() -> impl Future + Send {\n    |                 ^^^^^^^^^^^^^^^^^^ future created by async block is not `Send`\n    |\n    = help: the trait `Sync` is not implemented for `(dyn Any + Send + 'static)`\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/issue-64130-4-async-move.rs:25:31\n+  --> $DIR/issue-64130-4-async-move.rs:27:31\n    |\n LL |         match client.status() {\n    |               ------ has type `&Client` which is not `Send`\n@@ -17,7 +17,7 @@ LL |                 let _x = get().await;\n LL |     }\n    |     - `client` is later dropped here\n help: consider moving this into a `let` binding to create a shorter lived borrow\n-  --> $DIR/issue-64130-4-async-move.rs:23:15\n+  --> $DIR/issue-64130-4-async-move.rs:25:15\n    |\n LL |         match client.status() {\n    |               ^^^^^^^^^^^^^^^"}, {"sha": "bcb297aaa02585a994f8be3869c447f0fb0291fa", "filename": "tests/ui/async-await/issue-64130-4-async-move.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fissue-64130-4-async-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fissue-64130-4-async-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-64130-4-async-move.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -1,8 +1,10 @@\n // edition:2018\n-// revisions: no_drop_tracking drop_tracking\n+// revisions: no_drop_tracking drop_tracking drop_tracking_mir\n+// [drop_tracking] compile-flags: -Zdrop-tracking\n+// [drop_tracking_mir] compile-flags: -Zdrop-tracking-mir\n+// [drop_tracking_mir] check-pass\n // [drop_tracking] check-pass\n-// [drop_tracking] compile-flags: -Zdrop-tracking=yes\n-// [no_drop_tracking] compile-flags: -Zdrop-tracking=no\n+\n use std::any::Any;\n use std::future::Future;\n "}, {"sha": "fc8bcc8ae7964b58a9fbf24913c5673a547806b1", "filename": "tests/ui/async-await/issue-67252-unnamed-future.drop_tracking.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fissue-67252-unnamed-future.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fissue-67252-unnamed-future.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-67252-unnamed-future.drop_tracking.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -0,0 +1,30 @@\n+error: future cannot be sent between threads safely\n+  --> $DIR/issue-67252-unnamed-future.rs:21:11\n+   |\n+LL |       spawn(async {\n+   |  ___________^\n+LL | |         let a = std::ptr::null_mut::<()>(); // `*mut ()` is not `Send`\n+LL | |         AFuture.await;\n+LL | |         drop(a);\n+LL | |     });\n+   | |_____^ future created by async block is not `Send`\n+   |\n+   = help: within `[async block@$DIR/issue-67252-unnamed-future.rs:21:11: 25:6]`, the trait `Send` is not implemented for `*mut ()`\n+note: future is not `Send` as this value is used across an await\n+  --> $DIR/issue-67252-unnamed-future.rs:23:16\n+   |\n+LL |         let a = std::ptr::null_mut::<()>(); // `*mut ()` is not `Send`\n+   |             - has type `*mut ()` which is not `Send`\n+LL |         AFuture.await;\n+   |                ^^^^^^ await occurs here, with `a` maybe used later\n+LL |         drop(a);\n+LL |     });\n+   |     - `a` is later dropped here\n+note: required by a bound in `spawn`\n+  --> $DIR/issue-67252-unnamed-future.rs:9:13\n+   |\n+LL | fn spawn<T: Send>(_: T) {}\n+   |             ^^^^ required by this bound in `spawn`\n+\n+error: aborting due to previous error\n+"}, {"sha": "a3ef7add1166981a4522b13b7b2d548e4d7b67bc", "filename": "tests/ui/async-await/issue-67252-unnamed-future.drop_tracking_mir.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fissue-67252-unnamed-future.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fissue-67252-unnamed-future.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-67252-unnamed-future.drop_tracking_mir.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -0,0 +1,22 @@\n+error: future cannot be sent between threads safely\n+  --> $DIR/issue-67252-unnamed-future.rs:21:5\n+   |\n+LL |     spawn(async {\n+   |     ^^^^^ future created by async block is not `Send`\n+   |\n+   = help: within `[async block@$DIR/issue-67252-unnamed-future.rs:21:11: 25:6]`, the trait `Send` is not implemented for `*mut ()`\n+note: future is not `Send` as this value is used across an await\n+  --> $DIR/issue-67252-unnamed-future.rs:23:16\n+   |\n+LL |         let a = std::ptr::null_mut::<()>(); // `*mut ()` is not `Send`\n+   |             - has type `*mut ()` which is not `Send`\n+LL |         AFuture.await;\n+   |                ^^^^^^ await occurs here, with `a` maybe used later\n+note: required by a bound in `spawn`\n+  --> $DIR/issue-67252-unnamed-future.rs:9:13\n+   |\n+LL | fn spawn<T: Send>(_: T) {}\n+   |             ^^^^ required by this bound in `spawn`\n+\n+error: aborting due to previous error\n+"}, {"sha": "fc8bcc8ae7964b58a9fbf24913c5673a547806b1", "filename": "tests/ui/async-await/issue-67252-unnamed-future.no_drop_tracking.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fissue-67252-unnamed-future.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fissue-67252-unnamed-future.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-67252-unnamed-future.no_drop_tracking.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -0,0 +1,30 @@\n+error: future cannot be sent between threads safely\n+  --> $DIR/issue-67252-unnamed-future.rs:21:11\n+   |\n+LL |       spawn(async {\n+   |  ___________^\n+LL | |         let a = std::ptr::null_mut::<()>(); // `*mut ()` is not `Send`\n+LL | |         AFuture.await;\n+LL | |         drop(a);\n+LL | |     });\n+   | |_____^ future created by async block is not `Send`\n+   |\n+   = help: within `[async block@$DIR/issue-67252-unnamed-future.rs:21:11: 25:6]`, the trait `Send` is not implemented for `*mut ()`\n+note: future is not `Send` as this value is used across an await\n+  --> $DIR/issue-67252-unnamed-future.rs:23:16\n+   |\n+LL |         let a = std::ptr::null_mut::<()>(); // `*mut ()` is not `Send`\n+   |             - has type `*mut ()` which is not `Send`\n+LL |         AFuture.await;\n+   |                ^^^^^^ await occurs here, with `a` maybe used later\n+LL |         drop(a);\n+LL |     });\n+   |     - `a` is later dropped here\n+note: required by a bound in `spawn`\n+  --> $DIR/issue-67252-unnamed-future.rs:9:13\n+   |\n+LL | fn spawn<T: Send>(_: T) {}\n+   |             ^^^^ required by this bound in `spawn`\n+\n+error: aborting due to previous error\n+"}, {"sha": "bb9ad77cef31daf001ae185a8f488ad13e8aaf96", "filename": "tests/ui/async-await/issue-67252-unnamed-future.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fissue-67252-unnamed-future.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fissue-67252-unnamed-future.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-67252-unnamed-future.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -1,3 +1,6 @@\n+// revisions: no_drop_tracking drop_tracking drop_tracking_mir\n+// [drop_tracking] compile-flags: -Zdrop-tracking\n+// [drop_tracking_mir] compile-flags: -Zdrop-tracking-mir\n // edition:2018\n use std::future::Future;\n use std::pin::Pin;\n@@ -16,8 +19,9 @@ impl Future for AFuture{\n \n async fn foo() {\n     spawn(async { //~ ERROR future cannot be sent between threads safely\n-        let _a = std::ptr::null_mut::<()>(); // `*mut ()` is not `Send`\n+        let a = std::ptr::null_mut::<()>(); // `*mut ()` is not `Send`\n         AFuture.await;\n+        drop(a);\n     });\n }\n "}, {"sha": "fcba4410ba9a53fec35b35fb2a35e1522c2d4081", "filename": "tests/ui/async-await/issue-67252-unnamed-future.stderr", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/7d4df2d30eb342af1ef136d83d70d281f34adcd7/tests%2Fui%2Fasync-await%2Fissue-67252-unnamed-future.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d4df2d30eb342af1ef136d83d70d281f34adcd7/tests%2Fui%2Fasync-await%2Fissue-67252-unnamed-future.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-67252-unnamed-future.stderr?ref=7d4df2d30eb342af1ef136d83d70d281f34adcd7", "patch": "@@ -1,28 +0,0 @@\n-error: future cannot be sent between threads safely\n-  --> $DIR/issue-67252-unnamed-future.rs:18:11\n-   |\n-LL |       spawn(async {\n-   |  ___________^\n-LL | |         let _a = std::ptr::null_mut::<()>(); // `*mut ()` is not `Send`\n-LL | |         AFuture.await;\n-LL | |     });\n-   | |_____^ future created by async block is not `Send`\n-   |\n-   = help: within `[async block@$DIR/issue-67252-unnamed-future.rs:18:11: 21:6]`, the trait `Send` is not implemented for `*mut ()`\n-note: future is not `Send` as this value is used across an await\n-  --> $DIR/issue-67252-unnamed-future.rs:20:16\n-   |\n-LL |         let _a = std::ptr::null_mut::<()>(); // `*mut ()` is not `Send`\n-   |             -- has type `*mut ()` which is not `Send`\n-LL |         AFuture.await;\n-   |                ^^^^^^ await occurs here, with `_a` maybe used later\n-LL |     });\n-   |     - `_a` is later dropped here\n-note: required by a bound in `spawn`\n-  --> $DIR/issue-67252-unnamed-future.rs:6:13\n-   |\n-LL | fn spawn<T: Send>(_: T) {}\n-   |             ^^^^ required by this bound in `spawn`\n-\n-error: aborting due to previous error\n-"}, {"sha": "7a9242cbaf591e9803f30e56a8873fc937a6d060", "filename": "tests/ui/async-await/issue-68112.drop_tracking_mir.stderr", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fissue-68112.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fissue-68112.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-68112.drop_tracking_mir.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -0,0 +1,80 @@\n+error: future cannot be sent between threads safely\n+  --> $DIR/issue-68112.rs:37:5\n+   |\n+LL |     require_send(send_fut);\n+   |     ^^^^^^^^^^^^ future created by async block is not `Send`\n+   |\n+   = help: the trait `Sync` is not implemented for `RefCell<i32>`\n+   = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` instead\n+note: future is not `Send` as it awaits another future which is not `Send`\n+  --> $DIR/issue-68112.rs:34:17\n+   |\n+LL |         let _ = non_send_fut.await;\n+   |                 ^^^^^^^^^^^^ await occurs here on type `impl Future<Output = Arc<RefCell<i32>>>`, which is not `Send`\n+note: required by a bound in `require_send`\n+  --> $DIR/issue-68112.rs:14:25\n+   |\n+LL | fn require_send(_: impl Send) {}\n+   |                         ^^^^ required by this bound in `require_send`\n+\n+error: future cannot be sent between threads safely\n+  --> $DIR/issue-68112.rs:46:5\n+   |\n+LL |     require_send(send_fut);\n+   |     ^^^^^^^^^^^^ future created by async block is not `Send`\n+   |\n+   = help: the trait `Sync` is not implemented for `RefCell<i32>`\n+   = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` instead\n+note: future is not `Send` as it awaits another future which is not `Send`\n+  --> $DIR/issue-68112.rs:43:17\n+   |\n+LL |         let _ = make_non_send_future1().await;\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^ await occurs here on type `impl Future<Output = Arc<RefCell<i32>>>`, which is not `Send`\n+note: required by a bound in `require_send`\n+  --> $DIR/issue-68112.rs:14:25\n+   |\n+LL | fn require_send(_: impl Send) {}\n+   |                         ^^^^ required by this bound in `require_send`\n+\n+error[E0277]: `RefCell<i32>` cannot be shared between threads safely\n+  --> $DIR/issue-68112.rs:65:5\n+   |\n+LL |     require_send(send_fut);\n+   |     ^^^^^^^^^^^^ `RefCell<i32>` cannot be shared between threads safely\n+   |\n+   = help: the trait `Sync` is not implemented for `RefCell<i32>`\n+   = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` instead\n+   = note: required for `Arc<RefCell<i32>>` to implement `Send`\n+note: required because it's used within this `async fn` body\n+  --> $DIR/issue-68112.rs:50:31\n+   |\n+LL |   async fn ready2<T>(t: T) -> T {\n+   |  _______________________________^\n+LL | |     t\n+LL | | }\n+   | |_^\n+note: required because it appears within the type `impl Future<Output = Arc<RefCell<i32>>>`\n+  --> $DIR/issue-68112.rs:53:31\n+   |\n+LL | fn make_non_send_future2() -> impl Future<Output = Arc<RefCell<i32>>> {\n+   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: required because it captures the following types: `impl Future<Output = Arc<RefCell<i32>>>`, `Ready<i32>`\n+note: required because it's used within this `async` block\n+  --> $DIR/issue-68112.rs:60:20\n+   |\n+LL |       let send_fut = async {\n+   |  ____________________^\n+LL | |         let non_send_fut = make_non_send_future2();\n+LL | |         let _ = non_send_fut.await;\n+LL | |         ready(0).await;\n+LL | |     };\n+   | |_____^\n+note: required by a bound in `require_send`\n+  --> $DIR/issue-68112.rs:14:25\n+   |\n+LL | fn require_send(_: impl Send) {}\n+   |                         ^^^^ required by this bound in `require_send`\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "19119ae0fc127669a978cc3c5da39294e8edcce9", "filename": "tests/ui/async-await/issue-68112.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fissue-68112.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fissue-68112.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-68112.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -1,7 +1,7 @@\n // edition:2018\n-// revisions: no_drop_tracking drop_tracking\n-// [drop_tracking] compile-flags: -Zdrop-tracking=yes\n-// [no_drop_tracking] compile-flags: -Zdrop-tracking=no\n+// revisions: no_drop_tracking drop_tracking drop_tracking_mir\n+// [drop_tracking] compile-flags: -Zdrop-tracking\n+// [drop_tracking_mir] compile-flags: -Zdrop-tracking-mir\n \n use std::{\n     cell::RefCell,\n@@ -14,7 +14,7 @@ use std::{\n fn require_send(_: impl Send) {}\n \n struct Ready<T>(Option<T>);\n-impl<T> Future for Ready<T> {\n+impl<T: Unpin> Future for Ready<T> {\n     type Output = T;\n     fn poll(mut self: Pin<&mut Self>, _cx: &mut Context<'_>) -> Poll<T> {\n         Poll::Ready(self.0.take().unwrap())"}, {"sha": "ab0698c3ec2132dc9c8def966e733d938f8b8145", "filename": "tests/ui/async-await/issue-70818.drop_tracking.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fissue-70818.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fissue-70818.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-70818.drop_tracking.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -0,0 +1,18 @@\n+error: future cannot be sent between threads safely\n+  --> $DIR/issue-70818.rs:7:38\n+   |\n+LL | fn foo<T: Send, U>(ty: T, ty1: U) -> impl Future<Output = (T, U)> + Send {\n+   |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ future created by async block is not `Send`\n+   |\n+note: captured value is not `Send`\n+  --> $DIR/issue-70818.rs:9:18\n+   |\n+LL |     async { (ty, ty1) }\n+   |                  ^^^ has type `U` which is not `Send`\n+help: consider restricting type parameter `U`\n+   |\n+LL | fn foo<T: Send, U: std::marker::Send>(ty: T, ty1: U) -> impl Future<Output = (T, U)> + Send {\n+   |                  +++++++++++++++++++\n+\n+error: aborting due to previous error\n+"}, {"sha": "ab0698c3ec2132dc9c8def966e733d938f8b8145", "filename": "tests/ui/async-await/issue-70818.drop_tracking_mir.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fissue-70818.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fissue-70818.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-70818.drop_tracking_mir.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -0,0 +1,18 @@\n+error: future cannot be sent between threads safely\n+  --> $DIR/issue-70818.rs:7:38\n+   |\n+LL | fn foo<T: Send, U>(ty: T, ty1: U) -> impl Future<Output = (T, U)> + Send {\n+   |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ future created by async block is not `Send`\n+   |\n+note: captured value is not `Send`\n+  --> $DIR/issue-70818.rs:9:18\n+   |\n+LL |     async { (ty, ty1) }\n+   |                  ^^^ has type `U` which is not `Send`\n+help: consider restricting type parameter `U`\n+   |\n+LL | fn foo<T: Send, U: std::marker::Send>(ty: T, ty1: U) -> impl Future<Output = (T, U)> + Send {\n+   |                  +++++++++++++++++++\n+\n+error: aborting due to previous error\n+"}, {"sha": "ab0698c3ec2132dc9c8def966e733d938f8b8145", "filename": "tests/ui/async-await/issue-70818.no_drop_tracking.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fissue-70818.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fissue-70818.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-70818.no_drop_tracking.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -0,0 +1,18 @@\n+error: future cannot be sent between threads safely\n+  --> $DIR/issue-70818.rs:7:38\n+   |\n+LL | fn foo<T: Send, U>(ty: T, ty1: U) -> impl Future<Output = (T, U)> + Send {\n+   |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ future created by async block is not `Send`\n+   |\n+note: captured value is not `Send`\n+  --> $DIR/issue-70818.rs:9:18\n+   |\n+LL |     async { (ty, ty1) }\n+   |                  ^^^ has type `U` which is not `Send`\n+help: consider restricting type parameter `U`\n+   |\n+LL | fn foo<T: Send, U: std::marker::Send>(ty: T, ty1: U) -> impl Future<Output = (T, U)> + Send {\n+   |                  +++++++++++++++++++\n+\n+error: aborting due to previous error\n+"}, {"sha": "2941de0f57714cb36ff363c2033057617b8af6d2", "filename": "tests/ui/async-await/issue-70818.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fissue-70818.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fissue-70818.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-70818.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -1,3 +1,6 @@\n+// revisions: no_drop_tracking drop_tracking drop_tracking_mir\n+// [drop_tracking] compile-flags: -Zdrop-tracking\n+// [drop_tracking_mir] compile-flags: -Zdrop-tracking-mir\n // edition:2018\n \n use std::future::Future;"}, {"sha": "ab0698c3ec2132dc9c8def966e733d938f8b8145", "filename": "tests/ui/async-await/issue-70818.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fissue-70818.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fissue-70818.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-70818.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -1,11 +1,11 @@\n error: future cannot be sent between threads safely\n-  --> $DIR/issue-70818.rs:4:38\n+  --> $DIR/issue-70818.rs:7:38\n    |\n LL | fn foo<T: Send, U>(ty: T, ty1: U) -> impl Future<Output = (T, U)> + Send {\n    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ future created by async block is not `Send`\n    |\n note: captured value is not `Send`\n-  --> $DIR/issue-70818.rs:6:18\n+  --> $DIR/issue-70818.rs:9:18\n    |\n LL |     async { (ty, ty1) }\n    |                  ^^^ has type `U` which is not `Send`"}, {"sha": "c636be15a585c73df0bc4be8b30503c7914a4f49", "filename": "tests/ui/async-await/issue-70935-complex-spans.drop_tracking_mir.stderr", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fissue-70935-complex-spans.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fissue-70935-complex-spans.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-70935-complex-spans.drop_tracking_mir.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -0,0 +1,34 @@\n+error[E0277]: `Sender<i32>` cannot be shared between threads safely\n+  --> $DIR/issue-70935-complex-spans.rs:13:45\n+   |\n+LL | fn foo(tx: std::sync::mpsc::Sender<i32>) -> impl Future + Send {\n+   |                                             ^^^^^^^^^^^^^^^^^^ `Sender<i32>` cannot be shared between threads safely\n+   |\n+   = help: the trait `Sync` is not implemented for `Sender<i32>`\n+   = note: required for `&Sender<i32>` to implement `Send`\n+note: required because it's used within this closure\n+  --> $DIR/issue-70935-complex-spans.rs:17:13\n+   |\n+LL |         baz(|| async{\n+   |             ^^\n+note: required because it's used within this `async fn` body\n+  --> $DIR/issue-70935-complex-spans.rs:10:67\n+   |\n+LL |   async fn baz<T>(_c: impl FnMut() -> T) where T: Future<Output=()> {\n+   |  ___________________________________________________________________^\n+LL | | }\n+   | |_^\n+   = note: required because it captures the following types: `impl Future<Output = ()>`\n+note: required because it's used within this `async` block\n+  --> $DIR/issue-70935-complex-spans.rs:16:5\n+   |\n+LL | /     async move {\n+LL | |         baz(|| async{\n+LL | |             foo(tx.clone());\n+LL | |         }).await;\n+LL | |     }\n+   | |_____^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "78625bd393d25f9fba5651bd18c534878a19c57b", "filename": "tests/ui/async-await/issue-70935-complex-spans.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fissue-70935-complex-spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fissue-70935-complex-spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-70935-complex-spans.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -1,7 +1,7 @@\n // edition:2018\n-// revisions: no_drop_tracking drop_tracking\n-// [no_drop_tracking]compile-flags:-Zdrop-tracking=no\n-// [drop_tracking]compile-flags:-Zdrop-tracking\n+// revisions: no_drop_tracking drop_tracking drop_tracking_mir\n+// [drop_tracking] compile-flags: -Zdrop-tracking\n+// [drop_tracking_mir] compile-flags: -Zdrop-tracking-mir\n // #70935: Check if we do not emit snippet\n // with newlines which lead complex diagnostics.\n \n@@ -12,7 +12,7 @@ async fn baz<T>(_c: impl FnMut() -> T) where T: Future<Output=()> {\n \n fn foo(tx: std::sync::mpsc::Sender<i32>) -> impl Future + Send {\n     //[no_drop_tracking]~^ ERROR future cannot be sent between threads safely\n-    //[drop_tracking]~^^ ERROR `Sender<i32>` cannot be shared between threads\n+    //[drop_tracking,drop_tracking_mir]~^^ ERROR `Sender<i32>` cannot be shared between threads\n     async move {\n         baz(|| async{\n             foo(tx.clone());"}, {"sha": "6d19c3beb2fe12ec94570ee49cc75507c5ac91b2", "filename": "tests/ui/async-await/issue-73741-type-err-drop-tracking.drop_tracking.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fissue-73741-type-err-drop-tracking.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fissue-73741-type-err-drop-tracking.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-73741-type-err-drop-tracking.drop_tracking.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -0,0 +1,11 @@\n+error[E0070]: invalid left-hand side of assignment\n+  --> $DIR/issue-73741-type-err-drop-tracking.rs:11:7\n+   |\n+LL |     1 = 2;\n+   |     - ^\n+   |     |\n+   |     cannot assign to this expression\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0070`."}, {"sha": "6d19c3beb2fe12ec94570ee49cc75507c5ac91b2", "filename": "tests/ui/async-await/issue-73741-type-err-drop-tracking.drop_tracking_mir.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fissue-73741-type-err-drop-tracking.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fissue-73741-type-err-drop-tracking.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-73741-type-err-drop-tracking.drop_tracking_mir.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -0,0 +1,11 @@\n+error[E0070]: invalid left-hand side of assignment\n+  --> $DIR/issue-73741-type-err-drop-tracking.rs:11:7\n+   |\n+LL |     1 = 2;\n+   |     - ^\n+   |     |\n+   |     cannot assign to this expression\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0070`."}, {"sha": "6d19c3beb2fe12ec94570ee49cc75507c5ac91b2", "filename": "tests/ui/async-await/issue-73741-type-err-drop-tracking.no_drop_tracking.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fissue-73741-type-err-drop-tracking.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fissue-73741-type-err-drop-tracking.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-73741-type-err-drop-tracking.no_drop_tracking.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -0,0 +1,11 @@\n+error[E0070]: invalid left-hand side of assignment\n+  --> $DIR/issue-73741-type-err-drop-tracking.rs:11:7\n+   |\n+LL |     1 = 2;\n+   |     - ^\n+   |     |\n+   |     cannot assign to this expression\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0070`."}, {"sha": "1fa8d69143a22ce9ac462e5d27f54fcb9cc47475", "filename": "tests/ui/async-await/issue-73741-type-err-drop-tracking.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fissue-73741-type-err-drop-tracking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fissue-73741-type-err-drop-tracking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-73741-type-err-drop-tracking.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -1,5 +1,8 @@\n // edition:2018\n-// compile-flags: -Zdrop-tracking\n+// revisions: no_drop_tracking drop_tracking drop_tracking_mir\n+// [drop_tracking] compile-flags: -Zdrop-tracking\n+// [drop_tracking_mir] compile-flags: -Zdrop-tracking-mir\n+//\n // Regression test for issue #73741\n // Ensures that we don't emit spurious errors when\n // a type error ocurrs in an `async fn`"}, {"sha": "6d19c3beb2fe12ec94570ee49cc75507c5ac91b2", "filename": "tests/ui/async-await/issue-73741-type-err-drop-tracking.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fissue-73741-type-err-drop-tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fissue-73741-type-err-drop-tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-73741-type-err-drop-tracking.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -1,5 +1,5 @@\n error[E0070]: invalid left-hand side of assignment\n-  --> $DIR/issue-73741-type-err-drop-tracking.rs:8:7\n+  --> $DIR/issue-73741-type-err-drop-tracking.rs:11:7\n    |\n LL |     1 = 2;\n    |     - ^"}, {"sha": "5c8b7ef1b7135a10f55243d13ad3101f3224fd3a", "filename": "tests/ui/async-await/issue-86507.drop_tracking.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fissue-86507.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fissue-86507.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-86507.drop_tracking.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -1,5 +1,5 @@\n error: future cannot be sent between threads safely\n-  --> $DIR/issue-86507.rs:17:13\n+  --> $DIR/issue-86507.rs:20:13\n    |\n LL | /             Box::pin(\n LL | |                 async move {\n@@ -9,11 +9,11 @@ LL | |             )\n    | |_____________^ future created by async block is not `Send`\n    |\n note: captured value is not `Send` because `&` references cannot be sent unless their referent is `Sync`\n-  --> $DIR/issue-86507.rs:19:29\n+  --> $DIR/issue-86507.rs:22:29\n    |\n LL |                     let x = x;\n    |                             ^ has type `&T` which is not `Send`, because `T` is not `Sync`\n-   = note: required for the cast from `[async block@$DIR/issue-86507.rs:18:17: 20:18]` to the object type `dyn Future<Output = ()> + Send`\n+   = note: required for the cast from `[async block@$DIR/issue-86507.rs:21:17: 23:18]` to the object type `dyn Future<Output = ()> + Send`\n help: consider further restricting this bound\n    |\n LL |     fn bar<'me, 'async_trait, T: Send + std::marker::Sync>(x: &'me T)", "previous_filename": "tests/ui/async-await/issue-86507.stderr"}, {"sha": "5c8b7ef1b7135a10f55243d13ad3101f3224fd3a", "filename": "tests/ui/async-await/issue-86507.drop_tracking_mir.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fissue-86507.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fissue-86507.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-86507.drop_tracking_mir.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -0,0 +1,23 @@\n+error: future cannot be sent between threads safely\n+  --> $DIR/issue-86507.rs:20:13\n+   |\n+LL | /             Box::pin(\n+LL | |                 async move {\n+LL | |                     let x = x;\n+LL | |                 }\n+LL | |             )\n+   | |_____________^ future created by async block is not `Send`\n+   |\n+note: captured value is not `Send` because `&` references cannot be sent unless their referent is `Sync`\n+  --> $DIR/issue-86507.rs:22:29\n+   |\n+LL |                     let x = x;\n+   |                             ^ has type `&T` which is not `Send`, because `T` is not `Sync`\n+   = note: required for the cast from `[async block@$DIR/issue-86507.rs:21:17: 23:18]` to the object type `dyn Future<Output = ()> + Send`\n+help: consider further restricting this bound\n+   |\n+LL |     fn bar<'me, 'async_trait, T: Send + std::marker::Sync>(x: &'me T)\n+   |                                       +++++++++++++++++++\n+\n+error: aborting due to previous error\n+"}, {"sha": "5c8b7ef1b7135a10f55243d13ad3101f3224fd3a", "filename": "tests/ui/async-await/issue-86507.no_drop_tracking.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fissue-86507.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fissue-86507.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-86507.no_drop_tracking.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -0,0 +1,23 @@\n+error: future cannot be sent between threads safely\n+  --> $DIR/issue-86507.rs:20:13\n+   |\n+LL | /             Box::pin(\n+LL | |                 async move {\n+LL | |                     let x = x;\n+LL | |                 }\n+LL | |             )\n+   | |_____________^ future created by async block is not `Send`\n+   |\n+note: captured value is not `Send` because `&` references cannot be sent unless their referent is `Sync`\n+  --> $DIR/issue-86507.rs:22:29\n+   |\n+LL |                     let x = x;\n+   |                             ^ has type `&T` which is not `Send`, because `T` is not `Sync`\n+   = note: required for the cast from `[async block@$DIR/issue-86507.rs:21:17: 23:18]` to the object type `dyn Future<Output = ()> + Send`\n+help: consider further restricting this bound\n+   |\n+LL |     fn bar<'me, 'async_trait, T: Send + std::marker::Sync>(x: &'me T)\n+   |                                       +++++++++++++++++++\n+\n+error: aborting due to previous error\n+"}, {"sha": "63c298dbe3dcb0ba9cae45d9f425b7b17c768883", "filename": "tests/ui/async-await/issue-86507.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fissue-86507.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fissue-86507.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-86507.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -1,3 +1,6 @@\n+// revisions: no_drop_tracking drop_tracking drop_tracking_mir\n+// [drop_tracking] compile-flags: -Zdrop-tracking\n+// [drop_tracking_mir] compile-flags: -Zdrop-tracking-mir\n // edition:2018\n \n use ::core::pin::Pin;"}, {"sha": "ec2249ca592b586e4f18d269b7ea1158a0910184", "filename": "tests/ui/async-await/issue-93648.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fissue-93648.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fissue-93648.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-93648.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -1,6 +1,8 @@\n+// revisions: no_drop_tracking drop_tracking drop_tracking_mir\n+// [drop_tracking] compile-flags: -Zdrop-tracking\n+// [drop_tracking_mir] compile-flags: -Zdrop-tracking-mir\n // edition:2021\n // build-pass\n-// compile-flags: -Zdrop-tracking\n \n fn main() {\n     let _ = async {"}, {"sha": "d5394469806da78e7340c3b0e3b6be68e034e652", "filename": "tests/ui/async-await/issues/auxiliary/issue_67893.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fissues%2Fauxiliary%2Fissue_67893.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fissues%2Fauxiliary%2Fissue_67893.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissues%2Fauxiliary%2Fissue_67893.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -1,3 +1,6 @@\n+// revisions: no_drop_tracking drop_tracking drop_tracking_mir\n+// [drop_tracking] compile-flags: -Zdrop-tracking\n+// [drop_tracking_mir] compile-flags: -Zdrop-tracking-mir\n // edition:2018\n \n use std::sync::{Arc, Mutex};"}, {"sha": "8745bdd973beabf5637819b3d9fdc462bb7b2a61", "filename": "tests/ui/async-await/issues/issue-65436-raw-ptr-not-send.no_drop_tracking.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fissues%2Fissue-65436-raw-ptr-not-send.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fissues%2Fissue-65436-raw-ptr-not-send.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissues%2Fissue-65436-raw-ptr-not-send.no_drop_tracking.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -1,5 +1,5 @@\n error: future cannot be sent between threads safely\n-  --> $DIR/issue-65436-raw-ptr-not-send.rs:16:17\n+  --> $DIR/issue-65436-raw-ptr-not-send.rs:17:17\n    |\n LL |       assert_send(async {\n    |  _________________^\n@@ -8,22 +8,22 @@ LL | |         bar(Foo(std::ptr::null())).await;\n LL | |     })\n    | |_____^ future created by async block is not `Send`\n    |\n-   = help: within `[async block@$DIR/issue-65436-raw-ptr-not-send.rs:16:17: 19:6]`, the trait `Send` is not implemented for `*const u8`\n+   = help: within `[async block@$DIR/issue-65436-raw-ptr-not-send.rs:17:17: 20:6]`, the trait `Send` is not implemented for `*const u8`\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/issue-65436-raw-ptr-not-send.rs:18:35\n+  --> $DIR/issue-65436-raw-ptr-not-send.rs:19:35\n    |\n LL |         bar(Foo(std::ptr::null())).await;\n    |                 ----------------  ^^^^^^- `std::ptr::null()` is later dropped here\n    |                 |                 |\n    |                 |                 await occurs here, with `std::ptr::null()` maybe used later\n    |                 has type `*const u8` which is not `Send`\n help: consider moving this into a `let` binding to create a shorter lived borrow\n-  --> $DIR/issue-65436-raw-ptr-not-send.rs:18:13\n+  --> $DIR/issue-65436-raw-ptr-not-send.rs:19:13\n    |\n LL |         bar(Foo(std::ptr::null())).await;\n    |             ^^^^^^^^^^^^^^^^^^^^^\n note: required by a bound in `assert_send`\n-  --> $DIR/issue-65436-raw-ptr-not-send.rs:13:19\n+  --> $DIR/issue-65436-raw-ptr-not-send.rs:14:19\n    |\n LL | fn assert_send<T: Send>(_: T) {}\n    |                   ^^^^ required by this bound in `assert_send`"}, {"sha": "d7ef929517c74eaabfbb60f0d6ee39d4372b46e8", "filename": "tests/ui/async-await/issues/issue-65436-raw-ptr-not-send.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fissues%2Fissue-65436-raw-ptr-not-send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fissues%2Fissue-65436-raw-ptr-not-send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissues%2Fissue-65436-raw-ptr-not-send.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -1,8 +1,9 @@\n // edition:2018\n-// revisions: no_drop_tracking drop_tracking\n+// revisions: no_drop_tracking drop_tracking drop_tracking_mir\n+// [drop_tracking] compile-flags: -Zdrop-tracking\n+// [drop_tracking_mir] compile-flags: -Zdrop-tracking-mir\n // [drop_tracking] check-pass\n-// [drop_tracking] compile-flags: -Zdrop-tracking=yes\n-// [no_drop_tracking] compile-flags: -Zdrop-tracking=no\n+// [drop_tracking_mir] check-pass\n \n struct Foo(*const u8);\n "}, {"sha": "c4f8f607d257945a7dbae674c3374d73ba156073", "filename": "tests/ui/async-await/issues/issue-67611-static-mut-refs.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fissues%2Fissue-67611-static-mut-refs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fissues%2Fissue-67611-static-mut-refs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissues%2Fissue-67611-static-mut-refs.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -1,6 +1,10 @@\n // build-pass\n // edition:2018\n \n+// revisions: no_drop_tracking drop_tracking drop_tracking_mir\n+// [drop_tracking] compile-flags: -Zdrop-tracking\n+// [drop_tracking_mir] compile-flags: -Zdrop-tracking-mir\n+\n static mut A: [i32; 5] = [1, 2, 3, 4, 5];\n \n fn is_send_sync<T: Send + Sync>(_: T) {}"}, {"sha": "ce9424c8b252bbe78f7805755c5977c47e4df143", "filename": "tests/ui/async-await/issues/issue-67893.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fissues%2Fissue-67893.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fissues%2Fissue-67893.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissues%2Fissue-67893.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -6,7 +6,7 @@ LL |     g(issue_67893::run())\n    |\n    = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `MutexGuard<'_, ()>`\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/auxiliary/issue_67893.rs:9:26\n+  --> $DIR/auxiliary/issue_67893.rs:12:26\n    |\n LL |     f(*x.lock().unwrap()).await;\n    |        ----------------- ^^^^^^- `x.lock().unwrap()` is later dropped here"}, {"sha": "8a7317bb95a704682a3ccd465dada3dfc9ca8aa0", "filename": "tests/ui/async-await/mutually-recursive-async-impl-trait-type.drop_tracking.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fmutually-recursive-async-impl-trait-type.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fmutually-recursive-async-impl-trait-type.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fmutually-recursive-async-impl-trait-type.drop_tracking.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -0,0 +1,21 @@\n+error[E0733]: recursion in an `async fn` requires boxing\n+  --> $DIR/mutually-recursive-async-impl-trait-type.rs:9:18\n+   |\n+LL | async fn rec_1() {\n+   |                  ^ recursive `async fn`\n+   |\n+   = note: a recursive `async fn` must be rewritten to return a boxed `dyn Future`\n+   = note: consider using the `async_recursion` crate: https://crates.io/crates/async_recursion\n+\n+error[E0733]: recursion in an `async fn` requires boxing\n+  --> $DIR/mutually-recursive-async-impl-trait-type.rs:13:18\n+   |\n+LL | async fn rec_2() {\n+   |                  ^ recursive `async fn`\n+   |\n+   = note: a recursive `async fn` must be rewritten to return a boxed `dyn Future`\n+   = note: consider using the `async_recursion` crate: https://crates.io/crates/async_recursion\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0733`."}, {"sha": "8a7317bb95a704682a3ccd465dada3dfc9ca8aa0", "filename": "tests/ui/async-await/mutually-recursive-async-impl-trait-type.drop_tracking_mir.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fmutually-recursive-async-impl-trait-type.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fmutually-recursive-async-impl-trait-type.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fmutually-recursive-async-impl-trait-type.drop_tracking_mir.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -0,0 +1,21 @@\n+error[E0733]: recursion in an `async fn` requires boxing\n+  --> $DIR/mutually-recursive-async-impl-trait-type.rs:9:18\n+   |\n+LL | async fn rec_1() {\n+   |                  ^ recursive `async fn`\n+   |\n+   = note: a recursive `async fn` must be rewritten to return a boxed `dyn Future`\n+   = note: consider using the `async_recursion` crate: https://crates.io/crates/async_recursion\n+\n+error[E0733]: recursion in an `async fn` requires boxing\n+  --> $DIR/mutually-recursive-async-impl-trait-type.rs:13:18\n+   |\n+LL | async fn rec_2() {\n+   |                  ^ recursive `async fn`\n+   |\n+   = note: a recursive `async fn` must be rewritten to return a boxed `dyn Future`\n+   = note: consider using the `async_recursion` crate: https://crates.io/crates/async_recursion\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0733`."}, {"sha": "8a7317bb95a704682a3ccd465dada3dfc9ca8aa0", "filename": "tests/ui/async-await/mutually-recursive-async-impl-trait-type.no_drop_tracking.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fmutually-recursive-async-impl-trait-type.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fmutually-recursive-async-impl-trait-type.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fmutually-recursive-async-impl-trait-type.no_drop_tracking.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -0,0 +1,21 @@\n+error[E0733]: recursion in an `async fn` requires boxing\n+  --> $DIR/mutually-recursive-async-impl-trait-type.rs:9:18\n+   |\n+LL | async fn rec_1() {\n+   |                  ^ recursive `async fn`\n+   |\n+   = note: a recursive `async fn` must be rewritten to return a boxed `dyn Future`\n+   = note: consider using the `async_recursion` crate: https://crates.io/crates/async_recursion\n+\n+error[E0733]: recursion in an `async fn` requires boxing\n+  --> $DIR/mutually-recursive-async-impl-trait-type.rs:13:18\n+   |\n+LL | async fn rec_2() {\n+   |                  ^ recursive `async fn`\n+   |\n+   = note: a recursive `async fn` must be rewritten to return a boxed `dyn Future`\n+   = note: consider using the `async_recursion` crate: https://crates.io/crates/async_recursion\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0733`."}, {"sha": "a241f30e73e6eb3f7e8f9c57c669be1091adcf55", "filename": "tests/ui/async-await/mutually-recursive-async-impl-trait-type.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fmutually-recursive-async-impl-trait-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fmutually-recursive-async-impl-trait-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fmutually-recursive-async-impl-trait-type.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -1,3 +1,7 @@\n+// revisions: no_drop_tracking drop_tracking drop_tracking_mir\n+// [drop_tracking] compile-flags: -Zdrop-tracking\n+// [drop_tracking_mir] compile-flags: -Zdrop-tracking-mir\n+\n // edition:2018\n // Test that impl trait does not allow creating recursive types that are\n // otherwise forbidden when using `async` and `await`."}, {"sha": "8a7317bb95a704682a3ccd465dada3dfc9ca8aa0", "filename": "tests/ui/async-await/mutually-recursive-async-impl-trait-type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fmutually-recursive-async-impl-trait-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fmutually-recursive-async-impl-trait-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fmutually-recursive-async-impl-trait-type.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -1,5 +1,5 @@\n error[E0733]: recursion in an `async fn` requires boxing\n-  --> $DIR/mutually-recursive-async-impl-trait-type.rs:5:18\n+  --> $DIR/mutually-recursive-async-impl-trait-type.rs:9:18\n    |\n LL | async fn rec_1() {\n    |                  ^ recursive `async fn`\n@@ -8,7 +8,7 @@ LL | async fn rec_1() {\n    = note: consider using the `async_recursion` crate: https://crates.io/crates/async_recursion\n \n error[E0733]: recursion in an `async fn` requires boxing\n-  --> $DIR/mutually-recursive-async-impl-trait-type.rs:9:18\n+  --> $DIR/mutually-recursive-async-impl-trait-type.rs:13:18\n    |\n LL | async fn rec_2() {\n    |                  ^ recursive `async fn`"}, {"sha": "d4df9d439c5f15ac1638c2b5d7a9cb3d096be627", "filename": "tests/ui/async-await/non-trivial-drop.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fnon-trivial-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fnon-trivial-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fnon-trivial-drop.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -1,6 +1,8 @@\n+// revisions: no_drop_tracking drop_tracking drop_tracking_mir\n+// [drop_tracking] compile-flags: -Zdrop-tracking\n+// [drop_tracking_mir] compile-flags: -Zdrop-tracking-mir\n // build-pass\n // edition:2018\n-// compile-flags: -Zdrop-tracking=y\n \n #![feature(generators)]\n "}, {"sha": "7e63a8da552554bb8ded374641478a0bc3b54b2d", "filename": "tests/ui/async-await/recursive-async-impl-trait-type.drop_tracking.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Frecursive-async-impl-trait-type.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Frecursive-async-impl-trait-type.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Frecursive-async-impl-trait-type.drop_tracking.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -0,0 +1,12 @@\n+error[E0733]: recursion in an `async fn` requires boxing\n+  --> $DIR/recursive-async-impl-trait-type.rs:8:40\n+   |\n+LL | async fn recursive_async_function() -> () {\n+   |                                        ^^ recursive `async fn`\n+   |\n+   = note: a recursive `async fn` must be rewritten to return a boxed `dyn Future`\n+   = note: consider using the `async_recursion` crate: https://crates.io/crates/async_recursion\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0733`."}, {"sha": "7e63a8da552554bb8ded374641478a0bc3b54b2d", "filename": "tests/ui/async-await/recursive-async-impl-trait-type.drop_tracking_mir.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Frecursive-async-impl-trait-type.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Frecursive-async-impl-trait-type.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Frecursive-async-impl-trait-type.drop_tracking_mir.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -0,0 +1,12 @@\n+error[E0733]: recursion in an `async fn` requires boxing\n+  --> $DIR/recursive-async-impl-trait-type.rs:8:40\n+   |\n+LL | async fn recursive_async_function() -> () {\n+   |                                        ^^ recursive `async fn`\n+   |\n+   = note: a recursive `async fn` must be rewritten to return a boxed `dyn Future`\n+   = note: consider using the `async_recursion` crate: https://crates.io/crates/async_recursion\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0733`."}, {"sha": "7e63a8da552554bb8ded374641478a0bc3b54b2d", "filename": "tests/ui/async-await/recursive-async-impl-trait-type.no_drop_tracking.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Frecursive-async-impl-trait-type.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Frecursive-async-impl-trait-type.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Frecursive-async-impl-trait-type.no_drop_tracking.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -0,0 +1,12 @@\n+error[E0733]: recursion in an `async fn` requires boxing\n+  --> $DIR/recursive-async-impl-trait-type.rs:8:40\n+   |\n+LL | async fn recursive_async_function() -> () {\n+   |                                        ^^ recursive `async fn`\n+   |\n+   = note: a recursive `async fn` must be rewritten to return a boxed `dyn Future`\n+   = note: consider using the `async_recursion` crate: https://crates.io/crates/async_recursion\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0733`."}, {"sha": "60b34d3a1741586e52a328cdc40a08d4ec1bdfe7", "filename": "tests/ui/async-await/recursive-async-impl-trait-type.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Frecursive-async-impl-trait-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Frecursive-async-impl-trait-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Frecursive-async-impl-trait-type.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -1,3 +1,6 @@\n+// revisions: no_drop_tracking drop_tracking drop_tracking_mir\n+// [drop_tracking] compile-flags: -Zdrop-tracking\n+// [drop_tracking_mir] compile-flags: -Zdrop-tracking-mir\n // edition:2018\n // Test that impl trait does not allow creating recursive types that are\n // otherwise forbidden when using `async` and `await`."}, {"sha": "7e63a8da552554bb8ded374641478a0bc3b54b2d", "filename": "tests/ui/async-await/recursive-async-impl-trait-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Frecursive-async-impl-trait-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Frecursive-async-impl-trait-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Frecursive-async-impl-trait-type.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -1,5 +1,5 @@\n error[E0733]: recursion in an `async fn` requires boxing\n-  --> $DIR/recursive-async-impl-trait-type.rs:5:40\n+  --> $DIR/recursive-async-impl-trait-type.rs:8:40\n    |\n LL | async fn recursive_async_function() -> () {\n    |                                        ^^ recursive `async fn`"}, {"sha": "4e9e7309be0911d9a579aabd0b54672ab6150b0c", "filename": "tests/ui/async-await/send-bound-async-closure.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fsend-bound-async-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Fsend-bound-async-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fsend-bound-async-closure.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -0,0 +1,37 @@\n+// edition: 2021\n+// check-pass\n+\n+// This test verifies that we do not create a query cycle when typechecking has several inference\n+// variables that point to the same generator interior type.\n+\n+use std::future::Future;\n+use std::pin::Pin;\n+use std::task::{Context, Poll};\n+\n+type ChannelTask = Pin<Box<dyn Future<Output = ()> + Send>>;\n+\n+pub fn register_message_type() -> ChannelTask {\n+    Box::pin(async move {\n+        let f = |__cx: &mut Context<'_>| Poll::<()>::Pending;\n+        PollFn { f }.await\n+    })\n+}\n+\n+struct PollFn<F> {\n+    f: F,\n+}\n+\n+impl<F> Unpin for PollFn<F> {}\n+\n+impl<T, F> Future for PollFn<F>\n+where\n+    F: FnMut(&mut Context<'_>) -> Poll<T>,\n+{\n+    type Output = T;\n+\n+    fn poll(mut self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<T> {\n+        (&mut self.f)(cx)\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "912e2b34c0541ee117620b52a989ce0f3ccd0eca", "filename": "tests/ui/async-await/unresolved_type_param.drop_tracking.stderr", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Funresolved_type_param.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Funresolved_type_param.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Funresolved_type_param.drop_tracking.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -0,0 +1,39 @@\n+error[E0698]: type inside `async fn` body must be known in this context\n+  --> $DIR/unresolved_type_param.rs:12:5\n+   |\n+LL |     bar().await;\n+   |     ^^^ cannot infer type for type parameter `T` declared on the function `bar`\n+   |\n+note: the type is part of the `async fn` body because of this `await`\n+  --> $DIR/unresolved_type_param.rs:12:10\n+   |\n+LL |     bar().await;\n+   |          ^^^^^^\n+\n+error[E0698]: type inside `async fn` body must be known in this context\n+  --> $DIR/unresolved_type_param.rs:12:5\n+   |\n+LL |     bar().await;\n+   |     ^^^ cannot infer type for type parameter `T` declared on the function `bar`\n+   |\n+note: the type is part of the `async fn` body because of this `await`\n+  --> $DIR/unresolved_type_param.rs:12:10\n+   |\n+LL |     bar().await;\n+   |          ^^^^^^\n+\n+error[E0698]: type inside `async fn` body must be known in this context\n+  --> $DIR/unresolved_type_param.rs:12:5\n+   |\n+LL |     bar().await;\n+   |     ^^^ cannot infer type for type parameter `T` declared on the function `bar`\n+   |\n+note: the type is part of the `async fn` body because of this `await`\n+  --> $DIR/unresolved_type_param.rs:12:10\n+   |\n+LL |     bar().await;\n+   |          ^^^^^^\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0698`."}, {"sha": "95c799468314f6bbee8922273e38b73846c8e545", "filename": "tests/ui/async-await/unresolved_type_param.drop_tracking_mir.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Funresolved_type_param.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Funresolved_type_param.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Funresolved_type_param.drop_tracking_mir.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -0,0 +1,14 @@\n+error[E0282]: type annotations needed\n+  --> $DIR/unresolved_type_param.rs:12:5\n+   |\n+LL |     bar().await;\n+   |     ^^^ cannot infer type of the type parameter `T` declared on the function `bar`\n+   |\n+help: consider specifying the generic argument\n+   |\n+LL |     bar::<T>().await;\n+   |        +++++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0282`."}, {"sha": "16d618caa5713304297c989ab4303fd8621348d0", "filename": "tests/ui/async-await/unresolved_type_param.no_drop_tracking.stderr", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Funresolved_type_param.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Funresolved_type_param.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Funresolved_type_param.no_drop_tracking.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -0,0 +1,63 @@\n+error[E0698]: type inside `async fn` body must be known in this context\n+  --> $DIR/unresolved_type_param.rs:12:5\n+   |\n+LL |     bar().await;\n+   |     ^^^ cannot infer type for type parameter `T` declared on the function `bar`\n+   |\n+note: the type is part of the `async fn` body because of this `await`\n+  --> $DIR/unresolved_type_param.rs:12:10\n+   |\n+LL |     bar().await;\n+   |          ^^^^^^\n+\n+error[E0698]: type inside `async fn` body must be known in this context\n+  --> $DIR/unresolved_type_param.rs:12:5\n+   |\n+LL |     bar().await;\n+   |     ^^^ cannot infer type for type parameter `T` declared on the function `bar`\n+   |\n+note: the type is part of the `async fn` body because of this `await`\n+  --> $DIR/unresolved_type_param.rs:12:10\n+   |\n+LL |     bar().await;\n+   |          ^^^^^^\n+\n+error[E0698]: type inside `async fn` body must be known in this context\n+  --> $DIR/unresolved_type_param.rs:12:5\n+   |\n+LL |     bar().await;\n+   |     ^^^ cannot infer type for type parameter `T` declared on the function `bar`\n+   |\n+note: the type is part of the `async fn` body because of this `await`\n+  --> $DIR/unresolved_type_param.rs:12:10\n+   |\n+LL |     bar().await;\n+   |          ^^^^^^\n+\n+error[E0698]: type inside `async fn` body must be known in this context\n+  --> $DIR/unresolved_type_param.rs:12:5\n+   |\n+LL |     bar().await;\n+   |     ^^^ cannot infer type for type parameter `T` declared on the function `bar`\n+   |\n+note: the type is part of the `async fn` body because of this `await`\n+  --> $DIR/unresolved_type_param.rs:12:10\n+   |\n+LL |     bar().await;\n+   |          ^^^^^^\n+\n+error[E0698]: type inside `async fn` body must be known in this context\n+  --> $DIR/unresolved_type_param.rs:12:5\n+   |\n+LL |     bar().await;\n+   |     ^^^ cannot infer type for type parameter `T` declared on the function `bar`\n+   |\n+note: the type is part of the `async fn` body because of this `await`\n+  --> $DIR/unresolved_type_param.rs:12:10\n+   |\n+LL |     bar().await;\n+   |          ^^^^^^\n+\n+error: aborting due to 5 previous errors\n+\n+For more information about this error, try `rustc --explain E0698`."}, {"sha": "ca0a92b9434732294d297310954a4c38f3bff067", "filename": "tests/ui/async-await/unresolved_type_param.rs", "status": "modified", "additions": 25, "deletions": 13, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Funresolved_type_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Funresolved_type_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Funresolved_type_param.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -1,24 +1,36 @@\n+// revisions: no_drop_tracking drop_tracking drop_tracking_mir\n+// [drop_tracking] compile-flags: -Zdrop-tracking\n+// [drop_tracking_mir] compile-flags: -Zdrop-tracking-mir\n // Provoke an unresolved type error (T).\n // Error message should pinpoint the type parameter T as needing to be bound\n // (rather than give a general error message)\n // edition:2018\n-// compile-flags: -Zdrop-tracking\n \n async fn bar<T>() -> () {}\n \n async fn foo() {\n     bar().await;\n-    //~^ ERROR type inside `async fn` body must be known in this context\n-    //~| ERROR type inside `async fn` body must be known in this context\n-    //~| ERROR type inside `async fn` body must be known in this context\n-    //~| NOTE cannot infer type for type parameter `T`\n-    //~| NOTE cannot infer type for type parameter `T`\n-    //~| NOTE cannot infer type for type parameter `T`\n-    //~| NOTE the type is part of the `async fn` body because of this `await`\n-    //~| NOTE the type is part of the `async fn` body because of this `await`\n-    //~| NOTE the type is part of the `async fn` body because of this `await`\n-    //~| NOTE in this expansion of desugaring of `await`\n-    //~| NOTE in this expansion of desugaring of `await`\n-    //~| NOTE in this expansion of desugaring of `await`\n+    //[drop_tracking_mir]~^ ERROR type annotations needed\n+    //[drop_tracking_mir]~| NOTE cannot infer type of the type parameter `T`\n+    //[no_drop_tracking,drop_tracking]~^^^ ERROR type inside `async fn` body must be known in this context\n+    //[no_drop_tracking,drop_tracking]~| ERROR type inside `async fn` body must be known in this context\n+    //[no_drop_tracking,drop_tracking]~| ERROR type inside `async fn` body must be known in this context\n+    //[no_drop_tracking,drop_tracking]~| NOTE cannot infer type for type parameter `T`\n+    //[no_drop_tracking,drop_tracking]~| NOTE cannot infer type for type parameter `T`\n+    //[no_drop_tracking,drop_tracking]~| NOTE cannot infer type for type parameter `T`\n+    //[no_drop_tracking,drop_tracking]~| NOTE the type is part of the `async fn` body because of this `await`\n+    //[no_drop_tracking,drop_tracking]~| NOTE the type is part of the `async fn` body because of this `await`\n+    //[no_drop_tracking,drop_tracking]~| NOTE the type is part of the `async fn` body because of this `await`\n+    //[no_drop_tracking,drop_tracking]~| NOTE in this expansion of desugaring of `await`\n+    //[no_drop_tracking,drop_tracking]~| NOTE in this expansion of desugaring of `await`\n+    //[no_drop_tracking,drop_tracking]~| NOTE in this expansion of desugaring of `await`\n+    //[no_drop_tracking]~^^^^^^^^^^^^^^^ ERROR type inside `async fn` body must be known in this context\n+    //[no_drop_tracking]~| ERROR type inside `async fn` body must be known in this context\n+    //[no_drop_tracking]~| NOTE cannot infer type for type parameter `T`\n+    //[no_drop_tracking]~| NOTE cannot infer type for type parameter `T`\n+    //[no_drop_tracking]~| NOTE the type is part of the `async fn` body because of this `await`\n+    //[no_drop_tracking]~| NOTE the type is part of the `async fn` body because of this `await`\n+    //[no_drop_tracking]~| NOTE in this expansion of desugaring of `await`\n+    //[no_drop_tracking]~| NOTE in this expansion of desugaring of `await`\n }\n fn main() {}"}, {"sha": "64a31b5fc32dc3bf6c23f9f648d35a5c46d6d304", "filename": "tests/ui/async-await/unresolved_type_param.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Funresolved_type_param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fasync-await%2Funresolved_type_param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Funresolved_type_param.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -1,35 +1,35 @@\n error[E0698]: type inside `async fn` body must be known in this context\n-  --> $DIR/unresolved_type_param.rs:10:5\n+  --> $DIR/unresolved_type_param.rs:13:5\n    |\n LL |     bar().await;\n    |     ^^^ cannot infer type for type parameter `T` declared on the function `bar`\n    |\n note: the type is part of the `async fn` body because of this `await`\n-  --> $DIR/unresolved_type_param.rs:10:10\n+  --> $DIR/unresolved_type_param.rs:13:10\n    |\n LL |     bar().await;\n    |          ^^^^^^\n \n error[E0698]: type inside `async fn` body must be known in this context\n-  --> $DIR/unresolved_type_param.rs:10:5\n+  --> $DIR/unresolved_type_param.rs:13:5\n    |\n LL |     bar().await;\n    |     ^^^ cannot infer type for type parameter `T` declared on the function `bar`\n    |\n note: the type is part of the `async fn` body because of this `await`\n-  --> $DIR/unresolved_type_param.rs:10:10\n+  --> $DIR/unresolved_type_param.rs:13:10\n    |\n LL |     bar().await;\n    |          ^^^^^^\n \n error[E0698]: type inside `async fn` body must be known in this context\n-  --> $DIR/unresolved_type_param.rs:10:5\n+  --> $DIR/unresolved_type_param.rs:13:5\n    |\n LL |     bar().await;\n    |     ^^^ cannot infer type for type parameter `T` declared on the function `bar`\n    |\n note: the type is part of the `async fn` body because of this `await`\n-  --> $DIR/unresolved_type_param.rs:10:10\n+  --> $DIR/unresolved_type_param.rs:13:10\n    |\n LL |     bar().await;\n    |          ^^^^^^"}, {"sha": "7211367afeee6fe3e4f8ab32a515f0dde3798662", "filename": "tests/ui/generator/addassign-yield.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fgenerator%2Faddassign-yield.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fgenerator%2Faddassign-yield.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Faddassign-yield.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -1,3 +1,6 @@\n+// revisions: no_drop_tracking drop_tracking drop_tracking_mir\n+// [drop_tracking] compile-flags: -Zdrop-tracking\n+// [drop_tracking_mir] compile-flags: -Zdrop-tracking-mir\n // run-pass\n // Regression test for broken MIR error (#61442)\n // Due to the two possible evaluation orders for"}, {"sha": "165748d44305a733353549dbe6ba28d15de56a46", "filename": "tests/ui/generator/auto-trait-regions.drop_tracking.stderr", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fgenerator%2Fauto-trait-regions.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fgenerator%2Fauto-trait-regions.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fauto-trait-regions.drop_tracking.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -0,0 +1,47 @@\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/auto-trait-regions.rs:48:24\n+   |\n+LL |         let a = A(&mut true, &mut true, No);\n+   |                        ^^^^                - temporary value is freed at the end of this statement\n+   |                        |\n+   |                        creates a temporary value which is freed while still in use\n+...\n+LL |         assert_foo(a);\n+   |                    - borrow later used here\n+   |\n+   = note: consider using a `let` binding to create a longer lived value\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/auto-trait-regions.rs:48:35\n+   |\n+LL |         let a = A(&mut true, &mut true, No);\n+   |                                   ^^^^     - temporary value is freed at the end of this statement\n+   |                                   |\n+   |                                   creates a temporary value which is freed while still in use\n+...\n+LL |         assert_foo(a);\n+   |                    - borrow later used here\n+   |\n+   = note: consider using a `let` binding to create a longer lived value\n+\n+error: implementation of `Foo` is not general enough\n+  --> $DIR/auto-trait-regions.rs:34:5\n+   |\n+LL |     assert_foo(gen);\n+   |     ^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough\n+   |\n+   = note: `&'0 OnlyFooIfStaticRef` must implement `Foo`, for any lifetime `'0`...\n+   = note: ...but `Foo` is actually implemented for the type `&'static OnlyFooIfStaticRef`\n+\n+error: implementation of `Foo` is not general enough\n+  --> $DIR/auto-trait-regions.rs:54:5\n+   |\n+LL |     assert_foo(gen);\n+   |     ^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough\n+   |\n+   = note: `Foo` would have to be implemented for the type `A<'0, '1>`, for any two lifetimes `'0` and `'1`...\n+   = note: ...but `Foo` is actually implemented for the type `A<'_, '2>`, for some specific lifetime `'2`\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0716`."}, {"sha": "165748d44305a733353549dbe6ba28d15de56a46", "filename": "tests/ui/generator/auto-trait-regions.drop_tracking_mir.stderr", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fgenerator%2Fauto-trait-regions.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fgenerator%2Fauto-trait-regions.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fauto-trait-regions.drop_tracking_mir.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -0,0 +1,47 @@\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/auto-trait-regions.rs:48:24\n+   |\n+LL |         let a = A(&mut true, &mut true, No);\n+   |                        ^^^^                - temporary value is freed at the end of this statement\n+   |                        |\n+   |                        creates a temporary value which is freed while still in use\n+...\n+LL |         assert_foo(a);\n+   |                    - borrow later used here\n+   |\n+   = note: consider using a `let` binding to create a longer lived value\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/auto-trait-regions.rs:48:35\n+   |\n+LL |         let a = A(&mut true, &mut true, No);\n+   |                                   ^^^^     - temporary value is freed at the end of this statement\n+   |                                   |\n+   |                                   creates a temporary value which is freed while still in use\n+...\n+LL |         assert_foo(a);\n+   |                    - borrow later used here\n+   |\n+   = note: consider using a `let` binding to create a longer lived value\n+\n+error: implementation of `Foo` is not general enough\n+  --> $DIR/auto-trait-regions.rs:34:5\n+   |\n+LL |     assert_foo(gen);\n+   |     ^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough\n+   |\n+   = note: `&'0 OnlyFooIfStaticRef` must implement `Foo`, for any lifetime `'0`...\n+   = note: ...but `Foo` is actually implemented for the type `&'static OnlyFooIfStaticRef`\n+\n+error: implementation of `Foo` is not general enough\n+  --> $DIR/auto-trait-regions.rs:54:5\n+   |\n+LL |     assert_foo(gen);\n+   |     ^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough\n+   |\n+   = note: `Foo` would have to be implemented for the type `A<'0, '1>`, for any two lifetimes `'0` and `'1`...\n+   = note: ...but `Foo` is actually implemented for the type `A<'_, '2>`, for some specific lifetime `'2`\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0716`."}, {"sha": "165748d44305a733353549dbe6ba28d15de56a46", "filename": "tests/ui/generator/auto-trait-regions.no_drop_tracking.stderr", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fgenerator%2Fauto-trait-regions.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fgenerator%2Fauto-trait-regions.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fauto-trait-regions.no_drop_tracking.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -0,0 +1,47 @@\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/auto-trait-regions.rs:48:24\n+   |\n+LL |         let a = A(&mut true, &mut true, No);\n+   |                        ^^^^                - temporary value is freed at the end of this statement\n+   |                        |\n+   |                        creates a temporary value which is freed while still in use\n+...\n+LL |         assert_foo(a);\n+   |                    - borrow later used here\n+   |\n+   = note: consider using a `let` binding to create a longer lived value\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/auto-trait-regions.rs:48:35\n+   |\n+LL |         let a = A(&mut true, &mut true, No);\n+   |                                   ^^^^     - temporary value is freed at the end of this statement\n+   |                                   |\n+   |                                   creates a temporary value which is freed while still in use\n+...\n+LL |         assert_foo(a);\n+   |                    - borrow later used here\n+   |\n+   = note: consider using a `let` binding to create a longer lived value\n+\n+error: implementation of `Foo` is not general enough\n+  --> $DIR/auto-trait-regions.rs:34:5\n+   |\n+LL |     assert_foo(gen);\n+   |     ^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough\n+   |\n+   = note: `&'0 OnlyFooIfStaticRef` must implement `Foo`, for any lifetime `'0`...\n+   = note: ...but `Foo` is actually implemented for the type `&'static OnlyFooIfStaticRef`\n+\n+error: implementation of `Foo` is not general enough\n+  --> $DIR/auto-trait-regions.rs:54:5\n+   |\n+LL |     assert_foo(gen);\n+   |     ^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough\n+   |\n+   = note: `Foo` would have to be implemented for the type `A<'0, '1>`, for any two lifetimes `'0` and `'1`...\n+   = note: ...but `Foo` is actually implemented for the type `A<'_, '2>`, for some specific lifetime `'2`\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0716`."}, {"sha": "fd13e41319f01be565189006571fc5ed7af0019f", "filename": "tests/ui/generator/auto-trait-regions.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fgenerator%2Fauto-trait-regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fgenerator%2Fauto-trait-regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fauto-trait-regions.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -1,3 +1,6 @@\n+// revisions: no_drop_tracking drop_tracking drop_tracking_mir\n+// [drop_tracking] compile-flags: -Zdrop-tracking\n+// [drop_tracking_mir] compile-flags: -Zdrop-tracking-mir\n #![feature(generators)]\n #![feature(auto_traits)]\n #![feature(negative_impls)]"}, {"sha": "165748d44305a733353549dbe6ba28d15de56a46", "filename": "tests/ui/generator/auto-trait-regions.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fgenerator%2Fauto-trait-regions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fgenerator%2Fauto-trait-regions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fauto-trait-regions.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -1,5 +1,5 @@\n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/auto-trait-regions.rs:45:24\n+  --> $DIR/auto-trait-regions.rs:48:24\n    |\n LL |         let a = A(&mut true, &mut true, No);\n    |                        ^^^^                - temporary value is freed at the end of this statement\n@@ -12,7 +12,7 @@ LL |         assert_foo(a);\n    = note: consider using a `let` binding to create a longer lived value\n \n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/auto-trait-regions.rs:45:35\n+  --> $DIR/auto-trait-regions.rs:48:35\n    |\n LL |         let a = A(&mut true, &mut true, No);\n    |                                   ^^^^     - temporary value is freed at the end of this statement\n@@ -25,7 +25,7 @@ LL |         assert_foo(a);\n    = note: consider using a `let` binding to create a longer lived value\n \n error: implementation of `Foo` is not general enough\n-  --> $DIR/auto-trait-regions.rs:31:5\n+  --> $DIR/auto-trait-regions.rs:34:5\n    |\n LL |     assert_foo(gen);\n    |     ^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough\n@@ -34,7 +34,7 @@ LL |     assert_foo(gen);\n    = note: ...but `Foo` is actually implemented for the type `&'static OnlyFooIfStaticRef`\n \n error: implementation of `Foo` is not general enough\n-  --> $DIR/auto-trait-regions.rs:51:5\n+  --> $DIR/auto-trait-regions.rs:54:5\n    |\n LL |     assert_foo(gen);\n    |     ^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough"}, {"sha": "96e3c327f8b31904864d4af6e44eee751821d79a", "filename": "tests/ui/generator/borrowing.drop_tracking.stderr", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fgenerator%2Fborrowing.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fgenerator%2Fborrowing.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fborrowing.drop_tracking.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -0,0 +1,31 @@\n+error[E0597]: `a` does not live long enough\n+  --> $DIR/borrowing.rs:13:33\n+   |\n+LL |     let _b = {\n+   |         -- borrow later stored here\n+LL |         let a = 3;\n+LL |         Pin::new(&mut || yield &a).resume(())\n+   |                       --        ^ borrowed value does not live long enough\n+   |                       |\n+   |                       value captured here by generator\n+LL |\n+LL |     };\n+   |     - `a` dropped here while still borrowed\n+\n+error[E0597]: `a` does not live long enough\n+  --> $DIR/borrowing.rs:20:20\n+   |\n+LL |     let _b = {\n+   |         -- borrow later stored here\n+LL |         let a = 3;\n+LL |         || {\n+   |         -- value captured here by generator\n+LL |             yield &a\n+   |                    ^ borrowed value does not live long enough\n+...\n+LL |     };\n+   |     - `a` dropped here while still borrowed\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "8fbad276db4416e08c6a5d5ddc9a6a01267590fd", "filename": "tests/ui/generator/borrowing.drop_tracking_mir.stderr", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fgenerator%2Fborrowing.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fgenerator%2Fborrowing.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fborrowing.drop_tracking_mir.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -0,0 +1,39 @@\n+error[E0597]: `a` does not live long enough\n+  --> $DIR/borrowing.rs:13:33\n+   |\n+LL |         Pin::new(&mut || yield &a).resume(())\n+   |                       ----------^\n+   |                       |         |\n+   |                       |         borrowed value does not live long enough\n+   |                       value captured here by generator\n+   |                       a temporary with access to the borrow is created here ...\n+LL |\n+LL |     };\n+   |     -- ... and the borrow might be used here, when that temporary is dropped and runs the destructor for generator\n+   |     |\n+   |     `a` dropped here while still borrowed\n+   |\n+   = note: the temporary is part of an expression at the end of a block;\n+           consider forcing this temporary to be dropped sooner, before the block's local variables are dropped\n+help: for example, you could save the expression's value in a new local variable `x` and then make `x` be the expression at the end of the block\n+   |\n+LL |         let x = Pin::new(&mut || yield &a).resume(()); x\n+   |         +++++++                                      +++\n+\n+error[E0597]: `a` does not live long enough\n+  --> $DIR/borrowing.rs:20:20\n+   |\n+LL |     let _b = {\n+   |         -- borrow later stored here\n+LL |         let a = 3;\n+LL |         || {\n+   |         -- value captured here by generator\n+LL |             yield &a\n+   |                    ^ borrowed value does not live long enough\n+...\n+LL |     };\n+   |     - `a` dropped here while still borrowed\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "96e3c327f8b31904864d4af6e44eee751821d79a", "filename": "tests/ui/generator/borrowing.no_drop_tracking.stderr", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fgenerator%2Fborrowing.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fgenerator%2Fborrowing.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fborrowing.no_drop_tracking.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -0,0 +1,31 @@\n+error[E0597]: `a` does not live long enough\n+  --> $DIR/borrowing.rs:13:33\n+   |\n+LL |     let _b = {\n+   |         -- borrow later stored here\n+LL |         let a = 3;\n+LL |         Pin::new(&mut || yield &a).resume(())\n+   |                       --        ^ borrowed value does not live long enough\n+   |                       |\n+   |                       value captured here by generator\n+LL |\n+LL |     };\n+   |     - `a` dropped here while still borrowed\n+\n+error[E0597]: `a` does not live long enough\n+  --> $DIR/borrowing.rs:20:20\n+   |\n+LL |     let _b = {\n+   |         -- borrow later stored here\n+LL |         let a = 3;\n+LL |         || {\n+   |         -- value captured here by generator\n+LL |             yield &a\n+   |                    ^ borrowed value does not live long enough\n+...\n+LL |     };\n+   |     - `a` dropped here while still borrowed\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "29f39437f8f554ce078e523377833f3924214dfb", "filename": "tests/ui/generator/borrowing.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fgenerator%2Fborrowing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fgenerator%2Fborrowing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fborrowing.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -1,3 +1,7 @@\n+// revisions: no_drop_tracking drop_tracking drop_tracking_mir\n+// [drop_tracking] compile-flags: -Zdrop-tracking\n+// [drop_tracking_mir] compile-flags: -Zdrop-tracking-mir\n+\n #![feature(generators, generator_trait)]\n \n use std::ops::Generator;"}, {"sha": "96e3c327f8b31904864d4af6e44eee751821d79a", "filename": "tests/ui/generator/borrowing.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fgenerator%2Fborrowing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fgenerator%2Fborrowing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fborrowing.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -1,5 +1,5 @@\n error[E0597]: `a` does not live long enough\n-  --> $DIR/borrowing.rs:9:33\n+  --> $DIR/borrowing.rs:13:33\n    |\n LL |     let _b = {\n    |         -- borrow later stored here\n@@ -13,7 +13,7 @@ LL |     };\n    |     - `a` dropped here while still borrowed\n \n error[E0597]: `a` does not live long enough\n-  --> $DIR/borrowing.rs:16:20\n+  --> $DIR/borrowing.rs:20:20\n    |\n LL |     let _b = {\n    |         -- borrow later stored here"}, {"sha": "c07906ec37d309885ac0a61437d54f478bb2a9dd", "filename": "tests/ui/generator/drop-tracking-parent-expression.drop_tracking.stderr", "status": "renamed", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fgenerator%2Fdrop-tracking-parent-expression.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fgenerator%2Fdrop-tracking-parent-expression.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fdrop-tracking-parent-expression.drop_tracking.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -1,5 +1,5 @@\n error: generator cannot be sent between threads safely\n-  --> $DIR/drop-tracking-parent-expression.rs:24:25\n+  --> $DIR/drop-tracking-parent-expression.rs:27:25\n    |\n LL |               assert_send(g);\n    |                           ^ generator is not `Send`\n@@ -13,9 +13,9 @@ LL | |         };\n LL | |     );\n    | |_____- in this macro invocation\n    |\n-   = help: within `[generator@$DIR/drop-tracking-parent-expression.rs:18:21: 18:28]`, the trait `Send` is not implemented for `derived_drop::Client`\n+   = help: within `[generator@$DIR/drop-tracking-parent-expression.rs:21:21: 21:28]`, the trait `Send` is not implemented for `derived_drop::Client`\n note: generator is not `Send` as this value is used across a yield\n-  --> $DIR/drop-tracking-parent-expression.rs:22:22\n+  --> $DIR/drop-tracking-parent-expression.rs:25:22\n    |\n LL |               let g = move || match drop($name::Client { ..$name::Client::default() }) {\n    |                                                            ------------------------ has type `derived_drop::Client` which is not `Send`\n@@ -34,14 +34,14 @@ LL | |         };\n LL | |     );\n    | |_____- in this macro invocation\n note: required by a bound in `assert_send`\n-  --> $DIR/drop-tracking-parent-expression.rs:41:19\n+  --> $DIR/drop-tracking-parent-expression.rs:49:19\n    |\n LL | fn assert_send<T: Send>(_thing: T) {}\n    |                   ^^^^ required by this bound in `assert_send`\n    = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: generator cannot be sent between threads safely\n-  --> $DIR/drop-tracking-parent-expression.rs:24:25\n+  --> $DIR/drop-tracking-parent-expression.rs:27:25\n    |\n LL |               assert_send(g);\n    |                           ^ generator is not `Send`\n@@ -55,9 +55,9 @@ LL | |         };\n LL | |     );\n    | |_____- in this macro invocation\n    |\n-   = help: within `[generator@$DIR/drop-tracking-parent-expression.rs:18:21: 18:28]`, the trait `Send` is not implemented for `significant_drop::Client`\n+   = help: within `[generator@$DIR/drop-tracking-parent-expression.rs:21:21: 21:28]`, the trait `Send` is not implemented for `significant_drop::Client`\n note: generator is not `Send` as this value is used across a yield\n-  --> $DIR/drop-tracking-parent-expression.rs:22:22\n+  --> $DIR/drop-tracking-parent-expression.rs:25:22\n    |\n LL |               let g = move || match drop($name::Client { ..$name::Client::default() }) {\n    |                                                            ------------------------ has type `significant_drop::Client` which is not `Send`\n@@ -76,14 +76,14 @@ LL | |         };\n LL | |     );\n    | |_____- in this macro invocation\n note: required by a bound in `assert_send`\n-  --> $DIR/drop-tracking-parent-expression.rs:41:19\n+  --> $DIR/drop-tracking-parent-expression.rs:49:19\n    |\n LL | fn assert_send<T: Send>(_thing: T) {}\n    |                   ^^^^ required by this bound in `assert_send`\n    = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: generator cannot be sent between threads safely\n-  --> $DIR/drop-tracking-parent-expression.rs:24:25\n+  --> $DIR/drop-tracking-parent-expression.rs:27:25\n    |\n LL |               assert_send(g);\n    |                           ^ generator is not `Send`\n@@ -97,9 +97,9 @@ LL | |         };\n LL | |     );\n    | |_____- in this macro invocation\n    |\n-   = help: within `[generator@$DIR/drop-tracking-parent-expression.rs:18:21: 18:28]`, the trait `Send` is not implemented for `insignificant_dtor::Client`\n+   = help: within `[generator@$DIR/drop-tracking-parent-expression.rs:21:21: 21:28]`, the trait `Send` is not implemented for `insignificant_dtor::Client`\n note: generator is not `Send` as this value is used across a yield\n-  --> $DIR/drop-tracking-parent-expression.rs:22:22\n+  --> $DIR/drop-tracking-parent-expression.rs:25:22\n    |\n LL |               let g = move || match drop($name::Client { ..$name::Client::default() }) {\n    |                                                            ------------------------ has type `insignificant_dtor::Client` which is not `Send`\n@@ -118,7 +118,7 @@ LL | |         };\n LL | |     );\n    | |_____- in this macro invocation\n note: required by a bound in `assert_send`\n-  --> $DIR/drop-tracking-parent-expression.rs:41:19\n+  --> $DIR/drop-tracking-parent-expression.rs:49:19\n    |\n LL | fn assert_send<T: Send>(_thing: T) {}\n    |                   ^^^^ required by this bound in `assert_send`", "previous_filename": "tests/ui/generator/drop-tracking-parent-expression.stderr"}, {"sha": "35698a98dbd629386b35371a88054e73f48f6b1d", "filename": "tests/ui/generator/drop-tracking-parent-expression.drop_tracking_mir.stderr", "status": "added", "additions": 122, "deletions": 0, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fgenerator%2Fdrop-tracking-parent-expression.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fgenerator%2Fdrop-tracking-parent-expression.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fdrop-tracking-parent-expression.drop_tracking_mir.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -0,0 +1,122 @@\n+error: generator cannot be sent between threads safely\n+  --> $DIR/drop-tracking-parent-expression.rs:27:13\n+   |\n+LL |               assert_send(g);\n+   |               ^^^^^^^^^^^ generator is not `Send`\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+   |\n+   = help: within `[generator@$DIR/drop-tracking-parent-expression.rs:21:21: 21:28]`, the trait `Send` is not implemented for `derived_drop::Client`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/drop-tracking-parent-expression.rs:25:22\n+   |\n+LL |               let g = move || match drop($name::Client { ..$name::Client::default() }) {\n+   |                                                            ------------------------ has type `derived_drop::Client` which is not `Send`\n+...\n+LL |                   _ => yield,\n+   |                        ^^^^^ yield occurs here, with `$name::Client::default()` maybe used later\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+note: required by a bound in `assert_send`\n+  --> $DIR/drop-tracking-parent-expression.rs:49:19\n+   |\n+LL | fn assert_send<T: Send>(_thing: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+   = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: generator cannot be sent between threads safely\n+  --> $DIR/drop-tracking-parent-expression.rs:27:13\n+   |\n+LL |               assert_send(g);\n+   |               ^^^^^^^^^^^ generator is not `Send`\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+   |\n+   = help: within `[generator@$DIR/drop-tracking-parent-expression.rs:21:21: 21:28]`, the trait `Send` is not implemented for `significant_drop::Client`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/drop-tracking-parent-expression.rs:25:22\n+   |\n+LL |               let g = move || match drop($name::Client { ..$name::Client::default() }) {\n+   |                                                            ------------------------ has type `significant_drop::Client` which is not `Send`\n+...\n+LL |                   _ => yield,\n+   |                        ^^^^^ yield occurs here, with `$name::Client::default()` maybe used later\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+note: required by a bound in `assert_send`\n+  --> $DIR/drop-tracking-parent-expression.rs:49:19\n+   |\n+LL | fn assert_send<T: Send>(_thing: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+   = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: generator cannot be sent between threads safely\n+  --> $DIR/drop-tracking-parent-expression.rs:27:13\n+   |\n+LL |               assert_send(g);\n+   |               ^^^^^^^^^^^ generator is not `Send`\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+   |\n+   = help: within `[generator@$DIR/drop-tracking-parent-expression.rs:21:21: 21:28]`, the trait `Send` is not implemented for `insignificant_dtor::Client`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/drop-tracking-parent-expression.rs:25:22\n+   |\n+LL |               let g = move || match drop($name::Client { ..$name::Client::default() }) {\n+   |                                                            ------------------------ has type `insignificant_dtor::Client` which is not `Send`\n+...\n+LL |                   _ => yield,\n+   |                        ^^^^^ yield occurs here, with `$name::Client::default()` maybe used later\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+note: required by a bound in `assert_send`\n+  --> $DIR/drop-tracking-parent-expression.rs:49:19\n+   |\n+LL | fn assert_send<T: Send>(_thing: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+   = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "1a05bfe4f0e6aebbdc4497aa433dec2091afab89", "filename": "tests/ui/generator/drop-tracking-parent-expression.no_drop_tracking.stderr", "status": "added", "additions": 334, "deletions": 0, "changes": 334, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fgenerator%2Fdrop-tracking-parent-expression.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fgenerator%2Fdrop-tracking-parent-expression.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fdrop-tracking-parent-expression.no_drop_tracking.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -0,0 +1,334 @@\n+error: generator cannot be sent between threads safely\n+  --> $DIR/drop-tracking-parent-expression.rs:27:25\n+   |\n+LL |               assert_send(g);\n+   |                           ^ generator is not `Send`\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+   |\n+   = help: within `[generator@$DIR/drop-tracking-parent-expression.rs:21:21: 21:28]`, the trait `Send` is not implemented for `copy::Client`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/drop-tracking-parent-expression.rs:25:22\n+   |\n+LL |               let g = move || match drop($name::Client { ..$name::Client::default() }) {\n+   |                                                            ------------------------ has type `copy::Client` which is not `Send`\n+...\n+LL |                   _ => yield,\n+   |                        ^^^^^ yield occurs here, with `$name::Client::default()` maybe used later\n+LL |               };\n+   |               - `$name::Client::default()` is later dropped here\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+note: required by a bound in `assert_send`\n+  --> $DIR/drop-tracking-parent-expression.rs:49:19\n+   |\n+LL | fn assert_send<T: Send>(_thing: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+   = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: generator cannot be sent between threads safely\n+  --> $DIR/drop-tracking-parent-expression.rs:40:25\n+   |\n+LL |               assert_send(g);\n+   |                           ^ generator is not `Send`\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+   |\n+   = help: within `[generator@$DIR/drop-tracking-parent-expression.rs:37:21: 37:28]`, the trait `Send` is not implemented for `copy::Client`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/drop-tracking-parent-expression.rs:38:22\n+   |\n+LL |               let g = move || match drop($name::Client::default()) {\n+   |                                          ------------------------ has type `copy::Client` which is not `Send`\n+LL |                   _ => yield,\n+   |                        ^^^^^ yield occurs here, with `$name::Client::default()` maybe used later\n+LL |               };\n+   |               - `$name::Client::default()` is later dropped here\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+note: required by a bound in `assert_send`\n+  --> $DIR/drop-tracking-parent-expression.rs:49:19\n+   |\n+LL | fn assert_send<T: Send>(_thing: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+   = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: generator cannot be sent between threads safely\n+  --> $DIR/drop-tracking-parent-expression.rs:27:25\n+   |\n+LL |               assert_send(g);\n+   |                           ^ generator is not `Send`\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+   |\n+   = help: within `[generator@$DIR/drop-tracking-parent-expression.rs:21:21: 21:28]`, the trait `Send` is not implemented for `derived_drop::Client`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/drop-tracking-parent-expression.rs:25:22\n+   |\n+LL |               let g = move || match drop($name::Client { ..$name::Client::default() }) {\n+   |                                                            ------------------------ has type `derived_drop::Client` which is not `Send`\n+...\n+LL |                   _ => yield,\n+   |                        ^^^^^ yield occurs here, with `$name::Client::default()` maybe used later\n+LL |               };\n+   |               - `$name::Client::default()` is later dropped here\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+note: required by a bound in `assert_send`\n+  --> $DIR/drop-tracking-parent-expression.rs:49:19\n+   |\n+LL | fn assert_send<T: Send>(_thing: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+   = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: generator cannot be sent between threads safely\n+  --> $DIR/drop-tracking-parent-expression.rs:40:25\n+   |\n+LL |               assert_send(g);\n+   |                           ^ generator is not `Send`\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+   |\n+   = help: within `[generator@$DIR/drop-tracking-parent-expression.rs:37:21: 37:28]`, the trait `Send` is not implemented for `derived_drop::Client`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/drop-tracking-parent-expression.rs:38:22\n+   |\n+LL |               let g = move || match drop($name::Client::default()) {\n+   |                                          ------------------------ has type `derived_drop::Client` which is not `Send`\n+LL |                   _ => yield,\n+   |                        ^^^^^ yield occurs here, with `$name::Client::default()` maybe used later\n+LL |               };\n+   |               - `$name::Client::default()` is later dropped here\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+note: required by a bound in `assert_send`\n+  --> $DIR/drop-tracking-parent-expression.rs:49:19\n+   |\n+LL | fn assert_send<T: Send>(_thing: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+   = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: generator cannot be sent between threads safely\n+  --> $DIR/drop-tracking-parent-expression.rs:27:25\n+   |\n+LL |               assert_send(g);\n+   |                           ^ generator is not `Send`\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+   |\n+   = help: within `[generator@$DIR/drop-tracking-parent-expression.rs:21:21: 21:28]`, the trait `Send` is not implemented for `significant_drop::Client`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/drop-tracking-parent-expression.rs:25:22\n+   |\n+LL |               let g = move || match drop($name::Client { ..$name::Client::default() }) {\n+   |                                                            ------------------------ has type `significant_drop::Client` which is not `Send`\n+...\n+LL |                   _ => yield,\n+   |                        ^^^^^ yield occurs here, with `$name::Client::default()` maybe used later\n+LL |               };\n+   |               - `$name::Client::default()` is later dropped here\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+note: required by a bound in `assert_send`\n+  --> $DIR/drop-tracking-parent-expression.rs:49:19\n+   |\n+LL | fn assert_send<T: Send>(_thing: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+   = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: generator cannot be sent between threads safely\n+  --> $DIR/drop-tracking-parent-expression.rs:40:25\n+   |\n+LL |               assert_send(g);\n+   |                           ^ generator is not `Send`\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+   |\n+   = help: within `[generator@$DIR/drop-tracking-parent-expression.rs:37:21: 37:28]`, the trait `Send` is not implemented for `significant_drop::Client`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/drop-tracking-parent-expression.rs:38:22\n+   |\n+LL |               let g = move || match drop($name::Client::default()) {\n+   |                                          ------------------------ has type `significant_drop::Client` which is not `Send`\n+LL |                   _ => yield,\n+   |                        ^^^^^ yield occurs here, with `$name::Client::default()` maybe used later\n+LL |               };\n+   |               - `$name::Client::default()` is later dropped here\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+note: required by a bound in `assert_send`\n+  --> $DIR/drop-tracking-parent-expression.rs:49:19\n+   |\n+LL | fn assert_send<T: Send>(_thing: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+   = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: generator cannot be sent between threads safely\n+  --> $DIR/drop-tracking-parent-expression.rs:27:25\n+   |\n+LL |               assert_send(g);\n+   |                           ^ generator is not `Send`\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+   |\n+   = help: within `[generator@$DIR/drop-tracking-parent-expression.rs:21:21: 21:28]`, the trait `Send` is not implemented for `insignificant_dtor::Client`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/drop-tracking-parent-expression.rs:25:22\n+   |\n+LL |               let g = move || match drop($name::Client { ..$name::Client::default() }) {\n+   |                                                            ------------------------ has type `insignificant_dtor::Client` which is not `Send`\n+...\n+LL |                   _ => yield,\n+   |                        ^^^^^ yield occurs here, with `$name::Client::default()` maybe used later\n+LL |               };\n+   |               - `$name::Client::default()` is later dropped here\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+note: required by a bound in `assert_send`\n+  --> $DIR/drop-tracking-parent-expression.rs:49:19\n+   |\n+LL | fn assert_send<T: Send>(_thing: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+   = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: generator cannot be sent between threads safely\n+  --> $DIR/drop-tracking-parent-expression.rs:40:25\n+   |\n+LL |               assert_send(g);\n+   |                           ^ generator is not `Send`\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+   |\n+   = help: within `[generator@$DIR/drop-tracking-parent-expression.rs:37:21: 37:28]`, the trait `Send` is not implemented for `insignificant_dtor::Client`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/drop-tracking-parent-expression.rs:38:22\n+   |\n+LL |               let g = move || match drop($name::Client::default()) {\n+   |                                          ------------------------ has type `insignificant_dtor::Client` which is not `Send`\n+LL |                   _ => yield,\n+   |                        ^^^^^ yield occurs here, with `$name::Client::default()` maybe used later\n+LL |               };\n+   |               - `$name::Client::default()` is later dropped here\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+note: required by a bound in `assert_send`\n+  --> $DIR/drop-tracking-parent-expression.rs:49:19\n+   |\n+LL | fn assert_send<T: Send>(_thing: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+   = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 8 previous errors\n+"}, {"sha": "ed9ac6d11adb1d787dd28ea184a0fd37753cd559", "filename": "tests/ui/generator/drop-tracking-parent-expression.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fgenerator%2Fdrop-tracking-parent-expression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fgenerator%2Fdrop-tracking-parent-expression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fdrop-tracking-parent-expression.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -1,4 +1,7 @@\n-// compile-flags: -Zdrop-tracking\n+// revisions: no_drop_tracking drop_tracking drop_tracking_mir\n+// [drop_tracking] compile-flags: -Zdrop-tracking\n+// [drop_tracking_mir] compile-flags: -Zdrop-tracking-mir\n+\n #![feature(generators, negative_impls, rustc_attrs)]\n \n macro_rules! type_combinations {\n@@ -18,13 +21,14 @@ macro_rules! type_combinations {\n             let g = move || match drop($name::Client { ..$name::Client::default() }) {\n             //~^ `significant_drop::Client` which is not `Send`\n             //~| `insignificant_dtor::Client` which is not `Send`\n-            //~| `derived_drop::Client` which is not `Send`\n+            //[no_drop_tracking,drop_tracking]~| `derived_drop::Client` which is not `Send`\n                 _ => yield,\n             };\n             assert_send(g);\n             //~^ ERROR cannot be sent between threads\n             //~| ERROR cannot be sent between threads\n             //~| ERROR cannot be sent between threads\n+            //[no_drop_tracking]~| ERROR cannot be sent between threads\n         }\n \n         // Simple owned value. This works because the Client is considered moved into `drop`,\n@@ -34,6 +38,10 @@ macro_rules! type_combinations {\n                 _ => yield,\n             };\n             assert_send(g);\n+            //[no_drop_tracking]~^ ERROR cannot be sent between threads\n+            //[no_drop_tracking]~| ERROR cannot be sent between threads\n+            //[no_drop_tracking]~| ERROR cannot be sent between threads\n+            //[no_drop_tracking]~| ERROR cannot be sent between threads\n         }\n     )* }\n }"}, {"sha": "cbc291701cbc9d9a67ea18f269b2b89b54eaaa88", "filename": "tests/ui/generator/drop-tracking-yielding-in-match-guards.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fgenerator%2Fdrop-tracking-yielding-in-match-guards.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fgenerator%2Fdrop-tracking-yielding-in-match-guards.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fdrop-tracking-yielding-in-match-guards.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -1,6 +1,8 @@\n // build-pass\n // edition:2018\n-// compile-flags: -Zdrop-tracking\n+// revisions: no_drop_tracking drop_tracking drop_tracking_mir\n+// [drop_tracking] compile-flags: -Zdrop-tracking\n+// [drop_tracking_mir] compile-flags: -Zdrop-tracking-mir\n \n #![feature(generators)]\n "}, {"sha": "cfc0cf7cdd7012a6d0c12f6e80dca4696ba28996", "filename": "tests/ui/generator/issue-105084.drop_tracking_mir.stderr", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fgenerator%2Fissue-105084.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fgenerator%2Fissue-105084.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fissue-105084.drop_tracking_mir.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -0,0 +1,51 @@\n+error[E0382]: borrow of moved value: `g`\n+  --> $DIR/issue-105084.rs:44:14\n+   |\n+LL |     let mut g = || {\n+   |         ----- move occurs because `g` has type `[generator@$DIR/issue-105084.rs:22:17: 22:19]`, which does not implement the `Copy` trait\n+...\n+LL |     let mut h = copy(g);\n+   |                      - value moved here\n+...\n+LL |     Pin::new(&mut g).resume(());\n+   |              ^^^^^^ value borrowed here after move\n+   |\n+note: consider changing this parameter type in function `copy` to borrow instead if owning the value isn't necessary\n+  --> $DIR/issue-105084.rs:17:21\n+   |\n+LL | fn copy<T: Copy>(x: T) -> T {\n+   |    ----             ^ this parameter takes ownership of the value\n+   |    |\n+   |    in this function\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |     let mut h = copy(g.clone());\n+   |                       ++++++++\n+\n+error[E0277]: the trait bound `Box<(i32, ())>: Copy` is not satisfied in `[generator@$DIR/issue-105084.rs:22:17: 22:19]`\n+  --> $DIR/issue-105084.rs:38:17\n+   |\n+LL |     let mut g = || {\n+   |                 -- within this `[generator@$DIR/issue-105084.rs:22:17: 22:19]`\n+...\n+LL |     let mut h = copy(g);\n+   |                 ^^^^ within `[generator@$DIR/issue-105084.rs:22:17: 22:19]`, the trait `Copy` is not implemented for `Box<(i32, ())>`\n+   |\n+note: generator does not implement `Copy` as this value is used across a yield\n+  --> $DIR/issue-105084.rs:28:25\n+   |\n+LL |         let t = box (5, yield);\n+   |                 --------^^^^^-\n+   |                 |       |\n+   |                 |       yield occurs here, with `box (5, yield)` maybe used later\n+   |                 has type `Box<(i32, ())>` which does not implement `Copy`\n+note: required by a bound in `copy`\n+  --> $DIR/issue-105084.rs:17:12\n+   |\n+LL | fn copy<T: Copy>(x: T) -> T {\n+   |            ^^^^ required by this bound in `copy`\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0277, E0382.\n+For more information about an error, try `rustc --explain E0277`."}, {"sha": "7c9a97b40a5dc6828adb548447456dc1d9641297", "filename": "tests/ui/generator/issue-105084.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fgenerator%2Fissue-105084.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fgenerator%2Fissue-105084.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fissue-105084.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -0,0 +1,49 @@\n+// revisions: no_drop_tracking drop_tracking drop_tracking_mir\n+// [drop_tracking] compile-flags: -Zdrop-tracking\n+// [drop_tracking_mir] compile-flags: -Zdrop-tracking-mir\n+// [no_drop_tracking] known-bug: #105084\n+// [no_drop_tracking] check-pass\n+// [drop_tracking] known-bug: #105084\n+// [drop_tracking] check-pass\n+\n+#![feature(generators)]\n+#![feature(generator_clone)]\n+#![feature(generator_trait)]\n+#![feature(box_syntax)]\n+\n+use std::ops::Generator;\n+use std::pin::Pin;\n+\n+fn copy<T: Copy>(x: T) -> T {\n+    x\n+}\n+\n+fn main() {\n+    let mut g = || {\n+        // This is desuraged as 4 stages:\n+        // - allocate a `*mut u8` with `exchange_malloc`;\n+        // - create a Box that is ignored for trait computations;\n+        // - compute fields (and yields);\n+        // - assign to `t`.\n+        let t = box (5, yield);\n+        drop(t);\n+    };\n+\n+    // Allocate the temporary box.\n+    Pin::new(&mut g).resume(());\n+\n+    // The temporary box is in generator locals.\n+    // As it is not taken into account for trait computation,\n+    // the generator is `Copy`.\n+    let mut h = copy(g);\n+    //[drop_tracking_mir]~^ ERROR the trait bound `Box<(i32, ())>: Copy` is not satisfied in\n+\n+    // We now have 2 boxes with the same backing allocation:\n+    // one inside `g` and one inside `h`.\n+    // Proceed and drop `t` in `g`.\n+    Pin::new(&mut g).resume(());\n+    //[drop_tracking_mir]~^ ERROR borrow of moved value: `g`\n+\n+    // Proceed and drop `t` in `h` -> double free!\n+    Pin::new(&mut h).resume(());\n+}"}, {"sha": "06d2d23b9efb17e79188cf429aaf071585ed45f9", "filename": "tests/ui/generator/issue-57017.no_drop_tracking.stderr", "status": "added", "additions": 248, "deletions": 0, "changes": 248, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fgenerator%2Fissue-57017.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fgenerator%2Fissue-57017.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fissue-57017.no_drop_tracking.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -0,0 +1,248 @@\n+error: generator cannot be sent between threads safely\n+  --> $DIR/issue-57017.rs:31:25\n+   |\n+LL |               assert_send(g);\n+   |                           ^ generator is not `Send`\n+...\n+LL | /     type_combinations!(\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         derived_drop => { #[derive(Default)] pub struct Client { pub nickname: String } };\n+LL | |         significant_drop => {\n+...  |\n+LL | |         }\n+LL | |     );\n+   | |_____- in this macro invocation\n+   |\n+   = help: the trait `Sync` is not implemented for `copy::unsync::Client`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/issue-57017.rs:29:28\n+   |\n+LL |               let g = move || match drop(&$name::unsync::Client::default()) {\n+   |                                          --------------------------------- has type `&copy::unsync::Client` which is not `Send`\n+LL |                   _status => yield,\n+   |                              ^^^^^ yield occurs here, with `&$name::unsync::Client::default()` maybe used later\n+LL |               };\n+   |               - `&$name::unsync::Client::default()` is later dropped here\n+...\n+LL | /     type_combinations!(\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         derived_drop => { #[derive(Default)] pub struct Client { pub nickname: String } };\n+LL | |         significant_drop => {\n+...  |\n+LL | |         }\n+LL | |     );\n+   | |_____- in this macro invocation\n+note: required by a bound in `assert_send`\n+  --> $DIR/issue-57017.rs:51:19\n+   |\n+LL | fn assert_send<T: Send>(_thing: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+   = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: generator cannot be sent between threads safely\n+  --> $DIR/issue-57017.rs:43:25\n+   |\n+LL |               assert_send(g);\n+   |                           ^ generator is not `Send`\n+...\n+LL | /     type_combinations!(\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         derived_drop => { #[derive(Default)] pub struct Client { pub nickname: String } };\n+LL | |         significant_drop => {\n+...  |\n+LL | |         }\n+LL | |     );\n+   | |_____- in this macro invocation\n+   |\n+   = help: within `[generator@$DIR/issue-57017.rs:40:21: 40:28]`, the trait `Send` is not implemented for `copy::unsend::Client`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/issue-57017.rs:41:28\n+   |\n+LL |               let g = move || match drop($name::unsend::Client::default()) {\n+   |                                          -------------------------------- has type `copy::unsend::Client` which is not `Send`\n+LL |                   _status => yield,\n+   |                              ^^^^^ yield occurs here, with `$name::unsend::Client::default()` maybe used later\n+LL |               };\n+   |               - `$name::unsend::Client::default()` is later dropped here\n+...\n+LL | /     type_combinations!(\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         derived_drop => { #[derive(Default)] pub struct Client { pub nickname: String } };\n+LL | |         significant_drop => {\n+...  |\n+LL | |         }\n+LL | |     );\n+   | |_____- in this macro invocation\n+note: required by a bound in `assert_send`\n+  --> $DIR/issue-57017.rs:51:19\n+   |\n+LL | fn assert_send<T: Send>(_thing: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+   = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: generator cannot be sent between threads safely\n+  --> $DIR/issue-57017.rs:31:25\n+   |\n+LL |               assert_send(g);\n+   |                           ^ generator is not `Send`\n+...\n+LL | /     type_combinations!(\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         derived_drop => { #[derive(Default)] pub struct Client { pub nickname: String } };\n+LL | |         significant_drop => {\n+...  |\n+LL | |         }\n+LL | |     );\n+   | |_____- in this macro invocation\n+   |\n+   = help: the trait `Sync` is not implemented for `derived_drop::unsync::Client`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/issue-57017.rs:29:28\n+   |\n+LL |               let g = move || match drop(&$name::unsync::Client::default()) {\n+   |                                          --------------------------------- has type `&derived_drop::unsync::Client` which is not `Send`\n+LL |                   _status => yield,\n+   |                              ^^^^^ yield occurs here, with `&$name::unsync::Client::default()` maybe used later\n+LL |               };\n+   |               - `&$name::unsync::Client::default()` is later dropped here\n+...\n+LL | /     type_combinations!(\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         derived_drop => { #[derive(Default)] pub struct Client { pub nickname: String } };\n+LL | |         significant_drop => {\n+...  |\n+LL | |         }\n+LL | |     );\n+   | |_____- in this macro invocation\n+note: required by a bound in `assert_send`\n+  --> $DIR/issue-57017.rs:51:19\n+   |\n+LL | fn assert_send<T: Send>(_thing: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+   = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: generator cannot be sent between threads safely\n+  --> $DIR/issue-57017.rs:43:25\n+   |\n+LL |               assert_send(g);\n+   |                           ^ generator is not `Send`\n+...\n+LL | /     type_combinations!(\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         derived_drop => { #[derive(Default)] pub struct Client { pub nickname: String } };\n+LL | |         significant_drop => {\n+...  |\n+LL | |         }\n+LL | |     );\n+   | |_____- in this macro invocation\n+   |\n+   = help: within `[generator@$DIR/issue-57017.rs:40:21: 40:28]`, the trait `Send` is not implemented for `derived_drop::unsend::Client`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/issue-57017.rs:41:28\n+   |\n+LL |               let g = move || match drop($name::unsend::Client::default()) {\n+   |                                          -------------------------------- has type `derived_drop::unsend::Client` which is not `Send`\n+LL |                   _status => yield,\n+   |                              ^^^^^ yield occurs here, with `$name::unsend::Client::default()` maybe used later\n+LL |               };\n+   |               - `$name::unsend::Client::default()` is later dropped here\n+...\n+LL | /     type_combinations!(\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         derived_drop => { #[derive(Default)] pub struct Client { pub nickname: String } };\n+LL | |         significant_drop => {\n+...  |\n+LL | |         }\n+LL | |     );\n+   | |_____- in this macro invocation\n+note: required by a bound in `assert_send`\n+  --> $DIR/issue-57017.rs:51:19\n+   |\n+LL | fn assert_send<T: Send>(_thing: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+   = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: generator cannot be sent between threads safely\n+  --> $DIR/issue-57017.rs:31:25\n+   |\n+LL |               assert_send(g);\n+   |                           ^ generator is not `Send`\n+...\n+LL | /     type_combinations!(\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         derived_drop => { #[derive(Default)] pub struct Client { pub nickname: String } };\n+LL | |         significant_drop => {\n+...  |\n+LL | |         }\n+LL | |     );\n+   | |_____- in this macro invocation\n+   |\n+   = help: the trait `Sync` is not implemented for `significant_drop::unsync::Client`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/issue-57017.rs:29:28\n+   |\n+LL |               let g = move || match drop(&$name::unsync::Client::default()) {\n+   |                                          --------------------------------- has type `&significant_drop::unsync::Client` which is not `Send`\n+LL |                   _status => yield,\n+   |                              ^^^^^ yield occurs here, with `&$name::unsync::Client::default()` maybe used later\n+LL |               };\n+   |               - `&$name::unsync::Client::default()` is later dropped here\n+...\n+LL | /     type_combinations!(\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         derived_drop => { #[derive(Default)] pub struct Client { pub nickname: String } };\n+LL | |         significant_drop => {\n+...  |\n+LL | |         }\n+LL | |     );\n+   | |_____- in this macro invocation\n+note: required by a bound in `assert_send`\n+  --> $DIR/issue-57017.rs:51:19\n+   |\n+LL | fn assert_send<T: Send>(_thing: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+   = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: generator cannot be sent between threads safely\n+  --> $DIR/issue-57017.rs:43:25\n+   |\n+LL |               assert_send(g);\n+   |                           ^ generator is not `Send`\n+...\n+LL | /     type_combinations!(\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         derived_drop => { #[derive(Default)] pub struct Client { pub nickname: String } };\n+LL | |         significant_drop => {\n+...  |\n+LL | |         }\n+LL | |     );\n+   | |_____- in this macro invocation\n+   |\n+   = help: within `[generator@$DIR/issue-57017.rs:40:21: 40:28]`, the trait `Send` is not implemented for `significant_drop::unsend::Client`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/issue-57017.rs:41:28\n+   |\n+LL |               let g = move || match drop($name::unsend::Client::default()) {\n+   |                                          -------------------------------- has type `significant_drop::unsend::Client` which is not `Send`\n+LL |                   _status => yield,\n+   |                              ^^^^^ yield occurs here, with `$name::unsend::Client::default()` maybe used later\n+LL |               };\n+   |               - `$name::unsend::Client::default()` is later dropped here\n+...\n+LL | /     type_combinations!(\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         derived_drop => { #[derive(Default)] pub struct Client { pub nickname: String } };\n+LL | |         significant_drop => {\n+...  |\n+LL | |         }\n+LL | |     );\n+   | |_____- in this macro invocation\n+note: required by a bound in `assert_send`\n+  --> $DIR/issue-57017.rs:51:19\n+   |\n+LL | fn assert_send<T: Send>(_thing: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+   = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 6 previous errors\n+"}, {"sha": "03b00ac99ad221fd447eefec7af003d9adf37f63", "filename": "tests/ui/generator/issue-57017.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fgenerator%2Fissue-57017.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fgenerator%2Fissue-57017.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fissue-57017.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -1,5 +1,9 @@\n-// build-pass\n-// compile-flags: -Zdrop-tracking\n+// revisions: no_drop_tracking drop_tracking drop_tracking_mir\n+// [drop_tracking] compile-flags: -Zdrop-tracking\n+// [drop_tracking_mir] compile-flags: -Zdrop-tracking-mir\n+// [drop_tracking] build-pass\n+// [drop_tracking_mir] build-pass\n+\n #![feature(generators, negative_impls)]\n \n macro_rules! type_combinations {\n@@ -25,6 +29,9 @@ macro_rules! type_combinations {\n                 _status => yield,\n             };\n             assert_send(g);\n+            //[no_drop_tracking]~^ ERROR generator cannot be sent between threads safely\n+            //[no_drop_tracking]~| ERROR generator cannot be sent between threads safely\n+            //[no_drop_tracking]~| ERROR generator cannot be sent between threads safely\n         }\n \n         // This tests that `Client` is properly considered to be dropped after moving it into the\n@@ -34,6 +41,9 @@ macro_rules! type_combinations {\n                 _status => yield,\n             };\n             assert_send(g);\n+            //[no_drop_tracking]~^ ERROR generator cannot be sent between threads safely\n+            //[no_drop_tracking]~| ERROR generator cannot be sent between threads safely\n+            //[no_drop_tracking]~| ERROR generator cannot be sent between threads safely\n         }\n     )* }\n }"}, {"sha": "612dd9c37f70173259b2d037a85fc82859ee025d", "filename": "tests/ui/generator/issue-57478.no_drop_tracking.stderr", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fgenerator%2Fissue-57478.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fgenerator%2Fissue-57478.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fissue-57478.no_drop_tracking.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -0,0 +1,31 @@\n+error: generator cannot be sent between threads safely\n+  --> $DIR/issue-57478.rs:13:17\n+   |\n+LL |       assert_send(|| {\n+   |  _________________^\n+LL | |\n+LL | |         let guard = Foo;\n+LL | |         drop(guard);\n+LL | |         yield;\n+LL | |     })\n+   | |_____^ generator is not `Send`\n+   |\n+   = help: within `[generator@$DIR/issue-57478.rs:13:17: 13:19]`, the trait `Send` is not implemented for `Foo`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/issue-57478.rs:17:9\n+   |\n+LL |         let guard = Foo;\n+   |             ----- has type `Foo` which is not `Send`\n+LL |         drop(guard);\n+LL |         yield;\n+   |         ^^^^^ yield occurs here, with `guard` maybe used later\n+LL |     })\n+   |     - `guard` is later dropped here\n+note: required by a bound in `assert_send`\n+  --> $DIR/issue-57478.rs:21:19\n+   |\n+LL | fn assert_send<T: Send>(_: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+\n+error: aborting due to previous error\n+"}, {"sha": "3c23b5992710e2bceb3a3b5903b6add9bcdb306f", "filename": "tests/ui/generator/issue-57478.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fgenerator%2Fissue-57478.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fgenerator%2Fissue-57478.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fissue-57478.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -1,5 +1,8 @@\n-// check-pass\n-// compile-flags: -Zdrop-tracking\n+// revisions: no_drop_tracking drop_tracking drop_tracking_mir\n+// [drop_tracking] compile-flags: -Zdrop-tracking\n+// [drop_tracking_mir] compile-flags: -Zdrop-tracking-mir\n+// [drop_tracking] check-pass\n+// [drop_tracking_mir] check-pass\n \n #![feature(negative_impls, generators)]\n \n@@ -8,6 +11,7 @@ impl !Send for Foo {}\n \n fn main() {\n     assert_send(|| {\n+        //[no_drop_tracking]~^ ERROR generator cannot be sent between threads safely\n         let guard = Foo;\n         drop(guard);\n         yield;"}, {"sha": "282eac1b686efa9cb5adfb6289c5dbd76e7e4f7d", "filename": "tests/ui/generator/issue-68112.drop_tracking.stderr", "status": "renamed", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fgenerator%2Fissue-68112.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fgenerator%2Fissue-68112.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fissue-68112.drop_tracking.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -1,13 +1,13 @@\n error: generator cannot be sent between threads safely\n-  --> $DIR/issue-68112.rs:40:18\n+  --> $DIR/issue-68112.rs:43:18\n    |\n LL |     require_send(send_gen);\n    |                  ^^^^^^^^ generator is not `Send`\n    |\n    = help: the trait `Sync` is not implemented for `RefCell<i32>`\n    = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` instead\n note: generator is not `Send` as this value is used across a yield\n-  --> $DIR/issue-68112.rs:36:9\n+  --> $DIR/issue-68112.rs:39:9\n    |\n LL |         let _non_send_gen = make_non_send_generator();\n    |             ------------- has type `impl Generator<Return = Arc<RefCell<i32>>>` which is not `Send`\n@@ -18,13 +18,13 @@ LL |         yield;\n LL |     };\n    |     - `_non_send_gen` is later dropped here\n note: required by a bound in `require_send`\n-  --> $DIR/issue-68112.rs:22:25\n+  --> $DIR/issue-68112.rs:25:25\n    |\n LL | fn require_send(_: impl Send) {}\n    |                         ^^^^ required by this bound in `require_send`\n \n error[E0277]: `RefCell<i32>` cannot be shared between threads safely\n-  --> $DIR/issue-68112.rs:64:18\n+  --> $DIR/issue-68112.rs:67:18\n    |\n LL |     require_send(send_gen);\n    |     ------------ ^^^^^^^^ `RefCell<i32>` cannot be shared between threads safely\n@@ -35,28 +35,28 @@ LL |     require_send(send_gen);\n    = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` instead\n    = note: required for `Arc<RefCell<i32>>` to implement `Send`\n note: required because it's used within this generator\n-  --> $DIR/issue-68112.rs:49:5\n+  --> $DIR/issue-68112.rs:52:5\n    |\n LL |     || {\n    |     ^^\n note: required because it appears within the type `impl Generator<Return = Arc<RefCell<i32>>>`\n-  --> $DIR/issue-68112.rs:46:30\n+  --> $DIR/issue-68112.rs:49:30\n    |\n LL | pub fn make_gen2<T>(t: T) -> impl Generator<Return = T> {\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: required because it appears within the type `impl Generator<Return = Arc<RefCell<i32>>>`\n-  --> $DIR/issue-68112.rs:54:34\n+  --> $DIR/issue-68112.rs:57:34\n    |\n LL | fn make_non_send_generator2() -> impl Generator<Return = Arc<RefCell<i32>>> {\n    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: required because it captures the following types: `impl Generator<Return = Arc<RefCell<i32>>>`, `()`\n note: required because it's used within this generator\n-  --> $DIR/issue-68112.rs:60:20\n+  --> $DIR/issue-68112.rs:63:20\n    |\n LL |     let send_gen = || {\n    |                    ^^\n note: required by a bound in `require_send`\n-  --> $DIR/issue-68112.rs:22:25\n+  --> $DIR/issue-68112.rs:25:25\n    |\n LL | fn require_send(_: impl Send) {}\n    |                         ^^^^ required by this bound in `require_send`", "previous_filename": "tests/ui/generator/issue-68112.stderr"}, {"sha": "a83522b714d539d9f00d15b8cc4788e4b92ac84a", "filename": "tests/ui/generator/issue-68112.drop_tracking_mir.stderr", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fgenerator%2Fissue-68112.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fgenerator%2Fissue-68112.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fissue-68112.drop_tracking_mir.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -0,0 +1,61 @@\n+error: generator cannot be sent between threads safely\n+  --> $DIR/issue-68112.rs:43:5\n+   |\n+LL |     require_send(send_gen);\n+   |     ^^^^^^^^^^^^ generator is not `Send`\n+   |\n+   = help: the trait `Sync` is not implemented for `RefCell<i32>`\n+   = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` instead\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/issue-68112.rs:39:9\n+   |\n+LL |         let _non_send_gen = make_non_send_generator();\n+   |             ------------- has type `impl Generator<Return = Arc<RefCell<i32>>>` which is not `Send`\n+LL |\n+LL |         yield;\n+   |         ^^^^^ yield occurs here, with `_non_send_gen` maybe used later\n+note: required by a bound in `require_send`\n+  --> $DIR/issue-68112.rs:25:25\n+   |\n+LL | fn require_send(_: impl Send) {}\n+   |                         ^^^^ required by this bound in `require_send`\n+\n+error[E0277]: `RefCell<i32>` cannot be shared between threads safely\n+  --> $DIR/issue-68112.rs:67:5\n+   |\n+LL |     require_send(send_gen);\n+   |     ^^^^^^^^^^^^ `RefCell<i32>` cannot be shared between threads safely\n+   |\n+   = help: the trait `Sync` is not implemented for `RefCell<i32>`\n+   = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` instead\n+   = note: required for `Arc<RefCell<i32>>` to implement `Send`\n+note: required because it's used within this generator\n+  --> $DIR/issue-68112.rs:52:5\n+   |\n+LL |     || {\n+   |     ^^\n+note: required because it appears within the type `impl Generator<Return = Arc<RefCell<i32>>>`\n+  --> $DIR/issue-68112.rs:49:30\n+   |\n+LL | pub fn make_gen2<T>(t: T) -> impl Generator<Return = T> {\n+   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: required because it appears within the type `impl Generator<Return = Arc<RefCell<i32>>>`\n+  --> $DIR/issue-68112.rs:57:34\n+   |\n+LL | fn make_non_send_generator2() -> impl Generator<Return = Arc<RefCell<i32>>> {\n+   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: required because it captures the following types: `impl Generator<Return = Arc<RefCell<i32>>>`\n+note: required because it's used within this generator\n+  --> $DIR/issue-68112.rs:63:20\n+   |\n+LL |     let send_gen = || {\n+   |                    ^^\n+note: required by a bound in `require_send`\n+  --> $DIR/issue-68112.rs:25:25\n+   |\n+LL | fn require_send(_: impl Send) {}\n+   |                         ^^^^ required by this bound in `require_send`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "282eac1b686efa9cb5adfb6289c5dbd76e7e4f7d", "filename": "tests/ui/generator/issue-68112.no_drop_tracking.stderr", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fgenerator%2Fissue-68112.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fgenerator%2Fissue-68112.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fissue-68112.no_drop_tracking.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -0,0 +1,66 @@\n+error: generator cannot be sent between threads safely\n+  --> $DIR/issue-68112.rs:43:18\n+   |\n+LL |     require_send(send_gen);\n+   |                  ^^^^^^^^ generator is not `Send`\n+   |\n+   = help: the trait `Sync` is not implemented for `RefCell<i32>`\n+   = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` instead\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/issue-68112.rs:39:9\n+   |\n+LL |         let _non_send_gen = make_non_send_generator();\n+   |             ------------- has type `impl Generator<Return = Arc<RefCell<i32>>>` which is not `Send`\n+LL |\n+LL |         yield;\n+   |         ^^^^^ yield occurs here, with `_non_send_gen` maybe used later\n+...\n+LL |     };\n+   |     - `_non_send_gen` is later dropped here\n+note: required by a bound in `require_send`\n+  --> $DIR/issue-68112.rs:25:25\n+   |\n+LL | fn require_send(_: impl Send) {}\n+   |                         ^^^^ required by this bound in `require_send`\n+\n+error[E0277]: `RefCell<i32>` cannot be shared between threads safely\n+  --> $DIR/issue-68112.rs:67:18\n+   |\n+LL |     require_send(send_gen);\n+   |     ------------ ^^^^^^^^ `RefCell<i32>` cannot be shared between threads safely\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+   = help: the trait `Sync` is not implemented for `RefCell<i32>`\n+   = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` instead\n+   = note: required for `Arc<RefCell<i32>>` to implement `Send`\n+note: required because it's used within this generator\n+  --> $DIR/issue-68112.rs:52:5\n+   |\n+LL |     || {\n+   |     ^^\n+note: required because it appears within the type `impl Generator<Return = Arc<RefCell<i32>>>`\n+  --> $DIR/issue-68112.rs:49:30\n+   |\n+LL | pub fn make_gen2<T>(t: T) -> impl Generator<Return = T> {\n+   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: required because it appears within the type `impl Generator<Return = Arc<RefCell<i32>>>`\n+  --> $DIR/issue-68112.rs:57:34\n+   |\n+LL | fn make_non_send_generator2() -> impl Generator<Return = Arc<RefCell<i32>>> {\n+   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: required because it captures the following types: `impl Generator<Return = Arc<RefCell<i32>>>`, `()`\n+note: required because it's used within this generator\n+  --> $DIR/issue-68112.rs:63:20\n+   |\n+LL |     let send_gen = || {\n+   |                    ^^\n+note: required by a bound in `require_send`\n+  --> $DIR/issue-68112.rs:25:25\n+   |\n+LL | fn require_send(_: impl Send) {}\n+   |                         ^^^^ required by this bound in `require_send`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "48b53b7693d41f5e83012b36c17e8e9cfd5d8e8f", "filename": "tests/ui/generator/issue-68112.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fgenerator%2Fissue-68112.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fgenerator%2Fissue-68112.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fissue-68112.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -1,3 +1,6 @@\n+// revisions: no_drop_tracking drop_tracking drop_tracking_mir\n+// [drop_tracking] compile-flags: -Zdrop-tracking\n+// [drop_tracking_mir] compile-flags: -Zdrop-tracking-mir\n #![feature(generators, generator_trait)]\n \n use std::{\n@@ -8,7 +11,7 @@ use std::{\n };\n \n pub struct Ready<T>(Option<T>);\n-impl<T> Generator<()> for Ready<T> {\n+impl<T: Unpin> Generator<()> for Ready<T> {\n     type Return = T;\n     type Yield = ();\n     fn resume(mut self: Pin<&mut Self>, _args: ()) -> GeneratorState<(), T> {\n@@ -36,7 +39,7 @@ fn test1() {\n         yield;\n         //~^ NOTE yield occurs here\n         //~| NOTE value is used across a yield\n-    }; //~ NOTE later dropped here\n+    }; //[no_drop_tracking,drop_tracking]~ NOTE later dropped here\n     require_send(send_gen);\n     //~^ ERROR generator cannot be sent between threads\n     //~| NOTE not `Send`\n@@ -65,7 +68,7 @@ fn test2() {\n     //~^ ERROR `RefCell<i32>` cannot be shared between threads safely\n     //~| NOTE `RefCell<i32>` cannot be shared between threads safely\n     //~| NOTE required for\n-    //~| NOTE required by a bound introduced by this call\n+    //[no_drop_tracking,drop_tracking]~| NOTE required by a bound introduced by this call\n     //~| NOTE captures the following types\n     //~| NOTE use `std::sync::RwLock` instead\n }"}, {"sha": "8d3f7c62f393611abfc387bd8192bf4a114750ea", "filename": "tests/ui/generator/issue-93161.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fgenerator%2Fissue-93161.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fgenerator%2Fissue-93161.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fissue-93161.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -1,6 +1,8 @@\n+// revisions: no_drop_tracking drop_tracking drop_tracking_mir\n+// [drop_tracking] compile-flags: -Zdrop-tracking\n+// [drop_tracking_mir] compile-flags: -Zdrop-tracking-mir\n // edition:2021\n // run-pass\n-// compile-flags: -Zdrop-tracking\n \n #![feature(never_type)]\n "}, {"sha": "718fd42245ad31973cddf384da96719aacd0d286", "filename": "tests/ui/generator/not-send-sync.drop_tracking.stderr", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fgenerator%2Fnot-send-sync.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fgenerator%2Fnot-send-sync.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fnot-send-sync.drop_tracking.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -0,0 +1,60 @@\n+error: generator cannot be shared between threads safely\n+  --> $DIR/not-send-sync.rs:17:17\n+   |\n+LL |       assert_sync(|| {\n+   |  _________________^\n+LL | |\n+LL | |         let a = NotSync;\n+LL | |         yield;\n+LL | |         drop(a);\n+LL | |     });\n+   | |_____^ generator is not `Sync`\n+   |\n+   = help: within `[generator@$DIR/not-send-sync.rs:17:17: 17:19]`, the trait `Sync` is not implemented for `NotSync`\n+note: generator is not `Sync` as this value is used across a yield\n+  --> $DIR/not-send-sync.rs:20:9\n+   |\n+LL |         let a = NotSync;\n+   |             - has type `NotSync` which is not `Sync`\n+LL |         yield;\n+   |         ^^^^^ yield occurs here, with `a` maybe used later\n+LL |         drop(a);\n+LL |     });\n+   |     - `a` is later dropped here\n+note: required by a bound in `assert_sync`\n+  --> $DIR/not-send-sync.rs:14:23\n+   |\n+LL |     fn assert_sync<T: Sync>(_: T) {}\n+   |                       ^^^^ required by this bound in `assert_sync`\n+\n+error: generator cannot be sent between threads safely\n+  --> $DIR/not-send-sync.rs:24:17\n+   |\n+LL |       assert_send(|| {\n+   |  _________________^\n+LL | |\n+LL | |         let a = NotSend;\n+LL | |         yield;\n+LL | |         drop(a);\n+LL | |     });\n+   | |_____^ generator is not `Send`\n+   |\n+   = help: within `[generator@$DIR/not-send-sync.rs:24:17: 24:19]`, the trait `Send` is not implemented for `NotSend`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/not-send-sync.rs:27:9\n+   |\n+LL |         let a = NotSend;\n+   |             - has type `NotSend` which is not `Send`\n+LL |         yield;\n+   |         ^^^^^ yield occurs here, with `a` maybe used later\n+LL |         drop(a);\n+LL |     });\n+   |     - `a` is later dropped here\n+note: required by a bound in `assert_send`\n+  --> $DIR/not-send-sync.rs:15:23\n+   |\n+LL |     fn assert_send<T: Send>(_: T) {}\n+   |                       ^^^^ required by this bound in `assert_send`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "66f01ae37d81ac6f61956428b78343600028f527", "filename": "tests/ui/generator/not-send-sync.drop_tracking_mir.stderr", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fgenerator%2Fnot-send-sync.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fgenerator%2Fnot-send-sync.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fnot-send-sync.drop_tracking_mir.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -0,0 +1,42 @@\n+error: generator cannot be shared between threads safely\n+  --> $DIR/not-send-sync.rs:17:5\n+   |\n+LL |     assert_sync(|| {\n+   |     ^^^^^^^^^^^ generator is not `Sync`\n+   |\n+   = help: within `[generator@$DIR/not-send-sync.rs:17:17: 17:19]`, the trait `Sync` is not implemented for `NotSync`\n+note: generator is not `Sync` as this value is used across a yield\n+  --> $DIR/not-send-sync.rs:20:9\n+   |\n+LL |         let a = NotSync;\n+   |             - has type `NotSync` which is not `Sync`\n+LL |         yield;\n+   |         ^^^^^ yield occurs here, with `a` maybe used later\n+note: required by a bound in `assert_sync`\n+  --> $DIR/not-send-sync.rs:14:23\n+   |\n+LL |     fn assert_sync<T: Sync>(_: T) {}\n+   |                       ^^^^ required by this bound in `assert_sync`\n+\n+error: generator cannot be sent between threads safely\n+  --> $DIR/not-send-sync.rs:24:5\n+   |\n+LL |     assert_send(|| {\n+   |     ^^^^^^^^^^^ generator is not `Send`\n+   |\n+   = help: within `[generator@$DIR/not-send-sync.rs:24:17: 24:19]`, the trait `Send` is not implemented for `NotSend`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/not-send-sync.rs:27:9\n+   |\n+LL |         let a = NotSend;\n+   |             - has type `NotSend` which is not `Send`\n+LL |         yield;\n+   |         ^^^^^ yield occurs here, with `a` maybe used later\n+note: required by a bound in `assert_send`\n+  --> $DIR/not-send-sync.rs:15:23\n+   |\n+LL |     fn assert_send<T: Send>(_: T) {}\n+   |                       ^^^^ required by this bound in `assert_send`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "718fd42245ad31973cddf384da96719aacd0d286", "filename": "tests/ui/generator/not-send-sync.no_drop_tracking.stderr", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fgenerator%2Fnot-send-sync.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fgenerator%2Fnot-send-sync.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fnot-send-sync.no_drop_tracking.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -0,0 +1,60 @@\n+error: generator cannot be shared between threads safely\n+  --> $DIR/not-send-sync.rs:17:17\n+   |\n+LL |       assert_sync(|| {\n+   |  _________________^\n+LL | |\n+LL | |         let a = NotSync;\n+LL | |         yield;\n+LL | |         drop(a);\n+LL | |     });\n+   | |_____^ generator is not `Sync`\n+   |\n+   = help: within `[generator@$DIR/not-send-sync.rs:17:17: 17:19]`, the trait `Sync` is not implemented for `NotSync`\n+note: generator is not `Sync` as this value is used across a yield\n+  --> $DIR/not-send-sync.rs:20:9\n+   |\n+LL |         let a = NotSync;\n+   |             - has type `NotSync` which is not `Sync`\n+LL |         yield;\n+   |         ^^^^^ yield occurs here, with `a` maybe used later\n+LL |         drop(a);\n+LL |     });\n+   |     - `a` is later dropped here\n+note: required by a bound in `assert_sync`\n+  --> $DIR/not-send-sync.rs:14:23\n+   |\n+LL |     fn assert_sync<T: Sync>(_: T) {}\n+   |                       ^^^^ required by this bound in `assert_sync`\n+\n+error: generator cannot be sent between threads safely\n+  --> $DIR/not-send-sync.rs:24:17\n+   |\n+LL |       assert_send(|| {\n+   |  _________________^\n+LL | |\n+LL | |         let a = NotSend;\n+LL | |         yield;\n+LL | |         drop(a);\n+LL | |     });\n+   | |_____^ generator is not `Send`\n+   |\n+   = help: within `[generator@$DIR/not-send-sync.rs:24:17: 24:19]`, the trait `Send` is not implemented for `NotSend`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/not-send-sync.rs:27:9\n+   |\n+LL |         let a = NotSend;\n+   |             - has type `NotSend` which is not `Send`\n+LL |         yield;\n+   |         ^^^^^ yield occurs here, with `a` maybe used later\n+LL |         drop(a);\n+LL |     });\n+   |     - `a` is later dropped here\n+note: required by a bound in `assert_send`\n+  --> $DIR/not-send-sync.rs:15:23\n+   |\n+LL |     fn assert_send<T: Send>(_: T) {}\n+   |                       ^^^^ required by this bound in `assert_send`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "8794db452b4651bfd51c14cef7973b51dda6284b", "filename": "tests/ui/generator/not-send-sync.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fgenerator%2Fnot-send-sync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fgenerator%2Fnot-send-sync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fnot-send-sync.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -1,21 +1,30 @@\n+// revisions: no_drop_tracking drop_tracking drop_tracking_mir\n+// [drop_tracking] compile-flags: -Zdrop-tracking\n+// [drop_tracking_mir] compile-flags: -Zdrop-tracking-mir\n #![feature(generators)]\n+#![feature(negative_impls)]\n \n-use std::cell::Cell;\n+struct NotSend;\n+struct NotSync;\n+\n+impl !Send for NotSend {}\n+impl !Sync for NotSync {}\n \n fn main() {\n     fn assert_sync<T: Sync>(_: T) {}\n     fn assert_send<T: Send>(_: T) {}\n \n     assert_sync(|| {\n         //~^ ERROR: generator cannot be shared between threads safely\n-        let a = Cell::new(2);\n+        let a = NotSync;\n         yield;\n+        drop(a);\n     });\n \n-    let a = Cell::new(2);\n     assert_send(|| {\n-        //~^ ERROR: E0277\n-        drop(&a);\n+        //~^ ERROR: generator cannot be sent between threads safely\n+        let a = NotSend;\n         yield;\n+        drop(a);\n     });\n }"}, {"sha": "1711df729b8c087634f282025dc66e5a50bdb931", "filename": "tests/ui/generator/not-send-sync.stderr", "status": "removed", "additions": 0, "deletions": 58, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/7d4df2d30eb342af1ef136d83d70d281f34adcd7/tests%2Fui%2Fgenerator%2Fnot-send-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d4df2d30eb342af1ef136d83d70d281f34adcd7/tests%2Fui%2Fgenerator%2Fnot-send-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fnot-send-sync.stderr?ref=7d4df2d30eb342af1ef136d83d70d281f34adcd7", "patch": "@@ -1,58 +0,0 @@\n-error[E0277]: `Cell<i32>` cannot be shared between threads safely\n-  --> $DIR/not-send-sync.rs:16:17\n-   |\n-LL |       assert_send(|| {\n-   |  _____-----------_^\n-   | |     |\n-   | |     required by a bound introduced by this call\n-LL | |\n-LL | |         drop(&a);\n-LL | |         yield;\n-LL | |     });\n-   | |_____^ `Cell<i32>` cannot be shared between threads safely\n-   |\n-   = help: the trait `Sync` is not implemented for `Cell<i32>`\n-   = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` or `std::sync::atomic::AtomicI32` instead\n-   = note: required for `&Cell<i32>` to implement `Send`\n-note: required because it's used within this generator\n-  --> $DIR/not-send-sync.rs:16:17\n-   |\n-LL |     assert_send(|| {\n-   |                 ^^\n-note: required by a bound in `assert_send`\n-  --> $DIR/not-send-sync.rs:7:23\n-   |\n-LL |     fn assert_send<T: Send>(_: T) {}\n-   |                       ^^^^ required by this bound in `assert_send`\n-\n-error: generator cannot be shared between threads safely\n-  --> $DIR/not-send-sync.rs:9:17\n-   |\n-LL |       assert_sync(|| {\n-   |  _________________^\n-LL | |\n-LL | |         let a = Cell::new(2);\n-LL | |         yield;\n-LL | |     });\n-   | |_____^ generator is not `Sync`\n-   |\n-   = help: within `[generator@$DIR/not-send-sync.rs:9:17: 9:19]`, the trait `Sync` is not implemented for `Cell<i32>`\n-   = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` or `std::sync::atomic::AtomicI32` instead\n-note: generator is not `Sync` as this value is used across a yield\n-  --> $DIR/not-send-sync.rs:12:9\n-   |\n-LL |         let a = Cell::new(2);\n-   |             - has type `Cell<i32>` which is not `Sync`\n-LL |         yield;\n-   |         ^^^^^ yield occurs here, with `a` maybe used later\n-LL |     });\n-   |     - `a` is later dropped here\n-note: required by a bound in `assert_sync`\n-  --> $DIR/not-send-sync.rs:6:23\n-   |\n-LL |     fn assert_sync<T: Sync>(_: T) {}\n-   |                       ^^^^ required by this bound in `assert_sync`\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0277`."}, {"sha": "ef489088bf853f7cc6a6b8e7e597a59c0fbba82b", "filename": "tests/ui/generator/parent-expression.drop_tracking.stderr", "status": "added", "additions": 128, "deletions": 0, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fgenerator%2Fparent-expression.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fgenerator%2Fparent-expression.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fparent-expression.drop_tracking.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -0,0 +1,128 @@\n+error: generator cannot be sent between threads safely\n+  --> $DIR/parent-expression.rs:27:25\n+   |\n+LL |               assert_send(g);\n+   |                           ^ generator is not `Send`\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+   |\n+   = help: within `[generator@$DIR/parent-expression.rs:21:21: 21:28]`, the trait `Send` is not implemented for `derived_drop::Client`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/parent-expression.rs:25:22\n+   |\n+LL |               let g = move || match drop($name::Client { ..$name::Client::default() }) {\n+   |                                                            ------------------------ has type `derived_drop::Client` which is not `Send`\n+...\n+LL |                   _ => yield,\n+   |                        ^^^^^ yield occurs here, with `$name::Client::default()` maybe used later\n+LL |               };\n+   |               - `$name::Client::default()` is later dropped here\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+note: required by a bound in `assert_send`\n+  --> $DIR/parent-expression.rs:49:19\n+   |\n+LL | fn assert_send<T: Send>(_thing: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+   = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: generator cannot be sent between threads safely\n+  --> $DIR/parent-expression.rs:27:25\n+   |\n+LL |               assert_send(g);\n+   |                           ^ generator is not `Send`\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+   |\n+   = help: within `[generator@$DIR/parent-expression.rs:21:21: 21:28]`, the trait `Send` is not implemented for `significant_drop::Client`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/parent-expression.rs:25:22\n+   |\n+LL |               let g = move || match drop($name::Client { ..$name::Client::default() }) {\n+   |                                                            ------------------------ has type `significant_drop::Client` which is not `Send`\n+...\n+LL |                   _ => yield,\n+   |                        ^^^^^ yield occurs here, with `$name::Client::default()` maybe used later\n+LL |               };\n+   |               - `$name::Client::default()` is later dropped here\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+note: required by a bound in `assert_send`\n+  --> $DIR/parent-expression.rs:49:19\n+   |\n+LL | fn assert_send<T: Send>(_thing: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+   = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: generator cannot be sent between threads safely\n+  --> $DIR/parent-expression.rs:27:25\n+   |\n+LL |               assert_send(g);\n+   |                           ^ generator is not `Send`\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+   |\n+   = help: within `[generator@$DIR/parent-expression.rs:21:21: 21:28]`, the trait `Send` is not implemented for `insignificant_dtor::Client`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/parent-expression.rs:25:22\n+   |\n+LL |               let g = move || match drop($name::Client { ..$name::Client::default() }) {\n+   |                                                            ------------------------ has type `insignificant_dtor::Client` which is not `Send`\n+...\n+LL |                   _ => yield,\n+   |                        ^^^^^ yield occurs here, with `$name::Client::default()` maybe used later\n+LL |               };\n+   |               - `$name::Client::default()` is later dropped here\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+note: required by a bound in `assert_send`\n+  --> $DIR/parent-expression.rs:49:19\n+   |\n+LL | fn assert_send<T: Send>(_thing: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+   = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "bf814456427e03e299361f1cc26398a377e712c8", "filename": "tests/ui/generator/parent-expression.drop_tracking_mir.stderr", "status": "added", "additions": 122, "deletions": 0, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fgenerator%2Fparent-expression.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fgenerator%2Fparent-expression.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fparent-expression.drop_tracking_mir.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -0,0 +1,122 @@\n+error: generator cannot be sent between threads safely\n+  --> $DIR/parent-expression.rs:27:13\n+   |\n+LL |               assert_send(g);\n+   |               ^^^^^^^^^^^ generator is not `Send`\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+   |\n+   = help: within `[generator@$DIR/parent-expression.rs:21:21: 21:28]`, the trait `Send` is not implemented for `derived_drop::Client`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/parent-expression.rs:25:22\n+   |\n+LL |               let g = move || match drop($name::Client { ..$name::Client::default() }) {\n+   |                                                            ------------------------ has type `derived_drop::Client` which is not `Send`\n+...\n+LL |                   _ => yield,\n+   |                        ^^^^^ yield occurs here, with `$name::Client::default()` maybe used later\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+note: required by a bound in `assert_send`\n+  --> $DIR/parent-expression.rs:49:19\n+   |\n+LL | fn assert_send<T: Send>(_thing: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+   = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: generator cannot be sent between threads safely\n+  --> $DIR/parent-expression.rs:27:13\n+   |\n+LL |               assert_send(g);\n+   |               ^^^^^^^^^^^ generator is not `Send`\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+   |\n+   = help: within `[generator@$DIR/parent-expression.rs:21:21: 21:28]`, the trait `Send` is not implemented for `significant_drop::Client`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/parent-expression.rs:25:22\n+   |\n+LL |               let g = move || match drop($name::Client { ..$name::Client::default() }) {\n+   |                                                            ------------------------ has type `significant_drop::Client` which is not `Send`\n+...\n+LL |                   _ => yield,\n+   |                        ^^^^^ yield occurs here, with `$name::Client::default()` maybe used later\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+note: required by a bound in `assert_send`\n+  --> $DIR/parent-expression.rs:49:19\n+   |\n+LL | fn assert_send<T: Send>(_thing: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+   = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: generator cannot be sent between threads safely\n+  --> $DIR/parent-expression.rs:27:13\n+   |\n+LL |               assert_send(g);\n+   |               ^^^^^^^^^^^ generator is not `Send`\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+   |\n+   = help: within `[generator@$DIR/parent-expression.rs:21:21: 21:28]`, the trait `Send` is not implemented for `insignificant_dtor::Client`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/parent-expression.rs:25:22\n+   |\n+LL |               let g = move || match drop($name::Client { ..$name::Client::default() }) {\n+   |                                                            ------------------------ has type `insignificant_dtor::Client` which is not `Send`\n+...\n+LL |                   _ => yield,\n+   |                        ^^^^^ yield occurs here, with `$name::Client::default()` maybe used later\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+note: required by a bound in `assert_send`\n+  --> $DIR/parent-expression.rs:49:19\n+   |\n+LL | fn assert_send<T: Send>(_thing: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+   = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "2e1313a800487d3b6231d1038d3fa371c39bf240", "filename": "tests/ui/generator/parent-expression.no_drop_tracking.stderr", "status": "added", "additions": 334, "deletions": 0, "changes": 334, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fgenerator%2Fparent-expression.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fgenerator%2Fparent-expression.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fparent-expression.no_drop_tracking.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -0,0 +1,334 @@\n+error: generator cannot be sent between threads safely\n+  --> $DIR/parent-expression.rs:27:25\n+   |\n+LL |               assert_send(g);\n+   |                           ^ generator is not `Send`\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+   |\n+   = help: within `[generator@$DIR/parent-expression.rs:21:21: 21:28]`, the trait `Send` is not implemented for `copy::Client`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/parent-expression.rs:25:22\n+   |\n+LL |               let g = move || match drop($name::Client { ..$name::Client::default() }) {\n+   |                                                            ------------------------ has type `copy::Client` which is not `Send`\n+...\n+LL |                   _ => yield,\n+   |                        ^^^^^ yield occurs here, with `$name::Client::default()` maybe used later\n+LL |               };\n+   |               - `$name::Client::default()` is later dropped here\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+note: required by a bound in `assert_send`\n+  --> $DIR/parent-expression.rs:49:19\n+   |\n+LL | fn assert_send<T: Send>(_thing: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+   = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: generator cannot be sent between threads safely\n+  --> $DIR/parent-expression.rs:40:25\n+   |\n+LL |               assert_send(g);\n+   |                           ^ generator is not `Send`\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+   |\n+   = help: within `[generator@$DIR/parent-expression.rs:37:21: 37:28]`, the trait `Send` is not implemented for `copy::Client`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/parent-expression.rs:38:22\n+   |\n+LL |               let g = move || match drop($name::Client::default()) {\n+   |                                          ------------------------ has type `copy::Client` which is not `Send`\n+LL |                   _ => yield,\n+   |                        ^^^^^ yield occurs here, with `$name::Client::default()` maybe used later\n+LL |               };\n+   |               - `$name::Client::default()` is later dropped here\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+note: required by a bound in `assert_send`\n+  --> $DIR/parent-expression.rs:49:19\n+   |\n+LL | fn assert_send<T: Send>(_thing: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+   = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: generator cannot be sent between threads safely\n+  --> $DIR/parent-expression.rs:27:25\n+   |\n+LL |               assert_send(g);\n+   |                           ^ generator is not `Send`\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+   |\n+   = help: within `[generator@$DIR/parent-expression.rs:21:21: 21:28]`, the trait `Send` is not implemented for `derived_drop::Client`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/parent-expression.rs:25:22\n+   |\n+LL |               let g = move || match drop($name::Client { ..$name::Client::default() }) {\n+   |                                                            ------------------------ has type `derived_drop::Client` which is not `Send`\n+...\n+LL |                   _ => yield,\n+   |                        ^^^^^ yield occurs here, with `$name::Client::default()` maybe used later\n+LL |               };\n+   |               - `$name::Client::default()` is later dropped here\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+note: required by a bound in `assert_send`\n+  --> $DIR/parent-expression.rs:49:19\n+   |\n+LL | fn assert_send<T: Send>(_thing: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+   = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: generator cannot be sent between threads safely\n+  --> $DIR/parent-expression.rs:40:25\n+   |\n+LL |               assert_send(g);\n+   |                           ^ generator is not `Send`\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+   |\n+   = help: within `[generator@$DIR/parent-expression.rs:37:21: 37:28]`, the trait `Send` is not implemented for `derived_drop::Client`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/parent-expression.rs:38:22\n+   |\n+LL |               let g = move || match drop($name::Client::default()) {\n+   |                                          ------------------------ has type `derived_drop::Client` which is not `Send`\n+LL |                   _ => yield,\n+   |                        ^^^^^ yield occurs here, with `$name::Client::default()` maybe used later\n+LL |               };\n+   |               - `$name::Client::default()` is later dropped here\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+note: required by a bound in `assert_send`\n+  --> $DIR/parent-expression.rs:49:19\n+   |\n+LL | fn assert_send<T: Send>(_thing: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+   = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: generator cannot be sent between threads safely\n+  --> $DIR/parent-expression.rs:27:25\n+   |\n+LL |               assert_send(g);\n+   |                           ^ generator is not `Send`\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+   |\n+   = help: within `[generator@$DIR/parent-expression.rs:21:21: 21:28]`, the trait `Send` is not implemented for `significant_drop::Client`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/parent-expression.rs:25:22\n+   |\n+LL |               let g = move || match drop($name::Client { ..$name::Client::default() }) {\n+   |                                                            ------------------------ has type `significant_drop::Client` which is not `Send`\n+...\n+LL |                   _ => yield,\n+   |                        ^^^^^ yield occurs here, with `$name::Client::default()` maybe used later\n+LL |               };\n+   |               - `$name::Client::default()` is later dropped here\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+note: required by a bound in `assert_send`\n+  --> $DIR/parent-expression.rs:49:19\n+   |\n+LL | fn assert_send<T: Send>(_thing: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+   = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: generator cannot be sent between threads safely\n+  --> $DIR/parent-expression.rs:40:25\n+   |\n+LL |               assert_send(g);\n+   |                           ^ generator is not `Send`\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+   |\n+   = help: within `[generator@$DIR/parent-expression.rs:37:21: 37:28]`, the trait `Send` is not implemented for `significant_drop::Client`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/parent-expression.rs:38:22\n+   |\n+LL |               let g = move || match drop($name::Client::default()) {\n+   |                                          ------------------------ has type `significant_drop::Client` which is not `Send`\n+LL |                   _ => yield,\n+   |                        ^^^^^ yield occurs here, with `$name::Client::default()` maybe used later\n+LL |               };\n+   |               - `$name::Client::default()` is later dropped here\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+note: required by a bound in `assert_send`\n+  --> $DIR/parent-expression.rs:49:19\n+   |\n+LL | fn assert_send<T: Send>(_thing: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+   = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: generator cannot be sent between threads safely\n+  --> $DIR/parent-expression.rs:27:25\n+   |\n+LL |               assert_send(g);\n+   |                           ^ generator is not `Send`\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+   |\n+   = help: within `[generator@$DIR/parent-expression.rs:21:21: 21:28]`, the trait `Send` is not implemented for `insignificant_dtor::Client`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/parent-expression.rs:25:22\n+   |\n+LL |               let g = move || match drop($name::Client { ..$name::Client::default() }) {\n+   |                                                            ------------------------ has type `insignificant_dtor::Client` which is not `Send`\n+...\n+LL |                   _ => yield,\n+   |                        ^^^^^ yield occurs here, with `$name::Client::default()` maybe used later\n+LL |               };\n+   |               - `$name::Client::default()` is later dropped here\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+note: required by a bound in `assert_send`\n+  --> $DIR/parent-expression.rs:49:19\n+   |\n+LL | fn assert_send<T: Send>(_thing: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+   = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: generator cannot be sent between threads safely\n+  --> $DIR/parent-expression.rs:40:25\n+   |\n+LL |               assert_send(g);\n+   |                           ^ generator is not `Send`\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+   |\n+   = help: within `[generator@$DIR/parent-expression.rs:37:21: 37:28]`, the trait `Send` is not implemented for `insignificant_dtor::Client`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/parent-expression.rs:38:22\n+   |\n+LL |               let g = move || match drop($name::Client::default()) {\n+   |                                          ------------------------ has type `insignificant_dtor::Client` which is not `Send`\n+LL |                   _ => yield,\n+   |                        ^^^^^ yield occurs here, with `$name::Client::default()` maybe used later\n+LL |               };\n+   |               - `$name::Client::default()` is later dropped here\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+note: required by a bound in `assert_send`\n+  --> $DIR/parent-expression.rs:49:19\n+   |\n+LL | fn assert_send<T: Send>(_thing: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+   = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 8 previous errors\n+"}, {"sha": "239034e3d4e8a99943a55a0593656d9e4da31267", "filename": "tests/ui/generator/parent-expression.rs", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fgenerator%2Fparent-expression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fgenerator%2Fparent-expression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fparent-expression.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -0,0 +1,77 @@\n+// revisions: no_drop_tracking drop_tracking drop_tracking_mir\n+// [drop_tracking] compile-flags: -Zdrop-tracking\n+// [drop_tracking_mir] compile-flags: -Zdrop-tracking-mir\n+\n+#![feature(generators, negative_impls, rustc_attrs)]\n+\n+macro_rules! type_combinations {\n+    (\n+        $( $name:ident => { $( $tt:tt )* } );* $(;)?\n+    ) => { $(\n+        mod $name {\n+            $( $tt )*\n+\n+            impl !Sync for Client {}\n+            impl !Send for Client {}\n+        }\n+\n+        // Struct update syntax. This fails because the Client used in the update is considered\n+        // dropped *after* the yield.\n+        {\n+            let g = move || match drop($name::Client { ..$name::Client::default() }) {\n+            //~^ `significant_drop::Client` which is not `Send`\n+            //~| `insignificant_dtor::Client` which is not `Send`\n+            //~| `derived_drop::Client` which is not `Send`\n+                _ => yield,\n+            };\n+            assert_send(g);\n+            //~^ ERROR cannot be sent between threads\n+            //~| ERROR cannot be sent between threads\n+            //~| ERROR cannot be sent between threads\n+            //[no_drop_tracking]~^^^^ ERROR cannot be sent between threads\n+        }\n+\n+        // Simple owned value. This works because the Client is considered moved into `drop`,\n+        // even though the temporary expression doesn't end until after the yield.\n+        {\n+            let g = move || match drop($name::Client::default()) {\n+                _ => yield,\n+            };\n+            assert_send(g);\n+            //[no_drop_tracking]~^ ERROR cannot be sent between threads\n+            //[no_drop_tracking]~| ERROR cannot be sent between threads\n+            //[no_drop_tracking]~| ERROR cannot be sent between threads\n+            //[no_drop_tracking]~| ERROR cannot be sent between threads\n+        }\n+    )* }\n+}\n+\n+fn assert_send<T: Send>(_thing: T) {}\n+\n+fn main() {\n+    type_combinations!(\n+        // OK\n+        copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+        // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+        // this has no `Drop` impl and only the drops of the fields are observable.\n+        // FIXME: this should compile.\n+        derived_drop => { #[derive(Default)] pub struct Client { pub nickname: String } };\n+        // NOT OK\n+        significant_drop => {\n+            #[derive(Default)]\n+            pub struct Client;\n+            impl Drop for Client {\n+                fn drop(&mut self) {}\n+            }\n+        };\n+        // NOT OK (we need to agree with MIR borrowck)\n+        insignificant_dtor => {\n+            #[derive(Default)]\n+            #[rustc_insignificant_dtor]\n+            pub struct Client;\n+            impl Drop for Client {\n+                fn drop(&mut self) {}\n+            }\n+        };\n+    );\n+}"}, {"sha": "f1b25cb8c34e979beda45ce6e41f35c3d7ddb0e5", "filename": "tests/ui/generator/partial-drop.drop_tracking.stderr", "status": "renamed", "additions": 10, "deletions": 41, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fgenerator%2Fpartial-drop.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fgenerator%2Fpartial-drop.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fpartial-drop.drop_tracking.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -1,19 +1,18 @@\n error: generator cannot be sent between threads safely\n-  --> $DIR/partial-drop.rs:14:17\n+  --> $DIR/partial-drop.rs:17:17\n    |\n LL |       assert_send(|| {\n    |  _________________^\n LL | |\n-LL | |         // FIXME: it would be nice to make this work.\n LL | |         let guard = Bar { foo: Foo, x: 42 };\n LL | |         drop(guard.foo);\n LL | |         yield;\n LL | |     });\n    | |_____^ generator is not `Send`\n    |\n-   = help: within `[generator@$DIR/partial-drop.rs:14:17: 14:19]`, the trait `Send` is not implemented for `Foo`\n+   = help: within `[generator@$DIR/partial-drop.rs:17:17: 17:19]`, the trait `Send` is not implemented for `Foo`\n note: generator is not `Send` as this value is used across a yield\n-  --> $DIR/partial-drop.rs:19:9\n+  --> $DIR/partial-drop.rs:21:9\n    |\n LL |         let guard = Bar { foo: Foo, x: 42 };\n    |             ----- has type `Bar` which is not `Send`\n@@ -23,25 +22,25 @@ LL |         yield;\n LL |     });\n    |     - `guard` is later dropped here\n note: required by a bound in `assert_send`\n-  --> $DIR/partial-drop.rs:42:19\n+  --> $DIR/partial-drop.rs:33:19\n    |\n LL | fn assert_send<T: Send>(_: T) {}\n    |                   ^^^^ required by this bound in `assert_send`\n \n error: generator cannot be sent between threads safely\n-  --> $DIR/partial-drop.rs:22:17\n+  --> $DIR/partial-drop.rs:24:17\n    |\n LL |       assert_send(|| {\n    |  _________________^\n LL | |\n-LL | |         // FIXME: it would be nice to make this work.\n LL | |         let guard = Bar { foo: Foo, x: 42 };\n-...  |\n+LL | |         let Bar { foo, x } = guard;\n+LL | |         drop(foo);\n LL | |         yield;\n LL | |     });\n    | |_____^ generator is not `Send`\n    |\n-   = help: within `[generator@$DIR/partial-drop.rs:22:17: 22:19]`, the trait `Send` is not implemented for `Foo`\n+   = help: within `[generator@$DIR/partial-drop.rs:24:17: 24:19]`, the trait `Send` is not implemented for `Foo`\n note: generator is not `Send` as this value is used across a yield\n   --> $DIR/partial-drop.rs:29:9\n    |\n@@ -53,40 +52,10 @@ LL |         yield;\n LL |     });\n    |     - `guard` is later dropped here\n note: required by a bound in `assert_send`\n-  --> $DIR/partial-drop.rs:42:19\n+  --> $DIR/partial-drop.rs:33:19\n    |\n LL | fn assert_send<T: Send>(_: T) {}\n    |                   ^^^^ required by this bound in `assert_send`\n \n-error: generator cannot be sent between threads safely\n-  --> $DIR/partial-drop.rs:32:17\n-   |\n-LL |       assert_send(|| {\n-   |  _________________^\n-LL | |\n-LL | |         // FIXME: it would be nice to make this work.\n-LL | |         let guard = Bar { foo: Foo, x: 42 };\n-...  |\n-LL | |         yield;\n-LL | |     });\n-   | |_____^ generator is not `Send`\n-   |\n-   = help: within `[generator@$DIR/partial-drop.rs:32:17: 32:19]`, the trait `Send` is not implemented for `Foo`\n-note: generator is not `Send` as this value is used across a yield\n-  --> $DIR/partial-drop.rs:38:9\n-   |\n-LL |         let guard = Bar { foo: Foo, x: 42 };\n-   |             ----- has type `Bar` which is not `Send`\n-...\n-LL |         yield;\n-   |         ^^^^^ yield occurs here, with `guard` maybe used later\n-LL |     });\n-   |     - `guard` is later dropped here\n-note: required by a bound in `assert_send`\n-  --> $DIR/partial-drop.rs:42:19\n-   |\n-LL | fn assert_send<T: Send>(_: T) {}\n-   |                   ^^^^ required by this bound in `assert_send`\n-\n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n ", "previous_filename": "tests/ui/generator/partial-drop.stderr"}, {"sha": "91152b5ea6f3dfa5e260e34c5e93964acb5e7ec1", "filename": "tests/ui/generator/partial-drop.no_drop_tracking.stderr", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fgenerator%2Fpartial-drop.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fgenerator%2Fpartial-drop.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fpartial-drop.no_drop_tracking.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -0,0 +1,61 @@\n+error: generator cannot be sent between threads safely\n+  --> $DIR/partial-drop.rs:17:17\n+   |\n+LL |       assert_send(|| {\n+   |  _________________^\n+LL | |\n+LL | |         let guard = Bar { foo: Foo, x: 42 };\n+LL | |         drop(guard.foo);\n+LL | |         yield;\n+LL | |     });\n+   | |_____^ generator is not `Send`\n+   |\n+   = help: within `[generator@$DIR/partial-drop.rs:17:17: 17:19]`, the trait `Send` is not implemented for `Foo`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/partial-drop.rs:21:9\n+   |\n+LL |         let guard = Bar { foo: Foo, x: 42 };\n+   |             ----- has type `Bar` which is not `Send`\n+LL |         drop(guard.foo);\n+LL |         yield;\n+   |         ^^^^^ yield occurs here, with `guard` maybe used later\n+LL |     });\n+   |     - `guard` is later dropped here\n+note: required by a bound in `assert_send`\n+  --> $DIR/partial-drop.rs:33:19\n+   |\n+LL | fn assert_send<T: Send>(_: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+\n+error: generator cannot be sent between threads safely\n+  --> $DIR/partial-drop.rs:24:17\n+   |\n+LL |       assert_send(|| {\n+   |  _________________^\n+LL | |\n+LL | |         let guard = Bar { foo: Foo, x: 42 };\n+LL | |         let Bar { foo, x } = guard;\n+LL | |         drop(foo);\n+LL | |         yield;\n+LL | |     });\n+   | |_____^ generator is not `Send`\n+   |\n+   = help: within `[generator@$DIR/partial-drop.rs:24:17: 24:19]`, the trait `Send` is not implemented for `Foo`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/partial-drop.rs:29:9\n+   |\n+LL |         let Bar { foo, x } = guard;\n+   |                   --- has type `Foo` which is not `Send`\n+LL |         drop(foo);\n+LL |         yield;\n+   |         ^^^^^ yield occurs here, with `foo` maybe used later\n+LL |     });\n+   |     - `foo` is later dropped here\n+note: required by a bound in `assert_send`\n+  --> $DIR/partial-drop.rs:33:19\n+   |\n+LL | fn assert_send<T: Send>(_: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "1d3ae075d43afb448beb8ea97070d1e8a818d164", "filename": "tests/ui/generator/partial-drop.rs", "status": "modified", "additions": 6, "deletions": 15, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fgenerator%2Fpartial-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fgenerator%2Fpartial-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fpartial-drop.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -1,4 +1,7 @@\n-// compile-flags: -Zdrop-tracking\n+// revisions: no_drop_tracking drop_tracking drop_tracking_mir\n+// [drop_tracking] compile-flags: -Zdrop-tracking\n+// [drop_tracking_mir] compile-flags: -Zdrop-tracking-mir\n+// [drop_tracking_mir] check-pass\n \n #![feature(negative_impls, generators)]\n \n@@ -12,26 +15,14 @@ struct Bar {\n \n fn main() {\n     assert_send(|| {\n-        //~^ ERROR generator cannot be sent between threads safely\n-        // FIXME: it would be nice to make this work.\n+        //[no_drop_tracking,drop_tracking]~^ ERROR generator cannot be sent between threads safely\n         let guard = Bar { foo: Foo, x: 42 };\n         drop(guard.foo);\n         yield;\n     });\n \n     assert_send(|| {\n-        //~^ ERROR generator cannot be sent between threads safely\n-        // FIXME: it would be nice to make this work.\n-        let guard = Bar { foo: Foo, x: 42 };\n-        drop(guard);\n-        guard.foo = Foo;\n-        guard.x = 23;\n-        yield;\n-    });\n-\n-    assert_send(|| {\n-        //~^ ERROR generator cannot be sent between threads safely\n-        // FIXME: it would be nice to make this work.\n+        //[no_drop_tracking,drop_tracking]~^ ERROR generator cannot be sent between threads safely\n         let guard = Bar { foo: Foo, x: 42 };\n         let Bar { foo, x } = guard;\n         drop(foo);"}, {"sha": "7d0a201699b5c734f3688bdff2fb88717d516f0e", "filename": "tests/ui/generator/print/generator-print-verbose-1.drop_tracking.stderr", "status": "renamed", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.drop_tracking.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -1,13 +1,13 @@\n error: generator cannot be sent between threads safely\n-  --> $DIR/generator-print-verbose-1.rs:37:18\n+  --> $DIR/generator-print-verbose-1.rs:40:18\n    |\n LL |     require_send(send_gen);\n    |                  ^^^^^^^^ generator is not `Send`\n    |\n    = help: the trait `Sync` is not implemented for `RefCell<i32>`\n    = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` instead\n note: generator is not `Send` as this value is used across a yield\n-  --> $DIR/generator-print-verbose-1.rs:35:9\n+  --> $DIR/generator-print-verbose-1.rs:38:9\n    |\n LL |         let _non_send_gen = make_non_send_generator();\n    |             ------------- has type `Opaque(DefId(0:34 ~ generator_print_verbose_1[749a]::make_non_send_generator::{opaque#0}), [])` which is not `Send`\n@@ -16,13 +16,13 @@ LL |         yield;\n LL |     };\n    |     - `_non_send_gen` is later dropped here\n note: required by a bound in `require_send`\n-  --> $DIR/generator-print-verbose-1.rs:26:25\n+  --> $DIR/generator-print-verbose-1.rs:29:25\n    |\n LL | fn require_send(_: impl Send) {}\n    |                         ^^^^ required by this bound in `require_send`\n \n error[E0277]: `RefCell<i32>` cannot be shared between threads safely\n-  --> $DIR/generator-print-verbose-1.rs:56:18\n+  --> $DIR/generator-print-verbose-1.rs:59:18\n    |\n LL |     require_send(send_gen);\n    |     ------------ ^^^^^^^^ `RefCell<i32>` cannot be shared between threads safely\n@@ -33,28 +33,28 @@ LL |     require_send(send_gen);\n    = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` instead\n    = note: required for `Arc<RefCell<i32>>` to implement `Send`\n note: required because it's used within this generator\n-  --> $DIR/generator-print-verbose-1.rs:42:5\n+  --> $DIR/generator-print-verbose-1.rs:45:5\n    |\n LL |     || {\n    |     ^^\n note: required because it appears within the type `Opaque(DefId(0:35 ~ generator_print_verbose_1[749a]::make_gen2::{opaque#0}), [Arc<RefCell<i32>>])`\n-  --> $DIR/generator-print-verbose-1.rs:41:30\n+  --> $DIR/generator-print-verbose-1.rs:44:30\n    |\n LL | pub fn make_gen2<T>(t: T) -> impl Generator<Return = T> {\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: required because it appears within the type `Opaque(DefId(0:36 ~ generator_print_verbose_1[749a]::make_non_send_generator2::{opaque#0}), [])`\n-  --> $DIR/generator-print-verbose-1.rs:47:34\n+  --> $DIR/generator-print-verbose-1.rs:50:34\n    |\n LL | fn make_non_send_generator2() -> impl Generator<Return = Arc<RefCell<i32>>> {\n    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: required because it captures the following types: `Opaque(DefId(0:36 ~ generator_print_verbose_1[749a]::make_non_send_generator2::{opaque#0}), [])`, `()`\n note: required because it's used within this generator\n-  --> $DIR/generator-print-verbose-1.rs:52:20\n+  --> $DIR/generator-print-verbose-1.rs:55:20\n    |\n LL |     let send_gen = || {\n    |                    ^^\n note: required by a bound in `require_send`\n-  --> $DIR/generator-print-verbose-1.rs:26:25\n+  --> $DIR/generator-print-verbose-1.rs:29:25\n    |\n LL | fn require_send(_: impl Send) {}\n    |                         ^^^^ required by this bound in `require_send`", "previous_filename": "tests/ui/generator/print/generator-print-verbose-1.stderr"}, {"sha": "c045b1441c146e127936fae446f8f25980c06e08", "filename": "tests/ui/generator/print/generator-print-verbose-1.drop_tracking_mir.stderr", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.drop_tracking_mir.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -0,0 +1,60 @@\n+error: generator cannot be sent between threads safely\n+  --> $DIR/generator-print-verbose-1.rs:40:5\n+   |\n+LL |     require_send(send_gen);\n+   |     ^^^^^^^^^^^^ generator is not `Send`\n+   |\n+   = help: the trait `Sync` is not implemented for `RefCell<i32>`\n+   = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` instead\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/generator-print-verbose-1.rs:38:9\n+   |\n+LL |         let _non_send_gen = make_non_send_generator();\n+   |             ------------- has type `Opaque(DefId(0:34 ~ generator_print_verbose_1[749a]::make_non_send_generator::{opaque#0}), [])` which is not `Send`\n+LL |         yield;\n+   |         ^^^^^ yield occurs here, with `_non_send_gen` maybe used later\n+note: required by a bound in `require_send`\n+  --> $DIR/generator-print-verbose-1.rs:29:25\n+   |\n+LL | fn require_send(_: impl Send) {}\n+   |                         ^^^^ required by this bound in `require_send`\n+\n+error[E0277]: `RefCell<i32>` cannot be shared between threads safely\n+  --> $DIR/generator-print-verbose-1.rs:59:5\n+   |\n+LL |     require_send(send_gen);\n+   |     ^^^^^^^^^^^^ `RefCell<i32>` cannot be shared between threads safely\n+   |\n+   = help: the trait `Sync` is not implemented for `RefCell<i32>`\n+   = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` instead\n+   = note: required for `Arc<RefCell<i32>>` to implement `Send`\n+note: required because it's used within this generator\n+  --> $DIR/generator-print-verbose-1.rs:45:5\n+   |\n+LL |     || {\n+   |     ^^\n+note: required because it appears within the type `Opaque(DefId(0:35 ~ generator_print_verbose_1[749a]::make_gen2::{opaque#0}), [Arc<RefCell<i32>>])`\n+  --> $DIR/generator-print-verbose-1.rs:44:30\n+   |\n+LL | pub fn make_gen2<T>(t: T) -> impl Generator<Return = T> {\n+   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: required because it appears within the type `Opaque(DefId(0:36 ~ generator_print_verbose_1[749a]::make_non_send_generator2::{opaque#0}), [])`\n+  --> $DIR/generator-print-verbose-1.rs:50:34\n+   |\n+LL | fn make_non_send_generator2() -> impl Generator<Return = Arc<RefCell<i32>>> {\n+   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: required because it captures the following types: `Opaque(DefId(0:36 ~ generator_print_verbose_1[749a]::make_non_send_generator2::{opaque#0}), [])`\n+note: required because it's used within this generator\n+  --> $DIR/generator-print-verbose-1.rs:55:20\n+   |\n+LL |     let send_gen = || {\n+   |                    ^^\n+note: required by a bound in `require_send`\n+  --> $DIR/generator-print-verbose-1.rs:29:25\n+   |\n+LL | fn require_send(_: impl Send) {}\n+   |                         ^^^^ required by this bound in `require_send`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "7d0a201699b5c734f3688bdff2fb88717d516f0e", "filename": "tests/ui/generator/print/generator-print-verbose-1.no_drop_tracking.stderr", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.no_drop_tracking.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -0,0 +1,64 @@\n+error: generator cannot be sent between threads safely\n+  --> $DIR/generator-print-verbose-1.rs:40:18\n+   |\n+LL |     require_send(send_gen);\n+   |                  ^^^^^^^^ generator is not `Send`\n+   |\n+   = help: the trait `Sync` is not implemented for `RefCell<i32>`\n+   = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` instead\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/generator-print-verbose-1.rs:38:9\n+   |\n+LL |         let _non_send_gen = make_non_send_generator();\n+   |             ------------- has type `Opaque(DefId(0:34 ~ generator_print_verbose_1[749a]::make_non_send_generator::{opaque#0}), [])` which is not `Send`\n+LL |         yield;\n+   |         ^^^^^ yield occurs here, with `_non_send_gen` maybe used later\n+LL |     };\n+   |     - `_non_send_gen` is later dropped here\n+note: required by a bound in `require_send`\n+  --> $DIR/generator-print-verbose-1.rs:29:25\n+   |\n+LL | fn require_send(_: impl Send) {}\n+   |                         ^^^^ required by this bound in `require_send`\n+\n+error[E0277]: `RefCell<i32>` cannot be shared between threads safely\n+  --> $DIR/generator-print-verbose-1.rs:59:18\n+   |\n+LL |     require_send(send_gen);\n+   |     ------------ ^^^^^^^^ `RefCell<i32>` cannot be shared between threads safely\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+   = help: the trait `Sync` is not implemented for `RefCell<i32>`\n+   = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` instead\n+   = note: required for `Arc<RefCell<i32>>` to implement `Send`\n+note: required because it's used within this generator\n+  --> $DIR/generator-print-verbose-1.rs:45:5\n+   |\n+LL |     || {\n+   |     ^^\n+note: required because it appears within the type `Opaque(DefId(0:35 ~ generator_print_verbose_1[749a]::make_gen2::{opaque#0}), [Arc<RefCell<i32>>])`\n+  --> $DIR/generator-print-verbose-1.rs:44:30\n+   |\n+LL | pub fn make_gen2<T>(t: T) -> impl Generator<Return = T> {\n+   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: required because it appears within the type `Opaque(DefId(0:36 ~ generator_print_verbose_1[749a]::make_non_send_generator2::{opaque#0}), [])`\n+  --> $DIR/generator-print-verbose-1.rs:50:34\n+   |\n+LL | fn make_non_send_generator2() -> impl Generator<Return = Arc<RefCell<i32>>> {\n+   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: required because it captures the following types: `Opaque(DefId(0:36 ~ generator_print_verbose_1[749a]::make_non_send_generator2::{opaque#0}), [])`, `()`\n+note: required because it's used within this generator\n+  --> $DIR/generator-print-verbose-1.rs:55:20\n+   |\n+LL |     let send_gen = || {\n+   |                    ^^\n+note: required by a bound in `require_send`\n+  --> $DIR/generator-print-verbose-1.rs:29:25\n+   |\n+LL | fn require_send(_: impl Send) {}\n+   |                         ^^^^ required by this bound in `require_send`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "c7052c7d1b04d5fa9ce393a2f1e3c60e17a6c28f", "filename": "tests/ui/generator/print/generator-print-verbose-1.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -1,3 +1,6 @@\n+// revisions: no_drop_tracking drop_tracking drop_tracking_mir\n+// [drop_tracking] compile-flags: -Zdrop-tracking\n+// [drop_tracking_mir] compile-flags: -Zdrop-tracking-mir\n // compile-flags: -Zverbose\n \n // Same as: tests/ui/generator/issue-68112.stderr\n@@ -12,7 +15,7 @@ use std::{\n };\n \n pub struct Ready<T>(Option<T>);\n-impl<T> Generator<()> for Ready<T> {\n+impl<T: Unpin> Generator<()> for Ready<T> {\n     type Return = T;\n     type Yield = ();\n     fn resume(mut self: Pin<&mut Self>, _args: ()) -> GeneratorState<(), T> {"}, {"sha": "1f2e530f6f5779c916c9eb0f2ff799dc93fe4952", "filename": "tests/ui/generator/print/generator-print-verbose-2.drop_tracking.stderr", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-2.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-2.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-2.drop_tracking.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -0,0 +1,60 @@\n+error: generator cannot be shared between threads safely\n+  --> $DIR/generator-print-verbose-2.rs:20:17\n+   |\n+LL |       assert_sync(|| {\n+   |  _________________^\n+LL | |\n+LL | |         let a = NotSync;\n+LL | |         yield;\n+LL | |         drop(a);\n+LL | |     });\n+   | |_____^ generator is not `Sync`\n+   |\n+   = help: within `[main::{closure#0} upvar_tys=() {NotSync, ()}]`, the trait `Sync` is not implemented for `NotSync`\n+note: generator is not `Sync` as this value is used across a yield\n+  --> $DIR/generator-print-verbose-2.rs:23:9\n+   |\n+LL |         let a = NotSync;\n+   |             - has type `NotSync` which is not `Sync`\n+LL |         yield;\n+   |         ^^^^^ yield occurs here, with `a` maybe used later\n+LL |         drop(a);\n+LL |     });\n+   |     - `a` is later dropped here\n+note: required by a bound in `assert_sync`\n+  --> $DIR/generator-print-verbose-2.rs:17:23\n+   |\n+LL |     fn assert_sync<T: Sync>(_: T) {}\n+   |                       ^^^^ required by this bound in `assert_sync`\n+\n+error: generator cannot be sent between threads safely\n+  --> $DIR/generator-print-verbose-2.rs:27:17\n+   |\n+LL |       assert_send(|| {\n+   |  _________________^\n+LL | |\n+LL | |         let a = NotSend;\n+LL | |         yield;\n+LL | |         drop(a);\n+LL | |     });\n+   | |_____^ generator is not `Send`\n+   |\n+   = help: within `[main::{closure#1} upvar_tys=() {NotSend, ()}]`, the trait `Send` is not implemented for `NotSend`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/generator-print-verbose-2.rs:30:9\n+   |\n+LL |         let a = NotSend;\n+   |             - has type `NotSend` which is not `Send`\n+LL |         yield;\n+   |         ^^^^^ yield occurs here, with `a` maybe used later\n+LL |         drop(a);\n+LL |     });\n+   |     - `a` is later dropped here\n+note: required by a bound in `assert_send`\n+  --> $DIR/generator-print-verbose-2.rs:18:23\n+   |\n+LL |     fn assert_send<T: Send>(_: T) {}\n+   |                       ^^^^ required by this bound in `assert_send`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "354369f19540261deea6406c870c47fc1e2d5134", "filename": "tests/ui/generator/print/generator-print-verbose-2.drop_tracking_mir.stderr", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-2.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-2.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-2.drop_tracking_mir.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -0,0 +1,42 @@\n+error: generator cannot be shared between threads safely\n+  --> $DIR/generator-print-verbose-2.rs:20:5\n+   |\n+LL |     assert_sync(|| {\n+   |     ^^^^^^^^^^^ generator is not `Sync`\n+   |\n+   = help: within `[main::{closure#0} upvar_tys=() [main::{closure#0}]]`, the trait `Sync` is not implemented for `NotSync`\n+note: generator is not `Sync` as this value is used across a yield\n+  --> $DIR/generator-print-verbose-2.rs:23:9\n+   |\n+LL |         let a = NotSync;\n+   |             - has type `NotSync` which is not `Sync`\n+LL |         yield;\n+   |         ^^^^^ yield occurs here, with `a` maybe used later\n+note: required by a bound in `assert_sync`\n+  --> $DIR/generator-print-verbose-2.rs:17:23\n+   |\n+LL |     fn assert_sync<T: Sync>(_: T) {}\n+   |                       ^^^^ required by this bound in `assert_sync`\n+\n+error: generator cannot be sent between threads safely\n+  --> $DIR/generator-print-verbose-2.rs:27:5\n+   |\n+LL |     assert_send(|| {\n+   |     ^^^^^^^^^^^ generator is not `Send`\n+   |\n+   = help: within `[main::{closure#1} upvar_tys=() [main::{closure#1}]]`, the trait `Send` is not implemented for `NotSend`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/generator-print-verbose-2.rs:30:9\n+   |\n+LL |         let a = NotSend;\n+   |             - has type `NotSend` which is not `Send`\n+LL |         yield;\n+   |         ^^^^^ yield occurs here, with `a` maybe used later\n+note: required by a bound in `assert_send`\n+  --> $DIR/generator-print-verbose-2.rs:18:23\n+   |\n+LL |     fn assert_send<T: Send>(_: T) {}\n+   |                       ^^^^ required by this bound in `assert_send`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "1f2e530f6f5779c916c9eb0f2ff799dc93fe4952", "filename": "tests/ui/generator/print/generator-print-verbose-2.no_drop_tracking.stderr", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-2.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-2.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-2.no_drop_tracking.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -0,0 +1,60 @@\n+error: generator cannot be shared between threads safely\n+  --> $DIR/generator-print-verbose-2.rs:20:17\n+   |\n+LL |       assert_sync(|| {\n+   |  _________________^\n+LL | |\n+LL | |         let a = NotSync;\n+LL | |         yield;\n+LL | |         drop(a);\n+LL | |     });\n+   | |_____^ generator is not `Sync`\n+   |\n+   = help: within `[main::{closure#0} upvar_tys=() {NotSync, ()}]`, the trait `Sync` is not implemented for `NotSync`\n+note: generator is not `Sync` as this value is used across a yield\n+  --> $DIR/generator-print-verbose-2.rs:23:9\n+   |\n+LL |         let a = NotSync;\n+   |             - has type `NotSync` which is not `Sync`\n+LL |         yield;\n+   |         ^^^^^ yield occurs here, with `a` maybe used later\n+LL |         drop(a);\n+LL |     });\n+   |     - `a` is later dropped here\n+note: required by a bound in `assert_sync`\n+  --> $DIR/generator-print-verbose-2.rs:17:23\n+   |\n+LL |     fn assert_sync<T: Sync>(_: T) {}\n+   |                       ^^^^ required by this bound in `assert_sync`\n+\n+error: generator cannot be sent between threads safely\n+  --> $DIR/generator-print-verbose-2.rs:27:17\n+   |\n+LL |       assert_send(|| {\n+   |  _________________^\n+LL | |\n+LL | |         let a = NotSend;\n+LL | |         yield;\n+LL | |         drop(a);\n+LL | |     });\n+   | |_____^ generator is not `Send`\n+   |\n+   = help: within `[main::{closure#1} upvar_tys=() {NotSend, ()}]`, the trait `Send` is not implemented for `NotSend`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/generator-print-verbose-2.rs:30:9\n+   |\n+LL |         let a = NotSend;\n+   |             - has type `NotSend` which is not `Send`\n+LL |         yield;\n+   |         ^^^^^ yield occurs here, with `a` maybe used later\n+LL |         drop(a);\n+LL |     });\n+   |     - `a` is later dropped here\n+note: required by a bound in `assert_send`\n+  --> $DIR/generator-print-verbose-2.rs:18:23\n+   |\n+LL |     fn assert_send<T: Send>(_: T) {}\n+   |                       ^^^^ required by this bound in `assert_send`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "ab29db6e09c964475a86222f7156dafe2d97c2e8", "filename": "tests/ui/generator/print/generator-print-verbose-2.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-2.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -1,24 +1,33 @@\n+// revisions: no_drop_tracking drop_tracking drop_tracking_mir\n+// [drop_tracking] compile-flags: -Zdrop-tracking\n+// [drop_tracking_mir] compile-flags: -Zdrop-tracking-mir\n // compile-flags: -Zverbose\n \n // Same as test/ui/generator/not-send-sync.rs\n #![feature(generators)]\n+#![feature(negative_impls)]\n \n-use std::cell::Cell;\n+struct NotSend;\n+struct NotSync;\n+\n+impl !Send for NotSend {}\n+impl !Sync for NotSync {}\n \n fn main() {\n     fn assert_sync<T: Sync>(_: T) {}\n     fn assert_send<T: Send>(_: T) {}\n \n     assert_sync(|| {\n         //~^ ERROR: generator cannot be shared between threads safely\n-        let a = Cell::new(2);\n+        let a = NotSync;\n         yield;\n+        drop(a);\n     });\n \n-    let a = Cell::new(2);\n     assert_send(|| {\n-        //~^ ERROR: E0277\n-        drop(&a);\n+        //~^ ERROR: generator cannot be sent between threads safely\n+        let a = NotSend;\n         yield;\n+        drop(a);\n     });\n }"}, {"sha": "59112ce0a79e60234354effa8bba52b73c2c4f5f", "filename": "tests/ui/generator/print/generator-print-verbose-2.stderr", "status": "removed", "additions": 0, "deletions": 58, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/7d4df2d30eb342af1ef136d83d70d281f34adcd7/tests%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d4df2d30eb342af1ef136d83d70d281f34adcd7/tests%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-2.stderr?ref=7d4df2d30eb342af1ef136d83d70d281f34adcd7", "patch": "@@ -1,58 +0,0 @@\n-error[E0277]: `Cell<i32>` cannot be shared between threads safely\n-  --> $DIR/generator-print-verbose-2.rs:19:17\n-   |\n-LL |       assert_send(|| {\n-   |  _____-----------_^\n-   | |     |\n-   | |     required by a bound introduced by this call\n-LL | |\n-LL | |         drop(&a);\n-LL | |         yield;\n-LL | |     });\n-   | |_____^ `Cell<i32>` cannot be shared between threads safely\n-   |\n-   = help: the trait `Sync` is not implemented for `Cell<i32>`\n-   = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` or `std::sync::atomic::AtomicI32` instead\n-   = note: required for `&'_#4r Cell<i32>` to implement `Send`\n-note: required because it's used within this generator\n-  --> $DIR/generator-print-verbose-2.rs:19:17\n-   |\n-LL |     assert_send(|| {\n-   |                 ^^\n-note: required by a bound in `assert_send`\n-  --> $DIR/generator-print-verbose-2.rs:10:23\n-   |\n-LL |     fn assert_send<T: Send>(_: T) {}\n-   |                       ^^^^ required by this bound in `assert_send`\n-\n-error: generator cannot be shared between threads safely\n-  --> $DIR/generator-print-verbose-2.rs:12:17\n-   |\n-LL |       assert_sync(|| {\n-   |  _________________^\n-LL | |\n-LL | |         let a = Cell::new(2);\n-LL | |         yield;\n-LL | |     });\n-   | |_____^ generator is not `Sync`\n-   |\n-   = help: within `[main::{closure#0} upvar_tys=() {Cell<i32>, ()}]`, the trait `Sync` is not implemented for `Cell<i32>`\n-   = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` or `std::sync::atomic::AtomicI32` instead\n-note: generator is not `Sync` as this value is used across a yield\n-  --> $DIR/generator-print-verbose-2.rs:15:9\n-   |\n-LL |         let a = Cell::new(2);\n-   |             - has type `Cell<i32>` which is not `Sync`\n-LL |         yield;\n-   |         ^^^^^ yield occurs here, with `a` maybe used later\n-LL |     });\n-   |     - `a` is later dropped here\n-note: required by a bound in `assert_sync`\n-  --> $DIR/generator-print-verbose-2.rs:9:23\n-   |\n-LL |     fn assert_sync<T: Sync>(_: T) {}\n-   |                       ^^^^ required by this bound in `assert_sync`\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0277`."}, {"sha": "7122a951e8070221826a23b2c9b59cd34dac0fd8", "filename": "tests/ui/generator/retain-resume-ref.drop_tracking.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fgenerator%2Fretain-resume-ref.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fgenerator%2Fretain-resume-ref.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fretain-resume-ref.drop_tracking.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -0,0 +1,13 @@\n+error[E0499]: cannot borrow `thing` as mutable more than once at a time\n+  --> $DIR/retain-resume-ref.rs:27:25\n+   |\n+LL |     gen.as_mut().resume(&mut thing);\n+   |                         ---------- first mutable borrow occurs here\n+LL |     gen.as_mut().resume(&mut thing);\n+   |                  ------ ^^^^^^^^^^ second mutable borrow occurs here\n+   |                  |\n+   |                  first borrow later used by call\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0499`."}, {"sha": "736ed1fb6080390ef9ad45ef1db71e54a5a9bf86", "filename": "tests/ui/generator/retain-resume-ref.drop_tracking_mir.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fgenerator%2Fretain-resume-ref.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fgenerator%2Fretain-resume-ref.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fretain-resume-ref.drop_tracking_mir.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -0,0 +1,14 @@\n+error[E0499]: cannot borrow `thing` as mutable more than once at a time\n+  --> $DIR/retain-resume-ref.rs:27:25\n+   |\n+LL |     gen.as_mut().resume(&mut thing);\n+   |                         ---------- first mutable borrow occurs here\n+LL |     gen.as_mut().resume(&mut thing);\n+   |                         ^^^^^^^^^^ second mutable borrow occurs here\n+LL |\n+LL | }\n+   | - first borrow might be used here, when `gen` is dropped and runs the destructor for generator\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0499`."}, {"sha": "7122a951e8070221826a23b2c9b59cd34dac0fd8", "filename": "tests/ui/generator/retain-resume-ref.no_drop_tracking.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fgenerator%2Fretain-resume-ref.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fgenerator%2Fretain-resume-ref.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fretain-resume-ref.no_drop_tracking.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -0,0 +1,13 @@\n+error[E0499]: cannot borrow `thing` as mutable more than once at a time\n+  --> $DIR/retain-resume-ref.rs:27:25\n+   |\n+LL |     gen.as_mut().resume(&mut thing);\n+   |                         ---------- first mutable borrow occurs here\n+LL |     gen.as_mut().resume(&mut thing);\n+   |                  ------ ^^^^^^^^^^ second mutable borrow occurs here\n+   |                  |\n+   |                  first borrow later used by call\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0499`."}, {"sha": "0050d98d03ba65943952a8ce3e64df49eddd01f6", "filename": "tests/ui/generator/retain-resume-ref.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fgenerator%2Fretain-resume-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fgenerator%2Fretain-resume-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fretain-resume-ref.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -1,3 +1,7 @@\n+// revisions: no_drop_tracking drop_tracking drop_tracking_mir\n+// [drop_tracking] compile-flags: -Zdrop-tracking\n+// [drop_tracking_mir] compile-flags: -Zdrop-tracking-mir\n+\n //! This test ensures that a mutable reference cannot be passed as a resume argument twice.\n \n #![feature(generators, generator_trait)]"}, {"sha": "7122a951e8070221826a23b2c9b59cd34dac0fd8", "filename": "tests/ui/generator/retain-resume-ref.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fgenerator%2Fretain-resume-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fgenerator%2Fretain-resume-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fretain-resume-ref.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -1,5 +1,5 @@\n error[E0499]: cannot borrow `thing` as mutable more than once at a time\n-  --> $DIR/retain-resume-ref.rs:23:25\n+  --> $DIR/retain-resume-ref.rs:27:25\n    |\n LL |     gen.as_mut().resume(&mut thing);\n    |                         ---------- first mutable borrow occurs here"}, {"sha": "4784ff49be2e97dc210385a4fab50dac1fce4ebc", "filename": "tests/ui/generator/static-mut-reference-across-yield.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fgenerator%2Fstatic-mut-reference-across-yield.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fgenerator%2Fstatic-mut-reference-across-yield.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fstatic-mut-reference-across-yield.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -1,6 +1,8 @@\n // build-pass\n-// revisions: mir thir\n+// revisions: mir thir drop_tracking drop_tracking_mir\n // [thir]compile-flags: -Zthir-unsafeck\n+// [drop_tracking] compile-flags: -Zdrop-tracking\n+// [drop_tracking_mir] compile-flags: -Zdrop-tracking-mir\n \n #![feature(generators)]\n "}, {"sha": "477c964bd40fd3b6d17757367d59f5a3b9d24711", "filename": "tests/ui/impl-trait/issue-55872-2.drop_tracking.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fimpl-trait%2Fissue-55872-2.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fimpl-trait%2Fissue-55872-2.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fissue-55872-2.drop_tracking.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -0,0 +1,8 @@\n+error: type parameter `T` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n+  --> $DIR/issue-55872-2.rs:17:9\n+   |\n+LL |         async {}\n+   |         ^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "c14bb5cc9142d9a2035354bf6fef0aba34a233ed", "filename": "tests/ui/impl-trait/issue-55872-2.drop_tracking_mir.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fimpl-trait%2Fissue-55872-2.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fimpl-trait%2Fissue-55872-2.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fissue-55872-2.drop_tracking_mir.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -0,0 +1,14 @@\n+error: type parameter `T` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n+  --> $DIR/issue-55872-2.rs:17:9\n+   |\n+LL |         async {}\n+   |         ^^^^^^^^\n+\n+error: type parameter `T` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n+  --> $DIR/issue-55872-2.rs:17:9\n+   |\n+LL |         async {}\n+   |         ^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "477c964bd40fd3b6d17757367d59f5a3b9d24711", "filename": "tests/ui/impl-trait/issue-55872-2.no_drop_tracking.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fimpl-trait%2Fissue-55872-2.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fimpl-trait%2Fissue-55872-2.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fissue-55872-2.no_drop_tracking.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -0,0 +1,8 @@\n+error: type parameter `T` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n+  --> $DIR/issue-55872-2.rs:17:9\n+   |\n+LL |         async {}\n+   |         ^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "cbc7b5d62e138a48026cb3be6bba832ead2e8088", "filename": "tests/ui/impl-trait/issue-55872-2.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fimpl-trait%2Fissue-55872-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fimpl-trait%2Fissue-55872-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fissue-55872-2.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -1,3 +1,6 @@\n+// revisions: no_drop_tracking drop_tracking drop_tracking_mir\n+// [drop_tracking] compile-flags: -Zdrop-tracking\n+// [drop_tracking_mir] compile-flags: -Zdrop-tracking-mir\n // edition:2018\n \n #![feature(type_alias_impl_trait)]\n@@ -13,6 +16,7 @@ impl<S> Bar for S {\n     fn foo<T>() -> Self::E {\n         async {}\n         //~^ ERROR type parameter `T` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n+        //[drop_tracking_mir]~^^ ERROR type parameter `T` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n     }\n }\n "}, {"sha": "477c964bd40fd3b6d17757367d59f5a3b9d24711", "filename": "tests/ui/impl-trait/issue-55872-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fimpl-trait%2Fissue-55872-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fimpl-trait%2Fissue-55872-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fissue-55872-2.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -1,5 +1,5 @@\n error: type parameter `T` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n-  --> $DIR/issue-55872-2.rs:14:9\n+  --> $DIR/issue-55872-2.rs:17:9\n    |\n LL |         async {}\n    |         ^^^^^^^^"}, {"sha": "92a3290622ef267794789f6b0dfb0b0704952f5b", "filename": "tests/ui/impl-trait/issues/infinite-impl-trait-issue-38064.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fimpl-trait%2Fissues%2Finfinite-impl-trait-issue-38064.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fimpl-trait%2Fissues%2Finfinite-impl-trait-issue-38064.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fissues%2Finfinite-impl-trait-issue-38064.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -8,13 +8,13 @@ LL |     Foo(bar())\n    |     ---------- returning here with type `Foo<impl Quux>`\n ...\n LL | fn bar() -> impl Quux {\n-   |             --------- returning this opaque type `Foo<impl Quux>`\n+   |             --------- returning this type `Foo<impl Quux>`\n \n error[E0720]: cannot resolve opaque type\n   --> $DIR/infinite-impl-trait-issue-38064.rs:14:13\n    |\n LL | fn foo() -> impl Quux {\n-   |             --------- returning this opaque type `Bar<impl Quux>`\n+   |             --------- returning this type `Bar<impl Quux>`\n ...\n LL | fn bar() -> impl Quux {\n    |             ^^^^^^^^^ recursive opaque type"}, {"sha": "43118ae38540ff45bcd9e53345402d1a54243f88", "filename": "tests/ui/impl-trait/recursive-impl-trait-type-indirect.drop_tracking.stderr", "status": "renamed", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type-indirect.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type-indirect.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type-indirect.drop_tracking.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -1,5 +1,5 @@\n error[E0720]: cannot resolve opaque type\n-  --> $DIR/recursive-impl-trait-type-indirect.rs:7:22\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:11:22\n    |\n LL | fn option(i: i32) -> impl Sized {\n    |                      ^^^^^^^^^^ recursive opaque type\n@@ -10,7 +10,7 @@ LL |     if i < 0 { None } else { Some((option(i - 1), i)) }\n    |                returning here with type `Option<(impl Sized, i32)>`\n \n error[E0720]: cannot resolve opaque type\n-  --> $DIR/recursive-impl-trait-type-indirect.rs:12:15\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:16:15\n    |\n LL | fn tuple() -> impl Sized {\n    |               ^^^^^^^^^^ recursive opaque type\n@@ -19,7 +19,7 @@ LL |     (tuple(),)\n    |     ---------- returning here with type `(impl Sized,)`\n \n error[E0720]: cannot resolve opaque type\n-  --> $DIR/recursive-impl-trait-type-indirect.rs:17:15\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:21:15\n    |\n LL | fn array() -> impl Sized {\n    |               ^^^^^^^^^^ recursive opaque type\n@@ -28,7 +28,7 @@ LL |     [array()]\n    |     --------- returning here with type `[impl Sized; 1]`\n \n error[E0720]: cannot resolve opaque type\n-  --> $DIR/recursive-impl-trait-type-indirect.rs:22:13\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:26:13\n    |\n LL | fn ptr() -> impl Sized {\n    |             ^^^^^^^^^^ recursive opaque type\n@@ -37,7 +37,7 @@ LL |     &ptr() as *const _\n    |     ------------------ returning here with type `*const impl Sized`\n \n error[E0720]: cannot resolve opaque type\n-  --> $DIR/recursive-impl-trait-type-indirect.rs:27:16\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:31:16\n    |\n LL | fn fn_ptr() -> impl Sized {\n    |                ^^^^^^^^^^ recursive opaque type\n@@ -46,7 +46,7 @@ LL |     fn_ptr as fn() -> _\n    |     ------------------- returning here with type `fn() -> impl Sized`\n \n error[E0720]: cannot resolve opaque type\n-  --> $DIR/recursive-impl-trait-type-indirect.rs:32:25\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:36:25\n    |\n LL |   fn closure_capture() -> impl Sized {\n    |                           ^^^^^^^^^^ recursive opaque type\n@@ -55,10 +55,10 @@ LL | /     move || {\n LL | |         x;\n    | |         - closure captures itself here\n LL | |     }\n-   | |_____- returning here with type `[closure@$DIR/recursive-impl-trait-type-indirect.rs:35:5: 35:12]`\n+   | |_____- returning here with type `[closure@$DIR/recursive-impl-trait-type-indirect.rs:39:5: 39:12]`\n \n error[E0720]: cannot resolve opaque type\n-  --> $DIR/recursive-impl-trait-type-indirect.rs:40:29\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:44:29\n    |\n LL |   fn closure_ref_capture() -> impl Sized {\n    |                               ^^^^^^^^^^ recursive opaque type\n@@ -67,28 +67,28 @@ LL | /     move || {\n LL | |         &x;\n    | |          - closure captures itself here\n LL | |     }\n-   | |_____- returning here with type `[closure@$DIR/recursive-impl-trait-type-indirect.rs:43:5: 43:12]`\n+   | |_____- returning here with type `[closure@$DIR/recursive-impl-trait-type-indirect.rs:47:5: 47:12]`\n \n error[E0720]: cannot resolve opaque type\n-  --> $DIR/recursive-impl-trait-type-indirect.rs:48:21\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:52:21\n    |\n LL | fn closure_sig() -> impl Sized {\n    |                     ^^^^^^^^^^ recursive opaque type\n LL |\n LL |     || closure_sig()\n-   |     ---------------- returning here with type `[closure@$DIR/recursive-impl-trait-type-indirect.rs:50:5: 50:7]`\n+   |     ---------------- returning here with type `[closure@$DIR/recursive-impl-trait-type-indirect.rs:54:5: 54:7]`\n \n error[E0720]: cannot resolve opaque type\n-  --> $DIR/recursive-impl-trait-type-indirect.rs:53:23\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:57:23\n    |\n LL | fn generator_sig() -> impl Sized {\n    |                       ^^^^^^^^^^ recursive opaque type\n LL |\n LL |     || generator_sig()\n-   |     ------------------ returning here with type `[closure@$DIR/recursive-impl-trait-type-indirect.rs:55:5: 55:7]`\n+   |     ------------------ returning here with type `[closure@$DIR/recursive-impl-trait-type-indirect.rs:59:5: 59:7]`\n \n error[E0720]: cannot resolve opaque type\n-  --> $DIR/recursive-impl-trait-type-indirect.rs:58:27\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:62:27\n    |\n LL |   fn generator_capture() -> impl Sized {\n    |                             ^^^^^^^^^^ recursive opaque type\n@@ -98,10 +98,10 @@ LL | |         yield;\n LL | |         x;\n    | |         - generator captures itself here\n LL | |     }\n-   | |_____- returning here with type `[generator@$DIR/recursive-impl-trait-type-indirect.rs:61:5: 61:12]`\n+   | |_____- returning here with type `[generator@$DIR/recursive-impl-trait-type-indirect.rs:65:5: 65:12]`\n \n error[E0720]: cannot resolve opaque type\n-  --> $DIR/recursive-impl-trait-type-indirect.rs:67:35\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:71:35\n    |\n LL | fn substs_change<T: 'static>() -> impl Sized {\n    |                                   ^^^^^^^^^^ recursive opaque type\n@@ -110,7 +110,7 @@ LL |     (substs_change::<&T>(),)\n    |     ------------------------ returning here with type `(impl Sized,)`\n \n error[E0720]: cannot resolve opaque type\n-  --> $DIR/recursive-impl-trait-type-indirect.rs:72:24\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:76:24\n    |\n LL |   fn generator_hold() -> impl Sized {\n    |                          ^^^^^^^^^^ recursive opaque type\n@@ -121,10 +121,10 @@ LL | |         let x = generator_hold();\n LL | |         yield;\n LL | |         x;\n LL | |     }\n-   | |_____- returning here with type `[generator@$DIR/recursive-impl-trait-type-indirect.rs:74:5: 74:12]`\n+   | |_____- returning here with type `[generator@$DIR/recursive-impl-trait-type-indirect.rs:78:5: 78:12]`\n \n error[E0720]: cannot resolve opaque type\n-  --> $DIR/recursive-impl-trait-type-indirect.rs:86:26\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:90:26\n    |\n LL | fn mutual_recursion() -> impl Sync {\n    |                          ^^^^^^^^^ recursive opaque type\n@@ -136,7 +136,7 @@ LL | fn mutual_recursion_b() -> impl Sized {\n    |                            ---------- returning this opaque type `impl Sized`\n \n error[E0720]: cannot resolve opaque type\n-  --> $DIR/recursive-impl-trait-type-indirect.rs:91:28\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:95:28\n    |\n LL | fn mutual_recursion() -> impl Sync {\n    |                          --------- returning this opaque type `impl Sync`", "previous_filename": "tests/ui/impl-trait/recursive-impl-trait-type-indirect.stderr"}, {"sha": "662c74bcdc0d045434b761b5b6412953db9c7def", "filename": "tests/ui/impl-trait/recursive-impl-trait-type-indirect.drop_tracking_mir.stderr", "status": "added", "additions": 144, "deletions": 0, "changes": 144, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type-indirect.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type-indirect.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type-indirect.drop_tracking_mir.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -0,0 +1,144 @@\n+error[E0720]: cannot resolve opaque type\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:11:22\n+   |\n+LL | fn option(i: i32) -> impl Sized {\n+   |                      ^^^^^^^^^^ recursive opaque type\n+LL |\n+LL |     if i < 0 { None } else { Some((option(i - 1), i)) }\n+   |                ----          ------------------------ returning here with type `Option<(impl Sized, i32)>`\n+   |                |\n+   |                returning here with type `Option<(impl Sized, i32)>`\n+\n+error[E0720]: cannot resolve opaque type\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:16:15\n+   |\n+LL | fn tuple() -> impl Sized {\n+   |               ^^^^^^^^^^ recursive opaque type\n+LL |\n+LL |     (tuple(),)\n+   |     ---------- returning here with type `(impl Sized,)`\n+\n+error[E0720]: cannot resolve opaque type\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:21:15\n+   |\n+LL | fn array() -> impl Sized {\n+   |               ^^^^^^^^^^ recursive opaque type\n+LL |\n+LL |     [array()]\n+   |     --------- returning here with type `[impl Sized; 1]`\n+\n+error[E0720]: cannot resolve opaque type\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:26:13\n+   |\n+LL | fn ptr() -> impl Sized {\n+   |             ^^^^^^^^^^ recursive opaque type\n+LL |\n+LL |     &ptr() as *const _\n+   |     ------------------ returning here with type `*const impl Sized`\n+\n+error[E0720]: cannot resolve opaque type\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:31:16\n+   |\n+LL | fn fn_ptr() -> impl Sized {\n+   |                ^^^^^^^^^^ recursive opaque type\n+LL |\n+LL |     fn_ptr as fn() -> _\n+   |     ------------------- returning here with type `fn() -> impl Sized`\n+\n+error[E0720]: cannot resolve opaque type\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:36:25\n+   |\n+LL |   fn closure_capture() -> impl Sized {\n+   |                           ^^^^^^^^^^ recursive opaque type\n+...\n+LL | /     move || {\n+LL | |         x;\n+   | |         - closure captures itself here\n+LL | |     }\n+   | |_____- returning here with type `[closure@$DIR/recursive-impl-trait-type-indirect.rs:39:5: 39:12]`\n+\n+error[E0720]: cannot resolve opaque type\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:44:29\n+   |\n+LL |   fn closure_ref_capture() -> impl Sized {\n+   |                               ^^^^^^^^^^ recursive opaque type\n+...\n+LL | /     move || {\n+LL | |         &x;\n+   | |          - closure captures itself here\n+LL | |     }\n+   | |_____- returning here with type `[closure@$DIR/recursive-impl-trait-type-indirect.rs:47:5: 47:12]`\n+\n+error[E0720]: cannot resolve opaque type\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:52:21\n+   |\n+LL | fn closure_sig() -> impl Sized {\n+   |                     ^^^^^^^^^^ recursive opaque type\n+LL |\n+LL |     || closure_sig()\n+   |     ---------------- returning here with type `[closure@$DIR/recursive-impl-trait-type-indirect.rs:54:5: 54:7]`\n+\n+error[E0720]: cannot resolve opaque type\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:57:23\n+   |\n+LL | fn generator_sig() -> impl Sized {\n+   |                       ^^^^^^^^^^ recursive opaque type\n+LL |\n+LL |     || generator_sig()\n+   |     ------------------ returning here with type `[closure@$DIR/recursive-impl-trait-type-indirect.rs:59:5: 59:7]`\n+\n+error[E0720]: cannot resolve opaque type\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:62:27\n+   |\n+LL |   fn generator_capture() -> impl Sized {\n+   |                             ^^^^^^^^^^ recursive opaque type\n+...\n+LL | /     move || {\n+LL | |         yield;\n+LL | |         x;\n+   | |         - generator captures itself here\n+LL | |     }\n+   | |_____- returning here with type `[generator@$DIR/recursive-impl-trait-type-indirect.rs:65:5: 65:12]`\n+\n+error[E0720]: cannot resolve opaque type\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:71:35\n+   |\n+LL | fn substs_change<T: 'static>() -> impl Sized {\n+   |                                   ^^^^^^^^^^ recursive opaque type\n+LL |\n+LL |     (substs_change::<&T>(),)\n+   |     ------------------------ returning here with type `(impl Sized,)`\n+\n+error[E0720]: cannot resolve opaque type\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:76:24\n+   |\n+LL | fn generator_hold() -> impl Sized {\n+   |                        ^^^^^^^^^^ recursive opaque type\n+\n+error[E0720]: cannot resolve opaque type\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:90:26\n+   |\n+LL | fn mutual_recursion() -> impl Sync {\n+   |                          ^^^^^^^^^ recursive opaque type\n+LL |\n+LL |     mutual_recursion_b()\n+   |     -------------------- returning here with type `impl Sized`\n+...\n+LL | fn mutual_recursion_b() -> impl Sized {\n+   |                            ---------- returning this opaque type `impl Sized`\n+\n+error[E0720]: cannot resolve opaque type\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:95:28\n+   |\n+LL | fn mutual_recursion() -> impl Sync {\n+   |                          --------- returning this opaque type `impl Sync`\n+...\n+LL | fn mutual_recursion_b() -> impl Sized {\n+   |                            ^^^^^^^^^^ recursive opaque type\n+LL |\n+LL |     mutual_recursion()\n+   |     ------------------ returning here with type `impl Sync`\n+\n+error: aborting due to 14 previous errors\n+\n+For more information about this error, try `rustc --explain E0720`."}, {"sha": "43118ae38540ff45bcd9e53345402d1a54243f88", "filename": "tests/ui/impl-trait/recursive-impl-trait-type-indirect.no_drop_tracking.stderr", "status": "added", "additions": 152, "deletions": 0, "changes": 152, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type-indirect.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type-indirect.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type-indirect.no_drop_tracking.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -0,0 +1,152 @@\n+error[E0720]: cannot resolve opaque type\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:11:22\n+   |\n+LL | fn option(i: i32) -> impl Sized {\n+   |                      ^^^^^^^^^^ recursive opaque type\n+LL |\n+LL |     if i < 0 { None } else { Some((option(i - 1), i)) }\n+   |                ----          ------------------------ returning here with type `Option<(impl Sized, i32)>`\n+   |                |\n+   |                returning here with type `Option<(impl Sized, i32)>`\n+\n+error[E0720]: cannot resolve opaque type\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:16:15\n+   |\n+LL | fn tuple() -> impl Sized {\n+   |               ^^^^^^^^^^ recursive opaque type\n+LL |\n+LL |     (tuple(),)\n+   |     ---------- returning here with type `(impl Sized,)`\n+\n+error[E0720]: cannot resolve opaque type\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:21:15\n+   |\n+LL | fn array() -> impl Sized {\n+   |               ^^^^^^^^^^ recursive opaque type\n+LL |\n+LL |     [array()]\n+   |     --------- returning here with type `[impl Sized; 1]`\n+\n+error[E0720]: cannot resolve opaque type\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:26:13\n+   |\n+LL | fn ptr() -> impl Sized {\n+   |             ^^^^^^^^^^ recursive opaque type\n+LL |\n+LL |     &ptr() as *const _\n+   |     ------------------ returning here with type `*const impl Sized`\n+\n+error[E0720]: cannot resolve opaque type\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:31:16\n+   |\n+LL | fn fn_ptr() -> impl Sized {\n+   |                ^^^^^^^^^^ recursive opaque type\n+LL |\n+LL |     fn_ptr as fn() -> _\n+   |     ------------------- returning here with type `fn() -> impl Sized`\n+\n+error[E0720]: cannot resolve opaque type\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:36:25\n+   |\n+LL |   fn closure_capture() -> impl Sized {\n+   |                           ^^^^^^^^^^ recursive opaque type\n+...\n+LL | /     move || {\n+LL | |         x;\n+   | |         - closure captures itself here\n+LL | |     }\n+   | |_____- returning here with type `[closure@$DIR/recursive-impl-trait-type-indirect.rs:39:5: 39:12]`\n+\n+error[E0720]: cannot resolve opaque type\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:44:29\n+   |\n+LL |   fn closure_ref_capture() -> impl Sized {\n+   |                               ^^^^^^^^^^ recursive opaque type\n+...\n+LL | /     move || {\n+LL | |         &x;\n+   | |          - closure captures itself here\n+LL | |     }\n+   | |_____- returning here with type `[closure@$DIR/recursive-impl-trait-type-indirect.rs:47:5: 47:12]`\n+\n+error[E0720]: cannot resolve opaque type\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:52:21\n+   |\n+LL | fn closure_sig() -> impl Sized {\n+   |                     ^^^^^^^^^^ recursive opaque type\n+LL |\n+LL |     || closure_sig()\n+   |     ---------------- returning here with type `[closure@$DIR/recursive-impl-trait-type-indirect.rs:54:5: 54:7]`\n+\n+error[E0720]: cannot resolve opaque type\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:57:23\n+   |\n+LL | fn generator_sig() -> impl Sized {\n+   |                       ^^^^^^^^^^ recursive opaque type\n+LL |\n+LL |     || generator_sig()\n+   |     ------------------ returning here with type `[closure@$DIR/recursive-impl-trait-type-indirect.rs:59:5: 59:7]`\n+\n+error[E0720]: cannot resolve opaque type\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:62:27\n+   |\n+LL |   fn generator_capture() -> impl Sized {\n+   |                             ^^^^^^^^^^ recursive opaque type\n+...\n+LL | /     move || {\n+LL | |         yield;\n+LL | |         x;\n+   | |         - generator captures itself here\n+LL | |     }\n+   | |_____- returning here with type `[generator@$DIR/recursive-impl-trait-type-indirect.rs:65:5: 65:12]`\n+\n+error[E0720]: cannot resolve opaque type\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:71:35\n+   |\n+LL | fn substs_change<T: 'static>() -> impl Sized {\n+   |                                   ^^^^^^^^^^ recursive opaque type\n+LL |\n+LL |     (substs_change::<&T>(),)\n+   |     ------------------------ returning here with type `(impl Sized,)`\n+\n+error[E0720]: cannot resolve opaque type\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:76:24\n+   |\n+LL |   fn generator_hold() -> impl Sized {\n+   |                          ^^^^^^^^^^ recursive opaque type\n+LL |\n+LL | /     move || {\n+LL | |         let x = generator_hold();\n+   | |             - generator captures itself here\n+LL | |         yield;\n+LL | |         x;\n+LL | |     }\n+   | |_____- returning here with type `[generator@$DIR/recursive-impl-trait-type-indirect.rs:78:5: 78:12]`\n+\n+error[E0720]: cannot resolve opaque type\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:90:26\n+   |\n+LL | fn mutual_recursion() -> impl Sync {\n+   |                          ^^^^^^^^^ recursive opaque type\n+LL |\n+LL |     mutual_recursion_b()\n+   |     -------------------- returning here with type `impl Sized`\n+...\n+LL | fn mutual_recursion_b() -> impl Sized {\n+   |                            ---------- returning this opaque type `impl Sized`\n+\n+error[E0720]: cannot resolve opaque type\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:95:28\n+   |\n+LL | fn mutual_recursion() -> impl Sync {\n+   |                          --------- returning this opaque type `impl Sync`\n+...\n+LL | fn mutual_recursion_b() -> impl Sized {\n+   |                            ^^^^^^^^^^ recursive opaque type\n+LL |\n+LL |     mutual_recursion()\n+   |     ------------------ returning here with type `impl Sync`\n+\n+error: aborting due to 14 previous errors\n+\n+For more information about this error, try `rustc --explain E0720`."}, {"sha": "630372e13ed58b8d1c2c216708d3e8bbf6915a03", "filename": "tests/ui/impl-trait/recursive-impl-trait-type-indirect.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type-indirect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type-indirect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type-indirect.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -1,3 +1,7 @@\n+// revisions: no_drop_tracking drop_tracking drop_tracking_mir\n+// [drop_tracking] compile-flags: -Zdrop-tracking\n+// [drop_tracking_mir] compile-flags: -Zdrop-tracking-mir\n+\n // Test that impl trait does not allow creating recursive types that are\n // otherwise forbidden.\n "}, {"sha": "262657da5fe6f8af4cd3a074bc432a4033bd0d54", "filename": "tests/ui/lint/must_not_suspend/dedup.drop_tracking.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Flint%2Fmust_not_suspend%2Fdedup.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Flint%2Fmust_not_suspend%2Fdedup.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fmust_not_suspend%2Fdedup.drop_tracking.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -0,0 +1,21 @@\n+error: `No` held across a suspend point, but should not be\n+  --> $DIR/dedup.rs:19:9\n+   |\n+LL |     let no = No {};\n+   |         ^^\n+LL |     wheeee(&no).await;\n+   |                ------ the value is held across this suspend point\n+   |\n+help: consider using a block (`{ ... }`) to shrink the value's scope, ending before the suspend point\n+  --> $DIR/dedup.rs:19:9\n+   |\n+LL |     let no = No {};\n+   |         ^^\n+note: the lint level is defined here\n+  --> $DIR/dedup.rs:6:9\n+   |\n+LL | #![deny(must_not_suspend)]\n+   |         ^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "262657da5fe6f8af4cd3a074bc432a4033bd0d54", "filename": "tests/ui/lint/must_not_suspend/dedup.drop_tracking_mir.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Flint%2Fmust_not_suspend%2Fdedup.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Flint%2Fmust_not_suspend%2Fdedup.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fmust_not_suspend%2Fdedup.drop_tracking_mir.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -0,0 +1,21 @@\n+error: `No` held across a suspend point, but should not be\n+  --> $DIR/dedup.rs:19:9\n+   |\n+LL |     let no = No {};\n+   |         ^^\n+LL |     wheeee(&no).await;\n+   |                ------ the value is held across this suspend point\n+   |\n+help: consider using a block (`{ ... }`) to shrink the value's scope, ending before the suspend point\n+  --> $DIR/dedup.rs:19:9\n+   |\n+LL |     let no = No {};\n+   |         ^^\n+note: the lint level is defined here\n+  --> $DIR/dedup.rs:6:9\n+   |\n+LL | #![deny(must_not_suspend)]\n+   |         ^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "7ed43d2571989ebc03d82b79ed4e7595ffe1249f", "filename": "tests/ui/lint/must_not_suspend/dedup.no_drop_tracking.stderr", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Flint%2Fmust_not_suspend%2Fdedup.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Flint%2Fmust_not_suspend%2Fdedup.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fmust_not_suspend%2Fdedup.no_drop_tracking.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -0,0 +1,33 @@\n+error: `No` held across a suspend point, but should not be\n+  --> $DIR/dedup.rs:19:9\n+   |\n+LL |     let no = No {};\n+   |         ^^\n+LL |     wheeee(&no).await;\n+   |                ------ the value is held across this suspend point\n+   |\n+help: consider using a block (`{ ... }`) to shrink the value's scope, ending before the suspend point\n+  --> $DIR/dedup.rs:19:9\n+   |\n+LL |     let no = No {};\n+   |         ^^\n+note: the lint level is defined here\n+  --> $DIR/dedup.rs:6:9\n+   |\n+LL | #![deny(must_not_suspend)]\n+   |         ^^^^^^^^^^^^^^^^\n+\n+error: `No` held across a suspend point, but should not be\n+  --> $DIR/dedup.rs:20:13\n+   |\n+LL |     wheeee(&no).await;\n+   |             ^^ ------ the value is held across this suspend point\n+   |\n+help: consider using a block (`{ ... }`) to shrink the value's scope, ending before the suspend point\n+  --> $DIR/dedup.rs:20:13\n+   |\n+LL |     wheeee(&no).await;\n+   |             ^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "96bdb7715b18308f452a412f6cbb87decf7eaba1", "filename": "tests/ui/lint/must_not_suspend/dedup.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Flint%2Fmust_not_suspend%2Fdedup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Flint%2Fmust_not_suspend%2Fdedup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fmust_not_suspend%2Fdedup.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -1,3 +1,6 @@\n+// revisions: no_drop_tracking drop_tracking drop_tracking_mir\n+// [drop_tracking] compile-flags: -Zdrop-tracking\n+// [drop_tracking_mir] compile-flags: -Zdrop-tracking-mir\n // edition:2018\n #![feature(must_not_suspend)]\n #![deny(must_not_suspend)]\n@@ -13,7 +16,9 @@ async fn wheeee<T>(t: T) {\n }\n \n async fn yes() {\n-    wheeee(&No {}).await; //~ ERROR `No` held across\n+    let no = No {}; //~ ERROR `No` held across\n+    wheeee(&no).await; //[no_drop_tracking]~ ERROR `No` held across\n+    drop(no);\n }\n \n fn main() {"}, {"sha": "18880f5a757e0f3953c93e96c0108e03d3be9f19", "filename": "tests/ui/lint/must_not_suspend/dedup.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Flint%2Fmust_not_suspend%2Fdedup.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Flint%2Fmust_not_suspend%2Fdedup.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fmust_not_suspend%2Fdedup.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -1,16 +1,16 @@\n error: `No` held across a suspend point, but should not be\n-  --> $DIR/dedup.rs:16:13\n+  --> $DIR/dedup.rs:19:13\n    |\n LL |     wheeee(&No {}).await;\n    |             ^^^^^ ------ the value is held across this suspend point\n    |\n help: consider using a block (`{ ... }`) to shrink the value's scope, ending before the suspend point\n-  --> $DIR/dedup.rs:16:13\n+  --> $DIR/dedup.rs:19:13\n    |\n LL |     wheeee(&No {}).await;\n    |             ^^^^^\n note: the lint level is defined here\n-  --> $DIR/dedup.rs:3:9\n+  --> $DIR/dedup.rs:6:9\n    |\n LL | #![deny(must_not_suspend)]\n    |         ^^^^^^^^^^^^^^^^"}, {"sha": "e3628ca5e493498eaea7849b90ec5c0eecf7ec0a", "filename": "tests/ui/lint/must_not_suspend/ref.drop_tracking.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Flint%2Fmust_not_suspend%2Fref.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Flint%2Fmust_not_suspend%2Fref.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fmust_not_suspend%2Fref.drop_tracking.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -1,5 +1,5 @@\n error: reference to `Umm` held across a suspend point, but should not be\n-  --> $DIR/ref.rs:21:13\n+  --> $DIR/ref.rs:22:13\n    |\n LL |         let guard = &mut self.u;\n    |             ^^^^^\n@@ -8,17 +8,17 @@ LL |         other().await;\n    |                ------ the value is held across this suspend point\n    |\n note: You gotta use Umm's, ya know?\n-  --> $DIR/ref.rs:21:13\n+  --> $DIR/ref.rs:22:13\n    |\n LL |         let guard = &mut self.u;\n    |             ^^^^^\n help: consider using a block (`{ ... }`) to shrink the value's scope, ending before the suspend point\n-  --> $DIR/ref.rs:21:13\n+  --> $DIR/ref.rs:22:13\n    |\n LL |         let guard = &mut self.u;\n    |             ^^^^^\n note: the lint level is defined here\n-  --> $DIR/ref.rs:6:9\n+  --> $DIR/ref.rs:7:9\n    |\n LL | #![deny(must_not_suspend)]\n    |         ^^^^^^^^^^^^^^^^"}, {"sha": "e3628ca5e493498eaea7849b90ec5c0eecf7ec0a", "filename": "tests/ui/lint/must_not_suspend/ref.drop_tracking_mir.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Flint%2Fmust_not_suspend%2Fref.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Flint%2Fmust_not_suspend%2Fref.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fmust_not_suspend%2Fref.drop_tracking_mir.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -0,0 +1,27 @@\n+error: reference to `Umm` held across a suspend point, but should not be\n+  --> $DIR/ref.rs:22:13\n+   |\n+LL |         let guard = &mut self.u;\n+   |             ^^^^^\n+LL |\n+LL |         other().await;\n+   |                ------ the value is held across this suspend point\n+   |\n+note: You gotta use Umm's, ya know?\n+  --> $DIR/ref.rs:22:13\n+   |\n+LL |         let guard = &mut self.u;\n+   |             ^^^^^\n+help: consider using a block (`{ ... }`) to shrink the value's scope, ending before the suspend point\n+  --> $DIR/ref.rs:22:13\n+   |\n+LL |         let guard = &mut self.u;\n+   |             ^^^^^\n+note: the lint level is defined here\n+  --> $DIR/ref.rs:7:9\n+   |\n+LL | #![deny(must_not_suspend)]\n+   |         ^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "e9bfa08b5ddd93035c306273a3c94a591cb75075", "filename": "tests/ui/lint/must_not_suspend/ref.no_drop_tracking.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Flint%2Fmust_not_suspend%2Fref.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Flint%2Fmust_not_suspend%2Fref.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fmust_not_suspend%2Fref.no_drop_tracking.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -1,5 +1,5 @@\n error: `Umm` held across a suspend point, but should not be\n-  --> $DIR/ref.rs:21:26\n+  --> $DIR/ref.rs:22:26\n    |\n LL |         let guard = &mut self.u;\n    |                          ^^^^^^\n@@ -8,17 +8,17 @@ LL |         other().await;\n    |                ------ the value is held across this suspend point\n    |\n note: You gotta use Umm's, ya know?\n-  --> $DIR/ref.rs:21:26\n+  --> $DIR/ref.rs:22:26\n    |\n LL |         let guard = &mut self.u;\n    |                          ^^^^^^\n help: consider using a block (`{ ... }`) to shrink the value's scope, ending before the suspend point\n-  --> $DIR/ref.rs:21:26\n+  --> $DIR/ref.rs:22:26\n    |\n LL |         let guard = &mut self.u;\n    |                          ^^^^^^\n note: the lint level is defined here\n-  --> $DIR/ref.rs:6:9\n+  --> $DIR/ref.rs:7:9\n    |\n LL | #![deny(must_not_suspend)]\n    |         ^^^^^^^^^^^^^^^^"}, {"sha": "d05dcb83ac57c5f21fad3c245426ce619fb6a33c", "filename": "tests/ui/lint/must_not_suspend/ref.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Flint%2Fmust_not_suspend%2Fref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Flint%2Fmust_not_suspend%2Fref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fmust_not_suspend%2Fref.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -1,7 +1,8 @@\n // edition:2018\n-// revisions: no_drop_tracking drop_tracking\n-// [drop_tracking] compile-flags: -Zdrop-tracking=yes\n-// [no_drop_tracking] compile-flags: -Zdrop-tracking=no\n+// revisions: no_drop_tracking drop_tracking drop_tracking_mir\n+// [drop_tracking] compile-flags: -Zdrop-tracking\n+// [drop_tracking_mir] compile-flags: -Zdrop-tracking-mir\n+\n #![feature(must_not_suspend)]\n #![deny(must_not_suspend)]\n \n@@ -22,6 +23,7 @@ impl Bar {\n \n         other().await;\n \n+        let _g = &*guard;\n         *guard = Umm { i: 2 }\n     }\n }"}, {"sha": "6e62a228a43a5a13a2f379b57c9392dc15060dbd", "filename": "tests/ui/lint/must_not_suspend/trait.drop_tracking.stderr", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Flint%2Fmust_not_suspend%2Ftrait.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Flint%2Fmust_not_suspend%2Ftrait.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fmust_not_suspend%2Ftrait.drop_tracking.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -0,0 +1,37 @@\n+error: implementer of `Wow` held across a suspend point, but should not be\n+  --> $DIR/trait.rs:24:9\n+   |\n+LL |     let _guard1 = r#impl();\n+   |         ^^^^^^^\n+...\n+LL |     other().await;\n+   |            ------ the value is held across this suspend point\n+   |\n+help: consider using a block (`{ ... }`) to shrink the value's scope, ending before the suspend point\n+  --> $DIR/trait.rs:24:9\n+   |\n+LL |     let _guard1 = r#impl();\n+   |         ^^^^^^^\n+note: the lint level is defined here\n+  --> $DIR/trait.rs:6:9\n+   |\n+LL | #![deny(must_not_suspend)]\n+   |         ^^^^^^^^^^^^^^^^\n+\n+error: boxed `Wow` trait object held across a suspend point, but should not be\n+  --> $DIR/trait.rs:25:9\n+   |\n+LL |     let _guard2 = r#dyn();\n+   |         ^^^^^^^\n+LL |\n+LL |     other().await;\n+   |            ------ the value is held across this suspend point\n+   |\n+help: consider using a block (`{ ... }`) to shrink the value's scope, ending before the suspend point\n+  --> $DIR/trait.rs:25:9\n+   |\n+LL |     let _guard2 = r#dyn();\n+   |         ^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "6e62a228a43a5a13a2f379b57c9392dc15060dbd", "filename": "tests/ui/lint/must_not_suspend/trait.drop_tracking_mir.stderr", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Flint%2Fmust_not_suspend%2Ftrait.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Flint%2Fmust_not_suspend%2Ftrait.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fmust_not_suspend%2Ftrait.drop_tracking_mir.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -0,0 +1,37 @@\n+error: implementer of `Wow` held across a suspend point, but should not be\n+  --> $DIR/trait.rs:24:9\n+   |\n+LL |     let _guard1 = r#impl();\n+   |         ^^^^^^^\n+...\n+LL |     other().await;\n+   |            ------ the value is held across this suspend point\n+   |\n+help: consider using a block (`{ ... }`) to shrink the value's scope, ending before the suspend point\n+  --> $DIR/trait.rs:24:9\n+   |\n+LL |     let _guard1 = r#impl();\n+   |         ^^^^^^^\n+note: the lint level is defined here\n+  --> $DIR/trait.rs:6:9\n+   |\n+LL | #![deny(must_not_suspend)]\n+   |         ^^^^^^^^^^^^^^^^\n+\n+error: boxed `Wow` trait object held across a suspend point, but should not be\n+  --> $DIR/trait.rs:25:9\n+   |\n+LL |     let _guard2 = r#dyn();\n+   |         ^^^^^^^\n+LL |\n+LL |     other().await;\n+   |            ------ the value is held across this suspend point\n+   |\n+help: consider using a block (`{ ... }`) to shrink the value's scope, ending before the suspend point\n+  --> $DIR/trait.rs:25:9\n+   |\n+LL |     let _guard2 = r#dyn();\n+   |         ^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "6e62a228a43a5a13a2f379b57c9392dc15060dbd", "filename": "tests/ui/lint/must_not_suspend/trait.no_drop_tracking.stderr", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Flint%2Fmust_not_suspend%2Ftrait.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Flint%2Fmust_not_suspend%2Ftrait.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fmust_not_suspend%2Ftrait.no_drop_tracking.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -0,0 +1,37 @@\n+error: implementer of `Wow` held across a suspend point, but should not be\n+  --> $DIR/trait.rs:24:9\n+   |\n+LL |     let _guard1 = r#impl();\n+   |         ^^^^^^^\n+...\n+LL |     other().await;\n+   |            ------ the value is held across this suspend point\n+   |\n+help: consider using a block (`{ ... }`) to shrink the value's scope, ending before the suspend point\n+  --> $DIR/trait.rs:24:9\n+   |\n+LL |     let _guard1 = r#impl();\n+   |         ^^^^^^^\n+note: the lint level is defined here\n+  --> $DIR/trait.rs:6:9\n+   |\n+LL | #![deny(must_not_suspend)]\n+   |         ^^^^^^^^^^^^^^^^\n+\n+error: boxed `Wow` trait object held across a suspend point, but should not be\n+  --> $DIR/trait.rs:25:9\n+   |\n+LL |     let _guard2 = r#dyn();\n+   |         ^^^^^^^\n+LL |\n+LL |     other().await;\n+   |            ------ the value is held across this suspend point\n+   |\n+help: consider using a block (`{ ... }`) to shrink the value's scope, ending before the suspend point\n+  --> $DIR/trait.rs:25:9\n+   |\n+LL |     let _guard2 = r#dyn();\n+   |         ^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "cc3ae298dbba7ab00f1189de2e42121a6d8e6442", "filename": "tests/ui/lint/must_not_suspend/trait.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Flint%2Fmust_not_suspend%2Ftrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Flint%2Fmust_not_suspend%2Ftrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fmust_not_suspend%2Ftrait.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -1,3 +1,6 @@\n+// revisions: no_drop_tracking drop_tracking drop_tracking_mir\n+// [drop_tracking] compile-flags: -Zdrop-tracking\n+// [drop_tracking_mir] compile-flags: -Zdrop-tracking-mir\n // edition:2018\n #![feature(must_not_suspend)]\n #![deny(must_not_suspend)]\n@@ -22,6 +25,9 @@ pub async fn uhoh() {\n     let _guard2 = r#dyn(); //~ ERROR boxed `Wow` trait object held across\n \n     other().await;\n+\n+    drop(_guard1);\n+    drop(_guard2);\n }\n \n fn main() {"}, {"sha": "6e62a228a43a5a13a2f379b57c9392dc15060dbd", "filename": "tests/ui/lint/must_not_suspend/trait.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Flint%2Fmust_not_suspend%2Ftrait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Flint%2Fmust_not_suspend%2Ftrait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fmust_not_suspend%2Ftrait.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -1,5 +1,5 @@\n error: implementer of `Wow` held across a suspend point, but should not be\n-  --> $DIR/trait.rs:21:9\n+  --> $DIR/trait.rs:24:9\n    |\n LL |     let _guard1 = r#impl();\n    |         ^^^^^^^\n@@ -8,18 +8,18 @@ LL |     other().await;\n    |            ------ the value is held across this suspend point\n    |\n help: consider using a block (`{ ... }`) to shrink the value's scope, ending before the suspend point\n-  --> $DIR/trait.rs:21:9\n+  --> $DIR/trait.rs:24:9\n    |\n LL |     let _guard1 = r#impl();\n    |         ^^^^^^^\n note: the lint level is defined here\n-  --> $DIR/trait.rs:3:9\n+  --> $DIR/trait.rs:6:9\n    |\n LL | #![deny(must_not_suspend)]\n    |         ^^^^^^^^^^^^^^^^\n \n error: boxed `Wow` trait object held across a suspend point, but should not be\n-  --> $DIR/trait.rs:22:9\n+  --> $DIR/trait.rs:25:9\n    |\n LL |     let _guard2 = r#dyn();\n    |         ^^^^^^^\n@@ -28,7 +28,7 @@ LL |     other().await;\n    |            ------ the value is held across this suspend point\n    |\n help: consider using a block (`{ ... }`) to shrink the value's scope, ending before the suspend point\n-  --> $DIR/trait.rs:22:9\n+  --> $DIR/trait.rs:25:9\n    |\n LL |     let _guard2 = r#dyn();\n    |         ^^^^^^^"}, {"sha": "f89b3e341fd8c2f862b65508a08fc591148da710", "filename": "tests/ui/lint/must_not_suspend/unit.drop_tracking.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Flint%2Fmust_not_suspend%2Funit.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Flint%2Fmust_not_suspend%2Funit.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fmust_not_suspend%2Funit.drop_tracking.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -0,0 +1,26 @@\n+error: `Umm` held across a suspend point, but should not be\n+  --> $DIR/unit.rs:22:9\n+   |\n+LL |     let _guard = bar();\n+   |         ^^^^^^\n+LL |     other().await;\n+   |            ------ the value is held across this suspend point\n+   |\n+note: You gotta use Umm's, ya know?\n+  --> $DIR/unit.rs:22:9\n+   |\n+LL |     let _guard = bar();\n+   |         ^^^^^^\n+help: consider using a block (`{ ... }`) to shrink the value's scope, ending before the suspend point\n+  --> $DIR/unit.rs:22:9\n+   |\n+LL |     let _guard = bar();\n+   |         ^^^^^^\n+note: the lint level is defined here\n+  --> $DIR/unit.rs:6:9\n+   |\n+LL | #![deny(must_not_suspend)]\n+   |         ^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "f89b3e341fd8c2f862b65508a08fc591148da710", "filename": "tests/ui/lint/must_not_suspend/unit.drop_tracking_mir.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Flint%2Fmust_not_suspend%2Funit.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Flint%2Fmust_not_suspend%2Funit.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fmust_not_suspend%2Funit.drop_tracking_mir.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -0,0 +1,26 @@\n+error: `Umm` held across a suspend point, but should not be\n+  --> $DIR/unit.rs:22:9\n+   |\n+LL |     let _guard = bar();\n+   |         ^^^^^^\n+LL |     other().await;\n+   |            ------ the value is held across this suspend point\n+   |\n+note: You gotta use Umm's, ya know?\n+  --> $DIR/unit.rs:22:9\n+   |\n+LL |     let _guard = bar();\n+   |         ^^^^^^\n+help: consider using a block (`{ ... }`) to shrink the value's scope, ending before the suspend point\n+  --> $DIR/unit.rs:22:9\n+   |\n+LL |     let _guard = bar();\n+   |         ^^^^^^\n+note: the lint level is defined here\n+  --> $DIR/unit.rs:6:9\n+   |\n+LL | #![deny(must_not_suspend)]\n+   |         ^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "f89b3e341fd8c2f862b65508a08fc591148da710", "filename": "tests/ui/lint/must_not_suspend/unit.no_drop_tracking.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Flint%2Fmust_not_suspend%2Funit.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Flint%2Fmust_not_suspend%2Funit.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fmust_not_suspend%2Funit.no_drop_tracking.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -0,0 +1,26 @@\n+error: `Umm` held across a suspend point, but should not be\n+  --> $DIR/unit.rs:22:9\n+   |\n+LL |     let _guard = bar();\n+   |         ^^^^^^\n+LL |     other().await;\n+   |            ------ the value is held across this suspend point\n+   |\n+note: You gotta use Umm's, ya know?\n+  --> $DIR/unit.rs:22:9\n+   |\n+LL |     let _guard = bar();\n+   |         ^^^^^^\n+help: consider using a block (`{ ... }`) to shrink the value's scope, ending before the suspend point\n+  --> $DIR/unit.rs:22:9\n+   |\n+LL |     let _guard = bar();\n+   |         ^^^^^^\n+note: the lint level is defined here\n+  --> $DIR/unit.rs:6:9\n+   |\n+LL | #![deny(must_not_suspend)]\n+   |         ^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "fbc51b366817c9b482a004a108673566729fc30b", "filename": "tests/ui/lint/must_not_suspend/unit.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Flint%2Fmust_not_suspend%2Funit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Flint%2Fmust_not_suspend%2Funit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fmust_not_suspend%2Funit.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -1,3 +1,6 @@\n+// revisions: no_drop_tracking drop_tracking drop_tracking_mir\n+// [drop_tracking] compile-flags: -Zdrop-tracking\n+// [drop_tracking_mir] compile-flags: -Zdrop-tracking-mir\n // edition:2018\n #![feature(must_not_suspend)]\n #![deny(must_not_suspend)]\n@@ -7,7 +10,6 @@ struct Umm {\n     i: i64\n }\n \n-\n fn bar() -> Umm {\n     Umm {\n         i: 1\n@@ -19,6 +21,7 @@ async fn other() {}\n pub async fn uhoh() {\n     let _guard = bar(); //~ ERROR `Umm` held across\n     other().await;\n+    drop(_guard);\n }\n \n fn main() {"}, {"sha": "50ca292c2f6fd625d95880494b4eda552cea0c52", "filename": "tests/ui/lint/must_not_suspend/unit.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Flint%2Fmust_not_suspend%2Funit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Flint%2Fmust_not_suspend%2Funit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fmust_not_suspend%2Funit.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -1,23 +1,23 @@\n error: `Umm` held across a suspend point, but should not be\n-  --> $DIR/unit.rs:20:9\n+  --> $DIR/unit.rs:23:9\n    |\n LL |     let _guard = bar();\n    |         ^^^^^^\n LL |     other().await;\n    |            ------ the value is held across this suspend point\n    |\n note: You gotta use Umm's, ya know?\n-  --> $DIR/unit.rs:20:9\n+  --> $DIR/unit.rs:23:9\n    |\n LL |     let _guard = bar();\n    |         ^^^^^^\n help: consider using a block (`{ ... }`) to shrink the value's scope, ending before the suspend point\n-  --> $DIR/unit.rs:20:9\n+  --> $DIR/unit.rs:23:9\n    |\n LL |     let _guard = bar();\n    |         ^^^^^^\n note: the lint level is defined here\n-  --> $DIR/unit.rs:3:9\n+  --> $DIR/unit.rs:6:9\n    |\n LL | #![deny(must_not_suspend)]\n    |         ^^^^^^^^^^^^^^^^"}, {"sha": "7a422891ab1026ce9cc3a2cb4f2944bcae16854c", "filename": "tests/ui/lint/must_not_suspend/warn.drop_tracking.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Flint%2Fmust_not_suspend%2Fwarn.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Flint%2Fmust_not_suspend%2Fwarn.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fmust_not_suspend%2Fwarn.drop_tracking.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -0,0 +1,26 @@\n+warning: `Umm` held across a suspend point, but should not be\n+  --> $DIR/warn.rs:24:9\n+   |\n+LL |     let _guard = bar();\n+   |         ^^^^^^\n+LL |     other().await;\n+   |            ------ the value is held across this suspend point\n+   |\n+note: You gotta use Umm's, ya know?\n+  --> $DIR/warn.rs:24:9\n+   |\n+LL |     let _guard = bar();\n+   |         ^^^^^^\n+help: consider using a block (`{ ... }`) to shrink the value's scope, ending before the suspend point\n+  --> $DIR/warn.rs:24:9\n+   |\n+LL |     let _guard = bar();\n+   |         ^^^^^^\n+note: the lint level is defined here\n+  --> $DIR/warn.rs:7:9\n+   |\n+LL | #![warn(must_not_suspend)]\n+   |         ^^^^^^^^^^^^^^^^\n+\n+warning: 1 warning emitted\n+"}, {"sha": "7a422891ab1026ce9cc3a2cb4f2944bcae16854c", "filename": "tests/ui/lint/must_not_suspend/warn.drop_tracking_mir.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Flint%2Fmust_not_suspend%2Fwarn.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Flint%2Fmust_not_suspend%2Fwarn.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fmust_not_suspend%2Fwarn.drop_tracking_mir.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -0,0 +1,26 @@\n+warning: `Umm` held across a suspend point, but should not be\n+  --> $DIR/warn.rs:24:9\n+   |\n+LL |     let _guard = bar();\n+   |         ^^^^^^\n+LL |     other().await;\n+   |            ------ the value is held across this suspend point\n+   |\n+note: You gotta use Umm's, ya know?\n+  --> $DIR/warn.rs:24:9\n+   |\n+LL |     let _guard = bar();\n+   |         ^^^^^^\n+help: consider using a block (`{ ... }`) to shrink the value's scope, ending before the suspend point\n+  --> $DIR/warn.rs:24:9\n+   |\n+LL |     let _guard = bar();\n+   |         ^^^^^^\n+note: the lint level is defined here\n+  --> $DIR/warn.rs:7:9\n+   |\n+LL | #![warn(must_not_suspend)]\n+   |         ^^^^^^^^^^^^^^^^\n+\n+warning: 1 warning emitted\n+"}, {"sha": "7a422891ab1026ce9cc3a2cb4f2944bcae16854c", "filename": "tests/ui/lint/must_not_suspend/warn.no_drop_tracking.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Flint%2Fmust_not_suspend%2Fwarn.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Flint%2Fmust_not_suspend%2Fwarn.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fmust_not_suspend%2Fwarn.no_drop_tracking.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -0,0 +1,26 @@\n+warning: `Umm` held across a suspend point, but should not be\n+  --> $DIR/warn.rs:24:9\n+   |\n+LL |     let _guard = bar();\n+   |         ^^^^^^\n+LL |     other().await;\n+   |            ------ the value is held across this suspend point\n+   |\n+note: You gotta use Umm's, ya know?\n+  --> $DIR/warn.rs:24:9\n+   |\n+LL |     let _guard = bar();\n+   |         ^^^^^^\n+help: consider using a block (`{ ... }`) to shrink the value's scope, ending before the suspend point\n+  --> $DIR/warn.rs:24:9\n+   |\n+LL |     let _guard = bar();\n+   |         ^^^^^^\n+note: the lint level is defined here\n+  --> $DIR/warn.rs:7:9\n+   |\n+LL | #![warn(must_not_suspend)]\n+   |         ^^^^^^^^^^^^^^^^\n+\n+warning: 1 warning emitted\n+"}, {"sha": "5a4863169ea358613ed6a35a83ff535f14d430d5", "filename": "tests/ui/lint/must_not_suspend/warn.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Flint%2Fmust_not_suspend%2Fwarn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Flint%2Fmust_not_suspend%2Fwarn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fmust_not_suspend%2Fwarn.rs?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -1,3 +1,6 @@\n+// revisions: no_drop_tracking drop_tracking drop_tracking_mir\n+// [drop_tracking] compile-flags: -Zdrop-tracking\n+// [drop_tracking_mir] compile-flags: -Zdrop-tracking-mir\n // edition:2018\n // run-pass\n #![feature(must_not_suspend)]\n@@ -20,6 +23,7 @@ async fn other() {}\n pub async fn uhoh() {\n     let _guard = bar(); //~ WARNING `Umm` held across\n     other().await;\n+    drop(_guard);\n }\n \n fn main() {"}, {"sha": "7a422891ab1026ce9cc3a2cb4f2944bcae16854c", "filename": "tests/ui/lint/must_not_suspend/warn.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Flint%2Fmust_not_suspend%2Fwarn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Flint%2Fmust_not_suspend%2Fwarn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fmust_not_suspend%2Fwarn.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -1,23 +1,23 @@\n warning: `Umm` held across a suspend point, but should not be\n-  --> $DIR/warn.rs:21:9\n+  --> $DIR/warn.rs:24:9\n    |\n LL |     let _guard = bar();\n    |         ^^^^^^\n LL |     other().await;\n    |            ------ the value is held across this suspend point\n    |\n note: You gotta use Umm's, ya know?\n-  --> $DIR/warn.rs:21:9\n+  --> $DIR/warn.rs:24:9\n    |\n LL |     let _guard = bar();\n    |         ^^^^^^\n help: consider using a block (`{ ... }`) to shrink the value's scope, ending before the suspend point\n-  --> $DIR/warn.rs:21:9\n+  --> $DIR/warn.rs:24:9\n    |\n LL |     let _guard = bar();\n    |         ^^^^^^\n note: the lint level is defined here\n-  --> $DIR/warn.rs:4:9\n+  --> $DIR/warn.rs:7:9\n    |\n LL | #![warn(must_not_suspend)]\n    |         ^^^^^^^^^^^^^^^^"}, {"sha": "fe490a6000d7bc6eaabd936c7f0fc8d1555f47c3", "filename": "tests/ui/symbol-names/basic.legacy.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fsymbol-names%2Fbasic.legacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fsymbol-names%2Fbasic.legacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsymbol-names%2Fbasic.legacy.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -1,10 +1,10 @@\n-error: symbol-name(_ZN5basic4main17hcbad207c0eeb0b3bE)\n+error: symbol-name(_ZN5basic4main17he9f658e438f1cac0E)\n   --> $DIR/basic.rs:8:1\n    |\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(basic::main::hcbad207c0eeb0b3b)\n+error: demangling(basic::main::he9f658e438f1cac0)\n   --> $DIR/basic.rs:8:1\n    |\n LL | #[rustc_symbol_name]"}, {"sha": "29b42f48d803a09ccd6ee8d036daf65e909e3f8e", "filename": "tests/ui/symbol-names/issue-60925.legacy.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fsymbol-names%2Fissue-60925.legacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cd6bad51fb34a0d89e97c27814041fe4d0838b5/tests%2Fui%2Fsymbol-names%2Fissue-60925.legacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsymbol-names%2Fissue-60925.legacy.stderr?ref=6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "patch": "@@ -1,10 +1,10 @@\n-error: symbol-name(_ZN11issue_609253foo37Foo$LT$issue_60925..llv$u6d$..Foo$GT$3foo17h2f2efcf580c9b1eeE)\n+error: symbol-name(_ZN11issue_609253foo37Foo$LT$issue_60925..llv$u6d$..Foo$GT$3foo17h13209029be24b923E)\n   --> $DIR/issue-60925.rs:21:9\n    |\n LL |         #[rustc_symbol_name]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(issue_60925::foo::Foo<issue_60925::llvm::Foo>::foo::h2f2efcf580c9b1ee)\n+error: demangling(issue_60925::foo::Foo<issue_60925::llvm::Foo>::foo::h13209029be24b923)\n   --> $DIR/issue-60925.rs:21:9\n    |\n LL |         #[rustc_symbol_name]"}]}