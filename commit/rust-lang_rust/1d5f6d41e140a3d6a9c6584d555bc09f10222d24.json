{"sha": "1d5f6d41e140a3d6a9c6584d555bc09f10222d24", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkNWY2ZDQxZTE0MGEzZDZhOWM2NTg0ZDU1NWJjMDlmMTAyMjJkMjQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-27T08:42:56Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-27T08:42:56Z"}, "message": "Auto merge of #68165 - thomcc:lt_ones, r=sfackler\n\nAdd leading_ones and trailing_ones methods to the primitive integer types\n\nI was surprised these were missing (given that `leading_zeros` and `trailing_zeros` exist), and they seem trivial and hopefully not controversial.\n\nNote that there's some precedent in that `count_ones` and `count_zeros` are both supported even though only one of these has an intrinsic.\n\nI'm not sure if these need a `rustc_const_unstable` flag (the tests don't seem to mind that it's missing). I just made them const, since there's not really any reason for these to be non-const when the `_zeros` variants are const.\n\nNote: My understanding is trivial stuff like (hopefully) this can land without an RFC, but I'm not fully sure about the process though. Questions like \"when does the tracking issue get filed?\", are a total mystery to me. So, any guidance is appreciated, and sorry in advance if I should have gone through some more involved process for this.", "tree": {"sha": "a8563b9552a092e5660b1a3cde97de357dbd6a80", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a8563b9552a092e5660b1a3cde97de357dbd6a80"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d5f6d41e140a3d6a9c6584d555bc09f10222d24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d5f6d41e140a3d6a9c6584d555bc09f10222d24", "html_url": "https://github.com/rust-lang/rust/commit/1d5f6d41e140a3d6a9c6584d555bc09f10222d24", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d5f6d41e140a3d6a9c6584d555bc09f10222d24/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "320ada6479b3e29c7d9a66bc56ac44c2d2b57566", "url": "https://api.github.com/repos/rust-lang/rust/commits/320ada6479b3e29c7d9a66bc56ac44c2d2b57566", "html_url": "https://github.com/rust-lang/rust/commit/320ada6479b3e29c7d9a66bc56ac44c2d2b57566"}, {"sha": "783a7dc8ed03a38910b9ea5ded11139616dfa67b", "url": "https://api.github.com/repos/rust-lang/rust/commits/783a7dc8ed03a38910b9ea5ded11139616dfa67b", "html_url": "https://github.com/rust-lang/rust/commit/783a7dc8ed03a38910b9ea5ded11139616dfa67b"}], "stats": {"total": 138, "additions": 138, "deletions": 0}, "files": [{"sha": "91848abd68d36136ee4fc77c807a7d12d042f316", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/1d5f6d41e140a3d6a9c6584d555bc09f10222d24/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d5f6d41e140a3d6a9c6584d555bc09f10222d24/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=1d5f6d41e140a3d6a9c6584d555bc09f10222d24", "patch": "@@ -393,6 +393,48 @@ $EndFeature, \"\n             }\n         }\n \n+        doc_comment! {\n+            concat!(\"Returns the number of leading ones in the binary representation of `self`.\n+\n+# Examples\n+\n+Basic usage:\n+\n+```\n+\", $Feature, \"#![feature(leading_trailing_ones)]\n+let n = -1\", stringify!($SelfT), \";\n+\n+assert_eq!(n.leading_ones(), \", stringify!($BITS), \");\",\n+$EndFeature, \"\n+```\"),\n+            #[unstable(feature = \"leading_trailing_ones\", issue = \"57969\")]\n+            #[inline]\n+            pub const fn leading_ones(self) -> u32 {\n+                (self as $UnsignedT).leading_ones()\n+            }\n+        }\n+\n+        doc_comment! {\n+            concat!(\"Returns the number of trailing ones in the binary representation of `self`.\n+\n+# Examples\n+\n+Basic usage:\n+\n+```\n+\", $Feature, \"#![feature(leading_trailing_ones)]\n+let n = 3\", stringify!($SelfT), \";\n+\n+assert_eq!(n.trailing_ones(), 2);\",\n+$EndFeature, \"\n+```\"),\n+            #[unstable(feature = \"leading_trailing_ones\", issue = \"57969\")]\n+            #[inline]\n+            pub const fn trailing_ones(self) -> u32 {\n+                (self as $UnsignedT).trailing_ones()\n+            }\n+        }\n+\n         doc_comment! {\n             concat!(\"Shifts the bits to the left by a specified amount, `n`,\n wrapping the truncated bits to the end of the resulting integer.\n@@ -2485,6 +2527,47 @@ assert_eq!(n.trailing_zeros(), 3);\", $EndFeature, \"\n             }\n         }\n \n+        doc_comment! {\n+            concat!(\"Returns the number of leading ones in the binary representation of `self`.\n+\n+# Examples\n+\n+Basic usage:\n+\n+```\n+\", $Feature, \"#![feature(leading_trailing_ones)]\n+let n = !(\", stringify!($SelfT), \"::max_value() >> 2);\n+\n+assert_eq!(n.leading_ones(), 2);\", $EndFeature, \"\n+```\"),\n+            #[unstable(feature = \"leading_trailing_ones\", issue = \"57969\")]\n+            #[inline]\n+            pub const fn leading_ones(self) -> u32 {\n+                (!self).leading_zeros()\n+            }\n+        }\n+\n+        doc_comment! {\n+            concat!(\"Returns the number of trailing ones in the binary representation\n+of `self`.\n+\n+# Examples\n+\n+Basic usage:\n+\n+```\n+\", $Feature, \"#![feature(leading_trailing_ones)]\n+let n = 0b1010111\", stringify!($SelfT), \";\n+\n+assert_eq!(n.trailing_ones(), 3);\", $EndFeature, \"\n+```\"),\n+            #[unstable(feature = \"leading_trailing_ones\", issue = \"57969\")]\n+            #[inline]\n+            pub const fn trailing_ones(self) -> u32 {\n+                (!self).trailing_zeros()\n+            }\n+        }\n+\n         doc_comment! {\n             concat!(\"Shifts the bits to the left by a specified amount, `n`,\n wrapping the truncated bits to the end of the resulting integer."}, {"sha": "21e279066e739ea2773e6ad1e9927a6ec77e4cb2", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1d5f6d41e140a3d6a9c6584d555bc09f10222d24/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d5f6d41e140a3d6a9c6584d555bc09f10222d24/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=1d5f6d41e140a3d6a9c6584d555bc09f10222d24", "patch": "@@ -42,6 +42,7 @@\n #![feature(const_raw_ptr_deref)]\n #![feature(never_type)]\n #![feature(unwrap_infallible)]\n+#![feature(leading_trailing_ones)]\n \n extern crate test;\n "}, {"sha": "48a49073b2cf56a226f5674995d229abcbb96fba", "filename": "src/libcore/tests/num/int_macros.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/1d5f6d41e140a3d6a9c6584d555bc09f10222d24/src%2Flibcore%2Ftests%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d5f6d41e140a3d6a9c6584d555bc09f10222d24/src%2Flibcore%2Ftests%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fnum%2Fint_macros.rs?ref=1d5f6d41e140a3d6a9c6584d555bc09f10222d24", "patch": "@@ -89,6 +89,33 @@ macro_rules! int_module {\n                 assert_eq!(C.count_zeros(), bits as u32 - 5);\n             }\n \n+            #[test]\n+            fn test_leading_trailing_ones() {\n+                let bits = (mem::size_of::<$T>() * 8) as u32;\n+\n+                let a: $T = 0b0101_1111;\n+                assert_eq!(a.trailing_ones(), 5);\n+                assert_eq!((!a).leading_ones(), bits - 7);\n+\n+                assert_eq!(a.reverse_bits().leading_ones(), 5);\n+\n+                assert_eq!(_1.leading_ones(), bits);\n+                assert_eq!(_1.trailing_ones(), bits);\n+\n+                assert_eq!((_1 << 1).trailing_ones(), 0);\n+                assert_eq!(MAX.leading_ones(), 0);\n+\n+                assert_eq!((_1 << 1).leading_ones(), bits - 1);\n+                assert_eq!(MAX.trailing_ones(), bits - 1);\n+\n+                assert_eq!(_0.leading_ones(), 0);\n+                assert_eq!(_0.trailing_ones(), 0);\n+\n+                let x: $T = 0b0010_1100;\n+                assert_eq!(x.leading_ones(), 0);\n+                assert_eq!(x.trailing_ones(), 0);\n+            }\n+\n             #[test]\n             fn test_rotate() {\n                 assert_eq!(A.rotate_left(6).rotate_right(2).rotate_right(4), A);"}, {"sha": "8f1ca8e6fac2c5a60be8072c349fa87cc5d233b5", "filename": "src/libcore/tests/num/uint_macros.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/1d5f6d41e140a3d6a9c6584d555bc09f10222d24/src%2Flibcore%2Ftests%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d5f6d41e140a3d6a9c6584d555bc09f10222d24/src%2Flibcore%2Ftests%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fnum%2Fuint_macros.rs?ref=1d5f6d41e140a3d6a9c6584d555bc09f10222d24", "patch": "@@ -53,6 +53,33 @@ macro_rules! uint_module {\n                 assert!(C.count_zeros() == bits as u32 - 5);\n             }\n \n+            #[test]\n+            fn test_leading_trailing_ones() {\n+                let bits = (mem::size_of::<$T>() * 8) as u32;\n+\n+                let a: $T = 0b0101_1111;\n+                assert_eq!(a.trailing_ones(), 5);\n+                assert_eq!((!a).leading_ones(), bits - 7);\n+\n+                assert_eq!(a.reverse_bits().leading_ones(), 5);\n+\n+                assert_eq!(_1.leading_ones(), bits);\n+                assert_eq!(_1.trailing_ones(), bits);\n+\n+                assert_eq!((_1 << 1).trailing_ones(), 0);\n+                assert_eq!((_1 >> 1).leading_ones(), 0);\n+\n+                assert_eq!((_1 << 1).leading_ones(), bits - 1);\n+                assert_eq!((_1 >> 1).trailing_ones(), bits - 1);\n+\n+                assert_eq!(_0.leading_ones(), 0);\n+                assert_eq!(_0.trailing_ones(), 0);\n+\n+                let x: $T = 0b0010_1100;\n+                assert_eq!(x.leading_ones(), 0);\n+                assert_eq!(x.trailing_ones(), 0);\n+            }\n+\n             #[test]\n             fn test_rotate() {\n                 assert_eq!(A.rotate_left(6).rotate_right(2).rotate_right(4), A);"}]}