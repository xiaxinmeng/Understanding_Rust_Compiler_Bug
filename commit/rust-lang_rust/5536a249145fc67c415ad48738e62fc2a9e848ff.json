{"sha": "5536a249145fc67c415ad48738e62fc2a9e848ff", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1MzZhMjQ5MTQ1ZmM2N2M0MTVhZDQ4NzM4ZTYyZmMyYTllODQ4ZmY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-06-26T18:51:29Z"}, "committer": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-06-26T18:51:29Z"}, "message": "Merge #1447\n\n1447: make sure that CrateDefMap is independent from syntax r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "0dacb8b02ca5b705123a022893512c61d3c8c718", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0dacb8b02ca5b705123a022893512c61d3c8c718"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5536a249145fc67c415ad48738e62fc2a9e848ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5536a249145fc67c415ad48738e62fc2a9e848ff", "html_url": "https://github.com/rust-lang/rust/commit/5536a249145fc67c415ad48738e62fc2a9e848ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5536a249145fc67c415ad48738e62fc2a9e848ff/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "203d5dd0d0092b505db9efcff377fea154cbfe11", "url": "https://api.github.com/repos/rust-lang/rust/commits/203d5dd0d0092b505db9efcff377fea154cbfe11", "html_url": "https://github.com/rust-lang/rust/commit/203d5dd0d0092b505db9efcff377fea154cbfe11"}, {"sha": "6e2369938a6f5214680dcc0f4bb58cdb20dc1015", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e2369938a6f5214680dcc0f4bb58cdb20dc1015", "html_url": "https://github.com/rust-lang/rust/commit/6e2369938a6f5214680dcc0f4bb58cdb20dc1015"}], "stats": {"total": 103, "additions": 55, "deletions": 48}, "files": [{"sha": "8f4de1c85c6c27d5bdd88a8d528aeb750447b928", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 33, "deletions": 27, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/5536a249145fc67c415ad48738e62fc2a9e848ff/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5536a249145fc67c415ad48738e62fc2a9e848ff/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=5536a249145fc67c415ad48738e62fc2a9e848ff", "patch": "@@ -20,13 +20,41 @@ use crate::{\n     lang_item::{LangItems, LangItemTarget}, type_alias::TypeAliasData,\n };\n \n-// This database has access to source code, so queries here are not really\n-// incremental.\n-#[salsa::query_group(AstDatabaseStorage)]\n-pub trait AstDatabase: SourceDatabase {\n+/// We store all interned things in the single QueryGroup.\n+///\n+/// This is done mainly to allow both \"volatile\" `AstDatabase` and \"stable\"\n+/// `DefDatabase` to access macros, without adding hard dependencies between the\n+/// two.\n+#[salsa::query_group(InternDatabaseStorage)]\n+pub trait InternDatabase: SourceDatabase {\n     #[salsa::interned]\n     fn intern_macro(&self, macro_call: MacroCallLoc) -> ids::MacroCallId;\n+    #[salsa::interned]\n+    fn intern_function(&self, loc: ids::ItemLoc<ast::FnDef>) -> ids::FunctionId;\n+    #[salsa::interned]\n+    fn intern_struct(&self, loc: ids::ItemLoc<ast::StructDef>) -> ids::StructId;\n+    #[salsa::interned]\n+    fn intern_enum(&self, loc: ids::ItemLoc<ast::EnumDef>) -> ids::EnumId;\n+    #[salsa::interned]\n+    fn intern_const(&self, loc: ids::ItemLoc<ast::ConstDef>) -> ids::ConstId;\n+    #[salsa::interned]\n+    fn intern_static(&self, loc: ids::ItemLoc<ast::StaticDef>) -> ids::StaticId;\n+    #[salsa::interned]\n+    fn intern_trait(&self, loc: ids::ItemLoc<ast::TraitDef>) -> ids::TraitId;\n+    #[salsa::interned]\n+    fn intern_type_alias(&self, loc: ids::ItemLoc<ast::TypeAliasDef>) -> ids::TypeAliasId;\n \n+    // Interned IDs for Chalk integration\n+    #[salsa::interned]\n+    fn intern_type_ctor(&self, type_ctor: TypeCtor) -> ids::TypeCtorId;\n+    #[salsa::interned]\n+    fn intern_impl_block(&self, impl_block: ImplBlock) -> ids::GlobalImplId;\n+}\n+\n+/// This database has access to source code, so queries here are not really\n+/// incremental.\n+#[salsa::query_group(AstDatabaseStorage)]\n+pub trait AstDatabase: InternDatabase {\n     #[salsa::invoke(crate::source_id::AstIdMap::ast_id_map_query)]\n     fn ast_id_map(&self, file_id: HirFileId) -> Arc<AstIdMap>;\n     #[salsa::transparent]\n@@ -40,7 +68,6 @@ pub trait AstDatabase: SourceDatabase {\n \n     #[salsa::invoke(crate::ids::macro_def_query)]\n     fn macro_def(&self, macro_id: MacroDefId) -> Option<Arc<mbe::MacroRules>>;\n-\n     #[salsa::invoke(crate::ids::macro_arg_query)]\n     fn macro_arg(&self, macro_call: ids::MacroCallId) -> Option<Arc<tt::Subtree>>;\n \n@@ -51,28 +78,7 @@ pub trait AstDatabase: SourceDatabase {\n // This database uses `AstDatabase` internally,\n #[salsa::query_group(DefDatabaseStorage)]\n #[salsa::requires(AstDatabase)]\n-pub trait DefDatabase: SourceDatabase {\n-    #[salsa::interned]\n-    fn intern_function(&self, loc: ids::ItemLoc<ast::FnDef>) -> ids::FunctionId;\n-    #[salsa::interned]\n-    fn intern_struct(&self, loc: ids::ItemLoc<ast::StructDef>) -> ids::StructId;\n-    #[salsa::interned]\n-    fn intern_enum(&self, loc: ids::ItemLoc<ast::EnumDef>) -> ids::EnumId;\n-    #[salsa::interned]\n-    fn intern_const(&self, loc: ids::ItemLoc<ast::ConstDef>) -> ids::ConstId;\n-    #[salsa::interned]\n-    fn intern_static(&self, loc: ids::ItemLoc<ast::StaticDef>) -> ids::StaticId;\n-    #[salsa::interned]\n-    fn intern_trait(&self, loc: ids::ItemLoc<ast::TraitDef>) -> ids::TraitId;\n-    #[salsa::interned]\n-    fn intern_type_alias(&self, loc: ids::ItemLoc<ast::TypeAliasDef>) -> ids::TypeAliasId;\n-\n-    // Interned IDs for Chalk integration\n-    #[salsa::interned]\n-    fn intern_type_ctor(&self, type_ctor: TypeCtor) -> ids::TypeCtorId;\n-    #[salsa::interned]\n-    fn intern_impl_block(&self, impl_block: ImplBlock) -> ids::GlobalImplId;\n-\n+pub trait DefDatabase: InternDatabase {\n     #[salsa::invoke(crate::adt::StructData::struct_data_query)]\n     fn struct_data(&self, s: Struct) -> Arc<StructData>;\n "}, {"sha": "b7215ac03490983a3682e8bb8dc161489d76c40e", "filename": "crates/ra_hir/src/ids.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5536a249145fc67c415ad48738e62fc2a9e848ff/crates%2Fra_hir%2Fsrc%2Fids.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5536a249145fc67c415ad48738e62fc2a9e848ff/crates%2Fra_hir%2Fsrc%2Fids.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fids.rs?ref=5536a249145fc67c415ad48738e62fc2a9e848ff", "patch": "@@ -9,7 +9,7 @@ use ra_prof::profile;\n use mbe::MacroRules;\n \n use crate::{\n-    Module, DefDatabase, AstId, FileAstId, AstDatabase, Source,\n+    Module, DefDatabase, AstId, FileAstId, AstDatabase, Source, InternDatabase,\n };\n \n /// hir makes heavy use of ids: integer (u32) handlers to various things. You\n@@ -37,7 +37,7 @@ pub struct HirFileId(HirFileIdRepr);\n impl HirFileId {\n     /// For macro-expansion files, returns the file original source file the\n     /// expansion originated from.\n-    pub fn original_file(self, db: &impl AstDatabase) -> FileId {\n+    pub fn original_file(self, db: &impl InternDatabase) -> FileId {\n         match self.0 {\n             HirFileIdRepr::File(file_id) => file_id,\n             HirFileIdRepr::Macro(macro_file) => {\n@@ -187,7 +187,7 @@ pub struct MacroCallLoc {\n }\n \n impl MacroCallId {\n-    pub(crate) fn loc(self, db: &impl AstDatabase) -> MacroCallLoc {\n+    pub(crate) fn loc(self, db: &impl InternDatabase) -> MacroCallLoc {\n         db.lookup_intern_macro(self)\n     }\n \n@@ -198,7 +198,7 @@ impl MacroCallId {\n }\n \n impl MacroCallLoc {\n-    pub(crate) fn id(self, db: &impl AstDatabase) -> MacroCallId {\n+    pub(crate) fn id(self, db: &impl InternDatabase) -> MacroCallId {\n         db.intern_macro(self)\n     }\n }\n@@ -235,10 +235,13 @@ pub(crate) struct LocationCtx<DB> {\n     file_id: HirFileId,\n }\n \n-impl<'a, DB: DefDatabase + AstDatabase> LocationCtx<&'a DB> {\n+impl<'a, DB: DefDatabase> LocationCtx<&'a DB> {\n     pub(crate) fn new(db: &'a DB, module: Module, file_id: HirFileId) -> LocationCtx<&'a DB> {\n         LocationCtx { db, module, file_id }\n     }\n+}\n+\n+impl<'a, DB: DefDatabase + AstDatabase> LocationCtx<&'a DB> {\n     pub(crate) fn to_def<N, DEF>(self, ast: &N) -> DEF\n     where\n         N: AstNode,\n@@ -257,10 +260,7 @@ pub(crate) trait AstItemDef<N: AstNode>: salsa::InternKey + Clone {\n         let item_id = items.ast_id(ast);\n         Self::from_ast_id(ctx, item_id)\n     }\n-    fn from_ast_id(\n-        ctx: LocationCtx<&(impl AstDatabase + DefDatabase)>,\n-        ast_id: FileAstId<N>,\n-    ) -> Self {\n+    fn from_ast_id(ctx: LocationCtx<&impl DefDatabase>, ast_id: FileAstId<N>) -> Self {\n         let loc = ItemLoc { module: ctx.module, ast_id: ast_id.with_file_id(ctx.file_id) };\n         Self::intern(ctx.db, loc)\n     }"}, {"sha": "5afd846f5221316214fc07236739f83b805c2069", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5536a249145fc67c415ad48738e62fc2a9e848ff/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5536a249145fc67c415ad48738e62fc2a9e848ff/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=5536a249145fc67c415ad48738e62fc2a9e848ff", "patch": "@@ -47,7 +47,7 @@ mod code_model;\n mod marks;\n \n use crate::{\n-    db::{AstDatabase, DefDatabase, HirDatabase},\n+    db::{InternDatabase, AstDatabase, DefDatabase, HirDatabase},\n     name::{AsName, KnownName},\n     source_id::{FileAstId, AstId},\n     resolve::Resolver,"}, {"sha": "c57dfbf01901227e5603a848cf827014722a8861", "filename": "crates/ra_hir/src/mock.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5536a249145fc67c415ad48738e62fc2a9e848ff/crates%2Fra_hir%2Fsrc%2Fmock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5536a249145fc67c415ad48738e62fc2a9e848ff/crates%2Fra_hir%2Fsrc%2Fmock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fmock.rs?ref=5536a249145fc67c415ad48738e62fc2a9e848ff", "patch": "@@ -15,6 +15,7 @@ pub const WORKSPACE: SourceRootId = SourceRootId(0);\n \n #[salsa::database(\n     ra_db::SourceDatabaseStorage,\n+    db::InternDatabaseStorage,\n     db::AstDatabaseStorage,\n     db::DefDatabaseStorage,\n     db::HirDatabaseStorage"}, {"sha": "f4ca454e4e46ed641b117d619b72ebd58b5990b4", "filename": "crates/ra_hir/src/nameres.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5536a249145fc67c415ad48738e62fc2a9e848ff/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5536a249145fc67c415ad48738e62fc2a9e848ff/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres.rs?ref=5536a249145fc67c415ad48738e62fc2a9e848ff", "patch": "@@ -231,7 +231,9 @@ fn or(left: ItemOrMacro, right: ItemOrMacro) -> ItemOrMacro {\n \n impl CrateDefMap {\n     pub(crate) fn crate_def_map_query(\n-        db: &(impl DefDatabase + AstDatabase),\n+        // Note that this doesn't have `+ AstDatabase`!\n+        // This gurantess that `CrateDefMap` is stable across reparses.\n+        db: &impl DefDatabase,\n         krate: Crate,\n     ) -> Arc<CrateDefMap> {\n         let _p = profile(\"crate_def_map_query\");"}, {"sha": "ef4d1ed70f10a15b7b2badebb860624ed5d911f1", "filename": "crates/ra_hir/src/nameres/collector.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5536a249145fc67c415ad48738e62fc2a9e848ff/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5536a249145fc67c415ad48738e62fc2a9e848ff/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs?ref=5536a249145fc67c415ad48738e62fc2a9e848ff", "patch": "@@ -7,7 +7,7 @@ use ra_syntax::ast;\n \n use crate::{\n     Function, Module, Struct, Union, Enum, Const, Static, Trait, TypeAlias, MacroDef,\n-    DefDatabase, HirFileId, Name, Path, AstDatabase,\n+    DefDatabase, HirFileId, Name, Path,\n     KnownName, AstId,\n     nameres::{\n         Resolution, PerNs, ModuleDef, ReachedFixedPoint, ResolveMode,\n@@ -19,10 +19,7 @@ use crate::{\n     either::Either,\n };\n \n-pub(super) fn collect_defs(\n-    db: &(impl DefDatabase + AstDatabase),\n-    mut def_map: CrateDefMap,\n-) -> CrateDefMap {\n+pub(super) fn collect_defs(db: &impl DefDatabase, mut def_map: CrateDefMap) -> CrateDefMap {\n     // populate external prelude\n     for dep in def_map.krate.dependencies(db) {\n         log::debug!(\"crate dep {:?} -> {:?}\", dep.name, dep.krate);\n@@ -95,7 +92,7 @@ struct DefCollector<DB> {\n \n impl<'a, DB> DefCollector<&'a DB>\n where\n-    DB: DefDatabase + AstDatabase,\n+    DB: DefDatabase,\n {\n     fn collect(&mut self) {\n         let crate_graph = self.db.crate_graph();\n@@ -465,7 +462,7 @@ where\n             ModCollector { def_collector: &mut *self, file_id, module_id, raw_items: &raw_items }\n                 .collect(raw_items.items());\n         } else {\n-            log::error!(\"Too deep macro expansion: {}\", macro_call_id.debug_dump(self.db));\n+            log::error!(\"Too deep macro expansion: {:?}\", macro_call_id);\n             self.def_map.poison_macros.insert(macro_def_id);\n         }\n \n@@ -487,7 +484,7 @@ struct ModCollector<'a, D> {\n \n impl<DB> ModCollector<'_, &'_ mut DefCollector<&'_ DB>>\n where\n-    DB: DefDatabase + AstDatabase,\n+    DB: DefDatabase,\n {\n     fn collect(&mut self, items: &[raw::RawItem]) {\n         for item in items {\n@@ -632,7 +629,7 @@ fn is_macro_rules(path: &Path) -> bool {\n }\n \n fn resolve_submodule(\n-    db: &(impl DefDatabase + AstDatabase),\n+    db: &impl DefDatabase,\n     file_id: HirFileId,\n     name: &Name,\n     is_root: bool,\n@@ -675,7 +672,7 @@ mod tests {\n     use rustc_hash::FxHashSet;\n \n     fn do_collect_defs(\n-        db: &(impl DefDatabase + AstDatabase),\n+        db: &impl DefDatabase,\n         def_map: CrateDefMap,\n         monitor: MacroStackMonitor,\n     ) -> CrateDefMap {"}, {"sha": "cb7d30c4317d8ca52091500664f4caf19cdbf3c8", "filename": "crates/ra_ide_api/src/db.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5536a249145fc67c415ad48738e62fc2a9e848ff/crates%2Fra_ide_api%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5536a249145fc67c415ad48738e62fc2a9e848ff/crates%2Fra_ide_api%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdb.rs?ref=5536a249145fc67c415ad48738e62fc2a9e848ff", "patch": "@@ -14,6 +14,7 @@ use crate::{LineIndex, symbol_index::{self, SymbolsDatabase}};\n     ra_db::SourceDatabaseStorage,\n     LineIndexDatabaseStorage,\n     symbol_index::SymbolsDatabaseStorage,\n+    hir::db::InternDatabaseStorage,\n     hir::db::AstDatabaseStorage,\n     hir::db::DefDatabaseStorage,\n     hir::db::HirDatabaseStorage"}]}