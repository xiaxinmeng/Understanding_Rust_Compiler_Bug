{"sha": "dda6c8cf2f035d23ff3f67c5fc0e805bb18cd0a4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkYTZjOGNmMmYwMzVkMjNmZjNmNjdjNWZjMGU4MDViYjE4Y2QwYTQ=", "commit": {"author": {"name": "Mark-Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2016-12-16T01:00:19Z"}, "committer": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2016-12-21T03:02:52Z"}, "message": "Inline base::malloc_raw_dyn.\n\nMove comment about not unwinding into liballoc.", "tree": {"sha": "36067a7a5966694f77dc7549bbec56a4042a2bfc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/36067a7a5966694f77dc7549bbec56a4042a2bfc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dda6c8cf2f035d23ff3f67c5fc0e805bb18cd0a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dda6c8cf2f035d23ff3f67c5fc0e805bb18cd0a4", "html_url": "https://github.com/rust-lang/rust/commit/dda6c8cf2f035d23ff3f67c5fc0e805bb18cd0a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dda6c8cf2f035d23ff3f67c5fc0e805bb18cd0a4/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14ae76d96b87d6b3e8cbe9264534e148ee88fb89", "url": "https://api.github.com/repos/rust-lang/rust/commits/14ae76d96b87d6b3e8cbe9264534e148ee88fb89", "html_url": "https://github.com/rust-lang/rust/commit/14ae76d96b87d6b3e8cbe9264534e148ee88fb89"}], "stats": {"total": 46, "additions": 15, "deletions": 31}, "files": [{"sha": "a1e32636980812b8ba7cd802ee5936cd71d3e0eb", "filename": "src/liballoc/heap.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dda6c8cf2f035d23ff3f67c5fc0e805bb18cd0a4/src%2Fliballoc%2Fheap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dda6c8cf2f035d23ff3f67c5fc0e805bb18cd0a4/src%2Fliballoc%2Fheap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fheap.rs?ref=dda6c8cf2f035d23ff3f67c5fc0e805bb18cd0a4", "patch": "@@ -127,6 +127,7 @@ pub fn usable_size(size: usize, align: usize) -> usize {\n pub const EMPTY: *mut () = 0x1 as *mut ();\n \n /// The allocator for unique pointers.\n+// This function must not unwind. If it does, MIR trans will fail.\n #[cfg(not(test))]\n #[lang = \"exchange_malloc\"]\n #[inline]"}, {"sha": "1efc211b8c35be608b29cfd05cf2b103c67607bc", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dda6c8cf2f035d23ff3f67c5fc0e805bb18cd0a4/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dda6c8cf2f035d23ff3f67c5fc0e805bb18cd0a4/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=dda6c8cf2f035d23ff3f67c5fc0e805bb18cd0a4", "patch": "@@ -327,8 +327,6 @@ language_item_table! {\n     PanicBoundsCheckFnLangItem,      \"panic_bounds_check\",      panic_bounds_check_fn;\n     PanicFmtLangItem,                \"panic_fmt\",               panic_fmt;\n \n-    // ExchangeMallocFnLangItem cannot unwind, or MIR trans will break. See note\n-    // on `malloc_raw_dyn` in librustc_trans/base.rs.\n     ExchangeMallocFnLangItem,        \"exchange_malloc\",         exchange_malloc_fn;\n     ExchangeFreeFnLangItem,          \"exchange_free\",           exchange_free_fn;\n     BoxFreeFnLangItem,               \"box_free\",                box_free_fn;"}, {"sha": "3f477a463abd7c64bbde3c0c697762e14ac97c0d", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 1, "deletions": 28, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/dda6c8cf2f035d23ff3f67c5fc0e805bb18cd0a4/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dda6c8cf2f035d23ff3f67c5fc0e805bb18cd0a4/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=dda6c8cf2f035d23ff3f67c5fc0e805bb18cd0a4", "patch": "@@ -37,7 +37,7 @@ use back::symbol_export::{self, ExportedSymbols};\n use llvm::{Linkage, ValueRef, Vector, get_param};\n use llvm;\n use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n-use middle::lang_items::{LangItem, ExchangeMallocFnLangItem, StartFnLangItem};\n+use middle::lang_items::StartFnLangItem;\n use rustc::ty::subst::Substs;\n use rustc::traits;\n use rustc::ty::{self, Ty, TyCtxt, TypeFoldable};\n@@ -168,33 +168,6 @@ pub fn get_dataptr(bcx: &Builder, fat_ptr: ValueRef) -> ValueRef {\n     bcx.struct_gep(fat_ptr, abi::FAT_PTR_ADDR)\n }\n \n-fn require_alloc_fn<'blk, 'tcx>(\n-    bcx: &BlockAndBuilder<'blk, 'tcx>, info_ty: Ty<'tcx>, it: LangItem\n-) -> DefId {\n-    match bcx.tcx().lang_items.require(it) {\n-        Ok(id) => id,\n-        Err(s) => {\n-            bcx.sess().fatal(&format!(\"allocation of `{}` {}\", info_ty, s));\n-        }\n-    }\n-}\n-\n-// malloc_raw_dyn allocates a box to contain a given type, but with a potentially dynamic size.\n-//\n-// MIR requires that ExchangeMallocFnLangItem cannot unwind.\n-pub fn malloc_raw_dyn<'blk, 'tcx>(bcx: &BlockAndBuilder<'blk, 'tcx>,\n-                                  llty_ptr: Type,\n-                                  info_ty: Ty<'tcx>,\n-                                  size: ValueRef,\n-                                  align: ValueRef)\n-                                  -> ValueRef {\n-    // Allocate space:\n-    let def_id = require_alloc_fn(bcx, info_ty, ExchangeMallocFnLangItem);\n-    let r = Callee::def(bcx.ccx(), def_id, bcx.tcx().intern_substs(&[])).reify(bcx.ccx());\n-    bcx.pointercast(bcx.call(r, &[size, align], None), llty_ptr)\n-}\n-\n-\n pub fn bin_op_to_icmp_predicate(op: hir::BinOp_,\n                                 signed: bool)\n                                 -> llvm::IntPredicate {"}, {"sha": "d15598e76af6e70d74dc3b5a0dc1879f08bf10cc", "filename": "src/librustc_trans/mir/rvalue.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/dda6c8cf2f035d23ff3f67c5fc0e805bb18cd0a4/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dda6c8cf2f035d23ff3f67c5fc0e805bb18cd0a4/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Frvalue.rs?ref=dda6c8cf2f035d23ff3f67c5fc0e805bb18cd0a4", "patch": "@@ -13,6 +13,7 @@ use rustc::ty::{self, Ty};\n use rustc::ty::cast::{CastTy, IntTy};\n use rustc::ty::layout::Layout;\n use rustc::mir;\n+use middle::lang_items::ExchangeMallocFnLangItem;\n \n use asm;\n use base;\n@@ -449,7 +450,18 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                 let llalign = C_uint(bcx.ccx(), align);\n                 let llty_ptr = llty.ptr_to();\n                 let box_ty = bcx.tcx().mk_box(content_ty);\n-                let val = base::malloc_raw_dyn(&bcx, llty_ptr, box_ty, llsize, llalign);\n+\n+                // Allocate space:\n+                let def_id = match bcx.tcx().lang_items.require(ExchangeMallocFnLangItem) {\n+                    Ok(id) => id,\n+                    Err(s) => {\n+                        bcx.sess().fatal(&format!(\"allocation of `{}` {}\", box_ty, s));\n+                    }\n+                };\n+                let r = Callee::def(bcx.ccx(), def_id, bcx.tcx().intern_substs(&[]))\n+                    .reify(bcx.ccx());\n+                let val = bcx.pointercast(bcx.call(r, &[llsize, llalign], None), llty_ptr);\n+\n                 let operand = OperandRef {\n                     val: OperandValue::Immediate(val),\n                     ty: box_ty,"}]}