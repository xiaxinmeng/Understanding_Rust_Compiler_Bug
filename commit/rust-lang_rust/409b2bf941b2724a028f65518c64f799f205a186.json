{"sha": "409b2bf941b2724a028f65518c64f799f205a186", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwOWIyYmY5NDFiMjcyNGEwMjhmNjU1MThjNjRmNzk5ZjIwNWExODY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-11-06T02:28:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-06T02:28:15Z"}, "message": "Rollup merge of #66098 - estebank:path-asciption-typo, r=Centril\n\nDetect `::` -> `:` typo when involving turbofish\n\nFix #65569.", "tree": {"sha": "18d029fe26855d648607d80090acb0a28048f5fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18d029fe26855d648607d80090acb0a28048f5fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/409b2bf941b2724a028f65518c64f799f205a186", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdwi/ACRBK7hj4Ov3rIwAAdHIIAJfRjE7kUX84+fpaKS/yZRay\nSROR+N4k/M5sKc9OIJBsewuv1hX4hmT5WAMx18mZROW+SqkUNlSR1cxmRtV4rh6V\nkWMBIe4snw+fm46tg3r9EU1rRwZY0OI77GkQxF4n5hL7B92fuce56mmq7+VEkv6t\nrURG0H/o+0Nbf73Yiuuo+3KLcQghGNz+7PMykoqpAueK+xBj+Zhl8O9NWT2UkcAl\nqbwGBLvEASBwA6zh9EMpChxNdiUQw6wqwdpS0OLJlwp8fZtEnkDTOjyIhMynmw+N\nrrbZCs/9p3707FoFln9ptMRD45vjz3fhebfocKDSFn3j1hDAXyRv27jxAmYTHwo=\n=CTSS\n-----END PGP SIGNATURE-----\n", "payload": "tree 18d029fe26855d648607d80090acb0a28048f5fe\nparent 7d66a09a29342d520a3a17ae3b4f6233c97948f4\nparent a8ccbf5f2fa75007ce0effe58caef4e342859a4f\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1573007295 +0100\ncommitter GitHub <noreply@github.com> 1573007295 +0100\n\nRollup merge of #66098 - estebank:path-asciption-typo, r=Centril\n\nDetect `::` -> `:` typo when involving turbofish\n\nFix #65569.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/409b2bf941b2724a028f65518c64f799f205a186", "html_url": "https://github.com/rust-lang/rust/commit/409b2bf941b2724a028f65518c64f799f205a186", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/409b2bf941b2724a028f65518c64f799f205a186/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d66a09a29342d520a3a17ae3b4f6233c97948f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d66a09a29342d520a3a17ae3b4f6233c97948f4", "html_url": "https://github.com/rust-lang/rust/commit/7d66a09a29342d520a3a17ae3b4f6233c97948f4"}, {"sha": "a8ccbf5f2fa75007ce0effe58caef4e342859a4f", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8ccbf5f2fa75007ce0effe58caef4e342859a4f", "html_url": "https://github.com/rust-lang/rust/commit/a8ccbf5f2fa75007ce0effe58caef4e342859a4f"}], "stats": {"total": 34, "additions": 30, "deletions": 4}, "files": [{"sha": "453ef5963bea5f1b28f00ea524f8e843535bf237", "filename": "src/libsyntax/parse/parser/diagnostics.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/409b2bf941b2724a028f65518c64f799f205a186/src%2Flibsyntax%2Fparse%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409b2bf941b2724a028f65518c64f799f205a186/src%2Flibsyntax%2Fparse%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fdiagnostics.rs?ref=409b2bf941b2724a028f65518c64f799f205a186", "patch": "@@ -360,11 +360,11 @@ impl<'a> Parser<'a> {\n     }\n \n     pub fn maybe_annotate_with_ascription(\n-        &self,\n+        &mut self,\n         err: &mut DiagnosticBuilder<'_>,\n         maybe_expected_semicolon: bool,\n     ) {\n-        if let Some((sp, likely_path)) = self.last_type_ascription {\n+        if let Some((sp, likely_path)) = self.last_type_ascription.take() {\n             let sm = self.sess.source_map();\n             let next_pos = sm.lookup_char_pos(self.token.span.lo());\n             let op_pos = sm.lookup_char_pos(sp.hi());\n@@ -1088,8 +1088,15 @@ impl<'a> Parser<'a> {\n     }\n \n     pub(super) fn could_ascription_be_path(&self, node: &ast::ExprKind) -> bool {\n-        self.token.is_ident() &&\n-            if let ast::ExprKind::Path(..) = node { true } else { false } &&\n+        (self.token == token::Lt && // `foo:<bar`, likely a typoed turbofish.\n+            self.look_ahead(1, |t| t.is_ident() && !t.is_reserved_ident())\n+        ) ||\n+            self.token.is_ident() &&\n+            match node {\n+                // `foo::` \u2192 `foo:` or `foo.bar::` \u2192 `foo.bar:`\n+                ast::ExprKind::Path(..) | ast::ExprKind::Field(..) => true,\n+                _ => false,\n+            } &&\n             !self.token.is_reserved_ident() &&           // v `foo:bar(baz)`\n             self.look_ahead(1, |t| t == &token::OpenDelim(token::Paren)) ||\n             self.look_ahead(1, |t| t == &token::Lt) &&     // `foo:bar<baz`"}, {"sha": "12c530f3cbba09a08770acb32f4d60a20e3a59f4", "filename": "src/libsyntax/parse/parser/stmt.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/409b2bf941b2724a028f65518c64f799f205a186/src%2Flibsyntax%2Fparse%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409b2bf941b2724a028f65518c64f799f205a186/src%2Flibsyntax%2Fparse%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fstmt.rs?ref=409b2bf941b2724a028f65518c64f799f205a186", "patch": "@@ -397,6 +397,7 @@ impl<'a> Parser<'a> {\n             }\n             let stmt = match self.parse_full_stmt(false) {\n                 Err(mut err) => {\n+                    self.maybe_annotate_with_ascription(&mut err, false);\n                     err.emit();\n                     self.recover_stmt_(SemiColonMode::Ignore, BlockMode::Ignore);\n                     Some(Stmt {"}, {"sha": "220fd1eebda465b4613a1062a2590e9e04621d6d", "filename": "src/test/ui/suggestions/type-ascription-instead-of-path-2.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/409b2bf941b2724a028f65518c64f799f205a186/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-path-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409b2bf941b2724a028f65518c64f799f205a186/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-path-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-path-2.rs?ref=409b2bf941b2724a028f65518c64f799f205a186", "patch": "@@ -0,0 +1,5 @@\n+fn main() -> Result<(), ()> {\n+    vec![Ok(2)].into_iter().collect:<Result<Vec<_>,_>>()?;\n+    //~^ ERROR expected `::`, found `(`\n+    Ok(())\n+}"}, {"sha": "db793c84cf8b915edd0f83f8cb61d34c96e57a15", "filename": "src/test/ui/suggestions/type-ascription-instead-of-path-2.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/409b2bf941b2724a028f65518c64f799f205a186/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-path-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/409b2bf941b2724a028f65518c64f799f205a186/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-path-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-path-2.stderr?ref=409b2bf941b2724a028f65518c64f799f205a186", "patch": "@@ -0,0 +1,13 @@\n+error: expected `::`, found `(`\n+  --> $DIR/type-ascription-instead-of-path-2.rs:2:55\n+   |\n+LL |     vec![Ok(2)].into_iter().collect:<Result<Vec<_>,_>>()?;\n+   |                                    -                  ^ expected `::`\n+   |                                    |\n+   |                                    help: maybe write a path separator here: `::`\n+   |\n+   = note: `#![feature(type_ascription)]` lets you annotate an expression with a type: `<expr>: <type>`\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/23416\n+\n+error: aborting due to previous error\n+"}]}