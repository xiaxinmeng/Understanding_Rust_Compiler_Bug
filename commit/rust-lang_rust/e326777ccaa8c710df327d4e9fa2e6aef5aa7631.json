{"sha": "e326777ccaa8c710df327d4e9fa2e6aef5aa7631", "node_id": "C_kwDOAAsO6NoAKGUzMjY3NzdjY2FhOGM3MTBkZjMyN2Q0ZTlmYTJlNmFlZjVhYTc2MzE", "commit": {"author": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2023-02-28T11:49:05Z"}, "committer": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2023-02-28T11:49:05Z"}, "message": "Some `infer/mod.rs` cleanups", "tree": {"sha": "29463edae5138bf07b6aa10c59ada1fa7e86e48f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29463edae5138bf07b6aa10c59ada1fa7e86e48f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e326777ccaa8c710df327d4e9fa2e6aef5aa7631", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e326777ccaa8c710df327d4e9fa2e6aef5aa7631", "html_url": "https://github.com/rust-lang/rust/commit/e326777ccaa8c710df327d4e9fa2e6aef5aa7631", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e326777ccaa8c710df327d4e9fa2e6aef5aa7631/comments", "author": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5157d938c49af1248a21e7ed2fbc5c6f71963276", "url": "https://api.github.com/repos/rust-lang/rust/commits/5157d938c49af1248a21e7ed2fbc5c6f71963276", "html_url": "https://github.com/rust-lang/rust/commit/5157d938c49af1248a21e7ed2fbc5c6f71963276"}], "stats": {"total": 50, "additions": 11, "deletions": 39}, "files": [{"sha": "bd1f96635a681a494a5e90e56afd45034c852381", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 11, "deletions": 39, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/e326777ccaa8c710df327d4e9fa2e6aef5aa7631/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e326777ccaa8c710df327d4e9fa2e6aef5aa7631/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=e326777ccaa8c710df327d4e9fa2e6aef5aa7631", "patch": "@@ -156,7 +156,7 @@ pub struct InferCtxtInner<'tcx> {\n     undo_log: InferCtxtUndoLogs<'tcx>,\n \n     /// Caches for opaque type inference.\n-    pub opaque_type_storage: OpaqueTypeStorage<'tcx>,\n+    opaque_type_storage: OpaqueTypeStorage<'tcx>,\n }\n \n impl<'tcx> InferCtxtInner<'tcx> {\n@@ -195,41 +195,17 @@ impl<'tcx> InferCtxtInner<'tcx> {\n     }\n \n     #[inline]\n-    fn int_unification_table(\n-        &mut self,\n-    ) -> ut::UnificationTable<\n-        ut::InPlace<\n-            ty::IntVid,\n-            &mut ut::UnificationStorage<ty::IntVid>,\n-            &mut InferCtxtUndoLogs<'tcx>,\n-        >,\n-    > {\n+    fn int_unification_table(&mut self) -> UnificationTable<'_, 'tcx, ty::IntVid> {\n         self.int_unification_storage.with_log(&mut self.undo_log)\n     }\n \n     #[inline]\n-    fn float_unification_table(\n-        &mut self,\n-    ) -> ut::UnificationTable<\n-        ut::InPlace<\n-            ty::FloatVid,\n-            &mut ut::UnificationStorage<ty::FloatVid>,\n-            &mut InferCtxtUndoLogs<'tcx>,\n-        >,\n-    > {\n+    fn float_unification_table(&mut self) -> UnificationTable<'_, 'tcx, ty::FloatVid> {\n         self.float_unification_storage.with_log(&mut self.undo_log)\n     }\n \n     #[inline]\n-    fn const_unification_table(\n-        &mut self,\n-    ) -> ut::UnificationTable<\n-        ut::InPlace<\n-            ty::ConstVid<'tcx>,\n-            &mut ut::UnificationStorage<ty::ConstVid<'tcx>>,\n-            &mut InferCtxtUndoLogs<'tcx>,\n-        >,\n-    > {\n+    fn const_unification_table(&mut self) -> UnificationTable<'_, 'tcx, ty::ConstVid<'tcx>> {\n         self.const_unification_storage.with_log(&mut self.undo_log)\n     }\n \n@@ -1429,17 +1405,14 @@ impl<'tcx> InferCtxt<'tcx> {\n         }\n     }\n \n+    /// Attempts to resolve all type/region/const variables in\n+    /// `value`. Region inference must have been run already (e.g.,\n+    /// by calling `resolve_regions_and_report_errors`). If some\n+    /// variable was never unified, an `Err` results.\n+    ///\n+    /// This method is idempotent, but it not typically not invoked\n+    /// except during the writeback phase.\n     pub fn fully_resolve<T: TypeFoldable<TyCtxt<'tcx>>>(&self, value: T) -> FixupResult<'tcx, T> {\n-        /*!\n-         * Attempts to resolve all type/region/const variables in\n-         * `value`. Region inference must have been run already (e.g.,\n-         * by calling `resolve_regions_and_report_errors`). If some\n-         * variable was never unified, an `Err` results.\n-         *\n-         * This method is idempotent, but it not typically not invoked\n-         * except during the writeback phase.\n-         */\n-\n         let value = resolve::fully_resolve(self, value);\n         assert!(\n             value.as_ref().map_or(true, |value| !value.needs_infer()),\n@@ -1754,7 +1727,6 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n     // in this case. The typechecker should only ever report type errors involving mismatched\n     // types using one of these methods, and should not call span_err directly for such\n     // errors.\n-\n     pub fn type_error_struct_with_diag<M>(\n         &self,\n         sp: Span,"}]}