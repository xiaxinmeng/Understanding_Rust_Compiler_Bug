{"sha": "5e802e5e97c1c5b995bb68edc2d40557b8af83fc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlODAyZTVlOTdjMWM1Yjk5NWJiNjhlZGMyZDQwNTU3YjhhZjgzZmM=", "commit": {"author": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2021-06-13T13:39:57Z"}, "committer": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2021-06-13T15:03:11Z"}, "message": "Box `ExprKind::Adt`", "tree": {"sha": "90a4ff774aecef178a5fc70ebe3744b1cbb37d89", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/90a4ff774aecef178a5fc70ebe3744b1cbb37d89"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e802e5e97c1c5b995bb68edc2d40557b8af83fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e802e5e97c1c5b995bb68edc2d40557b8af83fc", "html_url": "https://github.com/rust-lang/rust/commit/5e802e5e97c1c5b995bb68edc2d40557b8af83fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e802e5e97c1c5b995bb68edc2d40557b8af83fc/comments", "author": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6cc5d5432aaed21630ead1fa59418245ee2e1047", "url": "https://api.github.com/repos/rust-lang/rust/commits/6cc5d5432aaed21630ead1fa59418245ee2e1047", "html_url": "https://github.com/rust-lang/rust/commit/6cc5d5432aaed21630ead1fa59418245ee2e1047"}], "stats": {"total": 69, "additions": 43, "deletions": 26}, "files": [{"sha": "436cd305a7fc2e08a201cfddfcc56dec2f1e44eb", "filename": "compiler/rustc_middle/src/thir.rs", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/5e802e5e97c1c5b995bb68edc2d40557b8af83fc/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e802e5e97c1c5b995bb68edc2d40557b8af83fc/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fthir.rs?ref=5e802e5e97c1c5b995bb68edc2d40557b8af83fc", "patch": "@@ -97,6 +97,20 @@ pub struct Block {\n     pub safety_mode: BlockSafety,\n }\n \n+#[derive(Debug, HashStable)]\n+pub struct Adt<'tcx> {\n+    pub adt_def: &'tcx AdtDef,\n+    pub variant_index: VariantIdx,\n+    pub substs: SubstsRef<'tcx>,\n+\n+    /// Optional user-given substs: for something like `let x =\n+    /// Bar::<T> { ... }`.\n+    pub user_ty: Option<Canonical<'tcx, UserType<'tcx>>>,\n+\n+    pub fields: Box<[FieldExpr]>,\n+    pub base: Option<FruInfo<'tcx>>,\n+}\n+\n #[derive(Copy, Clone, Debug, HashStable)]\n pub enum BlockSafety {\n     Safe,\n@@ -145,7 +159,7 @@ pub enum StmtKind<'tcx> {\n \n // `Expr` is used a lot. Make sure it doesn't unintentionally get bigger.\n #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-rustc_data_structures::static_assert_size!(Expr<'_>, 144);\n+rustc_data_structures::static_assert_size!(Expr<'_>, 104);\n \n /// The Thir trait implementor lowers their expressions (`&'tcx H::Expr`)\n /// into instances of this `Expr` enum. This lowering can be done\n@@ -304,18 +318,7 @@ pub enum ExprKind<'tcx> {\n     Tuple {\n         fields: Box<[ExprId]>,\n     },\n-    Adt {\n-        adt_def: &'tcx AdtDef,\n-        variant_index: VariantIdx,\n-        substs: SubstsRef<'tcx>,\n-\n-        /// Optional user-given substs: for something like `let x =\n-        /// Bar::<T> { ... }`.\n-        user_ty: Option<Canonical<'tcx, UserType<'tcx>>>,\n-\n-        fields: Box<[FieldExpr]>,\n-        base: Option<FruInfo<'tcx>>,\n-    },\n+    Adt(Box<Adt<'tcx>>),\n     PlaceTypeAscription {\n         source: ExprId,\n         /// Type that the user gave to this expression"}, {"sha": "d7b3a85c15d8f4c339cb7a076e1b232b7e9438ba", "filename": "compiler/rustc_mir_build/src/build/expr/into.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5e802e5e97c1c5b995bb68edc2d40557b8af83fc/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e802e5e97c1c5b995bb68edc2d40557b8af83fc/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs?ref=5e802e5e97c1c5b995bb68edc2d40557b8af83fc", "patch": "@@ -264,7 +264,14 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 this.cfg.push_assign(block, source_info, destination, address_of);\n                 block.unit()\n             }\n-            ExprKind::Adt { adt_def, variant_index, substs, user_ty, ref fields, ref base } => {\n+            ExprKind::Adt(box Adt {\n+                adt_def,\n+                variant_index,\n+                substs,\n+                user_ty,\n+                ref fields,\n+                ref base,\n+            }) => {\n                 // See the notes for `ExprKind::Array` in `as_rvalue` and for\n                 // `ExprKind::Borrow` above.\n                 let is_union = adt_def.is_union();"}, {"sha": "e4ed5dece8622a4334045de065387365567e4808", "filename": "compiler/rustc_mir_build/src/check_unsafety.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e802e5e97c1c5b995bb68edc2d40557b8af83fc/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e802e5e97c1c5b995bb68edc2d40557b8af83fc/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs?ref=5e802e5e97c1c5b995bb68edc2d40557b8af83fc", "patch": "@@ -195,14 +195,14 @@ impl<'a, 'tcx> Visitor<'a, 'tcx> for UnsafetyVisitor<'a, 'tcx> {\n             ExprKind::InlineAsm { .. } | ExprKind::LlvmInlineAsm { .. } => {\n                 self.requires_unsafe(expr.span, UseOfInlineAssembly);\n             }\n-            ExprKind::Adt {\n+            ExprKind::Adt(box Adt {\n                 adt_def,\n                 variant_index: _,\n                 substs: _,\n                 user_ty: _,\n                 fields: _,\n                 base: _,\n-            } => match self.tcx.layout_scalar_valid_range(adt_def.did) {\n+            }) => match self.tcx.layout_scalar_valid_range(adt_def.did) {\n                 (Bound::Unbounded, Bound::Unbounded) => {}\n                 _ => self.requires_unsafe(expr.span, InitializingTypeWith),\n             },"}, {"sha": "da8cd66acb17576eb40bc2992214cb770448833d", "filename": "compiler/rustc_mir_build/src/thir/cx/expr.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5e802e5e97c1c5b995bb68edc2d40557b8af83fc/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e802e5e97c1c5b995bb68edc2d40557b8af83fc/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs?ref=5e802e5e97c1c5b995bb68edc2d40557b8af83fc", "patch": "@@ -228,14 +228,14 @@ impl<'tcx> Cx<'tcx> {\n                                 expr: self.mirror_expr(e),\n                             })\n                             .collect();\n-                        ExprKind::Adt {\n+                        ExprKind::Adt(Box::new(Adt {\n                             adt_def,\n                             substs,\n                             variant_index: index,\n                             fields: field_refs,\n                             user_ty,\n                             base: None,\n-                        }\n+                        }))\n                     } else {\n                         ExprKind::Call {\n                             ty: self.typeck_results().node_type(fun.hir_id),\n@@ -362,7 +362,7 @@ impl<'tcx> Cx<'tcx> {\n                         let user_provided_types = self.typeck_results().user_provided_types();\n                         let user_ty = user_provided_types.get(expr.hir_id).copied();\n                         debug!(\"make_mirror_unadjusted: (struct/union) user_ty={:?}\", user_ty);\n-                        ExprKind::Adt {\n+                        ExprKind::Adt(Box::new(Adt {\n                             adt_def: adt,\n                             variant_index: VariantIdx::new(0),\n                             substs,\n@@ -375,7 +375,7 @@ impl<'tcx> Cx<'tcx> {\n                                     .copied()\n                                     .collect(),\n                             }),\n-                        }\n+                        }))\n                     }\n                     AdtKind::Enum => {\n                         let res = self.typeck_results().qpath_res(qpath, expr.hir_id);\n@@ -388,14 +388,14 @@ impl<'tcx> Cx<'tcx> {\n                                     self.typeck_results().user_provided_types();\n                                 let user_ty = user_provided_types.get(expr.hir_id).copied();\n                                 debug!(\"make_mirror_unadjusted: (variant) user_ty={:?}\", user_ty);\n-                                ExprKind::Adt {\n+                                ExprKind::Adt(Box::new(Adt {\n                                     adt_def: adt,\n                                     variant_index: index,\n                                     substs,\n                                     user_ty,\n                                     fields: self.field_refs(fields),\n                                     base: None,\n-                                }\n+                                }))\n                             }\n                             _ => {\n                                 span_bug!(expr.span, \"unexpected res: {:?}\", res);\n@@ -906,14 +906,14 @@ impl<'tcx> Cx<'tcx> {\n                 match ty.kind() {\n                     // A unit struct/variant which is used as a value.\n                     // We return a completely different ExprKind here to account for this special case.\n-                    ty::Adt(adt_def, substs) => ExprKind::Adt {\n+                    ty::Adt(adt_def, substs) => ExprKind::Adt(Box::new(Adt {\n                         adt_def,\n                         variant_index: adt_def.variant_index_with_ctor_id(def_id),\n                         substs,\n                         user_ty: user_provided_type,\n                         fields: box [],\n                         base: None,\n-                    },\n+                    })),\n                     _ => bug!(\"unexpected ty: {:?}\", ty),\n                 }\n             }"}, {"sha": "6e0229f38a574fc6240e9c73285f79f7211bc467", "filename": "compiler/rustc_mir_build/src/thir/visit.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5e802e5e97c1c5b995bb68edc2d40557b8af83fc/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e802e5e97c1c5b995bb68edc2d40557b8af83fc/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fvisit.rs?ref=5e802e5e97c1c5b995bb68edc2d40557b8af83fc", "patch": "@@ -1,4 +1,4 @@\n-use rustc_middle::thir::*;\n+use rustc_middle::thir::{self, *};\n use rustc_middle::ty::Const;\n \n pub trait Visitor<'a, 'tcx: 'a>: Sized {\n@@ -94,7 +94,14 @@ pub fn walk_expr<'a, 'tcx: 'a, V: Visitor<'a, 'tcx>>(visitor: &mut V, expr: &Exp\n                 visitor.visit_expr(&visitor.thir()[field]);\n             }\n         }\n-        Adt { ref fields, ref base, adt_def: _, variant_index: _, substs: _, user_ty: _ } => {\n+        Adt(box thir::Adt {\n+            ref fields,\n+            ref base,\n+            adt_def: _,\n+            variant_index: _,\n+            substs: _,\n+            user_ty: _,\n+        }) => {\n             for field in &**fields {\n                 visitor.visit_expr(&visitor.thir()[field.expr]);\n             }"}]}