{"sha": "b316384e145d4b21b4e882e7abd29fb41d46e33c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzMTYzODRlMTQ1ZDRiMjFiNGU4ODJlN2FiZDI5ZmI0MWQ0NmUzM2M=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2019-11-06T22:23:35Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2019-11-08T23:00:20Z"}, "message": "Use new `PromoteTemps` for promotion", "tree": {"sha": "bd1a6e1603f519c2c14ec3dd9e6f2cd7251efeae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd1a6e1603f519c2c14ec3dd9e6f2cd7251efeae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b316384e145d4b21b4e882e7abd29fb41d46e33c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b316384e145d4b21b4e882e7abd29fb41d46e33c", "html_url": "https://github.com/rust-lang/rust/commit/b316384e145d4b21b4e882e7abd29fb41d46e33c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b316384e145d4b21b4e882e7abd29fb41d46e33c/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "170272b74fdeb1141a23817a4d69b58a084a0cd0", "url": "https://api.github.com/repos/rust-lang/rust/commits/170272b74fdeb1141a23817a4d69b58a084a0cd0", "html_url": "https://github.com/rust-lang/rust/commit/170272b74fdeb1141a23817a4d69b58a084a0cd0"}], "stats": {"total": 75, "additions": 27, "deletions": 48}, "files": [{"sha": "6d6d6bea2a0eabb868939975477a6ae6a32b4d09", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b316384e145d4b21b4e882e7abd29fb41d46e33c/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b316384e145d4b21b4e882e7abd29fb41d46e33c/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=b316384e145d4b21b4e882e7abd29fb41d46e33c", "patch": "@@ -210,13 +210,14 @@ fn mir_validated(\n     }\n \n     let mut body = tcx.mir_const(def_id).steal();\n-    let qualify_and_promote_pass = qualify_consts::QualifyAndPromoteConstants::default();\n+    let promote_pass = promote_consts::PromoteTemps::default();\n     run_passes(tcx, &mut body, InstanceDef::Item(def_id), None, MirPhase::Validated, &[\n         // What we need to run borrowck etc.\n-        &qualify_and_promote_pass,\n+        &qualify_consts::QualifyAndPromoteConstants::default(),\n+        &promote_pass,\n         &simplify::SimplifyCfg::new(\"qualify-consts\"),\n     ]);\n-    let promoted = qualify_and_promote_pass.promoted.into_inner();\n+    let promoted = promote_pass.promoted_fragments.into_inner();\n     (tcx.alloc_steal_mir(body), tcx.alloc_steal_promoted(promoted))\n }\n "}, {"sha": "01111af7c3e03237d28793bd90cd3f9e1055a60a", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 17, "deletions": 39, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/b316384e145d4b21b4e882e7abd29fb41d46e33c/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b316384e145d4b21b4e882e7abd29fb41d46e33c/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=b316384e145d4b21b4e882e7abd29fb41d46e33c", "patch": "@@ -1345,56 +1345,34 @@ impl<'tcx> MirPass<'tcx> for QualifyAndPromoteConstants<'tcx> {\n         let mode = determine_mode(tcx, hir_id, def_id);\n \n         debug!(\"run_pass: mode={:?}\", mode);\n-        if let Mode::NonConstFn | Mode::ConstFn = mode {\n+        if let Mode::NonConstFn = mode {\n+            // No need to const-check a non-const `fn` now that we don't do promotion here.\n+            return;\n+        } else if let Mode::ConstFn = mode {\n             let mut checker = Checker::new(tcx, def_id, body, mode);\n-            if let Mode::ConstFn = mode {\n-                let use_min_const_fn_checks =\n-                    !tcx.sess.opts.debugging_opts.unleash_the_miri_inside_of_you &&\n-                    tcx.is_min_const_fn(def_id);\n-                if use_min_const_fn_checks {\n-                    // Enforce `min_const_fn` for stable `const fn`s.\n-                    use super::qualify_min_const_fn::is_min_const_fn;\n-                    if let Err((span, err)) = is_min_const_fn(tcx, def_id, body) {\n-                        error_min_const_fn_violation(tcx, span, err);\n-                        return;\n-                    }\n-\n-                    // `check_const` should not produce any errors, but better safe than sorry\n-                    // FIXME(#53819)\n-                    // NOTE(eddyb) `check_const` is actually needed for promotion inside\n-                    // `min_const_fn` functions.\n-                }\n-\n-                // Enforce a constant-like CFG for `const fn`.\n-                checker.check_const();\n-            } else {\n-                while let Some((bb, data)) = checker.rpo.next() {\n-                    checker.visit_basic_block_data(bb, data);\n+            let use_min_const_fn_checks =\n+                !tcx.sess.opts.debugging_opts.unleash_the_miri_inside_of_you &&\n+                tcx.is_min_const_fn(def_id);\n+            if use_min_const_fn_checks {\n+                // Enforce `min_const_fn` for stable `const fn`s.\n+                use super::qualify_min_const_fn::is_min_const_fn;\n+                if let Err((span, err)) = is_min_const_fn(tcx, def_id, body) {\n+                    error_min_const_fn_violation(tcx, span, err);\n+                    return;\n                 }\n             }\n \n-            // Promote only the promotable candidates.\n-            let temps = checker.temp_promotion_state;\n-            let candidates = promote_consts::validate_candidates(\n-                tcx,\n-                body,\n-                def_id,\n-                &temps,\n-                &checker.unchecked_promotion_candidates,\n-            );\n-\n-            // Do the actual promotion, now that we know what's viable.\n-            self.promoted.set(\n-                promote_consts::promote_candidates(def_id, body, tcx, temps, candidates)\n-            );\n+            // `check_const` should not produce any errors, but better safe than sorry\n+            // FIXME(#53819)\n+            // Enforce a constant-like CFG for `const fn`.\n+            checker.check_const();\n         } else {\n             check_short_circuiting_in_const_local(tcx, body, mode);\n \n             match mode {\n                 Mode::Const => tcx.mir_const_qualif(def_id),\n                 _ => Checker::new(tcx, def_id, body, mode).check_const(),\n             };\n-            remove_drop_and_storage_dead_on_promoted_locals(body, unimplemented!());\n         }\n \n         if mode == Mode::Static && !tcx.has_attr(def_id, sym::thread_local) {"}, {"sha": "648856b5523d318df57e3db964064eaef656306c", "filename": "src/test/mir-opt/match_false_edges.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b316384e145d4b21b4e882e7abd29fb41d46e33c/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b316384e145d4b21b4e882e7abd29fb41d46e33c/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.rs?ref=b316384e145d4b21b4e882e7abd29fb41d46e33c", "patch": "@@ -39,7 +39,7 @@ fn main() {\n \n // END RUST SOURCE\n //\n-// START rustc.full_tested_match.QualifyAndPromoteConstants.after.mir\n+// START rustc.full_tested_match.PromoteTemps.after.mir\n //  bb0: {\n //      ...\n //      _2 = std::option::Option::<i32>::Some(const 42i32,);\n@@ -108,9 +108,9 @@ fn main() {\n //      _0 = ();\n //      return;\n //  }\n-// END rustc.full_tested_match.QualifyAndPromoteConstants.after.mir\n+// END rustc.full_tested_match.PromoteTemps.after.mir\n //\n-// START rustc.full_tested_match2.QualifyAndPromoteConstants.before.mir\n+// START rustc.full_tested_match2.PromoteTemps.before.mir\n //  bb0: {\n //      ...\n //      _2 = std::option::Option::<i32>::Some(const 42i32,);\n@@ -179,9 +179,9 @@ fn main() {\n //      _0 = ();\n //      return;\n //  }\n-// END rustc.full_tested_match2.QualifyAndPromoteConstants.before.mir\n+// END rustc.full_tested_match2.PromoteTemps.before.mir\n //\n-// START rustc.main.QualifyAndPromoteConstants.before.mir\n+// START rustc.main.PromoteTemps.before.mir\n //  bb0: {\n //     ...\n //      _2 = std::option::Option::<i32>::Some(const 1i32,);\n@@ -276,4 +276,4 @@ fn main() {\n //      _0 = ();\n //      return;\n //  }\n-// END rustc.main.QualifyAndPromoteConstants.before.mir\n+// END rustc.main.PromoteTemps.before.mir"}]}