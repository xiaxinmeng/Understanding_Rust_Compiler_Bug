{"sha": "1cb46079e493af318a2dc6f97c93c2e0ac7ecd0e", "node_id": "C_kwDOAAsO6NoAKDFjYjQ2MDc5ZTQ5M2FmMzE4YTJkYzZmOTdjOTNjMmUwYWM3ZWNkMGU", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-10-21T14:00:43Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-10-21T14:00:43Z"}, "message": "internal: Properly handle commands in the VSCode client when the server is stopped", "tree": {"sha": "fa70e0835b240b2e6d8c205a077c2fe98592a1e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa70e0835b240b2e6d8c205a077c2fe98592a1e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1cb46079e493af318a2dc6f97c93c2e0ac7ecd0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1cb46079e493af318a2dc6f97c93c2e0ac7ecd0e", "html_url": "https://github.com/rust-lang/rust/commit/1cb46079e493af318a2dc6f97c93c2e0ac7ecd0e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1cb46079e493af318a2dc6f97c93c2e0ac7ecd0e/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8e0a20ce4396d3c77adf3b5deb48edfd27d6af2", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8e0a20ce4396d3c77adf3b5deb48edfd27d6af2", "html_url": "https://github.com/rust-lang/rust/commit/a8e0a20ce4396d3c77adf3b5deb48edfd27d6af2"}], "stats": {"total": 239, "additions": 136, "deletions": 103}, "files": [{"sha": "044a9470aa94782748ced04c732f59aa7412da0e", "filename": "editors/code/src/ctx.ts", "status": "modified", "additions": 61, "deletions": 19, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/1cb46079e493af318a2dc6f97c93c2e0ac7ecd0e/editors%2Fcode%2Fsrc%2Fctx.ts", "raw_url": "https://github.com/rust-lang/rust/raw/1cb46079e493af318a2dc6f97c93c2e0ac7ecd0e/editors%2Fcode%2Fsrc%2Fctx.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fctx.ts?ref=1cb46079e493af318a2dc6f97c93c2e0ac7ecd0e", "patch": "@@ -18,6 +18,11 @@ export type Workspace =\n           files: vscode.TextDocument[];\n       };\n \n+export type CommandFactory = {\n+    enabled: (ctx: Ctx) => Cmd;\n+    disabled?: (ctx: Ctx) => Cmd;\n+};\n+\n export class Ctx {\n     readonly statusBar: vscode.StatusBarItem;\n     readonly config: Config;\n@@ -26,31 +31,40 @@ export class Ctx {\n     private _serverPath: string | undefined;\n     private traceOutputChannel: vscode.OutputChannel | undefined;\n     private outputChannel: vscode.OutputChannel | undefined;\n+    private clientSubscriptions: Disposable[];\n     private state: PersistentState;\n+    private commandFactories: Record<string, CommandFactory>;\n+    private commandDisposables: Disposable[];\n \n     workspace: Workspace;\n \n-    constructor(readonly extCtx: vscode.ExtensionContext, workspace: Workspace) {\n-        this.statusBar = vscode.window.createStatusBarItem(vscode.StatusBarAlignment.Left);\n-        extCtx.subscriptions.push(this.statusBar);\n-        extCtx.subscriptions.push({\n-            dispose() {\n-                this.dispose();\n-            },\n-        });\n+    constructor(\n+        readonly extCtx: vscode.ExtensionContext,\n+        workspace: Workspace,\n+        commandFactories: Record<string, CommandFactory>\n+    ) {\n         extCtx.subscriptions.push(this);\n+        this.statusBar = vscode.window.createStatusBarItem(vscode.StatusBarAlignment.Left);\n         this.statusBar.text = \"rust-analyzer\";\n         this.statusBar.tooltip = \"ready\";\n         this.statusBar.command = \"rust-analyzer.analyzerStatus\";\n         this.statusBar.show();\n         this.workspace = workspace;\n+        this.clientSubscriptions = [];\n+        this.commandDisposables = [];\n+        this.commandFactories = commandFactories;\n \n         this.state = new PersistentState(extCtx.globalState);\n         this.config = new Config(extCtx);\n+\n+        this.updateCommands();\n     }\n \n     dispose() {\n         this.config.dispose();\n+        this.statusBar.dispose();\n+        void this.disposeClient();\n+        this.commandDisposables.forEach((disposable) => disposable.dispose());\n     }\n \n     clientFetcher() {\n@@ -63,7 +77,6 @@ export class Ctx {\n     }\n \n     async getClient() {\n-        // if server path changes -> dispose\n         if (!this.traceOutputChannel) {\n             this.traceOutputChannel = vscode.window.createOutputChannel(\n                 \"Rust Analyzer Language Server Trace\"\n@@ -118,7 +131,11 @@ export class Ctx {\n                 initializationOptions,\n                 serverOptions\n             );\n-            this.client.onNotification(ra.serverStatus, (params) => this.setServerStatus(params));\n+            this.pushClientCleanup(\n+                this.client.onNotification(ra.serverStatus, (params) =>\n+                    this.setServerStatus(params)\n+                )\n+            );\n         }\n         return this.client;\n     }\n@@ -127,16 +144,25 @@ export class Ctx {\n         log.info(\"Activating language client\");\n         const client = await this.getClient();\n         await client.start();\n+        this.updateCommands();\n         return client;\n     }\n \n     async deactivate() {\n         log.info(\"Deactivating language client\");\n         await this.client?.stop();\n+        this.updateCommands();\n     }\n \n-    async disposeClient() {\n-        log.info(\"Deactivating language client\");\n+    async stop() {\n+        log.info(\"Stopping language client\");\n+        await this.disposeClient();\n+        this.updateCommands();\n+    }\n+\n+    private async disposeClient() {\n+        this.clientSubscriptions?.forEach((disposable) => disposable.dispose());\n+        this.clientSubscriptions = [];\n         await this.client?.dispose();\n         this._serverPath = undefined;\n         this.client = undefined;\n@@ -159,6 +185,25 @@ export class Ctx {\n         return this._serverPath;\n     }\n \n+    private updateCommands() {\n+        this.commandDisposables.forEach((disposable) => disposable.dispose());\n+        this.commandDisposables = [];\n+        const fetchFactory = (factory: CommandFactory, fullName: string) => {\n+            return this.client && this.client.isRunning()\n+                ? factory.enabled\n+                : factory.disabled ||\n+                      ((_) => () =>\n+                          vscode.window.showErrorMessage(\n+                              `command ${fullName} failed: rust-analyzer server is not running`\n+                          ));\n+        };\n+        for (const [name, factory] of Object.entries(this.commandFactories)) {\n+            const fullName = `rust-analyzer.${name}`;\n+            const callback = fetchFactory(factory, fullName)(this);\n+            this.commandDisposables.push(vscode.commands.registerCommand(fullName, callback));\n+        }\n+    }\n+\n     setServerStatus(status: ServerStatusParams) {\n         let icon = \"\";\n         const statusBar = this.statusBar;\n@@ -194,16 +239,13 @@ export class Ctx {\n         statusBar.text = `${icon}rust-analyzer`;\n     }\n \n-    registerCommand(name: string, factory: (ctx: Ctx) => Cmd) {\n-        const fullName = `rust-analyzer.${name}`;\n-        const cmd = factory(this);\n-        const d = vscode.commands.registerCommand(fullName, cmd);\n-        this.pushExtCleanup(d);\n-    }\n-\n     pushExtCleanup(d: Disposable) {\n         this.extCtx.subscriptions.push(d);\n     }\n+\n+    private pushClientCleanup(d: Disposable) {\n+        this.clientSubscriptions.push(d);\n+    }\n }\n \n export interface Disposable {"}, {"sha": "8c3a676ffb056700e059a276c6efd565d64bf725", "filename": "editors/code/src/main.ts", "status": "modified", "additions": 75, "deletions": 84, "changes": 159, "blob_url": "https://github.com/rust-lang/rust/blob/1cb46079e493af318a2dc6f97c93c2e0ac7ecd0e/editors%2Fcode%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/1cb46079e493af318a2dc6f97c93c2e0ac7ecd0e/editors%2Fcode%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fmain.ts?ref=1cb46079e493af318a2dc6f97c93c2e0ac7ecd0e", "patch": "@@ -2,7 +2,7 @@ import * as vscode from \"vscode\";\n import * as lc from \"vscode-languageclient/node\";\n \n import * as commands from \"./commands\";\n-import { Ctx, Workspace } from \"./ctx\";\n+import { CommandFactory, Ctx, Workspace } from \"./ctx\";\n import { isRustDocument } from \"./util\";\n import { activateTaskProvider } from \"./tasks\";\n import { setContextValue } from \"./util\";\n@@ -57,7 +57,7 @@ export async function activate(\n               }\n             : { kind: \"Workspace Folder\" };\n \n-    const ctx = new Ctx(context, workspace);\n+    const ctx = new Ctx(context, workspace, createCommands());\n     // VS Code doesn't show a notification when an extension fails to activate\n     // so we do it ourselves.\n     const api = await activateServer(ctx).catch((err) => {\n@@ -75,8 +75,6 @@ async function activateServer(ctx: Ctx): Promise<RustAnalyzerExtensionApi> {\n         ctx.pushExtCleanup(activateTaskProvider(ctx.config));\n     }\n \n-    await initCommonContext(ctx);\n-\n     vscode.workspace.onDidChangeConfiguration(\n         async (_) => {\n             await ctx\n@@ -91,85 +89,78 @@ async function activateServer(ctx: Ctx): Promise<RustAnalyzerExtensionApi> {\n     return ctx.clientFetcher();\n }\n \n-async function initCommonContext(ctx: Ctx) {\n-    // Register a \"dumb\" onEnter command for the case where server fails to\n-    // start.\n-    //\n-    // FIXME: refactor command registration code such that commands are\n-    // **always** registered, even if the server does not start. Use API like\n-    // this perhaps?\n-    //\n-    // ```TypeScript\n-    // registerCommand(\n-    //    factory: (Ctx) => ((Ctx) => any),\n-    //    fallback: () => any = () => vscode.window.showErrorMessage(\n-    //        \"rust-analyzer is not available\"\n-    //    ),\n-    // )\n-    const defaultOnEnter = vscode.commands.registerCommand(\"rust-analyzer.onEnter\", () =>\n-        vscode.commands.executeCommand(\"default:type\", { text: \"\\n\" })\n-    );\n-    ctx.pushExtCleanup(defaultOnEnter);\n-\n-    // Commands which invokes manually via command palette, shortcut, etc.\n-    ctx.registerCommand(\"reload\", (_) => async () => {\n-        void vscode.window.showInformationMessage(\"Reloading rust-analyzer...\");\n-        // FIXME: We should re-use the client, that is ctx.deactivate() if none of the configs have changed\n-        await ctx.disposeClient();\n-        await ctx.activate();\n-    });\n-\n-    ctx.registerCommand(\"startServer\", (_) => async () => {\n-        await ctx.activate();\n-    });\n-    ctx.registerCommand(\"stopServer\", (_) => async () => {\n-        // FIXME: We should re-use the client, that is ctx.deactivate() if none of the configs have changed\n-        await ctx.disposeClient();\n-        ctx.setServerStatus({\n-            health: \"ok\",\n-            quiescent: true,\n-            message: \"server is not running\",\n-        });\n-    });\n-    ctx.registerCommand(\"analyzerStatus\", commands.analyzerStatus);\n-    ctx.registerCommand(\"memoryUsage\", commands.memoryUsage);\n-    ctx.registerCommand(\"shuffleCrateGraph\", commands.shuffleCrateGraph);\n-    ctx.registerCommand(\"reloadWorkspace\", commands.reloadWorkspace);\n-    ctx.registerCommand(\"matchingBrace\", commands.matchingBrace);\n-    ctx.registerCommand(\"joinLines\", commands.joinLines);\n-    ctx.registerCommand(\"parentModule\", commands.parentModule);\n-    ctx.registerCommand(\"syntaxTree\", commands.syntaxTree);\n-    ctx.registerCommand(\"viewHir\", commands.viewHir);\n-    ctx.registerCommand(\"viewFileText\", commands.viewFileText);\n-    ctx.registerCommand(\"viewItemTree\", commands.viewItemTree);\n-    ctx.registerCommand(\"viewCrateGraph\", commands.viewCrateGraph);\n-    ctx.registerCommand(\"viewFullCrateGraph\", commands.viewFullCrateGraph);\n-    ctx.registerCommand(\"expandMacro\", commands.expandMacro);\n-    ctx.registerCommand(\"run\", commands.run);\n-    ctx.registerCommand(\"copyRunCommandLine\", commands.copyRunCommandLine);\n-    ctx.registerCommand(\"debug\", commands.debug);\n-    ctx.registerCommand(\"newDebugConfig\", commands.newDebugConfig);\n-    ctx.registerCommand(\"openDocs\", commands.openDocs);\n-    ctx.registerCommand(\"openCargoToml\", commands.openCargoToml);\n-    ctx.registerCommand(\"peekTests\", commands.peekTests);\n-    ctx.registerCommand(\"moveItemUp\", commands.moveItemUp);\n-    ctx.registerCommand(\"moveItemDown\", commands.moveItemDown);\n-    ctx.registerCommand(\"cancelFlycheck\", commands.cancelFlycheck);\n-\n-    ctx.registerCommand(\"ssr\", commands.ssr);\n-    ctx.registerCommand(\"serverVersion\", commands.serverVersion);\n-\n-    // Internal commands which are invoked by the server.\n-    ctx.registerCommand(\"runSingle\", commands.runSingle);\n-    ctx.registerCommand(\"debugSingle\", commands.debugSingle);\n-    ctx.registerCommand(\"showReferences\", commands.showReferences);\n-    ctx.registerCommand(\"applySnippetWorkspaceEdit\", commands.applySnippetWorkspaceEditCommand);\n-    ctx.registerCommand(\"resolveCodeAction\", commands.resolveCodeAction);\n-    ctx.registerCommand(\"applyActionGroup\", commands.applyActionGroup);\n-    ctx.registerCommand(\"gotoLocation\", commands.gotoLocation);\n-\n-    ctx.registerCommand(\"linkToCommand\", commands.linkToCommand);\n+function createCommands(): Record<string, CommandFactory> {\n+    return {\n+        onEnter: {\n+            enabled: commands.onEnter,\n+            disabled: (_) => () => vscode.commands.executeCommand(\"default:type\", { text: \"\\n\" }),\n+        },\n+        reload: {\n+            enabled: (ctx) => async () => {\n+                void vscode.window.showInformationMessage(\"Reloading rust-analyzer...\");\n+                // FIXME: We should re-use the client, that is ctx.deactivate() if none of the configs have changed\n+                await ctx.stop();\n+                await ctx.activate();\n+            },\n+            disabled: (ctx) => async () => {\n+                void vscode.window.showInformationMessage(\"Reloading rust-analyzer...\");\n+                await ctx.activate();\n+            },\n+        },\n+        startServer: {\n+            enabled: (ctx) => async () => {\n+                await ctx.activate();\n+            },\n+            disabled: (ctx) => async () => {\n+                await ctx.activate();\n+            },\n+        },\n+        stopServer: {\n+            enabled: (ctx) => async () => {\n+                // FIXME: We should re-use the client, that is ctx.deactivate() if none of the configs have changed\n+                await ctx.stop();\n+                ctx.setServerStatus({\n+                    health: \"ok\",\n+                    quiescent: true,\n+                    message: \"server is not running\",\n+                });\n+            },\n+        },\n \n-    defaultOnEnter.dispose();\n-    ctx.registerCommand(\"onEnter\", commands.onEnter);\n+        analyzerStatus: { enabled: commands.analyzerStatus },\n+        memoryUsage: { enabled: commands.memoryUsage },\n+        shuffleCrateGraph: { enabled: commands.shuffleCrateGraph },\n+        reloadWorkspace: { enabled: commands.reloadWorkspace },\n+        matchingBrace: { enabled: commands.matchingBrace },\n+        joinLines: { enabled: commands.joinLines },\n+        parentModule: { enabled: commands.parentModule },\n+        syntaxTree: { enabled: commands.syntaxTree },\n+        viewHir: { enabled: commands.viewHir },\n+        viewFileText: { enabled: commands.viewFileText },\n+        viewItemTree: { enabled: commands.viewItemTree },\n+        viewCrateGraph: { enabled: commands.viewCrateGraph },\n+        viewFullCrateGraph: { enabled: commands.viewFullCrateGraph },\n+        expandMacro: { enabled: commands.expandMacro },\n+        run: { enabled: commands.run },\n+        copyRunCommandLine: { enabled: commands.copyRunCommandLine },\n+        debug: { enabled: commands.debug },\n+        newDebugConfig: { enabled: commands.newDebugConfig },\n+        openDocs: { enabled: commands.openDocs },\n+        openCargoToml: { enabled: commands.openCargoToml },\n+        peekTests: { enabled: commands.peekTests },\n+        moveItemUp: { enabled: commands.moveItemUp },\n+        moveItemDown: { enabled: commands.moveItemDown },\n+        cancelFlycheck: { enabled: commands.cancelFlycheck },\n+        ssr: { enabled: commands.ssr },\n+        serverVersion: { enabled: commands.serverVersion },\n+        // Internal commands which are invoked by the server.\n+        applyActionGroup: { enabled: commands.applyActionGroup },\n+        applySnippetWorkspaceEdit: { enabled: commands.applySnippetWorkspaceEditCommand },\n+        debugSingle: { enabled: commands.debugSingle },\n+        gotoLocation: { enabled: commands.gotoLocation },\n+        linkToCommand: { enabled: commands.linkToCommand },\n+        resolveCodeAction: { enabled: commands.resolveCodeAction },\n+        runSingle: { enabled: commands.runSingle },\n+        showReferences: { enabled: commands.showReferences },\n+    };\n }"}]}