{"sha": "73532e900e2ea3b012d540d6dd9df9b564fb5852", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczNTMyZTkwMGUyZWEzYjAxMmQ1NDBkNmRkOWRmOWI1NjRmYjU4NTI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-10-27T13:46:49Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-10-27T13:46:49Z"}, "message": "rename auto_import -> add_import\n\nWe are long way from auto imports at the moment", "tree": {"sha": "d96b11d2053ae2e802da59e3251aae6291518883", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d96b11d2053ae2e802da59e3251aae6291518883"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/73532e900e2ea3b012d540d6dd9df9b564fb5852", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/73532e900e2ea3b012d540d6dd9df9b564fb5852", "html_url": "https://github.com/rust-lang/rust/commit/73532e900e2ea3b012d540d6dd9df9b564fb5852", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/73532e900e2ea3b012d540d6dd9df9b564fb5852/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7dfbe28211910d5d7c74a593bf0007c5db3e3496", "url": "https://api.github.com/repos/rust-lang/rust/commits/7dfbe28211910d5d7c74a593bf0007c5db3e3496", "html_url": "https://github.com/rust-lang/rust/commit/7dfbe28211910d5d7c74a593bf0007c5db3e3496"}], "stats": {"total": 150, "additions": 75, "deletions": 75}, "files": [{"sha": "048bc49c8b2c14bd5667bacff449d2cd9b9959e2", "filename": "crates/ra_assists/src/assists/add_import.rs", "status": "renamed", "additions": 72, "deletions": 72, "changes": 144, "blob_url": "https://github.com/rust-lang/rust/blob/73532e900e2ea3b012d540d6dd9df9b564fb5852/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73532e900e2ea3b012d540d6dd9df9b564fb5852/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_import.rs?ref=73532e900e2ea3b012d540d6dd9df9b564fb5852", "patch": "@@ -1,18 +1,65 @@\n //! FIXME: write short doc here\n \n use hir::{self, db::HirDatabase};\n-use ra_text_edit::TextEditBuilder;\n-\n-use crate::{\n-    assist_ctx::{Assist, AssistCtx},\n-    AssistId,\n-};\n use ra_syntax::{\n     ast::{self, NameOwner},\n     AstNode, Direction, SmolStr,\n     SyntaxKind::{PATH, PATH_SEGMENT},\n     SyntaxNode, TextRange, T,\n };\n+use ra_text_edit::TextEditBuilder;\n+\n+use crate::{\n+    assist_ctx::{Assist, AssistCtx},\n+    AssistId,\n+};\n+\n+pub(crate) fn add_import(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+    let path: ast::Path = ctx.find_node_at_offset()?;\n+    // We don't want to mess with use statements\n+    if path.syntax().ancestors().find_map(ast::UseItem::cast).is_some() {\n+        return None;\n+    }\n+\n+    let hir_path = hir::Path::from_ast(path.clone())?;\n+    let segments = collect_hir_path_segments(&hir_path)?;\n+    if segments.len() < 2 {\n+        return None;\n+    }\n+\n+    if let Some(module) = path.syntax().ancestors().find_map(ast::Module::cast) {\n+        if let (Some(item_list), Some(name)) = (module.item_list(), module.name()) {\n+            ctx.add_action(\n+                AssistId(\"add_import\"),\n+                format!(\"import {} in mod {}\", fmt_segments(&segments), name.text()),\n+                |edit| {\n+                    apply_auto_import(\n+                        item_list.syntax(),\n+                        &path,\n+                        &segments,\n+                        edit.text_edit_builder(),\n+                    );\n+                },\n+            );\n+        }\n+    } else {\n+        let current_file = path.syntax().ancestors().find_map(ast::SourceFile::cast)?;\n+        ctx.add_action(\n+            AssistId(\"add_import\"),\n+            format!(\"import {} in the current file\", fmt_segments(&segments)),\n+            |edit| {\n+                apply_auto_import(\n+                    current_file.syntax(),\n+                    &path,\n+                    &segments,\n+                    edit.text_edit_builder(),\n+                );\n+            },\n+        );\n+    }\n+\n+    ctx.build()\n+}\n \n fn collect_path_segments_raw(\n     segments: &mut Vec<ast::PathSegment>,\n@@ -546,53 +593,6 @@ pub fn auto_import_text_edit(\n     }\n }\n \n-pub(crate) fn auto_import(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n-    let path: ast::Path = ctx.find_node_at_offset()?;\n-    // We don't want to mess with use statements\n-    if path.syntax().ancestors().find_map(ast::UseItem::cast).is_some() {\n-        return None;\n-    }\n-\n-    let hir_path = hir::Path::from_ast(path.clone())?;\n-    let segments = collect_hir_path_segments(&hir_path)?;\n-    if segments.len() < 2 {\n-        return None;\n-    }\n-\n-    if let Some(module) = path.syntax().ancestors().find_map(ast::Module::cast) {\n-        if let (Some(item_list), Some(name)) = (module.item_list(), module.name()) {\n-            ctx.add_action(\n-                AssistId(\"auto_import\"),\n-                format!(\"import {} in mod {}\", fmt_segments(&segments), name.text()),\n-                |edit| {\n-                    apply_auto_import(\n-                        item_list.syntax(),\n-                        &path,\n-                        &segments,\n-                        edit.text_edit_builder(),\n-                    );\n-                },\n-            );\n-        }\n-    } else {\n-        let current_file = path.syntax().ancestors().find_map(ast::SourceFile::cast)?;\n-        ctx.add_action(\n-            AssistId(\"auto_import\"),\n-            format!(\"import {} in the current file\", fmt_segments(&segments)),\n-            |edit| {\n-                apply_auto_import(\n-                    current_file.syntax(),\n-                    &path,\n-                    &segments,\n-                    edit.text_edit_builder(),\n-                );\n-            },\n-        );\n-    }\n-\n-    ctx.build()\n-}\n-\n #[cfg(test)]\n mod tests {\n     use super::*;\n@@ -601,7 +601,7 @@ mod tests {\n     #[test]\n     fn test_auto_import_add_use_no_anchor() {\n         check_assist(\n-            auto_import,\n+            add_import,\n             \"\n std::fmt::Debug<|>\n     \",\n@@ -615,7 +615,7 @@ Debug<|>\n     #[test]\n     fn test_auto_import_add_use_no_anchor_with_item_below() {\n         check_assist(\n-            auto_import,\n+            add_import,\n             \"\n std::fmt::Debug<|>\n \n@@ -636,7 +636,7 @@ fn main() {\n     #[test]\n     fn test_auto_import_add_use_no_anchor_with_item_above() {\n         check_assist(\n-            auto_import,\n+            add_import,\n             \"\n fn main() {\n }\n@@ -657,7 +657,7 @@ Debug<|>\n     #[test]\n     fn test_auto_import_add_use_no_anchor_2seg() {\n         check_assist(\n-            auto_import,\n+            add_import,\n             \"\n std::fmt<|>::Debug\n     \",\n@@ -672,7 +672,7 @@ fmt<|>::Debug\n     #[test]\n     fn test_auto_import_add_use() {\n         check_assist(\n-            auto_import,\n+            add_import,\n             \"\n use stdx;\n \n@@ -692,7 +692,7 @@ impl Debug<|> for Foo {\n     #[test]\n     fn test_auto_import_file_use_other_anchor() {\n         check_assist(\n-            auto_import,\n+            add_import,\n             \"\n impl std::fmt::Debug<|> for Foo {\n }\n@@ -709,7 +709,7 @@ impl Debug<|> for Foo {\n     #[test]\n     fn test_auto_import_add_use_other_anchor_indent() {\n         check_assist(\n-            auto_import,\n+            add_import,\n             \"\n     impl std::fmt::Debug<|> for Foo {\n     }\n@@ -726,7 +726,7 @@ impl Debug<|> for Foo {\n     #[test]\n     fn test_auto_import_split_different() {\n         check_assist(\n-            auto_import,\n+            add_import,\n             \"\n use std::fmt;\n \n@@ -745,7 +745,7 @@ impl io<|> for Foo {\n     #[test]\n     fn test_auto_import_split_self_for_use() {\n         check_assist(\n-            auto_import,\n+            add_import,\n             \"\n use std::fmt;\n \n@@ -764,7 +764,7 @@ impl Debug<|> for Foo {\n     #[test]\n     fn test_auto_import_split_self_for_target() {\n         check_assist(\n-            auto_import,\n+            add_import,\n             \"\n use std::fmt::Debug;\n \n@@ -783,7 +783,7 @@ impl fmt<|> for Foo {\n     #[test]\n     fn test_auto_import_add_to_nested_self_nested() {\n         check_assist(\n-            auto_import,\n+            add_import,\n             \"\n use std::fmt::{Debug, nested::{Display}};\n \n@@ -802,7 +802,7 @@ impl nested<|> for Foo {\n     #[test]\n     fn test_auto_import_add_to_nested_self_already_included() {\n         check_assist(\n-            auto_import,\n+            add_import,\n             \"\n use std::fmt::{Debug, nested::{self, Display}};\n \n@@ -821,7 +821,7 @@ impl nested<|> for Foo {\n     #[test]\n     fn test_auto_import_add_to_nested_nested() {\n         check_assist(\n-            auto_import,\n+            add_import,\n             \"\n use std::fmt::{Debug, nested::{Display}};\n \n@@ -840,7 +840,7 @@ impl Debug<|> for Foo {\n     #[test]\n     fn test_auto_import_split_common_target_longer() {\n         check_assist(\n-            auto_import,\n+            add_import,\n             \"\n use std::fmt::Debug;\n \n@@ -859,7 +859,7 @@ impl Display<|> for Foo {\n     #[test]\n     fn test_auto_import_split_common_use_longer() {\n         check_assist(\n-            auto_import,\n+            add_import,\n             \"\n use std::fmt::nested::Debug;\n \n@@ -878,7 +878,7 @@ impl Display<|> for Foo {\n     #[test]\n     fn test_auto_import_alias() {\n         check_assist(\n-            auto_import,\n+            add_import,\n             \"\n use std::fmt as foo;\n \n@@ -897,7 +897,7 @@ impl Debug<|> for Foo {\n     #[test]\n     fn test_auto_import_not_applicable_one_segment() {\n         check_assist_not_applicable(\n-            auto_import,\n+            add_import,\n             \"\n impl foo<|> for Foo {\n }\n@@ -908,7 +908,7 @@ impl foo<|> for Foo {\n     #[test]\n     fn test_auto_import_not_applicable_in_use() {\n         check_assist_not_applicable(\n-            auto_import,\n+            add_import,\n             \"\n use std::fmt<|>;\n \",\n@@ -918,7 +918,7 @@ use std::fmt<|>;\n     #[test]\n     fn test_auto_import_add_use_no_anchor_in_mod_mod() {\n         check_assist(\n-            auto_import,\n+            add_import,\n             \"\n mod foo {\n     mod bar {", "previous_filename": "crates/ra_assists/src/assists/auto_import.rs"}, {"sha": "7c226572a54f4fd8a7c780a47e0b501aac76c1cf", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/73532e900e2ea3b012d540d6dd9df9b564fb5852/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73532e900e2ea3b012d540d6dd9df9b564fb5852/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=73532e900e2ea3b012d540d6dd9df9b564fb5852", "patch": "@@ -17,7 +17,7 @@ use ra_syntax::{TextRange, TextUnit};\n use ra_text_edit::TextEdit;\n \n pub(crate) use crate::assist_ctx::{Assist, AssistCtx};\n-pub use crate::assists::auto_import::auto_import_text_edit;\n+pub use crate::assists::add_import::auto_import_text_edit;\n \n /// Unique identifier of the assist, should not be shown to the user\n /// directly.\n@@ -106,7 +106,7 @@ mod assists {\n     mod replace_if_let_with_match;\n     mod split_import;\n     mod remove_dbg;\n-    pub(crate) mod auto_import;\n+    pub(crate) mod add_import;\n     mod add_missing_impl_members;\n     mod move_guard;\n     mod move_bounds;\n@@ -127,7 +127,7 @@ mod assists {\n             replace_if_let_with_match::replace_if_let_with_match,\n             split_import::split_import,\n             remove_dbg::remove_dbg,\n-            auto_import::auto_import,\n+            add_import::add_import,\n             add_missing_impl_members::add_missing_impl_members,\n             add_missing_impl_members::add_missing_default_members,\n             inline_local_variable::inline_local_varialbe,"}]}