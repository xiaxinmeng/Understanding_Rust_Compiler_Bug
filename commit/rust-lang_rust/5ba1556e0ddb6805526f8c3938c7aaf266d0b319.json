{"sha": "5ba1556e0ddb6805526f8c3938c7aaf266d0b319", "node_id": "C_kwDOAAsO6NoAKDViYTE1NTZlMGRkYjY4MDU1MjZmOGMzOTM4YzdhYWYyNjZkMGIzMTk", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-10-30T20:51:15Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-10-31T21:25:08Z"}, "message": "Create NLL infer vars for late-bound regions from closures", "tree": {"sha": "8333657c535225b11defa814a81ada839264ef52", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8333657c535225b11defa814a81ada839264ef52"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ba1556e0ddb6805526f8c3938c7aaf266d0b319", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ba1556e0ddb6805526f8c3938c7aaf266d0b319", "html_url": "https://github.com/rust-lang/rust/commit/5ba1556e0ddb6805526f8c3938c7aaf266d0b319", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ba1556e0ddb6805526f8c3938c7aaf266d0b319/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f28de513a309af7593e8959f92ec11e07ea255f", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f28de513a309af7593e8959f92ec11e07ea255f", "html_url": "https://github.com/rust-lang/rust/commit/9f28de513a309af7593e8959f92ec11e07ea255f"}], "stats": {"total": 66, "additions": 36, "deletions": 30}, "files": [{"sha": "51439dec4409194bb92c8b8e35118414b200b1ed", "filename": "compiler/rustc_borrowck/src/universal_regions.rs", "status": "modified", "additions": 35, "deletions": 27, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/5ba1556e0ddb6805526f8c3938c7aaf266d0b319/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ba1556e0ddb6805526f8c3938c7aaf266d0b319/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs?ref=5ba1556e0ddb6805526f8c3938c7aaf266d0b319", "patch": "@@ -22,7 +22,9 @@ use rustc_hir::{BodyOwnerKind, HirId};\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_infer::infer::{InferCtxt, NllRegionVariableOrigin};\n use rustc_middle::ty::fold::TypeFoldable;\n-use rustc_middle::ty::{self, InlineConstSubsts, InlineConstSubstsParts, RegionVid, Ty, TyCtxt};\n+use rustc_middle::ty::{\n+    self, DefIdTree, InlineConstSubsts, InlineConstSubstsParts, RegionVid, Ty, TyCtxt,\n+};\n use rustc_middle::ty::{InternalSubsts, SubstsRef};\n use std::iter;\n \n@@ -421,13 +423,15 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n             first_extern_index\n         } else {\n             // If this is a closure, generator, or inline-const, then the late-bound regions from the enclosing\n-            // function are actually external regions to us. For example, here, 'a is not local\n+            // function/closures are actually external regions to us. For example, here, 'a is not local\n             // to the closure c (although it is local to the fn foo):\n             // fn foo<'a>() {\n             //     let c = || { let x: &'a u32 = ...; }\n             // }\n-            self.infcx\n-                .replace_late_bound_regions_with_nll_infer_vars(self.mir_def.did, &mut indices);\n+            self.infcx.replace_late_bound_regions_with_nll_infer_vars(\n+                self.infcx.tcx.local_parent(self.mir_def.did),\n+                &mut indices,\n+            );\n             // Any regions created during the execution of `defining_ty` or during the above\n             // late-bound region replacement are all considered 'extern' regions\n             self.infcx.num_region_vars()\n@@ -444,12 +448,9 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n             bound_inputs_and_output,\n             &mut indices,\n         );\n-        // Converse of above, if this is a function then the late-bound regions declared on its\n-        // signature are local to the fn.\n-        if self.mir_def.did.to_def_id() == typeck_root_def_id {\n-            self.infcx\n-                .replace_late_bound_regions_with_nll_infer_vars(self.mir_def.did, &mut indices);\n-        }\n+        // Converse of above, if this is a function/closure then the late-bound regions declared on its\n+        // signature are local.\n+        self.infcx.replace_late_bound_regions_with_nll_infer_vars(self.mir_def.did, &mut indices);\n \n         let (unnormalized_output_ty, mut unnormalized_input_tys) =\n             inputs_and_output.split_last().unwrap();\n@@ -748,18 +749,28 @@ impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n     #[instrument(skip(self, indices))]\n     fn replace_late_bound_regions_with_nll_infer_vars(\n         &self,\n-        mir_def_id: LocalDefId,\n+        mut mir_def_id: LocalDefId,\n         indices: &mut UniversalRegionIndices<'tcx>,\n     ) {\n         let typeck_root_def_id = self.tcx.typeck_root_def_id(mir_def_id.to_def_id());\n-        for_each_late_bound_region_defined_on(self.tcx, typeck_root_def_id, |r| {\n-            debug!(?r);\n-            if !indices.indices.contains_key(&r) {\n-                let region_vid = self.next_nll_region_var(FR);\n-                debug!(?region_vid);\n-                indices.insert_late_bound_region(r, region_vid.to_region_vid());\n+\n+        // Walk up the tree, collecting late-bound regions until we hit the typeck root\n+        loop {\n+            for_each_late_bound_region_defined_on(self.tcx, mir_def_id.to_def_id(), |r| {\n+                debug!(?r);\n+                if !indices.indices.contains_key(&r) {\n+                    let region_vid = self.next_nll_region_var(FR);\n+                    debug!(?region_vid);\n+                    indices.insert_late_bound_region(r, region_vid.to_region_vid());\n+                }\n+            });\n+\n+            if mir_def_id.to_def_id() == typeck_root_def_id {\n+                break;\n+            } else {\n+                mir_def_id = self.tcx.parent(mir_def_id.to_def_id()).expect_local();\n             }\n-        });\n+        }\n     }\n }\n \n@@ -810,14 +821,11 @@ fn for_each_late_bound_region_defined_on<'tcx>(\n     fn_def_id: DefId,\n     mut f: impl FnMut(ty::Region<'tcx>),\n ) {\n-    if let Some(late_bounds) = tcx.is_late_bound_map(fn_def_id.expect_local()) {\n-        for &region_def_id in late_bounds.iter() {\n-            let name = tcx.item_name(region_def_id.to_def_id());\n-            let liberated_region = tcx.mk_region(ty::ReFree(ty::FreeRegion {\n-                scope: fn_def_id,\n-                bound_region: ty::BoundRegionKind::BrNamed(region_def_id.to_def_id(), name),\n-            }));\n-            f(liberated_region);\n-        }\n+    for bound_var in tcx.late_bound_vars(tcx.hir().local_def_id_to_hir_id(fn_def_id.expect_local()))\n+    {\n+        let ty::BoundVariableKind::Region(bound_region) = bound_var else { continue; };\n+        let liberated_region =\n+            tcx.mk_region(ty::ReFree(ty::FreeRegion { scope: fn_def_id, bound_region }));\n+        f(liberated_region);\n     }\n }"}, {"sha": "a9c503585a179fe02a4c774bc5ccf242743c692b", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ba1556e0ddb6805526f8c3938c7aaf266d0b319/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ba1556e0ddb6805526f8c3938c7aaf266d0b319/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=5ba1556e0ddb6805526f8c3938c7aaf266d0b319", "patch": "@@ -2895,9 +2895,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.mk_bound_variable_kinds(\n             self.late_bound_vars_map(id.owner)\n                 .and_then(|map| map.get(&id.local_id).cloned())\n-                .unwrap_or_else(|| {\n-                    bug!(\"No bound vars found for {:?} ({:?})\", self.hir().node_to_string(id), id)\n-                })\n+                .unwrap_or_default()\n                 .iter(),\n         )\n     }"}]}