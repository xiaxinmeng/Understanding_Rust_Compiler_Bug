{"sha": "db83fdc46c9d866578de418f17461593f829988c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiODNmZGM0NmM5ZDg2NjU3OGRlNDE4ZjE3NDYxNTkzZjgyOTk4OGM=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-04-09T10:24:53Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-04-13T20:39:10Z"}, "message": "unit rvalue: use constant `()` instead of tuple", "tree": {"sha": "6da12a647d7da52282baf7c3ec7365c528dad3df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6da12a647d7da52282baf7c3ec7365c528dad3df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db83fdc46c9d866578de418f17461593f829988c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db83fdc46c9d866578de418f17461593f829988c", "html_url": "https://github.com/rust-lang/rust/commit/db83fdc46c9d866578de418f17461593f829988c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db83fdc46c9d866578de418f17461593f829988c/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c58c53274401acdc739f177aa3e408241e2e52d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/c58c53274401acdc739f177aa3e408241e2e52d8", "html_url": "https://github.com/rust-lang/rust/commit/c58c53274401acdc739f177aa3e408241e2e52d8"}], "stats": {"total": 30, "additions": 20, "deletions": 10}, "files": [{"sha": "71c2e3bf06095693207f4879f2636ac94d1dc7a1", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/db83fdc46c9d866578de418f17461593f829988c/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db83fdc46c9d866578de418f17461593f829988c/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=db83fdc46c9d866578de418f17461593f829988c", "patch": "@@ -835,7 +835,11 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n                     if self.keep_original {\n                         rhs.clone()\n                     } else {\n-                        let unit = Rvalue::Aggregate(box AggregateKind::Tuple, vec![]);\n+                        let unit = Rvalue::Use(Operand::Constant(box Constant {\n+                            span: statement.source_info.span,\n+                            user_ty: None,\n+                            literal: ty::Const::zero_sized(self.tcx, self.tcx.types.unit),\n+                        }));\n                         mem::replace(rhs, unit)\n                     },\n                     statement.source_info,"}, {"sha": "4e8d5e04a63505d0269815e608e41acfe01ee466", "filename": "src/librustc_mir_build/build/block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db83fdc46c9d866578de418f17461593f829988c/src%2Flibrustc_mir_build%2Fbuild%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db83fdc46c9d866578de418f17461593f829988c/src%2Flibrustc_mir_build%2Fbuild%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fblock.rs?ref=db83fdc46c9d866578de418f17461593f829988c", "patch": "@@ -187,7 +187,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             if destination_ty.is_unit() {\n                 // We only want to assign an implicit `()` as the return value of the block if the\n                 // block does not diverge. (Otherwise, we may try to assign a unit to a `!`-type.)\n-                this.cfg.push_assign_unit(block, source_info, destination);\n+                this.cfg.push_assign_unit(block, source_info, destination, this.hir.tcx());\n             }\n         }\n         // Finally, we pop all the let scopes before exiting out from the scope of block"}, {"sha": "42e2b242d7726688f1a8f9a0ffcb19fc14ec9543", "filename": "src/librustc_mir_build/build/cfg.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/db83fdc46c9d866578de418f17461593f829988c/src%2Flibrustc_mir_build%2Fbuild%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db83fdc46c9d866578de418f17461593f829988c/src%2Flibrustc_mir_build%2Fbuild%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fcfg.rs?ref=db83fdc46c9d866578de418f17461593f829988c", "patch": "@@ -2,6 +2,7 @@\n \n use crate::build::CFG;\n use rustc_middle::mir::*;\n+use rustc_middle::ty::{self, TyCtxt};\n \n impl<'tcx> CFG<'tcx> {\n     crate fn block_data(&self, blk: BasicBlock) -> &BasicBlockData<'tcx> {\n@@ -58,12 +59,17 @@ impl<'tcx> CFG<'tcx> {\n         block: BasicBlock,\n         source_info: SourceInfo,\n         place: Place<'tcx>,\n+        tcx: TyCtxt<'tcx>,\n     ) {\n         self.push_assign(\n             block,\n             source_info,\n             place,\n-            Rvalue::Aggregate(box AggregateKind::Tuple, vec![]),\n+            Rvalue::Use(Operand::Constant(box Constant {\n+                span: source_info.span,\n+                user_ty: None,\n+                literal: ty::Const::zero_sized(tcx, tcx.types.unit),\n+            })),\n         );\n     }\n "}, {"sha": "b6f46aab4161268adc99f681dd260b4d6e22b3f3", "filename": "src/librustc_mir_build/build/expr/as_rvalue.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/db83fdc46c9d866578de418f17461593f829988c/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db83fdc46c9d866578de418f17461593f829988c/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=db83fdc46c9d866578de418f17461593f829988c", "patch": "@@ -225,7 +225,11 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             }\n             ExprKind::Assign { .. } | ExprKind::AssignOp { .. } => {\n                 block = unpack!(this.stmt_expr(block, expr, None));\n-                block.and(this.unit_rvalue())\n+                block.and(Rvalue::Use(Operand::Constant(box Constant {\n+                    span: expr_span,\n+                    user_ty: None,\n+                    literal: ty::Const::zero_sized(this.hir.tcx(), this.hir.tcx().types.unit),\n+                })))\n             }\n             ExprKind::Yield { .. }\n             | ExprKind::Literal { .. }"}, {"sha": "cd5bb738aedf8eb27e044187794a97eb7c8fd6da", "filename": "src/librustc_mir_build/build/expr/into.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db83fdc46c9d866578de418f17461593f829988c/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db83fdc46c9d866578de418f17461593f829988c/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Finto.rs?ref=db83fdc46c9d866578de418f17461593f829988c", "patch": "@@ -331,7 +331,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             | ExprKind::LlvmInlineAsm { .. }\n             | ExprKind::Return { .. } => {\n                 unpack!(block = this.stmt_expr(block, expr, None));\n-                this.cfg.push_assign_unit(block, source_info, destination);\n+                this.cfg.push_assign_unit(block, source_info, destination, this.hir.tcx());\n                 block.unit()\n             }\n "}, {"sha": "578b862b905433e4395a8400496ee452d85fc4e4", "filename": "src/librustc_mir_build/build/misc.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/db83fdc46c9d866578de418f17461593f829988c/src%2Flibrustc_mir_build%2Fbuild%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db83fdc46c9d866578de418f17461593f829988c/src%2Flibrustc_mir_build%2Fbuild%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fmisc.rs?ref=db83fdc46c9d866578de418f17461593f829988c", "patch": "@@ -32,10 +32,6 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         Operand::Constant(constant)\n     }\n \n-    crate fn unit_rvalue(&mut self) -> Rvalue<'tcx> {\n-        Rvalue::Aggregate(box AggregateKind::Tuple, vec![])\n-    }\n-\n     // Returns a zero literal operand for the appropriate type, works for\n     // bool, char and integers.\n     crate fn zero_literal(&mut self, span: Span, ty: Ty<'tcx>) -> Operand<'tcx> {"}, {"sha": "d88cbf945130569c12764693fca0e80f93f58422", "filename": "src/librustc_mir_build/build/scope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db83fdc46c9d866578de418f17461593f829988c/src%2Flibrustc_mir_build%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db83fdc46c9d866578de418f17461593f829988c/src%2Flibrustc_mir_build%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fscope.rs?ref=db83fdc46c9d866578de418f17461593f829988c", "patch": "@@ -523,7 +523,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 unpack!(block = self.into(destination, block, value));\n                 self.block_context.pop();\n             } else {\n-                self.cfg.push_assign_unit(block, source_info, destination)\n+                self.cfg.push_assign_unit(block, source_info, destination, self.hir.tcx())\n             }\n         } else {\n             assert!(value.is_none(), \"`return` and `break` should have a destination\");"}]}