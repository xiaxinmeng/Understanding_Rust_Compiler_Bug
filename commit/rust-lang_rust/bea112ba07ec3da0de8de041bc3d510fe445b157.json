{"sha": "bea112ba07ec3da0de8de041bc3d510fe445b157", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlYTExMmJhMDdlYzNkYTBkZThkZTA0MWJjM2Q1MTBmZTQ0NWIxNTc=", "commit": {"author": {"name": "Rich Kadel", "email": "richkadel@google.com", "date": "2021-05-11T19:47:08Z"}, "committer": {"name": "Rich Kadel", "email": "richkadel@google.com", "date": "2021-05-11T19:47:08Z"}, "message": "Revert \"Auto merge of #84797 - richkadel:cover-unreachable-statements, r=tmandry\"\n\nThis reverts commit e5f83d24aee866a14753a7cedbb4e301dfe5bef5, reversing\nchanges made to ac888e8675182c703c2cd097957878faf88dad94.", "tree": {"sha": "7588ebbe92c00c29d66f3a6331710e1015b81404", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7588ebbe92c00c29d66f3a6331710e1015b81404"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bea112ba07ec3da0de8de041bc3d510fe445b157", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bea112ba07ec3da0de8de041bc3d510fe445b157", "html_url": "https://github.com/rust-lang/rust/commit/bea112ba07ec3da0de8de041bc3d510fe445b157", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bea112ba07ec3da0de8de041bc3d510fe445b157/comments", "author": {"login": "richkadel", "id": 3827298, "node_id": "MDQ6VXNlcjM4MjcyOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/3827298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richkadel", "html_url": "https://github.com/richkadel", "followers_url": "https://api.github.com/users/richkadel/followers", "following_url": "https://api.github.com/users/richkadel/following{/other_user}", "gists_url": "https://api.github.com/users/richkadel/gists{/gist_id}", "starred_url": "https://api.github.com/users/richkadel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richkadel/subscriptions", "organizations_url": "https://api.github.com/users/richkadel/orgs", "repos_url": "https://api.github.com/users/richkadel/repos", "events_url": "https://api.github.com/users/richkadel/events{/privacy}", "received_events_url": "https://api.github.com/users/richkadel/received_events", "type": "User", "site_admin": false}, "committer": {"login": "richkadel", "id": 3827298, "node_id": "MDQ6VXNlcjM4MjcyOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/3827298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richkadel", "html_url": "https://github.com/richkadel", "followers_url": "https://api.github.com/users/richkadel/followers", "following_url": "https://api.github.com/users/richkadel/following{/other_user}", "gists_url": "https://api.github.com/users/richkadel/gists{/gist_id}", "starred_url": "https://api.github.com/users/richkadel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richkadel/subscriptions", "organizations_url": "https://api.github.com/users/richkadel/orgs", "repos_url": "https://api.github.com/users/richkadel/repos", "events_url": "https://api.github.com/users/richkadel/events{/privacy}", "received_events_url": "https://api.github.com/users/richkadel/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba8d7e2cb7cfc87070585c17cd0aa4ae7f091a08", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba8d7e2cb7cfc87070585c17cd0aa4ae7f091a08", "html_url": "https://github.com/rust-lang/rust/commit/ba8d7e2cb7cfc87070585c17cd0aa4ae7f091a08"}], "stats": {"total": 167, "additions": 65, "deletions": 102}, "files": [{"sha": "b5c8b4bebc360496349001822c0dc24c1bece0f2", "filename": "compiler/rustc_mir/src/transform/const_goto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea112ba07ec3da0de8de041bc3d510fe445b157/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_goto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea112ba07ec3da0de8de041bc3d510fe445b157/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_goto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_goto.rs?ref=bea112ba07ec3da0de8de041bc3d510fe445b157", "patch": "@@ -47,7 +47,7 @@ impl<'tcx> MirPass<'tcx> for ConstGoto {\n         // if we applied optimizations, we potentially have some cfg to cleanup to\n         // make it easier for further passes\n         if should_simplify {\n-            simplify_cfg(tcx, body);\n+            simplify_cfg(body);\n             simplify_locals(body, tcx);\n         }\n     }"}, {"sha": "c41e71e09a4efc7d64186850460538b2b254d0cb", "filename": "compiler/rustc_mir/src/transform/deduplicate_blocks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea112ba07ec3da0de8de041bc3d510fe445b157/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fdeduplicate_blocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea112ba07ec3da0de8de041bc3d510fe445b157/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fdeduplicate_blocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fdeduplicate_blocks.rs?ref=bea112ba07ec3da0de8de041bc3d510fe445b157", "patch": "@@ -26,7 +26,7 @@ impl<'tcx> MirPass<'tcx> for DeduplicateBlocks {\n         if has_opts_to_apply {\n             let mut opt_applier = OptApplier { tcx, duplicates };\n             opt_applier.visit_body(body);\n-            simplify_cfg(tcx, body);\n+            simplify_cfg(body);\n         }\n     }\n }"}, {"sha": "f7ea9faec47283cf2903062fedd031d0f9c4a440", "filename": "compiler/rustc_mir/src/transform/early_otherwise_branch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea112ba07ec3da0de8de041bc3d510fe445b157/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fearly_otherwise_branch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea112ba07ec3da0de8de041bc3d510fe445b157/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fearly_otherwise_branch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fearly_otherwise_branch.rs?ref=bea112ba07ec3da0de8de041bc3d510fe445b157", "patch": "@@ -164,7 +164,7 @@ impl<'tcx> MirPass<'tcx> for EarlyOtherwiseBranch {\n         // Since this optimization adds new basic blocks and invalidates others,\n         // clean up the cfg to make it nicer for other passes\n         if should_cleanup {\n-            simplify_cfg(tcx, body);\n+            simplify_cfg(body);\n         }\n     }\n }"}, {"sha": "003003a8abbeae90f8f736d89e8a3a504e271de8", "filename": "compiler/rustc_mir/src/transform/generator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bea112ba07ec3da0de8de041bc3d510fe445b157/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea112ba07ec3da0de8de041bc3d510fe445b157/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fgenerator.rs?ref=bea112ba07ec3da0de8de041bc3d510fe445b157", "patch": "@@ -964,7 +964,7 @@ fn create_generator_drop_shim<'tcx>(\n \n     // Make sure we remove dead blocks to remove\n     // unrelated code from the resume part of the function\n-    simplify::remove_dead_blocks(tcx, &mut body);\n+    simplify::remove_dead_blocks(&mut body);\n \n     dump_mir(tcx, None, \"generator_drop\", &0, &body, |_, _| Ok(()));\n \n@@ -1137,7 +1137,7 @@ fn create_generator_resume_function<'tcx>(\n \n     // Make sure we remove dead blocks to remove\n     // unrelated code from the drop part of the function\n-    simplify::remove_dead_blocks(tcx, body);\n+    simplify::remove_dead_blocks(body);\n \n     dump_mir(tcx, None, \"generator_resume\", &0, body, |_, _| Ok(()));\n }"}, {"sha": "b6f80763bc8c4c2b94b445b999a0d1bb85c2f3bb", "filename": "compiler/rustc_mir/src/transform/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea112ba07ec3da0de8de041bc3d510fe445b157/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea112ba07ec3da0de8de041bc3d510fe445b157/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs?ref=bea112ba07ec3da0de8de041bc3d510fe445b157", "patch": "@@ -57,7 +57,7 @@ impl<'tcx> MirPass<'tcx> for Inline {\n         if inline(tcx, body) {\n             debug!(\"running simplify cfg on {:?}\", body.source);\n             CfgSimplifier::new(body).simplify();\n-            remove_dead_blocks(tcx, body);\n+            remove_dead_blocks(body);\n         }\n     }\n }"}, {"sha": "f7a9835353e5cff77c14c762641f2bf99103e088", "filename": "compiler/rustc_mir/src/transform/match_branches.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea112ba07ec3da0de8de041bc3d510fe445b157/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmatch_branches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea112ba07ec3da0de8de041bc3d510fe445b157/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmatch_branches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmatch_branches.rs?ref=bea112ba07ec3da0de8de041bc3d510fe445b157", "patch": "@@ -167,7 +167,7 @@ impl<'tcx> MirPass<'tcx> for MatchBranchSimplification {\n         }\n \n         if should_cleanup {\n-            simplify_cfg(tcx, body);\n+            simplify_cfg(body);\n         }\n     }\n }"}, {"sha": "4aaa0baa9f46a26fb640f59b73e5f322eb84c6db", "filename": "compiler/rustc_mir/src/transform/multiple_return_terminators.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea112ba07ec3da0de8de041bc3d510fe445b157/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmultiple_return_terminators.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea112ba07ec3da0de8de041bc3d510fe445b157/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmultiple_return_terminators.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmultiple_return_terminators.rs?ref=bea112ba07ec3da0de8de041bc3d510fe445b157", "patch": "@@ -38,6 +38,6 @@ impl<'tcx> MirPass<'tcx> for MultipleReturnTerminators {\n             }\n         }\n \n-        simplify::remove_dead_blocks(tcx, body)\n+        simplify::remove_dead_blocks(body)\n     }\n }"}, {"sha": "5144d48750de70d7febebd7a0c6dcc013c157781", "filename": "compiler/rustc_mir/src/transform/remove_unneeded_drops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea112ba07ec3da0de8de041bc3d510fe445b157/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fremove_unneeded_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea112ba07ec3da0de8de041bc3d510fe445b157/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fremove_unneeded_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fremove_unneeded_drops.rs?ref=bea112ba07ec3da0de8de041bc3d510fe445b157", "patch": "@@ -36,7 +36,7 @@ impl<'tcx> MirPass<'tcx> for RemoveUnneededDrops {\n         // if we applied optimizations, we potentially have some cfg to cleanup to\n         // make it easier for further passes\n         if should_simplify {\n-            simplify_cfg(tcx, body);\n+            simplify_cfg(body);\n         }\n     }\n }"}, {"sha": "65e2d096b209462dd496320f589244ea13d12241", "filename": "compiler/rustc_mir/src/transform/simplify.rs", "status": "modified", "additions": 5, "deletions": 37, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/bea112ba07ec3da0de8de041bc3d510fe445b157/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea112ba07ec3da0de8de041bc3d510fe445b157/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fsimplify.rs?ref=bea112ba07ec3da0de8de041bc3d510fe445b157", "patch": "@@ -29,7 +29,6 @@\n \n use crate::transform::MirPass;\n use rustc_index::vec::{Idx, IndexVec};\n-use rustc_middle::mir::coverage::*;\n use rustc_middle::mir::visit::{MutVisitor, MutatingUseContext, PlaceContext, Visitor};\n use rustc_middle::mir::*;\n use rustc_middle::ty::TyCtxt;\n@@ -47,9 +46,9 @@ impl SimplifyCfg {\n     }\n }\n \n-pub fn simplify_cfg(tcx: TyCtxt<'tcx>, body: &mut Body<'_>) {\n+pub fn simplify_cfg(body: &mut Body<'_>) {\n     CfgSimplifier::new(body).simplify();\n-    remove_dead_blocks(tcx, body);\n+    remove_dead_blocks(body);\n \n     // FIXME: Should probably be moved into some kind of pass manager\n     body.basic_blocks_mut().raw.shrink_to_fit();\n@@ -60,9 +59,9 @@ impl<'tcx> MirPass<'tcx> for SimplifyCfg {\n         Cow::Borrowed(&self.label)\n     }\n \n-    fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n+    fn run_pass(&self, _tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n         debug!(\"SimplifyCfg({:?}) - simplifying {:?}\", self.label, body.source);\n-        simplify_cfg(tcx, body);\n+        simplify_cfg(body);\n     }\n }\n \n@@ -287,7 +286,7 @@ impl<'a, 'tcx> CfgSimplifier<'a, 'tcx> {\n     }\n }\n \n-pub fn remove_dead_blocks(tcx: TyCtxt<'tcx>, body: &mut Body<'_>) {\n+pub fn remove_dead_blocks(body: &mut Body<'_>) {\n     let reachable = traversal::reachable_as_bitset(body);\n     let num_blocks = body.basic_blocks().len();\n     if num_blocks == reachable.count() {\n@@ -307,11 +306,6 @@ pub fn remove_dead_blocks(tcx: TyCtxt<'tcx>, body: &mut Body<'_>) {\n         }\n         used_blocks += 1;\n     }\n-\n-    if tcx.sess.instrument_coverage() {\n-        save_unreachable_coverage(basic_blocks, used_blocks);\n-    }\n-\n     basic_blocks.raw.truncate(used_blocks);\n \n     for block in basic_blocks {\n@@ -321,32 +315,6 @@ pub fn remove_dead_blocks(tcx: TyCtxt<'tcx>, body: &mut Body<'_>) {\n     }\n }\n \n-fn save_unreachable_coverage(\n-    basic_blocks: &mut IndexVec<BasicBlock, BasicBlockData<'_>>,\n-    first_dead_block: usize,\n-) {\n-    // retain coverage info for dead blocks, so coverage reports will still\n-    // report `0` executions for the uncovered code regions.\n-    let mut dropped_coverage = Vec::new();\n-    for dead_block in first_dead_block..basic_blocks.len() {\n-        for statement in basic_blocks[BasicBlock::new(dead_block)].statements.iter() {\n-            if let StatementKind::Coverage(coverage) = &statement.kind {\n-                if let Some(code_region) = &coverage.code_region {\n-                    dropped_coverage.push((statement.source_info, code_region.clone()));\n-                }\n-            }\n-        }\n-    }\n-    for (source_info, code_region) in dropped_coverage {\n-        basic_blocks[START_BLOCK].statements.push(Statement {\n-            source_info,\n-            kind: StatementKind::Coverage(box Coverage {\n-                kind: CoverageKind::Unreachable,\n-                code_region: Some(code_region),\n-            }),\n-        })\n-    }\n-}\n pub struct SimplifyLocals;\n \n impl<'tcx> MirPass<'tcx> for SimplifyLocals {"}, {"sha": "b42543c04eb3dd4d0dec4d2f1af86b94f14e5132", "filename": "compiler/rustc_mir/src/transform/simplify_try.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea112ba07ec3da0de8de041bc3d510fe445b157/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fsimplify_try.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea112ba07ec3da0de8de041bc3d510fe445b157/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fsimplify_try.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fsimplify_try.rs?ref=bea112ba07ec3da0de8de041bc3d510fe445b157", "patch": "@@ -558,7 +558,7 @@ impl<'tcx> MirPass<'tcx> for SimplifyBranchSame {\n \n         if did_remove_blocks {\n             // We have dead blocks now, so remove those.\n-            simplify::remove_dead_blocks(tcx, body);\n+            simplify::remove_dead_blocks(body);\n         }\n     }\n }"}, {"sha": "658c6b6e9db20086855c89e94b73799352195b87", "filename": "compiler/rustc_mir/src/transform/unreachable_prop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea112ba07ec3da0de8de041bc3d510fe445b157/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Funreachable_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea112ba07ec3da0de8de041bc3d510fe445b157/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Funreachable_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Funreachable_prop.rs?ref=bea112ba07ec3da0de8de041bc3d510fe445b157", "patch": "@@ -60,7 +60,7 @@ impl MirPass<'_> for UnreachablePropagation {\n         }\n \n         if replaced {\n-            simplify::remove_dead_blocks(tcx, body);\n+            simplify::remove_dead_blocks(body);\n         }\n     }\n }"}, {"sha": "322f5681b3fd9278243359047748a891ca46fe21", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_show_coverage.async2.txt", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bea112ba07ec3da0de8de041bc3d510fe445b157/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.async2.txt", "raw_url": "https://github.com/rust-lang/rust/raw/bea112ba07ec3da0de8de041bc3d510fe445b157/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.async2.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.async2.txt?ref=bea112ba07ec3da0de8de041bc3d510fe445b157", "patch": "@@ -12,7 +12,6 @@\n    12|      1|    if b {\n    13|      1|        println!(\"non_async_func println in block\");\n    14|      1|    }\n-                   ^0\n    15|      1|}\n    16|       |\n    17|       |"}, {"sha": "656a26597759d337bac841ad5a4bfa956cac3a9b", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_show_coverage.conditions.txt", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bea112ba07ec3da0de8de041bc3d510fe445b157/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.conditions.txt", "raw_url": "https://github.com/rust-lang/rust/raw/bea112ba07ec3da0de8de041bc3d510fe445b157/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.conditions.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.conditions.txt?ref=bea112ba07ec3da0de8de041bc3d510fe445b157", "patch": "@@ -5,7 +5,6 @@\n     5|      1|    if true {\n     6|      1|        countdown = 10;\n     7|      1|    }\n-                   ^0\n     8|       |\n     9|       |    const B: u32 = 100;\n    10|      1|    let x = if countdown > 7 {\n@@ -25,7 +24,6 @@\n    24|      1|    if true {\n    25|      1|        countdown = 10;\n    26|      1|    }\n-                   ^0\n    27|       |\n    28|      1|    if countdown > 7 {\n    29|      1|        countdown -= 4;\n@@ -44,7 +42,6 @@\n    41|      1|        if true {\n    42|      1|            countdown = 10;\n    43|      1|        }\n-                       ^0\n    44|       |\n    45|      1|        if countdown > 7 {\n    46|      1|            countdown -= 4;\n@@ -57,14 +54,13 @@\n    53|       |        } else {\n    54|      0|            return;\n    55|       |        }\n-   56|      0|    }\n-   57|       |\n+   56|       |    } // Note: closing brace shows uncovered (vs. `0` for implicit else) because condition literal\n+   57|       |      // `true` was const-evaluated. The compiler knows the `if` block will be executed.\n    58|       |\n    59|      1|    let mut countdown = 0;\n    60|      1|    if true {\n    61|      1|        countdown = 1;\n    62|      1|    }\n-                   ^0\n    63|       |\n    64|      1|    let z = if countdown > 7 {\n                       ^0"}, {"sha": "1b6bb9ff8891de6c5ad657868580e8d31afe28ff", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_show_coverage.doctest.txt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bea112ba07ec3da0de8de041bc3d510fe445b157/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.doctest.txt", "raw_url": "https://github.com/rust-lang/rust/raw/bea112ba07ec3da0de8de041bc3d510fe445b157/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.doctest.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.doctest.txt?ref=bea112ba07ec3da0de8de041bc3d510fe445b157", "patch": "@@ -9,7 +9,7 @@\n     8|      1|//!     assert_eq!(1, 1);\n     9|       |//! } else {\n    10|       |//!     // this is not!\n-   11|      0|//!     assert_eq!(1, 2);\n+   11|       |//!     assert_eq!(1, 2);\n    12|       |//! }\n    13|      1|//! ```\n    14|       |//!\n@@ -84,7 +84,7 @@\n    74|      1|    if true {\n    75|      1|        assert_eq!(1, 1);\n    76|       |    } else {\n-   77|      0|        assert_eq!(1, 2);\n+   77|       |        assert_eq!(1, 2);\n    78|       |    }\n    79|      1|}\n    80|       |"}, {"sha": "fab5be41901c9b544ba12e3379b30cb96d331177", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_show_coverage.drop_trait.txt", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bea112ba07ec3da0de8de041bc3d510fe445b157/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.drop_trait.txt", "raw_url": "https://github.com/rust-lang/rust/raw/bea112ba07ec3da0de8de041bc3d510fe445b157/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.drop_trait.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.drop_trait.txt?ref=bea112ba07ec3da0de8de041bc3d510fe445b157", "patch": "@@ -19,11 +19,11 @@\n    19|      1|    if true {\n    20|      1|        println!(\"Exiting with error...\");\n    21|      1|        return Err(1);\n-   22|      0|    }\n-   23|      0|\n-   24|      0|    let _ = Firework { strength: 1000 };\n-   25|      0|\n-   26|      0|    Ok(())\n+   22|       |    }\n+   23|       |\n+   24|       |    let _ = Firework { strength: 1000 };\n+   25|       |\n+   26|       |    Ok(())\n    27|      1|}\n    28|       |\n    29|       |// Expected program output:"}, {"sha": "7b38ffb87cba89b257125b6585d09100014763df", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_show_coverage.generics.txt", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/bea112ba07ec3da0de8de041bc3d510fe445b157/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.generics.txt", "raw_url": "https://github.com/rust-lang/rust/raw/bea112ba07ec3da0de8de041bc3d510fe445b157/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.generics.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.generics.txt?ref=bea112ba07ec3da0de8de041bc3d510fe445b157", "patch": "@@ -52,15 +52,15 @@\n    30|      1|    if true {\n    31|      1|        println!(\"Exiting with error...\");\n    32|      1|        return Err(1);\n-   33|      0|    }\n-   34|      0|\n-   35|      0|\n-   36|      0|\n-   37|      0|\n-   38|      0|\n-   39|      0|    let _ = Firework { strength: 1000 };\n-   40|      0|\n-   41|      0|    Ok(())\n+   33|       |    } // The remaining lines below have no coverage because `if true` (with the constant literal\n+   34|       |      // `true`) is guaranteed to execute the `then` block, which is also guaranteed to `return`.\n+   35|       |      // Thankfully, in the normal case, conditions are not guaranteed ahead of time, and as shown\n+   36|       |      // in other tests, the lines below would have coverage (which would show they had `0`\n+   37|       |      // executions, assuming the condition still evaluated to `true`).\n+   38|       |\n+   39|       |    let _ = Firework { strength: 1000 };\n+   40|       |\n+   41|       |    Ok(())\n    42|      1|}\n    43|       |\n    44|       |// Expected program output:"}, {"sha": "81d5c7d90346d08a397e577d120352dbe465f124", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_show_coverage.loops_branches.txt", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/bea112ba07ec3da0de8de041bc3d510fe445b157/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.loops_branches.txt", "raw_url": "https://github.com/rust-lang/rust/raw/bea112ba07ec3da0de8de041bc3d510fe445b157/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.loops_branches.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.loops_branches.txt?ref=bea112ba07ec3da0de8de041bc3d510fe445b157", "patch": "@@ -9,23 +9,23 @@\n     9|      1|    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n    10|      1|        if true {\n    11|      1|            if false {\n-   12|      0|                while true {\n-   13|      0|                }\n+   12|       |                while true {\n+   13|       |                }\n    14|      1|            }\n-   15|      1|            write!(f, \"cool\")?;\n-                                           ^0\n-   16|      0|        } else {\n-   17|      0|        }\n+   15|      1|            write!(f, \"error\")?;\n+                                            ^0\n+   16|       |        } else {\n+   17|       |        }\n    18|       |\n    19|     10|        for i in 0..10 {\n    20|     10|            if true {\n    21|     10|                if false {\n-   22|      0|                    while true {}\n+   22|       |                    while true {}\n    23|     10|                }\n-   24|     10|                write!(f, \"cool\")?;\n-                                               ^0\n-   25|      0|            } else {\n-   26|      0|            }\n+   24|     10|                write!(f, \"error\")?;\n+                                                ^0\n+   25|       |            } else {\n+   26|       |            }\n    27|       |        }\n    28|      1|        Ok(())\n    29|      1|    }\n@@ -36,21 +36,21 @@\n    34|       |impl std::fmt::Display for DisplayTest {\n    35|      1|    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n    36|      1|        if false {\n-   37|      0|        } else {\n+   37|       |        } else {\n    38|      1|            if false {\n-   39|      0|                while true {}\n+   39|       |                while true {}\n    40|      1|            }\n-   41|      1|            write!(f, \"cool\")?;\n-                                           ^0\n+   41|      1|            write!(f, \"error\")?;\n+                                            ^0\n    42|       |        }\n    43|     10|        for i in 0..10 {\n    44|     10|            if false {\n-   45|      0|            } else {\n+   45|       |            } else {\n    46|     10|                if false {\n-   47|      0|                    while true {}\n+   47|       |                    while true {}\n    48|     10|                }\n-   49|     10|                write!(f, \"cool\")?;\n-                                               ^0\n+   49|     10|                write!(f, \"error\")?;\n+                                                ^0\n    50|       |            }\n    51|       |        }\n    52|      1|        Ok(())"}, {"sha": "5adeef7d0850b462b369da348651e695db38307b", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_show_coverage.tight_inf_loop.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea112ba07ec3da0de8de041bc3d510fe445b157/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.tight_inf_loop.txt", "raw_url": "https://github.com/rust-lang/rust/raw/bea112ba07ec3da0de8de041bc3d510fe445b157/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.tight_inf_loop.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.tight_inf_loop.txt?ref=bea112ba07ec3da0de8de041bc3d510fe445b157", "patch": "@@ -1,6 +1,6 @@\n     1|      1|fn main() {\n     2|      1|    if false {\n-    3|      0|        loop {}\n+    3|       |        loop {}\n     4|      1|    }\n     5|      1|}\n "}, {"sha": "8a2a0b53e5862f3031364e1e340834aedfbefda8", "filename": "src/test/run-make-fulldeps/coverage/conditions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bea112ba07ec3da0de8de041bc3d510fe445b157/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fconditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea112ba07ec3da0de8de041bc3d510fe445b157/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fconditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fconditions.rs?ref=bea112ba07ec3da0de8de041bc3d510fe445b157", "patch": "@@ -53,8 +53,8 @@ fn main() {\n         } else {\n             return;\n         }\n-    }\n-\n+    } // Note: closing brace shows uncovered (vs. `0` for implicit else) because condition literal\n+      // `true` was const-evaluated. The compiler knows the `if` block will be executed.\n \n     let mut countdown = 0;\n     if true {"}, {"sha": "cbeda35d3b8cfe8a5b226f769282d568f9689012", "filename": "src/test/run-make-fulldeps/coverage/generics.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bea112ba07ec3da0de8de041bc3d510fe445b157/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea112ba07ec3da0de8de041bc3d510fe445b157/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fgenerics.rs?ref=bea112ba07ec3da0de8de041bc3d510fe445b157", "patch": "@@ -30,11 +30,11 @@ fn main() -> Result<(),u8> {\n     if true {\n         println!(\"Exiting with error...\");\n         return Err(1);\n-    }\n-\n-\n-\n-\n+    } // The remaining lines below have no coverage because `if true` (with the constant literal\n+      // `true`) is guaranteed to execute the `then` block, which is also guaranteed to `return`.\n+      // Thankfully, in the normal case, conditions are not guaranteed ahead of time, and as shown\n+      // in other tests, the lines below would have coverage (which would show they had `0`\n+      // executions, assuming the condition still evaluated to `true`).\n \n     let _ = Firework { strength: 1000 };\n "}, {"sha": "4d9bbad3367f6ef50c9d072327ab996ec5d62cb9", "filename": "src/test/run-make-fulldeps/coverage/loops_branches.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bea112ba07ec3da0de8de041bc3d510fe445b157/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Floops_branches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea112ba07ec3da0de8de041bc3d510fe445b157/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Floops_branches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Floops_branches.rs?ref=bea112ba07ec3da0de8de041bc3d510fe445b157", "patch": "@@ -12,7 +12,7 @@ impl std::fmt::Debug for DebugTest {\n                 while true {\n                 }\n             }\n-            write!(f, \"cool\")?;\n+            write!(f, \"error\")?;\n         } else {\n         }\n \n@@ -21,7 +21,7 @@ impl std::fmt::Debug for DebugTest {\n                 if false {\n                     while true {}\n                 }\n-                write!(f, \"cool\")?;\n+                write!(f, \"error\")?;\n             } else {\n             }\n         }\n@@ -38,15 +38,15 @@ impl std::fmt::Display for DisplayTest {\n             if false {\n                 while true {}\n             }\n-            write!(f, \"cool\")?;\n+            write!(f, \"error\")?;\n         }\n         for i in 0..10 {\n             if false {\n             } else {\n                 if false {\n                     while true {}\n                 }\n-                write!(f, \"cool\")?;\n+                write!(f, \"error\")?;\n             }\n         }\n         Ok(())"}]}