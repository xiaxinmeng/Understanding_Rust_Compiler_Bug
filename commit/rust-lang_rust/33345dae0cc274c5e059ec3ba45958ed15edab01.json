{"sha": "33345dae0cc274c5e059ec3ba45958ed15edab01", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzMzQ1ZGFlMGNjMjc0YzVlMDU5ZWMzYmE0NTk1OGVkMTVlZGFiMDE=", "commit": {"author": {"name": "Alex Gaynor", "email": "alex.gaynor@gmail.com", "date": "2014-11-16T16:28:13Z"}, "committer": {"name": "Alex Gaynor", "email": "alex.gaynor@gmail.com", "date": "2014-11-16T16:28:13Z"}, "message": "Fixed several typos in libcollections", "tree": {"sha": "0471a87ed4d4bad036e7108a9d413dd35606fa41", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0471a87ed4d4bad036e7108a9d413dd35606fa41"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/33345dae0cc274c5e059ec3ba45958ed15edab01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/33345dae0cc274c5e059ec3ba45958ed15edab01", "html_url": "https://github.com/rust-lang/rust/commit/33345dae0cc274c5e059ec3ba45958ed15edab01", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/33345dae0cc274c5e059ec3ba45958ed15edab01/comments", "author": {"login": "alex", "id": 772, "node_id": "MDQ6VXNlcjc3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alex", "html_url": "https://github.com/alex", "followers_url": "https://api.github.com/users/alex/followers", "following_url": "https://api.github.com/users/alex/following{/other_user}", "gists_url": "https://api.github.com/users/alex/gists{/gist_id}", "starred_url": "https://api.github.com/users/alex/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alex/subscriptions", "organizations_url": "https://api.github.com/users/alex/orgs", "repos_url": "https://api.github.com/users/alex/repos", "events_url": "https://api.github.com/users/alex/events{/privacy}", "received_events_url": "https://api.github.com/users/alex/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alex", "id": 772, "node_id": "MDQ6VXNlcjc3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alex", "html_url": "https://github.com/alex", "followers_url": "https://api.github.com/users/alex/followers", "following_url": "https://api.github.com/users/alex/following{/other_user}", "gists_url": "https://api.github.com/users/alex/gists{/gist_id}", "starred_url": "https://api.github.com/users/alex/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alex/subscriptions", "organizations_url": "https://api.github.com/users/alex/orgs", "repos_url": "https://api.github.com/users/alex/repos", "events_url": "https://api.github.com/users/alex/events{/privacy}", "received_events_url": "https://api.github.com/users/alex/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "321488b6751e33ac9bc2d48a7e5d5c2a5ca5b615", "url": "https://api.github.com/repos/rust-lang/rust/commits/321488b6751e33ac9bc2d48a7e5d5c2a5ca5b615", "html_url": "https://github.com/rust-lang/rust/commit/321488b6751e33ac9bc2d48a7e5d5c2a5ca5b615"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "c0e37f7157a20498aaff3abd42f11027b87ee5ce", "filename": "src/libcollections/bit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/33345dae0cc274c5e059ec3ba45958ed15edab01/src%2Flibcollections%2Fbit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33345dae0cc274c5e059ec3ba45958ed15edab01/src%2Flibcollections%2Fbit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbit.rs?ref=33345dae0cc274c5e059ec3ba45958ed15edab01", "patch": "@@ -283,7 +283,7 @@ impl Bitv {\n         x != 0\n     }\n \n-    /// Sets the value of a bit at a index `i`.\n+    /// Sets the value of a bit at an index `i`.\n     ///\n     /// # Panics\n     ///\n@@ -582,7 +582,7 @@ impl Bitv {\n     ///\n     /// # Panics\n     ///\n-    /// Panics if the the `Bitv` and slice are of different length.\n+    /// Panics if the `Bitv` and slice are of different length.\n     ///\n     /// # Example\n     ///"}, {"sha": "93bcf49961b62e1f5aaa1c2dcd707596b8a27d4a", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33345dae0cc274c5e059ec3ba45958ed15edab01/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33345dae0cc274c5e059ec3ba45958ed15edab01/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=33345dae0cc274c5e059ec3ba45958ed15edab01", "patch": "@@ -53,7 +53,7 @@ use ring_buf::RingBuf;\n /// and possibly other factors. Using linear search, searching for a random element is expected\n /// to take O(B log<sub>B</sub>n) comparisons, which is generally worse than a BST. In practice,\n /// however, performance is excellent. `BTreeMap` is able to readily outperform `TreeMap` under\n-/// many workloads, and is competetive where it doesn't. BTreeMap also generally *scales* better\n+/// many workloads, and is competitive where it doesn't. BTreeMap also generally *scales* better\n /// than TreeMap, making it more appropriate for large datasets.\n ///\n /// However, `TreeMap` may still be more appropriate to use in many contexts. If elements are very"}, {"sha": "378657b93cb89f6564dfd417f39fe4188d39d2dc", "filename": "src/libcollections/btree/node.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33345dae0cc274c5e059ec3ba45958ed15edab01/src%2Flibcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33345dae0cc274c5e059ec3ba45958ed15edab01/src%2Flibcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fnode.rs?ref=33345dae0cc274c5e059ec3ba45958ed15edab01", "patch": "@@ -43,7 +43,7 @@ pub struct Node<K, V> {\n     // theory, if we take full control of allocation like HashMap's RawTable does,\n     // and restrict leaves to max size 256 (not unreasonable for a btree node) we can cut\n     // this down to just (ptr, cap: u8, size: u8, is_leaf: bool). With generic\n-    // integer arguments, cap can even move into the the type, reducing this just to\n+    // integer arguments, cap can even move into the type, reducing this just to\n     // (ptr, size, is_leaf). This could also have cache benefits for very small nodes, as keys\n     // could bleed into edges and vals.\n     //"}, {"sha": "5866c067b2dfe9e2eaaf3645bc7af01b39e6605c", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/33345dae0cc274c5e059ec3ba45958ed15edab01/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33345dae0cc274c5e059ec3ba45958ed15edab01/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=33345dae0cc274c5e059ec3ba45958ed15edab01", "patch": "@@ -549,7 +549,7 @@ impl String {\n     ///\n     /// # Warning\n     ///\n-    /// This is a O(n) operation as it requires copying every element in the\n+    /// This is an O(n) operation as it requires copying every element in the\n     /// buffer.\n     ///\n     /// # Panics\n@@ -586,7 +586,7 @@ impl String {\n     ///\n     /// # Warning\n     ///\n-    /// This is a O(n) operation as it requires copying every element in the\n+    /// This is an O(n) operation as it requires copying every element in the\n     /// buffer.\n     ///\n     /// # Panics"}, {"sha": "93ed0b04616347153161d37bf492be275bff9ae9", "filename": "src/libcollections/trie/map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/33345dae0cc274c5e059ec3ba45958ed15edab01/src%2Flibcollections%2Ftrie%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33345dae0cc274c5e059ec3ba45958ed15edab01/src%2Flibcollections%2Ftrie%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftrie%2Fmap.rs?ref=33345dae0cc274c5e059ec3ba45958ed15edab01", "patch": "@@ -1056,7 +1056,7 @@ impl<'a, T> VacantEntry<'a, T> {\n             search_stack.map.root.count = temp;\n             value_ref\n         }\n-        // Otherwise, find the predeccessor of the last stack node, and insert as normal.\n+        // Otherwise, find the predecessor of the last stack node, and insert as normal.\n         else {\n             match *search_stack.get_ref(old_length - 2) {\n                 Internal(box ref mut parent) => {\n@@ -1739,7 +1739,7 @@ mod test {\n                     // Update it to i^3 using the returned mutable reference.\n                     *inserted_val = i * i * i;\n                 },\n-                _ => panic!(\"Non-existant key found.\")\n+                _ => panic!(\"Non-existent key found.\")\n             }\n             assert_eq!(map.get(&i).unwrap(), &(i * i * i));\n         }"}]}