{"sha": "faff175f3e0095d5ddabb83f290309ed0dcfcf44", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhZmYxNzVmM2UwMDk1ZDVkZGFiYjgzZjI5MDMwOWVkMGRjZmNmNDQ=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-04-11T09:00:38Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-04-11T09:37:26Z"}, "message": "some some int-to-float and float-to-float cast tests from wasm test suite", "tree": {"sha": "0a5a957a5498a23ebb35a4978797d0f629720aff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a5a957a5498a23ebb35a4978797d0f629720aff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/faff175f3e0095d5ddabb83f290309ed0dcfcf44", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/faff175f3e0095d5ddabb83f290309ed0dcfcf44", "html_url": "https://github.com/rust-lang/rust/commit/faff175f3e0095d5ddabb83f290309ed0dcfcf44", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/faff175f3e0095d5ddabb83f290309ed0dcfcf44/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5db01f7371ec40cd210979f29242f8c80ea2ef15", "url": "https://api.github.com/repos/rust-lang/rust/commits/5db01f7371ec40cd210979f29242f8c80ea2ef15", "html_url": "https://github.com/rust-lang/rust/commit/5db01f7371ec40cd210979f29242f8c80ea2ef15"}], "stats": {"total": 70, "additions": 56, "deletions": 14}, "files": [{"sha": "738df2f6c59e7fba5a74a7e8030b91c6278467c9", "filename": "tests/run-pass/float.rs", "status": "modified", "additions": 56, "deletions": 14, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/faff175f3e0095d5ddabb83f290309ed0dcfcf44/tests%2Frun-pass%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faff175f3e0095d5ddabb83f290309ed0dcfcf44/tests%2Frun-pass%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Ffloat.rs?ref=faff175f3e0095d5ddabb83f290309ed0dcfcf44", "patch": "@@ -76,7 +76,7 @@ fn casts() {\n     // f32 -> u32\n     assert_eq::<u32>(0.0f32 as u32, 0);\n     assert_eq::<u32>(-0.0f32 as u32, 0);\n-    assert_eq::<u32>(/*0x1p-149*/ f32::from_bits(0x00000001) as u32, 0);\n+    assert_eq::<u32>(/*0x1p-149*/ f32::from_bits(0x1) as u32, 0);\n     assert_eq::<u32>(/*-0x1p-149*/ f32::from_bits(0x80000001) as u32, 0);\n     assert_eq::<u32>(/*0x1.19999ap+0*/ f32::from_bits(0x3f8ccccd) as u32, 1);\n     assert_eq::<u32>(1.9f32 as u32, 1);\n@@ -161,21 +161,63 @@ fn casts() {\n     assert_eq::<u64>((-f64::NAN) as u64, 0);\n \n     // int -> f32\n-    assert_eq(127i8 as f32, 127.0f32);\n-    assert_eq(i128::MIN as f32, -170141183460469231731687303715884105728.0f32);\n-    assert_eq(u128::MAX as f32, f32::INFINITY); // saturation\n+    assert_eq::<f32>(127i8 as f32, 127.0);\n+    assert_eq::<f32>(2147483647i32 as f32, 2147483648.0);\n+    assert_eq::<f32>((-2147483648i32) as f32, -2147483648.0);\n+    assert_eq::<f32>(1234567890i32 as f32, /*0x1.26580cp+30*/ f32::from_bits(0x4e932c06));\n+    assert_eq::<f32>(16777217i32 as f32, 16777216.0);\n+    assert_eq::<f32>((-16777217i32) as f32, -16777216.0);\n+    assert_eq::<f32>(16777219i32 as f32, 16777220.0);\n+    assert_eq::<f32>((-16777219i32) as f32, -16777220.0);\n+    assert_eq::<f32>(0x7fffff4000000001i64 as f32, /*0x1.fffffep+62*/ f32::from_bits(0x5effffff));\n+    assert_eq::<f32>(0x8000004000000001u64 as i64 as f32, /*-0x1.fffffep+62*/ f32::from_bits(0xdeffffff));\n+    assert_eq::<f32>(0x0020000020000001i64 as f32, /*0x1.000002p+53*/ f32::from_bits(0x5a000001));\n+    assert_eq::<f32>(0xffdfffffdfffffffu64 as i64 as f32, /*-0x1.000002p+53*/ f32::from_bits(0xda000001));\n+    assert_eq::<f32>(i128::MIN as f32, -170141183460469231731687303715884105728.0f32);\n+    assert_eq::<f32>(u128::MAX as f32, f32::INFINITY); // saturation\n \n     // int -> f64\n-    assert_eq(i16::MIN as f64, -32768.0f64);\n-    assert_eq(u128::MAX as f64, 340282366920938463463374607431768211455.0f64); // even that fits...\n-\n-    // f32 <-> f64\n-    assert_eq(5.0f64 as f32, 5.0f32);\n-    assert_eq(5.0f32 as f64, 5.0f64);\n-    assert_eq(f64::MAX as f32, f32::INFINITY);\n-    assert_eq(f64::MIN as f32, f32::NEG_INFINITY);\n-    assert_eq(f32::INFINITY as f64, f64::INFINITY);\n-    assert_eq(f32::NEG_INFINITY as f64, f64::NEG_INFINITY);\n+    assert_eq::<f64>(127i8 as f64, 127.0);\n+    assert_eq::<f64>(i16::MIN as f64, -32768.0f64);\n+    assert_eq::<f64>(2147483647i32 as f64, 2147483647.0);\n+    assert_eq::<f64>(-2147483648i32 as f64, -2147483648.0);\n+    assert_eq::<f64>(987654321i32 as f64, 987654321.0);\n+    assert_eq::<f64>(9223372036854775807i64 as f64, 9223372036854775807.0);\n+    assert_eq::<f64>(-9223372036854775808i64 as f64, -9223372036854775808.0);\n+    assert_eq::<f64>(4669201609102990i64 as f64, 4669201609102990.0); // Feigenbaum (?)\n+    assert_eq::<f64>(9007199254740993i64 as f64, 9007199254740992.0);\n+    assert_eq::<f64>(-9007199254740993i64 as f64, -9007199254740992.0);\n+    assert_eq::<f64>(9007199254740995i64 as f64, 9007199254740996.0);\n+    assert_eq::<f64>(-9007199254740995i64 as f64, -9007199254740996.0);\n+    assert_eq::<f64>(u128::MAX as f64, 340282366920938463463374607431768211455.0f64); // even that fits...\n+\n+    // f32 -> f64\n+    assert_eq::<u64>((0.0f32 as f64).to_bits(), 0.0f64.to_bits());\n+    assert_eq::<u64>(((-0.0f32) as f64).to_bits(), (-0.0f64).to_bits());\n+    assert_eq::<f64>(5.0f32 as f64, 5.0f64);\n+    assert_eq::<f64>(/*0x1p-149*/ f32::from_bits(0x1) as f64, /*0x1p-149*/ f64::from_bits(0x36a0000000000000));\n+    assert_eq::<f64>(/*-0x1p-149*/ f32::from_bits(0x80000001) as f64, /*-0x1p-149*/ f64::from_bits(0xb6a0000000000000));\n+    assert_eq::<f64>(/*0x1.fffffep+127*/ f32::from_bits(0x7f7fffff) as f64, /*0x1.fffffep+127*/ f64::from_bits(0x47efffffe0000000));\n+    assert_eq::<f64>(/*-0x1.fffffep+127*/ (-f32::from_bits(0x7f7fffff)) as f64, /*-0x1.fffffep+127*/ -f64::from_bits(0x47efffffe0000000));\n+    assert_eq::<f64>(/*0x1p-119*/ f32::from_bits(0x4000000) as f64, /*0x1p-119*/ f64::from_bits(0x3880000000000000));\n+    assert_eq::<f64>(/*0x1.8f867ep+125*/ f32::from_bits(0x7e47c33f) as f64, 6.6382536710104395e+37);\n+    assert_eq::<f64>(f32::INFINITY as f64, f64::INFINITY);\n+    assert_eq::<f64>(f32::NEG_INFINITY as f64, f64::NEG_INFINITY);\n+\n+    // f64 -> f32\n+    assert_eq::<u32>((0.0f64 as f32).to_bits(), 0.0f32.to_bits());\n+    assert_eq::<u32>(((-0.0f64) as f32).to_bits(), (-0.0f32).to_bits());\n+    assert_eq::<f32>(5.0f64 as f32, 5.0f32);\n+    assert_eq::<f32>(/*0x0.0000000000001p-1022*/ f64::from_bits(0x1) as f32, 0.0);\n+    assert_eq::<f32>(/*-0x0.0000000000001p-1022*/ (-f64::from_bits(0x1)) as f32, -0.0);\n+\n+    assert_eq::<f32>(/*0x1.fffffe0000000p-127*/ f64::from_bits(0x380fffffe0000000) as f32, /*0x1p-149*/ f32::from_bits(0x800000));\n+    assert_eq::<f32>(/*0x1.4eae4f7024c7p+108*/ f64::from_bits(0x46b4eae4f7024c70) as f32, /*0x1.4eae5p+108*/ f32::from_bits(0x75a75728));\n+\n+    assert_eq::<f32>(f64::MAX as f32, f32::INFINITY);\n+    assert_eq::<f32>(f64::MIN as f32, f32::NEG_INFINITY);\n+    assert_eq::<f32>(f64::INFINITY as f32, f32::INFINITY);\n+    assert_eq::<f32>(f64::NEG_INFINITY as f32, f32::NEG_INFINITY);\n }\n \n fn ops() {"}]}