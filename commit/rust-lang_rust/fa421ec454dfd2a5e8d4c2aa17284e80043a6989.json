{"sha": "fa421ec454dfd2a5e8d4c2aa17284e80043a6989", "node_id": "C_kwDOAAsO6NoAKGZhNDIxZWM0NTRkZmQyYTVlOGQ0YzJhYTE3Mjg0ZTgwMDQzYTY5ODk", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2023-03-07T16:44:14Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2023-03-12T13:51:19Z"}, "message": "Filter out RPITITs in object_safety_violations_for_trait", "tree": {"sha": "3e6336421073e14075be4d55f3c384f3aa8fc67a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e6336421073e14075be4d55f3c384f3aa8fc67a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa421ec454dfd2a5e8d4c2aa17284e80043a6989", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmQN2NcACgkQgTGiTgx5\n7684FhAAq6hZjMvfXCRkYa/Rha3Io/2XBD11eF7IRHNSwgeLj1ZbfuQTDqzMCOwc\nmYEKQdhce5f8W28VEDeirNcsPA6+IVyW95o0F4mc7m0jrx2sfncbAUcU0OnIHXyT\n81U3/CHDpj9Bz0KoVbPoA7U6mtYlQ3pjZg65DbLkOxIOv0hPb+RDRKjNCj6u8jaO\n1c4OdzcxmEYqRcC36LL7vtNWUeG5EBYugzaGlgceRy8oGy1i+UaOSHTrQfLONZ7a\nc1zumOBMVaYZrUs8fS9IAw7NolXPxcnfoS/UrkJSKn0aoo0VAtEP0mmnwX7JTm8Y\nCN8NgqskcO0vZhttPZRlCc5tp44VVxwOSmrefQs7McYbxsq5j5XEmjffGqUZr8st\n0X0x/KmJozabGnnrssm+vubVTAUdJ2+tkr8FAi5ZwA5ksS1OiU/O3x/Xgmfnipf2\n4atcwALE0L3mxbR/s9ehe3vs9NTh5ksH/0QlnEgZcC68eV0xlEiRIAwd82NxVhgP\nB2VaWASEFNLhZxCcfqb0ZxWPKBFejzBIYrZM24+5ZlH5G2sDScqFjXf/QIFY9nL6\nVaQaJKQb74YlA4bYWf0ibIp92B8qxWl7TfnFprHz/yB6u1N+lhxeXfQDF4Tvbvcb\ndPSimQK+dqYVP8GcjK3tIAztO8qrrUzrUEdCm0pdrJ87BAjT0n4=\n=hlMr\n-----END PGP SIGNATURE-----", "payload": "tree 3e6336421073e14075be4d55f3c384f3aa8fc67a\nparent b2f3198608eae7f24eecd930e6467f0cfb3cffd1\nauthor Santiago Pastorino <spastorino@gmail.com> 1678207454 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1678629079 -0300\n\nFilter out RPITITs in object_safety_violations_for_trait\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa421ec454dfd2a5e8d4c2aa17284e80043a6989", "html_url": "https://github.com/rust-lang/rust/commit/fa421ec454dfd2a5e8d4c2aa17284e80043a6989", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa421ec454dfd2a5e8d4c2aa17284e80043a6989/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2f3198608eae7f24eecd930e6467f0cfb3cffd1", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2f3198608eae7f24eecd930e6467f0cfb3cffd1", "html_url": "https://github.com/rust-lang/rust/commit/b2f3198608eae7f24eecd930e6467f0cfb3cffd1"}], "stats": {"total": 36, "additions": 33, "deletions": 3}, "files": [{"sha": "4b06304f402921e696a35329d106d53f7154ead4", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fa421ec454dfd2a5e8d4c2aa17284e80043a6989/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa421ec454dfd2a5e8d4c2aa17284e80043a6989/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=fa421ec454dfd2a5e8d4c2aa17284e80043a6989", "patch": "@@ -157,6 +157,7 @@ fn object_safety_violations_for_trait(\n                 .in_definition_order()\n                 .filter(|item| item.kind == ty::AssocKind::Type)\n                 .filter(|item| !tcx.generics_of(item.def_id).params.is_empty())\n+                .filter(|item| tcx.opt_rpitit_info(item.def_id).is_none())\n                 .map(|item| {\n                     let ident = item.ident(tcx);\n                     ObjectSafetyViolation::GAT(ident.name, ident.span)"}, {"sha": "90e049a99606f69d20f6256d2d47381d2f34184a", "filename": "tests/ui/async-await/in-trait/object-safety.current.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fa421ec454dfd2a5e8d4c2aa17284e80043a6989/tests%2Fui%2Fasync-await%2Fin-trait%2Fobject-safety.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa421ec454dfd2a5e8d4c2aa17284e80043a6989/tests%2Fui%2Fasync-await%2Fin-trait%2Fobject-safety.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fobject-safety.current.stderr?ref=fa421ec454dfd2a5e8d4c2aa17284e80043a6989", "patch": "@@ -1,5 +1,5 @@\n warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/object-safety.rs:3:12\n+  --> $DIR/object-safety.rs:5:12\n    |\n LL | #![feature(async_fn_in_trait)]\n    |            ^^^^^^^^^^^^^^^^^\n@@ -8,13 +8,13 @@ LL | #![feature(async_fn_in_trait)]\n    = note: `#[warn(incomplete_features)]` on by default\n \n error[E0038]: the trait `Foo` cannot be made into an object\n-  --> $DIR/object-safety.rs:11:12\n+  --> $DIR/object-safety.rs:13:12\n    |\n LL |     let x: &dyn Foo = todo!();\n    |            ^^^^^^^^ `Foo` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n-  --> $DIR/object-safety.rs:7:14\n+  --> $DIR/object-safety.rs:9:14\n    |\n LL | trait Foo {\n    |       --- this trait cannot be made into an object...", "previous_filename": "tests/ui/async-await/in-trait/object-safety.stderr"}, {"sha": "90e049a99606f69d20f6256d2d47381d2f34184a", "filename": "tests/ui/async-await/in-trait/object-safety.next.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/fa421ec454dfd2a5e8d4c2aa17284e80043a6989/tests%2Fui%2Fasync-await%2Fin-trait%2Fobject-safety.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa421ec454dfd2a5e8d4c2aa17284e80043a6989/tests%2Fui%2Fasync-await%2Fin-trait%2Fobject-safety.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fobject-safety.next.stderr?ref=fa421ec454dfd2a5e8d4c2aa17284e80043a6989", "patch": "@@ -0,0 +1,27 @@\n+warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/object-safety.rs:5:12\n+   |\n+LL | #![feature(async_fn_in_trait)]\n+   |            ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error[E0038]: the trait `Foo` cannot be made into an object\n+  --> $DIR/object-safety.rs:13:12\n+   |\n+LL |     let x: &dyn Foo = todo!();\n+   |            ^^^^^^^^ `Foo` cannot be made into an object\n+   |\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/object-safety.rs:9:14\n+   |\n+LL | trait Foo {\n+   |       --- this trait cannot be made into an object...\n+LL |     async fn foo(&self);\n+   |              ^^^ ...because method `foo` is `async`\n+   = help: consider moving `foo` to another trait\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0038`."}, {"sha": "f67286a20a24404be9d829f5925dfba5ae85fb2b", "filename": "tests/ui/async-await/in-trait/object-safety.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa421ec454dfd2a5e8d4c2aa17284e80043a6989/tests%2Fui%2Fasync-await%2Fin-trait%2Fobject-safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa421ec454dfd2a5e8d4c2aa17284e80043a6989/tests%2Fui%2Fasync-await%2Fin-trait%2Fobject-safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fobject-safety.rs?ref=fa421ec454dfd2a5e8d4c2aa17284e80043a6989", "patch": "@@ -1,4 +1,6 @@\n // edition:2021\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![feature(async_fn_in_trait)]\n //~^ WARN the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes"}]}