{"sha": "e90c5fbbc5df5c81267747daeb937d4e955ce6ad", "node_id": "C_kwDOAAsO6NoAKGU5MGM1ZmJiYzVkZjVjODEyNjc3NDdkYWViOTM3ZDRlOTU1Y2U2YWQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-12T19:28:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-12T19:28:04Z"}, "message": "Auto merge of #90836 - matthiaskrgr:rollup-ou6yrlw, r=matthiaskrgr\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #90589 (rustc_llvm: update PassWrapper for recent LLVM)\n - #90644 (Extend the const swap feature)\n - #90704 (Unix ExitStatus comments and a tiny docs fix)\n - #90761 (Shorten Span of unused macro lints)\n - #90795 (Add more comments to explain the code to generate the search index)\n - #90798 (Document `unreachable!` custom panic message)\n - #90826 (rustc_feature: Convert `BuiltinAttribute` from tuple to a struct)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "8d5dfc3ab54f45746b74fe9a33d9a86d6d7c526f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d5dfc3ab54f45746b74fe9a33d9a86d6d7c526f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e90c5fbbc5df5c81267747daeb937d4e955ce6ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e90c5fbbc5df5c81267747daeb937d4e955ce6ad", "html_url": "https://github.com/rust-lang/rust/commit/e90c5fbbc5df5c81267747daeb937d4e955ce6ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e90c5fbbc5df5c81267747daeb937d4e955ce6ad/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "220ed09b26177ca4b6ab525f403d251024389a41", "url": "https://api.github.com/repos/rust-lang/rust/commits/220ed09b26177ca4b6ab525f403d251024389a41", "html_url": "https://github.com/rust-lang/rust/commit/220ed09b26177ca4b6ab525f403d251024389a41"}, {"sha": "5e7c0313976d670bbe6accdaa27347ed23aed58b", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e7c0313976d670bbe6accdaa27347ed23aed58b", "html_url": "https://github.com/rust-lang/rust/commit/5e7c0313976d670bbe6accdaa27347ed23aed58b"}], "stats": {"total": 266, "additions": 145, "deletions": 121}, "files": [{"sha": "b011a2e8117af32bad24e55ed9bdb9082016a9f6", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e90c5fbbc5df5c81267747daeb937d4e955ce6ad/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e90c5fbbc5df5c81267747daeb937d4e955ce6ad/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=e90c5fbbc5df5c81267747daeb937d4e955ce6ad", "patch": "@@ -3,7 +3,7 @@ use rustc_ast::visit::{self, AssocCtxt, FnCtxt, FnKind, Visitor};\n use rustc_ast::{AssocTyConstraint, AssocTyConstraintKind, NodeId};\n use rustc_ast::{PatKind, RangeEnd, VariantData};\n use rustc_errors::struct_span_err;\n-use rustc_feature::{AttributeGate, BUILTIN_ATTRIBUTE_MAP};\n+use rustc_feature::{AttributeGate, BuiltinAttribute, BUILTIN_ATTRIBUTE_MAP};\n use rustc_feature::{Features, GateIssue};\n use rustc_session::parse::{feature_err, feature_err_issue};\n use rustc_session::Session;\n@@ -301,11 +301,14 @@ impl<'a> PostExpansionVisitor<'a> {\n \n impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n     fn visit_attribute(&mut self, attr: &ast::Attribute) {\n-        let attr_info =\n-            attr.ident().and_then(|ident| BUILTIN_ATTRIBUTE_MAP.get(&ident.name)).map(|a| **a);\n+        let attr_info = attr.ident().and_then(|ident| BUILTIN_ATTRIBUTE_MAP.get(&ident.name));\n         // Check feature gates for built-in attributes.\n-        if let Some((.., AttributeGate::Gated(_, name, descr, has_feature))) = attr_info {\n-            gate_feature_fn!(self, has_feature, attr.span, name, descr);\n+        if let Some(BuiltinAttribute {\n+            gate: AttributeGate::Gated(_, name, descr, has_feature),\n+            ..\n+        }) = attr_info\n+        {\n+            gate_feature_fn!(self, has_feature, attr.span, *name, descr);\n         }\n         // Check unstable flavors of the `#[doc]` attribute.\n         if attr.has_name(sym::doc) {"}, {"sha": "7212bbf38c7f215555ef2a3c086e2b20b3dfaa3d", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 41, "deletions": 24, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/e90c5fbbc5df5c81267747daeb937d4e955ce6ad/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e90c5fbbc5df5c81267747daeb937d4e955ce6ad/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=e90c5fbbc5df5c81267747daeb937d4e955ce6ad", "patch": "@@ -115,16 +115,26 @@ macro_rules! template {\n \n macro_rules! ungated {\n     ($attr:ident, $typ:expr, $tpl:expr $(,)?) => {\n-        (sym::$attr, $typ, $tpl, Ungated)\n+        BuiltinAttribute { name: sym::$attr, type_: $typ, template: $tpl, gate: Ungated }\n     };\n }\n \n macro_rules! gated {\n     ($attr:ident, $typ:expr, $tpl:expr, $gate:ident, $msg:expr $(,)?) => {\n-        (sym::$attr, $typ, $tpl, Gated(Stability::Unstable, sym::$gate, $msg, cfg_fn!($gate)))\n+        BuiltinAttribute {\n+            name: sym::$attr,\n+            type_: $typ,\n+            template: $tpl,\n+            gate: Gated(Stability::Unstable, sym::$gate, $msg, cfg_fn!($gate)),\n+        }\n     };\n     ($attr:ident, $typ:expr, $tpl:expr, $msg:expr $(,)?) => {\n-        (sym::$attr, $typ, $tpl, Gated(Stability::Unstable, sym::$attr, $msg, cfg_fn!($attr)))\n+        BuiltinAttribute {\n+            name: sym::$attr,\n+            type_: $typ,\n+            template: $tpl,\n+            gate: Gated(Stability::Unstable, sym::$attr, $msg, cfg_fn!($attr)),\n+        }\n     };\n }\n \n@@ -143,12 +153,12 @@ macro_rules! rustc_attr {\n         )\n     };\n     ($attr:ident, $typ:expr, $tpl:expr, $msg:expr $(,)?) => {\n-        (\n-            sym::$attr,\n-            $typ,\n-            $tpl,\n-            Gated(Stability::Unstable, sym::rustc_attrs, $msg, cfg_fn!(rustc_attrs)),\n-        )\n+        BuiltinAttribute {\n+            name: sym::$attr,\n+            type_: $typ,\n+            template: $tpl,\n+            gate: Gated(Stability::Unstable, sym::rustc_attrs, $msg, cfg_fn!(rustc_attrs)),\n+        }\n     };\n }\n \n@@ -161,7 +171,12 @@ macro_rules! experimental {\n const IMPL_DETAIL: &str = \"internal implementation detail\";\n const INTERNAL_UNSTABLE: &str = \"this is an internal attribute that will never be stable\";\n \n-pub type BuiltinAttribute = (Symbol, AttributeType, AttributeTemplate, AttributeGate);\n+pub struct BuiltinAttribute {\n+    pub name: Symbol,\n+    pub type_: AttributeType,\n+    pub template: AttributeTemplate,\n+    pub gate: AttributeGate,\n+}\n \n /// Attributes that have a special meaning to rustc or rustdoc.\n #[rustfmt::skip]\n@@ -290,18 +305,20 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n     ),\n \n     // Plugins:\n-    (\n-        sym::plugin, CrateLevel, template!(List: \"name\"),\n-        Gated(\n+    BuiltinAttribute {\n+        name: sym::plugin,\n+        type_: CrateLevel,\n+        template: template!(List: \"name\"),\n+        gate: Gated(\n             Stability::Deprecated(\n                 \"https://github.com/rust-lang/rust/pull/64675\",\n                 Some(\"may be removed in a future compiler version\"),\n             ),\n             sym::plugin,\n             \"compiler plugins are deprecated\",\n             cfg_fn!(plugin)\n-        )\n-    ),\n+        ),\n+    },\n \n     // Testing:\n     gated!(allow_fail, Normal, template!(Word), experimental!(allow_fail)),\n@@ -497,17 +514,17 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n         lang, Normal, template!(NameValueStr: \"name\"), lang_items,\n         \"language items are subject to change\",\n     ),\n-    (\n-        sym::rustc_diagnostic_item,\n-        Normal,\n-        template!(NameValueStr: \"name\"),\n-        Gated(\n+    BuiltinAttribute {\n+        name: sym::rustc_diagnostic_item,\n+        type_: Normal,\n+        template: template!(NameValueStr: \"name\"),\n+        gate: Gated(\n             Stability::Unstable,\n             sym::rustc_attrs,\n             \"diagnostic items compiler internal support for linting\",\n             cfg_fn!(rustc_attrs),\n         ),\n-    ),\n+    },\n     gated!(\n         // Used in resolve:\n         prelude_import, Normal, template!(Word),\n@@ -601,7 +618,7 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n ];\n \n pub fn deprecated_attributes() -> Vec<&'static BuiltinAttribute> {\n-    BUILTIN_ATTRIBUTES.iter().filter(|(.., gate)| gate.is_deprecated()).collect()\n+    BUILTIN_ATTRIBUTES.iter().filter(|attr| attr.gate.is_deprecated()).collect()\n }\n \n pub fn is_builtin_attr_name(name: Symbol) -> bool {\n@@ -612,8 +629,8 @@ pub static BUILTIN_ATTRIBUTE_MAP: SyncLazy<FxHashMap<Symbol, &BuiltinAttribute>>\n     SyncLazy::new(|| {\n         let mut map = FxHashMap::default();\n         for attr in BUILTIN_ATTRIBUTES.iter() {\n-            if map.insert(attr.0, attr).is_some() {\n-                panic!(\"duplicate builtin attribute `{}`\", attr.0);\n+            if map.insert(attr.name, attr).is_some() {\n+                panic!(\"duplicate builtin attribute `{}`\", attr.name);\n             }\n         }\n         map"}, {"sha": "f2e4e70a197796923fb8eae72e799cb39d829d74", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e90c5fbbc5df5c81267747daeb937d4e955ce6ad/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e90c5fbbc5df5c81267747daeb937d4e955ce6ad/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=e90c5fbbc5df5c81267747daeb937d4e955ce6ad", "patch": "@@ -32,8 +32,7 @@ use rustc_ast_pretty::pprust::{self, expr_to_string};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::stack::ensure_sufficient_stack;\n use rustc_errors::{Applicability, DiagnosticBuilder, DiagnosticStyledString};\n-use rustc_feature::{deprecated_attributes, AttributeGate, AttributeTemplate, AttributeType};\n-use rustc_feature::{GateIssue, Stability};\n+use rustc_feature::{deprecated_attributes, AttributeGate, BuiltinAttribute, GateIssue, Stability};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{DefId, LocalDefId, LocalDefIdSet, CRATE_DEF_ID};\n@@ -959,7 +958,7 @@ impl EarlyLintPass for AnonymousParameters {\n pub struct DeprecatedAttr {\n     // This is not free to compute, so we want to keep it around, rather than\n     // compute it for every attribute.\n-    depr_attrs: Vec<&'static (Symbol, AttributeType, AttributeTemplate, AttributeGate)>,\n+    depr_attrs: Vec<&'static BuiltinAttribute>,\n }\n \n impl_lint_pass!(DeprecatedAttr => []);\n@@ -990,14 +989,14 @@ fn lint_deprecated_attr(\n \n impl EarlyLintPass for DeprecatedAttr {\n     fn check_attribute(&mut self, cx: &EarlyContext<'_>, attr: &ast::Attribute) {\n-        for &&(n, _, _, ref g) in &self.depr_attrs {\n-            if attr.ident().map(|ident| ident.name) == Some(n) {\n+        for BuiltinAttribute { name, gate, .. } in &self.depr_attrs {\n+            if attr.ident().map(|ident| ident.name) == Some(*name) {\n                 if let &AttributeGate::Gated(\n                     Stability::Deprecated(link, suggestion),\n                     name,\n                     reason,\n                     _,\n-                ) = g\n+                ) = gate\n                 {\n                     let msg =\n                         format!(\"use of deprecated attribute `{}`: {}. See {}\", name, reason, link);"}, {"sha": "4f77db8a24dc4be05217c7cbce4a49b5ca35f44c", "filename": "compiler/rustc_llvm/llvm-wrapper/PassWrapper.cpp", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e90c5fbbc5df5c81267747daeb937d4e955ce6ad/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/e90c5fbbc5df5c81267747daeb937d4e955ce6ad/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp?ref=e90c5fbbc5df5c81267747daeb937d4e955ce6ad", "patch": "@@ -889,15 +889,17 @@ LLVMRustOptimizeWithNewPassManager(\n       OptimizerLastEPCallbacks.push_back(\n         [SanitizerOptions](ModulePassManager &MPM, OptimizationLevel Level) {\n           MPM.addPass(RequireAnalysisPass<ASanGlobalsMetadataAnalysis, Module>());\n-          MPM.addPass(ModuleAddressSanitizerPass(\n-              /*CompileKernel=*/false, SanitizerOptions->SanitizeAddressRecover));\n #if LLVM_VERSION_GE(14, 0)\n-          AddressSanitizerOptions opts(/*CompileKernel=*/false,\n-                                       SanitizerOptions->SanitizeAddressRecover,\n-                                       /*UseAfterScope=*/true,\n-                                       AsanDetectStackUseAfterReturnMode::Runtime);\n-          MPM.addPass(createModuleToFunctionPassAdaptor(AddressSanitizerPass(opts)));\n+          AddressSanitizerOptions opts = AddressSanitizerOptions{\n+            /*CompileKernel=*/false,\n+            SanitizerOptions->SanitizeAddressRecover,\n+            /*UseAfterScope=*/true,\n+            AsanDetectStackUseAfterReturnMode::Runtime,\n+          };\n+          MPM.addPass(ModuleAddressSanitizerPass(opts));\n #else\n+          MPM.addPass(ModuleAddressSanitizerPass(\n+              /*CompileKernel=*/false, SanitizerOptions->SanitizeAddressRecover));\n           MPM.addPass(createModuleToFunctionPassAdaptor(AddressSanitizerPass(\n               /*CompileKernel=*/false, SanitizerOptions->SanitizeAddressRecover,\n               /*UseAfterScope=*/true)));"}, {"sha": "4781813ee8e5641ee25deb2122cc1524b5de528b", "filename": "compiler/rustc_parse/src/validate_attr.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e90c5fbbc5df5c81267747daeb937d4e955ce6ad/compiler%2Frustc_parse%2Fsrc%2Fvalidate_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e90c5fbbc5df5c81267747daeb937d4e955ce6ad/compiler%2Frustc_parse%2Fsrc%2Fvalidate_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fvalidate_attr.rs?ref=e90c5fbbc5df5c81267747daeb937d4e955ce6ad", "patch": "@@ -5,7 +5,7 @@ use crate::parse_in;\n use rustc_ast::tokenstream::{DelimSpan, TokenTree};\n use rustc_ast::{self as ast, Attribute, MacArgs, MacDelimiter, MetaItem, MetaItemKind};\n use rustc_errors::{Applicability, FatalError, PResult};\n-use rustc_feature::{AttributeTemplate, BUILTIN_ATTRIBUTE_MAP};\n+use rustc_feature::{AttributeTemplate, BuiltinAttribute, BUILTIN_ATTRIBUTE_MAP};\n use rustc_session::lint::builtin::ILL_FORMED_ATTRIBUTE_INPUT;\n use rustc_session::parse::ParseSess;\n use rustc_span::{sym, Symbol};\n@@ -15,14 +15,13 @@ pub fn check_meta(sess: &ParseSess, attr: &Attribute) {\n         return;\n     }\n \n-    let attr_info =\n-        attr.ident().and_then(|ident| BUILTIN_ATTRIBUTE_MAP.get(&ident.name)).map(|a| **a);\n+    let attr_info = attr.ident().and_then(|ident| BUILTIN_ATTRIBUTE_MAP.get(&ident.name));\n \n     // Check input tokens for built-in and key-value attributes.\n     match attr_info {\n         // `rustc_dummy` doesn't have any restrictions specific to built-in attributes.\n-        Some((name, _, template, _)) if name != sym::rustc_dummy => {\n-            check_builtin_attribute(sess, attr, name, template)\n+        Some(BuiltinAttribute { name, template, .. }) if *name != sym::rustc_dummy => {\n+            check_builtin_attribute(sess, attr, *name, *template)\n         }\n         _ if let MacArgs::Eq(..) = attr.get_normal_item().args => {\n             // All key-value attributes are restricted to meta-item syntax.\n@@ -168,7 +167,7 @@ pub fn emit_fatal_malformed_builtin_attribute(\n     attr: &Attribute,\n     name: Symbol,\n ) -> ! {\n-    let template = BUILTIN_ATTRIBUTE_MAP.get(&name).expect(\"builtin attr defined\").2;\n+    let template = BUILTIN_ATTRIBUTE_MAP.get(&name).expect(\"builtin attr defined\").template;\n     emit_malformed_attribute(sess, attr, name, template);\n     // This is fatal, otherwise it will likely cause a cascade of other errors\n     // (and an error here is expected to be very rare)."}, {"sha": "129a9fdab8234aa08febbe6d49976f008b2f2e94", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e90c5fbbc5df5c81267747daeb937d4e955ce6ad/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e90c5fbbc5df5c81267747daeb937d4e955ce6ad/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=e90c5fbbc5df5c81267747daeb937d4e955ce6ad", "patch": "@@ -11,7 +11,7 @@ use rustc_middle::ty::TyCtxt;\n use rustc_ast::{ast, AttrStyle, Attribute, Lit, LitKind, NestedMetaItem};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::{pluralize, struct_span_err, Applicability};\n-use rustc_feature::{AttributeType, BUILTIN_ATTRIBUTE_MAP};\n+use rustc_feature::{AttributeType, BuiltinAttribute, BUILTIN_ATTRIBUTE_MAP};\n use rustc_hir as hir;\n use rustc_hir::def_id::LocalDefId;\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n@@ -148,7 +148,7 @@ impl CheckAttrVisitor<'tcx> {\n             }\n \n             if hir_id != CRATE_HIR_ID {\n-                if let Some((_, AttributeType::CrateLevel, ..)) =\n+                if let Some(BuiltinAttribute { type_: AttributeType::CrateLevel, .. }) =\n                     attr.ident().and_then(|ident| BUILTIN_ATTRIBUTE_MAP.get(&ident.name))\n                 {\n                     self.tcx.struct_span_lint_hir(UNUSED_ATTRIBUTES, hir_id, attr.span, |lint| {"}, {"sha": "3cf9d324a38da9d2272d4d6c07321d95d5e57330", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e90c5fbbc5df5c81267747daeb937d4e955ce6ad/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e90c5fbbc5df5c81267747daeb937d4e955ce6ad/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=e90c5fbbc5df5c81267747daeb937d4e955ce6ad", "patch": "@@ -1194,15 +1194,9 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n     // Mark the given macro as unused unless its name starts with `_`.\n     // Macro uses will remove items from this set, and the remaining\n     // items will be reported as `unused_macros`.\n-    fn insert_unused_macro(\n-        &mut self,\n-        ident: Ident,\n-        def_id: LocalDefId,\n-        node_id: NodeId,\n-        span: Span,\n-    ) {\n+    fn insert_unused_macro(&mut self, ident: Ident, def_id: LocalDefId, node_id: NodeId) {\n         if !ident.as_str().starts_with('_') {\n-            self.r.unused_macros.insert(def_id, (node_id, span));\n+            self.r.unused_macros.insert(def_id, (node_id, ident));\n         }\n     }\n \n@@ -1246,7 +1240,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                 self.r.define(module, ident, MacroNS, (res, vis, span, expansion, IsMacroExport));\n             } else {\n                 self.r.check_reserved_macro_name(ident, res);\n-                self.insert_unused_macro(ident, def_id, item.id, span);\n+                self.insert_unused_macro(ident, def_id, item.id);\n             }\n             self.r.visibilities.insert(def_id, vis);\n             self.r.arenas.alloc_macro_rules_scope(MacroRulesScope::Binding(\n@@ -1267,7 +1261,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                 _ => self.resolve_visibility(&item.vis),\n             };\n             if vis != ty::Visibility::Public {\n-                self.insert_unused_macro(ident, def_id, item.id, span);\n+                self.insert_unused_macro(ident, def_id, item.id);\n             }\n             self.r.define(module, ident, MacroNS, (res, vis, span, expansion));\n             self.r.visibilities.insert(def_id, vis);"}, {"sha": "c46a18e51031abd33a261a31a0f84a99d088f026", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e90c5fbbc5df5c81267747daeb937d4e955ce6ad/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e90c5fbbc5df5c81267747daeb937d4e955ce6ad/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=e90c5fbbc5df5c81267747daeb937d4e955ce6ad", "patch": "@@ -731,7 +731,7 @@ impl<'a> Resolver<'a> {\n                         suggestions.extend(\n                             BUILTIN_ATTRIBUTES\n                                 .iter()\n-                                .map(|(name, ..)| TypoSuggestion::typo_from_res(*name, res)),\n+                                .map(|attr| TypoSuggestion::typo_from_res(attr.name, res)),\n                         );\n                     }\n                 }"}, {"sha": "f5bea83bdcf654f68aa8d109151ae573039ad1b7", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e90c5fbbc5df5c81267747daeb937d4e955ce6ad/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e90c5fbbc5df5c81267747daeb937d4e955ce6ad/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=e90c5fbbc5df5c81267747daeb937d4e955ce6ad", "patch": "@@ -988,7 +988,7 @@ pub struct Resolver<'a> {\n     non_macro_attr: Lrc<SyntaxExtension>,\n     local_macro_def_scopes: FxHashMap<LocalDefId, Module<'a>>,\n     ast_transform_scopes: FxHashMap<LocalExpnId, Module<'a>>,\n-    unused_macros: FxHashMap<LocalDefId, (NodeId, Span)>,\n+    unused_macros: FxHashMap<LocalDefId, (NodeId, Ident)>,\n     proc_macro_stubs: FxHashSet<LocalDefId>,\n     /// Traces collected during macro resolution and validated when it's complete.\n     single_segment_macro_resolutions:"}, {"sha": "31fd9b989e1c81827e523e30c52c8ad71018989f", "filename": "compiler/rustc_resolve/src/macros.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e90c5fbbc5df5c81267747daeb937d4e955ce6ad/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e90c5fbbc5df5c81267747daeb937d4e955ce6ad/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs?ref=e90c5fbbc5df5c81267747daeb937d4e955ce6ad", "patch": "@@ -315,8 +315,13 @@ impl<'a> ResolverExpand for Resolver<'a> {\n     }\n \n     fn check_unused_macros(&mut self) {\n-        for (_, &(node_id, span)) in self.unused_macros.iter() {\n-            self.lint_buffer.buffer_lint(UNUSED_MACROS, node_id, span, \"unused macro definition\");\n+        for (_, &(node_id, ident)) in self.unused_macros.iter() {\n+            self.lint_buffer.buffer_lint(\n+                UNUSED_MACROS,\n+                node_id,\n+                ident.span,\n+                &format!(\"unused macro definition: `{}`\", ident.as_str()),\n+            );\n         }\n     }\n "}, {"sha": "993ae72322966388b96342c7038256d3d509576a", "filename": "library/core/src/macros/mod.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e90c5fbbc5df5c81267747daeb937d4e955ce6ad/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e90c5fbbc5df5c81267747daeb937d4e955ce6ad/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs?ref=e90c5fbbc5df5c81267747daeb937d4e955ce6ad", "patch": "@@ -554,7 +554,10 @@ macro_rules! writeln {\n ///\n /// # Panics\n ///\n-/// This will always [`panic!`].\n+/// This will always [`panic!`] because `unreachable!` is just a shorthand for `panic!` with a\n+/// fixed, specific message.\n+///\n+/// Like `panic!`, this macro has a second form for displaying custom values.\n ///\n /// # Examples\n ///\n@@ -581,7 +584,7 @@ macro_rules! writeln {\n ///         if 3*i < i { panic!(\"u32 overflow\"); }\n ///         if x < 3*i { return i-1; }\n ///     }\n-///     unreachable!();\n+///     unreachable!(\"The loop should always return\");\n /// }\n /// ```\n #[macro_export]"}, {"sha": "5d5527dc8b46b698f55942bbf8e03fc8596ad347", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e90c5fbbc5df5c81267747daeb937d4e955ce6ad/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e90c5fbbc5df5c81267747daeb937d4e955ce6ad/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=e90c5fbbc5df5c81267747daeb937d4e955ce6ad", "patch": "@@ -1092,8 +1092,9 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// [`ptr::swap`]: crate::ptr::swap()\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n+    #[rustc_const_unstable(feature = \"const_swap\", issue = \"83163\")]\n     #[inline(always)]\n-    pub unsafe fn swap(self, with: *mut T)\n+    pub const unsafe fn swap(self, with: *mut T)\n     where\n         T: Sized,\n     {"}, {"sha": "d876d944e7f0b8747627433cae07b8272f39d6eb", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e90c5fbbc5df5c81267747daeb937d4e955ce6ad/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e90c5fbbc5df5c81267747daeb937d4e955ce6ad/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=e90c5fbbc5df5c81267747daeb937d4e955ce6ad", "patch": "@@ -558,8 +558,9 @@ impl<T> [T] {\n     /// assert!(v == [\"a\", \"b\", \"e\", \"d\", \"c\"]);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_const_unstable(feature = \"const_swap\", issue = \"83163\")]\n     #[inline]\n-    pub fn swap(&mut self, a: usize, b: usize) {\n+    pub const fn swap(&mut self, a: usize, b: usize) {\n         let _ = &self[a];\n         let _ = &self[b];\n \n@@ -595,7 +596,8 @@ impl<T> [T] {\n     /// [`swap`]: slice::swap\n     /// [undefined behavior]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html\n     #[unstable(feature = \"slice_swap_unchecked\", issue = \"88539\")]\n-    pub unsafe fn swap_unchecked(&mut self, a: usize, b: usize) {\n+    #[rustc_const_unstable(feature = \"const_swap\", issue = \"83163\")]\n+    pub const unsafe fn swap_unchecked(&mut self, a: usize, b: usize) {\n         #[cfg(debug_assertions)]\n         {\n             let _ = &self[a];"}, {"sha": "855f900430c4a4d05636ab6e6a0cf4ef6e0c6ec2", "filename": "library/std/src/os/unix/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e90c5fbbc5df5c81267747daeb937d4e955ce6ad/library%2Fstd%2Fsrc%2Fos%2Funix%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e90c5fbbc5df5c81267747daeb937d4e955ce6ad/library%2Fstd%2Fsrc%2Fos%2Funix%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fprocess.rs?ref=e90c5fbbc5df5c81267747daeb937d4e955ce6ad", "patch": "@@ -207,7 +207,7 @@ impl CommandExt for process::Command {\n /// [`ExitStatusError`](process::ExitStatusError).\n ///\n /// On Unix, `ExitStatus` **does not necessarily represent an exit status**, as\n-/// passed to the `exit` system call or returned by\n+/// passed to the `_exit` system call or returned by\n /// [`ExitStatus::code()`](crate::process::ExitStatus::code).  It represents **any wait status**\n /// as returned by one of the `wait` family of system\n /// calls."}, {"sha": "b4dab41f06632f8b3cbb09421d4a9c4974c5bb91", "filename": "library/std/src/process.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e90c5fbbc5df5c81267747daeb937d4e955ce6ad/library%2Fstd%2Fsrc%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e90c5fbbc5df5c81267747daeb937d4e955ce6ad/library%2Fstd%2Fsrc%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprocess.rs?ref=e90c5fbbc5df5c81267747daeb937d4e955ce6ad", "patch": "@@ -1417,6 +1417,11 @@ impl From<fs::File> for Stdio {\n ///\n /// [`status`]: Command::status\n /// [`wait`]: Child::wait\n+//\n+// We speak slightly loosely (here and in various other places in the stdlib docs) about `exit`\n+// vs `_exit`.  Naming of Unix system calls is not standardised across Unices, so terminology is a\n+// matter of convention and tradition.  For clarity we usually speak of `exit`, even when we might\n+// mean an underlying system call such as `_exit`.\n #[derive(PartialEq, Eq, Clone, Copy, Debug)]\n #[stable(feature = \"process\", since = \"1.0.0\")]\n pub struct ExitStatus(imp::ExitStatus);"}, {"sha": "3bf1493f3b8cbd6860cadddd0f7f44789b47d95d", "filename": "library/std/src/sys/unix/process/process_unix.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e90c5fbbc5df5c81267747daeb937d4e955ce6ad/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e90c5fbbc5df5c81267747daeb937d4e955ce6ad/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs?ref=e90c5fbbc5df5c81267747daeb937d4e955ce6ad", "patch": "@@ -617,6 +617,9 @@ impl Process {\n }\n \n /// Unix exit statuses\n+//\n+// This is not actually an \"exit status\" in Unix terminology.  Rather, it is a \"wait status\".\n+// See the discussion in comments and doc comments for `std::process::ExitStatus`.\n #[derive(PartialEq, Eq, Clone, Copy)]\n pub struct ExitStatus(c_int);\n "}, {"sha": "7aa950d905de14a4ef5f21bd20c69467a108d7ae", "filename": "src/librustdoc/html/render/cache.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e90c5fbbc5df5c81267747daeb937d4e955ce6ad/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e90c5fbbc5df5c81267747daeb937d4e955ce6ad/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs?ref=e90c5fbbc5df5c81267747daeb937d4e955ce6ad", "patch": "@@ -244,8 +244,10 @@ fn get_index_type_name(clean_type: &clean::Type, accept_generic: bool) -> Option\n /// The point of this function is to replace bounds with types.\n ///\n /// i.e. `[T, U]` when you have the following bounds: `T: Display, U: Option<T>` will return\n-/// `[Display, Option]` (we just returns the list of the types, we don't care about the\n-/// wrapped types in here).\n+/// `[Display, Option]`. If a type parameter has no trait bound, it is discarded.\n+///\n+/// Important note: It goes through generics recursively. So if you have\n+/// `T: Option<Result<(), ()>>`, it'll go into `Option` and then into `Result`.\n crate fn get_real_types<'tcx>(\n     generics: &Generics,\n     arg: &Type,\n@@ -329,7 +331,10 @@ crate fn get_real_types<'tcx>(\n         return;\n     }\n \n+    // If this argument is a type parameter and not a trait bound or a type, we need to look\n+    // for its bounds.\n     if let Type::Generic(arg_s) = *arg {\n+        // First we check if the bounds are in a `where` predicate...\n         if let Some(where_pred) = generics.where_predicates.iter().find(|g| match g {\n             WherePredicate::BoundPredicate { ty, .. } => {\n                 ty.def_id_no_primitives() == arg.def_id_no_primitives()\n@@ -352,6 +357,7 @@ crate fn get_real_types<'tcx>(\n             }\n             insert_ty(res, tcx, arg.clone(), ty_generics);\n         }\n+        // Otherwise we check if the trait bounds are \"inlined\" like `T: Option<u32>`...\n         if let Some(bound) = generics.params.iter().find(|g| g.is_type() && g.name == arg_s) {\n             let mut ty_generics = Vec::new();\n             for bound in bound.get_bounds().unwrap_or(&[]) {\n@@ -363,6 +369,11 @@ crate fn get_real_types<'tcx>(\n             insert_ty(res, tcx, arg.clone(), ty_generics);\n         }\n     } else {\n+        // This is not a type parameter. So for example if we have `T, U: Option<T>`, and we're\n+        // looking at `Option`, we enter this \"else\" condition, otherwise if it's `T`, we don't.\n+        //\n+        // So in here, we can add it directly and look for its own type parameters (so for `Option`,\n+        // we will look for them but not for `T`).\n         let mut ty_generics = Vec::new();\n         if let Some(arg_generics) = arg.generics() {\n             for gen in arg_generics.iter() {"}, {"sha": "b2e6d1aeb3f500243149f1d05819d4d134e76a15", "filename": "src/test/ui/lint/unused/issue-70041.stderr", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e90c5fbbc5df5c81267747daeb937d4e955ce6ad/src%2Ftest%2Fui%2Flint%2Funused%2Fissue-70041.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e90c5fbbc5df5c81267747daeb937d4e955ce6ad/src%2Ftest%2Fui%2Flint%2Funused%2Fissue-70041.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused%2Fissue-70041.stderr?ref=e90c5fbbc5df5c81267747daeb937d4e955ce6ad", "patch": "@@ -1,11 +1,8 @@\n-warning: unused macro definition\n-  --> $DIR/issue-70041.rs:4:1\n+warning: unused macro definition: `regex`\n+  --> $DIR/issue-70041.rs:4:14\n    |\n-LL | / macro_rules! regex {\n-LL | |\n-LL | |     () => {};\n-LL | | }\n-   | |_^\n+LL | macro_rules! regex {\n+   |              ^^^^^\n    |\n    = note: `#[warn(unused_macros)]` on by default\n "}, {"sha": "59db35b4111830cdd7f47f06ec70dfac7fff7fdc", "filename": "src/test/ui/lint/unused/unused-macro-rules.stderr", "status": "modified", "additions": 12, "deletions": 23, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/e90c5fbbc5df5c81267747daeb937d4e955ce6ad/src%2Ftest%2Fui%2Flint%2Funused%2Funused-macro-rules.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e90c5fbbc5df5c81267747daeb937d4e955ce6ad/src%2Ftest%2Fui%2Flint%2Funused%2Funused-macro-rules.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused%2Funused-macro-rules.stderr?ref=e90c5fbbc5df5c81267747daeb937d4e955ce6ad", "patch": "@@ -1,37 +1,26 @@\n-error: unused macro definition\n-  --> $DIR/unused-macro-rules.rs:4:1\n+error: unused macro definition: `unused`\n+  --> $DIR/unused-macro-rules.rs:4:14\n    |\n-LL | / macro_rules! unused {\n-LL | |     () => {};\n-LL | | }\n-   | |_^\n+LL | macro_rules! unused {\n+   |              ^^^^^^\n    |\n note: the lint level is defined here\n   --> $DIR/unused-macro-rules.rs:1:9\n    |\n LL | #![deny(unused_macros)]\n    |         ^^^^^^^^^^^^^\n \n-error: unused macro definition\n-  --> $DIR/unused-macro-rules.rs:11:9\n+error: unused macro definition: `m`\n+  --> $DIR/unused-macro-rules.rs:11:22\n    |\n-LL | /         macro_rules! m {\n-LL | |             () => {};\n-LL | |         }\n-   | |_________^\n-...\n-LL |   create_macro!();\n-   |   --------------- in this macro invocation\n-   |\n-   = note: this error originates in the macro `create_macro` (in Nightly builds, run with -Z macro-backtrace for more info)\n+LL |         macro_rules! m {\n+   |                      ^\n \n-error: unused macro definition\n-  --> $DIR/unused-macro-rules.rs:24:5\n+error: unused macro definition: `unused`\n+  --> $DIR/unused-macro-rules.rs:24:18\n    |\n-LL | /     macro_rules! unused {\n-LL | |         () => {};\n-LL | |     }\n-   | |_____^\n+LL |     macro_rules! unused {\n+   |                  ^^^^^^\n    |\n note: the lint level is defined here\n   --> $DIR/unused-macro-rules.rs:23:12"}, {"sha": "1a73279ed6dbdcc517f3a6c3acd613511ecdbd7e", "filename": "src/test/ui/lint/unused/unused-macro.stderr", "status": "modified", "additions": 12, "deletions": 18, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/e90c5fbbc5df5c81267747daeb937d4e955ce6ad/src%2Ftest%2Fui%2Flint%2Funused%2Funused-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e90c5fbbc5df5c81267747daeb937d4e955ce6ad/src%2Ftest%2Fui%2Flint%2Funused%2Funused-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused%2Funused-macro.stderr?ref=e90c5fbbc5df5c81267747daeb937d4e955ce6ad", "patch": "@@ -1,38 +1,32 @@\n-error: unused macro definition\n-  --> $DIR/unused-macro.rs:5:1\n+error: unused macro definition: `unused`\n+  --> $DIR/unused-macro.rs:5:7\n    |\n-LL | / macro unused {\n-LL | |     () => {}\n-LL | | }\n-   | |_^\n+LL | macro unused {\n+   |       ^^^^^^\n    |\n note: the lint level is defined here\n   --> $DIR/unused-macro.rs:2:9\n    |\n LL | #![deny(unused_macros)]\n    |         ^^^^^^^^^^^^^\n \n-error: unused macro definition\n-  --> $DIR/unused-macro.rs:15:5\n+error: unused macro definition: `unused`\n+  --> $DIR/unused-macro.rs:15:11\n    |\n-LL | /     macro unused {\n-LL | |         () => {}\n-LL | |     }\n-   | |_____^\n+LL |     macro unused {\n+   |           ^^^^^^\n    |\n note: the lint level is defined here\n   --> $DIR/unused-macro.rs:14:12\n    |\n LL |     #[deny(unused_macros)]\n    |            ^^^^^^^^^^^^^\n \n-error: unused macro definition\n-  --> $DIR/unused-macro.rs:21:5\n+error: unused macro definition: `unused`\n+  --> $DIR/unused-macro.rs:21:22\n    |\n-LL | /     pub(crate) macro unused {\n-LL | |         () => {}\n-LL | |     }\n-   | |_____^\n+LL |     pub(crate) macro unused {\n+   |                      ^^^^^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "69bfb4f3cbfbc5b4b77743a81c49f30897a8fd46", "filename": "src/test/ui/proc-macro/issue-39889.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e90c5fbbc5df5c81267747daeb937d4e955ce6ad/src%2Ftest%2Fui%2Fproc-macro%2Fissue-39889.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e90c5fbbc5df5c81267747daeb937d4e955ce6ad/src%2Ftest%2Fui%2Fproc-macro%2Fissue-39889.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-39889.rs?ref=e90c5fbbc5df5c81267747daeb937d4e955ce6ad", "patch": "@@ -1,6 +1,6 @@\n // run-pass\n \n-#![allow(dead_code)]\n+#![allow(dead_code, unused_macros)]\n // aux-build:issue-39889.rs\n \n extern crate issue_39889;"}]}