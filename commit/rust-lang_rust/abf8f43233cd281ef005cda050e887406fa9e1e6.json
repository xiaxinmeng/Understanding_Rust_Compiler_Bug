{"sha": "abf8f43233cd281ef005cda050e887406fa9e1e6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiZjhmNDMyMzNjZDI4MWVmMDA1Y2RhMDUwZTg4NzQwNmZhOWUxZTY=", "commit": {"author": {"name": "\u00d6mer Sinan A\u011facan", "email": "omeragacan@gmail.com", "date": "2017-10-07T12:44:28Z"}, "committer": {"name": "\u00d6mer Sinan A\u011facan", "email": "omeragacan@gmail.com", "date": "2017-10-26T17:20:36Z"}, "message": "Implement match_arm_forces_newline option (#2039)", "tree": {"sha": "d73cd277db7dc6b4826f4388ae477833f3e12ca4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d73cd277db7dc6b4826f4388ae477833f3e12ca4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/abf8f43233cd281ef005cda050e887406fa9e1e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/abf8f43233cd281ef005cda050e887406fa9e1e6", "html_url": "https://github.com/rust-lang/rust/commit/abf8f43233cd281ef005cda050e887406fa9e1e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/abf8f43233cd281ef005cda050e887406fa9e1e6/comments", "author": {"login": "osa1", "id": 448274, "node_id": "MDQ6VXNlcjQ0ODI3NA==", "avatar_url": "https://avatars.githubusercontent.com/u/448274?v=4", "gravatar_id": "", "url": "https://api.github.com/users/osa1", "html_url": "https://github.com/osa1", "followers_url": "https://api.github.com/users/osa1/followers", "following_url": "https://api.github.com/users/osa1/following{/other_user}", "gists_url": "https://api.github.com/users/osa1/gists{/gist_id}", "starred_url": "https://api.github.com/users/osa1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/osa1/subscriptions", "organizations_url": "https://api.github.com/users/osa1/orgs", "repos_url": "https://api.github.com/users/osa1/repos", "events_url": "https://api.github.com/users/osa1/events{/privacy}", "received_events_url": "https://api.github.com/users/osa1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "osa1", "id": 448274, "node_id": "MDQ6VXNlcjQ0ODI3NA==", "avatar_url": "https://avatars.githubusercontent.com/u/448274?v=4", "gravatar_id": "", "url": "https://api.github.com/users/osa1", "html_url": "https://github.com/osa1", "followers_url": "https://api.github.com/users/osa1/followers", "following_url": "https://api.github.com/users/osa1/following{/other_user}", "gists_url": "https://api.github.com/users/osa1/gists{/gist_id}", "starred_url": "https://api.github.com/users/osa1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/osa1/subscriptions", "organizations_url": "https://api.github.com/users/osa1/orgs", "repos_url": "https://api.github.com/users/osa1/repos", "events_url": "https://api.github.com/users/osa1/events{/privacy}", "received_events_url": "https://api.github.com/users/osa1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e48dd81a2ba05088099b7f5e09df36d72bc93db2", "url": "https://api.github.com/repos/rust-lang/rust/commits/e48dd81a2ba05088099b7f5e09df36d72bc93db2", "html_url": "https://github.com/rust-lang/rust/commit/e48dd81a2ba05088099b7f5e09df36d72bc93db2"}], "stats": {"total": 23, "additions": 17, "deletions": 6}, "files": [{"sha": "8c200302c5b0894bb017e22c812231752ba782d6", "filename": "src/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abf8f43233cd281ef005cda050e887406fa9e1e6/src%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abf8f43233cd281ef005cda050e887406fa9e1e6/src%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig.rs?ref=abf8f43233cd281ef005cda050e887406fa9e1e6", "patch": "@@ -597,6 +597,8 @@ create_config! {\n                                   the same line with the pattern of arms\";\n     match_block_trailing_comma: bool, false,\n         \"Put a trailing comma after a block based match arm (non-block arms are not affected)\";\n+    match_arm_forces_newline: bool, false,\n+        \"Force match arm bodies to be in a new lines\";\n     indent_match_arms: bool, true, \"Indent match arms instead of keeping them at the same \\\n                                     indentation level as the match keyword\";\n     match_pattern_separator_break_point: SeparatorPlace, SeparatorPlace::Back,"}, {"sha": "51dc7a9bb7a688f0939ded99b0bb74fa9adbb763", "filename": "src/expr.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/abf8f43233cd281ef005cda050e887406fa9e1e6/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abf8f43233cd281ef005cda050e887406fa9e1e6/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=abf8f43233cd281ef005cda050e887406fa9e1e6", "patch": "@@ -1695,15 +1695,20 @@ fn rewrite_match_body(\n     is_last: bool,\n ) -> Option<String> {\n     let (extend, body) = flatten_arm_body(context, body);\n-\n-    let comma = arm_comma(context.config, body, is_last);\n-    let alt_block_sep = String::from(\"\\n\") + &shape.indent.block_only().to_string(context.config);\n-    let alt_block_sep = alt_block_sep.as_str();\n     let (is_block, is_empty_block) = if let ast::ExprKind::Block(ref block) = body.node {\n         (true, is_empty_block(block, context.codemap))\n     } else {\n         (false, false)\n     };\n+    let extend = if context.config.match_arm_forces_newline() {\n+        is_block\n+    } else {\n+        extend\n+    };\n+\n+    let comma = arm_comma(context.config, body, is_last);\n+    let alt_block_sep = String::from(\"\\n\") + &shape.indent.block_only().to_string(context.config);\n+    let alt_block_sep = alt_block_sep.as_str();\n \n     let combine_orig_body = |body_str: &str| {\n         let block_sep = match context.config.control_brace_style() {\n@@ -1716,7 +1721,11 @@ fn rewrite_match_body(\n \n     let forbid_same_line = has_guard && pats_str.contains('\\n') && !is_empty_block;\n     let next_line_indent = if is_block {\n-        shape.indent\n+        if is_empty_block {\n+            shape.indent.block_indent(context.config)\n+        } else {\n+            shape.indent\n+        }\n     } else {\n         shape.indent.block_indent(context.config)\n     };\n@@ -1772,7 +1781,7 @@ fn rewrite_match_body(\n \n         match rewrite {\n             Some(ref body_str)\n-                if !forbid_same_line\n+                if !forbid_same_line && !context.config.match_arm_forces_newline()\n                     && (is_block\n                         || (!body_str.contains('\\n') && body_str.len() <= body_shape.width)) =>\n             {"}]}