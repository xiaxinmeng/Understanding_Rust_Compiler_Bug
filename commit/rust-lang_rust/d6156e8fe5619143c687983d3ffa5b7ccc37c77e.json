{"sha": "d6156e8fe5619143c687983d3ffa5b7ccc37c77e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2MTU2ZThmZTU2MTkxNDNjNjg3OTgzZDNmZmE1YjdjY2MzN2M3N2U=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2020-06-08T16:02:57Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2020-06-15T14:38:00Z"}, "message": "Change how compiler-builtins gets many CGUs\n\nThis commit intends to fix an accidental regression from #70846. The\ngoal of #70846 was to build compiler-builtins with a maximal number of\nCGUs to ensure that each module in the source corresponds to an object\nfile. This high degree of control for compiler-builtins is desirable to\nensure that there's at most one exported symbol per CGU, ideally\nenabling compiler-builtins to not conflict with the system libgcc as\noften.\n\nIn #70846, however, only part of the compiler understands that\ncompiler-builtins is built with many CGUs. The rest of the compiler\nthinks it's building with `sess.codegen_units()`. Notably the\ncalculation of `sess.lto()` consults `sess.codegen_units()`, which when\nthere's only one CGU it disables ThinLTO. This means that\ncompiler-builtins is built without ThinLTO, which is quite harmful to\nperformance! This is the root of the cause from #73135 where intrinsics\nwere found to not be inlining trivial functions.\n\nThe fix applied in this commit is to remove the special-casing of\ncompiler-builtins in the compiler. Instead the build system is now\nresponsible for special-casing compiler-builtins. It doesn't know\nexactly how many CGUs will be needed but it passes a large number that\nis assumed to be much greater than the number of source-level modules\nneeded. After reading the various locations in the compiler source, this\nseemed like the best solution rather than adding more and more special\ncasing in the compiler for compiler-builtins.\n\nCloses #73135", "tree": {"sha": "9b886b0382603b67f4a966c22b5d5a91b48af10f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b886b0382603b67f4a966c22b5d5a91b48af10f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6156e8fe5619143c687983d3ffa5b7ccc37c77e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6156e8fe5619143c687983d3ffa5b7ccc37c77e", "html_url": "https://github.com/rust-lang/rust/commit/d6156e8fe5619143c687983d3ffa5b7ccc37c77e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6156e8fe5619143c687983d3ffa5b7ccc37c77e/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73558160933b2764ed9a84b1b2b647e128eac3f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/73558160933b2764ed9a84b1b2b647e128eac3f8", "html_url": "https://github.com/rust-lang/rust/commit/73558160933b2764ed9a84b1b2b647e128eac3f8"}], "stats": {"total": 62, "additions": 14, "deletions": 48}, "files": [{"sha": "f10d539d8296ba9cabffdf88cee33f47fecf1118", "filename": "Cargo.toml", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d6156e8fe5619143c687983d3ffa5b7ccc37c77e/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d6156e8fe5619143c687983d3ffa5b7ccc37c77e/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=d6156e8fe5619143c687983d3ffa5b7ccc37c77e", "patch": "@@ -42,6 +42,19 @@ debug-assertions = false\n debug = false\n debug-assertions = false\n \n+[profile.release.package.compiler_builtins]\n+# For compiler-builtins we always use a high number of codegen units.\n+# The goal here is to place every single intrinsic into its own object\n+# file to avoid symbol clashes with the system libgcc if possible. Note\n+# that this number doesn't actually produce this many object files, we\n+# just don't create more than this number of object files.\n+#\n+# It's a bit of a bummer that we have to pass this here, unfortunately.\n+# Ideally this would be specified through an env var to Cargo so Cargo\n+# knows how many CGUs are for this specific crate, but for now\n+# per-crate configuration isn't specifiable in the environment.\n+codegen-units = 10000\n+\n # We want the RLS to use the version of Cargo that we've got vendored in this\n # repository to ensure that the same exact version of Cargo is used by both the\n # RLS and the Cargo binary itself. The RLS depends on Cargo as a git repository"}, {"sha": "a945c1d626a9a63849c17386ac2c1dd656781e59", "filename": "src/librustc_mir/monomorphize/partitioning.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d6156e8fe5619143c687983d3ffa5b7ccc37c77e/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6156e8fe5619143c687983d3ffa5b7ccc37c77e/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs?ref=d6156e8fe5619143c687983d3ffa5b7ccc37c77e", "patch": "@@ -454,18 +454,11 @@ fn default_visibility(tcx: TyCtxt<'_>, id: DefId, is_generic: bool) -> Visibilit\n fn merge_codegen_units<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     initial_partitioning: &mut PreInliningPartitioning<'tcx>,\n-    mut target_cgu_count: usize,\n+    target_cgu_count: usize,\n ) {\n     assert!(target_cgu_count >= 1);\n     let codegen_units = &mut initial_partitioning.codegen_units;\n \n-    if tcx.is_compiler_builtins(LOCAL_CRATE) {\n-        // Compiler builtins require some degree of control over how mono items\n-        // are partitioned into compilation units. Provide it by keeping the\n-        // original partitioning when compiling the compiler builtins crate.\n-        target_cgu_count = codegen_units.len();\n-    }\n-\n     // Note that at this point in time the `codegen_units` here may not be in a\n     // deterministic order (but we know they're deterministically the same set).\n     // We want this merging to produce a deterministic ordering of codegen units"}, {"sha": "25195743b04007360ab92f5e8cf6d337ee021333", "filename": "src/test/codegen-units/partitioning/compiler-builtins.rs", "status": "removed", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/73558160933b2764ed9a84b1b2b647e128eac3f8/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fcompiler-builtins.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73558160933b2764ed9a84b1b2b647e128eac3f8/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fcompiler-builtins.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fcompiler-builtins.rs?ref=73558160933b2764ed9a84b1b2b647e128eac3f8", "patch": "@@ -1,40 +0,0 @@\n-// Verifies that during compiler_builtins compilation the codegen units are kept\n-// unmerged. Even when only a single codegen unit is requested with -Ccodegen-units=1.\n-//\n-// compile-flags: -Zprint-mono-items=eager -Ccodegen-units=1\n-\n-#![compiler_builtins]\n-#![crate_type=\"lib\"]\n-#![feature(compiler_builtins)]\n-\n-mod atomics {\n-    //~ MONO_ITEM fn compiler_builtins::atomics[0]::sync_1[0] @@ compiler_builtins-cgu.0[External]\n-    #[no_mangle]\n-    pub extern \"C\" fn sync_1() {}\n-\n-    //~ MONO_ITEM fn compiler_builtins::atomics[0]::sync_2[0] @@ compiler_builtins-cgu.0[External]\n-    #[no_mangle]\n-    pub extern \"C\" fn sync_2() {}\n-\n-    //~ MONO_ITEM fn compiler_builtins::atomics[0]::sync_3[0] @@ compiler_builtins-cgu.0[External]\n-    #[no_mangle]\n-    pub extern \"C\" fn sync_3() {}\n-}\n-\n-mod x {\n-    //~ MONO_ITEM fn compiler_builtins::x[0]::x[0] @@ compiler_builtins-cgu.1[External]\n-    #[no_mangle]\n-    pub extern \"C\" fn x() {}\n-}\n-\n-mod y {\n-    //~ MONO_ITEM fn compiler_builtins::y[0]::y[0] @@ compiler_builtins-cgu.2[External]\n-    #[no_mangle]\n-    pub extern \"C\" fn y() {}\n-}\n-\n-mod z {\n-    //~ MONO_ITEM fn compiler_builtins::z[0]::z[0] @@ compiler_builtins-cgu.3[External]\n-    #[no_mangle]\n-    pub extern \"C\" fn z() {}\n-}"}]}