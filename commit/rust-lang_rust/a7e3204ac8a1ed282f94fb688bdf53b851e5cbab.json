{"sha": "a7e3204ac8a1ed282f94fb688bdf53b851e5cbab", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3ZTMyMDRhYzhhMWVkMjgyZjk0ZmI2ODhiZGY1M2I4NTFlNWNiYWI=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2016-05-20T11:40:52Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2016-05-20T11:40:52Z"}, "message": "`mir::dataflow` arielb1 review feedback\n\n * removed `on_all_children_bits`, rewriting calls to use `super::on_all_children_bits`\n\n * moved `fn path` helper routine out of `impl MirBorrowckCtxtPreDataflow`", "tree": {"sha": "3dce3ecef52fccc0402f9ef325ea53cb5549a0e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3dce3ecef52fccc0402f9ef325ea53cb5549a0e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a7e3204ac8a1ed282f94fb688bdf53b851e5cbab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a7e3204ac8a1ed282f94fb688bdf53b851e5cbab", "html_url": "https://github.com/rust-lang/rust/commit/a7e3204ac8a1ed282f94fb688bdf53b851e5cbab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a7e3204ac8a1ed282f94fb688bdf53b851e5cbab/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c468f4b65961ec1d3ce3f993c59d250afde00be", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c468f4b65961ec1d3ce3f993c59d250afde00be", "html_url": "https://github.com/rust-lang/rust/commit/9c468f4b65961ec1d3ce3f993c59d250afde00be"}], "stats": {"total": 96, "additions": 32, "deletions": 64}, "files": [{"sha": "8c3a843e464791eefdff8efca994b32ec9a90c67", "filename": "src/librustc_borrowck/borrowck/mir/dataflow/mod.rs", "status": "modified", "additions": 32, "deletions": 64, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/a7e3204ac8a1ed282f94fb688bdf53b851e5cbab/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fdataflow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7e3204ac8a1ed282f94fb688bdf53b851e5cbab/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fdataflow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fdataflow%2Fmod.rs?ref=a7e3204ac8a1ed282f94fb688bdf53b851e5cbab", "patch": "@@ -19,7 +19,7 @@ use std::path::PathBuf;\n use std::usize;\n \n use super::MirBorrowckCtxtPreDataflow;\n-use super::gather_moves::{Location, MoveData, MovePathData, MovePathIndex, MoveOutIndex, PathMap};\n+use super::gather_moves::{Location, MoveData, MovePathIndex, MoveOutIndex};\n use super::gather_moves::{MoveOut, MovePath};\n use super::DropFlagState;\n \n@@ -99,40 +99,6 @@ impl<'a, 'tcx: 'a, BD> DataflowAnalysis<'a, 'tcx, BD>\n     }\n }\n \n-fn on_all_children_bits<Each>(path_map: &PathMap,\n-                              move_paths: &MovePathData,\n-                              move_path_index: MovePathIndex,\n-                              mut each_child: Each)\n-    where Each: FnMut(MoveOutIndex)\n-{\n-    return on_all_children_bits_recur(\n-        path_map, move_paths, move_path_index, &mut each_child);\n-\n-    fn on_all_children_bits_recur<Each>(path_map: &PathMap,\n-                                        move_paths: &MovePathData,\n-                                        move_path_index: MovePathIndex,\n-                                        each_child: &mut Each)\n-        where Each: FnMut(MoveOutIndex)\n-    {\n-        // 1. invoke `each_child` callback for all moves that directly\n-        //    influence path for `move_path_index`\n-        for move_index in &path_map[move_path_index] {\n-            each_child(*move_index);\n-        }\n-\n-        // 2. for each child of the path (that is named in this\n-        //    function), recur.\n-        //\n-        // (Unnamed children are irrelevant to dataflow; by\n-        // definition they have no associated moves.)\n-        let mut next_child_index = move_paths[move_path_index].first_child;\n-        while let Some(child_index) = next_child_index {\n-            on_all_children_bits_recur(path_map, move_paths, child_index, each_child);\n-            next_child_index = move_paths[child_index].next_sibling;\n-        }\n-    }\n-}\n-\n impl<'b, 'a: 'b, 'tcx: 'a, BD> PropagationContext<'b, 'a, 'tcx, BD>\n     where BD: BitDenotation, BD::Ctxt: HasMoveData<'tcx>\n {\n@@ -161,23 +127,23 @@ impl<'b, 'a: 'b, 'tcx: 'a, BD> PropagationContext<'b, 'a, 'tcx, BD>\n     }\n }\n \n+fn dataflow_path(context: &str, prepost: &str, path: &str) -> PathBuf {\n+    format!(\"{}_{}\", context, prepost);\n+    let mut path = PathBuf::from(path);\n+    let new_file_name = {\n+        let orig_file_name = path.file_name().unwrap().to_str().unwrap();\n+        format!(\"{}_{}\", context, orig_file_name)\n+    };\n+    path.set_file_name(new_file_name);\n+    path\n+}\n+\n impl<'a, 'tcx: 'a, BD> MirBorrowckCtxtPreDataflow<'a, 'tcx, BD>\n     where BD: BitDenotation, BD::Bit: Debug, BD::Ctxt: HasMoveData<'tcx>\n {\n-    fn path(context: &str, prepost: &str, path: &str) -> PathBuf {\n-        format!(\"{}_{}\", context, prepost);\n-        let mut path = PathBuf::from(path);\n-        let new_file_name = {\n-            let orig_file_name = path.file_name().unwrap().to_str().unwrap();\n-            format!(\"{}_{}\", context, orig_file_name)\n-        };\n-        path.set_file_name(new_file_name);\n-        path\n-    }\n-\n     fn pre_dataflow_instrumentation(&self) -> io::Result<()> {\n         if let Some(ref path_str) = self.print_preflow_to {\n-            let path = Self::path(BD::name(), \"preflow\", path_str);\n+            let path = dataflow_path(BD::name(), \"preflow\", path_str);\n             graphviz::print_borrowck_graph_to(self, &path)\n         } else {\n             Ok(())\n@@ -186,7 +152,7 @@ impl<'a, 'tcx: 'a, BD> MirBorrowckCtxtPreDataflow<'a, 'tcx, BD>\n \n     fn post_dataflow_instrumentation(&self) -> io::Result<()> {\n         if let Some(ref path_str) = self.print_postflow_to {\n-            let path = Self::path(BD::name(), \"postflow\", path_str);\n+            let path = dataflow_path(BD::name(), \"postflow\", path_str);\n             graphviz::print_borrowck_graph_to(self, &path)\n         } else{\n             Ok(())\n@@ -746,9 +712,8 @@ impl<'a, 'tcx> BitDenotation for MovingOutStatements<'a, 'tcx> {\n                         sets: &mut BlockSets,\n                         bb: repr::BasicBlock,\n                         idx: usize) {\n-        let &(_tcx, mir, ref move_data) = ctxt;\n+        let &(tcx, mir, ref move_data) = ctxt;\n         let stmt = &mir.basic_block_data(bb).statements[idx];\n-        let move_paths = &move_data.move_paths;\n         let loc_map = &move_data.loc_map;\n         let path_map = &move_data.path_map;\n         let rev_lookup = &move_data.rev_lookup;\n@@ -771,13 +736,14 @@ impl<'a, 'tcx> BitDenotation for MovingOutStatements<'a, 'tcx> {\n                 let move_path_index = rev_lookup.find(lvalue);\n \n                 sets.kill_set.set_bit(move_path_index.idx());\n-                on_all_children_bits(path_map,\n-                                     move_paths,\n-                                     move_path_index,\n-                                     |moi| {\n-                                         assert!(moi.idx() < bits_per_block);\n-                                         sets.kill_set.set_bit(moi.idx());\n-                                     });\n+                super::on_all_children_bits(tcx,\n+                                            mir,\n+                                            move_data,\n+                                            move_path_index,\n+                                            |mpi| for moi in &path_map[mpi] {\n+                                                assert!(moi.idx() < bits_per_block);\n+                                                sets.kill_set.set_bit(moi.idx());\n+                                            });\n             }\n         }\n     }\n@@ -812,13 +778,15 @@ impl<'a, 'tcx> BitDenotation for MovingOutStatements<'a, 'tcx> {\n         let bits_per_block = self.bits_per_block(ctxt);\n \n         in_out.clear_bit(move_path_index.idx());\n-        on_all_children_bits(&move_data.path_map,\n-                             &move_data.move_paths,\n-                             move_path_index,\n-                             |moi| {\n-                                 assert!(moi.idx() < bits_per_block);\n-                                 in_out.clear_bit(moi.idx());\n-                             });\n+        let path_map = &move_data.path_map;\n+        super::on_all_children_bits(ctxt.0,\n+                                    ctxt.1,\n+                                    move_data,\n+                                    move_path_index,\n+                                    |mpi| for moi in &path_map[mpi] {\n+                                        assert!(moi.idx() < bits_per_block);\n+                                        in_out.clear_bit(moi.idx());\n+                                    });\n     }\n }\n "}]}