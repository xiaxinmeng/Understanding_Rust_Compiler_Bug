{"sha": "64e2248794caada12469a0bd31d883eb6370b095", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0ZTIyNDg3OTRjYWFkYTEyNDY5YTBiZDMxZDg4M2ViNjM3MGIwOTU=", "commit": {"author": {"name": "Albin Hedman", "email": "albin9604@gmail.com", "date": "2021-03-13T19:33:27Z"}, "committer": {"name": "Albin Hedman", "email": "albin9604@gmail.com", "date": "2021-03-15T19:45:22Z"}, "message": "Constify mem::swap and ptr::swap[_nonoverlapping]", "tree": {"sha": "ca49348dcc25a72a9d7099859127afd809900576", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca49348dcc25a72a9d7099859127afd809900576"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/64e2248794caada12469a0bd31d883eb6370b095", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEeQ9lb2ZjsXFBDRuFH1AezRu9cKcFAmBPuWYACgkQH1AezRu9\ncKdSNw/8D0m99pMDypDX3aQtGjWTuwjWz9a3hJ/+S+t4PpTzaeh8jmF+dWZBbpAN\nJfQoqnQEdM9seXwNviFOwaE9ExwCiAMnup2sd0x5Yu6D/Wtg43vgcRcSn5Wdy34L\n31KjsASv+uRwO/3d4rJQp/qi1Xr8EsiittRCpto/fiinZ/lZsEwLH/n7xho+F5RB\nFHfqxbCTAhKd3gWnZVHINCvN+PcI3Vl/hB+o7AOMudE0fO0qpW2pXFHAfP2aTTPH\nVQ3vTKJrKAcbmLRbk+ewVESXWGNnIiBdqttYPRDrUoiyn1KlOnAuRzSB5r8fnTa9\nwfDp6mhkQZAE4VodhhBN6FZigjRFsFLMA+9cB1FFz8q//b02O4bij0cLUdo+iFlb\nqDDt2c3PiV2saybf+PeVFSpM6QiUQPsH8QM9vRkdIeZlAx97e65TR+Lst1Fg6xCg\ntafulDIjCoOlZG8nowbx28AJkybJVj/yD96xhBd5Amkc7oSyyQ4haSIQNVjd9zCa\ndrGV2ok4/MLm3+86lbmEg6lnjOuvBNRAv7QAYJZtxxYcq68jujVkpMbCsqPLHdl0\n5Mt3458NGEZ4GYlBqx3StAIIv0e35CJVBucGNeqQ8hUrjDkx0iiJm4EkhbBPqFJq\nKnU6wS7r9G7Mdui6RaYZBBQ/+3eYUPRP1GzfLeFP+xkn0ooh98I=\n=zfdM\n-----END PGP SIGNATURE-----", "payload": "tree ca49348dcc25a72a9d7099859127afd809900576\nparent 62cf2445633c03a927b7fef4abe82ea480df4078\nauthor Albin Hedman <albin9604@gmail.com> 1615664007 +0100\ncommitter Albin Hedman <albin9604@gmail.com> 1615837522 +0100\n\nConstify mem::swap and ptr::swap[_nonoverlapping]\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/64e2248794caada12469a0bd31d883eb6370b095", "html_url": "https://github.com/rust-lang/rust/commit/64e2248794caada12469a0bd31d883eb6370b095", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/64e2248794caada12469a0bd31d883eb6370b095/comments", "author": {"login": "usbalbin", "id": 10927717, "node_id": "MDQ6VXNlcjEwOTI3NzE3", "avatar_url": "https://avatars.githubusercontent.com/u/10927717?v=4", "gravatar_id": "", "url": "https://api.github.com/users/usbalbin", "html_url": "https://github.com/usbalbin", "followers_url": "https://api.github.com/users/usbalbin/followers", "following_url": "https://api.github.com/users/usbalbin/following{/other_user}", "gists_url": "https://api.github.com/users/usbalbin/gists{/gist_id}", "starred_url": "https://api.github.com/users/usbalbin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/usbalbin/subscriptions", "organizations_url": "https://api.github.com/users/usbalbin/orgs", "repos_url": "https://api.github.com/users/usbalbin/repos", "events_url": "https://api.github.com/users/usbalbin/events{/privacy}", "received_events_url": "https://api.github.com/users/usbalbin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "usbalbin", "id": 10927717, "node_id": "MDQ6VXNlcjEwOTI3NzE3", "avatar_url": "https://avatars.githubusercontent.com/u/10927717?v=4", "gravatar_id": "", "url": "https://api.github.com/users/usbalbin", "html_url": "https://github.com/usbalbin", "followers_url": "https://api.github.com/users/usbalbin/followers", "following_url": "https://api.github.com/users/usbalbin/following{/other_user}", "gists_url": "https://api.github.com/users/usbalbin/gists{/gist_id}", "starred_url": "https://api.github.com/users/usbalbin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/usbalbin/subscriptions", "organizations_url": "https://api.github.com/users/usbalbin/orgs", "repos_url": "https://api.github.com/users/usbalbin/repos", "events_url": "https://api.github.com/users/usbalbin/events{/privacy}", "received_events_url": "https://api.github.com/users/usbalbin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62cf2445633c03a927b7fef4abe82ea480df4078", "url": "https://api.github.com/repos/rust-lang/rust/commits/62cf2445633c03a927b7fef4abe82ea480df4078", "html_url": "https://github.com/rust-lang/rust/commit/62cf2445633c03a927b7fef4abe82ea480df4078"}], "stats": {"total": 39, "additions": 12, "deletions": 27}, "files": [{"sha": "4c2472ed82c5ef226ea11f7efe0b51d8b7a6673f", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/64e2248794caada12469a0bd31d883eb6370b095/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64e2248794caada12469a0bd31d883eb6370b095/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=64e2248794caada12469a0bd31d883eb6370b095", "patch": "@@ -1902,18 +1902,6 @@ pub(crate) fn is_aligned_and_not_null<T>(ptr: *const T) -> bool {\n     !ptr.is_null() && ptr as usize % mem::align_of::<T>() == 0\n }\n \n-/// Checks whether the regions of memory starting at `src` and `dst` of size\n-/// `count * size_of::<T>()` do *not* overlap.\n-pub(crate) fn is_nonoverlapping<T>(src: *const T, dst: *const T, count: usize) -> bool {\n-    let src_usize = src as usize;\n-    let dst_usize = dst as usize;\n-    let size = mem::size_of::<T>().checked_mul(count).unwrap();\n-    let diff = if src_usize > dst_usize { src_usize - dst_usize } else { dst_usize - src_usize };\n-    // If the absolute distance between the ptrs is at least as big as the size of the buffer,\n-    // they do not overlap.\n-    diff >= size\n-}\n-\n /// Sets `count * size_of::<T>()` bytes of memory starting at `dst` to\n /// `val`.\n ///"}, {"sha": "8e35adcbd9ef5944f1b4648151a45d0da6b193af", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/64e2248794caada12469a0bd31d883eb6370b095/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64e2248794caada12469a0bd31d883eb6370b095/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=64e2248794caada12469a0bd31d883eb6370b095", "patch": "@@ -98,6 +98,7 @@\n #![feature(const_slice_from_raw_parts)]\n #![feature(const_slice_ptr_len)]\n #![feature(const_size_of_val)]\n+#![feature(const_swap)]\n #![feature(const_align_of_val)]\n #![feature(const_type_id)]\n #![feature(const_type_name)]"}, {"sha": "c01730b6551339b11a453c8e18a9d58bf5d2886e", "filename": "library/core/src/mem/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/64e2248794caada12469a0bd31d883eb6370b095/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64e2248794caada12469a0bd31d883eb6370b095/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs?ref=64e2248794caada12469a0bd31d883eb6370b095", "patch": "@@ -682,7 +682,8 @@ pub unsafe fn uninitialized<T>() -> T {\n /// ```\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub fn swap<T>(x: &mut T, y: &mut T) {\n+#[rustc_const_unstable(feature = \"const_swap\", issue = \"83163\")]\n+pub const fn swap<T>(x: &mut T, y: &mut T) {\n     // SAFETY: the raw pointers have been created from safe mutable references satisfying all the\n     // constraints on `ptr::swap_nonoverlapping_one`\n     unsafe {"}, {"sha": "155a64345e997d8668b28970af278e405a0f7b68", "filename": "library/core/src/ptr/mod.rs", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/64e2248794caada12469a0bd31d883eb6370b095/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64e2248794caada12469a0bd31d883eb6370b095/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs?ref=64e2248794caada12469a0bd31d883eb6370b095", "patch": "@@ -67,7 +67,7 @@\n use crate::cmp::Ordering;\n use crate::fmt;\n use crate::hash;\n-use crate::intrinsics::{self, abort, is_aligned_and_not_null, is_nonoverlapping};\n+use crate::intrinsics::{self, abort, is_aligned_and_not_null};\n use crate::mem::{self, MaybeUninit};\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -394,7 +394,8 @@ pub const fn slice_from_raw_parts_mut<T>(data: *mut T, len: usize) -> *mut [T] {\n /// ```\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub unsafe fn swap<T>(x: *mut T, y: *mut T) {\n+#[rustc_const_unstable(feature = \"const_swap\", issue = \"83163\")]\n+pub const unsafe fn swap<T>(x: *mut T, y: *mut T) {\n     // Give ourselves some scratch space to work with.\n     // We do not have to worry about drops: `MaybeUninit` does nothing when dropped.\n     let mut tmp = MaybeUninit::<T>::uninit();\n@@ -451,16 +452,8 @@ pub unsafe fn swap<T>(x: *mut T, y: *mut T) {\n /// ```\n #[inline]\n #[stable(feature = \"swap_nonoverlapping\", since = \"1.27.0\")]\n-pub unsafe fn swap_nonoverlapping<T>(x: *mut T, y: *mut T, count: usize) {\n-    if cfg!(debug_assertions)\n-        && !(is_aligned_and_not_null(x)\n-            && is_aligned_and_not_null(y)\n-            && is_nonoverlapping(x, y, count))\n-    {\n-        // Not panicking to keep codegen impact smaller.\n-        abort();\n-    }\n-\n+#[rustc_const_unstable(feature = \"const_swap\", issue = \"83163\")]\n+pub const unsafe fn swap_nonoverlapping<T>(x: *mut T, y: *mut T, count: usize) {\n     let x = x as *mut u8;\n     let y = y as *mut u8;\n     let len = mem::size_of::<T>() * count;\n@@ -470,7 +463,8 @@ pub unsafe fn swap_nonoverlapping<T>(x: *mut T, y: *mut T, count: usize) {\n }\n \n #[inline]\n-pub(crate) unsafe fn swap_nonoverlapping_one<T>(x: *mut T, y: *mut T) {\n+#[rustc_const_unstable(feature = \"const_swap\", issue = \"83163\")]\n+pub(crate) const unsafe fn swap_nonoverlapping_one<T>(x: *mut T, y: *mut T) {\n     // For types smaller than the block optimization below,\n     // just swap directly to avoid pessimizing codegen.\n     if mem::size_of::<T>() < 32 {\n@@ -488,7 +482,8 @@ pub(crate) unsafe fn swap_nonoverlapping_one<T>(x: *mut T, y: *mut T) {\n }\n \n #[inline]\n-unsafe fn swap_nonoverlapping_bytes(x: *mut u8, y: *mut u8, len: usize) {\n+#[rustc_const_unstable(feature = \"const_swap\", issue = \"83163\")]\n+const unsafe fn swap_nonoverlapping_bytes(x: *mut u8, y: *mut u8, len: usize) {\n     // The approach here is to utilize simd to swap x & y efficiently. Testing reveals\n     // that swapping either 32 bytes or 64 bytes at a time is most efficient for Intel\n     // Haswell E processors. LLVM is more able to optimize if we give a struct a"}]}