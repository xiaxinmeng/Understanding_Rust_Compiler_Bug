{"sha": "4fd5248749202e0578d719bc5480171a85358836", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmZDUyNDg3NDkyMDJlMDU3OGQ3MTliYzU0ODAxNzFhODUzNTg4MzY=", "commit": {"author": {"name": "Aramis Razzaghipour", "email": "aramisnoah@gmail.com", "date": "2021-05-23T13:45:26Z"}, "committer": {"name": "Aramis Razzaghipour", "email": "aramisnoah@gmail.com", "date": "2021-05-24T04:53:48Z"}, "message": "Add highlighting of items from other crates", "tree": {"sha": "69d1e6928bb9b7fa527835703890c4ee5343e5ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/69d1e6928bb9b7fa527835703890c4ee5343e5ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4fd5248749202e0578d719bc5480171a85358836", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEqQsXYYwP2wJc1ykb94j36ZATYAMFAmCrMXgACgkQ94j36ZAT\nYAMbwg/+JJFymfNtTtxuD6tIl3zlFBt2Kgo30vb18vl4NDuiDdbuEJSslrY3NoRU\n3kdpdqlFrEAqrs+Gtg47XgltiEAVEQbTVAFf2nFCTbpYnIsRp8M5ScYo4BCn5NCu\nPU2pKw4jkmgTFAvQHdQLMS6w8nMHu7yl8rz7fQOrNM3G4icwecBRrYWJp5UFQgUW\nWSIOl10w+ozasrjoeFfaNYKNDIDS6UYZLYXwpU7ZM0gLBtyWjMf9G4F38hXosSbA\nF/xTYcPzYABMQ4Gu6Rky78LKsgRYCI/05vc40YHXtw9OB/3X2Gc7CRwZkjR5dImg\nJNOzZ521kczHag0Yk7zm99+3/HMnxuRRGolBEyjzxJDEB1MHm2mVVTO1rQOEfj8k\n56V7JZ49u+x0JZC8Ug1VovFnFHJUhPfYCeLKu6UUxw/pTBPymNWlaeh7JyUj0moh\nv2UjJNPkDOtmgZAs0p0GaDQvQ2rK/Qw5mbXi8+Yca53U8vBngDKfNn0flrsX2rvA\nZrG366+cx2VMvKThdioQ0cDYImqLHKTxDG74hqnbMx71Z8rWyHO8DClS8j2KqClN\nCv+UBH9K1zPPSd2dZIl1Kj3WoO2xLN6DlxGBEON1/LcJ4c9gNfTmqbOs/SPbLxJ7\nyJGaEqI5pWuZRwRF0obxARJ918sHSFKmO/HGNIH49BgDpBCGVkk=\n=kgFX\n-----END PGP SIGNATURE-----", "payload": "tree 69d1e6928bb9b7fa527835703890c4ee5343e5ca\nparent 064ff633f6055ed35022222c89af01d3f9943e3c\nauthor Aramis Razzaghipour <aramisnoah@gmail.com> 1621777526 +1000\ncommitter Aramis Razzaghipour <aramisnoah@gmail.com> 1621832028 +1000\n\nAdd highlighting of items from other crates\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4fd5248749202e0578d719bc5480171a85358836", "html_url": "https://github.com/rust-lang/rust/commit/4fd5248749202e0578d719bc5480171a85358836", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4fd5248749202e0578d719bc5480171a85358836/comments", "author": {"login": "lunacookies", "id": 31783266, "node_id": "MDQ6VXNlcjMxNzgzMjY2", "avatar_url": "https://avatars.githubusercontent.com/u/31783266?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lunacookies", "html_url": "https://github.com/lunacookies", "followers_url": "https://api.github.com/users/lunacookies/followers", "following_url": "https://api.github.com/users/lunacookies/following{/other_user}", "gists_url": "https://api.github.com/users/lunacookies/gists{/gist_id}", "starred_url": "https://api.github.com/users/lunacookies/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lunacookies/subscriptions", "organizations_url": "https://api.github.com/users/lunacookies/orgs", "repos_url": "https://api.github.com/users/lunacookies/repos", "events_url": "https://api.github.com/users/lunacookies/events{/privacy}", "received_events_url": "https://api.github.com/users/lunacookies/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lunacookies", "id": 31783266, "node_id": "MDQ6VXNlcjMxNzgzMjY2", "avatar_url": "https://avatars.githubusercontent.com/u/31783266?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lunacookies", "html_url": "https://github.com/lunacookies", "followers_url": "https://api.github.com/users/lunacookies/followers", "following_url": "https://api.github.com/users/lunacookies/following{/other_user}", "gists_url": "https://api.github.com/users/lunacookies/gists{/gist_id}", "starred_url": "https://api.github.com/users/lunacookies/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lunacookies/subscriptions", "organizations_url": "https://api.github.com/users/lunacookies/orgs", "repos_url": "https://api.github.com/users/lunacookies/repos", "events_url": "https://api.github.com/users/lunacookies/events{/privacy}", "received_events_url": "https://api.github.com/users/lunacookies/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "064ff633f6055ed35022222c89af01d3f9943e3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/064ff633f6055ed35022222c89af01d3f9943e3c", "html_url": "https://github.com/rust-lang/rust/commit/064ff633f6055ed35022222c89af01d3f9943e3c"}], "stats": {"total": 115, "additions": 103, "deletions": 12}, "files": [{"sha": "6522a924b566a2b9d527422f53aaa6a19d2dba8a", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4fd5248749202e0578d719bc5480171a85358836/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fd5248749202e0578d719bc5480171a85358836/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=4fd5248749202e0578d719bc5480171a85358836", "patch": "@@ -673,6 +673,11 @@ impl Variant {\n     pub fn module(self, db: &dyn HirDatabase) -> Module {\n         self.parent.module(db)\n     }\n+\n+    pub fn krate(self, db: &dyn HirDatabase) -> Crate {\n+        self.module(db).krate()\n+    }\n+\n     pub fn parent_enum(self, _db: &dyn HirDatabase) -> Enum {\n         self.parent\n     }\n@@ -767,6 +772,10 @@ impl VariantDef {\n         }\n     }\n \n+    pub fn krate(self, db: &dyn HirDatabase) -> Crate {\n+        self.module(db).krate()\n+    }\n+\n     pub fn name(&self, db: &dyn HirDatabase) -> Name {\n         match self {\n             VariantDef::Struct(s) => s.name(db),\n@@ -1074,6 +1083,10 @@ impl Trait {\n         Module { id: self.id.lookup(db.upcast()).container }\n     }\n \n+    pub fn krate(self, db: &dyn HirDatabase) -> Crate {\n+        self.module(db).krate()\n+    }\n+\n     pub fn name(self, db: &dyn HirDatabase) -> Name {\n         db.trait_data(self.id).name.clone()\n     }\n@@ -1178,6 +1191,10 @@ impl MacroDef {\n         Some(Module { id: def_map.module_id(module_id) })\n     }\n \n+    pub fn krate(self, db: &dyn HirDatabase) -> Option<Crate> {\n+        self.module(db).map(Module::krate)\n+    }\n+\n     /// XXX: this parses the file\n     pub fn name(self, db: &dyn HirDatabase) -> Option<Name> {\n         match self.source(db)?.value {"}, {"sha": "cf1a8bad7968009e750f33ecd3e20f7e77370edb", "filename": "crates/ide/src/syntax_highlighting.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4fd5248749202e0578d719bc5480171a85358836/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fd5248749202e0578d719bc5480171a85358836/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs?ref=4fd5248749202e0578d719bc5480171a85358836", "patch": "@@ -80,6 +80,7 @@ pub(crate) fn highlight(\n         &mut hl,\n         &sema,\n         InFile::new(file_id.into(), &root),\n+        sema.scope(&root).krate(),\n         range_to_highlight,\n         syntactic_name_ref_highlighting,\n     );\n@@ -90,6 +91,7 @@ fn traverse(\n     hl: &mut Highlights,\n     sema: &Semantics<RootDatabase>,\n     root: InFile<&SyntaxNode>,\n+    krate: Option<hir::Crate>,\n     range_to_highlight: TextRange,\n     syntactic_name_ref_highlighting: bool,\n ) {\n@@ -209,6 +211,7 @@ fn traverse(\n \n         if let Some((mut highlight, binding_hash)) = highlight::element(\n             &sema,\n+            krate,\n             &mut bindings_shadow_count,\n             syntactic_name_ref_highlighting,\n             element_to_highlight.clone(),"}, {"sha": "2d6d8d1001002a938658d1f52836fbf394ec1b06", "filename": "crates/ide/src/syntax_highlighting/highlight.rs", "status": "modified", "additions": 77, "deletions": 12, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/4fd5248749202e0578d719bc5480171a85358836/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fd5248749202e0578d719bc5480171a85358836/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs?ref=4fd5248749202e0578d719bc5480171a85358836", "patch": "@@ -19,6 +19,7 @@ use crate::{\n \n pub(super) fn element(\n     sema: &Semantics<RootDatabase>,\n+    krate: Option<hir::Crate>,\n     bindings_shadow_count: &mut FxHashMap<hir::Name, u32>,\n     syntactic_name_ref_highlighting: bool,\n     element: SyntaxElement,\n@@ -46,8 +47,10 @@ pub(super) fn element(\n \n             match name_kind {\n                 Some(NameClass::ExternCrate(_)) => SymbolKind::Module.into(),\n-                Some(NameClass::Definition(def)) => highlight_def(db, def) | HlMod::Definition,\n-                Some(NameClass::ConstReference(def)) => highlight_def(db, def),\n+                Some(NameClass::Definition(def)) => {\n+                    highlight_def(db, krate, def) | HlMod::Definition\n+                }\n+                Some(NameClass::ConstReference(def)) => highlight_def(db, krate, def),\n                 Some(NameClass::PatFieldShorthand { field_ref, .. }) => {\n                     let mut h = HlTag::Symbol(SymbolKind::Field).into();\n                     if let Definition::Field(field) = field_ref {\n@@ -82,7 +85,7 @@ pub(super) fn element(\n                                 }\n                             };\n \n-                            let mut h = highlight_def(db, def);\n+                            let mut h = highlight_def(db, krate, def);\n \n                             if let Definition::Local(local) = &def {\n                                 if is_consumed_lvalue(name_ref.syntax().clone().into(), local, db) {\n@@ -136,9 +139,11 @@ pub(super) fn element(\n             let lifetime = element.into_node().and_then(ast::Lifetime::cast).unwrap();\n \n             match NameClass::classify_lifetime(sema, &lifetime) {\n-                Some(NameClass::Definition(def)) => highlight_def(db, def) | HlMod::Definition,\n+                Some(NameClass::Definition(def)) => {\n+                    highlight_def(db, krate, def) | HlMod::Definition\n+                }\n                 None => match NameRefClass::classify_lifetime(sema, &lifetime) {\n-                    Some(NameRefClass::Definition(def)) => highlight_def(db, def),\n+                    Some(NameRefClass::Definition(def)) => highlight_def(db, krate, def),\n                     _ => SymbolKind::LifetimeParam.into(),\n                 },\n                 _ => Highlight::from(SymbolKind::LifetimeParam) | HlMod::Definition,\n@@ -277,10 +282,26 @@ pub(super) fn element(\n         hash((name, shadow_count))\n     }\n }\n-fn highlight_def(db: &RootDatabase, def: Definition) -> Highlight {\n+fn highlight_def(db: &RootDatabase, krate: Option<hir::Crate>, def: Definition) -> Highlight {\n     match def {\n-        Definition::Macro(_) => HlTag::Symbol(SymbolKind::Macro),\n-        Definition::Field(_) => HlTag::Symbol(SymbolKind::Field),\n+        Definition::Macro(m) => {\n+            let mut h = Highlight::new(HlTag::Symbol(SymbolKind::Macro));\n+\n+            if m.krate(db) != krate {\n+                h |= HlMod::Foreign;\n+            }\n+\n+            return h;\n+        }\n+        Definition::Field(field) => {\n+            let mut h = Highlight::new(HlTag::Symbol(SymbolKind::Field));\n+\n+            if Some(field.parent_def(db).krate(db)) != krate {\n+                h |= HlMod::Foreign;\n+            }\n+\n+            return h;\n+        }\n         Definition::ModuleDef(def) => match def {\n             hir::ModuleDef::Module(_) => HlTag::Symbol(SymbolKind::Module),\n             hir::ModuleDef::Function(func) => {\n@@ -314,14 +335,37 @@ fn highlight_def(db: &RootDatabase, def: Definition) -> Highlight {\n                 if func.is_async(db) {\n                     h |= HlMod::Async;\n                 }\n+                if func.krate(db) != krate {\n+                    h |= HlMod::Foreign;\n+                }\n+                return h;\n+            }\n+            hir::ModuleDef::Adt(adt) => {\n+                let h = match adt {\n+                    hir::Adt::Struct(_) => HlTag::Symbol(SymbolKind::Struct),\n+                    hir::Adt::Enum(_) => HlTag::Symbol(SymbolKind::Enum),\n+                    hir::Adt::Union(_) => HlTag::Symbol(SymbolKind::Union),\n+                };\n+                let mut h = Highlight::new(h);\n+\n+                if Some(adt.krate(db)) != krate {\n+                    h |= HlMod::Foreign;\n+                }\n+\n+                return h;\n+            }\n+            hir::ModuleDef::Variant(variant) => {\n+                let mut h = Highlight::new(HlTag::Symbol(SymbolKind::Variant));\n+\n+                if Some(variant.krate(db)) != krate {\n+                    h |= HlMod::Foreign;\n+                }\n+\n                 return h;\n             }\n-            hir::ModuleDef::Adt(hir::Adt::Struct(_)) => HlTag::Symbol(SymbolKind::Struct),\n-            hir::ModuleDef::Adt(hir::Adt::Enum(_)) => HlTag::Symbol(SymbolKind::Enum),\n-            hir::ModuleDef::Adt(hir::Adt::Union(_)) => HlTag::Symbol(SymbolKind::Union),\n-            hir::ModuleDef::Variant(_) => HlTag::Symbol(SymbolKind::Variant),\n             hir::ModuleDef::Const(konst) => {\n                 let mut h = Highlight::new(HlTag::Symbol(SymbolKind::Const));\n+\n                 if let Some(item) = konst.as_assoc_item(db) {\n                     h |= HlMod::Associated;\n                     match item.container(db) {\n@@ -336,6 +380,10 @@ fn highlight_def(db: &RootDatabase, def: Definition) -> Highlight {\n                     }\n                 }\n \n+                if konst.krate(db) != krate {\n+                    h |= HlMod::Foreign;\n+                }\n+\n                 return h;\n             }\n             hir::ModuleDef::Trait(trait_) => {\n@@ -344,10 +392,16 @@ fn highlight_def(db: &RootDatabase, def: Definition) -> Highlight {\n                 if trait_.is_unsafe(db) {\n                     h |= HlMod::Unsafe;\n                 }\n+\n+                if Some(trait_.krate(db)) != krate {\n+                    h |= HlMod::Foreign;\n+                }\n+\n                 return h;\n             }\n             hir::ModuleDef::TypeAlias(type_) => {\n                 let mut h = Highlight::new(HlTag::Symbol(SymbolKind::TypeAlias));\n+\n                 if let Some(item) = type_.as_assoc_item(db) {\n                     h |= HlMod::Associated;\n                     match item.container(db) {\n@@ -361,15 +415,26 @@ fn highlight_def(db: &RootDatabase, def: Definition) -> Highlight {\n                         }\n                     }\n                 }\n+\n+                if Some(type_.krate(db)) != krate {\n+                    h |= HlMod::Foreign;\n+                }\n+\n                 return h;\n             }\n             hir::ModuleDef::BuiltinType(_) => HlTag::BuiltinType,\n             hir::ModuleDef::Static(s) => {\n                 let mut h = Highlight::new(HlTag::Symbol(SymbolKind::Static));\n+\n                 if s.is_mut(db) {\n                     h |= HlMod::Mutable;\n                     h |= HlMod::Unsafe;\n                 }\n+\n+                if s.krate(db) != krate {\n+                    h |= HlMod::Foreign;\n+                }\n+\n                 return h;\n             }\n         },"}, {"sha": "755599cba25cd60e27c194e8690c57471464d672", "filename": "crates/ide/src/syntax_highlighting/tags.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4fd5248749202e0578d719bc5480171a85358836/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fd5248749202e0578d719bc5480171a85358836/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs?ref=4fd5248749202e0578d719bc5480171a85358836", "patch": "@@ -67,6 +67,8 @@ pub enum HlMod {\n     Trait,\n     /// Used with keywords like `async` and `await`.\n     Async,\n+    /// Used for items from other crates.\n+    Foreign,\n     // Keep this last!\n     /// Used for unsafe functions, unsafe traits, mutable statics, union accesses and unsafe operations.\n     Unsafe,\n@@ -189,6 +191,7 @@ impl HlMod {\n         HlMod::Static,\n         HlMod::Trait,\n         HlMod::Async,\n+        HlMod::Foreign,\n         HlMod::Unsafe,\n     ];\n \n@@ -207,6 +210,7 @@ impl HlMod {\n             HlMod::Static => \"static\",\n             HlMod::Trait => \"trait\",\n             HlMod::Async => \"async\",\n+            HlMod::Foreign => \"foreign\",\n             HlMod::Unsafe => \"unsafe\",\n         }\n     }"}, {"sha": "9ebe000b5e735652e57355b058d301d5b3ea3f5e", "filename": "crates/rust-analyzer/src/semantic_tokens.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4fd5248749202e0578d719bc5480171a85358836/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fd5248749202e0578d719bc5480171a85358836/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs?ref=4fd5248749202e0578d719bc5480171a85358836", "patch": "@@ -92,6 +92,7 @@ define_semantic_token_modifiers![\n     (MUTABLE, \"mutable\"),\n     (CONSUMING, \"consuming\"),\n     (ASYNC, \"async\"),\n+    (FOREIGN, \"foreign\"),\n     (UNSAFE, \"unsafe\"),\n     (ATTRIBUTE_MODIFIER, \"attribute\"),\n     (TRAIT_MODIFIER, \"trait\"),"}, {"sha": "6368ba41380032a606369b4d8a1c385c16381773", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4fd5248749202e0578d719bc5480171a85358836/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fd5248749202e0578d719bc5480171a85358836/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=4fd5248749202e0578d719bc5480171a85358836", "patch": "@@ -504,6 +504,7 @@ fn semantic_token_type_and_modifiers(\n             HlMod::Mutable => semantic_tokens::MUTABLE,\n             HlMod::Consuming => semantic_tokens::CONSUMING,\n             HlMod::Async => semantic_tokens::ASYNC,\n+            HlMod::Foreign => semantic_tokens::FOREIGN,\n             HlMod::Unsafe => semantic_tokens::UNSAFE,\n             HlMod::Callable => semantic_tokens::CALLABLE,\n             HlMod::Static => lsp_types::SemanticTokenModifier::STATIC,"}]}