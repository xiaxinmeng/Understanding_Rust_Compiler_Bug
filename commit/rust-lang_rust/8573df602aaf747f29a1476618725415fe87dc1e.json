{"sha": "8573df602aaf747f29a1476618725415fe87dc1e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1NzNkZjYwMmFhZjc0N2YyOWExNDc2NjE4NzI1NDE1ZmU4N2RjMWU=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2018-08-22T22:13:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-08-22T22:13:56Z"}, "message": "Merge pull request #2925 from scampi/issue539\n\ndiscard trailing blank comments", "tree": {"sha": "3a75c1e1e1c760025332f9af668d3837e657906c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a75c1e1e1c760025332f9af668d3837e657906c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8573df602aaf747f29a1476618725415fe87dc1e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbfeAkCRBK7hj4Ov3rIwAAdHIIAKbk72lzmy56bTmo+T2b24sm\nK+UJ+OhmbRQxNYQLeUIz/zv4pEFxqVJDLY/52ryqyoWGXPRYY310NsR55rh8Rxgn\nlj82mezA+7S8C2+FLBuELG2BFwJ91efVTd94TReYcTRGBrxGIHeVzwPqCfDNKD9/\ntsjIy0sRra9hDkRCJpOZjWseoMnZRW7pUbXCuob4pontJzboixysXUdemkMiQ7iy\nKqj0v1Joyn4Tewq12K4/zbzacywrBllsW9uveGME3q207Jb2SXiKWXygCLVzAoX/\nSahE+dMDHTw/s0sxZfLWBiS5gj2nCx4gv/fS4/pahm4B37EXtXq0j8u7pBEBN74=\n=0tG1\n-----END PGP SIGNATURE-----\n", "payload": "tree 3a75c1e1e1c760025332f9af668d3837e657906c\nparent f40baaa27279549ef2fb6561929027e1aa83b648\nparent 2db2327aafe2de16cb2757c4efe779b644099a28\nauthor Nick Cameron <nrc@ncameron.org> 1534976036 +1200\ncommitter GitHub <noreply@github.com> 1534976036 +1200\n\nMerge pull request #2925 from scampi/issue539\n\ndiscard trailing blank comments"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8573df602aaf747f29a1476618725415fe87dc1e", "html_url": "https://github.com/rust-lang/rust/commit/8573df602aaf747f29a1476618725415fe87dc1e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8573df602aaf747f29a1476618725415fe87dc1e/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f40baaa27279549ef2fb6561929027e1aa83b648", "url": "https://api.github.com/repos/rust-lang/rust/commits/f40baaa27279549ef2fb6561929027e1aa83b648", "html_url": "https://github.com/rust-lang/rust/commit/f40baaa27279549ef2fb6561929027e1aa83b648"}, {"sha": "2db2327aafe2de16cb2757c4efe779b644099a28", "url": "https://api.github.com/repos/rust-lang/rust/commits/2db2327aafe2de16cb2757c4efe779b644099a28", "html_url": "https://github.com/rust-lang/rust/commit/2db2327aafe2de16cb2757c4efe779b644099a28"}], "stats": {"total": 107, "additions": 74, "deletions": 33}, "files": [{"sha": "4f2f813166b09d1080cd03fa0635d1804d100316", "filename": "src/comment.rs", "status": "modified", "additions": 55, "deletions": 29, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/8573df602aaf747f29a1476618725415fe87dc1e/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8573df602aaf747f29a1476618725415fe87dc1e/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=8573df602aaf747f29a1476618725415fe87dc1e", "patch": "@@ -96,21 +96,6 @@ impl<'a> CommentStyle<'a> {\n     pub fn to_str_tuplet(&self) -> (&'a str, &'a str, &'a str) {\n         (self.opener(), self.closer(), self.line_start())\n     }\n-\n-    pub fn line_with_same_comment_style(&self, line: &str, normalize_comments: bool) -> bool {\n-        match *self {\n-            CommentStyle::DoubleSlash | CommentStyle::TripleSlash | CommentStyle::Doc => {\n-                line.trim_left().starts_with(self.line_start().trim_left())\n-                    || comment_style(line, normalize_comments) == *self\n-            }\n-            CommentStyle::DoubleBullet | CommentStyle::SingleBullet | CommentStyle::Exclamation => {\n-                line.trim_left().starts_with(self.closer().trim_left())\n-                    || line.trim_left().starts_with(self.line_start().trim_left())\n-                    || comment_style(line, normalize_comments) == *self\n-            }\n-            CommentStyle::Custom(opener) => line.trim_left().starts_with(opener.trim_right()),\n-        }\n-    }\n }\n \n fn comment_style(orig: &str, normalize_comments: bool) -> CommentStyle {\n@@ -273,19 +258,56 @@ fn identify_comment(\n     is_doc_comment: bool,\n ) -> Option<String> {\n     let style = comment_style(orig, false);\n-    let first_group = orig\n-        .lines()\n-        .take_while(|l| style.line_with_same_comment_style(l, false))\n-        .collect::<Vec<_>>()\n-        .join(\"\\n\");\n-    let rest = orig\n-        .lines()\n-        .skip(first_group.lines().count())\n-        .collect::<Vec<_>>()\n-        .join(\"\\n\");\n+    let mut first_group_ending = 0;\n \n+    fn compute_len(orig: &str, line: &str) -> usize {\n+        if orig.len() > line.len() {\n+            if orig.as_bytes()[line.len()] == b'\\r' {\n+                line.len() + 2\n+            } else {\n+                line.len() + 1\n+            }\n+        } else {\n+            line.len()\n+        }\n+    }\n+\n+    match style {\n+        CommentStyle::DoubleSlash | CommentStyle::TripleSlash | CommentStyle::Doc => {\n+            let line_start = style.line_start().trim_left();\n+            for line in orig.lines() {\n+                if line.trim_left().starts_with(line_start) || comment_style(line, false) == style {\n+                    first_group_ending += compute_len(&orig[first_group_ending..], line);\n+                } else {\n+                    break;\n+                }\n+            }\n+        }\n+        CommentStyle::Custom(opener) => {\n+            let trimmed_opener = opener.trim_right();\n+            for line in orig.lines() {\n+                if line.trim_left().starts_with(trimmed_opener) {\n+                    first_group_ending += compute_len(&orig[first_group_ending..], line);\n+                } else {\n+                    break;\n+                }\n+            }\n+        }\n+        // for a block comment, search for the closing symbol\n+        CommentStyle::DoubleBullet | CommentStyle::SingleBullet | CommentStyle::Exclamation => {\n+            let closer = style.closer().trim_left();\n+            for line in orig.lines() {\n+                first_group_ending += compute_len(&orig[first_group_ending..], line);\n+                if line.trim_left().ends_with(closer) {\n+                    break;\n+                }\n+            }\n+        }\n+    }\n+\n+    let (first_group, rest) = orig.split_at(first_group_ending);\n     let first_group_str = rewrite_comment_inner(\n-        &first_group,\n+        first_group,\n         block_style,\n         style,\n         shape,\n@@ -295,7 +317,7 @@ fn identify_comment(\n     if rest.is_empty() {\n         Some(first_group_str)\n     } else {\n-        identify_comment(&rest, block_style, shape, config, is_doc_comment).map(|rest_str| {\n+        identify_comment(rest, block_style, shape, config, is_doc_comment).map(|rest_str| {\n             format!(\n                 \"{}\\n{}{}\",\n                 first_group_str,\n@@ -427,8 +449,12 @@ fn rewrite_comment_inner(\n                 }\n             } else if is_prev_line_multi_line && !line.is_empty() {\n                 result.push(' ')\n-            } else if is_last && !closer.is_empty() && line.is_empty() {\n-                result.push_str(&indent_str);\n+            } else if is_last && line.is_empty() {\n+                // trailing blank lines are unwanted\n+                if !closer.is_empty() {\n+                    result.push_str(&indent_str);\n+                }\n+                break;\n             } else {\n                 result.push_str(&comment_line_separator);\n                 if !has_leading_whitespace && result.ends_with(' ') {"}, {"sha": "a695d3363a6b9939a8d90e0a9f00a860755d7770", "filename": "src/formatting.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8573df602aaf747f29a1476618725415fe87dc1e/src%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8573df602aaf747f29a1476618725415fe87dc1e/src%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fformatting.rs?ref=8573df602aaf747f29a1476618725415fe87dc1e", "patch": "@@ -87,13 +87,13 @@ fn format_project<T: FormatHandler>(\n         if (config.skip_children() && path != main_file) || config.ignore().skip_file(&path) {\n             continue;\n         }\n-        should_emit_verbose(!input_is_stdin, config, || println!(\"Formatting {}\", path));\n+        should_emit_verbose(input_is_stdin, config, || println!(\"Formatting {}\", path));\n         let is_root = path == main_file;\n         context.format_file(path, module, is_root)?;\n     }\n     timer = timer.done_formatting();\n \n-    should_emit_verbose(!input_is_stdin, config, || {\n+    should_emit_verbose(input_is_stdin, config, || {\n         println!(\n             \"Spent {0:.3} secs in the parsing phase, and {1:.3} secs in the formatting phase\",\n             timer.get_parse_time(),\n@@ -611,7 +611,7 @@ fn parse_crate(\n             // Note that if you see this message and want more information,\n             // then run the `parse_crate_mod` function above without\n             // `catch_unwind` so rustfmt panics and you can get a backtrace.\n-            should_emit_verbose(!input_is_stdin, config, || {\n+            should_emit_verbose(input_is_stdin, config, || {\n                 println!(\"The Rust parser panicked\")\n             });\n         }"}, {"sha": "d70682e3bee4686fe6573c1f79ac58c6d33d6676", "filename": "tests/source/issue-539.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8573df602aaf747f29a1476618725415fe87dc1e/tests%2Fsource%2Fissue-539.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8573df602aaf747f29a1476618725415fe87dc1e/tests%2Fsource%2Fissue-539.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-539.rs?ref=8573df602aaf747f29a1476618725415fe87dc1e", "patch": "@@ -0,0 +1,5 @@\n+// rustfmt-normalize_comments: true\n+/*\n+  FIXME (#3300): Should allow items to be anonymous. Right now\n+  we just use dummy names for anon items.\n+ */"}, {"sha": "fd99015ea51ca04f694358b932de785dd3019801", "filename": "tests/source/issue-683.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8573df602aaf747f29a1476618725415fe87dc1e/tests%2Fsource%2Fissue-683.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8573df602aaf747f29a1476618725415fe87dc1e/tests%2Fsource%2Fissue-683.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-683.rs?ref=8573df602aaf747f29a1476618725415fe87dc1e", "patch": "@@ -0,0 +1,5 @@\n+// rustfmt-normalize_comments: true\n+/*\n+ * FIXME (#3300): Should allow items to be anonymous. Right now\n+ * we just use dummy names for anon items.\n+ */"}, {"sha": "bdf2adf0c6437b721428386a2b48149526eb1f72", "filename": "tests/target/doc-comment-with-example.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8573df602aaf747f29a1476618725415fe87dc1e/tests%2Ftarget%2Fdoc-comment-with-example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8573df602aaf747f29a1476618725415fe87dc1e/tests%2Ftarget%2Fdoc-comment-with-example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fdoc-comment-with-example.rs?ref=8573df602aaf747f29a1476618725415fe87dc1e", "patch": "@@ -8,5 +8,4 @@\n /// # #![cfg_attr(not(dox), no_std)]\n /// fn foo() {}\n /// ```\n-///\n fn foo() {}"}, {"sha": "adeb33555fb5c04e8378af52527ff3effae6de12", "filename": "tests/target/issue-539.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8573df602aaf747f29a1476618725415fe87dc1e/tests%2Ftarget%2Fissue-539.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8573df602aaf747f29a1476618725415fe87dc1e/tests%2Ftarget%2Fissue-539.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-539.rs?ref=8573df602aaf747f29a1476618725415fe87dc1e", "patch": "@@ -0,0 +1,3 @@\n+// rustfmt-normalize_comments: true\n+// FIXME (#3300): Should allow items to be anonymous. Right now\n+// we just use dummy names for anon items."}, {"sha": "adeb33555fb5c04e8378af52527ff3effae6de12", "filename": "tests/target/issue-683.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8573df602aaf747f29a1476618725415fe87dc1e/tests%2Ftarget%2Fissue-683.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8573df602aaf747f29a1476618725415fe87dc1e/tests%2Ftarget%2Fissue-683.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-683.rs?ref=8573df602aaf747f29a1476618725415fe87dc1e", "patch": "@@ -0,0 +1,3 @@\n+// rustfmt-normalize_comments: true\n+// FIXME (#3300): Should allow items to be anonymous. Right now\n+// we just use dummy names for anon items."}]}