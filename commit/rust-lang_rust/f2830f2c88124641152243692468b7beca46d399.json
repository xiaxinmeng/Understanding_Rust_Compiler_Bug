{"sha": "f2830f2c88124641152243692468b7beca46d399", "node_id": "C_kwDOAAsO6NoAKGYyODMwZjJjODgxMjQ2NDExNTIyNDM2OTI0NjhiN2JlY2E0NmQzOTk", "commit": {"author": {"name": "mejrs", "email": "", "date": "2022-11-22T18:11:12Z"}, "committer": {"name": "mejrs", "email": "", "date": "2022-11-22T18:11:12Z"}, "message": "Speed up mpsc_stress test", "tree": {"sha": "210385f16d85489424c94e381514bd1b28097334", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/210385f16d85489424c94e381514bd1b28097334"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f2830f2c88124641152243692468b7beca46d399", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f2830f2c88124641152243692468b7beca46d399", "html_url": "https://github.com/rust-lang/rust/commit/f2830f2c88124641152243692468b7beca46d399", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f2830f2c88124641152243692468b7beca46d399/comments", "author": {}, "committer": {}, "parents": [{"sha": "736c675d2ab65bcde6554e1b73340c2dbc27c85a", "url": "https://api.github.com/repos/rust-lang/rust/commits/736c675d2ab65bcde6554e1b73340c2dbc27c85a", "html_url": "https://github.com/rust-lang/rust/commit/736c675d2ab65bcde6554e1b73340c2dbc27c85a"}], "stats": {"total": 67, "additions": 51, "deletions": 16}, "files": [{"sha": "c2e1912deb7aa21828c22b30805e7db532e887e2", "filename": "src/test/ui/threads-sendsync/mpsc_stress.rs", "status": "modified", "additions": 51, "deletions": 16, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/f2830f2c88124641152243692468b7beca46d399/src%2Ftest%2Fui%2Fthreads-sendsync%2Fmpsc_stress.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2830f2c88124641152243692468b7beca46d399/src%2Ftest%2Fui%2Fthreads-sendsync%2Fmpsc_stress.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fthreads-sendsync%2Fmpsc_stress.rs?ref=f2830f2c88124641152243692468b7beca46d399", "patch": "@@ -64,9 +64,11 @@ fn shared_close_sender_does_not_lose_messages_iter() {\n \n #[test]\n fn shared_close_sender_does_not_lose_messages() {\n-    for _ in 0..10000 {\n-        shared_close_sender_does_not_lose_messages_iter();\n-    }\n+    with_minimum_timer_resolution(|| {\n+        for _ in 0..10000 {\n+            shared_close_sender_does_not_lose_messages_iter();\n+        }\n+    });\n }\n \n \n@@ -96,17 +98,11 @@ fn concurrent_recv_timeout_and_upgrade_iter() {\n \n #[test]\n fn concurrent_recv_timeout_and_upgrade() {\n-    // FIXME: fix and enable\n-    if true { return }\n-\n-    // at the moment of writing this test fails like this:\n-    // thread '<unnamed>' panicked at 'assertion failed: `(left == right)`\n-    //  left: `4561387584`,\n-    // right: `0`', libstd/sync/mpsc/shared.rs:253:13\n-\n-    for _ in 0..10000 {\n-        concurrent_recv_timeout_and_upgrade_iter();\n-    }\n+    with_minimum_timer_resolution(|| {\n+        for _ in 0..10000 {\n+            concurrent_recv_timeout_and_upgrade_iter();\n+        }\n+    });\n }\n \n \n@@ -159,7 +155,46 @@ fn concurrent_writes_iter() {\n \n #[test]\n fn concurrent_writes() {\n-    for _ in 0..100 {\n-        concurrent_writes_iter();\n+    with_minimum_timer_resolution(|| {\n+        for _ in 0..100 {\n+            concurrent_writes_iter();\n+        }\n+    });\n+}\n+\n+#[cfg(windows)]\n+pub mod timeapi {\n+    #![allow(non_snake_case)]\n+    use std::ffi::c_uint;\n+\n+    pub const TIMERR_NOERROR: c_uint = 0;\n+\n+    #[link(name = \"winmm\")]\n+    extern \"system\" {\n+        pub fn timeBeginPeriod(uPeriod: c_uint) -> c_uint;\n+        pub fn timeEndPeriod(uPeriod: c_uint) -> c_uint;\n+    }\n+}\n+\n+/// Window's minimum sleep time can be as much as 16ms.\n+// This function evaluates the closure with this resolution\n+// set as low as possible.\n+///\n+/// This takes the above test's duration from 10000*16/1000/60=2.67 minutes to ~16 seconds.\n+fn with_minimum_timer_resolution(f: impl Fn()) {\n+    #[cfg(windows)]\n+    unsafe {\n+        let ret = timeapi::timeBeginPeriod(1);\n+        assert_eq!(ret, timeapi::TIMERR_NOERROR);\n+\n+        f();\n+\n+        let ret = timeapi::timeEndPeriod(1);\n+        assert_eq!(ret, timeapi::TIMERR_NOERROR);\n+    }\n+\n+    #[cfg(not(windows))]\n+    {\n+        f();\n     }\n }"}]}