{"sha": "60f300ab302a9df36c0200e48d4454b5316bc922", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwZjMwMGFiMzAyYTlkZjM2YzAyMDBlNDhkNDQ1NGI1MzE2YmM5MjI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-07-08T00:40:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-07-08T00:40:54Z"}, "message": "Rollup merge of #62462 - JohnTitor:document-while, r=Centril\n\nDocument `while` keyword\n\nThis is a rework of #60761.\nCloses #60736\n\nr? @dtolnay", "tree": {"sha": "0c3247a2d793966e19b8015199020638de700fb5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c3247a2d793966e19b8015199020638de700fb5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/60f300ab302a9df36c0200e48d4454b5316bc922", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdIpEWCRBK7hj4Ov3rIwAAdHIIAAfkxYT1Q7KOXC5pyvRIg1Vu\nD2rGzKLrZc25ekc0AKXTfFtahtxELAAkv0sIFbzn+IUQDtXYSdH/ZQFPp8OKDqHv\nNzki2iqDpKZnr/lPmJuP+FmhTlUHP17oqOpn4qBd+DI5ilggMjLPzRhdqY68iRbJ\nLsBRQkmpjobnH3p1g8WSDwwQEVLjKzifHpItkEgI7lGLnhRj7FYGIkBwCZFlfNSz\n05JwYHF48b60KuVy4a2hEh3Hc1s6nUEAVKAvswEvJFiJvGG0NjClt6FX92gt1rAm\nrk/eC91trFO99rYa7lVkXOyv43ZmxFKMCZiH8twl3yUzip1YV34S4lL+trTSRtc=\n=gnwX\n-----END PGP SIGNATURE-----\n", "payload": "tree 0c3247a2d793966e19b8015199020638de700fb5\nparent 6da30983d626bdb6ca455edb204218c6835d5078\nparent 559c3ec5628c27399f4cc75eb552df3ee01b2daa\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1562546454 +0200\ncommitter GitHub <noreply@github.com> 1562546454 +0200\n\nRollup merge of #62462 - JohnTitor:document-while, r=Centril\n\nDocument `while` keyword\n\nThis is a rework of #60761.\nCloses #60736\n\nr? @dtolnay\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/60f300ab302a9df36c0200e48d4454b5316bc922", "html_url": "https://github.com/rust-lang/rust/commit/60f300ab302a9df36c0200e48d4454b5316bc922", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/60f300ab302a9df36c0200e48d4454b5316bc922/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6da30983d626bdb6ca455edb204218c6835d5078", "url": "https://api.github.com/repos/rust-lang/rust/commits/6da30983d626bdb6ca455edb204218c6835d5078", "html_url": "https://github.com/rust-lang/rust/commit/6da30983d626bdb6ca455edb204218c6835d5078"}, {"sha": "559c3ec5628c27399f4cc75eb552df3ee01b2daa", "url": "https://api.github.com/repos/rust-lang/rust/commits/559c3ec5628c27399f4cc75eb552df3ee01b2daa", "html_url": "https://github.com/rust-lang/rust/commit/559c3ec5628c27399f4cc75eb552df3ee01b2daa"}], "stats": {"total": 65, "additions": 56, "deletions": 9}, "files": [{"sha": "d18fcb4a1da0af6899f64dac118e551deac1925b", "filename": "src/libstd/keyword_docs.rs", "status": "modified", "additions": 56, "deletions": 9, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/60f300ab302a9df36c0200e48d4454b5316bc922/src%2Flibstd%2Fkeyword_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60f300ab302a9df36c0200e48d4454b5316bc922/src%2Flibstd%2Fkeyword_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fkeyword_docs.rs?ref=60f300ab302a9df36c0200e48d4454b5316bc922", "patch": "@@ -608,6 +608,62 @@ mod in_keyword { }\n /// [Reference]: ../reference/statements.html#let-statements\n mod let_keyword { }\n \n+#[doc(keyword = \"while\")]\n+//\n+/// Loop while a condition is upheld.\n+///\n+/// A `while` expression is used for predicate loops. The `while` expression runs the conditional\n+/// expression before running the loop body, then runs the loop body if the conditional\n+/// expression evaluates to `true`, or exits the loop otherwise.\n+///\n+/// ```rust\n+/// let mut counter = 0;\n+///\n+/// while counter < 10 {\n+///     println!(\"{}\", counter);\n+///     counter += 1;\n+/// }\n+/// ```\n+///\n+/// Like the [`for`] expression, we can use `break` and `continue`. A `while` expression\n+/// cannot break with a value and always evaluates to `()` unlike [`loop`].\n+///\n+/// ```rust\n+/// let mut i = 1;\n+///\n+/// while i < 100 {\n+///     i *= 2;\n+///     if i == 64 {\n+///         break; // Exit when `i` is 64.\n+///     }\n+/// }\n+/// ```\n+///\n+/// As `if` expressions have their pattern matching variant in `if let`, so too do `while`\n+/// expressions with `while let`. The `while let` expression matches the pattern against the\n+/// expression, then runs the loop body if pattern matching succeeds, or exits the loop otherwise.\n+/// We can use `break` and `continue` in `while let` expressions just like in `while`.\n+///\n+/// ```rust\n+/// let mut counter = Some(0);\n+///\n+/// while let Some(i) = counter {\n+///     if i == 10 {\n+///         counter = None;\n+///     } else {\n+///         println!(\"{}\", i);\n+///         counter = Some (i + 1);\n+///     }\n+/// }\n+/// ```\n+///\n+/// For more information on `while` and loops in general, see the [reference].\n+///\n+/// [`for`]: keyword.for.html\n+/// [`loop`]: keyword.loop.html\n+/// [reference]: ../reference/expressions/loop-expr.html#predicate-loops\n+mod while_keyword { }\n+\n #[doc(keyword = \"loop\")]\n //\n /// Loop indefinitely.\n@@ -922,15 +978,6 @@ mod use_keyword { }\n /// [not yet complete]: https://github.com/rust-lang/rust/issues/34601\n mod where_keyword { }\n \n-#[doc(keyword = \"while\")]\n-//\n-/// Loop while a condition is upheld.\n-///\n-/// The documentation for this keyword is [not yet complete]. Pull requests welcome!\n-///\n-/// [not yet complete]: https://github.com/rust-lang/rust/issues/34601\n-mod while_keyword { }\n-\n // 2018 Edition keywords\n \n #[unstable(feature = \"async_await\", issue = \"50547\")]"}]}