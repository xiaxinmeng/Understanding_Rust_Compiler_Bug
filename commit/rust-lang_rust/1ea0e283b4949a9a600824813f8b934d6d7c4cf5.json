{"sha": "1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlYTBlMjgzYjQ5NDlhOWE2MDA4MjQ4MTNmOGI5MzRkNmQ3YzRjZjU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-29T00:18:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-29T00:18:45Z"}, "message": "Auto merge of #86704 - JohnTitor:rollup-lnrxo4i, r=JohnTitor\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #86059 (Add new tool to check HTML)\n - #86529 (Add support for OpenSSL 3.0.0)\n - #86657 (Fix `future_prelude_collision` false positive)\n - #86661 (Editon 2021 enables precise capture)\n - #86671 (Turn non_fmt_panic into a future_incompatible edition lint.)\n - #86673 (Make disjoint_capture_migration an edition lint.)\n - #86678 (Fix garbled suggestion for missing lifetime specifier)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "b64fb152eaf993b9cd6a39b9fea94dea83a1a3d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b64fb152eaf993b9cd6a39b9fea94dea83a1a3d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "html_url": "https://github.com/rust-lang/rust/commit/1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18db83fde5192252fa17188ebb13bf48679db01f", "url": "https://api.github.com/repos/rust-lang/rust/commits/18db83fde5192252fa17188ebb13bf48679db01f", "html_url": "https://github.com/rust-lang/rust/commit/18db83fde5192252fa17188ebb13bf48679db01f"}, {"sha": "a89c6be16ecdb9584d2aa921bd094d83ebd3c9c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/a89c6be16ecdb9584d2aa921bd094d83ebd3c9c7", "html_url": "https://github.com/rust-lang/rust/commit/a89c6be16ecdb9584d2aa921bd094d83ebd3c9c7"}], "stats": {"total": 2365, "additions": 945, "deletions": 1420}, "files": [{"sha": "ffc4b036958f8aa791c35b90319f20b4f32f940d", "filename": "Cargo.lock", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1578,6 +1578,13 @@ dependencies = [\n  \"winapi 0.3.9\",\n ]\n \n+[[package]]\n+name = \"html-checker\"\n+version = \"0.1.0\"\n+dependencies = [\n+ \"walkdir\",\n+]\n+\n [[package]]\n name = \"html5ever\"\n version = \"0.25.1\"\n@@ -2433,9 +2440,9 @@ dependencies = [\n \n [[package]]\n name = \"openssl\"\n-version = \"0.10.33\"\n+version = \"0.10.35\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"a61075b62a23fef5a29815de7536d940aa35ce96d18ce0cc5076272db678a577\"\n+checksum = \"549430950c79ae24e6d02e0b7404534ecf311d94cc9f861e9e4020187d13d885\"\n dependencies = [\n  \"bitflags\",\n  \"cfg-if 1.0.0\",\n@@ -2462,9 +2469,9 @@ dependencies = [\n \n [[package]]\n name = \"openssl-sys\"\n-version = \"0.9.61\"\n+version = \"0.9.65\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"313752393519e876837e09e1fa183ddef0be7735868dced3196f4472d536277f\"\n+checksum = \"7a7907e3bfa08bb85105209cdfcb6c63d109f8f6c1ed6ca318fff5c1853fbc1d\"\n dependencies = [\n  \"autocfg\",\n  \"cc\","}, {"sha": "4c00a7dc99ea9ddecee65ef54d11e621f01b1900", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -34,6 +34,7 @@ members = [\n   \"src/tools/unicode-table-generator\",\n   \"src/tools/expand-yaml-anchors\",\n   \"src/tools/jsondocck\",\n+  \"src/tools/html-checker\",\n ]\n \n exclude = ["}, {"sha": "3ea5a3bcc3b98a3b721472e2aa4040b9c8b9d68c", "filename": "compiler/rustc_lint/src/non_fmt_panic.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -4,6 +4,8 @@ use rustc_errors::{pluralize, Applicability};\n use rustc_hir as hir;\n use rustc_middle::ty;\n use rustc_parse_format::{ParseMode, Parser, Piece};\n+use rustc_session::lint::FutureIncompatibilityReason;\n+use rustc_span::edition::Edition;\n use rustc_span::{hygiene, sym, symbol::kw, symbol::SymbolStr, InnerSpan, Span, Symbol};\n \n declare_lint! {\n@@ -30,6 +32,10 @@ declare_lint! {\n     NON_FMT_PANIC,\n     Warn,\n     \"detect single-argument panic!() invocations in which the argument is not a format string\",\n+    @future_incompatible = FutureIncompatibleInfo {\n+        reason: FutureIncompatibilityReason::EditionSemanticsChange(Edition::Edition2021),\n+        explain_reason: false,\n+    };\n     report_in_external_macro\n }\n \n@@ -87,7 +93,8 @@ fn check_panic<'tcx>(cx: &LateContext<'tcx>, f: &'tcx hir::Expr<'tcx>, arg: &'tc\n \n     cx.struct_span_lint(NON_FMT_PANIC, arg_span, |lint| {\n         let mut l = lint.build(\"panic message is not a string literal\");\n-        l.note(\"this is no longer accepted in Rust 2021\");\n+        l.note(\"this usage of panic!() is deprecated; it will be a hard error in Rust 2021\");\n+        l.note(\"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/panic-macro-consistency.html>\");\n         if !span.contains(arg_span) {\n             // No clue where this argument is coming from.\n             l.emit();"}, {"sha": "9bb1109fc646bfbbfefec39db5b6520d6d96f318", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -3002,8 +3002,7 @@ declare_lint! {\n \n declare_lint! {\n     /// The `disjoint_capture_migration` lint detects variables that aren't completely\n-    /// captured when the feature `capture_disjoint_fields` is enabled and it affects the Drop\n-    /// order of at least one path starting at this variable.\n+    /// captured in Rust 2021 and affect the Drop order of at least one path starting at this variable.\n     /// It can also detect when a variable implements a trait, but one of its field does not and\n     /// the field is captured by a closure and used with the assumption that said field implements\n     /// the same trait as the root variable.\n@@ -3040,16 +3039,16 @@ declare_lint! {\n     ///\n     /// ### Explanation\n     ///\n-    /// In the above example `p.y` will be dropped at the end of `f` instead of with `c` if\n-    /// the feature `capture_disjoint_fields` is enabled.\n+    /// In the above example, `p.y` will be dropped at the end of `f` instead of\n+    /// with `c` in Rust 2021.\n     ///\n     /// ### Example of auto-trait\n     ///\n     /// ```rust,compile_fail\n     /// #![deny(disjoint_capture_migration)]\n     /// use std::thread;\n     ///\n-    /// struct Pointer (*mut i32);\n+    /// struct Pointer(*mut i32);\n     /// unsafe impl Send for Pointer {}\n     ///\n     /// fn main() {\n@@ -3065,12 +3064,16 @@ declare_lint! {\n     ///\n     /// ### Explanation\n     ///\n-    /// In the above example `fptr.0` is captured when feature `capture_disjoint_fields` is enabled.\n+    /// In the above example, only `fptr.0` is captured in Rust 2021.\n     /// The field is of type *mut i32 which doesn't implement Send, making the code invalid as the\n     /// field cannot be sent between thread safely.\n     pub DISJOINT_CAPTURE_MIGRATION,\n     Allow,\n-    \"Drop reorder and auto traits error because of `capture_disjoint_fields`\"\n+    \"detects closures affected by Rust 2021 changes\",\n+    @future_incompatible = FutureIncompatibleInfo {\n+        reason: FutureIncompatibilityReason::EditionSemanticsChange(Edition::Edition2021),\n+        explain_reason: false,\n+    };\n }\n \n declare_lint_pass!(UnusedDocComment => [UNUSED_DOC_COMMENTS]);"}, {"sha": "202297152de584312c5b5bb7d0ad9349d652630f", "filename": "compiler/rustc_lint_defs/src/lib.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -145,6 +145,11 @@ pub struct FutureIncompatibleInfo {\n     /// The reason for the lint used by diagnostics to provide\n     /// the right help message\n     pub reason: FutureIncompatibilityReason,\n+    /// Whether to explain the reason to the user.\n+    ///\n+    /// Set to false for lints that already include a more detailed\n+    /// explanation.\n+    pub explain_reason: bool,\n     /// Information about a future breakage, which will\n     /// be emitted in JSON messages to be displayed by Cargo\n     /// for upstream deps\n@@ -185,6 +190,7 @@ impl FutureIncompatibleInfo {\n         FutureIncompatibleInfo {\n             reference: \"\",\n             reason: FutureIncompatibilityReason::FutureReleaseError,\n+            explain_reason: true,\n             future_breakage: None,\n         }\n     }"}, {"sha": "8d0fdf9128a51d70c315e84e0084497ef3291422", "filename": "compiler/rustc_middle/src/lint.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flint.rs?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -398,9 +398,14 @@ pub fn struct_lint_level<'s, 'd>(\n                  it will become a hard error in a future release!\"\n                     .to_owned()\n             };\n-            let citation = format!(\"for more information, see {}\", future_incompatible.reference);\n-            err.warn(&explanation);\n-            err.note(&citation);\n+            if future_incompatible.explain_reason {\n+                err.warn(&explanation);\n+            }\n+            if !future_incompatible.reference.is_empty() {\n+                let citation =\n+                    format!(\"for more information, see {}\", future_incompatible.reference);\n+                err.note(&citation);\n+            }\n         }\n \n         // Finally, run `decorate`. This function is also responsible for emitting the diagnostic."}, {"sha": "bedb8b1c58b82c2db32a0f127b42002b0f74801f", "filename": "compiler/rustc_mir_build/src/build/expr/as_place.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -217,6 +217,10 @@ fn to_upvars_resolved_place_builder<'a, 'tcx>(\n                 ty::ClosureKind::FnOnce => {}\n             }\n \n+            // We won't be building MIR if the closure wasn't local\n+            let closure_hir_id = tcx.hir().local_def_id_to_hir_id(closure_def_id.expect_local());\n+            let closure_span = tcx.hir().span(closure_hir_id);\n+\n             let (capture_index, capture) = if let Some(capture_details) =\n                 find_capture_matching_projections(\n                     typeck_results,\n@@ -226,7 +230,7 @@ fn to_upvars_resolved_place_builder<'a, 'tcx>(\n                 ) {\n                 capture_details\n             } else {\n-                if !tcx.features().capture_disjoint_fields {\n+                if !enable_precise_capture(tcx, closure_span) {\n                     bug!(\n                         \"No associated capture found for {:?}[{:#?}] even though \\\n                             capture_disjoint_fields isn't enabled\",\n@@ -242,8 +246,7 @@ fn to_upvars_resolved_place_builder<'a, 'tcx>(\n                 return Err(from_builder);\n             };\n \n-            let closure_ty = typeck_results\n-                .node_type(tcx.hir().local_def_id_to_hir_id(closure_def_id.expect_local()));\n+            let closure_ty = typeck_results.node_type(closure_hir_id);\n \n             let substs = match closure_ty.kind() {\n                 ty::Closure(_, substs) => ty::UpvarSubsts::Closure(substs),\n@@ -780,3 +783,9 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         }\n     }\n }\n+\n+/// Precise capture is enabled if the feature gate `capture_disjoint_fields` is enabled or if\n+/// user is using Rust Edition 2021 or higher.\n+fn enable_precise_capture(tcx: TyCtxt<'_>, closure_span: Span) -> bool {\n+    tcx.features().capture_disjoint_fields || closure_span.rust_2021()\n+}"}, {"sha": "76979ab50b9e6654b2778b47428670a034e2f522", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1962,6 +1962,8 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n                                 hir::GenericParamKind::Type {\n                                     synthetic: Some(hir::SyntheticTyParamKind::ImplTrait),\n                                     ..\n+                                } | hir::GenericParamKind::Lifetime {\n+                                    kind: hir::LifetimeParamKind::Elided\n                                 }\n                             )\n                         }) {"}, {"sha": "e8748dd062f5334beda61776ecccc603e3e628cb", "filename": "compiler/rustc_typeck/src/check/method/prelude2021.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprelude2021.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprelude2021.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprelude2021.rs?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -57,6 +57,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             {\n                 return;\n             }\n+\n+            // if it's an inherent `self` method (not `&self` or `&mut self`), it will take\n+            // precedence over the `TryInto` impl, and thus won't break in 2021 edition\n+            if pick.autoderefs == 0 && pick.autoref_or_ptr_adjustment.is_none() {\n+                return;\n+            }\n+\n             // Inherent impls only require not relying on autoref and autoderef in order to\n             // ensure that the trait implementation won't be used\n             self.tcx.struct_span_lint_hir("}, {"sha": "7b5b14ae6c831caac17d0e61a1295264462bdde6", "filename": "compiler/rustc_typeck/src/check/upvar.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -495,11 +495,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 |lint| {\n                     let mut diagnostics_builder = lint.build(\n                         format!(\n-                            \"{} affected for closure because of `capture_disjoint_fields`\",\n+                            \"{} will change in Rust 2021\",\n                             reasons\n                         )\n                         .as_str(),\n                     );\n+                    diagnostics_builder.note(\"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\");\n                     let closure_body_span = self.tcx.hir().span(body_id.hir_id);\n                     let (sugg, app) =\n                         match self.tcx.sess.source_map().span_to_snippet(closure_body_span) {"}, {"sha": "b4c5a2abc9c905497a45228030f00a26becbe5d7", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -450,6 +450,7 @@ impl<'a> Builder<'a> {\n                 test::RustdocTheme,\n                 test::RustdocUi,\n                 test::RustdocJson,\n+                test::HtmlCheck,\n                 // Run bootstrap close to the end as it's unlikely to fail\n                 test::Bootstrap,\n                 // Run run-make last, since these won't pass without make on Windows"}, {"sha": "634332df863528f16131bf6474cfd02c482320ed", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -501,8 +501,8 @@ impl Step for Std {\n \n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct Rustc {\n-    stage: u32,\n-    target: TargetSelection,\n+    pub stage: u32,\n+    pub target: TargetSelection,\n }\n \n impl Step for Rustc {"}, {"sha": "64b3ee7c359e7144905ec7aed25ee59de2536049", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 44, "deletions": 1, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -9,7 +9,7 @@ use std::fmt;\n use std::fs;\n use std::iter;\n use std::path::{Path, PathBuf};\n-use std::process::Command;\n+use std::process::{Command, Stdio};\n \n use build_helper::{self, output, t};\n \n@@ -161,6 +161,49 @@ You can skip linkcheck with --exclude src/tools/linkchecker\"\n     }\n }\n \n+fn check_if_tidy_is_installed() -> bool {\n+    Command::new(\"tidy\")\n+        .arg(\"--version\")\n+        .stdout(Stdio::null())\n+        .status()\n+        .map_or(false, |status| status.success())\n+}\n+\n+#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n+pub struct HtmlCheck {\n+    target: TargetSelection,\n+}\n+\n+impl Step for HtmlCheck {\n+    type Output = ();\n+    const DEFAULT: bool = true;\n+    const ONLY_HOSTS: bool = true;\n+\n+    fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n+        let run = run.path(\"src/tools/html-checker\");\n+        run.lazy_default_condition(Box::new(check_if_tidy_is_installed))\n+    }\n+\n+    fn make_run(run: RunConfig<'_>) {\n+        run.builder.ensure(HtmlCheck { target: run.target });\n+    }\n+\n+    fn run(self, builder: &Builder<'_>) {\n+        if !check_if_tidy_is_installed() {\n+            eprintln!(\"not running HTML-check tool because `tidy` is missing\");\n+            eprintln!(\n+                \"Note that `tidy` is not the in-tree `src/tools/tidy` but needs to be installed\"\n+            );\n+            panic!(\"Cannot run html-check tests\");\n+        }\n+        // Ensure that a few different kinds of documentation are available.\n+        builder.default_doc(&[]);\n+        builder.ensure(crate::doc::Rustc { target: self.target, stage: builder.top_stage });\n+\n+        try_run(builder, builder.tool_cmd(Tool::HtmlChecker).arg(builder.doc_out(self.target)));\n+    }\n+}\n+\n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n pub struct Cargotest {\n     stage: u32,"}, {"sha": "aa7fe658df3209cdeb3b7050d1dc0e1d29aff4f3", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -376,6 +376,7 @@ bootstrap_tool!(\n     ExpandYamlAnchors, \"src/tools/expand-yaml-anchors\", \"expand-yaml-anchors\";\n     LintDocs, \"src/tools/lint-docs\", \"lint-docs\";\n     JsonDocCk, \"src/tools/jsondocck\", \"jsondocck\";\n+    HtmlChecker, \"src/tools/html-checker\", \"html-checker\";\n );\n \n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq, Ord, PartialOrd)]"}, {"sha": "ee3cd092f4cdbcec937c6e4ec8f913883cab2708", "filename": "src/ci/docker/host-x86_64/x86_64-gnu-aux/Dockerfile", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-aux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-aux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-aux%2FDockerfile?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -17,7 +17,8 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   libgl1-mesa-dev \\\n   llvm-dev \\\n   libfreetype6-dev \\\n-  libexpat1-dev\n+  libexpat1-dev \\\n+  tidy\n \n COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh"}, {"sha": "faed1761fa45c0fac3751b4fb8ab6ca145871801", "filename": "src/ci/docker/host-x86_64/x86_64-gnu-tools/Dockerfile", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2FDockerfile?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -12,7 +12,8 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   cmake \\\n   libssl-dev \\\n   sudo \\\n-  xz-utils\n+  xz-utils \\\n+  tidy\n \n # Install dependencies for chromium browser\n RUN apt-get install -y \\"}, {"sha": "7a4b21f02236568626f374e5d18b4f4354bfcc24", "filename": "src/test/ui/closures/2229_closure_analysis/arrays-completely-captured.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Farrays-completely-captured.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Farrays-completely-captured.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Farrays-completely-captured.rs?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,7 +1,4 @@\n-#![feature(capture_disjoint_fields)]\n-//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n-//~| `#[warn(incomplete_features)]` on by default\n-//~| see issue #53488 <https://github.com/rust-lang/rust/issues/53488>\n+// edition:2021\n #![feature(rustc_attrs)]\n \n // Ensure that capture analysis results in arrays being completely captured."}, {"sha": "69ec53447b8a6bbf3043f4504b5e7d6b96fa1e3d", "filename": "src/test/ui/closures/2229_closure_analysis/arrays-completely-captured.stderr", "status": "modified", "additions": 6, "deletions": 15, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Farrays-completely-captured.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Farrays-completely-captured.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Farrays-completely-captured.stderr?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,23 +1,14 @@\n error[E0658]: attributes on expressions are experimental\n-  --> $DIR/arrays-completely-captured.rs:11:17\n+  --> $DIR/arrays-completely-captured.rs:8:17\n    |\n LL |     let mut c = #[rustc_capture_analysis]\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #15701 <https://github.com/rust-lang/rust/issues/15701> for more information\n    = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n \n-warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/arrays-completely-captured.rs:1:12\n-   |\n-LL | #![feature(capture_disjoint_fields)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n-\n error: First Pass analysis includes:\n-  --> $DIR/arrays-completely-captured.rs:14:5\n+  --> $DIR/arrays-completely-captured.rs:11:5\n    |\n LL | /     || {\n LL | |\n@@ -29,13 +20,13 @@ LL | |     };\n    | |_____^\n    |\n note: Capturing m[] -> MutBorrow\n-  --> $DIR/arrays-completely-captured.rs:17:9\n+  --> $DIR/arrays-completely-captured.rs:14:9\n    |\n LL |         m[0] += 10;\n    |         ^\n \n error: Min Capture analysis includes:\n-  --> $DIR/arrays-completely-captured.rs:14:5\n+  --> $DIR/arrays-completely-captured.rs:11:5\n    |\n LL | /     || {\n LL | |\n@@ -47,11 +38,11 @@ LL | |     };\n    | |_____^\n    |\n note: Min Capture m[] -> MutBorrow\n-  --> $DIR/arrays-completely-captured.rs:17:9\n+  --> $DIR/arrays-completely-captured.rs:14:9\n    |\n LL |         m[0] += 10;\n    |         ^\n \n-error: aborting due to 3 previous errors; 1 warning emitted\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "02a243e05064659f62d28ff56a25d379b96d6f49", "filename": "src/test/ui/closures/2229_closure_analysis/by_value.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fby_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fby_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fby_value.rs?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,11 +1,7 @@\n+// edition:2021\n+\n // Test that we handle derferences properly when only some of the captures are being moved with\n // `capture_disjoint_fields` enabled.\n-\n-\n-#![feature(capture_disjoint_fields)]\n-//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n-//~| NOTE: `#[warn(incomplete_features)]` on by default\n-//~| NOTE: see issue #53488 <https://github.com/rust-lang/rust/issues/53488>\n #![feature(rustc_attrs)]\n \n #[derive(Debug, Default)]"}, {"sha": "7014ae6a5e6af8aaa61f27af249b859f28808993", "filename": "src/test/ui/closures/2229_closure_analysis/by_value.stderr", "status": "modified", "additions": 9, "deletions": 18, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fby_value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fby_value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fby_value.stderr?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,23 +1,14 @@\n error[E0658]: attributes on expressions are experimental\n-  --> $DIR/by_value.rs:22:13\n+  --> $DIR/by_value.rs:18:13\n    |\n LL |     let c = #[rustc_capture_analysis]\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #15701 <https://github.com/rust-lang/rust/issues/15701> for more information\n    = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n \n-warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/by_value.rs:5:12\n-   |\n-LL | #![feature(capture_disjoint_fields)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n-\n error: First Pass analysis includes:\n-  --> $DIR/by_value.rs:25:5\n+  --> $DIR/by_value.rs:21:5\n    |\n LL | /     || {\n LL | |\n@@ -29,23 +20,23 @@ LL | |     };\n    | |_____^\n    |\n note: Capturing t[(0, 0),Deref,(0, 0)] -> ImmBorrow\n-  --> $DIR/by_value.rs:28:17\n+  --> $DIR/by_value.rs:24:17\n    |\n LL |         let p = t.0.0;\n    |                 ^^^^^\n note: Capturing t[(0, 0)] -> ByValue\n-  --> $DIR/by_value.rs:28:17\n+  --> $DIR/by_value.rs:24:17\n    |\n LL |         let p = t.0.0;\n    |                 ^^^^^\n note: Capturing t[(1, 0)] -> ImmBorrow\n-  --> $DIR/by_value.rs:32:29\n+  --> $DIR/by_value.rs:28:29\n    |\n LL |         println!(\"{} {:?}\", t.1, p);\n    |                             ^^^\n \n error: Min Capture analysis includes:\n-  --> $DIR/by_value.rs:25:5\n+  --> $DIR/by_value.rs:21:5\n    |\n LL | /     || {\n LL | |\n@@ -57,16 +48,16 @@ LL | |     };\n    | |_____^\n    |\n note: Min Capture t[(0, 0)] -> ByValue\n-  --> $DIR/by_value.rs:28:17\n+  --> $DIR/by_value.rs:24:17\n    |\n LL |         let p = t.0.0;\n    |                 ^^^^^\n note: Min Capture t[(1, 0)] -> ImmBorrow\n-  --> $DIR/by_value.rs:32:29\n+  --> $DIR/by_value.rs:28:29\n    |\n LL |         println!(\"{} {:?}\", t.1, p);\n    |                             ^^^\n \n-error: aborting due to 3 previous errors; 1 warning emitted\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "dc53b31768ec5bcb6fa01253b103c0c30db37e93", "filename": "src/test/ui/closures/2229_closure_analysis/capture-analysis-1.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-analysis-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-analysis-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-analysis-1.rs?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,7 +1,5 @@\n-#![feature(capture_disjoint_fields)]\n-//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n-//~| NOTE: `#[warn(incomplete_features)]` on by default\n-//~| NOTE: see issue #53488 <https://github.com/rust-lang/rust/issues/53488>\n+// edition:2021\n+\n #![feature(rustc_attrs)]\n \n #[derive(Debug)]"}, {"sha": "fceafb9c84eeb10a841b65a8533e343392f7b5a3", "filename": "src/test/ui/closures/2229_closure_analysis/capture-analysis-1.stderr", "status": "modified", "additions": 10, "deletions": 19, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-analysis-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-analysis-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-analysis-1.stderr?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,23 +1,14 @@\n error[E0658]: attributes on expressions are experimental\n-  --> $DIR/capture-analysis-1.rs:17:13\n+  --> $DIR/capture-analysis-1.rs:15:13\n    |\n LL |     let c = #[rustc_capture_analysis]\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #15701 <https://github.com/rust-lang/rust/issues/15701> for more information\n    = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n \n-warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/capture-analysis-1.rs:1:12\n-   |\n-LL | #![feature(capture_disjoint_fields)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n-\n error: First Pass analysis includes:\n-  --> $DIR/capture-analysis-1.rs:20:5\n+  --> $DIR/capture-analysis-1.rs:18:5\n    |\n LL | /     || {\n LL | |\n@@ -29,28 +20,28 @@ LL | |     };\n    | |_____^\n    |\n note: Capturing p[] -> ImmBorrow\n-  --> $DIR/capture-analysis-1.rs:23:26\n+  --> $DIR/capture-analysis-1.rs:21:26\n    |\n LL |         println!(\"{:?}\", p);\n    |                          ^\n note: Capturing p[(0, 0)] -> ImmBorrow\n-  --> $DIR/capture-analysis-1.rs:26:26\n+  --> $DIR/capture-analysis-1.rs:24:26\n    |\n LL |         println!(\"{:?}\", p.x);\n    |                          ^^^\n note: Capturing q[(0, 0)] -> ImmBorrow\n-  --> $DIR/capture-analysis-1.rs:29:26\n+  --> $DIR/capture-analysis-1.rs:27:26\n    |\n LL |         println!(\"{:?}\", q.x);\n    |                          ^^^\n note: Capturing q[] -> ImmBorrow\n-  --> $DIR/capture-analysis-1.rs:31:26\n+  --> $DIR/capture-analysis-1.rs:29:26\n    |\n LL |         println!(\"{:?}\", q);\n    |                          ^\n \n error: Min Capture analysis includes:\n-  --> $DIR/capture-analysis-1.rs:20:5\n+  --> $DIR/capture-analysis-1.rs:18:5\n    |\n LL | /     || {\n LL | |\n@@ -62,16 +53,16 @@ LL | |     };\n    | |_____^\n    |\n note: Min Capture p[] -> ImmBorrow\n-  --> $DIR/capture-analysis-1.rs:23:26\n+  --> $DIR/capture-analysis-1.rs:21:26\n    |\n LL |         println!(\"{:?}\", p);\n    |                          ^\n note: Min Capture q[] -> ImmBorrow\n-  --> $DIR/capture-analysis-1.rs:31:26\n+  --> $DIR/capture-analysis-1.rs:29:26\n    |\n LL |         println!(\"{:?}\", q);\n    |                          ^\n \n-error: aborting due to 3 previous errors; 1 warning emitted\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "99d12f8d8f1dbf37ee19c2c5d93f7fb0ab3173d7", "filename": "src/test/ui/closures/2229_closure_analysis/capture-analysis-2.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-analysis-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-analysis-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-analysis-2.rs?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,7 +1,5 @@\n-#![feature(capture_disjoint_fields)]\n-//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n-//~| NOTE: `#[warn(incomplete_features)]` on by default\n-//~| NOTE: see issue #53488 <https://github.com/rust-lang/rust/issues/53488>\n+// edition:2021\n+\n #![feature(rustc_attrs)]\n \n #[derive(Debug)]"}, {"sha": "cb44ca2665293bbaa6a16e6eb51e3a4919dff107", "filename": "src/test/ui/closures/2229_closure_analysis/capture-analysis-2.stderr", "status": "modified", "additions": 7, "deletions": 16, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-analysis-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-analysis-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-analysis-2.stderr?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,23 +1,14 @@\n error[E0658]: attributes on expressions are experimental\n-  --> $DIR/capture-analysis-2.rs:16:13\n+  --> $DIR/capture-analysis-2.rs:14:13\n    |\n LL |     let c = #[rustc_capture_analysis]\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #15701 <https://github.com/rust-lang/rust/issues/15701> for more information\n    = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n \n-warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/capture-analysis-2.rs:1:12\n-   |\n-LL | #![feature(capture_disjoint_fields)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n-\n error: First Pass analysis includes:\n-  --> $DIR/capture-analysis-2.rs:19:5\n+  --> $DIR/capture-analysis-2.rs:17:5\n    |\n LL | /     || {\n LL | |\n@@ -29,18 +20,18 @@ LL | |     };\n    | |_____^\n    |\n note: Capturing p[(0, 0)] -> ByValue\n-  --> $DIR/capture-analysis-2.rs:22:18\n+  --> $DIR/capture-analysis-2.rs:20:18\n    |\n LL |         let _x = p.x;\n    |                  ^^^\n note: Capturing p[] -> ImmBorrow\n-  --> $DIR/capture-analysis-2.rs:25:26\n+  --> $DIR/capture-analysis-2.rs:23:26\n    |\n LL |         println!(\"{:?}\", p);\n    |                          ^\n \n error: Min Capture analysis includes:\n-  --> $DIR/capture-analysis-2.rs:19:5\n+  --> $DIR/capture-analysis-2.rs:17:5\n    |\n LL | /     || {\n LL | |\n@@ -52,14 +43,14 @@ LL | |     };\n    | |_____^\n    |\n note: Min Capture p[] -> ByValue\n-  --> $DIR/capture-analysis-2.rs:22:18\n+  --> $DIR/capture-analysis-2.rs:20:18\n    |\n LL |         let _x = p.x;\n    |                  ^^^ p[] captured as ByValue here\n ...\n LL |         println!(\"{:?}\", p);\n    |                          ^ p[] used here\n \n-error: aborting due to 3 previous errors; 1 warning emitted\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "3f337097dbd2fb70ed33cc1091f3748ba0be81c4", "filename": "src/test/ui/closures/2229_closure_analysis/capture-analysis-3.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-analysis-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-analysis-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-analysis-3.rs?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,7 +1,5 @@\n-#![feature(capture_disjoint_fields)]\n-//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n-//~| NOTE: `#[warn(incomplete_features)]` on by default\n-//~| NOTE: see issue #53488 <https://github.com/rust-lang/rust/issues/53488>\n+// edition:2021\n+\n #![feature(rustc_attrs)]\n \n #[derive(Debug)]"}, {"sha": "71e7bdc354fb2c2de771adfbf71ecb1560bf5e63", "filename": "src/test/ui/closures/2229_closure_analysis/capture-analysis-3.stderr", "status": "modified", "additions": 7, "deletions": 16, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-analysis-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-analysis-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-analysis-3.stderr?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,23 +1,14 @@\n error[E0658]: attributes on expressions are experimental\n-  --> $DIR/capture-analysis-3.rs:21:13\n+  --> $DIR/capture-analysis-3.rs:19:13\n    |\n LL |     let c = #[rustc_capture_analysis]\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #15701 <https://github.com/rust-lang/rust/issues/15701> for more information\n    = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n \n-warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/capture-analysis-3.rs:1:12\n-   |\n-LL | #![feature(capture_disjoint_fields)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n-\n error: First Pass analysis includes:\n-  --> $DIR/capture-analysis-3.rs:24:5\n+  --> $DIR/capture-analysis-3.rs:22:5\n    |\n LL | /     || {\n LL | |\n@@ -29,18 +20,18 @@ LL | |     };\n    | |_____^\n    |\n note: Capturing a[(0, 0),(0, 0)] -> ByValue\n-  --> $DIR/capture-analysis-3.rs:27:18\n+  --> $DIR/capture-analysis-3.rs:25:18\n    |\n LL |         let _x = a.b.c;\n    |                  ^^^^^\n note: Capturing a[(0, 0)] -> ImmBorrow\n-  --> $DIR/capture-analysis-3.rs:30:26\n+  --> $DIR/capture-analysis-3.rs:28:26\n    |\n LL |         println!(\"{:?}\", a.b);\n    |                          ^^^\n \n error: Min Capture analysis includes:\n-  --> $DIR/capture-analysis-3.rs:24:5\n+  --> $DIR/capture-analysis-3.rs:22:5\n    |\n LL | /     || {\n LL | |\n@@ -52,14 +43,14 @@ LL | |     };\n    | |_____^\n    |\n note: Min Capture a[(0, 0)] -> ByValue\n-  --> $DIR/capture-analysis-3.rs:27:18\n+  --> $DIR/capture-analysis-3.rs:25:18\n    |\n LL |         let _x = a.b.c;\n    |                  ^^^^^ a[(0, 0)] captured as ByValue here\n ...\n LL |         println!(\"{:?}\", a.b);\n    |                          ^^^ a[(0, 0)] used here\n \n-error: aborting due to 3 previous errors; 1 warning emitted\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "bc46ec997360bba5c117742bd97b8d5de320f98c", "filename": "src/test/ui/closures/2229_closure_analysis/capture-analysis-4.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-analysis-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-analysis-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-analysis-4.rs?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,7 +1,5 @@\n-#![feature(capture_disjoint_fields)]\n-//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n-//~| NOTE: `#[warn(incomplete_features)]` on by default\n-//~| NOTE: see issue #53488 <https://github.com/rust-lang/rust/issues/53488>\n+// edition:2021\n+\n #![feature(rustc_attrs)]\n \n #[derive(Debug)]"}, {"sha": "7e6e625bc7d489f5ac5e0d26a1aee1c118fab8de", "filename": "src/test/ui/closures/2229_closure_analysis/capture-analysis-4.stderr", "status": "modified", "additions": 7, "deletions": 16, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-analysis-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-analysis-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-analysis-4.stderr?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,23 +1,14 @@\n error[E0658]: attributes on expressions are experimental\n-  --> $DIR/capture-analysis-4.rs:21:13\n+  --> $DIR/capture-analysis-4.rs:19:13\n    |\n LL |     let c = #[rustc_capture_analysis]\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #15701 <https://github.com/rust-lang/rust/issues/15701> for more information\n    = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n \n-warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/capture-analysis-4.rs:1:12\n-   |\n-LL | #![feature(capture_disjoint_fields)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n-\n error: First Pass analysis includes:\n-  --> $DIR/capture-analysis-4.rs:24:5\n+  --> $DIR/capture-analysis-4.rs:22:5\n    |\n LL | /     || {\n LL | |\n@@ -29,18 +20,18 @@ LL | |     };\n    | |_____^\n    |\n note: Capturing a[(0, 0)] -> ByValue\n-  --> $DIR/capture-analysis-4.rs:27:18\n+  --> $DIR/capture-analysis-4.rs:25:18\n    |\n LL |         let _x = a.b;\n    |                  ^^^\n note: Capturing a[(0, 0),(0, 0)] -> ImmBorrow\n-  --> $DIR/capture-analysis-4.rs:30:26\n+  --> $DIR/capture-analysis-4.rs:28:26\n    |\n LL |         println!(\"{:?}\", a.b.c);\n    |                          ^^^^^\n \n error: Min Capture analysis includes:\n-  --> $DIR/capture-analysis-4.rs:24:5\n+  --> $DIR/capture-analysis-4.rs:22:5\n    |\n LL | /     || {\n LL | |\n@@ -52,11 +43,11 @@ LL | |     };\n    | |_____^\n    |\n note: Min Capture a[(0, 0)] -> ByValue\n-  --> $DIR/capture-analysis-4.rs:27:18\n+  --> $DIR/capture-analysis-4.rs:25:18\n    |\n LL |         let _x = a.b;\n    |                  ^^^\n \n-error: aborting due to 3 previous errors; 1 warning emitted\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "6fd15155331607e2baa9856e98251f6eb881d7e4", "filename": "src/test/ui/closures/2229_closure_analysis/capture-disjoint-field-struct.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-disjoint-field-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-disjoint-field-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-disjoint-field-struct.rs?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,9 +1,5 @@\n-// FIXME(arora-aman) add run-pass once 2229 is implemented\n+// edition:2021\n \n-#![feature(capture_disjoint_fields)]\n-//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n-//~| NOTE: `#[warn(incomplete_features)]` on by default\n-//~| NOTE: see issue #53488 <https://github.com/rust-lang/rust/issues/53488>\n #![feature(rustc_attrs)]\n \n struct Point {"}, {"sha": "0f64ecf3a0ccb7bc055ada5be9ab91cf05fa4cb9", "filename": "src/test/ui/closures/2229_closure_analysis/capture-disjoint-field-struct.stderr", "status": "modified", "additions": 6, "deletions": 15, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-disjoint-field-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-disjoint-field-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-disjoint-field-struct.stderr?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,23 +1,14 @@\n error[E0658]: attributes on expressions are experimental\n-  --> $DIR/capture-disjoint-field-struct.rs:17:13\n+  --> $DIR/capture-disjoint-field-struct.rs:13:13\n    |\n LL |     let c = #[rustc_capture_analysis]\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #15701 <https://github.com/rust-lang/rust/issues/15701> for more information\n    = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n \n-warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/capture-disjoint-field-struct.rs:3:12\n-   |\n-LL | #![feature(capture_disjoint_fields)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n-\n error: First Pass analysis includes:\n-  --> $DIR/capture-disjoint-field-struct.rs:20:5\n+  --> $DIR/capture-disjoint-field-struct.rs:16:5\n    |\n LL | /     || {\n LL | |\n@@ -29,13 +20,13 @@ LL | |     };\n    | |_____^\n    |\n note: Capturing p[(0, 0)] -> ImmBorrow\n-  --> $DIR/capture-disjoint-field-struct.rs:23:24\n+  --> $DIR/capture-disjoint-field-struct.rs:19:24\n    |\n LL |         println!(\"{}\", p.x);\n    |                        ^^^\n \n error: Min Capture analysis includes:\n-  --> $DIR/capture-disjoint-field-struct.rs:20:5\n+  --> $DIR/capture-disjoint-field-struct.rs:16:5\n    |\n LL | /     || {\n LL | |\n@@ -47,11 +38,11 @@ LL | |     };\n    | |_____^\n    |\n note: Min Capture p[(0, 0)] -> ImmBorrow\n-  --> $DIR/capture-disjoint-field-struct.rs:23:24\n+  --> $DIR/capture-disjoint-field-struct.rs:19:24\n    |\n LL |         println!(\"{}\", p.x);\n    |                        ^^^\n \n-error: aborting due to 3 previous errors; 1 warning emitted\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "8d3bb3262fb2b940821ae98f18d1edb07718a0cd", "filename": "src/test/ui/closures/2229_closure_analysis/capture-disjoint-field-tuple.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-disjoint-field-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-disjoint-field-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-disjoint-field-tuple.rs?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,9 +1,5 @@\n-// FIXME(arora-aman) add run-pass once 2229 is implemented\n+// edition:2021\n \n-#![feature(capture_disjoint_fields)]\n-//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n-//~| NOTE: `#[warn(incomplete_features)]` on by default\n-//~| NOTE: see issue #53488 <https://github.com/rust-lang/rust/issues/53488>\n #![feature(rustc_attrs)]\n \n fn main() {"}, {"sha": "a8ca9622a6a68b8a7a47e7513eb9bd455d4169da", "filename": "src/test/ui/closures/2229_closure_analysis/capture-disjoint-field-tuple.stderr", "status": "modified", "additions": 6, "deletions": 15, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-disjoint-field-tuple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-disjoint-field-tuple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-disjoint-field-tuple.stderr?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,23 +1,14 @@\n error[E0658]: attributes on expressions are experimental\n-  --> $DIR/capture-disjoint-field-tuple.rs:12:13\n+  --> $DIR/capture-disjoint-field-tuple.rs:8:13\n    |\n LL |     let c = #[rustc_capture_analysis]\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #15701 <https://github.com/rust-lang/rust/issues/15701> for more information\n    = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n \n-warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/capture-disjoint-field-tuple.rs:3:12\n-   |\n-LL | #![feature(capture_disjoint_fields)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n-\n error: First Pass analysis includes:\n-  --> $DIR/capture-disjoint-field-tuple.rs:15:5\n+  --> $DIR/capture-disjoint-field-tuple.rs:11:5\n    |\n LL | /     || {\n LL | |\n@@ -29,13 +20,13 @@ LL | |     };\n    | |_____^\n    |\n note: Capturing t[(0, 0)] -> ImmBorrow\n-  --> $DIR/capture-disjoint-field-tuple.rs:18:24\n+  --> $DIR/capture-disjoint-field-tuple.rs:14:24\n    |\n LL |         println!(\"{}\", t.0);\n    |                        ^^^\n \n error: Min Capture analysis includes:\n-  --> $DIR/capture-disjoint-field-tuple.rs:15:5\n+  --> $DIR/capture-disjoint-field-tuple.rs:11:5\n    |\n LL | /     || {\n LL | |\n@@ -47,11 +38,11 @@ LL | |     };\n    | |_____^\n    |\n note: Min Capture t[(0, 0)] -> ImmBorrow\n-  --> $DIR/capture-disjoint-field-tuple.rs:18:24\n+  --> $DIR/capture-disjoint-field-tuple.rs:14:24\n    |\n LL |         println!(\"{}\", t.0);\n    |                        ^^^\n \n-error: aborting due to 3 previous errors; 1 warning emitted\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "322ae99b861388b95a333ca796fbfccb9d2e4b14", "filename": "src/test/ui/closures/2229_closure_analysis/capture-enums.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-enums.rs?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,7 +1,5 @@\n-#![feature(capture_disjoint_fields)]\n-//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n-//~| NOTE: `#[warn(incomplete_features)]` on by default\n-//~| NOTE: see issue #53488 <https://github.com/rust-lang/rust/issues/53488>\n+// edition:2021\n+\n #![feature(rustc_attrs)]\n \n enum Info {"}, {"sha": "8a6ba8444a80a4492001820daa440e265589e029", "filename": "src/test/ui/closures/2229_closure_analysis/capture-enums.stderr", "status": "modified", "additions": 15, "deletions": 24, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-enums.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-enums.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-enums.stderr?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: attributes on expressions are experimental\n-  --> $DIR/capture-enums.rs:18:13\n+  --> $DIR/capture-enums.rs:16:13\n    |\n LL |     let c = #[rustc_capture_analysis]\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -8,25 +8,16 @@ LL |     let c = #[rustc_capture_analysis]\n    = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n \n error[E0658]: attributes on expressions are experimental\n-  --> $DIR/capture-enums.rs:49:13\n+  --> $DIR/capture-enums.rs:47:13\n    |\n LL |     let c = #[rustc_capture_analysis]\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #15701 <https://github.com/rust-lang/rust/issues/15701> for more information\n    = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n \n-warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/capture-enums.rs:1:12\n-   |\n-LL | #![feature(capture_disjoint_fields)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n-\n error: First Pass analysis includes:\n-  --> $DIR/capture-enums.rs:21:5\n+  --> $DIR/capture-enums.rs:19:5\n    |\n LL | /     || {\n LL | |\n@@ -38,28 +29,28 @@ LL | |     };\n    | |_____^\n    |\n note: Capturing point[] -> ImmBorrow\n-  --> $DIR/capture-enums.rs:24:41\n+  --> $DIR/capture-enums.rs:22:41\n    |\n LL |         if let Info::Point(_, _, str) = point {\n    |                                         ^^^^^\n note: Capturing point[(2, 0)] -> ByValue\n-  --> $DIR/capture-enums.rs:24:41\n+  --> $DIR/capture-enums.rs:22:41\n    |\n LL |         if let Info::Point(_, _, str) = point {\n    |                                         ^^^^^\n note: Capturing meta[] -> ImmBorrow\n-  --> $DIR/capture-enums.rs:31:35\n+  --> $DIR/capture-enums.rs:29:35\n    |\n LL |         if let Info::Meta(_, v) = meta {\n    |                                   ^^^^\n note: Capturing meta[(1, 1)] -> ByValue\n-  --> $DIR/capture-enums.rs:31:35\n+  --> $DIR/capture-enums.rs:29:35\n    |\n LL |         if let Info::Meta(_, v) = meta {\n    |                                   ^^^^\n \n error: Min Capture analysis includes:\n-  --> $DIR/capture-enums.rs:21:5\n+  --> $DIR/capture-enums.rs:19:5\n    |\n LL | /     || {\n LL | |\n@@ -71,18 +62,18 @@ LL | |     };\n    | |_____^\n    |\n note: Min Capture point[] -> ByValue\n-  --> $DIR/capture-enums.rs:24:41\n+  --> $DIR/capture-enums.rs:22:41\n    |\n LL |         if let Info::Point(_, _, str) = point {\n    |                                         ^^^^^\n note: Min Capture meta[] -> ByValue\n-  --> $DIR/capture-enums.rs:31:35\n+  --> $DIR/capture-enums.rs:29:35\n    |\n LL |         if let Info::Meta(_, v) = meta {\n    |                                   ^^^^\n \n error: First Pass analysis includes:\n-  --> $DIR/capture-enums.rs:52:5\n+  --> $DIR/capture-enums.rs:50:5\n    |\n LL | /     || {\n LL | |\n@@ -94,13 +85,13 @@ LL | |     };\n    | |_____^\n    |\n note: Capturing point[(2, 0)] -> ByValue\n-  --> $DIR/capture-enums.rs:55:47\n+  --> $DIR/capture-enums.rs:53:47\n    |\n LL |         let SingleVariant::Point(_, _, str) = point;\n    |                                               ^^^^^\n \n error: Min Capture analysis includes:\n-  --> $DIR/capture-enums.rs:52:5\n+  --> $DIR/capture-enums.rs:50:5\n    |\n LL | /     || {\n LL | |\n@@ -112,11 +103,11 @@ LL | |     };\n    | |_____^\n    |\n note: Min Capture point[(2, 0)] -> ByValue\n-  --> $DIR/capture-enums.rs:55:47\n+  --> $DIR/capture-enums.rs:53:47\n    |\n LL |         let SingleVariant::Point(_, _, str) = point;\n    |                                               ^^^^^\n \n-error: aborting due to 6 previous errors; 1 warning emitted\n+error: aborting due to 6 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "3341166e22b92bf3e38db923f33e8ca9c4313911", "filename": "src/test/ui/closures/2229_closure_analysis/deep-multilevel-struct.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdeep-multilevel-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdeep-multilevel-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdeep-multilevel-struct.rs?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,7 +1,5 @@\n-#![feature(capture_disjoint_fields)]\n-//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n-//~| NOTE: `#[warn(incomplete_features)]` on by default\n-//~| NOTE: see issue #53488 <https://github.com/rust-lang/rust/issues/53488>\n+// edition:2021\n+\n #![feature(rustc_attrs)]\n #![allow(unused)]\n "}, {"sha": "29e1af0431ec6b32f59b048bf9e127e0b0a8c75a", "filename": "src/test/ui/closures/2229_closure_analysis/deep-multilevel-struct.stderr", "status": "modified", "additions": 8, "deletions": 17, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdeep-multilevel-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdeep-multilevel-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdeep-multilevel-struct.stderr?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,23 +1,14 @@\n error[E0658]: attributes on expressions are experimental\n-  --> $DIR/deep-multilevel-struct.rs:36:13\n+  --> $DIR/deep-multilevel-struct.rs:34:13\n    |\n LL |     let c = #[rustc_capture_analysis]\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #15701 <https://github.com/rust-lang/rust/issues/15701> for more information\n    = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n \n-warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/deep-multilevel-struct.rs:1:12\n-   |\n-LL | #![feature(capture_disjoint_fields)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n-\n error: First Pass analysis includes:\n-  --> $DIR/deep-multilevel-struct.rs:39:5\n+  --> $DIR/deep-multilevel-struct.rs:37:5\n    |\n LL | /     || {\n LL | |\n@@ -29,23 +20,23 @@ LL | |     };\n    | |_____^\n    |\n note: Capturing p[(0, 0),(0, 0),(0, 0)] -> ImmBorrow\n-  --> $DIR/deep-multilevel-struct.rs:42:18\n+  --> $DIR/deep-multilevel-struct.rs:40:18\n    |\n LL |         let x = &p.a.p.x;\n    |                  ^^^^^^^\n note: Capturing p[(1, 0),(1, 0),(1, 0)] -> MutBorrow\n-  --> $DIR/deep-multilevel-struct.rs:44:9\n+  --> $DIR/deep-multilevel-struct.rs:42:9\n    |\n LL |         p.b.q.y = 9;\n    |         ^^^^^^^\n note: Capturing p[] -> ImmBorrow\n-  --> $DIR/deep-multilevel-struct.rs:47:26\n+  --> $DIR/deep-multilevel-struct.rs:45:26\n    |\n LL |         println!(\"{:?}\", p);\n    |                          ^\n \n error: Min Capture analysis includes:\n-  --> $DIR/deep-multilevel-struct.rs:39:5\n+  --> $DIR/deep-multilevel-struct.rs:37:5\n    |\n LL | /     || {\n LL | |\n@@ -57,14 +48,14 @@ LL | |     };\n    | |_____^\n    |\n note: Min Capture p[] -> MutBorrow\n-  --> $DIR/deep-multilevel-struct.rs:44:9\n+  --> $DIR/deep-multilevel-struct.rs:42:9\n    |\n LL |         p.b.q.y = 9;\n    |         ^^^^^^^ p[] captured as MutBorrow here\n ...\n LL |         println!(\"{:?}\", p);\n    |                          ^ p[] used here\n \n-error: aborting due to 3 previous errors; 1 warning emitted\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "34b0132f3cb0b9038a338f998e27b1f20cabd58c", "filename": "src/test/ui/closures/2229_closure_analysis/deep-multilevel-tuple.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdeep-multilevel-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdeep-multilevel-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdeep-multilevel-tuple.rs?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,7 +1,4 @@\n-#![feature(capture_disjoint_fields)]\n-//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n-//~| NOTE: `#[warn(incomplete_features)]` on by default\n-//~| NOTE: see issue #53488 <https://github.com/rust-lang/rust/issues/53488>\n+// edition:2021\n #![feature(rustc_attrs)]\n #![allow(unused)]\n "}, {"sha": "e917516765c8fd731f7e1873947171d16a2a6d76", "filename": "src/test/ui/closures/2229_closure_analysis/deep-multilevel-tuple.stderr", "status": "modified", "additions": 8, "deletions": 17, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdeep-multilevel-tuple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdeep-multilevel-tuple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdeep-multilevel-tuple.stderr?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,23 +1,14 @@\n error[E0658]: attributes on expressions are experimental\n-  --> $DIR/deep-multilevel-tuple.rs:11:13\n+  --> $DIR/deep-multilevel-tuple.rs:8:13\n    |\n LL |     let c = #[rustc_capture_analysis]\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #15701 <https://github.com/rust-lang/rust/issues/15701> for more information\n    = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n \n-warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/deep-multilevel-tuple.rs:1:12\n-   |\n-LL | #![feature(capture_disjoint_fields)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n-\n error: First Pass analysis includes:\n-  --> $DIR/deep-multilevel-tuple.rs:14:5\n+  --> $DIR/deep-multilevel-tuple.rs:11:5\n    |\n LL | /     || {\n LL | |\n@@ -29,23 +20,23 @@ LL | |     };\n    | |_____^\n    |\n note: Capturing t[(0, 0),(0, 0),(0, 0)] -> ImmBorrow\n-  --> $DIR/deep-multilevel-tuple.rs:17:18\n+  --> $DIR/deep-multilevel-tuple.rs:14:18\n    |\n LL |         let x = &t.0.0.0;\n    |                  ^^^^^^^\n note: Capturing t[(1, 0),(1, 0),(1, 0)] -> MutBorrow\n-  --> $DIR/deep-multilevel-tuple.rs:19:9\n+  --> $DIR/deep-multilevel-tuple.rs:16:9\n    |\n LL |         t.1.1.1 = 9;\n    |         ^^^^^^^\n note: Capturing t[] -> ImmBorrow\n-  --> $DIR/deep-multilevel-tuple.rs:22:26\n+  --> $DIR/deep-multilevel-tuple.rs:19:26\n    |\n LL |         println!(\"{:?}\", t);\n    |                          ^\n \n error: Min Capture analysis includes:\n-  --> $DIR/deep-multilevel-tuple.rs:14:5\n+  --> $DIR/deep-multilevel-tuple.rs:11:5\n    |\n LL | /     || {\n LL | |\n@@ -57,14 +48,14 @@ LL | |     };\n    | |_____^\n    |\n note: Min Capture t[] -> MutBorrow\n-  --> $DIR/deep-multilevel-tuple.rs:19:9\n+  --> $DIR/deep-multilevel-tuple.rs:16:9\n    |\n LL |         t.1.1.1 = 9;\n    |         ^^^^^^^ t[] captured as MutBorrow here\n ...\n LL |         println!(\"{:?}\", t);\n    |                          ^ t[] used here\n \n-error: aborting due to 3 previous errors; 1 warning emitted\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "9918802334ecc4d0bbe96faa6e19413f4d86fb70", "filename": "src/test/ui/closures/2229_closure_analysis/destructure_patterns.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdestructure_patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdestructure_patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdestructure_patterns.rs?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,7 +1,5 @@\n-#![feature(capture_disjoint_fields)]\n-//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n-//~| NOTE: `#[warn(incomplete_features)]` on by default\n-//~| NOTE: see issue #53488 <https://github.com/rust-lang/rust/issues/53488>\n+// edition:2021\n+\n #![feature(rustc_attrs)]\n \n // Test to ensure Index projections are handled properly during capture analysis"}, {"sha": "b53adb5248161ef23cffb10c4cbd3101a0212d90", "filename": "src/test/ui/closures/2229_closure_analysis/destructure_patterns.stderr", "status": "modified", "additions": 22, "deletions": 31, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdestructure_patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdestructure_patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdestructure_patterns.stderr?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: attributes on expressions are experimental\n-  --> $DIR/destructure_patterns.rs:12:13\n+  --> $DIR/destructure_patterns.rs:10:13\n    |\n LL |     let c = #[rustc_capture_analysis]\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -8,7 +8,7 @@ LL |     let c = #[rustc_capture_analysis]\n    = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n \n error[E0658]: attributes on expressions are experimental\n-  --> $DIR/destructure_patterns.rs:38:13\n+  --> $DIR/destructure_patterns.rs:36:13\n    |\n LL |     let c = #[rustc_capture_analysis]\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -17,25 +17,16 @@ LL |     let c = #[rustc_capture_analysis]\n    = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n \n error[E0658]: attributes on expressions are experimental\n-  --> $DIR/destructure_patterns.rs:58:13\n+  --> $DIR/destructure_patterns.rs:56:13\n    |\n LL |     let c = #[rustc_capture_analysis]\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #15701 <https://github.com/rust-lang/rust/issues/15701> for more information\n    = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n \n-warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/destructure_patterns.rs:1:12\n-   |\n-LL | #![feature(capture_disjoint_fields)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n-\n error: First Pass analysis includes:\n-  --> $DIR/destructure_patterns.rs:15:5\n+  --> $DIR/destructure_patterns.rs:13:5\n    |\n LL | /     || {\n LL | |\n@@ -47,13 +38,13 @@ LL | |     };\n    | |_____^\n    |\n note: Capturing arr[Index] -> ByValue\n-  --> $DIR/destructure_patterns.rs:18:29\n+  --> $DIR/destructure_patterns.rs:16:29\n    |\n LL |         let [a, b, .., e] = arr;\n    |                             ^^^\n \n error: Min Capture analysis includes:\n-  --> $DIR/destructure_patterns.rs:15:5\n+  --> $DIR/destructure_patterns.rs:13:5\n    |\n LL | /     || {\n LL | |\n@@ -65,13 +56,13 @@ LL | |     };\n    | |_____^\n    |\n note: Min Capture arr[] -> ByValue\n-  --> $DIR/destructure_patterns.rs:18:29\n+  --> $DIR/destructure_patterns.rs:16:29\n    |\n LL |         let [a, b, .., e] = arr;\n    |                             ^^^\n \n error: First Pass analysis includes:\n-  --> $DIR/destructure_patterns.rs:41:5\n+  --> $DIR/destructure_patterns.rs:39:5\n    |\n LL | /     || {\n LL | |\n@@ -83,18 +74,18 @@ LL | |     };\n    | |_____^\n    |\n note: Capturing p[(0, 0)] -> MutBorrow\n-  --> $DIR/destructure_patterns.rs:44:58\n+  --> $DIR/destructure_patterns.rs:42:58\n    |\n LL |         let Point { x: ref mut x, y: _, id: moved_id } = p;\n    |                                                          ^\n note: Capturing p[(2, 0)] -> ByValue\n-  --> $DIR/destructure_patterns.rs:44:58\n+  --> $DIR/destructure_patterns.rs:42:58\n    |\n LL |         let Point { x: ref mut x, y: _, id: moved_id } = p;\n    |                                                          ^\n \n error: Min Capture analysis includes:\n-  --> $DIR/destructure_patterns.rs:41:5\n+  --> $DIR/destructure_patterns.rs:39:5\n    |\n LL | /     || {\n LL | |\n@@ -106,18 +97,18 @@ LL | |     };\n    | |_____^\n    |\n note: Min Capture p[(0, 0)] -> MutBorrow\n-  --> $DIR/destructure_patterns.rs:44:58\n+  --> $DIR/destructure_patterns.rs:42:58\n    |\n LL |         let Point { x: ref mut x, y: _, id: moved_id } = p;\n    |                                                          ^\n note: Min Capture p[(2, 0)] -> ByValue\n-  --> $DIR/destructure_patterns.rs:44:58\n+  --> $DIR/destructure_patterns.rs:42:58\n    |\n LL |         let Point { x: ref mut x, y: _, id: moved_id } = p;\n    |                                                          ^\n \n error: First Pass analysis includes:\n-  --> $DIR/destructure_patterns.rs:61:5\n+  --> $DIR/destructure_patterns.rs:59:5\n    |\n LL | /     || {\n LL | |\n@@ -129,23 +120,23 @@ LL | |     };\n    | |_____^\n    |\n note: Capturing t[(0, 0)] -> MutBorrow\n-  --> $DIR/destructure_patterns.rs:64:54\n+  --> $DIR/destructure_patterns.rs:62:54\n    |\n LL |         let (ref mut x, ref ref_str, (moved_s, _)) = t;\n    |                                                      ^\n note: Capturing t[(1, 0)] -> ImmBorrow\n-  --> $DIR/destructure_patterns.rs:64:54\n+  --> $DIR/destructure_patterns.rs:62:54\n    |\n LL |         let (ref mut x, ref ref_str, (moved_s, _)) = t;\n    |                                                      ^\n note: Capturing t[(2, 0),(0, 0)] -> ByValue\n-  --> $DIR/destructure_patterns.rs:64:54\n+  --> $DIR/destructure_patterns.rs:62:54\n    |\n LL |         let (ref mut x, ref ref_str, (moved_s, _)) = t;\n    |                                                      ^\n \n error: Min Capture analysis includes:\n-  --> $DIR/destructure_patterns.rs:61:5\n+  --> $DIR/destructure_patterns.rs:59:5\n    |\n LL | /     || {\n LL | |\n@@ -157,21 +148,21 @@ LL | |     };\n    | |_____^\n    |\n note: Min Capture t[(0, 0)] -> MutBorrow\n-  --> $DIR/destructure_patterns.rs:64:54\n+  --> $DIR/destructure_patterns.rs:62:54\n    |\n LL |         let (ref mut x, ref ref_str, (moved_s, _)) = t;\n    |                                                      ^\n note: Min Capture t[(1, 0)] -> ImmBorrow\n-  --> $DIR/destructure_patterns.rs:64:54\n+  --> $DIR/destructure_patterns.rs:62:54\n    |\n LL |         let (ref mut x, ref ref_str, (moved_s, _)) = t;\n    |                                                      ^\n note: Min Capture t[(2, 0),(0, 0)] -> ByValue\n-  --> $DIR/destructure_patterns.rs:64:54\n+  --> $DIR/destructure_patterns.rs:62:54\n    |\n LL |         let (ref mut x, ref ref_str, (moved_s, _)) = t;\n    |                                                      ^\n \n-error: aborting due to 9 previous errors; 1 warning emitted\n+error: aborting due to 9 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "93131b2ac4e4d47999a4f761a9953b9cfc64c9e0", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/arrays.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Farrays.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Farrays.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Farrays.rs?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,7 +1,6 @@\n-// Test that arrays are completely captured by closures by relying on the borrow check diagnostics\n+// edition:2021\n \n-#![feature(capture_disjoint_fields)]\n-//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n+// Test that arrays are completely captured by closures by relying on the borrow check diagnostics\n \n fn arrays_1() {\n     let mut arr = [1, 2, 3, 4, 5];"}, {"sha": "a3f2f25e447e1ac500cff609f5136a058678adb7", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/arrays.stderr", "status": "modified", "additions": 8, "deletions": 17, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Farrays.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Farrays.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Farrays.stderr?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,14 +1,5 @@\n-warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/arrays.rs:3:12\n-   |\n-LL | #![feature(capture_disjoint_fields)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n-\n error[E0503]: cannot use `arr` because it was mutably borrowed\n-  --> $DIR/arrays.rs:15:5\n+  --> $DIR/arrays.rs:14:5\n    |\n LL |     let mut c = || {\n    |                 -- borrow of `arr` occurs here\n@@ -22,7 +13,7 @@ LL |     c();\n    |     - borrow later used here\n \n error[E0503]: cannot use `arr[_]` because it was mutably borrowed\n-  --> $DIR/arrays.rs:15:5\n+  --> $DIR/arrays.rs:14:5\n    |\n LL |     let mut c = || {\n    |                 -- borrow of `arr` occurs here\n@@ -36,7 +27,7 @@ LL |     c();\n    |     - borrow later used here\n \n error[E0506]: cannot assign to `arr[_]` because it is borrowed\n-  --> $DIR/arrays.rs:30:5\n+  --> $DIR/arrays.rs:29:5\n    |\n LL |     let c = || {\n    |             -- borrow of `arr[_]` occurs here\n@@ -50,7 +41,7 @@ LL |     c();\n    |     - borrow later used here\n \n error[E0506]: cannot assign to `arr[_]` because it is borrowed\n-  --> $DIR/arrays.rs:44:5\n+  --> $DIR/arrays.rs:43:5\n    |\n LL |     let c = || {\n    |             -- borrow of `arr[_]` occurs here\n@@ -64,7 +55,7 @@ LL |     c();\n    |     - borrow later used here\n \n error[E0503]: cannot use `arr` because it was mutably borrowed\n-  --> $DIR/arrays.rs:58:20\n+  --> $DIR/arrays.rs:57:20\n    |\n LL |     let mut c = || {\n    |                 -- borrow of `arr` occurs here\n@@ -78,7 +69,7 @@ LL |     c();\n    |     - borrow later used here\n \n error[E0502]: cannot borrow `arr[_]` as immutable because it is also borrowed as mutable\n-  --> $DIR/arrays.rs:58:20\n+  --> $DIR/arrays.rs:57:20\n    |\n LL |     let mut c = || {\n    |                 -- mutable borrow occurs here\n@@ -92,7 +83,7 @@ LL |     c();\n    |     - mutable borrow later used here\n \n error[E0502]: cannot borrow `arr` as immutable because it is also borrowed as mutable\n-  --> $DIR/arrays.rs:74:24\n+  --> $DIR/arrays.rs:73:24\n    |\n LL |     let mut c = || {\n    |                 -- mutable borrow occurs here\n@@ -105,7 +96,7 @@ LL |     println!(\"{:#?}\", &arr[3..2]);\n LL |     c();\n    |     - mutable borrow later used here\n \n-error: aborting due to 7 previous errors; 1 warning emitted\n+error: aborting due to 7 previous errors\n \n Some errors have detailed explanations: E0502, E0503, E0506.\n For more information about an error, try `rustc --explain E0502`."}, {"sha": "3664d76c2038f2da3c93f3e9532801d94d4e6c06", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/borrowck/borrowck-1.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fborrowck%2Fborrowck-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fborrowck%2Fborrowck-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fborrowck%2Fborrowck-1.rs?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,5 +1,4 @@\n-#![feature(capture_disjoint_fields)]\n-//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n+// edition:2021\n \n #[derive(Debug)]\n struct Point {"}, {"sha": "341d2bc65634b505db9faa9894608c52851bc65a", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/borrowck/borrowck-1.stderr", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fborrowck%2Fborrowck-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fborrowck%2Fborrowck-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fborrowck%2Fborrowck-1.stderr?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,14 +1,5 @@\n-warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/borrowck-1.rs:1:12\n-   |\n-LL | #![feature(capture_disjoint_fields)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n-\n error[E0499]: cannot borrow `p` as mutable more than once at a time\n-  --> $DIR/borrowck-1.rs:13:17\n+  --> $DIR/borrowck-1.rs:12:17\n    |\n LL |     let y = &mut p.y;\n    |             -------- first mutable borrow occurs here\n@@ -23,6 +14,6 @@ LL |        println!(\"{:?}\", p);\n LL |     *y+=1;\n    |     ----- first borrow later used here\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0499`."}, {"sha": "ae416bab65ea5128728987d5e0a56ce48bb9da52", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/borrowck/borrowck-2.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fborrowck%2Fborrowck-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fborrowck%2Fborrowck-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fborrowck%2Fborrowck-2.rs?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,5 +1,4 @@\n-#![feature(capture_disjoint_fields)]\n-//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n+// edition:2021\n \n #[derive(Debug)]\n struct Point {"}, {"sha": "584bb862b2c0aa8ccd5a5d430e331c895952f385", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/borrowck/borrowck-2.stderr", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fborrowck%2Fborrowck-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fborrowck%2Fborrowck-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fborrowck%2Fborrowck-2.stderr?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,14 +1,5 @@\n-warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/borrowck-2.rs:1:12\n-   |\n-LL | #![feature(capture_disjoint_fields)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n-\n error[E0502]: cannot borrow `p` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-2.rs:13:17\n+  --> $DIR/borrowck-2.rs:12:17\n    |\n LL |     let y = &p.y;\n    |             ---- immutable borrow occurs here\n@@ -23,6 +14,6 @@ LL |        let x = &mut p.x;\n LL |     println!(\"{}\", y);\n    |                    - immutable borrow later used here\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0502`."}, {"sha": "bdd6cb79b60b09f414508c21884102b06cace66d", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/borrowck/borrowck-3.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fborrowck%2Fborrowck-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fborrowck%2Fborrowck-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fborrowck%2Fborrowck-3.rs?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,5 +1,4 @@\n-#![feature(capture_disjoint_fields)]\n-//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n+// edition:2021\n \n #[derive(Debug)]\n struct Point {"}, {"sha": "dab1809a381ee28a1e5241253069faadc37d8126", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/borrowck/borrowck-3.stderr", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fborrowck%2Fborrowck-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fborrowck%2Fborrowck-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fborrowck%2Fborrowck-3.stderr?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,14 +1,5 @@\n-warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/borrowck-3.rs:1:12\n-   |\n-LL | #![feature(capture_disjoint_fields)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n-\n error[E0597]: `p` does not live long enough\n-  --> $DIR/borrowck-3.rs:14:29\n+  --> $DIR/borrowck-3.rs:13:29\n    |\n LL |     let mut c = {\n    |         ----- borrow later stored here\n@@ -22,6 +13,6 @@ LL |            println!(\"{:?}\", p);\n LL |     };\n    |     - `p` dropped here while still borrowed\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0597`."}, {"sha": "a2290d850207d2bcfebfec3edfa3b50072a3c541", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/borrowck/borrowck-4.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fborrowck%2Fborrowck-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fborrowck%2Fborrowck-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fborrowck%2Fborrowck-4.rs?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,5 +1,4 @@\n-#![feature(capture_disjoint_fields)]\n-//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n+// edition:2021\n \n #[derive(Debug)]\n struct Point {"}, {"sha": "29bd4b27d6b07f6365e79a38c2bafb42a792a505", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/borrowck/borrowck-4.stderr", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fborrowck%2Fborrowck-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fborrowck%2Fborrowck-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fborrowck%2Fborrowck-4.stderr?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,14 +1,5 @@\n-warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/borrowck-4.rs:1:12\n-   |\n-LL | #![feature(capture_disjoint_fields)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n-\n error[E0373]: closure may outlive the current function, but it borrows `p`, which is owned by the current function\n-  --> $DIR/borrowck-4.rs:11:17\n+  --> $DIR/borrowck-4.rs:10:17\n    |\n LL |     let mut c = || {\n    |                 ^^ may outlive borrowed value `p`\n@@ -17,7 +8,7 @@ LL |        println!(\"{:?}\", p);\n    |                         - `p` is borrowed here\n    |\n note: closure is returned here\n-  --> $DIR/borrowck-4.rs:9:14\n+  --> $DIR/borrowck-4.rs:8:14\n    |\n LL | fn foo () -> impl FnMut()->() {\n    |              ^^^^^^^^^^^^^^^^\n@@ -26,6 +17,6 @@ help: to force the closure to take ownership of `p` (and any other referenced va\n LL |     let mut c = move || {\n    |                 ^^^^^^^\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0373`."}, {"sha": "6a8c9664051dfc0e4c9681cbe695e63738adc6c1", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/borrowck/borrowck-closures-mut-and-imm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fborrowck%2Fborrowck-closures-mut-and-imm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fborrowck%2Fborrowck-closures-mut-and-imm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fborrowck%2Fborrowck-closures-mut-and-imm.rs?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,8 +1,8 @@\n+// edition:2021\n+\n // Tests that two closures cannot simultaneously have mutable\n // and immutable access to the variable. Issue #6801.\n \n-#![feature(capture_disjoint_fields)]\n-//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n #![feature(box_syntax)]\n \n #[derive(Debug)]"}, {"sha": "5f1dae2972f9e6766ffef3e107c843d507dffb78", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/borrowck/borrowck-closures-mut-and-imm.stderr", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fborrowck%2Fborrowck-closures-mut-and-imm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fborrowck%2Fborrowck-closures-mut-and-imm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fborrowck%2Fborrowck-closures-mut-and-imm.stderr?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,12 +1,3 @@\n-warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/borrowck-closures-mut-and-imm.rs:4:12\n-   |\n-LL | #![feature(capture_disjoint_fields)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n-\n error[E0502]: cannot borrow `p` as mutable because it is also borrowed as immutable\n   --> $DIR/borrowck-closures-mut-and-imm.rs:17:14\n    |\n@@ -25,6 +16,6 @@ LL |     };\n LL |     drop(c2);\n    |          -- immutable borrow later used here\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0502`."}, {"sha": "a110fa4e2cb3e257165523f1be3e972d5734914d", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/box.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fbox.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fbox.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fbox.rs?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,7 +1,6 @@\n-// Test borrow checker when we precise capture when using boxes\n+// edition:2021\n \n-#![feature(capture_disjoint_fields)]\n-//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n+// Test borrow checker when we precise capture when using boxes\n \n struct MetaData { x: String, name: String }\n struct Data { m: MetaData }"}, {"sha": "2badf0514187eb135ec44b6d9cf4ca04bfd0c83d", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/box.stderr", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fbox.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fbox.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fbox.stderr?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,14 +1,5 @@\n-warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/box.rs:3:12\n-   |\n-LL | #![feature(capture_disjoint_fields)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n-\n error[E0506]: cannot assign to `e.0.0.m.x` because it is borrowed\n-  --> $DIR/box.rs:22:5\n+  --> $DIR/box.rs:21:5\n    |\n LL |     let mut c = || {\n    |                 -- borrow of `e.0.0.m.x` occurs here\n@@ -22,7 +13,7 @@ LL |     c();\n    |     - borrow later used here\n \n error[E0502]: cannot borrow `e.0.0.m.x` as immutable because it is also borrowed as mutable\n-  --> $DIR/box.rs:39:20\n+  --> $DIR/box.rs:38:20\n    |\n LL |     let mut c = || {\n    |                 -- mutable borrow occurs here\n@@ -36,7 +27,7 @@ LL |     c();\n    |     - mutable borrow later used here\n \n error[E0506]: cannot assign to `e.0.0.m.x` because it is borrowed\n-  --> $DIR/box.rs:56:5\n+  --> $DIR/box.rs:55:5\n    |\n LL |     let c = || {\n    |             -- borrow of `e.0.0.m.x` occurs here\n@@ -49,7 +40,7 @@ LL |\n LL |     c();\n    |     - borrow later used here\n \n-error: aborting due to 3 previous errors; 1 warning emitted\n+error: aborting due to 3 previous errors\n \n Some errors have detailed explanations: E0502, E0506.\n For more information about an error, try `rustc --explain E0502`."}, {"sha": "a5b4a19d8c3ff1d2972a9a5332244548531ac44a", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/cant-mutate-imm-borrow.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fcant-mutate-imm-borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fcant-mutate-imm-borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fcant-mutate-imm-borrow.rs?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,9 +1,8 @@\n+// edition:2021\n+\n // Test that if we deref an immutable borrow to access a Place,\n // then we can't mutate the final place.\n \n-#![feature(capture_disjoint_fields)]\n-//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n-\n fn main() {\n     let mut x = (format!(\"\"), format!(\"X2\"));\n     let mut y = (&x, \"Y\");"}, {"sha": "cfe531e17d3d74bafe107b223d58f0a20c108da8", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/cant-mutate-imm-borrow.stderr", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fcant-mutate-imm-borrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fcant-mutate-imm-borrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fcant-mutate-imm-borrow.stderr?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,21 +1,12 @@\n-warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/cant-mutate-imm-borrow.rs:4:12\n-   |\n-LL | #![feature(capture_disjoint_fields)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n-\n error[E0596]: cannot borrow `z.0.0.0` as mutable, as it is behind a `&` reference\n-  --> $DIR/cant-mutate-imm-borrow.rs:14:17\n+  --> $DIR/cant-mutate-imm-borrow.rs:13:17\n    |\n LL |     let mut c = || {\n    |                 ^^ cannot borrow as mutable\n LL |\n LL |         z.0.0.0 = format!(\"X1\");\n    |         ------- mutable borrow occurs due to use of `z.0.0.0` in closure\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0596`."}, {"sha": "25ee9a1490e0c3aa290d665b2967dd488ecc4330", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/cant-mutate-imm.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fcant-mutate-imm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fcant-mutate-imm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fcant-mutate-imm.rs?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,5 +1,4 @@\n-#![feature(capture_disjoint_fields)]\n-//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n+// edition:2021\n \n // Ensure that diagnostics for mutability error (because the root variable\n // isn't mutable) work with `capture_disjoint_fields` enabled."}, {"sha": "98414fa8a3d5f1dec4b2627653228008bcc6bccb", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/cant-mutate-imm.stderr", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fcant-mutate-imm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fcant-mutate-imm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fcant-mutate-imm.stderr?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,14 +1,5 @@\n-warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/cant-mutate-imm.rs:1:12\n-   |\n-LL | #![feature(capture_disjoint_fields)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n-\n error[E0594]: cannot assign to `z.0.0.0`, as it is not declared as mutable\n-  --> $DIR/cant-mutate-imm.rs:13:9\n+  --> $DIR/cant-mutate-imm.rs:12:9\n    |\n LL |     let z = (y, 10);\n    |         - help: consider changing this to be mutable: `mut z`\n@@ -17,14 +8,14 @@ LL |         z.0.0.0 = 20;\n    |         ^^^^^^^^^^^^ cannot assign\n \n error[E0594]: cannot assign to `*bx.0`, as it is not declared as mutable\n-  --> $DIR/cant-mutate-imm.rs:25:9\n+  --> $DIR/cant-mutate-imm.rs:24:9\n    |\n LL |     let bx = Box::new(x);\n    |         -- help: consider changing this to be mutable: `mut bx`\n ...\n LL |         bx.0 = 20;\n    |         ^^^^^^^^^ cannot assign\n \n-error: aborting due to 2 previous errors; 1 warning emitted\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0594`."}, {"sha": "f3be542e40d7a506ea48451e17d4e4bc56c9f46f", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/closure-origin-array-diagnostics.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fclosure-origin-array-diagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fclosure-origin-array-diagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fclosure-origin-array-diagnostics.rs?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,7 +1,4 @@\n-#![feature(capture_disjoint_fields)]\n-//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n-//~| `#[warn(incomplete_features)]` on by default\n-//~| see issue #53488 <https://github.com/rust-lang/rust/issues/53488>\n+// edition:2021\n \n // Test that array access is not stored as part of closure kind origin\n "}, {"sha": "bcde35983fc4c3f6484c38b8052c1cb6a9d33724", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/closure-origin-array-diagnostics.stderr", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fclosure-origin-array-diagnostics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fclosure-origin-array-diagnostics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fclosure-origin-array-diagnostics.stderr?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,14 +1,5 @@\n-warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/closure-origin-array-diagnostics.rs:1:12\n-   |\n-LL | #![feature(capture_disjoint_fields)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n-\n error[E0525]: expected a closure that implements the `Fn` trait, but this closure only implements `FnOnce`\n-  --> $DIR/closure-origin-array-diagnostics.rs:12:13\n+  --> $DIR/closure-origin-array-diagnostics.rs:9:13\n    |\n LL |     let c = || {\n    |             ^^ this closure implements `FnOnce`, not `Fn`\n@@ -18,6 +9,6 @@ LL |     };\n LL |     expect_fn(c);\n    |     --------- the requirement to implement `Fn` derives from here\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0525`."}, {"sha": "aa85b55b15cc73344bffc25c52f43660362a7db0", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/closure-origin-multi-variant-diagnostics.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fclosure-origin-multi-variant-diagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fclosure-origin-multi-variant-diagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fclosure-origin-multi-variant-diagnostics.rs?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,11 +1,7 @@\n-#![feature(capture_disjoint_fields)]\n-//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n-//~| `#[warn(incomplete_features)]` on by default\n-//~| see issue #53488 <https://github.com/rust-lang/rust/issues/53488>\n+// edition:2021\n \n // Check that precise paths are being reported back in the error message.\n \n-\n enum MultiVariant {\n     Point(i32, i32),\n     Meta(i32)"}, {"sha": "066c000c832d8b61ded2f62bd1b8455ca9065603", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/closure-origin-multi-variant-diagnostics.stderr", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fclosure-origin-multi-variant-diagnostics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fclosure-origin-multi-variant-diagnostics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fclosure-origin-multi-variant-diagnostics.stderr?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,26 +1,17 @@\n-warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/closure-origin-multi-variant-diagnostics.rs:1:12\n-   |\n-LL | #![feature(capture_disjoint_fields)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n-\n error[E0382]: use of moved value: `c`\n-  --> $DIR/closure-origin-multi-variant-diagnostics.rs:30:13\n+  --> $DIR/closure-origin-multi-variant-diagnostics.rs:26:13\n    |\n LL |     let a = c;\n    |             - value moved here\n LL |     let b = c;\n    |             ^ value used here after move\n    |\n note: closure cannot be moved more than once as it is not `Copy` due to moving the variable `point.0` out of its environment\n-  --> $DIR/closure-origin-multi-variant-diagnostics.rs:20:52\n+  --> $DIR/closure-origin-multi-variant-diagnostics.rs:16:52\n    |\n LL |         if let MultiVariant::Point(ref mut x, _) = point {\n    |                                                    ^^^^^\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0382`."}, {"sha": "bedb103cc4c7bd5da4c06aeb8ac528ace3138010", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/closure-origin-single-variant-diagnostics.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fclosure-origin-single-variant-diagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fclosure-origin-single-variant-diagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fclosure-origin-single-variant-diagnostics.rs?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,9 +1,5 @@\n-#![feature(capture_disjoint_fields)]\n-//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n-//~| `#[warn(incomplete_features)]` on by default\n-//~| see issue #53488 <https://github.com/rust-lang/rust/issues/53488>\n+// edition:2021\n \n-// Check that precise paths are being reported back in the error message.\n \n enum SingleVariant {\n     Point(i32, i32),"}, {"sha": "2a6e00850fa8a22a31b2052013e3c2f8a418c634", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/closure-origin-single-variant-diagnostics.stderr", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fclosure-origin-single-variant-diagnostics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fclosure-origin-single-variant-diagnostics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fclosure-origin-single-variant-diagnostics.stderr?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,26 +1,17 @@\n-warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/closure-origin-single-variant-diagnostics.rs:1:12\n-   |\n-LL | #![feature(capture_disjoint_fields)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n-\n error[E0382]: use of moved value: `c`\n-  --> $DIR/closure-origin-single-variant-diagnostics.rs:21:13\n+  --> $DIR/closure-origin-single-variant-diagnostics.rs:17:13\n    |\n LL |     let b = c;\n    |             - value moved here\n LL |     let a = c;\n    |             ^ value used here after move\n    |\n note: closure cannot be moved more than once as it is not `Copy` due to moving the variable `point.0` out of its environment\n-  --> $DIR/closure-origin-single-variant-diagnostics.rs:16:50\n+  --> $DIR/closure-origin-single-variant-diagnostics.rs:12:50\n    |\n LL |         let SingleVariant::Point(ref mut x, _) = point;\n    |                                                  ^^^^^\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0382`."}, {"sha": "3277a83c4e147547a64e61353943765bdb163b84", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/closure-origin-struct-diagnostics.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fclosure-origin-struct-diagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fclosure-origin-struct-diagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fclosure-origin-struct-diagnostics.rs?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,7 +1,4 @@\n-#![feature(capture_disjoint_fields)]\n-//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n-//~| `#[warn(incomplete_features)]` on by default\n-//~| see issue #53488 <https://github.com/rust-lang/rust/issues/53488>\n+// edition:2021\n \n // Check that precise paths are being reported back in the error message.\n "}, {"sha": "d7fc51c55eae32249ac9c409ff1c37b53d22f637", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/closure-origin-struct-diagnostics.stderr", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fclosure-origin-struct-diagnostics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fclosure-origin-struct-diagnostics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fclosure-origin-struct-diagnostics.stderr?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,26 +1,17 @@\n-warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/closure-origin-struct-diagnostics.rs:1:12\n-   |\n-LL | #![feature(capture_disjoint_fields)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n-\n error[E0382]: use of moved value: `hello`\n-  --> $DIR/closure-origin-struct-diagnostics.rs:24:13\n+  --> $DIR/closure-origin-struct-diagnostics.rs:21:13\n    |\n LL |     let b = hello;\n    |             ----- value moved here\n LL |     let c = hello;\n    |             ^^^^^ value used here after move\n    |\n note: closure cannot be moved more than once as it is not `Copy` due to moving the variable `x.y.a` out of its environment\n-  --> $DIR/closure-origin-struct-diagnostics.rs:20:9\n+  --> $DIR/closure-origin-struct-diagnostics.rs:17:9\n    |\n LL |         x.y.a += 1;\n    |         ^^^^^\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0382`."}, {"sha": "dc3a57ae793e7c71ed33c76db2d381fdb157f6e3", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/closure-origin-tuple-diagnostics-1.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fclosure-origin-tuple-diagnostics-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fclosure-origin-tuple-diagnostics-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fclosure-origin-tuple-diagnostics-1.rs?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,7 +1,4 @@\n-#![feature(capture_disjoint_fields)]\n-//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n-//~| `#[warn(incomplete_features)]` on by default\n-//~| see issue #53488 <https://github.com/rust-lang/rust/issues/53488>\n+// edition:2021\n \n // Check that precise paths are being reported back in the error message.\n "}, {"sha": "63e2d300eb06a82cebdf7b304f5b701a5f5b2e6a", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/closure-origin-tuple-diagnostics-1.stderr", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fclosure-origin-tuple-diagnostics-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fclosure-origin-tuple-diagnostics-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fclosure-origin-tuple-diagnostics-1.stderr?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,26 +1,17 @@\n-warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/closure-origin-tuple-diagnostics-1.rs:1:12\n-   |\n-LL | #![feature(capture_disjoint_fields)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n-\n error[E0382]: use of moved value: `hello`\n-  --> $DIR/closure-origin-tuple-diagnostics-1.rs:15:13\n+  --> $DIR/closure-origin-tuple-diagnostics-1.rs:12:13\n    |\n LL |     let b = hello;\n    |             ----- value moved here\n LL |     let c = hello;\n    |             ^^^^^ value used here after move\n    |\n note: closure cannot be moved more than once as it is not `Copy` due to moving the variable `x.0` out of its environment\n-  --> $DIR/closure-origin-tuple-diagnostics-1.rs:11:9\n+  --> $DIR/closure-origin-tuple-diagnostics-1.rs:8:9\n    |\n LL |         x.0 += 1;\n    |         ^^^\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0382`."}, {"sha": "fa1328013db456eadc0d9837098cf915fd538e1f", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/closure-origin-tuple-diagnostics.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fclosure-origin-tuple-diagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fclosure-origin-tuple-diagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fclosure-origin-tuple-diagnostics.rs?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,7 +1,5 @@\n-#![feature(capture_disjoint_fields)]\n-//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n-//~| `#[warn(incomplete_features)]` on by default\n-//~| see issue #53488 <https://github.com/rust-lang/rust/issues/53488>\n+// edition:2021\n+\n struct S(String, String);\n \n fn expect_fn<F: Fn()>(_f: F) {}"}, {"sha": "df33c4f1fd6d4836c1db1ac0995aa9843601631a", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/closure-origin-tuple-diagnostics.stderr", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fclosure-origin-tuple-diagnostics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fclosure-origin-tuple-diagnostics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fclosure-origin-tuple-diagnostics.stderr?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,14 +1,5 @@\n-warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/closure-origin-tuple-diagnostics.rs:1:12\n-   |\n-LL | #![feature(capture_disjoint_fields)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n-\n error[E0525]: expected a closure that implements the `Fn` trait, but this closure only implements `FnOnce`\n-  --> $DIR/closure-origin-tuple-diagnostics.rs:11:13\n+  --> $DIR/closure-origin-tuple-diagnostics.rs:9:13\n    |\n LL |     let c = || {\n    |             ^^ this closure implements `FnOnce`, not `Fn`\n@@ -18,6 +9,6 @@ LL |     };\n LL |     expect_fn(c);\n    |     --------- the requirement to implement `Fn` derives from here\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0525`."}, {"sha": "1cc22fac35282217cf9a121bc11222a220e9fa66", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/liveness.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fliveness.rs?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,6 +1,6 @@\n+// edition:2021\n+\n // check-pass\n-#![feature(capture_disjoint_fields)]\n-//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n #![allow(unreachable_code)]\n #![warn(unused)]\n "}, {"sha": "4eac5a2d282b07b527e6cbe8f3fe0841e57591e2", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/liveness.stderr", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fliveness.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fliveness.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fliveness.stderr?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,12 +1,3 @@\n-warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/liveness.rs:2:12\n-   |\n-LL | #![feature(capture_disjoint_fields)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n-\n warning: value captured by `a` is never read\n   --> $DIR/liveness.rs:23:9\n    |\n@@ -75,5 +66,5 @@ LL |             b = Some(\"e1\");\n    |\n    = help: did you mean to capture by reference instead?\n \n-warning: 8 warnings emitted\n+warning: 7 warnings emitted\n "}, {"sha": "10a7d07a1df99937e38e1a7aa4d05a62862f9e4d", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fliveness_unintentional_copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fliveness_unintentional_copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fliveness_unintentional_copy.rs?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,6 +1,6 @@\n+// edition:2021\n+\n // check-pass\n-#![feature(capture_disjoint_fields)]\n-//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n #![warn(unused)]\n \n #[derive(Debug)]"}, {"sha": "f74303e3dd682672d8d13cdba48d6669ee40ad9f", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.stderr", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fliveness_unintentional_copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fliveness_unintentional_copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fliveness_unintentional_copy.stderr?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,12 +1,3 @@\n-warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/liveness_unintentional_copy.rs:2:12\n-   |\n-LL | #![feature(capture_disjoint_fields)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n-\n warning: value assigned to `a` is never read\n   --> $DIR/liveness_unintentional_copy.rs:19:9\n    |\n@@ -43,5 +34,5 @@ LL |         a += x;\n    |\n    = help: did you mean to capture by reference instead?\n \n-warning: 4 warnings emitted\n+warning: 3 warnings emitted\n "}, {"sha": "fa73ff23f9cd37bdaaa40f070eacf67c082f044a", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/multilevel-path.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fmultilevel-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fmultilevel-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fmultilevel-path.rs?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,8 +1,8 @@\n+// edition:2021\n+\n // Test that when a borrow checker diagnostics are emitted, it's as precise\n // as the capture by the closure.\n \n-#![feature(capture_disjoint_fields)]\n-//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n #![allow(unused)]\n \n struct Point {"}, {"sha": "ac4c9c93769ce93dd465bded5a50d5b44a3de6d8", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/multilevel-path.stderr", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fmultilevel-path.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fmultilevel-path.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fmultilevel-path.stderr?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,12 +1,3 @@\n-warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/multilevel-path.rs:4:12\n-   |\n-LL | #![feature(capture_disjoint_fields)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n-\n error[E0499]: cannot borrow `w.p.x` as mutable more than once at a time\n   --> $DIR/multilevel-path.rs:23:14\n    |\n@@ -21,6 +12,6 @@ LL |\n LL |     c();\n    |     - first borrow later used here\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0499`."}, {"sha": "3d5a31e8b8e49e383cf589dec005c13644d0abb2", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/mut_ref.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fmut_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fmut_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fmut_ref.rs?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,9 +1,8 @@\n+// edition:2021\n+\n // Test that we can't mutate a place if we need to deref an imm-borrow\n // to reach it.\n \n-#![feature(capture_disjoint_fields)]\n-//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n-\n fn imm_mut_ref() {\n     let mut x = String::new();\n     let y = String::new();"}, {"sha": "dbf8523a3bae111512411a19667815596495fa69", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/mut_ref.stderr", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fmut_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fmut_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fmut_ref.stderr?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,14 +1,5 @@\n-warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/mut_ref.rs:4:12\n-   |\n-LL | #![feature(capture_disjoint_fields)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n-\n error[E0596]: cannot borrow `**ref_mref_x` as mutable, as it is behind a `&` reference\n-  --> $DIR/mut_ref.rs:13:13\n+  --> $DIR/mut_ref.rs:12:13\n    |\n LL |     let ref_mref_x = &mref_x;\n    |                      ------- help: consider changing this to be a mutable reference: `&mut mref_x`\n@@ -20,14 +11,14 @@ LL |         **ref_mref_x = y;\n    |         ------------ mutable borrow occurs due to use of `**ref_mref_x` in closure\n \n error[E0596]: cannot borrow `**mref_ref_x` as mutable, as it is behind a `&` reference\n-  --> $DIR/mut_ref.rs:27:13\n+  --> $DIR/mut_ref.rs:26:13\n    |\n LL |     let c = || {\n    |             ^^ cannot borrow as mutable\n LL |\n LL |         **mref_ref_x = y;\n    |         ------------ mutable borrow occurs due to use of `**mref_ref_x` in closure\n \n-error: aborting due to 2 previous errors; 1 warning emitted\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0596`."}, {"sha": "4799f488d7d525eb0b21c12bf6f5991c3be107a6", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/repr_packed.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Frepr_packed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Frepr_packed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Frepr_packed.rs?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,7 +1,6 @@\n-// check-pass\n+// edition:2021\n \n-#![feature(capture_disjoint_fields)]\n-//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n+// check-pass\n \n // Given how the closure desugaring is implemented (at least at the time of writing this test),\n // we don't need to truncate the captured path to a reference into a packed-struct if the field"}, {"sha": "d2466681a0877a24836da8cd4ed7d180699ec12e", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/repr_packed.stderr", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Frepr_packed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Frepr_packed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Frepr_packed.stderr?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,14 +1,5 @@\n-warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/repr_packed.rs:3:12\n-   |\n-LL | #![feature(capture_disjoint_fields)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n-\n warning: reference to packed field is unaligned\n-  --> $DIR/repr_packed.rs:25:24\n+  --> $DIR/repr_packed.rs:24:24\n    |\n LL |         println!(\"{}\", foo.x);\n    |                        ^^^^^\n@@ -18,5 +9,5 @@ LL |         println!(\"{}\", foo.x);\n    = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n    = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n \n-warning: 2 warnings emitted\n+warning: 1 warning emitted\n "}, {"sha": "ed2d9a3de00f87417039e58315578d9e3d593741", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/simple-struct-min-capture.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fsimple-struct-min-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fsimple-struct-min-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fsimple-struct-min-capture.rs?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,9 +1,8 @@\n+// edition:2021\n+\n // Test that borrow checker error is accurate and that min capture pass of the\n // closure analysis is working as expected.\n \n-#![feature(capture_disjoint_fields)]\n-//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n-\n #[derive(Debug)]\n struct Point {\n     x: i32,"}, {"sha": "32705af3d016623eba451e00feba3c98ef12328c", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/simple-struct-min-capture.stderr", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fsimple-struct-min-capture.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fsimple-struct-min-capture.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fsimple-struct-min-capture.stderr?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,14 +1,5 @@\n-warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/simple-struct-min-capture.rs:4:12\n-   |\n-LL | #![feature(capture_disjoint_fields)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n-\n error[E0502]: cannot borrow `p` as immutable because it is also borrowed as mutable\n-  --> $DIR/simple-struct-min-capture.rs:23:22\n+  --> $DIR/simple-struct-min-capture.rs:22:22\n    |\n LL |     let mut c = || {\n    |                 -- mutable borrow occurs here\n@@ -23,6 +14,6 @@ LL |\n LL |     c();\n    |     - mutable borrow later used here\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0502`."}, {"sha": "269cf76e6735126b67e979bab9165e4babe5e961", "filename": "src/test/ui/closures/2229_closure_analysis/feature-gate-capture_disjoint_fields.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Ffeature-gate-capture_disjoint_fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Ffeature-gate-capture_disjoint_fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Ffeature-gate-capture_disjoint_fields.rs?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,7 +1,5 @@\n-#![feature(capture_disjoint_fields)]\n-//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n-//~| NOTE: `#[warn(incomplete_features)]` on by default\n-//~| NOTE: see issue #53488 <https://github.com/rust-lang/rust/issues/53488>\n+// edition:2021\n+\n #![feature(rustc_attrs)]\n \n fn main() {"}, {"sha": "b936c5ee35a4dd27cfd875a8abc46cc2f1d14adc", "filename": "src/test/ui/closures/2229_closure_analysis/feature-gate-capture_disjoint_fields.stderr", "status": "modified", "additions": 6, "deletions": 15, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Ffeature-gate-capture_disjoint_fields.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Ffeature-gate-capture_disjoint_fields.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Ffeature-gate-capture_disjoint_fields.stderr?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,23 +1,14 @@\n error[E0658]: attributes on expressions are experimental\n-  --> $DIR/feature-gate-capture_disjoint_fields.rs:10:13\n+  --> $DIR/feature-gate-capture_disjoint_fields.rs:8:13\n    |\n LL |     let c = #[rustc_capture_analysis]\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #15701 <https://github.com/rust-lang/rust/issues/15701> for more information\n    = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n \n-warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/feature-gate-capture_disjoint_fields.rs:1:12\n-   |\n-LL | #![feature(capture_disjoint_fields)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n-\n error: First Pass analysis includes:\n-  --> $DIR/feature-gate-capture_disjoint_fields.rs:13:5\n+  --> $DIR/feature-gate-capture_disjoint_fields.rs:11:5\n    |\n LL | /     || {\n LL | |\n@@ -29,13 +20,13 @@ LL | |     };\n    | |_____^\n    |\n note: Capturing s[] -> ImmBorrow\n-  --> $DIR/feature-gate-capture_disjoint_fields.rs:16:69\n+  --> $DIR/feature-gate-capture_disjoint_fields.rs:14:69\n    |\n LL |         println!(\"This uses new capture analyysis to capture s={}\", s);\n    |                                                                     ^\n \n error: Min Capture analysis includes:\n-  --> $DIR/feature-gate-capture_disjoint_fields.rs:13:5\n+  --> $DIR/feature-gate-capture_disjoint_fields.rs:11:5\n    |\n LL | /     || {\n LL | |\n@@ -47,11 +38,11 @@ LL | |     };\n    | |_____^\n    |\n note: Min Capture s[] -> ImmBorrow\n-  --> $DIR/feature-gate-capture_disjoint_fields.rs:16:69\n+  --> $DIR/feature-gate-capture_disjoint_fields.rs:14:69\n    |\n LL |         println!(\"This uses new capture analyysis to capture s={}\", s);\n    |                                                                     ^\n \n-error: aborting due to 3 previous errors; 1 warning emitted\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "bfa3ebcd6d2866806601ac0a3045d3850e899efb", "filename": "src/test/ui/closures/2229_closure_analysis/filter-on-struct-member.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Ffilter-on-struct-member.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Ffilter-on-struct-member.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Ffilter-on-struct-member.rs?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,9 +1,5 @@\n-// FIXME(arora-aman) add run-pass once 2229 is implemented\n+// edition:2021\n \n-#![feature(capture_disjoint_fields)]\n-//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n-//~| NOTE: `#[warn(incomplete_features)]` on by default\n-//~| NOTE: see issue #53488 <https://github.com/rust-lang/rust/issues/53488>\n #![feature(rustc_attrs)]\n \n struct Filter {"}, {"sha": "10e0d076b427621dd6bfcb74cd16514e1c4e8afd", "filename": "src/test/ui/closures/2229_closure_analysis/filter-on-struct-member.stderr", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Ffilter-on-struct-member.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Ffilter-on-struct-member.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Ffilter-on-struct-member.stderr?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,35 +1,26 @@\n-warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/filter-on-struct-member.rs:3:12\n-   |\n-LL | #![feature(capture_disjoint_fields)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n-\n error: First Pass analysis includes:\n-  --> $DIR/filter-on-struct-member.rs:28:13\n+  --> $DIR/filter-on-struct-member.rs:24:13\n    |\n LL |             |v| self.filter.allowed(*v),\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: Capturing self[Deref,(0, 0)] -> ImmBorrow\n-  --> $DIR/filter-on-struct-member.rs:28:17\n+  --> $DIR/filter-on-struct-member.rs:24:17\n    |\n LL |             |v| self.filter.allowed(*v),\n    |                 ^^^^^^^^^^^\n \n error: Min Capture analysis includes:\n-  --> $DIR/filter-on-struct-member.rs:28:13\n+  --> $DIR/filter-on-struct-member.rs:24:13\n    |\n LL |             |v| self.filter.allowed(*v),\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: Min Capture self[Deref,(0, 0)] -> ImmBorrow\n-  --> $DIR/filter-on-struct-member.rs:28:17\n+  --> $DIR/filter-on-struct-member.rs:24:17\n    |\n LL |             |v| self.filter.allowed(*v),\n    |                 ^^^^^^^^^^^\n \n-error: aborting due to 2 previous errors; 1 warning emitted\n+error: aborting due to 2 previous errors\n "}, {"sha": "ee8dd4b4fc33d5bae55573bd9bf7f26f88add8b0", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/auto_traits.fixed", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.fixed?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -11,7 +11,7 @@ fn test_send_trait() {\n     let mut f = 10;\n     let fptr = SendPointer(&mut f as *mut i32);\n     thread::spawn(move || { let _ = &fptr; unsafe {\n-        //~^ ERROR: `Send` trait implementation affected for closure because of `capture_disjoint_fields`\n+        //~^ ERROR: `Send` trait implementation\n         //~| HELP: add a dummy let to cause `fptr` to be fully captured\n         *fptr.0 = 20;\n     } });\n@@ -28,7 +28,7 @@ fn test_sync_trait() {\n     let f = CustomInt(&mut f as *mut i32);\n     let fptr = SyncPointer(f);\n     thread::spawn(move || { let _ = &fptr; unsafe {\n-        //~^ ERROR: `Sync`, `Send` trait implementation affected for closure because of `capture_disjoint_fields`\n+        //~^ ERROR: `Sync`, `Send` trait implementation\n         //~| HELP: add a dummy let to cause `fptr` to be fully captured\n         *fptr.0.0 = 20;\n     } });\n@@ -49,7 +49,7 @@ impl Clone for U {\n fn test_clone_trait() {\n     let f = U(S(String::from(\"Hello World\")), T(0));\n     let c = || { let _ = &f; \n-        //~^ ERROR: `Clone` trait implementation, and drop order affected for closure because of `capture_disjoint_fields`\n+        //~^ ERROR: `Clone` trait implementation, and drop order\n         //~| HELP: add a dummy let to cause `f` to be fully captured\n         let f_1 = f.1;\n         println!(\"{:?}\", f_1.0);"}, {"sha": "7a6dcc55bbba664ab18fe30051d532ab31a334f8", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/auto_traits.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.rs?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -11,7 +11,7 @@ fn test_send_trait() {\n     let mut f = 10;\n     let fptr = SendPointer(&mut f as *mut i32);\n     thread::spawn(move || unsafe {\n-        //~^ ERROR: `Send` trait implementation affected for closure because of `capture_disjoint_fields`\n+        //~^ ERROR: `Send` trait implementation\n         //~| HELP: add a dummy let to cause `fptr` to be fully captured\n         *fptr.0 = 20;\n     });\n@@ -28,7 +28,7 @@ fn test_sync_trait() {\n     let f = CustomInt(&mut f as *mut i32);\n     let fptr = SyncPointer(f);\n     thread::spawn(move || unsafe {\n-        //~^ ERROR: `Sync`, `Send` trait implementation affected for closure because of `capture_disjoint_fields`\n+        //~^ ERROR: `Sync`, `Send` trait implementation\n         //~| HELP: add a dummy let to cause `fptr` to be fully captured\n         *fptr.0.0 = 20;\n     });\n@@ -49,7 +49,7 @@ impl Clone for U {\n fn test_clone_trait() {\n     let f = U(S(String::from(\"Hello World\")), T(0));\n     let c = || {\n-        //~^ ERROR: `Clone` trait implementation, and drop order affected for closure because of `capture_disjoint_fields`\n+        //~^ ERROR: `Clone` trait implementation, and drop order\n         //~| HELP: add a dummy let to cause `f` to be fully captured\n         let f_1 = f.1;\n         println!(\"{:?}\", f_1.0);"}, {"sha": "d8420f9652e32483f21ee44a337e37b13d302047", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/auto_traits.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.stderr?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,4 +1,4 @@\n-error: `Send` trait implementation affected for closure because of `capture_disjoint_fields`\n+error: `Send` trait implementation will change in Rust 2021\n   --> $DIR/auto_traits.rs:13:19\n    |\n LL |       thread::spawn(move || unsafe {\n@@ -14,6 +14,7 @@ note: the lint level is defined here\n    |\n LL | #![deny(disjoint_capture_migration)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `fptr` to be fully captured\n    |\n LL |     thread::spawn(move || { let _ = &fptr; unsafe {\n@@ -23,7 +24,7 @@ LL |         *fptr.0 = 20;\n LL |     } });\n    |\n \n-error: `Sync`, `Send` trait implementation affected for closure because of `capture_disjoint_fields`\n+error: `Sync`, `Send` trait implementation will change in Rust 2021\n   --> $DIR/auto_traits.rs:30:19\n    |\n LL |       thread::spawn(move || unsafe {\n@@ -34,6 +35,7 @@ LL | |         *fptr.0.0 = 20;\n LL | |     });\n    | |_____^\n    |\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `fptr` to be fully captured\n    |\n LL |     thread::spawn(move || { let _ = &fptr; unsafe {\n@@ -43,7 +45,7 @@ LL |         *fptr.0.0 = 20;\n LL |     } });\n    |\n \n-error: `Clone` trait implementation, and drop order affected for closure because of `capture_disjoint_fields`\n+error: `Clone` trait implementation, and drop order will change in Rust 2021\n   --> $DIR/auto_traits.rs:51:13\n    |\n LL |       let c = || {\n@@ -55,6 +57,7 @@ LL | |         println!(\"{:?}\", f_1.0);\n LL | |     };\n    | |_____^\n    |\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `f` to be fully captured\n    |\n LL |     let c = || { let _ = &f; "}, {"sha": "4bc9b19642f618ec8c46fab2d12dbfdf02485dd1", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/insignificant_drop.fixed", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.fixed?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -13,7 +13,8 @@ fn test1_all_need_migration() {\n     let t2 = (String::new(), String::new());\n \n     let c = || { let _ = (&t, &t1, &t2); \n-    //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n+    //~^ ERROR: drop order\n+    //~| NOTE: for more information, see\n     //~| HELP: add a dummy let to cause `t`, `t1`, `t2` to be fully captured\n \n         let _t = t.0;\n@@ -32,7 +33,8 @@ fn test2_only_precise_paths_need_migration() {\n     let t2 = (String::new(), String::new());\n \n     let c = || { let _ = (&t, &t1); \n-    //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n+    //~^ ERROR: drop order\n+    //~| NOTE: for more information, see\n     //~| HELP: add a dummy let to cause `t`, `t1` to be fully captured\n         let _t = t.0;\n         let _t1 = t1.0;\n@@ -48,7 +50,8 @@ fn test3_only_by_value_need_migration() {\n     let t = (String::new(), String::new());\n     let t1 = (String::new(), String::new());\n     let c = || { let _ = &t; \n-    //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n+    //~^ ERROR: drop order\n+    //~| NOTE: for more information, see\n     //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n         println!(\"{}\", t1.1);\n@@ -66,7 +69,8 @@ fn test4_only_non_copy_types_need_migration() {\n     let t1 = (0i32, 0i32);\n \n     let c = || { let _ = &t; \n-    //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n+    //~^ ERROR: drop order\n+    //~| NOTE: for more information, see\n     //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n         let _t1 = t1.0;\n@@ -84,7 +88,8 @@ fn test5_only_drop_types_need_migration() {\n     let s = S(0i32, 0i32);\n \n     let c = || { let _ = &t; \n-    //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n+    //~^ ERROR: drop order\n+    //~| NOTE: for more information, see\n     //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n         let _s = s.0;\n@@ -99,7 +104,8 @@ fn test6_move_closures_non_copy_types_might_need_migration() {\n     let t = (String::new(), String::new());\n     let t1 = (String::new(), String::new());\n     let c = move || { let _ = (&t1, &t); \n-    //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n+    //~^ ERROR: drop order\n+    //~| NOTE: for more information, see\n     //~| HELP: add a dummy let to cause `t1`, `t` to be fully captured\n         println!(\"{} {}\", t1.1, t.1);\n     };\n@@ -114,7 +120,8 @@ fn test7_drop_non_drop_aggregate_need_migration() {\n     let t = (String::new(), String::new(), 0i32);\n \n     let c = || { let _ = &t; \n-    //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n+    //~^ ERROR: drop order\n+    //~| NOTE: for more information, see\n     //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n     };"}, {"sha": "446ce43a469dea4f5a786c197e4ade024593cfa1", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/insignificant_drop.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.rs?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -13,7 +13,8 @@ fn test1_all_need_migration() {\n     let t2 = (String::new(), String::new());\n \n     let c = || {\n-    //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n+    //~^ ERROR: drop order\n+    //~| NOTE: for more information, see\n     //~| HELP: add a dummy let to cause `t`, `t1`, `t2` to be fully captured\n \n         let _t = t.0;\n@@ -32,7 +33,8 @@ fn test2_only_precise_paths_need_migration() {\n     let t2 = (String::new(), String::new());\n \n     let c = || {\n-    //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n+    //~^ ERROR: drop order\n+    //~| NOTE: for more information, see\n     //~| HELP: add a dummy let to cause `t`, `t1` to be fully captured\n         let _t = t.0;\n         let _t1 = t1.0;\n@@ -48,7 +50,8 @@ fn test3_only_by_value_need_migration() {\n     let t = (String::new(), String::new());\n     let t1 = (String::new(), String::new());\n     let c = || {\n-    //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n+    //~^ ERROR: drop order\n+    //~| NOTE: for more information, see\n     //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n         println!(\"{}\", t1.1);\n@@ -66,7 +69,8 @@ fn test4_only_non_copy_types_need_migration() {\n     let t1 = (0i32, 0i32);\n \n     let c = || {\n-    //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n+    //~^ ERROR: drop order\n+    //~| NOTE: for more information, see\n     //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n         let _t1 = t1.0;\n@@ -84,7 +88,8 @@ fn test5_only_drop_types_need_migration() {\n     let s = S(0i32, 0i32);\n \n     let c = || {\n-    //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n+    //~^ ERROR: drop order\n+    //~| NOTE: for more information, see\n     //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n         let _s = s.0;\n@@ -99,7 +104,8 @@ fn test6_move_closures_non_copy_types_might_need_migration() {\n     let t = (String::new(), String::new());\n     let t1 = (String::new(), String::new());\n     let c = move || {\n-    //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n+    //~^ ERROR: drop order\n+    //~| NOTE: for more information, see\n     //~| HELP: add a dummy let to cause `t1`, `t` to be fully captured\n         println!(\"{} {}\", t1.1, t.1);\n     };\n@@ -114,7 +120,8 @@ fn test7_drop_non_drop_aggregate_need_migration() {\n     let t = (String::new(), String::new(), 0i32);\n \n     let c = || {\n-    //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n+    //~^ ERROR: drop order\n+    //~| NOTE: for more information, see\n     //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n     };"}, {"sha": "0dfbcddc2795c6be07374b3ef41b41b1b3ebbf15", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/insignificant_drop.stderr", "status": "modified", "additions": 37, "deletions": 23, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.stderr?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,4 +1,4 @@\n-error: drop order affected for closure because of `capture_disjoint_fields`\n+error: drop order will change in Rust 2021\n   --> $DIR/insignificant_drop.rs:15:13\n    |\n LL |       let c = || {\n@@ -16,141 +16,155 @@ note: the lint level is defined here\n    |\n LL | #![deny(disjoint_capture_migration)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t`, `t1`, `t2` to be fully captured\n    |\n LL |     let c = || { let _ = (&t, &t1, &t2); \n LL |\n LL |\n+LL |\n LL | \n LL |         let _t = t.0;\n-LL |         let _t1 = t1.0;\n  ...\n \n-error: drop order affected for closure because of `capture_disjoint_fields`\n-  --> $DIR/insignificant_drop.rs:34:13\n+error: drop order will change in Rust 2021\n+  --> $DIR/insignificant_drop.rs:35:13\n    |\n LL |       let c = || {\n    |  _____________^\n LL | |\n LL | |\n-LL | |         let _t = t.0;\n-LL | |         let _t1 = t1.0;\n+LL | |\n+...  |\n LL | |         let _t2 = t2;\n LL | |     };\n    | |_____^\n    |\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t`, `t1` to be fully captured\n    |\n LL |     let c = || { let _ = (&t, &t1); \n LL |\n LL |\n+LL |\n LL |         let _t = t.0;\n LL |         let _t1 = t1.0;\n-LL |         let _t2 = t2;\n  ...\n \n-error: drop order affected for closure because of `capture_disjoint_fields`\n-  --> $DIR/insignificant_drop.rs:50:13\n+error: drop order will change in Rust 2021\n+  --> $DIR/insignificant_drop.rs:52:13\n    |\n LL |       let c = || {\n    |  _____________^\n LL | |\n LL | |\n+LL | |\n LL | |         let _t = t.0;\n LL | |         println!(\"{}\", t1.1);\n LL | |     };\n    | |_____^\n    |\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t` to be fully captured\n    |\n LL |     let c = || { let _ = &t; \n LL |\n LL |\n+LL |\n LL |         let _t = t.0;\n LL |         println!(\"{}\", t1.1);\n-LL |     };\n-   |\n+ ...\n \n-error: drop order affected for closure because of `capture_disjoint_fields`\n-  --> $DIR/insignificant_drop.rs:68:13\n+error: drop order will change in Rust 2021\n+  --> $DIR/insignificant_drop.rs:71:13\n    |\n LL |       let c = || {\n    |  _____________^\n LL | |\n LL | |\n+LL | |\n LL | |         let _t = t.0;\n LL | |         let _t1 = t1.0;\n LL | |     };\n    | |_____^\n    |\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t` to be fully captured\n    |\n LL |     let c = || { let _ = &t; \n LL |\n LL |\n+LL |\n LL |         let _t = t.0;\n LL |         let _t1 = t1.0;\n-LL |     };\n-   |\n+ ...\n \n-error: drop order affected for closure because of `capture_disjoint_fields`\n-  --> $DIR/insignificant_drop.rs:86:13\n+error: drop order will change in Rust 2021\n+  --> $DIR/insignificant_drop.rs:90:13\n    |\n LL |       let c = || {\n    |  _____________^\n LL | |\n LL | |\n+LL | |\n LL | |         let _t = t.0;\n LL | |         let _s = s.0;\n LL | |     };\n    | |_____^\n    |\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t` to be fully captured\n    |\n LL |     let c = || { let _ = &t; \n LL |\n LL |\n+LL |\n LL |         let _t = t.0;\n LL |         let _s = s.0;\n-LL |     };\n-   |\n+ ...\n \n-error: drop order affected for closure because of `capture_disjoint_fields`\n-  --> $DIR/insignificant_drop.rs:101:13\n+error: drop order will change in Rust 2021\n+  --> $DIR/insignificant_drop.rs:106:13\n    |\n LL |       let c = move || {\n    |  _____________^\n LL | |\n LL | |\n+LL | |\n LL | |         println!(\"{} {}\", t1.1, t.1);\n LL | |     };\n    | |_____^\n    |\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t1`, `t` to be fully captured\n    |\n LL |     let c = move || { let _ = (&t1, &t); \n LL |\n LL |\n+LL |\n LL |         println!(\"{} {}\", t1.1, t.1);\n LL |     };\n    |\n \n-error: drop order affected for closure because of `capture_disjoint_fields`\n-  --> $DIR/insignificant_drop.rs:116:13\n+error: drop order will change in Rust 2021\n+  --> $DIR/insignificant_drop.rs:122:13\n    |\n LL |       let c = || {\n    |  _____________^\n LL | |\n LL | |\n+LL | |\n LL | |         let _t = t.0;\n LL | |     };\n    | |_____^\n    |\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t` to be fully captured\n    |\n LL |     let c = || { let _ = &t; \n LL |\n LL |\n+LL |\n LL |         let _t = t.0;\n LL |     };\n    |"}, {"sha": "5a781219a72e03d75602e0a349da02c6d629e1ae", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/insignificant_drop_attr_migrations.fixed", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.fixed?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -36,7 +36,8 @@ fn significant_drop_needs_migration() {\n     let t = (SigDrop {}, SigDrop {});\n \n     let c = || { let _ = &t; \n-    //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n+    //~^ ERROR: drop order\n+    //~| NOTE: for more information, see\n     //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n     };\n@@ -53,7 +54,8 @@ fn generic_struct_with_significant_drop_needs_migration() {\n \n     // move is used to force i32 to be copied instead of being a ref\n     let c = move || { let _ = &t; \n-    //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n+    //~^ ERROR: drop order\n+    //~| NOTE: for more information, see\n     //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.1;\n     };"}, {"sha": "d57da3265565e66a1a7a8ecb2126d43c4d99c59c", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/insignificant_drop_attr_migrations.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.rs?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -36,7 +36,8 @@ fn significant_drop_needs_migration() {\n     let t = (SigDrop {}, SigDrop {});\n \n     let c = || {\n-    //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n+    //~^ ERROR: drop order\n+    //~| NOTE: for more information, see\n     //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n     };\n@@ -53,7 +54,8 @@ fn generic_struct_with_significant_drop_needs_migration() {\n \n     // move is used to force i32 to be copied instead of being a ref\n     let c = move || {\n-    //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n+    //~^ ERROR: drop order\n+    //~| NOTE: for more information, see\n     //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.1;\n     };"}, {"sha": "d25f8f635be88f71d5ad5a03fc9ab130b4b0bed5", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/insignificant_drop_attr_migrations.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.stderr?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,10 +1,11 @@\n-error: drop order affected for closure because of `capture_disjoint_fields`\n+error: drop order will change in Rust 2021\n   --> $DIR/insignificant_drop_attr_migrations.rs:38:13\n    |\n LL |       let c = || {\n    |  _____________^\n LL | |\n LL | |\n+LL | |\n LL | |         let _t = t.0;\n LL | |     };\n    | |_____^\n@@ -14,31 +15,36 @@ note: the lint level is defined here\n    |\n LL | #![deny(disjoint_capture_migration)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t` to be fully captured\n    |\n LL |     let c = || { let _ = &t; \n LL |\n LL |\n+LL |\n LL |         let _t = t.0;\n LL |     };\n    |\n \n-error: drop order affected for closure because of `capture_disjoint_fields`\n-  --> $DIR/insignificant_drop_attr_migrations.rs:55:13\n+error: drop order will change in Rust 2021\n+  --> $DIR/insignificant_drop_attr_migrations.rs:56:13\n    |\n LL |       let c = move || {\n    |  _____________^\n LL | |\n LL | |\n+LL | |\n LL | |         let _t = t.1;\n LL | |     };\n    | |_____^\n    |\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t` to be fully captured\n    |\n LL |     let c = move || { let _ = &t; \n LL |\n LL |\n+LL |\n LL |         let _t = t.1;\n LL |     };\n    |"}, {"sha": "42b6ce54d3c0840b0eba1697018fd2d9920ac022", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/migrations_rustfix.fixed", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.fixed?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -17,7 +17,8 @@ impl Drop for Foo {\n fn closure_contains_block() {\n     let t = (Foo(0), Foo(0));\n     let c = || { let _ = &t; \n-        //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n+        //~^ ERROR: drop order\n+        //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n     };\n@@ -28,7 +29,8 @@ fn closure_contains_block() {\n fn closure_doesnt_contain_block() {\n     let t = (Foo(0), Foo(0));\n     let c = || { let _ = &t; t.0 };\n-    //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n+    //~^ ERROR: drop order\n+    //~| NOTE: for more information, see\n     //~| HELP: add a dummy let to cause `t` to be fully captured\n \n     c();"}, {"sha": "ab0ed460fbaf43431fc6ff78de2a5ae01d06ff9a", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/migrations_rustfix.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.rs?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -17,7 +17,8 @@ impl Drop for Foo {\n fn closure_contains_block() {\n     let t = (Foo(0), Foo(0));\n     let c = || {\n-        //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n+        //~^ ERROR: drop order\n+        //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n     };\n@@ -28,7 +29,8 @@ fn closure_contains_block() {\n fn closure_doesnt_contain_block() {\n     let t = (Foo(0), Foo(0));\n     let c = || t.0;\n-    //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n+    //~^ ERROR: drop order\n+    //~| NOTE: for more information, see\n     //~| HELP: add a dummy let to cause `t` to be fully captured\n \n     c();"}, {"sha": "7b654f480a37251b4fc308b14e264df9434e29c7", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/migrations_rustfix.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.stderr?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,10 +1,11 @@\n-error: drop order affected for closure because of `capture_disjoint_fields`\n+error: drop order will change in Rust 2021\n   --> $DIR/migrations_rustfix.rs:19:13\n    |\n LL |       let c = || {\n    |  _____________^\n LL | |\n LL | |\n+LL | |\n LL | |         let _t = t.0;\n LL | |     };\n    | |_____^\n@@ -14,21 +15,24 @@ note: the lint level is defined here\n    |\n LL | #![deny(disjoint_capture_migration)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t` to be fully captured\n    |\n LL |     let c = || { let _ = &t; \n LL |\n LL |\n+LL |\n LL |         let _t = t.0;\n LL |     };\n    |\n \n-error: drop order affected for closure because of `capture_disjoint_fields`\n-  --> $DIR/migrations_rustfix.rs:30:13\n+error: drop order will change in Rust 2021\n+  --> $DIR/migrations_rustfix.rs:31:13\n    |\n LL |     let c = || t.0;\n    |             ^^^^^^\n    |\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t` to be fully captured\n    |\n LL |     let c = || { let _ = &t; t.0 };"}, {"sha": "abff6802e958694551037b34dadacfcea9335014", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/mir_calls_to_shims.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.fixed?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -13,7 +13,7 @@ fn foo_diverges() -> ! { panic!() }\n fn assert_panics<F>(f: F) where F: FnOnce() {\n     let f = panic::AssertUnwindSafe(f);\n     let result = panic::catch_unwind(move || { let _ = &f; \n-        //~^ ERROR: `UnwindSafe`, `RefUnwindSafe` trait implementation affected for closure because of `capture_disjoint_fields`\n+        //~^ ERROR: `UnwindSafe`, `RefUnwindSafe` trait implementation\n         //~| HELP: add a dummy let to cause `f` to be fully captured\n         f.0()\n     });"}, {"sha": "baa17e85b5217ccdc86671eb2d0eebb701abe826", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/mir_calls_to_shims.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.rs?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -13,7 +13,7 @@ fn foo_diverges() -> ! { panic!() }\n fn assert_panics<F>(f: F) where F: FnOnce() {\n     let f = panic::AssertUnwindSafe(f);\n     let result = panic::catch_unwind(move || {\n-        //~^ ERROR: `UnwindSafe`, `RefUnwindSafe` trait implementation affected for closure because of `capture_disjoint_fields`\n+        //~^ ERROR: `UnwindSafe`, `RefUnwindSafe` trait implementation\n         //~| HELP: add a dummy let to cause `f` to be fully captured\n         f.0()\n     });"}, {"sha": "8dca06a836ca370f91409f93c9c11b3730b6aa3b", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/mir_calls_to_shims.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.stderr?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,4 +1,4 @@\n-error: `UnwindSafe`, `RefUnwindSafe` trait implementation affected for closure because of `capture_disjoint_fields`\n+error: `UnwindSafe`, `RefUnwindSafe` trait implementation will change in Rust 2021\n   --> $DIR/mir_calls_to_shims.rs:15:38\n    |\n LL |       let result = panic::catch_unwind(move || {\n@@ -14,6 +14,7 @@ note: the lint level is defined here\n    |\n LL | #![deny(disjoint_capture_migration)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `f` to be fully captured\n    |\n LL |     let result = panic::catch_unwind(move || { let _ = &f; "}, {"sha": "90ea1ed28836ddddd0eeebaabd7bfa367097cc28", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/precise.fixed", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise.fixed?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -17,7 +17,7 @@ fn test_precise_analysis_drop_paths_not_captured_by_move() {\n     let t = ConstainsDropField(Foo(10), Foo(20));\n \n     let c = || { let _ = &t; \n-    //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n+    //~^ ERROR: drop order\n     //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n         let _t = &t.1;\n@@ -40,7 +40,7 @@ fn test_precise_analysis_long_path_missing() {\n     let u = U(T(S, S), T(S, S));\n \n     let c = || { let _ = &u; \n-    //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n+    //~^ ERROR: drop order\n     //~| HELP: add a dummy let to cause `u` to be fully captured\n         let _x = u.0.0;\n         let _x = u.0.1;"}, {"sha": "cb432304592620029d14f68e1475970d3bd428af", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/precise.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise.rs?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -17,7 +17,7 @@ fn test_precise_analysis_drop_paths_not_captured_by_move() {\n     let t = ConstainsDropField(Foo(10), Foo(20));\n \n     let c = || {\n-    //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n+    //~^ ERROR: drop order\n     //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n         let _t = &t.1;\n@@ -40,7 +40,7 @@ fn test_precise_analysis_long_path_missing() {\n     let u = U(T(S, S), T(S, S));\n \n     let c = || {\n-    //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n+    //~^ ERROR: drop order\n     //~| HELP: add a dummy let to cause `u` to be fully captured\n         let _x = u.0.0;\n         let _x = u.0.1;"}, {"sha": "f010c51f1361ecd3fe8501a51501d54b872e84c7", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/precise.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise.stderr?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,4 +1,4 @@\n-error: drop order affected for closure because of `capture_disjoint_fields`\n+error: drop order will change in Rust 2021\n   --> $DIR/precise.rs:19:13\n    |\n LL |       let c = || {\n@@ -15,6 +15,7 @@ note: the lint level is defined here\n    |\n LL | #![deny(disjoint_capture_migration)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t` to be fully captured\n    |\n LL |     let c = || { let _ = &t; \n@@ -25,7 +26,7 @@ LL |         let _t = &t.1;\n LL |     };\n    |\n \n-error: drop order affected for closure because of `capture_disjoint_fields`\n+error: drop order will change in Rust 2021\n   --> $DIR/precise.rs:42:13\n    |\n LL |       let c = || {\n@@ -38,6 +39,7 @@ LL | |         let _x = u.1.0;\n LL | |     };\n    | |_____^\n    |\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `u` to be fully captured\n    |\n LL |     let c = || { let _ = &u; "}, {"sha": "1c970175d182d906d826d87a01a9396460045bb9", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/significant_drop.fixed", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.fixed?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -23,7 +23,8 @@ fn test1_all_need_migration() {\n     let t2 = (Foo(0), Foo(0));\n \n     let c = || { let _ = (&t, &t1, &t2); \n-    //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n+    //~^ ERROR: drop order\n+    //~| NOTE: for more information, see\n     //~| HELP: add a dummy let to cause `t`, `t1`, `t2` to be fully captured\n         let _t = t.0;\n         let _t1 = t1.0;\n@@ -41,7 +42,8 @@ fn test2_only_precise_paths_need_migration() {\n     let t2 = (Foo(0), Foo(0));\n \n     let c = || { let _ = (&t, &t1); \n-    //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n+    //~^ ERROR: drop order\n+    //~| NOTE: for more information, see\n     //~| HELP: add a dummy let to cause `t`, `t1` to be fully captured\n         let _t = t.0;\n         let _t1 = t1.0;\n@@ -57,7 +59,8 @@ fn test3_only_by_value_need_migration() {\n     let t = (Foo(0), Foo(0));\n     let t1 = (Foo(0), Foo(0));\n     let c = || { let _ = &t; \n-    //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n+    //~^ ERROR: drop order\n+    //~| NOTE: for more information, see\n     //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n         println!(\"{:?}\", t1.1);\n@@ -74,7 +77,8 @@ fn test4_type_contains_drop_need_migration() {\n     let t = ConstainsDropField(Foo(0), Foo(0));\n \n     let c = || { let _ = &t; \n-    //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n+    //~^ ERROR: drop order\n+    //~| NOTE: for more information, see\n     //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n     };\n@@ -89,7 +93,8 @@ fn test5_drop_non_drop_aggregate_need_migration() {\n     let t = (Foo(0), Foo(0), 0i32);\n \n     let c = || { let _ = &t; \n-    //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n+    //~^ ERROR: drop order\n+    //~| NOTE: for more information, see\n     //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n     };\n@@ -102,7 +107,8 @@ fn test6_significant_insignificant_drop_aggregate_need_migration() {\n     let t = (Foo(0), String::new());\n \n     let c = || { let _ = &t; \n-    //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n+    //~^ ERROR: drop order\n+    //~| NOTE: for more information, see\n     //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.1;\n     };\n@@ -117,7 +123,8 @@ fn test7_move_closures_non_copy_types_might_need_migration() {\n     let t1 = (Foo(0), Foo(0), Foo(0));\n \n     let c = move || { let _ = (&t1, &t); \n-    //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n+    //~^ ERROR: drop order\n+    //~| NOTE: for more information, see\n     //~| HELP: add a dummy let to cause `t1`, `t` to be fully captured\n         println!(\"{:?} {:?}\", t1.1, t.1);\n     };"}, {"sha": "c479a6a54f09b47f62e623b9500e476b6232b41e", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/significant_drop.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.rs?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -23,7 +23,8 @@ fn test1_all_need_migration() {\n     let t2 = (Foo(0), Foo(0));\n \n     let c = || {\n-    //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n+    //~^ ERROR: drop order\n+    //~| NOTE: for more information, see\n     //~| HELP: add a dummy let to cause `t`, `t1`, `t2` to be fully captured\n         let _t = t.0;\n         let _t1 = t1.0;\n@@ -41,7 +42,8 @@ fn test2_only_precise_paths_need_migration() {\n     let t2 = (Foo(0), Foo(0));\n \n     let c = || {\n-    //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n+    //~^ ERROR: drop order\n+    //~| NOTE: for more information, see\n     //~| HELP: add a dummy let to cause `t`, `t1` to be fully captured\n         let _t = t.0;\n         let _t1 = t1.0;\n@@ -57,7 +59,8 @@ fn test3_only_by_value_need_migration() {\n     let t = (Foo(0), Foo(0));\n     let t1 = (Foo(0), Foo(0));\n     let c = || {\n-    //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n+    //~^ ERROR: drop order\n+    //~| NOTE: for more information, see\n     //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n         println!(\"{:?}\", t1.1);\n@@ -74,7 +77,8 @@ fn test4_type_contains_drop_need_migration() {\n     let t = ConstainsDropField(Foo(0), Foo(0));\n \n     let c = || {\n-    //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n+    //~^ ERROR: drop order\n+    //~| NOTE: for more information, see\n     //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n     };\n@@ -89,7 +93,8 @@ fn test5_drop_non_drop_aggregate_need_migration() {\n     let t = (Foo(0), Foo(0), 0i32);\n \n     let c = || {\n-    //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n+    //~^ ERROR: drop order\n+    //~| NOTE: for more information, see\n     //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n     };\n@@ -102,7 +107,8 @@ fn test6_significant_insignificant_drop_aggregate_need_migration() {\n     let t = (Foo(0), String::new());\n \n     let c = || {\n-    //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n+    //~^ ERROR: drop order\n+    //~| NOTE: for more information, see\n     //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.1;\n     };\n@@ -117,7 +123,8 @@ fn test7_move_closures_non_copy_types_might_need_migration() {\n     let t1 = (Foo(0), Foo(0), Foo(0));\n \n     let c = move || {\n-    //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n+    //~^ ERROR: drop order\n+    //~| NOTE: for more information, see\n     //~| HELP: add a dummy let to cause `t1`, `t` to be fully captured\n         println!(\"{:?} {:?}\", t1.1, t.1);\n     };"}, {"sha": "873a9100bee4b86a7e3bb926579cff7a27cc703c", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/significant_drop.stderr", "status": "modified", "additions": 37, "deletions": 21, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.stderr?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,12 +1,12 @@\n-error: drop order affected for closure because of `capture_disjoint_fields`\n+error: drop order will change in Rust 2021\n   --> $DIR/significant_drop.rs:25:13\n    |\n LL |       let c = || {\n    |  _____________^\n LL | |\n LL | |\n-LL | |         let _t = t.0;\n-LL | |         let _t1 = t1.0;\n+LL | |\n+...  |\n LL | |         let _t2 = t2.0;\n LL | |     };\n    | |_____^\n@@ -16,137 +16,153 @@ note: the lint level is defined here\n    |\n LL | #![deny(disjoint_capture_migration)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t`, `t1`, `t2` to be fully captured\n    |\n LL |     let c = || { let _ = (&t, &t1, &t2); \n LL |\n LL |\n+LL |\n LL |         let _t = t.0;\n LL |         let _t1 = t1.0;\n-LL |         let _t2 = t2.0;\n  ...\n \n-error: drop order affected for closure because of `capture_disjoint_fields`\n-  --> $DIR/significant_drop.rs:43:13\n+error: drop order will change in Rust 2021\n+  --> $DIR/significant_drop.rs:44:13\n    |\n LL |       let c = || {\n    |  _____________^\n LL | |\n LL | |\n-LL | |         let _t = t.0;\n-LL | |         let _t1 = t1.0;\n+LL | |\n+...  |\n LL | |         let _t2 = t2;\n LL | |     };\n    | |_____^\n    |\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t`, `t1` to be fully captured\n    |\n LL |     let c = || { let _ = (&t, &t1); \n LL |\n LL |\n+LL |\n LL |         let _t = t.0;\n LL |         let _t1 = t1.0;\n-LL |         let _t2 = t2;\n  ...\n \n-error: drop order affected for closure because of `capture_disjoint_fields`\n-  --> $DIR/significant_drop.rs:59:13\n+error: drop order will change in Rust 2021\n+  --> $DIR/significant_drop.rs:61:13\n    |\n LL |       let c = || {\n    |  _____________^\n LL | |\n LL | |\n+LL | |\n LL | |         let _t = t.0;\n LL | |         println!(\"{:?}\", t1.1);\n LL | |     };\n    | |_____^\n    |\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t` to be fully captured\n    |\n LL |     let c = || { let _ = &t; \n LL |\n LL |\n+LL |\n LL |         let _t = t.0;\n LL |         println!(\"{:?}\", t1.1);\n-LL |     };\n-   |\n+ ...\n \n-error: drop order affected for closure because of `capture_disjoint_fields`\n-  --> $DIR/significant_drop.rs:76:13\n+error: drop order will change in Rust 2021\n+  --> $DIR/significant_drop.rs:79:13\n    |\n LL |       let c = || {\n    |  _____________^\n LL | |\n LL | |\n+LL | |\n LL | |         let _t = t.0;\n LL | |     };\n    | |_____^\n    |\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t` to be fully captured\n    |\n LL |     let c = || { let _ = &t; \n LL |\n LL |\n+LL |\n LL |         let _t = t.0;\n LL |     };\n    |\n \n-error: drop order affected for closure because of `capture_disjoint_fields`\n-  --> $DIR/significant_drop.rs:91:13\n+error: drop order will change in Rust 2021\n+  --> $DIR/significant_drop.rs:95:13\n    |\n LL |       let c = || {\n    |  _____________^\n LL | |\n LL | |\n+LL | |\n LL | |         let _t = t.0;\n LL | |     };\n    | |_____^\n    |\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t` to be fully captured\n    |\n LL |     let c = || { let _ = &t; \n LL |\n LL |\n+LL |\n LL |         let _t = t.0;\n LL |     };\n    |\n \n-error: drop order affected for closure because of `capture_disjoint_fields`\n-  --> $DIR/significant_drop.rs:104:13\n+error: drop order will change in Rust 2021\n+  --> $DIR/significant_drop.rs:109:13\n    |\n LL |       let c = || {\n    |  _____________^\n LL | |\n LL | |\n+LL | |\n LL | |         let _t = t.1;\n LL | |     };\n    | |_____^\n    |\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t` to be fully captured\n    |\n LL |     let c = || { let _ = &t; \n LL |\n LL |\n+LL |\n LL |         let _t = t.1;\n LL |     };\n    |\n \n-error: drop order affected for closure because of `capture_disjoint_fields`\n-  --> $DIR/significant_drop.rs:119:13\n+error: drop order will change in Rust 2021\n+  --> $DIR/significant_drop.rs:125:13\n    |\n LL |       let c = move || {\n    |  _____________^\n LL | |\n LL | |\n+LL | |\n LL | |         println!(\"{:?} {:?}\", t1.1, t.1);\n LL | |     };\n    | |_____^\n    |\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t1`, `t` to be fully captured\n    |\n LL |     let c = move || { let _ = (&t1, &t); \n LL |\n LL |\n+LL |\n LL |         println!(\"{:?} {:?}\", t1.1, t.1);\n LL |     };\n    |"}, {"sha": "06db19974eb044b3fc12c88b84206269e3b0a890", "filename": "src/test/ui/closures/2229_closure_analysis/move_closure.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmove_closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmove_closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmove_closure.rs?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,9 +1,7 @@\n+// edition:2021\n+\n // Test that move closures drop derefs with `capture_disjoint_fields` enabled.\n \n-#![feature(capture_disjoint_fields)]\n-//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n-//~| NOTE: `#[warn(incomplete_features)]` on by default\n-//~| NOTE: see issue #53488 <https://github.com/rust-lang/rust/issues/53488>\n #![feature(rustc_attrs)]\n \n fn simple_move_closure() {"}, {"sha": "013cacfb9f2a565eea499842c027c5e8a0f289dd", "filename": "src/test/ui/closures/2229_closure_analysis/move_closure.stderr", "status": "modified", "additions": 43, "deletions": 52, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmove_closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmove_closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmove_closure.stderr?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: attributes on expressions are experimental\n-  --> $DIR/move_closure.rs:14:17\n+  --> $DIR/move_closure.rs:12:17\n    |\n LL |     let mut c = #[rustc_capture_analysis]\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -8,7 +8,7 @@ LL |     let mut c = #[rustc_capture_analysis]\n    = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n \n error[E0658]: attributes on expressions are experimental\n-  --> $DIR/move_closure.rs:32:17\n+  --> $DIR/move_closure.rs:30:17\n    |\n LL |     let mut c = #[rustc_capture_analysis]\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -17,7 +17,7 @@ LL |     let mut c = #[rustc_capture_analysis]\n    = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n \n error[E0658]: attributes on expressions are experimental\n-  --> $DIR/move_closure.rs:53:17\n+  --> $DIR/move_closure.rs:51:17\n    |\n LL |     let mut c = #[rustc_capture_analysis]\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -26,7 +26,7 @@ LL |     let mut c = #[rustc_capture_analysis]\n    = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n \n error[E0658]: attributes on expressions are experimental\n-  --> $DIR/move_closure.rs:76:17\n+  --> $DIR/move_closure.rs:74:17\n    |\n LL |     let mut c = #[rustc_capture_analysis]\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -35,7 +35,7 @@ LL |     let mut c = #[rustc_capture_analysis]\n    = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n \n error[E0658]: attributes on expressions are experimental\n-  --> $DIR/move_closure.rs:98:17\n+  --> $DIR/move_closure.rs:96:17\n    |\n LL |     let mut c = #[rustc_capture_analysis]\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -44,7 +44,7 @@ LL |     let mut c = #[rustc_capture_analysis]\n    = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n \n error[E0658]: attributes on expressions are experimental\n-  --> $DIR/move_closure.rs:120:13\n+  --> $DIR/move_closure.rs:118:13\n    |\n LL |     let c = #[rustc_capture_analysis]\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -53,7 +53,7 @@ LL |     let c = #[rustc_capture_analysis]\n    = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n \n error[E0658]: attributes on expressions are experimental\n-  --> $DIR/move_closure.rs:137:13\n+  --> $DIR/move_closure.rs:135:13\n    |\n LL |     let c = #[rustc_capture_analysis]\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -62,25 +62,16 @@ LL |     let c = #[rustc_capture_analysis]\n    = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n \n error[E0658]: attributes on expressions are experimental\n-  --> $DIR/move_closure.rs:154:13\n+  --> $DIR/move_closure.rs:152:13\n    |\n LL |     let c = #[rustc_capture_analysis]\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #15701 <https://github.com/rust-lang/rust/issues/15701> for more information\n    = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n \n-warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/move_closure.rs:3:12\n-   |\n-LL | #![feature(capture_disjoint_fields)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n-\n error: First Pass analysis includes:\n-  --> $DIR/move_closure.rs:17:5\n+  --> $DIR/move_closure.rs:15:5\n    |\n LL | /     move || {\n LL | |\n@@ -92,13 +83,13 @@ LL | |     };\n    | |_____^\n    |\n note: Capturing t[(0, 0),(0, 0)] -> ByValue\n-  --> $DIR/move_closure.rs:20:9\n+  --> $DIR/move_closure.rs:18:9\n    |\n LL |         t.0.0 = \"new S\".into();\n    |         ^^^^^\n \n error: Min Capture analysis includes:\n-  --> $DIR/move_closure.rs:17:5\n+  --> $DIR/move_closure.rs:15:5\n    |\n LL | /     move || {\n LL | |\n@@ -110,13 +101,13 @@ LL | |     };\n    | |_____^\n    |\n note: Min Capture t[(0, 0),(0, 0)] -> ByValue\n-  --> $DIR/move_closure.rs:20:9\n+  --> $DIR/move_closure.rs:18:9\n    |\n LL |         t.0.0 = \"new S\".into();\n    |         ^^^^^\n \n error: First Pass analysis includes:\n-  --> $DIR/move_closure.rs:35:5\n+  --> $DIR/move_closure.rs:33:5\n    |\n LL | /     move || {\n LL | |\n@@ -128,13 +119,13 @@ LL | |     };\n    | |_____^\n    |\n note: Capturing ref_s[Deref] -> UniqueImmBorrow\n-  --> $DIR/move_closure.rs:38:9\n+  --> $DIR/move_closure.rs:36:9\n    |\n LL |         *ref_s += 10;\n    |         ^^^^^^\n \n error: Min Capture analysis includes:\n-  --> $DIR/move_closure.rs:35:5\n+  --> $DIR/move_closure.rs:33:5\n    |\n LL | /     move || {\n LL | |\n@@ -146,13 +137,13 @@ LL | |     };\n    | |_____^\n    |\n note: Min Capture ref_s[Deref] -> UniqueImmBorrow\n-  --> $DIR/move_closure.rs:38:9\n+  --> $DIR/move_closure.rs:36:9\n    |\n LL |         *ref_s += 10;\n    |         ^^^^^^\n \n error: First Pass analysis includes:\n-  --> $DIR/move_closure.rs:56:5\n+  --> $DIR/move_closure.rs:54:5\n    |\n LL | /     move || {\n LL | |\n@@ -164,13 +155,13 @@ LL | |     };\n    | |_____^\n    |\n note: Capturing t[(0, 0),Deref,(0, 0)] -> UniqueImmBorrow\n-  --> $DIR/move_closure.rs:59:9\n+  --> $DIR/move_closure.rs:57:9\n    |\n LL |         t.0.0 = \"new s\".into();\n    |         ^^^^^\n \n error: Min Capture analysis includes:\n-  --> $DIR/move_closure.rs:56:5\n+  --> $DIR/move_closure.rs:54:5\n    |\n LL | /     move || {\n LL | |\n@@ -182,13 +173,13 @@ LL | |     };\n    | |_____^\n    |\n note: Min Capture t[(0, 0),Deref,(0, 0)] -> UniqueImmBorrow\n-  --> $DIR/move_closure.rs:59:9\n+  --> $DIR/move_closure.rs:57:9\n    |\n LL |         t.0.0 = \"new s\".into();\n    |         ^^^^^\n \n error: First Pass analysis includes:\n-  --> $DIR/move_closure.rs:79:5\n+  --> $DIR/move_closure.rs:77:5\n    |\n LL | /     move || {\n LL | |\n@@ -200,13 +191,13 @@ LL | |     };\n    | |_____^\n    |\n note: Capturing t[(0, 0),Deref,(0, 0)] -> ImmBorrow\n-  --> $DIR/move_closure.rs:82:18\n+  --> $DIR/move_closure.rs:80:18\n    |\n LL |         let _t = t.0.0;\n    |                  ^^^^^\n \n error: Min Capture analysis includes:\n-  --> $DIR/move_closure.rs:79:5\n+  --> $DIR/move_closure.rs:77:5\n    |\n LL | /     move || {\n LL | |\n@@ -218,13 +209,13 @@ LL | |     };\n    | |_____^\n    |\n note: Min Capture t[(0, 0),Deref,(0, 0)] -> ImmBorrow\n-  --> $DIR/move_closure.rs:82:18\n+  --> $DIR/move_closure.rs:80:18\n    |\n LL |         let _t = t.0.0;\n    |                  ^^^^^\n \n error: First Pass analysis includes:\n-  --> $DIR/move_closure.rs:101:5\n+  --> $DIR/move_closure.rs:99:5\n    |\n LL | /     move || {\n LL | |\n@@ -236,18 +227,18 @@ LL | |     };\n    | |_____^\n    |\n note: Capturing t[(0, 0),Deref,(0, 0)] -> ImmBorrow\n-  --> $DIR/move_closure.rs:104:18\n+  --> $DIR/move_closure.rs:102:18\n    |\n LL |         let _t = t.0.0;\n    |                  ^^^^^\n note: Capturing t[(0, 0)] -> ByValue\n-  --> $DIR/move_closure.rs:104:18\n+  --> $DIR/move_closure.rs:102:18\n    |\n LL |         let _t = t.0.0;\n    |                  ^^^^^\n \n error: Min Capture analysis includes:\n-  --> $DIR/move_closure.rs:101:5\n+  --> $DIR/move_closure.rs:99:5\n    |\n LL | /     move || {\n LL | |\n@@ -259,13 +250,13 @@ LL | |     };\n    | |_____^\n    |\n note: Min Capture t[(0, 0)] -> ByValue\n-  --> $DIR/move_closure.rs:104:18\n+  --> $DIR/move_closure.rs:102:18\n    |\n LL |         let _t = t.0.0;\n    |                  ^^^^^\n \n error: First Pass analysis includes:\n-  --> $DIR/move_closure.rs:123:5\n+  --> $DIR/move_closure.rs:121:5\n    |\n LL | /     move || {\n LL | |\n@@ -277,18 +268,18 @@ LL | |     };\n    | |_____^\n    |\n note: Capturing b[Deref,(0, 0)] -> ByValue\n-  --> $DIR/move_closure.rs:126:18\n+  --> $DIR/move_closure.rs:124:18\n    |\n LL |         let _t = b.0;\n    |                  ^^^\n note: Capturing b[] -> ByValue\n-  --> $DIR/move_closure.rs:126:18\n+  --> $DIR/move_closure.rs:124:18\n    |\n LL |         let _t = b.0;\n    |                  ^^^\n \n error: Min Capture analysis includes:\n-  --> $DIR/move_closure.rs:123:5\n+  --> $DIR/move_closure.rs:121:5\n    |\n LL | /     move || {\n LL | |\n@@ -300,13 +291,13 @@ LL | |     };\n    | |_____^\n    |\n note: Min Capture b[] -> ByValue\n-  --> $DIR/move_closure.rs:126:18\n+  --> $DIR/move_closure.rs:124:18\n    |\n LL |         let _t = b.0;\n    |                  ^^^\n \n error: First Pass analysis includes:\n-  --> $DIR/move_closure.rs:140:5\n+  --> $DIR/move_closure.rs:138:5\n    |\n LL | /     move || {\n LL | |\n@@ -318,13 +309,13 @@ LL | |     };\n    | |_____^\n    |\n note: Capturing b[Deref,(0, 0)] -> ByValue\n-  --> $DIR/move_closure.rs:143:24\n+  --> $DIR/move_closure.rs:141:24\n    |\n LL |         println!(\"{}\", b.0);\n    |                        ^^^\n \n error: Min Capture analysis includes:\n-  --> $DIR/move_closure.rs:140:5\n+  --> $DIR/move_closure.rs:138:5\n    |\n LL | /     move || {\n LL | |\n@@ -336,13 +327,13 @@ LL | |     };\n    | |_____^\n    |\n note: Min Capture b[] -> ByValue\n-  --> $DIR/move_closure.rs:143:24\n+  --> $DIR/move_closure.rs:141:24\n    |\n LL |         println!(\"{}\", b.0);\n    |                        ^^^\n \n error: First Pass analysis includes:\n-  --> $DIR/move_closure.rs:157:5\n+  --> $DIR/move_closure.rs:155:5\n    |\n LL | /     move || {\n LL | |\n@@ -354,13 +345,13 @@ LL | |     };\n    | |_____^\n    |\n note: Capturing t[(1, 0),Deref,(0, 0)] -> ByValue\n-  --> $DIR/move_closure.rs:160:24\n+  --> $DIR/move_closure.rs:158:24\n    |\n LL |         println!(\"{}\", t.1.0);\n    |                        ^^^^^\n \n error: Min Capture analysis includes:\n-  --> $DIR/move_closure.rs:157:5\n+  --> $DIR/move_closure.rs:155:5\n    |\n LL | /     move || {\n LL | |\n@@ -372,11 +363,11 @@ LL | |     };\n    | |_____^\n    |\n note: Min Capture t[(1, 0)] -> ByValue\n-  --> $DIR/move_closure.rs:160:24\n+  --> $DIR/move_closure.rs:158:24\n    |\n LL |         println!(\"{}\", t.1.0);\n    |                        ^^^^^\n \n-error: aborting due to 24 previous errors; 1 warning emitted\n+error: aborting due to 24 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "a8a2acfa78d2c74ce95d1f98b272e4b5be5f706a", "filename": "src/test/ui/closures/2229_closure_analysis/multilevel-path-1.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmultilevel-path-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmultilevel-path-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmultilevel-path-1.rs?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,7 +1,5 @@\n-#![feature(capture_disjoint_fields)]\n-//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n-//~| NOTE: `#[warn(incomplete_features)]` on by default\n-//~| NOTE: see issue #53488 <https://github.com/rust-lang/rust/issues/53488>\n+// edition:2021\n+\n #![feature(rustc_attrs)]\n #![allow(unused)]\n "}, {"sha": "29ad1c59198cff9c4f78a96b891f04a0a7ae99b3", "filename": "src/test/ui/closures/2229_closure_analysis/multilevel-path-1.stderr", "status": "modified", "additions": 6, "deletions": 15, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmultilevel-path-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmultilevel-path-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmultilevel-path-1.stderr?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,23 +1,14 @@\n error[E0658]: attributes on expressions are experimental\n-  --> $DIR/multilevel-path-1.rs:24:13\n+  --> $DIR/multilevel-path-1.rs:22:13\n    |\n LL |     let c = #[rustc_capture_analysis]\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #15701 <https://github.com/rust-lang/rust/issues/15701> for more information\n    = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n \n-warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/multilevel-path-1.rs:1:12\n-   |\n-LL | #![feature(capture_disjoint_fields)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n-\n error: First Pass analysis includes:\n-  --> $DIR/multilevel-path-1.rs:27:5\n+  --> $DIR/multilevel-path-1.rs:25:5\n    |\n LL | /     || {\n LL | |\n@@ -29,13 +20,13 @@ LL | |     };\n    | |_____^\n    |\n note: Capturing w[(0, 0)] -> ImmBorrow\n-  --> $DIR/multilevel-path-1.rs:30:19\n+  --> $DIR/multilevel-path-1.rs:28:19\n    |\n LL |         let wp = &w.p;\n    |                   ^^^\n \n error: Min Capture analysis includes:\n-  --> $DIR/multilevel-path-1.rs:27:5\n+  --> $DIR/multilevel-path-1.rs:25:5\n    |\n LL | /     || {\n LL | |\n@@ -47,11 +38,11 @@ LL | |     };\n    | |_____^\n    |\n note: Min Capture w[(0, 0)] -> ImmBorrow\n-  --> $DIR/multilevel-path-1.rs:30:19\n+  --> $DIR/multilevel-path-1.rs:28:19\n    |\n LL |         let wp = &w.p;\n    |                   ^^^\n \n-error: aborting due to 3 previous errors; 1 warning emitted\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "e21fe318cd105d577c442f381f4c0e2f931c7302", "filename": "src/test/ui/closures/2229_closure_analysis/multilevel-path-2.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmultilevel-path-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmultilevel-path-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmultilevel-path-2.rs?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,9 +1,5 @@\n-// FIXME(arora-aman) add run-pass once 2229 is implemented\n+// edition:2021\n \n-#![feature(capture_disjoint_fields)]\n-//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n-//~| NOTE: `#[warn(incomplete_features)]` on by default\n-//~| NOTE: see issue #53488 <https://github.com/rust-lang/rust/issues/53488>\n #![feature(rustc_attrs)]\n #![allow(unused)]\n "}, {"sha": "929cba113146b5569f251643cbb72d9f66f31c79", "filename": "src/test/ui/closures/2229_closure_analysis/multilevel-path-2.stderr", "status": "modified", "additions": 6, "deletions": 15, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmultilevel-path-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmultilevel-path-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmultilevel-path-2.stderr?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,23 +1,14 @@\n error[E0658]: attributes on expressions are experimental\n-  --> $DIR/multilevel-path-2.rs:21:13\n+  --> $DIR/multilevel-path-2.rs:17:13\n    |\n LL |     let c = #[rustc_capture_analysis]\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #15701 <https://github.com/rust-lang/rust/issues/15701> for more information\n    = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n \n-warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/multilevel-path-2.rs:3:12\n-   |\n-LL | #![feature(capture_disjoint_fields)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n-\n error: First Pass analysis includes:\n-  --> $DIR/multilevel-path-2.rs:24:5\n+  --> $DIR/multilevel-path-2.rs:20:5\n    |\n LL | /     || {\n LL | |\n@@ -29,13 +20,13 @@ LL | |     };\n    | |_____^\n    |\n note: Capturing w[(0, 0),(0, 0)] -> ImmBorrow\n-  --> $DIR/multilevel-path-2.rs:27:24\n+  --> $DIR/multilevel-path-2.rs:23:24\n    |\n LL |         println!(\"{}\", w.p.x);\n    |                        ^^^^^\n \n error: Min Capture analysis includes:\n-  --> $DIR/multilevel-path-2.rs:24:5\n+  --> $DIR/multilevel-path-2.rs:20:5\n    |\n LL | /     || {\n LL | |\n@@ -47,11 +38,11 @@ LL | |     };\n    | |_____^\n    |\n note: Min Capture w[(0, 0),(0, 0)] -> ImmBorrow\n-  --> $DIR/multilevel-path-2.rs:27:24\n+  --> $DIR/multilevel-path-2.rs:23:24\n    |\n LL |         println!(\"{}\", w.p.x);\n    |                        ^^^^^\n \n-error: aborting due to 3 previous errors; 1 warning emitted\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "f6775b3a3a5ac4a827db7e9f11250545df437de0", "filename": "src/test/ui/closures/2229_closure_analysis/nested-closure.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fnested-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fnested-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fnested-closure.rs?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,9 +1,5 @@\n-// FIXME(arora-aman) add run-pass once 2229 is implemented\n+// edition:2021\n \n-#![feature(capture_disjoint_fields)]\n-//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n-//~| NOTE: `#[warn(incomplete_features)]` on by default\n-//~| NOTE: see issue #53488 <https://github.com/rust-lang/rust/issues/53488>\n #![feature(rustc_attrs)]\n \n struct Point {"}, {"sha": "013bc74e67e1ecdf2d09a4b5d7eb3486e7900521", "filename": "src/test/ui/closures/2229_closure_analysis/nested-closure.stderr", "status": "modified", "additions": 15, "deletions": 24, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fnested-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fnested-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fnested-closure.stderr?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: attributes on expressions are experimental\n-  --> $DIR/nested-closure.rs:23:18\n+  --> $DIR/nested-closure.rs:19:18\n    |\n LL |     let mut c1 = #[rustc_capture_analysis]\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -8,59 +8,50 @@ LL |     let mut c1 = #[rustc_capture_analysis]\n    = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n \n error[E0658]: attributes on expressions are experimental\n-  --> $DIR/nested-closure.rs:33:22\n+  --> $DIR/nested-closure.rs:29:22\n    |\n LL |         let mut c2 = #[rustc_capture_analysis]\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #15701 <https://github.com/rust-lang/rust/issues/15701> for more information\n    = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n \n-warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/nested-closure.rs:3:12\n-   |\n-LL | #![feature(capture_disjoint_fields)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n-\n error: First Pass analysis includes:\n-  --> $DIR/nested-closure.rs:36:9\n+  --> $DIR/nested-closure.rs:32:9\n    |\n LL |         || p.y += incr;\n    |         ^^^^^^^^^^^^^^\n    |\n note: Capturing p[(1, 0)] -> MutBorrow\n-  --> $DIR/nested-closure.rs:36:12\n+  --> $DIR/nested-closure.rs:32:12\n    |\n LL |         || p.y += incr;\n    |            ^^^\n note: Capturing incr[] -> ImmBorrow\n-  --> $DIR/nested-closure.rs:36:19\n+  --> $DIR/nested-closure.rs:32:19\n    |\n LL |         || p.y += incr;\n    |                   ^^^^\n \n error: Min Capture analysis includes:\n-  --> $DIR/nested-closure.rs:36:9\n+  --> $DIR/nested-closure.rs:32:9\n    |\n LL |         || p.y += incr;\n    |         ^^^^^^^^^^^^^^\n    |\n note: Min Capture p[(1, 0)] -> MutBorrow\n-  --> $DIR/nested-closure.rs:36:12\n+  --> $DIR/nested-closure.rs:32:12\n    |\n LL |         || p.y += incr;\n    |            ^^^\n note: Min Capture incr[] -> ImmBorrow\n-  --> $DIR/nested-closure.rs:36:19\n+  --> $DIR/nested-closure.rs:32:19\n    |\n LL |         || p.y += incr;\n    |                   ^^^^\n \n error: First Pass analysis includes:\n-  --> $DIR/nested-closure.rs:26:5\n+  --> $DIR/nested-closure.rs:22:5\n    |\n LL | /     || {\n LL | |\n@@ -72,18 +63,18 @@ LL | |     };\n    | |_____^\n    |\n note: Capturing p[(0, 0)] -> ImmBorrow\n-  --> $DIR/nested-closure.rs:29:24\n+  --> $DIR/nested-closure.rs:25:24\n    |\n LL |         println!(\"{}\", p.x);\n    |                        ^^^\n note: Capturing p[(1, 0)] -> MutBorrow\n-  --> $DIR/nested-closure.rs:36:12\n+  --> $DIR/nested-closure.rs:32:12\n    |\n LL |         || p.y += incr;\n    |            ^^^\n \n error: Min Capture analysis includes:\n-  --> $DIR/nested-closure.rs:26:5\n+  --> $DIR/nested-closure.rs:22:5\n    |\n LL | /     || {\n LL | |\n@@ -95,16 +86,16 @@ LL | |     };\n    | |_____^\n    |\n note: Min Capture p[(0, 0)] -> ImmBorrow\n-  --> $DIR/nested-closure.rs:29:24\n+  --> $DIR/nested-closure.rs:25:24\n    |\n LL |         println!(\"{}\", p.x);\n    |                        ^^^\n note: Min Capture p[(1, 0)] -> MutBorrow\n-  --> $DIR/nested-closure.rs:36:12\n+  --> $DIR/nested-closure.rs:32:12\n    |\n LL |         || p.y += incr;\n    |            ^^^\n \n-error: aborting due to 6 previous errors; 1 warning emitted\n+error: aborting due to 6 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "0c10319314a6f10555491cd98b2fd47545225d92", "filename": "src/test/ui/closures/2229_closure_analysis/path-with-array-access.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fpath-with-array-access.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fpath-with-array-access.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fpath-with-array-access.rs?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,7 +1,5 @@\n-#![feature(capture_disjoint_fields)]\n-//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n-//~| NOTE: `#[warn(incomplete_features)]` on by default\n-//~| NOTE: see issue #53488 <https://github.com/rust-lang/rust/issues/53488>\n+// edition:2021\n+\n #![feature(rustc_attrs)]\n \n struct Point {"}, {"sha": "124b7bf6fe27052c8e77f6ecbfedf3ac7862252d", "filename": "src/test/ui/closures/2229_closure_analysis/path-with-array-access.stderr", "status": "modified", "additions": 6, "deletions": 15, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fpath-with-array-access.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fpath-with-array-access.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fpath-with-array-access.stderr?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,23 +1,14 @@\n error[E0658]: attributes on expressions are experimental\n-  --> $DIR/path-with-array-access.rs:25:13\n+  --> $DIR/path-with-array-access.rs:23:13\n    |\n LL |     let c = #[rustc_capture_analysis]\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #15701 <https://github.com/rust-lang/rust/issues/15701> for more information\n    = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n \n-warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/path-with-array-access.rs:1:12\n-   |\n-LL | #![feature(capture_disjoint_fields)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n-\n error: First Pass analysis includes:\n-  --> $DIR/path-with-array-access.rs:28:5\n+  --> $DIR/path-with-array-access.rs:26:5\n    |\n LL | /     || {\n LL | |\n@@ -29,13 +20,13 @@ LL | |     };\n    | |_____^\n    |\n note: Capturing pent[(0, 0)] -> ImmBorrow\n-  --> $DIR/path-with-array-access.rs:31:24\n+  --> $DIR/path-with-array-access.rs:29:24\n    |\n LL |         println!(\"{}\", pent.points[5].x);\n    |                        ^^^^^^^^^^^\n \n error: Min Capture analysis includes:\n-  --> $DIR/path-with-array-access.rs:28:5\n+  --> $DIR/path-with-array-access.rs:26:5\n    |\n LL | /     || {\n LL | |\n@@ -47,11 +38,11 @@ LL | |     };\n    | |_____^\n    |\n note: Min Capture pent[(0, 0)] -> ImmBorrow\n-  --> $DIR/path-with-array-access.rs:31:24\n+  --> $DIR/path-with-array-access.rs:29:24\n    |\n LL |         println!(\"{}\", pent.points[5].x);\n    |                        ^^^^^^^^^^^\n \n-error: aborting due to 3 previous errors; 1 warning emitted\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "0f288ffa95a872a0936fca437c765bbabb5ba0ec", "filename": "src/test/ui/closures/2229_closure_analysis/pattern-matching-should-fail.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fpattern-matching-should-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fpattern-matching-should-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fpattern-matching-should-fail.rs?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,7 +1,5 @@\n-#![feature(capture_disjoint_fields)]\n-//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n-//~| `#[warn(incomplete_features)]` on by default\n-//~| see issue #53488 <https://github.com/rust-lang/rust/issues/53488>\n+// edition:2021\n+\n #![feature(never_type)]\n \n // Should fake read the discriminant and throw an error"}, {"sha": "45641ea3de3e0812b30da2653a18bdf037830530", "filename": "src/test/ui/closures/2229_closure_analysis/pattern-matching-should-fail.stderr", "status": "modified", "additions": 9, "deletions": 18, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fpattern-matching-should-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fpattern-matching-should-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fpattern-matching-should-fail.stderr?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,14 +1,5 @@\n-warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/pattern-matching-should-fail.rs:1:12\n-   |\n-LL | #![feature(capture_disjoint_fields)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n-\n error[E0004]: non-exhaustive patterns: type `u8` is non-empty\n-  --> $DIR/pattern-matching-should-fail.rs:72:23\n+  --> $DIR/pattern-matching-should-fail.rs:70:23\n    |\n LL |     let c1 = || match x { };\n    |                       ^\n@@ -17,21 +8,21 @@ LL |     let c1 = || match x { };\n    = note: the matched value is of type `u8`\n \n error[E0381]: use of possibly-uninitialized variable: `x`\n-  --> $DIR/pattern-matching-should-fail.rs:10:23\n+  --> $DIR/pattern-matching-should-fail.rs:8:23\n    |\n LL |     let c1 = || match x { };\n    |                       ^ use of possibly-uninitialized `x`\n \n error[E0381]: borrow of possibly-uninitialized variable: `x`\n-  --> $DIR/pattern-matching-should-fail.rs:17:14\n+  --> $DIR/pattern-matching-should-fail.rs:15:14\n    |\n LL |     let c2 = || match x { _ => () };\n    |              ^^       - borrow occurs due to use in closure\n    |              |\n    |              use of possibly-uninitialized `x`\n \n error[E0381]: borrow of possibly-uninitialized variable: `variant`\n-  --> $DIR/pattern-matching-should-fail.rs:29:13\n+  --> $DIR/pattern-matching-should-fail.rs:27:13\n    |\n LL |     let c = || {\n    |             ^^ use of possibly-uninitialized `variant`\n@@ -40,7 +31,7 @@ LL |         match variant {\n    |               ------- borrow occurs due to use in closure\n \n error[E0381]: borrow of possibly-uninitialized variable: `variant`\n-  --> $DIR/pattern-matching-should-fail.rs:41:13\n+  --> $DIR/pattern-matching-should-fail.rs:39:13\n    |\n LL |     let c = || {\n    |             ^^ use of possibly-uninitialized `variant`\n@@ -49,24 +40,24 @@ LL |         match variant {\n    |               ------- borrow occurs due to use in closure\n \n error[E0381]: use of possibly-uninitialized variable: `g`\n-  --> $DIR/pattern-matching-should-fail.rs:57:15\n+  --> $DIR/pattern-matching-should-fail.rs:55:15\n    |\n LL |         match g { };\n    |               ^ use of possibly-uninitialized `g`\n \n error[E0381]: use of possibly-uninitialized variable: `t`\n-  --> $DIR/pattern-matching-should-fail.rs:60:19\n+  --> $DIR/pattern-matching-should-fail.rs:58:19\n    |\n LL |             match t { };\n    |                   ^ use of possibly-uninitialized `t`\n \n error[E0381]: use of possibly-uninitialized variable: `x`\n-  --> $DIR/pattern-matching-should-fail.rs:72:23\n+  --> $DIR/pattern-matching-should-fail.rs:70:23\n    |\n LL |     let c1 = || match x { };\n    |                       ^ use of possibly-uninitialized `x`\n \n-error: aborting due to 8 previous errors; 1 warning emitted\n+error: aborting due to 8 previous errors\n \n Some errors have detailed explanations: E0004, E0381.\n For more information about an error, try `rustc --explain E0004`."}, {"sha": "56f5ac44db068735218de1728f56d4608d178a50", "filename": "src/test/ui/closures/2229_closure_analysis/patterns-capture-analysis.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fpatterns-capture-analysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fpatterns-capture-analysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fpatterns-capture-analysis.rs?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,7 +1,5 @@\n-#![feature(capture_disjoint_fields)]\n-//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n-//~| NOTE: `#[warn(incomplete_features)]` on by default\n-//~| NOTE: see issue #53488 <https://github.com/rust-lang/rust/issues/53488>\n+// edition:2021\n+\n #![feature(rustc_attrs)]\n \n // Should capture the discriminant since a variant of a multivariant enum is"}, {"sha": "460813333952bd0ae18d76f84fae6c2ae99400f7", "filename": "src/test/ui/closures/2229_closure_analysis/patterns-capture-analysis.stderr", "status": "modified", "additions": 23, "deletions": 32, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fpatterns-capture-analysis.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fpatterns-capture-analysis.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fpatterns-capture-analysis.stderr?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: attributes on expressions are experimental\n-  --> $DIR/patterns-capture-analysis.rs:12:14\n+  --> $DIR/patterns-capture-analysis.rs:10:14\n    |\n LL |     let c =  #[rustc_capture_analysis]\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -8,7 +8,7 @@ LL |     let c =  #[rustc_capture_analysis]\n    = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n \n error[E0658]: attributes on expressions are experimental\n-  --> $DIR/patterns-capture-analysis.rs:33:14\n+  --> $DIR/patterns-capture-analysis.rs:31:14\n    |\n LL |     let c =  #[rustc_capture_analysis]\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -17,7 +17,7 @@ LL |     let c =  #[rustc_capture_analysis]\n    = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n \n error[E0658]: attributes on expressions are experimental\n-  --> $DIR/patterns-capture-analysis.rs:54:14\n+  --> $DIR/patterns-capture-analysis.rs:52:14\n    |\n LL |     let c =  #[rustc_capture_analysis]\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -26,7 +26,7 @@ LL |     let c =  #[rustc_capture_analysis]\n    = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n \n error[E0658]: attributes on expressions are experimental\n-  --> $DIR/patterns-capture-analysis.rs:70:14\n+  --> $DIR/patterns-capture-analysis.rs:68:14\n    |\n LL |     let c =  #[rustc_capture_analysis]\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -35,7 +35,7 @@ LL |     let c =  #[rustc_capture_analysis]\n    = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n \n error[E0658]: attributes on expressions are experimental\n-  --> $DIR/patterns-capture-analysis.rs:92:14\n+  --> $DIR/patterns-capture-analysis.rs:90:14\n    |\n LL |     let c =  #[rustc_capture_analysis]\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -44,25 +44,16 @@ LL |     let c =  #[rustc_capture_analysis]\n    = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n \n error[E0658]: attributes on expressions are experimental\n-  --> $DIR/patterns-capture-analysis.rs:116:14\n+  --> $DIR/patterns-capture-analysis.rs:114:14\n    |\n LL |     let c =  #[rustc_capture_analysis]\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #15701 <https://github.com/rust-lang/rust/issues/15701> for more information\n    = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n \n-warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/patterns-capture-analysis.rs:1:12\n-   |\n-LL | #![feature(capture_disjoint_fields)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n-\n error: First Pass analysis includes:\n-  --> $DIR/patterns-capture-analysis.rs:16:5\n+  --> $DIR/patterns-capture-analysis.rs:14:5\n    |\n LL | /     || {\n LL | |\n@@ -74,13 +65,13 @@ LL | |     };\n    | |_____^\n    |\n note: Capturing variant[] -> ImmBorrow\n-  --> $DIR/patterns-capture-analysis.rs:19:15\n+  --> $DIR/patterns-capture-analysis.rs:17:15\n    |\n LL |         match variant {\n    |               ^^^^^^^\n \n error: Min Capture analysis includes:\n-  --> $DIR/patterns-capture-analysis.rs:16:5\n+  --> $DIR/patterns-capture-analysis.rs:14:5\n    |\n LL | /     || {\n LL | |\n@@ -92,13 +83,13 @@ LL | |     };\n    | |_____^\n    |\n note: Min Capture variant[] -> ImmBorrow\n-  --> $DIR/patterns-capture-analysis.rs:19:15\n+  --> $DIR/patterns-capture-analysis.rs:17:15\n    |\n LL |         match variant {\n    |               ^^^^^^^\n \n error: First Pass analysis includes:\n-  --> $DIR/patterns-capture-analysis.rs:36:5\n+  --> $DIR/patterns-capture-analysis.rs:34:5\n    |\n LL | /     || {\n LL | |\n@@ -109,7 +100,7 @@ LL | |     };\n    | |_____^\n \n error: First Pass analysis includes:\n-  --> $DIR/patterns-capture-analysis.rs:57:5\n+  --> $DIR/patterns-capture-analysis.rs:55:5\n    |\n LL | /     || {\n LL | |\n@@ -120,7 +111,7 @@ LL | |     };\n    | |_____^\n \n error: First Pass analysis includes:\n-  --> $DIR/patterns-capture-analysis.rs:73:5\n+  --> $DIR/patterns-capture-analysis.rs:71:5\n    |\n LL | /     || {\n LL | |\n@@ -132,18 +123,18 @@ LL | |     };\n    | |_____^\n    |\n note: Capturing variant[] -> ImmBorrow\n-  --> $DIR/patterns-capture-analysis.rs:76:15\n+  --> $DIR/patterns-capture-analysis.rs:74:15\n    |\n LL |         match variant {\n    |               ^^^^^^^\n note: Capturing variant[(0, 0)] -> ImmBorrow\n-  --> $DIR/patterns-capture-analysis.rs:76:15\n+  --> $DIR/patterns-capture-analysis.rs:74:15\n    |\n LL |         match variant {\n    |               ^^^^^^^\n \n error: Min Capture analysis includes:\n-  --> $DIR/patterns-capture-analysis.rs:73:5\n+  --> $DIR/patterns-capture-analysis.rs:71:5\n    |\n LL | /     || {\n LL | |\n@@ -155,13 +146,13 @@ LL | |     };\n    | |_____^\n    |\n note: Min Capture variant[] -> ImmBorrow\n-  --> $DIR/patterns-capture-analysis.rs:76:15\n+  --> $DIR/patterns-capture-analysis.rs:74:15\n    |\n LL |         match variant {\n    |               ^^^^^^^\n \n error: First Pass analysis includes:\n-  --> $DIR/patterns-capture-analysis.rs:95:5\n+  --> $DIR/patterns-capture-analysis.rs:93:5\n    |\n LL | /     || {\n LL | |\n@@ -172,7 +163,7 @@ LL | |     };\n    | |_____^\n \n error: First Pass analysis includes:\n-  --> $DIR/patterns-capture-analysis.rs:119:5\n+  --> $DIR/patterns-capture-analysis.rs:117:5\n    |\n LL | /     || {\n LL | |\n@@ -184,13 +175,13 @@ LL | |     };\n    | |_____^\n    |\n note: Capturing variant[] -> ImmBorrow\n-  --> $DIR/patterns-capture-analysis.rs:122:15\n+  --> $DIR/patterns-capture-analysis.rs:120:15\n    |\n LL |         match variant {\n    |               ^^^^^^^\n \n error: Min Capture analysis includes:\n-  --> $DIR/patterns-capture-analysis.rs:119:5\n+  --> $DIR/patterns-capture-analysis.rs:117:5\n    |\n LL | /     || {\n LL | |\n@@ -202,11 +193,11 @@ LL | |     };\n    | |_____^\n    |\n note: Min Capture variant[] -> ImmBorrow\n-  --> $DIR/patterns-capture-analysis.rs:122:15\n+  --> $DIR/patterns-capture-analysis.rs:120:15\n    |\n LL |         match variant {\n    |               ^^^^^^^\n \n-error: aborting due to 15 previous errors; 1 warning emitted\n+error: aborting due to 15 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "7d472ad020f29444667b73af854a43dce327b785", "filename": "src/test/ui/closures/2229_closure_analysis/repr_packed.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frepr_packed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frepr_packed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frepr_packed.rs?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,7 +1,4 @@\n-#![feature(capture_disjoint_fields)]\n-//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n-//~| `#[warn(incomplete_features)]` on by default\n-//~| see issue #53488 <https://github.com/rust-lang/rust/issues/53488>\n+// edition:2021\n \n #![feature(rustc_attrs)]\n "}, {"sha": "405f66210aa55f43abfd4b6a9b610ecc0c54ea37", "filename": "src/test/ui/closures/2229_closure_analysis/repr_packed.stderr", "status": "modified", "additions": 19, "deletions": 28, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frepr_packed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frepr_packed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frepr_packed.stderr?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: attributes on expressions are experimental\n-  --> $DIR/repr_packed.rs:16:17\n+  --> $DIR/repr_packed.rs:13:17\n    |\n LL |     let mut c = #[rustc_capture_analysis]\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -8,7 +8,7 @@ LL |     let mut c = #[rustc_capture_analysis]\n    = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n \n error[E0658]: attributes on expressions are experimental\n-  --> $DIR/repr_packed.rs:47:17\n+  --> $DIR/repr_packed.rs:44:17\n    |\n LL |     let mut c = #[rustc_capture_analysis]\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -17,25 +17,16 @@ LL |     let mut c = #[rustc_capture_analysis]\n    = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n \n error[E0658]: attributes on expressions are experimental\n-  --> $DIR/repr_packed.rs:81:13\n+  --> $DIR/repr_packed.rs:78:13\n    |\n LL |     let c = #[rustc_capture_analysis]\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #15701 <https://github.com/rust-lang/rust/issues/15701> for more information\n    = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n \n-warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/repr_packed.rs:1:12\n-   |\n-LL | #![feature(capture_disjoint_fields)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n-\n error: First Pass analysis includes:\n-  --> $DIR/repr_packed.rs:19:5\n+  --> $DIR/repr_packed.rs:16:5\n    |\n LL | /     || {\n LL | |\n@@ -47,18 +38,18 @@ LL | |     };\n    | |_____^\n    |\n note: Capturing foo[(0, 0)] -> ImmBorrow\n-  --> $DIR/repr_packed.rs:22:24\n+  --> $DIR/repr_packed.rs:19:24\n    |\n LL |         let z1: &u8 = &foo.x;\n    |                        ^^^^^\n note: Capturing foo[(1, 0)] -> MutBorrow\n-  --> $DIR/repr_packed.rs:25:32\n+  --> $DIR/repr_packed.rs:22:32\n    |\n LL |         let z2: &mut u8 = &mut foo.y;\n    |                                ^^^^^\n \n error: Min Capture analysis includes:\n-  --> $DIR/repr_packed.rs:19:5\n+  --> $DIR/repr_packed.rs:16:5\n    |\n LL | /     || {\n LL | |\n@@ -70,18 +61,18 @@ LL | |     };\n    | |_____^\n    |\n note: Min Capture foo[(0, 0)] -> ImmBorrow\n-  --> $DIR/repr_packed.rs:22:24\n+  --> $DIR/repr_packed.rs:19:24\n    |\n LL |         let z1: &u8 = &foo.x;\n    |                        ^^^^^\n note: Min Capture foo[(1, 0)] -> MutBorrow\n-  --> $DIR/repr_packed.rs:25:32\n+  --> $DIR/repr_packed.rs:22:32\n    |\n LL |         let z2: &mut u8 = &mut foo.y;\n    |                                ^^^^^\n \n error: First Pass analysis includes:\n-  --> $DIR/repr_packed.rs:50:5\n+  --> $DIR/repr_packed.rs:47:5\n    |\n LL | /     || {\n LL | |\n@@ -93,13 +84,13 @@ LL | |     };\n    | |_____^\n    |\n note: Capturing foo[] -> MutBorrow\n-  --> $DIR/repr_packed.rs:54:33\n+  --> $DIR/repr_packed.rs:51:33\n    |\n LL |         let z2: &mut u16 = &mut foo.y;\n    |                                 ^^^^^\n \n error: Min Capture analysis includes:\n-  --> $DIR/repr_packed.rs:50:5\n+  --> $DIR/repr_packed.rs:47:5\n    |\n LL | /     || {\n LL | |\n@@ -111,13 +102,13 @@ LL | |     };\n    | |_____^\n    |\n note: Min Capture foo[] -> MutBorrow\n-  --> $DIR/repr_packed.rs:54:33\n+  --> $DIR/repr_packed.rs:51:33\n    |\n LL |         let z2: &mut u16 = &mut foo.y;\n    |                                 ^^^^^\n \n error: First Pass analysis includes:\n-  --> $DIR/repr_packed.rs:84:5\n+  --> $DIR/repr_packed.rs:81:5\n    |\n LL | /     || {\n LL | |\n@@ -129,18 +120,18 @@ LL | |     };\n    | |_____^\n    |\n note: Capturing foo[] -> ImmBorrow\n-  --> $DIR/repr_packed.rs:87:24\n+  --> $DIR/repr_packed.rs:84:24\n    |\n LL |         println!(\"{}\", foo.x);\n    |                        ^^^^^\n note: Capturing foo[(0, 0)] -> ByValue\n-  --> $DIR/repr_packed.rs:91:18\n+  --> $DIR/repr_packed.rs:88:18\n    |\n LL |         let _z = foo.x;\n    |                  ^^^^^\n \n error: Min Capture analysis includes:\n-  --> $DIR/repr_packed.rs:84:5\n+  --> $DIR/repr_packed.rs:81:5\n    |\n LL | /     || {\n LL | |\n@@ -152,14 +143,14 @@ LL | |     };\n    | |_____^\n    |\n note: Min Capture foo[] -> ByValue\n-  --> $DIR/repr_packed.rs:87:24\n+  --> $DIR/repr_packed.rs:84:24\n    |\n LL |         println!(\"{}\", foo.x);\n    |                        ^^^^^ foo[] used here\n ...\n LL |         let _z = foo.x;\n    |                  ^^^^^ foo[] captured as ByValue here\n \n-error: aborting due to 9 previous errors; 1 warning emitted\n+error: aborting due to 9 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "73aca288faa88b1267dc7b79f77ced534275ba23", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/box.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fbox.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fbox.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fbox.rs?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,13 +1,8 @@\n+// edition:2021\n // run-pass\n \n // Test precise capture when using boxes\n \n-#![feature(capture_disjoint_fields)]\n-//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n-//~| NOTE: `#[warn(incomplete_features)]` on by default\n-//~| NOTE: see issue #53488 <https://github.com/rust-lang/rust/issues/53488>\n-\n-\n struct MetaData { x: String, name: String }\n struct Data { m: MetaData }\n struct BoxedData(Box<Data>);"}, {"sha": "9883c01b946c97287cbfabefb56a39c77fd65967", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/box.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/18db83fde5192252fa17188ebb13bf48679db01f/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fbox.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/18db83fde5192252fa17188ebb13bf48679db01f/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fbox.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fbox.stderr?ref=18db83fde5192252fa17188ebb13bf48679db01f", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/box.rs:5:12\n-   |\n-LL | #![feature(capture_disjoint_fields)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "2c828aed528bfcb98c09731835fb5c1dc968a091", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/by_value.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fby_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fby_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fby_value.rs?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,11 +1,9 @@\n+// edition:2021\n // run-pass\n \n // Test that ByValue captures compile sucessefully especially when the captures are\n // derefenced within the closure.\n \n-#![feature(capture_disjoint_fields)]\n-//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n-\n #[derive(Debug, Default)]\n struct SomeLargeType;\n struct MuchLargerType([SomeLargeType; 32]);"}, {"sha": "98715c6b9436589e991cef711ef2a847ad29cde3", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/by_value.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/18db83fde5192252fa17188ebb13bf48679db01f/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fby_value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/18db83fde5192252fa17188ebb13bf48679db01f/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fby_value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fby_value.stderr?ref=18db83fde5192252fa17188ebb13bf48679db01f", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/by_value.rs:6:12\n-   |\n-LL | #![feature(capture_disjoint_fields)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "3cb1eb32952d84fe6abd5096dd79ee2059aeff49", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/capture-disjoint-field-struct.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fcapture-disjoint-field-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fcapture-disjoint-field-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fcapture-disjoint-field-struct.rs?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,13 +1,9 @@\n+// edition:2021\n // run-pass\n \n // Test that we can immutably borrow field of an instance of a structure from within a closure,\n // while having a mutable borrow to another field of the same instance outside the closure.\n \n-#![feature(capture_disjoint_fields)]\n-//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n-//~| NOTE: `#[warn(incomplete_features)]` on by default\n-//~| NOTE: see issue #53488 <https://github.com/rust-lang/rust/issues/53488>\n-\n struct Point {\n     x: i32,\n     y: i32,"}, {"sha": "9b0dea770fba2cfec72ffcc59fdaab4ab16510c0", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/capture-disjoint-field-struct.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/18db83fde5192252fa17188ebb13bf48679db01f/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fcapture-disjoint-field-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/18db83fde5192252fa17188ebb13bf48679db01f/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fcapture-disjoint-field-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fcapture-disjoint-field-struct.stderr?ref=18db83fde5192252fa17188ebb13bf48679db01f", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/capture-disjoint-field-struct.rs:6:12\n-   |\n-LL | #![feature(capture_disjoint_fields)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "0f79b7ae7b8c623eb98849cdd0415e9f7b9e592f", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/capture-disjoint-field-tuple-mut.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fcapture-disjoint-field-tuple-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fcapture-disjoint-field-tuple-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fcapture-disjoint-field-tuple-mut.rs?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,12 +1,9 @@\n+// edition:2021\n // run-pass\n \n // Test that we can mutate an element of a tuple from within a closure\n // while immutably borrowing another element of the same tuple outside the closure.\n \n-#![feature(capture_disjoint_fields)]\n-//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n-//~| NOTE: `#[warn(incomplete_features)]` on by default\n-//~| NOTE: see issue #53488 <https://github.com/rust-lang/rust/issues/53488>\n #![feature(rustc_attrs)]\n \n fn main() {"}, {"sha": "28d091539527961af23ba285cb5866fa80e55192", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/capture-disjoint-field-tuple-mut.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/18db83fde5192252fa17188ebb13bf48679db01f/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fcapture-disjoint-field-tuple-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/18db83fde5192252fa17188ebb13bf48679db01f/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fcapture-disjoint-field-tuple-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fcapture-disjoint-field-tuple-mut.stderr?ref=18db83fde5192252fa17188ebb13bf48679db01f", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/capture-disjoint-field-tuple-mut.rs:6:12\n-   |\n-LL | #![feature(capture_disjoint_fields)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "81f0328b9ba5ff0bd2864764c92805fa9f25c442", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/capture-disjoint-field-tuple.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fcapture-disjoint-field-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fcapture-disjoint-field-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fcapture-disjoint-field-tuple.rs?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,12 +1,9 @@\n+// edition:2021\n // run-pass\n \n // Test that we can immutably borrow an element of a tuple from within a closure,\n // while having a mutable borrow to another element of the same tuple outside the closure.\n \n-#![feature(capture_disjoint_fields)]\n-//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n-//~| NOTE: `#[warn(incomplete_features)]` on by default\n-//~| NOTE: see issue #53488 <https://github.com/rust-lang/rust/issues/53488>\n #![feature(rustc_attrs)]\n \n fn main() {"}, {"sha": "4fb37f85f88b57975f9b3de55cc9bfbe997c1408", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/capture-disjoint-field-tuple.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/18db83fde5192252fa17188ebb13bf48679db01f/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fcapture-disjoint-field-tuple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/18db83fde5192252fa17188ebb13bf48679db01f/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fcapture-disjoint-field-tuple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fcapture-disjoint-field-tuple.stderr?ref=18db83fde5192252fa17188ebb13bf48679db01f", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/capture-disjoint-field-tuple.rs:6:12\n-   |\n-LL | #![feature(capture_disjoint_fields)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "cea02fbe15d34978a16678420693732dceb28c4d", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/capture_with_wildcard_match.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fcapture_with_wildcard_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fcapture_with_wildcard_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fcapture_with_wildcard_match.rs?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,6 +1,5 @@\n+// edition:2021\n //check-pass\n-#![feature(capture_disjoint_fields)]\n-//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n \n fn test1() {\n     let foo : [Vec<u8>; 3] = [\"String\".into(), \"String\".into(), \"String\".into()];"}, {"sha": "2c17a189afbbc9b9b118f030e7d3a2aa70f66dde", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/capture_with_wildcard_match.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/18db83fde5192252fa17188ebb13bf48679db01f/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fcapture_with_wildcard_match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/18db83fde5192252fa17188ebb13bf48679db01f/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fcapture_with_wildcard_match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fcapture_with_wildcard_match.stderr?ref=18db83fde5192252fa17188ebb13bf48679db01f", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/capture_with_wildcard_match.rs:2:12\n-   |\n-LL | #![feature(capture_disjoint_fields)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "5c278bff90bb0acafeacd70dd3d5128b1a314111", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/destructure-pattern-closure-within-closure.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fdestructure-pattern-closure-within-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fdestructure-pattern-closure-within-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fdestructure-pattern-closure-within-closure.rs?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,6 +1,5 @@\n-//check-pass\n-#![feature(capture_disjoint_fields)]\n-//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n+// edition:2021\n+// check-pass\n #![warn(unused)]\n \n fn main() {"}, {"sha": "40274c88318c3d4ff6ddda58216f55997a2f903c", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/destructure-pattern-closure-within-closure.stderr", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fdestructure-pattern-closure-within-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fdestructure-pattern-closure-within-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fdestructure-pattern-closure-within-closure.stderr?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,30 +1,21 @@\n-warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/destructure-pattern-closure-within-closure.rs:2:12\n-   |\n-LL | #![feature(capture_disjoint_fields)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n-\n warning: unused variable: `t2`\n-  --> $DIR/destructure-pattern-closure-within-closure.rs:14:21\n+  --> $DIR/destructure-pattern-closure-within-closure.rs:13:21\n    |\n LL |             let (_, t2) = t;\n    |                     ^^ help: if this is intentional, prefix it with an underscore: `_t2`\n    |\n note: the lint level is defined here\n-  --> $DIR/destructure-pattern-closure-within-closure.rs:4:9\n+  --> $DIR/destructure-pattern-closure-within-closure.rs:3:9\n    |\n LL | #![warn(unused)]\n    |         ^^^^^^\n    = note: `#[warn(unused_variables)]` implied by `#[warn(unused)]`\n \n warning: unused variable: `g2`\n-  --> $DIR/destructure-pattern-closure-within-closure.rs:11:17\n+  --> $DIR/destructure-pattern-closure-within-closure.rs:10:17\n    |\n LL |         let (_, g2) = g;\n    |                 ^^ help: if this is intentional, prefix it with an underscore: `_g2`\n \n-warning: 3 warnings emitted\n+warning: 2 warnings emitted\n "}, {"sha": "07adbee03f968c71009f644ee0793148e72ff743", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/destructure_patterns.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fdestructure_patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fdestructure_patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fdestructure_patterns.rs?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,6 +1,5 @@\n-//check-pass\n-#![feature(capture_disjoint_fields)]\n-//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n+// edition:2021\n+// check-pass\n #![warn(unused)]\n \n struct Point {"}, {"sha": "6523f2b34d537c076a53d36e20a5b633c06b6878", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/destructure_patterns.stderr", "status": "modified", "additions": 10, "deletions": 19, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fdestructure_patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fdestructure_patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fdestructure_patterns.stderr?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,66 +1,57 @@\n-warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/destructure_patterns.rs:2:12\n-   |\n-LL | #![feature(capture_disjoint_fields)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n-\n warning: unused variable: `t1`\n-  --> $DIR/destructure_patterns.rs:15:14\n+  --> $DIR/destructure_patterns.rs:14:14\n    |\n LL |         let (t1, t2) = t;\n    |              ^^ help: if this is intentional, prefix it with an underscore: `_t1`\n    |\n note: the lint level is defined here\n-  --> $DIR/destructure_patterns.rs:4:9\n+  --> $DIR/destructure_patterns.rs:3:9\n    |\n LL | #![warn(unused)]\n    |         ^^^^^^\n    = note: `#[warn(unused_variables)]` implied by `#[warn(unused)]`\n \n warning: unused variable: `t2`\n-  --> $DIR/destructure_patterns.rs:15:18\n+  --> $DIR/destructure_patterns.rs:14:18\n    |\n LL |         let (t1, t2) = t;\n    |                  ^^ help: if this is intentional, prefix it with an underscore: `_t2`\n \n warning: unused variable: `t1`\n-  --> $DIR/destructure_patterns.rs:27:14\n+  --> $DIR/destructure_patterns.rs:26:14\n    |\n LL |         let (t1, _) = t;\n    |              ^^ help: if this is intentional, prefix it with an underscore: `_t1`\n \n warning: unused variable: `t2`\n-  --> $DIR/destructure_patterns.rs:38:17\n+  --> $DIR/destructure_patterns.rs:37:17\n    |\n LL |         let (_, t2) = t;\n    |                 ^^ help: if this is intentional, prefix it with an underscore: `_t2`\n \n warning: unused variable: `t`\n-  --> $DIR/destructure_patterns.rs:46:9\n+  --> $DIR/destructure_patterns.rs:45:9\n    |\n LL |     let t = (String::from(\"Hello\"), String::from(\"World\"));\n    |         ^ help: if this is intentional, prefix it with an underscore: `_t`\n \n warning: unused variable: `x`\n-  --> $DIR/destructure_patterns.rs:92:21\n+  --> $DIR/destructure_patterns.rs:91:21\n    |\n LL |         let Point { x, y } = p;\n    |                     ^ help: try ignoring the field: `x: _`\n \n warning: unused variable: `x`\n-  --> $DIR/destructure_patterns.rs:84:9\n+  --> $DIR/destructure_patterns.rs:83:9\n    |\n LL |     let x = 0;\n    |         ^ help: if this is intentional, prefix it with an underscore: `_x`\n \n warning: unused variable: `tup`\n-  --> $DIR/destructure_patterns.rs:86:9\n+  --> $DIR/destructure_patterns.rs:85:9\n    |\n LL |     let tup = (1, 2);\n    |         ^^^ help: if this is intentional, prefix it with an underscore: `_tup`\n \n-warning: 9 warnings emitted\n+warning: 8 warnings emitted\n "}, {"sha": "88a9816a05263b4024f4f18b299c2fb52da371aa", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/disjoint-capture-in-same-closure.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fdisjoint-capture-in-same-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fdisjoint-capture-in-same-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fdisjoint-capture-in-same-closure.rs?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,10 +1,6 @@\n+// edition:2021\n // run-pass\n \n-#![feature(capture_disjoint_fields)]\n-//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n-//~| NOTE: `#[warn(incomplete_features)]` on by default\n-//~| NOTE: see issue #53488 <https://github.com/rust-lang/rust/issues/53488>\n-\n // Tests that if a closure uses indivual fields of the same object\n // then that case is handled properly.\n "}, {"sha": "bba90f8917accaeea05a860a4f857e01015d2e41", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/disjoint-capture-in-same-closure.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/18db83fde5192252fa17188ebb13bf48679db01f/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fdisjoint-capture-in-same-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/18db83fde5192252fa17188ebb13bf48679db01f/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fdisjoint-capture-in-same-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fdisjoint-capture-in-same-closure.stderr?ref=18db83fde5192252fa17188ebb13bf48679db01f", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/disjoint-capture-in-same-closure.rs:3:12\n-   |\n-LL | #![feature(capture_disjoint_fields)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "477fdd613f521a1e4556baf3d2be0cbbc15c26e4", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/drop_then_use_fake_reads.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fdrop_then_use_fake_reads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fdrop_then_use_fake_reads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fdrop_then_use_fake_reads.rs?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,6 +1,5 @@\n-//check-pass\n-#![feature(capture_disjoint_fields)]\n-//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n+// edition:2021\n+// check-pass\n #![feature(rustc_attrs)]\n \n fn main() {"}, {"sha": "7f811875d1363c425d65caf565b8b19319ef1eb6", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/drop_then_use_fake_reads.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/18db83fde5192252fa17188ebb13bf48679db01f/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fdrop_then_use_fake_reads.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/18db83fde5192252fa17188ebb13bf48679db01f/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fdrop_then_use_fake_reads.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fdrop_then_use_fake_reads.stderr?ref=18db83fde5192252fa17188ebb13bf48679db01f", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/drop_then_use_fake_reads.rs:2:12\n-   |\n-LL | #![feature(capture_disjoint_fields)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "e19f5ff1bae4dfc1e7cd450c6fc256e40b9b48ae", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/filter-on-struct-member.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Ffilter-on-struct-member.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Ffilter-on-struct-member.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Ffilter-on-struct-member.rs?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,12 +1,8 @@\n+// edition:2021\n // run-pass\n \n // Test disjoint capture within an impl block\n \n-#![feature(capture_disjoint_fields)]\n-//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n-//~| NOTE: `#[warn(incomplete_features)]` on by default\n-//~| NOTE: see issue #53488 <https://github.com/rust-lang/rust/issues/53488>\n-\n struct Filter {\n     div: i32,\n }"}, {"sha": "6930e18992ae2fb424ad7be269d8888d75b9d3b2", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/filter-on-struct-member.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/18db83fde5192252fa17188ebb13bf48679db01f/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Ffilter-on-struct-member.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/18db83fde5192252fa17188ebb13bf48679db01f/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Ffilter-on-struct-member.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Ffilter-on-struct-member.stderr?ref=18db83fde5192252fa17188ebb13bf48679db01f", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/filter-on-struct-member.rs:5:12\n-   |\n-LL | #![feature(capture_disjoint_fields)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "1286613cb13badccde26aaae09859b46f65795fa", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/fru_syntax.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Ffru_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Ffru_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Ffru_syntax.rs?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,13 +1,9 @@\n+// edition:2021\n // run-pass\n \n // Test that functional record update/struct update syntax works inside\n // a closure when the feature `capture_disjoint_fields` is enabled.\n \n-#![feature(capture_disjoint_fields)]\n-//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n-//~| NOTE: `#[warn(incomplete_features)]` on by default\n-//~| NOTE: see issue #53488 <https://github.com/rust-lang/rust/issues/53488>\n-\n #[derive(Clone)]\n struct S {\n     a: String,"}, {"sha": "7ed73abba8608ec1d01b91d4e8c53e39eaf094dd", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/fru_syntax.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/18db83fde5192252fa17188ebb13bf48679db01f/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Ffru_syntax.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/18db83fde5192252fa17188ebb13bf48679db01f/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Ffru_syntax.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Ffru_syntax.stderr?ref=18db83fde5192252fa17188ebb13bf48679db01f", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/fru_syntax.rs:6:12\n-   |\n-LL | #![feature(capture_disjoint_fields)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "d2375aa69ec257ad4cec1d0e068895f8d2782773", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/lit-pattern-matching-with-methods.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Flit-pattern-matching-with-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Flit-pattern-matching-with-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Flit-pattern-matching-with-methods.rs?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,6 +1,5 @@\n+// edition:2021\n //check-pass\n-#![feature(capture_disjoint_fields)]\n-//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n #![warn(unused)]\n #![feature(rustc_attrs)]\n #![feature(btree_drain_filter)]"}, {"sha": "bc046ecad6867d20142d8d0cd6b660d47a24a18b", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/lit-pattern-matching-with-methods.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/18db83fde5192252fa17188ebb13bf48679db01f/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Flit-pattern-matching-with-methods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/18db83fde5192252fa17188ebb13bf48679db01f/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Flit-pattern-matching-with-methods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Flit-pattern-matching-with-methods.stderr?ref=18db83fde5192252fa17188ebb13bf48679db01f", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/lit-pattern-matching-with-methods.rs:2:12\n-   |\n-LL | #![feature(capture_disjoint_fields)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "65c8a5a7850fec4ad66863570e43722459547e50", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/move_closure.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fmove_closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fmove_closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fmove_closure.rs?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,10 +1,8 @@\n+// edition:2021\n // run-pass\n \n // Test that move closures compile properly with `capture_disjoint_fields` enabled.\n \n-#![feature(capture_disjoint_fields)]\n-//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n-\n fn simple_ref() {\n     let mut s = 10;\n     let ref_s = &mut s;"}, {"sha": "c1d8ba575d6fd0bcbf428d25ac4f6525a55c7683", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/move_closure.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/18db83fde5192252fa17188ebb13bf48679db01f/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fmove_closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/18db83fde5192252fa17188ebb13bf48679db01f/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fmove_closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fmove_closure.stderr?ref=18db83fde5192252fa17188ebb13bf48679db01f", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/move_closure.rs:5:12\n-   |\n-LL | #![feature(capture_disjoint_fields)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "b8e464031813bd42a71e8966570c7fe8e96827ab", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/multilevel-path-1.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fmultilevel-path-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fmultilevel-path-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fmultilevel-path-1.rs?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,3 +1,4 @@\n+// edition:2021\n // run-pass\n \n // Test that closures can catpure paths that are more precise than just one level\n@@ -7,10 +8,6 @@\n // while being able to mutate another path outside the closure, where the two paths are disjoint\n // after applying two projections on the root variable.\n \n-#![feature(capture_disjoint_fields)]\n-//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n-//~| NOTE: `#[warn(incomplete_features)]` on by default\n-//~| NOTE: see issue #53488 <https://github.com/rust-lang/rust/issues/53488>\n #![allow(unused)]\n \n struct Point {"}, {"sha": "94b877522f4ae2c56b7896ad878dd4129e5febeb", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/multilevel-path-1.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/18db83fde5192252fa17188ebb13bf48679db01f/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fmultilevel-path-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/18db83fde5192252fa17188ebb13bf48679db01f/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fmultilevel-path-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fmultilevel-path-1.stderr?ref=18db83fde5192252fa17188ebb13bf48679db01f", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/multilevel-path-1.rs:10:12\n-   |\n-LL | #![feature(capture_disjoint_fields)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "11a324d8a34e361c7da8db413e55b22ba87ad153", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/multilevel-path-2.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fmultilevel-path-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fmultilevel-path-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fmultilevel-path-2.rs?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,9 +1,6 @@\n+// edition:2021\n // run-pass\n \n-#![feature(capture_disjoint_fields)]\n-//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n-//~| NOTE: `#[warn(incomplete_features)]` on by default\n-//~| NOTE: see issue #53488 <https://github.com/rust-lang/rust/issues/53488>\n #![allow(unused)]\n \n // If the closures can handle such precison we should be able to read one path in the closure"}, {"sha": "100a0e167c5810eb18ccef998b8511b50836dbbf", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/multilevel-path-2.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/18db83fde5192252fa17188ebb13bf48679db01f/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fmultilevel-path-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/18db83fde5192252fa17188ebb13bf48679db01f/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fmultilevel-path-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fmultilevel-path-2.stderr?ref=18db83fde5192252fa17188ebb13bf48679db01f", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/multilevel-path-2.rs:3:12\n-   |\n-LL | #![feature(capture_disjoint_fields)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "8fc0efb60b755e1d681005c86e5f86a1efc00563", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/multilevel-path-3.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fmultilevel-path-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fmultilevel-path-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fmultilevel-path-3.rs?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,9 +1,6 @@\n+// edition:2021\n // run-pass\n \n-#![feature(capture_disjoint_fields)]\n-//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n-//~| NOTE: `#[warn(incomplete_features)]` on by default\n-//~| NOTE: see issue #53488 <https://github.com/rust-lang/rust/issues/53488>\n #![allow(unused)]\n \n // Test that when `capture_disjoint_fields` is enabled we can read a path"}, {"sha": "cf5be6a00e9a4c055878df5c7145419e754f8f87", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/multilevel-path-3.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/18db83fde5192252fa17188ebb13bf48679db01f/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fmultilevel-path-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/18db83fde5192252fa17188ebb13bf48679db01f/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fmultilevel-path-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fmultilevel-path-3.stderr?ref=18db83fde5192252fa17188ebb13bf48679db01f", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/multilevel-path-3.rs:3:12\n-   |\n-LL | #![feature(capture_disjoint_fields)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "9f0c4d96aa5d923429db5dbce51a837f33d702a3", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/mut_ref.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fmut_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fmut_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fmut_ref.rs?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,11 +1,9 @@\n+// edition:2021\n // run-pass\n \n // Test that we can mutate a place through a mut-borrow\n // that is captured by the closure\n \n-#![feature(capture_disjoint_fields)]\n-//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n-\n // Check that we can mutate when one deref is required\n fn mut_ref_1() {\n     let mut x = String::new();"}, {"sha": "4b37a0b405f5e0a485a8b9c7cfbdaa756e07ce5f", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/mut_ref.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/18db83fde5192252fa17188ebb13bf48679db01f/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fmut_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/18db83fde5192252fa17188ebb13bf48679db01f/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fmut_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fmut_ref.stderr?ref=18db83fde5192252fa17188ebb13bf48679db01f", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/mut_ref.rs:6:12\n-   |\n-LL | #![feature(capture_disjoint_fields)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "bb784774b8cd439180a05d2a6e12e15db57b6982", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/mut_ref_struct_mem.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fmut_ref_struct_mem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fmut_ref_struct_mem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fmut_ref_struct_mem.rs?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,3 +1,4 @@\n+// edition:2021\n // run-pass\n \n // Test that we can mutate a place through a mut-borrow\n@@ -6,9 +7,6 @@\n // More specifically we test that the if the mutable reference isn't root variable of a capture\n // but rather accessed while acessing the precise capture.\n \n-#![feature(capture_disjoint_fields)]\n-//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n-\n fn mut_tuple() {\n     let mut t = (10, 10);\n "}, {"sha": "418ab29098b2a59b89bcf8727446b40cdcb0059b", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/mut_ref_struct_mem.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/18db83fde5192252fa17188ebb13bf48679db01f/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fmut_ref_struct_mem.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/18db83fde5192252fa17188ebb13bf48679db01f/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fmut_ref_struct_mem.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fmut_ref_struct_mem.stderr?ref=18db83fde5192252fa17188ebb13bf48679db01f", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/mut_ref_struct_mem.rs:9:12\n-   |\n-LL | #![feature(capture_disjoint_fields)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "a80b40bb46957b8f871af21d720e43d1c326f691", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/nested-closure.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fnested-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fnested-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fnested-closure.rs?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,12 +1,8 @@\n+// edition:2021\n // run-pass\n \n // Test whether if we can do precise capture when using nested clsoure.\n \n-#![feature(capture_disjoint_fields)]\n-//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n-//~| NOTE: `#[warn(incomplete_features)]` on by default\n-//~| NOTE: see issue #53488 <https://github.com/rust-lang/rust/issues/53488>\n-\n struct Point {\n     x: i32,\n     y: i32,"}, {"sha": "293aa82ce9feaf73b2e3b996db006a94488e1db0", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/nested-closure.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/18db83fde5192252fa17188ebb13bf48679db01f/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fnested-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/18db83fde5192252fa17188ebb13bf48679db01f/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fnested-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fnested-closure.stderr?ref=18db83fde5192252fa17188ebb13bf48679db01f", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/nested-closure.rs:5:12\n-   |\n-LL | #![feature(capture_disjoint_fields)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "045fe78040a922e330fb926908e33ba64ec74f9a", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/struct-pattern-matching-with-methods.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fstruct-pattern-matching-with-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fstruct-pattern-matching-with-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fstruct-pattern-matching-with-methods.rs?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,6 +1,5 @@\n+// edition:2021\n //check-pass\n-#![feature(capture_disjoint_fields)]\n-//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n #![warn(unused)]\n #![feature(rustc_attrs)]\n "}, {"sha": "3e4303a3710df961c03aaa85fbc494f7d77c8a66", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/struct-pattern-matching-with-methods.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/18db83fde5192252fa17188ebb13bf48679db01f/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fstruct-pattern-matching-with-methods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/18db83fde5192252fa17188ebb13bf48679db01f/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fstruct-pattern-matching-with-methods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fstruct-pattern-matching-with-methods.stderr?ref=18db83fde5192252fa17188ebb13bf48679db01f", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/struct-pattern-matching-with-methods.rs:2:12\n-   |\n-LL | #![feature(capture_disjoint_fields)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "f3f44433ccf3dbc9b4934659251c3f36643ecdea", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/tuple-struct-pattern-matching-with-methods.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Ftuple-struct-pattern-matching-with-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Ftuple-struct-pattern-matching-with-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Ftuple-struct-pattern-matching-with-methods.rs?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,6 +1,5 @@\n+// edition:2021\n //check-pass\n-#![feature(capture_disjoint_fields)]\n-//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n \n #[derive(Copy, Clone)]\n enum PointType {"}, {"sha": "ded0e37b0f366eea3303cdd6440cab14bb53f73f", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/tuple-struct-pattern-matching-with-methods.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/18db83fde5192252fa17188ebb13bf48679db01f/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Ftuple-struct-pattern-matching-with-methods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/18db83fde5192252fa17188ebb13bf48679db01f/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Ftuple-struct-pattern-matching-with-methods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Ftuple-struct-pattern-matching-with-methods.stderr?ref=18db83fde5192252fa17188ebb13bf48679db01f", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/tuple-struct-pattern-matching-with-methods.rs:2:12\n-   |\n-LL | #![feature(capture_disjoint_fields)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "8e4f91c27e224d5c82405b91621700c7193fd917", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/unsafe_ptr.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Funsafe_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Funsafe_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Funsafe_ptr.rs?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,10 +1,8 @@\n+// edition:2021\n // run-pass\n \n // Test that we can use raw ptrs when using `capture_disjoint_fields`.\n \n-#![feature(capture_disjoint_fields)]\n-//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n-\n #[derive(Debug)]\n struct S {\n     s: String,"}, {"sha": "c64c8b72e81512fc16d10467ca233e7c7fd5c8fe", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/unsafe_ptr.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/18db83fde5192252fa17188ebb13bf48679db01f/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Funsafe_ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/18db83fde5192252fa17188ebb13bf48679db01f/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Funsafe_ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Funsafe_ptr.stderr?ref=18db83fde5192252fa17188ebb13bf48679db01f", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/unsafe_ptr.rs:5:12\n-   |\n-LL | #![feature(capture_disjoint_fields)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "0206927cc59e948a9de617ce884fcc1f28534c6a", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/use_of_mutable_borrow_and_fake_reads.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fuse_of_mutable_borrow_and_fake_reads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fuse_of_mutable_borrow_and_fake_reads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fuse_of_mutable_borrow_and_fake_reads.rs?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,6 +1,5 @@\n+// edition:2021\n //check-pass\n-#![feature(capture_disjoint_fields)]\n-//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n #![feature(rustc_attrs)]\n \n fn main() {"}, {"sha": "7d16d77bf737ec6c94e2ece89fcd9c69877a075a", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/use_of_mutable_borrow_and_fake_reads.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/18db83fde5192252fa17188ebb13bf48679db01f/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fuse_of_mutable_borrow_and_fake_reads.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/18db83fde5192252fa17188ebb13bf48679db01f/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fuse_of_mutable_borrow_and_fake_reads.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fuse_of_mutable_borrow_and_fake_reads.stderr?ref=18db83fde5192252fa17188ebb13bf48679db01f", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/use_of_mutable_borrow_and_fake_reads.rs:2:12\n-   |\n-LL | #![feature(capture_disjoint_fields)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "563095d440d24e9274602016cbce32357e66a707", "filename": "src/test/ui/closures/2229_closure_analysis/simple-struct-min-capture.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fsimple-struct-min-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fsimple-struct-min-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fsimple-struct-min-capture.rs?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,9 +1,5 @@\n-// FIXME(arora-aman) add run-pass once 2229 is implemented\n+// edition:2021\n \n-#![feature(capture_disjoint_fields)]\n-//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n-//~| NOTE: `#[warn(incomplete_features)]` on by default\n-//~| NOTE: see issue #53488 <https://github.com/rust-lang/rust/issues/53488>\n #![feature(rustc_attrs)]\n \n // Test to ensure that min analysis meets capture kind for all paths captured."}, {"sha": "05d79797ab3c0e2e632bee2cb555859f03d59a3b", "filename": "src/test/ui/closures/2229_closure_analysis/simple-struct-min-capture.stderr", "status": "modified", "additions": 7, "deletions": 16, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fsimple-struct-min-capture.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fsimple-struct-min-capture.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fsimple-struct-min-capture.stderr?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,23 +1,14 @@\n error[E0658]: attributes on expressions are experimental\n-  --> $DIR/simple-struct-min-capture.rs:27:17\n+  --> $DIR/simple-struct-min-capture.rs:23:17\n    |\n LL |     let mut c = #[rustc_capture_analysis]\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #15701 <https://github.com/rust-lang/rust/issues/15701> for more information\n    = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n \n-warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/simple-struct-min-capture.rs:3:12\n-   |\n-LL | #![feature(capture_disjoint_fields)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n-\n error: First Pass analysis includes:\n-  --> $DIR/simple-struct-min-capture.rs:30:5\n+  --> $DIR/simple-struct-min-capture.rs:26:5\n    |\n LL | /     || {\n LL | |\n@@ -29,18 +20,18 @@ LL | |     };\n    | |_____^\n    |\n note: Capturing p[(0, 0)] -> MutBorrow\n-  --> $DIR/simple-struct-min-capture.rs:33:9\n+  --> $DIR/simple-struct-min-capture.rs:29:9\n    |\n LL |         p.x += 10;\n    |         ^^^\n note: Capturing p[] -> ImmBorrow\n-  --> $DIR/simple-struct-min-capture.rs:36:26\n+  --> $DIR/simple-struct-min-capture.rs:32:26\n    |\n LL |         println!(\"{:?}\", p);\n    |                          ^\n \n error: Min Capture analysis includes:\n-  --> $DIR/simple-struct-min-capture.rs:30:5\n+  --> $DIR/simple-struct-min-capture.rs:26:5\n    |\n LL | /     || {\n LL | |\n@@ -52,14 +43,14 @@ LL | |     };\n    | |_____^\n    |\n note: Min Capture p[] -> MutBorrow\n-  --> $DIR/simple-struct-min-capture.rs:33:9\n+  --> $DIR/simple-struct-min-capture.rs:29:9\n    |\n LL |         p.x += 10;\n    |         ^^^ p[] captured as MutBorrow here\n ...\n LL |         println!(\"{:?}\", p);\n    |                          ^ p[] used here\n \n-error: aborting due to 3 previous errors; 1 warning emitted\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "eab9f9d08a9f634ca3f591b346846a2070835fcc", "filename": "src/test/ui/closures/2229_closure_analysis/unsafe_ptr.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Funsafe_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Funsafe_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Funsafe_ptr.rs?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,10 +1,9 @@\n+// edition:2021\n+\n // Test that we restrict precision of a capture when we access a raw ptr,\n // i.e. the capture doesn't deref the raw ptr.\n \n-#![feature(capture_disjoint_fields)]\n-//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n-//~| `#[warn(incomplete_features)]` on by default\n-//~| see issue #53488 <https://github.com/rust-lang/rust/issues/53488>\n+\n #![feature(rustc_attrs)]\n \n #[derive(Debug)]"}, {"sha": "e740a4d2d6b803a10b6a5ab55de08f13e3b8e7e8", "filename": "src/test/ui/closures/2229_closure_analysis/unsafe_ptr.stderr", "status": "modified", "additions": 11, "deletions": 20, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Funsafe_ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Funsafe_ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Funsafe_ptr.stderr?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: attributes on expressions are experimental\n-  --> $DIR/unsafe_ptr.rs:26:13\n+  --> $DIR/unsafe_ptr.rs:25:13\n    |\n LL |     let c = #[rustc_capture_analysis]\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -8,25 +8,16 @@ LL |     let c = #[rustc_capture_analysis]\n    = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n \n error[E0658]: attributes on expressions are experimental\n-  --> $DIR/unsafe_ptr.rs:46:13\n+  --> $DIR/unsafe_ptr.rs:45:13\n    |\n LL |     let c = #[rustc_capture_analysis]\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #15701 <https://github.com/rust-lang/rust/issues/15701> for more information\n    = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n \n-warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/unsafe_ptr.rs:4:12\n-   |\n-LL | #![feature(capture_disjoint_fields)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n-\n error: First Pass analysis includes:\n-  --> $DIR/unsafe_ptr.rs:29:6\n+  --> $DIR/unsafe_ptr.rs:28:6\n    |\n LL | /      || unsafe {\n LL | |\n@@ -38,13 +29,13 @@ LL | |     };\n    | |_____^\n    |\n note: Capturing t[(0, 0),Deref,(0, 0)] -> ImmBorrow\n-  --> $DIR/unsafe_ptr.rs:32:26\n+  --> $DIR/unsafe_ptr.rs:31:26\n    |\n LL |         println!(\"{:?}\", (*t.0).s);\n    |                          ^^^^^^^^\n \n error: Min Capture analysis includes:\n-  --> $DIR/unsafe_ptr.rs:29:6\n+  --> $DIR/unsafe_ptr.rs:28:6\n    |\n LL | /      || unsafe {\n LL | |\n@@ -56,13 +47,13 @@ LL | |     };\n    | |_____^\n    |\n note: Min Capture t[(0, 0)] -> ImmBorrow\n-  --> $DIR/unsafe_ptr.rs:32:26\n+  --> $DIR/unsafe_ptr.rs:31:26\n    |\n LL |         println!(\"{:?}\", (*t.0).s);\n    |                          ^^^^^^^^\n \n error: First Pass analysis includes:\n-  --> $DIR/unsafe_ptr.rs:49:5\n+  --> $DIR/unsafe_ptr.rs:48:5\n    |\n LL | /     || {\n LL | |\n@@ -74,13 +65,13 @@ LL | |     };\n    | |_____^\n    |\n note: Capturing p[Deref,(0, 0)] -> ImmBorrow\n-  --> $DIR/unsafe_ptr.rs:52:31\n+  --> $DIR/unsafe_ptr.rs:51:31\n    |\n LL |         let x = unsafe { &mut (*p).s };\n    |                               ^^^^^^\n \n error: Min Capture analysis includes:\n-  --> $DIR/unsafe_ptr.rs:49:5\n+  --> $DIR/unsafe_ptr.rs:48:5\n    |\n LL | /     || {\n LL | |\n@@ -92,11 +83,11 @@ LL | |     };\n    | |_____^\n    |\n note: Min Capture p[] -> ImmBorrow\n-  --> $DIR/unsafe_ptr.rs:52:31\n+  --> $DIR/unsafe_ptr.rs:51:31\n    |\n LL |         let x = unsafe { &mut (*p).s };\n    |                               ^^^^^^\n \n-error: aborting due to 6 previous errors; 1 warning emitted\n+error: aborting due to 6 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "7843c251666c5e20b692491b632826fb992e8bb7", "filename": "src/test/ui/closures/2229_closure_analysis/wild_patterns.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fwild_patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fwild_patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fwild_patterns.rs?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,7 +1,5 @@\n-#![feature(capture_disjoint_fields)]\n-//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n-//~| NOTE: `#[warn(incomplete_features)]` on by default\n-//~| NOTE: see issue #53488 <https://github.com/rust-lang/rust/issues/53488>\n+// edition:2021\n+\n #![feature(rustc_attrs)]\n \n // Test to ensure that we can handle cases where"}, {"sha": "c64378091e6e02dfb24cc5bcc25aed99175813ac", "filename": "src/test/ui/closures/2229_closure_analysis/wild_patterns.stderr", "status": "modified", "additions": 16, "deletions": 25, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fwild_patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fwild_patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fwild_patterns.stderr?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: attributes on expressions are experimental\n-  --> $DIR/wild_patterns.rs:24:13\n+  --> $DIR/wild_patterns.rs:22:13\n    |\n LL |     let c = #[rustc_capture_analysis]\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -8,7 +8,7 @@ LL |     let c = #[rustc_capture_analysis]\n    = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n \n error[E0658]: attributes on expressions are experimental\n-  --> $DIR/wild_patterns.rs:42:13\n+  --> $DIR/wild_patterns.rs:40:13\n    |\n LL |     let c = #[rustc_capture_analysis]\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -17,25 +17,16 @@ LL |     let c = #[rustc_capture_analysis]\n    = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n \n error[E0658]: attributes on expressions are experimental\n-  --> $DIR/wild_patterns.rs:60:13\n+  --> $DIR/wild_patterns.rs:58:13\n    |\n LL |     let c = #[rustc_capture_analysis]\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #15701 <https://github.com/rust-lang/rust/issues/15701> for more information\n    = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n \n-warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/wild_patterns.rs:1:12\n-   |\n-LL | #![feature(capture_disjoint_fields)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n-\n error: First Pass analysis includes:\n-  --> $DIR/wild_patterns.rs:27:5\n+  --> $DIR/wild_patterns.rs:25:5\n    |\n LL | /     || {\n LL | |\n@@ -47,13 +38,13 @@ LL | |     };\n    | |_____^\n    |\n note: Capturing p[(0, 0)] -> ImmBorrow\n-  --> $DIR/wild_patterns.rs:31:37\n+  --> $DIR/wild_patterns.rs:29:37\n    |\n LL |         let Point { x: _x, y: _ } = p;\n    |                                     ^\n \n error: Min Capture analysis includes:\n-  --> $DIR/wild_patterns.rs:27:5\n+  --> $DIR/wild_patterns.rs:25:5\n    |\n LL | /     || {\n LL | |\n@@ -65,13 +56,13 @@ LL | |     };\n    | |_____^\n    |\n note: Min Capture p[(0, 0)] -> ImmBorrow\n-  --> $DIR/wild_patterns.rs:31:37\n+  --> $DIR/wild_patterns.rs:29:37\n    |\n LL |         let Point { x: _x, y: _ } = p;\n    |                                     ^\n \n error: First Pass analysis includes:\n-  --> $DIR/wild_patterns.rs:45:5\n+  --> $DIR/wild_patterns.rs:43:5\n    |\n LL | /     || {\n LL | |\n@@ -83,13 +74,13 @@ LL | |     };\n    | |_____^\n    |\n note: Capturing t[(0, 0)] -> ByValue\n-  --> $DIR/wild_patterns.rs:49:23\n+  --> $DIR/wild_patterns.rs:47:23\n    |\n LL |         let (_x, _) = t;\n    |                       ^\n \n error: Min Capture analysis includes:\n-  --> $DIR/wild_patterns.rs:45:5\n+  --> $DIR/wild_patterns.rs:43:5\n    |\n LL | /     || {\n LL | |\n@@ -101,13 +92,13 @@ LL | |     };\n    | |_____^\n    |\n note: Min Capture t[(0, 0)] -> ByValue\n-  --> $DIR/wild_patterns.rs:49:23\n+  --> $DIR/wild_patterns.rs:47:23\n    |\n LL |         let (_x, _) = t;\n    |                       ^\n \n error: First Pass analysis includes:\n-  --> $DIR/wild_patterns.rs:63:5\n+  --> $DIR/wild_patterns.rs:61:5\n    |\n LL | /     || {\n LL | |\n@@ -119,13 +110,13 @@ LL | |     };\n    | |_____^\n    |\n note: Capturing arr[Index] -> ByValue\n-  --> $DIR/wild_patterns.rs:67:23\n+  --> $DIR/wild_patterns.rs:65:23\n    |\n LL |         let [_x, _] = arr;\n    |                       ^^^\n \n error: Min Capture analysis includes:\n-  --> $DIR/wild_patterns.rs:63:5\n+  --> $DIR/wild_patterns.rs:61:5\n    |\n LL | /     || {\n LL | |\n@@ -137,11 +128,11 @@ LL | |     };\n    | |_____^\n    |\n note: Min Capture arr[] -> ByValue\n-  --> $DIR/wild_patterns.rs:67:23\n+  --> $DIR/wild_patterns.rs:65:23\n    |\n LL |         let [_x, _] = arr;\n    |                       ^^^\n \n-error: aborting due to 9 previous errors; 1 warning emitted\n+error: aborting due to 9 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "0f451c1e0a9a3827d8ede3e1edee6dd1e8502d0b", "filename": "src/test/ui/non-fmt-panic.stderr", "status": "modified", "additions": 24, "deletions": 12, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fnon-fmt-panic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fnon-fmt-panic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnon-fmt-panic.stderr?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -61,7 +61,8 @@ warning: panic message is not a string literal\n LL |     assert!(false, S);\n    |                    ^\n    |\n-   = note: this is no longer accepted in Rust 2021\n+   = note: this usage of panic!() is deprecated; it will be a hard error in Rust 2021\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/panic-macro-consistency.html>\n help: add a \"{}\" format string to Display the message\n    |\n LL |     assert!(false, \"{}\", S);\n@@ -85,7 +86,8 @@ warning: panic message is not a string literal\n LL |     panic!(C);\n    |            ^\n    |\n-   = note: this is no longer accepted in Rust 2021\n+   = note: this usage of panic!() is deprecated; it will be a hard error in Rust 2021\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/panic-macro-consistency.html>\n help: add a \"{}\" format string to Display the message\n    |\n LL |     panic!(\"{}\", C);\n@@ -101,7 +103,8 @@ warning: panic message is not a string literal\n LL |     panic!(S);\n    |            ^\n    |\n-   = note: this is no longer accepted in Rust 2021\n+   = note: this usage of panic!() is deprecated; it will be a hard error in Rust 2021\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/panic-macro-consistency.html>\n help: add a \"{}\" format string to Display the message\n    |\n LL |     panic!(\"{}\", S);\n@@ -117,7 +120,8 @@ warning: panic message is not a string literal\n LL |     std::panic!(123);\n    |                 ^^^\n    |\n-   = note: this is no longer accepted in Rust 2021\n+   = note: this usage of panic!() is deprecated; it will be a hard error in Rust 2021\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/panic-macro-consistency.html>\n help: add a \"{}\" format string to Display the message\n    |\n LL |     std::panic!(\"{}\", 123);\n@@ -133,7 +137,8 @@ warning: panic message is not a string literal\n LL |     core::panic!(&*\"abc\");\n    |                  ^^^^^^^\n    |\n-   = note: this is no longer accepted in Rust 2021\n+   = note: this usage of panic!() is deprecated; it will be a hard error in Rust 2021\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/panic-macro-consistency.html>\n help: add a \"{}\" format string to Display the message\n    |\n LL |     core::panic!(\"{}\", &*\"abc\");\n@@ -181,15 +186,17 @@ warning: panic message is not a string literal\n LL |     fancy_panic::fancy_panic!(S);\n    |                               ^\n    |\n-   = note: this is no longer accepted in Rust 2021\n+   = note: this usage of panic!() is deprecated; it will be a hard error in Rust 2021\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/panic-macro-consistency.html>\n \n warning: panic message is not a string literal\n   --> $DIR/non-fmt-panic.rs:36:12\n    |\n LL |     panic!(a!());\n    |            ^^^^\n    |\n-   = note: this is no longer accepted in Rust 2021\n+   = note: this usage of panic!() is deprecated; it will be a hard error in Rust 2021\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/panic-macro-consistency.html>\n help: add a \"{}\" format string to Display the message\n    |\n LL |     panic!(\"{}\", a!());\n@@ -205,7 +212,8 @@ warning: panic message is not a string literal\n LL |     panic!(format!(\"{}\", 1));\n    |            ^^^^^^^^^^^^^^^^\n    |\n-   = note: this is no longer accepted in Rust 2021\n+   = note: this usage of panic!() is deprecated; it will be a hard error in Rust 2021\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/panic-macro-consistency.html>\n    = note: the panic!() macro supports formatting, so there's no need for the format!() macro here\n help: remove the `format!(..)` macro call\n    |\n@@ -218,7 +226,8 @@ warning: panic message is not a string literal\n LL |     assert!(false, format!(\"{}\", 1));\n    |                    ^^^^^^^^^^^^^^^^\n    |\n-   = note: this is no longer accepted in Rust 2021\n+   = note: this usage of panic!() is deprecated; it will be a hard error in Rust 2021\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/panic-macro-consistency.html>\n    = note: the assert!() macro supports formatting, so there's no need for the format!() macro here\n help: remove the `format!(..)` macro call\n    |\n@@ -231,7 +240,8 @@ warning: panic message is not a string literal\n LL |     debug_assert!(false, format!(\"{}\", 1));\n    |                          ^^^^^^^^^^^^^^^^\n    |\n-   = note: this is no longer accepted in Rust 2021\n+   = note: this usage of panic!() is deprecated; it will be a hard error in Rust 2021\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/panic-macro-consistency.html>\n    = note: the debug_assert!() macro supports formatting, so there's no need for the format!() macro here\n help: remove the `format!(..)` macro call\n    |\n@@ -244,7 +254,8 @@ warning: panic message is not a string literal\n LL |     panic![123];\n    |            ^^^\n    |\n-   = note: this is no longer accepted in Rust 2021\n+   = note: this usage of panic!() is deprecated; it will be a hard error in Rust 2021\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/panic-macro-consistency.html>\n help: add a \"{}\" format string to Display the message\n    |\n LL |     panic![\"{}\", 123];\n@@ -260,7 +271,8 @@ warning: panic message is not a string literal\n LL |     panic!{123};\n    |            ^^^\n    |\n-   = note: this is no longer accepted in Rust 2021\n+   = note: this usage of panic!() is deprecated; it will be a hard error in Rust 2021\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/panic-macro-consistency.html>\n help: add a \"{}\" format string to Display the message\n    |\n LL |     panic!{\"{}\", 123};"}, {"sha": "a4a5b6667df8cdd96ab783648b9369dd42f6a6fd", "filename": "src/test/ui/rust-2021/future-prelude-collision-unneeded.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-unneeded.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-unneeded.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-unneeded.rs?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -0,0 +1,16 @@\n+// edition:2018\n+// check-pass\n+#![allow(unused)]\n+#![deny(future_prelude_collision)]\n+\n+struct S;\n+\n+impl S {\n+    fn try_into(self) -> S { S }\n+}\n+\n+// See https://github.com/rust-lang/rust/issues/86633\n+fn main() {\n+    let s = S;\n+    let s2 = s.try_into();\n+}"}, {"sha": "6aceb13746937cc1cfedf32ba0fd28d8e6f613b2", "filename": "src/test/ui/suggestions/issue-86667.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fsuggestions%2Fissue-86667.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fsuggestions%2Fissue-86667.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-86667.rs?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -0,0 +1,16 @@\n+// Regression test for #86667, where a garbled suggestion was issued for\n+// a missing named lifetime parameter.\n+\n+// compile-flags: --edition 2018\n+\n+async fn a(s1: &str, s2: &str) -> &str {\n+//~^ ERROR: missing lifetime specifier [E0106]\n+    s1\n+}\n+\n+fn b(s1: &str, s2: &str) -> &str {\n+//~^ ERROR: missing lifetime specifier [E0106]\n+    s1\n+}\n+\n+fn main() {}"}, {"sha": "77f7f874a4e42b62f0d2d6d110a4ff580c150abf", "filename": "src/test/ui/suggestions/issue-86667.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fsuggestions%2Fissue-86667.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftest%2Fui%2Fsuggestions%2Fissue-86667.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-86667.stderr?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -0,0 +1,27 @@\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/issue-86667.rs:6:35\n+   |\n+LL | async fn a(s1: &str, s2: &str) -> &str {\n+   |                ----      ----     ^ expected named lifetime parameter\n+   |\n+   = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from `s1` or `s2`\n+help: consider introducing a named lifetime parameter\n+   |\n+LL | async fn a<'a>(s1: &'a str, s2: &'a str) -> &'a str {\n+   |           ^^^^     ^^^^^^^      ^^^^^^^     ^^^\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/issue-86667.rs:11:29\n+   |\n+LL | fn b(s1: &str, s2: &str) -> &str {\n+   |          ----      ----     ^ expected named lifetime parameter\n+   |\n+   = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from `s1` or `s2`\n+help: consider introducing a named lifetime parameter\n+   |\n+LL | fn b<'a>(s1: &'a str, s2: &'a str) -> &'a str {\n+   |     ^^^^     ^^^^^^^      ^^^^^^^     ^^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0106`."}, {"sha": "fe35df823b656bee6da9261d9a1a890660159fdf", "filename": "src/tools/html-checker/Cargo.toml", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftools%2Fhtml-checker%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftools%2Fhtml-checker%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fhtml-checker%2FCargo.toml?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -0,0 +1,12 @@\n+[package]\n+name = \"html-checker\"\n+version = \"0.1.0\"\n+authors = [\"Guillaume Gomez <guillaume1.gomez@gmail.com>\"]\n+edition = \"2018\"\n+\n+[[bin]]\n+name = \"html-checker\"\n+path = \"main.rs\"\n+\n+[dependencies]\n+walkdir = \"2\""}, {"sha": "bf2830254e8190cfeff90f9fe2ca429ad7f2cc48", "filename": "src/tools/html-checker/main.rs", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftools%2Fhtml-checker%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftools%2Fhtml-checker%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fhtml-checker%2Fmain.rs?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -0,0 +1,93 @@\n+use std::env;\n+use std::path::Path;\n+use std::process::{Command, Output};\n+\n+fn check_html_file(file: &Path) -> usize {\n+    let to_mute = &[\n+        // \"disabled\" on <link> or \"autocomplete\" on <select> emit this warning\n+        \"PROPRIETARY_ATTRIBUTE\",\n+        // It complains when multiple in the same page link to the same anchor for some reason...\n+        \"ANCHOR_NOT_UNIQUE\",\n+        // If a <span> contains only HTML elements and no text, it complains about it.\n+        \"TRIM_EMPTY_ELEMENT\",\n+        // FIXME: the three next warnings are about <pre> elements which are not supposed to\n+        //        contain HTML. The solution here would be to replace them with a <div>\n+        \"MISSING_ENDTAG_BEFORE\",\n+        \"INSERTING_TAG\",\n+        \"DISCARDING_UNEXPECTED\",\n+    ];\n+    let to_mute_s = to_mute.join(\",\");\n+    let mut command = Command::new(\"tidy\");\n+    command\n+        .arg(\"-errors\")\n+        .arg(\"-quiet\")\n+        .arg(\"--mute-id\") // this option is useful in case we want to mute more warnings\n+        .arg(\"yes\")\n+        .arg(\"--mute\")\n+        .arg(&to_mute_s)\n+        .arg(file);\n+\n+    let Output { status, stderr, .. } = command.output().expect(\"failed to run tidy command\");\n+    if status.success() {\n+        0\n+    } else {\n+        let stderr = String::from_utf8(stderr).expect(\"String::from_utf8 failed...\");\n+        if stderr.is_empty() && status.code() != Some(2) {\n+            0\n+        } else {\n+            eprintln!(\n+                \"=> Errors for `{}` (error code: {}) <=\",\n+                file.display(),\n+                status.code().unwrap_or(-1)\n+            );\n+            eprintln!(\"{}\", stderr);\n+            stderr.lines().count()\n+        }\n+    }\n+}\n+\n+const DOCS_TO_CHECK: &[&str] =\n+    &[\"alloc\", \"core\", \"proc_macro\", \"implementors\", \"src\", \"std\", \"test\"];\n+\n+// Returns the number of files read and the number of errors.\n+fn find_all_html_files(dir: &Path) -> (usize, usize) {\n+    let mut files_read = 0;\n+    let mut errors = 0;\n+\n+    for entry in walkdir::WalkDir::new(dir).into_iter().filter_entry(|e| {\n+        e.depth() != 1\n+            || e.file_name()\n+                .to_str()\n+                .map(|s| DOCS_TO_CHECK.into_iter().any(|d| *d == s))\n+                .unwrap_or(false)\n+    }) {\n+        let entry = entry.expect(\"failed to read file\");\n+        if !entry.file_type().is_file() {\n+            continue;\n+        }\n+        let entry = entry.path();\n+        if entry.extension().and_then(|s| s.to_str()) == Some(\"html\") {\n+            errors += check_html_file(&entry);\n+            files_read += 1;\n+        }\n+    }\n+    (files_read, errors)\n+}\n+\n+fn main() -> Result<(), String> {\n+    let args = env::args().collect::<Vec<_>>();\n+    if args.len() != 2 {\n+        return Err(format!(\"Usage: {} <doc folder>\", args[0]));\n+    }\n+\n+    println!(\"Running HTML checker...\");\n+\n+    let (files_read, errors) = find_all_html_files(&Path::new(&args[1]));\n+    println!(\"Done! Read {} files...\", files_read);\n+    if errors > 0 {\n+        Err(format!(\"HTML check failed: {} errors\", errors))\n+    } else {\n+        println!(\"No error found!\");\n+        Ok(())\n+    }\n+}"}, {"sha": "26d6081c8816b65a1ebb562585c9ef06e0441846", "filename": "src/tools/rustc-workspace-hack/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftools%2Frustc-workspace-hack%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0e283b4949a9a600824813f8b934d6d7c4cf5/src%2Ftools%2Frustc-workspace-hack%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustc-workspace-hack%2FCargo.toml?ref=1ea0e283b4949a9a600824813f8b934d6d7c4cf5", "patch": "@@ -78,7 +78,7 @@ syn = { version = \"1\", features = ['fold', 'full', 'extra-traits', 'visit', 'vis\n url = { version = \"2.0\", features = ['serde'] }\n \n [target.'cfg(not(windows))'.dependencies]\n-openssl = { version = \"0.10.12\", optional = true }\n+openssl = { version = \"0.10.35\", optional = true }\n \n [features]\n all-static = ['openssl/vendored', 'curl-sys/static-curl', 'curl-sys/force-system-lib-on-osx']"}]}