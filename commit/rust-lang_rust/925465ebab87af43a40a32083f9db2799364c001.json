{"sha": "925465ebab87af43a40a32083f9db2799364c001", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyNTQ2NWViYWI4N2FmNDNhNDBhMzIwODNmOWRiMjc5OTM2NGMwMDE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-04-08T09:39:35Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-04-08T09:43:19Z"}, "message": "more editing for CONTRIBUTING guide", "tree": {"sha": "0e91764fb9ef97b0ab26755829a3285a5561306e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e91764fb9ef97b0ab26755829a3285a5561306e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/925465ebab87af43a40a32083f9db2799364c001", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/925465ebab87af43a40a32083f9db2799364c001", "html_url": "https://github.com/rust-lang/rust/commit/925465ebab87af43a40a32083f9db2799364c001", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/925465ebab87af43a40a32083f9db2799364c001/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac3a24673cb242090f4b298f986f4940575483b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac3a24673cb242090f4b298f986f4940575483b5", "html_url": "https://github.com/rust-lang/rust/commit/ac3a24673cb242090f4b298f986f4940575483b5"}], "stats": {"total": 69, "additions": 37, "deletions": 32}, "files": [{"sha": "41dd7765145dfd8bc8ccf877bddb9abb95274b38", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 37, "deletions": 32, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/925465ebab87af43a40a32083f9db2799364c001/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/925465ebab87af43a40a32083f9db2799364c001/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=925465ebab87af43a40a32083f9db2799364c001", "patch": "@@ -5,14 +5,14 @@ find useful.\n \n ## Getting started\n \n-Check out the issues on this GitHub repository for some ideas. There's lots that\n-needs to be done that we haven't documented in the issues yet, however. For more\n-ideas or help with hacking on Miri, you can contact us (`oli-obk` and `RalfJ`)\n-on the [Rust Zulip].\n+Check out the issues on this GitHub repository for some ideas. In particular,\n+look for the green `E-*` labels which mark issues that should be rather\n+well-suited for onboarding. For more ideas or help with hacking on Miri, you can\n+contact us (`oli-obk` and `RalfJ`) on the [Rust Zulip].\n \n [Rust Zulip]: https://rust-lang.zulipchat.com\n \n-## Building Miri with a pre-built rustc\n+## Preparing the build environment\n \n Miri heavily relies on internal rustc interfaces to execute MIR.  Still, some\n things (like adding support for a new intrinsic or a shim for an external\n@@ -28,7 +28,11 @@ install that exact version of rustc as a toolchain:\n \n [`rustup-toolchain-install-master`]: https://github.com/kennytm/rustup-toolchain-install-master\n \n-Now building Miri is just one command away:\n+## Building and testing Miri\n+\n+Invoking Miri requires getting a bunch of flags right and setting up a custom\n+sysroot with xargo. The `miri` script takes care of that for you.  With the\n+build environment prepared, compiling Miri is just one command away:\n \n ```\n ./miri build\n@@ -37,32 +41,16 @@ Now building Miri is just one command away:\n Run `./miri` without arguments to see the other commands our build tool\n supports.\n \n-### Fixing Miri when rustc changes\n-\n-Miri is heavily tied to rustc internals, so it is very common that rustc changes\n-break Miri.  Fixing those is a good way to get starting working on Miri.\n-Usually, Miri will require changes similar to the other consumers of the changed\n-rustc API, so reading the rustc PR diff is a good way to get an idea for what is\n-needed.\n-\n-To update the `rustc-version` file and install the latest rustc, you can run:\n-```\n-./rustup-toolchain HEAD\n-```\n-\n-Now try `./miri test`, and submit a PR once that works again.\n+### Testing the Miri driver\n \n-## Testing the Miri driver\n-[testing-miri]: #testing-the-miri-driver\n+The Miri driver in the `src/bin/miri.rs` binary is the \"heart\" of Miri: it is\n+basically a version of `rustc` that, instead of compiling your code, runs it.\n+It accepts all the same flags as `rustc` (though the ones only affecting code\n+generation and linking obviously will have no effect) [and more][miri-flags].\n \n-The Miri driver in the `miri` binary is the \"heart\" of Miri: it is basically a\n-version of `rustc` that, instead of compiling your code, runs it.  It accepts\n-all the same flags as `rustc` (though the ones only affecting code generation\n-and linking obviously will have no effect) [and more][miri-flags].\n+[miri-flags]: README.md#miri--z-flags-and-environment-variables\n \n-Running the Miri driver requires some fiddling with environment variables, so\n-the `miri` script helps you do that.  For example, you can (cross-)run the\n-driver on a particular file by doing\n+For example, you can (cross-)run the driver on a particular file by doing\n \n ```sh\n ./miri run tests/run-pass/format.rs\n@@ -99,7 +87,7 @@ MIRI_LOG=rustc_mir::interpret=info,miri::stacked_borrows ./miri run tests/run-pa\n In addition, you can set `MIRI_BACKTRACE=1` to get a backtrace of where an\n evaluation error was originally raised.\n \n-## Testing `cargo miri`\n+### Testing `cargo miri`\n \n Working with the driver directly gives you full control, but you also lose all\n the convenience provided by cargo.  Once your test case depends on a crate, it\n@@ -117,7 +105,24 @@ There's a test for the cargo wrapper in the `test-cargo-miri` directory; run\n `./run-test.py` in there to execute it. Like `./miri test`, this respects the\n `MIRI_TEST_TARGET` environment variable to execute the test for another target.\n \n-## Building Miri with a locally built rustc\n+### Fixing Miri when rustc changes\n+\n+Miri is heavily tied to rustc internals, so it is very common that rustc changes\n+break Miri. Usually, Miri will require changes similar to the other consumers\n+of the changed rustc API, so reading the rustc PR diff is a good way to get an\n+idea for what is needed.\n+\n+To update the `rustc-version` file and install the latest rustc, you can run:\n+```\n+./rustup-toolchain HEAD\n+```\n+\n+Now try `./miri test`, and submit a PR once that works again. Even if you choose\n+not to use `./rustup-toolchain`, it is important that the `rustc-version` file\n+is updated, as our CI makes sure that Miri works well with that particular\n+version of rustc.\n+\n+## Advanced topic: Building Miri with a locally built rustc\n \n A big part of the Miri driver lives in rustc, so working on Miri will sometimes\n require using a locally built rustc.  The bug you want to fix may actually be on\n@@ -143,4 +148,4 @@ rustup override set custom\n ```\n \n With this, you should now have a working development setup!  See\n-[above][testing-miri] for how to proceed working with the Miri driver.\n+[above](#building-and-testing-miri) for how to proceed working on Miri."}]}