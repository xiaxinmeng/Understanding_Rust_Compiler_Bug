{"sha": "01bca7114c0567961c875a1df5a60748cd872073", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxYmNhNzExNGMwNTY3OTYxYzg3NWExZGY1YTYwNzQ4Y2Q4NzIwNzM=", "commit": {"author": {"name": "Wilco Kusee", "email": "wilcokusee@gmail.com", "date": "2019-03-22T16:10:20Z"}, "committer": {"name": "Wilco Kusee", "email": "wilcokusee@gmail.com", "date": "2019-03-22T16:12:32Z"}, "message": "Simplify changes and fix tests", "tree": {"sha": "de867640036faf167ff07a62d22db02c37f48088", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de867640036faf167ff07a62d22db02c37f48088"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01bca7114c0567961c875a1df5a60748cd872073", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01bca7114c0567961c875a1df5a60748cd872073", "html_url": "https://github.com/rust-lang/rust/commit/01bca7114c0567961c875a1df5a60748cd872073", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01bca7114c0567961c875a1df5a60748cd872073/comments", "author": {"login": "detrumi", "id": 5758008, "node_id": "MDQ6VXNlcjU3NTgwMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/5758008?v=4", "gravatar_id": "", "url": "https://api.github.com/users/detrumi", "html_url": "https://github.com/detrumi", "followers_url": "https://api.github.com/users/detrumi/followers", "following_url": "https://api.github.com/users/detrumi/following{/other_user}", "gists_url": "https://api.github.com/users/detrumi/gists{/gist_id}", "starred_url": "https://api.github.com/users/detrumi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/detrumi/subscriptions", "organizations_url": "https://api.github.com/users/detrumi/orgs", "repos_url": "https://api.github.com/users/detrumi/repos", "events_url": "https://api.github.com/users/detrumi/events{/privacy}", "received_events_url": "https://api.github.com/users/detrumi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "detrumi", "id": 5758008, "node_id": "MDQ6VXNlcjU3NTgwMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/5758008?v=4", "gravatar_id": "", "url": "https://api.github.com/users/detrumi", "html_url": "https://github.com/detrumi", "followers_url": "https://api.github.com/users/detrumi/followers", "following_url": "https://api.github.com/users/detrumi/following{/other_user}", "gists_url": "https://api.github.com/users/detrumi/gists{/gist_id}", "starred_url": "https://api.github.com/users/detrumi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/detrumi/subscriptions", "organizations_url": "https://api.github.com/users/detrumi/orgs", "repos_url": "https://api.github.com/users/detrumi/repos", "events_url": "https://api.github.com/users/detrumi/events{/privacy}", "received_events_url": "https://api.github.com/users/detrumi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9bd8336c512185df42f76b8f24a89960e2afb90e", "url": "https://api.github.com/repos/rust-lang/rust/commits/9bd8336c512185df42f76b8f24a89960e2afb90e", "html_url": "https://github.com/rust-lang/rust/commit/9bd8336c512185df42f76b8f24a89960e2afb90e"}], "stats": {"total": 34, "additions": 15, "deletions": 19}, "files": [{"sha": "8fb3eaa0641ec59f3a3c5904dd78f5a804438bb1", "filename": "crates/ra_ide_api/src/join_lines.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/01bca7114c0567961c875a1df5a60748cd872073/crates%2Fra_ide_api%2Fsrc%2Fjoin_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01bca7114c0567961c875a1df5a60748cd872073/crates%2Fra_ide_api%2Fsrc%2Fjoin_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fjoin_lines.rs?ref=01bca7114c0567961c875a1df5a60748cd872073", "patch": "@@ -1,5 +1,4 @@\n use itertools::Itertools;\n-use ra_db::FileRange;\n use ra_syntax::{\n     SourceFile, TextRange, TextUnit, AstNode, SyntaxNode,\n     SyntaxKind::{self, WHITESPACE, COMMA, R_CURLY, R_PAREN, R_BRACK},\n@@ -12,17 +11,17 @@ use ra_fmt::{\n };\n use ra_text_edit::{TextEdit, TextEditBuilder};\n \n-pub fn join_lines(file: &SourceFile, frange: FileRange) -> TextEdit {\n-    let range = if frange.range.is_empty() {\n+pub fn join_lines(file: &SourceFile, range: TextRange) -> TextEdit {\n+    let range = if range.is_empty() {\n         let syntax = file.syntax();\n-        let text = syntax.text().slice(frange.range.start()..);\n+        let text = syntax.text().slice(range.start()..);\n         let pos = match text.find('\\n') {\n             None => return TextEditBuilder::default().finish(),\n             Some(pos) => pos,\n         };\n-        TextRange::offset_len(frange.range.start() + pos, TextUnit::of_char('\\n'))\n+        TextRange::offset_len(range.start() + pos, TextUnit::of_char('\\n'))\n     } else {\n-        frange.range\n+        range\n     };\n \n     let node = find_covering_node(file.syntax(), range);\n@@ -507,7 +506,7 @@ fn foo() {\n         let (sel, before) = extract_range(before);\n         let file = SourceFile::parse(&before);\n         let result = join_lines(&file, sel);\n-        let actual = result.edit.apply(&before);\n+        let actual = result.apply(&before);\n         assert_eq_text!(after, &actual);\n     }\n "}, {"sha": "a838c30da755c23f8b29ee338b74d37abeb3269d", "filename": "crates/ra_ide_api/src/lib.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/01bca7114c0567961c875a1df5a60748cd872073/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01bca7114c0567961c875a1df5a60748cd872073/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Flib.rs?ref=01bca7114c0567961c875a1df5a60748cd872073", "patch": "@@ -279,8 +279,10 @@ impl Analysis {\n     /// stuff like trailing commas.\n     pub fn join_lines(&self, frange: FileRange) -> SourceChange {\n         let file = self.db.parse(frange.file_id);\n-        let file_edit =\n-            SourceFileEdit { file_id: frange.file_id, edit: join_lines::join_lines(&file, frange) };\n+        let file_edit = SourceFileEdit {\n+            file_id: frange.file_id,\n+            edit: join_lines::join_lines(&file, frange.range),\n+        };\n         SourceChange {\n             label: \"join lines\".to_string(),\n             source_file_edits: vec![file_edit],"}, {"sha": "d0bd3a1e461e3c8bee4df3f2282c9cb9a41bf7e7", "filename": "crates/ra_ide_api/src/test_utils.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/01bca7114c0567961c875a1df5a60748cd872073/crates%2Fra_ide_api%2Fsrc%2Ftest_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01bca7114c0567961c875a1df5a60748cd872073/crates%2Fra_ide_api%2Fsrc%2Ftest_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Ftest_utils.rs?ref=01bca7114c0567961c875a1df5a60748cd872073", "patch": "@@ -1,24 +1,19 @@\n use ra_syntax::{SourceFile, TextUnit};\n+use ra_text_edit::TextEdit;\n \n-use crate::LocalEdit;\n pub use test_utils::*;\n \n-pub fn check_action<F: Fn(&SourceFile, TextUnit) -> Option<LocalEdit>>(\n+pub fn check_action<F: Fn(&SourceFile, TextUnit) -> Option<TextEdit>>(\n     before: &str,\n     after: &str,\n     f: F,\n ) {\n     let (before_cursor_pos, before) = extract_offset(before);\n     let file = SourceFile::parse(&before);\n     let result = f(&file, before_cursor_pos).expect(\"code action is not applicable\");\n-    let actual = result.edit.apply(&before);\n-    let actual_cursor_pos = match result.cursor_position {\n-        None => result\n-            .edit\n-            .apply_to_offset(before_cursor_pos)\n-            .expect(\"cursor position is affected by the edit\"),\n-        Some(off) => off,\n-    };\n+    let actual = result.apply(&before);\n+    let actual_cursor_pos =\n+        result.apply_to_offset(before_cursor_pos).expect(\"cursor position is affected by the edit\");\n     let actual = add_cursor(&actual, actual_cursor_pos);\n     assert_eq_text!(after, &actual);\n }"}]}