{"sha": "6f573bd84f4564f11b08db720401ae16a0f42f2f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmNTczYmQ4NGY0NTY0ZjExYjA4ZGI3MjA0MDFhZTE2YTBmNDJmMmY=", "commit": {"author": {"name": "Igor Aleksanov", "email": "popzxc@yandex.ru", "date": "2020-10-17T08:03:07Z"}, "committer": {"name": "Igor Aleksanov", "email": "popzxc@yandex.ru", "date": "2020-10-17T08:03:07Z"}, "message": "Allow hints after 'fn' keyword if it's an impl trait block", "tree": {"sha": "774202cfd275bd30380bc7618885da5e012b5690", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/774202cfd275bd30380bc7618885da5e012b5690"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f573bd84f4564f11b08db720401ae16a0f42f2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f573bd84f4564f11b08db720401ae16a0f42f2f", "html_url": "https://github.com/rust-lang/rust/commit/6f573bd84f4564f11b08db720401ae16a0f42f2f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f573bd84f4564f11b08db720401ae16a0f42f2f/comments", "author": {"login": "popzxc", "id": 12111581, "node_id": "MDQ6VXNlcjEyMTExNTgx", "avatar_url": "https://avatars.githubusercontent.com/u/12111581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/popzxc", "html_url": "https://github.com/popzxc", "followers_url": "https://api.github.com/users/popzxc/followers", "following_url": "https://api.github.com/users/popzxc/following{/other_user}", "gists_url": "https://api.github.com/users/popzxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/popzxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/popzxc/subscriptions", "organizations_url": "https://api.github.com/users/popzxc/orgs", "repos_url": "https://api.github.com/users/popzxc/repos", "events_url": "https://api.github.com/users/popzxc/events{/privacy}", "received_events_url": "https://api.github.com/users/popzxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "popzxc", "id": 12111581, "node_id": "MDQ6VXNlcjEyMTExNTgx", "avatar_url": "https://avatars.githubusercontent.com/u/12111581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/popzxc", "html_url": "https://github.com/popzxc", "followers_url": "https://api.github.com/users/popzxc/followers", "following_url": "https://api.github.com/users/popzxc/following{/other_user}", "gists_url": "https://api.github.com/users/popzxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/popzxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/popzxc/subscriptions", "organizations_url": "https://api.github.com/users/popzxc/orgs", "repos_url": "https://api.github.com/users/popzxc/repos", "events_url": "https://api.github.com/users/popzxc/events{/privacy}", "received_events_url": "https://api.github.com/users/popzxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f303daf458ae798b678d7e908ce5b2f27504111", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f303daf458ae798b678d7e908ce5b2f27504111", "html_url": "https://github.com/rust-lang/rust/commit/8f303daf458ae798b678d7e908ce5b2f27504111"}], "stats": {"total": 41, "additions": 37, "deletions": 4}, "files": [{"sha": "cff0afae9b3b43344203c0b4fc31e180426accf0", "filename": "crates/ide/src/completion/completion_context.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6f573bd84f4564f11b08db720401ae16a0f42f2f/crates%2Fide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f573bd84f4564f11b08db720401ae16a0f42f2f/crates%2Fide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fcompletion%2Fcompletion_context.rs?ref=6f573bd84f4564f11b08db720401ae16a0f42f2f", "patch": "@@ -18,8 +18,9 @@ use crate::{\n         patterns::{\n             fn_is_prev, for_is_prev2, has_bind_pat_parent, has_block_expr_parent,\n             has_field_list_parent, has_impl_as_prev_sibling, has_impl_parent,\n-            has_item_list_or_source_file_parent, has_ref_parent, has_trait_as_prev_sibling,\n-            has_trait_parent, if_is_prev, is_in_loop_body, is_match_arm, unsafe_is_prev,\n+            has_impl_trait_parent, has_item_list_or_source_file_parent, has_ref_parent,\n+            has_trait_as_prev_sibling, has_trait_parent, if_is_prev, is_in_loop_body, is_match_arm,\n+            unsafe_is_prev,\n         },\n         CompletionConfig,\n     },\n@@ -86,6 +87,7 @@ pub(crate) struct CompletionContext<'a> {\n     pub(super) in_loop_body: bool,\n     pub(super) has_trait_parent: bool,\n     pub(super) has_impl_parent: bool,\n+    pub(super) has_impl_trait_parent: bool,\n     pub(super) has_field_list_parent: bool,\n     pub(super) trait_as_prev_sibling: bool,\n     pub(super) impl_as_prev_sibling: bool,\n@@ -170,6 +172,7 @@ impl<'a> CompletionContext<'a> {\n             block_expr_parent: false,\n             has_trait_parent: false,\n             has_impl_parent: false,\n+            has_impl_trait_parent: false,\n             has_field_list_parent: false,\n             trait_as_prev_sibling: false,\n             impl_as_prev_sibling: false,\n@@ -228,9 +231,10 @@ impl<'a> CompletionContext<'a> {\n     /// Checks whether completions in that particular case don't make much sense.\n     /// Examples:\n     /// - `fn <|>` -- we expect function name, it's unlikely that \"hint\" will be helpful.\n+    ///   Exception for this case is `impl Trait for Foo`, where we would like to hint trait method names.\n     /// - `for _ i<|>` -- obviously, it'll be \"in\" keyword.\n     pub(crate) fn no_completion_required(&self) -> bool {\n-        self.fn_is_prev || self.for_is_prev2\n+        (self.fn_is_prev && !self.has_impl_trait_parent) || self.for_is_prev2\n     }\n \n     /// The range of the identifier that is being completed.\n@@ -256,6 +260,7 @@ impl<'a> CompletionContext<'a> {\n         self.in_loop_body = is_in_loop_body(syntax_element.clone());\n         self.has_trait_parent = has_trait_parent(syntax_element.clone());\n         self.has_impl_parent = has_impl_parent(syntax_element.clone());\n+        self.has_impl_trait_parent = has_impl_trait_parent(syntax_element.clone());\n         self.has_field_list_parent = has_field_list_parent(syntax_element.clone());\n         self.impl_as_prev_sibling = has_impl_as_prev_sibling(syntax_element.clone());\n         self.trait_as_prev_sibling = has_trait_as_prev_sibling(syntax_element.clone());"}, {"sha": "bdce7a6e79622fd68c5647104367e0519772e3d7", "filename": "crates/ide/src/completion/patterns.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6f573bd84f4564f11b08db720401ae16a0f42f2f/crates%2Fide%2Fsrc%2Fcompletion%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f573bd84f4564f11b08db720401ae16a0f42f2f/crates%2Fide%2Fsrc%2Fcompletion%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fcompletion%2Fpatterns.rs?ref=6f573bd84f4564f11b08db720401ae16a0f42f2f", "patch": "@@ -9,7 +9,7 @@ use syntax::{\n };\n \n #[cfg(test)]\n-use crate::completion::test_utils::check_pattern_is_applicable;\n+use crate::completion::test_utils::{check_pattern_is_applicable, check_pattern_is_not_applicable};\n \n pub(crate) fn has_trait_parent(element: SyntaxElement) -> bool {\n     not_same_range_ancestor(element)\n@@ -34,6 +34,22 @@ pub(crate) fn has_impl_parent(element: SyntaxElement) -> bool {\n fn test_has_impl_parent() {\n     check_pattern_is_applicable(r\"impl A { f<|> }\", has_impl_parent);\n }\n+\n+pub(crate) fn has_impl_trait_parent(element: SyntaxElement) -> bool {\n+    not_same_range_ancestor(element)\n+        .filter(|it| it.kind() == ASSOC_ITEM_LIST)\n+        .and_then(|it| it.parent())\n+        .filter(|it| it.kind() == IMPL)\n+        .map(|it| ast::Impl::cast(it).unwrap())\n+        .map(|it| it.trait_().is_some())\n+        .unwrap_or(false)\n+}\n+#[test]\n+fn test_has_impl_trait_parent() {\n+    check_pattern_is_applicable(r\"impl Foo for Bar { f<|> }\", has_impl_trait_parent);\n+    check_pattern_is_not_applicable(r\"impl A { f<|> }\", has_impl_trait_parent);\n+}\n+\n pub(crate) fn has_field_list_parent(element: SyntaxElement) -> bool {\n     not_same_range_ancestor(element).filter(|it| it.kind() == RECORD_FIELD_LIST).is_some()\n }"}, {"sha": "dabbef888fbd155427f80f50677a344594e5339d", "filename": "crates/ide/src/completion/test_utils.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6f573bd84f4564f11b08db720401ae16a0f42f2f/crates%2Fide%2Fsrc%2Fcompletion%2Ftest_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f573bd84f4564f11b08db720401ae16a0f42f2f/crates%2Fide%2Fsrc%2Fcompletion%2Ftest_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fcompletion%2Ftest_utils.rs?ref=6f573bd84f4564f11b08db720401ae16a0f42f2f", "patch": "@@ -104,6 +104,18 @@ pub(crate) fn check_pattern_is_applicable(code: &str, check: fn(SyntaxElement) -\n         .unwrap();\n }\n \n+pub(crate) fn check_pattern_is_not_applicable(code: &str, check: fn(SyntaxElement) -> bool) {\n+    let (analysis, pos) = fixture::position(code);\n+    analysis\n+        .with_db(|db| {\n+            let sema = Semantics::new(db);\n+            let original_file = sema.parse(pos.file_id);\n+            let token = original_file.syntax().token_at_offset(pos.offset).left_biased().unwrap();\n+            assert!(!check(NodeOrToken::Token(token)));\n+        })\n+        .unwrap();\n+}\n+\n pub(crate) fn get_all_completion_items(\n     config: CompletionConfig,\n     code: &str,"}]}