{"sha": "3b896796719ed1e151d507b4bf2ea635a89cda9e", "node_id": "C_kwDOAAsO6NoAKDNiODk2Nzk2NzE5ZWQxZTE1MWQ1MDdiNGJmMmVhNjM1YTg5Y2RhOWU", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2021-09-20T12:46:26Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2021-09-21T02:21:43Z"}, "message": "Adjust documentation for compatibility with 2021\n\nThis also adjusts the lint docs generation to accept (and ignore) an allow\nattribute, rather than expecting the documentation to be immediately followed by\nthe lint name.", "tree": {"sha": "22ddc6d0afcf6818d1603cc1aeff310b19f49dfa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/22ddc6d0afcf6818d1603cc1aeff310b19f49dfa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b896796719ed1e151d507b4bf2ea635a89cda9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b896796719ed1e151d507b4bf2ea635a89cda9e", "html_url": "https://github.com/rust-lang/rust/commit/3b896796719ed1e151d507b4bf2ea635a89cda9e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b896796719ed1e151d507b4bf2ea635a89cda9e/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f33890082603434eb640dfd256819b0d722e911d", "url": "https://api.github.com/repos/rust-lang/rust/commits/f33890082603434eb640dfd256819b0d722e911d", "html_url": "https://github.com/rust-lang/rust/commit/f33890082603434eb640dfd256819b0d722e911d"}], "stats": {"total": 63, "additions": 35, "deletions": 28}, "files": [{"sha": "1facd973754331c08da5d1c4af5b92d801d29d2a", "filename": "compiler/rustc_lint/src/array_into_iter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b896796719ed1e151d507b4bf2ea635a89cda9e/compiler%2Frustc_lint%2Fsrc%2Farray_into_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b896796719ed1e151d507b4bf2ea635a89cda9e/compiler%2Frustc_lint%2Fsrc%2Farray_into_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Farray_into_iter.rs?ref=3b896796719ed1e151d507b4bf2ea635a89cda9e", "patch": "@@ -13,7 +13,7 @@ declare_lint! {\n     ///\n     /// ### Example\n     ///\n-    /// ```rust\n+    /// ```rust,edition2018\n     /// # #![allow(unused)]\n     /// [1, 2, 3].into_iter().for_each(|n| { *n; });\n     /// ```"}, {"sha": "e1bcc3aa52bc643dae02e9b7eed4385b0030c457", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b896796719ed1e151d507b4bf2ea635a89cda9e/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b896796719ed1e151d507b4bf2ea635a89cda9e/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=3b896796719ed1e151d507b4bf2ea635a89cda9e", "patch": "@@ -1686,7 +1686,7 @@ declare_lint! {\n     ///\n     /// ### Example\n     ///\n-    /// ```rust\n+    /// ```rust,edition2018\n     /// let x = 123;\n     /// match x {\n     ///     0...100 => {}"}, {"sha": "ae9c5ce5c3c2bdeff8c4f31dbecb81ebe128ce84", "filename": "compiler/rustc_lint/src/non_fmt_panic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b896796719ed1e151d507b4bf2ea635a89cda9e/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b896796719ed1e151d507b4bf2ea635a89cda9e/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs?ref=3b896796719ed1e151d507b4bf2ea635a89cda9e", "patch": "@@ -18,7 +18,7 @@ declare_lint! {\n     ///\n     /// ### Example\n     ///\n-    /// ```rust,no_run\n+    /// ```rust,no_run,edition2018\n     /// panic!(\"{}\");\n     /// panic!(123);\n     /// ```"}, {"sha": "b14abb9e5db48a46dce242ffac741a85de944d00", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3b896796719ed1e151d507b4bf2ea635a89cda9e/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b896796719ed1e151d507b4bf2ea635a89cda9e/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=3b896796719ed1e151d507b4bf2ea635a89cda9e", "patch": "@@ -1584,7 +1584,7 @@ declare_lint! {\n     ///\n     /// ### Example\n     ///\n-    /// ```rust\n+    /// ```rust,edition2018\n     /// trait Trait { }\n     ///\n     /// fn takes_trait_object(_: Box<Trait>) {\n@@ -3313,7 +3313,7 @@ declare_lint! {\n     ///\n     /// ### Example\n     ///\n-    /// ```rust,compile_fail\n+    /// ```rust,edition2018,compile_fail\n     /// #![deny(rust_2021_prefixes_incompatible_syntax)]\n     ///\n     /// macro_rules! m {\n@@ -3333,6 +3333,8 @@ declare_lint! {\n     ///\n     /// This lint suggests to add whitespace between the `z` and `\"hey\"` tokens\n     /// to keep them separated in Rust 2021.\n+    // Allow this lint -- rustdoc doesn't yet support threading edition into this lint's parser.\n+    #[allow(rustdoc::invalid_rust_codeblocks)]\n     pub RUST_2021_PREFIXES_INCOMPATIBLE_SYNTAX,\n     Allow,\n     \"identifiers that will be parsed as a prefix in Rust 2021\","}, {"sha": "8c41fd9c4a2373901e72c48d407fff782462a63f", "filename": "compiler/rustc_metadata/src/dependency_format.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/3b896796719ed1e151d507b4bf2ea635a89cda9e/compiler%2Frustc_metadata%2Fsrc%2Fdependency_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b896796719ed1e151d507b4bf2ea635a89cda9e/compiler%2Frustc_metadata%2Fsrc%2Fdependency_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fdependency_format.rs?ref=3b896796719ed1e151d507b4bf2ea635a89cda9e", "patch": "@@ -11,35 +11,35 @@\n //! should be used when linking each output type requested in this session. This\n //! generally follows this set of rules:\n //!\n-//!     1. Each library must appear exactly once in the output.\n-//!     2. Each rlib contains only one library (it's just an object file)\n-//!     3. Each dylib can contain more than one library (due to static linking),\n-//!        and can also bring in many dynamic dependencies.\n+//! 1. Each library must appear exactly once in the output.\n+//! 2. Each rlib contains only one library (it's just an object file)\n+//! 3. Each dylib can contain more than one library (due to static linking),\n+//!    and can also bring in many dynamic dependencies.\n //!\n //! With these constraints in mind, it's generally a very difficult problem to\n //! find a solution that's not \"all rlibs\" or \"all dylibs\". I have suspicions\n //! that NP-ness may come into the picture here...\n //!\n //! The current selection algorithm below looks mostly similar to:\n //!\n-//!     1. If static linking is required, then require all upstream dependencies\n-//!        to be available as rlibs. If not, generate an error.\n-//!     2. If static linking is requested (generating an executable), then\n-//!        attempt to use all upstream dependencies as rlibs. If any are not\n-//!        found, bail out and continue to step 3.\n-//!     3. Static linking has failed, at least one library must be dynamically\n-//!        linked. Apply a heuristic by greedily maximizing the number of\n-//!        dynamically linked libraries.\n-//!     4. Each upstream dependency available as a dynamic library is\n-//!        registered. The dependencies all propagate, adding to a map. It is\n-//!        possible for a dylib to add a static library as a dependency, but it\n-//!        is illegal for two dylibs to add the same static library as a\n-//!        dependency. The same dylib can be added twice. Additionally, it is\n-//!        illegal to add a static dependency when it was previously found as a\n-//!        dylib (and vice versa)\n-//!     5. After all dynamic dependencies have been traversed, re-traverse the\n-//!        remaining dependencies and add them statically (if they haven't been\n-//!        added already).\n+//! 1. If static linking is required, then require all upstream dependencies\n+//!    to be available as rlibs. If not, generate an error.\n+//! 2. If static linking is requested (generating an executable), then\n+//!    attempt to use all upstream dependencies as rlibs. If any are not\n+//!    found, bail out and continue to step 3.\n+//! 3. Static linking has failed, at least one library must be dynamically\n+//!    linked. Apply a heuristic by greedily maximizing the number of\n+//!    dynamically linked libraries.\n+//! 4. Each upstream dependency available as a dynamic library is\n+//!    registered. The dependencies all propagate, adding to a map. It is\n+//!    possible for a dylib to add a static library as a dependency, but it\n+//!    is illegal for two dylibs to add the same static library as a\n+//!    dependency. The same dylib can be added twice. Additionally, it is\n+//!    illegal to add a static dependency when it was previously found as a\n+//!    dylib (and vice versa)\n+//! 5. After all dynamic dependencies have been traversed, re-traverse the\n+//!    remaining dependencies and add them statically (if they haven't been\n+//!    added already).\n //!\n //! While not perfect, this algorithm should help support use-cases such as leaf\n //! dependencies being static while the larger tree of inner dependencies are"}, {"sha": "e271f59da87967fe2c8940425ab2798ea08e2291", "filename": "compiler/rustc_middle/src/middle/region.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3b896796719ed1e151d507b4bf2ea635a89cda9e/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b896796719ed1e151d507b4bf2ea635a89cda9e/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fregion.rs?ref=3b896796719ed1e151d507b4bf2ea635a89cda9e", "patch": "@@ -257,7 +257,8 @@ pub struct ScopeTree {\n     /// ```\n     ///\n     /// With the HIR tree (calls numbered for expository purposes)\n-    /// ```\n+    ///\n+    /// ```text\n     ///     Call#0(foo, [Call#1(f), Yield(y), Call#2(bar, Call#3(g))])\n     /// ```\n     ///"}, {"sha": "fdc89a184da527ba7bb44fc28b552eb1390a46ce", "filename": "src/tools/lint-docs/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3b896796719ed1e151d507b4bf2ea635a89cda9e/src%2Ftools%2Flint-docs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b896796719ed1e151d507b4bf2ea635a89cda9e/src%2Ftools%2Flint-docs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Flint-docs%2Fsrc%2Flib.rs?ref=3b896796719ed1e151d507b4bf2ea635a89cda9e", "patch": "@@ -149,6 +149,10 @@ impl<'a> LintExtractor<'a> {\n                         } else if line.starts_with(\"// \") {\n                             // Ignore comments.\n                             continue;\n+                        } else if line.starts_with(\"#[allow\") {\n+                            // Ignore allow of lints (useful for\n+                            // invalid_rust_codeblocks).\n+                            continue;\n                         } else {\n                             let name = lint_name(line).map_err(|e| {\n                                 format!("}]}