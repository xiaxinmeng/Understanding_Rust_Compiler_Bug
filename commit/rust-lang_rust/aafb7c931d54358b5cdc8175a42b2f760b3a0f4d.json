{"sha": "aafb7c931d54358b5cdc8175a42b2f760b3a0f4d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhZmI3YzkzMWQ1NDM1OGI1Y2RjODE3NWE0MmIyZjc2MGIzYTBmNGQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-12-24T10:48:05Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-12-24T10:48:05Z"}, "message": "Auto merge of #1128 - RalfJung:cleanup, r=RalfJung\n\nuse new try_from methods\n\nand a bit of other cleanup", "tree": {"sha": "b7754e704c577a8f8dc171fcb5fca9bb652ea5a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7754e704c577a8f8dc171fcb5fca9bb652ea5a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aafb7c931d54358b5cdc8175a42b2f760b3a0f4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aafb7c931d54358b5cdc8175a42b2f760b3a0f4d", "html_url": "https://github.com/rust-lang/rust/commit/aafb7c931d54358b5cdc8175a42b2f760b3a0f4d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aafb7c931d54358b5cdc8175a42b2f760b3a0f4d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b1e97df8ee3d67b74b3408579f29b017c4c317ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1e97df8ee3d67b74b3408579f29b017c4c317ea", "html_url": "https://github.com/rust-lang/rust/commit/b1e97df8ee3d67b74b3408579f29b017c4c317ea"}, {"sha": "cd12f47af6e9cc107e11962230252e1d66fd9861", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd12f47af6e9cc107e11962230252e1d66fd9861", "html_url": "https://github.com/rust-lang/rust/commit/cd12f47af6e9cc107e11962230252e1d66fd9861"}], "stats": {"total": 79, "additions": 32, "deletions": 47}, "files": [{"sha": "242e2b1d4a13d18acb70825cf1571e6897e18cc3", "filename": "src/helpers.rs", "status": "modified", "additions": 32, "deletions": 47, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/aafb7c931d54358b5cdc8175a42b2f760b3a0f4d/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aafb7c931d54358b5cdc8175a42b2f760b3a0f4d/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=aafb7c931d54358b5cdc8175a42b2f760b3a0f4d", "patch": "@@ -445,6 +445,17 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         'tcx: 'a,\n         'mir: 'a,\n     {\n+        #[cfg(target_os = \"unix\")]\n+        fn bytes_to_os_str<'tcx, 'a>(bytes: &'a [u8]) -> InterpResult<'tcx, &'a OsStr> {\n+            Ok(std::os::unix::ffi::OsStringExt::from_bytes(bytes))\n+        }\n+        #[cfg(not(target_os = \"unix\"))]\n+        fn bytes_to_os_str<'tcx, 'a>(bytes: &'a [u8]) -> InterpResult<'tcx, &'a OsStr> {\n+            let s = std::str::from_utf8(bytes)\n+                .map_err(|_| err_unsup_format!(\"{:?} is not a valid utf-8 string\", bytes))?;\n+            Ok(&OsStr::new(s))\n+        }\n+\n         let this = self.eval_context_ref();\n         let bytes = this.memory.read_c_str(scalar)?;\n         bytes_to_os_str(bytes)\n@@ -460,6 +471,21 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         scalar: Scalar<Tag>,\n         size: u64,\n     ) -> InterpResult<'tcx, bool> {\n+        #[cfg(target_os = \"unix\")]\n+        fn os_str_to_bytes<'tcx, 'a>(os_str: &'a OsStr) -> InterpResult<'tcx, &'a [u8]> {\n+            std::os::unix::ffi::OsStringExt::into_bytes(os_str)\n+        }\n+        #[cfg(not(target_os = \"unix\"))]\n+        fn os_str_to_bytes<'tcx, 'a>(os_str: &'a OsStr) -> InterpResult<'tcx, &'a [u8]> {\n+            // On non-unix platforms the best we can do to transform bytes from/to OS strings is to do the\n+            // intermediate transformation into strings. Which invalidates non-utf8 paths that are actually\n+            // valid.\n+            os_str\n+                .to_str()\n+                .map(|s| s.as_bytes())\n+                .ok_or_else(|| err_unsup_format!(\"{:?} is not a valid utf-8 string\", os_str).into())\n+        }\n+\n         let bytes = os_str_to_bytes(os_str)?;\n         // If `size` is smaller or equal than `bytes.len()`, writing `bytes` plus the required null\n         // terminator to memory using the `ptr` pointer would cause an out-of-bounds access.\n@@ -473,63 +499,22 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     }\n }\n \n-#[cfg(target_os = \"unix\")]\n-fn os_str_to_bytes<'tcx, 'a>(os_str: &'a OsStr) -> InterpResult<'tcx, &'a [u8]> {\n-    std::os::unix::ffi::OsStringExt::into_bytes(os_str)\n-}\n-\n-#[cfg(target_os = \"unix\")]\n-fn bytes_to_os_str<'tcx, 'a>(bytes: &'a [u8]) -> InterpResult<'tcx, &'a OsStr> {\n-    Ok(std::os::unix::ffi::OsStringExt::from_bytes(bytes))\n-}\n-\n-// On non-unix platforms the best we can do to transform bytes from/to OS strings is to do the\n-// intermediate transformation into strings. Which invalidates non-utf8 paths that are actually\n-// valid.\n-#[cfg(not(target_os = \"unix\"))]\n-fn os_str_to_bytes<'tcx, 'a>(os_str: &'a OsStr) -> InterpResult<'tcx, &'a [u8]> {\n-    os_str\n-        .to_str()\n-        .map(|s| s.as_bytes())\n-        .ok_or_else(|| err_unsup_format!(\"{:?} is not a valid utf-8 string\", os_str).into())\n-}\n-\n-#[cfg(not(target_os = \"unix\"))]\n-fn bytes_to_os_str<'tcx, 'a>(bytes: &'a [u8]) -> InterpResult<'tcx, &'a OsStr> {\n-    let s = std::str::from_utf8(bytes)\n-        .map_err(|_| err_unsup_format!(\"{:?} is not a valid utf-8 string\", bytes))?;\n-    Ok(&OsStr::new(s))\n-}\n-\n-// FIXME: change `ImmTy::from_int` so it returns an `InterpResult` instead and remove this\n-// function.\n pub fn immty_from_int_checked<'tcx>(\n     int: impl Into<i128>,\n     layout: TyLayout<'tcx>,\n ) -> InterpResult<'tcx, ImmTy<'tcx, Tag>> {\n     let int = int.into();\n-    // If `int` does not fit in `size` bits, we error instead of letting\n-    // `ImmTy::from_int` panic.\n-    let size = layout.size;\n-    let truncated = truncate(int as u128, size);\n-    if sign_extend(truncated, size) as i128 != int {\n-        throw_unsup_format!(\"Signed value {:#x} does not fit in {} bits\", int, size.bits())\n-    }\n-    Ok(ImmTy::from_int(int, layout))\n+    Ok(ImmTy::try_from_int(int, layout).ok_or_else(||\n+        err_unsup_format!(\"Signed value {:#x} does not fit in {} bits\", int, layout.size.bits())\n+    )?)\n }\n \n-// FIXME: change `ImmTy::from_uint` so it returns an `InterpResult` instead and remove this\n-// function.\n pub fn immty_from_uint_checked<'tcx>(\n     int: impl Into<u128>,\n     layout: TyLayout<'tcx>,\n ) -> InterpResult<'tcx, ImmTy<'tcx, Tag>> {\n     let int = int.into();\n-    // If `int` does not fit in `size` bits, we error instead of letting\n-    // `ImmTy::from_int` panic.\n-    let size = layout.size;\n-    if truncate(int, size) != int {\n-        throw_unsup_format!(\"Unsigned value {:#x} does not fit in {} bits\", int, size.bits())\n-    }\n-    Ok(ImmTy::from_uint(int, layout))\n+    Ok(ImmTy::try_from_uint(int, layout).ok_or_else(||\n+        err_unsup_format!(\"Signed value {:#x} does not fit in {} bits\", int, layout.size.bits())\n+    )?)\n }"}]}