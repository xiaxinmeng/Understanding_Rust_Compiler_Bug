{"sha": "a6b1c131a5785701084e2157d0f460b1f949e202", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2YjFjMTMxYTU3ODU3MDEwODRlMjE1N2QwZjQ2MGIxZjk0OWUyMDI=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-02-16T04:48:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-02-16T04:48:19Z"}, "message": "Rollup merge of #39843 - AndrewGaspar:natvis, r=brson\n\nVec, LinkedList, VecDeque, String, and Option NatVis visualizations\n\nI've added some basic [NatVis](https://msdn.microsoft.com/en-us/library/jj620914.aspx) visualizations for core Rust collections and types. This helps address a need filed in issue #36503. NatVis visualizations are similar to gdb/lldb pretty printers, but for windbg and the Visual Studio debugger on Windows.\n\nFor example, Vec without the supplied NatVis looks like this in windbg using the \"dx\" command:\n```\n0:000> dx some_64_bit_vec\nsome_64_bit_vec                 [Type: collections::vec::Vec<u64>]\n    [+0x000] buf              [Type: alloc::raw_vec::RawVec<u64>]\n    [+0x010] len              : 0x4 [Type: unsigned __int64]\n```\n\nWith the NatVis, the elements of the Vec are displayed:\n```\n0:000> dx some_64_bit_vec\nsome_64_bit_vec                 : { size=0x4 } [Type: collections::vec::Vec<u64>]\n    [<Raw View>]     [Type: collections::vec::Vec<u64>]\n    [size]           : 0x4 [Type: unsigned __int64]\n    [capacity]       : 0x4 [Type: unsigned __int64]\n    [0]              : 0x4 [Type: unsigned __int64]\n    [1]              : 0x4f [Type: unsigned __int64]\n    [2]              : 0x1a [Type: unsigned __int64]\n    [3]              : 0x184 [Type: unsigned __int64]\n```\n\nIn fact, the vector can be treated as an array by the NatVis expression evaluator:\n```\n0:000> dx some_64_bit_vec[2]\nsome_64_bit_vec[2] : 0x1a [Type: unsigned __int64]\n```\n\nIn general, it works with any NatVis command that understands collections, such as NatVis LINQ expressions:\n```\n0:000> dx some_64_bit_vec.Select(x => x * 2)\nsome_64_bit_vec.Select(x => x * 2)\n    [0]              : 0x8\n    [1]              : 0x9e\n    [2]              : 0x34\n    [3]              : 0x308\n```\n\nstd::string::String is implemented, as well:\n```\n0:000> dv\n    hello_world = \"Hello, world!\"\n          empty = \"\"\n            new = \"\"\n0:000> dx hello_world\nhello_world                 : \"Hello, world!\" [Type: collections::string::String]\n    [<Raw View>]     [Type: collections::string::String]\n    [size]           : 0xd [Type: unsigned __int64]\n    [capacity]       : 0xd [Type: unsigned __int64]\n    [0]              : 72 'H' [Type: char]\n    [1]              : 101 'e' [Type: char]\n...\n    [12]             : 33 '!' [Type: char]\n0:000> dx empty\nempty                 : \"\" [Type: collections::string::String]\n    [<Raw View>]     [Type: collections::string::String]\n    [size]           : 0x0 [Type: unsigned __int64]\n    [capacity]       : 0x0 [Type: unsigned __int64]\n\n```\n\nVecDeque and LinkedList are also implemented.\n\nMy biggest concern is the implementation for Option due to the different layouts it can receive based on whether the sentinel value can be embedded with-in the Some value or must be stored separately.\n\nIt seems to work, but my testing isn't exhaustive:\n```\n0:000> dv\n          three = { Some 3 }\n           none = { None }\n         no_str = { None }\n       some_str = { Some \"Hello!\" }\n0:000> dx three\nthree                 : { Some 3 } [Type: core::option::Option<i32>]\n    [<Raw View>]     [Type: core::option::Option<i32>]\n    [size]           : 0x1 [Type: ULONG]\n    [value]          : 3 [Type: int]\n    [0]              : 3 [Type: int]\n0:000> dx none\nnone                 : { None } [Type: core::option::Option<i32>]\n    [<Raw View>]     [Type: core::option::Option<i32>]\n    [size]           : 0x0 [Type: ULONG]\n    [value]          : 4 [Type: int]\n0:000> dx no_str\nno_str                 : { None } [Type: core::option::Option<collections::string::String>]\n    [<Raw View>]     [Type: core::option::Option<collections::string::String>]\n    [size]           : 0x0 [Type: ULONG]\n0:000> dx some_str\nsome_str                 : { Some \"Hello!\" } [Type: core::option::Option<collections::string::String>]\n    [<Raw View>]     [Type: core::option::Option<collections::string::String>]\n    [size]           : 0x1 [Type: ULONG]\n    [value]          : 0x4673df710 : \"Hello!\" [Type: collections::string::String *]\n    [0]              : \"Hello!\" [Type: collections::string::String]\n```\n\nFor now all of these visualizations work in windbg, but I've only gotten the visualizations in libcore.natvis working in the VS debugger. My priority is windbg, but somebody else may be interested in investigating the issues related to VS.\n\nYou can load these visualizations into a windbg sessions using the .nvload command:\n```\n0:000> .nvload ..\\rust\\src\\etc\\natvis\\libcollections.natvis; .nvload ..\\rust\\src\\etc\\natvis\\libcore.natvis\nSuccessfully loaded visualizers in \"..\\rust\\src\\etc\\natvis\\libcollections.natvis\"\nSuccessfully loaded visualizers in \"..\\rust\\src\\etc\\natvis\\libcore.natvis\"\n```\n\nThere are some issues with the symbols that Rust and LLVM conspire to emit into the PDB that inhibit debugging in windbg generally, and by extension make writing visualizations more difficult. Additionally, there are some bugs in windbg itself that complicate or disable some use of the NatVis visualizations for Rust. Significantly, due to NatVis limitations in windbg around allowable type names, you cannot write a visualization for [T] or str. I'll report separate issues as I isolate them.\n\nIn the near term, I hope to fill out these NatVis files with more of Rust's core collections and types. In the long run, I hope that we can ship NatVis files with crates and streamline their deployment when debugging Rust programs on windows.", "tree": {"sha": "d9d1bcdbad1031da41a8da122d3f83ae4645c3f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d9d1bcdbad1031da41a8da122d3f83ae4645c3f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6b1c131a5785701084e2157d0f460b1f949e202", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6b1c131a5785701084e2157d0f460b1f949e202", "html_url": "https://github.com/rust-lang/rust/commit/a6b1c131a5785701084e2157d0f460b1f949e202", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6b1c131a5785701084e2157d0f460b1f949e202/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce9b4783929c4df3916b8f5386f287d71b089267", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce9b4783929c4df3916b8f5386f287d71b089267", "html_url": "https://github.com/rust-lang/rust/commit/ce9b4783929c4df3916b8f5386f287d71b089267"}, {"sha": "a8b7b28babdb49387eb56626b8359d7295515775", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8b7b28babdb49387eb56626b8359d7295515775", "html_url": "https://github.com/rust-lang/rust/commit/a8b7b28babdb49387eb56626b8359d7295515775"}], "stats": {"total": 95, "additions": 95, "deletions": 0}, "files": [{"sha": "821c52361f868fb243225f9d8cfda63b7fd27229", "filename": "src/etc/natvis/libcollections.natvis", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/a6b1c131a5785701084e2157d0f460b1f949e202/src%2Fetc%2Fnatvis%2Flibcollections.natvis", "raw_url": "https://github.com/rust-lang/rust/raw/a6b1c131a5785701084e2157d0f460b1f949e202/src%2Fetc%2Fnatvis%2Flibcollections.natvis", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fnatvis%2Flibcollections.natvis?ref=a6b1c131a5785701084e2157d0f460b1f949e202", "patch": "@@ -0,0 +1,56 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<AutoVisualizer xmlns=\"http://schemas.microsoft.com/vstudio/debugger/natvis/2010\">\n+  <Type Name=\"collections::vec::Vec&lt;*&gt;\">\n+\u00a0\u00a0\u00a0\u00a0<DisplayString>{{ size={len} }}</DisplayString>\n+\u00a0\u00a0\u00a0\u00a0<Expand>\n+      <Item Name=\"[size]\" ExcludeView=\"simple\">len</Item>\n+      <Item Name=\"[capacity]\" ExcludeView=\"simple\">buf.cap</Item>\n+      <ArrayItems>\n+        <Size>len</Size>\n+        <ValuePointer>buf.ptr.pointer.__0</ValuePointer>\n+      </ArrayItems>\n+\u00a0\u00a0\u00a0\u00a0</Expand>\n+\u00a0\u00a0</Type>\n+  <Type Name=\"collections::vec_deque::VecDeque&lt;*&gt;\">\n+    <DisplayString>{{ size={tail &lt;= head ? head - tail : buf.cap - tail + head} }}</DisplayString>\n+    <Expand>\n+      <Item Name=\"[size]\" ExcludeView=\"simple\">tail &lt;= head ? head - tail : buf.cap - tail + head</Item>\n+      <Item Name=\"[capacity]\" ExcludeView=\"simple\">buf.cap</Item>\n+      <CustomListItems>\n+        <Variable Name=\"i\" InitialValue=\"tail\" />\n+\n+        <Size>tail &lt;= head ? head - tail : buf.cap - tail + head</Size>\n+        <Loop>\n+          <If Condition=\"i == head\">\n+            <Break/>\n+          </If>\n+          <Item>buf.ptr.pointer.__0 + i</Item>\n+          <Exec>i = (i + 1 == buf.cap ? 0 : i + 1)</Exec>\n+        </Loop>\n+      </CustomListItems>\n+    </Expand>\n+  </Type>\n+  <Type Name=\"collections::linked_list::LinkedList&lt;*&gt;\">\n+    <DisplayString>{{ size={len} }}</DisplayString>\n+    <Expand>\n+      <LinkedListItems>\n+        <Size>len</Size>\n+        <HeadPointer>*(collections::linked_list::Node&lt;$T1&gt; **)&amp;head</HeadPointer>\n+        <NextPointer>*(collections::linked_list::Node&lt;$T1&gt; **)&amp;next</NextPointer>\n+        <ValueNode>element</ValueNode>\n+      </LinkedListItems>\n+    </Expand>\n+  </Type>\n+  <Type Name=\"collections::string::String\">\n+    <DisplayString>{*(char**)this,[vec.len]}</DisplayString>\n+    <StringView>*(char**)this,[vec.len]</StringView>\n+    <Expand>\n+      <Item Name=\"[size]\" ExcludeView=\"simple\">vec.len</Item>\n+      <Item Name=\"[capacity]\" ExcludeView=\"simple\">vec.buf.cap</Item>\n+      <ArrayItems>\n+        <Size>vec.len</Size>\n+        <ValuePointer>*(char**)this</ValuePointer>\n+      </ArrayItems>\n+    </Expand>\n+  </Type>\n+</AutoVisualizer>\n\\ No newline at end of file"}, {"sha": "37d64be1ce963946b34650299101899e99387e85", "filename": "src/etc/natvis/libcore.natvis", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/a6b1c131a5785701084e2157d0f460b1f949e202/src%2Fetc%2Fnatvis%2Flibcore.natvis", "raw_url": "https://github.com/rust-lang/rust/raw/a6b1c131a5785701084e2157d0f460b1f949e202/src%2Fetc%2Fnatvis%2Flibcore.natvis", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fnatvis%2Flibcore.natvis?ref=a6b1c131a5785701084e2157d0f460b1f949e202", "patch": "@@ -0,0 +1,39 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<AutoVisualizer xmlns=\"http://schemas.microsoft.com/vstudio/debugger/natvis/2010\">\n+  <Type Name=\"core::ptr::Unique&lt;*&gt;\">\n+    <DisplayString>{{ Unique {*pointer.__0} }}</DisplayString>\n+    <Expand>\n+      <Item Name=\"[ptr]\">pointer.__0</Item>\n+    </Expand>\n+  </Type>\n+  <Type Name=\"core::ptr::Shared&lt;*&gt;\">\n+    <DisplayString>{{ Shared {*pointer.__0} }}</DisplayString>\n+    <Expand>\n+      <Item Name=\"[ptr]\">pointer.__0</Item>\n+    </Expand>\n+  </Type>\n+  <Type Name=\"core::option::Option&lt;*&gt;\">\n+    <DisplayString Condition=\"RUST$ENUM$DISR == 0x0\">{{ None }}</DisplayString>\n+    <DisplayString Condition=\"RUST$ENUM$DISR == 0x1\">{{ Some {__0} }}</DisplayString>\n+    <Expand>\n+      <Item Name=\"[size]\" ExcludeView=\"simple\">(ULONG)(RUST$ENUM$DISR != 0)</Item>\n+      <Item Name=\"[value]\" ExcludeView=\"simple\">__0</Item>\n+      <ArrayItems>\n+        <Size>(ULONG)(RUST$ENUM$DISR != 0)</Size>\n+        <ValuePointer>&amp;__0</ValuePointer>\n+      </ArrayItems>\n+    </Expand>\n+  </Type>\n+  <Type Name=\"core::option::Option&lt;*&gt;\" Priority=\"MediumLow\">\n+    <DisplayString Condition=\"*(PVOID *)this == nullptr\">{{ None }}</DisplayString>\n+    <DisplayString>{{ Some {($T1 *)this} }}</DisplayString>\n+    <Expand>\n+      <Item Name=\"[size]\" ExcludeView=\"simple\">(ULONG)(*(PVOID *)this != nullptr)</Item>\n+      <Item Name=\"[value]\" ExcludeView=\"simple\" Condition=\"*(PVOID *)this != nullptr\">($T1 *)this</Item>\n+      <ArrayItems>\n+        <Size>(ULONG)(*(PVOID *)this != nullptr)</Size>\n+        <ValuePointer>($T1 *)this</ValuePointer>\n+      </ArrayItems>\n+    </Expand>\n+  </Type>\n+</AutoVisualizer>\n\\ No newline at end of file"}]}