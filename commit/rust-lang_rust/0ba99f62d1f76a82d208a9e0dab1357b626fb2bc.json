{"sha": "0ba99f62d1f76a82d208a9e0dab1357b626fb2bc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiYTk5ZjYyZDFmNzZhODJkMjA4YTllMGRhYjEzNTdiNjI2ZmIyYmM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-02-19T19:26:42Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-02-19T19:26:42Z"}, "message": "more work on projections and RefCell example", "tree": {"sha": "19e6a6370842f9195d3e027b4765e6b996eb29f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/19e6a6370842f9195d3e027b4765e6b996eb29f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ba99f62d1f76a82d208a9e0dab1357b626fb2bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ba99f62d1f76a82d208a9e0dab1357b626fb2bc", "html_url": "https://github.com/rust-lang/rust/commit/0ba99f62d1f76a82d208a9e0dab1357b626fb2bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ba99f62d1f76a82d208a9e0dab1357b626fb2bc/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "442c4867365d048faec81aeb4f91b67129897795", "url": "https://api.github.com/repos/rust-lang/rust/commits/442c4867365d048faec81aeb4f91b67129897795", "html_url": "https://github.com/rust-lang/rust/commit/442c4867365d048faec81aeb4f91b67129897795"}], "stats": {"total": 34, "additions": 22, "deletions": 12}, "files": [{"sha": "3058ae8d9db24f7f8168bedf71cbfd76014382af", "filename": "src/libcore/pin.rs", "status": "modified", "additions": 22, "deletions": 12, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/0ba99f62d1f76a82d208a9e0dab1357b626fb2bc/src%2Flibcore%2Fpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ba99f62d1f76a82d208a9e0dab1357b626fb2bc/src%2Flibcore%2Fpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpin.rs?ref=0ba99f62d1f76a82d208a9e0dab1357b626fb2bc", "patch": "@@ -149,22 +149,23 @@\n //! of your type could have been pinned, you must treat Drop as implicitly taking\n //! `Pin<&mut Self>`.\n //!\n+//! In particular, if your type is `#[repr(packed)]`, the compiler will automatically\n+//! move fields around to be able to drop them. As a consequence, you cannot use\n+//! pinning with a `#[repr(packed)]` type.\n+//!\n //! # Projections and Structural Pinning\n //!\n //! One interesting question arises when considering the interaction of pinning and\n-//! the fields of a struct. When can a struct have a \"projection operation\", i.e.,\n+//! the fields of a struct. When can a struct have a \"pinning projection\", i.e.,\n //! an operation with type `fn(Pin<&[mut] Struct>) -> Pin<&[mut] Field>`?\n //! In a similar vein, when can a container type (such as `Vec`, `Box`, or `RefCell`)\n //! have an operation with type `fn(Pin<&[mut] Container<T>>) -> Pin<&[mut] T>`?\n //!\n //! This question is closely related to the question of whether pinning is \"structural\":\n-//! when you have pinned a wrapper type, have you pinned its contents? Adding a\n+//! when you have pinned a wrapper type, have you pinned its contents? Deciding this\n+//! is entirely up to the author of any given type. However, adding a\n //! projection to the API answers that question with a \"yes\" by offering pinned access\n-//! to the contents.\n-//!\n-//! In general, as the author of a type you get to decide whether pinning is structural, and\n-//! whether projections are provided. However, there are a couple requirements to be\n-//! upheld when adding projection operations:\n+//! to the contents. In that case, there are a couple requirements to be upheld:\n //!\n //! 1. The wrapper must only be [`Unpin`] if all the fields one can project to are\n //!    `Unpin`. This is the default, but `Unpin` is a safe trait, so as the author of\n@@ -185,15 +186,24 @@\n //!    This can be tricky, as witnessed by `VecDeque`: the destructor of `VecDeque` can fail\n //!    to call `drop` on all elements if one of the destructors panics. This violates the\n //!    `Drop` guarantee, because it can lead to elements being deallocated without\n-//!    their destructor being called.\n+//!    their destructor being called. (`VecDeque` has no pinning projections, so this\n+//!    does not cause unsoundness.)\n //! 5. You must not offer any other operations that could lead to data being moved out of\n //!    the fields when your type is pinned. This is usually not a concern, but can become\n //!    tricky when interior mutability is involved. For example, imagine `RefCell`\n //!    would have a method `fn get_pin_mut(self: Pin<&mut Self>) -> Pin<&mut T>`.\n-//!    This would be catastrophic, because it is possible to move out of a pinned\n-//!    `RefCell`: from `x: Pin<&mut RefCell<T>>`, use `let y = x.into_ref().get_ref()` to obtain\n-//!    `y: &RefCell<T>`, and from there use `y.borrow_mut().deref_mut()` to obtain `&mut T`\n-//!    which can be used with [`mem::swap`].\n+//!    Then we could do the following:\n+//!    ```ignore\n+//!    fn exploit_ref_cell<T>(rc: Pin<&mut RefCell<T>) {\n+//!        { let p = rc.as_mut().get_pin_mut(); } // here we get pinned access to the `T`\n+//!        let rc_shr: &RefCell<T> = rc.into_ref().get_ref();\n+//!        let b = rc_shr.borrow_mut();\n+//!        let content = &mut *b; // and here we have `&mut T` to the same data\n+//!    }\n+//!    ```\n+//!    This is catastrophic, it means we can first pin the content of the `RefCell`\n+//!    (using `RefCell::get_pin_mut`) and then move that content using the mutable\n+//!    reference we got later.\n //!\n //! On the other hand, if you decide *not* to offer any pinning projections, you\n //! are free to `impl<T> Unpin for Container<T>`.  In the standard library,"}]}