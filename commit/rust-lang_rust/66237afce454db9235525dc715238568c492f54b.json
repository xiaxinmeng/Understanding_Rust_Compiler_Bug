{"sha": "66237afce454db9235525dc715238568c492f54b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2MjM3YWZjZTQ1NGRiOTIzNTUyNWRjNzE1MjM4NTY4YzQ5MmY1NGI=", "commit": {"author": {"name": "Ian Douglas Scott", "email": "ian@iandouglasscott.com", "date": "2017-05-21T19:38:07Z"}, "committer": {"name": "Ian Douglas Scott", "email": "ian@iandouglasscott.com", "date": "2017-05-21T19:38:07Z"}, "message": "Fix building without backtrace feature, which was broken in ca8b754\n\nFixes #42139", "tree": {"sha": "49283e1d5d262d37608f71dde6496ce04a3f56b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/49283e1d5d262d37608f71dde6496ce04a3f56b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/66237afce454db9235525dc715238568c492f54b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEECYv1aaNg4jTOK4YaSSThDhmbWVkFAlkh7MgACgkQSSThDhmb\nWVm0FQgAkTbUJu7TIGB3goUiy0+uW9zDVPAWjT3nuYKDkh9StW5njgzMeOErT8S7\ndsxM0ESegzsAlzz1kUDihQOtSCut39W13jIgORiYaeMzkogJzA9f81c5qIBXxtU6\nWxtxxyrFPh6zFGZUvMmTD3/lvf+GU26KY8Fp+yHSINBkjUaAJTTrf2FR0hEzI/t1\neYUdtFK7erokA9vezNd3mwlTq4qbD9QPDWNKgRJgpkZCcH0hCRjoCc9ZA9oYZIel\nrXpkMu+YulbTHC+6NfDHZyHV7aXYC1nzT9VEwmNzEtYIAIdfUFiXrZULiaWzOaX7\nxyVFMact+KcFT8AnZaiYVKkSdNHQWg==\n=EmD9\n-----END PGP SIGNATURE-----", "payload": "tree 49283e1d5d262d37608f71dde6496ce04a3f56b3\nparent 14f30da6132c25543da1f06c32a8c5699d3e5747\nauthor Ian Douglas Scott <ian@iandouglasscott.com> 1495395487 -0700\ncommitter Ian Douglas Scott <ian@iandouglasscott.com> 1495395487 -0700\n\nFix building without backtrace feature, which was broken in ca8b754\n\nFixes #42139\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/66237afce454db9235525dc715238568c492f54b", "html_url": "https://github.com/rust-lang/rust/commit/66237afce454db9235525dc715238568c492f54b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/66237afce454db9235525dc715238568c492f54b/comments", "author": {"login": "ids1024", "id": 2263150, "node_id": "MDQ6VXNlcjIyNjMxNTA=", "avatar_url": "https://avatars.githubusercontent.com/u/2263150?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ids1024", "html_url": "https://github.com/ids1024", "followers_url": "https://api.github.com/users/ids1024/followers", "following_url": "https://api.github.com/users/ids1024/following{/other_user}", "gists_url": "https://api.github.com/users/ids1024/gists{/gist_id}", "starred_url": "https://api.github.com/users/ids1024/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ids1024/subscriptions", "organizations_url": "https://api.github.com/users/ids1024/orgs", "repos_url": "https://api.github.com/users/ids1024/repos", "events_url": "https://api.github.com/users/ids1024/events{/privacy}", "received_events_url": "https://api.github.com/users/ids1024/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ids1024", "id": 2263150, "node_id": "MDQ6VXNlcjIyNjMxNTA=", "avatar_url": "https://avatars.githubusercontent.com/u/2263150?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ids1024", "html_url": "https://github.com/ids1024", "followers_url": "https://api.github.com/users/ids1024/followers", "following_url": "https://api.github.com/users/ids1024/following{/other_user}", "gists_url": "https://api.github.com/users/ids1024/gists{/gist_id}", "starred_url": "https://api.github.com/users/ids1024/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ids1024/subscriptions", "organizations_url": "https://api.github.com/users/ids1024/orgs", "repos_url": "https://api.github.com/users/ids1024/repos", "events_url": "https://api.github.com/users/ids1024/events{/privacy}", "received_events_url": "https://api.github.com/users/ids1024/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14f30da6132c25543da1f06c32a8c5699d3e5747", "url": "https://api.github.com/repos/rust-lang/rust/commits/14f30da6132c25543da1f06c32a8c5699d3e5747", "html_url": "https://github.com/rust-lang/rust/commit/14f30da6132c25543da1f06c32a8c5699d3e5747"}], "stats": {"total": 8, "additions": 8, "deletions": 0}, "files": [{"sha": "06fd838ea06d966b047f8e1a257d1acd253433cd", "filename": "src/libstd/rt.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/66237afce454db9235525dc715238568c492f54b/src%2Flibstd%2Frt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66237afce454db9235525dc715238568c492f54b/src%2Flibstd%2Frt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt.rs?ref=66237afce454db9235525dc715238568c492f54b", "patch": "@@ -35,6 +35,8 @@ fn lang_start(main: fn(), argc: isize, argv: *const *const u8) -> isize {\n     use sys_common;\n     use sys_common::thread_info;\n     use thread::Thread;\n+    #[cfg(not(feature = \"backtrace\"))]\n+    use mem;\n \n     sys::init();\n \n@@ -53,9 +55,12 @@ fn lang_start(main: fn(), argc: isize, argv: *const *const u8) -> isize {\n         sys::args::init(argc, argv);\n \n         // Let's run some code!\n+        #[cfg(feature = \"backtrace\")]\n         let res = panic::catch_unwind(|| {\n             ::sys_common::backtrace::__rust_begin_short_backtrace(main)\n         });\n+        #[cfg(not(feature = \"backtrace\"))]\n+        let res = panic::catch_unwind(mem::transmute::<_, fn()>(main));\n         sys_common::cleanup();\n         res.is_err()\n     };"}, {"sha": "75717abb4ad28612c0c806d23361342d3dfe2986", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/66237afce454db9235525dc715238568c492f54b/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66237afce454db9235525dc715238568c492f54b/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=66237afce454db9235525dc715238568c492f54b", "patch": "@@ -359,9 +359,12 @@ impl Builder {\n             }\n             unsafe {\n                 thread_info::set(imp::guard::current(), their_thread);\n+                #[cfg(feature = \"backtrace\")]\n                 let try_result = panic::catch_unwind(panic::AssertUnwindSafe(|| {\n                     ::sys_common::backtrace::__rust_begin_short_backtrace(f)\n                 }));\n+                #[cfg(not(feature = \"backtrace\"))]\n+                let try_result = panic::catch_unwind(panic::AssertUnwindSafe(f));\n                 *their_packet.get() = Some(try_result);\n             }\n         };"}]}