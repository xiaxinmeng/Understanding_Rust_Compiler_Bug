{"sha": "30173432325654ccd3353f09aa0c7ccd37c84391", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwMTczNDMyMzI1NjU0Y2NkMzM1M2YwOWFhMGM3Y2NkMzdjODQzOTE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-06-30T01:40:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-06-30T01:40:33Z"}, "message": "auto merge of #7457 : Blei/rust/fix-ffi-floats, r=cmr\n\nAlso contains a fix to help ctag pick up macro definitions.", "tree": {"sha": "63602a4be01c28e44f5d83003ef61c119a3e5312", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/63602a4be01c28e44f5d83003ef61c119a3e5312"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/30173432325654ccd3353f09aa0c7ccd37c84391", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/30173432325654ccd3353f09aa0c7ccd37c84391", "html_url": "https://github.com/rust-lang/rust/commit/30173432325654ccd3353f09aa0c7ccd37c84391", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/30173432325654ccd3353f09aa0c7ccd37c84391/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df39932090887086c2d7ce6aa8d30827ab458fd1", "url": "https://api.github.com/repos/rust-lang/rust/commits/df39932090887086c2d7ce6aa8d30827ab458fd1", "html_url": "https://github.com/rust-lang/rust/commit/df39932090887086c2d7ce6aa8d30827ab458fd1"}, {"sha": "a2227f9e0c295c3582683129a8511d7660b644a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2227f9e0c295c3582683129a8511d7660b644a0", "html_url": "https://github.com/rust-lang/rust/commit/a2227f9e0c295c3582683129a8511d7660b644a0"}], "stats": {"total": 15, "additions": 6, "deletions": 9}, "files": [{"sha": "5c2f4f82566b0c90ce01f5c865635b146ab457b3", "filename": "src/etc/ctags.rust", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/30173432325654ccd3353f09aa0c7ccd37c84391/src%2Fetc%2Fctags.rust", "raw_url": "https://github.com/rust-lang/rust/raw/30173432325654ccd3353f09aa0c7ccd37c84391/src%2Fetc%2Fctags.rust", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fctags.rust?ref=30173432325654ccd3353f09aa0c7ccd37c84391", "patch": "@@ -8,3 +8,4 @@\n --regex-rust=/[ \\t]*static[ \\t]+([a-zA-Z0-9_]+)/\\1/m,consts/\n --regex-rust=/[ \\t]*trait[ \\t]+([a-zA-Z0-9_]+)/\\1/m,traits/\n --regex-rust=/[ \\t]*impl[ \\t]+([a-zA-Z0-9_]+)/\\1/m,impls/\n+--regex-rust=/[ \\t]*macro_rules![ \\t]+([a-zA-Z0-9_]+)/\\1/m,macros/"}, {"sha": "5a0ddf3b116bfb890fa46621a61c8d214d815d07", "filename": "src/librustc/middle/trans/cabi_x86_64.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/30173432325654ccd3353f09aa0c7ccd37c84391/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86_64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30173432325654ccd3353f09aa0c7ccd37c84391/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86_64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86_64.rs?ref=30173432325654ccd3353f09aa0c7ccd37c84391", "patch": "@@ -126,11 +126,10 @@ fn classify_ty(ty: Type) -> ~[RegClass] {\n             Float => 4,\n             Double => 8,\n             Struct => {\n+                let str_tys = ty.field_types();\n                 if ty.is_packed() {\n-                    let str_tys = ty.field_types();\n                     str_tys.iter().fold(0, |s, t| s + ty_size(*t))\n                 } else {\n-                    let str_tys = ty.field_types();\n                     let size = str_tys.iter().fold(0, |s, t| align(s, *t) + ty_size(*t));\n                     align(size, ty)\n                 }\n@@ -240,9 +239,7 @@ fn classify_ty(ty: Type) -> ~[RegClass] {\n         let mut i = 0u;\n         let ty_kind = ty.kind();\n         let e = cls.len();\n-        if cls.len() > 2u &&\n-           (ty_kind == Struct ||\n-            ty_kind == Array) {\n+        if cls.len() > 2u && (ty_kind == Struct || ty_kind == Array) {\n             if cls[i].is_sse() {\n                 i += 1u;\n                 while i < e {\n@@ -269,7 +266,7 @@ fn classify_ty(ty: Type) -> ~[RegClass] {\n                     return;\n                 }\n                 if cls[i] == SSEUp {\n-                    cls[i] = SSEInt;\n+                    cls[i] = SSEDv;\n                 } else if cls[i].is_sse() {\n                     i += 1;\n                     while i != e && cls[i] == SSEUp { i += 1u; }\n@@ -287,7 +284,6 @@ fn classify_ty(ty: Type) -> ~[RegClass] {\n     let mut cls = vec::from_elem(words, NoClass);\n     if words > 4 {\n         all_mem(cls);\n-        let cls = cls;\n         return cls;\n     }\n     classify(ty, cls, 0, 0);\n@@ -316,8 +312,8 @@ fn llreg_ty(cls: &[RegClass]) -> Type {\n                 tys.push(Type::i64());\n             }\n             SSEFv => {\n-                let vec_len = llvec_len(cls.tailn(i + 1u)) * 2u;\n-                let vec_ty = Type::vector(&Type::f32(), vec_len as u64);\n+                let vec_len = llvec_len(cls.tailn(i + 1u));\n+                let vec_ty = Type::vector(&Type::f32(), (vec_len * 2u) as u64);\n                 tys.push(vec_ty);\n                 i += vec_len;\n                 loop;"}]}