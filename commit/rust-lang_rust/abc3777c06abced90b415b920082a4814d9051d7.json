{"sha": "abc3777c06abced90b415b920082a4814d9051d7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiYzM3NzdjMDZhYmNlZDkwYjQxNWI5MjAwODJhNDgxNGQ5MDUxZDc=", "commit": {"author": {"name": "Alan Somers", "email": "asomers@gmail.com", "date": "2016-04-04T14:18:44Z"}, "committer": {"name": "Alan Somers", "email": "asomers@gmail.com", "date": "2016-04-04T14:18:44Z"}, "message": "Fix stack overflow detection on FreeBSD\n\nsrc/libstd/sys/unix/thread.rs\n\tImplement several stack-related functions on FreeBSD\n\nsrc/libstd/sys/unix/stack_overflow.rs\n\tFix a comment", "tree": {"sha": "e37936a936b551038f3f5b8c3b4e21605ae9f227", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e37936a936b551038f3f5b8c3b4e21605ae9f227"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/abc3777c06abced90b415b920082a4814d9051d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/abc3777c06abced90b415b920082a4814d9051d7", "html_url": "https://github.com/rust-lang/rust/commit/abc3777c06abced90b415b920082a4814d9051d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/abc3777c06abced90b415b920082a4814d9051d7/comments", "author": {"login": "asomers", "id": 129721, "node_id": "MDQ6VXNlcjEyOTcyMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/129721?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asomers", "html_url": "https://github.com/asomers", "followers_url": "https://api.github.com/users/asomers/followers", "following_url": "https://api.github.com/users/asomers/following{/other_user}", "gists_url": "https://api.github.com/users/asomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/asomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asomers/subscriptions", "organizations_url": "https://api.github.com/users/asomers/orgs", "repos_url": "https://api.github.com/users/asomers/repos", "events_url": "https://api.github.com/users/asomers/events{/privacy}", "received_events_url": "https://api.github.com/users/asomers/received_events", "type": "User", "site_admin": false}, "committer": {"login": "asomers", "id": 129721, "node_id": "MDQ6VXNlcjEyOTcyMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/129721?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asomers", "html_url": "https://github.com/asomers", "followers_url": "https://api.github.com/users/asomers/followers", "following_url": "https://api.github.com/users/asomers/following{/other_user}", "gists_url": "https://api.github.com/users/asomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/asomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asomers/subscriptions", "organizations_url": "https://api.github.com/users/asomers/orgs", "repos_url": "https://api.github.com/users/asomers/repos", "events_url": "https://api.github.com/users/asomers/events{/privacy}", "received_events_url": "https://api.github.com/users/asomers/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bbe8e3502c8c67d9f17d56764031ff3b28206935", "url": "https://api.github.com/repos/rust-lang/rust/commits/bbe8e3502c8c67d9f17d56764031ff3b28206935", "html_url": "https://github.com/rust-lang/rust/commit/bbe8e3502c8c67d9f17d56764031ff3b28206935"}], "stats": {"total": 47, "additions": 45, "deletions": 2}, "files": [{"sha": "22d47ba0f620d9c7349cdaa09e0f6f1e675c7cf9", "filename": "src/libstd/sys/unix/stack_overflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abc3777c06abced90b415b920082a4814d9051d7/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc3777c06abced90b415b920082a4814d9051d7/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs?ref=abc3777c06abced90b415b920082a4814d9051d7", "patch": "@@ -64,7 +64,7 @@ mod imp {\n     unsafe fn siginfo_si_addr(info: *mut libc::siginfo_t) -> usize {\n         #[repr(C)]\n         struct siginfo_t {\n-            a: [libc::c_int; 3], // si_signo, si_code, si_errno,\n+            a: [libc::c_int; 3], // si_signo, si_errno, si_code\n             si_addr: *mut libc::c_void,\n         }\n "}, {"sha": "0f238d5c11c94458cd42936a2058321cb8804fec", "filename": "src/libstd/sys/unix/thread.rs", "status": "modified", "additions": 44, "deletions": 1, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/abc3777c06abced90b415b920082a4814d9051d7/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc3777c06abced90b415b920082a4814d9051d7/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fthread.rs?ref=abc3777c06abced90b415b920082a4814d9051d7", "patch": "@@ -164,6 +164,7 @@ impl Drop for Thread {\n }\n \n #[cfg(all(not(all(target_os = \"linux\", not(target_env = \"musl\"))),\n+          not(target_os = \"freebsd\"),\n           not(target_os = \"macos\"),\n           not(target_os = \"bitrig\"),\n           not(all(target_os = \"netbsd\", not(target_vendor = \"rumprun\"))),\n@@ -177,6 +178,7 @@ pub mod guard {\n \n \n #[cfg(any(all(target_os = \"linux\", not(target_env = \"musl\")),\n+          target_os = \"freebsd\",\n           target_os = \"macos\",\n           target_os = \"bitrig\",\n           all(target_os = \"netbsd\", not(target_vendor = \"rumprun\")),\n@@ -199,6 +201,22 @@ pub mod guard {\n         current().map(|s| s as *mut libc::c_void)\n     }\n \n+    #[cfg(target_os = \"freebsd\")]\n+    unsafe fn get_stack_start() -> Option<*mut libc::c_void> {\n+        let mut ret = None;\n+        let mut attr: libc::pthread_attr_t = ::mem::zeroed();\n+        assert_eq!(libc::pthread_attr_init(&mut attr), 0);\n+        if libc::pthread_attr_get_np(libc::pthread_self(), &mut attr) == 0 {\n+            let mut stackaddr = ::ptr::null_mut();\n+            let mut stacksize = 0;\n+            assert_eq!(libc::pthread_attr_getstack(&attr, &mut stackaddr,\n+                                                   &mut stacksize), 0);\n+            ret = Some(stackaddr);\n+        }\n+        assert_eq!(libc::pthread_attr_destroy(&mut attr), 0);\n+        ret\n+    }\n+\n     #[cfg(any(target_os = \"linux\", target_os = \"android\", target_os = \"netbsd\"))]\n     unsafe fn get_stack_start() -> Option<*mut libc::c_void> {\n         let mut ret = None;\n@@ -248,7 +266,11 @@ pub mod guard {\n             panic!(\"failed to allocate a guard page\");\n         }\n \n-        let offset = if cfg!(target_os = \"linux\") {2} else {1};\n+        let offset = if cfg!(any(target_os = \"linux\", target_os = \"freebsd\")) {\n+            2\n+        } else {\n+            1\n+        };\n \n         Some(stackaddr as usize + offset * psize)\n     }\n@@ -282,6 +304,27 @@ pub mod guard {\n         })\n     }\n \n+    #[cfg(target_os = \"freebsd\")]\n+    pub unsafe fn current() -> Option<usize> {\n+        let mut ret = None;\n+        let mut attr: libc::pthread_attr_t = ::mem::zeroed();\n+        assert_eq!(libc::pthread_attr_init(&mut attr), 0);\n+        if libc::pthread_attr_get_np(libc::pthread_self(), &mut attr) == 0 {\n+            let mut guardsize = 0;\n+            assert_eq!(libc::pthread_attr_getguardsize(&attr, &mut guardsize), 0);\n+            if guardsize == 0 {\n+                panic!(\"there is no guard page\");\n+            }\n+            let mut stackaddr = ::ptr::null_mut();\n+            let mut size = 0;\n+            assert_eq!(libc::pthread_attr_getstack(&attr, &mut stackaddr,\n+                                                   &mut size), 0);\n+            ret = Some(stackaddr as usize - guardsize as usize);\n+        }\n+        assert_eq!(libc::pthread_attr_destroy(&mut attr), 0);\n+        ret\n+    }\n+\n     #[cfg(any(target_os = \"linux\", target_os = \"android\", target_os = \"netbsd\"))]\n     pub unsafe fn current() -> Option<usize> {\n         let mut ret = None;"}]}