{"sha": "bb7bc6c584ece3c0f1fc7fe7c60d343975fa516b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiN2JjNmM1ODRlY2UzYzBmMWZjN2ZlN2M2MGQzNDM5NzVmYTUxNmI=", "commit": {"author": {"name": "Marvin L\u00f6bel", "email": "loebel.marvin@gmail.com", "date": "2013-09-22T02:44:07Z"}, "committer": {"name": "Marvin L\u00f6bel", "email": "loebel.marvin@gmail.com", "date": "2013-09-23T14:33:11Z"}, "message": "Extended the module tutorial section about files a bit", "tree": {"sha": "7409cb35f0be579b7d6f4734ad46363b949f3f10", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7409cb35f0be579b7d6f4734ad46363b949f3f10"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb7bc6c584ece3c0f1fc7fe7c60d343975fa516b", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb7bc6c584ece3c0f1fc7fe7c60d343975fa516b", "html_url": "https://github.com/rust-lang/rust/commit/bb7bc6c584ece3c0f1fc7fe7c60d343975fa516b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb7bc6c584ece3c0f1fc7fe7c60d343975fa516b/comments", "author": {"login": "Kimundi", "id": 2903206, "node_id": "MDQ6VXNlcjI5MDMyMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/2903206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kimundi", "html_url": "https://github.com/Kimundi", "followers_url": "https://api.github.com/users/Kimundi/followers", "following_url": "https://api.github.com/users/Kimundi/following{/other_user}", "gists_url": "https://api.github.com/users/Kimundi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kimundi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kimundi/subscriptions", "organizations_url": "https://api.github.com/users/Kimundi/orgs", "repos_url": "https://api.github.com/users/Kimundi/repos", "events_url": "https://api.github.com/users/Kimundi/events{/privacy}", "received_events_url": "https://api.github.com/users/Kimundi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Kimundi", "id": 2903206, "node_id": "MDQ6VXNlcjI5MDMyMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/2903206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kimundi", "html_url": "https://github.com/Kimundi", "followers_url": "https://api.github.com/users/Kimundi/followers", "following_url": "https://api.github.com/users/Kimundi/following{/other_user}", "gists_url": "https://api.github.com/users/Kimundi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kimundi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kimundi/subscriptions", "organizations_url": "https://api.github.com/users/Kimundi/orgs", "repos_url": "https://api.github.com/users/Kimundi/repos", "events_url": "https://api.github.com/users/Kimundi/events{/privacy}", "received_events_url": "https://api.github.com/users/Kimundi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80e096830dc4bd291597c904078fb0e60a09b2ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/80e096830dc4bd291597c904078fb0e60a09b2ec", "html_url": "https://github.com/rust-lang/rust/commit/80e096830dc4bd291597c904078fb0e60a09b2ec"}], "stats": {"total": 63, "additions": 50, "deletions": 13}, "files": [{"sha": "daac7f4fe8ba44c528eb99b244e1a9618a49a9d0", "filename": "doc/tutorial.md", "status": "modified", "additions": 50, "deletions": 13, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/bb7bc6c584ece3c0f1fc7fe7c60d343975fa516b/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/bb7bc6c584ece3c0f1fc7fe7c60d343975fa516b/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=bb7bc6c584ece3c0f1fc7fe7c60d343975fa516b", "patch": "@@ -2420,7 +2420,8 @@ However, in practice you usually want to split you code up into multiple source\n In order to do that, Rust allows you to move the body of any module into it's own source file, which works like this:\n \n If you declare a module without its body, like `mod foo;`, the compiler will look for the\n-files `foo.rs` and `foo/mod.rs`. If it finds either, it uses the content of that file as the body of the module.\n+files `foo.rs` and `foo/mod.rs` inside some directory (usually the same as of the source file containing\n+the `mod foo;`). If it finds either, it uses the content of that file as the body of the module.\n If it finds both, that's a compile error.\n \n So, if we want to move the content of `mod farm` into it's own file, it would look like this:\n@@ -2446,7 +2447,7 @@ pub mod barn {\n # fn main() { }\n ~~~~\n \n-So, in short `mod foo;` is just syntactic sugar for `mod foo { /* include content of foo.rs or foo/mod.rs here */ }`.\n+In short, `mod foo;` is just syntactic sugar for `mod foo { /* content of <...>/foo.rs or <...>/foo/mod.rs */ }`.\n \n This also means that having two or more identical `mod foo;` somewhere\n in your crate hierarchy is generally a bad idea,\n@@ -2455,14 +2456,14 @@ Both will result in duplicate and mutually incompatible definitions.\n \n The directory the compiler looks in for those two files is determined by starting with\n the same directory as the source file that contains the `mod foo;` declaration, and concatenating to that a\n-path equivalent to the relative path of all nested `mod { ... }` declarations the `mod foo;` is contained in, if any.\n+path equivalent to the relative path of all nested `mod { ... }` declarations the `mod foo;`\n+is contained in, if any.\n \n For example, given a file with this module body:\n \n ~~~ {.ignore}\n // src/main.rs\n mod plants;\n-mod fungi;\n mod animals {\n     mod fish;\n     mod mammals {\n@@ -2477,25 +2478,61 @@ The compiler would then try all these files:\n src/plants.rs\n src/plants/mod.rs\n \n-src/fungi.rs\n-src/fungi/mod.rs\n-\n src/animals/fish.rs\n src/animals/fish/mod.rs\n \n src/animals/mammals/humans.rs\n src/animals/mammals/humans/mod.rs\n ~~~\n \n-These rules per default result in any directory structure mirroring\n-the crates's module hierarchy, and allow you to have both small modules that only need\n-to consist of one source file, and big modules that group the source files of submodules together.\n+Keep in mind that identical module hierachies can still lead to different path lookups\n+depending on how and where you've moved a module body to its own file.\n+For example, if we move the `animals` module above into its own file...\n+\n+~~~ {.ignore}\n+// src/main.rs\n+mod plants;\n+mod animals;\n+~~~\n+~~~ {.ignore}\n+// src/animals.rs or src/animals/mod.rs\n+mod fish;\n+mod mammals {\n+    mod humans;\n+}\n+~~~\n+...then the source files of `mod animals`'s submodules can\n+either be placed right next to that of its parents, or in a subdirectory if `animals` source file is:\n+\n+~~~ {.notrust}\n+src/plants.rs\n+src/plants/mod.rs\n+\n+src/animals.rs - if file sits next to that of parent module's:\n+    src/fish.rs\n+    src/fish/mod.rs\n+\n+    src/mammals/humans.rs\n+    src/mammals/humans/mod.rs\n+\n+src/animals/mod.rs - if file is in it's own subdirectory:\n+    src/animals/fish.rs\n+    src/animals/fish/mod.rs\n+\n+    src/animals/mammals/humans.rs\n+    src/animals/mammals/humans/mod.rs\n+\n+~~~\n+\n+These rules allow you to have both small modules that only need\n+to consist of one source file each and can be conveniently placed right next to each other,\n+and big complicated modules that group the source files of submodules in subdirectories.\n \n-If you need to circumvent those defaults, you can also overwrite the path a `mod foo;` would take:\n+If you need to circumvent the defaults, you can also overwrite the path a `mod foo;` would take:\n \n ~~~ {.ignore}\n-#[path=\"../../area51/classified.rs\"]\n-mod alien;\n+#[path=\"../../area51/alien.rs\"]\n+mod classified;\n ~~~\n \n ## Importing names into the local scope"}]}