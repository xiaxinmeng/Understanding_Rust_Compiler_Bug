{"sha": "d35d972e6974d40d30362344ea619a5b560aae20", "node_id": "C_kwDOAAsO6NoAKGQzNWQ5NzJlNjk3NGQ0MGQzMDM2MjM0NGVhNjE5YTViNTYwYWFlMjA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-31T06:53:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-31T06:53:02Z"}, "message": "Auto merge of #97574 - Dylan-DPC:rollup-jq850l6, r=Dylan-DPC\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #97089 (Improve settings theme display)\n - #97229 (Document the current aliasing rules for `Box<T>`.)\n - #97371 (Suggest adding a semicolon to a closure without block)\n - #97455 (Stabilize `toowned_clone_into`)\n - #97565 (Add doc alias `memset` to `write_bytes`)\n - #97569 (Remove `memset` alias from `fill_with`.)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "739cf333b1f507f7d5d77e99f42ccd4c5f684164", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/739cf333b1f507f7d5d77e99f42ccd4c5f684164"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d35d972e6974d40d30362344ea619a5b560aae20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d35d972e6974d40d30362344ea619a5b560aae20", "html_url": "https://github.com/rust-lang/rust/commit/d35d972e6974d40d30362344ea619a5b560aae20", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d35d972e6974d40d30362344ea619a5b560aae20/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "989b806f61cf12840ddcd8b2bf16d6bef055bd01", "url": "https://api.github.com/repos/rust-lang/rust/commits/989b806f61cf12840ddcd8b2bf16d6bef055bd01", "html_url": "https://github.com/rust-lang/rust/commit/989b806f61cf12840ddcd8b2bf16d6bef055bd01"}, {"sha": "efd2519e10e05ddeddc2bee7ed3819fcf6c69ef0", "url": "https://api.github.com/repos/rust-lang/rust/commits/efd2519e10e05ddeddc2bee7ed3819fcf6c69ef0", "html_url": "https://github.com/rust-lang/rust/commit/efd2519e10e05ddeddc2bee7ed3819fcf6c69ef0"}], "stats": {"total": 339, "additions": 266, "deletions": 73}, "files": [{"sha": "d6a8659d54b58dd0a52f2531a5853682c84f6eb2", "filename": "compiler/rustc_typeck/src/check/coercion.rs", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/d35d972e6974d40d30362344ea619a5b560aae20/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d35d972e6974d40d30362344ea619a5b560aae20/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs?ref=d35d972e6974d40d30362344ea619a5b560aae20", "patch": "@@ -1500,7 +1500,8 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n                             coercion_error.clone(),\n                             fcx,\n                             parent_id,\n-                            expression.map(|expr| (expr, blk_id)),\n+                            expression,\n+                            Some(blk_id),\n                         );\n                         if !fcx.tcx.features().unsized_locals {\n                             unsized_return = self.is_return_ty_unsized(fcx, blk_id);\n@@ -1514,6 +1515,7 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n                             coercion_error.clone(),\n                             fcx,\n                             id,\n+                            expression,\n                             None,\n                         );\n                         if !fcx.tcx.features().unsized_locals {\n@@ -1564,21 +1566,28 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n         ty_err: TypeError<'tcx>,\n         fcx: &FnCtxt<'a, 'tcx>,\n         id: hir::HirId,\n-        expression: Option<(&'tcx hir::Expr<'tcx>, hir::HirId)>,\n+        expression: Option<&'tcx hir::Expr<'tcx>>,\n+        blk_id: Option<hir::HirId>,\n     ) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n         let mut err = fcx.report_mismatched_types(cause, expected, found, ty_err);\n \n         let mut pointing_at_return_type = false;\n         let mut fn_output = None;\n \n+        let parent_id = fcx.tcx.hir().get_parent_node(id);\n+        let parent = fcx.tcx.hir().get(parent_id);\n+        if let Some(expr) = expression\n+            && let hir::Node::Expr(hir::Expr { kind: hir::ExprKind::Closure(_, _, body_id, ..), .. }) = parent\n+            && !matches!(fcx.tcx.hir().get(body_id.hir_id), hir::Node::Expr(hir::Expr { kind: hir::ExprKind::Block(..), .. }))\n+        {\n+            fcx.suggest_missing_semicolon(&mut err, expr, expected, true);\n+        }\n         // Verify that this is a tail expression of a function, otherwise the\n         // label pointing out the cause for the type coercion will be wrong\n         // as prior return coercions would not be relevant (#57664).\n-        let parent_id = fcx.tcx.hir().get_parent_node(id);\n-        let fn_decl = if let Some((expr, blk_id)) = expression {\n+        let fn_decl = if let (Some(expr), Some(blk_id)) = (expression, blk_id) {\n             pointing_at_return_type =\n                 fcx.suggest_mismatched_types_on_tail(&mut err, expr, expected, found, blk_id);\n-            let parent = fcx.tcx.hir().get(parent_id);\n             if let (Some(cond_expr), true, false) = (\n                 fcx.tcx.hir().get_if_cause(expr.hir_id),\n                 expected.is_unit(),\n@@ -1607,7 +1616,7 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n         };\n \n         if let Some((fn_decl, can_suggest)) = fn_decl {\n-            if expression.is_none() {\n+            if blk_id.is_none() {\n                 pointing_at_return_type |= fcx.suggest_missing_return_type(\n                     &mut err,\n                     &fn_decl,\n@@ -1625,8 +1634,8 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n         let parent_id = fcx.tcx.hir().get_parent_item(id);\n         let parent_item = fcx.tcx.hir().get_by_def_id(parent_id);\n \n-        if let (Some((expr, _)), Some((fn_decl, _, _))) =\n-            (expression, fcx.get_node_fn_decl(parent_item))\n+        if let (Some(expr), Some(_), Some((fn_decl, _, _))) =\n+            (expression, blk_id, fcx.get_node_fn_decl(parent_item))\n         {\n             fcx.suggest_missing_break_or_return_expr(\n                 &mut err,"}, {"sha": "76add2fb9c2859588531f53b16ef61706007fa43", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/suggestions.rs", "status": "modified", "additions": 28, "deletions": 14, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/d35d972e6974d40d30362344ea619a5b560aae20/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d35d972e6974d40d30362344ea619a5b560aae20/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs?ref=d35d972e6974d40d30362344ea619a5b560aae20", "patch": "@@ -46,12 +46,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         blk_id: hir::HirId,\n     ) -> bool {\n         let expr = expr.peel_drop_temps();\n-        // If the expression is from an external macro, then do not suggest\n-        // adding a semicolon, because there's nowhere to put it.\n-        // See issue #81943.\n-        if expr.can_have_side_effects() && !in_external_macro(self.tcx.sess, expr.span) {\n-            self.suggest_missing_semicolon(err, expr, expected);\n-        }\n+        self.suggest_missing_semicolon(err, expr, expected, false);\n         let mut pointing_at_return_type = false;\n         if let Some((fn_decl, can_suggest)) = self.get_fn_decl(blk_id) {\n             let fn_id = self.tcx.hir().get_return_block(blk_id).unwrap();\n@@ -473,11 +468,15 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// This routine checks if the return expression in a block would make sense on its own as a\n     /// statement and the return type has been left as default or has been specified as `()`. If so,\n     /// it suggests adding a semicolon.\n-    fn suggest_missing_semicolon(\n+    ///\n+    /// If the expression is the expression of a closure without block (`|| expr`), a\n+    /// block is needed to be added too (`|| { expr; }`). This is denoted by `needs_block`.\n+    pub fn suggest_missing_semicolon(\n         &self,\n         err: &mut Diagnostic,\n         expression: &'tcx hir::Expr<'tcx>,\n         expected: Ty<'tcx>,\n+        needs_block: bool,\n     ) {\n         if expected.is_unit() {\n             // `BlockTailExpression` only relevant if the tail expr would be\n@@ -489,14 +488,29 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 | ExprKind::If(..)\n                 | ExprKind::Match(..)\n                 | ExprKind::Block(..)\n-                    if expression.can_have_side_effects() =>\n+                    if expression.can_have_side_effects()\n+                        // If the expression is from an external macro, then do not suggest\n+                        // adding a semicolon, because there's nowhere to put it.\n+                        // See issue #81943.\n+                        && !in_external_macro(self.tcx.sess, expression.span) =>\n                 {\n-                    err.span_suggestion(\n-                        expression.span.shrink_to_hi(),\n-                        \"consider using a semicolon here\",\n-                        \";\".to_string(),\n-                        Applicability::MachineApplicable,\n-                    );\n+                    if needs_block {\n+                        err.multipart_suggestion(\n+                            \"consider using a semicolon here\",\n+                            vec![\n+                                (expression.span.shrink_to_lo(), \"{ \".to_owned()),\n+                                (expression.span.shrink_to_hi(), \"; }\".to_owned()),\n+                            ],\n+                            Applicability::MachineApplicable,\n+                        );\n+                    } else {\n+                        err.span_suggestion(\n+                            expression.span.shrink_to_hi(),\n+                            \"consider using a semicolon here\",\n+                            \";\".to_string(),\n+                            Applicability::MachineApplicable,\n+                        );\n+                    }\n                 }\n                 _ => (),\n             }"}, {"sha": "7a79fb77dea554307d289c1b0d02e33e6af47b5e", "filename": "library/alloc/src/borrow.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d35d972e6974d40d30362344ea619a5b560aae20/library%2Falloc%2Fsrc%2Fborrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d35d972e6974d40d30362344ea619a5b560aae20/library%2Falloc%2Fsrc%2Fborrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fborrow.rs?ref=d35d972e6974d40d30362344ea619a5b560aae20", "patch": "@@ -67,14 +67,13 @@ pub trait ToOwned {\n     /// Basic usage:\n     ///\n     /// ```\n-    /// # #![feature(toowned_clone_into)]\n     /// let mut s: String = String::new();\n     /// \"hello\".clone_into(&mut s);\n     ///\n     /// let mut v: Vec<i32> = Vec::new();\n     /// [1, 2][..].clone_into(&mut v);\n     /// ```\n-    #[unstable(feature = \"toowned_clone_into\", reason = \"recently added\", issue = \"41263\")]\n+    #[stable(feature = \"toowned_clone_into\", since = \"1.63.0\")]\n     fn clone_into(&self, target: &mut Self::Owned) {\n         *target = self.to_owned();\n     }"}, {"sha": "41f3b1fa3dddb1bc72a9f4777b438e2e73b6006e", "filename": "library/alloc/src/boxed.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d35d972e6974d40d30362344ea619a5b560aae20/library%2Falloc%2Fsrc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d35d972e6974d40d30362344ea619a5b560aae20/library%2Falloc%2Fsrc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fboxed.rs?ref=d35d972e6974d40d30362344ea619a5b560aae20", "patch": "@@ -122,7 +122,21 @@\n //! definition is just using `T*` can lead to undefined behavior, as\n //! described in [rust-lang/unsafe-code-guidelines#198][ucg#198].\n //!\n+//! # Considerations for unsafe code\n+//!\n+//! **Warning: This section is not normative and is subject to change, possibly\n+//! being relaxed in the future! It is a simplified summary of the rules\n+//! currently implemented in the compiler.**\n+//!\n+//! The aliasing rules for `Box<T>` are the same as for `&mut T`. `Box<T>`\n+//! asserts uniqueness over its content. Using raw pointers derived from a box\n+//! after that box has been mutated through, moved or borrowed as `&mut T`\n+//! is not allowed. For more guidance on working with box from unsafe code, see\n+//! [rust-lang/unsafe-code-guidelines#326][ucg#326].\n+//!\n+//!\n //! [ucg#198]: https://github.com/rust-lang/unsafe-code-guidelines/issues/198\n+//! [ucg#326]: https://github.com/rust-lang/unsafe-code-guidelines/issues/326\n //! [dereferencing]: core::ops::Deref\n //! [`Box::<T>::from_raw(value)`]: Box::from_raw\n //! [`Global`]: crate::alloc::Global"}, {"sha": "0b76790c0097e05ca2d136b4503b3b0022349ed1", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d35d972e6974d40d30362344ea619a5b560aae20/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d35d972e6974d40d30362344ea619a5b560aae20/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=d35d972e6974d40d30362344ea619a5b560aae20", "patch": "@@ -2287,6 +2287,7 @@ pub const unsafe fn copy<T>(src: *const T, dst: *mut T, count: usize) {\n /// // Now the box is fine\n /// assert_eq!(*v, 42);\n /// ```\n+#[doc(alias = \"memset\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_const_unstable(feature = \"const_ptr_write\", issue = \"86302\")]\n #[inline]"}, {"sha": "1aaa274a054345e2b43d6a6ac88a22705a4b0ef9", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d35d972e6974d40d30362344ea619a5b560aae20/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d35d972e6974d40d30362344ea619a5b560aae20/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=d35d972e6974d40d30362344ea619a5b560aae20", "patch": "@@ -1412,6 +1412,7 @@ impl<T: ?Sized> *mut T {\n     /// See [`ptr::write_bytes`] for safety concerns and examples.\n     ///\n     /// [`ptr::write_bytes`]: crate::ptr::write_bytes()\n+    #[doc(alias = \"memset\")]\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[rustc_const_unstable(feature = \"const_ptr_write\", issue = \"86302\")]\n     #[inline(always)]"}, {"sha": "77fd1ec2b8ea2594022102112e24773d715b2bdf", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d35d972e6974d40d30362344ea619a5b560aae20/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d35d972e6974d40d30362344ea619a5b560aae20/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=d35d972e6974d40d30362344ea619a5b560aae20", "patch": "@@ -3083,7 +3083,6 @@ impl<T> [T] {\n     /// buf.fill_with(Default::default);\n     /// assert_eq!(buf, vec![0; 10]);\n     /// ```\n-    #[doc(alias = \"memset\")]\n     #[stable(feature = \"slice_fill_with\", since = \"1.51.0\")]\n     pub fn fill_with<F>(&mut self, mut f: F)\n     where"}, {"sha": "71ea5f1a1f01e0c54afe682dffb9cdead333e345", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d35d972e6974d40d30362344ea619a5b560aae20/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d35d972e6974d40d30362344ea619a5b560aae20/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=d35d972e6974d40d30362344ea619a5b560aae20", "patch": "@@ -299,7 +299,6 @@\n #![feature(map_try_insert)]\n #![feature(new_uninit)]\n #![feature(thin_box)]\n-#![feature(toowned_clone_into)]\n #![feature(try_reserve_kind)]\n #![feature(vec_into_raw_parts)]\n #![feature(slice_concat_trait)]"}, {"sha": "1cd8e39e03648ad5eed7fd213c1aa0f2ebd7f9ed", "filename": "src/librustdoc/html/static/css/settings.css", "status": "modified", "additions": 20, "deletions": 33, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/d35d972e6974d40d30362344ea619a5b560aae20/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fsettings.css", "raw_url": "https://github.com/rust-lang/rust/raw/d35d972e6974d40d30362344ea619a5b560aae20/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fsettings.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fsettings.css?ref=d35d972e6974d40d30362344ea619a5b560aae20", "patch": "@@ -3,44 +3,40 @@\n \tposition: relative;\n }\n \n-.setting-line > div {\n-\tdisplay: inline-block;\n-\tvertical-align: top;\n-\tfont-size: 17px;\n-\tpadding-top: 2px;\n-}\n-\n-.setting-line > .title {\n-\tfont-size: 19px;\n-\twidth: 100%;\n-\tmax-width: none;\n-\tborder-bottom: 1px solid;\n-}\n-\n-.setting-line .radio-line,\n .setting-line .choices {\n \tdisplay: flex;\n \tflex-wrap: wrap;\n }\n \n-.setting-line .radio-line .setting-name {\n-\tflex-grow: 1;\n-\tmargin-top: auto;\n-\tmargin-bottom: auto;\n-}\n-\n .setting-line .radio-line input {\n \tmargin-right: 0.3em;\n+\theight: 1.2rem;\n+\twidth: 1.2rem;\n+\tborder: 1px solid;\n+\toutline: none;\n+\t-webkit-appearance: none;\n+\tcursor: pointer;\n+\tborder-radius: 50%;\n+}\n+.setting-line .radio-line input + span {\n+\tpadding-bottom: 1px;\n+}\n+\n+.radio-line .setting-name {\n+\twidth: 100%;\n }\n \n .radio-line .choice {\n-\tborder-radius: 0.1em;\n-\tborder: 1px solid;\n-\tmargin-left: 0.5em;\n \tmargin-top: 0.1em;\n \tmargin-bottom: 0.1em;\n \tmin-width: 3.8em;\n \tpadding: 0.3em;\n+\tdisplay: flex;\n+\talign-items: center;\n+\tcursor: pointer;\n+}\n+.radio-line .choice + .choice {\n+\tmargin-left: 0.5em;\n }\n \n .toggle {\n@@ -77,18 +73,9 @@\n \twidth: 19px;\n \tleft: 4px;\n \tbottom: 4px;\n-\tbackground-color: white;\n \ttransition: .3s;\n }\n \n-input:checked + .slider {\n-\tbackground-color: #2196F3;\n-}\n-\n-input:focus + .slider {\n-\tbox-shadow: 0 0 0 2px #0a84ff, 0 0 0 6px rgba(10, 132, 255, 0.3);\n-}\n-\n input:checked + .slider:before {\n \ttransform: translateX(19px);\n }"}, {"sha": "7303cecc0d61a54443ebcf1a396afaccdda4d28a", "filename": "src/librustdoc/html/static/css/themes/ayu.css", "status": "modified", "additions": 32, "deletions": 7, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/d35d972e6974d40d30362344ea619a5b560aae20/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "raw_url": "https://github.com/rust-lang/rust/raw/d35d972e6974d40d30362344ea619a5b560aae20/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css?ref=d35d972e6974d40d30362344ea619a5b560aae20", "patch": "@@ -10,6 +10,38 @@ body, #settings-menu #settings, #settings-menu #settings::before {\n \tcolor: #c5c5c5;\n }\n \n+.setting-line .radio-line input {\n+\tborder-color: #c5c5c5;\n+}\n+.setting-line .radio-line input:checked {\n+\tbox-shadow: inset 0 0 0 3px #0f1419;\n+\tbackground-color: #ffb454;\n+}\n+.setting-line .radio-line input:focus {\n+\tbox-shadow: 0 0 1px 1px #ffb454;\n+}\n+/* In here we combine both `:focus` and `:checked` properties. */\n+.setting-line .radio-line input:checked:focus {\n+\tbox-shadow: inset 0 0 0 3px 0f1419,\n+\t\t0 0 2px 2px #ffb454;\n+}\n+.setting-line .radio-line input:hover {\n+\tborder-color: #ffb454 !important;\n+}\n+\n+.slider {\n+\tbackground-color: #ccc;\n+}\n+.slider:before {\n+\tbackground-color: white;\n+}\n+input:checked + .slider {\n+\tbackground-color: #ffb454;\n+}\n+input:focus + .slider {\n+\tbox-shadow: 0 0 0 2px #0a84ff, 0 0 0 6px rgba(10, 132, 255, 0.3);\n+}\n+\n h1, h2, h3, h4 {\n \tcolor: white;\n }\n@@ -601,13 +633,6 @@ div.files > .selected {\n \tbackground-color: #14191f;\n \tcolor: #ffb44c;\n }\n-.setting-line > .title {\n-\tborder-bottom-color: #5c6773;\n-}\n-input:checked + .slider {\n-\tbackground-color: #ffb454 !important;\n-}\n-\n \n .scraped-example-list .scrape-help {\n \tborder-color: #aaa;"}, {"sha": "34a4f446b560b49235c3c2181dd3f27ab49bc716", "filename": "src/librustdoc/html/static/css/themes/dark.css", "status": "modified", "additions": 32, "deletions": 3, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/d35d972e6974d40d30362344ea619a5b560aae20/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "raw_url": "https://github.com/rust-lang/rust/raw/d35d972e6974d40d30362344ea619a5b560aae20/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css?ref=d35d972e6974d40d30362344ea619a5b560aae20", "patch": "@@ -3,6 +3,38 @@ body, #settings-menu #settings, #settings-menu #settings::before {\n \tcolor: #ddd;\n }\n \n+.setting-line .radio-line input {\n+\tborder-color: #ddd;\n+}\n+.setting-line .radio-line input:checked {\n+\tbox-shadow: inset 0 0 0 3px #353535;\n+\tbackground-color: #2196f3;\n+}\n+.setting-line .radio-line input:focus {\n+\tbox-shadow: 0 0 1px 1px #2196f3;\n+}\n+/* In here we combine both `:focus` and `:checked` properties. */\n+.setting-line .radio-line input:checked:focus {\n+\tbox-shadow: inset 0 0 0 3px #353535,\n+\t\t0 0 2px 2px #2196f3;\n+}\n+.setting-line .radio-line input:hover {\n+\tborder-color: #2196f3 !important;\n+}\n+\n+.slider {\n+\tbackground-color: #ccc;\n+}\n+.slider:before {\n+\tbackground-color: white;\n+}\n+input:checked + .slider {\n+\tbackground-color: #2196F3;\n+}\n+input:focus + .slider {\n+\tbox-shadow: 0 0 0 2px #0a84ff, 0 0 0 6px rgba(10, 132, 255, 0.3);\n+}\n+\n h1, h2, h3, h4 {\n \tcolor: #ddd;\n }\n@@ -472,9 +504,6 @@ div.files > a:hover, div.name:hover {\n div.files > .selected {\n \tbackground-color: #333;\n }\n-.setting-line > .title {\n-\tborder-bottom-color: #ddd;\n-}\n \n .scraped-example-list .scrape-help {\n \tborder-color: #aaa;"}, {"sha": "aa6ad2f547333aca23e756dad35f1c0ce52dc1f5", "filename": "src/librustdoc/html/static/css/themes/light.css", "status": "modified", "additions": 32, "deletions": 3, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/d35d972e6974d40d30362344ea619a5b560aae20/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "raw_url": "https://github.com/rust-lang/rust/raw/d35d972e6974d40d30362344ea619a5b560aae20/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css?ref=d35d972e6974d40d30362344ea619a5b560aae20", "patch": "@@ -5,6 +5,38 @@ body, #settings-menu #settings, #settings-menu #settings::before {\n \tcolor: black;\n }\n \n+.setting-line .radio-line input {\n+\tborder-color: black;\n+}\n+.setting-line .radio-line input:checked {\n+\tbox-shadow: inset 0 0 0 3px white;\n+\tbackground-color: #2196f3;\n+}\n+.setting-line .radio-line input:focus {\n+\tbox-shadow: 0 0 1px 1px #2196f3;\n+}\n+/* In here we combine both `:focus` and `:checked` properties. */\n+.setting-line .radio-line input:checked:focus {\n+\tbox-shadow: inset 0 0 0 3px white,\n+\t\t0 0 2px 2px #2196f3;\n+}\n+.setting-line .radio-line input:hover {\n+\tborder-color: #2196f3 !important;\n+}\n+\n+.slider {\n+\tbackground-color: #ccc;\n+}\n+.slider:before {\n+\tbackground-color: white;\n+}\n+input:checked + .slider {\n+\tbackground-color: #2196F3;\n+}\n+input:focus + .slider {\n+\tbox-shadow: 0 0 0 2px #0a84ff, 0 0 0 6px rgba(10, 132, 255, 0.3);\n+}\n+\n h1, h2, h3, h4 {\n \tcolor: black;\n }\n@@ -456,9 +488,6 @@ div.files > a:hover, div.name:hover {\n div.files > .selected {\n \tbackground-color: #fff;\n }\n-.setting-line > .title {\n-\tborder-bottom-color: #D5D5D5;\n-}\n \n .scraped-example-list .scrape-help {\n \tborder-color: #555;"}, {"sha": "41bf0ec8955805ec9e1178a4a61da850689d152c", "filename": "src/librustdoc/html/static/js/settings.js", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d35d972e6974d40d30362344ea619a5b560aae20/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsettings.js", "raw_url": "https://github.com/rust-lang/rust/raw/d35d972e6974d40d30362344ea619a5b560aae20/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsettings.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsettings.js?ref=d35d972e6974d40d30362344ea619a5b560aae20", "patch": "@@ -123,7 +123,7 @@\n                     output += `<label for=\"${js_data_name}-${option}\" class=\"choice\">\\\n                            <input type=\"radio\" name=\"${js_data_name}\" \\\n                                 id=\"${js_data_name}-${option}\" value=\"${option}\"${checked}>\\\n-                           ${option}\\\n+                           <span>${option}</span>\\\n                          </label>`;\n                 });\n                 output += \"</div></div>\";"}, {"sha": "237a4751a8d6677c669d7c14ac91e4976e5dc783", "filename": "src/test/rustdoc-gui/settings.goml", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/d35d972e6974d40d30362344ea619a5b560aae20/src%2Ftest%2Frustdoc-gui%2Fsettings.goml", "raw_url": "https://github.com/rust-lang/rust/raw/d35d972e6974d40d30362344ea619a5b560aae20/src%2Ftest%2Frustdoc-gui%2Fsettings.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsettings.goml?ref=d35d972e6974d40d30362344ea619a5b560aae20", "patch": "@@ -1,5 +1,6 @@\n // This test ensures that the settings menu display is working as expected.\n goto: file://|DOC_PATH|/test_docs/index.html\n+show-text: true // needed when we check for colors below.\n // First, we check that the settings page doesn't exist.\n assert-false: \"#settings\"\n // We now click on the settings button.\n@@ -43,6 +44,65 @@ assert: \".setting-line.hidden #preferred-light-theme\"\n // We check that the correct theme is selected.\n assert-property: (\"#theme .choices #theme-dark\", {\"checked\": \"true\"})\n \n+// Some style checks...\n+// First we check the \"default\" display.\n+assert-css: (\n+    \"#theme-dark\",\n+    {\n+        \"border-color\": \"rgb(221, 221, 221)\",\n+        \"box-shadow\": \"rgb(53, 53, 53) 0px 0px 0px 3px inset\",\n+    },\n+)\n+assert-css: (\"#theme-light\", {\"border-color\": \"rgb(221, 221, 221)\", \"box-shadow\": \"none\"})\n+// Let's start with the hover.\n+move-cursor-to: \"#theme-dark\"\n+assert-css: (\n+    \"#theme-dark\",\n+    {\n+        \"border-color\": \"rgb(33, 150, 243)\",\n+        \"box-shadow\": \"rgb(53, 53, 53) 0px 0px 0px 3px inset\",\n+    },\n+)\n+move-cursor-to: \"#theme-light\"\n+assert-css: (\"#theme-light\", {\"border-color\": \"rgb(33, 150, 243)\", \"box-shadow\": \"none\"})\n+move-cursor-to: \"#theme-ayu\"\n+// Let's now check with the focus.\n+focus: \"#theme-dark\"\n+assert-css: (\n+    \"#theme-dark\",\n+    {\n+        \"border-color\": \"rgb(221, 221, 221)\",\n+        \"box-shadow\": \"rgb(53, 53, 53) 0px 0px 0px 3px inset, rgb(33, 150, 243) 0px 0px 2px 2px\",\n+    },\n+)\n+focus: \"#theme-light\"\n+assert-css: (\n+    \"#theme-light\",\n+    {\n+        \"border-color\": \"rgb(221, 221, 221)\",\n+        \"box-shadow\": \"rgb(33, 150, 243) 0px 0px 1px 1px\",\n+    },\n+)\n+// Now we check we both focus and hover.\n+move-cursor-to: \"#theme-dark\"\n+focus: \"#theme-dark\"\n+assert-css: (\n+    \"#theme-dark\",\n+    {\n+        \"border-color\": \"rgb(33, 150, 243)\",\n+        \"box-shadow\": \"rgb(53, 53, 53) 0px 0px 0px 3px inset, rgb(33, 150, 243) 0px 0px 2px 2px\",\n+    },\n+)\n+move-cursor-to: \"#theme-light\"\n+focus: \"#theme-light\"\n+assert-css: (\n+    \"#theme-light\",\n+    {\n+        \"border-color\": \"rgb(33, 150, 243)\",\n+        \"box-shadow\": \"rgb(33, 150, 243) 0px 0px 1px 1px\",\n+    },\n+)\n+\n // We now switch the display.\n click: \"#use-system-theme\"\n // Wait for the hidden element to show up."}, {"sha": "3ae91be60c5a062eebf426cb7c526d44db5edd93", "filename": "src/test/ui/closures/add_semicolon_non_block_closure.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d35d972e6974d40d30362344ea619a5b560aae20/src%2Ftest%2Fui%2Fclosures%2Fadd_semicolon_non_block_closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d35d972e6974d40d30362344ea619a5b560aae20/src%2Ftest%2Fui%2Fclosures%2Fadd_semicolon_non_block_closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fadd_semicolon_non_block_closure.rs?ref=d35d972e6974d40d30362344ea619a5b560aae20", "patch": "@@ -0,0 +1,11 @@\n+fn foo(_f: impl Fn()) {}\n+\n+fn bar() -> i32 {\n+    1\n+}\n+\n+fn main() {\n+    foo(|| bar())\n+    //~^ ERROR mismatched types [E0308]\n+    //~| HELP consider using a semicolon here\n+}"}, {"sha": "ed829fc98f86fc60c503be9696d45e605d8e6e98", "filename": "src/test/ui/closures/add_semicolon_non_block_closure.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d35d972e6974d40d30362344ea619a5b560aae20/src%2Ftest%2Fui%2Fclosures%2Fadd_semicolon_non_block_closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d35d972e6974d40d30362344ea619a5b560aae20/src%2Ftest%2Fui%2Fclosures%2Fadd_semicolon_non_block_closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fadd_semicolon_non_block_closure.stderr?ref=d35d972e6974d40d30362344ea619a5b560aae20", "patch": "@@ -0,0 +1,16 @@\n+error[E0308]: mismatched types\n+  --> $DIR/add_semicolon_non_block_closure.rs:8:12\n+   |\n+LL | fn main() {\n+   |           - expected `()` because of default return type\n+LL |     foo(|| bar())\n+   |            ^^^^^ expected `()`, found `i32`\n+   |\n+help: consider using a semicolon here\n+   |\n+LL |     foo(|| { bar(); })\n+   |            +      +++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}]}