{"sha": "528a5e2baec813866365ead4240e88e7eb231273", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyOGE1ZTJiYWVjODEzODY2MzY1ZWFkNDI0MGU4OGU3ZWIyMzEyNzM=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-03-24T19:47:47Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-03-24T19:47:47Z"}, "message": "Add examples for std::ascii\n\nAlso tweaked a few things.", "tree": {"sha": "9d858c4c94bc0a46b68560349cc327e54c361c77", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d858c4c94bc0a46b68560349cc327e54c361c77"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/528a5e2baec813866365ead4240e88e7eb231273", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/528a5e2baec813866365ead4240e88e7eb231273", "html_url": "https://github.com/rust-lang/rust/commit/528a5e2baec813866365ead4240e88e7eb231273", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/528a5e2baec813866365ead4240e88e7eb231273/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "28a0b25f424090255966273994748a9f9901059f", "url": "https://api.github.com/repos/rust-lang/rust/commits/28a0b25f424090255966273994748a9f9901059f", "html_url": "https://github.com/rust-lang/rust/commit/28a0b25f424090255966273994748a9f9901059f"}], "stats": {"total": 100, "additions": 96, "deletions": 4}, "files": [{"sha": "cb406275455666090a657ceb67ae5959c790873e", "filename": "src/libstd/ascii.rs", "status": "modified", "additions": 96, "deletions": 4, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/528a5e2baec813866365ead4240e88e7eb231273/src%2Flibstd%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/528a5e2baec813866365ead4240e88e7eb231273/src%2Flibstd%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fascii.rs?ref=528a5e2baec813866365ead4240e88e7eb231273", "patch": "@@ -34,44 +34,122 @@ pub trait OwnedAsciiExt {\n     fn into_ascii_lowercase(self) -> Self;\n }\n \n-/// Extension methods for ASCII-subset only operations on string slices\n+/// Extension methods for ASCII-subset only operations on string slices.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait AsciiExt {\n     /// Container type for copied ASCII characters.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     type Owned;\n \n     /// Check if within the ASCII range.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::ascii::AsciiExt;\n+    ///\n+    /// let ascii = 'a';\n+    /// let utf8 = '\u2764';\n+    ///\n+    /// assert_eq!(true, ascii.is_ascii());\n+    /// assert_eq!(false, utf8.is_ascii())\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn is_ascii(&self) -> bool;\n \n-    /// Makes a copy of the string in ASCII upper case:\n+    /// Makes a copy of the string in ASCII upper case.\n+    ///\n     /// ASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\n     /// but non-ASCII letters are unchanged.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::ascii::AsciiExt;\n+    ///\n+    /// let ascii = 'a';\n+    /// let utf8 = '\u2764';\n+    ///\n+    /// assert_eq!('A', ascii.to_ascii_uppercase());\n+    /// assert_eq!('\u2764', utf8.to_ascii_uppercase());\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn to_ascii_uppercase(&self) -> Self::Owned;\n \n-    /// Makes a copy of the string in ASCII lower case:\n+    /// Makes a copy of the string in ASCII lower case.\n+    ///\n     /// ASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\n     /// but non-ASCII letters are unchanged.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::ascii::AsciiExt;\n+    ///\n+    /// let ascii = 'A';\n+    /// let utf8 = '\u2764';\n+    ///\n+    /// assert_eq!('a', ascii.to_ascii_lowercase());\n+    /// assert_eq!('\u2764', utf8.to_ascii_lowercase());\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn to_ascii_lowercase(&self) -> Self::Owned;\n \n     /// Check that two strings are an ASCII case-insensitive match.\n+    ///\n     /// Same as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\n     /// but without allocating and copying temporary strings.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::ascii::AsciiExt;\n+    ///\n+    /// let ascii1 = 'A';\n+    /// let ascii2 = 'a';\n+    /// let ascii3 = 'A';\n+    /// let ascii4 = 'z';\n+    ///\n+    /// assert_eq!(true, ascii1.eq_ignore_ascii_case(&ascii2));\n+    /// assert_eq!(true, ascii1.eq_ignore_ascii_case(&ascii3));\n+    /// assert_eq!(false, ascii1.eq_ignore_ascii_case(&ascii4));\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn eq_ignore_ascii_case(&self, other: &Self) -> bool;\n \n     /// Convert this type to its ASCII upper case equivalent in-place.\n     ///\n     /// See `to_ascii_uppercase` for more information.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::ascii::AsciiExt;\n+    ///\n+    /// let mut ascii = 'a';\n+    ///\n+    /// ascii.make_ascii_uppercase();\n+    ///\n+    /// assert_eq!('A', ascii);\n+    /// ```\n     #[unstable(feature = \"ascii\")]\n     fn make_ascii_uppercase(&mut self);\n \n     /// Convert this type to its ASCII lower case equivalent in-place.\n     ///\n     /// See `to_ascii_lowercase` for more information.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::ascii::AsciiExt;\n+    ///\n+    /// let mut ascii = 'A';\n+    ///\n+    /// ascii.make_ascii_lowercase();\n+    ///\n+    /// assert_eq!('a', ascii);\n+    /// ```\n     #[unstable(feature = \"ascii\")]\n     fn make_ascii_lowercase(&mut self);\n }\n@@ -246,7 +324,7 @@ pub struct EscapeDefault {\n     data: [u8; 4],\n }\n \n-/// Returns a 'default' ASCII and C++11-like literal escape of a `u8`\n+/// Returns an iterator that produces an escaped version of a `u8`.\n ///\n /// The default is chosen with a bias toward producing literals that are\n /// legal in a variety of languages, including C++11 and similar C-family\n@@ -257,6 +335,20 @@ pub struct EscapeDefault {\n /// - Any other chars in the range [0x20,0x7e] are not escaped.\n /// - Any other chars are given hex escapes of the form '\\xNN'.\n /// - Unicode escapes are never generated by this function.\n+///\n+/// # Examples\n+///\n+/// ```\n+/// use std::ascii;\n+///\n+/// let escaped = ascii::escape_default(b'0').next().unwrap();\n+/// assert_eq!(b'0', escaped);\n+///\n+/// let mut escaped = ascii::escape_default(b'\\t');\n+///\n+/// assert_eq!(b'\\\\', escaped.next().unwrap());\n+/// assert_eq!(b't', escaped.next().unwrap());\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn escape_default(c: u8) -> EscapeDefault {\n     let (data, len) = match c {"}]}