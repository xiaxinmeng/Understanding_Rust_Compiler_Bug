{"sha": "c270b0a8a844f0bac1ee1acd8a1ebabc0cee65e7", "node_id": "C_kwDOAAsO6NoAKGMyNzBiMGE4YTg0NGYwYmFjMWVlMWFjZDhhMWViYWJjMGNlZTY1ZTc", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-05-04T20:40:02Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-05-15T16:40:42Z"}, "message": "Simplify delegate", "tree": {"sha": "d5e2d8f81675c1fdf38b52ea47d6e309c40396c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d5e2d8f81675c1fdf38b52ea47d6e309c40396c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c270b0a8a844f0bac1ee1acd8a1ebabc0cee65e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c270b0a8a844f0bac1ee1acd8a1ebabc0cee65e7", "html_url": "https://github.com/rust-lang/rust/commit/c270b0a8a844f0bac1ee1acd8a1ebabc0cee65e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c270b0a8a844f0bac1ee1acd8a1ebabc0cee65e7/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "338e7642fbe6af32351363ab1044494da14b0dec", "url": "https://api.github.com/repos/rust-lang/rust/commits/338e7642fbe6af32351363ab1044494da14b0dec", "html_url": "https://github.com/rust-lang/rust/commit/338e7642fbe6af32351363ab1044494da14b0dec"}], "stats": {"total": 139, "additions": 70, "deletions": 69}, "files": [{"sha": "b13c9627bf74d12e78d7a730f5e9f4723d488445", "filename": "compiler/rustc_infer/src/infer/combine.rs", "status": "modified", "additions": 11, "deletions": 19, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c270b0a8a844f0bac1ee1acd8a1ebabc0cee65e7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c270b0a8a844f0bac1ee1acd8a1ebabc0cee65e7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs?ref=c270b0a8a844f0bac1ee1acd8a1ebabc0cee65e7", "patch": "@@ -28,7 +28,7 @@ use super::lub::Lub;\n use super::sub::Sub;\n use super::type_variable::TypeVariableValue;\n use super::{DefineOpaqueTypes, InferCtxt, MiscVariable, TypeTrace};\n-use crate::infer::generalize::{Generalization, Generalizer};\n+use crate::infer::generalize::{generalize, CombineDelegate, Generalization};\n use crate::traits::{Obligation, PredicateObligations};\n use rustc_middle::infer::canonical::OriginalQueryValues;\n use rustc_middle::infer::unify_key::{ConstVarValue, ConstVariableValue};\n@@ -471,25 +471,17 @@ impl<'infcx, 'tcx> CombineFields<'infcx, 'tcx> {\n             RelationDir::SupertypeOf => ty::Contravariant,\n         };\n \n-        trace!(?ambient_variance);\n-\n-        let for_universe = self.infcx.probe_ty_var(for_vid).unwrap_err();\n-        let for_vid_sub_root = self.infcx.inner.borrow_mut().type_variables().sub_root_var(for_vid);\n-\n-        trace!(?for_universe);\n-        trace!(?self.trace);\n-\n-        Generalizer {\n-            infcx: self.infcx,\n-            delegate: self,\n+        generalize::generalize(\n+            self.infcx,\n+            &mut CombineDelegate {\n+                infcx: self.infcx,\n+                param_env: self.param_env,\n+                span: self.trace.span(),\n+            },\n+            ty,\n+            for_vid,\n             ambient_variance,\n-            for_universe,\n-            for_vid_sub_root,\n-            root_ty: ty,\n-            cache: Default::default(),\n-            needs_wf: false,\n-        }\n-        .generalize(ty)\n+        )\n     }\n \n     pub fn register_obligations(&mut self, obligations: PredicateObligations<'tcx>) {"}, {"sha": "c8562c84a17bc66b9933b75ef194208abd06345a", "filename": "compiler/rustc_infer/src/infer/generalize.rs", "status": "modified", "additions": 50, "deletions": 32, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/c270b0a8a844f0bac1ee1acd8a1ebabc0cee65e7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fgeneralize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c270b0a8a844f0bac1ee1acd8a1ebabc0cee65e7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fgeneralize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fgeneralize.rs?ref=c270b0a8a844f0bac1ee1acd8a1ebabc0cee65e7", "patch": "@@ -4,12 +4,41 @@ use rustc_middle::infer::unify_key::{ConstVarValue, ConstVariableValue};\n use rustc_middle::ty::error::TypeError;\n use rustc_middle::ty::relate::{self, Relate, RelateResult, TypeRelation};\n use rustc_middle::ty::{self, InferConst, Ty, TyCtxt, TypeVisitableExt};\n+use rustc_span::Span;\n \n-use crate::infer::combine::CombineFields;\n use crate::infer::nll_relate::TypeRelatingDelegate;\n use crate::infer::type_variable::TypeVariableValue;\n use crate::infer::{InferCtxt, RegionVariableOrigin};\n \n+pub(super) fn generalize<'tcx, D: GeneralizerDelegate<'tcx>>(\n+    infcx: &InferCtxt<'tcx>,\n+    delegate: &mut D,\n+    ty: Ty<'tcx>,\n+    for_vid: ty::TyVid,\n+    ambient_variance: ty::Variance,\n+) -> RelateResult<'tcx, Generalization<Ty<'tcx>>> {\n+    let for_universe = infcx.probe_ty_var(for_vid).unwrap_err();\n+    let for_vid_sub_root = infcx.inner.borrow_mut().type_variables().sub_root_var(for_vid);\n+\n+    let mut generalizer = Generalizer {\n+        infcx,\n+        delegate,\n+        ambient_variance,\n+        for_vid_sub_root,\n+        for_universe,\n+        root_ty: ty,\n+        needs_wf: false,\n+        cache: Default::default(),\n+    };\n+\n+    assert!(!ty.has_escaping_bound_vars());\n+    let value = generalizer.relate(ty, ty)?;\n+    let needs_wf = generalizer.needs_wf;\n+    Ok(Generalization { value, needs_wf })\n+}\n+\n+/// Abstracts the handling of region vars between HIR and MIR/NLL typechecking\n+/// in the generalizer code.\n pub trait GeneralizerDelegate<'tcx> {\n     fn param_env(&self) -> ty::ParamEnv<'tcx>;\n \n@@ -18,7 +47,13 @@ pub trait GeneralizerDelegate<'tcx> {\n     fn generalize_existential(&mut self, universe: ty::UniverseIndex) -> ty::Region<'tcx>;\n }\n \n-impl<'tcx> GeneralizerDelegate<'tcx> for CombineFields<'_, 'tcx> {\n+pub struct CombineDelegate<'cx, 'tcx> {\n+    pub infcx: &'cx InferCtxt<'tcx>,\n+    pub param_env: ty::ParamEnv<'tcx>,\n+    pub span: Span,\n+}\n+\n+impl<'tcx> GeneralizerDelegate<'tcx> for CombineDelegate<'_, 'tcx> {\n     fn param_env(&self) -> ty::ParamEnv<'tcx> {\n         self.param_env\n     }\n@@ -28,10 +63,8 @@ impl<'tcx> GeneralizerDelegate<'tcx> for CombineFields<'_, 'tcx> {\n     }\n \n     fn generalize_existential(&mut self, universe: ty::UniverseIndex) -> ty::Region<'tcx> {\n-        self.infcx.next_region_var_in_universe(\n-            RegionVariableOrigin::MiscVariable(self.trace.span()),\n-            universe,\n-        )\n+        self.infcx\n+            .next_region_var_in_universe(RegionVariableOrigin::MiscVariable(self.span), universe)\n     }\n }\n \n@@ -66,7 +99,7 @@ where\n /// establishes `'0: 'x` as a constraint.\n ///\n /// [blog post]: https://is.gd/0hKvIr\n-pub(super) struct Generalizer<'me, 'tcx, D>\n+struct Generalizer<'me, 'tcx, D>\n where\n     D: GeneralizerDelegate<'tcx>,\n {\n@@ -98,18 +131,6 @@ where\n     needs_wf: bool,\n }\n \n-impl<'tcx, D: GeneralizerDelegate<'tcx>> Generalizer<'_, 'tcx, D> {\n-    pub fn generalize<T>(mut self, value: T) -> RelateResult<'tcx, Generalization<T>>\n-    where\n-        T: Relate<'tcx>,\n-    {\n-        assert!(!value.has_escaping_bound_vars());\n-        let value = self.relate(value, value)?;\n-        let needs_wf = self.needs_wf;\n-        Ok(Generalization { value, needs_wf })\n-    }\n-}\n-\n impl<'tcx, D> TypeRelation<'tcx> for Generalizer<'_, 'tcx, D>\n where\n     D: GeneralizerDelegate<'tcx>,\n@@ -202,17 +223,19 @@ where\n             }\n \n             ty::Infer(ty::TyVar(vid)) => {\n-                let vid = self.infcx.inner.borrow_mut().type_variables().root_var(vid);\n-                let sub_vid = self.infcx.inner.borrow_mut().type_variables().sub_root_var(vid);\n+                let mut inner = self.infcx.inner.borrow_mut();\n+                let vid = inner.type_variables().root_var(vid);\n+                let sub_vid = inner.type_variables().sub_root_var(vid);\n                 if sub_vid == self.for_vid_sub_root {\n                     // If sub-roots are equal, then `for_vid` and\n                     // `vid` are related via subtyping.\n                     Err(TypeError::CyclicTy(self.root_ty))\n                 } else {\n-                    let probe = self.infcx.inner.borrow_mut().type_variables().probe(vid);\n+                    let probe = inner.type_variables().probe(vid);\n                     match probe {\n                         TypeVariableValue::Known { value: u } => {\n                             debug!(\"generalize: known value {:?}\", u);\n+                            drop(inner);\n                             self.relate(u, u)\n                         }\n                         TypeVariableValue::Unknown { universe } => {\n@@ -235,20 +258,15 @@ where\n                                 ty::Covariant | ty::Contravariant => (),\n                             }\n \n-                            let origin =\n-                                *self.infcx.inner.borrow_mut().type_variables().var_origin(vid);\n-                            let new_var_id = self\n-                                .infcx\n-                                .inner\n-                                .borrow_mut()\n-                                .type_variables()\n-                                .new_var(self.for_universe, origin);\n+                            let origin = *inner.type_variables().var_origin(vid);\n+                            let new_var_id =\n+                                inner.type_variables().new_var(self.for_universe, origin);\n                             let u = self.tcx().mk_ty_var(new_var_id);\n \n                             // Record that we replaced `vid` with `new_var_id` as part of a generalization\n                             // operation. This is needed to detect cyclic types. To see why, see the\n                             // docs in the `type_variables` module.\n-                            self.infcx.inner.borrow_mut().type_variables().sub(vid, new_var_id);\n+                            inner.type_variables().sub(vid, new_var_id);\n                             debug!(\"generalize: replacing original vid={:?} with new={:?}\", vid, u);\n                             Ok(u)\n                         }\n@@ -278,7 +296,7 @@ where\n \n             ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs, .. }) => {\n                 let s = self.relate(substs, substs)?;\n-                Ok(if s == substs { t } else { self.infcx.tcx.mk_opaque(def_id, s) })\n+                Ok(if s == substs { t } else { self.tcx().mk_opaque(def_id, s) })\n             }\n             _ => relate::super_relate_tys(self, t, t),\n         }?;"}, {"sha": "4ae6af5f5be750ee41442446a2f264b7862b0a00", "filename": "compiler/rustc_infer/src/infer/nll_relate/mod.rs", "status": "modified", "additions": 9, "deletions": 18, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/c270b0a8a844f0bac1ee1acd8a1ebabc0cee65e7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c270b0a8a844f0bac1ee1acd8a1ebabc0cee65e7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs?ref=c270b0a8a844f0bac1ee1acd8a1ebabc0cee65e7", "patch": "@@ -31,7 +31,7 @@ use rustc_span::{Span, Symbol};\n use std::fmt::Debug;\n \n use crate::infer::combine::ObligationEmittingRelation;\n-use crate::infer::generalize::{Generalization, Generalizer};\n+use crate::infer::generalize::{self, Generalization};\n use crate::infer::InferCtxt;\n use crate::infer::{TypeVariableOrigin, TypeVariableOriginKind};\n use crate::traits::{Obligation, PredicateObligations};\n@@ -217,23 +217,14 @@ where\n     }\n \n     fn generalize(&mut self, ty: Ty<'tcx>, for_vid: ty::TyVid) -> RelateResult<'tcx, Ty<'tcx>> {\n-        let for_universe = self.infcx.probe_ty_var(for_vid).unwrap_err();\n-        let for_vid_sub_root = self.infcx.inner.borrow_mut().type_variables().sub_root_var(for_vid);\n-\n-        // FIXME: we may need a WF predicate (related to #54105).\n-        let Generalization { value, needs_wf: _ } = Generalizer {\n-            infcx: self.infcx,\n-            delegate: &mut self.delegate,\n-            ambient_variance: self.ambient_variance,\n-            for_vid_sub_root,\n-            for_universe,\n-            root_ty: ty,\n-            needs_wf: false,\n-            cache: Default::default(),\n-        }\n-        .generalize(ty)?;\n-\n-        Ok(value)\n+        let Generalization { value: ty, needs_wf: _ } = generalize::generalize(\n+            self.infcx,\n+            &mut self.delegate,\n+            ty,\n+            for_vid,\n+            self.ambient_variance,\n+        )?;\n+        Ok(ty)\n     }\n \n     fn relate_opaques(&mut self, a: Ty<'tcx>, b: Ty<'tcx>) -> RelateResult<'tcx, Ty<'tcx>> {"}]}