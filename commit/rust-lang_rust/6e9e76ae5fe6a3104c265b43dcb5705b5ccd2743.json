{"sha": "6e9e76ae5fe6a3104c265b43dcb5705b5ccd2743", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlOWU3NmFlNWZlNmEzMTA0YzI2NWI0M2RjYjU3MDViNWNjZDI3NDM=", "commit": {"author": {"name": "Kelvin Ly", "email": "kelvin.ly1618@gmail.com", "date": "2015-05-15T00:08:30Z"}, "committer": {"name": "Kelvin Ly", "email": "kelvin.ly1618@gmail.com", "date": "2015-05-15T00:08:30Z"}, "message": "Fix error codes E0197-E0200", "tree": {"sha": "36de2349fc5fb209e7f285b9f5efa2443dd686bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/36de2349fc5fb209e7f285b9f5efa2443dd686bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e9e76ae5fe6a3104c265b43dcb5705b5ccd2743", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e9e76ae5fe6a3104c265b43dcb5705b5ccd2743", "html_url": "https://github.com/rust-lang/rust/commit/6e9e76ae5fe6a3104c265b43dcb5705b5ccd2743", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e9e76ae5fe6a3104c265b43dcb5705b5ccd2743/comments", "author": {"login": "cactorium", "id": 1513183, "node_id": "MDQ6VXNlcjE1MTMxODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1513183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cactorium", "html_url": "https://github.com/cactorium", "followers_url": "https://api.github.com/users/cactorium/followers", "following_url": "https://api.github.com/users/cactorium/following{/other_user}", "gists_url": "https://api.github.com/users/cactorium/gists{/gist_id}", "starred_url": "https://api.github.com/users/cactorium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cactorium/subscriptions", "organizations_url": "https://api.github.com/users/cactorium/orgs", "repos_url": "https://api.github.com/users/cactorium/repos", "events_url": "https://api.github.com/users/cactorium/events{/privacy}", "received_events_url": "https://api.github.com/users/cactorium/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cactorium", "id": 1513183, "node_id": "MDQ6VXNlcjE1MTMxODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1513183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cactorium", "html_url": "https://github.com/cactorium", "followers_url": "https://api.github.com/users/cactorium/followers", "following_url": "https://api.github.com/users/cactorium/following{/other_user}", "gists_url": "https://api.github.com/users/cactorium/gists{/gist_id}", "starred_url": "https://api.github.com/users/cactorium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cactorium/subscriptions", "organizations_url": "https://api.github.com/users/cactorium/orgs", "repos_url": "https://api.github.com/users/cactorium/repos", "events_url": "https://api.github.com/users/cactorium/events{/privacy}", "received_events_url": "https://api.github.com/users/cactorium/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67433c1a309d3c9457e49f15e80a2d927d165996", "url": "https://api.github.com/repos/rust-lang/rust/commits/67433c1a309d3c9457e49f15e80a2d927d165996", "html_url": "https://github.com/rust-lang/rust/commit/67433c1a309d3c9457e49f15e80a2d927d165996"}], "stats": {"total": 66, "additions": 62, "deletions": 4}, "files": [{"sha": "7ec1299e7ebfd11461cb27c0f5702a4b5958ec48", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 62, "deletions": 4, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/6e9e76ae5fe6a3104c265b43dcb5705b5ccd2743/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e9e76ae5fe6a3104c265b43dcb5705b5ccd2743/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=6e9e76ae5fe6a3104c265b43dcb5705b5ccd2743", "patch": "@@ -161,6 +161,68 @@ it has been disabled for now.\n [iss20126]: https://github.com/rust-lang/rust/issues/20126\n \"##,\n \n+E0197: r##\"\n+Inherent implementations (one that do not implement a trait but provide\n+methods associated with a type) are always safe because they are not\n+implementing an unsafe trait. Removing the unsafe keyword from the inherent\n+implementation will resolve this error.\n+\n+struct Foo;\n+\n+// this will cause this error\n+unsafe impl Foo { }\n+// converting it to this will fix it\n+impl Foo { }\n+\n+\"##,\n+\n+E0198: r##\"\n+A negative implementation is one that excludes a type from implementing a\n+particular trait. Not being able to use a trait is always a safe operation,\n+so negative implementations are always safe and never need to be marked as\n+unsafe.\n+\n+struct Foo;\n+\n+// unsafe is unnecessary\n+unsafe impl !Clone for Foo { }\n+// this will compile\n+impl !Clone for Foo { }\n+\n+\"##,\n+\n+E0199: r##\"\n+Safe traits should not have unsafe implementations, therefore marking an\n+implementation for a safe trait unsafe will cause a compiler error. Removing the\n+unsafe marker on the trait noted in the error will resolve this problem.\n+\n+struct Foo;\n+\n+trait Bar { }\n+\n+// this won't compile because Bar is safe\n+unsafe impl Bar for Foo { }\n+// this will compile\n+impl Bar for Foo { }\n+\n+\"##,\n+\n+E0200: r##\"\n+Unsafe traits must have unsafe implementations. This error occurs when an\n+implementation for an unsafe trait isn't marked as unsafe. This may be resolved\n+by marking the unsafe implementation as unsafe.\n+\n+struct Foo;\n+\n+unsafe trait Bar { }\n+\n+// this won't compile because Bar is unsafe and impl isn't unsafe\n+impl Bar for Foo { }\n+// this will compile\n+unsafe impl Bar for Foo { }\n+\n+\"##,\n+\n E0204: r##\"\n An attempt to implement the `Copy` trait for a struct failed because one of the\n fields does not implement `Copy`. To fix this, you must implement `Copy` for the\n@@ -386,10 +448,6 @@ register_diagnostics! {\n     E0194,\n     E0195, // lifetime parameters or bounds on method do not match the trait declaration\n     E0196, // cannot determine a type for this closure\n-    E0197, // inherent impls cannot be declared as unsafe\n-    E0198, // negative implementations are not unsafe\n-    E0199, // implementing trait is not unsafe\n-    E0200, // trait requires an `unsafe impl` declaration\n     E0201, // duplicate method in trait impl\n     E0202, // associated items are not allowed in inherent impls\n     E0203, // type parameter has more than one relaxed default bound,"}]}