{"sha": "0a6ae29fe855a07b204c5b0e490c59c3ab3d443a", "node_id": "C_kwDOAAsO6NoAKDBhNmFlMjlmZTg1NWEwN2IyMDRjNWIwZTQ5MGM1OWMzYWIzZDQ0M2E", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2023-05-23T16:10:30Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2023-05-30T10:40:35Z"}, "message": "coherence: don't add hidden types for opaques\n\nwe can otherwise assign a hidden type to the opaque which\ncauses ICE if we don't use `take_opaque_types` during\ncoherence. This is annoying so I didn't bother. Added a test\nshowing the behavior this prevents.", "tree": {"sha": "cf963bc458d6921e31d211224b887b8d2f019eaf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf963bc458d6921e31d211224b887b8d2f019eaf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a6ae29fe855a07b204c5b0e490c59c3ab3d443a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a6ae29fe855a07b204c5b0e490c59c3ab3d443a", "html_url": "https://github.com/rust-lang/rust/commit/0a6ae29fe855a07b204c5b0e490c59c3ab3d443a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a6ae29fe855a07b204c5b0e490c59c3ab3d443a/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "200ed9f8cd49e823c788b6ce1096030d9c40ec02", "url": "https://api.github.com/repos/rust-lang/rust/commits/200ed9f8cd49e823c788b6ce1096030d9c40ec02", "html_url": "https://github.com/rust-lang/rust/commit/200ed9f8cd49e823c788b6ce1096030d9c40ec02"}], "stats": {"total": 69, "additions": 59, "deletions": 10}, "files": [{"sha": "105a3f08c8205f574393aa6049f7ef26bcdf598d", "filename": "compiler/rustc_infer/src/infer/opaque_types.rs", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/0a6ae29fe855a07b204c5b0e490c59c3ab3d443a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a6ae29fe855a07b204c5b0e490c59c3ab3d443a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs?ref=0a6ae29fe855a07b204c5b0e490c59c3ab3d443a", "patch": "@@ -533,17 +533,29 @@ impl<'tcx> InferCtxt<'tcx> {\n         // these are the same span, but not in cases like `-> (impl\n         // Foo, impl Bar)`.\n         let span = cause.span;\n-        let prev = self.inner.borrow_mut().opaque_types().register(\n-            opaque_type_key,\n-            OpaqueHiddenType { ty: hidden_ty, span },\n-            origin,\n-        );\n-        let mut obligations = if let Some(prev) = prev {\n-            self.at(&cause, param_env)\n-                .eq_exp(DefineOpaqueTypes::Yes, a_is_expected, prev, hidden_ty)?\n-                .obligations\n+        let mut obligations = if self.intercrate {\n+            // During intercrate we do not define opaque types but instead always\n+            // force ambiguity unless the hidden type is known to not implement\n+            // our trait.\n+            vec![traits::Obligation::new(\n+                self.tcx,\n+                cause.clone(),\n+                param_env,\n+                ty::PredicateKind::Ambiguous,\n+            )]\n         } else {\n-            Vec::new()\n+            let prev = self.inner.borrow_mut().opaque_types().register(\n+                opaque_type_key,\n+                OpaqueHiddenType { ty: hidden_ty, span },\n+                origin,\n+            );\n+            if let Some(prev) = prev {\n+                self.at(&cause, param_env)\n+                    .eq_exp(DefineOpaqueTypes::Yes, a_is_expected, prev, hidden_ty)?\n+                    .obligations\n+            } else {\n+                Vec::new()\n+            }\n         };\n \n         self.add_item_bounds_for_hidden_type("}, {"sha": "39b3d535ad45cba8099eef60d659f6342c761e66", "filename": "tests/ui/type-alias-impl-trait/coherence_different_hidden_ty.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0a6ae29fe855a07b204c5b0e490c59c3ab3d443a/tests%2Fui%2Ftype-alias-impl-trait%2Fcoherence_different_hidden_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a6ae29fe855a07b204c5b0e490c59c3ab3d443a/tests%2Fui%2Ftype-alias-impl-trait%2Fcoherence_different_hidden_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fcoherence_different_hidden_ty.rs?ref=0a6ae29fe855a07b204c5b0e490c59c3ab3d443a", "patch": "@@ -0,0 +1,25 @@\n+// When checking whether these two impls overlap, we could detect that we\n+// would require the hidden type of `TAIT` to be equal to both `u32` and `i32`\n+// and therefore accept them as disjoint. That is annoying to implement with\n+// the current system because we would have to add the following to each\n+// returning branch in coherence.\n+//\n+//    let _ = infcx.take_opaque_types();\n+//\n+// @lcnr: Because of this I decided to not bother and cause this to fail instead.\n+// In the future we can definitely modify the compiler to accept this\n+// again.\n+#![feature(type_alias_impl_trait)]\n+\n+trait Trait {}\n+\n+type TAIT = impl Sized;\n+\n+impl Trait for (TAIT, TAIT) {}\n+\n+impl Trait for (u32, i32) {}\n+//~^ ERROR conflicting implementations of trait `Trait` for type `(TAIT, TAIT)`\n+\n+fn define() -> TAIT {}\n+\n+fn main() {}"}, {"sha": "f2aee798608a6063e18470e875f9772d4663ad3c", "filename": "tests/ui/type-alias-impl-trait/coherence_different_hidden_ty.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0a6ae29fe855a07b204c5b0e490c59c3ab3d443a/tests%2Fui%2Ftype-alias-impl-trait%2Fcoherence_different_hidden_ty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a6ae29fe855a07b204c5b0e490c59c3ab3d443a/tests%2Fui%2Ftype-alias-impl-trait%2Fcoherence_different_hidden_ty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fcoherence_different_hidden_ty.stderr?ref=0a6ae29fe855a07b204c5b0e490c59c3ab3d443a", "patch": "@@ -0,0 +1,12 @@\n+error[E0119]: conflicting implementations of trait `Trait` for type `(TAIT, TAIT)`\n+  --> $DIR/coherence_different_hidden_ty.rs:20:1\n+   |\n+LL | impl Trait for (TAIT, TAIT) {}\n+   | --------------------------- first implementation here\n+LL |\n+LL | impl Trait for (u32, i32) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(TAIT, TAIT)`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0119`."}]}