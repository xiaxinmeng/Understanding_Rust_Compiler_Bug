{"sha": "710b7415cdc677f91645d5b649f02252001ff7ae", "node_id": "C_kwDOAAsO6NoAKDcxMGI3NDE1Y2RjNjc3ZjkxNjQ1ZDViNjQ5ZjAyMjUyMDAxZmY3YWU", "commit": {"author": {"name": "antoyo", "email": "antoyo@users.noreply.github.com", "date": "2022-02-27T05:14:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-27T05:14:57Z"}, "message": "Merge pull request #132 from bjorn3/panic_unwind\n\nSupport -Cpanic=unwind without unwinding", "tree": {"sha": "32db2957802718710eb609b8cb190fa2105f43ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/32db2957802718710eb609b8cb190fa2105f43ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/710b7415cdc677f91645d5b649f02252001ff7ae", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiGwjRCRBK7hj4Ov3rIwAAJaAIAEn7l0+S9AMY0u1NuRAXeC7m\nKj78RHPtQR4OWlJGMXhME0ZgpWTeQMcfZ+tH1909Di1ZJ+emf6DLVKOTyZAwL4j/\nOIDma+sbspRBB8AmyMO31uJ7sVrCGReMt2HHlKLcyz+8VpDXENuG7TuKwN+YjCTa\nGZ7ZbnrzENBqqcoyXRRdzeCecKuOV8gSDJHFTmgnq/onEe9jVLwOWtLzUbVmquoc\nKzCpfAhu56dg/6s563Mw8s/BN6Ipy2GV54DRa/Kk+kPHxBBnnyX0AZOLFOQKD8VN\nrULyIIq/wc9pgnfx+OYcXIrsDSkk/jkYvyk720DXE8+TFnsCaLlieXO2N7wlejg=\n=n80j\n-----END PGP SIGNATURE-----\n", "payload": "tree 32db2957802718710eb609b8cb190fa2105f43ed\nparent 1fb9821f8251321736e0efd411cadb1fcb194f02\nparent ac4baf3fd632100e68b5f8830a5c077005eeac23\nauthor antoyo <antoyo@users.noreply.github.com> 1645938897 -0500\ncommitter GitHub <noreply@github.com> 1645938897 -0500\n\nMerge pull request #132 from bjorn3/panic_unwind\n\nSupport -Cpanic=unwind without unwinding"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/710b7415cdc677f91645d5b649f02252001ff7ae", "html_url": "https://github.com/rust-lang/rust/commit/710b7415cdc677f91645d5b649f02252001ff7ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/710b7415cdc677f91645d5b649f02252001ff7ae/comments", "author": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1fb9821f8251321736e0efd411cadb1fcb194f02", "url": "https://api.github.com/repos/rust-lang/rust/commits/1fb9821f8251321736e0efd411cadb1fcb194f02", "html_url": "https://github.com/rust-lang/rust/commit/1fb9821f8251321736e0efd411cadb1fcb194f02"}, {"sha": "ac4baf3fd632100e68b5f8830a5c077005eeac23", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac4baf3fd632100e68b5f8830a5c077005eeac23", "html_url": "https://github.com/rust-lang/rust/commit/ac4baf3fd632100e68b5f8830a5c077005eeac23"}], "stats": {"total": 26, "additions": 16, "deletions": 10}, "files": [{"sha": "a4499d0ea8c6517c67afd77c463aa07021a6efed", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/710b7415cdc677f91645d5b649f02252001ff7ae/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/710b7415cdc677f91645d5b649f02252001ff7ae/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=710b7415cdc677f91645d5b649f02252001ff7ae", "patch": "@@ -41,15 +41,15 @@ dependencies = [\n [[package]]\n name = \"gccjit\"\n version = \"1.0.0\"\n-source = \"git+https://github.com/antoyo/gccjit.rs#cbb07c6601ba4246fc2967c4d770403c57192ca2\"\n+source = \"git+https://github.com/antoyo/gccjit.rs#b9f188d2ce2c7b12211e90903f1b2cf309785b85\"\n dependencies = [\n  \"gccjit_sys\",\n ]\n \n [[package]]\n name = \"gccjit_sys\"\n version = \"0.0.1\"\n-source = \"git+https://github.com/antoyo/gccjit.rs#cbb07c6601ba4246fc2967c4d770403c57192ca2\"\n+source = \"git+https://github.com/antoyo/gccjit.rs#b9f188d2ce2c7b12211e90903f1b2cf309785b85\"\n dependencies = [\n  \"libc 0.1.12\",\n ]"}, {"sha": "f5aca35cdcbc4e3bc90398e76af00ed514bbfe07", "filename": "src/base.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/710b7415cdc677f91645d5b649f02252001ff7ae/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/710b7415cdc677f91645d5b649f02252001ff7ae/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=710b7415cdc677f91645d5b649f02252001ff7ae", "patch": "@@ -105,6 +105,9 @@ pub fn compile_codegen_unit<'tcx>(tcx: TyCtxt<'tcx>, cgu_name: Symbol, supports_\n             context.set_keep_intermediates(true);\n         }\n \n+        // TODO(bjorn3): Remove once unwinding is properly implemented\n+        context.set_allow_unreachable_blocks(true);\n+\n         {\n             let cx = CodegenCx::new(&context, cgu, tcx, supports_128bit_integers);\n "}, {"sha": "f1c9d0a781703241dbfb7213b7e50d083b56dd1a", "filename": "src/builder.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/710b7415cdc677f91645d5b649f02252001ff7ae/src%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/710b7415cdc677f91645d5b649f02252001ff7ae/src%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbuilder.rs?ref=710b7415cdc677f91645d5b649f02252001ff7ae", "patch": "@@ -435,12 +435,12 @@ impl<'a, 'gcc, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'gcc, 'tcx> {\n         self.block.end_with_switch(None, value, default_block, &gcc_cases);\n     }\n \n-    fn invoke(&mut self, _typ: Type<'gcc>, _func: RValue<'gcc>, _args: &[RValue<'gcc>], then: Block<'gcc>, catch: Block<'gcc>, _funclet: Option<&Funclet>) -> RValue<'gcc> {\n-        let condition = self.context.new_rvalue_from_int(self.bool_type, 0);\n+    fn invoke(&mut self, typ: Type<'gcc>, func: RValue<'gcc>, args: &[RValue<'gcc>], then: Block<'gcc>, catch: Block<'gcc>, _funclet: Option<&Funclet>) -> RValue<'gcc> {\n+        // TODO(bjorn3): Properly implement unwinding.\n+        let call_site = self.call(typ, func, args, None);\n+        let condition = self.context.new_rvalue_from_int(self.bool_type, 1);\n         self.llbb().end_with_conditional(None, condition, then, catch);\n-        self.context.new_rvalue_from_int(self.int_type, 0)\n-\n-        // TODO(antoyo)\n+        call_site\n     }\n \n     fn unreachable(&mut self) {\n@@ -1106,7 +1106,7 @@ impl<'a, 'gcc, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'gcc, 'tcx> {\n     }\n \n     fn cleanup_landing_pad(&mut self, _ty: Type<'gcc>, _pers_fn: RValue<'gcc>) -> RValue<'gcc> {\n-        let field1 = self.context.new_field(None, self.u8_type, \"landing_pad_field_1\");\n+        let field1 = self.context.new_field(None, self.u8_type.make_pointer(), \"landing_pad_field_1\");\n         let field2 = self.context.new_field(None, self.i32_type, \"landing_pad_field_1\");\n         let struct_type = self.context.new_struct_type(None, \"landing_pad\", &[field1, field2]);\n         self.current_func().new_local(None, struct_type.as_type(), \"landing_pad\")\n@@ -1117,7 +1117,8 @@ impl<'a, 'gcc, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'gcc, 'tcx> {\n     }\n \n     fn resume(&mut self, _exn: RValue<'gcc>) {\n-        unimplemented!();\n+        // TODO(bjorn3): Properly implement unwinding.\n+        self.unreachable();\n     }\n \n     fn cleanup_pad(&mut self, _parent: Option<RValue<'gcc>>, _args: &[RValue<'gcc>]) -> Funclet {"}, {"sha": "5e3eef67df5a28a2abfaa0615d0e81dd51b0c47e", "filename": "src/intrinsic/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/710b7415cdc677f91645d5b649f02252001ff7ae/src%2Fintrinsic%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/710b7415cdc677f91645d5b649f02252001ff7ae/src%2Fintrinsic%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsic%2Fmod.rs?ref=710b7415cdc677f91645d5b649f02252001ff7ae", "patch": "@@ -1086,7 +1086,9 @@ impl<'a, 'gcc, 'tcx> Builder<'a, 'gcc, 'tcx> {\n }\n \n fn try_intrinsic<'gcc, 'tcx>(bx: &mut Builder<'_, 'gcc, 'tcx>, try_func: RValue<'gcc>, data: RValue<'gcc>, _catch_func: RValue<'gcc>, dest: RValue<'gcc>) {\n-    if bx.sess().panic_strategy() == PanicStrategy::Abort {\n+    // NOTE: the `|| true` here is to use the panic=abort strategy with panic=unwind too\n+    if bx.sess().panic_strategy() == PanicStrategy::Abort || true {\n+        // TODO(bjorn3): Properly implement unwinding and remove the `|| true` once this is done.\n         bx.call(bx.type_void(), try_func, &[data], None);\n         // Return 0 unconditionally from the intrinsic call;\n         // we can never unwind."}]}