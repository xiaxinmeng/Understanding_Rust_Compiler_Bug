{"sha": "cdfc4b1c7a968635ae7a0fec40e26e93b5a77538", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkZmM0YjFjN2E5Njg2MzVhZTdhMGZlYzQwZTI2ZTkzYjVhNzc1Mzg=", "commit": {"author": {"name": "Elliott Slaughter", "email": "eslaughter@mozilla.com", "date": "2012-08-07T21:20:31Z"}, "committer": {"name": "Elliott Slaughter", "email": "eslaughter@mozilla.com", "date": "2012-08-07T23:58:15Z"}, "message": "rustc: Fix for type_of on recursive enum creating two types instead of one.", "tree": {"sha": "f9e0a2f6ed9ef30a3929ec848962daab8eadebce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f9e0a2f6ed9ef30a3929ec848962daab8eadebce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cdfc4b1c7a968635ae7a0fec40e26e93b5a77538", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cdfc4b1c7a968635ae7a0fec40e26e93b5a77538", "html_url": "https://github.com/rust-lang/rust/commit/cdfc4b1c7a968635ae7a0fec40e26e93b5a77538", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cdfc4b1c7a968635ae7a0fec40e26e93b5a77538/comments", "author": null, "committer": null, "parents": [{"sha": "61446293f91cd7a4dff7ca5e17ca5eced22577ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/61446293f91cd7a4dff7ca5e17ca5eced22577ad", "html_url": "https://github.com/rust-lang/rust/commit/61446293f91cd7a4dff7ca5e17ca5eced22577ad"}], "stats": {"total": 31, "additions": 15, "deletions": 16}, "files": [{"sha": "71d73d874eac24a87a59646d27e4469254c8079a", "filename": "src/rustc/middle/trans/type_of.rs", "status": "modified", "additions": 15, "deletions": 16, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/cdfc4b1c7a968635ae7a0fec40e26e93b5a77538/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdfc4b1c7a968635ae7a0fec40e26e93b5a77538/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_of.rs?ref=cdfc4b1c7a968635ae7a0fec40e26e93b5a77538", "patch": "@@ -92,7 +92,14 @@ fn type_of(cx: @crate_ctxt, t: ty::t) -> TypeRef {\n           ty::ty_estr(ty::vstore_uniq) => {\n             T_unique_ptr(T_unique(cx, T_vec(cx, T_i8())))\n           }\n-          ty::ty_enum(did, _) => type_of_enum(cx, did, t),\n+          ty::ty_enum(did, _) => {\n+            // Only create the named struct, but don't fill it in. We\n+            // fill it in *after* placing it into the type cache. This\n+            // avoids creating more than one copy of the enum when one\n+            // of the enum's variants refers to the enum itself.\n+\n+            common::T_named_struct(llvm_type_name(cx, t))\n+          }\n           ty::ty_estr(ty::vstore_box) => {\n             T_box_ptr(T_box(cx, T_vec(cx, T_i8())))\n           }\n@@ -165,8 +172,11 @@ fn type_of(cx: @crate_ctxt, t: ty::t) -> TypeRef {\n \n         cx.lltypes.insert(t, llty);\n \n-        // If this was a class, fill in the type now.\n+        // If this was an enum or class, fill in the type now.\n         match ty::get(t).struct {\n+          ty::ty_enum(did, _) => {\n+              fill_type_of_enum(cx, did, t, llty);\n+          }\n           ty::ty_class(did, ts) => {\n             // Only instance vars are record fields at runtime.\n             let fields = ty::lookup_class_fields(cx.tcx, did);\n@@ -191,21 +201,11 @@ fn type_of(cx: @crate_ctxt, t: ty::t) -> TypeRef {\n     return llty;\n }\n \n-// This should only be called from type_of, above, because it\n-// creates new llvm named struct types lazily that are then\n-// cached by type_of\n-fn type_of_enum(cx: @crate_ctxt, did: ast::def_id, t: ty::t)\n-    -> TypeRef {\n+fn fill_type_of_enum(cx: @crate_ctxt, did: ast::def_id, t: ty::t,\n+                     llty: TypeRef) {\n \n     debug!{\"type_of_enum %?: %?\", t, ty::get(t)};\n \n-    // Every enum type has a unique name. When we find our roots\n-    // for GC and unwinding we will use this name to rediscover\n-    // the Rust type\n-    let name = llvm_type_name(cx, t);\n-\n-    let named_llty = common::T_named_struct(name);\n-\n     let lltys = {\n         let degen = (*ty::enum_variants(cx.tcx, did)).len() == 1u;\n         let size = shape::static_size_of_enum(cx, t);\n@@ -220,8 +220,7 @@ fn type_of_enum(cx: @crate_ctxt, did: ast::def_id, t: ty::t)\n         }\n     };\n \n-    common::set_struct_body(named_llty, lltys);\n-    return named_llty;\n+    common::set_struct_body(llty, lltys);\n }\n \n fn llvm_type_name(cx: @crate_ctxt, t: ty::t) -> ~str {"}]}