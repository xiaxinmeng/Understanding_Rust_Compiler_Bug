{"sha": "716856364933d0bd9661a6b39b1e3cf50a024857", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxNjg1NjM2NDkzM2QwYmQ5NjYxYTZiMzliMWUzY2Y1MGEwMjQ4NTc=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-09-16T14:21:07Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-09-16T14:21:07Z"}, "message": "Implement function reference in static", "tree": {"sha": "995d228cd32e4c1465f8b14d86be4c48f8994bfb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/995d228cd32e4c1465f8b14d86be4c48f8994bfb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/716856364933d0bd9661a6b39b1e3cf50a024857", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/716856364933d0bd9661a6b39b1e3cf50a024857", "html_url": "https://github.com/rust-lang/rust/commit/716856364933d0bd9661a6b39b1e3cf50a024857", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/716856364933d0bd9661a6b39b1e3cf50a024857/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5bfb762163017a909bb48efe3482a9361fbc7d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5bfb762163017a909bb48efe3482a9361fbc7d9", "html_url": "https://github.com/rust-lang/rust/commit/d5bfb762163017a909bb48efe3482a9361fbc7d9"}], "stats": {"total": 37, "additions": 28, "deletions": 9}, "files": [{"sha": "0c9eb7a01f05bc8119d3a13968e4e52106bbface", "filename": "examples/mini_core.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/716856364933d0bd9661a6b39b1e3cf50a024857/examples%2Fmini_core.rs", "raw_url": "https://github.com/rust-lang/rust/raw/716856364933d0bd9661a6b39b1e3cf50a024857/examples%2Fmini_core.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/examples%2Fmini_core.rs?ref=716856364933d0bd9661a6b39b1e3cf50a024857", "patch": "@@ -170,6 +170,13 @@ impl<T: ?Sized> PartialEq for *const T {\n     }\n }\n \n+pub enum Option<T> {\n+    Some(T),\n+    None,\n+}\n+\n+pub use Option::*;\n+\n #[lang = \"phantom_data\"]\n pub struct PhantomData<T: ?Sized>;\n "}, {"sha": "a60d2363ad1e787d5c63adf93f829a2e24139153", "filename": "examples/mini_core_hello_world.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/716856364933d0bd9661a6b39b1e3cf50a024857/examples%2Fmini_core_hello_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/716856364933d0bd9661a6b39b1e3cf50a024857/examples%2Fmini_core_hello_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/examples%2Fmini_core_hello_world.rs?ref=716856364933d0bd9661a6b39b1e3cf50a024857", "patch": "@@ -151,4 +151,10 @@ fn main() {\n         text: \"Outer got dropped!\\0\",\n         inner: NoisyDropInner,\n     };\n+\n+    const FUNC_REF: Option<fn()> = Some(main);\n+    match FUNC_REF {\n+        Some(_) => {},\n+        None => assert!(false),\n+    }\n }"}, {"sha": "9274d313259c24fb47bad04f35ab7317d97432ed", "filename": "src/constant.rs", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/716856364933d0bd9661a6b39b1e3cf50a024857/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/716856364933d0bd9661a6b39b1e3cf50a024857/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=716856364933d0bd9661a6b39b1e3cf50a024857", "patch": "@@ -224,26 +224,32 @@ fn define_all_allocs<'a, 'tcx: 'a, B: Backend + 'a>(\n         data_ctx.define(alloc.bytes.to_vec().into_boxed_slice());\n \n         for &(offset, reloc) in alloc.relocations.iter() {\n+            let reloc_offset = {\n+                let endianness = tcx.data_layout.endian;\n+                let offset = offset.bytes() as usize;\n+                let ptr_size = tcx.data_layout.pointer_size;\n+                let bytes = &alloc.bytes[offset..offset + ptr_size.bytes() as usize];\n+                read_target_uint(endianness, bytes).unwrap()\n+            };\n+\n             let data_id = match tcx.alloc_map.lock().get(reloc).unwrap() {\n+                AllocType::Function(instance) => {\n+                    let (func_name, sig) = crate::abi::get_function_name_and_sig(tcx, instance);\n+                    let func_id = module.declare_function(&func_name, Linkage::Import, &sig).unwrap();\n+                    let local_func_id = module.declare_func_in_data(func_id, &mut data_ctx);\n+                    data_ctx.write_function_addr(reloc_offset as u32, local_func_id);\n+                    continue;\n+                },\n                 AllocType::Memory(_) => {\n                     cx.todo.insert(TodoItem::Alloc(reloc));\n                     data_id_for_alloc_id(module, reloc)\n                 }\n-                AllocType::Function(_) => unimplemented!(\"function static reference\"),\n                 AllocType::Static(def_id) => {\n                     cx.todo.insert(TodoItem::Static(def_id));\n                     data_id_for_static(tcx, module, def_id)\n                 }\n             };\n \n-            let reloc_offset = {\n-                let endianness = tcx.data_layout.endian;\n-                let offset = offset.bytes() as usize;\n-                let ptr_size = tcx.data_layout.pointer_size;\n-                let bytes = &alloc.bytes[offset..offset + ptr_size.bytes() as usize];\n-                read_target_uint(endianness, bytes).unwrap()\n-            };\n-\n             let global_value = module.declare_data_in_data(data_id, &mut data_ctx);\n             data_ctx.write_data_addr(reloc_offset as u32, global_value, 0);\n         }"}]}