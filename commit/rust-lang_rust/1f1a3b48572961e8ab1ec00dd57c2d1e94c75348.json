{"sha": "1f1a3b48572961e8ab1ec00dd57c2d1e94c75348", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmMWEzYjQ4NTcyOTYxZThhYjFlYzAwZGQ1N2MyZDFlOTRjNzUzNDg=", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2021-01-12T20:24:28Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2021-01-12T20:24:28Z"}, "message": "move WriteCloneIntoRaw into alloc::alloc", "tree": {"sha": "71aca23273111d760b76f2a26e6454f912c1379d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/71aca23273111d760b76f2a26e6454f912c1379d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f1a3b48572961e8ab1ec00dd57c2d1e94c75348", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f1a3b48572961e8ab1ec00dd57c2d1e94c75348", "html_url": "https://github.com/rust-lang/rust/commit/1f1a3b48572961e8ab1ec00dd57c2d1e94c75348", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f1a3b48572961e8ab1ec00dd57c2d1e94c75348/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f89f30fb2cabe7883ead5777980f75088455efb6", "url": "https://api.github.com/repos/rust-lang/rust/commits/f89f30fb2cabe7883ead5777980f75088455efb6", "html_url": "https://github.com/rust-lang/rust/commit/f89f30fb2cabe7883ead5777980f75088455efb6"}], "stats": {"total": 58, "additions": 31, "deletions": 27}, "files": [{"sha": "cb9daaea0001b5281fc21d4b3599be6a4d59455d", "filename": "library/alloc/src/alloc.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1f1a3b48572961e8ab1ec00dd57c2d1e94c75348/library%2Falloc%2Fsrc%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f1a3b48572961e8ab1ec00dd57c2d1e94c75348/library%2Falloc%2Fsrc%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Falloc.rs?ref=1f1a3b48572961e8ab1ec00dd57c2d1e94c75348", "patch": "@@ -397,3 +397,26 @@ pub mod __alloc_error_handler {\n         unsafe { oom_impl(layout) }\n     }\n }\n+\n+/// Specialize clones into pre-allocated, uninitialized memory.\n+/// Used by `Box::clone` and `Rc`/`Arc::make_mut`.\n+pub(crate) trait WriteCloneIntoRaw: Sized {\n+    unsafe fn write_clone_into_raw(&self, target: *mut Self);\n+}\n+\n+impl<T: Clone> WriteCloneIntoRaw for T {\n+    #[inline]\n+    default unsafe fn write_clone_into_raw(&self, target: *mut Self) {\n+        // Having allocated *first* may allow the optimizer to create\n+        // the cloned value in-place, skipping the local and move.\n+        unsafe { target.write(self.clone()) };\n+    }\n+}\n+\n+impl<T: Copy> WriteCloneIntoRaw for T {\n+    #[inline]\n+    unsafe fn write_clone_into_raw(&self, target: *mut Self) {\n+        // We can always copy in-place, without ever involving a local value.\n+        unsafe { target.copy_from_nonoverlapping(self, 1) };\n+    }\n+}"}, {"sha": "0aa52b35ced453bb777c3a32827cb378a8c0c832", "filename": "library/alloc/src/boxed.rs", "status": "modified", "additions": 1, "deletions": 23, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1f1a3b48572961e8ab1ec00dd57c2d1e94c75348/library%2Falloc%2Fsrc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f1a3b48572961e8ab1ec00dd57c2d1e94c75348/library%2Falloc%2Fsrc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fboxed.rs?ref=1f1a3b48572961e8ab1ec00dd57c2d1e94c75348", "patch": "@@ -151,7 +151,7 @@ use core::pin::Pin;\n use core::ptr::{self, Unique};\n use core::task::{Context, Poll};\n \n-use crate::alloc::{handle_alloc_error, AllocError, Allocator, Global, Layout};\n+use crate::alloc::{handle_alloc_error, AllocError, Allocator, Global, Layout, WriteCloneIntoRaw};\n use crate::borrow::Cow;\n use crate::raw_vec::RawVec;\n use crate::str::from_boxed_utf8_unchecked;\n@@ -1047,28 +1047,6 @@ impl<T: Clone, A: Allocator + Clone> Clone for Box<T, A> {\n     }\n }\n \n-/// Specialize clones into pre-allocated, uninitialized memory.\n-pub(crate) trait WriteCloneIntoRaw: Sized {\n-    unsafe fn write_clone_into_raw(&self, target: *mut Self);\n-}\n-\n-impl<T: Clone> WriteCloneIntoRaw for T {\n-    #[inline]\n-    default unsafe fn write_clone_into_raw(&self, target: *mut Self) {\n-        // Having allocated *first* may allow the optimizer to create\n-        // the cloned value in-place, skipping the local and move.\n-        unsafe { target.write(self.clone()) };\n-    }\n-}\n-\n-impl<T: Copy> WriteCloneIntoRaw for T {\n-    #[inline]\n-    unsafe fn write_clone_into_raw(&self, target: *mut Self) {\n-        // We can always copy in-place, without ever involving a local value.\n-        unsafe { target.copy_from_nonoverlapping(self, 1) };\n-    }\n-}\n-\n #[stable(feature = \"box_slice_clone\", since = \"1.3.0\")]\n impl Clone for Box<str> {\n     fn clone(&self) -> Self {"}, {"sha": "0973a6e362bc2900d483d67498fee2b386fe4e29", "filename": "library/alloc/src/rc.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f1a3b48572961e8ab1ec00dd57c2d1e94c75348/library%2Falloc%2Fsrc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f1a3b48572961e8ab1ec00dd57c2d1e94c75348/library%2Falloc%2Fsrc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc.rs?ref=1f1a3b48572961e8ab1ec00dd57c2d1e94c75348", "patch": "@@ -263,9 +263,10 @@ use core::pin::Pin;\n use core::ptr::{self, NonNull};\n use core::slice::from_raw_parts_mut;\n \n-use crate::alloc::{box_free, handle_alloc_error, AllocError, Allocator, Global, Layout};\n+use crate::alloc::{\n+    box_free, handle_alloc_error, AllocError, Allocator, Global, Layout, WriteCloneIntoRaw,\n+};\n use crate::borrow::{Cow, ToOwned};\n-use crate::boxed::WriteCloneIntoRaw;\n use crate::string::String;\n use crate::vec::Vec;\n "}, {"sha": "05bfeccbda13294a60c8ad5c9583fbee187b2d69", "filename": "library/alloc/src/sync.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1f1a3b48572961e8ab1ec00dd57c2d1e94c75348/library%2Falloc%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f1a3b48572961e8ab1ec00dd57c2d1e94c75348/library%2Falloc%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync.rs?ref=1f1a3b48572961e8ab1ec00dd57c2d1e94c75348", "patch": "@@ -22,9 +22,11 @@ use core::slice::from_raw_parts_mut;\n use core::sync::atomic;\n use core::sync::atomic::Ordering::{Acquire, Relaxed, Release, SeqCst};\n \n-use crate::alloc::{box_free, handle_alloc_error, AllocError, Allocator, Global, Layout};\n+use crate::alloc::{\n+    box_free, handle_alloc_error, AllocError, Allocator, Global, Layout, WriteCloneIntoRaw,\n+};\n use crate::borrow::{Cow, ToOwned};\n-use crate::boxed::{Box, WriteCloneIntoRaw};\n+use crate::boxed::Box;\n use crate::rc::is_dangling;\n use crate::string::String;\n use crate::vec::Vec;"}]}