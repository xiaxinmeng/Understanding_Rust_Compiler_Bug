{"sha": "6724317dad11856d6467ca2374e8c8bb6e749612", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3MjQzMTdkYWQxMTg1NmQ2NDY3Y2EyMzc0ZThjOGJiNmU3NDk2MTI=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2013-09-10T09:04:11Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2013-09-10T09:25:09Z"}, "message": "gather_loans/mod.rs Visitor refactoring (#7081): unify GatherLoan{Ctxt,Visitor}.", "tree": {"sha": "4dfe8b080c35dbe79312ce2b29ce68eb485037a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4dfe8b080c35dbe79312ce2b29ce68eb485037a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6724317dad11856d6467ca2374e8c8bb6e749612", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6724317dad11856d6467ca2374e8c8bb6e749612", "html_url": "https://github.com/rust-lang/rust/commit/6724317dad11856d6467ca2374e8c8bb6e749612", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6724317dad11856d6467ca2374e8c8bb6e749612/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "959d9d60e143fb969fa5bc778a2017a9312bd435", "url": "https://api.github.com/repos/rust-lang/rust/commits/959d9d60e143fb969fa5bc778a2017a9312bd435", "html_url": "https://github.com/rust-lang/rust/commit/959d9d60e143fb969fa5bc778a2017a9312bd435"}], "stats": {"total": 93, "additions": 42, "deletions": 51}, "files": [{"sha": "d754e0360fd459b1b12a94ce054c388cf98d2a21", "filename": "src/librustc/middle/borrowck/gather_loans/mod.rs", "status": "modified", "additions": 42, "deletions": 51, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/6724317dad11856d6467ca2374e8c8bb6e749612/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6724317dad11856d6467ca2374e8c8bb6e749612/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs?ref=6724317dad11856d6467ca2374e8c8bb6e749612", "patch": "@@ -73,40 +73,38 @@ struct GatherLoanCtxt {\n     repeating_ids: ~[ast::NodeId]\n }\n \n-struct GatherLoanVisitor;\n-\n-impl visit::Visitor<@mut GatherLoanCtxt> for GatherLoanVisitor {\n-    fn visit_expr(&mut self, ex:@Expr, e:@mut GatherLoanCtxt) {\n-        gather_loans_in_expr(self, ex, e);\n+impl visit::Visitor<()> for GatherLoanCtxt {\n+    fn visit_expr(&mut self, ex:@Expr, _:()) {\n+        gather_loans_in_expr(self, ex);\n     }\n-    fn visit_block(&mut self, b:&Block, e:@mut GatherLoanCtxt) {\n-        gather_loans_in_block(self, b, e);\n+    fn visit_block(&mut self, b:&Block, _:()) {\n+        gather_loans_in_block(self, b);\n     }\n     fn visit_fn(&mut self, fk:&fn_kind, fd:&fn_decl, b:&Block,\n-                s:Span, n:NodeId, e:@mut GatherLoanCtxt) {\n-        gather_loans_in_fn(self, fk, fd, b, s, n, e);\n+                s:Span, n:NodeId, _:()) {\n+        gather_loans_in_fn(self, fk, fd, b, s, n);\n     }\n-    fn visit_stmt(&mut self, s:@Stmt, e:@mut GatherLoanCtxt) {\n-        add_stmt_to_map(self, s, e);\n+    fn visit_stmt(&mut self, s:@Stmt, _:()) {\n+        add_stmt_to_map(self, s);\n     }\n-    fn visit_pat(&mut self, p:@Pat, e:@mut GatherLoanCtxt) {\n-        add_pat_to_id_range(self, p, e);\n+    fn visit_pat(&mut self, p:@Pat, _:()) {\n+        add_pat_to_id_range(self, p);\n     }\n-    fn visit_local(&mut self, l:@Local, e:@mut GatherLoanCtxt) {\n-        gather_loans_in_local(self, l, e);\n+    fn visit_local(&mut self, l:@Local, _:()) {\n+        gather_loans_in_local(self, l);\n     }\n \n     // #7740: Do not visit items here, not even fn items nor methods\n     // of impl items; the outer loop in borrowck/mod will visit them\n     // for us in turn.  Thus override visit_item's walk with a no-op.\n-    fn visit_item(&mut self, _:@ast::item, _:@mut GatherLoanCtxt) { }\n+    fn visit_item(&mut self, _:@ast::item, _:()) { }\n }\n \n pub fn gather_loans(bccx: @BorrowckCtxt,\n                     decl: &ast::fn_decl,\n                     body: &ast::Block)\n                     -> (id_range, @mut ~[Loan], @mut move_data::MoveData) {\n-    let glcx = @mut GatherLoanCtxt {\n+    let mut glcx = GatherLoanCtxt {\n         bccx: bccx,\n         id_range: id_range::max(),\n         all_loans: @mut ~[],\n@@ -116,29 +114,26 @@ pub fn gather_loans(bccx: @BorrowckCtxt,\n     };\n     glcx.gather_fn_arg_patterns(decl, body);\n \n-    let mut v = GatherLoanVisitor;\n-    v.visit_block(body, glcx);\n+    glcx.visit_block(body, ());\n     return (glcx.id_range, glcx.all_loans, glcx.move_data);\n }\n \n-fn add_pat_to_id_range(v: &mut GatherLoanVisitor,\n-                       p: @ast::Pat,\n-                       this: @mut GatherLoanCtxt) {\n+fn add_pat_to_id_range(this: &mut GatherLoanCtxt,\n+                       p: @ast::Pat) {\n     // NB: This visitor function just adds the pat ids into the id\n     // range. We gather loans that occur in patterns using the\n     // `gather_pat()` method below. Eventually these two should be\n     // brought together.\n     this.id_range.add(p.id);\n-    visit::walk_pat(v, p, this);\n+    visit::walk_pat(this, p, ());\n }\n \n-fn gather_loans_in_fn(v: &mut GatherLoanVisitor,\n+fn gather_loans_in_fn(this: &mut GatherLoanCtxt,\n                       fk: &fn_kind,\n                       decl: &ast::fn_decl,\n                       body: &ast::Block,\n                       sp: Span,\n-                      id: ast::NodeId,\n-                      this: @mut GatherLoanCtxt) {\n+                      id: ast::NodeId) {\n     match fk {\n         &visit::fk_item_fn(*) | &visit::fk_method(*) => {\n             fail!(\"cannot occur, due to visit_item override\");\n@@ -147,23 +142,21 @@ fn gather_loans_in_fn(v: &mut GatherLoanVisitor,\n         // Visit closures as part of the containing item.\n         &visit::fk_anon(*) | &visit::fk_fn_block(*) => {\n             this.push_repeating_id(body.id);\n-            visit::walk_fn(v, fk, decl, body, sp, id, this);\n+            visit::walk_fn(this, fk, decl, body, sp, id, ());\n             this.pop_repeating_id(body.id);\n             this.gather_fn_arg_patterns(decl, body);\n         }\n     }\n }\n \n-fn gather_loans_in_block(v: &mut GatherLoanVisitor,\n-                         blk: &ast::Block,\n-                         this: @mut GatherLoanCtxt) {\n+fn gather_loans_in_block(this: &mut GatherLoanCtxt,\n+                         blk: &ast::Block) {\n     this.id_range.add(blk.id);\n-    visit::walk_block(v, blk, this);\n+    visit::walk_block(this, blk, ());\n }\n \n-fn gather_loans_in_local(v: &mut GatherLoanVisitor,\n-                         local: @ast::Local,\n-                         this: @mut GatherLoanCtxt) {\n+fn gather_loans_in_local(this: &mut GatherLoanCtxt,\n+                         local: @ast::Local) {\n     match local.init {\n         None => {\n             // Variable declarations without initializers are considered \"moves\":\n@@ -194,13 +187,12 @@ fn gather_loans_in_local(v: &mut GatherLoanVisitor,\n         }\n     }\n \n-    visit::walk_local(v, local, this);\n+    visit::walk_local(this, local, ());\n }\n \n \n-fn gather_loans_in_expr(v: &mut GatherLoanVisitor,\n-                        ex: @ast::Expr,\n-                        this: @mut GatherLoanCtxt) {\n+fn gather_loans_in_expr(this: &mut GatherLoanCtxt,\n+                        ex: @ast::Expr) {\n     let bccx = this.bccx;\n     let tcx = bccx.tcx;\n \n@@ -244,7 +236,7 @@ fn gather_loans_in_expr(v: &mut GatherLoanVisitor,\n                              base_cmt,\n                              LoanMutability::from_ast_mutability(mutbl),\n                              scope_r);\n-        visit::walk_expr(v, ex, this);\n+        visit::walk_expr(this, ex, ());\n       }\n \n       ast::ExprAssign(l, _) | ast::ExprAssignOp(_, _, l, _) => {\n@@ -261,7 +253,7 @@ fn gather_loans_in_expr(v: &mut GatherLoanVisitor,\n                   // with moves etc, just ignore.\n               }\n           }\n-          visit::walk_expr(v, ex, this);\n+          visit::walk_expr(this, ex, ());\n       }\n \n       ast::ExprMatch(ex_v, ref arms) => {\n@@ -271,7 +263,7 @@ fn gather_loans_in_expr(v: &mut GatherLoanVisitor,\n                 this.gather_pat(cmt, *pat, Some((arm.body.id, ex.id)));\n             }\n         }\n-        visit::walk_expr(v, ex, this);\n+        visit::walk_expr(this, ex, ());\n       }\n \n       ast::ExprIndex(_, _, arg) |\n@@ -289,36 +281,36 @@ fn gather_loans_in_expr(v: &mut GatherLoanVisitor,\n                                arg_cmt,\n                                ImmutableMutability,\n                                scope_r);\n-          visit::walk_expr(v, ex, this);\n+          visit::walk_expr(this, ex, ());\n       }\n \n       // see explanation attached to the `root_ub` field:\n       ast::ExprWhile(cond, ref body) => {\n           // during the condition, can only root for the condition\n           this.push_repeating_id(cond.id);\n-          v.visit_expr(cond, this);\n+          this.visit_expr(cond, ());\n           this.pop_repeating_id(cond.id);\n \n           // during body, can only root for the body\n           this.push_repeating_id(body.id);\n-          v.visit_block(body, this);\n+          this.visit_block(body, ());\n           this.pop_repeating_id(body.id);\n       }\n \n       // see explanation attached to the `root_ub` field:\n       ast::ExprLoop(ref body, _) => {\n           this.push_repeating_id(body.id);\n-          visit::walk_expr(v, ex, this);\n+          visit::walk_expr(this, ex, ());\n           this.pop_repeating_id(body.id);\n       }\n \n       ast::ExprFnBlock(*) => {\n           gather_moves::gather_captures(this.bccx, this.move_data, ex);\n-          visit::walk_expr(v, ex, this);\n+          visit::walk_expr(this, ex, ());\n       }\n \n       _ => {\n-          visit::walk_expr(v, ex, this);\n+          visit::walk_expr(this, ex, ());\n       }\n     }\n }\n@@ -809,14 +801,13 @@ impl GatherLoanCtxt {\n \n // Setting up info that preserve needs.\n // This is just the most convenient place to do it.\n-fn add_stmt_to_map(v: &mut GatherLoanVisitor,\n-                   stmt: @ast::Stmt,\n-                   this: @mut GatherLoanCtxt) {\n+fn add_stmt_to_map(this: &mut GatherLoanCtxt,\n+                   stmt: @ast::Stmt) {\n     match stmt.node {\n         ast::StmtExpr(_, id) | ast::StmtSemi(_, id) => {\n             this.bccx.stmt_map.insert(id);\n         }\n         _ => ()\n     }\n-    visit::walk_stmt(v, stmt, this);\n+    visit::walk_stmt(this, stmt, ());\n }"}]}