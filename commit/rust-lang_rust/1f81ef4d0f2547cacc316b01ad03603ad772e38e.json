{"sha": "1f81ef4d0f2547cacc316b01ad03603ad772e38e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmODFlZjRkMGYyNTQ3Y2FjYzMxNmIwMWFkMDM2MDNhZDc3MmUzOGU=", "commit": {"author": {"name": "Tobias Bucher", "email": "tobiasbucher5991@gmail.com", "date": "2015-08-24T11:57:11Z"}, "committer": {"name": "Tobias Bucher", "email": "tobiasbucher5991@gmail.com", "date": "2015-08-30T08:24:05Z"}, "message": "Atomically set CLOEXEC on duplicated sockets\n\nFor Bitrig, NetBSD and OpenBSD the constant was incorrectly in posix01, when\nit's actually posix08, so we move it. This is a [breaking-change], but we\nalready had one in #27930.\n\nFix NetBSD's F_DUPFD_CLOEXEC constant.\n\nFor a similar feature detection, see this musl thread:\nhttp://comments.gmane.org/gmane.linux.lib.musl.general/2963\n\nThis assumes that an int literal has type `c_int` for varidic functions.", "tree": {"sha": "e7495a22e3340d8930b5e4be7f95620b9a9b6a51", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7495a22e3340d8930b5e4be7f95620b9a9b6a51"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f81ef4d0f2547cacc316b01ad03603ad772e38e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f81ef4d0f2547cacc316b01ad03603ad772e38e", "html_url": "https://github.com/rust-lang/rust/commit/1f81ef4d0f2547cacc316b01ad03603ad772e38e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f81ef4d0f2547cacc316b01ad03603ad772e38e/comments", "author": {"login": "tbu-", "id": 6666593, "node_id": "MDQ6VXNlcjY2NjY1OTM=", "avatar_url": "https://avatars.githubusercontent.com/u/6666593?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tbu-", "html_url": "https://github.com/tbu-", "followers_url": "https://api.github.com/users/tbu-/followers", "following_url": "https://api.github.com/users/tbu-/following{/other_user}", "gists_url": "https://api.github.com/users/tbu-/gists{/gist_id}", "starred_url": "https://api.github.com/users/tbu-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tbu-/subscriptions", "organizations_url": "https://api.github.com/users/tbu-/orgs", "repos_url": "https://api.github.com/users/tbu-/repos", "events_url": "https://api.github.com/users/tbu-/events{/privacy}", "received_events_url": "https://api.github.com/users/tbu-/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tbu-", "id": 6666593, "node_id": "MDQ6VXNlcjY2NjY1OTM=", "avatar_url": "https://avatars.githubusercontent.com/u/6666593?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tbu-", "html_url": "https://github.com/tbu-", "followers_url": "https://api.github.com/users/tbu-/followers", "following_url": "https://api.github.com/users/tbu-/following{/other_user}", "gists_url": "https://api.github.com/users/tbu-/gists{/gist_id}", "starred_url": "https://api.github.com/users/tbu-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tbu-/subscriptions", "organizations_url": "https://api.github.com/users/tbu-/orgs", "repos_url": "https://api.github.com/users/tbu-/repos", "events_url": "https://api.github.com/users/tbu-/events{/privacy}", "received_events_url": "https://api.github.com/users/tbu-/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4bb90232daab451cf58359e0c5874bc905d2f101", "url": "https://api.github.com/repos/rust-lang/rust/commits/4bb90232daab451cf58359e0c5874bc905d2f101", "html_url": "https://github.com/rust-lang/rust/commit/4bb90232daab451cf58359e0c5874bc905d2f101"}], "stats": {"total": 37, "additions": 31, "deletions": 6}, "files": [{"sha": "95b5ccca75397bb7514c72a40836cc060ef4df2b", "filename": "src/liblibc/lib.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1f81ef4d0f2547cacc316b01ad03603ad772e38e/src%2Fliblibc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f81ef4d0f2547cacc316b01ad03603ad772e38e/src%2Fliblibc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc%2Flib.rs?ref=1f81ef4d0f2547cacc316b01ad03603ad772e38e", "patch": "@@ -3614,6 +3614,7 @@ pub mod consts {\n         pub mod posix08 {\n             use types::os::arch::c95::c_int;\n             pub const O_CLOEXEC: c_int = 0x80000;\n+            pub const F_DUPFD_CLOEXEC: c_int = 1030;\n         }\n         #[cfg(any(target_arch = \"arm\",\n                   target_arch = \"aarch64\",\n@@ -4285,11 +4286,13 @@ pub mod consts {\n         pub mod posix08 {\n             use types::os::arch::c95::c_int;\n             pub const O_CLOEXEC: c_int = 0x100000;\n+            pub const F_DUPFD_CLOEXEC: c_int = 17;\n         }\n         #[cfg(target_os = \"dragonfly\")]\n         pub mod posix08 {\n             use types::os::arch::c95::c_int;\n             pub const O_CLOEXEC: c_int = 0x20000;\n+            pub const F_DUPFD_CLOEXEC: c_int = 17;\n         }\n         pub mod bsd44 {\n             use types::os::arch::c95::c_int;\n@@ -4657,7 +4660,6 @@ pub mod consts {\n             pub const F_GETLK : c_int = 7;\n             pub const F_SETLK : c_int = 8;\n             pub const F_SETLKW : c_int = 9;\n-            pub const F_DUPFD_CLOEXEC : c_int = 10;\n \n             pub const SIGTRAP : c_int = 5;\n             pub const SIG_IGN: size_t = 1;\n@@ -4739,11 +4741,13 @@ pub mod consts {\n         pub mod posix08 {\n             use types::os::arch::c95::c_int;\n             pub const O_CLOEXEC: c_int = 0x10000;\n+            pub const F_DUPFD_CLOEXEC: c_int = 10;\n         }\n         #[cfg(target_os = \"netbsd\")]\n         pub mod posix08 {\n             use types::os::arch::c95::c_int;\n             pub const O_CLOEXEC: c_int = 0x400000;\n+            pub const F_DUPFD_CLOEXEC: c_int = 12;\n         }\n         pub mod bsd44 {\n             use types::os::arch::c95::c_int;\n@@ -5186,6 +5190,7 @@ pub mod consts {\n         pub mod posix08 {\n             use types::os::arch::c95::c_int;\n             pub const O_CLOEXEC: c_int = 0x1000000;\n+            pub const F_DUPFD_CLOEXEC: c_int = 67;\n         }\n         pub mod bsd44 {\n             use types::os::arch::c95::c_int;"}, {"sha": "f1a9518d08de5d2fd5743e9825a289c13111db19", "filename": "src/libstd/sys/unix/net.rs", "status": "modified", "additions": 25, "deletions": 5, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/1f81ef4d0f2547cacc316b01ad03603ad772e38e/src%2Flibstd%2Fsys%2Funix%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f81ef4d0f2547cacc316b01ad03603ad772e38e/src%2Flibstd%2Fsys%2Funix%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fnet.rs?ref=1f81ef4d0f2547cacc316b01ad03603ad772e38e", "patch": "@@ -13,9 +13,10 @@ use prelude::v1::*;\n use ffi::CStr;\n use io;\n use libc::{self, c_int, size_t};\n+use net::SocketAddr;\n use str;\n+use sync::atomic::{self, AtomicBool};\n use sys::c;\n-use net::SocketAddr;\n use sys::fd::FileDesc;\n use sys_common::{AsInner, FromInner, IntoInner};\n use sys_common::net::{getsockopt, setsockopt};\n@@ -66,10 +67,29 @@ impl Socket {\n     }\n \n     pub fn duplicate(&self) -> io::Result<Socket> {\n-        let fd = try!(cvt(unsafe { libc::dup(self.0.raw()) }));\n-        let fd = FileDesc::new(fd);\n-        fd.set_cloexec();\n-        Ok(Socket(fd))\n+        use libc::funcs::posix88::fcntl::fcntl;\n+        let make_socket = |fd| {\n+            let fd = FileDesc::new(fd);\n+            fd.set_cloexec();\n+            Socket(fd)\n+        };\n+        static EMULATE_F_DUPFD_CLOEXEC: AtomicBool = AtomicBool::new(false);\n+        if !EMULATE_F_DUPFD_CLOEXEC.load(atomic::Ordering::Relaxed) {\n+            match cvt(unsafe { fcntl(self.0.raw(), libc::F_DUPFD_CLOEXEC, 0) }) {\n+                // `EINVAL` can only be returned on two occasions: Invalid\n+                // command (second parameter) or invalid third parameter. 0 is\n+                // always a valid third parameter, so it must be the second\n+                // parameter.\n+                //\n+                // Store the result in a global variable so we don't try each\n+                // syscall twice.\n+                Err(ref e) if e.raw_os_error() == Some(libc::EINVAL) => {\n+                    EMULATE_F_DUPFD_CLOEXEC.store(true, atomic::Ordering::Relaxed);\n+                }\n+                res => return res.map(make_socket),\n+            }\n+        }\n+        cvt(unsafe { fcntl(self.0.raw(), libc::F_DUPFD, 0) }).map(make_socket)\n     }\n \n     pub fn read(&self, buf: &mut [u8]) -> io::Result<usize> {"}]}