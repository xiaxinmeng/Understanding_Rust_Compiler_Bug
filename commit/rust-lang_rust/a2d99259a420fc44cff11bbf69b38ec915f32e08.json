{"sha": "a2d99259a420fc44cff11bbf69b38ec915f32e08", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyZDk5MjU5YTQyMGZjNDRjZmYxMWJiZjY5YjM4ZWM5MTVmMzJlMDg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-09T15:37:20Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-09T15:37:20Z"}, "message": "Auto merge of #6188 - ebroto:primary_package, r=flip1995\n\nAdd --no-deps option to avoid running on path dependencies in workspaces\n\nSince rust-lang/cargo#8758 has hit nightly, this allows us to address the second bullet point and [the concern related to `--fix`](https://github.com/rust-lang/cargo/issues/8143#issuecomment-619289546) in the [RUSTC_WORKSPACE_WRAPPER tracking issue](https://github.com/rust-lang/cargo/issues/8143).\n\nAs a reminder stabilizing that env var will solve #4612 (Clippy not running after `cargo check` in stable) and would allow to stabilize the `--fix` option in Clippy.\n\nchangelog: Add `--no-deps` option to avoid running on path dependencies in workspaces\n\nFixes #3025", "tree": {"sha": "d031bb9527773a0815142e7ccd1007aa89f0b13b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d031bb9527773a0815142e7ccd1007aa89f0b13b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a2d99259a420fc44cff11bbf69b38ec915f32e08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a2d99259a420fc44cff11bbf69b38ec915f32e08", "html_url": "https://github.com/rust-lang/rust/commit/a2d99259a420fc44cff11bbf69b38ec915f32e08", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a2d99259a420fc44cff11bbf69b38ec915f32e08/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b02b0c737abd9c04ebd43fc2c94444d932d044fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/b02b0c737abd9c04ebd43fc2c94444d932d044fe", "html_url": "https://github.com/rust-lang/rust/commit/b02b0c737abd9c04ebd43fc2c94444d932d044fe"}, {"sha": "952b731fb9134e44e4c99bae46e6a917c944e77e", "url": "https://api.github.com/repos/rust-lang/rust/commits/952b731fb9134e44e4c99bae46e6a917c944e77e", "html_url": "https://github.com/rust-lang/rust/commit/952b731fb9134e44e4c99bae46e6a917c944e77e"}], "stats": {"total": 175, "additions": 156, "deletions": 19}, "files": [{"sha": "aaa55e11c7db1b1ee9086584b3b9c581aabad966", "filename": "README.md", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a2d99259a420fc44cff11bbf69b38ec915f32e08/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/a2d99259a420fc44cff11bbf69b38ec915f32e08/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=a2d99259a420fc44cff11bbf69b38ec915f32e08", "patch": "@@ -82,6 +82,22 @@ Note that this is still experimental and only supported on the nightly channel:\n cargo clippy --fix -Z unstable-options\n ```\n \n+#### Workspaces\n+\n+All the usual workspace options should work with Clippy. For example the following command\n+will run Clippy on the `example` crate:\n+\n+```terminal\n+cargo clippy -p example\n+```\n+\n+As with `cargo check`, this includes dependencies that are members of the workspace, like path dependencies.\n+If you want to run Clippy **only** on the given crate, use the `--no-deps` option like this:\n+\n+```terminal\n+cargo clippy -p example -- --no-deps \n+```\n+\n ### Running Clippy from the command line without installing it\n \n To have cargo compile your crate with Clippy without Clippy installation"}, {"sha": "85a91cd2decd59ffdad366977375be13f2fe52a5", "filename": "clippy_workspace_tests/path_dep/Cargo.toml", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a2d99259a420fc44cff11bbf69b38ec915f32e08/clippy_workspace_tests%2Fpath_dep%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a2d99259a420fc44cff11bbf69b38ec915f32e08/clippy_workspace_tests%2Fpath_dep%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_workspace_tests%2Fpath_dep%2FCargo.toml?ref=a2d99259a420fc44cff11bbf69b38ec915f32e08", "patch": "@@ -0,0 +1,3 @@\n+[package]\n+name = \"path_dep\"\n+version = \"0.1.0\""}, {"sha": "35ce524f2b10c367c0b3d71e4449f05458542261", "filename": "clippy_workspace_tests/path_dep/src/lib.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a2d99259a420fc44cff11bbf69b38ec915f32e08/clippy_workspace_tests%2Fpath_dep%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2d99259a420fc44cff11bbf69b38ec915f32e08/clippy_workspace_tests%2Fpath_dep%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_workspace_tests%2Fpath_dep%2Fsrc%2Flib.rs?ref=a2d99259a420fc44cff11bbf69b38ec915f32e08", "patch": "@@ -0,0 +1,6 @@\n+#![deny(clippy::empty_loop)]\n+\n+#[cfg(feature = \"primary_package_test\")]\n+pub fn lint_me() {\n+    loop {}\n+}"}, {"sha": "45362c11b856e3615cfa77348c12b251d127526b", "filename": "clippy_workspace_tests/subcrate/Cargo.toml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a2d99259a420fc44cff11bbf69b38ec915f32e08/clippy_workspace_tests%2Fsubcrate%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a2d99259a420fc44cff11bbf69b38ec915f32e08/clippy_workspace_tests%2Fsubcrate%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_workspace_tests%2Fsubcrate%2FCargo.toml?ref=a2d99259a420fc44cff11bbf69b38ec915f32e08", "patch": "@@ -1,3 +1,6 @@\n [package]\n name = \"subcrate\"\n version = \"0.1.0\"\n+\n+[dependencies]\n+path_dep = { path = \"../path_dep\" }"}, {"sha": "e490ee54c0be0c25d960b0a53c47823a36eaf510", "filename": "src/driver.rs", "status": "modified", "additions": 29, "deletions": 15, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/a2d99259a420fc44cff11bbf69b38ec915f32e08/src%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2d99259a420fc44cff11bbf69b38ec915f32e08/src%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver.rs?ref=a2d99259a420fc44cff11bbf69b38ec915f32e08", "patch": "@@ -182,6 +182,7 @@ fn toolchain_path(home: Option<String>, toolchain: Option<String>) -> Option<Pat\n     })\n }\n \n+#[allow(clippy::too_many_lines)]\n pub fn main() {\n     rustc_driver::init_rustc_env_logger();\n     SyncLazy::force(&ICE_HOOK);\n@@ -277,27 +278,40 @@ pub fn main() {\n             args.extend(vec![\"--sysroot\".into(), sys_root]);\n         };\n \n-        // this check ensures that dependencies are built but not linted and the final\n-        // crate is linted but not built\n-        let clippy_enabled = env::var(\"CLIPPY_TESTS\").map_or(false, |val| val == \"true\")\n-            || arg_value(&orig_args, \"--cap-lints\", |val| val == \"allow\").is_none();\n-\n+        let mut no_deps = false;\n+        let clippy_args = env::var(\"CLIPPY_ARGS\")\n+            .unwrap_or_default()\n+            .split(\"__CLIPPY_HACKERY__\")\n+            .filter_map(|s| match s {\n+                \"\" => None,\n+                \"--no-deps\" => {\n+                    no_deps = true;\n+                    None\n+                },\n+                _ => Some(s.to_string()),\n+            })\n+            .chain(vec![\"--cfg\".into(), r#\"feature=\"cargo-clippy\"\"#.into()])\n+            .collect::<Vec<String>>();\n+\n+        // We enable Clippy if one of the following conditions is met\n+        // - IF Clippy is run on its test suite OR\n+        // - IF Clippy is run on the main crate, not on deps (`!cap_lints_allow`) THEN\n+        //    - IF `--no-deps` is not set (`!no_deps`) OR\n+        //    - IF `--no-deps` is set and Clippy is run on the specified primary package\n+        let clippy_tests_set = env::var(\"CLIPPY_TESTS\").map_or(false, |val| val == \"true\");\n+        let cap_lints_allow = arg_value(&orig_args, \"--cap-lints\", |val| val == \"allow\").is_some();\n+        let in_primary_package = env::var(\"CARGO_PRIMARY_PACKAGE\").is_ok();\n+\n+        let clippy_enabled = clippy_tests_set || (!cap_lints_allow && (!no_deps || in_primary_package));\n         if clippy_enabled {\n-            args.extend(vec![\"--cfg\".into(), r#\"feature=\"cargo-clippy\"\"#.into()]);\n-            if let Ok(extra_args) = env::var(\"CLIPPY_ARGS\") {\n-                args.extend(extra_args.split(\"__CLIPPY_HACKERY__\").filter_map(|s| {\n-                    if s.is_empty() {\n-                        None\n-                    } else {\n-                        Some(s.to_string())\n-                    }\n-                }));\n-            }\n+            args.extend(clippy_args);\n         }\n+\n         let mut clippy = ClippyCallbacks;\n         let mut default = DefaultCallbacks;\n         let callbacks: &mut (dyn rustc_driver::Callbacks + Send) =\n             if clippy_enabled { &mut clippy } else { &mut default };\n+\n         rustc_driver::RunCompiler::new(&args, callbacks).run()\n     }))\n }"}, {"sha": "ea06743394d1075ba270830ba5e49b0c783cc3bf", "filename": "src/main.rs", "status": "modified", "additions": 29, "deletions": 3, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/a2d99259a420fc44cff11bbf69b38ec915f32e08/src%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2d99259a420fc44cff11bbf69b38ec915f32e08/src%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmain.rs?ref=a2d99259a420fc44cff11bbf69b38ec915f32e08", "patch": "@@ -62,7 +62,7 @@ struct ClippyCmd {\n     unstable_options: bool,\n     cargo_subcommand: &'static str,\n     args: Vec<String>,\n-    clippy_args: String,\n+    clippy_args: Vec<String>,\n }\n \n impl ClippyCmd {\n@@ -99,7 +99,10 @@ impl ClippyCmd {\n             args.insert(0, \"+nightly\".to_string());\n         }\n \n-        let clippy_args: String = old_args.map(|arg| format!(\"{}__CLIPPY_HACKERY__\", arg)).collect();\n+        let mut clippy_args: Vec<String> = old_args.collect();\n+        if cargo_subcommand == \"fix\" && !clippy_args.iter().any(|arg| arg == \"--no-deps\") {\n+            clippy_args.push(\"--no-deps\".into());\n+        }\n \n         ClippyCmd {\n             unstable_options,\n@@ -147,10 +150,15 @@ impl ClippyCmd {\n \n     fn into_std_cmd(self) -> Command {\n         let mut cmd = Command::new(\"cargo\");\n+        let clippy_args: String = self\n+            .clippy_args\n+            .iter()\n+            .map(|arg| format!(\"{}__CLIPPY_HACKERY__\", arg))\n+            .collect();\n \n         cmd.env(self.path_env(), Self::path())\n             .envs(ClippyCmd::target_dir())\n-            .env(\"CLIPPY_ARGS\", self.clippy_args)\n+            .env(\"CLIPPY_ARGS\", clippy_args)\n             .arg(self.cargo_subcommand)\n             .args(&self.args);\n \n@@ -201,6 +209,24 @@ mod tests {\n         assert!(cmd.args.iter().any(|arg| arg.ends_with(\"unstable-options\")));\n     }\n \n+    #[test]\n+    fn fix_implies_no_deps() {\n+        let args = \"cargo clippy --fix -Zunstable-options\"\n+            .split_whitespace()\n+            .map(ToString::to_string);\n+        let cmd = ClippyCmd::new(args);\n+        assert!(cmd.clippy_args.iter().any(|arg| arg == \"--no-deps\"));\n+    }\n+\n+    #[test]\n+    fn no_deps_not_duplicated_with_fix() {\n+        let args = \"cargo clippy --fix -Zunstable-options -- --no-deps\"\n+            .split_whitespace()\n+            .map(ToString::to_string);\n+        let cmd = ClippyCmd::new(args);\n+        assert_eq!(cmd.clippy_args.iter().filter(|arg| *arg == \"--no-deps\").count(), 1);\n+    }\n+\n     #[test]\n     fn check() {\n         let args = \"cargo clippy\".split_whitespace().map(ToString::to_string);"}, {"sha": "052223d6d6ff7f4156f17b0562a4d72335a875cb", "filename": "tests/dogfood.rs", "status": "modified", "additions": 70, "deletions": 1, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/a2d99259a420fc44cff11bbf69b38ec915f32e08/tests%2Fdogfood.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2d99259a420fc44cff11bbf69b38ec915f32e08/tests%2Fdogfood.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdogfood.rs?ref=a2d99259a420fc44cff11bbf69b38ec915f32e08", "patch": "@@ -3,7 +3,7 @@\n #![feature(once_cell)]\n \n use std::lazy::SyncLazy;\n-use std::path::PathBuf;\n+use std::path::{Path, PathBuf};\n use std::process::Command;\n \n mod cargo;\n@@ -47,12 +47,77 @@ fn dogfood_clippy() {\n \n #[test]\n fn dogfood_subprojects() {\n+    fn test_no_deps_ignores_path_deps_in_workspaces() {\n+        fn clean(cwd: &Path, target_dir: &Path) {\n+            Command::new(\"cargo\")\n+                .current_dir(cwd)\n+                .env(\"CARGO_TARGET_DIR\", target_dir)\n+                .arg(\"clean\")\n+                .args(&[\"-p\", \"subcrate\"])\n+                .args(&[\"-p\", \"path_dep\"])\n+                .output()\n+                .unwrap();\n+        }\n+\n+        if cargo::is_rustc_test_suite() {\n+            return;\n+        }\n+        let root = PathBuf::from(env!(\"CARGO_MANIFEST_DIR\"));\n+        let target_dir = root.join(\"target\").join(\"dogfood\");\n+        let cwd = root.join(\"clippy_workspace_tests\");\n+\n+        // Make sure we start with a clean state\n+        clean(&cwd, &target_dir);\n+\n+        // `path_dep` is a path dependency of `subcrate` that would trigger a denied lint.\n+        // Make sure that with the `--no-deps` argument Clippy does not run on `path_dep`.\n+        let output = Command::new(&*CLIPPY_PATH)\n+            .current_dir(&cwd)\n+            .env(\"CLIPPY_DOGFOOD\", \"1\")\n+            .env(\"CARGO_INCREMENTAL\", \"0\")\n+            .arg(\"clippy\")\n+            .args(&[\"-p\", \"subcrate\"])\n+            .arg(\"--\")\n+            .arg(\"--no-deps\")\n+            .arg(\"-Cdebuginfo=0\") // disable debuginfo to generate less data in the target dir\n+            .args(&[\"--cfg\", r#\"feature=\"primary_package_test\"\"#])\n+            .output()\n+            .unwrap();\n+        println!(\"status: {}\", output.status);\n+        println!(\"stdout: {}\", String::from_utf8_lossy(&output.stdout));\n+        println!(\"stderr: {}\", String::from_utf8_lossy(&output.stderr));\n+\n+        assert!(output.status.success());\n+\n+        // Make sure we start with a clean state\n+        clean(&cwd, &target_dir);\n+\n+        // Test that without the `--no-deps` argument, `path_dep` is linted.\n+        let output = Command::new(&*CLIPPY_PATH)\n+            .current_dir(&cwd)\n+            .env(\"CLIPPY_DOGFOOD\", \"1\")\n+            .env(\"CARGO_INCREMENTAL\", \"0\")\n+            .arg(\"clippy\")\n+            .args(&[\"-p\", \"subcrate\"])\n+            .arg(\"--\")\n+            .arg(\"-Cdebuginfo=0\") // disable debuginfo to generate less data in the target dir\n+            .args(&[\"--cfg\", r#\"feature=\"primary_package_test\"\"#])\n+            .output()\n+            .unwrap();\n+        println!(\"status: {}\", output.status);\n+        println!(\"stdout: {}\", String::from_utf8_lossy(&output.stdout));\n+        println!(\"stderr: {}\", String::from_utf8_lossy(&output.stderr));\n+\n+        assert!(!output.status.success());\n+    }\n+\n     // run clippy on remaining subprojects and fail the test if lint warnings are reported\n     if cargo::is_rustc_test_suite() {\n         return;\n     }\n     let root_dir = PathBuf::from(env!(\"CARGO_MANIFEST_DIR\"));\n \n+    // NOTE: `path_dep` crate is omitted on purpose here\n     for d in &[\n         \"clippy_workspace_tests\",\n         \"clippy_workspace_tests/src\",\n@@ -78,4 +143,8 @@ fn dogfood_subprojects() {\n \n         assert!(output.status.success());\n     }\n+\n+    // NOTE: Since tests run in parallel we can't run cargo commands on the same workspace at the\n+    // same time, so we test this immediately after the dogfood for workspaces.\n+    test_no_deps_ignores_path_deps_in_workspaces();\n }"}]}