{"sha": "7294f49d524772cceb96ee35ee85feec2a052076", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyOTRmNDlkNTI0NzcyY2NlYjk2ZWUzNWVlODVmZWVjMmEwNTIwNzY=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2021-06-07T17:40:47Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2021-06-07T22:07:07Z"}, "message": "Remove ResolvedOpaqueTy and just use Ty, SubstsRef is already there", "tree": {"sha": "2a29f4e25bacca77ea40f62728bcf02e1b0b8088", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a29f4e25bacca77ea40f62728bcf02e1b0b8088"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7294f49d524772cceb96ee35ee85feec2a052076", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmC+mIwACgkQgTGiTgx5\n76+M0xAAj56biBD1/vHF3E0kA2EernD8fD+59qOQbKVPAoozeIpU7EbaERi4Jagz\nBOyREl+zI3boUwcLWSo9TFZfS+1nmzyKbJB75rKjWpuLsWxMb1+eVKOPI9U1uLSP\nMIJ4z3gE2yQDd4oQRImB+n6/EE7jpBQm2SjZ18p1ilUkQDlmAR0xkGg4kDnJjUqF\nss5a3XSXfXbK4570+3w4oSBNYbslNozYYcAGiAuJKXRfAswFxEHaG+rOATOMWfCs\n4rtjRR06vLWGsCV5hQcX1RSUibA1LyrAbPT4GB0D5wklZ6jIdFqs3eI0YYLf2lio\nwc3HL+oVLKi4w8QfR06x0aVK2/Rm6IYvG6jKT7gqHfGuKczZSUkn9Y9wKUzXH6kd\n9vgHf7gKXE6VZlXzEpRUul2j8ctw9VoEgP30aeFqUU00GqdBoefrWW6xHki+2U+c\nqSMpJyXu9XVCVxFzLzUk7JWoKZpNoMgKHW4kplXixAQ0vdm0Xlb26zQ3PpGtyNPh\nUfT8ptqbMY+O2mr5q3b01CfSjzuzstTM2ei9qLE9Hhb/4AIa1zI6TGKQvrTxDPbC\nBkAcJZZAi6sYdYoIR3EIQXvANOECCoQ4fyByC3Sah6O9wWkbSAwB1PThXmAqarEb\nys71jm/ng+Re+wU8SJXS8nnP6S/PjpS0H6Fz1RUYYAT/oomcg+I=\n=fk0m\n-----END PGP SIGNATURE-----", "payload": "tree 2a29f4e25bacca77ea40f62728bcf02e1b0b8088\nparent 7f8cad2019d3bee6f82b0394ed7d0d33d1db944a\nauthor Santiago Pastorino <spastorino@gmail.com> 1623087647 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1623103627 -0300\n\nRemove ResolvedOpaqueTy and just use Ty, SubstsRef is already there\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7294f49d524772cceb96ee35ee85feec2a052076", "html_url": "https://github.com/rust-lang/rust/commit/7294f49d524772cceb96ee35ee85feec2a052076", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7294f49d524772cceb96ee35ee85feec2a052076/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f8cad2019d3bee6f82b0394ed7d0d33d1db944a", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f8cad2019d3bee6f82b0394ed7d0d33d1db944a", "html_url": "https://github.com/rust-lang/rust/commit/7f8cad2019d3bee6f82b0394ed7d0d33d1db944a"}], "stats": {"total": 109, "additions": 40, "deletions": 69}, "files": [{"sha": "4fb737f463a8621e127979700cc6eb038922006b", "filename": "compiler/rustc_middle/src/mir/query.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7294f49d524772cceb96ee35ee85feec2a052076/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7294f49d524772cceb96ee35ee85feec2a052076/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs?ref=7294f49d524772cceb96ee35ee85feec2a052076", "patch": "@@ -211,7 +211,7 @@ pub struct BorrowCheckResult<'tcx> {\n     /// All the opaque types that are restricted to concrete types\n     /// by this function. Unlike the value in `TypeckResults`, this has\n     /// unerased regions.\n-    pub concrete_opaque_types: VecMap<OpaqueTypeKey<'tcx>, ty::ResolvedOpaqueTy<'tcx>>,\n+    pub concrete_opaque_types: VecMap<OpaqueTypeKey<'tcx>, Ty<'tcx>>,\n     pub closure_requirements: Option<ClosureRegionRequirements<'tcx>>,\n     pub used_mut_upvars: SmallVec<[Field; 8]>,\n }"}, {"sha": "3c6c7f1b47bfac113ed1f88c03bdffd617167757", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7294f49d524772cceb96ee35ee85feec2a052076/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7294f49d524772cceb96ee35ee85feec2a052076/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=7294f49d524772cceb96ee35ee85feec2a052076", "patch": "@@ -288,17 +288,6 @@ impl<'a, V> LocalTableInContextMut<'a, V> {\n     }\n }\n \n-/// All information necessary to validate and reveal an `impl Trait`.\n-#[derive(TyEncodable, TyDecodable, Debug, HashStable)]\n-pub struct ResolvedOpaqueTy<'tcx> {\n-    /// The revealed type as seen by this function.\n-    pub concrete_type: Ty<'tcx>,\n-    /// Generic parameters on the opaque type as passed by this function.\n-    /// For `type Foo<A, B> = impl Bar<A, B>; fn foo<T, U>() -> Foo<T, U> { .. }`\n-    /// this is `[T, U]`, not `[A, B]`.\n-    pub substs: SubstsRef<'tcx>,\n-}\n-\n /// Whenever a value may be live across a generator yield, the type of that value winds up in the\n /// `GeneratorInteriorTypeCause` struct. This struct adds additional information about such\n /// captured types that can be useful for diagnostics. In particular, it stores the span that\n@@ -426,7 +415,7 @@ pub struct TypeckResults<'tcx> {\n \n     /// All the opaque types that are restricted to concrete types\n     /// by this function.\n-    pub concrete_opaque_types: VecMap<OpaqueTypeKey<'tcx>, ResolvedOpaqueTy<'tcx>>,\n+    pub concrete_opaque_types: VecMap<OpaqueTypeKey<'tcx>, Ty<'tcx>>,\n \n     /// Tracks the minimum captures required for a closure;\n     /// see `MinCaptureInformationMap` for more details."}, {"sha": "227aa8dc284e27dd7a0d80d6e63f9cf868bfd94c", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7294f49d524772cceb96ee35ee85feec2a052076/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7294f49d524772cceb96ee35ee85feec2a052076/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=7294f49d524772cceb96ee35ee85feec2a052076", "patch": "@@ -58,7 +58,7 @@ pub use self::consts::{Const, ConstInt, ConstKind, InferConst, ScalarInt, Uneval\n pub use self::context::{\n     tls, CanonicalUserType, CanonicalUserTypeAnnotation, CanonicalUserTypeAnnotations,\n     CtxtInterners, DelaySpanBugEmitted, FreeRegionInfo, GeneratorInteriorTypeCause, GlobalCtxt,\n-    Lift, ResolvedOpaqueTy, TyCtxt, TypeckResults, UserType, UserTypeAnnotationIndex,\n+    Lift, TyCtxt, TypeckResults, UserType, UserTypeAnnotationIndex,\n };\n pub use self::instance::{Instance, InstanceDef};\n pub use self::list::List;"}, {"sha": "bfeafa33a91cfca4e78569b2c78c9234ce9199b9", "filename": "compiler/rustc_mir/src/borrow_check/nll.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7294f49d524772cceb96ee35ee85feec2a052076/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fnll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7294f49d524772cceb96ee35ee85feec2a052076/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fnll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fnll.rs?ref=7294f49d524772cceb96ee35ee85feec2a052076", "patch": "@@ -8,7 +8,7 @@ use rustc_middle::mir::{\n     BasicBlock, Body, ClosureOutlivesSubject, ClosureRegionRequirements, LocalKind, Location,\n     Promoted,\n };\n-use rustc_middle::ty::{self, OpaqueTypeKey, RegionKind, RegionVid};\n+use rustc_middle::ty::{self, OpaqueTypeKey, RegionKind, RegionVid, Ty};\n use rustc_span::symbol::sym;\n use std::env;\n use std::fmt::Debug;\n@@ -46,7 +46,7 @@ crate type PoloniusOutput = Output<RustcFacts>;\n /// closure requirements to propagate, and any generated errors.\n crate struct NllOutput<'tcx> {\n     pub regioncx: RegionInferenceContext<'tcx>,\n-    pub opaque_type_values: VecMap<OpaqueTypeKey<'tcx>, ty::ResolvedOpaqueTy<'tcx>>,\n+    pub opaque_type_values: VecMap<OpaqueTypeKey<'tcx>, Ty<'tcx>>,\n     pub polonius_output: Option<Rc<PoloniusOutput>>,\n     pub opt_closure_req: Option<ClosureRegionRequirements<'tcx>>,\n     pub nll_errors: RegionErrors<'tcx>,\n@@ -366,7 +366,7 @@ pub(super) fn dump_annotation<'a, 'tcx>(\n     body: &Body<'tcx>,\n     regioncx: &RegionInferenceContext<'tcx>,\n     closure_region_requirements: &Option<ClosureRegionRequirements<'_>>,\n-    opaque_type_values: &VecMap<OpaqueTypeKey<'tcx>, ty::ResolvedOpaqueTy<'tcx>>,\n+    opaque_type_values: &VecMap<OpaqueTypeKey<'tcx>, Ty<'tcx>>,\n     errors_buffer: &mut Vec<Diagnostic>,\n ) {\n     let tcx = infcx.tcx;"}, {"sha": "3ec24156f223717f0d63438e852fc1bfe87c35a7", "filename": "compiler/rustc_mir/src/borrow_check/region_infer/opaque_types.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7294f49d524772cceb96ee35ee85feec2a052076/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fregion_infer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7294f49d524772cceb96ee35ee85feec2a052076/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fregion_infer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fregion_infer%2Fopaque_types.rs?ref=7294f49d524772cceb96ee35ee85feec2a052076", "patch": "@@ -1,6 +1,6 @@\n use rustc_data_structures::vec_map::VecMap;\n use rustc_infer::infer::InferCtxt;\n-use rustc_middle::ty::{self, OpaqueTypeKey, TyCtxt, TypeFoldable};\n+use rustc_middle::ty::{self, OpaqueTypeKey, Ty, TyCtxt, TypeFoldable};\n use rustc_span::Span;\n use rustc_trait_selection::opaque_types::InferCtxtExt;\n \n@@ -50,12 +50,13 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     pub(in crate::borrow_check) fn infer_opaque_types(\n         &self,\n         infcx: &InferCtxt<'_, 'tcx>,\n-        opaque_ty_decls: VecMap<OpaqueTypeKey<'tcx>, ty::ResolvedOpaqueTy<'tcx>>,\n+        opaque_ty_decls: VecMap<OpaqueTypeKey<'tcx>, Ty<'tcx>>,\n         span: Span,\n-    ) -> VecMap<OpaqueTypeKey<'tcx>, ty::ResolvedOpaqueTy<'tcx>> {\n+    ) -> VecMap<OpaqueTypeKey<'tcx>, Ty<'tcx>> {\n         opaque_ty_decls\n             .into_iter()\n-            .map(|(opaque_type_key, ty::ResolvedOpaqueTy { concrete_type, substs })| {\n+            .map(|(opaque_type_key, concrete_type)| {\n+                let substs = opaque_type_key.substs;\n                 debug!(?concrete_type, ?substs);\n \n                 let mut subst_regions = vec![self.universal_regions.fr_static];\n@@ -116,10 +117,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                     universal_concrete_type,\n                     span,\n                 );\n-                (\n-                    opaque_type_key,\n-                    ty::ResolvedOpaqueTy { concrete_type: remapped_type, substs: universal_substs },\n-                )\n+                (opaque_type_key, remapped_type)\n             })\n             .collect()\n     }"}, {"sha": "d08a335c7dae87817fe149c03c0c5ceee781380d", "filename": "compiler/rustc_mir/src/borrow_check/type_check/mod.rs", "status": "modified", "additions": 9, "deletions": 16, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/7294f49d524772cceb96ee35ee85feec2a052076/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7294f49d524772cceb96ee35ee85feec2a052076/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=7294f49d524772cceb96ee35ee85feec2a052076", "patch": "@@ -819,7 +819,7 @@ struct TypeChecker<'a, 'tcx> {\n     reported_errors: FxHashSet<(Ty<'tcx>, Span)>,\n     borrowck_context: &'a mut BorrowCheckContext<'a, 'tcx>,\n     universal_region_relations: &'a UniversalRegionRelations<'tcx>,\n-    opaque_type_values: VecMap<OpaqueTypeKey<'tcx>, ty::ResolvedOpaqueTy<'tcx>>,\n+    opaque_type_values: VecMap<OpaqueTypeKey<'tcx>, Ty<'tcx>>,\n }\n \n struct BorrowCheckContext<'a, 'tcx> {\n@@ -834,7 +834,7 @@ struct BorrowCheckContext<'a, 'tcx> {\n crate struct MirTypeckResults<'tcx> {\n     crate constraints: MirTypeckRegionConstraints<'tcx>,\n     pub(in crate::borrow_check) universal_region_relations: Frozen<UniversalRegionRelations<'tcx>>,\n-    crate opaque_type_values: VecMap<OpaqueTypeKey<'tcx>, ty::ResolvedOpaqueTy<'tcx>>,\n+    crate opaque_type_values: VecMap<OpaqueTypeKey<'tcx>, Ty<'tcx>>,\n }\n \n /// A collection of region constraints that must be satisfied for the\n@@ -1292,10 +1292,10 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n \n                         let opaque_type_key =\n                             OpaqueTypeKey { def_id: opaque_def_id, substs: opaque_decl.substs };\n-                        let opaque_defn_ty = match concrete_opaque_types\n+                        let concrete_ty = match concrete_opaque_types\n                             .iter()\n                             .find(|(opaque_type_key, _)| opaque_type_key.def_id == opaque_def_id)\n-                            .map(|(_, resolved_opaque_ty)| resolved_opaque_ty)\n+                            .map(|(_, concrete_ty)| concrete_ty)\n                         {\n                             None => {\n                                 if !concrete_is_opaque {\n@@ -1309,17 +1309,16 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                                 }\n                                 continue;\n                             }\n-                            Some(opaque_defn_ty) => opaque_defn_ty,\n+                            Some(concrete_ty) => concrete_ty,\n                         };\n-                        debug!(\"opaque_defn_ty = {:?}\", opaque_defn_ty);\n-                        let subst_opaque_defn_ty =\n-                            opaque_defn_ty.concrete_type.subst(tcx, opaque_decl.substs);\n+                        debug!(\"concrete_ty = {:?}\", concrete_ty);\n+                        let subst_opaque_defn_ty = concrete_ty.subst(tcx, opaque_decl.substs);\n                         let renumbered_opaque_defn_ty =\n                             renumber::renumber_regions(infcx, subst_opaque_defn_ty);\n \n                         debug!(\n                             \"eq_opaque_type_and_type: concrete_ty={:?}={:?} opaque_defn_ty={:?}\",\n-                            opaque_decl.concrete_ty, resolved_ty, renumbered_opaque_defn_ty,\n+                            concrete_ty, resolved_ty, renumbered_opaque_defn_ty,\n                         );\n \n                         if !concrete_is_opaque {\n@@ -1330,13 +1329,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                                     .at(&ObligationCause::dummy(), param_env)\n                                     .eq(opaque_decl.concrete_ty, renumbered_opaque_defn_ty)?,\n                             );\n-                            opaque_type_values.insert(\n-                                opaque_type_key,\n-                                ty::ResolvedOpaqueTy {\n-                                    concrete_type: renumbered_opaque_defn_ty,\n-                                    substs: opaque_decl.substs,\n-                                },\n-                            );\n+                            opaque_type_values.insert(opaque_type_key, renumbered_opaque_defn_ty);\n                         } else {\n                             // We're using an opaque `impl Trait` type without\n                             // 'revealing' it. For example, code like this:"}, {"sha": "f0388444d6bfb1a758175e6f8032c36dfb892d7e", "filename": "compiler/rustc_typeck/src/check/writeback.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7294f49d524772cceb96ee35ee85feec2a052076/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7294f49d524772cceb96ee35ee85feec2a052076/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs?ref=7294f49d524772cceb96ee35ee85feec2a052076", "patch": "@@ -522,24 +522,21 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n                 // in some other location, or we'll end up emitting an error due\n                 // to the lack of defining usage\n                 if !skip_add {\n-                    let new = ty::ResolvedOpaqueTy {\n-                        concrete_type: definition_ty,\n-                        substs: opaque_defn.substs,\n-                    };\n-\n                     let opaque_type_key = OpaqueTypeKey { def_id, substs: opaque_defn.substs };\n-                    let old =\n-                        self.typeck_results.concrete_opaque_types.insert(opaque_type_key, new);\n-                    if let Some(old) = old {\n-                        if old.concrete_type != definition_ty || old.substs != opaque_defn.substs {\n+                    let old_concrete_ty = self\n+                        .typeck_results\n+                        .concrete_opaque_types\n+                        .insert(opaque_type_key, definition_ty);\n+                    if let Some(old_concrete_ty) = old_concrete_ty {\n+                        if old_concrete_ty != definition_ty {\n                             span_bug!(\n                                 span,\n                                 \"`visit_opaque_types` tried to write different types for the same \\\n                                  opaque type: {:?}, {:?}, {:?}, {:?}\",\n                                 def_id,\n                                 definition_ty,\n                                 opaque_defn,\n-                                old,\n+                                old_concrete_ty,\n                             );\n                         }\n                     }"}, {"sha": "032188b21211b284c38979aad644bf25b12dfebc", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 12, "deletions": 18, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/7294f49d524772cceb96ee35ee85feec2a052076/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7294f49d524772cceb96ee35ee85feec2a052076/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=7294f49d524772cceb96ee35ee85feec2a052076", "patch": "@@ -10,9 +10,7 @@ use rustc_hir::{HirId, Node};\n use rustc_middle::hir::map::Map;\n use rustc_middle::ty::subst::{GenericArgKind, InternalSubsts};\n use rustc_middle::ty::util::IntTypeExt;\n-use rustc_middle::ty::{\n-    self, DefIdTree, OpaqueTypeKey, ResolvedOpaqueTy, Ty, TyCtxt, TypeFoldable,\n-};\n+use rustc_middle::ty::{self, DefIdTree, OpaqueTypeKey, Ty, TyCtxt, TypeFoldable};\n use rustc_span::symbol::Ident;\n use rustc_span::{Span, DUMMY_SP};\n \n@@ -353,7 +351,7 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                         &tcx.mir_borrowck(owner.expect_local()).concrete_opaque_types,\n                         def_id.to_def_id(),\n                     )\n-                    .map(|opaque| opaque.concrete_type)\n+                    .map(|&(_, concrete_ty)| concrete_ty)\n                     .unwrap_or_else(|| {\n                         tcx.sess.delay_span_bug(\n                             DUMMY_SP,\n@@ -531,14 +529,13 @@ fn find_opaque_ty_constraints(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Ty<'_> {\n                 return;\n             }\n             // Use borrowck to get the type with unerased regions.\n-            let ty = find_concrete_ty_from_def_id(\n-                &self.tcx.mir_borrowck(def_id).concrete_opaque_types,\n-                self.def_id,\n-            );\n-            if let Some(ty::ResolvedOpaqueTy { concrete_type, substs }) = ty {\n+            let concrete_opaque_types = &self.tcx.mir_borrowck(def_id).concrete_opaque_types;\n+            if let Some((opaque_type_key, concrete_type)) =\n+                find_concrete_ty_from_def_id(concrete_opaque_types, self.def_id)\n+            {\n                 debug!(\n                     \"find_opaque_ty_constraints: found constraint for `{:?}` at `{:?}`: {:?}\",\n-                    self.def_id, def_id, ty,\n+                    self.def_id, def_id, concrete_type,\n                 );\n \n                 // FIXME(oli-obk): trace the actual span from inference to improve errors.\n@@ -549,7 +546,7 @@ fn find_opaque_ty_constraints(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Ty<'_> {\n                 // using `delay_span_bug`, just in case `wfcheck` slips up.\n                 let opaque_generics = self.tcx.generics_of(self.def_id);\n                 let mut used_params: FxHashSet<_> = FxHashSet::default();\n-                for (i, arg) in substs.iter().enumerate() {\n+                for (i, arg) in opaque_type_key.substs.iter().enumerate() {\n                     let arg_is_param = match arg.unpack() {\n                         GenericArgKind::Type(ty) => matches!(ty.kind(), ty::Param(_)),\n                         GenericArgKind::Lifetime(lt) => {\n@@ -710,7 +707,7 @@ fn let_position_impl_trait_type(tcx: TyCtxt<'_>, opaque_ty_id: LocalDefId) -> Ty\n     let owner_typeck_results = tcx.typeck(scope_def_id);\n     let concrete_ty =\n         find_concrete_ty_from_def_id(&owner_typeck_results.concrete_opaque_types, opaque_ty_def_id)\n-            .map(|opaque| opaque.concrete_type)\n+            .map(|&(_, concrete_ty)| concrete_ty)\n             .unwrap_or_else(|| {\n                 tcx.sess.delay_span_bug(\n                     DUMMY_SP,\n@@ -808,11 +805,8 @@ fn check_feature_inherent_assoc_ty(tcx: TyCtxt<'_>, span: Span) {\n }\n \n fn find_concrete_ty_from_def_id<'tcx>(\n-    concrete_opaque_types: &'tcx VecMap<OpaqueTypeKey<'tcx>, ResolvedOpaqueTy<'tcx>>,\n+    concrete_opaque_types: &'tcx VecMap<OpaqueTypeKey<'tcx>, Ty<'tcx>>,\n     def_id: DefId,\n-) -> Option<&'tcx ResolvedOpaqueTy<'tcx>> {\n-    concrete_opaque_types\n-        .iter()\n-        .find(|(opaque_type_key, _)| opaque_type_key.def_id == def_id)\n-        .map(|(_, resolved_opaque_ty)| resolved_opaque_ty)\n+) -> Option<&'tcx (OpaqueTypeKey<'tcx>, Ty<'tcx>)> {\n+    concrete_opaque_types.iter().find(|(opaque_type_key, _)| opaque_type_key.def_id == def_id)\n }"}]}