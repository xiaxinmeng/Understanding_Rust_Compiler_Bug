{"sha": "29df39ba8cc8a3591cf5c9c098f37243b783ca3e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5ZGYzOWJhOGNjOGEzNTkxY2Y1YzljMDk4ZjM3MjQzYjc4M2NhM2U=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-22T21:54:41Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-22T21:54:41Z"}, "message": "remove UbExperimental variant", "tree": {"sha": "e5fa45f90e234f9415f7263382756d54c6138700", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e5fa45f90e234f9415f7263382756d54c6138700"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/29df39ba8cc8a3591cf5c9c098f37243b783ca3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/29df39ba8cc8a3591cf5c9c098f37243b783ca3e", "html_url": "https://github.com/rust-lang/rust/commit/29df39ba8cc8a3591cf5c9c098f37243b783ca3e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/29df39ba8cc8a3591cf5c9c098f37243b783ca3e/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1e81ef234ff5c2e0e3a69cb4e8e5f5b0fe1fd83", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1e81ef234ff5c2e0e3a69cb4e8e5f5b0fe1fd83", "html_url": "https://github.com/rust-lang/rust/commit/d1e81ef234ff5c2e0e3a69cb4e8e5f5b0fe1fd83"}], "stats": {"total": 7, "additions": 2, "deletions": 5}, "files": [{"sha": "f665881ae4c22390b5eb653e352cb0406f67192c", "filename": "src/librustc/mir/interpret/error.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/29df39ba8cc8a3591cf5c9c098f37243b783ca3e/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29df39ba8cc8a3591cf5c9c098f37243b783ca3e/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs?ref=29df39ba8cc8a3591cf5c9c098f37243b783ca3e", "patch": "@@ -319,8 +319,6 @@ impl fmt::Debug for InvalidProgramInfo<'_> {\n pub enum UndefinedBehaviorInfo {\n     /// Free-form case. Only for errors that are never caught!\n     Ub(String),\n-    /// Free-form case for experimental UB. Only for errors that are never caught!\n-    UbExperimental(String),\n     /// Unreachable code was executed.\n     Unreachable,\n     /// An enum discriminant was set to a value which was outside the range of valid values.\n@@ -381,7 +379,7 @@ impl fmt::Debug for UndefinedBehaviorInfo {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         use UndefinedBehaviorInfo::*;\n         match self {\n-            Ub(msg) | UbExperimental(msg) => write!(f, \"{}\", msg),\n+            Ub(msg) => write!(f, \"{}\", msg),\n             Unreachable => write!(f, \"entering unreachable code\"),\n             InvalidDiscriminant(val) => write!(f, \"encountering invalid enum discriminant {}\", val),\n             BoundsCheckFailed { ref len, ref index } => write!(\n@@ -563,8 +561,7 @@ impl InterpError<'_> {\n             InterpError::MachineStop(_)\n             | InterpError::Unsupported(UnsupportedOpInfo::Unsupported(_))\n             | InterpError::UndefinedBehavior(UndefinedBehaviorInfo::ValidationFailure(_))\n-            | InterpError::UndefinedBehavior(UndefinedBehaviorInfo::Ub(_))\n-            | InterpError::UndefinedBehavior(UndefinedBehaviorInfo::UbExperimental(_)) => true,\n+            | InterpError::UndefinedBehavior(UndefinedBehaviorInfo::Ub(_)) => true,\n             _ => false,\n         }\n     }"}]}