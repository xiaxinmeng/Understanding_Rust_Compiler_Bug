{"sha": "cd89978d869587fc025286b0326116819d5b78e4", "node_id": "C_kwDOAAsO6NoAKGNkODk5NzhkODY5NTg3ZmMwMjUyODZiMDMyNjExNjgxOWQ1Yjc4ZTQ", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-07-21T15:45:35Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-07-21T15:45:35Z"}, "message": "Generalize same_type_modulo_infer", "tree": {"sha": "77a3750e9700b47311593eb63396cdf3da7bae59", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77a3750e9700b47311593eb63396cdf3da7bae59"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd89978d869587fc025286b0326116819d5b78e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd89978d869587fc025286b0326116819d5b78e4", "html_url": "https://github.com/rust-lang/rust/commit/cd89978d869587fc025286b0326116819d5b78e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd89978d869587fc025286b0326116819d5b78e4/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8926dac54911e9382763876dc3a8e7a4ae50e270", "url": "https://api.github.com/repos/rust-lang/rust/commits/8926dac54911e9382763876dc3a8e7a4ae50e270", "html_url": "https://github.com/rust-lang/rust/commit/8926dac54911e9382763876dc3a8e7a4ae50e270"}], "stats": {"total": 39, "additions": 34, "deletions": 5}, "files": [{"sha": "93f94bd497a55fd6e15326d5694f156a11d5aa30", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 34, "deletions": 3, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/cd89978d869587fc025286b0326116819d5b78e4/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd89978d869587fc025286b0326116819d5b78e4/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=cd89978d869587fc025286b0326116819d5b78e4", "patch": "@@ -2670,8 +2670,18 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     /// Float types, respectively). When comparing two ADTs, these rules apply recursively.\n     pub fn same_type_modulo_infer(&self, a: Ty<'tcx>, b: Ty<'tcx>) -> bool {\n         let (a, b) = self.resolve_vars_if_possible((a, b));\n-        match (&a.kind(), &b.kind()) {\n-            (&ty::Adt(did_a, substs_a), &ty::Adt(did_b, substs_b)) => {\n+        match (a.kind(), b.kind()) {\n+            (&ty::Adt(def_a, substs_a), &ty::Adt(def_b, substs_b)) => {\n+                if def_a != def_b {\n+                    return false;\n+                }\n+\n+                substs_a\n+                    .types()\n+                    .zip(substs_b.types())\n+                    .all(|(a, b)| self.same_type_modulo_infer(a, b))\n+            }\n+            (&ty::FnDef(did_a, substs_a), &ty::FnDef(did_b, substs_b)) => {\n                 if did_a != did_b {\n                     return false;\n                 }\n@@ -2694,7 +2704,28 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             | (&ty::Infer(ty::InferTy::TyVar(_)), _)\n             | (_, &ty::Infer(ty::InferTy::TyVar(_))) => true,\n             (&ty::Ref(_, ty_a, mut_a), &ty::Ref(_, ty_b, mut_b)) => {\n-                mut_a == mut_b && self.same_type_modulo_infer(*ty_a, *ty_b)\n+                mut_a == mut_b && self.same_type_modulo_infer(ty_a, ty_b)\n+            }\n+            (&ty::RawPtr(a), &ty::RawPtr(b)) => {\n+                a.mutbl == b.mutbl && self.same_type_modulo_infer(a.ty, b.ty)\n+            }\n+            (&ty::Slice(a), &ty::Slice(b)) => self.same_type_modulo_infer(a, b),\n+            (&ty::Array(a_ty, a_ct), &ty::Array(b_ty, b_ct)) => {\n+                self.same_type_modulo_infer(a_ty, b_ty) && a_ct == b_ct\n+            }\n+            (&ty::Tuple(a), &ty::Tuple(b)) => {\n+                if a.len() != b.len() {\n+                    return false;\n+                }\n+                std::iter::zip(a.iter(), b.iter()).all(|(a, b)| self.same_type_modulo_infer(a, b))\n+            }\n+            (&ty::FnPtr(a), &ty::FnPtr(b)) => {\n+                let a = a.skip_binder().inputs_and_output;\n+                let b = b.skip_binder().inputs_and_output;\n+                if a.len() != b.len() {\n+                    return false;\n+                }\n+                std::iter::zip(a.iter(), b.iter()).all(|(a, b)| self.same_type_modulo_infer(a, b))\n             }\n             // FIXME(compiler-errors): This needs to be generalized more\n             _ => a == b,"}, {"sha": "a9284535e4dc4221a6c1faf198fc113706f2ec5c", "filename": "src/test/ui/issues/issue-59494.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd89978d869587fc025286b0326116819d5b78e4/src%2Ftest%2Fui%2Fissues%2Fissue-59494.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd89978d869587fc025286b0326116819d5b78e4/src%2Ftest%2Fui%2Fissues%2Fissue-59494.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-59494.stderr?ref=cd89978d869587fc025286b0326116819d5b78e4", "patch": "@@ -7,8 +7,6 @@ LL |     let t8 = t8n(t7, t7p(f, g));\n    |              required by a bound introduced by this call\n    |\n    = help: the trait `Fn<(_,)>` is not implemented for `impl Fn(((_, _), _))`\n-   = note: expected a closure with arguments `(((_, _), _),)`\n-              found a closure with arguments `(_,)`\n note: required by a bound in `t8n`\n   --> $DIR/issue-59494.rs:5:45\n    |"}]}