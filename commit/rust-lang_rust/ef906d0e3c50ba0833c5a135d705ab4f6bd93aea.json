{"sha": "ef906d0e3c50ba0833c5a135d705ab4f6bd93aea", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmOTA2ZDBlM2M1MGJhMDgzM2M1YTEzNWQ3MDVhYjRmNmJkOTNhZWE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-09-22T02:44:28Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-09-22T02:44:28Z"}, "message": "Auto merge of #64666 - Centril:rollup-tp98vlr, r=Centril\n\nRollup of 9 pull requests\n\nSuccessful merges:\n\n - #63907 (Add explanation to type mismatch involving type params and assoc types)\n - #64615 (rustbuild: Turn down compression on exe installers)\n - #64617 (rustbuild: Turn down compression on msi installers)\n - #64618 (rustbuild: Improve output of `dist` step)\n - #64619 (Fixes #63962. Hint about missing tuple parentheses in patterns)\n - #64634 (Update to LLVM 9.0.0)\n - #64635 (Allow using fn pointers in const fn with unleash miri)\n - #64660 (unify errors for tuple/struct variants)\n - #64664 (fully remove AstBuilder)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "3cb11a98eae84b5d69bf515178f96a999276ed76", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3cb11a98eae84b5d69bf515178f96a999276ed76"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef906d0e3c50ba0833c5a135d705ab4f6bd93aea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef906d0e3c50ba0833c5a135d705ab4f6bd93aea", "html_url": "https://github.com/rust-lang/rust/commit/ef906d0e3c50ba0833c5a135d705ab4f6bd93aea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef906d0e3c50ba0833c5a135d705ab4f6bd93aea/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f", "html_url": "https://github.com/rust-lang/rust/commit/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f"}, {"sha": "f0e69ffb8d4385aa7daf24e2cc5088e0e5dd4db0", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0e69ffb8d4385aa7daf24e2cc5088e0e5dd4db0", "html_url": "https://github.com/rust-lang/rust/commit/f0e69ffb8d4385aa7daf24e2cc5088e0e5dd4db0"}], "stats": {"total": 707, "additions": 638, "deletions": 69}, "files": [{"sha": "3ff5af78097fabfe271d45b0924177dcecdacd12", "filename": ".gitmodules", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef906d0e3c50ba0833c5a135d705ab4f6bd93aea/.gitmodules", "raw_url": "https://github.com/rust-lang/rust/raw/ef906d0e3c50ba0833c5a135d705ab4f6bd93aea/.gitmodules", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitmodules?ref=ef906d0e3c50ba0833c5a135d705ab4f6bd93aea", "patch": "@@ -43,7 +43,7 @@\n [submodule \"src/llvm-project\"]\n \tpath = src/llvm-project\n \turl = https://github.com/rust-lang/llvm-project.git\n-\tbranch = rustc/9.0-2019-07-12\n+\tbranch = rustc/9.0-2019-09-19\n [submodule \"src/doc/embedded-book\"]\n \tpath = src/doc/embedded-book\n \turl = https://github.com/rust-embedded/book.git"}, {"sha": "d9dff77a30e6bd0fdd9c5951ffab3e5ca1bb43ac", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 47, "deletions": 19, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/ef906d0e3c50ba0833c5a135d705ab4f6bd93aea/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef906d0e3c50ba0833c5a135d705ab4f6bd93aea/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=ef906d0e3c50ba0833c5a135d705ab4f6bd93aea", "patch": "@@ -18,7 +18,7 @@ use build_helper::{output, t};\n \n use crate::{Compiler, Mode, LLVM_TOOLS};\n use crate::channel;\n-use crate::util::{is_dylib, exe};\n+use crate::util::{is_dylib, exe, timeit};\n use crate::builder::{Builder, RunConfig, ShouldRun, Step};\n use crate::compile;\n use crate::tool::{self, Tool};\n@@ -91,14 +91,15 @@ impl Step for Docs {\n \n         let name = pkgname(builder, \"rust-docs\");\n \n-        builder.info(&format!(\"Dist docs ({})\", host));\n         if !builder.config.docs {\n-            builder.info(\"\\tskipping - docs disabled\");\n             return distdir(builder).join(format!(\"{}-{}.tar.gz\", name, host));\n         }\n \n         builder.default_doc(None);\n \n+        builder.info(&format!(\"Dist docs ({})\", host));\n+        let _time = timeit(builder);\n+\n         let image = tmpdir(builder).join(format!(\"{}-{}-image\", name, host));\n         let _ = fs::remove_dir_all(&image);\n \n@@ -151,9 +152,7 @@ impl Step for RustcDocs {\n \n         let name = pkgname(builder, \"rustc-docs\");\n \n-        builder.info(&format!(\"Dist compiler docs ({})\", host));\n         if !builder.config.compiler_docs {\n-            builder.info(\"\\tskipping - compiler docs disabled\");\n             return distdir(builder).join(format!(\"{}-{}.tar.gz\", name, host));\n         }\n \n@@ -179,6 +178,9 @@ impl Step for RustcDocs {\n            .arg(\"--component-name=rustc-docs\")\n            .arg(\"--legacy-manifest-dirs=rustlib,cargo\")\n            .arg(\"--bulk-dirs=share/doc/rust/html\");\n+\n+        builder.info(&format!(\"Dist compiler docs ({})\", host));\n+        let _time = timeit(builder);\n         builder.run(&mut cmd);\n         builder.remove_dir(&image);\n \n@@ -350,6 +352,7 @@ impl Step for Mingw {\n         }\n \n         builder.info(&format!(\"Dist mingw ({})\", host));\n+        let _time = timeit(builder);\n         let name = pkgname(builder, \"rust-mingw\");\n         let image = tmpdir(builder).join(format!(\"{}-{}-image\", name, host));\n         let _ = fs::remove_dir_all(&image);\n@@ -403,7 +406,6 @@ impl Step for Rustc {\n         let compiler = self.compiler;\n         let host = self.compiler.host;\n \n-        builder.info(&format!(\"Dist rustc stage{} ({})\", compiler.stage, host));\n         let name = pkgname(builder, \"rustc\");\n         let image = tmpdir(builder).join(format!(\"{}-{}-image\", name, host));\n         let _ = fs::remove_dir_all(&image);\n@@ -460,6 +462,9 @@ impl Step for Rustc {\n            .arg(format!(\"--package-name={}-{}\", name, host))\n            .arg(\"--component-name=rustc\")\n            .arg(\"--legacy-manifest-dirs=rustlib,cargo\");\n+\n+        builder.info(&format!(\"Dist rustc stage{} ({})\", compiler.stage, host));\n+        let _time = timeit(builder);\n         builder.run(&mut cmd);\n         builder.remove_dir(&image);\n         builder.remove_dir(&overlay);\n@@ -662,8 +667,6 @@ impl Step for Std {\n         let target = self.target;\n \n         let name = pkgname(builder, \"rust-std\");\n-        builder.info(&format!(\"Dist std stage{} ({} -> {})\",\n-            compiler.stage, &compiler.host, target));\n \n         // The only true set of target libraries came from the build triple, so\n         // let's reduce redundant work by only producing archives from that host.\n@@ -714,6 +717,10 @@ impl Step for Std {\n            .arg(format!(\"--package-name={}-{}\", name, target))\n            .arg(format!(\"--component-name=rust-std-{}\", target))\n            .arg(\"--legacy-manifest-dirs=rustlib,cargo\");\n+\n+        builder.info(&format!(\"Dist std stage{} ({} -> {})\",\n+            compiler.stage, &compiler.host, target));\n+        let _time = timeit(builder);\n         builder.run(&mut cmd);\n         builder.remove_dir(&image);\n         distdir(builder).join(format!(\"{}-{}.tar.gz\", name, target))\n@@ -754,11 +761,9 @@ impl Step for Analysis {\n         let compiler = self.compiler;\n         let target = self.target;\n         assert!(builder.config.extended);\n-        builder.info(\"Dist analysis\");\n         let name = pkgname(builder, \"rust-analysis\");\n \n         if &compiler.host != builder.config.build {\n-            builder.info(\"\\tskipping, not a build host\");\n             return distdir(builder).join(format!(\"{}-{}.tar.gz\", name, target));\n         }\n \n@@ -786,6 +791,9 @@ impl Step for Analysis {\n            .arg(format!(\"--package-name={}-{}\", name, target))\n            .arg(format!(\"--component-name=rust-analysis-{}\", target))\n            .arg(\"--legacy-manifest-dirs=rustlib,cargo\");\n+\n+        builder.info(\"Dist analysis\");\n+        let _time = timeit(builder);\n         builder.run(&mut cmd);\n         builder.remove_dir(&image);\n         distdir(builder).join(format!(\"{}-{}.tar.gz\", name, target))\n@@ -874,8 +882,6 @@ impl Step for Src {\n \n     /// Creates the `rust-src` installer component\n     fn run(self, builder: &Builder<'_>) -> PathBuf {\n-        builder.info(\"Dist src\");\n-\n         let name = pkgname(builder, \"rust-src\");\n         let image = tmpdir(builder).join(format!(\"{}-image\", name));\n         let _ = fs::remove_dir_all(&image);\n@@ -930,6 +936,9 @@ impl Step for Src {\n            .arg(format!(\"--package-name={}\", name))\n            .arg(\"--component-name=rust-src\")\n            .arg(\"--legacy-manifest-dirs=rustlib,cargo\");\n+\n+        builder.info(\"Dist src\");\n+        let _time = timeit(builder);\n         builder.run(&mut cmd);\n \n         builder.remove_dir(&image);\n@@ -957,8 +966,6 @@ impl Step for PlainSourceTarball {\n \n     /// Creates the plain source tarball\n     fn run(self, builder: &Builder<'_>) -> PathBuf {\n-        builder.info(\"Create plain source tarball\");\n-\n         // Make sure that the root folder of tarball has the correct name\n         let plain_name = format!(\"{}-src\", pkgname(builder, \"rustc\"));\n         let plain_dst_src = tmpdir(builder).join(&plain_name);\n@@ -1020,6 +1027,9 @@ impl Step for PlainSourceTarball {\n            .arg(\"--output\").arg(&tarball)\n            .arg(\"--work-dir=.\")\n            .current_dir(tmpdir(builder));\n+\n+        builder.info(\"Create plain source tarball\");\n+        let _time = timeit(builder);\n         builder.run(&mut cmd);\n         distdir(builder).join(&format!(\"{}.tar.gz\", plain_name))\n     }\n@@ -1073,7 +1083,6 @@ impl Step for Cargo {\n         let compiler = self.compiler;\n         let target = self.target;\n \n-        builder.info(&format!(\"Dist cargo stage{} ({})\", compiler.stage, target));\n         let src = builder.src.join(\"src/tools/cargo\");\n         let etc = src.join(\"src/etc\");\n         let release_num = builder.release_num(\"cargo\");\n@@ -1126,6 +1135,9 @@ impl Step for Cargo {\n            .arg(format!(\"--package-name={}-{}\", name, target))\n            .arg(\"--component-name=cargo\")\n            .arg(\"--legacy-manifest-dirs=rustlib,cargo\");\n+\n+        builder.info(&format!(\"Dist cargo stage{} ({})\", compiler.stage, target));\n+        let _time = timeit(builder);\n         builder.run(&mut cmd);\n         distdir(builder).join(format!(\"{}-{}.tar.gz\", name, target))\n     }\n@@ -1161,7 +1173,6 @@ impl Step for Rls {\n         let target = self.target;\n         assert!(builder.config.extended);\n \n-        builder.info(&format!(\"Dist RLS stage{} ({})\", compiler.stage, target));\n         let src = builder.src.join(\"src/tools/rls\");\n         let release_num = builder.release_num(\"rls\");\n         let name = pkgname(builder, \"rls\");\n@@ -1210,6 +1221,8 @@ impl Step for Rls {\n            .arg(\"--legacy-manifest-dirs=rustlib,cargo\")\n            .arg(\"--component-name=rls-preview\");\n \n+        builder.info(&format!(\"Dist RLS stage{} ({})\", compiler.stage, target));\n+        let _time = timeit(builder);\n         builder.run(&mut cmd);\n         Some(distdir(builder).join(format!(\"{}-{}.tar.gz\", name, target)))\n     }\n@@ -1245,7 +1258,6 @@ impl Step for Clippy {\n         let target = self.target;\n         assert!(builder.config.extended);\n \n-        builder.info(&format!(\"Dist clippy stage{} ({})\", compiler.stage, target));\n         let src = builder.src.join(\"src/tools/clippy\");\n         let release_num = builder.release_num(\"clippy\");\n         let name = pkgname(builder, \"clippy\");\n@@ -1299,6 +1311,8 @@ impl Step for Clippy {\n            .arg(\"--legacy-manifest-dirs=rustlib,cargo\")\n            .arg(\"--component-name=clippy-preview\");\n \n+        builder.info(&format!(\"Dist clippy stage{} ({})\", compiler.stage, target));\n+        let _time = timeit(builder);\n         builder.run(&mut cmd);\n         Some(distdir(builder).join(format!(\"{}-{}.tar.gz\", name, target)))\n     }\n@@ -1334,7 +1348,6 @@ impl Step for Miri {\n         let target = self.target;\n         assert!(builder.config.extended);\n \n-        builder.info(&format!(\"Dist miri stage{} ({})\", compiler.stage, target));\n         let src = builder.src.join(\"src/tools/miri\");\n         let release_num = builder.release_num(\"miri\");\n         let name = pkgname(builder, \"miri\");\n@@ -1389,6 +1402,8 @@ impl Step for Miri {\n            .arg(\"--legacy-manifest-dirs=rustlib,cargo\")\n            .arg(\"--component-name=miri-preview\");\n \n+        builder.info(&format!(\"Dist miri stage{} ({})\", compiler.stage, target));\n+        let _time = timeit(builder);\n         builder.run(&mut cmd);\n         Some(distdir(builder).join(format!(\"{}-{}.tar.gz\", name, target)))\n     }\n@@ -1423,7 +1438,6 @@ impl Step for Rustfmt {\n         let compiler = self.compiler;\n         let target = self.target;\n \n-        builder.info(&format!(\"Dist Rustfmt stage{} ({})\", compiler.stage, target));\n         let src = builder.src.join(\"src/tools/rustfmt\");\n         let release_num = builder.release_num(\"rustfmt\");\n         let name = pkgname(builder, \"rustfmt\");\n@@ -1476,6 +1490,8 @@ impl Step for Rustfmt {\n            .arg(\"--legacy-manifest-dirs=rustlib,cargo\")\n            .arg(\"--component-name=rustfmt-preview\");\n \n+        builder.info(&format!(\"Dist Rustfmt stage{} ({})\", compiler.stage, target));\n+        let _time = timeit(builder);\n         builder.run(&mut cmd);\n         Some(distdir(builder).join(format!(\"{}-{}.tar.gz\", name, target)))\n     }\n@@ -1576,6 +1592,7 @@ impl Step for Extended {\n             input_tarballs.push(tarball);\n         }\n \n+        builder.info(\"building combined installer\");\n         let mut cmd = rust_installer(builder);\n         cmd.arg(\"combine\")\n             .arg(\"--product-name=Rust\")\n@@ -1587,7 +1604,9 @@ impl Step for Extended {\n             .arg(\"--legacy-manifest-dirs=rustlib,cargo\")\n             .arg(\"--input-tarballs\").arg(input_tarballs)\n             .arg(\"--non-installed-overlay\").arg(&overlay);\n+        let time = timeit(&builder);\n         builder.run(&mut cmd);\n+        drop(time);\n \n         let mut license = String::new();\n         license += &builder.read(&builder.src.join(\"COPYRIGHT\"));\n@@ -1643,6 +1662,7 @@ impl Step for Extended {\n         };\n \n         if target.contains(\"apple-darwin\") {\n+            builder.info(\"building pkg installer\");\n             let pkg = tmp.join(\"pkg\");\n             let _ = fs::remove_dir_all(&pkg);\n \n@@ -1692,6 +1712,7 @@ impl Step for Extended {\n                                                     pkgname(builder, \"rust\"),\n                                                     target)))\n                 .arg(\"--package-path\").arg(&pkg);\n+            let _time = timeit(builder);\n             builder.run(&mut cmd);\n         }\n \n@@ -1742,14 +1763,18 @@ impl Step for Extended {\n             builder.create(&exe.join(\"LICENSE.txt\"), &license);\n \n             // Generate exe installer\n+            builder.info(\"building `exe` installer with `iscc`\");\n             let mut cmd = Command::new(\"iscc\");\n             cmd.arg(\"rust.iss\")\n+                .arg(\"/Q\")\n                 .current_dir(&exe);\n             if target.contains(\"windows-gnu\") {\n                 cmd.arg(\"/dMINGW\");\n             }\n             add_env(builder, &mut cmd, target);\n+            let time = timeit(builder);\n             builder.run(&mut cmd);\n+            drop(time);\n             builder.install(&exe.join(format!(\"{}-{}.exe\", pkgname(builder, \"rust\"), target)),\n                     &distdir(builder),\n                     0o755);\n@@ -1914,6 +1939,7 @@ impl Step for Extended {\n             builder.install(&etc.join(\"gfx/banner.bmp\"), &exe, 0o644);\n             builder.install(&etc.join(\"gfx/dialogbg.bmp\"), &exe, 0o644);\n \n+            builder.info(&format!(\"building `msi` installer with {:?}\", light));\n             let filename = format!(\"{}-{}.msi\", pkgname(builder, \"rust\"), target);\n             let mut cmd = Command::new(&light);\n             cmd.arg(\"-nologo\")\n@@ -1946,6 +1972,7 @@ impl Step for Extended {\n             // ICE57 wrongly complains about the shortcuts\n             cmd.arg(\"-sice:ICE57\");\n \n+            let _time = timeit(builder);\n             builder.run(&mut cmd);\n \n             if !builder.config.dry_run {\n@@ -2114,6 +2141,7 @@ impl Step for LlvmTools {\n         }\n \n         builder.info(&format!(\"Dist LlvmTools ({})\", target));\n+        let _time = timeit(builder);\n         let src = builder.src.join(\"src/llvm-project/llvm\");\n         let name = pkgname(builder, \"llvm-tools\");\n "}, {"sha": "70648beac38b03565f77547f23542998dcce10b0", "filename": "src/etc/installer/exe/rust.iss", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ef906d0e3c50ba0833c5a135d705ab4f6bd93aea/src%2Fetc%2Finstaller%2Fexe%2Frust.iss", "raw_url": "https://github.com/rust-lang/rust/raw/ef906d0e3c50ba0833c5a135d705ab4f6bd93aea/src%2Fetc%2Finstaller%2Fexe%2Frust.iss", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Finstaller%2Fexe%2Frust.iss?ref=ef906d0e3c50ba0833c5a135d705ab4f6bd93aea", "patch": "@@ -25,9 +25,9 @@ SourceDir=.\\\n OutputBaseFilename={#CFG_PACKAGE_NAME}-{#CFG_BUILD}\n DefaultDirName={sd}\\Rust\n \n-Compression=lzma2/ultra\n-InternalCompressLevel=ultra\n-SolidCompression=true\n+Compression=lzma2/normal\n+InternalCompressLevel=normal\n+SolidCompression=no\n \n ChangesEnvironment=true\n ChangesAssociations=no"}, {"sha": "a2e378f7b1db4e1017b23e5e8aed68d99a7f9695", "filename": "src/etc/installer/msi/rust.wxs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef906d0e3c50ba0833c5a135d705ab4f6bd93aea/src%2Fetc%2Finstaller%2Fmsi%2Frust.wxs", "raw_url": "https://github.com/rust-lang/rust/raw/ef906d0e3c50ba0833c5a135d705ab4f6bd93aea/src%2Fetc%2Finstaller%2Fmsi%2Frust.wxs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Finstaller%2Fmsi%2Frust.wxs?ref=ef906d0e3c50ba0833c5a135d705ab4f6bd93aea", "patch": "@@ -152,7 +152,7 @@\n         </Upgrade>\n \n         <!-- Specifies a single cab file to be embedded in the installer's .msi. -->\n-        <MediaTemplate EmbedCab=\"yes\" CompressionLevel=\"high\" />\n+        <MediaTemplate EmbedCab=\"yes\" CompressionLevel=\"mszip\" />\n \n         <!-- Send a WM_SETTINGCHANGE message to tell processes like explorer to update their\n              environments so any new command prompts get the updated %PATH% -->"}, {"sha": "27e4d1237c252b997d124e0c321a21ab99fe5da9", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ef906d0e3c50ba0833c5a135d705ab4f6bd93aea/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef906d0e3c50ba0833c5a135d705ab4f6bd93aea/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=ef906d0e3c50ba0833c5a135d705ab4f6bd93aea", "patch": "@@ -659,11 +659,11 @@ pub struct VtableTraitAliasData<'tcx, N> {\n }\n \n /// Creates predicate obligations from the generic bounds.\n-pub fn predicates_for_generics<'tcx>(cause: ObligationCause<'tcx>,\n-                                     param_env: ty::ParamEnv<'tcx>,\n-                                     generic_bounds: &ty::InstantiatedPredicates<'tcx>)\n-                                     -> PredicateObligations<'tcx>\n-{\n+pub fn predicates_for_generics<'tcx>(\n+    cause: ObligationCause<'tcx>,\n+    param_env: ty::ParamEnv<'tcx>,\n+    generic_bounds: &ty::InstantiatedPredicates<'tcx>,\n+) -> PredicateObligations<'tcx> {\n     util::predicates_for_generics(cause, 0, param_env, generic_bounds)\n }\n "}, {"sha": "3e5520dd46557af9c9112fca61b3f4b81135e632", "filename": "src/librustc/traits/util.rs", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/ef906d0e3c50ba0833c5a135d705ab4f6bd93aea/src%2Flibrustc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef906d0e3c50ba0833c5a135d705ab4f6bd93aea/src%2Flibrustc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Futil.rs?ref=ef906d0e3c50ba0833c5a135d705ab4f6bd93aea", "patch": "@@ -513,20 +513,19 @@ pub fn impl_trait_ref_and_oblig<'a, 'tcx>(\n }\n \n /// See [`super::obligations_for_generics`].\n-pub fn predicates_for_generics<'tcx>(cause: ObligationCause<'tcx>,\n-                                     recursion_depth: usize,\n-                                     param_env: ty::ParamEnv<'tcx>,\n-                                     generic_bounds: &ty::InstantiatedPredicates<'tcx>)\n-                                     -> Vec<PredicateObligation<'tcx>>\n-{\n-    debug!(\"predicates_for_generics(generic_bounds={:?})\",\n-           generic_bounds);\n-\n-    generic_bounds.predicates.iter().map(|predicate| {\n-        Obligation { cause: cause.clone(),\n-                     recursion_depth,\n-                     param_env,\n-                     predicate: predicate.clone() }\n+pub fn predicates_for_generics<'tcx>(\n+    cause: ObligationCause<'tcx>,\n+    recursion_depth: usize,\n+    param_env: ty::ParamEnv<'tcx>,\n+    generic_bounds: &ty::InstantiatedPredicates<'tcx>,\n+) -> Vec<PredicateObligation<'tcx>> {\n+    debug!(\"predicates_for_generics(generic_bounds={:?})\", generic_bounds);\n+\n+    generic_bounds.predicates.iter().map(|predicate| Obligation {\n+        cause: cause.clone(),\n+        recursion_depth,\n+        param_env,\n+        predicate: predicate.clone(),\n     }).collect()\n }\n "}, {"sha": "125c48f5f31d738baad7209eceda2cdaae924773", "filename": "src/librustc/ty/error.rs", "status": "modified", "additions": 92, "deletions": 4, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/ef906d0e3c50ba0833c5a135d705ab4f6bd93aea/src%2Flibrustc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef906d0e3c50ba0833c5a135d705ab4f6bd93aea/src%2Flibrustc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ferror.rs?ref=ef906d0e3c50ba0833c5a135d705ab4f6bd93aea", "patch": "@@ -275,10 +275,10 @@ impl<'tcx> TyCtxt<'tcx> {\n                                  `.await`ing on both of them\");\n                     }\n                 }\n-                if let (ty::Infer(ty::IntVar(_)), ty::Float(_)) =\n-                       (&values.found.sty, &values.expected.sty) // Issue #53280\n-                {\n-                    if let Ok(snippet) = self.sess.source_map().span_to_snippet(sp) {\n+                match (&values.expected.sty, &values.found.sty) {\n+                    (ty::Float(_), ty::Infer(ty::IntVar(_))) => if let Ok( // Issue #53280\n+                        snippet,\n+                    ) = self.sess.source_map().span_to_snippet(sp) {\n                         if snippet.chars().all(|c| c.is_digit(10) || c == '-' || c == '_') {\n                             db.span_suggestion(\n                                 sp,\n@@ -287,8 +287,96 @@ impl<'tcx> TyCtxt<'tcx> {\n                                 Applicability::MachineApplicable\n                             );\n                         }\n+                    },\n+                    (ty::Param(_), ty::Param(_)) => {\n+                        db.note(\"a type parameter was expected, but a different one was found; \\\n+                                 you might be missing a type parameter or trait bound\");\n+                        db.note(\"for more information, visit \\\n+                                 https://doc.rust-lang.org/book/ch10-02-traits.html\\\n+                                 #traits-as-parameters\");\n+                    }\n+                    (ty::Projection(_), ty::Projection(_)) => {\n+                        db.note(\"an associated type was expected, but a different one was found\");\n+                    }\n+                    (ty::Param(_), ty::Projection(_)) | (ty::Projection(_), ty::Param(_)) => {\n+                        db.note(\"you might be missing a type parameter or trait bound\");\n+                    }\n+                    (ty::Param(_), _) | (_, ty::Param(_)) => {\n+                        db.help(\"type parameters must be constrained to match other types\");\n+                        if self.sess.teach(&db.get_code().unwrap()) {\n+                            db.help(\"given a type parameter `T` and a method `foo`:\n+```\n+trait Trait<T> { fn foo(&self) -> T; }\n+```\n+the only ways to implement method `foo` are:\n+- constrain `T` with an explicit type:\n+```\n+impl Trait<String> for X {\n+    fn foo(&self) -> String { String::new() }\n+}\n+```\n+- add a trait bound to `T` and call a method on that trait that returns `Self`:\n+```\n+impl<T: std::default::Default> Trait<T> for X {\n+    fn foo(&self) -> T { <T as std::default::Default>::default() }\n+}\n+```\n+- change `foo` to return an argument of type `T`:\n+```\n+impl<T> Trait<T> for X {\n+    fn foo(&self, x: T) -> T { x }\n+}\n+```\");\n+                        }\n+                        db.note(\"for more information, visit \\\n+                                 https://doc.rust-lang.org/book/ch10-02-traits.html\\\n+                                 #traits-as-parameters\");\n+                    }\n+                    (ty::Projection(_), _) => {\n+                        db.note(&format!(\n+                            \"consider constraining the associated type `{}` to `{}` or calling a \\\n+                             method that returns `{}`\",\n+                            values.expected,\n+                            values.found,\n+                            values.expected,\n+                        ));\n+                        if self.sess.teach(&db.get_code().unwrap()) {\n+                            db.help(\"given an associated type `T` and a method `foo`:\n+```\n+trait Trait {\n+    type T;\n+    fn foo(&self) -> Self::T;\n+}\n+```\n+the only way of implementing method `foo` is to constrain `T` with an explicit associated type:\n+```\n+impl Trait for X {\n+    type T = String;\n+    fn foo(&self) -> Self::T { String::new() }\n+}\n+```\");\n+                        }\n+                        db.note(\"for more information, visit \\\n+                                 https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\");\n+                    }\n+                    (_, ty::Projection(_)) => {\n+                        db.note(&format!(\n+                            \"consider constraining the associated type `{}` to `{}`\",\n+                            values.found,\n+                            values.expected,\n+                        ));\n+                        db.note(\"for more information, visit \\\n+                                 https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\");\n                     }\n+                    _ => {}\n                 }\n+                debug!(\n+                    \"note_and_explain_type_err expected={:?} ({:?}) found={:?} ({:?})\",\n+                    values.expected,\n+                    values.expected.sty,\n+                    values.found,\n+                    values.found.sty,\n+                );\n             },\n             CyclicTy(ty) => {\n                 // Watch out for various cases of cyclic types and try to explain."}, {"sha": "795721f3b3f28637a1fd308ca3f6503ead91764a", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ef906d0e3c50ba0833c5a135d705ab4f6bd93aea/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef906d0e3c50ba0833c5a135d705ab4f6bd93aea/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=ef906d0e3c50ba0833c5a135d705ab4f6bd93aea", "patch": "@@ -1407,10 +1407,17 @@ impl<'a, 'tcx> Visitor<'tcx> for Checker<'a, 'tcx> {\n                     }\n                 }\n                 ty::FnPtr(_) => {\n-                    if self.mode.requires_const_checking() {\n+                    let unleash_miri = self\n+                        .tcx\n+                        .sess\n+                        .opts\n+                        .debugging_opts\n+                        .unleash_the_miri_inside_of_you;\n+                    if self.mode.requires_const_checking() && !unleash_miri {\n                         let mut err = self.tcx.sess.struct_span_err(\n                             self.span,\n-                            &format!(\"function pointers are not allowed in const fn\"));\n+                            \"function pointers are not allowed in const fn\"\n+                        );\n                         err.emit();\n                     }\n                 }"}, {"sha": "cd1689f21cc6e3d650089de0acf4d953cd8b17a6", "filename": "src/librustc_resolve/late/diagnostics.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ef906d0e3c50ba0833c5a135d705ab4f6bd93aea/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef906d0e3c50ba0833c5a135d705ab4f6bd93aea/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs?ref=ef906d0e3c50ba0833c5a135d705ab4f6bd93aea", "patch": "@@ -445,6 +445,12 @@ impl<'a> LateResolutionVisitor<'a, '_> {\n             (Res::Def(DefKind::Ctor(_, CtorKind::Fictive), _), _) if ns == ValueNS => {\n                 bad_struct_syntax_suggestion();\n             }\n+            (Res::Def(DefKind::Ctor(_, CtorKind::Fn), _), _) if ns == ValueNS => {\n+                err.span_label(\n+                    span,\n+                    format!(\"did you mean `{} ( /* fields */ )`?\", path_str),\n+                );\n+            }\n             (Res::SelfTy(..), _) if ns == ValueNS => {\n                 err.span_label(span, fallback_label);\n                 err.note(\"can't use `Self` as a constructor, you must use the implemented struct\");"}, {"sha": "d687a5084e23103351ccab218f10ce190f9c1f2b", "filename": "src/librustc_typeck/check/pat.rs", "status": "modified", "additions": 34, "deletions": 7, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/ef906d0e3c50ba0833c5a135d705ab4f6bd93aea/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef906d0e3c50ba0833c5a135d705ab4f6bd93aea/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs?ref=ef906d0e3c50ba0833c5a135d705ab4f6bd93aea", "patch": "@@ -676,18 +676,35 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n         } else {\n             // Pattern has wrong number of fields.\n-            self.e0023(pat.span, res, &subpats, &variant.fields);\n+            self.e0023(pat.span, res, &subpats, &variant.fields, expected);\n             on_error();\n             return tcx.types.err;\n         }\n         pat_ty\n     }\n \n-    fn e0023(&self, pat_span: Span, res: Res, subpats: &'tcx [P<Pat>], fields: &[ty::FieldDef]) {\n+    fn e0023(\n+        &self,\n+        pat_span: Span,\n+        res: Res,\n+        subpats: &'tcx [P<Pat>],\n+        fields: &[ty::FieldDef],\n+        expected: Ty<'tcx>\n+    ) {\n         let subpats_ending = pluralise!(subpats.len());\n         let fields_ending = pluralise!(fields.len());\n+        let missing_parenthesis = match expected.sty {\n+            ty::Adt(_, substs) if fields.len() == 1 => {\n+                let field_ty = fields[0].ty(self.tcx, substs);\n+                match field_ty.sty {\n+                    ty::Tuple(_) => field_ty.tuple_fields().count() == subpats.len(),\n+                    _ => false,\n+                }\n+            }\n+            _ => false,\n+        };\n         let res_span = self.tcx.def_span(res.def_id());\n-        struct_span_err!(\n+        let mut err = struct_span_err!(\n             self.tcx.sess,\n             pat_span,\n             E0023,\n@@ -697,15 +714,25 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             res.descr(),\n             fields.len(),\n             fields_ending,\n-        )\n-            .span_label(pat_span, format!(\n+        );\n+        err.span_label(pat_span, format!(\n                 \"expected {} field{}, found {}\",\n                 fields.len(),\n                 fields_ending,\n                 subpats.len(),\n             ))\n-            .span_label(res_span, format!(\"{} defined here\", res.descr()))\n-            .emit();\n+            .span_label(res_span, format!(\"{} defined here\", res.descr()));\n+\n+        if missing_parenthesis {\n+            err.multipart_suggestion(\n+                \"missing parenthesis\",\n+                vec![(subpats[0].span.shrink_to_lo(), \"(\".to_string()),\n+                    (subpats[subpats.len()-1].span.shrink_to_hi(), \")\".to_string())],\n+                Applicability::MachineApplicable,\n+            );\n+        }\n+\n+        err.emit();\n     }\n \n     fn check_pat_tuple("}, {"sha": "60560ae96deb5cdc7b9e45ef700c7520ea5cc01c", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ef906d0e3c50ba0833c5a135d705ab4f6bd93aea/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef906d0e3c50ba0833c5a135d705ab4f6bd93aea/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=ef906d0e3c50ba0833c5a135d705ab4f6bd93aea", "patch": "@@ -9,9 +9,6 @@ use crate::ThinVec;\n use rustc_target::spec::abi::Abi;\n use syntax_pos::{Pos, Span};\n \n-// Left so that Cargo tests don't break, this can be removed once those no longer use it\n-pub trait AstBuilder {}\n-\n impl<'a> ExtCtxt<'a> {\n     pub fn path(&self, span: Span, strs: Vec<ast::Ident> ) -> ast::Path {\n         self.path_all(span, false, strs, vec![], vec![])"}, {"sha": "8adf9bdccfefb8d03f0e8db3b012fb41da1580a4", "filename": "src/llvm-project", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fllvm-project?ref=ef906d0e3c50ba0833c5a135d705ab4f6bd93aea", "patch": "@@ -1 +1 @@\n-Subproject commit 71fe7ec06b85f612fc0e4eb4134c7a7d0f23fac5\n+Subproject commit 8adf9bdccfefb8d03f0e8db3b012fb41da1580a4"}, {"sha": "ca6118cb3ba985ccdddc905886186ed8c969727b", "filename": "src/test/ui/associated-const/associated-const-generic-obligations.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef906d0e3c50ba0833c5a135d705ab4f6bd93aea/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-generic-obligations.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef906d0e3c50ba0833c5a135d705ab4f6bd93aea/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-generic-obligations.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-generic-obligations.stderr?ref=ef906d0e3c50ba0833c5a135d705ab4f6bd93aea", "patch": "@@ -9,6 +9,8 @@ LL |     const FROM: &'static str = \"foo\";\n    |\n    = note: expected type `<T as Foo>::Out`\n               found type `&'static str`\n+   = note: consider constraining the associated type `<T as Foo>::Out` to `&'static str` or calling a method that returns `<T as Foo>::Out`\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error: aborting due to previous error\n "}, {"sha": "c9d88b7af0753d5a7dcca44c8cfdb84c0ee98e55", "filename": "src/test/ui/associated-types/associated-types-eq-3.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef906d0e3c50ba0833c5a135d705ab4f6bd93aea/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef906d0e3c50ba0833c5a135d705ab4f6bd93aea/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-3.stderr?ref=ef906d0e3c50ba0833c5a135d705ab4f6bd93aea", "patch": "@@ -6,6 +6,8 @@ LL |     let _: Bar = x.boo();\n    |\n    = note: expected type `Bar`\n               found type `<I as Foo>::A`\n+   = note: consider constraining the associated type `<I as Foo>::A` to `Bar`\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error[E0271]: type mismatch resolving `<isize as Foo>::A == Bar`\n   --> $DIR/associated-types-eq-3.rs:38:5"}, {"sha": "e037bd851ca2134154ba6a905cad333f07e6a0f6", "filename": "src/test/ui/associated-types/associated-types-issue-20346.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef906d0e3c50ba0833c5a135d705ab4f6bd93aea/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-issue-20346.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef906d0e3c50ba0833c5a135d705ab4f6bd93aea/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-issue-20346.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-issue-20346.stderr?ref=ef906d0e3c50ba0833c5a135d705ab4f6bd93aea", "patch": "@@ -9,6 +9,8 @@ LL |     is_iterator_of::<Option<T>, _>(&adapter);\n    |\n    = note: expected type `T`\n               found type `std::option::Option<T>`\n+   = help: type parameters must be constrained to match other types\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n error: aborting due to previous error\n "}, {"sha": "d6328a64c7c74debbd5441fabfed3c4ca2d00ba6", "filename": "src/test/ui/associated-types/associated-types-multiple-types-one-trait.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ef906d0e3c50ba0833c5a135d705ab4f6bd93aea/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-multiple-types-one-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef906d0e3c50ba0833c5a135d705ab4f6bd93aea/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-multiple-types-one-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-multiple-types-one-trait.stderr?ref=ef906d0e3c50ba0833c5a135d705ab4f6bd93aea", "patch": "@@ -9,6 +9,8 @@ LL | fn want_y<T:Foo<Y=i32>>(t: &T) { }\n    |\n    = note: expected type `<T as Foo>::Y`\n               found type `i32`\n+   = note: consider constraining the associated type `<T as Foo>::Y` to `i32` or calling a method that returns `<T as Foo>::Y`\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error[E0271]: type mismatch resolving `<T as Foo>::X == u32`\n   --> $DIR/associated-types-multiple-types-one-trait.rs:18:5\n@@ -21,6 +23,8 @@ LL | fn want_x<T:Foo<X=u32>>(t: &T) { }\n    |\n    = note: expected type `<T as Foo>::X`\n               found type `u32`\n+   = note: consider constraining the associated type `<T as Foo>::X` to `u32` or calling a method that returns `<T as Foo>::X`\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error: aborting due to 2 previous errors\n "}, {"sha": "8176e96d6de1fac14702dc224ce5b9c26d12d7c7", "filename": "src/test/ui/compare-method/reordered-type-param.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef906d0e3c50ba0833c5a135d705ab4f6bd93aea/src%2Ftest%2Fui%2Fcompare-method%2Freordered-type-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef906d0e3c50ba0833c5a135d705ab4f6bd93aea/src%2Ftest%2Fui%2Fcompare-method%2Freordered-type-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Freordered-type-param.stderr?ref=ef906d0e3c50ba0833c5a135d705ab4f6bd93aea", "patch": "@@ -9,6 +9,8 @@ LL |   fn b<F:Clone,G>(&self, _x: G) -> G { panic!() }\n    |\n    = note: expected type `fn(&E, F) -> F`\n               found type `fn(&E, G) -> G`\n+   = note: a type parameter was expected, but a different one was found; you might be missing a type parameter or trait bound\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n error: aborting due to previous error\n "}, {"sha": "498f801db81b88ad7e65e326c3bb29ed6798adb3", "filename": "src/test/ui/consts/const-eval/const_fn_ptr.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/ef906d0e3c50ba0833c5a135d705ab4f6bd93aea/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef906d0e3c50ba0833c5a135d705ab4f6bd93aea/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr.rs?ref=ef906d0e3c50ba0833c5a135d705ab4f6bd93aea", "patch": "@@ -0,0 +1,37 @@\n+// run-pass\n+// compile-flags: -Zunleash-the-miri-inside-of-you\n+#![feature(const_fn)]\n+\n+fn double(x: usize) -> usize { x * 2 }\n+const fn double_const(x: usize) -> usize { x * 2 }\n+\n+const X: fn(usize) -> usize = double;\n+const X_const: fn(usize) -> usize = double_const;\n+\n+const fn bar(x: usize) -> usize {\n+    X(x)\n+}\n+\n+const fn bar_const(x: usize) -> usize {\n+    X_const(x)\n+}\n+\n+const fn foo(x: fn(usize) -> usize, y: usize)  -> usize {\n+    x(y)\n+}\n+\n+fn main() {\n+    const Y: usize = bar_const(2);\n+    assert_eq!(Y, 4);\n+    let y = bar_const(2);\n+    assert_eq!(y, 4);\n+    let y = bar(2);\n+    assert_eq!(y, 4);\n+\n+    const Z: usize = foo(double_const, 2);\n+    assert_eq!(Z, 4);\n+    let z = foo(double_const, 2);\n+    assert_eq!(z, 4);\n+    let z = foo(double, 2);\n+    assert_eq!(z, 4);\n+}"}, {"sha": "41452ee59eb941ae700203a96e62b54f0fc2d0b4", "filename": "src/test/ui/consts/const-eval/const_fn_ptr.stderr", "status": "added", "additions": 152, "deletions": 0, "changes": 152, "blob_url": "https://github.com/rust-lang/rust/blob/ef906d0e3c50ba0833c5a135d705ab4f6bd93aea/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef906d0e3c50ba0833c5a135d705ab4f6bd93aea/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr.stderr?ref=ef906d0e3c50ba0833c5a135d705ab4f6bd93aea", "patch": "@@ -0,0 +1,152 @@\n+warning: skipping const checks\n+  --> $DIR/const_fn_ptr.rs:25:5\n+   |\n+LL |     assert_eq!(Y, 4);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+warning: skipping const checks\n+  --> $DIR/const_fn_ptr.rs:25:5\n+   |\n+LL |     assert_eq!(Y, 4);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+warning: skipping const checks\n+  --> $DIR/const_fn_ptr.rs:25:5\n+   |\n+LL |     assert_eq!(Y, 4);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+warning: skipping const checks\n+  --> $DIR/const_fn_ptr.rs:27:5\n+   |\n+LL |     assert_eq!(y, 4);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+warning: skipping const checks\n+  --> $DIR/const_fn_ptr.rs:27:5\n+   |\n+LL |     assert_eq!(y, 4);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+warning: skipping const checks\n+  --> $DIR/const_fn_ptr.rs:27:5\n+   |\n+LL |     assert_eq!(y, 4);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+warning: skipping const checks\n+  --> $DIR/const_fn_ptr.rs:29:5\n+   |\n+LL |     assert_eq!(y, 4);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+warning: skipping const checks\n+  --> $DIR/const_fn_ptr.rs:29:5\n+   |\n+LL |     assert_eq!(y, 4);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+warning: skipping const checks\n+  --> $DIR/const_fn_ptr.rs:29:5\n+   |\n+LL |     assert_eq!(y, 4);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+warning: skipping const checks\n+  --> $DIR/const_fn_ptr.rs:32:5\n+   |\n+LL |     assert_eq!(Z, 4);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+warning: skipping const checks\n+  --> $DIR/const_fn_ptr.rs:32:5\n+   |\n+LL |     assert_eq!(Z, 4);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+warning: skipping const checks\n+  --> $DIR/const_fn_ptr.rs:32:5\n+   |\n+LL |     assert_eq!(Z, 4);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+warning: skipping const checks\n+  --> $DIR/const_fn_ptr.rs:34:5\n+   |\n+LL |     assert_eq!(z, 4);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+warning: skipping const checks\n+  --> $DIR/const_fn_ptr.rs:34:5\n+   |\n+LL |     assert_eq!(z, 4);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+warning: skipping const checks\n+  --> $DIR/const_fn_ptr.rs:34:5\n+   |\n+LL |     assert_eq!(z, 4);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+warning: skipping const checks\n+  --> $DIR/const_fn_ptr.rs:36:5\n+   |\n+LL |     assert_eq!(z, 4);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+warning: skipping const checks\n+  --> $DIR/const_fn_ptr.rs:36:5\n+   |\n+LL |     assert_eq!(z, 4);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+warning: skipping const checks\n+  --> $DIR/const_fn_ptr.rs:36:5\n+   |\n+LL |     assert_eq!(z, 4);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+warning: constant `X_const` should have an upper case name\n+  --> $DIR/const_fn_ptr.rs:9:7\n+   |\n+LL | const X_const: fn(usize) -> usize = double_const;\n+   |       ^^^^^^^ help: convert the identifier to upper case: `X_CONST`\n+   |\n+   = note: `#[warn(non_upper_case_globals)]` on by default\n+"}, {"sha": "14bd6558e7f898fb4d575ccdc7319c3db0ee9b24", "filename": "src/test/ui/consts/const-eval/const_fn_ptr_fail.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ef906d0e3c50ba0833c5a135d705ab4f6bd93aea/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef906d0e3c50ba0833c5a135d705ab4f6bd93aea/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail.rs?ref=ef906d0e3c50ba0833c5a135d705ab4f6bd93aea", "patch": "@@ -0,0 +1,13 @@\n+// run-pass\n+// compile-flags: -Zunleash-the-miri-inside-of-you\n+#![feature(const_fn)]\n+#![allow(unused)]\n+\n+fn double(x: usize) -> usize { x * 2 }\n+const X: fn(usize) -> usize = double;\n+\n+const fn bar(x: usize) -> usize {\n+    X(x) // FIXME: this should error someday\n+}\n+\n+fn main() {}"}, {"sha": "74c60f9a2a58dd20f96899bfb12e55d6be17f917", "filename": "src/test/ui/consts/const-eval/const_fn_ptr_fail2.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ef906d0e3c50ba0833c5a135d705ab4f6bd93aea/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef906d0e3c50ba0833c5a135d705ab4f6bd93aea/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.rs?ref=ef906d0e3c50ba0833c5a135d705ab4f6bd93aea", "patch": "@@ -0,0 +1,26 @@\n+// compile-flags: -Zunleash-the-miri-inside-of-you\n+#![feature(const_fn)]\n+#![allow(const_err)]\n+\n+fn double(x: usize) -> usize { x * 2 }\n+const X: fn(usize) -> usize = double;\n+\n+const fn bar(x: fn(usize) -> usize, y: usize) -> usize {\n+    x(y)\n+}\n+\n+const Y: usize = bar(X, 2); // FIXME: should fail to typeck someday\n+const Z: usize = bar(double, 2); // FIXME: should fail to typeck someday\n+\n+fn main() {\n+    assert_eq!(Y, 4);\n+    //~^ ERROR evaluation of constant expression failed\n+    //~^^ WARN skipping const checks\n+    //~^^^ WARN skipping const checks\n+    //~^^^^ WARN skipping const checks\n+    assert_eq!(Z, 4);\n+    //~^ ERROR evaluation of constant expression failed\n+    //~^^ WARN skipping const checks\n+    //~^^^ WARN skipping const checks\n+    //~^^^^ WARN skipping const checks\n+}"}, {"sha": "611cc5313c0574bebc5098909cc88d459f6f283a", "filename": "src/test/ui/consts/const-eval/const_fn_ptr_fail2.stderr", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/ef906d0e3c50ba0833c5a135d705ab4f6bd93aea/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef906d0e3c50ba0833c5a135d705ab4f6bd93aea/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.stderr?ref=ef906d0e3c50ba0833c5a135d705ab4f6bd93aea", "patch": "@@ -0,0 +1,71 @@\n+warning: skipping const checks\n+  --> $DIR/const_fn_ptr_fail2.rs:16:5\n+   |\n+LL |     assert_eq!(Y, 4);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+warning: skipping const checks\n+  --> $DIR/const_fn_ptr_fail2.rs:16:5\n+   |\n+LL |     assert_eq!(Y, 4);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+warning: skipping const checks\n+  --> $DIR/const_fn_ptr_fail2.rs:16:5\n+   |\n+LL |     assert_eq!(Y, 4);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+warning: skipping const checks\n+  --> $DIR/const_fn_ptr_fail2.rs:21:5\n+   |\n+LL |     assert_eq!(Z, 4);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+warning: skipping const checks\n+  --> $DIR/const_fn_ptr_fail2.rs:21:5\n+   |\n+LL |     assert_eq!(Z, 4);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+warning: skipping const checks\n+  --> $DIR/const_fn_ptr_fail2.rs:21:5\n+   |\n+LL |     assert_eq!(Z, 4);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+error[E0080]: evaluation of constant expression failed\n+  --> $DIR/const_fn_ptr_fail2.rs:16:5\n+   |\n+LL |     assert_eq!(Y, 4);\n+   |     ^^^^^^^^^^^-^^^^^\n+   |                |\n+   |                referenced constant has errors\n+   |\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+error[E0080]: evaluation of constant expression failed\n+  --> $DIR/const_fn_ptr_fail2.rs:21:5\n+   |\n+LL |     assert_eq!(Z, 4);\n+   |     ^^^^^^^^^^^-^^^^^\n+   |                |\n+   |                referenced constant has errors\n+   |\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "6c15e7bf282cee4ad085c198d2bc0e225fcab59e", "filename": "src/test/ui/empty/empty-struct-tuple-pat.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ef906d0e3c50ba0833c5a135d705ab4f6bd93aea/src%2Ftest%2Fui%2Fempty%2Fempty-struct-tuple-pat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef906d0e3c50ba0833c5a135d705ab4f6bd93aea/src%2Ftest%2Fui%2Fempty%2Fempty-struct-tuple-pat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-struct-tuple-pat.stderr?ref=ef906d0e3c50ba0833c5a135d705ab4f6bd93aea", "patch": "@@ -20,15 +20,16 @@ error[E0532]: expected unit struct/variant or constant, found tuple variant `E::\n   --> $DIR/empty-struct-tuple-pat.rs:29:9\n    |\n LL |         E::Empty4 => ()\n-   |         ^^^^^^^^^ not a unit struct/variant or constant\n+   |         ^^^^^^^^^ did you mean `E::Empty4 ( /* fields */ )`?\n \n error[E0532]: expected unit struct/variant or constant, found tuple variant `XE::XEmpty5`\n   --> $DIR/empty-struct-tuple-pat.rs:33:9\n    |\n LL |         XE::XEmpty5 => (),\n    |         ^^^^-------\n-   |             |\n-   |             help: a unit variant with a similar name exists: `XEmpty4`\n+   |         |   |\n+   |         |   help: a unit variant with a similar name exists: `XEmpty4`\n+   |         did you mean `XE::XEmpty5 ( /* fields */ )`?\n \n error: aborting due to 4 previous errors\n "}, {"sha": "dc421e060e86f9ac5f53cf850edcf03942a54897", "filename": "src/test/ui/error-codes/E0023.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef906d0e3c50ba0833c5a135d705ab4f6bd93aea/src%2Ftest%2Fui%2Ferror-codes%2FE0023.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef906d0e3c50ba0833c5a135d705ab4f6bd93aea/src%2Ftest%2Fui%2Ferror-codes%2FE0023.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0023.rs?ref=ef906d0e3c50ba0833c5a135d705ab4f6bd93aea", "patch": "@@ -1,6 +1,7 @@\n enum Fruit {\n     Apple(String, String),\n     Pear(u32),\n+    Orange((String, String)),\n }\n \n \n@@ -10,5 +11,6 @@ fn main() {\n         Fruit::Apple(a) => {}, //~ ERROR E0023\n         Fruit::Apple(a, b, c) => {}, //~ ERROR E0023\n         Fruit::Pear(1, 2) => {}, //~ ERROR E0023\n+        Fruit::Orange(a, b) => {}, //~ ERROR E0023\n     }\n }"}, {"sha": "8ae7d01ed5f7e91d29c6c103a2f46cb31f765c71", "filename": "src/test/ui/error-codes/E0023.stderr", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ef906d0e3c50ba0833c5a135d705ab4f6bd93aea/src%2Ftest%2Fui%2Ferror-codes%2FE0023.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef906d0e3c50ba0833c5a135d705ab4f6bd93aea/src%2Ftest%2Fui%2Ferror-codes%2FE0023.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0023.stderr?ref=ef906d0e3c50ba0833c5a135d705ab4f6bd93aea", "patch": "@@ -1,5 +1,5 @@\n error[E0023]: this pattern has 1 field, but the corresponding tuple variant has 2 fields\n-  --> $DIR/E0023.rs:10:9\n+  --> $DIR/E0023.rs:11:9\n    |\n LL |     Apple(String, String),\n    |     --------------------- tuple variant defined here\n@@ -8,7 +8,7 @@ LL |         Fruit::Apple(a) => {},\n    |         ^^^^^^^^^^^^^^^ expected 2 fields, found 1\n \n error[E0023]: this pattern has 3 fields, but the corresponding tuple variant has 2 fields\n-  --> $DIR/E0023.rs:11:9\n+  --> $DIR/E0023.rs:12:9\n    |\n LL |     Apple(String, String),\n    |     --------------------- tuple variant defined here\n@@ -17,14 +17,27 @@ LL |         Fruit::Apple(a, b, c) => {},\n    |         ^^^^^^^^^^^^^^^^^^^^^ expected 2 fields, found 3\n \n error[E0023]: this pattern has 2 fields, but the corresponding tuple variant has 1 field\n-  --> $DIR/E0023.rs:12:9\n+  --> $DIR/E0023.rs:13:9\n    |\n LL |     Pear(u32),\n    |     --------- tuple variant defined here\n ...\n LL |         Fruit::Pear(1, 2) => {},\n    |         ^^^^^^^^^^^^^^^^^ expected 1 field, found 2\n \n-error: aborting due to 3 previous errors\n+error[E0023]: this pattern has 2 fields, but the corresponding tuple variant has 1 field\n+  --> $DIR/E0023.rs:14:9\n+   |\n+LL |     Orange((String, String)),\n+   |     ------------------------ tuple variant defined here\n+...\n+LL |         Fruit::Orange(a, b) => {},\n+   |         ^^^^^^^^^^^^^^^^^^^ expected 1 field, found 2\n+help: missing parenthesis\n+   |\n+LL |         Fruit::Orange((a, b)) => {},\n+   |                       ^    ^\n+\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0023`."}, {"sha": "fd6fce938b2c77bc1c56d8212c34fdf2dc0d782a", "filename": "src/test/ui/hrtb/issue-62203-hrtb-ice.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef906d0e3c50ba0833c5a135d705ab4f6bd93aea/src%2Ftest%2Fui%2Fhrtb%2Fissue-62203-hrtb-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef906d0e3c50ba0833c5a135d705ab4f6bd93aea/src%2Ftest%2Fui%2Fhrtb%2Fissue-62203-hrtb-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-62203-hrtb-ice.stderr?ref=ef906d0e3c50ba0833c5a135d705ab4f6bd93aea", "patch": "@@ -6,6 +6,8 @@ LL |     let v = Unit2.m(\n    |\n    = note: expected type `Unit4`\n               found type `<_ as Ty<'_>>::V`\n+   = note: consider constraining the associated type `<_ as Ty<'_>>::V` to `Unit4`\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error[E0271]: type mismatch resolving `<[closure@$DIR/issue-62203-hrtb-ice.rs:42:17: 42:39] as std::ops::FnOnce<((&u8,),)>>::Output == Unit3`\n   --> $DIR/issue-62203-hrtb-ice.rs:38:19"}, {"sha": "99c6a8cdd6daf2c2ebe303f9f8cd6002ca3209ad", "filename": "src/test/ui/impl-trait/bound-normalization-fail.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ef906d0e3c50ba0833c5a135d705ab4f6bd93aea/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef906d0e3c50ba0833c5a135d705ab4f6bd93aea/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr?ref=ef906d0e3c50ba0833c5a135d705ab4f6bd93aea", "patch": "@@ -14,6 +14,8 @@ LL |     fn foo_fail<T: Trait>() -> impl FooLike<Output=T::Assoc> {\n    |\n    = note: expected type `()`\n               found type `<T as impl_trait::Trait>::Assoc`\n+   = note: consider constraining the associated type `<T as impl_trait::Trait>::Assoc` to `()`\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n    = note: the return type of a function must have a statically known size\n \n error: `impl Trait` return type cannot contain a projection or `Self` that references lifetimes from a parent scope\n@@ -30,6 +32,8 @@ LL |     fn foo2_fail<'a, T: Trait<'a>>() -> impl FooLike<Output=T::Assoc> {\n    |\n    = note: expected type `()`\n               found type `<T as lifetimes::Trait<'static>>::Assoc`\n+   = note: consider constraining the associated type `<T as lifetimes::Trait<'static>>::Assoc` to `()`\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n    = note: the return type of a function must have a statically known size\n \n error: aborting due to 3 previous errors"}, {"sha": "e30e2626e9f34c46de7862449e954628e206b94e", "filename": "src/test/ui/impl-trait/equality2.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef906d0e3c50ba0833c5a135d705ab4f6bd93aea/src%2Ftest%2Fui%2Fimpl-trait%2Fequality2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef906d0e3c50ba0833c5a135d705ab4f6bd93aea/src%2Ftest%2Fui%2Fimpl-trait%2Fequality2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fequality2.stderr?ref=ef906d0e3c50ba0833c5a135d705ab4f6bd93aea", "patch": "@@ -15,6 +15,8 @@ LL |     let _: i32 = Leak::leak(hide(0_i32));\n    |\n    = note: expected type `i32`\n               found type `<impl Foo as Leak>::T`\n+   = note: consider constraining the associated type `<impl Foo as Leak>::T` to `i32`\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error[E0308]: mismatched types\n   --> $DIR/equality2.rs:38:10"}, {"sha": "e4d0a731ebfe55cf425c8f5b90398b4b9282be5d", "filename": "src/test/ui/impl-trait/impl-generic-mismatch-ab.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef906d0e3c50ba0833c5a135d705ab4f6bd93aea/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-generic-mismatch-ab.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef906d0e3c50ba0833c5a135d705ab4f6bd93aea/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-generic-mismatch-ab.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-generic-mismatch-ab.stderr?ref=ef906d0e3c50ba0833c5a135d705ab4f6bd93aea", "patch": "@@ -9,6 +9,8 @@ LL |     fn foo<B: Debug>(&self, a: &impl Debug, b: &B) { }\n    |\n    = note: expected type `fn(&(), &B, &impl Debug)`\n               found type `fn(&(), &impl Debug, &B)`\n+   = note: a type parameter was expected, but a different one was found; you might be missing a type parameter or trait bound\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n error: aborting due to previous error\n "}, {"sha": "d92c3f034e5a2f0a0d5cadacd3250f56c7e5e350", "filename": "src/test/ui/impl-trait/universal-mismatched-type.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef906d0e3c50ba0833c5a135d705ab4f6bd93aea/src%2Ftest%2Fui%2Fimpl-trait%2Funiversal-mismatched-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef906d0e3c50ba0833c5a135d705ab4f6bd93aea/src%2Ftest%2Fui%2Fimpl-trait%2Funiversal-mismatched-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Funiversal-mismatched-type.stderr?ref=ef906d0e3c50ba0833c5a135d705ab4f6bd93aea", "patch": "@@ -8,6 +8,8 @@ LL |     x\n    |\n    = note: expected type `std::string::String`\n               found type `impl Debug`\n+   = help: type parameters must be constrained to match other types\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n error: aborting due to previous error\n "}, {"sha": "98a70f268cf72ffa9387b3ad3ad5f01d5662ae61", "filename": "src/test/ui/impl-trait/universal-two-impl-traits.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef906d0e3c50ba0833c5a135d705ab4f6bd93aea/src%2Ftest%2Fui%2Fimpl-trait%2Funiversal-two-impl-traits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef906d0e3c50ba0833c5a135d705ab4f6bd93aea/src%2Ftest%2Fui%2Fimpl-trait%2Funiversal-two-impl-traits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Funiversal-two-impl-traits.stderr?ref=ef906d0e3c50ba0833c5a135d705ab4f6bd93aea", "patch": "@@ -6,6 +6,8 @@ LL |     a = y;\n    |\n    = note: expected type `impl Debug` (type parameter)\n               found type `impl Debug` (type parameter)\n+   = note: a type parameter was expected, but a different one was found; you might be missing a type parameter or trait bound\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n error: aborting due to previous error\n "}, {"sha": "3f2d0aa87adc1174522da52aa655e2baeb14c974", "filename": "src/test/ui/issues/issue-13853.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef906d0e3c50ba0833c5a135d705ab4f6bd93aea/src%2Ftest%2Fui%2Fissues%2Fissue-13853.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef906d0e3c50ba0833c5a135d705ab4f6bd93aea/src%2Ftest%2Fui%2Fissues%2Fissue-13853.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13853.stderr?ref=ef906d0e3c50ba0833c5a135d705ab4f6bd93aea", "patch": "@@ -9,6 +9,8 @@ LL |         self.iter()\n    |\n    = note: expected type `I`\n               found type `std::slice::Iter<'_, N>`\n+   = help: type parameters must be constrained to match other types\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n error[E0599]: no method named `iter` found for type `&G` in the current scope\n   --> $DIR/issue-13853.rs:27:23"}, {"sha": "4c464e6d4f685d6c0f9daa4a012cf82f9626c545", "filename": "src/test/ui/issues/issue-20225.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ef906d0e3c50ba0833c5a135d705ab4f6bd93aea/src%2Ftest%2Fui%2Fissues%2Fissue-20225.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef906d0e3c50ba0833c5a135d705ab4f6bd93aea/src%2Ftest%2Fui%2Fissues%2Fissue-20225.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20225.stderr?ref=ef906d0e3c50ba0833c5a135d705ab4f6bd93aea", "patch": "@@ -6,6 +6,8 @@ LL |   extern \"rust-call\" fn call(&self, (_,): (T,)) {}\n    |\n    = note: expected type `extern \"rust-call\" fn(&Foo, (&'a T,))`\n               found type `extern \"rust-call\" fn(&Foo, (T,))`\n+   = help: type parameters must be constrained to match other types\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n error[E0053]: method `call_mut` has an incompatible type for trait\n   --> $DIR/issue-20225.rs:12:3\n@@ -15,6 +17,8 @@ LL |   extern \"rust-call\" fn call_mut(&mut self, (_,): (T,)) {}\n    |\n    = note: expected type `extern \"rust-call\" fn(&mut Foo, (&'a T,))`\n               found type `extern \"rust-call\" fn(&mut Foo, (T,))`\n+   = help: type parameters must be constrained to match other types\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n error[E0053]: method `call_once` has an incompatible type for trait\n   --> $DIR/issue-20225.rs:20:3\n@@ -24,6 +28,8 @@ LL |   extern \"rust-call\" fn call_once(self, (_,): (T,)) {}\n    |\n    = note: expected type `extern \"rust-call\" fn(Foo, (&'a T,))`\n               found type `extern \"rust-call\" fn(Foo, (T,))`\n+   = help: type parameters must be constrained to match other types\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n error: aborting due to 3 previous errors\n "}, {"sha": "9658f6980be2f82dea31255fc4d392b5347be572", "filename": "src/test/ui/issues/issue-24204.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ef906d0e3c50ba0833c5a135d705ab4f6bd93aea/src%2Ftest%2Fui%2Fissues%2Fissue-24204.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef906d0e3c50ba0833c5a135d705ab4f6bd93aea/src%2Ftest%2Fui%2Fissues%2Fissue-24204.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24204.stderr?ref=ef906d0e3c50ba0833c5a135d705ab4f6bd93aea", "patch": "@@ -9,6 +9,7 @@ LL | fn test<T: Trait<B=i32>>(b: i32) -> T where T::A: MultiDispatch<i32> { T::n\n    |\n    = note: expected type `<<T as Trait>::A as MultiDispatch<i32>>::O`\n               found type `T`\n+   = note: you might be missing a type parameter or trait bound\n \n error: aborting due to previous error\n "}, {"sha": "a6ccc4835fa682eae1b728c7bc60f71a367ab4ce", "filename": "src/test/ui/issues/issue-2951.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef906d0e3c50ba0833c5a135d705ab4f6bd93aea/src%2Ftest%2Fui%2Fissues%2Fissue-2951.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef906d0e3c50ba0833c5a135d705ab4f6bd93aea/src%2Ftest%2Fui%2Fissues%2Fissue-2951.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-2951.stderr?ref=ef906d0e3c50ba0833c5a135d705ab4f6bd93aea", "patch": "@@ -6,6 +6,8 @@ LL |     xx = y;\n    |\n    = note: expected type `T`\n               found type `U`\n+   = note: a type parameter was expected, but a different one was found; you might be missing a type parameter or trait bound\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n error: aborting due to previous error\n "}, {"sha": "b56fa949acb7e0a1671b32221be30a87b1a09d2c", "filename": "src/test/ui/issues/issue-32004.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ef906d0e3c50ba0833c5a135d705ab4f6bd93aea/src%2Ftest%2Fui%2Fissues%2Fissue-32004.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef906d0e3c50ba0833c5a135d705ab4f6bd93aea/src%2Ftest%2Fui%2Fissues%2Fissue-32004.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32004.stderr?ref=ef906d0e3c50ba0833c5a135d705ab4f6bd93aea", "patch": "@@ -3,8 +3,9 @@ error[E0532]: expected unit struct/variant or constant, found tuple variant `Foo\n    |\n LL |         Foo::Bar => {}\n    |         ^^^^^---\n-   |              |\n-   |              help: a unit variant with a similar name exists: `Baz`\n+   |         |    |\n+   |         |    help: a unit variant with a similar name exists: `Baz`\n+   |         did you mean `Foo::Bar ( /* fields */ )`?\n \n error[E0532]: expected tuple struct/variant, found unit struct `S`\n   --> $DIR/issue-32004.rs:16:9"}, {"sha": "9c11a02923c8c2a9d68e728d389c3da247dbb258", "filename": "src/test/ui/issues/issue-32323.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef906d0e3c50ba0833c5a135d705ab4f6bd93aea/src%2Ftest%2Fui%2Fissues%2Fissue-32323.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef906d0e3c50ba0833c5a135d705ab4f6bd93aea/src%2Ftest%2Fui%2Fissues%2Fissue-32323.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32323.stderr?ref=ef906d0e3c50ba0833c5a135d705ab4f6bd93aea", "patch": "@@ -8,6 +8,8 @@ LL | pub fn f<'a, T: Tr<'a>>() -> <T as Tr<'a>>::Out {}\n    |\n    = note: expected type `<T as Tr<'a>>::Out`\n               found type `()`\n+   = note: consider constraining the associated type `<T as Tr<'a>>::Out` to `()` or calling a method that returns `<T as Tr<'a>>::Out`\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error: aborting due to previous error\n "}, {"sha": "c1c79091fc802b3b86f1148142adb3913e31544e", "filename": "src/test/ui/issues/issue-63983.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ef906d0e3c50ba0833c5a135d705ab4f6bd93aea/src%2Ftest%2Fui%2Fissues%2Fissue-63983.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef906d0e3c50ba0833c5a135d705ab4f6bd93aea/src%2Ftest%2Fui%2Fissues%2Fissue-63983.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-63983.rs?ref=ef906d0e3c50ba0833c5a135d705ab4f6bd93aea", "patch": "@@ -0,0 +1,15 @@\n+enum MyEnum {\n+    Tuple(i32),\n+    Struct{ s: i32 },\n+}\n+\n+fn foo(en: MyEnum) {\n+    match en {\n+        MyEnum::Tuple => \"\",\n+        //~^ ERROR expected unit struct/variant or constant, found tuple variant `MyEnum::Tuple`\n+        MyEnum::Struct => \"\",\n+        //~^ ERROR expected unit struct/variant or constant, found struct variant `MyEnum::Struct`\n+    };\n+}\n+\n+fn main() {}"}, {"sha": "67acd1d57c27aabdc9b136836222a113181c5ac9", "filename": "src/test/ui/issues/issue-63983.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ef906d0e3c50ba0833c5a135d705ab4f6bd93aea/src%2Ftest%2Fui%2Fissues%2Fissue-63983.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef906d0e3c50ba0833c5a135d705ab4f6bd93aea/src%2Ftest%2Fui%2Fissues%2Fissue-63983.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-63983.stderr?ref=ef906d0e3c50ba0833c5a135d705ab4f6bd93aea", "patch": "@@ -0,0 +1,15 @@\n+error[E0532]: expected unit struct/variant or constant, found tuple variant `MyEnum::Tuple`\n+  --> $DIR/issue-63983.rs:8:9\n+   |\n+LL |         MyEnum::Tuple => \"\",\n+   |         ^^^^^^^^^^^^^ did you mean `MyEnum::Tuple ( /* fields */ )`?\n+\n+error[E0532]: expected unit struct/variant or constant, found struct variant `MyEnum::Struct`\n+  --> $DIR/issue-63983.rs:10:9\n+   |\n+LL |         MyEnum::Struct => \"\",\n+   |         ^^^^^^^^^^^^^^ did you mean `MyEnum::Struct { /* fields */ }`?\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0532`."}, {"sha": "4a9afb9d2494e615b440d64df730b3b1dc64553c", "filename": "src/test/ui/mismatched_types/issue-35030.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef906d0e3c50ba0833c5a135d705ab4f6bd93aea/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-35030.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef906d0e3c50ba0833c5a135d705ab4f6bd93aea/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-35030.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-35030.stderr?ref=ef906d0e3c50ba0833c5a135d705ab4f6bd93aea", "patch": "@@ -6,6 +6,8 @@ LL |         Some(true)\n    |\n    = note: expected type `bool` (type parameter)\n               found type `bool` (bool)\n+   = help: type parameters must be constrained to match other types\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n error: aborting due to previous error\n "}, {"sha": "43cebd7f9c245347614c083ed6d4818d87540288", "filename": "src/test/ui/specialization/specialization-default-projection.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ef906d0e3c50ba0833c5a135d705ab4f6bd93aea/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-default-projection.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef906d0e3c50ba0833c5a135d705ab4f6bd93aea/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-default-projection.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-default-projection.stderr?ref=ef906d0e3c50ba0833c5a135d705ab4f6bd93aea", "patch": "@@ -9,6 +9,8 @@ LL |     ()\n    |\n    = note: expected type `<T as Foo>::Assoc`\n               found type `()`\n+   = note: consider constraining the associated type `<T as Foo>::Assoc` to `()` or calling a method that returns `<T as Foo>::Assoc`\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error[E0308]: mismatched types\n   --> $DIR/specialization-default-projection.rs:28:5\n@@ -23,6 +25,8 @@ LL |     generic::<()>()\n    |\n    = note: expected type `()`\n               found type `<() as Foo>::Assoc`\n+   = note: consider constraining the associated type `<() as Foo>::Assoc` to `()`\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error: aborting due to 2 previous errors\n "}, {"sha": "932087421fbcbc49277a40b6b75c5b03dc5c5ea3", "filename": "src/test/ui/specialization/specialization-default-types.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ef906d0e3c50ba0833c5a135d705ab4f6bd93aea/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-default-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef906d0e3c50ba0833c5a135d705ab4f6bd93aea/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-default-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-default-types.stderr?ref=ef906d0e3c50ba0833c5a135d705ab4f6bd93aea", "patch": "@@ -8,6 +8,8 @@ LL |         Box::new(self)\n    |\n    = note: expected type `<T as Example>::Output`\n               found type `std::boxed::Box<T>`\n+   = note: consider constraining the associated type `<T as Example>::Output` to `std::boxed::Box<T>` or calling a method that returns `<T as Example>::Output`\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error[E0308]: mismatched types\n   --> $DIR/specialization-default-types.rs:25:5\n@@ -19,6 +21,8 @@ LL |     Example::generate(t)\n    |\n    = note: expected type `std::boxed::Box<T>`\n               found type `<T as Example>::Output`\n+   = note: consider constraining the associated type `<T as Example>::Output` to `std::boxed::Box<T>`\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error: aborting due to 2 previous errors\n "}, {"sha": "b905cd1a294cccc80ab0cc0957ac991df0a44b44", "filename": "src/test/ui/structs/struct-path-self-type-mismatch.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ef906d0e3c50ba0833c5a135d705ab4f6bd93aea/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-self-type-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef906d0e3c50ba0833c5a135d705ab4f6bd93aea/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-self-type-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-self-type-mismatch.stderr?ref=ef906d0e3c50ba0833c5a135d705ab4f6bd93aea", "patch": "@@ -12,6 +12,8 @@ LL |             inner: u\n    |\n    = note: expected type `T`\n               found type `U`\n+   = note: a type parameter was expected, but a different one was found; you might be missing a type parameter or trait bound\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n error[E0308]: mismatched types\n   --> $DIR/struct-path-self-type-mismatch.rs:13:9\n@@ -27,6 +29,8 @@ LL | |         }\n    |\n    = note: expected type `Foo<U>`\n               found type `Foo<T>`\n+   = note: a type parameter was expected, but a different one was found; you might be missing a type parameter or trait bound\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n error: aborting due to 3 previous errors\n "}, {"sha": "a0a617fdbbc35646751a6a5f4862d3717cfc568e", "filename": "src/test/ui/type-alias-enum-variants/enum-variant-generic-args.stderr", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ef906d0e3c50ba0833c5a135d705ab4f6bd93aea/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-generic-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef906d0e3c50ba0833c5a135d705ab4f6bd93aea/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-generic-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-generic-args.stderr?ref=ef906d0e3c50ba0833c5a135d705ab4f6bd93aea", "patch": "@@ -6,6 +6,8 @@ LL |         Self::TSVariant(());\n    |\n    = note: expected type `T`\n               found type `()`\n+   = help: type parameters must be constrained to match other types\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n error[E0109]: type arguments are not allowed for this type\n   --> $DIR/enum-variant-generic-args.rs:15:27\n@@ -27,6 +29,8 @@ LL |         Self::<()>::TSVariant(());\n    |\n    = note: expected type `T`\n               found type `()`\n+   = help: type parameters must be constrained to match other types\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n error[E0109]: type arguments are not allowed for this type\n   --> $DIR/enum-variant-generic-args.rs:20:16\n@@ -48,6 +52,8 @@ LL |         Self::SVariant { v: () };\n    |\n    = note: expected type `T`\n               found type `()`\n+   = help: type parameters must be constrained to match other types\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n error[E0109]: type arguments are not allowed for this type\n   --> $DIR/enum-variant-generic-args.rs:28:26\n@@ -63,6 +69,8 @@ LL |         Self::SVariant::<()> { v: () };\n    |\n    = note: expected type `T`\n               found type `()`\n+   = help: type parameters must be constrained to match other types\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n error[E0109]: type arguments are not allowed for this type\n   --> $DIR/enum-variant-generic-args.rs:31:16\n@@ -78,6 +86,8 @@ LL |         Self::<()>::SVariant { v: () };\n    |\n    = note: expected type `T`\n               found type `()`\n+   = help: type parameters must be constrained to match other types\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n error[E0109]: type arguments are not allowed for this type\n   --> $DIR/enum-variant-generic-args.rs:34:16\n@@ -99,6 +109,8 @@ LL |         Self::<()>::SVariant::<()> { v: () };\n    |\n    = note: expected type `T`\n               found type `()`\n+   = help: type parameters must be constrained to match other types\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n error[E0109]: type arguments are not allowed for this type\n   --> $DIR/enum-variant-generic-args.rs:41:26"}, {"sha": "3397eec9e050bf942c95838dd1fcb1a59b59247b", "filename": "src/test/ui/type/type-parameter-names.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef906d0e3c50ba0833c5a135d705ab4f6bd93aea/src%2Ftest%2Fui%2Ftype%2Ftype-parameter-names.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef906d0e3c50ba0833c5a135d705ab4f6bd93aea/src%2Ftest%2Fui%2Ftype%2Ftype-parameter-names.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-parameter-names.stderr?ref=ef906d0e3c50ba0833c5a135d705ab4f6bd93aea", "patch": "@@ -8,6 +8,8 @@ LL |     x\n    |\n    = note: expected type `Bar`\n               found type `Foo`\n+   = note: a type parameter was expected, but a different one was found; you might be missing a type parameter or trait bound\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n error: aborting due to previous error\n "}, {"sha": "a10bf4e0b77876890dc9d15a1c59bdc0caf846a6", "filename": "src/test/ui/type/type-params-in-different-spaces-1.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef906d0e3c50ba0833c5a135d705ab4f6bd93aea/src%2Ftest%2Fui%2Ftype%2Ftype-params-in-different-spaces-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef906d0e3c50ba0833c5a135d705ab4f6bd93aea/src%2Ftest%2Fui%2Ftype%2Ftype-params-in-different-spaces-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-params-in-different-spaces-1.stderr?ref=ef906d0e3c50ba0833c5a135d705ab4f6bd93aea", "patch": "@@ -6,6 +6,8 @@ LL |         *self + rhs\n    |\n    = note: expected type `Self`\n               found type `T`\n+   = note: a type parameter was expected, but a different one was found; you might be missing a type parameter or trait bound\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n error: aborting due to previous error\n "}, {"sha": "9f0fa5a0ea1fed5bf099ba6488fc3030e4e73b0b", "filename": "src/test/ui/type/type-params-in-different-spaces-3.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef906d0e3c50ba0833c5a135d705ab4f6bd93aea/src%2Ftest%2Fui%2Ftype%2Ftype-params-in-different-spaces-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef906d0e3c50ba0833c5a135d705ab4f6bd93aea/src%2Ftest%2Fui%2Ftype%2Ftype-params-in-different-spaces-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-params-in-different-spaces-3.stderr?ref=ef906d0e3c50ba0833c5a135d705ab4f6bd93aea", "patch": "@@ -8,6 +8,8 @@ LL |         u\n    |\n    = note: expected type `Self`\n               found type `X`\n+   = note: a type parameter was expected, but a different one was found; you might be missing a type parameter or trait bound\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n error: aborting due to previous error\n "}]}