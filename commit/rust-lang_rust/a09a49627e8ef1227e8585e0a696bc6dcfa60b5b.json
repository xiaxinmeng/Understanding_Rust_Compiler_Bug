{"sha": "a09a49627e8ef1227e8585e0a696bc6dcfa60b5b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwOWE0OTYyN2U4ZWYxMjI3ZTg1ODVlMGE2OTZiYzZkY2ZhNjBiNWI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-28T09:26:20Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-28T09:26:20Z"}, "message": "Long lines", "tree": {"sha": "a4fe46098abb443afdfda2a39ce26ba842d6249d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a4fe46098abb443afdfda2a39ce26ba842d6249d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a09a49627e8ef1227e8585e0a696bc6dcfa60b5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a09a49627e8ef1227e8585e0a696bc6dcfa60b5b", "html_url": "https://github.com/rust-lang/rust/commit/a09a49627e8ef1227e8585e0a696bc6dcfa60b5b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a09a49627e8ef1227e8585e0a696bc6dcfa60b5b/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc9efaad9c978f71bd7ac2c91efbc957e25d43fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc9efaad9c978f71bd7ac2c91efbc957e25d43fb", "html_url": "https://github.com/rust-lang/rust/commit/bc9efaad9c978f71bd7ac2c91efbc957e25d43fb"}], "stats": {"total": 144, "additions": 77, "deletions": 67}, "files": [{"sha": "3a9fd36a05e6b597c0a93b5062dc43d9891cd168", "filename": "src/libstd/arc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a09a49627e8ef1227e8585e0a696bc6dcfa60b5b/src%2Flibstd%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a09a49627e8ef1227e8585e0a696bc6dcfa60b5b/src%2Flibstd%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Farc.rs?ref=a09a49627e8ef1227e8585e0a696bc6dcfa60b5b", "patch": "@@ -718,7 +718,7 @@ mod tests {\n                 // send to other readers\n                 for vec::each(reader_convos) |x| {\n                     match *x {\n-                        (rc, _) => rc.send(()),\n+                        (ref rc, _) => rc.send(()),\n                     }\n                 }\n             }\n@@ -727,7 +727,7 @@ mod tests {\n                 // complete handshake with other readers\n                 for vec::each(reader_convos) |x| {\n                     match *x {\n-                        (_, rp) => rp.recv(),\n+                        (_, ref rp) => rp.recv(),\n                     }\n                 }\n                 wc1.send(()); // tell writer to try again"}, {"sha": "0ee9c55898cacc3ea38e663ed3d719bac555702e", "filename": "src/libstd/getopts.rs", "status": "modified", "additions": 54, "deletions": 46, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/a09a49627e8ef1227e8585e0a696bc6dcfa60b5b/src%2Flibstd%2Fgetopts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a09a49627e8ef1227e8585e0a696bc6dcfa60b5b/src%2Flibstd%2Fgetopts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fgetopts.rs?ref=a09a49627e8ef1227e8585e0a696bc6dcfa60b5b", "patch": "@@ -199,13 +199,21 @@ enum Fail_ {\n /// Convert a `fail_` enum into an error string\n fn fail_str(+f: Fail_) -> ~str {\n     return match f {\n-      ArgumentMissing(ref nm) => ~\"Argument to option '\" + *nm + ~\"' missing.\",\n-      UnrecognizedOption(ref nm) => ~\"Unrecognized option: '\" + *nm + ~\"'.\",\n-      OptionMissing(ref nm) => ~\"Required option '\" + *nm + ~\"' missing.\",\n-      OptionDuplicated(ref nm) => ~\"Option '\" + *nm + ~\"' given more than once.\",\n-      UnexpectedArgument(ref nm) => {\n-        ~\"Option \" + *nm + ~\" does not take an argument.\"\n-      }\n+        ArgumentMissing(ref nm) => {\n+            ~\"Argument to option '\" + *nm + ~\"' missing.\"\n+        }\n+        UnrecognizedOption(ref nm) => {\n+            ~\"Unrecognized option: '\" + *nm + ~\"'.\"\n+        }\n+        OptionMissing(ref nm) => {\n+            ~\"Required option '\" + *nm + ~\"' missing.\"\n+        }\n+        OptionDuplicated(ref nm) => {\n+            ~\"Option '\" + *nm + ~\"' given more than once.\"\n+        }\n+        UnexpectedArgument(ref nm) => {\n+            ~\"Option \" + *nm + ~\" does not take an argument.\"\n+        }\n     };\n }\n \n@@ -476,7 +484,7 @@ mod tests {\n         let opts = ~[reqopt(~\"test\")];\n         let rs = getopts(args, opts);\n         match rs {\n-          Ok(m) => {\n+          Ok(copy m) => {\n             assert (opt_present(m, ~\"test\"));\n             assert (opt_str(m, ~\"test\") == ~\"20\");\n           }\n@@ -490,7 +498,7 @@ mod tests {\n         let opts = ~[reqopt(~\"test\")];\n         let rs = getopts(args, opts);\n         match rs {\n-          Err(f) => check_fail_type(f, OptionMissing_),\n+          Err(copy f) => check_fail_type(f, OptionMissing_),\n           _ => fail\n         }\n     }\n@@ -501,7 +509,7 @@ mod tests {\n         let opts = ~[reqopt(~\"test\")];\n         let rs = getopts(args, opts);\n         match rs {\n-          Err(f) => check_fail_type(f, ArgumentMissing_),\n+          Err(copy f) => check_fail_type(f, ArgumentMissing_),\n           _ => fail\n         }\n     }\n@@ -512,7 +520,7 @@ mod tests {\n         let opts = ~[reqopt(~\"test\")];\n         let rs = getopts(args, opts);\n         match rs {\n-          Err(f) => check_fail_type(f, OptionDuplicated_),\n+          Err(copy f) => check_fail_type(f, OptionDuplicated_),\n           _ => fail\n         }\n     }\n@@ -523,7 +531,7 @@ mod tests {\n         let opts = ~[reqopt(~\"t\")];\n         let rs = getopts(args, opts);\n         match rs {\n-          Ok(m) => {\n+          Ok(copy m) => {\n             assert (opt_present(m, ~\"t\"));\n             assert (opt_str(m, ~\"t\") == ~\"20\");\n           }\n@@ -537,7 +545,7 @@ mod tests {\n         let opts = ~[reqopt(~\"t\")];\n         let rs = getopts(args, opts);\n         match rs {\n-          Err(f) => check_fail_type(f, OptionMissing_),\n+          Err(copy f) => check_fail_type(f, OptionMissing_),\n           _ => fail\n         }\n     }\n@@ -548,7 +556,7 @@ mod tests {\n         let opts = ~[reqopt(~\"t\")];\n         let rs = getopts(args, opts);\n         match rs {\n-          Err(f) => check_fail_type(f, ArgumentMissing_),\n+          Err(copy f) => check_fail_type(f, ArgumentMissing_),\n           _ => fail\n         }\n     }\n@@ -559,7 +567,7 @@ mod tests {\n         let opts = ~[reqopt(~\"t\")];\n         let rs = getopts(args, opts);\n         match rs {\n-          Err(f) => check_fail_type(f, OptionDuplicated_),\n+          Err(copy f) => check_fail_type(f, OptionDuplicated_),\n           _ => fail\n         }\n     }\n@@ -572,7 +580,7 @@ mod tests {\n         let opts = ~[optopt(~\"test\")];\n         let rs = getopts(args, opts);\n         match rs {\n-          Ok(m) => {\n+          Ok(copy m) => {\n             assert (opt_present(m, ~\"test\"));\n             assert (opt_str(m, ~\"test\") == ~\"20\");\n           }\n@@ -586,7 +594,7 @@ mod tests {\n         let opts = ~[optopt(~\"test\")];\n         let rs = getopts(args, opts);\n         match rs {\n-          Ok(m) => assert (!opt_present(m, ~\"test\")),\n+          Ok(copy m) => assert (!opt_present(m, ~\"test\")),\n           _ => fail\n         }\n     }\n@@ -597,7 +605,7 @@ mod tests {\n         let opts = ~[optopt(~\"test\")];\n         let rs = getopts(args, opts);\n         match rs {\n-          Err(f) => check_fail_type(f, ArgumentMissing_),\n+          Err(copy f) => check_fail_type(f, ArgumentMissing_),\n           _ => fail\n         }\n     }\n@@ -608,7 +616,7 @@ mod tests {\n         let opts = ~[optopt(~\"test\")];\n         let rs = getopts(args, opts);\n         match rs {\n-          Err(f) => check_fail_type(f, OptionDuplicated_),\n+          Err(copy f) => check_fail_type(f, OptionDuplicated_),\n           _ => fail\n         }\n     }\n@@ -619,7 +627,7 @@ mod tests {\n         let opts = ~[optopt(~\"t\")];\n         let rs = getopts(args, opts);\n         match rs {\n-          Ok(m) => {\n+          Ok(copy m) => {\n             assert (opt_present(m, ~\"t\"));\n             assert (opt_str(m, ~\"t\") == ~\"20\");\n           }\n@@ -633,7 +641,7 @@ mod tests {\n         let opts = ~[optopt(~\"t\")];\n         let rs = getopts(args, opts);\n         match rs {\n-          Ok(m) => assert (!opt_present(m, ~\"t\")),\n+          Ok(copy m) => assert (!opt_present(m, ~\"t\")),\n           _ => fail\n         }\n     }\n@@ -644,7 +652,7 @@ mod tests {\n         let opts = ~[optopt(~\"t\")];\n         let rs = getopts(args, opts);\n         match rs {\n-          Err(f) => check_fail_type(f, ArgumentMissing_),\n+          Err(copy f) => check_fail_type(f, ArgumentMissing_),\n           _ => fail\n         }\n     }\n@@ -655,7 +663,7 @@ mod tests {\n         let opts = ~[optopt(~\"t\")];\n         let rs = getopts(args, opts);\n         match rs {\n-          Err(f) => check_fail_type(f, OptionDuplicated_),\n+          Err(copy f) => check_fail_type(f, OptionDuplicated_),\n           _ => fail\n         }\n     }\n@@ -668,7 +676,7 @@ mod tests {\n         let opts = ~[optflag(~\"test\")];\n         let rs = getopts(args, opts);\n         match rs {\n-          Ok(m) => assert (opt_present(m, ~\"test\")),\n+          Ok(copy m) => assert (opt_present(m, ~\"test\")),\n           _ => fail\n         }\n     }\n@@ -679,7 +687,7 @@ mod tests {\n         let opts = ~[optflag(~\"test\")];\n         let rs = getopts(args, opts);\n         match rs {\n-          Ok(m) => assert (!opt_present(m, ~\"test\")),\n+          Ok(copy m) => assert (!opt_present(m, ~\"test\")),\n           _ => fail\n         }\n     }\n@@ -690,7 +698,7 @@ mod tests {\n         let opts = ~[optflag(~\"test\")];\n         let rs = getopts(args, opts);\n         match rs {\n-          Err(f) => {\n+          Err(copy f) => {\n             log(error, fail_str(f));\n             check_fail_type(f, UnexpectedArgument_);\n           }\n@@ -704,7 +712,7 @@ mod tests {\n         let opts = ~[optflag(~\"test\")];\n         let rs = getopts(args, opts);\n         match rs {\n-          Err(f) => check_fail_type(f, OptionDuplicated_),\n+          Err(copy f) => check_fail_type(f, OptionDuplicated_),\n           _ => fail\n         }\n     }\n@@ -715,7 +723,7 @@ mod tests {\n         let opts = ~[optflag(~\"t\")];\n         let rs = getopts(args, opts);\n         match rs {\n-          Ok(m) => assert (opt_present(m, ~\"t\")),\n+          Ok(copy m) => assert (opt_present(m, ~\"t\")),\n           _ => fail\n         }\n     }\n@@ -726,7 +734,7 @@ mod tests {\n         let opts = ~[optflag(~\"t\")];\n         let rs = getopts(args, opts);\n         match rs {\n-          Ok(m) => assert (!opt_present(m, ~\"t\")),\n+          Ok(copy m) => assert (!opt_present(m, ~\"t\")),\n           _ => fail\n         }\n     }\n@@ -737,7 +745,7 @@ mod tests {\n         let opts = ~[optflag(~\"t\")];\n         let rs = getopts(args, opts);\n         match rs {\n-          Ok(m) => {\n+          Ok(ref m) => {\n             // The next variable after the flag is just a free argument\n \n             assert (m.free[0] == ~\"20\");\n@@ -752,7 +760,7 @@ mod tests {\n         let opts = ~[optflag(~\"t\")];\n         let rs = getopts(args, opts);\n         match rs {\n-          Err(f) => check_fail_type(f, OptionDuplicated_),\n+          Err(copy f) => check_fail_type(f, OptionDuplicated_),\n           _ => fail\n         }\n     }\n@@ -765,7 +773,7 @@ mod tests {\n         let opts = ~[optmulti(~\"test\")];\n         let rs = getopts(args, opts);\n         match rs {\n-          Ok(m) => {\n+          Ok(copy m) => {\n             assert (opt_present(m, ~\"test\"));\n             assert (opt_str(m, ~\"test\") == ~\"20\");\n           }\n@@ -779,7 +787,7 @@ mod tests {\n         let opts = ~[optmulti(~\"test\")];\n         let rs = getopts(args, opts);\n         match rs {\n-          Ok(m) => assert (!opt_present(m, ~\"test\")),\n+          Ok(copy m) => assert (!opt_present(m, ~\"test\")),\n           _ => fail\n         }\n     }\n@@ -790,7 +798,7 @@ mod tests {\n         let opts = ~[optmulti(~\"test\")];\n         let rs = getopts(args, opts);\n         match rs {\n-          Err(f) => check_fail_type(f, ArgumentMissing_),\n+          Err(copy f) => check_fail_type(f, ArgumentMissing_),\n           _ => fail\n         }\n     }\n@@ -801,7 +809,7 @@ mod tests {\n         let opts = ~[optmulti(~\"test\")];\n         let rs = getopts(args, opts);\n         match rs {\n-          Ok(m) => {\n+          Ok(copy m) => {\n               assert (opt_present(m, ~\"test\"));\n               assert (opt_str(m, ~\"test\") == ~\"20\");\n               let pair = opt_strs(m, ~\"test\");\n@@ -818,7 +826,7 @@ mod tests {\n         let opts = ~[optmulti(~\"t\")];\n         let rs = getopts(args, opts);\n         match rs {\n-          Ok(m) => {\n+          Ok(copy m) => {\n             assert (opt_present(m, ~\"t\"));\n             assert (opt_str(m, ~\"t\") == ~\"20\");\n           }\n@@ -832,7 +840,7 @@ mod tests {\n         let opts = ~[optmulti(~\"t\")];\n         let rs = getopts(args, opts);\n         match rs {\n-          Ok(m) => assert (!opt_present(m, ~\"t\")),\n+          Ok(copy m) => assert (!opt_present(m, ~\"t\")),\n           _ => fail\n         }\n     }\n@@ -843,7 +851,7 @@ mod tests {\n         let opts = ~[optmulti(~\"t\")];\n         let rs = getopts(args, opts);\n         match rs {\n-          Err(f) => check_fail_type(f, ArgumentMissing_),\n+          Err(copy f) => check_fail_type(f, ArgumentMissing_),\n           _ => fail\n         }\n     }\n@@ -854,7 +862,7 @@ mod tests {\n         let opts = ~[optmulti(~\"t\")];\n         let rs = getopts(args, opts);\n         match rs {\n-          Ok(m) => {\n+          Ok(copy m) => {\n             assert (opt_present(m, ~\"t\"));\n             assert (opt_str(m, ~\"t\") == ~\"20\");\n             let pair = opt_strs(m, ~\"t\");\n@@ -871,7 +879,7 @@ mod tests {\n         let opts = ~[optmulti(~\"t\")];\n         let rs = getopts(args, opts);\n         match rs {\n-          Err(f) => check_fail_type(f, UnrecognizedOption_),\n+          Err(copy f) => check_fail_type(f, UnrecognizedOption_),\n           _ => fail\n         }\n     }\n@@ -882,7 +890,7 @@ mod tests {\n         let opts = ~[optmulti(~\"test\")];\n         let rs = getopts(args, opts);\n         match rs {\n-          Err(f) => check_fail_type(f, UnrecognizedOption_),\n+          Err(copy f) => check_fail_type(f, UnrecognizedOption_),\n           _ => fail\n         }\n     }\n@@ -899,7 +907,7 @@ mod tests {\n              optopt(~\"notpresent\")];\n         let rs = getopts(args, opts);\n         match rs {\n-          Ok(m) => {\n+          Ok(copy m) => {\n             assert (m.free[0] == ~\"prog\");\n             assert (m.free[1] == ~\"free1\");\n             assert (opt_str(m, ~\"s\") == ~\"20\");\n@@ -924,8 +932,8 @@ mod tests {\n         let args = ~[~\"-e\", ~\"foo\", ~\"--encrypt\", ~\"foo\"];\n         let opts = ~[optopt(~\"e\"), optopt(~\"encrypt\")];\n         let matches = match getopts(args, opts) {\n-          result::Ok(m) => m,\n-          result::Err(_f) => fail\n+          result::Ok(move m) => m,\n+          result::Err(_) => fail\n         };\n         assert opts_present(matches, ~[~\"e\"]);\n         assert opts_present(matches, ~[~\"encrypt\"]);\n@@ -945,8 +953,8 @@ mod tests {\n         let args = ~[~\"-Lfoo\"];\n         let opts = ~[optmulti(~\"L\")];\n         let matches = match getopts(args, opts) {\n-          result::Ok(m) => m,\n-          result::Err(_f) => fail\n+          result::Ok(move m) => m,\n+          result::Err(_) => fail\n         };\n         assert opts_present(matches, ~[~\"L\"]);\n         assert opts_str(matches, ~[~\"L\"]) == ~\"foo\";"}, {"sha": "059b5c225450ef8aea7180e1435421735b5ddbc9", "filename": "src/libstd/json.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a09a49627e8ef1227e8585e0a696bc6dcfa60b5b/src%2Flibstd%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a09a49627e8ef1227e8585e0a696bc6dcfa60b5b/src%2Flibstd%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fjson.rs?ref=a09a49627e8ef1227e8585e0a696bc6dcfa60b5b", "patch": "@@ -1133,7 +1133,7 @@ mod tests {\n \n         for items.each |item| {\n             match *item {\n-                (key, value) => { d.insert(copy key, copy value); },\n+                (copy key, copy value) => { d.insert(key, value); },\n             }\n         };\n "}, {"sha": "202ca548d6bdbe0519372dc82e5a89b7cf8d41db", "filename": "src/libstd/net_ip.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a09a49627e8ef1227e8585e0a696bc6dcfa60b5b/src%2Flibstd%2Fnet_ip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a09a49627e8ef1227e8585e0a696bc6dcfa60b5b/src%2Flibstd%2Fnet_ip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_ip.rs?ref=a09a49627e8ef1227e8585e0a696bc6dcfa60b5b", "patch": "@@ -329,11 +329,11 @@ mod test {\n     #[test]\n     fn test_ip_ipv4_bad_parse() {\n         match v4::try_parse_addr(~\"b4df00d\") {\n-          result::Err(err_info) => {\n+          result::Err(ref err_info) => {\n             log(debug, fmt!(\"got error as expected %?\", err_info));\n             assert true;\n           }\n-          result::Ok(addr) => {\n+          result::Ok(ref addr) => {\n             fail fmt!(\"Expected failure, but got addr %?\", addr);\n           }\n         }\n@@ -342,11 +342,11 @@ mod test {\n     #[ignore(target_os=\"win32\")]\n     fn test_ip_ipv6_bad_parse() {\n         match v6::try_parse_addr(~\"::,~2234k;\") {\n-          result::Err(err_info) => {\n+          result::Err(ref err_info) => {\n             log(debug, fmt!(\"got error as expected %?\", err_info));\n             assert true;\n           }\n-          result::Ok(addr) => {\n+          result::Ok(ref addr) => {\n             fail fmt!(\"Expected failure, but got addr %?\", addr);\n           }\n         }"}, {"sha": "017e2141b9e787a91ec8d9c5a5f1a23faa3d9cf7", "filename": "src/libstd/net_tcp.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a09a49627e8ef1227e8585e0a696bc6dcfa60b5b/src%2Flibstd%2Fnet_tcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a09a49627e8ef1227e8585e0a696bc6dcfa60b5b/src%2Flibstd%2Fnet_tcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_tcp.rs?ref=a09a49627e8ef1227e8585e0a696bc6dcfa60b5b", "patch": "@@ -703,8 +703,9 @@ fn listen_common(+host_ip: ip::IpAddr, port: uint, backlog: uint,\n         stream_closed_po.recv();\n         match kill_result {\n           // some failure post bind/listen\n-          Some(ref err_data) => result::Err(GenericListenErr(err_data.err_name,\n-                                                           err_data.err_msg)),\n+          Some(ref err_data) => result::Err(GenericListenErr(\n+              err_data.err_name,\n+              err_data.err_msg)),\n           // clean exit\n           None => result::Ok(())\n         }"}, {"sha": "3f10fdb2b1deb875b79096b5503614883b1c66e3", "filename": "src/libstd/rope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a09a49627e8ef1227e8585e0a696bc6dcfa60b5b/src%2Flibstd%2Frope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a09a49627e8ef1227e8585e0a696bc6dcfa60b5b/src%2Flibstd%2Frope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frope.rs?ref=a09a49627e8ef1227e8585e0a696bc6dcfa60b5b", "patch": "@@ -1239,7 +1239,7 @@ mod tests {\n                         *x.content, x.byte_offset,\n                         x.byte_offset + x.byte_len);\n                   }\n-                  node::Concat(x) => {\n+                  node::Concat(ref x) => {\n                     aux(str, x.left);\n                     aux(str, x.right);\n                   }"}, {"sha": "37fcbf6f4caa0aa2461eefcce9e7480aea1189db", "filename": "src/libstd/tempfile.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a09a49627e8ef1227e8585e0a696bc6dcfa60b5b/src%2Flibstd%2Ftempfile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a09a49627e8ef1227e8585e0a696bc6dcfa60b5b/src%2Flibstd%2Ftempfile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftempfile.rs?ref=a09a49627e8ef1227e8585e0a696bc6dcfa60b5b", "patch": "@@ -23,8 +23,8 @@ pub fn mkdtemp(tmpdir: &Path, suffix: &str) -> Option<Path> {\n fn test_mkdtemp() {\n     let r = mkdtemp(&Path(\".\"), \"foobar\");\n     match r {\n-        Some(p) => {\n-            os::remove_dir(&p);\n+        Some(ref p) => {\n+            os::remove_dir(p);\n             assert(str::ends_with(p.to_str(), \"foobar\"));\n         }\n         _ => assert(false)"}, {"sha": "9ea43177ceafb75737da9acff358a84b214da5fb", "filename": "src/libstd/test.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a09a49627e8ef1227e8585e0a696bc6dcfa60b5b/src%2Flibstd%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a09a49627e8ef1227e8585e0a696bc6dcfa60b5b/src%2Flibstd%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftest.rs?ref=a09a49627e8ef1227e8585e0a696bc6dcfa60b5b", "patch": "@@ -124,7 +124,8 @@ fn run_tests_console(opts: &TestOpts,\n             let noun = if st.total != 1u { ~\"tests\" } else { ~\"test\" };\n             st.out.write_line(fmt!(\"\\nrunning %u %s\", st.total, noun));\n           }\n-          TeWait(ref test) => st.out.write_str(fmt!(\"test %s ... \", test.name)),\n+          TeWait(ref test) => st.out.write_str(\n+              fmt!(\"test %s ... \", test.name)),\n           TeResult(copy test, result) => {\n             match st.log_out {\n                 Some(f) => write_log(f, result, &test),\n@@ -490,7 +491,7 @@ mod tests {\n     fn first_free_arg_should_be_a_filter() {\n         let args = ~[~\"progname\", ~\"filter\"];\n         let opts = match parse_opts(args) {\n-          either::Left(o) => o,\n+          either::Left(copy o) => o,\n           _ => fail ~\"Malformed arg in first_free_arg_should_be_a_filter\"\n         };\n         assert ~\"filter\" == opts.filter.get();\n@@ -500,7 +501,7 @@ mod tests {\n     fn parse_ignored_flag() {\n         let args = ~[~\"progname\", ~\"filter\", ~\"--ignored\"];\n         let opts = match parse_opts(args) {\n-          either::Left(o) => o,\n+          either::Left(copy o) => o,\n           _ => fail ~\"Malformed arg in parse_ignored_flag\"\n         };\n         assert (opts.run_ignored);\n@@ -563,7 +564,7 @@ mod tests {\n \n         for vec::each(pairs) |p| {\n             match *p {\n-                (a, b) => { assert (a == b.name); }\n+                (ref a, ref b) => { assert (*a == b.name); }\n             }\n         }\n     }"}, {"sha": "9f6f9b07737c68736b34f1e447697d6e6d848fdb", "filename": "src/libstd/time.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a09a49627e8ef1227e8585e0a696bc6dcfa60b5b/src%2Flibstd%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a09a49627e8ef1227e8585e0a696bc6dcfa60b5b/src%2Flibstd%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime.rs?ref=a09a49627e8ef1227e8585e0a696bc6dcfa60b5b", "patch": "@@ -978,7 +978,7 @@ mod tests {\n         tzset();\n \n         match strptime(~\"\", ~\"\") {\n-          Ok(tm) => {\n+          Ok(ref tm) => {\n             assert tm.tm_sec == 0_i32;\n             assert tm.tm_min == 0_i32;\n             assert tm.tm_hour == 0_i32;\n@@ -1000,8 +1000,8 @@ mod tests {\n             == Err(~\"Invalid time\");\n \n         match strptime(~\"Fri Feb 13 15:31:30 2009\", format) {\n-          Err(e) => fail e,\n-          Ok(tm) => {\n+          Err(copy e) => fail e,\n+          Ok(ref tm) => {\n             assert tm.tm_sec == 30_i32;\n             assert tm.tm_min == 31_i32;\n             assert tm.tm_hour == 15_i32;\n@@ -1019,8 +1019,8 @@ mod tests {\n \n         fn test(s: &str, format: &str) -> bool {\n             match strptime(s, format) {\n-              Ok(tm) => tm.strftime(format) == str::from_slice(s),\n-              Err(e) => fail e\n+              Ok(ref tm) => tm.strftime(format) == str::from_slice(s),\n+              Err(copy e) => fail e\n             }\n         }\n "}]}