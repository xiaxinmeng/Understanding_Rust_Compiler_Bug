{"sha": "df8752bf3f92f657eb89ba86888c1b8b94c5e8d9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmODc1MmJmM2Y5MmY2NTdlYjg5YmE4Njg4OGMxYjhiOTRjNWU4ZDk=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-03-30T09:33:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-30T09:33:43Z"}, "message": "Merge #3754\n\n3754: Use automatic thread joining for cargo-watch r=matklad a=matklad\n\nr? @kiljacken \n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "2f46877e85c6a10b810dd6ff2a0e0c680c800bda", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f46877e85c6a10b810dd6ff2a0e0c680c800bda"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df8752bf3f92f657eb89ba86888c1b8b94c5e8d9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJegbz3CRBK7hj4Ov3rIwAAdHIIAJVn3wzbIyqACwiU80rUZJQz\nOJ/jZsXYoHC/ENv8kdm3paOhgz/KatiGIWxMfno5ARvmtjlxpEwgU7a79I8c4bxp\nVCOpI0X5BFF+EEDUBTz1fJAv96qlmtFJS1O+mS8CWe/aiykp+Cj2Lv5EwHrerhc0\n24B2bErwpdq9lpDzBxy9YWo+H8AIk4h03azg1rmVIAsIlO5KkCAz00XTuB1tLzPw\n8hW6C/6Di938/+B89acf6TAld9rKePzA/fLzgIB3r0Ss25/yonrltkQKLUYQpDAT\nk4dACWBQo58FQiuP8uMie3nUbNy8Jk/fQJiZCBbl05E06o6nd8d9uOsJcEnF7os=\n=jpNo\n-----END PGP SIGNATURE-----\n", "payload": "tree 2f46877e85c6a10b810dd6ff2a0e0c680c800bda\nparent 846cbe7d4eb0a5f1b1c943180fdf03b81ede1f24\nparent 12297ab67533200748ee9f60da4bc86dee1133d9\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1585560823 +0000\ncommitter GitHub <noreply@github.com> 1585560823 +0000\n\nMerge #3754\n\n3754: Use automatic thread joining for cargo-watch r=matklad a=matklad\n\nr? @kiljacken \n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df8752bf3f92f657eb89ba86888c1b8b94c5e8d9", "html_url": "https://github.com/rust-lang/rust/commit/df8752bf3f92f657eb89ba86888c1b8b94c5e8d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df8752bf3f92f657eb89ba86888c1b8b94c5e8d9/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "846cbe7d4eb0a5f1b1c943180fdf03b81ede1f24", "url": "https://api.github.com/repos/rust-lang/rust/commits/846cbe7d4eb0a5f1b1c943180fdf03b81ede1f24", "html_url": "https://github.com/rust-lang/rust/commit/846cbe7d4eb0a5f1b1c943180fdf03b81ede1f24"}, {"sha": "12297ab67533200748ee9f60da4bc86dee1133d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/12297ab67533200748ee9f60da4bc86dee1133d9", "html_url": "https://github.com/rust-lang/rust/commit/12297ab67533200748ee9f60da4bc86dee1133d9"}], "stats": {"total": 67, "additions": 23, "deletions": 44}, "files": [{"sha": "a3887ce99c59e9bd032ea33b68b0c959f9b6580c", "filename": "Cargo.lock", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/df8752bf3f92f657eb89ba86888c1b8b94c5e8d9/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/df8752bf3f92f657eb89ba86888c1b8b94c5e8d9/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=df8752bf3f92f657eb89ba86888c1b8b94c5e8d9", "patch": "@@ -563,9 +563,9 @@ dependencies = [\n \n [[package]]\n name = \"jod-thread\"\n-version = \"0.1.0\"\n+version = \"0.1.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"2f52a11f73b88fab829a0e4d9e13ea5982c7ac457c72eb3541d82a4afdfce4ff\"\n+checksum = \"4022656272c3e564a7cdebcaaba6518d844b0d0c1836597196efb5bfeb98bb49\"\n \n [[package]]\n name = \"kernel32-sys\"\n@@ -893,6 +893,7 @@ dependencies = [\n  \"cargo_metadata\",\n  \"crossbeam-channel\",\n  \"insta\",\n+ \"jod-thread\",\n  \"log\",\n  \"lsp-types\",\n  \"serde_json\","}, {"sha": "300033a18375caa860daec7fee0313f5d7749dd6", "filename": "crates/ra_cargo_watch/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df8752bf3f92f657eb89ba86888c1b8b94c5e8d9/crates%2Fra_cargo_watch%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/df8752bf3f92f657eb89ba86888c1b8b94c5e8d9/crates%2Fra_cargo_watch%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cargo_watch%2FCargo.toml?ref=df8752bf3f92f657eb89ba86888c1b8b94c5e8d9", "patch": "@@ -10,6 +10,7 @@ lsp-types = { version = \"0.73.0\", features = [\"proposed\"] }\n log = \"0.4.8\"\n cargo_metadata = \"0.9.1\"\n serde_json = \"1.0.48\"\n+jod-thread = \"0.1.1\"\n \n [dev-dependencies]\n insta = \"0.15.0\""}, {"sha": "1cac954c393a11efc5bb4ebdf8a95f103cbfad1a", "filename": "crates/ra_cargo_watch/src/lib.rs", "status": "modified", "additions": 9, "deletions": 41, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/df8752bf3f92f657eb89ba86888c1b8b94c5e8d9/crates%2Fra_cargo_watch%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df8752bf3f92f657eb89ba86888c1b8b94c5e8d9/crates%2Fra_cargo_watch%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cargo_watch%2Fsrc%2Flib.rs?ref=df8752bf3f92f657eb89ba86888c1b8b94c5e8d9", "patch": "@@ -12,7 +12,6 @@ use std::{\n     io::{BufRead, BufReader},\n     path::{Path, PathBuf},\n     process::{Command, Stdio},\n-    thread::JoinHandle,\n     time::Instant,\n };\n \n@@ -36,9 +35,10 @@ pub struct CheckOptions {\n /// The spawned thread is shut down when this struct is dropped.\n #[derive(Debug)]\n pub struct CheckWatcher {\n-    pub task_recv: Receiver<CheckTask>,\n+    // XXX: drop order is significant\n     cmd_send: Option<Sender<CheckCommand>>,\n-    handle: Option<JoinHandle<()>>,\n+    handle: Option<jod_thread::JoinHandle<()>>,\n+    pub task_recv: Receiver<CheckTask>,\n }\n \n impl CheckWatcher {\n@@ -47,7 +47,7 @@ impl CheckWatcher {\n \n         let (task_send, task_recv) = unbounded::<CheckTask>();\n         let (cmd_send, cmd_recv) = unbounded::<CheckCommand>();\n-        let handle = std::thread::spawn(move || {\n+        let handle = jod_thread::spawn(move || {\n             let mut check = CheckWatcherThread::new(options, workspace_root);\n             check.run(&task_send, &cmd_recv);\n         });\n@@ -67,22 +67,6 @@ impl CheckWatcher {\n     }\n }\n \n-impl std::ops::Drop for CheckWatcher {\n-    fn drop(&mut self) {\n-        if let Some(handle) = self.handle.take() {\n-            // Take the sender out of the option\n-            let cmd_send = self.cmd_send.take();\n-\n-            // Dropping the sender finishes the thread loop\n-            drop(cmd_send);\n-\n-            // Join the thread, it should finish shortly. We don't really care\n-            // whether it panicked, so it is safe to ignore the result\n-            let _ = handle.join();\n-        }\n-    }\n-}\n-\n #[derive(Debug)]\n pub enum CheckTask {\n     /// Request a clearing of all cached diagnostics from the check watcher\n@@ -237,8 +221,9 @@ pub struct DiagnosticWithFixes {\n /// The correct way to dispose of the thread is to drop it, on which the\n /// sub-process will be killed, and the thread will be joined.\n struct WatchThread {\n-    handle: Option<JoinHandle<()>>,\n+    // XXX: drop order is significant\n     message_recv: Receiver<CheckEvent>,\n+    _handle: Option<jod_thread::JoinHandle<()>>,\n }\n \n enum CheckEvent {\n@@ -333,7 +318,7 @@ pub fn run_cargo(\n \n impl WatchThread {\n     fn dummy() -> WatchThread {\n-        WatchThread { handle: None, message_recv: never() }\n+        WatchThread { message_recv: never(), _handle: None }\n     }\n \n     fn new(options: &CheckOptions, workspace_root: &Path) -> WatchThread {\n@@ -352,7 +337,7 @@ impl WatchThread {\n         let (message_send, message_recv) = unbounded();\n         let workspace_root = workspace_root.to_owned();\n         let handle = if options.enable {\n-            Some(std::thread::spawn(move || {\n+            Some(jod_thread::spawn(move || {\n                 // If we trigger an error here, we will do so in the loop instead,\n                 // which will break out of the loop, and continue the shutdown\n                 let _ = message_send.send(CheckEvent::Begin);\n@@ -383,23 +368,6 @@ impl WatchThread {\n         } else {\n             None\n         };\n-        WatchThread { handle, message_recv }\n-    }\n-}\n-\n-impl std::ops::Drop for WatchThread {\n-    fn drop(&mut self) {\n-        if let Some(handle) = self.handle.take() {\n-            // Replace our reciever with dummy one, so we can drop and close the\n-            // one actually communicating with the thread\n-            let recv = std::mem::replace(&mut self.message_recv, never());\n-\n-            // Dropping the original reciever initiates thread sub-process shutdown\n-            drop(recv);\n-\n-            // Join the thread, it should finish shortly. We don't really care\n-            // whether it panicked, so it is safe to ignore the result\n-            let _ = handle.join();\n-        }\n+        WatchThread { message_recv, _handle: handle }\n     }\n }"}, {"sha": "00ea3a9b067efa97fe01f47b81646cbb30275918", "filename": "crates/ra_prof/src/lib.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/df8752bf3f92f657eb89ba86888c1b8b94c5e8d9/crates%2Fra_prof%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df8752bf3f92f657eb89ba86888c1b8b94c5e8d9/crates%2Fra_prof%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_prof%2Fsrc%2Flib.rs?ref=df8752bf3f92f657eb89ba86888c1b8b94c5e8d9", "patch": "@@ -339,6 +339,14 @@ pub fn print_backtrace() {\n     let bt = backtrace::Backtrace::new();\n     eprintln!(\"{:?}\", bt);\n }\n+#[cfg(not(feature = \"backtrace\"))]\n+pub fn print_backtrace() {\n+    eprintln!(\n+        r#\"enable the backtrace feature:\n+    ra_prof = {{ path = \"../ra_prof\", features = [ \"backtrace\"] }}\n+\"#\n+    );\n+}\n \n thread_local!(static IN_SCOPE: RefCell<bool> = RefCell::new(false));\n "}, {"sha": "67f3c9332e652cfcc07ad0aa7dc76a00e1ce820b", "filename": "crates/rust-analyzer/tests/heavy_tests/support.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/df8752bf3f92f657eb89ba86888c1b8b94c5e8d9/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fsupport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df8752bf3f92f657eb89ba86888c1b8b94c5e8d9/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fsupport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fsupport.rs?ref=df8752bf3f92f657eb89ba86888c1b8b94c5e8d9", "patch": "@@ -83,9 +83,10 @@ pub fn project(fixture: &str) -> Server {\n pub struct Server {\n     req_id: Cell<u64>,\n     messages: RefCell<Vec<Message>>,\n-    dir: TempDir,\n     _thread: jod_thread::JoinHandle<()>,\n     client: Connection,\n+    /// XXX: remove the tempdir last\n+    dir: TempDir,\n }\n \n impl Server {"}]}