{"sha": "a182a67ceac678d067ea193b691c416409b67680", "node_id": "C_kwDOAAsO6NoAKGExODJhNjdjZWFjNjc4ZDA2N2VhMTkzYjY5MWM0MTY0MDliNjc2ODA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-14T17:33:28Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-14T17:33:28Z"}, "message": "Auto merge of #10311 - samueltardieu:issue-10304, r=Jarcho\n\n[never_loop] Fix #10304\n\nIt is not sufficient to ignore break from a block inside the loop. Instructions after the break must be ignored, as they are unreachable. This is also true for all instructions in outer blocks and loops until the right block is reached.\n\nFixes #10304\n\n---\n\nchangelog: FP: [`never_loop`]: No longer lints, for statements following break statements for outer blocks.\n[#10311](https://github.com/rust-lang/rust-clippy/pull/10311)\n<!-- changelog_checked-->", "tree": {"sha": "e78dd3f6e74e283edf68399f786ed65406f0c843", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e78dd3f6e74e283edf68399f786ed65406f0c843"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a182a67ceac678d067ea193b691c416409b67680", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a182a67ceac678d067ea193b691c416409b67680", "html_url": "https://github.com/rust-lang/rust/commit/a182a67ceac678d067ea193b691c416409b67680", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a182a67ceac678d067ea193b691c416409b67680/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "63562a6854f1ec95f5e53936b5cec65a58aca1da", "url": "https://api.github.com/repos/rust-lang/rust/commits/63562a6854f1ec95f5e53936b5cec65a58aca1da", "html_url": "https://github.com/rust-lang/rust/commit/63562a6854f1ec95f5e53936b5cec65a58aca1da"}, {"sha": "657ee48bec2c02ad6885176ea37658bddf6ce59a", "url": "https://api.github.com/repos/rust-lang/rust/commits/657ee48bec2c02ad6885176ea37658bddf6ce59a", "html_url": "https://github.com/rust-lang/rust/commit/657ee48bec2c02ad6885176ea37658bddf6ce59a"}], "stats": {"total": 119, "additions": 93, "deletions": 26}, "files": [{"sha": "ea7630ce56dd352b7d4a88f0de3f9413b614320c", "filename": "clippy_lints/src/loops/never_loop.rs", "status": "modified", "additions": 34, "deletions": 25, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/a182a67ceac678d067ea193b691c416409b67680/clippy_lints%2Fsrc%2Floops%2Fnever_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a182a67ceac678d067ea193b691c416409b67680/clippy_lints%2Fsrc%2Floops%2Fnever_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fnever_loop.rs?ref=a182a67ceac678d067ea193b691c416409b67680", "patch": "@@ -39,6 +39,7 @@ pub(super) fn check(\n             });\n         },\n         NeverLoopResult::MayContinueMainLoop | NeverLoopResult::Otherwise => (),\n+        NeverLoopResult::IgnoreUntilEnd(_) => unreachable!(),\n     }\n }\n \n@@ -48,6 +49,8 @@ enum NeverLoopResult {\n     AlwaysBreak,\n     // A continue may occur for the main loop.\n     MayContinueMainLoop,\n+    // Ignore everything until the end of the block with this id\n+    IgnoreUntilEnd(HirId),\n     Otherwise,\n }\n \n@@ -56,34 +59,34 @@ fn absorb_break(arg: NeverLoopResult) -> NeverLoopResult {\n     match arg {\n         NeverLoopResult::AlwaysBreak | NeverLoopResult::Otherwise => NeverLoopResult::Otherwise,\n         NeverLoopResult::MayContinueMainLoop => NeverLoopResult::MayContinueMainLoop,\n+        NeverLoopResult::IgnoreUntilEnd(id) => NeverLoopResult::IgnoreUntilEnd(id),\n     }\n }\n \n // Combine two results for parts that are called in order.\n #[must_use]\n fn combine_seq(first: NeverLoopResult, second: NeverLoopResult) -> NeverLoopResult {\n     match first {\n-        NeverLoopResult::AlwaysBreak | NeverLoopResult::MayContinueMainLoop => first,\n-        NeverLoopResult::Otherwise => second,\n-    }\n-}\n-\n-// Combine two results where both parts are called but not necessarily in order.\n-#[must_use]\n-fn combine_both(left: NeverLoopResult, right: NeverLoopResult) -> NeverLoopResult {\n-    match (left, right) {\n-        (NeverLoopResult::MayContinueMainLoop, _) | (_, NeverLoopResult::MayContinueMainLoop) => {\n-            NeverLoopResult::MayContinueMainLoop\n+        NeverLoopResult::AlwaysBreak | NeverLoopResult::MayContinueMainLoop | NeverLoopResult::IgnoreUntilEnd(_) => {\n+            first\n         },\n-        (NeverLoopResult::AlwaysBreak, _) | (_, NeverLoopResult::AlwaysBreak) => NeverLoopResult::AlwaysBreak,\n-        (NeverLoopResult::Otherwise, NeverLoopResult::Otherwise) => NeverLoopResult::Otherwise,\n+        NeverLoopResult::Otherwise => second,\n     }\n }\n \n // Combine two results where only one of the part may have been executed.\n #[must_use]\n-fn combine_branches(b1: NeverLoopResult, b2: NeverLoopResult) -> NeverLoopResult {\n+fn combine_branches(b1: NeverLoopResult, b2: NeverLoopResult, ignore_ids: &[HirId]) -> NeverLoopResult {\n     match (b1, b2) {\n+        (NeverLoopResult::IgnoreUntilEnd(a), NeverLoopResult::IgnoreUntilEnd(b)) => {\n+            if ignore_ids.iter().find(|&e| e == &a || e == &b).unwrap() == &a {\n+                NeverLoopResult::IgnoreUntilEnd(b)\n+            } else {\n+                NeverLoopResult::IgnoreUntilEnd(a)\n+            }\n+        },\n+        (i @ NeverLoopResult::IgnoreUntilEnd(_), NeverLoopResult::AlwaysBreak)\n+        | (NeverLoopResult::AlwaysBreak, i @ NeverLoopResult::IgnoreUntilEnd(_)) => i,\n         (NeverLoopResult::AlwaysBreak, NeverLoopResult::AlwaysBreak) => NeverLoopResult::AlwaysBreak,\n         (NeverLoopResult::MayContinueMainLoop, _) | (_, NeverLoopResult::MayContinueMainLoop) => {\n             NeverLoopResult::MayContinueMainLoop\n@@ -103,7 +106,7 @@ fn never_loop_block(block: &Block<'_>, ignore_ids: &mut Vec<HirId>, main_loop_id\n         let e = never_loop_expr(e, ignore_ids, main_loop_id);\n         // els is an else block in a let...else binding\n         els.map_or(e, |els| {\n-            combine_branches(e, never_loop_block(els, ignore_ids, main_loop_id))\n+            combine_branches(e, never_loop_block(els, ignore_ids, main_loop_id), ignore_ids)\n         })\n     })\n     .fold(NeverLoopResult::Otherwise, combine_seq)\n@@ -139,7 +142,7 @@ fn never_loop_expr(expr: &Expr<'_>, ignore_ids: &mut Vec<HirId>, main_loop_id: H\n         ExprKind::Struct(_, fields, base) => {\n             let fields = never_loop_expr_all(&mut fields.iter().map(|f| f.expr), ignore_ids, main_loop_id);\n             if let Some(base) = base {\n-                combine_both(fields, never_loop_expr(base, ignore_ids, main_loop_id))\n+                combine_seq(fields, never_loop_expr(base, ignore_ids, main_loop_id))\n             } else {\n                 fields\n             }\n@@ -159,7 +162,7 @@ fn never_loop_expr(expr: &Expr<'_>, ignore_ids: &mut Vec<HirId>, main_loop_id: H\n             let e3 = e3.as_ref().map_or(NeverLoopResult::Otherwise, |e| {\n                 never_loop_expr(e, ignore_ids, main_loop_id)\n             });\n-            combine_seq(e1, combine_branches(e2, e3))\n+            combine_seq(e1, combine_branches(e2, e3, ignore_ids))\n         },\n         ExprKind::Match(e, arms, _) => {\n             let e = never_loop_expr(e, ignore_ids, main_loop_id);\n@@ -175,8 +178,13 @@ fn never_loop_expr(expr: &Expr<'_>, ignore_ids: &mut Vec<HirId>, main_loop_id: H\n                 ignore_ids.push(b.hir_id);\n             }\n             let ret = never_loop_block(b, ignore_ids, main_loop_id);\n-            ignore_ids.pop();\n-            ret\n+            if l.is_some() {\n+                ignore_ids.pop();\n+            }\n+            match ret {\n+                NeverLoopResult::IgnoreUntilEnd(a) if a == b.hir_id => NeverLoopResult::Otherwise,\n+                _ => ret,\n+            }\n         },\n         ExprKind::Continue(d) => {\n             let id = d\n@@ -190,8 +198,8 @@ fn never_loop_expr(expr: &Expr<'_>, ignore_ids: &mut Vec<HirId>, main_loop_id: H\n         },\n         // checks if break targets a block instead of a loop\n         ExprKind::Break(Destination { target_id: Ok(t), .. }, e) if ignore_ids.contains(&t) => e\n-            .map_or(NeverLoopResult::Otherwise, |e| {\n-                combine_seq(never_loop_expr(e, ignore_ids, main_loop_id), NeverLoopResult::Otherwise)\n+            .map_or(NeverLoopResult::IgnoreUntilEnd(t), |e| {\n+                never_loop_expr(e, ignore_ids, main_loop_id)\n             }),\n         ExprKind::Break(_, e) | ExprKind::Ret(e) => e.as_ref().map_or(NeverLoopResult::AlwaysBreak, |e| {\n             combine_seq(\n@@ -218,7 +226,7 @@ fn never_loop_expr(expr: &Expr<'_>, ignore_ids: &mut Vec<HirId>, main_loop_id: H\n                 | InlineAsmOperand::SymFn { .. }\n                 | InlineAsmOperand::SymStatic { .. } => NeverLoopResult::Otherwise,\n             })\n-            .fold(NeverLoopResult::Otherwise, combine_both),\n+            .fold(NeverLoopResult::Otherwise, combine_seq),\n         ExprKind::Yield(_, _)\n         | ExprKind::Closure { .. }\n         | ExprKind::Path(_)\n@@ -234,16 +242,17 @@ fn never_loop_expr_all<'a, T: Iterator<Item = &'a Expr<'a>>>(\n     main_loop_id: HirId,\n ) -> NeverLoopResult {\n     es.map(|e| never_loop_expr(e, ignore_ids, main_loop_id))\n-        .fold(NeverLoopResult::Otherwise, combine_both)\n+        .fold(NeverLoopResult::Otherwise, combine_seq)\n }\n \n fn never_loop_expr_branch<'a, T: Iterator<Item = &'a Expr<'a>>>(\n     e: &mut T,\n     ignore_ids: &mut Vec<HirId>,\n     main_loop_id: HirId,\n ) -> NeverLoopResult {\n-    e.map(|e| never_loop_expr(e, ignore_ids, main_loop_id))\n-        .fold(NeverLoopResult::AlwaysBreak, combine_branches)\n+    e.fold(NeverLoopResult::AlwaysBreak, |a, b| {\n+        combine_branches(a, never_loop_expr(b, ignore_ids, main_loop_id), ignore_ids)\n+    })\n }\n \n fn for_to_if_let_sugg(cx: &LateContext<'_>, iterator: &Expr<'_>, pat: &Pat<'_>) -> String {"}, {"sha": "29821ff96fc0f66bc6f056f3bdc3810f1a0e26b9", "filename": "tests/ui/never_loop.rs", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/a182a67ceac678d067ea193b691c416409b67680/tests%2Fui%2Fnever_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a182a67ceac678d067ea193b691c416409b67680/tests%2Fui%2Fnever_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnever_loop.rs?ref=a182a67ceac678d067ea193b691c416409b67680", "patch": "@@ -250,6 +250,51 @@ pub fn test20() {\n     }\n }\n \n+pub fn test21() {\n+    loop {\n+        'a: {\n+            {}\n+            break 'a;\n+        }\n+    }\n+}\n+\n+// Issue 10304: code after break from block was not considered\n+// unreachable code and was considered for further analysis of\n+// whether the loop would ever be executed or not.\n+pub fn test22() {\n+    for _ in 0..10 {\n+        'block: {\n+            break 'block;\n+            return;\n+        }\n+        println!(\"looped\");\n+    }\n+}\n+\n+pub fn test23() {\n+    for _ in 0..10 {\n+        'block: {\n+            for _ in 0..20 {\n+                break 'block;\n+            }\n+        }\n+        println!(\"looped\");\n+    }\n+}\n+\n+pub fn test24() {\n+    'a: for _ in 0..10 {\n+        'b: {\n+            let x = Some(1);\n+            match x {\n+                None => break 'a,\n+                Some(_) => break 'b,\n+            }\n+        }\n+    }\n+}\n+\n fn main() {\n     test1();\n     test2();"}, {"sha": "704d448644e289428a97389a4651ec96a11a10a3", "filename": "tests/ui/never_loop.stderr", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a182a67ceac678d067ea193b691c416409b67680/tests%2Fui%2Fnever_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a182a67ceac678d067ea193b691c416409b67680/tests%2Fui%2Fnever_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnever_loop.stderr?ref=a182a67ceac678d067ea193b691c416409b67680", "patch": "@@ -126,5 +126,18 @@ LL | |         }\n LL | |     }\n    | |_____^\n \n-error: aborting due to 11 previous errors\n+error: this loop never actually loops\n+  --> $DIR/never_loop.rs:278:13\n+   |\n+LL | /             for _ in 0..20 {\n+LL | |                 break 'block;\n+LL | |             }\n+   | |_____________^\n+   |\n+help: if you need the first element of the iterator, try writing\n+   |\n+LL |             if let Some(_) = (0..20).next() {\n+   |             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+error: aborting due to 12 previous errors\n "}]}