{"sha": "49e6b466e953e5cb56e29cf546204a004f26a985", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5ZTZiNDY2ZTk1M2U1Y2I1NmUyOWNmNTQ2MjA0YTAwNGYyNmE5ODU=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-10-12T17:54:41Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-10-16T23:24:04Z"}, "message": "Mark enums with non-zero discriminant as non-zero", "tree": {"sha": "3ccc4add7f44182566c7c068db5cea391fd93681", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ccc4add7f44182566c7c068db5cea391fd93681"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/49e6b466e953e5cb56e29cf546204a004f26a985", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/49e6b466e953e5cb56e29cf546204a004f26a985", "html_url": "https://github.com/rust-lang/rust/commit/49e6b466e953e5cb56e29cf546204a004f26a985", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/49e6b466e953e5cb56e29cf546204a004f26a985/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6dc035ed911672c6a1f7afc9eed15fb08e574e5b", "url": "https://api.github.com/repos/rust-lang/rust/commits/6dc035ed911672c6a1f7afc9eed15fb08e574e5b", "html_url": "https://github.com/rust-lang/rust/commit/6dc035ed911672c6a1f7afc9eed15fb08e574e5b"}], "stats": {"total": 73, "additions": 58, "deletions": 15}, "files": [{"sha": "5ce43d905ec717cd84ec4c2d83d27f405314f880", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/49e6b466e953e5cb56e29cf546204a004f26a985/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49e6b466e953e5cb56e29cf546204a004f26a985/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=49e6b466e953e5cb56e29cf546204a004f26a985", "patch": "@@ -597,7 +597,8 @@ impl<'a, 'gcx, 'tcx> Struct {\n                                   -> Result<Option<FieldPath>, LayoutError<'gcx>> {\n         let tcx = infcx.tcx.global_tcx();\n         match (ty.layout(infcx)?, &ty.sty) {\n-            (&Scalar { non_zero: true, .. }, _) => Ok(Some(vec![])),\n+            (&Scalar { non_zero: true, .. }, _) |\n+            (&CEnum { non_zero: true, .. }, _) => Ok(Some(vec![])),\n             (&FatPointer { non_zero: true, .. }, _) => {\n                 Ok(Some(vec![FAT_PTR_ADDR as u32]))\n             }\n@@ -769,6 +770,7 @@ pub enum Layout {\n     CEnum {\n         discr: Integer,\n         signed: bool,\n+        non_zero: bool,\n         // Inclusive discriminant range.\n         // If min > max, it represents min...u64::MAX followed by 0...max.\n         // FIXME(eddyb) always use the shortest range, e.g. by finding\n@@ -1002,9 +1004,10 @@ impl<'a, 'gcx, 'tcx> Layout {\n \n                 if def.is_enum() && def.variants.iter().all(|v| v.fields.is_empty()) {\n                     // All bodies empty -> intlike\n-                    let (mut min, mut max) = (i64::MAX, i64::MIN);\n+                    let (mut min, mut max, mut non_zero) = (i64::MAX, i64::MIN, true);\n                     for v in &def.variants {\n                         let x = v.disr_val.to_u64_unchecked() as i64;\n+                        if x == 0 { non_zero = false; }\n                         if x < min { min = x; }\n                         if x > max { max = x; }\n                     }\n@@ -1013,6 +1016,7 @@ impl<'a, 'gcx, 'tcx> Layout {\n                     return success(CEnum {\n                         discr: discr,\n                         signed: signed,\n+                        non_zero: non_zero,\n                         min: min as u64,\n                         max: max as u64\n                     });\n@@ -1069,19 +1073,17 @@ impl<'a, 'gcx, 'tcx> Layout {\n \n                         // FIXME(eddyb) should take advantage of a newtype.\n                         if path == &[0] && variants[discr].len() == 1 {\n-                            match *variants[discr][0].layout(infcx)? {\n-                                Scalar { value, .. } => {\n-                                    return success(RawNullablePointer {\n-                                        nndiscr: discr as u64,\n-                                        value: value\n-                                    });\n-                                }\n-                                _ => {\n-                                    bug!(\"Layout::compute: `{}`'s non-zero \\\n-                                        `{}` field not scalar?!\",\n-                                        ty, variants[discr][0])\n-                                }\n-                            }\n+                            let value = match *variants[discr][0].layout(infcx)? {\n+                                Scalar { value, .. } => value,\n+                                CEnum { discr, .. } => Int(discr),\n+                                _ => bug!(\"Layout::compute: `{}`'s non-zero \\\n+                                           `{}` field not scalar?!\",\n+                                           ty, variants[discr][0])\n+                            };\n+                            return success(RawNullablePointer {\n+                                nndiscr: discr as u64,\n+                                value: value,\n+                            });\n                         }\n \n                         path.push(0); // For GEP through a pointer."}, {"sha": "266506e04b74d0360a8fa33947b8b97d0135d875", "filename": "src/test/run-pass/nonzero-enum.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/49e6b466e953e5cb56e29cf546204a004f26a985/src%2Ftest%2Frun-pass%2Fnonzero-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49e6b466e953e5cb56e29cf546204a004f26a985/src%2Ftest%2Frun-pass%2Fnonzero-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnonzero-enum.rs?ref=49e6b466e953e5cb56e29cf546204a004f26a985", "patch": "@@ -0,0 +1,39 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::mem::size_of;\n+\n+enum E {\n+    A = 1,\n+    B = 2,\n+    C = 3,\n+}\n+\n+struct S {\n+    a: u16,\n+    b: u8,\n+    e: E,\n+}\n+\n+fn main() {\n+    assert_eq!(size_of::<E>(), 1);\n+    assert_eq!(size_of::<Option<E>>(), 1);\n+    assert_eq!(size_of::<Result<E, ()>>(), 1);\n+    assert_eq!(size_of::<S>(), 4);\n+    assert_eq!(size_of::<Option<S>>(), 4);\n+    let enone = None::<E>;\n+    let esome = Some(E::A);\n+    if let Some(..) = enone {\n+        panic!();\n+    }\n+    if let None = esome {\n+        panic!();\n+    }\n+}"}, {"sha": "e6efd45cad1868b2fa87af99ffd19fc702bbff49", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49e6b466e953e5cb56e29cf546204a004f26a985/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49e6b466e953e5cb56e29cf546204a004f26a985/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=49e6b466e953e5cb56e29cf546204a004f26a985", "patch": "@@ -15,6 +15,8 @@\n #![feature(test)]\n #![feature(libc)]\n \n+#![cfg_attr(stage0, feature(question_mark))]\n+\n #![deny(warnings)]\n \n extern crate libc;"}]}