{"sha": "8fa30065aa08503b4365abec62f56ce4f492ab57", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmYTMwMDY1YWEwODUwM2I0MzY1YWJlYzYyZjU2Y2U0ZjQ5MmFiNTc=", "commit": {"author": {"name": "Luqman Aden", "email": "me@luqman.ca", "date": "2014-07-10T00:51:05Z"}, "committer": {"name": "Luqman Aden", "email": "me@luqman.ca", "date": "2014-07-10T00:51:05Z"}, "message": "librustc: Update to reflect changes to how intrinsics are codegened.", "tree": {"sha": "7298e02004d207ce08d2c5f148fd59bd9de2e01e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7298e02004d207ce08d2c5f148fd59bd9de2e01e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8fa30065aa08503b4365abec62f56ce4f492ab57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8fa30065aa08503b4365abec62f56ce4f492ab57", "html_url": "https://github.com/rust-lang/rust/commit/8fa30065aa08503b4365abec62f56ce4f492ab57", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8fa30065aa08503b4365abec62f56ce4f492ab57/comments", "author": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "committer": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "541c6391a7254f513924eeea192d8f4e3d0d8594", "url": "https://api.github.com/repos/rust-lang/rust/commits/541c6391a7254f513924eeea192d8f4e3d0d8594", "html_url": "https://github.com/rust-lang/rust/commit/541c6391a7254f513924eeea192d8f4e3d0d8594"}], "stats": {"total": 44, "additions": 16, "deletions": 28}, "files": [{"sha": "4d329ebd2a00c2afbf56a178c3cae1e5ecceb9ae", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8fa30065aa08503b4365abec62f56ce4f492ab57/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa30065aa08503b4365abec62f56ce4f492ab57/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=8fa30065aa08503b4365abec62f56ce4f492ab57", "patch": "@@ -862,9 +862,12 @@ pub fn trans_external_path(ccx: &CrateContext, did: ast::DefId, t: ty::t) -> Val\n         ty::ty_bare_fn(ref fn_ty) => {\n             match fn_ty.abi.for_target(ccx.sess().targ_cfg.os,\n                                        ccx.sess().targ_cfg.arch) {\n-                Some(Rust) | Some(RustIntrinsic) => {\n+                Some(Rust) => {\n                     get_extern_rust_fn(ccx, t, name.as_slice(), did)\n                 }\n+                Some(RustIntrinsic) => {\n+                    ccx.sess().bug(\"unexpected intrinsic in trans_external_path\")\n+                }\n                 Some(..) | None => {\n                     foreign::register_foreign_item_fn(ccx, fn_ty.abi, t,\n                                                       name.as_slice(), None)\n@@ -1781,9 +1784,9 @@ fn register_fn(ccx: &CrateContext,\n                -> ValueRef {\n     match ty::get(node_type).sty {\n         ty::ty_bare_fn(ref f) => {\n-            assert!(f.abi == Rust || f.abi == RustIntrinsic);\n+            assert!(f.abi == Rust);\n         }\n-        _ => fail!(\"expected bare rust fn or an intrinsic\")\n+        _ => fail!(\"expected bare rust fn\")\n     };\n \n     let llfn = decl_rust_fn(ccx, node_type, sym.as_slice());"}, {"sha": "15415620c5bba2ad40830d0a4372ccd257052d7f", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 6, "deletions": 23, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/8fa30065aa08503b4365abec62f56ce4f492ab57/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa30065aa08503b4365abec62f56ce4f492ab57/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=8fa30065aa08503b4365abec62f56ce4f492ab57", "patch": "@@ -19,7 +19,6 @@\n use arena::TypedArena;\n use back::abi;\n use back::link;\n-use driver::session;\n use lib::llvm::ValueRef;\n use lib::llvm::llvm;\n use metadata::csearch;\n@@ -54,7 +53,6 @@ use util::ppaux::Repr;\n use std::gc::Gc;\n use syntax::ast;\n use synabi = syntax::abi;\n-use syntax::ast_map;\n \n pub struct MethodData {\n     pub llfn: ValueRef,\n@@ -477,27 +475,8 @@ pub fn trans_fn_ref_with_vtables(\n         }\n     };\n \n-    // We must monomorphise if the fn has type parameters, is a rust\n-    // intrinsic, or is a default method.  In particular, if we see an\n-    // intrinsic that is inlined from a different crate, we want to reemit the\n-    // intrinsic instead of trying to call it in the other crate.\n-    let must_monomorphise = if !substs.types.is_empty() || is_default {\n-        true\n-    } else if def_id.krate == ast::LOCAL_CRATE {\n-        let map_node = session::expect(\n-            ccx.sess(),\n-            tcx.map.find(def_id.node),\n-            || \"local item should be in ast map\".to_string());\n-\n-        match map_node {\n-            ast_map::NodeForeignItem(_) => {\n-                tcx.map.get_foreign_abi(def_id.node) == synabi::RustIntrinsic\n-            }\n-            _ => false\n-        }\n-    } else {\n-        false\n-    };\n+    // We must monomorphise if the fn has type parameters or is a default method.\n+    let must_monomorphise = !substs.types.is_empty() || is_default;\n \n     // Create a monomorphic version of generic functions\n     if must_monomorphise {\n@@ -712,6 +691,10 @@ pub fn trans_call_inner<'a>(\n         }\n     };\n \n+    // Intrinsics should not become actual functions.\n+    // We trans them in place in `trans_intrinsic_call`\n+    assert!(abi != synabi::RustIntrinsic);\n+\n     // Generate a location to store the result. If the user does\n     // not care about the result, just make a stack slot.\n     let opt_llretslot = match dest {"}, {"sha": "f73984d3b36fa32635528032874dd7a565c94c13", "filename": "src/librustc/middle/trans/foreign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8fa30065aa08503b4365abec62f56ce4f492ab57/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa30065aa08503b4365abec62f56ce4f492ab57/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=8fa30065aa08503b4365abec62f56ce4f492ab57", "patch": "@@ -76,7 +76,7 @@ pub fn llvm_calling_convention(ccx: &CrateContext,\n     abi.for_target(os, arch).map(|abi| {\n         match abi {\n             RustIntrinsic => {\n-                // Intrinsics are emitted by monomorphic fn\n+                // Intrinsics are emitted at the call site\n                 ccx.sess().bug(\"asked to register intrinsic fn\");\n             }\n "}, {"sha": "f54ab190d5ef8d976f7b2e06d06b4470cfe82cce", "filename": "src/librustc/middle/trans/type_of.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8fa30065aa08503b4365abec62f56ce4f492ab57/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa30065aa08503b4365abec62f56ce4f492ab57/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs?ref=8fa30065aa08503b4365abec62f56ce4f492ab57", "patch": "@@ -75,11 +75,13 @@ pub fn type_of_fn_from_ty(cx: &CrateContext, fty: ty::t) -> Type {\n             type_of_rust_fn(cx, true, f.sig.inputs.as_slice(), f.sig.output)\n         }\n         ty::ty_bare_fn(ref f) => {\n-            if f.abi == abi::Rust || f.abi == abi::RustIntrinsic {\n+            if f.abi == abi::Rust {\n                 type_of_rust_fn(cx,\n                                 false,\n                                 f.sig.inputs.as_slice(),\n                                 f.sig.output)\n+            } else if f.abi == abi::RustIntrinsic {\n+                cx.sess().bug(\"type_of_fn_from_ty given intrinsic\")\n             } else {\n                 foreign::lltype_for_foreign_fn(cx, fty)\n             }"}]}