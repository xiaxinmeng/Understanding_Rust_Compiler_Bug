{"sha": "8307fd7901c9832e7b22ee5139efe6f7f2d291b3", "node_id": "C_kwDOAAsO6NoAKDgzMDdmZDc5MDFjOTgzMmU3YjIyZWU1MTM5ZWZlNmY3ZjJkMjkxYjM", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2023-02-07T18:23:25Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2023-02-07T18:23:25Z"}, "message": "rustdoc: use a newline instead of `<br>` to format code headers\n\nSince these elements now use `white-space: pre-wrap` since\n784665d4ce59c5239791f1f96fa2137e47ca1817, it's fine to use newlines\nfor formatting, which is smaller and a bit less complicated.", "tree": {"sha": "71172e88833836c4f1897082c8f3d5b75b80df11", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/71172e88833836c4f1897082c8f3d5b75b80df11"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8307fd7901c9832e7b22ee5139efe6f7f2d291b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8307fd7901c9832e7b22ee5139efe6f7f2d291b3", "html_url": "https://github.com/rust-lang/rust/commit/8307fd7901c9832e7b22ee5139efe6f7f2d291b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8307fd7901c9832e7b22ee5139efe6f7f2d291b3/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5dd0e1b7ae7bcddce28658487602e8a077737a3e", "url": "https://api.github.com/repos/rust-lang/rust/commits/5dd0e1b7ae7bcddce28658487602e8a077737a3e", "html_url": "https://github.com/rust-lang/rust/commit/5dd0e1b7ae7bcddce28658487602e8a077737a3e"}], "stats": {"total": 100, "additions": 61, "deletions": 39}, "files": [{"sha": "8a7a8ea5fd1f268a69c6e7f39eb319030f032896", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 14, "deletions": 17, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/8307fd7901c9832e7b22ee5139efe6f7f2d291b3/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8307fd7901c9832e7b22ee5139efe6f7f2d291b3/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=8307fd7901c9832e7b22ee5139efe6f7f2d291b3", "patch": "@@ -289,7 +289,7 @@ pub(crate) fn print_where_clause<'a, 'tcx: 'a>(\n                 if f.alternate() {\n                     f.write_str(\" \")?;\n                 } else {\n-                    f.write_str(\"<br>\")?;\n+                    f.write_str(\"\\n\")?;\n                 }\n \n                 match pred {\n@@ -352,24 +352,24 @@ pub(crate) fn print_where_clause<'a, 'tcx: 'a>(\n             }\n         } else {\n             let mut br_with_padding = String::with_capacity(6 * indent + 28);\n-            br_with_padding.push_str(\"<br>\");\n+            br_with_padding.push_str(\"\\n\");\n \n             let padding_amout =\n                 if ending == Ending::Newline { indent + 4 } else { indent + \"fn where \".len() };\n \n             for _ in 0..padding_amout {\n                 br_with_padding.push_str(\" \");\n             }\n-            let where_preds = where_preds.to_string().replace(\"<br>\", &br_with_padding);\n+            let where_preds = where_preds.to_string().replace(\"\\n\", &br_with_padding);\n \n             if ending == Ending::Newline {\n                 let mut clause = \" \".repeat(indent.saturating_sub(1));\n                 write!(clause, \"<span class=\\\"where fmt-newline\\\">where{where_preds},</span>\")?;\n                 clause\n             } else {\n-                // insert a <br> tag after a single space but before multiple spaces at the start\n+                // insert a newline after a single space but before multiple spaces at the start\n                 if indent == 0 {\n-                    format!(\"<br><span class=\\\"where\\\">where{where_preds}</span>\")\n+                    format!(\"\\n<span class=\\\"where\\\">where{where_preds}</span>\")\n                 } else {\n                     // put the first one on the same line as the 'where' keyword\n                     let where_preds = where_preds.replacen(&br_with_padding, \" \", 1);\n@@ -1315,7 +1315,8 @@ impl clean::FnDecl {\n \n     /// * `header_len`: The length of the function header and name. In other words, the number of\n     ///   characters in the function declaration up to but not including the parentheses.\n-    ///   <br>Used to determine line-wrapping.\n+    ///   This is expected to go into a `<pre>`/`code-header` block, so indentation and newlines\n+    ///   are preserved.\n     /// * `indent`: The number of spaces to indent each successive line with, if line-wrapping is\n     ///   necessary.\n     pub(crate) fn full_print<'a, 'tcx: 'a>(\n@@ -1363,7 +1364,7 @@ impl clean::FnDecl {\n                 }\n             } else {\n                 if i > 0 {\n-                    args.push_str(\"<br>\");\n+                    args.push_str(\"\\n\");\n                 }\n                 if input.is_const {\n                     args.push_str(\"const \");\n@@ -1389,7 +1390,7 @@ impl clean::FnDecl {\n         let mut args = args.into_inner();\n \n         if self.c_variadic {\n-            args.push_str(\",<br> ...\");\n+            args.push_str(\",\\n ...\");\n             args_plain.push_str(\", ...\");\n         }\n \n@@ -1399,24 +1400,20 @@ impl clean::FnDecl {\n \n         let declaration_len = header_len + args_plain.len() + arrow_plain.len();\n         let output = if declaration_len > 80 {\n-            let full_pad = format!(\"<br>{}\", \" \".repeat(indent + 4));\n-            let close_pad = format!(\"<br>{}\", \" \".repeat(indent));\n+            let full_pad = format!(\"\\n{}\", \" \".repeat(indent + 4));\n+            let close_pad = format!(\"\\n{}\", \" \".repeat(indent));\n             format!(\n                 \"({pad}{args}{close}){arrow}\",\n                 pad = if self.inputs.values.is_empty() { \"\" } else { &full_pad },\n-                args = args.replace(\"<br>\", &full_pad),\n+                args = args.replace(\"\\n\", &full_pad),\n                 close = close_pad,\n                 arrow = arrow\n             )\n         } else {\n-            format!(\"({args}){arrow}\", args = args.replace(\"<br>\", \" \"), arrow = arrow)\n+            format!(\"({args}){arrow}\", args = args.replace(\"\\n\", \" \"), arrow = arrow)\n         };\n \n-        if f.alternate() {\n-            write!(f, \"{}\", output.replace(\"<br>\", \"\\n\"))\n-        } else {\n-            write!(f, \"{}\", output)\n-        }\n+        write!(f, \"{}\", output)\n     }\n }\n "}, {"sha": "70bcbcb6ff44ae3d5851a71b6f729950a41c4795", "filename": "tests/rustdoc/async-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8307fd7901c9832e7b22ee5139efe6f7f2d291b3/tests%2Frustdoc%2Fasync-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8307fd7901c9832e7b22ee5139efe6f7f2d291b3/tests%2Frustdoc%2Fasync-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fasync-fn.rs?ref=8307fd7901c9832e7b22ee5139efe6f7f2d291b3", "patch": "@@ -77,7 +77,7 @@ struct AsyncFdReadyGuard<'a, T> { x: &'a T }\n \n impl Foo {\n     // @has async_fn/struct.Foo.html\n-    // @has - '//*[@class=\"method\"]' 'pub async fn complicated_lifetimes( &self, context: &impl Bar) -> impl Iterator<Item = &usize>'\n+    // @has - '//*[@class=\"method\"]' 'pub async fn complicated_lifetimes( &self, context: &impl Bar ) -> impl Iterator<Item = &usize>'\n     pub async fn complicated_lifetimes(&self, context: &impl Bar) -> impl Iterator<Item = &usize> {}\n     // taken from `tokio` as an example of a method that was particularly bad before\n     // @has - '//*[@class=\"method\"]' \"pub async fn readable<T>(&self) -> Result<AsyncFdReadyGuard<'_, T>, ()>\""}, {"sha": "cbda095424b7d1536c6ea359a48c86b76c11ecee", "filename": "tests/rustdoc/const-generics/const-generics-docs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8307fd7901c9832e7b22ee5139efe6f7f2d291b3/tests%2Frustdoc%2Fconst-generics%2Fconst-generics-docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8307fd7901c9832e7b22ee5139efe6f7f2d291b3/tests%2Frustdoc%2Fconst-generics%2Fconst-generics-docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fconst-generics%2Fconst-generics-docs.rs?ref=8307fd7901c9832e7b22ee5139efe6f7f2d291b3", "patch": "@@ -31,7 +31,7 @@ impl Trait<{1 + 2}> for u8 {}\n impl<const N: usize> Trait<N> for [u8; N] {}\n \n // @has foo/struct.Foo.html '//pre[@class=\"rust item-decl\"]' \\\n-//      'pub struct Foo<const N: usize>where u8: Trait<N>'\n+//      'pub struct Foo<const N: usize> where u8: Trait<N>'\n pub struct Foo<const N: usize> where u8: Trait<N>;\n // @has foo/struct.Bar.html '//pre[@class=\"rust item-decl\"]' 'pub struct Bar<T, const N: usize>(_)'\n pub struct Bar<T, const N: usize>([T; N]);"}, {"sha": "d73393633f3b8c97b1ea04eee609a46ce59a4d50", "filename": "tests/rustdoc/decl-trailing-whitespace.declaration.html", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8307fd7901c9832e7b22ee5139efe6f7f2d291b3/tests%2Frustdoc%2Fdecl-trailing-whitespace.declaration.html", "raw_url": "https://github.com/rust-lang/rust/raw/8307fd7901c9832e7b22ee5139efe6f7f2d291b3/tests%2Frustdoc%2Fdecl-trailing-whitespace.declaration.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fdecl-trailing-whitespace.declaration.html?ref=8307fd7901c9832e7b22ee5139efe6f7f2d291b3", "patch": "@@ -1,9 +1,23 @@\n <code>pub trait Write {\n     // Required methods\n-    fn <a href=\"#tymethod.poll_write\" class=\"fn\">poll_write</a>(<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self: <a class=\"enum\" href=\"{{channel}}/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"{{channel}}/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt;,<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cx: &amp;mut <a class=\"enum\" href=\"{{channel}}/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"{{channel}}/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt;,<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;buf: &amp;mut [<a class=\"primitive\" href=\"{{channel}}/std/primitive.usize.html\">usize</a>]<br />&#160;&#160;&#160;&#160;) -&gt; <a class=\"enum\" href=\"{{channel}}/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"{{channel}}/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"{{channel}}/std/primitive.usize.html\">usize</a>, <a class=\"struct\" href=\"struct.Error.html\" title=\"struct foo::Error\">Error</a>&gt;&gt;;\n-<span class=\"item-spacer\" />    fn <a href=\"#tymethod.poll_flush\" class=\"fn\">poll_flush</a>(<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self: <a class=\"enum\" href=\"{{channel}}/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"{{channel}}/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt;,<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cx: &amp;mut <a class=\"enum\" href=\"{{channel}}/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"{{channel}}/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt;<br />&#160;&#160;&#160;&#160;) -&gt; <a class=\"enum\" href=\"{{channel}}/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"{{channel}}/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"{{channel}}/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"struct.Error.html\" title=\"struct foo::Error\">Error</a>&gt;&gt;;\n-<span class=\"item-spacer\" />    fn <a href=\"#tymethod.poll_close\" class=\"fn\">poll_close</a>(<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self: <a class=\"enum\" href=\"{{channel}}/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"{{channel}}/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt;,<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cx: &amp;mut <a class=\"enum\" href=\"{{channel}}/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"{{channel}}/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt;<br />&#160;&#160;&#160;&#160;) -&gt; <a class=\"enum\" href=\"{{channel}}/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"{{channel}}/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"{{channel}}/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"struct.Error.html\" title=\"struct foo::Error\">Error</a>&gt;&gt;;\n+    fn <a href=\"#tymethod.poll_write\" class=\"fn\">poll_write</a>(\n+        self: <a class=\"enum\" href=\"{{channel}}/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"{{channel}}/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt;,\n+        cx: &amp;mut <a class=\"enum\" href=\"{{channel}}/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"{{channel}}/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt;,\n+        buf: &amp;mut [<a class=\"primitive\" href=\"{{channel}}/std/primitive.usize.html\">usize</a>]\n+    ) -&gt; <a class=\"enum\" href=\"{{channel}}/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"{{channel}}/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"{{channel}}/std/primitive.usize.html\">usize</a>, <a class=\"struct\" href=\"struct.Error.html\" title=\"struct foo::Error\">Error</a>&gt;&gt;;\n+<span class=\"item-spacer\" />    fn <a href=\"#tymethod.poll_flush\" class=\"fn\">poll_flush</a>(\n+        self: <a class=\"enum\" href=\"{{channel}}/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"{{channel}}/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt;,\n+        cx: &amp;mut <a class=\"enum\" href=\"{{channel}}/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"{{channel}}/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt;\n+    ) -&gt; <a class=\"enum\" href=\"{{channel}}/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"{{channel}}/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"{{channel}}/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"struct.Error.html\" title=\"struct foo::Error\">Error</a>&gt;&gt;;\n+<span class=\"item-spacer\" />    fn <a href=\"#tymethod.poll_close\" class=\"fn\">poll_close</a>(\n+        self: <a class=\"enum\" href=\"{{channel}}/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"{{channel}}/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt;,\n+        cx: &amp;mut <a class=\"enum\" href=\"{{channel}}/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"{{channel}}/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt;\n+    ) -&gt; <a class=\"enum\" href=\"{{channel}}/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"{{channel}}/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"{{channel}}/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"struct.Error.html\" title=\"struct foo::Error\">Error</a>&gt;&gt;;\n \n     // Provided method\n-    fn <a href=\"#method.poll_write_vectored\" class=\"fn\">poll_write_vectored</a>(<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self: <a class=\"enum\" href=\"{{channel}}/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"{{channel}}/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt;,<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cx: &amp;mut <a class=\"enum\" href=\"{{channel}}/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"{{channel}}/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt;,<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;bufs: &amp;[<a class=\"primitive\" href=\"{{channel}}/std/primitive.usize.html\">usize</a>]<br />&#160;&#160;&#160;&#160;) -&gt; <a class=\"enum\" href=\"{{channel}}/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"{{channel}}/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"{{channel}}/std/primitive.usize.html\">usize</a>, <a class=\"struct\" href=\"struct.Error.html\" title=\"struct foo::Error\">Error</a>&gt;&gt; { ... }\n-}</code>\n+    fn <a href=\"#method.poll_write_vectored\" class=\"fn\">poll_write_vectored</a>(\n+        self: <a class=\"enum\" href=\"{{channel}}/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"{{channel}}/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt;,\n+        cx: &amp;mut <a class=\"enum\" href=\"{{channel}}/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"{{channel}}/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt;,\n+        bufs: &amp;[<a class=\"primitive\" href=\"{{channel}}/std/primitive.usize.html\">usize</a>]\n+    ) -&gt; <a class=\"enum\" href=\"{{channel}}/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"{{channel}}/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"{{channel}}/std/primitive.usize.html\">usize</a>, <a class=\"struct\" href=\"struct.Error.html\" title=\"struct foo::Error\">Error</a>&gt;&gt; { ... }\n+}</code>\n\\ No newline at end of file"}, {"sha": "7ab82bb582965909480eee1defb38a96fe149ec6", "filename": "tests/rustdoc/generic-associated-types/gats.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8307fd7901c9832e7b22ee5139efe6f7f2d291b3/tests%2Frustdoc%2Fgeneric-associated-types%2Fgats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8307fd7901c9832e7b22ee5139efe6f7f2d291b3/tests%2Frustdoc%2Fgeneric-associated-types%2Fgats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fgeneric-associated-types%2Fgats.rs?ref=8307fd7901c9832e7b22ee5139efe6f7f2d291b3", "patch": "@@ -2,7 +2,7 @@\n \n // @has foo/trait.LendingIterator.html\n pub trait LendingIterator {\n-    // @has - '//*[@id=\"associatedtype.Item\"]//h4[@class=\"code-header\"]' \"type Item<'a>where Self: 'a\"\n+    // @has - '//*[@id=\"associatedtype.Item\"]//h4[@class=\"code-header\"]' \"type Item<'a> where Self: 'a\"\n     type Item<'a> where Self: 'a;\n \n     // @has - '//*[@id=\"tymethod.next\"]//h4[@class=\"code-header\"]' \\\n@@ -23,7 +23,7 @@ impl LendingIterator for () {\n pub struct Infinite<T>(T);\n \n // @has foo/trait.LendingIterator.html\n-// @has - '//*[@id=\"associatedtype.Item-2\"]//h4[@class=\"code-header\"]' \"type Item<'a>where Self: 'a = &'a T\"\n+// @has - '//*[@id=\"associatedtype.Item-2\"]//h4[@class=\"code-header\"]' \"type Item<'a> where Self: 'a = &'a T\"\n impl<T> LendingIterator for Infinite<T> {\n     type Item<'a> where Self: 'a = &'a T;\n "}, {"sha": "b6a1552bc00caccca655c5439f64878f9567d8d4", "filename": "tests/rustdoc/inline_cross/impl_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8307fd7901c9832e7b22ee5139efe6f7f2d291b3/tests%2Frustdoc%2Finline_cross%2Fimpl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8307fd7901c9832e7b22ee5139efe6f7f2d291b3/tests%2Frustdoc%2Finline_cross%2Fimpl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Finline_cross%2Fimpl_trait.rs?ref=8307fd7901c9832e7b22ee5139efe6f7f2d291b3", "patch": "@@ -11,7 +11,7 @@ pub use impl_trait_aux::func;\n // @has impl_trait/fn.func2.html\n // @has - '//pre[@class=\"rust item-decl\"]' \"func2<T>(\"\n // @has - '//pre[@class=\"rust item-decl\"]' \"_x: impl Deref<Target = Option<T>> + Iterator<Item = T>,\"\n-// @has - '//pre[@class=\"rust item-decl\"]' \"_y: impl Iterator<Item = u8>)\"\n+// @has - '//pre[@class=\"rust item-decl\"]' \"_y: impl Iterator<Item = u8> )\"\n // @!has - '//pre[@class=\"rust item-decl\"]' 'where'\n pub use impl_trait_aux::func2;\n "}, {"sha": "4184086f622abaff7f57fb211360c358ccfe15c8", "filename": "tests/rustdoc/issue-34928.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8307fd7901c9832e7b22ee5139efe6f7f2d291b3/tests%2Frustdoc%2Fissue-34928.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8307fd7901c9832e7b22ee5139efe6f7f2d291b3/tests%2Frustdoc%2Fissue-34928.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fissue-34928.rs?ref=8307fd7901c9832e7b22ee5139efe6f7f2d291b3", "patch": "@@ -2,5 +2,5 @@\n \n pub trait Bar {}\n \n-// @has foo/struct.Foo.html '//pre' 'pub struct Foo<T>(pub T)where T: Bar;'\n+// @has foo/struct.Foo.html '//pre' 'pub struct Foo<T>(pub T) where T: Bar;'\n pub struct Foo<T>(pub T) where T: Bar;"}, {"sha": "571d7f06fdc62e401f5b5c161b9a7f79247f4e44", "filename": "tests/rustdoc/reexports-priv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8307fd7901c9832e7b22ee5139efe6f7f2d291b3/tests%2Frustdoc%2Freexports-priv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8307fd7901c9832e7b22ee5139efe6f7f2d291b3/tests%2Frustdoc%2Freexports-priv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Freexports-priv.rs?ref=8307fd7901c9832e7b22ee5139efe6f7f2d291b3", "patch": "@@ -98,7 +98,7 @@ pub mod outer {\n         pub use reexports::foo;\n         // @has 'foo/outer/inner/fn.foo_crate.html' '//pre[@class=\"rust item-decl\"]' 'pub(crate) fn foo_crate()'\n         pub(crate) use reexports::foo_crate;\n-        // @has 'foo/outer/inner/fn.foo_super.html' '//pre[@class=\"rust item-decl\"]' 'pub(in outer) fn foo_super()'\n+        // @has 'foo/outer/inner/fn.foo_super.html' '//pre[@class=\"rust item-decl\"]' 'pub(in outer) fn foo_super( )'\n         pub(super) use::reexports::foo_super;\n         // @!has 'foo/outer/inner/fn.foo_self.html'\n         pub(self) use reexports::foo_self;"}, {"sha": "ef4294c8f76d3c397131c17862c091e2de5f19f8", "filename": "tests/rustdoc/where.SWhere_Simd_item-decl.html", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8307fd7901c9832e7b22ee5139efe6f7f2d291b3/tests%2Frustdoc%2Fwhere.SWhere_Simd_item-decl.html", "raw_url": "https://github.com/rust-lang/rust/raw/8307fd7901c9832e7b22ee5139efe6f7f2d291b3/tests%2Frustdoc%2Fwhere.SWhere_Simd_item-decl.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fwhere.SWhere_Simd_item-decl.html?ref=8307fd7901c9832e7b22ee5139efe6f7f2d291b3", "patch": "@@ -1 +1,3 @@\n-<pre class=\"rust item-decl\"><code>pub struct Simd&lt;T&gt;(_)<br /><span class=\"where\">where<br />&#160;&#160;&#160;&#160;T: <a class=\"trait\" href=\"trait.MyTrait.html\" title=\"trait foo::MyTrait\">MyTrait</a></span>;</code></pre>\n\\ No newline at end of file\n+<pre class=\"rust item-decl\"><code>pub struct Simd&lt;T&gt;(_)\n+<span class=\"where\">where\n+         T: <a class=\"trait\" href=\"trait.MyTrait.html\" title=\"trait foo::MyTrait\">MyTrait</a></span>;</code></pre>\n\\ No newline at end of file"}, {"sha": "e8ab061e679dd09f7f39d99ac6a5d397fa770da6", "filename": "tests/rustdoc/where.SWhere_TraitWhere_item-decl.html", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8307fd7901c9832e7b22ee5139efe6f7f2d291b3/tests%2Frustdoc%2Fwhere.SWhere_TraitWhere_item-decl.html", "raw_url": "https://github.com/rust-lang/rust/raw/8307fd7901c9832e7b22ee5139efe6f7f2d291b3/tests%2Frustdoc%2Fwhere.SWhere_TraitWhere_item-decl.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fwhere.SWhere_TraitWhere_item-decl.html?ref=8307fd7901c9832e7b22ee5139efe6f7f2d291b3", "patch": "@@ -1,8 +1,13 @@\n <pre class=\"rust item-decl\"><code>pub trait TraitWhere {\n-    type <a href=\"#associatedtype.Item\" class=\"associatedtype\">Item</a>&lt;'a&gt;<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span class=\"where\">where Self: 'a</span>;\n+    type <a href=\"#associatedtype.Item\" class=\"associatedtype\">Item</a>&lt;'a&gt;\n+       <span class=\"where\">where Self: 'a</span>;\n \n     // Provided methods\n-    fn <a href=\"#method.func\" class=\"fn\">func</a>(self)<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span class=\"where\">where Self: <a class=\"trait\" href=\"{{channel}}/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a></span> { ... }\n-<span class=\"item-spacer\" />    fn <a href=\"#method.lines\" class=\"fn\">lines</a>(self) -&gt; <a class=\"struct\" href=\"{{channel}}/std/io/struct.Lines.html\" title=\"struct std::io::Lines\">Lines</a>&lt;Self&gt;<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span class=\"where\">where Self: <a class=\"trait\" href=\"{{channel}}/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a></span> { ... }\n-<span class=\"item-spacer\" />    fn <a href=\"#method.merge\" class=\"fn\">merge</a>&lt;T&gt;(self, a: T)<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span class=\"where\">where Self: <a class=\"trait\" href=\"{{channel}}/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;T: <a class=\"trait\" href=\"{{channel}}/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a></span> { ... }\n+    fn <a href=\"#method.func\" class=\"fn\">func</a>(self)\n+       <span class=\"where\">where Self: <a class=\"trait\" href=\"{{channel}}/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a></span> { ... }\n+<span class=\"item-spacer\" />    fn <a href=\"#method.lines\" class=\"fn\">lines</a>(self) -&gt; <a class=\"struct\" href=\"{{channel}}/std/io/struct.Lines.html\" title=\"struct std::io::Lines\">Lines</a>&lt;Self&gt;\n+       <span class=\"where\">where Self: <a class=\"trait\" href=\"{{channel}}/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a></span> { ... }\n+<span class=\"item-spacer\" />    fn <a href=\"#method.merge\" class=\"fn\">merge</a>&lt;T&gt;(self, a: T)\n+       <span class=\"where\">where Self: <a class=\"trait\" href=\"{{channel}}/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n+             T: <a class=\"trait\" href=\"{{channel}}/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a></span> { ... }\n }</code></pre>\n\\ No newline at end of file"}, {"sha": "8b8a126e89dd524c1364280c2f97445332bd1a98", "filename": "tests/rustdoc/where.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8307fd7901c9832e7b22ee5139efe6f7f2d291b3/tests%2Frustdoc%2Fwhere.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8307fd7901c9832e7b22ee5139efe6f7f2d291b3/tests%2Frustdoc%2Fwhere.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fwhere.rs?ref=8307fd7901c9832e7b22ee5139efe6f7f2d291b3", "patch": "@@ -4,7 +4,7 @@ use std::io::Lines;\n \n pub trait MyTrait { fn dummy(&self) { } }\n \n-// @has foo/struct.Alpha.html '//pre' \"pub struct Alpha<A>(_)where A: MyTrait\"\n+// @has foo/struct.Alpha.html '//pre' \"pub struct Alpha<A>(_) where A: MyTrait\"\n pub struct Alpha<A>(A) where A: MyTrait;\n // @has foo/trait.Bravo.html '//pre' \"pub trait Bravo<B>where B: MyTrait\"\n pub trait Bravo<B> where B: MyTrait { fn get(&self, B: B); }"}, {"sha": "20b60b68e88cfed63dc3f9deb4a1c59fc19f2488", "filename": "tests/rustdoc/whitespace-after-where-clause.enum.html", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8307fd7901c9832e7b22ee5139efe6f7f2d291b3/tests%2Frustdoc%2Fwhitespace-after-where-clause.enum.html", "raw_url": "https://github.com/rust-lang/rust/raw/8307fd7901c9832e7b22ee5139efe6f7f2d291b3/tests%2Frustdoc%2Fwhitespace-after-where-clause.enum.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fwhitespace-after-where-clause.enum.html?ref=8307fd7901c9832e7b22ee5139efe6f7f2d291b3", "patch": "@@ -1,4 +1,5 @@\n-<pre class=\"rust item-decl\"><code>pub enum Cow&lt;'a, B&gt;<span class=\"where fmt-newline\">where<br />&#160;&#160;&#160;&#160;B: <a class=\"trait\" href=\"trait.ToOwned.html\" title=\"trait foo::ToOwned\">ToOwned</a>&lt;dyn <a class=\"trait\" href=\"{{channel}}/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>&gt; + ?<a class=\"trait\" href=\"{{channel}}/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + 'a,</span>{\n+<pre class=\"rust item-decl\"><code>pub enum Cow&lt;'a, B&gt;<span class=\"where fmt-newline\">where\n+    B: <a class=\"trait\" href=\"trait.ToOwned.html\" title=\"trait foo::ToOwned\">ToOwned</a>&lt;dyn <a class=\"trait\" href=\"{{channel}}/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>&gt; + ?<a class=\"trait\" href=\"{{channel}}/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + 'a,</span>{\n     Borrowed(<a class=\"primitive\" href=\"{{channel}}/std/primitive.reference.html\">&amp;'a B</a>),\n     Whatever(<a class=\"primitive\" href=\"{{channel}}/std/primitive.u32.html\">u32</a>),\n }</code></pre>\n\\ No newline at end of file"}, {"sha": "948ddc499da8ad9c8c2b24fc43eb1ab3ba87d1ee", "filename": "tests/rustdoc/whitespace-after-where-clause.struct.html", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8307fd7901c9832e7b22ee5139efe6f7f2d291b3/tests%2Frustdoc%2Fwhitespace-after-where-clause.struct.html", "raw_url": "https://github.com/rust-lang/rust/raw/8307fd7901c9832e7b22ee5139efe6f7f2d291b3/tests%2Frustdoc%2Fwhitespace-after-where-clause.struct.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fwhitespace-after-where-clause.struct.html?ref=8307fd7901c9832e7b22ee5139efe6f7f2d291b3", "patch": "@@ -1,4 +1,5 @@\n-<pre class=\"rust item-decl\"><code>pub struct Struct&lt;'a, B&gt;<span class=\"where fmt-newline\">where<br />&#160;&#160;&#160;&#160;B: <a class=\"trait\" href=\"trait.ToOwned.html\" title=\"trait foo::ToOwned\">ToOwned</a>&lt;dyn <a class=\"trait\" href=\"{{channel}}/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>&gt; + ?<a class=\"trait\" href=\"{{channel}}/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + 'a,</span>{\n+<pre class=\"rust item-decl\"><code>pub struct Struct&lt;'a, B&gt;<span class=\"where fmt-newline\">where\n+    B: <a class=\"trait\" href=\"trait.ToOwned.html\" title=\"trait foo::ToOwned\">ToOwned</a>&lt;dyn <a class=\"trait\" href=\"{{channel}}/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>&gt; + ?<a class=\"trait\" href=\"{{channel}}/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + 'a,</span>{\n     pub a: <a class=\"primitive\" href=\"{{channel}}/std/primitive.reference.html\">&amp;'a B</a>,\n     pub b: <a class=\"primitive\" href=\"{{channel}}/std/primitive.u32.html\">u32</a>,\n }</code></pre>\n\\ No newline at end of file"}, {"sha": "0928b48e6b64cf9b9b1d1e8f998e32532cde13ac", "filename": "tests/rustdoc/whitespace-after-where-clause.trait.html", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8307fd7901c9832e7b22ee5139efe6f7f2d291b3/tests%2Frustdoc%2Fwhitespace-after-where-clause.trait.html", "raw_url": "https://github.com/rust-lang/rust/raw/8307fd7901c9832e7b22ee5139efe6f7f2d291b3/tests%2Frustdoc%2Fwhitespace-after-where-clause.trait.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fwhitespace-after-where-clause.trait.html?ref=8307fd7901c9832e7b22ee5139efe6f7f2d291b3", "patch": "@@ -1,4 +1,5 @@\n-<pre class=\"rust item-decl\"><code>pub trait ToOwned&lt;T&gt;<span class=\"where fmt-newline\">where<br />&#160;&#160;&#160;&#160;T: <a class=\"trait\" href=\"{{channel}}/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</span>{\n+<pre class=\"rust item-decl\"><code>pub trait ToOwned&lt;T&gt;<span class=\"where fmt-newline\">where\n+    T: <a class=\"trait\" href=\"{{channel}}/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</span>{\n     type <a href=\"#associatedtype.Owned\" class=\"associatedtype\">Owned</a>;\n \n     // Required methods"}, {"sha": "38b6cb8b5c6131ddc25fac5f75acd81eb9eb0550", "filename": "tests/rustdoc/whitespace-after-where-clause.union.html", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8307fd7901c9832e7b22ee5139efe6f7f2d291b3/tests%2Frustdoc%2Fwhitespace-after-where-clause.union.html", "raw_url": "https://github.com/rust-lang/rust/raw/8307fd7901c9832e7b22ee5139efe6f7f2d291b3/tests%2Frustdoc%2Fwhitespace-after-where-clause.union.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fwhitespace-after-where-clause.union.html?ref=8307fd7901c9832e7b22ee5139efe6f7f2d291b3", "patch": "@@ -1,3 +1,4 @@\n-<pre class=\"rust item-decl\"><code>pub union Union&lt;'a, B&gt;<span class=\"where fmt-newline\">where<br />&#160;&#160;&#160;&#160;B: <a class=\"trait\" href=\"trait.ToOwned.html\" title=\"trait foo::ToOwned\">ToOwned</a>&lt;dyn <a class=\"trait\" href=\"{{channel}}/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>&gt; + ?<a class=\"trait\" href=\"{{channel}}/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + 'a,</span>{\n+<pre class=\"rust item-decl\"><code>pub union Union&lt;'a, B&gt;<span class=\"where fmt-newline\">where\n+    B: <a class=\"trait\" href=\"trait.ToOwned.html\" title=\"trait foo::ToOwned\">ToOwned</a>&lt;dyn <a class=\"trait\" href=\"{{channel}}/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>&gt; + ?<a class=\"trait\" href=\"{{channel}}/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + 'a,</span>{\n     /* private fields */\n }</code></pre>\n\\ No newline at end of file"}]}