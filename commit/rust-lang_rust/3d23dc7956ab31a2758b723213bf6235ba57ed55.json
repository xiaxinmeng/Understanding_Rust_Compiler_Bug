{"sha": "3d23dc7956ab31a2758b723213bf6235ba57ed55", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkMjNkYzc5NTZhYjMxYTI3NThiNzIzMjEzYmY2MjM1YmE1N2VkNTU=", "commit": {"author": {"name": "Austin Hicks", "email": "camlorn@camlorn.net", "date": "2016-11-21T00:56:51Z"}, "committer": {"name": "Austin Hicks", "email": "camlorn@camlorn.net", "date": "2016-12-14T17:28:21Z"}, "message": "Modify debuginfo to deal with the difference between source and memory order\n\nFix gdb enum tests to ignore garbage variants, as we no longer actually know what the garbage is.", "tree": {"sha": "c6d931f71fae522ac39fff5aa16548ad31268287", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c6d931f71fae522ac39fff5aa16548ad31268287"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d23dc7956ab31a2758b723213bf6235ba57ed55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d23dc7956ab31a2758b723213bf6235ba57ed55", "html_url": "https://github.com/rust-lang/rust/commit/3d23dc7956ab31a2758b723213bf6235ba57ed55", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d23dc7956ab31a2758b723213bf6235ba57ed55/comments", "author": {"login": "ahicks92", "id": 6968705, "node_id": "MDQ6VXNlcjY5Njg3MDU=", "avatar_url": "https://avatars.githubusercontent.com/u/6968705?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ahicks92", "html_url": "https://github.com/ahicks92", "followers_url": "https://api.github.com/users/ahicks92/followers", "following_url": "https://api.github.com/users/ahicks92/following{/other_user}", "gists_url": "https://api.github.com/users/ahicks92/gists{/gist_id}", "starred_url": "https://api.github.com/users/ahicks92/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ahicks92/subscriptions", "organizations_url": "https://api.github.com/users/ahicks92/orgs", "repos_url": "https://api.github.com/users/ahicks92/repos", "events_url": "https://api.github.com/users/ahicks92/events{/privacy}", "received_events_url": "https://api.github.com/users/ahicks92/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ahicks92", "id": 6968705, "node_id": "MDQ6VXNlcjY5Njg3MDU=", "avatar_url": "https://avatars.githubusercontent.com/u/6968705?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ahicks92", "html_url": "https://github.com/ahicks92", "followers_url": "https://api.github.com/users/ahicks92/followers", "following_url": "https://api.github.com/users/ahicks92/following{/other_user}", "gists_url": "https://api.github.com/users/ahicks92/gists{/gist_id}", "starred_url": "https://api.github.com/users/ahicks92/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ahicks92/subscriptions", "organizations_url": "https://api.github.com/users/ahicks92/orgs", "repos_url": "https://api.github.com/users/ahicks92/repos", "events_url": "https://api.github.com/users/ahicks92/events{/privacy}", "received_events_url": "https://api.github.com/users/ahicks92/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e852e9902dd006a7e77a7349edb4e88c77e5842", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e852e9902dd006a7e77a7349edb4e88c77e5842", "html_url": "https://github.com/rust-lang/rust/commit/8e852e9902dd006a7e77a7349edb4e88c77e5842"}], "stats": {"total": 83, "additions": 47, "deletions": 36}, "files": [{"sha": "ad6103965986cad4fd2513a1aebecfd303971199", "filename": "src/librustc_trans/debuginfo/metadata.rs", "status": "modified", "additions": 30, "deletions": 19, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/3d23dc7956ab31a2758b723213bf6235ba57ed55/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d23dc7956ab31a2758b723213bf6235ba57ed55/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs?ref=3d23dc7956ab31a2758b723213bf6235ba57ed55", "patch": "@@ -881,25 +881,28 @@ impl<'tcx> MemberDescriptionFactory<'tcx> {\n \n // Creates MemberDescriptions for the fields of a struct\n struct StructMemberDescriptionFactory<'tcx> {\n+    ty: Ty<'tcx>,\n     variant: &'tcx ty::VariantDef,\n     substs: &'tcx Substs<'tcx>,\n-    is_simd: bool,\n     span: Span,\n }\n \n impl<'tcx> StructMemberDescriptionFactory<'tcx> {\n     fn create_member_descriptions<'a>(&self, cx: &CrateContext<'a, 'tcx>)\n                                       -> Vec<MemberDescription> {\n-        let field_size = if self.is_simd {\n-            let fty = monomorphize::field_ty(cx.tcx(),\n-                                             self.substs,\n-                                             &self.variant.fields[0]);\n-            Some(machine::llsize_of_alloc(\n-                cx,\n-                type_of::type_of(cx, fty)\n-            ) as usize)\n-        } else {\n-            None\n+        let layout = cx.layout_of(self.ty);\n+        \n+        // The following code is slightly convoluted as to allow us to avoid allocating in the Univariant case.\n+        // tmp exists only so we can take a reference to it in the second match arm below.\n+        let tmp;\n+        let offsets = match *layout {\n+            layout::Univariant { ref variant, .. } => &variant.offsets,\n+            layout::Vector { element, count } => {\n+                let element_size = element.size(&cx.tcx().data_layout).bytes();\n+                tmp = (0..count).map(|i| layout::Size::from_bytes(i*element_size)).collect::<Vec<layout::Size>>();\n+                &tmp\n+            }\n+            _ => bug!(\"{} is not a struct\", self.ty)\n         };\n \n         self.variant.fields.iter().enumerate().map(|(i, f)| {\n@@ -910,11 +913,7 @@ impl<'tcx> StructMemberDescriptionFactory<'tcx> {\n             };\n             let fty = monomorphize::field_ty(cx.tcx(), self.substs, f);\n \n-            let offset = if self.is_simd {\n-                FixedMemberOffset { bytes: i * field_size.unwrap() }\n-            } else {\n-                ComputedMemberOffset\n-            };\n+            let offset = FixedMemberOffset { bytes: offsets[i].bytes() as usize};\n \n             MemberDescription {\n                 name: name,\n@@ -956,9 +955,9 @@ fn prepare_struct_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n         struct_metadata_stub,\n         struct_llvm_type,\n         StructMDF(StructMemberDescriptionFactory {\n+            ty: struct_type,\n             variant: variant,\n             substs: substs,\n-            is_simd: struct_type.is_simd(),\n             span: span,\n         })\n     )\n@@ -970,13 +969,21 @@ fn prepare_struct_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n \n // Creates MemberDescriptions for the fields of a tuple\n struct TupleMemberDescriptionFactory<'tcx> {\n+    ty: Ty<'tcx>,\n     component_types: Vec<Ty<'tcx>>,\n     span: Span,\n }\n \n impl<'tcx> TupleMemberDescriptionFactory<'tcx> {\n     fn create_member_descriptions<'a>(&self, cx: &CrateContext<'a, 'tcx>)\n                                       -> Vec<MemberDescription> {\n+        let layout = cx.layout_of(self.ty);\n+        let offsets = if let layout::Univariant { ref variant, .. } = *layout {\n+            &variant.offsets\n+        } else {\n+            bug!(\"{} is not a tuple\", self.ty);\n+        };\n+\n         self.component_types\n             .iter()\n             .enumerate()\n@@ -985,7 +992,7 @@ impl<'tcx> TupleMemberDescriptionFactory<'tcx> {\n                 name: format!(\"__{}\", i),\n                 llvm_type: type_of::type_of(cx, component_type),\n                 type_metadata: type_metadata(cx, component_type, self.span),\n-                offset: ComputedMemberOffset,\n+                offset: FixedMemberOffset { bytes: offsets[i].bytes() as usize },\n                 flags: DIFlags::FlagZero,\n             }\n         }).collect()\n@@ -1012,6 +1019,7 @@ fn prepare_tuple_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                            NO_SCOPE_METADATA),\n         tuple_llvm_type,\n         TupleMDF(TupleMemberDescriptionFactory {\n+            ty: tuple_type,\n             component_types: component_types.to_vec(),\n             span: span,\n         })\n@@ -1300,6 +1308,8 @@ impl<'tcx> EnumMemberDescriptionFactory<'tcx> {\n \n // Creates MemberDescriptions for the fields of a single enum variant.\n struct VariantMemberDescriptionFactory<'tcx> {\n+    // Cloned from the layout::Struct describing the variant.\n+    offsets: Vec<layout::Size>,\n     args: Vec<(String, Ty<'tcx>)>,\n     discriminant_type_metadata: Option<DIType>,\n     span: Span,\n@@ -1316,7 +1326,7 @@ impl<'tcx> VariantMemberDescriptionFactory<'tcx> {\n                     Some(metadata) if i == 0 => metadata,\n                     _ => type_metadata(cx, ty, self.span)\n                 },\n-                offset: ComputedMemberOffset,\n+                offset: FixedMemberOffset { bytes: self.offsets[i].bytes() as usize },\n                 flags: DIFlags::FlagZero\n             }\n         }).collect()\n@@ -1420,6 +1430,7 @@ fn describe_enum_variant<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n \n     let member_description_factory =\n         VariantMDF(VariantMemberDescriptionFactory {\n+            offsets: struct_def.offsets.clone(),\n             args: args,\n             discriminant_type_metadata: match discriminant_info {\n                 RegularDiscriminant(discriminant_type_metadata) => {"}, {"sha": "f34fc3b20d2beed8034cd7c2b13246f6c4a7c45c", "filename": "src/test/debuginfo/borrowed-enum.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3d23dc7956ab31a2758b723213bf6235ba57ed55/src%2Ftest%2Fdebuginfo%2Fborrowed-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d23dc7956ab31a2758b723213bf6235ba57ed55/src%2Ftest%2Fdebuginfo%2Fborrowed-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fborrowed-enum.rs?ref=3d23dc7956ab31a2758b723213bf6235ba57ed55", "patch": "@@ -18,11 +18,11 @@\n // gdb-command:run\n \n // gdb-command:print *the_a_ref\n-// gdbg-check:$1 = {{RUST$ENUM$DISR = TheA, x = 0, y = 8970181431921507452}, {RUST$ENUM$DISR = TheA, __0 = 0, __1 = 2088533116, __2 = 2088533116}}\n+// gdbg-check:$1 = {{RUST$ENUM$DISR = TheA, x = 0, y = 8970181431921507452}, {RUST$ENUM$DISR = TheA, [...]}}\n // gdbr-check:$1 = borrowed_enum::ABC::TheA{x: 0, y: 8970181431921507452}\n \n // gdb-command:print *the_b_ref\n-// gdbg-check:$2 = {{RUST$ENUM$DISR = TheB, x = 0, y = 1229782938247303441}, {RUST$ENUM$DISR = TheB, __0 = 0, __1 = 286331153, __2 = 286331153}}\n+// gdbg-check:$2 = {{RUST$ENUM$DISR = TheB, [...]}, {RUST$ENUM$DISR = TheB, __0 = 0, __1 = 286331153, __2 = 286331153}}\n // gdbr-check:$2 = borrowed_enum::ABC::TheB(0, 286331153, 286331153)\n \n // gdb-command:print *univariant_ref"}, {"sha": "0fe08c3a22731b0ac9fcb32cb546a61615ac2aeb", "filename": "src/test/debuginfo/by-value-non-immediate-argument.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d23dc7956ab31a2758b723213bf6235ba57ed55/src%2Ftest%2Fdebuginfo%2Fby-value-non-immediate-argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d23dc7956ab31a2758b723213bf6235ba57ed55/src%2Ftest%2Fdebuginfo%2Fby-value-non-immediate-argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fby-value-non-immediate-argument.rs?ref=3d23dc7956ab31a2758b723213bf6235ba57ed55", "patch": "@@ -42,7 +42,7 @@\n // gdb-command:continue\n \n // gdb-command:print x\n-// gdbg-check:$7 = {{RUST$ENUM$DISR = Case1, x = 0, y = 8970181431921507452}, {RUST$ENUM$DISR = Case1, __0 = 0, __1 = 2088533116, __2 = 2088533116}}\n+// gdbg-check:$7 = {{RUST$ENUM$DISR = Case1, x = 0, y = 8970181431921507452}, {RUST$ENUM$DISR = Case1, [...]}}\n // gdbr-check:$7 = by_value_non_immediate_argument::Enum::Case1{x: 0, y: 8970181431921507452}\n // gdb-command:continue\n "}, {"sha": "a328eec689394afbdbbe008101518ca5111f0dcd", "filename": "src/test/debuginfo/generic-struct-style-enum.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3d23dc7956ab31a2758b723213bf6235ba57ed55/src%2Ftest%2Fdebuginfo%2Fgeneric-struct-style-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d23dc7956ab31a2758b723213bf6235ba57ed55/src%2Ftest%2Fdebuginfo%2Fgeneric-struct-style-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgeneric-struct-style-enum.rs?ref=3d23dc7956ab31a2758b723213bf6235ba57ed55", "patch": "@@ -17,15 +17,15 @@\n // gdb-command:run\n \n // gdb-command:print case1\n-// gdbg-check:$1 = {{RUST$ENUM$DISR = Case1, a = 0, b = 31868, c = 31868, d = 31868, e = 31868}, {RUST$ENUM$DISR = Case1, a = 0, b = 2088533116, c = 2088533116}, {RUST$ENUM$DISR = Case1, a = 0, b = 8970181431921507452}}\n+// gdbg-check:$1 = {{RUST$ENUM$DISR = Case1, a = 0, b = 31868, c = 31868, d = 31868, e = 31868}, {RUST$ENUM$DISR = Case1, [...]}, {RUST$ENUM$DISR = Case1, [...]}}\n // gdbr-check:$1 = generic_struct_style_enum::Regular::Case1{a: 0, b: 31868, c: 31868, d: 31868, e: 31868}\n \n // gdb-command:print case2\n-// gdbg-check:$2 = {{RUST$ENUM$DISR = Case2, a = 0, b = 4369, c = 4369, d = 4369, e = 4369}, {RUST$ENUM$DISR = Case2, a = 0, b = 286331153, c = 286331153}, {RUST$ENUM$DISR = Case2, a = 0, b = 1229782938247303441}}\n+// gdbg-check:$2 = {{RUST$ENUM$DISR = Case2, [...]}, {RUST$ENUM$DISR = Case2, a = 0, b = 286331153, c = 286331153}, {RUST$ENUM$DISR = Case2, [...]}}\n // gdbr-check:$2 = generic_struct_style_enum::Regular::Case2{a: 0, b: 286331153, c: 286331153}\n \n // gdb-command:print case3\n-// gdbg-check:$3 = {{RUST$ENUM$DISR = Case3, a = 0, b = 22873, c = 22873, d = 22873, e = 22873}, {RUST$ENUM$DISR = Case3, a = 0, b = 1499027801, c = 1499027801}, {RUST$ENUM$DISR = Case3, a = 0, b = 6438275382588823897}}\n+// gdbg-check:$3 = {{RUST$ENUM$DISR = Case3, [...]}, {RUST$ENUM$DISR = Case3, [...]}, {RUST$ENUM$DISR = Case3, a = 0, b = 6438275382588823897}}\n // gdbr-check:$3 = generic_struct_style_enum::Regular::Case3{a: 0, b: 6438275382588823897}\n \n // gdb-command:print univariant"}, {"sha": "9ada5fdeff7889ec36390136b134c01acab61ef2", "filename": "src/test/debuginfo/generic-tuple-style-enum.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3d23dc7956ab31a2758b723213bf6235ba57ed55/src%2Ftest%2Fdebuginfo%2Fgeneric-tuple-style-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d23dc7956ab31a2758b723213bf6235ba57ed55/src%2Ftest%2Fdebuginfo%2Fgeneric-tuple-style-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgeneric-tuple-style-enum.rs?ref=3d23dc7956ab31a2758b723213bf6235ba57ed55", "patch": "@@ -19,15 +19,15 @@\n // gdb-command:run\n \n // gdb-command:print case1\n-// gdbg-check:$1 = {{RUST$ENUM$DISR = Case1, __0 = 0, __1 = 31868, __2 = 31868, __3 = 31868, __4 = 31868}, {RUST$ENUM$DISR = Case1, __0 = 0, __1 = 2088533116, __2 = 2088533116}, {RUST$ENUM$DISR = Case1, __0 = 0, __1 = 8970181431921507452}}\n+// gdbg-check:$1 = {{RUST$ENUM$DISR = Case1, __0 = 0, __1 = 31868, __2 = 31868, __3 = 31868, __4 = 31868}, {RUST$ENUM$DISR = Case1, [...]}, {RUST$ENUM$DISR = Case1, [...]}}\n // gdbr-check:$1 = generic_tuple_style_enum::Regular::Case1(0, 31868, 31868, 31868, 31868)\n \n // gdb-command:print case2\n-// gdbg-check:$2 = {{RUST$ENUM$DISR = Case2, __0 = 0, __1 = 4369, __2 = 4369, __3 = 4369, __4 = 4369}, {RUST$ENUM$DISR = Case2, __0 = 0, __1 = 286331153, __2 = 286331153}, {RUST$ENUM$DISR = Case2, __0 = 0, __1 = 1229782938247303441}}\n+// gdbg-check:$2 = {{RUST$ENUM$DISR = Case2, [...]}, {RUST$ENUM$DISR = Case2, __0 = 0, __1 = 286331153, __2 = 286331153}, {RUST$ENUM$DISR = Case2, [...]}}\n // gdbr-check:$2 = generic_tuple_style_enum::Regular::Case2(0, 286331153, 286331153)\n \n // gdb-command:print case3\n-// gdbg-check:$3 = {{RUST$ENUM$DISR = Case3, __0 = 0, __1 = 22873, __2 = 22873, __3 = 22873, __4 = 22873}, {RUST$ENUM$DISR = Case3, __0 = 0, __1 = 1499027801, __2 = 1499027801}, {RUST$ENUM$DISR = Case3, __0 = 0, __1 = 6438275382588823897}}\n+// gdbg-check:$3 = {{RUST$ENUM$DISR = Case3, [...]}, {RUST$ENUM$DISR = Case3, [...]}, {RUST$ENUM$DISR = Case3, __0 = 0, __1 = 6438275382588823897}}\n // gdbr-check:$3 = generic_tuple_style_enum::Regular::Case3(0, 6438275382588823897)\n \n // gdb-command:print univariant"}, {"sha": "b6196daaa4656ff5c5c6ecdaaa1fe99d80f90883", "filename": "src/test/debuginfo/struct-style-enum.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3d23dc7956ab31a2758b723213bf6235ba57ed55/src%2Ftest%2Fdebuginfo%2Fstruct-style-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d23dc7956ab31a2758b723213bf6235ba57ed55/src%2Ftest%2Fdebuginfo%2Fstruct-style-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fstruct-style-enum.rs?ref=3d23dc7956ab31a2758b723213bf6235ba57ed55", "patch": "@@ -19,15 +19,15 @@\n // gdb-command:run\n \n // gdb-command:print case1\n-// gdbg-check:$1 = {{RUST$ENUM$DISR = Case1, a = 0, b = 31868, c = 31868, d = 31868, e = 31868}, {RUST$ENUM$DISR = Case1, a = 0, b = 2088533116, c = 2088533116}, {RUST$ENUM$DISR = Case1, a = 0, b = 8970181431921507452}}\n+// gdbg-check:$1 = {{RUST$ENUM$DISR = Case1, a = 0, b = 31868, c = 31868, d = 31868, e = 31868}, {RUST$ENUM$DISR = Case1, [...]}, {RUST$ENUM$DISR = Case1, [...]}}\n // gdbr-check:$1 = struct_style_enum::Regular::Case1{a: 0, b: 31868, c: 31868, d: 31868, e: 31868}\n \n // gdb-command:print case2\n-// gdbg-check:$2 = {{RUST$ENUM$DISR = Case2, a = 0, b = 4369, c = 4369, d = 4369, e = 4369}, {RUST$ENUM$DISR = Case2, a = 0, b = 286331153, c = 286331153}, {RUST$ENUM$DISR = Case2, a = 0, b = 1229782938247303441}}\n+// gdbg-check:$2 = {{RUST$ENUM$DISR = Case2, [...]}, {RUST$ENUM$DISR = Case2, a = 0, b = 286331153, c = 286331153}, {RUST$ENUM$DISR = Case2, [...]}}\n // gdbr-check:$2 = struct_style_enum::Regular::Case2{a: 0, b: 286331153, c: 286331153}\n \n // gdb-command:print case3\n-// gdbg-check:$3 = {{RUST$ENUM$DISR = Case3, a = 0, b = 22873, c = 22873, d = 22873, e = 22873}, {RUST$ENUM$DISR = Case3, a = 0, b = 1499027801, c = 1499027801}, {RUST$ENUM$DISR = Case3, a = 0, b = 6438275382588823897}}\n+// gdbg-check:$3 = {{RUST$ENUM$DISR = Case3, [...]}, {RUST$ENUM$DISR = Case3, [...]}, {RUST$ENUM$DISR = Case3, a = 0, b = 6438275382588823897}}\n // gdbr-check:$3 = struct_style_enum::Regular::Case3{a: 0, b: 6438275382588823897}\n \n // gdb-command:print univariant"}, {"sha": "988f223b3bc4f935d14a2cd44c2bc966bc33ad69", "filename": "src/test/debuginfo/tuple-style-enum.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3d23dc7956ab31a2758b723213bf6235ba57ed55/src%2Ftest%2Fdebuginfo%2Ftuple-style-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d23dc7956ab31a2758b723213bf6235ba57ed55/src%2Ftest%2Fdebuginfo%2Ftuple-style-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ftuple-style-enum.rs?ref=3d23dc7956ab31a2758b723213bf6235ba57ed55", "patch": "@@ -19,15 +19,15 @@\n // gdb-command:run\n \n // gdb-command:print case1\n-// gdbg-check:$1 = {{RUST$ENUM$DISR = Case1, __0 = 0, __1 = 31868, __2 = 31868, __3 = 31868, __4 = 31868}, {RUST$ENUM$DISR = Case1, __0 = 0, __1 = 2088533116, __2 = 2088533116}, {RUST$ENUM$DISR = Case1, __0 = 0, __1 = 8970181431921507452}}\n+// gdbg-check:$1 = {{RUST$ENUM$DISR = Case1, __0 = 0, __1 = 31868, __2 = 31868, __3 = 31868, __4 = 31868}, {RUST$ENUM$DISR = Case1, [...]}, {RUST$ENUM$DISR = Case1, [...]}}\n // gdbr-check:$1 = tuple_style_enum::Regular::Case1(0, 31868, 31868, 31868, 31868)\n \n // gdb-command:print case2\n-// gdbg-check:$2 = {{RUST$ENUM$DISR = Case2, __0 = 0, __1 = 4369, __2 = 4369, __3 = 4369, __4 = 4369}, {RUST$ENUM$DISR = Case2, __0 = 0, __1 = 286331153, __2 = 286331153}, {RUST$ENUM$DISR = Case2, __0 = 0, __1 = 1229782938247303441}}\n+// gdbg-check:$2 = {{RUST$ENUM$DISR = Case2, [...]}, {RUST$ENUM$DISR = Case2, __0 = 0, __1 = 286331153, __2 = 286331153}, {RUST$ENUM$DISR = Case2, [...]}}\n // gdbr-check:$2 = tuple_style_enum::Regular::Case2(0, 286331153, 286331153)\n \n // gdb-command:print case3\n-// gdbg-check:$3 = {{RUST$ENUM$DISR = Case3, __0 = 0, __1 = 22873, __2 = 22873, __3 = 22873, __4 = 22873}, {RUST$ENUM$DISR = Case3, __0 = 0, __1 = 1499027801, __2 = 1499027801}, {RUST$ENUM$DISR = Case3, __0 = 0, __1 = 6438275382588823897}}\n+// gdbg-check:$3 = {{RUST$ENUM$DISR = Case3, [...]}, {RUST$ENUM$DISR = Case3, [...]}, {RUST$ENUM$DISR = Case3, __0 = 0, __1 = 6438275382588823897}}\n // gdbr-check:$3 = tuple_style_enum::Regular::Case3(0, 6438275382588823897)\n \n // gdb-command:print univariant"}, {"sha": "cf8d90e30f169732ad2ae0bf8f044210aa8be775", "filename": "src/test/debuginfo/unique-enum.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3d23dc7956ab31a2758b723213bf6235ba57ed55/src%2Ftest%2Fdebuginfo%2Funique-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d23dc7956ab31a2758b723213bf6235ba57ed55/src%2Ftest%2Fdebuginfo%2Funique-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Funique-enum.rs?ref=3d23dc7956ab31a2758b723213bf6235ba57ed55", "patch": "@@ -18,11 +18,11 @@\n // gdb-command:run\n \n // gdb-command:print *the_a\n-// gdbg-check:$1 = {{RUST$ENUM$DISR = TheA, x = 0, y = 8970181431921507452}, {RUST$ENUM$DISR = TheA, __0 = 0, __1 = 2088533116, __2 = 2088533116}}\n+// gdbg-check:$1 = {{RUST$ENUM$DISR = TheA, x = 0, y = 8970181431921507452}, {RUST$ENUM$DISR = TheA, [...]}}\n // gdbr-check:$1 = unique_enum::ABC::TheA{x: 0, y: 8970181431921507452}\n \n // gdb-command:print *the_b\n-// gdbg-check:$2 = {{RUST$ENUM$DISR = TheB, x = 0, y = 1229782938247303441}, {RUST$ENUM$DISR = TheB, __0 = 0, __1 = 286331153, __2 = 286331153}}\n+// gdbg-check:$2 = {{RUST$ENUM$DISR = TheB, [...]}, {RUST$ENUM$DISR = TheB, __0 = 0, __1 = 286331153, __2 = 286331153}}\n // gdbr-check:$2 = unique_enum::ABC::TheB(0, 286331153, 286331153)\n \n // gdb-command:print *univariant"}]}