{"sha": "232bd80130b0f8f4354c9a69d88914aea21c6908", "node_id": "C_kwDOAAsO6NoAKDIzMmJkODAxMzBiMGY4ZjQzNTRjOWE2OWQ4ODkxNGFlYTIxYzY5MDg", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-08-11T01:05:26Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-08-11T01:10:01Z"}, "message": "Simplify `rustc_ast::visit::Visitor::visit_poly_trait_ref`.\n\nIt is passed an argument that is never used.", "tree": {"sha": "b1fdd58c84be925b46182cd0d24156fde0ea0dfd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b1fdd58c84be925b46182cd0d24156fde0ea0dfd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/232bd80130b0f8f4354c9a69d88914aea21c6908", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/232bd80130b0f8f4354c9a69d88914aea21c6908", "html_url": "https://github.com/rust-lang/rust/commit/232bd80130b0f8f4354c9a69d88914aea21c6908", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/232bd80130b0f8f4354c9a69d88914aea21c6908/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "421125f30ac7772e733ebe4308956880d9b95dce", "url": "https://api.github.com/repos/rust-lang/rust/commits/421125f30ac7772e733ebe4308956880d9b95dce", "html_url": "https://github.com/rust-lang/rust/commit/421125f30ac7772e733ebe4308956880d9b95dce"}], "stats": {"total": 51, "additions": 20, "deletions": 31}, "files": [{"sha": "2abf6cc490e07aa47f1bd0176e2a355e75a12719", "filename": "compiler/rustc_ast/src/visit.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/232bd80130b0f8f4354c9a69d88914aea21c6908/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/232bd80130b0f8f4354c9a69d88914aea21c6908/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs?ref=232bd80130b0f8f4354c9a69d88914aea21c6908", "patch": "@@ -168,8 +168,8 @@ pub trait Visitor<'ast>: Sized {\n     fn visit_param_bound(&mut self, bounds: &'ast GenericBound, _ctxt: BoundKind) {\n         walk_param_bound(self, bounds)\n     }\n-    fn visit_poly_trait_ref(&mut self, t: &'ast PolyTraitRef, m: &'ast TraitBoundModifier) {\n-        walk_poly_trait_ref(self, t, m)\n+    fn visit_poly_trait_ref(&mut self, t: &'ast PolyTraitRef) {\n+        walk_poly_trait_ref(self, t)\n     }\n     fn visit_variant_data(&mut self, s: &'ast VariantData) {\n         walk_struct_def(self, s)\n@@ -281,11 +281,8 @@ pub fn walk_lifetime<'a, V: Visitor<'a>>(visitor: &mut V, lifetime: &'a Lifetime\n     visitor.visit_ident(lifetime.ident);\n }\n \n-pub fn walk_poly_trait_ref<'a, V>(\n-    visitor: &mut V,\n-    trait_ref: &'a PolyTraitRef,\n-    _: &TraitBoundModifier,\n-) where\n+pub fn walk_poly_trait_ref<'a, V>(visitor: &mut V, trait_ref: &'a PolyTraitRef)\n+where\n     V: Visitor<'a>,\n {\n     walk_list!(visitor, visit_generic_param, &trait_ref.bound_generic_params);\n@@ -587,7 +584,7 @@ pub fn walk_foreign_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a ForeignI\n \n pub fn walk_param_bound<'a, V: Visitor<'a>>(visitor: &mut V, bound: &'a GenericBound) {\n     match *bound {\n-        GenericBound::Trait(ref typ, ref modifier) => visitor.visit_poly_trait_ref(typ, modifier),\n+        GenericBound::Trait(ref typ, ref _modifier) => visitor.visit_poly_trait_ref(typ),\n         GenericBound::Outlives(ref lifetime) => {\n             visitor.visit_lifetime(lifetime, LifetimeCtxt::Bound)\n         }"}, {"sha": "8c67cebae55aff7aa67b77100e544dc1e26ee545", "filename": "compiler/rustc_ast_lowering/src/lifetime_collector.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/232bd80130b0f8f4354c9a69d88914aea21c6908/compiler%2Frustc_ast_lowering%2Fsrc%2Flifetime_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/232bd80130b0f8f4354c9a69d88914aea21c6908/compiler%2Frustc_ast_lowering%2Fsrc%2Flifetime_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flifetime_collector.rs?ref=232bd80130b0f8f4354c9a69d88914aea21c6908", "patch": "@@ -1,9 +1,6 @@\n use super::ResolverAstLoweringExt;\n use rustc_ast::visit::{self, BoundKind, LifetimeCtxt, Visitor};\n-use rustc_ast::{\n-    FnRetTy, GenericBounds, Lifetime, NodeId, PathSegment, PolyTraitRef, TraitBoundModifier, Ty,\n-    TyKind,\n-};\n+use rustc_ast::{FnRetTy, GenericBounds, Lifetime, NodeId, PathSegment, PolyTraitRef, Ty, TyKind};\n use rustc_hir::def::LifetimeRes;\n use rustc_middle::span_bug;\n use rustc_middle::ty::ResolverAstLowering;\n@@ -71,10 +68,10 @@ impl<'ast> Visitor<'ast> for LifetimeCollectVisitor<'ast> {\n         visit::walk_path_segment(self, path_span, path_segment);\n     }\n \n-    fn visit_poly_trait_ref(&mut self, t: &'ast PolyTraitRef, m: &'ast TraitBoundModifier) {\n+    fn visit_poly_trait_ref(&mut self, t: &'ast PolyTraitRef) {\n         self.current_binders.push(t.trait_ref.ref_id);\n \n-        visit::walk_poly_trait_ref(self, t, m);\n+        visit::walk_poly_trait_ref(self, t);\n \n         self.current_binders.pop();\n     }"}, {"sha": "c8e78bc26234584fd9efbc74e323d226888f9afe", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/232bd80130b0f8f4354c9a69d88914aea21c6908/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/232bd80130b0f8f4354c9a69d88914aea21c6908/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=232bd80130b0f8f4354c9a69d88914aea21c6908", "patch": "@@ -1538,9 +1538,9 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n         visit::walk_param_bound(self, bound)\n     }\n \n-    fn visit_poly_trait_ref(&mut self, t: &'a PolyTraitRef, m: &'a TraitBoundModifier) {\n+    fn visit_poly_trait_ref(&mut self, t: &'a PolyTraitRef) {\n         self.check_late_bound_lifetime_defs(&t.bound_generic_params);\n-        visit::walk_poly_trait_ref(self, t, m);\n+        visit::walk_poly_trait_ref(self, t);\n     }\n \n     fn visit_variant_data(&mut self, s: &'a VariantData) {"}, {"sha": "be3e46661bf02398fa20f401b8c0d22262e8f949", "filename": "compiler/rustc_ast_passes/src/node_count.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/232bd80130b0f8f4354c9a69d88914aea21c6908/compiler%2Frustc_ast_passes%2Fsrc%2Fnode_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/232bd80130b0f8f4354c9a69d88914aea21c6908/compiler%2Frustc_ast_passes%2Fsrc%2Fnode_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fnode_count.rs?ref=232bd80130b0f8f4354c9a69d88914aea21c6908", "patch": "@@ -79,9 +79,9 @@ impl<'ast> Visitor<'ast> for NodeCounter {\n         self.count += 1;\n         walk_param_bound(self, bounds)\n     }\n-    fn visit_poly_trait_ref(&mut self, t: &PolyTraitRef, m: &TraitBoundModifier) {\n+    fn visit_poly_trait_ref(&mut self, t: &PolyTraitRef) {\n         self.count += 1;\n-        walk_poly_trait_ref(self, t, m)\n+        walk_poly_trait_ref(self, t)\n     }\n     fn visit_variant_data(&mut self, s: &VariantData) {\n         self.count += 1;"}, {"sha": "ef64f52d40b761e723f50be49bd9aafc642b704f", "filename": "compiler/rustc_builtin_macros/src/deriving/generic/mod.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/232bd80130b0f8f4354c9a69d88914aea21c6908/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/232bd80130b0f8f4354c9a69d88914aea21c6908/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs?ref=232bd80130b0f8f4354c9a69d88914aea21c6908", "patch": "@@ -383,16 +383,12 @@ fn find_type_parameters(\n         }\n \n         // Place bound generic params on a stack, to extract them when a type is encountered.\n-        fn visit_poly_trait_ref(\n-            &mut self,\n-            trait_ref: &'a ast::PolyTraitRef,\n-            modifier: &'a ast::TraitBoundModifier,\n-        ) {\n+        fn visit_poly_trait_ref(&mut self, trait_ref: &'a ast::PolyTraitRef) {\n             let stack_len = self.bound_generic_params_stack.len();\n             self.bound_generic_params_stack\n                 .extend(trait_ref.bound_generic_params.clone().into_iter());\n \n-            visit::walk_poly_trait_ref(self, trait_ref, modifier);\n+            visit::walk_poly_trait_ref(self, trait_ref);\n \n             self.bound_generic_params_stack.truncate(stack_len);\n         }"}, {"sha": "cbf1a6775550106534f89da3f30f31dcadad279f", "filename": "compiler/rustc_lint/src/early.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/232bd80130b0f8f4354c9a69d88914aea21c6908/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/232bd80130b0f8f4354c9a69d88914aea21c6908/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fearly.rs?ref=232bd80130b0f8f4354c9a69d88914aea21c6908", "patch": "@@ -233,9 +233,9 @@ impl<'a, T: EarlyLintPass> ast_visit::Visitor<'a> for EarlyContextAndPass<'a, T>\n         ast_visit::walk_where_predicate(self, p);\n     }\n \n-    fn visit_poly_trait_ref(&mut self, t: &'a ast::PolyTraitRef, m: &'a ast::TraitBoundModifier) {\n-        run_early_pass!(self, check_poly_trait_ref, t, m);\n-        ast_visit::walk_poly_trait_ref(self, t, m);\n+    fn visit_poly_trait_ref(&mut self, t: &'a ast::PolyTraitRef) {\n+        run_early_pass!(self, check_poly_trait_ref, t);\n+        ast_visit::walk_poly_trait_ref(self, t);\n     }\n \n     fn visit_assoc_item(&mut self, item: &'a ast::AssocItem, ctxt: ast_visit::AssocCtxt) {"}, {"sha": "413f06a97a2455f8e76c7f5039ee87ea4c519c23", "filename": "compiler/rustc_lint/src/passes.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/232bd80130b0f8f4354c9a69d88914aea21c6908/compiler%2Frustc_lint%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/232bd80130b0f8f4354c9a69d88914aea21c6908/compiler%2Frustc_lint%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fpasses.rs?ref=232bd80130b0f8f4354c9a69d88914aea21c6908", "patch": "@@ -156,8 +156,7 @@ macro_rules! early_lint_methods {\n             fn check_generic_arg(a: &ast::GenericArg);\n             fn check_generic_param(a: &ast::GenericParam);\n             fn check_generics(a: &ast::Generics);\n-            fn check_poly_trait_ref(a: &ast::PolyTraitRef,\n-                                    b: &ast::TraitBoundModifier);\n+            fn check_poly_trait_ref(a: &ast::PolyTraitRef);\n             fn check_fn(a: rustc_ast::visit::FnKind<'_>, c: Span, d_: ast::NodeId);\n             fn check_trait_item(a: &ast::AssocItem);\n             fn check_impl_item(a: &ast::AssocItem);"}, {"sha": "25e2852fd0781c405fc4797975f5cdfba54f70e4", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/232bd80130b0f8f4354c9a69d88914aea21c6908/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/232bd80130b0f8f4354c9a69d88914aea21c6908/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=232bd80130b0f8f4354c9a69d88914aea21c6908", "patch": "@@ -723,7 +723,7 @@ impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n         self.diagnostic_metadata.current_trait_object = prev;\n         self.diagnostic_metadata.current_type_path = prev_ty;\n     }\n-    fn visit_poly_trait_ref(&mut self, tref: &'ast PolyTraitRef, _: &'ast TraitBoundModifier) {\n+    fn visit_poly_trait_ref(&mut self, tref: &'ast PolyTraitRef) {\n         let span = tref.span.shrink_to_lo().to(tref.trait_ref.path.span.shrink_to_lo());\n         self.with_generic_param_rib(\n             &tref.bound_generic_params,"}, {"sha": "cd1d90e860b9fe865baef8a27bcbeb3078b7b0ec", "filename": "src/tools/clippy/clippy_lints/src/unused_unit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/232bd80130b0f8f4354c9a69d88914aea21c6908/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funused_unit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/232bd80130b0f8f4354c9a69d88914aea21c6908/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funused_unit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funused_unit.rs?ref=232bd80130b0f8f4354c9a69d88914aea21c6908", "patch": "@@ -89,7 +89,7 @@ impl EarlyLintPass for UnusedUnit {\n         }\n     }\n \n-    fn check_poly_trait_ref(&mut self, cx: &EarlyContext<'_>, poly: &ast::PolyTraitRef, _: &ast::TraitBoundModifier) {\n+    fn check_poly_trait_ref(&mut self, cx: &EarlyContext<'_>, poly: &ast::PolyTraitRef) {\n         let segments = &poly.trait_ref.path.segments;\n \n         if_chain! {"}]}