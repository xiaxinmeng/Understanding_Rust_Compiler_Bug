{"sha": "22226fa7fba8af083593b3dd8ce1bc1ac5bf1320", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyMjI2ZmE3ZmJhOGFmMDgzNTkzYjNkZDhjZTFiYzFhYzViZjEzMjA=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-04-24T18:41:43Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-04-26T20:35:10Z"}, "message": "Remove region from borrow place contexts", "tree": {"sha": "e4dd16090568e21974a5dab35238e3dab4f268e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e4dd16090568e21974a5dab35238e3dab4f268e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22226fa7fba8af083593b3dd8ce1bc1ac5bf1320", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22226fa7fba8af083593b3dd8ce1bc1ac5bf1320", "html_url": "https://github.com/rust-lang/rust/commit/22226fa7fba8af083593b3dd8ce1bc1ac5bf1320", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22226fa7fba8af083593b3dd8ce1bc1ac5bf1320/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ab92cde55c142024c95ca9d4ff9586456262f76", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ab92cde55c142024c95ca9d4ff9586456262f76", "html_url": "https://github.com/rust-lang/rust/commit/7ab92cde55c142024c95ca9d4ff9586456262f76"}], "stats": {"total": 205, "additions": 100, "deletions": 105}, "files": [{"sha": "5faacde7a8b7d9c53348c4102661f39416fd43ed", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/22226fa7fba8af083593b3dd8ce1bc1ac5bf1320/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22226fa7fba8af083593b3dd8ce1bc1ac5bf1320/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=22226fa7fba8af083593b3dd8ce1bc1ac5bf1320", "patch": "@@ -1,6 +1,6 @@\n use crate::hir::def_id::DefId;\n use crate::ty::subst::SubstsRef;\n-use crate::ty::{CanonicalUserTypeAnnotation, ClosureSubsts, GeneratorSubsts, Region, Ty};\n+use crate::ty::{CanonicalUserTypeAnnotation, ClosureSubsts, GeneratorSubsts, Ty};\n use crate::mir::*;\n use syntax_pos::Span;\n \n@@ -147,14 +147,14 @@ macro_rules! make_mir_visitor {\n \n             fn visit_place(&mut self,\n                             place: & $($mutability)? Place<'tcx>,\n-                            context: PlaceContext<'tcx>,\n+                            context: PlaceContext,\n                             location: Location) {\n                 self.super_place(place, context, location);\n             }\n \n             fn visit_projection(&mut self,\n                                 place: & $($mutability)? PlaceProjection<'tcx>,\n-                                context: PlaceContext<'tcx>,\n+                                context: PlaceContext,\n                                 location: Location) {\n                 self.super_projection(place, context, location);\n             }\n@@ -252,7 +252,7 @@ macro_rules! make_mir_visitor {\n \n             fn visit_local(&mut self,\n                             _local: & $($mutability)? Local,\n-                            _context: PlaceContext<'tcx>,\n+                            _context: PlaceContext,\n                             _location: Location) {\n             }\n \n@@ -576,16 +576,16 @@ macro_rules! make_mir_visitor {\n                         self.visit_region(r, location);\n                         let ctx = match bk {\n                             BorrowKind::Shared => PlaceContext::NonMutatingUse(\n-                                NonMutatingUseContext::SharedBorrow(*r)\n+                                NonMutatingUseContext::SharedBorrow\n                             ),\n                             BorrowKind::Shallow => PlaceContext::NonMutatingUse(\n-                                NonMutatingUseContext::ShallowBorrow(*r)\n+                                NonMutatingUseContext::ShallowBorrow\n                             ),\n                             BorrowKind::Unique => PlaceContext::NonMutatingUse(\n-                                NonMutatingUseContext::UniqueBorrow(*r)\n+                                NonMutatingUseContext::UniqueBorrow\n                             ),\n                             BorrowKind::Mut { .. } =>\n-                                PlaceContext::MutatingUse(MutatingUseContext::Borrow(*r)),\n+                                PlaceContext::MutatingUse(MutatingUseContext::Borrow),\n                         };\n                         self.visit_place(path, ctx, location);\n                     }\n@@ -716,7 +716,7 @@ macro_rules! make_mir_visitor {\n \n             fn super_place(&mut self,\n                             place: & $($mutability)? Place<'tcx>,\n-                            context: PlaceContext<'tcx>,\n+                            context: PlaceContext,\n                             location: Location) {\n                 match place {\n                     Place::Base(PlaceBase::Local(local)) => {\n@@ -736,7 +736,7 @@ macro_rules! make_mir_visitor {\n \n             fn super_projection(&mut self,\n                                 proj: & $($mutability)? PlaceProjection<'tcx>,\n-                                context: PlaceContext<'tcx>,\n+                                context: PlaceContext,\n                                 location: Location) {\n                 let Projection { base, elem } = proj;\n                 let context = if context.is_mutating_use() {\n@@ -948,19 +948,19 @@ pub enum TyContext {\n }\n \n #[derive(Copy, Clone, Debug, PartialEq, Eq)]\n-pub enum NonMutatingUseContext<'tcx> {\n+pub enum NonMutatingUseContext {\n     /// Being inspected in some way, like loading a len.\n     Inspect,\n     /// Consumed as part of an operand.\n     Copy,\n     /// Consumed as part of an operand.\n     Move,\n     /// Shared borrow.\n-    SharedBorrow(Region<'tcx>),\n+    SharedBorrow,\n     /// Shallow borrow.\n-    ShallowBorrow(Region<'tcx>),\n+    ShallowBorrow,\n     /// Unique borrow.\n-    UniqueBorrow(Region<'tcx>),\n+    UniqueBorrow,\n     /// Used as base for another place, e.g., `x` in `x.y`. Will not mutate the place.\n     /// For example, the projection `x.y` is not marked as a mutation in these cases:\n     ///\n@@ -971,7 +971,7 @@ pub enum NonMutatingUseContext<'tcx> {\n }\n \n #[derive(Copy, Clone, Debug, PartialEq, Eq)]\n-pub enum MutatingUseContext<'tcx> {\n+pub enum MutatingUseContext {\n     /// Appears as LHS of an assignment.\n     Store,\n     /// Can often be treated as a `Store`, but needs to be separate because\n@@ -983,7 +983,7 @@ pub enum MutatingUseContext<'tcx> {\n     /// Being dropped.\n     Drop,\n     /// Mutable borrow.\n-    Borrow(Region<'tcx>),\n+    Borrow,\n     /// Used as base for another place, e.g., `x` in `x.y`. Could potentially mutate the place.\n     /// For example, the projection `x.y` is marked as a mutation in these cases:\n     ///\n@@ -1006,13 +1006,13 @@ pub enum NonUseContext {\n }\n \n #[derive(Copy, Clone, Debug, PartialEq, Eq)]\n-pub enum PlaceContext<'tcx> {\n-    NonMutatingUse(NonMutatingUseContext<'tcx>),\n-    MutatingUse(MutatingUseContext<'tcx>),\n+pub enum PlaceContext {\n+    NonMutatingUse(NonMutatingUseContext),\n+    MutatingUse(MutatingUseContext),\n     NonUse(NonUseContext),\n }\n \n-impl<'tcx> PlaceContext<'tcx> {\n+impl<'tcx> PlaceContext {\n     /// Returns `true` if this place context represents a drop.\n     pub fn is_drop(&self) -> bool {\n         match *self {\n@@ -1024,10 +1024,10 @@ impl<'tcx> PlaceContext<'tcx> {\n     /// Returns `true` if this place context represents a borrow.\n     pub fn is_borrow(&self) -> bool {\n         match *self {\n-            PlaceContext::NonMutatingUse(NonMutatingUseContext::SharedBorrow(..)) |\n-            PlaceContext::NonMutatingUse(NonMutatingUseContext::ShallowBorrow(..)) |\n-            PlaceContext::NonMutatingUse(NonMutatingUseContext::UniqueBorrow(..)) |\n-            PlaceContext::MutatingUse(MutatingUseContext::Borrow(..)) => true,\n+            PlaceContext::NonMutatingUse(NonMutatingUseContext::SharedBorrow) |\n+            PlaceContext::NonMutatingUse(NonMutatingUseContext::ShallowBorrow) |\n+            PlaceContext::NonMutatingUse(NonMutatingUseContext::UniqueBorrow) |\n+            PlaceContext::MutatingUse(MutatingUseContext::Borrow) => true,\n             _ => false,\n         }\n     }"}, {"sha": "8021d4b11d0cf7a638d204b1695cec152d64af74", "filename": "src/librustc_codegen_ssa/mir/analyze.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/22226fa7fba8af083593b3dd8ce1bc1ac5bf1320/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22226fa7fba8af083593b3dd8ce1bc1ac5bf1320/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs?ref=22226fa7fba8af083593b3dd8ce1bc1ac5bf1320", "patch": "@@ -151,7 +151,7 @@ impl<'mir, 'a: 'mir, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> Visitor<'tcx>\n \n     fn visit_place(&mut self,\n                    place: &mir::Place<'tcx>,\n-                   context: PlaceContext<'tcx>,\n+                   context: PlaceContext,\n                    location: Location) {\n         debug!(\"visit_place(place={:?}, context={:?})\", place, context);\n         let cx = self.fx.cx;\n@@ -203,7 +203,7 @@ impl<'mir, 'a: 'mir, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> Visitor<'tcx>\n \n     fn visit_local(&mut self,\n                    &local: &mir::Local,\n-                   context: PlaceContext<'tcx>,\n+                   context: PlaceContext,\n                    location: Location) {\n         match context {\n             PlaceContext::MutatingUse(MutatingUseContext::Call) => {\n@@ -233,11 +233,11 @@ impl<'mir, 'a: 'mir, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> Visitor<'tcx>\n             PlaceContext::NonMutatingUse(NonMutatingUseContext::Inspect) |\n             PlaceContext::MutatingUse(MutatingUseContext::Store) |\n             PlaceContext::MutatingUse(MutatingUseContext::AsmOutput) |\n-            PlaceContext::MutatingUse(MutatingUseContext::Borrow(..)) |\n+            PlaceContext::MutatingUse(MutatingUseContext::Borrow) |\n             PlaceContext::MutatingUse(MutatingUseContext::Projection) |\n-            PlaceContext::NonMutatingUse(NonMutatingUseContext::SharedBorrow(..)) |\n-            PlaceContext::NonMutatingUse(NonMutatingUseContext::UniqueBorrow(..)) |\n-            PlaceContext::NonMutatingUse(NonMutatingUseContext::ShallowBorrow(..)) |\n+            PlaceContext::NonMutatingUse(NonMutatingUseContext::SharedBorrow) |\n+            PlaceContext::NonMutatingUse(NonMutatingUseContext::UniqueBorrow) |\n+            PlaceContext::NonMutatingUse(NonMutatingUseContext::ShallowBorrow) |\n             PlaceContext::NonMutatingUse(NonMutatingUseContext::Projection) => {\n                 self.not_ssa(local);\n             }"}, {"sha": "66e463a73af670aa2102732a99d06f62d590ced7", "filename": "src/librustc_mir/borrow_check/borrow_set.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/22226fa7fba8af083593b3dd8ce1bc1ac5bf1320/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22226fa7fba8af083593b3dd8ce1bc1ac5bf1320/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs?ref=22226fa7fba8af083593b3dd8ce1bc1ac5bf1320", "patch": "@@ -95,7 +95,7 @@ impl LocalsStateAtExit {\n         struct HasStorageDead(BitSet<Local>);\n \n         impl<'tcx> Visitor<'tcx> for HasStorageDead {\n-            fn visit_local(&mut self, local: &Local, ctx: PlaceContext<'tcx>, _: Location) {\n+            fn visit_local(&mut self, local: &Local, ctx: PlaceContext, _: Location) {\n                 if ctx == PlaceContext::NonUse(NonUseContext::StorageDead) {\n                     self.0.insert(*local);\n                 }\n@@ -220,7 +220,7 @@ impl<'a, 'gcx, 'tcx> Visitor<'tcx> for GatherBorrows<'a, 'gcx, 'tcx> {\n     fn visit_local(\n         &mut self,\n         temp: &Local,\n-        context: PlaceContext<'tcx>,\n+        context: PlaceContext,\n         location: Location,\n     ) {\n         if !context.is_use() {"}, {"sha": "9a2090d05084d98ec6e73413227e82a40a8a429f", "filename": "src/librustc_mir/borrow_check/nll/explain_borrow/find_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22226fa7fba8af083593b3dd8ce1bc1ac5bf1320/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Ffind_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22226fa7fba8af083593b3dd8ce1bc1ac5bf1320/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Ffind_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Ffind_use.rs?ref=22226fa7fba8af083593b3dd8ce1bc1ac5bf1320", "patch": "@@ -113,7 +113,7 @@ enum DefUseResult {\n }\n \n impl<'cx, 'gcx, 'tcx> Visitor<'tcx> for DefUseVisitor<'cx, 'gcx, 'tcx> {\n-    fn visit_local(&mut self, &local: &Local, context: PlaceContext<'tcx>, _: Location) {\n+    fn visit_local(&mut self, &local: &Local, context: PlaceContext, _: Location) {\n         let local_ty = self.mir.local_decls[local].ty;\n \n         let mut found_it = false;"}, {"sha": "6ba41806a313f3e43a047d18f01dc64c161a43ed", "filename": "src/librustc_mir/borrow_check/nll/type_check/liveness/local_use_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22226fa7fba8af083593b3dd8ce1bc1ac5bf1320/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Flocal_use_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22226fa7fba8af083593b3dd8ce1bc1ac5bf1320/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Flocal_use_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Flocal_use_map.rs?ref=22226fa7fba8af083593b3dd8ce1bc1ac5bf1320", "patch": "@@ -160,7 +160,7 @@ impl LocalUseMapBuild<'_> {\n }\n \n impl Visitor<'tcx> for LocalUseMapBuild<'_> {\n-    fn visit_local(&mut self, &local: &Local, context: PlaceContext<'tcx>, location: Location) {\n+    fn visit_local(&mut self, &local: &Local, context: PlaceContext, location: Location) {\n         if self.locals_with_use_data[local] {\n             match categorize(context) {\n                 Some(DefUse::Def) => self.insert_def(local, location),"}, {"sha": "76f395d6d670304f102b7d1d0ef61c5f4176362c", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/22226fa7fba8af083593b3dd8ce1bc1ac5bf1320/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22226fa7fba8af083593b3dd8ce1bc1ac5bf1320/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=22226fa7fba8af083593b3dd8ce1bc1ac5bf1320", "patch": "@@ -269,7 +269,7 @@ impl<'a, 'b, 'gcx, 'tcx> Visitor<'tcx> for TypeVerifier<'a, 'b, 'gcx, 'tcx> {\n         }\n     }\n \n-    fn visit_place(&mut self, place: &Place<'tcx>, context: PlaceContext<'_>, location: Location) {\n+    fn visit_place(&mut self, place: &Place<'tcx>, context: PlaceContext, location: Location) {\n         self.sanitize_place(place, location, context);\n     }\n \n@@ -447,7 +447,7 @@ impl<'a, 'b, 'gcx, 'tcx> TypeVerifier<'a, 'b, 'gcx, 'tcx> {\n         &mut self,\n         place: &Place<'tcx>,\n         location: Location,\n-        context: PlaceContext<'_>,\n+        context: PlaceContext,\n     ) -> PlaceTy<'tcx> {\n         debug!(\"sanitize_place: {:?}\", place);\n         let place_ty = match place {"}, {"sha": "f4866fad9a5fd8c720714ceb1941913f25c34023", "filename": "src/librustc_mir/borrow_check/used_muts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22226fa7fba8af083593b3dd8ce1bc1ac5bf1320/src%2Flibrustc_mir%2Fborrow_check%2Fused_muts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22226fa7fba8af083593b3dd8ce1bc1ac5bf1320/src%2Flibrustc_mir%2Fborrow_check%2Fused_muts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fused_muts.rs?ref=22226fa7fba8af083593b3dd8ce1bc1ac5bf1320", "patch": "@@ -102,7 +102,7 @@ impl<'visit, 'cx, 'gcx, 'tcx> Visitor<'tcx> for GatherUsedMutsVisitor<'visit, 'c\n     fn visit_local(\n         &mut self,\n         local: &Local,\n-        place_context: PlaceContext<'tcx>,\n+        place_context: PlaceContext,\n         location: Location,\n     ) {\n         if place_context.is_place_assignment() && self.temporary_used_locals.contains(local) {"}, {"sha": "ab930fd83d063b76453c55b853efd58fb74b2bad", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22226fa7fba8af083593b3dd8ce1bc1ac5bf1320/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22226fa7fba8af083593b3dd8ce1bc1ac5bf1320/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=22226fa7fba8af083593b3dd8ce1bc1ac5bf1320", "patch": "@@ -658,7 +658,7 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n \n     fn visit_place(&mut self,\n                     place: &mir::Place<'tcx>,\n-                    context: mir::visit::PlaceContext<'tcx>,\n+                    context: mir::visit::PlaceContext,\n                     location: Location) {\n         match place {\n             Place::Base("}, {"sha": "078b347fb3f6be0fc8949734cc5f4d25670bb8ed", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22226fa7fba8af083593b3dd8ce1bc1ac5bf1320/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22226fa7fba8af083593b3dd8ce1bc1ac5bf1320/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=22226fa7fba8af083593b3dd8ce1bc1ac5bf1320", "patch": "@@ -199,7 +199,7 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n \n     fn visit_place(&mut self,\n                     place: &Place<'tcx>,\n-                    context: PlaceContext<'tcx>,\n+                    context: PlaceContext,\n                     location: Location) {\n         match place {\n             &Place::Projection(box Projection {"}, {"sha": "419e4b70122223968f9782ca2470c682c4bb8ed5", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22226fa7fba8af083593b3dd8ce1bc1ac5bf1320/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22226fa7fba8af083593b3dd8ce1bc1ac5bf1320/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=22226fa7fba8af083593b3dd8ce1bc1ac5bf1320", "patch": "@@ -510,7 +510,7 @@ impl<'tcx> Visitor<'tcx> for CanConstProp {\n     fn visit_local(\n         &mut self,\n         &local: &Local,\n-        context: PlaceContext<'tcx>,\n+        context: PlaceContext,\n         _: Location,\n     ) {\n         use rustc::mir::visit::PlaceContext::*;"}, {"sha": "dfe2e991ba97bf9e118ef5029c856d3bcea7e62a", "filename": "src/librustc_mir/transform/copy_prop.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/22226fa7fba8af083593b3dd8ce1bc1ac5bf1320/src%2Flibrustc_mir%2Ftransform%2Fcopy_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22226fa7fba8af083593b3dd8ce1bc1ac5bf1320/src%2Flibrustc_mir%2Ftransform%2Fcopy_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcopy_prop.rs?ref=22226fa7fba8af083593b3dd8ce1bc1ac5bf1320", "patch": "@@ -134,9 +134,9 @@ impl MirPass for CopyPropagation {\n     }\n }\n \n-fn eliminate_self_assignments<'tcx>(\n-    mir: &mut Mir<'tcx>,\n-    def_use_analysis: &DefUseAnalysis<'tcx>,\n+fn eliminate_self_assignments(\n+    mir: &mut Mir<'_>,\n+    def_use_analysis: &DefUseAnalysis,\n ) -> bool {\n     let mut changed = false;\n \n@@ -177,7 +177,7 @@ enum Action<'tcx> {\n }\n \n impl<'tcx> Action<'tcx> {\n-    fn local_copy(mir: &Mir<'tcx>, def_use_analysis: &DefUseAnalysis<'_>, src_place: &Place<'tcx>)\n+    fn local_copy(mir: &Mir<'tcx>, def_use_analysis: &DefUseAnalysis, src_place: &Place<'tcx>)\n                   -> Option<Action<'tcx>> {\n         // The source must be a local.\n         let src_local = if let Place::Base(PlaceBase::Local(local)) = *src_place {\n@@ -233,7 +233,7 @@ impl<'tcx> Action<'tcx> {\n \n     fn perform(self,\n                mir: &mut Mir<'tcx>,\n-               def_use_analysis: &DefUseAnalysis<'tcx>,\n+               def_use_analysis: &DefUseAnalysis,\n                dest_local: Local,\n                location: Location)\n                -> bool {"}, {"sha": "68f33d9438d9b47d61be0e5cb4ffb3367ab47b70", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/22226fa7fba8af083593b3dd8ce1bc1ac5bf1320/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22226fa7fba8af083593b3dd8ce1bc1ac5bf1320/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=22226fa7fba8af083593b3dd8ce1bc1ac5bf1320", "patch": "@@ -80,7 +80,7 @@ struct RenameLocalVisitor {\n impl<'tcx> MutVisitor<'tcx> for RenameLocalVisitor {\n     fn visit_local(&mut self,\n                    local: &mut Local,\n-                   _: PlaceContext<'tcx>,\n+                   _: PlaceContext,\n                    _: Location) {\n         if *local == self.from {\n             *local = self.to;\n@@ -93,14 +93,14 @@ struct DerefArgVisitor;\n impl<'tcx> MutVisitor<'tcx> for DerefArgVisitor {\n     fn visit_local(&mut self,\n                    local: &mut Local,\n-                   _: PlaceContext<'tcx>,\n+                   _: PlaceContext,\n                    _: Location) {\n         assert_ne!(*local, self_arg());\n     }\n \n     fn visit_place(&mut self,\n                     place: &mut Place<'tcx>,\n-                    context: PlaceContext<'tcx>,\n+                    context: PlaceContext,\n                     location: Location) {\n         if *place == Place::Base(PlaceBase::Local(self_arg())) {\n             *place = Place::Projection(Box::new(Projection {\n@@ -120,14 +120,14 @@ struct PinArgVisitor<'tcx> {\n impl<'tcx> MutVisitor<'tcx> for PinArgVisitor<'tcx> {\n     fn visit_local(&mut self,\n                    local: &mut Local,\n-                   _: PlaceContext<'tcx>,\n+                   _: PlaceContext,\n                    _: Location) {\n         assert_ne!(*local, self_arg());\n     }\n \n     fn visit_place(&mut self,\n                     place: &mut Place<'tcx>,\n-                    context: PlaceContext<'tcx>,\n+                    context: PlaceContext,\n                     location: Location) {\n         if *place == Place::Base(PlaceBase::Local(self_arg())) {\n             *place = Place::Projection(Box::new(Projection {\n@@ -221,14 +221,14 @@ impl<'a, 'tcx> TransformVisitor<'a, 'tcx> {\n impl<'a, 'tcx> MutVisitor<'tcx> for TransformVisitor<'a, 'tcx> {\n     fn visit_local(&mut self,\n                    local: &mut Local,\n-                   _: PlaceContext<'tcx>,\n+                   _: PlaceContext,\n                    _: Location) {\n         assert_eq!(self.remap.get(local), None);\n     }\n \n     fn visit_place(&mut self,\n                     place: &mut Place<'tcx>,\n-                    context: PlaceContext<'tcx>,\n+                    context: PlaceContext,\n                     location: Location) {\n         if let Place::Base(PlaceBase::Local(l)) = *place {\n             // Replace an Local in the remap with a generator struct access"}, {"sha": "937079dbd376c548edfed685607468635c284b08", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/22226fa7fba8af083593b3dd8ce1bc1ac5bf1320/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22226fa7fba8af083593b3dd8ce1bc1ac5bf1320/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=22226fa7fba8af083593b3dd8ce1bc1ac5bf1320", "patch": "@@ -662,7 +662,7 @@ impl<'a, 'tcx> Integrator<'a, 'tcx> {\n impl<'a, 'tcx> MutVisitor<'tcx> for Integrator<'a, 'tcx> {\n     fn visit_local(&mut self,\n                    local: &mut Local,\n-                   _ctxt: PlaceContext<'tcx>,\n+                   _ctxt: PlaceContext,\n                    _location: Location) {\n         if *local == RETURN_PLACE {\n             match self.destination {\n@@ -683,7 +683,7 @@ impl<'a, 'tcx> MutVisitor<'tcx> for Integrator<'a, 'tcx> {\n \n     fn visit_place(&mut self,\n                     place: &mut Place<'tcx>,\n-                    _ctxt: PlaceContext<'tcx>,\n+                    _ctxt: PlaceContext,\n                     _location: Location) {\n \n         match place {"}, {"sha": "0bf96c689176bedf8ee41449e9ff582d2508ced4", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/22226fa7fba8af083593b3dd8ce1bc1ac5bf1320/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22226fa7fba8af083593b3dd8ce1bc1ac5bf1320/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=22226fa7fba8af083593b3dd8ce1bc1ac5bf1320", "patch": "@@ -77,7 +77,7 @@ struct TempCollector<'tcx> {\n impl<'tcx> Visitor<'tcx> for TempCollector<'tcx> {\n     fn visit_local(&mut self,\n                    &index: &Local,\n-                   context: PlaceContext<'tcx>,\n+                   context: PlaceContext,\n                    location: Location) {\n         debug!(\"visit_local: index={:?} context={:?} location={:?}\", index, context, location);\n         // We're only interested in temporaries and the return place\n@@ -361,7 +361,7 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n impl<'a, 'tcx> MutVisitor<'tcx> for Promoter<'a, 'tcx> {\n     fn visit_local(&mut self,\n                    local: &mut Local,\n-                   _: PlaceContext<'tcx>,\n+                   _: PlaceContext,\n                    _: Location) {\n         if self.source.local_kind(*local) == LocalKind::Temp {\n             *local = self.promote_temp(*local);"}, {"sha": "083363efacdbb24095e68d03cf9c3ab975155739", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/22226fa7fba8af083593b3dd8ce1bc1ac5bf1320/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22226fa7fba8af083593b3dd8ce1bc1ac5bf1320/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=22226fa7fba8af083593b3dd8ce1bc1ac5bf1320", "patch": "@@ -929,7 +929,7 @@ impl<'a, 'tcx> Checker<'a, 'tcx> {\n impl<'a, 'tcx> Visitor<'tcx> for Checker<'a, 'tcx> {\n     fn visit_place(&mut self,\n                     place: &Place<'tcx>,\n-                    context: PlaceContext<'tcx>,\n+                    context: PlaceContext,\n                     location: Location) {\n         debug!(\"visit_place: place={:?} context={:?} location={:?}\", place, context, location);\n         self.super_place(place, context, location);\n@@ -1066,7 +1066,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Checker<'a, 'tcx> {\n         debug!(\"visit_rvalue: rvalue={:?} location={:?}\", rvalue, location);\n \n         // Check nested operands and places.\n-        if let Rvalue::Ref(region, kind, ref place) = *rvalue {\n+        if let Rvalue::Ref(_, kind, ref place) = *rvalue {\n             // Special-case reborrows.\n             let mut is_reborrow = false;\n             if let Place::Projection(ref proj) = *place {\n@@ -1081,16 +1081,16 @@ impl<'a, 'tcx> Visitor<'tcx> for Checker<'a, 'tcx> {\n             if is_reborrow {\n                 let ctx = match kind {\n                     BorrowKind::Shared => PlaceContext::NonMutatingUse(\n-                        NonMutatingUseContext::SharedBorrow(region),\n+                        NonMutatingUseContext::SharedBorrow,\n                     ),\n                     BorrowKind::Shallow => PlaceContext::NonMutatingUse(\n-                        NonMutatingUseContext::ShallowBorrow(region),\n+                        NonMutatingUseContext::ShallowBorrow,\n                     ),\n                     BorrowKind::Unique => PlaceContext::NonMutatingUse(\n-                        NonMutatingUseContext::UniqueBorrow(region),\n+                        NonMutatingUseContext::UniqueBorrow,\n                     ),\n                     BorrowKind::Mut { .. } => PlaceContext::MutatingUse(\n-                        MutatingUseContext::Borrow(region),\n+                        MutatingUseContext::Borrow,\n                     ),\n                 };\n                 self.super_place(place, ctx, location);"}, {"sha": "ee16ec7b41cf5e0af70309a5fcf25a76b64e66e3", "filename": "src/librustc_mir/transform/simplify.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/22226fa7fba8af083593b3dd8ce1bc1ac5bf1320/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22226fa7fba8af083593b3dd8ce1bc1ac5bf1320/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs?ref=22226fa7fba8af083593b3dd8ce1bc1ac5bf1320", "patch": "@@ -345,7 +345,7 @@ struct DeclMarker {\n }\n \n impl<'tcx> Visitor<'tcx> for DeclMarker {\n-    fn visit_local(&mut self, local: &Local, ctx: PlaceContext<'tcx>, _: Location) {\n+    fn visit_local(&mut self, local: &Local, ctx: PlaceContext, _: Location) {\n         // Ignore storage markers altogether, they get removed along with their otherwise unused\n         // decls.\n         // FIXME: Extend this to all non-uses.\n@@ -372,7 +372,7 @@ impl<'tcx> MutVisitor<'tcx> for LocalUpdater {\n         });\n         self.super_basic_block_data(block, data);\n     }\n-    fn visit_local(&mut self, l: &mut Local, _: PlaceContext<'tcx>, _: Location) {\n+    fn visit_local(&mut self, l: &mut Local, _: PlaceContext, _: Location) {\n         *l = self.map[*l].unwrap();\n     }\n }"}, {"sha": "4eee0640d78cd03171ecee0cdc0e4ff3b51985b1", "filename": "src/librustc_mir/transform/uniform_array_move_out.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22226fa7fba8af083593b3dd8ce1bc1ac5bf1320/src%2Flibrustc_mir%2Ftransform%2Funiform_array_move_out.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22226fa7fba8af083593b3dd8ce1bc1ac5bf1320/src%2Flibrustc_mir%2Ftransform%2Funiform_array_move_out.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Funiform_array_move_out.rs?ref=22226fa7fba8af083593b3dd8ce1bc1ac5bf1320", "patch": "@@ -304,7 +304,7 @@ impl<'tcx> Visitor<'tcx> for RestoreDataCollector {\n \n     fn visit_local(&mut self,\n                    local: &Local,\n-                   context: PlaceContext<'tcx>,\n+                   context: PlaceContext,\n                    location: Location) {\n         let local_use = &mut self.locals_use[*local];\n         match context {"}, {"sha": "7bd61c3a59c94ec09bcfe1788635349c754f4109", "filename": "src/librustc_mir/util/collect_writes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22226fa7fba8af083593b3dd8ce1bc1ac5bf1320/src%2Flibrustc_mir%2Futil%2Fcollect_writes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22226fa7fba8af083593b3dd8ce1bc1ac5bf1320/src%2Flibrustc_mir%2Futil%2Fcollect_writes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fcollect_writes.rs?ref=22226fa7fba8af083593b3dd8ce1bc1ac5bf1320", "patch": "@@ -27,7 +27,7 @@ struct FindLocalAssignmentVisitor {\n impl<'tcx> Visitor<'tcx> for FindLocalAssignmentVisitor {\n     fn visit_local(&mut self,\n                    local: &Local,\n-                   place_context: PlaceContext<'tcx>,\n+                   place_context: PlaceContext,\n                    location: Location) {\n         if self.needle != *local {\n             return;"}, {"sha": "2925005b6674dc1d05c6c9593a4eff749b5d6fd3", "filename": "src/librustc_mir/util/def_use.rs", "status": "modified", "additions": 28, "deletions": 33, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/22226fa7fba8af083593b3dd8ce1bc1ac5bf1320/src%2Flibrustc_mir%2Futil%2Fdef_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22226fa7fba8af083593b3dd8ce1bc1ac5bf1320/src%2Flibrustc_mir%2Futil%2Fdef_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fdef_use.rs?ref=22226fa7fba8af083593b3dd8ce1bc1ac5bf1320", "patch": "@@ -3,34 +3,31 @@\n use rustc::mir::{Local, Location, Mir};\n use rustc::mir::visit::{PlaceContext, MutVisitor, Visitor};\n use rustc_data_structures::indexed_vec::IndexVec;\n-use std::marker::PhantomData;\n use std::mem;\n-use std::slice;\n-use std::iter;\n \n-pub struct DefUseAnalysis<'tcx> {\n-    info: IndexVec<Local, Info<'tcx>>,\n+pub struct DefUseAnalysis {\n+    info: IndexVec<Local, Info>,\n }\n \n #[derive(Clone)]\n-pub struct Info<'tcx> {\n-    pub defs_and_uses: Vec<Use<'tcx>>,\n+pub struct Info {\n+    pub defs_and_uses: Vec<Use>,\n }\n \n #[derive(Clone)]\n-pub struct Use<'tcx> {\n-    pub context: PlaceContext<'tcx>,\n+pub struct Use {\n+    pub context: PlaceContext,\n     pub location: Location,\n }\n \n-impl<'tcx> DefUseAnalysis<'tcx> {\n-    pub fn new(mir: &Mir<'tcx>) -> DefUseAnalysis<'tcx> {\n+impl DefUseAnalysis {\n+    pub fn new(mir: &Mir<'_>) -> DefUseAnalysis {\n         DefUseAnalysis {\n             info: IndexVec::from_elem_n(Info::new(), mir.local_decls.len()),\n         }\n     }\n \n-    pub fn analyze(&mut self, mir: &Mir<'tcx>) {\n+    pub fn analyze(&mut self, mir: &Mir<'_>) {\n         self.clear();\n \n         let mut finder = DefUseFinder {\n@@ -46,13 +43,13 @@ impl<'tcx> DefUseAnalysis<'tcx> {\n         }\n     }\n \n-    pub fn local_info(&self, local: Local) -> &Info<'tcx> {\n+    pub fn local_info(&self, local: Local) -> &Info {\n         &self.info[local]\n     }\n \n-    fn mutate_defs_and_uses<F>(&self, local: Local, mir: &mut Mir<'tcx>, mut callback: F)\n+    fn mutate_defs_and_uses<F>(&self, local: Local, mir: &mut Mir<'_>, mut callback: F)\n                                where F: for<'a> FnMut(&'a mut Local,\n-                                                      PlaceContext<'tcx>,\n+                                                      PlaceContext,\n                                                       Location) {\n         for place_use in &self.info[local].defs_and_uses {\n             MutateUseVisitor::new(local,\n@@ -64,20 +61,20 @@ impl<'tcx> DefUseAnalysis<'tcx> {\n     // FIXME(pcwalton): this should update the def-use chains.\n     pub fn replace_all_defs_and_uses_with(&self,\n                                           local: Local,\n-                                          mir: &mut Mir<'tcx>,\n+                                          mir: &mut Mir<'_>,\n                                           new_local: Local) {\n         self.mutate_defs_and_uses(local, mir, |local, _, _| *local = new_local)\n     }\n }\n \n-struct DefUseFinder<'tcx> {\n-    info: IndexVec<Local, Info<'tcx>>,\n+struct DefUseFinder {\n+    info: IndexVec<Local, Info>,\n }\n \n-impl<'tcx> Visitor<'tcx> for DefUseFinder<'tcx> {\n+impl Visitor<'_> for DefUseFinder {\n     fn visit_local(&mut self,\n                    &local: &Local,\n-                   context: PlaceContext<'tcx>,\n+                   context: PlaceContext,\n                    location: Location) {\n         self.info[local].defs_and_uses.push(Use {\n             context,\n@@ -86,8 +83,8 @@ impl<'tcx> Visitor<'tcx> for DefUseFinder<'tcx> {\n     }\n }\n \n-impl<'tcx> Info<'tcx> {\n-    fn new() -> Info<'tcx> {\n+impl Info {\n+    fn new() -> Info {\n         Info {\n             defs_and_uses: vec![],\n         }\n@@ -107,7 +104,7 @@ impl<'tcx> Info<'tcx> {\n \n     pub fn defs_not_including_drop(\n         &self,\n-    ) -> iter::Filter<slice::Iter<'_, Use<'tcx>>, fn(&&Use<'tcx>) -> bool> {\n+    ) -> impl Iterator<Item=&Use> {\n         self.defs_and_uses.iter().filter(|place_use| {\n             place_use.context.is_mutating_use() && !place_use.context.is_drop()\n         })\n@@ -120,29 +117,27 @@ impl<'tcx> Info<'tcx> {\n     }\n }\n \n-struct MutateUseVisitor<'tcx, F> {\n+struct MutateUseVisitor<F> {\n     query: Local,\n     callback: F,\n-    phantom: PhantomData<&'tcx ()>,\n }\n \n-impl<'tcx, F> MutateUseVisitor<'tcx, F> {\n-    fn new(query: Local, callback: F, _: &Mir<'tcx>)\n-           -> MutateUseVisitor<'tcx, F>\n-           where F: for<'a> FnMut(&'a mut Local, PlaceContext<'tcx>, Location) {\n+impl<F> MutateUseVisitor<F> {\n+    fn new(query: Local, callback: F, _: &Mir<'_>)\n+           -> MutateUseVisitor<F>\n+           where F: for<'a> FnMut(&'a mut Local, PlaceContext, Location) {\n         MutateUseVisitor {\n             query,\n             callback,\n-            phantom: PhantomData,\n         }\n     }\n }\n \n-impl<'tcx, F> MutVisitor<'tcx> for MutateUseVisitor<'tcx, F>\n-              where F: for<'a> FnMut(&'a mut Local, PlaceContext<'tcx>, Location) {\n+impl<F> MutVisitor<'_> for MutateUseVisitor<F>\n+              where F: for<'a> FnMut(&'a mut Local, PlaceContext, Location) {\n     fn visit_local(&mut self,\n                     local: &mut Local,\n-                    context: PlaceContext<'tcx>,\n+                    context: PlaceContext,\n                     location: Location) {\n         if *local == self.query {\n             (self.callback)(local, context, location)"}, {"sha": "4302076f1c32a8726728c551f9301f790028e152", "filename": "src/librustc_mir/util/liveness.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/22226fa7fba8af083593b3dd8ce1bc1ac5bf1320/src%2Flibrustc_mir%2Futil%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22226fa7fba8af083593b3dd8ce1bc1ac5bf1320/src%2Flibrustc_mir%2Futil%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fliveness.rs?ref=22226fa7fba8af083593b3dd8ce1bc1ac5bf1320", "patch": "@@ -110,7 +110,7 @@ pub enum DefUse {\n     Drop,\n }\n \n-pub fn categorize<'tcx>(context: PlaceContext<'tcx>) -> Option<DefUse> {\n+pub fn categorize<'tcx>(context: PlaceContext) -> Option<DefUse> {\n     match context {\n         ///////////////////////////////////////////////////////////////////////////\n         // DEFS\n@@ -147,10 +147,10 @@ pub fn categorize<'tcx>(context: PlaceContext<'tcx>) -> Option<DefUse> {\n         // This won't affect the results since we use this analysis for generators\n         // and we only care about the result at suspension points. Borrows cannot\n         // cross suspension points so this behavior is unproblematic.\n-        PlaceContext::MutatingUse(MutatingUseContext::Borrow(..)) |\n-        PlaceContext::NonMutatingUse(NonMutatingUseContext::SharedBorrow(..)) |\n-        PlaceContext::NonMutatingUse(NonMutatingUseContext::ShallowBorrow(..)) |\n-        PlaceContext::NonMutatingUse(NonMutatingUseContext::UniqueBorrow(..)) |\n+        PlaceContext::MutatingUse(MutatingUseContext::Borrow) |\n+        PlaceContext::NonMutatingUse(NonMutatingUseContext::SharedBorrow) |\n+        PlaceContext::NonMutatingUse(NonMutatingUseContext::ShallowBorrow) |\n+        PlaceContext::NonMutatingUse(NonMutatingUseContext::UniqueBorrow) |\n \n         PlaceContext::NonMutatingUse(NonMutatingUseContext::Inspect) |\n         PlaceContext::NonMutatingUse(NonMutatingUseContext::Copy) |\n@@ -220,7 +220,7 @@ impl DefsUses {\n \n impl<'tcx> Visitor<'tcx> for DefsUsesVisitor\n {\n-    fn visit_local(&mut self, &local: &Local, context: PlaceContext<'tcx>, _: Location) {\n+    fn visit_local(&mut self, &local: &Local, context: PlaceContext, _: Location) {\n         match categorize(context) {\n             Some(DefUse::Def) => self.defs_uses.add_def(local),\n             Some(DefUse::Use) | Some(DefUse::Drop) => self.defs_uses.add_use(local),"}]}