{"sha": "dbc307455632ba6d51899c0cbe5df0fb897e361b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiYzMwNzQ1NTYzMmJhNmQ1MTg5OWMwY2JlNWRmMGZiODk3ZTM2MWI=", "commit": {"author": {"name": "Jeff Muizelaar", "email": "jrmuizel@gmail.com", "date": "2019-02-03T15:06:09Z"}, "committer": {"name": "Jeff Muizelaar", "email": "jrmuizel@gmail.com", "date": "2019-02-03T15:07:57Z"}, "message": "Make sure we match the entire pattern", "tree": {"sha": "64f53f0038332c069a28cb2d0768b4972abef2a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/64f53f0038332c069a28cb2d0768b4972abef2a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dbc307455632ba6d51899c0cbe5df0fb897e361b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dbc307455632ba6d51899c0cbe5df0fb897e361b", "html_url": "https://github.com/rust-lang/rust/commit/dbc307455632ba6d51899c0cbe5df0fb897e361b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dbc307455632ba6d51899c0cbe5df0fb897e361b/comments", "author": {"login": "jrmuizel", "id": 332653, "node_id": "MDQ6VXNlcjMzMjY1Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/332653?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jrmuizel", "html_url": "https://github.com/jrmuizel", "followers_url": "https://api.github.com/users/jrmuizel/followers", "following_url": "https://api.github.com/users/jrmuizel/following{/other_user}", "gists_url": "https://api.github.com/users/jrmuizel/gists{/gist_id}", "starred_url": "https://api.github.com/users/jrmuizel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jrmuizel/subscriptions", "organizations_url": "https://api.github.com/users/jrmuizel/orgs", "repos_url": "https://api.github.com/users/jrmuizel/repos", "events_url": "https://api.github.com/users/jrmuizel/events{/privacy}", "received_events_url": "https://api.github.com/users/jrmuizel/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jrmuizel", "id": 332653, "node_id": "MDQ6VXNlcjMzMjY1Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/332653?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jrmuizel", "html_url": "https://github.com/jrmuizel", "followers_url": "https://api.github.com/users/jrmuizel/followers", "following_url": "https://api.github.com/users/jrmuizel/following{/other_user}", "gists_url": "https://api.github.com/users/jrmuizel/gists{/gist_id}", "starred_url": "https://api.github.com/users/jrmuizel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jrmuizel/subscriptions", "organizations_url": "https://api.github.com/users/jrmuizel/orgs", "repos_url": "https://api.github.com/users/jrmuizel/repos", "events_url": "https://api.github.com/users/jrmuizel/events{/privacy}", "received_events_url": "https://api.github.com/users/jrmuizel/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f370393bba767864398665519ad7615aef4f07bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/f370393bba767864398665519ad7615aef4f07bd", "html_url": "https://github.com/rust-lang/rust/commit/f370393bba767864398665519ad7615aef4f07bd"}], "stats": {"total": 35, "additions": 34, "deletions": 1}, "files": [{"sha": "ec12192cc55e62f9b77413eb3b9c400f2504f2a4", "filename": "crates/ra_mbe/src/lib.rs", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/dbc307455632ba6d51899c0cbe5df0fb897e361b/crates%2Fra_mbe%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbc307455632ba6d51899c0cbe5df0fb897e361b/crates%2Fra_mbe%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Flib.rs?ref=dbc307455632ba6d51899c0cbe5df0fb897e361b", "patch": "@@ -176,7 +176,7 @@ impl_froms!(TokenTree: Leaf, Subtree);\n     }\n \n     #[test]\n-    fn test_fail_match_pattern_by_token() {\n+    fn test_fail_match_pattern_by_first_token() {\n         let macro_definition = r#\"\n         macro_rules! foo {\n             ($ i:ident) => (\n@@ -206,4 +206,34 @@ impl_froms!(TokenTree: Leaf, Subtree);\n         assert_expansion(&rules, \"foo! { + Baz }\", \"struct Baz ;\");\n     }\n \n+    #[test]\n+    fn test_fail_match_pattern_by_last_token() {\n+        let macro_definition = r#\"\n+        macro_rules! foo {\n+            ($ i:ident) => (\n+                mod $ i {}\n+            );\n+            ($ i:ident =) => (\n+                fn $ i() {}\n+            );\n+            ($ i:ident +) => (\n+                struct $ i;\n+            )\n+        }\n+\"#;\n+\n+        let source_file = ast::SourceFile::parse(macro_definition);\n+        let macro_definition = source_file\n+            .syntax()\n+            .descendants()\n+            .find_map(ast::MacroCall::cast)\n+            .unwrap();\n+\n+        let definition_tt = ast_to_token_tree(macro_definition.token_tree().unwrap()).unwrap();\n+        let rules = crate::MacroRules::parse(&definition_tt).unwrap();\n+\n+        assert_expansion(&rules, \"foo! { foo }\", \"mod foo {}\");\n+        assert_expansion(&rules, \"foo! { bar = }\", \"fn bar () {}\");\n+        assert_expansion(&rules, \"foo! { Baz + }\", \"struct Baz ;\");\n+    }\n }"}, {"sha": "2945e735905c6da9645032e04e3d7197d4bceca7", "filename": "crates/ra_mbe/src/mbe_expander.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dbc307455632ba6d51899c0cbe5df0fb897e361b/crates%2Fra_mbe%2Fsrc%2Fmbe_expander.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbc307455632ba6d51899c0cbe5df0fb897e361b/crates%2Fra_mbe%2Fsrc%2Fmbe_expander.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fmbe_expander.rs?ref=dbc307455632ba6d51899c0cbe5df0fb897e361b", "patch": "@@ -13,6 +13,9 @@ pub(crate) fn exapnd(rules: &crate::MacroRules, input: &tt::Subtree) -> Option<t\n fn expand_rule(rule: &crate::Rule, input: &tt::Subtree) -> Option<tt::Subtree> {\n     let mut input = TtCursor::new(input);\n     let bindings = match_lhs(&rule.lhs, &mut input)?;\n+    if !input.is_eof() {\n+        return None;\n+    }\n     expand_subtree(&rule.rhs, &bindings, &mut Vec::new())\n }\n "}]}