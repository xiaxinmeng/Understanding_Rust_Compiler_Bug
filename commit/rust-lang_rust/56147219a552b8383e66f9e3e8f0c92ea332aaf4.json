{"sha": "56147219a552b8383e66f9e3e8f0c92ea332aaf4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2MTQ3MjE5YTU1MmI4MzgzZTY2ZjllM2U4ZjBjOTJlYTMzMmFhZjQ=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2020-03-27T23:18:52Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2020-03-29T14:27:07Z"}, "message": "Stabilize float::to_int_unchecked\n\nThis renames and stabilizes unsafe floating point to integer casts, which are\nintended to be the substitute for the currently unsound `as` behavior, once that\nchanges to safe-but-slower saturating casts.", "tree": {"sha": "3d0657479dfd5f7bbb3b7b98d432f3713a39cf04", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d0657479dfd5f7bbb3b7b98d432f3713a39cf04"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/56147219a552b8383e66f9e3e8f0c92ea332aaf4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/56147219a552b8383e66f9e3e8f0c92ea332aaf4", "html_url": "https://github.com/rust-lang/rust/commit/56147219a552b8383e66f9e3e8f0c92ea332aaf4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/56147219a552b8383e66f9e3e8f0c92ea332aaf4/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ab82b87af4f20b6c0a481e050517103d50263e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ab82b87af4f20b6c0a481e050517103d50263e9", "html_url": "https://github.com/rust-lang/rust/commit/8ab82b87af4f20b6c0a481e050517103d50263e9"}], "stats": {"total": 55, "additions": 33, "deletions": 22}, "files": [{"sha": "66ae760fc1f791b6a57eea66c117416e122c1572", "filename": "src/libcore/convert/num.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/56147219a552b8383e66f9e3e8f0c92ea332aaf4/src%2Flibcore%2Fconvert%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56147219a552b8383e66f9e3e8f0c92ea332aaf4/src%2Flibcore%2Fconvert%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fconvert%2Fnum.rs?ref=56147219a552b8383e66f9e3e8f0c92ea332aaf4", "patch": "@@ -13,9 +13,9 @@ mod private {\n /// Typically doesn\u2019t need to be used directly.\n #[unstable(feature = \"convert_float_to_int\", issue = \"67057\")]\n pub trait FloatToInt<Int>: private::Sealed + Sized {\n-    #[unstable(feature = \"float_approx_unchecked_to\", issue = \"67058\")]\n+    #[unstable(feature = \"convert_float_to_int\", issue = \"67057\")]\n     #[doc(hidden)]\n-    unsafe fn approx_unchecked(self) -> Int;\n+    unsafe fn to_int_unchecked(self) -> Int;\n }\n \n macro_rules! impl_float_to_int {\n@@ -27,8 +27,15 @@ macro_rules! impl_float_to_int {\n             impl FloatToInt<$Int> for $Float {\n                 #[doc(hidden)]\n                 #[inline]\n-                unsafe fn approx_unchecked(self) -> $Int {\n-                    crate::intrinsics::float_to_int_approx_unchecked(self)\n+                unsafe fn to_int_unchecked(self) -> $Int {\n+                    #[cfg(bootstrap)]\n+                    {\n+                        crate::intrinsics::float_to_int_approx_unchecked(self)\n+                    }\n+                    #[cfg(not(bootstrap))]\n+                    {\n+                        crate::intrinsics::float_to_int_unchecked(self)\n+                    }\n                 }\n             }\n         )+"}, {"sha": "7e9140faa64119e81050c78f55460fd703bd83a5", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/56147219a552b8383e66f9e3e8f0c92ea332aaf4/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56147219a552b8383e66f9e3e8f0c92ea332aaf4/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=56147219a552b8383e66f9e3e8f0c92ea332aaf4", "patch": "@@ -1582,8 +1582,16 @@ extern \"rust-intrinsic\" {\n     /// Convert with LLVM\u2019s fptoui/fptosi, which may return undef for values out of range\n     /// (<https://github.com/rust-lang/rust/issues/10184>)\n     /// This is under stabilization at <https://github.com/rust-lang/rust/issues/67058>\n+    #[cfg(bootstrap)]\n     pub fn float_to_int_approx_unchecked<Float: Copy, Int: Copy>(value: Float) -> Int;\n \n+    /// Convert with LLVM\u2019s fptoui/fptosi, which may return undef for values out of range\n+    /// (<https://github.com/rust-lang/rust/issues/10184>)\n+    ///\n+    /// Stabilized as `f32::to_int_unchecked` and `f64::to_int_unchecked`.\n+    #[cfg(not(bootstrap))]\n+    pub fn float_to_int_unchecked<Float: Copy, Int: Copy>(value: Float) -> Int;\n+\n     /// Returns the number of bits set in an integer type `T`\n     ///\n     /// The stabilized versions of this intrinsic are available on the integer"}, {"sha": "09f1eab2d4b9d66be4c56907850e0a86d836973c", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/56147219a552b8383e66f9e3e8f0c92ea332aaf4/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56147219a552b8383e66f9e3e8f0c92ea332aaf4/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=56147219a552b8383e66f9e3e8f0c92ea332aaf4", "patch": "@@ -464,14 +464,12 @@ impl f32 {\n     /// assuming that the value is finite and fits in that type.\n     ///\n     /// ```\n-    /// #![feature(float_approx_unchecked_to)]\n-    ///\n     /// let value = 4.6_f32;\n-    /// let rounded = unsafe { value.approx_unchecked_to::<u16>() };\n+    /// let rounded = unsafe { value.to_int_unchecked::<u16>() };\n     /// assert_eq!(rounded, 4);\n     ///\n     /// let value = -128.9_f32;\n-    /// let rounded = unsafe { value.approx_unchecked_to::<i8>() };\n+    /// let rounded = unsafe { value.to_int_unchecked::<i8>() };\n     /// assert_eq!(rounded, std::i8::MIN);\n     /// ```\n     ///\n@@ -482,13 +480,13 @@ impl f32 {\n     /// * Not be `NaN`\n     /// * Not be infinite\n     /// * Be representable in the return type `Int`, after truncating off its fractional part\n-    #[unstable(feature = \"float_approx_unchecked_to\", issue = \"67058\")]\n+    #[stable(feature = \"float_approx_unchecked_to\", since = \"1.44.0\")]\n     #[inline]\n-    pub unsafe fn approx_unchecked_to<Int>(self) -> Int\n+    pub unsafe fn to_int_unchecked<Int>(self) -> Int\n     where\n         Self: FloatToInt<Int>,\n     {\n-        FloatToInt::<Int>::approx_unchecked(self)\n+        FloatToInt::<Int>::to_int_unchecked(self)\n     }\n \n     /// Raw transmutation to `u32`."}, {"sha": "65ef7ba9ac7680b00e1e2dd7bf05e3efc1d4ee63", "filename": "src/libcore/num/f64.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/56147219a552b8383e66f9e3e8f0c92ea332aaf4/src%2Flibcore%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56147219a552b8383e66f9e3e8f0c92ea332aaf4/src%2Flibcore%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff64.rs?ref=56147219a552b8383e66f9e3e8f0c92ea332aaf4", "patch": "@@ -478,14 +478,12 @@ impl f64 {\n     /// assuming that the value is finite and fits in that type.\n     ///\n     /// ```\n-    /// #![feature(float_approx_unchecked_to)]\n-    ///\n     /// let value = 4.6_f32;\n-    /// let rounded = unsafe { value.approx_unchecked_to::<u16>() };\n+    /// let rounded = unsafe { value.to_int_unchecked::<u16>() };\n     /// assert_eq!(rounded, 4);\n     ///\n     /// let value = -128.9_f32;\n-    /// let rounded = unsafe { value.approx_unchecked_to::<i8>() };\n+    /// let rounded = unsafe { value.to_int_unchecked::<i8>() };\n     /// assert_eq!(rounded, std::i8::MIN);\n     /// ```\n     ///\n@@ -496,13 +494,13 @@ impl f64 {\n     /// * Not be `NaN`\n     /// * Not be infinite\n     /// * Be representable in the return type `Int`, after truncating off its fractional part\n-    #[unstable(feature = \"float_approx_unchecked_to\", issue = \"67058\")]\n+    #[stable(feature = \"float_approx_unchecked_to\", since = \"1.44.0\")]\n     #[inline]\n-    pub unsafe fn approx_unchecked_to<Int>(self) -> Int\n+    pub unsafe fn to_int_unchecked<Int>(self) -> Int\n     where\n         Self: FloatToInt<Int>,\n     {\n-        FloatToInt::<Int>::approx_unchecked(self)\n+        FloatToInt::<Int>::to_int_unchecked(self)\n     }\n \n     /// Raw transmutation to `u64`."}, {"sha": "a3aa73e6217e8deb43f4c7ecae6a550d7b104ac9", "filename": "src/librustc_codegen_llvm/intrinsic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/56147219a552b8383e66f9e3e8f0c92ea332aaf4/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56147219a552b8383e66f9e3e8f0c92ea332aaf4/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs?ref=56147219a552b8383e66f9e3e8f0c92ea332aaf4", "patch": "@@ -544,13 +544,13 @@ impl IntrinsicCallMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n                 }\n             }\n \n-            \"float_to_int_approx_unchecked\" => {\n+            \"float_to_int_unchecked\" => {\n                 if float_type_width(arg_tys[0]).is_none() {\n                     span_invalid_monomorphization_error(\n                         tcx.sess,\n                         span,\n                         &format!(\n-                            \"invalid monomorphization of `float_to_int_approx_unchecked` \\\n+                            \"invalid monomorphization of `float_to_int_unchecked` \\\n                                   intrinsic: expected basic float type, \\\n                                   found `{}`\",\n                             arg_tys[0]\n@@ -571,7 +571,7 @@ impl IntrinsicCallMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n                             tcx.sess,\n                             span,\n                             &format!(\n-                                \"invalid monomorphization of `float_to_int_approx_unchecked` \\\n+                                \"invalid monomorphization of `float_to_int_unchecked` \\\n                                       intrinsic:  expected basic integer type, \\\n                                       found `{}`\",\n                                 ret_ty"}, {"sha": "d506d3445f62eb75dd6b48cf6453697a38fcd166", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56147219a552b8383e66f9e3e8f0c92ea332aaf4/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56147219a552b8383e66f9e3e8f0c92ea332aaf4/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=56147219a552b8383e66f9e3e8f0c92ea332aaf4", "patch": "@@ -275,7 +275,7 @@ pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem<'_>) {\n             \"fadd_fast\" | \"fsub_fast\" | \"fmul_fast\" | \"fdiv_fast\" | \"frem_fast\" => {\n                 (1, vec![param(0), param(0)], param(0))\n             }\n-            \"float_to_int_approx_unchecked\" => (2, vec![param(0)], param(1)),\n+            \"float_to_int_unchecked\" => (2, vec![param(0)], param(1)),\n \n             \"assume\" => (0, vec![tcx.types.bool], tcx.mk_unit()),\n             \"likely\" => (0, vec![tcx.types.bool], tcx.types.bool),"}]}