{"sha": "b4c6abcf9e6c1d2710e7ad6a9ce44b3ca6b10d52", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0YzZhYmNmOWU2YzFkMjcxMGU3YWQ2YTljZTQ0YjNjYTZiMTBkNTI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-11-07T12:33:37Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-11-08T08:32:20Z"}, "message": "ast::ItemKind::Fn: use ast::FnSig", "tree": {"sha": "cc97d122086c2cd6efd91a6d05583baf59c555fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc97d122086c2cd6efd91a6d05583baf59c555fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4c6abcf9e6c1d2710e7ad6a9ce44b3ca6b10d52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4c6abcf9e6c1d2710e7ad6a9ce44b3ca6b10d52", "html_url": "https://github.com/rust-lang/rust/commit/b4c6abcf9e6c1d2710e7ad6a9ce44b3ca6b10d52", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4c6abcf9e6c1d2710e7ad6a9ce44b3ca6b10d52/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2cd48e8a3b71256d7db1ac61e8994c06620238b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/2cd48e8a3b71256d7db1ac61e8994c06620238b6", "html_url": "https://github.com/rust-lang/rust/commit/2cd48e8a3b71256d7db1ac61e8994c06620238b6"}], "stats": {"total": 114, "additions": 51, "deletions": 63}, "files": [{"sha": "7aa1aa8bb514a82f6fe6cba02772b47384fcfd81", "filename": "src/librustc/hir/lowering/item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4c6abcf9e6c1d2710e7ad6a9ce44b3ca6b10d52/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4c6abcf9e6c1d2710e7ad6a9ce44b3ca6b10d52/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs?ref=b4c6abcf9e6c1d2710e7ad6a9ce44b3ca6b10d52", "patch": "@@ -306,7 +306,7 @@ impl LoweringContext<'_> {\n                     self.lower_const_body(e)\n                 )\n             }\n-            ItemKind::Fn(ref decl, header, ref generics, ref body) => {\n+            ItemKind::Fn(FnSig { ref decl, header }, ref generics, ref body) => {\n                 let fn_def_id = self.resolver.definitions().local_def_id(id);\n                 self.with_new_scopes(|this| {\n                     this.current_item = Some(ident.span);"}, {"sha": "d858e00a2e9cdd7c204789326fbb3644d535b61a", "filename": "src/librustc/hir/map/def_collector.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b4c6abcf9e6c1d2710e7ad6a9ce44b3ca6b10d52/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4c6abcf9e6c1d2710e7ad6a9ce44b3ca6b10d52/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs?ref=b4c6abcf9e6c1d2710e7ad6a9ce44b3ca6b10d52", "patch": "@@ -100,7 +100,7 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n \n         // Pick the def data. This need not be unique, but the more\n         // information we encapsulate into, the better\n-        let def_data = match i.kind {\n+        let def_data = match &i.kind {\n             ItemKind::Impl(..) => DefPathData::Impl,\n             ItemKind::Mod(..) if i.ident.name == kw::Invalid => {\n                 return visit::walk_item(self, i);\n@@ -109,19 +109,14 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n             ItemKind::Enum(..) | ItemKind::Struct(..) | ItemKind::Union(..) |\n             ItemKind::OpaqueTy(..) | ItemKind::ExternCrate(..) | ItemKind::ForeignMod(..) |\n             ItemKind::TyAlias(..) => DefPathData::TypeNs(i.ident.name),\n-            ItemKind::Fn(\n-                ref decl,\n-                ref header,\n-                ref generics,\n-                ref body,\n-            ) if header.asyncness.node.is_async() => {\n+            ItemKind::Fn(sig, generics, body) if sig.header.asyncness.node.is_async() => {\n                 return self.visit_async_fn(\n                     i.id,\n                     i.ident.name,\n                     i.span,\n-                    header,\n+                    &sig.header,\n                     generics,\n-                    decl,\n+                    &sig.decl,\n                     body,\n                 )\n             }"}, {"sha": "a74ea4bca39eb9d0a4103fdbd5a03e776f7283d3", "filename": "src/librustc_interface/util.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b4c6abcf9e6c1d2710e7ad6a9ce44b3ca6b10d52/src%2Flibrustc_interface%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4c6abcf9e6c1d2710e7ad6a9ce44b3ca6b10d52/src%2Flibrustc_interface%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Futil.rs?ref=b4c6abcf9e6c1d2710e7ad6a9ce44b3ca6b10d52", "patch": "@@ -786,14 +786,17 @@ impl<'a> ReplaceBodyWithLoop<'a> {\n             false\n         }\n     }\n+\n+    fn is_sig_const(sig: &ast::FnSig) -> bool {\n+        sig.header.constness.node == ast::Constness::Const || Self::should_ignore_fn(&sig.decl)\n+    }\n }\n \n impl<'a> MutVisitor for ReplaceBodyWithLoop<'a> {\n     fn visit_item_kind(&mut self, i: &mut ast::ItemKind) {\n         let is_const = match i {\n             ast::ItemKind::Static(..) | ast::ItemKind::Const(..) => true,\n-            ast::ItemKind::Fn(ref decl, ref header, _, _) =>\n-                header.constness.node == ast::Constness::Const || Self::should_ignore_fn(decl),\n+            ast::ItemKind::Fn(ref sig, _, _) => Self::is_sig_const(sig),\n             _ => false,\n         };\n         self.run(is_const, |s| noop_visit_item_kind(i, s))\n@@ -802,8 +805,7 @@ impl<'a> MutVisitor for ReplaceBodyWithLoop<'a> {\n     fn flat_map_trait_item(&mut self, i: ast::TraitItem) -> SmallVec<[ast::TraitItem; 1]> {\n         let is_const = match i.kind {\n             ast::TraitItemKind::Const(..) => true,\n-            ast::TraitItemKind::Method(ast::FnSig { ref decl, ref header, .. }, _) =>\n-                header.constness.node == ast::Constness::Const || Self::should_ignore_fn(decl),\n+            ast::TraitItemKind::Method(ref sig, _) => Self::is_sig_const(sig),\n             _ => false,\n         };\n         self.run(is_const, |s| noop_flat_map_trait_item(i, s))\n@@ -812,8 +814,7 @@ impl<'a> MutVisitor for ReplaceBodyWithLoop<'a> {\n     fn flat_map_impl_item(&mut self, i: ast::ImplItem) -> SmallVec<[ast::ImplItem; 1]> {\n         let is_const = match i.kind {\n             ast::ImplItemKind::Const(..) => true,\n-            ast::ImplItemKind::Method(ast::FnSig { ref decl, ref header, .. }, _) =>\n-                header.constness.node == ast::Constness::Const || Self::should_ignore_fn(decl),\n+            ast::ImplItemKind::Method(ref sig, _) => Self::is_sig_const(sig),\n             _ => false,\n         };\n         self.run(is_const, |s| noop_flat_map_impl_item(i, s))"}, {"sha": "6151fc58d894bbc40adbfc055800ca93cc22956e", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b4c6abcf9e6c1d2710e7ad6a9ce44b3ca6b10d52/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4c6abcf9e6c1d2710e7ad6a9ce44b3ca6b10d52/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=b4c6abcf9e6c1d2710e7ad6a9ce44b3ca6b10d52", "patch": "@@ -575,12 +575,12 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                         .note(\"only trait implementations may be annotated with default\").emit();\n                 }\n             }\n-            ItemKind::Fn(ref decl, ref header, ref generics, _) => {\n-                self.visit_fn_header(header);\n-                self.check_fn_decl(decl);\n+            ItemKind::Fn(ref sig, ref generics, _) => {\n+                self.visit_fn_header(&sig.header);\n+                self.check_fn_decl(&sig.decl);\n                 // We currently do not permit const generics in `const fn`, as\n                 // this is tantamount to allowing compile-time dependent typing.\n-                if header.constness.node == Constness::Const {\n+                if sig.header.constness.node == Constness::Const {\n                     // Look for const generics and error if we find any.\n                     for param in &generics.params {\n                         match param.kind {"}, {"sha": "a23684ea649ccab21e2b9fc108cb54714aa9ce74", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4c6abcf9e6c1d2710e7ad6a9ce44b3ca6b10d52/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4c6abcf9e6c1d2710e7ad6a9ce44b3ca6b10d52/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=b4c6abcf9e6c1d2710e7ad6a9ce44b3ca6b10d52", "patch": "@@ -731,7 +731,7 @@ impl<'a, 'b> LateResolutionVisitor<'a, '_> {\n         match item.kind {\n             ItemKind::TyAlias(_, ref generics) |\n             ItemKind::OpaqueTy(_, ref generics) |\n-            ItemKind::Fn(_, _, ref generics, _) => {\n+            ItemKind::Fn(_, ref generics, _) => {\n                 self.with_generic_param_rib(generics, ItemRibKind(HasGenericParams::Yes),\n                                             |this| visit::walk_item(this, item));\n             }"}, {"sha": "92c391fb4a338ca8189305e3299b1cf4ca99f375", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b4c6abcf9e6c1d2710e7ad6a9ce44b3ca6b10d52/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4c6abcf9e6c1d2710e7ad6a9ce44b3ca6b10d52/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=b4c6abcf9e6c1d2710e7ad6a9ce44b3ca6b10d52", "patch": "@@ -1334,8 +1334,8 @@ impl<'l, 'tcx> Visitor<'l> for DumpVisitor<'l, 'tcx> {\n                     );\n                 }\n             }\n-            Fn(ref decl, ref header, ref ty_params, ref body) => {\n-                self.process_fn(item, &decl, &header, ty_params, &body)\n+            Fn(ref sig, ref ty_params, ref body) => {\n+                self.process_fn(item, &sig.decl, &sig.header, ty_params, &body)\n             }\n             Static(ref typ, _, ref expr) => self.process_static_or_const_item(item, typ, expr),\n             Const(ref typ, ref expr) => self.process_static_or_const_item(item, &typ, &expr),"}, {"sha": "424d57c8fe7fa7175afd200865a2fb86843e6ffa", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b4c6abcf9e6c1d2710e7ad6a9ce44b3ca6b10d52/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4c6abcf9e6c1d2710e7ad6a9ce44b3ca6b10d52/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=b4c6abcf9e6c1d2710e7ad6a9ce44b3ca6b10d52", "patch": "@@ -180,7 +180,7 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n \n     pub fn get_item_data(&self, item: &ast::Item) -> Option<Data> {\n         match item.kind {\n-            ast::ItemKind::Fn(ref decl, .., ref generics, _) => {\n+            ast::ItemKind::Fn(ref sig, .., ref generics, _) => {\n                 let qualname = format!(\"::{}\",\n                     self.tcx.def_path_str(self.tcx.hir().local_def_id_from_node_id(item.id)));\n                 filter!(self.span_utils, item.ident.span);\n@@ -190,7 +190,7 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n                     span: self.span_from_span(item.ident.span),\n                     name: item.ident.to_string(),\n                     qualname,\n-                    value: make_signature(decl, generics),\n+                    value: make_signature(&sig.decl, generics),\n                     parent: None,\n                     children: vec![],\n                     decl_id: None,"}, {"sha": "d1b9b8ff44ddbdaee5c96597734938845c50329e", "filename": "src/librustc_save_analysis/sig.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4c6abcf9e6c1d2710e7ad6a9ce44b3ca6b10d52/src%2Flibrustc_save_analysis%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4c6abcf9e6c1d2710e7ad6a9ce44b3ca6b10d52/src%2Flibrustc_save_analysis%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fsig.rs?ref=b4c6abcf9e6c1d2710e7ad6a9ce44b3ca6b10d52", "patch": "@@ -376,7 +376,7 @@ impl Sig for ast::Item {\n \n                 Ok(extend_sig(ty, text, defs, vec![]))\n             }\n-            ast::ItemKind::Fn(ref decl, header, ref generics, _) => {\n+            ast::ItemKind::Fn(ast::FnSig { ref decl, header }, ref generics, _) => {\n                 let mut text = String::new();\n                 if header.constness.node == ast::Constness::Const {\n                     text.push_str(\"const \");"}, {"sha": "b57d223899184ddd407b60a4dbf62759482cbcd7", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4c6abcf9e6c1d2710e7ad6a9ce44b3ca6b10d52/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4c6abcf9e6c1d2710e7ad6a9ce44b3ca6b10d52/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=b4c6abcf9e6c1d2710e7ad6a9ce44b3ca6b10d52", "patch": "@@ -2433,7 +2433,7 @@ pub enum ItemKind {\n     /// A function declaration (`fn`).\n     ///\n     /// E.g., `fn foo(bar: usize) -> usize { .. }`.\n-    Fn(P<FnDecl>, FnHeader, Generics, P<Block>),\n+    Fn(FnSig, Generics, P<Block>),\n     /// A module declaration (`mod`).\n     ///\n     /// E.g., `mod foo;` or `mod foo { .. }`."}, {"sha": "7696ea48f9338392f1fc94893fc5c250711fef34", "filename": "src/libsyntax/mut_visit.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b4c6abcf9e6c1d2710e7ad6a9ce44b3ca6b10d52/src%2Flibsyntax%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4c6abcf9e6c1d2710e7ad6a9ce44b3ca6b10d52/src%2Flibsyntax%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fmut_visit.rs?ref=b4c6abcf9e6c1d2710e7ad6a9ce44b3ca6b10d52", "patch": "@@ -357,7 +357,7 @@ pub fn visit_bounds<T: MutVisitor>(bounds: &mut GenericBounds, vis: &mut T) {\n }\n \n // No `noop_` prefix because there isn't a corresponding method in `MutVisitor`.\n-pub fn visit_method_sig<T: MutVisitor>(FnSig { header, decl }: &mut FnSig, vis: &mut T) {\n+pub fn visit_fn_sig<T: MutVisitor>(FnSig { header, decl }: &mut FnSig, vis: &mut T) {\n     vis.visit_fn_header(header);\n     vis.visit_fn_decl(decl);\n }\n@@ -878,9 +878,8 @@ pub fn noop_visit_item_kind<T: MutVisitor>(kind: &mut ItemKind, vis: &mut T) {\n             vis.visit_ty(ty);\n             vis.visit_expr(expr);\n         }\n-        ItemKind::Fn(decl, header, generics, body) => {\n-            vis.visit_fn_decl(decl);\n-            vis.visit_fn_header(header);\n+        ItemKind::Fn(sig, generics, body) => {\n+            visit_fn_sig(sig, vis);\n             vis.visit_generics(generics);\n             vis.visit_block(body);\n         }\n@@ -938,7 +937,7 @@ pub fn noop_flat_map_trait_item<T: MutVisitor>(mut item: TraitItem, vis: &mut T)\n             visit_opt(default, |default| vis.visit_expr(default));\n         }\n         TraitItemKind::Method(sig, body) => {\n-            visit_method_sig(sig, vis);\n+            visit_fn_sig(sig, vis);\n             visit_opt(body, |body| vis.visit_block(body));\n         }\n         TraitItemKind::Type(bounds, default) => {\n@@ -970,7 +969,7 @@ pub fn noop_flat_map_impl_item<T: MutVisitor>(mut item: ImplItem, visitor: &mut\n             visitor.visit_expr(expr);\n         }\n         ImplItemKind::Method(sig, body) => {\n-            visit_method_sig(sig, visitor);\n+            visit_fn_sig(sig, visitor);\n             visitor.visit_block(body);\n         }\n         ImplItemKind::TyAlias(ty) => visitor.visit_ty(ty),"}, {"sha": "531ad532a54dc5b4c1924aacb1ce0cd6a3d2efed", "filename": "src/libsyntax/parse/parser/item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4c6abcf9e6c1d2710e7ad6a9ce44b3ca6b10d52/src%2Flibsyntax%2Fparse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4c6abcf9e6c1d2710e7ad6a9ce44b3ca6b10d52/src%2Flibsyntax%2Fparse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fitem.rs?ref=b4c6abcf9e6c1d2710e7ad6a9ce44b3ca6b10d52", "patch": "@@ -1800,7 +1800,7 @@ impl<'a> Parser<'a> {\n             is_name_required: |_| true,\n         })?;\n         let (inner_attrs, body) = self.parse_inner_attrs_and_block()?;\n-        let kind = ItemKind::Fn(decl, header, generics, body);\n+        let kind = ItemKind::Fn(FnSig { decl, header }, generics, body);\n         self.mk_item_with_info(attrs, lo, vis, (ident, kind, Some(inner_attrs)))\n     }\n "}, {"sha": "2203e8d9d0637a64ae0fcb3a152937b4dc20d45f", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b4c6abcf9e6c1d2710e7ad6a9ce44b3ca6b10d52/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4c6abcf9e6c1d2710e7ad6a9ce44b3ca6b10d52/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=b4c6abcf9e6c1d2710e7ad6a9ce44b3ca6b10d52", "patch": "@@ -1199,11 +1199,11 @@ impl<'a> State<'a> {\n                 self.s.word(\";\");\n                 self.end(); // end the outer cbox\n             }\n-            ast::ItemKind::Fn(ref decl, header, ref param_names, ref body) => {\n+            ast::ItemKind::Fn(ref sig, ref param_names, ref body) => {\n                 self.head(\"\");\n                 self.print_fn(\n-                    decl,\n-                    header,\n+                    &sig.decl,\n+                    sig.header,\n                     Some(item.ident),\n                     param_names,\n                     &item.vis"}, {"sha": "ea2dc357e6ebf0630284b6c436e0274f67c9a586", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b4c6abcf9e6c1d2710e7ad6a9ce44b3ca6b10d52/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4c6abcf9e6c1d2710e7ad6a9ce44b3ca6b10d52/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=b4c6abcf9e6c1d2710e7ad6a9ce44b3ca6b10d52", "patch": "@@ -244,12 +244,11 @@ pub fn walk_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a Item) {\n             visitor.visit_ty(typ);\n             visitor.visit_expr(expr);\n         }\n-        ItemKind::Fn(ref declaration, ref header, ref generics, ref body) => {\n+        ItemKind::Fn(ref sig, ref generics, ref body) => {\n             visitor.visit_generics(generics);\n-            visitor.visit_fn_header(header);\n-            visitor.visit_fn(FnKind::ItemFn(item.ident, header,\n-                                            &item.vis, body),\n-                             declaration,\n+            visitor.visit_fn_header(&sig.header);\n+            visitor.visit_fn(FnKind::ItemFn(item.ident, &sig.header, &item.vis, body),\n+                             &sig.decl,\n                              item.span,\n                              item.id)\n         }"}, {"sha": "dc29e057455d131141ab42aae6f9effd2e176622", "filename": "src/libsyntax_ext/global_allocator.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b4c6abcf9e6c1d2710e7ad6a9ce44b3ca6b10d52/src%2Flibsyntax_ext%2Fglobal_allocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4c6abcf9e6c1d2710e7ad6a9ce44b3ca6b10d52/src%2Flibsyntax_ext%2Fglobal_allocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fglobal_allocator.rs?ref=b4c6abcf9e6c1d2710e7ad6a9ce44b3ca6b10d52", "patch": "@@ -1,7 +1,7 @@\n use crate::util::check_builtin_macro_attribute;\n \n use syntax::ast::{ItemKind, Mutability, Stmt, Ty, TyKind, Unsafety};\n-use syntax::ast::{self, Param, Attribute, Expr, FnHeader, Generics, Ident};\n+use syntax::ast::{self, Param, Attribute, Expr, FnSig, FnHeader, Generics, Ident};\n use syntax::expand::allocator::{AllocatorKind, AllocatorMethod, AllocatorTy, ALLOCATOR_METHODS};\n use syntax::ptr::P;\n use syntax::symbol::{kw, sym, Symbol};\n@@ -73,15 +73,10 @@ impl AllocFnFactory<'_, '_> {\n             .collect();\n         let result = self.call_allocator(method.name, args);\n         let (output_ty, output_expr) = self.ret_ty(&method.output, result);\n-        let kind = ItemKind::Fn(\n-            self.cx.fn_decl(abi_args, ast::FunctionRetTy::Ty(output_ty)),\n-            FnHeader {\n-                unsafety: Unsafety::Unsafe,\n-                ..FnHeader::default()\n-            },\n-            Generics::default(),\n-            self.cx.block_expr(output_expr),\n-        );\n+        let decl = self.cx.fn_decl(abi_args, ast::FunctionRetTy::Ty(output_ty));\n+        let header = FnHeader { unsafety: Unsafety::Unsafe, ..FnHeader::default() };\n+        let sig = FnSig { decl, header };\n+        let kind = ItemKind::Fn(sig, Generics::default(), self.cx.block_expr(output_expr));\n         let item = self.cx.item(\n             self.span,\n             self.cx.ident_of(&self.kind.fn_name(method.name), self.span),"}, {"sha": "8656100c92127ae9eda4b6b80fb9b0832b795b52", "filename": "src/libsyntax_ext/test.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b4c6abcf9e6c1d2710e7ad6a9ce44b3ca6b10d52/src%2Flibsyntax_ext%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4c6abcf9e6c1d2710e7ad6a9ce44b3ca6b10d52/src%2Flibsyntax_ext%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Ftest.rs?ref=b4c6abcf9e6c1d2710e7ad6a9ce44b3ca6b10d52", "patch": "@@ -310,15 +310,15 @@ fn test_type(cx: &ExtCtxt<'_>) -> TestType {\n fn has_test_signature(cx: &ExtCtxt<'_>, i: &ast::Item) -> bool {\n     let has_should_panic_attr = attr::contains_name(&i.attrs, sym::should_panic);\n     let ref sd = cx.parse_sess.span_diagnostic;\n-    if let ast::ItemKind::Fn(ref decl, ref header, ref generics, _) = i.kind {\n-        if header.unsafety == ast::Unsafety::Unsafe {\n+    if let ast::ItemKind::Fn(ref sig, ref generics, _) = i.kind {\n+        if sig.header.unsafety == ast::Unsafety::Unsafe {\n             sd.span_err(\n                 i.span,\n                 \"unsafe functions cannot be used for tests\"\n             );\n             return false\n         }\n-        if header.asyncness.node.is_async() {\n+        if sig.header.asyncness.node.is_async() {\n             sd.span_err(\n                 i.span,\n                 \"async functions cannot be used for tests\"\n@@ -329,13 +329,13 @@ fn has_test_signature(cx: &ExtCtxt<'_>, i: &ast::Item) -> bool {\n \n         // If the termination trait is active, the compiler will check that the output\n         // type implements the `Termination` trait as `libtest` enforces that.\n-        let has_output = match decl.output {\n+        let has_output = match sig.decl.output {\n             ast::FunctionRetTy::Default(..) => false,\n             ast::FunctionRetTy::Ty(ref t) if t.kind.is_unit() => false,\n             _ => true\n         };\n \n-        if !decl.inputs.is_empty() {\n+        if !sig.decl.inputs.is_empty() {\n             sd.span_err(i.span, \"functions used as tests can not have any arguments\");\n             return false;\n         }\n@@ -361,10 +361,10 @@ fn has_test_signature(cx: &ExtCtxt<'_>, i: &ast::Item) -> bool {\n }\n \n fn has_bench_signature(cx: &ExtCtxt<'_>, i: &ast::Item) -> bool {\n-    let has_sig = if let ast::ItemKind::Fn(ref decl, _, _, _) = i.kind {\n+    let has_sig = if let ast::ItemKind::Fn(ref sig, _, _) = i.kind {\n         // N.B., inadequate check, but we're running\n         // well before resolve, can't get too deep.\n-        decl.inputs.len() == 1\n+        sig.decl.inputs.len() == 1\n     } else {\n         false\n     };"}, {"sha": "1492f6f575ff71a64c7ee77e6a24871df05ea524", "filename": "src/libsyntax_ext/test_harness.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b4c6abcf9e6c1d2710e7ad6a9ce44b3ca6b10d52/src%2Flibsyntax_ext%2Ftest_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4c6abcf9e6c1d2710e7ad6a9ce44b3ca6b10d52/src%2Flibsyntax_ext%2Ftest_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Ftest_harness.rs?ref=b4c6abcf9e6c1d2710e7ad6a9ce44b3ca6b10d52", "patch": "@@ -306,10 +306,9 @@ fn mk_main(cx: &mut TestCtxt<'_>) -> P<ast::Item> {\n         ecx.block(sp, vec![call_test_main])\n     };\n \n-    let main = ast::ItemKind::Fn(ecx.fn_decl(vec![], ast::FunctionRetTy::Ty(main_ret_ty)),\n-                           ast::FnHeader::default(),\n-                           ast::Generics::default(),\n-                           main_body);\n+    let decl = ecx.fn_decl(vec![], ast::FunctionRetTy::Ty(main_ret_ty));\n+    let sig = ast::FnSig { decl, header: ast::FnHeader::default() };\n+    let main = ast::ItemKind::Fn(sig, ast::Generics::default(), main_body);\n \n     // Honor the reexport_test_harness_main attribute\n     let main_id = match cx.reexport_test_harness_main {"}]}