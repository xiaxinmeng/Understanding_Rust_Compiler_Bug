{"sha": "6acbb5b65c06d82c867a94c54ce51dab4707ac61", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhY2JiNWI2NWMwNmQ4MmM4NjdhOTRjNTRjZTUxZGFiNDcwN2FjNjE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-11-25T19:01:35Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-11-25T19:01:35Z"}, "message": "Auto merge of #55527 - sgeisler:time-checked-add, r=sfackler\n\nImplement checked_add_duration for SystemTime\n\n[Original discussion on the rust user forum](https://users.rust-lang.org/t/std-systemtime-misses-a-checked-add-function/21785)\n\nSince `SystemTime` is opaque there is no way to check if the result of an addition will be in bounds. That makes the `Add<Duration>` trait completely unusable with untrusted data. This is a big problem because adding a `Duration` to `UNIX_EPOCH` is the standard way of constructing a `SystemTime` from a unix timestamp.\n\nThis PR implements `checked_add_duration(&self, &Duration) -> Option<SystemTime>` for `std::time::SystemTime` and as a prerequisite also for all platform specific time structs. This also led to the refactoring of many `add_duration(&self, &Duration) -> SystemTime` functions to avoid redundancy (they now unwrap the result of `checked_add_duration`).\n\nSome basic unit tests for the newly introduced function were added too.\n\nI wasn't sure which stabilization attribute to add to the newly introduced function, so I just chose `#[stable(feature = \"time_checked_add\", since = \"1.32.0\")]` for now to make it compile. Please let me know how I should change it or if I violated any other conventions.\n\nP.S.: I could only test on Linux so far, so I don't necessarily expect it to compile for all platforms.", "tree": {"sha": "20692d5500836bc0d65c20e89d6b5c8d1c087629", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/20692d5500836bc0d65c20e89d6b5c8d1c087629"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6acbb5b65c06d82c867a94c54ce51dab4707ac61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6acbb5b65c06d82c867a94c54ce51dab4707ac61", "html_url": "https://github.com/rust-lang/rust/commit/6acbb5b65c06d82c867a94c54ce51dab4707ac61", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6acbb5b65c06d82c867a94c54ce51dab4707ac61/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5bd451b26580de465d59ed5389209ed191b7dbdd", "url": "https://api.github.com/repos/rust-lang/rust/commits/5bd451b26580de465d59ed5389209ed191b7dbdd", "html_url": "https://github.com/rust-lang/rust/commit/5bd451b26580de465d59ed5389209ed191b7dbdd"}, {"sha": "f2106d0746cdbd04ddad44c35b4e13eeced2a546", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2106d0746cdbd04ddad44c35b4e13eeced2a546", "html_url": "https://github.com/rust-lang/rust/commit/f2106d0746cdbd04ddad44c35b4e13eeced2a546"}], "stats": {"total": 100, "additions": 78, "deletions": 22}, "files": [{"sha": "a442d1e4ad7b71fb9f08b248af71291be8fa3233", "filename": "src/libstd/sys/cloudabi/time.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6acbb5b65c06d82c867a94c54ce51dab4707ac61/src%2Flibstd%2Fsys%2Fcloudabi%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6acbb5b65c06d82c867a94c54ce51dab4707ac61/src%2Flibstd%2Fsys%2Fcloudabi%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Ftime.rs?ref=6acbb5b65c06d82c867a94c54ce51dab4707ac61", "patch": "@@ -19,10 +19,14 @@ pub struct Instant {\n     t: abi::timestamp,\n }\n \n-pub fn dur2intervals(dur: &Duration) -> abi::timestamp {\n+fn checked_dur2intervals(dur: &Duration) -> Option<abi::timestamp> {\n     dur.as_secs()\n         .checked_mul(NSEC_PER_SEC)\n         .and_then(|nanos| nanos.checked_add(dur.subsec_nanos() as abi::timestamp))\n+}\n+\n+pub fn dur2intervals(dur: &Duration) -> abi::timestamp {\n+    checked_dur2intervals(dur)\n         .expect(\"overflow converting duration to nanoseconds\")\n }\n \n@@ -92,11 +96,14 @@ impl SystemTime {\n     }\n \n     pub fn add_duration(&self, other: &Duration) -> SystemTime {\n-        SystemTime {\n-            t: self.t\n-                .checked_add(dur2intervals(other))\n-                .expect(\"overflow when adding duration to instant\"),\n-        }\n+        self.checked_add_duration(other)\n+            .expect(\"overflow when adding duration to instant\")\n+    }\n+\n+    pub fn checked_add_duration(&self, other: &Duration) -> Option<SystemTime> {\n+        checked_dur2intervals(other)\n+            .and_then(|d| self.t.checked_add(d))\n+            .map(|t| SystemTime {t})\n     }\n \n     pub fn sub_duration(&self, other: &Duration) -> SystemTime {"}, {"sha": "beff8d287e7c45a70bd1d3c30248e7f006693ac5", "filename": "src/libstd/sys/redox/time.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6acbb5b65c06d82c867a94c54ce51dab4707ac61/src%2Flibstd%2Fsys%2Fredox%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6acbb5b65c06d82c867a94c54ce51dab4707ac61/src%2Flibstd%2Fsys%2Fredox%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Ftime.rs?ref=6acbb5b65c06d82c867a94c54ce51dab4707ac61", "patch": "@@ -42,27 +42,29 @@ impl Timespec {\n     }\n \n     fn add_duration(&self, other: &Duration) -> Timespec {\n+        self.checked_add_duration(other).expect(\"overflow when adding duration to time\")\n+    }\n+\n+    fn checked_add_duration(&self, other: &Duration) -> Option<Timespec> {\n         let mut secs = other\n             .as_secs()\n             .try_into() // <- target type would be `i64`\n             .ok()\n-            .and_then(|secs| self.t.tv_sec.checked_add(secs))\n-            .expect(\"overflow when adding duration to time\");\n+            .and_then(|secs| self.t.tv_sec.checked_add(secs))?;\n \n         // Nano calculations can't overflow because nanos are <1B which fit\n         // in a u32.\n         let mut nsec = other.subsec_nanos() + self.t.tv_nsec as u32;\n         if nsec >= NSEC_PER_SEC as u32 {\n             nsec -= NSEC_PER_SEC as u32;\n-            secs = secs.checked_add(1).expect(\"overflow when adding \\\n-                                               duration to time\");\n+            secs = secs.checked_add(1)?;\n         }\n-        Timespec {\n+        Some(Timespec {\n             t: syscall::TimeSpec {\n                 tv_sec: secs,\n                 tv_nsec: nsec as i32,\n             },\n-        }\n+        })\n     }\n \n     fn sub_duration(&self, other: &Duration) -> Timespec {\n@@ -180,6 +182,10 @@ impl SystemTime {\n         SystemTime { t: self.t.add_duration(other) }\n     }\n \n+    pub fn checked_add_duration(&self, other: &Duration) -> Option<SystemTime> {\n+        self.t.checked_add_duration(other).map(|t| SystemTime { t })\n+    }\n+\n     pub fn sub_duration(&self, other: &Duration) -> SystemTime {\n         SystemTime { t: self.t.sub_duration(other) }\n     }"}, {"sha": "1f9539c36e02e98d9a5fa762e184d165e44d069a", "filename": "src/libstd/sys/unix/time.rs", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6acbb5b65c06d82c867a94c54ce51dab4707ac61/src%2Flibstd%2Fsys%2Funix%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6acbb5b65c06d82c867a94c54ce51dab4707ac61/src%2Flibstd%2Fsys%2Funix%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ftime.rs?ref=6acbb5b65c06d82c867a94c54ce51dab4707ac61", "patch": "@@ -43,27 +43,29 @@ impl Timespec {\n     }\n \n     fn add_duration(&self, other: &Duration) -> Timespec {\n+        self.checked_add_duration(other).expect(\"overflow when adding duration to time\")\n+    }\n+\n+    fn checked_add_duration(&self, other: &Duration) -> Option<Timespec> {\n         let mut secs = other\n             .as_secs()\n             .try_into() // <- target type would be `libc::time_t`\n             .ok()\n-            .and_then(|secs| self.t.tv_sec.checked_add(secs))\n-            .expect(\"overflow when adding duration to time\");\n+            .and_then(|secs| self.t.tv_sec.checked_add(secs))?;\n \n         // Nano calculations can't overflow because nanos are <1B which fit\n         // in a u32.\n         let mut nsec = other.subsec_nanos() + self.t.tv_nsec as u32;\n         if nsec >= NSEC_PER_SEC as u32 {\n             nsec -= NSEC_PER_SEC as u32;\n-            secs = secs.checked_add(1).expect(\"overflow when adding \\\n-                                               duration to time\");\n+            secs = secs.checked_add(1)?;\n         }\n-        Timespec {\n+        Some(Timespec {\n             t: libc::timespec {\n                 tv_sec: secs,\n                 tv_nsec: nsec as _,\n             },\n-        }\n+        })\n     }\n \n     fn sub_duration(&self, other: &Duration) -> Timespec {\n@@ -201,6 +203,10 @@ mod inner {\n             SystemTime { t: self.t.add_duration(other) }\n         }\n \n+        pub fn checked_add_duration(&self, other: &Duration) -> Option<SystemTime> {\n+            self.t.checked_add_duration(other).map(|t| SystemTime { t })\n+        }\n+\n         pub fn sub_duration(&self, other: &Duration) -> SystemTime {\n             SystemTime { t: self.t.sub_duration(other) }\n         }\n@@ -325,6 +331,10 @@ mod inner {\n             SystemTime { t: self.t.add_duration(other) }\n         }\n \n+        pub fn checked_add_duration(&self, other: &Duration) -> Option<SystemTime> {\n+            self.t.checked_add_duration(other).map(|t| SystemTime { t })\n+        }\n+\n         pub fn sub_duration(&self, other: &Duration) -> SystemTime {\n             SystemTime { t: self.t.sub_duration(other) }\n         }"}, {"sha": "991e8176edf6d8182bd2a70669549301c933f7f9", "filename": "src/libstd/sys/wasm/time.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6acbb5b65c06d82c867a94c54ce51dab4707ac61/src%2Flibstd%2Fsys%2Fwasm%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6acbb5b65c06d82c867a94c54ce51dab4707ac61/src%2Flibstd%2Fsys%2Fwasm%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasm%2Ftime.rs?ref=6acbb5b65c06d82c867a94c54ce51dab4707ac61", "patch": "@@ -51,6 +51,10 @@ impl SystemTime {\n         SystemTime(self.0 + *other)\n     }\n \n+    pub fn checked_add_duration(&self, other: &Duration) -> Option<SystemTime> {\n+        self.0.checked_add(*other).map(|d| SystemTime(d))\n+    }\n+\n     pub fn sub_duration(&self, other: &Duration) -> SystemTime {\n         SystemTime(self.0 - *other)\n     }"}, {"sha": "c809a0b98ac942a6ae4b75b818dafe05aeae0f5c", "filename": "src/libstd/sys/windows/time.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6acbb5b65c06d82c867a94c54ce51dab4707ac61/src%2Flibstd%2Fsys%2Fwindows%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6acbb5b65c06d82c867a94c54ce51dab4707ac61/src%2Flibstd%2Fsys%2Fwindows%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Ftime.rs?ref=6acbb5b65c06d82c867a94c54ce51dab4707ac61", "patch": "@@ -128,9 +128,13 @@ impl SystemTime {\n     }\n \n     pub fn add_duration(&self, other: &Duration) -> SystemTime {\n-        let intervals = self.intervals().checked_add(dur2intervals(other))\n-                            .expect(\"overflow when adding duration to time\");\n-        SystemTime::from_intervals(intervals)\n+        self.checked_add_duration(other).expect(\"overflow when adding duration to time\")\n+    }\n+\n+    pub fn checked_add_duration(&self, other: &Duration) -> Option<SystemTime> {\n+        checked_dur2intervals(other)\n+            .and_then(|d| self.intervals().checked_add(d))\n+            .map(|i| SystemTime::from_intervals(i))\n     }\n \n     pub fn sub_duration(&self, other: &Duration) -> SystemTime {\n@@ -180,11 +184,15 @@ impl Hash for SystemTime {\n     }\n }\n \n-fn dur2intervals(d: &Duration) -> i64 {\n+fn checked_dur2intervals(d: &Duration) -> Option<i64> {\n     d.as_secs()\n         .checked_mul(INTERVALS_PER_SEC)\n         .and_then(|i| i.checked_add(d.subsec_nanos() as u64 / 100))\n         .and_then(|i| i.try_into().ok())\n+}\n+\n+fn dur2intervals(d: &Duration) -> i64 {\n+    checked_dur2intervals(d)\n         .expect(\"overflow when converting duration to intervals\")\n }\n "}, {"sha": "5d0d501615f56b4d19a5d531b8474f4497c5cc04", "filename": "src/libstd/time.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6acbb5b65c06d82c867a94c54ce51dab4707ac61/src%2Flibstd%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6acbb5b65c06d82c867a94c54ce51dab4707ac61/src%2Flibstd%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime.rs?ref=6acbb5b65c06d82c867a94c54ce51dab4707ac61", "patch": "@@ -357,6 +357,14 @@ impl SystemTime {\n     pub fn elapsed(&self) -> Result<Duration, SystemTimeError> {\n         SystemTime::now().duration_since(*self)\n     }\n+\n+    /// Returns `Some(t)` where `t` is the time `self + duration` if `t` can be represented as\n+    /// `SystemTime` (which means it's inside the bounds of the underlying data structure), `None`\n+    /// otherwise.\n+    #[unstable(feature = \"time_checked_add\", issue = \"55940\")]\n+    pub fn checked_add(&self, duration: Duration) -> Option<SystemTime> {\n+        self.0.checked_add_duration(&duration).map(|t| SystemTime(t))\n+    }\n }\n \n #[stable(feature = \"time2\", since = \"1.8.0\")]\n@@ -561,6 +569,19 @@ mod tests {\n         let one_second_from_epoch2 = UNIX_EPOCH + Duration::new(0, 500_000_000)\n             + Duration::new(0, 500_000_000);\n         assert_eq!(one_second_from_epoch, one_second_from_epoch2);\n+\n+        // checked_add_duration will not panic on overflow\n+        let mut maybe_t = Some(SystemTime::UNIX_EPOCH);\n+        let max_duration = Duration::from_secs(u64::max_value());\n+        // in case `SystemTime` can store `>= UNIX_EPOCH + max_duration`.\n+        for _ in 0..2 {\n+            maybe_t = maybe_t.and_then(|t| t.checked_add(max_duration));\n+        }\n+        assert_eq!(maybe_t, None);\n+\n+        // checked_add_duration calculates the right time and will work for another year\n+        let year = Duration::from_secs(60 * 60 * 24 * 365);\n+        assert_eq!(a + year, a.checked_add(year).unwrap());\n     }\n \n     #[test]"}]}