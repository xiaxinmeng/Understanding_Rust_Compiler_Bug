{"sha": "26cf250cccf620f02a2df2532bcb99ed503b3f8a", "node_id": "C_kwDOAAsO6NoAKDI2Y2YyNTBjY2NmNjIwZjAyYTJkZjI1MzJiY2I5OWVkNTAzYjNmOGE", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-10-01T17:50:34Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-10-01T17:50:34Z"}, "message": "Do not use the sysroot proc-macro server when a server path is given explicitly", "tree": {"sha": "c62d2fe8aa91a3aaef3957c5cc60a780fa770df8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c62d2fe8aa91a3aaef3957c5cc60a780fa770df8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/26cf250cccf620f02a2df2532bcb99ed503b3f8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/26cf250cccf620f02a2df2532bcb99ed503b3f8a", "html_url": "https://github.com/rust-lang/rust/commit/26cf250cccf620f02a2df2532bcb99ed503b3f8a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/26cf250cccf620f02a2df2532bcb99ed503b3f8a/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39eaf7864cd786d53e98771864a689ff0f9b9259", "url": "https://api.github.com/repos/rust-lang/rust/commits/39eaf7864cd786d53e98771864a689ff0f9b9259", "html_url": "https://github.com/rust-lang/rust/commit/39eaf7864cd786d53e98771864a689ff0f9b9259"}], "stats": {"total": 77, "additions": 44, "deletions": 33}, "files": [{"sha": "5241aad327cfd800a1d1e8a80f023473734dda83", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/26cf250cccf620f02a2df2532bcb99ed503b3f8a/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26cf250cccf620f02a2df2532bcb99ed503b3f8a/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=26cf250cccf620f02a2df2532bcb99ed503b3f8a", "patch": "@@ -7,7 +7,7 @@\n //! configure the server itself, feature flags are passed into analysis, and\n //! tweak things like automatic insertion of `()` in completions.\n \n-use std::{ffi::OsString, fmt, iter, path::PathBuf};\n+use std::{fmt, iter, path::PathBuf};\n \n use flycheck::FlycheckConfig;\n use ide::{\n@@ -975,15 +975,17 @@ impl Config {\n         self.data.lru_capacity\n     }\n \n-    pub fn proc_macro_srv(&self) -> Option<(AbsPathBuf, Vec<OsString>)> {\n+    pub fn proc_macro_srv(&self) -> Option<(AbsPathBuf, /* is path explicitly set */ bool)> {\n         if !self.data.procMacro_enable {\n             return None;\n         }\n-        let path = match &self.data.procMacro_server {\n-            Some(it) => self.root_path.join(it),\n-            None => AbsPathBuf::assert(std::env::current_exe().ok()?),\n-        };\n-        Some((path, vec![\"proc-macro\".into()]))\n+        Some(match &self.data.procMacro_server {\n+            Some(it) => (\n+                AbsPathBuf::try_from(it.clone()).unwrap_or_else(|path| self.root_path.join(path)),\n+                true,\n+            ),\n+            None => (AbsPathBuf::assert(std::env::current_exe().ok()?), false),\n+        })\n     }\n \n     pub fn dummy_replacements(&self) -> &FxHashMap<Box<str>, Box<[Box<str>]>> {"}, {"sha": "e403f36d57872879d25a9af49ab8a1a8d9326210", "filename": "crates/rust-analyzer/src/reload.rs", "status": "modified", "additions": 35, "deletions": 26, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/26cf250cccf620f02a2df2532bcb99ed503b3f8a/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26cf250cccf620f02a2df2532bcb99ed503b3f8a/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freload.rs?ref=26cf250cccf620f02a2df2532bcb99ed503b3f8a", "patch": "@@ -306,41 +306,50 @@ impl GlobalState {\n             format!(\"rust-analyzer-proc-macro-srv{}\", std::env::consts::EXE_SUFFIX);\n \n         if self.proc_macro_clients.is_empty() {\n-            if let Some((path, args)) = self.config.proc_macro_srv() {\n+            if let Some((path, path_manually_set)) = self.config.proc_macro_srv() {\n                 tracing::info!(\"Spawning proc-macro servers\");\n                 self.proc_macro_clients = self\n                     .workspaces\n                     .iter()\n                     .map(|ws| {\n-                        let mut args = args.clone();\n-                        let mut path = path.clone();\n-\n-                        if let ProjectWorkspace::Cargo { sysroot, .. }\n-                        | ProjectWorkspace::Json { sysroot, .. } = ws\n-                        {\n-                            tracing::debug!(\"Found a cargo workspace...\");\n-                            if let Some(sysroot) = sysroot.as_ref() {\n-                                tracing::debug!(\"Found a cargo workspace with a sysroot...\");\n-                                let server_path =\n-                                    sysroot.root().join(\"libexec\").join(&standalone_server_name);\n-                                if std::fs::metadata(&server_path).is_ok() {\n-                                    tracing::debug!(\n-                                        \"And the server exists at {}\",\n-                                        server_path.display()\n-                                    );\n-                                    path = server_path;\n-                                    args = vec![];\n-                                } else {\n-                                    tracing::debug!(\n-                                        \"And the server does not exist at {}\",\n-                                        server_path.display()\n-                                    );\n+                        let (path, args) = if path_manually_set {\n+                            tracing::debug!(\n+                                \"Pro-macro server path explicitly set: {}\",\n+                                path.display()\n+                            );\n+                            (path.clone(), vec![])\n+                        } else {\n+                            let mut sysroot_server = None;\n+                            if let ProjectWorkspace::Cargo { sysroot, .. }\n+                            | ProjectWorkspace::Json { sysroot, .. } = ws\n+                            {\n+                                if let Some(sysroot) = sysroot.as_ref() {\n+                                    let server_path = sysroot\n+                                        .root()\n+                                        .join(\"libexec\")\n+                                        .join(&standalone_server_name);\n+                                    if std::fs::metadata(&server_path).is_ok() {\n+                                        tracing::debug!(\n+                                            \"Sysroot proc-macro server exists at {}\",\n+                                            server_path.display()\n+                                        );\n+                                        sysroot_server = Some(server_path);\n+                                    } else {\n+                                        tracing::debug!(\n+                                            \"Sysroot proc-macro server does not exist at {}\",\n+                                            server_path.display()\n+                                        );\n+                                    }\n                                 }\n                             }\n-                        }\n+                            sysroot_server.map_or_else(\n+                                || (path.clone(), vec![\"proc-macro\".to_owned()]),\n+                                |path| (path, vec![]),\n+                            )\n+                        };\n \n                         tracing::info!(?args, \"Using proc-macro server at {}\", path.display(),);\n-                        ProcMacroServer::spawn(path.clone(), args.clone()).map_err(|err| {\n+                        ProcMacroServer::spawn(path.clone(), args).map_err(|err| {\n                             let error = format!(\n                                 \"Failed to run proc-macro server from path {}, error: {:?}\",\n                                 path.display(),"}]}