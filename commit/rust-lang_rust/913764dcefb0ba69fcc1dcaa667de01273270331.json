{"sha": "913764dcefb0ba69fcc1dcaa667de01273270331", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxMzc2NGRjZWZiMGJhNjlmY2MxZGNhYTY2N2RlMDEyNzMyNzAzMzE=", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-09-11T22:55:21Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-09-11T22:55:21Z"}, "message": "Remove unnecessary `is_trait` argument\n\nIt was only used for sugaring `Fn` trait bounds, and rustdoc already\nchecks that the `did` is for a `Fn` (or `FnMut`, `FnOnce`) lang item,\nso it's not necessary to also check that the `did` belongs to a trait.", "tree": {"sha": "f6e4a97b8f10682a805feb414ac43a429dd600a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f6e4a97b8f10682a805feb414ac43a429dd600a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/913764dcefb0ba69fcc1dcaa667de01273270331", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/913764dcefb0ba69fcc1dcaa667de01273270331", "html_url": "https://github.com/rust-lang/rust/commit/913764dcefb0ba69fcc1dcaa667de01273270331", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/913764dcefb0ba69fcc1dcaa667de01273270331/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5321b35a5ad037369fabae99191c9e45111b21a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/5321b35a5ad037369fabae99191c9e45111b21a9", "html_url": "https://github.com/rust-lang/rust/commit/5321b35a5ad037369fabae99191c9e45111b21a9"}], "stats": {"total": 21, "additions": 8, "deletions": 13}, "files": [{"sha": "84ab987062b1ffc8c2a8f0957a7f0606d6c250bc", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/913764dcefb0ba69fcc1dcaa667de01273270331/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/913764dcefb0ba69fcc1dcaa667de01273270331/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=913764dcefb0ba69fcc1dcaa667de01273270331", "patch": "@@ -164,8 +164,7 @@ impl Clean<Type> for (ty::TraitRef<'_>, &[TypeBinding]) {\n             );\n         }\n         inline::record_extern_fqn(cx, trait_ref.def_id, kind);\n-        let path =\n-            external_path(cx, trait_ref.def_id, true, true, bounds.to_vec(), trait_ref.substs);\n+        let path = external_path(cx, trait_ref.def_id, true, bounds.to_vec(), trait_ref.substs);\n \n         debug!(\"ty::TraitRef\\n  subst: {:?}\\n\", trait_ref.substs);\n \n@@ -1442,12 +1441,12 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n                     AdtKind::Enum => ItemType::Enum,\n                 };\n                 inline::record_extern_fqn(cx, did, kind);\n-                let path = external_path(cx, did, false, false, vec![], substs);\n+                let path = external_path(cx, did, false, vec![], substs);\n                 ResolvedPath { path, did, is_generic: false }\n             }\n             ty::Foreign(did) => {\n                 inline::record_extern_fqn(cx, did, ItemType::ForeignType);\n-                let path = external_path(cx, did, false, false, vec![], InternalSubsts::empty());\n+                let path = external_path(cx, did, false, vec![], InternalSubsts::empty());\n                 ResolvedPath { path, did, is_generic: false }\n             }\n             ty::Dynamic(ref obj, ref reg) => {\n@@ -1471,7 +1470,7 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n \n                 for did in dids {\n                     let empty = cx.tcx.intern_substs(&[]);\n-                    let path = external_path(cx, did, true, false, vec![], empty);\n+                    let path = external_path(cx, did, false, vec![], empty);\n                     inline::record_extern_fqn(cx, did, ItemType::Trait);\n                     let bound = PolyTrait {\n                         trait_: ResolvedPath { path, did, is_generic: false },\n@@ -1488,7 +1487,7 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n                     });\n                 }\n \n-                let path = external_path(cx, did, true, false, bindings, substs);\n+                let path = external_path(cx, did, false, bindings, substs);\n                 bounds.insert(\n                     0,\n                     PolyTrait {"}, {"sha": "247a6482fdceae841f722e5552b0aa9833560569", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/913764dcefb0ba69fcc1dcaa667de01273270331/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/913764dcefb0ba69fcc1dcaa667de01273270331/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=913764dcefb0ba69fcc1dcaa667de01273270331", "patch": "@@ -1158,7 +1158,7 @@ impl GenericBound {\n     crate fn maybe_sized(cx: &mut DocContext<'_>) -> GenericBound {\n         let did = cx.tcx.require_lang_item(LangItem::Sized, None);\n         let empty = cx.tcx.intern_substs(&[]);\n-        let path = external_path(cx, did, true, false, vec![], empty);\n+        let path = external_path(cx, did, false, vec![], empty);\n         inline::record_extern_fqn(cx, did, ItemType::Trait);\n         GenericBound::TraitBound(\n             PolyTrait {"}, {"sha": "912274c23d6cfa7eb3e1c0307ed959ffab5e9c5e", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/913764dcefb0ba69fcc1dcaa667de01273270331/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/913764dcefb0ba69fcc1dcaa667de01273270331/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=913764dcefb0ba69fcc1dcaa667de01273270331", "patch": "@@ -94,7 +94,6 @@ crate fn krate(cx: &mut DocContext<'_>) -> Crate {\n fn external_generic_args(\n     cx: &mut DocContext<'_>,\n     did: DefId,\n-    is_trait: bool,\n     has_self: bool,\n     bindings: Vec<TypeBinding>,\n     substs: SubstsRef<'_>,\n@@ -122,7 +121,7 @@ fn external_generic_args(\n         })\n         .collect();\n \n-    if is_trait && cx.tcx.fn_trait_kind_from_lang_item(did).is_some() {\n+    if cx.tcx.fn_trait_kind_from_lang_item(did).is_some() {\n         assert!(ty_kind.is_some());\n         let inputs = match ty_kind {\n             Some(ty::Tuple(ref tys)) => tys.iter().map(|t| t.expect_ty().clean(cx)).collect(),\n@@ -140,12 +139,9 @@ fn external_generic_args(\n     }\n }\n \n-/// `is_trait` should be set to `true` if called on a `TraitRef`, in order to sugar\n-/// from `Fn<(A, B,), C>` to `Fn(A, B) -> C`\n pub(super) fn external_path(\n     cx: &mut DocContext<'_>,\n     did: DefId,\n-    is_trait: bool,\n     has_self: bool,\n     bindings: Vec<TypeBinding>,\n     substs: SubstsRef<'_>,\n@@ -157,7 +153,7 @@ pub(super) fn external_path(\n         res: Res::Def(def_kind, did),\n         segments: vec![PathSegment {\n             name,\n-            args: external_generic_args(cx, did, is_trait, has_self, bindings, substs),\n+            args: external_generic_args(cx, did, has_self, bindings, substs),\n         }],\n     }\n }"}]}