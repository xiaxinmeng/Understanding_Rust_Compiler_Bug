{"sha": "880e6847cfb895459a183346f62767f4a9f31660", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4MGU2ODQ3Y2ZiODk1NDU5YTE4MzM0NmY2Mjc2N2Y0YTlmMzE2NjA=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-10T21:49:10Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-11T08:58:27Z"}, "message": "play with bash on AppVeyor\n\nAlso consistently order and format our two CI files", "tree": {"sha": "486e4f49671964ee246bdaac66db86f18d9745ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/486e4f49671964ee246bdaac66db86f18d9745ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/880e6847cfb895459a183346f62767f4a9f31660", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/880e6847cfb895459a183346f62767f4a9f31660", "html_url": "https://github.com/rust-lang/rust/commit/880e6847cfb895459a183346f62767f4a9f31660", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/880e6847cfb895459a183346f62767f4a9f31660/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9decd31fe4ee675e13814e7c88f71f93f2a7cf7", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9decd31fe4ee675e13814e7c88f71f93f2a7cf7", "html_url": "https://github.com/rust-lang/rust/commit/c9decd31fe4ee675e13814e7c88f71f93f2a7cf7"}], "stats": {"total": 173, "additions": 67, "deletions": 106}, "files": [{"sha": "209e38dc532a3d50016fdf2c8149adb041db7764", "filename": ".appveyor.yml", "status": "modified", "additions": 36, "deletions": 70, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/880e6847cfb895459a183346f62767f4a9f31660/.appveyor.yml", "raw_url": "https://github.com/rust-lang/rust/raw/880e6847cfb895459a183346f62767f4a9f31660/.appveyor.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.appveyor.yml?ref=880e6847cfb895459a183346f62767f4a9f31660", "patch": "@@ -1,84 +1,50 @@\n+build: off # No Visual Studio auto-build.\n environment:\n-    global:\n-        PROJECT_NAME: miri\n-    matrix:\n-        - TARGET: i686-pc-windows-msvc\n+  global:\n+    PROJECT_NAME: miri\n+  matrix:\n+    - TARGET: i686-pc-windows-msvc\n+matrix:\n+  fast_finish: true # Immediately finish build once one of the jobs fails.\n+cache:\n+- '%USERPROFILE%\\.cargo'\n+- '%USERPROFILE%\\.rustup'\n \n # branches to build\n branches:\n   # whitelist\n   only:\n-    - auto\n-    - try\n-\n-matrix:\n-  fast_finish: true     # set this flag to immediately finish build once one of the jobs fails.\n-\n-cache:\n-    - '%USERPROFILE%\\.cargo'\n-    - '%USERPROFILE%\\.rustup'\n+  - auto\n+  - try\n \n install:\n-    # Compute the rust version we use\n-    - set /p RUSTC_HASH=<rust-version\n-    # Install Rust\n-    - curl -sSf --retry 3 -o rustup-init.exe https://win.rustup.rs/\n-    - rustup-init.exe -y --default-host %TARGET% --default-toolchain stable --profile minimal\n-    - set PATH=%USERPROFILE%\\.cargo\\bin;%PATH%\n-    - rustup default stable\n-    - rustup toolchain uninstall beta\n-    - rustup update\n-    # Install \"master\" toolchain\n-    - cargo install rustup-toolchain-install-master\n-    # We need to install cargo here as well or else the DLL search path inside `cargo run`\n-    # will be for the wrong toolchain. (On Unix, `./miri` takes care of this, but not here.)\n-    - rustup-toolchain-install-master -f -n master %RUSTC_HASH% -c rust-src -c rustc-dev -c cargo\n-    - rustup default master\n-    - rustc --version\n-    - cargo --version\n-\n-build_script:\n-    - set RUSTFLAGS=-C debug-assertions\n-    # Build and install miri\n-    - cargo build --release --all-features --all-targets --locked\n-    - cargo install --all-features --force --path . --locked --offline\n+# Compute the Rust version we use.\n+- set /p RUSTC_HASH=<rust-version\n+# Install Rust. We use the \"stable\" toolchain for better caching, it is just used to build `rustup-toolchain-install-master`.\n+# But we also need to take into account that the build cache might have a different, outdated default.\n+- curl -sSf --retry 3 -o rustup-init.exe https://win.rustup.rs/\n+- rustup-init.exe -y --default-host %TARGET% --default-toolchain none --profile minimal\n+- set PATH=%USERPROFILE%\\.cargo\\bin;%PATH%\n+- rustup default stable\n+- rustup toolchain uninstall beta nightly\n+- rustup update\n+# Install \"master\" toolchain.\n+# We need to install cargo here as well or else the DLL search path inside `cargo run`\n+# will be for the wrong toolchain. (On Unix, `./miri` takes care of this, but not here.)\n+- cargo install rustup-toolchain-install-master\n+- rustup-toolchain-install-master -f -n master %RUSTC_HASH% -c rust-src -c rustc-dev -c cargo\n+- rustup default master\n+- rustc --version\n+- cargo --version\n \n test_script:\n-    - set RUST_TEST_NOCAPTURE=1\n-    - set RUST_BACKTRACE=1\n-    - set CARGO_INCREMENTAL=0\n-    # Test host miri: 32bit Windows\n-    - cargo miri setup\n-    - set MIRI_SYSROOT=%USERPROFILE%\\AppData\\Local\\rust-lang\\miri\\cache\\HOST\n-    - cargo test --release --all-features --locked\n-    - cd test-cargo-miri\n-    - '\"C:\\msys64\\mingw64\\bin\\python3.exe\" run-test.py'\n-    - cd ..\n-    - ps: $env:MIRI_SYSROOT = \"\"\n-    # Test foreign miri: 64bit Linux\n-    - cargo miri setup --target x86_64-unknown-linux-gnu\n-    - set MIRI_SYSROOT=%USERPROFILE%\\AppData\\Local\\rust-lang\\miri\\cache\n-    - set MIRI_TEST_TARGET=x86_64-unknown-linux-gnu\n-    - cargo test --release --all-features --locked\n-    - cd test-cargo-miri\n-    - '\"C:\\msys64\\mingw64\\bin\\python3.exe\" run-test.py'\n-    - cd ..\n-    - ps: $env:MIRI_SYSROOT = \"\"\n-    # Test foreign miri: 64bit macOS\n-    - cargo miri setup --target x86_64-apple-darwin\n-    - set MIRI_SYSROOT=%USERPROFILE%\\AppData\\Local\\rust-lang\\miri\\cache\n-    - set MIRI_TEST_TARGET=x86_64-apple-darwin\n-    - cargo test --release --all-features --locked\n-    - cd test-cargo-miri\n-    - '\"C:\\msys64\\mingw64\\bin\\python3.exe\" run-test.py'\n-    - cd ..\n-    - ps: $env:MIRI_SYSROOT = \"\"\n+- bash ci.sh\n \n after_test:\n-    # Don't cache \"master\" toolchain, it's a waste\n-    - rustup default stable\n-    - rustup toolchain uninstall master\n+# Don't cache \"master\" toolchain, it's a waste.\n+- rustup default stable\n+- rustup toolchain uninstall master\n \n notifications:\n-    - provider: Email\n-      on_build_success: false\n+- provider: Email\n+  on_build_success: false"}, {"sha": "1605737a7b09cc5f4ed56487b3b69eba005f6554", "filename": ".travis.yml", "status": "modified", "additions": 21, "deletions": 27, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/880e6847cfb895459a183346f62767f4a9f31660/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/880e6847cfb895459a183346f62767f4a9f31660/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=880e6847cfb895459a183346f62767f4a9f31660", "patch": "@@ -1,63 +1,57 @@\n language: generic\n+os:\n+- linux\n+- osx\n+dist: xenial\n cache:\n   # Cache the global cargo directory, but NOT the local `target` directory which\n   # we cannot reuse anyway when the nightly changes (and it grows quite large\n   # over time).\n   directories:\n-    - $HOME/.cargo\n-    - $HOME/.rustup\n-\n-os:\n-- linux\n-- osx\n-dist: xenial\n+  - $HOME/.cargo\n+  - $HOME/.rustup\n \n # Run in PRs and for bors, but not on master.\n+branches:\n+  only:\n+  - master\n+  - auto\n+  - try\n if: branch = auto OR branch = try OR type = pull_request OR type = cron\n \n-env:\n-  global:\n-  - RUST_TEST_NOCAPTURE=1\n-  - RUST_BACKTRACE=1\n-  - CARGO_INCREMENTAL=0\n-\n before_script:\n-# Compute the rust version we use. We do not use \"language: rust\" to have more control here.\n+# Compute the Rust version we use. We do not use \"language: rust\" to have more control here.\n - |\n   if [[ \"$TRAVIS_EVENT_TYPE\" == cron ]]; then\n     RUSTC_HASH=$(git ls-remote https://github.com/rust-lang/rust.git master | awk '{print $1}')\n   else\n     RUSTC_HASH=$(cat rust-version)\n   fi\n-# Install Rust (\"stable\" toolchain for better caching, it is just used to build rustup-toolchain-install-master)\n-- curl https://build.travis-ci.org/files/rustup-init.sh -sSf | sh -s -- -y --default-toolchain stable --profile minimal\n+# Install Rust. We use the \"stable\" toolchain for better caching, it is just used to build `rustup-toolchain-install-master`.\n+# But we also need to take into account that the build cache might have a different, outdated default.\n+- curl https://build.travis-ci.org/files/rustup-init.sh -sSf | sh -s -- -y --default-toolchain none --profile minimal\n - export PATH=$HOME/.cargo/bin:$PATH\n - rustup default stable\n-- rustup toolchain uninstall beta\n+- rustup toolchain uninstall beta nightly\n - rustup update\n-# Install \"master\" toolchain\n+# Install \"master\" toolchain.\n - cargo install rustup-toolchain-install-master\n - travis_retry rustup-toolchain-install-master -f -n master $RUSTC_HASH -c rust-src -c rustc-dev\n - rustup default master\n - rustc --version\n - cargo --version\n \n script:\n-- ./travis.sh\n+- ./ci.sh\n \n before_cache:\n-# Don't cache \"master\" toolchain, it's a waste\n+# Don't cache \"master\" toolchain, it's a waste.\n - rustup default stable\n - rustup toolchain uninstall master\n \n notifications:\n   email:\n     on_success: never\n     recipients:\n-      - post+travis@ralfj.de\n-      - travis-miri@oli-obk.de\n-branches:\n-  only:\n-  - master\n-  - auto\n-  - try\n+    - post+travis@ralfj.de\n+    - travis-miri@oli-obk.de"}, {"sha": "4bc039e607ba807c3d360262d8a16ca45fee44f5", "filename": "ci.sh", "status": "renamed", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/880e6847cfb895459a183346f62767f4a9f31660/ci.sh", "raw_url": "https://github.com/rust-lang/rust/raw/880e6847cfb895459a183346f62767f4a9f31660/ci.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ci.sh?ref=880e6847cfb895459a183346f62767f4a9f31660", "patch": "@@ -2,8 +2,11 @@\n set -euo pipefail\n \n # Determine configuration\n-export CARGO_EXTRA_FLAGS=\"--all-features\"\n+export RUST_TEST_NOCAPTURE=1\n+export RUST_BACKTRACE=1\n export RUSTC_EXTRA_FLAGS=\"-D warnings\"\n+export CARGO_INCREMENTAL=0\n+export CARGO_EXTRA_FLAGS=\"--all-features\"\n \n # Prepare\n echo \"Build and install miri\"\n@@ -33,17 +36,15 @@ function run_tests {\n \n # host\n run_tests\n-# cross-test 32bit Linux from everywhere\n-MIRI_TEST_TARGET=i686-unknown-linux-gnu run_tests\n \n-if [ \"$TRAVIS_OS_NAME\" == linux ]; then\n-  # cross-test 64bit macOS from Linux\n+if [ \"${TRAVIS_OS_NAME:-}\" == linux ]; then\n+  MIRI_TEST_TARGET=i686-unknown-linux-gnu run_tests\n   MIRI_TEST_TARGET=x86_64-apple-darwin run_tests\n-  # cross-test 32bit Windows from Linux\n   MIRI_TEST_TARGET=i686-pc-windows-msvc run_tests\n-elif [ \"$TRAVIS_OS_NAME\" == osx ]; then\n-  # cross-test 64bit Windows from macOS\n+elif [ \"${TRAVIS_OS_NAME:-}\" == osx ]; then\n   MIRI_TEST_TARGET=x86_64-pc-windows-msvc run_tests\n-  # cross-test 32bit GNU Windows from macOS\n   MIRI_TEST_TARGET=i686-pc-windows-gnu run_tests\n+elif [ \"${CI_WINDOWS:-}\" == True ]; then\n+  MIRI_TEST_TARGET=x86_64-unknown-linux-gnu run_tests\n+  MIRI_TEST_TARGET=x86_64-apple-darwin run_tests\n fi", "previous_filename": "travis.sh"}]}