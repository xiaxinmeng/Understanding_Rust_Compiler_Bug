{"sha": "4f61dcb026910da60b85564fbee1b340569337f4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmNjFkY2IwMjY5MTBkYTYwYjg1NTY0ZmJlZTFiMzQwNTY5MzM3ZjQ=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2012-06-12T17:53:29Z"}, "committer": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2012-06-13T00:01:13Z"}, "message": "Introduce an unboxed_vec type", "tree": {"sha": "99022e51e6b3bd7bf4415d331aad95fbe7784efd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/99022e51e6b3bd7bf4415d331aad95fbe7784efd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f61dcb026910da60b85564fbee1b340569337f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f61dcb026910da60b85564fbee1b340569337f4", "html_url": "https://github.com/rust-lang/rust/commit/4f61dcb026910da60b85564fbee1b340569337f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f61dcb026910da60b85564fbee1b340569337f4/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e67b5b25a628f6308612551a3b0c1e723ad93bb3", "url": "https://api.github.com/repos/rust-lang/rust/commits/e67b5b25a628f6308612551a3b0c1e723ad93bb3", "html_url": "https://github.com/rust-lang/rust/commit/e67b5b25a628f6308612551a3b0c1e723ad93bb3"}], "stats": {"total": 45, "additions": 34, "deletions": 11}, "files": [{"sha": "02ba2597d7673b18d36aad7a5acc3f668b6c318f", "filename": "src/rustc/metadata/tydecode.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4f61dcb026910da60b85564fbee1b340569337f4/src%2Frustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f61dcb026910da60b85564fbee1b340569337f4/src%2Frustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Ftydecode.rs?ref=4f61dcb026910da60b85564fbee1b340569337f4", "patch": "@@ -308,6 +308,7 @@ fn parse_ty(st: @pstate, conv: conv_did) -> ty::t {\n         ret ty::mk_rptr(st.tcx, r, mt);\n       }\n       'I' { ret ty::mk_vec(st.tcx, parse_mt(st, conv)); }\n+      'U' { ret ty::mk_unboxed_vec(st.tcx, parse_mt(st, conv)); }\n       'V' {\n         let mt = parse_mt(st, conv);\n         let v = parse_vstore(st);"}, {"sha": "051ea9e444ecd86feb3f6a1498678fca4c1ee134", "filename": "src/rustc/metadata/tyencode.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4f61dcb026910da60b85564fbee1b340569337f4/src%2Frustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f61dcb026910da60b85564fbee1b340569337f4/src%2Frustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Ftyencode.rs?ref=4f61dcb026910da60b85564fbee1b340569337f4", "patch": "@@ -252,6 +252,7 @@ fn enc_sty(w: io::writer, cx: @ctxt, st: ty::sty) {\n         enc_vstore(w, cx, v);\n       }\n       ty::ty_vec(mt) { w.write_char('I'); enc_mt(w, cx, mt); }\n+      ty::ty_unboxed_vec(mt) { w.write_char('U'); enc_mt(w, cx, mt); }\n       ty::ty_rec(fields) {\n         w.write_str(\"R[\"/&);\n         for fields.each {|field|"}, {"sha": "4b6e92aa5adaf202b3e8714d9d7bea3a4a362b28", "filename": "src/rustc/middle/trans/reflect.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4f61dcb026910da60b85564fbee1b340569337f4/src%2Frustc%2Fmiddle%2Ftrans%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f61dcb026910da60b85564fbee1b340569337f4/src%2Frustc%2Fmiddle%2Ftrans%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Freflect.rs?ref=4f61dcb026910da60b85564fbee1b340569337f4", "patch": "@@ -257,6 +257,7 @@ impl methods for reflector {\n             };\n             self.visit(\"closure_ptr\", [self.c_uint(ckval)])\n           }\n+          ty::ty_unboxed_vec(mt) { self.bracketed_mt(\"vec\", mt, []) }\n         }\n     }\n }"}, {"sha": "2b21e3e954eafc3d0f84e54f0f72d28fbbcb12d6", "filename": "src/rustc/middle/trans/shape.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4f61dcb026910da60b85564fbee1b340569337f4/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f61dcb026910da60b85564fbee1b340569337f4/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs?ref=4f61dcb026910da60b85564fbee1b340569337f4", "patch": "@@ -269,14 +269,16 @@ fn shape_of(ccx: @crate_ctxt, t: ty::t) -> [u8] {\n         add_substr(s, shape_of(ccx, mt.ty));\n         s\n       }\n+      ty::ty_unboxed_vec(mt) {\n+        let mut s = [shape_unboxed_vec];\n+        add_bool(s, ty::type_is_pod(ccx.tcx, mt.ty));\n+        add_substr(s, shape_of(ccx, mt.ty));\n+        s\n+      }\n       ty::ty_evec(mt, ty::vstore_uniq) |\n       ty::ty_vec(mt) {\n-        let mut s_inner = [shape_unboxed_vec];\n-        add_bool(s_inner, ty::type_is_pod(ccx.tcx, mt.ty));\n-        add_substr(s_inner, shape_of(ccx, mt.ty));\n-        let mut s = [shape_uniq];\n-        add_substr(s, s_inner);\n-        s\n+        shape_of(ccx,\n+                 ty::mk_imm_uniq(ccx.tcx, ty::mk_unboxed_vec(ccx.tcx, mt)))\n       }\n \n       ty::ty_estr(ty::vstore_fixed(n)) {"}, {"sha": "fb9112fc751ff88c0209d5d585f5db8e60444b4d", "filename": "src/rustc/middle/trans/type_of.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4f61dcb026910da60b85564fbee1b340569337f4/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f61dcb026910da60b85564fbee1b340569337f4/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_of.rs?ref=4f61dcb026910da60b85564fbee1b340569337f4", "patch": "@@ -99,6 +99,9 @@ fn type_of(cx: @crate_ctxt, t: ty::t) -> TypeRef {\n           ty::ty_vec(mt) {\n             T_unique_ptr(T_unique(cx, T_vec(cx, type_of(cx, mt.ty))))\n           }\n+          ty::ty_unboxed_vec(mt) {\n+            T_vec(cx, type_of(cx, mt.ty))\n+          }\n           ty::ty_ptr(mt) { T_ptr(type_of(cx, mt.ty)) }\n           ty::ty_rptr(_, mt) { T_ptr(type_of(cx, mt.ty)) }\n "}, {"sha": "c770e7d71b77769a6d4d7f24e7a1182c297b7d24", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4f61dcb026910da60b85564fbee1b340569337f4/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f61dcb026910da60b85564fbee1b340569337f4/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=4f61dcb026910da60b85564fbee1b340569337f4", "patch": "@@ -88,6 +88,7 @@ export ty_str, mk_str, type_is_str;\n export ty_vec, mk_vec, type_is_vec;\n export ty_estr, mk_estr;\n export ty_evec, mk_evec;\n+export ty_unboxed_vec, mk_unboxed_vec;\n export vstore, vstore_fixed, vstore_uniq, vstore_box, vstore_slice;\n export ty_nil, mk_nil, type_is_nil;\n export ty_iface, mk_iface;\n@@ -378,6 +379,7 @@ enum sty {\n     ty_type, // type_desc*\n     ty_opaque_box, // used by monomorphizer to represent any @ box\n     ty_opaque_closure_ptr(closure_kind), // ptr to env for fn, fn@, fn~\n+    ty_unboxed_vec(mt),\n }\n \n // In the middle end, constraints have a def_id attached, referring\n@@ -576,7 +578,8 @@ fn mk_t_with_id(cx: ctxt, st: sty, o_def_id: option<ast::def_id>) -> t {\n       ty_enum(_, substs) | ty_class(_, substs) | ty_iface(_, substs) {\n         flags |= sflags(substs);\n       }\n-      ty_box(m) | ty_uniq(m) | ty_vec(m) | ty_evec(m, _) | ty_ptr(m) {\n+      ty_box(m) | ty_uniq(m) | ty_vec(m) | ty_evec(m, _) |\n+      ty_ptr(m) | ty_unboxed_vec(m) {\n         flags |= get(m.ty).flags;\n       }\n       ty_rptr(r, m) {\n@@ -671,6 +674,11 @@ fn mk_evec(cx: ctxt, tm: mt, t: vstore) -> t {\n     mk_t(cx, ty_evec(tm, t))\n }\n \n+fn mk_unboxed_vec(cx: ctxt, tm: mt) -> t {\n+    mk_t(cx, ty_unboxed_vec(tm))\n+}\n+\n+\n fn mk_rec(cx: ctxt, fs: [field]) -> t { mk_t(cx, ty_rec(fs)) }\n \n fn mk_constr(cx: ctxt, t: t, cs: [@type_constr]) -> t {\n@@ -752,7 +760,7 @@ fn maybe_walk_ty(ty: t, f: fn(t) -> bool) {\n       ty_opaque_closure_ptr(_) | ty_var(_) | ty_var_integral(_) |\n       ty_param(_, _) {\n       }\n-      ty_box(tm) | ty_vec(tm) | ty_evec(tm, _) |\n+      ty_box(tm) | ty_vec(tm) | ty_evec(tm, _) | ty_unboxed_vec(tm) |\n       ty_ptr(tm) | ty_rptr(_, tm) {\n         maybe_walk_ty(tm.ty, f);\n       }\n@@ -801,6 +809,9 @@ fn fold_sty(sty: sty, fldop: fn(t) -> t) -> sty {\n       ty_vec(tm) {\n         ty_vec({ty: fldop(tm.ty), mutbl: tm.mutbl})\n       }\n+      ty_unboxed_vec(tm) {\n+        ty_unboxed_vec({ty: fldop(tm.ty), mutbl: tm.mutbl})\n+      }\n       ty_evec(tm, vst) {\n         ty_evec({ty: fldop(tm.ty), mutbl: tm.mutbl}, vst)\n       }\n@@ -1155,7 +1166,7 @@ pure fn type_is_unsafe_ptr(ty: t) -> bool {\n \n pure fn type_is_vec(ty: t) -> bool {\n     ret alt get(ty).struct {\n-          ty_vec(_) | ty_evec(_, _) { true }\n+          ty_vec(_) | ty_evec(_, _) | ty_unboxed_vec(_) { true }\n           ty_str | ty_estr(_) { true }\n           _ { false }\n         };\n@@ -1593,7 +1604,7 @@ fn type_kind(cx: ctxt, ty: t) -> kind {\n       ty_var(_) | ty_var_integral(_) {\n         cx.sess.bug(\"Asked to compute kind of a type variable\");\n       }\n-      ty_type | ty_opaque_closure_ptr(_) | ty_opaque_box {\n+      ty_type | ty_opaque_closure_ptr(_) | ty_opaque_box | ty_unboxed_vec(_) {\n         cx.sess.bug(\"Asked to compute kind of fictitious type\");\n       }\n     };\n@@ -1647,6 +1658,7 @@ fn is_instantiable(cx: ctxt, r_ty: t) -> bool {\n           ty_opaque_box |\n           ty_opaque_closure_ptr(_) |\n           ty_evec(_, _) |\n+          ty_unboxed_vec(_) |\n           ty_vec(_) {\n             false\n           }\n@@ -2052,6 +2064,7 @@ fn hash_type_structure(st: sty) -> uint {\n       ty_box(mt) { hash_subty(19u, mt.ty) }\n       ty_evec(mt, _) { hash_subty(20u, mt.ty) }\n       ty_vec(mt) { hash_subty(21u, mt.ty) }\n+      ty_unboxed_vec(mt) { hash_subty(22u, mt.ty) }\n       ty_tup(ts) { hash_subtys(25u, ts) }\n       ty_rec(fields) {\n         let mut h = 26u;\n@@ -2411,6 +2424,7 @@ fn ty_sort_str(cx: ctxt, t: t) -> str {\n       ty_box(_) { \"@-ptr\" }\n       ty_uniq(_) { \"~-ptr\" }\n       ty_evec(_, _) | ty_vec(_) { \"vector\" }\n+      ty_unboxed_vec(_) { \"unboxed vector\" }\n       ty_ptr(_) { \"*-ptr\" }\n       ty_rptr(_, _) { \"&-ptr\" }\n       ty_rec(_) { \"record\" }"}, {"sha": "3c60cb911fe4ad89f94d53e63981ee76fac50d30", "filename": "src/rustc/util/ppaux.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4f61dcb026910da60b85564fbee1b340569337f4/src%2Frustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f61dcb026910da60b85564fbee1b340569337f4/src%2Frustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Futil%2Fppaux.rs?ref=4f61dcb026910da60b85564fbee1b340569337f4", "patch": "@@ -8,7 +8,7 @@ import middle::ty::{ty_estr, ty_evec, ty_float, ty_fn, ty_iface, ty_int};\n import middle::ty::{ty_nil, ty_opaque_box, ty_opaque_closure_ptr, ty_param};\n import middle::ty::{ty_ptr, ty_rec, ty_res, ty_rptr, ty_self, ty_str, ty_tup};\n import middle::ty::{ty_type, ty_uniq, ty_uint, ty_var, ty_var_integral};\n-import middle::ty::{ty_vec, vid};\n+import middle::ty::{ty_vec, ty_unboxed_vec, vid};\n import metadata::encoder;\n import syntax::codemap;\n import syntax::print::pprust;\n@@ -186,6 +186,7 @@ fn ty_to_str(cx: ctxt, typ: t) -> str {\n         }\n       }\n       ty_vec(tm) { \"[\" + mt_to_str(cx, tm) + \"]\" }\n+      ty_unboxed_vec(tm) { \"unboxed_vec<\" + mt_to_str(cx, tm) + \">\" }\n       ty_type { \"type\" }\n       ty_rec(elems) {\n         let mut strs: [str] = [];"}]}