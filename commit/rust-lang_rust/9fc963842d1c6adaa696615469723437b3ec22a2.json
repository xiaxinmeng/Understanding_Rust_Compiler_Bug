{"sha": "9fc963842d1c6adaa696615469723437b3ec22a2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmYzk2Mzg0MmQxYzZhZGFhNjk2NjE1NDY5NzIzNDM3YjNlYzIyYTI=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-10-09T08:35:50Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-10-09T08:35:50Z"}, "message": "Subject copying code to inline heuristic, cut 30kb from rustc.", "tree": {"sha": "d526c92fa8ad78a9203c6e7e427c2060a7a963c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d526c92fa8ad78a9203c6e7e427c2060a7a963c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9fc963842d1c6adaa696615469723437b3ec22a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9fc963842d1c6adaa696615469723437b3ec22a2", "html_url": "https://github.com/rust-lang/rust/commit/9fc963842d1c6adaa696615469723437b3ec22a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9fc963842d1c6adaa696615469723437b3ec22a2/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a441865f6e501697f3a132c1e5ec73336e8e3184", "url": "https://api.github.com/repos/rust-lang/rust/commits/a441865f6e501697f3a132c1e5ec73336e8e3184", "html_url": "https://github.com/rust-lang/rust/commit/a441865f6e501697f3a132c1e5ec73336e8e3184"}], "stats": {"total": 41, "additions": 31, "deletions": 10}, "files": [{"sha": "5983b4d6f1686884b0267cc990986504a4be0765", "filename": "src/boot/me/trans.ml", "status": "modified", "additions": 31, "deletions": 10, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/9fc963842d1c6adaa696615469723437b3ec22a2/src%2Fboot%2Fme%2Ftrans.ml", "raw_url": "https://github.com/rust-lang/rust/raw/9fc963842d1c6adaa696615469723437b3ec22a2/src%2Fboot%2Fme%2Ftrans.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftrans.ml?ref=9fc963842d1c6adaa696615469723437b3ec22a2", "patch": "@@ -1954,13 +1954,13 @@ let trans_visitor\n       let initflag = get_element_ptr args arg_initflag in\n       let jmps = trans_compare_simple Il.JNE (Il.Cell initflag) one in\n \n-        trans_copy_ty ty_params true dst ty src ty;\n+        trans_copy_ty_full true ty_params true dst ty src ty;\n \n         let skip_noninit_jmp = mark() in\n           emit (Il.jmp Il.JMP Il.CodeNone);\n           List.iter patch jmps;\n \n-          trans_copy_ty ty_params false dst ty src ty;\n+          trans_copy_ty_full true ty_params false dst ty src ty;\n \n           patch skip_noninit_jmp;\n     in\n@@ -3661,6 +3661,16 @@ let trans_visitor\n       (dst:Il.cell) (dst_ty:Ast.ty)\n       (src:Il.cell) (src_ty:Ast.ty)\n       : unit =\n+    trans_copy_ty_full\n+      false ty_params initializing dst dst_ty src src_ty\n+\n+  and trans_copy_ty_full\n+      (force_inline:bool)\n+      (ty_params:Il.cell)\n+      (initializing:bool)\n+      (dst:Il.cell) (dst_ty:Ast.ty)\n+      (src:Il.cell) (src_ty:Ast.ty)\n+      : unit =\n     let anno (weight:string) : unit =\n       iflog\n         begin\n@@ -3700,7 +3710,7 @@ let trans_visitor\n               | _ ->\n                   (* Heavyweight copy: duplicate 1 level of the referent. *)\n                   anno \"heavy\";\n-                  trans_copy_ty_heavy ty_params initializing\n+                  trans_copy_ty_heavy force_inline ty_params initializing\n                     dst dst_ty src src_ty\n         end\n \n@@ -3732,6 +3742,7 @@ let trans_visitor\n    *)\n \n   and trans_copy_ty_heavy\n+      (force_inline:bool)\n       (ty_params:Il.cell)\n       (initializing:bool)\n       (dst:Il.cell) (dst_ty:Ast.ty)\n@@ -3777,8 +3788,7 @@ let trans_visitor\n               iflog\n                 (fun _ -> annotate\n                    (Printf.sprintf \"copy_ty: parametric copy %#d\" i));\n-              let initflag = if initializing then one else zero in\n-              let initflag = Il.Reg (force_to_reg initflag) in\n+              let initflag = Il.Reg (force_to_reg one) in\n               aliasing false src\n                 begin\n                   fun src ->\n@@ -3814,17 +3824,28 @@ let trans_visitor\n                      * through to the binding's self-copy fptr. For now\n                      * this only works by accident.\n                      *)\n-                    trans_copy_ty ty_params initializing\n+                    trans_copy_ty ty_params true\n                       dst_binding (Ast.TY_box Ast.TY_int)\n                       src_binding (Ast.TY_box Ast.TY_int);\n                     patch null_jmp\n               end\n \n           | _ ->\n-              iter_ty_parts_full ty_params dst src ty\n-                (fun dst src ty ->\n-                   trans_copy_ty ty_params true\n-                     dst ty src ty)\n+              if force_inline || should_inline_structure_helpers ty\n+              then\n+                iter_ty_parts_full ty_params dst src ty\n+                  (fun dst src ty ->\n+                     trans_copy_ty ty_params true\n+                       dst ty src ty)\n+              else\n+                let initflag = Il.Reg (force_to_reg one) in\n+                  trans_call_static_glue\n+                    (code_fixup_to_ptr_operand (get_copy_glue ty))\n+                    (Some dst)\n+                    [| alias ty_params;\n+                       alias src;\n+                       initflag |]\n+                    None\n \n \n   and trans_copy"}]}