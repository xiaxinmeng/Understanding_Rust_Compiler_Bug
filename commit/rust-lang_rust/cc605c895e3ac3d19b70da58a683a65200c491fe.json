{"sha": "cc605c895e3ac3d19b70da58a683a65200c491fe", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjNjA1Yzg5NWUzYWMzZDE5YjcwZGE1OGE2ODNhNjUyMDBjNDkxZmU=", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2017-04-20T21:06:18Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2017-04-21T04:16:31Z"}, "message": "Remove {Cell,RefCell}::as_unsafe_cell\n\n[unstable, deprecated since 1.12.0]", "tree": {"sha": "b6e88e55aa139f489bb8c1c9816f84392266efe3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b6e88e55aa139f489bb8c1c9816f84392266efe3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc605c895e3ac3d19b70da58a683a65200c491fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc605c895e3ac3d19b70da58a683a65200c491fe", "html_url": "https://github.com/rust-lang/rust/commit/cc605c895e3ac3d19b70da58a683a65200c491fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc605c895e3ac3d19b70da58a683a65200c491fe/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0c5e8b8fc6d3631de39cfc250868da993ff4086", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0c5e8b8fc6d3631de39cfc250868da993ff4086", "html_url": "https://github.com/rust-lang/rust/commit/f0c5e8b8fc6d3631de39cfc250868da993ff4086"}], "stats": {"total": 51, "additions": 0, "deletions": 51}, "files": [{"sha": "2a932e342f6a702966d1c66ebaa0e0b8b54ec96b", "filename": "src/doc/unstable-book/src/SUMMARY.md", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cc605c895e3ac3d19b70da58a683a65200c491fe/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/cc605c895e3ac3d19b70da58a683a65200c491fe/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md?ref=cc605c895e3ac3d19b70da58a683a65200c491fe", "patch": "@@ -101,7 +101,6 @@\n     - [alloc_system](library-features/alloc-system.md)\n     - [alloc](library-features/alloc.md)\n     - [as_c_str](library-features/as-c-str.md)\n-    - [as_unsafe_cell](library-features/as-unsafe-cell.md)\n     - [ascii_ctype](library-features/ascii-ctype.md)\n     - [binary_heap_peek_mut_pop](library-features/binary-heap-peek-mut-pop.md)\n     - [borrow_state](library-features/borrow-state.md)"}, {"sha": "79d7a7cad0b6e232c869ec59bf1ccc6a2eb11f7a", "filename": "src/doc/unstable-book/src/library-features/as-unsafe-cell.md", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f0c5e8b8fc6d3631de39cfc250868da993ff4086/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fas-unsafe-cell.md", "raw_url": "https://github.com/rust-lang/rust/raw/f0c5e8b8fc6d3631de39cfc250868da993ff4086/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fas-unsafe-cell.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fas-unsafe-cell.md?ref=f0c5e8b8fc6d3631de39cfc250868da993ff4086", "patch": "@@ -1,7 +0,0 @@\n-# `as_unsafe_cell`\n-\n-The tracking issue for this feature is: [#27708]\n-\n-[#27708]: https://github.com/rust-lang/rust/issues/27708\n-\n-------------------------"}, {"sha": "a5dda5625bd3a8c5c6a7eeffafe0dc7e4cc2e395", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 0, "deletions": 43, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/cc605c895e3ac3d19b70da58a683a65200c491fe/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc605c895e3ac3d19b70da58a683a65200c491fe/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=cc605c895e3ac3d19b70da58a683a65200c491fe", "patch": "@@ -310,26 +310,6 @@ impl<T> Cell<T> {\n         }\n     }\n \n-    /// Returns a reference to the underlying `UnsafeCell`.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// #![feature(as_unsafe_cell)]\n-    ///\n-    /// use std::cell::Cell;\n-    ///\n-    /// let c = Cell::new(5);\n-    ///\n-    /// let uc = c.as_unsafe_cell();\n-    /// ```\n-    #[inline]\n-    #[unstable(feature = \"as_unsafe_cell\", issue = \"27708\")]\n-    #[rustc_deprecated(since = \"1.12.0\", reason = \"renamed to as_ptr\")]\n-    pub fn as_unsafe_cell(&self) -> &UnsafeCell<T> {\n-        &self.value\n-    }\n-\n     /// Returns a raw pointer to the underlying data in this cell.\n     ///\n     /// # Examples\n@@ -769,29 +749,6 @@ impl<T: ?Sized> RefCell<T> {\n         }\n     }\n \n-    /// Returns a reference to the underlying `UnsafeCell`.\n-    ///\n-    /// This can be used to circumvent `RefCell`'s safety checks.\n-    ///\n-    /// This function is `unsafe` because `UnsafeCell`'s field is public.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// #![feature(as_unsafe_cell)]\n-    ///\n-    /// use std::cell::RefCell;\n-    ///\n-    /// let c = RefCell::new(5);\n-    /// let c = unsafe { c.as_unsafe_cell() };\n-    /// ```\n-    #[inline]\n-    #[unstable(feature = \"as_unsafe_cell\", issue = \"27708\")]\n-    #[rustc_deprecated(since = \"1.12.0\", reason = \"renamed to as_ptr\")]\n-    pub unsafe fn as_unsafe_cell(&self) -> &UnsafeCell<T> {\n-        &self.value\n-    }\n-\n     /// Returns a raw pointer to the underlying data in this cell.\n     ///\n     /// # Examples"}]}