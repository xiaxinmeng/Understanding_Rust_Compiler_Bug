{"sha": "9c083068e31e8eb4d4f1d3f649354408d866574c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljMDgzMDY4ZTMxZThlYjRkNGYxZDNmNjQ5MzU0NDA4ZDg2NjU3NGM=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2019-10-24T15:37:48Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2019-10-25T09:14:29Z"}, "message": "self-profiling: Switch query-blocking measurements to RAII-style API.", "tree": {"sha": "42cf4c882b40bfc18f3d6768a5868229c307e326", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/42cf4c882b40bfc18f3d6768a5868229c307e326"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c083068e31e8eb4d4f1d3f649354408d866574c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c083068e31e8eb4d4f1d3f649354408d866574c", "html_url": "https://github.com/rust-lang/rust/commit/9c083068e31e8eb4d4f1d3f649354408d866574c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c083068e31e8eb4d4f1d3f649354408d866574c/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee1173a8ffaf51335a4eb7198cd0ce7f508abfd0", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee1173a8ffaf51335a4eb7198cd0ce7f508abfd0", "html_url": "https://github.com/rust-lang/rust/commit/ee1173a8ffaf51335a4eb7198cd0ce7f508abfd0"}], "stats": {"total": 40, "additions": 19, "deletions": 21}, "files": [{"sha": "538154b035ac6567e1e2cf01574a161537445579", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9c083068e31e8eb4d4f1d3f649354408d866574c/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c083068e31e8eb4d4f1d3f649354408d866574c/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=9c083068e31e8eb4d4f1d3f649354408d866574c", "patch": "@@ -90,6 +90,10 @@ impl<'a, 'tcx, Q: QueryDescription<'tcx>> JobOwner<'a, 'tcx, Q> {\n                 }\n                 return TryGetJob::JobCompleted(result);\n             }\n+\n+            #[cfg(parallel_compiler)]\n+            let query_blocked_prof_timer;\n+\n             let job = match lock.active.entry((*key).clone()) {\n                 Entry::Occupied(entry) => {\n                     match *entry.get() {\n@@ -98,7 +102,9 @@ impl<'a, 'tcx, Q: QueryDescription<'tcx>> JobOwner<'a, 'tcx, Q> {\n                             // in another thread has completed. Record how long we wait in the\n                             // self-profiler.\n                             #[cfg(parallel_compiler)]\n-                            tcx.prof.query_blocked_start(Q::NAME);\n+                            {\n+                                query_blocked_prof_timer = tcx.prof.query_blocked(Q::NAME);\n+                            }\n \n                             job.clone()\n                         },\n@@ -140,7 +146,11 @@ impl<'a, 'tcx, Q: QueryDescription<'tcx>> JobOwner<'a, 'tcx, Q> {\n             #[cfg(parallel_compiler)]\n             {\n                 let result = job.r#await(tcx, span);\n-                tcx.prof.query_blocked_end(Q::NAME);\n+\n+                // This `drop()` is not strictly necessary as the binding\n+                // would go out of scope anyway. But it's good to have an\n+                // explicit marker of how far the measurement goes.\n+                drop(query_blocked_prof_timer);\n \n                 if let Err(cycle) = result {\n                     return TryGetJob::Cycle(Q::handle_cycle_error(tcx, cycle));"}, {"sha": "5a1b7f3aa4cb851343bee4e033c4d0d6edf91ea1", "filename": "src/librustc/util/profiling.rs", "status": "modified", "additions": 7, "deletions": 19, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9c083068e31e8eb4d4f1d3f649354408d866574c/src%2Flibrustc%2Futil%2Fprofiling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c083068e31e8eb4d4f1d3f649354408d866574c/src%2Flibrustc%2Futil%2Fprofiling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fprofiling.rs?ref=9c083068e31e8eb4d4f1d3f649354408d866574c", "patch": "@@ -156,26 +156,14 @@ impl SelfProfilerRef {\n     }\n \n     /// Start profiling a query being blocked on a concurrent execution.\n-    /// Profiling continues until `query_blocked_end` is called.\n+    /// Profiling continues until the TimingGuard returned from this call is\n+    /// dropped.\n     #[inline(always)]\n-    pub fn query_blocked_start(&self, query_name: QueryName) {\n-        self.non_guard_query_event(\n-            |profiler| profiler.query_blocked_event_kind,\n-            query_name,\n-            EventFilter::QUERY_BLOCKED,\n-            TimestampKind::Start,\n-        );\n-    }\n-\n-    /// End profiling a query being blocked on a concurrent execution.\n-    #[inline(always)]\n-    pub fn query_blocked_end(&self, query_name: QueryName) {\n-        self.non_guard_query_event(\n-            |profiler| profiler.query_blocked_event_kind,\n-            query_name,\n-            EventFilter::QUERY_BLOCKED,\n-            TimestampKind::End,\n-        );\n+    pub fn query_blocked(&self, query_name: QueryName) -> TimingGuard<'_> {\n+        self.exec(EventFilter::QUERY_BLOCKED, |profiler| {\n+            let event_id = SelfProfiler::get_query_name_string_id(query_name);\n+            TimingGuard::start(profiler, profiler.query_blocked_event_kind, event_id)\n+        })\n     }\n \n     /// Start profiling how long it takes to load a query result from the"}]}