{"sha": "bf1198eb1fea71f94d4f0c3c3e968eaf183dfa65", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmMTE5OGViMWZlYTcxZjk0ZDRmMGMzYzNlOTY4ZWFmMTgzZGZhNjU=", "commit": {"author": {"name": "Paul Daniel Faria", "email": "nashenas88@users.noreply.github.com", "date": "2017-11-01T03:14:13Z"}, "committer": {"name": "Paul Daniel Faria", "email": "nashenas88@users.noreply.github.com", "date": "2017-11-02T00:12:53Z"}, "message": "newtype_index: Support simpler serializable override, custom derive, and fix mir_opt tests", "tree": {"sha": "785652900a63862b4755369edaa314bc4580bfc2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/785652900a63862b4755369edaa314bc4580bfc2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf1198eb1fea71f94d4f0c3c3e968eaf183dfa65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf1198eb1fea71f94d4f0c3c3e968eaf183dfa65", "html_url": "https://github.com/rust-lang/rust/commit/bf1198eb1fea71f94d4f0c3c3e968eaf183dfa65", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf1198eb1fea71f94d4f0c3c3e968eaf183dfa65/comments", "author": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b46e42fe2ab75f26ce0f34a849a611c6b8cddf13", "url": "https://api.github.com/repos/rust-lang/rust/commits/b46e42fe2ab75f26ce0f34a849a611c6b8cddf13", "html_url": "https://github.com/rust-lang/rust/commit/b46e42fe2ab75f26ce0f34a849a611c6b8cddf13"}], "stats": {"total": 355, "additions": 213, "deletions": 142}, "files": [{"sha": "c96040ab9b6e3eab996aafdb875c90fc6d3217a4", "filename": "src/librustc/dep_graph/serialized.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf1198eb1fea71f94d4f0c3c3e968eaf183dfa65/src%2Flibrustc%2Fdep_graph%2Fserialized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf1198eb1fea71f94d4f0c3c3e968eaf183dfa65/src%2Flibrustc%2Fdep_graph%2Fserialized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fserialized.rs?ref=bf1198eb1fea71f94d4f0c3c3e968eaf183dfa65", "patch": "@@ -14,7 +14,7 @@ use dep_graph::DepNode;\n use ich::Fingerprint;\n use rustc_data_structures::indexed_vec::{IndexVec, Idx};\n \n-newtype_index!(SerializedDepNodeIndex { derive[RustcEncodable, RustcDecodable] });\n+newtype_index!(SerializedDepNodeIndex);\n \n /// Data for use when recompiling the **current crate**.\n #[derive(Debug, RustcEncodable, RustcDecodable)]"}, {"sha": "5d488074552ed32cd6b8a51af6ba5859fc27c54a", "filename": "src/librustc/hir/def_id.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bf1198eb1fea71f94d4f0c3c3e968eaf183dfa65/src%2Flibrustc%2Fhir%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf1198eb1fea71f94d4f0c3c3e968eaf183dfa65/src%2Flibrustc%2Fhir%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef_id.rs?ref=bf1198eb1fea71f94d4f0c3c3e968eaf183dfa65", "patch": "@@ -18,6 +18,9 @@ use std::u32;\n \n newtype_index!(CrateNum nopub\n     {\n+        derive[Debug]\n+        ENCODABLE = custom\n+\n         /// Item definitions in the currently-compiled crate would have the CrateNum\n         /// LOCAL_CRATE in their DefId.\n         const LOCAL_CRATE = 0,"}, {"sha": "d43774bf3b084310eb5d4601126691e004754ccb", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bf1198eb1fea71f94d4f0c3c3e968eaf183dfa65/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf1198eb1fea71f94d4f0c3c3e968eaf183dfa65/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=bf1198eb1fea71f94d4f0c3c3e968eaf183dfa65", "patch": "@@ -156,12 +156,7 @@ pub struct BlockRemainder {\n     pub first_statement_index: FirstStatementIndex,\n }\n \n-newtype_index!(FirstStatementIndex\n-    {\n-        derive[RustcEncodable, RustcDecodable]\n-        DEBUG_NAME = \"\",\n-        MAX = SCOPE_DATA_REMAINDER_MAX,\n-    });\n+newtype_index!(FirstStatementIndex { MAX = SCOPE_DATA_REMAINDER_MAX });\n \n impl From<ScopeData> for Scope {\n     #[inline]"}, {"sha": "e79c846d4499128a39bc28f8659fac8b80244ef2", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 5, "deletions": 19, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/bf1198eb1fea71f94d4f0c3c3e968eaf183dfa65/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf1198eb1fea71f94d4f0c3c3e968eaf183dfa65/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=bf1198eb1fea71f94d4f0c3c3e968eaf183dfa65", "patch": "@@ -417,8 +417,7 @@ pub enum BorrowKind {\n \n newtype_index!(Local\n     {\n-        derive[RustcEncodable, RustcDecodable]\n-        DEBUG_NAME = \"_\",\n+        DEBUG_FORMAT = \"_{}\",\n         const RETURN_POINTER = 0,\n     });\n \n@@ -554,11 +553,7 @@ pub struct UpvarDecl {\n ///////////////////////////////////////////////////////////////////////////\n // BasicBlock\n \n-newtype_index!(BasicBlock\n-    {\n-        derive[RustcEncodable, RustcDecodable]\n-        DEBUG_NAME = \"bb\"\n-    });\n+newtype_index!(BasicBlock { DEBUG_FORMAT = \"bb{}\" });\n \n ///////////////////////////////////////////////////////////////////////////\n // BasicBlockData and Terminator\n@@ -1140,11 +1135,7 @@ pub type LvalueProjection<'tcx> = Projection<'tcx, Lvalue<'tcx>, Local, Ty<'tcx>\n /// and the index is a local.\n pub type LvalueElem<'tcx> = ProjectionElem<'tcx, Local, Ty<'tcx>>;\n \n-newtype_index!(Field\n-    {\n-        derive[RustcEncodable, RustcDecodable]\n-        DEBUG_NAME = \"field\"\n-    });\n+newtype_index!(Field { DEBUG_FORMAT = \"field[{}]\" });\n \n impl<'tcx> Lvalue<'tcx> {\n     pub fn field(self, f: Field, ty: Ty<'tcx>) -> Lvalue<'tcx> {\n@@ -1211,8 +1202,7 @@ impl<'tcx> Debug for Lvalue<'tcx> {\n \n newtype_index!(VisibilityScope\n     {\n-        derive[RustcEncodable, RustcDecodable]\n-        DEBUG_NAME = \"scope\",\n+        DEBUG_FORMAT = \"scope[{}]\",\n         const ARGUMENT_VISIBILITY_SCOPE = 0,\n     });\n \n@@ -1539,11 +1529,7 @@ pub struct Constant<'tcx> {\n     pub literal: Literal<'tcx>,\n }\n \n-newtype_index!(Promoted\n-    {\n-        derive[RustcEncodable, RustcDecodable]\n-        DEBUG_NAME = \"promoted\"\n-    });\n+newtype_index!(Promoted { DEBUG_FORMAT = \"promoted[{}]\" });\n \n \n #[derive(Clone, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]"}, {"sha": "85045342782571531e519c821554915503c672ac", "filename": "src/librustc_data_structures/indexed_vec.rs", "status": "modified", "additions": 202, "deletions": 115, "changes": 317, "blob_url": "https://github.com/rust-lang/rust/blob/bf1198eb1fea71f94d4f0c3c3e968eaf183dfa65/src%2Flibrustc_data_structures%2Findexed_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf1198eb1fea71f94d4f0c3c3e968eaf183dfa65/src%2Flibrustc_data_structures%2Findexed_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Findexed_vec.rs?ref=bf1198eb1fea71f94d4f0c3c3e968eaf183dfa65", "patch": "@@ -46,51 +46,51 @@ macro_rules! newtype_index {\n     ($name:ident) => (\n         newtype_index!(\n             // Leave out derives marker so we can use its absence to ensure it comes first\n-            @type       [$name]\n-            @pub        [pub]\n-            @max        [::std::u32::MAX]\n-            @debug_name [unsafe {::std::intrinsics::type_name::<$name>() }]);\n+            @type         [$name]\n+            @pub          [pub]\n+            @max          [::std::u32::MAX]\n+            @debug_format [\"{}\"]);\n     );\n \n     ($name:ident nopub) => (\n         newtype_index!(\n             // Leave out derives marker so we can use its absence to ensure it comes first\n-            @type       [$name]\n-            @pub        []\n-            @max        [::std::u32::MAX]\n-            @debug_name [unsafe {::std::intrinsics::type_name::<$name>() }]);\n+            @type         [$name]\n+            @pub          []\n+            @max          [::std::u32::MAX]\n+            @debug_format [\"{}\"]);\n     );\n \n     // Define any constants\n     ($name:ident { $($tokens:tt)+ }) => (\n         newtype_index!(\n             // Leave out derives marker so we can use its absence to ensure it comes first\n-            @type       [$name]\n-            @pub        [pub]\n-            @max        [::std::u32::MAX]\n-            @debug_name [unsafe {::std::intrinsics::type_name::<$name>() }]\n-                        $($tokens)+);\n+            @type         [$name]\n+            @pub          [pub]\n+            @max          [::std::u32::MAX]\n+            @debug_format [\"{}\"]\n+                          $($tokens)+);\n     );\n \n     // Define any constants\n     ($name:ident nopub { $($tokens:tt)+ }) => (\n         newtype_index!(\n             // Leave out derives marker so we can use its absence to ensure it comes first\n-            @type       [$name]\n-            @pub        []\n-            @max        [::std::u32::MAX]\n-            @debug_name [unsafe {::std::intrinsics::type_name::<$name>() }]\n-                        $($tokens)+);\n+            @type         [$name]\n+            @pub          []\n+            @max          [::std::u32::MAX]\n+            @debug_format [unsafe {::std::intrinsics::type_name::<$name>() }]\n+                          $($tokens)+);\n     );\n \n     // ---- private rules ----\n \n     // Base case, user-defined constants (if any) have already been defined\n-    (@derives    [$($derives:ident),*]\n-     @type       [$type:ident]\n-     @pub        [$($pub:tt)*]\n-     @max        [$max:expr]\n-     @debug_name [$debug_name:expr]) => (\n+    (@derives      [$($derives:ident,)*]\n+     @type         [$type:ident]\n+     @pub          [$($pub:tt)*]\n+     @max          [$max:expr]\n+     @debug_format [$debug_format:expr]) => (\n         #[derive(Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord, $($derives),*)]\n         pub struct $type($($pub)* u32);\n \n@@ -105,130 +105,217 @@ macro_rules! newtype_index {\n             }\n         }\n \n+        newtype_index!(\n+            @handle_debug\n+            @derives      [$($derives,)*]\n+            @type         [$type]\n+            @debug_format [$debug_format]);\n+    );\n+\n+    // base case for handle_debug where format is custom. No Debug implementation is emitted.\n+    (@handle_debug\n+     @derives      [$($_derives:ident,)*]\n+     @type         [$type:ident]\n+     @debug_format [custom]) => ();\n+\n+    // base case for handle_debug, no debug overrides found, so use default\n+    (@handle_debug\n+     @derives      []\n+     @type         [$type:ident]\n+     @debug_format [$debug_format:expr]) => (\n         impl ::std::fmt::Debug for $type {\n             fn fmt(&self, fmt: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {\n-                write!(fmt, \"{}{}\", $debug_name, self.0)\n+                write!(fmt, $debug_format, self.0)\n             }\n         }\n     );\n \n+    // Debug is requested for derive, don't generate any Debug implementation.\n+    (@handle_debug\n+     @derives      [Debug, $($derives:ident,)*]\n+     @type         [$type:ident]\n+     @debug_format [$debug_format:expr]) => ();\n+\n+    // It's not Debug, so just pop it off the front of the derives stack and check the rest.\n+    (@handle_debug\n+     @derives      [$_derive:ident, $($derives:ident,)*]\n+     @type         [$type:ident]\n+     @debug_format [$debug_format:expr]) => (\n+        newtype_index!(\n+            @handle_debug\n+            @derives      [$($derives,)*]\n+            @type         [$type]\n+            @debug_format [$debug_format]);\n+    );\n+\n+    // Append comma to end of derives list if it's missing\n+    (@type         [$type:ident]\n+     @pub          [$($pub:tt)*]\n+     @max          [$max:expr]\n+     @debug_format [$debug_format:expr]\n+                   derive [$($derives:ident),*]\n+                   $($tokens:tt)*) => (\n+        newtype_index!(\n+            @type         [$type]\n+            @pub          [$($pub)*]\n+            @max          [$max]\n+            @debug_format [$debug_format]\n+                          derive [$($derives,)*]\n+                          $($tokens)*);\n+    );\n+\n+    // By not including the @derives marker in this list nor in the default args, we can force it\n+    // to come first if it exists. When encodable is custom, just use the derives list as-is.\n+    (@type         [$type:ident]\n+     @pub          [$($pub:tt)*]\n+     @max          [$max:expr]\n+     @debug_format [$debug_format:expr]\n+                   derive [$($derives:ident,)+]\n+                   ENCODABLE = custom\n+                   $($tokens:tt)*) => (\n+        newtype_index!(\n+            @derives      [$($derives,)+]\n+            @type         [$type]\n+            @pub          [$($pub)*]\n+            @max          [$max]\n+            @debug_format [$debug_format]\n+                          $($tokens)*);\n+    );\n+\n     // By not including the @derives marker in this list nor in the default args, we can force it\n-    // to come first if it exists\n-    (@type       [$type:ident]\n-     @pub        [$($pub:tt)*]\n-     @max        [$max:expr]\n-     @debug_name [$debug_name:expr]\n-                 derive [$($derives:ident),+]\n-                 $($tokens:tt)*) => (\n+    // to come first if it exists. When encodable isn't custom, add serialization traits by default.\n+    (@type         [$type:ident]\n+     @pub          [$($pub:tt)*]\n+     @max          [$max:expr]\n+     @debug_format [$debug_format:expr]\n+                   derive [$($derives:ident,)+]\n+                   $($tokens:tt)*) => (\n+        newtype_index!(\n+            @derives      [$($derives,)+ RustcDecodable, RustcEncodable,]\n+            @type         [$type]\n+            @pub          [$($pub)*]\n+            @max          [$max]\n+            @debug_format [$debug_format]\n+                          $($tokens)*);\n+    );\n+\n+    // The case where no derives are added, but encodable is overriden. Don't\n+    // derive serialization traits\n+    (@type         [$type:ident]\n+     @pub          [$($pub:tt)*]\n+     @max          [$max:expr]\n+     @debug_format [$debug_format:expr]\n+                   ENCODABLE = custom\n+                   $($tokens:tt)*) => (\n         newtype_index!(\n-            @derives    [$($derives),+]\n-            @type       [$type]\n-            @pub        [$($pub)*]\n-            @max        [$max]\n-            @debug_name [$debug_name]\n-                        $($tokens)*);\n+            @derives      []\n+            @type         [$type]\n+            @pub          [$($pub)*]\n+            @max          [$max]\n+            @debug_format [$debug_format]\n+                          $($tokens)*);\n     );\n \n-    // The case where no derives are added\n-    (@type       [$type:ident]\n-     @pub        [$($pub:tt)*]\n-     @max        [$max:expr]\n-     @debug_name [$debug_name:expr]\n-                 $($tokens:tt)*) => (\n+    // The case where no derives are added, add serialization derives by default\n+    (@type         [$type:ident]\n+     @pub          [$($pub:tt)*]\n+     @max          [$max:expr]\n+     @debug_format [$debug_format:expr]\n+                   $($tokens:tt)*) => (\n         newtype_index!(\n-            @derives    []\n-            @type       [$type]\n-            @pub        [$($pub)*]\n-            @max        [$max]\n-            @debug_name [$debug_name]\n-                        $($tokens)*);\n+            @derives      [RustcDecodable, RustcEncodable,]\n+            @type         [$type]\n+            @pub          [$($pub)*]\n+            @max          [$max]\n+            @debug_format [$debug_format]\n+                          $($tokens)*);\n     );\n \n     // Rewrite final without comma to one that includes comma\n-    (@derives    [$($derives:ident),*]\n-     @type       [$type:ident]\n-     @pub        [$($pub:tt)*]\n-     @max        [$max:expr]\n-     @debug_name [$debug_name:expr]\n-                 $name:ident = $constant:expr) => (\n+    (@derives      [$($derives:ident,)*]\n+     @type         [$type:ident]\n+     @pub          [$($pub:tt)*]\n+     @max          [$max:expr]\n+     @debug_format [$debug_format:expr]\n+                   $name:ident = $constant:expr) => (\n         newtype_index!(\n-            @derives    [$($derives),*]\n-            @type       [$type]\n-            @pub        [$($pub)*]\n-            @max        [$max]\n-            @debug_name [$debug_name]\n-                        $name = $constant,);\n+            @derives      [$($derives,)*]\n+            @type         [$type]\n+            @pub          [$($pub)*]\n+            @max          [$max]\n+            @debug_format [$debug_format]\n+                          $name = $constant,);\n     );\n \n     // Rewrite final const without comma to one that includes comma\n-    (@derives    [$($derives:ident),*]\n-     @type       [$type:ident]\n-     @pub        [$($pub:tt)*]\n-     @max        [$_max:expr]\n-     @debug_name [$debug_name:expr]\n-                 $(#[doc = $doc:expr])*\n-                 const $name:ident = $constant:expr) => (\n+    (@derives      [$($derives:ident,)*]\n+     @type         [$type:ident]\n+     @pub          [$($pub:tt)*]\n+     @max          [$_max:expr]\n+     @debug_format [$debug_format:expr]\n+                   $(#[doc = $doc:expr])*\n+                   const $name:ident = $constant:expr) => (\n         newtype_index!(\n-            @derives    [$($derives),*]\n-            @type       [$type]\n-            @pub        [$($pub)*]\n-            @max        [$max]\n-            @debug_name [$debug_name]\n-                        $(#[doc = $doc])* const $name = $constant,);\n+            @derives      [$($derives,)*]\n+            @type         [$type]\n+            @pub          [$($pub)*]\n+            @max          [$max]\n+            @debug_format [$debug_format]\n+                          $(#[doc = $doc])* const $name = $constant,);\n     );\n \n     // Replace existing default for max\n-    (@derives    [$($derives:ident),*]\n-     @type       [$type:ident]\n-     @pub        [$($pub:tt)*]\n-     @max        [$_max:expr]\n-     @debug_name [$debug_name:expr]\n-                 MAX = $max:expr,\n-                 $($tokens:tt)*) => (\n+    (@derives      [$($derives:ident,)*]\n+     @type         [$type:ident]\n+     @pub          [$($pub:tt)*]\n+     @max          [$_max:expr]\n+     @debug_format [$debug_format:expr]\n+                   MAX = $max:expr,\n+                   $($tokens:tt)*) => (\n         newtype_index!(\n-            @derives    [$($derives),*]\n-            @type       [$type]\n-            @pub        [$($pub)*]\n-            @max        [$max]\n-            @debug_name [$debug_name]\n-                        $($tokens)*);\n+            @derives      [$($derives,)*]\n+            @type         [$type]\n+            @pub          [$($pub)*]\n+            @max          [$max]\n+            @debug_format [$debug_format]\n+                          $($tokens)*);\n     );\n \n-    // Replace existing default for debug_name\n-    (@derives    [$($derives:ident),*]\n-     @type       [$type:ident]\n-     @pub        [$($pub:tt)*]\n-     @max        [$max:expr]\n-     @debug_name [$_debug_name:expr]\n-                 DEBUG_NAME = $debug_name:expr,\n-                 $($tokens:tt)*) => (\n+    // Replace existing default for debug_format\n+    (@derives      [$($derives:ident,)*]\n+     @type         [$type:ident]\n+     @pub          [$($pub:tt)*]\n+     @max          [$max:expr]\n+     @debug_format [$_debug_format:expr]\n+                   DEBUG_FORMAT = $debug_format:expr,\n+                   $($tokens:tt)*) => (\n         newtype_index!(\n-            @derives    [$($derives),*]\n-            @type       [$type]\n-            @pub        [$($pub)*]\n-            @max        [$max]\n-            @debug_name [$debug_name]\n-                        $($tokens)*);\n+            @derives      [$($derives,)*]\n+            @type         [$type]\n+            @pub          [$($pub)*]\n+            @max          [$max]\n+            @debug_format [$debug_format]\n+                          $($tokens)*);\n     );\n \n     // Assign a user-defined constant\n-    (@derives    [$($derives:ident),*]\n-     @type       [$type:ident]\n-     @pub        [$($pub:tt)*]\n-     @max        [$max:expr]\n-     @debug_name [$debug_name:expr]\n-                 $(#[doc = $doc:expr])*\n-                 const $name:ident = $constant:expr,\n-                 $($tokens:tt)*) => (\n+    (@derives      [$($derives:ident,)*]\n+     @type         [$type:ident]\n+     @pub          [$($pub:tt)*]\n+     @max          [$max:expr]\n+     @debug_format [$debug_format:expr]\n+                   $(#[doc = $doc:expr])*\n+                   const $name:ident = $constant:expr,\n+                   $($tokens:tt)*) => (\n         $(#[doc = $doc])*\n         pub const $name: $type = $type($constant);\n         newtype_index!(\n-            @derives    [$($derives),*]\n-            @type       [$type]\n-            @pub        [$($pub)*]\n-            @max        [$max]\n-            @debug_name [$debug_name]\n-                        $($tokens)*);\n+            @derives      [$($derives,)*]\n+            @type         [$type]\n+            @pub          [$($pub)*]\n+            @max          [$max]\n+            @debug_format [$debug_format]\n+                          $($tokens)*);\n     );\n }\n "}, {"sha": "77496c7b8f218b922e9991ea3cc540cf8034c311", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf1198eb1fea71f94d4f0c3c3e968eaf183dfa65/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf1198eb1fea71f94d4f0c3c3e968eaf183dfa65/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=bf1198eb1fea71f94d4f0c3c3e968eaf183dfa65", "patch": "@@ -312,7 +312,7 @@ struct CFG<'tcx> {\n     basic_blocks: IndexVec<BasicBlock, BasicBlockData<'tcx>>,\n }\n \n-newtype_index!(ScopeId { derive[RustcEncodable, RustcDecodable] });\n+newtype_index!(ScopeId);\n \n ///////////////////////////////////////////////////////////////////////////\n /// The `BlockAnd` \"monad\" packages up the new basic block along with a"}]}