{"sha": "987628e82b497efef5e0ff9d1865f16d282c54e9", "node_id": "C_kwDOAAsO6NoAKDk4NzYyOGU4MmI0OTdlZmVmNWUwZmY5ZDE4NjVmMTZkMjgyYzU0ZTk", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-03-30T19:42:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-30T19:42:18Z"}, "message": "Rollup merge of #109347 - cjgillot:issue-109305, r=WaffleLapkin\n\nSkip no_mangle if the item has no name.\n\nFixes https://github.com/rust-lang/rust/issues/109305", "tree": {"sha": "f35e48b10c87132c0e538adda2098a7fcc982031", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f35e48b10c87132c0e538adda2098a7fcc982031"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/987628e82b497efef5e0ff9d1865f16d282c54e9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkJeYaCRBK7hj4Ov3rIwAAHcsIACyADexDaKdU3qrkgxDRvHoq\nrlmBiFHVXV9uRrblrpzp2l6oOfh8YhNVesaDUUlWSl3D8yT9iPg27HB+OagONn1G\nX7KH6aREDZ09Du+uuB2oAdXEm0MTBxit7+FiOGpQTobGi0jIlXNnFosBcvmsPKuA\nWchoHNGwjT1saXVJA7Ml4ixgVwVd/Hchh2bdkQtD40Q5D0T4rNOAbjbfDO+RyyPe\nGQa4PmWPBCUcsmQWZwz6k30zpxAVa3L+SZkc0FeX0E0yJuarEWPIFx+tCwFLRHWe\ndZZoB0Yt7DFaVW82RZtWDhEDb5ZfZpJF+wR8Z6UFoiinJVWUG76aKQoC+37l7M4=\n=njGJ\n-----END PGP SIGNATURE-----\n", "payload": "tree f35e48b10c87132c0e538adda2098a7fcc982031\nparent 789ee5e4333a132cb58708ac5c341571c57d92ef\nparent 3102722ef4aa61b02f78f98403ceef588ed791ca\nauthor Michael Goulet <michael@errs.io> 1680205338 -0700\ncommitter GitHub <noreply@github.com> 1680205338 -0700\n\nRollup merge of #109347 - cjgillot:issue-109305, r=WaffleLapkin\n\nSkip no_mangle if the item has no name.\n\nFixes https://github.com/rust-lang/rust/issues/109305\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/987628e82b497efef5e0ff9d1865f16d282c54e9", "html_url": "https://github.com/rust-lang/rust/commit/987628e82b497efef5e0ff9d1865f16d282c54e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/987628e82b497efef5e0ff9d1865f16d282c54e9/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "789ee5e4333a132cb58708ac5c341571c57d92ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/789ee5e4333a132cb58708ac5c341571c57d92ef", "html_url": "https://github.com/rust-lang/rust/commit/789ee5e4333a132cb58708ac5c341571c57d92ef"}, {"sha": "3102722ef4aa61b02f78f98403ceef588ed791ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/3102722ef4aa61b02f78f98403ceef588ed791ca", "html_url": "https://github.com/rust-lang/rust/commit/3102722ef4aa61b02f78f98403ceef588ed791ca"}], "stats": {"total": 134, "additions": 65, "deletions": 69}, "files": [{"sha": "8542bab689d6d04a7286384b75dfd00c4dbf1a60", "filename": "compiler/rustc_codegen_ssa/src/codegen_attrs.rs", "status": "modified", "additions": 46, "deletions": 69, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/987628e82b497efef5e0ff9d1865f16d282c54e9/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcodegen_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/987628e82b497efef5e0ff9d1865f16d282c54e9/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcodegen_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcodegen_attrs.rs?ref=987628e82b497efef5e0ff9d1865f16d282c54e9", "patch": "@@ -89,44 +89,39 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, did: LocalDefId) -> CodegenFnAttrs {\n         };\n \n         match name {\n-            sym::cold => {\n-                codegen_fn_attrs.flags |= CodegenFnAttrFlags::COLD;\n-            }\n-            sym::rustc_allocator => {\n-                codegen_fn_attrs.flags |= CodegenFnAttrFlags::ALLOCATOR;\n-            }\n+            sym::cold => codegen_fn_attrs.flags |= CodegenFnAttrFlags::COLD,\n+            sym::rustc_allocator => codegen_fn_attrs.flags |= CodegenFnAttrFlags::ALLOCATOR,\n             sym::ffi_returns_twice => {\n-                codegen_fn_attrs.flags |= CodegenFnAttrFlags::FFI_RETURNS_TWICE;\n-            }\n-            sym::ffi_pure => {\n-                codegen_fn_attrs.flags |= CodegenFnAttrFlags::FFI_PURE;\n-            }\n-            sym::ffi_const => {\n-                codegen_fn_attrs.flags |= CodegenFnAttrFlags::FFI_CONST;\n-            }\n-            sym::rustc_nounwind => {\n-                codegen_fn_attrs.flags |= CodegenFnAttrFlags::NEVER_UNWIND;\n-            }\n-            sym::rustc_reallocator => {\n-                codegen_fn_attrs.flags |= CodegenFnAttrFlags::REALLOCATOR;\n-            }\n-            sym::rustc_deallocator => {\n-                codegen_fn_attrs.flags |= CodegenFnAttrFlags::DEALLOCATOR;\n+                codegen_fn_attrs.flags |= CodegenFnAttrFlags::FFI_RETURNS_TWICE\n             }\n+            sym::ffi_pure => codegen_fn_attrs.flags |= CodegenFnAttrFlags::FFI_PURE,\n+            sym::ffi_const => codegen_fn_attrs.flags |= CodegenFnAttrFlags::FFI_CONST,\n+            sym::rustc_nounwind => codegen_fn_attrs.flags |= CodegenFnAttrFlags::NEVER_UNWIND,\n+            sym::rustc_reallocator => codegen_fn_attrs.flags |= CodegenFnAttrFlags::REALLOCATOR,\n+            sym::rustc_deallocator => codegen_fn_attrs.flags |= CodegenFnAttrFlags::DEALLOCATOR,\n             sym::rustc_allocator_zeroed => {\n-                codegen_fn_attrs.flags |= CodegenFnAttrFlags::ALLOCATOR_ZEROED;\n-            }\n-            sym::naked => {\n-                codegen_fn_attrs.flags |= CodegenFnAttrFlags::NAKED;\n+                codegen_fn_attrs.flags |= CodegenFnAttrFlags::ALLOCATOR_ZEROED\n             }\n+            sym::naked => codegen_fn_attrs.flags |= CodegenFnAttrFlags::NAKED,\n             sym::no_mangle => {\n-                codegen_fn_attrs.flags |= CodegenFnAttrFlags::NO_MANGLE;\n-            }\n-            sym::no_coverage => {\n-                codegen_fn_attrs.flags |= CodegenFnAttrFlags::NO_COVERAGE;\n+                if tcx.opt_item_name(did.to_def_id()).is_some() {\n+                    codegen_fn_attrs.flags |= CodegenFnAttrFlags::NO_MANGLE\n+                } else {\n+                    tcx.sess\n+                        .struct_span_err(\n+                            attr.span,\n+                            format!(\n+                                \"`#[no_mangle]` cannot be used on {} {} as it has no name\",\n+                                tcx.def_descr_article(did.to_def_id()),\n+                                tcx.def_descr(did.to_def_id()),\n+                            ),\n+                        )\n+                        .emit();\n+                }\n             }\n+            sym::no_coverage => codegen_fn_attrs.flags |= CodegenFnAttrFlags::NO_COVERAGE,\n             sym::rustc_std_internal_symbol => {\n-                codegen_fn_attrs.flags |= CodegenFnAttrFlags::RUSTC_STD_INTERNAL_SYMBOL;\n+                codegen_fn_attrs.flags |= CodegenFnAttrFlags::RUSTC_STD_INTERNAL_SYMBOL\n             }\n             sym::used => {\n                 let inner = attr.meta_item_list();\n@@ -207,11 +202,9 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, did: LocalDefId) -> CodegenFnAttrs {\n                     struct_span_err!(tcx.sess, attr.span, E0775, \"`#[cmse_nonsecure_entry]` is only valid for targets with the TrustZone-M extension\")\n                     .emit();\n                 }\n-                codegen_fn_attrs.flags |= CodegenFnAttrFlags::CMSE_NONSECURE_ENTRY;\n-            }\n-            sym::thread_local => {\n-                codegen_fn_attrs.flags |= CodegenFnAttrFlags::THREAD_LOCAL;\n+                codegen_fn_attrs.flags |= CodegenFnAttrFlags::CMSE_NONSECURE_ENTRY\n             }\n+            sym::thread_local => codegen_fn_attrs.flags |= CodegenFnAttrFlags::THREAD_LOCAL,\n             sym::track_caller => {\n                 if !tcx.is_closure(did.to_def_id())\n                     && let Some(fn_sig) = fn_sig()\n@@ -229,7 +222,7 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, did: LocalDefId) -> CodegenFnAttrs {\n                     )\n                     .emit();\n                 }\n-                codegen_fn_attrs.flags |= CodegenFnAttrFlags::TRACK_CALLER;\n+                codegen_fn_attrs.flags |= CodegenFnAttrFlags::TRACK_CALLER\n             }\n             sym::export_name => {\n                 if let Some(s) = attr.value_str() {\n@@ -306,20 +299,14 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, did: LocalDefId) -> CodegenFnAttrs {\n             sym::link_section => {\n                 if let Some(val) = attr.value_str() {\n                     if val.as_str().bytes().any(|b| b == 0) {\n-                        let msg = format!(\n-                            \"illegal null byte in link_section \\\n-                             value: `{}`\",\n-                            &val\n-                        );\n+                        let msg = format!(\"illegal null byte in link_section value: `{}`\", &val);\n                         tcx.sess.span_err(attr.span, &msg);\n                     } else {\n                         codegen_fn_attrs.link_section = Some(val);\n                     }\n                 }\n             }\n-            sym::link_name => {\n-                codegen_fn_attrs.link_name = attr.value_str();\n-            }\n+            sym::link_name => codegen_fn_attrs.link_name = attr.value_str(),\n             sym::link_ordinal => {\n                 link_ordinal_span = Some(attr.span);\n                 if let ordinal @ Some(_) = check_link_ordinal(tcx, attr) {\n@@ -330,37 +317,27 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, did: LocalDefId) -> CodegenFnAttrs {\n                 no_sanitize_span = Some(attr.span);\n                 if let Some(list) = attr.meta_item_list() {\n                     for item in list.iter() {\n-                        match item.ident().map(|ident| ident.name) {\n-                            Some(sym::address) => {\n+                        match item.name_or_empty() {\n+                            sym::address => {\n                                 codegen_fn_attrs.no_sanitize |=\n-                                    SanitizerSet::ADDRESS | SanitizerSet::KERNELADDRESS;\n-                            }\n-                            Some(sym::cfi) => {\n-                                codegen_fn_attrs.no_sanitize |= SanitizerSet::CFI;\n+                                    SanitizerSet::ADDRESS | SanitizerSet::KERNELADDRESS\n                             }\n-                            Some(sym::kcfi) => {\n-                                codegen_fn_attrs.no_sanitize |= SanitizerSet::KCFI;\n+                            sym::cfi => codegen_fn_attrs.no_sanitize |= SanitizerSet::CFI,\n+                            sym::kcfi => codegen_fn_attrs.no_sanitize |= SanitizerSet::KCFI,\n+                            sym::memory => codegen_fn_attrs.no_sanitize |= SanitizerSet::MEMORY,\n+                            sym::memtag => codegen_fn_attrs.no_sanitize |= SanitizerSet::MEMTAG,\n+                            sym::shadow_call_stack => {\n+                                codegen_fn_attrs.no_sanitize |= SanitizerSet::SHADOWCALLSTACK\n                             }\n-                            Some(sym::memory) => {\n-                                codegen_fn_attrs.no_sanitize |= SanitizerSet::MEMORY;\n-                            }\n-                            Some(sym::memtag) => {\n-                                codegen_fn_attrs.no_sanitize |= SanitizerSet::MEMTAG;\n-                            }\n-                            Some(sym::shadow_call_stack) => {\n-                                codegen_fn_attrs.no_sanitize |= SanitizerSet::SHADOWCALLSTACK;\n-                            }\n-                            Some(sym::thread) => {\n-                                codegen_fn_attrs.no_sanitize |= SanitizerSet::THREAD;\n-                            }\n-                            Some(sym::hwaddress) => {\n-                                codegen_fn_attrs.no_sanitize |= SanitizerSet::HWADDRESS;\n+                            sym::thread => codegen_fn_attrs.no_sanitize |= SanitizerSet::THREAD,\n+                            sym::hwaddress => {\n+                                codegen_fn_attrs.no_sanitize |= SanitizerSet::HWADDRESS\n                             }\n                             _ => {\n                                 tcx.sess\n-                                .struct_span_err(item.span(), \"invalid argument for `no_sanitize`\")\n-                                .note(\"expected one of: `address`, `cfi`, `hwaddress`, `kcfi`, `memory`, `memtag`, `shadow-call-stack`, or `thread`\")\n-                                .emit();\n+                                    .struct_span_err(item.span(), \"invalid argument for `no_sanitize`\")\n+                                    .note(\"expected one of: `address`, `cfi`, `hwaddress`, `kcfi`, `memory`, `memtag`, `shadow-call-stack`, or `thread`\")\n+                                    .emit();\n                             }\n                         }\n                     }"}, {"sha": "c76baa27f38a0f73eeb2140d5c653bd0d2ef8822", "filename": "tests/ui/attributes/no-mangle-closure.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/987628e82b497efef5e0ff9d1865f16d282c54e9/tests%2Fui%2Fattributes%2Fno-mangle-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/987628e82b497efef5e0ff9d1865f16d282c54e9/tests%2Fui%2Fattributes%2Fno-mangle-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fattributes%2Fno-mangle-closure.rs?ref=987628e82b497efef5e0ff9d1865f16d282c54e9", "patch": "@@ -0,0 +1,11 @@\n+// Check that we do not ICE when `no_mangle` is applied to something that has no name.\n+\n+#![crate_type = \"lib\"]\n+#![feature(stmt_expr_attributes)]\n+\n+pub struct S([usize; 8]);\n+\n+pub fn outer_function(x: S, y: S) -> usize {\n+    (#[no_mangle] || y.0[0])()\n+    //~^ ERROR `#[no_mangle]` cannot be used on a closure as it has no name\n+}"}, {"sha": "949eb70510e4d2bc3bc8425c15e21457b276d898", "filename": "tests/ui/attributes/no-mangle-closure.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/987628e82b497efef5e0ff9d1865f16d282c54e9/tests%2Fui%2Fattributes%2Fno-mangle-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/987628e82b497efef5e0ff9d1865f16d282c54e9/tests%2Fui%2Fattributes%2Fno-mangle-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fattributes%2Fno-mangle-closure.stderr?ref=987628e82b497efef5e0ff9d1865f16d282c54e9", "patch": "@@ -0,0 +1,8 @@\n+error: `#[no_mangle]` cannot be used on a closure as it has no name\n+  --> $DIR/no-mangle-closure.rs:9:6\n+   |\n+LL |     (#[no_mangle] || y.0[0])()\n+   |      ^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}]}