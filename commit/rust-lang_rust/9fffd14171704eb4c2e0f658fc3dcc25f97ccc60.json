{"sha": "9fffd14171704eb4c2e0f658fc3dcc25f97ccc60", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmZmZkMTQxNzE3MDRlYjRjMmUwZjY1OGZjM2RjYzI1Zjk3Y2NjNjA=", "commit": {"author": {"name": "Alex Burka", "email": "alex@alexburka.com", "date": "2017-02-09T20:37:59Z"}, "committer": {"name": "Alex Burka", "email": "alex@alexburka.com", "date": "2017-02-09T22:45:42Z"}, "message": "change span_notes to notes in E0368/E0369", "tree": {"sha": "3bf2b357d2e9776d043b563c696e0a549d3b6ae7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3bf2b357d2e9776d043b563c696e0a549d3b6ae7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9fffd14171704eb4c2e0f658fc3dcc25f97ccc60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9fffd14171704eb4c2e0f658fc3dcc25f97ccc60", "html_url": "https://github.com/rust-lang/rust/commit/9fffd14171704eb4c2e0f658fc3dcc25f97ccc60", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9fffd14171704eb4c2e0f658fc3dcc25f97ccc60/comments", "author": {"login": "durka", "id": 47007, "node_id": "MDQ6VXNlcjQ3MDA3", "avatar_url": "https://avatars.githubusercontent.com/u/47007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/durka", "html_url": "https://github.com/durka", "followers_url": "https://api.github.com/users/durka/followers", "following_url": "https://api.github.com/users/durka/following{/other_user}", "gists_url": "https://api.github.com/users/durka/gists{/gist_id}", "starred_url": "https://api.github.com/users/durka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/durka/subscriptions", "organizations_url": "https://api.github.com/users/durka/orgs", "repos_url": "https://api.github.com/users/durka/repos", "events_url": "https://api.github.com/users/durka/events{/privacy}", "received_events_url": "https://api.github.com/users/durka/received_events", "type": "User", "site_admin": false}, "committer": {"login": "durka", "id": 47007, "node_id": "MDQ6VXNlcjQ3MDA3", "avatar_url": "https://avatars.githubusercontent.com/u/47007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/durka", "html_url": "https://github.com/durka", "followers_url": "https://api.github.com/users/durka/followers", "following_url": "https://api.github.com/users/durka/following{/other_user}", "gists_url": "https://api.github.com/users/durka/gists{/gist_id}", "starred_url": "https://api.github.com/users/durka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/durka/subscriptions", "organizations_url": "https://api.github.com/users/durka/orgs", "repos_url": "https://api.github.com/users/durka/repos", "events_url": "https://api.github.com/users/durka/events{/privacy}", "received_events_url": "https://api.github.com/users/durka/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7fc53b8f0595d9b5be6a3b64d29d3cfed7c7199", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7fc53b8f0595d9b5be6a3b64d29d3cfed7c7199", "html_url": "https://github.com/rust-lang/rust/commit/e7fc53b8f0595d9b5be6a3b64d29d3cfed7c7199"}], "stats": {"total": 65, "additions": 13, "deletions": 52}, "files": [{"sha": "f492ab12e3f991f5fac03104fd9195800c295b20", "filename": "src/librustc_typeck/check/op.rs", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/9fffd14171704eb4c2e0f658fc3dcc25f97ccc60/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fffd14171704eb4c2e0f658fc3dcc25f97ccc60/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fop.rs?ref=9fffd14171704eb4c2e0f658fc3dcc25f97ccc60", "patch": "@@ -212,11 +212,10 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                 self.lookup_op_method(expr, ty_mut.ty, vec![rhs_ty_var],\n                                     Symbol::intern(name), trait_def_id,\n                                     lhs_expr).is_ok() {\n-                                err.span_note(\n-                                    lhs_expr.span,\n+                                err.note(\n                                     &format!(\n-                                        \"this is a reference of type that `{}` can be applied to, \\\n-                                        you need to dereference this variable once for this \\\n+                                        \"this is a reference to a type that `{}` can be applied \\\n+                                        to; you need to dereference this variable once for this \\\n                                         operation to work\",\n                                     op.node.as_str()));\n                             }\n@@ -244,11 +243,11 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                                          rhs_expr, rhs_ty_var, &mut err) {\n                                 // This has nothing here because it means we did string\n                                 // concatenation (e.g. \"Hello \" + \"World!\"). This means\n-                                // we don't want the span in the else clause to be emmitted\n+                                // we don't want the note in the else clause to be emitted\n                             } else {\n-                                span_note!(&mut err, lhs_expr.span,\n-                                            \"an implementation of `{}` might be missing for `{}`\",\n-                                            missing_trait, lhs_ty);\n+                                err.note(\n+                                    &format!(\"an implementation of `{}` might be missing for `{}`\",\n+                                             missing_trait, lhs_ty));\n                             }\n                         }\n                         err.emit();\n@@ -271,16 +270,14 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                           rhs_expr: &'gcx hir::Expr,\n                           rhs_ty_var: Ty<'tcx>,\n                           mut err: &mut errors::DiagnosticBuilder) -> bool {\n-        // If this function returns false it means we use it to make sure we print\n-        // out the an \"implementation of span_note!\" above where this function is\n-        // called and if true we don't.\n+        // If this function returns true it means a note was printed, so we don't need\n+        // to print the normal \"implementation of `std::ops::Add` might be missing\" note\n         let mut is_string_addition = false;\n         let rhs_ty = self.check_expr_coercable_to_type(rhs_expr, rhs_ty_var);\n         if let TyRef(_, l_ty) = lhs_ty.sty {\n             if let TyRef(_, r_ty) = rhs_ty.sty {\n                 if l_ty.ty.sty == TyStr && r_ty.ty.sty == TyStr {\n-                    span_note!(&mut err, lhs_expr.span,\n-                            \"`+` can't be used to concatenate two `&str` strings\");\n+                    err.note(\"`+` can't be used to concatenate two `&str` strings\");\n                     let codemap = self.tcx.sess.codemap();\n                     let suggestion =\n                         match (codemap.span_to_snippet(lhs_expr.span),"}, {"sha": "23ca026f541dd0ceeef51add2857946239caba8d", "filename": "src/test/compile-fail/binary-op-on-double-ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fffd14171704eb4c2e0f658fc3dcc25f97ccc60/src%2Ftest%2Fcompile-fail%2Fbinary-op-on-double-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fffd14171704eb4c2e0f658fc3dcc25f97ccc60/src%2Ftest%2Fcompile-fail%2Fbinary-op-on-double-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbinary-op-on-double-ref.rs?ref=9fffd14171704eb4c2e0f658fc3dcc25f97ccc60", "patch": "@@ -13,7 +13,7 @@ fn main() {\n     let vr = v.iter().filter(|x| {\n         x % 2 == 0\n         //~^ ERROR binary operation `%` cannot be applied to type `&&{integer}`\n-        //~| NOTE this is a reference of type that `%` can be applied to\n+        //~| NOTE this is a reference to a type that `%` can be applied to\n         //~| NOTE an implementation of `std::ops::Rem` might be missing for `&&{integer}`\n     });\n     println!(\"{:?}\", vr);"}, {"sha": "ee1a32c4c16cf775cb7b897aea2ee79f74780a7e", "filename": "src/test/parse-fail/issue-39018.stderr", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e7fc53b8f0595d9b5be6a3b64d29d3cfed7c7199/src%2Ftest%2Fparse-fail%2Fissue-39018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e7fc53b8f0595d9b5be6a3b64d29d3cfed7c7199/src%2Ftest%2Fparse-fail%2Fissue-39018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fissue-39018.stderr?ref=e7fc53b8f0595d9b5be6a3b64d29d3cfed7c7199", "patch": "@@ -1,28 +0,0 @@\n-error[E0369]: binary operation `+` cannot be applied to type `&'static str`\n- --> src/test/ui/span/issue-39018.rs:2:13\n-  |\n-2 |     let x = \"Hello \" + \"World!\";\n-  |             ^^^^^^^^\n-  |\n-note: `+` can't be used to concatenate two `&str` strings\n- --> src/test/ui/span/issue-39018.rs:2:13\n-  |\n-2 |     let x = \"Hello \" + \"World!\";\n-  |             ^^^^^^^^\n-help: to_owned() can be used to create an owned `String` from a string reference. This allows concatenation since the `String` is owned.\n-  |     let x = \"Hello \".to_owned() + \"World!\";\n-\n-error[E0369]: binary operation `+` cannot be applied to type `World`\n- --> src/test/ui/span/issue-39018.rs:7:13\n-  |\n-7 |     let y = World::Hello + World::Goodbye;\n-  |             ^^^^^^^^^^^^\n-  |\n-note: an implementation of `std::ops::Add` might be missing for `World`\n- --> src/test/ui/span/issue-39018.rs:7:13\n-  |\n-7 |     let y = World::Hello + World::Goodbye;\n-  |             ^^^^^^^^^^^^\n-\n-error: aborting due to 2 previous errors\n-"}, {"sha": "9d6d4570c6ba6f2a8830f1178f79fdd838c84db0", "filename": "src/test/ui/span/issue-39018.stderr", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9fffd14171704eb4c2e0f658fc3dcc25f97ccc60/src%2Ftest%2Fui%2Fspan%2Fissue-39018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fffd14171704eb4c2e0f658fc3dcc25f97ccc60/src%2Ftest%2Fui%2Fspan%2Fissue-39018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-39018.stderr?ref=9fffd14171704eb4c2e0f658fc3dcc25f97ccc60", "patch": "@@ -4,11 +4,7 @@ error[E0369]: binary operation `+` cannot be applied to type `&'static str`\n 12 |     let x = \"Hello \" + \"World!\";\n    |             ^^^^^^^^\n    |\n-note: `+` can't be used to concatenate two `&str` strings\n-  --> $DIR/issue-39018.rs:12:13\n-   |\n-12 |     let x = \"Hello \" + \"World!\";\n-   |             ^^^^^^^^\n+   = note: `+` can't be used to concatenate two `&str` strings\n help: to_owned() can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left.\n    |     let x = \"Hello \".to_owned() + \"World!\";\n \n@@ -18,11 +14,7 @@ error[E0369]: binary operation `+` cannot be applied to type `World`\n 17 |     let y = World::Hello + World::Goodbye;\n    |             ^^^^^^^^^^^^\n    |\n-note: an implementation of `std::ops::Add` might be missing for `World`\n-  --> $DIR/issue-39018.rs:17:13\n-   |\n-17 |     let y = World::Hello + World::Goodbye;\n-   |             ^^^^^^^^^^^^\n+   = note: an implementation of `std::ops::Add` might be missing for `World`\n \n error: aborting due to 2 previous errors\n "}]}