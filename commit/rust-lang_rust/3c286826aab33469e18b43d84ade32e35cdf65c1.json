{"sha": "3c286826aab33469e18b43d84ade32e35cdf65c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjMjg2ODI2YWFiMzM0NjllMThiNDNkODRhZGUzMmUzNWNkZjY1YzE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-19T16:31:39Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-09-19T16:31:39Z"}, "message": "Rollup merge of #64592 - Aaron1011:feature/unreachable-span, r=Centril\n\nPoint at original span when emitting unreachable lint\n\nFixes #64590\n\nWhen we emit an 'unreachable' lint, we now add a note pointing at the\nexpression that actually causes the code to be unreachable (e.g.\n`return`, `break`, `panic`).\n\nThis is especially useful when macros are involved, since a diverging\nexpression might be hidden inside of a macro invocation.", "tree": {"sha": "bd00ad4e270ef387ed8069c2369b29b2550654ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd00ad4e270ef387ed8069c2369b29b2550654ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c286826aab33469e18b43d84ade32e35cdf65c1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdg61rCRBK7hj4Ov3rIwAAdHIIAFodNx//c8ICsx8QOA8nW4dv\nz00c0DT3PVUmE8LLxYhnFNXrejY8W1if5fhy+k4wIdyRUnl2m7f/ZkQP1SinoKz1\nbzBYPWAwVQn4wZMFab41hzm/NXF02yRJdmkIIq5EO2rOtDEcfFot5l+i7Sa3h0MK\n1rgt6dpxmXuCjpIQrZ7eMxVXuZy2n6I5HsqtjnEycCHK2fTlBtuAXEWO8xucl4hX\nHTgdUIo2VkLyNpoiItYyToXJdtArkUhIB23PxhSRvxZZZAY9qaWmdImwxYennP2N\nwt5eTYKoGtugkJYjfCIUGtYYWpPUMvOF8AL48NpH1qnjAIRO6MqGZ2lnwI7WZ1w=\n=VZ7E\n-----END PGP SIGNATURE-----\n", "payload": "tree bd00ad4e270ef387ed8069c2369b29b2550654ea\nparent bda52e558e029f64e812fea8a0a7844c8888c5a0\nparent d67528ff7dbbe226fa583b9585cee2138533770e\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1568910699 +0200\ncommitter GitHub <noreply@github.com> 1568910699 +0200\n\nRollup merge of #64592 - Aaron1011:feature/unreachable-span, r=Centril\n\nPoint at original span when emitting unreachable lint\n\nFixes #64590\n\nWhen we emit an 'unreachable' lint, we now add a note pointing at the\nexpression that actually causes the code to be unreachable (e.g.\n`return`, `break`, `panic`).\n\nThis is especially useful when macros are involved, since a diverging\nexpression might be hidden inside of a macro invocation.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c286826aab33469e18b43d84ade32e35cdf65c1", "html_url": "https://github.com/rust-lang/rust/commit/3c286826aab33469e18b43d84ade32e35cdf65c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c286826aab33469e18b43d84ade32e35cdf65c1/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bda52e558e029f64e812fea8a0a7844c8888c5a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/bda52e558e029f64e812fea8a0a7844c8888c5a0", "html_url": "https://github.com/rust-lang/rust/commit/bda52e558e029f64e812fea8a0a7844c8888c5a0"}, {"sha": "d67528ff7dbbe226fa583b9585cee2138533770e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d67528ff7dbbe226fa583b9585cee2138533770e", "html_url": "https://github.com/rust-lang/rust/commit/d67528ff7dbbe226fa583b9585cee2138533770e"}], "stats": {"total": 386, "additions": 372, "deletions": 14}, "files": [{"sha": "50fd72f06131904e927b65f83dfe0801b39ba703", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3c286826aab33469e18b43d84ade32e35cdf65c1/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c286826aab33469e18b43d84ade32e35cdf65c1/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=3c286826aab33469e18b43d84ade32e35cdf65c1", "patch": "@@ -43,7 +43,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         // If there are no arms, that is a diverging match; a special case.\n         if arms.is_empty() {\n-            self.diverges.set(self.diverges.get() | Diverges::Always);\n+            self.diverges.set(self.diverges.get() | Diverges::always(expr.span));\n             return tcx.types.never;\n         }\n \n@@ -69,7 +69,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             // warnings).\n             match all_pats_diverge {\n                 Diverges::Maybe => Diverges::Maybe,\n-                Diverges::Always | Diverges::WarnedAlways => Diverges::WarnedAlways,\n+                Diverges::Always { .. } | Diverges::WarnedAlways => Diverges::WarnedAlways,\n             }\n         }).collect();\n \n@@ -167,6 +167,21 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             prior_arm_ty = Some(arm_ty);\n         }\n \n+        // If all of the arms in the `match` diverge,\n+        // and we're dealing with an actual `match` block\n+        // (as opposed to a `match` desugared from something else'),\n+        // we can emit a better note. Rather than pointing\n+        // at a diverging expression in an arbitrary arm,\n+        // we can point at the entire `match` expression\n+        if let (Diverges::Always { .. }, hir::MatchSource::Normal) = (all_arms_diverge, match_src) {\n+            all_arms_diverge = Diverges::Always {\n+                span: expr.span,\n+                custom_note: Some(\n+                    \"any code following this `match` expression is unreachable, as all arms diverge\"\n+                )\n+            };\n+        }\n+\n         // We won't diverge unless the discriminant or all arms diverge.\n         self.diverges.set(discrim_diverges | all_arms_diverge);\n \n@@ -176,7 +191,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// When the previously checked expression (the scrutinee) diverges,\n     /// warn the user about the match arms being unreachable.\n     fn warn_arms_when_scrutinee_diverges(&self, arms: &'tcx [hir::Arm], source: hir::MatchSource) {\n-        if self.diverges.get().always() {\n+        if self.diverges.get().is_always() {\n             use hir::MatchSource::*;\n             let msg = match source {\n                 IfDesugar { .. } | IfLetDesugar { .. } => \"block in `if` expression\","}, {"sha": "049f2eb16bb00d8b96911f51b3ff9b9f7a07b42e", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c286826aab33469e18b43d84ade32e35cdf65c1/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c286826aab33469e18b43d84ade32e35cdf65c1/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=3c286826aab33469e18b43d84ade32e35cdf65c1", "patch": "@@ -170,7 +170,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         // Any expression that produces a value of type `!` must have diverged\n         if ty.is_never() {\n-            self.diverges.set(self.diverges.get() | Diverges::Always);\n+            self.diverges.set(self.diverges.get() | Diverges::always(expr.span));\n         }\n \n         // Record the type, which applies it effects."}, {"sha": "1d68d79db88568048cb2fc131eb5910d316b3fe1", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 45, "deletions": 10, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/3c286826aab33469e18b43d84ade32e35cdf65c1/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c286826aab33469e18b43d84ade32e35cdf65c1/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=3c286826aab33469e18b43d84ade32e35cdf65c1", "patch": "@@ -450,7 +450,20 @@ pub enum Diverges {\n \n     /// Definitely known to diverge and therefore\n     /// not reach the next sibling or its parent.\n-    Always,\n+    Always {\n+        /// The `Span` points to the expression\n+        /// that caused us to diverge\n+        /// (e.g. `return`, `break`, etc).\n+        span: Span,\n+        /// In some cases (e.g. a `match` expression\n+        /// where all arms diverge), we may be\n+        /// able to provide a more informative\n+        /// message to the user.\n+        /// If this is `None`, a default messsage\n+        /// will be generated, which is suitable\n+        /// for most cases.\n+        custom_note: Option<&'static str>\n+    },\n \n     /// Same as `Always` but with a reachability\n     /// warning already emitted.\n@@ -486,8 +499,22 @@ impl ops::BitOrAssign for Diverges {\n }\n \n impl Diverges {\n-    fn always(self) -> bool {\n-        self >= Diverges::Always\n+    /// Creates a `Diverges::Always` with the provided `span` and the default note message.\n+    fn always(span: Span) -> Diverges {\n+        Diverges::Always {\n+            span,\n+            custom_note: None\n+        }\n+    }\n+\n+    fn is_always(self) -> bool {\n+        // Enum comparison ignores the\n+        // contents of fields, so we just\n+        // fill them in with garbage here.\n+        self >= Diverges::Always {\n+            span: DUMMY_SP,\n+            custom_note: None\n+        }\n     }\n }\n \n@@ -2307,17 +2334,25 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// Produces warning on the given node, if the current point in the\n     /// function is unreachable, and there hasn't been another warning.\n     fn warn_if_unreachable(&self, id: hir::HirId, span: Span, kind: &str) {\n-        if self.diverges.get() == Diverges::Always &&\n+        // FIXME: Combine these two 'if' expressions into one once\n+        // let chains are implemented\n+        if let Diverges::Always { span: orig_span, custom_note } = self.diverges.get() {\n             // If span arose from a desugaring of `if` or `while`, then it is the condition itself,\n             // which diverges, that we are about to lint on. This gives suboptimal diagnostics.\n             // Instead, stop here so that the `if`- or `while`-expression's block is linted instead.\n-            !span.is_desugaring(DesugaringKind::CondTemporary) {\n-            self.diverges.set(Diverges::WarnedAlways);\n+            if !span.is_desugaring(DesugaringKind::CondTemporary) {\n+                self.diverges.set(Diverges::WarnedAlways);\n \n-            debug!(\"warn_if_unreachable: id={:?} span={:?} kind={}\", id, span, kind);\n+                debug!(\"warn_if_unreachable: id={:?} span={:?} kind={}\", id, span, kind);\n \n-            let msg = format!(\"unreachable {}\", kind);\n-            self.tcx().lint_hir(lint::builtin::UNREACHABLE_CODE, id, span, &msg);\n+                let msg = format!(\"unreachable {}\", kind);\n+                self.tcx().struct_span_lint_hir(lint::builtin::UNREACHABLE_CODE, id, span, &msg)\n+                    .span_note(\n+                        orig_span,\n+                        custom_note.unwrap_or(\"any code following this expression is unreachable\")\n+                    )\n+                    .emit();\n+            }\n         }\n     }\n \n@@ -3825,7 +3860,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 //\n                 // #41425 -- label the implicit `()` as being the\n                 // \"found type\" here, rather than the \"expected type\".\n-                if !self.diverges.get().always() {\n+                if !self.diverges.get().is_always() {\n                     // #50009 -- Do not point at the entire fn block span, point at the return type\n                     // span, as it is the cause of the requirement, and\n                     // `consider_hint_about_removing_semicolon` will point at the last expression"}, {"sha": "0ce31ea40ddbbf21330ae1b92d9e97fce9c2f0e2", "filename": "src/test/ui/dead-code-ret.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3c286826aab33469e18b43d84ade32e35cdf65c1/src%2Ftest%2Fui%2Fdead-code-ret.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c286826aab33469e18b43d84ade32e35cdf65c1/src%2Ftest%2Fui%2Fdead-code-ret.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdead-code-ret.stderr?ref=3c286826aab33469e18b43d84ade32e35cdf65c1", "patch": "@@ -9,6 +9,11 @@ note: lint level defined here\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n+note: any code following this expression is unreachable\n+  --> $DIR/dead-code-ret.rs:6:5\n+   |\n+LL |     return;\n+   |     ^^^^^^\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "2df8f22944ee8d37d2a6cbe861651a7222b3a7fa", "filename": "src/test/ui/if-ret.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3c286826aab33469e18b43d84ade32e35cdf65c1/src%2Ftest%2Fui%2Fif-ret.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c286826aab33469e18b43d84ade32e35cdf65c1/src%2Ftest%2Fui%2Fif-ret.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif-ret.stderr?ref=3c286826aab33469e18b43d84ade32e35cdf65c1", "patch": "@@ -5,4 +5,9 @@ LL | fn foo() { if (return) { } }\n    |                        ^^^\n    |\n    = note: `#[warn(unreachable_code)]` on by default\n+note: any code following this expression is unreachable\n+  --> $DIR/if-ret.rs:6:15\n+   |\n+LL | fn foo() { if (return) { } }\n+   |               ^^^^^^^^\n "}, {"sha": "623f098d0b337a9c56485426709a1a7f46bd6fef", "filename": "src/test/ui/issues/issue-2150.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3c286826aab33469e18b43d84ade32e35cdf65c1/src%2Ftest%2Fui%2Fissues%2Fissue-2150.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c286826aab33469e18b43d84ade32e35cdf65c1/src%2Ftest%2Fui%2Fissues%2Fissue-2150.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-2150.stderr?ref=3c286826aab33469e18b43d84ade32e35cdf65c1", "patch": "@@ -9,6 +9,12 @@ note: lint level defined here\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n+note: any code following this expression is unreachable\n+  --> $DIR/issue-2150.rs:7:5\n+   |\n+LL |     panic!();\n+   |     ^^^^^^^^^\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "d1b23672dc7f4704588e7a2f8a66ceecf2c061f7", "filename": "src/test/ui/issues/issue-7246.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3c286826aab33469e18b43d84ade32e35cdf65c1/src%2Ftest%2Fui%2Fissues%2Fissue-7246.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c286826aab33469e18b43d84ade32e35cdf65c1/src%2Ftest%2Fui%2Fissues%2Fissue-7246.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-7246.stderr?ref=3c286826aab33469e18b43d84ade32e35cdf65c1", "patch": "@@ -9,6 +9,11 @@ note: lint level defined here\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n+note: any code following this expression is unreachable\n+  --> $DIR/issue-7246.rs:6:5\n+   |\n+LL |     return;\n+   |     ^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "e6c76c24c9110224512550fbd1329ea2eea5fcda", "filename": "src/test/ui/lint/lint-attr-non-item-node.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3c286826aab33469e18b43d84ade32e35cdf65c1/src%2Ftest%2Fui%2Flint%2Flint-attr-non-item-node.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c286826aab33469e18b43d84ade32e35cdf65c1/src%2Ftest%2Fui%2Flint%2Flint-attr-non-item-node.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-attr-non-item-node.stderr?ref=3c286826aab33469e18b43d84ade32e35cdf65c1", "patch": "@@ -9,6 +9,11 @@ note: lint level defined here\n    |\n LL |     #[deny(unreachable_code)]\n    |            ^^^^^^^^^^^^^^^^\n+note: any code following this expression is unreachable\n+  --> $DIR/lint-attr-non-item-node.rs:6:9\n+   |\n+LL |         break;\n+   |         ^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "84e9b5bab99ff0882d9484c8628de52075e9330a", "filename": "src/test/ui/liveness/liveness-unused.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3c286826aab33469e18b43d84ade32e35cdf65c1/src%2Ftest%2Fui%2Fliveness%2Fliveness-unused.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c286826aab33469e18b43d84ade32e35cdf65c1/src%2Ftest%2Fui%2Fliveness%2Fliveness-unused.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-unused.stderr?ref=3c286826aab33469e18b43d84ade32e35cdf65c1", "patch": "@@ -10,6 +10,11 @@ note: lint level defined here\n LL | #![warn(unused)]\n    |         ^^^^^^\n    = note: `#[warn(unreachable_code)]` implied by `#[warn(unused)]`\n+note: any code following this expression is unreachable\n+  --> $DIR/liveness-unused.rs:91:9\n+   |\n+LL |         continue;\n+   |         ^^^^^^^^\n \n error: unused variable: `x`\n   --> $DIR/liveness-unused.rs:8:7"}, {"sha": "6c46b2473cce6d7843aa2bc49a0f318873aa74a6", "filename": "src/test/ui/match/match-no-arms-unreachable-after.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3c286826aab33469e18b43d84ade32e35cdf65c1/src%2Ftest%2Fui%2Fmatch%2Fmatch-no-arms-unreachable-after.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c286826aab33469e18b43d84ade32e35cdf65c1/src%2Ftest%2Fui%2Fmatch%2Fmatch-no-arms-unreachable-after.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-no-arms-unreachable-after.stderr?ref=3c286826aab33469e18b43d84ade32e35cdf65c1", "patch": "@@ -9,6 +9,11 @@ note: lint level defined here\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n+note: any code following this expression is unreachable\n+  --> $DIR/match-no-arms-unreachable-after.rs:7:5\n+   |\n+LL |     match v { }\n+   |     ^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "436c703e4b6b924eb254e01f1d499426d64346c9", "filename": "src/test/ui/never-assign-dead-code.stderr", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3c286826aab33469e18b43d84ade32e35cdf65c1/src%2Ftest%2Fui%2Fnever-assign-dead-code.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c286826aab33469e18b43d84ade32e35cdf65c1/src%2Ftest%2Fui%2Fnever-assign-dead-code.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever-assign-dead-code.stderr?ref=3c286826aab33469e18b43d84ade32e35cdf65c1", "patch": "@@ -10,12 +10,24 @@ note: lint level defined here\n LL | #![warn(unused)]\n    |         ^^^^^^\n    = note: `#[warn(unreachable_code)]` implied by `#[warn(unused)]`\n+note: any code following this expression is unreachable\n+  --> $DIR/never-assign-dead-code.rs:9:16\n+   |\n+LL |     let x: ! = panic!(\"aah\");\n+   |                ^^^^^^^^^^^^^\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n warning: unreachable call\n   --> $DIR/never-assign-dead-code.rs:10:5\n    |\n LL |     drop(x);\n    |     ^^^^\n+   |\n+note: any code following this expression is unreachable\n+  --> $DIR/never-assign-dead-code.rs:10:10\n+   |\n+LL |     drop(x);\n+   |          ^\n \n warning: unused variable: `x`\n   --> $DIR/never-assign-dead-code.rs:9:9"}, {"sha": "47b4e467abecb3a24dd95f4a78cc0667ee916b04", "filename": "src/test/ui/reachable/expr_add.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3c286826aab33469e18b43d84ade32e35cdf65c1/src%2Ftest%2Fui%2Freachable%2Fexpr_add.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c286826aab33469e18b43d84ade32e35cdf65c1/src%2Ftest%2Fui%2Freachable%2Fexpr_add.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_add.stderr?ref=3c286826aab33469e18b43d84ade32e35cdf65c1", "patch": "@@ -9,6 +9,11 @@ note: lint level defined here\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n+note: any code following this expression is unreachable\n+  --> $DIR/expr_add.rs:17:19\n+   |\n+LL |     let x = Foo + return;\n+   |                   ^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "8e246d940fd8d04913d1d349ea3498475003fe8e", "filename": "src/test/ui/reachable/expr_again.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3c286826aab33469e18b43d84ade32e35cdf65c1/src%2Ftest%2Fui%2Freachable%2Fexpr_again.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c286826aab33469e18b43d84ade32e35cdf65c1/src%2Ftest%2Fui%2Freachable%2Fexpr_again.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_again.stderr?ref=3c286826aab33469e18b43d84ade32e35cdf65c1", "patch": "@@ -9,6 +9,11 @@ note: lint level defined here\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n+note: any code following this expression is unreachable\n+  --> $DIR/expr_again.rs:7:9\n+   |\n+LL |         continue;\n+   |         ^^^^^^^^\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "419a332e632f32aeb604318adb8fbe586a51174f", "filename": "src/test/ui/reachable/expr_array.stderr", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3c286826aab33469e18b43d84ade32e35cdf65c1/src%2Ftest%2Fui%2Freachable%2Fexpr_array.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c286826aab33469e18b43d84ade32e35cdf65c1/src%2Ftest%2Fui%2Freachable%2Fexpr_array.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_array.stderr?ref=3c286826aab33469e18b43d84ade32e35cdf65c1", "patch": "@@ -9,12 +9,23 @@ note: lint level defined here\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n+note: any code following this expression is unreachable\n+  --> $DIR/expr_array.rs:9:26\n+   |\n+LL |     let x: [usize; 2] = [return, 22];\n+   |                          ^^^^^^\n \n error: unreachable expression\n   --> $DIR/expr_array.rs:14:25\n    |\n LL |     let x: [usize; 2] = [22, return];\n    |                         ^^^^^^^^^^^^\n+   |\n+note: any code following this expression is unreachable\n+  --> $DIR/expr_array.rs:14:30\n+   |\n+LL |     let x: [usize; 2] = [22, return];\n+   |                              ^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "7388fb4a6b9b2b0e7997633dd09a40a73360ace1", "filename": "src/test/ui/reachable/expr_assign.stderr", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3c286826aab33469e18b43d84ade32e35cdf65c1/src%2Ftest%2Fui%2Freachable%2Fexpr_assign.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c286826aab33469e18b43d84ade32e35cdf65c1/src%2Ftest%2Fui%2Freachable%2Fexpr_assign.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_assign.stderr?ref=3c286826aab33469e18b43d84ade32e35cdf65c1", "patch": "@@ -9,18 +9,35 @@ note: lint level defined here\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n+note: any code following this expression is unreachable\n+  --> $DIR/expr_assign.rs:10:9\n+   |\n+LL |     x = return;\n+   |         ^^^^^^\n \n error: unreachable expression\n   --> $DIR/expr_assign.rs:20:14\n    |\n LL |         *p = return;\n    |              ^^^^^^\n+   |\n+note: any code following this expression is unreachable\n+  --> $DIR/expr_assign.rs:20:9\n+   |\n+LL |         *p = return;\n+   |         ^^\n \n error: unreachable expression\n   --> $DIR/expr_assign.rs:26:15\n    |\n LL |     *{return; &mut i} = 22;\n    |               ^^^^^^\n+   |\n+note: any code following this expression is unreachable\n+  --> $DIR/expr_assign.rs:26:7\n+   |\n+LL |     *{return; &mut i} = 22;\n+   |       ^^^^^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "03a6139d688bb54cb66ddc1911d4db2fb602752b", "filename": "src/test/ui/reachable/expr_block.stderr", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3c286826aab33469e18b43d84ade32e35cdf65c1/src%2Ftest%2Fui%2Freachable%2Fexpr_block.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c286826aab33469e18b43d84ade32e35cdf65c1/src%2Ftest%2Fui%2Freachable%2Fexpr_block.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_block.stderr?ref=3c286826aab33469e18b43d84ade32e35cdf65c1", "patch": "@@ -9,13 +9,23 @@ note: lint level defined here\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n+note: any code following this expression is unreachable\n+  --> $DIR/expr_block.rs:9:9\n+   |\n+LL |         return;\n+   |         ^^^^^^\n \n error: unreachable statement\n   --> $DIR/expr_block.rs:25:9\n    |\n LL |         println!(\"foo\");\n    |         ^^^^^^^^^^^^^^^^\n    |\n+note: any code following this expression is unreachable\n+  --> $DIR/expr_block.rs:24:9\n+   |\n+LL |         return;\n+   |         ^^^^^^\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: aborting due to 2 previous errors"}, {"sha": "d0f666d2be44b0ca7cd815ad182978414cc04d69", "filename": "src/test/ui/reachable/expr_box.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3c286826aab33469e18b43d84ade32e35cdf65c1/src%2Ftest%2Fui%2Freachable%2Fexpr_box.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c286826aab33469e18b43d84ade32e35cdf65c1/src%2Ftest%2Fui%2Freachable%2Fexpr_box.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_box.stderr?ref=3c286826aab33469e18b43d84ade32e35cdf65c1", "patch": "@@ -9,6 +9,11 @@ note: lint level defined here\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n+note: any code following this expression is unreachable\n+  --> $DIR/expr_box.rs:6:17\n+   |\n+LL |     let x = box return;\n+   |                 ^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "3fcea90e7cd879a0ece0b098748dfe86b202dff6", "filename": "src/test/ui/reachable/expr_call.stderr", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3c286826aab33469e18b43d84ade32e35cdf65c1/src%2Ftest%2Fui%2Freachable%2Fexpr_call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c286826aab33469e18b43d84ade32e35cdf65c1/src%2Ftest%2Fui%2Freachable%2Fexpr_call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_call.stderr?ref=3c286826aab33469e18b43d84ade32e35cdf65c1", "patch": "@@ -9,12 +9,23 @@ note: lint level defined here\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n+note: any code following this expression is unreachable\n+  --> $DIR/expr_call.rs:13:9\n+   |\n+LL |     foo(return, 22);\n+   |         ^^^^^^\n \n error: unreachable call\n   --> $DIR/expr_call.rs:18:5\n    |\n LL |     bar(return);\n    |     ^^^\n+   |\n+note: any code following this expression is unreachable\n+  --> $DIR/expr_call.rs:18:9\n+   |\n+LL |     bar(return);\n+   |         ^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "d3ce0ca079f90620a558af1dd34af3686239fc36", "filename": "src/test/ui/reachable/expr_cast.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3c286826aab33469e18b43d84ade32e35cdf65c1/src%2Ftest%2Fui%2Freachable%2Fexpr_cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c286826aab33469e18b43d84ade32e35cdf65c1/src%2Ftest%2Fui%2Freachable%2Fexpr_cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_cast.stderr?ref=3c286826aab33469e18b43d84ade32e35cdf65c1", "patch": "@@ -9,6 +9,11 @@ note: lint level defined here\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n+note: any code following this expression is unreachable\n+  --> $DIR/expr_cast.rs:9:14\n+   |\n+LL |     let x = {return} as !;\n+   |              ^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "03284576086a75f63a355353abbd9902febcec2e", "filename": "src/test/ui/reachable/expr_if.stderr", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3c286826aab33469e18b43d84ade32e35cdf65c1/src%2Ftest%2Fui%2Freachable%2Fexpr_if.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c286826aab33469e18b43d84ade32e35cdf65c1/src%2Ftest%2Fui%2Freachable%2Fexpr_if.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_if.stderr?ref=3c286826aab33469e18b43d84ade32e35cdf65c1", "patch": "@@ -12,13 +12,23 @@ note: lint level defined here\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n+note: any code following this expression is unreachable\n+  --> $DIR/expr_if.rs:7:9\n+   |\n+LL |     if {return} {\n+   |         ^^^^^^\n \n error: unreachable statement\n   --> $DIR/expr_if.rs:27:5\n    |\n LL |     println!(\"But I am.\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n    |\n+note: any code following this expression is unreachable\n+  --> $DIR/expr_if.rs:21:9\n+   |\n+LL |         return;\n+   |         ^^^^^^\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: aborting due to 2 previous errors"}, {"sha": "a4cf8cfcfd9e669ed5cd84f8b5b9ef1221eff74a", "filename": "src/test/ui/reachable/expr_loop.stderr", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3c286826aab33469e18b43d84ade32e35cdf65c1/src%2Ftest%2Fui%2Freachable%2Fexpr_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c286826aab33469e18b43d84ade32e35cdf65c1/src%2Ftest%2Fui%2Freachable%2Fexpr_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_loop.stderr?ref=3c286826aab33469e18b43d84ade32e35cdf65c1", "patch": "@@ -9,6 +9,11 @@ note: lint level defined here\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n+note: any code following this expression is unreachable\n+  --> $DIR/expr_loop.rs:7:12\n+   |\n+LL |     loop { return; }\n+   |            ^^^^^^\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: unreachable statement\n@@ -17,6 +22,11 @@ error: unreachable statement\n LL |     println!(\"I am dead.\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+note: any code following this expression is unreachable\n+  --> $DIR/expr_loop.rs:20:12\n+   |\n+LL |     loop { return; }\n+   |            ^^^^^^\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: unreachable statement\n@@ -25,6 +35,11 @@ error: unreachable statement\n LL |     println!(\"I am dead.\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+note: any code following this expression is unreachable\n+  --> $DIR/expr_loop.rs:31:5\n+   |\n+LL |     loop { 'middle: loop { loop { break 'middle; } } }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: aborting due to 3 previous errors"}, {"sha": "f587e524d350dfbdcf8bc817251fb34ce8f31806", "filename": "src/test/ui/reachable/expr_match.stderr", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3c286826aab33469e18b43d84ade32e35cdf65c1/src%2Ftest%2Fui%2Freachable%2Fexpr_match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c286826aab33469e18b43d84ade32e35cdf65c1/src%2Ftest%2Fui%2Freachable%2Fexpr_match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_match.stderr?ref=3c286826aab33469e18b43d84ade32e35cdf65c1", "patch": "@@ -9,6 +9,11 @@ note: lint level defined here\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n+note: any code following this `match` expression is unreachable, as all arms diverge\n+  --> $DIR/expr_match.rs:7:5\n+   |\n+LL |     match () { () => return }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: unreachable statement\n@@ -17,6 +22,11 @@ error: unreachable statement\n LL |     println!(\"I am dead\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n    |\n+note: any code following this `match` expression is unreachable, as all arms diverge\n+  --> $DIR/expr_match.rs:18:5\n+   |\n+LL |     match () { () if false => return, () => return }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: aborting due to 2 previous errors"}, {"sha": "7ad279c9f487a438191799e5eba8bc58258f2712", "filename": "src/test/ui/reachable/expr_method.stderr", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3c286826aab33469e18b43d84ade32e35cdf65c1/src%2Ftest%2Fui%2Freachable%2Fexpr_method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c286826aab33469e18b43d84ade32e35cdf65c1/src%2Ftest%2Fui%2Freachable%2Fexpr_method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_method.stderr?ref=3c286826aab33469e18b43d84ade32e35cdf65c1", "patch": "@@ -9,12 +9,23 @@ note: lint level defined here\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n+note: any code following this expression is unreachable\n+  --> $DIR/expr_method.rs:16:13\n+   |\n+LL |     Foo.foo(return, 22);\n+   |             ^^^^^^\n \n error: unreachable call\n   --> $DIR/expr_method.rs:21:9\n    |\n LL |     Foo.bar(return);\n    |         ^^^\n+   |\n+note: any code following this expression is unreachable\n+  --> $DIR/expr_method.rs:21:13\n+   |\n+LL |     Foo.bar(return);\n+   |             ^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "3ff6be76daea51770421e8dcf00eeb29c2626ebd", "filename": "src/test/ui/reachable/expr_repeat.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3c286826aab33469e18b43d84ade32e35cdf65c1/src%2Ftest%2Fui%2Freachable%2Fexpr_repeat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c286826aab33469e18b43d84ade32e35cdf65c1/src%2Ftest%2Fui%2Freachable%2Fexpr_repeat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_repeat.stderr?ref=3c286826aab33469e18b43d84ade32e35cdf65c1", "patch": "@@ -9,6 +9,11 @@ note: lint level defined here\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n+note: any code following this expression is unreachable\n+  --> $DIR/expr_repeat.rs:9:26\n+   |\n+LL |     let x: [usize; 2] = [return; 2];\n+   |                          ^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "31f7ebe7618ead294a21fb5bb501c8a3dac2121c", "filename": "src/test/ui/reachable/expr_return.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3c286826aab33469e18b43d84ade32e35cdf65c1/src%2Ftest%2Fui%2Freachable%2Fexpr_return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c286826aab33469e18b43d84ade32e35cdf65c1/src%2Ftest%2Fui%2Freachable%2Fexpr_return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_return.stderr?ref=3c286826aab33469e18b43d84ade32e35cdf65c1", "patch": "@@ -9,6 +9,11 @@ note: lint level defined here\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n+note: any code following this expression is unreachable\n+  --> $DIR/expr_return.rs:10:30\n+   |\n+LL |     let x = {return {return {return;}}};\n+   |                              ^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "4e57618bf5e77cf3c242e12c242c9e675871de75", "filename": "src/test/ui/reachable/expr_return_in_macro.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3c286826aab33469e18b43d84ade32e35cdf65c1/src%2Ftest%2Fui%2Freachable%2Fexpr_return_in_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c286826aab33469e18b43d84ade32e35cdf65c1/src%2Ftest%2Fui%2Freachable%2Fexpr_return_in_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_return_in_macro.rs?ref=3c286826aab33469e18b43d84ade32e35cdf65c1", "patch": "@@ -0,0 +1,15 @@\n+// Tests that we generate nice error messages\n+// when an expression is unreachble due to control\n+// flow inside of a macro expansion.\n+#![deny(unreachable_code)]\n+\n+macro_rules! early_return {\n+    () => {\n+        return ()\n+    }\n+}\n+\n+fn main() {\n+    return early_return!();\n+    //~^ ERROR unreachable expression\n+}"}, {"sha": "ff3abb5551f92d0eee32d7a6da79da4d5a6667a0", "filename": "src/test/ui/reachable/expr_return_in_macro.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3c286826aab33469e18b43d84ade32e35cdf65c1/src%2Ftest%2Fui%2Freachable%2Fexpr_return_in_macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c286826aab33469e18b43d84ade32e35cdf65c1/src%2Ftest%2Fui%2Freachable%2Fexpr_return_in_macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_return_in_macro.stderr?ref=3c286826aab33469e18b43d84ade32e35cdf65c1", "patch": "@@ -0,0 +1,22 @@\n+error: unreachable expression\n+  --> $DIR/expr_return_in_macro.rs:13:5\n+   |\n+LL |     return early_return!();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/expr_return_in_macro.rs:4:9\n+   |\n+LL | #![deny(unreachable_code)]\n+   |         ^^^^^^^^^^^^^^^^\n+note: any code following this expression is unreachable\n+  --> $DIR/expr_return_in_macro.rs:8:9\n+   |\n+LL |         return ()\n+   |         ^^^^^^^^^\n+...\n+LL |     return early_return!();\n+   |            --------------- in this macro invocation\n+\n+error: aborting due to previous error\n+"}, {"sha": "d08bcc4f0d1ae1d3e790900650da42bb839dfa4d", "filename": "src/test/ui/reachable/expr_struct.stderr", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/3c286826aab33469e18b43d84ade32e35cdf65c1/src%2Ftest%2Fui%2Freachable%2Fexpr_struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c286826aab33469e18b43d84ade32e35cdf65c1/src%2Ftest%2Fui%2Freachable%2Fexpr_struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_struct.stderr?ref=3c286826aab33469e18b43d84ade32e35cdf65c1", "patch": "@@ -9,24 +9,47 @@ note: lint level defined here\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n+note: any code following this expression is unreachable\n+  --> $DIR/expr_struct.rs:14:35\n+   |\n+LL |     let x = Foo { a: 22, b: 33, ..return };\n+   |                                   ^^^^^^\n \n error: unreachable expression\n   --> $DIR/expr_struct.rs:19:33\n    |\n LL |     let x = Foo { a: return, b: 33, ..return };\n    |                                 ^^\n+   |\n+note: any code following this expression is unreachable\n+  --> $DIR/expr_struct.rs:19:22\n+   |\n+LL |     let x = Foo { a: return, b: 33, ..return };\n+   |                      ^^^^^^\n \n error: unreachable expression\n   --> $DIR/expr_struct.rs:24:39\n    |\n LL |     let x = Foo { a: 22, b: return, ..return };\n    |                                       ^^^^^^\n+   |\n+note: any code following this expression is unreachable\n+  --> $DIR/expr_struct.rs:24:29\n+   |\n+LL |     let x = Foo { a: 22, b: return, ..return };\n+   |                             ^^^^^^\n \n error: unreachable expression\n   --> $DIR/expr_struct.rs:29:13\n    |\n LL |     let x = Foo { a: 22, b: return };\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: any code following this expression is unreachable\n+  --> $DIR/expr_struct.rs:29:29\n+   |\n+LL |     let x = Foo { a: 22, b: return };\n+   |                             ^^^^^^\n \n error: aborting due to 4 previous errors\n "}, {"sha": "788499533db33b2a218e5b9020c0cd3d64e14688", "filename": "src/test/ui/reachable/expr_tup.stderr", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3c286826aab33469e18b43d84ade32e35cdf65c1/src%2Ftest%2Fui%2Freachable%2Fexpr_tup.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c286826aab33469e18b43d84ade32e35cdf65c1/src%2Ftest%2Fui%2Freachable%2Fexpr_tup.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_tup.stderr?ref=3c286826aab33469e18b43d84ade32e35cdf65c1", "patch": "@@ -9,12 +9,23 @@ note: lint level defined here\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n+note: any code following this expression is unreachable\n+  --> $DIR/expr_tup.rs:9:30\n+   |\n+LL |     let x: (usize, usize) = (return, 2);\n+   |                              ^^^^^^\n \n error: unreachable expression\n   --> $DIR/expr_tup.rs:14:29\n    |\n LL |     let x: (usize, usize) = (2, return);\n    |                             ^^^^^^^^^^^\n+   |\n+note: any code following this expression is unreachable\n+  --> $DIR/expr_tup.rs:14:33\n+   |\n+LL |     let x: (usize, usize) = (2, return);\n+   |                                 ^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "15eb735da75d83ad06cc08a2a14a54bbed3dca17", "filename": "src/test/ui/reachable/expr_type.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3c286826aab33469e18b43d84ade32e35cdf65c1/src%2Ftest%2Fui%2Freachable%2Fexpr_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c286826aab33469e18b43d84ade32e35cdf65c1/src%2Ftest%2Fui%2Freachable%2Fexpr_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_type.stderr?ref=3c286826aab33469e18b43d84ade32e35cdf65c1", "patch": "@@ -9,6 +9,11 @@ note: lint level defined here\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n+note: any code following this expression is unreachable\n+  --> $DIR/expr_type.rs:9:14\n+   |\n+LL |     let x = {return}: !;\n+   |              ^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "7f865196166398e44c22e6f52cf9eda376dd3d1d", "filename": "src/test/ui/reachable/expr_unary.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3c286826aab33469e18b43d84ade32e35cdf65c1/src%2Ftest%2Fui%2Freachable%2Fexpr_unary.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c286826aab33469e18b43d84ade32e35cdf65c1/src%2Ftest%2Fui%2Freachable%2Fexpr_unary.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_unary.stderr?ref=3c286826aab33469e18b43d84ade32e35cdf65c1", "patch": "@@ -15,6 +15,11 @@ note: lint level defined here\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n+note: any code following this expression is unreachable\n+  --> $DIR/expr_unary.rs:8:20\n+   |\n+LL |     let x: ! = ! { return; };\n+   |                    ^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "b6d6d11ac691e9c39ac2b02607c866d857973e38", "filename": "src/test/ui/reachable/expr_while.stderr", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3c286826aab33469e18b43d84ade32e35cdf65c1/src%2Ftest%2Fui%2Freachable%2Fexpr_while.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c286826aab33469e18b43d84ade32e35cdf65c1/src%2Ftest%2Fui%2Freachable%2Fexpr_while.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_while.stderr?ref=3c286826aab33469e18b43d84ade32e35cdf65c1", "patch": "@@ -13,6 +13,11 @@ note: lint level defined here\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n+note: any code following this expression is unreachable\n+  --> $DIR/expr_while.rs:7:12\n+   |\n+LL |     while {return} {\n+   |            ^^^^^^\n \n error: unreachable block in `while` expression\n   --> $DIR/expr_while.rs:22:20\n@@ -23,6 +28,12 @@ LL | |\n LL | |         println!(\"I am dead.\");\n LL | |     }\n    | |_____^\n+   |\n+note: any code following this expression is unreachable\n+  --> $DIR/expr_while.rs:22:12\n+   |\n+LL |     while {return} {\n+   |            ^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "ca98a3947146ee5ecf58577c0128ca909dc79954", "filename": "src/test/ui/rfc-2497-if-let-chains/protect-precedences.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3c286826aab33469e18b43d84ade32e35cdf65c1/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fprotect-precedences.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c286826aab33469e18b43d84ade32e35cdf65c1/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fprotect-precedences.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fprotect-precedences.stderr?ref=3c286826aab33469e18b43d84ade32e35cdf65c1", "patch": "@@ -5,4 +5,9 @@ LL |         if let _ = return true && false {};\n    |                                         ^^\n    |\n    = note: `#[warn(unreachable_code)]` on by default\n+note: any code following this expression is unreachable\n+  --> $DIR/protect-precedences.rs:13:20\n+   |\n+LL |         if let _ = return true && false {};\n+   |                    ^^^^^^^^^^^^^^^^^^^^\n "}, {"sha": "226f088c63a5e8bb8f0e0eef9485c6257cfc20a8", "filename": "src/test/ui/unreachable/unreachable-code.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3c286826aab33469e18b43d84ade32e35cdf65c1/src%2Ftest%2Fui%2Funreachable%2Funreachable-code.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c286826aab33469e18b43d84ade32e35cdf65c1/src%2Ftest%2Fui%2Funreachable%2Funreachable-code.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funreachable%2Funreachable-code.stderr?ref=3c286826aab33469e18b43d84ade32e35cdf65c1", "patch": "@@ -9,6 +9,11 @@ note: lint level defined here\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n+note: any code following this expression is unreachable\n+  --> $DIR/unreachable-code.rs:5:3\n+   |\n+LL |   loop{}\n+   |   ^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "928f5634a12481cacf4663ed55f986e5a4795b3f", "filename": "src/test/ui/unreachable/unreachable-in-call.stderr", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3c286826aab33469e18b43d84ade32e35cdf65c1/src%2Ftest%2Fui%2Funreachable%2Funreachable-in-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c286826aab33469e18b43d84ade32e35cdf65c1/src%2Ftest%2Fui%2Funreachable%2Funreachable-in-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funreachable%2Funreachable-in-call.stderr?ref=3c286826aab33469e18b43d84ade32e35cdf65c1", "patch": "@@ -9,12 +9,23 @@ note: lint level defined here\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n+note: any code following this expression is unreachable\n+  --> $DIR/unreachable-in-call.rs:13:10\n+   |\n+LL |     call(diverge(),\n+   |          ^^^^^^^^^\n \n error: unreachable call\n   --> $DIR/unreachable-in-call.rs:17:5\n    |\n LL |     call(\n    |     ^^^^\n+   |\n+note: any code following this expression is unreachable\n+  --> $DIR/unreachable-in-call.rs:19:9\n+   |\n+LL |         diverge());\n+   |         ^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "889df790124dae0bd7e104a5d1f253cdea31b01d", "filename": "src/test/ui/unreachable/unreachable-try-pattern.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3c286826aab33469e18b43d84ade32e35cdf65c1/src%2Ftest%2Fui%2Funreachable%2Funreachable-try-pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c286826aab33469e18b43d84ade32e35cdf65c1/src%2Ftest%2Fui%2Funreachable%2Funreachable-try-pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funreachable%2Funreachable-try-pattern.stderr?ref=3c286826aab33469e18b43d84ade32e35cdf65c1", "patch": "@@ -9,6 +9,11 @@ note: lint level defined here\n    |\n LL | #![warn(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n+note: any code following this expression is unreachable\n+  --> $DIR/unreachable-try-pattern.rs:19:36\n+   |\n+LL |     let y = (match x { Ok(n) => Ok(n as u32), Err(e) => Err(e) })?;\n+   |                                    ^\n \n warning: unreachable pattern\n   --> $DIR/unreachable-try-pattern.rs:19:24"}, {"sha": "9ce6e3df8046e785911f7f401e186d3c594fc962", "filename": "src/test/ui/unreachable/unwarned-match-on-never.stderr", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3c286826aab33469e18b43d84ade32e35cdf65c1/src%2Ftest%2Fui%2Funreachable%2Funwarned-match-on-never.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c286826aab33469e18b43d84ade32e35cdf65c1/src%2Ftest%2Fui%2Funreachable%2Funwarned-match-on-never.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funreachable%2Funwarned-match-on-never.stderr?ref=3c286826aab33469e18b43d84ade32e35cdf65c1", "patch": "@@ -9,12 +9,23 @@ note: lint level defined here\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n+note: any code following this expression is unreachable\n+  --> $DIR/unwarned-match-on-never.rs:8:11\n+   |\n+LL |     match x {}\n+   |           ^\n \n error: unreachable arm\n   --> $DIR/unwarned-match-on-never.rs:15:15\n    |\n LL |         () => ()\n    |               ^^\n+   |\n+note: any code following this expression is unreachable\n+  --> $DIR/unwarned-match-on-never.rs:14:11\n+   |\n+LL |     match (return) {\n+   |           ^^^^^^^^\n \n error: unreachable expression\n   --> $DIR/unwarned-match-on-never.rs:21:5\n@@ -23,6 +34,12 @@ LL | /     match () {\n LL | |         () => (),\n LL | |     }\n    | |_____^\n+   |\n+note: any code following this expression is unreachable\n+  --> $DIR/unwarned-match-on-never.rs:20:5\n+   |\n+LL |     return;\n+   |     ^^^^^^\n \n error: aborting due to 3 previous errors\n "}]}