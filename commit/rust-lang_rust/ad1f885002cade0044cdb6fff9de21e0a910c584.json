{"sha": "ad1f885002cade0044cdb6fff9de21e0a910c584", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkMWY4ODUwMDJjYWRlMDA0NGNkYjZmZmY5ZGUyMWUwYTkxMGM1ODQ=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-12-17T12:23:28Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-12-17T15:34:48Z"}, "message": "[OPT] Don't call .to_string() on MonoItem's", "tree": {"sha": "c424ada8081beba7d1afd10a97c9c2758d59f961", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c424ada8081beba7d1afd10a97c9c2758d59f961"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad1f885002cade0044cdb6fff9de21e0a910c584", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad1f885002cade0044cdb6fff9de21e0a910c584", "html_url": "https://github.com/rust-lang/rust/commit/ad1f885002cade0044cdb6fff9de21e0a910c584", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad1f885002cade0044cdb6fff9de21e0a910c584/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "856079bcaa2303fe941c44d6787139e8929bd871", "url": "https://api.github.com/repos/rust-lang/rust/commits/856079bcaa2303fe941c44d6787139e8929bd871", "html_url": "https://github.com/rust-lang/rust/commit/856079bcaa2303fe941c44d6787139e8929bd871"}], "stats": {"total": 30, "additions": 9, "deletions": 21}, "files": [{"sha": "0166f9ea5bae57444d22723cba35c0efdd6f5f79", "filename": "src/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad1f885002cade0044cdb6fff9de21e0a910c584/src%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad1f885002cade0044cdb6fff9de21e0a910c584/src%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver.rs?ref=ad1f885002cade0044cdb6fff9de21e0a910c584", "patch": "@@ -307,7 +307,7 @@ fn codegen_mono_items<'tcx>(\n         }\n \n         for (mono_item, (linkage, visibility)) in mono_items {\n-            crate::unimpl::try_unimpl(tcx, mono_item.to_string(tcx, true), || {\n+            crate::unimpl::try_unimpl(tcx, || {\n                 let linkage = crate::linkage::get_clif_linkage(mono_item, linkage, visibility);\n                 trans_mono_item(&mut cx, mono_item, linkage);\n             });"}, {"sha": "b668235e75e826130438a91476f172f78f6b5103", "filename": "src/unimpl.rs", "status": "modified", "additions": 8, "deletions": 20, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ad1f885002cade0044cdb6fff9de21e0a910c584/src%2Funimpl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad1f885002cade0044cdb6fff9de21e0a910c584/src%2Funimpl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Funimpl.rs?ref=ad1f885002cade0044cdb6fff9de21e0a910c584", "patch": "@@ -1,14 +1,8 @@\n //! The unimpl! macro is defined here. It is used to generate\n //! a non-fatal error on not yet implemented things.\n \n-use std::cell::RefCell;\n-\n use rustc::ty::TyCtxt;\n \n-thread_local! {\n-    static CURRENT_MSG: RefCell<String> = RefCell::new(String::new());\n-}\n-\n // Just public, because of the unimpl macro\n #[doc(hidden)]\n pub struct NonFatal(pub String);\n@@ -20,21 +14,15 @@ pub macro unimpl($($tt:tt)*) {\n     panic!(NonFatal(format!($($tt)*)));\n }\n \n-pub fn try_unimpl(tcx: TyCtxt, msg: String, f: impl FnOnce()) {\n-    CURRENT_MSG.with(|current_msg| {\n-        let old = std::mem::replace(&mut *current_msg.borrow_mut(), msg);\n+pub fn try_unimpl(tcx: TyCtxt, f: impl FnOnce()) {\n+    let res = ::std::panic::catch_unwind(::std::panic::AssertUnwindSafe(|| f()));\n \n-        let res = ::std::panic::catch_unwind(::std::panic::AssertUnwindSafe(|| f()));\n-\n-        if let Err(err) = res {\n-            match err.downcast::<NonFatal>() {\n-                Ok(non_fatal) => {\n-                    tcx.sess.err(&format!(\"at {}: {}\", current_msg.borrow(), non_fatal.0));\n-                }\n-                Err(err) => ::std::panic::resume_unwind(err),\n+    if let Err(err) = res {\n+        match err.downcast::<NonFatal>() {\n+            Ok(non_fatal) => {\n+                tcx.sess.err(&non_fatal.0);\n             }\n+            Err(err) => ::std::panic::resume_unwind(err),\n         }\n-\n-        *current_msg.borrow_mut() = old;\n-    });\n+    }\n }"}]}