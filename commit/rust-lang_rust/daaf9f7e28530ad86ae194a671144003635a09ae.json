{"sha": "daaf9f7e28530ad86ae194a671144003635a09ae", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhYWY5ZjdlMjg1MzBhZDg2YWUxOTRhNjcxMTQ0MDAzNjM1YTA5YWU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-16T13:04:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-16T13:04:06Z"}, "message": "Auto merge of #1177 - RalfJung:debug-assert, r=RalfJung\n\nMake sure we evaluate debug assertions in local crate and libstd\n\nFixes https://github.com/rust-lang/miri/issues/1126", "tree": {"sha": "84864d0e7a1fabd8b32de9f34a8f639440dfbc6e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84864d0e7a1fabd8b32de9f34a8f639440dfbc6e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/daaf9f7e28530ad86ae194a671144003635a09ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/daaf9f7e28530ad86ae194a671144003635a09ae", "html_url": "https://github.com/rust-lang/rust/commit/daaf9f7e28530ad86ae194a671144003635a09ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/daaf9f7e28530ad86ae194a671144003635a09ae/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a803c97523b99799e5f4c05bdf5f18764698c11", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a803c97523b99799e5f4c05bdf5f18764698c11", "html_url": "https://github.com/rust-lang/rust/commit/0a803c97523b99799e5f4c05bdf5f18764698c11"}, {"sha": "8acf52b3ca5ddc464d88ea6913d66706a3b70d4b", "url": "https://api.github.com/repos/rust-lang/rust/commits/8acf52b3ca5ddc464d88ea6913d66706a3b70d4b", "html_url": "https://github.com/rust-lang/rust/commit/8acf52b3ca5ddc464d88ea6913d66706a3b70d4b"}], "stats": {"total": 41, "additions": 34, "deletions": 7}, "files": [{"sha": "c34b90877d9d169191aba11247164d635d577d0e", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/daaf9f7e28530ad86ae194a671144003635a09ae/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daaf9f7e28530ad86ae194a671144003635a09ae/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=daaf9f7e28530ad86ae194a671144003635a09ae", "patch": "@@ -62,5 +62,5 @@ pub use crate::stacked_borrows::{\n /// Insert rustc arguments at the beginning of the argument list that Miri wants to be\n /// set per default, for maximal validation power.\n pub fn miri_default_args() -> &'static [&'static str] {\n-    &[\"-Zalways-encode-mir\", \"-Zmir-emit-retag\", \"-Zmir-opt-level=0\", \"--cfg=miri\"]\n+    &[\"-Zalways-encode-mir\", \"-Zmir-emit-retag\", \"-Zmir-opt-level=0\", \"--cfg=miri\", \"-Cdebug-assertions=on\"]\n }"}, {"sha": "ce2fbe170e45da50966ec4dc3729cdb36f17ef6d", "filename": "tests/compile-fail/copy_null.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/daaf9f7e28530ad86ae194a671144003635a09ae/tests%2Fcompile-fail%2Fcopy_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daaf9f7e28530ad86ae194a671144003635a09ae/tests%2Fcompile-fail%2Fcopy_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcopy_null.rs?ref=daaf9f7e28530ad86ae194a671144003635a09ae", "patch": "@@ -1,8 +1,14 @@\n //error-pattern: invalid use of NULL pointer\n+#![feature(intrinsics)]\n+\n+// Directly call intrinsic to avoid debug assertions in libstd\n+extern \"rust-intrinsic\" {\n+    fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize);\n+}\n \n fn main() {\n     let mut data = [0u16; 4];\n     let ptr = &mut data[0] as *mut u16;\n     // Even copying 0 elements from NULL should error.\n-    unsafe { ptr.copy_from(std::ptr::null(), 0); }\n+    unsafe { copy_nonoverlapping(std::ptr::null(), ptr, 0); }\n }"}, {"sha": "76e1e20d2177fba97529d4f467fe8dd8cab3146f", "filename": "tests/compile-fail/copy_overlapping.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/daaf9f7e28530ad86ae194a671144003635a09ae/tests%2Fcompile-fail%2Fcopy_overlapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daaf9f7e28530ad86ae194a671144003635a09ae/tests%2Fcompile-fail%2Fcopy_overlapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcopy_overlapping.rs?ref=daaf9f7e28530ad86ae194a671144003635a09ae", "patch": "@@ -1,12 +1,16 @@\n-#![feature(core_intrinsics)]\n-\n //error-pattern: copy_nonoverlapping called on overlapping ranges\n+#![feature(intrinsics)]\n+\n+// Directly call intrinsic to avoid debug assertions in libstd\n+extern \"rust-intrinsic\" {\n+    fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize);\n+}\n \n fn main() {\n     let mut data = [0u8; 16];\n     unsafe {\n         let a = data.as_mut_ptr();\n         let b = a.wrapping_offset(1) as *mut _;\n-        std::ptr::copy_nonoverlapping(a, b, 2);\n+        copy_nonoverlapping(a, b, 2);\n     }\n }"}, {"sha": "1a2692978f7974d7a16ad6448a373cbf9941ca7f", "filename": "tests/compile-fail/copy_unaligned.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/daaf9f7e28530ad86ae194a671144003635a09ae/tests%2Fcompile-fail%2Fcopy_unaligned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daaf9f7e28530ad86ae194a671144003635a09ae/tests%2Fcompile-fail%2Fcopy_unaligned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcopy_unaligned.rs?ref=daaf9f7e28530ad86ae194a671144003635a09ae", "patch": "@@ -1,8 +1,14 @@\n //error-pattern: tried to access memory with alignment 1, but alignment 2 is required\n+#![feature(intrinsics)]\n+\n+// Directly call intrinsic to avoid debug assertions in libstd\n+extern \"rust-intrinsic\" {\n+    fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize);\n+}\n \n fn main() {\n     let mut data = [0u16; 8];\n     let ptr = (&mut data[0] as *mut u16 as *mut u8).wrapping_add(1) as *mut u16;\n     // Even copying 0 elements to something unaligned should error\n-    unsafe { ptr.copy_from(&data[5], 0); }\n+    unsafe { copy_nonoverlapping(&data[5], ptr, 0); }\n }"}, {"sha": "4d4206923a5ef4d5a311a1387762f4b2c27969e4", "filename": "tests/run-pass/panic/catch_panic.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/daaf9f7e28530ad86ae194a671144003635a09ae/tests%2Frun-pass%2Fpanic%2Fcatch_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daaf9f7e28530ad86ae194a671144003635a09ae/tests%2Frun-pass%2Fpanic%2Fcatch_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fpanic%2Fcatch_panic.rs?ref=daaf9f7e28530ad86ae194a671144003635a09ae", "patch": "@@ -1,4 +1,5 @@\n // ignore-windows: Unwind panicking does not currently work on Windows\n+// normalize-stderr-test \"[^ ]*libcore/macros/mod.rs[0-9:]*\" -> \"$$LOC\"\n #![feature(never_type)]\n #![allow(const_err)]\n use std::panic::{catch_unwind, AssertUnwindSafe};\n@@ -11,7 +12,6 @@ thread_local! {\n }\n \n struct DropTester;\n-\n impl Drop for DropTester {\n     fn drop(&mut self) {\n         DROPPED.with(|c| {\n@@ -61,6 +61,11 @@ fn main() {\n     test(|_old_val| { let _val = [0, 1, 2][4]; loop {} });\n     test(|_old_val| { let _val = 1/0; loop {} });\n \n+    // Assertion and debug assertion\n+    test(|_old_val| { assert!(false); loop {} });\n+    test(|_old_val| { debug_assert!(false); loop {} });\n+    test(|_old_val| { unsafe { (1 as *const i32).read() }; loop {} }); // trigger debug-assertion in libstd\n+\n     // Cleanup: reset to default hook.\n     drop(std::panic::take_hook());\n "}, {"sha": "636179beeade818d74b31ade2f3a5a7de705e6ef", "filename": "tests/run-pass/panic/catch_panic.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/daaf9f7e28530ad86ae194a671144003635a09ae/tests%2Frun-pass%2Fpanic%2Fcatch_panic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/daaf9f7e28530ad86ae194a671144003635a09ae/tests%2Frun-pass%2Fpanic%2Fcatch_panic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fpanic%2Fcatch_panic.stderr?ref=daaf9f7e28530ad86ae194a671144003635a09ae", "patch": "@@ -16,4 +16,10 @@ thread 'main' panicked at 'index out of bounds: the len is 3 but the index is 4'\n Caught panic message (String): index out of bounds: the len is 3 but the index is 4\n thread 'main' panicked at 'attempt to divide by zero', $DIR/catch_panic.rs:62:34\n Caught panic message (String): attempt to divide by zero\n+thread 'main' panicked at 'assertion failed: false', $DIR/catch_panic.rs:65:23\n+Caught panic message (&str): assertion failed: false\n+thread 'main' panicked at 'assertion failed: false', $DIR/catch_panic.rs:66:23\n+Caught panic message (&str): assertion failed: false\n+thread 'main' panicked at 'attempt to copy from unaligned or null pointer', $LOC\n+Caught panic message (String): attempt to copy from unaligned or null pointer\n Success!"}]}