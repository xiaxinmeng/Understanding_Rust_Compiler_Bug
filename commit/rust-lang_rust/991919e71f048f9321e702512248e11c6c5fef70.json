{"sha": "991919e71f048f9321e702512248e11c6c5fef70", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5MTkxOWU3MWYwNDhmOTMyMWU3MDI1MTIyNDhlMTFjNmM1ZmVmNzA=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-06-18T19:37:03Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-06-18T19:37:34Z"}, "message": "internal: add index to minicore", "tree": {"sha": "f7f01b88e18e7d10b79df4ca27090bd058e1a40e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7f01b88e18e7d10b79df4ca27090bd058e1a40e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/991919e71f048f9321e702512248e11c6c5fef70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/991919e71f048f9321e702512248e11c6c5fef70", "html_url": "https://github.com/rust-lang/rust/commit/991919e71f048f9321e702512248e11c6c5fef70", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/991919e71f048f9321e702512248e11c6c5fef70/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73b3ee664ecc938b943b5a08a23ef29104fc390f", "url": "https://api.github.com/repos/rust-lang/rust/commits/73b3ee664ecc938b943b5a08a23ef29104fc390f", "html_url": "https://github.com/rust-lang/rust/commit/73b3ee664ecc938b943b5a08a23ef29104fc390f"}], "stats": {"total": 88, "additions": 50, "deletions": 38}, "files": [{"sha": "0b6a3a1e9196ac9c9541c0a1b8514d3fd6b056ef", "filename": "crates/hir_ty/src/tests/traits.rs", "status": "modified", "additions": 7, "deletions": 38, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/991919e71f048f9321e702512248e11c6c5fef70/crates%2Fhir_ty%2Fsrc%2Ftests%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/991919e71f048f9321e702512248e11c6c5fef70/crates%2Fhir_ty%2Fsrc%2Ftests%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Ftraits.rs?ref=991919e71f048f9321e702512248e11c6c5fef70", "patch": "@@ -567,11 +567,11 @@ fn indexing_arrays() {\n fn infer_ops_index() {\n     check_types(\n         r#\"\n-//- /main.rs crate:main deps:std\n+//- minicore: index\n struct Bar;\n struct Foo;\n \n-impl std::ops::Index<u32> for Bar {\n+impl core::ops::Index<u32> for Bar {\n     type Output = Foo;\n }\n \n@@ -580,15 +580,6 @@ fn test() {\n     let b = a[1u32];\n     b;\n } //^ Foo\n-\n-//- /std.rs crate:std\n-#[prelude_import] use ops::*;\n-mod ops {\n-    #[lang = \"index\"]\n-    pub trait Index<Idx> {\n-        type Output;\n-    }\n-}\n \"#,\n     );\n }\n@@ -597,16 +588,16 @@ mod ops {\n fn infer_ops_index_int() {\n     check_types(\n         r#\"\n-//- /main.rs crate:main deps:std\n+//- minicore: index\n struct Bar;\n struct Foo;\n \n-impl std::ops::Index<u32> for Bar {\n+impl core::ops::Index<u32> for Bar {\n     type Output = Foo;\n }\n \n struct Range;\n-impl std::ops::Index<Range> for Bar {\n+impl core::ops::Index<Range> for Bar {\n     type Output = Bar;\n }\n \n@@ -616,15 +607,6 @@ fn test() {\n     b;\n   //^ Foo\n }\n-\n-//- /std.rs crate:std\n-#[prelude_import] use ops::*;\n-mod ops {\n-    #[lang = \"index\"]\n-    pub trait Index<Idx> {\n-        type Output;\n-    }\n-}\n \"#,\n     );\n }\n@@ -633,25 +615,12 @@ mod ops {\n fn infer_ops_index_autoderef() {\n     check_types(\n         r#\"\n-//- /main.rs crate:main deps:std\n+//- minicore: index, slice\n fn test() {\n     let a = &[1u32, 2, 3];\n-    let b = a[1u32];\n+    let b = a[1];\n     b;\n } //^ u32\n-\n-//- /std.rs crate:std\n-impl<T> ops::Index<u32> for [T] {\n-    type Output = T;\n-}\n-\n-#[prelude_import] use ops::*;\n-mod ops {\n-    #[lang = \"index\"]\n-    pub trait Index<Idx> {\n-        type Output;\n-    }\n-}\n \"#,\n     );\n }"}, {"sha": "71f07d38a70d00a4acd6d9a4e6feb8540d689a82", "filename": "crates/test_utils/src/minicore.rs", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/991919e71f048f9321e702512248e11c6c5fef70/crates%2Ftest_utils%2Fsrc%2Fminicore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/991919e71f048f9321e702512248e11c6c5fef70/crates%2Ftest_utils%2Fsrc%2Fminicore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Fminicore.rs?ref=991919e71f048f9321e702512248e11c6c5fef70", "patch": "@@ -15,6 +15,7 @@\n //!     range:\n //!     deref: sized\n //!     deref_mut: deref\n+//!     index: sized\n //!     fn:\n //!     pin:\n //!     future: pin\n@@ -167,6 +168,48 @@ pub mod ops {\n     };\n     // endregion:deref\n \n+    // region:index\n+    mod index {\n+        #[lang = \"index\"]\n+        pub trait Index<Idx: ?Sized> {\n+            type Output: ?Sized;\n+            fn index(&self, index: Idx) -> &Self::Output;\n+        }\n+        #[lang = \"index_mut\"]\n+        pub trait IndexMut<Idx: ?Sized>: Index<Idx> {\n+            fn index_mut(&mut self, index: Idx) -> &mut Self::Output;\n+        }\n+\n+        // region:slice\n+        impl<T, I> Index<I> for [T]\n+        where\n+            I: SliceIndex<[T]>,\n+        {\n+            type Output = I::Output;\n+            fn index(&self, index: I) -> &I::Output {\n+                loop {}\n+            }\n+        }\n+        impl<T, I> IndexMut<I> for [T]\n+        where\n+            I: SliceIndex<[T]>,\n+        {\n+            fn index_mut(&mut self, index: I) -> &mut I::Output {\n+                loop {}\n+            }\n+        }\n+\n+        pub unsafe trait SliceIndex<T: ?Sized> {\n+            type Output: ?Sized;\n+        }\n+        unsafe impl<T> SliceIndex<[T]> for usize {\n+            type Output = T;\n+        }\n+        // endregion:slice\n+    }\n+    pub use self::index::{Index, IndexMut};\n+    // endregion:index\n+\n     // region:range\n     mod range {\n         #[lang = \"RangeFull\"]"}]}