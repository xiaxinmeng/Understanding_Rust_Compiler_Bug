{"sha": "d8a1454dd858ea6188a264a4690b7fffb9cd19bf", "node_id": "C_kwDOAAsO6NoAKGQ4YTE0NTRkZDg1OGVhNjE4OGEyNjRhNDY5MGI3ZmZmYjljZDE5YmY", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-09-04T23:07:20Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-11-10T00:21:36Z"}, "message": "miri: Detect uninitialized integers and floats\n\nChange the Miri engine to allow configuring whether to check\ninitialization of integers and floats. This allows the Miri tool to\noptionally check for initialization if requested by the user.", "tree": {"sha": "402058c18072d4364e58b6ea1109485318f3437b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/402058c18072d4364e58b6ea1109485318f3437b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d8a1454dd858ea6188a264a4690b7fffb9cd19bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d8a1454dd858ea6188a264a4690b7fffb9cd19bf", "html_url": "https://github.com/rust-lang/rust/commit/d8a1454dd858ea6188a264a4690b7fffb9cd19bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d8a1454dd858ea6188a264a4690b7fffb9cd19bf/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "00d5e42e776da900049fe19087bc9b0057ec70cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/00d5e42e776da900049fe19087bc9b0057ec70cd", "html_url": "https://github.com/rust-lang/rust/commit/00d5e42e776da900049fe19087bc9b0057ec70cd"}], "stats": {"total": 17, "additions": 12, "deletions": 5}, "files": [{"sha": "51207828935d231b2e54b20898c82a4d49654f5d", "filename": "compiler/rustc_const_eval/src/interpret/machine.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d8a1454dd858ea6188a264a4690b7fffb9cd19bf/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8a1454dd858ea6188a264a4690b7fffb9cd19bf/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs?ref=d8a1454dd858ea6188a264a4690b7fffb9cd19bf", "patch": "@@ -131,6 +131,10 @@ pub trait Machine<'mir, 'tcx>: Sized {\n     /// Whether to enforce the validity invariant\n     fn enforce_validity(ecx: &InterpCx<'mir, 'tcx, Self>) -> bool;\n \n+    /// Whether to enforce validity (e.g., initialization and not having ptr provenance)\n+    /// of integers and floats.\n+    fn enforce_number_validity(ecx: &InterpCx<'mir, 'tcx, Self>) -> bool;\n+\n     /// Whether function calls should be [ABI](Abi)-checked.\n     fn enforce_abi(_ecx: &InterpCx<'mir, 'tcx, Self>) -> bool {\n         true\n@@ -426,6 +430,11 @@ pub macro compile_time_machine(<$mir: lifetime, $tcx: lifetime>) {\n         false // for now, we don't enforce validity\n     }\n \n+    #[inline(always)]\n+    fn enforce_number_validity(_ecx: &InterpCx<$mir, $tcx, Self>) -> bool {\n+        true\n+    }\n+\n     #[inline(always)]\n     fn call_extra_fn(\n         _ecx: &mut InterpCx<$mir, $tcx, Self>,"}, {"sha": "6be3e19a833f49daeb93032188f70a11d8331693", "filename": "compiler/rustc_const_eval/src/interpret/validity.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d8a1454dd858ea6188a264a4690b7fffb9cd19bf/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8a1454dd858ea6188a264a4690b7fffb9cd19bf/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs?ref=d8a1454dd858ea6188a264a4690b7fffb9cd19bf", "patch": "@@ -520,17 +520,14 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n                 let value = self.read_scalar(value)?;\n                 // NOTE: Keep this in sync with the array optimization for int/float\n                 // types below!\n-                if self.ctfe_mode.is_some() {\n+                if M::enforce_number_validity(self.ecx) {\n                     // Integers/floats in CTFE: Must be scalar bits, pointers are dangerous\n                     let is_bits = value.check_init().map_or(false, |v| v.try_to_int().is_ok());\n                     if !is_bits {\n                         throw_validation_failure!(self.path,\n                             { \"{}\", value } expected { \"initialized plain (non-pointer) bytes\" }\n                         )\n                     }\n-                } else {\n-                    // At run-time, for now, we accept *anything* for these types, including\n-                    // uninit. We should fix that, but let's start low.\n                 }\n                 Ok(true)\n             }\n@@ -855,9 +852,10 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValueVisitor<'mir, 'tcx, M>\n                     }\n                 };\n \n+                let allow_uninit_and_ptr = !M::enforce_number_validity(self.ecx);\n                 match alloc.check_bytes(\n                     alloc_range(Size::ZERO, size),\n-                    /*allow_uninit_and_ptr*/ self.ctfe_mode.is_none(),\n+                    allow_uninit_and_ptr,\n                 ) {\n                     // In the happy case, we needn't check anything else.\n                     Ok(()) => {}"}]}