{"sha": "ac671c31725b5bd42ad902195ac74f16c3c6c1ad", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjNjcxYzMxNzI1YjViZDQyYWQ5MDIxOTVhYzc0ZjE2YzNjNmMxYWQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-13T22:37:07Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-21T01:23:47Z"}, "message": "Convert tests to use bare-fn spawn\n\nIssue #1022", "tree": {"sha": "f7ff9e185c6537d69e2844c4fa07f58b8ad0b9b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7ff9e185c6537d69e2844c4fa07f58b8ad0b9b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac671c31725b5bd42ad902195ac74f16c3c6c1ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac671c31725b5bd42ad902195ac74f16c3c6c1ad", "html_url": "https://github.com/rust-lang/rust/commit/ac671c31725b5bd42ad902195ac74f16c3c6c1ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4341e50e3a115c00474ecae24b6e1c45fd00cfeb", "url": "https://api.github.com/repos/rust-lang/rust/commits/4341e50e3a115c00474ecae24b6e1c45fd00cfeb", "html_url": "https://github.com/rust-lang/rust/commit/4341e50e3a115c00474ecae24b6e1c45fd00cfeb"}], "stats": {"total": 428, "additions": 214, "deletions": 214}, "files": [{"sha": "018cdc330e8b05299376dc21a37656e671d9e839", "filename": "src/test/bench/shootout-pfib.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-pfib.rs?ref=ac671c31725b5bd42ad902195ac74f16c3c6c1ad", "patch": "@@ -27,23 +27,24 @@ import std::comm::send;\n import std::comm::recv;\n \n fn fib(n: int) -> int {\n-    fn pfib(c: chan<int>, n: int) {\n+    fn# pfib(args: (chan<int>, int)) {\n+        let (c, n) = args;\n         if n == 0 {\n             send(c, 0);\n         } else if n <= 2 {\n             send(c, 1);\n         } else {\n             let p = port();\n \n-            let t1 = task::spawn(bind pfib(chan(p), n - 1));\n-            let t2 = task::spawn(bind pfib(chan(p), n - 2));\n+            let t1 = task::spawn2((chan(p), n - 1), pfib);\n+            let t2 = task::spawn2((chan(p), n - 2), pfib);\n \n             send(c, recv(p) + recv(p));\n         }\n     }\n \n     let p = port();\n-    let t = task::spawn(bind pfib(chan(p), n));\n+    let t = task::spawn2((chan(p), n), pfib);\n     ret recv(p);\n }\n \n@@ -61,7 +62,7 @@ fn parse_opts(argv: [str]) -> config {\n     }\n }\n \n-fn stress_task(id: int) {\n+fn# stress_task(&&id: int) {\n     let i = 0;\n     while true {\n         let n = 15;\n@@ -74,7 +75,7 @@ fn stress_task(id: int) {\n fn stress(num_tasks: int) {\n     let tasks = [];\n     for each i: int in range(0, num_tasks) {\n-        tasks += [task::spawn_joinable(bind stress_task(i))];\n+        tasks += [task::spawn_joinable2(copy i, stress_task)];\n     }\n     for t in tasks { task::join(t); }\n }"}, {"sha": "87de2a8ccb529236ba6c9cd895c6ef589f7f0f78", "filename": "src/test/bench/task-perf-spawnalot.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Fbench%2Ftask-perf-spawnalot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Fbench%2Ftask-perf-spawnalot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-spawnalot.rs?ref=ac671c31725b5bd42ad902195ac74f16c3c6c1ad", "patch": "@@ -4,22 +4,21 @@ import std::task;\n import std::uint;\n import std::str;\n \n-fn f(n: uint) {\n+fn# f(&&n: uint) {\n     let i = 0u;\n     while i < n {\n-        let thunk = g;\n-        task::join(task::spawn_joinable(thunk));\n+        task::join(task::spawn_joinable2((), g));\n         i += 1u;\n     }\n }\n \n-fn g() { }\n+fn# g(&&_i: ()) { }\n \n fn main(args: [str]) {\n     let n =\n         if vec::len(args) < 2u {\n             10u\n         } else { uint::parse_buf(str::bytes(args[1]), 10u) };\n     let i = 0u;\n-    while i < n { task::spawn(bind f(n)); i += 1u; }\n+    while i < n { task::spawn2(copy n, f); i += 1u; }\n }"}, {"sha": "62f2b704a2e7c7669232bc9fa935d2477787f468", "filename": "src/test/bench/task-perf-vector-party.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Fbench%2Ftask-perf-vector-party.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Fbench%2Ftask-perf-vector-party.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-vector-party.rs?ref=ac671c31725b5bd42ad902195ac74f16c3c6c1ad", "patch": "@@ -9,7 +9,7 @@ import std::uint;\n import std::str;\n import std::task;\n \n-fn f(n: uint) {\n+fn# f(&&n: uint) {\n     for each i in uint::range(0u, n) {\n         let v: [u8] = [];\n         vec::reserve(v, 1000u);\n@@ -21,5 +21,5 @@ fn main(args: [str]) {\n         if vec::len(args) < 2u {\n             100u\n         } else { uint::parse_buf(str::bytes(args[1]), 10u) };\n-    for each i in uint::range(0u, 100u) { task::spawn(bind f(n)); }\n+    for each i in uint::range(0u, 100u) { task::spawn2(copy n, f); }\n }"}, {"sha": "cedb8c53ad403ff4f07cedb616eed4fe8863f5ba", "filename": "src/test/bench/task-perf-word-count.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs?ref=ac671c31725b5bd42ad902195ac74f16c3c6c1ad", "patch": "@@ -70,12 +70,13 @@ mod map_reduce {\n        [joinable_task] {\n         let tasks = [];\n         for i: str in inputs {\n-            tasks += [task::spawn_joinable(bind map_task(ctrl, i))];\n+            tasks += [task::spawn_joinable2((ctrl, i), map_task)];\n         }\n         ret tasks;\n     }\n \n-    fn map_task(ctrl: chan<ctrl_proto>, input: str) {\n+    fn# map_task(args: (chan<ctrl_proto>, str)) {\n+        let (ctrl, input) = args;\n         // log_err \"map_task \" + input;\n         let intermediates = map::new_str_hash();\n \n@@ -107,7 +108,8 @@ mod map_reduce {\n         send(ctrl, mapper_done);\n     }\n \n-    fn reduce_task(key: str, out: chan<chan<reduce_proto>>) {\n+    fn# reduce_task(args: (str, chan<chan<reduce_proto>>)) {\n+        let (key, out) = args;\n         let p = port();\n \n         send(out, chan(p));\n@@ -169,7 +171,7 @@ mod map_reduce {\n                     // log_err \"creating new reducer for \" + k;\n                     let p = port();\n                     tasks +=\n-                        [task::spawn_joinable(bind reduce_task(k, chan(p)))];\n+                        [task::spawn_joinable2((k, chan(p)), reduce_task)];\n                     c = recv(p);\n                     reducers.insert(k, c);\n                   }"}, {"sha": "76eaf2e29ace7b8d28417331be98034e992e1662", "filename": "src/test/compile-fail/spawn-non-nil-fn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Fcompile-fail%2Fspawn-non-nil-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Fcompile-fail%2Fspawn-non-nil-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fspawn-non-nil-fn.rs?ref=ac671c31725b5bd42ad902195ac74f16c3c6c1ad", "patch": "@@ -3,6 +3,6 @@\n use std;\n import std::task;\n \n-fn f(x: int) -> int { ret x; }\n+fn# f(&&x: int) -> int { ret x; }\n \n-fn main() { task::spawn(bind f(10)); }\n+fn main() { task::spawn2(10, f); }"}, {"sha": "e471908d5dba5db2860b3f4ebc6bbbb4b8540857", "filename": "src/test/run-fail/linked-failure.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Frun-fail%2Flinked-failure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Frun-fail%2Flinked-failure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Flinked-failure.rs?ref=ac671c31725b5bd42ad902195ac74f16c3c6c1ad", "patch": "@@ -6,11 +6,10 @@ import std::task;\n import std::comm::port;\n import std::comm::recv;\n \n-fn child() { assert (1 == 2); }\n+fn# child(&&_i: ()) { assert (1 == 2); }\n \n fn main() {\n     let p = port::<int>();\n-    let f = child;\n-    task::spawn(f);\n+    task::spawn2((), child);\n     let x = recv(p);\n }"}, {"sha": "1a9fe3a8d839bbcac819d32ccb8af5236a1d2046", "filename": "src/test/run-fail/linked-failure2.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Frun-fail%2Flinked-failure2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Frun-fail%2Flinked-failure2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Flinked-failure2.rs?ref=ac671c31725b5bd42ad902195ac74f16c3c6c1ad", "patch": "@@ -7,11 +7,10 @@ import std::comm::chan;\n import std::comm::port;\n import std::comm::recv;\n \n-fn child() { fail; }\n+fn# child(&&_i: ()) { fail; }\n \n fn main() {\n     let p = port::<int>();\n-    let f = child;\n-    task::spawn(f);\n+    task::spawn2((), child);\n     task::yield();\n }"}, {"sha": "7e280c3d20f575814b879cb729f5289b158b4571", "filename": "src/test/run-fail/linked-failure3.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Frun-fail%2Flinked-failure3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Frun-fail%2Flinked-failure3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Flinked-failure3.rs?ref=ac671c31725b5bd42ad902195ac74f16c3c6c1ad", "patch": "@@ -6,18 +6,16 @@ import std::task;\n import std::comm::port;\n import std::comm::recv;\n \n-fn grandchild() { fail; }\n+fn# grandchild(&&_i: ()) { fail; }\n \n-fn child() {\n+fn# child(&&_i: ()) {\n     let p = port::<int>();\n-    let f = grandchild;\n-    task::spawn(f);\n+    task::spawn2((), grandchild);\n     let x = recv(p);\n }\n \n fn main() {\n     let p = port::<int>();\n-    let f = child;\n-    task::spawn(f);\n+    task::spawn2((), child);\n     let x = recv(p);\n }"}, {"sha": "ea161cb9a4f80844a28fbff978d9804e654d4433", "filename": "src/test/run-fail/task-comm-recv-block.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Frun-fail%2Ftask-comm-recv-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Frun-fail%2Ftask-comm-recv-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Ftask-comm-recv-block.rs?ref=ac671c31725b5bd42ad902195ac74f16c3c6c1ad", "patch": "@@ -4,13 +4,13 @@ use std;\n import std::task;\n import std::comm;\n \n-fn goodfail() {\n+fn# goodfail(&&_i: ()) {\n     task::yield();\n     fail \"goodfail\";\n }\n \n fn main() {\n-    task::spawn(bind goodfail());\n+    task::spawn2((), goodfail);\n     let po = comm::port();\n     // We shouldn't be able to get past this recv since there's no\n     // message available"}, {"sha": "7122a3d50fafa76574340c38b8f7581734c5accf", "filename": "src/test/run-pass/basic-1.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Frun-pass%2Fbasic-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Frun-pass%2Fbasic-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbasic-1.rs?ref=ac671c31725b5bd42ad902195ac74f16c3c6c1ad", "patch": "@@ -7,12 +7,12 @@ import std::comm::send;\n import std::comm::recv;\n import std::task;\n \n-fn a(c: chan<int>) { send(c, 10); }\n+fn# a(c: chan<int>) { send(c, 10); }\n \n fn main() {\n     let p = port();\n-    task::spawn(bind a(chan(p)));\n-    task::spawn(bind b(chan(p)));\n+    task::spawn2(chan(p), a);\n+    task::spawn2(chan(p), a);\n     let n: int = 0;\n     n = recv(p);\n     n = recv(p);"}, {"sha": "c47cc395fb611da8c24d7a9cd3b983473bd70c2b", "filename": "src/test/run-pass/basic-2.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Frun-pass%2Fbasic-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Frun-pass%2Fbasic-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbasic-2.rs?ref=ac671c31725b5bd42ad902195ac74f16c3c6c1ad", "patch": "@@ -7,19 +7,19 @@ import std::comm::chan;\n import std::comm::recv;\n import std::task;\n \n-fn a(c: chan<int>) { log \"task a0\"; log \"task a1\"; send(c, 10); }\n+fn# a(c: chan<int>) { log \"task a0\"; log \"task a1\"; send(c, 10); }\n \n fn main() {\n     let p = comm::port();\n-    task::spawn(bind a(chan(p)));\n-    task::spawn(bind b(chan(p)));\n+    task::spawn2(chan(p), a);\n+    task::spawn2(chan(p), b);\n     let n: int = 0;\n     n = recv(p);\n     n = recv(p);\n     log \"Finished.\";\n }\n \n-fn b(c: chan<int>) {\n+fn# b(c: chan<int>) {\n     log \"task b0\";\n     log \"task b1\";\n     log \"task b2\";"}, {"sha": "d4c92e33a1fd33b9e49f96d4e7401dd9ae3b2154", "filename": "src/test/run-pass/basic.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Frun-pass%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Frun-pass%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbasic.rs?ref=ac671c31725b5bd42ad902195ac74f16c3c6c1ad", "patch": "@@ -7,7 +7,7 @@ import std::comm::chan;\n import std::comm::recv;\n import std::task;\n \n-fn a(c: chan<int>) {\n+fn# a(c: chan<int>) {\n     if true {\n         log \"task a\";\n         log \"task a\";\n@@ -26,8 +26,8 @@ fn main() {\n     let n: int = 2 + 3 * 7;\n     let s: str = \"hello there\";\n     let p = comm::port();\n-    task::spawn(bind a(chan(p)));\n-    task::spawn(bind b(chan(p)));\n+    task::spawn2(chan(p), a);\n+    task::spawn2(chan(p), b);\n     let x: int = 10;\n     x = g(n, s);\n     log x;\n@@ -37,7 +37,7 @@ fn main() {\n     log \"children finished, root finishing\";\n }\n \n-fn b(c: chan<int>) {\n+fn# b(c: chan<int>) {\n     if true {\n         log \"task b\";\n         log \"task b\";"}, {"sha": "df98d52d9fd4a7d8e9789b41a51509aad3f750ed", "filename": "src/test/run-pass/binops.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Frun-pass%2Fbinops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Frun-pass%2Fbinops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbinops.rs?ref=ac671c31725b5bd42ad902195ac74f16c3c6c1ad", "patch": "@@ -87,10 +87,10 @@ fn test_ptr() {\n }\n \n fn test_task() {\n-    fn f() { }\n+    fn# f(&&_i: ()) { }\n     let f1 = f, f2 = f;\n-    let t1 = task::spawn(f1);\n-    let t2 = task::spawn(f2);\n+    let t1 = task::spawn2((), f1);\n+    let t2 = task::spawn2((), f2);\n \n     assert (t1 == t1);\n     assert (t1 != t2);"}, {"sha": "575a120a0db8621295d9db42728d47866b2e3be0", "filename": "src/test/run-pass/chan-leak.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Frun-pass%2Fchan-leak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Frun-pass%2Fchan-leak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fchan-leak.rs?ref=ac671c31725b5bd42ad902195ac74f16c3c6c1ad", "patch": "@@ -12,7 +12,7 @@ tag request { quit; close(chan<bool>); }\n \n type ctx = chan<request>;\n \n-fn request_task(c: chan<ctx>) {\n+fn# request_task(c: chan<ctx>) {\n     let p = port();\n     send(c, chan(p));\n     let req: request;\n@@ -23,7 +23,7 @@ fn request_task(c: chan<ctx>) {\n \n fn new() -> ctx {\n     let p = port();\n-    let t = task::spawn(bind request_task(chan(p)));\n+    let t = task::spawn2(chan(p), request_task);\n     let cx: ctx;\n     cx = recv(p);\n     ret cx;"}, {"sha": "055fc69b97d12da97678dd3e3d34323a45ca531f", "filename": "src/test/run-pass/child-outlives-parent.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Frun-pass%2Fchild-outlives-parent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Frun-pass%2Fchild-outlives-parent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fchild-outlives-parent.rs?ref=ac671c31725b5bd42ad902195ac74f16c3c6c1ad", "patch": "@@ -3,6 +3,6 @@\n use std;\n import std::task;\n \n-fn child2(-s: str) { }\n+fn# child2(&&s: str) { }\n \n-fn main() { let x = task::spawn(bind child2(\"hi\")); }\n+fn main() { let x = task::spawn2(\"hi\", child2); }"}, {"sha": "39dea4f39beee84b23170364a7347e09cda8c84a", "filename": "src/test/run-pass/comm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Frun-pass%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Frun-pass%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcomm.rs?ref=ac671c31725b5bd42ad902195ac74f16c3c6c1ad", "patch": "@@ -9,14 +9,14 @@ import std::task;\n \n fn main() {\n     let p = comm::port();\n-    let t = task::spawn(bind child(chan(p)));\n+    let t = task::spawn2(chan(p), child);\n     let y = recv(p);\n     log_err \"received\";\n     log_err y;\n     assert (y == 10);\n }\n \n-fn child(c: chan<int>) {\n+fn# child(c: chan<int>) {\n     log_err \"sending\";\n     send(c, 10);\n     log_err \"value sent\""}, {"sha": "a6783267c5834c720b859d962fae07e43b1cd230", "filename": "src/test/run-pass/hashmap-memory.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs?ref=ac671c31725b5bd42ad902195ac74f16c3c6c1ad", "patch": "@@ -33,10 +33,11 @@ mod map_reduce {\n     tag ctrl_proto { find_reducer([u8], chan<int>); mapper_done; }\n \n     fn start_mappers(ctrl: chan<ctrl_proto>, inputs: [str]) {\n-        for i: str in inputs { task::spawn(bind map_task(ctrl, i)); }\n+        for i: str in inputs { task::spawn2((ctrl, i), map_task); }\n     }\n \n-    fn map_task(ctrl: chan<ctrl_proto>, -input: str) {\n+    fn# map_task(&&args: (chan<ctrl_proto>, str)) {\n+        let (ctrl, input) = args;\n \n         let intermediates = map::new_str_hash();\n "}, {"sha": "8eace3302b543ee3f0d055243793085e09fcf5d6", "filename": "src/test/run-pass/issue-506.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Frun-pass%2Fissue-506.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Frun-pass%2Fissue-506.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-506.rs?ref=ac671c31725b5bd42ad902195ac74f16c3c6c1ad", "patch": "@@ -9,6 +9,6 @@ native \"rust\" mod rustrt {\n     fn task_yield();\n }\n \n-fn yield_wrap() unsafe { rustrt::task_yield(); }\n+fn# yield_wrap(&&_i: ()) unsafe { rustrt::task_yield(); }\n \n-fn main() { let f = yield_wrap; task::spawn(f); }\n+fn main() { task::spawn2((), yield_wrap); }"}, {"sha": "457cf4533f661a15d5e584b728869f0fa90881ff", "filename": "src/test/run-pass/issue-507.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Frun-pass%2Fissue-507.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Frun-pass%2Fissue-507.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-507.rs?ref=ac671c31725b5bd42ad902195ac74f16c3c6c1ad", "patch": "@@ -15,17 +15,17 @@ import std::comm::send;\n import std::comm::port;\n import std::comm::recv;\n \n-fn grandchild(c: chan<int>) { send(c, 42); }\n+fn# grandchild(c: chan<int>) { send(c, 42); }\n \n-fn child(c: chan<int>) {\n-    let _grandchild = task::spawn_joinable(bind grandchild(c));\n+fn# child(c: chan<int>) {\n+    let _grandchild = task::spawn_joinable2(c, grandchild);\n     join(_grandchild);\n }\n \n fn main() {\n     let p = comm::port();\n \n-    let _child = task::spawn_joinable(bind child(chan(p)));\n+    let _child = task::spawn_joinable2(chan(p), child);\n \n     let x: int = recv(p);\n "}, {"sha": "bb8f04b84bf9c61df4427d358cd0d373290abf17", "filename": "src/test/run-pass/issue-687.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Frun-pass%2Fissue-687.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Frun-pass%2Fissue-687.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-687.rs?ref=ac671c31725b5bd42ad902195ac74f16c3c6c1ad", "patch": "@@ -9,13 +9,14 @@ import std::comm::send;\n \n tag msg { closed; received([u8]); }\n \n-fn producer(c: chan<[u8]>) {\n+fn# producer(c: chan<[u8]>) {\n     send(c, [1u8, 2u8, 3u8, 4u8]);\n     let empty: [u8] = [];\n     send(c, empty);\n }\n \n-fn packager(cb: chan<chan<[u8]>>, msg: chan<msg>) {\n+fn# packager(&&args: (chan<chan<[u8]>>, chan<msg>)) {\n+    let (cb, msg) = args;\n     let p: port<[u8]> = port();\n     send(cb, chan(p));\n     while true {\n@@ -36,10 +37,10 @@ fn packager(cb: chan<chan<[u8]>>, msg: chan<msg>) {\n fn main() {\n     let p: port<msg> = port();\n     let recv_reader: port<chan<[u8]>> = port();\n-    let pack = task::spawn(bind packager(chan(recv_reader), chan(p)));\n+    let pack = task::spawn2((chan(recv_reader), chan(p)), packager);\n \n     let source_chan: chan<[u8]> = recv(recv_reader);\n-    let prod = task::spawn(bind producer(source_chan));\n+    let prod = task::spawn2(source_chan, producer);\n \n     while true {\n         let msg = recv(p);"}, {"sha": "33fdc72c4bbc237f51e727a968025dc9f86c33b8", "filename": "src/test/run-pass/ivec-tag.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Frun-pass%2Fivec-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Frun-pass%2Fivec-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fivec-tag.rs?ref=ac671c31725b5bd42ad902195ac74f16c3c6c1ad", "patch": "@@ -7,15 +7,15 @@ import std::comm::port;\n import std::comm::send;\n import std::comm::recv;\n \n-fn producer(c: chan<[u8]>) {\n+fn# producer(c: chan<[u8]>) {\n     send(c,\n          [1u8, 2u8, 3u8, 4u8, 5u8, 6u8, 7u8, 8u8, 9u8, 10u8, 11u8, 12u8,\n           13u8]);\n }\n \n fn main() {\n     let p: port<[u8]> = port();\n-    let prod = task::spawn(bind producer(chan(p)));\n+    let prod = task::spawn2(chan(p), producer);\n \n     let data: [u8] = recv(p);\n }"}, {"sha": "326841ed762e403ae47d9af638de162bef372eb4", "filename": "src/test/run-pass/join.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Frun-pass%2Fjoin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Frun-pass%2Fjoin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fjoin.rs?ref=ac671c31725b5bd42ad902195ac74f16c3c6c1ad", "patch": "@@ -5,12 +5,11 @@ use std;\n import std::task::*;\n \n fn main() {\n-    let f = child;\n-    let other = spawn_joinable(f);\n+    let other = spawn_joinable2((), child);\n     log_err \"1\";\n     yield();\n     join(other);\n     log_err \"3\";\n }\n \n-fn child() { log_err \"2\"; }\n+fn# child(&&_i: ()) { log_err \"2\"; }"}, {"sha": "3d2588e798a600d4fb9be00375badcc810b2ad4c", "filename": "src/test/run-pass/lazychan.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Frun-pass%2Flazychan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Frun-pass%2Flazychan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flazychan.rs?ref=ac671c31725b5bd42ad902195ac74f16c3c6c1ad", "patch": "@@ -8,17 +8,17 @@ fn main() {\n     let p = port();\n     let y: int;\n \n-    task::spawn(bind child(chan(p)));\n+    task::spawn2(chan(p), child);\n     y = recv(p);\n     log \"received 1\";\n     log y;\n     assert (y == 10);\n \n-    task::spawn(bind child(chan(p)));\n+    task::spawn2(chan(p), child);\n     y = recv(p);\n     log \"received 2\";\n     log y;\n     assert (y == 10);\n }\n \n-fn child(c: chan<int>) { send(c, 10); }\n+fn# child(c: chan<int>) { send(c, 10); }"}, {"sha": "6f0d6efb2cf81ba954fae4f58676df7daf5496f9", "filename": "src/test/run-pass/linked-failure.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Frun-pass%2Flinked-failure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Frun-pass%2Flinked-failure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flinked-failure.rs?ref=ac671c31725b5bd42ad902195ac74f16c3c6c1ad", "patch": "@@ -5,19 +5,17 @@ import std::task;\n import std::comm::port;\n import std::comm::recv;\n \n-fn child() { assert (1 == 2); }\n+fn# child(&&_i: ()) { assert (1 == 2); }\n \n-fn parent() {\n+fn# parent(&&_i: ()) {\n     // Since this task isn't supervised it won't bring down the whole\n     // process\n     task::unsupervise();\n     let p = port::<int>();\n-    let f = child;\n-    task::spawn(f);\n+    task::spawn2((), child);\n     let x = recv(p);\n }\n \n fn main() {\n-    let f = parent;\n-    task::spawn(f);\n+    task::spawn2((), parent);\n }\n\\ No newline at end of file"}, {"sha": "33e116bed1ca68b07a918a29b4912633450a4c82", "filename": "src/test/run-pass/lots-a-fail.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Frun-pass%2Flots-a-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Frun-pass%2Flots-a-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flots-a-fail.rs?ref=ac671c31725b5bd42ad902195ac74f16c3c6c1ad", "patch": "@@ -4,19 +4,17 @@ import std::task;\n import std::comm;\n import std::uint;\n \n-fn die() {\n+fn# die(&&_i: ()) {\n     fail;\n }\n \n-fn iloop() {\n+fn# iloop(&&_i: ()) {\n     task::unsupervise();\n-    let f = die;\n-    task::spawn(f);\n+    task::spawn2((), die);\n }\n \n fn main() {\n     for each i in uint::range(0u, 100u) {\n-        let f = iloop;\n-        task::spawn(f);\n+        task::spawn2((), iloop);\n     }\n }\n\\ No newline at end of file"}, {"sha": "660ea0eb568706cb267546fa2210cc80c146de57", "filename": "src/test/run-pass/many.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Frun-pass%2Fmany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Frun-pass%2Fmany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmany.rs?ref=ac671c31725b5bd42ad902195ac74f16c3c6c1ad", "patch": "@@ -4,20 +4,21 @@ use std;\n import std::task;\n import std::comm;\n \n-fn sub(parent: comm::chan<int>, id: int) {\n+fn# sub(&&args: (comm::chan<int>, int)) {\n+    let (parent, id) = args;\n     if id == 0 {\n         comm::send(parent, 0);\n     } else {\n         let p = comm::port();\n-        let child = task::spawn(bind sub(comm::chan(p), id - 1));\n+        let child = task::spawn2((comm::chan(p), id - 1), sub);\n         let y = comm::recv(p);\n         comm::send(parent, y + 1);\n     }\n }\n \n fn main() {\n     let p = comm::port();\n-    let child = task::spawn(bind sub(comm::chan(p), 200));\n+    let child = task::spawn2((comm::chan(p), 200), sub);\n     let y = comm::recv(p);\n     log \"transmission complete\";\n     log y;"}, {"sha": "7dced1afb1e706d8c477ac2b777b3e4cd1647b67", "filename": "src/test/run-pass/send-iloop.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Frun-pass%2Fsend-iloop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Frun-pass%2Fsend-iloop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsend-iloop.rs?ref=ac671c31725b5bd42ad902195ac74f16c3c6c1ad", "patch": "@@ -4,14 +4,13 @@ import std::task;\n import std::comm;\n import std::uint;\n \n-fn die() {\n+fn# die(&&_i: ()) {\n     fail;\n }\n \n-fn iloop() {\n+fn# iloop(&&_i: ()) {\n     task::unsupervise();\n-    let f = die;\n-    task::spawn(f);\n+    task::spawn2((), die);\n     let p = comm::port::<()>();\n     let c = comm::chan(p);\n     while true {\n@@ -21,7 +20,6 @@ fn iloop() {\n \n fn main() {\n     for each i in uint::range(0u, 16u) {\n-        let f = iloop;\n-        task::spawn(f);\n+        task::spawn2((), iloop);\n     }\n }\n\\ No newline at end of file"}, {"sha": "2e32a5299915f3e7a74f1f5c2d2f0b50cc08d50a", "filename": "src/test/run-pass/spawn-fn.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Frun-pass%2Fspawn-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Frun-pass%2Fspawn-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspawn-fn.rs?ref=ac671c31725b5bd42ad902195ac74f16c3c6c1ad", "patch": "@@ -4,12 +4,15 @@ use std;\n import std::task::yield;\n import std::task;\n \n-fn x(-s: str, n: int) { log s; log n; }\n+fn# x(&&args: (str, int)) {\n+    let (s, n) = args;\n+    log s; log n;\n+}\n \n fn main() {\n-    task::spawn(bind x(\"hello from first spawned fn\", 65));\n-    task::spawn(bind x(\"hello from second spawned fn\", 66));\n-    task::spawn(bind x(\"hello from third spawned fn\", 67));\n+    task::spawn2((\"hello from first spawned fn\", 65), x);\n+    task::spawn2((\"hello from second spawned fn\", 66), x);\n+    task::spawn2((\"hello from third spawned fn\", 67), x);\n     let i: int = 30;\n     while i > 0 { i = i - 1; log \"parent sleeping\"; yield(); }\n }"}, {"sha": "d106e4b04bdce1df491f92722c3cb0872d50f2d0", "filename": "src/test/run-pass/spawn-module-qualified.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Frun-pass%2Fspawn-module-qualified.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Frun-pass%2Fspawn-module-qualified.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspawn-module-qualified.rs?ref=ac671c31725b5bd42ad902195ac74f16c3c6c1ad", "patch": "@@ -1,9 +1,9 @@\n use std;\n import std::task::join;\n-import std::task::spawn_joinable;\n+import std::task::spawn_joinable2;\n \n-fn main() { let x = spawn_joinable(bind m::child(10)); join(x); }\n+fn main() { let x = spawn_joinable2(10, m::child); join(x); }\n \n mod m {\n-    fn child(i: int) { log i; }\n+    fn# child(&&i: int) { log i; }\n }"}, {"sha": "c3af9dd9e57914ad783260a255e3f2a693bcf50c", "filename": "src/test/run-pass/spawn-types.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Frun-pass%2Fspawn-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Frun-pass%2Fspawn-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspawn-types.rs?ref=ac671c31725b5bd42ad902195ac74f16c3c6c1ad", "patch": "@@ -12,9 +12,12 @@ import std::task;\n \n type ctx = comm::chan<int>;\n \n-fn iotask(cx: ctx, -ip: str) { assert (str::eq(ip, \"localhost\")); }\n+fn# iotask(&&args: (ctx, str)) {\n+    let (cx, ip) = args;\n+    assert (str::eq(ip, \"localhost\"));\n+}\n \n fn main() {\n     let p = comm::port::<int>();\n-    task::spawn(bind iotask(comm::chan(p), \"localhost\"));\n+    task::spawn2((comm::chan(p), \"localhost\"), iotask);\n }"}, {"sha": "2e4a5782347aab88342cf77e6042c52e4358acb9", "filename": "src/test/run-pass/spawn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Frun-pass%2Fspawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Frun-pass%2Fspawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspawn.rs?ref=ac671c31725b5bd42ad902195ac74f16c3c6c1ad", "patch": "@@ -4,9 +4,9 @@ use std;\n \n import std::task;\n \n-fn main() { let t = task::spawn_joinable(bind child(10)); task::join(t); }\n+fn main() { let t = task::spawn_joinable2(10, child); task::join(t); }\n \n-fn child(i: int) { log_err i; assert (i == 10); }\n+fn# child(&&i: int) { log_err i; assert (i == 10); }\n \n // Local Variables:\n // mode: rust;"}, {"sha": "38770de9689d9bddb46a0a4fb62caae1a4722760", "filename": "src/test/run-pass/spawn2.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Frun-pass%2Fspawn2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Frun-pass%2Fspawn2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspawn2.rs?ref=ac671c31725b5bd42ad902195ac74f16c3c6c1ad", "patch": "@@ -1,12 +1,12 @@\n // -*- rust -*-\n \n use std;\n-import std::task::spawn;\n+import std::task::spawn2;\n \n-fn main() { spawn(bind child(10, 20, 30, 40, 50, 60, 70, 80, 90)); }\n+fn main() { spawn2((10, 20, 30, 40, 50, 60, 70, 80, 90), child); }\n \n-fn child(i1: int, i2: int, i3: int, i4: int, i5: int, i6: int, i7: int,\n-         i8: int, i9: int) {\n+fn# child(&&args: (int, int, int, int, int, int, int, int, int)) {\n+    let (i1, i2, i3, i4, i5, i6, i7, i8, i9) = args;\n     log_err i1;\n     log_err i2;\n     log_err i3;"}, {"sha": "03be2053e13cf3da81a13abc8463bb6845cf3903", "filename": "src/test/run-pass/task-comm-0.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Frun-pass%2Ftask-comm-0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Frun-pass%2Ftask-comm-0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-0.rs?ref=ac671c31725b5bd42ad902195ac74f16c3c6c1ad", "patch": "@@ -7,7 +7,7 @@ import std::task;\n \n fn main() { test05(); }\n \n-fn test05_start(ch : chan<int>) {\n+fn# test05_start(ch : chan<int>) {\n     log_err ch;\n     send(ch, 10);\n     log_err \"sent 10\";\n@@ -20,7 +20,7 @@ fn test05_start(ch : chan<int>) {\n fn test05() {\n     let po = comm::port();\n     let ch = comm::chan(po);\n-    task::spawn(bind test05_start(ch));\n+    task::spawn2(ch, test05_start);\n     let value = comm::recv(po);\n     log_err value;\n     value = comm::recv(po);"}, {"sha": "93a66dae433e190c6d8a677a312b827d748459cf", "filename": "src/test/run-pass/task-comm-1.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Frun-pass%2Ftask-comm-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Frun-pass%2Ftask-comm-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-1.rs?ref=ac671c31725b5bd42ad902195ac74f16c3c6c1ad", "patch": "@@ -1,15 +1,14 @@\n use std;\n \n-import std::task::spawn_joinable;\n+import std::task::spawn_joinable2;\n import std::task::join;\n \n fn main() { test00(); }\n \n-fn start() { log \"Started / Finished task.\"; }\n+fn# start(&&_i: ()) { log \"Started / Finished task.\"; }\n \n fn test00() {\n-    let f = start;\n-    let t = spawn_joinable(f);\n+    let t = spawn_joinable2((), start);\n     join(t);\n     log \"Completing.\";\n }"}, {"sha": "d9c18818d1754ca0c90bbfafd7e6b7d901e90385", "filename": "src/test/run-pass/task-comm-10.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Frun-pass%2Ftask-comm-10.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Frun-pass%2Ftask-comm-10.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-10.rs?ref=ac671c31725b5bd42ad902195ac74f16c3c6c1ad", "patch": "@@ -2,7 +2,7 @@ use std;\n import std::task;\n import std::comm;\n \n-fn start(c: comm::chan<comm::chan<str>>) {\n+fn# start(c: comm::chan<comm::chan<str>>) {\n     let p = comm::port();\n     comm::send(c, comm::chan(p));\n \n@@ -18,7 +18,7 @@ fn start(c: comm::chan<comm::chan<str>>) {\n \n fn main() {\n     let p = comm::port();\n-    let child = task::spawn(bind start(comm::chan(p)));\n+    let child = task::spawn2(comm::chan(p), start);\n \n     let c = comm::recv(p);\n     comm::send(c, \"A\");"}, {"sha": "c100e610cb7d01a11fc2e908e06da669436ac79f", "filename": "src/test/run-pass/task-comm-11.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Frun-pass%2Ftask-comm-11.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Frun-pass%2Ftask-comm-11.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-11.rs?ref=ac671c31725b5bd42ad902195ac74f16c3c6c1ad", "patch": "@@ -2,13 +2,13 @@ use std;\n import std::comm;\n import std::task;\n \n-fn start(c: comm::chan<comm::chan<int>>) {\n+fn# start(c: comm::chan<comm::chan<int>>) {\n     let p: comm::port<int> = comm::port();\n     comm::send(c, comm::chan(p));\n }\n \n fn main() {\n     let p = comm::port();\n-    let child = task::spawn(bind start(comm::chan(p)));\n+    let child = task::spawn2(comm::chan(p), start);\n     let c = comm::recv(p);\n }"}, {"sha": "81143a88a4dc2fb8a354cf51bce3cc2efa8fd460", "filename": "src/test/run-pass/task-comm-12.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Frun-pass%2Ftask-comm-12.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Frun-pass%2Ftask-comm-12.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-12.rs?ref=ac671c31725b5bd42ad902195ac74f16c3c6c1ad", "patch": "@@ -3,11 +3,11 @@ import std::task;\n \n fn main() { test00(); }\n \n-fn start(task_number: int) { log \"Started / Finished task.\"; }\n+fn# start(&&task_number: int) { log \"Started / Finished task.\"; }\n \n fn test00() {\n     let i: int = 0;\n-    let t = task::spawn_joinable(bind start(i));\n+    let t = task::spawn_joinable2(i, start);\n \n     // Sleep long enough for the task to finish.\n     task::sleep(10000u);"}, {"sha": "df9e0bf2b3c42cfc15237fe7c6d73e6058b6673c", "filename": "src/test/run-pass/task-comm-13.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Frun-pass%2Ftask-comm-13.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Frun-pass%2Ftask-comm-13.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-13.rs?ref=ac671c31725b5bd42ad902195ac74f16c3c6c1ad", "patch": "@@ -3,15 +3,16 @@ import std::task;\n import std::comm;\n import std::comm::send;\n \n-fn start(c: comm::chan<int>, start: int, number_of_messages: int) {\n+fn# start(&&args: (comm::chan<int>, int, int)) {\n+    let (c, start, number_of_messages) = args;\n     let i: int = 0;\n     while i < number_of_messages { send(c, start + i); i += 1; }\n }\n \n fn main() {\n     log \"Check that we don't deadlock.\";\n-    let p = comm::port();\n-    let a = task::spawn_joinable(bind start(comm::chan(p), 0, 10));\n+    let p = comm::port::<int>();\n+    let a = task::spawn_joinable2((comm::chan(p), 0, 10), start);\n     task::join(a);\n     log \"Joined task\";\n }"}, {"sha": "219f63605943ca90590f8b5a140a4c4bc8d16cb4", "filename": "src/test/run-pass/task-comm-14.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Frun-pass%2Ftask-comm-14.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Frun-pass%2Ftask-comm-14.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-14.rs?ref=ac671c31725b5bd42ad902195ac74f16c3c6c1ad", "patch": "@@ -3,13 +3,13 @@ import std::comm;\n import std::task;\n \n fn main() {\n-    let po = comm::port();\n+    let po = comm::port::<int>();\n \n     // Spawn 10 tasks each sending us back one int.\n     let i = 10;\n     while (i > 0) {\n         log i;\n-        task::spawn(bind child(i, comm::chan(po)));\n+        task::spawn2((i, comm::chan(po)), child);\n         i = i - 1;\n     }\n \n@@ -27,7 +27,8 @@ fn main() {\n     log \"main thread exiting\";\n }\n \n-fn child(x: int, ch: comm::chan<int>) {\n+fn# child(&&args: (int, comm::chan<int>)) {\n+    let (x, ch) = args;\n     log x;\n     comm::send(ch, x);\n }"}, {"sha": "7a58762df4684a4b2ecfd0a223ee13359206612d", "filename": "src/test/run-pass/task-comm-17.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Frun-pass%2Ftask-comm-17.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Frun-pass%2Ftask-comm-17.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-17.rs?ref=ac671c31725b5bd42ad902195ac74f16c3c6c1ad", "patch": "@@ -1,11 +1,16 @@\n+// xfail-test\n // Issue #922\n \n+// This test is specifically about spawning temporary closures, which\n+// isn't possible under the bare-fn regime. I'm keeping it around\n+// until such time as we have unique closures.\n+\n use std;\n import std::task;\n \n fn f() {\n }\n \n fn main() {\n-    task::spawn(bind f());\n+    task::spawn2(bind f());\n }\n\\ No newline at end of file"}, {"sha": "3fa469529789267f5804785096dd85498bf7c5cb", "filename": "src/test/run-pass/task-comm-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Frun-pass%2Ftask-comm-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Frun-pass%2Ftask-comm-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-2.rs?ref=ac671c31725b5bd42ad902195ac74f16c3c6c1ad", "patch": "@@ -5,7 +5,7 @@ import std::task;\n \n fn main() { log \"===== SPAWNING and JOINING THREAD TASKS =====\"; test00(); }\n \n-fn start(task_number: int) {\n+fn# start(&&task_number: int) {\n     log \"Started task.\";\n     let i: int = 0;\n     while i < 10000 { i = i + 1; }\n@@ -19,7 +19,7 @@ fn test00() {\n     let tasks = [];\n     while i < number_of_tasks {\n         i = i + 1;\n-        tasks += [task::spawn_joinable(bind start(i))];\n+        tasks += [task::spawn_joinable2(copy i, start)];\n     }\n \n     for t in tasks { task::join(t); }"}, {"sha": "c37731ca4744efa521494bee2168875f094e88e7", "filename": "src/test/run-pass/task-comm-3.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs?ref=ac671c31725b5bd42ad902195ac74f16c3c6c1ad", "patch": "@@ -7,7 +7,8 @@ import std::comm::recv;\n \n fn main() { log \"===== WITHOUT THREADS =====\"; test00(); }\n \n-fn test00_start(ch: chan<int>, message: int, count: int) {\n+fn# test00_start(&&args: (chan<int>, int, int)) {\n+    let (ch, message, count) = args;\n     log \"Starting test00_start\";\n     let i: int = 0;\n     while i < count {\n@@ -32,8 +33,8 @@ fn test00() {\n     // Create and spawn tasks...\n     let tasks = [];\n     while i < number_of_tasks {\n-        let thunk = bind test00_start(ch, i, number_of_messages);\n-        tasks += [task::spawn_joinable(thunk)];\n+        tasks += [task::spawn_joinable2(\n+            (ch, i, number_of_messages), test00_start)];\n         i = i + 1;\n     }\n "}, {"sha": "c3adaed008d64c05b7a065f6d50aa71293305edf", "filename": "src/test/run-pass/task-comm-7.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Frun-pass%2Ftask-comm-7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Frun-pass%2Ftask-comm-7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-7.rs?ref=ac671c31725b5bd42ad902195ac74f16c3c6c1ad", "patch": "@@ -7,7 +7,8 @@ import comm::port;\n \n fn main() { test00(); }\n \n-fn test00_start(c: comm::chan<int>, start: int, number_of_messages: int) {\n+fn# test00_start(&&args: (comm::chan<int>, int, int)) {\n+    let (c, start, number_of_messages) = args;\n     let i: int = 0;\n     while i < number_of_messages { comm::send(c, start + i); i += 1; }\n }\n@@ -19,21 +20,21 @@ fn test00() {\n     let number_of_messages: int = 10;\n \n     let t0 =\n-        task::spawn_joinable(bind test00_start(chan(p),\n-                                               number_of_messages * 0,\n-                                               number_of_messages));\n+        task::spawn_joinable2((chan(p),\n+                               number_of_messages * 0,\n+                               number_of_messages), test00_start);\n     let t1 =\n-        task::spawn_joinable(bind test00_start(chan(p),\n-                                               number_of_messages * 1,\n-                                               number_of_messages));\n+        task::spawn_joinable2((chan(p),\n+                               number_of_messages * 1,\n+                               number_of_messages), test00_start);\n     let t2 =\n-        task::spawn_joinable(bind test00_start(chan(p),\n-                                               number_of_messages * 2,\n-                                               number_of_messages));\n+        task::spawn_joinable2((chan(p),\n+                               number_of_messages * 2,\n+                               number_of_messages), test00_start);\n     let t3 =\n-        task::spawn_joinable(bind test00_start(chan(p),\n-                                               number_of_messages * 3,\n-                                               number_of_messages));\n+        task::spawn_joinable2((chan(p),\n+                               number_of_messages * 3,\n+                               number_of_messages), test00_start);\n \n     let i: int = 0;\n     while i < number_of_messages {"}, {"sha": "e0c660e3884e7bd8026a5fbe6f598a5baf19f8d6", "filename": "src/test/run-pass/task-comm-8.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Frun-pass%2Ftask-comm-8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Frun-pass%2Ftask-comm-8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-8.rs?ref=ac671c31725b5bd42ad902195ac74f16c3c6c1ad", "patch": "@@ -4,7 +4,8 @@ import std::comm;\n \n fn main() { test00(); }\n \n-fn test00_start(c: comm::chan<int>, start: int, number_of_messages: int) {\n+fn# test00_start(&&args: (comm::chan<int>, int, int)) {\n+    let (c, start, number_of_messages) = args;\n     let i: int = 0;\n     while i < number_of_messages { comm::send(c, start + i); i += 1; }\n }\n@@ -16,21 +17,21 @@ fn test00() {\n     let number_of_messages: int = 10;\n \n     let t0 =\n-        task::spawn_joinable(bind test00_start(comm::chan(p),\n-                                               number_of_messages * 0,\n-                                               number_of_messages));\n+        task::spawn_joinable2((comm::chan(p),\n+                               number_of_messages * 0,\n+                               number_of_messages), test00_start);\n     let t1 =\n-        task::spawn_joinable(bind test00_start(comm::chan(p),\n-                                               number_of_messages * 1,\n-                                               number_of_messages));\n+        task::spawn_joinable2((comm::chan(p),\n+                               number_of_messages * 1,\n+                               number_of_messages), test00_start);\n     let t2 =\n-        task::spawn_joinable(bind test00_start(comm::chan(p),\n-                                               number_of_messages * 2,\n-                                               number_of_messages));\n+        task::spawn_joinable2((comm::chan(p),\n+                               number_of_messages * 2,\n+                               number_of_messages), test00_start);\n     let t3 =\n-        task::spawn_joinable(bind test00_start(comm::chan(p),\n-                                               number_of_messages * 3,\n-                                               number_of_messages));\n+        task::spawn_joinable2((comm::chan(p),\n+                               number_of_messages * 3,\n+                               number_of_messages), test00_start);\n \n     let i: int = 0;\n     while i < number_of_messages {"}, {"sha": "4b506c271c8abfef08d10e48b7732bb0bfa7bc96", "filename": "src/test/run-pass/task-comm-9.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs?ref=ac671c31725b5bd42ad902195ac74f16c3c6c1ad", "patch": "@@ -4,7 +4,8 @@ import std::comm;\n \n fn main() { test00(); }\n \n-fn test00_start(c: comm::chan<int>, number_of_messages: int) {\n+fn# test00_start(&&args: (comm::chan<int>, int)) {\n+    let (c, number_of_messages) = args;\n     let i: int = 0;\n     while i < number_of_messages { comm::send(c, i + 0); i += 1; }\n }\n@@ -15,8 +16,8 @@ fn test00() {\n     let p = comm::port();\n     let number_of_messages: int = 10;\n \n-    let thunk = bind test00_start(comm::chan(p), number_of_messages);\n-    let t0 = task::spawn_joinable(thunk);\n+    let t0 = task::spawn_joinable2((comm::chan(p), number_of_messages),\n+                                  test00_start);\n \n     let i: int = 0;\n     while i < number_of_messages { sum += comm::recv(p); log r; i += 1; }"}, {"sha": "4607f3de4debb0a822695dd6cf63ac9d1fa9483b", "filename": "src/test/run-pass/task-life-0.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Frun-pass%2Ftask-life-0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Frun-pass%2Ftask-life-0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-life-0.rs?ref=ac671c31725b5bd42ad902195ac74f16c3c6c1ad", "patch": "@@ -1,7 +1,7 @@\n use std;\n import std::task;\n-fn main() { task::spawn(bind child(\"Hello\")); }\n+fn main() { task::spawn2(\"Hello\", child); }\n \n-fn child(-s: str) {\n+fn# child(&&s: str) {\n \n }"}, {"sha": "a396aa7e376236ed8f82e24b7ebe7566e2ad37b7", "filename": "src/test/run-pass/terminate-in-initializer.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Frun-pass%2Fterminate-in-initializer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Frun-pass%2Fterminate-in-initializer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fterminate-in-initializer.rs?ref=ac671c31725b5bd42ad902195ac74f16c3c6c1ad", "patch": "@@ -10,16 +10,14 @@ fn test_cont() { let i = 0; while i < 1 { i += 1; let x: @int = cont; } }\n fn test_ret() { let x: @int = ret; }\n \n fn test_fail() {\n-    fn f() { std::task::unsupervise(); let x: @int = fail; }\n-    let g = f;\n-    std::task::spawn(g);\n+    fn# f(&&_i: ()) { std::task::unsupervise(); let x: @int = fail; }\n+    std::task::spawn2((), f);\n }\n \n fn test_fail_indirect() {\n     fn f() -> ! { fail; }\n-    fn g() { std::task::unsupervise(); let x: @int = f(); }\n-    let h = g;\n-    std::task::spawn(h);\n+    fn# g(&&_i: ()) { std::task::unsupervise(); let x: @int = f(); }\n+    std::task::spawn2((), g);\n }\n \n fn main() {"}, {"sha": "b86bb19cbae9d88680f777225908d8117e33fd30", "filename": "src/test/run-pass/threads.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Frun-pass%2Fthreads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Frun-pass%2Fthreads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fthreads.rs?ref=ac671c31725b5bd42ad902195ac74f16c3c6c1ad", "patch": "@@ -5,9 +5,9 @@ import std::task;\n \n fn main() {\n     let i = 10;\n-    while i > 0 { task::spawn(bind child(i)); i = i - 1; }\n+    while i > 0 { task::spawn2(copy i, child); i = i - 1; }\n     log \"main thread exiting\";\n }\n \n-fn child(x: int) { log x; }\n+fn# child(&&x: int) { log x; }\n "}, {"sha": "7354744c8debd2d5d4aac33b3610cfb76cb1b059", "filename": "src/test/run-pass/unique-send-2.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Frun-pass%2Funique-send-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Frun-pass%2Funique-send-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-send-2.rs?ref=ac671c31725b5bd42ad902195ac74f16c3c6c1ad", "patch": "@@ -3,7 +3,8 @@ import std::comm;\n import std::task;\n import std::uint;\n \n-fn child(c: comm::chan<~uint>, i: uint) {\n+fn# child(args: (comm::chan<~uint>, uint)) {\n+    let (c, i) = args;\n     comm::send(c, ~i);\n }\n \n@@ -12,8 +13,7 @@ fn main() {\n     let n = 100u;\n     let expected = 0u;\n     for each i in uint::range(0u, n) {\n-        let f = bind child(comm::chan(p), i);\n-        task::spawn(f);\n+        task::spawn2((comm::chan(p), i), child);\n         expected += i;\n     }\n "}, {"sha": "6c26bc14c2d584e954c21db6101b8d803affd2ff", "filename": "src/test/run-pass/unwind-box.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Frun-pass%2Funwind-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Frun-pass%2Funwind-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funwind-box.rs?ref=ac671c31725b5bd42ad902195ac74f16c3c6c1ad", "patch": "@@ -2,13 +2,12 @@\n use std;\n import std::task;\n \n-fn f() {\n+fn# f(&&_i: ()) {\n     task::unsupervise();\n     let a = @0;\n     fail;\n }\n \n fn main() {\n-    let g = f;\n-    task::spawn(g);\n+    task::spawn2((), f);\n }\n\\ No newline at end of file"}, {"sha": "7403a3da535d6366305849fd26c8d6520262ca02", "filename": "src/test/run-pass/unwind-resource.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Frun-pass%2Funwind-resource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Frun-pass%2Funwind-resource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funwind-resource.rs?ref=ac671c31725b5bd42ad902195ac74f16c3c6c1ad", "patch": "@@ -7,7 +7,7 @@ resource complainer(c: comm::chan<bool>) {\n     comm::send(c, true);\n }\n \n-fn f(-c: comm::chan<bool>) {\n+fn# f(c: comm::chan<bool>) {\n     task::unsupervise();\n     let c <- complainer(c);\n     fail;\n@@ -16,6 +16,6 @@ fn f(-c: comm::chan<bool>) {\n fn main() {\n     let p = comm::port();\n     let c = comm::chan(p);\n-    task::spawn(bind f(c));\n+    task::spawn2(c, f);\n     assert comm::recv(p);\n }\n\\ No newline at end of file"}, {"sha": "801b9dde5ec64625981e95e2e06a3365a53dcf17", "filename": "src/test/run-pass/unwind-resource2.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Frun-pass%2Funwind-resource2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Frun-pass%2Funwind-resource2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funwind-resource2.rs?ref=ac671c31725b5bd42ad902195ac74f16c3c6c1ad", "patch": "@@ -6,13 +6,12 @@ import std::comm;\n resource complainer(c: @int) {\n }\n \n-fn f() {\n+fn# f(&&_i: ()) {\n     task::unsupervise();\n     let c <- complainer(@0);\n     fail;\n }\n \n fn main() {\n-    let g = f;\n-    task::spawn(g);\n+    task::spawn2((), f);\n }\n\\ No newline at end of file"}, {"sha": "d869f11a78fe42ba499de59463e288922e0e5c63", "filename": "src/test/run-pass/unwind-unique.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Frun-pass%2Funwind-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Frun-pass%2Funwind-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funwind-unique.rs?ref=ac671c31725b5bd42ad902195ac74f16c3c6c1ad", "patch": "@@ -2,13 +2,12 @@\n use std;\n import std::task;\n \n-fn f() {\n+fn# f(&&_i: ()) {\n     task::unsupervise();\n     let a = ~0;\n     fail;\n }\n \n fn main() {\n-    let g = f;\n-    task::spawn(g);\n+    task::spawn2((), f);\n }\n\\ No newline at end of file"}, {"sha": "d0b80a3343e3a6702a3e83ee92ac5a3ad2c084e7", "filename": "src/test/run-pass/yield.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Frun-pass%2Fyield.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Frun-pass%2Fyield.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fyield.rs?ref=ac671c31725b5bd42ad902195ac74f16c3c6c1ad", "patch": "@@ -4,8 +4,7 @@ import std::task;\n import std::task::*;\n \n fn main() {\n-    let f = child;\n-    let other = task::spawn_joinable(f);\n+    let other = task::spawn_joinable2((), child);\n     log_err \"1\";\n     yield();\n     log_err \"2\";\n@@ -14,4 +13,6 @@ fn main() {\n     join(other);\n }\n \n-fn child() { log_err \"4\"; yield(); log_err \"5\"; yield(); log_err \"6\"; }\n+fn# child(&&_i: ()) {\n+    log_err \"4\"; yield(); log_err \"5\"; yield(); log_err \"6\";\n+}"}, {"sha": "49ff487c05ff604973cd7ffb33874e425a4e92d4", "filename": "src/test/run-pass/yield1.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Frun-pass%2Fyield1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Frun-pass%2Fyield1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fyield1.rs?ref=ac671c31725b5bd42ad902195ac74f16c3c6c1ad", "patch": "@@ -4,11 +4,10 @@ import std::task;\n import std::task::*;\n \n fn main() {\n-    let c = child;\n-    let other = task::spawn_joinable(c);\n+    let other = task::spawn_joinable2((), child);\n     log_err \"1\";\n     yield();\n     join(other);\n }\n \n-fn child() { log_err \"2\"; }\n+fn# child(&&_i: ()) { log_err \"2\"; }"}, {"sha": "0d86cd9df4b3c5715776265f426249d4fd17049f", "filename": "src/test/stdtest/task.rs", "status": "modified", "additions": 17, "deletions": 22, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Fstdtest%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac671c31725b5bd42ad902195ac74f16c3c6c1ad/src%2Ftest%2Fstdtest%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Ftask.rs?ref=ac671c31725b5bd42ad902195ac74f16c3c6c1ad", "patch": "@@ -7,31 +7,28 @@ fn test_sleep() { task::sleep(1000000u); }\n \n #[test]\n fn test_unsupervise() {\n-    fn f() { task::unsupervise(); fail; }\n-    let foo = f;\n-    task::spawn(foo);\n+    fn# f(&&_i: ()) { task::unsupervise(); fail; }\n+    task::spawn2((), f);\n }\n \n #[test]\n fn test_lib_spawn() {\n-    fn foo() { log_err \"Hello, World!\"; }\n-    let f = foo;\n-    task::spawn(f);\n+    fn# foo(&&_i: ()) { log_err \"Hello, World!\"; }\n+    task::spawn2((), foo);\n }\n \n #[test]\n fn test_lib_spawn2() {\n-    fn foo(x: int) { assert (x == 42); }\n-    task::spawn(bind foo(42));\n+    fn# foo(&&x: int) { assert (x == 42); }\n+    task::spawn2(42, foo);\n }\n \n #[test]\n fn test_join_chan() {\n-    fn winner() { }\n+    fn# winner(&&_i: ()) { }\n \n     let p = comm::port();\n-    let f = winner;\n-    task::spawn_notify(f, comm::chan(p));\n+    task::spawn_notify2((), winner, comm::chan(p));\n     let s = comm::recv(p);\n     log_err \"received task status message\";\n     log_err s;\n@@ -43,11 +40,10 @@ fn test_join_chan() {\n \n #[test]\n fn test_join_chan_fail() {\n-    fn failer() { task::unsupervise(); fail }\n+    fn# failer(&&_i: ()) { task::unsupervise(); fail }\n \n     let p = comm::port();\n-    let f = failer;\n-    task::spawn_notify(f, comm::chan(p));\n+    task::spawn_notify2((), failer, comm::chan(p));\n     let s = comm::recv(p);\n     log_err \"received task status message\";\n     log_err s;\n@@ -59,18 +55,17 @@ fn test_join_chan_fail() {\n \n #[test]\n fn test_join_convenient() {\n-    fn winner() { }\n-    let f = winner;\n-    let handle = task::spawn_joinable(f);\n+    fn# winner(&&_i: ()) { }\n+    let handle = task::spawn_joinable2((), winner);\n     assert (task::tr_success == task::join(handle));\n }\n \n #[test]\n+#[ignore]\n fn spawn_polymorphic() {\n-    fn foo<~T>(-x: T) { log_err x; }\n+    // FIXME #1038: Can't spawn palymorphic functions\n+    /*fn# foo<~T>(x: T) { log_err x; }\n \n-    let fb = bind foo(true);\n-\n-    task::spawn(fb);\n-    task::spawn(bind foo(42));\n+    task::spawn2(true, foo);\n+    task::spawn2(42, foo);*/\n }"}]}