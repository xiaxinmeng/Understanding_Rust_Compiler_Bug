{"sha": "44593aeb1387b1be355aeaf0040d5927bd80f060", "node_id": "C_kwDOAAsO6NoAKDQ0NTkzYWViMTM4N2IxYmUzNTVhZWFmMDA0MGQ1OTI3YmQ4MGYwNjA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-04T07:25:50Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-04T07:25:50Z"}, "message": "Auto merge of #89512 - Manishearth:rollup-meh9x7r, r=Manishearth\n\nRollup of 14 pull requests\n\nSuccessful merges:\n\n - #86434 (Add `Ipv6Addr::is_benchmarking`)\n - #86828 (const fn for option copied, take & replace)\n - #87679 (BTree: refine some comments)\n - #87910 (Mark unsafe methods NonZero*::unchecked_(add|mul) as const.)\n - #88286 (Remove unnecessary unsafe block in `process_unix`)\n - #88305 (Manual Debug for Unix ExitCode ExitStatus ExitStatusError)\n - #88353 (Partially stabilize `array_methods`)\n - #88370 (Add missing `# Panics` section to `Vec` method)\n - #88481 (Remove some feature gates)\n - #89138 (Fix link in Ipv6Addr::to_ipv4 docs)\n - #89401 (Add truncate note to Vec::resize)\n - #89467 (Fix typos in rustdoc/lints)\n - #89472 (Only register `WSACleanup` if `WSAStartup` is actually ever called)\n - #89505 (Add regression test for spurious const error with NLL)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "b1bd69742d3986c25b61d05b43fbd1cde28d3a4e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b1bd69742d3986c25b61d05b43fbd1cde28d3a4e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/44593aeb1387b1be355aeaf0040d5927bd80f060", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/44593aeb1387b1be355aeaf0040d5927bd80f060", "html_url": "https://github.com/rust-lang/rust/commit/44593aeb1387b1be355aeaf0040d5927bd80f060", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/44593aeb1387b1be355aeaf0040d5927bd80f060/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d25de31a0eeb14ab0c8c4613496fe2d3d9a085dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/d25de31a0eeb14ab0c8c4613496fe2d3d9a085dd", "html_url": "https://github.com/rust-lang/rust/commit/d25de31a0eeb14ab0c8c4613496fe2d3d9a085dd"}, {"sha": "5c5dde8f0a1e7a3f735dce63d6b81680d24c56d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c5dde8f0a1e7a3f735dce63d6b81680d24c56d9", "html_url": "https://github.com/rust-lang/rust/commit/5c5dde8f0a1e7a3f735dce63d6b81680d24c56d9"}], "stats": {"total": 386, "additions": 251, "deletions": 135}, "files": [{"sha": "f22d355e61344d9f0dbddb567d84b2fbd165ff33", "filename": "compiler/rustc_borrowck/src/member_constraints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44593aeb1387b1be355aeaf0040d5927bd80f060/compiler%2Frustc_borrowck%2Fsrc%2Fmember_constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44593aeb1387b1be355aeaf0040d5927bd80f060/compiler%2Frustc_borrowck%2Fsrc%2Fmember_constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fmember_constraints.rs?ref=44593aeb1387b1be355aeaf0040d5927bd80f060", "patch": "@@ -144,7 +144,7 @@ impl<R> MemberConstraintSet<'tcx, R>\n where\n     R: Copy + Hash + Eq,\n {\n-    crate fn all_indices(&self) -> impl Iterator<Item = NllMemberConstraintIndex> {\n+    crate fn all_indices(&self) -> impl Iterator<Item = NllMemberConstraintIndex> + '_ {\n         self.constraints.indices()\n     }\n "}, {"sha": "734a5b4972bcce6c3700489252412bd877a4d8bc", "filename": "compiler/rustc_borrowck/src/region_infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44593aeb1387b1be355aeaf0040d5927bd80f060/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44593aeb1387b1be355aeaf0040d5927bd80f060/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs?ref=44593aeb1387b1be355aeaf0040d5927bd80f060", "patch": "@@ -497,7 +497,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     }\n \n     /// Returns an iterator over all the region indices.\n-    pub fn regions(&self) -> impl Iterator<Item = RegionVid> {\n+    pub fn regions(&self) -> impl Iterator<Item = RegionVid> + '_ {\n         self.definitions.indices()\n     }\n "}, {"sha": "370e8ffed728b9bceec372369635442d02320736", "filename": "compiler/rustc_data_structures/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44593aeb1387b1be355aeaf0040d5927bd80f060/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44593aeb1387b1be355aeaf0040d5927bd80f060/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs?ref=44593aeb1387b1be355aeaf0040d5927bd80f060", "patch": "@@ -7,7 +7,6 @@\n //! This API is completely unstable and subject to change.\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n-#![feature(allow_internal_unstable)]\n #![feature(array_windows)]\n #![feature(associated_type_bounds)]\n #![feature(auto_traits)]"}, {"sha": "a72a27e07bd77fb2cc74f0ef85140aac307be79a", "filename": "compiler/rustc_index/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/44593aeb1387b1be355aeaf0040d5927bd80f060/compiler%2Frustc_index%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44593aeb1387b1be355aeaf0040d5927bd80f060/compiler%2Frustc_index%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_index%2Fsrc%2Flib.rs?ref=44593aeb1387b1be355aeaf0040d5927bd80f060", "patch": "@@ -2,9 +2,8 @@\n #![feature(bench_black_box)]\n #![feature(extend_one)]\n #![feature(iter_zip)]\n-#![feature(unboxed_closures)]\n+#![feature(min_specialization)]\n #![feature(test)]\n-#![feature(fn_traits)]\n \n pub mod bit_set;\n pub mod vec;"}, {"sha": "56ea04539e57fc7abcc40be853fbc9425d079f8b", "filename": "compiler/rustc_index/src/vec.rs", "status": "modified", "additions": 17, "deletions": 44, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/44593aeb1387b1be355aeaf0040d5927bd80f060/compiler%2Frustc_index%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44593aeb1387b1be355aeaf0040d5927bd80f060/compiler%2Frustc_index%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_index%2Fsrc%2Fvec.rs?ref=44593aeb1387b1be355aeaf0040d5927bd80f060", "patch": "@@ -3,9 +3,9 @@ use rustc_serialize::{Decodable, Decoder, Encodable, Encoder};\n use std::fmt;\n use std::fmt::Debug;\n use std::hash::Hash;\n-use std::iter::{self, FromIterator};\n+use std::iter::FromIterator;\n use std::marker::PhantomData;\n-use std::ops::{Index, IndexMut, Range, RangeBounds};\n+use std::ops::{Index, IndexMut, RangeBounds};\n use std::slice;\n use std::vec;\n \n@@ -518,8 +518,6 @@ impl<I: Idx, T: fmt::Debug> fmt::Debug for IndexVec<I, T> {\n     }\n }\n \n-pub type Enumerated<I, J> = iter::Map<iter::Enumerate<J>, IntoIdx<I>>;\n-\n impl<I: Idx, T> IndexVec<I, T> {\n     #[inline]\n     pub fn new() -> Self {\n@@ -596,8 +594,10 @@ impl<I: Idx, T> IndexVec<I, T> {\n     }\n \n     #[inline]\n-    pub fn into_iter_enumerated(self) -> Enumerated<I, vec::IntoIter<T>> {\n-        self.raw.into_iter().enumerate().map(IntoIdx { _marker: PhantomData })\n+    pub fn into_iter_enumerated(\n+        self,\n+    ) -> impl DoubleEndedIterator<Item = (I, T)> + ExactSizeIterator {\n+        self.raw.into_iter().enumerate().map(|(n, t)| (I::new(n), t))\n     }\n \n     #[inline]\n@@ -606,13 +606,15 @@ impl<I: Idx, T> IndexVec<I, T> {\n     }\n \n     #[inline]\n-    pub fn iter_enumerated(&self) -> Enumerated<I, slice::Iter<'_, T>> {\n-        self.raw.iter().enumerate().map(IntoIdx { _marker: PhantomData })\n+    pub fn iter_enumerated(\n+        &self,\n+    ) -> impl DoubleEndedIterator<Item = (I, &T)> + ExactSizeIterator + '_ {\n+        self.raw.iter().enumerate().map(|(n, t)| (I::new(n), t))\n     }\n \n     #[inline]\n-    pub fn indices(&self) -> iter::Map<Range<usize>, IntoIdx<I>> {\n-        (0..self.len()).map(IntoIdx { _marker: PhantomData })\n+    pub fn indices(&self) -> impl DoubleEndedIterator<Item = I> + ExactSizeIterator + 'static {\n+        (0..self.len()).map(|n| I::new(n))\n     }\n \n     #[inline]\n@@ -621,8 +623,10 @@ impl<I: Idx, T> IndexVec<I, T> {\n     }\n \n     #[inline]\n-    pub fn iter_enumerated_mut(&mut self) -> Enumerated<I, slice::IterMut<'_, T>> {\n-        self.raw.iter_mut().enumerate().map(IntoIdx { _marker: PhantomData })\n+    pub fn iter_enumerated_mut(\n+        &mut self,\n+    ) -> impl DoubleEndedIterator<Item = (I, &mut T)> + ExactSizeIterator + '_ {\n+        self.raw.iter_mut().enumerate().map(|(n, t)| (I::new(n), t))\n     }\n \n     #[inline]\n@@ -638,7 +642,7 @@ impl<I: Idx, T> IndexVec<I, T> {\n         &'a mut self,\n         range: R,\n     ) -> impl Iterator<Item = (I, T)> + 'a {\n-        self.raw.drain(range).enumerate().map(IntoIdx { _marker: PhantomData })\n+        self.raw.drain(range).enumerate().map(|(n, t)| (I::new(n), t))\n     }\n \n     #[inline]\n@@ -832,36 +836,5 @@ impl<'a, I: Idx, T> IntoIterator for &'a mut IndexVec<I, T> {\n     }\n }\n \n-pub struct IntoIdx<I: Idx> {\n-    _marker: PhantomData<fn(&I)>,\n-}\n-impl<I: Idx, T> FnOnce<((usize, T),)> for IntoIdx<I> {\n-    type Output = (I, T);\n-\n-    extern \"rust-call\" fn call_once(self, ((n, t),): ((usize, T),)) -> Self::Output {\n-        (I::new(n), t)\n-    }\n-}\n-\n-impl<I: Idx, T> FnMut<((usize, T),)> for IntoIdx<I> {\n-    extern \"rust-call\" fn call_mut(&mut self, ((n, t),): ((usize, T),)) -> Self::Output {\n-        (I::new(n), t)\n-    }\n-}\n-\n-impl<I: Idx> FnOnce<(usize,)> for IntoIdx<I> {\n-    type Output = I;\n-\n-    extern \"rust-call\" fn call_once(self, (n,): (usize,)) -> Self::Output {\n-        I::new(n)\n-    }\n-}\n-\n-impl<I: Idx> FnMut<(usize,)> for IntoIdx<I> {\n-    extern \"rust-call\" fn call_mut(&mut self, (n,): (usize,)) -> Self::Output {\n-        I::new(n)\n-    }\n-}\n-\n #[cfg(test)]\n mod tests;"}, {"sha": "17eb00545847c046124b049cb288a3817b77845b", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44593aeb1387b1be355aeaf0040d5927bd80f060/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44593aeb1387b1be355aeaf0040d5927bd80f060/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=44593aeb1387b1be355aeaf0040d5927bd80f060", "patch": "@@ -26,7 +26,6 @@\n //! This API is completely unstable and subject to change.\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n-#![cfg_attr(test, feature(test))]\n #![feature(array_windows)]\n #![feature(bool_to_option)]\n #![feature(box_patterns)]"}, {"sha": "1f2bfa5e7d904ae84b2f13d647e235894422fc8d", "filename": "compiler/rustc_middle/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44593aeb1387b1be355aeaf0040d5927bd80f060/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44593aeb1387b1be355aeaf0040d5927bd80f060/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flib.rs?ref=44593aeb1387b1be355aeaf0040d5927bd80f060", "patch": "@@ -41,13 +41,11 @@\n #![feature(once_cell)]\n #![feature(min_specialization)]\n #![feature(trusted_len)]\n-#![feature(test)]\n #![feature(in_band_lifetimes)]\n #![feature(crate_visibility_modifier)]\n #![feature(associated_type_bounds)]\n #![feature(rustc_attrs)]\n #![feature(half_open_range_patterns)]\n-#![feature(exclusive_range_pattern)]\n #![feature(control_flow_enum)]\n #![feature(associated_type_defaults)]\n #![feature(iter_zip)]"}, {"sha": "434008ecb1f4f1348fa6f8a4742867445baa85ec", "filename": "compiler/rustc_middle/src/ty/codec.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/44593aeb1387b1be355aeaf0040d5927bd80f060/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44593aeb1387b1be355aeaf0040d5927bd80f060/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs?ref=44593aeb1387b1be355aeaf0040d5927bd80f060", "patch": "@@ -1,10 +1,10 @@\n-// This module contains some shared code for encoding and decoding various\n-// things from the `ty` module, and in particular implements support for\n-// \"shorthands\" which allow to have pointers back into the already encoded\n-// stream instead of re-encoding the same thing twice.\n-//\n-// The functionality in here is shared between persisting to crate metadata and\n-// persisting to incr. comp. caches.\n+//! This module contains some shared code for encoding and decoding various\n+//! things from the `ty` module, and in particular implements support for\n+//! \"shorthands\" which allow to have pointers back into the already encoded\n+//! stream instead of re-encoding the same thing twice.\n+//!\n+//! The functionality in here is shared between persisting to crate metadata and\n+//! persisting to incr. comp. caches.\n \n use crate::arena::ArenaAllocatable;\n use crate::infer::canonical::{CanonicalVarInfo, CanonicalVarInfos};"}, {"sha": "f2b341593826b3e0e3dbd9705e023d9452611f6f", "filename": "compiler/rustc_mir_dataflow/src/move_paths/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/44593aeb1387b1be355aeaf0040d5927bd80f060/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44593aeb1387b1be355aeaf0040d5927bd80f060/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fmod.rs?ref=44593aeb1387b1be355aeaf0040d5927bd80f060", "patch": "@@ -1,6 +1,5 @@\n-use core::slice::Iter;\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_index::vec::{Enumerated, IndexVec};\n+use rustc_index::vec::IndexVec;\n use rustc_middle::mir::*;\n use rustc_middle::ty::{ParamEnv, Ty, TyCtxt};\n use rustc_span::Span;\n@@ -337,7 +336,9 @@ impl MovePathLookup {\n \n     /// An enumerated iterator of `local`s and their associated\n     /// `MovePathIndex`es.\n-    pub fn iter_locals_enumerated(&self) -> Enumerated<Local, Iter<'_, MovePathIndex>> {\n+    pub fn iter_locals_enumerated(\n+        &self,\n+    ) -> impl DoubleEndedIterator<Item = (Local, &MovePathIndex)> + ExactSizeIterator {\n         self.locals.iter_enumerated()\n     }\n }"}, {"sha": "23d5d575d9447d7b97cd7cbb4ae1a42115dd18cb", "filename": "compiler/rustc_target/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44593aeb1387b1be355aeaf0040d5927bd80f060/compiler%2Frustc_target%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44593aeb1387b1be355aeaf0040d5927bd80f060/compiler%2Frustc_target%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Flib.rs?ref=44593aeb1387b1be355aeaf0040d5927bd80f060", "patch": "@@ -15,7 +15,6 @@\n #![feature(exhaustive_patterns)]\n #![feature(min_specialization)]\n #![feature(step_trait)]\n-#![feature(unchecked_math)]\n \n use std::path::{Path, PathBuf};\n "}, {"sha": "60f8e196bcba1c8c4227b3efd28765e0521f5972", "filename": "compiler/rustc_ty_utils/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44593aeb1387b1be355aeaf0040d5927bd80f060/compiler%2Frustc_ty_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44593aeb1387b1be355aeaf0040d5927bd80f060/compiler%2Frustc_ty_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Flib.rs?ref=44593aeb1387b1be355aeaf0040d5927bd80f060", "patch": "@@ -6,8 +6,6 @@\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(control_flow_enum)]\n-#![feature(half_open_range_patterns)]\n-#![feature(exclusive_range_pattern)]\n #![feature(nll)]\n #![recursion_limit = \"256\"]\n "}, {"sha": "11b0ca4b421a7301c5dcb9e7718297c0b43ce857", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/44593aeb1387b1be355aeaf0040d5927bd80f060/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44593aeb1387b1be355aeaf0040d5927bd80f060/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=44593aeb1387b1be355aeaf0040d5927bd80f060", "patch": "@@ -19,16 +19,16 @@ mod entry;\n pub use entry::{Entry, OccupiedEntry, OccupiedError, VacantEntry};\n use Entry::*;\n \n-/// Minimum number of elements in nodes that are not a root.\n+/// Minimum number of elements in a node that is not a root.\n /// We might temporarily have fewer elements during methods.\n pub(super) const MIN_LEN: usize = node::MIN_LEN_AFTER_SPLIT;\n \n // A tree in a `BTreeMap` is a tree in the `node` module with additional invariants:\n // - Keys must appear in ascending order (according to the key's type).\n-// - If the root node is internal, it must contain at least 1 element.\n+// - Every non-leaf node contains at least 1 element (has at least 2 children).\n // - Every non-root node contains at least MIN_LEN elements.\n //\n-// An empty map may be represented both by the absence of a root node or by a\n+// An empty map is represented either by the absence of a root node or by a\n // root node that is an empty leaf.\n \n /// A map based on a [B-Tree].\n@@ -1735,8 +1735,8 @@ impl<'a, K: 'a, V: 'a> DrainFilterInner<'a, K, V> {\n     pub(super) fn size_hint(&self) -> (usize, Option<usize>) {\n         // In most of the btree iterators, `self.length` is the number of elements\n         // yet to be visited. Here, it includes elements that were visited and that\n-        // the predicate decided not to drain. Making this upper bound more accurate\n-        // requires maintaining an extra field and is not worth while.\n+        // the predicate decided not to drain. Making this upper bound more tight\n+        // during iteration would require an extra field.\n         (0, Some(*self.length))\n     }\n }"}, {"sha": "9d0db345009459e3d8eae92336251a1d5a941d58", "filename": "library/alloc/src/collections/btree/navigate.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/44593aeb1387b1be355aeaf0040d5927bd80f060/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnavigate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44593aeb1387b1be355aeaf0040d5927bd80f060/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnavigate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnavigate.rs?ref=44593aeb1387b1be355aeaf0040d5927bd80f060", "patch": "@@ -440,8 +440,7 @@ impl<K, V> Handle<NodeRef<marker::Dying, K, V, marker::Leaf>, marker::Edge> {\n     /// - The given edge must not have been previously returned by counterpart\n     ///   `deallocating_next_back`.\n     /// - The returned KV handle is only valid to access the key and value,\n-    ///   and only valid until the next call to this method or counterpart\n-    ///   `deallocating_next_back`.\n+    ///   and only valid until the next call to a `deallocating_` method.\n     unsafe fn deallocating_next(\n         self,\n     ) -> Option<(Self, Handle<NodeRef<marker::Dying, K, V, marker::LeafOrInternal>, marker::KV>)>\n@@ -470,8 +469,7 @@ impl<K, V> Handle<NodeRef<marker::Dying, K, V, marker::Leaf>, marker::Edge> {\n     /// - The given edge must not have been previously returned by counterpart\n     ///   `deallocating_next`.\n     /// - The returned KV handle is only valid to access the key and value,\n-    ///   and only valid until the next call to this method or counterpart\n-    ///   `deallocating_next`.\n+    ///   and only valid until the next call to a `deallocating_` method.\n     unsafe fn deallocating_next_back(\n         self,\n     ) -> Option<(Self, Handle<NodeRef<marker::Dying, K, V, marker::LeafOrInternal>, marker::KV>)>"}, {"sha": "dfce98f97bd4496f280e2dab003a8891fed80f86", "filename": "library/alloc/src/collections/btree/node.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44593aeb1387b1be355aeaf0040d5927bd80f060/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44593aeb1387b1be355aeaf0040d5927bd80f060/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs?ref=44593aeb1387b1be355aeaf0040d5927bd80f060", "patch": "@@ -574,7 +574,7 @@ impl<K, V> NodeRef<marker::Owned, K, V, marker::LeafOrInternal> {\n     /// no cleanup is done on any of the keys, values and other children.\n     /// This decreases the height by 1 and is the opposite of `push_internal_level`.\n     ///\n-    /// Requires exclusive access to the `Root` object but not to the root node;\n+    /// Requires exclusive access to the `NodeRef` object but not to the root node;\n     /// it will not invalidate other handles or references to the root node.\n     ///\n     /// Panics if there is no internal level, i.e., if the root node is a leaf."}, {"sha": "320347e58e19f84527b614002e7406368154a835", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/44593aeb1387b1be355aeaf0040d5927bd80f060/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44593aeb1387b1be355aeaf0040d5927bd80f060/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=44593aeb1387b1be355aeaf0040d5927bd80f060", "patch": "@@ -2137,6 +2137,7 @@ impl<T: Clone, A: Allocator> Vec<T, A> {\n     /// in order to be able to clone the passed value.\n     /// If you need more flexibility (or want to rely on [`Default`] instead of\n     /// [`Clone`]), use [`Vec::resize_with`].\n+    /// If you only need to resize to a smaller size, use [`Vec::truncate`].\n     ///\n     /// # Examples\n     ///\n@@ -2188,7 +2189,12 @@ impl<T: Clone, A: Allocator> Vec<T, A> {\n \n     /// Copies elements from `src` range to the end of the vector.\n     ///\n-    /// ## Examples\n+    /// # Panics\n+    ///\n+    /// Panics if the starting point is greater than the end point or if\n+    /// the end point is greater than the length of the vector.\n+    ///\n+    /// # Examples\n     ///\n     /// ```\n     /// let mut vec = vec![0, 1, 2, 3, 4];"}, {"sha": "09329247f949228a35fe2fc8e64eb21087b2f530", "filename": "library/core/src/array/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/44593aeb1387b1be355aeaf0040d5927bd80f060/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44593aeb1387b1be355aeaf0040d5927bd80f060/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fmod.rs?ref=44593aeb1387b1be355aeaf0040d5927bd80f060", "patch": "@@ -368,14 +368,14 @@ impl<T, const N: usize> [T; N] {\n     }\n \n     /// Returns a slice containing the entire array. Equivalent to `&s[..]`.\n-    #[unstable(feature = \"array_methods\", issue = \"76118\")]\n-    pub fn as_slice(&self) -> &[T] {\n+    #[stable(feature = \"array_as_slice\", since = \"1.57.0\")]\n+    pub const fn as_slice(&self) -> &[T] {\n         self\n     }\n \n     /// Returns a mutable slice containing the entire array. Equivalent to\n     /// `&mut s[..]`.\n-    #[unstable(feature = \"array_methods\", issue = \"76118\")]\n+    #[stable(feature = \"array_as_slice\", since = \"1.57.0\")]\n     pub fn as_mut_slice(&mut self) -> &mut [T] {\n         self\n     }"}, {"sha": "45ef1fcde2a55929588b3969f26d9d9685f677a7", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44593aeb1387b1be355aeaf0040d5927bd80f060/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44593aeb1387b1be355aeaf0040d5927bd80f060/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=44593aeb1387b1be355aeaf0040d5927bd80f060", "patch": "@@ -91,6 +91,7 @@\n #![feature(const_maybe_uninit_assume_init)]\n #![feature(const_option)]\n #![feature(const_pin)]\n+#![feature(const_replace)]\n #![feature(const_ptr_offset)]\n #![feature(const_ptr_offset_from)]\n #![feature(const_ptr_read)]"}, {"sha": "e44597279baf232b930e9b9844a4324dc750337b", "filename": "library/core/src/num/nonzero.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/44593aeb1387b1be355aeaf0040d5927bd80f060/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44593aeb1387b1be355aeaf0040d5927bd80f060/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs?ref=44593aeb1387b1be355aeaf0040d5927bd80f060", "patch": "@@ -379,7 +379,7 @@ macro_rules! nonzero_unsigned_operations {\n                 /// ```\n                 #[unstable(feature = \"nonzero_ops\", issue = \"84186\")]\n                 #[inline]\n-                pub unsafe fn unchecked_add(self, other: $Int) -> $Ty {\n+                pub const unsafe fn unchecked_add(self, other: $Int) -> $Ty {\n                     // SAFETY: The caller ensures there is no overflow.\n                     unsafe { $Ty::new_unchecked(self.get().unchecked_add(other)) }\n                 }\n@@ -750,7 +750,7 @@ macro_rules! nonzero_unsigned_signed_operations {\n                 /// ```\n                 #[unstable(feature = \"nonzero_ops\", issue = \"84186\")]\n                 #[inline]\n-                pub unsafe fn unchecked_mul(self, other: $Ty) -> $Ty {\n+                pub const unsafe fn unchecked_mul(self, other: $Ty) -> $Ty {\n                     // SAFETY: The caller ensures there is no overflow.\n                     unsafe { $Ty::new_unchecked(self.get().unchecked_mul(other.get())) }\n                 }"}, {"sha": "3259e142a0c2ac0e5075b4755c1a2ff278804449", "filename": "library/core/src/option.rs", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/44593aeb1387b1be355aeaf0040d5927bd80f060/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44593aeb1387b1be355aeaf0040d5927bd80f060/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=44593aeb1387b1be355aeaf0040d5927bd80f060", "patch": "@@ -544,8 +544,8 @@ impl<T> Option<T> {\n     /// ```\n     #[must_use = \"if you intended to assert that this has a value, consider `.unwrap()` instead\"]\n     #[inline]\n-    #[rustc_const_stable(feature = \"const_option\", since = \"1.48.0\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_const_stable(feature = \"const_option\", since = \"1.48.0\")]\n     pub const fn is_some(&self) -> bool {\n         matches!(*self, Some(_))\n     }\n@@ -564,8 +564,8 @@ impl<T> Option<T> {\n     #[must_use = \"if you intended to assert that this doesn't have a value, consider \\\n                   `.and_then(|_| panic!(\\\"`Option` had a value when expected `None`\\\"))` instead\"]\n     #[inline]\n-    #[rustc_const_stable(feature = \"const_option\", since = \"1.48.0\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_const_stable(feature = \"const_option\", since = \"1.48.0\")]\n     pub const fn is_none(&self) -> bool {\n         !self.is_some()\n     }\n@@ -1318,8 +1318,10 @@ impl<T> Option<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn take(&mut self) -> Option<T> {\n-        mem::take(self)\n+    #[rustc_const_unstable(feature = \"const_option\", issue = \"67441\")]\n+    pub const fn take(&mut self) -> Option<T> {\n+        // FIXME replace `mem::replace` by `mem::take` when the latter is const ready\n+        mem::replace(self, None)\n     }\n \n     /// Replaces the actual value in the option by the value given in parameter,\n@@ -1340,8 +1342,9 @@ impl<T> Option<T> {\n     /// assert_eq!(old, None);\n     /// ```\n     #[inline]\n+    #[rustc_const_unstable(feature = \"const_option\", issue = \"67441\")]\n     #[stable(feature = \"option_replace\", since = \"1.31.0\")]\n-    pub fn replace(&mut self, value: T) -> Option<T> {\n+    pub const fn replace(&mut self, value: T) -> Option<T> {\n         mem::replace(self, Some(value))\n     }\n \n@@ -1446,8 +1449,14 @@ impl<T: Copy> Option<&T> {\n     /// assert_eq!(copied, Some(12));\n     /// ```\n     #[stable(feature = \"copied\", since = \"1.35.0\")]\n-    pub fn copied(self) -> Option<T> {\n-        self.map(|&t| t)\n+    #[rustc_const_unstable(feature = \"const_option\", issue = \"67441\")]\n+    pub const fn copied(self) -> Option<T> {\n+        // FIXME: this implementation, which sidesteps using `Option::map` since it's not const\n+        // ready yet, should be reverted when possible to avoid code repetition\n+        match self {\n+            Some(&v) => Some(v),\n+            None => None,\n+        }\n     }\n }\n "}, {"sha": "8995f96b1238a654badb66cece7ed962f109dd3c", "filename": "library/core/tests/option.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/44593aeb1387b1be355aeaf0040d5927bd80f060/library%2Fcore%2Ftests%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44593aeb1387b1be355aeaf0040d5927bd80f060/library%2Fcore%2Ftests%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Foption.rs?ref=44593aeb1387b1be355aeaf0040d5927bd80f060", "patch": "@@ -367,6 +367,19 @@ fn option_const() {\n \n     const IS_NONE: bool = OPTION.is_none();\n     assert!(!IS_NONE);\n+\n+    const COPIED: Option<usize> = OPTION.as_ref().copied();\n+    assert_eq!(COPIED, OPTION);\n+}\n+\n+#[test]\n+const fn option_const_mut() {\n+    // test that the methods of `Option` that take mutable references are usable in a const context\n+\n+    let mut option: Option<usize> = Some(32);\n+\n+    let _take = option.take();\n+    let _replace = option.replace(42);\n }\n \n #[test]"}, {"sha": "c05a32742ba1e63fd1ad74c8afbfed0c8dcca303", "filename": "library/std/src/net/ip.rs", "status": "modified", "additions": 47, "deletions": 1, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/44593aeb1387b1be355aeaf0040d5927bd80f060/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44593aeb1387b1be355aeaf0040d5927bd80f060/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fip.rs?ref=44593aeb1387b1be355aeaf0040d5927bd80f060", "patch": "@@ -340,6 +340,30 @@ impl IpAddr {\n         }\n     }\n \n+    /// Returns [`true`] if this address is in a range designated for benchmarking.\n+    ///\n+    /// See the documentation for [`Ipv4Addr::is_benchmarking()`] and\n+    /// [`Ipv6Addr::is_benchmarking()`] for more details.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(ip)]\n+    ///\n+    /// use std::net::{IpAddr, Ipv4Addr, Ipv6Addr};\n+    ///\n+    /// assert_eq!(IpAddr::V4(Ipv4Addr::new(198, 19, 255, 255)).is_benchmarking(), true);\n+    /// assert_eq!(IpAddr::V6(Ipv6Addr::new(0x2001, 0x2, 0, 0, 0, 0, 0, 0)).is_benchmarking(), true);\n+    /// ```\n+    #[unstable(feature = \"ip\", issue = \"27709\")]\n+    #[inline]\n+    pub const fn is_benchmarking(&self) -> bool {\n+        match self {\n+            IpAddr::V4(ip) => ip.is_benchmarking(),\n+            IpAddr::V6(ip) => ip.is_benchmarking(),\n+        }\n+    }\n+\n     /// Returns [`true`] if this address is an [`IPv4` address], and [`false`]\n     /// otherwise.\n     ///\n@@ -1449,6 +1473,28 @@ impl Ipv6Addr {\n         (self.segments()[0] == 0x2001) && (self.segments()[1] == 0xdb8)\n     }\n \n+    /// Returns [`true`] if this is an address reserved for benchmarking (`2001:2::/48`).\n+    ///\n+    /// This property is defined in [IETF RFC 5180], where it is mistakenly specified as covering the range `2001:0200::/48`.\n+    /// This is corrected in [IETF RFC Errata 1752] to `2001:0002::/48`.\n+    ///\n+    /// [IETF RFC 5180]: https://tools.ietf.org/html/rfc5180\n+    /// [IETF RFC Errata 1752]: https://www.rfc-editor.org/errata_search.php?eid=1752\n+    ///\n+    /// ```\n+    /// #![feature(ip)]\n+    ///\n+    /// use std::net::Ipv6Addr;\n+    ///\n+    /// assert_eq!(Ipv6Addr::new(0, 0, 0, 0, 0, 0xffff, 0xc613, 0x0).is_benchmarking(), false);\n+    /// assert_eq!(Ipv6Addr::new(0x2001, 0x2, 0, 0, 0, 0, 0, 0).is_benchmarking(), true);\n+    /// ```\n+    #[unstable(feature = \"ip\", issue = \"27709\")]\n+    #[inline]\n+    pub const fn is_benchmarking(&self) -> bool {\n+        (self.segments()[0] == 0x2001) && (self.segments()[1] == 0x2) && (self.segments()[2] == 0)\n+    }\n+\n     /// Returns [`true`] if the address is a globally routable unicast address.\n     ///\n     /// The following return false:\n@@ -1589,7 +1635,7 @@ impl Ipv6Addr {\n     /// `::a.b.c.d` and `::ffff:a.b.c.d` become `a.b.c.d`\n     /// All addresses *not* starting with either all zeroes or `::ffff` will return `None`.\n     ///\n-    /// [IPv4 address]: Ipv4Addr\n+    /// [`IPv4` address]: Ipv4Addr\n     /// [IPv4-compatible]: Ipv6Addr#ipv4-compatible-ipv6-addresses\n     /// [IPv4-mapped]: Ipv6Addr#ipv4-mapped-ipv6-addresses\n     /// [IETF RFC 4291 section 2.5.5.1]: https://tools.ietf.org/html/rfc4291#section-2.5.5.1"}, {"sha": "babc854cd1d333e8dcf136197ada43dad24bdc3f", "filename": "library/std/src/net/ip/tests.rs", "status": "modified", "additions": 57, "deletions": 32, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/44593aeb1387b1be355aeaf0040d5927bd80f060/library%2Fstd%2Fsrc%2Fnet%2Fip%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44593aeb1387b1be355aeaf0040d5927bd80f060/library%2Fstd%2Fsrc%2Fnet%2Fip%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fip%2Ftests.rs?ref=44593aeb1387b1be355aeaf0040d5927bd80f060", "patch": "@@ -224,6 +224,7 @@ fn ip_properties() {\n             let global: u8 = 1 << 2;\n             let multicast: u8 = 1 << 3;\n             let doc: u8 = 1 << 4;\n+            let benchmarking: u8 = 1 << 5;\n \n             if ($mask & unspec) == unspec {\n                 assert!(ip!($s).is_unspecified());\n@@ -254,6 +255,12 @@ fn ip_properties() {\n             } else {\n                 assert!(!ip!($s).is_documentation());\n             }\n+\n+            if ($mask & benchmarking) == benchmarking {\n+                assert!(ip!($s).is_benchmarking());\n+            } else {\n+                assert!(!ip!($s).is_benchmarking());\n+            }\n         }};\n     }\n \n@@ -262,6 +269,7 @@ fn ip_properties() {\n     let global: u8 = 1 << 2;\n     let multicast: u8 = 1 << 3;\n     let doc: u8 = 1 << 4;\n+    let benchmarking: u8 = 1 << 5;\n \n     check!(\"0.0.0.0\", unspec);\n     check!(\"0.0.0.1\");\n@@ -280,9 +288,9 @@ fn ip_properties() {\n     check!(\"239.255.255.255\", global | multicast);\n     check!(\"255.255.255.255\");\n     // make sure benchmarking addresses are not global\n-    check!(\"198.18.0.0\");\n-    check!(\"198.18.54.2\");\n-    check!(\"198.19.255.255\");\n+    check!(\"198.18.0.0\", benchmarking);\n+    check!(\"198.18.54.2\", benchmarking);\n+    check!(\"198.19.255.255\", benchmarking);\n     // make sure addresses reserved for protocol assignment are not global\n     check!(\"192.0.0.0\");\n     check!(\"192.0.0.255\");\n@@ -313,6 +321,7 @@ fn ip_properties() {\n     check!(\"ff08::\", multicast);\n     check!(\"ff0e::\", global | multicast);\n     check!(\"2001:db8:85a3::8a2e:370:7334\", doc);\n+    check!(\"2001:2::ac32:23ff:21\", global | benchmarking);\n     check!(\"102:304:506:708:90a:b0c:d0e:f10\", global);\n }\n \n@@ -467,21 +476,22 @@ fn ipv6_properties() {\n             assert_eq!(&ip!($s).octets(), octets);\n             assert_eq!(Ipv6Addr::from(*octets), ip!($s));\n \n-            let unspecified: u16 = 1 << 0;\n-            let loopback: u16 = 1 << 1;\n-            let unique_local: u16 = 1 << 2;\n-            let global: u16 = 1 << 3;\n-            let unicast_link_local: u16 = 1 << 4;\n-            let unicast_global: u16 = 1 << 7;\n-            let documentation: u16 = 1 << 8;\n-            let multicast_interface_local: u16 = 1 << 9;\n-            let multicast_link_local: u16 = 1 << 10;\n-            let multicast_realm_local: u16 = 1 << 11;\n-            let multicast_admin_local: u16 = 1 << 12;\n-            let multicast_site_local: u16 = 1 << 13;\n-            let multicast_organization_local: u16 = 1 << 14;\n-            let multicast_global: u16 = 1 << 15;\n-            let multicast: u16 = multicast_interface_local\n+            let unspecified: u32 = 1 << 0;\n+            let loopback: u32 = 1 << 1;\n+            let unique_local: u32 = 1 << 2;\n+            let global: u32 = 1 << 3;\n+            let unicast_link_local: u32 = 1 << 4;\n+            let unicast_global: u32 = 1 << 7;\n+            let documentation: u32 = 1 << 8;\n+            let benchmarking: u32 = 1 << 16;\n+            let multicast_interface_local: u32 = 1 << 9;\n+            let multicast_link_local: u32 = 1 << 10;\n+            let multicast_realm_local: u32 = 1 << 11;\n+            let multicast_admin_local: u32 = 1 << 12;\n+            let multicast_site_local: u32 = 1 << 13;\n+            let multicast_organization_local: u32 = 1 << 14;\n+            let multicast_global: u32 = 1 << 15;\n+            let multicast: u32 = multicast_interface_local\n                 | multicast_admin_local\n                 | multicast_global\n                 | multicast_link_local\n@@ -524,6 +534,11 @@ fn ipv6_properties() {\n             } else {\n                 assert!(!ip!($s).is_documentation());\n             }\n+            if ($mask & benchmarking) == benchmarking {\n+                assert!(ip!($s).is_benchmarking());\n+            } else {\n+                assert!(!ip!($s).is_benchmarking());\n+            }\n             if ($mask & multicast) != 0 {\n                 assert!(ip!($s).multicast_scope().is_some());\n                 assert!(ip!($s).is_multicast());\n@@ -562,20 +577,21 @@ fn ipv6_properties() {\n         }\n     }\n \n-    let unspecified: u16 = 1 << 0;\n-    let loopback: u16 = 1 << 1;\n-    let unique_local: u16 = 1 << 2;\n-    let global: u16 = 1 << 3;\n-    let unicast_link_local: u16 = 1 << 4;\n-    let unicast_global: u16 = 1 << 7;\n-    let documentation: u16 = 1 << 8;\n-    let multicast_interface_local: u16 = 1 << 9;\n-    let multicast_link_local: u16 = 1 << 10;\n-    let multicast_realm_local: u16 = 1 << 11;\n-    let multicast_admin_local: u16 = 1 << 12;\n-    let multicast_site_local: u16 = 1 << 13;\n-    let multicast_organization_local: u16 = 1 << 14;\n-    let multicast_global: u16 = 1 << 15;\n+    let unspecified: u32 = 1 << 0;\n+    let loopback: u32 = 1 << 1;\n+    let unique_local: u32 = 1 << 2;\n+    let global: u32 = 1 << 3;\n+    let unicast_link_local: u32 = 1 << 4;\n+    let unicast_global: u32 = 1 << 7;\n+    let documentation: u32 = 1 << 8;\n+    let benchmarking: u32 = 1 << 16;\n+    let multicast_interface_local: u32 = 1 << 9;\n+    let multicast_link_local: u32 = 1 << 10;\n+    let multicast_realm_local: u32 = 1 << 11;\n+    let multicast_admin_local: u32 = 1 << 12;\n+    let multicast_site_local: u32 = 1 << 13;\n+    let multicast_organization_local: u32 = 1 << 14;\n+    let multicast_global: u32 = 1 << 15;\n \n     check!(\"::\", &[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], unspecified);\n \n@@ -671,6 +687,12 @@ fn ipv6_properties() {\n         documentation\n     );\n \n+    check!(\n+        \"2001:2::ac32:23ff:21\",\n+        &[0x20, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0xac, 0x32, 0x23, 0xff, 0, 0x21],\n+        global | unicast_global | benchmarking\n+    );\n+\n     check!(\n         \"102:304:506:708:90a:b0c:d0e:f10\",\n         &[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16],\n@@ -874,6 +896,9 @@ fn ipv6_const() {\n     const IS_DOCUMENTATION: bool = IP_ADDRESS.is_documentation();\n     assert!(!IS_DOCUMENTATION);\n \n+    const IS_BENCHMARKING: bool = IP_ADDRESS.is_benchmarking();\n+    assert!(!IS_BENCHMARKING);\n+\n     const IS_UNICAST_GLOBAL: bool = IP_ADDRESS.is_unicast_global();\n     assert!(!IS_UNICAST_GLOBAL);\n "}, {"sha": "7ac2f9d8af75a139609b84d5cb47bd349f83c1a8", "filename": "library/std/src/sys/unix/process/process_common.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/44593aeb1387b1be355aeaf0040d5927bd80f060/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44593aeb1387b1be355aeaf0040d5927bd80f060/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs?ref=44593aeb1387b1be355aeaf0040d5927bd80f060", "patch": "@@ -457,9 +457,15 @@ impl fmt::Debug for Command {\n     }\n }\n \n-#[derive(PartialEq, Eq, Clone, Copy, Debug)]\n+#[derive(PartialEq, Eq, Clone, Copy)]\n pub struct ExitCode(u8);\n \n+impl fmt::Debug for ExitCode {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        f.debug_tuple(\"unix_exit_status\").field(&self.0).finish()\n+    }\n+}\n+\n impl ExitCode {\n     pub const SUCCESS: ExitCode = ExitCode(EXIT_SUCCESS as _);\n     pub const FAILURE: ExitCode = ExitCode(EXIT_FAILURE as _);"}, {"sha": "8c33051cfa436f21ca4790c68172f8aff1c5ed46", "filename": "library/std/src/sys/unix/process/process_unix.rs", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/44593aeb1387b1be355aeaf0040d5927bd80f060/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44593aeb1387b1be355aeaf0040d5927bd80f060/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs?ref=44593aeb1387b1be355aeaf0040d5927bd80f060", "patch": "@@ -552,8 +552,7 @@ impl Process {\n         use crate::os::unix::io::FromRawFd;\n         use crate::sys_common::FromInner;\n         // Safety: If `pidfd` is nonnegative, we assume it's valid and otherwise unowned.\n-        let pidfd = (pidfd >= 0)\n-            .then(|| PidFd::from_inner(unsafe { sys::fd::FileDesc::from_raw_fd(pidfd) }));\n+        let pidfd = (pidfd >= 0).then(|| PidFd::from_inner(sys::fd::FileDesc::from_raw_fd(pidfd)));\n         Process { pid, status: None, pidfd }\n     }\n \n@@ -607,9 +606,15 @@ impl Process {\n }\n \n /// Unix exit statuses\n-#[derive(PartialEq, Eq, Clone, Copy, Debug)]\n+#[derive(PartialEq, Eq, Clone, Copy)]\n pub struct ExitStatus(c_int);\n \n+impl fmt::Debug for ExitStatus {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        f.debug_tuple(\"unix_wait_status\").field(&self.0).finish()\n+    }\n+}\n+\n impl ExitStatus {\n     pub fn new(status: c_int) -> ExitStatus {\n         ExitStatus(status)\n@@ -683,7 +688,7 @@ impl fmt::Display for ExitStatus {\n     }\n }\n \n-#[derive(PartialEq, Eq, Clone, Copy, Debug)]\n+#[derive(PartialEq, Eq, Clone, Copy)]\n pub struct ExitStatusError(NonZero_c_int);\n \n impl Into<ExitStatus> for ExitStatusError {\n@@ -692,6 +697,12 @@ impl Into<ExitStatus> for ExitStatusError {\n     }\n }\n \n+impl fmt::Debug for ExitStatusError {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        f.debug_tuple(\"unix_wait_status\").field(&self.0).finish()\n+    }\n+}\n+\n impl ExitStatusError {\n     pub fn code(self) -> Option<NonZeroI32> {\n         ExitStatus(self.0.into()).code().map(|st| st.try_into().unwrap())"}, {"sha": "9c631e7e51c1d10eb4f220fcbd67deb8f02bec16", "filename": "library/std/src/sys/windows/net.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/44593aeb1387b1be355aeaf0040d5927bd80f060/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44593aeb1387b1be355aeaf0040d5927bd80f060/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fnet.rs?ref=44593aeb1387b1be355aeaf0040d5927bd80f060", "patch": "@@ -2,13 +2,13 @@\n \n use crate::cmp;\n use crate::io::{self, IoSlice, IoSliceMut, Read};\n+use crate::lazy::SyncOnceCell;\n use crate::mem;\n use crate::net::{Shutdown, SocketAddr};\n use crate::os::windows::io::{\n     AsRawSocket, AsSocket, BorrowedSocket, FromRawSocket, IntoRawSocket, OwnedSocket, RawSocket,\n };\n use crate::ptr;\n-use crate::sync::Once;\n use crate::sys;\n use crate::sys::c;\n use crate::sys_common::net;\n@@ -29,26 +29,31 @@ pub mod netc {\n \n pub struct Socket(OwnedSocket);\n \n-static INIT: Once = Once::new();\n+static WSA_CLEANUP: SyncOnceCell<unsafe extern \"system\" fn() -> i32> = SyncOnceCell::new();\n \n /// Checks whether the Windows socket interface has been started already, and\n /// if not, starts it.\n pub fn init() {\n-    INIT.call_once(|| unsafe {\n+    let _ = WSA_CLEANUP.get_or_init(|| unsafe {\n         let mut data: c::WSADATA = mem::zeroed();\n         let ret = c::WSAStartup(\n             0x202, // version 2.2\n             &mut data,\n         );\n         assert_eq!(ret, 0);\n+\n+        // Only register `WSACleanup` if `WSAStartup` is actually ever called.\n+        // Workaround to prevent linking to `WS2_32.dll` when no network functionality is used.\n+        // See issue #85441.\n+        c::WSACleanup\n     });\n }\n \n pub fn cleanup() {\n-    if INIT.is_completed() {\n-        // only close the socket interface if it has actually been started\n+    // only perform cleanup if network functionality was actually initialized\n+    if let Some(cleanup) = WSA_CLEANUP.get() {\n         unsafe {\n-            c::WSACleanup();\n+            cleanup();\n         }\n     }\n }"}, {"sha": "1773c15464a94680714452c2d32115ab492f98db", "filename": "src/doc/rustdoc/src/lints.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/44593aeb1387b1be355aeaf0040d5927bd80f060/src%2Fdoc%2Frustdoc%2Fsrc%2Flints.md", "raw_url": "https://github.com/rust-lang/rust/raw/44593aeb1387b1be355aeaf0040d5927bd80f060/src%2Fdoc%2Frustdoc%2Fsrc%2Flints.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Flints.md?ref=44593aeb1387b1be355aeaf0040d5927bd80f060", "patch": "@@ -70,7 +70,7 @@ This lint **warns by default**. This lint detects when [intra-doc links] from pu\n For example:\n \n ```rust\n-#![warn(rustdoc::private_intra_doc_links)] // note: unecessary - warns by default.\n+#![warn(rustdoc::private_intra_doc_links)] // note: unnecessary - warns by default.\n \n /// [private]\n pub fn public() {}\n@@ -229,7 +229,7 @@ This lint **warns by default**. It detects code block attributes in\n documentation examples that have potentially mis-typed values. For example:\n \n ```rust\n-#![warn(rustdoc::invalid_codeblock_attributes)]  // note: unecessary - warns by default.\n+#![warn(rustdoc::invalid_codeblock_attributes)]  // note: unnecessary - warns by default.\n \n /// Example.\n ///\n@@ -348,7 +348,7 @@ This lint is **warn-by-default**. It detects URLs which are not links.\n For example:\n \n ```rust\n-#![warn(rustdoc::bare_urls)] // note: unecessary - warns by default.\n+#![warn(rustdoc::bare_urls)] // note: unnecessary - warns by default.\n \n /// http://example.org\n /// [http://example.net]"}, {"sha": "c7ae708c173c1b0ec42a7efdb9fb93c49e3a3677", "filename": "src/test/run-make/issue-85441/Makefile", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/44593aeb1387b1be355aeaf0040d5927bd80f060/src%2Ftest%2Frun-make%2Fissue-85441%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/44593aeb1387b1be355aeaf0040d5927bd80f060/src%2Ftest%2Frun-make%2Fissue-85441%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-85441%2FMakefile?ref=44593aeb1387b1be355aeaf0040d5927bd80f060", "patch": "@@ -0,0 +1,9 @@\n+# only-windows-msvc\n+\n+-include ../../run-make-fulldeps/tools.mk\n+\n+# Tests that WS2_32.dll is not unnecessarily linked, see issue #85441\n+\n+all:\n+\t$(RUSTC) empty.rs\n+\tobjdump -p $(TMPDIR)/empty.exe | $(CGREP) -v -i \"WS2_32.dll\""}, {"sha": "f328e4d9d04c31d0d70d16d21a07d1613be9d577", "filename": "src/test/run-make/issue-85441/empty.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44593aeb1387b1be355aeaf0040d5927bd80f060/src%2Ftest%2Frun-make%2Fissue-85441%2Fempty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44593aeb1387b1be355aeaf0040d5927bd80f060/src%2Ftest%2Frun-make%2Fissue-85441%2Fempty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-85441%2Fempty.rs?ref=44593aeb1387b1be355aeaf0040d5927bd80f060", "patch": "@@ -0,0 +1 @@\n+fn main() {}"}, {"sha": "c9efccd15b7c5016a44e19abb2b680f1fb2fe18b", "filename": "src/test/ui/nll/issue-55825-const-fn.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/44593aeb1387b1be355aeaf0040d5927bd80f060/src%2Ftest%2Fui%2Fnll%2Fissue-55825-const-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44593aeb1387b1be355aeaf0040d5927bd80f060/src%2Ftest%2Fui%2Fnll%2Fissue-55825-const-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-55825-const-fn.rs?ref=44593aeb1387b1be355aeaf0040d5927bd80f060", "patch": "@@ -0,0 +1,8 @@\n+// Regression test for issue #55825\n+// Tests that we don't emit a spurious warning in NLL mode\n+\n+#![feature(nll)]\n+\n+const fn no_dyn_trait_ret() -> &'static dyn std::fmt::Debug { &() } //~ ERROR const\n+\n+fn main() { }"}, {"sha": "9af5180343bf28c71a5a97589be702205da2fcd2", "filename": "src/test/ui/nll/issue-55825-const-fn.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/44593aeb1387b1be355aeaf0040d5927bd80f060/src%2Ftest%2Fui%2Fnll%2Fissue-55825-const-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/44593aeb1387b1be355aeaf0040d5927bd80f060/src%2Ftest%2Fui%2Fnll%2Fissue-55825-const-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-55825-const-fn.stderr?ref=44593aeb1387b1be355aeaf0040d5927bd80f060", "patch": "@@ -0,0 +1,12 @@\n+error[E0658]: trait objects in const fn are unstable\n+  --> $DIR/issue-55825-const-fn.rs:6:32\n+   |\n+LL | const fn no_dyn_trait_ret() -> &'static dyn std::fmt::Debug { &() }\n+   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n+   = help: add `#![feature(const_fn_trait_bound)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}]}