{"sha": "7a3184a04c4023d9ab93fe793c0d0ffb5e91240b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhMzE4NGEwNGM0MDIzZDlhYjkzZmU3OTNjMGQwZmZiNWU5MTI0MGI=", "commit": {"author": {"name": "Zack M. Davis", "email": "code@zackmdavis.net", "date": "2019-06-09T04:35:02Z"}, "committer": {"name": "Zack M. Davis", "email": "code@zackmdavis.net", "date": "2019-06-14T07:01:59Z"}, "message": "in which we decline to suggest the anonymous lifetime in declarations\n\nThe elided-lifetimes-in-path lint (part of our suite of Rust 2018\nidiom lints which we are hoping to promote to Warn status) was firing\nwith an illegal suggestion to write an anonymous lifetime in a\nstruct/item declaration (where we don't allow it). The linting code\nwas already deciding whether to act on the basis of a `ParamMode`\nenum, indicating whether the present path-segment was part of an\nexpression, or anywhere else. The present case seemed to be part of\nthe \"anywhere else\", and yet meriting different rules as far as the\nlint was concerned, so it seemed expedient to introduce a new enum\nmember. We yank out a `TyKind::Path` arm into its own method so that\nwe can call it with our new `ParamMode` specifically when lowering\nstruct fields. (The alternative strategy of changing the signature of\n`lower_ty` to take a `ParamMode` would be inelegant given that most of\nthe `TyKind` match arm bodies therein don't concern themselves with\n`ParamMode`.)\n\nResolves #61124.", "tree": {"sha": "797ab400ebf021bb4a71cc9a5e96875b94fc130f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/797ab400ebf021bb4a71cc9a5e96875b94fc130f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a3184a04c4023d9ab93fe793c0d0ffb5e91240b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a3184a04c4023d9ab93fe793c0d0ffb5e91240b", "html_url": "https://github.com/rust-lang/rust/commit/7a3184a04c4023d9ab93fe793c0d0ffb5e91240b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a3184a04c4023d9ab93fe793c0d0ffb5e91240b/comments", "author": {"login": "zackmdavis", "id": 1076988, "node_id": "MDQ6VXNlcjEwNzY5ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/1076988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zackmdavis", "html_url": "https://github.com/zackmdavis", "followers_url": "https://api.github.com/users/zackmdavis/followers", "following_url": "https://api.github.com/users/zackmdavis/following{/other_user}", "gists_url": "https://api.github.com/users/zackmdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/zackmdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zackmdavis/subscriptions", "organizations_url": "https://api.github.com/users/zackmdavis/orgs", "repos_url": "https://api.github.com/users/zackmdavis/repos", "events_url": "https://api.github.com/users/zackmdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/zackmdavis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "zackmdavis", "id": 1076988, "node_id": "MDQ6VXNlcjEwNzY5ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/1076988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zackmdavis", "html_url": "https://github.com/zackmdavis", "followers_url": "https://api.github.com/users/zackmdavis/followers", "following_url": "https://api.github.com/users/zackmdavis/following{/other_user}", "gists_url": "https://api.github.com/users/zackmdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/zackmdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zackmdavis/subscriptions", "organizations_url": "https://api.github.com/users/zackmdavis/orgs", "repos_url": "https://api.github.com/users/zackmdavis/repos", "events_url": "https://api.github.com/users/zackmdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/zackmdavis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cdd743755adef8eb27410a9f4e480d3cf74abeaf", "url": "https://api.github.com/repos/rust-lang/rust/commits/cdd743755adef8eb27410a9f4e480d3cf74abeaf", "html_url": "https://github.com/rust-lang/rust/commit/cdd743755adef8eb27410a9f4e480d3cf74abeaf"}], "stats": {"total": 60, "additions": 52, "deletions": 8}, "files": [{"sha": "373f255e6366d6c40d06cbe3a186eaa3b22c02a5", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 33, "deletions": 8, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/7a3184a04c4023d9ab93fe793c0d0ffb5e91240b/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3184a04c4023d9ab93fe793c0d0ffb5e91240b/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=7a3184a04c4023d9ab93fe793c0d0ffb5e91240b", "patch": "@@ -274,6 +274,8 @@ pub fn lower_crate(\n enum ParamMode {\n     /// Any path in a type context.\n     Explicit,\n+    /// Path in a type definition, where the anonymous lifetime `'_` is not allowed.\n+    ExplicitNamed,\n     /// The `module::Type` in `module::Type::method` in an expression.\n     Optional,\n }\n@@ -1489,6 +1491,23 @@ impl<'a> LoweringContext<'a> {\n         P(self.lower_ty_direct(t, itctx))\n     }\n \n+    fn lower_path_ty(\n+        &mut self,\n+        t: &Ty,\n+        qself: &Option<QSelf>,\n+        path: &Path,\n+        param_mode: ParamMode,\n+        itctx: ImplTraitContext<'_>\n+    ) -> hir::Ty {\n+        let id = self.lower_node_id(t.id);\n+        let qpath = self.lower_qpath(t.id, qself, path, param_mode, itctx);\n+        let ty = self.ty_path(id, t.span, qpath);\n+        if let hir::TyKind::TraitObject(..) = ty.node {\n+            self.maybe_lint_bare_trait(t.span, t.id, qself.is_none() && path.is_global());\n+        }\n+        ty\n+    }\n+\n     fn lower_ty_direct(&mut self, t: &Ty, mut itctx: ImplTraitContext<'_>) -> hir::Ty {\n         let kind = match t.node {\n             TyKind::Infer => hir::TyKind::Infer,\n@@ -1534,13 +1553,7 @@ impl<'a> LoweringContext<'a> {\n                 return self.lower_ty_direct(ty, itctx);\n             }\n             TyKind::Path(ref qself, ref path) => {\n-                let id = self.lower_node_id(t.id);\n-                let qpath = self.lower_qpath(t.id, qself, path, ParamMode::Explicit, itctx);\n-                let ty = self.ty_path(id, t.span, qpath);\n-                if let hir::TyKind::TraitObject(..) = ty.node {\n-                    self.maybe_lint_bare_trait(t.span, t.id, qself.is_none() && path.is_global());\n-                }\n-                return ty;\n+                return self.lower_path_ty(t, qself, path, ParamMode::Explicit, itctx);\n             }\n             TyKind::ImplicitSelf => {\n                 let res = self.expect_full_res(t.id);\n@@ -3086,6 +3099,18 @@ impl<'a> LoweringContext<'a> {\n     }\n \n     fn lower_struct_field(&mut self, (index, f): (usize, &StructField)) -> hir::StructField {\n+        let ty = if let TyKind::Path(ref qself, ref path) = f.ty.node {\n+            let t = self.lower_path_ty(\n+                &f.ty,\n+                qself,\n+                path,\n+                ParamMode::ExplicitNamed, // no `'_` in declarations (Issue #61124)\n+                ImplTraitContext::disallowed()\n+            );\n+            P(t)\n+        } else {\n+            self.lower_ty(&f.ty, ImplTraitContext::disallowed())\n+        };\n         hir::StructField {\n             span: f.span,\n             hir_id: self.lower_node_id(f.id),\n@@ -3095,7 +3120,7 @@ impl<'a> LoweringContext<'a> {\n                 None => Ident::new(sym::integer(index), f.span),\n             },\n             vis: self.lower_visibility(&f.vis, None),\n-            ty: self.lower_ty(&f.ty, ImplTraitContext::disallowed()),\n+            ty,\n             attrs: self.lower_attrs(&f.attrs),\n         }\n     }"}, {"sha": "cf08cb7eeacd856a241baf1c3e31d953809b7ac0", "filename": "src/test/ui/in-band-lifetimes/issue-61124-anon-lifetime-in-struct-declaration.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7a3184a04c4023d9ab93fe793c0d0ffb5e91240b/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fissue-61124-anon-lifetime-in-struct-declaration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3184a04c4023d9ab93fe793c0d0ffb5e91240b/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fissue-61124-anon-lifetime-in-struct-declaration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fissue-61124-anon-lifetime-in-struct-declaration.rs?ref=7a3184a04c4023d9ab93fe793c0d0ffb5e91240b", "patch": "@@ -0,0 +1,10 @@\n+#![deny(elided_lifetimes_in_paths)]\n+\n+// Previously, the elided-lifetimes-in-path lint would fire, but we don't want\n+// that, because `'_` isn't legal in struct declarations.\n+\n+struct Betrayal<'a> { x: &'a u8 }\n+\n+struct Heartbreak(Betrayal);  //~ ERROR missing lifetime specifier\n+\n+fn main() {}"}, {"sha": "9579abb76b32f265179c8e1011ea2f2ecbba3762", "filename": "src/test/ui/in-band-lifetimes/issue-61124-anon-lifetime-in-struct-declaration.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7a3184a04c4023d9ab93fe793c0d0ffb5e91240b/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fissue-61124-anon-lifetime-in-struct-declaration.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a3184a04c4023d9ab93fe793c0d0ffb5e91240b/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fissue-61124-anon-lifetime-in-struct-declaration.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fissue-61124-anon-lifetime-in-struct-declaration.stderr?ref=7a3184a04c4023d9ab93fe793c0d0ffb5e91240b", "patch": "@@ -0,0 +1,9 @@\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/issue-61124-anon-lifetime-in-struct-declaration.rs:8:19\n+   |\n+LL | struct Heartbreak(Betrayal);\n+   |                   ^^^^^^^^ expected lifetime parameter\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0106`."}]}