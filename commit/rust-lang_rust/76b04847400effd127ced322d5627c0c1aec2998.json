{"sha": "76b04847400effd127ced322d5627c0c1aec2998", "node_id": "C_kwDOAAsO6NoAKDc2YjA0ODQ3NDAwZWZmZDEyN2NlZDMyMmQ1NjI3YzBjMWFlYzI5OTg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-06T12:29:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-06T12:29:11Z"}, "message": "Auto merge of #99893 - compiler-errors:issue-99387, r=davidtwco\n\nDelay formatting trimmed path until lint/error is emitted\n\nFixes #99387\n\nr? `@davidtwco`", "tree": {"sha": "b45acea77d7a93eff1cc79b1bb90620b1316ca29", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b45acea77d7a93eff1cc79b1bb90620b1316ca29"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/76b04847400effd127ced322d5627c0c1aec2998", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/76b04847400effd127ced322d5627c0c1aec2998", "html_url": "https://github.com/rust-lang/rust/commit/76b04847400effd127ced322d5627c0c1aec2998", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/76b04847400effd127ced322d5627c0c1aec2998/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb71929892c4e7200d66b3efba9febead7056891", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb71929892c4e7200d66b3efba9febead7056891", "html_url": "https://github.com/rust-lang/rust/commit/bb71929892c4e7200d66b3efba9febead7056891"}, {"sha": "694a010a5c5c77f8aef822d5a7b2f3abece1ad36", "url": "https://api.github.com/repos/rust-lang/rust/commits/694a010a5c5c77f8aef822d5a7b2f3abece1ad36", "html_url": "https://github.com/rust-lang/rust/commit/694a010a5c5c77f8aef822d5a7b2f3abece1ad36"}], "stats": {"total": 78, "additions": 60, "deletions": 18}, "files": [{"sha": "17e6c9e9575fd28dd56922b981051a44233a4113", "filename": "compiler/rustc_errors/src/diagnostic.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/76b04847400effd127ced322d5627c0c1aec2998/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76b04847400effd127ced322d5627c0c1aec2998/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs?ref=76b04847400effd127ced322d5627c0c1aec2998", "patch": "@@ -40,6 +40,26 @@ pub trait IntoDiagnosticArg {\n     fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static>;\n }\n \n+pub struct DiagnosticArgFromDisplay<'a>(pub &'a dyn fmt::Display);\n+\n+impl IntoDiagnosticArg for DiagnosticArgFromDisplay<'_> {\n+    fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n+        self.0.to_string().into_diagnostic_arg()\n+    }\n+}\n+\n+impl<'a> From<&'a dyn fmt::Display> for DiagnosticArgFromDisplay<'a> {\n+    fn from(t: &'a dyn fmt::Display) -> Self {\n+        DiagnosticArgFromDisplay(t)\n+    }\n+}\n+\n+impl<'a, T: fmt::Display> From<&'a T> for DiagnosticArgFromDisplay<'a> {\n+    fn from(t: &'a T) -> Self {\n+        DiagnosticArgFromDisplay(t)\n+    }\n+}\n+\n macro_rules! into_diagnostic_arg_using_display {\n     ($( $ty:ty ),+ $(,)?) => {\n         $("}, {"sha": "2d3155a70edb357ffd5eae3832c9122b15100307", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/76b04847400effd127ced322d5627c0c1aec2998/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76b04847400effd127ced322d5627c0c1aec2998/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=76b04847400effd127ced322d5627c0c1aec2998", "patch": "@@ -371,8 +371,8 @@ impl fmt::Display for ExplicitBug {\n impl error::Error for ExplicitBug {}\n \n pub use diagnostic::{\n-    AddSubdiagnostic, DecorateLint, Diagnostic, DiagnosticArg, DiagnosticArgValue, DiagnosticId,\n-    DiagnosticStyledString, IntoDiagnosticArg, SubDiagnostic,\n+    AddSubdiagnostic, DecorateLint, Diagnostic, DiagnosticArg, DiagnosticArgFromDisplay,\n+    DiagnosticArgValue, DiagnosticId, DiagnosticStyledString, IntoDiagnosticArg, SubDiagnostic,\n };\n pub use diagnostic_builder::{DiagnosticBuilder, EmissionGuarantee, LintDiagnosticBuilder};\n use std::backtrace::Backtrace;"}, {"sha": "aca7d770f3495c0b15a802856fb5b55fca8c6a8a", "filename": "compiler/rustc_privacy/src/errors.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/76b04847400effd127ced322d5627c0c1aec2998/compiler%2Frustc_privacy%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76b04847400effd127ced322d5627c0c1aec2998/compiler%2Frustc_privacy%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Ferrors.rs?ref=76b04847400effd127ced322d5627c0c1aec2998", "patch": "@@ -1,3 +1,4 @@\n+use rustc_errors::DiagnosticArgFromDisplay;\n use rustc_macros::{LintDiagnostic, SessionDiagnostic, SessionSubdiagnostic};\n use rustc_span::{Span, Symbol};\n \n@@ -35,7 +36,7 @@ pub struct ItemIsPrivate<'a> {\n     #[label]\n     pub span: Span,\n     pub kind: &'a str,\n-    pub descr: String,\n+    pub descr: DiagnosticArgFromDisplay<'a>,\n }\n \n #[derive(SessionDiagnostic)]\n@@ -55,7 +56,7 @@ pub struct InPublicInterfaceTraits<'a> {\n     pub span: Span,\n     pub vis_descr: &'static str,\n     pub kind: &'a str,\n-    pub descr: String,\n+    pub descr: DiagnosticArgFromDisplay<'a>,\n     #[label(privacy::visibility_label)]\n     pub vis_span: Span,\n }\n@@ -69,7 +70,7 @@ pub struct InPublicInterface<'a> {\n     pub span: Span,\n     pub vis_descr: &'static str,\n     pub kind: &'a str,\n-    pub descr: String,\n+    pub descr: DiagnosticArgFromDisplay<'a>,\n     #[label(privacy::visibility_label)]\n     pub vis_span: Span,\n }\n@@ -78,7 +79,7 @@ pub struct InPublicInterface<'a> {\n #[lint(privacy::from_private_dep_in_public_interface)]\n pub struct FromPrivateDependencyInPublicInterface<'a> {\n     pub kind: &'a str,\n-    pub descr: String,\n+    pub descr: DiagnosticArgFromDisplay<'a>,\n     pub krate: Symbol,\n }\n \n@@ -87,5 +88,5 @@ pub struct FromPrivateDependencyInPublicInterface<'a> {\n pub struct PrivateInPublicLint<'a> {\n     pub vis_descr: &'static str,\n     pub kind: &'a str,\n-    pub descr: String,\n+    pub descr: DiagnosticArgFromDisplay<'a>,\n }"}, {"sha": "c28d0569d4ce9390708e96233ad94a726b24275e", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/76b04847400effd127ced322d5627c0c1aec2998/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76b04847400effd127ced322d5627c0c1aec2998/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=76b04847400effd127ced322d5627c0c1aec2998", "patch": "@@ -1079,11 +1079,7 @@ impl<'tcx> TypePrivacyVisitor<'tcx> {\n     fn check_def_id(&mut self, def_id: DefId, kind: &str, descr: &dyn fmt::Display) -> bool {\n         let is_error = !self.item_is_accessible(def_id);\n         if is_error {\n-            self.tcx.sess.emit_err(ItemIsPrivate {\n-                span: self.span,\n-                kind,\n-                descr: descr.to_string(),\n-            });\n+            self.tcx.sess.emit_err(ItemIsPrivate { span: self.span, kind, descr: descr.into() });\n         }\n         is_error\n     }\n@@ -1255,7 +1251,9 @@ impl<'tcx> Visitor<'tcx> for TypePrivacyVisitor<'tcx> {\n                 };\n                 let kind = kind.descr(def_id);\n                 let _ = match name {\n-                    Some(name) => sess.emit_err(ItemIsPrivate { span, kind, descr: name }),\n+                    Some(name) => {\n+                        sess.emit_err(ItemIsPrivate { span, kind, descr: (&name).into() })\n+                    }\n                     None => sess.emit_err(UnnamedItemIsPrivate { span, kind }),\n                 };\n                 return;\n@@ -1723,7 +1721,7 @@ impl SearchInterfaceForPrivateItemsVisitor<'_> {\n                 self.tcx.def_span(self.item_def_id.to_def_id()),\n                 FromPrivateDependencyInPublicInterface {\n                     kind,\n-                    descr: descr.to_string(),\n+                    descr: descr.into(),\n                     krate: self.tcx.crate_name(def_id.krate),\n                 },\n             );\n@@ -1750,7 +1748,6 @@ impl SearchInterfaceForPrivateItemsVisitor<'_> {\n                 }\n             };\n             let span = self.tcx.def_span(self.item_def_id.to_def_id());\n-            let descr = descr.to_string();\n             if self.has_old_errors\n                 || self.in_assoc_ty\n                 || self.tcx.resolutions(()).has_pub_restricted\n@@ -1761,15 +1758,15 @@ impl SearchInterfaceForPrivateItemsVisitor<'_> {\n                         span,\n                         vis_descr,\n                         kind,\n-                        descr,\n+                        descr: descr.into(),\n                         vis_span,\n                     });\n                 } else {\n                     self.tcx.sess.emit_err(InPublicInterface {\n                         span,\n                         vis_descr,\n                         kind,\n-                        descr,\n+                        descr: descr.into(),\n                         vis_span,\n                     });\n                 }\n@@ -1778,7 +1775,7 @@ impl SearchInterfaceForPrivateItemsVisitor<'_> {\n                     lint::builtin::PRIVATE_IN_PUBLIC,\n                     hir_id,\n                     span,\n-                    PrivateInPublicLint { vis_descr, kind, descr },\n+                    PrivateInPublicLint { vis_descr, kind, descr: descr.into() },\n                 );\n             }\n         }"}, {"sha": "616eb935e93d47d5454041c74e4aa08b8286caa5", "filename": "src/test/ui/lint/issue-99387.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/76b04847400effd127ced322d5627c0c1aec2998/src%2Ftest%2Fui%2Flint%2Fissue-99387.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76b04847400effd127ced322d5627c0c1aec2998/src%2Ftest%2Fui%2Flint%2Fissue-99387.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-99387.rs?ref=76b04847400effd127ced322d5627c0c1aec2998", "patch": "@@ -0,0 +1,24 @@\n+// check-pass\n+\n+#![feature(type_alias_impl_trait)]\n+#![allow(private_in_public)]\n+\n+pub type Successors<'a> = impl Iterator<Item = &'a ()>;\n+\n+pub fn f<'a>() -> Successors<'a> {\n+    None.into_iter()\n+}\n+\n+trait Tr {\n+    type Item;\n+}\n+\n+impl<'a> Tr for &'a () {\n+    type Item = Successors<'a>;\n+}\n+\n+pub fn ohno<'a>() -> <&'a () as Tr>::Item {\n+    None.into_iter()\n+}\n+\n+fn main() {}"}]}