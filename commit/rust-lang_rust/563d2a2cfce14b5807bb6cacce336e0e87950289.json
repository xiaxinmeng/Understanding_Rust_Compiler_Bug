{"sha": "563d2a2cfce14b5807bb6cacce336e0e87950289", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2M2QyYTJjZmNlMTRiNTgwN2JiNmNhY2NlMzM2ZTBlODc5NTAyODk=", "commit": {"author": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2021-04-22T04:09:56Z"}, "committer": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2021-05-01T15:21:41Z"}, "message": "Add select function", "tree": {"sha": "37fdf616b0f8b24ac6b315b446f41c81168c5ec2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/37fdf616b0f8b24ac6b315b446f41c81168c5ec2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/563d2a2cfce14b5807bb6cacce336e0e87950289", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/563d2a2cfce14b5807bb6cacce336e0e87950289", "html_url": "https://github.com/rust-lang/rust/commit/563d2a2cfce14b5807bb6cacce336e0e87950289", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/563d2a2cfce14b5807bb6cacce336e0e87950289/comments", "author": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a063bc2ed892315c8317f08f263466af35e9279", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a063bc2ed892315c8317f08f263466af35e9279", "html_url": "https://github.com/rust-lang/rust/commit/9a063bc2ed892315c8317f08f263466af35e9279"}], "stats": {"total": 56, "additions": 56, "deletions": 0}, "files": [{"sha": "798c4461f79fdd382dded94c951cd81d25496a66", "filename": "crates/core_simd/src/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/563d2a2cfce14b5807bb6cacce336e0e87950289/crates%2Fcore_simd%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/563d2a2cfce14b5807bb6cacce336e0e87950289/crates%2Fcore_simd%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fintrinsics.rs?ref=563d2a2cfce14b5807bb6cacce336e0e87950289", "patch": "@@ -81,6 +81,7 @@ extern \"platform-intrinsic\" {\n     pub(crate) fn simd_bitmask<T, U>(x: T) -> U;\n \n     // select\n+    pub(crate) fn simd_select<T, U>(m: T, a: U, b: U) -> U;\n     pub(crate) fn simd_select_bitmask<T, U>(m: T, a: U, b: U) -> U;\n }\n "}, {"sha": "3489dfb5f3eab49f6b04d3bfc7c5b1a7b4c8e040", "filename": "crates/core_simd/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/563d2a2cfce14b5807bb6cacce336e0e87950289/crates%2Fcore_simd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/563d2a2cfce14b5807bb6cacce336e0e87950289/crates%2Fcore_simd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Flib.rs?ref=563d2a2cfce14b5807bb6cacce336e0e87950289", "patch": "@@ -14,6 +14,9 @@ mod transmute;\n #[macro_use]\n mod reduction;\n \n+mod select;\n+pub use select::Select;\n+\n mod comparisons;\n mod fmt;\n mod intrinsics;"}, {"sha": "66b0839cf24893aafc14ff8d1edaec4c7d49a3da", "filename": "crates/core_simd/src/select.rs", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/563d2a2cfce14b5807bb6cacce336e0e87950289/crates%2Fcore_simd%2Fsrc%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/563d2a2cfce14b5807bb6cacce336e0e87950289/crates%2Fcore_simd%2Fsrc%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fselect.rs?ref=563d2a2cfce14b5807bb6cacce336e0e87950289", "patch": "@@ -0,0 +1,52 @@\n+mod sealed {\n+pub trait Sealed {}\n+}\n+use sealed::Sealed;\n+\n+/// Supporting trait for vector `select` function\n+pub trait Select<Mask>: Sealed {}\n+\n+macro_rules! impl_select {\n+    {\n+        $mask:ident ($bits_ty:ident): $($type:ident),*\n+    } => {\n+        $(\n+        impl<const LANES: usize> Sealed for crate::$type<LANES> where Self: crate::LanesAtMost32 {}\n+        impl<const LANES: usize> Select<crate::$mask<LANES>> for crate::$type<LANES>\n+        where\n+            crate::$mask<LANES>: crate::Mask,\n+            crate::$bits_ty<LANES>: crate::LanesAtMost32,\n+            Self: crate::LanesAtMost32,\n+        {}\n+        )*\n+\n+        impl<const LANES: usize> crate::$mask<LANES>\n+        where\n+            Self: crate::Mask,\n+            crate::$bits_ty<LANES>: crate::LanesAtMost32,\n+        {\n+            /// Choose lanes from two vectors.\n+            ///\n+            /// For each lane in the mask, choose the corresponding lane from `true_values` if\n+            /// that lane mask is true, and `false_values` if that lane mask is false.\n+            ///\n+            /// ```\n+            /// # use core_simd::{Mask32, SimdI32};\n+            /// let a = SimdI32::from_array([0, 1, 2, 3]);\n+            /// let b = SimdI32::from_array([4, 5, 6, 7]);\n+            /// let mask = Mask32::from_array([true, false, false, true]);\n+            /// let c = mask.select(a, b);\n+            /// assert_eq!(c.to_array(), [0, 5, 6, 3]);\n+            /// ```\n+            pub fn select<S: Select<Self>>(self, true_values: S, false_values: S) -> S {\n+                unsafe { crate::intrinsics::simd_select(self.to_int(), true_values, false_values) }\n+            }\n+        }\n+    }\n+}\n+\n+impl_select! { Mask8 (SimdI8): SimdU8, SimdI8 }\n+impl_select! { Mask16 (SimdI16): SimdU16, SimdI16 }\n+impl_select! { Mask32 (SimdI32): SimdU32, SimdI32, SimdF32}\n+impl_select! { Mask64 (SimdI64): SimdU64, SimdI64, SimdF64}\n+impl_select! { MaskSize (SimdIsize): SimdUsize, SimdIsize }"}]}