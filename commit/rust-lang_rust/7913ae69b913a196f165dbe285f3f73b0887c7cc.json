{"sha": "7913ae69b913a196f165dbe285f3f73b0887c7cc", "node_id": "C_kwDOAAsO6NoAKDc5MTNhZTY5YjkxM2ExOTZmMTY1ZGJlMjg1ZjNmNzNiMDg4N2M3Y2M", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-05-26T10:59:57Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-05-26T10:59:57Z"}, "message": "internal: Remove `Interned` usage from nameres collector", "tree": {"sha": "b4835c6ec7ad6f99fd8f0318033d6e32cd6381fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b4835c6ec7ad6f99fd8f0318033d6e32cd6381fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7913ae69b913a196f165dbe285f3f73b0887c7cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7913ae69b913a196f165dbe285f3f73b0887c7cc", "html_url": "https://github.com/rust-lang/rust/commit/7913ae69b913a196f165dbe285f3f73b0887c7cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7913ae69b913a196f165dbe285f3f73b0887c7cc/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02c2377229c786ef69401084a03f47f72dc193b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/02c2377229c786ef69401084a03f47f72dc193b0", "html_url": "https://github.com/rust-lang/rust/commit/02c2377229c786ef69401084a03f47f72dc193b0"}], "stats": {"total": 52, "additions": 21, "deletions": 31}, "files": [{"sha": "7fea46bee3ca8f8cf6da77e8dc48ff85cef2c05a", "filename": "crates/hir-def/src/nameres/collector.rs", "status": "modified", "additions": 21, "deletions": 31, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/7913ae69b913a196f165dbe285f3f73b0887c7cc/crates%2Fhir-def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7913ae69b913a196f165dbe285f3f73b0887c7cc/crates%2Fhir-def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fnameres%2Fcollector.rs?ref=7913ae69b913a196f165dbe285f3f73b0887c7cc", "patch": "@@ -29,7 +29,6 @@ use crate::{\n     attr_macro_as_call_id,\n     db::DefDatabase,\n     derive_macro_as_call_id,\n-    intern::Interned,\n     item_scope::{ImportType, PerNsGlobImports},\n     item_tree::{\n         self, Fields, FileItemTreeId, ImportKind, ItemTree, ItemTreeId, ItemTreeNode, MacroCall,\n@@ -96,7 +95,7 @@ pub(super) fn collect_defs(db: &dyn DefDatabase, mut def_map: DefMap, tree_id: T\n         deps,\n         glob_imports: FxHashMap::default(),\n         unresolved_imports: Vec::new(),\n-        resolved_imports: Vec::new(),\n+        indeterminate_imports: Vec::new(),\n         unresolved_macros: Vec::new(),\n         mod_dirs: FxHashMap::default(),\n         cfg_options,\n@@ -142,9 +141,9 @@ enum ImportSource {\n     ExternCrate(ItemTreeId<item_tree::ExternCrate>),\n }\n \n-#[derive(Clone, Debug, Eq, PartialEq)]\n+#[derive(Debug, Eq, PartialEq)]\n struct Import {\n-    path: Interned<ModPath>,\n+    path: ModPath,\n     alias: Option<ImportAlias>,\n     visibility: RawVisibility,\n     kind: ImportKind,\n@@ -169,7 +168,7 @@ impl Import {\n         let mut res = Vec::new();\n         it.use_tree.expand(|idx, path, kind, alias| {\n             res.push(Self {\n-                path: Interned::new(path), // FIXME this makes little sense\n+                path,\n                 alias,\n                 visibility: visibility.clone(),\n                 kind,\n@@ -192,10 +191,7 @@ impl Import {\n         let attrs = &tree.attrs(db, krate, ModItem::from(id.value).into());\n         let visibility = &tree[it.visibility];\n         Self {\n-            path: Interned::new(ModPath::from_segments(\n-                PathKind::Plain,\n-                iter::once(it.name.clone()),\n-            )),\n+            path: ModPath::from_segments(PathKind::Plain, iter::once(it.name.clone())),\n             alias: it.alias.clone(),\n             visibility: visibility.clone(),\n             kind: ImportKind::Plain,\n@@ -207,7 +203,7 @@ impl Import {\n     }\n }\n \n-#[derive(Clone, Debug, Eq, PartialEq)]\n+#[derive(Debug, Eq, PartialEq)]\n struct ImportDirective {\n     module_id: LocalModuleId,\n     import: Import,\n@@ -236,7 +232,7 @@ struct DefCollector<'a> {\n     deps: FxHashMap<Name, ModuleId>,\n     glob_imports: FxHashMap<LocalModuleId, Vec<(LocalModuleId, Visibility)>>,\n     unresolved_imports: Vec<ImportDirective>,\n-    resolved_imports: Vec<ImportDirective>,\n+    indeterminate_imports: Vec<ImportDirective>,\n     unresolved_macros: Vec<MacroDirective>,\n     mod_dirs: FxHashMap<LocalModuleId, ModDir>,\n     cfg_options: &'a CfgOptions,\n@@ -352,30 +348,32 @@ impl DefCollector<'_> {\n \n         // main name resolution fixed-point loop.\n         let mut i = 0;\n-        'outer: loop {\n-            loop {\n+        'resolve_attr: loop {\n+            'resolve_macros: loop {\n                 self.db.unwind_if_cancelled();\n+\n                 {\n                     let _p = profile::span(\"resolve_imports loop\");\n-                    loop {\n+\n+                    'resolve_imports: loop {\n                         if self.resolve_imports() == ReachedFixedPoint::Yes {\n-                            break;\n+                            break 'resolve_imports;\n                         }\n                     }\n                 }\n                 if self.resolve_macros() == ReachedFixedPoint::Yes {\n-                    break;\n+                    break 'resolve_macros;\n                 }\n \n                 i += 1;\n                 if FIXED_POINT_LIMIT.check(i).is_err() {\n                     tracing::error!(\"name resolution is stuck\");\n-                    break 'outer;\n+                    break 'resolve_attr;\n                 }\n             }\n \n             if self.reseed_with_unresolved_attribute() == ReachedFixedPoint::Yes {\n-                break;\n+                break 'resolve_attr;\n             }\n         }\n     }\n@@ -389,14 +387,9 @@ impl DefCollector<'_> {\n         // As some of the macros will expand newly import shadowing partial resolved imports\n         // FIXME: We maybe could skip this, if we handle the indeterminate imports in `resolve_imports`\n         // correctly\n-        let partial_resolved = self.resolved_imports.iter().filter_map(|directive| {\n-            if let PartialResolvedImport::Indeterminate(_) = directive.status {\n-                let mut directive = directive.clone();\n-                directive.status = PartialResolvedImport::Unresolved;\n-                Some(directive)\n-            } else {\n-                None\n-            }\n+        let partial_resolved = self.indeterminate_imports.drain(..).filter_map(|mut directive| {\n+            directive.status = PartialResolvedImport::Unresolved;\n+            Some(directive)\n         });\n         self.unresolved_imports.extend(partial_resolved);\n         self.resolve_imports();\n@@ -717,15 +710,12 @@ impl DefCollector<'_> {\n                 match directive.status {\n                     PartialResolvedImport::Indeterminate(_) => {\n                         self.record_resolved_import(&directive);\n-                        // FIXME: For avoid performance regression,\n-                        // we consider an imported resolved if it is indeterminate (i.e not all namespace resolved)\n-                        self.resolved_imports.push(directive);\n+                        self.indeterminate_imports.push(directive);\n                         res = ReachedFixedPoint::No;\n                         None\n                     }\n                     PartialResolvedImport::Resolved(_) => {\n                         self.record_resolved_import(&directive);\n-                        self.resolved_imports.push(directive);\n                         res = ReachedFixedPoint::No;\n                         None\n                     }\n@@ -2102,7 +2092,7 @@ mod tests {\n             deps: FxHashMap::default(),\n             glob_imports: FxHashMap::default(),\n             unresolved_imports: Vec::new(),\n-            resolved_imports: Vec::new(),\n+            indeterminate_imports: Vec::new(),\n             unresolved_macros: Vec::new(),\n             mod_dirs: FxHashMap::default(),\n             cfg_options: &CfgOptions::default(),"}]}