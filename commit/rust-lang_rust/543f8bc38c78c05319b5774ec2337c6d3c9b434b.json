{"sha": "543f8bc38c78c05319b5774ec2337c6d3c9b434b", "node_id": "C_kwDOAAsO6NoAKDU0M2Y4YmMzOGM3OGMwNTMxOWI1Nzc0ZWMyMzM3YzZkM2M5YjQzNGI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-04-15T18:18:30Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-04-16T11:28:13Z"}, "message": "fix clippy::toplevel_ref_arg and ::manual_map", "tree": {"sha": "ff617ed6f58a0e2622730499574eceb7bbccf461", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff617ed6f58a0e2622730499574eceb7bbccf461"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/543f8bc38c78c05319b5774ec2337c6d3c9b434b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/543f8bc38c78c05319b5774ec2337c6d3c9b434b", "html_url": "https://github.com/rust-lang/rust/commit/543f8bc38c78c05319b5774ec2337c6d3c9b434b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/543f8bc38c78c05319b5774ec2337c6d3c9b434b/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6e956dade79bdc084dfe3078abab24656a1b483", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6e956dade79bdc084dfe3078abab24656a1b483", "html_url": "https://github.com/rust-lang/rust/commit/e6e956dade79bdc084dfe3078abab24656a1b483"}], "stats": {"total": 112, "additions": 42, "deletions": 70}, "files": [{"sha": "f17df5b0a83c72eeea38e41cdb6faec20def193b", "filename": "compiler/rustc_builtin_macros/src/format.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/543f8bc38c78c05319b5774ec2337c6d3c9b434b/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/543f8bc38c78c05319b5774ec2337c6d3c9b434b/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs?ref=543f8bc38c78c05319b5774ec2337c6d3c9b434b", "patch": "@@ -141,13 +141,7 @@ fn parse_args<'a>(ecx: &mut ExtCtxt<'a>, sp: Span, tts: TokenStream) -> PResult<\n                         args: args\n                             .named_args()\n                             .iter()\n-                            .filter_map(|a| {\n-                                if let Some(ident) = a.kind.ident() {\n-                                    Some((a, ident))\n-                                } else {\n-                                    None\n-                                }\n-                            })\n+                            .filter_map(|a| a.kind.ident().map(|ident| (a, ident)))\n                             .map(|(arg, n)| n.span.to(arg.expr.span))\n                             .collect(),\n                     });"}, {"sha": "99581ed2375903f3f096fdea42e5b58d11d7bedf", "filename": "compiler/rustc_data_structures/src/sso/map.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/543f8bc38c78c05319b5774ec2337c6d3c9b434b/compiler%2Frustc_data_structures%2Fsrc%2Fsso%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/543f8bc38c78c05319b5774ec2337c6d3c9b434b/compiler%2Frustc_data_structures%2Fsrc%2Fsso%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsso%2Fmap.rs?ref=543f8bc38c78c05319b5774ec2337c6d3c9b434b", "patch": "@@ -256,12 +256,9 @@ impl<K: Eq + Hash, V> SsoHashMap<K, V> {\n     pub fn remove(&mut self, key: &K) -> Option<V> {\n         match self {\n             SsoHashMap::Array(array) => {\n-                if let Some(index) = array.iter().position(|(k, _v)| k == key) {\n-                    Some(array.swap_remove(index).1)\n-                } else {\n-                    None\n-                }\n+                array.iter().position(|(k, _v)| k == key).map(|index| array.swap_remove(index).1)\n             }\n+\n             SsoHashMap::Map(map) => map.remove(key),\n         }\n     }"}, {"sha": "80a64e59c0f0e161f56071f8faa29b9e39e1f54b", "filename": "compiler/rustc_lint/src/unused.rs", "status": "modified", "additions": 16, "deletions": 23, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/543f8bc38c78c05319b5774ec2337c6d3c9b434b/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/543f8bc38c78c05319b5774ec2337c6d3c9b434b/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Funused.rs?ref=543f8bc38c78c05319b5774ec2337c6d3c9b434b", "patch": "@@ -636,20 +636,14 @@ trait UnusedDelimLint {\n             return;\n         }\n         let spans = match value.kind {\n-            ast::ExprKind::Block(ref block, None) if block.stmts.len() == 1 => {\n-                if let Some(span) = block.stmts[0].span.find_ancestor_inside(value.span) {\n-                    Some((value.span.with_hi(span.lo()), value.span.with_lo(span.hi())))\n-                } else {\n-                    None\n-                }\n-            }\n+            ast::ExprKind::Block(ref block, None) if block.stmts.len() == 1 => block.stmts[0]\n+                .span\n+                .find_ancestor_inside(value.span)\n+                .map(|span| (value.span.with_hi(span.lo()), value.span.with_lo(span.hi()))),\n             ast::ExprKind::Paren(ref expr) => {\n-                let expr_span = expr.span.find_ancestor_inside(value.span);\n-                if let Some(expr_span) = expr_span {\n-                    Some((value.span.with_hi(expr_span.lo()), value.span.with_lo(expr_span.hi())))\n-                } else {\n-                    None\n-                }\n+                expr.span.find_ancestor_inside(value.span).map(|expr_span| {\n+                    (value.span.with_hi(expr_span.lo()), value.span.with_lo(expr_span.hi()))\n+                })\n             }\n             _ => return,\n         };\n@@ -928,11 +922,10 @@ impl UnusedParens {\n                 // Otherwise proceed with linting.\n                 _ => {}\n             }\n-            let spans = if let Some(inner) = inner.span.find_ancestor_inside(value.span) {\n-                Some((value.span.with_hi(inner.lo()), value.span.with_lo(inner.hi())))\n-            } else {\n-                None\n-            };\n+            let spans = inner\n+                .span\n+                .find_ancestor_inside(value.span)\n+                .map(|inner| (value.span.with_hi(inner.lo()), value.span.with_lo(inner.hi())));\n             self.emit_unused_delims(cx, value.span, spans, \"pattern\", keep_space);\n         }\n     }\n@@ -1043,11 +1036,11 @@ impl EarlyLintPass for UnusedParens {\n                         if self.with_self_ty_parens && b.generic_params.len() > 0 => {}\n                     ast::TyKind::ImplTrait(_, bounds) if bounds.len() > 1 => {}\n                     _ => {\n-                        let spans = if let Some(r) = r.span.find_ancestor_inside(ty.span) {\n-                            Some((ty.span.with_hi(r.lo()), ty.span.with_lo(r.hi())))\n-                        } else {\n-                            None\n-                        };\n+                        let spans = r\n+                            .span\n+                            .find_ancestor_inside(ty.span)\n+                            .map(|r| (ty.span.with_hi(r.lo()), ty.span.with_lo(r.hi())));\n+\n                         self.emit_unused_delims(cx, ty.span, spans, \"type\", (false, false));\n                     }\n                 }"}, {"sha": "3a105a2abaeb990e6ac94b1fa12eb3e2765c046e", "filename": "compiler/rustc_mir_transform/src/const_prop_lint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/543f8bc38c78c05319b5774ec2337c6d3c9b434b/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/543f8bc38c78c05319b5774ec2337c6d3c9b434b/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs?ref=543f8bc38c78c05319b5774ec2337c6d3c9b434b", "patch": "@@ -493,7 +493,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         cond: &Operand<'tcx>,\n         location: Location,\n     ) -> Option<!> {\n-        let ref value = self.eval_operand(&cond, location)?;\n+        let value = &self.eval_operand(&cond, location)?;\n         trace!(\"assertion on {:?} should be {:?}\", value, expected);\n \n         let expected = Scalar::from_bool(expected);"}, {"sha": "e1db19557cfe26cd81fd8eff9a9ae77123bb9125", "filename": "compiler/rustc_parse/src/parser/attr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/543f8bc38c78c05319b5774ec2337c6d3c9b434b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/543f8bc38c78c05319b5774ec2337c6d3c9b434b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr.rs?ref=543f8bc38c78c05319b5774ec2337c6d3c9b434b", "patch": "@@ -45,10 +45,10 @@ impl<'a> Parser<'a> {\n                     Some(InnerAttrForbiddenReason::AfterOuterDocComment {\n                         prev_doc_comment_span: prev_outer_attr_sp.unwrap(),\n                     })\n-                } else if let Some(prev_outer_attr_sp) = prev_outer_attr_sp {\n-                    Some(InnerAttrForbiddenReason::AfterOuterAttribute { prev_outer_attr_sp })\n                 } else {\n-                    None\n+                    prev_outer_attr_sp.map(|prev_outer_attr_sp| {\n+                        InnerAttrForbiddenReason::AfterOuterAttribute { prev_outer_attr_sp }\n+                    })\n                 };\n                 let inner_parse_policy = InnerAttrPolicy::Forbidden(inner_error_reason);\n                 just_parsed_doc_comment = false;"}, {"sha": "4f8e966ff6672f9b18d36bfc603e117362bf317d", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/543f8bc38c78c05319b5774ec2337c6d3c9b434b/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/543f8bc38c78c05319b5774ec2337c6d3c9b434b/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=543f8bc38c78c05319b5774ec2337c6d3c9b434b", "patch": "@@ -1867,15 +1867,13 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                 Some(LexicalScopeBinding::Item(name_binding)) => Some(name_binding.span),\n                 _ => None,\n             };\n-            let suggestion = if let Some(span) = match_span {\n-                Some((\n+            let suggestion = match_span.map(|span| {\n+                (\n                     vec![(span, String::from(\"\"))],\n                     format!(\"`{}` is defined here, but is not a type\", ident),\n                     Applicability::MaybeIncorrect,\n-                ))\n-            } else {\n-                None\n-            };\n+                )\n+            });\n \n             (format!(\"use of undeclared type `{}`\", ident), suggestion)\n         } else {"}, {"sha": "1e9653d0c5bb8ec3a92b0c06786f0e9bef010fb4", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/543f8bc38c78c05319b5774ec2337c6d3c9b434b/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/543f8bc38c78c05319b5774ec2337c6d3c9b434b/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=543f8bc38c78c05319b5774ec2337c6d3c9b434b", "patch": "@@ -1663,10 +1663,11 @@ impl SourceFile {\n \n         if let Some(ref src) = self.src {\n             Some(Cow::from(get_until_newline(src, begin)))\n-        } else if let Some(src) = self.external_src.borrow().get_source() {\n-            Some(Cow::Owned(String::from(get_until_newline(src, begin))))\n         } else {\n-            None\n+            self.external_src\n+                .borrow()\n+                .get_source()\n+                .map(|src| Cow::Owned(String::from(get_until_newline(src, begin))))\n         }\n     }\n "}, {"sha": "29a7e74a81660bd060888185732bea6a85cd0bee", "filename": "compiler/rustc_span/src/source_map.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/543f8bc38c78c05319b5774ec2337c6d3c9b434b/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/543f8bc38c78c05319b5774ec2337c6d3c9b434b/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs?ref=543f8bc38c78c05319b5774ec2337c6d3c9b434b", "patch": "@@ -906,10 +906,8 @@ impl SourceMap {\n \n             let snippet = if let Some(ref src) = local_begin.sf.src {\n                 Some(&src[start_index..])\n-            } else if let Some(src) = src.get_source() {\n-                Some(&src[start_index..])\n             } else {\n-                None\n+                src.get_source().map(|src| &src[start_index..])\n             };\n \n             match snippet {"}, {"sha": "7792ceabe7e40ae00246067efb1db961883a4f73", "filename": "compiler/rustc_trait_selection/src/traits/util.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/543f8bc38c78c05319b5774ec2337c6d3c9b434b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/543f8bc38c78c05319b5774ec2337c6d3c9b434b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs?ref=543f8bc38c78c05319b5774ec2337c6d3c9b434b", "patch": "@@ -243,16 +243,11 @@ pub fn get_vtable_index_of_object_method<'tcx, N>(\n ) -> Option<usize> {\n     // Count number of methods preceding the one we are selecting and\n     // add them to the total offset.\n-    if let Some(index) = tcx\n-        .own_existential_vtable_entries(object.upcast_trait_ref.def_id())\n+    tcx.own_existential_vtable_entries(object.upcast_trait_ref.def_id())\n         .iter()\n         .copied()\n         .position(|def_id| def_id == method_def_id)\n-    {\n-        Some(object.vtable_base + index)\n-    } else {\n-        None\n-    }\n+        .map(|index| object.vtable_base + index)\n }\n \n pub fn closure_trait_ref_and_return_type<'tcx>("}, {"sha": "47cd7af221d26d06d43c335395e246e37daf401b", "filename": "compiler/rustc_ty_utils/src/instance.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/543f8bc38c78c05319b5774ec2337c6d3c9b434b/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/543f8bc38c78c05319b5774ec2337c6d3c9b434b/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs?ref=543f8bc38c78c05319b5774ec2337c6d3c9b434b", "patch": "@@ -234,15 +234,12 @@ fn resolve_associated_item<'tcx>(\n             _ => None,\n         },\n         traits::ImplSource::Object(ref data) => {\n-            if let Some(index) = traits::get_vtable_index_of_object_method(tcx, data, trait_item_id)\n-            {\n-                Some(Instance {\n+            traits::get_vtable_index_of_object_method(tcx, data, trait_item_id).map(|index| {\n+                Instance {\n                     def: ty::InstanceDef::Virtual(trait_item_id, index),\n                     substs: rcvr_substs,\n-                })\n-            } else {\n-                None\n-            }\n+                }\n+            })\n         }\n         traits::ImplSource::Builtin(..) => {\n             let lang_items = tcx.lang_items();"}, {"sha": "9cb0fc105943ca1552e08a9e67b60072cc7176fa", "filename": "compiler/rustc_ty_utils/src/structural_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/543f8bc38c78c05319b5774ec2337c6d3c9b434b/compiler%2Frustc_ty_utils%2Fsrc%2Fstructural_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/543f8bc38c78c05319b5774ec2337c6d3c9b434b/compiler%2Frustc_ty_utils%2Fsrc%2Fstructural_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fstructural_match.rs?ref=543f8bc38c78c05319b5774ec2337c6d3c9b434b", "patch": "@@ -13,7 +13,7 @@ use rustc_trait_selection::traits::{ObligationCause, ObligationCtxt};\n /// Note that this does *not* recursively check if the substructure of `adt_ty`\n /// implements the traits.\n fn has_structural_eq_impls<'tcx>(tcx: TyCtxt<'tcx>, adt_ty: Ty<'tcx>) -> bool {\n-    let ref infcx = tcx.infer_ctxt().build();\n+    let infcx = &tcx.infer_ctxt().build();\n     let cause = ObligationCause::dummy();\n \n     let ocx = ObligationCtxt::new(infcx);"}, {"sha": "841abfab666bf51002d36f42f4e3d22adc072104", "filename": "src/librustdoc/formats/cache.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/543f8bc38c78c05319b5774ec2337c6d3c9b434b/src%2Flibrustdoc%2Fformats%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/543f8bc38c78c05319b5774ec2337c6d3c9b434b/src%2Flibrustdoc%2Fformats%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fcache.rs?ref=543f8bc38c78c05319b5774ec2337c6d3c9b434b", "patch": "@@ -300,14 +300,13 @@ impl<'a, 'tcx> DocFolder for CacheBuilder<'a, 'tcx> {\n                             ParentStackItem::Impl { for_, .. } => for_.def_id(&self.cache),\n                             ParentStackItem::Type(item_id) => item_id.as_def_id(),\n                         };\n-                        let path = match did.and_then(|did| self.cache.paths.get(&did)) {\n+                        let path = did\n+                            .and_then(|did| self.cache.paths.get(&did))\n                             // The current stack not necessarily has correlation\n                             // for where the type was defined. On the other\n                             // hand, `paths` always has the right\n                             // information if present.\n-                            Some((fqp, _)) => Some(&fqp[..fqp.len() - 1]),\n-                            None => None,\n-                        };\n+                            .map(|(fqp, _)| &fqp[..fqp.len() - 1]);\n                         ((did, path), true)\n                     }\n                 }"}]}