{"sha": "b33abd3876a7b7780ca3c03b64c40b5370ab704b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzM2FiZDM4NzZhN2I3NzgwY2EzYzAzYjY0YzQwYjUzNzBhYjcwNGI=", "commit": {"author": {"name": "Martin Carton", "email": "cartonmartin+github@gmail.com", "date": "2016-06-02T00:14:51Z"}, "committer": {"name": "Martin Carton", "email": "cartonmartin+github@gmail.com", "date": "2016-06-02T00:14:51Z"}, "message": "Merge pull request #972 from Manishearth/fix-953\n\nonly lint `new_without_default` for public items", "tree": {"sha": "914ecea551cf8765eed5cd90862fd6ac4c531b6b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/914ecea551cf8765eed5cd90862fd6ac4c531b6b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b33abd3876a7b7780ca3c03b64c40b5370ab704b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b33abd3876a7b7780ca3c03b64c40b5370ab704b", "html_url": "https://github.com/rust-lang/rust/commit/b33abd3876a7b7780ca3c03b64c40b5370ab704b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b33abd3876a7b7780ca3c03b64c40b5370ab704b/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "efeba8eec30c5f051b66580da4827bd50d357b4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/efeba8eec30c5f051b66580da4827bd50d357b4d", "html_url": "https://github.com/rust-lang/rust/commit/efeba8eec30c5f051b66580da4827bd50d357b4d"}, {"sha": "49982036fc9aeb02da254889ac7785909fdb805a", "url": "https://api.github.com/repos/rust-lang/rust/commits/49982036fc9aeb02da254889ac7785909fdb805a", "html_url": "https://github.com/rust-lang/rust/commit/49982036fc9aeb02da254889ac7785909fdb805a"}], "stats": {"total": 37, "additions": 22, "deletions": 15}, "files": [{"sha": "15bb782452e8de00ac84b82d2b849c89124ff8ad", "filename": "clippy_lints/src/new_without_default.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b33abd3876a7b7780ca3c03b64c40b5370ab704b/clippy_lints%2Fsrc%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b33abd3876a7b7780ca3c03b64c40b5370ab704b/clippy_lints%2Fsrc%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnew_without_default.rs?ref=b33abd3876a7b7780ca3c03b64c40b5370ab704b", "patch": "@@ -96,7 +96,8 @@ impl LateLintPass for NewWithoutDefault {\n         }\n \n         if let FnKind::Method(name, _, _, _) = kind {\n-            if decl.inputs.is_empty() && name.as_str() == \"new\" {\n+            if decl.inputs.is_empty() && name.as_str() == \"new\" &&\n+                    cx.access_levels.is_reachable(id) {\n                 let self_ty = cx.tcx.lookup_item_type(cx.tcx.map.local_def_id(\n                     cx.tcx.map.get_parent(id))).ty;\n                 if_let_chain!{["}, {"sha": "042fab840c150e2bc6a10a1609c0a603de4d541a", "filename": "tests/compile-fail/new_without_default.rs", "status": "modified", "additions": 20, "deletions": 14, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/b33abd3876a7b7780ca3c03b64c40b5370ab704b/tests%2Fcompile-fail%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b33abd3876a7b7780ca3c03b64c40b5370ab704b/tests%2Fcompile-fail%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fnew_without_default.rs?ref=b33abd3876a7b7780ca3c03b64c40b5370ab704b", "patch": "@@ -4,35 +4,35 @@\n #![allow(dead_code)]\n #![deny(new_without_default, new_without_default_derive)]\n \n-struct Foo;\n+pub struct Foo;\n \n impl Foo {\n-    fn new() -> Foo { Foo } //~ERROR: you should consider deriving a `Default` implementation for `Foo`\n+    pub fn new() -> Foo { Foo } //~ERROR: you should consider deriving a `Default` implementation for `Foo`\n }\n \n-struct Bar;\n+pub struct Bar;\n \n impl Bar {\n-    fn new() -> Self { Bar } //~ERROR: you should consider deriving a `Default` implementation for `Bar`\n+    pub fn new() -> Self { Bar } //~ERROR: you should consider deriving a `Default` implementation for `Bar`\n }\n \n-struct Ok;\n+pub struct Ok;\n \n impl Ok {\n-    fn new() -> Self { Ok }\n+    pub fn new() -> Self { Ok }\n }\n \n impl Default for Ok {\n     fn default() -> Self { Ok }\n }\n \n-struct Params;\n+pub struct Params;\n \n impl Params {\n-    fn new(_: u32) -> Self { Params }\n+    pub fn new(_: u32) -> Self { Params }\n }\n \n-struct GenericsOk<T> {\n+pub struct GenericsOk<T> {\n     bar: T,\n }\n \n@@ -41,10 +41,10 @@ impl<U> Default for GenericsOk<U> {\n }\n \n impl<'c, V> GenericsOk<V> {\n-    fn new() -> GenericsOk<V> { unimplemented!() }\n+    pub fn new() -> GenericsOk<V> { unimplemented!() }\n }\n \n-struct LtOk<'a> {\n+pub struct LtOk<'a> {\n     foo: &'a bool,\n }\n \n@@ -53,15 +53,21 @@ impl<'b> Default for LtOk<'b> {\n }\n \n impl<'c> LtOk<'c> {\n-    fn new() -> LtOk<'c> { unimplemented!() }\n+    pub fn new() -> LtOk<'c> { unimplemented!() }\n }\n \n-struct LtKo<'a> {\n+pub struct LtKo<'a> {\n     foo: &'a bool,\n }\n \n impl<'c> LtKo<'c> {\n-    fn new() -> LtKo<'c> { unimplemented!() } //~ERROR: you should consider adding a `Default` implementation for\n+    pub fn new() -> LtKo<'c> { unimplemented!() } //~ERROR: you should consider adding a `Default` implementation for\n+}\n+\n+struct Private;\n+\n+impl Private {\n+    fn new() -> Private { unimplemented!() } // We don't lint private items\n }\n \n fn main() {}"}]}