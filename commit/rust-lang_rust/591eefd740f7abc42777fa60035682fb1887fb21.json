{"sha": "591eefd740f7abc42777fa60035682fb1887fb21", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5MWVlZmQ3NDBmN2FiYzQyNzc3ZmE2MDAzNTY4MmZiMTg4N2ZiMjE=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-01-23T21:47:27Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-01-23T21:47:27Z"}, "message": "improve hashmap/treemap documentation", "tree": {"sha": "653a5165d4e317b0e11c29033a2fd7ca16619ff1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/653a5165d4e317b0e11c29033a2fd7ca16619ff1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/591eefd740f7abc42777fa60035682fb1887fb21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/591eefd740f7abc42777fa60035682fb1887fb21", "html_url": "https://github.com/rust-lang/rust/commit/591eefd740f7abc42777fa60035682fb1887fb21", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/591eefd740f7abc42777fa60035682fb1887fb21/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "988ce7180d998b969c08286b083b73bd5be623bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/988ce7180d998b969c08286b083b73bd5be623bc", "html_url": "https://github.com/rust-lang/rust/commit/988ce7180d998b969c08286b083b73bd5be623bc"}], "stats": {"total": 23, "additions": 20, "deletions": 3}, "files": [{"sha": "f1312266718daf6ac28fe6ad207e3a3182213357", "filename": "src/libcore/hashmap.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/591eefd740f7abc42777fa60035682fb1887fb21/src%2Flibcore%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/591eefd740f7abc42777fa60035682fb1887fb21/src%2Flibcore%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhashmap.rs?ref=591eefd740f7abc42777fa60035682fb1887fb21", "patch": "@@ -253,11 +253,15 @@ pub mod linear {\n     }\n \n     impl <K: Hash IterBytes Eq, V> LinearMap<K, V>: Container {\n+        /// Return the number of elements in the map\n         pure fn len(&self) -> uint { self.size }\n+\n+        /// Return true if the map contains no elements\n         pure fn is_empty(&self) -> bool { self.len() == 0 }\n     }\n \n     impl <K: Hash IterBytes Eq, V> LinearMap<K, V>: Mutable {\n+        /// Clear the map, removing all key-value pairs.\n         fn clear(&mut self) {\n             for uint::range(0, self.buckets.len()) |idx| {\n                 self.buckets[idx] = None;\n@@ -267,13 +271,15 @@ pub mod linear {\n     }\n \n     impl <K: Hash IterBytes Eq, V> LinearMap<K, V>: Map<K, V> {\n+        /// Return true if the map contains a value for the specified key\n         pure fn contains_key(&self, k: &K) -> bool {\n             match self.bucket_for_key(self.buckets, k) {\n                 FoundEntry(_) => {true}\n                 TableFull | FoundHole(_) => {false}\n             }\n         }\n \n+        /// Visit all key-value pairs\n         pure fn each(&self, blk: fn(k: &K, v: &V) -> bool) {\n             for vec::each(self.buckets) |slot| {\n                 let mut broke = false;\n@@ -286,14 +292,17 @@ pub mod linear {\n             }\n         }\n \n+        /// Visit all keys\n         pure fn each_key(&self, blk: fn(k: &K) -> bool) {\n             self.each(|k, _v| blk(k))\n         }\n \n+        /// Visit all values\n         pure fn each_value(&self, blk: fn(v: &V) -> bool) {\n             self.each(|_k, v| blk(v))\n         }\n \n+        /// Return the value corresponding to the key in the map\n         pure fn find(&self, k: &K) -> Option<&self/V> {\n             match self.bucket_for_key(self.buckets, k) {\n                 FoundEntry(idx) => {\n@@ -314,6 +323,9 @@ pub mod linear {\n             }\n         }\n \n+        /// Insert a key-value pair into the map. An existing value for a\n+        /// key is replaced by the new value. Return true if the key did\n+        /// not already exist in the map.\n         fn insert(&mut self, k: K, v: V) -> bool {\n             if self.size >= self.resize_at {\n                 // n.b.: We could also do this after searching, so\n@@ -329,6 +341,8 @@ pub mod linear {\n             self.insert_internal(hash, move k, move v)\n         }\n \n+        /// Remove a key-value pair from the map. Return true if the key\n+        /// was present in the map, otherwise false.\n         fn remove(&mut self, k: &K) -> bool {\n             match self.pop(k) {\n                 Some(_) => true,\n@@ -448,11 +462,15 @@ pub mod linear {\n     }\n \n     impl <T: Hash IterBytes Eq> LinearSet<T>: Container {\n+        /// Return the number of elements in the set\n         pure fn len(&self) -> uint { self.map.len() }\n+\n+        /// Return true if the set contains no elements\n         pure fn is_empty(&self) -> bool { self.map.is_empty() }\n     }\n \n     impl <T: Hash IterBytes Eq> LinearSet<T>: Mutable {\n+        /// Clear the set, removing all values.\n         fn clear(&mut self) { self.map.clear() }\n     }\n "}, {"sha": "fd2dab0dadcdc0582b8611d0d3551e3bf59bbd9f", "filename": "src/libstd/treemap.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/591eefd740f7abc42777fa60035682fb1887fb21/src%2Flibstd%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/591eefd740f7abc42777fa60035682fb1887fb21/src%2Flibstd%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftreemap.rs?ref=591eefd740f7abc42777fa60035682fb1887fb21", "patch": "@@ -140,7 +140,6 @@ impl <K: Ord, V> TreeMap<K, V> {\n     /// Create an empty TreeMap\n     static pure fn new() -> TreeMap<K, V> { TreeMap{root: None, length: 0} }\n \n-\n     /// Visit all key-value pairs in reverse order\n     pure fn each_reverse(&self, f: fn(&K, &V) -> bool) {\n         each_reverse(&self.root, f);\n@@ -207,10 +206,10 @@ impl <T: Eq Ord> TreeSet<T>: Eq {\n }\n \n impl <T: Ord> TreeSet<T>: Container {\n-    /// Return the number of elements in the map\n+    /// Return the number of elements in the set\n     pure fn len(&self) -> uint { self.map.len() }\n \n-    /// Return true if the map contains no elements\n+    /// Return true if the set contains no elements\n     pure fn is_empty(&self) -> bool { self.map.is_empty() }\n }\n "}]}