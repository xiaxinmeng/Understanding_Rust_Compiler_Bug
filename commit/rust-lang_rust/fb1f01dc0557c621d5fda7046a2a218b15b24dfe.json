{"sha": "fb1f01dc0557c621d5fda7046a2a218b15b24dfe", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiMWYwMWRjMDU1N2M2MjFkNWZkYTcwNDZhMmEyMThiMTViMjRkZmU=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-01-17T17:57:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-01-17T17:57:29Z"}, "message": "Rollup merge of #47498 - dominikWin:missing-module-name, r=petrochenkov\n\nMake non-found module name optional\n\nNo longer uses a magic string for missing or root module.", "tree": {"sha": "167d45631d79ea5b7353dc3d255022ffc1d34a40", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/167d45631d79ea5b7353dc3d255022ffc1d34a40"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb1f01dc0557c621d5fda7046a2a218b15b24dfe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb1f01dc0557c621d5fda7046a2a218b15b24dfe", "html_url": "https://github.com/rust-lang/rust/commit/fb1f01dc0557c621d5fda7046a2a218b15b24dfe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb1f01dc0557c621d5fda7046a2a218b15b24dfe/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a588dcff2819bb96eda68c1c59ac8dd0912cfa59", "url": "https://api.github.com/repos/rust-lang/rust/commits/a588dcff2819bb96eda68c1c59ac8dd0912cfa59", "html_url": "https://github.com/rust-lang/rust/commit/a588dcff2819bb96eda68c1c59ac8dd0912cfa59"}, {"sha": "1dcfd144b95dedce607c764dec6c5931f5be0ceb", "url": "https://api.github.com/repos/rust-lang/rust/commits/1dcfd144b95dedce607c764dec6c5931f5be0ceb", "html_url": "https://github.com/rust-lang/rust/commit/1dcfd144b95dedce607c764dec6c5931f5be0ceb"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "5b9b3767cb62fb34907b8a373b3b1c5090b6125b", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fb1f01dc0557c621d5fda7046a2a218b15b24dfe/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb1f01dc0557c621d5fda7046a2a218b15b24dfe/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=fb1f01dc0557c621d5fda7046a2a218b15b24dfe", "patch": "@@ -4062,7 +4062,7 @@ fn show_candidates(err: &mut DiagnosticBuilder,\n }\n \n /// A somewhat inefficient routine to obtain the name of a module.\n-fn module_to_string(module: Module) -> String {\n+fn module_to_string(module: Module) -> Option<String> {\n     let mut names = Vec::new();\n \n     fn collect_mod(names: &mut Vec<Ident>, module: Module) {\n@@ -4080,12 +4080,12 @@ fn module_to_string(module: Module) -> String {\n     collect_mod(&mut names, module);\n \n     if names.is_empty() {\n-        return \"???\".to_string();\n+        return None;\n     }\n-    names_to_string(&names.into_iter()\n+    Some(names_to_string(&names.into_iter()\n                         .rev()\n                         .map(|n| dummy_spanned(n))\n-                        .collect::<Vec<_>>())\n+                        .collect::<Vec<_>>()))\n }\n \n fn err_path_resolution() -> PathResolution {"}, {"sha": "07b08e2e61ac0155bb1f6a0a2651b70069795da5", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fb1f01dc0557c621d5fda7046a2a218b15b24dfe/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb1f01dc0557c621d5fda7046a2a218b15b24dfe/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=fb1f01dc0557c621d5fda7046a2a218b15b24dfe", "patch": "@@ -524,7 +524,7 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n     fn resolve_import(&mut self, directive: &'b ImportDirective<'b>) -> bool {\n         debug!(\"(resolving import for module) resolving import `{}::...` in `{}`\",\n                names_to_string(&directive.module_path[..]),\n-               module_to_string(self.current_module));\n+               module_to_string(self.current_module).unwrap_or(\"???\".to_string()));\n \n         self.current_module = directive.parent;\n \n@@ -773,10 +773,10 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n                         None => \"\".to_owned(),\n                     };\n                 let module_str = module_to_string(module);\n-                let msg = if &module_str == \"???\" {\n-                    format!(\"no `{}` in the root{}\", ident, lev_suggestion)\n-                } else {\n+                let msg = if let Some(module_str) = module_str {\n                     format!(\"no `{}` in `{}`{}\", ident, module_str, lev_suggestion)\n+                } else {\n+                    format!(\"no `{}` in the root{}\", ident, lev_suggestion)\n                 };\n                 Some((span, msg))\n             } else {"}]}