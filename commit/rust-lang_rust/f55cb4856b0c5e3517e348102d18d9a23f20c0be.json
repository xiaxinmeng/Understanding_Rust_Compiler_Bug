{"sha": "f55cb4856b0c5e3517e348102d18d9a23f20c0be", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1NWNiNDg1NmIwYzVlMzUxN2UzNDgxMDJkMThkOWEyM2YyMGMwYmU=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2017-10-15T06:21:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-10-15T06:21:57Z"}, "message": "Rollup merge of #45269 - sfackler:connect-timeout-fix, r=alexcrichton\n\nFix TcpStream::connect_timeout on linux\n\nLinux appears to set POLLOUT when a conection's refused, which is pretty\nweird. Invert the check to look for an error explicitly. Also add an\nexplict test for this case.\n\nCloses #45265.\n\nr? @alexcrichton", "tree": {"sha": "726d98b6b37b7c176f621be6995a4ae127acd8f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/726d98b6b37b7c176f621be6995a4ae127acd8f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f55cb4856b0c5e3517e348102d18d9a23f20c0be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f55cb4856b0c5e3517e348102d18d9a23f20c0be", "html_url": "https://github.com/rust-lang/rust/commit/f55cb4856b0c5e3517e348102d18d9a23f20c0be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f55cb4856b0c5e3517e348102d18d9a23f20c0be/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a793372d8ce0eb11abd211d335619889b9bbc6ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/a793372d8ce0eb11abd211d335619889b9bbc6ac", "html_url": "https://github.com/rust-lang/rust/commit/a793372d8ce0eb11abd211d335619889b9bbc6ac"}, {"sha": "cab99a3f8c8dcdfd9052fd54787d22611ab36edc", "url": "https://api.github.com/repos/rust-lang/rust/commits/cab99a3f8c8dcdfd9052fd54787d22611ab36edc", "html_url": "https://github.com/rust-lang/rust/commit/cab99a3f8c8dcdfd9052fd54787d22611ab36edc"}], "stats": {"total": 28, "additions": 24, "deletions": 4}, "files": [{"sha": "4656cc5a7a78137aec9eb51c5c5eeab96083b4d2", "filename": "src/libstd/net/tcp.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f55cb4856b0c5e3517e348102d18d9a23f20c0be/src%2Flibstd%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f55cb4856b0c5e3517e348102d18d9a23f20c0be/src%2Flibstd%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Ftcp.rs?ref=f55cb4856b0c5e3517e348102d18d9a23f20c0be", "patch": "@@ -1579,6 +1579,21 @@ mod tests {\n                 \"bad error: {} {:?}\", e, e.kind());\n     }\n \n+    #[test]\n+    fn connect_timeout_unbound() {\n+        // bind and drop a socket to track down a \"probably unassigned\" port\n+        let socket = TcpListener::bind(\"127.0.0.1:0\").unwrap();\n+        let addr = socket.local_addr().unwrap();\n+        drop(socket);\n+\n+        let timeout = Duration::from_secs(1);\n+        let e = TcpStream::connect_timeout(&addr, timeout).unwrap_err();\n+        assert!(e.kind() == io::ErrorKind::ConnectionRefused ||\n+                e.kind() == io::ErrorKind::TimedOut ||\n+                e.kind() == io::ErrorKind::Other,\n+                \"bad error: {} {:?}\", e, e.kind());\n+    }\n+\n     #[test]\n     fn connect_timeout_valid() {\n         let listener = TcpListener::bind(\"127.0.0.1:0\").unwrap();"}, {"sha": "e775f857f2b40a84b8df717f9ed6d30649a02b3c", "filename": "src/libstd/sys/unix/net.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f55cb4856b0c5e3517e348102d18d9a23f20c0be/src%2Flibstd%2Fsys%2Funix%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f55cb4856b0c5e3517e348102d18d9a23f20c0be/src%2Flibstd%2Fsys%2Funix%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fnet.rs?ref=f55cb4856b0c5e3517e348102d18d9a23f20c0be", "patch": "@@ -176,11 +176,16 @@ impl Socket {\n                 }\n                 0 => {}\n                 _ => {\n-                    if pollfd.revents & libc::POLLOUT == 0 {\n-                        if let Some(e) = self.take_error()? {\n-                            return Err(e);\n-                        }\n+                    // linux returns POLLOUT|POLLERR|POLLHUP for refused connections (!), so look\n+                    // for POLLHUP rather than read readiness\n+                    if pollfd.revents & libc::POLLHUP != 0 {\n+                        let e = self.take_error()?\n+                            .unwrap_or_else(|| {\n+                                io::Error::new(io::ErrorKind::Other, \"no error set after POLLHUP\")\n+                            });\n+                        return Err(e);\n                     }\n+\n                     return Ok(());\n                 }\n             }"}]}