{"sha": "86dde9bbda92c02c61282b5df5d38338a798ef3b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2ZGRlOWJiZGE5MmMwMmM2MTI4MmI1ZGY1ZDM4MzM4YTc5OGVmM2I=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-08-29T04:57:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-08-29T04:57:51Z"}, "message": "Auto merge of #36062 - japaric:smarter-submodules, r=alexcrichton\n\nrustbuild: smarter `git submodule`-ing\n\nWith this commit, if one bootstraps rust against system llvm then the\nsrc/llvm submodule is not updated/checked-out. This saves considerable\nnetwork bandwith when starting from a fresh clone of rust-lang/rust as\nthe llvm submodule is never cloned.\n\ncc #30107\n\nr? @alexcrichton\ncc @petevine\n\n~~We could also avoid updating the jemalloc submodule if --disable-jemalloc is used. It just hasn't been implemented.~~ Done\n\nThis probably doesn't handle \"recursive\" submodules correctly but I think we don't have any of those right now.\n\nI'm still testing a bootstrap but already confirmed that the llvm submodule doesn't get updated when `--llvm-root` is passed to `configure`.", "tree": {"sha": "1e357978880abddcaa112a680fb692a6c20e91e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e357978880abddcaa112a680fb692a6c20e91e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/86dde9bbda92c02c61282b5df5d38338a798ef3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/86dde9bbda92c02c61282b5df5d38338a798ef3b", "html_url": "https://github.com/rust-lang/rust/commit/86dde9bbda92c02c61282b5df5d38338a798ef3b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/86dde9bbda92c02c61282b5df5d38338a798ef3b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "acd3f796d26e9295db1eba1ef16e0d4cc3b96dd5", "url": "https://api.github.com/repos/rust-lang/rust/commits/acd3f796d26e9295db1eba1ef16e0d4cc3b96dd5", "html_url": "https://github.com/rust-lang/rust/commit/acd3f796d26e9295db1eba1ef16e0d4cc3b96dd5"}, {"sha": "4b5007a1a25c09746307c9e8cabdc6292f969582", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b5007a1a25c09746307c9e8cabdc6292f969582", "html_url": "https://github.com/rust-lang/rust/commit/4b5007a1a25c09746307c9e8cabdc6292f969582"}], "stats": {"total": 90, "additions": 79, "deletions": 11}, "files": [{"sha": "a487c95fec20041a98ffabc37f3869c3dc51324c", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 79, "deletions": 11, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/86dde9bbda92c02c61282b5df5d38338a798ef3b/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86dde9bbda92c02c61282b5df5d38338a798ef3b/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=86dde9bbda92c02c61282b5df5d38338a798ef3b", "patch": "@@ -32,7 +32,7 @@ use std::cell::RefCell;\n use std::collections::HashMap;\n use std::env;\n use std::fs::{self, File};\n-use std::path::{PathBuf, Path};\n+use std::path::{Component, PathBuf, Path};\n use std::process::Command;\n \n use build_helper::{run_silent, output};\n@@ -477,12 +477,32 @@ impl Build {\n     /// This will detect if any submodules are out of date an run the necessary\n     /// commands to sync them all with upstream.\n     fn update_submodules(&self) {\n+        struct Submodule<'a> {\n+            path: &'a Path,\n+            state: State,\n+        }\n+\n+        enum State {\n+            // The submodule may have staged/unstaged changes\n+            MaybeDirty,\n+            // Or could be initialized but never updated\n+            NotInitialized,\n+            // The submodule, itself, has extra commits but those changes haven't been commited to\n+            // the (outer) git repository\n+            OutOfSync,\n+        }\n+\n         if !self.config.submodules {\n             return\n         }\n         if fs::metadata(self.src.join(\".git\")).is_err() {\n             return\n         }\n+        let git = || {\n+            let mut cmd = Command::new(\"git\");\n+            cmd.current_dir(&self.src);\n+            return cmd\n+        };\n         let git_submodule = || {\n             let mut cmd = Command::new(\"git\");\n             cmd.current_dir(&self.src).arg(\"submodule\");\n@@ -494,19 +514,67 @@ impl Build {\n         //        of detecting whether we need to run all the submodule commands\n         //        below.\n         let out = output(git_submodule().arg(\"status\"));\n-        if !out.lines().any(|l| l.starts_with(\"+\") || l.starts_with(\"-\")) {\n-            return\n+        let mut submodules = vec![];\n+        for line in out.lines() {\n+            // NOTE `git submodule status` output looks like this:\n+            //\n+            // -5066b7dcab7e700844b0e2ba71b8af9dc627a59b src/liblibc\n+            // +b37ef24aa82d2be3a3cc0fe89bf82292f4ca181c src/compiler-rt (remotes/origin/..)\n+            //  e058ca661692a8d01f8cf9d35939dfe3105ce968 src/jemalloc (3.6.0-533-ge058ca6)\n+            //\n+            // The first character can be '-', '+' or ' ' and denotes the `State` of the submodule\n+            // Right next to this character is the SHA-1 of the submodule HEAD\n+            // And after that comes the path to the submodule\n+            let path = Path::new(line[1..].split(' ').skip(1).next().unwrap());\n+            let state = if line.starts_with('-') {\n+                State::NotInitialized\n+            } else if line.starts_with('*') {\n+                State::OutOfSync\n+            } else if line.starts_with(' ') {\n+                State::MaybeDirty\n+            } else {\n+                panic!(\"unexpected git submodule state: {:?}\", line.chars().next());\n+            };\n+\n+            submodules.push(Submodule { path: path, state: state })\n         }\n \n         self.run(git_submodule().arg(\"sync\"));\n-        self.run(git_submodule().arg(\"init\"));\n-        self.run(git_submodule().arg(\"update\"));\n-        self.run(git_submodule().arg(\"update\").arg(\"--recursive\"));\n-        self.run(git_submodule().arg(\"status\").arg(\"--recursive\"));\n-        self.run(git_submodule().arg(\"foreach\").arg(\"--recursive\")\n-                                .arg(\"git\").arg(\"clean\").arg(\"-fdx\"));\n-        self.run(git_submodule().arg(\"foreach\").arg(\"--recursive\")\n-                                .arg(\"git\").arg(\"checkout\").arg(\".\"));\n+\n+        for submodule in submodules {\n+            // If using llvm-root then don't touch the llvm submodule.\n+            if submodule.path.components().any(|c| c == Component::Normal(\"llvm\".as_ref())) &&\n+                self.config.target_config.get(&self.config.build)\n+                    .and_then(|c| c.llvm_config.as_ref()).is_some()\n+            {\n+                continue\n+            }\n+\n+            if submodule.path.components().any(|c| c == Component::Normal(\"jemalloc\".as_ref())) &&\n+                !self.config.use_jemalloc\n+            {\n+                continue\n+            }\n+\n+            match submodule.state {\n+                State::MaybeDirty => {\n+                    // drop staged changes\n+                    self.run(git().arg(\"-C\").arg(submodule.path).args(&[\"reset\", \"--hard\"]));\n+                    // drops unstaged changes\n+                    self.run(git().arg(\"-C\").arg(submodule.path).args(&[\"clean\", \"-fdx\"]));\n+                },\n+                State::NotInitialized => {\n+                    self.run(git_submodule().arg(\"init\").arg(submodule.path));\n+                    self.run(git_submodule().arg(\"update\").arg(submodule.path));\n+                },\n+                State::OutOfSync => {\n+                    // drops submodule commits that weren't reported to the (outer) git repository\n+                    self.run(git_submodule().arg(\"update\").arg(submodule.path));\n+                    self.run(git().arg(\"-C\").arg(submodule.path).args(&[\"reset\", \"--hard\"]));\n+                    self.run(git().arg(\"-C\").arg(submodule.path).args(&[\"clean\", \"-fdx\"]));\n+                },\n+            }\n+        }\n     }\n \n     /// Clear out `dir` if `input` is newer."}]}