{"sha": "7ad125c4eb3d620c12a868dbe77180f1a133021b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhZDEyNWM0ZWIzZDYyMGMxMmE4NjhkYmU3NzE4MGYxYTEzMzAyMWI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-07-11T18:29:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-07-11T18:29:52Z"}, "message": "Auto merge of #34686 - alexcrichton:new-stage, r=luqmana\n\nrustc: Update stage0 to beta-2016-07-06\n\nHot off the presses, let's update our stage0 compiler!", "tree": {"sha": "6c67edc7c4e78f93c9def03469801ab19d1bc227", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c67edc7c4e78f93c9def03469801ab19d1bc227"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ad125c4eb3d620c12a868dbe77180f1a133021b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ad125c4eb3d620c12a868dbe77180f1a133021b", "html_url": "https://github.com/rust-lang/rust/commit/7ad125c4eb3d620c12a868dbe77180f1a133021b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ad125c4eb3d620c12a868dbe77180f1a133021b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ab8054ac182fc170099135304a0c1c6760da57a", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ab8054ac182fc170099135304a0c1c6760da57a", "html_url": "https://github.com/rust-lang/rust/commit/3ab8054ac182fc170099135304a0c1c6760da57a"}, {"sha": "0c137ab0a64b27e9bc0dc68d35ba6f5f60536a97", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c137ab0a64b27e9bc0dc68d35ba6f5f60536a97", "html_url": "https://github.com/rust-lang/rust/commit/0c137ab0a64b27e9bc0dc68d35ba6f5f60536a97"}], "stats": {"total": 53, "additions": 11, "deletions": 42}, "files": [{"sha": "1bdcc5bfe119dcce59a62e6fa9d4fe396d57d761", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7ad125c4eb3d620c12a868dbe77180f1a133021b/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ad125c4eb3d620c12a868dbe77180f1a133021b/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=7ad125c4eb3d620c12a868dbe77180f1a133021b", "patch": "@@ -175,7 +175,6 @@ extern \"rust-intrinsic\" {\n     /// that `rustc_peek(potentially_uninitialized)` would actually\n     /// double-check that dataflow did indeed compute that it is\n     /// uninitialized at that point in the control flow.\n-    #[cfg(not(stage0))]\n     pub fn rustc_peek<T>(_: T) -> T;\n \n     /// Aborts the execution of the process."}, {"sha": "27ed88e929e76dba833a9702e52d896b03072391", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ad125c4eb3d620c12a868dbe77180f1a133021b/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ad125c4eb3d620c12a868dbe77180f1a133021b/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=7ad125c4eb3d620c12a868dbe77180f1a133021b", "patch": "@@ -17,8 +17,6 @@ use session::Session;\n use traits;\n use ty::{self, Ty, TyCtxt, TypeFoldable};\n \n-use util::common::slice_pat;\n-\n use syntax::ast::{FloatTy, IntTy, UintTy};\n use syntax::attr;\n use syntax_pos::DUMMY_SP;\n@@ -100,7 +98,7 @@ impl TargetDataLayout {\n \n         let mut dl = TargetDataLayout::default();\n         for spec in sess.target.target.data_layout.split(\"-\") {\n-            match slice_pat(&&spec.split(\":\").collect::<Vec<_>>()[..]) {\n+            match &spec.split(\":\").collect::<Vec<_>>()[..] {\n                 &[\"e\"] => dl.endian = Endian::Little,\n                 &[\"E\"] => dl.endian = Endian::Big,\n                 &[\"a\", ref a..] => dl.aggregate_align = align(a, \"a\"),"}, {"sha": "bdfb97549d5d512647ce80179eb8d38579cd1378", "filename": "src/librustc/util/common.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7ad125c4eb3d620c12a868dbe77180f1a133021b/src%2Flibrustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ad125c4eb3d620c12a868dbe77180f1a133021b/src%2Flibrustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fcommon.rs?ref=7ad125c4eb3d620c12a868dbe77180f1a133021b", "patch": "@@ -247,15 +247,3 @@ pub fn path2cstr(p: &Path) -> CString {\n pub fn path2cstr(p: &Path) -> CString {\n     CString::new(p.to_str().unwrap()).unwrap()\n }\n-\n-// FIXME(stage0): remove this\n-// HACK: this is needed because the interpretation of slice\n-// patterns changed between stage0 and now.\n-#[cfg(stage0)]\n-pub fn slice_pat<'a, 'b, T>(t: &'a &'b [T]) -> &'a &'b [T] {\n-    t\n-}\n-#[cfg(not(stage0))]\n-pub fn slice_pat<'a, 'b, T>(t: &'a &'b [T]) -> &'b [T] {\n-    *t\n-}"}, {"sha": "0de00d9d7f631edc634f6b757ac106361f1a5062", "filename": "src/librustc_const_eval/check_match.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7ad125c4eb3d620c12a868dbe77180f1a133021b/src%2Flibrustc_const_eval%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ad125c4eb3d620c12a868dbe77180f1a133021b/src%2Flibrustc_const_eval%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fcheck_match.rs?ref=7ad125c4eb3d620c12a868dbe77180f1a133021b", "patch": "@@ -43,7 +43,6 @@ use rustc::hir::fold::{Folder, noop_fold_pat};\n use rustc::hir::print::pat_to_string;\n use syntax::ptr::P;\n use rustc::util::nodemap::FnvHashMap;\n-use rustc::util::common::slice_pat;\n \n pub const DUMMY_WILD_PAT: &'static Pat = &Pat {\n     id: DUMMY_NODE_ID,\n@@ -400,7 +399,7 @@ fn check_exhaustive<'a, 'tcx>(cx: &MatchCheckCtxt<'a, 'tcx>,\n                 hir::MatchSource::ForLoopDesugar => {\n                     // `witnesses[0]` has the form `Some(<head>)`, peel off the `Some`\n                     let witness = match witnesses[0].node {\n-                        PatKind::TupleStruct(_, ref pats, _) => match slice_pat(&&pats[..]) {\n+                        PatKind::TupleStruct(_, ref pats, _) => match &pats[..] {\n                             &[ref pat] => &**pat,\n                             _ => bug!(),\n                         },"}, {"sha": "5e3ae01591d69c62c544a0e308943f1fafe0b640", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7ad125c4eb3d620c12a868dbe77180f1a133021b/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ad125c4eb3d620c12a868dbe77180f1a133021b/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=7ad125c4eb3d620c12a868dbe77180f1a133021b", "patch": "@@ -16,7 +16,6 @@ use rustc::ty::{self, Ty, TyCtxt};\n use middle::const_val::ConstVal;\n use rustc_const_eval::eval_const_expr_partial;\n use rustc_const_eval::EvalHint::ExprTypeChecked;\n-use util::common::slice_pat;\n use util::nodemap::{FnvHashSet};\n use lint::{LateContext, LintContext, LintArray};\n use lint::{LintPass, LateLintPass};\n@@ -461,7 +460,7 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n                 // Check for a repr() attribute to specify the size of the\n                 // discriminant.\n                 let repr_hints = cx.lookup_repr_hints(def.did);\n-                match slice_pat(&&**repr_hints) {\n+                match &repr_hints[..] {\n                     &[] => {\n                         // Special-case types like `Option<extern fn()>`.\n                         if !is_repr_nullable_ptr(cx, def, substs) {"}, {"sha": "3d6925041cf5b0e2839e3e1d5fea9e137f406149", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7ad125c4eb3d620c12a868dbe77180f1a133021b/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ad125c4eb3d620c12a868dbe77180f1a133021b/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=7ad125c4eb3d620c12a868dbe77180f1a133021b", "patch": "@@ -22,7 +22,6 @@ use rustc::hir::def_id::DefId;\n use rustc::hir::print as pprust;\n use rustc::ty::{self, TyCtxt};\n use rustc::ty::subst;\n-use rustc::util::common::slice_pat;\n \n use rustc_const_eval::lookup_const_by_id;\n \n@@ -204,7 +203,7 @@ fn build_struct<'a, 'tcx>(cx: &DocContext, tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let variant = tcx.lookup_adt_def(did).struct_variant();\n \n     clean::Struct {\n-        struct_type: match slice_pat(&&*variant.fields) {\n+        struct_type: match &variant.fields[..] {\n             &[] => doctree::Unit,\n             &[_] if variant.kind == ty::VariantKind::Tuple => doctree::Newtype,\n             &[..] if variant.kind == ty::VariantKind::Tuple => doctree::Tuple,"}, {"sha": "11c1b8b09d2cc7299ba2acd1630814b6c9b14109", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7ad125c4eb3d620c12a868dbe77180f1a133021b/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ad125c4eb3d620c12a868dbe77180f1a133021b/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=7ad125c4eb3d620c12a868dbe77180f1a133021b", "patch": "@@ -20,7 +20,6 @@ use std::iter::repeat;\n \n use rustc::middle::cstore::LOCAL_CRATE;\n use rustc::hir::def_id::{CRATE_DEF_INDEX, DefId};\n-use rustc::util::common::slice_pat;\n use syntax::abi::Abi;\n use rustc::hir;\n \n@@ -471,7 +470,7 @@ impl fmt::Display for clean::Type {\n                        decl.decl)\n             }\n             clean::Tuple(ref typs) => {\n-                match slice_pat(&&**typs) {\n+                match &typs[..] {\n                     &[] => primitive_link(f, clean::PrimitiveTuple, \"()\"),\n                     &[ref one] => {\n                         primitive_link(f, clean::PrimitiveTuple, \"(\")?;"}, {"sha": "d05a5a0961483f81202dcc14223d20f109223657", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7ad125c4eb3d620c12a868dbe77180f1a133021b/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ad125c4eb3d620c12a868dbe77180f1a133021b/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=7ad125c4eb3d620c12a868dbe77180f1a133021b", "patch": "@@ -468,15 +468,3 @@ pub mod __rand {\n // the rustdoc documentation for primitive types. Using `include!`\n // because rustdoc only looks for these modules at the crate level.\n include!(\"primitive_docs.rs\");\n-\n-// FIXME(stage0): remove this after a snapshot\n-// HACK: this is needed because the interpretation of slice\n-// patterns changed between stage0 and now.\n-#[cfg(stage0)]\n-fn slice_pat<'a, 'b, T>(t: &'a &'b [T]) -> &'a &'b [T] {\n-    t\n-}\n-#[cfg(not(stage0))]\n-fn slice_pat<'a, 'b, T>(t: &'a &'b [T]) -> &'b [T] {\n-    *t\n-}"}, {"sha": "2c1a656290f946a223274910fa6672a6ceabfab0", "filename": "src/libstd/sys/common/wtf8.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ad125c4eb3d620c12a868dbe77180f1a133021b/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ad125c4eb3d620c12a868dbe77180f1a133021b/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs?ref=7ad125c4eb3d620c12a868dbe77180f1a133021b", "patch": "@@ -566,7 +566,7 @@ impl Wtf8 {\n         if len < 3 {\n             return None\n         }\n-        match ::slice_pat(&&self.bytes[(len - 3)..]) {\n+        match &self.bytes[(len - 3)..] {\n             &[0xED, b2 @ 0xA0...0xAF, b3] => Some(decode_surrogate(b2, b3)),\n             _ => None\n         }\n@@ -578,7 +578,7 @@ impl Wtf8 {\n         if len < 3 {\n             return None\n         }\n-        match ::slice_pat(&&self.bytes[..3]) {\n+        match &self.bytes[..3] {\n             &[0xED, b2 @ 0xB0...0xBF, b3] => Some(decode_surrogate(b2, b3)),\n             _ => None\n         }"}, {"sha": "38a17caa2f6524b220c86b4ab423b6490083f21d", "filename": "src/libstd/sys/windows/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ad125c4eb3d620c12a868dbe77180f1a133021b/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ad125c4eb3d620c12a868dbe77180f1a133021b/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs?ref=7ad125c4eb3d620c12a868dbe77180f1a133021b", "patch": "@@ -117,7 +117,7 @@ impl Drop for FindNextFileHandle {\n \n impl DirEntry {\n     fn new(root: &Arc<PathBuf>, wfd: &c::WIN32_FIND_DATAW) -> Option<DirEntry> {\n-        match ::slice_pat(&&wfd.cFileName[0..3]) {\n+        match &wfd.cFileName[0..3] {\n             // check for '.' and '..'\n             &[46, 0, ..] |\n             &[46, 46, 0, ..] => return None,"}, {"sha": "aaf88a67d27499e360c13d89271ec2b3521303f0", "filename": "src/stage0.txt", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7ad125c4eb3d620c12a868dbe77180f1a133021b/src%2Fstage0.txt", "raw_url": "https://github.com/rust-lang/rust/raw/7ad125c4eb3d620c12a868dbe77180f1a133021b/src%2Fstage0.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstage0.txt?ref=7ad125c4eb3d620c12a868dbe77180f1a133021b", "patch": "@@ -12,6 +12,6 @@\n # tarball for a stable release you'll likely see `1.x.0-$date` where `1.x.0` was\n # released on `$date`\n \n-rustc: beta-2016-05-24\n-rustc_key: a4922355\n-cargo: nightly-2016-05-22\n+rustc: beta-2016-07-06\n+rustc_key: 411fd48b\n+cargo: nightly-2016-07-05"}]}