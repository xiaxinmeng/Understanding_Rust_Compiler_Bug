{"sha": "3d1ca786f6355041de9205cadd0a235581dd5af3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkMWNhNzg2ZjYzNTUwNDFkZTkyMDVjYWRkMGEyMzU1ODFkZDVhZjM=", "commit": {"author": {"name": "jake", "email": "jh@discordapp.com", "date": "2021-04-19T04:51:17Z"}, "committer": {"name": "jake", "email": "jh@discordapp.com", "date": "2021-04-19T04:51:17Z"}, "message": "implement field stuff too", "tree": {"sha": "51dc683eef13179915b3d730b3104862cc16977d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/51dc683eef13179915b3d730b3104862cc16977d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d1ca786f6355041de9205cadd0a235581dd5af3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d1ca786f6355041de9205cadd0a235581dd5af3", "html_url": "https://github.com/rust-lang/rust/commit/3d1ca786f6355041de9205cadd0a235581dd5af3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d1ca786f6355041de9205cadd0a235581dd5af3/comments", "author": {"login": "jhgg", "id": 5489149, "node_id": "MDQ6VXNlcjU0ODkxNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5489149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhgg", "html_url": "https://github.com/jhgg", "followers_url": "https://api.github.com/users/jhgg/followers", "following_url": "https://api.github.com/users/jhgg/following{/other_user}", "gists_url": "https://api.github.com/users/jhgg/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhgg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhgg/subscriptions", "organizations_url": "https://api.github.com/users/jhgg/orgs", "repos_url": "https://api.github.com/users/jhgg/repos", "events_url": "https://api.github.com/users/jhgg/events{/privacy}", "received_events_url": "https://api.github.com/users/jhgg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jhgg", "id": 5489149, "node_id": "MDQ6VXNlcjU0ODkxNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5489149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhgg", "html_url": "https://github.com/jhgg", "followers_url": "https://api.github.com/users/jhgg/followers", "following_url": "https://api.github.com/users/jhgg/following{/other_user}", "gists_url": "https://api.github.com/users/jhgg/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhgg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhgg/subscriptions", "organizations_url": "https://api.github.com/users/jhgg/orgs", "repos_url": "https://api.github.com/users/jhgg/repos", "events_url": "https://api.github.com/users/jhgg/events{/privacy}", "received_events_url": "https://api.github.com/users/jhgg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a624e2ea8d6fc97df03f663581e082541fd0348f", "url": "https://api.github.com/repos/rust-lang/rust/commits/a624e2ea8d6fc97df03f663581e082541fd0348f", "html_url": "https://github.com/rust-lang/rust/commit/a624e2ea8d6fc97df03f663581e082541fd0348f"}], "stats": {"total": 128, "additions": 106, "deletions": 22}, "files": [{"sha": "4998ff7a421feff1a837985d4b76cad7d31d74ae", "filename": "crates/ide_assists/src/handlers/generate_deref.rs", "status": "modified", "additions": 106, "deletions": 22, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/3d1ca786f6355041de9205cadd0a235581dd5af3/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d1ca786f6355041de9205cadd0a235581dd5af3/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_deref.rs?ref=3d1ca786f6355041de9205cadd0a235581dd5af3", "patch": "@@ -1,11 +1,13 @@\n+use std::fmt::Display;\n+\n use ide_db::{helpers::FamousDefs, RootDatabase};\n use syntax::{\n     ast::{self, NameOwner},\n-    AstNode,\n+    AstNode, SyntaxNode,\n };\n \n use crate::{\n-    assist_context::{AssistContext, Assists},\n+    assist_context::{AssistBuilder, AssistContext, Assists},\n     utils::generate_trait_impl_text,\n     AssistId, AssistKind,\n };\n@@ -36,11 +38,15 @@ use crate::{\n // }\n // ```\n pub(crate) fn generate_deref(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n+    generate_record_deref(acc, ctx).or_else(|| generate_tuple_deref(acc, ctx))\n+}\n+\n+fn generate_record_deref(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     let strukt = ctx.find_node_at_offset::<ast::Struct>()?;\n     let field = ctx.find_node_at_offset::<ast::RecordField>()?;\n \n     if existing_deref_impl(&ctx.sema, &strukt).is_some() {\n-        cov_mark::hit!(test_add_deref_impl_already_exists);\n+        cov_mark::hit!(test_add_record_deref_impl_already_exists);\n         return None;\n     }\n \n@@ -51,26 +57,50 @@ pub(crate) fn generate_deref(acc: &mut Assists, ctx: &AssistContext) -> Option<(\n         AssistId(\"generate_deref\", AssistKind::Generate),\n         format!(\"Generate `Deref` impl using `{}`\", field_name),\n         target,\n-        |edit| {\n-            let start_offset = strukt.syntax().text_range().end();\n-            let impl_code = format!(\n-                r#\"    type Target = {0};\n+        |edit| generate_edit(edit, strukt, field_type.syntax(), field_name.syntax()),\n+    )\n+}\n+\n+fn generate_tuple_deref(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n+    let strukt = ctx.find_node_at_offset::<ast::Struct>()?;\n+    let field = ctx.find_node_at_offset::<ast::TupleField>()?;\n+    let field_list = ctx.find_node_at_offset::<ast::TupleFieldList>()?;\n+    let field_list_index =\n+        field_list.syntax().children().into_iter().position(|s| &s == field.syntax())?;\n+\n+    if existing_deref_impl(&ctx.sema, &strukt).is_some() {\n+        cov_mark::hit!(test_add_field_deref_impl_already_exists);\n+        return None;\n+    }\n+\n+    let field_type = field.ty()?;\n+    let target = field.syntax().text_range();\n+    acc.add(\n+        AssistId(\"generate_deref\", AssistKind::Generate),\n+        format!(\"Generate `Deref` impl using `{}`\", field.syntax()),\n+        target,\n+        |edit| generate_edit(edit, strukt, field_type.syntax(), field_list_index),\n+    )\n+}\n+\n+fn generate_edit(\n+    edit: &mut AssistBuilder,\n+    strukt: ast::Struct,\n+    field_type_syntax: &SyntaxNode,\n+    field_name: impl Display,\n+) {\n+    let start_offset = strukt.syntax().text_range().end();\n+    let impl_code = format!(\n+        r#\"    type Target = {0};\n \n     fn deref(&self) -> &Self::Target {{\n         &self.{1}\n     }}\"#,\n-                field_type.syntax(),\n-                field_name.syntax()\n-            );\n-            let strukt_adt = ast::Adt::Struct(strukt);\n-            // Q for reviewer: Is there a better way to specify the trait_text, e.g.\n-            // - can I have it auto `use std::ops::Deref`, and then just use `Deref` as the trait text?\n-            //   Or is there a helper that might detect if `std::ops::Deref` has been used, and pick `Deref`,\n-            //   otherwise, pick `std::ops::Deref` for the trait_text.\n-            let deref_impl = generate_trait_impl_text(&strukt_adt, \"std::ops::Deref\", &impl_code);\n-            edit.insert(start_offset, deref_impl);\n-        },\n-    )\n+        field_type_syntax, field_name\n+    );\n+    let strukt_adt = ast::Adt::Struct(strukt);\n+    let deref_impl = generate_trait_impl_text(&strukt_adt, \"std::ops::Deref\", &impl_code);\n+    edit.insert(start_offset, deref_impl);\n }\n \n fn existing_deref_impl(\n@@ -97,7 +127,7 @@ mod tests {\n     use super::*;\n \n     #[test]\n-    fn test_generate_deref() {\n+    fn test_generate_record_deref() {\n         check_assist(\n             generate_deref,\n             r#\"struct A { }\n@@ -115,6 +145,43 @@ impl std::ops::Deref for B {\n         );\n     }\n \n+    #[test]\n+    fn test_generate_field_deref_idx_0() {\n+        check_assist(\n+            generate_deref,\n+            r#\"struct A { }\n+struct B($0A);\"#,\n+            r#\"struct A { }\n+struct B(A);\n+\n+impl std::ops::Deref for B {\n+    type Target = A;\n+\n+    fn deref(&self) -> &Self::Target {\n+        &self.0\n+    }\n+}\"#,\n+        );\n+    }\n+    #[test]\n+    fn test_generate_field_deref_idx_1() {\n+        check_assist(\n+            generate_deref,\n+            r#\"struct A { }\n+struct B(u8, $0A);\"#,\n+            r#\"struct A { }\n+struct B(u8, A);\n+\n+impl std::ops::Deref for B {\n+    type Target = A;\n+\n+    fn deref(&self) -> &Self::Target {\n+        &self.1\n+    }\n+}\"#,\n+        );\n+    }\n+\n     fn check_not_applicable(ra_fixture: &str) {\n         let fixture = format!(\n             \"//- /main.rs crate:main deps:core,std\\n{}\\n{}\",\n@@ -125,8 +192,8 @@ impl std::ops::Deref for B {\n     }\n \n     #[test]\n-    fn test_generate_deref_not_applicable_if_already_impl() {\n-        cov_mark::check!(test_add_deref_impl_already_exists);\n+    fn test_generate_record_deref_not_applicable_if_already_impl() {\n+        cov_mark::check!(test_add_record_deref_impl_already_exists);\n         check_not_applicable(\n             r#\"struct A { }\n struct B { $0a: A }\n@@ -137,6 +204,23 @@ impl std::ops::Deref for B {\n     fn deref(&self) -> &Self::Target {\n         &self.a\n     }\n+}\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn test_generate_field_deref_not_applicable_if_already_impl() {\n+        cov_mark::check!(test_add_field_deref_impl_already_exists);\n+        check_not_applicable(\n+            r#\"struct A { }\n+struct B($0A)\n+\n+impl std::ops::Deref for B {\n+    type Target = A;\n+\n+    fn deref(&self) -> &Self::Target {\n+        &self.0\n+    }\n }\"#,\n         )\n     }"}]}