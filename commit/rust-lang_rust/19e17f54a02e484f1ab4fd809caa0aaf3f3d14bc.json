{"sha": "19e17f54a02e484f1ab4fd809caa0aaf3f3d14bc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5ZTE3ZjU0YTAyZTQ4NGYxYWI0ZmQ4MDljYWEwYWFmM2YzZDE0YmM=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-08-04T23:30:51Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-08-07T15:52:09Z"}, "message": "std: removed option.take_map{,_default}", "tree": {"sha": "a8849f904f46e56f8ad718ab2e5c56947872e05c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a8849f904f46e56f8ad718ab2e5c56947872e05c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19e17f54a02e484f1ab4fd809caa0aaf3f3d14bc", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19e17f54a02e484f1ab4fd809caa0aaf3f3d14bc", "html_url": "https://github.com/rust-lang/rust/commit/19e17f54a02e484f1ab4fd809caa0aaf3f3d14bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19e17f54a02e484f1ab4fd809caa0aaf3f3d14bc/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e490813b017f99cb4385fe846d645efe5d62b62", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e490813b017f99cb4385fe846d645efe5d62b62", "html_url": "https://github.com/rust-lang/rust/commit/1e490813b017f99cb4385fe846d645efe5d62b62"}], "stats": {"total": 24, "additions": 5, "deletions": 19}, "files": [{"sha": "66b30d8dd031c288eb2200fd4f35d69553f5a35b", "filename": "src/libstd/option.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/19e17f54a02e484f1ab4fd809caa0aaf3f3d14bc/src%2Flibstd%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19e17f54a02e484f1ab4fd809caa0aaf3f3d14bc/src%2Flibstd%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Foption.rs?ref=19e17f54a02e484f1ab4fd809caa0aaf3f3d14bc", "patch": "@@ -241,20 +241,6 @@ impl<T> Option<T> {\n         util::replace(self, None)\n     }\n \n-    /// As `map_move`, but swaps a None into the original option rather\n-    /// than consuming it by-value.\n-    #[inline]\n-    pub fn take_map<U>(&mut self, blk: &fn(T) -> U) -> Option<U> {\n-        self.take().map_move(blk)\n-    }\n-\n-    /// As `map_move_default`, but swaps a None into the original option\n-    /// rather than consuming it by-value.\n-    #[inline]\n-    pub fn take_map_default<U> (&mut self, def: U, blk: &fn(T) -> U) -> U {\n-        self.take().map_move_default(def, blk)\n-    }\n-\n     /// Apply a function to the contained value or do nothing.\n     /// Returns true if the contained value was mutated.\n     pub fn mutate(&mut self, f: &fn(T) -> T) -> bool {"}, {"sha": "789c7531eca82221ee0a384526726cd9b838f010", "filename": "src/libstd/rt/kill.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/19e17f54a02e484f1ab4fd809caa0aaf3f3d14bc/src%2Flibstd%2Frt%2Fkill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19e17f54a02e484f1ab4fd809caa0aaf3f3d14bc/src%2Flibstd%2Frt%2Fkill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fkill.rs?ref=19e17f54a02e484f1ab4fd809caa0aaf3f3d14bc", "patch": "@@ -405,7 +405,7 @@ impl KillHandle {\n                         others.take().map_move_default(true, |f| f()) && {\n                             let mut inner = this.take().unwrap();\n                             (!inner.any_child_failed) &&\n-                                inner.child_tombstones.take_map_default(true, |f| f())\n+                                inner.child_tombstones.take().map_move_default(true, |f| f())\n                         }\n                     }\n                 }\n@@ -493,15 +493,15 @@ impl Death {\n         { use util; util::ignore(group); }\n \n         // Step 1. Decide if we need to collect child failures synchronously.\n-        do self.on_exit.take_map |on_exit| {\n+        do self.on_exit.take().map_move |on_exit| {\n             if success {\n                 // We succeeded, but our children might not. Need to wait for them.\n                 let mut inner = self.kill_handle.take_unwrap().unwrap();\n                 if inner.any_child_failed {\n                     success = false;\n                 } else {\n                     // Lockless access to tombstones protected by unwrap barrier.\n-                    success = inner.child_tombstones.take_map_default(true, |f| f());\n+                    success = inner.child_tombstones.take().map_move_default(true, |f| f());\n                 }\n             }\n             on_exit(success);\n@@ -510,12 +510,12 @@ impl Death {\n         // Step 2. Possibly alert possibly-watching parent to failure status.\n         // Note that as soon as parent_handle goes out of scope, the parent\n         // can successfully unwrap its handle and collect our reported status.\n-        do self.watching_parent.take_map |mut parent_handle| {\n+        do self.watching_parent.take().map_move |mut parent_handle| {\n             if success {\n                 // Our handle might be None if we had an exit callback, and\n                 // already unwrapped it. But 'success' being true means no\n                 // child failed, so there's nothing to do (see below case).\n-                do self.kill_handle.take_map |own_handle| {\n+                do self.kill_handle.take().map_move |own_handle| {\n                     own_handle.reparent_children_to(&mut parent_handle);\n                 };\n             } else {"}]}