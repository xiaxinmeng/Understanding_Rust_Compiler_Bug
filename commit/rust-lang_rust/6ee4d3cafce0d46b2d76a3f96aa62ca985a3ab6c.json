{"sha": "6ee4d3cafce0d46b2d76a3f96aa62ca985a3ab6c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlZTRkM2NhZmNlMGQ0NmIyZDc2YTNmOTZhYTYyY2E5ODVhM2FiNmM=", "commit": {"author": {"name": "Matthew Russo", "email": "matthew@edapp.com", "date": "2018-10-30T14:10:42Z"}, "committer": {"name": "Matthew Russo", "email": "matthew@edapp.com", "date": "2018-12-04T22:19:55Z"}, "message": "new_source_file no longer enters duplicate files, expand_include_bytes includes the source if it can convert bytes to string", "tree": {"sha": "fb3330595ecb5c3d7991faabe248e60c00a2c60c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb3330595ecb5c3d7991faabe248e60c00a2c60c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ee4d3cafce0d46b2d76a3f96aa62ca985a3ab6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ee4d3cafce0d46b2d76a3f96aa62ca985a3ab6c", "html_url": "https://github.com/rust-lang/rust/commit/6ee4d3cafce0d46b2d76a3f96aa62ca985a3ab6c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ee4d3cafce0d46b2d76a3f96aa62ca985a3ab6c/comments", "author": null, "committer": null, "parents": [{"sha": "906deae0790bd18681b937fe9a141a3c26cf1855", "url": "https://api.github.com/repos/rust-lang/rust/commits/906deae0790bd18681b937fe9a141a3c26cf1855", "html_url": "https://github.com/rust-lang/rust/commit/906deae0790bd18681b937fe9a141a3c26cf1855"}], "stats": {"total": 59, "additions": 40, "deletions": 19}, "files": [{"sha": "654be85862f08bd1cb4f5d3ac81ca1219eb678bc", "filename": "src/libsyntax/ext/source_util.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6ee4d3cafce0d46b2d76a3f96aa62ca985a3ab6c/src%2Flibsyntax%2Fext%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ee4d3cafce0d46b2d76a3f96aa62ca985a3ab6c/src%2Flibsyntax%2Fext%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fsource_util.rs?ref=6ee4d3cafce0d46b2d76a3f96aa62ca985a3ab6c", "patch": "@@ -182,9 +182,12 @@ pub fn expand_include_bytes(cx: &mut ExtCtxt, sp: Span, tts: &[tokenstream::Toke\n             DummyResult::expr(sp)\n         }\n         Ok(..) => {\n-            // Add this input file to the code map to make it available as\n-            // dependency information, but don't enter it's contents\n-            cx.source_map().new_source_file(file.into(), String::new());\n+            let src = match String::from_utf8(bytes.clone()) {\n+                Ok(contents) => contents,\n+                Err(..) => \"\".to_string()\n+            };\n+\n+            cx.source_map().new_source_file(file.into(), src);\n \n             base::MacEager::expr(cx.expr_lit(sp, ast::LitKind::ByteStr(Lrc::new(bytes))))\n         }"}, {"sha": "b027e7d5778a02be603ee1b2f2ccd800a44967a1", "filename": "src/libsyntax/source_map.rs", "status": "modified", "additions": 34, "deletions": 16, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/6ee4d3cafce0d46b2d76a3f96aa62ca985a3ab6c/src%2Flibsyntax%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ee4d3cafce0d46b2d76a3f96aa62ca985a3ab6c/src%2Flibsyntax%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fsource_map.rs?ref=6ee4d3cafce0d46b2d76a3f96aa62ca985a3ab6c", "patch": "@@ -110,11 +110,19 @@ pub struct StableSourceFileId(u128);\n \n impl StableSourceFileId {\n     pub fn new(source_file: &SourceFile) -> StableSourceFileId {\n+        StableFilemapId::new_from_pieces(&source_file.name,\n+                                         source_file.name_was_remapped,\n+                                         source_file.unmapped_path.as_ref())\n+    }\n+\n+    pub fn new_from_pieces(name: &FileName,\n+                           name_was_remapped: bool,\n+                           unmapped_path: Option<&FileName>) -> StableFilemapId {\n         let mut hasher = StableHasher::new();\n \n-        source_file.name.hash(&mut hasher);\n-        source_file.name_was_remapped.hash(&mut hasher);\n-        source_file.unmapped_path.hash(&mut hasher);\n+        name.hash(&mut hasher);\n+        name_was_remapped.hash(&mut hasher);\n+        unmapped_path.hash(&mut hasher);\n \n         StableSourceFileId(hasher.finish())\n     }\n@@ -208,7 +216,8 @@ impl SourceMap {\n     }\n \n     /// Creates a new source_file.\n-    /// This does not ensure that only one SourceFile exists per file name.\n+    /// If a file already exists in the source_map with the same id, that file is returned\n+    /// unmodified\n     pub fn new_source_file(&self, filename: FileName, src: String) -> Lrc<SourceFile> {\n         let start_pos = self.next_start_pos();\n \n@@ -226,21 +235,30 @@ impl SourceMap {\n             },\n             other => (other, false),\n         };\n-        let source_file = Lrc::new(SourceFile::new(\n-            filename,\n-            was_remapped,\n-            unmapped_path,\n-            src,\n-            Pos::from_usize(start_pos),\n-        ));\n \n-        let mut files = self.files.borrow_mut();\n+        let file_id = StableFilemapId::new_from_pieces(&filename,\n+                                                       was_remapped,\n+                                                       Some(&unmapped_path));\n \n-        files.source_files.push(source_file.clone());\n-        files.stable_id_to_source_file.insert(StableSourceFileId::new(&source_file),\n-                                              source_file.clone());\n+        return match self.source_file_by_stable_id(file_id) {\n+            Some(lrc_sf) => lrc_sf,\n+            None => {\n+                let source_file = Lrc::new(SourceFile::new(\n+                    filename,\n+                    was_remapped,\n+                    unmapped_path,\n+                    src,\n+                    Pos::from_usize(start_pos),\n+                ));\n \n-        source_file\n+                let mut files = self.files.borrow_mut();\n+\n+                files.source_files.push(source_file.clone());\n+                files.stable_id_to_source_file.insert(file_id, source_file.clone());\n+\n+                source_file\n+            }\n+        }\n     }\n \n     /// Allocates a new SourceFile representing a source file from an external"}]}