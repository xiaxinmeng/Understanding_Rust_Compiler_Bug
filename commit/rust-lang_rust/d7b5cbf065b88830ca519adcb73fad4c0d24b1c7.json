{"sha": "d7b5cbf065b88830ca519adcb73fad4c0d24b1c7", "node_id": "C_kwDOAAsO6NoAKGQ3YjVjYmYwNjViODg4MzBjYTUxOWFkY2I3M2ZhZDRjMGQyNGIxYzc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-16T14:07:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-16T14:07:23Z"}, "message": "Auto merge of #9007 - flip1995:rustup, r=flip1995\n\nRustup\n\nr? `@ghost`\n\nchangelog: none", "tree": {"sha": "fd58f94084676234e51c080d48b985670f866d81", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd58f94084676234e51c080d48b985670f866d81"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7", "html_url": "https://github.com/rust-lang/rust/commit/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9edd6412f125522049199199cd45d9f1f8879f47", "url": "https://api.github.com/repos/rust-lang/rust/commits/9edd6412f125522049199199cd45d9f1f8879f47", "html_url": "https://github.com/rust-lang/rust/commit/9edd6412f125522049199199cd45d9f1f8879f47"}, {"sha": "280797ecb0a723c3fc00b902566d1d8ec3d7003d", "url": "https://api.github.com/repos/rust-lang/rust/commits/280797ecb0a723c3fc00b902566d1d8ec3d7003d", "html_url": "https://github.com/rust-lang/rust/commit/280797ecb0a723c3fc00b902566d1d8ec3d7003d"}], "stats": {"total": 400, "additions": 208, "deletions": 192}, "files": [{"sha": "59a7c535400699a9450753d9675cf8c49ed30c5f", "filename": "clippy_lints/src/almost_complete_letter_range.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_lints%2Fsrc%2Falmost_complete_letter_range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_lints%2Fsrc%2Falmost_complete_letter_range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Falmost_complete_letter_range.rs?ref=d7b5cbf065b88830ca519adcb73fad4c0d24b1c7", "patch": "@@ -90,7 +90,7 @@ fn check_range(cx: &EarlyContext<'_>, span: Span, start: &Expr, end: &Expr, sugg\n                     diag.span_suggestion(\n                         span,\n                         \"use an inclusive range\",\n-                        sugg.to_owned(),\n+                        sugg,\n                         Applicability::MaybeIncorrect,\n                     );\n                 }"}, {"sha": "0bdef9d0a7e8e5bc8ab4c5308afa65a011dcc946", "filename": "clippy_lints/src/as_underscore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_lints%2Fsrc%2Fas_underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_lints%2Fsrc%2Fas_underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fas_underscore.rs?ref=d7b5cbf065b88830ca519adcb73fad4c0d24b1c7", "patch": "@@ -63,7 +63,7 @@ impl<'tcx> LateLintPass<'tcx> for AsUnderscore {\n                     diag.span_suggestion(\n                         ty.span,\n                         \"consider giving the type explicitly\",\n-                        format!(\"{}\", ty_resolved),\n+                        ty_resolved,\n                         Applicability::MachineApplicable,\n                     );\n             }"}, {"sha": "ed12ad9c36790fe74ffcb1c344689b52b6c19078", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=d7b5cbf065b88830ca519adcb73fad4c0d24b1c7", "patch": "@@ -340,7 +340,7 @@ impl<'tcx> LateLintPass<'tcx> for Attributes {\n                             for lint in lint_list {\n                                 match item.kind {\n                                     ItemKind::Use(..) => {\n-                                        if is_word(lint, sym!(unused_imports))\n+                                        if is_word(lint, sym::unused_imports)\n                                             || is_word(lint, sym::deprecated)\n                                             || is_word(lint, sym!(unreachable_pub))\n                                             || is_word(lint, sym!(unused))\n@@ -355,7 +355,7 @@ impl<'tcx> LateLintPass<'tcx> for Attributes {\n                                         }\n                                     },\n                                     ItemKind::ExternCrate(..) => {\n-                                        if is_word(lint, sym!(unused_imports)) && skip_unused_imports {\n+                                        if is_word(lint, sym::unused_imports) && skip_unused_imports {\n                                             return;\n                                         }\n                                         if is_word(lint, sym!(unused_extern_crates)) {"}, {"sha": "4b3a04f1255b99465e041ebe27e87bf7538e0b85", "filename": "clippy_lints/src/blocks_in_if_conditions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_lints%2Fsrc%2Fblocks_in_if_conditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_lints%2Fsrc%2Fblocks_in_if_conditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fblocks_in_if_conditions.rs?ref=d7b5cbf065b88830ca519adcb73fad4c0d24b1c7", "patch": "@@ -51,7 +51,7 @@ struct ExVisitor<'a, 'tcx> {\n \n impl<'a, 'tcx> Visitor<'tcx> for ExVisitor<'a, 'tcx> {\n     fn visit_expr(&mut self, expr: &'tcx Expr<'tcx>) {\n-        if let ExprKind::Closure(_, _, eid, _, _) = expr.kind {\n+        if let ExprKind::Closure { body, .. } = expr.kind {\n             // do not lint if the closure is called using an iterator (see #1141)\n             if_chain! {\n                 if let Some(parent) = get_parent_expr(self.cx, expr);\n@@ -64,7 +64,7 @@ impl<'a, 'tcx> Visitor<'tcx> for ExVisitor<'a, 'tcx> {\n                 }\n             }\n \n-            let body = self.cx.tcx.hir().body(eid);\n+            let body = self.cx.tcx.hir().body(body);\n             let ex = &body.value;\n             if let ExprKind::Block(block, _) = ex.kind {\n                 if !body.value.span.from_expansion() && !block.stmts.is_empty() {"}, {"sha": "4e530256321ccbf764449f59c8202dff46210a59", "filename": "clippy_lints/src/bytecount.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_lints%2Fsrc%2Fbytecount.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_lints%2Fsrc%2Fbytecount.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbytecount.rs?ref=d7b5cbf065b88830ca519adcb73fad4c0d24b1c7", "patch": "@@ -51,8 +51,8 @@ impl<'tcx> LateLintPass<'tcx> for ByteCount {\n             if count.ident.name == sym::count;\n             if let ExprKind::MethodCall(filter, [filter_recv, filter_arg], _) = count_recv.kind;\n             if filter.ident.name == sym!(filter);\n-            if let ExprKind::Closure(_, _, body_id, _, _) = filter_arg.kind;\n-            let body = cx.tcx.hir().body(body_id);\n+            if let ExprKind::Closure { body, .. } = filter_arg.kind;\n+            let body = cx.tcx.hir().body(body);\n             if let [param] = body.params;\n             if let PatKind::Binding(_, arg_id, _, _) = strip_pat_refs(param.pat).kind;\n             if let ExprKind::Binary(ref op, l, r) = body.value.kind;"}, {"sha": "b47441eff3748fb505cd32b400cd77eccc1e32d2", "filename": "clippy_lints/src/dereference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdereference.rs?ref=d7b5cbf065b88830ca519adcb73fad4c0d24b1c7", "patch": "@@ -514,7 +514,7 @@ fn is_linted_explicit_deref_position(parent: Option<Node<'_>>, child_id: HirId,\n         | ExprKind::Loop(..)\n         | ExprKind::Match(..)\n         | ExprKind::Let(..)\n-        | ExprKind::Closure(..)\n+        | ExprKind::Closure{..}\n         | ExprKind::Block(..)\n         | ExprKind::Assign(..)\n         | ExprKind::AssignOp(..)"}, {"sha": "08bf80a422900f533d61225670031aacc77cc37e", "filename": "clippy_lints/src/empty_structs_with_brackets.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_lints%2Fsrc%2Fempty_structs_with_brackets.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_lints%2Fsrc%2Fempty_structs_with_brackets.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fempty_structs_with_brackets.rs?ref=d7b5cbf065b88830ca519adcb73fad4c0d24b1c7", "patch": "@@ -44,7 +44,7 @@ impl EarlyLintPass for EmptyStructsWithBrackets {\n                     diagnostic.span_suggestion_hidden(\n                         span_after_ident,\n                         \"remove the brackets\",\n-                        \";\".to_string(),\n+                        \";\",\n                         Applicability::MachineApplicable);\n                     },\n             );"}, {"sha": "da67888827d199a31de66d410b2e5e0c8a4f27ca", "filename": "clippy_lints/src/enum_clike.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_lints%2Fsrc%2Fenum_clike.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_lints%2Fsrc%2Fenum_clike.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_clike.rs?ref=d7b5cbf065b88830ca519adcb73fad4c0d24b1c7", "patch": "@@ -50,8 +50,8 @@ impl<'tcx> LateLintPass<'tcx> for UnportableVariant {\n                         .tcx\n                         .const_eval_poly(def_id.to_def_id())\n                         .ok()\n-                        .map(|val| rustc_middle::ty::Const::from_value(cx.tcx, val, ty));\n-                    if let Some(Constant::Int(val)) = constant.and_then(miri_to_const) {\n+                        .map(|val| rustc_middle::mir::ConstantKind::from_value(val, ty));\n+                    if let Some(Constant::Int(val)) = constant.and_then(|c| miri_to_const(cx.tcx, c)) {\n                         if let ty::Adt(adt, _) = ty.kind() {\n                             if adt.is_enum() {\n                                 ty = adt.repr().discr_type().to_ty(cx.tcx);"}, {"sha": "a5a763c37d1bec0f8d3854ef1bf14ac8ad287a44", "filename": "clippy_lints/src/eta_reduction.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_lints%2Fsrc%2Feta_reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_lints%2Fsrc%2Feta_reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feta_reduction.rs?ref=d7b5cbf065b88830ca519adcb73fad4c0d24b1c7", "patch": "@@ -78,7 +78,7 @@ impl<'tcx> LateLintPass<'tcx> for EtaReduction {\n             return;\n         }\n         let body = match expr.kind {\n-            ExprKind::Closure(_, _, id, _, _) => cx.tcx.hir().body(id),\n+            ExprKind::Closure { body, .. } => cx.tcx.hir().body(body),\n             _ => return,\n         };\n         if body.value.span.from_expansion() {"}, {"sha": "78b5ec8ec1ef4f98bff00d5ccdf2fe8121a2ede9", "filename": "clippy_lints/src/infinite_iter.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_lints%2Fsrc%2Finfinite_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_lints%2Fsrc%2Finfinite_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finfinite_iter.rs?ref=d7b5cbf065b88830ca519adcb73fad4c0d24b1c7", "patch": "@@ -159,8 +159,8 @@ fn is_infinite(cx: &LateContext<'_>, expr: &Expr<'_>) -> Finiteness {\n                 }\n             }\n             if method.ident.name == sym!(flat_map) && args.len() == 2 {\n-                if let ExprKind::Closure(_, _, body_id, _, _) = args[1].kind {\n-                    let body = cx.tcx.hir().body(body_id);\n+                if let ExprKind::Closure { body, .. } = args[1].kind {\n+                    let body = cx.tcx.hir().body(body);\n                     return is_infinite(cx, &body.value);\n                 }\n             }"}, {"sha": "289755bfec66ff74a599c3dd5264f2e9282b4e29", "filename": "clippy_lints/src/large_const_arrays.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_lints%2Fsrc%2Flarge_const_arrays.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_lints%2Fsrc%2Flarge_const_arrays.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flarge_const_arrays.rs?ref=d7b5cbf065b88830ca519adcb73fad4c0d24b1c7", "patch": "@@ -3,7 +3,6 @@ use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{Item, ItemKind};\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::mir::interpret::ConstValue;\n use rustc_middle::ty::layout::LayoutOf;\n use rustc_middle::ty::{self, ConstKind};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n@@ -54,8 +53,8 @@ impl<'tcx> LateLintPass<'tcx> for LargeConstArrays {\n             if let ItemKind::Const(hir_ty, _) = &item.kind;\n             let ty = hir_ty_to_ty(cx.tcx, hir_ty);\n             if let ty::Array(element_type, cst) = ty.kind();\n-            if let ConstKind::Value(ConstValue::Scalar(element_count)) = cst.val();\n-            if let Ok(element_count) = element_count.to_machine_usize(&cx.tcx);\n+            if let ConstKind::Value(ty::ValTree::Leaf(element_count)) = cst.kind();\n+            if let Ok(element_count) = element_count.try_to_machine_usize(cx.tcx);\n             if let Ok(element_size) = cx.layout_of(*element_type).map(|l| l.size.bytes());\n             if self.maximum_allowed_size < element_count * element_size;\n \n@@ -76,7 +75,7 @@ impl<'tcx> LateLintPass<'tcx> for LargeConstArrays {\n                         diag.span_suggestion(\n                             sugg_span,\n                             \"make this a static item\",\n-                            \"static\".to_string(),\n+                            \"static\",\n                             Applicability::MachineApplicable,\n                         );\n                     }"}, {"sha": "0acbd81aec3438ab99989d2fda6c8960257045b6", "filename": "clippy_lints/src/large_stack_arrays.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_lints%2Fsrc%2Flarge_stack_arrays.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_lints%2Fsrc%2Flarge_stack_arrays.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flarge_stack_arrays.rs?ref=d7b5cbf065b88830ca519adcb73fad4c0d24b1c7", "patch": "@@ -3,7 +3,6 @@ use clippy_utils::source::snippet;\n use if_chain::if_chain;\n use rustc_hir::{Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::mir::interpret::ConstValue;\n use rustc_middle::ty::layout::LayoutOf;\n use rustc_middle::ty::{self, ConstKind};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n@@ -43,8 +42,8 @@ impl<'tcx> LateLintPass<'tcx> for LargeStackArrays {\n         if_chain! {\n             if let ExprKind::Repeat(_, _) = expr.kind;\n             if let ty::Array(element_type, cst) = cx.typeck_results().expr_ty(expr).kind();\n-            if let ConstKind::Value(ConstValue::Scalar(element_count)) = cst.val();\n-            if let Ok(element_count) = element_count.to_machine_usize(&cx.tcx);\n+            if let ConstKind::Value(ty::ValTree::Leaf(element_count)) = cst.kind();\n+            if let Ok(element_count) = element_count.try_to_machine_usize(cx.tcx);\n             if let Ok(element_size) = cx.layout_of(*element_type).map(|l| l.size.bytes());\n             if self.maximum_allowed_size < element_count * element_size;\n             then {"}, {"sha": "0b6d9adb553e48f0baa6594fc3c0256ad3b43b6c", "filename": "clippy_lints/src/loops/needless_range_loop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs?ref=d7b5cbf065b88830ca519adcb73fad4c0d24b1c7", "patch": "@@ -369,8 +369,8 @@ impl<'a, 'tcx> Visitor<'tcx> for VarVisitor<'a, 'tcx> {\n                     self.visit_expr(expr);\n                 }\n             },\n-            ExprKind::Closure(_, _, body_id, ..) => {\n-                let body = self.cx.tcx.hir().body(body_id);\n+            ExprKind::Closure { body, .. } => {\n+                let body = self.cx.tcx.hir().body(body);\n                 self.visit_expr(&body.value);\n             },\n             _ => walk_expr(self, expr),"}, {"sha": "32de20f6531fec3a88f63c815972274447c3c503", "filename": "clippy_lints/src/loops/never_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_lints%2Fsrc%2Floops%2Fnever_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_lints%2Fsrc%2Floops%2Fnever_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fnever_loop.rs?ref=d7b5cbf065b88830ca519adcb73fad4c0d24b1c7", "patch": "@@ -188,7 +188,7 @@ fn never_loop_expr(expr: &Expr<'_>, main_loop_id: HirId) -> NeverLoopResult {\n             })\n             .fold(NeverLoopResult::Otherwise, combine_both),\n         ExprKind::Yield(_, _)\n-        | ExprKind::Closure(_, _, _, _, _)\n+        | ExprKind::Closure { .. }\n         | ExprKind::Path(_)\n         | ExprKind::ConstBlock(_)\n         | ExprKind::Lit(_)"}, {"sha": "a57159750664fc0eafe052a1fc21724049d4bd0e", "filename": "clippy_lints/src/loops/while_let_on_iterator.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_lints%2Fsrc%2Floops%2Fwhile_let_on_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_lints%2Fsrc%2Floops%2Fwhile_let_on_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fwhile_let_on_iterator.rs?ref=d7b5cbf065b88830ca519adcb73fad4c0d24b1c7", "patch": "@@ -220,7 +220,7 @@ fn uses_iter<'tcx>(cx: &LateContext<'tcx>, iter_expr: &IterExpr, container: &'tc\n                 if let Some(e) = e {\n                     self.visit_expr(e);\n                 }\n-            } else if let ExprKind::Closure(_, _, id, _, _) = e.kind {\n+            } else if let ExprKind::Closure { body: id, .. } = e.kind {\n                 if is_res_used(self.cx, self.iter_expr.path, id) {\n                     self.uses_iter = true;\n                 }\n@@ -260,7 +260,7 @@ fn needs_mutable_borrow(cx: &LateContext<'_>, iter_expr: &IterExpr, loop_expr: &\n                     if let Some(e) = e {\n                         self.visit_expr(e);\n                     }\n-                } else if let ExprKind::Closure(_, _, id, _, _) = e.kind {\n+                } else if let ExprKind::Closure { body: id, .. } = e.kind {\n                     self.used_iter = is_res_used(self.cx, self.iter_expr.path, id);\n                 } else {\n                     walk_expr(self, e);\n@@ -307,7 +307,7 @@ fn needs_mutable_borrow(cx: &LateContext<'_>, iter_expr: &IterExpr, loop_expr: &\n                     if let Some(e) = e {\n                         self.visit_expr(e);\n                     }\n-                } else if let ExprKind::Closure(_, _, id, _, _) = e.kind {\n+                } else if let ExprKind::Closure { body: id, .. } = e.kind {\n                     self.used_after = is_res_used(self.cx, self.iter_expr.path, id);\n                 } else {\n                     walk_expr(self, e);"}, {"sha": "d7d8a59215280d8b6ca08ea0d750f599eff20eb4", "filename": "clippy_lints/src/manual_async_fn.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_lints%2Fsrc%2Fmanual_async_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_lints%2Fsrc%2Fmanual_async_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_async_fn.rs?ref=d7b5cbf065b88830ca519adcb73fad4c0d24b1c7", "patch": "@@ -86,7 +86,7 @@ impl<'tcx> LateLintPass<'tcx> for ManualAsyncFn {\n                                 diag.span_suggestion(\n                                     block.span,\n                                     \"move the body of the async block to the enclosing function\",\n-                                    body_snip.to_string(),\n+                                    body_snip,\n                                     Applicability::MachineApplicable\n                                 );\n                             }\n@@ -177,8 +177,8 @@ fn desugared_async_block<'tcx>(cx: &LateContext<'tcx>, block: &'tcx Block<'tcx>)\n         if let Some(block_expr) = block.expr;\n         if let Some(args) = match_function_call(cx, block_expr, &FUTURE_FROM_GENERATOR);\n         if args.len() == 1;\n-        if let Expr{kind: ExprKind::Closure(_, _, body_id, ..), ..} = args[0];\n-        let closure_body = cx.tcx.hir().body(body_id);\n+        if let Expr{kind: ExprKind::Closure { body, .. }, ..} = args[0];\n+        let closure_body = cx.tcx.hir().body(body);\n         if closure_body.generator_kind == Some(GeneratorKind::Async(AsyncGeneratorKind::Block));\n         then {\n             return Some(closure_body);"}, {"sha": "18cfd00376784448e76e91e9272be76f931fbb33", "filename": "clippy_lints/src/manual_ok_or.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_lints%2Fsrc%2Fmanual_ok_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_lints%2Fsrc%2Fmanual_ok_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_ok_or.rs?ref=d7b5cbf065b88830ca519adcb73fad4c0d24b1c7", "patch": "@@ -88,8 +88,8 @@ fn is_ok_wrapping(cx: &LateContext<'_>, map_expr: &Expr<'_>) -> bool {\n         }\n     }\n     if_chain! {\n-        if let ExprKind::Closure(_, _, body_id, ..) = map_expr.kind;\n-        let body = cx.tcx.hir().body(body_id);\n+        if let ExprKind::Closure { body, .. } = map_expr.kind;\n+        let body = cx.tcx.hir().body(body);\n         if let PatKind::Binding(_, param_id, ..) = body.params[0].pat.kind;\n         if let ExprKind::Call(Expr { kind: ExprKind::Path(ok_path), .. }, &[ref ok_arg]) = body.value.kind;\n         if is_lang_ctor(cx, ok_path, ResultOk);"}, {"sha": "3533de54a1e3d4e140caa0ddcaaba159f0a14d30", "filename": "clippy_lints/src/map_clone.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_lints%2Fsrc%2Fmap_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_lints%2Fsrc%2Fmap_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_clone.rs?ref=d7b5cbf065b88830ca519adcb73fad4c0d24b1c7", "patch": "@@ -67,9 +67,9 @@ impl<'tcx> LateLintPass<'tcx> for MapClone {\n             if method.ident.name == sym::map;\n             let ty = cx.typeck_results().expr_ty(&args[0]);\n             if is_type_diagnostic_item(cx, ty, sym::Option) || is_trait_method(cx, e, sym::Iterator);\n-            if let hir::ExprKind::Closure(_, _, body_id, _, _) = args[1].kind;\n+            if let hir::ExprKind::Closure { body, .. } = args[1].kind;\n             then {\n-                let closure_body = cx.tcx.hir().body(body_id);\n+                let closure_body = cx.tcx.hir().body(body);\n                 let closure_expr = peel_blocks(&closure_body.value);\n                 match closure_body.params[0].pat.kind {\n                     hir::PatKind::Ref(inner, hir::Mutability::Not) => if let hir::PatKind::Binding("}, {"sha": "0c22144104872bd345b4f567cc483d4efb98e356", "filename": "clippy_lints/src/map_err_ignore.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_lints%2Fsrc%2Fmap_err_ignore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_lints%2Fsrc%2Fmap_err_ignore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_err_ignore.rs?ref=d7b5cbf065b88830ca519adcb73fad4c0d24b1c7", "patch": "@@ -117,12 +117,19 @@ impl<'tcx> LateLintPass<'tcx> for MapErrIgnore {\n             // only work if the method name is `map_err` and there are only 2 arguments (e.g. x.map_err(|_|[1]\n             // Enum::Variant[2]))\n             if method.ident.as_str() == \"map_err\" && args.len() == 2 {\n-                // make sure the first argument is a closure, and grab the CaptureRef, body_id, and body_span fields\n-                if let ExprKind::Closure(capture, _, body_id, body_span, _) = args[1].kind {\n+                // make sure the first argument is a closure, and grab the CaptureRef, BodyId, and fn_decl_span\n+                // fields\n+                if let ExprKind::Closure {\n+                    capture_clause,\n+                    body,\n+                    fn_decl_span,\n+                    ..\n+                } = args[1].kind\n+                {\n                     // check if this is by Reference (meaning there's no move statement)\n-                    if capture == CaptureBy::Ref {\n+                    if capture_clause == CaptureBy::Ref {\n                         // Get the closure body to check the parameters and values\n-                        let closure_body = cx.tcx.hir().body(body_id);\n+                        let closure_body = cx.tcx.hir().body(body);\n                         // make sure there's only one parameter (`|_|`)\n                         if closure_body.params.len() == 1 {\n                             // make sure that parameter is the wild token (`_`)\n@@ -132,7 +139,7 @@ impl<'tcx> LateLintPass<'tcx> for MapErrIgnore {\n                                 span_lint_and_help(\n                                     cx,\n                                     MAP_ERR_IGNORE,\n-                                    body_span,\n+                                    fn_decl_span,\n                                     \"`map_err(|_|...` wildcard pattern discards the original error\",\n                                     None,\n                                     \"consider storing the original error as a source in the new error, or silence this warning using an ignored identifier (`.map_err(|_foo| ...`)\","}, {"sha": "663246b4c8622f69a9ff4f4399eed77b31215d24", "filename": "clippy_lints/src/map_unit_fn.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_lints%2Fsrc%2Fmap_unit_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_lints%2Fsrc%2Fmap_unit_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_unit_fn.rs?ref=d7b5cbf065b88830ca519adcb73fad4c0d24b1c7", "patch": "@@ -169,12 +169,12 @@ fn unit_closure<'tcx>(\n     expr: &hir::Expr<'_>,\n ) -> Option<(&'tcx hir::Param<'tcx>, &'tcx hir::Expr<'tcx>)> {\n     if_chain! {\n-        if let hir::ExprKind::Closure(_, decl, inner_expr_id, _, _) = expr.kind;\n-        let body = cx.tcx.hir().body(inner_expr_id);\n+        if let hir::ExprKind::Closure { fn_decl, body, .. } = expr.kind;\n+        let body = cx.tcx.hir().body(body);\n         let body_expr = &body.value;\n-        if decl.inputs.len() == 1;\n+        if fn_decl.inputs.len() == 1;\n         if is_unit_expression(cx, body_expr);\n-        if let Some(binding) = iter_input_pats(decl, body).next();\n+        if let Some(binding) = iter_input_pats(fn_decl, body).next();\n         then {\n             return Some((binding, body_expr));\n         }"}, {"sha": "16fefea5520190f81f587fdf2f73488fffa8356a", "filename": "clippy_lints/src/matches/match_same_arms.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_lints%2Fsrc%2Fmatches%2Fmatch_same_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_lints%2Fsrc%2Fmatches%2Fmatch_same_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fmatch_same_arms.rs?ref=d7b5cbf065b88830ca519adcb73fad4c0d24b1c7", "patch": "@@ -110,14 +110,9 @@ pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, arms: &'tcx [Arm<'_>]) {\n                 arm1.span,\n                 \"this match arm has an identical body to the `_` wildcard arm\",\n                 |diag| {\n-                    diag.span_suggestion(\n-                        arm1.span,\n-                        \"try removing the arm\",\n-                        String::new(),\n-                        Applicability::MaybeIncorrect,\n-                    )\n-                    .help(\"or try changing either arm body\")\n-                    .span_note(arm2.span, \"`_` wildcard arm here\");\n+                    diag.span_suggestion(arm1.span, \"try removing the arm\", \"\", Applicability::MaybeIncorrect)\n+                        .help(\"or try changing either arm body\")\n+                        .span_note(arm2.span, \"`_` wildcard arm here\");\n                 },\n             );\n         } else {"}, {"sha": "9df2db45dcf834eb5c6a3a186c8c9c6026286c4e", "filename": "clippy_lints/src/matches/match_single_binding.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_lints%2Fsrc%2Fmatches%2Fmatch_single_binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_lints%2Fsrc%2Fmatches%2Fmatch_single_binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fmatch_single_binding.rs?ref=d7b5cbf065b88830ca519adcb73fad4c0d24b1c7", "patch": "@@ -177,7 +177,7 @@ fn sugg_with_curlies<'a>(\n \n     let (mut cbrace_start, mut cbrace_end) = (String::new(), String::new());\n     if let Some(parent_expr) = get_parent_expr(cx, match_expr) {\n-        if let ExprKind::Closure(..) = parent_expr.kind {\n+        if let ExprKind::Closure { .. } = parent_expr.kind {\n             cbrace_end = format!(\"\\n{}}}\", indent);\n             // Fix body indent due to the closure\n             indent = \" \".repeat(indent_of(cx, bind_names).unwrap_or(0));"}, {"sha": "ae69ca8a3393d57bc1ca1bee59f98cf61211afba", "filename": "clippy_lints/src/matches/overlapping_arms.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_lints%2Fsrc%2Fmatches%2Foverlapping_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_lints%2Fsrc%2Fmatches%2Foverlapping_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Foverlapping_arms.rs?ref=d7b5cbf065b88830ca519adcb73fad4c0d24b1c7", "patch": "@@ -3,6 +3,7 @@ use clippy_utils::diagnostics::span_lint_and_note;\n use core::cmp::Ordering;\n use rustc_hir::{Arm, Expr, PatKind, RangeEnd};\n use rustc_lint::LateContext;\n+use rustc_middle::mir;\n use rustc_middle::ty::Ty;\n use rustc_span::Span;\n \n@@ -34,11 +35,25 @@ fn all_ranges<'tcx>(cx: &LateContext<'tcx>, arms: &'tcx [Arm<'_>], ty: Ty<'tcx>)\n                 if let PatKind::Range(ref lhs, ref rhs, range_end) = pat.kind {\n                     let lhs_const = match lhs {\n                         Some(lhs) => constant(cx, cx.typeck_results(), lhs)?.0,\n-                        None => miri_to_const(ty.numeric_min_val(cx.tcx)?)?,\n+                        None => {\n+                            let min_val_const = ty.numeric_min_val(cx.tcx)?;\n+                            let min_constant = mir::ConstantKind::from_value(\n+                                cx.tcx.valtree_to_const_val((ty, min_val_const.to_valtree())),\n+                                ty,\n+                            );\n+                            miri_to_const(cx.tcx, min_constant)?\n+                        },\n                     };\n                     let rhs_const = match rhs {\n                         Some(rhs) => constant(cx, cx.typeck_results(), rhs)?.0,\n-                        None => miri_to_const(ty.numeric_max_val(cx.tcx)?)?,\n+                        None => {\n+                            let max_val_const = ty.numeric_max_val(cx.tcx)?;\n+                            let max_constant = mir::ConstantKind::from_value(\n+                                cx.tcx.valtree_to_const_val((ty, max_val_const.to_valtree())),\n+                                ty,\n+                            );\n+                            miri_to_const(cx.tcx, max_constant)?\n+                        },\n                     };\n                     let lhs_val = lhs_const.int_value(cx, ty)?;\n                     let rhs_val = rhs_const.int_value(cx, ty)?;"}, {"sha": "0ea3f3b673b7d95e0595847bbfae86df23af9c63", "filename": "clippy_lints/src/matches/redundant_pattern_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_lints%2Fsrc%2Fmatches%2Fredundant_pattern_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_lints%2Fsrc%2Fmatches%2Fredundant_pattern_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fredundant_pattern_match.rs?ref=d7b5cbf065b88830ca519adcb73fad4c0d24b1c7", "patch": "@@ -70,7 +70,7 @@ fn temporaries_need_ordered_drop<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<\n                         }\n                     }\n                 },\n-                // the base type is alway taken by reference.\n+                // the base type is always taken by reference.\n                 // e.g. In `(vec![0])[0]` the vector is a temporary value.\n                 ExprKind::Index(base, index) => {\n                     if !matches!(base.kind, ExprKind::Path(_)) {"}, {"sha": "dcaf6f865de3677d78bb18a2164863f8c178650d", "filename": "clippy_lints/src/matches/significant_drop_in_scrutinee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_lints%2Fsrc%2Fmatches%2Fsignificant_drop_in_scrutinee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_lints%2Fsrc%2Fmatches%2Fsignificant_drop_in_scrutinee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fsignificant_drop_in_scrutinee.rs?ref=d7b5cbf065b88830ca519adcb73fad4c0d24b1c7", "patch": "@@ -305,7 +305,7 @@ impl<'a, 'tcx> Visitor<'tcx> for SigDropHelper<'a, 'tcx> {\n             ExprKind::Break(_, _) |\n             ExprKind::Cast(_, _) |\n             // Don't want to check the closure itself, only invocation, which is covered by MethodCall\n-            ExprKind::Closure(_, _, _, _, _) |\n+            ExprKind::Closure { .. } |\n             ExprKind::ConstBlock(_) |\n             ExprKind::Continue(_) |\n             ExprKind::DropTemps(_) |"}, {"sha": "d31b736982b34715f308e2d9f6d72f8f0d6ca1cb", "filename": "clippy_lints/src/methods/bind_instead_of_map.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_lints%2Fsrc%2Fmethods%2Fbind_instead_of_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_lints%2Fsrc%2Fmethods%2Fbind_instead_of_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fbind_instead_of_map.rs?ref=d7b5cbf065b88830ca519adcb73fad4c0d24b1c7", "patch": "@@ -150,11 +150,11 @@ pub(crate) trait BindInsteadOfMap {\n         }\n \n         match arg.kind {\n-            hir::ExprKind::Closure(_, _, body_id, closure_args_span, _) => {\n-                let closure_body = cx.tcx.hir().body(body_id);\n+            hir::ExprKind::Closure { body, fn_decl_span, .. } => {\n+                let closure_body = cx.tcx.hir().body(body);\n                 let closure_expr = peel_blocks(&closure_body.value);\n \n-                if Self::lint_closure_autofixable(cx, expr, recv, closure_expr, closure_args_span) {\n+                if Self::lint_closure_autofixable(cx, expr, recv, closure_expr, fn_decl_span) {\n                     true\n                 } else {\n                     Self::lint_closure(cx, expr, closure_expr)"}, {"sha": "58c3e52e138c4ae594a35bde1d63fe912d685a49", "filename": "clippy_lints/src/methods/filter_map.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map.rs?ref=d7b5cbf065b88830ca519adcb73fad4c0d24b1c7", "patch": "@@ -22,8 +22,8 @@ fn is_method<'tcx>(cx: &LateContext<'tcx>, expr: &hir::Expr<'_>, method_name: Sy\n         hir::ExprKind::Path(QPath::Resolved(_, segments)) => {\n             segments.segments.last().unwrap().ident.name == method_name\n         },\n-        hir::ExprKind::Closure(_, _, c, _, _) => {\n-            let body = cx.tcx.hir().body(*c);\n+        hir::ExprKind::Closure { body, .. } => {\n+            let body = cx.tcx.hir().body(*body);\n             let closure_expr = peel_blocks(&body.value);\n             let arg_id = body.params[0].pat.hir_id;\n             match closure_expr.kind {\n@@ -106,7 +106,7 @@ pub(super) fn check<'tcx>(\n             if is_trait_method(cx, map_recv, sym::Iterator);\n \n             // filter(|x| ...is_some())...\n-            if let ExprKind::Closure(_, _, filter_body_id, ..) = filter_arg.kind;\n+            if let ExprKind::Closure { body: filter_body_id, .. } = filter_arg.kind;\n             let filter_body = cx.tcx.hir().body(filter_body_id);\n             if let [filter_param] = filter_body.params;\n             // optional ref pattern: `filter(|&x| ..)`\n@@ -129,7 +129,7 @@ pub(super) fn check<'tcx>(\n             if path.ident.name.as_str() == if is_result { \"is_ok\" } else { \"is_some\" };\n \n             // ...map(|x| ...unwrap())\n-            if let ExprKind::Closure(_, _, map_body_id, ..) = map_arg.kind;\n+            if let ExprKind::Closure { body: map_body_id, .. } = map_arg.kind;\n             let map_body = cx.tcx.hir().body(map_body_id);\n             if let [map_param] = map_body.params;\n             if let PatKind::Binding(_, map_param_id, map_param_ident, None) = map_param.pat.kind;"}, {"sha": "912499bf96b94457d603aff4131c8791f22a2b0d", "filename": "clippy_lints/src/methods/option_as_ref_deref.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_lints%2Fsrc%2Fmethods%2Foption_as_ref_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_lints%2Fsrc%2Fmethods%2Foption_as_ref_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Foption_as_ref_deref.rs?ref=d7b5cbf065b88830ca519adcb73fad4c0d24b1c7", "patch": "@@ -51,8 +51,8 @@ pub(super) fn check<'tcx>(\n             .map_or(false, |fun_def_id| {\n                 deref_aliases.iter().any(|path| match_def_path(cx, fun_def_id, path))\n             }),\n-        hir::ExprKind::Closure(_, _, body_id, _, _) => {\n-            let closure_body = cx.tcx.hir().body(body_id);\n+        hir::ExprKind::Closure { body, .. } => {\n+            let closure_body = cx.tcx.hir().body(body);\n             let closure_expr = peel_blocks(&closure_body.value);\n \n             match &closure_expr.kind {"}, {"sha": "2d71bd6f240fc14bd9ccced4d3f2162d749b1635", "filename": "clippy_lints/src/methods/option_map_or_none.rs", "status": "modified", "additions": 20, "deletions": 21, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_lints%2Fsrc%2Fmethods%2Foption_map_or_none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_lints%2Fsrc%2Fmethods%2Foption_map_or_none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Foption_map_or_none.rs?ref=d7b5cbf065b88830ca519adcb73fad4c0d24b1c7", "patch": "@@ -71,27 +71,26 @@ pub(super) fn check<'tcx>(\n     if is_option {\n         let self_snippet = snippet(cx, recv.span, \"..\");\n         if_chain! {\n-        if let hir::ExprKind::Closure(_, _, id, span, _) = map_arg.kind;\n-            let arg_snippet = snippet(cx, span, \"..\");\n-            let body = cx.tcx.hir().body(id);\n-                if let Some((func, [arg_char])) = reduce_unit_expression(&body.value);\n-                if let Some(id) = path_def_id(cx, func).map(|ctor_id| cx.tcx.parent(ctor_id));\n-                if Some(id) == cx.tcx.lang_items().option_some_variant();\n-                then {\n-                    let func_snippet = snippet(cx, arg_char.span, \"..\");\n-                    let msg = \"called `map_or(None, ..)` on an `Option` value. This can be done more directly by calling \\\n-                       `map(..)` instead\";\n-                    return span_lint_and_sugg(\n-                        cx,\n-                        OPTION_MAP_OR_NONE,\n-                        expr.span,\n-                        msg,\n-                        \"try using `map` instead\",\n-                        format!(\"{0}.map({1} {2})\", self_snippet, arg_snippet,func_snippet),\n-                        Applicability::MachineApplicable,\n-                    );\n-                }\n-\n+            if let hir::ExprKind::Closure { body, fn_decl_span, .. } = map_arg.kind;\n+            let arg_snippet = snippet(cx, fn_decl_span, \"..\");\n+            let body = cx.tcx.hir().body(body);\n+            if let Some((func, [arg_char])) = reduce_unit_expression(&body.value);\n+            if let Some(id) = path_def_id(cx, func).map(|ctor_id| cx.tcx.parent(ctor_id));\n+            if Some(id) == cx.tcx.lang_items().option_some_variant();\n+            then {\n+                let func_snippet = snippet(cx, arg_char.span, \"..\");\n+                let msg = \"called `map_or(None, ..)` on an `Option` value. This can be done more directly by calling \\\n+                   `map(..)` instead\";\n+                return span_lint_and_sugg(\n+                    cx,\n+                    OPTION_MAP_OR_NONE,\n+                    expr.span,\n+                    msg,\n+                    \"try using `map` instead\",\n+                    format!(\"{0}.map({1} {2})\", self_snippet, arg_snippet,func_snippet),\n+                    Applicability::MachineApplicable,\n+                );\n+            }\n         }\n \n         let func_snippet = snippet(cx, map_arg.span, \"..\");"}, {"sha": "b11f4531a912c006c27e04bd2bf7d6bdd6155a26", "filename": "clippy_lints/src/methods/search_is_some.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_lints%2Fsrc%2Fmethods%2Fsearch_is_some.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_lints%2Fsrc%2Fmethods%2Fsearch_is_some.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fsearch_is_some.rs?ref=d7b5cbf065b88830ca519adcb73fad4c0d24b1c7", "patch": "@@ -41,8 +41,8 @@ pub(super) fn check<'tcx>(\n             let mut applicability = Applicability::MachineApplicable;\n             let any_search_snippet = if_chain! {\n                 if search_method == \"find\";\n-                if let hir::ExprKind::Closure(_, _, body_id, ..) = search_arg.kind;\n-                let closure_body = cx.tcx.hir().body(body_id);\n+                if let hir::ExprKind::Closure { body, .. } = search_arg.kind;\n+                let closure_body = cx.tcx.hir().body(body);\n                 if let Some(closure_arg) = closure_body.params.get(0);\n                 then {\n                     if let hir::PatKind::Ref(..) = closure_arg.pat.kind {"}, {"sha": "4ac738272d08523c53f925100eafe8143173701e", "filename": "clippy_lints/src/methods/str_splitn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_lints%2Fsrc%2Fmethods%2Fstr_splitn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_lints%2Fsrc%2Fmethods%2Fstr_splitn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fstr_splitn.rs?ref=d7b5cbf065b88830ca519adcb73fad4c0d24b1c7", "patch": "@@ -176,13 +176,13 @@ fn check_manual_split_once_indirect(\n             diag.span_suggestion(\n                 first.span,\n                 &remove_msg,\n-                String::new(),\n+                \"\",\n                 app,\n             );\n             diag.span_suggestion(\n                 second.span,\n                 &remove_msg,\n-                String::new(),\n+                \"\",\n                 app,\n             );\n         });"}, {"sha": "a405467f5e8af3e55f3b9a4209ec559f2615c163", "filename": "clippy_lints/src/methods/unnecessary_filter_map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs?ref=d7b5cbf065b88830ca519adcb73fad4c0d24b1c7", "patch": "@@ -18,8 +18,8 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, arg: &hir::Expr<\n         return;\n     }\n \n-    if let hir::ExprKind::Closure(_, _, body_id, ..) = arg.kind {\n-        let body = cx.tcx.hir().body(body_id);\n+    if let hir::ExprKind::Closure { body, .. } = arg.kind {\n+        let body = cx.tcx.hir().body(body);\n         let arg_id = body.params[0].pat.hir_id;\n         let mutates_arg =\n             mutated_variables(&body.value, cx).map_or(true, |used_mutably| used_mutably.contains(&arg_id));"}, {"sha": "913c4dbedc30113a2d193798954df144ca7d271c", "filename": "clippy_lints/src/methods/unnecessary_fold.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_fold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_fold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_fold.rs?ref=d7b5cbf065b88830ca519adcb73fad4c0d24b1c7", "patch": "@@ -29,8 +29,8 @@ pub(super) fn check(\n     ) {\n         if_chain! {\n             // Extract the body of the closure passed to fold\n-            if let hir::ExprKind::Closure(_, _, body_id, _, _) = acc.kind;\n-            let closure_body = cx.tcx.hir().body(body_id);\n+            if let hir::ExprKind::Closure { body, .. } = acc.kind;\n+            let closure_body = cx.tcx.hir().body(body);\n             let closure_expr = peel_blocks(&closure_body.value);\n \n             // Check if the closure body is of the form `acc <op> some_expr(x)`"}, {"sha": "19037093e20a1be9da01d7fea78aabe139f13c6a", "filename": "clippy_lints/src/methods/unnecessary_iter_cloned.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_iter_cloned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_iter_cloned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_iter_cloned.rs?ref=d7b5cbf065b88830ca519adcb73fad4c0d24b1c7", "patch": "@@ -85,7 +85,7 @@ pub fn check_for_loop_iter(\n                         match addr_of_expr.kind {\n                             ExprKind::AddrOf(_, _, referent) => {\n                                 let span = addr_of_expr.span.with_hi(referent.span.lo());\n-                                diag.span_suggestion(span, \"remove this `&`\", String::new(), applicability);\n+                                diag.span_suggestion(span, \"remove this `&`\", \"\", applicability);\n                             }\n                             _ => unreachable!(),\n                         }"}, {"sha": "865f6d0318eb9451c95b0e3bd40b9f667d419c14", "filename": "clippy_lints/src/methods/unnecessary_lazy_eval.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_lazy_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_lazy_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_lazy_eval.rs?ref=d7b5cbf065b88830ca519adcb73fad4c0d24b1c7", "patch": "@@ -22,8 +22,8 @@ pub(super) fn check<'tcx>(\n     let is_result = is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(recv), sym::Result);\n \n     if is_option || is_result {\n-        if let hir::ExprKind::Closure(_, _, eid, _, _) = arg.kind {\n-            let body = cx.tcx.hir().body(eid);\n+        if let hir::ExprKind::Closure { body, .. } = arg.kind {\n+            let body = cx.tcx.hir().body(body);\n             let body_expr = &body.value;\n \n             if usage::BindingUsageFinder::are_params_used(cx, body) {"}, {"sha": "a2419c277e9c27d2b270961e6c860c99f306ffe3", "filename": "clippy_lints/src/mixed_read_write_in_expression.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_lints%2Fsrc%2Fmixed_read_write_in_expression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_lints%2Fsrc%2Fmixed_read_write_in_expression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmixed_read_write_in_expression.rs?ref=d7b5cbf065b88830ca519adcb73fad4c0d24b1c7", "patch": "@@ -114,7 +114,7 @@ struct DivergenceVisitor<'a, 'tcx> {\n impl<'a, 'tcx> DivergenceVisitor<'a, 'tcx> {\n     fn maybe_walk_expr(&mut self, e: &'tcx Expr<'_>) {\n         match e.kind {\n-            ExprKind::Closure(..) => {},\n+            ExprKind::Closure { .. } => {},\n             ExprKind::Match(e, arms, _) => {\n                 self.visit_expr(e);\n                 for arm in arms {\n@@ -245,7 +245,7 @@ fn check_expr<'a, 'tcx>(vis: &mut ReadVisitor<'a, 'tcx>, expr: &'tcx Expr<'_>) -\n                 walk_expr(vis, expr);\n             }\n         },\n-        ExprKind::Closure(_, _, _, _, _) => {\n+        ExprKind::Closure { .. } => {\n             // Either\n             //\n             // * `var` is defined in the closure body, in which case we've reached the top of the enclosing\n@@ -317,7 +317,7 @@ impl<'a, 'tcx> Visitor<'tcx> for ReadVisitor<'a, 'tcx> {\n             // We're about to descend a closure. Since we don't know when (or\n             // if) the closure will be evaluated, any reads in it might not\n             // occur here (or ever). Like above, bail to avoid false positives.\n-            ExprKind::Closure(_, _, _, _, _) |\n+            ExprKind::Closure{..} |\n \n             // We want to avoid a false positive when a variable name occurs\n             // only to have its address taken, so we stop here. Technically,"}, {"sha": "48ac695f2acfb67813675b217eb17ea08cba4d33", "filename": "clippy_lints/src/needless_for_each.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_lints%2Fsrc%2Fneedless_for_each.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_lints%2Fsrc%2Fneedless_for_each.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_for_each.rs?ref=d7b5cbf065b88830ca519adcb73fad4c0d24b1c7", "patch": "@@ -72,8 +72,8 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessForEach {\n             if has_iter_method(cx, cx.typeck_results().expr_ty(iter_recv)).is_some();\n             // Skip the lint if the body is not block because this is simpler than `for` loop.\n             // e.g. `v.iter().for_each(f)` is simpler and clearer than using `for` loop.\n-            if let ExprKind::Closure(_, _, body_id, ..) = for_each_arg.kind;\n-            let body = cx.tcx.hir().body(body_id);\n+            if let ExprKind::Closure { body, .. } = for_each_arg.kind;\n+            let body = cx.tcx.hir().body(body);\n             if let ExprKind::Block(..) = body.value.kind;\n             then {\n                 let mut ret_collector = RetCollector::default();"}, {"sha": "ff2999b1f4a51da2137295baa6ad007c06348322", "filename": "clippy_lints/src/needless_late_init.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_lints%2Fsrc%2Fneedless_late_init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_lints%2Fsrc%2Fneedless_late_init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_late_init.rs?ref=d7b5cbf065b88830ca519adcb73fad4c0d24b1c7", "patch": "@@ -281,7 +281,7 @@ fn check<'tcx>(\n                     diag.tool_only_span_suggestion(\n                         local_stmt.span,\n                         \"remove the local\",\n-                        String::new(),\n+                        \"\",\n                         Applicability::MachineApplicable,\n                     );\n \n@@ -318,7 +318,7 @@ fn check<'tcx>(\n                         diag.span_suggestion(\n                             usage.stmt.span.shrink_to_hi(),\n                             \"add a semicolon after the `if` expression\",\n-                            \";\".to_string(),\n+                            \";\",\n                             applicability,\n                         );\n                     }\n@@ -353,7 +353,7 @@ fn check<'tcx>(\n                         diag.span_suggestion(\n                             usage.stmt.span.shrink_to_hi(),\n                             \"add a semicolon after the `match` expression\",\n-                            \";\".to_string(),\n+                            \";\",\n                             applicability,\n                         );\n                     }"}, {"sha": "8b273aca7d020f68a6ba889c288ab6b8d668db82", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=d7b5cbf065b88830ca519adcb73fad4c0d24b1c7", "patch": "@@ -258,7 +258,7 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessPassByValue {\n                                 diag.span_suggestion(\n                                     input.span,\n                                     \"consider changing the type to\",\n-                                    \"&str\".to_string(),\n+                                    \"&str\",\n                                     Applicability::Unspecified,\n                                 );\n "}, {"sha": "6598413c77eccc7733f1b21c6649943c5ffa1391", "filename": "clippy_lints/src/no_effect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_lints%2Fsrc%2Fno_effect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_lints%2Fsrc%2Fno_effect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fno_effect.rs?ref=d7b5cbf065b88830ca519adcb73fad4c0d24b1c7", "patch": "@@ -116,7 +116,7 @@ fn has_no_effect(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n         return false;\n     }\n     match peel_blocks(expr).kind {\n-        ExprKind::Lit(..) | ExprKind::Closure(..) => true,\n+        ExprKind::Lit(..) | ExprKind::Closure { .. } => true,\n         ExprKind::Path(..) => !has_drop(cx, cx.typeck_results().expr_ty(expr)),\n         ExprKind::Index(a, b) | ExprKind::Binary(_, a, b) => has_no_effect(cx, a) && has_no_effect(cx, b),\n         ExprKind::Array(v) | ExprKind::Tup(v) => v.iter().all(|val| has_no_effect(cx, val)),"}, {"sha": "1727275a4e06a68014f102f7a797cbdbd69b9662", "filename": "clippy_lints/src/non_copy_const.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_copy_const.rs?ref=d7b5cbf065b88830ca519adcb73fad4c0d24b1c7", "patch": "@@ -13,9 +13,10 @@ use rustc_hir::{\n     BodyId, Expr, ExprKind, HirId, Impl, ImplItem, ImplItemKind, Item, ItemKind, Node, TraitItem, TraitItemKind, UnOp,\n };\n use rustc_lint::{LateContext, LateLintPass, Lint};\n+use rustc_middle::mir;\n use rustc_middle::mir::interpret::{ConstValue, ErrorHandled};\n use rustc_middle::ty::adjustment::Adjust;\n-use rustc_middle::ty::{self, Const, Ty};\n+use rustc_middle::ty::{self, Ty};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::{InnerSpan, Span, DUMMY_SP};\n use rustc_typeck::hir_ty_to_ty;\n@@ -142,19 +143,18 @@ fn is_value_unfrozen_raw<'tcx>(\n     result: Result<ConstValue<'tcx>, ErrorHandled>,\n     ty: Ty<'tcx>,\n ) -> bool {\n-    fn inner<'tcx>(cx: &LateContext<'tcx>, val: Const<'tcx>) -> bool {\n+    fn inner<'tcx>(cx: &LateContext<'tcx>, val: mir::ConstantKind<'tcx>) -> bool {\n         match val.ty().kind() {\n             // the fact that we have to dig into every structs to search enums\n             // leads us to the point checking `UnsafeCell` directly is the only option.\n             ty::Adt(ty_def, ..) if Some(ty_def.did()) == cx.tcx.lang_items().unsafe_cell_type() => true,\n             ty::Array(..) | ty::Adt(..) | ty::Tuple(..) => {\n-                let val = cx.tcx.destructure_const(cx.param_env.and(val));\n+                let val = cx.tcx.destructure_mir_constant(cx.param_env, val);\n                 val.fields.iter().any(|field| inner(cx, *field))\n             },\n             _ => false,\n         }\n     }\n-\n     result.map_or_else(\n         |err| {\n             // Consider `TooGeneric` cases as being unfrozen.\n@@ -180,7 +180,7 @@ fn is_value_unfrozen_raw<'tcx>(\n             // I chose this way because unfrozen enums as assoc consts are rare (or, hopefully, none).\n             err == ErrorHandled::TooGeneric\n         },\n-        |val| inner(cx, Const::from_value(cx.tcx, val, ty)),\n+        |val| inner(cx, mir::ConstantKind::from_value(val, ty)),\n     )\n }\n "}, {"sha": "677ac998b56825741e2df8dd8a751c8c53bff432", "filename": "clippy_lints/src/only_used_in_recursion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_lints%2Fsrc%2Fonly_used_in_recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_lints%2Fsrc%2Fonly_used_in_recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fonly_used_in_recursion.rs?ref=d7b5cbf065b88830ca519adcb73fad4c0d24b1c7", "patch": "@@ -298,8 +298,8 @@ impl<'tcx> Visitor<'tcx> for SideEffectVisit<'tcx> {\n             },\n             ExprKind::Match(expr, arms, _) => self.visit_match(expr, arms),\n             // since analysing the closure is not easy, just set all variables in it to side-effect\n-            ExprKind::Closure(_, _, body_id, _, _) => {\n-                let body = self.tcx.hir().body(body_id);\n+            ExprKind::Closure { body, .. } => {\n+                let body = self.tcx.hir().body(body);\n                 self.visit_body(body);\n                 let vars = std::mem::take(&mut self.ret_vars);\n                 self.add_side_effect(vars);"}, {"sha": "3b11cbc3760622f9415e8fe6fa8726bad1361548", "filename": "clippy_lints/src/redundant_clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_lints%2Fsrc%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_lints%2Fsrc%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_clone.rs?ref=d7b5cbf065b88830ca519adcb73fad4c0d24b1c7", "patch": "@@ -255,7 +255,7 @@ impl<'tcx> LateLintPass<'tcx> for RedundantClone {\n                         diag.span_suggestion(\n                             sugg_span,\n                             \"remove this\",\n-                            String::new(),\n+                            \"\",\n                             app,\n                         );\n                         if clone_usage.cloned_used {"}, {"sha": "65ed798867d19f7b9ccd6400159f74bc01da223d", "filename": "clippy_lints/src/redundant_closure_call.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_lints%2Fsrc%2Fredundant_closure_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_lints%2Fsrc%2Fredundant_closure_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_closure_call.rs?ref=d7b5cbf065b88830ca519adcb73fad4c0d24b1c7", "patch": "@@ -135,7 +135,7 @@ impl<'tcx> LateLintPass<'tcx> for RedundantClosureCall {\n             if_chain! {\n                 if let hir::StmtKind::Local(local) = w[0].kind;\n                 if let Option::Some(t) = local.init;\n-                if let hir::ExprKind::Closure(..) = t.kind;\n+                if let hir::ExprKind::Closure { .. } = t.kind;\n                 if let hir::PatKind::Binding(_, _, ident, _) = local.pat.kind;\n                 if let hir::StmtKind::Semi(second) = w[1].kind;\n                 if let hir::ExprKind::Assign(_, call, _) = second.kind;"}, {"sha": "1bde977cfa273ba963df6b84077158bb25e41fda", "filename": "clippy_lints/src/transmute/transmute_float_to_int.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_float_to_int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_float_to_int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_float_to_int.rs?ref=d7b5cbf065b88830ca519adcb73fad4c0d24b1c7", "patch": "@@ -55,7 +55,7 @@ pub(super) fn check<'tcx>(\n                         sugg\n                     };\n \n-                    diag.span_suggestion(e.span, \"consider using\", sugg.to_string(), Applicability::Unspecified);\n+                    diag.span_suggestion(e.span, \"consider using\", sugg, Applicability::Unspecified);\n                 },\n             );\n             true"}, {"sha": "31a9b69ca15838ad4e4b7719ee52615c2e4a1e81", "filename": "clippy_lints/src/transmute/transmute_ptr_to_ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_ptr_to_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_ptr_to_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_ptr_to_ptr.rs?ref=d7b5cbf065b88830ca519adcb73fad4c0d24b1c7", "patch": "@@ -25,7 +25,7 @@ pub(super) fn check<'tcx>(\n                 |diag| {\n                     if let Some(arg) = sugg::Sugg::hir_opt(cx, arg) {\n                         let sugg = arg.as_ty(cx.tcx.mk_ptr(*to_ty));\n-                        diag.span_suggestion(e.span, \"try\", sugg.to_string(), Applicability::Unspecified);\n+                        diag.span_suggestion(e.span, \"try\", sugg, Applicability::Unspecified);\n                     }\n                 },\n             );"}, {"sha": "707a11d361c06d6259a4ae4db9942f8ad47896d5", "filename": "clippy_lints/src/transmute/transmute_ref_to_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_ref_to_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_ref_to_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_ref_to_ref.rs?ref=d7b5cbf065b88830ca519adcb73fad4c0d24b1c7", "patch": "@@ -73,7 +73,7 @@ pub(super) fn check<'tcx>(\n                             diag.span_suggestion(\n                                 e.span,\n                                 \"try\",\n-                                sugg.to_string(),\n+                                sugg,\n                                 Applicability::Unspecified,\n                             );\n                         },"}, {"sha": "8ea985a89843151555516b5ea02f85d32e4211e2", "filename": "clippy_lints/src/transmute/useless_transmute.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_lints%2Fsrc%2Ftransmute%2Fuseless_transmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_lints%2Fsrc%2Ftransmute%2Fuseless_transmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Fuseless_transmute.rs?ref=d7b5cbf065b88830ca519adcb73fad4c0d24b1c7", "patch": "@@ -46,7 +46,7 @@ pub(super) fn check<'tcx>(\n                                 arg.as_ty(cx.tcx.mk_ptr(rty_and_mut)).as_ty(to_ty)\n                             };\n \n-                            diag.span_suggestion(e.span, \"try\", sugg.to_string(), Applicability::Unspecified);\n+                            diag.span_suggestion(e.span, \"try\", sugg, Applicability::Unspecified);\n                         }\n                     },\n                 );\n@@ -61,12 +61,7 @@ pub(super) fn check<'tcx>(\n                 \"transmute from an integer to a pointer\",\n                 |diag| {\n                     if let Some(arg) = sugg::Sugg::hir_opt(cx, arg) {\n-                        diag.span_suggestion(\n-                            e.span,\n-                            \"try\",\n-                            arg.as_ty(&to_ty.to_string()).to_string(),\n-                            Applicability::Unspecified,\n-                        );\n+                        diag.span_suggestion(e.span, \"try\", arg.as_ty(&to_ty.to_string()), Applicability::Unspecified);\n                     }\n                 },\n             );"}, {"sha": "f58da7ce9b42078b9d48ef7e3dd524db3bf8bcad", "filename": "clippy_lints/src/unit_return_expecting_ord.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_lints%2Fsrc%2Funit_return_expecting_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_lints%2Fsrc%2Funit_return_expecting_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funit_return_expecting_ord.rs?ref=d7b5cbf065b88830ca519adcb73fad4c0d24b1c7", "patch": "@@ -116,13 +116,13 @@ fn get_args_to_check<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) -> Ve\n \n fn check_arg<'tcx>(cx: &LateContext<'tcx>, arg: &'tcx Expr<'tcx>) -> Option<(Span, Option<Span>)> {\n     if_chain! {\n-        if let ExprKind::Closure(_, _fn_decl, body_id, span, _) = arg.kind;\n+        if let ExprKind::Closure { body, fn_decl_span, .. } = arg.kind;\n         if let ty::Closure(_def_id, substs) = &cx.typeck_results().node_type(arg.hir_id).kind();\n         let ret_ty = substs.as_closure().sig().output();\n         let ty = cx.tcx.erase_late_bound_regions(ret_ty);\n         if ty.is_unit();\n         then {\n-            let body = cx.tcx.hir().body(body_id);\n+            let body = cx.tcx.hir().body(body);\n             if_chain! {\n                 if let ExprKind::Block(block, _) = body.value.kind;\n                 if block.expr.is_none();\n@@ -131,9 +131,9 @@ fn check_arg<'tcx>(cx: &LateContext<'tcx>, arg: &'tcx Expr<'tcx>) -> Option<(Spa\n                 then {\n                     let data = stmt.span.data();\n                     // Make a span out of the semicolon for the help message\n-                    Some((span, Some(data.with_lo(data.hi-BytePos(1)))))\n+                    Some((fn_decl_span, Some(data.with_lo(data.hi-BytePos(1)))))\n                 } else {\n-                    Some((span, None))\n+                    Some((fn_decl_span, None))\n                 }\n             }\n         } else {"}, {"sha": "27678c8ba3c469af9d7af04de25d90bb3c6639e6", "filename": "clippy_lints/src/unit_types/let_unit_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_lints%2Fsrc%2Funit_types%2Flet_unit_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_lints%2Fsrc%2Funit_types%2Flet_unit_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funit_types%2Flet_unit_value.rs?ref=d7b5cbf065b88830ca519adcb73fad4c0d24b1c7", "patch": "@@ -7,7 +7,7 @@ use rustc_hir::def::{DefKind, Res};\n use rustc_hir::{Expr, ExprKind, PatKind, Stmt, StmtKind};\n use rustc_lint::{LateContext, LintContext};\n use rustc_middle::lint::in_external_macro;\n-use rustc_middle::ty::{self, Ty, TypeFoldable, TypeVisitor};\n+use rustc_middle::ty::{self, Ty, TypeFoldable, TypeSuperFoldable, TypeVisitor};\n \n use super::LET_UNIT_VALUE;\n "}, {"sha": "7d4373b2a57bcfcc6a651d5209c3f89a86c59cee", "filename": "clippy_lints/src/unnecessary_sort_by.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_lints%2Fsrc%2Funnecessary_sort_by.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_lints%2Fsrc%2Funnecessary_sort_by.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funnecessary_sort_by.rs?ref=d7b5cbf065b88830ca519adcb73fad4c0d24b1c7", "patch": "@@ -155,7 +155,7 @@ fn detect_lint(cx: &LateContext<'_>, expr: &Expr<'_>) -> Option<LintTrigger> {\n         if let ExprKind::MethodCall(name_ident, args, _) = &expr.kind;\n         if let name = name_ident.ident.name.to_ident_string();\n         if name == \"sort_by\" || name == \"sort_unstable_by\";\n-        if let [vec, Expr { kind: ExprKind::Closure(_, _, closure_body_id, _, _), .. }] = args;\n+        if let [vec, Expr { kind: ExprKind::Closure{ body: closure_body_id, .. }, .. }] = args;\n         if is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(vec), sym::Vec);\n         if let closure_body = cx.tcx.hir().body(*closure_body_id);\n         if let &["}, {"sha": "2c8820eb7e1a1faed0639c47926992c5e8136d2d", "filename": "clippy_lints/src/utils/author.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=d7b5cbf065b88830ca519adcb73fad4c0d24b1c7", "patch": "@@ -466,7 +466,13 @@ impl<'a, 'tcx> PrintVisitor<'a, 'tcx> {\n                 self.expr(scrutinee);\n                 self.slice(arms, |arm| self.arm(arm));\n             },\n-            ExprKind::Closure(capture_by, fn_decl, body_id, _, movability) => {\n+            ExprKind::Closure {\n+                capture_clause,\n+                fn_decl,\n+                body: body_id,\n+                movability,\n+                ..\n+            } => {\n                 let movability = OptionPat::new(movability.map(|m| format!(\"Movability::{m:?}\")));\n \n                 let ret_ty = match fn_decl.output {\n@@ -475,7 +481,7 @@ impl<'a, 'tcx> PrintVisitor<'a, 'tcx> {\n                 };\n \n                 bind!(self, fn_decl, body_id);\n-                kind!(\"Closure(CaptureBy::{capture_by:?}, {fn_decl}, {body_id}, _, {movability})\");\n+                kind!(\"Closure(CaptureBy::{capture_clause:?}, {fn_decl}, {body_id}, _, {movability})\");\n                 out!(\"if let {ret_ty} = {fn_decl}.output;\");\n                 self.body(body_id);\n             },"}, {"sha": "b885e5132f1ecd5303f106d21a26865402c90042", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=d7b5cbf065b88830ca519adcb73fad4c0d24b1c7", "patch": "@@ -664,8 +664,8 @@ impl<'tcx> LateLintPass<'tcx> for CollapsibleCalls {\n             if let ExprKind::Call(func, and_then_args) = expr.kind;\n             if is_expr_path_def_path(cx, func, &[\"clippy_utils\", \"diagnostics\", \"span_lint_and_then\"]);\n             if and_then_args.len() == 5;\n-            if let ExprKind::Closure(_, _, body_id, _, _) = &and_then_args[4].kind;\n-            let body = cx.tcx.hir().body(*body_id);\n+            if let ExprKind::Closure { body, .. } = &and_then_args[4].kind;\n+            let body = cx.tcx.hir().body(*body);\n             let only_expr = peel_blocks_with_stmt(&body.value);\n             if let ExprKind::MethodCall(ps, span_call_args, _) = &only_expr.kind;\n             then {"}, {"sha": "99e9e3275ab53e631bc7c99741e1d0ba359f4870", "filename": "clippy_lints/src/utils/internal_lints/metadata_collector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs?ref=d7b5cbf065b88830ca519adcb73fad4c0d24b1c7", "patch": "@@ -954,9 +954,9 @@ fn resolve_applicability<'hir>(cx: &LateContext<'hir>, expr: &'hir hir::Expr<'hi\n }\n \n fn check_is_multi_part<'hir>(cx: &LateContext<'hir>, closure_expr: &'hir hir::Expr<'hir>) -> bool {\n-    if let ExprKind::Closure(_, _, body_id, _, _) = closure_expr.kind {\n+    if let ExprKind::Closure { body, .. } = closure_expr.kind {\n         let mut scanner = IsMultiSpanScanner::new(cx);\n-        intravisit::walk_body(&mut scanner, cx.tcx.hir().body(body_id));\n+        intravisit::walk_body(&mut scanner, cx.tcx.hir().body(body));\n         return scanner.is_multi_part();\n     } else if let Some(local) = get_parent_local(cx, closure_expr) {\n         if let Some(local_init) = local.init {"}, {"sha": "186bba09d201238fac3cfc3beb9ab6900bd4c6c1", "filename": "clippy_utils/src/attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_utils%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_utils%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fattrs.rs?ref=d7b5cbf065b88830ca519adcb73fad4c0d24b1c7", "patch": "@@ -92,7 +92,7 @@ pub fn get_attr<'a>(\n                                 diag.span_suggestion(\n                                     attr_segments[1].ident.span,\n                                     \"consider using\",\n-                                    new_name.to_string(),\n+                                    new_name,\n                                     Applicability::MachineApplicable,\n                                 );\n                                 diag.emit();"}, {"sha": "6d4a48b53de3c642f9560e81ed27bf003c02c5c1", "filename": "clippy_utils/src/consts.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_utils%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_utils%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fconsts.rs?ref=d7b5cbf065b88830ca519adcb73fad4c0d24b1c7", "patch": "@@ -7,6 +7,7 @@ use rustc_data_structures::sync::Lrc;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::{BinOp, BinOpKind, Block, Expr, ExprKind, HirId, Item, ItemKind, Node, QPath, UnOp};\n use rustc_lint::LateContext;\n+use rustc_middle::mir;\n use rustc_middle::mir::interpret::Scalar;\n use rustc_middle::ty::subst::{Subst, SubstsRef};\n use rustc_middle::ty::{self, EarlyBinder, FloatTy, ScalarInt, Ty, TyCtxt};\n@@ -429,8 +430,8 @@ impl<'a, 'tcx> ConstEvalLateContext<'a, 'tcx> {\n                         None,\n                     )\n                     .ok()\n-                    .map(|val| rustc_middle::ty::Const::from_value(self.lcx.tcx, val, ty))?;\n-                let result = miri_to_const(result);\n+                    .map(|val| rustc_middle::mir::ConstantKind::from_value(val, ty))?;\n+                let result = miri_to_const(self.lcx.tcx, result);\n                 if result.is_some() {\n                     self.needed_resolution = true;\n                 }\n@@ -580,10 +581,10 @@ impl<'a, 'tcx> ConstEvalLateContext<'a, 'tcx> {\n     }\n }\n \n-pub fn miri_to_const(result: ty::Const<'_>) -> Option<Constant> {\n+pub fn miri_to_const<'tcx>(tcx: TyCtxt<'tcx>, result: mir::ConstantKind<'tcx>) -> Option<Constant> {\n     use rustc_middle::mir::interpret::ConstValue;\n-    match result.val() {\n-        ty::ConstKind::Value(ConstValue::Scalar(Scalar::Int(int))) => {\n+    match result {\n+        mir::ConstantKind::Val(ConstValue::Scalar(Scalar::Int(int)), _) => {\n             match result.ty().kind() {\n                 ty::Bool => Some(Constant::Bool(int == ScalarInt::TRUE)),\n                 ty::Uint(_) | ty::Int(_) => Some(Constant::Int(int.assert_bits(int.size()))),\n@@ -603,7 +604,7 @@ pub fn miri_to_const(result: ty::Const<'_>) -> Option<Constant> {\n                 _ => None,\n             }\n         },\n-        ty::ConstKind::Value(ConstValue::Slice { data, start, end }) => match result.ty().kind() {\n+        mir::ConstantKind::Val(ConstValue::Slice { data, start, end }, _) => match result.ty().kind() {\n             ty::Ref(_, tam, _) => match tam.kind() {\n                 ty::Str => String::from_utf8(\n                     data.inner()\n@@ -616,12 +617,12 @@ pub fn miri_to_const(result: ty::Const<'_>) -> Option<Constant> {\n             },\n             _ => None,\n         },\n-        ty::ConstKind::Value(ConstValue::ByRef { alloc, offset: _ }) => match result.ty().kind() {\n+        mir::ConstantKind::Val(ConstValue::ByRef { alloc, offset: _ }, _) => match result.ty().kind() {\n             ty::Array(sub_type, len) => match sub_type.kind() {\n-                ty::Float(FloatTy::F32) => match miri_to_const(*len) {\n-                    Some(Constant::Int(len)) => alloc\n+                ty::Float(FloatTy::F32) => match len.to_valtree().try_to_machine_usize(tcx) {\n+                    Some(len) => alloc\n                         .inner()\n-                        .inspect_with_uninit_and_ptr_outside_interpreter(0..(4 * len as usize))\n+                        .inspect_with_uninit_and_ptr_outside_interpreter(0..(4 * usize::try_from(len).unwrap()))\n                         .to_owned()\n                         .chunks(4)\n                         .map(|chunk| {\n@@ -633,10 +634,10 @@ pub fn miri_to_const(result: ty::Const<'_>) -> Option<Constant> {\n                         .map(Constant::Vec),\n                     _ => None,\n                 },\n-                ty::Float(FloatTy::F64) => match miri_to_const(*len) {\n-                    Some(Constant::Int(len)) => alloc\n+                ty::Float(FloatTy::F64) => match len.to_valtree().try_to_machine_usize(tcx) {\n+                    Some(len) => alloc\n                         .inner()\n-                        .inspect_with_uninit_and_ptr_outside_interpreter(0..(8 * len as usize))\n+                        .inspect_with_uninit_and_ptr_outside_interpreter(0..(8 * usize::try_from(len).unwrap()))\n                         .to_owned()\n                         .chunks(8)\n                         .map(|chunk| {"}, {"sha": "730724b95b968277082b2f72c5fed88cc6645b1d", "filename": "clippy_utils/src/eager_or_lazy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_utils%2Fsrc%2Feager_or_lazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_utils%2Fsrc%2Feager_or_lazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Feager_or_lazy.rs?ref=d7b5cbf065b88830ca519adcb73fad4c0d24b1c7", "patch": "@@ -198,7 +198,7 @@ fn expr_eagerness<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) -> EagernessS\n                 | ExprKind::Let(..)\n                 | ExprKind::If(..)\n                 | ExprKind::Match(..)\n-                | ExprKind::Closure(..)\n+                | ExprKind::Closure { .. }\n                 | ExprKind::Field(..)\n                 | ExprKind::Path(_)\n                 | ExprKind::AddrOf(..)"}, {"sha": "af62c4afd5a5110c12df0e71844a778c2705cc4d", "filename": "clippy_utils/src/hir_utils.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_utils%2Fsrc%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_utils%2Fsrc%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fhir_utils.rs?ref=d7b5cbf065b88830ca519adcb73fad4c0d24b1c7", "patch": "@@ -622,10 +622,12 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n                 self.hash_expr(e);\n                 self.hash_ty(ty);\n             },\n-            ExprKind::Closure(cap, _, eid, _, _) => {\n-                std::mem::discriminant(&cap).hash(&mut self.s);\n+            ExprKind::Closure {\n+                capture_clause, body, ..\n+            } => {\n+                std::mem::discriminant(&capture_clause).hash(&mut self.s);\n                 // closures inherit TypeckResults\n-                self.hash_expr(&self.cx.tcx.hir().body(eid).value);\n+                self.hash_expr(&self.cx.tcx.hir().body(body).value);\n             },\n             ExprKind::Field(e, ref f) => {\n                 self.hash_expr(e);"}, {"sha": "73c1bdd0e3f4e3ccaf344f7b0f7252594a125163", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=d7b5cbf065b88830ca519adcb73fad4c0d24b1c7", "patch": "@@ -964,7 +964,7 @@ pub fn can_move_expr_to_closure<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'\n                         self.captures.entry(l).and_modify(|e| *e |= cap).or_insert(cap);\n                     }\n                 },\n-                ExprKind::Closure(..) => {\n+                ExprKind::Closure { .. } => {\n                     let closure_id = self.cx.tcx.hir().local_def_id(e.hir_id).to_def_id();\n                     for capture in self.cx.typeck_results().closure_min_captures_flattened(closure_id) {\n                         let local_id = match capture.place.base {\n@@ -1202,7 +1202,7 @@ pub fn get_enclosing_loop_or_closure<'tcx>(tcx: TyCtxt<'tcx>, expr: &Expr<'_>) -\n         match node {\n             Node::Expr(\n                 e @ Expr {\n-                    kind: ExprKind::Loop(..) | ExprKind::Closure(..),\n+                    kind: ExprKind::Loop(..) | ExprKind::Closure { .. },\n                     ..\n                 },\n             ) => return Some(e),\n@@ -1695,7 +1695,7 @@ pub fn get_async_fn_body<'tcx>(tcx: TyCtxt<'tcx>, body: &Body<'_>) -> Option<&'t\n         _,\n         &[\n             Expr {\n-                kind: ExprKind::Closure(_, _, body, _, _),\n+                kind: ExprKind::Closure { body, .. },\n                 ..\n             },\n         ],\n@@ -1782,7 +1782,7 @@ pub fn is_expr_identity_function(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool\n     }\n \n     match expr.kind {\n-        ExprKind::Closure(_, _, body_id, _, _) => is_body_identity_function(cx, cx.tcx.hir().body(body_id)),\n+        ExprKind::Closure { body, .. } => is_body_identity_function(cx, cx.tcx.hir().body(body)),\n         _ => path_def_id(cx, expr).map_or(false, |id| match_def_path(cx, id, &paths::CONVERT_IDENTITY)),\n     }\n }"}, {"sha": "4d21ba8bd1d16b2a38081c816e38eb5679862095", "filename": "clippy_utils/src/sugg.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_utils%2Fsrc%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_utils%2Fsrc%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fsugg.rs?ref=d7b5cbf065b88830ca519adcb73fad4c0d24b1c7", "patch": "@@ -134,7 +134,7 @@ impl<'a> Sugg<'a> {\n             | hir::ExprKind::Box(..)\n             | hir::ExprKind::If(..)\n             | hir::ExprKind::Let(..)\n-            | hir::ExprKind::Closure(..)\n+            | hir::ExprKind::Closure { .. }\n             | hir::ExprKind::Unary(..)\n             | hir::ExprKind::Match(..) => Sugg::MaybeParen(get_snippet(expr.span)),\n             hir::ExprKind::Continue(..)\n@@ -188,7 +188,7 @@ impl<'a> Sugg<'a> {\n         match expr.kind {\n             ast::ExprKind::AddrOf(..)\n             | ast::ExprKind::Box(..)\n-            | ast::ExprKind::Closure(..)\n+            | ast::ExprKind::Closure { .. }\n             | ast::ExprKind::If(..)\n             | ast::ExprKind::Let(..)\n             | ast::ExprKind::Unary(..)\n@@ -790,8 +790,8 @@ pub struct DerefClosure {\n ///\n /// note: this only works on single line immutable closures with exactly one input parameter.\n pub fn deref_closure_args<'tcx>(cx: &LateContext<'_>, closure: &'tcx hir::Expr<'_>) -> Option<DerefClosure> {\n-    if let hir::ExprKind::Closure(_, fn_decl, body_id, ..) = closure.kind {\n-        let closure_body = cx.tcx.hir().body(body_id);\n+    if let hir::ExprKind::Closure { fn_decl, body, .. } = closure.kind {\n+        let closure_body = cx.tcx.hir().body(body);\n         // is closure arg a type annotated double reference (i.e.: `|x: &&i32| ...`)\n         // a type annotation is present if param `kind` is different from `TyKind::Infer`\n         let closure_arg_is_type_annotated_double_ref = if let TyKind::Rptr(_, MutTy { ty, .. }) = fn_decl.inputs[0].kind"}, {"sha": "3af5dfb62f97e112fb6b8268f3e9f3b263375a78", "filename": "clippy_utils/src/usage.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_utils%2Fsrc%2Fusage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/clippy_utils%2Fsrc%2Fusage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fusage.rs?ref=d7b5cbf065b88830ca519adcb73fad4c0d24b1c7", "patch": "@@ -185,7 +185,7 @@ pub fn local_used_after_expr(cx: &LateContext<'_>, local_id: HirId, after: &Expr\n             matches!(\n                 node,\n                 Node::Expr(Expr {\n-                    kind: ExprKind::Loop(..) | ExprKind::Closure(..),\n+                    kind: ExprKind::Loop(..) | ExprKind::Closure { .. },\n                     ..\n                 })\n             )"}, {"sha": "6ad56aacf8c955b67c3d672c4ba17c98f08aeed9", "filename": "rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/rust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/rust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-toolchain?ref=d7b5cbf065b88830ca519adcb73fad4c0d24b1c7", "patch": "@@ -1,3 +1,3 @@\n [toolchain]\n-channel = \"nightly-2022-06-04\"\n+channel = \"nightly-2022-06-16\"\n components = [\"cargo\", \"llvm-tools-preview\", \"rust-src\", \"rust-std\", \"rustc\", \"rustc-dev\", \"rustfmt\"]"}, {"sha": "ae2cc2492f414e8c9c033f38f920e188dc171785", "filename": "tests/ui/auxiliary/proc_macro_attr.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/tests%2Fui%2Fauxiliary%2Fproc_macro_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/tests%2Fui%2Fauxiliary%2Fproc_macro_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauxiliary%2Fproc_macro_attr.rs?ref=d7b5cbf065b88830ca519adcb73fad4c0d24b1c7", "patch": "@@ -19,6 +19,11 @@ use syn::{\n     parse_quote, FnArg, ImplItem, ItemImpl, ItemTrait, Lifetime, Pat, PatIdent, PatType, Signature, TraitItem, Type,\n };\n \n+#[proc_macro_attribute]\n+pub fn dummy(_args: TokenStream, input: TokenStream) -> TokenStream {\n+    input\n+}\n+\n #[proc_macro_attribute]\n pub fn fake_async_trait(_args: TokenStream, input: TokenStream) -> TokenStream {\n     let mut item = parse_macro_input!(input as ItemTrait);"}, {"sha": "9cfcccf1e3cd9ebd95814779f73d20367192d575", "filename": "tests/ui/crashes/ice-6256.stderr", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/tests%2Fui%2Fcrashes%2Fice-6256.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/tests%2Fui%2Fcrashes%2Fice-6256.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-6256.stderr?ref=d7b5cbf065b88830ca519adcb73fad4c0d24b1c7", "patch": "@@ -1,18 +1,14 @@\n-error[E0308]: mismatched types\n-  --> $DIR/ice-6256.rs:13:28\n+error[E0521]: borrowed data escapes outside of closure\n+  --> $DIR/ice-6256.rs:13:26\n    |\n LL |     let f = |x: &dyn TT| x.func(); //[default]~ ERROR: mismatched types\n-   |                            ^^^^ lifetime mismatch\n-   |\n-   = note: expected reference `&(dyn TT + 'static)`\n-              found reference `&dyn TT`\n-note: the anonymous lifetime #1 defined here...\n-  --> $DIR/ice-6256.rs:13:13\n-   |\n-LL |     let f = |x: &dyn TT| x.func(); //[default]~ ERROR: mismatched types\n-   |             ^^^^^^^^^^^^^^^^^^^^^\n-   = note: ...does not necessarily outlive the static lifetime\n+   |              -  -        ^^^^^^^^\n+   |              |  |        |\n+   |              |  |        `x` escapes the closure body here\n+   |              |  |        argument requires that `'1` must outlive `'static`\n+   |              |  let's call the lifetime of this reference `'1`\n+   |              `x` is a reference that is only valid in the closure body\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0308`.\n+For more information about this error, try `rustc --explain E0521`."}, {"sha": "697412c00275e5178db7bcac8656e81eab5ae179", "filename": "tests/ui/empty_line_after_outer_attribute.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/tests%2Fui%2Fempty_line_after_outer_attribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/tests%2Fui%2Fempty_line_after_outer_attribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fempty_line_after_outer_attribute.rs?ref=d7b5cbf065b88830ca519adcb73fad4c0d24b1c7", "patch": "@@ -4,9 +4,6 @@\n #![feature(custom_inner_attributes)]\n #![rustfmt::skip]\n \n-#[macro_use]\n-extern crate clap;\n-\n #[macro_use]\n extern crate proc_macro_attr;\n \n@@ -113,10 +110,10 @@ pub trait Bazz {\n     }\n }\n \n-#[derive(clap::Parser)]\n-#[clap(after_help = \"This ia a help message.\n+#[derive(Clone, Copy)]\n+#[dummy(string = \"first line\n \n-You're welcome.\n+second line\n \")]\n pub struct Args;\n "}, {"sha": "594fca44a321071ac46cdc9ad5bcac5676f69218", "filename": "tests/ui/empty_line_after_outer_attribute.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/tests%2Fui%2Fempty_line_after_outer_attribute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d7b5cbf065b88830ca519adcb73fad4c0d24b1c7/tests%2Fui%2Fempty_line_after_outer_attribute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fempty_line_after_outer_attribute.stderr?ref=d7b5cbf065b88830ca519adcb73fad4c0d24b1c7", "patch": "@@ -1,5 +1,5 @@\n error: found an empty line after an outer attribute. Perhaps you forgot to add a `!` to make it an inner attribute?\n-  --> $DIR/empty_line_after_outer_attribute.rs:14:1\n+  --> $DIR/empty_line_after_outer_attribute.rs:11:1\n    |\n LL | / #[crate_type = \"lib\"]\n LL | |\n@@ -10,15 +10,15 @@ LL | | fn with_one_newline_and_comment() { assert!(true) }\n    = note: `-D clippy::empty-line-after-outer-attr` implied by `-D warnings`\n \n error: found an empty line after an outer attribute. Perhaps you forgot to add a `!` to make it an inner attribute?\n-  --> $DIR/empty_line_after_outer_attribute.rs:26:1\n+  --> $DIR/empty_line_after_outer_attribute.rs:23:1\n    |\n LL | / #[crate_type = \"lib\"]\n LL | |\n LL | | fn with_one_newline() { assert!(true) }\n    | |_\n \n error: found an empty line after an outer attribute. Perhaps you forgot to add a `!` to make it an inner attribute?\n-  --> $DIR/empty_line_after_outer_attribute.rs:31:1\n+  --> $DIR/empty_line_after_outer_attribute.rs:28:1\n    |\n LL | / #[crate_type = \"lib\"]\n LL | |\n@@ -27,23 +27,23 @@ LL | | fn with_two_newlines() { assert!(true) }\n    | |_\n \n error: found an empty line after an outer attribute. Perhaps you forgot to add a `!` to make it an inner attribute?\n-  --> $DIR/empty_line_after_outer_attribute.rs:38:1\n+  --> $DIR/empty_line_after_outer_attribute.rs:35:1\n    |\n LL | / #[crate_type = \"lib\"]\n LL | |\n LL | | enum Baz {\n    | |_\n \n error: found an empty line after an outer attribute. Perhaps you forgot to add a `!` to make it an inner attribute?\n-  --> $DIR/empty_line_after_outer_attribute.rs:46:1\n+  --> $DIR/empty_line_after_outer_attribute.rs:43:1\n    |\n LL | / #[crate_type = \"lib\"]\n LL | |\n LL | | struct Foo {\n    | |_\n \n error: found an empty line after an outer attribute. Perhaps you forgot to add a `!` to make it an inner attribute?\n-  --> $DIR/empty_line_after_outer_attribute.rs:54:1\n+  --> $DIR/empty_line_after_outer_attribute.rs:51:1\n    |\n LL | / #[crate_type = \"lib\"]\n LL | |"}]}