{"sha": "8d00a8d11ee0f0c08d1eff0a3fd33ca89ed6a535", "node_id": "C_kwDOAAsO6NoAKDhkMDBhOGQxMWVlMGYwYzA4ZDFlZmYwYTNmZDMzY2E4OWVkNmE1MzU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-04-25T19:06:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-04-25T19:06:33Z"}, "message": "Rollup merge of #110615 - WaffleLapkin:impl_tag, r=cjgillot\n\nAdd `impl_tag!` macro to implement `Tag` for tagged pointer easily\n\nr? `@Nilstrieb`\n\nThis should also lifts the need to think about safety from the callers (`impl_tag!` is robust (ish, see the macro issue)) and removes the possibility of making a \"weird\" `Tag` impl.", "tree": {"sha": "47c9cfb404b02aa9bbdc3b007c8302e717fdf983", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/47c9cfb404b02aa9bbdc3b007c8302e717fdf983"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d00a8d11ee0f0c08d1eff0a3fd33ca89ed6a535", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkSCS5CRBK7hj4Ov3rIwAAOo0IALM3jiL0I2V9BHssMKrFgil+\n++fN0V7DGB6hfWLkOdgcKOomUBiV28xpqYJdFAH1uux97sDqA3YYzD5oIr1G6KSr\nzI+VX08VOizxk1xH7y3/sifZioEFgToh6JoZ4y66LH4PrpIeRVgO0ShTL1WUtXhL\nHGmXJ/IEQWnMVKHfpi2CsymSH1AFpb06h0eU91EuoLJ2cabrNRdK19ZhkQ0mFIb9\nYgtHBbIkcrYVsRyrOWanyTzB1HF8kXjTlXxMnkvkCzlH2jd5GTl4nf5cE2u/5ppK\ns2o80t1fZFpNX3TULrP9opnwMGHE1PbjcZI4fIF0P/ZthwQL/GCKvIr3vUuH74U=\n=FDp2\n-----END PGP SIGNATURE-----\n", "payload": "tree 47c9cfb404b02aa9bbdc3b007c8302e717fdf983\nparent 297b2220667a6fb042abd412cdf51cf3fd9fce55\nparent bec7ce482458429471c1a4c1b50bcc3728297e5e\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1682449593 +0200\ncommitter GitHub <noreply@github.com> 1682449593 +0200\n\nRollup merge of #110615 - WaffleLapkin:impl_tag, r=cjgillot\n\nAdd `impl_tag!` macro to implement `Tag` for tagged pointer easily\n\nr? `@Nilstrieb`\n\nThis should also lifts the need to think about safety from the callers (`impl_tag!` is robust (ish, see the macro issue)) and removes the possibility of making a \"weird\" `Tag` impl.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d00a8d11ee0f0c08d1eff0a3fd33ca89ed6a535", "html_url": "https://github.com/rust-lang/rust/commit/8d00a8d11ee0f0c08d1eff0a3fd33ca89ed6a535", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d00a8d11ee0f0c08d1eff0a3fd33ca89ed6a535/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "297b2220667a6fb042abd412cdf51cf3fd9fce55", "url": "https://api.github.com/repos/rust-lang/rust/commits/297b2220667a6fb042abd412cdf51cf3fd9fce55", "html_url": "https://github.com/rust-lang/rust/commit/297b2220667a6fb042abd412cdf51cf3fd9fce55"}, {"sha": "bec7ce482458429471c1a4c1b50bcc3728297e5e", "url": "https://api.github.com/repos/rust-lang/rust/commits/bec7ce482458429471c1a4c1b50bcc3728297e5e", "html_url": "https://github.com/rust-lang/rust/commit/bec7ce482458429471c1a4c1b50bcc3728297e5e"}], "stats": {"total": 240, "additions": 211, "deletions": 29}, "files": [{"sha": "004017ec5f31a464a76d3671bd36eca613d8760f", "filename": "compiler/rustc_data_structures/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8d00a8d11ee0f0c08d1eff0a3fd33ca89ed6a535/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d00a8d11ee0f0c08d1eff0a3fd33ca89ed6a535/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs?ref=8d00a8d11ee0f0c08d1eff0a3fd33ca89ed6a535", "patch": "@@ -31,6 +31,7 @@\n #![feature(unwrap_infallible)]\n #![feature(strict_provenance)]\n #![feature(ptr_alignment_type)]\n+#![feature(macro_metavar_expr)]\n #![allow(rustc::default_hash_types)]\n #![allow(rustc::potential_query_instability)]\n #![deny(rustc::untranslatable_diagnostic)]"}, {"sha": "2914eece6796bd3892d7f6ea212e540a6245f156", "filename": "compiler/rustc_data_structures/src/tagged_ptr.rs", "status": "modified", "additions": 25, "deletions": 6, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/8d00a8d11ee0f0c08d1eff0a3fd33ca89ed6a535/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d00a8d11ee0f0c08d1eff0a3fd33ca89ed6a535/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr.rs?ref=8d00a8d11ee0f0c08d1eff0a3fd33ca89ed6a535", "patch": "@@ -24,6 +24,7 @@ use crate::aligned::Aligned;\n \n mod copy;\n mod drop;\n+mod impl_tag;\n \n pub use copy::CopyTaggedPtr;\n pub use drop::TaggedPtr;\n@@ -141,6 +142,30 @@ pub unsafe trait Tag: Copy {\n     unsafe fn from_usize(tag: usize) -> Self;\n }\n \n+/// Returns the number of bits available for use for tags in a pointer to `T`\n+/// (this is based on `T`'s alignment).\n+pub const fn bits_for<T: ?Sized + Aligned>() -> u32 {\n+    crate::aligned::align_of::<T>().as_nonzero().trailing_zeros()\n+}\n+\n+/// Returns the correct [`Tag::BITS`] constant for a set of tag values.\n+pub const fn bits_for_tags(mut tags: &[usize]) -> u32 {\n+    let mut bits = 0;\n+\n+    while let &[tag, ref rest @ ..] = tags {\n+        tags = rest;\n+\n+        // bits required to represent `tag`,\n+        // position of the most significant 1\n+        let b = usize::BITS - tag.leading_zeros();\n+        if b > bits {\n+            bits = b;\n+        }\n+    }\n+\n+    bits\n+}\n+\n unsafe impl<T: ?Sized + Aligned> Pointer for Box<T> {\n     const BITS: u32 = bits_for::<Self::Target>();\n \n@@ -221,12 +246,6 @@ unsafe impl<'a, T: 'a + ?Sized + Aligned> Pointer for &'a mut T {\n     }\n }\n \n-/// Returns the number of bits available for use for tags in a pointer to `T`\n-/// (this is based on `T`'s alignment).\n-pub const fn bits_for<T: ?Sized + Aligned>() -> u32 {\n-    crate::aligned::align_of::<T>().as_nonzero().trailing_zeros()\n-}\n-\n /// A tag type used in [`CopyTaggedPtr`] and [`TaggedPtr`] tests.\n #[derive(Copy, Clone, Debug, PartialEq, Eq)]\n #[cfg(test)]"}, {"sha": "cb7f7d318dc416316f73eac6a29ee59cce88e642", "filename": "compiler/rustc_data_structures/src/tagged_ptr/impl_tag.rs", "status": "added", "additions": 144, "deletions": 0, "changes": 144, "blob_url": "https://github.com/rust-lang/rust/blob/8d00a8d11ee0f0c08d1eff0a3fd33ca89ed6a535/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr%2Fimpl_tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d00a8d11ee0f0c08d1eff0a3fd33ca89ed6a535/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr%2Fimpl_tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr%2Fimpl_tag.rs?ref=8d00a8d11ee0f0c08d1eff0a3fd33ca89ed6a535", "patch": "@@ -0,0 +1,144 @@\n+/// Implements [`Tag`] for a given type.\n+///\n+/// You can use `impl_tag` on structs and enums.\n+/// You need to specify the type and all its possible values,\n+/// which can only be paths with optional fields.\n+///\n+/// [`Tag`]: crate::tagged_ptr::Tag\n+///\n+/// # Examples\n+///\n+/// Basic usage:\n+///\n+/// ```\n+/// #![feature(macro_metavar_expr)]\n+/// use rustc_data_structures::{impl_tag, tagged_ptr::Tag};\n+///\n+/// #[derive(Copy, Clone, PartialEq, Debug)]\n+/// enum SomeTag {\n+///     A,\n+///     B,\n+///     X { v: bool },\n+///     Y(bool, bool),\n+/// }\n+///\n+/// impl_tag! {\n+///     // The type for which the `Tag` will be implemented\n+///     impl Tag for SomeTag;\n+///     // You need to specify all possible tag values:\n+///     SomeTag::A, // 0\n+///     SomeTag::B, // 1\n+///     // For variants with fields, you need to specify the fields:\n+///     SomeTag::X { v: true  }, // 2\n+///     SomeTag::X { v: false }, // 3\n+///     // For tuple variants use named syntax:\n+///     SomeTag::Y { 0: true,  1: true  }, // 4\n+///     SomeTag::Y { 0: false, 1: true  }, // 5\n+///     SomeTag::Y { 0: true,  1: false }, // 6\n+///     SomeTag::Y { 0: false, 1: false }, // 7\n+/// }\n+///\n+/// // Tag values are assigned in order:\n+/// assert_eq!(SomeTag::A.into_usize(), 0);\n+/// assert_eq!(SomeTag::X { v: false }.into_usize(), 3);\n+/// assert_eq!(SomeTag::Y(false, true).into_usize(), 5);\n+///\n+/// assert_eq!(unsafe { SomeTag::from_usize(1) }, SomeTag::B);\n+/// assert_eq!(unsafe { SomeTag::from_usize(2) }, SomeTag::X { v: true });\n+/// assert_eq!(unsafe { SomeTag::from_usize(7) }, SomeTag::Y(false, false));\n+/// ```\n+///\n+/// Structs are supported:\n+///\n+/// ```\n+/// #![feature(macro_metavar_expr)]\n+/// # use rustc_data_structures::impl_tag;\n+/// #[derive(Copy, Clone)]\n+/// struct Flags { a: bool, b: bool }\n+///\n+/// impl_tag! {\n+///     impl Tag for Flags;\n+///     Flags { a: true,  b: true  },\n+///     Flags { a: false, b: true  },\n+///     Flags { a: true,  b: false },\n+///     Flags { a: false, b: false },\n+/// }\n+/// ```\n+///\n+/// Not specifying all values results in a compile error:\n+///\n+/// ```compile_fail,E0004\n+/// #![feature(macro_metavar_expr)]\n+/// # use rustc_data_structures::impl_tag;\n+/// #[derive(Copy, Clone)]\n+/// enum E {\n+///     A,\n+///     B,\n+/// }\n+///\n+/// impl_tag! {\n+///     impl Tag for E;\n+///     E::A,\n+/// }\n+/// ```\n+#[macro_export]\n+macro_rules! impl_tag {\n+    (\n+        impl Tag for $Self:ty;\n+        $(\n+            $($path:ident)::* $( { $( $fields:tt )* })?,\n+        )*\n+    ) => {\n+        // Safety:\n+        // `bits_for_tags` is called on the same `${index()}`-es as\n+        // `into_usize` returns, thus `BITS` constant is correct.\n+        unsafe impl $crate::tagged_ptr::Tag for $Self {\n+            const BITS: u32 = $crate::tagged_ptr::bits_for_tags(&[\n+                $(\n+                    ${index()},\n+                    $( ${ignore(path)} )*\n+                )*\n+            ]);\n+\n+            #[inline]\n+            fn into_usize(self) -> usize {\n+                // This forbids use of repeating patterns (`Enum::V`&`Enum::V`, etc)\n+                // (or at least it should, see <https://github.com/rust-lang/rust/issues/110613>)\n+                #[forbid(unreachable_patterns)]\n+                match self {\n+                    // `match` is doing heavy lifting here, by requiring exhaustiveness\n+                    $(\n+                        $($path)::* $( { $( $fields )* } )? => ${index()},\n+                    )*\n+                }\n+            }\n+\n+            #[inline]\n+            unsafe fn from_usize(tag: usize) -> Self {\n+                match tag {\n+                    $(\n+                        ${index()} => $($path)::* $( { $( $fields )* } )?,\n+                    )*\n+\n+                    // Safety:\n+                    // `into_usize` only returns `${index()}` of the same\n+                    // repetition as we are filtering above, thus if this is\n+                    // reached, the safety contract of this function was\n+                    // already breached.\n+                    _ => unsafe {\n+                        debug_assert!(\n+                            false,\n+                            \"invalid tag: {tag}\\\n+                             (this is a bug in the caller of `from_usize`)\"\n+                        );\n+                        std::hint::unreachable_unchecked()\n+                    },\n+                }\n+            }\n+\n+        }\n+    };\n+}\n+\n+#[cfg(test)]\n+mod tests;"}, {"sha": "62c926153e1e9f86fff3e438729bc0f3384ef742", "filename": "compiler/rustc_data_structures/src/tagged_ptr/impl_tag/tests.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/8d00a8d11ee0f0c08d1eff0a3fd33ca89ed6a535/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr%2Fimpl_tag%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d00a8d11ee0f0c08d1eff0a3fd33ca89ed6a535/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr%2Fimpl_tag%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr%2Fimpl_tag%2Ftests.rs?ref=8d00a8d11ee0f0c08d1eff0a3fd33ca89ed6a535", "patch": "@@ -0,0 +1,34 @@\n+#[test]\n+fn bits_constant() {\n+    use crate::tagged_ptr::Tag;\n+\n+    #[derive(Copy, Clone)]\n+    struct Unit;\n+    impl_tag! { impl Tag for Unit; Unit, }\n+    assert_eq!(Unit::BITS, 0);\n+\n+    #[derive(Copy, Clone)]\n+    enum Enum3 {\n+        A,\n+        B,\n+        C,\n+    }\n+    impl_tag! { impl Tag for Enum3; Enum3::A, Enum3::B, Enum3::C, }\n+    assert_eq!(Enum3::BITS, 2);\n+\n+    #[derive(Copy, Clone)]\n+    struct Eight(bool, bool, bool);\n+    impl_tag! {\n+        impl Tag for Eight;\n+        Eight { 0: true,  1: true,  2: true  },\n+        Eight { 0: true,  1: true,  2: false },\n+        Eight { 0: true,  1: false, 2: true  },\n+        Eight { 0: true,  1: false, 2: false },\n+        Eight { 0: false, 1: true,  2: true  },\n+        Eight { 0: false, 1: true,  2: false },\n+        Eight { 0: false, 1: false, 2: true  },\n+        Eight { 0: false, 1: false, 2: false },\n+    }\n+\n+    assert_eq!(Eight::BITS, 3);\n+}"}, {"sha": "e9172e767e0368f8a3ff176b835c83f4c7a4fd60", "filename": "compiler/rustc_middle/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8d00a8d11ee0f0c08d1eff0a3fd33ca89ed6a535/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d00a8d11ee0f0c08d1eff0a3fd33ca89ed6a535/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flib.rs?ref=8d00a8d11ee0f0c08d1eff0a3fd33ca89ed6a535", "patch": "@@ -60,6 +60,7 @@\n #![feature(const_option)]\n #![feature(trait_alias)]\n #![feature(ptr_alignment_type)]\n+#![feature(macro_metavar_expr)]\n #![recursion_limit = \"512\"]\n #![allow(rustc::potential_query_instability)]\n "}, {"sha": "7855749e586d06dca7d1c9236394daf9454080a3", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 6, "deletions": 23, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/8d00a8d11ee0f0c08d1eff0a3fd33ca89ed6a535/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d00a8d11ee0f0c08d1eff0a3fd33ca89ed6a535/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=8d00a8d11ee0f0c08d1eff0a3fd33ca89ed6a535", "patch": "@@ -1497,29 +1497,12 @@ struct ParamTag {\n     constness: hir::Constness,\n }\n \n-unsafe impl rustc_data_structures::tagged_ptr::Tag for ParamTag {\n-    const BITS: u32 = 2;\n-\n-    #[inline]\n-    fn into_usize(self) -> usize {\n-        match self {\n-            Self { reveal: traits::Reveal::UserFacing, constness: hir::Constness::NotConst } => 0,\n-            Self { reveal: traits::Reveal::All, constness: hir::Constness::NotConst } => 1,\n-            Self { reveal: traits::Reveal::UserFacing, constness: hir::Constness::Const } => 2,\n-            Self { reveal: traits::Reveal::All, constness: hir::Constness::Const } => 3,\n-        }\n-    }\n-\n-    #[inline]\n-    unsafe fn from_usize(ptr: usize) -> Self {\n-        match ptr {\n-            0 => Self { reveal: traits::Reveal::UserFacing, constness: hir::Constness::NotConst },\n-            1 => Self { reveal: traits::Reveal::All, constness: hir::Constness::NotConst },\n-            2 => Self { reveal: traits::Reveal::UserFacing, constness: hir::Constness::Const },\n-            3 => Self { reveal: traits::Reveal::All, constness: hir::Constness::Const },\n-            _ => std::hint::unreachable_unchecked(),\n-        }\n-    }\n+impl_tag! {\n+    impl Tag for ParamTag;\n+    ParamTag { reveal: traits::Reveal::UserFacing, constness: hir::Constness::NotConst },\n+    ParamTag { reveal: traits::Reveal::All,        constness: hir::Constness::NotConst },\n+    ParamTag { reveal: traits::Reveal::UserFacing, constness: hir::Constness::Const    },\n+    ParamTag { reveal: traits::Reveal::All,        constness: hir::Constness::Const    },\n }\n \n impl<'tcx> fmt::Debug for ParamEnv<'tcx> {"}]}