{"sha": "06d2325a50d55ab11e5f540d9b45d7bb0dcd8504", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2ZDIzMjVhNTBkNTVhYjExZTVmNTQwZDliNDVkN2JiMGRjZDg1MDQ=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-09-24T17:52:49Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-09-24T20:13:41Z"}, "message": "perf: split progress_obligations with inline(never)", "tree": {"sha": "706284898dc4b6bd5079a2cca014ec91721f6974", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/706284898dc4b6bd5079a2cca014ec91721f6974"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06d2325a50d55ab11e5f540d9b45d7bb0dcd8504", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06d2325a50d55ab11e5f540d9b45d7bb0dcd8504", "html_url": "https://github.com/rust-lang/rust/commit/06d2325a50d55ab11e5f540d9b45d7bb0dcd8504", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06d2325a50d55ab11e5f540d9b45d7bb0dcd8504/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45198456be60a6906d24abdc3c67a31b9206188e", "url": "https://api.github.com/repos/rust-lang/rust/commits/45198456be60a6906d24abdc3c67a31b9206188e", "html_url": "https://github.com/rust-lang/rust/commit/45198456be60a6906d24abdc3c67a31b9206188e"}], "stats": {"total": 45, "additions": 27, "deletions": 18}, "files": [{"sha": "7e5be8276f7ff74dff6e798e49e39194b018e60e", "filename": "compiler/rustc_trait_selection/src/traits/fulfill.rs", "status": "modified", "additions": 27, "deletions": 18, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/06d2325a50d55ab11e5f540d9b45d7bb0dcd8504/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06d2325a50d55ab11e5f540d9b45d7bb0dcd8504/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs?ref=06d2325a50d55ab11e5f540d9b45d7bb0dcd8504", "patch": "@@ -305,8 +305,34 @@ impl<'a, 'b, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'b, 'tcx> {\n             return ProcessResult::Unchanged;\n         }\n \n-        // This part of the code is much colder.\n+        self.progress_changed_obligations(pending_obligation)\n+    }\n \n+    fn process_backedge<'c, I>(\n+        &mut self,\n+        cycle: I,\n+        _marker: PhantomData<&'c PendingPredicateObligation<'tcx>>,\n+    ) where\n+        I: Clone + Iterator<Item = &'c PendingPredicateObligation<'tcx>>,\n+    {\n+        if self.selcx.coinductive_match(cycle.clone().map(|s| s.obligation.predicate)) {\n+            debug!(\"process_child_obligations: coinductive match\");\n+        } else {\n+            let cycle: Vec<_> = cycle.map(|c| c.obligation.clone()).collect();\n+            self.selcx.infcx().report_overflow_error_cycle(&cycle);\n+        }\n+    }\n+}\n+\n+impl<'a, 'b, 'tcx> FulfillProcessor<'a, 'b, 'tcx> {\n+    // The code calling this method is extremely hot and only rarely\n+    // actually uses this, so move this part of the code\n+    // out of that loop.\n+    #[inline(never)]\n+    fn progress_changed_obligations(\n+        &mut self,\n+        pending_obligation: &mut PendingPredicateObligation<'tcx>,\n+    ) -> ProcessResult<PendingPredicateObligation<'tcx>, FulfillmentErrorCode<'tcx>> {\n         pending_obligation.stalled_on.truncate(0);\n \n         let obligation = &mut pending_obligation.obligation;\n@@ -565,23 +591,6 @@ impl<'a, 'b, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'b, 'tcx> {\n         }\n     }\n \n-    fn process_backedge<'c, I>(\n-        &mut self,\n-        cycle: I,\n-        _marker: PhantomData<&'c PendingPredicateObligation<'tcx>>,\n-    ) where\n-        I: Clone + Iterator<Item = &'c PendingPredicateObligation<'tcx>>,\n-    {\n-        if self.selcx.coinductive_match(cycle.clone().map(|s| s.obligation.predicate)) {\n-            debug!(\"process_child_obligations: coinductive match\");\n-        } else {\n-            let cycle: Vec<_> = cycle.map(|c| c.obligation.clone()).collect();\n-            self.selcx.infcx().report_overflow_error_cycle(&cycle);\n-        }\n-    }\n-}\n-\n-impl<'a, 'b, 'tcx> FulfillProcessor<'a, 'b, 'tcx> {\n     fn process_trait_obligation(\n         &mut self,\n         obligation: &PredicateObligation<'tcx>,"}]}