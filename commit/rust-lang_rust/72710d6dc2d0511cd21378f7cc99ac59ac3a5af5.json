{"sha": "72710d6dc2d0511cd21378f7cc99ac59ac3a5af5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyNzEwZDZkYzJkMDUxMWNkMjEzNzhmN2NjOTlhYzU5YWMzYTVhZjU=", "commit": {"author": {"name": "Konstantinos Triantafyllou", "email": "ko.trian@gmail.com", "date": "2020-01-10T19:15:16Z"}, "committer": {"name": "Konstantinos Triantafyllou", "email": "ko.trian@gmail.com", "date": "2020-01-14T07:22:10Z"}, "message": "Add unreachable propagation mir optimization pass", "tree": {"sha": "3a953c7a1213c56976b37e7fa8e462c5bc5da789", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a953c7a1213c56976b37e7fa8e462c5bc5da789"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72710d6dc2d0511cd21378f7cc99ac59ac3a5af5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72710d6dc2d0511cd21378f7cc99ac59ac3a5af5", "html_url": "https://github.com/rust-lang/rust/commit/72710d6dc2d0511cd21378f7cc99ac59ac3a5af5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72710d6dc2d0511cd21378f7cc99ac59ac3a5af5/comments", "author": {"login": "ktrianta", "id": 1680882, "node_id": "MDQ6VXNlcjE2ODA4ODI=", "avatar_url": "https://avatars.githubusercontent.com/u/1680882?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktrianta", "html_url": "https://github.com/ktrianta", "followers_url": "https://api.github.com/users/ktrianta/followers", "following_url": "https://api.github.com/users/ktrianta/following{/other_user}", "gists_url": "https://api.github.com/users/ktrianta/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktrianta/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktrianta/subscriptions", "organizations_url": "https://api.github.com/users/ktrianta/orgs", "repos_url": "https://api.github.com/users/ktrianta/repos", "events_url": "https://api.github.com/users/ktrianta/events{/privacy}", "received_events_url": "https://api.github.com/users/ktrianta/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ktrianta", "id": 1680882, "node_id": "MDQ6VXNlcjE2ODA4ODI=", "avatar_url": "https://avatars.githubusercontent.com/u/1680882?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktrianta", "html_url": "https://github.com/ktrianta", "followers_url": "https://api.github.com/users/ktrianta/followers", "following_url": "https://api.github.com/users/ktrianta/following{/other_user}", "gists_url": "https://api.github.com/users/ktrianta/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktrianta/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktrianta/subscriptions", "organizations_url": "https://api.github.com/users/ktrianta/orgs", "repos_url": "https://api.github.com/users/ktrianta/repos", "events_url": "https://api.github.com/users/ktrianta/events{/privacy}", "received_events_url": "https://api.github.com/users/ktrianta/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30ca215b4e38b32aa7abdd635c5e2d56f5724494", "url": "https://api.github.com/repos/rust-lang/rust/commits/30ca215b4e38b32aa7abdd635c5e2d56f5724494", "html_url": "https://github.com/rust-lang/rust/commit/30ca215b4e38b32aa7abdd635c5e2d56f5724494"}], "stats": {"total": 516, "additions": 449, "deletions": 67}, "files": [{"sha": "3c37eccc1843bc23100f9301b1349233a8ec4c41", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72710d6dc2d0511cd21378f7cc99ac59ac3a5af5/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72710d6dc2d0511cd21378f7cc99ac59ac3a5af5/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=72710d6dc2d0511cd21378f7cc99ac59ac3a5af5", "patch": "@@ -36,6 +36,7 @@ pub mod simplify;\n pub mod simplify_branches;\n pub mod simplify_try;\n pub mod uninhabited_enum_branching;\n+pub mod unreachable_prop;\n \n pub(crate) fn provide(providers: &mut Providers<'_>) {\n     self::check_unsafety::provide(providers);\n@@ -299,6 +300,7 @@ fn run_optimization_passes<'tcx>(\n             // From here on out, regions are gone.\n             &erase_regions::EraseRegions,\n             // Optimizations begin.\n+            &unreachable_prop::UnreachablePropagation,\n             &uninhabited_enum_branching::UninhabitedEnumBranching,\n             &simplify::SimplifyCfg::new(\"after-uninhabited-enum-branching\"),\n             &inline::Inline,"}, {"sha": "27173e0c171b72a04ac4414558844651a772e3b5", "filename": "src/librustc_mir/transform/unreachable_prop.rs", "status": "added", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/72710d6dc2d0511cd21378f7cc99ac59ac3a5af5/src%2Flibrustc_mir%2Ftransform%2Funreachable_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72710d6dc2d0511cd21378f7cc99ac59ac3a5af5/src%2Flibrustc_mir%2Ftransform%2Funreachable_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Funreachable_prop.rs?ref=72710d6dc2d0511cd21378f7cc99ac59ac3a5af5", "patch": "@@ -0,0 +1,108 @@\n+//! A pass that propagates the unreachable terminator of a block to its predecessors\n+//! when all of their successors are unreachable. This is achieved through a\n+//! post-order traversal of the blocks.\n+\n+use crate::transform::simplify;\n+use crate::transform::{MirPass, MirSource};\n+use rustc::mir::*;\n+use rustc::ty::TyCtxt;\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use std::borrow::Cow;\n+\n+pub struct UnreachablePropagation;\n+\n+impl MirPass<'_> for UnreachablePropagation {\n+    fn run_pass<'tcx>(&self, tcx: TyCtxt<'tcx>, _: MirSource<'tcx>, body: &mut BodyAndCache<'tcx>) {\n+        if tcx.sess.opts.debugging_opts.mir_opt_level < 3 {\n+            // Enable only under -Zmir-opt-level=3 as in some cases (check the deeply-nested-opt\n+            // perf benchmark) LLVM may spend quite a lot of time optimizing the generated code.\n+            return;\n+        }\n+\n+        let mut unreachable_blocks = FxHashSet::default();\n+        let mut replacements = FxHashMap::default();\n+\n+        for (bb, bb_data) in traversal::postorder(body) {\n+            let terminator = bb_data.terminator();\n+            // HACK: If the block contains any asm statement it is not regarded as unreachable.\n+            // This is a temporary solution that handles possibly diverging asm statements.\n+            // Accompanying testcases: mir-opt/unreachable_asm.rs and mir-opt/unreachable_asm_2.rs\n+            let asm_stmt_in_block = || {\n+                bb_data.statements.iter().any(|stmt: &Statement<'_>| match stmt.kind {\n+                    StatementKind::InlineAsm(..) => true,\n+                    _ => false,\n+                })\n+            };\n+\n+            if terminator.kind == TerminatorKind::Unreachable && !asm_stmt_in_block() {\n+                unreachable_blocks.insert(bb);\n+            } else {\n+                let is_unreachable = |succ: BasicBlock| unreachable_blocks.contains(&succ);\n+                let terminator_kind_opt = remove_successors(&terminator.kind, is_unreachable);\n+\n+                if let Some(terminator_kind) = terminator_kind_opt {\n+                    if terminator_kind == TerminatorKind::Unreachable && !asm_stmt_in_block() {\n+                        unreachable_blocks.insert(bb);\n+                    }\n+                    replacements.insert(bb, terminator_kind);\n+                }\n+            }\n+        }\n+\n+        let replaced = !replacements.is_empty();\n+        for (bb, terminator_kind) in replacements {\n+            body.basic_blocks_mut()[bb].terminator_mut().kind = terminator_kind;\n+        }\n+\n+        if replaced {\n+            simplify::remove_dead_blocks(body);\n+        }\n+    }\n+}\n+\n+fn remove_successors<F>(\n+    terminator_kind: &TerminatorKind<'tcx>,\n+    predicate: F,\n+) -> Option<TerminatorKind<'tcx>>\n+where\n+    F: Fn(BasicBlock) -> bool,\n+{\n+    match *terminator_kind {\n+        TerminatorKind::Goto { target } if predicate(target) => Some(TerminatorKind::Unreachable),\n+        TerminatorKind::SwitchInt { ref discr, switch_ty, ref values, ref targets } => {\n+            let original_targets_len = targets.len();\n+            let (otherwise, targets) = targets.split_last().unwrap();\n+            let retained = values\n+                .iter()\n+                .zip(targets.iter())\n+                .filter(|(_, &t)| !predicate(t))\n+                .collect::<Vec<_>>();\n+            let mut values = retained.iter().map(|&(v, _)| *v).collect::<Vec<_>>();\n+            let mut targets = retained.iter().map(|&(_, d)| *d).collect::<Vec<_>>();\n+\n+            if !predicate(*otherwise) {\n+                targets.push(*otherwise);\n+            } else {\n+                values.pop();\n+            }\n+\n+            let retained_targets_len = targets.len();\n+\n+            if targets.is_empty() {\n+                Some(TerminatorKind::Unreachable)\n+            } else if targets.len() == 1 {\n+                Some(TerminatorKind::Goto { target: targets[0] })\n+            } else if original_targets_len != retained_targets_len {\n+                Some(TerminatorKind::SwitchInt {\n+                    discr: discr.clone(),\n+                    switch_ty,\n+                    values: Cow::from(values),\n+                    targets,\n+                })\n+            } else {\n+                None\n+            }\n+        }\n+        _ => None,\n+    }\n+}"}, {"sha": "d85eff45b49899d2971f2fb05061306d746bc1d8", "filename": "src/test/mir-opt/simplify_try.rs", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/72710d6dc2d0511cd21378f7cc99ac59ac3a5af5/src%2Ftest%2Fmir-opt%2Fsimplify_try.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72710d6dc2d0511cd21378f7cc99ac59ac3a5af5/src%2Ftest%2Fmir-opt%2Fsimplify_try.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try.rs?ref=72710d6dc2d0511cd21378f7cc99ac59ac3a5af5", "patch": "@@ -47,25 +47,22 @@ fn main() {\n //     }\n //     bb0: {\n //         _5 = discriminant(_1);\n-//         switchInt(move _5) -> [0isize: bb4, 1isize: bb2, otherwise: bb1];\n+//         switchInt(move _5) -> [0isize: bb3, otherwise: bb1];\n //     }\n //     bb1: {\n-//         unreachable;\n-//     }\n-//     bb2: {\n //         _6 = ((_1 as Err).0: i32);\n //         ((_0 as Err).0: i32) = move _6;\n //         discriminant(_0) = 1;\n-//         goto -> bb3;\n+//         goto -> bb2;\n //     }\n-//     bb3: {\n+//     bb2: {\n //         return;\n //     }\n-//     bb4: {\n+//     bb3: {\n //         _10 = ((_1 as Ok).0: u32);\n //         ((_0 as Ok).0: u32) = move _10;\n //         discriminant(_0) = 0;\n-//         goto -> bb3;\n+//         goto -> bb2;\n //     }\n // }\n // END rustc.try_identity.SimplifyArmIdentity.before.mir\n@@ -109,25 +106,22 @@ fn main() {\n //     }\n //     bb0: {\n //         _5 = discriminant(_1);\n-//         switchInt(move _5) -> [0isize: bb4, 1isize: bb2, otherwise: bb1];\n+//         switchInt(move _5) -> [0isize: bb3, otherwise: bb1];\n //     }\n //     bb1: {\n-//         unreachable;\n-//     }\n-//     bb2: {\n //         _0 = move _1;\n //         nop;\n //         nop;\n-//         goto -> bb3;\n+//         goto -> bb2;\n //     }\n-//     bb3: {\n+//     bb2: {\n //         return;\n //     }\n-//     bb4: {\n+//     bb3: {\n //         _0 = move _1;\n //         nop;\n //         nop;\n-//         goto -> bb3;\n+//         goto -> bb2;\n //     }\n // }\n // END rustc.try_identity.SimplifyArmIdentity.after.mir"}, {"sha": "dda5fd4fb7577000d5aeb0a04af37bfca11112ed", "filename": "src/test/mir-opt/uninhabited_enum_branching.rs", "status": "modified", "additions": 30, "deletions": 51, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/72710d6dc2d0511cd21378f7cc99ac59ac3a5af5/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72710d6dc2d0511cd21378f7cc99ac59ac3a5af5/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching.rs?ref=72710d6dc2d0511cd21378f7cc99ac59ac3a5af5", "patch": "@@ -45,53 +45,47 @@ fn main() {\n //   StorageLive(_2);\n //   _2 = Test1::C;\n //   _3 = discriminant(_2);\n-//   switchInt(move _3) -> [0isize: bb3, 1isize: bb4, 2isize: bb1, otherwise: bb2];\n+//   switchInt(move _3) -> [0isize: bb2, 1isize: bb3, otherwise: bb1];\n // }\n // bb1: {\n //   StorageLive(_5);\n //   _5 = const \"C\";\n //   _1 = &(*_5);\n //   StorageDead(_5);\n-//   goto -> bb5;\n+//   goto -> bb4;\n // }\n // bb2: {\n-//   unreachable;\n-// }\n-// bb3: {\n //   _1 = const \"A(Empty)\";\n-//   goto -> bb5;\n+//   goto -> bb4;\n // }\n-// bb4: {\n+// bb3: {\n //   StorageLive(_4);\n //   _4 = const \"B(Empty)\";\n //   _1 = &(*_4);\n //   StorageDead(_4);\n-//   goto -> bb5;\n+//   goto -> bb4;\n // }\n-// bb5: {\n+// bb4: {\n //   StorageDead(_2);\n //   StorageDead(_1);\n //   StorageLive(_6);\n //   StorageLive(_7);\n //   _7 = Test2::D;\n //   _8 = discriminant(_7);\n-//   switchInt(move _8) -> [4isize: bb8, 5isize: bb6, otherwise: bb7];\n+//   switchInt(move _8) -> [4isize: bb6, otherwise: bb5];\n // }\n-// bb6: {\n+// bb5: {\n //   StorageLive(_9);\n //   _9 = const \"E\";\n //   _6 = &(*_9);\n //   StorageDead(_9);\n-//   goto -> bb9;\n-// }\n-// bb7: {\n-//   unreachable;\n+//   goto -> bb7;\n // }\n-// bb8: {\n+// bb6: {\n //   _6 = const \"D\";\n-//   goto -> bb9;\n+//   goto -> bb7;\n // }\n-// bb9: {\n+// bb7: {\n //   StorageDead(_7);\n //   StorageDead(_6);\n //   _0 = ();\n@@ -114,53 +108,47 @@ fn main() {\n //   StorageLive(_2);\n //   _2 = Test1::C;\n //   _3 = discriminant(_2);\n-//   switchInt(move _3) -> [2isize: bb1, otherwise: bb2];\n+//   switchInt(move _3) -> bb1;\n // }\n // bb1: {\n //   StorageLive(_5);\n //   _5 = const \"C\";\n //   _1 = &(*_5);\n //   StorageDead(_5);\n-//   goto -> bb5;\n+//   goto -> bb4;\n // }\n // bb2: {\n-//   unreachable;\n-// }\n-// bb3: {\n //   _1 = const \"A(Empty)\";\n-//   goto -> bb5;\n+//   goto -> bb4;\n // }\n-// bb4: {\n+// bb3: {\n //   StorageLive(_4);\n //   _4 = const \"B(Empty)\";\n //   _1 = &(*_4);\n //   StorageDead(_4);\n-//   goto -> bb5;\n+//   goto -> bb4;\n // }\n-// bb5: {\n+// bb4: {\n //   StorageDead(_2);\n //   StorageDead(_1);\n //   StorageLive(_6);\n //   StorageLive(_7);\n //   _7 = Test2::D;\n //   _8 = discriminant(_7);\n-//   switchInt(move _8) -> [4isize: bb8, 5isize: bb6, otherwise: bb7];\n+//   switchInt(move _8) -> [4isize: bb6, otherwise: bb5];\n // }\n-// bb6: {\n+// bb5: {\n //   StorageLive(_9);\n //   _9 = const \"E\";\n //   _6 = &(*_9);\n //   StorageDead(_9);\n-//   goto -> bb9;\n+//   goto -> bb7;\n // }\n-// bb7: {\n-//   unreachable;\n-// }\n-// bb8: {\n+// bb6: {\n //   _6 = const \"D\";\n-//   goto -> bb9;\n+//   goto -> bb7;\n // }\n-// bb9: {\n+// bb7: {\n //   StorageDead(_7);\n //   StorageDead(_6);\n //   _0 = ();\n@@ -183,9 +171,6 @@ fn main() {\n //   StorageLive(_2);\n //   _2 = Test1::C;\n //   _3 = discriminant(_2);\n-//   switchInt(move _3) -> [2isize: bb1, otherwise: bb2];\n-// }\n-// bb1: {\n //   StorageLive(_5);\n //   _5 = const \"C\";\n //   _1 = &(*_5);\n@@ -196,26 +181,20 @@ fn main() {\n //   StorageLive(_7);\n //   _7 = Test2::D;\n //   _8 = discriminant(_7);\n-//   switchInt(move _8) -> [4isize: bb5, 5isize: bb3, otherwise: bb4];\n-// }\n-// bb2: {\n-//   unreachable;\n+//   switchInt(move _8) -> [4isize: bb2, otherwise: bb1];\n // }\n-// bb3: {\n+// bb1: {\n //   StorageLive(_9);\n //   _9 = const \"E\";\n //   _6 = &(*_9);\n //   StorageDead(_9);\n-//   goto -> bb6;\n-// }\n-// bb4: {\n-//   unreachable;\n+//   goto -> bb3;\n // }\n-// bb5: {\n+// bb2: {\n //   _6 = const \"D\";\n-//   goto -> bb6;\n+//   goto -> bb3;\n // }\n-// bb6: {\n+// bb3: {\n //   StorageDead(_7);\n //   StorageDead(_6);\n //   _0 = ();"}, {"sha": "fa5c1a074ee15d5f24ac5ed6704a31cd12868b1d", "filename": "src/test/mir-opt/unreachable.rs", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/72710d6dc2d0511cd21378f7cc99ac59ac3a5af5/src%2Ftest%2Fmir-opt%2Funreachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72710d6dc2d0511cd21378f7cc99ac59ac3a5af5/src%2Ftest%2Fmir-opt%2Funreachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funreachable.rs?ref=72710d6dc2d0511cd21378f7cc99ac59ac3a5af5", "patch": "@@ -0,0 +1,78 @@\n+enum Empty {}\n+\n+fn empty() -> Option<Empty> {\n+    None\n+}\n+\n+fn main() {\n+    if let Some(_x) = empty() {\n+        let mut _y;\n+\n+        if true {\n+            _y = 21;\n+        } else {\n+            _y = 42;\n+        }\n+\n+        match _x { }\n+    }\n+}\n+\n+// END RUST SOURCE\n+// START rustc.main.UnreachablePropagation.before.mir\n+//      bb0: {\n+//          StorageLive(_1);\n+//          _1 = const empty() -> bb1;\n+//      }\n+//      bb1: {\n+//          _2 = discriminant(_1);\n+//          switchInt(move _2) -> [1isize: bb3, otherwise: bb2];\n+//      }\n+//      bb2: {\n+//          _0 = ();\n+//          StorageDead(_1);\n+//          return;\n+//      }\n+//      bb3: {\n+//          StorageLive(_3);\n+//          _3 = move ((_1 as Some).0: Empty);\n+//          StorageLive(_4);\n+//          StorageLive(_5);\n+//          StorageLive(_6);\n+//          _6 = const true;\n+//          switchInt(_6) -> [false: bb4, otherwise: bb5];\n+//      }\n+//      bb4: {\n+//          _4 = const 42i32;\n+//          _5 = ();\n+//          goto -> bb6;\n+//      }\n+//      bb5: {\n+//          _4 = const 21i32;\n+//          _5 = ();\n+//          goto -> bb6;\n+//      }\n+//      bb6: {\n+//          StorageDead(_6);\n+//          StorageDead(_5);\n+//          StorageLive(_7);\n+//          unreachable;\n+//      }\n+//  }\n+// END rustc.main.UnreachablePropagation.before.mir\n+// START rustc.main.UnreachablePropagation.after.mir\n+//      bb0: {\n+//          StorageLive(_1);\n+//          _1 = const empty() -> bb1;\n+//      }\n+//      bb1: {\n+//          _2 = discriminant(_1);\n+//          goto -> bb2;\n+//      }\n+//      bb2: {\n+//          _0 = ();\n+//          StorageDead(_1);\n+//          return;\n+//      }\n+//  }\n+// END rustc.main.UnreachablePropagation.after.mir"}, {"sha": "ca614ac32b764b58858fc6a34da400fa2ac032c9", "filename": "src/test/mir-opt/unreachable_asm.rs", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/72710d6dc2d0511cd21378f7cc99ac59ac3a5af5/src%2Ftest%2Fmir-opt%2Funreachable_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72710d6dc2d0511cd21378f7cc99ac59ac3a5af5/src%2Ftest%2Fmir-opt%2Funreachable_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funreachable_asm.rs?ref=72710d6dc2d0511cd21378f7cc99ac59ac3a5af5", "patch": "@@ -0,0 +1,72 @@\n+// ignore-tidy-linelength\n+#![feature(asm)]\n+\n+enum Empty {}\n+\n+fn empty() -> Option<Empty> {\n+    None\n+}\n+\n+fn main() {\n+    if let Some(_x) = empty() {\n+        let mut _y;\n+\n+        if true {\n+            _y = 21;\n+        } else {\n+            _y = 42;\n+        }\n+\n+        // asm instruction stops unreachable propagation to if else blocks bb4 and bb5.\n+        unsafe { asm!(\"NOP\"); }\n+        match _x { }\n+    }\n+}\n+\n+// END RUST SOURCE\n+// START rustc.main.UnreachablePropagation.before.mir\n+//      bb4: {\n+//          _4 = const 42i32;\n+//          _5 = ();\n+//          goto -> bb6;\n+//      }\n+//      bb5: {\n+//          _4 = const 21i32;\n+//          _5 = ();\n+//          goto -> bb6;\n+//      }\n+//      bb6: {\n+//          StorageDead(_6);\n+//          StorageDead(_5);\n+//          StorageLive(_7);\n+//          asm!(InlineAsmInner { asm: \"NOP\", asm_str_style: Cooked, outputs: [], inputs: [], clobbers: [], volatile: true, alignstack: false, dialect: Att } : [] : []);\n+//          _7 = ();\n+//          StorageDead(_7);\n+//          StorageLive(_8);\n+//          unreachable;\n+//      }\n+//  }\n+// END rustc.main.UnreachablePropagation.before.mir\n+// START rustc.main.UnreachablePropagation.after.mir\n+//      bb4: {\n+//          _4 = const 42i32;\n+//          _5 = ();\n+//          goto -> bb6;\n+//      }\n+//      bb5: {\n+//          _4 = const 21i32;\n+//          _5 = ();\n+//          goto -> bb6;\n+//      }\n+//      bb6: {\n+//          StorageDead(_6);\n+//          StorageDead(_5);\n+//          StorageLive(_7);\n+//          asm!(InlineAsmInner { asm: \"NOP\", asm_str_style: Cooked, outputs: [], inputs: [], clobbers: [], volatile: true, alignstack: false, dialect: Att } : [] : []);\n+//          _7 = ();\n+//          StorageDead(_7);\n+//          StorageLive(_8);\n+//          unreachable;\n+//      }\n+//  }\n+// END rustc.main.UnreachablePropagation.after.mir"}, {"sha": "8fdbcfb5cab7ff51b56ac009bd70d371dae40082", "filename": "src/test/mir-opt/unreachable_asm_2.rs", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/72710d6dc2d0511cd21378f7cc99ac59ac3a5af5/src%2Ftest%2Fmir-opt%2Funreachable_asm_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72710d6dc2d0511cd21378f7cc99ac59ac3a5af5/src%2Ftest%2Fmir-opt%2Funreachable_asm_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funreachable_asm_2.rs?ref=72710d6dc2d0511cd21378f7cc99ac59ac3a5af5", "patch": "@@ -0,0 +1,84 @@\n+// ignore-tidy-linelength\n+#![feature(asm)]\n+\n+enum Empty {}\n+\n+fn empty() -> Option<Empty> {\n+    None\n+}\n+\n+fn main() {\n+    if let Some(_x) = empty() {\n+        let mut _y;\n+\n+        if true {\n+            // asm instruction stops unreachable propagation to block bb3.\n+            unsafe { asm!(\"NOP\"); }\n+            _y = 21;\n+        } else {\n+            // asm instruction stops unreachable propagation to block bb3.\n+            unsafe { asm!(\"NOP\"); }\n+            _y = 42;\n+        }\n+\n+        match _x { }\n+    }\n+}\n+\n+// END RUST SOURCE\n+// START rustc.main.UnreachablePropagation.before.mir\n+//      bb3: {\n+//          ...\n+//          switchInt(_6) -> [false: bb4, otherwise: bb5];\n+//      }\n+//      bb4: {\n+//          StorageLive(_8);\n+//          asm!(InlineAsmInner { asm: \"NOP\", asm_str_style: Cooked, outputs: [], inputs: [], clobbers: [], volatile: true, alignstack: false, dialect: Att } : [] : []);\n+//          _8 = ();\n+//          StorageDead(_8);\n+//          _4 = const 42i32;\n+//          _5 = ();\n+//          goto -> bb6;\n+//      }\n+//          bb5: {\n+//          StorageLive(_7);\n+//          asm!(InlineAsmInner { asm: \"NOP\", asm_str_style: Cooked, outputs: [], inputs: [], clobbers: [], volatile: true, alignstack: false, dialect: Att } : [] : []);\n+//          _7 = ();\n+//          StorageDead(_7);\n+//          _4 = const 21i32;\n+//          _5 = ();\n+//          goto -> bb6;\n+//      }\n+//      bb6: {\n+//          StorageDead(_6);\n+//          StorageDead(_5);\n+//          StorageLive(_9);\n+//          unreachable;\n+//      }\n+//  }\n+// END rustc.main.UnreachablePropagation.before.mir\n+// START rustc.main.UnreachablePropagation.after.mir\n+//      bb3: {\n+//          ...\n+//          switchInt(_6) -> [false: bb4, otherwise: bb5];\n+//      }\n+//      bb4: {\n+//          StorageLive(_8);\n+//          asm!(InlineAsmInner { asm: \"NOP\", asm_str_style: Cooked, outputs: [], inputs: [], clobbers: [], volatile: true, alignstack: false, dialect: Att } : [] : []);\n+//          _8 = ();\n+//          StorageDead(_8);\n+//          _4 = const 42i32;\n+//          _5 = ();\n+//          unreachable;\n+//      }\n+//          bb5: {\n+//          StorageLive(_7);\n+//          asm!(InlineAsmInner { asm: \"NOP\", asm_str_style: Cooked, outputs: [], inputs: [], clobbers: [], volatile: true, alignstack: false, dialect: Att } : [] : []);\n+//          _7 = ();\n+//          StorageDead(_7);\n+//          _4 = const 21i32;\n+//          _5 = ();\n+//          unreachable;\n+//      }\n+//  }\n+// END rustc.main.UnreachablePropagation.after.mir"}, {"sha": "bf05019d5ced15ffb2c7ecbf4addb241e0052d5d", "filename": "src/test/mir-opt/unreachable_diverging.rs", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/72710d6dc2d0511cd21378f7cc99ac59ac3a5af5/src%2Ftest%2Fmir-opt%2Funreachable_diverging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72710d6dc2d0511cd21378f7cc99ac59ac3a5af5/src%2Ftest%2Fmir-opt%2Funreachable_diverging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funreachable_diverging.rs?ref=72710d6dc2d0511cd21378f7cc99ac59ac3a5af5", "patch": "@@ -0,0 +1,65 @@\n+pub enum Empty {}\n+\n+fn empty() -> Option<Empty> {\n+    None\n+}\n+\n+fn loop_forever() {\n+    loop {}\n+}\n+\n+fn main() {\n+    let x = true;\n+    if let Some(bomb) = empty() {\n+        if x {\n+            loop_forever()\n+        }\n+        match bomb {}\n+    }\n+}\n+\n+// END RUST SOURCE\n+// START rustc.main.UnreachablePropagation.before.mir\n+//      bb3: {\n+//          StorageLive(_4);\n+//          _4 = move ((_2 as Some).0: Empty);\n+//          StorageLive(_5);\n+//          StorageLive(_6);\n+//          _6 = _1;\n+//          switchInt(_6) -> [false: bb4, otherwise: bb5];\n+//      }\n+//      bb4: {\n+//          _5 = ();\n+//          goto -> bb6;\n+//      }\n+//      bb5: {\n+//          _5 = const loop_forever() -> bb6;\n+//      }\n+//      bb6: {\n+//          StorageDead(_6);\n+//          StorageDead(_5);\n+//          StorageLive(_7);\n+//          unreachable;\n+//      }\n+//  }\n+// END rustc.main.UnreachablePropagation.before.mir\n+// START rustc.main.UnreachablePropagation.after.mir\n+//      bb3: {\n+//          StorageLive(_4);\n+//          _4 = move ((_2 as Some).0: Empty);\n+//          StorageLive(_5);\n+//          StorageLive(_6);\n+//          _6 = _1;\n+//          goto -> bb4;\n+//      }\n+//      bb4: {\n+//          _5 = const loop_forever() -> bb5;\n+//      }\n+//      bb5: {\n+//          StorageDead(_6);\n+//          StorageDead(_5);\n+//          StorageLive(_7);\n+//          unreachable;\n+//      }\n+//  }\n+// END rustc.main.UnreachablePropagation.after.mir"}]}