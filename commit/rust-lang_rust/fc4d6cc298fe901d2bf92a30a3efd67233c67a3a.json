{"sha": "fc4d6cc298fe901d2bf92a30a3efd67233c67a3a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjNGQ2Y2MyOThmZTkwMWQyYmY5MmEzMGEzZWZkNjcyMzNjNjdhM2E=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-01-07T17:14:26Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-01-07T17:14:26Z"}, "message": "Simplify non-white token handling", "tree": {"sha": "fe9581ccf3fef334c4ca21da4961eb3c0fd74975", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe9581ccf3fef334c4ca21da4961eb3c0fd74975"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc4d6cc298fe901d2bf92a30a3efd67233c67a3a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc4d6cc298fe901d2bf92a30a3efd67233c67a3a", "html_url": "https://github.com/rust-lang/rust/commit/fc4d6cc298fe901d2bf92a30a3efd67233c67a3a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc4d6cc298fe901d2bf92a30a3efd67233c67a3a/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bbf7e9bbd284f83d43e61604076a040baaf124a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/bbf7e9bbd284f83d43e61604076a040baaf124a7", "html_url": "https://github.com/rust-lang/rust/commit/bbf7e9bbd284f83d43e61604076a040baaf124a7"}], "stats": {"total": 31, "additions": 20, "deletions": 11}, "files": [{"sha": "f676a183c0ed50fbf0871b084c5a0c79e4676e39", "filename": "src/parser/event_parser/grammar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc4d6cc298fe901d2bf92a30a3efd67233c67a3a/src%2Fparser%2Fevent_parser%2Fgrammar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc4d6cc298fe901d2bf92a30a3efd67233c67a3a/src%2Fparser%2Fevent_parser%2Fgrammar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fevent_parser%2Fgrammar.rs?ref=fc4d6cc298fe901d2bf92a30a3efd67233c67a3a", "patch": "@@ -4,7 +4,7 @@ use syntax_kinds::*;\n \n // Items //\n \n-pub fn file(p: &mut Parser) {\n+pub(crate) fn file(p: &mut Parser) {\n     node(p, FILE, |p| {\n         p.optional(SHEBANG);\n         inner_attributes(p);"}, {"sha": "f0d1d358b7a5a0afc80ed056c2ffba4a0017c2ca", "filename": "src/parser/event_parser/parser.rs", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/fc4d6cc298fe901d2bf92a30a3efd67233c67a3a/src%2Fparser%2Fevent_parser%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc4d6cc298fe901d2bf92a30a3efd67233c67a3a/src%2Fparser%2Fevent_parser%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fevent_parser%2Fparser.rs?ref=fc4d6cc298fe901d2bf92a30a3efd67233c67a3a", "patch": "@@ -3,9 +3,15 @@ use super::{Event};\n use super::super::is_insignificant;\n use syntax_kinds::{L_CURLY, R_CURLY, ERROR};\n \n-pub struct Parser<'t> {\n+pub(crate) const EOF: SyntaxKind = SyntaxKind(10000);\n+\n+\n+pub(crate) struct Parser<'t> {\n+    #[allow(unused)]\n     text: &'t str,\n-    non_ws_tokens: Vec<(Token, TextUnit)>,\n+    #[allow(unused)]\n+    start_offsets: Vec<TextUnit>,\n+    tokens: Vec<Token>, // non-whitespace tokens\n \n     pos: usize,\n     events: Vec<Event>,\n@@ -16,18 +22,21 @@ pub struct Parser<'t> {\n \n impl<'t> Parser<'t> {\n     pub(crate) fn new(text: &'t str, raw_tokens: &'t [Token]) -> Parser<'t> {\n-        let mut non_ws_tokens = Vec::new();\n+        let mut tokens = Vec::new();\n+        let mut start_offsets = Vec::new();\n         let mut len = TextUnit::new(0);\n         for &token in raw_tokens.iter() {\n             if !is_insignificant(token.kind) {\n-                non_ws_tokens.push((token, len))\n+                tokens.push(token);\n+                start_offsets.push(len);\n             }\n             len += token.len;\n         }\n \n         Parser {\n             text,\n-            non_ws_tokens,\n+            start_offsets,\n+            tokens,\n \n             pos: 0,\n             events: Vec::new(),\n@@ -42,11 +51,11 @@ impl<'t> Parser<'t> {\n     }\n \n     pub(crate) fn is_eof(&self) -> bool {\n-        if self.pos == self.non_ws_tokens.len() {\n+        if self.pos == self.tokens.len() {\n             return true\n         }\n         if let Some(limit) = self.curly_limit {\n-            let token = self.non_ws_tokens[self.pos].0;\n+            let token = self.tokens[self.pos];\n             return limit == self.curly_level && token.kind == R_CURLY;\n         }\n         false\n@@ -68,7 +77,7 @@ impl<'t> Parser<'t> {\n         if self.is_eof() {\n             return None;\n         }\n-        let token = self.non_ws_tokens[self.pos].0;\n+        let token = self.tokens[self.pos];\n         Some(token.kind)\n     }\n \n@@ -85,10 +94,10 @@ impl<'t> Parser<'t> {\n     }\n \n     pub(crate) fn lookahead(&self, kinds: &[SyntaxKind]) -> bool {\n-        if self.non_ws_tokens[self.pos..].len() < kinds.len() {\n+        if self.tokens[self.pos..].len() < kinds.len() {\n             return false\n         }\n-        kinds.iter().zip(self.non_ws_tokens[self.pos..].iter().map(|&(t, _)| t.kind))\n+        kinds.iter().zip(self.tokens[self.pos..].iter().map(|t| t.kind))\n             .all(|(&k1, k2)| k1 == k2)\n     }\n "}]}