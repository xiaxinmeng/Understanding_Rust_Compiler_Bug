{"sha": "468254b38f8afd8d878ccce44b604bb6ce246dd4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2ODI1NGIzOGY4YWZkOGQ4NzhjY2NlNDRiNjA0YmI2Y2UyNDZkZDQ=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2019-01-01T18:08:25Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2019-01-11T02:53:30Z"}, "message": "Update tests", "tree": {"sha": "e79249ea90fe0427f431ea9d15fcde617b971391", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e79249ea90fe0427f431ea9d15fcde617b971391"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/468254b38f8afd8d878ccce44b604bb6ce246dd4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/468254b38f8afd8d878ccce44b604bb6ce246dd4", "html_url": "https://github.com/rust-lang/rust/commit/468254b38f8afd8d878ccce44b604bb6ce246dd4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/468254b38f8afd8d878ccce44b604bb6ce246dd4/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69d18a398656f41ff713b26cc8a0149635a8eea2", "url": "https://api.github.com/repos/rust-lang/rust/commits/69d18a398656f41ff713b26cc8a0149635a8eea2", "html_url": "https://github.com/rust-lang/rust/commit/69d18a398656f41ff713b26cc8a0149635a8eea2"}], "stats": {"total": 217, "additions": 181, "deletions": 36}, "files": [{"sha": "aa45462a52e41e702cd06b07e042e81355297a46", "filename": "src/test/ui/cycle-trait/cycle-trait-default-type-trait.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/468254b38f8afd8d878ccce44b604bb6ce246dd4/src%2Ftest%2Fui%2Fcycle-trait%2Fcycle-trait-default-type-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/468254b38f8afd8d878ccce44b604bb6ce246dd4/src%2Ftest%2Fui%2Fcycle-trait%2Fcycle-trait-default-type-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcycle-trait%2Fcycle-trait-default-type-trait.stderr?ref=468254b38f8afd8d878ccce44b604bb6ce246dd4", "patch": "@@ -5,6 +5,11 @@ LL | trait Foo<X = Box<Foo>> {\n    |                   ^^^\n    |\n    = note: ...which again requires processing `Foo::X`, completing the cycle\n+note: cycle used when collecting item types in top-level module\n+  --> $DIR/cycle-trait-default-type-trait.rs:4:1\n+   |\n+LL | trait Foo<X = Box<Foo>> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "8aa3ac8abf52c5eaa658bc0955a17c059e57f77a", "filename": "src/test/ui/cycle-trait/cycle-trait-supertrait-direct.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/468254b38f8afd8d878ccce44b604bb6ce246dd4/src%2Ftest%2Fui%2Fcycle-trait%2Fcycle-trait-supertrait-direct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/468254b38f8afd8d878ccce44b604bb6ce246dd4/src%2Ftest%2Fui%2Fcycle-trait%2Fcycle-trait-supertrait-direct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcycle-trait%2Fcycle-trait-supertrait-direct.stderr?ref=468254b38f8afd8d878ccce44b604bb6ce246dd4", "patch": "@@ -5,6 +5,11 @@ LL | trait Chromosome: Chromosome {\n    |                   ^^^^^^^^^^\n    |\n    = note: ...which again requires computing the supertraits of `Chromosome`, completing the cycle\n+note: cycle used when collecting item types in top-level module\n+  --> $DIR/cycle-trait-supertrait-direct.rs:3:1\n+   |\n+LL | trait Chromosome: Chromosome {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "fab61bd9ed06504261475531ae84bba7e47cf759", "filename": "src/test/ui/existential_types/no_inferrable_concrete_type.stderr", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/468254b38f8afd8d878ccce44b604bb6ce246dd4/src%2Ftest%2Fui%2Fexistential_types%2Fno_inferrable_concrete_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/468254b38f8afd8d878ccce44b604bb6ce246dd4/src%2Ftest%2Fui%2Fexistential_types%2Fno_inferrable_concrete_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fno_inferrable_concrete_type.stderr?ref=468254b38f8afd8d878ccce44b604bb6ce246dd4", "patch": "@@ -10,6 +10,17 @@ note: ...which requires processing `bar`...\n LL | fn bar(x: Foo) -> Foo { x }\n    |                       ^^^^^\n    = note: ...which again requires processing `Foo`, completing the cycle\n+note: cycle used when collecting item types in top-level module\n+  --> $DIR/no_inferrable_concrete_type.rs:4:1\n+   |\n+LL | / #![feature(existential_type)]\n+LL | |\n+LL | | existential type Foo: Copy; //~ cycle detected\n+LL | |\n+...  |\n+LL | |     let _: Foo = std::mem::transmute(0u8);\n+LL | | }\n+   | |_^\n \n error: aborting due to previous error\n "}, {"sha": "4acc400f8e79982f9d710d1457f842fcc7a33ea2", "filename": "src/test/ui/impl-trait/auto-trait-leak.stderr", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/468254b38f8afd8d878ccce44b604bb6ce246dd4/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/468254b38f8afd8d878ccce44b604bb6ce246dd4/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr?ref=468254b38f8afd8d878ccce44b604bb6ce246dd4", "patch": "@@ -22,6 +22,17 @@ LL | fn cycle2() -> impl Clone {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...which requires evaluating trait selection obligation `impl std::clone::Clone: std::marker::Send`...\n    = note: ...which again requires processing `cycle1::{{impl-Trait}}`, completing the cycle\n+note: cycle used when checking item types in top-level module\n+  --> $DIR/auto-trait-leak.rs:3:1\n+   |\n+LL | / use std::cell::Cell;\n+LL | | use std::rc::Rc;\n+LL | |\n+LL | | fn send<T: Send>(_: T) {}\n+...  |\n+LL | |     Rc::new(String::from(\"foo\"))\n+LL | | }\n+   | |_^\n \n error[E0391]: cycle detected when processing `cycle1::{{impl-Trait}}`\n   --> $DIR/auto-trait-leak.rs:14:16\n@@ -46,6 +57,17 @@ note: ...which requires processing `cycle2`...\n LL | fn cycle2() -> impl Clone {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: ...which again requires processing `cycle1::{{impl-Trait}}`, completing the cycle\n+note: cycle used when checking item types in top-level module\n+  --> $DIR/auto-trait-leak.rs:3:1\n+   |\n+LL | / use std::cell::Cell;\n+LL | | use std::rc::Rc;\n+LL | |\n+LL | | fn send<T: Send>(_: T) {}\n+...  |\n+LL | |     Rc::new(String::from(\"foo\"))\n+LL | | }\n+   | |_^\n \n error[E0277]: `std::rc::Rc<std::string::String>` cannot be sent between threads safely\n   --> $DIR/auto-trait-leak.rs:17:5"}, {"sha": "daa18a7e9b1ce1928a3b3ace0808756a8247acba", "filename": "src/test/ui/infinite/infinite-vec-type-recursion.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/468254b38f8afd8d878ccce44b604bb6ce246dd4/src%2Ftest%2Fui%2Finfinite%2Finfinite-vec-type-recursion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/468254b38f8afd8d878ccce44b604bb6ce246dd4/src%2Ftest%2Fui%2Finfinite%2Finfinite-vec-type-recursion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finfinite%2Finfinite-vec-type-recursion.stderr?ref=468254b38f8afd8d878ccce44b604bb6ce246dd4", "patch": "@@ -5,6 +5,14 @@ LL | type X = Vec<X>;\n    |              ^\n    |\n    = note: ...which again requires processing `X`, completing the cycle\n+note: cycle used when collecting item types in top-level module\n+  --> $DIR/infinite-vec-type-recursion.rs:1:1\n+   |\n+LL | / type X = Vec<X>;\n+LL | | //~^ ERROR cycle detected\n+LL | |\n+LL | | fn main() { let b: X = Vec::new(); }\n+   | |____________________________________^\n \n error: aborting due to previous error\n "}, {"sha": "37e38ff60ae4bd55bf2eea482ed5babc3fcb3b45", "filename": "src/test/ui/issues/issue-12511.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/468254b38f8afd8d878ccce44b604bb6ce246dd4/src%2Ftest%2Fui%2Fissues%2Fissue-12511.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/468254b38f8afd8d878ccce44b604bb6ce246dd4/src%2Ftest%2Fui%2Fissues%2Fissue-12511.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-12511.stderr?ref=468254b38f8afd8d878ccce44b604bb6ce246dd4", "patch": "@@ -10,6 +10,11 @@ note: ...which requires computing the supertraits of `T2`...\n LL | trait T2 : T1 {\n    |            ^^\n    = note: ...which again requires computing the supertraits of `T1`, completing the cycle\n+note: cycle used when collecting item types in top-level module\n+  --> $DIR/issue-12511.rs:1:1\n+   |\n+LL | trait T1 : T2 {\n+   | ^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "7dc4e43fd573db65af75d8a03a307babd9ee46f3", "filename": "src/test/ui/issues/issue-20772.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/468254b38f8afd8d878ccce44b604bb6ce246dd4/src%2Ftest%2Fui%2Fissues%2Fissue-20772.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/468254b38f8afd8d878ccce44b604bb6ce246dd4/src%2Ftest%2Fui%2Fissues%2Fissue-20772.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20772.stderr?ref=468254b38f8afd8d878ccce44b604bb6ce246dd4", "patch": "@@ -8,6 +8,14 @@ LL | | {}\n    | |__^\n    |\n    = note: ...which again requires computing the supertraits of `T`, completing the cycle\n+note: cycle used when collecting item types in top-level module\n+  --> $DIR/issue-20772.rs:1:1\n+   |\n+LL | / trait T : Iterator<Item=Self::Item>\n+LL | | //~^ ERROR cycle detected\n+LL | | //~| ERROR associated type `Item` not found for `Self`\n+LL | | {}\n+   | |__^\n \n error[E0220]: associated type `Item` not found for `Self`\n   --> $DIR/issue-20772.rs:1:25"}, {"sha": "5f9709d1c649badb26b724e024d9ecda38bf9e78", "filename": "src/test/ui/issues/issue-20825.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/468254b38f8afd8d878ccce44b604bb6ce246dd4/src%2Ftest%2Fui%2Fissues%2Fissue-20825.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/468254b38f8afd8d878ccce44b604bb6ce246dd4/src%2Ftest%2Fui%2Fissues%2Fissue-20825.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20825.stderr?ref=468254b38f8afd8d878ccce44b604bb6ce246dd4", "patch": "@@ -5,6 +5,11 @@ LL | pub trait Processor: Subscriber<Input = Self::Input> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: ...which again requires computing the supertraits of `Processor`, completing the cycle\n+note: cycle used when collecting item types in top-level module\n+  --> $DIR/issue-20825.rs:5:1\n+   |\n+LL | pub trait Processor: Subscriber<Input = Self::Input> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "9e7e4b218b1c668cdba6e31068cc2af5c05316b2", "filename": "src/test/ui/issues/issue-22673.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/468254b38f8afd8d878ccce44b604bb6ce246dd4/src%2Ftest%2Fui%2Fissues%2Fissue-22673.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/468254b38f8afd8d878ccce44b604bb6ce246dd4/src%2Ftest%2Fui%2Fissues%2Fissue-22673.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22673.stderr?ref=468254b38f8afd8d878ccce44b604bb6ce246dd4", "patch": "@@ -5,6 +5,11 @@ LL | trait Expr : PartialEq<Self::Item> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: ...which again requires computing the supertraits of `Expr`, completing the cycle\n+note: cycle used when collecting item types in top-level module\n+  --> $DIR/issue-22673.rs:1:1\n+   |\n+LL | trait Expr : PartialEq<Self::Item> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "07ac421455cf6e02cae79ac7d9d2dfa15a78e943", "filename": "src/test/ui/issues/issue-34373.stderr", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/468254b38f8afd8d878ccce44b604bb6ce246dd4/src%2Ftest%2Fui%2Fissues%2Fissue-34373.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/468254b38f8afd8d878ccce44b604bb6ce246dd4/src%2Ftest%2Fui%2Fissues%2Fissue-34373.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34373.stderr?ref=468254b38f8afd8d878ccce44b604bb6ce246dd4", "patch": "@@ -10,6 +10,17 @@ note: ...which requires processing `DefaultFoo`...\n LL | type DefaultFoo = Foo;\n    |                   ^^^\n    = note: ...which again requires processing `Foo::T`, completing the cycle\n+note: cycle used when collecting item types in top-level module\n+  --> $DIR/issue-34373.rs:1:1\n+   |\n+LL | / #![allow(warnings)]\n+LL | |\n+LL | | trait Trait<T> {\n+LL | |     fn foo(_: T) {}\n+...  |\n+LL | | fn main() {\n+LL | | }\n+   | |_^\n \n error: aborting due to previous error\n "}, {"sha": "1da56ad05d28c11b3fd12e5a4cbb045a20d74904", "filename": "src/test/ui/resolve/issue-23305.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/468254b38f8afd8d878ccce44b604bb6ce246dd4/src%2Ftest%2Fui%2Fresolve%2Fissue-23305.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/468254b38f8afd8d878ccce44b604bb6ce246dd4/src%2Ftest%2Fui%2Fresolve%2Fissue-23305.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-23305.stderr?ref=468254b38f8afd8d878ccce44b604bb6ce246dd4", "patch": "@@ -5,6 +5,11 @@ LL | impl ToNbt<Self> {}\n    |            ^^^^\n    |\n    = note: ...which again requires processing `<impl at $DIR/issue-23305.rs:5:1: 5:20>`, completing the cycle\n+note: cycle used when collecting item types in top-level module\n+  --> $DIR/issue-23305.rs:1:1\n+   |\n+LL | pub trait ToNbt<T> {\n+   | ^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "1940c0cd2a4b7e163aff228de447f1c56e5b2e7e", "filename": "src/test/ui/resolve/resolve-self-in-impl.stderr", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/468254b38f8afd8d878ccce44b604bb6ce246dd4/src%2Ftest%2Fui%2Fresolve%2Fresolve-self-in-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/468254b38f8afd8d878ccce44b604bb6ce246dd4/src%2Ftest%2Fui%2Fresolve%2Fresolve-self-in-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-self-in-impl.stderr?ref=468254b38f8afd8d878ccce44b604bb6ce246dd4", "patch": "@@ -5,6 +5,17 @@ LL | impl Tr for Self {} //~ ERROR cycle detected\n    |             ^^^^\n    |\n    = note: ...which again requires processing `<impl at $DIR/resolve-self-in-impl.rs:14:1: 14:20>`, completing the cycle\n+note: cycle used when collecting item types in top-level module\n+  --> $DIR/resolve-self-in-impl.rs:1:1\n+   |\n+LL | / #![feature(associated_type_defaults)]\n+LL | |\n+LL | | struct S<T = u8>(T);\n+LL | | trait Tr<T = u8> {\n+...  |\n+LL | |\n+LL | | fn main() {}\n+   | |____________^\n \n error[E0391]: cycle detected when processing `<impl at $DIR/resolve-self-in-impl.rs:15:1: 15:23>`\n   --> $DIR/resolve-self-in-impl.rs:15:15\n@@ -13,6 +24,17 @@ LL | impl Tr for S<Self> {} //~ ERROR cycle detected\n    |               ^^^^\n    |\n    = note: ...which again requires processing `<impl at $DIR/resolve-self-in-impl.rs:15:1: 15:23>`, completing the cycle\n+note: cycle used when collecting item types in top-level module\n+  --> $DIR/resolve-self-in-impl.rs:1:1\n+   |\n+LL | / #![feature(associated_type_defaults)]\n+LL | |\n+LL | | struct S<T = u8>(T);\n+LL | | trait Tr<T = u8> {\n+...  |\n+LL | |\n+LL | | fn main() {}\n+   | |____________^\n \n error[E0391]: cycle detected when processing `<impl at $DIR/resolve-self-in-impl.rs:16:1: 16:13>`\n   --> $DIR/resolve-self-in-impl.rs:16:6\n@@ -21,6 +43,17 @@ LL | impl Self {} //~ ERROR cycle detected\n    |      ^^^^\n    |\n    = note: ...which again requires processing `<impl at $DIR/resolve-self-in-impl.rs:16:1: 16:13>`, completing the cycle\n+note: cycle used when collecting item types in top-level module\n+  --> $DIR/resolve-self-in-impl.rs:1:1\n+   |\n+LL | / #![feature(associated_type_defaults)]\n+LL | |\n+LL | | struct S<T = u8>(T);\n+LL | | trait Tr<T = u8> {\n+...  |\n+LL | |\n+LL | | fn main() {}\n+   | |____________^\n \n error[E0391]: cycle detected when processing `<impl at $DIR/resolve-self-in-impl.rs:17:1: 17:16>`\n   --> $DIR/resolve-self-in-impl.rs:17:8\n@@ -29,6 +62,17 @@ LL | impl S<Self> {} //~ ERROR cycle detected\n    |        ^^^^\n    |\n    = note: ...which again requires processing `<impl at $DIR/resolve-self-in-impl.rs:17:1: 17:16>`, completing the cycle\n+note: cycle used when collecting item types in top-level module\n+  --> $DIR/resolve-self-in-impl.rs:1:1\n+   |\n+LL | / #![feature(associated_type_defaults)]\n+LL | |\n+LL | | struct S<T = u8>(T);\n+LL | | trait Tr<T = u8> {\n+...  |\n+LL | |\n+LL | | fn main() {}\n+   | |____________^\n \n error[E0391]: cycle detected when processing `<impl at $DIR/resolve-self-in-impl.rs:18:1: 18:26>`\n   --> $DIR/resolve-self-in-impl.rs:18:1\n@@ -37,6 +81,17 @@ LL | impl Tr<Self::A> for S {} //~ ERROR cycle detected\n    | ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: ...which again requires processing `<impl at $DIR/resolve-self-in-impl.rs:18:1: 18:26>`, completing the cycle\n+note: cycle used when collecting item types in top-level module\n+  --> $DIR/resolve-self-in-impl.rs:1:1\n+   |\n+LL | / #![feature(associated_type_defaults)]\n+LL | |\n+LL | | struct S<T = u8>(T);\n+LL | | trait Tr<T = u8> {\n+...  |\n+LL | |\n+LL | | fn main() {}\n+   | |____________^\n \n error: aborting due to 5 previous errors\n "}, {"sha": "22df5e42d2607d57ef4c57954938dfee2ed8811b", "filename": "src/test/ui/simd-intrinsic/simd-intrinsic-declaration-type.stderr", "status": "modified", "additions": 36, "deletions": 36, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/468254b38f8afd8d878ccce44b604bb6ce246dd4/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-declaration-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/468254b38f8afd8d878ccce44b604bb6ce246dd4/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-declaration-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-declaration-type.stderr?ref=468254b38f8afd8d878ccce44b604bb6ce246dd4", "patch": "@@ -1,39 +1,3 @@\n-error[E0442]: intrinsic argument 1 has wrong type: found `u16`, expected `i16`\n-  --> $DIR/simd-intrinsic-declaration-type.rs:33:9\n-   |\n-LL |         fn x86_mm_adds_epi16(x: u16x8, y: u16x8) -> u16x8;\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error[E0442]: intrinsic argument 2 has wrong type: found `u16`, expected `i16`\n-  --> $DIR/simd-intrinsic-declaration-type.rs:33:9\n-   |\n-LL |         fn x86_mm_adds_epi16(x: u16x8, y: u16x8) -> u16x8;\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error[E0442]: intrinsic return value has wrong type: found `u16`, expected `i16`\n-  --> $DIR/simd-intrinsic-declaration-type.rs:33:9\n-   |\n-LL |         fn x86_mm_adds_epi16(x: u16x8, y: u16x8) -> u16x8;\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error[E0442]: intrinsic argument 1 has wrong type: found `i16`, expected `u16`\n-  --> $DIR/simd-intrinsic-declaration-type.rs:37:9\n-   |\n-LL |         fn x86_mm_adds_epu16(x: i16x8, y: i16x8) -> i16x8;\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error[E0442]: intrinsic argument 2 has wrong type: found `i16`, expected `u16`\n-  --> $DIR/simd-intrinsic-declaration-type.rs:37:9\n-   |\n-LL |         fn x86_mm_adds_epu16(x: i16x8, y: i16x8) -> i16x8;\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error[E0442]: intrinsic return value has wrong type: found `i16`, expected `u16`\n-  --> $DIR/simd-intrinsic-declaration-type.rs:37:9\n-   |\n-LL |         fn x86_mm_adds_epu16(x: i16x8, y: i16x8) -> i16x8;\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n error[E0442]: intrinsic argument 1 has wrong type: found vector with length 16, expected length 8\n   --> $DIR/simd-intrinsic-declaration-type.rs:45:5\n    |\n@@ -70,6 +34,42 @@ error[E0442]: intrinsic return value has wrong type: found `i32`, expected `f32`\n LL |     fn x86_mm_max_ps(x: i32x4, y: i32x4) -> i32x4;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+error[E0442]: intrinsic argument 1 has wrong type: found `u16`, expected `i16`\n+  --> $DIR/simd-intrinsic-declaration-type.rs:33:9\n+   |\n+LL |         fn x86_mm_adds_epi16(x: u16x8, y: u16x8) -> u16x8;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0442]: intrinsic argument 2 has wrong type: found `u16`, expected `i16`\n+  --> $DIR/simd-intrinsic-declaration-type.rs:33:9\n+   |\n+LL |         fn x86_mm_adds_epi16(x: u16x8, y: u16x8) -> u16x8;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0442]: intrinsic return value has wrong type: found `u16`, expected `i16`\n+  --> $DIR/simd-intrinsic-declaration-type.rs:33:9\n+   |\n+LL |         fn x86_mm_adds_epi16(x: u16x8, y: u16x8) -> u16x8;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0442]: intrinsic argument 1 has wrong type: found `i16`, expected `u16`\n+  --> $DIR/simd-intrinsic-declaration-type.rs:37:9\n+   |\n+LL |         fn x86_mm_adds_epu16(x: i16x8, y: i16x8) -> i16x8;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0442]: intrinsic argument 2 has wrong type: found `i16`, expected `u16`\n+  --> $DIR/simd-intrinsic-declaration-type.rs:37:9\n+   |\n+LL |         fn x86_mm_adds_epu16(x: i16x8, y: i16x8) -> i16x8;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0442]: intrinsic return value has wrong type: found `i16`, expected `u16`\n+  --> $DIR/simd-intrinsic-declaration-type.rs:37:9\n+   |\n+LL |         fn x86_mm_adds_epu16(x: i16x8, y: i16x8) -> i16x8;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n error: aborting due to 12 previous errors\n \n For more information about this error, try `rustc --explain E0442`."}]}