{"sha": "8836a9da72073174aa1295952af2ad2475a88485", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4MzZhOWRhNzIwNzMxNzRhYTEyOTU5NTJhZjJhZDI0NzVhODg0ODU=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2016-12-24T19:29:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-12-24T19:29:32Z"}, "message": "Rollup merge of #38557 - michaelwoerister:inline-asm-ich, r=nikomatsakis\n\nincr. comp.: Improve InlineAsm hashing and add test case\n\nr? @nikomatsakis", "tree": {"sha": "b612add2041df36423c41089abe3c03b4528c88f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b612add2041df36423c41089abe3c03b4528c88f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8836a9da72073174aa1295952af2ad2475a88485", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8836a9da72073174aa1295952af2ad2475a88485", "html_url": "https://github.com/rust-lang/rust/commit/8836a9da72073174aa1295952af2ad2475a88485", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8836a9da72073174aa1295952af2ad2475a88485/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "abf478455ddeb70ad94226de367a19c1afbac3f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/abf478455ddeb70ad94226de367a19c1afbac3f2", "html_url": "https://github.com/rust-lang/rust/commit/abf478455ddeb70ad94226de367a19c1afbac3f2"}, {"sha": "6a51d374904e0486b2f1de2a33027ea80c1049f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a51d374904e0486b2f1de2a33027ea80c1049f0", "html_url": "https://github.com/rust-lang/rust/commit/6a51d374904e0486b2f1de2a33027ea80c1049f0"}], "stats": {"total": 311, "additions": 308, "deletions": 3}, "files": [{"sha": "ccae5f3b003662a08cca8ac62fe3173bef9259c4", "filename": "src/librustc_incremental/calculate_svh/svh_visitor.rs", "status": "modified", "additions": 43, "deletions": 3, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/8836a9da72073174aa1295952af2ad2475a88485/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8836a9da72073174aa1295952af2ad2475a88485/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs?ref=8836a9da72073174aa1295952af2ad2475a88485", "patch": "@@ -28,7 +28,7 @@ use rustc::hir::def_id::DefId;\n use rustc::hir::intravisit as visit;\n use rustc::ty::TyCtxt;\n use rustc_data_structures::fnv;\n-use std::hash::Hash;\n+use std::hash::{Hash, Hasher};\n \n use super::def_path_hash::DefPathHashes;\n use super::caching_codemap_view::CachingCodemapView;\n@@ -264,7 +264,7 @@ enum SawExprComponent<'a> {\n     SawExprPath,\n     SawExprAddrOf(hir::Mutability),\n     SawExprRet,\n-    SawExprInlineAsm(&'a hir::InlineAsm),\n+    SawExprInlineAsm(StableInlineAsm<'a>),\n     SawExprStruct,\n     SawExprRepeat,\n }\n@@ -340,7 +340,7 @@ fn saw_expr<'a>(node: &'a Expr_,\n         ExprBreak(label, _)      => (SawExprBreak(label.map(|l| l.name.as_str())), false),\n         ExprAgain(label)         => (SawExprAgain(label.map(|l| l.name.as_str())), false),\n         ExprRet(..)              => (SawExprRet, false),\n-        ExprInlineAsm(ref a,..)  => (SawExprInlineAsm(a), false),\n+        ExprInlineAsm(ref a,..)  => (SawExprInlineAsm(StableInlineAsm(a)), false),\n         ExprStruct(..)           => (SawExprStruct, false),\n         ExprRepeat(..)           => (SawExprRepeat, false),\n     }\n@@ -491,6 +491,46 @@ enum SawSpanExpnKind {\n     SomeExpansion,\n }\n \n+/// A wrapper that provides a stable Hash implementation.\n+struct StableInlineAsm<'a>(&'a InlineAsm);\n+\n+impl<'a> Hash for StableInlineAsm<'a> {\n+    fn hash<H: Hasher>(&self, state: &mut H) {\n+        let InlineAsm {\n+            asm,\n+            asm_str_style,\n+            ref outputs,\n+            ref inputs,\n+            ref clobbers,\n+            volatile,\n+            alignstack,\n+            dialect,\n+            expn_id: _, // This is used for error reporting\n+        } = *self.0;\n+\n+        asm.as_str().hash(state);\n+        asm_str_style.hash(state);\n+        outputs.len().hash(state);\n+        for output in outputs {\n+            let InlineAsmOutput { constraint, is_rw, is_indirect } = *output;\n+            constraint.as_str().hash(state);\n+            is_rw.hash(state);\n+            is_indirect.hash(state);\n+        }\n+        inputs.len().hash(state);\n+        for input in inputs {\n+            input.as_str().hash(state);\n+        }\n+        clobbers.len().hash(state);\n+        for clobber in clobbers {\n+            clobber.as_str().hash(state);\n+        }\n+        volatile.hash(state);\n+        alignstack.hash(state);\n+        dialect.hash(state);\n+    }\n+}\n+\n macro_rules! hash_attrs {\n     ($visitor:expr, $attrs:expr) => ({\n         let attrs = $attrs;"}, {"sha": "a1057c036d6c4f771ffeb63ef270b3bd92b6b69b", "filename": "src/test/incremental/hashes/inline_asm.rs", "status": "added", "additions": 265, "deletions": 0, "changes": 265, "blob_url": "https://github.com/rust-lang/rust/blob/8836a9da72073174aa1295952af2ad2475a88485/src%2Ftest%2Fincremental%2Fhashes%2Finline_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8836a9da72073174aa1295952af2ad2475a88485/src%2Ftest%2Fincremental%2Fhashes%2Finline_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Finline_asm.rs?ref=8836a9da72073174aa1295952af2ad2475a88485", "patch": "@@ -0,0 +1,265 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+\n+// This test case tests the incremental compilation hash (ICH) implementation\n+// for inline asm.\n+\n+// The general pattern followed here is: Change one thing between rev1 and rev2\n+// and make sure that the hash has changed, then change nothing between rev2 and\n+// rev3 and make sure that the hash has not changed.\n+\n+// must-compile-successfully\n+// revisions: cfail1 cfail2 cfail3\n+// compile-flags: -Z query-dep-graph\n+\n+#![allow(warnings)]\n+#![feature(rustc_attrs)]\n+#![feature(asm)]\n+#![crate_type=\"rlib\"]\n+\n+\n+\n+// Change template -------------------------------------------------------------\n+#[cfg(cfail1)]\n+#[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n+fn change_template(a: i32) -> i32 {\n+    let c: i32;\n+    unsafe {\n+        asm!(\"add 1, $0\"\n+             : \"=r\"(c)\n+             : \"0\"(a)\n+             :\n+             :\n+             );\n+    }\n+    c\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+#[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n+fn change_template(a: i32) -> i32 {\n+    let c: i32;\n+    unsafe {\n+        asm!(\"add 2, $0\"\n+             : \"=r\"(c)\n+             : \"0\"(a)\n+             :\n+             :\n+             );\n+    }\n+    c\n+}\n+\n+\n+\n+// Change output -------------------------------------------------------------\n+#[cfg(cfail1)]\n+#[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n+fn change_output(a: i32) -> i32 {\n+    let mut _out1: i32 = 0;\n+    let mut _out2: i32 = 0;\n+    unsafe {\n+        asm!(\"add 1, $0\"\n+             : \"=r\"(_out1)\n+             : \"0\"(a)\n+             :\n+             :\n+             );\n+    }\n+    _out1\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+#[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n+fn change_output(a: i32) -> i32 {\n+    let mut _out1: i32 = 0;\n+    let mut _out2: i32 = 0;\n+    unsafe {\n+        asm!(\"add 1, $0\"\n+             : \"=r\"(_out2)\n+             : \"0\"(a)\n+             :\n+             :\n+             );\n+    }\n+    _out1\n+}\n+\n+\n+\n+// Change input -------------------------------------------------------------\n+#[cfg(cfail1)]\n+#[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n+fn change_input(_a: i32, _b: i32) -> i32 {\n+    let _out;\n+    unsafe {\n+        asm!(\"add 1, $0\"\n+             : \"=r\"(_out)\n+             : \"0\"(_a)\n+             :\n+             :\n+             );\n+    }\n+    _out\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+#[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n+fn change_input(_a: i32, _b: i32) -> i32 {\n+    let _out;\n+    unsafe {\n+        asm!(\"add 1, $0\"\n+             : \"=r\"(_out)\n+             : \"0\"(_b)\n+             :\n+             :\n+             );\n+    }\n+    _out\n+}\n+\n+\n+\n+// Change input constraint -----------------------------------------------------\n+#[cfg(cfail1)]\n+#[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n+fn change_input_constraint(_a: i32, _b: i32) -> i32 {\n+    let _out;\n+    unsafe {\n+        asm!(\"add 1, $0\"\n+             : \"=r\"(_out)\n+             : \"0\"(_a), \"r\"(_b)\n+             :\n+             :\n+             );\n+    }\n+    _out\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+#[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n+fn change_input_constraint(_a: i32, _b: i32) -> i32 {\n+    let _out;\n+    unsafe {\n+        asm!(\"add 1, $0\"\n+             : \"=r\"(_out)\n+             : \"r\"(_a), \"0\"(_b)\n+             :\n+             :\n+             );\n+    }\n+    _out\n+}\n+\n+\n+\n+// Change clobber --------------------------------------------------------------\n+#[cfg(cfail1)]\n+#[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n+fn change_clobber(_a: i32) -> i32 {\n+    let _out;\n+    unsafe {\n+        asm!(\"add 1, $0\"\n+             : \"=r\"(_out)\n+             : \"0\"(_a)\n+             :\n+             :\n+             );\n+    }\n+    _out\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+#[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n+fn change_clobber(_a: i32) -> i32 {\n+    let _out;\n+    unsafe {\n+        asm!(\"add 1, $0\"\n+             : \"=r\"(_out)\n+             : \"0\"(_a)\n+             : \"eax\"\n+             :\n+             );\n+    }\n+    _out\n+}\n+\n+\n+\n+// Change options --------------------------------------------------------------\n+#[cfg(cfail1)]\n+#[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n+fn change_options(_a: i32) -> i32 {\n+    let _out;\n+    unsafe {\n+        asm!(\"add 1, $0\"\n+             : \"=r\"(_out)\n+             : \"0\"(_a)\n+             :\n+             :\n+             );\n+    }\n+    _out\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+#[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n+fn change_options(_a: i32) -> i32 {\n+    let _out;\n+    unsafe {\n+        asm!(\"add 1, $0\"\n+             : \"=r\"(_out)\n+             : \"0\"(_a)\n+             :\n+             : \"volatile\"\n+             );\n+    }\n+    _out\n+}\n+\n+\n+"}]}