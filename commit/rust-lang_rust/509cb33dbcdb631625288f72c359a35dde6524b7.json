{"sha": "509cb33dbcdb631625288f72c359a35dde6524b7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwOWNiMzNkYmNkYjYzMTYyNTI4OGY3MmMzNTlhMzVkZGU2NTI0Yjc=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-01-14T22:49:30Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-01-16T17:49:13Z"}, "message": "review comments", "tree": {"sha": "82c81cd4edecc5d44b4db29839f884f04b642ec1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82c81cd4edecc5d44b4db29839f884f04b642ec1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/509cb33dbcdb631625288f72c359a35dde6524b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/509cb33dbcdb631625288f72c359a35dde6524b7", "html_url": "https://github.com/rust-lang/rust/commit/509cb33dbcdb631625288f72c359a35dde6524b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/509cb33dbcdb631625288f72c359a35dde6524b7/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b36c187dcbb8a4b6555fe046194f2b6deb74230", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b36c187dcbb8a4b6555fe046194f2b6deb74230", "html_url": "https://github.com/rust-lang/rust/commit/5b36c187dcbb8a4b6555fe046194f2b6deb74230"}], "stats": {"total": 17, "additions": 11, "deletions": 6}, "files": [{"sha": "c2f562b4bc7b2996016fbc50e834db86665cd0df", "filename": "src/librustc/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/509cb33dbcdb631625288f72c359a35dde6524b7/src%2Flibrustc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/509cb33dbcdb631625288f72c359a35dde6524b7/src%2Flibrustc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=509cb33dbcdb631625288f72c359a35dde6524b7", "patch": "@@ -624,12 +624,9 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             } else {\n                 // We still want to verify whether all the return types conform to each other.\n                 for expr in &visitor.0 {\n-                    if let Some(returned_ty) = tables.node_type_opt(expr.hir_id) {\n-                        if let Some(ty) = last_ty {\n-                            all_returns_have_same_type &= ty == returned_ty;\n-                        }\n-                        last_ty = Some(returned_ty);\n-                    }\n+                    let returned_ty = tables.node_type_opt(expr.hir_id);\n+                    all_returns_have_same_type &= last_ty == returned_ty || last_ty.is_none();\n+                    last_ty = returned_ty;\n                 }\n             }\n "}, {"sha": "8aa2cb50342245a18533218d278a6f67b603f2f5", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/509cb33dbcdb631625288f72c359a35dde6524b7/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/509cb33dbcdb631625288f72c359a35dde6524b7/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=509cb33dbcdb631625288f72c359a35dde6524b7", "patch": "@@ -1372,6 +1372,7 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n                     &snippet[5..]\n                 ));\n             }\n+            err.help(\"alternatively, create a new `enum` with a variant for each returned type\");\n             let impl_trait_msg = \"for information on `impl Trait`, see \\\n                 <https://doc.rust-lang.org/book/ch10-02-traits.html\\\n                 #returning-types-that-implement-traits>\";"}, {"sha": "ceb32dd4cd33e488864667c005c26c50edc50365", "filename": "src/test/ui/impl-trait/equality.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/509cb33dbcdb631625288f72c359a35dde6524b7/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/509cb33dbcdb631625288f72c359a35dde6524b7/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.stderr?ref=509cb33dbcdb631625288f72c359a35dde6524b7", "patch": "@@ -12,6 +12,7 @@ LL |     0_u32\n    |\n    = note: to return `impl Trait`, all returned values must be of the same type\n    = help: you can instead return a trait object using `Box<dyn Foo>`\n+   = help: alternatively, create a new `enum` with a variant for each returned type\n    = note: for information on `impl Trait`, see <https://doc.rust-lang.org/book/ch10-02-traits.html#returning-types-that-implement-traits>\n    = note: for information on trait objects, see <https://doc.rust-lang.org/book/ch17-02-trait-objects.html#using-trait-objects-that-allow-for-values-of-different-types>\n "}, {"sha": "87daab5ca7a22886e8c75671fcb16bf5f7809137", "filename": "src/test/ui/point-to-type-err-cause-on-impl-trait-return.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/509cb33dbcdb631625288f72c359a35dde6524b7/src%2Ftest%2Fui%2Fpoint-to-type-err-cause-on-impl-trait-return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/509cb33dbcdb631625288f72c359a35dde6524b7/src%2Ftest%2Fui%2Fpoint-to-type-err-cause-on-impl-trait-return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpoint-to-type-err-cause-on-impl-trait-return.stderr?ref=509cb33dbcdb631625288f72c359a35dde6524b7", "patch": "@@ -12,6 +12,7 @@ LL |     1u32\n    |\n    = note: to return `impl Trait`, all returned values must be of the same type\n    = help: you can instead return a trait object using `Box<dyn std::fmt::Display>`\n+   = help: alternatively, create a new `enum` with a variant for each returned type\n    = note: for information on `impl Trait`, see <https://doc.rust-lang.org/book/ch10-02-traits.html#returning-types-that-implement-traits>\n    = note: for information on trait objects, see <https://doc.rust-lang.org/book/ch17-02-trait-objects.html#using-trait-objects-that-allow-for-values-of-different-types>\n \n@@ -29,6 +30,7 @@ LL |         return 1u32;\n    |\n    = note: to return `impl Trait`, all returned values must be of the same type\n    = help: you can instead return a trait object using `Box<dyn std::fmt::Display>`\n+   = help: alternatively, create a new `enum` with a variant for each returned type\n    = note: for information on `impl Trait`, see <https://doc.rust-lang.org/book/ch10-02-traits.html#returning-types-that-implement-traits>\n    = note: for information on trait objects, see <https://doc.rust-lang.org/book/ch17-02-trait-objects.html#using-trait-objects-that-allow-for-values-of-different-types>\n \n@@ -46,6 +48,7 @@ LL |         1u32\n    |\n    = note: to return `impl Trait`, all returned values must be of the same type\n    = help: you can instead return a trait object using `Box<dyn std::fmt::Display>`\n+   = help: alternatively, create a new `enum` with a variant for each returned type\n    = note: for information on `impl Trait`, see <https://doc.rust-lang.org/book/ch10-02-traits.html#returning-types-that-implement-traits>\n    = note: for information on trait objects, see <https://doc.rust-lang.org/book/ch17-02-trait-objects.html#using-trait-objects-that-allow-for-values-of-different-types>\n \n@@ -75,6 +78,7 @@ LL |         _ => 1u32,\n    |\n    = note: to return `impl Trait`, all returned values must be of the same type\n    = help: you can instead return a trait object using `Box<dyn std::fmt::Display>`\n+   = help: alternatively, create a new `enum` with a variant for each returned type\n    = note: for information on `impl Trait`, see <https://doc.rust-lang.org/book/ch10-02-traits.html#returning-types-that-implement-traits>\n    = note: for information on trait objects, see <https://doc.rust-lang.org/book/ch17-02-trait-objects.html#using-trait-objects-that-allow-for-values-of-different-types>\n \n@@ -94,6 +98,7 @@ LL | |     }\n    |\n    = note: to return `impl Trait`, all returned values must be of the same type\n    = help: you can instead return a trait object using `Box<dyn std::fmt::Display>`\n+   = help: alternatively, create a new `enum` with a variant for each returned type\n    = note: for information on `impl Trait`, see <https://doc.rust-lang.org/book/ch10-02-traits.html#returning-types-that-implement-traits>\n    = note: for information on trait objects, see <https://doc.rust-lang.org/book/ch17-02-trait-objects.html#using-trait-objects-that-allow-for-values-of-different-types>\n \n@@ -111,6 +116,7 @@ LL |             1u32\n    |\n    = note: to return `impl Trait`, all returned values must be of the same type\n    = help: you can instead return a trait object using `Box<dyn std::fmt::Display>`\n+   = help: alternatively, create a new `enum` with a variant for each returned type\n    = note: for information on `impl Trait`, see <https://doc.rust-lang.org/book/ch10-02-traits.html#returning-types-that-implement-traits>\n    = note: for information on trait objects, see <https://doc.rust-lang.org/book/ch17-02-trait-objects.html#using-trait-objects-that-allow-for-values-of-different-types>\n "}]}