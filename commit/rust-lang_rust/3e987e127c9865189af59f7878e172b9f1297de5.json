{"sha": "3e987e127c9865189af59f7878e172b9f1297de5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlOTg3ZTEyN2M5ODY1MTg5YWY1OWY3ODc4ZTE3MmI5ZjEyOTdkZTU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-02-27T11:32:06Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-02-27T12:07:40Z"}, "message": "create more fake files for cdylibs and staticlibs", "tree": {"sha": "6db847fc1dededde57b10a95d0b4aef7b7022cc3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6db847fc1dededde57b10a95d0b4aef7b7022cc3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e987e127c9865189af59f7878e172b9f1297de5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e987e127c9865189af59f7878e172b9f1297de5", "html_url": "https://github.com/rust-lang/rust/commit/3e987e127c9865189af59f7878e172b9f1297de5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e987e127c9865189af59f7878e172b9f1297de5/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f85bb0fb09a1932cdc17ebb0dcd13b81c93346f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/f85bb0fb09a1932cdc17ebb0dcd13b81c93346f7", "html_url": "https://github.com/rust-lang/rust/commit/f85bb0fb09a1932cdc17ebb0dcd13b81c93346f7"}], "stats": {"total": 26, "additions": 16, "deletions": 10}, "files": [{"sha": "051f3dd3b6fc7bda508dfc0f1d69a7b1a3dfa3c6", "filename": "cargo-miri/bin.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3e987e127c9865189af59f7878e172b9f1297de5/cargo-miri%2Fbin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e987e127c9865189af59f7878e172b9f1297de5/cargo-miri%2Fbin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/cargo-miri%2Fbin.rs?ref=3e987e127c9865189af59f7878e172b9f1297de5", "patch": "@@ -692,12 +692,17 @@ fn phase_cargo_rustc(mut args: env::Args) {\n     exec(cmd);\n \n     // Create a stub .rlib file if \"link\" was requested by cargo.\n+    // This is necessary to prevent cargo from doing rebuilds all the time.\n     if emit_link_hack {\n         // Some platforms prepend \"lib\", some do not... let's just create both files.\n-        let filename = out_filename(\"lib\", \".rlib\");\n-        File::create(filename).expect(\"failed to create rlib file\");\n-        let filename = out_filename(\"\", \".rlib\");\n-        File::create(filename).expect(\"failed to create rlib file\");\n+        File::create(out_filename(\"lib\", \".rlib\")).expect(\"failed to create fake .rlib file\");\n+        File::create(out_filename(\"\", \".rlib\")).expect(\"failed to create fake .rlib file\");\n+        // Just in case this is a cdylib or staticlib, also create those fake files.\n+        File::create(out_filename(\"lib\", \".so\")).expect(\"failed to create fake .so file\");\n+        File::create(out_filename(\"lib\", \".a\")).expect(\"failed to create fake .a file\");\n+        File::create(out_filename(\"lib\", \".dylib\")).expect(\"failed to create fake .dylib file\");\n+        File::create(out_filename(\"\", \".dll\")).expect(\"failed to create fake .dll file\");\n+        File::create(out_filename(\"\", \".lib\")).expect(\"failed to create fake .lib file\");\n     }\n }\n "}, {"sha": "b9259b7d0d2253b9aaac90913735c96a66bb0597", "filename": "test-cargo-miri/run-test.py", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3e987e127c9865189af59f7878e172b9f1297de5/test-cargo-miri%2Frun-test.py", "raw_url": "https://github.com/rust-lang/rust/raw/3e987e127c9865189af59f7878e172b9f1297de5/test-cargo-miri%2Frun-test.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2Frun-test.py?ref=3e987e127c9865189af59f7878e172b9f1297de5", "patch": "@@ -50,7 +50,7 @@ def test(name, cmd, stdout_ref, stderr_ref, stdin=b'', env={}):\n     print(\"--- END stderr ---\")\n     fail(\"exit code was {}\".format(p.returncode))\n \n-def test_rebuild(name, cmd, rebuild_count_expected):\n+def test_no_rebuild(name, cmd):\n     print(\"Testing {}...\".format(name))\n     p = subprocess.Popen(\n         cmd,\n@@ -62,12 +62,12 @@ def test_rebuild(name, cmd, rebuild_count_expected):\n     stderr = stderr.decode(\"UTF-8\")\n     if p.returncode != 0:\n         fail(\"rebuild failed\");\n-    rebuild_count =  stderr.count(\" Compiling \");\n-    if rebuild_count != rebuild_count_expected:\n+    # Also check for 'Running' as a sanity check.\n+    if stderr.count(\" Compiling \") > 0 or stderr.count(\" Running \") == 0:\n         print(\"--- BEGIN stderr ---\")\n         print(stderr, end=\"\")\n         print(\"--- END stderr ---\")\n-        fail(\"Expected {} rebuild(s), but got {}\".format(rebuild_count_expected, rebuild_count));\n+        fail(\"Something was being rebuilt when it should not be (or we got no output)\");\n \n def test_cargo_miri_run():\n     test(\"`cargo miri run` (no isolation)\",\n@@ -89,9 +89,10 @@ def test_cargo_miri_run():\n         env={'MIRIFLAGS': \"-Zmiri-disable-isolation\"},\n     )\n     # Special test: run it again *without* `-q` to make sure nothing is being rebuilt (Miri issue #1722)\n-    test_rebuild(\"`cargo miri run` (clean rebuild)\",\n+    # FIXME: move this test up to right after the first `test`\n+    # (currently that fails, only the 3rd and later runs are really clean... see Miri issue #1722)\n+    test_no_rebuild(\"`cargo miri run` (no rebuild)\",\n         cargo_miri(\"run\", quiet=False) + [\"--\", \"\"],\n-        rebuild_count_expected=1,\n     )\n \n def test_cargo_miri_test():"}]}