{"sha": "574bf88e3e85399241683805c43d1524ff704c8e", "node_id": "C_kwDOAAsO6NoAKDU3NGJmODhlM2U4NTM5OTI0MTY4MzgwNWM0M2QxNTI0ZmY3MDRjOGU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-07T13:17:28Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-07T13:17:28Z"}, "message": "Auto merge of #8635 - pbor:unsigned-abs, r=giraffate\n\nAdd a lint to detect cast to unsigned for abs() and suggest unsigned_\u2026\n\n\u2026abs()\n\nchangelog: Add a [`cast_abs_to_unsigned`] that checks for uses of `abs()` that are cast to the corresponding unsigned integer type and suggest to replace them with `unsigned_abs()`.", "tree": {"sha": "ad935a2537b94526233e396bf94af2843e1564f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad935a2537b94526233e396bf94af2843e1564f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/574bf88e3e85399241683805c43d1524ff704c8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/574bf88e3e85399241683805c43d1524ff704c8e", "html_url": "https://github.com/rust-lang/rust/commit/574bf88e3e85399241683805c43d1524ff704c8e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/574bf88e3e85399241683805c43d1524ff704c8e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "650a0e52b895be903b5e910964d6bd5a49c32433", "url": "https://api.github.com/repos/rust-lang/rust/commits/650a0e52b895be903b5e910964d6bd5a49c32433", "html_url": "https://github.com/rust-lang/rust/commit/650a0e52b895be903b5e910964d6bd5a49c32433"}, {"sha": "f2bbb5fac0bd21c2ccd06f27c3b99d4f7ed51841", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2bbb5fac0bd21c2ccd06f27c3b99d4f7ed51841", "html_url": "https://github.com/rust-lang/rust/commit/f2bbb5fac0bd21c2ccd06f27c3b99d4f7ed51841"}], "stats": {"total": 119, "additions": 111, "deletions": 8}, "files": [{"sha": "fd0e58d511658204cb33c4dc2e5d32247c9a50cf", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/574bf88e3e85399241683805c43d1524ff704c8e/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/574bf88e3e85399241683805c43d1524ff704c8e/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=574bf88e3e85399241683805c43d1524ff704c8e", "patch": "@@ -3201,6 +3201,7 @@ Released 2018-09-13\n [`bytes_nth`]: https://rust-lang.github.io/rust-clippy/master/index.html#bytes_nth\n [`cargo_common_metadata`]: https://rust-lang.github.io/rust-clippy/master/index.html#cargo_common_metadata\n [`case_sensitive_file_extension_comparisons`]: https://rust-lang.github.io/rust-clippy/master/index.html#case_sensitive_file_extension_comparisons\n+[`cast_abs_to_unsigned`]: https://rust-lang.github.io/rust-clippy/master/index.html#cast_abs_to_unsigned\n [`cast_enum_constructor`]: https://rust-lang.github.io/rust-clippy/master/index.html#cast_enum_constructor\n [`cast_enum_truncation`]: https://rust-lang.github.io/rust-clippy/master/index.html#cast_enum_truncation\n [`cast_lossless`]: https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless"}, {"sha": "e9b0f1f672de0bb06e6178fa95746c3aba60d600", "filename": "clippy_lints/src/casts/cast_abs_to_unsigned.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/574bf88e3e85399241683805c43d1524ff704c8e/clippy_lints%2Fsrc%2Fcasts%2Fcast_abs_to_unsigned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/574bf88e3e85399241683805c43d1524ff704c8e/clippy_lints%2Fsrc%2Fcasts%2Fcast_abs_to_unsigned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fcast_abs_to_unsigned.rs?ref=574bf88e3e85399241683805c43d1524ff704c8e", "patch": "@@ -0,0 +1,42 @@\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::sugg::Sugg;\n+use clippy_utils::{meets_msrv, msrvs};\n+use if_chain::if_chain;\n+use rustc_errors::Applicability;\n+use rustc_hir::{Expr, ExprKind};\n+use rustc_lint::LateContext;\n+use rustc_middle::ty::Ty;\n+use rustc_semver::RustcVersion;\n+\n+use super::CAST_ABS_TO_UNSIGNED;\n+\n+pub(super) fn check(\n+    cx: &LateContext<'_>,\n+    expr: &Expr<'_>,\n+    cast_expr: &Expr<'_>,\n+    cast_from: Ty<'_>,\n+    cast_to: Ty<'_>,\n+    msrv: &Option<RustcVersion>,\n+) {\n+    if_chain! {\n+        if meets_msrv(msrv.as_ref(), &msrvs::UNSIGNED_ABS);\n+        if cast_from.is_integral();\n+        if cast_to.is_integral();\n+        if cast_from.is_signed();\n+        if !cast_to.is_signed();\n+        if let ExprKind::MethodCall(method_path, args, _) = cast_expr.kind;\n+        if let method_name = method_path.ident.name.as_str();\n+        if method_name == \"abs\";\n+        then {\n+            span_lint_and_sugg(\n+                cx,\n+                CAST_ABS_TO_UNSIGNED,\n+                expr.span,\n+                &format!(\"casting the result of `{}::{}()` to {}\", cast_from, method_name, cast_to),\n+                \"replace with\",\n+                format!(\"{}.unsigned_abs()\", Sugg::hir(cx, &args[0], \"..\")),\n+                Applicability::MachineApplicable,\n+            );\n+        }\n+    }\n+}"}, {"sha": "55c1f085657bb1842eafd7c52ff5e75a5b68321c", "filename": "clippy_lints/src/casts/mod.rs", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/574bf88e3e85399241683805c43d1524ff704c8e/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/574bf88e3e85399241683805c43d1524ff704c8e/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs?ref=574bf88e3e85399241683805c43d1524ff704c8e", "patch": "@@ -1,3 +1,4 @@\n+mod cast_abs_to_unsigned;\n mod cast_enum_constructor;\n mod cast_lossless;\n mod cast_possible_truncation;\n@@ -473,6 +474,28 @@ declare_clippy_lint! {\n     \"casts from an enum tuple constructor to an integer\"\n }\n \n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for uses of the `abs()` method that cast the result to unsigned.\n+    ///\n+    /// ### Why is this bad?\n+    /// The `unsigned_abs()` method avoids panic when called on the MIN value.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// let x: i32 = -42;\n+    /// let y: u32 = x.abs() as u32;\n+    /// ```\n+    /// Use instead:\n+    /// let x: i32 = -42;\n+    /// let y: u32 = x.unsigned_abs();\n+    /// ```\n+    #[clippy::version = \"1.61.0\"]\n+    pub CAST_ABS_TO_UNSIGNED,\n+    suspicious,\n+    \"casting the result of `abs()` to an unsigned integer can panic\"\n+}\n+\n pub struct Casts {\n     msrv: Option<RustcVersion>,\n }\n@@ -500,7 +523,8 @@ impl_lint_pass!(Casts => [\n     CHAR_LIT_AS_U8,\n     PTR_AS_PTR,\n     CAST_ENUM_TRUNCATION,\n-    CAST_ENUM_CONSTRUCTOR\n+    CAST_ENUM_CONSTRUCTOR,\n+    CAST_ABS_TO_UNSIGNED\n ]);\n \n impl<'tcx> LateLintPass<'tcx> for Casts {\n@@ -536,6 +560,7 @@ impl<'tcx> LateLintPass<'tcx> for Casts {\n                     cast_possible_wrap::check(cx, expr, cast_from, cast_to);\n                     cast_precision_loss::check(cx, expr, cast_from, cast_to);\n                     cast_sign_loss::check(cx, expr, cast_expr, cast_from, cast_to);\n+                    cast_abs_to_unsigned::check(cx, expr, cast_expr, cast_from, cast_to, &self.msrv);\n                 }\n                 cast_lossless::check(cx, expr, cast_expr, cast_from, cast_to, &self.msrv);\n                 cast_enum_constructor::check(cx, expr, cast_expr, cast_from);"}, {"sha": "c95b791f43e641def7a483ce59327bca82ab98ec", "filename": "clippy_lints/src/lib.register_all.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/574bf88e3e85399241683805c43d1524ff704c8e/clippy_lints%2Fsrc%2Flib.register_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/574bf88e3e85399241683805c43d1524ff704c8e/clippy_lints%2Fsrc%2Flib.register_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_all.rs?ref=574bf88e3e85399241683805c43d1524ff704c8e", "patch": "@@ -23,6 +23,7 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(bool_assert_comparison::BOOL_ASSERT_COMPARISON),\n     LintId::of(booleans::LOGIC_BUG),\n     LintId::of(booleans::NONMINIMAL_BOOL),\n+    LintId::of(casts::CAST_ABS_TO_UNSIGNED),\n     LintId::of(casts::CAST_ENUM_CONSTRUCTOR),\n     LintId::of(casts::CAST_ENUM_TRUNCATION),\n     LintId::of(casts::CAST_REF_TO_MUT),"}, {"sha": "1c4ccc15e831d9fa4d75a6a4ab455d97da52b0b2", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/574bf88e3e85399241683805c43d1524ff704c8e/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/574bf88e3e85399241683805c43d1524ff704c8e/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=574bf88e3e85399241683805c43d1524ff704c8e", "patch": "@@ -70,6 +70,7 @@ store.register_lints(&[\n     cargo::REDUNDANT_FEATURE_NAMES,\n     cargo::WILDCARD_DEPENDENCIES,\n     case_sensitive_file_extension_comparisons::CASE_SENSITIVE_FILE_EXTENSION_COMPARISONS,\n+    casts::CAST_ABS_TO_UNSIGNED,\n     casts::CAST_ENUM_CONSTRUCTOR,\n     casts::CAST_ENUM_TRUNCATION,\n     casts::CAST_LOSSLESS,"}, {"sha": "82f45b5fd58b9691e7c13360c9fe5821de283f4d", "filename": "clippy_lints/src/lib.register_suspicious.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/574bf88e3e85399241683805c43d1524ff704c8e/clippy_lints%2Fsrc%2Flib.register_suspicious.rs", "raw_url": "https://github.com/rust-lang/rust/raw/574bf88e3e85399241683805c43d1524ff704c8e/clippy_lints%2Fsrc%2Flib.register_suspicious.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_suspicious.rs?ref=574bf88e3e85399241683805c43d1524ff704c8e", "patch": "@@ -7,6 +7,7 @@ store.register_group(true, \"clippy::suspicious\", Some(\"clippy_suspicious\"), vec!\n     LintId::of(attrs::BLANKET_CLIPPY_RESTRICTION_LINTS),\n     LintId::of(await_holding_invalid::AWAIT_HOLDING_LOCK),\n     LintId::of(await_holding_invalid::AWAIT_HOLDING_REFCELL_REF),\n+    LintId::of(casts::CAST_ABS_TO_UNSIGNED),\n     LintId::of(casts::CAST_ENUM_CONSTRUCTOR),\n     LintId::of(casts::CAST_ENUM_TRUNCATION),\n     LintId::of(crate_in_macro_def::CRATE_IN_MACRO_DEF),"}, {"sha": "271c3a3dd181cef4db12b84a6db0f9a3fa42ebf5", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/574bf88e3e85399241683805c43d1524ff704c8e/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/574bf88e3e85399241683805c43d1524ff704c8e/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=574bf88e3e85399241683805c43d1524ff704c8e", "patch": "@@ -156,7 +156,7 @@ define_Conf! {\n     ///\n     /// Suppress lints whenever the suggested change would cause breakage for other crates.\n     (avoid_breaking_exported_api: bool = true),\n-    /// Lint: MANUAL_SPLIT_ONCE, MANUAL_STR_REPEAT, CLONED_INSTEAD_OF_COPIED, REDUNDANT_FIELD_NAMES, REDUNDANT_STATIC_LIFETIMES, FILTER_MAP_NEXT, CHECKED_CONVERSIONS, MANUAL_RANGE_CONTAINS, USE_SELF, MEM_REPLACE_WITH_DEFAULT, MANUAL_NON_EXHAUSTIVE, OPTION_AS_REF_DEREF, MAP_UNWRAP_OR, MATCH_LIKE_MATCHES_MACRO, MANUAL_STRIP, MISSING_CONST_FOR_FN, UNNESTED_OR_PATTERNS, FROM_OVER_INTO, PTR_AS_PTR, IF_THEN_SOME_ELSE_NONE, APPROX_CONSTANT, DEPRECATED_CFG_ATTR, INDEX_REFUTABLE_SLICE, MAP_CLONE, BORROW_AS_PTR, MANUAL_BITS, EXPECT_ERR.\n+    /// Lint: MANUAL_SPLIT_ONCE, MANUAL_STR_REPEAT, CLONED_INSTEAD_OF_COPIED, REDUNDANT_FIELD_NAMES, REDUNDANT_STATIC_LIFETIMES, FILTER_MAP_NEXT, CHECKED_CONVERSIONS, MANUAL_RANGE_CONTAINS, USE_SELF, MEM_REPLACE_WITH_DEFAULT, MANUAL_NON_EXHAUSTIVE, OPTION_AS_REF_DEREF, MAP_UNWRAP_OR, MATCH_LIKE_MATCHES_MACRO, MANUAL_STRIP, MISSING_CONST_FOR_FN, UNNESTED_OR_PATTERNS, FROM_OVER_INTO, PTR_AS_PTR, IF_THEN_SOME_ELSE_NONE, APPROX_CONSTANT, DEPRECATED_CFG_ATTR, INDEX_REFUTABLE_SLICE, MAP_CLONE, BORROW_AS_PTR, MANUAL_BITS, ERR_EXPECT, CAST_ABS_TO_UNSIGNED.\n     ///\n     /// The minimum rust version that the project supports\n     (msrv: Option<String> = None),"}, {"sha": "0424e06720263e5322b38eabf54d518bb899d0e6", "filename": "clippy_utils/src/msrvs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/574bf88e3e85399241683805c43d1524ff704c8e/clippy_utils%2Fsrc%2Fmsrvs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/574bf88e3e85399241683805c43d1524ff704c8e/clippy_utils%2Fsrc%2Fmsrvs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fmsrvs.rs?ref=574bf88e3e85399241683805c43d1524ff704c8e", "patch": "@@ -14,7 +14,7 @@ macro_rules! msrv_aliases {\n msrv_aliases! {\n     1,53,0 { OR_PATTERNS, MANUAL_BITS }\n     1,52,0 { STR_SPLIT_ONCE }\n-    1,51,0 { BORROW_AS_PTR }\n+    1,51,0 { BORROW_AS_PTR, UNSIGNED_ABS }\n     1,50,0 { BOOL_THEN }\n     1,47,0 { TAU }\n     1,46,0 { CONST_IF_MATCH }"}, {"sha": "cf85a5ca931dd1e560134cf39304659254af3b43", "filename": "tests/ui/cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/574bf88e3e85399241683805c43d1524ff704c8e/tests%2Fui%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/574bf88e3e85399241683805c43d1524ff704c8e/tests%2Fui%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast.rs?ref=574bf88e3e85399241683805c43d1524ff704c8e", "patch": "@@ -7,7 +7,7 @@\n     clippy::cast_sign_loss,\n     clippy::cast_possible_wrap\n )]\n-#[allow(clippy::no_effect, clippy::unnecessary_operation)]\n+#[allow(clippy::cast_abs_to_unsigned, clippy::no_effect, clippy::unnecessary_operation)]\n fn main() {\n     // Test clippy::cast_precision_loss\n     let x0 = 1i32;"}, {"sha": "4ec2465be06db74a6ac1d4e70585aa4020ba33bc", "filename": "tests/ui/cast_abs_to_unsigned.fixed", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/574bf88e3e85399241683805c43d1524ff704c8e/tests%2Fui%2Fcast_abs_to_unsigned.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/574bf88e3e85399241683805c43d1524ff704c8e/tests%2Fui%2Fcast_abs_to_unsigned.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_abs_to_unsigned.fixed?ref=574bf88e3e85399241683805c43d1524ff704c8e", "patch": "@@ -0,0 +1,8 @@\n+// run-rustfix\n+#![warn(clippy::cast_abs_to_unsigned)]\n+\n+fn main() {\n+    let x: i32 = -42;\n+    let y: u32 = x.unsigned_abs();\n+    println!(\"The absolute value of {} is {}\", x, y);\n+}"}, {"sha": "59b9c8c367883b7883f05a8d065d9e688ee68eca", "filename": "tests/ui/cast_abs_to_unsigned.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/574bf88e3e85399241683805c43d1524ff704c8e/tests%2Fui%2Fcast_abs_to_unsigned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/574bf88e3e85399241683805c43d1524ff704c8e/tests%2Fui%2Fcast_abs_to_unsigned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_abs_to_unsigned.rs?ref=574bf88e3e85399241683805c43d1524ff704c8e", "patch": "@@ -0,0 +1,8 @@\n+// run-rustfix\n+#![warn(clippy::cast_abs_to_unsigned)]\n+\n+fn main() {\n+    let x: i32 = -42;\n+    let y: u32 = x.abs() as u32;\n+    println!(\"The absolute value of {} is {}\", x, y);\n+}"}, {"sha": "eb12857357a444abaf62ec93b3350e9c67565f62", "filename": "tests/ui/cast_abs_to_unsigned.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/574bf88e3e85399241683805c43d1524ff704c8e/tests%2Fui%2Fcast_abs_to_unsigned.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/574bf88e3e85399241683805c43d1524ff704c8e/tests%2Fui%2Fcast_abs_to_unsigned.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_abs_to_unsigned.stderr?ref=574bf88e3e85399241683805c43d1524ff704c8e", "patch": "@@ -0,0 +1,10 @@\n+error: casting the result of `i32::abs()` to u32\n+  --> $DIR/cast_abs_to_unsigned.rs:6:18\n+   |\n+LL |     let y: u32 = x.abs() as u32;\n+   |                  ^^^^^^^^^^^^^^ help: replace with: `x.unsigned_abs()`\n+   |\n+   = note: `-D clippy::cast-abs-to-unsigned` implied by `-D warnings`\n+\n+error: aborting due to previous error\n+"}, {"sha": "f83c3e0e281ca29ccad4714e491feb26a6b18f5e", "filename": "tests/ui/min_rust_version_attr.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/574bf88e3e85399241683805c43d1524ff704c8e/tests%2Fui%2Fmin_rust_version_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/574bf88e3e85399241683805c43d1524ff704c8e/tests%2Fui%2Fmin_rust_version_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmin_rust_version_attr.rs?ref=574bf88e3e85399241683805c43d1524ff704c8e", "patch": "@@ -150,6 +150,11 @@ fn err_expect() {\n     x.err().expect(\"Testing expect_err\");\n }\n \n+fn cast_abs_to_unsigned() {\n+    let x: i32 = 10;\n+    assert_eq!(10u32, x.abs() as u32);\n+}\n+\n fn main() {\n     filter_map_next();\n     checked_conversion();\n@@ -168,6 +173,7 @@ fn main() {\n     unnest_or_patterns();\n     int_from_bool();\n     err_expect();\n+    cast_abs_to_unsigned();\n }\n \n mod just_under_msrv {"}, {"sha": "de225eb740d03dc9024df7276c6e72d9d399e760", "filename": "tests/ui/min_rust_version_attr.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/574bf88e3e85399241683805c43d1524ff704c8e/tests%2Fui%2Fmin_rust_version_attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/574bf88e3e85399241683805c43d1524ff704c8e/tests%2Fui%2Fmin_rust_version_attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmin_rust_version_attr.stderr?ref=574bf88e3e85399241683805c43d1524ff704c8e", "patch": "@@ -1,12 +1,12 @@\n error: stripping a prefix manually\n-  --> $DIR/min_rust_version_attr.rs:192:24\n+  --> $DIR/min_rust_version_attr.rs:198:24\n    |\n LL |             assert_eq!(s[\"hello, \".len()..].to_uppercase(), \"WORLD!\");\n    |                        ^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::manual-strip` implied by `-D warnings`\n note: the prefix was tested here\n-  --> $DIR/min_rust_version_attr.rs:191:9\n+  --> $DIR/min_rust_version_attr.rs:197:9\n    |\n LL |         if s.starts_with(\"hello, \") {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -17,13 +17,13 @@ LL ~             assert_eq!(<stripped>.to_uppercase(), \"WORLD!\");\n    |\n \n error: stripping a prefix manually\n-  --> $DIR/min_rust_version_attr.rs:204:24\n+  --> $DIR/min_rust_version_attr.rs:210:24\n    |\n LL |             assert_eq!(s[\"hello, \".len()..].to_uppercase(), \"WORLD!\");\n    |                        ^^^^^^^^^^^^^^^^^^^^\n    |\n note: the prefix was tested here\n-  --> $DIR/min_rust_version_attr.rs:203:9\n+  --> $DIR/min_rust_version_attr.rs:209:9\n    |\n LL |         if s.starts_with(\"hello, \") {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}]}