{"sha": "b2d52d2132b54794a7e4bfcb4fb0aa31169af207", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyZDUyZDIxMzJiNTQ3OTRhN2U0YmZjYjRmYjBhYTMxMTY5YWYyMDc=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-09-19T21:29:34Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-11-19T00:14:31Z"}, "message": "rustc: do not pub use Layout::* in layout.", "tree": {"sha": "81f795e85ae944bd82cb22b3f230eb29979d6076", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81f795e85ae944bd82cb22b3f230eb29979d6076"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b2d52d2132b54794a7e4bfcb4fb0aa31169af207", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b2d52d2132b54794a7e4bfcb4fb0aa31169af207", "html_url": "https://github.com/rust-lang/rust/commit/b2d52d2132b54794a7e4bfcb4fb0aa31169af207", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b2d52d2132b54794a7e4bfcb4fb0aa31169af207/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0ab6e8644ded75c9a43b46151568f6b782bec59", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0ab6e8644ded75c9a43b46151568f6b782bec59", "html_url": "https://github.com/rust-lang/rust/commit/d0ab6e8644ded75c9a43b46151568f6b782bec59"}], "stats": {"total": 64, "additions": 32, "deletions": 32}, "files": [{"sha": "a0c0fb481aaae27e9c5e9b74d7c75de6088264e0", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b2d52d2132b54794a7e4bfcb4fb0aa31169af207/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2d52d2132b54794a7e4bfcb4fb0aa31169af207/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=b2d52d2132b54794a7e4bfcb4fb0aa31169af207", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n pub use self::Integer::*;\n-pub use self::Layout::*;\n pub use self::Primitive::*;\n \n use session::{self, DataTypeKind, Session};\n@@ -2015,10 +2014,10 @@ impl<'a, 'tcx> FullLayout<'tcx> {\n         };\n \n         let (layout, fields, abi) = match *self.layout {\n-            Univariant => (self.layout, self.fields, self.abi),\n+            Layout::Univariant => (self.layout, self.fields, self.abi),\n \n-            NullablePointer { ref variants, .. } |\n-            General { ref variants, .. } => {\n+            Layout::NullablePointer { ref variants, .. } |\n+            Layout::General { ref variants, .. } => {\n                 let variant = &variants[variant_index];\n                 (&variant.layout, &variant.fields, variant.abi)\n             }\n@@ -2104,8 +2103,8 @@ impl<'a, 'tcx> FullLayout<'tcx> {\n                     match self.variant_index {\n                         None => match *self.layout {\n                             // Discriminant field for enums (where applicable).\n-                            General { discr, .. } |\n-                            NullablePointer { discr, .. } => {\n+                            Layout::General { discr, .. } |\n+                            Layout::NullablePointer { discr, .. } => {\n                                 return [discr.to_ty(tcx)][i];\n                             }\n                             _ if def.variants.len() > 1 => return [][i],\n@@ -2174,29 +2173,29 @@ impl<'a, 'tcx> FullLayout<'tcx> {\n     {\n         let tcx = cx.tcx();\n         match (self.layout, self.abi, &self.ty.sty) {\n-            (&Scalar, Abi::Scalar(Pointer), _) if !self.ty.is_unsafe_ptr() => {\n+            (&Layout::Scalar, Abi::Scalar(Pointer), _) if !self.ty.is_unsafe_ptr() => {\n                 Ok(Some((Size::from_bytes(0), Pointer)))\n             }\n-            (&General { discr, .. }, _, &ty::TyAdt(def, _)) => {\n+            (&Layout::General { discr, .. }, _, &ty::TyAdt(def, _)) => {\n                 if def.discriminants(tcx).all(|d| d.to_u128_unchecked() != 0) {\n                     Ok(Some((self.fields.offset(0), discr)))\n                 } else {\n                     Ok(None)\n                 }\n             }\n \n-            (&FatPointer, _, _) if !self.ty.is_unsafe_ptr() => {\n+            (&Layout::FatPointer, _, _) if !self.ty.is_unsafe_ptr() => {\n                 Ok(Some((self.fields.offset(FAT_PTR_ADDR), Pointer)))\n             }\n \n             // Is this the NonZero lang item wrapping a pointer or integer type?\n             (_, _, &ty::TyAdt(def, _)) if Some(def.did) == tcx.lang_items().non_zero() => {\n                 let field = self.field(cx, 0)?;\n                 match (field.layout, field.abi) {\n-                    (&Scalar, Abi::Scalar(value)) => {\n+                    (&Layout::Scalar, Abi::Scalar(value)) => {\n                         Ok(Some((self.fields.offset(0), value)))\n                     }\n-                    (&FatPointer, _) => {\n+                    (&Layout::FatPointer, _) => {\n                         Ok(Some((self.fields.offset(0) +\n                                  field.fields.offset(FAT_PTR_ADDR),\n                                  Pointer)))\n@@ -2206,7 +2205,7 @@ impl<'a, 'tcx> FullLayout<'tcx> {\n             }\n \n             // Perhaps one of the fields is non-zero, let's recurse and find out.\n-            (&Univariant, _, _) => {\n+            (&Layout::Univariant, _, _) => {\n                 for i in 0..self.fields.count() {\n                     let r = self.field(cx, i)?.non_zero_field(cx)?;\n                     if let Some((offset, primitive)) = r {"}, {"sha": "6aa49080dd0d8b76886200dd36a3aad4db948912", "filename": "src/librustc_trans/abi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2d52d2132b54794a7e4bfcb4fb0aa31169af207/src%2Flibrustc_trans%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2d52d2132b54794a7e4bfcb4fb0aa31169af207/src%2Flibrustc_trans%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fabi.rs?ref=b2d52d2132b54794a7e4bfcb4fb0aa31169af207", "patch": "@@ -766,7 +766,7 @@ impl<'a, 'tcx> FnType<'tcx> {\n         for ty in inputs.iter().chain(extra_args.iter()) {\n             let mut arg = arg_of(ty, false);\n \n-            if let ty::layout::FatPointer { .. } = *arg.layout.layout {\n+            if let ty::layout::Layout::FatPointer { .. } = *arg.layout.layout {\n                 let mut data = ArgType::new(arg.layout.field(ccx, 0));\n                 let mut info = ArgType::new(arg.layout.field(ccx, 1));\n "}, {"sha": "f488ebaa4f513d196cab73b4a9f5d4e5266cee55", "filename": "src/librustc_trans/debuginfo/metadata.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b2d52d2132b54794a7e4bfcb4fb0aa31169af207/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2d52d2132b54794a7e4bfcb4fb0aa31169af207/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs?ref=b2d52d2132b54794a7e4bfcb4fb0aa31169af207", "patch": "@@ -1130,7 +1130,7 @@ impl<'tcx> EnumMemberDescriptionFactory<'tcx> {\n                                       -> Vec<MemberDescription> {\n         let adt = &self.enum_type.ty_adt_def().unwrap();\n         match *self.type_rep.layout {\n-            layout::General { ref variants, .. } => {\n+            layout::Layout::General { ref variants, .. } => {\n                 let discriminant_info = RegularDiscriminant(self.discriminant_type_metadata\n                     .expect(\"\"));\n                 (0..variants.len()).map(|i| {\n@@ -1159,7 +1159,7 @@ impl<'tcx> EnumMemberDescriptionFactory<'tcx> {\n                     }\n                 }).collect()\n             },\n-            layout::Univariant => {\n+            layout::Layout::Univariant => {\n                 assert!(adt.variants.len() <= 1);\n \n                 if adt.variants.is_empty() {\n@@ -1191,7 +1191,7 @@ impl<'tcx> EnumMemberDescriptionFactory<'tcx> {\n                     ]\n                 }\n             }\n-            layout::NullablePointer {\n+            layout::Layout::NullablePointer {\n                 nndiscr,\n                 discr,\n                 ..\n@@ -1432,8 +1432,9 @@ fn prepare_enum_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n     let type_rep = cx.layout_of(enum_type);\n \n     let discriminant_type_metadata = match *type_rep.layout {\n-        layout::NullablePointer { .. } | layout::Univariant { .. } => None,\n-        layout::General { discr, .. } => Some(discriminant_type_metadata(discr)),\n+        layout::Layout::NullablePointer { .. } |\n+        layout::Layout::Univariant { .. } => None,\n+        layout::Layout::General { discr, .. } => Some(discriminant_type_metadata(discr)),\n         ref l @ _ => bug!(\"Not an enum layout: {:#?}\", l)\n     };\n "}, {"sha": "9c43d8b36272e1e474dff42df73ca5ccee9f7d59", "filename": "src/librustc_trans/mir/constant.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b2d52d2132b54794a7e4bfcb4fb0aa31169af207/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2d52d2132b54794a7e4bfcb4fb0aa31169af207/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fconstant.rs?ref=b2d52d2132b54794a7e4bfcb4fb0aa31169af207", "patch": "@@ -1091,7 +1091,7 @@ fn trans_const_adt<'a, 'tcx>(\n         _ => 0,\n     };\n     match *l.layout {\n-        layout::General { .. } => {\n+        layout::Layout::General { .. } => {\n             let discr = match *kind {\n                 mir::AggregateKind::Adt(adt_def, _, _, _) => {\n                     adt_def.discriminant_for_variant(ccx.tcx(), variant_index)\n@@ -1108,7 +1108,7 @@ fn trans_const_adt<'a, 'tcx>(\n                 build_const_struct(ccx, l.for_variant(variant_index), vals, Some(discr))\n             }\n         }\n-        layout::UntaggedUnion => {\n+        layout::Layout::UntaggedUnion => {\n             assert_eq!(variant_index, 0);\n             let contents = [\n                 vals[0].llval,\n@@ -1117,14 +1117,14 @@ fn trans_const_adt<'a, 'tcx>(\n \n             Const::new(C_struct(ccx, &contents, l.is_packed()), t)\n         }\n-        layout::Univariant => {\n+        layout::Layout::Univariant => {\n             assert_eq!(variant_index, 0);\n             build_const_struct(ccx, l, vals, None)\n         }\n-        layout::Vector => {\n+        layout::Layout::Vector => {\n             Const::new(C_vector(&vals.iter().map(|x| x.llval).collect::<Vec<_>>()), t)\n         }\n-        layout::NullablePointer { nndiscr, .. } => {\n+        layout::Layout::NullablePointer { nndiscr, .. } => {\n             if variant_index as u64 == nndiscr {\n                 build_const_struct(ccx, l.for_variant(variant_index), vals, None)\n             } else {"}, {"sha": "f6c260e4c15232f6c639bd689c98491a3f39a53c", "filename": "src/librustc_trans/mir/lvalue.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b2d52d2132b54794a7e4bfcb4fb0aa31169af207/src%2Flibrustc_trans%2Fmir%2Flvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2d52d2132b54794a7e4bfcb4fb0aa31169af207/src%2Flibrustc_trans%2Fmir%2Flvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Flvalue.rs?ref=b2d52d2132b54794a7e4bfcb4fb0aa31169af207", "patch": "@@ -312,8 +312,8 @@ impl<'a, 'tcx> LvalueRef<'tcx> {\n \n         let cast_to = bcx.ccx.immediate_llvm_type_of(cast_to);\n         match *l.layout {\n-            layout::Univariant { .. } |\n-            layout::UntaggedUnion { .. } => return C_uint(cast_to, 0),\n+            layout::Layout::Univariant { .. } |\n+            layout::Layout::UntaggedUnion { .. } => return C_uint(cast_to, 0),\n             _ => {}\n         }\n \n@@ -324,7 +324,7 @@ impl<'a, 'tcx> LvalueRef<'tcx> {\n             _ => bug!(\"discriminant not scalar: {:#?}\", discr_layout)\n         };\n         let (min, max) = match *l.layout {\n-            layout::General { ref discr_range, .. } => (discr_range.start, discr_range.end),\n+            layout::Layout::General { ref discr_range, .. } => (discr_range.start, discr_range.end),\n             _ => (0, u64::max_value()),\n         };\n         let max_next = max.wrapping_add(1);\n@@ -350,14 +350,14 @@ impl<'a, 'tcx> LvalueRef<'tcx> {\n             }\n         };\n         match *l.layout {\n-            layout::General { .. } => {\n+            layout::Layout::General { .. } => {\n                 let signed = match discr_scalar {\n                     layout::Int(_, signed) => signed,\n                     _ => false\n                 };\n                 bcx.intcast(lldiscr, cast_to, signed)\n             }\n-            layout::NullablePointer { nndiscr, .. } => {\n+            layout::Layout::NullablePointer { nndiscr, .. } => {\n                 let cmp = if nndiscr == 0 { llvm::IntEQ } else { llvm::IntNE };\n                 let zero = C_null(bcx.ccx.llvm_type_of(discr_layout.ty));\n                 bcx.intcast(bcx.icmp(cmp, lldiscr, zero), cast_to, false)\n@@ -374,12 +374,12 @@ impl<'a, 'tcx> LvalueRef<'tcx> {\n             .discriminant_for_variant(bcx.tcx(), variant_index)\n             .to_u128_unchecked() as u64;\n         match *l.layout {\n-            layout::General { .. } => {\n+            layout::Layout::General { .. } => {\n                 let ptr = self.project_field(bcx, 0);\n                 bcx.store(C_int(bcx.ccx.llvm_type_of(ptr.ty.to_ty(bcx.tcx())), to as i64),\n                     ptr.llval, ptr.alignment.non_abi());\n             }\n-            layout::NullablePointer { nndiscr, .. } => {\n+            layout::Layout::NullablePointer { nndiscr, .. } => {\n                 if to != nndiscr {\n                     let use_memset = match l.abi {\n                         layout::Abi::Scalar(_) => false,\n@@ -429,8 +429,8 @@ impl<'a, 'tcx> LvalueRef<'tcx> {\n             // If this is an enum, cast to the appropriate variant struct type.\n             let layout = bcx.ccx.layout_of(ty);\n             match *layout.layout {\n-                layout::NullablePointer { .. } |\n-                layout::General { .. } => {\n+                layout::Layout::NullablePointer { .. } |\n+                layout::Layout::General { .. } => {\n                     let variant_layout = layout.for_variant(variant_index);\n                     let variant_ty = Type::struct_(bcx.ccx,\n                         &type_of::struct_llfields(bcx.ccx, variant_layout),"}]}