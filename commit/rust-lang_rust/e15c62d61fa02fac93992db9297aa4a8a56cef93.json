{"sha": "e15c62d61fa02fac93992db9297aa4a8a56cef93", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxNWM2MmQ2MWZhMDJmYWM5Mzk5MmRiOTI5N2FhNGE4YTU2Y2VmOTM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2018-10-23T21:09:44Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2018-11-10T00:10:07Z"}, "message": "revert making internal APIs const fn.", "tree": {"sha": "7f1e21f22c66f3d4988fdbf347031bd6d67a3af0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f1e21f22c66f3d4988fdbf347031bd6d67a3af0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e15c62d61fa02fac93992db9297aa4a8a56cef93", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e15c62d61fa02fac93992db9297aa4a8a56cef93", "html_url": "https://github.com/rust-lang/rust/commit/e15c62d61fa02fac93992db9297aa4a8a56cef93", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e15c62d61fa02fac93992db9297aa4a8a56cef93/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1d2aa22c0d15465af1daccdb3821450c98d0ed0", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1d2aa22c0d15465af1daccdb3821450c98d0ed0", "html_url": "https://github.com/rust-lang/rust/commit/d1d2aa22c0d15465af1daccdb3821450c98d0ed0"}], "stats": {"total": 94, "additions": 47, "deletions": 47}, "files": [{"sha": "fcadcb544c431a9e9ede7bc00912ce3123b2533c", "filename": "src/liballoc/collections/binary_heap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e15c62d61fa02fac93992db9297aa4a8a56cef93/src%2Fliballoc%2Fcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e15c62d61fa02fac93992db9297aa4a8a56cef93/src%2Fliballoc%2Fcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbinary_heap.rs?ref=e15c62d61fa02fac93992db9297aa4a8a56cef93", "patch": "@@ -884,7 +884,7 @@ impl<'a, T> Hole<'a, T> {\n     }\n \n     #[inline]\n-    const fn pos(&self) -> usize {\n+    fn pos(&self) -> usize {\n         self.pos\n     }\n "}, {"sha": "deca9591fbd5c499210a17f6ed67990eda11fae3", "filename": "src/liballoc/collections/btree/node.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e15c62d61fa02fac93992db9297aa4a8a56cef93/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e15c62d61fa02fac93992db9297aa4a8a56cef93/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs?ref=e15c62d61fa02fac93992db9297aa4a8a56cef93", "patch": "@@ -357,7 +357,7 @@ impl<BorrowType, K, V, Type> NodeRef<BorrowType, K, V, Type> {\n \n     /// Returns the height of this node in the whole tree. Zero height denotes the\n     /// leaf level.\n-    pub const fn height(&self) -> usize {\n+    pub fn height(&self) -> usize {\n         self.height\n     }\n "}, {"sha": "3d66b9f54daacc5fa2aa3248d4db304536befb86", "filename": "src/liballoc/collections/linked_list.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e15c62d61fa02fac93992db9297aa4a8a56cef93/src%2Fliballoc%2Fcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e15c62d61fa02fac93992db9297aa4a8a56cef93/src%2Fliballoc%2Fcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Flinked_list.rs?ref=e15c62d61fa02fac93992db9297aa4a8a56cef93", "patch": "@@ -135,7 +135,7 @@ impl<T: fmt::Debug> fmt::Debug for IntoIter<T> {\n }\n \n impl<T> Node<T> {\n-    const fn new(element: T) -> Self {\n+    fn new(element: T) -> Self {\n         Node {\n             next: None,\n             prev: None,"}, {"sha": "88e76033f273ed5ae7fed104539ef46a17412b5b", "filename": "src/liballoc/collections/vec_deque.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e15c62d61fa02fac93992db9297aa4a8a56cef93/src%2Fliballoc%2Fcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e15c62d61fa02fac93992db9297aa4a8a56cef93/src%2Fliballoc%2Fcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fvec_deque.rs?ref=e15c62d61fa02fac93992db9297aa4a8a56cef93", "patch": "@@ -1275,7 +1275,7 @@ impl<T> VecDeque<T> {\n     }\n \n     #[inline]\n-    const fn is_contiguous(&self) -> bool {\n+    fn is_contiguous(&self) -> bool {\n         self.tail <= self.head\n     }\n "}, {"sha": "837770feecef596d7380dd009f6802a904877f32", "filename": "src/liballoc/raw_vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e15c62d61fa02fac93992db9297aa4a8a56cef93/src%2Fliballoc%2Fraw_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e15c62d61fa02fac93992db9297aa4a8a56cef93/src%2Fliballoc%2Fraw_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fraw_vec.rs?ref=e15c62d61fa02fac93992db9297aa4a8a56cef93", "patch": "@@ -204,7 +204,7 @@ impl<T, A: Alloc> RawVec<T, A> {\n     /// Gets a raw pointer to the start of the allocation. Note that this is\n     /// Unique::empty() if `cap = 0` or T is zero-sized. In the former case, you must\n     /// be careful.\n-    pub const fn ptr(&self) -> *mut T {\n+    pub fn ptr(&self) -> *mut T {\n         self.ptr.as_ptr()\n     }\n \n@@ -221,7 +221,7 @@ impl<T, A: Alloc> RawVec<T, A> {\n     }\n \n     /// Returns a shared reference to the allocator backing this RawVec.\n-    pub const fn alloc(&self) -> &A {\n+    pub fn alloc(&self) -> &A {\n         &self.a\n     }\n "}, {"sha": "113a85abecbef4613163b79d0056cde77513faf8", "filename": "src/libcore/alloc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e15c62d61fa02fac93992db9297aa4a8a56cef93/src%2Flibcore%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e15c62d61fa02fac93992db9297aa4a8a56cef93/src%2Flibcore%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Falloc.rs?ref=e15c62d61fa02fac93992db9297aa4a8a56cef93", "patch": "@@ -25,7 +25,7 @@ use num::NonZeroUsize;\n #[derive(Debug)]\n pub struct Excess(pub NonNull<u8>, pub usize);\n \n-const fn size_align<T>() -> (usize, usize) {\n+fn size_align<T>() -> (usize, usize) {\n     (mem::size_of::<T>(), mem::align_of::<T>())\n }\n "}, {"sha": "3d24f8902bd83827be8aee45f393f9cf9f9e33a6", "filename": "src/libcore/array.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e15c62d61fa02fac93992db9297aa4a8a56cef93/src%2Flibcore%2Farray.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e15c62d61fa02fac93992db9297aa4a8a56cef93/src%2Flibcore%2Farray.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Farray.rs?ref=e15c62d61fa02fac93992db9297aa4a8a56cef93", "patch": "@@ -77,7 +77,7 @@ impl TryFromSliceError {\n            issue = \"0\")]\n     #[inline]\n     #[doc(hidden)]\n-    pub const fn __description(&self) -> &str {\n+    pub fn __description(&self) -> &str {\n         \"could not convert slice to array\"\n     }\n }"}, {"sha": "6c597301ac2045cfeea0158268455c9d6eb19364", "filename": "src/libcore/benches/iter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e15c62d61fa02fac93992db9297aa4a8a56cef93/src%2Flibcore%2Fbenches%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e15c62d61fa02fac93992db9297aa4a8a56cef93/src%2Flibcore%2Fbenches%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbenches%2Fiter.rs?ref=e15c62d61fa02fac93992db9297aa4a8a56cef93", "patch": "@@ -39,7 +39,7 @@ fn bench_multiple_take(b: &mut Bencher) {\n     });\n }\n \n-const fn scatter(x: i32) -> i32 { (x * 31) % 127 }\n+fn scatter(x: i32) -> i32 { (x * 31) % 127 }\n \n #[bench]\n fn bench_max_by_key(b: &mut Bencher) {"}, {"sha": "9cf42eff219ba05a87bbce40768967e8e1e45529", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e15c62d61fa02fac93992db9297aa4a8a56cef93/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e15c62d61fa02fac93992db9297aa4a8a56cef93/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=e15c62d61fa02fac93992db9297aa4a8a56cef93", "patch": "@@ -636,12 +636,12 @@ type BorrowFlag = isize;\n const UNUSED: BorrowFlag = 0;\n \n #[inline(always)]\n-const fn is_writing(x: BorrowFlag) -> bool {\n+fn is_writing(x: BorrowFlag) -> bool {\n     x < UNUSED\n }\n \n #[inline(always)]\n-const fn is_reading(x: BorrowFlag) -> bool {\n+fn is_reading(x: BorrowFlag) -> bool {\n     x > UNUSED\n }\n "}, {"sha": "284617a416751c869a9db67d15ff811c8fa0c099", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e15c62d61fa02fac93992db9297aa4a8a56cef93/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e15c62d61fa02fac93992db9297aa4a8a56cef93/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=e15c62d61fa02fac93992db9297aa4a8a56cef93", "patch": "@@ -1703,11 +1703,11 @@ impl<'a> Formatter<'a> {\n \n     // FIXME: Decide what public API we want for these two flags.\n     // https://github.com/rust-lang/rust/issues/48584\n-    const fn debug_lower_hex(&self) -> bool {\n+    fn debug_lower_hex(&self) -> bool {\n         self.flags & (1 << FlagV1::DebugLowerHex as u32) != 0\n     }\n \n-    const fn debug_upper_hex(&self) -> bool {\n+    fn debug_upper_hex(&self) -> bool {\n         self.flags & (1 << FlagV1::DebugUpperHex as u32) != 0\n     }\n "}, {"sha": "c42fb7019c77108f2f79d262aade754e71bf33ae", "filename": "src/libcore/iter/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e15c62d61fa02fac93992db9297aa4a8a56cef93/src%2Flibcore%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e15c62d61fa02fac93992db9297aa4a8a56cef93/src%2Flibcore%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fmod.rs?ref=e15c62d61fa02fac93992db9297aa4a8a56cef93", "patch": "@@ -2658,7 +2658,7 @@ impl<I, U> FusedIterator for Flatten<I>\n           I::Item: IntoIterator<IntoIter = U, Item = U::Item> {}\n \n /// Adapts an iterator by flattening it, for use in `flatten()` and `flat_map()`.\n-const fn flatten_compat<I, U>(iter: I) -> FlattenCompat<I, U> {\n+fn flatten_compat<I, U>(iter: I) -> FlattenCompat<I, U> {\n     FlattenCompat { iter, frontiter: None, backiter: None }\n }\n "}, {"sha": "f93564c2849f5613ca499649793c8b2abdd990d1", "filename": "src/libcore/num/dec2flt/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e15c62d61fa02fac93992db9297aa4a8a56cef93/src%2Flibcore%2Fnum%2Fdec2flt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e15c62d61fa02fac93992db9297aa4a8a56cef93/src%2Flibcore%2Fnum%2Fdec2flt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fdec2flt%2Fmod.rs?ref=e15c62d61fa02fac93992db9297aa4a8a56cef93", "patch": "@@ -187,11 +187,11 @@ impl fmt::Display for ParseFloatError {\n     }\n }\n \n-const fn pfe_empty() -> ParseFloatError {\n+fn pfe_empty() -> ParseFloatError {\n     ParseFloatError { kind: FloatErrorKind::Empty }\n }\n \n-const fn pfe_invalid() -> ParseFloatError {\n+fn pfe_invalid() -> ParseFloatError {\n     ParseFloatError { kind: FloatErrorKind::Invalid }\n }\n "}, {"sha": "e7ed94d4d91c2a0646dc7545849108bc4ae36582", "filename": "src/libcore/num/dec2flt/parse.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e15c62d61fa02fac93992db9297aa4a8a56cef93/src%2Flibcore%2Fnum%2Fdec2flt%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e15c62d61fa02fac93992db9297aa4a8a56cef93/src%2Flibcore%2Fnum%2Fdec2flt%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fdec2flt%2Fparse.rs?ref=e15c62d61fa02fac93992db9297aa4a8a56cef93", "patch": "@@ -39,7 +39,7 @@ pub struct Decimal<'a> {\n }\n \n impl<'a> Decimal<'a> {\n-    pub const fn new(integral: &'a [u8], fractional: &'a [u8], exp: i64) -> Decimal<'a> {\n+    pub fn new(integral: &'a [u8], fractional: &'a [u8], exp: i64) -> Decimal<'a> {\n         Decimal { integral, fractional, exp }\n     }\n }"}, {"sha": "38f4e4687a99b6358b946eb7ced49fd7796bcb2e", "filename": "src/libcore/num/dec2flt/rawfp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e15c62d61fa02fac93992db9297aa4a8a56cef93/src%2Flibcore%2Fnum%2Fdec2flt%2Frawfp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e15c62d61fa02fac93992db9297aa4a8a56cef93/src%2Flibcore%2Fnum%2Fdec2flt%2Frawfp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fdec2flt%2Frawfp.rs?ref=e15c62d61fa02fac93992db9297aa4a8a56cef93", "patch": "@@ -44,7 +44,7 @@ pub struct Unpacked {\n }\n \n impl Unpacked {\n-    pub const fn new(sig: u64, k: i16) -> Self {\n+    pub fn new(sig: u64, k: i16) -> Self {\n         Unpacked { sig, k }\n     }\n }"}, {"sha": "4e33fcfd76e61cf210d786833b59e131b5e7a1a4", "filename": "src/libcore/num/flt2dec/estimator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e15c62d61fa02fac93992db9297aa4a8a56cef93/src%2Flibcore%2Fnum%2Fflt2dec%2Festimator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e15c62d61fa02fac93992db9297aa4a8a56cef93/src%2Flibcore%2Fnum%2Fflt2dec%2Festimator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fflt2dec%2Festimator.rs?ref=e15c62d61fa02fac93992db9297aa4a8a56cef93", "patch": "@@ -15,7 +15,7 @@\n /// This is used to approximate `k = ceil(log_10 (mant * 2^exp))`;\n /// the true `k` is either `k_0` or `k_0+1`.\n #[doc(hidden)]\n-pub const fn estimate_scaling_factor(mant: u64, exp: i16) -> i16 {\n+pub fn estimate_scaling_factor(mant: u64, exp: i16) -> i16 {\n     // 2^(nbits-1) < mant <= 2^nbits if mant > 0\n     let nbits = 64 - (mant - 1).leading_zeros() as i64;\n     // 1292913986 = floor(2^32 * log_10 2)"}, {"sha": "b795cd72150084b5693d644bad467705156c1129", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e15c62d61fa02fac93992db9297aa4a8a56cef93/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e15c62d61fa02fac93992db9297aa4a8a56cef93/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=e15c62d61fa02fac93992db9297aa4a8a56cef93", "patch": "@@ -2759,7 +2759,7 @@ impl<T: ?Sized> Unique<T> {\n     }\n \n     /// Acquires the underlying `*mut` pointer.\n-    pub const fn as_ptr(self) -> *mut T {\n+    pub fn as_ptr(self) -> *mut T {\n         self.pointer.0 as *mut T\n     }\n "}, {"sha": "cf95333af9cbb1622a69244f25d4dba61b269b01", "filename": "src/libcore/slice/memchr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e15c62d61fa02fac93992db9297aa4a8a56cef93/src%2Flibcore%2Fslice%2Fmemchr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e15c62d61fa02fac93992db9297aa4a8a56cef93/src%2Flibcore%2Fslice%2Fmemchr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmemchr.rs?ref=e15c62d61fa02fac93992db9297aa4a8a56cef93", "patch": "@@ -29,19 +29,19 @@ const HI_USIZE: usize = HI_U64 as usize;\n /// bytes where the borrow propagated all the way to the most significant\n /// bit.\"\n #[inline]\n-const fn contains_zero_byte(x: usize) -> bool {\n+fn contains_zero_byte(x: usize) -> bool {\n     x.wrapping_sub(LO_USIZE) & !x & HI_USIZE != 0\n }\n \n #[cfg(target_pointer_width = \"16\")]\n #[inline]\n-const fn repeat_byte(b: u8) -> usize {\n+fn repeat_byte(b: u8) -> usize {\n     (b as usize) << 8 | b as usize\n }\n \n #[cfg(not(target_pointer_width = \"16\"))]\n #[inline]\n-const fn repeat_byte(b: u8) -> usize {\n+fn repeat_byte(b: u8) -> usize {\n     (b as usize) * (::usize::MAX / 255)\n }\n "}, {"sha": "fece328f51f474d45a7a3ae86c171bbf31341a1f", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e15c62d61fa02fac93992db9297aa4a8a56cef93/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e15c62d61fa02fac93992db9297aa4a8a56cef93/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=e15c62d61fa02fac93992db9297aa4a8a56cef93", "patch": "@@ -2737,7 +2737,7 @@ impl<'a, T> IntoIterator for &'a mut [T] {\n \n // Macro helper functions\n #[inline(always)]\n-const fn size_from_ptr<T>(_: *const T) -> usize {\n+fn size_from_ptr<T>(_: *const T) -> usize {\n     mem::size_of::<T>()\n }\n "}, {"sha": "e710cbffe4d35da71ffd472d2201a002162a5861", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e15c62d61fa02fac93992db9297aa4a8a56cef93/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e15c62d61fa02fac93992db9297aa4a8a56cef93/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=e15c62d61fa02fac93992db9297aa4a8a56cef93", "patch": "@@ -476,16 +476,16 @@ pub struct Chars<'a> {\n /// The first byte is special, only want bottom 5 bits for width 2, 4 bits\n /// for width 3, and 3 bits for width 4.\n #[inline]\n-const fn utf8_first_byte(byte: u8, width: u32) -> u32 { (byte & (0x7F >> width)) as u32 }\n+fn utf8_first_byte(byte: u8, width: u32) -> u32 { (byte & (0x7F >> width)) as u32 }\n \n /// Returns the value of `ch` updated with continuation byte `byte`.\n #[inline]\n-const fn utf8_acc_cont_byte(ch: u32, byte: u8) -> u32 { (ch << 6) | (byte & CONT_MASK) as u32 }\n+fn utf8_acc_cont_byte(ch: u32, byte: u8) -> u32 { (ch << 6) | (byte & CONT_MASK) as u32 }\n \n /// Checks whether the byte is a UTF-8 continuation byte (i.e. starts with the\n /// bits `10`).\n #[inline]\n-const fn utf8_is_cont_byte(byte: u8) -> bool { (byte & !CONT_MASK) == TAG_CONT_U8 }\n+fn utf8_is_cont_byte(byte: u8) -> bool { (byte & !CONT_MASK) == TAG_CONT_U8 }\n \n #[inline]\n fn unwrap_or_0(opt: Option<&u8>) -> u8 {\n@@ -1420,7 +1420,7 @@ const NONASCII_MASK: usize = 0x80808080_80808080u64 as usize;\n \n /// Returns `true` if any byte in the word `x` is nonascii (>= 128).\n #[inline]\n-const fn contains_nonascii(x: usize) -> bool {\n+fn contains_nonascii(x: usize) -> bool {\n     (x & NONASCII_MASK) != 0\n }\n "}, {"sha": "0e6437fded594c3a18a8a5a5ed6b0fc474026ab3", "filename": "src/libcore/unicode/bool_trie.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e15c62d61fa02fac93992db9297aa4a8a56cef93/src%2Flibcore%2Funicode%2Fbool_trie.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e15c62d61fa02fac93992db9297aa4a8a56cef93/src%2Flibcore%2Funicode%2Fbool_trie.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funicode%2Fbool_trie.rs?ref=e15c62d61fa02fac93992db9297aa4a8a56cef93", "patch": "@@ -71,6 +71,6 @@ impl SmallBoolTrie {\n     }\n }\n \n-const fn trie_range_leaf(c: u32, bitmap_chunk: u64) -> bool {\n+fn trie_range_leaf(c: u32, bitmap_chunk: u64) -> bool {\n     ((bitmap_chunk >> (c & 63)) & 1) != 0\n }"}, {"sha": "8de415e8aed5cc25ec6577e59f8a461034076098", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e15c62d61fa02fac93992db9297aa4a8a56cef93/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e15c62d61fa02fac93992db9297aa4a8a56cef93/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=e15c62d61fa02fac93992db9297aa4a8a56cef93", "patch": "@@ -36,7 +36,7 @@ struct DefaultResizePolicy;\n \n impl DefaultResizePolicy {\n     #[inline]\n-    const fn new() -> DefaultResizePolicy {\n+    fn new() -> DefaultResizePolicy {\n         DefaultResizePolicy\n     }\n \n@@ -69,7 +69,7 @@ impl DefaultResizePolicy {\n \n     /// The capacity of the given raw capacity.\n     #[inline]\n-    const fn capacity(&self, raw_cap: usize) -> usize {\n+    fn capacity(&self, raw_cap: usize) -> usize {\n         // This doesn't have to be checked for overflow since allocation size\n         // in bytes will overflow earlier than multiplication by 10.\n         //"}, {"sha": "547f97cc8acee1bccb45bae7ef94922087be66a3", "filename": "src/libstd/collections/hash/table.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e15c62d61fa02fac93992db9297aa4a8a56cef93/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e15c62d61fa02fac93992db9297aa4a8a56cef93/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs?ref=e15c62d61fa02fac93992db9297aa4a8a56cef93", "patch": "@@ -247,7 +247,7 @@ impl<K, V> RawBucket<K, V> {\n // Buckets hold references to the table.\n impl<K, V, M> FullBucket<K, V, M> {\n     /// Borrow a reference to the table.\n-    pub const fn table(&self) -> &M {\n+    pub fn table(&self) -> &M {\n         &self.table\n     }\n     /// Borrow a mutable reference to the table.\n@@ -259,18 +259,18 @@ impl<K, V, M> FullBucket<K, V, M> {\n         self.table\n     }\n     /// Get the raw index.\n-    pub const fn index(&self) -> usize {\n+    pub fn index(&self) -> usize {\n         self.raw.idx\n     }\n     /// Get the raw bucket.\n-    pub const fn raw(&self) -> RawBucket<K, V> {\n+    pub fn raw(&self) -> RawBucket<K, V> {\n         self.raw\n     }\n }\n \n impl<K, V, M> EmptyBucket<K, V, M> {\n     /// Borrow a reference to the table.\n-    pub const fn table(&self) -> &M {\n+    pub fn table(&self) -> &M {\n         &self.table\n     }\n     /// Borrow a mutable reference to the table.\n@@ -281,7 +281,7 @@ impl<K, V, M> EmptyBucket<K, V, M> {\n \n impl<K, V, M> Bucket<K, V, M> {\n     /// Get the raw index.\n-    pub const fn index(&self) -> usize {\n+    pub fn index(&self) -> usize {\n         self.raw.idx\n     }\n     /// get the table.\n@@ -772,7 +772,7 @@ impl<K, V> RawTable<K, V> {\n \n     /// The number of elements ever `put` in the hashtable, minus the number\n     /// of elements ever `take`n.\n-    pub const fn size(&self) -> usize {\n+    pub fn size(&self) -> usize {\n         self.size\n     }\n "}, {"sha": "cb91453998540be040414e19a84a0f18f72c6abc", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e15c62d61fa02fac93992db9297aa4a8a56cef93/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e15c62d61fa02fac93992db9297aa4a8a56cef93/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=e15c62d61fa02fac93992db9297aa4a8a56cef93", "patch": "@@ -265,12 +265,12 @@ enum FromBytesWithNulErrorKind {\n }\n \n impl FromBytesWithNulError {\n-    const fn interior_nul(pos: usize) -> FromBytesWithNulError {\n+    fn interior_nul(pos: usize) -> FromBytesWithNulError {\n         FromBytesWithNulError {\n             kind: FromBytesWithNulErrorKind::InteriorNul(pos),\n         }\n     }\n-    const fn not_nul_terminated() -> FromBytesWithNulError {\n+    fn not_nul_terminated() -> FromBytesWithNulError {\n         FromBytesWithNulError {\n             kind: FromBytesWithNulErrorKind::NotNulTerminated,\n         }"}, {"sha": "059ced4f56efda5f3fea5e7ebcc63681d8d4f698", "filename": "src/libstd/sync/mpsc/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e15c62d61fa02fac93992db9297aa4a8a56cef93/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e15c62d61fa02fac93992db9297aa4a8a56cef93/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs?ref=e15c62d61fa02fac93992db9297aa4a8a56cef93", "patch": "@@ -785,7 +785,7 @@ pub fn sync_channel<T>(bound: usize) -> (SyncSender<T>, Receiver<T>) {\n ////////////////////////////////////////////////////////////////////////////////\n \n impl<T> Sender<T> {\n-    const fn new(inner: Flavor<T>) -> Sender<T> {\n+    fn new(inner: Flavor<T>) -> Sender<T> {\n         Sender {\n             inner: UnsafeCell::new(inner),\n         }"}, {"sha": "b8e50c9297b647c852eed8d5d4ed5e803c575047", "filename": "src/libstd/sync/mpsc/oneshot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e15c62d61fa02fac93992db9297aa4a8a56cef93/src%2Flibstd%2Fsync%2Fmpsc%2Foneshot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e15c62d61fa02fac93992db9297aa4a8a56cef93/src%2Flibstd%2Fsync%2Fmpsc%2Foneshot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Foneshot.rs?ref=e15c62d61fa02fac93992db9297aa4a8a56cef93", "patch": "@@ -89,7 +89,7 @@ enum MyUpgrade<T> {\n }\n \n impl<T> Packet<T> {\n-    pub const fn new() -> Packet<T> {\n+    pub fn new() -> Packet<T> {\n         Packet {\n             data: UnsafeCell::new(None),\n             upgrade: UnsafeCell::new(NothingSent),"}, {"sha": "c6d531c7a1ac59cbb3b641ea96fc645a3b2f6d2d", "filename": "src/libstd/sys_common/mutex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e15c62d61fa02fac93992db9297aa4a8a56cef93/src%2Flibstd%2Fsys_common%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e15c62d61fa02fac93992db9297aa4a8a56cef93/src%2Flibstd%2Fsys_common%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fmutex.rs?ref=e15c62d61fa02fac93992db9297aa4a8a56cef93", "patch": "@@ -80,7 +80,7 @@ impl Mutex {\n }\n \n // not meant to be exported to the outside world, just the containing module\n-pub const fn raw(mutex: &Mutex) -> &imp::Mutex { &mutex.0 }\n+pub fn raw(mutex: &Mutex) -> &imp::Mutex { &mutex.0 }\n \n #[must_use]\n /// A simple RAII utility for the above Mutex without the poisoning semantics."}, {"sha": "d09a233ed896f296529bbf597613a28285909639", "filename": "src/libstd/sys_common/net.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e15c62d61fa02fac93992db9297aa4a8a56cef93/src%2Flibstd%2Fsys_common%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e15c62d61fa02fac93992db9297aa4a8a56cef93/src%2Flibstd%2Fsys_common%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fnet.rs?ref=e15c62d61fa02fac93992db9297aa4a8a56cef93", "patch": "@@ -199,7 +199,7 @@ impl TcpStream {\n         Ok(TcpStream { inner: sock })\n     }\n \n-    pub const fn socket(&self) -> &Socket { &self.inner }\n+    pub fn socket(&self) -> &Socket { &self.inner }\n \n     pub fn into_socket(self) -> Socket { self.inner }\n \n@@ -339,7 +339,7 @@ impl TcpListener {\n         Ok(TcpListener { inner: sock })\n     }\n \n-    pub const fn socket(&self) -> &Socket { &self.inner }\n+    pub fn socket(&self) -> &Socket { &self.inner }\n \n     pub fn into_socket(self) -> Socket { self.inner }\n \n@@ -427,7 +427,7 @@ impl UdpSocket {\n         Ok(UdpSocket { inner: sock })\n     }\n \n-    pub const fn socket(&self) -> &Socket { &self.inner }\n+    pub fn socket(&self) -> &Socket { &self.inner }\n \n     pub fn into_socket(self) -> Socket { self.inner }\n "}, {"sha": "19ce932aa1233f6985158b03ef75fa05d5d641eb", "filename": "src/libstd/sys_common/wtf8.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e15c62d61fa02fac93992db9297aa4a8a56cef93/src%2Flibstd%2Fsys_common%2Fwtf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e15c62d61fa02fac93992db9297aa4a8a56cef93/src%2Flibstd%2Fsys_common%2Fwtf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fwtf8.rs?ref=e15c62d61fa02fac93992db9297aa4a8a56cef93", "patch": "@@ -85,13 +85,13 @@ impl CodePoint {\n     ///\n     /// Since all Unicode scalar values are code points, this always succeeds.\n     #[inline]\n-    pub const fn from_char(value: char) -> CodePoint {\n+    pub fn from_char(value: char) -> CodePoint {\n         CodePoint { value: value as u32 }\n     }\n \n     /// Returns the numeric value of the code point.\n     #[inline]\n-    pub const fn to_u32(&self) -> u32 {\n+    pub fn to_u32(&self) -> u32 {\n         self.value\n     }\n "}]}