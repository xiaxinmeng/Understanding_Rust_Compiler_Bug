{"sha": "61134aa54cd70f6d6a540f9ce221310456b683ce", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxMTM0YWE1NGNkNzBmNmQ2YTU0MGY5Y2UyMjEzMTA0NTZiNjgzY2U=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-11-18T14:46:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-18T14:46:23Z"}, "message": "Rollup merge of #78785 - cuviper:weak-getrandom, r=m-ou-se\n\nlinux: try to use libc getrandom to allow interposition\n\nWe'll try to use a weak `getrandom` symbol first, because that allows\nthings like `LD_PRELOAD` interposition. For example, perf measurements\nmight want to disable randomness to get reproducible results. If the\nweak symbol is not found, we fall back to a raw `SYS_getrandom` call.", "tree": {"sha": "214a33171a17877dc612341b1855441b3cc6907b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/214a33171a17877dc612341b1855441b3cc6907b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/61134aa54cd70f6d6a540f9ce221310456b683ce", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJftTO/CRBK7hj4Ov3rIwAAdHIIAKsKNvLUvjs0yia/JIeuVmPp\nSrkdhegK81kq6TgKBnpJmxcy1gu6pNtcbCFjskR29c1nQO/cl887uWdItOw4FLIv\n+5UbS1ccqQCROrPKrZp4MKn9b+bp2C29G7B+4NxKRBry/RPUPuQ8bRK0wOi3U47+\nwaGBS4m8cBhdE5TxAoUI+4qAxXQ7sKhuPhQWbeFZa4kTcbc+oIIpn25/YuEBaeS5\nyLoIqjWggy4yVUwcpvzKR/GZiSVYOLPdNtl2N7ZJWpiiWpJhVLIU+lIHSlE10QdH\nV3Brjo9KCWB9CBc0Xk0UVGf/SAfKY/iZUf8EOY8MsddpkqS6PIgzVUsfckMoGL0=\n=zWjN\n-----END PGP SIGNATURE-----\n", "payload": "tree 214a33171a17877dc612341b1855441b3cc6907b\nparent c7e9029b8064a48a983040937bae056617729980\nparent cd22381daa7f23bf20a739ac35c95ff77921d9a0\nauthor Mara Bos <m-ou.se@m-ou.se> 1605710783 +0100\ncommitter GitHub <noreply@github.com> 1605710783 +0100\n\nRollup merge of #78785 - cuviper:weak-getrandom, r=m-ou-se\n\nlinux: try to use libc getrandom to allow interposition\n\nWe'll try to use a weak `getrandom` symbol first, because that allows\nthings like `LD_PRELOAD` interposition. For example, perf measurements\nmight want to disable randomness to get reproducible results. If the\nweak symbol is not found, we fall back to a raw `SYS_getrandom` call.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/61134aa54cd70f6d6a540f9ce221310456b683ce", "html_url": "https://github.com/rust-lang/rust/commit/61134aa54cd70f6d6a540f9ce221310456b683ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/61134aa54cd70f6d6a540f9ce221310456b683ce/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7e9029b8064a48a983040937bae056617729980", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7e9029b8064a48a983040937bae056617729980", "html_url": "https://github.com/rust-lang/rust/commit/c7e9029b8064a48a983040937bae056617729980"}, {"sha": "cd22381daa7f23bf20a739ac35c95ff77921d9a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd22381daa7f23bf20a739ac35c95ff77921d9a0", "html_url": "https://github.com/rust-lang/rust/commit/cd22381daa7f23bf20a739ac35c95ff77921d9a0"}], "stats": {"total": 53, "additions": 35, "deletions": 18}, "files": [{"sha": "1dc16ef099367c8835f503943bc1e869d4b21a5d", "filename": "library/std/src/sys/unix/kernel_copy.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/61134aa54cd70f6d6a540f9ce221310456b683ce/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fkernel_copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61134aa54cd70f6d6a540f9ce221310456b683ce/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fkernel_copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fkernel_copy.rs?ref=61134aa54cd70f6d6a540f9ce221310456b683ce", "patch": "@@ -445,15 +445,15 @@ pub(super) fn copy_regular_files(reader: RawFd, writer: RawFd, max_len: u64) ->\n     // We store the availability in a global to avoid unnecessary syscalls\n     static HAS_COPY_FILE_RANGE: AtomicBool = AtomicBool::new(true);\n \n-    unsafe fn copy_file_range(\n-        fd_in: libc::c_int,\n-        off_in: *mut libc::loff_t,\n-        fd_out: libc::c_int,\n-        off_out: *mut libc::loff_t,\n-        len: libc::size_t,\n-        flags: libc::c_uint,\n-    ) -> libc::c_long {\n-        libc::syscall(libc::SYS_copy_file_range, fd_in, off_in, fd_out, off_out, len, flags)\n+    syscall! {\n+        fn copy_file_range(\n+            fd_in: libc::c_int,\n+            off_in: *mut libc::loff_t,\n+            fd_out: libc::c_int,\n+            off_out: *mut libc::loff_t,\n+            len: libc::size_t,\n+            flags: libc::c_uint\n+        ) -> libc::ssize_t\n     }\n \n     let has_copy_file_range = HAS_COPY_FILE_RANGE.load(Ordering::Relaxed);"}, {"sha": "38ddb41700c4b323c6ec2719f3c6d1072a019e91", "filename": "library/std/src/sys/unix/rand.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/61134aa54cd70f6d6a540f9ce221310456b683ce/library%2Fstd%2Fsrc%2Fsys%2Funix%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61134aa54cd70f6d6a540f9ce221310456b683ce/library%2Fstd%2Fsrc%2Fsys%2Funix%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Frand.rs?ref=61134aa54cd70f6d6a540f9ce221310456b683ce", "patch": "@@ -25,10 +25,19 @@ mod imp {\n     use crate::io::Read;\n \n     #[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n-    fn getrandom(buf: &mut [u8]) -> libc::c_long {\n-        unsafe {\n-            libc::syscall(libc::SYS_getrandom, buf.as_mut_ptr(), buf.len(), libc::GRND_NONBLOCK)\n+    fn getrandom(buf: &mut [u8]) -> libc::ssize_t {\n+        // A weak symbol allows interposition, e.g. for perf measurements that want to\n+        // disable randomness for consistency. Otherwise, we'll try a raw syscall.\n+        // (`getrandom` was added in glibc 2.25, musl 1.1.20, android API level 28)\n+        syscall! {\n+            fn getrandom(\n+                buffer: *mut libc::c_void,\n+                length: libc::size_t,\n+                flags: libc::c_uint\n+            ) -> libc::ssize_t\n         }\n+\n+        unsafe { getrandom(buf.as_mut_ptr().cast(), buf.len(), libc::GRND_NONBLOCK) }\n     }\n \n     #[cfg(not(any(target_os = \"linux\", target_os = \"android\")))]"}, {"sha": "6251c3147300a74c68985dffbac6517fa0d5d3bd", "filename": "library/std/src/sys/unix/weak.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/61134aa54cd70f6d6a540f9ce221310456b683ce/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fweak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61134aa54cd70f6d6a540f9ce221310456b683ce/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fweak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fweak.rs?ref=61134aa54cd70f6d6a540f9ce221310456b683ce", "patch": "@@ -66,7 +66,7 @@ unsafe fn fetch(name: &str) -> usize {\n     libc::dlsym(libc::RTLD_DEFAULT, name.as_ptr()) as usize\n }\n \n-#[cfg(not(target_os = \"linux\"))]\n+#[cfg(not(any(target_os = \"linux\", target_os = \"android\")))]\n macro_rules! syscall {\n     (fn $name:ident($($arg_name:ident: $t:ty),*) -> $ret:ty) => (\n         unsafe fn $name($($arg_name: $t),*) -> $ret {\n@@ -84,18 +84,26 @@ macro_rules! syscall {\n     )\n }\n \n-#[cfg(target_os = \"linux\")]\n+#[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n macro_rules! syscall {\n     (fn $name:ident($($arg_name:ident: $t:ty),*) -> $ret:ty) => (\n         unsafe fn $name($($arg_name:$t),*) -> $ret {\n             // This looks like a hack, but concat_idents only accepts idents\n             // (not paths).\n             use libc::*;\n \n-            syscall(\n-                concat_idents!(SYS_, $name),\n-                $($arg_name as c_long),*\n-            ) as $ret\n+            weak! { fn $name($($t),*) -> $ret }\n+\n+            // Use a weak symbol from libc when possible, allowing `LD_PRELOAD`\n+            // interposition, but if it's not found just use a raw syscall.\n+            if let Some(fun) = $name.get() {\n+                fun($($arg_name),*)\n+            } else {\n+                syscall(\n+                    concat_idents!(SYS_, $name),\n+                    $($arg_name as c_long),*\n+                ) as $ret\n+            }\n         }\n     )\n }"}]}