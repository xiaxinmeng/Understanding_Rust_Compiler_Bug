{"sha": "9f5cd0315386e761beae8afd07df94e42a4db154", "node_id": "C_kwDOAAsO6NoAKDlmNWNkMDMxNTM4NmU3NjFiZWFlOGFmZDA3ZGY5NGU0MmE0ZGIxNTQ", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-12-07T09:24:00Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-01-16T14:46:44Z"}, "message": "Move compiler input and ouput paths into session", "tree": {"sha": "6e64a92962daa43d7eb93fc072225d8e9ee79e6b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e64a92962daa43d7eb93fc072225d8e9ee79e6b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f5cd0315386e761beae8afd07df94e42a4db154", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f5cd0315386e761beae8afd07df94e42a4db154", "html_url": "https://github.com/rust-lang/rust/commit/9f5cd0315386e761beae8afd07df94e42a4db154", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f5cd0315386e761beae8afd07df94e42a4db154/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42f75f1e462f90bfe20f458690113c3cb2a26271", "url": "https://api.github.com/repos/rust-lang/rust/commits/42f75f1e462f90bfe20f458690113c3cb2a26271", "html_url": "https://github.com/rust-lang/rust/commit/42f75f1e462f90bfe20f458690113c3cb2a26271"}], "stats": {"total": 267, "additions": 113, "deletions": 154}, "files": [{"sha": "28fbcb15b2b5893ab9ea6912d5047a05a6f293a7", "filename": "compiler/rustc_codegen_cranelift/src/debuginfo/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f5cd0315386e761beae8afd07df94e42a4db154/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f5cd0315386e761beae8afd07df94e42a4db154/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdebuginfo%2Fmod.rs?ref=9f5cd0315386e761beae8afd07df94e42a4db154", "patch": "@@ -68,7 +68,7 @@ impl DebugContext {\n             .working_dir\n             .to_string_lossy(FileNameDisplayPreference::Remapped)\n             .into_owned();\n-        let (name, file_info) = match tcx.sess.local_crate_source_file.clone() {\n+        let (name, file_info) = match tcx.sess.local_crate_source_file() {\n             Some(path) => {\n                 let name = path.to_string_lossy().into_owned();\n                 (name, None)"}, {"sha": "b6eb5ee183fa397e6487e75983d27cbe393bcdfc", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9f5cd0315386e761beae8afd07df94e42a4db154/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f5cd0315386e761beae8afd07df94e42a4db154/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs?ref=9f5cd0315386e761beae8afd07df94e42a4db154", "patch": "@@ -782,10 +782,10 @@ pub fn build_compile_unit_di_node<'ll, 'tcx>(\n     codegen_unit_name: &str,\n     debug_context: &CodegenUnitDebugContext<'ll, 'tcx>,\n ) -> &'ll DIDescriptor {\n-    let mut name_in_debuginfo = match tcx.sess.local_crate_source_file {\n-        Some(ref path) => path.clone(),\n-        None => PathBuf::from(tcx.crate_name(LOCAL_CRATE).as_str()),\n-    };\n+    let mut name_in_debuginfo = tcx\n+        .sess\n+        .local_crate_source_file()\n+        .unwrap_or_else(|| PathBuf::from(tcx.crate_name(LOCAL_CRATE).as_str()));\n \n     // To avoid breaking split DWARF, we need to ensure that each codegen unit\n     // has a unique `DW_AT_name`. This is because there's a remote chance that"}, {"sha": "66dadf97b1987952c67b860e7c7adf2fb42c8d74", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 17, "deletions": 39, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/9f5cd0315386e761beae8afd07df94e42a4db154/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f5cd0315386e761beae8afd07df94e42a4db154/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=9f5cd0315386e761beae8afd07df94e42a4db154", "patch": "@@ -26,7 +26,6 @@ use rustc_errors::registry::{InvalidErrorCode, Registry};\n use rustc_errors::{ErrorGuaranteed, PResult};\n use rustc_feature::find_gated_cfg;\n use rustc_hir::def_id::LOCAL_CRATE;\n-use rustc_interface::interface::CompilerIO;\n use rustc_interface::util::{self, collect_crate_types, get_codegen_backend};\n use rustc_interface::{interface, Queries};\n use rustc_lint::LintStore;\n@@ -260,12 +259,8 @@ fn run_compiler(\n                         describe_lints(compiler.session(), &lint_store, registered_lints);\n                         return;\n                     }\n-                    let should_stop = print_crate_info(\n-                        &***compiler.codegen_backend(),\n-                        compiler.session(),\n-                        false,\n-                        compiler.io(),\n-                    );\n+                    let should_stop =\n+                        print_crate_info(&***compiler.codegen_backend(), compiler.session(), false);\n \n                     if should_stop == Compilation::Stop {\n                         return;\n@@ -287,16 +282,9 @@ fn run_compiler(\n \n     interface::run_compiler(config, |compiler| {\n         let sess = compiler.session();\n-        let should_stop =\n-            print_crate_info(&***compiler.codegen_backend(), sess, true, compiler.io())\n-                .and_then(|| {\n-                    list_metadata(\n-                        sess,\n-                        &*compiler.codegen_backend().metadata_loader(),\n-                        &compiler.io().input,\n-                    )\n-                })\n-                .and_then(|| try_process_rlink(sess, compiler));\n+        let should_stop = print_crate_info(&***compiler.codegen_backend(), sess, true)\n+            .and_then(|| list_metadata(sess, &*compiler.codegen_backend().metadata_loader()))\n+            .and_then(|| try_process_rlink(sess, compiler));\n \n         if should_stop == Compilation::Stop {\n             return sess.compile_status();\n@@ -310,17 +298,12 @@ fn run_compiler(\n                 if ppm.needs_ast_map() {\n                     let expanded_crate = queries.expansion()?.borrow().0.clone();\n                     queries.global_ctxt()?.enter(|tcx| {\n-                        pretty::print_after_hir_lowering(\n-                            tcx,\n-                            compiler.io(),\n-                            &*expanded_crate,\n-                            *ppm,\n-                        );\n+                        pretty::print_after_hir_lowering(tcx, &*expanded_crate, *ppm);\n                         Ok(())\n                     })?;\n                 } else {\n                     let krate = queries.parse()?.steal();\n-                    pretty::print_after_parsing(sess, compiler.io(), &krate, *ppm);\n+                    pretty::print_after_parsing(sess, &krate, *ppm);\n                 }\n                 trace!(\"finished pretty-printing\");\n                 return early_exit();\n@@ -370,9 +353,9 @@ fn run_compiler(\n                         save::process_crate(\n                             tcx,\n                             crate_name,\n-                            &compiler.io().input,\n+                            &sess.io.input,\n                             None,\n-                            DumpHandler::new(compiler.io().output_dir.as_deref(), crate_name),\n+                            DumpHandler::new(sess.io.output_dir.as_deref(), crate_name),\n                         )\n                     });\n                 }\n@@ -546,7 +529,7 @@ fn show_content_with_pager(content: &str) {\n \n pub fn try_process_rlink(sess: &Session, compiler: &interface::Compiler) -> Compilation {\n     if sess.opts.unstable_opts.link_only {\n-        if let Input::File(file) = &compiler.io().input {\n+        if let Input::File(file) = &sess.io.input {\n             // FIXME: #![crate_type] and #![crate_name] support not implemented yet\n             sess.init_crate_types(collect_crate_types(sess, &[]));\n             let outputs = compiler.build_output_filenames(sess, &[]);\n@@ -587,13 +570,9 @@ pub fn try_process_rlink(sess: &Session, compiler: &interface::Compiler) -> Comp\n     }\n }\n \n-pub fn list_metadata(\n-    sess: &Session,\n-    metadata_loader: &dyn MetadataLoader,\n-    input: &Input,\n-) -> Compilation {\n+pub fn list_metadata(sess: &Session, metadata_loader: &dyn MetadataLoader) -> Compilation {\n     if sess.opts.unstable_opts.ls {\n-        match *input {\n+        match sess.io.input {\n             Input::File(ref ifile) => {\n                 let path = &(*ifile);\n                 let mut v = Vec::new();\n@@ -614,7 +593,6 @@ fn print_crate_info(\n     codegen_backend: &dyn CodegenBackend,\n     sess: &Session,\n     parse_attrs: bool,\n-    io: &CompilerIO,\n ) -> Compilation {\n     use rustc_session::config::PrintRequest::*;\n     // NativeStaticLibs and LinkArgs are special - printed during linking\n@@ -624,7 +602,7 @@ fn print_crate_info(\n     }\n \n     let attrs = if parse_attrs {\n-        let result = parse_crate_attrs(sess, &io.input);\n+        let result = parse_crate_attrs(sess);\n         match result {\n             Ok(attrs) => Some(attrs),\n             Err(mut parse_error) => {\n@@ -649,8 +627,8 @@ fn print_crate_info(\n             }\n             FileNames | CrateName => {\n                 let attrs = attrs.as_ref().unwrap();\n-                let t_outputs = rustc_interface::util::build_output_filenames(io, attrs, sess);\n-                let id = rustc_session::output::find_crate_name(sess, attrs, &io.input);\n+                let t_outputs = rustc_interface::util::build_output_filenames(attrs, sess);\n+                let id = rustc_session::output::find_crate_name(sess, attrs);\n                 if *req == PrintRequest::CrateName {\n                     println!(\"{id}\");\n                     continue;\n@@ -1086,8 +1064,8 @@ pub fn handle_options(args: &[String]) -> Option<getopts::Matches> {\n     Some(matches)\n }\n \n-fn parse_crate_attrs<'a>(sess: &'a Session, input: &Input) -> PResult<'a, ast::AttrVec> {\n-    match input {\n+fn parse_crate_attrs<'a>(sess: &'a Session) -> PResult<'a, ast::AttrVec> {\n+    match &sess.io.input {\n         Input::File(ifile) => rustc_parse::parse_crate_attrs_from_file(ifile, &sess.parse_sess),\n         Input::Str { name, input } => rustc_parse::parse_crate_attrs_from_source_str(\n             name.clone(),"}, {"sha": "ae3ac8625b1862ca109c1a216329268abc6a6557", "filename": "compiler/rustc_driver/src/pretty.rs", "status": "modified", "additions": 14, "deletions": 25, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/9f5cd0315386e761beae8afd07df94e42a4db154/compiler%2Frustc_driver%2Fsrc%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f5cd0315386e761beae8afd07df94e42a4db154/compiler%2Frustc_driver%2Fsrc%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Fpretty.rs?ref=9f5cd0315386e761beae8afd07df94e42a4db154", "patch": "@@ -6,18 +6,16 @@ use rustc_ast_pretty::pprust;\n use rustc_errors::ErrorGuaranteed;\n use rustc_hir as hir;\n use rustc_hir_pretty as pprust_hir;\n-use rustc_interface::interface::CompilerIO;\n use rustc_middle::hir::map as hir_map;\n use rustc_middle::mir::{write_mir_graphviz, write_mir_pretty};\n use rustc_middle::ty::{self, TyCtxt};\n-use rustc_session::config::{Input, PpAstTreeMode, PpHirMode, PpMode, PpSourceMode};\n+use rustc_session::config::{PpAstTreeMode, PpHirMode, PpMode, PpSourceMode};\n use rustc_session::Session;\n use rustc_span::symbol::Ident;\n use rustc_span::FileName;\n \n use std::cell::Cell;\n use std::fmt::Write;\n-use std::path::PathBuf;\n \n pub use self::PpMode::*;\n pub use self::PpSourceMode::*;\n@@ -346,8 +344,8 @@ impl<'tcx> pprust_hir::PpAnn for TypedAnnotation<'tcx> {\n     }\n }\n \n-fn get_source(input: &Input, sess: &Session) -> (String, FileName) {\n-    let src_name = input.source_name();\n+fn get_source(sess: &Session) -> (String, FileName) {\n+    let src_name = sess.io.input.source_name();\n     let src = String::clone(\n         sess.source_map()\n             .get_source_file(&src_name)\n@@ -359,8 +357,8 @@ fn get_source(input: &Input, sess: &Session) -> (String, FileName) {\n     (src, src_name)\n }\n \n-fn write_or_print(out: &str, ofile: &Option<PathBuf>, sess: &Session) {\n-    match ofile {\n+fn write_or_print(out: &str, sess: &Session) {\n+    match &sess.io.output_file {\n         None => print!(\"{out}\"),\n         Some(p) => {\n             if let Err(e) = std::fs::write(p, out) {\n@@ -373,8 +371,8 @@ fn write_or_print(out: &str, ofile: &Option<PathBuf>, sess: &Session) {\n     }\n }\n \n-pub fn print_after_parsing(sess: &Session, io: &CompilerIO, krate: &ast::Crate, ppm: PpMode) {\n-    let (src, src_name) = get_source(&io.input, sess);\n+pub fn print_after_parsing(sess: &Session, krate: &ast::Crate, ppm: PpMode) {\n+    let (src, src_name) = get_source(sess);\n \n     let out = match ppm {\n         Source(s) => {\n@@ -402,21 +400,16 @@ pub fn print_after_parsing(sess: &Session, io: &CompilerIO, krate: &ast::Crate,\n         _ => unreachable!(),\n     };\n \n-    write_or_print(&out, &io.output_file, sess);\n+    write_or_print(&out, sess);\n }\n \n-pub fn print_after_hir_lowering<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n-    io: &CompilerIO,\n-    krate: &ast::Crate,\n-    ppm: PpMode,\n-) {\n+pub fn print_after_hir_lowering<'tcx>(tcx: TyCtxt<'tcx>, krate: &ast::Crate, ppm: PpMode) {\n     if ppm.needs_analysis() {\n-        abort_on_err(print_with_analysis(tcx, ppm, &io.output_file), tcx.sess);\n+        abort_on_err(print_with_analysis(tcx, ppm), tcx.sess);\n         return;\n     }\n \n-    let (src, src_name) = get_source(&io.input, tcx.sess);\n+    let (src, src_name) = get_source(tcx.sess);\n \n     let out = match ppm {\n         Source(s) => {\n@@ -468,18 +461,14 @@ pub fn print_after_hir_lowering<'tcx>(\n         _ => unreachable!(),\n     };\n \n-    write_or_print(&out, &io.output_file, tcx.sess);\n+    write_or_print(&out, tcx.sess);\n }\n \n // In an ideal world, this would be a public function called by the driver after\n // analysis is performed. However, we want to call `phase_3_run_analysis_passes`\n // with a different callback than the standard driver, so that isn't easy.\n // Instead, we call that function ourselves.\n-fn print_with_analysis(\n-    tcx: TyCtxt<'_>,\n-    ppm: PpMode,\n-    ofile: &Option<PathBuf>,\n-) -> Result<(), ErrorGuaranteed> {\n+fn print_with_analysis(tcx: TyCtxt<'_>, ppm: PpMode) -> Result<(), ErrorGuaranteed> {\n     tcx.analysis(())?;\n     let out = match ppm {\n         Mir => {\n@@ -512,7 +501,7 @@ fn print_with_analysis(\n         _ => unreachable!(),\n     };\n \n-    write_or_print(&out, ofile, tcx.sess);\n+    write_or_print(&out, tcx.sess);\n \n     Ok(())\n }"}, {"sha": "7a5e45ada3f6a8f9528778435c6496d78980dc65", "filename": "compiler/rustc_interface/src/interface.rs", "status": "modified", "additions": 10, "deletions": 22, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/9f5cd0315386e761beae8afd07df94e42a4db154/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f5cd0315386e761beae8afd07df94e42a4db154/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Finterface.rs?ref=9f5cd0315386e761beae8afd07df94e42a4db154", "patch": "@@ -14,10 +14,10 @@ use rustc_middle::ty;\n use rustc_parse::maybe_new_parser_from_source_str;\n use rustc_query_impl::QueryCtxt;\n use rustc_session::config::{self, CheckCfg, ErrorOutputType, Input, OutputFilenames};\n-use rustc_session::early_error;\n use rustc_session::lint;\n use rustc_session::parse::{CrateConfig, ParseSess};\n use rustc_session::Session;\n+use rustc_session::{early_error, CompilerIO};\n use rustc_span::source_map::{FileLoader, FileName};\n use rustc_span::symbol::sym;\n use std::path::PathBuf;\n@@ -35,29 +35,18 @@ pub type Result<T> = result::Result<T, ErrorGuaranteed>;\n pub struct Compiler {\n     pub(crate) sess: Lrc<Session>,\n     codegen_backend: Lrc<Box<dyn CodegenBackend>>,\n-    pub(crate) io: CompilerIO,\n     pub(crate) register_lints: Option<Box<dyn Fn(&Session, &mut LintStore) + Send + Sync>>,\n     pub(crate) override_queries:\n         Option<fn(&Session, &mut ty::query::Providers, &mut ty::query::ExternProviders)>,\n }\n \n-pub struct CompilerIO {\n-    pub input: Input,\n-    pub output_dir: Option<PathBuf>,\n-    pub output_file: Option<PathBuf>,\n-    pub temps_dir: Option<PathBuf>,\n-}\n-\n impl Compiler {\n     pub fn session(&self) -> &Lrc<Session> {\n         &self.sess\n     }\n     pub fn codegen_backend(&self) -> &Lrc<Box<dyn CodegenBackend>> {\n         &self.codegen_backend\n     }\n-    pub fn io(&self) -> &CompilerIO {\n-        &self.io\n-    }\n     pub fn register_lints(&self) -> &Option<Box<dyn Fn(&Session, &mut LintStore) + Send + Sync>> {\n         &self.register_lints\n     }\n@@ -66,7 +55,7 @@ impl Compiler {\n         sess: &Session,\n         attrs: &[ast::Attribute],\n     ) -> OutputFilenames {\n-        util::build_output_filenames(&self.io, attrs, sess)\n+        util::build_output_filenames(attrs, sess)\n     }\n }\n \n@@ -273,12 +262,19 @@ pub fn run_compiler<R: Send>(config: Config, f: impl FnOnce(&Compiler) -> R + Se\n             crate::callbacks::setup_callbacks();\n \n             let registry = &config.registry;\n+\n+            let temps_dir = config.opts.unstable_opts.temps_dir.as_deref().map(PathBuf::from);\n             let (mut sess, codegen_backend) = util::create_session(\n                 config.opts,\n                 config.crate_cfg,\n                 config.crate_check_cfg,\n                 config.file_loader,\n-                config.input.opt_path(),\n+                CompilerIO {\n+                    input: config.input,\n+                    output_dir: config.output_dir,\n+                    output_file: config.output_file,\n+                    temps_dir,\n+                },\n                 config.lint_caps,\n                 config.make_codegen_backend,\n                 registry.clone(),\n@@ -288,17 +284,9 @@ pub fn run_compiler<R: Send>(config: Config, f: impl FnOnce(&Compiler) -> R + Se\n                 parse_sess_created(&mut sess.parse_sess);\n             }\n \n-            let temps_dir = sess.opts.unstable_opts.temps_dir.as_deref().map(PathBuf::from);\n-\n             let compiler = Compiler {\n                 sess: Lrc::new(sess),\n                 codegen_backend: Lrc::new(codegen_backend),\n-                io: CompilerIO {\n-                    input: config.input,\n-                    output_dir: config.output_dir,\n-                    output_file: config.output_file,\n-                    temps_dir,\n-                },\n                 register_lints: config.register_lints,\n                 override_queries: config.override_queries,\n             };"}, {"sha": "2fa846b7e4bfc0c349c65540110c44bd549901a7", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9f5cd0315386e761beae8afd07df94e42a4db154/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f5cd0315386e761beae8afd07df94e42a4db154/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=9f5cd0315386e761beae8afd07df94e42a4db154", "patch": "@@ -50,8 +50,8 @@ use std::rc::Rc;\n use std::sync::LazyLock;\n use std::{env, fs, iter};\n \n-pub fn parse<'a>(sess: &'a Session, input: &Input) -> PResult<'a, ast::Crate> {\n-    let krate = sess.time(\"parse_crate\", || match input {\n+pub fn parse<'a>(sess: &'a Session) -> PResult<'a, ast::Crate> {\n+    let krate = sess.time(\"parse_crate\", || match &sess.io.input {\n         Input::File(file) => parse_crate_from_file(file, &sess.parse_sess),\n         Input::Str { input, name } => {\n             parse_crate_from_source_str(name.clone(), input.clone(), &sess.parse_sess)\n@@ -665,21 +665,20 @@ fn write_out_deps(\n \n pub fn prepare_outputs(\n     sess: &Session,\n-    compiler: &Compiler,\n     krate: &ast::Crate,\n     boxed_resolver: &RefCell<BoxedResolver>,\n     crate_name: Symbol,\n ) -> Result<OutputFilenames> {\n     let _timer = sess.timer(\"prepare_outputs\");\n \n     // FIXME: rustdoc passes &[] instead of &krate.attrs here\n-    let outputs = util::build_output_filenames(&compiler.io, &krate.attrs, sess);\n+    let outputs = util::build_output_filenames(&krate.attrs, sess);\n \n     let output_paths =\n-        generated_output_paths(sess, &outputs, compiler.io.output_file.is_some(), crate_name);\n+        generated_output_paths(sess, &outputs, sess.io.output_file.is_some(), crate_name);\n \n     // Ensure the source file isn't accidentally overwritten during compilation.\n-    if let Some(ref input_path) = compiler.io.input.opt_path() {\n+    if let Some(ref input_path) = sess.io.input.opt_path() {\n         if sess.opts.will_create_output_file() {\n             if output_contains_path(&output_paths, input_path) {\n                 let reported = sess.emit_err(InputFileWouldBeOverWritten { path: input_path });\n@@ -693,7 +692,7 @@ pub fn prepare_outputs(\n         }\n     }\n \n-    if let Some(ref dir) = compiler.io.temps_dir {\n+    if let Some(ref dir) = sess.io.temps_dir {\n         if fs::create_dir_all(dir).is_err() {\n             let reported = sess.emit_err(TempsDirError);\n             return Err(reported);\n@@ -706,7 +705,7 @@ pub fn prepare_outputs(\n         && sess.opts.output_types.len() == 1;\n \n     if !only_dep_info {\n-        if let Some(ref dir) = compiler.io.output_dir {\n+        if let Some(ref dir) = sess.io.output_dir {\n             if fs::create_dir_all(dir).is_err() {\n                 let reported = sess.emit_err(OutDirError);\n                 return Err(reported);"}, {"sha": "dcfb4f43bd01850ec7e05e82cb2c7f88b056c05a", "filename": "compiler/rustc_interface/src/queries.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9f5cd0315386e761beae8afd07df94e42a4db154/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f5cd0315386e761beae8afd07df94e42a4db154/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs?ref=9f5cd0315386e761beae8afd07df94e42a4db154", "patch": "@@ -128,10 +128,8 @@ impl<'tcx> Queries<'tcx> {\n     }\n \n     pub fn parse(&self) -> Result<QueryResult<'_, ast::Crate>> {\n-        self.parse.compute(|| {\n-            passes::parse(self.session(), &self.compiler.io.input)\n-                .map_err(|mut parse_error| parse_error.emit())\n-        })\n+        self.parse\n+            .compute(|| passes::parse(self.session()).map_err(|mut parse_error| parse_error.emit()))\n     }\n \n     pub fn register_plugins(&self) -> Result<QueryResult<'_, (ast::Crate, Lrc<LintStore>)>> {\n@@ -165,7 +163,7 @@ impl<'tcx> Queries<'tcx> {\n                 let parse_result = self.parse()?;\n                 let krate = parse_result.borrow();\n                 // parse `#[crate_name]` even if `--crate-name` was passed, to make sure it matches.\n-                find_crate_name(self.session(), &krate.attrs, &self.compiler.io.input)\n+                find_crate_name(self.session(), &krate.attrs)\n             })\n         })\n     }\n@@ -214,13 +212,7 @@ impl<'tcx> Queries<'tcx> {\n             let crate_name = *self.crate_name()?.borrow();\n             let (krate, resolver, lint_store) = self.expansion()?.steal();\n \n-            let outputs = passes::prepare_outputs(\n-                self.session(),\n-                self.compiler,\n-                &krate,\n-                &resolver,\n-                crate_name,\n-            )?;\n+            let outputs = passes::prepare_outputs(self.session(), &krate, &resolver, crate_name)?;\n \n             let ty::ResolverOutputs {\n                 untracked,"}, {"sha": "f94bc4d4c66ac9d0fd872586a12308b6aa86731d", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9f5cd0315386e761beae8afd07df94e42a4db154/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f5cd0315386e761beae8afd07df94e42a4db154/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=9f5cd0315386e761beae8afd07df94e42a4db154", "patch": "@@ -4,6 +4,7 @@ use crate::interface::parse_cfgspecs;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::{emitter::HumanReadableErrorType, registry, ColorConfig};\n use rustc_session::config::rustc_optgroups;\n+use rustc_session::config::Input;\n use rustc_session::config::TraitSolver;\n use rustc_session::config::{build_configuration, build_session_options, to_crate_config};\n use rustc_session::config::{\n@@ -17,9 +18,11 @@ use rustc_session::config::{InstrumentCoverage, Passes};\n use rustc_session::lint::Level;\n use rustc_session::search_paths::SearchPath;\n use rustc_session::utils::{CanonicalizedPath, NativeLib, NativeLibKind};\n+use rustc_session::CompilerIO;\n use rustc_session::{build_session, getopts, Session};\n use rustc_span::edition::{Edition, DEFAULT_EDITION};\n use rustc_span::symbol::sym;\n+use rustc_span::FileName;\n use rustc_span::SourceFileHashAlgorithm;\n use rustc_target::spec::{CodeModel, LinkerFlavorCli, MergeFunctions, PanicStrategy, RelocModel};\n use rustc_target::spec::{RelroLevel, SanitizerSet, SplitDebuginfo, StackProtector, TlsModel};\n@@ -39,7 +42,14 @@ fn build_session_options_and_crate_config(matches: getopts::Matches) -> (Options\n fn mk_session(matches: getopts::Matches) -> (Session, CfgSpecs) {\n     let registry = registry::Registry::new(&[]);\n     let (sessopts, cfg) = build_session_options_and_crate_config(matches);\n-    let sess = build_session(sessopts, None, None, registry, Default::default(), None, None);\n+    let temps_dir = sessopts.unstable_opts.temps_dir.as_deref().map(PathBuf::from);\n+    let io = CompilerIO {\n+        input: Input::Str { name: FileName::Custom(String::new()), input: String::new() },\n+        output_dir: None,\n+        output_file: None,\n+        temps_dir,\n+    };\n+    let sess = build_session(sessopts, io, None, registry, Default::default(), None, None);\n     (sess, cfg)\n }\n "}, {"sha": "54363e07b971a2830c789a7c34336d362e480573", "filename": "compiler/rustc_interface/src/util.rs", "status": "modified", "additions": 10, "deletions": 15, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/9f5cd0315386e761beae8afd07df94e42a4db154/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f5cd0315386e761beae8afd07df94e42a4db154/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Futil.rs?ref=9f5cd0315386e761beae8afd07df94e42a4db154", "patch": "@@ -17,6 +17,7 @@ use rustc_span::edition::Edition;\n use rustc_span::lev_distance::find_best_match_for_name;\n use rustc_span::source_map::FileLoader;\n use rustc_span::symbol::{sym, Symbol};\n+use session::CompilerIO;\n use std::env;\n use std::env::consts::{DLL_PREFIX, DLL_SUFFIX};\n use std::mem;\n@@ -25,8 +26,6 @@ use std::sync::atomic::{AtomicBool, Ordering};\n use std::sync::OnceLock;\n use std::thread;\n \n-use crate::interface::CompilerIO;\n-\n /// Function pointer type that constructs a new CodegenBackend.\n pub type MakeBackendFn = fn() -> Box<dyn CodegenBackend>;\n \n@@ -60,7 +59,7 @@ pub fn create_session(\n     cfg: FxHashSet<(String, Option<String>)>,\n     check_cfg: CheckCfg,\n     file_loader: Option<Box<dyn FileLoader + Send + Sync + 'static>>,\n-    input_path: Option<PathBuf>,\n+    io: CompilerIO,\n     lint_caps: FxHashMap<lint::LintId, lint::Level>,\n     make_codegen_backend: Option<\n         Box<dyn FnOnce(&config::Options) -> Box<dyn CodegenBackend> + Send>,\n@@ -91,7 +90,7 @@ pub fn create_session(\n \n     let mut sess = session::build_session(\n         sopts,\n-        input_path,\n+        io,\n         bundle,\n         descriptions,\n         lint_caps,\n@@ -488,31 +487,27 @@ pub fn collect_crate_types(session: &Session, attrs: &[ast::Attribute]) -> Vec<C\n     base\n }\n \n-pub fn build_output_filenames(\n-    io: &CompilerIO,\n-    attrs: &[ast::Attribute],\n-    sess: &Session,\n-) -> OutputFilenames {\n-    match io.output_file {\n+pub fn build_output_filenames(attrs: &[ast::Attribute], sess: &Session) -> OutputFilenames {\n+    match sess.io.output_file {\n         None => {\n             // \"-\" as input file will cause the parser to read from stdin so we\n             // have to make up a name\n             // We want to toss everything after the final '.'\n-            let dirpath = io.output_dir.clone().unwrap_or_default();\n+            let dirpath = sess.io.output_dir.clone().unwrap_or_default();\n \n             // If a crate name is present, we use it as the link name\n             let stem = sess\n                 .opts\n                 .crate_name\n                 .clone()\n                 .or_else(|| rustc_attr::find_crate_name(sess, attrs).map(|n| n.to_string()))\n-                .unwrap_or_else(|| io.input.filestem().to_owned());\n+                .unwrap_or_else(|| sess.io.input.filestem().to_owned());\n \n             OutputFilenames::new(\n                 dirpath,\n                 stem,\n                 None,\n-                io.temps_dir.clone(),\n+                sess.io.temps_dir.clone(),\n                 sess.opts.cg.extra_filename.clone(),\n                 sess.opts.output_types.clone(),\n             )\n@@ -533,15 +528,15 @@ pub fn build_output_filenames(\n                 }\n                 Some(out_file.clone())\n             };\n-            if io.output_dir != None {\n+            if sess.io.output_dir != None {\n                 sess.warn(\"ignoring --out-dir flag due to -o flag\");\n             }\n \n             OutputFilenames::new(\n                 out_file.parent().unwrap_or_else(|| Path::new(\"\")).to_path_buf(),\n                 out_file.file_stem().unwrap_or_default().to_str().unwrap().to_string(),\n                 ofile,\n-                io.temps_dir.clone(),\n+                sess.io.temps_dir.clone(),\n                 sess.opts.cg.extra_filename.clone(),\n                 sess.opts.output_types.clone(),\n             )"}, {"sha": "b327ba63330ba8044ddd15daa4bc110a3ab9e023", "filename": "compiler/rustc_passes/src/entry.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f5cd0315386e761beae8afd07df94e42a4db154/compiler%2Frustc_passes%2Fsrc%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f5cd0315386e761beae8afd07df94e42a4db154/compiler%2Frustc_passes%2Fsrc%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fentry.rs?ref=9f5cd0315386e761beae8afd07df94e42a4db154", "patch": "@@ -195,7 +195,7 @@ fn no_main_err(tcx: TyCtxt<'_>, visitor: &EntryContext<'_>) {\n \n     // There is no main function.\n     let mut has_filename = true;\n-    let filename = tcx.sess.local_crate_source_file.clone().unwrap_or_else(|| {\n+    let filename = tcx.sess.local_crate_source_file().unwrap_or_else(|| {\n         has_filename = false;\n         Default::default()\n     });"}, {"sha": "a5f09de1c401ba0c86fac6d1df3953b109de29fa", "filename": "compiler/rustc_save_analysis/src/dump_visitor.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9f5cd0315386e761beae8afd07df94e42a4db154/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f5cd0315386e761beae8afd07df94e42a4db154/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs?ref=9f5cd0315386e761beae8afd07df94e42a4db154", "patch": "@@ -112,9 +112,7 @@ impl<'tcx> DumpVisitor<'tcx> {\n     }\n \n     pub fn dump_crate_info(&mut self, name: Symbol) {\n-        let source_file = self.tcx.sess.local_crate_source_file.as_ref();\n-        let crate_root = source_file.map(|source_file| {\n-            let source_file = Path::new(source_file);\n+        let crate_root = self.tcx.sess.local_crate_source_file().map(|source_file| {\n             match source_file.file_name() {\n                 Some(_) => source_file.parent().unwrap().display(),\n                 None => source_file.display(),\n@@ -157,10 +155,14 @@ impl<'tcx> DumpVisitor<'tcx> {\n                 .enumerate()\n                 .filter(|(i, _)| !remap_arg_indices.contains(i))\n                 .map(|(_, arg)| match input {\n-                    Input::File(ref path) if path == Path::new(&arg) => {\n-                        let mapped = &self.tcx.sess.local_crate_source_file;\n-                        mapped.as_ref().unwrap().to_string_lossy().into()\n-                    }\n+                    Input::File(ref path) if path == Path::new(&arg) => self\n+                        .tcx\n+                        .sess\n+                        .local_crate_source_file()\n+                        .as_ref()\n+                        .unwrap()\n+                        .to_string_lossy()\n+                        .into(),\n                     _ => arg,\n                 });\n "}, {"sha": "2badccbf60344ee983c7a944f3b16ba630a98356", "filename": "compiler/rustc_session/src/output.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f5cd0315386e761beae8afd07df94e42a4db154/compiler%2Frustc_session%2Fsrc%2Foutput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f5cd0315386e761beae8afd07df94e42a4db154/compiler%2Frustc_session%2Fsrc%2Foutput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foutput.rs?ref=9f5cd0315386e761beae8afd07df94e42a4db154", "patch": "@@ -45,7 +45,7 @@ fn is_writeable(p: &Path) -> bool {\n     }\n }\n \n-pub fn find_crate_name(sess: &Session, attrs: &[ast::Attribute], input: &Input) -> Symbol {\n+pub fn find_crate_name(sess: &Session, attrs: &[ast::Attribute]) -> Symbol {\n     let validate = |s: Symbol, span: Option<Span>| {\n         validate_crate_name(sess, s, span);\n         s\n@@ -71,7 +71,7 @@ pub fn find_crate_name(sess: &Session, attrs: &[ast::Attribute], input: &Input)\n     if let Some((attr, s)) = attr_crate_name {\n         return validate(s, Some(attr.span));\n     }\n-    if let Input::File(ref path) = *input {\n+    if let Input::File(ref path) = sess.io.input {\n         if let Some(s) = path.file_stem().and_then(|s| s.to_str()) {\n             if s.starts_with('-') {\n                 sess.emit_err(CrateNameInvalid { s });"}, {"sha": "fe992b915613b0c7cfd814e28b4ce90478deb52a", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/9f5cd0315386e761beae8afd07df94e42a4db154/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f5cd0315386e761beae8afd07df94e42a4db154/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=9f5cd0315386e761beae8afd07df94e42a4db154", "patch": "@@ -1,6 +1,7 @@\n use crate::cgu_reuse_tracker::CguReuseTracker;\n use crate::code_stats::CodeStats;\n pub use crate::code_stats::{DataTypeKind, FieldInfo, SizeKind, VariantInfo};\n+use crate::config::Input;\n use crate::config::{self, CrateType, InstrumentCoverage, OptLevel, OutputType, SwitchWithOptPath};\n use crate::errors::{\n     BranchProtectionRequiresAArch64, CannotEnableCrtStaticLinux, CannotMixAndMatchSanitizers,\n@@ -137,6 +138,13 @@ pub struct Limits {\n     pub const_eval_limit: Limit,\n }\n \n+pub struct CompilerIO {\n+    pub input: Input,\n+    pub output_dir: Option<PathBuf>,\n+    pub output_file: Option<PathBuf>,\n+    pub temps_dir: Option<PathBuf>,\n+}\n+\n /// Represents the data associated with a compilation\n /// session for a single crate.\n pub struct Session {\n@@ -147,9 +155,8 @@ pub struct Session {\n     pub target_tlib_path: Lrc<SearchPath>,\n     pub parse_sess: ParseSess,\n     pub sysroot: PathBuf,\n-    /// The name of the root source file of the crate, in the local file system.\n-    /// `None` means that there is no source file.\n-    pub local_crate_source_file: Option<PathBuf>,\n+    /// Input, input file path and output file path to this compilation process.\n+    pub io: CompilerIO,\n \n     crate_types: OnceCell<Vec<CrateType>>,\n     /// The `stable_crate_id` is constructed out of the crate name and all the\n@@ -228,6 +235,11 @@ impl Session {\n         self.miri_unleashed_features.lock().push((span, feature_gate));\n     }\n \n+    pub fn local_crate_source_file(&self) -> Option<PathBuf> {\n+        let path = self.io.input.opt_path()?;\n+        Some(self.opts.file_path_mapping().map_prefix(path).0)\n+    }\n+\n     fn check_miri_unleashed_features(&self) {\n         let unleashed_features = self.miri_unleashed_features.lock();\n         if !unleashed_features.is_empty() {\n@@ -1298,7 +1310,7 @@ fn default_emitter(\n #[allow(rustc::bad_opt_access)]\n pub fn build_session(\n     sopts: config::Options,\n-    local_crate_source_file: Option<PathBuf>,\n+    io: CompilerIO,\n     bundle: Option<Lrc<rustc_errors::FluentBundle>>,\n     registry: rustc_errors::registry::Registry,\n     driver_lint_caps: FxHashMap<lint::LintId, lint::Level>,\n@@ -1391,11 +1403,6 @@ pub fn build_session(\n         Lrc::new(SearchPath::from_sysroot_and_triple(&sysroot, target_triple))\n     };\n \n-    let file_path_mapping = sopts.file_path_mapping();\n-\n-    let local_crate_source_file =\n-        local_crate_source_file.map(|path| file_path_mapping.map_prefix(path).0);\n-\n     let optimization_fuel = Lock::new(OptimizationFuel {\n         remaining: sopts.unstable_opts.fuel.as_ref().map_or(0, |&(_, i)| i),\n         out_of_fuel: false,\n@@ -1427,7 +1434,7 @@ pub fn build_session(\n         target_tlib_path,\n         parse_sess,\n         sysroot,\n-        local_crate_source_file,\n+        io,\n         crate_types: OnceCell::new(),\n         stable_crate_id: OnceCell::new(),\n         features: OnceCell::new(),"}, {"sha": "4fa33e8907d0862c881ae98727f11401a4ea059c", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f5cd0315386e761beae8afd07df94e42a4db154/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f5cd0315386e761beae8afd07df94e42a4db154/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=9f5cd0315386e761beae8afd07df94e42a4db154", "patch": "@@ -2921,7 +2921,7 @@ fn render_call_locations(w: &mut Buffer, cx: &mut Context<'_>, item: &clean::Ite\n         // Look for the example file in the source map if it exists, otherwise return a dummy span\n         let file_span = (|| {\n             let source_map = tcx.sess.source_map();\n-            let crate_src = tcx.sess.local_crate_source_file.as_ref()?;\n+            let crate_src = tcx.sess.local_crate_source_file()?;\n             let abs_crate_src = crate_src.canonicalize().ok()?;\n             let crate_root = abs_crate_src.parent()?.parent()?;\n             let rel_path = path.strip_prefix(crate_root).ok()?;"}, {"sha": "c0267956aab4ab714da49b422f5a8fb1eaa4e972", "filename": "src/tools/miri/src/bin/miri.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9f5cd0315386e761beae8afd07df94e42a4db154/src%2Ftools%2Fmiri%2Fsrc%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f5cd0315386e761beae8afd07df94e42a4db154/src%2Ftools%2Fmiri%2Fsrc%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fbin%2Fmiri.rs?ref=9f5cd0315386e761beae8afd07df94e42a4db154", "patch": "@@ -56,12 +56,12 @@ impl rustc_driver::Callbacks for MiriCompilerCalls {\n \n     fn after_analysis<'tcx>(\n         &mut self,\n-        compiler: &rustc_interface::interface::Compiler,\n+        _: &rustc_interface::interface::Compiler,\n         queries: &'tcx rustc_interface::Queries<'tcx>,\n     ) -> Compilation {\n-        compiler.session().abort_if_errors();\n-\n         queries.global_ctxt().unwrap().enter(|tcx| {\n+            tcx.sess.abort_if_errors();\n+\n             init_late_loggers(tcx);\n             if !tcx.sess.crate_types().contains(&CrateType::Executable) {\n                 tcx.sess.fatal(\"miri only makes sense on bin crates\");\n@@ -75,7 +75,7 @@ impl rustc_driver::Callbacks for MiriCompilerCalls {\n             let mut config = self.miri_config.clone();\n \n             // Add filename to `miri` arguments.\n-            config.args.insert(0, compiler.io().input.filestem().to_string());\n+            config.args.insert(0, tcx.sess.io.input.filestem().to_string());\n \n             // Adjust working directory for interpretation.\n             if let Some(cwd) = env::var_os(\"MIRI_CWD\") {\n@@ -87,10 +87,9 @@ impl rustc_driver::Callbacks for MiriCompilerCalls {\n                     i32::try_from(return_code).expect(\"Return value was too large!\"),\n                 );\n             }\n+            tcx.sess.abort_if_errors();\n         });\n \n-        compiler.session().abort_if_errors();\n-\n         Compilation::Stop\n     }\n }"}]}