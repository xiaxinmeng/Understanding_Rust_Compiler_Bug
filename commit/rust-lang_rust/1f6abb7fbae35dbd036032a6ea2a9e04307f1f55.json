{"sha": "1f6abb7fbae35dbd036032a6ea2a9e04307f1f55", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmNmFiYjdmYmFlMzVkYmQwMzYwMzJhNmVhMmE5ZTA0MzA3ZjFmNTU=", "commit": {"author": {"name": "Jade", "email": "software@lfcode.ca", "date": "2021-06-12T12:16:22Z"}, "committer": {"name": "Jade", "email": "software@lfcode.ca", "date": "2021-06-19T08:09:19Z"}, "message": "Fix libcore not being included in rust-lang/rust module tree\n\nIf you are opening libcore from rust-lang/rust as opposed to e.g.\ngoto definition from some other crate which would use the sysroot\ninstance of libcore, a `#![cfg(not(test))]` would previously have made\nall the code excluded from the module tree, breaking the editor\nexperience.\n\nThis puts in a slight hack that checks for the crate name \"core\" and\nturns off `#[cfg(test)]`.", "tree": {"sha": "c49a07d81e3cc3a6ea6ca3c57fd364492475c49b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c49a07d81e3cc3a6ea6ca3c57fd364492475c49b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f6abb7fbae35dbd036032a6ea2a9e04307f1f55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f6abb7fbae35dbd036032a6ea2a9e04307f1f55", "html_url": "https://github.com/rust-lang/rust/commit/1f6abb7fbae35dbd036032a6ea2a9e04307f1f55", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f6abb7fbae35dbd036032a6ea2a9e04307f1f55/comments", "author": {"login": "lf-", "id": 6652840, "node_id": "MDQ6VXNlcjY2NTI4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/6652840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lf-", "html_url": "https://github.com/lf-", "followers_url": "https://api.github.com/users/lf-/followers", "following_url": "https://api.github.com/users/lf-/following{/other_user}", "gists_url": "https://api.github.com/users/lf-/gists{/gist_id}", "starred_url": "https://api.github.com/users/lf-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lf-/subscriptions", "organizations_url": "https://api.github.com/users/lf-/orgs", "repos_url": "https://api.github.com/users/lf-/repos", "events_url": "https://api.github.com/users/lf-/events{/privacy}", "received_events_url": "https://api.github.com/users/lf-/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lf-", "id": 6652840, "node_id": "MDQ6VXNlcjY2NTI4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/6652840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lf-", "html_url": "https://github.com/lf-", "followers_url": "https://api.github.com/users/lf-/followers", "following_url": "https://api.github.com/users/lf-/following{/other_user}", "gists_url": "https://api.github.com/users/lf-/gists{/gist_id}", "starred_url": "https://api.github.com/users/lf-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lf-/subscriptions", "organizations_url": "https://api.github.com/users/lf-/orgs", "repos_url": "https://api.github.com/users/lf-/repos", "events_url": "https://api.github.com/users/lf-/events{/privacy}", "received_events_url": "https://api.github.com/users/lf-/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d3bad85e60d011b35da0a8e5dd6611934f6816d", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d3bad85e60d011b35da0a8e5dd6611934f6816d", "html_url": "https://github.com/rust-lang/rust/commit/0d3bad85e60d011b35da0a8e5dd6611934f6816d"}], "stats": {"total": 32, "additions": 30, "deletions": 2}, "files": [{"sha": "87bf0c925d413ea5a71ca8af4cf0e5fd413607bf", "filename": "crates/cfg/src/lib.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1f6abb7fbae35dbd036032a6ea2a9e04307f1f55/crates%2Fcfg%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f6abb7fbae35dbd036032a6ea2a9e04307f1f55/crates%2Fcfg%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcfg%2Fsrc%2Flib.rs?ref=1f6abb7fbae35dbd036032a6ea2a9e04307f1f55", "patch": "@@ -1,4 +1,4 @@\n-//! cfg defines conditional compiling options, `cfg` attibute parser and evaluator\n+//! cfg defines conditional compiling options, `cfg` attribute parser and evaluator\n \n mod cfg_expr;\n mod dnf;\n@@ -59,6 +59,20 @@ pub struct CfgDiff {\n }\n \n impl CfgDiff {\n+    /// Create a new CfgDiff. Will return None if the same item appears more than once in the set\n+    /// of both.\n+    pub fn new(enable: Vec<CfgAtom>, disable: Vec<CfgAtom>) -> Option<CfgDiff> {\n+        let mut occupied = FxHashSet::default();\n+        for item in enable.iter().chain(disable.iter()) {\n+            if !occupied.insert(item) {\n+                // was present\n+                return None;\n+            }\n+        }\n+\n+        Some(CfgDiff { enable, disable })\n+    }\n+\n     /// Returns the total number of atoms changed by this diff.\n     pub fn len(&self) -> usize {\n         self.enable.len() + self.disable.len()"}, {"sha": "c2edb332748cd954ba4d1a38d7f5f00e0d11374b", "filename": "crates/project_model/src/workspace.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1f6abb7fbae35dbd036032a6ea2a9e04307f1f55/crates%2Fproject_model%2Fsrc%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f6abb7fbae35dbd036032a6ea2a9e04307f1f55/crates%2Fproject_model%2Fsrc%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fworkspace.rs?ref=1f6abb7fbae35dbd036032a6ea2a9e04307f1f55", "patch": "@@ -7,7 +7,7 @@ use std::{collections::VecDeque, fmt, fs, path::Path, process::Command};\n use anyhow::{format_err, Context, Result};\n use base_db::{CrateDisplayName, CrateGraph, CrateId, CrateName, Edition, Env, FileId, ProcMacro};\n use cargo_workspace::DepKind;\n-use cfg::CfgOptions;\n+use cfg::{CfgAtom, CfgDiff, CfgOptions};\n use paths::{AbsPath, AbsPathBuf};\n use proc_macro_api::ProcMacroClient;\n use rustc_hash::{FxHashMap, FxHashSet};\n@@ -425,6 +425,20 @@ fn cargo_to_crate_graph(\n     let mut has_private = false;\n     // Next, create crates for each package, target pair\n     for pkg in cargo.packages() {\n+        let mut cfg_options = &cfg_options;\n+        let mut replaced_cfg_options;\n+        if cargo[pkg].name == \"core\" {\n+            // FIXME: in the specific case of libcore in rust-lang/rust (i.e. it is not coming from\n+            // a sysroot), there's a `#![cfg(not(test))]` at the top of it that makes its contents\n+            // get ignored by r-a. We should implement a more general solution for this\n+\n+            replaced_cfg_options = cfg_options.clone();\n+            replaced_cfg_options.apply_diff(\n+                CfgDiff::new(Default::default(), vec![CfgAtom::Flag(\"test\".into())]).unwrap(),\n+            );\n+            cfg_options = &replaced_cfg_options;\n+        };\n+\n         has_private |= cargo[pkg].metadata.rustc_private;\n         let mut lib_tgt = None;\n         for &tgt in cargo[pkg].targets.iter() {"}]}