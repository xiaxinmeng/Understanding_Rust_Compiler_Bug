{"sha": "bbfb8579ff4403a2c23e296614d2f5474b124ac9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiZmI4NTc5ZmY0NDAzYTJjMjNlMjk2NjE0ZDJmNTQ3NGIxMjRhYzk=", "commit": {"author": {"name": "Ryan Levick", "email": "me@ryanlevick.com", "date": "2021-06-29T13:35:15Z"}, "committer": {"name": "Ryan Levick", "email": "me@ryanlevick.com", "date": "2021-07-06T18:11:45Z"}, "message": "Rename disjoint_capture_migration lint to rust_2021_incompatible_closure_captures", "tree": {"sha": "36f9bd5b6b52e2771f6146c917b50bb011eefca2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/36f9bd5b6b52e2771f6146c917b50bb011eefca2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bbfb8579ff4403a2c23e296614d2f5474b124ac9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bbfb8579ff4403a2c23e296614d2f5474b124ac9", "html_url": "https://github.com/rust-lang/rust/commit/bbfb8579ff4403a2c23e296614d2f5474b124ac9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bbfb8579ff4403a2c23e296614d2f5474b124ac9/comments", "author": {"login": "rylev", "id": 1327285, "node_id": "MDQ6VXNlcjEzMjcyODU=", "avatar_url": "https://avatars.githubusercontent.com/u/1327285?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rylev", "html_url": "https://github.com/rylev", "followers_url": "https://api.github.com/users/rylev/followers", "following_url": "https://api.github.com/users/rylev/following{/other_user}", "gists_url": "https://api.github.com/users/rylev/gists{/gist_id}", "starred_url": "https://api.github.com/users/rylev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rylev/subscriptions", "organizations_url": "https://api.github.com/users/rylev/orgs", "repos_url": "https://api.github.com/users/rylev/repos", "events_url": "https://api.github.com/users/rylev/events{/privacy}", "received_events_url": "https://api.github.com/users/rylev/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rylev", "id": 1327285, "node_id": "MDQ6VXNlcjEzMjcyODU=", "avatar_url": "https://avatars.githubusercontent.com/u/1327285?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rylev", "html_url": "https://github.com/rylev", "followers_url": "https://api.github.com/users/rylev/followers", "following_url": "https://api.github.com/users/rylev/following{/other_user}", "gists_url": "https://api.github.com/users/rylev/gists{/gist_id}", "starred_url": "https://api.github.com/users/rylev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rylev/subscriptions", "organizations_url": "https://api.github.com/users/rylev/orgs", "repos_url": "https://api.github.com/users/rylev/repos", "events_url": "https://api.github.com/users/rylev/events{/privacy}", "received_events_url": "https://api.github.com/users/rylev/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b09dad3eddfc46c55e45f6c1a00bab09401684b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/b09dad3eddfc46c55e45f6c1a00bab09401684b4", "html_url": "https://github.com/rust-lang/rust/commit/b09dad3eddfc46c55e45f6c1a00bab09401684b4"}], "stats": {"total": 357, "additions": 180, "deletions": 177}, "files": [{"sha": "5c0b7aaf11b6e6949050fcd9e7cbe92526f66efa", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bbfb8579ff4403a2c23e296614d2f5474b124ac9/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbfb8579ff4403a2c23e296614d2f5474b124ac9/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=bbfb8579ff4403a2c23e296614d2f5474b124ac9", "patch": "@@ -2967,7 +2967,7 @@ declare_lint_pass! {\n         MISSING_ABI,\n         INVALID_DOC_ATTRIBUTES,\n         SEMICOLON_IN_EXPRESSIONS_FROM_MACROS,\n-        DISJOINT_CAPTURE_MIGRATION,\n+        RUST_2021_INCOMPATIBLE_CLOSURE_CAPTURES,\n         LEGACY_DERIVE_HELPERS,\n         PROC_MACRO_BACK_COMPAT,\n         OR_PATTERNS_BACK_COMPAT,\n@@ -3002,7 +3002,7 @@ declare_lint! {\n }\n \n declare_lint! {\n-    /// The `disjoint_capture_migration` lint detects variables that aren't completely\n+    /// The `rust_2021_incompatible_closure_captures` lint detects variables that aren't completely\n     /// captured in Rust 2021 and affect the Drop order of at least one path starting at this variable.\n     /// It can also detect when a variable implements a trait, but one of its field does not and\n     /// the field is captured by a closure and used with the assumption that said field implements\n@@ -3011,7 +3011,7 @@ declare_lint! {\n     /// ### Example of drop reorder\n     ///\n     /// ```rust,compile_fail\n-    /// # #![deny(disjoint_capture_migration)]\n+    /// # #![deny(rust_2021_incompatible_closure_captures)]\n     /// # #![allow(unused)]\n     /// struct FancyInteger(i32);\n     ///\n@@ -3046,7 +3046,7 @@ declare_lint! {\n     /// ### Example of auto-trait\n     ///\n     /// ```rust,compile_fail\n-    /// #![deny(disjoint_capture_migration)]\n+    /// #![deny(rust_2021_incompatible_closure_captures)]\n     /// use std::thread;\n     ///\n     /// struct Pointer(*mut i32);\n@@ -3068,7 +3068,7 @@ declare_lint! {\n     /// In the above example, only `fptr.0` is captured in Rust 2021.\n     /// The field is of type *mut i32 which doesn't implement Send, making the code invalid as the\n     /// field cannot be sent between thread safely.\n-    pub DISJOINT_CAPTURE_MIGRATION,\n+    pub RUST_2021_INCOMPATIBLE_CLOSURE_CAPTURES,\n     Allow,\n     \"detects closures affected by Rust 2021 changes\",\n     @future_incompatible = FutureIncompatibleInfo {"}, {"sha": "da8e6746b220b12f7600186b0fa2f9db349d2e2c", "filename": "compiler/rustc_typeck/src/check/upvar.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bbfb8579ff4403a2c23e296614d2f5474b124ac9/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbfb8579ff4403a2c23e296614d2f5474b124ac9/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs?ref=bbfb8579ff4403a2c23e296614d2f5474b124ac9", "patch": "@@ -173,7 +173,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         let closure_hir_id = self.tcx.hir().local_def_id_to_hir_id(local_def_id);\n \n-        if should_do_disjoint_capture_migration_analysis(self.tcx, closure_hir_id) {\n+        if should_do_rust_2021_incompatible_closure_captures_analysis(self.tcx, closure_hir_id) {\n             self.perform_2229_migration_anaysis(closure_def_id, body_id, capture_clause, span);\n         }\n \n@@ -505,7 +505,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             let local_def_id = closure_def_id.expect_local();\n             let closure_hir_id = self.tcx.hir().local_def_id_to_hir_id(local_def_id);\n             self.tcx.struct_span_lint_hir(\n-                lint::builtin::DISJOINT_CAPTURE_MIGRATION,\n+                lint::builtin::RUST_2021_INCOMPATIBLE_CLOSURE_CAPTURES,\n                 closure_hir_id,\n                 span,\n                 |lint| {\n@@ -1829,8 +1829,9 @@ fn var_name(tcx: TyCtxt<'_>, var_hir_id: hir::HirId) -> Symbol {\n     tcx.hir().name(var_hir_id)\n }\n \n-fn should_do_disjoint_capture_migration_analysis(tcx: TyCtxt<'_>, closure_id: hir::HirId) -> bool {\n-    let (level, _) = tcx.lint_level_at_node(lint::builtin::DISJOINT_CAPTURE_MIGRATION, closure_id);\n+fn should_do_rust_2021_incompatible_closure_captures_analysis(tcx: TyCtxt<'_>, closure_id: hir::HirId) -> bool {\n+    let (level, _) =\n+        tcx.lint_level_at_node(lint::builtin::RUST_2021_INCOMPATIBLE_CLOSURE_CAPTURES, closure_id);\n \n     !matches!(level, lint::Level::Allow)\n }"}, {"sha": "134d07c400b3abf8554504ed7f3d4f36334521d7", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/auto_traits.fixed", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bbfb8579ff4403a2c23e296614d2f5474b124ac9/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/bbfb8579ff4403a2c23e296614d2f5474b124ac9/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.fixed?ref=bbfb8579ff4403a2c23e296614d2f5474b124ac9", "patch": "@@ -1,10 +1,10 @@\n // run-rustfix\n-#![deny(disjoint_capture_migration)]\n+#![deny(rust_2021_incompatible_closure_captures)]\n \n use std::thread;\n \n /* Test Send Trait Migration */\n-struct SendPointer (*mut i32);\n+struct SendPointer(*mut i32);\n unsafe impl Send for SendPointer {}\n \n fn test_send_trait() {\n@@ -18,8 +18,8 @@ fn test_send_trait() {\n }\n \n /* Test Sync Trait Migration */\n-struct CustomInt (*mut i32);\n-struct SyncPointer (CustomInt);\n+struct CustomInt(*mut i32);\n+struct SyncPointer(CustomInt);\n unsafe impl Sync for SyncPointer {}\n unsafe impl Send for CustomInt {}\n \n@@ -38,7 +38,7 @@ fn test_sync_trait() {\n struct S(String);\n struct T(i32);\n \n-struct U(S,T);\n+struct U(S, T);\n \n impl Clone for U {\n     fn clone(&self) -> Self {"}, {"sha": "b48a724f052f0afb46461c91cfafa4c5b7e7d364", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/auto_traits.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bbfb8579ff4403a2c23e296614d2f5474b124ac9/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbfb8579ff4403a2c23e296614d2f5474b124ac9/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.rs?ref=bbfb8579ff4403a2c23e296614d2f5474b124ac9", "patch": "@@ -1,10 +1,10 @@\n // run-rustfix\n-#![deny(disjoint_capture_migration)]\n+#![deny(rust_2021_incompatible_closure_captures)]\n \n use std::thread;\n \n /* Test Send Trait Migration */\n-struct SendPointer (*mut i32);\n+struct SendPointer(*mut i32);\n unsafe impl Send for SendPointer {}\n \n fn test_send_trait() {\n@@ -18,8 +18,8 @@ fn test_send_trait() {\n }\n \n /* Test Sync Trait Migration */\n-struct CustomInt (*mut i32);\n-struct SyncPointer (CustomInt);\n+struct CustomInt(*mut i32);\n+struct SyncPointer(CustomInt);\n unsafe impl Sync for SyncPointer {}\n unsafe impl Send for CustomInt {}\n \n@@ -38,7 +38,7 @@ fn test_sync_trait() {\n struct S(String);\n struct T(i32);\n \n-struct U(S,T);\n+struct U(S, T);\n \n impl Clone for U {\n     fn clone(&self) -> Self {"}, {"sha": "3d3dde15412bf30d2dac82f08b7c5468608f4511", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/auto_traits.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbfb8579ff4403a2c23e296614d2f5474b124ac9/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbfb8579ff4403a2c23e296614d2f5474b124ac9/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.stderr?ref=bbfb8579ff4403a2c23e296614d2f5474b124ac9", "patch": "@@ -12,8 +12,8 @@ LL | |     });\n note: the lint level is defined here\n   --> $DIR/auto_traits.rs:2:9\n    |\n-LL | #![deny(disjoint_capture_migration)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #![deny(rust_2021_incompatible_closure_captures)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `fptr` to be fully captured\n    |"}, {"sha": "51d9c4881af3fdec51e10e3f6aae778c01adc32a", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/insignificant_drop.fixed", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/bbfb8579ff4403a2c23e296614d2f5474b124ac9/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/bbfb8579ff4403a2c23e296614d2f5474b124ac9/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.fixed?ref=bbfb8579ff4403a2c23e296614d2f5474b124ac9", "patch": "@@ -1,6 +1,6 @@\n // run-rustfix\n \n-#![deny(disjoint_capture_migration)]\n+#![deny(rust_2021_incompatible_closure_captures)]\n //~^ NOTE: the lint level is defined here\n \n // Test cases for types that implement a insignificant drop (stlib defined)\n@@ -13,9 +13,9 @@ fn test1_all_need_migration() {\n     let t2 = (String::new(), String::new());\n \n     let c = || { let _ = (&t, &t1, &t2); \n-    //~^ ERROR: drop order\n-    //~| NOTE: for more information, see\n-    //~| HELP: add a dummy let to cause `t`, `t1`, `t2` to be fully captured\n+        //~^ ERROR: drop order\n+        //~| NOTE: for more information, see\n+        //~| HELP: add a dummy let to cause `t`, `t1`, `t2` to be fully captured\n \n         let _t = t.0;\n         let _t1 = t1.0;\n@@ -33,9 +33,9 @@ fn test2_only_precise_paths_need_migration() {\n     let t2 = (String::new(), String::new());\n \n     let c = || { let _ = (&t, &t1); \n-    //~^ ERROR: drop order\n-    //~| NOTE: for more information, see\n-    //~| HELP: add a dummy let to cause `t`, `t1` to be fully captured\n+        //~^ ERROR: drop order\n+        //~| NOTE: for more information, see\n+        //~| HELP: add a dummy let to cause `t`, `t1` to be fully captured\n         let _t = t.0;\n         let _t1 = t1.0;\n         let _t2 = t2;\n@@ -50,9 +50,9 @@ fn test3_only_by_value_need_migration() {\n     let t = (String::new(), String::new());\n     let t1 = (String::new(), String::new());\n     let c = || { let _ = &t; \n-    //~^ ERROR: drop order\n-    //~| NOTE: for more information, see\n-    //~| HELP: add a dummy let to cause `t` to be fully captured\n+        //~^ ERROR: drop order\n+        //~| NOTE: for more information, see\n+        //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n         println!(\"{}\", t1.1);\n     };\n@@ -69,9 +69,9 @@ fn test4_only_non_copy_types_need_migration() {\n     let t1 = (0i32, 0i32);\n \n     let c = || { let _ = &t; \n-    //~^ ERROR: drop order\n-    //~| NOTE: for more information, see\n-    //~| HELP: add a dummy let to cause `t` to be fully captured\n+        //~^ ERROR: drop order\n+        //~| NOTE: for more information, see\n+        //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n         let _t1 = t1.0;\n     };\n@@ -88,9 +88,9 @@ fn test5_only_drop_types_need_migration() {\n     let s = S(0i32, 0i32);\n \n     let c = || { let _ = &t; \n-    //~^ ERROR: drop order\n-    //~| NOTE: for more information, see\n-    //~| HELP: add a dummy let to cause `t` to be fully captured\n+        //~^ ERROR: drop order\n+        //~| NOTE: for more information, see\n+        //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n         let _s = s.0;\n     };\n@@ -104,9 +104,9 @@ fn test6_move_closures_non_copy_types_might_need_migration() {\n     let t = (String::new(), String::new());\n     let t1 = (String::new(), String::new());\n     let c = move || { let _ = (&t1, &t); \n-    //~^ ERROR: drop order\n-    //~| NOTE: for more information, see\n-    //~| HELP: add a dummy let to cause `t1`, `t` to be fully captured\n+        //~^ ERROR: drop order\n+        //~| NOTE: for more information, see\n+        //~| HELP: add a dummy let to cause `t1`, `t` to be fully captured\n         println!(\"{} {}\", t1.1, t.1);\n     };\n \n@@ -120,9 +120,9 @@ fn test7_drop_non_drop_aggregate_need_migration() {\n     let t = (String::new(), String::new(), 0i32);\n \n     let c = || { let _ = &t; \n-    //~^ ERROR: drop order\n-    //~| NOTE: for more information, see\n-    //~| HELP: add a dummy let to cause `t` to be fully captured\n+        //~^ ERROR: drop order\n+        //~| NOTE: for more information, see\n+        //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n     };\n "}, {"sha": "c732cbb4fa51e0057cb18529f94a084ea1ce6a0e", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/insignificant_drop.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/bbfb8579ff4403a2c23e296614d2f5474b124ac9/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbfb8579ff4403a2c23e296614d2f5474b124ac9/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.rs?ref=bbfb8579ff4403a2c23e296614d2f5474b124ac9", "patch": "@@ -1,6 +1,6 @@\n // run-rustfix\n \n-#![deny(disjoint_capture_migration)]\n+#![deny(rust_2021_incompatible_closure_captures)]\n //~^ NOTE: the lint level is defined here\n \n // Test cases for types that implement a insignificant drop (stlib defined)\n@@ -13,9 +13,9 @@ fn test1_all_need_migration() {\n     let t2 = (String::new(), String::new());\n \n     let c = || {\n-    //~^ ERROR: drop order\n-    //~| NOTE: for more information, see\n-    //~| HELP: add a dummy let to cause `t`, `t1`, `t2` to be fully captured\n+        //~^ ERROR: drop order\n+        //~| NOTE: for more information, see\n+        //~| HELP: add a dummy let to cause `t`, `t1`, `t2` to be fully captured\n \n         let _t = t.0;\n         let _t1 = t1.0;\n@@ -33,9 +33,9 @@ fn test2_only_precise_paths_need_migration() {\n     let t2 = (String::new(), String::new());\n \n     let c = || {\n-    //~^ ERROR: drop order\n-    //~| NOTE: for more information, see\n-    //~| HELP: add a dummy let to cause `t`, `t1` to be fully captured\n+        //~^ ERROR: drop order\n+        //~| NOTE: for more information, see\n+        //~| HELP: add a dummy let to cause `t`, `t1` to be fully captured\n         let _t = t.0;\n         let _t1 = t1.0;\n         let _t2 = t2;\n@@ -50,9 +50,9 @@ fn test3_only_by_value_need_migration() {\n     let t = (String::new(), String::new());\n     let t1 = (String::new(), String::new());\n     let c = || {\n-    //~^ ERROR: drop order\n-    //~| NOTE: for more information, see\n-    //~| HELP: add a dummy let to cause `t` to be fully captured\n+        //~^ ERROR: drop order\n+        //~| NOTE: for more information, see\n+        //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n         println!(\"{}\", t1.1);\n     };\n@@ -69,9 +69,9 @@ fn test4_only_non_copy_types_need_migration() {\n     let t1 = (0i32, 0i32);\n \n     let c = || {\n-    //~^ ERROR: drop order\n-    //~| NOTE: for more information, see\n-    //~| HELP: add a dummy let to cause `t` to be fully captured\n+        //~^ ERROR: drop order\n+        //~| NOTE: for more information, see\n+        //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n         let _t1 = t1.0;\n     };\n@@ -88,9 +88,9 @@ fn test5_only_drop_types_need_migration() {\n     let s = S(0i32, 0i32);\n \n     let c = || {\n-    //~^ ERROR: drop order\n-    //~| NOTE: for more information, see\n-    //~| HELP: add a dummy let to cause `t` to be fully captured\n+        //~^ ERROR: drop order\n+        //~| NOTE: for more information, see\n+        //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n         let _s = s.0;\n     };\n@@ -104,9 +104,9 @@ fn test6_move_closures_non_copy_types_might_need_migration() {\n     let t = (String::new(), String::new());\n     let t1 = (String::new(), String::new());\n     let c = move || {\n-    //~^ ERROR: drop order\n-    //~| NOTE: for more information, see\n-    //~| HELP: add a dummy let to cause `t1`, `t` to be fully captured\n+        //~^ ERROR: drop order\n+        //~| NOTE: for more information, see\n+        //~| HELP: add a dummy let to cause `t1`, `t` to be fully captured\n         println!(\"{} {}\", t1.1, t.1);\n     };\n \n@@ -120,9 +120,9 @@ fn test7_drop_non_drop_aggregate_need_migration() {\n     let t = (String::new(), String::new(), 0i32);\n \n     let c = || {\n-    //~^ ERROR: drop order\n-    //~| NOTE: for more information, see\n-    //~| HELP: add a dummy let to cause `t` to be fully captured\n+        //~^ ERROR: drop order\n+        //~| NOTE: for more information, see\n+        //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n     };\n "}, {"sha": "89a2b0eb95366b5bd3a342433f8d3cdf668bf2f6", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/insignificant_drop.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbfb8579ff4403a2c23e296614d2f5474b124ac9/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbfb8579ff4403a2c23e296614d2f5474b124ac9/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.stderr?ref=bbfb8579ff4403a2c23e296614d2f5474b124ac9", "patch": "@@ -14,8 +14,8 @@ LL | |     };\n note: the lint level is defined here\n   --> $DIR/insignificant_drop.rs:3:9\n    |\n-LL | #![deny(disjoint_capture_migration)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #![deny(rust_2021_incompatible_closure_captures)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t`, `t1`, `t2` to be fully captured\n    |"}, {"sha": "8c85cd990d308d865795828ab2e2703a6535442e", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/insignificant_drop_attr_migrations.fixed", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/bbfb8579ff4403a2c23e296614d2f5474b124ac9/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/bbfb8579ff4403a2c23e296614d2f5474b124ac9/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.fixed?ref=bbfb8579ff4403a2c23e296614d2f5474b124ac9", "patch": "@@ -1,8 +1,7 @@\n // run-rustfix\n \n-#![deny(disjoint_capture_migration)]\n+#![deny(rust_2021_incompatible_closure_captures)]\n //~^ NOTE: the lint level is defined here\n-\n #![feature(rustc_attrs)]\n #![allow(unused)]\n \n@@ -36,9 +35,9 @@ fn significant_drop_needs_migration() {\n     let t = (SigDrop {}, SigDrop {});\n \n     let c = || { let _ = &t; \n-    //~^ ERROR: drop order\n-    //~| NOTE: for more information, see\n-    //~| HELP: add a dummy let to cause `t` to be fully captured\n+        //~^ ERROR: drop order\n+        //~| NOTE: for more information, see\n+        //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n     };\n \n@@ -54,9 +53,9 @@ fn generic_struct_with_significant_drop_needs_migration() {\n \n     // move is used to force i32 to be copied instead of being a ref\n     let c = move || { let _ = &t; \n-    //~^ ERROR: drop order\n-    //~| NOTE: for more information, see\n-    //~| HELP: add a dummy let to cause `t` to be fully captured\n+        //~^ ERROR: drop order\n+        //~| NOTE: for more information, see\n+        //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.1;\n     };\n "}, {"sha": "17cee28e3111738a78e9e85b3eb6ca3d16150974", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/insignificant_drop_attr_migrations.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/bbfb8579ff4403a2c23e296614d2f5474b124ac9/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbfb8579ff4403a2c23e296614d2f5474b124ac9/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.rs?ref=bbfb8579ff4403a2c23e296614d2f5474b124ac9", "patch": "@@ -1,8 +1,7 @@\n // run-rustfix\n \n-#![deny(disjoint_capture_migration)]\n+#![deny(rust_2021_incompatible_closure_captures)]\n //~^ NOTE: the lint level is defined here\n-\n #![feature(rustc_attrs)]\n #![allow(unused)]\n \n@@ -36,9 +35,9 @@ fn significant_drop_needs_migration() {\n     let t = (SigDrop {}, SigDrop {});\n \n     let c = || {\n-    //~^ ERROR: drop order\n-    //~| NOTE: for more information, see\n-    //~| HELP: add a dummy let to cause `t` to be fully captured\n+        //~^ ERROR: drop order\n+        //~| NOTE: for more information, see\n+        //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n     };\n \n@@ -54,9 +53,9 @@ fn generic_struct_with_significant_drop_needs_migration() {\n \n     // move is used to force i32 to be copied instead of being a ref\n     let c = move || {\n-    //~^ ERROR: drop order\n-    //~| NOTE: for more information, see\n-    //~| HELP: add a dummy let to cause `t` to be fully captured\n+        //~^ ERROR: drop order\n+        //~| NOTE: for more information, see\n+        //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.1;\n     };\n "}, {"sha": "1d3bda03d0e164923a9a869c9ef116003ad7abf3", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/insignificant_drop_attr_migrations.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bbfb8579ff4403a2c23e296614d2f5474b124ac9/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbfb8579ff4403a2c23e296614d2f5474b124ac9/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.stderr?ref=bbfb8579ff4403a2c23e296614d2f5474b124ac9", "patch": "@@ -1,5 +1,5 @@\n error: drop order will change in Rust 2021\n-  --> $DIR/insignificant_drop_attr_migrations.rs:38:13\n+  --> $DIR/insignificant_drop_attr_migrations.rs:37:13\n    |\n LL |       let c = || {\n    |  _____________^\n@@ -13,8 +13,8 @@ LL | |     };\n note: the lint level is defined here\n   --> $DIR/insignificant_drop_attr_migrations.rs:3:9\n    |\n-LL | #![deny(disjoint_capture_migration)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #![deny(rust_2021_incompatible_closure_captures)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t` to be fully captured\n    |\n@@ -27,7 +27,7 @@ LL |     };\n    |\n \n error: drop order will change in Rust 2021\n-  --> $DIR/insignificant_drop_attr_migrations.rs:56:13\n+  --> $DIR/insignificant_drop_attr_migrations.rs:55:13\n    |\n LL |       let c = move || {\n    |  _____________^"}, {"sha": "a527bf42e574a7b8ce1ccf6140980854ba9e8210", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/insignificant_drop_attr_no_migrations.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbfb8579ff4403a2c23e296614d2f5474b124ac9/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_no_migrations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbfb8579ff4403a2c23e296614d2f5474b124ac9/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_no_migrations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_no_migrations.rs?ref=bbfb8579ff4403a2c23e296614d2f5474b124ac9", "patch": "@@ -1,6 +1,6 @@\n // run-pass\n \n-#![deny(disjoint_capture_migration)]\n+#![deny(rust_2021_incompatible_closure_captures)]\n #![feature(rustc_attrs)]\n #![allow(unused)]\n "}, {"sha": "ff5d284614bf1390d207e690b0c5bb0614ebb213", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/issue-78720.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbfb8579ff4403a2c23e296614d2f5474b124ac9/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fissue-78720.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbfb8579ff4403a2c23e296614d2f5474b124ac9/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fissue-78720.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fissue-78720.rs?ref=bbfb8579ff4403a2c23e296614d2f5474b124ac9", "patch": "@@ -1,10 +1,10 @@\n // run-pass\n \n-#![warn(disjoint_capture_migration)]\n+#![warn(rust_2021_incompatible_closure_captures)]\n \n fn main() {\n     if let a = \"\" {\n-    //~^ WARNING: irrefutable `if let` pattern\n+        //~^ WARNING: irrefutable `if let` pattern\n         drop(|_: ()| drop(a));\n     }\n }"}, {"sha": "c974299c1536bd85c516c7afbdcb42c3894cc495", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/migrations_rustfix.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbfb8579ff4403a2c23e296614d2f5474b124ac9/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/bbfb8579ff4403a2c23e296614d2f5474b124ac9/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.fixed?ref=bbfb8579ff4403a2c23e296614d2f5474b124ac9", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n-#![deny(disjoint_capture_migration)]\n+#![deny(rust_2021_incompatible_closure_captures)]\n //~^ NOTE: the lint level is defined here\n \n // Test the two possible cases for automated migartion using rustfix"}, {"sha": "dd9556aa56784c1b6d7d731b9e1f5fced7218ca5", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/migrations_rustfix.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbfb8579ff4403a2c23e296614d2f5474b124ac9/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbfb8579ff4403a2c23e296614d2f5474b124ac9/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.rs?ref=bbfb8579ff4403a2c23e296614d2f5474b124ac9", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n-#![deny(disjoint_capture_migration)]\n+#![deny(rust_2021_incompatible_closure_captures)]\n //~^ NOTE: the lint level is defined here\n \n // Test the two possible cases for automated migartion using rustfix"}, {"sha": "2d5e5e5e55c1413cca14c6fd9fa36169ec1ac4e4", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/migrations_rustfix.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbfb8579ff4403a2c23e296614d2f5474b124ac9/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbfb8579ff4403a2c23e296614d2f5474b124ac9/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.stderr?ref=bbfb8579ff4403a2c23e296614d2f5474b124ac9", "patch": "@@ -13,8 +13,8 @@ LL | |     };\n note: the lint level is defined here\n   --> $DIR/migrations_rustfix.rs:2:9\n    |\n-LL | #![deny(disjoint_capture_migration)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #![deny(rust_2021_incompatible_closure_captures)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t` to be fully captured\n    |"}, {"sha": "7f49b460ef63a1f8b1d6bb5a589c1c97661cef25", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/mir_calls_to_shims.fixed", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/bbfb8579ff4403a2c23e296614d2f5474b124ac9/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/bbfb8579ff4403a2c23e296614d2f5474b124ac9/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.fixed?ref=bbfb8579ff4403a2c23e296614d2f5474b124ac9", "patch": "@@ -1,16 +1,20 @@\n // run-rustfix\n \n-#![deny(disjoint_capture_migration)]\n+#![deny(rust_2021_incompatible_closure_captures)]\n // ignore-wasm32-bare compiled with panic=abort by default\n-\n #![feature(fn_traits)]\n #![feature(never_type)]\n \n use std::panic;\n \n-fn foo_diverges() -> ! { panic!() }\n+fn foo_diverges() -> ! {\n+    panic!()\n+}\n \n-fn assert_panics<F>(f: F) where F: FnOnce() {\n+fn assert_panics<F>(f: F)\n+where\n+    F: FnOnce(),\n+{\n     let f = panic::AssertUnwindSafe(f);\n     let result = panic::catch_unwind(move || { let _ = &f; \n         //~^ ERROR: `UnwindSafe`, `RefUnwindSafe` trait implementation\n@@ -23,7 +27,8 @@ fn assert_panics<F>(f: F) where F: FnOnce() {\n }\n \n fn test_fn_ptr_panic<T>(mut t: T)\n-    where T: Fn() -> !\n+where\n+    T: Fn() -> !,\n {\n     let as_fn = <T as Fn<()>>::call;\n     assert_panics(|| as_fn(&t, ()));"}, {"sha": "3c654bec52605c8f051bee736c27e84522e32fd8", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/mir_calls_to_shims.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/bbfb8579ff4403a2c23e296614d2f5474b124ac9/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbfb8579ff4403a2c23e296614d2f5474b124ac9/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.rs?ref=bbfb8579ff4403a2c23e296614d2f5474b124ac9", "patch": "@@ -1,16 +1,20 @@\n // run-rustfix\n \n-#![deny(disjoint_capture_migration)]\n+#![deny(rust_2021_incompatible_closure_captures)]\n // ignore-wasm32-bare compiled with panic=abort by default\n-\n #![feature(fn_traits)]\n #![feature(never_type)]\n \n use std::panic;\n \n-fn foo_diverges() -> ! { panic!() }\n+fn foo_diverges() -> ! {\n+    panic!()\n+}\n \n-fn assert_panics<F>(f: F) where F: FnOnce() {\n+fn assert_panics<F>(f: F)\n+where\n+    F: FnOnce(),\n+{\n     let f = panic::AssertUnwindSafe(f);\n     let result = panic::catch_unwind(move || {\n         //~^ ERROR: `UnwindSafe`, `RefUnwindSafe` trait implementation\n@@ -23,7 +27,8 @@ fn assert_panics<F>(f: F) where F: FnOnce() {\n }\n \n fn test_fn_ptr_panic<T>(mut t: T)\n-    where T: Fn() -> !\n+where\n+    T: Fn() -> !,\n {\n     let as_fn = <T as Fn<()>>::call;\n     assert_panics(|| as_fn(&t, ()));"}, {"sha": "dca5c454b83beaacd5fe86ade3a37c68f2ea1d33", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/mir_calls_to_shims.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bbfb8579ff4403a2c23e296614d2f5474b124ac9/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbfb8579ff4403a2c23e296614d2f5474b124ac9/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.stderr?ref=bbfb8579ff4403a2c23e296614d2f5474b124ac9", "patch": "@@ -1,5 +1,5 @@\n error: `UnwindSafe`, `RefUnwindSafe` trait implementation will change in Rust 2021\n-  --> $DIR/mir_calls_to_shims.rs:15:38\n+  --> $DIR/mir_calls_to_shims.rs:19:38\n    |\n LL |       let result = panic::catch_unwind(move || {\n    |  ______________________________________^\n@@ -12,8 +12,8 @@ LL | |     });\n note: the lint level is defined here\n   --> $DIR/mir_calls_to_shims.rs:3:9\n    |\n-LL | #![deny(disjoint_capture_migration)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #![deny(rust_2021_incompatible_closure_captures)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `f` to be fully captured\n    |"}, {"sha": "8b75e226ab59bcf2ee64ca663b38d7913c570dac", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/no_migrations.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bbfb8579ff4403a2c23e296614d2f5474b124ac9/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fno_migrations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbfb8579ff4403a2c23e296614d2f5474b124ac9/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fno_migrations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fno_migrations.rs?ref=bbfb8579ff4403a2c23e296614d2f5474b124ac9", "patch": "@@ -2,8 +2,7 @@\n \n // Set of test cases that don't need migrations\n \n-#![deny(disjoint_capture_migration)]\n-\n+#![deny(rust_2021_incompatible_closure_captures)]\n \n // Copy types as copied by the closure instead of being moved into the closure\n // Therefore their drop order isn't tied to the closure and won't be requiring any\n@@ -53,7 +52,6 @@ fn test4_insignificant_drop_non_drop_aggregate() {\n     c();\n }\n \n-\n struct Foo(i32);\n impl Drop for Foo {\n     fn drop(&mut self) {\n@@ -80,5 +78,4 @@ fn main() {\n     test3_only_copy_types_move_closure();\n     test4_insignificant_drop_non_drop_aggregate();\n     test5_significant_drop_non_drop_aggregate();\n-\n }"}, {"sha": "ba5e5b573f1d66be3358e5a858e3b75cbc70a8cd", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/precise.fixed", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/bbfb8579ff4403a2c23e296614d2f5474b124ac9/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/bbfb8579ff4403a2c23e296614d2f5474b124ac9/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise.fixed?ref=bbfb8579ff4403a2c23e296614d2f5474b124ac9", "patch": "@@ -1,6 +1,6 @@\n // run-rustfix\n \n-#![deny(disjoint_capture_migration)]\n+#![deny(rust_2021_incompatible_closure_captures)]\n \n #[derive(Debug)]\n struct Foo(i32);\n@@ -17,8 +17,8 @@ fn test_precise_analysis_drop_paths_not_captured_by_move() {\n     let t = ConstainsDropField(Foo(10), Foo(20));\n \n     let c = || { let _ = &t; \n-    //~^ ERROR: drop order\n-    //~| HELP: add a dummy let to cause `t` to be fully captured\n+        //~^ ERROR: drop order\n+        //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n         let _t = &t.1;\n     };\n@@ -28,8 +28,7 @@ fn test_precise_analysis_drop_paths_not_captured_by_move() {\n \n struct S;\n impl Drop for S {\n-    fn drop(&mut self) {\n-    }\n+    fn drop(&mut self) {}\n }\n \n struct T(S, S);\n@@ -40,8 +39,8 @@ fn test_precise_analysis_long_path_missing() {\n     let u = U(T(S, S), T(S, S));\n \n     let c = || { let _ = &u; \n-    //~^ ERROR: drop order\n-    //~| HELP: add a dummy let to cause `u` to be fully captured\n+        //~^ ERROR: drop order\n+        //~| HELP: add a dummy let to cause `u` to be fully captured\n         let _x = u.0.0;\n         let _x = u.0.1;\n         let _x = u.1.0;"}, {"sha": "92b6f25c80dad71a36ba919d2d02651983343a46", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/precise.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/bbfb8579ff4403a2c23e296614d2f5474b124ac9/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbfb8579ff4403a2c23e296614d2f5474b124ac9/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise.rs?ref=bbfb8579ff4403a2c23e296614d2f5474b124ac9", "patch": "@@ -1,6 +1,6 @@\n // run-rustfix\n \n-#![deny(disjoint_capture_migration)]\n+#![deny(rust_2021_incompatible_closure_captures)]\n \n #[derive(Debug)]\n struct Foo(i32);\n@@ -17,8 +17,8 @@ fn test_precise_analysis_drop_paths_not_captured_by_move() {\n     let t = ConstainsDropField(Foo(10), Foo(20));\n \n     let c = || {\n-    //~^ ERROR: drop order\n-    //~| HELP: add a dummy let to cause `t` to be fully captured\n+        //~^ ERROR: drop order\n+        //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n         let _t = &t.1;\n     };\n@@ -28,8 +28,7 @@ fn test_precise_analysis_drop_paths_not_captured_by_move() {\n \n struct S;\n impl Drop for S {\n-    fn drop(&mut self) {\n-    }\n+    fn drop(&mut self) {}\n }\n \n struct T(S, S);\n@@ -40,8 +39,8 @@ fn test_precise_analysis_long_path_missing() {\n     let u = U(T(S, S), T(S, S));\n \n     let c = || {\n-    //~^ ERROR: drop order\n-    //~| HELP: add a dummy let to cause `u` to be fully captured\n+        //~^ ERROR: drop order\n+        //~| HELP: add a dummy let to cause `u` to be fully captured\n         let _x = u.0.0;\n         let _x = u.0.1;\n         let _x = u.1.0;"}, {"sha": "2788207296f1166242c445118687fa0c1ee1d101", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/precise.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bbfb8579ff4403a2c23e296614d2f5474b124ac9/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbfb8579ff4403a2c23e296614d2f5474b124ac9/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise.stderr?ref=bbfb8579ff4403a2c23e296614d2f5474b124ac9", "patch": "@@ -13,8 +13,8 @@ LL | |     };\n note: the lint level is defined here\n   --> $DIR/precise.rs:3:9\n    |\n-LL | #![deny(disjoint_capture_migration)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #![deny(rust_2021_incompatible_closure_captures)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t` to be fully captured\n    |\n@@ -27,7 +27,7 @@ LL |     };\n    |\n \n error: drop order will change in Rust 2021\n-  --> $DIR/precise.rs:42:13\n+  --> $DIR/precise.rs:41:13\n    |\n LL |       let c = || {\n    |  _____________^"}, {"sha": "587d71c40fc6986d06364ae4ec36c3ddd0abd517", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/precise_no_migrations.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bbfb8579ff4403a2c23e296614d2f5474b124ac9/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise_no_migrations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbfb8579ff4403a2c23e296614d2f5474b124ac9/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise_no_migrations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise_no_migrations.rs?ref=bbfb8579ff4403a2c23e296614d2f5474b124ac9", "patch": "@@ -1,6 +1,6 @@\n // run-pass\n \n-#![deny(disjoint_capture_migration)]\n+#![deny(rust_2021_incompatible_closure_captures)]\n \n #[derive(Debug)]\n struct Foo(i32);\n@@ -73,8 +73,7 @@ fn test_precise_analysis_parent_captured_2() {\n \n struct S;\n impl Drop for S {\n-    fn drop(&mut self) {\n-    }\n+    fn drop(&mut self) {}\n }\n \n struct T(S, S);"}, {"sha": "58ed2de26b3a772217a43285efe7b1cc43cf77da", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/significant_drop.fixed", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/bbfb8579ff4403a2c23e296614d2f5474b124ac9/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/bbfb8579ff4403a2c23e296614d2f5474b124ac9/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.fixed?ref=bbfb8579ff4403a2c23e296614d2f5474b124ac9", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n-#![deny(disjoint_capture_migration)]\n+#![deny(rust_2021_incompatible_closure_captures)]\n //~^ NOTE: the lint level is defined here\n \n // Test cases for types that implement a significant drop (user defined)\n@@ -23,9 +23,9 @@ fn test1_all_need_migration() {\n     let t2 = (Foo(0), Foo(0));\n \n     let c = || { let _ = (&t, &t1, &t2); \n-    //~^ ERROR: drop order\n-    //~| NOTE: for more information, see\n-    //~| HELP: add a dummy let to cause `t`, `t1`, `t2` to be fully captured\n+        //~^ ERROR: drop order\n+        //~| NOTE: for more information, see\n+        //~| HELP: add a dummy let to cause `t`, `t1`, `t2` to be fully captured\n         let _t = t.0;\n         let _t1 = t1.0;\n         let _t2 = t2.0;\n@@ -42,9 +42,9 @@ fn test2_only_precise_paths_need_migration() {\n     let t2 = (Foo(0), Foo(0));\n \n     let c = || { let _ = (&t, &t1); \n-    //~^ ERROR: drop order\n-    //~| NOTE: for more information, see\n-    //~| HELP: add a dummy let to cause `t`, `t1` to be fully captured\n+        //~^ ERROR: drop order\n+        //~| NOTE: for more information, see\n+        //~| HELP: add a dummy let to cause `t`, `t1` to be fully captured\n         let _t = t.0;\n         let _t1 = t1.0;\n         let _t2 = t2;\n@@ -59,9 +59,9 @@ fn test3_only_by_value_need_migration() {\n     let t = (Foo(0), Foo(0));\n     let t1 = (Foo(0), Foo(0));\n     let c = || { let _ = &t; \n-    //~^ ERROR: drop order\n-    //~| NOTE: for more information, see\n-    //~| HELP: add a dummy let to cause `t` to be fully captured\n+        //~^ ERROR: drop order\n+        //~| NOTE: for more information, see\n+        //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n         println!(\"{:?}\", t1.1);\n     };\n@@ -77,9 +77,9 @@ fn test4_type_contains_drop_need_migration() {\n     let t = ConstainsDropField(Foo(0), Foo(0));\n \n     let c = || { let _ = &t; \n-    //~^ ERROR: drop order\n-    //~| NOTE: for more information, see\n-    //~| HELP: add a dummy let to cause `t` to be fully captured\n+        //~^ ERROR: drop order\n+        //~| NOTE: for more information, see\n+        //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n     };\n \n@@ -93,9 +93,9 @@ fn test5_drop_non_drop_aggregate_need_migration() {\n     let t = (Foo(0), Foo(0), 0i32);\n \n     let c = || { let _ = &t; \n-    //~^ ERROR: drop order\n-    //~| NOTE: for more information, see\n-    //~| HELP: add a dummy let to cause `t` to be fully captured\n+        //~^ ERROR: drop order\n+        //~| NOTE: for more information, see\n+        //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n     };\n \n@@ -107,9 +107,9 @@ fn test6_significant_insignificant_drop_aggregate_need_migration() {\n     let t = (Foo(0), String::new());\n \n     let c = || { let _ = &t; \n-    //~^ ERROR: drop order\n-    //~| NOTE: for more information, see\n-    //~| HELP: add a dummy let to cause `t` to be fully captured\n+        //~^ ERROR: drop order\n+        //~| NOTE: for more information, see\n+        //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.1;\n     };\n \n@@ -123,9 +123,9 @@ fn test7_move_closures_non_copy_types_might_need_migration() {\n     let t1 = (Foo(0), Foo(0), Foo(0));\n \n     let c = move || { let _ = (&t1, &t); \n-    //~^ ERROR: drop order\n-    //~| NOTE: for more information, see\n-    //~| HELP: add a dummy let to cause `t1`, `t` to be fully captured\n+        //~^ ERROR: drop order\n+        //~| NOTE: for more information, see\n+        //~| HELP: add a dummy let to cause `t1`, `t` to be fully captured\n         println!(\"{:?} {:?}\", t1.1, t.1);\n     };\n "}, {"sha": "0890fc1c21256046597d6d6e7850377d492772a2", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/significant_drop.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/bbfb8579ff4403a2c23e296614d2f5474b124ac9/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbfb8579ff4403a2c23e296614d2f5474b124ac9/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.rs?ref=bbfb8579ff4403a2c23e296614d2f5474b124ac9", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n-#![deny(disjoint_capture_migration)]\n+#![deny(rust_2021_incompatible_closure_captures)]\n //~^ NOTE: the lint level is defined here\n \n // Test cases for types that implement a significant drop (user defined)\n@@ -23,9 +23,9 @@ fn test1_all_need_migration() {\n     let t2 = (Foo(0), Foo(0));\n \n     let c = || {\n-    //~^ ERROR: drop order\n-    //~| NOTE: for more information, see\n-    //~| HELP: add a dummy let to cause `t`, `t1`, `t2` to be fully captured\n+        //~^ ERROR: drop order\n+        //~| NOTE: for more information, see\n+        //~| HELP: add a dummy let to cause `t`, `t1`, `t2` to be fully captured\n         let _t = t.0;\n         let _t1 = t1.0;\n         let _t2 = t2.0;\n@@ -42,9 +42,9 @@ fn test2_only_precise_paths_need_migration() {\n     let t2 = (Foo(0), Foo(0));\n \n     let c = || {\n-    //~^ ERROR: drop order\n-    //~| NOTE: for more information, see\n-    //~| HELP: add a dummy let to cause `t`, `t1` to be fully captured\n+        //~^ ERROR: drop order\n+        //~| NOTE: for more information, see\n+        //~| HELP: add a dummy let to cause `t`, `t1` to be fully captured\n         let _t = t.0;\n         let _t1 = t1.0;\n         let _t2 = t2;\n@@ -59,9 +59,9 @@ fn test3_only_by_value_need_migration() {\n     let t = (Foo(0), Foo(0));\n     let t1 = (Foo(0), Foo(0));\n     let c = || {\n-    //~^ ERROR: drop order\n-    //~| NOTE: for more information, see\n-    //~| HELP: add a dummy let to cause `t` to be fully captured\n+        //~^ ERROR: drop order\n+        //~| NOTE: for more information, see\n+        //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n         println!(\"{:?}\", t1.1);\n     };\n@@ -77,9 +77,9 @@ fn test4_type_contains_drop_need_migration() {\n     let t = ConstainsDropField(Foo(0), Foo(0));\n \n     let c = || {\n-    //~^ ERROR: drop order\n-    //~| NOTE: for more information, see\n-    //~| HELP: add a dummy let to cause `t` to be fully captured\n+        //~^ ERROR: drop order\n+        //~| NOTE: for more information, see\n+        //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n     };\n \n@@ -93,9 +93,9 @@ fn test5_drop_non_drop_aggregate_need_migration() {\n     let t = (Foo(0), Foo(0), 0i32);\n \n     let c = || {\n-    //~^ ERROR: drop order\n-    //~| NOTE: for more information, see\n-    //~| HELP: add a dummy let to cause `t` to be fully captured\n+        //~^ ERROR: drop order\n+        //~| NOTE: for more information, see\n+        //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n     };\n \n@@ -107,9 +107,9 @@ fn test6_significant_insignificant_drop_aggregate_need_migration() {\n     let t = (Foo(0), String::new());\n \n     let c = || {\n-    //~^ ERROR: drop order\n-    //~| NOTE: for more information, see\n-    //~| HELP: add a dummy let to cause `t` to be fully captured\n+        //~^ ERROR: drop order\n+        //~| NOTE: for more information, see\n+        //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.1;\n     };\n \n@@ -123,9 +123,9 @@ fn test7_move_closures_non_copy_types_might_need_migration() {\n     let t1 = (Foo(0), Foo(0), Foo(0));\n \n     let c = move || {\n-    //~^ ERROR: drop order\n-    //~| NOTE: for more information, see\n-    //~| HELP: add a dummy let to cause `t1`, `t` to be fully captured\n+        //~^ ERROR: drop order\n+        //~| NOTE: for more information, see\n+        //~| HELP: add a dummy let to cause `t1`, `t` to be fully captured\n         println!(\"{:?} {:?}\", t1.1, t.1);\n     };\n "}, {"sha": "ebf9f169fd400e9fe5b0da13b3792f0a39fa89b5", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/significant_drop.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbfb8579ff4403a2c23e296614d2f5474b124ac9/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbfb8579ff4403a2c23e296614d2f5474b124ac9/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.stderr?ref=bbfb8579ff4403a2c23e296614d2f5474b124ac9", "patch": "@@ -14,8 +14,8 @@ LL | |     };\n note: the lint level is defined here\n   --> $DIR/significant_drop.rs:2:9\n    |\n-LL | #![deny(disjoint_capture_migration)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #![deny(rust_2021_incompatible_closure_captures)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t`, `t1`, `t2` to be fully captured\n    |"}]}