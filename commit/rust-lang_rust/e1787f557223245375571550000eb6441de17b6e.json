{"sha": "e1787f557223245375571550000eb6441de17b6e", "node_id": "C_kwDOAAsO6NoAKGUxNzg3ZjU1NzIyMzI0NTM3NTU3MTU1MDAwMGViNjQ0MWRlMTdiNmU", "commit": {"author": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2022-12-11T11:10:55Z"}, "committer": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2023-01-02T19:15:48Z"}, "message": "Reduce HIR debug output\n\nHIR debug output is currently very verbose, especially when used with\nthe alternate (`#`) flag. This commit reduces the amount of noisy\nnewlines by forcing a few small key types to stay on one line, which\nmakes the output easier to read and scroll by.\n\n```\n$ rustc +after hello_world.rs -Zunpretty=hir-tree | wc -l\n582\n$ rustc +before hello_world.rs -Zunpretty=hir-tree | wc -l\n932\n```", "tree": {"sha": "6f884831f4627d932c06de3a7f1d510a6f528f6e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6f884831f4627d932c06de3a7f1d510a6f528f6e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1787f557223245375571550000eb6441de17b6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1787f557223245375571550000eb6441de17b6e", "html_url": "https://github.com/rust-lang/rust/commit/e1787f557223245375571550000eb6441de17b6e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1787f557223245375571550000eb6441de17b6e/comments", "author": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb9dfa8ceffb985105be3176d7ed2f99515ea377", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb9dfa8ceffb985105be3176d7ed2f99515ea377", "html_url": "https://github.com/rust-lang/rust/commit/fb9dfa8ceffb985105be3176d7ed2f99515ea377"}], "stats": {"total": 53, "additions": 42, "deletions": 11}, "files": [{"sha": "c63caa06818f26e2f3f263d778c140ae5fc588aa", "filename": "compiler/rustc_data_structures/src/sorted_map.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e1787f557223245375571550000eb6441de17b6e/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1787f557223245375571550000eb6441de17b6e/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map.rs?ref=e1787f557223245375571550000eb6441de17b6e", "patch": "@@ -1,6 +1,7 @@\n use crate::stable_hasher::{HashStable, StableHasher, StableOrd};\n use std::borrow::Borrow;\n use std::cmp::Ordering;\n+use std::fmt::Debug;\n use std::mem;\n use std::ops::{Bound, Index, IndexMut, RangeBounds};\n \n@@ -16,7 +17,7 @@ pub use index_map::SortedIndexMultiMap;\n /// stores data in a more compact way. It also supports accessing contiguous\n /// ranges of elements as a slice, and slices of already sorted elements can be\n /// inserted efficiently.\n-#[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, Encodable, Decodable)]\n+#[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Encodable, Decodable)]\n pub struct SortedMap<K, V> {\n     data: Vec<(K, V)>,\n }\n@@ -314,5 +315,11 @@ impl<K: HashStable<CTX> + StableOrd, V: HashStable<CTX>, CTX> HashStable<CTX> fo\n     }\n }\n \n+impl<K: Debug, V: Debug> Debug for SortedMap<K, V> {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        f.debug_map().entries(self.data.iter().map(|(a, b)| (a, b))).finish()\n+    }\n+}\n+\n #[cfg(test)]\n mod tests;"}, {"sha": "034f06bb889b61f47022102f0fcfe8abe9d5d5cc", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e1787f557223245375571550000eb6441de17b6e/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1787f557223245375571550000eb6441de17b6e/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=e1787f557223245375571550000eb6441de17b6e", "patch": "@@ -854,7 +854,11 @@ impl fmt::Debug for OwnerNodes<'_> {\n                 &self\n                     .nodes\n                     .iter_enumerated()\n-                    .map(|(id, parented_node)| (id, parented_node.as_ref().map(|node| node.parent)))\n+                    .map(|(id, parented_node)| {\n+                        let parented_node = parented_node.as_ref().map(|node| node.parent);\n+\n+                        debug_fn(move |f| write!(f, \"({id:?}, {parented_node:?})\"))\n+                    })\n                     .collect::<Vec<_>>(),\n             )\n             .field(\"bodies\", &self.bodies)\n@@ -3615,3 +3619,13 @@ mod size_asserts {\n     static_assert_size!(TyKind<'_>, 32);\n     // tidy-alphabetical-end\n }\n+\n+fn debug_fn(f: impl Fn(&mut fmt::Formatter<'_>) -> fmt::Result) -> impl fmt::Debug {\n+    struct DebugFn<F>(F);\n+    impl<F: Fn(&mut fmt::Formatter<'_>) -> fmt::Result> fmt::Debug for DebugFn<F> {\n+        fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n+            (self.0)(fmt)\n+        }\n+    }\n+    DebugFn(f)\n+}"}, {"sha": "5d05adfb55654efb9184d872b62427aea6eefef3", "filename": "compiler/rustc_hir/src/hir_id.rs", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e1787f557223245375571550000eb6441de17b6e/compiler%2Frustc_hir%2Fsrc%2Fhir_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1787f557223245375571550000eb6441de17b6e/compiler%2Frustc_hir%2Fsrc%2Fhir_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir_id.rs?ref=e1787f557223245375571550000eb6441de17b6e", "patch": "@@ -1,14 +1,21 @@\n use crate::def_id::{DefId, DefIndex, LocalDefId, CRATE_DEF_ID};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher, StableOrd, ToStableHashKey};\n use rustc_span::{def_id::DefPathHash, HashStableContext};\n-use std::fmt;\n+use std::fmt::{self, Debug};\n \n-#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]\n+#[derive(Copy, Clone, PartialEq, Eq, Hash)]\n #[derive(Encodable, Decodable)]\n pub struct OwnerId {\n     pub def_id: LocalDefId,\n }\n \n+impl Debug for OwnerId {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        // Example: DefId(0:1 ~ aa[7697]::{use#0})\n+        Debug::fmt(&self.def_id, f)\n+    }\n+}\n+\n impl From<OwnerId> for HirId {\n     fn from(owner: OwnerId) -> HirId {\n         HirId { owner, local_id: ItemLocalId::from_u32(0) }\n@@ -60,14 +67,22 @@ impl<CTX: HashStableContext> ToStableHashKey<CTX> for OwnerId {\n /// the `local_id` part of the `HirId` changing, which is a very useful property in\n /// incremental compilation where we have to persist things through changes to\n /// the code base.\n-#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]\n+#[derive(Copy, Clone, PartialEq, Eq, Hash)]\n #[derive(Encodable, Decodable, HashStable_Generic)]\n #[rustc_pass_by_value]\n pub struct HirId {\n     pub owner: OwnerId,\n     pub local_id: ItemLocalId,\n }\n \n+impl Debug for HirId {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        // Example: HirId(DefId(0:1 ~ aa[7697]::{use#0}).10)\n+        // Don't use debug_tuple to always keep this on one line.\n+        write!(f, \"HirId({:?}.{:?})\", self.owner, self.local_id)\n+    }\n+}\n+\n impl HirId {\n     /// Signal local id which should never be used.\n     pub const INVALID: HirId ="}, {"sha": "4b6915f77152678f063ffca2141578bf963acfa8", "filename": "src/test/ui/thir-tree.stdout", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e1787f557223245375571550000eb6441de17b6e/src%2Ftest%2Fui%2Fthir-tree.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/e1787f557223245375571550000eb6441de17b6e/src%2Ftest%2Fui%2Fthir-tree.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fthir-tree.stdout?ref=e1787f557223245375571550000eb6441de17b6e", "patch": "@@ -32,12 +32,7 @@ Thir {\n             kind: Scope {\n                 region_scope: Node(2),\n                 lint_level: Explicit(\n-                    HirId {\n-                        owner: OwnerId {\n-                            def_id: DefId(0:3 ~ thir_tree[8f1d]::main),\n-                        },\n-                        local_id: 2,\n-                    },\n+                    HirId(DefId(0:3 ~ thir_tree[8f1d]::main).2),\n                 ),\n                 value: e0,\n             },"}]}