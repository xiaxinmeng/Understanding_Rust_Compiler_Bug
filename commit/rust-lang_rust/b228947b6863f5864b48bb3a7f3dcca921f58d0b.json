{"sha": "b228947b6863f5864b48bb3a7f3dcca921f58d0b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyMjg5NDdiNjg2M2Y1ODY0YjQ4YmIzYTdmM2RjY2E5MjFmNThkMGI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-04-14T20:04:08Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-04-14T22:10:07Z"}, "message": "cleanup syntax", "tree": {"sha": "208d849b755a91e2f3640c1550ca8c74192a579a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/208d849b755a91e2f3640c1550ca8c74192a579a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b228947b6863f5864b48bb3a7f3dcca921f58d0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b228947b6863f5864b48bb3a7f3dcca921f58d0b", "html_url": "https://github.com/rust-lang/rust/commit/b228947b6863f5864b48bb3a7f3dcca921f58d0b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b228947b6863f5864b48bb3a7f3dcca921f58d0b/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6f32c6d3a5626a1f071d96d2cdebe630abdd5a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6f32c6d3a5626a1f071d96d2cdebe630abdd5a3", "html_url": "https://github.com/rust-lang/rust/commit/e6f32c6d3a5626a1f071d96d2cdebe630abdd5a3"}], "stats": {"total": 42, "additions": 34, "deletions": 8}, "files": [{"sha": "28f9985b6befa012a8372ac638d0f23b146942f1", "filename": "crates/ra_lsp_server/src/main.rs", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b228947b6863f5864b48bb3a7f3dcca921f58d0b/crates%2Fra_lsp_server%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b228947b6863f5864b48bb3a7f3dcca921f58d0b/crates%2Fra_lsp_server%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain.rs?ref=b228947b6863f5864b48bb3a7f3dcca921f58d0b", "patch": "@@ -12,15 +12,27 @@ fn main() -> Result<()> {\n         Ok(ref v) if v == \"1\" => logger.log_to_file().directory(\"log\").start()?,\n         _ => logger.start()?,\n     };\n-    let prof_depth = match std::env::var(\"RA_PROFILE_DEPTH\") {\n-        Ok(ref d) => d.parse()?,\n-        _ => 0,\n-    };\n-    let profile_allowed = match std::env::var(\"RA_PROFILE\") {\n-        Ok(ref p) => p.split(\";\").map(String::from).collect(),\n-        _ => Vec::new(),\n+    // Filtering syntax\n+    // env RA_PROFILE=*             // dump everything\n+    // env RA_PROFILE=foo|bar|baz   // enabled only selected entries\n+    // env RA_PROFILE=*@3           // dump everything, up to depth 3\n+    let filter = match std::env::var(\"RA_PROFILE\") {\n+        Ok(p) => {\n+            let mut p = p.as_str();\n+            let depth = if let Some(idx) = p.rfind(\"@\") {\n+                let depth: usize = p[idx + 1..].parse().expect(\"invalid profile depth\");\n+                p = &p[..idx];\n+                depth\n+            } else {\n+                999\n+            };\n+            let allowed =\n+                if p == \"*\" { Vec::new() } else { p.split(\";\").map(String::from).collect() };\n+            ra_prof::Filter::new(depth, allowed)\n+        }\n+        Err(_) => ra_prof::Filter::disabled(),\n     };\n-    ra_prof::set_filter(ra_prof::Filter::new(prof_depth, profile_allowed));\n+    ra_prof::set_filter(filter);\n     log::info!(\"lifecycle: server started\");\n     match ::std::panic::catch_unwind(main_inner) {\n         Ok(res) => {"}, {"sha": "c7c21b6d2a2851cfe13581fe53a61beec93d8464", "filename": "crates/ra_prof/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b228947b6863f5864b48bb3a7f3dcca921f58d0b/crates%2Fra_prof%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b228947b6863f5864b48bb3a7f3dcca921f58d0b/crates%2Fra_prof%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_prof%2Fsrc%2Flib.rs?ref=b228947b6863f5864b48bb3a7f3dcca921f58d0b", "patch": "@@ -104,6 +104,10 @@ pub struct Filter {\n }\n \n impl Filter {\n+    pub fn disabled() -> Filter {\n+        Filter::new(0, Vec::new())\n+    }\n+\n     pub fn new(depth: usize, allowed: Vec<String>) -> Filter {\n         Filter { depth, allowed }\n     }"}, {"sha": "7fb5886c9713a4d38d2ef85940c25b086ba6b27b", "filename": "docs/dev/README.md", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b228947b6863f5864b48bb3a7f3dcca921f58d0b/docs%2Fdev%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/b228947b6863f5864b48bb3a7f3dcca921f58d0b/docs%2Fdev%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2FREADME.md?ref=b228947b6863f5864b48bb3a7f3dcca921f58d0b", "patch": "@@ -135,3 +135,13 @@ There's also two VS Code commands which might be of interest:\n   There's an alias for this: `cargo jinstall-lsp`.\n \n * `Rust Analyzer: Syntax Tree` shows syntax tree of the current file/selection.\n+\n+# Profiling\n+\n+We have a built-in hierarchical profiler, you can enable it by using `RA_PROF` env-var:\n+\n+```\n+RA_PROFILE=*             // dump everything\n+RA_PROFILE=foo|bar|baz   // enabled only selected entries\n+RA_PROFILE=*@3           // dump everything, up to depth 3\n+```"}]}