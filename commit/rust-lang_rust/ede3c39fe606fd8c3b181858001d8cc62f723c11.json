{"sha": "ede3c39fe606fd8c3b181858001d8cc62f723c11", "node_id": "C_kwDOAAsO6NoAKGVkZTNjMzlmZTYwNmZkOGMzYjE4MTg1ODAwMWQ4Y2M2MmY3MjNjMTE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-03-20T06:10:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-20T06:10:30Z"}, "message": "Rollup merge of #109249 - compiler-errors:new-rpitit-comments, r=spastorino\n\nUpdate names/comments for new return-position impl trait in trait lowering strategy\n\nr? `@spastorino`\n\ntotally cosmetic", "tree": {"sha": "ddea734d7fbd6b369cf1c68756a2bdbeb25e3311", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ddea734d7fbd6b369cf1c68756a2bdbeb25e3311"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ede3c39fe606fd8c3b181858001d8cc62f723c11", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkF/jWCRBK7hj4Ov3rIwAAaCIIAE/3LnlpeI9qKA1W6n0Z91gX\nDrg7jTtByM/wTp1NiujQ1yijwS9OQDaTSxwEmYQ+QzZtPpTKcqeot8BjgF4Nz5/X\nrVySMbJbI9XQQhHKlfXmZDTDhia1qdI9m2WzTRKXE/UAbeQc7LoenCeq6USWJjW7\nA5iaezGi2RYvZjCqw5NEidpd6dFy1gR6ftTPNBCvGUvektR4lX5L0TwWEODN062e\neo5EKWDkPD1cfWTMcEvrlOPHq9fQu+nmXACxbXc2VSdLd6LeYt1tMDpByqarr8nw\nnrscFOlWZj5jQxjOU+ksyciVwZ9+vRwOTdolwUggGWJxCB2QwPmzeHBPOjGxNFk=\n=h5wD\n-----END PGP SIGNATURE-----\n", "payload": "tree ddea734d7fbd6b369cf1c68756a2bdbeb25e3311\nparent 9d0eac4d02da8a1b139ff3dca7fc4b458fb99eb6\nparent 4fd66d70cb828d770911051fe2030d000ae5c86e\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1679292630 +0100\ncommitter GitHub <noreply@github.com> 1679292630 +0100\n\nRollup merge of #109249 - compiler-errors:new-rpitit-comments, r=spastorino\n\nUpdate names/comments for new return-position impl trait in trait lowering strategy\n\nr? `@spastorino`\n\ntotally cosmetic\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ede3c39fe606fd8c3b181858001d8cc62f723c11", "html_url": "https://github.com/rust-lang/rust/commit/ede3c39fe606fd8c3b181858001d8cc62f723c11", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ede3c39fe606fd8c3b181858001d8cc62f723c11/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d0eac4d02da8a1b139ff3dca7fc4b458fb99eb6", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d0eac4d02da8a1b139ff3dca7fc4b458fb99eb6", "html_url": "https://github.com/rust-lang/rust/commit/9d0eac4d02da8a1b139ff3dca7fc4b458fb99eb6"}, {"sha": "4fd66d70cb828d770911051fe2030d000ae5c86e", "url": "https://api.github.com/repos/rust-lang/rust/commits/4fd66d70cb828d770911051fe2030d000ae5c86e", "html_url": "https://github.com/rust-lang/rust/commit/4fd66d70cb828d770911051fe2030d000ae5c86e"}], "stats": {"total": 79, "additions": 47, "deletions": 32}, "files": [{"sha": "71b54e11cc078b59c2723644aab8cf38262f5328", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ede3c39fe606fd8c3b181858001d8cc62f723c11/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede3c39fe606fd8c3b181858001d8cc62f723c11/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=ede3c39fe606fd8c3b181858001d8cc62f723c11", "patch": "@@ -3068,7 +3068,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                         // generate the def_id of an associated type for the trait and return as\n                         // type a projection.\n                         let def_id = if in_trait && tcx.lower_impl_trait_in_trait_to_assoc_ty() {\n-                            tcx.associated_item_for_impl_trait_in_trait(local_def_id).to_def_id()\n+                            tcx.associated_type_for_impl_trait_in_trait(local_def_id).to_def_id()\n                         } else {\n                             local_def_id.to_def_id()\n                         };"}, {"sha": "561e770d90cec6ed2eec63696eace7f49c691af0", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ede3c39fe606fd8c3b181858001d8cc62f723c11/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede3c39fe606fd8c3b181858001d8cc62f723c11/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=ede3c39fe606fd8c3b181858001d8cc62f723c11", "patch": "@@ -254,7 +254,7 @@ provide! { tcx, def_id, other, cdata,\n             .process_decoded(tcx, || panic!(\"{def_id:?} does not have trait_impl_trait_tys\")))\n      }\n \n-    associated_items_for_impl_trait_in_trait => { table_defaulted_array }\n+    associated_types_for_impl_traits_in_associated_fn => { table_defaulted_array }\n \n     visibility => { cdata.get_visibility(def_id.index) }\n     adt_def => { cdata.get_adt_def(def_id.index, tcx) }"}, {"sha": "c3b6fbe8a1d6a23401aaccab1fff6040c5359eb6", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ede3c39fe606fd8c3b181858001d8cc62f723c11/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede3c39fe606fd8c3b181858001d8cc62f723c11/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=ede3c39fe606fd8c3b181858001d8cc62f723c11", "patch": "@@ -1198,8 +1198,8 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                 record!(self.tables.trait_impl_trait_tys[def_id] <- table);\n             }\n             if should_encode_fn_impl_trait_in_trait(tcx, def_id) {\n-                let table = tcx.associated_items_for_impl_trait_in_trait(def_id);\n-                record_defaulted_array!(self.tables.associated_items_for_impl_trait_in_trait[def_id] <- table);\n+                let table = tcx.associated_types_for_impl_traits_in_associated_fn(def_id);\n+                record_defaulted_array!(self.tables.associated_types_for_impl_traits_in_associated_fn[def_id] <- table);\n             }\n         }\n "}, {"sha": "6dc6041b284ea3898f6517eb755becde21265fe0", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ede3c39fe606fd8c3b181858001d8cc62f723c11/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede3c39fe606fd8c3b181858001d8cc62f723c11/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=ede3c39fe606fd8c3b181858001d8cc62f723c11", "patch": "@@ -354,7 +354,7 @@ define_tables! {\n     explicit_item_bounds: Table<DefIndex, LazyArray<(ty::Predicate<'static>, Span)>>,\n     inferred_outlives_of: Table<DefIndex, LazyArray<(ty::Clause<'static>, Span)>>,\n     inherent_impls: Table<DefIndex, LazyArray<DefIndex>>,\n-    associated_items_for_impl_trait_in_trait: Table<DefIndex, LazyArray<DefId>>,\n+    associated_types_for_impl_traits_in_associated_fn: Table<DefIndex, LazyArray<DefId>>,\n     opt_rpitit_info: Table<DefIndex, Option<LazyValue<ty::ImplTraitInTraitData>>>,\n     unused_generic_params: Table<DefIndex, UnusedGenericParams>,\n "}, {"sha": "4bf81c97d06adba414bae577be37afbc61472294", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ede3c39fe606fd8c3b181858001d8cc62f723c11/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede3c39fe606fd8c3b181858001d8cc62f723c11/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=ede3c39fe606fd8c3b181858001d8cc62f723c11", "patch": "@@ -785,15 +785,15 @@ rustc_queries! {\n     /// if `fn_def_id` is the def id of a function defined inside an impl that implements a trait, then it\n     /// creates and returns the associated items that correspond to each impl trait in return position\n     /// of the implemented trait.\n-    query associated_items_for_impl_trait_in_trait(fn_def_id: DefId) -> &'tcx [DefId] {\n+    query associated_types_for_impl_traits_in_associated_fn(fn_def_id: DefId) -> &'tcx [DefId] {\n         desc { |tcx| \"creating associated items for impl trait in trait returned by `{}`\", tcx.def_path_str(fn_def_id) }\n         cache_on_disk_if { fn_def_id.is_local() }\n         separate_provide_extern\n     }\n \n     /// Given an impl trait in trait `opaque_ty_def_id`, create and return the corresponding\n     /// associated item.\n-    query associated_item_for_impl_trait_in_trait(opaque_ty_def_id: LocalDefId) -> LocalDefId {\n+    query associated_type_for_impl_trait_in_trait(opaque_ty_def_id: LocalDefId) -> LocalDefId {\n         desc { |tcx| \"creates the associated item corresponding to the opaque type `{}`\", tcx.def_path_str(opaque_ty_def_id.to_def_id()) }\n         cache_on_disk_if { true }\n         separate_provide_extern"}, {"sha": "298b2c3073cd399a1fa0bbf7293058b227e024d1", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ede3c39fe606fd8c3b181858001d8cc62f723c11/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede3c39fe606fd8c3b181858001d8cc62f723c11/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=ede3c39fe606fd8c3b181858001d8cc62f723c11", "patch": "@@ -2579,7 +2579,9 @@ impl<'tcx> TyCtxt<'tcx> {\n         let Some(trait_item_def_id) = item.trait_item_def_id else { return false; };\n \n         if self.lower_impl_trait_in_trait_to_assoc_ty() {\n-            return !self.associated_items_for_impl_trait_in_trait(trait_item_def_id).is_empty();\n+            return !self\n+                .associated_types_for_impl_traits_in_associated_fn(trait_item_def_id)\n+                .is_empty();\n         }\n \n         // FIXME(RPITIT): This does a somewhat manual walk through the signature"}, {"sha": "b5bd6a81ff8b012a5b2a821bf424548ebd7ac38e", "filename": "compiler/rustc_ty_utils/src/assoc.rs", "status": "modified", "additions": 37, "deletions": 24, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/ede3c39fe606fd8c3b181858001d8cc62f723c11/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede3c39fe606fd8c3b181858001d8cc62f723c11/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs?ref=ede3c39fe606fd8c3b181858001d8cc62f723c11", "patch": "@@ -11,8 +11,8 @@ pub fn provide(providers: &mut ty::query::Providers) {\n         associated_item,\n         associated_item_def_ids,\n         associated_items,\n-        associated_items_for_impl_trait_in_trait,\n-        associated_item_for_impl_trait_in_trait,\n+        associated_types_for_impl_traits_in_associated_fn,\n+        associated_type_for_impl_trait_in_trait,\n         impl_item_implementor_ids,\n         ..*providers\n     };\n@@ -24,7 +24,7 @@ fn associated_item_def_ids(tcx: TyCtxt<'_>, def_id: DefId) -> &[DefId] {\n         hir::ItemKind::Trait(.., ref trait_item_refs) => {\n             if tcx.lower_impl_trait_in_trait_to_assoc_ty() {\n                 // We collect RPITITs for each trait method's return type and create a\n-                // corresponding associated item using associated_items_for_impl_trait_in_trait\n+                // corresponding associated item using associated_types_for_impl_traits_in_associated_fn\n                 // query.\n                 tcx.arena.alloc_from_iter(\n                     trait_item_refs\n@@ -39,7 +39,9 @@ fn associated_item_def_ids(tcx: TyCtxt<'_>, def_id: DefId) -> &[DefId] {\n                                 .flat_map(|trait_item_ref| {\n                                     let trait_fn_def_id =\n                                         trait_item_ref.id.owner_id.def_id.to_def_id();\n-                                    tcx.associated_items_for_impl_trait_in_trait(trait_fn_def_id)\n+                                    tcx.associated_types_for_impl_traits_in_associated_fn(\n+                                        trait_fn_def_id,\n+                                    )\n                                 })\n                                 .map(|def_id| *def_id),\n                         ),\n@@ -56,7 +58,7 @@ fn associated_item_def_ids(tcx: TyCtxt<'_>, def_id: DefId) -> &[DefId] {\n             if tcx.lower_impl_trait_in_trait_to_assoc_ty() {\n                 // We collect RPITITs for each trait method's return type, on the impl side too and\n                 // create a corresponding associated item using\n-                // associated_items_for_impl_trait_in_trait query.\n+                // associated_types_for_impl_traits_in_associated_fn query.\n                 tcx.arena.alloc_from_iter(\n                     impl_\n                         .items\n@@ -72,7 +74,9 @@ fn associated_item_def_ids(tcx: TyCtxt<'_>, def_id: DefId) -> &[DefId] {\n                                 .flat_map(|impl_item_ref| {\n                                     let impl_fn_def_id =\n                                         impl_item_ref.id.owner_id.def_id.to_def_id();\n-                                    tcx.associated_items_for_impl_trait_in_trait(impl_fn_def_id)\n+                                    tcx.associated_types_for_impl_traits_in_associated_fn(\n+                                        impl_fn_def_id,\n+                                    )\n                                 })\n                                 .map(|def_id| *def_id)\n                         })),\n@@ -176,13 +180,19 @@ fn associated_item_from_impl_item_ref(impl_item_ref: &hir::ImplItemRef) -> ty::A\n     }\n }\n \n-/// Given an `fn_def_id` of a trait or of an impl that implements a given trait:\n-/// if `fn_def_id` is the def id of a function defined inside a trait, then it creates and returns\n-/// the associated items that correspond to each impl trait in return position for that trait.\n-/// if `fn_def_id` is the def id of a function defined inside an impl that implements a trait, then it\n-/// creates and returns the associated items that correspond to each impl trait in return position\n-/// of the implemented trait.\n-fn associated_items_for_impl_trait_in_trait(tcx: TyCtxt<'_>, fn_def_id: DefId) -> &'_ [DefId] {\n+/// Given an `fn_def_id` of a trait or a trait implementation:\n+///\n+/// if `fn_def_id` is a function defined inside a trait, then it synthesizes\n+/// a new def id corresponding to a new associated type for each return-\n+/// position `impl Trait` in the signature.\n+///\n+/// if `fn_def_id` is a function inside of an impl, then for each synthetic\n+/// associated type generated for the corresponding trait function described\n+/// above, synthesize a corresponding associated type in the impl.\n+fn associated_types_for_impl_traits_in_associated_fn(\n+    tcx: TyCtxt<'_>,\n+    fn_def_id: DefId,\n+) -> &'_ [DefId] {\n     let parent_def_id = tcx.parent(fn_def_id);\n \n     match tcx.def_kind(parent_def_id) {\n@@ -206,7 +216,7 @@ fn associated_items_for_impl_trait_in_trait(tcx: TyCtxt<'_>, fn_def_id: DefId) -\n                 visitor.visit_fn_ret_ty(output);\n \n                 tcx.arena.alloc_from_iter(visitor.rpits.iter().map(|opaque_ty_def_id| {\n-                    tcx.associated_item_for_impl_trait_in_trait(opaque_ty_def_id).to_def_id()\n+                    tcx.associated_type_for_impl_trait_in_trait(opaque_ty_def_id).to_def_id()\n                 }))\n             } else {\n                 &[]\n@@ -217,9 +227,9 @@ fn associated_items_for_impl_trait_in_trait(tcx: TyCtxt<'_>, fn_def_id: DefId) -\n             let Some(trait_fn_def_id) = tcx.associated_item(fn_def_id).trait_item_def_id else { return &[] };\n \n             tcx.arena.alloc_from_iter(\n-                tcx.associated_items_for_impl_trait_in_trait(trait_fn_def_id).iter().map(\n+                tcx.associated_types_for_impl_traits_in_associated_fn(trait_fn_def_id).iter().map(\n                     move |trait_assoc_def_id| {\n-                        impl_associated_item_for_impl_trait_in_trait(\n+                        associated_type_for_impl_trait_in_impl(\n                             tcx,\n                             trait_assoc_def_id.expect_local(),\n                             fn_def_id.expect_local(),\n@@ -231,16 +241,17 @@ fn associated_items_for_impl_trait_in_trait(tcx: TyCtxt<'_>, fn_def_id: DefId) -\n         }\n \n         def_kind => bug!(\n-            \"associated_items_for_impl_trait_in_trait: {:?} should be Trait or Impl but is {:?}\",\n+            \"associated_types_for_impl_traits_in_associated_fn: {:?} should be Trait or Impl but is {:?}\",\n             parent_def_id,\n             def_kind\n         ),\n     }\n }\n \n-/// Given an `opaque_ty_def_id` corresponding to an impl trait in trait, create and return the\n-/// corresponding associated item.\n-fn associated_item_for_impl_trait_in_trait(\n+/// Given an `opaque_ty_def_id` corresponding to an `impl Trait` in an associated\n+/// function from a trait, synthesize an associated type for that `impl Trait`\n+/// that inherits properties that we infer from the method and the opaque type.\n+fn associated_type_for_impl_trait_in_trait(\n     tcx: TyCtxt<'_>,\n     opaque_ty_def_id: LocalDefId,\n ) -> LocalDefId {\n@@ -335,10 +346,12 @@ fn associated_item_for_impl_trait_in_trait(\n     local_def_id\n }\n \n-/// Given an `trait_assoc_def_id` that corresponds to a previously synthesized impl trait in trait\n-/// into an associated type and an `impl_def_id` corresponding to an impl block, create and return\n-/// the corresponding associated item inside the impl block.\n-fn impl_associated_item_for_impl_trait_in_trait(\n+/// Given an `trait_assoc_def_id` corresponding to an associated item synthesized\n+/// from an `impl Trait` in an associated function from a trait, and an\n+/// `impl_fn_def_id` that represents an implementation of the associated function\n+/// that the `impl Trait` comes from, synthesize an associated type for that `impl Trait`\n+/// that inherits properties that we infer from the method and the associated type.\n+fn associated_type_for_impl_trait_in_impl(\n     tcx: TyCtxt<'_>,\n     trait_assoc_def_id: LocalDefId,\n     impl_fn_def_id: LocalDefId,"}]}