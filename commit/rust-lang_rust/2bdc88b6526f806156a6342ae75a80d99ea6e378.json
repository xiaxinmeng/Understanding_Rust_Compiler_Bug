{"sha": "2bdc88b6526f806156a6342ae75a80d99ea6e378", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiZGM4OGI2NTI2ZjgwNjE1NmE2MzQyYWU3NWE4MGQ5OWVhNmUzNzg=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-06-28T21:14:28Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-06-28T22:18:09Z"}, "message": "copy the optimization passes from clang", "tree": {"sha": "47cd678327a9e8b3ea503c9a9b631d7aea806c12", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/47cd678327a9e8b3ea503c9a9b631d7aea806c12"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2bdc88b6526f806156a6342ae75a80d99ea6e378", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2bdc88b6526f806156a6342ae75a80d99ea6e378", "html_url": "https://github.com/rust-lang/rust/commit/2bdc88b6526f806156a6342ae75a80d99ea6e378", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2bdc88b6526f806156a6342ae75a80d99ea6e378/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e4e2f70c90f01b5be22a192c883b9dcb34df7ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e4e2f70c90f01b5be22a192c883b9dcb34df7ff", "html_url": "https://github.com/rust-lang/rust/commit/4e4e2f70c90f01b5be22a192c883b9dcb34df7ff"}], "stats": {"total": 163, "additions": 91, "deletions": 72}, "files": [{"sha": "d2b4c87c7441d2597b10646e69b3976298cd7fcf", "filename": "src/librustc/back/passes.rs", "status": "modified", "additions": 87, "deletions": 68, "changes": 155, "blob_url": "https://github.com/rust-lang/rust/blob/2bdc88b6526f806156a6342ae75a80d99ea6e378/src%2Flibrustc%2Fback%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bdc88b6526f806156a6342ae75a80d99ea6e378/src%2Flibrustc%2Fback%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Fpasses.rs?ref=2bdc88b6526f806156a6342ae75a80d99ea6e378", "patch": "@@ -60,90 +60,109 @@ impl PassManager {\n     }\n }\n \n-pub fn create_standard_passes(level:OptLevel) -> ~[~str] {\n-    let mut passes = ~[~\"strip-dead-prototypes\"];\n-\n-    if level == No {\n-        passes.push(~\"always-inline\");\n-        return passes;\n+pub fn create_standard_passes(level: OptLevel) -> ~[~str] {\n+    let mut passes = ~[];\n+\n+    // mostly identical to clang 3.3, all differences are documented with comments\n+\n+    if level != No {\n+        passes.push(~\"targetlibinfo\");\n+        passes.push(~\"no-aa\");\n+        // \"tbaa\" omitted, we don't emit clang-style type-based alias analysis information\n+        passes.push(~\"basicaa\");\n+        passes.push(~\"globalopt\");\n+        passes.push(~\"ipsccp\");\n+        passes.push(~\"deadargelim\");\n+        passes.push(~\"instcombine\");\n+        passes.push(~\"simplifycfg\");\n     }\n \n-    passes.push(~\"targetlibinfo\");\n-\n-    passes.push(~\"scev-aa\");\n-    passes.push(~\"basicaa\");\n-\n-    passes.push(~\"instcombine\");\n-    passes.push(~\"simplifycfg\");\n-    passes.push(~\"scalarrepl-ssa\");\n-    passes.push(~\"early-cse\");\n-\n-    passes.push(~\"globalopt\");\n-    passes.push(~\"ipsccp\");\n-    passes.push(~\"deadargelim\");\n-    passes.push(~\"instcombine\");\n-    passes.push(~\"simplifycfg\");\n+    passes.push(~\"basiccg\");\n \n-    passes.push(~\"prune-eh\");\n-\n-    passes.push(~\"inline\");\n-\n-    passes.push(~\"functionattrs\");\n-\n-    if level == Aggressive {\n-        passes.push(~\"argpromotion\");\n+    if level != No {\n+        passes.push(~\"prune-eh\");\n     }\n \n-    passes.push(~\"scalarrepl-ssa\");\n-    passes.push(~\"early-cse\");\n-    passes.push(~\"simplify-libcalls\");\n-    passes.push(~\"jump-threading\");\n-    passes.push(~\"correlated-propagation\");\n-    passes.push(~\"simplifycfg\");\n-    passes.push(~\"instcombine\");\n-\n-    passes.push(~\"tailcallelim\");\n-    passes.push(~\"simplifycfg\");\n-    passes.push(~\"reassociate\");\n-    passes.push(~\"loop-rotate\");\n-    passes.push(~\"licm\");\n-\n-    passes.push(~\"lcssa\");\n-    passes.push(~\"loop-unswitch\");\n+    passes.push(~\"inline-cost\");\n \n-    passes.push(~\"instcombine\");\n-    passes.push(~\"indvars\");\n-    passes.push(~\"loop-idiom\");\n-    passes.push(~\"loop-deletion\");\n-\n-    if level == Aggressive {\n-        passes.push(~\"loop-vectorize\");\n+    if level == No || level == Less {\n+        passes.push(~\"always-inline\");\n+    } else {\n+        passes.push(~\"inline\");\n     }\n \n-    passes.push(~\"loop-unroll\");\n-\n-    if level != Less {\n-        passes.push(~\"gvn\");\n+    if level != No {\n+        passes.push(~\"functionattrs\");\n+        if level == Aggressive {\n+            passes.push(~\"argpromotion\");\n+        }\n+        passes.push(~\"sroa\");\n+        passes.push(~\"domtree\");\n+        passes.push(~\"early-cse\");\n+        passes.push(~\"simplify-libcalls\");\n+        passes.push(~\"lazy-value-info\");\n+        passes.push(~\"jump-threading\");\n+        passes.push(~\"correlated-propagation\");\n+        passes.push(~\"simplifycfg\");\n+        passes.push(~\"instcombine\");\n+        passes.push(~\"tailcallelim\");\n+        passes.push(~\"simplifycfg\");\n+        passes.push(~\"reassociate\");\n+        passes.push(~\"domtree\");\n+        passes.push(~\"loops\");\n+        passes.push(~\"loop-simplify\");\n+        passes.push(~\"lcssa\");\n+        passes.push(~\"loop-rotate\");\n+        passes.push(~\"licm\");\n+        passes.push(~\"lcssa\");\n+        passes.push(~\"loop-unswitch\");\n+        passes.push(~\"instcombine\");\n+        passes.push(~\"scalar-evolution\");\n+        passes.push(~\"loop-simplify\");\n+        passes.push(~\"lcssa\");\n+        passes.push(~\"indvars\");\n+        passes.push(~\"loop-idiom\");\n+        passes.push(~\"loop-deletion\");\n+        if level == Aggressive {\n+            passes.push(~\"loop-simplify\");\n+            passes.push(~\"lcssa\");\n+            passes.push(~\"loop-vectorize\");\n+            passes.push(~\"loop-simplify\");\n+            passes.push(~\"lcssa\");\n+            passes.push(~\"scalar-evolution\");\n+            passes.push(~\"loop-simplify\");\n+            passes.push(~\"lcssa\");\n+        }\n+        if level != Less {\n+            passes.push(~\"loop-unroll\");\n+            passes.push(~\"memdep\");\n+            passes.push(~\"gvn\");\n+        }\n+        passes.push(~\"memdep\");\n+        passes.push(~\"memcpyopt\");\n+        passes.push(~\"sccp\");\n+        passes.push(~\"instcombine\");\n+        passes.push(~\"lazy-value-info\");\n+        passes.push(~\"jump-threading\");\n+        passes.push(~\"correlated-propagation\");\n+        passes.push(~\"domtree\");\n+        passes.push(~\"memdep\");\n+        passes.push(~\"dse\");\n+        passes.push(~\"adce\");\n+        passes.push(~\"simplifycfg\");\n+        passes.push(~\"instcombine\");\n+        // clang does `strip-dead-prototypes` here, since it does not emit them\n     }\n \n-    passes.push(~\"memcpyopt\");\n-    passes.push(~\"sccp\");\n-\n-    passes.push(~\"instcombine\");\n-    passes.push(~\"jump-threading\");\n-    passes.push(~\"correlated-propagation\");\n-    passes.push(~\"dse\");\n-\n-    passes.push(~\"adce\");\n-    passes.push(~\"simplifycfg\");\n-    passes.push(~\"instsimplify\");\n+    // rustc emits dead prototypes, so always ask LLVM to strip them\n+    passes.push(~\"strip-dead-prototypes\");\n \n     if level != Less {\n         passes.push(~\"globaldce\");\n         passes.push(~\"constmerge\");\n     }\n \n-    return passes;\n+    passes\n }\n \n pub fn populate_pass_manager(sess: Session, pm: &mut PassManager, pass_list:&[~str]) {"}, {"sha": "b65a6429f2c6c7ff26af2b5be178b860a8171b96", "filename": "src/test/bench/noise.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2bdc88b6526f806156a6342ae75a80d99ea6e378/src%2Ftest%2Fbench%2Fnoise.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bdc88b6526f806156a6342ae75a80d99ea6e378/src%2Ftest%2Fbench%2Fnoise.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fnoise.rs?ref=2bdc88b6526f806156a6342ae75a80d99ea6e378", "patch": "@@ -118,10 +118,10 @@ fn main() {\n         };\n     };\n \n-    /*for int::range(0, 256) |y| {\n+    for int::range(0, 256) |y| {\n         for int::range(0, 256) |x| {\n-            io::print(symbols[pixels[y*256+x] / 0.2f32 as int]);\n+            print(symbols[pixels[y*256+x] / 0.2f32 as int]);\n         }\n-        io::println(\"\");\n-    }*/\n+        println(\"\");\n+    }\n }"}]}