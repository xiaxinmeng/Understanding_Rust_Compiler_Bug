{"sha": "112ce807261d46befe78b947944c02ecca829a7d", "node_id": "C_kwDOAAsO6NoAKDExMmNlODA3MjYxZDQ2YmVmZTc4Yjk0Nzk0NGMwMmVjY2E4MjlhN2Q", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-08-13T10:32:01Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-10-13T16:50:24Z"}, "message": "Report duplicate definition in impls with overlap check.", "tree": {"sha": "92f248a823155b1ccc267b652ec2726f50eaaa07", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/92f248a823155b1ccc267b652ec2726f50eaaa07"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/112ce807261d46befe78b947944c02ecca829a7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/112ce807261d46befe78b947944c02ecca829a7d", "html_url": "https://github.com/rust-lang/rust/commit/112ce807261d46befe78b947944c02ecca829a7d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/112ce807261d46befe78b947944c02ecca829a7d/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4891d57f7aab37b5d6a84f2901c0bb8903111d53", "url": "https://api.github.com/repos/rust-lang/rust/commits/4891d57f7aab37b5d6a84f2901c0bb8903111d53", "html_url": "https://github.com/rust-lang/rust/commit/4891d57f7aab37b5d6a84f2901c0bb8903111d53"}], "stats": {"total": 140, "additions": 66, "deletions": 74}, "files": [{"sha": "c634a57b0b5346c219e83903aa563e802a5c4050", "filename": "compiler/rustc_hir_analysis/src/coherence/inherent_impls_overlap.rs", "status": "modified", "additions": 35, "deletions": 6, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/112ce807261d46befe78b947944c02ecca829a7d/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Finherent_impls_overlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/112ce807261d46befe78b947944c02ecca829a7d/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Finherent_impls_overlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Finherent_impls_overlap.rs?ref=112ce807261d46befe78b947944c02ecca829a7d", "patch": "@@ -58,6 +58,37 @@ impl<'tcx> InherentOverlapChecker<'tcx> {\n                 == item2.ident(self.tcx).normalize_to_macros_2_0()\n     }\n \n+    fn check_for_duplicate_items_in_impl(&self, impl_: DefId) {\n+        let impl_items = self.tcx.associated_items(impl_);\n+\n+        let mut seen_items = FxHashMap::default();\n+        for impl_item in impl_items.in_definition_order() {\n+            let span = self.tcx.def_span(impl_item.def_id);\n+            let ident = impl_item.ident(self.tcx);\n+\n+            let norm_ident = ident.normalize_to_macros_2_0();\n+            match seen_items.entry(norm_ident) {\n+                Entry::Occupied(entry) => {\n+                    let former = entry.get();\n+                    let mut err = struct_span_err!(\n+                        self.tcx.sess,\n+                        span,\n+                        E0592,\n+                        \"duplicate definitions with name `{}`\",\n+                        ident,\n+                    );\n+                    err.span_label(span, format!(\"duplicate definitions for `{}`\", ident));\n+                    err.span_label(*former, format!(\"other definition for `{}`\", ident));\n+\n+                    err.emit();\n+                }\n+                Entry::Vacant(entry) => {\n+                    entry.insert(span);\n+                }\n+            }\n+        }\n+    }\n+\n     fn check_for_common_items_in_impls(\n         &self,\n         impl1: DefId,\n@@ -133,12 +164,6 @@ impl<'tcx> InherentOverlapChecker<'tcx> {\n \n         let impls = self.tcx.inherent_impls(id.def_id);\n \n-        // If there is only one inherent impl block,\n-        // there is nothing to overlap check it with\n-        if impls.len() <= 1 {\n-            return;\n-        }\n-\n         let overlap_mode = OverlapMode::get(self.tcx, id.def_id.to_def_id());\n \n         let impls_items = impls\n@@ -152,6 +177,8 @@ impl<'tcx> InherentOverlapChecker<'tcx> {\n         const ALLOCATING_ALGO_THRESHOLD: usize = 500;\n         if impls.len() < ALLOCATING_ALGO_THRESHOLD {\n             for (i, &(&impl1_def_id, impl_items1)) in impls_items.iter().enumerate() {\n+                self.check_for_duplicate_items_in_impl(impl1_def_id);\n+\n                 for &(&impl2_def_id, impl_items2) in &impls_items[(i + 1)..] {\n                     if self.impls_have_common_items(impl_items1, impl_items2) {\n                         self.check_for_overlapping_inherent_impls(\n@@ -290,6 +317,8 @@ impl<'tcx> InherentOverlapChecker<'tcx> {\n                 impl_blocks.sort_unstable();\n                 for (i, &impl1_items_idx) in impl_blocks.iter().enumerate() {\n                     let &(&impl1_def_id, impl_items1) = &impls_items[impl1_items_idx];\n+                    self.check_for_duplicate_items_in_impl(impl1_def_id);\n+\n                     for &impl2_items_idx in impl_blocks[(i + 1)..].iter() {\n                         let &(&impl2_def_id, impl_items2) = &impls_items[impl2_items_idx];\n                         if self.impls_have_common_items(impl_items1, impl_items2) {"}, {"sha": "a84257b939c529cd0d30b836b5faab9529ea0ba9", "filename": "compiler/rustc_hir_analysis/src/impl_wf_check.rs", "status": "modified", "additions": 1, "deletions": 39, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/112ce807261d46befe78b947944c02ecca829a7d/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/112ce807261d46befe78b947944c02ecca829a7d/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check.rs?ref=112ce807261d46befe78b947944c02ecca829a7d", "patch": "@@ -11,16 +11,14 @@\n use crate::constrained_generic_params as cgp;\n use min_specialization::check_min_specialization;\n \n-use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::struct_span_err;\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::LocalDefId;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, TyCtxt, TypeVisitable};\n use rustc_span::{Span, Symbol};\n \n-use std::collections::hash_map::Entry::{Occupied, Vacant};\n-\n mod min_specialization;\n \n /// Checks that all the type/lifetime parameters on an impl also\n@@ -59,7 +57,6 @@ fn check_mod_impl_wf(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {\n     for id in module.items() {\n         if matches!(tcx.def_kind(id.def_id), DefKind::Impl) {\n             enforce_impl_params_are_constrained(tcx, id.def_id.def_id);\n-            enforce_impl_items_are_distinct(tcx, id.def_id.def_id);\n             if min_specialization {\n                 check_min_specialization(tcx, id.def_id.def_id);\n             }\n@@ -194,38 +191,3 @@ fn report_unused_parameter(tcx: TyCtxt<'_>, span: Span, kind: &str, name: Symbol\n     }\n     err.emit();\n }\n-\n-/// Enforce that we do not have two items in an impl with the same name.\n-fn enforce_impl_items_are_distinct(tcx: TyCtxt<'_>, impl_def_id: LocalDefId) {\n-    if tcx.impl_trait_ref(impl_def_id).is_some() {\n-        return;\n-    }\n-    let mut seen_type_items = FxHashMap::default();\n-    let mut seen_value_items = FxHashMap::default();\n-    for &impl_item_ref in tcx.associated_item_def_ids(impl_def_id) {\n-        let impl_item = tcx.associated_item(impl_item_ref);\n-        let seen_items = match impl_item.kind {\n-            ty::AssocKind::Type => &mut seen_type_items,\n-            _ => &mut seen_value_items,\n-        };\n-        let span = tcx.def_span(impl_item_ref);\n-        let ident = impl_item.ident(tcx);\n-        match seen_items.entry(ident.normalize_to_macros_2_0()) {\n-            Occupied(entry) => {\n-                let mut err = struct_span_err!(\n-                    tcx.sess,\n-                    span,\n-                    E0201,\n-                    \"duplicate definitions with name `{}`:\",\n-                    ident\n-                );\n-                err.span_label(*entry.get(), format!(\"previous definition of `{}` here\", ident));\n-                err.span_label(span, \"duplicate definition\");\n-                err.emit();\n-            }\n-            Vacant(entry) => {\n-                entry.insert(span);\n-            }\n-        }\n-    }\n-}"}, {"sha": "0b96a6bd7c0093b6cfb2cd1c5e1061eaa116291b", "filename": "src/test/ui/associated-item/associated-item-duplicate-names-2.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/112ce807261d46befe78b947944c02ecca829a7d/src%2Ftest%2Fui%2Fassociated-item%2Fassociated-item-duplicate-names-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/112ce807261d46befe78b947944c02ecca829a7d/src%2Ftest%2Fui%2Fassociated-item%2Fassociated-item-duplicate-names-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-item%2Fassociated-item-duplicate-names-2.stderr?ref=112ce807261d46befe78b947944c02ecca829a7d", "patch": "@@ -1,11 +1,11 @@\n-error[E0201]: duplicate definitions with name `bar`:\n+error[E0592]: duplicate definitions with name `bar`\n   --> $DIR/associated-item-duplicate-names-2.rs:5:5\n    |\n LL |     const bar: bool = true;\n-   |     --------------- previous definition of `bar` here\n+   |     --------------- other definition for `bar`\n LL |     fn bar() {}\n-   |     ^^^^^^^^ duplicate definition\n+   |     ^^^^^^^^ duplicate definitions for `bar`\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0201`.\n+For more information about this error, try `rustc --explain E0592`."}, {"sha": "328d54d5ac41188e8e7d1f0e7eb455d4d302c8d7", "filename": "src/test/ui/associated-item/impl-duplicate-methods.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/112ce807261d46befe78b947944c02ecca829a7d/src%2Ftest%2Fui%2Fassociated-item%2Fimpl-duplicate-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/112ce807261d46befe78b947944c02ecca829a7d/src%2Ftest%2Fui%2Fassociated-item%2Fimpl-duplicate-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-item%2Fimpl-duplicate-methods.rs?ref=112ce807261d46befe78b947944c02ecca829a7d", "patch": "@@ -3,7 +3,7 @@ struct Foo;\n impl Foo {\n     fn orange(&self) {}\n     fn orange(&self) {}\n-    //~^ ERROR duplicate definition\n+    //~^ ERROR duplicate definitions with name `orange` [E0592]\n }\n \n fn main() {}", "previous_filename": "src/test/ui/impl-duplicate-methods.rs"}, {"sha": "6f753845ac85a9db6bdd304d0ed0eaa807282f97", "filename": "src/test/ui/associated-item/impl-duplicate-methods.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/112ce807261d46befe78b947944c02ecca829a7d/src%2Ftest%2Fui%2Fassociated-item%2Fimpl-duplicate-methods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/112ce807261d46befe78b947944c02ecca829a7d/src%2Ftest%2Fui%2Fassociated-item%2Fimpl-duplicate-methods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-item%2Fimpl-duplicate-methods.stderr?ref=112ce807261d46befe78b947944c02ecca829a7d", "patch": "@@ -0,0 +1,11 @@\n+error[E0592]: duplicate definitions with name `orange`\n+  --> $DIR/impl-duplicate-methods.rs:5:5\n+   |\n+LL |     fn orange(&self) {}\n+   |     ---------------- other definition for `orange`\n+LL |     fn orange(&self) {}\n+   |     ^^^^^^^^^^^^^^^^ duplicate definitions for `orange`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0592`."}, {"sha": "04b37091b2f16cd1a520bf06ae46b4eb8ba6ca7d", "filename": "src/test/ui/error-codes/E0201.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/112ce807261d46befe78b947944c02ecca829a7d/src%2Ftest%2Fui%2Ferror-codes%2FE0201.rs", "raw_url": "https://github.com/rust-lang/rust/raw/112ce807261d46befe78b947944c02ecca829a7d/src%2Ftest%2Fui%2Ferror-codes%2FE0201.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0201.rs?ref=112ce807261d46befe78b947944c02ecca829a7d", "patch": "@@ -2,7 +2,7 @@ struct Foo(u8);\n \n impl Foo {\n     fn bar(&self) -> bool { self.0 > 5 }\n-    fn bar() {} //~ ERROR E0201\n+    fn bar() {} //~ ERROR E0592\n }\n \n trait Baz {"}, {"sha": "608ff691776945ee338e540c7a04d87c6fe1ce31", "filename": "src/test/ui/error-codes/E0201.stderr", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/112ce807261d46befe78b947944c02ecca829a7d/src%2Ftest%2Fui%2Ferror-codes%2FE0201.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/112ce807261d46befe78b947944c02ecca829a7d/src%2Ftest%2Fui%2Ferror-codes%2FE0201.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0201.stderr?ref=112ce807261d46befe78b947944c02ecca829a7d", "patch": "@@ -21,14 +21,15 @@ LL |     type Quux = u32;\n LL |     type Quux = u32;\n    |     ^^^^^^^^^^^^^^^^ duplicate definition\n \n-error[E0201]: duplicate definitions with name `bar`:\n+error[E0592]: duplicate definitions with name `bar`\n   --> $DIR/E0201.rs:5:5\n    |\n LL |     fn bar(&self) -> bool { self.0 > 5 }\n-   |     --------------------- previous definition of `bar` here\n+   |     --------------------- other definition for `bar`\n LL |     fn bar() {}\n-   |     ^^^^^^^^ duplicate definition\n+   |     ^^^^^^^^ duplicate definitions for `bar`\n \n error: aborting due to 3 previous errors\n \n-For more information about this error, try `rustc --explain E0201`.\n+Some errors have detailed explanations: E0201, E0592.\n+For more information about an error, try `rustc --explain E0201`."}, {"sha": "c19702a5bf0cf26c13e7d27e6bbcfd24a0b3312b", "filename": "src/test/ui/impl-duplicate-methods.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4891d57f7aab37b5d6a84f2901c0bb8903111d53/src%2Ftest%2Fui%2Fimpl-duplicate-methods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4891d57f7aab37b5d6a84f2901c0bb8903111d53/src%2Ftest%2Fui%2Fimpl-duplicate-methods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-duplicate-methods.stderr?ref=4891d57f7aab37b5d6a84f2901c0bb8903111d53", "patch": "@@ -1,11 +0,0 @@\n-error[E0201]: duplicate definitions with name `orange`:\n-  --> $DIR/impl-duplicate-methods.rs:5:5\n-   |\n-LL |     fn orange(&self) {}\n-   |     ---------------- previous definition of `orange` here\n-LL |     fn orange(&self) {}\n-   |     ^^^^^^^^^^^^^^^^ duplicate definition\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0201`."}, {"sha": "8c7303f3c3c51faefd1bb1abcfe1a781495195f2", "filename": "src/test/ui/issues/issue-4265.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/112ce807261d46befe78b947944c02ecca829a7d/src%2Ftest%2Fui%2Fissues%2Fissue-4265.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/112ce807261d46befe78b947944c02ecca829a7d/src%2Ftest%2Fui%2Fissues%2Fissue-4265.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-4265.stderr?ref=112ce807261d46befe78b947944c02ecca829a7d", "patch": "@@ -1,12 +1,12 @@\n-error[E0201]: duplicate definitions with name `bar`:\n+error[E0592]: duplicate definitions with name `bar`\n   --> $DIR/issue-4265.rs:10:5\n    |\n LL |     fn bar() {\n-   |     -------- previous definition of `bar` here\n+   |     -------- other definition for `bar`\n ...\n LL |     fn bar() {\n-   |     ^^^^^^^^ duplicate definition\n+   |     ^^^^^^^^ duplicate definitions for `bar`\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0201`.\n+For more information about this error, try `rustc --explain E0592`."}, {"sha": "dd616c4a5e75d43cb50cdae987ae725879363fe6", "filename": "src/test/ui/methods/method-macro-backtrace.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/112ce807261d46befe78b947944c02ecca829a7d/src%2Ftest%2Fui%2Fmethods%2Fmethod-macro-backtrace.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/112ce807261d46befe78b947944c02ecca829a7d/src%2Ftest%2Fui%2Fmethods%2Fmethod-macro-backtrace.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-macro-backtrace.stderr?ref=112ce807261d46befe78b947944c02ecca829a7d", "patch": "@@ -1,11 +1,11 @@\n-error[E0201]: duplicate definitions with name `bar`:\n+error[E0592]: duplicate definitions with name `bar`\n   --> $DIR/method-macro-backtrace.rs:22:5\n    |\n LL |     fn bar(&self) { }\n-   |     ------------- previous definition of `bar` here\n+   |     ------------- other definition for `bar`\n LL |     fn bar(&self) { }\n-   |     ^^^^^^^^^^^^^ duplicate definition\n+   |     ^^^^^^^^^^^^^ duplicate definitions for `bar`\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0201`.\n+For more information about this error, try `rustc --explain E0592`."}]}