{"sha": "68d50b59280030f515269d3fc75695d2c29db7cc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4ZDUwYjU5MjgwMDMwZjUxNTI2OWQzZmM3NTY5NWQyYzI5ZGI3Y2M=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-09-21T15:46:18Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-09-21T15:46:44Z"}, "message": "Add target_triple to session::options. Use host triple by default, accept --target on command line.", "tree": {"sha": "39093ce37146487920a668c9c41f1af9d7475f8d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/39093ce37146487920a668c9c41f1af9d7475f8d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/68d50b59280030f515269d3fc75695d2c29db7cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/68d50b59280030f515269d3fc75695d2c29db7cc", "html_url": "https://github.com/rust-lang/rust/commit/68d50b59280030f515269d3fc75695d2c29db7cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/68d50b59280030f515269d3fc75695d2c29db7cc/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07eb29dbce6d1da301ce9a0d499e3e2237fa986d", "url": "https://api.github.com/repos/rust-lang/rust/commits/07eb29dbce6d1da301ce9a0d499e3e2237fa986d", "html_url": "https://github.com/rust-lang/rust/commit/07eb29dbce6d1da301ce9a0d499e3e2237fa986d"}], "stats": {"total": 73, "additions": 45, "deletions": 28}, "files": [{"sha": "11f0a0556d02c06b29cf540910bcd75afaaa2c52", "filename": "configure", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/68d50b59280030f515269d3fc75695d2c29db7cc/configure", "raw_url": "https://github.com/rust-lang/rust/raw/68d50b59280030f515269d3fc75695d2c29db7cc/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=68d50b59280030f515269d3fc75695d2c29db7cc", "patch": "@@ -175,20 +175,6 @@ then\n     exit 0\n fi\n \n-step_msg \"making directories\"\n-for i in \\\n-    doc \\\n-    rt rt/isaac rt/bigint rt/sync rt/test rt/arch/i386 \\\n-    rt/libuv rt/libuv/src/ares rt/libuv/src/eio rt/libuv/src/ev \\\n-    rustllvm \\\n-    dl stage0 stage1 stage2 stage3 \\\n-    stage0/lib stage1/lib stage2/lib stage3/lib \\\n-    test/run-pass test/run-fail test/compile-fail \\\n-    test/bench test/perf test/pretty\n-do\n-    make_dir $i\n-done\n-\n step_msg \"writing out basic parameters\"\n putvar CFG_SRC_DIR\n putvar CFG_BUILD_DIR\n@@ -316,6 +302,19 @@ perl -i.bak -p -e 's@ ([a-zA-Z]):[/\\\\]@ /\\1/@go;' \\\n                -e 's@\\\\@/@go;' config.mk\n rm -f config.mk.bak\n \n+step_msg \"making directories\"\n+for i in \\\n+    doc \\\n+    rt rt/isaac rt/bigint rt/sync rt/test rt/arch/i386 \\\n+    rt/libuv rt/libuv/src/ares rt/libuv/src/eio rt/libuv/src/ev \\\n+    rustllvm \\\n+    dl stage{0,1,2,3}{,/lib,/lib/$CFG_LLVM_TRIPLE} \\\n+    test/run-pass test/run-fail test/compile-fail \\\n+    test/bench test/perf test/pretty\n+do\n+    make_dir $i\n+done\n+\n copy ${CFG_SRC_DIR}Makefile.in ./Makefile\n \n copy ${CFG_SRC_DIR}src/rt/libuv/Makefile rt/libuv/Makefile"}, {"sha": "9ed221953f0d3bb821de9c5d877ebe4c5058ceb2", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 31, "deletions": 14, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/68d50b59280030f515269d3fc75695d2c29db7cc/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68d50b59280030f515269d3fc75695d2c29db7cc/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=68d50b59280030f515269d3fc75695d2c29db7cc", "patch": "@@ -32,10 +32,12 @@ fn default_configuration(sess: session::session, argv0: str, input: str) ->\n     let mk = attr::mk_name_value_item_str;\n \n     ret [ // Target bindings.\n-         mk(\"target_os\", std::os::target_os()), mk(\"target_arch\", \"x86\"),\n+         mk(\"target_os\", std::os::target_os()),\n+         mk(\"target_arch\", \"x86\"),\n          mk(\"target_libc\", libc),\n          // Build bindings.\n-         mk(\"build_compiler\", argv0), mk(\"build_input\", input)];\n+         mk(\"build_compiler\", argv0),\n+         mk(\"build_input\", input)];\n }\n \n fn build_configuration(sess: session::session, argv0: str, input: str) ->\n@@ -224,6 +226,7 @@ fn version(argv0: str) {\n     let env_vers = #env[\"CFG_VERSION\"];\n     if str::byte_len(env_vers) != 0u { vers = env_vers; }\n     io::stdout().write_str(#fmt[\"%s %s\\n\", argv0, vers]);\n+    io::stdout().write_str(#fmt[\"host: %s\\n\", host_triple()]);\n }\n \n fn usage(argv0: str) {\n@@ -257,6 +260,7 @@ options:\n     --time-passes      time the individual phases of the compiler\n     --time-llvm-passes time the individual phases of the LLVM backend\n     --sysroot <path>   override the system root (default: rustc's directory)\n+    --target <triple>  target to compile for (default: host triple)\n     --no-typestate     don't run the typestate pass (unsafe!)\n     --test             build test harness\n     --gc               garbage collect shared data (experimental/temporary)\n@@ -295,26 +299,25 @@ fn get_default_sysroot(binary: str) -> str {\n     ret dirname;\n }\n \n-fn build_target_config() -> @session::config {\n-    let triple: str = str::str_from_cstr(llvm::llvm::LLVMRustGetHostTriple());\n+fn build_target_config(sopts: @session::options) -> @session::config {\n     let target_cfg: @session::config =\n-        @{os: get_os(triple),\n-          arch: get_arch(triple),\n+        @{os: get_os(sopts.target_triple),\n+          arch: get_arch(sopts.target_triple),\n           int_type: ast::ty_i32,\n           uint_type: ast::ty_u32,\n           float_type: ast::ty_f64};\n     ret target_cfg;\n }\n \n+fn host_triple() -> str {\n+    str::str_from_cstr(llvm::llvm::LLVMRustGetHostTriple())\n+}\n+\n fn build_session_options(binary: str, match: getopts::match, binary_dir: str)\n    -> @session::options {\n     let library = opt_present(match, \"lib\");\n     let static = opt_present(match, \"static\");\n \n-    let library_search_paths = [binary_dir + \"/lib\"];\n-    let lsp_vec = getopts::opt_strs(match, \"L\");\n-    for lsp: str in lsp_vec { library_search_paths += [lsp]; }\n-\n     let parse_only = opt_present(match, \"parse-only\");\n     let no_trans = opt_present(match, \"no-trans\");\n \n@@ -336,6 +339,7 @@ fn build_session_options(binary: str, match: getopts::match, binary_dir: str)\n     let time_llvm_passes = opt_present(match, \"time-llvm-passes\");\n     let run_typestate = !opt_present(match, \"no-typestate\");\n     let sysroot_opt = getopts::opt_maybe_str(match, \"sysroot\");\n+    let target_opt = getopts::opt_maybe_str(match, \"target\");\n     let opt_level: uint =\n         if opt_present(match, \"O\") {\n             if opt_present(match, \"OptLevel\") {\n@@ -361,6 +365,17 @@ fn build_session_options(binary: str, match: getopts::match, binary_dir: str)\n           none. { get_default_sysroot(binary) }\n           some(s) { s }\n         };\n+    let target =\n+        alt target_opt {\n+            none. { host_triple() }\n+            some(s) { s }\n+        };\n+\n+    let library_search_paths = [binary_dir + \"/lib\", // FIXME: legacy\n+                                binary_dir + \"/lib/\" + target ];\n+    let lsp_vec = getopts::opt_strs(match, \"L\");\n+    for lsp: str in lsp_vec { library_search_paths += [lsp]; }\n+\n     let cfg = parse_cfgspecs(getopts::opt_strs(match, \"cfg\"));\n     let test = opt_present(match, \"test\");\n     let do_gc = opt_present(match, \"gc\");\n@@ -378,6 +393,7 @@ fn build_session_options(binary: str, match: getopts::match, binary_dir: str)\n           output_type: output_type,\n           library_search_paths: library_search_paths,\n           sysroot: sysroot,\n+          target_triple: target,\n           cfg: cfg,\n           test: test,\n           parse_only: parse_only,\n@@ -387,7 +403,7 @@ fn build_session_options(binary: str, match: getopts::match, binary_dir: str)\n }\n \n fn build_session(sopts: @session::options) -> session::session {\n-    let target_cfg = build_target_config();\n+    let target_cfg = build_target_config(sopts);\n     let cstore = cstore::mk_cstore();\n     ret session::session(target_cfg, sopts, cstore,\n                          @{cm: codemap::new_codemap(), mutable next_id: 0},\n@@ -412,9 +428,10 @@ fn opts() -> [getopts::opt] {\n          optflag(\"ls\"), optflag(\"parse-only\"), optflag(\"no-trans\"),\n          optflag(\"O\"), optopt(\"OptLevel\"), optmulti(\"L\"), optflag(\"S\"),\n          optflag(\"c\"), optopt(\"o\"), optflag(\"g\"), optflag(\"save-temps\"),\n-         optopt(\"sysroot\"), optflag(\"stats\"), optflag(\"time-passes\"),\n-         optflag(\"time-llvm-passes\"), optflag(\"no-typestate\"),\n-         optflag(\"noverify\"), optmulti(\"cfg\"), optflag(\"test\"),\n+         optopt(\"sysroot\"), optopt(\"target\"), optflag(\"stats\"),\n+         optflag(\"time-passes\"), optflag(\"time-llvm-passes\"),\n+         optflag(\"no-typestate\"), optflag(\"noverify\"),\n+         optmulti(\"cfg\"), optflag(\"test\"),\n          optflag(\"lib\"), optflag(\"static\"), optflag(\"gc\")];\n }\n "}, {"sha": "9324a4dd45ab24ce87a683c5a2e0fb78e569ce07", "filename": "src/comp/driver/session.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68d50b59280030f515269d3fc75695d2c29db7cc/src%2Fcomp%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68d50b59280030f515269d3fc75695d2c29db7cc/src%2Fcomp%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Fsession.rs?ref=68d50b59280030f515269d3fc75695d2c29db7cc", "patch": "@@ -34,6 +34,7 @@ type options =\n      output_type: back::link::output_type,\n      library_search_paths: [str],\n      sysroot: str,\n+     target_triple: str,\n      cfg: ast::crate_cfg,\n      test: bool,\n      parse_only: bool,"}]}