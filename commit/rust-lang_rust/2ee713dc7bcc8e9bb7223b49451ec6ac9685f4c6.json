{"sha": "2ee713dc7bcc8e9bb7223b49451ec6ac9685f4c6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlZTcxM2RjN2JjYzhlOWJiNzIyM2I0OTQ1MWVjNmFjOTY4NWY0YzY=", "commit": {"author": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2019-01-19T12:13:06Z"}, "committer": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2019-01-19T12:18:31Z"}, "message": "Catch up with `format_args` change\n\nCatches up with a change in rust-lang/rust#57537\n\nHappened to fix a bug in `expect_fun_call`, that is the lint ignores more than\none arguments to `format`.", "tree": {"sha": "8f2692778b5a0e7e0c16415117768de37c05837d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f2692778b5a0e7e0c16415117768de37c05837d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ee713dc7bcc8e9bb7223b49451ec6ac9685f4c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ee713dc7bcc8e9bb7223b49451ec6ac9685f4c6", "html_url": "https://github.com/rust-lang/rust/commit/2ee713dc7bcc8e9bb7223b49451ec6ac9685f4c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ee713dc7bcc8e9bb7223b49451ec6ac9685f4c6/comments", "author": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "235f96005cb3c94f4f3d185e7c3d4ffaa08685aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/235f96005cb3c94f4f3d185e7c3d4ffaa08685aa", "html_url": "https://github.com/rust-lang/rust/commit/235f96005cb3c94f4f3d185e7c3d4ffaa08685aa"}], "stats": {"total": 49, "additions": 31, "deletions": 18}, "files": [{"sha": "90e19af15d074646ee24d8cb85274483b8238dbd", "filename": "clippy_lints/src/format.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2ee713dc7bcc8e9bb7223b49451ec6ac9685f4c6/clippy_lints%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ee713dc7bcc8e9bb7223b49451ec6ac9685f4c6/clippy_lints%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformat.rs?ref=2ee713dc7bcc8e9bb7223b49451ec6ac9685f4c6", "patch": "@@ -53,12 +53,17 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                 ExprKind::Call(ref fun, ref args) => {\n                     if_chain! {\n                         if let ExprKind::Path(ref qpath) = fun.node;\n-                        if args.len() == 3;\n                         if let Some(fun_def_id) = opt_def_id(resolve_node(cx, qpath, fun.hir_id));\n-                        if match_def_path(cx.tcx, fun_def_id, &paths::FMT_ARGUMENTS_NEWV1FORMATTED);\n+                        let new_v1 = match_def_path(cx.tcx, fun_def_id, &paths::FMT_ARGUMENTS_NEWV1);\n+                        let new_v1_fmt = match_def_path(\n+                            cx.tcx,\n+                            fun_def_id,\n+                            &paths::FMT_ARGUMENTS_NEWV1FORMATTED\n+                        );\n+                        if new_v1 || new_v1_fmt;\n                         if check_single_piece(&args[0]);\n                         if let Some(format_arg) = get_single_string_arg(cx, &args[1]);\n-                        if check_unformatted(&args[2]);\n+                        if new_v1 || check_unformatted(&args[2]);\n                         if let ExprKind::AddrOf(_, ref format_arg) = format_arg.node;\n                         then {\n                             let (message, sugg) = if_chain! {"}, {"sha": "14fdd6e6225d10154d31d7632a85d9899160e92a", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/2ee713dc7bcc8e9bb7223b49451ec6ac9685f4c6/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ee713dc7bcc8e9bb7223b49451ec6ac9685f4c6/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=2ee713dc7bcc8e9bb7223b49451ec6ac9685f4c6", "patch": "@@ -1148,7 +1148,7 @@ fn lint_or_fun_call(cx: &LateContext<'_, '_>, expr: &hir::Expr, method_span: Spa\n \n /// Checks for the `EXPECT_FUN_CALL` lint.\n fn lint_expect_fun_call(cx: &LateContext<'_, '_>, expr: &hir::Expr, method_span: Span, name: &str, args: &[hir::Expr]) {\n-    fn extract_format_args(arg: &hir::Expr) -> Option<&hir::HirVec<hir::Expr>> {\n+    fn extract_format_args(arg: &hir::Expr) -> Option<(&hir::Expr, &hir::Expr)> {\n         let arg = match &arg.node {\n             hir::ExprKind::AddrOf(_, expr) => expr,\n             hir::ExprKind::MethodCall(method_name, _, args)\n@@ -1161,8 +1161,8 @@ fn lint_expect_fun_call(cx: &LateContext<'_, '_>, expr: &hir::Expr, method_span:\n \n         if let hir::ExprKind::Call(ref inner_fun, ref inner_args) = arg.node {\n             if is_expn_of(inner_fun.span, \"format\").is_some() && inner_args.len() == 1 {\n-                if let hir::ExprKind::Call(_, ref format_args) = inner_args[0].node {\n-                    return Some(format_args);\n+                if let hir::ExprKind::Call(_, format_args) = &inner_args[0].node {\n+                    return Some((&format_args[0], &format_args[1]));\n                 }\n             }\n         }\n@@ -1174,17 +1174,19 @@ fn lint_expect_fun_call(cx: &LateContext<'_, '_>, expr: &hir::Expr, method_span:\n         cx: &LateContext<'_, '_>,\n         a: &hir::Expr,\n         applicability: &mut Applicability,\n-    ) -> String {\n+    ) -> Vec<String> {\n         if let hir::ExprKind::AddrOf(_, ref format_arg) = a.node {\n             if let hir::ExprKind::Match(ref format_arg_expr, _, _) = format_arg.node {\n                 if let hir::ExprKind::Tup(ref format_arg_expr_tup) = format_arg_expr.node {\n-                    return snippet_with_applicability(cx, format_arg_expr_tup[0].span, \"..\", applicability)\n-                        .into_owned();\n+                    return format_arg_expr_tup\n+                        .iter()\n+                        .map(|a| snippet_with_applicability(cx, a.span, \"..\", applicability).into_owned())\n+                        .collect();\n                 }\n             }\n         };\n \n-        snippet(cx, a.span, \"..\").into_owned()\n+        unreachable!()\n     }\n \n     fn check_general_case(\n@@ -1233,14 +1235,11 @@ fn lint_expect_fun_call(cx: &LateContext<'_, '_>, expr: &hir::Expr, method_span:\n         };\n         let span_replace_word = method_span.with_hi(span.hi());\n \n-        if let Some(format_args) = extract_format_args(arg) {\n+        if let Some((fmt_spec, fmt_args)) = extract_format_args(arg) {\n             let mut applicability = Applicability::MachineApplicable;\n-            let args_len = format_args.len();\n-            let args: Vec<String> = format_args\n-                .into_iter()\n-                .take(args_len - 1)\n-                .map(|a| generate_format_arg_snippet(cx, a, &mut applicability))\n-                .collect();\n+            let mut args = vec![snippet(cx, fmt_spec.span, \"..\").into_owned()];\n+\n+            args.extend(generate_format_arg_snippet(cx, fmt_args, &mut applicability));\n \n             let sugg = args.join(\", \");\n "}, {"sha": "d2dc2812575b4140f1d5d95b3e68a4859f004aba", "filename": "clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2ee713dc7bcc8e9bb7223b49451ec6ac9685f4c6/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ee713dc7bcc8e9bb7223b49451ec6ac9685f4c6/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=2ee713dc7bcc8e9bb7223b49451ec6ac9685f4c6", "patch": "@@ -26,6 +26,7 @@ pub const DOUBLE_ENDED_ITERATOR: [&str; 4] = [\"core\", \"iter\", \"traits\", \"DoubleE\n pub const DROP: [&str; 3] = [\"core\", \"mem\", \"drop\"];\n pub const DURATION: [&str; 3] = [\"core\", \"time\", \"Duration\"];\n pub const EARLY_CONTEXT: [&str; 4] = [\"rustc\", \"lint\", \"context\", \"EarlyContext\"];\n+pub const FMT_ARGUMENTS_NEWV1: [&str; 4] = [\"core\", \"fmt\", \"Arguments\", \"new_v1\"];\n pub const FMT_ARGUMENTS_NEWV1FORMATTED: [&str; 4] = [\"core\", \"fmt\", \"Arguments\", \"new_v1_formatted\"];\n pub const FROM_FROM: [&str; 4] = [\"core\", \"convert\", \"From\", \"from\"];\n pub const FROM_TRAIT: [&str; 3] = [\"core\", \"convert\", \"From\"];"}, {"sha": "7f0ca0fe8095bbf0db7ef13ca92829012bac3e84", "filename": "tests/ui/expect_fun_call.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ee713dc7bcc8e9bb7223b49451ec6ac9685f4c6/tests%2Fui%2Fexpect_fun_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ee713dc7bcc8e9bb7223b49451ec6ac9685f4c6/tests%2Fui%2Fexpect_fun_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexpect_fun_call.rs?ref=2ee713dc7bcc8e9bb7223b49451ec6ac9685f4c6", "patch": "@@ -57,6 +57,8 @@ fn expect_fun_call() {\n \n     Some(\"foo\").expect({ &format!(\"error\") });\n     Some(\"foo\").expect(format!(\"error\").as_ref());\n+\n+    Some(\"foo\").expect(format!(\"{} {}\", 1, 2).as_ref());\n }\n \n fn main() {}"}, {"sha": "a60bd7e4ed3bf8bb05d0d892e00dc6d4ae81890b", "filename": "tests/ui/expect_fun_call.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2ee713dc7bcc8e9bb7223b49451ec6ac9685f4c6/tests%2Fui%2Fexpect_fun_call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ee713dc7bcc8e9bb7223b49451ec6ac9685f4c6/tests%2Fui%2Fexpect_fun_call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexpect_fun_call.stderr?ref=2ee713dc7bcc8e9bb7223b49451ec6ac9685f4c6", "patch": "@@ -36,5 +36,11 @@ error: use of `expect` followed by a function call\n LL |     Some(\"foo\").expect(format!(\"error\").as_ref());\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| panic!(\"error\"))`\n \n-error: aborting due to 6 previous errors\n+error: use of `expect` followed by a function call\n+  --> $DIR/expect_fun_call.rs:61:17\n+   |\n+LL |     Some(\"foo\").expect(format!(\"{} {}\", 1, 2).as_ref());\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| panic!(\"{} {}\", 1, 2))`\n+\n+error: aborting due to 7 previous errors\n "}]}