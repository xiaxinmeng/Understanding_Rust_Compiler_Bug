{"sha": "cc35c787aa67e325901ca3af74699dc7727b764d", "node_id": "C_kwDOAAsO6NoAKGNjMzVjNzg3YWE2N2UzMjU5MDFjYTNhZjc0Njk5ZGM3NzI3Yjc2NGQ", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2022-07-17T23:39:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-17T23:39:58Z"}, "message": "Rollup merge of #99350 - compiler-errors:issue-99240, r=fee1-dead\n\nBe more precise when suggesting removal of parens on unit ctor\n\n* Fixes #99240 by only suggesting to remove parens on path exprs, not arbitrary expressions with enum type\n* Generalizes by suggesting removal of parens on unit struct, too, because why not?", "tree": {"sha": "dd2b5cf99626d67b782ea251943ff673e77f9bfd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd2b5cf99626d67b782ea251943ff673e77f9bfd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc35c787aa67e325901ca3af74699dc7727b764d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi1J3OCRBK7hj4Ov3rIwAA/ucIAJMwFqvQaRsIKLh2N8XeyjCk\nycZoJBmEpjio/eiSbz7VdfJ0HcqX2mE5t2WLWJYH/0HjGlPtz29gETvZ94SyWnfy\nSOcw5yeJbg+4FWL9LocjiLlMygzHUR29cKl3bLuxMvXXkQDOOJ2yheWNMwgAY8Bt\n0osxVHFkhpjRadSnhzbTTJCJhugja/XpAoDy6kQkoRqyiKffEA5FvzcbLA5ak/Xg\nuV7o10LZQOnt/bca1FFwO6qcY+DN6n5QvoAi30fdPpCAq1fV4GhElnBzmw4SwLCV\nFb9W8Pwaf9ICLk/68ReC4OamUFN09ipRhHewty9MIfrb/RqGqrbg0RUNfAxW1Rk=\n=sKaD\n-----END PGP SIGNATURE-----\n", "payload": "tree dd2b5cf99626d67b782ea251943ff673e77f9bfd\nparent 796bc7cae364b39ff7e5139842b51dd9b764060d\nparent 7a45a6041888c15166a9a0338483c2339da6bdf4\nauthor Yuki Okushi <jtitor@2k36.org> 1658101198 +0900\ncommitter GitHub <noreply@github.com> 1658101198 +0900\n\nRollup merge of #99350 - compiler-errors:issue-99240, r=fee1-dead\n\nBe more precise when suggesting removal of parens on unit ctor\n\n* Fixes #99240 by only suggesting to remove parens on path exprs, not arbitrary expressions with enum type\n* Generalizes by suggesting removal of parens on unit struct, too, because why not?\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc35c787aa67e325901ca3af74699dc7727b764d", "html_url": "https://github.com/rust-lang/rust/commit/cc35c787aa67e325901ca3af74699dc7727b764d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc35c787aa67e325901ca3af74699dc7727b764d/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "796bc7cae364b39ff7e5139842b51dd9b764060d", "url": "https://api.github.com/repos/rust-lang/rust/commits/796bc7cae364b39ff7e5139842b51dd9b764060d", "html_url": "https://github.com/rust-lang/rust/commit/796bc7cae364b39ff7e5139842b51dd9b764060d"}, {"sha": "7a45a6041888c15166a9a0338483c2339da6bdf4", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a45a6041888c15166a9a0338483c2339da6bdf4", "html_url": "https://github.com/rust-lang/rust/commit/7a45a6041888c15166a9a0338483c2339da6bdf4"}], "stats": {"total": 188, "additions": 136, "deletions": 52}, "files": [{"sha": "e0179bd3ed1e85afc11a512ad3dc452dcf1a0621", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc35c787aa67e325901ca3af74699dc7727b764d/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc35c787aa67e325901ca3af74699dc7727b764d/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=cc35c787aa67e325901ca3af74699dc7727b764d", "patch": "@@ -211,6 +211,10 @@ pub fn path_to_string(segment: &hir::Path<'_>) -> String {\n     to_string(NO_ANN, |s| s.print_path(segment, false))\n }\n \n+pub fn qpath_to_string(segment: &hir::QPath<'_>) -> String {\n+    to_string(NO_ANN, |s| s.print_qpath(segment, false))\n+}\n+\n pub fn fn_to_string(\n     decl: &hir::FnDecl<'_>,\n     header: hir::FnHeader,"}, {"sha": "00c8aa3a1bbdae7df4c5817ddea93d464b1d5add", "filename": "compiler/rustc_typeck/src/check/callee.rs", "status": "modified", "additions": 20, "deletions": 15, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/cc35c787aa67e325901ca3af74699dc7727b764d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc35c787aa67e325901ca3af74699dc7727b764d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs?ref=cc35c787aa67e325901ca3af74699dc7727b764d", "patch": "@@ -4,7 +4,7 @@ use crate::type_error_struct;\n \n use rustc_errors::{struct_span_err, Applicability, Diagnostic};\n use rustc_hir as hir;\n-use rustc_hir::def::{Namespace, Res};\n+use rustc_hir::def::{self, Namespace, Res};\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_infer::{\n     infer,\n@@ -390,17 +390,22 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 (fn_sig, Some(def_id))\n             }\n             ty::FnPtr(sig) => (sig, None),\n-            ref t => {\n+            _ => {\n                 let mut unit_variant = None;\n-                let mut removal_span = call_expr.span;\n-                if let ty::Adt(adt_def, ..) = t\n-                    && adt_def.is_enum()\n-                    && let hir::ExprKind::Call(expr, _) = call_expr.kind\n+                if let hir::ExprKind::Path(qpath) = &callee_expr.kind\n+                    && let Res::Def(def::DefKind::Ctor(kind, def::CtorKind::Const), _)\n+                        = self.typeck_results.borrow().qpath_res(qpath, callee_expr.hir_id)\n+                    // Only suggest removing parens if there are no arguments\n+                    && arg_exprs.is_empty()\n                 {\n-                    removal_span =\n-                        expr.span.shrink_to_hi().to(call_expr.span.shrink_to_hi());\n+                    let descr = match kind {\n+                        def::CtorOf::Struct => \"struct\",\n+                        def::CtorOf::Variant => \"enum variant\",\n+                    };\n+                    let removal_span =\n+                        callee_expr.span.shrink_to_hi().to(call_expr.span.shrink_to_hi());\n                     unit_variant =\n-                        self.tcx.sess.source_map().span_to_snippet(expr.span).ok();\n+                        Some((removal_span, descr, rustc_hir_pretty::qpath_to_string(qpath)));\n                 }\n \n                 let callee_ty = self.resolve_vars_if_possible(callee_ty);\n@@ -410,8 +415,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     callee_ty,\n                     E0618,\n                     \"expected function, found {}\",\n-                    match unit_variant {\n-                        Some(ref path) => format!(\"enum variant `{path}`\"),\n+                    match &unit_variant {\n+                        Some((_, kind, path)) => format!(\"{kind} `{path}`\"),\n                         None => format!(\"`{callee_ty}`\"),\n                     }\n                 );\n@@ -423,11 +428,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     callee_expr.span,\n                 );\n \n-                if let Some(ref path) = unit_variant {\n+                if let Some((removal_span, kind, path)) = &unit_variant {\n                     err.span_suggestion_verbose(\n-                        removal_span,\n+                        *removal_span,\n                         &format!(\n-                            \"`{path}` is a unit variant, you need to write it without the parentheses\",\n+                            \"`{path}` is a unit {kind}, and does not take parentheses to be constructed\",\n                         ),\n                         \"\",\n                         Applicability::MachineApplicable,\n@@ -470,7 +475,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 if let Some(span) = self.tcx.hir().res_span(def) {\n                     let callee_ty = callee_ty.to_string();\n                     let label = match (unit_variant, inner_callee_path) {\n-                        (Some(path), _) => Some(format!(\"`{path}` defined here\")),\n+                        (Some((_, kind, path)), _) => Some(format!(\"{kind} `{path}` defined here\")),\n                         (_, Some(hir::QPath::Resolved(_, path))) => self\n                             .tcx\n                             .sess"}, {"sha": "2d22e9bc76e5ad11cb75602543ea4ef9c5ace6d3", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc35c787aa67e325901ca3af74699dc7727b764d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc35c787aa67e325901ca3af74699dc7727b764d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=cc35c787aa67e325901ca3af74699dc7727b764d", "patch": "@@ -531,7 +531,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 tcx.ty_error()\n             }\n             Res::Def(DefKind::Ctor(_, CtorKind::Fictive), _) => {\n-                report_unexpected_variant_res(tcx, res, expr.span);\n+                report_unexpected_variant_res(tcx, res, qpath, expr.span);\n                 tcx.ty_error()\n             }\n             _ => self.instantiate_value_path(segs, opt_ty, res, expr.span, expr.hir_id).0,"}, {"sha": "2b037c3fd2b0eaaf61a1699d43f4a076489c0e16", "filename": "compiler/rustc_typeck/src/check/mod.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cc35c787aa67e325901ca3af74699dc7727b764d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc35c787aa67e325901ca3af74699dc7727b764d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs?ref=cc35c787aa67e325901ca3af74699dc7727b764d", "patch": "@@ -863,17 +863,14 @@ fn bad_non_zero_sized_fields<'tcx>(\n     err.emit();\n }\n \n-fn report_unexpected_variant_res(tcx: TyCtxt<'_>, res: Res, span: Span) {\n+fn report_unexpected_variant_res(tcx: TyCtxt<'_>, res: Res, qpath: &hir::QPath<'_>, span: Span) {\n     struct_span_err!(\n         tcx.sess,\n         span,\n         E0533,\n-        \"expected unit struct, unit variant or constant, found {}{}\",\n+        \"expected unit struct, unit variant or constant, found {} `{}`\",\n         res.descr(),\n-        tcx.sess\n-            .source_map()\n-            .span_to_snippet(span)\n-            .map_or_else(|_| String::new(), |s| format!(\" `{s}`\",)),\n+        rustc_hir_pretty::qpath_to_string(qpath),\n     )\n     .emit();\n }"}, {"sha": "c7318cd6e531fd955b9102847a79061a3a699d9c", "filename": "compiler/rustc_typeck/src/check/pat.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cc35c787aa67e325901ca3af74699dc7727b764d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc35c787aa67e325901ca3af74699dc7727b764d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs?ref=cc35c787aa67e325901ca3af74699dc7727b764d", "patch": "@@ -183,7 +183,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             PatKind::TupleStruct(ref qpath, subpats, ddpos) => {\n                 self.check_pat_tuple_struct(pat, qpath, subpats, ddpos, expected, def_bm, ti)\n             }\n-            PatKind::Path(_) => self.check_pat_path(pat, path_res.unwrap(), expected, ti),\n+            PatKind::Path(ref qpath) => {\n+                self.check_pat_path(pat, qpath, path_res.unwrap(), expected, ti)\n+            }\n             PatKind::Struct(ref qpath, fields, has_rest_pat) => {\n                 self.check_pat_struct(pat, qpath, fields, has_rest_pat, expected, def_bm, ti)\n             }\n@@ -800,6 +802,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     fn check_pat_path<'b>(\n         &self,\n         pat: &Pat<'_>,\n+        qpath: &hir::QPath<'_>,\n         path_resolution: (Res, Option<Ty<'tcx>>, &'b [hir::PathSegment<'b>]),\n         expected: Ty<'tcx>,\n         ti: TopInfo<'tcx>,\n@@ -814,7 +817,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 return tcx.ty_error();\n             }\n             Res::Def(DefKind::AssocFn | DefKind::Ctor(_, CtorKind::Fictive | CtorKind::Fn), _) => {\n-                report_unexpected_variant_res(tcx, res, pat.span);\n+                report_unexpected_variant_res(tcx, res, qpath, pat.span);\n                 return tcx.ty_error();\n             }\n             Res::SelfCtor(..)"}, {"sha": "8f3688a2a0764e1703371c2ac507128565df8549", "filename": "src/test/ui/empty/empty-struct-unit-expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc35c787aa67e325901ca3af74699dc7727b764d/src%2Ftest%2Fui%2Fempty%2Fempty-struct-unit-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc35c787aa67e325901ca3af74699dc7727b764d/src%2Ftest%2Fui%2Fempty%2Fempty-struct-unit-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-struct-unit-expr.rs?ref=cc35c787aa67e325901ca3af74699dc7727b764d", "patch": "@@ -12,10 +12,10 @@ enum E {\n }\n \n fn main() {\n-    let e2 = Empty2(); //~ ERROR expected function, found `Empty2`\n+    let e2 = Empty2(); //~ ERROR expected function, found struct `Empty2`\n     let e4 = E::Empty4();\n     //~^ ERROR expected function, found enum variant `E::Empty4` [E0618]\n-    let xe2 = XEmpty2(); //~ ERROR expected function, found `empty_struct::XEmpty2`\n+    let xe2 = XEmpty2(); //~ ERROR expected function, found struct `XEmpty2`\n     let xe4 = XE::XEmpty4();\n     //~^ ERROR expected function, found enum variant `XE::XEmpty4` [E0618]\n }"}, {"sha": "e97209527fe34fdbd3680258406843adf7c89640", "filename": "src/test/ui/empty/empty-struct-unit-expr.stderr", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/cc35c787aa67e325901ca3af74699dc7727b764d/src%2Ftest%2Fui%2Fempty%2Fempty-struct-unit-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cc35c787aa67e325901ca3af74699dc7727b764d/src%2Ftest%2Fui%2Fempty%2Fempty-struct-unit-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-struct-unit-expr.stderr?ref=cc35c787aa67e325901ca3af74699dc7727b764d", "patch": "@@ -1,38 +1,50 @@\n-error[E0618]: expected function, found `Empty2`\n+error[E0618]: expected function, found struct `Empty2`\n   --> $DIR/empty-struct-unit-expr.rs:15:14\n    |\n LL | struct Empty2;\n-   | ------------- `Empty2` defined here\n+   | ------------- struct `Empty2` defined here\n ...\n LL |     let e2 = Empty2();\n    |              ^^^^^^--\n    |              |\n    |              call expression requires function\n+   |\n+help: `Empty2` is a unit struct, and does not take parentheses to be constructed\n+   |\n+LL -     let e2 = Empty2();\n+LL +     let e2 = Empty2;\n+   |\n \n error[E0618]: expected function, found enum variant `E::Empty4`\n   --> $DIR/empty-struct-unit-expr.rs:16:14\n    |\n LL |     Empty4\n-   |     ------ `E::Empty4` defined here\n+   |     ------ enum variant `E::Empty4` defined here\n ...\n LL |     let e4 = E::Empty4();\n    |              ^^^^^^^^^--\n    |              |\n    |              call expression requires function\n    |\n-help: `E::Empty4` is a unit variant, you need to write it without the parentheses\n+help: `E::Empty4` is a unit enum variant, and does not take parentheses to be constructed\n    |\n LL -     let e4 = E::Empty4();\n LL +     let e4 = E::Empty4;\n    |\n \n-error[E0618]: expected function, found `empty_struct::XEmpty2`\n+error[E0618]: expected function, found struct `XEmpty2`\n   --> $DIR/empty-struct-unit-expr.rs:18:15\n    |\n LL |     let xe2 = XEmpty2();\n    |               ^^^^^^^--\n    |               |\n    |               call expression requires function\n+   |\n+help: `XEmpty2` is a unit struct, and does not take parentheses to be constructed\n+   |\n+LL -     let xe2 = XEmpty2();\n+LL +     let xe2 = XEmpty2;\n+   |\n \n error[E0618]: expected function, found enum variant `XE::XEmpty4`\n   --> $DIR/empty-struct-unit-expr.rs:19:15\n@@ -42,7 +54,7 @@ LL |     let xe4 = XE::XEmpty4();\n    |               |\n    |               call expression requires function\n    |\n-help: `XE::XEmpty4` is a unit variant, you need to write it without the parentheses\n+help: `XE::XEmpty4` is a unit enum variant, and does not take parentheses to be constructed\n    |\n LL -     let xe4 = XE::XEmpty4();\n LL +     let xe4 = XE::XEmpty4;"}, {"sha": "793ec02a86fc684b969e6c3010e082cee68af486", "filename": "src/test/ui/error-codes/E0618.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc35c787aa67e325901ca3af74699dc7727b764d/src%2Ftest%2Fui%2Ferror-codes%2FE0618.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cc35c787aa67e325901ca3af74699dc7727b764d/src%2Ftest%2Fui%2Ferror-codes%2FE0618.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0618.stderr?ref=cc35c787aa67e325901ca3af74699dc7727b764d", "patch": "@@ -2,14 +2,14 @@ error[E0618]: expected function, found enum variant `X::Entry`\n   --> $DIR/E0618.rs:6:5\n    |\n LL |     Entry,\n-   |     ----- `X::Entry` defined here\n+   |     ----- enum variant `X::Entry` defined here\n ...\n LL |     X::Entry();\n    |     ^^^^^^^^--\n    |     |\n    |     call expression requires function\n    |\n-help: `X::Entry` is a unit variant, you need to write it without the parentheses\n+help: `X::Entry` is a unit enum variant, and does not take parentheses to be constructed\n    |\n LL -     X::Entry();\n LL +     X::Entry;"}, {"sha": "3aa39bb7388fafb4c5c2954cec476c1a19fd8692", "filename": "src/test/ui/issues/issue-20714.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc35c787aa67e325901ca3af74699dc7727b764d/src%2Ftest%2Fui%2Fissues%2Fissue-20714.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc35c787aa67e325901ca3af74699dc7727b764d/src%2Ftest%2Fui%2Fissues%2Fissue-20714.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20714.rs?ref=cc35c787aa67e325901ca3af74699dc7727b764d", "patch": "@@ -1,5 +1,5 @@\n struct G;\n \n fn main() {\n-    let g = G(); //~ ERROR: expected function, found `G`\n+    let g = G(); //~ ERROR: expected function, found struct `G`\n }"}, {"sha": "a3447aa6845b9d166032ca13d2b2448160414b5d", "filename": "src/test/ui/issues/issue-20714.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cc35c787aa67e325901ca3af74699dc7727b764d/src%2Ftest%2Fui%2Fissues%2Fissue-20714.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cc35c787aa67e325901ca3af74699dc7727b764d/src%2Ftest%2Fui%2Fissues%2Fissue-20714.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20714.stderr?ref=cc35c787aa67e325901ca3af74699dc7727b764d", "patch": "@@ -1,13 +1,19 @@\n-error[E0618]: expected function, found `G`\n+error[E0618]: expected function, found struct `G`\n   --> $DIR/issue-20714.rs:4:13\n    |\n LL | struct G;\n-   | -------- `G` defined here\n+   | -------- struct `G` defined here\n ...\n LL |     let g = G();\n    |             ^--\n    |             |\n    |             call expression requires function\n+   |\n+help: `G` is a unit struct, and does not take parentheses to be constructed\n+   |\n+LL -     let g = G();\n+LL +     let g = G;\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "bfa03c5e42f8db30dfd6333ae1f5aa017708fb71", "filename": "src/test/ui/issues/issue-21701.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc35c787aa67e325901ca3af74699dc7727b764d/src%2Ftest%2Fui%2Fissues%2Fissue-21701.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc35c787aa67e325901ca3af74699dc7727b764d/src%2Ftest%2Fui%2Fissues%2Fissue-21701.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21701.rs?ref=cc35c787aa67e325901ca3af74699dc7727b764d", "patch": "@@ -7,7 +7,7 @@ struct Bar;\n \n pub fn some_func() {\n     let f = Bar();\n-//~^ ERROR: expected function, found `Bar`\n+//~^ ERROR: expected function, found struct `Bar`\n }\n \n fn main() {"}, {"sha": "9f1fe7dde735a22a2853cfb3568bcc3d473263d0", "filename": "src/test/ui/issues/issue-21701.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cc35c787aa67e325901ca3af74699dc7727b764d/src%2Ftest%2Fui%2Fissues%2Fissue-21701.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cc35c787aa67e325901ca3af74699dc7727b764d/src%2Ftest%2Fui%2Fissues%2Fissue-21701.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21701.stderr?ref=cc35c787aa67e325901ca3af74699dc7727b764d", "patch": "@@ -8,16 +8,22 @@ LL |     let y = t();\n    |             |\n    |             call expression requires function\n \n-error[E0618]: expected function, found `Bar`\n+error[E0618]: expected function, found struct `Bar`\n   --> $DIR/issue-21701.rs:9:13\n    |\n LL | struct Bar;\n-   | ---------- `Bar` defined here\n+   | ---------- struct `Bar` defined here\n ...\n LL |     let f = Bar();\n    |             ^^^--\n    |             |\n    |             call expression requires function\n+   |\n+help: `Bar` is a unit struct, and does not take parentheses to be constructed\n+   |\n+LL -     let f = Bar();\n+LL +     let f = Bar;\n+   |\n \n error: aborting due to 2 previous errors\n "}, {"sha": "1d1bdb6b052a8d7e247f0f2501cd4ad2a0331d14", "filename": "src/test/ui/methods/method-path-in-pattern.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cc35c787aa67e325901ca3af74699dc7727b764d/src%2Ftest%2Fui%2Fmethods%2Fmethod-path-in-pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cc35c787aa67e325901ca3af74699dc7727b764d/src%2Ftest%2Fui%2Fmethods%2Fmethod-path-in-pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-path-in-pattern.stderr?ref=cc35c787aa67e325901ca3af74699dc7727b764d", "patch": "@@ -4,13 +4,13 @@ error[E0533]: expected unit struct, unit variant or constant, found associated f\n LL |         Foo::bar => {}\n    |         ^^^^^^^^\n \n-error[E0533]: expected unit struct, unit variant or constant, found associated function `<Foo>::bar`\n+error[E0533]: expected unit struct, unit variant or constant, found associated function `Foo::bar`\n   --> $DIR/method-path-in-pattern.rs:19:9\n    |\n LL |         <Foo>::bar => {}\n    |         ^^^^^^^^^^\n \n-error[E0533]: expected unit struct, unit variant or constant, found associated function `<Foo>::trait_bar`\n+error[E0533]: expected unit struct, unit variant or constant, found associated function `Foo::trait_bar`\n   --> $DIR/method-path-in-pattern.rs:23:9\n    |\n LL |         <Foo>::trait_bar => {}\n@@ -22,7 +22,7 @@ error[E0533]: expected unit struct, unit variant or constant, found associated f\n LL |     if let Foo::bar = 0u32 {}\n    |            ^^^^^^^^\n \n-error[E0533]: expected unit struct, unit variant or constant, found associated function `<Foo>::bar`\n+error[E0533]: expected unit struct, unit variant or constant, found associated function `Foo::bar`\n   --> $DIR/method-path-in-pattern.rs:28:12\n    |\n LL |     if let <Foo>::bar = 0u32 {}"}, {"sha": "82cc6e19f9d1ea759dc9507c22d2cf7b2be68811", "filename": "src/test/ui/qualified/qualified-path-params.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc35c787aa67e325901ca3af74699dc7727b764d/src%2Ftest%2Fui%2Fqualified%2Fqualified-path-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cc35c787aa67e325901ca3af74699dc7727b764d/src%2Ftest%2Fui%2Fqualified%2Fqualified-path-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fqualified%2Fqualified-path-params.stderr?ref=cc35c787aa67e325901ca3af74699dc7727b764d", "patch": "@@ -1,4 +1,4 @@\n-error[E0533]: expected unit struct, unit variant or constant, found associated function `<S as Tr>::A::f::<u8>`\n+error[E0533]: expected unit struct, unit variant or constant, found associated function `<<S as Tr>::A>::f<u8>`\n   --> $DIR/qualified-path-params.rs:20:9\n    |\n LL |         <S as Tr>::A::f::<u8> => {}"}, {"sha": "f885ac2151d6126e520a9d498d971b658c9a153c", "filename": "src/test/ui/resolve/privacy-enum-ctor.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cc35c787aa67e325901ca3af74699dc7727b764d/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cc35c787aa67e325901ca3af74699dc7727b764d/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr?ref=cc35c787aa67e325901ca3af74699dc7727b764d", "patch": "@@ -336,14 +336,14 @@ error[E0618]: expected function, found enum variant `Z::Unit`\n   --> $DIR/privacy-enum-ctor.rs:31:17\n    |\n LL |             Unit,\n-   |             ---- `Z::Unit` defined here\n+   |             ---- enum variant `Z::Unit` defined here\n ...\n LL |         let _ = Z::Unit();\n    |                 ^^^^^^^--\n    |                 |\n    |                 call expression requires function\n    |\n-help: `Z::Unit` is a unit variant, you need to write it without the parentheses\n+help: `Z::Unit` is a unit enum variant, and does not take parentheses to be constructed\n    |\n LL -         let _ = Z::Unit();\n LL +         let _ = Z::Unit;\n@@ -371,14 +371,14 @@ error[E0618]: expected function, found enum variant `m::E::Unit`\n   --> $DIR/privacy-enum-ctor.rs:47:16\n    |\n LL |         Unit,\n-   |         ---- `m::E::Unit` defined here\n+   |         ---- enum variant `m::E::Unit` defined here\n ...\n LL |     let _: E = m::E::Unit();\n    |                ^^^^^^^^^^--\n    |                |\n    |                call expression requires function\n    |\n-help: `m::E::Unit` is a unit variant, you need to write it without the parentheses\n+help: `m::E::Unit` is a unit enum variant, and does not take parentheses to be constructed\n    |\n LL -     let _: E = m::E::Unit();\n LL +     let _: E = m::E::Unit;\n@@ -406,14 +406,14 @@ error[E0618]: expected function, found enum variant `E::Unit`\n   --> $DIR/privacy-enum-ctor.rs:55:16\n    |\n LL |         Unit,\n-   |         ---- `E::Unit` defined here\n+   |         ---- enum variant `E::Unit` defined here\n ...\n LL |     let _: E = E::Unit();\n    |                ^^^^^^^--\n    |                |\n    |                call expression requires function\n    |\n-help: `E::Unit` is a unit variant, you need to write it without the parentheses\n+help: `E::Unit` is a unit enum variant, and does not take parentheses to be constructed\n    |\n LL -     let _: E = E::Unit();\n LL +     let _: E = E::Unit;"}, {"sha": "0a418b5aeef1dde23381da498968cea433722491", "filename": "src/test/ui/suggestions/issue-99240-2.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cc35c787aa67e325901ca3af74699dc7727b764d/src%2Ftest%2Fui%2Fsuggestions%2Fissue-99240-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc35c787aa67e325901ca3af74699dc7727b764d/src%2Ftest%2Fui%2Fsuggestions%2Fissue-99240-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-99240-2.rs?ref=cc35c787aa67e325901ca3af74699dc7727b764d", "patch": "@@ -0,0 +1,10 @@\n+enum Enum {\n+    Unit,\n+}\n+type Alias = Enum;\n+\n+fn main() {\n+    Alias::\n+    Unit();\n+    //~^^ ERROR expected function, found enum variant `Alias::Unit`\n+}"}, {"sha": "2af60f5975992d4fab1d0da52e1c1a881e3fd5d9", "filename": "src/test/ui/suggestions/issue-99240-2.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/cc35c787aa67e325901ca3af74699dc7727b764d/src%2Ftest%2Fui%2Fsuggestions%2Fissue-99240-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cc35c787aa67e325901ca3af74699dc7727b764d/src%2Ftest%2Fui%2Fsuggestions%2Fissue-99240-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-99240-2.stderr?ref=cc35c787aa67e325901ca3af74699dc7727b764d", "patch": "@@ -0,0 +1,24 @@\n+error[E0618]: expected function, found enum variant `Alias::Unit`\n+  --> $DIR/issue-99240-2.rs:7:5\n+   |\n+LL |        Unit,\n+   |        ---- enum variant `Alias::Unit` defined here\n+...\n+LL |        Alias::\n+   |   _____^\n+   |  |_____|\n+   | ||\n+LL | ||     Unit();\n+   | ||________^_- call expression requires function\n+   | |_________|\n+   | \n+   |\n+help: `Alias::Unit` is a unit enum variant, and does not take parentheses to be constructed\n+   |\n+LL -     Unit();\n+LL +     Unit;\n+   |\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0618`."}, {"sha": "2115a42662e1af716dd68e55680a34c156848765", "filename": "src/test/ui/suggestions/issue-99240.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cc35c787aa67e325901ca3af74699dc7727b764d/src%2Ftest%2Fui%2Fsuggestions%2Fissue-99240.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc35c787aa67e325901ca3af74699dc7727b764d/src%2Ftest%2Fui%2Fsuggestions%2Fissue-99240.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-99240.rs?ref=cc35c787aa67e325901ca3af74699dc7727b764d", "patch": "@@ -0,0 +1,6 @@\n+fn fmt(it: &(std::cell::Cell<Option<impl FnOnce()>>,)) {\n+    (it.0.take())()\n+    //~^ ERROR expected function\n+}\n+\n+fn main() {}"}, {"sha": "f1bea688b4ed5be3aded1afb79d1cba2fd63fe4d", "filename": "src/test/ui/suggestions/issue-99240.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cc35c787aa67e325901ca3af74699dc7727b764d/src%2Ftest%2Fui%2Fsuggestions%2Fissue-99240.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cc35c787aa67e325901ca3af74699dc7727b764d/src%2Ftest%2Fui%2Fsuggestions%2Fissue-99240.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-99240.stderr?ref=cc35c787aa67e325901ca3af74699dc7727b764d", "patch": "@@ -0,0 +1,11 @@\n+error[E0618]: expected function, found `Option<impl FnOnce()>`\n+  --> $DIR/issue-99240.rs:2:5\n+   |\n+LL |     (it.0.take())()\n+   |     ^^^^^^^^^^^^^--\n+   |     |\n+   |     call expression requires function\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0618`."}, {"sha": "8f3180a8639d876f3a0f18c0b446638031c449e6", "filename": "src/test/ui/type-alias-enum-variants/incorrect-variant-form-through-alias-caught.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc35c787aa67e325901ca3af74699dc7727b764d/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fincorrect-variant-form-through-alias-caught.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cc35c787aa67e325901ca3af74699dc7727b764d/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fincorrect-variant-form-through-alias-caught.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fincorrect-variant-form-through-alias-caught.stderr?ref=cc35c787aa67e325901ca3af74699dc7727b764d", "patch": "@@ -20,14 +20,14 @@ error[E0618]: expected function, found enum variant `Alias::Unit`\n   --> $DIR/incorrect-variant-form-through-alias-caught.rs:15:5\n    |\n LL | enum Enum { Braced {}, Unit, Tuple() }\n-   |                        ---- `Alias::Unit` defined here\n+   |                        ---- enum variant `Alias::Unit` defined here\n ...\n LL |     Alias::Unit();\n    |     ^^^^^^^^^^^--\n    |     |\n    |     call expression requires function\n    |\n-help: `Alias::Unit` is a unit variant, you need to write it without the parentheses\n+help: `Alias::Unit` is a unit enum variant, and does not take parentheses to be constructed\n    |\n LL -     Alias::Unit();\n LL +     Alias::Unit;"}]}