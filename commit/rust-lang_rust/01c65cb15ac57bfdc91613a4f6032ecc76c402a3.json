{"sha": "01c65cb15ac57bfdc91613a4f6032ecc76c402a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxYzY1Y2IxNWFjNTdiZmRjOTE2MTNhNGY2MDMyZWNjNzZjNDAyYTM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-09-20T14:50:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-09-20T14:50:31Z"}, "message": "Auto merge of #44525 - aidanhs:aphs-no-null-deref, r=alexcrichton\n\nCorrectly bubble up errors from libbacktrace\n\nPreviously the first part of this code didn't check for a null pointer and blindly passed it back down, causing a segfault if libbacktrace failed to initialise. I've changed this to check and bubble up the error if relevant.\n\nSuggested diff view: https://github.com/rust-lang/rust/pull/44525/files?w=1", "tree": {"sha": "3622c88ffe76513d86657eab0f485d6f1d789a3e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3622c88ffe76513d86657eab0f485d6f1d789a3e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01c65cb15ac57bfdc91613a4f6032ecc76c402a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01c65cb15ac57bfdc91613a4f6032ecc76c402a3", "html_url": "https://github.com/rust-lang/rust/commit/01c65cb15ac57bfdc91613a4f6032ecc76c402a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01c65cb15ac57bfdc91613a4f6032ecc76c402a3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4cdb36262b93390c8733a1ce44665619d9348981", "url": "https://api.github.com/repos/rust-lang/rust/commits/4cdb36262b93390c8733a1ce44665619d9348981", "html_url": "https://github.com/rust-lang/rust/commit/4cdb36262b93390c8733a1ce44665619d9348981"}, {"sha": "15887d786ba05a84f2fc5e7036cae88b91291c6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/15887d786ba05a84f2fc5e7036cae88b91291c6c", "html_url": "https://github.com/rust-lang/rust/commit/15887d786ba05a84f2fc5e7036cae88b91291c6c"}], "stats": {"total": 38, "additions": 23, "deletions": 15}, "files": [{"sha": "016c840d1541afbe4dd70d46d967c23461b23530", "filename": "src/libstd/sys_common/gnu/libbacktrace.rs", "status": "modified", "additions": 23, "deletions": 15, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/01c65cb15ac57bfdc91613a4f6032ecc76c402a3/src%2Flibstd%2Fsys_common%2Fgnu%2Flibbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01c65cb15ac57bfdc91613a4f6032ecc76c402a3/src%2Flibstd%2Fsys_common%2Fgnu%2Flibbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fgnu%2Flibbacktrace.rs?ref=01c65cb15ac57bfdc91613a4f6032ecc76c402a3", "patch": "@@ -30,6 +30,12 @@ where F: FnMut(&[u8], libc::c_int) -> io::Result<()>\n     let ret;\n     let fileline_count = {\n         let state = unsafe { init_state() };\n+        if state.is_null() {\n+            return Err(io::Error::new(\n+                io::ErrorKind::Other,\n+                \"failed to allocate libbacktrace state\")\n+            )\n+        }\n         let mut fileline_win: &mut [FileLine] = &mut fileline_buf;\n         let fileline_addr = &mut fileline_win as *mut &mut [FileLine];\n         ret = unsafe {\n@@ -62,23 +68,25 @@ pub fn resolve_symname<F>(frame: Frame,\n     let symname = {\n         let state = unsafe { init_state() };\n         if state.is_null() {\n+            return Err(io::Error::new(\n+                io::ErrorKind::Other,\n+                \"failed to allocate libbacktrace state\")\n+            )\n+        }\n+        let mut data = ptr::null();\n+        let data_addr = &mut data as *mut *const libc::c_char;\n+        let ret = unsafe {\n+            backtrace_syminfo(state,\n+                              frame.symbol_addr as libc::uintptr_t,\n+                              syminfo_cb,\n+                              error_cb,\n+                              data_addr as *mut libc::c_void)\n+        };\n+        if ret == 0 || data.is_null() {\n             None\n         } else {\n-            let mut data = ptr::null();\n-            let data_addr = &mut data as *mut *const libc::c_char;\n-            let ret = unsafe {\n-                backtrace_syminfo(state,\n-                                  frame.symbol_addr as libc::uintptr_t,\n-                                  syminfo_cb,\n-                                  error_cb,\n-                                  data_addr as *mut libc::c_void)\n-            };\n-            if ret == 0 || data.is_null() {\n-                None\n-            } else {\n-                unsafe {\n-                    CStr::from_ptr(data).to_str().ok()\n-                }\n+            unsafe {\n+                CStr::from_ptr(data).to_str().ok()\n             }\n         }\n     };"}]}