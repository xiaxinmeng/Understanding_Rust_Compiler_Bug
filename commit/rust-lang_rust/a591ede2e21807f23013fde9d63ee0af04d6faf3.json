{"sha": "a591ede2e21807f23013fde9d63ee0af04d6faf3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1OTFlZGUyZTIxODA3ZjIzMDEzZmRlOWQ2M2VlMGFmMDRkNmZhZjM=", "commit": {"author": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2019-12-04T16:13:19Z"}, "committer": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2019-12-04T16:43:25Z"}, "message": "Only special-case empty matches when `exhaustive_patterns` is off\n\nWhen the feature is on, the special casing is not needed. That way when\nwe stabilize the feature this `if` can just be removed.", "tree": {"sha": "afe4cde250c37241497c45f6ab895a6180386572", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/afe4cde250c37241497c45f6ab895a6180386572"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a591ede2e21807f23013fde9d63ee0af04d6faf3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a591ede2e21807f23013fde9d63ee0af04d6faf3", "html_url": "https://github.com/rust-lang/rust/commit/a591ede2e21807f23013fde9d63ee0af04d6faf3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a591ede2e21807f23013fde9d63ee0af04d6faf3/comments", "author": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bfb556f97d47689ac110373de4986ce14fd52d30", "url": "https://api.github.com/repos/rust-lang/rust/commits/bfb556f97d47689ac110373de4986ce14fd52d30", "html_url": "https://github.com/rust-lang/rust/commit/bfb556f97d47689ac110373de4986ce14fd52d30"}], "stats": {"total": 31, "additions": 14, "deletions": 17}, "files": [{"sha": "fc14506f3052975cf5cf42e43ea042ef41139592", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 14, "deletions": 17, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/a591ede2e21807f23013fde9d63ee0af04d6faf3/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a591ede2e21807f23013fde9d63ee0af04d6faf3/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=a591ede2e21807f23013fde9d63ee0af04d6faf3", "patch": "@@ -168,6 +168,8 @@ impl<'tcx> MatchVisitor<'_, 'tcx> {\n \n             // Fifth, check if the match is exhaustive.\n             let scrut_ty = self.tables.node_type(scrut.hir_id);\n+            // Note: An empty match isn't the same as an empty matrix for diagnostics purposes,\n+            // since an empty matrix can occur when there are arms, if those arms all have guards.\n             let is_empty_match = inlined_arms.is_empty();\n             check_exhaustive(cx, scrut_ty, scrut.span, &matrix, scrut.hir_id, is_empty_match);\n         })\n@@ -435,27 +437,22 @@ fn check_exhaustive<'p, 'tcx>(\n     hir_id: HirId,\n     is_empty_match: bool,\n ) {\n-    // If the match has no arms, check whether the scrutinee is uninhabited.\n-    // Note: An empty match isn't the same as an empty matrix for diagnostics purposes, since an\n-    // empty matrix can occur when there are arms, if those arms all have guards.\n-    let scrutinee_is_visibly_uninhabited = if cx.tcx.features().exhaustive_patterns {\n-        let module = cx.tcx.hir().get_module_parent(hir_id);\n-        cx.tcx.is_ty_uninhabited_from(module, scrut_ty)\n-    } else {\n-        match scrut_ty.kind {\n+    // In the absence of the `exhaustive_patterns` feature, empty matches are not detected by\n+    // `is_useful` to exhaustively match uninhabited types, so we manually check here.\n+    if is_empty_match && !cx.tcx.features().exhaustive_patterns {\n+        let scrutinee_is_visibly_uninhabited = match scrut_ty.kind {\n             ty::Never => true,\n-            ty::Adt(def, _) if def.is_enum() => {\n-                def.variants.is_empty() && !cx.is_foreign_non_exhaustive_enum(scrut_ty)\n+            ty::Adt(def, _) => {\n+                def.is_enum()\n+                    && def.variants.is_empty()\n+                    && !cx.is_foreign_non_exhaustive_enum(scrut_ty)\n             }\n             _ => false,\n+        };\n+        if scrutinee_is_visibly_uninhabited {\n+            // If the type *is* uninhabited, an empty match is vacuously exhaustive.\n+            return;\n         }\n-    };\n-    if is_empty_match && scrutinee_is_visibly_uninhabited {\n-        // If the type *is* uninhabited, it's vacuously exhaustive.\n-        // This early return is only needed here because in the absence of the\n-        // `exhaustive_patterns` feature, empty matches are not detected by `is_useful`\n-        // to exhaustively match uninhabited types.\n-        return;\n     }\n \n     let witnesses = match check_not_useful(cx, scrut_ty, matrix, hir_id) {"}]}