{"sha": "b88c675946704cb2bf0e26fcad6149112d6aa326", "node_id": "C_kwDOAAsO6NoAKGI4OGM2NzU5NDY3MDRjYjJiZjBlMjZmY2FkNjE0OTExMmQ2YWEzMjY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-03-14T16:40:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-14T16:40:06Z"}, "message": "Rollup merge of #109110 - compiler-errors:impossible-impl-mono, r=jackh726\n\nDon't codegen impossible to satisfy impls\n\nFixes #109098", "tree": {"sha": "27e5b7201d5cb87f1c1a67c9bfdba61881ac3def", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/27e5b7201d5cb87f1c1a67c9bfdba61881ac3def"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b88c675946704cb2bf0e26fcad6149112d6aa326", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkEKNmCRBK7hj4Ov3rIwAA+r4IAH9raXiMmnXF8mvI6GFjk1cb\nnTHVbfR0j2nTwNL/Cl3Bn2pzrI7KJmGdVjsXTGwza2saiQSD10P2+LW2dbFilc9q\nVmxRoKsDxcGOScP3gBGivQpfKABAykrAvYu62vh5nZXQbOrZj+M7Z7Ttz1b1yqM+\nZLImOi6msDk9LcxlHsIa2u2MH92txOWWr8ykRAO8ZLgQ0Q8q3iSltk0pACkYhEa/\nfOwC8aTIezd+M5kmiQNxbohpR6XjJD3R1SBJy7SFjaFv/8GUVC7aiNiTfxW6CxH9\nHWrJiUbGLQLaYWpX7Ya7osO8RqwfkAjym3RiXyaY6SkpG/QG5n3SWO3rQFWqWiM=\n=45kN\n-----END PGP SIGNATURE-----\n", "payload": "tree 27e5b7201d5cb87f1c1a67c9bfdba61881ac3def\nparent 4c6b680955cf18a7395e65b91641e2bba81a8a9e\nparent b36bbb0266a12f4869668f55aeaf4c8a68aa8265\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1678812006 +0100\ncommitter GitHub <noreply@github.com> 1678812006 +0100\n\nRollup merge of #109110 - compiler-errors:impossible-impl-mono, r=jackh726\n\nDon't codegen impossible to satisfy impls\n\nFixes #109098\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b88c675946704cb2bf0e26fcad6149112d6aa326", "html_url": "https://github.com/rust-lang/rust/commit/b88c675946704cb2bf0e26fcad6149112d6aa326", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b88c675946704cb2bf0e26fcad6149112d6aa326/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c6b680955cf18a7395e65b91641e2bba81a8a9e", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c6b680955cf18a7395e65b91641e2bba81a8a9e", "html_url": "https://github.com/rust-lang/rust/commit/4c6b680955cf18a7395e65b91641e2bba81a8a9e"}, {"sha": "b36bbb0266a12f4869668f55aeaf4c8a68aa8265", "url": "https://api.github.com/repos/rust-lang/rust/commits/b36bbb0266a12f4869668f55aeaf4c8a68aa8265", "html_url": "https://github.com/rust-lang/rust/commit/b36bbb0266a12f4869668f55aeaf4c8a68aa8265"}], "stats": {"total": 28, "additions": 28, "deletions": 0}, "files": [{"sha": "aff27e5664b75127fe1542d8b662d7ef45dfadb9", "filename": "compiler/rustc_monomorphize/src/collector.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b88c675946704cb2bf0e26fcad6149112d6aa326/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88c675946704cb2bf0e26fcad6149112d6aa326/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs?ref=b88c675946704cb2bf0e26fcad6149112d6aa326", "patch": "@@ -1326,6 +1326,21 @@ fn create_mono_items_for_default_impls<'tcx>(\n         return;\n     }\n \n+    // Unlike 'lazy' monomorphization that begins by collecting items transitively\n+    // called by `main` or other global items, when eagerly monomorphizing impl\n+    // items, we never actually check that the predicates of this impl are satisfied\n+    // in a empty reveal-all param env (i.e. with no assumptions).\n+    //\n+    // Even though this impl has no substitutions, because we don't consider higher-\n+    // ranked predicates such as `for<'a> &'a mut [u8]: Copy` to be trivially false,\n+    // we must now check that the impl has no impossible-to-satisfy predicates.\n+    if tcx.subst_and_check_impossible_predicates((\n+        item.owner_id.to_def_id(),\n+        &InternalSubsts::identity_for_item(tcx, item.owner_id.to_def_id()),\n+    )) {\n+        return;\n+    }\n+\n     let Some(trait_ref) = tcx.impl_trait_ref(item.owner_id) else {\n         return;\n     };"}, {"sha": "1ea32ed2c4fac33d8ba2ce6d3809953f473c49c8", "filename": "tests/ui/codegen/mono-impossible.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b88c675946704cb2bf0e26fcad6149112d6aa326/tests%2Fui%2Fcodegen%2Fmono-impossible.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88c675946704cb2bf0e26fcad6149112d6aa326/tests%2Fui%2Fcodegen%2Fmono-impossible.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcodegen%2Fmono-impossible.rs?ref=b88c675946704cb2bf0e26fcad6149112d6aa326", "patch": "@@ -0,0 +1,13 @@\n+// compile-flags: -Clink-dead-code=on --crate-type=lib\n+// build-pass\n+\n+// Make sure that we don't monomorphize the impossible method `<() as Visit>::visit`,\n+// which does not hold under a reveal-all param env.\n+\n+pub trait Visit {\n+    fn visit() {}\n+}\n+\n+pub trait Array<'a> {}\n+\n+impl Visit for () where (): for<'a> Array<'a> {}"}]}