{"sha": "1e584d2d6dee2bc72509574974bf7be11a5924f0", "node_id": "C_kwDOAAsO6NoAKDFlNTg0ZDJkNmRlZTJiYzcyNTA5NTc0OTc0YmY3YmUxMWE1OTI0ZjA", "commit": {"author": {"name": "Vincenzo Palazzo", "email": "vincenzopalazzodev@gmail.com", "date": "2022-07-24T17:45:21Z"}, "committer": {"name": "Vincenzo Palazzo", "email": "vincenzopalazzodev@gmail.com", "date": "2022-07-27T21:53:37Z"}, "message": "add suggestion when there is a impl of external trait on pointer\n\nSigned-off-by: Vincenzo Palazzo <vincenzopalazzodev@gmail.com>", "tree": {"sha": "986eec06beb1f4148309236173d73f0b2e252864", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/986eec06beb1f4148309236173d73f0b2e252864"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e584d2d6dee2bc72509574974bf7be11a5924f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e584d2d6dee2bc72509574974bf7be11a5924f0", "html_url": "https://github.com/rust-lang/rust/commit/1e584d2d6dee2bc72509574974bf7be11a5924f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e584d2d6dee2bc72509574974bf7be11a5924f0/comments", "author": {"login": "vincenzopalazzo", "id": 17150045, "node_id": "MDQ6VXNlcjE3MTUwMDQ1", "avatar_url": "https://avatars.githubusercontent.com/u/17150045?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vincenzopalazzo", "html_url": "https://github.com/vincenzopalazzo", "followers_url": "https://api.github.com/users/vincenzopalazzo/followers", "following_url": "https://api.github.com/users/vincenzopalazzo/following{/other_user}", "gists_url": "https://api.github.com/users/vincenzopalazzo/gists{/gist_id}", "starred_url": "https://api.github.com/users/vincenzopalazzo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vincenzopalazzo/subscriptions", "organizations_url": "https://api.github.com/users/vincenzopalazzo/orgs", "repos_url": "https://api.github.com/users/vincenzopalazzo/repos", "events_url": "https://api.github.com/users/vincenzopalazzo/events{/privacy}", "received_events_url": "https://api.github.com/users/vincenzopalazzo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vincenzopalazzo", "id": 17150045, "node_id": "MDQ6VXNlcjE3MTUwMDQ1", "avatar_url": "https://avatars.githubusercontent.com/u/17150045?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vincenzopalazzo", "html_url": "https://github.com/vincenzopalazzo", "followers_url": "https://api.github.com/users/vincenzopalazzo/followers", "following_url": "https://api.github.com/users/vincenzopalazzo/following{/other_user}", "gists_url": "https://api.github.com/users/vincenzopalazzo/gists{/gist_id}", "starred_url": "https://api.github.com/users/vincenzopalazzo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vincenzopalazzo/subscriptions", "organizations_url": "https://api.github.com/users/vincenzopalazzo/orgs", "repos_url": "https://api.github.com/users/vincenzopalazzo/repos", "events_url": "https://api.github.com/users/vincenzopalazzo/events{/privacy}", "received_events_url": "https://api.github.com/users/vincenzopalazzo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2643b16468fda787470340890212591d8bc832b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/2643b16468fda787470340890212591d8bc832b7", "html_url": "https://github.com/rust-lang/rust/commit/2643b16468fda787470340890212591d8bc832b7"}], "stats": {"total": 93, "additions": 92, "deletions": 1}, "files": [{"sha": "1608550aa6ae42f9e0c1cbefc41405eacaeac7e2", "filename": "compiler/rustc_typeck/src/coherence/orphan.rs", "status": "modified", "additions": 36, "deletions": 1, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/1e584d2d6dee2bc72509574974bf7be11a5924f0/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e584d2d6dee2bc72509574974bf7be11a5924f0/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Forphan.rs?ref=1e584d2d6dee2bc72509574974bf7be11a5924f0", "patch": "@@ -3,7 +3,7 @@\n \n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::struct_span_err;\n-use rustc_errors::ErrorGuaranteed;\n+use rustc_errors::{Diagnostic, ErrorGuaranteed};\n use rustc_hir as hir;\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_middle::ty::subst::GenericArgKind;\n@@ -107,6 +107,7 @@ fn do_orphan_check_impl<'tcx>(\n         Err(err) => emit_orphan_check_error(\n             tcx,\n             sp,\n+            item.span,\n             tr.path.span,\n             trait_ref.self_ty(),\n             impl_.self_ty.span,\n@@ -207,6 +208,7 @@ fn do_orphan_check_impl<'tcx>(\n fn emit_orphan_check_error<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     sp: Span,\n+    full_impl_span: Span,\n     trait_span: Span,\n     self_ty: Ty<'tcx>,\n     self_ty_span: Span,\n@@ -247,8 +249,20 @@ fn emit_orphan_check_error<'tcx>(\n                     ty::Slice(_) => (this, \" because slices are always foreign\"),\n                     ty::Array(..) => (this, \" because arrays are always foreign\"),\n                     ty::Tuple(..) => (this, \" because tuples are always foreign\"),\n+                    ty::RawPtr(ptr_ty) => {\n+                        emit_newtype_suggestion_for_raw_ptr(\n+                            full_impl_span,\n+                            self_ty,\n+                            self_ty_span,\n+                            ptr_ty,\n+                            &mut err,\n+                        );\n+\n+                        (format!(\"`{}`\", ty), \" because raw pointers are always foreign\")\n+                    }\n                     _ => (format!(\"`{}`\", ty), \"\"),\n                 };\n+\n                 let msg = format!(\"{} is not defined in the current crate{}\", ty, postfix);\n                 if *is_target_ty {\n                     // Point at `D<A>` in `impl<A, B> for C<B> in D<A>`\n@@ -330,6 +344,27 @@ fn emit_orphan_check_error<'tcx>(\n     })\n }\n \n+fn emit_newtype_suggestion_for_raw_ptr(\n+    full_impl_span: Span,\n+    self_ty: Ty<'_>,\n+    self_ty_span: Span,\n+    ptr_ty: &ty::TypeAndMut<'_>,\n+    diag: &mut Diagnostic,\n+) {\n+    if !self_ty.needs_subst() {\n+        let mut_key = if ptr_ty.mutbl == rustc_middle::mir::Mutability::Mut { \"mut \" } else { \"\" };\n+        let msg_sugg = \"consider introducing a new wrapper type\".to_owned();\n+        let sugg = vec![\n+            (\n+                full_impl_span.shrink_to_lo(),\n+                format!(\"struct WrapperType(*{}{});\\n\\n\", mut_key, ptr_ty.ty),\n+            ),\n+            (self_ty_span, \"WrapperType\".to_owned()),\n+        ];\n+        diag.multipart_suggestion(msg_sugg, sugg, rustc_errors::Applicability::MaybeIncorrect);\n+    }\n+}\n+\n /// Lint impls of auto traits if they are likely to have\n /// unsound or surprising effects on auto impls.\n fn lint_auto_trait_impl<'tcx>("}, {"sha": "272c6bd3fb782bf1af04d343dc2d853fe062275c", "filename": "src/test/ui/errors/issue-99572-impl-trait-on-pointer.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/1e584d2d6dee2bc72509574974bf7be11a5924f0/src%2Ftest%2Fui%2Ferrors%2Fissue-99572-impl-trait-on-pointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e584d2d6dee2bc72509574974bf7be11a5924f0/src%2Ftest%2Fui%2Ferrors%2Fissue-99572-impl-trait-on-pointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferrors%2Fissue-99572-impl-trait-on-pointer.rs?ref=1e584d2d6dee2bc72509574974bf7be11a5924f0", "patch": "@@ -0,0 +1,25 @@\n+// Emit additional suggestion to correct the trait implementation\n+// on a pointer\n+use std::{fmt, marker};\n+\n+struct LocalType;\n+\n+impl fmt::Display for *mut LocalType {\n+//~^ ERROR only traits defined in the current crate can be implemented for arbitrary types\n+//~| NOTE impl doesn't use only types from inside the current crate\n+//~| NOTE `*mut LocalType` is not defined in the current crate because raw pointers are always foreign\n+//~| NOTE define and implement a trait or new type instead\n+//~| HELP consider introducing a new wrapper type\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        write!(f, \"This not compile\")\n+    }\n+}\n+\n+impl<T> marker::Copy for *mut T {\n+//~^ ERROR only traits defined in the current crate can be implemented for arbitrary types\n+//~| NOTE impl doesn't use only types from inside the current crate\n+//~| NOTE `*mut T` is not defined in the current crate because raw pointers are always foreign\n+//~| NOTE define and implement a trait or new type instead\n+}\n+\n+fn main() {}"}, {"sha": "78d7a47deaac3be3fb9886ff8bcc0ed2edbe2c56", "filename": "src/test/ui/errors/issue-99572-impl-trait-on-pointer.stderr", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/1e584d2d6dee2bc72509574974bf7be11a5924f0/src%2Ftest%2Fui%2Ferrors%2Fissue-99572-impl-trait-on-pointer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1e584d2d6dee2bc72509574974bf7be11a5924f0/src%2Ftest%2Fui%2Ferrors%2Fissue-99572-impl-trait-on-pointer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferrors%2Fissue-99572-impl-trait-on-pointer.stderr?ref=1e584d2d6dee2bc72509574974bf7be11a5924f0", "patch": "@@ -0,0 +1,31 @@\n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/issue-99572-impl-trait-on-pointer.rs:7:1\n+   |\n+LL | impl fmt::Display for *mut LocalType {\n+   | ^^^^^^^^^^^^^^^^^^^^^^--------------\n+   | |                     |\n+   | |                     `*mut LocalType` is not defined in the current crate because raw pointers are always foreign\n+   | impl doesn't use only types from inside the current crate\n+   |\n+   = note: define and implement a trait or new type instead\n+help: consider introducing a new wrapper type\n+   |\n+LL + struct WrapperType(*mut LocalType);\n+LL + \n+LL ~ impl fmt::Display for WrapperType {\n+   |\n+\n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/issue-99572-impl-trait-on-pointer.rs:18:1\n+   |\n+LL | impl<T> marker::Copy for *mut T {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^------\n+   | |                        |\n+   | |                        `*mut T` is not defined in the current crate because raw pointers are always foreign\n+   | impl doesn't use only types from inside the current crate\n+   |\n+   = note: define and implement a trait or new type instead\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0117`."}]}