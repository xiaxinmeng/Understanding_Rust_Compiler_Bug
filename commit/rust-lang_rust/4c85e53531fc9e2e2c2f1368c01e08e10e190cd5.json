{"sha": "4c85e53531fc9e2e2c2f1368c01e08e10e190cd5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjODVlNTM1MzFmYzllMmUyYzJmMTM2OGMwMWUwOGUxMGUxOTBjZDU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-03-13T14:01:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-13T14:01:29Z"}, "message": "Merge #3561 #3577\n\n3561: feat: add debug code lens r=matklad a=hdevalke\n\nRefs #3539\n\n3577: Protect against infinite macro expansion in def collector r=edwin0cheng a=flodiebold\n\nSomething I noticed while trying to make macro expansion more resilient against errors.\r\n\r\nThere was a test for this, but it wasn't actually working because the first recursive expansion failed. (The comma...)\r\n\r\nEven with this limit, that test (when fixed) still takes some time to pass because of the exponential growth of the expansions, so I disabled it and added a different one without growth.\r\n\r\nCC @edwin0cheng \n\nCo-authored-by: Hannes De Valkeneer <hannes@de-valkeneer.be>\nCo-authored-by: hdevalke <2261239+hdevalke@users.noreply.github.com>\nCo-authored-by: Florian Diebold <florian.diebold@freiheit.com>", "tree": {"sha": "19ea33f76fd6ef700ed8db695019aa04a315649c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/19ea33f76fd6ef700ed8db695019aa04a315649c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c85e53531fc9e2e2c2f1368c01e08e10e190cd5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJea5I5CRBK7hj4Ov3rIwAAdHIIAJRdxnUitPQ/vFJ0JwCs37PT\nO/JRz9RjvThICnwevIUvu7u8f5VROXIVweT0p5UjqPw5svqDhDSj6wmSj/CP6RU7\ndw1JEKglbUhjIB0OOZl3UyickjbAu6bXTGHhES+oyJql87FJJvZbPIKRz42fpbrW\nTD6bGnupPvuXAqQyKH1+0gPB/NTS+Vf3jfZzJYmajldsCh4sagwQi3okgeZJ6Sxa\nDOEjypu8HL/0K7GA1Eij0EDQ3OQE9S6fgEui6IsTf9+MYToHeRrBh+WXdjwmyjwu\nOYBcDzoeWgq6S0Ev6xtGWGhatfimNL9VDDa9L+R+uQ1Pb0q66QiEa9RPlZhLh3M=\n=tdI3\n-----END PGP SIGNATURE-----\n", "payload": "tree 19ea33f76fd6ef700ed8db695019aa04a315649c\nparent 9019d794fe0883ee8ea9776bcda1a5bf0ad6153d\nparent fa655912b540ece5920de8deb7856629850f5bdc\nparent 89eb9e8002466f3099de77bc42cdabbf67d5dc1b\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1584108089 +0000\ncommitter GitHub <noreply@github.com> 1584108089 +0000\n\nMerge #3561 #3577\n\n3561: feat: add debug code lens r=matklad a=hdevalke\n\nRefs #3539\n\n3577: Protect against infinite macro expansion in def collector r=edwin0cheng a=flodiebold\n\nSomething I noticed while trying to make macro expansion more resilient against errors.\r\n\r\nThere was a test for this, but it wasn't actually working because the first recursive expansion failed. (The comma...)\r\n\r\nEven with this limit, that test (when fixed) still takes some time to pass because of the exponential growth of the expansions, so I disabled it and added a different one without growth.\r\n\r\nCC @edwin0cheng \n\nCo-authored-by: Hannes De Valkeneer <hannes@de-valkeneer.be>\nCo-authored-by: hdevalke <2261239+hdevalke@users.noreply.github.com>\nCo-authored-by: Florian Diebold <florian.diebold@freiheit.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c85e53531fc9e2e2c2f1368c01e08e10e190cd5", "html_url": "https://github.com/rust-lang/rust/commit/4c85e53531fc9e2e2c2f1368c01e08e10e190cd5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c85e53531fc9e2e2c2f1368c01e08e10e190cd5/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9019d794fe0883ee8ea9776bcda1a5bf0ad6153d", "url": "https://api.github.com/repos/rust-lang/rust/commits/9019d794fe0883ee8ea9776bcda1a5bf0ad6153d", "html_url": "https://github.com/rust-lang/rust/commit/9019d794fe0883ee8ea9776bcda1a5bf0ad6153d"}, {"sha": "fa655912b540ece5920de8deb7856629850f5bdc", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa655912b540ece5920de8deb7856629850f5bdc", "html_url": "https://github.com/rust-lang/rust/commit/fa655912b540ece5920de8deb7856629850f5bdc"}, {"sha": "89eb9e8002466f3099de77bc42cdabbf67d5dc1b", "url": "https://api.github.com/repos/rust-lang/rust/commits/89eb9e8002466f3099de77bc42cdabbf67d5dc1b", "html_url": "https://github.com/rust-lang/rust/commit/89eb9e8002466f3099de77bc42cdabbf67d5dc1b"}], "stats": {"total": 167, "additions": 122, "deletions": 45}, "files": [{"sha": "db9838cb5e4387be48275fdcc443a97a3df01792", "filename": "crates/ra_hir_def/src/nameres/collector.rs", "status": "modified", "additions": 39, "deletions": 9, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/4c85e53531fc9e2e2c2f1368c01e08e10e190cd5/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c85e53531fc9e2e2c2f1368c01e08e10e190cd5/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=4c85e53531fc9e2e2c2f1368c01e08e10e190cd5", "patch": "@@ -102,6 +102,7 @@ struct MacroDirective {\n     module_id: LocalModuleId,\n     ast_id: AstIdWithPath<ast::MacroCall>,\n     legacy: Option<MacroCallId>,\n+    depth: usize,\n }\n \n #[derive(Clone, Debug, Eq, PartialEq)]\n@@ -134,6 +135,7 @@ where\n         self.def_map.modules[module_id].origin = ModuleOrigin::CrateRoot { definition: file_id };\n         ModCollector {\n             def_collector: &mut *self,\n+            macro_depth: 0,\n             module_id,\n             file_id: file_id.into(),\n             raw_items: &raw_items,\n@@ -516,7 +518,7 @@ where\n         macros.retain(|directive| {\n             if let Some(call_id) = directive.legacy {\n                 res = ReachedFixedPoint::No;\n-                resolved.push((directive.module_id, call_id));\n+                resolved.push((directive.module_id, call_id, directive.depth));\n                 return false;\n             }\n \n@@ -530,7 +532,7 @@ where\n                 );\n                 resolved_res.resolved_def.take_macros()\n             }) {\n-                resolved.push((directive.module_id, call_id));\n+                resolved.push((directive.module_id, call_id, directive.depth));\n                 res = ReachedFixedPoint::No;\n                 return false;\n             }\n@@ -541,7 +543,7 @@ where\n             if let Some(call_id) =\n                 directive.ast_id.as_call_id(self.db, |path| self.resolve_attribute_macro(&path))\n             {\n-                resolved.push((directive.module_id, call_id));\n+                resolved.push((directive.module_id, call_id, 0));\n                 res = ReachedFixedPoint::No;\n                 return false;\n             }\n@@ -552,8 +554,12 @@ where\n         self.unexpanded_macros = macros;\n         self.unexpanded_attribute_macros = attribute_macros;\n \n-        for (module_id, macro_call_id) in resolved {\n-            self.collect_macro_expansion(module_id, macro_call_id);\n+        for (module_id, macro_call_id, depth) in resolved {\n+            if depth > 1024 {\n+                log::debug!(\"Max macro expansion depth reached\");\n+                continue;\n+            }\n+            self.collect_macro_expansion(module_id, macro_call_id, depth);\n         }\n \n         res\n@@ -573,12 +579,18 @@ where\n         None\n     }\n \n-    fn collect_macro_expansion(&mut self, module_id: LocalModuleId, macro_call_id: MacroCallId) {\n+    fn collect_macro_expansion(\n+        &mut self,\n+        module_id: LocalModuleId,\n+        macro_call_id: MacroCallId,\n+        depth: usize,\n+    ) {\n         let file_id: HirFileId = macro_call_id.as_file();\n         let raw_items = self.db.raw_items(file_id);\n         let mod_dir = self.mod_dirs[&module_id].clone();\n         ModCollector {\n             def_collector: &mut *self,\n+            macro_depth: depth,\n             file_id,\n             module_id,\n             raw_items: &raw_items,\n@@ -595,6 +607,7 @@ where\n /// Walks a single module, populating defs, imports and macros\n struct ModCollector<'a, D> {\n     def_collector: D,\n+    macro_depth: usize,\n     module_id: LocalModuleId,\n     file_id: HirFileId,\n     raw_items: &'a raw::RawItems,\n@@ -684,6 +697,7 @@ where\n \n                 ModCollector {\n                     def_collector: &mut *self.def_collector,\n+                    macro_depth: self.macro_depth,\n                     module_id,\n                     file_id: self.file_id,\n                     raw_items: self.raw_items,\n@@ -713,6 +727,7 @@ where\n                         let raw_items = self.def_collector.db.raw_items(file_id.into());\n                         ModCollector {\n                             def_collector: &mut *self.def_collector,\n+                            macro_depth: self.macro_depth,\n                             module_id,\n                             file_id: file_id.into(),\n                             raw_items: &raw_items,\n@@ -887,6 +902,7 @@ where\n                 module_id: self.module_id,\n                 ast_id,\n                 legacy: Some(macro_call_id),\n+                depth: self.macro_depth + 1,\n             });\n \n             return;\n@@ -902,6 +918,7 @@ where\n             module_id: self.module_id,\n             ast_id,\n             legacy: None,\n+            depth: self.macro_depth + 1,\n         });\n     }\n \n@@ -971,13 +988,26 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_macro_expand_will_stop() {\n+    fn test_macro_expand_will_stop_1() {\n+        do_resolve(\n+            r#\"\n+        macro_rules! foo {\n+            ($($ty:ty)*) => { foo!($($ty)*); }\n+        }\n+        foo!(KABOOM);\n+        \"#,\n+        );\n+    }\n+\n+    #[ignore] // this test does succeed, but takes quite a while :/\n+    #[test]\n+    fn test_macro_expand_will_stop_2() {\n         do_resolve(\n             r#\"\n         macro_rules! foo {\n-            ($($ty:ty)*) => { foo!($($ty)*, $($ty)*); }\n+            ($($ty:ty)*) => { foo!($($ty)* $($ty)*); }\n         }\n-foo!(KABOOM);\n+        foo!(KABOOM);\n         \"#,\n         );\n     }"}, {"sha": "321861b161667a79e520e45e33ed903b7bff321f", "filename": "crates/rust-analyzer/src/cargo_target_spec.rs", "status": "modified", "additions": 20, "deletions": 22, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/4c85e53531fc9e2e2c2f1368c01e08e10e190cd5/crates%2Frust-analyzer%2Fsrc%2Fcargo_target_spec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c85e53531fc9e2e2c2f1368c01e08e10e190cd5/crates%2Frust-analyzer%2Fsrc%2Fcargo_target_spec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcargo_target_spec.rs?ref=4c85e53531fc9e2e2c2f1368c01e08e10e190cd5", "patch": "@@ -19,50 +19,48 @@ impl CargoTargetSpec {\n     pub(crate) fn runnable_args(\n         spec: Option<CargoTargetSpec>,\n         kind: &RunnableKind,\n-    ) -> Result<Vec<String>> {\n-        let mut res = Vec::new();\n+    ) -> Result<(Vec<String>, Vec<String>)> {\n+        let mut args = Vec::new();\n+        let mut extra_args = Vec::new();\n         match kind {\n             RunnableKind::Test { test_id } => {\n-                res.push(\"test\".to_string());\n+                args.push(\"test\".to_string());\n                 if let Some(spec) = spec {\n-                    spec.push_to(&mut res);\n+                    spec.push_to(&mut args);\n                 }\n-                res.push(\"--\".to_string());\n-                res.push(test_id.to_string());\n+                extra_args.push(test_id.to_string());\n                 if let TestId::Path(_) = test_id {\n-                    res.push(\"--exact\".to_string());\n+                    extra_args.push(\"--exact\".to_string());\n                 }\n-                res.push(\"--nocapture\".to_string());\n+                extra_args.push(\"--nocapture\".to_string());\n             }\n             RunnableKind::TestMod { path } => {\n-                res.push(\"test\".to_string());\n+                args.push(\"test\".to_string());\n                 if let Some(spec) = spec {\n-                    spec.push_to(&mut res);\n+                    spec.push_to(&mut args);\n                 }\n-                res.push(\"--\".to_string());\n-                res.push(path.to_string());\n-                res.push(\"--nocapture\".to_string());\n+                extra_args.push(path.to_string());\n+                extra_args.push(\"--nocapture\".to_string());\n             }\n             RunnableKind::Bench { test_id } => {\n-                res.push(\"bench\".to_string());\n+                args.push(\"bench\".to_string());\n                 if let Some(spec) = spec {\n-                    spec.push_to(&mut res);\n+                    spec.push_to(&mut args);\n                 }\n-                res.push(\"--\".to_string());\n-                res.push(test_id.to_string());\n+                extra_args.push(test_id.to_string());\n                 if let TestId::Path(_) = test_id {\n-                    res.push(\"--exact\".to_string());\n+                    extra_args.push(\"--exact\".to_string());\n                 }\n-                res.push(\"--nocapture\".to_string());\n+                extra_args.push(\"--nocapture\".to_string());\n             }\n             RunnableKind::Bin => {\n-                res.push(\"run\".to_string());\n+                args.push(\"run\".to_string());\n                 if let Some(spec) = spec {\n-                    spec.push_to(&mut res);\n+                    spec.push_to(&mut args);\n                 }\n             }\n         }\n-        Ok(res)\n+        Ok((args, extra_args))\n     }\n \n     pub(crate) fn for_file("}, {"sha": "6b9a11a879f2c07c557982cfaf82569a96c97ef3", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c85e53531fc9e2e2c2f1368c01e08e10e190cd5/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c85e53531fc9e2e2c2f1368c01e08e10e190cd5/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=4c85e53531fc9e2e2c2f1368c01e08e10e190cd5", "patch": "@@ -55,6 +55,9 @@ pub struct ServerConfig {\n \n     /// Cargo feature configurations.\n     pub cargo_features: CargoFeatures,\n+\n+    /// Enabled if the vscode_lldb extension is available.\n+    pub vscode_lldb: bool,\n }\n \n impl Default for ServerConfig {\n@@ -76,6 +79,7 @@ impl Default for ServerConfig {\n             additional_out_dirs: FxHashMap::default(),\n             cargo_features: Default::default(),\n             rustfmt_args: Vec::new(),\n+            vscode_lldb: false,\n         }\n     }\n }"}, {"sha": "eb29e8322b2201b408e799ca82717d6f95b91ee6", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4c85e53531fc9e2e2c2f1368c01e08e10e190cd5/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c85e53531fc9e2e2c2f1368c01e08e10e190cd5/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=4c85e53531fc9e2e2c2f1368c01e08e10e190cd5", "patch": "@@ -189,6 +189,7 @@ pub fn main_loop(\n                     all_targets: config.cargo_watch_all_targets,\n                 },\n                 rustfmt_args: config.rustfmt_args,\n+                vscode_lldb: config.vscode_lldb,\n             }\n         };\n "}, {"sha": "df3622d61fc14239ac73f21b0eae523e71b467fa", "filename": "crates/rust-analyzer/src/main_loop/handlers.rs", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4c85e53531fc9e2e2c2f1368c01e08e10e190cd5/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c85e53531fc9e2e2c2f1368c01e08e10e190cd5/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=4c85e53531fc9e2e2c2f1368c01e08e10e190cd5", "patch": "@@ -381,6 +381,7 @@ pub fn handle_runnables(\n         label,\n         bin: \"cargo\".to_string(),\n         args: check_args,\n+        extra_args: Vec::new(),\n         env: FxHashMap::default(),\n         cwd: workspace_root.map(|root| root.to_string_lossy().to_string()),\n     });\n@@ -794,18 +795,35 @@ pub fn handle_code_lens(\n             RunnableKind::Bin => \"Run\",\n         }\n         .to_string();\n-        let r = to_lsp_runnable(&world, file_id, runnable)?;\n+        let mut r = to_lsp_runnable(&world, file_id, runnable)?;\n         let lens = CodeLens {\n             range: r.range,\n             command: Some(Command {\n                 title,\n                 command: \"rust-analyzer.runSingle\".into(),\n-                arguments: Some(vec![to_value(r).unwrap()]),\n+                arguments: Some(vec![to_value(&r).unwrap()]),\n             }),\n             data: None,\n         };\n-\n         lenses.push(lens);\n+\n+        if world.options.vscode_lldb {\n+            if r.args[0] == \"run\" {\n+                r.args[0] = \"build\".into();\n+            } else {\n+                r.args.push(\"--no-run\".into());\n+            }\n+            let debug_lens = CodeLens {\n+                range: r.range,\n+                command: Some(Command {\n+                    title: \"Debug\".into(),\n+                    command: \"rust-analyzer.debugSingle\".into(),\n+                    arguments: Some(vec![to_value(r).unwrap()]),\n+                }),\n+                data: None,\n+            };\n+            lenses.push(debug_lens);\n+        }\n     }\n \n     // Handle impls\n@@ -952,7 +970,7 @@ fn to_lsp_runnable(\n     runnable: Runnable,\n ) -> Result<req::Runnable> {\n     let spec = CargoTargetSpec::for_file(world, file_id)?;\n-    let args = CargoTargetSpec::runnable_args(spec, &runnable.kind)?;\n+    let (args, extra_args) = CargoTargetSpec::runnable_args(spec, &runnable.kind)?;\n     let line_index = world.analysis().file_line_index(file_id)?;\n     let label = match &runnable.kind {\n         RunnableKind::Test { test_id } => format!(\"test {}\", test_id),\n@@ -965,6 +983,7 @@ fn to_lsp_runnable(\n         label,\n         bin: \"cargo\".to_string(),\n         args,\n+        extra_args,\n         env: {\n             let mut m = FxHashMap::default();\n             m.insert(\"RUST_BACKTRACE\".to_string(), \"short\".to_string());\n@@ -973,6 +992,7 @@ fn to_lsp_runnable(\n         cwd: world.workspace_root_for(file_id).map(|root| root.to_string_lossy().to_string()),\n     })\n }\n+\n fn highlight(world: &WorldSnapshot, file_id: FileId) -> Result<Vec<Decoration>> {\n     let line_index = world.analysis().file_line_index(file_id)?;\n     let res = world"}, {"sha": "156328df8fbd14a3381047756ce0d6f35cddef0d", "filename": "crates/rust-analyzer/src/req.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4c85e53531fc9e2e2c2f1368c01e08e10e190cd5/crates%2Frust-analyzer%2Fsrc%2Freq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c85e53531fc9e2e2c2f1368c01e08e10e190cd5/crates%2Frust-analyzer%2Fsrc%2Freq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freq.rs?ref=4c85e53531fc9e2e2c2f1368c01e08e10e190cd5", "patch": "@@ -169,6 +169,7 @@ pub struct Runnable {\n     pub label: String,\n     pub bin: String,\n     pub args: Vec<String>,\n+    pub extra_args: Vec<String>,\n     pub env: FxHashMap<String, String>,\n     pub cwd: Option<String>,\n }"}, {"sha": "5743471bfde276d0b91d53baffc360dd39b3fca6", "filename": "crates/rust-analyzer/src/world.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4c85e53531fc9e2e2c2f1368c01e08e10e190cd5/crates%2Frust-analyzer%2Fsrc%2Fworld.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c85e53531fc9e2e2c2f1368c01e08e10e190cd5/crates%2Frust-analyzer%2Fsrc%2Fworld.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fworld.rs?ref=4c85e53531fc9e2e2c2f1368c01e08e10e190cd5", "patch": "@@ -38,6 +38,7 @@ pub struct Options {\n     pub inlay_hints: InlayHintsOptions,\n     pub rustfmt_args: Vec<String>,\n     pub cargo_watch: CheckOptions,\n+    pub vscode_lldb: bool,\n }\n \n /// `WorldState` is the primary mutable state of the language server"}, {"sha": "145429571c4b722549fc78e4845917309ef007a8", "filename": "crates/rust-analyzer/tests/heavy_tests/main.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4c85e53531fc9e2e2c2f1368c01e08e10e190cd5/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c85e53531fc9e2e2c2f1368c01e08e10e190cd5/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fmain.rs?ref=4c85e53531fc9e2e2c2f1368c01e08e10e190cd5", "patch": "@@ -75,7 +75,8 @@ fn foo() {\n         RunnablesParams { text_document: server.doc_id(\"lib.rs\"), position: None },\n         json!([\n           {\n-            \"args\": [ \"test\", \"--\", \"foo\", \"--nocapture\" ],\n+            \"args\": [ \"test\" ],\n+            \"extraArgs\": [ \"foo\", \"--nocapture\" ],\n             \"bin\": \"cargo\",\n             \"env\": { \"RUST_BACKTRACE\": \"short\" },\n             \"cwd\": null,\n@@ -90,6 +91,7 @@ fn foo() {\n               \"check\",\n               \"--all\"\n             ],\n+            \"extraArgs\": [],\n             \"bin\": \"cargo\",\n             \"env\": {},\n             \"cwd\": null,\n@@ -141,13 +143,11 @@ fn main() {}\n \n     server.wait_until_workspace_is_loaded();\n     server.request::<Runnables>(\n-        RunnablesParams {\n-            text_document: server.doc_id(\"foo/tests/spam.rs\"),\n-            position: None,\n-        },\n+        RunnablesParams { text_document: server.doc_id(\"foo/tests/spam.rs\"), position: None },\n         json!([\n           {\n-            \"args\": [ \"test\", \"--package\", \"foo\", \"--test\", \"spam\", \"--\", \"test_eggs\", \"--exact\", \"--nocapture\" ],\n+            \"args\": [ \"test\", \"--package\", \"foo\", \"--test\", \"spam\" ],\n+            \"extraArgs\": [ \"test_eggs\", \"--exact\", \"--nocapture\" ],\n             \"bin\": \"cargo\",\n             \"env\": { \"RUST_BACKTRACE\": \"short\" },\n             \"label\": \"test test_eggs\",\n@@ -165,6 +165,7 @@ fn main() {}\n               \"--test\",\n               \"spam\"\n             ],\n+            \"extraArgs\": [],\n             \"bin\": \"cargo\",\n             \"env\": {},\n             \"cwd\": server.path().join(\"foo\"),\n@@ -180,7 +181,7 @@ fn main() {}\n               }\n             }\n           }\n-        ])\n+        ]),\n     );\n }\n "}, {"sha": "d654542754273f2d6aa29fad8eae48720ce38a21", "filename": "editors/code/src/client.ts", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4c85e53531fc9e2e2c2f1368c01e08e10e190cd5/editors%2Fcode%2Fsrc%2Fclient.ts", "raw_url": "https://github.com/rust-lang/rust/raw/4c85e53531fc9e2e2c2f1368c01e08e10e190cd5/editors%2Fcode%2Fsrc%2Fclient.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fclient.ts?ref=4c85e53531fc9e2e2c2f1368c01e08e10e190cd5", "patch": "@@ -46,6 +46,7 @@ export async function createClient(config: Config, serverPath: string): Promise<\n             withSysroot: config.withSysroot,\n             cargoFeatures: config.cargoFeatures,\n             rustfmtArgs: config.rustfmtArgs,\n+            vscodeLldb: vscode.extensions.getExtension(\"vadimcn.vscode-lldb\") != null,\n         },\n         traceOutputChannel,\n         middleware: {"}, {"sha": "357155163d7612191093ae2d8548829b8e429d67", "filename": "editors/code/src/commands/runnables.ts", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4c85e53531fc9e2e2c2f1368c01e08e10e190cd5/editors%2Fcode%2Fsrc%2Fcommands%2Frunnables.ts", "raw_url": "https://github.com/rust-lang/rust/raw/4c85e53531fc9e2e2c2f1368c01e08e10e190cd5/editors%2Fcode%2Fsrc%2Fcommands%2Frunnables.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Frunnables.ts?ref=4c85e53531fc9e2e2c2f1368c01e08e10e190cd5", "patch": "@@ -62,6 +62,26 @@ export function runSingle(ctx: Ctx): Cmd {\n     };\n }\n \n+export function debugSingle(ctx: Ctx): Cmd {\n+    return async (config: ra.Runnable) => {\n+        const editor = ctx.activeRustEditor;\n+        if (!editor) return;\n+\n+        const debugConfig = {\n+            type: \"lldb\",\n+            request: \"launch\",\n+            name: config.label,\n+            cargo: {\n+                args: config.args,\n+            },\n+            args: config.extraArgs,\n+            cwd: config.cwd\n+        };\n+\n+        return vscode.debug.startDebugging(undefined, debugConfig);\n+    };\n+}\n+\n class RunnableQuickPick implements vscode.QuickPickItem {\n     public label: string;\n     public description?: string | undefined;\n@@ -87,7 +107,7 @@ function createTask(spec: ra.Runnable): vscode.Task {\n         type: 'cargo',\n         label: spec.label,\n         command: spec.bin,\n-        args: spec.args,\n+        args: spec.extraArgs ? [...spec.args, '--', ...spec.extraArgs] : spec.args,\n         env: spec.env,\n     };\n "}, {"sha": "e01c89cc7c7b03032532cfb38ed1f459e25ef5ea", "filename": "editors/code/src/main.ts", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4c85e53531fc9e2e2c2f1368c01e08e10e190cd5/editors%2Fcode%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/4c85e53531fc9e2e2c2f1368c01e08e10e190cd5/editors%2Fcode%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fmain.ts?ref=4c85e53531fc9e2e2c2f1368c01e08e10e190cd5", "patch": "@@ -83,6 +83,7 @@ export async function activate(context: vscode.ExtensionContext) {\n \n     // Internal commands which are invoked by the server.\n     ctx.registerCommand('runSingle', commands.runSingle);\n+    ctx.registerCommand('debugSingle', commands.debugSingle);\n     ctx.registerCommand('showReferences', commands.showReferences);\n     ctx.registerCommand('applySourceChange', commands.applySourceChange);\n     ctx.registerCommand('selectAndApplySourceChange', commands.selectAndApplySourceChange);"}, {"sha": "e09a203c9faea835254ea8d1cba6cc80f5ff2e21", "filename": "editors/code/src/rust-analyzer-api.ts", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4c85e53531fc9e2e2c2f1368c01e08e10e190cd5/editors%2Fcode%2Fsrc%2Frust-analyzer-api.ts", "raw_url": "https://github.com/rust-lang/rust/raw/4c85e53531fc9e2e2c2f1368c01e08e10e190cd5/editors%2Fcode%2Fsrc%2Frust-analyzer-api.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Frust-analyzer-api.ts?ref=4c85e53531fc9e2e2c2f1368c01e08e10e190cd5", "patch": "@@ -80,13 +80,12 @@ export interface Runnable {\n     label: string;\n     bin: string;\n     args: Vec<string>;\n+    extraArgs: Vec<string>;\n     env: FxHashMap<string, string>;\n     cwd: Option<string>;\n }\n export const runnables = request<RunnablesParams, Vec<Runnable>>(\"runnables\");\n \n-\n-\n export type InlayHint = InlayHint.TypeHint | InlayHint.ParamHint;\n \n export namespace InlayHint {"}]}