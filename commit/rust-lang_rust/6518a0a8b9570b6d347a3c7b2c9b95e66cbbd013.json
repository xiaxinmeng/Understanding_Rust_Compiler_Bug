{"sha": "6518a0a8b9570b6d347a3c7b2c9b95e66cbbd013", "node_id": "C_kwDOAAsO6NoAKDY1MThhMGE4Yjk1NzBiNmQzNDdhM2M3YjJjOWI5NWU2NmNiYmQwMTM", "commit": {"author": {"name": "Mukund Lakshman", "email": "yaymukund@gmail.com", "date": "2021-10-05T01:08:58Z"}, "committer": {"name": "Mukund Lakshman", "email": "yaymukund@gmail.com", "date": "2021-10-05T02:28:02Z"}, "message": "Change `Markdown(...)` to `Markdown { ... }`", "tree": {"sha": "88cc28bc7d68239f61f22f851813b84f2e90666d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/88cc28bc7d68239f61f22f851813b84f2e90666d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6518a0a8b9570b6d347a3c7b2c9b95e66cbbd013", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6518a0a8b9570b6d347a3c7b2c9b95e66cbbd013", "html_url": "https://github.com/rust-lang/rust/commit/6518a0a8b9570b6d347a3c7b2c9b95e66cbbd013", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6518a0a8b9570b6d347a3c7b2c9b95e66cbbd013/comments", "author": null, "committer": null, "parents": [{"sha": "4a6aa6e4063a8ecd9810c04a5dae9e8ff2f664d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a6aa6e4063a8ecd9810c04a5dae9e8ff2f664d6", "html_url": "https://github.com/rust-lang/rust/commit/4a6aa6e4063a8ecd9810c04a5dae9e8ff2f664d6"}], "stats": {"total": 155, "additions": 108, "deletions": 47}, "files": [{"sha": "5cb654a606f34318dd26e47e91a2907aecd0690b", "filename": "src/librustdoc/externalfiles.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6518a0a8b9570b6d347a3c7b2c9b95e66cbbd013/src%2Flibrustdoc%2Fexternalfiles.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6518a0a8b9570b6d347a3c7b2c9b95e66cbbd013/src%2Flibrustdoc%2Fexternalfiles.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fexternalfiles.rs?ref=6518a0a8b9570b6d347a3c7b2c9b95e66cbbd013", "patch": "@@ -39,14 +39,32 @@ impl ExternalHtml {\n         let bc = format!(\n             \"{}{}\",\n             bc,\n-            Markdown(&m_bc, &[], id_map, codes, edition, playground, 0).into_string()\n+            Markdown {\n+                content: &m_bc,\n+                links: &[],\n+                ids: id_map,\n+                error_codes: codes,\n+                edition,\n+                playground,\n+                heading_level: 0\n+            }\n+            .into_string()\n         );\n         let ac = load_external_files(after_content, diag)?;\n         let m_ac = load_external_files(md_after_content, diag)?;\n         let ac = format!(\n             \"{}{}\",\n             ac,\n-            Markdown(&m_ac, &[], id_map, codes, edition, playground, 0).into_string()\n+            Markdown {\n+                content: &m_ac,\n+                links: &[],\n+                ids: id_map,\n+                error_codes: codes,\n+                edition,\n+                playground,\n+                heading_level: 0\n+            }\n+            .into_string()\n         );\n         Some(ExternalHtml { in_header: ih, before_content: bc, after_content: ac })\n     }"}, {"sha": "da1482f4e69695fcb31c3a05384e5baeaa10e7a1", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 30, "deletions": 12, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/6518a0a8b9570b6d347a3c7b2c9b95e66cbbd013/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6518a0a8b9570b6d347a3c7b2c9b95e66cbbd013/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=6518a0a8b9570b6d347a3c7b2c9b95e66cbbd013", "patch": "@@ -12,7 +12,15 @@\n //!\n //! let s = \"My *markdown* _text_\";\n //! let mut id_map = IdMap::new();\n-//! let md = Markdown(s, &[], &mut id_map, ErrorCodes::Yes, Edition::Edition2015, &None, 0);\n+//! let md = Markdown {\n+//!     content: s,\n+//!     links: &[],\n+//!     ids: &mut id_map,\n+//!     error_codes: ErrorCodes::Yes,\n+//!     edition: Edition::Edition2015,\n+//!     playground: &None,\n+//!     heading_level: 0\n+//! };\n //! let html = md.into_string();\n //! // ... something using html\n //! ```\n@@ -69,19 +77,21 @@ pub(crate) fn summary_opts() -> Options {\n \n /// When `to_string` is called, this struct will emit the HTML corresponding to\n /// the rendered version of the contained markdown string.\n-pub struct Markdown<'a>(\n-    pub &'a str,\n+pub struct Markdown<'a> {\n+    pub content: &'a str,\n     /// A list of link replacements.\n-    pub &'a [RenderedLink],\n+    pub links: &'a [RenderedLink],\n     /// The current list of used header IDs.\n-    pub &'a mut IdMap,\n+    pub ids: &'a mut IdMap,\n     /// Whether to allow the use of explicit error codes in doctest lang strings.\n-    pub ErrorCodes,\n+    pub error_codes: ErrorCodes,\n     /// Default edition to use when parsing doctests (to add a `fn main`).\n-    pub Edition,\n-    pub &'a Option<Playground>,\n-    pub u32,\n-);\n+    pub edition: Edition,\n+    pub playground: &'a Option<Playground>,\n+    /// Offset at which we render headings.\n+    /// E.g. if `heading_level: 1`, then `# something` renders an `<h2>` instead of `<h1>`\n+    pub heading_level: u32,\n+}\n /// A tuple struct like `Markdown` that renders the markdown with a table of contents.\n crate struct MarkdownWithToc<'a>(\n     crate &'a str,\n@@ -1010,7 +1020,15 @@ impl LangString {\n \n impl Markdown<'_> {\n     pub fn into_string(self) -> String {\n-        let Markdown(md, links, mut ids, codes, edition, playground, level) = self;\n+        let Markdown {\n+            content: md,\n+            links,\n+            mut ids,\n+            error_codes: codes,\n+            edition,\n+            playground,\n+            heading_level,\n+        } = self;\n \n         // This is actually common enough to special-case\n         if md.is_empty() {\n@@ -1031,7 +1049,7 @@ impl Markdown<'_> {\n \n         let mut s = String::with_capacity(md.len() * 3 / 2);\n \n-        let p = HeadingLinks::new(p, None, &mut ids, level);\n+        let p = HeadingLinks::new(p, None, &mut ids, heading_level);\n         let p = Footnotes::new(p);\n         let p = LinkReplacer::new(p.map(|(ev, _)| ev), links);\n         let p = TableWrapper::new(p);"}, {"sha": "b2c18c24011d644ae6f7a1f68889a09b783f8615", "filename": "src/librustdoc/html/markdown/tests.rs", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6518a0a8b9570b6d347a3c7b2c9b95e66cbbd013/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6518a0a8b9570b6d347a3c7b2c9b95e66cbbd013/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs?ref=6518a0a8b9570b6d347a3c7b2c9b95e66cbbd013", "patch": "@@ -147,8 +147,16 @@ fn test_lang_string_tokenizer() {\n fn test_header() {\n     fn t(input: &str, expect: &str) {\n         let mut map = IdMap::new();\n-        let output = Markdown(input, &[], &mut map, ErrorCodes::Yes, DEFAULT_EDITION, &None, 0)\n-            .into_string();\n+        let output = Markdown {\n+            content: input,\n+            links: &[],\n+            ids: &mut map,\n+            error_codes: ErrorCodes::Yes,\n+            edition: DEFAULT_EDITION,\n+            playground: &None,\n+            heading_level: 0,\n+        }\n+        .into_string();\n         assert_eq!(output, expect, \"original: {}\", input);\n     }\n \n@@ -181,8 +189,16 @@ fn test_header() {\n fn test_header_ids_multiple_blocks() {\n     let mut map = IdMap::new();\n     fn t(map: &mut IdMap, input: &str, expect: &str) {\n-        let output =\n-            Markdown(input, &[], map, ErrorCodes::Yes, DEFAULT_EDITION, &None, 0).into_string();\n+        let output = Markdown {\n+            content: input,\n+            links: &[],\n+            ids: map,\n+            error_codes: ErrorCodes::Yes,\n+            edition: DEFAULT_EDITION,\n+            playground: &None,\n+            heading_level: 0,\n+        }\n+        .into_string();\n         assert_eq!(output, expect, \"original: {}\", input);\n     }\n "}, {"sha": "164d745336823c1aa04d383d2f04e038c5f0d771", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/6518a0a8b9570b6d347a3c7b2c9b95e66cbbd013/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6518a0a8b9570b6d347a3c7b2c9b95e66cbbd013/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=6518a0a8b9570b6d347a3c7b2c9b95e66cbbd013", "patch": "@@ -498,21 +498,21 @@ fn render_markdown(\n     cx: &Context<'_>,\n     md_text: &str,\n     links: Vec<RenderedLink>,\n-    level: u32,\n+    heading_level: u32,\n ) {\n     let mut ids = cx.id_map.borrow_mut();\n     write!(\n         w,\n         \"<div class=\\\"docblock\\\">{}</div>\",\n-        Markdown(\n-            md_text,\n-            &links,\n-            &mut ids,\n-            cx.shared.codes,\n-            cx.shared.edition(),\n-            &cx.shared.playground,\n-            level\n-        )\n+        Markdown {\n+            content: md_text,\n+            links: &links,\n+            ids: &mut ids,\n+            error_codes: cx.shared.codes,\n+            edition: cx.shared.edition(),\n+            playground: &cx.shared.playground,\n+            heading_level,\n+        }\n         .into_string()\n     )\n }\n@@ -1596,15 +1596,15 @@ fn render_impl(\n             write!(\n                 w,\n                 \"<div class=\\\"docblock\\\">{}</div>\",\n-                Markdown(\n-                    &*dox,\n-                    &i.impl_item.links(cx),\n-                    &mut ids,\n-                    cx.shared.codes,\n-                    cx.shared.edition(),\n-                    &cx.shared.playground,\n-                    0\n-                )\n+                Markdown {\n+                    content: &*dox,\n+                    links: &i.impl_item.links(cx),\n+                    ids: &mut ids,\n+                    error_codes: cx.shared.codes,\n+                    edition: cx.shared.edition(),\n+                    playground: &cx.shared.playground,\n+                    heading_level: 0\n+                }\n                 .into_string()\n             );\n         }"}, {"sha": "962712f5b91759c1855eac058d85660fd5b67699", "filename": "src/librustdoc/markdown.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6518a0a8b9570b6d347a3c7b2c9b95e66cbbd013/src%2Flibrustdoc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6518a0a8b9570b6d347a3c7b2c9b95e66cbbd013/src%2Flibrustdoc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown.rs?ref=6518a0a8b9570b6d347a3c7b2c9b95e66cbbd013", "patch": "@@ -70,7 +70,16 @@ crate fn render<P: AsRef<Path>>(\n     let text = if !options.markdown_no_toc {\n         MarkdownWithToc(text, &mut ids, error_codes, edition, &playground).into_string()\n     } else {\n-        Markdown(text, &[], &mut ids, error_codes, edition, &playground, 0).into_string()\n+        Markdown {\n+            content: text,\n+            links: &[],\n+            ids: &mut ids,\n+            error_codes,\n+            edition,\n+            playground: &playground,\n+            heading_level: 0,\n+        }\n+        .into_string()\n     };\n \n     let err = write!("}, {"sha": "f3c5d65935f6620c4b958064b11f046c13aba5ef", "filename": "src/tools/error_index_generator/main.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6518a0a8b9570b6d347a3c7b2c9b95e66cbbd013/src%2Ftools%2Ferror_index_generator%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6518a0a8b9570b6d347a3c7b2c9b95e66cbbd013/src%2Ftools%2Ferror_index_generator%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ferror_index_generator%2Fmain.rs?ref=6518a0a8b9570b6d347a3c7b2c9b95e66cbbd013", "patch": "@@ -119,15 +119,15 @@ impl Formatter for HTMLFormatter {\n                 write!(\n                     output,\n                     \"{}\",\n-                    Markdown(\n-                        desc,\n-                        &[],\n-                        &mut id_map,\n-                        ErrorCodes::Yes,\n-                        DEFAULT_EDITION,\n-                        &Some(playground),\n-                        0\n-                    )\n+                    Markdown {\n+                        content: desc,\n+                        links: &[],\n+                        ids: &mut id_map,\n+                        error_codes: ErrorCodes::Yes,\n+                        edition: DEFAULT_EDITION,\n+                        playground: &Some(playground),\n+                        heading_level: 0\n+                    }\n                     .into_string()\n                 )?\n             }"}]}