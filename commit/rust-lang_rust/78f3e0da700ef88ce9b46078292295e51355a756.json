{"sha": "78f3e0da700ef88ce9b46078292295e51355a756", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4ZjNlMGRhNzAwZWY4OGNlOWI0NjA3ODI5MjI5NWU1MTM1NWE3NTY=", "commit": {"author": {"name": "Luqman Aden", "email": "laden@mozilla.com", "date": "2013-02-15T08:37:08Z"}, "committer": {"name": "Luqman Aden", "email": "laden@mozilla.com", "date": "2013-02-15T10:49:54Z"}, "message": "librustdoc: Get rid of `move`.", "tree": {"sha": "094d863ecc15af76f540338b6e663ec6a2534380", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/094d863ecc15af76f540338b6e663ec6a2534380"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78f3e0da700ef88ce9b46078292295e51355a756", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78f3e0da700ef88ce9b46078292295e51355a756", "html_url": "https://github.com/rust-lang/rust/commit/78f3e0da700ef88ce9b46078292295e51355a756", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78f3e0da700ef88ce9b46078292295e51355a756/comments", "author": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "committer": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b7d27c2a7311836f6b131759d4402cb48dadb51", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b7d27c2a7311836f6b131759d4402cb48dadb51", "html_url": "https://github.com/rust-lang/rust/commit/4b7d27c2a7311836f6b131759d4402cb48dadb51"}], "stats": {"total": 92, "additions": 46, "deletions": 46}, "files": [{"sha": "f34a7ffbbdbcf9a3c10abfb8627947f0f572eb8f", "filename": "src/librustdoc/astsrv.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/78f3e0da700ef88ce9b46078292295e51355a756/src%2Flibrustdoc%2Fastsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78f3e0da700ef88ce9b46078292295e51355a756/src%2Flibrustdoc%2Fastsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fastsrv.rs?ref=78f3e0da700ef88ce9b46078292295e51355a756", "patch": "@@ -91,7 +91,7 @@ fn run<T>(owner: SrvOwner<T>, source: ~str, parse: Parser) -> T {\n \n     let res = owner(srv_.clone());\n     srv_.ch.send(Exit);\n-    move res\n+    res\n }\n \n fn act(po: &Port<Msg>, source: ~str, parse: Parser) {\n@@ -120,10 +120,10 @@ pub fn exec<T:Owned>(\n     f: fn~(ctxt: Ctxt) -> T\n ) -> T {\n     let (po, ch) = stream();\n-    let msg = HandleRequest(fn~(move f, ctxt: Ctxt) {\n+    let msg = HandleRequest(fn~(ctxt: Ctxt) {\n         ch.send(f(ctxt))\n     });\n-    srv.ch.send(move msg);\n+    srv.ch.send(msg);\n     po.recv()\n }\n "}, {"sha": "85ac952d6d4813fe0563f4df0774134b405b04f8", "filename": "src/librustdoc/attr_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78f3e0da700ef88ce9b46078292295e51355a756/src%2Flibrustdoc%2Fattr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78f3e0da700ef88ce9b46078292295e51355a756/src%2Flibrustdoc%2Fattr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fattr_pass.rs?ref=78f3e0da700ef88ce9b46078292295e51355a756", "patch": "@@ -115,7 +115,7 @@ fn parse_item_attrs<T:Owned>(\n     srv: astsrv::Srv,\n     id: doc::AstId,\n     parse_attrs: fn~(a: ~[ast::attribute]) -> T) -> T {\n-    do astsrv::exec(srv) |move parse_attrs, ctxt| {\n+    do astsrv::exec(srv) |ctxt| {\n         let attrs = match ctxt.ast_map.get(&id) {\n           ast_map::node_item(item, _) => copy item.attrs,\n           ast_map::node_foreign_item(item, _, _) => copy item.attrs,"}, {"sha": "ceea3d0e798d22353b0b9436a7546b202daf4c33", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/78f3e0da700ef88ce9b46078292295e51355a756/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78f3e0da700ef88ce9b46078292295e51355a756/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=78f3e0da700ef88ce9b46078292295e51355a756", "patch": "@@ -133,7 +133,7 @@ pub fn parse_config_(\n         result::Ok(matches) => {\n             if matches.free.len() == 1 {\n                 let input_crate = Path(vec::head(matches.free));\n-                config_from_opts(&input_crate, &matches, move program_output)\n+                config_from_opts(&input_crate, &matches, program_output)\n             } else if matches.free.is_empty() {\n                 result::Err(~\"no crates specified\")\n             } else {\n@@ -191,11 +191,11 @@ fn config_from_opts(\n             }\n         }\n     };\n-    let program_output = Cell(move program_output);\n+    let program_output = Cell(program_output);\n     let result = do result::chain(result) |config| {\n         let pandoc_cmd = getopts::opt_maybe_str(matches, opt_pandoc_cmd());\n         let pandoc_cmd = maybe_find_pandoc(\n-            &config, pandoc_cmd, move program_output.take());\n+            &config, pandoc_cmd, program_output.take());\n         do result::chain(pandoc_cmd) |pandoc_cmd| {\n             result::Ok(Config {\n                 pandoc_cmd: pandoc_cmd,\n@@ -268,7 +268,7 @@ fn should_find_pandoc() {\n             status: 0, out: ~\"pandoc 1.8.2.1\", err: ~\"\"\n         }\n     };\n-    let result = maybe_find_pandoc(&config, None, move mock_program_output);\n+    let result = maybe_find_pandoc(&config, None, mock_program_output);\n     assert result == result::Ok(Some(~\"pandoc\"));\n }\n \n@@ -284,7 +284,7 @@ fn should_error_with_no_pandoc() {\n             status: 1, out: ~\"\", err: ~\"\"\n         }\n     };\n-    let result = maybe_find_pandoc(&config, None, move mock_program_output);\n+    let result = maybe_find_pandoc(&config, None, mock_program_output);\n     assert result == result::Err(~\"couldn't find pandoc\");\n }\n "}, {"sha": "113cce422c474259ab4ffb5c057cb2e230a29e3d", "filename": "src/librustdoc/fold.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/78f3e0da700ef88ce9b46078292295e51355a756/src%2Flibrustdoc%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78f3e0da700ef88ce9b46078292295e51355a756/src%2Flibrustdoc%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ffold.rs?ref=78f3e0da700ef88ce9b46078292295e51355a756", "patch": "@@ -87,25 +87,25 @@ fn mk_fold<T>(\n     fold_struct: FoldStruct<T>\n ) -> Fold<T> {\n     Fold {\n-        ctxt: move ctxt,\n-        fold_doc: move fold_doc,\n-        fold_crate: move fold_crate,\n-        fold_item: move fold_item,\n-        fold_mod: move fold_mod,\n-        fold_nmod: move fold_nmod,\n-        fold_fn: move fold_fn,\n-        fold_const: move fold_const,\n-        fold_enum: move fold_enum,\n-        fold_trait: move fold_trait,\n-        fold_impl: move fold_impl,\n-        fold_type: move fold_type,\n-        fold_struct: move fold_struct\n+        ctxt: ctxt,\n+        fold_doc: fold_doc,\n+        fold_crate: fold_crate,\n+        fold_item: fold_item,\n+        fold_mod: fold_mod,\n+        fold_nmod: fold_nmod,\n+        fold_fn: fold_fn,\n+        fold_const: fold_const,\n+        fold_enum: fold_enum,\n+        fold_trait: fold_trait,\n+        fold_impl: fold_impl,\n+        fold_type: fold_type,\n+        fold_struct: fold_struct\n     }\n }\n \n pub fn default_any_fold<T: Clone>(ctxt: T) -> Fold<T> {\n     mk_fold(\n-        move ctxt,\n+        ctxt,\n         |f, d| default_seq_fold_doc(f, d),\n         |f, d| default_seq_fold_crate(f, d),\n         |f, d| default_seq_fold_item(f, d),\n@@ -123,7 +123,7 @@ pub fn default_any_fold<T: Clone>(ctxt: T) -> Fold<T> {\n \n pub fn default_seq_fold<T: Clone>(ctxt: T) -> Fold<T> {\n     mk_fold(\n-        move ctxt,\n+        ctxt,\n         |f, d| default_seq_fold_doc(f, d),\n         |f, d| default_seq_fold_crate(f, d),\n         |f, d| default_seq_fold_item(f, d),\n@@ -141,7 +141,7 @@ pub fn default_seq_fold<T: Clone>(ctxt: T) -> Fold<T> {\n \n pub fn default_par_fold<T: Clone>(ctxt: T) -> Fold<T> {\n     mk_fold(\n-        move ctxt,\n+        ctxt,\n         |f, d| default_seq_fold_doc(f, d),\n         |f, d| default_seq_fold_crate(f, d),\n         |f, d| default_seq_fold_item(f, d),"}, {"sha": "6a56a1c66e71a845014221ae1c9a8694109b4cb2", "filename": "src/librustdoc/markdown_pass.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/78f3e0da700ef88ce9b46078292295e51355a756/src%2Flibrustdoc%2Fmarkdown_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78f3e0da700ef88ce9b46078292295e51355a756/src%2Flibrustdoc%2Fmarkdown_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown_pass.rs?ref=78f3e0da700ef88ce9b46078292295e51355a756", "patch": "@@ -74,7 +74,7 @@ fn run(\n         ~\"mods last\", mods_last\n     ).f)(srv, copy doc);\n \n-    write_markdown(sorted_doc, move writer_factory);\n+    write_markdown(sorted_doc, writer_factory);\n \n     return doc;\n }\n@@ -148,7 +148,7 @@ fn should_request_new_writer_for_each_page() {\n     let (srv, doc) = test::create_doc_srv(~\"mod a { }\");\n     // Split the document up into pages\n     let doc = (page_pass::mk_pass(config::DocPerMod).f)(srv, doc);\n-    write_markdown(doc, move writer_factory);\n+    write_markdown(doc, writer_factory);\n     // We expect two pages to have been written\n     for iter::repeat(2) {\n         po.recv();\n@@ -180,7 +180,7 @@ fn should_write_title_for_each_page() {\n     let (srv, doc) = test::create_doc_srv(\n         ~\"#[link(name = \\\"core\\\")]; mod a { }\");\n     let doc = (page_pass::mk_pass(config::DocPerMod).f)(srv, doc);\n-    write_markdown(doc, move writer_factory);\n+    write_markdown(doc, writer_factory);\n     for iter::repeat(2) {\n         let (page, markdown) = po.recv();\n         match page {\n@@ -894,7 +894,7 @@ mod test {\n         doc: doc::Doc\n     ) -> ~str {\n         let (writer_factory, po) = markdown_writer::future_writer_factory();\n-        write_markdown(doc, move writer_factory);\n+        write_markdown(doc, writer_factory);\n         return po.recv().second();\n     }\n \n@@ -903,7 +903,7 @@ mod test {\n         doc: doc::Doc\n     ) -> ~str {\n         let (writer_factory, po) = markdown_writer::future_writer_factory();\n-        let pass = mk_pass(move writer_factory);\n+        let pass = mk_pass(writer_factory);\n         (pass.f)(srv, doc);\n         return po.recv().second();\n     }"}, {"sha": "a6cc517079693efb49f04e8e621b848ff36ed083", "filename": "src/librustdoc/markdown_writer.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/78f3e0da700ef88ce9b46078292295e51355a756/src%2Flibrustdoc%2Fmarkdown_writer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78f3e0da700ef88ce9b46078292295e51355a756/src%2Flibrustdoc%2Fmarkdown_writer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown_writer.rs?ref=78f3e0da700ef88ce9b46078292295e51355a756", "patch": "@@ -129,12 +129,12 @@ fn pandoc_writer(\n         os::close(pipe_in.out);\n \n         let (stdout_po, stdout_ch) = pipes::stream();\n-        do task::spawn_sched(task::SingleThreaded) |move stdout_ch| {\n+        do task::spawn_sched(task::SingleThreaded) || {\n             stdout_ch.send(readclose(pipe_out.in));\n         }\n \n         let (stderr_po, stderr_ch) = pipes::stream();\n-        do task::spawn_sched(task::SingleThreaded) |move stderr_ch| {\n+        do task::spawn_sched(task::SingleThreaded) || {\n             stderr_ch.send(readclose(pipe_err.in));\n         }\n         let stdout = stdout_po.recv();\n@@ -169,7 +169,7 @@ fn readclose(fd: libc::c_int) -> ~str {\n \n fn generic_writer(process: fn~(markdown: ~str)) -> Writer {\n     let (po, ch) = stream::<WriteInstr>();\n-    do task::spawn |move process, move setup_ch| {\n+    do task::spawn || {\n         let mut markdown = ~\"\";\n         let mut keep_going = true;\n         while keep_going {\n@@ -178,7 +178,7 @@ fn generic_writer(process: fn~(markdown: ~str)) -> Writer {\n               Done => keep_going = false\n             }\n         }\n-        process(move markdown);\n+        process(markdown);\n     };\n     fn~(instr: WriteInstr) {\n         ch.send(instr);\n@@ -298,24 +298,24 @@ pub fn future_writer_factory(\n     let writer_factory = fn~(page: doc::Page) -> Writer {\n         let (writer_po, writer_ch) = pipes::stream();\n         let markdown_ch = markdown_ch.clone();\n-        do task::spawn |move writer_ch| {\n+        do task::spawn || {\n             let (writer, future) = future_writer();\n-            writer_ch.send(move writer);\n+            writer_ch.send(writer);\n             let s = future.get();\n             markdown_ch.send((copy page, s));\n         }\n         writer_po.recv()\n     };\n \n-    (move writer_factory, markdown_po)\n+    (writer_factory, markdown_po)\n }\n \n fn future_writer() -> (Writer, future::Future<~str>) {\n     let (port, chan) = pipes::stream();\n-    let writer = fn~(move chan, instr: WriteInstr) {\n+    let writer = fn~(instr: WriteInstr) {\n         chan.send(copy instr);\n     };\n-    let future = do future::from_fn |move port| {\n+    let future = do future::from_fn || {\n         let mut res = ~\"\";\n         loop {\n             match port.recv() {\n@@ -325,5 +325,5 @@ fn future_writer() -> (Writer, future::Future<~str>) {\n         }\n         res\n     };\n-    (move writer, move future)\n+    (writer, future)\n }"}, {"sha": "4971806c7ed8102059c015d3c8ac5b0279478d5d", "filename": "src/librustdoc/page_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78f3e0da700ef88ce9b46078292295e51355a756/src%2Flibrustdoc%2Fpage_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78f3e0da700ef88ce9b46078292295e51355a756/src%2Flibrustdoc%2Fpage_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpage_pass.rs?ref=78f3e0da700ef88ce9b46078292295e51355a756", "patch": "@@ -71,7 +71,7 @@ fn make_doc_from_pages(page_port: &PagePort) -> doc::Doc {\n     loop {\n         let val = page_port.recv();\n         if val.is_some() {\n-            pages += ~[option::unwrap(move val)];\n+            pages += ~[option::unwrap(val)];\n         } else {\n             break;\n         }"}, {"sha": "ac50221445f7364aec453b4a5cbb13013b8f94f7", "filename": "src/librustdoc/path_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78f3e0da700ef88ce9b46078292295e51355a756/src%2Flibrustdoc%2Fpath_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78f3e0da700ef88ce9b46078292295e51355a756/src%2Flibrustdoc%2Fpath_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpath_pass.rs?ref=78f3e0da700ef88ce9b46078292295e51355a756", "patch": "@@ -54,7 +54,7 @@ fn run(srv: astsrv::Srv, doc: doc::Doc) -> doc::Doc {\n         fold_item: fold_item,\n         fold_mod: fold_mod,\n         fold_nmod: fold_nmod,\n-        .. fold::default_any_fold(move ctxt)\n+        .. fold::default_any_fold(ctxt)\n     };\n     (fold.fold_doc)(&fold, doc)\n }"}, {"sha": "7d94352cc8233ac791f20f8db55ee05452581a43", "filename": "src/librustdoc/rustdoc.rc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78f3e0da700ef88ce9b46078292295e51355a756/src%2Flibrustdoc%2Frustdoc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/78f3e0da700ef88ce9b46078292295e51355a756/src%2Flibrustdoc%2Frustdoc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Frustdoc.rc?ref=78f3e0da700ef88ce9b46078292295e51355a756", "patch": "@@ -149,5 +149,5 @@ fn time<T>(what: ~str, f: fn() -> T) -> T {\n     let rv = f();\n     let end = std::time::precise_time_s();\n     info!(\"time: %3.3f s    %s\", end - start, what);\n-    move rv\n+    rv\n }"}, {"sha": "3bdb08974044d778376dbcd383908852ed51902c", "filename": "src/librustdoc/sort_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78f3e0da700ef88ce9b46078292295e51355a756/src%2Flibrustdoc%2Fsort_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78f3e0da700ef88ce9b46078292295e51355a756/src%2Flibrustdoc%2Fsort_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fsort_pass.rs?ref=78f3e0da700ef88ce9b46078292295e51355a756", "patch": "@@ -42,7 +42,7 @@ fn run(\n ) -> doc::Doc {\n     let fold = Fold {\n         fold_mod: fold_mod,\n-        .. fold::default_any_fold(move lteq)\n+        .. fold::default_any_fold(lteq)\n     };\n     (fold.fold_doc)(&fold, doc)\n }"}, {"sha": "ab1d77a36db406334b0d9964df303e72c30070ad", "filename": "src/librustdoc/text_pass.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/78f3e0da700ef88ce9b46078292295e51355a756/src%2Flibrustdoc%2Ftext_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78f3e0da700ef88ce9b46078292295e51355a756/src%2Flibrustdoc%2Ftext_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftext_pass.rs?ref=78f3e0da700ef88ce9b46078292295e51355a756", "patch": "@@ -42,14 +42,14 @@ fn run(\n     op: Op\n ) -> doc::Doc {\n     let op = NominalOp {\n-        op: move op\n+        op: op\n     };\n     let fold = Fold {\n         fold_item: fold_item,\n         fold_enum: fold_enum,\n         fold_trait: fold_trait,\n         fold_impl: fold_impl,\n-        .. fold::default_any_fold(move op)\n+        .. fold::default_any_fold(op)\n     };\n     (fold.fold_doc)(&fold, doc)\n }"}]}