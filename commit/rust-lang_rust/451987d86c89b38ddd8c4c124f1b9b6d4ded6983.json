{"sha": "451987d86c89b38ddd8c4c124f1b9b6d4ded6983", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1MTk4N2Q4NmM4OWIzOGRkZDhjNGMxMjRmMWI5YjZkNGRlZDY5ODM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-11-01T16:06:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-11-01T16:06:15Z"}, "message": "Auto merge of #55579 - pietroalbini:rollup, r=kennytm\n\nRollup of 13 pull requests\n\nSuccessful merges:\n\n - #55280 (Add libproc_macro to rust-src distribution)\n - #55469 (Regression tests for issue #54477.)\n - #55504 (Use vec![x; n] instead of iter::repeat(x).take(n).collect())\n - #55522 (use String::from() instead of format!() macro to construct Strings.)\n - #55536 (Pass suggestions as impl Iterator instead of Vec)\n - #55542 (syntax: improve a few allocations)\n - #55558 (Tweak `MatcherPos::matches`)\n - #55561 (Fix double_check tests on big-endian targets)\n - #55573 (Make sure the `aws` executable is in $PATH on macOS)\n - #55574 (Use `SmallVec` within `MoveData`.)\n - #55575 (Fix invalid_const_promotion test on some archs)\n - #55578 (Made doc example of `impl Default for \u2026` use `-> Self` instead of explicit self type)\n - #55582 (Remove unused import copy from publish_toolstate.py)", "tree": {"sha": "9fa700761935bffd0a8c38df7f6830a27950d9ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9fa700761935bffd0a8c38df7f6830a27950d9ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/451987d86c89b38ddd8c4c124f1b9b6d4ded6983", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/451987d86c89b38ddd8c4c124f1b9b6d4ded6983", "html_url": "https://github.com/rust-lang/rust/commit/451987d86c89b38ddd8c4c124f1b9b6d4ded6983", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/451987d86c89b38ddd8c4c124f1b9b6d4ded6983/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6e9a6e41cd9b1fb687e296b5a6d4c6ad399f862", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6e9a6e41cd9b1fb687e296b5a6d4c6ad399f862", "html_url": "https://github.com/rust-lang/rust/commit/f6e9a6e41cd9b1fb687e296b5a6d4c6ad399f862"}, {"sha": "f76a8e3b86c8a6b12820103c5cefb251b0c6282c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f76a8e3b86c8a6b12820103c5cefb251b0c6282c", "html_url": "https://github.com/rust-lang/rust/commit/f76a8e3b86c8a6b12820103c5cefb251b0c6282c"}], "stats": {"total": 142, "additions": 86, "deletions": 56}, "files": [{"sha": "3d8918095accbe6cb88f90788bceccef7244aa54", "filename": ".travis.yml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/451987d86c89b38ddd8c4c124f1b9b6d4ded6983/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/451987d86c89b38ddd8c4c124f1b9b6d4ded6983/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=451987d86c89b38ddd8c4c124f1b9b6d4ded6983", "patch": "@@ -200,7 +200,7 @@ matrix:\n before_install:\n   # We'll use the AWS cli to download/upload cached docker layers as well as\n   # push our deployments, so download that here.\n-  - pip install --user awscli; export PATH=$PATH:$HOME/.local/bin\n+  - pip install --user awscli; export PATH=$PATH:$HOME/.local/bin:$HOME/Library/Python/2.7/bin/\n   - mkdir -p $HOME/rustsrc\n   # FIXME(#46924): these two commands are required to enable IPv6,\n   # they shouldn't exist, please revert once more official solutions appeared."}, {"sha": "6d40575352418d45456ac7bde1b7e114cb47f770", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/451987d86c89b38ddd8c4c124f1b9b6d4ded6983/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/451987d86c89b38ddd8c4c124f1b9b6d4ded6983/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=451987d86c89b38ddd8c4c124f1b9b6d4ded6983", "patch": "@@ -881,6 +881,7 @@ impl Step for Src {\n             \"src/jemalloc\",\n             \"src/libprofiler_builtins\",\n             \"src/stdsimd\",\n+            \"src/libproc_macro\",\n         ];\n         let std_src_dirs_exclude = [\n             \"src/libcompiler_builtins/compiler-rt/test\","}, {"sha": "638acebd617bf873033e13d019a88f05074118c0", "filename": "src/libcore/default.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/451987d86c89b38ddd8c4c124f1b9b6d4ded6983/src%2Flibcore%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/451987d86c89b38ddd8c4c124f1b9b6d4ded6983/src%2Flibcore%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fdefault.rs?ref=451987d86c89b38ddd8c4c124f1b9b6d4ded6983", "patch": "@@ -76,7 +76,7 @@\n /// }\n ///\n /// impl Default for Kind {\n-///     fn default() -> Kind { Kind::A }\n+///     fn default() -> Self { Kind::A }\n /// }\n /// ```\n ///\n@@ -118,7 +118,7 @@ pub trait Default: Sized {\n     /// }\n     ///\n     /// impl Default for Kind {\n-    ///     fn default() -> Kind { Kind::A }\n+    ///     fn default() -> Self { Kind::A }\n     /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "f5f8e3512a0eaa9ad355f3290c0088d6ea5d3666", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/451987d86c89b38ddd8c4c124f1b9b6d4ded6983/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/451987d86c89b38ddd8c4c124f1b9b6d4ded6983/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=451987d86c89b38ddd8c4c124f1b9b6d4ded6983", "patch": "@@ -1254,7 +1254,7 @@ fn node_id_to_string(map: &Map<'_>, id: NodeId, include_id: bool) -> String {\n         Some(Node::MacroDef(_)) => {\n             format!(\"macro {}{}\",  path_str(), id_str)\n         }\n-        Some(Node::Crate) => format!(\"root_crate\"),\n+        Some(Node::Crate) => String::from(\"root_crate\"),\n         None => format!(\"unknown node{}\", id_str),\n     }\n }"}, {"sha": "61b5886e7832d86371236a28449ca2e2222c077a", "filename": "src/librustc/mir/interpret/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/451987d86c89b38ddd8c4c124f1b9b6d4ded6983/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/451987d86c89b38ddd8c4c124f1b9b6d4ded6983/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs?ref=451987d86c89b38ddd8c4c124f1b9b6d4ded6983", "patch": "@@ -295,12 +295,10 @@ impl AllocDecodingState {\n     }\n \n     pub fn new(data_offsets: Vec<u32>) -> AllocDecodingState {\n-        let decoding_state: Vec<_> = ::std::iter::repeat(Mutex::new(State::Empty))\n-            .take(data_offsets.len())\n-            .collect();\n+        let decoding_state = vec![Mutex::new(State::Empty); data_offsets.len()];\n \n         AllocDecodingState {\n-            decoding_state: decoding_state,\n+            decoding_state,\n             data_offsets,\n         }\n     }"}, {"sha": "b463faef1921ad966b24a97ac3b4e0494074d6c4", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/451987d86c89b38ddd8c4c124f1b9b6d4ded6983/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/451987d86c89b38ddd8c4c124f1b9b6d4ded6983/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=451987d86c89b38ddd8c4c124f1b9b6d4ded6983", "patch": "@@ -34,7 +34,6 @@ use hir::def_id::DefId;\n use infer::{self, InferCtxt};\n use infer::type_variable::TypeVariableOrigin;\n use std::fmt;\n-use std::iter;\n use syntax::ast;\n use session::DiagnosticMessageId;\n use ty::{self, AdtKind, ToPredicate, ToPolyTraitRef, Ty, TyCtxt, TypeFoldable};\n@@ -1095,10 +1094,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             // found arguments is empty (assume the user just wants to ignore args in this case).\n             // For example, if `expected_args_length` is 2, suggest `|_, _|`.\n             if found_args.is_empty() && is_closure {\n-                let underscores = iter::repeat(\"_\")\n-                                      .take(expected_args.len())\n-                                      .collect::<Vec<_>>()\n-                                      .join(\", \");\n+                let underscores = vec![\"_\"; expected_args.len()].join(\", \");\n                 err.span_suggestion_with_applicability(\n                     found_span,\n                     &format!("}, {"sha": "a323282f2335325896a68fafa95d3bc2c5bd54b3", "filename": "src/librustc_errors/diagnostic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/451987d86c89b38ddd8c4c124f1b9b6d4ded6983/src%2Flibrustc_errors%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/451987d86c89b38ddd8c4c124f1b9b6d4ded6983/src%2Flibrustc_errors%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic.rs?ref=451987d86c89b38ddd8c4c124f1b9b6d4ded6983", "patch": "@@ -350,10 +350,10 @@ impl Diagnostic {\n     }\n \n     pub fn span_suggestions_with_applicability(&mut self, sp: Span, msg: &str,\n-                                        suggestions: Vec<String>,\n-                                        applicability: Applicability) -> &mut Self {\n+        suggestions: impl Iterator<Item = String>, applicability: Applicability) -> &mut Self\n+    {\n         self.suggestions.push(CodeSuggestion {\n-            substitutions: suggestions.into_iter().map(|snippet| Substitution {\n+            substitutions: suggestions.map(|snippet| Substitution {\n                 parts: vec![SubstitutionPart {\n                     snippet,\n                     span: sp,"}, {"sha": "2f16470530e4374581750e89c1f2afef8dc6c4fc", "filename": "src/librustc_errors/diagnostic_builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/451987d86c89b38ddd8c4c124f1b9b6d4ded6983/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/451987d86c89b38ddd8c4c124f1b9b6d4ded6983/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic_builder.rs?ref=451987d86c89b38ddd8c4c124f1b9b6d4ded6983", "patch": "@@ -253,7 +253,7 @@ impl<'a> DiagnosticBuilder<'a> {\n     pub fn span_suggestions_with_applicability(&mut self,\n                                                sp: Span,\n                                                msg: &str,\n-                                               suggestions: Vec<String>,\n+                                               suggestions: impl Iterator<Item = String>,\n                                                applicability: Applicability)\n                                                -> &mut Self {\n         if !self.allow_suggestions {"}, {"sha": "3c4d8e09fc166b00018e7888b108579b3161c668", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/451987d86c89b38ddd8c4c124f1b9b6d4ded6983/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/451987d86c89b38ddd8c4c124f1b9b6d4ded6983/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=451987d86c89b38ddd8c4c124f1b9b6d4ded6983", "patch": "@@ -788,7 +788,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n \n         let what_was_dropped = match self.describe_place(place) {\n             Some(name) => format!(\"`{}`\", name.as_str()),\n-            None => format!(\"temporary value\"),\n+            None => String::from(\"temporary value\"),\n         };\n \n         let label = match self.describe_place(&borrow.borrowed_place) {\n@@ -1028,7 +1028,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n \n         match category {\n             ConstraintCategory::Return => {\n-                err.span_note(constraint_span, &format!(\"closure is returned here\"));\n+                err.span_note(constraint_span, \"closure is returned here\");\n             }\n             ConstraintCategory::CallArgument => {\n                 fr_name.highlight_region_name(&mut err);"}, {"sha": "b46489a162b8571e595b30edf9291c4fbac345e9", "filename": "src/librustc_mir/dataflow/move_paths/builder.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/451987d86c89b38ddd8c4c124f1b9b6d4ded6983/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/451987d86c89b38ddd8c4c124f1b9b6d4ded6983/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs?ref=451987d86c89b38ddd8c4c124f1b9b6d4ded6983", "patch": "@@ -12,12 +12,12 @@ use rustc::ty::{self, TyCtxt};\n use rustc::mir::*;\n use rustc::mir::tcx::RvalueInitializationState;\n use rustc_data_structures::indexed_vec::{IndexVec};\n+use smallvec::{SmallVec, smallvec};\n \n use std::collections::hash_map::Entry;\n use std::mem;\n \n use super::abs_domain::Lift;\n-\n use super::{LocationMap, MoveData, MovePath, MovePathLookup, MovePathIndex, MoveOut, MoveOutIndex};\n use super::{MoveError, InitIndex, Init, InitLocation, LookupResult, InitKind};\n use super::IllegalMoveOriginKind::*;\n@@ -64,8 +64,8 @@ impl<'a, 'gcx, 'tcx> MoveDataBuilder<'a, 'gcx, 'tcx> {\n     }\n \n     fn new_move_path(move_paths: &mut IndexVec<MovePathIndex, MovePath<'tcx>>,\n-                     path_map: &mut IndexVec<MovePathIndex, Vec<MoveOutIndex>>,\n-                     init_path_map: &mut IndexVec<MovePathIndex, Vec<InitIndex>>,\n+                     path_map: &mut IndexVec<MovePathIndex, SmallVec<[MoveOutIndex; 4]>>,\n+                     init_path_map: &mut IndexVec<MovePathIndex, SmallVec<[InitIndex; 4]>>,\n                      parent: Option<MovePathIndex>,\n                      place: Place<'tcx>)\n                      -> MovePathIndex\n@@ -83,10 +83,10 @@ impl<'a, 'gcx, 'tcx> MoveDataBuilder<'a, 'gcx, 'tcx> {\n             move_paths[move_path].next_sibling = next_sibling;\n         }\n \n-        let path_map_ent = path_map.push(vec![]);\n+        let path_map_ent = path_map.push(smallvec![]);\n         assert_eq!(path_map_ent, move_path);\n \n-        let init_path_map_ent = init_path_map.push(vec![]);\n+        let init_path_map_ent = init_path_map.push(smallvec![]);\n         assert_eq!(init_path_map_ent, move_path);\n \n         move_path"}, {"sha": "2a026b8f52c2abad37515a7be6e86f396cd093b0", "filename": "src/librustc_mir/dataflow/move_paths/mod.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/451987d86c89b38ddd8c4c124f1b9b6d4ded6983/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/451987d86c89b38ddd8c4c124f1b9b6d4ded6983/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs?ref=451987d86c89b38ddd8c4c124f1b9b6d4ded6983", "patch": "@@ -13,6 +13,7 @@ use rustc::ty::{self, TyCtxt};\n use rustc::mir::*;\n use rustc::util::nodemap::FxHashMap;\n use rustc_data_structures::indexed_vec::{IndexVec};\n+use smallvec::SmallVec;\n use syntax_pos::{Span};\n \n use std::fmt;\n@@ -141,14 +142,14 @@ pub struct MoveData<'tcx> {\n     /// of executing the code at `l`. (There can be multiple MoveOut's\n     /// for a given `l` because each MoveOut is associated with one\n     /// particular path being moved.)\n-    pub loc_map: LocationMap<Vec<MoveOutIndex>>,\n-    pub path_map: IndexVec<MovePathIndex, Vec<MoveOutIndex>>,\n+    pub loc_map: LocationMap<SmallVec<[MoveOutIndex; 4]>>,\n+    pub path_map: IndexVec<MovePathIndex, SmallVec<[MoveOutIndex; 4]>>,\n     pub rev_lookup: MovePathLookup<'tcx>,\n     pub inits: IndexVec<InitIndex, Init>,\n     /// Each Location `l` is mapped to the Inits that are effects\n     /// of executing the code at `l`.\n-    pub init_loc_map: LocationMap<Vec<InitIndex>>,\n-    pub init_path_map: IndexVec<MovePathIndex, Vec<InitIndex>>,\n+    pub init_loc_map: LocationMap<SmallVec<[InitIndex; 4]>>,\n+    pub init_path_map: IndexVec<MovePathIndex, SmallVec<[InitIndex; 4]>>,\n }\n \n pub trait HasMoveData<'tcx> {"}, {"sha": "15d0a9166a6781037bd6fb3ff222f8e2e059f14a", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/451987d86c89b38ddd8c4c124f1b9b6d4ded6983/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/451987d86c89b38ddd8c4c124f1b9b6d4ded6983/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=451987d86c89b38ddd8c4c124f1b9b6d4ded6983", "patch": "@@ -408,7 +408,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n                             ),\n                         _ =>\n                             return validation_failure!(\n-                                format!(\"non-integer enum discriminant\"), path\n+                                String::from(\"non-integer enum discriminant\"), path\n                             ),\n                     }\n                 };"}, {"sha": "ae0483e3c140c8dcc810702a2018b9c3d347d09f", "filename": "src/librustc_mir/util/borrowck_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/451987d86c89b38ddd8c4c124f1b9b6d4ded6983/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/451987d86c89b38ddd8c4c124f1b9b6d4ded6983/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs?ref=451987d86c89b38ddd8c4c124f1b9b6d4ded6983", "patch": "@@ -575,7 +575,7 @@ pub trait BorrowckErrors<'cx>: Sized + Copy {\n             OGN = o\n         );\n         err.span_label(mutate_span, format!(\"cannot {}\", action));\n-        err.span_label(match_span, format!(\"value is immutable in match guard\"));\n+        err.span_label(match_span, String::from(\"value is immutable in match guard\"));\n \n         self.cancel_if_wrong_origin(err, o)\n     }"}, {"sha": "7b5e704f60f6e1919cd492361683b160563d4f1d", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/451987d86c89b38ddd8c4c124f1b9b6d4ded6983/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/451987d86c89b38ddd8c4c124f1b9b6d4ded6983/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=451987d86c89b38ddd8c4c124f1b9b6d4ded6983", "patch": "@@ -4948,7 +4948,7 @@ fn show_candidates(err: &mut DiagnosticBuilder,\n         err.span_suggestions_with_applicability(\n             span,\n             &msg,\n-            path_strings,\n+            path_strings.into_iter(),\n             Applicability::Unspecified,\n         );\n     } else {"}, {"sha": "0a196834cb49442635af0176299d45aa6f90dd80", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/451987d86c89b38ddd8c4c124f1b9b6d4ded6983/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/451987d86c89b38ddd8c4c124f1b9b6d4ded6983/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=451987d86c89b38ddd8c4c124f1b9b6d4ded6983", "patch": "@@ -132,7 +132,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 if compatible_variants.peek().is_some() {\n                     let expr_text = print::to_string(print::NO_ANN, |s| s.print_expr(expr));\n                     let suggestions = compatible_variants\n-                        .map(|v| format!(\"{}({})\", v, expr_text)).collect::<Vec<_>>();\n+                        .map(|v| format!(\"{}({})\", v, expr_text));\n                     err.span_suggestions_with_applicability(\n                         expr.span,\n                         \"try using a variant of the expected type\","}, {"sha": "cd243d414439447d978d9559591b346a4c499512", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/451987d86c89b38ddd8c4c124f1b9b6d4ded6983/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/451987d86c89b38ddd8c4c124f1b9b6d4ded6983/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=451987d86c89b38ddd8c4c124f1b9b6d4ded6983", "patch": "@@ -521,7 +521,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     with_crate_prefix(|| self.tcx.item_path_str(*did)),\n                     additional_newline\n                 )\n-            }).collect();\n+            });\n \n             err.span_suggestions_with_applicability(\n                                                     span,"}, {"sha": "17784a4681d009fdf5afce6cdb64dbf01b1294cd", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/451987d86c89b38ddd8c4c124f1b9b6d4ded6983/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/451987d86c89b38ddd8c4c124f1b9b6d4ded6983/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=451987d86c89b38ddd8c4c124f1b9b6d4ded6983", "patch": "@@ -4744,7 +4744,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         } else if !self.check_for_cast(err, expr, found, expected) {\n             let methods = self.get_conversion_methods(expr.span, expected, found);\n             if let Ok(expr_text) = self.sess().source_map().span_to_snippet(expr.span) {\n-                let suggestions = iter::repeat(&expr_text).zip(methods.iter())\n+                let mut suggestions = iter::repeat(&expr_text).zip(methods.iter())\n                     .filter_map(|(receiver, method)| {\n                         let method_call = format!(\".{}()\", method.ident);\n                         if receiver.ends_with(&method_call) {\n@@ -4760,8 +4760,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                 Some(format!(\"{}{}\", receiver, method_call))\n                             }\n                         }\n-                    }).collect::<Vec<_>>();\n-                if !suggestions.is_empty() {\n+                    }).peekable();\n+                if suggestions.peek().is_some() {\n                     err.span_suggestions_with_applicability(\n                         expr.span,\n                         \"try using a conversion method\","}, {"sha": "41ed90fb94eedfc25a7d5ad0ca1ba1168f80e84d", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/451987d86c89b38ddd8c4c124f1b9b6d4ded6983/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/451987d86c89b38ddd8c4c124f1b9b6d4ded6983/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=451987d86c89b38ddd8c4c124f1b9b6d4ded6983", "patch": "@@ -387,6 +387,8 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                         add_derived_markers(&mut self.cx, item.span(), &traits, item.clone());\n                     let derives = derives.entry(invoc.expansion_data.mark).or_default();\n \n+                    derives.reserve(traits.len());\n+                    invocations.reserve(traits.len());\n                     for path in &traits {\n                         let mark = Mark::fresh(self.cx.current_expansion.mark);\n                         derives.push(mark);\n@@ -687,7 +689,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                         \"proc_macro_hygiene\",\n                         self.span,\n                         GateIssue::Language,\n-                        &format!(\"procedural macros cannot expand to macro definitions\"),\n+                        \"procedural macros cannot expand to macro definitions\",\n                     );\n                 }\n                 visit::walk_item(self, i);"}, {"sha": "38bbfc6b4c375f1f3e11f25ac2b4634e8434fde2", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/451987d86c89b38ddd8c4c124f1b9b6d4ded6983/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/451987d86c89b38ddd8c4c124f1b9b6d4ded6983/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=451987d86c89b38ddd8c4c124f1b9b6d4ded6983", "patch": "@@ -143,6 +143,8 @@ struct MatcherTtFrame<'a> {\n     idx: usize,\n }\n \n+type NamedMatchVec = SmallVec<[NamedMatch; 4]>;\n+\n /// Represents a single \"position\" (aka \"matcher position\", aka \"item\"), as described in the module\n /// documentation.\n #[derive(Clone)]\n@@ -168,7 +170,7 @@ struct MatcherPos<'a> {\n     /// all bound matches from the submatcher into the shared top-level `matches` vector. If `sep`\n     /// and `up` are `Some`, then `matches` is _not_ the shared top-level list. Instead, if one\n     /// wants the shared `matches`, one should use `up.matches`.\n-    matches: Vec<Rc<Vec<NamedMatch>>>,\n+    matches: Box<[Rc<NamedMatchVec>]>,\n     /// The position in `matches` corresponding to the first metavar in this matcher's sequence of\n     /// token trees. In other words, the first metavar in the first token of `top_elts` corresponds\n     /// to `matches[match_lo]`.\n@@ -278,9 +280,14 @@ pub fn count_names(ms: &[TokenTree]) -> usize {\n     })\n }\n \n-/// Initialize `len` empty shared `Vec`s to be used to store matches of metavars.\n-fn create_matches(len: usize) -> Vec<Rc<Vec<NamedMatch>>> {\n-    (0..len).into_iter().map(|_| Rc::new(Vec::new())).collect()\n+/// `len` `Vec`s (initially shared and empty) that will store matches of metavars.\n+fn create_matches(len: usize) -> Box<[Rc<NamedMatchVec>]> {\n+    if len == 0 {\n+        vec![]\n+    } else {\n+        let empty_matches = Rc::new(SmallVec::new());\n+        vec![empty_matches.clone(); len]\n+    }.into_boxed_slice()\n }\n \n /// Generate the top-level matcher position in which the \"dot\" is before the first token of the\n@@ -332,7 +339,7 @@ fn initial_matcher_pos(ms: &[TokenTree], open: Span) -> MatcherPos {\n /// token tree it was derived from.\n #[derive(Debug, Clone)]\n pub enum NamedMatch {\n-    MatchedSeq(Rc<Vec<NamedMatch>>, DelimSpan),\n+    MatchedSeq(Rc<NamedMatchVec>, DelimSpan),\n     MatchedNonterminal(Rc<Nonterminal>),\n }\n \n@@ -540,7 +547,7 @@ fn inner_parse_loop<'a>(\n                         new_item.match_cur += seq.num_captures;\n                         new_item.idx += 1;\n                         for idx in item.match_cur..item.match_cur + seq.num_captures {\n-                            new_item.push_match(idx, MatchedSeq(Rc::new(vec![]), sp));\n+                            new_item.push_match(idx, MatchedSeq(Rc::new(smallvec![]), sp));\n                         }\n                         cur_items.push(new_item);\n                     }"}, {"sha": "dd90ef06c39295da68bab608be45b3a0f5937b65", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/451987d86c89b38ddd8c4c124f1b9b6d4ded6983/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/451987d86c89b38ddd8c4c124f1b9b6d4ded6983/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=451987d86c89b38ddd8c4c124f1b9b6d4ded6983", "patch": "@@ -1384,7 +1384,7 @@ impl<'a> MethodDef<'a> {\n             // let __self2_vi = unsafe {\n             //     std::intrinsics::discriminant_value(&arg2) } as i32;\n             // ```\n-            let mut index_let_stmts: Vec<ast::Stmt> = Vec::new();\n+            let mut index_let_stmts: Vec<ast::Stmt> = Vec::with_capacity(vi_idents.len() + 1);\n \n             // We also build an expression which checks whether all discriminants are equal\n             // discriminant_test = __self0_vi == __self1_vi && __self0_vi == __self2_vi && ..."}, {"sha": "0f354e1aad6c97c2bd7dda89f53bdc122e3169b0", "filename": "src/test/run-pass/invalid_const_promotion.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/451987d86c89b38ddd8c4c124f1b9b6d4ded6983/src%2Ftest%2Frun-pass%2Finvalid_const_promotion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/451987d86c89b38ddd8c4c124f1b9b6d4ded6983/src%2Ftest%2Frun-pass%2Finvalid_const_promotion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Finvalid_const_promotion.rs?ref=451987d86c89b38ddd8c4c124f1b9b6d4ded6983", "patch": "@@ -39,6 +39,7 @@ fn check_status(status: std::process::ExitStatus)\n     use std::os::unix::process::ExitStatusExt;\n \n     assert!(status.signal() == Some(libc::SIGILL)\n+            || status.signal() == Some(libc::SIGTRAP)\n             || status.signal() == Some(libc::SIGABRT));\n }\n "}, {"sha": "28731d4b0df02f856e28fc4eff00ba02d2d52a2f", "filename": "src/test/run-pass/issues/issue-54477-reduced-2.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/451987d86c89b38ddd8c4c124f1b9b6d4ded6983/src%2Ftest%2Frun-pass%2Fissues%2Fissue-54477-reduced-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/451987d86c89b38ddd8c4c124f1b9b6d4ded6983/src%2Ftest%2Frun-pass%2Fissues%2Fissue-54477-reduced-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-54477-reduced-2.rs?ref=451987d86c89b38ddd8c4c124f1b9b6d4ded6983", "patch": "@@ -0,0 +1,25 @@\n+// rust-lang/rust#54477: runtime bug in the VecDeque library that was\n+// exposed by this test case, derived from test suite of crates.io\n+// `collection` crate.\n+\n+use std::collections::VecDeque;\n+\n+fn main() {\n+    let mut vecdeque_13 = VecDeque::from(vec![ ]);\n+    let mut vecdeque_29 = VecDeque::from(vec![ 0 ]);\n+    vecdeque_29.insert(0,  30 );\n+    vecdeque_29.insert(1,  31 );\n+    vecdeque_29.insert(2,  32 );\n+    vecdeque_29.insert(3,  33 );\n+    vecdeque_29.insert(4,  34 );\n+    vecdeque_29.insert(5,  35 );\n+    // println!(\"vecdeque_13: {:?}\", vecdeque_13);\n+    // println!(\"vecdeque_29: {:?}\", vecdeque_29);\n+\n+    // println!(\"Invoking: `vecdeque_13.append(&mut vecdeque_29)`\");\n+    vecdeque_13.append(&mut vecdeque_29);\n+\n+    // println!(\"vecdeque_13: {:?}\", vecdeque_13);\n+\n+    assert_eq!(vecdeque_13, VecDeque::from(vec![30, 31, 32, 33, 34, 35, 0]));\n+}"}, {"sha": "76f9276c05807cf2a0131dcfe84501916fb61430", "filename": "src/test/ui/consts/const-eval/double_check.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/451987d86c89b38ddd8c4c124f1b9b6d4ded6983/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdouble_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/451987d86c89b38ddd8c4c124f1b9b6d4ded6983/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdouble_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdouble_check.rs?ref=451987d86c89b38ddd8c4c124f1b9b6d4ded6983", "patch": "@@ -21,12 +21,12 @@ enum Bar {\n union Union {\n     foo: &'static Foo,\n     bar: &'static Bar,\n-    usize: &'static usize,\n+    u8: &'static u8,\n }\n-static BAR: usize = 42;\n+static BAR: u8 = 42;\n static FOO: (&Foo, &Bar) = unsafe {(\n-    Union { usize: &BAR }.foo,\n-    Union { usize: &BAR }.bar,\n+    Union { u8: &BAR }.foo,\n+    Union { u8: &BAR }.bar,\n )};\n \n fn main() {}"}, {"sha": "701632362ce7afa4b9ba5fc8e6a64be4d0fe6dfd", "filename": "src/test/ui/consts/const-eval/double_check2.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/451987d86c89b38ddd8c4c124f1b9b6d4ded6983/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdouble_check2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/451987d86c89b38ddd8c4c124f1b9b6d4ded6983/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdouble_check2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdouble_check2.rs?ref=451987d86c89b38ddd8c4c124f1b9b6d4ded6983", "patch": "@@ -19,12 +19,12 @@ enum Bar {\n union Union {\n     foo: &'static Foo,\n     bar: &'static Bar,\n-    usize: &'static usize,\n+    u8: &'static u8,\n }\n-static BAR: usize = 5;\n+static BAR: u8 = 5;\n static FOO: (&Foo, &Bar) = unsafe {( //~ undefined behavior\n-    Union { usize: &BAR }.foo,\n-    Union { usize: &BAR }.bar,\n+    Union { u8: &BAR }.foo,\n+    Union { u8: &BAR }.bar,\n )};\n \n fn main() {}"}, {"sha": "28825477c810276f25c5b30876d49a5aab3eb839", "filename": "src/test/ui/consts/const-eval/double_check2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/451987d86c89b38ddd8c4c124f1b9b6d4ded6983/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdouble_check2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/451987d86c89b38ddd8c4c124f1b9b6d4ded6983/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdouble_check2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdouble_check2.stderr?ref=451987d86c89b38ddd8c4c124f1b9b6d4ded6983", "patch": "@@ -2,8 +2,8 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/double_check2.rs:25:1\n    |\n LL | / static FOO: (&Foo, &Bar) = unsafe {( //~ undefined behavior\n-LL | |     Union { usize: &BAR }.foo,\n-LL | |     Union { usize: &BAR }.bar,\n+LL | |     Union { u8: &BAR }.foo,\n+LL | |     Union { u8: &BAR }.bar,\n LL | | )};\n    | |___^ type validation failed: encountered invalid enum discriminant 5 at .1.<deref>\n    |"}, {"sha": "f63950b448a143565fc33a3c366da5dd6e4edfc7", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/451987d86c89b38ddd8c4c124f1b9b6d4ded6983/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/451987d86c89b38ddd8c4c124f1b9b6d4ded6983/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=451987d86c89b38ddd8c4c124f1b9b6d4ded6983", "patch": "@@ -766,7 +766,7 @@ fn make_test_name(\n         .join(&testpaths.file.file_name().unwrap());\n     let mode_suffix = match config.compare_mode {\n         Some(ref mode) => format!(\" ({})\", mode.to_str()),\n-        None => format!(\"\"),\n+        None => String::new(),\n     };\n     test::DynTestName(format!(\n         \"[{}{}] {}{}\","}, {"sha": "c794e169fca3322f58ac72e99ca5fb34f34d823c", "filename": "src/tools/publish_toolstate.py", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/451987d86c89b38ddd8c4c124f1b9b6d4ded6983/src%2Ftools%2Fpublish_toolstate.py", "raw_url": "https://github.com/rust-lang/rust/raw/451987d86c89b38ddd8c4c124f1b9b6d4ded6983/src%2Ftools%2Fpublish_toolstate.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fpublish_toolstate.py?ref=451987d86c89b38ddd8c4c124f1b9b6d4ded6983", "patch": "@@ -14,7 +14,6 @@\n import sys\n import re\n import json\n-import copy\n import datetime\n import collections\n import textwrap"}]}