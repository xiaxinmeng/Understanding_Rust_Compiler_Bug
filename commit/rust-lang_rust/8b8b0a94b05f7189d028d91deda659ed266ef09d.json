{"sha": "8b8b0a94b05f7189d028d91deda659ed266ef09d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiOGIwYTk0YjA1ZjcxODlkMDI4ZDkxZGVkYTY1OWVkMjY2ZWYwOWQ=", "commit": {"author": {"name": "Yoshitomo Nakanishi", "email": "yurayura.rounin.3@gmail.com", "date": "2021-02-04T13:57:03Z"}, "committer": {"name": "Yoshitomo Nakanishi", "email": "yurayura.rounin.3@gmail.com", "date": "2021-02-04T13:57:03Z"}, "message": "Fix enclosing_body_owner_opt and rename it to enclosing_body_opt", "tree": {"sha": "1d7d1e44d5bb36993b848844ad9aeb5211a344cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d7d1e44d5bb36993b848844ad9aeb5211a344cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b8b0a94b05f7189d028d91deda659ed266ef09d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b8b0a94b05f7189d028d91deda659ed266ef09d", "html_url": "https://github.com/rust-lang/rust/commit/8b8b0a94b05f7189d028d91deda659ed266ef09d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b8b0a94b05f7189d028d91deda659ed266ef09d/comments", "author": {"login": "Y-Nak", "id": 6376004, "node_id": "MDQ6VXNlcjYzNzYwMDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6376004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Y-Nak", "html_url": "https://github.com/Y-Nak", "followers_url": "https://api.github.com/users/Y-Nak/followers", "following_url": "https://api.github.com/users/Y-Nak/following{/other_user}", "gists_url": "https://api.github.com/users/Y-Nak/gists{/gist_id}", "starred_url": "https://api.github.com/users/Y-Nak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Y-Nak/subscriptions", "organizations_url": "https://api.github.com/users/Y-Nak/orgs", "repos_url": "https://api.github.com/users/Y-Nak/repos", "events_url": "https://api.github.com/users/Y-Nak/events{/privacy}", "received_events_url": "https://api.github.com/users/Y-Nak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Y-Nak", "id": 6376004, "node_id": "MDQ6VXNlcjYzNzYwMDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6376004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Y-Nak", "html_url": "https://github.com/Y-Nak", "followers_url": "https://api.github.com/users/Y-Nak/followers", "following_url": "https://api.github.com/users/Y-Nak/following{/other_user}", "gists_url": "https://api.github.com/users/Y-Nak/gists{/gist_id}", "starred_url": "https://api.github.com/users/Y-Nak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Y-Nak/subscriptions", "organizations_url": "https://api.github.com/users/Y-Nak/orgs", "repos_url": "https://api.github.com/users/Y-Nak/repos", "events_url": "https://api.github.com/users/Y-Nak/events{/privacy}", "received_events_url": "https://api.github.com/users/Y-Nak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e32e4dedf1781a4696c34f31d69e68c7c0eaf6a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/e32e4dedf1781a4696c34f31d69e68c7c0eaf6a9", "html_url": "https://github.com/rust-lang/rust/commit/e32e4dedf1781a4696c34f31d69e68c7c0eaf6a9"}], "stats": {"total": 47, "additions": 31, "deletions": 16}, "files": [{"sha": "5f0ee1be2b9786ef1765a582b1e4186e96e9f211", "filename": "clippy_lints/src/default_numeric_fallback.rs", "status": "modified", "additions": 31, "deletions": 16, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/8b8b0a94b05f7189d028d91deda659ed266ef09d/clippy_lints%2Fsrc%2Fdefault_numeric_fallback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b8b0a94b05f7189d028d91deda659ed266ef09d/clippy_lints%2Fsrc%2Fdefault_numeric_fallback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdefault_numeric_fallback.rs?ref=8b8b0a94b05f7189d028d91deda659ed266ef09d", "patch": "@@ -2,7 +2,7 @@ use rustc_ast::ast::{Label, LitFloatType, LitIntType, LitKind};\n use rustc_hir::{\n     self as hir,\n     intravisit::{walk_expr, walk_stmt, walk_ty, FnKind, NestedVisitorMap, Visitor},\n-    Body, Expr, ExprKind, FnDecl, FnRetTy, Guard, HirId, Lit, Stmt, StmtKind,\n+    Body, BodyId, Expr, ExprKind, FnDecl, FnRetTy, Guard, HirId, Lit, Stmt, StmtKind,\n };\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::{\n@@ -50,16 +50,31 @@ declare_clippy_lint! {\n \n declare_lint_pass!(DefaultNumericFallback => [DEFAULT_NUMERIC_FALLBACK]);\n \n-fn enclosing_body_owner_opt(tcx: TyCtxt<'_>, hir_id: HirId) -> Option<HirId> {\n+/// Return the body that includes passed `hir_id` if exists.\n+fn enclosing_body_opt(tcx: TyCtxt<'_>, hir_id: HirId) -> Option<BodyId> {\n     let hir_map = tcx.hir();\n+    let mut trace = vec![(hir_id)];\n+\n     for (parent, _) in hir_map.parent_iter(hir_id) {\n+        trace.push(parent);\n         if let Some(body) = hir_map.maybe_body_owned_by(parent) {\n-            return Some(hir_map.body_owner(body));\n+            if trace.iter().any(|hir_id| *hir_id == body.hir_id) {\n+                return Some(body);\n+            }\n         }\n     }\n+\n     None\n }\n \n+fn ty_from_hir_ty<'tcx>(cx: &LateContext<'tcx>, hir_ty: &hir::Ty<'tcx>) -> Option<Ty<'tcx>> {\n+    if enclosing_body_opt(cx.tcx, hir_ty.hir_id).is_some() {\n+        cx.typeck_results().node_type_opt(hir_ty.hir_id)\n+    } else {\n+        Some(hir_ty_to_ty(cx.tcx, hir_ty))\n+    }\n+}\n+\n impl LateLintPass<'_> for DefaultNumericFallback {\n     fn check_fn(\n         &mut self,\n@@ -68,21 +83,17 @@ impl LateLintPass<'_> for DefaultNumericFallback {\n         fn_decl: &'tcx FnDecl<'_>,\n         body: &'tcx Body<'_>,\n         _: Span,\n-        hir_id: HirId,\n+        _: HirId,\n     ) {\n         let ret_ty_bound = match fn_decl.output {\n             FnRetTy::DefaultReturn(_) => None,\n             FnRetTy::Return(ty) => Some(ty),\n         }\n         .and_then(|ty| {\n-            let mut infer_ty_finder = InferTyFinder::new();\n-            infer_ty_finder.visit_ty(ty);\n-            if infer_ty_finder.found {\n+            if is_infer_included(ty) {\n                 None\n-            } else if enclosing_body_owner_opt(cx.tcx, hir_id).is_some() {\n-                cx.typeck_results().node_type_opt(ty.hir_id)\n             } else {\n-                Some(hir_ty_to_ty(cx.tcx, ty))\n+                ty_from_hir_ty(cx, ty)\n             }\n         });\n \n@@ -114,7 +125,7 @@ impl<'a, 'tcx> NumericFallbackVisitor<'a, 'tcx> {\n         }\n     }\n \n-    /// Check whether lit cause fallback or not.\n+    /// Check whether a passed literal has potential to cause fallback or not.\n     fn check_lit(&self, lit: &Lit, lit_ty: Ty<'tcx>) {\n         let ty_bound = self.ty_bounds.last().unwrap();\n \n@@ -334,12 +345,10 @@ impl<'a, 'tcx> Visitor<'tcx> for NumericFallbackVisitor<'a, 'tcx> {\n         match stmt.kind {\n             StmtKind::Local(local) => {\n                 let ty = local.ty.and_then(|hir_ty| {\n-                    let mut infer_ty_finder = InferTyFinder::new();\n-                    infer_ty_finder.visit_ty(hir_ty);\n-                    if infer_ty_finder.found {\n+                    if is_infer_included(hir_ty) {\n                         None\n                     } else {\n-                        self.cx.typeck_results().node_type_opt(hir_ty.hir_id)\n+                        ty_from_hir_ty(self.cx, hir_ty)\n                     }\n                 });\n                 self.ty_bounds.push(ty);\n@@ -357,7 +366,13 @@ impl<'a, 'tcx> Visitor<'tcx> for NumericFallbackVisitor<'a, 'tcx> {\n     }\n }\n \n-/// Find `hir::TyKind::Infer` is included in passed typed.\n+/// Return true if a given ty includes `hir::TyKind::Infer`.\n+fn is_infer_included(ty: &hir::Ty<'_>) -> bool {\n+    let mut infer_ty_finder = InferTyFinder::new();\n+    infer_ty_finder.visit_ty(ty);\n+    infer_ty_finder.found\n+}\n+\n struct InferTyFinder {\n     found: bool,\n }"}]}