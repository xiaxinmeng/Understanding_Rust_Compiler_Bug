{"sha": "81647c627a8d84f970399513ea08a285b167c666", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxNjQ3YzYyN2E4ZDg0Zjk3MDM5OTUxM2VhMDhhMjg1YjE2N2M2NjY=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-01-23T19:16:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-23T19:16:10Z"}, "message": "Rollup merge of #81275 - jyn514:time-render, r=wesleywiser\n\nFix <unknown> queries and add more timing info to render_html\n\nCloses https://github.com/rust-lang/rust/issues/81251.\n\n##  Fix `<unknown>` queries\n\nThis happened because `alloc_query_strings` was never called.\n\n##  Add more timing info to render_html\n\nThis still has some issues I'm not sure how to work out:\n\n- `create_renderer` and `renderer_after_krate` aren't shown by default.\n  I want something like `verbose_generic_activity_with_arg`, but it doesn't exist.\n\nI'm also not sure how to show activities that aren't on by default - I\ntried `-Z self-profile -Z self-profile-args=all`, but it didn't show up.\n\nr? `@wesleywiser`", "tree": {"sha": "53cfac26f449ca898d7bee1472ae9e45c09dcd86", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/53cfac26f449ca898d7bee1472ae9e45c09dcd86"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81647c627a8d84f970399513ea08a285b167c666", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgDHX7CRBK7hj4Ov3rIwAAdHIIABMHkj63vTLcenXdFRxyGPMZ\nn1h7CJWbAJq/IqIg7YzIxU6uLuKCOH7EMWCWgXJyIPW9tROBOtiAS1obu/o2eOV5\nvhFHLqvcnzfl4WCx9VKcYMtpmtyc8XfdKD2lARbw6LGxokDeWeeNC61w9QtcUNpL\nqPnKI6xeLyj5yPSn/k+QZHiiRscC2gH1Vebf94yzFz4pBjElYBD4/R4SviSRXoAc\ncJIbTo8+0kSAzXrjewcdGjgV5rsd59nCKKsRKcjP0LlNXW4UQtGkqRQ0UhJBbeih\nm5GWu7nGYnIg8Stdsf/HhwyNcG1H76UM326YIH/iLExKmIdsQb/93nSEPteVGpg=\n=yjLn\n-----END PGP SIGNATURE-----\n", "payload": "tree 53cfac26f449ca898d7bee1472ae9e45c09dcd86\nparent 7038bb1eb2244a831604177c36c7108a92c19a63\nparent ca72f9ed7065a601bd2b1ec80889ec7bad177598\nauthor Jonas Schievink <jonasschievink@gmail.com> 1611429370 +0100\ncommitter GitHub <noreply@github.com> 1611429370 +0100\n\nRollup merge of #81275 - jyn514:time-render, r=wesleywiser\n\nFix <unknown> queries and add more timing info to render_html\n\nCloses https://github.com/rust-lang/rust/issues/81251.\n\n##  Fix `<unknown>` queries\n\nThis happened because `alloc_query_strings` was never called.\n\n##  Add more timing info to render_html\n\nThis still has some issues I'm not sure how to work out:\n\n- `create_renderer` and `renderer_after_krate` aren't shown by default.\n  I want something like `verbose_generic_activity_with_arg`, but it doesn't exist.\n\nI'm also not sure how to show activities that aren't on by default - I\ntried `-Z self-profile -Z self-profile-args=all`, but it didn't show up.\n\nr? `@wesleywiser`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81647c627a8d84f970399513ea08a285b167c666", "html_url": "https://github.com/rust-lang/rust/commit/81647c627a8d84f970399513ea08a285b167c666", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81647c627a8d84f970399513ea08a285b167c666/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7038bb1eb2244a831604177c36c7108a92c19a63", "url": "https://api.github.com/repos/rust-lang/rust/commits/7038bb1eb2244a831604177c36c7108a92c19a63", "html_url": "https://github.com/rust-lang/rust/commit/7038bb1eb2244a831604177c36c7108a92c19a63"}, {"sha": "ca72f9ed7065a601bd2b1ec80889ec7bad177598", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca72f9ed7065a601bd2b1ec80889ec7bad177598", "html_url": "https://github.com/rust-lang/rust/commit/ca72f9ed7065a601bd2b1ec80889ec7bad177598"}], "stats": {"total": 83, "additions": 48, "deletions": 35}, "files": [{"sha": "7031234e1089d15fb3c93514cac93b1115f89bc0", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/81647c627a8d84f970399513ea08a285b167c666/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81647c627a8d84f970399513ea08a285b167c666/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=81647c627a8d84f970399513ea08a285b167c666", "patch": "@@ -1017,13 +1017,6 @@ pub fn start_codegen<'tcx>(\n     tcx.sess.time(\"assert_dep_graph\", || rustc_incremental::assert_dep_graph(tcx));\n     tcx.sess.time(\"serialize_dep_graph\", || rustc_incremental::save_dep_graph(tcx));\n \n-    // We assume that no queries are run past here. If there are new queries\n-    // after this point, they'll show up as \"<unknown>\" in self-profiling data.\n-    {\n-        let _prof_timer = tcx.prof.generic_activity(\"self_profile_alloc_query_strings\");\n-        tcx.alloc_self_profile_query_strings();\n-    }\n-\n     info!(\"Post-codegen\\n{:?}\", tcx.debug_stats());\n \n     if tcx.sess.opts.output_types.contains_key(&OutputType::Mir) {"}, {"sha": "ac6b6d0311545a45f9087471eb6a7b8aca5f56f1", "filename": "compiler/rustc_interface/src/queries.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/81647c627a8d84f970399513ea08a285b167c666/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81647c627a8d84f970399513ea08a285b167c666/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs?ref=81647c627a8d84f970399513ea08a285b167c666", "patch": "@@ -417,9 +417,19 @@ impl Compiler {\n         let queries = Queries::new(&self);\n         let ret = f(&queries);\n \n-        if self.session().opts.debugging_opts.query_stats {\n-            if let Ok(gcx) = queries.global_ctxt() {\n-                gcx.peek_mut().print_stats();\n+        // NOTE: intentionally does not compute the global context if it hasn't been built yet,\n+        // since that likely means there was a parse error.\n+        if let Some(Ok(gcx)) = &mut *queries.global_ctxt.result.borrow_mut() {\n+            // We assume that no queries are run past here. If there are new queries\n+            // after this point, they'll show up as \"<unknown>\" in self-profiling data.\n+            {\n+                let _prof_timer =\n+                    queries.session().prof.generic_activity(\"self_profile_alloc_query_strings\");\n+                gcx.enter(|tcx| tcx.alloc_self_profile_query_strings());\n+            }\n+\n+            if self.session().opts.debugging_opts.query_stats {\n+                gcx.print_stats();\n             }\n         }\n "}, {"sha": "e36af2349360f5ab90ac32bc4271de8f77e91309", "filename": "compiler/rustc_lint/src/early.rs", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/81647c627a8d84f970399513ea08a285b167c666/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81647c627a8d84f970399513ea08a285b167c666/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fearly.rs?ref=81647c627a8d84f970399513ea08a285b167c666", "patch": "@@ -379,17 +379,9 @@ pub fn check_ast_crate<T: EarlyLintPass>(\n     // All of the buffered lints should have been emitted at this point.\n     // If not, that means that we somehow buffered a lint for a node id\n     // that was not lint-checked (perhaps it doesn't exist?). This is a bug.\n-    //\n-    // Rustdoc runs everybody-loops before the early lints and removes\n-    // function bodies, so it's totally possible for linted\n-    // node ids to not exist (e.g., macros defined within functions for the\n-    // unused_macro lint) anymore. So we only run this check\n-    // when we're not in rustdoc mode. (see issue #47639)\n-    if !sess.opts.actually_rustdoc {\n-        for (_id, lints) in buffered.map {\n-            for early_lint in lints {\n-                sess.delay_span_bug(early_lint.span, \"failed to process buffered lint here\");\n-            }\n+    for (_id, lints) in buffered.map {\n+        for early_lint in lints {\n+            sess.delay_span_bug(early_lint.span, \"failed to process buffered lint here\");\n         }\n     }\n }"}, {"sha": "6941fa064ec0392ea2f3606271a1ad4706f65c41", "filename": "src/librustdoc/formats/renderer.rs", "status": "modified", "additions": 23, "deletions": 13, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/81647c627a8d84f970399513ea08a285b167c666/src%2Flibrustdoc%2Fformats%2Frenderer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81647c627a8d84f970399513ea08a285b167c666/src%2Flibrustdoc%2Fformats%2Frenderer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Frenderer.rs?ref=81647c627a8d84f970399513ea08a285b167c666", "patch": "@@ -12,6 +12,9 @@ use crate::formats::cache::{Cache, CACHE_KEY};\n /// backend renderer has hooks for initialization, documenting an item, entering and exiting a\n /// module, and cleanup/finalizing output.\n crate trait FormatRenderer<'tcx>: Clone {\n+    /// Gives a description of the renderer. Used for performance profiling.\n+    fn descr() -> &'static str;\n+\n     /// Sets up any state required for the renderer. When this is called the cache has already been\n     /// populated.\n     fn init(\n@@ -57,16 +60,20 @@ crate fn run_format<'tcx, T: FormatRenderer<'tcx>>(\n     edition: Edition,\n     tcx: TyCtxt<'tcx>,\n ) -> Result<(), Error> {\n-    let (krate, mut cache) = Cache::from_krate(\n-        render_info.clone(),\n-        options.document_private,\n-        &options.extern_html_root_urls,\n-        &options.output,\n-        krate,\n-    );\n-\n-    let (mut format_renderer, mut krate) =\n-        T::init(krate, options, render_info, edition, &mut cache, tcx)?;\n+    let (krate, mut cache) = tcx.sess.time(\"create_format_cache\", || {\n+        Cache::from_krate(\n+            render_info.clone(),\n+            options.document_private,\n+            &options.extern_html_root_urls,\n+            &options.output,\n+            krate,\n+        )\n+    });\n+    let prof = &tcx.sess.prof;\n+\n+    let (mut format_renderer, mut krate) = prof\n+        .extra_verbose_generic_activity(\"create_renderer\", T::descr())\n+        .run(|| T::init(krate, options, render_info, edition, &mut cache, tcx))?;\n \n     let cache = Arc::new(cache);\n     // Freeze the cache now that the index has been built. Put an Arc into TLS for future\n@@ -83,6 +90,7 @@ crate fn run_format<'tcx, T: FormatRenderer<'tcx>>(\n     // Render the crate documentation\n     let mut work = vec![(format_renderer.clone(), item)];\n \n+    let unknown = rustc_span::Symbol::intern(\"<unknown item>\");\n     while let Some((mut cx, item)) = work.pop() {\n         if item.is_mod() {\n             // modules are special because they add a namespace. We also need to\n@@ -91,6 +99,7 @@ crate fn run_format<'tcx, T: FormatRenderer<'tcx>>(\n             if name.is_empty() {\n                 panic!(\"Unexpected module with empty name\");\n             }\n+            let _timer = prof.generic_activity_with_arg(\"render_mod_item\", name.as_str());\n \n             cx.mod_item_in(&item, &name, &cache)?;\n             let module = match *item.kind {\n@@ -104,9 +113,10 @@ crate fn run_format<'tcx, T: FormatRenderer<'tcx>>(\n \n             cx.mod_item_out(&name)?;\n         } else if item.name.is_some() {\n-            cx.item(item, &cache)?;\n+            prof.generic_activity_with_arg(\"render_item\", &*item.name.unwrap_or(unknown).as_str())\n+                .run(|| cx.item(item, &cache))?;\n         }\n     }\n-\n-    format_renderer.after_krate(&krate, &cache, diag)\n+    prof.extra_verbose_generic_activity(\"renderer_after_krate\", T::descr())\n+        .run(|| format_renderer.after_krate(&krate, &cache, diag))\n }"}, {"sha": "8e010839ad81ed05430c331f797c269016e67580", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81647c627a8d84f970399513ea08a285b167c666/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81647c627a8d84f970399513ea08a285b167c666/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=81647c627a8d84f970399513ea08a285b167c666", "patch": "@@ -383,6 +383,10 @@ crate fn initial_ids() -> Vec<String> {\n \n /// Generates the documentation for `crate` into the directory `dst`\n impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n+    fn descr() -> &'static str {\n+        \"html\"\n+    }\n+\n     fn init(\n         mut krate: clean::Crate,\n         options: RenderOptions,"}, {"sha": "512c9124727efde4d836fa436d9a8d103de53775", "filename": "src/librustdoc/json/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81647c627a8d84f970399513ea08a285b167c666/src%2Flibrustdoc%2Fjson%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81647c627a8d84f970399513ea08a285b167c666/src%2Flibrustdoc%2Fjson%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fmod.rs?ref=81647c627a8d84f970399513ea08a285b167c666", "patch": "@@ -125,6 +125,10 @@ impl JsonRenderer<'_> {\n }\n \n impl<'tcx> FormatRenderer<'tcx> for JsonRenderer<'tcx> {\n+    fn descr() -> &'static str {\n+        \"json\"\n+    }\n+\n     fn init(\n         krate: clean::Crate,\n         options: RenderOptions,"}, {"sha": "83736295beb19eab055feb409ba334dd0bf41eae", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81647c627a8d84f970399513ea08a285b167c666/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81647c627a8d84f970399513ea08a285b167c666/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=81647c627a8d84f970399513ea08a285b167c666", "patch": "@@ -540,7 +540,7 @@ fn main_options(options: config::Options) -> MainResult {\n                 sess.fatal(\"Compilation failed, aborting rustdoc\");\n             }\n \n-            let mut global_ctxt = abort_on_err(queries.global_ctxt(), sess).take();\n+            let mut global_ctxt = abort_on_err(queries.global_ctxt(), sess).peek_mut();\n \n             global_ctxt.enter(|tcx| {\n                 let (mut krate, render_info, render_opts) = sess.time(\"run_global_ctxt\", || {"}]}