{"sha": "5669ce1a28891386a93a326b341facbc805ff4bd", "node_id": "C_kwDOAAsO6NoAKDU2NjljZTFhMjg4OTEzODZhOTNhMzI2YjM0MWZhY2JjODA1ZmY0YmQ", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-09-15T14:59:58Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-09-15T14:59:58Z"}, "message": "change `FnMutDelegate` to trait objects", "tree": {"sha": "9e3229132c13a65acd6085f43820b6bec52b8bb3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e3229132c13a65acd6085f43820b6bec52b8bb3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5669ce1a28891386a93a326b341facbc805ff4bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5669ce1a28891386a93a326b341facbc805ff4bd", "html_url": "https://github.com/rust-lang/rust/commit/5669ce1a28891386a93a326b341facbc805ff4bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5669ce1a28891386a93a326b341facbc805ff4bd/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "294f0eef736aa13cadf28ce7160a18a94ca7b87c", "url": "https://api.github.com/repos/rust-lang/rust/commits/294f0eef736aa13cadf28ce7160a18a94ca7b87c", "html_url": "https://github.com/rust-lang/rust/commit/294f0eef736aa13cadf28ce7160a18a94ca7b87c"}], "stats": {"total": 43, "additions": 20, "deletions": 23}, "files": [{"sha": "389afe22eb7672afe16c801ca97c9b1c940390fe", "filename": "compiler/rustc_infer/src/infer/canonical/substitute.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5669ce1a28891386a93a326b341facbc805ff4bd/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fsubstitute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5669ce1a28891386a93a326b341facbc805ff4bd/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fsubstitute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fsubstitute.rs?ref=5669ce1a28891386a93a326b341facbc805ff4bd", "patch": "@@ -72,15 +72,16 @@ where\n         value\n     } else {\n         let delegate = FnMutDelegate {\n-            regions: |br: ty::BoundRegion| match var_values.var_values[br.var].unpack() {\n+            regions: &mut |br: ty::BoundRegion| match var_values.var_values[br.var].unpack() {\n                 GenericArgKind::Lifetime(l) => l,\n                 r => bug!(\"{:?} is a region but value is {:?}\", br, r),\n             },\n-            types: |bound_ty: ty::BoundTy| match var_values.var_values[bound_ty.var].unpack() {\n+            types: &mut |bound_ty: ty::BoundTy| match var_values.var_values[bound_ty.var].unpack() {\n                 GenericArgKind::Type(ty) => ty,\n                 r => bug!(\"{:?} is a type but value is {:?}\", bound_ty, r),\n             },\n-            consts: |bound_ct: ty::BoundVar, _| match var_values.var_values[bound_ct].unpack() {\n+            consts: &mut |bound_ct: ty::BoundVar, _| match var_values.var_values[bound_ct].unpack()\n+            {\n                 GenericArgKind::Const(ct) => ct,\n                 c => bug!(\"{:?} is a const but value is {:?}\", bound_ct, c),\n             },"}, {"sha": "0ce271c0e5d6541b5840c2a287b5fb03e9892941", "filename": "compiler/rustc_infer/src/infer/higher_ranked/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5669ce1a28891386a93a326b341facbc805ff4bd/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5669ce1a28891386a93a326b341facbc805ff4bd/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=5669ce1a28891386a93a326b341facbc805ff4bd", "patch": "@@ -81,19 +81,19 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         let next_universe = self.create_next_universe();\n \n         let delegate = FnMutDelegate {\n-            regions: |br: ty::BoundRegion| {\n+            regions: &mut |br: ty::BoundRegion| {\n                 self.tcx.mk_region(ty::RePlaceholder(ty::PlaceholderRegion {\n                     universe: next_universe,\n                     name: br.kind,\n                 }))\n             },\n-            types: |bound_ty: ty::BoundTy| {\n+            types: &mut |bound_ty: ty::BoundTy| {\n                 self.tcx.mk_ty(ty::Placeholder(ty::PlaceholderType {\n                     universe: next_universe,\n                     name: bound_ty.var,\n                 }))\n             },\n-            consts: |bound_var: ty::BoundVar, ty| {\n+            consts: &mut |bound_var: ty::BoundVar, ty| {\n                 self.tcx.mk_const(ty::ConstS {\n                     kind: ty::ConstKind::Placeholder(ty::PlaceholderConst {\n                         universe: next_universe,"}, {"sha": "1297b90b4f6007de13359f1a0d40965270a35c82", "filename": "compiler/rustc_middle/src/ty/fold.rs", "status": "modified", "additions": 13, "deletions": 17, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/5669ce1a28891386a93a326b341facbc805ff4bd/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5669ce1a28891386a93a326b341facbc805ff4bd/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs?ref=5669ce1a28891386a93a326b341facbc805ff4bd", "patch": "@@ -377,17 +377,13 @@ pub trait BoundVarReplacerDelegate<'tcx> {\n     fn replace_const(&mut self, bv: ty::BoundVar, ty: Ty<'tcx>) -> ty::Const<'tcx>;\n }\n \n-pub struct FnMutDelegate<R, T, C> {\n-    pub regions: R,\n-    pub types: T,\n-    pub consts: C,\n+pub struct FnMutDelegate<'a, 'tcx> {\n+    pub regions: &'a mut (dyn FnMut(ty::BoundRegion) -> ty::Region<'tcx> + 'a),\n+    pub types: &'a mut (dyn FnMut(ty::BoundTy) -> Ty<'tcx> + 'a),\n+    pub consts: &'a mut (dyn FnMut(ty::BoundVar, Ty<'tcx>) -> ty::Const<'tcx> + 'a),\n }\n-impl<'tcx, R, T, C> BoundVarReplacerDelegate<'tcx> for FnMutDelegate<R, T, C>\n-where\n-    R: FnMut(ty::BoundRegion) -> ty::Region<'tcx>,\n-    T: FnMut(ty::BoundTy) -> Ty<'tcx>,\n-    C: FnMut(ty::BoundVar, Ty<'tcx>) -> ty::Const<'tcx>,\n-{\n+\n+impl<'a, 'tcx> BoundVarReplacerDelegate<'tcx> for FnMutDelegate<'a, 'tcx> {\n     fn replace_region(&mut self, br: ty::BoundRegion) -> ty::Region<'tcx> {\n         (self.regions)(br)\n     }\n@@ -511,7 +507,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     pub fn replace_late_bound_regions_uncached<T, F>(\n         self,\n         value: Binder<'tcx, T>,\n-        replace_regions: F,\n+        mut replace_regions: F,\n     ) -> T\n     where\n         F: FnMut(ty::BoundRegion) -> ty::Region<'tcx>,\n@@ -522,9 +518,9 @@ impl<'tcx> TyCtxt<'tcx> {\n             value\n         } else {\n             let delegate = FnMutDelegate {\n-                regions: replace_regions,\n-                types: |b| bug!(\"unexpected bound ty in binder: {b:?}\"),\n-                consts: |b, ty| bug!(\"unexpected bound ct in binder: {b:?} {ty}\"),\n+                regions: &mut replace_regions,\n+                types: &mut |b| bug!(\"unexpected bound ty in binder: {b:?}\"),\n+                consts: &mut |b, ty| bug!(\"unexpected bound ct in binder: {b:?} {ty}\"),\n             };\n             let mut replacer = BoundVarReplacer::new(self, delegate);\n             value.fold_with(&mut replacer)\n@@ -584,19 +580,19 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.replace_escaping_bound_vars_uncached(\n             value,\n             FnMutDelegate {\n-                regions: |r: ty::BoundRegion| {\n+                regions: &mut |r: ty::BoundRegion| {\n                     self.mk_region(ty::ReLateBound(\n                         ty::INNERMOST,\n                         ty::BoundRegion { var: shift_bv(r.var), kind: r.kind },\n                     ))\n                 },\n-                types: |t: ty::BoundTy| {\n+                types: &mut |t: ty::BoundTy| {\n                     self.mk_ty(ty::Bound(\n                         ty::INNERMOST,\n                         ty::BoundTy { var: shift_bv(t.var), kind: t.kind },\n                     ))\n                 },\n-                consts: |c, ty: Ty<'tcx>| {\n+                consts: &mut |c, ty: Ty<'tcx>| {\n                     self.mk_const(ty::ConstS {\n                         kind: ty::ConstKind::Bound(ty::INNERMOST, shift_bv(c)),\n                         ty,"}]}