{"sha": "0c2d4a8a7758793765d33790e22c70b79b8bea56", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjMmQ0YThhNzc1ODc5Mzc2NWQzMzc5MGUyMmM3MGI3OWI4YmVhNTY=", "commit": {"author": {"name": "Chetan Khilosiya", "email": "chetan.khilosiya@gmail.com", "date": "2021-03-15T17:18:50Z"}, "committer": {"name": "Chetan Khilosiya", "email": "chetan.khilosiya@gmail.com", "date": "2021-03-15T17:18:50Z"}, "message": "7709: Updated the implementation.\n\nThe get function from impl method is updated.\nand now same method used to get len and is_empty function.", "tree": {"sha": "365761bc55b25b05a75aa2a165cf9825a2087032", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/365761bc55b25b05a75aa2a165cf9825a2087032"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c2d4a8a7758793765d33790e22c70b79b8bea56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c2d4a8a7758793765d33790e22c70b79b8bea56", "html_url": "https://github.com/rust-lang/rust/commit/0c2d4a8a7758793765d33790e22c70b79b8bea56", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c2d4a8a7758793765d33790e22c70b79b8bea56/comments", "author": {"login": "chetankhilosiya", "id": 1639535, "node_id": "MDQ6VXNlcjE2Mzk1MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/1639535?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chetankhilosiya", "html_url": "https://github.com/chetankhilosiya", "followers_url": "https://api.github.com/users/chetankhilosiya/followers", "following_url": "https://api.github.com/users/chetankhilosiya/following{/other_user}", "gists_url": "https://api.github.com/users/chetankhilosiya/gists{/gist_id}", "starred_url": "https://api.github.com/users/chetankhilosiya/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chetankhilosiya/subscriptions", "organizations_url": "https://api.github.com/users/chetankhilosiya/orgs", "repos_url": "https://api.github.com/users/chetankhilosiya/repos", "events_url": "https://api.github.com/users/chetankhilosiya/events{/privacy}", "received_events_url": "https://api.github.com/users/chetankhilosiya/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chetankhilosiya", "id": 1639535, "node_id": "MDQ6VXNlcjE2Mzk1MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/1639535?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chetankhilosiya", "html_url": "https://github.com/chetankhilosiya", "followers_url": "https://api.github.com/users/chetankhilosiya/followers", "following_url": "https://api.github.com/users/chetankhilosiya/following{/other_user}", "gists_url": "https://api.github.com/users/chetankhilosiya/gists{/gist_id}", "starred_url": "https://api.github.com/users/chetankhilosiya/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chetankhilosiya/subscriptions", "organizations_url": "https://api.github.com/users/chetankhilosiya/orgs", "repos_url": "https://api.github.com/users/chetankhilosiya/repos", "events_url": "https://api.github.com/users/chetankhilosiya/events{/privacy}", "received_events_url": "https://api.github.com/users/chetankhilosiya/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2bf3802f21de48b1c284cdd5e0e9f7f168787d9b", "url": "https://api.github.com/repos/rust-lang/rust/commits/2bf3802f21de48b1c284cdd5e0e9f7f168787d9b", "html_url": "https://github.com/rust-lang/rust/commit/2bf3802f21de48b1c284cdd5e0e9f7f168787d9b"}], "stats": {"total": 110, "additions": 73, "deletions": 37}, "files": [{"sha": "43de9edd65a80bdc804831aa84eeb30ca99253c4", "filename": "crates/hir_expand/src/name.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c2d4a8a7758793765d33790e22c70b79b8bea56/crates%2Fhir_expand%2Fsrc%2Fname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c2d4a8a7758793765d33790e22c70b79b8bea56/crates%2Fhir_expand%2Fsrc%2Fname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fname.rs?ref=0c2d4a8a7758793765d33790e22c70b79b8bea56", "patch": "@@ -191,6 +191,8 @@ pub mod known {\n         filter_map,\n         next,\n         iter_mut,\n+        len,\n+        is_empty,\n         // Builtin macros\n         file,\n         column,"}, {"sha": "aa7072f25ccd3add105a3f644c96a3a102bf225b", "filename": "crates/ide_assists/src/handlers/generate_is_empty_from_len.rs", "status": "modified", "additions": 67, "deletions": 37, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/0c2d4a8a7758793765d33790e22c70b79b8bea56/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_is_empty_from_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c2d4a8a7758793765d33790e22c70b79b8bea56/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_is_empty_from_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_is_empty_from_len.rs?ref=0c2d4a8a7758793765d33790e22c70b79b8bea56", "patch": "@@ -1,4 +1,4 @@\n-use hir::{AssocItem, HasSource, Impl};\n+use hir::{known, HasSource, Name};\n use syntax::{\n     ast::{self, NameOwner},\n     AstNode, TextRange,\n@@ -14,6 +14,8 @@ use crate::{\n // Generates is_empty implementation from the len method.\n //\n // ```\n+// struct MyStruct { data: Vec<String> }\n+//\n // impl MyStruct {\n //     p$0ub fn len(&self) -> usize {\n //         self.data.len()\n@@ -22,6 +24,8 @@ use crate::{\n // ```\n // ->\n // ```\n+// struct MyStruct { data: Vec<String> }\n+//\n // impl MyStruct {\n //     pub fn len(&self) -> usize {\n //         self.data.len()\n@@ -46,60 +50,50 @@ pub(crate) fn generate_is_empty_from_len(acc: &mut Assists, ctx: &AssistContext)\n         return None;\n     }\n \n-    let impl_ = fn_node.syntax().ancestors().into_iter().find_map(ast::Impl::cast)?;\n-    let impl_def = ctx.sema.to_def(&impl_)?;\n-    if is_empty_implemented(ctx, &impl_def) {\n+    let impl_ = fn_node.syntax().ancestors().find_map(ast::Impl::cast)?;\n+    if get_impl_method(ctx, &impl_, &known::is_empty).is_some() {\n         cov_mark::hit!(is_empty_already_implemented);\n         return None;\n     }\n \n-    let range = get_text_range_of_len_function(ctx, &impl_def)?;\n+    let range = get_text_range_of_len_function(ctx, &impl_)?;\n \n     acc.add(\n         AssistId(\"generate_is_empty_from_len\", AssistKind::Generate),\n         \"Generate a is_empty impl from a len function\",\n         range,\n         |builder| {\n-            let code = get_is_empty_code();\n+            let code = r#\"\n+\n+    pub fn is_empty(&self) -> bool {\n+        self.len() == 0\n+    }\"#\n+            .to_string();\n             builder.insert(range.end(), code)\n         },\n     )\n }\n \n-fn get_function_from_impl(ctx: &AssistContext, impl_def: &Impl, name: &str) -> Option<AssocItem> {\n+fn get_impl_method(\n+    ctx: &AssistContext,\n+    impl_: &ast::Impl,\n+    fn_name: &Name,\n+) -> Option<hir::Function> {\n     let db = ctx.sema.db;\n-    impl_def.items(db).into_iter().filter(|item| matches!(item, AssocItem::Function(_value))).find(\n-        |func| match func.name(db) {\n-            Some(fn_name) => fn_name.to_string() == name,\n-            None => false,\n-        },\n-    )\n-}\n+    let impl_def: hir::Impl = ctx.sema.to_def(impl_)?;\n \n-fn is_empty_implemented(ctx: &AssistContext, impl_def: &Impl) -> bool {\n-    get_function_from_impl(ctx, impl_def, \"is_empty\").is_some()\n+    let scope = ctx.sema.scope(impl_.syntax());\n+    let krate = impl_def.module(db).krate();\n+    let ty = impl_def.target_ty(db);\n+    let traits_in_scope = scope.traits_in_scope();\n+    ty.iterate_method_candidates(db, krate, &traits_in_scope, Some(fn_name), |_, func| Some(func))\n }\n \n-fn get_text_range_of_len_function(ctx: &AssistContext, impl_def: &Impl) -> Option<TextRange> {\n+fn get_text_range_of_len_function(ctx: &AssistContext, impl_: &ast::Impl) -> Option<TextRange> {\n     let db = ctx.sema.db;\n-    let len_fn = get_function_from_impl(ctx, impl_def, \"len\")?;\n-\n-    let mut range = None;\n-    if let AssocItem::Function(node) = len_fn {\n-        let node = node.source(db)?;\n-        range = Some(node.syntax().value.text_range());\n-    }\n-\n-    range\n-}\n-\n-fn get_is_empty_code() -> String {\n-    r#\"\n-\n-    pub fn is_empty(&self) -> bool {\n-        self.len() == 0\n-    }\"#\n-    .to_string()\n+    let func = get_impl_method(ctx, impl_, &known::len)?;\n+    let node = func.source(db)?;\n+    Some(node.syntax().value.text_range())\n }\n \n #[cfg(test)]\n@@ -114,6 +108,8 @@ mod tests {\n         check_assist_not_applicable(\n             generate_is_empty_from_len,\n             r#\"\n+struct MyStruct { data: Vec<String> }\n+\n impl MyStruct {\n     p$0ub fn test(&self) -> usize {\n             self.data.len()\n@@ -129,6 +125,8 @@ impl MyStruct {\n         check_assist_not_applicable(\n             generate_is_empty_from_len,\n             r#\"\n+struct MyStruct { data: Vec<String> }\n+\n impl MyStruct {\n     p$0ub fn len(&self, _i: bool) -> usize {\n         self.data.len()\n@@ -144,6 +142,8 @@ impl MyStruct {\n         check_assist_not_applicable(\n             generate_is_empty_from_len,\n             r#\"\n+struct MyStruct { data: Vec<String> }\n+\n impl MyStruct {\n     p$0ub fn len(&self) -> usize {\n         self.data.len()\n@@ -162,13 +162,17 @@ impl MyStruct {\n         check_assist(\n             generate_is_empty_from_len,\n             r#\"\n+struct MyStruct { data: Vec<String> }\n+\n impl MyStruct {\n     p$0ub fn len(&self) -> usize {\n         self.data.len()\n     }\n }\n \"#,\n             r#\"\n+struct MyStruct { data: Vec<String> }\n+\n impl MyStruct {\n     pub fn len(&self) -> usize {\n         self.data.len()\n@@ -187,6 +191,8 @@ impl MyStruct {\n         check_assist(\n             generate_is_empty_from_len,\n             r#\"\n+struct MyStruct { data: Vec<String> }\n+\n impl MyStruct {\n     pub fn new() -> Self {\n         Self { data: 0 }\n@@ -197,11 +203,13 @@ impl MyStruct {\n     }\n \n     pub fn work(&self) -> Option<usize> {\n-        // do some work\n+\n     }\n }\n \"#,\n             r#\"\n+struct MyStruct { data: Vec<String> }\n+\n impl MyStruct {\n     pub fn new() -> Self {\n         Self { data: 0 }\n@@ -216,7 +224,29 @@ impl MyStruct {\n     }\n \n     pub fn work(&self) -> Option<usize> {\n-        // do some work\n+\n+    }\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn multiple_impls() {\n+        check_assist_not_applicable(\n+            generate_is_empty_from_len,\n+            r#\"\n+struct MyStruct { data: Vec<String> }\n+\n+impl MyStruct {\n+    p$0ub fn len(&self) -> usize {\n+        self.data.len()\n+    }\n+}\n+\n+impl MyStruct {\n+    pub fn is_empty(&self) -> bool {\n+        self.len() == 0\n     }\n }\n \"#,"}, {"sha": "736027ff00b6785dc4abaeec09d8ba1a89a0388c", "filename": "crates/ide_assists/src/tests/generated.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c2d4a8a7758793765d33790e22c70b79b8bea56/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c2d4a8a7758793765d33790e22c70b79b8bea56/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=0c2d4a8a7758793765d33790e22c70b79b8bea56", "patch": "@@ -726,13 +726,17 @@ fn doctest_generate_is_empty_from_len() {\n     check_doc_test(\n         \"generate_is_empty_from_len\",\n         r#####\"\n+struct MyStruct { data: Vec<String> }\n+\n impl MyStruct {\n     p$0ub fn len(&self) -> usize {\n         self.data.len()\n     }\n }\n \"#####,\n         r#####\"\n+struct MyStruct { data: Vec<String> }\n+\n impl MyStruct {\n     pub fn len(&self) -> usize {\n         self.data.len()"}]}