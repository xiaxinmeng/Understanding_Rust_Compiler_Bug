{"sha": "dad8e11e9fcbd76c0a2dc47211dcd654effed010", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhZDhlMTFlOWZjYmQ3NmMwYTJkYzQ3MjExZGNkNjU0ZWZmZWQwMTA=", "commit": {"author": {"name": "Alexis Bourget", "email": "alexis.bourget@gmail.com", "date": "2020-08-19T14:26:17Z"}, "committer": {"name": "Alexis Bourget", "email": "alexis.bourget@gmail.com", "date": "2020-08-19T14:26:17Z"}, "message": "Fix nits in intra-doc links for std io", "tree": {"sha": "60310e0d41ba4e5c12d657e7f234d0e1def36788", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/60310e0d41ba4e5c12d657e7f234d0e1def36788"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dad8e11e9fcbd76c0a2dc47211dcd654effed010", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dad8e11e9fcbd76c0a2dc47211dcd654effed010", "html_url": "https://github.com/rust-lang/rust/commit/dad8e11e9fcbd76c0a2dc47211dcd654effed010", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dad8e11e9fcbd76c0a2dc47211dcd654effed010/comments", "author": {"login": "poliorcetics", "id": 7951708, "node_id": "MDQ6VXNlcjc5NTE3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7951708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poliorcetics", "html_url": "https://github.com/poliorcetics", "followers_url": "https://api.github.com/users/poliorcetics/followers", "following_url": "https://api.github.com/users/poliorcetics/following{/other_user}", "gists_url": "https://api.github.com/users/poliorcetics/gists{/gist_id}", "starred_url": "https://api.github.com/users/poliorcetics/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poliorcetics/subscriptions", "organizations_url": "https://api.github.com/users/poliorcetics/orgs", "repos_url": "https://api.github.com/users/poliorcetics/repos", "events_url": "https://api.github.com/users/poliorcetics/events{/privacy}", "received_events_url": "https://api.github.com/users/poliorcetics/received_events", "type": "User", "site_admin": false}, "committer": {"login": "poliorcetics", "id": 7951708, "node_id": "MDQ6VXNlcjc5NTE3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7951708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poliorcetics", "html_url": "https://github.com/poliorcetics", "followers_url": "https://api.github.com/users/poliorcetics/followers", "following_url": "https://api.github.com/users/poliorcetics/following{/other_user}", "gists_url": "https://api.github.com/users/poliorcetics/gists{/gist_id}", "starred_url": "https://api.github.com/users/poliorcetics/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poliorcetics/subscriptions", "organizations_url": "https://api.github.com/users/poliorcetics/orgs", "repos_url": "https://api.github.com/users/poliorcetics/repos", "events_url": "https://api.github.com/users/poliorcetics/events{/privacy}", "received_events_url": "https://api.github.com/users/poliorcetics/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d49c0e55a1ab9757c05df44bee4bf50d9d71f9c", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d49c0e55a1ab9757c05df44bee4bf50d9d71f9c", "html_url": "https://github.com/rust-lang/rust/commit/5d49c0e55a1ab9757c05df44bee4bf50d9d71f9c"}], "stats": {"total": 44, "additions": 22, "deletions": 22}, "files": [{"sha": "324562948382890d5ba99d7fd91bc617d8d75c7e", "filename": "library/std/src/io/mod.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/dad8e11e9fcbd76c0a2dc47211dcd654effed010/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dad8e11e9fcbd76c0a2dc47211dcd654effed010/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fmod.rs?ref=dad8e11e9fcbd76c0a2dc47211dcd654effed010", "patch": "@@ -479,11 +479,11 @@ where\n /// }\n /// ```\n ///\n-/// [`read()`]: Self::read\n+/// [`read()`]: Read::read\n /// [`&str`]: str\n /// [`std::io`]: self\n /// [`File`]: crate::fs::File\n-/// [slice]: crate::slice\n+/// [slice]: ../../std/primitive.slice.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[doc(spotlight)]\n pub trait Read {\n@@ -633,7 +633,7 @@ pub trait Read {\n     ///\n     /// [`File`]s implement `Read`:\n     ///\n-    /// [`read()`]: Self::read\n+    /// [`read()`]: Read::read\n     /// [`Ok(0)`]: Ok\n     /// [`File`]: crate::fs::File\n     ///\n@@ -673,7 +673,7 @@ pub trait Read {\n     ///\n     /// See [`read_to_end`] for other error semantics.\n     ///\n-    /// [`read_to_end`]: Self::read_to_end\n+    /// [`read_to_end`]: Read::read_to_end\n     ///\n     /// # Examples\n     ///\n@@ -746,7 +746,7 @@ pub trait Read {\n     ///\n     /// [`File`]s implement `Read`:\n     ///\n-    /// [`read`]: Self::read\n+    /// [`read`]: Read::read\n     /// [`File`]: crate::fs::File\n     ///\n     /// ```no_run\n@@ -1209,8 +1209,8 @@ impl Initializer {\n /// throughout [`std::io`] take and provide types which implement the `Write`\n /// trait.\n ///\n-/// [`write`]: Self::write\n-/// [`flush`]: Self::flush\n+/// [`write`]: Write::write\n+/// [`flush`]: Write::flush\n /// [`std::io`]: self\n ///\n /// # Examples\n@@ -1236,7 +1236,7 @@ impl Initializer {\n /// The trait also provides convenience methods like [`write_all`], which calls\n /// `write` in a loop until its entire input has been written.\n ///\n-/// [`write_all`]: Self::write_all\n+/// [`write_all`]: Write::write_all\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[doc(spotlight)]\n pub trait Write {\n@@ -1296,7 +1296,7 @@ pub trait Write {\n     /// The default implementation calls [`write`] with either the first nonempty\n     /// buffer provided, or an empty one if none exists.\n     ///\n-    /// [`write`]: Self::write\n+    /// [`write`]: Write::write\n     #[stable(feature = \"iovec\", since = \"1.36.0\")]\n     fn write_vectored(&mut self, bufs: &[IoSlice<'_>]) -> Result<usize> {\n         default_write_vectored(|b| self.write(b), bufs)\n@@ -1311,7 +1311,7 @@ pub trait Write {\n     ///\n     /// The default implementation returns `false`.\n     ///\n-    /// [`write_vectored`]: Self::write_vectored\n+    /// [`write_vectored`]: Write::write_vectored\n     #[unstable(feature = \"can_vector\", issue = \"69941\")]\n     fn is_write_vectored(&self) -> bool {\n         false\n@@ -1359,7 +1359,7 @@ pub trait Write {\n     /// This function will return the first error of\n     /// non-[`ErrorKind::Interrupted`] kind that [`write`] returns.\n     ///\n-    /// [`write`]: Self::write\n+    /// [`write`]: Write::write\n     ///\n     /// # Examples\n     ///\n@@ -1400,8 +1400,6 @@ pub trait Write {\n     ///\n     /// If the buffer contains no data, this will never call [`write_vectored`].\n     ///\n-    /// [`write_vectored`]: Self::write_vectored\n-    ///\n     /// # Notes\n     ///\n     /// Unlike [`write_vectored`], this takes a *mutable* reference to\n@@ -1415,6 +1413,8 @@ pub trait Write {\n     /// [`IoSlice`]s point (but not the [`IoSlice`]s themselves), are unchanged and\n     /// can be reused.\n     ///\n+    /// [`write_vectored`]: Write::write_vectored\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -1467,7 +1467,7 @@ pub trait Write {\n     /// are received. This also means that partial writes are not indicated in\n     /// this signature.\n     ///\n-    /// [`write_all`]: Self::write_all\n+    /// [`write_all`]: Write::write_all\n     ///\n     /// # Errors\n     ///\n@@ -1758,8 +1758,8 @@ fn read_until<R: BufRead + ?Sized>(r: &mut R, delim: u8, buf: &mut Vec<u8>) -> R\n /// [`BufReader`] to the rescue!\n ///\n /// [`File`]: crate::fs::File\n-/// [`read_line`]: Self::read_line\n-/// [`lines`]: Self::lines\n+/// [`read_line`]: BufRead::read_line\n+/// [`lines`]: BufRead::lines\n ///\n /// ```no_run\n /// use std::io::{self, BufReader};\n@@ -1789,7 +1789,7 @@ pub trait BufRead: Read {\n     /// be called with the number of bytes that are consumed from this buffer to\n     /// ensure that the bytes are never returned twice.\n     ///\n-    /// [`consume`]: Self::consume\n+    /// [`consume`]: BufRead::consume\n     ///\n     /// An empty buffer returned indicates that the stream has reached EOF.\n     ///\n@@ -1839,7 +1839,7 @@ pub trait BufRead: Read {\n     /// Since `consume()` is meant to be used with [`fill_buf`],\n     /// that method's example includes an example of `consume()`.\n     ///\n-    /// [`fill_buf`]: Self::fill_buf\n+    /// [`fill_buf`]: BufRead::fill_buf\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn consume(&mut self, amt: usize);\n \n@@ -1863,7 +1863,7 @@ pub trait BufRead: Read {\n     /// If an I/O error is encountered then all bytes read so far will be\n     /// present in `buf` and its length will have been adjusted appropriately.\n     ///\n-    /// [`fill_buf`]: Self::fill_buf\n+    /// [`fill_buf`]: BufRead::fill_buf\n     ///\n     /// # Examples\n     ///\n@@ -1927,7 +1927,7 @@ pub trait BufRead: Read {\n     /// error is encountered then `buf` may contain some bytes already read in\n     /// the event that all data read so far was valid UTF-8.\n     ///\n-    /// [`read_until`]: Self::read_until\n+    /// [`read_until`]: BufRead::read_until\n     ///\n     /// # Examples\n     ///\n@@ -1980,7 +1980,7 @@ pub trait BufRead: Read {\n     ///\n     /// [`io::Result`]: self::Result\n     /// [`Vec<u8>`]: Vec\n-    /// [`read_until`]: Self::read_until\n+    /// [`read_until`]: BufRead::read_until\n     ///\n     /// # Examples\n     ///\n@@ -2011,7 +2011,7 @@ pub trait BufRead: Read {\n     ///\n     /// The iterator returned from this function will yield instances of\n     /// [`io::Result`]`<`[`String`]`>`. Each string returned will *not* have a newline\n-    /// byte (the `0xA` byte) or CRLF (0xD, 0xA bytes) at the end.\n+    /// byte (the `0xA` byte) or `CRLF` (`0xD`, `0xA` bytes) at the end.\n     ///\n     /// [`io::Result`]: self::Result\n     ///"}]}