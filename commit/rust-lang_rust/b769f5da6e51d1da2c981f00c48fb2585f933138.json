{"sha": "b769f5da6e51d1da2c981f00c48fb2585f933138", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3NjlmNWRhNmU1MWQxZGEyYzk4MWYwMGM0OGZiMjU4NWY5MzMxMzg=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-11-24T15:57:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-24T15:57:32Z"}, "message": "Merge #6621\n\n6621: Handle ellipsis in tuple patterns in match exhaustiveness checking r=flodiebold a=Veykril\n\n\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "28cf6c71f19293dc0d3995f4746fa48275fdb24d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28cf6c71f19293dc0d3995f4746fa48275fdb24d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b769f5da6e51d1da2c981f00c48fb2585f933138", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfvS1sCRBK7hj4Ov3rIwAAdHIIAA467Rhf4/kuEFe4aZ/TvhPD\nyI6w3I9BqQDuiQacZqoaMUFlyjWu7gu22X/8z0tqJ9IwwHt4S0VxV5awrJpvaVbq\nPSg+KbaHQ4d77tVS+7qn4dYnDm4t1qRsRSlAQoOaawcKQ3lptpV3yN523Yhs/cAw\naEjhx/NtIorL+giuA23xeMJqE8vicuwK1GADwoxXOecsSwEcB9g2kOqymS2K4Ehs\nul36PJh3RQa8ivYOpcAW8Y7rdEgve4XkqtNh5dFkdpvrsYMv5z3az3tEsSHfkpPB\nz/yW4Wl+DIEpoItNsMWvTgKXc0UGdr094hX0D20oJ2mGaCQvj/12YBQltpsAHbM=\n=6q21\n-----END PGP SIGNATURE-----\n", "payload": "tree 28cf6c71f19293dc0d3995f4746fa48275fdb24d\nparent 67d45851bf2257f6f255fb6863163a6836816cff\nparent 4d841dc4e7ebb63fd7060f0c08639e83525c8e4d\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1606233452 +0000\ncommitter GitHub <noreply@github.com> 1606233452 +0000\n\nMerge #6621\n\n6621: Handle ellipsis in tuple patterns in match exhaustiveness checking r=flodiebold a=Veykril\n\n\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b769f5da6e51d1da2c981f00c48fb2585f933138", "html_url": "https://github.com/rust-lang/rust/commit/b769f5da6e51d1da2c981f00c48fb2585f933138", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b769f5da6e51d1da2c981f00c48fb2585f933138/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67d45851bf2257f6f255fb6863163a6836816cff", "url": "https://api.github.com/repos/rust-lang/rust/commits/67d45851bf2257f6f255fb6863163a6836816cff", "html_url": "https://github.com/rust-lang/rust/commit/67d45851bf2257f6f255fb6863163a6836816cff"}, {"sha": "4d841dc4e7ebb63fd7060f0c08639e83525c8e4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d841dc4e7ebb63fd7060f0c08639e83525c8e4d", "html_url": "https://github.com/rust-lang/rust/commit/4d841dc4e7ebb63fd7060f0c08639e83525c8e4d"}], "stats": {"total": 97, "additions": 55, "deletions": 42}, "files": [{"sha": "a52f41764be355e45656a343693aa0842a1ff367", "filename": "crates/hir_ty/src/diagnostics/match_check.rs", "status": "modified", "additions": 55, "deletions": 42, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/b769f5da6e51d1da2c981f00c48fb2585f933138/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fmatch_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b769f5da6e51d1da2c981f00c48fb2585f933138/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fmatch_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fmatch_check.rs?ref=b769f5da6e51d1da2c981f00c48fb2585f933138", "patch": "@@ -216,7 +216,7 @@\n //!   U(P, p) := U(P, (r_1, p_2, .., p_n))\n //!            || U(P, (r_2, p_2, .., p_n))\n //!   ```\n-use std::sync::Arc;\n+use std::{iter, sync::Arc};\n \n use arena::Idx;\n use hir_def::{\n@@ -366,16 +366,17 @@ impl PatStack {\n \n         let head_pat = head.as_pat(cx);\n         let result = match (head_pat, constructor) {\n-            (Pat::Tuple { args: ref pat_ids, ellipsis }, Constructor::Tuple { arity: _ }) => {\n-                if ellipsis.is_some() {\n-                    // If there are ellipsis here, we should add the correct number of\n-                    // Pat::Wild patterns to `pat_ids`. We should be able to use the\n-                    // constructors arity for this, but at the time of writing we aren't\n-                    // correctly calculating this arity when ellipsis are present.\n-                    return Err(MatchCheckErr::NotImplemented);\n+            (Pat::Tuple { args: pat_ids, ellipsis }, &Constructor::Tuple { arity }) => {\n+                if let Some(ellipsis) = ellipsis {\n+                    let (pre, post) = pat_ids.split_at(ellipsis);\n+                    let n_wild_pats = arity.saturating_sub(pat_ids.len());\n+                    let pre_iter = pre.iter().map(Into::into);\n+                    let wildcards = iter::repeat(PatIdOrWild::Wild).take(n_wild_pats);\n+                    let post_iter = post.iter().map(Into::into);\n+                    Some(self.replace_head_with(pre_iter.chain(wildcards).chain(post_iter)))\n+                } else {\n+                    Some(self.replace_head_with(pat_ids.iter()))\n                 }\n-\n-                Some(self.replace_head_with(pat_ids.iter()))\n             }\n             (Pat::Lit(lit_expr), Constructor::Bool(constructor_val)) => {\n                 match cx.body.exprs[lit_expr] {\n@@ -767,10 +768,11 @@ impl Constructor {\n fn pat_constructor(cx: &MatchCheckCtx, pat: PatIdOrWild) -> MatchCheckResult<Option<Constructor>> {\n     let res = match pat.as_pat(cx) {\n         Pat::Wild => None,\n-        // FIXME somehow create the Tuple constructor with the proper arity. If there are\n-        // ellipsis, the arity is not equal to the number of patterns.\n-        Pat::Tuple { args: pats, ellipsis } if ellipsis.is_none() => {\n-            Some(Constructor::Tuple { arity: pats.len() })\n+        Pat::Tuple { .. } => {\n+            let pat_id = pat.as_id().expect(\"we already know this pattern is not a wild\");\n+            Some(Constructor::Tuple {\n+                arity: cx.infer.type_of_pat[pat_id].as_tuple().ok_or(MatchCheckErr::Unknown)?.len(),\n+            })\n         }\n         Pat::Lit(lit_expr) => match cx.body.exprs[lit_expr] {\n             Expr::Literal(Literal::Bool(val)) => Some(Constructor::Bool(val)),\n@@ -1352,6 +1354,45 @@ fn main() {\n         );\n     }\n \n+    #[test]\n+    fn tuple_of_bools_with_ellipsis_at_end_missing_arm() {\n+        check_diagnostics(\n+            r#\"\n+fn main() {\n+    match (false, true, false) {\n+        //^^^^^^^^^^^^^^^^^^^^ Missing match arm\n+        (false, ..) => (),\n+    }\n+}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn tuple_of_bools_with_ellipsis_at_beginning_missing_arm() {\n+        check_diagnostics(\n+            r#\"\n+fn main() {\n+    match (false, true, false) {\n+        //^^^^^^^^^^^^^^^^^^^^ Missing match arm\n+        (.., false) => (),\n+    }\n+}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn tuple_of_bools_with_ellipsis_in_middle_missing_arm() {\n+        check_diagnostics(\n+            r#\"\n+fn main() {\n+    match (false, true, false) {\n+        //^^^^^^^^^^^^^^^^^^^^ Missing match arm\n+        (true, .., false) => (),\n+    }\n+}\"#,\n+        );\n+    }\n+\n     mod false_negatives {\n         //! The implementation of match checking here is a work in progress. As we roll this out, we\n         //! prefer false negatives to false positives (ideally there would be no false positives). This\n@@ -1394,34 +1435,6 @@ fn main() {\n             );\n         }\n \n-        #[test]\n-        fn tuple_of_bools_with_ellipsis_at_end_missing_arm() {\n-            // We don't currently handle tuple patterns with ellipsis.\n-            check_diagnostics(\n-                r#\"\n-fn main() {\n-    match (false, true, false) {\n-        (false, ..) => (),\n-    }\n-}\n-\"#,\n-            );\n-        }\n-\n-        #[test]\n-        fn tuple_of_bools_with_ellipsis_at_beginning_missing_arm() {\n-            // We don't currently handle tuple patterns with ellipsis.\n-            check_diagnostics(\n-                r#\"\n-fn main() {\n-    match (false, true, false) {\n-        (.., false) => (),\n-    }\n-}\n-\"#,\n-            );\n-        }\n-\n         #[test]\n         fn struct_missing_arm() {\n             // We don't currently handle structs."}]}