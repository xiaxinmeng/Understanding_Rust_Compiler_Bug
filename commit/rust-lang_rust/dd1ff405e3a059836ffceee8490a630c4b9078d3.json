{"sha": "dd1ff405e3a059836ffceee8490a630c4b9078d3", "node_id": "C_kwDOAAsO6NoAKGRkMWZmNDA1ZTNhMDU5ODM2ZmZjZWVlODQ5MGE2MzBjNGI5MDc4ZDM", "commit": {"author": {"name": "flip1995", "email": "philipp.krones@embecosm.com", "date": "2022-05-05T14:50:11Z"}, "committer": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2022-05-07T15:10:30Z"}, "message": "Track if a where bound comes from a impl Trait desugar\n\nWith #93803 `impl Trait` function arguments get desugared to hidden\nwhere bounds. However, Clippy needs to know if a bound was originally a\nimpl Trait or an actual bound. This adds a field to the\n`WhereBoundPredicate` struct to keep track of this information during\nHIR lowering.", "tree": {"sha": "d994868b2fe3be60bd391d6e61b7e45f868e4758", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d994868b2fe3be60bd391d6e61b7e45f868e4758"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd1ff405e3a059836ffceee8490a630c4b9078d3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEqv54U47RUUXZfOLnLO/Nsn7QvnkFAmJ2i+YACgkQLO/Nsn7Q\nvnmi2Q//ZqFtI+4BbqIAblYUsag3BeBDfOHVp/f1vTZm31jFuMMWkBc3/A0qtmXZ\nF/f3PquHAjYyf/O9h1HE7qIqs/0dLwvdPHhx+9hlFC4f/tQosYVXaCwB7/zcyv9F\nvGbQIESIQQ9sNACLC2DJJ6rcWwDhcsEk5do53qZIKIruR+b+rX4MqSE/dhonZgH1\nEhEwuPupfYlpAyw+eykgWZG1BKppYqn0c55v1Fof+bZ7YZg/ZhHx4eSzs14PX8na\ng6lrMaZj5Wtzq03cz/GT91vVUEJyQxUKJHTNRWXzg5LcZjr65FYo7YjercqHbQ1M\nCTo2j+gvof3rCgo+eJxrmiKNm04kWPDZCOJh/FP+e0eElTQoCNgwCmTsC9R06+s+\nVBMUMyR/V2Z/MRLrvVqjKAImAlb3ODmHOifCMLqh2bqP0Jo59JKsxKdfRX1m+zM7\nol0mlRRMx7r8peuhW9sBrCaI1LZxll2VLSp9Vmn+XjGCNhG532l67Ko89Mi+xNSB\nWPdQzZkSuUepPHdojClDIgwILnyJ/FQl1MluPwRNFMWfKzs4L3PhNs1rYLNarNgN\nQ8TDt6XBB6Y46HFY/xImmPfDeyzAjOvXM/sxj29HpMPfLX0qrZJ19DrCSn98Iqo6\n2NC1Ws4ReP4uVrdyfmEGq/yE6en4S9J7+UEvuaThTtKWQSpIwWA=\n=YFnr\n-----END PGP SIGNATURE-----", "payload": "tree d994868b2fe3be60bd391d6e61b7e45f868e4758\nparent f47d2b3ad6e0021085cb24de6f31e50cee0d0cfe\nauthor flip1995 <philipp.krones@embecosm.com> 1651762211 +0100\ncommitter flip1995 <hello@philkrones.com> 1651936230 +0200\n\nTrack if a where bound comes from a impl Trait desugar\n\nWith #93803 `impl Trait` function arguments get desugared to hidden\nwhere bounds. However, Clippy needs to know if a bound was originally a\nimpl Trait or an actual bound. This adds a field to the\n`WhereBoundPredicate` struct to keep track of this information during\nHIR lowering.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd1ff405e3a059836ffceee8490a630c4b9078d3", "html_url": "https://github.com/rust-lang/rust/commit/dd1ff405e3a059836ffceee8490a630c4b9078d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd1ff405e3a059836ffceee8490a630c4b9078d3/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f47d2b3ad6e0021085cb24de6f31e50cee0d0cfe", "url": "https://api.github.com/repos/rust-lang/rust/commits/f47d2b3ad6e0021085cb24de6f31e50cee0d0cfe", "html_url": "https://github.com/rust-lang/rust/commit/f47d2b3ad6e0021085cb24de6f31e50cee0d0cfe"}], "stats": {"total": 46, "additions": 34, "deletions": 12}, "files": [{"sha": "cf97b270ed8f9779fb7d3c001b6ef3d5b0197abe", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/dd1ff405e3a059836ffceee8490a630c4b9078d3/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd1ff405e3a059836ffceee8490a630c4b9078d3/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=dd1ff405e3a059836ffceee8490a630c4b9078d3", "patch": "@@ -11,6 +11,7 @@ use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{LocalDefId, CRATE_DEF_ID};\n+use rustc_hir::PredicateOrigin;\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_session::utils::NtToTokenstream;\n use rustc_session::Session;\n@@ -1346,7 +1347,13 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         let mut predicates = SmallVec::new();\n         predicates.extend(generics.params.iter().filter_map(|param| {\n             let bounds = self.lower_param_bounds(&param.bounds, itctx.reborrow());\n-            self.lower_generic_bound_predicate(param.ident, param.id, &param.kind, bounds)\n+            self.lower_generic_bound_predicate(\n+                param.ident,\n+                param.id,\n+                &param.kind,\n+                bounds,\n+                PredicateOrigin::GenericParam,\n+            )\n         }));\n         predicates.extend(\n             generics\n@@ -1380,6 +1387,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         id: NodeId,\n         kind: &GenericParamKind,\n         bounds: &'hir [hir::GenericBound<'hir>],\n+        origin: PredicateOrigin,\n     ) -> Option<hir::WherePredicate<'hir>> {\n         // Do not create a clause if we do not have anything inside it.\n         if bounds.is_empty() {\n@@ -1419,7 +1427,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     bounds,\n                     span,\n                     bound_generic_params: &[],\n-                    in_where_clause: false,\n+                    origin,\n                 }))\n             }\n             GenericParamKind::Lifetime => {\n@@ -1458,7 +1466,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     )\n                 })),\n                 span: self.lower_span(span),\n-                in_where_clause: true,\n+                origin: PredicateOrigin::WhereClause,\n             }),\n             WherePredicate::RegionPredicate(WhereRegionPredicate {\n                 ref lifetime,"}, {"sha": "91d37fa1612ce8120ff848201c30a2f873eb5fb9", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dd1ff405e3a059836ffceee8490a630c4b9078d3/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd1ff405e3a059836ffceee8490a630c4b9078d3/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=dd1ff405e3a059836ffceee8490a630c4b9078d3", "patch": "@@ -1298,6 +1298,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                             def_node_id,\n                             &GenericParamKind::Type { default: None },\n                             hir_bounds,\n+                            hir::PredicateOrigin::ImplTrait,\n                         ) {\n                             in_band_ty_bounds.push(preds)\n                         }"}, {"sha": "3848e8ba0f1ea7705719504b45f7de2599484298", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dd1ff405e3a059836ffceee8490a630c4b9078d3/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd1ff405e3a059836ffceee8490a630c4b9078d3/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=dd1ff405e3a059836ffceee8490a630c4b9078d3", "patch": "@@ -706,7 +706,7 @@ impl<'hir> WherePredicate<'hir> {\n \n     pub fn in_where_clause(&self) -> bool {\n         match self {\n-            WherePredicate::BoundPredicate(p) => p.in_where_clause,\n+            WherePredicate::BoundPredicate(p) => p.origin == PredicateOrigin::WhereClause,\n             WherePredicate::RegionPredicate(p) => p.in_where_clause,\n             WherePredicate::EqPredicate(_) => false,\n         }\n@@ -721,11 +721,19 @@ impl<'hir> WherePredicate<'hir> {\n     }\n }\n \n+#[derive(Debug, HashStable_Generic, PartialEq, Eq)]\n+pub enum PredicateOrigin {\n+    WhereClause,\n+    GenericParam,\n+    ImplTrait,\n+}\n+\n /// A type bound (e.g., `for<'c> Foo: Send + Clone + 'c`).\n #[derive(Debug, HashStable_Generic)]\n pub struct WhereBoundPredicate<'hir> {\n     pub span: Span,\n-    pub in_where_clause: bool,\n+    /// Origin of the predicate.\n+    pub origin: PredicateOrigin,\n     /// Any generics from a `for` binding.\n     pub bound_generic_params: &'hir [GenericParam<'hir>],\n     /// The type being bounded."}, {"sha": "524fb6556b99546c5e3b8595c69e0fb88eec284f", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dd1ff405e3a059836ffceee8490a630c4b9078d3/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd1ff405e3a059836ffceee8490a630c4b9078d3/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=dd1ff405e3a059836ffceee8490a630c4b9078d3", "patch": "@@ -36,7 +36,7 @@ use rustc_feature::{deprecated_attributes, AttributeGate, BuiltinAttribute, Gate\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{DefId, LocalDefId, LocalDefIdSet, CRATE_DEF_ID};\n-use rustc_hir::{ForeignItemKind, GenericParamKind, HirId, PatKind};\n+use rustc_hir::{ForeignItemKind, GenericParamKind, HirId, PatKind, PredicateOrigin};\n use rustc_index::vec::Idx;\n use rustc_middle::lint::LintDiagnosticBuilder;\n use rustc_middle::ty::layout::{LayoutError, LayoutOf};\n@@ -2226,7 +2226,7 @@ impl<'tcx> LateLintPass<'tcx> for ExplicitOutlivesRequirements {\n                                     Self::lifetimes_outliving_type(inferred_outlives, index),\n                                     &predicate.bounds,\n                                     predicate.span,\n-                                    predicate.in_where_clause,\n+                                    predicate.origin == PredicateOrigin::WhereClause,\n                                 )\n                             }\n                             _ => {"}, {"sha": "7cc96183d6da48cb4eb6bc41b946023b29a66133", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd1ff405e3a059836ffceee8490a630c4b9078d3/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd1ff405e3a059836ffceee8490a630c4b9078d3/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=dd1ff405e3a059836ffceee8490a630c4b9078d3", "patch": "@@ -16,6 +16,7 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, DefKind, Res};\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n+use rustc_hir::PredicateOrigin;\n use rustc_infer::infer::region_constraints::{Constraint, RegionConstraintData};\n use rustc_middle::middle::resolve_lifetime as rl;\n use rustc_middle::ty::fold::TypeFolder;\n@@ -493,7 +494,7 @@ fn clean_generic_param(\n             let bounds = if let Some(generics) = generics {\n                 generics\n                     .bounds_for_param(did)\n-                    .filter(|bp| !bp.in_where_clause)\n+                    .filter(|bp| bp.origin != PredicateOrigin::WhereClause)\n                     .flat_map(|bp| bp.bounds)\n                     .filter_map(|x| x.clean(cx))\n                     .collect()"}, {"sha": "51d5b510ab93053e155d1b6ec3cbb0ade5ceb101", "filename": "src/tools/clippy/clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dd1ff405e3a059836ffceee8490a630c4b9078d3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd1ff405e3a059836ffceee8490a630c4b9078d3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flifetimes.rs?ref=dd1ff405e3a059836ffceee8490a630c4b9078d3", "patch": "@@ -9,8 +9,8 @@ use rustc_hir::intravisit::{\n use rustc_hir::FnRetTy::Return;\n use rustc_hir::{\n     BareFnTy, BodyId, FnDecl, GenericArg, GenericBound, GenericParam, GenericParamKind, Generics, Impl, ImplItem,\n-    ImplItemKind, Item, ItemKind, LangItem, Lifetime, LifetimeName, ParamName, PolyTraitRef, TraitBoundModifier,\n-    TraitFn, TraitItem, TraitItemKind, Ty, TyKind, WherePredicate,\n+    ImplItemKind, Item, ItemKind, LangItem, Lifetime, LifetimeName, ParamName, PolyTraitRef, PredicateOrigin,\n+    TraitBoundModifier, TraitFn, TraitItem, TraitItemKind, Ty, TyKind, WherePredicate,\n };\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::hir::nested_filter as middle_nested_filter;\n@@ -145,7 +145,7 @@ fn check_fn_inner<'tcx>(\n         .filter(|param| matches!(param.kind, GenericParamKind::Type { .. }));\n     for typ in types {\n         for pred in generics.bounds_for_param(cx.tcx.hir().local_def_id(typ.hir_id)) {\n-            if pred.in_where_clause {\n+            if pred.origin == PredicateOrigin::WhereClause {\n                 // has_where_lifetimes checked that this predicate contains no lifetime.\n                 continue;\n             }"}, {"sha": "911da3997ae451160af7106915e89e3a1243c093", "filename": "src/tools/clippy/clippy_lints/src/trait_bounds.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dd1ff405e3a059836ffceee8490a630c4b9078d3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftrait_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd1ff405e3a059836ffceee8490a630c4b9078d3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftrait_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftrait_bounds.rs?ref=dd1ff405e3a059836ffceee8490a630c4b9078d3", "patch": "@@ -8,7 +8,8 @@ use rustc_data_structures::unhash::UnhashMap;\n use rustc_errors::Applicability;\n use rustc_hir::def::Res;\n use rustc_hir::{\n-    GenericBound, Generics, Item, ItemKind, Node, Path, PathSegment, QPath, TraitItem, Ty, TyKind, WherePredicate,\n+    GenericBound, Generics, Item, ItemKind, Node, Path, PathSegment, PredicateOrigin, QPath, TraitItem, Ty, TyKind,\n+    WherePredicate,\n };\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n@@ -95,6 +96,7 @@ impl<'tcx> LateLintPass<'tcx> for TraitBounds {\n         for predicate in item.generics.predicates {\n             if_chain! {\n                 if let WherePredicate::BoundPredicate(ref bound_predicate) = predicate;\n+                if bound_predicate.origin != PredicateOrigin::ImplTrait;\n                 if !bound_predicate.span.from_expansion();\n                 if let TyKind::Path(QPath::Resolved(_, Path { segments, .. })) = bound_predicate.bounded_ty.kind;\n                 if let Some(PathSegment {\n@@ -168,6 +170,7 @@ impl TraitBounds {\n         for bound in gen.predicates {\n             if_chain! {\n                 if let WherePredicate::BoundPredicate(ref p) = bound;\n+                if p.origin != PredicateOrigin::ImplTrait;\n                 if p.bounds.len() as u64 <= self.max_trait_bounds;\n                 if !p.span.from_expansion();\n                 if let Some(ref v) = map.insert(\n@@ -223,6 +226,7 @@ fn check_trait_bound_duplication(cx: &LateContext<'_>, gen: &'_ Generics<'_>) {\n     for predicate in gen.predicates {\n         if_chain! {\n             if let WherePredicate::BoundPredicate(ref bound_predicate) = predicate;\n+            if bound_predicate.origin != PredicateOrigin::ImplTrait;\n             if !bound_predicate.span.from_expansion();\n             if let TyKind::Path(QPath::Resolved(_, Path { segments, .. })) = bound_predicate.bounded_ty.kind;\n             if let Some(segment) = segments.first();"}]}