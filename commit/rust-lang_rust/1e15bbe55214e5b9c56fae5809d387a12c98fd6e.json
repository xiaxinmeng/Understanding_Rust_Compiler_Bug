{"sha": "1e15bbe55214e5b9c56fae5809d387a12c98fd6e", "node_id": "C_kwDOAAsO6NoAKDFlMTViYmU1NTIxNGU1YjljNTZmYWU1ODA5ZDM4N2ExMmM5OGZkNmU", "commit": {"author": {"name": "Samuel Moelius", "email": "sam.moelius@trailofbits.com", "date": "2021-09-26T20:50:26Z"}, "committer": {"name": "Samuel Moelius", "email": "sam.moelius@trailofbits.com", "date": "2021-09-26T21:50:50Z"}, "message": "Pass real crate-level attributes to `pre_expansion_lint`", "tree": {"sha": "8d43833747d8d1a32f03feb97ac0a3b4eb69eade", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d43833747d8d1a32f03feb97ac0a3b4eb69eade"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e15bbe55214e5b9c56fae5809d387a12c98fd6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e15bbe55214e5b9c56fae5809d387a12c98fd6e", "html_url": "https://github.com/rust-lang/rust/commit/1e15bbe55214e5b9c56fae5809d387a12c98fd6e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e15bbe55214e5b9c56fae5809d387a12c98fd6e/comments", "author": {"login": "smoelius", "id": 35515885, "node_id": "MDQ6VXNlcjM1NTE1ODg1", "avatar_url": "https://avatars.githubusercontent.com/u/35515885?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smoelius", "html_url": "https://github.com/smoelius", "followers_url": "https://api.github.com/users/smoelius/followers", "following_url": "https://api.github.com/users/smoelius/following{/other_user}", "gists_url": "https://api.github.com/users/smoelius/gists{/gist_id}", "starred_url": "https://api.github.com/users/smoelius/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smoelius/subscriptions", "organizations_url": "https://api.github.com/users/smoelius/orgs", "repos_url": "https://api.github.com/users/smoelius/repos", "events_url": "https://api.github.com/users/smoelius/events{/privacy}", "received_events_url": "https://api.github.com/users/smoelius/received_events", "type": "User", "site_admin": false}, "committer": {"login": "smoelius", "id": 35515885, "node_id": "MDQ6VXNlcjM1NTE1ODg1", "avatar_url": "https://avatars.githubusercontent.com/u/35515885?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smoelius", "html_url": "https://github.com/smoelius", "followers_url": "https://api.github.com/users/smoelius/followers", "following_url": "https://api.github.com/users/smoelius/following{/other_user}", "gists_url": "https://api.github.com/users/smoelius/gists{/gist_id}", "starred_url": "https://api.github.com/users/smoelius/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smoelius/subscriptions", "organizations_url": "https://api.github.com/users/smoelius/orgs", "repos_url": "https://api.github.com/users/smoelius/repos", "events_url": "https://api.github.com/users/smoelius/events{/privacy}", "received_events_url": "https://api.github.com/users/smoelius/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "551220c48dccc839a00b490835b3962b1a838c82", "url": "https://api.github.com/repos/rust-lang/rust/commits/551220c48dccc839a00b490835b3962b1a838c82", "html_url": "https://github.com/rust-lang/rust/commit/551220c48dccc839a00b490835b3962b1a838c82"}], "stats": {"total": 35, "additions": 29, "deletions": 6}, "files": [{"sha": "2b84ee395e9d03f34885768c0b4b3faf13595499", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1e15bbe55214e5b9c56fae5809d387a12c98fd6e/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e15bbe55214e5b9c56fae5809d387a12c98fd6e/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=1e15bbe55214e5b9c56fae5809d387a12c98fd6e", "patch": "@@ -240,13 +240,15 @@ fn pre_expansion_lint(\n     sess: &Session,\n     lint_store: &LintStore,\n     krate: &ast::Crate,\n+    crate_attrs: &[ast::Attribute],\n     crate_name: &str,\n ) {\n     sess.prof.generic_activity_with_arg(\"pre_AST_expansion_lint_checks\", crate_name).run(|| {\n         rustc_lint::check_ast_crate(\n             sess,\n             lint_store,\n             &krate,\n+            crate_attrs,\n             true,\n             None,\n             rustc_lint::BuiltinCombinedPreExpansionLintPass::new(),\n@@ -266,7 +268,7 @@ pub fn configure_and_expand(\n     resolver: &mut Resolver<'_>,\n ) -> Result<ast::Crate> {\n     tracing::trace!(\"configure_and_expand\");\n-    pre_expansion_lint(sess, lint_store, &krate, crate_name);\n+    pre_expansion_lint(sess, lint_store, &krate, &krate.attrs, crate_name);\n     rustc_builtin_macros::register_builtin_macros(resolver);\n \n     krate = sess.time(\"crate_injection\", || {\n@@ -323,9 +325,10 @@ pub fn configure_and_expand(\n             ..rustc_expand::expand::ExpansionConfig::default(crate_name.to_string())\n         };\n \n+        let crate_attrs = krate.attrs.clone();\n         let extern_mod_loaded = |ident: Ident, attrs, items, span| {\n             let krate = ast::Crate { attrs, items, span };\n-            pre_expansion_lint(sess, lint_store, &krate, &ident.name.as_str());\n+            pre_expansion_lint(sess, lint_store, &krate, &crate_attrs, &ident.name.as_str());\n             (krate.attrs, krate.items)\n         };\n         let mut ecx = ExtCtxt::new(&sess, cfg, resolver, Some(&extern_mod_loaded));\n@@ -469,6 +472,7 @@ pub fn lower_to_hir<'res, 'tcx>(\n             sess,\n             lint_store,\n             &krate,\n+            &krate.attrs,\n             false,\n             Some(std::mem::take(resolver.lint_buffer())),\n             rustc_lint::BuiltinCombinedEarlyLintPass::new(),"}, {"sha": "8cbd2ddcbfdf733028ac1f350df837d2471eadb1", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1e15bbe55214e5b9c56fae5809d387a12c98fd6e/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e15bbe55214e5b9c56fae5809d387a12c98fd6e/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=1e15bbe55214e5b9c56fae5809d387a12c98fd6e", "patch": "@@ -805,14 +805,15 @@ impl<'a> EarlyContext<'a> {\n         sess: &'a Session,\n         lint_store: &'a LintStore,\n         krate: &'a ast::Crate,\n+        crate_attrs: &'a [ast::Attribute],\n         buffered: LintBuffer,\n         warn_about_weird_lints: bool,\n     ) -> EarlyContext<'a> {\n         EarlyContext {\n             sess,\n             krate,\n             lint_store,\n-            builder: LintLevelsBuilder::new(sess, warn_about_weird_lints, lint_store, &krate.attrs),\n+            builder: LintLevelsBuilder::new(sess, warn_about_weird_lints, lint_store, crate_attrs),\n             buffered,\n         }\n     }"}, {"sha": "0bba66d383869469c4728ad299a40ea6342a7d26", "filename": "compiler/rustc_lint/src/early.rs", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1e15bbe55214e5b9c56fae5809d387a12c98fd6e/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e15bbe55214e5b9c56fae5809d387a12c98fd6e/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fearly.rs?ref=1e15bbe55214e5b9c56fae5809d387a12c98fd6e", "patch": "@@ -329,12 +329,20 @@ fn early_lint_crate<T: EarlyLintPass>(\n     sess: &Session,\n     lint_store: &LintStore,\n     krate: &ast::Crate,\n+    crate_attrs: &[ast::Attribute],\n     pass: T,\n     buffered: LintBuffer,\n     warn_about_weird_lints: bool,\n ) -> LintBuffer {\n     let mut cx = EarlyContextAndPass {\n-        context: EarlyContext::new(sess, lint_store, krate, buffered, warn_about_weird_lints),\n+        context: EarlyContext::new(\n+            sess,\n+            lint_store,\n+            krate,\n+            crate_attrs,\n+            buffered,\n+            warn_about_weird_lints,\n+        ),\n         pass,\n     };\n \n@@ -355,6 +363,7 @@ pub fn check_ast_crate<T: EarlyLintPass>(\n     sess: &Session,\n     lint_store: &LintStore,\n     krate: &ast::Crate,\n+    crate_attrs: &[ast::Attribute],\n     pre_expansion: bool,\n     lint_buffer: Option<LintBuffer>,\n     builtin_lints: T,\n@@ -365,14 +374,22 @@ pub fn check_ast_crate<T: EarlyLintPass>(\n     let mut buffered = lint_buffer.unwrap_or_default();\n \n     if !sess.opts.debugging_opts.no_interleave_lints {\n-        buffered =\n-            early_lint_crate(sess, lint_store, krate, builtin_lints, buffered, pre_expansion);\n+        buffered = early_lint_crate(\n+            sess,\n+            lint_store,\n+            krate,\n+            crate_attrs,\n+            builtin_lints,\n+            buffered,\n+            pre_expansion,\n+        );\n \n         if !passes.is_empty() {\n             buffered = early_lint_crate(\n                 sess,\n                 lint_store,\n                 krate,\n+                crate_attrs,\n                 EarlyLintPassObjects { lints: &mut passes[..] },\n                 buffered,\n                 false,\n@@ -386,6 +403,7 @@ pub fn check_ast_crate<T: EarlyLintPass>(\n                         sess,\n                         lint_store,\n                         krate,\n+                        crate_attrs,\n                         EarlyLintPassObjects { lints: slice::from_mut(pass) },\n                         buffered,\n                         pre_expansion && i == 0,"}]}