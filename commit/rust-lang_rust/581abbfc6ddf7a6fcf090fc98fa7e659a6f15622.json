{"sha": "581abbfc6ddf7a6fcf090fc98fa7e659a6f15622", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4MWFiYmZjNmRkZjdhNmZjZjA5MGZjOThmYTdlNjU5YTZmMTU2MjI=", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-08-04T18:09:02Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-08-31T01:17:45Z"}, "message": "Move some methods to block module", "tree": {"sha": "818b5ec2445f52ba83f2c14cf25f2ce9fd4a5fdf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/818b5ec2445f52ba83f2c14cf25f2ce9fd4a5fdf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/581abbfc6ddf7a6fcf090fc98fa7e659a6f15622", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/581abbfc6ddf7a6fcf090fc98fa7e659a6f15622", "html_url": "https://github.com/rust-lang/rust/commit/581abbfc6ddf7a6fcf090fc98fa7e659a6f15622", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/581abbfc6ddf7a6fcf090fc98fa7e659a6f15622/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "89d2600d01dec0fa73e11edc9c5bb435e4ec1285", "url": "https://api.github.com/repos/rust-lang/rust/commits/89d2600d01dec0fa73e11edc9c5bb435e4ec1285", "html_url": "https://github.com/rust-lang/rust/commit/89d2600d01dec0fa73e11edc9c5bb435e4ec1285"}], "stats": {"total": 206, "additions": 111, "deletions": 95}, "files": [{"sha": "223825ad896d4e87307b1bd476e25e616daf6bd6", "filename": "compiler/rustc_ast_lowering/src/block.rs", "status": "added", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/581abbfc6ddf7a6fcf090fc98fa7e659a6f15622/compiler%2Frustc_ast_lowering%2Fsrc%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/581abbfc6ddf7a6fcf090fc98fa7e659a6f15622/compiler%2Frustc_ast_lowering%2Fsrc%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fblock.rs?ref=581abbfc6ddf7a6fcf090fc98fa7e659a6f15622", "patch": "@@ -0,0 +1,109 @@\n+use crate::{ImplTraitContext, ImplTraitPosition, LoweringContext};\n+use rustc_ast::{Block, BlockCheckMode, Local, Stmt, StmtKind};\n+use rustc_hir as hir;\n+\n+use smallvec::{smallvec, SmallVec};\n+\n+impl<'a, 'hir> LoweringContext<'a, 'hir> {\n+    pub(super) fn lower_block(\n+        &mut self,\n+        b: &Block,\n+        targeted_by_break: bool,\n+    ) -> &'hir hir::Block<'hir> {\n+        self.arena.alloc(self.lower_block_noalloc(b, targeted_by_break))\n+    }\n+\n+    pub(super) fn lower_block_noalloc(\n+        &mut self,\n+        b: &Block,\n+        targeted_by_break: bool,\n+    ) -> hir::Block<'hir> {\n+        let (stmts, expr) = match &*b.stmts {\n+            [stmts @ .., Stmt { kind: StmtKind::Expr(e), .. }] => (stmts, Some(&*e)),\n+            stmts => (stmts, None),\n+        };\n+        let stmts = self.arena.alloc_from_iter(stmts.iter().flat_map(|stmt| self.lower_stmt(stmt)));\n+        let expr = expr.map(|e| self.lower_expr(e));\n+        let rules = self.lower_block_check_mode(&b.rules);\n+        let hir_id = self.lower_node_id(b.id);\n+\n+        hir::Block { hir_id, stmts, expr, rules, span: self.lower_span(b.span), targeted_by_break }\n+    }\n+\n+    fn lower_stmt(&mut self, s: &Stmt) -> SmallVec<[hir::Stmt<'hir>; 1]> {\n+        let (hir_id, kind) = match s.kind {\n+            StmtKind::Local(ref l) => {\n+                let l = self.lower_local(l);\n+                let hir_id = self.lower_node_id(s.id);\n+                self.alias_attrs(hir_id, l.hir_id);\n+                return smallvec![hir::Stmt {\n+                    hir_id,\n+                    kind: hir::StmtKind::Local(self.arena.alloc(l)),\n+                    span: self.lower_span(s.span),\n+                }];\n+            }\n+            StmtKind::Item(ref it) => {\n+                // Can only use the ID once.\n+                let mut id = Some(s.id);\n+                return self\n+                    .lower_item_id(it)\n+                    .into_iter()\n+                    .map(|item_id| {\n+                        let hir_id = id\n+                            .take()\n+                            .map(|id| self.lower_node_id(id))\n+                            .unwrap_or_else(|| self.next_id());\n+\n+                        hir::Stmt {\n+                            hir_id,\n+                            kind: hir::StmtKind::Item(item_id),\n+                            span: self.lower_span(s.span),\n+                        }\n+                    })\n+                    .collect();\n+            }\n+            StmtKind::Expr(ref e) => {\n+                let e = self.lower_expr(e);\n+                let hir_id = self.lower_node_id(s.id);\n+                self.alias_attrs(hir_id, e.hir_id);\n+                (hir_id, hir::StmtKind::Expr(e))\n+            }\n+            StmtKind::Semi(ref e) => {\n+                let e = self.lower_expr(e);\n+                let hir_id = self.lower_node_id(s.id);\n+                self.alias_attrs(hir_id, e.hir_id);\n+                (hir_id, hir::StmtKind::Semi(e))\n+            }\n+            StmtKind::Empty => return smallvec![],\n+            StmtKind::MacCall(..) => panic!(\"shouldn't exist here\"),\n+        };\n+        smallvec![hir::Stmt { hir_id, kind, span: self.lower_span(s.span) }]\n+    }\n+\n+    fn lower_local(&mut self, l: &Local) -> hir::Local<'hir> {\n+        let ty = l\n+            .ty\n+            .as_ref()\n+            .map(|t| self.lower_ty(t, ImplTraitContext::Disallowed(ImplTraitPosition::Binding)));\n+        let init = l.kind.init().map(|init| self.lower_expr(init));\n+        let hir_id = self.lower_node_id(l.id);\n+        self.lower_attrs(hir_id, &l.attrs);\n+        hir::Local {\n+            hir_id,\n+            ty,\n+            pat: self.lower_pat(&l.pat),\n+            init,\n+            span: self.lower_span(l.span),\n+            source: hir::LocalSource::Normal,\n+        }\n+    }\n+\n+    fn lower_block_check_mode(&mut self, b: &BlockCheckMode) -> hir::BlockCheckMode {\n+        match *b {\n+            BlockCheckMode::Default => hir::BlockCheckMode::DefaultBlock,\n+            BlockCheckMode::Unsafe(u) => {\n+                hir::BlockCheckMode::UnsafeBlock(self.lower_unsafe_source(u))\n+            }\n+        }\n+    }\n+}"}, {"sha": "dce67bfb5d574fe4504c39b39470912e9f5d2fc7", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 2, "deletions": 95, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/581abbfc6ddf7a6fcf090fc98fa7e659a6f15622/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/581abbfc6ddf7a6fcf090fc98fa7e659a6f15622/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=581abbfc6ddf7a6fcf090fc98fa7e659a6f15622", "patch": "@@ -64,7 +64,7 @@ use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n use rustc_target::spec::abi::Abi;\n \n-use smallvec::{smallvec, SmallVec};\n+use smallvec::SmallVec;\n use std::collections::BTreeMap;\n use std::mem;\n use tracing::{debug, trace};\n@@ -77,6 +77,7 @@ macro_rules! arena_vec {\n }\n \n mod asm;\n+mod block;\n mod expr;\n mod item;\n mod pat;\n@@ -1793,24 +1794,6 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         )\n     }\n \n-    fn lower_local(&mut self, l: &Local) -> hir::Local<'hir> {\n-        let ty = l\n-            .ty\n-            .as_ref()\n-            .map(|t| self.lower_ty(t, ImplTraitContext::Disallowed(ImplTraitPosition::Binding)));\n-        let init = l.kind.init().map(|init| self.lower_expr(init));\n-        let hir_id = self.lower_node_id(l.id);\n-        self.lower_attrs(hir_id, &l.attrs);\n-        hir::Local {\n-            hir_id,\n-            ty,\n-            pat: self.lower_pat(&l.pat),\n-            init,\n-            span: self.lower_span(l.span),\n-            source: hir::LocalSource::Normal,\n-        }\n-    }\n-\n     fn lower_fn_params_to_names(&mut self, decl: &FnDecl) -> &'hir [Ident] {\n         // Skip the `...` (`CVarArgs`) trailing arguments from the AST,\n         // as they are not explicit in HIR/Ty function signatures.\n@@ -2396,23 +2379,6 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         bounds.iter().map(move |bound| self.lower_param_bound(bound, itctx.reborrow()))\n     }\n \n-    fn lower_block(&mut self, b: &Block, targeted_by_break: bool) -> &'hir hir::Block<'hir> {\n-        self.arena.alloc(self.lower_block_noalloc(b, targeted_by_break))\n-    }\n-\n-    fn lower_block_noalloc(&mut self, b: &Block, targeted_by_break: bool) -> hir::Block<'hir> {\n-        let (stmts, expr) = match &*b.stmts {\n-            [stmts @ .., Stmt { kind: StmtKind::Expr(e), .. }] => (stmts, Some(&*e)),\n-            stmts => (stmts, None),\n-        };\n-        let stmts = self.arena.alloc_from_iter(stmts.iter().flat_map(|stmt| self.lower_stmt(stmt)));\n-        let expr = expr.map(|e| self.lower_expr(e));\n-        let rules = self.lower_block_check_mode(&b.rules);\n-        let hir_id = self.lower_node_id(b.id);\n-\n-        hir::Block { hir_id, stmts, expr, rules, span: self.lower_span(b.span), targeted_by_break }\n-    }\n-\n     /// Lowers a block directly to an expression, presuming that it\n     /// has no attributes and is not targeted by a `break`.\n     fn lower_block_expr(&mut self, b: &Block) -> hir::Expr<'hir> {\n@@ -2427,65 +2393,6 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         })\n     }\n \n-    fn lower_stmt(&mut self, s: &Stmt) -> SmallVec<[hir::Stmt<'hir>; 1]> {\n-        let (hir_id, kind) = match s.kind {\n-            StmtKind::Local(ref l) => {\n-                let l = self.lower_local(l);\n-                let hir_id = self.lower_node_id(s.id);\n-                self.alias_attrs(hir_id, l.hir_id);\n-                return smallvec![hir::Stmt {\n-                    hir_id,\n-                    kind: hir::StmtKind::Local(self.arena.alloc(l)),\n-                    span: self.lower_span(s.span),\n-                }];\n-            }\n-            StmtKind::Item(ref it) => {\n-                // Can only use the ID once.\n-                let mut id = Some(s.id);\n-                return self\n-                    .lower_item_id(it)\n-                    .into_iter()\n-                    .map(|item_id| {\n-                        let hir_id = id\n-                            .take()\n-                            .map(|id| self.lower_node_id(id))\n-                            .unwrap_or_else(|| self.next_id());\n-\n-                        hir::Stmt {\n-                            hir_id,\n-                            kind: hir::StmtKind::Item(item_id),\n-                            span: self.lower_span(s.span),\n-                        }\n-                    })\n-                    .collect();\n-            }\n-            StmtKind::Expr(ref e) => {\n-                let e = self.lower_expr(e);\n-                let hir_id = self.lower_node_id(s.id);\n-                self.alias_attrs(hir_id, e.hir_id);\n-                (hir_id, hir::StmtKind::Expr(e))\n-            }\n-            StmtKind::Semi(ref e) => {\n-                let e = self.lower_expr(e);\n-                let hir_id = self.lower_node_id(s.id);\n-                self.alias_attrs(hir_id, e.hir_id);\n-                (hir_id, hir::StmtKind::Semi(e))\n-            }\n-            StmtKind::Empty => return smallvec![],\n-            StmtKind::MacCall(..) => panic!(\"shouldn't exist here\"),\n-        };\n-        smallvec![hir::Stmt { hir_id, kind, span: self.lower_span(s.span) }]\n-    }\n-\n-    fn lower_block_check_mode(&mut self, b: &BlockCheckMode) -> hir::BlockCheckMode {\n-        match *b {\n-            BlockCheckMode::Default => hir::BlockCheckMode::DefaultBlock,\n-            BlockCheckMode::Unsafe(u) => {\n-                hir::BlockCheckMode::UnsafeBlock(self.lower_unsafe_source(u))\n-            }\n-        }\n-    }\n-\n     fn lower_unsafe_source(&mut self, u: UnsafeSource) -> hir::UnsafeSource {\n         match u {\n             CompilerGenerated => hir::UnsafeSource::CompilerGenerated,"}]}