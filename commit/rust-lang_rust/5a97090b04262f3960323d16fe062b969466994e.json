{"sha": "5a97090b04262f3960323d16fe062b969466994e", "node_id": "C_kwDOAAsO6NoAKDVhOTcwOTBiMDQyNjJmMzk2MDMyM2QxNmZlMDYyYjk2OTQ2Njk5NGU", "commit": {"author": {"name": "DrMeepster", "email": "19316085+DrMeepster@users.noreply.github.com", "date": "2021-05-09T05:04:38Z"}, "committer": {"name": "DrMeepster", "email": "19316085+DrMeepster@users.noreply.github.com", "date": "2021-11-03T05:47:26Z"}, "message": "more efficent File::read_buf impl for windows and unix", "tree": {"sha": "b49ce4763f57296aeea758ea09b72d0e9ca98d01", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b49ce4763f57296aeea758ea09b72d0e9ca98d01"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a97090b04262f3960323d16fe062b969466994e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a97090b04262f3960323d16fe062b969466994e", "html_url": "https://github.com/rust-lang/rust/commit/5a97090b04262f3960323d16fe062b969466994e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a97090b04262f3960323d16fe062b969466994e/comments", "author": {"login": "DrMeepster", "id": 19316085, "node_id": "MDQ6VXNlcjE5MzE2MDg1", "avatar_url": "https://avatars.githubusercontent.com/u/19316085?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DrMeepster", "html_url": "https://github.com/DrMeepster", "followers_url": "https://api.github.com/users/DrMeepster/followers", "following_url": "https://api.github.com/users/DrMeepster/following{/other_user}", "gists_url": "https://api.github.com/users/DrMeepster/gists{/gist_id}", "starred_url": "https://api.github.com/users/DrMeepster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DrMeepster/subscriptions", "organizations_url": "https://api.github.com/users/DrMeepster/orgs", "repos_url": "https://api.github.com/users/DrMeepster/repos", "events_url": "https://api.github.com/users/DrMeepster/events{/privacy}", "received_events_url": "https://api.github.com/users/DrMeepster/received_events", "type": "User", "site_admin": false}, "committer": {"login": "DrMeepster", "id": 19316085, "node_id": "MDQ6VXNlcjE5MzE2MDg1", "avatar_url": "https://avatars.githubusercontent.com/u/19316085?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DrMeepster", "html_url": "https://github.com/DrMeepster", "followers_url": "https://api.github.com/users/DrMeepster/followers", "following_url": "https://api.github.com/users/DrMeepster/following{/other_user}", "gists_url": "https://api.github.com/users/DrMeepster/gists{/gist_id}", "starred_url": "https://api.github.com/users/DrMeepster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DrMeepster/subscriptions", "organizations_url": "https://api.github.com/users/DrMeepster/orgs", "repos_url": "https://api.github.com/users/DrMeepster/repos", "events_url": "https://api.github.com/users/DrMeepster/events{/privacy}", "received_events_url": "https://api.github.com/users/DrMeepster/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "146b396f21fe1723d0b36550790db33831580e26", "url": "https://api.github.com/repos/rust-lang/rust/commits/146b396f21fe1723d0b36550790db33831580e26", "html_url": "https://github.com/rust-lang/rust/commit/146b396f21fe1723d0b36550790db33831580e26"}], "stats": {"total": 105, "additions": 93, "deletions": 12}, "files": [{"sha": "55c22092c453b8db97d3eb8e61ff65fdf4aec6bc", "filename": "library/std/src/fs.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5a97090b04262f3960323d16fe062b969466994e/library%2Fstd%2Fsrc%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a97090b04262f3960323d16fe062b969466994e/library%2Fstd%2Fsrc%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ffs.rs?ref=5a97090b04262f3960323d16fe062b969466994e", "patch": "@@ -13,7 +13,7 @@ mod tests;\n \n use crate::ffi::OsString;\n use crate::fmt;\n-use crate::io::{self, IoSlice, IoSliceMut, Read, Seek, SeekFrom, Write};\n+use crate::io::{self, IoSlice, IoSliceMut, Read, ReadBuf, Seek, SeekFrom, Write};\n use crate::path::{Path, PathBuf};\n use crate::sys::fs as fs_imp;\n use crate::sys_common::{AsInner, AsInnerMut, FromInner, IntoInner};\n@@ -624,6 +624,10 @@ impl Read for File {\n         self.inner.read_vectored(bufs)\n     }\n \n+    fn read_buf(&mut self, buf: &mut ReadBuf<'_>) -> io::Result<()> {\n+        self.inner.read_buf(buf)\n+    }\n+\n     #[inline]\n     fn is_read_vectored(&self) -> bool {\n         self.inner.is_read_vectored()"}, {"sha": "5a1e03c7f5a891a106311901359fc33cdcc979b3", "filename": "library/std/src/io/mod.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5a97090b04262f3960323d16fe062b969466994e/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a97090b04262f3960323d16fe062b969466994e/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fmod.rs?ref=5a97090b04262f3960323d16fe062b969466994e", "patch": "@@ -448,6 +448,15 @@ pub(crate) fn default_read_exact<R: Read + ?Sized>(this: &mut R, mut buf: &mut [\n     }\n }\n \n+pub(crate) fn default_read_buf<F>(read: F, buf: &mut ReadBuf<'_>) -> Result<()>\n+where\n+    F: FnOnce(&mut [u8]) -> Result<usize>,\n+{\n+    let n = read(buf.initialize_unfilled())?;\n+    buf.add_filled(n);\n+    Ok(())\n+}\n+\n /// The `Read` trait allows for reading bytes from a source.\n ///\n /// Implementors of the `Read` trait are called 'readers'.\n@@ -787,9 +796,7 @@ pub trait Read {\n     /// The default implementation delegates to `read`.\n     #[unstable(feature = \"read_buf\", issue = \"78485\")]\n     fn read_buf(&mut self, buf: &mut ReadBuf<'_>) -> Result<()> {\n-        let n = self.read(buf.initialize_unfilled())?;\n-        buf.add_filled(n);\n-        Ok(())\n+        default_read_buf(|b| self.read(b), buf)\n     }\n \n     /// Read the exact number of bytes required to fill `buf`."}, {"sha": "1179a49c22fd0d7ee4daee867da6d1e151487db9", "filename": "library/std/src/sys/hermit/fd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a97090b04262f3960323d16fe062b969466994e/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a97090b04262f3960323d16fe062b969466994e/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Ffd.rs?ref=5a97090b04262f3960323d16fe062b969466994e", "patch": "@@ -1,6 +1,6 @@\n #![unstable(reason = \"not public\", issue = \"none\", feature = \"fd\")]\n \n-use crate::io::{self, Read};\n+use crate::io::{self, Read, ReadBuf};\n use crate::mem;\n use crate::sys::cvt;\n use crate::sys::hermit::abi;"}, {"sha": "974c44eb8dd5eda540d3eca293b17d4f2142f0a9", "filename": "library/std/src/sys/hermit/fs.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5a97090b04262f3960323d16fe062b969466994e/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a97090b04262f3960323d16fe062b969466994e/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Ffs.rs?ref=5a97090b04262f3960323d16fe062b969466994e", "patch": "@@ -2,7 +2,7 @@ use crate::ffi::{CStr, CString, OsString};\n use crate::fmt;\n use crate::hash::{Hash, Hasher};\n use crate::io::{self, Error, ErrorKind};\n-use crate::io::{IoSlice, IoSliceMut, SeekFrom};\n+use crate::io::{IoSlice, IoSliceMut, ReadBuf, SeekFrom};\n use crate::os::unix::ffi::OsStrExt;\n use crate::path::{Path, PathBuf};\n use crate::sys::cvt;\n@@ -312,6 +312,10 @@ impl File {\n         false\n     }\n \n+    pub fn read_buf(&self, buf: &mut ReadBuf<'_>) -> io::Result<()> {\n+        crate::io::default_read_buf(|buf| self.read(buf), buf)\n+    }\n+\n     pub fn write(&self, buf: &[u8]) -> io::Result<usize> {\n         self.0.write(buf)\n     }"}, {"sha": "93cdf89e1db30a657703a4b8aa9652599bcec3ce", "filename": "library/std/src/sys/unix/fd.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5a97090b04262f3960323d16fe062b969466994e/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a97090b04262f3960323d16fe062b969466994e/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffd.rs?ref=5a97090b04262f3960323d16fe062b969466994e", "patch": "@@ -4,7 +4,7 @@\n mod tests;\n \n use crate::cmp;\n-use crate::io::{self, IoSlice, IoSliceMut, Read};\n+use crate::io::{self, IoSlice, IoSliceMut, Read, ReadBuf};\n use crate::os::unix::io::{AsFd, AsRawFd, BorrowedFd, FromRawFd, IntoRawFd, OwnedFd, RawFd};\n use crate::sys::cvt;\n use crate::sys_common::{AsInner, FromInner, IntoInner};\n@@ -127,6 +127,23 @@ impl FileDesc {\n         }\n     }\n \n+    pub fn read_buf(&self, buf: &mut ReadBuf<'_>) -> io::Result<()> {\n+        let ret = cvt(unsafe {\n+            libc::read(\n+                self.as_raw_fd(),\n+                buf.unfilled_mut().as_mut_ptr() as *mut c_void,\n+                cmp::min(buf.remaining(), READ_LIMIT),\n+            )\n+        })?;\n+\n+        // Safety: `ret` bytes were written to the initialized portion of the buffer\n+        unsafe {\n+            buf.assume_init(ret as usize);\n+        }\n+        buf.add_filled(ret as usize);\n+        Ok(())\n+    }\n+\n     pub fn write(&self, buf: &[u8]) -> io::Result<usize> {\n         let ret = cvt(unsafe {\n             libc::write("}, {"sha": "45eac987aa4cc9b9412c3e8c34c69f995aa37bb4", "filename": "library/std/src/sys/unix/fs.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5a97090b04262f3960323d16fe062b969466994e/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a97090b04262f3960323d16fe062b969466994e/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs?ref=5a97090b04262f3960323d16fe062b969466994e", "patch": "@@ -2,7 +2,7 @@ use crate::os::unix::prelude::*;\n \n use crate::ffi::{CStr, CString, OsStr, OsString};\n use crate::fmt;\n-use crate::io::{self, Error, IoSlice, IoSliceMut, SeekFrom};\n+use crate::io::{self, Error, IoSlice, IoSliceMut, ReadBuf, SeekFrom};\n use crate::mem;\n use crate::os::unix::io::{AsFd, AsRawFd, BorrowedFd, FromRawFd, IntoRawFd};\n use crate::path::{Path, PathBuf};\n@@ -864,6 +864,10 @@ impl File {\n         self.0.read_at(buf, offset)\n     }\n \n+    pub fn read_buf(&self, buf: &mut ReadBuf<'_>) -> io::Result<()> {\n+        self.0.read_buf(buf)\n+    }\n+\n     pub fn write(&self, buf: &[u8]) -> io::Result<usize> {\n         self.0.write(buf)\n     }"}, {"sha": "cee7295a43a0a5e86c11920ee1d9d074bec0de6b", "filename": "library/std/src/sys/unsupported/fs.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5a97090b04262f3960323d16fe062b969466994e/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a97090b04262f3960323d16fe062b969466994e/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Ffs.rs?ref=5a97090b04262f3960323d16fe062b969466994e", "patch": "@@ -1,7 +1,7 @@\n use crate::ffi::OsString;\n use crate::fmt;\n use crate::hash::{Hash, Hasher};\n-use crate::io::{self, IoSlice, IoSliceMut, SeekFrom};\n+use crate::io::{self, IoSlice, IoSliceMut, ReadBuf, SeekFrom};\n use crate::path::{Path, PathBuf};\n use crate::sys::time::SystemTime;\n use crate::sys::unsupported;\n@@ -206,6 +206,10 @@ impl File {\n         self.0\n     }\n \n+    pub fn read_buf(&self, buf: &mut ReadBuf<'_>) -> io::Result<()> {\n+        self.0\n+    }\n+\n     pub fn write(&self, _buf: &[u8]) -> io::Result<usize> {\n         self.0\n     }"}, {"sha": "1a3da3746ac61fcc53cc34b6d8fbf48ff1acabdb", "filename": "library/std/src/sys/wasi/fs.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5a97090b04262f3960323d16fe062b969466994e/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a97090b04262f3960323d16fe062b969466994e/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ffs.rs?ref=5a97090b04262f3960323d16fe062b969466994e", "patch": "@@ -3,7 +3,7 @@\n use super::fd::WasiFd;\n use crate::ffi::{CStr, CString, OsStr, OsString};\n use crate::fmt;\n-use crate::io::{self, IoSlice, IoSliceMut, SeekFrom};\n+use crate::io::{self, IoSlice, IoSliceMut, ReadBuf, SeekFrom};\n use crate::iter;\n use crate::mem::{self, ManuallyDrop};\n use crate::os::raw::c_int;\n@@ -411,6 +411,10 @@ impl File {\n         true\n     }\n \n+    pub fn read_buf(&self, buf: &mut ReadBuf<'_>) -> io::Result<()> {\n+        crate::io::default_read_buf(|buf| self.read(buf), buf)\n+    }\n+\n     pub fn write(&self, buf: &[u8]) -> io::Result<usize> {\n         self.write_vectored(&[IoSlice::new(buf)])\n     }"}, {"sha": "b258fc0478bdca9b62aec8bf6031287c03f8acbc", "filename": "library/std/src/sys/windows/fs.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5a97090b04262f3960323d16fe062b969466994e/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a97090b04262f3960323d16fe062b969466994e/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs?ref=5a97090b04262f3960323d16fe062b969466994e", "patch": "@@ -2,7 +2,7 @@ use crate::os::windows::prelude::*;\n \n use crate::ffi::OsString;\n use crate::fmt;\n-use crate::io::{self, Error, IoSlice, IoSliceMut, SeekFrom};\n+use crate::io::{self, Error, IoSlice, IoSliceMut, ReadBuf, SeekFrom};\n use crate::mem;\n use crate::os::windows::io::{AsHandle, BorrowedHandle};\n use crate::path::{Path, PathBuf};\n@@ -420,6 +420,10 @@ impl File {\n         self.handle.read_at(buf, offset)\n     }\n \n+    pub fn read_buf(&self, buf: &mut ReadBuf<'_>) -> io::Result<()> {\n+        self.handle.read_buf(buf)\n+    }\n+\n     pub fn write(&self, buf: &[u8]) -> io::Result<usize> {\n         self.handle.write(buf)\n     }"}, {"sha": "c3a3482f91051bd4b97ffee6139a98ac0e59bc69", "filename": "library/std/src/sys/windows/handle.rs", "status": "modified", "additions": 34, "deletions": 1, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/5a97090b04262f3960323d16fe062b969466994e/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fhandle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a97090b04262f3960323d16fe062b969466994e/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fhandle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fhandle.rs?ref=5a97090b04262f3960323d16fe062b969466994e", "patch": "@@ -1,7 +1,7 @@\n #![unstable(issue = \"none\", feature = \"windows_handle\")]\n \n use crate::cmp;\n-use crate::io::{self, ErrorKind, IoSlice, IoSliceMut, Read};\n+use crate::io::{self, ErrorKind, IoSlice, IoSliceMut, Read, ReadBuf};\n use crate::mem;\n use crate::os::windows::io::{\n     AsHandle, AsRawHandle, BorrowedHandle, FromRawHandle, IntoRawHandle, OwnedHandle, RawHandle,\n@@ -130,6 +130,39 @@ impl Handle {\n         }\n     }\n \n+    pub fn read_buf(&self, buf: &mut ReadBuf<'_>) -> io::Result<()> {\n+        let mut read = 0;\n+        let len = cmp::min(buf.remaining(), <c::DWORD>::MAX as usize) as c::DWORD;\n+        let res = cvt(unsafe {\n+            c::ReadFile(\n+                self.as_raw_handle(),\n+                buf.unfilled_mut().as_mut_ptr() as c::LPVOID,\n+                len,\n+                &mut read,\n+                ptr::null_mut(),\n+            )\n+        });\n+\n+        match res {\n+            Ok(_) => {\n+                // Safety: `read` bytes were written to the initialized portion of the buffer\n+                unsafe {\n+                    buf.assume_init(read as usize);\n+                }\n+                buf.add_filled(read as usize);\n+                Ok(())\n+            }\n+\n+            // The special treatment of BrokenPipe is to deal with Windows\n+            // pipe semantics, which yields this error when *reading* from\n+            // a pipe after the other end has closed; we interpret that as\n+            // EOF on the pipe.\n+            Err(ref e) if e.kind() == ErrorKind::BrokenPipe => Ok(()),\n+\n+            Err(e) => Err(e),\n+        }\n+    }\n+\n     pub unsafe fn read_overlapped(\n         &self,\n         buf: &mut [u8],"}]}