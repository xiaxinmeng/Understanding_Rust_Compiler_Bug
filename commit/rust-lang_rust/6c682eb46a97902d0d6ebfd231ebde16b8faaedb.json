{"sha": "6c682eb46a97902d0d6ebfd231ebde16b8faaedb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjNjgyZWI0NmE5NzkwMmQwZDZlYmZkMjMxZWJkZTE2YjhmYWFlZGI=", "commit": {"author": {"name": "csmoe", "email": "35686186+csmoe@users.noreply.github.com", "date": "2018-05-11T14:24:04Z"}, "committer": {"name": "csmoe", "email": "35686186+csmoe@users.noreply.github.com", "date": "2018-05-13T08:34:27Z"}, "message": "reduce variable span", "tree": {"sha": "24270f6ed6704c09c8a2bb5e203ca68e1467df32", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24270f6ed6704c09c8a2bb5e203ca68e1467df32"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c682eb46a97902d0d6ebfd231ebde16b8faaedb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c682eb46a97902d0d6ebfd231ebde16b8faaedb", "html_url": "https://github.com/rust-lang/rust/commit/6c682eb46a97902d0d6ebfd231ebde16b8faaedb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c682eb46a97902d0d6ebfd231ebde16b8faaedb/comments", "author": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "41707d8df9a441e19387a4a61415ee0af58a9e48", "url": "https://api.github.com/repos/rust-lang/rust/commits/41707d8df9a441e19387a4a61415ee0af58a9e48", "html_url": "https://github.com/rust-lang/rust/commit/41707d8df9a441e19387a4a61415ee0af58a9e48"}], "stats": {"total": 91, "additions": 74, "deletions": 17}, "files": [{"sha": "13fff3aa34274d404dbee5d565e681caa97d4896", "filename": "src/librustc/hir/pat_util.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6c682eb46a97902d0d6ebfd231ebde16b8faaedb/src%2Flibrustc%2Fhir%2Fpat_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c682eb46a97902d0d6ebfd231ebde16b8faaedb/src%2Flibrustc%2Fhir%2Fpat_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fpat_util.rs?ref=6c682eb46a97902d0d6ebfd231ebde16b8faaedb", "patch": "@@ -141,6 +141,15 @@ impl hir::Pat {\n         }\n     }\n \n+    pub fn simple_span(&self) -> Option<Span> {\n+        match self.node {\n+            PatKind::Binding(hir::BindingAnnotation::Unannotated, _, ref path1, None) |\n+            PatKind::Binding(hir::BindingAnnotation::Mutable, _, ref path1, None) =>\n+                Some(path1.span),\n+            _ => None,\n+        }\n+    }\n+\n     /// Return variants that are necessary to exist for the pattern to match.\n     pub fn necessary_variants(&self) -> Vec<DefId> {\n         let mut variants = vec![];"}, {"sha": "acdd5e6acad0430b760102ef38ed8769f24fe4dd", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6c682eb46a97902d0d6ebfd231ebde16b8faaedb/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c682eb46a97902d0d6ebfd231ebde16b8faaedb/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=6c682eb46a97902d0d6ebfd231ebde16b8faaedb", "patch": "@@ -453,11 +453,11 @@ fn visit_arm<'a, 'tcx>(ir: &mut IrMaps<'a, 'tcx>, arm: &'tcx hir::Arm) {\n             }\n         }\n \n-        pat.each_binding(|bm, p_id, sp, path1| {\n+        pat.each_binding(|bm, p_id, _sp, path1| {\n             debug!(\"adding local variable {} from match with bm {:?}\",\n                    p_id, bm);\n             let name = path1.node;\n-            ir.add_live_node_for_node(p_id, VarDefNode(sp));\n+            ir.add_live_node_for_node(p_id, VarDefNode(path1.span));\n             ir.add_variable(Local(LocalInfo {\n                 id: p_id,\n                 name: name,\n@@ -628,10 +628,10 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n     fn pat_bindings<F>(&mut self, pat: &hir::Pat, mut f: F) where\n         F: FnMut(&mut Liveness<'a, 'tcx>, LiveNode, Variable, Span, NodeId),\n     {\n-        pat.each_binding(|_bm, p_id, sp, _n| {\n+        pat.each_binding(|_bm, p_id, sp, n| {\n             let ln = self.live_node(p_id, sp);\n-            let var = self.variable(p_id, sp);\n-            f(self, ln, var, sp, p_id);\n+            let var = self.variable(p_id, n.span);\n+            f(self, ln, var, n.span, p_id);\n         })\n     }\n \n@@ -1398,7 +1398,8 @@ fn check_local<'a, 'tcx>(this: &mut Liveness<'a, 'tcx>, local: &'tcx hir::Local)\n         },\n         None => {\n             this.pat_bindings(&local.pat, |this, ln, var, sp, id| {\n-                this.warn_about_unused(sp, id, ln, var);\n+                let span = local.pat.simple_span().unwrap_or(sp);\n+                this.warn_about_unused(span, id, ln, var);\n             })\n         }\n     }\n@@ -1497,7 +1498,8 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n \n     fn warn_about_unused_args(&self, body: &hir::Body, entry_ln: LiveNode) {\n         for arg in &body.arguments {\n-            arg.pat.each_binding(|_bm, p_id, sp, path1| {\n+            arg.pat.each_binding(|_bm, p_id, _, path1| {\n+                let sp = path1.span;\n                 let var = self.variable(p_id, sp);\n                 // Ignore unused self.\n                 let name = path1.node;\n@@ -1541,6 +1543,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n \n                 let suggest_underscore_msg = format!(\"consider using `_{}` instead\",\n                                                      name);\n+\n                 if is_assigned {\n                     self.ir.tcx\n                         .lint_node_note(lint::builtin::UNUSED_VARIABLES, id, sp,"}, {"sha": "100fb6d3533f5961f0da0136a2ead6f0236cd479", "filename": "src/test/ui/lint/issue-47390-unused-variable-in-struct-pattern.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c682eb46a97902d0d6ebfd231ebde16b8faaedb/src%2Ftest%2Fui%2Flint%2Fissue-47390-unused-variable-in-struct-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c682eb46a97902d0d6ebfd231ebde16b8faaedb/src%2Ftest%2Fui%2Flint%2Fissue-47390-unused-variable-in-struct-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-47390-unused-variable-in-struct-pattern.rs?ref=6c682eb46a97902d0d6ebfd231ebde16b8faaedb", "patch": "@@ -35,6 +35,10 @@ fn main() {\n         endless_and_singing: true\n     };\n \n+    let mut mut_unused_var = 1;\n+\n+    let (mut var, unused_var) = (1, 2);\n+\n     if let SoulHistory { corridors_of_light,\n                          mut hours_are_suns,\n                          endless_and_singing: true } = who_from_the_womb_remembered {"}, {"sha": "992be2c0a28445f28b98a3ac6b7159dabc5d9e02", "filename": "src/test/ui/lint/issue-47390-unused-variable-in-struct-pattern.stderr", "status": "modified", "additions": 51, "deletions": 10, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/6c682eb46a97902d0d6ebfd231ebde16b8faaedb/src%2Ftest%2Fui%2Flint%2Fissue-47390-unused-variable-in-struct-pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6c682eb46a97902d0d6ebfd231ebde16b8faaedb/src%2Ftest%2Fui%2Flint%2Fissue-47390-unused-variable-in-struct-pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-47390-unused-variable-in-struct-pattern.stderr?ref=6c682eb46a97902d0d6ebfd231ebde16b8faaedb", "patch": "@@ -11,22 +11,40 @@ LL | #![warn(unused)] // UI tests pass `-A unused` (#43896)\n    |         ^^^^^^\n    = note: #[warn(unused_variables)] implied by #[warn(unused)]\n \n+warning: unused variable: `mut_unused_var`\n+  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:38:13\n+   |\n+LL |     let mut mut_unused_var = 1;\n+   |             ^^^^^^^^^^^^^^ help: consider using `_mut_unused_var` instead\n+\n+warning: unused variable: `var`\n+  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:40:14\n+   |\n+LL |     let (mut var, unused_var) = (1, 2);\n+   |              ^^^ help: consider using `_var` instead\n+\n+warning: unused variable: `unused_var`\n+  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:40:19\n+   |\n+LL |     let (mut var, unused_var) = (1, 2);\n+   |                   ^^^^^^^^^^ help: consider using `_unused_var` instead\n+\n warning: unused variable: `corridors_of_light`\n-  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:38:26\n+  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:42:26\n    |\n LL |     if let SoulHistory { corridors_of_light,\n    |                          ^^^^^^^^^^^^^^^^^^ help: try ignoring the field: `corridors_of_light: _`\n \n warning: variable `hours_are_suns` is assigned to, but never used\n-  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:39:26\n+  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:43:30\n    |\n LL |                          mut hours_are_suns,\n-   |                          ^^^^^^^^^^^^^^^^^^\n+   |                              ^^^^^^^^^^^^^^\n    |\n    = note: consider using `_hours_are_suns` instead\n \n warning: value assigned to `hours_are_suns` is never read\n-  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:41:9\n+  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:45:9\n    |\n LL |         hours_are_suns = false;\n    |         ^^^^^^^^^^^^^^\n@@ -39,38 +57,61 @@ LL | #![warn(unused)] // UI tests pass `-A unused` (#43896)\n    = note: #[warn(unused_assignments)] implied by #[warn(unused)]\n \n warning: unused variable: `case`\n-  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:50:23\n+  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:54:23\n    |\n LL |         Large::Suit { case } => {}\n    |                       ^^^^ help: try ignoring the field: `case: _`\n \n warning: unused variable: `case`\n-  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:55:24\n+  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:59:24\n    |\n LL |         &Large::Suit { case } => {}\n    |                        ^^^^ help: try ignoring the field: `case: _`\n \n warning: unused variable: `case`\n-  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:60:27\n+  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:64:27\n    |\n LL |         box Large::Suit { case } => {}\n    |                           ^^^^ help: try ignoring the field: `case: _`\n \n warning: unused variable: `case`\n-  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:65:24\n+  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:69:24\n    |\n LL |         (Large::Suit { case },) => {}\n    |                        ^^^^ help: try ignoring the field: `case: _`\n \n warning: unused variable: `case`\n-  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:70:24\n+  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:74:24\n    |\n LL |         [Large::Suit { case }] => {}\n    |                        ^^^^ help: try ignoring the field: `case: _`\n \n warning: unused variable: `case`\n-  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:75:29\n+  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:79:29\n    |\n LL |         Tuple(Large::Suit { case }, ()) => {}\n    |                             ^^^^ help: try ignoring the field: `case: _`\n \n+warning: variable does not need to be mutable\n+  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:38:9\n+   |\n+LL |     let mut mut_unused_var = 1;\n+   |         ----^^^^^^^^^^^^^^\n+   |         |\n+   |         help: remove this `mut`\n+   |\n+note: lint level defined here\n+  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:15:9\n+   |\n+LL | #![warn(unused)] // UI tests pass `-A unused` (#43896)\n+   |         ^^^^^^\n+   = note: #[warn(unused_mut)] implied by #[warn(unused)]\n+\n+warning: variable does not need to be mutable\n+  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:40:10\n+   |\n+LL |     let (mut var, unused_var) = (1, 2);\n+   |          ----^^^\n+   |          |\n+   |          help: remove this `mut`\n+"}]}