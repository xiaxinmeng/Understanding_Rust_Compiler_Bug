{"sha": "357c013ff5af459517ed231c1a7feb7fc4387db3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1N2MwMTNmZjVhZjQ1OTUxN2VkMjMxYzFhN2ZlYjdmYzQzODdkYjM=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2021-05-01T19:54:47Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2021-05-15T16:05:03Z"}, "message": "Remove some unncessary spaces from pretty-printed tokenstream output\n\nIn addition to making the output look nicer for all crates, this also\naligns the pretty-printing output with what the `rental` crate expects.\nThis will allow us to eventually disable a backwards-compat hack in a\nfollow-up PR.", "tree": {"sha": "12b7db195151c4e4c9c8db4544fae6a6c37a820e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12b7db195151c4e4c9c8db4544fae6a6c37a820e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/357c013ff5af459517ed231c1a7feb7fc4387db3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAmCf8TAACgkQtAh+UQ6Y\nsWT2Hg/+Of/yqqhGfHmEPFH9WhglXJBEeH5nWl5Ku+IOiapa7vEoD+aRjiqRfS8N\n4F3ey+jkK3CDvueeeDQNNFxMeG+ZkcadOY897BLQDnjN1EpLp/m3a2XRTs50R4Dz\nU/gh0Xd0H27j5J10ZolWaR7BhHtTgw/7MwuPg/5MBGsX9vKBMwEfXpne5En8rHxd\nK2IdeblFmFRE19asOEkDdty9xovJzks2HxKo53BIzW1BR2RSVOVWDpKKqgh8Q334\nj5ZxgfpZRvRYrjwW5UF019qxLkaYJgKa5cLOX51g0MjBxi9YH5fIRFKutaaZUqsr\nrGG42izfiqjopO49dKZToaf/6jSD1dHsZou7EzIKTIjoPR9iC67BLWukyHVPPCSj\ntUdBkSH9/1FSjY6s/Wvhv9QFvst6m/2UqRrzZqeVtuGKgiAPBlgOtHFHLRXGDX79\necrS8eCF1pm9sUjJx2zSc/UFk+dJ3e8/GEcZmh1q7FkcIeByaTInexlJH3Ez+qO2\nGfjSDWo3DO+bVdwmTTn9wYMVDZF8q2I6n9ItzE4c5HXeokRyDjgEXXhczHfZBxeX\nKjfyL/GtavLo9dF1tRW0NXiMbKC3guKOpVPhl5ydV0ZpzfjVpZpx80yWNSB/UX8+\nEdnhoWpI8yWaLmH48uY4bnD7ICt229yf7PsoZGfbSDVKrBGrjB4=\n=ZSen\n-----END PGP SIGNATURE-----", "payload": "tree 12b7db195151c4e4c9c8db4544fae6a6c37a820e\nparent 1025db84a68b948139b5adcd55da31bce32da8f3\nauthor Aaron Hill <aa1ronham@gmail.com> 1619898887 -0400\ncommitter Aaron Hill <aa1ronham@gmail.com> 1621094703 -0400\n\nRemove some unncessary spaces from pretty-printed tokenstream output\n\nIn addition to making the output look nicer for all crates, this also\naligns the pretty-printing output with what the `rental` crate expects.\nThis will allow us to eventually disable a backwards-compat hack in a\nfollow-up PR.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/357c013ff5af459517ed231c1a7feb7fc4387db3", "html_url": "https://github.com/rust-lang/rust/commit/357c013ff5af459517ed231c1a7feb7fc4387db3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/357c013ff5af459517ed231c1a7feb7fc4387db3/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1025db84a68b948139b5adcd55da31bce32da8f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/1025db84a68b948139b5adcd55da31bce32da8f3", "html_url": "https://github.com/rust-lang/rust/commit/1025db84a68b948139b5adcd55da31bce32da8f3"}], "stats": {"total": 229, "additions": 176, "deletions": 53}, "files": [{"sha": "a7908f7006062051f7d750cc58dfc5f0b5f905bf", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/357c013ff5af459517ed231c1a7feb7fc4387db3/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/357c013ff5af459517ed231c1a7feb7fc4387db3/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=357c013ff5af459517ed231c1a7feb7fc4387db3", "patch": "@@ -140,12 +140,15 @@ pub fn print_crate<'a>(\n // and also addresses some specific regressions described in #63896 and #73345.\n fn tt_prepend_space(tt: &TokenTree, prev: &TokenTree) -> bool {\n     if let TokenTree::Token(token) = prev {\n+        if matches!(token.kind, token::Dot) {\n+            return false;\n+        }\n         if let token::DocComment(comment_kind, ..) = token.kind {\n             return comment_kind != CommentKind::Line;\n         }\n     }\n     match tt {\n-        TokenTree::Token(token) => token.kind != token::Comma,\n+        TokenTree::Token(token) => !matches!(token.kind, token::Comma | token::Not | token::Dot),\n         TokenTree::Delimited(_, DelimToken::Paren, _) => {\n             !matches!(prev, TokenTree::Token(Token { kind: token::Ident(..), .. }))\n         }"}, {"sha": "fb406514f4b5ebf9a5414668035708f9d784ec69", "filename": "src/test/pretty/ast-stmt-expr-attr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/357c013ff5af459517ed231c1a7feb7fc4387db3/src%2Ftest%2Fpretty%2Fast-stmt-expr-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/357c013ff5af459517ed231c1a7feb7fc4387db3/src%2Ftest%2Fpretty%2Fast-stmt-expr-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fast-stmt-expr-attr.rs?ref=357c013ff5af459517ed231c1a7feb7fc4387db3", "patch": "@@ -114,11 +114,11 @@ fn syntax() {\n     let _ = #[attr] continue ;\n     let _ = #[attr] return;\n     let _ = #[attr] foo!();\n-    let _ = #[attr] foo!(# ! [attr]);\n+    let _ = #[attr] foo!(#! [attr]);\n     let _ = #[attr] foo![];\n-    let _ = #[attr] foo![# ! [attr]];\n+    let _ = #[attr] foo![#! [attr]];\n     let _ = #[attr] foo! { };\n-    let _ = #[attr] foo! { # ! [attr] };\n+    let _ = #[attr] foo! { #! [attr] };\n     let _ = #[attr] Foo{bar: baz,};\n     let _ = #[attr] Foo{..foo};\n     let _ = #[attr] Foo{bar: baz, ..foo};"}, {"sha": "125f2b0fa1687fed066ab6ab51d289c12eb6cedf", "filename": "src/test/pretty/delimited-token-groups.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/357c013ff5af459517ed231c1a7feb7fc4387db3/src%2Ftest%2Fpretty%2Fdelimited-token-groups.rs", "raw_url": "https://github.com/rust-lang/rust/raw/357c013ff5af459517ed231c1a7feb7fc4387db3/src%2Ftest%2Fpretty%2Fdelimited-token-groups.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fdelimited-token-groups.rs?ref=357c013ff5af459517ed231c1a7feb7fc4387db3", "patch": "@@ -9,7 +9,7 @@ mac! {\n     {\n         fn clone() -> S\n         {\n-            panic ! () ;\n+            panic! () ;\n \n         }\n     }"}, {"sha": "bf48e80eff147ae528deca87e5dec40013be2906", "filename": "src/test/ui/macros/trace-macro.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/357c013ff5af459517ed231c1a7feb7fc4387db3/src%2Ftest%2Fui%2Fmacros%2Ftrace-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/357c013ff5af459517ed231c1a7feb7fc4387db3/src%2Ftest%2Fui%2Fmacros%2Ftrace-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Ftrace-macro.stderr?ref=357c013ff5af459517ed231c1a7feb7fc4387db3", "patch": "@@ -5,5 +5,5 @@ LL |     println!(\"Hello, World!\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: expanding `println! { \"Hello, World!\" }`\n-   = note: to `{ $crate :: io :: _print($crate :: format_args_nl ! (\"Hello, World!\")) ; }`\n+   = note: to `{ $crate :: io :: _print($crate :: format_args_nl! (\"Hello, World!\")) ; }`\n "}, {"sha": "96e7d61398b7e052230f3fe2ecbc2ee3c1d00164", "filename": "src/test/ui/macros/trace_faulty_macros.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/357c013ff5af459517ed231c1a7feb7fc4387db3/src%2Ftest%2Fui%2Fmacros%2Ftrace_faulty_macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/357c013ff5af459517ed231c1a7feb7fc4387db3/src%2Ftest%2Fui%2Fmacros%2Ftrace_faulty_macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Ftrace_faulty_macros.stderr?ref=357c013ff5af459517ed231c1a7feb7fc4387db3", "patch": "@@ -19,7 +19,7 @@ LL |     my_faulty_macro!();\n    |     ^^^^^^^^^^^^^^^^^^^\n    |\n    = note: expanding `my_faulty_macro! {  }`\n-   = note: to `my_faulty_macro ! (bcd) ;`\n+   = note: to `my_faulty_macro! (bcd) ;`\n    = note: expanding `my_faulty_macro! { bcd }`\n \n error: recursion limit reached while expanding `my_recursive_macro!`\n@@ -41,13 +41,13 @@ LL |     my_recursive_macro!();\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: expanding `my_recursive_macro! {  }`\n-   = note: to `my_recursive_macro ! () ;`\n+   = note: to `my_recursive_macro! () ;`\n    = note: expanding `my_recursive_macro! {  }`\n-   = note: to `my_recursive_macro ! () ;`\n+   = note: to `my_recursive_macro! () ;`\n    = note: expanding `my_recursive_macro! {  }`\n-   = note: to `my_recursive_macro ! () ;`\n+   = note: to `my_recursive_macro! () ;`\n    = note: expanding `my_recursive_macro! {  }`\n-   = note: to `my_recursive_macro ! () ;`\n+   = note: to `my_recursive_macro! () ;`\n \n error: expected expression, found `A { a: a, b: 0, c: _, .. }`\n   --> $DIR/trace_faulty_macros.rs:16:9\n@@ -73,7 +73,7 @@ LL |     let a = pat_macro!();\n    |             ^^^^^^^^^^^^\n    |\n    = note: expanding `pat_macro! {  }`\n-   = note: to `pat_macro ! (A { a : a, b : 0, c : _, .. }) ;`\n+   = note: to `pat_macro! (A { a : a, b : 0, c : _, .. }) ;`\n    = note: expanding `pat_macro! { A { a : a, b : 0, c : _, .. } }`\n    = note: to `A { a: a, b: 0, c: _, .. }`\n "}, {"sha": "eae169b162f4d6a9f3329316c16086901256c3f4", "filename": "src/test/ui/proc-macro/allowed-attr-stmt-expr.stdout", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/357c013ff5af459517ed231c1a7feb7fc4387db3/src%2Ftest%2Fui%2Fproc-macro%2Fallowed-attr-stmt-expr.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/357c013ff5af459517ed231c1a7feb7fc4387db3/src%2Ftest%2Fui%2Fproc-macro%2Fallowed-attr-stmt-expr.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fallowed-attr-stmt-expr.stdout?ref=357c013ff5af459517ed231c1a7feb7fc4387db3", "patch": "@@ -87,7 +87,7 @@ PRINT-ATTR INPUT (DEBUG): TokenStream [\n         span: $DIR/allowed-attr-stmt-expr.rs:57:33: 57:34 (#0),\n     },\n ]\n-PRINT-ATTR INPUT (DISPLAY): #[expect_my_macro_stmt] my_macro ! (\"{}\", string) ;\n+PRINT-ATTR INPUT (DISPLAY): #[expect_my_macro_stmt] my_macro! (\"{}\", string) ;\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Punct {\n         ch: '#',\n@@ -140,7 +140,7 @@ PRINT-ATTR INPUT (DEBUG): TokenStream [\n         span: $DIR/allowed-attr-stmt-expr.rs:61:28: 61:29 (#0),\n     },\n ]\n-PRINT-ATTR INPUT (DISPLAY): second_make_stmt ! (#[allow(dead_code)] struct Bar { }) ;\n+PRINT-ATTR INPUT (DISPLAY): second_make_stmt! (#[allow(dead_code)] struct Bar { }) ;\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"second_make_stmt\","}, {"sha": "fbefa3923ee22c1e2dcf88667b5d9b9844f4bae8", "filename": "src/test/ui/proc-macro/attr-complex-fn.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/357c013ff5af459517ed231c1a7feb7fc4387db3/src%2Ftest%2Fui%2Fproc-macro%2Fattr-complex-fn.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/357c013ff5af459517ed231c1a7feb7fc4387db3/src%2Ftest%2Fui%2Fproc-macro%2Fattr-complex-fn.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fattr-complex-fn.stdout?ref=357c013ff5af459517ed231c1a7feb7fc4387db3", "patch": "@@ -76,7 +76,7 @@ PRINT-ATTR INPUT (DEBUG): TokenStream [\n         span: $DIR/attr-complex-fn.rs:19:42: 19:44 (#0),\n     },\n ]\n-PRINT-ATTR INPUT (DISPLAY): impl < T > MyTrait < T > for MyStruct < { true } > { # ! [rustc_dummy] }\n+PRINT-ATTR INPUT (DISPLAY): impl < T > MyTrait < T > for MyStruct < { true } > { #! [rustc_dummy] }\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"impl\","}, {"sha": "edb9fbab342e21120623b83001530368056075f3", "filename": "src/test/ui/proc-macro/attr-stmt-expr.stdout", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/357c013ff5af459517ed231c1a7feb7fc4387db3/src%2Ftest%2Fui%2Fproc-macro%2Fattr-stmt-expr.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/357c013ff5af459517ed231c1a7feb7fc4387db3/src%2Ftest%2Fui%2Fproc-macro%2Fattr-stmt-expr.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fattr-stmt-expr.stdout?ref=357c013ff5af459517ed231c1a7feb7fc4387db3", "patch": "@@ -71,7 +71,7 @@ PRINT-ATTR INPUT (DEBUG): TokenStream [\n         span: $DIR/attr-stmt-expr.rs:49:33: 49:34 (#0),\n     },\n ]\n-PRINT-ATTR INPUT (DISPLAY): #[expect_my_macro_stmt] my_macro ! (\"{}\", string) ;\n+PRINT-ATTR INPUT (DISPLAY): #[expect_my_macro_stmt] my_macro! (\"{}\", string) ;\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Punct {\n         ch: '#',\n@@ -124,7 +124,7 @@ PRINT-ATTR INPUT (DEBUG): TokenStream [\n         span: $DIR/attr-stmt-expr.rs:53:28: 53:29 (#0),\n     },\n ]\n-PRINT-ATTR INPUT (DISPLAY): second_make_stmt ! (#[allow(dead_code)] struct Bar { }) ;\n+PRINT-ATTR INPUT (DISPLAY): second_make_stmt! (#[allow(dead_code)] struct Bar { }) ;\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"second_make_stmt\","}, {"sha": "5b386b46bb721b700e9a0b3a26ec4f4f857d035e", "filename": "src/test/ui/proc-macro/auxiliary/attr-stmt-expr-rpass.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/357c013ff5af459517ed231c1a7feb7fc4387db3/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fattr-stmt-expr-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/357c013ff5af459517ed231c1a7feb7fc4387db3/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fattr-stmt-expr-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fattr-stmt-expr-rpass.rs?ref=357c013ff5af459517ed231c1a7feb7fc4387db3", "patch": "@@ -17,7 +17,7 @@ pub fn expect_let(attr: TokenStream, item: TokenStream) -> TokenStream {\n #[proc_macro_attribute]\n pub fn expect_print_stmt(attr: TokenStream, item: TokenStream) -> TokenStream {\n     assert!(attr.to_string().is_empty());\n-    assert_eq!(item.to_string(), \"println ! (\\\"{}\\\", string) ;\");\n+    assert_eq!(item.to_string(), \"println! (\\\"{}\\\", string) ;\");\n     item\n }\n \n@@ -31,7 +31,7 @@ pub fn expect_expr(attr: TokenStream, item: TokenStream) -> TokenStream {\n #[proc_macro_attribute]\n pub fn expect_print_expr(attr: TokenStream, item: TokenStream) -> TokenStream {\n     assert!(attr.to_string().is_empty());\n-    assert_eq!(item.to_string(), \"println ! (\\\"{}\\\", string)\");\n+    assert_eq!(item.to_string(), \"println! (\\\"{}\\\", string)\");\n     item\n }\n "}, {"sha": "4d6dc06b4a4a37dc08b75806530500fca457da72", "filename": "src/test/ui/proc-macro/auxiliary/attr-stmt-expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/357c013ff5af459517ed231c1a7feb7fc4387db3/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fattr-stmt-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/357c013ff5af459517ed231c1a7feb7fc4387db3/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fattr-stmt-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fattr-stmt-expr.rs?ref=357c013ff5af459517ed231c1a7feb7fc4387db3", "patch": "@@ -17,7 +17,7 @@ pub fn expect_let(attr: TokenStream, item: TokenStream) -> TokenStream {\n #[proc_macro_attribute]\n pub fn expect_my_macro_stmt(attr: TokenStream, item: TokenStream) -> TokenStream {\n     assert!(attr.to_string().is_empty());\n-    assert_eq!(item.to_string(), \"my_macro ! (\\\"{}\\\", string) ;\");\n+    assert_eq!(item.to_string(), \"my_macro! (\\\"{}\\\", string) ;\");\n     item\n }\n \n@@ -31,7 +31,7 @@ pub fn expect_expr(attr: TokenStream, item: TokenStream) -> TokenStream {\n #[proc_macro_attribute]\n pub fn expect_my_macro_expr(attr: TokenStream, item: TokenStream) -> TokenStream {\n     assert!(attr.to_string().is_empty());\n-    assert_eq!(item.to_string(), \"my_macro ! (\\\"{}\\\", string)\");\n+    assert_eq!(item.to_string(), \"my_macro! (\\\"{}\\\", string)\");\n     item\n }\n "}, {"sha": "08ead5aaeee8489f02212c7d105593180cdc4d08", "filename": "src/test/ui/proc-macro/cfg-eval-inner.stdout", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/357c013ff5af459517ed231c1a7feb7fc4387db3/src%2Ftest%2Fui%2Fproc-macro%2Fcfg-eval-inner.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/357c013ff5af459517ed231c1a7feb7fc4387db3/src%2Ftest%2Fui%2Fproc-macro%2Fcfg-eval-inner.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fcfg-eval-inner.stdout?ref=357c013ff5af459517ed231c1a7feb7fc4387db3", "patch": "@@ -1,9 +1,9 @@\n PRINT-ATTR INPUT (DISPLAY): impl Foo <\n [u8 ;\n  {\n-     # ! [rustc_dummy(cursed_inner)] # ! [allow(unused)] struct Inner\n-     { field : [u8 ; { # ! [rustc_dummy(another_cursed_inner)] 1 }] } 0\n- }] > { # ! [rustc_dummy(evaluated_attr)] fn bar() { } }\n+     #! [rustc_dummy(cursed_inner)] #! [allow(unused)] struct Inner\n+     { field : [u8 ; { #! [rustc_dummy(another_cursed_inner)] 1 }] } 0\n+ }] > { #! [rustc_dummy(evaluated_attr)] fn bar() { } }\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"impl\","}, {"sha": "e6148a687fda051df4b41e73650ead87ceeb4b34", "filename": "src/test/ui/proc-macro/dollar-crate-issue-62325.stdout", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/357c013ff5af459517ed231c1a7feb7fc4387db3/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate-issue-62325.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/357c013ff5af459517ed231c1a7feb7fc4387db3/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate-issue-62325.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate-issue-62325.stdout?ref=357c013ff5af459517ed231c1a7feb7fc4387db3", "patch": "@@ -1,4 +1,4 @@\n-PRINT-ATTR INPUT (DISPLAY): struct A(identity ! ($crate :: S)) ;\n+PRINT-ATTR INPUT (DISPLAY): struct A(identity! ($crate :: S)) ;\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"struct\",\n@@ -53,7 +53,7 @@ PRINT-ATTR INPUT (DEBUG): TokenStream [\n         span: $DIR/dollar-crate-issue-62325.rs:19:35: 19:36 (#4),\n     },\n ]\n-PRINT-ATTR INPUT (DISPLAY): struct B(identity ! ($crate :: S)) ;\n+PRINT-ATTR INPUT (DISPLAY): struct B(identity! ($crate :: S)) ;\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"struct\","}, {"sha": "6261d82e2d0b8c5a51e7a03a5b215a0bbf7e0465", "filename": "src/test/ui/proc-macro/inner-attr-non-inline-mod.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/357c013ff5af459517ed231c1a7feb7fc4387db3/src%2Ftest%2Fui%2Fproc-macro%2Finner-attr-non-inline-mod.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/357c013ff5af459517ed231c1a7feb7fc4387db3/src%2Ftest%2Fui%2Fproc-macro%2Finner-attr-non-inline-mod.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Finner-attr-non-inline-mod.stdout?ref=357c013ff5af459517ed231c1a7feb7fc4387db3", "patch": "@@ -1,4 +1,4 @@\n-PRINT-ATTR INPUT (DISPLAY): #[deny(unused_attributes)] mod module_with_attrs { # ! [rustfmt :: skip] }\n+PRINT-ATTR INPUT (DISPLAY): #[deny(unused_attributes)] mod module_with_attrs { #! [rustfmt :: skip] }\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Punct {\n         ch: '#',"}, {"sha": "9b7865be6220ea075a6ceb7d80bced193c59a5aa", "filename": "src/test/ui/proc-macro/inner-attrs.stdout", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/357c013ff5af459517ed231c1a7feb7fc4387db3/src%2Ftest%2Fui%2Fproc-macro%2Finner-attrs.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/357c013ff5af459517ed231c1a7feb7fc4387db3/src%2Ftest%2Fui%2Fproc-macro%2Finner-attrs.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Finner-attrs.stdout?ref=357c013ff5af459517ed231c1a7feb7fc4387db3", "patch": "@@ -6,7 +6,7 @@ PRINT-ATTR_ARGS INPUT (DEBUG): TokenStream [\n     },\n ]\n PRINT-ATTR INPUT (DISPLAY): #[print_target_and_args(second)] fn foo()\n-{ # ! [print_target_and_args(third)] # ! [print_target_and_args(fourth)] }\n+{ #! [print_target_and_args(third)] #! [print_target_and_args(fourth)] }\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Punct {\n         ch: '#',\n@@ -121,7 +121,7 @@ PRINT-ATTR_ARGS INPUT (DEBUG): TokenStream [\n     },\n ]\n PRINT-ATTR INPUT (DISPLAY): fn foo()\n-{ # ! [print_target_and_args(third)] # ! [print_target_and_args(fourth)] }\n+{ #! [print_target_and_args(third)] #! [print_target_and_args(fourth)] }\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"fn\",\n@@ -210,7 +210,7 @@ PRINT-ATTR_ARGS INPUT (DEBUG): TokenStream [\n         span: $DIR/inner-attrs.rs:19:30: 19:35 (#0),\n     },\n ]\n-PRINT-ATTR INPUT (DISPLAY): fn foo() { # ! [print_target_and_args(fourth)] }\n+PRINT-ATTR INPUT (DISPLAY): fn foo() { #! [print_target_and_args(fourth)] }\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"fn\",\n@@ -299,7 +299,7 @@ PRINT-ATTR_ARGS INPUT (DEBUG): TokenStream [\n ]\n PRINT-ATTR INPUT (DISPLAY): #[print_target_and_args(mod_second)] mod inline_mod\n {\n-    # ! [print_target_and_args(mod_third)] # !\n+    #! [print_target_and_args(mod_third)] #!\n     [print_target_and_args(mod_fourth)]\n }\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n@@ -412,7 +412,7 @@ PRINT-ATTR_ARGS INPUT (DEBUG): TokenStream [\n ]\n PRINT-ATTR INPUT (DISPLAY): mod inline_mod\n {\n-    # ! [print_target_and_args(mod_third)] # !\n+    #! [print_target_and_args(mod_third)] #!\n     [print_target_and_args(mod_fourth)]\n }\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n@@ -498,7 +498,7 @@ PRINT-ATTR_ARGS INPUT (DEBUG): TokenStream [\n         span: $DIR/inner-attrs.rs:26:30: 26:39 (#0),\n     },\n ]\n-PRINT-ATTR INPUT (DISPLAY): mod inline_mod { # ! [print_target_and_args(mod_fourth)] }\n+PRINT-ATTR INPUT (DISPLAY): mod inline_mod { #! [print_target_and_args(mod_fourth)] }\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"mod\",\n@@ -571,7 +571,7 @@ PRINT-ATTR INPUT (DEBUG): TokenStream [\n PRINT-DERIVE INPUT (DISPLAY): struct MyDerivePrint\n {\n     field :\n-    [u8 ; { match true { _ => { # ! [rustc_dummy(third)] true } } ; 0 }]\n+    [u8 ; { match true { _ => { #! [rustc_dummy(third)] true } } ; 0 }]\n }\n PRINT-DERIVE INPUT (DEBUG): TokenStream [\n     Ident {\n@@ -705,7 +705,7 @@ PRINT-ATTR_ARGS INPUT (DEBUG): TokenStream [\n         span: $DIR/inner-attrs.rs:48:29: 48:40 (#0),\n     },\n ]\n-PRINT-ATTR INPUT (DISPLAY): (3, 4, { # ! [cfg_attr(not(FALSE), rustc_dummy(innermost))] 5 }) ;\n+PRINT-ATTR INPUT (DISPLAY): (3, 4, { #! [cfg_attr(not(FALSE), rustc_dummy(innermost))] 5 }) ;\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Group {\n         delimiter: Parenthesis,\n@@ -819,7 +819,7 @@ PRINT-ATTR_ARGS INPUT (DEBUG): TokenStream [\n         span: $DIR/inner-attrs.rs:55:29: 55:40 (#0),\n     },\n ]\n-PRINT-ATTR INPUT (DISPLAY): (3, 4, { # ! [cfg_attr(not(FALSE), rustc_dummy(innermost))] 5 }) ;\n+PRINT-ATTR INPUT (DISPLAY): (3, 4, { #! [cfg_attr(not(FALSE), rustc_dummy(innermost))] 5 }) ;\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Group {\n         delimiter: Parenthesis,"}, {"sha": "ea03653c52f833f6e785daf8107093f34c477e32", "filename": "src/test/ui/proc-macro/issue-75734-pp-paren.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/357c013ff5af459517ed231c1a7feb7fc4387db3/src%2Ftest%2Fui%2Fproc-macro%2Fissue-75734-pp-paren.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/357c013ff5af459517ed231c1a7feb7fc4387db3/src%2Ftest%2Fui%2Fproc-macro%2Fissue-75734-pp-paren.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-75734-pp-paren.stdout?ref=357c013ff5af459517ed231c1a7feb7fc4387db3", "patch": "@@ -1,4 +1,4 @@\n-PRINT-ATTR INPUT (DISPLAY): fn main() { & | _ : u8 | { } ; mul_2 ! (1 + 1) ; }\n+PRINT-ATTR INPUT (DISPLAY): fn main() { & | _ : u8 | { } ; mul_2! (1 + 1) ; }\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"fn\","}, {"sha": "81b2b219c436815f7f3299b6bfd18a5d3c8a1df8", "filename": "src/test/ui/proc-macro/issue-75930-derive-cfg.stdout", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/357c013ff5af459517ed231c1a7feb7fc4387db3/src%2Ftest%2Fui%2Fproc-macro%2Fissue-75930-derive-cfg.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/357c013ff5af459517ed231c1a7feb7fc4387db3/src%2Ftest%2Fui%2Fproc-macro%2Fissue-75930-derive-cfg.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-75930-derive-cfg.stdout?ref=357c013ff5af459517ed231c1a7feb7fc4387db3", "patch": "@@ -11,16 +11,15 @@ struct Foo < #[cfg(FALSE)] A, B >\n              #[cfg(FALSE)] true => { },\n              #[cfg_attr(not(FALSE), allow(warnings))] false => { }, _ => { }\n          } ; #[print_helper(should_be_removed)] fn removed_fn()\n-         { # ! [cfg(FALSE)] } #[print_helper(c)] #[cfg(not(FALSE))] fn\n-         kept_fn() { # ! [cfg(not(FALSE))] let my_val = true ; } enum\n-         TupleEnum\n+         { #! [cfg(FALSE)] } #[print_helper(c)] #[cfg(not(FALSE))] fn\n+         kept_fn() { #! [cfg(not(FALSE))] let my_val = true ; } enum TupleEnum\n          {\n              Foo(#[cfg(FALSE)] u8, #[cfg(FALSE)] bool, #[cfg(not(FALSE))] i32,\n                  #[cfg(FALSE)] String, u8)\n          } struct\n          TupleStruct(#[cfg(FALSE)] String, #[cfg(not(FALSE))] i32,\n                      #[cfg(FALSE)] bool, u8) ; fn plain_removed_fn()\n-         { # ! [cfg_attr(not(FALSE), cfg(FALSE))] } 0\n+         { #! [cfg_attr(not(FALSE), cfg(FALSE))] } 0\n      }], #[print_helper(d)] fourth : B\n }\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n@@ -1281,7 +1280,7 @@ PRINT-DERIVE INPUT (DISPLAY): #[print_helper(a)] #[allow(dead_code)] #[print_hel\n          #[cfg(not(FALSE))] struct Inner ; match true\n          { #[allow(warnings)] false => { }, _ => { } } ; #[print_helper(c)]\n          #[cfg(not(FALSE))] fn kept_fn()\n-         { # ! [cfg(not(FALSE))] let my_val = true ; } enum TupleEnum\n+         { #! [cfg(not(FALSE))] let my_val = true ; } enum TupleEnum\n          { Foo(#[cfg(not(FALSE))] i32, u8) } struct\n          TupleStruct(#[cfg(not(FALSE))] i32, u8) ; 0\n      }], #[print_helper(d)] fourth : B"}, {"sha": "60a400a5deabfd0d57f6b3d4a1dc338aad28f172", "filename": "src/test/ui/proc-macro/issue-78675-captured-inner-attrs.stdout", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/357c013ff5af459517ed231c1a7feb7fc4387db3/src%2Ftest%2Fui%2Fproc-macro%2Fissue-78675-captured-inner-attrs.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/357c013ff5af459517ed231c1a7feb7fc4387db3/src%2Ftest%2Fui%2Fproc-macro%2Fissue-78675-captured-inner-attrs.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-78675-captured-inner-attrs.stdout?ref=357c013ff5af459517ed231c1a7feb7fc4387db3", "patch": "@@ -1,7 +1,7 @@\n-PRINT-BANG INPUT (DISPLAY): foo ! { #[fake_attr] mod bar {\n+PRINT-BANG INPUT (DISPLAY): foo! { #[fake_attr] mod bar {\n     #![doc = r\" Foo\"]\n } }\n-PRINT-BANG DEEP-RE-COLLECTED (DISPLAY): foo ! { #[fake_attr] mod bar { # ! [doc = r\" Foo\"] } }\n+PRINT-BANG DEEP-RE-COLLECTED (DISPLAY): foo! { #[fake_attr] mod bar { #! [doc = r\" Foo\"] } }\n PRINT-BANG INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"foo\","}, {"sha": "6e2b6a2e5bdf68f2d5c1e836b5bc7a89447ab145", "filename": "src/test/ui/proc-macro/macro-rules-derive-cfg.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/357c013ff5af459517ed231c1a7feb7fc4387db3/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-rules-derive-cfg.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/357c013ff5af459517ed231c1a7feb7fc4387db3/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-rules-derive-cfg.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-rules-derive-cfg.stdout?ref=357c013ff5af459517ed231c1a7feb7fc4387db3", "patch": "@@ -4,7 +4,7 @@ PRINT-DERIVE INPUT (DISPLAY): struct Foo\n     [bool ;\n      {\n          let a = #[rustc_dummy(first)] #[rustc_dummy(second)]\n-         { # ! [allow(unused)] 30 } ; 0\n+         { #! [allow(unused)] 30 } ; 0\n      }]\n }\n PRINT-DERIVE INPUT (DEBUG): TokenStream ["}, {"sha": "95ef260537a8a729c5fe2586d15d41a66588e331", "filename": "src/test/ui/proc-macro/meta-macro-hygiene.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/357c013ff5af459517ed231c1a7feb7fc4387db3/src%2Ftest%2Fui%2Fproc-macro%2Fmeta-macro-hygiene.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/357c013ff5af459517ed231c1a7feb7fc4387db3/src%2Ftest%2Fui%2Fproc-macro%2Fmeta-macro-hygiene.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fmeta-macro-hygiene.stdout?ref=357c013ff5af459517ed231c1a7feb7fc4387db3", "patch": "@@ -30,7 +30,7 @@ macro_rules! produce_it\n     */ {\n     () =>\n     {\n-        meta_macro :: print_def_site ! ($ crate :: dummy ! ()) ;\n+        meta_macro :: print_def_site! ($ crate :: dummy! ()) ;\n         // `print_def_site!` will respan the `$crate` identifier\n         // with `Span::def_site()`. This should cause it to resolve\n         // relative to `meta_macro`, *not* `make_macro` (despite"}, {"sha": "6b410f0bfb7e3b856c06f1db4deb0e5248aac630", "filename": "src/test/ui/proc-macro/nodelim-groups.stdout", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/357c013ff5af459517ed231c1a7feb7fc4387db3/src%2Ftest%2Fui%2Fproc-macro%2Fnodelim-groups.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/357c013ff5af459517ed231c1a7feb7fc4387db3/src%2Ftest%2Fui%2Fproc-macro%2Fnodelim-groups.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fnodelim-groups.stdout?ref=357c013ff5af459517ed231c1a7feb7fc4387db3", "patch": "@@ -71,7 +71,6 @@ PRINT-BANG INPUT (DEBUG): TokenStream [\n     },\n ]\n PRINT-BANG INPUT (DISPLAY): \"hi\" \"hello\".len() + \"world\".len() (1 + 1)\n-PRINT-BANG DEEP-RE-COLLECTED (DISPLAY): \"hi\" \"hello\" . len() + \"world\" . len() (1 + 1)\n PRINT-BANG INPUT (DEBUG): TokenStream [\n     Literal {\n         kind: Str,"}, {"sha": "4d884348f2ca423df47d1f8aa3b77f28670566a2", "filename": "src/test/ui/proc-macro/nonterminal-expansion.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/357c013ff5af459517ed231c1a7feb7fc4387db3/src%2Ftest%2Fui%2Fproc-macro%2Fnonterminal-expansion.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/357c013ff5af459517ed231c1a7feb7fc4387db3/src%2Ftest%2Fui%2Fproc-macro%2Fnonterminal-expansion.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fnonterminal-expansion.stdout?ref=357c013ff5af459517ed231c1a7feb7fc4387db3", "patch": "@@ -1,5 +1,5 @@\n PRINT-ATTR_ARGS INPUT (DISPLAY): a, line!(), b\n-PRINT-ATTR_ARGS RE-COLLECTED (DISPLAY): a, line ! (), b\n+PRINT-ATTR_ARGS RE-COLLECTED (DISPLAY): a, line! (), b\n PRINT-ATTR_ARGS INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"a\","}, {"sha": "ac020cddf087438e01fa02bd810eea1f4b8499e0", "filename": "src/test/ui/proc-macro/nonterminal-token-hygiene.stdout", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/357c013ff5af459517ed231c1a7feb7fc4387db3/src%2Ftest%2Fui%2Fproc-macro%2Fnonterminal-token-hygiene.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/357c013ff5af459517ed231c1a7feb7fc4387db3/src%2Ftest%2Fui%2Fproc-macro%2Fnonterminal-token-hygiene.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fnonterminal-token-hygiene.stdout?ref=357c013ff5af459517ed231c1a7feb7fc4387db3", "patch": "@@ -52,13 +52,13 @@ macro_rules! outer\n     */ {\n     ($ item : item) =>\n     {\n-        macro inner() { print_bang ! { $ item } } inner ! () ;\n+        macro inner() { print_bang! { $ item } } inner! () ;\n \n     } ;\n }\n \n struct S /* 0#0 */;\n-macro inner /* 0#4 */ { () => { print_bang ! { struct S; } } }\n+macro inner /* 0#4 */ { () => { print_bang! { struct S; } } }\n \n struct S /* 0#5 */;\n // OK, not a duplicate definition of `S`"}, {"sha": "ffe2a741551518dacc21d7bdaea83fb9f5b7536c", "filename": "src/test/ui/proc-macro/pretty-print-tts.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/357c013ff5af459517ed231c1a7feb7fc4387db3/src%2Ftest%2Fui%2Fproc-macro%2Fpretty-print-tts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/357c013ff5af459517ed231c1a7feb7fc4387db3/src%2Ftest%2Fui%2Fproc-macro%2Fpretty-print-tts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fpretty-print-tts.rs?ref=357c013ff5af459517ed231c1a7feb7fc4387db3", "patch": "@@ -0,0 +1,20 @@\n+// check-pass\n+// aux-build:test-macros.rs\n+// compile-flags: -Z span-debug\n+\n+#![feature(rustc_attrs)]\n+\n+#![no_std] // Don't load unnecessary hygiene information from std\n+extern crate std;\n+\n+#[macro_use]\n+extern crate test_macros;\n+\n+// Tests the pretty-printing behavior of various (unparsed) tokens\n+print_bang_consume!({\n+    #![rustc_dummy]\n+    let a = \"hello\".len();\n+    matches!(a, 5);\n+});\n+\n+fn main() {}"}, {"sha": "f52e97a860446bf450d4484fbee37a8607df8bf0", "filename": "src/test/ui/proc-macro/pretty-print-tts.stdout", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/357c013ff5af459517ed231c1a7feb7fc4387db3/src%2Ftest%2Fui%2Fproc-macro%2Fpretty-print-tts.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/357c013ff5af459517ed231c1a7feb7fc4387db3/src%2Ftest%2Fui%2Fproc-macro%2Fpretty-print-tts.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fpretty-print-tts.stdout?ref=357c013ff5af459517ed231c1a7feb7fc4387db3", "patch": "@@ -0,0 +1,102 @@\n+PRINT-BANG INPUT (DISPLAY): { #! [rustc_dummy] let a = \"hello\".len() ; matches! (a, 5) ; }\n+PRINT-BANG INPUT (DEBUG): TokenStream [\n+    Group {\n+        delimiter: Brace,\n+        stream: TokenStream [\n+            Punct {\n+                ch: '#',\n+                spacing: Joint,\n+                span: $DIR/pretty-print-tts.rs:15:5: 15:6 (#0),\n+            },\n+            Punct {\n+                ch: '!',\n+                spacing: Alone,\n+                span: $DIR/pretty-print-tts.rs:15:6: 15:7 (#0),\n+            },\n+            Group {\n+                delimiter: Bracket,\n+                stream: TokenStream [\n+                    Ident {\n+                        ident: \"rustc_dummy\",\n+                        span: $DIR/pretty-print-tts.rs:15:8: 15:19 (#0),\n+                    },\n+                ],\n+                span: $DIR/pretty-print-tts.rs:15:7: 15:20 (#0),\n+            },\n+            Ident {\n+                ident: \"let\",\n+                span: $DIR/pretty-print-tts.rs:16:5: 16:8 (#0),\n+            },\n+            Ident {\n+                ident: \"a\",\n+                span: $DIR/pretty-print-tts.rs:16:9: 16:10 (#0),\n+            },\n+            Punct {\n+                ch: '=',\n+                spacing: Alone,\n+                span: $DIR/pretty-print-tts.rs:16:11: 16:12 (#0),\n+            },\n+            Literal {\n+                kind: Str,\n+                symbol: \"hello\",\n+                suffix: None,\n+                span: $DIR/pretty-print-tts.rs:16:13: 16:20 (#0),\n+            },\n+            Punct {\n+                ch: '.',\n+                spacing: Alone,\n+                span: $DIR/pretty-print-tts.rs:16:20: 16:21 (#0),\n+            },\n+            Ident {\n+                ident: \"len\",\n+                span: $DIR/pretty-print-tts.rs:16:21: 16:24 (#0),\n+            },\n+            Group {\n+                delimiter: Parenthesis,\n+                stream: TokenStream [],\n+                span: $DIR/pretty-print-tts.rs:16:24: 16:26 (#0),\n+            },\n+            Punct {\n+                ch: ';',\n+                spacing: Alone,\n+                span: $DIR/pretty-print-tts.rs:16:26: 16:27 (#0),\n+            },\n+            Ident {\n+                ident: \"matches\",\n+                span: $DIR/pretty-print-tts.rs:17:5: 17:12 (#0),\n+            },\n+            Punct {\n+                ch: '!',\n+                spacing: Alone,\n+                span: $DIR/pretty-print-tts.rs:17:12: 17:13 (#0),\n+            },\n+            Group {\n+                delimiter: Parenthesis,\n+                stream: TokenStream [\n+                    Ident {\n+                        ident: \"a\",\n+                        span: $DIR/pretty-print-tts.rs:17:14: 17:15 (#0),\n+                    },\n+                    Punct {\n+                        ch: ',',\n+                        spacing: Alone,\n+                        span: $DIR/pretty-print-tts.rs:17:15: 17:16 (#0),\n+                    },\n+                    Literal {\n+                        kind: Integer,\n+                        symbol: \"5\",\n+                        suffix: None,\n+                        span: $DIR/pretty-print-tts.rs:17:17: 17:18 (#0),\n+                    },\n+                ],\n+                span: $DIR/pretty-print-tts.rs:17:13: 17:19 (#0),\n+            },\n+            Punct {\n+                ch: ';',\n+                spacing: Alone,\n+                span: $DIR/pretty-print-tts.rs:17:19: 17:20 (#0),\n+            },\n+        ],\n+        span: $DIR/pretty-print-tts.rs:14:21: 18:2 (#0),\n+    },\n+]"}, {"sha": "dc35df1159f883dc8a8feca4a3616b716c71df42", "filename": "src/test/ui/proc-macro/weird-braces.stdout", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/357c013ff5af459517ed231c1a7feb7fc4387db3/src%2Ftest%2Fui%2Fproc-macro%2Fweird-braces.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/357c013ff5af459517ed231c1a7feb7fc4387db3/src%2Ftest%2Fui%2Fproc-macro%2Fweird-braces.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fweird-braces.stdout?ref=357c013ff5af459517ed231c1a7feb7fc4387db3", "patch": "@@ -8,7 +8,7 @@ PRINT-ATTR_ARGS INPUT (DEBUG): TokenStream [\n PRINT-ATTR INPUT (DISPLAY): #[print_target_and_args(second_outer)] impl Bar < { 1 > 0 } > for Foo <\n { true } >\n {\n-    # ! [print_target_and_args(first_inner)] # !\n+    #! [print_target_and_args(first_inner)] #!\n     [print_target_and_args(second_inner)]\n }\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n@@ -182,7 +182,7 @@ PRINT-ATTR_ARGS INPUT (DEBUG): TokenStream [\n ]\n PRINT-ATTR INPUT (DISPLAY): impl Bar < { 1 > 0 } > for Foo < { true } >\n {\n-    # ! [print_target_and_args(first_inner)] # !\n+    #! [print_target_and_args(first_inner)] #!\n     [print_target_and_args(second_inner)]\n }\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n@@ -330,7 +330,7 @@ PRINT-ATTR_ARGS INPUT (DEBUG): TokenStream [\n     },\n ]\n PRINT-ATTR INPUT (DISPLAY): impl Bar < { 1 > 0 } > for Foo < { true } >\n-{ # ! [print_target_and_args(second_inner)] }\n+{ #! [print_target_and_args(second_inner)] }\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"impl\","}]}