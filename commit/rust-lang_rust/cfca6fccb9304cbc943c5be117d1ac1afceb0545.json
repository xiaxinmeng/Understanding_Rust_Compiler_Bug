{"sha": "cfca6fccb9304cbc943c5be117d1ac1afceb0545", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmY2E2ZmNjYjkzMDRjYmM5NDNjNWJlMTE3ZDFhYzFhZmNlYjA1NDU=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-03-17T12:48:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-03-17T12:48:54Z"}, "message": "Rollup merge of #40463 - tshepang:nit, r=nikomatsakis\n\nsome style fixes", "tree": {"sha": "ecadeec59939386e1e134407d4c81b3ead473df5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ecadeec59939386e1e134407d4c81b3ead473df5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cfca6fccb9304cbc943c5be117d1ac1afceb0545", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cfca6fccb9304cbc943c5be117d1ac1afceb0545", "html_url": "https://github.com/rust-lang/rust/commit/cfca6fccb9304cbc943c5be117d1ac1afceb0545", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cfca6fccb9304cbc943c5be117d1ac1afceb0545/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "695d7ecd0521ea4584a4c3e7db5a2e892ccf10b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/695d7ecd0521ea4584a4c3e7db5a2e892ccf10b9", "html_url": "https://github.com/rust-lang/rust/commit/695d7ecd0521ea4584a4c3e7db5a2e892ccf10b9"}, {"sha": "b38992c63d2f92b2874619c6683b32ecdc59b333", "url": "https://api.github.com/repos/rust-lang/rust/commits/b38992c63d2f92b2874619c6683b32ecdc59b333", "html_url": "https://github.com/rust-lang/rust/commit/b38992c63d2f92b2874619c6683b32ecdc59b333"}], "stats": {"total": 174, "additions": 91, "deletions": 83}, "files": [{"sha": "7a70eda955b69dec324b78be14b67ddf8181d592", "filename": "src/librustc/cfg/construct.rs", "status": "modified", "additions": 15, "deletions": 17, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/cfca6fccb9304cbc943c5be117d1ac1afceb0545/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfca6fccb9304cbc943c5be117d1ac1afceb0545/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fcfg%2Fconstruct.rs?ref=cfca6fccb9304cbc943c5be117d1ac1afceb0545", "patch": "@@ -52,14 +52,16 @@ pub fn construct<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         tables: tables,\n         graph: graph,\n         fn_exit: fn_exit,\n-        loop_scopes: Vec::new()\n+        loop_scopes: Vec::new(),\n     };\n     body_exit = cfg_builder.expr(&body.value, entry);\n     cfg_builder.add_contained_edge(body_exit, fn_exit);\n-    let CFGBuilder {graph, ..} = cfg_builder;\n-    CFG {graph: graph,\n-         entry: entry,\n-         exit: fn_exit}\n+    let CFGBuilder { graph, .. } = cfg_builder;\n+    CFG {\n+        graph: graph,\n+        entry: entry,\n+        exit: fn_exit,\n+    }\n }\n \n impl<'a, 'tcx> CFGBuilder<'a, 'tcx> {\n@@ -81,7 +83,8 @@ impl<'a, 'tcx> CFGBuilder<'a, 'tcx> {\n                 self.add_ast_node(id, &[exit])\n             }\n \n-            hir::StmtExpr(ref expr, id) | hir::StmtSemi(ref expr, id) => {\n+            hir::StmtExpr(ref expr, id) |\n+            hir::StmtSemi(ref expr, id) => {\n                 let exit = self.expr(&expr, pred);\n                 self.add_ast_node(id, &[exit])\n             }\n@@ -95,9 +98,7 @@ impl<'a, 'tcx> CFGBuilder<'a, 'tcx> {\n                 self.pat(&local.pat, init_exit)\n             }\n \n-            hir::DeclItem(_) => {\n-                pred\n-            }\n+            hir::DeclItem(_) => pred,\n         }\n     }\n \n@@ -107,9 +108,7 @@ impl<'a, 'tcx> CFGBuilder<'a, 'tcx> {\n             PatKind::Path(_) |\n             PatKind::Lit(..) |\n             PatKind::Range(..) |\n-            PatKind::Wild => {\n-                self.add_ast_node(pat.id, &[pred])\n-            }\n+            PatKind::Wild => self.add_ast_node(pat.id, &[pred]),\n \n             PatKind::Box(ref subpat) |\n             PatKind::Ref(ref subpat, _) |\n@@ -125,8 +124,7 @@ impl<'a, 'tcx> CFGBuilder<'a, 'tcx> {\n             }\n \n             PatKind::Struct(_, ref subpats, _) => {\n-                let pats_exit =\n-                    self.pats_all(subpats.iter().map(|f| &f.node.pat), pred);\n+                let pats_exit = self.pats_all(subpats.iter().map(|f| &f.node.pat), pred);\n                 self.add_ast_node(pat.id, &[pats_exit])\n             }\n \n@@ -385,7 +383,7 @@ impl<'a, 'tcx> CFGBuilder<'a, 'tcx> {\n         let method_call = ty::MethodCall::expr(call_expr.id);\n         let fn_ty = match self.tables.method_map.get(&method_call) {\n             Some(method) => method.ty,\n-            None => self.tables.expr_ty_adjusted(func_or_rcvr)\n+            None => self.tables.expr_ty_adjusted(func_or_rcvr),\n         };\n \n         let func_or_rcvr_exit = self.expr(func_or_rcvr, pred);\n@@ -556,7 +554,7 @@ impl<'a, 'tcx> CFGBuilder<'a, 'tcx> {\n                         from_index: CFGIndex,\n                         to_loop: LoopScope,\n                         to_index: CFGIndex) {\n-        let mut data = CFGEdgeData {exiting_scopes: vec![] };\n+        let mut data = CFGEdgeData { exiting_scopes: vec![] };\n         let mut scope = self.tcx.region_maps.node_extent(from_expr.id);\n         let target_scope = self.tcx.region_maps.node_extent(to_loop.loop_id);\n         while scope != target_scope {\n@@ -591,7 +589,7 @@ impl<'a, 'tcx> CFGBuilder<'a, 'tcx> {\n                 }\n                 span_bug!(expr.span, \"no loop scope for id {}\", loop_id);\n             }\n-            Err(err) => span_bug!(expr.span, \"loop scope error: {}\",  err)\n+            Err(err) => span_bug!(expr.span, \"loop scope error: {}\", err),\n         }\n     }\n }"}, {"sha": "0f3108df9a822589aa4bba9743d8eaf77309a8c8", "filename": "src/librustc/dep_graph/dep_tracking_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfca6fccb9304cbc943c5be117d1ac1afceb0545/src%2Flibrustc%2Fdep_graph%2Fdep_tracking_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfca6fccb9304cbc943c5be117d1ac1afceb0545/src%2Flibrustc%2Fdep_graph%2Fdep_tracking_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_tracking_map.rs?ref=cfca6fccb9304cbc943c5be117d1ac1afceb0545", "patch": "@@ -39,7 +39,7 @@ impl<M: DepTrackingMapConfig> DepTrackingMap<M> {\n         DepTrackingMap {\n             phantom: PhantomData,\n             graph: graph,\n-            map: FxHashMap()\n+            map: FxHashMap(),\n         }\n     }\n "}, {"sha": "93f6e3a83a0c2e7504e47a740cde99572db0c615", "filename": "src/librustc/dep_graph/visit.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cfca6fccb9304cbc943c5be117d1ac1afceb0545/src%2Flibrustc%2Fdep_graph%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfca6fccb9304cbc943c5be117d1ac1afceb0545/src%2Flibrustc%2Fdep_graph%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fvisit.rs?ref=cfca6fccb9304cbc943c5be117d1ac1afceb0545", "patch": "@@ -29,7 +29,7 @@ pub fn visit_all_item_likes_in_krate<'a, 'tcx, V, F>(tcx: TyCtxt<'a, 'tcx, 'tcx>\n     struct TrackingVisitor<'visit, 'tcx: 'visit, F: 'visit, V: 'visit> {\n         tcx: TyCtxt<'visit, 'tcx, 'tcx>,\n         dep_node_fn: &'visit mut F,\n-        visitor: &'visit mut V\n+        visitor: &'visit mut V,\n     }\n \n     impl<'visit, 'tcx, F, V> ItemLikeVisitor<'tcx> for TrackingVisitor<'visit, 'tcx, F, V>\n@@ -70,13 +70,16 @@ pub fn visit_all_item_likes_in_krate<'a, 'tcx, V, F>(tcx: TyCtxt<'a, 'tcx, 'tcx>\n     let mut tracking_visitor = TrackingVisitor {\n         tcx: tcx,\n         dep_node_fn: &mut dep_node_fn,\n-        visitor: visitor\n+        visitor: visitor,\n     };\n     krate.visit_all_item_likes(&mut tracking_visitor)\n }\n \n pub fn visit_all_bodies_in_krate<'a, 'tcx, C>(tcx: TyCtxt<'a, 'tcx, 'tcx>, callback: C)\n-    where C: Fn(/* body_owner */ DefId, /* body id */ hir::BodyId),\n+    where C: Fn(/* body_owner */\n+                DefId,\n+                /* body id */\n+                hir::BodyId)\n {\n     let krate = tcx.hir.krate();\n     for &body_id in &krate.body_ids {"}, {"sha": "708a74c791af7b1d1f642f4a1ade6bc4b9784f0c", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cfca6fccb9304cbc943c5be117d1ac1afceb0545/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfca6fccb9304cbc943c5be117d1ac1afceb0545/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=cfca6fccb9304cbc943c5be117d1ac1afceb0545", "patch": "@@ -113,13 +113,19 @@ impl<'a, S: Into<MultiSpan>> IntoEarlyLint for (S, &'a str) {\n         let (span, msg) = self;\n         let mut diagnostic = Diagnostic::new(errors::Level::Warning, msg);\n         diagnostic.set_span(span);\n-        EarlyLint { id: id, diagnostic: diagnostic }\n+        EarlyLint {\n+            id: id,\n+            diagnostic: diagnostic,\n+        }\n     }\n }\n \n impl IntoEarlyLint for Diagnostic {\n     fn into_early_lint(self, id: LintId) -> EarlyLint {\n-        EarlyLint { id: id, diagnostic: self }\n+        EarlyLint {\n+            id: id,\n+            diagnostic: self,\n+        }\n     }\n }\n \n@@ -146,7 +152,7 @@ enum TargetLint {\n \n enum FindLintError {\n     NotFound,\n-    Removed\n+    Removed,\n }\n \n impl LintStore {\n@@ -1127,7 +1133,7 @@ enum CheckLintNameResult {\n     NoLint,\n     // The lint is either renamed or removed. This is the warning\n     // message.\n-    Warning(String)\n+    Warning(String),\n }\n \n /// Checks the name of a lint for its existence, and whether it was"}, {"sha": "215539de6766efe2ba8f42b37f55bffdd95a270b", "filename": "src/librustc/session/code_stats.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cfca6fccb9304cbc943c5be117d1ac1afceb0545/src%2Flibrustc%2Fsession%2Fcode_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfca6fccb9304cbc943c5be117d1ac1afceb0545/src%2Flibrustc%2Fsession%2Fcode_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fcode_stats.rs?ref=cfca6fccb9304cbc943c5be117d1ac1afceb0545", "patch": "@@ -25,7 +25,10 @@ pub struct VariantInfo {\n }\n \n #[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]\n-pub enum SizeKind { Exact, Min }\n+pub enum SizeKind {\n+    Exact,\n+    Min,\n+}\n \n #[derive(Clone, PartialEq, Eq, Hash, Debug)]\n pub struct FieldInfo {"}, {"sha": "2c99ee21b0f730b401d91ed4994b34bc111a8816", "filename": "src/librustc/traits/specialize/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cfca6fccb9304cbc943c5be117d1ac1afceb0545/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfca6fccb9304cbc943c5be117d1ac1afceb0545/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs?ref=cfca6fccb9304cbc943c5be117d1ac1afceb0545", "patch": "@@ -37,7 +37,7 @@ pub mod specialization_graph;\n pub struct OverlapError {\n     pub with_impl: DefId,\n     pub trait_desc: String,\n-    pub self_desc: Option<String>\n+    pub self_desc: Option<String>,\n }\n \n /// Given a subst for the requested impl, translate it to a subst\n@@ -274,7 +274,7 @@ fn fulfill_implication<'a, 'gcx, 'tcx>(infcx: &InferCtxt<'a, 'gcx, 'tcx>,\n }\n \n pub struct SpecializesCache {\n-    map: FxHashMap<(DefId, DefId), bool>\n+    map: FxHashMap<(DefId, DefId), bool>,\n }\n \n impl SpecializesCache {"}, {"sha": "5a696446b4bb6ea349abf18165ba1b0b269d557e", "filename": "src/librustc/ty/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfca6fccb9304cbc943c5be117d1ac1afceb0545/src%2Flibrustc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfca6fccb9304cbc943c5be117d1ac1afceb0545/src%2Flibrustc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ferror.rs?ref=cfca6fccb9304cbc943c5be117d1ac1afceb0545", "patch": "@@ -23,7 +23,7 @@ use hir;\n #[derive(Clone, Copy, Debug)]\n pub struct ExpectedFound<T> {\n     pub expected: T,\n-    pub found: T\n+    pub found: T,\n }\n \n // Data structures used in type unification"}, {"sha": "874e032bc46445490ffd30dd05b2fdf78e99dd42", "filename": "src/librustc/ty/item_path.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cfca6fccb9304cbc943c5be117d1ac1afceb0545/src%2Flibrustc%2Fty%2Fitem_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfca6fccb9304cbc943c5be117d1ac1afceb0545/src%2Flibrustc%2Fty%2Fitem_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fitem_path.rs?ref=cfca6fccb9304cbc943c5be117d1ac1afceb0545", "patch": "@@ -374,14 +374,13 @@ impl LocalPathBuffer {\n     fn new(root_mode: RootMode) -> LocalPathBuffer {\n         LocalPathBuffer {\n             root_mode: root_mode,\n-            str: String::new()\n+            str: String::new(),\n         }\n     }\n \n     fn into_string(self) -> String {\n         self.str\n     }\n-\n }\n \n impl ItemPathBuffer for LocalPathBuffer {"}, {"sha": "af05c0c43113b3e34a6601c6c6e7fdea494ea6eb", "filename": "src/librustc/ty/maps.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfca6fccb9304cbc943c5be117d1ac1afceb0545/src%2Flibrustc%2Fty%2Fmaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfca6fccb9304cbc943c5be117d1ac1afceb0545/src%2Flibrustc%2Fty%2Fmaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps.rs?ref=cfca6fccb9304cbc943c5be117d1ac1afceb0545", "patch": "@@ -85,7 +85,7 @@ impl<'tcx> Value<'tcx> for Ty<'tcx> {\n \n pub struct CycleError<'a> {\n     span: Span,\n-    cycle: RefMut<'a, [(Span, Query)]>\n+    cycle: RefMut<'a, [(Span, Query)]>,\n }\n \n impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {"}, {"sha": "0e3005847bc2ce5a3a6457f49cc7472ba3cbf9d7", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 31, "deletions": 31, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/cfca6fccb9304cbc943c5be117d1ac1afceb0545/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfca6fccb9304cbc943c5be117d1ac1afceb0545/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=cfca6fccb9304cbc943c5be117d1ac1afceb0545", "patch": "@@ -45,7 +45,7 @@ pub struct TypeAndMut<'tcx> {\n /// at least as big as the scope `fr.scope`\".\n pub struct FreeRegion {\n     pub scope: region::CodeExtent,\n-    pub bound_region: BoundRegion\n+    pub bound_region: BoundRegion,\n }\n \n #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash,\n@@ -65,7 +65,7 @@ pub enum BoundRegion {\n \n     // Anonymous region for the implicit env pointer parameter\n     // to a closure\n-    BrEnv\n+    BrEnv,\n }\n \n /// When a region changed from late-bound to early-bound when #32330\n@@ -320,7 +320,7 @@ impl<'tcx> Slice<ExistentialPredicate<'tcx>> {\n     pub fn principal(&self) -> Option<ExistentialTraitRef<'tcx>> {\n         match self.get(0) {\n             Some(&ExistentialPredicate::Trait(tr)) => Some(tr),\n-            _ => None\n+            _ => None,\n         }\n     }\n \n@@ -520,13 +520,13 @@ impl<T> Binder<T> {\n         ty::Binder(&self.0)\n     }\n \n-    pub fn map_bound_ref<F,U>(&self, f: F) -> Binder<U>\n+    pub fn map_bound_ref<F, U>(&self, f: F) -> Binder<U>\n         where F: FnOnce(&T) -> U\n     {\n         self.as_ref().map_bound(f)\n     }\n \n-    pub fn map_bound<F,U>(self, f: F) -> Binder<U>\n+    pub fn map_bound<F, U>(self, f: F) -> Binder<U>\n         where F: FnOnce(T) -> U\n     {\n         ty::Binder(f(self.0))\n@@ -790,22 +790,22 @@ pub struct TyVid {\n \n #[derive(Clone, Copy, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n pub struct IntVid {\n-    pub index: u32\n+    pub index: u32,\n }\n \n #[derive(Clone, Copy, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n pub struct FloatVid {\n-    pub index: u32\n+    pub index: u32,\n }\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Copy)]\n pub struct RegionVid {\n-    pub index: u32\n+    pub index: u32,\n }\n \n #[derive(Clone, Copy, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n pub struct SkolemizedRegionVid {\n-    pub index: u32\n+    pub index: u32,\n }\n \n #[derive(Clone, Copy, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n@@ -819,15 +819,15 @@ pub enum InferTy {\n     /// `infer::freshen` for more details.\n     FreshTy(u32),\n     FreshIntTy(u32),\n-    FreshFloatTy(u32)\n+    FreshFloatTy(u32),\n }\n \n /// A `ProjectionPredicate` for an `ExistentialTraitRef`.\n #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, RustcEncodable, RustcDecodable)]\n pub struct ExistentialProjection<'tcx> {\n     pub trait_ref: ExistentialTraitRef<'tcx>,\n     pub item_name: Name,\n-    pub ty: Ty<'tcx>\n+    pub ty: Ty<'tcx>,\n }\n \n pub type PolyExistentialProjection<'tcx> = Binder<ExistentialProjection<'tcx>>;\n@@ -860,9 +860,9 @@ impl<'a, 'tcx, 'gcx> ExistentialProjection<'tcx> {\n         ty::ProjectionPredicate {\n             projection_ty: ty::ProjectionTy {\n                 trait_ref: self.trait_ref.with_self_ty(tcx, self_ty),\n-                item_name: self.item_name\n+                item_name: self.item_name,\n             },\n-            ty: self.ty\n+            ty: self.ty,\n         }\n     }\n }\n@@ -899,7 +899,7 @@ impl Region {\n         match *self {\n             ty::ReEarlyBound(..) => true,\n             ty::ReLateBound(..) => true,\n-            _ => false\n+            _ => false,\n         }\n     }\n \n@@ -969,7 +969,7 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n     pub fn is_nil(&self) -> bool {\n         match self.sty {\n             TyTuple(ref tys, _) => tys.is_empty(),\n-            _ => false\n+            _ => false,\n         }\n     }\n \n@@ -1047,7 +1047,7 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n     pub fn is_ty_var(&self) -> bool {\n         match self.sty {\n             TyInfer(TyVar(_)) => true,\n-            _ => false\n+            _ => false,\n         }\n     }\n \n@@ -1071,7 +1071,7 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n     pub fn is_self(&self) -> bool {\n         match self.sty {\n             TyParam(ref p) => p.is_self(),\n-            _ => false\n+            _ => false,\n         }\n     }\n \n@@ -1088,15 +1088,15 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n     pub fn is_structural(&self) -> bool {\n         match self.sty {\n             TyAdt(..) | TyTuple(..) | TyArray(..) | TyClosure(..) => true,\n-            _ => self.is_slice() | self.is_trait()\n+            _ => self.is_slice() | self.is_trait(),\n         }\n     }\n \n     #[inline]\n     pub fn is_simd(&self) -> bool {\n         match self.sty {\n             TyAdt(def, _) => def.repr.simd,\n-            _ => false\n+            _ => false,\n         }\n     }\n \n@@ -1127,7 +1127,7 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n     pub fn is_region_ptr(&self) -> bool {\n         match self.sty {\n             TyRef(..) => true,\n-            _ => false\n+            _ => false,\n         }\n     }\n \n@@ -1145,7 +1145,7 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n     pub fn is_unsafe_ptr(&self) -> bool {\n         match self.sty {\n             TyRawPtr(_) => return true,\n-            _ => return false\n+            _ => return false,\n         }\n     }\n \n@@ -1189,7 +1189,7 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n     pub fn is_trait(&self) -> bool {\n         match self.sty {\n             TyDynamic(..) => true,\n-            _ => false\n+            _ => false,\n         }\n     }\n \n@@ -1205,7 +1205,7 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n             TyInfer(FreshTy(_)) => true,\n             TyInfer(FreshIntTy(_)) => true,\n             TyInfer(FreshFloatTy(_)) => true,\n-            _ => false\n+            _ => false,\n         }\n     }\n \n@@ -1219,7 +1219,7 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n     pub fn is_char(&self) -> bool {\n         match self.sty {\n             TyChar => true,\n-            _ => false\n+            _ => false,\n         }\n     }\n \n@@ -1237,15 +1237,15 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n     pub fn is_signed(&self) -> bool {\n         match self.sty {\n             TyInt(_) => true,\n-            _ => false\n+            _ => false,\n         }\n     }\n \n     pub fn is_machine(&self) -> bool {\n         match self.sty {\n             TyInt(ast::IntTy::Is) | TyUint(ast::UintTy::Us) => false,\n             TyInt(..) | TyUint(..) | TyFloat(..) => true,\n-            _ => false\n+            _ => false,\n         }\n     }\n \n@@ -1276,15 +1276,15 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n             },\n             TyRef(_, mt) => Some(mt),\n             TyRawPtr(mt) if explicit => Some(mt),\n-            _ => None\n+            _ => None,\n         }\n     }\n \n     // Returns the type of ty[i]\n     pub fn builtin_index(&self) -> Option<Ty<'tcx>> {\n         match self.sty {\n             TyArray(ty, _) | TySlice(ty) => Some(ty),\n-            _ => None\n+            _ => None,\n         }\n     }\n \n@@ -1307,7 +1307,7 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n     pub fn is_fn(&self) -> bool {\n         match self.sty {\n             TyFnDef(..) | TyFnPtr(_) => true,\n-            _ => false\n+            _ => false,\n         }\n     }\n \n@@ -1316,14 +1316,14 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n             TyDynamic(ref tt, ..) => tt.principal().map(|p| p.def_id()),\n             TyAdt(def, _) => Some(def.did),\n             TyClosure(id, _) => Some(id),\n-            _ => None\n+            _ => None,\n         }\n     }\n \n     pub fn ty_adt_def(&self) -> Option<&'tcx AdtDef> {\n         match self.sty {\n             TyAdt(adt, _) => Some(adt),\n-            _ => None\n+            _ => None,\n         }\n     }\n "}, {"sha": "fd95724990941337035ec75a3614b20479051044", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 14, "deletions": 16, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/cfca6fccb9304cbc943c5be117d1ac1afceb0545/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfca6fccb9304cbc943c5be117d1ac1afceb0545/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=cfca6fccb9304cbc943c5be117d1ac1afceb0545", "patch": "@@ -16,7 +16,7 @@ use infer::InferCtxt;\n use hir::map as hir_map;\n use traits::{self, Reveal};\n use ty::{self, Ty, TyCtxt, TypeAndMut, TypeFlags, TypeFoldable};\n-use ty::{ParameterEnvironment};\n+use ty::ParameterEnvironment;\n use ty::fold::TypeVisitor;\n use ty::layout::{Layout, LayoutError};\n use ty::TypeVariants::*;\n@@ -39,13 +39,13 @@ use hir;\n \n type Disr = ConstInt;\n \n- pub trait IntTypeExt {\n+pub trait IntTypeExt {\n     fn to_ty<'a, 'gcx, 'tcx>(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> Ty<'tcx>;\n     fn disr_incr<'a, 'tcx>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, val: Option<Disr>)\n                            -> Option<Disr>;\n     fn assert_ty_matches(&self, val: Disr);\n     fn initial_discriminant<'a, 'tcx>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>) -> Disr;\n- }\n+}\n \n \n macro_rules! typed_literal {\n@@ -133,7 +133,7 @@ impl IntTypeExt for attr::IntType {\n pub enum CopyImplementationError<'tcx> {\n     InfrigingField(&'tcx ty::FieldDef),\n     NotAnAdt,\n-    HasDestructor\n+    HasDestructor,\n }\n \n /// Describes whether a type is representable. For types that are not\n@@ -159,14 +159,14 @@ impl<'tcx> ParameterEnvironment<'tcx> {\n         tcx.infer_ctxt(self.clone(), Reveal::UserFacing).enter(|infcx| {\n             let (adt, substs) = match self_type.sty {\n                 ty::TyAdt(adt, substs) => (adt, substs),\n-                _ => return Err(CopyImplementationError::NotAnAdt)\n+                _ => return Err(CopyImplementationError::NotAnAdt),\n             };\n \n             let field_implements_copy = |field: &ty::FieldDef| {\n                 let cause = traits::ObligationCause::dummy();\n                 match traits::fully_normalize(&infcx, cause, &field.ty(tcx, substs)) {\n                     Ok(ty) => !infcx.type_moves_by_default(ty, span),\n-                    Err(..) => false\n+                    Err(..) => false,\n                 }\n             };\n \n@@ -198,7 +198,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                     }\n                 }\n             }\n-            _ => ()\n+            _ => (),\n         }\n         false\n     }\n@@ -218,7 +218,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                 adt.variants[0].fields.get(i).map(|f| f.ty(self, substs))\n             }\n             (&TyTuple(ref v, _), None) => v.get(i).cloned(),\n-            _ => None\n+            _ => None,\n         }\n     }\n \n@@ -245,11 +245,11 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     pub fn struct_tail(self, mut ty: Ty<'tcx>) -> Ty<'tcx> {\n         while let TyAdt(def, substs) = ty.sty {\n             if !def.is_struct() {\n-                break\n+                break;\n             }\n             match def.struct_variant().fields.last() {\n                 Some(f) => ty = f.ty(self, substs),\n-                None => break\n+                None => break,\n             }\n         }\n         ty\n@@ -267,14 +267,14 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         let (mut a, mut b) = (source, target);\n         while let (&TyAdt(a_def, a_substs), &TyAdt(b_def, b_substs)) = (&a.sty, &b.sty) {\n             if a_def != b_def || !a_def.is_struct() {\n-                break\n+                break;\n             }\n             match a_def.struct_variant().fields.last() {\n                 Some(f) => {\n                     a = f.ty(self, a_substs);\n                     b = f.ty(self, b_substs);\n                 }\n-                _ => break\n+                _ => break,\n             }\n         }\n         (a, b)\n@@ -373,7 +373,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n \n         let dtor_did = match dtor_did {\n             Some(dtor) => dtor,\n-            None => return None\n+            None => return None,\n         };\n \n         // RFC 1238: if the destructor method is tagged with the\n@@ -725,9 +725,7 @@ impl<'a, 'tcx> ty::TyS<'tcx> {\n \n                     substs_a.types().zip(substs_b.types()).all(|(a, b)| same_type(a, b))\n                 }\n-                _ => {\n-                    a == b\n-                }\n+                _ => a == b,\n             }\n         }\n "}, {"sha": "7b5e2253109aa01c1d49d0fdc8152ed8cc618aab", "filename": "src/librustc/util/common.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cfca6fccb9304cbc943c5be117d1ac1afceb0545/src%2Flibrustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfca6fccb9304cbc943c5be117d1ac1afceb0545/src%2Flibrustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fcommon.rs?ref=cfca6fccb9304cbc943c5be117d1ac1afceb0545", "patch": "@@ -94,7 +94,7 @@ pub fn to_readable_str(mut val: usize) -> String {\n \n         if val == 0 {\n             groups.push(format!(\"{}\", group));\n-            break\n+            break;\n         } else {\n             groups.push(format!(\"{:03}\", group));\n         }\n@@ -142,7 +142,8 @@ fn get_resident() -> Option<usize> {\n     type HANDLE = *mut u8;\n     use libc::size_t;\n     use std::mem;\n-    #[repr(C)] #[allow(non_snake_case)]\n+    #[repr(C)]\n+    #[allow(non_snake_case)]\n     struct PROCESS_MEMORY_COUNTERS {\n         cb: DWORD,\n         PageFaultCount: DWORD,\n@@ -184,7 +185,7 @@ pub fn indent<R, F>(op: F) -> R where\n }\n \n pub struct Indenter {\n-    _cannot_construct_outside_of_this_module: ()\n+    _cannot_construct_outside_of_this_module: (),\n }\n \n impl Drop for Indenter {"}, {"sha": "da6a202e5afb2965a0dc3990c9a60e0001bb7382", "filename": "src/librustc/util/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfca6fccb9304cbc943c5be117d1ac1afceb0545/src%2Flibrustc%2Futil%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfca6fccb9304cbc943c5be117d1ac1afceb0545/src%2Flibrustc%2Futil%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Ffs.rs?ref=cfca6fccb9304cbc943c5be117d1ac1afceb0545", "patch": "@@ -116,7 +116,7 @@ pub fn create_dir_racy(path: &Path) -> io::Result<()> {\n     match fs::create_dir(path) {\n         Ok(()) => return Ok(()),\n         Err(ref e) if e.kind() == io::ErrorKind::AlreadyExists => return Ok(()),\n-        Err(ref e) if e.kind() == io::ErrorKind::NotFound => {}\n+        Err(ref e) if e.kind() == io::ErrorKind::NotFound => (),\n         Err(e) => return Err(e),\n     }\n     match path.parent() {"}]}