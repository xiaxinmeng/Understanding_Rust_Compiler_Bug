{"sha": "33f12a3608c5ffede3ae51ca6883f5502ffcc8c6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzZjEyYTM2MDhjNWZmZWRlM2FlNTFjYTY4ODNmNTUwMmZmY2M4YzY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-07-30T16:27:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-30T16:27:10Z"}, "message": "Merge #9732\n\n9732: feat: gate custom clint-side commands behind capabilities r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "a771f6f838bba971d0aeb008c68268ff9fde614c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a771f6f838bba971d0aeb008c68268ff9fde614c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/33f12a3608c5ffede3ae51ca6883f5502ffcc8c6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhBCheCRBK7hj4Ov3rIwAAVHcIACbSwmnxoc16R6GWDbB0bKr7\ntfbr9zfeIEKYBsNyoukjvkjnFWjVflh/mDsblpvsotlFXaGudkHcuxIB8xjj3+2K\nErMgbQNoXnURezyMohfykri/jivvji6ToYcIXhs8riH9BtbAdpZfZjxDAAtm30Cb\nOTLGlnDhzicrqdz7jN1A2wCMr3FdU3HCKpaS1vGhQ5BDtBZ+ldRzvHu0Xuym3mLq\nojaO8srk+NTQarkVTIcGYInK7GZOvt/X78SkdIdJOwNBaHAG5NrK6k1yfyqwdFc9\nU2iOFObZq6b3LdiOhqAaNk/NPUWFue6ejb0LpMZmj8UNagjhfz88RR+AjPkP+aY=\n=I1/2\n-----END PGP SIGNATURE-----\n", "payload": "tree a771f6f838bba971d0aeb008c68268ff9fde614c\nparent 1f817833e7fbf29d8305b0b938b516d96e555ace\nparent be84f85c1dab75c053e94712bc1028b548206c2f\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1627662430 +0000\ncommitter GitHub <noreply@github.com> 1627662430 +0000\n\nMerge #9732\n\n9732: feat: gate custom clint-side commands behind capabilities r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/33f12a3608c5ffede3ae51ca6883f5502ffcc8c6", "html_url": "https://github.com/rust-lang/rust/commit/33f12a3608c5ffede3ae51ca6883f5502ffcc8c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/33f12a3608c5ffede3ae51ca6883f5502ffcc8c6/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f817833e7fbf29d8305b0b938b516d96e555ace", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f817833e7fbf29d8305b0b938b516d96e555ace", "html_url": "https://github.com/rust-lang/rust/commit/1f817833e7fbf29d8305b0b938b516d96e555ace"}, {"sha": "be84f85c1dab75c053e94712bc1028b548206c2f", "url": "https://api.github.com/repos/rust-lang/rust/commits/be84f85c1dab75c053e94712bc1028b548206c2f", "html_url": "https://github.com/rust-lang/rust/commit/be84f85c1dab75c053e94712bc1028b548206c2f"}], "stats": {"total": 251, "additions": 127, "deletions": 124}, "files": [{"sha": "e71513034c5ca9a50e44a08ee41c0e20f6b106a8", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 34, "deletions": 2, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/33f12a3608c5ffede3ae51ca6883f5502ffcc8c6/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33f12a3608c5ffede3ae51ca6883f5502ffcc8c6/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=33f12a3608c5ffede3ae51ca6883f5502ffcc8c6", "patch": "@@ -25,9 +25,12 @@ use serde::{de::DeserializeOwned, Deserialize};\n use vfs::AbsPathBuf;\n \n use crate::{\n-    caps::completion_item_edit_resolve, diagnostics::DiagnosticsMapConfig,\n-    line_index::OffsetEncoding, lsp_ext::supports_utf8, lsp_ext::WorkspaceSymbolSearchKind,\n+    caps::completion_item_edit_resolve,\n+    diagnostics::DiagnosticsMapConfig,\n+    line_index::OffsetEncoding,\n+    lsp_ext::supports_utf8,\n     lsp_ext::WorkspaceSymbolSearchScope,\n+    lsp_ext::{self, WorkspaceSymbolSearchKind},\n };\n \n // Defines the server-side configuration of the rust-analyzer. We generate\n@@ -221,6 +224,9 @@ config_data! {\n         /// Whether to show `References` lens. Only applies when\n         /// `#rust-analyzer.lens.enable#` is set.\n         lens_references: bool = \"false\",\n+        /// Internal config: use custom client-side commands even when the\n+        /// client doesn't set the corresponding capability.\n+        lens_forceCustomCommands: bool = \"true\",\n \n         /// Disable project auto-discovery in favor of explicitly specified set\n         /// of projects.\n@@ -405,6 +411,14 @@ pub struct WorkspaceSymbolConfig {\n     pub search_kind: WorkspaceSymbolSearchKind,\n }\n \n+pub struct ClientCommandsConfig {\n+    pub run_single: bool,\n+    pub debug_single: bool,\n+    pub show_reference: bool,\n+    pub goto_location: bool,\n+    pub trigger_parameter_hints: bool,\n+}\n+\n impl Config {\n     pub fn new(root_path: AbsPathBuf, caps: ClientCapabilities) -> Self {\n         Config {\n@@ -858,6 +872,24 @@ impl Config {\n             false\n         )\n     }\n+    pub fn client_commands(&self) -> ClientCommandsConfig {\n+        let commands =\n+            try_or!(self.caps.experimental.as_ref()?.get(\"commands\")?, &serde_json::Value::Null);\n+        let commands: Option<lsp_ext::ClientCommandOptions> =\n+            serde_json::from_value(commands.clone()).ok();\n+        let force = commands.is_none() && self.data.lens_forceCustomCommands;\n+        let commands = commands.map(|it| it.commands).unwrap_or_default();\n+\n+        let get = |name: &str| commands.iter().any(|it| it == name) || force;\n+\n+        ClientCommandsConfig {\n+            run_single: get(\"rust-analyzer.runSingle\"),\n+            debug_single: get(\"rust-analyzer.debugSingle\"),\n+            show_reference: get(\"rust-analyzer.showReferences\"),\n+            goto_location: get(\"rust-analyzer.gotoLocation\"),\n+            trigger_parameter_hints: get(\"editor.action.triggerParameterHints\"),\n+        }\n+    }\n \n     pub fn highlight_related(&self) -> HighlightRelatedConfig {\n         HighlightRelatedConfig {"}, {"sha": "c9a25e086a8691c37e3a9f6b5df419ea9ba7de6f", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 31, "deletions": 24, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/33f12a3608c5ffede3ae51ca6883f5502ffcc8c6/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33f12a3608c5ffede3ae51ca6883f5502ffcc8c6/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=33f12a3608c5ffede3ae51ca6883f5502ffcc8c6", "patch": "@@ -768,13 +768,8 @@ pub(crate) fn handle_completion(\n     };\n     let line_index = snap.file_line_index(position.file_id)?;\n \n-    let items = to_proto::completion_items(\n-        snap.config.insert_replace_support(),\n-        completion_config.enable_imports_on_the_fly,\n-        &line_index,\n-        text_document_position,\n-        items,\n-    );\n+    let items =\n+        to_proto::completion_items(&snap.config, &line_index, text_document_position, items);\n \n     let completion_list = lsp_types::CompletionList { is_incomplete: true, items };\n     Ok(Some(completion_list.into()))\n@@ -1503,7 +1498,7 @@ fn show_impl_command_link(\n     snap: &GlobalStateSnapshot,\n     position: &FilePosition,\n ) -> Option<lsp_ext::CommandLinkGroup> {\n-    if snap.config.hover_actions().implementations {\n+    if snap.config.hover_actions().implementations && snap.config.client_commands().show_reference {\n         if let Some(nav_data) = snap.analysis.goto_implementation(*position).unwrap_or(None) {\n             let uri = to_proto::url(snap, position.file_id);\n             let line_index = snap.file_line_index(position.file_id).ok()?;\n@@ -1529,7 +1524,7 @@ fn show_ref_command_link(\n     snap: &GlobalStateSnapshot,\n     position: &FilePosition,\n ) -> Option<lsp_ext::CommandLinkGroup> {\n-    if snap.config.hover_actions().references {\n+    if snap.config.hover_actions().references && snap.config.client_commands().show_reference {\n         if let Some(ref_search_res) = snap.analysis.find_all_refs(*position, None).unwrap_or(None) {\n             let uri = to_proto::url(snap, position.file_id);\n             let line_index = snap.file_line_index(position.file_id).ok()?;\n@@ -1559,35 +1554,47 @@ fn runnable_action_links(\n     snap: &GlobalStateSnapshot,\n     runnable: Runnable,\n ) -> Option<lsp_ext::CommandLinkGroup> {\n-    let cargo_spec = CargoTargetSpec::for_file(snap, runnable.nav.file_id).ok()?;\n     let hover_actions_config = snap.config.hover_actions();\n-    if !hover_actions_config.runnable() || should_skip_target(&runnable, cargo_spec.as_ref()) {\n+    if !hover_actions_config.runnable() {\n+        return None;\n+    }\n+\n+    let cargo_spec = CargoTargetSpec::for_file(snap, runnable.nav.file_id).ok()?;\n+    if should_skip_target(&runnable, cargo_spec.as_ref()) {\n+        return None;\n+    }\n+\n+    let client_commands_config = snap.config.client_commands();\n+    if !(client_commands_config.run_single || client_commands_config.debug_single) {\n         return None;\n     }\n \n     let title = runnable.title();\n-    to_proto::runnable(snap, runnable).ok().map(|r| {\n-        let mut group = lsp_ext::CommandLinkGroup::default();\n+    let r = to_proto::runnable(snap, runnable).ok()?;\n \n-        if hover_actions_config.run {\n-            let run_command = to_proto::command::run_single(&r, &title);\n-            group.commands.push(to_command_link(run_command, r.label.clone()));\n-        }\n+    let mut group = lsp_ext::CommandLinkGroup::default();\n \n-        if hover_actions_config.debug {\n-            let dbg_command = to_proto::command::debug_single(&r);\n-            group.commands.push(to_command_link(dbg_command, r.label));\n-        }\n+    if hover_actions_config.run && client_commands_config.run_single {\n+        let run_command = to_proto::command::run_single(&r, &title);\n+        group.commands.push(to_command_link(run_command, r.label.clone()));\n+    }\n \n-        group\n-    })\n+    if hover_actions_config.debug && client_commands_config.debug_single {\n+        let dbg_command = to_proto::command::debug_single(&r);\n+        group.commands.push(to_command_link(dbg_command, r.label));\n+    }\n+\n+    Some(group)\n }\n \n fn goto_type_action_links(\n     snap: &GlobalStateSnapshot,\n     nav_targets: &[HoverGotoTypeData],\n ) -> Option<lsp_ext::CommandLinkGroup> {\n-    if !snap.config.hover_actions().goto_type_def || nav_targets.is_empty() {\n+    if !snap.config.hover_actions().goto_type_def\n+        || nav_targets.is_empty()\n+        || !snap.config.client_commands().goto_location\n+    {\n         return None;\n     }\n "}, {"sha": "521691d5ec9e322673e1f21b42debcf207badb9c", "filename": "crates/rust-analyzer/src/lsp_ext.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/33f12a3608c5ffede3ae51ca6883f5502ffcc8c6/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33f12a3608c5ffede3ae51ca6883f5502ffcc8c6/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs?ref=33f12a3608c5ffede3ae51ca6883f5502ffcc8c6", "patch": "@@ -523,3 +523,8 @@ pub struct CompletionResolveData {\n     pub full_import_path: String,\n     pub imported_name: String,\n }\n+\n+#[derive(Debug, Deserialize, Default)]\n+pub struct ClientCommandOptions {\n+    pub commands: Vec<String>,\n+}"}, {"sha": "906259b098e27e4d80a603f1b48c2f1a4a432916", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 16, "deletions": 97, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/33f12a3608c5ffede3ae51ca6883f5502ffcc8c6/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33f12a3608c5ffede3ae51ca6883f5502ffcc8c6/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=33f12a3608c5ffede3ae51ca6883f5502ffcc8c6", "patch": "@@ -18,6 +18,7 @@ use vfs::AbsPath;\n \n use crate::{\n     cargo_target_spec::CargoTargetSpec,\n+    config::Config,\n     global_state::GlobalStateSnapshot,\n     line_index::{LineEndings, LineIndex, OffsetEncoding},\n     lsp_ext, semantic_tokens, Result,\n@@ -190,32 +191,22 @@ pub(crate) fn snippet_text_edit_vec(\n }\n \n pub(crate) fn completion_items(\n-    insert_replace_support: bool,\n-    enable_imports_on_the_fly: bool,\n+    config: &Config,\n     line_index: &LineIndex,\n     tdpp: lsp_types::TextDocumentPositionParams,\n     items: Vec<CompletionItem>,\n ) -> Vec<lsp_types::CompletionItem> {\n     let max_relevance = items.iter().map(|it| it.relevance().score()).max().unwrap_or_default();\n     let mut res = Vec::with_capacity(items.len());\n     for item in items {\n-        completion_item(\n-            &mut res,\n-            insert_replace_support,\n-            enable_imports_on_the_fly,\n-            line_index,\n-            &tdpp,\n-            max_relevance,\n-            item,\n-        )\n+        completion_item(&mut res, config, line_index, &tdpp, max_relevance, item)\n     }\n     res\n }\n \n fn completion_item(\n     acc: &mut Vec<lsp_types::CompletionItem>,\n-    insert_replace_support: bool,\n-    enable_imports_on_the_fly: bool,\n+    config: &Config,\n     line_index: &LineIndex,\n     tdpp: &lsp_types::TextDocumentPositionParams,\n     max_relevance: u32,\n@@ -230,7 +221,7 @@ fn completion_item(\n         let source_range = item.source_range();\n         for indel in item.text_edit().iter() {\n             if indel.delete.contains_range(source_range) {\n-                let insert_replace_support = insert_replace_support.then(|| tdpp.position);\n+                let insert_replace_support = config.insert_replace_support().then(|| tdpp.position);\n                 text_edit = Some(if indel.delete == source_range {\n                     self::completion_text_edit(line_index, insert_replace_support, indel.clone())\n                 } else {\n@@ -269,14 +260,14 @@ fn completion_item(\n         lsp_item.tags = Some(vec![lsp_types::CompletionItemTag::Deprecated])\n     }\n \n-    if item.trigger_call_info() {\n+    if item.trigger_call_info() && config.client_commands().trigger_parameter_hints {\n         lsp_item.command = Some(command::trigger_parameter_hints());\n     }\n \n     if item.is_snippet() {\n         lsp_item.insert_text_format = Some(lsp_types::InsertTextFormat::Snippet);\n     }\n-    if enable_imports_on_the_fly {\n+    if config.completion().enable_imports_on_the_fly {\n         if let Some(import_edit) = item.import_to_add() {\n             let import_path = &import_edit.import.import_path;\n             if let Some(import_name) = import_path.segments().last() {\n@@ -992,6 +983,7 @@ pub(crate) fn code_lens(\n     snap: &GlobalStateSnapshot,\n     annotation: Annotation,\n ) -> Result<()> {\n+    let client_commands_config = snap.config.client_commands();\n     match annotation.kind {\n         AnnotationKind::Runnable(run) => {\n             let line_index = snap.file_line_index(run.nav.file_id)?;\n@@ -1008,15 +1000,15 @@ pub(crate) fn code_lens(\n             let r = runnable(snap, run)?;\n \n             let lens_config = snap.config.lens();\n-            if lens_config.run {\n+            if lens_config.run && client_commands_config.run_single {\n                 let command = command::run_single(&r, &title);\n                 acc.push(lsp_types::CodeLens {\n                     range: annotation_range,\n                     command: Some(command),\n                     data: None,\n                 })\n             }\n-            if lens_config.debug && can_debug {\n+            if lens_config.debug && can_debug && client_commands_config.debug_single {\n                 let command = command::debug_single(&r);\n                 acc.push(lsp_types::CodeLens {\n                     range: annotation_range,\n@@ -1026,6 +1018,9 @@ pub(crate) fn code_lens(\n             }\n         }\n         AnnotationKind::HasImpls { position: file_position, data } => {\n+            if !client_commands_config.show_reference {\n+                return Ok(());\n+            }\n             let line_index = snap.file_line_index(file_position.file_id)?;\n             let annotation_range = range(&line_index, annotation.range);\n             let url = url(snap, file_position.file_id);\n@@ -1069,6 +1064,9 @@ pub(crate) fn code_lens(\n             })\n         }\n         AnnotationKind::HasReferences { position: file_position, data } => {\n+            if !client_commands_config.show_reference {\n+                return Ok(());\n+            }\n             let line_index = snap.file_line_index(file_position.file_id)?;\n             let annotation_range = range(&line_index, annotation.range);\n             let url = url(snap, file_position.file_id);\n@@ -1207,88 +1205,9 @@ mod tests {\n     use std::sync::Arc;\n \n     use ide::Analysis;\n-    use ide_db::helpers::{\n-        insert_use::{ImportGranularity, InsertUseConfig, PrefixKind},\n-        SnippetCap,\n-    };\n \n     use super::*;\n \n-    #[test]\n-    fn test_completion_with_ref() {\n-        let fixture = r#\"\n-        struct Foo;\n-        fn foo(arg: &Foo) {}\n-        fn main() {\n-            let arg = Foo;\n-            foo($0)\n-        }\"#;\n-\n-        let (offset, text) = test_utils::extract_offset(fixture);\n-        let line_index = LineIndex {\n-            index: Arc::new(ide::LineIndex::new(&text)),\n-            endings: LineEndings::Unix,\n-            encoding: OffsetEncoding::Utf16,\n-        };\n-        let (analysis, file_id) = Analysis::from_single_file(text);\n-\n-        let file_position = ide_db::base_db::FilePosition { file_id, offset };\n-        let mut items = analysis\n-            .completions(\n-                &ide::CompletionConfig {\n-                    enable_postfix_completions: true,\n-                    enable_imports_on_the_fly: true,\n-                    enable_self_on_the_fly: true,\n-                    add_call_parenthesis: true,\n-                    add_call_argument_snippets: true,\n-                    snippet_cap: SnippetCap::new(true),\n-                    insert_use: InsertUseConfig {\n-                        granularity: ImportGranularity::Item,\n-                        prefix_kind: PrefixKind::Plain,\n-                        enforce_granularity: true,\n-                        group: true,\n-                        skip_glob_imports: true,\n-                    },\n-                },\n-                file_position,\n-            )\n-            .unwrap()\n-            .unwrap();\n-        items.retain(|c| c.label().ends_with(\"arg\"));\n-        let items = completion_items(\n-            false,\n-            false,\n-            &line_index,\n-            lsp_types::TextDocumentPositionParams {\n-                text_document: lsp_types::TextDocumentIdentifier {\n-                    uri: \"file://main.rs\".parse().unwrap(),\n-                },\n-                position: position(&line_index, file_position.offset),\n-            },\n-            items,\n-        );\n-        let items: Vec<(String, Option<String>)> =\n-            items.into_iter().map(|c| (c.label, c.sort_text)).collect();\n-\n-        expect_test::expect![[r#\"\n-            [\n-                (\n-                    \"&arg\",\n-                    Some(\n-                        \"fffffff9\",\n-                    ),\n-                ),\n-                (\n-                    \"arg\",\n-                    Some(\n-                        \"fffffffd\",\n-                    ),\n-                ),\n-            ]\n-        \"#]]\n-        .assert_debug_eq(&items);\n-    }\n-\n     #[test]\n     fn conv_fold_line_folding_only_fixup() {\n         let text = r#\"mod a;"}, {"sha": "98098b69a986f64ca8173ebcca14e822974084d8", "filename": "docs/dev/lsp-extensions.md", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/33f12a3608c5ffede3ae51ca6883f5502ffcc8c6/docs%2Fdev%2Flsp-extensions.md", "raw_url": "https://github.com/rust-lang/rust/raw/33f12a3608c5ffede3ae51ca6883f5502ffcc8c6/docs%2Fdev%2Flsp-extensions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Flsp-extensions.md?ref=33f12a3608c5ffede3ae51ca6883f5502ffcc8c6", "patch": "@@ -1,5 +1,5 @@\n <!---\n-lsp_ext.rs hash: 5f96a69eb3a5ebc3\n+lsp_ext.rs hash: ad52054176909945\n \n If you need to change the above hash to make the test pass, please check if you\n need to adjust this doc as well and ping this issue:\n@@ -743,3 +743,23 @@ const enum WorkspaceSymbolSearchKind {\n     AllSymbols = \"allSymbols\"\n }\n ```\n+\n+## Client Commands\n+\n+**Experimental Client Capability:** `{ \"commands?\": ClientCommandOptions }`\n+\n+Certain LSP types originating on the server, notably code lenses, embed commands.\n+Commands can be serviced either by the server or by the client.\n+However, the server doesn't know which commands are available on the client.\n+\n+This extensions allows the client to communicate this info.\n+\n+\n+```typescript\n+export interface ClientCommandOptions {\n+\t/**\n+\t * The commands to be executed on the client\n+\t */\n+\tcommands: string[];\n+}\n+```"}, {"sha": "c40b6d69364ef32f5a3580165682b4cc51f59d15", "filename": "docs/user/generated_config.adoc", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/33f12a3608c5ffede3ae51ca6883f5502ffcc8c6/docs%2Fuser%2Fgenerated_config.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/33f12a3608c5ffede3ae51ca6883f5502ffcc8c6/docs%2Fuser%2Fgenerated_config.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fgenerated_config.adoc?ref=33f12a3608c5ffede3ae51ca6883f5502ffcc8c6", "patch": "@@ -353,6 +353,12 @@ Whether to show `Method References` lens. Only applies when\n Whether to show `References` lens. Only applies when\n `#rust-analyzer.lens.enable#` is set.\n --\n+[[rust-analyzer.lens.forceCustomCommands]]rust-analyzer.lens.forceCustomCommands (default: `true`)::\n++\n+--\n+Internal config: use custom client-side commands even when the\n+client doesn't set the corresponding capability.\n+--\n [[rust-analyzer.linkedProjects]]rust-analyzer.linkedProjects (default: `[]`)::\n +\n --"}, {"sha": "b2372686575738525e07edfbe0c91b48e7d41e33", "filename": "editors/code/package.json", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/33f12a3608c5ffede3ae51ca6883f5502ffcc8c6/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/33f12a3608c5ffede3ae51ca6883f5502ffcc8c6/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=33f12a3608c5ffede3ae51ca6883f5502ffcc8c6", "patch": "@@ -789,6 +789,11 @@\n                     \"default\": false,\n                     \"type\": \"boolean\"\n                 },\n+                \"rust-analyzer.lens.forceCustomCommands\": {\n+                    \"markdownDescription\": \"Internal config: use custom client-side commands even when the\\nclient doesn't set the corresponding capability.\",\n+                    \"default\": true,\n+                    \"type\": \"boolean\"\n+                },\n                 \"rust-analyzer.linkedProjects\": {\n                     \"markdownDescription\": \"Disable project auto-discovery in favor of explicitly specified set\\nof projects.\\n\\nElements must be paths pointing to `Cargo.toml`,\\n`rust-project.json`, or JSON objects in `rust-project.json` format.\",\n                     \"default\": [],"}, {"sha": "3e9788c98c5e467a8292e3aebca3e607e5125f92", "filename": "editors/code/src/client.ts", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/33f12a3608c5ffede3ae51ca6883f5502ffcc8c6/editors%2Fcode%2Fsrc%2Fclient.ts", "raw_url": "https://github.com/rust-lang/rust/raw/33f12a3608c5ffede3ae51ca6883f5502ffcc8c6/editors%2Fcode%2Fsrc%2Fclient.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fclient.ts?ref=33f12a3608c5ffede3ae51ca6883f5502ffcc8c6", "patch": "@@ -178,6 +178,15 @@ class ExperimentalFeatures implements lc.StaticFeature {\n         caps.codeActionGroup = true;\n         caps.hoverActions = true;\n         caps.serverStatusNotification = true;\n+        caps.commands = {\n+            commands: [\n+                \"rust-analyzer.runSingle\",\n+                \"rust-analyzer.debugSingle\",\n+                \"rust-analyzer.showReferences\",\n+                \"rust-analyzer.gotoLocation\",\n+                \"editor.action.triggerParameterHints\",\n+            ]\n+        };\n         capabilities.experimental = caps;\n     }\n     initialize(_capabilities: lc.ServerCapabilities<any>, _documentSelector: lc.DocumentSelector | undefined): void {"}]}