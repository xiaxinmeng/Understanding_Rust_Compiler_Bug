{"sha": "4827ceecb9ee9bc0508fecf7059bcc134ca187d0", "node_id": "C_kwDOAAsO6NoAKDQ4MjdjZWVjYjllZTliYzA1MDhmZWNmNzA1OWJjYzEzNGNhMTg3ZDA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-30T02:26:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-30T02:26:41Z"}, "message": "Auto merge of #103745 - matthiaskrgr:rollup-hipjva8, r=matthiaskrgr\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #100006 (Make `core::mem::copy` const)\n - #102659 (1.65.0 release notes)\n - #103124 (Add tests for autoderef on block tail)\n - #103253 (rustdoc: add test case for masked blanket impl)\n - #103715 (use consistent terminology)\n - #103722 (Fix z-indexes of code example feature and cleanup its CSS)\n - #103726 (Avoid unnecessary `&str` to `String` conversions)\n - #103737 (rustdoc: use CSS margin/padding shorthand when all are being set)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "7a660a4b9d3b3ae656b091901ca420e28bcae907", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a660a4b9d3b3ae656b091901ca420e28bcae907"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4827ceecb9ee9bc0508fecf7059bcc134ca187d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4827ceecb9ee9bc0508fecf7059bcc134ca187d0", "html_url": "https://github.com/rust-lang/rust/commit/4827ceecb9ee9bc0508fecf7059bcc134ca187d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4827ceecb9ee9bc0508fecf7059bcc134ca187d0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15ee24a2fab6a29dd2235d7c4e383c9011f5900f", "url": "https://api.github.com/repos/rust-lang/rust/commits/15ee24a2fab6a29dd2235d7c4e383c9011f5900f", "html_url": "https://github.com/rust-lang/rust/commit/15ee24a2fab6a29dd2235d7c4e383c9011f5900f"}, {"sha": "9c5e61c2d257c2d1e7441e9675dbf2694dfbd2a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c5e61c2d257c2d1e7441e9675dbf2694dfbd2a2", "html_url": "https://github.com/rust-lang/rust/commit/9c5e61c2d257c2d1e7441e9675dbf2694dfbd2a2"}], "stats": {"total": 347, "additions": 295, "deletions": 52}, "files": [{"sha": "a3df56f1d2afcaa4fea11229c9f32737867afb09", "filename": "RELEASES.md", "status": "modified", "additions": 103, "deletions": 0, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/4827ceecb9ee9bc0508fecf7059bcc134ca187d0/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/4827ceecb9ee9bc0508fecf7059bcc134ca187d0/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=4827ceecb9ee9bc0508fecf7059bcc134ca187d0", "patch": "@@ -1,3 +1,106 @@\n+Version 1.65.0 (2022-11-03)\n+==========================\n+\n+Language\n+--------\n+- [Error on `as` casts of enums with `#[non_exhaustive]` variants](https://github.com/rust-lang/rust/pull/92744/)\n+- [Stabilize `let else`](https://github.com/rust-lang/rust/pull/93628/)\n+- [Stabilize generic associated types (GATs)](https://github.com/rust-lang/rust/pull/96709/)\n+- [Add lints `let_underscore_drop`, `let_underscore_lock`, and `let_underscore_must_use` from Clippy](https://github.com/rust-lang/rust/pull/97739/)\n+- [Stabilize `break`ing from arbitrary labeled blocks (\"label-break-value\")](https://github.com/rust-lang/rust/pull/99332/)\n+- [Uninitialized integers, floats, and raw pointers are now considered immediate UB](https://github.com/rust-lang/rust/pull/98919/).\n+  Usage of `MaybeUninit` is the correct way to work with uninitialized memory.\n+- [Stabilize raw-dylib for Windows x86_64, aarch64, and thumbv7a](https://github.com/rust-lang/rust/pull/99916/)\n+- [Do not allow `Drop` impl on foreign ADTs](https://github.com/rust-lang/rust/pull/99576/)\n+\n+Compiler\n+--------\n+- [Stabilize -Csplit-debuginfo on Linux](https://github.com/rust-lang/rust/pull/98051/)\n+- [Use niche-filling optimization even when multiple variants have data](https://github.com/rust-lang/rust/pull/94075/)\n+- [Associated type projections are now verified to be well-formed prior to resolving the underlying type](https://github.com/rust-lang/rust/pull/99217/#issuecomment-1209365630)\n+- [Stringify non-shorthand visibility correctly](https://github.com/rust-lang/rust/pull/100350/)\n+- [Normalize struct field types when unsizing](https://github.com/rust-lang/rust/pull/101831/)\n+- [Update to LLVM 15](https://github.com/rust-lang/rust/pull/99464/)\n+- [Fix aarch64 call abi to correctly zeroext when needed](https://github.com/rust-lang/rust/pull/97800/)\n+- [debuginfo: Generalize C++-like encoding for enums](https://github.com/rust-lang/rust/pull/98393/)\n+- [Add `special_module_name` lint](https://github.com/rust-lang/rust/pull/94467/)\n+- [Add support for generating unique profraw files by default when using `-C instrument-coverage`](https://github.com/rust-lang/rust/pull/100384/)\n+- [Allow dynamic linking for iOS/tvOS targets](https://github.com/rust-lang/rust/pull/100636/)\n+\n+New targets:\n+\n+- [Add armv4t-none-eabi as a tier 3 target](https://github.com/rust-lang/rust/pull/100244/)\n+- [Add powerpc64-unknown-openbsd and riscv64-unknown-openbsd as tier 3 targets](https://github.com/rust-lang/rust/pull/101025/)\n+  - Refer to Rust's [platform support page][platform-support-doc] for more\n+    information on Rust's tiered platform support.\n+\n+Libraries\n+---------\n+\n+- [Don't generate `PartialEq::ne` in derive(PartialEq)](https://github.com/rust-lang/rust/pull/98655/)\n+- [Windows RNG: Use `BCRYPT_RNG_ALG_HANDLE` by default](https://github.com/rust-lang/rust/pull/101325/)\n+- [Forbid mixing `System` with direct system allocator calls](https://github.com/rust-lang/rust/pull/101394/)\n+- [Document no support for writing to non-blocking stdio/stderr](https://github.com/rust-lang/rust/pull/101416/)\n+- [`std::layout::Layout` size must not overflow `isize::MAX` when rounded up to `align`](https://github.com/rust-lang/rust/pull/95295)\n+  This also changes the safety conditions on `Layout::from_size_align_unchecked`.\n+\n+Stabilized APIs\n+---------------\n+\n+- [`std::backtrace::Backtrace`](https://doc.rust-lang.org/stable/std/backtrace/struct.Backtrace.html)\n+- [`Bound::as_ref`](https://doc.rust-lang.org/stable/std/ops/enum.Bound.html#method.as_ref)\n+- [`std::io::read_to_string`](https://doc.rust-lang.org/stable/std/io/fn.read_to_string.html)\n+- [`<*const T>::cast_mut`](https://doc.rust-lang.org/stable/std/primitive.pointer.html#method.cast_mut)\n+- [`<*mut T>::cast_const`](https://doc.rust-lang.org/stable/std/primitive.pointer.html#method.cast_const)\n+\n+These APIs are now stable in const contexts:\n+\n+- [`<*const T>::offset_from`](https://doc.rust-lang.org/stable/std/primitive.pointer.html#method.offset_from)\n+- [`<*mut T>::offset_from`](https://doc.rust-lang.org/stable/std/primitive.pointer.html#method.offset_from)\n+\n+Cargo\n+-----\n+\n+- [Apply GitHub fast path even for partial hashes](https://github.com/rust-lang/cargo/pull/10807/)\n+- [Do not add home bin path to PATH if it's already there](https://github.com/rust-lang/cargo/pull/11023/)\n+- [Take priority into account within the pending queue](https://github.com/rust-lang/cargo/pull/11032/).\n+  This slightly optimizes job scheduling by Cargo, with typically small improvements on larger crate graph builds.\n+\n+Compatibility Notes\n+-------------------\n+\n+- [`std::layout::Layout` size must not overflow `isize::MAX` when rounded up to `align`](https://github.com/rust-lang/rust/pull/95295).\n+  This also changes the safety conditions on `Layout::from_size_align_unchecked`.\n+- [`PollFn` now only implements `Unpin` if the closure is `Unpin`](https://github.com/rust-lang/rust/pull/102737).\n+  This is a possible breaking change if users were relying on the blanket unpin implementation.\n+  See discussion on the PR for details of why this change was made.\n+- [Drop ExactSizeIterator impl from std::char::EscapeAscii](https://github.com/rust-lang/rust/pull/99880)\n+  This is a backwards-incompatible change to the standard library's surface\n+  area, but is unlikely to affect real world usage.\n+- [Do not consider a single repeated lifetime eligible for elision in the return type](https://github.com/rust-lang/rust/pull/103450)\n+  This behavior was unintentionally changed in 1.64.0, and this release reverts that change by making this an error again.\n+- [Reenable disabled early syntax gates as future-incompatibility lints](https://github.com/rust-lang/rust/pull/99935/)\n+- [Update the minimum external LLVM to 13](https://github.com/rust-lang/rust/pull/100460/)\n+- [Don't duplicate file descriptors into stdio fds](https://github.com/rust-lang/rust/pull/101426/)\n+- [Sunset RLS](https://github.com/rust-lang/rust/pull/100863/)\n+- [Deny usage of `#![cfg_attr(..., crate_type = ...)]` to set the crate type](https://github.com/rust-lang/rust/pull/99784/)\n+  This strengthens the forward compatibility lint deprecated_cfg_attr_crate_type_name to deny.\n+- [`llvm-has-rust-patches` allows setting the build system to treat the LLVM as having Rust-specific patches](https://github.com/rust-lang/rust/pull/101072)\n+  This option may need to be set for distributions that are building Rust with a patched LLVM via `llvm-config`, not the built-in LLVM.\n+\n+Internal Changes\n+----------------\n+\n+These changes do not affect any public interfaces of Rust, but they represent\n+significant improvements to the performance or internals of rustc and related\n+tools.\n+\n+- [Add `x.sh` and `x.ps1` shell scripts](https://github.com/rust-lang/rust/pull/99992/)\n+- [compiletest: use target cfg instead of hard-coded tables](https://github.com/rust-lang/rust/pull/100260/)\n+- [Use object instead of LLVM for reading bitcode from rlibs](https://github.com/rust-lang/rust/pull/98100/)\n+- [Enable MIR inlining for optimized compilations](https://github.com/rust-lang/rust/pull/91743)\n+  This provides a 3-10% improvement in compiletimes for real world crates. See [perf results](https://perf.rust-lang.org/compare.html?start=aedf78e56b2279cc869962feac5153b6ba7001ed&end=0075bb4fad68e64b6d1be06bf2db366c30bc75e1&stat=instructions:u).\n+\n Version 1.64.0 (2022-09-22)\n ===========================\n "}, {"sha": "a9e5e438cf5f5c808e4e5fa6395d17df17fbb9ac", "filename": "compiler/rustc_mir_build/src/thir/pattern/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4827ceecb9ee9bc0508fecf7059bcc134ca187d0/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4827ceecb9ee9bc0508fecf7059bcc134ca187d0/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs?ref=4827ceecb9ee9bc0508fecf7059bcc134ca187d0", "patch": "@@ -507,7 +507,7 @@ impl<'p, 'tcx> MatchVisitor<'_, 'p, 'tcx> {\n                                 _ => \"aren't\",\n                             },\n                         ),\n-                        \" else { todo!() }\".to_string(),\n+                        \" else { todo!() }\",\n                         Applicability::HasPlaceholders,\n                     );\n                 }"}, {"sha": "7d5fe32ee2864a916cebf65a4557d49a0c7e4858", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4827ceecb9ee9bc0508fecf7059bcc134ca187d0/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4827ceecb9ee9bc0508fecf7059bcc134ca187d0/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=4827ceecb9ee9bc0508fecf7059bcc134ca187d0", "patch": "@@ -784,10 +784,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n             return false;\n         }\n         err.code(rustc_errors::error_code!(E0411));\n-        err.span_label(\n-            span,\n-            \"`Self` is only available in impls, traits, and type definitions\".to_string(),\n-        );\n+        err.span_label(span, \"`Self` is only available in impls, traits, and type definitions\");\n         if let Some(item_kind) = self.diagnostic_metadata.current_item {\n             err.span_label(\n                 item_kind.ident.span,"}, {"sha": "1de85e2f288be7f82b5cd1bca7ae9dd4debaab7a", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4827ceecb9ee9bc0508fecf7059bcc134ca187d0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4827ceecb9ee9bc0508fecf7059bcc134ca187d0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=4827ceecb9ee9bc0508fecf7059bcc134ca187d0", "patch": "@@ -192,12 +192,12 @@ pub fn is_const_evaluatable<'tcx>(\n         }\n         let concrete = infcx.const_eval_resolve(param_env, uv, Some(span));\n         match concrete {\n-            Err(ErrorHandled::TooGeneric) => {\n-                Err(NotConstEvaluatable::Error(infcx.tcx.sess.delay_span_bug(\n-                    span,\n-                    format!(\"Missing value for constant, but no error reported?\"),\n-                )))\n-            }\n+            Err(ErrorHandled::TooGeneric) => Err(NotConstEvaluatable::Error(\n+                infcx\n+                    .tcx\n+                    .sess\n+                    .delay_span_bug(span, \"Missing value for constant, but no error reported?\"),\n+            )),\n             Err(ErrorHandled::Linted) => {\n                 let reported = infcx\n                     .tcx"}, {"sha": "12a47f9fc76265ff866d649e1f44b14a51fb6b11", "filename": "library/core/src/async_iter/async_iter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4827ceecb9ee9bc0508fecf7059bcc134ca187d0/library%2Fcore%2Fsrc%2Fasync_iter%2Fasync_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4827ceecb9ee9bc0508fecf7059bcc134ca187d0/library%2Fcore%2Fsrc%2Fasync_iter%2Fasync_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fasync_iter%2Fasync_iter.rs?ref=4827ceecb9ee9bc0508fecf7059bcc134ca187d0", "patch": "@@ -2,7 +2,7 @@ use crate::ops::DerefMut;\n use crate::pin::Pin;\n use crate::task::{Context, Poll};\n \n-/// An interface for dealing with asynchronous iterators.\n+/// A trait for dealing with asynchronous iterators.\n ///\n /// This is the main async iterator trait. For more about the concept of async iterators\n /// generally, please see the [module-level documentation]. In particular, you"}, {"sha": "83c7e8977e9f3e22e842bef6a0581afe7be174a9", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4827ceecb9ee9bc0508fecf7059bcc134ca187d0/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4827ceecb9ee9bc0508fecf7059bcc134ca187d0/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=4827ceecb9ee9bc0508fecf7059bcc134ca187d0", "patch": "@@ -14,7 +14,7 @@ use super::super::{\n \n fn _assert_is_object_safe(_: &dyn Iterator<Item = ()>) {}\n \n-/// An interface for dealing with iterators.\n+/// A trait for dealing with iterators.\n ///\n /// This is the main iterator trait. For more about the concept of iterators\n /// generally, please see the [module-level documentation]. In particular, you"}, {"sha": "2e1a667097c015432277219bcb081d8050052ce2", "filename": "library/core/src/mem/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4827ceecb9ee9bc0508fecf7059bcc134ca187d0/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4827ceecb9ee9bc0508fecf7059bcc134ca187d0/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs?ref=4827ceecb9ee9bc0508fecf7059bcc134ca187d0", "patch": "@@ -1004,7 +1004,7 @@ pub fn drop<T>(_x: T) {}\n /// ```\n #[inline]\n #[unstable(feature = \"mem_copy_fn\", issue = \"98262\")]\n-pub fn copy<T: Copy>(x: &T) -> T {\n+pub const fn copy<T: Copy>(x: &T) -> T {\n     *x\n }\n "}, {"sha": "28136cc48d658f06ac0e803d785ef3cbfd1183dc", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4827ceecb9ee9bc0508fecf7059bcc134ca187d0/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4827ceecb9ee9bc0508fecf7059bcc134ca187d0/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=4827ceecb9ee9bc0508fecf7059bcc134ca187d0", "patch": "@@ -72,8 +72,12 @@ pub(crate) fn render_source_with_highlighting(\n     line_numbers: Buffer,\n     href_context: HrefContext<'_, '_, '_>,\n     decoration_info: DecorationInfo,\n+    extra: Option<&str>,\n ) {\n     write_header(out, \"\", Some(line_numbers), Tooltip::None);\n+    if let Some(extra) = extra {\n+        out.push_str(extra);\n+    }\n     write_code(out, src, Some(href_context), Some(decoration_info));\n     write_footer(out, None);\n }"}, {"sha": "27dea8ec0b312b87fdd4f0564f9c0b31928210b8", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4827ceecb9ee9bc0508fecf7059bcc134ca187d0/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4827ceecb9ee9bc0508fecf7059bcc134ca187d0/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=4827ceecb9ee9bc0508fecf7059bcc134ca187d0", "patch": "@@ -2869,10 +2869,6 @@ fn render_call_locations(w: &mut Buffer, cx: &mut Context<'_>, item: &clean::Ite\n             write!(w, r#\"<span class=\"prev\">&pr;</span> <span class=\"next\">&sc;</span>\"#);\n         }\n \n-        if needs_expansion {\n-            write!(w, r#\"<span class=\"expand\">&varr;</span>\"#);\n-        }\n-\n         // Look for the example file in the source map if it exists, otherwise return a dummy span\n         let file_span = (|| {\n             let source_map = tcx.sess.source_map();\n@@ -2906,7 +2902,7 @@ fn render_call_locations(w: &mut Buffer, cx: &mut Context<'_>, item: &clean::Ite\n             cx,\n             &root_path,\n             highlight::DecorationInfo(decoration_info),\n-            sources::SourceContext::Embedded { offset: line_min },\n+            sources::SourceContext::Embedded { offset: line_min, needs_expansion },\n         );\n         write!(w, \"</div></div>\");\n "}, {"sha": "8a01c01049d6e771d3f89eef9af9783dcd41f193", "filename": "src/librustdoc/html/sources.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4827ceecb9ee9bc0508fecf7059bcc134ca187d0/src%2Flibrustdoc%2Fhtml%2Fsources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4827ceecb9ee9bc0508fecf7059bcc134ca187d0/src%2Flibrustdoc%2Fhtml%2Fsources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fsources.rs?ref=4827ceecb9ee9bc0508fecf7059bcc134ca187d0", "patch": "@@ -258,7 +258,7 @@ where\n \n pub(crate) enum SourceContext {\n     Standalone,\n-    Embedded { offset: usize },\n+    Embedded { offset: usize, needs_expansion: bool },\n }\n \n /// Wrapper struct to render the source code of a file. This will do things like\n@@ -274,14 +274,18 @@ pub(crate) fn print_src(\n ) {\n     let lines = s.lines().count();\n     let mut line_numbers = Buffer::empty_from(buf);\n+    let extra;\n     line_numbers.write_str(\"<pre class=\\\"src-line-numbers\\\">\");\n     match source_context {\n         SourceContext::Standalone => {\n+            extra = None;\n             for line in 1..=lines {\n                 writeln!(line_numbers, \"<span id=\\\"{0}\\\">{0}</span>\", line)\n             }\n         }\n-        SourceContext::Embedded { offset } => {\n+        SourceContext::Embedded { offset, needs_expansion } => {\n+            extra =\n+                if needs_expansion { Some(r#\"<span class=\"expand\">&varr;</span>\"#) } else { None };\n             for line in 1..=lines {\n                 writeln!(line_numbers, \"<span>{0}</span>\", line + offset)\n             }\n@@ -297,5 +301,6 @@ pub(crate) fn print_src(\n         line_numbers,\n         highlight::HrefContext { context, file_span, root_path, current_href },\n         decoration_info,\n+        extra,\n     );\n }"}, {"sha": "330bdb45465c9297210efe40532ae1df442b4af7", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 15, "deletions": 31, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/4827ceecb9ee9bc0508fecf7059bcc134ca187d0/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/4827ceecb9ee9bc0508fecf7059bcc134ca187d0/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=4827ceecb9ee9bc0508fecf7059bcc134ca187d0", "patch": "@@ -493,9 +493,7 @@ ul.block, .block li {\n .sidebar h2 {\n \toverflow-wrap: anywhere;\n \tpadding: 0;\n-\tmargin: 0;\n-\tmargin-top: 0.7rem;\n-\tmargin-bottom: 0.7rem;\n+\tmargin: 0.7rem 0;\n }\n \n .sidebar h3 {\n@@ -803,10 +801,8 @@ table,\n }\n #crate-search {\n \tmin-width: 115px;\n-\tpadding: 0;\n \t/* keep these two in sync with \"@-moz-document url-prefix()\" below */\n-\tpadding-left: 4px;\n-\tpadding-right: 23px;\n+\tpadding: 0 23px 0 4px;\n \t/* prevents the <select> from overflowing the containing div in case it's shrunk */\n \tmax-width: 100%;\n \t/* contents can overflow because of max-width limit, then show ellipsis */\n@@ -1719,7 +1715,6 @@ in storage.js\n \t\t/* Hide the sidebar offscreen while not in use. Doing this instead of display: none means\n \t\t   the sidebar stays visible for screen readers, which is useful for navigation. */\n \t\tleft: -1000px;\n-\t\tmargin-left: 0;\n \t\tmargin: 0;\n \t\tpadding: 0;\n \t\tz-index: 11;\n@@ -1772,9 +1767,7 @@ in storage.js\n \t.mobile-topbar .logo-container > img {\n \t\tmax-width: 35px;\n \t\tmax-height: 35px;\n-\t\tmargin-left: 20px;\n-\t\tmargin-top: 5px;\n-\t\tmargin-bottom: 5px;\n+\t\tmargin: 5px 0 5px 20px;\n \t}\n \n \t.mobile-topbar {\n@@ -2023,45 +2016,36 @@ in storage.js\n \tpadding-bottom: 0;\n }\n \n-.scraped-example .code-wrapper .prev {\n+.scraped-example .code-wrapper .next,\n+.scraped-example .code-wrapper .prev,\n+.scraped-example .code-wrapper .expand {\n \tposition: absolute;\n \ttop: 0.25em;\n-\tright: 2.25em;\n-\tz-index: 100;\n+\tz-index: 1;\n \tcursor: pointer;\n }\n-\n+.scraped-example .code-wrapper .prev {\n+\tright: 2.25em;\n+}\n .scraped-example .code-wrapper .next {\n-\tposition: absolute;\n-\ttop: 0.25em;\n \tright: 1.25em;\n-\tz-index: 100;\n-\tcursor: pointer;\n }\n-\n .scraped-example .code-wrapper .expand {\n-\tposition: absolute;\n-\ttop: 0.25em;\n \tright: 0.25em;\n-\tz-index: 100;\n-\tcursor: pointer;\n }\n \n-.scraped-example:not(.expanded) .code-wrapper:before {\n+.scraped-example:not(.expanded) .code-wrapper:before,\n+.scraped-example:not(.expanded) .code-wrapper:after {\n \tcontent: \" \";\n \twidth: 100%;\n \theight: 5px;\n \tposition: absolute;\n-\tz-index: 100;\n+\tz-index: 1;\n+}\n+.scraped-example:not(.expanded) .code-wrapper:before {\n \ttop: 0;\n }\n-\n .scraped-example:not(.expanded) .code-wrapper:after {\n-\tcontent: \" \";\n-\twidth: 100%;\n-\theight: 5px;\n-\tposition: absolute;\n-\tz-index: 100;\n \tbottom: 0;\n }\n "}, {"sha": "3d722d5e0c2e2a59f74d40d3a469822647edde1b", "filename": "src/test/rustdoc/auxiliary/masked.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4827ceecb9ee9bc0508fecf7059bcc134ca187d0/src%2Ftest%2Frustdoc%2Fauxiliary%2Fmasked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4827ceecb9ee9bc0508fecf7059bcc134ca187d0/src%2Ftest%2Frustdoc%2Fauxiliary%2Fmasked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fauxiliary%2Fmasked.rs?ref=4827ceecb9ee9bc0508fecf7059bcc134ca187d0", "patch": "@@ -8,3 +8,7 @@ pub trait MaskedTrait {\n impl MaskedTrait for String {\n     fn masked_method() {}\n }\n+\n+pub trait MaskedBlanketTrait {}\n+\n+impl<T> MaskedBlanketTrait for T {}"}, {"sha": "875c026fd058a48088a435b2aa6739c3c24f81fb", "filename": "src/test/rustdoc/masked.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4827ceecb9ee9bc0508fecf7059bcc134ca187d0/src%2Ftest%2Frustdoc%2Fmasked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4827ceecb9ee9bc0508fecf7059bcc134ca187d0/src%2Ftest%2Frustdoc%2Fmasked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fmasked.rs?ref=4827ceecb9ee9bc0508fecf7059bcc134ca187d0", "patch": "@@ -10,6 +10,7 @@ extern crate masked;\n // @!hasraw 'search-index.js' 'masked_method'\n \n // @!hasraw 'foo/struct.String.html' 'MaskedTrait'\n+// @!hasraw 'foo/struct.String.html' 'MaskedBlanketTrait'\n // @!hasraw 'foo/struct.String.html' 'masked_method'\n pub use std::string::String;\n "}, {"sha": "01c8ab5a839fa70eac51a72fc89654287a9cec84", "filename": "src/test/ui/coercion/coerce-block-tail-26978.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4827ceecb9ee9bc0508fecf7059bcc134ca187d0/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-block-tail-26978.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4827ceecb9ee9bc0508fecf7059bcc134ca187d0/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-block-tail-26978.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-block-tail-26978.rs?ref=4827ceecb9ee9bc0508fecf7059bcc134ca187d0", "patch": "@@ -0,0 +1,11 @@\n+// check-fail\n+fn f(_: &i32) {}\n+\n+fn main() {\n+    let x = Box::new(1i32);\n+\n+    f(&x);\n+    f(&(x));\n+    f(&{x});\n+    //~^ ERROR mismatched types\n+}"}, {"sha": "384debd487c5156bcf9b3255d40878105e3940ca", "filename": "src/test/ui/coercion/coerce-block-tail-26978.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4827ceecb9ee9bc0508fecf7059bcc134ca187d0/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-block-tail-26978.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4827ceecb9ee9bc0508fecf7059bcc134ca187d0/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-block-tail-26978.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-block-tail-26978.stderr?ref=4827ceecb9ee9bc0508fecf7059bcc134ca187d0", "patch": "@@ -0,0 +1,16 @@\n+error[E0308]: mismatched types\n+  --> $DIR/coerce-block-tail-26978.rs:9:9\n+   |\n+LL |     f(&{x});\n+   |         ^ expected `i32`, found struct `Box`\n+   |\n+   = note: expected type `i32`\n+            found struct `Box<i32>`\n+help: consider unboxing the value\n+   |\n+LL |     f(&{*x});\n+   |         +\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "79b5b33233b314b063548c9b1eee7b5ce91c9dc2", "filename": "src/test/ui/coercion/coerce-block-tail-57749.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/4827ceecb9ee9bc0508fecf7059bcc134ca187d0/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-block-tail-57749.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4827ceecb9ee9bc0508fecf7059bcc134ca187d0/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-block-tail-57749.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-block-tail-57749.rs?ref=4827ceecb9ee9bc0508fecf7059bcc134ca187d0", "patch": "@@ -0,0 +1,35 @@\n+// check-fail\n+use std::ops::Deref;\n+\n+fn main() {\n+    fn save(who: &str) {\n+        println!(\"I'll save you, {}!\", who);\n+    }\n+\n+    struct Madoka;\n+\n+    impl Deref for Madoka {\n+        type Target = str;\n+        fn deref(&self) -> &Self::Target {\n+            \"Madoka\"\n+        }\n+    }\n+\n+    save(&{ Madoka });\n+\n+    fn reset(how: &u32) {\n+        println!(\"Reset {} times\", how);\n+    }\n+\n+    struct Homura;\n+\n+    impl Deref for Homura {\n+        type Target = u32;\n+        fn deref(&self) -> &Self::Target {\n+            &42\n+        }\n+    }\n+\n+    reset(&{ Homura });\n+    //~^ ERROR mismatched types\n+}"}, {"sha": "d5660c81dbd3e67256825cf826ecde848fb254ef", "filename": "src/test/ui/coercion/coerce-block-tail-57749.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4827ceecb9ee9bc0508fecf7059bcc134ca187d0/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-block-tail-57749.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4827ceecb9ee9bc0508fecf7059bcc134ca187d0/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-block-tail-57749.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-block-tail-57749.stderr?ref=4827ceecb9ee9bc0508fecf7059bcc134ca187d0", "patch": "@@ -0,0 +1,14 @@\n+error[E0308]: mismatched types\n+  --> $DIR/coerce-block-tail-57749.rs:33:14\n+   |\n+LL |     reset(&{ Homura });\n+   |              ^^^^^^ expected `u32`, found struct `Homura`\n+   |\n+help: consider dereferencing the type\n+   |\n+LL |     reset(&{ *Homura });\n+   |              +\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "18c8ae3bbbad472895cdd80ddb394249b9338d8e", "filename": "src/test/ui/coercion/coerce-block-tail-83783.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4827ceecb9ee9bc0508fecf7059bcc134ca187d0/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-block-tail-83783.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4827ceecb9ee9bc0508fecf7059bcc134ca187d0/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-block-tail-83783.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-block-tail-83783.rs?ref=4827ceecb9ee9bc0508fecf7059bcc134ca187d0", "patch": "@@ -0,0 +1,13 @@\n+// check-fail\n+// edition:2018\n+fn _consume_reference<T: ?Sized>(_: &T) {}\n+\n+async fn _foo() {\n+    _consume_reference::<i32>(&Box::new(7_i32));\n+    _consume_reference::<i32>(&async { Box::new(7_i32) }.await);\n+    //~^ ERROR mismatched types\n+    _consume_reference::<[i32]>(&vec![7_i32]);\n+    _consume_reference::<[i32]>(&async { vec![7_i32] }.await);\n+}\n+\n+fn main() { }"}, {"sha": "5f53606ce2225d42330518a1ac5e6f305a8841bb", "filename": "src/test/ui/coercion/coerce-block-tail-83783.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4827ceecb9ee9bc0508fecf7059bcc134ca187d0/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-block-tail-83783.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4827ceecb9ee9bc0508fecf7059bcc134ca187d0/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-block-tail-83783.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-block-tail-83783.stderr?ref=4827ceecb9ee9bc0508fecf7059bcc134ca187d0", "patch": "@@ -0,0 +1,12 @@\n+error[E0308]: mismatched types\n+  --> $DIR/coerce-block-tail-83783.rs:7:32\n+   |\n+LL |     _consume_reference::<i32>(&async { Box::new(7_i32) }.await);\n+   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `i32`, found struct `Box`\n+   |\n+   = note: expected type `i32`\n+            found struct `Box<i32>`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "77fdf99983332eaa00261ed5512d238f0ff6c567", "filename": "src/test/ui/coercion/coerce-block-tail-83850.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4827ceecb9ee9bc0508fecf7059bcc134ca187d0/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-block-tail-83850.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4827ceecb9ee9bc0508fecf7059bcc134ca187d0/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-block-tail-83850.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-block-tail-83850.rs?ref=4827ceecb9ee9bc0508fecf7059bcc134ca187d0", "patch": "@@ -0,0 +1,7 @@\n+// check-fail\n+fn f(_: &[i32]) {}\n+\n+fn main() {\n+    f(&Box::new([1, 2]));\n+    //~^ ERROR mismatched types\n+}"}, {"sha": "bbf6075437043532384ae1ccb7c9b542bf7159bc", "filename": "src/test/ui/coercion/coerce-block-tail-83850.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4827ceecb9ee9bc0508fecf7059bcc134ca187d0/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-block-tail-83850.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4827ceecb9ee9bc0508fecf7059bcc134ca187d0/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-block-tail-83850.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-block-tail-83850.stderr?ref=4827ceecb9ee9bc0508fecf7059bcc134ca187d0", "patch": "@@ -0,0 +1,19 @@\n+error[E0308]: mismatched types\n+  --> $DIR/coerce-block-tail-83850.rs:5:7\n+   |\n+LL |     f(&Box::new([1, 2]));\n+   |     - ^^^^^^^^^^^^^^^^^ expected slice `[i32]`, found struct `Box`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+   = note: expected reference `&[i32]`\n+              found reference `&Box<[{integer}; 2]>`\n+note: function defined here\n+  --> $DIR/coerce-block-tail-83850.rs:2:4\n+   |\n+LL | fn f(_: &[i32]) {}\n+   |    ^ ---------\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "dcbcd3762862f75349bd1f75e61812ce54fe4498", "filename": "src/test/ui/coercion/coerce-block-tail.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4827ceecb9ee9bc0508fecf7059bcc134ca187d0/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-block-tail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4827ceecb9ee9bc0508fecf7059bcc134ca187d0/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-block-tail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-block-tail.rs?ref=4827ceecb9ee9bc0508fecf7059bcc134ca187d0", "patch": "@@ -0,0 +1,6 @@\n+// check-fail\n+fn main() {\n+    let _: &str = & { String::from(\"hahah\")};\n+    let _: &i32 = & { Box::new(1i32) };\n+    //~^ ERROR mismatched types\n+}"}, {"sha": "318cf75867b4b47d7a8dd4d5c517db5a1b6b12f5", "filename": "src/test/ui/coercion/coerce-block-tail.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4827ceecb9ee9bc0508fecf7059bcc134ca187d0/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-block-tail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4827ceecb9ee9bc0508fecf7059bcc134ca187d0/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-block-tail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-block-tail.stderr?ref=4827ceecb9ee9bc0508fecf7059bcc134ca187d0", "patch": "@@ -0,0 +1,16 @@\n+error[E0308]: mismatched types\n+  --> $DIR/coerce-block-tail.rs:4:23\n+   |\n+LL |     let _: &i32 = & { Box::new(1i32) };\n+   |                       ^^^^^^^^^^^^^^ expected `i32`, found struct `Box`\n+   |\n+   = note: expected type `i32`\n+            found struct `Box<i32>`\n+help: consider unboxing the value\n+   |\n+LL |     let _: &i32 = & { *Box::new(1i32) };\n+   |                       +\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}]}