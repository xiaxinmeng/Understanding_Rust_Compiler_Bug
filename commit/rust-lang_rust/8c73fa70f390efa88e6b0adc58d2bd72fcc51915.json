{"sha": "8c73fa70f390efa88e6b0adc58d2bd72fcc51915", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjNzNmYTcwZjM5MGVmYTg4ZTZiMGFkYzU4ZDJiZDcyZmNjNTE5MTU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-21T03:07:01Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-21T03:07:01Z"}, "message": "Auto merge of #68154 - ssomers:btreemap_navigation_benches, r=Mark-Simulacrum\n\nAdd more BTreeMap/BTreeSet benchmarks regarding iteration\n\nServing #67073 or other developments", "tree": {"sha": "d1a0e55b0533edf7a20020ea3f7f3863b04eadb8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d1a0e55b0533edf7a20020ea3f7f3863b04eadb8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c73fa70f390efa88e6b0adc58d2bd72fcc51915", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c73fa70f390efa88e6b0adc58d2bd72fcc51915", "html_url": "https://github.com/rust-lang/rust/commit/8c73fa70f390efa88e6b0adc58d2bd72fcc51915", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c73fa70f390efa88e6b0adc58d2bd72fcc51915/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "06b945049b6e6795bcfb9fb8007a46c44a93c0aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/06b945049b6e6795bcfb9fb8007a46c44a93c0aa", "html_url": "https://github.com/rust-lang/rust/commit/06b945049b6e6795bcfb9fb8007a46c44a93c0aa"}, {"sha": "3ada8aeed403157f6608b2daf9a6c88908298b25", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ada8aeed403157f6608b2daf9a6c88908298b25", "html_url": "https://github.com/rust-lang/rust/commit/3ada8aeed403157f6608b2daf9a6c88908298b25"}], "stats": {"total": 77, "additions": 69, "deletions": 8}, "files": [{"sha": "ea69769279f12788f9cc705260028070e79b1a63", "filename": "src/liballoc/benches/btree/map.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/8c73fa70f390efa88e6b0adc58d2bd72fcc51915/src%2Fliballoc%2Fbenches%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c73fa70f390efa88e6b0adc58d2bd72fcc51915/src%2Fliballoc%2Fbenches%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fbenches%2Fbtree%2Fmap.rs?ref=8c73fa70f390efa88e6b0adc58d2bd72fcc51915", "patch": "@@ -146,6 +146,36 @@ pub fn iter_100000(b: &mut Bencher) {\n     bench_iter(b, 100000);\n }\n \n+fn bench_iter_mut(b: &mut Bencher, size: i32) {\n+    let mut map = BTreeMap::<i32, i32>::new();\n+    let mut rng = thread_rng();\n+\n+    for _ in 0..size {\n+        map.insert(rng.gen(), rng.gen());\n+    }\n+\n+    b.iter(|| {\n+        for kv in map.iter_mut() {\n+            black_box(kv);\n+        }\n+    });\n+}\n+\n+#[bench]\n+pub fn iter_mut_20(b: &mut Bencher) {\n+    bench_iter_mut(b, 20);\n+}\n+\n+#[bench]\n+pub fn iter_mut_1000(b: &mut Bencher) {\n+    bench_iter_mut(b, 1000);\n+}\n+\n+#[bench]\n+pub fn iter_mut_100000(b: &mut Bencher) {\n+    bench_iter_mut(b, 100000);\n+}\n+\n fn bench_first_and_last(b: &mut Bencher, size: i32) {\n     let map: BTreeMap<_, _> = (0..size).map(|i| (i, i)).collect();\n     b.iter(|| {"}, {"sha": "d7c1d95a45205b77a3ffd3f5661d3e22171e6a18", "filename": "src/liballoc/benches/btree/set.rs", "status": "modified", "additions": 39, "deletions": 8, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/8c73fa70f390efa88e6b0adc58d2bd72fcc51915/src%2Fliballoc%2Fbenches%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c73fa70f390efa88e6b0adc58d2bd72fcc51915/src%2Fliballoc%2Fbenches%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fbenches%2Fbtree%2Fset.rs?ref=8c73fa70f390efa88e6b0adc58d2bd72fcc51915", "patch": "@@ -14,19 +14,13 @@ fn random(n: usize) -> BTreeSet<usize> {\n }\n \n fn neg(n: usize) -> BTreeSet<i32> {\n-    let mut set = BTreeSet::new();\n-    for i in -(n as i32)..=-1 {\n-        set.insert(i);\n-    }\n+    let set: BTreeSet<i32> = (-(n as i32)..=-1).collect();\n     assert_eq!(set.len(), n);\n     set\n }\n \n fn pos(n: usize) -> BTreeSet<i32> {\n-    let mut set = BTreeSet::new();\n-    for i in 1..=(n as i32) {\n-        set.insert(i);\n-    }\n+    let set: BTreeSet<i32> = (1..=(n as i32)).collect();\n     assert_eq!(set.len(), n);\n     set\n }\n@@ -56,6 +50,43 @@ macro_rules! set_bench {\n     };\n }\n \n+const BUILD_SET_SIZE: usize = 100;\n+\n+#[bench]\n+pub fn build_and_clear(b: &mut Bencher) {\n+    b.iter(|| pos(BUILD_SET_SIZE).clear())\n+}\n+\n+#[bench]\n+pub fn build_and_drop(b: &mut Bencher) {\n+    b.iter(|| pos(BUILD_SET_SIZE))\n+}\n+\n+#[bench]\n+pub fn build_and_into_iter(b: &mut Bencher) {\n+    b.iter(|| pos(BUILD_SET_SIZE).into_iter().count())\n+}\n+\n+#[bench]\n+pub fn build_and_pop_all(b: &mut Bencher) {\n+    b.iter(|| {\n+        let mut s = pos(BUILD_SET_SIZE);\n+        while s.pop_first().is_some() {}\n+        s\n+    });\n+}\n+\n+#[bench]\n+pub fn build_and_remove_all(b: &mut Bencher) {\n+    b.iter(|| {\n+        let mut s = pos(BUILD_SET_SIZE);\n+        while let Some(elt) = s.iter().copied().next() {\n+            s.remove(&elt);\n+        }\n+        s\n+    });\n+}\n+\n set_bench! {intersection_100_neg_vs_100_pos, intersection, count, [neg(100), pos(100)]}\n set_bench! {intersection_100_neg_vs_10k_pos, intersection, count, [neg(100), pos(10_000)]}\n set_bench! {intersection_100_pos_vs_100_neg, intersection, count, [pos(100), neg(100)]}"}]}