{"sha": "57fda672911d113602bfde8f9da22131f0cbff19", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3ZmRhNjcyOTExZDExMzYwMmJmZGU4ZjlkYTIyMTMxZjBjYmZmMTk=", "commit": {"author": {"name": "Luqman Aden", "email": "me@luqman.ca", "date": "2021-05-08T05:42:12Z"}, "committer": {"name": "Luqman Aden", "email": "me@luqman.ca", "date": "2021-05-08T07:33:31Z"}, "message": "Fix diagnostic for matching/creating x-crate re-exported tuple structs with private fields.\n\nThe more helpful diagnostic already existed but wasn't working if the\nstruct in question was a re-export from a different crate.", "tree": {"sha": "aa9c4caa54c5244eb9bf2d5372a7eef75573cc0a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa9c4caa54c5244eb9bf2d5372a7eef75573cc0a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/57fda672911d113602bfde8f9da22131f0cbff19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/57fda672911d113602bfde8f9da22131f0cbff19", "html_url": "https://github.com/rust-lang/rust/commit/57fda672911d113602bfde8f9da22131f0cbff19", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/57fda672911d113602bfde8f9da22131f0cbff19/comments", "author": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "committer": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "377d1a984cd2a53327092b90aa1d8b7e22d1e347", "url": "https://api.github.com/repos/rust-lang/rust/commits/377d1a984cd2a53327092b90aa1d8b7e22d1e347", "html_url": "https://github.com/rust-lang/rust/commit/377d1a984cd2a53327092b90aa1d8b7e22d1e347"}], "stats": {"total": 52, "additions": 42, "deletions": 10}, "files": [{"sha": "bd2cc1c053aee7e27ed1b433f877bb9138f4b629", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/57fda672911d113602bfde8f9da22131f0cbff19/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57fda672911d113602bfde8f9da22131f0cbff19/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=57fda672911d113602bfde8f9da22131f0cbff19", "patch": "@@ -27,7 +27,7 @@ use rustc_middle::middle::exported_symbols::{ExportedSymbol, SymbolExportLevel};\n use rustc_middle::mir::interpret::{AllocDecodingSession, AllocDecodingState};\n use rustc_middle::mir::{self, Body, Promoted};\n use rustc_middle::ty::codec::TyDecoder;\n-use rustc_middle::ty::{self, Ty, TyCtxt};\n+use rustc_middle::ty::{self, Ty, TyCtxt, Visibility};\n use rustc_serialize::{opaque, Decodable, Decoder};\n use rustc_session::Session;\n use rustc_span::hygiene::ExpnDataDecodeMode;\n@@ -1305,6 +1305,17 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n             .collect()\n     }\n \n+    fn get_struct_field_visibilities(&self, id: DefIndex) -> Vec<Visibility> {\n+        self.root\n+            .tables\n+            .children\n+            .get(self, id)\n+            .unwrap_or_else(Lazy::empty)\n+            .decode(self)\n+            .map(|field_index| self.get_visibility(field_index))\n+            .collect()\n+    }\n+\n     fn get_inherent_implementations_for_type(\n         &self,\n         tcx: TyCtxt<'tcx>,"}, {"sha": "27057bbad41cf166a2cb0a9f65527b44d036552c", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/57fda672911d113602bfde8f9da22131f0cbff19/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57fda672911d113602bfde8f9da22131f0cbff19/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=57fda672911d113602bfde8f9da22131f0cbff19", "patch": "@@ -8,7 +8,7 @@ use rustc_ast::expand::allocator::AllocatorKind;\n use rustc_data_structures::stable_map::FxHashMap;\n use rustc_data_structures::svh::Svh;\n use rustc_hir as hir;\n-use rustc_hir::def::DefKind;\n+use rustc_hir::def::{CtorKind, DefKind};\n use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_hir::definitions::{DefKey, DefPath, DefPathHash};\n use rustc_middle::hir::exports::Export;\n@@ -17,7 +17,7 @@ use rustc_middle::middle::cstore::{CrateSource, CrateStore, EncodedMetadata};\n use rustc_middle::middle::exported_symbols::ExportedSymbol;\n use rustc_middle::middle::stability::DeprecationEntry;\n use rustc_middle::ty::query::Providers;\n-use rustc_middle::ty::{self, TyCtxt};\n+use rustc_middle::ty::{self, TyCtxt, Visibility};\n use rustc_session::utils::NativeLibKind;\n use rustc_session::{CrateDisambiguator, Session};\n use rustc_span::source_map::{Span, Spanned};\n@@ -392,6 +392,20 @@ impl CStore {\n         self.get_crate_data(def.krate).get_struct_field_names(def.index, sess)\n     }\n \n+    pub fn struct_field_visibilities_untracked(&self, def: DefId) -> Vec<Visibility> {\n+        self.get_crate_data(def.krate).get_struct_field_visibilities(def.index)\n+    }\n+\n+    pub fn ctor_def_id_and_kind_untracked(&self, def: DefId) -> Option<(DefId, CtorKind)> {\n+        self.get_crate_data(def.krate).get_ctor_def_id(def.index).map(|ctor_def_id| {\n+            (ctor_def_id, self.get_crate_data(def.krate).get_ctor_kind(def.index))\n+        })\n+    }\n+\n+    pub fn visibility_untracked(&self, def: DefId) -> Visibility {\n+        self.get_crate_data(def.krate).get_visibility(def.index)\n+    }\n+\n     pub fn item_children_untracked(\n         &self,\n         def_id: DefId,"}, {"sha": "e10314a11fc1bbacd6e83a378f10aecc774fb686", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/57fda672911d113602bfde8f9da22131f0cbff19/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57fda672911d113602bfde8f9da22131f0cbff19/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=57fda672911d113602bfde8f9da22131f0cbff19", "patch": "@@ -995,7 +995,20 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n         // Record some extra data for better diagnostics.\n         let cstore = self.r.cstore();\n         match res {\n-            Res::Def(DefKind::Struct | DefKind::Union, def_id) => {\n+            Res::Def(DefKind::Struct, def_id) => {\n+                let field_names = cstore.struct_field_names_untracked(def_id, self.r.session);\n+                let ctor = cstore.ctor_def_id_and_kind_untracked(def_id);\n+                if let Some((ctor_def_id, ctor_kind)) = ctor {\n+                    let ctor_res = Res::Def(DefKind::Ctor(CtorOf::Struct, ctor_kind), ctor_def_id);\n+                    let ctor_vis = cstore.visibility_untracked(ctor_def_id);\n+                    let field_visibilities = cstore.struct_field_visibilities_untracked(def_id);\n+                    self.r\n+                        .struct_constructors\n+                        .insert(def_id, (ctor_res, ctor_vis, field_visibilities));\n+                }\n+                self.insert_field_names(def_id, field_names);\n+            }\n+            Res::Def(DefKind::Union, def_id) => {\n                 let field_names = cstore.struct_field_names_untracked(def_id, self.r.session);\n                 self.insert_field_names(def_id, field_names);\n             }\n@@ -1007,12 +1020,6 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                     self.r.has_self.insert(def_id);\n                 }\n             }\n-            Res::Def(DefKind::Ctor(CtorOf::Struct, ..), def_id) => {\n-                let parent = cstore.def_key(def_id).parent;\n-                if let Some(struct_def_id) = parent.map(|index| DefId { index, ..def_id }) {\n-                    self.r.struct_constructors.insert(struct_def_id, (res, vis, vec![]));\n-                }\n-            }\n             _ => {}\n         }\n     }"}]}