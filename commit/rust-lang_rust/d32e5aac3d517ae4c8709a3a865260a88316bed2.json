{"sha": "d32e5aac3d517ae4c8709a3a865260a88316bed2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzMmU1YWFjM2Q1MTdhZTRjODcwOWEzYTg2NTI2MGE4ODMxNmJlZDI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-04-07T09:43:36Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-04-15T11:06:29Z"}, "message": "use the `activations_at_location` map to check activations\n\nNot gen bits", "tree": {"sha": "5cbd7d9ca989ddb17e9e7934cd2044c0cd9e8146", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5cbd7d9ca989ddb17e9e7934cd2044c0cd9e8146"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d32e5aac3d517ae4c8709a3a865260a88316bed2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d32e5aac3d517ae4c8709a3a865260a88316bed2", "html_url": "https://github.com/rust-lang/rust/commit/d32e5aac3d517ae4c8709a3a865260a88316bed2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d32e5aac3d517ae4c8709a3a865260a88316bed2/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1f82aa5908911c6ab5db295d5ea279dfb8fc0e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1f82aa5908911c6ab5db295d5ea279dfb8fc0e2", "html_url": "https://github.com/rust-lang/rust/commit/e1f82aa5908911c6ab5db295d5ea279dfb8fc0e2"}], "stats": {"total": 69, "additions": 35, "deletions": 34}, "files": [{"sha": "1fae97566d0a58a6052a4b58f7eef6c0316a385d", "filename": "src/librustc_mir/borrow_check/borrow_set.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d32e5aac3d517ae4c8709a3a865260a88316bed2/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d32e5aac3d517ae4c8709a3a865260a88316bed2/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs?ref=d32e5aac3d517ae4c8709a3a865260a88316bed2", "patch": "@@ -35,7 +35,7 @@ crate struct BorrowSet<'tcx> {\n     /// NOTE: A given location may activate more than one borrow in the future\n     /// when more general two-phase borrow support is introduced, but for now we\n     /// only need to store one borrow index\n-    crate activation_map: FxHashMap<Location, FxHashSet<BorrowIndex>>,\n+    crate activation_map: FxHashMap<Location, Vec<BorrowIndex>>,\n \n     /// Every borrow has a region; this maps each such regions back to\n     /// its borrow-indexes.\n@@ -131,7 +131,7 @@ struct GatherBorrows<'a, 'gcx: 'tcx, 'tcx: 'a> {\n     mir: &'a Mir<'tcx>,\n     idx_vec: IndexVec<BorrowIndex, BorrowData<'tcx>>,\n     location_map: FxHashMap<Location, BorrowIndex>,\n-    activation_map: FxHashMap<Location, FxHashSet<BorrowIndex>>,\n+    activation_map: FxHashMap<Location, Vec<BorrowIndex>>,\n     region_map: FxHashMap<Region<'tcx>, FxHashSet<BorrowIndex>>,\n     local_map: FxHashMap<mir::Local, FxHashSet<BorrowIndex>>,\n     region_span_map: FxHashMap<RegionKind, Span>,\n@@ -230,8 +230,8 @@ impl<'a, 'gcx, 'tcx> Visitor<'tcx> for GatherBorrows<'a, 'gcx, 'tcx> {\n                     borrow_data.activation_location = Some(location);\n                     self.activation_map\n                         .entry(location)\n-                        .or_insert(FxHashSet())\n-                        .insert(borrow_index);\n+                        .or_insert(Vec::new())\n+                        .push(borrow_index);\n                 }\n \n                 None => {}"}, {"sha": "dd76b883d63d2c087d32178e28a3582e8c51bfc9", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 24, "deletions": 30, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/d32e5aac3d517ae4c8709a3a865260a88316bed2/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d32e5aac3d517ae4c8709a3a865260a88316bed2/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=d32e5aac3d517ae4c8709a3a865260a88316bed2", "patch": "@@ -1267,36 +1267,30 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         // Two-phase borrow support: For each activation that is newly\n         // generated at this statement, check if it interferes with\n         // another borrow.\n-        let domain = flow_state.borrows.operator();\n-        let data = domain.borrows();\n-        flow_state.borrows.each_gen_bit(|gen| {\n-            if gen.is_activation() {\n-                let borrow_index = gen.borrow_index();\n-                let borrow = &data[borrow_index];\n-                // currently the flow analysis registers\n-                // activations for both mutable and immutable\n-                // borrows. So make sure we are talking about a\n-                // mutable borrow before we check it.\n-                match borrow.kind {\n-                    BorrowKind::Shared => return,\n-                    BorrowKind::Unique | BorrowKind::Mut { .. } => {}\n-                }\n-\n-                self.access_place(\n-                    ContextKind::Activation.new(location),\n-                    (&borrow.borrowed_place, span),\n-                    (\n-                        Deep,\n-                        Activation(WriteKind::MutableBorrow(borrow.kind), borrow_index),\n-                    ),\n-                    LocalMutationIsAllowed::No,\n-                    flow_state,\n-                );\n-                // We do not need to call `check_if_path_or_subpath_is_moved`\n-                // again, as we already called it when we made the\n-                // initial reservation.\n-            }\n-        });\n+        let borrows = flow_state.borrows.operator();\n+        for &borrow_index in borrows.activations_at_location(location) {\n+            let borrow = &borrows.borrows()[borrow_index];\n+\n+            // only mutable borrows should be 2-phase\n+            assert!(match borrow.kind {\n+                BorrowKind::Shared => false,\n+                BorrowKind::Unique | BorrowKind::Mut { .. } => true,\n+            });\n+\n+            self.access_place(\n+                ContextKind::Activation.new(location),\n+                (&borrow.borrowed_place, span),\n+                (\n+                    Deep,\n+                    Activation(WriteKind::MutableBorrow(borrow.kind), borrow_index),\n+                ),\n+                LocalMutationIsAllowed::No,\n+                flow_state,\n+            );\n+            // We do not need to call `check_if_path_or_subpath_is_moved`\n+            // again, as we already called it when we made the\n+            // initial reservation.\n+        }\n     }\n }\n "}, {"sha": "190d08e83de4ff7dd1f0e2c33e267995897d25dc", "filename": "src/librustc_mir/dataflow/impls/borrows.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d32e5aac3d517ae4c8709a3a865260a88316bed2/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d32e5aac3d517ae4c8709a3a865260a88316bed2/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs?ref=d32e5aac3d517ae4c8709a3a865260a88316bed2", "patch": "@@ -156,6 +156,13 @@ impl<'a, 'gcx, 'tcx> Borrows<'a, 'gcx, 'tcx> {\n         }\n     }\n \n+    crate fn activations_at_location(&self, location: Location) -> &[BorrowIndex] {\n+        self.borrow_set.activation_map\n+            .get(&location)\n+            .map(|activations| &activations[..])\n+            .unwrap_or(&[])\n+    }\n+\n     /// Performs the activations for a given location\n     fn perform_activations_at_location(&self,\n                                        sets: &mut BlockSets<ReserveOrActivateIndex>,"}]}