{"sha": "ab80f7467087289931bf5eda07cadc70922ccc94", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiODBmNzQ2NzA4NzI4OTkzMWJmNWVkYTA3Y2FkYzcwOTIyY2NjOTQ=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-06-02T16:28:29Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-07-08T14:42:47Z"}, "message": "collector-driven-trans: Take care of nits.", "tree": {"sha": "a13881c27b9f0f50b01bbb002d4106d70d958408", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a13881c27b9f0f50b01bbb002d4106d70d958408"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab80f7467087289931bf5eda07cadc70922ccc94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab80f7467087289931bf5eda07cadc70922ccc94", "html_url": "https://github.com/rust-lang/rust/commit/ab80f7467087289931bf5eda07cadc70922ccc94", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab80f7467087289931bf5eda07cadc70922ccc94/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "00226fc0c8f9d3579db32c6b46fe2a3e4e12cf29", "url": "https://api.github.com/repos/rust-lang/rust/commits/00226fc0c8f9d3579db32c6b46fe2a3e4e12cf29", "html_url": "https://github.com/rust-lang/rust/commit/00226fc0c8f9d3579db32c6b46fe2a3e4e12cf29"}], "stats": {"total": 65, "additions": 35, "deletions": 30}, "files": [{"sha": "071d9d68dbb40e3e89b6e33901b6c7b1f29c22b9", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ab80f7467087289931bf5eda07cadc70922ccc94/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab80f7467087289931bf5eda07cadc70922ccc94/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=ab80f7467087289931bf5eda07cadc70922ccc94", "patch": "@@ -2667,9 +2667,10 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     {\n         let ccx = crate_context_list.get_ccx(0);\n \n+        // FIXME: #34018\n         // At this point, we only walk the HIR for running\n         // enum_variant_size_lint(). This should arguably be moved somewhere\n-        // else\n+        // else.\n         {\n             intravisit::walk_mod(&mut TransItemsWithinModVisitor { ccx: &ccx }, &krate.module);\n             krate.visit_all_items(&mut TransModVisitor { ccx: &ccx });"}, {"sha": "c4a5a1864f638a24a6e1c6460d6934dcbb3ebb5b", "filename": "src/librustc_trans/callee.rs", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ab80f7467087289931bf5eda07cadc70922ccc94/src%2Flibrustc_trans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab80f7467087289931bf5eda07cadc70922ccc94/src%2Flibrustc_trans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcallee.rs?ref=ab80f7467087289931bf5eda07cadc70922ccc94", "patch": "@@ -537,20 +537,15 @@ fn get_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n     // reference. It also occurs when testing libcore and in some\n     // other weird situations. Annoying.\n \n-    // Let's see if we can get the symbol name from the symbol_map, so we don't\n-    // have to recompute it.\n-    let mut sym_data = String::new();\n-    let sym = ccx.symbol_map().get(TransItem::Fn(instance)).unwrap_or_else(|| {\n-        sym_data = instance.symbol_name(ccx.shared());\n-        &sym_data[..]\n-    });\n+    let sym = ccx.symbol_map().get_or_compute(ccx.shared(),\n+                                              TransItem::Fn(instance));\n \n     let llptrty = type_of::type_of(ccx, fn_ptr_ty);\n-    let llfn = if let Some(llfn) = declare::get_declared_value(ccx, sym) {\n+    let llfn = if let Some(llfn) = declare::get_declared_value(ccx, &sym) {\n         if let Some(span) = local_item {\n-            if declare::get_defined_value(ccx, sym).is_some() {\n+            if declare::get_defined_value(ccx, &sym).is_some() {\n                 ccx.sess().span_fatal(span,\n-                    &format!(\"symbol `{}` is already defined\", sym));\n+                    &format!(\"symbol `{}` is already defined\", &sym));\n             }\n         }\n \n@@ -566,7 +561,7 @@ fn get_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n             llfn\n         }\n     } else {\n-        let llfn = declare::declare_fn(ccx, sym, ty);\n+        let llfn = declare::declare_fn(ccx, &sym, ty);\n         assert_eq!(common::val_ty(llfn), llptrty);\n         debug!(\"get_fn: not casting pointer!\");\n "}, {"sha": "3b4a9499a11bae7d6730f9d2f023f3fb3ed74845", "filename": "src/librustc_trans/glue.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ab80f7467087289931bf5eda07cadc70922ccc94/src%2Flibrustc_trans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab80f7467087289931bf5eda07cadc70922ccc94/src%2Flibrustc_trans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fglue.rs?ref=ab80f7467087289931bf5eda07cadc70922ccc94", "patch": "@@ -235,7 +235,8 @@ fn get_drop_glue_core<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n     let g = g.map_ty(|t| get_drop_glue_type(ccx.tcx(), t));\n     match ccx.drop_glues().borrow().get(&g) {\n         Some(&(glue, _)) => glue,\n-        None => { bug!(\"Could not find drop glue for {:?} -- {} -- {}\",\n+        None => { bug!(\"Could not find drop glue for {:?} -- {} -- {}. \\\n+                        It should have be instantiated during the pre-definition phase\",\n                        g,\n                        TransItem::DropGlue(g).to_raw_string(),\n                        ccx.codegen_unit().name) }"}, {"sha": "f12eb1cd8e1fbdc7d3db26406cb9adfa4db40778", "filename": "src/librustc_trans/monomorphize.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ab80f7467087289931bf5eda07cadc70922ccc94/src%2Flibrustc_trans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab80f7467087289931bf5eda07cadc70922ccc94/src%2Flibrustc_trans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmonomorphize.rs?ref=ab80f7467087289931bf5eda07cadc70922ccc94", "patch": "@@ -84,19 +84,14 @@ pub fn monomorphic_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n         monomorphizing.insert(fn_id, depth + 1);\n     }\n \n-    // Let's see if we can get the symbol name from the symbol_map, so we don't\n-    // have to recompute it.\n-    let mut sym_data = String::new();\n-    let symbol = ccx.symbol_map().get(TransItem::Fn(instance)).unwrap_or_else(|| {\n-        sym_data = instance.symbol_name(ccx.shared());\n-        &sym_data[..]\n-    });\n+    let symbol = ccx.symbol_map().get_or_compute(ccx.shared(),\n+                                                 TransItem::Fn(instance));\n \n-    debug!(\"monomorphize_fn mangled to {}\", symbol);\n-    assert!(declare::get_defined_value(ccx, symbol).is_none());\n+    debug!(\"monomorphize_fn mangled to {}\", &symbol);\n+    assert!(declare::get_defined_value(ccx, &symbol).is_none());\n \n     // FIXME(nagisa): perhaps needs a more fine grained selection?\n-    let lldecl = declare::define_internal_fn(ccx, symbol, mono_ty);\n+    let lldecl = declare::define_internal_fn(ccx, &symbol, mono_ty);\n     // FIXME(eddyb) Doubt all extern fn should allow unwinding.\n     attributes::unwind(lldecl, true);\n "}, {"sha": "785c193c855707451ccb499e1231f156255e95aa", "filename": "src/librustc_trans/partitioning.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ab80f7467087289931bf5eda07cadc70922ccc94/src%2Flibrustc_trans%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab80f7467087289931bf5eda07cadc70922ccc94/src%2Flibrustc_trans%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fpartitioning.rs?ref=ab80f7467087289931bf5eda07cadc70922ccc94", "patch": "@@ -154,8 +154,7 @@ impl<'tcx> CodegenUnit<'tcx> {\n \n         // The codegen tests rely on items being process in the same order as\n         // they appear in the file, so for local items, we sort by node_id first\n-        items.as_mut_slice().sort_by(|&(trans_item1, _), &(trans_item2, _)| {\n-\n+        items.sort_by(|&(trans_item1, _), &(trans_item2, _)| {\n             let node_id1 = local_node_id(tcx, trans_item1);\n             let node_id2 = local_node_id(tcx, trans_item2);\n \n@@ -165,6 +164,7 @@ impl<'tcx> CodegenUnit<'tcx> {\n                     let symbol_name2 = symbol_map.get(trans_item2).unwrap();\n                     symbol_name1.cmp(symbol_name2)\n                 }\n+                // In the following two cases we can avoid looking up the symbol\n                 (None, Some(_)) => Ordering::Less,\n                 (Some(_), None) => Ordering::Greater,\n                 (Some(node_id1), Some(node_id2)) => {\n@@ -241,7 +241,7 @@ pub fn partition<'a, 'tcx, I>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n     // Finally, sort by codegen unit name, so that we get deterministic results\n     let mut result = post_inlining.0;\n-    result.as_mut_slice().sort_by(|cgu1, cgu2| {\n+    result.sort_by(|cgu1, cgu2| {\n         (&cgu1.name[..]).cmp(&cgu2.name[..])\n     });\n \n@@ -348,7 +348,7 @@ fn merge_codegen_units<'tcx>(initial_partitioning: &mut PreInliningPartitioning<\n     // translation items in a given unit. This could be improved on.\n     while codegen_units.len() > target_cgu_count {\n         // Sort small cgus to the back\n-        codegen_units.as_mut_slice().sort_by_key(|cgu| -(cgu.items.len() as i64));\n+        codegen_units.sort_by_key(|cgu| -(cgu.items.len() as i64));\n         let smallest = codegen_units.pop().unwrap();\n         let second_smallest = codegen_units.last_mut().unwrap();\n "}, {"sha": "3faaa085dce14f3721642bd610065cab672f05db", "filename": "src/librustc_trans/symbol_map.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ab80f7467087289931bf5eda07cadc70922ccc94/src%2Flibrustc_trans%2Fsymbol_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab80f7467087289931bf5eda07cadc70922ccc94/src%2Flibrustc_trans%2Fsymbol_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsymbol_map.rs?ref=ab80f7467087289931bf5eda07cadc70922ccc94", "patch": "@@ -11,13 +11,15 @@\n use context::SharedCrateContext;\n use monomorphize::Instance;\n use rustc::ty::TyCtxt;\n+use std::borrow::Cow;\n use syntax::codemap::Span;\n use trans_item::TransItem;\n use util::nodemap::FnvHashMap;\n \n-\n // In the SymbolMap we collect the symbol names of all translation items of\n-// the current crate.\n+// the current crate. This map exists as a performance optimization. Symbol\n+// names of translation items are deterministic and fully defined by the item.\n+// Thus they could also always be recomputed if needed.\n \n pub struct SymbolMap<'tcx> {\n     index: FnvHashMap<TransItem<'tcx>, (usize, usize)>,\n@@ -112,4 +114,15 @@ impl<'tcx> SymbolMap<'tcx> {\n             &self.arena[start_index .. end_index]\n         })\n     }\n+\n+    pub fn get_or_compute<'map, 'scx>(&'map self,\n+                                      scx: &SharedCrateContext<'scx, 'tcx>,\n+                                      trans_item: TransItem<'tcx>)\n+                                      -> Cow<'map, str> {\n+        if let Some(sym) = self.get(trans_item) {\n+            Cow::from(sym)\n+        } else {\n+            Cow::from(trans_item.compute_symbol_name(scx))\n+        }\n+    }\n }"}, {"sha": "b4f8a116662ea9755bbcbfcd386c7d8a80a1bb3f", "filename": "src/librustc_trans/trans_item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab80f7467087289931bf5eda07cadc70922ccc94/src%2Flibrustc_trans%2Ftrans_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab80f7467087289931bf5eda07cadc70922ccc94/src%2Flibrustc_trans%2Ftrans_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans_item.rs?ref=ab80f7467087289931bf5eda07cadc70922ccc94", "patch": "@@ -222,7 +222,7 @@ impl<'a, 'tcx> TransItem<'tcx> {\n \n         assert!(declare::get_defined_value(ccx, symbol_name).is_none());\n         let llfn = declare::declare_cfn(ccx, symbol_name, llfnty);\n-\tllvm::SetLinkage(llfn, linkage);\n+        llvm::SetLinkage(llfn, linkage);\n         attributes::set_frame_pointer_elimination(ccx, llfn);\n         ccx.drop_glues().borrow_mut().insert(dg, (llfn, fn_ty));\n     }"}]}