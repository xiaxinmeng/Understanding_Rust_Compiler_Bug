{"sha": "6fd291981e1bb7deba30644c09798087e84203ec", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmZDI5MTk4MWUxYmI3ZGViYTMwNjQ0YzA5Nzk4MDg3ZTg0MjAzZWM=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-07-13T09:42:14Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-07-13T09:42:14Z"}, "message": "Sort imports in alphabetical and consistent order", "tree": {"sha": "db1d8913bb1c5374dbfd34afecd76bc791617aaf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/db1d8913bb1c5374dbfd34afecd76bc791617aaf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6fd291981e1bb7deba30644c09798087e84203ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6fd291981e1bb7deba30644c09798087e84203ec", "html_url": "https://github.com/rust-lang/rust/commit/6fd291981e1bb7deba30644c09798087e84203ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6fd291981e1bb7deba30644c09798087e84203ec/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27b04fec1a05b4ebf034dcd466a04bb40fd06f4f", "url": "https://api.github.com/repos/rust-lang/rust/commits/27b04fec1a05b4ebf034dcd466a04bb40fd06f4f", "html_url": "https://github.com/rust-lang/rust/commit/27b04fec1a05b4ebf034dcd466a04bb40fd06f4f"}], "stats": {"total": 275, "additions": 140, "deletions": 135}, "files": [{"sha": "b07a40804ddc7cfcbbb667b72f1504677e57ef3e", "filename": "src/bin/cargo-fmt.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6fd291981e1bb7deba30644c09798087e84203ec/src%2Fbin%2Fcargo-fmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fd291981e1bb7deba30644c09798087e84203ec/src%2Fbin%2Fcargo-fmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fcargo-fmt.rs?ref=6fd291981e1bb7deba30644c09798087e84203ec", "patch": "@@ -24,10 +24,9 @@ use std::str;\n use std::collections::HashSet;\n use std::iter::FromIterator;\n \n+use getopts::{Matches, Options};\n use json::Value;\n \n-use getopts::{Options, Matches};\n-\n fn main() {\n     let exit_status = execute();\n     std::io::stdout().flush().unwrap();"}, {"sha": "f0846b43ea8c183b183e799f0d60e93c78ca7dc0", "filename": "src/bin/rustfmt.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6fd291981e1bb7deba30644c09798087e84203ec/src%2Fbin%2Frustfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fd291981e1bb7deba30644c09798087e84203ec/src%2Fbin%2Frustfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Frustfmt.rs?ref=6fd291981e1bb7deba30644c09798087e84203ec", "patch": "@@ -17,10 +17,6 @@ extern crate toml;\n extern crate env_logger;\n extern crate getopts;\n \n-use rustfmt::{run, Input, Summary};\n-use rustfmt::file_lines::FileLines;\n-use rustfmt::config::{Config, WriteMode, get_toml_path};\n-\n use std::{env, error};\n use std::fs::File;\n use std::io::{self, Read, Write};\n@@ -29,6 +25,10 @@ use std::str::FromStr;\n \n use getopts::{Matches, Options};\n \n+use rustfmt::{run, Input, Summary};\n+use rustfmt::file_lines::FileLines;\n+use rustfmt::config::{get_toml_path, Config, WriteMode};\n+\n type FmtError = Box<error::Error + Send + Sync>;\n type FmtResult<T> = std::result::Result<T, FmtError>;\n "}, {"sha": "fdf0a80709b3f418e69406aab9d88a58f2e2f387", "filename": "src/chains.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6fd291981e1bb7deba30644c09798087e84203ec/src%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fd291981e1bb7deba30644c09798087e84203ec/src%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchains.rs?ref=6fd291981e1bb7deba30644c09798087e84203ec", "patch": "@@ -77,11 +77,11 @@\n /// ```\n \n use Shape;\n-use rewrite::{Rewrite, RewriteContext};\n-use utils::{wrap_str, first_line_width, last_line_width, mk_sp, last_line_extendable};\n-use expr::rewrite_call;\n use config::IndentStyle;\n+use expr::rewrite_call;\n use macros::convert_try_mac;\n+use rewrite::{Rewrite, RewriteContext};\n+use utils::{first_line_width, last_line_extendable, last_line_width, mk_sp, wrap_str};\n \n use std::cmp::min;\n use std::iter;"}, {"sha": "0934ed3f71920f91542a0507ecd9bad0d484d61d", "filename": "src/checkstyle.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6fd291981e1bb7deba30644c09798087e84203ec/src%2Fcheckstyle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fd291981e1bb7deba30644c09798087e84203ec/src%2Fcheckstyle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcheckstyle.rs?ref=6fd291981e1bb7deba30644c09798087e84203ec", "patch": "@@ -7,10 +7,11 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-use rustfmt_diff::{Mismatch, DiffLine};\n+\n use std::io::{self, Write};\n-use config::WriteMode;\n \n+use config::WriteMode;\n+use rustfmt_diff::{DiffLine, Mismatch};\n \n pub fn output_header<T>(out: &mut T, mode: WriteMode) -> Result<(), io::Error>\n where"}, {"sha": "b3fd171b86f1f06c01f37dc9917020f8dbb63102", "filename": "src/comment.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6fd291981e1bb7deba30644c09798087e84203ec/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fd291981e1bb7deba30644c09798087e84203ec/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=6fd291981e1bb7deba30644c09798087e84203ec", "patch": "@@ -17,7 +17,7 @@ use syntax::codemap::Span;\n use {Indent, Shape};\n use config::Config;\n use rewrite::RewriteContext;\n-use string::{StringFormat, rewrite_string};\n+use string::{rewrite_string, StringFormat};\n use utils::wrap_str;\n \n fn is_custom_comment(comment: &str) -> bool {\n@@ -809,8 +809,8 @@ fn remove_comment_header(comment: &str) -> &str {\n \n #[cfg(test)]\n mod test {\n-    use super::{CharClasses, CodeCharKind, FullCodeCharKind, contains_comment, rewrite_comment,\n-                FindUncommented, CommentCodeSlices};\n+    use super::{contains_comment, rewrite_comment, CharClasses, CodeCharKind, CommentCodeSlices,\n+                FindUncommented, FullCodeCharKind};\n     use {Indent, Shape};\n \n     #[test]"}, {"sha": "995e6164cf4580c9288f4012ca1f4f7a8ad94ea3", "filename": "src/config.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6fd291981e1bb7deba30644c09798087e84203ec/src%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fd291981e1bb7deba30644c09798087e84203ec/src%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig.rs?ref=6fd291981e1bb7deba30644c09798087e84203ec", "patch": "@@ -10,15 +10,14 @@\n \n extern crate toml;\n \n+use std::{env, fs};\n use std::cell::Cell;\n-use std::fs;\n use std::fs::File;\n-use std::env;\n use std::io::{Error, ErrorKind, Read};\n use std::path::{Path, PathBuf};\n \n use file_lines::FileLines;\n-use lists::{SeparatorTactic, ListTactic};\n+use lists::{ListTactic, SeparatorTactic};\n \n macro_rules! configuration_option_enum{\n     ($e:ident: $( $x:ident ),+ $(,)*) => {"}, {"sha": "88f56cfa25c08f5c920895615ca4ab7c8f8c39e3", "filename": "src/expr.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/6fd291981e1bb7deba30644c09798087e84203ec/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fd291981e1bb7deba30644c09798087e84203ec/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=6fd291981e1bb7deba30644c09798087e84203ec", "patch": "@@ -8,33 +8,33 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::cmp::{Ordering, min};\n-use std::iter::ExactSizeIterator;\n+use std::cmp::{min, Ordering};\n use std::fmt::Write;\n+use std::iter::ExactSizeIterator;\n+\n+use syntax::{ast, ptr};\n+use syntax::codemap::{BytePos, CodeMap, Span};\n+use syntax::parse::classify;\n \n use {Indent, Shape, Spanned};\n-use codemap::SpanUtils;\n-use rewrite::{Rewrite, RewriteContext};\n-use lists::{write_list, itemize_list, ListFormatting, SeparatorTactic, ListTactic,\n-            DefinitiveListTactic, definitive_tactic, ListItem, struct_lit_shape,\n-            struct_lit_tactic, shape_for_tactic, struct_lit_formatting};\n-use string::{StringFormat, rewrite_string};\n-use utils::{extra_offset, last_line_width, wrap_str, binary_search, first_line_width,\n-            semicolon_for_stmt, trimmed_last_line_width, left_most_sub_expr, stmt_expr,\n-            colon_spaces, contains_skip, mk_sp, last_line_extendable, paren_overhead};\n-use visitor::FmtVisitor;\n-use config::{Config, IndentStyle, MultilineStyle, ControlBraceStyle, Style};\n-use comment::{FindUncommented, rewrite_comment, contains_comment, recover_comment_removed};\n-use types::{rewrite_path, PathContext, can_be_overflowed_type};\n-use items::{span_lo_for_arg, span_hi_for_arg};\n use chains::rewrite_chain;\n+use codemap::SpanUtils;\n+use comment::{contains_comment, recover_comment_removed, rewrite_comment, FindUncommented};\n+use config::{Config, ControlBraceStyle, IndentStyle, MultilineStyle, Style};\n+use items::{span_hi_for_arg, span_lo_for_arg};\n+use lists::{definitive_tactic, itemize_list, shape_for_tactic, struct_lit_formatting,\n+            struct_lit_shape, struct_lit_tactic, write_list, DefinitiveListTactic, ListFormatting,\n+            ListItem, ListTactic, SeparatorTactic};\n use macros::{rewrite_macro, MacroPosition};\n-use patterns::{TuplePatField, can_be_overflowed_pat};\n+use patterns::{can_be_overflowed_pat, TuplePatField};\n+use rewrite::{Rewrite, RewriteContext};\n+use string::{rewrite_string, StringFormat};\n+use types::{can_be_overflowed_type, rewrite_path, PathContext};\n+use utils::{binary_search, colon_spaces, contains_skip, extra_offset, first_line_width,\n+            last_line_extendable, last_line_width, left_most_sub_expr, mk_sp, paren_overhead,\n+            semicolon_for_stmt, stmt_expr, trimmed_last_line_width, wrap_str};\n use vertical::rewrite_with_alignment;\n-\n-use syntax::{ast, ptr};\n-use syntax::codemap::{CodeMap, Span, BytePos};\n-use syntax::parse::classify;\n+use visitor::FmtVisitor;\n \n impl Rewrite for ast::Expr {\n     fn rewrite(&self, context: &RewriteContext, shape: Shape) -> Option<String> {"}, {"sha": "ee0a21b39b130d981a82409666ccedda06d31bdf", "filename": "src/filemap.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6fd291981e1bb7deba30644c09798087e84203ec/src%2Ffilemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fd291981e1bb7deba30644c09798087e84203ec/src%2Ffilemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffilemap.rs?ref=6fd291981e1bb7deba30644c09798087e84203ec", "patch": "@@ -11,14 +11,14 @@\n \n // TODO: add tests\n \n-use strings::string_buffer::StringBuffer;\n-\n use std::fs::{self, File};\n-use std::io::{self, Write, Read, BufWriter};\n+use std::io::{self, BufWriter, Read, Write};\n+\n+use strings::string_buffer::StringBuffer;\n \n-use config::{NewlineStyle, Config, WriteMode};\n+use checkstyle::{output_checkstyle_file, output_footer, output_header};\n+use config::{Config, NewlineStyle, WriteMode};\n use rustfmt_diff::{make_diff, print_diff, Mismatch};\n-use checkstyle::{output_header, output_footer, output_checkstyle_file};\n \n // A map of the files of a crate, with their new content\n pub type FileMap = Vec<FileRecord>;"}, {"sha": "a43b281f3cfa4ad5556815f2e78176ea93600610", "filename": "src/imports.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6fd291981e1bb7deba30644c09798087e84203ec/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fd291981e1bb7deba30644c09798087e84203ec/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=6fd291981e1bb7deba30644c09798087e84203ec", "patch": "@@ -8,17 +8,18 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use Shape;\n-use utils;\n+use std::cmp::{self, Ordering};\n+\n+use syntax::{ast, ptr};\n use syntax::codemap::{BytePos, Span};\n+\n+use Shape;\n use codemap::SpanUtils;\n-use lists::{write_list, itemize_list, ListItem, ListFormatting, SeparatorTactic, definitive_tactic};\n-use types::{rewrite_path, PathContext};\n+use lists::{definitive_tactic, itemize_list, write_list, ListFormatting, ListItem, SeparatorTactic};\n use rewrite::{Rewrite, RewriteContext};\n+use types::{rewrite_path, PathContext};\n+use utils;\n use visitor::FmtVisitor;\n-use std::cmp::{self, Ordering};\n-\n-use syntax::{ast, ptr};\n \n fn path_of(a: &ast::ViewPath_) -> &ast::Path {\n     match *a {"}, {"sha": "b81f902d59f3f40ccef41157c0f0da33bf8f32ce", "filename": "src/issues.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6fd291981e1bb7deba30644c09798087e84203ec/src%2Fissues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fd291981e1bb7deba30644c09798087e84203ec/src%2Fissues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fissues.rs?ref=6fd291981e1bb7deba30644c09798087e84203ec", "patch": "@@ -13,6 +13,7 @@\n // associated issue number.\n \n use std::fmt;\n+\n pub use config::ReportTactic;\n \n const TO_DO_CHARS: &'static [char] = &['T', 'O', 'D', 'O'];"}, {"sha": "eb15e95fabb382bd508aa9bb8b9b8e46cb812e29", "filename": "src/items.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6fd291981e1bb7deba30644c09798087e84203ec/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fd291981e1bb7deba30644c09798087e84203ec/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=6fd291981e1bb7deba30644c09798087e84203ec", "patch": "@@ -10,25 +10,25 @@\n \n // Formatting top-level items - functions, structs, enums, traits, impls.\n \n+use syntax::{abi, ast, ptr, symbol};\n+use syntax::ast::ImplItem;\n+use syntax::codemap::{BytePos, Span};\n+\n use {Indent, Shape, Spanned};\n use codemap::SpanUtils;\n-use utils::{format_mutability, format_visibility, contains_skip, end_typaram, wrap_str,\n-            last_line_width, format_unsafety, trim_newlines, stmt_expr, semicolon_for_expr,\n-            trimmed_last_line_width, colon_spaces, mk_sp};\n-use lists::{write_list, itemize_list, ListItem, ListFormatting, SeparatorTactic,\n-            DefinitiveListTactic, ListTactic, definitive_tactic};\n+use comment::{contains_comment, recover_comment_removed, rewrite_comment, FindUncommented};\n+use config::{BraceStyle, Config, Density, IndentStyle, ReturnIndent, Style};\n use expr::{format_expr, is_empty_block, is_simple_block_stmt, rewrite_assign_rhs,\n            rewrite_call_inner, ExprType};\n-use comment::{FindUncommented, contains_comment, rewrite_comment, recover_comment_removed};\n-use visitor::FmtVisitor;\n+use lists::{definitive_tactic, itemize_list, write_list, DefinitiveListTactic, ListFormatting,\n+            ListItem, ListTactic, SeparatorTactic};\n use rewrite::{Rewrite, RewriteContext};\n-use config::{Config, IndentStyle, Density, ReturnIndent, BraceStyle, Style};\n use types::join_bounds;\n+use utils::{colon_spaces, contains_skip, end_typaram, format_mutability, format_unsafety,\n+            format_visibility, last_line_width, mk_sp, semicolon_for_expr, stmt_expr,\n+            trim_newlines, trimmed_last_line_width, wrap_str};\n use vertical::rewrite_with_alignment;\n-\n-use syntax::{ast, abi, ptr, symbol};\n-use syntax::codemap::{Span, BytePos};\n-use syntax::ast::ImplItem;\n+use visitor::FmtVisitor;\n \n fn type_annotation_separator(config: &Config) -> &str {\n     colon_spaces("}, {"sha": "088f0950f104d104b787a0e35f7c08bbae43f3af", "filename": "src/lib.rs", "status": "modified", "additions": 13, "deletions": 18, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/6fd291981e1bb7deba30644c09798087e84203ec/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fd291981e1bb7deba30644c09798087e84203ec/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=6fd291981e1bb7deba30644c09798087e84203ec", "patch": "@@ -28,27 +28,26 @@ extern crate regex;\n extern crate diff;\n extern crate term;\n \n-use errors::{Handler, DiagnosticBuilder};\n-use errors::emitter::{ColorConfig, EmitterWriter};\n-use syntax::ast;\n-use syntax::codemap::{CodeMap, Span, FilePathMapping};\n-use syntax::parse::{self, ParseSess};\n-\n-use strings::string_buffer::StringBuffer;\n-\n+use std::collections::HashMap;\n+use std::fmt;\n use std::io::{self, stdout, Write};\n use std::ops::{Add, Sub};\n use std::path::{Path, PathBuf};\n use std::rc::Rc;\n-use std::collections::HashMap;\n-use std::fmt;\n \n-use issues::{BadIssueSeeker, Issue};\n-use filemap::FileMap;\n-use visitor::FmtVisitor;\n+use errors::{DiagnosticBuilder, Handler};\n+use errors::emitter::{ColorConfig, EmitterWriter};\n+use strings::string_buffer::StringBuffer;\n+use syntax::ast;\n+use syntax::codemap::{CodeMap, FilePathMapping, Span};\n+use syntax::parse::{self, ParseSess};\n+\n+use checkstyle::{output_footer, output_header};\n use config::Config;\n-use checkstyle::{output_header, output_footer};\n+use filemap::FileMap;\n+use issues::{BadIssueSeeker, Issue};\n use utils::mk_sp;\n+use visitor::FmtVisitor;\n \n pub use self::summary::Summary;\n \n@@ -78,10 +77,6 @@ mod patterns;\n mod summary;\n mod vertical;\n \n-const MIN_STRING: usize = 10;\n-// When we get scoped annotations, we should have rustfmt::skip.\n-const SKIP_ANNOTATION: &'static str = \"rustfmt_skip\";\n-\n pub trait Spanned {\n     fn span(&self) -> Span;\n }"}, {"sha": "e55103d0df81b177580ca89ea8650ea3102bbed1", "filename": "src/lists.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fd291981e1bb7deba30644c09798087e84203ec/src%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fd291981e1bb7deba30644c09798087e84203ec/src%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flists.rs?ref=6fd291981e1bb7deba30644c09798087e84203ec", "patch": "@@ -11,7 +11,7 @@\n use std::cmp;\n use std::iter::Peekable;\n \n-use syntax::codemap::{CodeMap, BytePos};\n+use syntax::codemap::{BytePos, CodeMap};\n \n use {Indent, Shape};\n use comment::{find_comment_end, rewrite_comment, FindUncommented};"}, {"sha": "989aaaaa58c4dc78c14bf0d253da40a0bebd8f76", "filename": "src/macros.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6fd291981e1bb7deba30644c09798087e84203ec/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fd291981e1bb7deba30644c09798087e84203ec/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=6fd291981e1bb7deba30644c09798087e84203ec", "patch": "@@ -21,17 +21,17 @@\n \n use syntax::ast;\n use syntax::codemap::BytePos;\n-use syntax::parse::token::Token;\n use syntax::parse::new_parser_from_tts;\n-use syntax::tokenstream::TokenStream;\n+use syntax::parse::token::Token;\n use syntax::symbol;\n+use syntax::tokenstream::TokenStream;\n use syntax::util::ThinVec;\n \n use Shape;\n use codemap::SpanUtils;\n+use comment::{contains_comment, FindUncommented};\n+use expr::{rewrite_array, rewrite_call_inner};\n use rewrite::{Rewrite, RewriteContext};\n-use expr::{rewrite_call_inner, rewrite_array};\n-use comment::{FindUncommented, contains_comment};\n use utils::mk_sp;\n \n const FORCED_BRACKET_MACROS: &'static [&'static str] = &[\"vec!\"];"}, {"sha": "ac3ad906d17ef8a801d8735020439befa71ec05d", "filename": "src/missed_spans.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6fd291981e1bb7deba30644c09798087e84203ec/src%2Fmissed_spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fd291981e1bb7deba30644c09798087e84203ec/src%2Fmissed_spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmissed_spans.rs?ref=6fd291981e1bb7deba30644c09798087e84203ec", "patch": "@@ -8,12 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use config::WriteMode;\n-use visitor::FmtVisitor;\n-use syntax::codemap::{BytePos, Span, Pos};\n-use comment::{CodeCharKind, CommentCodeSlices, rewrite_comment};\n use Shape;\n+use comment::{rewrite_comment, CodeCharKind, CommentCodeSlices};\n+use config::WriteMode;\n+use syntax::codemap::{BytePos, Pos, Span};\n use utils::mk_sp;\n+use visitor::FmtVisitor;\n \n impl<'a> FmtVisitor<'a> {\n     fn output_at_start(&self) -> bool {"}, {"sha": "8e728f98cd1ae5559eb96c0daf50a71d687603db", "filename": "src/modules.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6fd291981e1bb7deba30644c09798087e84203ec/src%2Fmodules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fd291981e1bb7deba30644c09798087e84203ec/src%2Fmodules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmodules.rs?ref=6fd291981e1bb7deba30644c09798087e84203ec", "patch": "@@ -8,15 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use utils;\n-\n-use std::path::{Path, PathBuf};\n use std::collections::BTreeMap;\n+use std::path::{Path, PathBuf};\n \n use syntax::ast;\n use syntax::codemap;\n use syntax::parse::parser;\n \n+use utils::contains_skip;\n+\n \n /// List all the files containing modules of a crate.\n /// If a file is used twice in a crate, it appears only once.\n@@ -46,7 +46,7 @@ fn list_submodules<'a>(\n     debug!(\"list_submodules: search_dir: {:?}\", search_dir);\n     for item in &module.items {\n         if let ast::ItemKind::Mod(ref sub_mod) = item.node {\n-            if !utils::contains_skip(&item.attrs) {\n+            if !contains_skip(&item.attrs) {\n                 let is_internal =\n                     codemap.span_to_filename(item.span) == codemap.span_to_filename(sub_mod.inner);\n                 let dir_path = if is_internal {"}, {"sha": "544285ec213beb87fbc04d9c9418ef7209153d97", "filename": "src/patterns.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/6fd291981e1bb7deba30644c09798087e84203ec/src%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fd291981e1bb7deba30644c09798087e84203ec/src%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpatterns.rs?ref=6fd291981e1bb7deba30644c09798087e84203ec", "patch": "@@ -8,21 +8,20 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use Shape;\n+use syntax::ast::{self, BindingMode, FieldPat, Pat, PatKind, RangeEnd};\n+use syntax::codemap::{self, BytePos, Span};\n+use syntax::ptr;\n+\n+use {Shape, Spanned};\n use codemap::SpanUtils;\n-use rewrite::{Rewrite, RewriteContext};\n-use utils::{wrap_str, format_mutability, mk_sp};\n-use lists::{DefinitiveListTactic, SeparatorTactic, itemize_list, struct_lit_shape,\n-            struct_lit_tactic, shape_for_tactic, struct_lit_formatting, write_list};\n-use expr::{rewrite_call_inner, rewrite_unary_prefix, rewrite_pair, can_be_overflowed_expr,\n+use comment::FindUncommented;\n+use expr::{can_be_overflowed_expr, rewrite_call_inner, rewrite_pair, rewrite_unary_prefix,\n            wrap_struct_field};\n+use lists::{itemize_list, shape_for_tactic, struct_lit_formatting, struct_lit_shape,\n+            struct_lit_tactic, write_list, DefinitiveListTactic, SeparatorTactic};\n+use rewrite::{Rewrite, RewriteContext};\n use types::{rewrite_path, PathContext};\n-use super::Spanned;\n-use comment::FindUncommented;\n-\n-use syntax::ast::{self, BindingMode, Pat, PatKind, FieldPat, RangeEnd};\n-use syntax::ptr;\n-use syntax::codemap::{self, BytePos, Span};\n+use utils::{format_mutability, mk_sp, wrap_str};\n \n impl Rewrite for Pat {\n     fn rewrite(&self, context: &RewriteContext, shape: Shape) -> Option<String> {"}, {"sha": "3e9fd913d7c67d39f1e5cf443bcc7b33ef1f22fc", "filename": "src/rustfmt_diff.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6fd291981e1bb7deba30644c09798087e84203ec/src%2Frustfmt_diff.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fd291981e1bb7deba30644c09798087e84203ec/src%2Frustfmt_diff.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustfmt_diff.rs?ref=6fd291981e1bb7deba30644c09798087e84203ec", "patch": "@@ -1,7 +1,17 @@\n-use std::collections::VecDeque;\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n use diff;\n-use term;\n+use std::collections::VecDeque;\n use std::io;\n+use term;\n \n #[derive(Debug, PartialEq)]\n pub enum DiffLine {"}, {"sha": "00d8c0875e5bd50bc9a17baebbe16654d067dae2", "filename": "src/string.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6fd291981e1bb7deba30644c09798087e84203ec/src%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fd291981e1bb7deba30644c09798087e84203ec/src%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstring.rs?ref=6fd291981e1bb7deba30644c09798087e84203ec", "patch": "@@ -10,14 +10,14 @@\n \n // Format string literals.\n \n-use unicode_segmentation::UnicodeSegmentation;\n use regex::Regex;\n+use unicode_segmentation::UnicodeSegmentation;\n \n use Shape;\n use config::Config;\n use utils::wrap_str;\n \n-use MIN_STRING;\n+const MIN_STRING: usize = 10;\n \n pub struct StringFormat<'a> {\n     pub opener: &'a str,\n@@ -127,7 +127,7 @@ pub fn rewrite_string<'a>(orig: &str, fmt: &StringFormat<'a>) -> Option<String>\n \n #[cfg(test)]\n mod test {\n-    use super::{StringFormat, rewrite_string};\n+    use super::{rewrite_string, StringFormat};\n \n     #[test]\n     fn issue343() {"}, {"sha": "877502f153c4e4883594e0d11d80cc72c8d754fa", "filename": "src/types.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6fd291981e1bb7deba30644c09798087e84203ec/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fd291981e1bb7deba30644c09798087e84203ec/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=6fd291981e1bb7deba30644c09798087e84203ec", "patch": "@@ -8,24 +8,24 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::ops::Deref;\n use std::iter::ExactSizeIterator;\n+use std::ops::Deref;\n \n use syntax::abi;\n-use syntax::ast::{self, Mutability, FunctionRetTy};\n-use syntax::codemap::{self, Span, BytePos};\n+use syntax::ast::{self, FunctionRetTy, Mutability};\n+use syntax::codemap::{self, BytePos, Span};\n use syntax::print::pprust;\n use syntax::symbol::keywords;\n \n use {Shape, Spanned};\n use codemap::SpanUtils;\n+use config::{IndentStyle, Style, TypeDensity};\n+use expr::{rewrite_pair, rewrite_tuple, rewrite_unary_prefix, wrap_args_with_parens};\n use items::{format_generics_item_list, generics_shape_from_config};\n-use lists::{write_list, itemize_list, ListFormatting, SeparatorTactic, ListTactic,\n-            definitive_tactic};\n+use lists::{definitive_tactic, itemize_list, write_list, ListFormatting, ListTactic,\n+            SeparatorTactic};\n use rewrite::{Rewrite, RewriteContext};\n-use utils::{extra_offset, format_mutability, colon_spaces, wrap_str, mk_sp, last_line_width};\n-use expr::{rewrite_unary_prefix, rewrite_pair, rewrite_tuple, wrap_args_with_parens};\n-use config::{IndentStyle, Style, TypeDensity};\n+use utils::{colon_spaces, extra_offset, format_mutability, last_line_width, mk_sp, wrap_str};\n \n #[derive(Copy, Clone, Debug, Eq, PartialEq)]\n pub enum PathContext {"}, {"sha": "dc511fc31017f41d3e7a08c7cd299b30bb2e81a7", "filename": "src/utils.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6fd291981e1bb7deba30644c09798087e84203ec/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fd291981e1bb7deba30644c09798087e84203ec/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=6fd291981e1bb7deba30644c09798087e84203ec", "patch": "@@ -11,15 +11,16 @@\n use std::borrow::Cow;\n use std::cmp::Ordering;\n \n-use syntax::ast::{self, Visibility, Attribute, MetaItem, MetaItemKind, NestedMetaItem,\n-                  NestedMetaItemKind, Path};\n-use syntax::codemap::{BytePos, Span, NO_EXPANSION};\n use syntax::abi;\n+use syntax::ast::{self, Attribute, MetaItem, MetaItemKind, NestedMetaItem, NestedMetaItemKind,\n+                  Path, Visibility};\n+use syntax::codemap::{BytePos, Span, NO_EXPANSION};\n \n use Shape;\n use rewrite::{Rewrite, RewriteContext};\n \n-use SKIP_ANNOTATION;\n+// When we get scoped annotations, we should have rustfmt::skip.\n+const SKIP_ANNOTATION: &'static str = \"rustfmt_skip\";\n \n // Computes the length of a string's last line, minus offset.\n pub fn extra_offset(text: &str, shape: Shape) -> usize {"}, {"sha": "04d9ac9d35b9a6d87b6e7a91c7cfd84f7f6b3c14", "filename": "src/vertical.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6fd291981e1bb7deba30644c09798087e84203ec/src%2Fvertical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fd291981e1bb7deba30644c09798087e84203ec/src%2Fvertical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvertical.rs?ref=6fd291981e1bb7deba30644c09798087e84203ec", "patch": "@@ -12,6 +12,9 @@\n \n use std::cmp;\n \n+use syntax::ast;\n+use syntax::codemap::{BytePos, Span};\n+\n use {Indent, Shape, Spanned};\n use codemap::SpanUtils;\n use comment::contains_comment;\n@@ -21,9 +24,6 @@ use lists::{definitive_tactic, itemize_list, write_list, ListFormatting, ListTac\n use rewrite::{Rewrite, RewriteContext};\n use utils::{contains_skip, mk_sp};\n \n-use syntax::ast;\n-use syntax::codemap::{Span, BytePos};\n-\n pub trait AlignedItem {\n     fn skip(&self) -> bool;\n     fn get_span(&self) -> Span;"}, {"sha": "97b6ce2926952433119b4c2a9c7829784111c6ad", "filename": "src/visitor.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6fd291981e1bb7deba30644c09798087e84203ec/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fd291981e1bb7deba30644c09798087e84203ec/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=6fd291981e1bb7deba30644c09798087e84203ec", "patch": "@@ -10,24 +10,23 @@\n \n use std::cmp;\n \n+use strings::string_buffer::StringBuffer;\n use syntax::{ast, ptr, visit};\n-use syntax::codemap::{CodeMap, Span, BytePos};\n+use syntax::codemap::{BytePos, CodeMap, Span};\n use syntax::parse::ParseSess;\n \n-use strings::string_buffer::StringBuffer;\n-\n use {Indent, Shape};\n-use expr::{format_expr, ExprType};\n-use utils::{self, mk_sp};\n use codemap::{LineRangeUtils, SpanUtils};\n use comment::{contains_comment, FindUncommented};\n-use config::Config;\n-use rewrite::{Rewrite, RewriteContext};\n use comment::rewrite_comment;\n-use macros::{rewrite_macro, MacroPosition};\n-use items::{rewrite_static, rewrite_associated_type, rewrite_associated_impl_type,\n-            rewrite_type_alias, format_impl, format_trait};\n+use config::Config;\n+use expr::{format_expr, ExprType};\n+use items::{format_impl, format_trait, rewrite_associated_impl_type, rewrite_associated_type,\n+            rewrite_static, rewrite_type_alias};\n use lists::{itemize_list, write_list, DefinitiveListTactic, ListFormatting, SeparatorTactic};\n+use macros::{rewrite_macro, MacroPosition};\n+use rewrite::{Rewrite, RewriteContext};\n+use utils::{self, mk_sp};\n \n fn is_use_item(item: &ast::Item) -> bool {\n     match item.node {"}]}