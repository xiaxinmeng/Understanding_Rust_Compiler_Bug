{"sha": "5fdbcc4020a440e18a3c570ffad5d2bb089c08db", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmZGJjYzQwMjBhNDQwZTE4YTNjNTcwZmZhZDVkMmJiMDg5YzA4ZGI=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-11-11T19:29:15Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-11-12T17:40:21Z"}, "message": "Improve error message for breaks in blocks\n\nBefore it was always stated that it was a \"break outside of a loop\" when you\ncould very well be in a loop, but just in a block instead.\n\nCloses #3064", "tree": {"sha": "4cc65ef2f213253598b5ca2d55c0bcdcfa10fa67", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4cc65ef2f213253598b5ca2d55c0bcdcfa10fa67"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5fdbcc4020a440e18a3c570ffad5d2bb089c08db", "comment_count": 9, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5fdbcc4020a440e18a3c570ffad5d2bb089c08db", "html_url": "https://github.com/rust-lang/rust/commit/5fdbcc4020a440e18a3c570ffad5d2bb089c08db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5fdbcc4020a440e18a3c570ffad5d2bb089c08db/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0cc5e6c83f9d0f64ecd69cdca06511527f4f1554", "url": "https://api.github.com/repos/rust-lang/rust/commits/0cc5e6c83f9d0f64ecd69cdca06511527f4f1554", "html_url": "https://github.com/rust-lang/rust/commit/0cc5e6c83f9d0f64ecd69cdca06511527f4f1554"}], "stats": {"total": 107, "additions": 59, "deletions": 48}, "files": [{"sha": "8a320f88649a0729048f14d115831297d0d4132d", "filename": "src/librustc/middle/check_loop.rs", "status": "modified", "additions": 43, "deletions": 43, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/5fdbcc4020a440e18a3c570ffad5d2bb089c08db/src%2Flibrustc%2Fmiddle%2Fcheck_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fdbcc4020a440e18a3c570ffad5d2bb089c08db/src%2Flibrustc%2Fmiddle%2Fcheck_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_loop.rs?ref=5fdbcc4020a440e18a3c570ffad5d2bb089c08db", "patch": "@@ -8,68 +8,68 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n use middle::ty;\n \n-use syntax::ast::*;\n-use syntax::visit;\n+use syntax::ast;\n+use syntax::codemap::Span;\n use syntax::visit::Visitor;\n+use syntax::visit;\n \n-#[deriving(Clone)]\n-pub struct Context {\n-    in_loop: bool,\n-    can_ret: bool\n+#[deriving(Clone, Eq)]\n+enum Context {\n+    Normal, Loop, Closure\n }\n \n struct CheckLoopVisitor {\n     tcx: ty::ctxt,\n }\n \n-pub fn check_crate(tcx: ty::ctxt, crate: &Crate) {\n-    visit::walk_crate(&mut CheckLoopVisitor { tcx: tcx },\n-                      crate,\n-                      Context { in_loop: false, can_ret: true });\n+pub fn check_crate(tcx: ty::ctxt, crate: &ast::Crate) {\n+    visit::walk_crate(&mut CheckLoopVisitor { tcx: tcx }, crate, Normal)\n }\n \n impl Visitor<Context> for CheckLoopVisitor {\n-    fn visit_item(&mut self, i:@item, _cx:Context) {\n-        visit::walk_item(self, i, Context {\n-                                    in_loop: false,\n-                                    can_ret: true\n-                                  });\n+    fn visit_item(&mut self, i: @ast::item, _cx: Context) {\n+        visit::walk_item(self, i, Normal);\n     }\n \n-    fn visit_expr(&mut self, e:@Expr, cx:Context) {\n-\n-            match e.node {\n-              ExprWhile(e, ref b) => {\n+    fn visit_expr(&mut self, e: @ast::Expr, cx:Context) {\n+        match e.node {\n+            ast::ExprWhile(e, ref b) => {\n                 self.visit_expr(e, cx);\n-                self.visit_block(b, Context { in_loop: true,.. cx });\n-              }\n-              ExprLoop(ref b, _) => {\n-                self.visit_block(b, Context { in_loop: true,.. cx });\n-              }\n-              ExprFnBlock(_, ref b) | ExprProc(_, ref b) => {\n-                self.visit_block(b, Context { in_loop: false, can_ret: false });\n-              }\n-              ExprBreak(_) => {\n-                if !cx.in_loop {\n-                    self.tcx.sess.span_err(e.span, \"`break` outside of loop\");\n-                }\n-              }\n-              ExprAgain(_) => {\n-                if !cx.in_loop {\n-                    self.tcx.sess.span_err(e.span, \"`loop` outside of loop\");\n-                }\n-              }\n-              ExprRet(oe) => {\n-                if !cx.can_ret {\n-                    self.tcx.sess.span_err(e.span, \"`return` in block function\");\n+                self.visit_block(b, Loop);\n+            }\n+            ast::ExprLoop(ref b, _) => {\n+                self.visit_block(b, Loop);\n+            }\n+            ast::ExprFnBlock(_, ref b) | ast::ExprProc(_, ref b) => {\n+                self.visit_block(b, Closure);\n+            }\n+            ast::ExprBreak(_) => self.require_loop(\"break\", cx, e.span),\n+            ast::ExprAgain(_) => self.require_loop(\"continue\", cx, e.span),\n+            ast::ExprRet(oe) => {\n+                if cx == Closure {\n+                    self.tcx.sess.span_err(e.span, \"`return` in a closure\");\n                 }\n                 visit::walk_expr_opt(self, oe, cx);\n-              }\n-              _ => visit::walk_expr(self, e, cx)\n             }\n+            _ => visit::walk_expr(self, e, cx)\n+        }\n+    }\n+}\n \n+impl CheckLoopVisitor {\n+    fn require_loop(&self, name: &str, cx: Context, span: Span) {\n+        match cx {\n+            Loop => {}\n+            Closure => {\n+                self.tcx.sess.span_err(span, format!(\"`{}` inside of a closure\",\n+                                                     name));\n+            }\n+            Normal => {\n+                self.tcx.sess.span_err(span, format!(\"`{}` outside of loop\",\n+                                                     name));\n+            }\n+        }\n     }\n }"}, {"sha": "06281a5e2884b1de0855ca2cd64f492865ff0da7", "filename": "src/test/compile-fail/break-outside-loop.rs", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5fdbcc4020a440e18a3c570ffad5d2bb089c08db/src%2Ftest%2Fcompile-fail%2Fbreak-outside-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fdbcc4020a440e18a3c570ffad5d2bb089c08db/src%2Ftest%2Fcompile-fail%2Fbreak-outside-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbreak-outside-loop.rs?ref=5fdbcc4020a440e18a3c570ffad5d2bb089c08db", "patch": "@@ -8,15 +8,26 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern:`break` outside of loop\n-\n struct Foo {\n     t: ~str\n }\n \n+fn cond() -> bool { true }\n+\n+fn foo(_: ||) {}\n+\n fn main() {\n-    let pth = break;\n+    let pth = break; //~ ERROR: `break` outside of loop\n+    if cond() { continue } //~ ERROR: `continue` outside of loop\n \n-    let rs: Foo = Foo{t: pth};\n+    while cond() {\n+        if cond() { break }\n+        if cond() { continue }\n+        do foo {\n+            if cond() { break } //~ ERROR: `break` inside of a closure\n+            if cond() { continue } //~ ERROR: `continue` inside of a closure\n+        }\n+    }\n \n+    let rs: Foo = Foo{t: pth};\n }"}, {"sha": "f231810cbf1172a18235449a53ca92bea1d15217", "filename": "src/test/compile-fail/return-in-block-function.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fdbcc4020a440e18a3c570ffad5d2bb089c08db/src%2Ftest%2Fcompile-fail%2Freturn-in-block-function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fdbcc4020a440e18a3c570ffad5d2bb089c08db/src%2Ftest%2Fcompile-fail%2Freturn-in-block-function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Freturn-in-block-function.rs?ref=5fdbcc4020a440e18a3c570ffad5d2bb089c08db", "patch": "@@ -10,6 +10,6 @@\n \n fn main() {\n     let _x = || {\n-        return //~ ERROR: `return` in block function\n+        return //~ ERROR: `return` in a closure\n     };\n }"}]}