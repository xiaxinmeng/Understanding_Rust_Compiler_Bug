{"sha": "00df339c419fc75af6a939b75be8bef5b5a69732", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwZGYzMzljNDE5ZmM3NWFmNmE5MzliNzViZThiZWY1YjVhNjk3MzI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-11-27T22:48:43Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-11-27T22:48:43Z"}, "message": "rename", "tree": {"sha": "c7304b26395e918a7e208647cac9356182cb53e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7304b26395e918a7e208647cac9356182cb53e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/00df339c419fc75af6a939b75be8bef5b5a69732", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/00df339c419fc75af6a939b75be8bef5b5a69732", "html_url": "https://github.com/rust-lang/rust/commit/00df339c419fc75af6a939b75be8bef5b5a69732", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/00df339c419fc75af6a939b75be8bef5b5a69732/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e7f4202cf4d64f565d6d035cd2e854acfc336ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e7f4202cf4d64f565d6d035cd2e854acfc336ab", "html_url": "https://github.com/rust-lang/rust/commit/5e7f4202cf4d64f565d6d035cd2e854acfc336ab"}], "stats": {"total": 52, "additions": 26, "deletions": 26}, "files": [{"sha": "97f170473d9c35f93c031ed76fb24f2189c2a4a1", "filename": "crates/ra_analysis/src/db.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00df339c419fc75af6a939b75be8bef5b5a69732/crates%2Fra_analysis%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00df339c419fc75af6a939b75be8bef5b5a69732/crates%2Fra_analysis%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fdb.rs?ref=00df339c419fc75af6a939b75be8bef5b5a69732", "patch": "@@ -127,7 +127,7 @@ salsa::database_storage! {\n         impl hir::db::HirDatabase {\n             fn module_tree() for hir::db::ModuleTreeQuery;\n             fn fn_scopes() for hir::db::FnScopesQuery;\n-            fn _file_items() for hir::db::FileItemsQuery;\n+            fn _file_items() for hir::db::SourceFileItemsQuery;\n             fn _file_item() for hir::db::FileItemQuery;\n             fn _input_module_items() for hir::db::InputModuleItemsQuery;\n             fn _item_map() for hir::db::ItemMapQuery;"}, {"sha": "e74fcc8adc1aad30b11ee69527e4190c037a82ad", "filename": "crates/ra_analysis/src/hir/db.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/00df339c419fc75af6a939b75be8bef5b5a69732/crates%2Fra_analysis%2Fsrc%2Fhir%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00df339c419fc75af6a939b75be8bef5b5a69732/crates%2Fra_analysis%2Fsrc%2Fhir%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fhir%2Fdb.rs?ref=00df339c419fc75af6a939b75be8bef5b5a69732", "patch": "@@ -8,7 +8,7 @@ use ra_syntax::{\n use crate::{\n     FileId,\n     db::SyntaxDatabase,\n-    hir::{FileItems, FileItemId},\n+    hir::{SourceFileItems, SourceFileItemId},\n     hir::query_definitions,\n     hir::function::{FnId, FnScopes},\n     hir::module::{\n@@ -33,13 +33,13 @@ pub(crate) trait HirDatabase: SyntaxDatabase {\n         use fn query_definitions::fn_syntax;\n     }\n \n-    fn file_items(file_id: FileId) -> Arc<FileItems> {\n-        type FileItemsQuery;\n+    fn file_items(file_id: FileId) -> Arc<SourceFileItems> {\n+        type SourceFileItemsQuery;\n         storage dependencies;\n         use fn query_definitions::file_items;\n     }\n \n-    fn file_item(file_id: FileId, file_item_id: FileItemId) -> SyntaxNode {\n+    fn file_item(file_id: FileId, file_item_id: SourceFileItemId) -> SyntaxNode {\n         type FileItemQuery;\n         storage dependencies;\n         use fn query_definitions::file_item;"}, {"sha": "aa416df20dc1186c828d95d93b2a3b8a961dd410", "filename": "crates/ra_analysis/src/hir/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/00df339c419fc75af6a939b75be8bef5b5a69732/crates%2Fra_analysis%2Fsrc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00df339c419fc75af6a939b75be8bef5b5a69732/crates%2Fra_analysis%2Fsrc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fhir%2Fmod.rs?ref=00df339c419fc75af6a939b75be8bef5b5a69732", "patch": "@@ -51,19 +51,19 @@ impl DefId {\n \n /// Identifier of item within a specific file. This is stable over reparses, so\n /// it's OK to use it as a salsa key/value.\n-pub(crate) type FileItemId = Id<SyntaxNode>;\n+pub(crate) type SourceFileItemId = Id<SyntaxNode>;\n \n-/// Maps item's `SyntaxNode`s to `FileItemId` and back.\n+/// Maps item's `SyntaxNode`s to `SourceFileItemId` and back.\n #[derive(Debug, PartialEq, Eq, Default)]\n-pub(crate) struct FileItems {\n+pub(crate) struct SourceFileItems {\n     arena: Arena<SyntaxNode>,\n }\n \n-impl FileItems {\n-    fn alloc(&mut self, item: SyntaxNode) -> FileItemId {\n+impl SourceFileItems {\n+    fn alloc(&mut self, item: SyntaxNode) -> SourceFileItemId {\n         self.arena.alloc(item)\n     }\n-    fn id_of(&self, item: SyntaxNodeRef) -> FileItemId {\n+    fn id_of(&self, item: SyntaxNodeRef) -> SourceFileItemId {\n         let (id, _item) = self\n             .arena\n             .iter()\n@@ -73,9 +73,9 @@ impl FileItems {\n     }\n }\n \n-impl Index<FileItemId> for FileItems {\n+impl Index<SourceFileItemId> for SourceFileItems {\n     type Output = SyntaxNode;\n-    fn index(&self, idx: FileItemId) -> &SyntaxNode {\n+    fn index(&self, idx: SourceFileItemId) -> &SyntaxNode {\n         &self.arena[idx]\n     }\n }"}, {"sha": "9dc54f6c01c6f140d6a5b9d37d15aa1e2883dd80", "filename": "crates/ra_analysis/src/hir/module/nameres.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/00df339c419fc75af6a939b75be8bef5b5a69732/crates%2Fra_analysis%2Fsrc%2Fhir%2Fmodule%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00df339c419fc75af6a939b75be8bef5b5a69732/crates%2Fra_analysis%2Fsrc%2Fhir%2Fmodule%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fhir%2Fmodule%2Fnameres.rs?ref=00df339c419fc75af6a939b75be8bef5b5a69732", "patch": "@@ -30,7 +30,7 @@ use crate::{\n     Cancelable, FileId,\n     loc2id::{DefId, DefLoc},\n     hir::{\n-        FileItemId, FileItems,\n+        SourceFileItemId, SourceFileItems,\n         Path, PathKind,\n         HirDatabase,\n         module::{ModuleId, ModuleTree},\n@@ -73,7 +73,7 @@ pub(crate) struct InputModuleItems {\n \n #[derive(Debug, PartialEq, Eq)]\n struct ModuleItem {\n-    id: FileItemId,\n+    id: SourceFileItemId,\n     name: SmolStr,\n     kind: SyntaxKind,\n     vis: Vis,\n@@ -93,7 +93,7 @@ struct Import {\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq)]\n pub(crate) struct NamedImport {\n-    file_item_id: FileItemId,\n+    file_item_id: SourceFileItemId,\n     relative_range: TextRange,\n }\n \n@@ -135,7 +135,7 @@ pub(crate) struct Resolution {\n \n impl InputModuleItems {\n     pub(in crate::hir) fn new<'a>(\n-        file_items: &FileItems,\n+        file_items: &SourceFileItems,\n         items: impl Iterator<Item = ast::ModuleItem<'a>>,\n     ) -> InputModuleItems {\n         let mut res = InputModuleItems::default();\n@@ -145,7 +145,7 @@ impl InputModuleItems {\n         res\n     }\n \n-    fn add_item(&mut self, file_items: &FileItems, item: ast::ModuleItem) -> Option<()> {\n+    fn add_item(&mut self, file_items: &SourceFileItems, item: ast::ModuleItem) -> Option<()> {\n         match item {\n             ast::ModuleItem::StructDef(it) => self.items.push(ModuleItem::new(file_items, it)?),\n             ast::ModuleItem::EnumDef(it) => self.items.push(ModuleItem::new(file_items, it)?),\n@@ -166,7 +166,7 @@ impl InputModuleItems {\n         Some(())\n     }\n \n-    fn add_use_item(&mut self, file_items: &FileItems, item: ast::UseItem) {\n+    fn add_use_item(&mut self, file_items: &SourceFileItems, item: ast::UseItem) {\n         let file_item_id = file_items.id_of(item.syntax());\n         let start_offset = item.syntax().range().start();\n         Path::expand_use_item(item, |path, range| {\n@@ -183,7 +183,7 @@ impl InputModuleItems {\n }\n \n impl ModuleItem {\n-    fn new<'a>(file_items: &FileItems, item: impl ast::NameOwner<'a>) -> Option<ModuleItem> {\n+    fn new<'a>(file_items: &SourceFileItems, item: impl ast::NameOwner<'a>) -> Option<ModuleItem> {\n         let name = item.name()?.text();\n         let kind = item.syntax().kind();\n         let vis = Vis::Other;"}, {"sha": "53926cf1659cd5be6839c67398ae5acf0f61332a", "filename": "crates/ra_analysis/src/hir/query_definitions.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/00df339c419fc75af6a939b75be8bef5b5a69732/crates%2Fra_analysis%2Fsrc%2Fhir%2Fquery_definitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00df339c419fc75af6a939b75be8bef5b5a69732/crates%2Fra_analysis%2Fsrc%2Fhir%2Fquery_definitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fhir%2Fquery_definitions.rs?ref=00df339c419fc75af6a939b75be8bef5b5a69732", "patch": "@@ -12,7 +12,7 @@ use ra_syntax::{\n use crate::{\n     FileId, Cancelable,\n     hir::{\n-        FileItems, FileItemId,\n+        SourceFileItems, SourceFileItemId,\n         db::HirDatabase,\n         function::{FnId, FnScopes},\n         module::{\n@@ -37,10 +37,10 @@ pub(super) fn fn_scopes(db: &impl HirDatabase, fn_id: FnId) -> Arc<FnScopes> {\n     Arc::new(res)\n }\n \n-pub(super) fn file_items(db: &impl HirDatabase, file_id: FileId) -> Arc<FileItems> {\n+pub(super) fn file_items(db: &impl HirDatabase, file_id: FileId) -> Arc<SourceFileItems> {\n     let source_file = db.file_syntax(file_id);\n     let source_file = source_file.borrowed();\n-    let mut res = FileItems::default();\n+    let mut res = SourceFileItems::default();\n     source_file\n         .syntax()\n         .descendants()\n@@ -55,7 +55,7 @@ pub(super) fn file_items(db: &impl HirDatabase, file_id: FileId) -> Arc<FileItem\n pub(super) fn file_item(\n     db: &impl HirDatabase,\n     file_id: FileId,\n-    file_item_id: FileItemId,\n+    file_item_id: SourceFileItemId,\n ) -> SyntaxNode {\n     db.file_items(file_id)[file_item_id].clone()\n }"}, {"sha": "49af19c752772367dd1e9ba105922118355308b6", "filename": "crates/ra_analysis/src/loc2id.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/00df339c419fc75af6a939b75be8bef5b5a69732/crates%2Fra_analysis%2Fsrc%2Floc2id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00df339c419fc75af6a939b75be8bef5b5a69732/crates%2Fra_analysis%2Fsrc%2Floc2id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Floc2id.rs?ref=00df339c419fc75af6a939b75be8bef5b5a69732", "patch": "@@ -9,7 +9,7 @@ use rustc_hash::FxHashMap;\n \n use crate::{\n     FileId,\n-    hir::{FileItemId, ModuleId},\n+    hir::{SourceFileItemId, ModuleId},\n     syntax_ptr::SyntaxPtr,\n     input::SourceRootId,\n };\n@@ -104,7 +104,7 @@ pub(crate) enum DefLoc {\n     },\n     Item {\n         file_id: FileId,\n-        id: FileItemId,\n+        id: SourceFileItemId,\n     },\n }\n "}]}