{"sha": "c4209d17a0a4fcdb753c4209cecc1ae19cbfcbd6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0MjA5ZDE3YTBhNGZjZGI3NTNjNDIwOWNlY2MxYWUxOWNiZmNiZDY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-23T04:46:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-23T04:46:09Z"}, "message": "auto merge of #15897 : Gankro/rust/it-docs, r=kballard\n\nI found these things to be ambiguous, or at least worth stating explicitly to reduce the amount a user/developer needs to think about the API.", "tree": {"sha": "02747807b8bcd2d45e97c0c4bcf7e801c4a6f061", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02747807b8bcd2d45e97c0c4bcf7e801c4a6f061"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c4209d17a0a4fcdb753c4209cecc1ae19cbfcbd6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c4209d17a0a4fcdb753c4209cecc1ae19cbfcbd6", "html_url": "https://github.com/rust-lang/rust/commit/c4209d17a0a4fcdb753c4209cecc1ae19cbfcbd6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c4209d17a0a4fcdb753c4209cecc1ae19cbfcbd6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "217f1fbfc861cd6da41746f899bad79b37f471ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/217f1fbfc861cd6da41746f899bad79b37f471ab", "html_url": "https://github.com/rust-lang/rust/commit/217f1fbfc861cd6da41746f899bad79b37f471ab"}, {"sha": "7b83600ea2da54c99bd048c37d59ca4a183c1bcd", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b83600ea2da54c99bd048c37d59ca4a183c1bcd", "html_url": "https://github.com/rust-lang/rust/commit/7b83600ea2da54c99bd048c37d59ca4a183c1bcd"}], "stats": {"total": 13, "additions": 10, "deletions": 3}, "files": [{"sha": "7706d01cbaed6bb3ee85d5994fa6359060866142", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c4209d17a0a4fcdb753c4209cecc1ae19cbfcbd6/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4209d17a0a4fcdb753c4209cecc1ae19cbfcbd6/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=c4209d17a0a4fcdb753c4209cecc1ae19cbfcbd6", "patch": "@@ -99,9 +99,10 @@ pub trait Iterator<A> {\n     /// Advance the iterator and return the next value. Return `None` when the end is reached.\n     fn next(&mut self) -> Option<A>;\n \n-    /// Return a lower bound and upper bound on the remaining length of the iterator.\n+    /// Returns a lower and upper bound on the remaining length of the iterator.\n     ///\n-    /// The common use case for the estimate is pre-allocating space to store the results.\n+    /// An upper bound of `None` means either there is no known upper bound, or the upper bound\n+    /// does not fit within a `uint`.\n     #[inline]\n     fn size_hint(&self) -> (uint, Option<uint>) { (0, None) }\n \n@@ -644,6 +645,9 @@ pub trait Iterator<A> {\n }\n \n /// A range iterator able to yield elements from both ends\n+///\n+/// A `DoubleEndedIterator` can be thought of as a deque in that `next()` and `next_back()` exhaust\n+/// elements from the *same* range, and do not work independently of each other.\n pub trait DoubleEndedIterator<A>: Iterator<A> {\n     /// Yield an element from the end of the range, returning `None` if the range is empty.\n     fn next_back(&mut self) -> Option<A>;\n@@ -690,12 +694,15 @@ impl<'a, A, T: DoubleEndedIterator<&'a mut A>> MutableDoubleEndedIterator for T\n /// An object implementing random access indexing by `uint`\n ///\n /// A `RandomAccessIterator` should be either infinite or a `DoubleEndedIterator`.\n+/// Calling `next()` or `next_back()` on a `RandomAccessIterator`\n+/// reduces the indexable range accordingly. That is, `it.idx(1)` will become `it.idx(0)`\n+/// after `it.next()` is called.\n pub trait RandomAccessIterator<A>: Iterator<A> {\n     /// Return the number of indexable elements. At most `std::uint::MAX`\n     /// elements are indexable, even if the iterator represents a longer range.\n     fn indexable(&self) -> uint;\n \n-    /// Return an element at an index\n+    /// Return an element at an index, or `None` if the index is out of bounds\n     fn idx(&mut self, index: uint) -> Option<A>;\n }\n "}]}