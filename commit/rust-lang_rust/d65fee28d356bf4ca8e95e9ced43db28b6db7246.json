{"sha": "d65fee28d356bf4ca8e95e9ced43db28b6db7246", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2NWZlZTI4ZDM1NmJmNGNhOGU5NWU5Y2VkNDNkYjI4YjZkYjcyNDY=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-03-27T20:22:26Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-03-27T20:43:42Z"}, "message": "Test fixes and rebase conflicts, round 2", "tree": {"sha": "ee0a4b454d072cf47f1b6d42149c79fdfbb10e37", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee0a4b454d072cf47f1b6d42149c79fdfbb10e37"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d65fee28d356bf4ca8e95e9ced43db28b6db7246", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d65fee28d356bf4ca8e95e9ced43db28b6db7246", "html_url": "https://github.com/rust-lang/rust/commit/d65fee28d356bf4ca8e95e9ced43db28b6db7246", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d65fee28d356bf4ca8e95e9ced43db28b6db7246/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c78478c1249cb007e60a97fa38fcfafbf895ad0", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c78478c1249cb007e60a97fa38fcfafbf895ad0", "html_url": "https://github.com/rust-lang/rust/commit/1c78478c1249cb007e60a97fa38fcfafbf895ad0"}], "stats": {"total": 25, "additions": 8, "deletions": 17}, "files": [{"sha": "f0aacc1460b3fa7b372b6919e632ece9921aea36", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d65fee28d356bf4ca8e95e9ced43db28b6db7246/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d65fee28d356bf4ca8e95e9ced43db28b6db7246/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=d65fee28d356bf4ca8e95e9ced43db28b6db7246", "patch": "@@ -13,7 +13,6 @@\n #![feature(box_syntax)]\n #![feature(collections)]\n #![feature(old_io)]\n-#![feature(old_path)]\n #![feature(rustc_private)]\n #![feature(unboxed_closures)]\n #![feature(std_misc)]"}, {"sha": "b30efaa6c29d80c73bfef4c4c75c32e7cf393fb0", "filename": "src/compiletest/procsrv.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d65fee28d356bf4ca8e95e9ced43db28b6db7246/src%2Fcompiletest%2Fprocsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d65fee28d356bf4ca8e95e9ced43db28b6db7246/src%2Fcompiletest%2Fprocsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fprocsrv.rs?ref=d65fee28d356bf4ca8e95e9ced43db28b6db7246", "patch": "@@ -8,27 +8,25 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(deprecated)] // for old path, for dynamic_lib\n-\n use std::dynamic_lib::DynamicLibrary;\n use std::io::prelude::*;\n-use std::old_path::Path;\n+use std::path::PathBuf;\n use std::process::{ExitStatus, Command, Child, Output, Stdio};\n \n fn add_target_env(cmd: &mut Command, lib_path: &str, aux_path: Option<&str>) {\n     // Need to be sure to put both the lib_path and the aux path in the dylib\n     // search path for the child.\n     let mut path = DynamicLibrary::search_path();\n     match aux_path {\n-        Some(p) => path.insert(0, Path::new(p)),\n+        Some(p) => path.insert(0, PathBuf::from(p)),\n         None => {}\n     }\n-    path.insert(0, Path::new(lib_path));\n+    path.insert(0, PathBuf::from(lib_path));\n \n     // Add the new dylib search path var\n     let var = DynamicLibrary::envvar();\n     let newpath = DynamicLibrary::create_path(&path);\n-    let newpath = String::from_utf8(newpath).unwrap();\n+    let newpath = newpath.to_str().unwrap().to_string();\n     cmd.env(var, &newpath);\n }\n "}, {"sha": "4d8ed6012351bf9cc7dc6a1d490b4474cb2ed19d", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d65fee28d356bf4ca8e95e9ced43db28b6db7246/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d65fee28d356bf4ca8e95e9ced43db28b6db7246/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=d65fee28d356bf4ca8e95e9ced43db28b6db7246", "patch": "@@ -31,7 +31,6 @@\n #![feature(core)]\n #![feature(hash)]\n #![feature(libc)]\n-#![feature(old_path)]\n #![feature(quote)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(rustc_private)]"}, {"sha": "3cf402ae113ea6814261ad0c48849d8265cebcf4", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d65fee28d356bf4ca8e95e9ced43db28b6db7246/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d65fee28d356bf4ca8e95e9ced43db28b6db7246/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=d65fee28d356bf4ca8e95e9ced43db28b6db7246", "patch": "@@ -27,7 +27,6 @@\n #![feature(exit_status)]\n #![feature(set_stdio)]\n #![feature(libc)]\n-#![feature(old_path)]\n #![feature(rustc_private)]\n #![feature(staged_api)]\n #![feature(std_misc)]\n@@ -65,8 +64,6 @@ use std::path::PathBuf;\n use std::rc::Rc;\n use std::sync::mpsc::channel;\n \n-#[allow(deprecated)] use std::old_path::Path;\n-\n use externalfiles::ExternalHtml;\n use serialize::Decodable;\n use serialize::json::{self, Json};\n@@ -434,7 +431,7 @@ fn rust_input(cratefile: &str, externs: core::Externs, matches: &getopts::Matche\n     // Load all plugins/passes into a PluginManager\n     let path = matches.opt_str(\"plugin-path\")\n                       .unwrap_or(\"/tmp/rustdoc/plugins\".to_string());\n-    let mut pm = plugins::PluginManager::new(Path::new(path));\n+    let mut pm = plugins::PluginManager::new(PathBuf::from(path));\n     for pass in &passes {\n         let plugin = match PASSES.iter()\n                                  .position(|&(p, _, _)| {"}, {"sha": "d4d214f449d5921733ca9c2c9c9140e23b02fd9b", "filename": "src/librustdoc/plugins.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d65fee28d356bf4ca8e95e9ced43db28b6db7246/src%2Flibrustdoc%2Fplugins.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d65fee28d356bf4ca8e95e9ced43db28b6db7246/src%2Flibrustdoc%2Fplugins.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fplugins.rs?ref=d65fee28d356bf4ca8e95e9ced43db28b6db7246", "patch": "@@ -16,7 +16,7 @@ use std::dynamic_lib as dl;\n use serialize::json;\n use std::mem;\n use std::string::String;\n-use std::old_path::{Path, GenericPath};\n+use std::path::PathBuf;\n \n pub type PluginJson = Option<(String, json::Json)>;\n pub type PluginResult = (clean::Crate, PluginJson);\n@@ -27,12 +27,12 @@ pub struct PluginManager {\n     dylibs: Vec<dl::DynamicLibrary> ,\n     callbacks: Vec<PluginCallback> ,\n     /// The directory plugins will be loaded from\n-    pub prefix: Path,\n+    pub prefix: PathBuf,\n }\n \n impl PluginManager {\n     /// Create a new plugin manager\n-    pub fn new(prefix: Path) -> PluginManager {\n+    pub fn new(prefix: PathBuf) -> PluginManager {\n         PluginManager {\n             dylibs: Vec::new(),\n             callbacks: Vec::new(),"}, {"sha": "185a9b3ec71f1d96d372e42165461e9d8ac78f4e", "filename": "src/libstd/dynamic_lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d65fee28d356bf4ca8e95e9ced43db28b6db7246/src%2Flibstd%2Fdynamic_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d65fee28d356bf4ca8e95e9ced43db28b6db7246/src%2Flibstd%2Fdynamic_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdynamic_lib.rs?ref=d65fee28d356bf4ca8e95e9ced43db28b6db7246", "patch": "@@ -21,8 +21,6 @@ use env;\n use ffi::{AsOsStr, CString, OsString};\n use mem;\n use path::{Path, PathBuf};\n-#[cfg(not(target_os = \"android\"))] use os;\n-#[cfg(not(target_os = \"android\"))] use str;\n \n pub struct DynamicLibrary {\n     handle: *mut u8"}]}