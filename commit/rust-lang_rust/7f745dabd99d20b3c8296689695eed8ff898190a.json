{"sha": "7f745dabd99d20b3c8296689695eed8ff898190a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmNzQ1ZGFiZDk5ZDIwYjNjODI5NjY4OTY5NWVlZDhmZjg5ODE5MGE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-28T07:07:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-28T07:07:16Z"}, "message": "Auto merge of #4848 - lzutao:result-map_or, r=flip1995\n\nmake use of Result::map_or\n\nFixes #1590\n\nchangelog: none", "tree": {"sha": "45e6005afb6a27f9f2af1df05731f355b8d2fdb6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/45e6005afb6a27f9f2af1df05731f355b8d2fdb6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f745dabd99d20b3c8296689695eed8ff898190a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f745dabd99d20b3c8296689695eed8ff898190a", "html_url": "https://github.com/rust-lang/rust/commit/7f745dabd99d20b3c8296689695eed8ff898190a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f745dabd99d20b3c8296689695eed8ff898190a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b8e8293d08d298579470f9d6c74731043c6601a", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b8e8293d08d298579470f9d6c74731043c6601a", "html_url": "https://github.com/rust-lang/rust/commit/7b8e8293d08d298579470f9d6c74731043c6601a"}, {"sha": "d0e0ffa99f45ef07855c41ec0be30ca5496d8ba3", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0e0ffa99f45ef07855c41ec0be30ca5496d8ba3", "html_url": "https://github.com/rust-lang/rust/commit/d0e0ffa99f45ef07855c41ec0be30ca5496d8ba3"}], "stats": {"total": 32, "additions": 16, "deletions": 16}, "files": [{"sha": "58fe4d99c7808beeea3febad8f851fde56822231", "filename": "clippy_lints/src/escape.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f745dabd99d20b3c8296689695eed8ff898190a/clippy_lints%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f745dabd99d20b3c8296689695eed8ff898190a/clippy_lints%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fescape.rs?ref=7f745dabd99d20b3c8296689695eed8ff898190a", "patch": "@@ -152,7 +152,7 @@ impl<'a, 'tcx> EscapeDelegate<'a, 'tcx> {\n     fn is_large_box(&self, ty: Ty<'tcx>) -> bool {\n         // Large types need to be boxed to avoid stack overflows.\n         if ty.is_box() {\n-            self.cx.layout_of(ty.boxed_ty()).ok().map_or(0, |l| l.size.bytes()) > self.too_large_for_stack\n+            self.cx.layout_of(ty.boxed_ty()).map_or(0, |l| l.size.bytes()) > self.too_large_for_stack\n         } else {\n             false\n         }"}, {"sha": "96e9c850cdb3265a51b29061ab629612cf3b5962", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7f745dabd99d20b3c8296689695eed8ff898190a/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f745dabd99d20b3c8296689695eed8ff898190a/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=7f745dabd99d20b3c8296689695eed8ff898190a", "patch": "@@ -12,6 +12,7 @@\n #![cfg_attr(feature = \"deny-warnings\", deny(warnings))]\n #![feature(crate_visibility_modifier)]\n #![feature(concat_idents)]\n+#![feature(result_map_or)]\n \n // FIXME: switch to something more ergonomic here, once available.\n // (Currently there is no way to opt into sysroot crates without `extern crate`.)"}, {"sha": "d2067cace947288386f456396349d5bcb6b7f621", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7f745dabd99d20b3c8296689695eed8ff898190a/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f745dabd99d20b3c8296689695eed8ff898190a/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=7f745dabd99d20b3c8296689695eed8ff898190a", "patch": "@@ -291,7 +291,7 @@ declare_clippy_lint! {\n     /// **What it does:** Checks for usage of `result.map(_).unwrap_or_else(_)`.\n     ///\n     /// **Why is this bad?** Readability, this can be written more concisely as\n-    /// `result.ok().map_or_else(_, _)`.\n+    /// `result.map_or_else(_, _)`.\n     ///\n     /// **Known problems:** None.\n     ///\n@@ -303,7 +303,7 @@ declare_clippy_lint! {\n     /// ```\n     pub RESULT_MAP_UNWRAP_OR_ELSE,\n     pedantic,\n-    \"using `Result.map(f).unwrap_or_else(g)`, which is more succinctly expressed as `.ok().map_or_else(g, f)`\"\n+    \"using `Result.map(f).unwrap_or_else(g)`, which is more succinctly expressed as `.map_or_else(g, f)`\"\n }\n \n declare_clippy_lint! {\n@@ -2217,7 +2217,7 @@ fn lint_map_unwrap_or_else<'a, 'tcx>(\n              `map_or_else(g, f)` instead\"\n         } else {\n             \"called `map(f).unwrap_or_else(g)` on a Result value. This can be done more directly by calling \\\n-             `ok().map_or_else(g, f)` instead\"\n+             `.map_or_else(g, f)` instead\"\n         };\n         // get snippets for args to map() and unwrap_or_else()\n         let map_snippet = snippet(cx, map_args[1].span, \"..\");\n@@ -2238,10 +2238,8 @@ fn lint_map_unwrap_or_else<'a, 'tcx>(\n                 msg,\n                 expr.span,\n                 &format!(\n-                    \"replace `map({0}).unwrap_or_else({1})` with `{2}map_or_else({1}, {0})`\",\n-                    map_snippet,\n-                    unwrap_snippet,\n-                    if is_result { \"ok().\" } else { \"\" }\n+                    \"replace `map({0}).unwrap_or_else({1})` with `map_or_else({1}, {0})`\",\n+                    map_snippet, unwrap_snippet,\n                 ),\n             );\n         } else if same_span && multiline {"}, {"sha": "2579fb4ad4d58a6e19ebea28fe68a4fa87411403", "filename": "src/driver.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7f745dabd99d20b3c8296689695eed8ff898190a/src%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f745dabd99d20b3c8296689695eed8ff898190a/src%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver.rs?ref=7f745dabd99d20b3c8296689695eed8ff898190a", "patch": "@@ -1,4 +1,5 @@\n #![cfg_attr(feature = \"deny-warnings\", deny(warnings))]\n+#![feature(result_map_or)]\n #![feature(rustc_private)]\n \n // FIXME: switch to something more ergonomic here, once available.\n@@ -319,7 +320,7 @@ pub fn main() {\n             // this check ensures that dependencies are built but not linted and the final\n             // crate is\n             // linted but not built\n-            let clippy_enabled = env::var(\"CLIPPY_TESTS\").ok().map_or(false, |val| val == \"true\")\n+            let clippy_enabled = env::var(\"CLIPPY_TESTS\").map_or(false, |val| val == \"true\")\n                 || arg_value(&orig_args, \"--emit\", |val| val.split(',').any(|e| e == \"metadata\")).is_some();\n \n             if clippy_enabled {"}, {"sha": "715d505abf391a0877577c38579e12cc4a6ea3f8", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f745dabd99d20b3c8296689695eed8ff898190a/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f745dabd99d20b3c8296689695eed8ff898190a/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=7f745dabd99d20b3c8296689695eed8ff898190a", "patch": "@@ -1697,7 +1697,7 @@ pub const ALL_LINTS: [Lint; 337] = [\n     Lint {\n         name: \"result_map_unwrap_or_else\",\n         group: \"pedantic\",\n-        desc: \"using `Result.map(f).unwrap_or_else(g)`, which is more succinctly expressed as `.ok().map_or_else(g, f)`\",\n+        desc: \"using `Result.map(f).unwrap_or_else(g)`, which is more succinctly expressed as `.map_or_else(g, f)`\",\n         deprecation: None,\n         module: \"methods\",\n     },"}, {"sha": "2b014e9ebb1a704f6e657796b43fecf027d65031", "filename": "tests/ui/result_map_unwrap_or_else.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7f745dabd99d20b3c8296689695eed8ff898190a/tests%2Fui%2Fresult_map_unwrap_or_else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7f745dabd99d20b3c8296689695eed8ff898190a/tests%2Fui%2Fresult_map_unwrap_or_else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresult_map_unwrap_or_else.stderr?ref=7f745dabd99d20b3c8296689695eed8ff898190a", "patch": "@@ -1,27 +1,27 @@\n-error: called `map(f).unwrap_or_else(g)` on a Result value. This can be done more directly by calling `ok().map_or_else(g, f)` instead\n+error: called `map(f).unwrap_or_else(g)` on a Result value. This can be done more directly by calling `.map_or_else(g, f)` instead\n   --> $DIR/result_map_unwrap_or_else.rs:15:13\n    |\n LL |     let _ = res.map(|x| x + 1).unwrap_or_else(|e| 0); // should lint even though this call is on a separate line\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::result-map-unwrap-or-else` implied by `-D warnings`\n-   = note: replace `map(|x| x + 1).unwrap_or_else(|e| 0)` with `ok().map_or_else(|e| 0, |x| x + 1)`\n+   = note: replace `map(|x| x + 1).unwrap_or_else(|e| 0)` with `map_or_else(|e| 0, |x| x + 1)`\n \n-error: called `map(f).unwrap_or_else(g)` on a Result value. This can be done more directly by calling `ok().map_or_else(g, f)` instead\n+error: called `map(f).unwrap_or_else(g)` on a Result value. This can be done more directly by calling `.map_or_else(g, f)` instead\n   --> $DIR/result_map_unwrap_or_else.rs:17:13\n    |\n LL |     let _ = res.map(|x| x + 1).unwrap_or_else(|e| 0);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: replace `map(|x| x + 1).unwrap_or_else(|e| 0)` with `ok().map_or_else(|e| 0, |x| x + 1)`\n+   = note: replace `map(|x| x + 1).unwrap_or_else(|e| 0)` with `map_or_else(|e| 0, |x| x + 1)`\n \n-error: called `map(f).unwrap_or_else(g)` on a Result value. This can be done more directly by calling `ok().map_or_else(g, f)` instead\n+error: called `map(f).unwrap_or_else(g)` on a Result value. This can be done more directly by calling `.map_or_else(g, f)` instead\n   --> $DIR/result_map_unwrap_or_else.rs:18:13\n    |\n LL |     let _ = res.map(|x| x + 1).unwrap_or_else(|e| 0);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: replace `map(|x| x + 1).unwrap_or_else(|e| 0)` with `ok().map_or_else(|e| 0, |x| x + 1)`\n+   = note: replace `map(|x| x + 1).unwrap_or_else(|e| 0)` with `map_or_else(|e| 0, |x| x + 1)`\n \n error: aborting due to 3 previous errors\n "}]}