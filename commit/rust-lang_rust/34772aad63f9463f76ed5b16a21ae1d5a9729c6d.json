{"sha": "34772aad63f9463f76ed5b16a21ae1d5a9729c6d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0NzcyYWFkNjNmOTQ2M2Y3NmVkNWIxNmEyMWFlMWQ1YTk3MjljNmQ=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2018-01-25T07:06:53Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2018-03-08T07:34:09Z"}, "message": "Allow writing mutable statics in miri by adding them to the Machine", "tree": {"sha": "e607c5f99ba09fd300cad8f733def5cdb6931e1b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e607c5f99ba09fd300cad8f733def5cdb6931e1b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/34772aad63f9463f76ed5b16a21ae1d5a9729c6d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAlqg53EACgkQpp+NIls6\n19kAKw/7B31JRw/HUO0i03s9ym9I0t6NIRsLokpmL0faE1MqXV8zDofTsth85bdl\nCx1vBBOCaiv1bh83iUUN3KRo4m005Mbxx/l5LI8Vmnovhzjy17R3WqFqHURekM5f\nxNrLXHkajAVJb+XiQZUn2/ZyJopytnft7fWJ1LJWBkPQ+h50152odPKMl/C27UDK\n6xP4uttrcMgHCyNUSeqVE7K9vPZTgVh23oOtzZnu4XERp7HGoMFTobEcXnFTKgl5\n2HbCpIa1K7TvtuUgA1oEbdbiw/dx9b01my5Fisl3YwP+JZ7JVESdKv54fg1/yspe\n5JeXqaCqkZX/1urBj4GjaP7yoaS7gSDQwQO3ISF3pDgI0uCPnAa2LRIey0LWohB2\nZhlNqOtvefuk6pnsB4+hx4iQN79iU1faicU28szBeV1ddmenm4BiQP5cat9PyjFf\n2fZJdrS/WLjZlio64QsFC7F63XUqquIKr2nYRHiJtdv9dxNbJC6pPTeCv/ILEhbW\n6OaIdar1UKseGQMkfEZhzXUVzBd+8GBRGS5batQf2D56ajIWqyVTycr+R529lLmd\nyCqiXb70BhvzeXCsNStykz8nEUrGfrNoYG55WB1vDf34A9JTR8NP68H92dknvm8g\nr2Q4/sOt9QW7zM861sgtPu5NXaAFZZvM+Vhn3gZD2QagmcTV64Q=\n=VvYp\n-----END PGP SIGNATURE-----", "payload": "tree e607c5f99ba09fd300cad8f733def5cdb6931e1b\nparent d3e2f48c8cb3ee32fecf5a7a525fa51d10ab4035\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1516864013 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1520494449 +0100\n\nAllow writing mutable statics in miri by adding them to the Machine\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/34772aad63f9463f76ed5b16a21ae1d5a9729c6d", "html_url": "https://github.com/rust-lang/rust/commit/34772aad63f9463f76ed5b16a21ae1d5a9729c6d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/34772aad63f9463f76ed5b16a21ae1d5a9729c6d/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3e2f48c8cb3ee32fecf5a7a525fa51d10ab4035", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3e2f48c8cb3ee32fecf5a7a525fa51d10ab4035", "html_url": "https://github.com/rust-lang/rust/commit/d3e2f48c8cb3ee32fecf5a7a525fa51d10ab4035"}], "stats": {"total": 89, "additions": 47, "deletions": 42}, "files": [{"sha": "2a9e1cb57e4ca1e8679a05e0010ad0aa4d8977cd", "filename": "src/librustc_mir/interpret/const_eval.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/34772aad63f9463f76ed5b16a21ae1d5a9729c6d/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34772aad63f9463f76ed5b16a21ae1d5a9729c6d/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs?ref=34772aad63f9463f76ed5b16a21ae1d5a9729c6d", "patch": "@@ -1,6 +1,7 @@\n use rustc::hir;\n-use rustc::middle::const_val::{ConstEvalErr, ConstVal};\n+use rustc::middle::const_val::{ConstEvalErr, ConstVal, ErrKind};\n use rustc::middle::const_val::ErrKind::{TypeckError, CheckMatchError};\n+use rustc::traits;\n use rustc::mir;\n use rustc::ty::{self, TyCtxt, Ty, Instance};\n use rustc::ty::layout::{self, LayoutOf};\n@@ -326,6 +327,27 @@ impl<'mir, 'tcx> super::Machine<'mir, 'tcx> for CompileTimeEvaluator {\n         Ok(false)\n     }\n \n+    fn init_static<'a>(\n+        ecx: &mut EvalContext<'a, 'mir, 'tcx, Self>,\n+        cid: GlobalId<'tcx>,\n+    ) -> EvalResult<'tcx, AllocId> {\n+        let param_env = ty::ParamEnv::empty(traits::Reveal::All);\n+        // ensure the static is computed\n+        if let Err(err) = ecx.tcx.const_eval(param_env.and(cid)) {\n+            match err.kind {\n+                ErrKind::Miri(miri) => return Err(miri),\n+                ErrKind::TypeckError => return err!(TypeckError),\n+                other => bug!(\"const eval returned {:?}\", other),\n+            }\n+        };\n+        Ok(ecx\n+            .tcx\n+            .interpret_interner\n+            .borrow()\n+            .get_cached(cid.instance.def_id())\n+            .expect(\"uncached static\"))\n+    }\n+\n     fn box_alloc<'a>(\n         _ecx: &mut EvalContext<'a, 'mir, 'tcx, Self>,\n         _ty: Ty<'tcx>,"}, {"sha": "1c60cda095c430345b232c2c5499694c4fe98edc", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/34772aad63f9463f76ed5b16a21ae1d5a9729c6d/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34772aad63f9463f76ed5b16a21ae1d5a9729c6d/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=34772aad63f9463f76ed5b16a21ae1d5a9729c6d", "patch": "@@ -1264,14 +1264,11 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n                     self.memory.read_ptr_sized_unsigned(extra, ptr_align)?.to_ptr()?,\n                 )),\n                 ty::TySlice(..) | ty::TyStr => {\n-                    match p.primval {\n-                        PrimVal::Bytes(b) => bug!(\"slice ptr: {:x}\", b),\n-                        PrimVal::Undef => bug!(\"undef slice ptr\"),\n-                        _ => {},\n-                    }\n-                    Ok(\n-                        p.to_value_with_len(self.memory.read_ptr_sized_unsigned(extra, ptr_align)?.to_bytes()? as u64),\n-                    )\n+                    let len = self\n+                        .memory\n+                        .read_ptr_sized_unsigned(extra, ptr_align)?\n+                        .to_bytes()?;\n+                    Ok(p.to_value_with_len(len as u64))\n                 },\n                 _ => bug!(\"unsized primval ptr read from {:?}\", pointee_ty),\n             }\n@@ -1621,16 +1618,16 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n                 block.terminator().source_info.span\n             });\n             trace!(\"reporting const eval failure at {:?}\", span);\n-            let node_id = self\n-                .stack()\n-                .iter()\n-                .rev()\n-                .filter_map(|frame| self.tcx.hir.as_local_node_id(frame.instance.def_id()))\n-                .next()\n-                .expect(\"some part of a failing const eval must be local\");\n             let mut err = if as_err {\n                 ::rustc::middle::const_val::struct_error(self.tcx, span, \"constant evaluation error\")\n             } else {\n+                let node_id = self\n+                    .stack()\n+                    .iter()\n+                    .rev()\n+                    .filter_map(|frame| self.tcx.hir.as_local_node_id(frame.instance.def_id()))\n+                    .next()\n+                    .expect(\"some part of a failing const eval must be local\");\n                 self.tcx.struct_span_lint_node(\n                     ::rustc::lint::builtin::CONST_ERR,\n                     node_id,"}, {"sha": "5af0a053e9239e5b57aafa709f2c0803134fd0de", "filename": "src/librustc_mir/interpret/machine.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/34772aad63f9463f76ed5b16a21ae1d5a9729c6d/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34772aad63f9463f76ed5b16a21ae1d5a9729c6d/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs?ref=34772aad63f9463f76ed5b16a21ae1d5a9729c6d", "patch": "@@ -2,7 +2,7 @@\n //! This separation exists to ensure that no fancy miri features like\n //! interpreting common C functions leak into CTFE.\n \n-use rustc::mir::interpret::{AllocId, EvalResult, PrimVal, MemoryPointer, AccessKind};\n+use rustc::mir::interpret::{AllocId, EvalResult, PrimVal, MemoryPointer, AccessKind, GlobalId};\n use super::{EvalContext, Place, ValTy, Memory};\n \n use rustc::mir;\n@@ -66,6 +66,13 @@ pub trait Machine<'mir, 'tcx>: Sized {\n         _mutability: Mutability,\n     ) -> EvalResult<'tcx, bool>;\n \n+    /// Called when requiring a pointer to a static. Non const eval can\n+    /// create a mutable memory location for `static mut`\n+    fn init_static<'a>(\n+        ecx: &mut EvalContext<'a, 'mir, 'tcx, Self>,\n+        cid: GlobalId<'tcx>,\n+    ) -> EvalResult<'tcx, AllocId>;\n+\n     /// Heap allocations via the `box` keyword\n     ///\n     /// Returns a pointer to the allocated memory"}, {"sha": "12725fb6dff75e01f0855a13c72396db4f017016", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 4, "deletions": 25, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/34772aad63f9463f76ed5b16a21ae1d5a9729c6d/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34772aad63f9463f76ed5b16a21ae1d5a9729c6d/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=34772aad63f9463f76ed5b16a21ae1d5a9729c6d", "patch": "@@ -1,13 +1,11 @@\n use rustc::mir;\n use rustc::ty::{self, Ty};\n use rustc::ty::layout::{self, Align, LayoutOf, TyLayout};\n-use rustc::traits;\n use rustc_data_structures::indexed_vec::Idx;\n \n use rustc::mir::interpret::{GlobalId, Value, PrimVal, EvalResult, Pointer, MemoryPointer};\n use super::{EvalContext, Machine, ValTy};\n use interpret::memory::HasMemory;\n-use rustc::middle::const_val::ErrKind;\n \n #[derive(Copy, Clone, Debug)]\n pub enum Place {\n@@ -105,14 +103,9 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n             Local(mir::RETURN_PLACE) => err!(ReadFromReturnPointer),\n             // Directly reading a local will always succeed\n             Local(local) => self.frame().get_local(local).map(Some),\n-            // Directly reading a static will always succeed\n-            Static(ref static_) => {\n-                let instance = ty::Instance::mono(self.tcx, static_.def_id);\n-                self.read_global_as_value(GlobalId {\n-                    instance,\n-                    promoted: None,\n-                }, self.place_ty(place)).map(Some)\n-            }\n+            // No fast path for statics. Reading from statics is rare and would require another\n+            // Machine function to handle differently in miri.\n+            Static(_) => Ok(None),\n             Projection(ref proj) => self.try_read_place_projection(proj),\n         }\n     }\n@@ -219,21 +212,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n                         instance,\n                         promoted: None\n                     };\n-                    let param_env = ty::ParamEnv::empty(traits::Reveal::All);\n-                    // ensure the static is computed\n-                    if let Err(err) = self.tcx.const_eval(param_env.and(cid)) {\n-                        match err.kind {\n-                            ErrKind::Miri(miri) => return Err(miri),\n-                            ErrKind::TypeckError => return err!(TypeckError),\n-                            other => bug!(\"const eval returned {:?}\", other),\n-                        }\n-                    };\n-                    let alloc = self\n-                        .tcx\n-                        .interpret_interner\n-                        .borrow()\n-                        .get_cached(static_.def_id)\n-                        .expect(\"uncached static\");\n+                    let alloc = Machine::init_static(self, cid)?;\n                     Place::Ptr {\n                         ptr: MemoryPointer::new(alloc, 0).into(),\n                         align: layout.align,"}]}