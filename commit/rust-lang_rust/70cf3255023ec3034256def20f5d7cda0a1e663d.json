{"sha": "70cf3255023ec3034256def20f5d7cda0a1e663d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwY2YzMjU1MDIzZWMzMDM0MjU2ZGVmMjBmNWQ3Y2RhMGExZTY2M2Q=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2019-03-24T07:32:54Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2019-03-24T11:00:18Z"}, "message": "Rollup merge of #59355 - varkor:const-param-struct-ice, r=petrochenkov\n\nFix ICE with const generic param in struct\n\nFixes https://github.com/rust-lang/rust/issues/59340.\n\nr? @petrochenkov", "tree": {"sha": "880d422fe6867d6cf9598458d5f18de27e2ceb43", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/880d422fe6867d6cf9598458d5f18de27e2ceb43"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70cf3255023ec3034256def20f5d7cda0a1e663d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlyXY0IACgkQ/vbIBR0O\nATxcJg//f3hM8zxf01aKoulhhpLvGpsqGOTCE43z/sNmmS6xNzswoYDR2Se0pqrh\ne/hcu1jTlNAIGrU7Yg8/0p2R1IqfoeJ2gtU+QNQAT8Ppe1UsCnSgT8Uv6Xhw4fi6\n45trNyYCiWmL2x3zXTTv8KwiChTbbq4cdm4FcSEun++R7aMrqQ6sIZX7ciaPOj0m\nAfEC9RsuRQg7nUBn7dF3e+vN/GM84Qw7Cv7eSkX9V0QiG/IWiuqybxWXFbJUGGVi\neQnZNiIwW9czfOXH6BMEnuuNDChUztna/E1Qks2vyaHU1je4tOvj/bazpOCGtJcq\ni1RIMYKPAqO8YJa6V5ZhRsNfMyU3yV7lBGWrEqbHiQim0l0jNSm+3zhF8HieDdWY\nQtuB9EIJP0wh25sBdcE7KP34I6hsT6KJpjrCMxEyBj3lsOHQVQaW5BxH1XgUQO8/\nN9/wBv067zmWpT9GUGl5b2ReOT6WwUxc3sv15hWKLvfeGUl8n0NBXHB7TphWMPL/\nVyzONsN93OI7TPr1eOofNdN2r8UCt1kVxkg1RvtMX3Qfoug+w63beJA1HE3JoQay\nEVPVn6jNiVPlaeubgHS9ykPZAHICHVXEiebfRTUaE9RbX8rptDNbqgS0fNNgEYOY\nwYdNFUCyamHPIgtqHXg8sSajzv1V28HtHUJU63Isz1ld1/f/V38=\n=kjm6\n-----END PGP SIGNATURE-----", "payload": "tree 880d422fe6867d6cf9598458d5f18de27e2ceb43\nparent cb2dde63d5cdcee619ad65de79029629ccee7604\nparent 5032643538da3e121a940438623adf820f95ae64\nauthor kennytm <kennytm@gmail.com> 1553412774 +0800\ncommitter kennytm <kennytm@gmail.com> 1553425218 +0800\n\nRollup merge of #59355 - varkor:const-param-struct-ice, r=petrochenkov\n\nFix ICE with const generic param in struct\n\nFixes https://github.com/rust-lang/rust/issues/59340.\n\nr? @petrochenkov\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70cf3255023ec3034256def20f5d7cda0a1e663d", "html_url": "https://github.com/rust-lang/rust/commit/70cf3255023ec3034256def20f5d7cda0a1e663d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70cf3255023ec3034256def20f5d7cda0a1e663d/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb2dde63d5cdcee619ad65de79029629ccee7604", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb2dde63d5cdcee619ad65de79029629ccee7604", "html_url": "https://github.com/rust-lang/rust/commit/cb2dde63d5cdcee619ad65de79029629ccee7604"}, {"sha": "5032643538da3e121a940438623adf820f95ae64", "url": "https://api.github.com/repos/rust-lang/rust/commits/5032643538da3e121a940438623adf820f95ae64", "html_url": "https://github.com/rust-lang/rust/commit/5032643538da3e121a940438623adf820f95ae64"}], "stats": {"total": 46, "additions": 37, "deletions": 9}, "files": [{"sha": "5a123e8b1a6a3ad8832be0d691f872c8bdde894d", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/70cf3255023ec3034256def20f5d7cda0a1e663d/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70cf3255023ec3034256def20f5d7cda0a1e663d/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=70cf3255023ec3034256def20f5d7cda0a1e663d", "patch": "@@ -814,7 +814,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Resolver<'a> {\n         debug!(\"(resolving function) entering function\");\n         let (rib_kind, asyncness) = match function_kind {\n             FnKind::ItemFn(_, ref header, ..) =>\n-                (ItemRibKind, header.asyncness.node),\n+                (FnItemRibKind, header.asyncness.node),\n             FnKind::Method(_, ref sig, _, _) =>\n                 (TraitOrImplItemRibKind, sig.header.asyncness.node),\n             FnKind::Closure(_) =>\n@@ -950,6 +950,10 @@ enum RibKind<'a> {\n     /// upvars).\n     TraitOrImplItemRibKind,\n \n+    /// We passed through a function definition. Disallow upvars.\n+    /// Permit only those const parameters that are specified in the function's generics.\n+    FnItemRibKind,\n+\n     /// We passed through an item scope. Disallow upvars.\n     ItemRibKind,\n \n@@ -3863,7 +3867,7 @@ impl<'a> Resolver<'a> {\n                                 seen.insert(node_id, depth);\n                             }\n                         }\n-                        ItemRibKind | TraitOrImplItemRibKind => {\n+                        ItemRibKind | FnItemRibKind | TraitOrImplItemRibKind => {\n                             // This was an attempt to access an upvar inside a\n                             // named function item. This is not allowed, so we\n                             // report an error.\n@@ -3897,7 +3901,7 @@ impl<'a> Resolver<'a> {\n                         ConstantItemRibKind => {\n                             // Nothing to do. Continue.\n                         }\n-                        ItemRibKind => {\n+                        ItemRibKind | FnItemRibKind => {\n                             // This was an attempt to use a type parameter outside its scope.\n                             if record_used {\n                                 resolve_error(\n@@ -3912,12 +3916,15 @@ impl<'a> Resolver<'a> {\n                 }\n             }\n             Def::ConstParam(..) => {\n-                // A const param is always declared in a signature, which is always followed by\n-                // some kind of function rib kind (specifically, ItemRibKind in the case of a\n-                // normal function), so we can skip the first rib as it will be guaranteed to\n-                // (spuriously) conflict with the const param.\n-                for rib in &ribs[1..] {\n-                    if let ItemRibKind = rib.kind {\n+                let mut ribs = ribs.iter().peekable();\n+                if let Some(Rib { kind: FnItemRibKind, .. }) = ribs.peek() {\n+                    // When declaring const parameters inside function signatures, the first rib\n+                    // is always a `FnItemRibKind`. In this case, we can skip it, to avoid it\n+                    // (spuriously) conflicting with the const param.\n+                    ribs.next();\n+                }\n+                for rib in ribs {\n+                    if let ItemRibKind | FnItemRibKind = rib.kind {\n                         // This was an attempt to use a const parameter outside its scope.\n                         if record_used {\n                             resolve_error("}, {"sha": "207b07bf69514ea7deeff86e290b2b3fbe2865d1", "filename": "src/test/ui/const-generics/struct-with-invalid-const-param.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/70cf3255023ec3034256def20f5d7cda0a1e663d/src%2Ftest%2Fui%2Fconst-generics%2Fstruct-with-invalid-const-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70cf3255023ec3034256def20f5d7cda0a1e663d/src%2Ftest%2Fui%2Fconst-generics%2Fstruct-with-invalid-const-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fstruct-with-invalid-const-param.rs?ref=70cf3255023ec3034256def20f5d7cda0a1e663d", "patch": "@@ -0,0 +1,6 @@\n+#![feature(const_generics)]\n+//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+\n+struct S<const C: u8>(C); //~ ERROR expected type, found const parameter\n+\n+fn main() {}"}, {"sha": "561464b21cc8f0a23c8fb139e9f418a179b8c0ab", "filename": "src/test/ui/const-generics/struct-with-invalid-const-param.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/70cf3255023ec3034256def20f5d7cda0a1e663d/src%2Ftest%2Fui%2Fconst-generics%2Fstruct-with-invalid-const-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70cf3255023ec3034256def20f5d7cda0a1e663d/src%2Ftest%2Fui%2Fconst-generics%2Fstruct-with-invalid-const-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fstruct-with-invalid-const-param.stderr?ref=70cf3255023ec3034256def20f5d7cda0a1e663d", "patch": "@@ -0,0 +1,15 @@\n+warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+  --> $DIR/struct-with-invalid-const-param.rs:1:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+\n+error[E0573]: expected type, found const parameter `C`\n+  --> $DIR/struct-with-invalid-const-param.rs:4:23\n+   |\n+LL | struct S<const C: u8>(C);\n+   |                       ^ help: a struct with a similar name exists: `S`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0573`."}]}