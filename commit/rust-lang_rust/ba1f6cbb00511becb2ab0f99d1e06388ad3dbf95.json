{"sha": "ba1f6cbb00511becb2ab0f99d1e06388ad3dbf95", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhMWY2Y2JiMDA1MTFiZWNiMmFiMGY5OWQxZTA2Mzg4YWQzZGJmOTU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-07T07:15:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-07T07:15:28Z"}, "message": "Rollup merge of #69690 - thekuom:test/67311-extend-bindings-after-at-tests, r=Centril\n\ntest(pattern): add tests for combinations of pattern features\n\nReference issue #67311\n\nTests combinations of the following pattern features:\n- bindings_after_at\n- or_patterns\n- slice_patterns\n- box_patterns\n\nr? @Centril", "tree": {"sha": "549e24197fb7b589e6a649695b963c0e1c911f74", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/549e24197fb7b589e6a649695b963c0e1c911f74"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba1f6cbb00511becb2ab0f99d1e06388ad3dbf95", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeY0oQCRBK7hj4Ov3rIwAAdHIIAGp3uMwUz2BaJEGbIQkamXLd\nZlQxxryawfryZCtuo5FOZ4qB3VENHXH3zcTxBDKXau3YGAHjvuM/gl5ilv6Q4534\nb43p6dpL5FZ+qEdFNQv/GR0YPcKLjbxnH6Dbc/Gq9eAB9tMsD3UbWbZTpmlad3PP\nIT+Y/ddwYBQZwq0YqkCLjFvk//dx7STxiyd0XYoF2D+IJYfLoGWldAhVPBSLVzMB\ngDpwSaOru/xWEGusKyTe8JnrFmLbKwRQTOnLlXxYkKkn4h4r0lSgPjg9vIskqOWq\noVq2chgXUkUu6gdx0wFctSaIT+iD8BHh7A3nUOGBEZoZNHP05E89swskLMNK948=\n=wdYl\n-----END PGP SIGNATURE-----\n", "payload": "tree 549e24197fb7b589e6a649695b963c0e1c911f74\nparent e9c3ddc8df499a3190e5583a7d46317164f60fe1\nparent ea7b3c3c7bfbde2fc900f686b2dcd6ef03fcc510\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1583565328 +0100\ncommitter GitHub <noreply@github.com> 1583565328 +0100\n\nRollup merge of #69690 - thekuom:test/67311-extend-bindings-after-at-tests, r=Centril\n\ntest(pattern): add tests for combinations of pattern features\n\nReference issue #67311\n\nTests combinations of the following pattern features:\n- bindings_after_at\n- or_patterns\n- slice_patterns\n- box_patterns\n\nr? @Centril\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba1f6cbb00511becb2ab0f99d1e06388ad3dbf95", "html_url": "https://github.com/rust-lang/rust/commit/ba1f6cbb00511becb2ab0f99d1e06388ad3dbf95", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba1f6cbb00511becb2ab0f99d1e06388ad3dbf95/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9c3ddc8df499a3190e5583a7d46317164f60fe1", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9c3ddc8df499a3190e5583a7d46317164f60fe1", "html_url": "https://github.com/rust-lang/rust/commit/e9c3ddc8df499a3190e5583a7d46317164f60fe1"}, {"sha": "ea7b3c3c7bfbde2fc900f686b2dcd6ef03fcc510", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea7b3c3c7bfbde2fc900f686b2dcd6ef03fcc510", "html_url": "https://github.com/rust-lang/rust/commit/ea7b3c3c7bfbde2fc900f686b2dcd6ef03fcc510"}], "stats": {"total": 307, "additions": 307, "deletions": 0}, "files": [{"sha": "aafd47993836ca4fb3d8a8d931855d5724cf8682", "filename": "src/test/ui/or-patterns/box-patterns.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/ba1f6cbb00511becb2ab0f99d1e06388ad3dbf95/src%2Ftest%2Fui%2For-patterns%2Fbox-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba1f6cbb00511becb2ab0f99d1e06388ad3dbf95/src%2Ftest%2Fui%2For-patterns%2Fbox-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fbox-patterns.rs?ref=ba1f6cbb00511becb2ab0f99d1e06388ad3dbf95", "patch": "@@ -0,0 +1,37 @@\n+// Test or-patterns with box-patterns\n+\n+// run-pass\n+\n+#![feature(or_patterns)]\n+#![feature(box_patterns)]\n+\n+#[derive(Debug, PartialEq)]\n+enum MatchArm {\n+    Arm(usize),\n+    Wild,\n+}\n+\n+#[derive(Debug)]\n+enum Test {\n+    Foo,\n+    Bar,\n+    Baz,\n+    Qux,\n+}\n+\n+fn test(x: Option<Box<Test>>) -> MatchArm {\n+    match x {\n+        Some(box Test::Foo | box Test::Bar) => MatchArm::Arm(0),\n+        Some(box Test::Baz) => MatchArm::Arm(1),\n+        Some(_) => MatchArm::Arm(2),\n+        _ => MatchArm::Wild,\n+    }\n+}\n+\n+fn main() {\n+    assert_eq!(test(Some(Box::new(Test::Foo))), MatchArm::Arm(0));\n+    assert_eq!(test(Some(Box::new(Test::Bar))), MatchArm::Arm(0));\n+    assert_eq!(test(Some(Box::new(Test::Baz))), MatchArm::Arm(1));\n+    assert_eq!(test(Some(Box::new(Test::Qux))), MatchArm::Arm(2));\n+    assert_eq!(test(None), MatchArm::Wild);\n+}"}, {"sha": "05c907e8246798fedceef45006e491078b02da9b", "filename": "src/test/ui/or-patterns/slice-patterns.rs", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/ba1f6cbb00511becb2ab0f99d1e06388ad3dbf95/src%2Ftest%2Fui%2For-patterns%2Fslice-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba1f6cbb00511becb2ab0f99d1e06388ad3dbf95/src%2Ftest%2Fui%2For-patterns%2Fslice-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fslice-patterns.rs?ref=ba1f6cbb00511becb2ab0f99d1e06388ad3dbf95", "patch": "@@ -0,0 +1,53 @@\n+// Test or-patterns with slice-patterns\n+\n+// run-pass\n+\n+#![feature(or_patterns)]\n+\n+#[derive(Debug, PartialEq)]\n+enum MatchArm {\n+    Arm(usize),\n+    Wild,\n+}\n+\n+#[derive(Debug)]\n+enum Test {\n+    Foo,\n+    Bar,\n+    Baz,\n+    Qux,\n+}\n+\n+fn test(foo: &[Option<Test>]) -> MatchArm {\n+    match foo {\n+        [.., Some(Test::Qux | Test::Foo)] => MatchArm::Arm(0),\n+        [Some(Test::Foo), .., Some(Test::Baz | Test::Bar)] => MatchArm::Arm(1),\n+        [.., Some(Test::Bar | Test::Baz), _] => MatchArm::Arm(2),\n+        _ => MatchArm::Wild,\n+    }\n+}\n+\n+fn main() {\n+    let foo = vec![\n+        Some(Test::Foo),\n+        Some(Test::Bar),\n+        Some(Test::Baz),\n+        Some(Test::Qux),\n+    ];\n+\n+    // path 1a\n+    assert_eq!(test(&foo), MatchArm::Arm(0));\n+    // path 1b\n+    assert_eq!(test(&[Some(Test::Bar), Some(Test::Foo)]), MatchArm::Arm(0));\n+    // path 2a\n+    assert_eq!(test(&foo[..3]), MatchArm::Arm(1));\n+    // path 2b\n+    assert_eq!(test(&[Some(Test::Foo), Some(Test::Foo), Some(Test::Bar)]), MatchArm::Arm(1));\n+    // path 3a\n+    assert_eq!(test(&foo[1..3]), MatchArm::Arm(2));\n+    // path 3b\n+    assert_eq!(test(&[Some(Test::Bar), Some(Test::Baz), Some(Test::Baz), Some(Test::Bar)]),\n+        MatchArm::Arm(2));\n+    // path 4\n+    assert_eq!(test(&foo[4..]), MatchArm::Wild);\n+}"}, {"sha": "ef9669a6b9e5ae9fca05f23ff0dea1f983269711", "filename": "src/test/ui/pattern/bindings-after-at/box-patterns.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/ba1f6cbb00511becb2ab0f99d1e06388ad3dbf95/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbox-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba1f6cbb00511becb2ab0f99d1e06388ad3dbf95/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbox-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbox-patterns.rs?ref=ba1f6cbb00511becb2ab0f99d1e06388ad3dbf95", "patch": "@@ -0,0 +1,36 @@\n+// Test bindings-after-at with box-patterns\n+\n+// run-pass\n+\n+#![feature(bindings_after_at)]\n+#![feature(box_patterns)]\n+\n+#[derive(Debug, PartialEq)]\n+enum MatchArm {\n+    Arm(usize),\n+    Wild,\n+}\n+\n+fn test(x: Option<Box<i32>>) -> MatchArm {\n+    match x {\n+        ref bar @ Some(box n) if n > 0 => {\n+            // bar is a &Option<Box<i32>>\n+            assert_eq!(bar, &x);\n+\n+            MatchArm::Arm(0)\n+        },\n+        Some(ref bar @ box n) if n < 0 => {\n+            // bar is a &Box<i32> here\n+            assert_eq!(**bar, n);\n+\n+            MatchArm::Arm(1)\n+        },\n+        _ => MatchArm::Wild,\n+    }\n+}\n+\n+fn main() {\n+    assert_eq!(test(Some(Box::new(2))), MatchArm::Arm(0));\n+    assert_eq!(test(Some(Box::new(-1))), MatchArm::Arm(1));\n+    assert_eq!(test(Some(Box::new(0))), MatchArm::Wild);\n+}"}, {"sha": "ca8826f03f1ad0acf841861fd770af2f6e033404", "filename": "src/test/ui/pattern/bindings-after-at/or-patterns-box-patterns.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/ba1f6cbb00511becb2ab0f99d1e06388ad3dbf95/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2For-patterns-box-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba1f6cbb00511becb2ab0f99d1e06388ad3dbf95/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2For-patterns-box-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2For-patterns-box-patterns.rs?ref=ba1f6cbb00511becb2ab0f99d1e06388ad3dbf95", "patch": "@@ -0,0 +1,45 @@\n+// Test bindings-after-at with or-patterns and box-patterns\n+\n+// run-pass\n+\n+#![feature(bindings_after_at)]\n+#![feature(or_patterns)]\n+#![feature(box_patterns)]\n+\n+#[derive(Debug, PartialEq)]\n+enum MatchArm {\n+    Arm(usize),\n+    Wild,\n+}\n+\n+#[derive(Debug, PartialEq)]\n+enum Test {\n+    Foo,\n+    Bar,\n+    Baz,\n+    Qux,\n+}\n+\n+fn test(foo: Option<Box<Test>>) -> MatchArm {\n+    match foo {\n+        ref bar @ Some(box Test::Foo | box Test::Bar) => {\n+            assert_eq!(bar, &foo);\n+\n+            MatchArm::Arm(0)\n+        },\n+        Some(ref bar @ box Test::Baz | ref bar @ box Test::Qux) => {\n+            assert!(**bar == Test::Baz || **bar == Test::Qux);\n+\n+            MatchArm::Arm(1)\n+        },\n+        _ => MatchArm::Wild,\n+    }\n+}\n+\n+fn main() {\n+    assert_eq!(test(Some(Box::new(Test::Foo))), MatchArm::Arm(0));\n+    assert_eq!(test(Some(Box::new(Test::Bar))), MatchArm::Arm(0));\n+    assert_eq!(test(Some(Box::new(Test::Baz))), MatchArm::Arm(1));\n+    assert_eq!(test(Some(Box::new(Test::Qux))), MatchArm::Arm(1));\n+    assert_eq!(test(None), MatchArm::Wild);\n+}"}, {"sha": "65c2b3741b3e303432e80b22f7cfc132ab90c243", "filename": "src/test/ui/pattern/bindings-after-at/or-patterns-slice-patterns.rs", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/ba1f6cbb00511becb2ab0f99d1e06388ad3dbf95/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2For-patterns-slice-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba1f6cbb00511becb2ab0f99d1e06388ad3dbf95/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2For-patterns-slice-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2For-patterns-slice-patterns.rs?ref=ba1f6cbb00511becb2ab0f99d1e06388ad3dbf95", "patch": "@@ -0,0 +1,56 @@\n+// Test bindings-after-at with or-patterns and slice-patterns\n+\n+// run-pass\n+\n+#![feature(bindings_after_at)]\n+#![feature(or_patterns)]\n+\n+#[derive(Debug, PartialEq)]\n+enum MatchArm {\n+    Arm(usize),\n+    Wild,\n+}\n+\n+#[derive(Debug, PartialEq)]\n+enum Test {\n+    Foo,\n+    Bar,\n+    Baz,\n+    Qux,\n+}\n+\n+fn test(foo: &[Option<Test>]) -> MatchArm {\n+    match foo {\n+        bar @ [Some(Test::Foo), .., Some(Test::Qux | Test::Foo)] => {\n+            assert_eq!(bar, foo);\n+\n+            MatchArm::Arm(0)\n+        },\n+        [.., bar @ Some(Test::Bar | Test::Qux), _] => {\n+            assert!(bar == &Some(Test::Bar) || bar == &Some(Test::Qux));\n+\n+            MatchArm::Arm(1)\n+        },\n+        _ => MatchArm::Wild,\n+    }\n+}\n+\n+fn main() {\n+    let foo = vec![\n+        Some(Test::Foo),\n+        Some(Test::Bar),\n+        Some(Test::Baz),\n+        Some(Test::Qux),\n+    ];\n+\n+    // path 1a\n+    assert_eq!(test(&foo), MatchArm::Arm(0));\n+    // path 1b\n+    assert_eq!(test(&[Some(Test::Foo), Some(Test::Bar), Some(Test::Foo)]), MatchArm::Arm(0));\n+    // path 2a\n+    assert_eq!(test(&foo[..3]), MatchArm::Arm(1));\n+    // path 2b\n+    assert_eq!(test(&[Some(Test::Bar), Some(Test::Qux), Some(Test::Baz)]), MatchArm::Arm(1));\n+    // path 3\n+    assert_eq!(test(&foo[1..2]), MatchArm::Wild);\n+}"}, {"sha": "a0e14004ab1b0b35b0878eaeee73184b11408585", "filename": "src/test/ui/pattern/bindings-after-at/or-patterns.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/ba1f6cbb00511becb2ab0f99d1e06388ad3dbf95/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2For-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba1f6cbb00511becb2ab0f99d1e06388ad3dbf95/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2For-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2For-patterns.rs?ref=ba1f6cbb00511becb2ab0f99d1e06388ad3dbf95", "patch": "@@ -0,0 +1,40 @@\n+// Test bindings-after-at with or-patterns\n+\n+// run-pass\n+\n+#![feature(bindings_after_at)]\n+#![feature(or_patterns)]\n+\n+#[derive(Debug, PartialEq)]\n+enum MatchArm {\n+    Arm(usize),\n+    Wild,\n+}\n+\n+#[derive(Debug, Clone, Copy, PartialEq)]\n+enum Test {\n+    Foo,\n+    Bar,\n+    Baz,\n+    Qux,\n+}\n+\n+fn test(foo: Option<Test>) -> MatchArm {\n+    match foo {\n+        bar @ Some(Test::Foo | Test::Bar) => {\n+            assert!(bar == Some(Test::Foo) || bar == Some(Test::Bar));\n+\n+            MatchArm::Arm(0)\n+        },\n+        Some(_) => MatchArm::Arm(1),\n+        _ => MatchArm::Wild,\n+    }\n+}\n+\n+fn main() {\n+    assert_eq!(test(Some(Test::Foo)), MatchArm::Arm(0));\n+    assert_eq!(test(Some(Test::Bar)), MatchArm::Arm(0));\n+    assert_eq!(test(Some(Test::Baz)), MatchArm::Arm(1));\n+    assert_eq!(test(Some(Test::Qux)), MatchArm::Arm(1));\n+    assert_eq!(test(None), MatchArm::Wild);\n+}"}, {"sha": "7e50527af0b97b69b753112f4ca8aa150d638769", "filename": "src/test/ui/pattern/bindings-after-at/slice-patterns.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/ba1f6cbb00511becb2ab0f99d1e06388ad3dbf95/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fslice-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba1f6cbb00511becb2ab0f99d1e06388ad3dbf95/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fslice-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fslice-patterns.rs?ref=ba1f6cbb00511becb2ab0f99d1e06388ad3dbf95", "patch": "@@ -0,0 +1,40 @@\n+// Test bindings-after-at with slice-patterns\n+\n+// run-pass\n+\n+#![feature(bindings_after_at)]\n+\n+#[derive(Debug, PartialEq)]\n+enum MatchArm {\n+    Arm(usize),\n+    Wild,\n+}\n+\n+fn test(foo: &[i32]) -> MatchArm {\n+    match foo {\n+        [bar @ .., n] if n == &5 => {\n+            for i in bar {\n+                assert!(i < &5);\n+            }\n+\n+            MatchArm::Arm(0)\n+        },\n+        bar @ [x0, .., xn] => {\n+            assert_eq!(x0, &1);\n+            assert_eq!(x0, &1);\n+            assert_eq!(xn, &4);\n+            assert_eq!(bar, &[1, 2, 3, 4]);\n+\n+            MatchArm::Arm(1)\n+        },\n+        _ => MatchArm::Wild,\n+    }\n+}\n+\n+fn main() {\n+    let foo = vec![1, 2, 3, 4, 5];\n+\n+    assert_eq!(test(&foo), MatchArm::Arm(0));\n+    assert_eq!(test(&foo[..4]), MatchArm::Arm(1));\n+    assert_eq!(test(&foo[0..1]), MatchArm::Wild);\n+}"}]}