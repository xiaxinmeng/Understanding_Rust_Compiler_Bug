{"sha": "e7396685a19674dfe995030ec62e01cb6205ae7d", "node_id": "C_kwDOAAsO6NoAKGU3Mzk2Njg1YTE5Njc0ZGZlOTk1MDMwZWM2MmUwMWNiNjIwNWFlN2Q", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-06-22T05:26:47Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-06-26T22:14:09Z"}, "message": "Merge `build_enum_match_tuple` into `expand_enum_method_body`.\n\nBecause the latter just calls the former.\n\nThe commit also updates some details in a comment.", "tree": {"sha": "650f4846b2086d8de8ce55ea7a6ebbbbbbb556d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/650f4846b2086d8de8ce55ea7a6ebbbbbbb556d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e7396685a19674dfe995030ec62e01cb6205ae7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e7396685a19674dfe995030ec62e01cb6205ae7d", "html_url": "https://github.com/rust-lang/rust/commit/e7396685a19674dfe995030ec62e01cb6205ae7d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e7396685a19674dfe995030ec62e01cb6205ae7d/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "00207ead61ecff9dba4e61e5828fd6a32330f6c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/00207ead61ecff9dba4e61e5828fd6a32330f6c0", "html_url": "https://github.com/rust-lang/rust/commit/00207ead61ecff9dba4e61e5828fd6a32330f6c0"}], "stats": {"total": 72, "additions": 20, "deletions": 52}, "files": [{"sha": "8347cded2fe0bb0adb9913421ea3bf0778b9b4cc", "filename": "compiler/rustc_builtin_macros/src/deriving/generic/mod.rs", "status": "modified", "additions": 20, "deletions": 52, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/e7396685a19674dfe995030ec62e01cb6205ae7d/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7396685a19674dfe995030ec62e01cb6205ae7d/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs?ref=e7396685a19674dfe995030ec62e01cb6205ae7d", "patch": "@@ -1126,75 +1126,43 @@ impl<'a> MethodDef<'a> {\n     ///     A1,\n     ///     A2(i32)\n     /// }\n-    ///\n-    /// // is equivalent to\n-    ///\n-    /// impl PartialEq for A {\n+    /// ```\n+    /// is equivalent to:\n+    /// ```\n+    /// impl ::core::cmp::PartialEq for A {\n+    ///     #[inline]\n     ///     fn eq(&self, other: &A) -> bool {\n-    ///         use A::*;\n-    ///         match (&*self, &*other) {\n-    ///             (&A1, &A1) => true,\n-    ///             (&A2(ref self_0),\n-    ///              &A2(ref __arg_1_0)) => (*self_0).eq(&(*__arg_1_0)),\n-    ///             _ => {\n-    ///                 let __self_vi = match *self { A1 => 0, A2(..) => 1 };\n-    ///                 let __arg_1_vi = match *other { A1 => 0, A2(..) => 1 };\n-    ///                 false\n+    ///         {\n+    ///             let __self_vi = ::core::intrinsics::discriminant_value(&*self);\n+    ///             let __arg_1_vi = ::core::intrinsics::discriminant_value(&*other);\n+    ///             if true && __self_vi == __arg_1_vi {\n+    ///                 match (&*self, &*other) {\n+    ///                     (&A::A2(ref __self_0), &A::A2(ref __arg_1_0)) =>\n+    ///                         (*__self_0) == (*__arg_1_0),\n+    ///                     _ => true,\n+    ///                 }\n+    ///             } else {\n+    ///                 false // catch-all handler\n     ///             }\n     ///         }\n     ///     }\n     /// }\n     /// ```\n-    ///\n-    /// (Of course `__self_vi` and `__arg_1_vi` are unused for\n-    /// `PartialEq`, and those subcomputations will hopefully be removed\n-    /// as their results are unused. The point of `__self_vi` and\n-    /// `__arg_1_vi` is for `PartialOrd`; see #15503.)\n-    fn expand_enum_method_body<'b>(\n-        &self,\n-        cx: &mut ExtCtxt<'_>,\n-        trait_: &TraitDef<'b>,\n-        enum_def: &'b EnumDef,\n-        type_ident: Ident,\n-        self_args: Vec<P<Expr>>,\n-        nonself_args: &[P<Expr>],\n-    ) -> P<Expr> {\n-        self.build_enum_match_tuple(cx, trait_, enum_def, type_ident, self_args, nonself_args)\n-    }\n-\n     /// Creates a match for a tuple of all `self_args`, where either all\n     /// variants match, or it falls into a catch-all for when one variant\n     /// does not match.\n-\n+    ///\n     /// There are N + 1 cases because is a case for each of the N\n     /// variants where all of the variants match, and one catch-all for\n     /// when one does not match.\n-\n+    ///\n     /// As an optimization we generate code which checks whether all variants\n     /// match first which makes llvm see that C-like enums can be compiled into\n     /// a simple equality check (for PartialEq).\n-\n+    ///\n     /// The catch-all handler is provided access the variant index values\n     /// for each of the self-args, carried in precomputed variables.\n-\n-    /// ```{.text}\n-    /// let __self0_vi = std::intrinsics::discriminant_value(&self);\n-    /// let __self1_vi = std::intrinsics::discriminant_value(&arg1);\n-    /// let __self2_vi = std::intrinsics::discriminant_value(&arg2);\n-    ///\n-    /// if __self0_vi == __self1_vi && __self0_vi == __self2_vi && ... {\n-    ///     match (...) {\n-    ///         (Variant1, Variant1, ...) => Body1\n-    ///         (Variant2, Variant2, ...) => Body2,\n-    ///         ...\n-    ///         _ => ::core::intrinsics::unreachable()\n-    ///     }\n-    /// }\n-    /// else {\n-    ///     ... // catch-all remainder can inspect above variant index values.\n-    /// }\n-    /// ```\n-    fn build_enum_match_tuple<'b>(\n+    fn expand_enum_method_body<'b>(\n         &self,\n         cx: &mut ExtCtxt<'_>,\n         trait_: &TraitDef<'b>,"}]}