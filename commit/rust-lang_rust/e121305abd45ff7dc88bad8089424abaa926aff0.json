{"sha": "e121305abd45ff7dc88bad8089424abaa926aff0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxMjEzMDVhYmQ0NWZmN2RjODhiYWQ4MDg5NDI0YWJhYTkyNmFmZjA=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2018-11-10T23:21:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-11-10T23:21:14Z"}, "message": "Rollup merge of #55792 - oli-obk:propsicle, r=RalfJung\n\nPrevent ICE in const-prop array oob check\n\nfixes https://github.com/rust-lang/rust/issues/55772\nfixes https://github.com/rust-lang/rust/issues/54541", "tree": {"sha": "f1a9df65bf5f10b81e542ffb1307882b4cd94de2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1a9df65bf5f10b81e542ffb1307882b4cd94de2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e121305abd45ff7dc88bad8089424abaa926aff0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJb52fqCRBK7hj4Ov3rIwAAdHIIAD8WgafvMK817DSUD1a2izS0\nF8spqM9JFHp1L/CeOzLD3dBSPUPMz4edlT0Utl8YU4kX6iwxCzmoh0ZvuYkSkzSx\nmdBEN5BG4rWyovrHqSsnMBuyNSIf/Q7BnYvwftdGuaHlmLti6j7w40vB0bwmuEJQ\nFaTmd/2xlBtqqlbxvnYCX/sIxhDClMn3NIR5EkJmJ3ydFT2A5epKcxrbYQOvKEBQ\neGOaVbYkpG6Y4tkRHW/UMOoLGtKWbYHOTj8J38f3WnlDFI/tkjTXYZCTdpSJfY+v\nmBWFWvU5xai27R0NNEkGq43qHNbeSP/XsgHePyUD3eOg60abngL8dGXXUCEmFKU=\n=PxRg\n-----END PGP SIGNATURE-----\n", "payload": "tree f1a9df65bf5f10b81e542ffb1307882b4cd94de2\nparent d2aeef06f2f41c0b7f4d13cd59cd07ad8a377e83\nparent 1206549d1b3dbdd694b1218516f522e71228b3b5\nauthor Pietro Albini <pietro@pietroalbini.org> 1541892074 +0100\ncommitter GitHub <noreply@github.com> 1541892074 +0100\n\nRollup merge of #55792 - oli-obk:propsicle, r=RalfJung\n\nPrevent ICE in const-prop array oob check\n\nfixes https://github.com/rust-lang/rust/issues/55772\nfixes https://github.com/rust-lang/rust/issues/54541\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e121305abd45ff7dc88bad8089424abaa926aff0", "html_url": "https://github.com/rust-lang/rust/commit/e121305abd45ff7dc88bad8089424abaa926aff0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e121305abd45ff7dc88bad8089424abaa926aff0/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2aeef06f2f41c0b7f4d13cd59cd07ad8a377e83", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2aeef06f2f41c0b7f4d13cd59cd07ad8a377e83", "html_url": "https://github.com/rust-lang/rust/commit/d2aeef06f2f41c0b7f4d13cd59cd07ad8a377e83"}, {"sha": "1206549d1b3dbdd694b1218516f522e71228b3b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/1206549d1b3dbdd694b1218516f522e71228b3b5", "html_url": "https://github.com/rust-lang/rust/commit/1206549d1b3dbdd694b1218516f522e71228b3b5"}], "stats": {"total": 44, "additions": 36, "deletions": 8}, "files": [{"sha": "885d70dc4304dee3e3cd02c3118df7555aab58b6", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e121305abd45ff7dc88bad8089424abaa926aff0/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e121305abd45ff7dc88bad8089424abaa926aff0/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=e121305abd45ff7dc88bad8089424abaa926aff0", "patch": "@@ -591,8 +591,8 @@ impl<'b, 'a, 'tcx> Visitor<'tcx> for ConstPropagator<'b, 'a, 'tcx> {\n         if let TerminatorKind::Assert { expected, msg, cond, .. } = kind {\n             if let Some(value) = self.eval_operand(cond, source_info) {\n                 trace!(\"assertion on {:?} should be {:?}\", value, expected);\n-                let expected = Immediate::Scalar(Scalar::from_bool(*expected).into());\n-                if expected != value.0.to_immediate() {\n+                let expected = ScalarMaybeUndef::from(Scalar::from_bool(*expected));\n+                if expected != self.ecx.read_scalar(value.0).unwrap() {\n                     // poison all places this operand references so that further code\n                     // doesn't use the invalid value\n                     match cond {\n@@ -628,20 +628,20 @@ impl<'b, 'a, 'tcx> Visitor<'tcx> for ConstPropagator<'b, 'a, 'tcx> {\n                             let len = self\n                                 .eval_operand(len, source_info)\n                                 .expect(\"len must be const\");\n-                            let len = match len.0.to_immediate() {\n-                                Immediate::Scalar(ScalarMaybeUndef::Scalar(Scalar::Bits {\n+                            let len = match self.ecx.read_scalar(len.0) {\n+                                Ok(ScalarMaybeUndef::Scalar(Scalar::Bits {\n                                     bits, ..\n                                 })) => bits,\n-                                _ => bug!(\"const len not primitive: {:?}\", len),\n+                                other => bug!(\"const len not primitive: {:?}\", other),\n                             };\n                             let index = self\n                                 .eval_operand(index, source_info)\n                                 .expect(\"index must be const\");\n-                            let index = match index.0.to_immediate() {\n-                                Immediate::Scalar(ScalarMaybeUndef::Scalar(Scalar::Bits {\n+                            let index = match self.ecx.read_scalar(index.0) {\n+                                Ok(ScalarMaybeUndef::Scalar(Scalar::Bits {\n                                     bits, ..\n                                 })) => bits,\n-                                _ => bug!(\"const index not primitive: {:?}\", index),\n+                                other => bug!(\"const index not primitive: {:?}\", other),\n                             };\n                             format!(\n                                 \"index out of bounds: \\"}, {"sha": "13309f978b6729733584a2ea1dd170e77a8a2338", "filename": "src/test/ui/consts/const-prop-ice.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e121305abd45ff7dc88bad8089424abaa926aff0/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e121305abd45ff7dc88bad8089424abaa926aff0/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-ice.rs?ref=e121305abd45ff7dc88bad8089424abaa926aff0", "patch": "@@ -0,0 +1,3 @@\n+fn main() {\n+    [0; 3][3u64 as usize]; //~ ERROR the len is 3 but the index is 3\n+}"}, {"sha": "749ef952b5ddbee40f4bf382809dd21241788aac", "filename": "src/test/ui/consts/const-prop-ice.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e121305abd45ff7dc88bad8089424abaa926aff0/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e121305abd45ff7dc88bad8089424abaa926aff0/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-ice.stderr?ref=e121305abd45ff7dc88bad8089424abaa926aff0", "patch": "@@ -0,0 +1,10 @@\n+error: index out of bounds: the len is 3 but the index is 3\n+  --> $DIR/const-prop-ice.rs:2:5\n+   |\n+LL |     [0; 3][3u64 as usize]; //~ ERROR the len is 3 but the index is 3\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(const_err)] on by default\n+\n+error: aborting due to previous error\n+"}, {"sha": "e5fd79f11676e76f456263be064f26e2a60e96b1", "filename": "src/test/ui/consts/const-prop-ice2.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e121305abd45ff7dc88bad8089424abaa926aff0/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-ice2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e121305abd45ff7dc88bad8089424abaa926aff0/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-ice2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-ice2.rs?ref=e121305abd45ff7dc88bad8089424abaa926aff0", "patch": "@@ -0,0 +1,5 @@\n+fn main() {\n+    enum Enum { One=1 }\n+    let xs=[0;1 as usize];\n+    println!(\"{}\", xs[Enum::One as usize]); //~ ERROR the len is 1 but the index is 1\n+}"}, {"sha": "4febd0ee1e3911a3b16ad2f6f7f2b164fe9c5cce", "filename": "src/test/ui/consts/const-prop-ice2.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e121305abd45ff7dc88bad8089424abaa926aff0/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-ice2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e121305abd45ff7dc88bad8089424abaa926aff0/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-ice2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-ice2.stderr?ref=e121305abd45ff7dc88bad8089424abaa926aff0", "patch": "@@ -0,0 +1,10 @@\n+error: index out of bounds: the len is 1 but the index is 1\n+  --> $DIR/const-prop-ice2.rs:4:20\n+   |\n+LL |     println!(\"{}\", xs[Enum::One as usize]); //~ ERROR the len is 1 but the index is 1\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(const_err)] on by default\n+\n+error: aborting due to previous error\n+"}]}