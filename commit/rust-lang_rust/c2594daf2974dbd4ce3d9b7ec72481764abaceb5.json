{"sha": "c2594daf2974dbd4ce3d9b7ec72481764abaceb5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyNTk0ZGFmMjk3NGRiZDRjZTNkOWI3ZWM3MjQ4MTc2NGFiYWNlYjU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-08-14T17:02:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-14T17:02:55Z"}, "message": "Merge #5347\n\n5347: Chalk writer integration r=flodiebold a=detrumi\n\n~~This adds a `rust-analyzer dump-chalk` command, similar to analysis-stats, which writes out the whole chalk progam (see [chalk#365](https://github.com/rust-lang/chalk/issues/365) for more info about the .chalk writer)~~\r\n\r\nWrite out chalk programs in debug output if chalk debugging is active (using `CHALK_DEBUG`).\r\n\r\nExample output:\r\n```\r\n[DEBUG ra_hir_ty::traits] solve(UCanonical { canonical: Canonical { value: InEnvironment { environment: Env([]), goal: Implemented(SeparatorTraitRef(?)) }, binders: [] }, universes: 1 }) => None\r\n[INFO  ra_hir_ty::traits] trait_solve_query(Implements(fn min<?0.0>(?0.0, ?0.0) -> ?0.0: Deref))\r\n[DEBUG ra_hir_ty::traits] solve goal: UCanonical { canonical: Canonical { value: InEnvironment { environment: Env([]), goal: Implemented(SeparatorTraitRef(?)) }, binders: [U0 with kind type] }, universes: 1 }\r\n[DEBUG ra_hir_ty::traits::chalk] impls_for_trait Deref\r\n[DEBUG ra_hir_ty::traits::chalk] impls_for_trait returned 0 impls\r\n[DEBUG ra_hir_ty::traits::chalk] trait_datum Ord\r\n[DEBUG ra_hir_ty::traits::chalk] trait Ord = Name(Text(\"Ord\"))\r\n[DEBUG ra_hir_ty::traits] chalk program:\r\n    #[upstream]\r\n    #[non_enumerable]\r\n    #[object_safe]\r\n    trait Ord {}\r\n    #[upstream]\r\n    #[non_enumerable]\r\n    #[object_safe]\r\n    #[lang(sized)]\r\n    trait Sized {}\r\n    fn fn_0<_1_0>(arg_0: _1_0, arg_1: _1_0) -> _1_0\r\n    where\r\n      _1_0: Ord;\r\n    #[upstream]\r\n    #[non_enumerable]\r\n    #[object_safe]\r\n    trait Deref {\r\n      type Assoc_1829: Sized;\r\n    }\r\n    \r\n[DEBUG ra_hir_ty::traits] solve(UCanonical { canonical: Canonical { value: InEnvironment { environment: Env([]), goal: Implemented(SeparatorTraitRef(?)) }, binders: [U0 with kind type] }, universes: 1 }) => None\r\n[INFO  ra_hir_ty::traits] trait_solve_query(Implements(?0.0: Ord))\r\n```\n\nCo-authored-by: Wilco Kusee <wilcokusee@gmail.com>", "tree": {"sha": "82099976fd1c06484a4a8662890465846f282772", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82099976fd1c06484a4a8662890465846f282772"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c2594daf2974dbd4ce3d9b7ec72481764abaceb5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfNsO/CRBK7hj4Ov3rIwAAdHIIAF/SO4agEJpVIxdpUWtTX0tO\nHQznQ11UBrJFJ70c2UIBT0dsegRnAlCcAoXUR1Dqx9eK1qI+gozCMFXa0SsklAhP\n7oseyGCG9oY8yYEzIyN4it1o3sMo8YS2MdGqr8VNI7da57EDs4vjWUHRS2AdlGuJ\nS1xbR23ezo+xbSIgMm9cfs0BTqWlMtsVCbLO1S+ownrL8qVX8b0yUDzv+0UuoHV1\nlpAysHMxgmKICy0OkPVwmNXtFaPjuppqMjaCbBgP6KjYfERI3C+E0wNLujJZ/lWI\nYx5cy59O3tP+XY06EIIzNafPVgfI44EjZoe7PkhvPlrXVbPHa4xC4ytx8JGPGuQ=\n=Q2BR\n-----END PGP SIGNATURE-----\n", "payload": "tree 82099976fd1c06484a4a8662890465846f282772\nparent f7abd16a8c896657ab6170e4f09839e92da006c0\nparent de282ddd869f78fc8324f2333204b10e93939d83\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1597424575 +0000\ncommitter GitHub <noreply@github.com> 1597424575 +0000\n\nMerge #5347\n\n5347: Chalk writer integration r=flodiebold a=detrumi\n\n~~This adds a `rust-analyzer dump-chalk` command, similar to analysis-stats, which writes out the whole chalk progam (see [chalk#365](https://github.com/rust-lang/chalk/issues/365) for more info about the .chalk writer)~~\r\n\r\nWrite out chalk programs in debug output if chalk debugging is active (using `CHALK_DEBUG`).\r\n\r\nExample output:\r\n```\r\n[DEBUG ra_hir_ty::traits] solve(UCanonical { canonical: Canonical { value: InEnvironment { environment: Env([]), goal: Implemented(SeparatorTraitRef(?)) }, binders: [] }, universes: 1 }) => None\r\n[INFO  ra_hir_ty::traits] trait_solve_query(Implements(fn min<?0.0>(?0.0, ?0.0) -> ?0.0: Deref))\r\n[DEBUG ra_hir_ty::traits] solve goal: UCanonical { canonical: Canonical { value: InEnvironment { environment: Env([]), goal: Implemented(SeparatorTraitRef(?)) }, binders: [U0 with kind type] }, universes: 1 }\r\n[DEBUG ra_hir_ty::traits::chalk] impls_for_trait Deref\r\n[DEBUG ra_hir_ty::traits::chalk] impls_for_trait returned 0 impls\r\n[DEBUG ra_hir_ty::traits::chalk] trait_datum Ord\r\n[DEBUG ra_hir_ty::traits::chalk] trait Ord = Name(Text(\"Ord\"))\r\n[DEBUG ra_hir_ty::traits] chalk program:\r\n    #[upstream]\r\n    #[non_enumerable]\r\n    #[object_safe]\r\n    trait Ord {}\r\n    #[upstream]\r\n    #[non_enumerable]\r\n    #[object_safe]\r\n    #[lang(sized)]\r\n    trait Sized {}\r\n    fn fn_0<_1_0>(arg_0: _1_0, arg_1: _1_0) -> _1_0\r\n    where\r\n      _1_0: Ord;\r\n    #[upstream]\r\n    #[non_enumerable]\r\n    #[object_safe]\r\n    trait Deref {\r\n      type Assoc_1829: Sized;\r\n    }\r\n    \r\n[DEBUG ra_hir_ty::traits] solve(UCanonical { canonical: Canonical { value: InEnvironment { environment: Env([]), goal: Implemented(SeparatorTraitRef(?)) }, binders: [U0 with kind type] }, universes: 1 }) => None\r\n[INFO  ra_hir_ty::traits] trait_solve_query(Implements(?0.0: Ord))\r\n```\n\nCo-authored-by: Wilco Kusee <wilcokusee@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c2594daf2974dbd4ce3d9b7ec72481764abaceb5", "html_url": "https://github.com/rust-lang/rust/commit/c2594daf2974dbd4ce3d9b7ec72481764abaceb5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c2594daf2974dbd4ce3d9b7ec72481764abaceb5/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f7abd16a8c896657ab6170e4f09839e92da006c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7abd16a8c896657ab6170e4f09839e92da006c0", "html_url": "https://github.com/rust-lang/rust/commit/f7abd16a8c896657ab6170e4f09839e92da006c0"}, {"sha": "de282ddd869f78fc8324f2333204b10e93939d83", "url": "https://api.github.com/repos/rust-lang/rust/commits/de282ddd869f78fc8324f2333204b10e93939d83", "html_url": "https://github.com/rust-lang/rust/commit/de282ddd869f78fc8324f2333204b10e93939d83"}], "stats": {"total": 44, "additions": 30, "deletions": 14}, "files": [{"sha": "1c3abb18f04e69c049106a6eee527c369f91b102", "filename": "crates/hir_ty/src/traits.rs", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c2594daf2974dbd4ce3d9b7ec72481764abaceb5/crates%2Fhir_ty%2Fsrc%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2594daf2974dbd4ce3d9b7ec72481764abaceb5/crates%2Fhir_ty%2Fsrc%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits.rs?ref=c2594daf2974dbd4ce3d9b7ec72481764abaceb5", "patch": "@@ -3,7 +3,7 @@ use std::sync::Arc;\n \n use base_db::CrateId;\n use chalk_ir::cast::Cast;\n-use chalk_solve::Solver;\n+use chalk_solve::{logging_db::LoggingRustIrDatabase, Solver};\n use hir_def::{lang_item::LangItemTarget, TraitId};\n \n use crate::{db::HirDatabase, DebruijnIndex, Substs};\n@@ -166,23 +166,36 @@ fn solve(\n         }\n         remaining > 0\n     };\n+\n     let mut solve = || {\n-        let solution = solver.solve_limited(&context, goal, should_continue);\n-        log::debug!(\"solve({:?}) => {:?}\", goal, solution);\n-        solution\n+        if is_chalk_print() {\n+            let logging_db = LoggingRustIrDatabase::new(context);\n+            let solution = solver.solve_limited(&logging_db, goal, should_continue);\n+            log::debug!(\"chalk program:\\n{}\", logging_db);\n+            solution\n+        } else {\n+            solver.solve_limited(&context, goal, should_continue)\n+        }\n     };\n+\n     // don't set the TLS for Chalk unless Chalk debugging is active, to make\n     // extra sure we only use it for debugging\n     let solution =\n         if is_chalk_debug() { chalk::tls::set_current_program(db, solve) } else { solve() };\n \n+    log::debug!(\"solve({:?}) => {:?}\", goal, solution);\n+\n     solution\n }\n \n fn is_chalk_debug() -> bool {\n     std::env::var(\"CHALK_DEBUG\").is_ok()\n }\n \n+fn is_chalk_print() -> bool {\n+    std::env::var(\"CHALK_PRINT\").is_ok()\n+}\n+\n fn solution_from_chalk(\n     db: &dyn HirDatabase,\n     solution: chalk_solve::Solution<Interner>,"}, {"sha": "17c83b6a46e45ec14e2f74aa33a518e4ac20c161", "filename": "crates/hir_ty/src/traits/chalk.rs", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c2594daf2974dbd4ce3d9b7ec72481764abaceb5/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2594daf2974dbd4ce3d9b7ec72481764abaceb5/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk.rs?ref=c2594daf2974dbd4ce3d9b7ec72481764abaceb5", "patch": "@@ -240,20 +240,23 @@ impl<'a> chalk_solve::RustIrDatabase<Interner> for ChalkContext<'a> {\n         Substs::empty().to_chalk(self.db)\n     }\n \n-    fn trait_name(&self, _trait_id: chalk_ir::TraitId<Interner>) -> String {\n-        unimplemented!()\n+    fn trait_name(&self, trait_id: chalk_ir::TraitId<Interner>) -> String {\n+        let id = from_chalk(self.db, trait_id);\n+        self.db.trait_data(id).name.to_string()\n     }\n-    fn adt_name(&self, _struct_id: chalk_ir::AdtId<Interner>) -> String {\n-        unimplemented!()\n+    // FIXME: lookup names\n+    fn adt_name(&self, struct_id: chalk_ir::AdtId<Interner>) -> String {\n+        let datum = self.db.struct_datum(self.krate, struct_id);\n+        format!(\"{:?}\", datum.name(&Interner))\n     }\n-    fn assoc_type_name(&self, _assoc_ty_id: chalk_ir::AssocTypeId<Interner>) -> String {\n-        unimplemented!()\n+    fn assoc_type_name(&self, assoc_ty_id: chalk_ir::AssocTypeId<Interner>) -> String {\n+        format!(\"Assoc_{}\", assoc_ty_id.0)\n     }\n-    fn opaque_type_name(&self, _opaque_ty_id: chalk_ir::OpaqueTyId<Interner>) -> String {\n-        unimplemented!()\n+    fn opaque_type_name(&self, opaque_ty_id: chalk_ir::OpaqueTyId<Interner>) -> String {\n+        format!(\"Opaque_{}\", opaque_ty_id.0)\n     }\n-    fn fn_def_name(&self, _fn_def_id: chalk_ir::FnDefId<Interner>) -> String {\n-        unimplemented!()\n+    fn fn_def_name(&self, fn_def_id: chalk_ir::FnDefId<Interner>) -> String {\n+        format!(\"fn_{}\", fn_def_id.0)\n     }\n }\n "}]}