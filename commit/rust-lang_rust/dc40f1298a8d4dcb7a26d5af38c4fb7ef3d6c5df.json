{"sha": "dc40f1298a8d4dcb7a26d5af38c4fb7ef3d6c5df", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjNDBmMTI5OGE4ZDRkY2I3YTI2ZDVhZjM4YzRmYjdlZjNkNmM1ZGY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-23T22:19:38Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-23T22:19:38Z"}, "message": "better self-types", "tree": {"sha": "618354b471933003577ff2a5616c27bd272f62f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/618354b471933003577ff2a5616c27bd272f62f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc40f1298a8d4dcb7a26d5af38c4fb7ef3d6c5df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc40f1298a8d4dcb7a26d5af38c4fb7ef3d6c5df", "html_url": "https://github.com/rust-lang/rust/commit/dc40f1298a8d4dcb7a26d5af38c4fb7ef3d6c5df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc40f1298a8d4dcb7a26d5af38c4fb7ef3d6c5df/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf7d4a2a243cac1975b9b28d47ed91a6bd01b34f", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf7d4a2a243cac1975b9b28d47ed91a6bd01b34f", "html_url": "https://github.com/rust-lang/rust/commit/cf7d4a2a243cac1975b9b28d47ed91a6bd01b34f"}], "stats": {"total": 112, "additions": 67, "deletions": 45}, "files": [{"sha": "d460612b4fdc3773946aca1d5d0f0b5208311db4", "filename": "crates/libsyntax2/src/grammar/items/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc40f1298a8d4dcb7a26d5af38c4fb7ef3d6c5df/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fitems%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc40f1298a8d4dcb7a26d5af38c4fb7ef3d6c5df/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fitems%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fitems%2Fmod.rs?ref=dc40f1298a8d4dcb7a26d5af38c4fb7ef3d6c5df", "patch": "@@ -208,7 +208,7 @@ fn extern_crate_item(p: &mut Parser) {\n     assert!(p.at(CRATE_KW));\n     p.bump();\n     name(p);\n-    alias(p);\n+    opt_alias(p);\n     p.expect(SEMI);\n }\n "}, {"sha": "3da40a6292c261e3fa0e9a8275dbca92ff7cbd0d", "filename": "crates/libsyntax2/src/grammar/items/use_item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc40f1298a8d4dcb7a26d5af38c4fb7ef3d6c5df/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fitems%2Fuse_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc40f1298a8d4dcb7a26d5af38c4fb7ef3d6c5df/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fitems%2Fuse_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fitems%2Fuse_item.rs?ref=dc40f1298a8d4dcb7a26d5af38c4fb7ef3d6c5df", "patch": "@@ -26,7 +26,7 @@ fn use_tree(p: &mut Parser) {\n             paths::use_path(p);\n             match p.current() {\n                 AS_KW => {\n-                    alias(p);\n+                    opt_alias(p);\n                 }\n                 COLONCOLON => {\n                     p.bump();"}, {"sha": "d09a9dc9c0b24df9ea5d54348bbaa82ba8eedd05", "filename": "crates/libsyntax2/src/grammar/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dc40f1298a8d4dcb7a26d5af38c4fb7ef3d6c5df/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc40f1298a8d4dcb7a26d5af38c4fb7ef3d6c5df/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fmod.rs?ref=dc40f1298a8d4dcb7a26d5af38c4fb7ef3d6c5df", "patch": "@@ -92,14 +92,14 @@ fn opt_visibility(p: &mut Parser) {\n         _ => (),\n     }\n }\n-fn alias(p: &mut Parser) -> bool {\n+\n+fn opt_alias(p: &mut Parser) {\n     if p.at(AS_KW) {\n-        let alias = p.start();\n+        let m = p.start();\n         p.bump();\n         name(p);\n-        alias.complete(p, ALIAS);\n+        m.complete(p, ALIAS);\n     }\n-    true //FIXME: return false if three are errors\n }\n \n fn abi(p: &mut Parser) {"}, {"sha": "47567ec8a7f240ceef601dd901367de0c0b12d5d", "filename": "crates/libsyntax2/src/grammar/params.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dc40f1298a8d4dcb7a26d5af38c4fb7ef3d6c5df/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fparams.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc40f1298a8d4dcb7a26d5af38c4fb7ef3d6c5df/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fparams.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fparams.rs?ref=dc40f1298a8d4dcb7a26d5af38c4fb7ef3d6c5df", "patch": "@@ -92,16 +92,18 @@ fn value_parameter(p: &mut Parser, flavor: Flavor) {\n //     fn b(&self,) {}\n //     fn c(&'a self,) {}\n //     fn d(&'a mut self, x: i32) {}\n+//     fn e(mut self) {}\n // }\n fn self_param(p: &mut Parser) {\n     let m;\n-    if p.at(SELF_KW) {\n+    if p.at(SELF_KW) || p.at(MUT_KW) && p.nth(1) == SELF_KW {\n         m = p.start();\n-        p.bump();\n+        p.eat(MUT_KW);\n+        p.eat(SELF_KW);\n         // test arb_self_types\n         // impl S {\n         //     fn a(self: &Self) {}\n-        //     fn b(self: Box<Self>) {}\n+        //     fn b(mut self: Box<Self>) {}\n         // }\n         if p.at(COLON) {\n             types::ascription(p);"}, {"sha": "80c0a43f5de0df9081c7eae671c6ac0f76b11b90", "filename": "crates/libsyntax2/tests/data/parser/inline/0055_self_param.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dc40f1298a8d4dcb7a26d5af38c4fb7ef3d6c5df/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Finline%2F0055_self_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc40f1298a8d4dcb7a26d5af38c4fb7ef3d6c5df/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Finline%2F0055_self_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Finline%2F0055_self_param.rs?ref=dc40f1298a8d4dcb7a26d5af38c4fb7ef3d6c5df", "patch": "@@ -3,4 +3,5 @@ impl S {\n     fn b(&self,) {}\n     fn c(&'a self,) {}\n     fn d(&'a mut self, x: i32) {}\n+    fn e(mut self) {}\n }"}, {"sha": "dd21dfe94d5d2f771466a782aab317d22740f85b", "filename": "crates/libsyntax2/tests/data/parser/inline/0055_self_param.txt", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/dc40f1298a8d4dcb7a26d5af38c4fb7ef3d6c5df/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Finline%2F0055_self_param.txt", "raw_url": "https://github.com/rust-lang/rust/raw/dc40f1298a8d4dcb7a26d5af38c4fb7ef3d6c5df/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Finline%2F0055_self_param.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Finline%2F0055_self_param.txt?ref=dc40f1298a8d4dcb7a26d5af38c4fb7ef3d6c5df", "patch": "@@ -1,5 +1,5 @@\n-FILE@[0; 106)\n-  IMPL_ITEM@[0; 105)\n+FILE@[0; 128)\n+  IMPL_ITEM@[0; 127)\n     IMPL_KW@[0; 4)\n     WHITESPACE@[4; 5)\n     PATH_TYPE@[5; 6)\n@@ -93,6 +93,23 @@ FILE@[0; 106)\n       BLOCK_EXPR@[101; 103)\n         L_CURLY@[101; 102)\n         R_CURLY@[102; 103)\n-    WHITESPACE@[103; 104)\n-    R_CURLY@[104; 105)\n-  WHITESPACE@[105; 106)\n+    WHITESPACE@[103; 108)\n+    FN_DEF@[108; 125)\n+      FN_KW@[108; 110)\n+      WHITESPACE@[110; 111)\n+      NAME@[111; 112)\n+        IDENT@[111; 112) \"e\"\n+      PARAM_LIST@[112; 122)\n+        L_PAREN@[112; 113)\n+        SELF_PARAM@[113; 121)\n+          MUT_KW@[113; 116)\n+          WHITESPACE@[116; 117)\n+          SELF_KW@[117; 121)\n+        R_PAREN@[121; 122)\n+      WHITESPACE@[122; 123)\n+      BLOCK_EXPR@[123; 125)\n+        L_CURLY@[123; 124)\n+        R_CURLY@[124; 125)\n+    WHITESPACE@[125; 126)\n+    R_CURLY@[126; 127)\n+  WHITESPACE@[127; 128)"}, {"sha": "6a170d5ac1d38c96cbaafa51beb5ada862c12a0c", "filename": "crates/libsyntax2/tests/data/parser/inline/0104_arb_self_types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc40f1298a8d4dcb7a26d5af38c4fb7ef3d6c5df/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Finline%2F0104_arb_self_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc40f1298a8d4dcb7a26d5af38c4fb7ef3d6c5df/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Finline%2F0104_arb_self_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Finline%2F0104_arb_self_types.rs?ref=dc40f1298a8d4dcb7a26d5af38c4fb7ef3d6c5df", "patch": "@@ -1,4 +1,4 @@\n impl S {\n     fn a(self: &Self) {}\n-    fn b(self: Box<Self>) {}\n+    fn b(mut self: Box<Self>) {}\n }"}, {"sha": "de94b4c63d02d14bcf2c8e461548cebfc5267b29", "filename": "crates/libsyntax2/tests/data/parser/inline/0104_arb_self_types.txt", "status": "modified", "additions": 32, "deletions": 30, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/dc40f1298a8d4dcb7a26d5af38c4fb7ef3d6c5df/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Finline%2F0104_arb_self_types.txt", "raw_url": "https://github.com/rust-lang/rust/raw/dc40f1298a8d4dcb7a26d5af38c4fb7ef3d6c5df/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Finline%2F0104_arb_self_types.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Finline%2F0104_arb_self_types.txt?ref=dc40f1298a8d4dcb7a26d5af38c4fb7ef3d6c5df", "patch": "@@ -1,5 +1,5 @@\n-FILE@[0; 65)\n-  IMPL_ITEM@[0; 64)\n+FILE@[0; 69)\n+  IMPL_ITEM@[0; 68)\n     IMPL_KW@[0; 4)\n     WHITESPACE@[4; 5)\n     PATH_TYPE@[5; 6)\n@@ -34,36 +34,38 @@ FILE@[0; 65)\n         L_CURLY@[31; 32)\n         R_CURLY@[32; 33)\n     WHITESPACE@[33; 38)\n-    FN_DEF@[38; 62)\n+    FN_DEF@[38; 66)\n       FN_KW@[38; 40)\n       WHITESPACE@[40; 41)\n       NAME@[41; 42)\n         IDENT@[41; 42) \"b\"\n-      PARAM_LIST@[42; 59)\n+      PARAM_LIST@[42; 63)\n         L_PAREN@[42; 43)\n-        SELF_PARAM@[43; 58)\n-          SELF_KW@[43; 47)\n-          COLON@[47; 48)\n-          WHITESPACE@[48; 49)\n-          PATH_TYPE@[49; 58)\n-            PATH@[49; 58)\n-              PATH_SEGMENT@[49; 58)\n-                NAME_REF@[49; 52)\n-                  IDENT@[49; 52) \"Box\"\n-                TYPE_ARG_LIST@[52; 58)\n-                  L_ANGLE@[52; 53)\n-                  TYPE_ARG@[53; 57)\n-                    PATH_TYPE@[53; 57)\n-                      PATH@[53; 57)\n-                        PATH_SEGMENT@[53; 57)\n-                          NAME_REF@[53; 57)\n-                            IDENT@[53; 57) \"Self\"\n-                  R_ANGLE@[57; 58)\n-        R_PAREN@[58; 59)\n-      WHITESPACE@[59; 60)\n-      BLOCK_EXPR@[60; 62)\n-        L_CURLY@[60; 61)\n-        R_CURLY@[61; 62)\n-    WHITESPACE@[62; 63)\n-    R_CURLY@[63; 64)\n-  WHITESPACE@[64; 65)\n+        SELF_PARAM@[43; 62)\n+          MUT_KW@[43; 46)\n+          WHITESPACE@[46; 47)\n+          SELF_KW@[47; 51)\n+          COLON@[51; 52)\n+          WHITESPACE@[52; 53)\n+          PATH_TYPE@[53; 62)\n+            PATH@[53; 62)\n+              PATH_SEGMENT@[53; 62)\n+                NAME_REF@[53; 56)\n+                  IDENT@[53; 56) \"Box\"\n+                TYPE_ARG_LIST@[56; 62)\n+                  L_ANGLE@[56; 57)\n+                  TYPE_ARG@[57; 61)\n+                    PATH_TYPE@[57; 61)\n+                      PATH@[57; 61)\n+                        PATH_SEGMENT@[57; 61)\n+                          NAME_REF@[57; 61)\n+                            IDENT@[57; 61) \"Self\"\n+                  R_ANGLE@[61; 62)\n+        R_PAREN@[62; 63)\n+      WHITESPACE@[63; 64)\n+      BLOCK_EXPR@[64; 66)\n+        L_CURLY@[64; 65)\n+        R_CURLY@[65; 66)\n+    WHITESPACE@[66; 67)\n+    R_CURLY@[67; 68)\n+  WHITESPACE@[68; 69)"}]}