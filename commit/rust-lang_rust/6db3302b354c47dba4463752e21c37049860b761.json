{"sha": "6db3302b354c47dba4463752e21c37049860b761", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkYjMzMDJiMzU0YzQ3ZGJhNDQ2Mzc1MmUyMWMzNzA0OTg2MGI3NjE=", "commit": {"author": {"name": "Vadim Chugunov", "email": "vadimcn@gmail.com", "date": "2013-06-10T23:28:10Z"}, "committer": {"name": "Vadim Chugunov", "email": "vadimcn@gmail.com", "date": "2013-06-17T15:41:24Z"}, "message": "Debug loc for local var declarations", "tree": {"sha": "fc005872a9f2e1ba21e1e2f7de9affa904aaf611", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc005872a9f2e1ba21e1e2f7de9affa904aaf611"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6db3302b354c47dba4463752e21c37049860b761", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6db3302b354c47dba4463752e21c37049860b761", "html_url": "https://github.com/rust-lang/rust/commit/6db3302b354c47dba4463752e21c37049860b761", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6db3302b354c47dba4463752e21c37049860b761/comments", "author": {"login": "vadimcn", "id": 3203809, "node_id": "MDQ6VXNlcjMyMDM4MDk=", "avatar_url": "https://avatars.githubusercontent.com/u/3203809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vadimcn", "html_url": "https://github.com/vadimcn", "followers_url": "https://api.github.com/users/vadimcn/followers", "following_url": "https://api.github.com/users/vadimcn/following{/other_user}", "gists_url": "https://api.github.com/users/vadimcn/gists{/gist_id}", "starred_url": "https://api.github.com/users/vadimcn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vadimcn/subscriptions", "organizations_url": "https://api.github.com/users/vadimcn/orgs", "repos_url": "https://api.github.com/users/vadimcn/repos", "events_url": "https://api.github.com/users/vadimcn/events{/privacy}", "received_events_url": "https://api.github.com/users/vadimcn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vadimcn", "id": 3203809, "node_id": "MDQ6VXNlcjMyMDM4MDk=", "avatar_url": "https://avatars.githubusercontent.com/u/3203809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vadimcn", "html_url": "https://github.com/vadimcn", "followers_url": "https://api.github.com/users/vadimcn/followers", "following_url": "https://api.github.com/users/vadimcn/following{/other_user}", "gists_url": "https://api.github.com/users/vadimcn/gists{/gist_id}", "starred_url": "https://api.github.com/users/vadimcn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vadimcn/subscriptions", "organizations_url": "https://api.github.com/users/vadimcn/orgs", "repos_url": "https://api.github.com/users/vadimcn/repos", "events_url": "https://api.github.com/users/vadimcn/events{/privacy}", "received_events_url": "https://api.github.com/users/vadimcn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1079e41143e2f94fc0f969b967aaf89b2f4448a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/1079e41143e2f94fc0f969b967aaf89b2f4448a2", "html_url": "https://github.com/rust-lang/rust/commit/1079e41143e2f94fc0f969b967aaf89b2f4448a2"}], "stats": {"total": 32, "additions": 18, "deletions": 14}, "files": [{"sha": "4b00b027968b3907b4cd5da44087399836a7f0c6", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 18, "deletions": 14, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/6db3302b354c47dba4463752e21c37049860b761/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6db3302b354c47dba4463752e21c37049860b761/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=6db3302b354c47dba4463752e21c37049860b761", "patch": "@@ -67,7 +67,7 @@ struct _DebugContext {\n     names: namegen,\n     crate_file: ~str,\n     builder: DIBuilderRef,\n-    curr_loc: (int, int),\n+    curr_loc: (uint, uint),\n     created_files: HashMap<~str, DIFile>,\n     created_functions: HashMap<ast::node_id, DISubprogram>,\n     created_blocks: HashMap<ast::node_id, DILexicalBlock>,\n@@ -82,7 +82,7 @@ pub fn mk_ctxt(llmod: ModuleRef, crate: ~str, intr: @ident_interner) -> DebugCon\n         names: new_namegen(intr),\n         crate_file: crate,\n         builder: builder,\n-        curr_loc: (-1, -1),\n+        curr_loc: (0, 0),\n         created_files: HashMap::new(),\n         created_functions: HashMap::new(),\n         created_blocks: HashMap::new(),\n@@ -619,9 +619,13 @@ pub fn create_local_var(bcx: block, local: @ast::local) -> DIVariable {\n                 fmt!(\"No entry in lllocals table for %?\", local.node.id));\n         }\n     };\n+    \n+    set_debug_location(bcx, loc.line, loc.col.to_uint());\n     unsafe {\n-        llvm::LLVMDIBuilderInsertDeclareAtEnd(dcx.builder, llptr, var_md, bcx.llbb);\n+        let instr = llvm::LLVMDIBuilderInsertDeclareAtEnd(dcx.builder, llptr, var_md, bcx.llbb);\n+        llvm::LLVMSetInstDebugLocation(trans::build::B(bcx), instr);\n     }\n+    \n     return var_md;\n }\n \n@@ -668,10 +672,12 @@ pub fn create_arg(bcx: block, arg: ast::arg, sp: span) -> Option<DIVariable> {\n     }\n }\n \n-fn create_debug_loc(line: int, col: int, scope: DIScope) -> DILocation {\n-    let elems = ~[C_i32(line as i32), C_i32(col as i32), scope, ptr::null()];\n+fn set_debug_location(bcx: block, line: uint, col: uint) {\n+    let blockmd = create_block(bcx);\n+    let elems = ~[C_i32(line as i32), C_i32(col as i32), blockmd, ptr::null()];\n     unsafe {\n-        return llvm::LLVMMDNode(vec::raw::to_ptr(elems), elems.len() as libc::c_uint);\n+        let dbg_loc = llvm::LLVMMDNode(vec::raw::to_ptr(elems), elems.len() as libc::c_uint);\n+        llvm::LLVMSetCurrentDebugLocation(trans::build::B(bcx), dbg_loc);        \n     }\n }\n \n@@ -686,16 +692,14 @@ pub fn update_source_pos(bcx: block, sp: span) {\n     let loc = cm.lookup_char_pos(sp.lo);\n     let cx = bcx.ccx();\n     let mut dcx = dbg_cx(cx);\n-    if (loc.line.to_int(), loc.col.to_int()) == dcx.curr_loc {\n-        return;\n-    }\n     \n-    dcx.curr_loc = (loc.line.to_int(), loc.col.to_int());\n-    let blockmd = create_block(bcx);\n-    let dbgscope = create_debug_loc(loc.line.to_int(), loc.col.to_int(), blockmd);\n-    unsafe {\n-        llvm::LLVMSetCurrentDebugLocation(trans::build::B(bcx), dbgscope);\n+    let loc = (loc.line, loc.col.to_uint());\n+    if  loc == dcx.curr_loc {\n+        return;\n     }\n+    debug!(\"setting_location to %u %u\", loc.first(), loc.second());\n+    dcx.curr_loc = loc;\n+    set_debug_location(bcx, loc.first(), loc.second());\n }\n \n pub fn create_function(fcx: fn_ctxt) -> DISubprogram {"}]}