{"sha": "b9b82490206fc41eb10662d6847a1ad28618ee59", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5YjgyNDkwMjA2ZmM0MWViMTA2NjJkNjg0N2ExYWQyODYxOGVlNTk=", "commit": {"author": {"name": "Maxim Nazarenko", "email": "nz.phone@mail.ru", "date": "2018-02-14T08:11:37Z"}, "committer": {"name": "Maxim Nazarenko", "email": "nz.phone@mail.ru", "date": "2018-02-14T08:11:37Z"}, "message": "fix tidy checks", "tree": {"sha": "5c049ed8317b8c56ba5dee98cd326c5c5c58dabb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c049ed8317b8c56ba5dee98cd326c5c5c58dabb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b9b82490206fc41eb10662d6847a1ad28618ee59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b9b82490206fc41eb10662d6847a1ad28618ee59", "html_url": "https://github.com/rust-lang/rust/commit/b9b82490206fc41eb10662d6847a1ad28618ee59", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b9b82490206fc41eb10662d6847a1ad28618ee59/comments", "author": {"login": "NovemberZulu", "id": 897004, "node_id": "MDQ6VXNlcjg5NzAwNA==", "avatar_url": "https://avatars.githubusercontent.com/u/897004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/NovemberZulu", "html_url": "https://github.com/NovemberZulu", "followers_url": "https://api.github.com/users/NovemberZulu/followers", "following_url": "https://api.github.com/users/NovemberZulu/following{/other_user}", "gists_url": "https://api.github.com/users/NovemberZulu/gists{/gist_id}", "starred_url": "https://api.github.com/users/NovemberZulu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/NovemberZulu/subscriptions", "organizations_url": "https://api.github.com/users/NovemberZulu/orgs", "repos_url": "https://api.github.com/users/NovemberZulu/repos", "events_url": "https://api.github.com/users/NovemberZulu/events{/privacy}", "received_events_url": "https://api.github.com/users/NovemberZulu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "NovemberZulu", "id": 897004, "node_id": "MDQ6VXNlcjg5NzAwNA==", "avatar_url": "https://avatars.githubusercontent.com/u/897004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/NovemberZulu", "html_url": "https://github.com/NovemberZulu", "followers_url": "https://api.github.com/users/NovemberZulu/followers", "following_url": "https://api.github.com/users/NovemberZulu/following{/other_user}", "gists_url": "https://api.github.com/users/NovemberZulu/gists{/gist_id}", "starred_url": "https://api.github.com/users/NovemberZulu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/NovemberZulu/subscriptions", "organizations_url": "https://api.github.com/users/NovemberZulu/orgs", "repos_url": "https://api.github.com/users/NovemberZulu/repos", "events_url": "https://api.github.com/users/NovemberZulu/events{/privacy}", "received_events_url": "https://api.github.com/users/NovemberZulu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1c1fc2dbe442bedf214219d281b0d83b42cff67", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1c1fc2dbe442bedf214219d281b0d83b42cff67", "html_url": "https://github.com/rust-lang/rust/commit/f1c1fc2dbe442bedf214219d281b0d83b42cff67"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "6f91e743999b1f77cefe5d3223d375229c22c134", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b9b82490206fc41eb10662d6847a1ad28618ee59/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9b82490206fc41eb10662d6847a1ad28618ee59/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=b9b82490206fc41eb10662d6847a1ad28618ee59", "patch": "@@ -1165,7 +1165,7 @@ impl<'a, T: ?Sized + fmt::Display> fmt::Display for RefMut<'a, T> {\n /// mutated, and that `&mut T` is unique. When building abstractions like `Cell`, `RefCell`,\n /// `Mutex`, etc, you need to turn these optimizations off. `UnsafeCell` is the only legal way\n /// to do this. When `UnsafeCell<T>` _itself_ is immutably aliased, it is still safe to obtain\n-/// a mutable reference to its _interior_ and/or to mutate the interior. However, it is up to \n+/// a mutable reference to its _interior_ and/or to mutate the interior. However, it is up to\n /// the abstraction designer to ensure that no two mutable references obtained this way are active\n /// at the same time, there are no active immutable reference when a mutable reference is obtained\n /// from the cell, and that there are no active mutable references or mutations when an immutable\n@@ -1243,7 +1243,7 @@ impl<T: ?Sized> UnsafeCell<T> {\n     /// This can be cast to a pointer of any kind.\n     /// Ensure that the access is unique (no active references, mutable or not)\n     /// when casting to `&mut T`, and ensure that there are no mutations\n-\t/// or mutable aliases going on when casting to `&T`\n+    /// or mutable aliases going on when casting to `&T`\n     ///\n     /// # Examples\n     ///"}]}