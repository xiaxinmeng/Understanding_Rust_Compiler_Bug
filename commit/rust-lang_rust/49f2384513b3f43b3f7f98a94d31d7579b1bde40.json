{"sha": "49f2384513b3f43b3f7f98a94d31d7579b1bde40", "node_id": "C_kwDOAAsO6NoAKDQ5ZjIzODQ1MTNiM2Y0M2IzZjdmOThhOTRkMzFkNzU3OWIxYmRlNDA", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-10-22T10:42:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-22T10:42:51Z"}, "message": "Rollup merge of #90114 - BoxyUwU:cg_defaults_tests, r=lcnr\n\nAdd some tests for const_generics_defaults\n\nI think this covers some of the stuff required for stabilisation report, some of these tests are probably covering stuff we already have but it can't hurt to have more :)\n\nr? ````@lcnr````", "tree": {"sha": "c168a16834eed631cf8aa5755f0a5255719876c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c168a16834eed631cf8aa5755f0a5255719876c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/49f2384513b3f43b3f7f98a94d31d7579b1bde40", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhcpWsCRBK7hj4Ov3rIwAAqZoIACvKRxdKNSjGJMHMJkMNoc8X\nZwTzhs4WTlDY5fzQVfAuAkCod/p2ubMGPvmP4KoAPSTjOBunPYiLmQjK+TxOrDih\nBvuqcCSTXtgz+FddQB8J7vkMRSUQXANuyxT9bDRhSab/bIo/mXfyl9y3jEkR3OBh\nw24PjPeb8r/8tK9QAb7y1FWTZYfYIcu1fTyAG/MXrjeFi8xua7tq215ueqNeey8b\ntSPF/mutTzCQXv2DLzjsVFF1LY0gE2zwOk8Az5r9N0uBeK3WkO9W1xP8Tad6YbZp\n75vgjvKM5ocj/vNvCErHOQBWVZbTO3vpCXabNyec3hNgzgIGaQXjcyLNNIzY76s=\n=tkkv\n-----END PGP SIGNATURE-----\n", "payload": "tree c168a16834eed631cf8aa5755f0a5255719876c4\nparent de306d77dbc87278866b096c1670f4d95727c861\nparent e7a9e820d28e02d63065aeb1f961e1d8ba83759d\nauthor Yuki Okushi <jtitor@2k36.org> 1634899371 +0900\ncommitter GitHub <noreply@github.com> 1634899371 +0900\n\nRollup merge of #90114 - BoxyUwU:cg_defaults_tests, r=lcnr\n\nAdd some tests for const_generics_defaults\n\nI think this covers some of the stuff required for stabilisation report, some of these tests are probably covering stuff we already have but it can't hurt to have more :)\n\nr? ````@lcnr````\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/49f2384513b3f43b3f7f98a94d31d7579b1bde40", "html_url": "https://github.com/rust-lang/rust/commit/49f2384513b3f43b3f7f98a94d31d7579b1bde40", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/49f2384513b3f43b3f7f98a94d31d7579b1bde40/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de306d77dbc87278866b096c1670f4d95727c861", "url": "https://api.github.com/repos/rust-lang/rust/commits/de306d77dbc87278866b096c1670f4d95727c861", "html_url": "https://github.com/rust-lang/rust/commit/de306d77dbc87278866b096c1670f4d95727c861"}, {"sha": "e7a9e820d28e02d63065aeb1f961e1d8ba83759d", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7a9e820d28e02d63065aeb1f961e1d8ba83759d", "html_url": "https://github.com/rust-lang/rust/commit/e7a9e820d28e02d63065aeb1f961e1d8ba83759d"}], "stats": {"total": 296, "additions": 294, "deletions": 2}, "files": [{"sha": "5517bf8ac5fb221b7ac816962d84631454ce2612", "filename": "src/test/ui/const-generics/defaults/default-annotation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49f2384513b3f43b3f7f98a94d31d7579b1bde40/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-annotation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49f2384513b3f43b3f7f98a94d31d7579b1bde40/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-annotation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-annotation.rs?ref=49f2384513b3f43b3f7f98a94d31d7579b1bde40", "patch": "@@ -2,7 +2,7 @@\n #![feature(staged_api)]\n #![feature(const_generics_defaults)]\n #![allow(incomplete_features)]\n-// FIXME(const_generics): It seems like we aren't testing the right thing here,\n+// FIXME(const_generics_defaults): It seems like we aren't testing the right thing here,\n // I would assume that we want the attributes to apply to the const parameter defaults\n // themselves.\n #![stable(feature = \"const_default_test\", since=\"none\")]"}, {"sha": "c7f14e47a9d64980ef15cb85691919c84e3862fd", "filename": "src/test/ui/const-generics/defaults/doesnt_infer.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/49f2384513b3f43b3f7f98a94d31d7579b1bde40/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdoesnt_infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49f2384513b3f43b3f7f98a94d31d7579b1bde40/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdoesnt_infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdoesnt_infer.rs?ref=49f2384513b3f43b3f7f98a94d31d7579b1bde40", "patch": "@@ -0,0 +1,15 @@\n+#![feature(const_generics_defaults)]\n+\n+// test that defaulted const params are not used to help type inference\n+\n+struct Foo<const N: u32 = 2>;\n+\n+impl<const N: u32> Foo<N> {\n+    fn foo() -> Self { loop {} }\n+}\n+\n+fn main() {\n+    let foo = Foo::<1>::foo();\n+    let foo = Foo::foo();\n+    //~^ error: type annotations needed for `Foo<{_: u32}>`\n+}"}, {"sha": "b57975e26f290b3667b35a347ef9609dc4f48878", "filename": "src/test/ui/const-generics/defaults/doesnt_infer.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/49f2384513b3f43b3f7f98a94d31d7579b1bde40/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdoesnt_infer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/49f2384513b3f43b3f7f98a94d31d7579b1bde40/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdoesnt_infer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdoesnt_infer.stderr?ref=49f2384513b3f43b3f7f98a94d31d7579b1bde40", "patch": "@@ -0,0 +1,11 @@\n+error[E0282]: type annotations needed for `Foo<{_: u32}>`\n+  --> $DIR/doesnt_infer.rs:13:15\n+   |\n+LL |     let foo = Foo::foo();\n+   |         ---   ^^^^^^^^ cannot infer the value of const parameter `N`\n+   |         |\n+   |         consider giving `foo` the explicit type `Foo<{_: u32}>`, where the type parameter `N` is specified\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0282`."}, {"sha": "1447ebe5348f61395f756fa7d598e54fe248d9f0", "filename": "src/test/ui/const-generics/defaults/rp_impl_trait.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/49f2384513b3f43b3f7f98a94d31d7579b1bde40/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frp_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49f2384513b3f43b3f7f98a94d31d7579b1bde40/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frp_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frp_impl_trait.rs?ref=49f2384513b3f43b3f7f98a94d31d7579b1bde40", "patch": "@@ -0,0 +1,31 @@\n+// run-pass\n+#![feature(const_generics_defaults)]\n+\n+struct Uwu<const N: u32 = 1, const M: u32 = N>;\n+\n+trait Trait {}\n+impl<const N: u32> Trait for Uwu<N> {}\n+\n+fn rawr<const N: u32>() -> impl Trait {\n+    Uwu::<N>\n+}\n+\n+trait Traitor<const N: u8 = 1, const M: u8 = N> { }\n+\n+impl<const N: u8> Traitor<N> for u32 {}\n+impl Traitor<1, 1> for u64 {}\n+\n+fn uwu<const N: u8>() -> impl Traitor<N> {\n+    1_u32\n+}\n+\n+fn owo() -> impl Traitor {\n+    1_u64\n+}\n+\n+fn main() {\n+    rawr::<3>();\n+    rawr::<7>();\n+    uwu::<{ u8::MAX }>();\n+    owo();\n+}"}, {"sha": "c989fc8338b902d85d23ba50ed15ee3f1b4f44b3", "filename": "src/test/ui/const-generics/defaults/rp_impl_trait_fail.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/49f2384513b3f43b3f7f98a94d31d7579b1bde40/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frp_impl_trait_fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49f2384513b3f43b3f7f98a94d31d7579b1bde40/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frp_impl_trait_fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frp_impl_trait_fail.rs?ref=49f2384513b3f43b3f7f98a94d31d7579b1bde40", "patch": "@@ -0,0 +1,33 @@\n+#![feature(const_generics_defaults)]\n+\n+struct Uwu<const N: u32 = 1, const M: u32 = N>;\n+\n+trait Trait {}\n+impl<const N: u32> Trait for Uwu<N> {}\n+\n+fn rawr() -> impl Trait {\n+    //~^ error: the trait bound `Uwu<10_u32, 12_u32>: Trait` is not satisfied\n+    Uwu::<10, 12>\n+}\n+\n+trait Traitor<const N: u8 = 1, const M: u8 = N> { }\n+\n+impl<const N: u8> Traitor<N, 2> for u32 {}\n+impl Traitor<1, 2> for u64 {}\n+\n+\n+fn uwu<const N: u8>() -> impl Traitor<N> {\n+    //~^ error: the trait bound `u32: Traitor<N, N>` is not satisfied\n+    1_u32\n+}\n+\n+fn owo() -> impl Traitor {\n+    //~^ error: the trait bound `u64: Traitor<1_u8, 1_u8>` is not satisfied\n+    1_u64\n+}\n+\n+fn main() {\n+    rawr();\n+    uwu();\n+    owo();\n+}"}, {"sha": "cf28932177a7a093d60a7cb156cfefb52235e825", "filename": "src/test/ui/const-generics/defaults/rp_impl_trait_fail.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/49f2384513b3f43b3f7f98a94d31d7579b1bde40/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frp_impl_trait_fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/49f2384513b3f43b3f7f98a94d31d7579b1bde40/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frp_impl_trait_fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frp_impl_trait_fail.stderr?ref=49f2384513b3f43b3f7f98a94d31d7579b1bde40", "patch": "@@ -0,0 +1,30 @@\n+error[E0277]: the trait bound `Uwu<10_u32, 12_u32>: Trait` is not satisfied\n+  --> $DIR/rp_impl_trait_fail.rs:8:14\n+   |\n+LL | fn rawr() -> impl Trait {\n+   |              ^^^^^^^^^^ the trait `Trait` is not implemented for `Uwu<10_u32, 12_u32>`\n+   |\n+   = help: the following implementations were found:\n+             <Uwu<N> as Trait>\n+\n+error[E0277]: the trait bound `u32: Traitor<N, N>` is not satisfied\n+  --> $DIR/rp_impl_trait_fail.rs:19:26\n+   |\n+LL | fn uwu<const N: u8>() -> impl Traitor<N> {\n+   |                          ^^^^^^^^^^^^^^^ the trait `Traitor<N, N>` is not implemented for `u32`\n+   |\n+   = help: the following implementations were found:\n+             <u32 as Traitor<N, 2_u8>>\n+\n+error[E0277]: the trait bound `u64: Traitor<1_u8, 1_u8>` is not satisfied\n+  --> $DIR/rp_impl_trait_fail.rs:24:13\n+   |\n+LL | fn owo() -> impl Traitor {\n+   |             ^^^^^^^^^^^^ the trait `Traitor<1_u8, 1_u8>` is not implemented for `u64`\n+   |\n+   = help: the following implementations were found:\n+             <u64 as Traitor<1_u8, 2_u8>>\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "e36f23fadb2721dacd6962f7014f7878c592afe9", "filename": "src/test/ui/const-generics/defaults/trait_objects.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/49f2384513b3f43b3f7f98a94d31d7579b1bde40/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Ftrait_objects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49f2384513b3f43b3f7f98a94d31d7579b1bde40/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Ftrait_objects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Ftrait_objects.rs?ref=49f2384513b3f43b3f7f98a94d31d7579b1bde40", "patch": "@@ -0,0 +1,45 @@\n+// run-pass\n+#![feature(const_generics_defaults)]\n+\n+trait Trait<const N: u8 = 12> {\n+    fn uwu(&self) -> u8 {\n+        N\n+    }\n+}\n+\n+impl Trait for u32 {}\n+\n+impl Trait<12> for u64 {\n+    fn uwu(&self) -> u8 {\n+        *self as u8\n+    }\n+}\n+\n+fn foo(arg: &dyn Trait) -> u8 {\n+    arg.uwu()\n+}\n+\n+trait Traitor<const N: u8 = 1, const M: u8 = N> {\n+    fn owo(&self) -> u8 {\n+        M\n+    }\n+}\n+\n+impl Traitor<2> for bool { }\n+impl Traitor for u8 {\n+    fn owo(&self) -> u8 {\n+        *self\n+    }\n+}\n+\n+fn bar<const N: u8>(arg: &dyn Traitor<N>) -> u8 {\n+    arg.owo()\n+}\n+\n+fn main() {\n+    assert_eq!(foo(&10_u32), 12);\n+    assert_eq!(foo(&3_u64), 3);\n+\n+    assert_eq!(bar(&true), 2);\n+    assert_eq!(bar(&1_u8), 1);\n+}"}, {"sha": "09e4265a7a0ef9b760100dfb500406c9612e464f", "filename": "src/test/ui/const-generics/defaults/trait_objects_fail.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/49f2384513b3f43b3f7f98a94d31d7579b1bde40/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Ftrait_objects_fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49f2384513b3f43b3f7f98a94d31d7579b1bde40/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Ftrait_objects_fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Ftrait_objects_fail.rs?ref=49f2384513b3f43b3f7f98a94d31d7579b1bde40", "patch": "@@ -0,0 +1,32 @@\n+#![feature(const_generics_defaults)]\n+\n+trait Trait<const N: u8 = 12> {\n+    fn uwu(&self) -> u8 {\n+        N\n+    }\n+}\n+\n+impl Trait<2> for u32 {}\n+\n+fn foo(arg: &dyn Trait) -> u8 {\n+    arg.uwu()\n+}\n+\n+trait Traitor<const N: u8 = 1, const M: u8 = N> {\n+    fn owo(&self) -> u8 {\n+        M\n+    }\n+}\n+\n+impl Traitor<2, 3> for bool { }\n+\n+fn bar<const N: u8>(arg: &dyn Traitor<N>) -> u8 {\n+    arg.owo()\n+}\n+\n+fn main() {\n+    foo(&10_u32);\n+    //~^ error: the trait bound `u32: Trait` is not satisfied\n+    bar(&true);\n+    //~^ error: the trait bound `bool: Traitor<{_: u8}, {_: u8}>` is not satisfied\n+}"}, {"sha": "b097c8cd4bae1e2e850e05157757099a17a243cd", "filename": "src/test/ui/const-generics/defaults/trait_objects_fail.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/49f2384513b3f43b3f7f98a94d31d7579b1bde40/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Ftrait_objects_fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/49f2384513b3f43b3f7f98a94d31d7579b1bde40/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Ftrait_objects_fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Ftrait_objects_fail.stderr?ref=49f2384513b3f43b3f7f98a94d31d7579b1bde40", "patch": "@@ -0,0 +1,27 @@\n+error[E0277]: the trait bound `u32: Trait` is not satisfied\n+  --> $DIR/trait_objects_fail.rs:28:9\n+   |\n+LL |     foo(&10_u32);\n+   |     --- ^^^^^^^ the trait `Trait` is not implemented for `u32`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+   = help: the following implementations were found:\n+             <u32 as Trait<2_u8>>\n+   = note: required for the cast to the object type `dyn Trait`\n+\n+error[E0277]: the trait bound `bool: Traitor<{_: u8}, {_: u8}>` is not satisfied\n+  --> $DIR/trait_objects_fail.rs:30:9\n+   |\n+LL |     bar(&true);\n+   |     --- ^^^^^ the trait `Traitor<{_: u8}, {_: u8}>` is not implemented for `bool`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+   = help: the following implementations were found:\n+             <bool as Traitor<2_u8, 3_u8>>\n+   = note: required for the cast to the object type `dyn Traitor<{_: u8}, {_: u8}>`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "c171f292fd6988b6edfc8f2094e3e714c20574cd", "filename": "src/test/ui/const-generics/defaults/wfness.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/49f2384513b3f43b3f7f98a94d31d7579b1bde40/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwfness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49f2384513b3f43b3f7f98a94d31d7579b1bde40/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwfness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwfness.rs?ref=49f2384513b3f43b3f7f98a94d31d7579b1bde40", "patch": "@@ -0,0 +1,21 @@\n+#![feature(const_generics_defaults)]\n+\n+struct Ooopsies<const N: u8 = { u8::MAX + 1 }>;\n+//~^ error: evaluation of constant value failed\n+\n+trait Trait<const N: u8> {}\n+impl Trait<3> for () {}\n+struct WhereClause<const N: u8 = 2> where (): Trait<N>;\n+//~^ error: the trait bound `(): Trait<2_u8>` is not satisfied\n+\n+trait Traitor<T, const N: u8> {}\n+struct WhereClauseTooGeneric<T = u32, const N: u8 = 2>(T) where (): Traitor<T, N>;\n+\n+// no error on struct def\n+struct DependentDefaultWfness<const N: u8 = 1, T = WhereClause<N>>(T);\n+fn foo() -> DependentDefaultWfness {\n+    //~^ error: the trait bound `(): Trait<1_u8>` is not satisfied\n+    loop {}\n+}\n+\n+fn main() {}"}, {"sha": "9826af8802a27377ca326461dad1ddf409688d1a", "filename": "src/test/ui/const-generics/defaults/wfness.stderr", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/49f2384513b3f43b3f7f98a94d31d7579b1bde40/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwfness.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/49f2384513b3f43b3f7f98a94d31d7579b1bde40/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwfness.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwfness.stderr?ref=49f2384513b3f43b3f7f98a94d31d7579b1bde40", "patch": "@@ -0,0 +1,38 @@\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/wfness.rs:3:33\n+   |\n+LL | struct Ooopsies<const N: u8 = { u8::MAX + 1 }>;\n+   |                                 ^^^^^^^^^^^ attempt to compute `u8::MAX + 1_u8`, which would overflow\n+\n+error[E0277]: the trait bound `(): Trait<2_u8>` is not satisfied\n+  --> $DIR/wfness.rs:8:47\n+   |\n+LL | struct WhereClause<const N: u8 = 2> where (): Trait<N>;\n+   |                                               ^^^^^^^^ the trait `Trait<2_u8>` is not implemented for `()`\n+   |\n+   = help: the following implementations were found:\n+             <() as Trait<3_u8>>\n+note: required by `WhereClause`\n+  --> $DIR/wfness.rs:8:1\n+   |\n+LL | struct WhereClause<const N: u8 = 2> where (): Trait<N>;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0277]: the trait bound `(): Trait<1_u8>` is not satisfied\n+  --> $DIR/wfness.rs:16:13\n+   |\n+LL | fn foo() -> DependentDefaultWfness {\n+   |             ^^^^^^^^^^^^^^^^^^^^^^ the trait `Trait<1_u8>` is not implemented for `()`\n+   |\n+   = help: the following implementations were found:\n+             <() as Trait<3_u8>>\n+note: required by a bound in `WhereClause`\n+  --> $DIR/wfness.rs:8:47\n+   |\n+LL | struct WhereClause<const N: u8 = 2> where (): Trait<N>;\n+   |                                               ^^^^^^^^ required by this bound in `WhereClause`\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors have detailed explanations: E0080, E0277.\n+For more information about an error, try `rustc --explain E0080`."}, {"sha": "94e7367b1fb765d9ecfa53aae01883d380046612", "filename": "src/test/ui/const-generics/defaults/wrong-order.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/49f2384513b3f43b3f7f98a94d31d7579b1bde40/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwrong-order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49f2384513b3f43b3f7f98a94d31d7579b1bde40/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwrong-order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwrong-order.rs?ref=49f2384513b3f43b3f7f98a94d31d7579b1bde40", "patch": "@@ -5,4 +5,7 @@ struct A<T = u32, const N: usize> {\n     arg: T,\n }\n \n+struct Foo<const N: u8 = 3, T>(T);\n+//~^ error: generic parameters with a default must be trailing\n+\n fn main() {}"}, {"sha": "143ce5c4fea7ed7512c58b18bcfcc6fbc6823ef1", "filename": "src/test/ui/const-generics/defaults/wrong-order.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/49f2384513b3f43b3f7f98a94d31d7579b1bde40/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwrong-order.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/49f2384513b3f43b3f7f98a94d31d7579b1bde40/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwrong-order.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwrong-order.stderr?ref=49f2384513b3f43b3f7f98a94d31d7579b1bde40", "patch": "@@ -4,5 +4,11 @@ error: generic parameters with a default must be trailing\n LL | struct A<T = u32, const N: usize> {\n    |          ^\n \n-error: aborting due to previous error\n+error: generic parameters with a default must be trailing\n+  --> $DIR/wrong-order.rs:8:18\n+   |\n+LL | struct Foo<const N: u8 = 3, T>(T);\n+   |                  ^\n+\n+error: aborting due to 2 previous errors\n "}]}