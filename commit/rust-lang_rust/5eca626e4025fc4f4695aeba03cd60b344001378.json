{"sha": "5eca626e4025fc4f4695aeba03cd60b344001378", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlY2E2MjZlNDAyNWZjNGY0Njk1YWViYTAzY2Q2MGIzNDQwMDEzNzg=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2020-11-20T10:52:27Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2021-08-19T21:28:24Z"}, "message": "shallow resolve target type in coercion\n\nWe used to avoid doing this because we didn't want to make coercion depend on\nthe state of inference. For better or worse, we have moved away from this\nposition over time. Therefore, I am going to go ahead and resolve the `b`\ntarget type early on so that it is done uniformly.\n\n(The older technique for managing this was always something of a hack\nregardless; if we really wanted to avoid integrating coercion and inference we\nneeded to be more disciplined about it.)", "tree": {"sha": "1b4bdf292e78ebbbc2744b84904f6a863adcb6fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b4bdf292e78ebbbc2744b84904f6a863adcb6fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5eca626e4025fc4f4695aeba03cd60b344001378", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5eca626e4025fc4f4695aeba03cd60b344001378", "html_url": "https://github.com/rust-lang/rust/commit/5eca626e4025fc4f4695aeba03cd60b344001378", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5eca626e4025fc4f4695aeba03cd60b344001378/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e0ae7d89bcbf5174ab2d5198c438cfd0bebd4e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e0ae7d89bcbf5174ab2d5198c438cfd0bebd4e8", "html_url": "https://github.com/rust-lang/rust/commit/7e0ae7d89bcbf5174ab2d5198c438cfd0bebd4e8"}], "stats": {"total": 7, "additions": 2, "deletions": 5}, "files": [{"sha": "0f39d2819ab4e8be12ed3913994946e1709db659", "filename": "compiler/rustc_typeck/src/check/coercion.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5eca626e4025fc4f4695aeba03cd60b344001378/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5eca626e4025fc4f4695aeba03cd60b344001378/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs?ref=5eca626e4025fc4f4695aeba03cd60b344001378", "patch": "@@ -147,6 +147,7 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n \n     fn coerce(&self, a: Ty<'tcx>, b: Ty<'tcx>) -> CoerceResult<'tcx> {\n         let a = self.shallow_resolve(a);\n+        let b = self.shallow_resolve(b);\n         debug!(\"Coerce.tys({:?} => {:?})\", a, b);\n \n         // Just ignore error types.\n@@ -162,8 +163,7 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n             //     let _: Option<?T> = Some({ return; });\n             //\n             // here, we would coerce from `!` to `?T`.\n-            let b = self.shallow_resolve(b);\n-            return if self.shallow_resolve(b).is_ty_var() {\n+            return if b.is_ty_var() {\n                 // Micro-optimization: no need for this if `b` is\n                 // already resolved in some way.\n                 let diverging_ty = self.next_diverging_ty_var(TypeVariableOrigin {\n@@ -196,9 +196,6 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n         debug!(\"coerce: unsize failed\");\n \n         // Examine the supertype and consider auto-borrowing.\n-        //\n-        // Note: does not attempt to resolve type variables we encounter.\n-        // See above for details.\n         match *b.kind() {\n             ty::RawPtr(mt_b) => {\n                 return self.coerce_unsafe_ptr(a, b, mt_b.mutbl);"}]}