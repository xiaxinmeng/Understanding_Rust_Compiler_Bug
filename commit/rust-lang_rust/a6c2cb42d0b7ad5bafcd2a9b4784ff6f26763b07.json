{"sha": "a6c2cb42d0b7ad5bafcd2a9b4784ff6f26763b07", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2YzJjYjQyZDBiN2FkNWJhZmNkMmE5YjQ3ODRmZjZmMjY3NjNiMDc=", "commit": {"author": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2020-08-10T23:11:05Z"}, "committer": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2020-08-13T06:59:57Z"}, "message": "First iteration of simplify match branches", "tree": {"sha": "9c42f25725b4acc603c82b507dd4a49637aa6111", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c42f25725b4acc603c82b507dd4a49637aa6111"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6c2cb42d0b7ad5bafcd2a9b4784ff6f26763b07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6c2cb42d0b7ad5bafcd2a9b4784ff6f26763b07", "html_url": "https://github.com/rust-lang/rust/commit/a6c2cb42d0b7ad5bafcd2a9b4784ff6f26763b07", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6c2cb42d0b7ad5bafcd2a9b4784ff6f26763b07/comments", "author": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "814bc4fe9364865bfaa94d7825b8eabc11245c7c", "url": "https://api.github.com/repos/rust-lang/rust/commits/814bc4fe9364865bfaa94d7825b8eabc11245c7c", "html_url": "https://github.com/rust-lang/rust/commit/814bc4fe9364865bfaa94d7825b8eabc11245c7c"}], "stats": {"total": 116, "additions": 116, "deletions": 0}, "files": [{"sha": "5dc84955add6bbfaf6b2a5401dc445a11ac4793e", "filename": "src/librustc_mir/transform/match_branches.rs", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/a6c2cb42d0b7ad5bafcd2a9b4784ff6f26763b07/src%2Flibrustc_mir%2Ftransform%2Fmatch_branches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6c2cb42d0b7ad5bafcd2a9b4784ff6f26763b07/src%2Flibrustc_mir%2Ftransform%2Fmatch_branches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmatch_branches.rs?ref=a6c2cb42d0b7ad5bafcd2a9b4784ff6f26763b07", "patch": "@@ -0,0 +1,102 @@\n+use crate::transform::{simplify, MirPass, MirSource};\n+use rustc_middle::mir::*;\n+use rustc_middle::ty::TyCtxt;\n+\n+pub struct MatchBranchSimplification;\n+\n+// What's the intent of this pass?\n+// If one block is found that switches between blocks which both go to the same place\n+// AND both of these blocks set a similar const in their ->\n+// condense into 1 block based on discriminant AND goto the destination afterwards\n+\n+impl<'tcx> MirPass<'tcx> for MatchBranchSimplification {\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, src: MirSource<'tcx>, body: &mut Body<'tcx>) {\n+        let param_env = tcx.param_env(src.def_id());\n+        let mut did_remove_blocks = false;\n+        let bbs = body.basic_blocks_mut();\n+        'outer: for bb_idx in bbs.indices() {\n+            let (discr, val, switch_ty, targets) = match bbs[bb_idx].terminator().kind {\n+                TerminatorKind::SwitchInt {\n+                    discr: Operand::Move(ref place),\n+                    switch_ty,\n+                    ref targets,\n+                    ref values,\n+                    ..\n+                } if targets.len() == 2 && values.len() == 1 => {\n+                    (place.clone(), values[0], switch_ty, targets)\n+                }\n+                _ => continue,\n+            };\n+            let (first, rest) = if let ([first], rest) = targets.split_at(1) {\n+                (*first, rest)\n+            } else {\n+                unreachable!();\n+            };\n+            let first_dest = bbs[first].terminator().kind.clone();\n+            let same_destinations = rest\n+                .iter()\n+                .map(|target| &bbs[*target].terminator().kind)\n+                .all(|t_kind| t_kind == &first_dest);\n+            if !same_destinations {\n+                continue;\n+            }\n+            let first_stmts = &bbs[first].statements;\n+            for s in first_stmts.iter() {\n+                match &s.kind {\n+                    StatementKind::Assign(box (_, rhs)) => {\n+                        if let Rvalue::Use(Operand::Constant(_)) = rhs {\n+                        } else {\n+                            continue 'outer;\n+                        }\n+                    }\n+                    _ => continue 'outer,\n+                }\n+            }\n+            for target in rest.iter() {\n+                for s in bbs[*target].statements.iter() {\n+                    if let StatementKind::Assign(box (ref lhs, rhs)) = &s.kind {\n+                        if let Rvalue::Use(Operand::Constant(_)) = rhs {\n+                            let has_matching_assn = first_stmts\n+                                .iter()\n+                                .find(|s| {\n+                                    if let StatementKind::Assign(box (lhs_f, _)) = &s.kind {\n+                                        lhs_f == lhs\n+                                    } else {\n+                                        false\n+                                    }\n+                                })\n+                                .is_some();\n+                            if has_matching_assn {\n+                                continue;\n+                            }\n+                        }\n+                    }\n+\n+                    continue 'outer;\n+                }\n+            }\n+            let (first_block, to_add) = bbs.pick2_mut(first, bb_idx);\n+            let new_stmts = first_block.statements.iter().cloned().map(|mut s| {\n+                if let StatementKind::Assign(box (_, ref mut rhs)) = s.kind {\n+                    let size = tcx.layout_of(param_env.and(switch_ty)).unwrap().size;\n+                    let const_cmp = Operand::const_from_scalar(\n+                        tcx,\n+                        switch_ty,\n+                        crate::interpret::Scalar::from_uint(val, size),\n+                        rustc_span::DUMMY_SP,\n+                    );\n+                    *rhs = Rvalue::BinaryOp(BinOp::Eq, Operand::Move(discr), const_cmp);\n+                } else {\n+                    unreachable!()\n+                }\n+                s\n+            });\n+            to_add.statements.extend(new_stmts);\n+            to_add.terminator_mut().kind = first_dest;\n+            did_remove_blocks = true;\n+        }\n+        if did_remove_blocks {\n+            simplify::remove_dead_blocks(body);\n+        }\n+    }\n+}"}, {"sha": "78deb96f5a9f187501aca27dd3157922faf7a460", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a6c2cb42d0b7ad5bafcd2a9b4784ff6f26763b07/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6c2cb42d0b7ad5bafcd2a9b4784ff6f26763b07/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=a6c2cb42d0b7ad5bafcd2a9b4784ff6f26763b07", "patch": "@@ -29,6 +29,7 @@ pub mod generator;\n pub mod inline;\n pub mod instcombine;\n pub mod instrument_coverage;\n+pub mod match_branches;\n pub mod no_landing_pads;\n pub mod nrvo;\n pub mod promote_consts;"}, {"sha": "6ccdaaf7bc387eff08db576cc0f71b229cab0b04", "filename": "src/test/mir-opt/matches_reduce_branches.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a6c2cb42d0b7ad5bafcd2a9b4784ff6f26763b07/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6c2cb42d0b7ad5bafcd2a9b4784ff6f26763b07/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.rs?ref=a6c2cb42d0b7ad5bafcd2a9b4784ff6f26763b07", "patch": "@@ -0,0 +1,13 @@\n+// compile-flags: --emit mir\n+// EMIT_MIR matches_reduce_branches.foo.fix_match_arms.diff\n+\n+fn foo(bar: Option<()>) {\n+    if matches!(bar, None) {\n+      ()\n+    }\n+}\n+\n+fn main() {\n+  let _ = foo(None);\n+  let _ = foo(Some(()));\n+}"}]}