{"sha": "c6667c06c34a25a8a21a1805b4f454f2d05d337c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2NjY3YzA2YzM0YTI1YThhMjFhMTgwNWI0ZjQ1NGYyZDA1ZDMzN2M=", "commit": {"author": {"name": "Jeff Olson", "email": "olson.jeffery@gmail.com", "date": "2012-04-12T05:14:16Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-04-20T22:23:21Z"}, "message": "add needed fields for global libuv loop + bindings to manage from rust\n\nadding two pointers fields to rust_kernel :(\n.. have to do manual malloc/free for one of the fields, which feels wrong", "tree": {"sha": "e1b02f73b1c11f1ac5c4c39f769d793b32304107", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e1b02f73b1c11f1ac5c4c39f769d793b32304107"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6667c06c34a25a8a21a1805b4f454f2d05d337c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6667c06c34a25a8a21a1805b4f454f2d05d337c", "html_url": "https://github.com/rust-lang/rust/commit/c6667c06c34a25a8a21a1805b4f454f2d05d337c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6667c06c34a25a8a21a1805b4f454f2d05d337c/comments", "author": {"login": "olsonjeffery", "id": 10408, "node_id": "MDQ6VXNlcjEwNDA4", "avatar_url": "https://avatars.githubusercontent.com/u/10408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/olsonjeffery", "html_url": "https://github.com/olsonjeffery", "followers_url": "https://api.github.com/users/olsonjeffery/followers", "following_url": "https://api.github.com/users/olsonjeffery/following{/other_user}", "gists_url": "https://api.github.com/users/olsonjeffery/gists{/gist_id}", "starred_url": "https://api.github.com/users/olsonjeffery/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/olsonjeffery/subscriptions", "organizations_url": "https://api.github.com/users/olsonjeffery/orgs", "repos_url": "https://api.github.com/users/olsonjeffery/repos", "events_url": "https://api.github.com/users/olsonjeffery/events{/privacy}", "received_events_url": "https://api.github.com/users/olsonjeffery/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf99a3aa932d32a1390ca58df403c68defc51a07", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf99a3aa932d32a1390ca58df403c68defc51a07", "html_url": "https://github.com/rust-lang/rust/commit/bf99a3aa932d32a1390ca58df403c68defc51a07"}], "stats": {"total": 41, "additions": 41, "deletions": 0}, "files": [{"sha": "2a4315bd8428c1918488c4d497b42aece240a114", "filename": "src/rt/rust_kernel.cpp", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c6667c06c34a25a8a21a1805b4f454f2d05d337c/src%2Frt%2Frust_kernel.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/c6667c06c34a25a8a21a1805b4f454f2d05d337c/src%2Frt%2Frust_kernel.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_kernel.cpp?ref=c6667c06c34a25a8a21a1805b4f454f2d05d337c", "patch": "@@ -24,6 +24,13 @@ rust_kernel::rust_kernel(rust_env *env) :\n     non_weak_tasks(0),\n     env(env)\n {\n+    // set up storage of pointers needed to\n+    // access the global loop.\n+    global_loop_chan = 0;\n+    global_async_handle = (void**)::malloc( // FIXME -- can use this->malloc()\n+        sizeof(void*));                   // .. what do?\n+    *global_async_handle = (void*)0;\n+\n     // Create the single threaded scheduler that will run on the platform's\n     // main thread\n     rust_manual_sched_launcher_factory launchfac;"}, {"sha": "a93ed118a35fd4042c1adf6f54341487c4e3e692", "filename": "src/rt/rust_kernel.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c6667c06c34a25a8a21a1805b4f454f2d05d337c/src%2Frt%2Frust_kernel.h", "raw_url": "https://github.com/rust-lang/rust/raw/c6667c06c34a25a8a21a1805b4f454f2d05d337c/src%2Frt%2Frust_kernel.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_kernel.h?ref=c6667c06c34a25a8a21a1805b4f454f2d05d337c", "patch": "@@ -73,6 +73,10 @@ class rust_kernel {\n     rust_scheduler* get_scheduler_by_id_nolock(rust_sched_id id);\n     void end_weak_tasks();\n \n+\t// Used to communicate with the process-side, global libuv loop\n+\tuintptr_t global_loop_chan;\n+\tvoid** global_async_handle;\n+\n public:\n     struct rust_env *env;\n \n@@ -117,6 +121,11 @@ class rust_kernel {\n     void unweaken_task(rust_port_id chan);\n \n     bool send_to_port(rust_port_id chan, void *sptr);\n+\n+\tuintptr_t* get_global_loop() { return &global_loop_chan; }\n+\tvoid** get_global_async_handle() { return global_async_handle; }\n+\tvoid set_global_async_handle(void* handle) {\n+\t\t*global_async_handle = handle; }\n };\n \n template <typename T> struct kernel_owned {"}, {"sha": "17b1db4fccf5346d07097928cce66a706b077307", "filename": "src/rt/rust_uv.cpp", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c6667c06c34a25a8a21a1805b4f454f2d05d337c/src%2Frt%2Frust_uv.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/c6667c06c34a25a8a21a1805b4f454f2d05d337c/src%2Frt%2Frust_uv.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_uv.cpp?ref=c6667c06c34a25a8a21a1805b4f454f2d05d337c", "patch": "@@ -425,3 +425,24 @@ rust_uv_ip4_addr(const char* ip, int port) {\n     LOG(task, stdlib, \"after creating .. port: %d\\n\", addr.sin_port);\n     return addr;\n }\n+\n+extern \"C\" uintptr_t*\n+rust_uv_get_kernel_global_chan_ptr() {\n+\tuintptr_t* result = rust_get_current_task()->kernel->get_global_loop();\n+\tprintf(\"global loop: %lu\\n\", (unsigned long int)result);\n+\tprintf(\"global loop val: %lu\\n\", (unsigned long int)*result);\n+\treturn result;\n+}\n+\n+extern \"C\" void**\n+rust_uv_get_kernel_global_async_handle() {\n+\treturn rust_get_current_task()->kernel->get_global_async_handle();\n+}\n+extern \"C\" void\n+rust_uv_set_kernel_global_async_handle(uv_async_t* handle) {\n+\trust_get_current_task()->kernel->set_global_async_handle((void*)handle);\n+}\n+extern \"C\" void\n+rust_uv_free_kernel_global_async_handle() {\n+\tfree((void*)rust_get_current_task()->kernel->get_global_async_handle());\n+}"}, {"sha": "323b0fdc0f7ab3c8da9b9785bf25221c47d79e00", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c6667c06c34a25a8a21a1805b4f454f2d05d337c/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/c6667c06c34a25a8a21a1805b4f454f2d05d337c/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=c6667c06c34a25a8a21a1805b4f454f2d05d337c", "patch": "@@ -134,6 +134,10 @@ rust_uv_get_data_for_req\n rust_uv_set_data_for_req\n rust_uv_get_base_from_buf\n rust_uv_get_len_from_buf\n+rust_uv_get_kernel_global_chan_ptr\n+rust_uv_get_kernel_global_async_handle\n+rust_uv_set_kernel_global_async_handle\n+rust_uv_free_kernel_global_async_handle\n rust_dbg_lock_create\n rust_dbg_lock_destroy\n rust_dbg_lock_lock"}]}