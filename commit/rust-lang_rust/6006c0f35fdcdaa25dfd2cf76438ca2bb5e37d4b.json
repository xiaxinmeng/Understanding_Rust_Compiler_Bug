{"sha": "6006c0f35fdcdaa25dfd2cf76438ca2bb5e37d4b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwMDZjMGYzNWZkY2RhYTI1ZGZkMmNmNzY0MzhjYTJiYjVlMzdkNGI=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2017-11-29T10:37:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-11-29T10:37:45Z"}, "message": "Rollup merge of #46219 - rust-lang:frewsxcv-issue-45636, r=GuillaumeGomez\n\nImprove documentation for slice swap/copy/clone operations.\n\nFixes #45636.\n\n- Demonstrate how to use these operations with slices of differing\n  lengths\n- Demonstrate how to swap/copy/clone sub-slices of a slice using\n  `split_at_mut`", "tree": {"sha": "1bd04211d90c025974500ceb6b67568034cc1af9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1bd04211d90c025974500ceb6b67568034cc1af9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6006c0f35fdcdaa25dfd2cf76438ca2bb5e37d4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6006c0f35fdcdaa25dfd2cf76438ca2bb5e37d4b", "html_url": "https://github.com/rust-lang/rust/commit/6006c0f35fdcdaa25dfd2cf76438ca2bb5e37d4b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6006c0f35fdcdaa25dfd2cf76438ca2bb5e37d4b/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "963ab91dd40a57c061229f006dcf8ce271d89664", "url": "https://api.github.com/repos/rust-lang/rust/commits/963ab91dd40a57c061229f006dcf8ce271d89664", "html_url": "https://github.com/rust-lang/rust/commit/963ab91dd40a57c061229f006dcf8ce271d89664"}, {"sha": "1ad38f2ce5b1075b64e586a6f383c431053126a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ad38f2ce5b1075b64e586a6f383c431053126a6", "html_url": "https://github.com/rust-lang/rust/commit/1ad38f2ce5b1075b64e586a6f383c431053126a6"}], "stats": {"total": 119, "additions": 106, "deletions": 13}, "files": [{"sha": "0eee7fb722eabf7968cf5546ba798c2ddf7b0ea8", "filename": "src/liballoc/slice.rs", "status": "modified", "additions": 106, "deletions": 13, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/6006c0f35fdcdaa25dfd2cf76438ca2bb5e37d4b/src%2Fliballoc%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6006c0f35fdcdaa25dfd2cf76438ca2bb5e37d4b/src%2Fliballoc%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fslice.rs?ref=6006c0f35fdcdaa25dfd2cf76438ca2bb5e37d4b", "patch": "@@ -1428,15 +1428,45 @@ impl<T> [T] {\n     ///\n     /// # Examples\n     ///\n+    /// Cloning two elements from a slice into another:\n+    ///\n+    /// ```\n+    /// let src = [1, 2, 3, 4];\n+    /// let mut dst = [0, 0];\n+    ///\n+    /// dst.clone_from_slice(&src[2..]);\n+    ///\n+    /// assert_eq!(src, [1, 2, 3, 4]);\n+    /// assert_eq!(dst, [3, 4]);\n+    /// ```\n+    ///\n+    /// Rust enforces that there can only be one mutable reference with no\n+    /// immutable references to a particular piece of data in a particular\n+    /// scope. Because of this, attempting to use `clone_from_slice` on a\n+    /// single slice will result in a compile failure:\n+    ///\n+    /// ```compile_fail\n+    /// let mut slice = [1, 2, 3, 4, 5];\n+    ///\n+    /// slice[..2].clone_from_slice(&slice[3..]); // compile fail!\n     /// ```\n-    /// let mut dst = [0, 0, 0];\n-    /// let src = [1, 2, 3];\n     ///\n-    /// dst.clone_from_slice(&src);\n-    /// assert!(dst == [1, 2, 3]);\n+    /// To work around this, we can use [`split_at_mut`] to create two distinct\n+    /// sub-slices from a slice:\n+    ///\n+    /// ```\n+    /// let mut slice = [1, 2, 3, 4, 5];\n+    ///\n+    /// {\n+    ///     let (left, right) = slice.split_at_mut(2);\n+    ///     left.clone_from_slice(&right[1..]);\n+    /// }\n+    ///\n+    /// assert_eq!(slice, [4, 5, 3, 4, 5]);\n     /// ```\n     ///\n     /// [`copy_from_slice`]: #method.copy_from_slice\n+    /// [`split_at_mut`]: #method.split_at_mut\n     #[stable(feature = \"clone_from_slice\", since = \"1.7.0\")]\n     pub fn clone_from_slice(&mut self, src: &[T]) where T: Clone {\n         core_slice::SliceExt::clone_from_slice(self, src)\n@@ -1454,15 +1484,45 @@ impl<T> [T] {\n     ///\n     /// # Examples\n     ///\n+    /// Copying two elements from a slice into another:\n+    ///\n+    /// ```\n+    /// let src = [1, 2, 3, 4];\n+    /// let mut dst = [0, 0];\n+    ///\n+    /// dst.copy_from_slice(&src[2..]);\n+    ///\n+    /// assert_eq!(src, [1, 2, 3, 4]);\n+    /// assert_eq!(dst, [3, 4]);\n+    /// ```\n+    ///\n+    /// Rust enforces that there can only be one mutable reference with no\n+    /// immutable references to a particular piece of data in a particular\n+    /// scope. Because of this, attempting to use `copy_from_slice` on a\n+    /// single slice will result in a compile failure:\n+    ///\n+    /// ```compile_fail\n+    /// let mut slice = [1, 2, 3, 4, 5];\n+    ///\n+    /// slice[..2].copy_from_slice(&slice[3..]); // compile fail!\n+    /// ```\n+    ///\n+    /// To work around this, we can use [`split_at_mut`] to create two distinct\n+    /// sub-slices from a slice:\n+    ///\n     /// ```\n-    /// let mut dst = [0, 0, 0];\n-    /// let src = [1, 2, 3];\n+    /// let mut slice = [1, 2, 3, 4, 5];\n+    ///\n+    /// {\n+    ///     let (left, right) = slice.split_at_mut(2);\n+    ///     left.copy_from_slice(&right[1..]);\n+    /// }\n     ///\n-    /// dst.copy_from_slice(&src);\n-    /// assert_eq!(src, dst);\n+    /// assert_eq!(slice, [4, 5, 3, 4, 5]);\n     /// ```\n     ///\n     /// [`clone_from_slice`]: #method.clone_from_slice\n+    /// [`split_at_mut`]: #method.split_at_mut\n     #[stable(feature = \"copy_from_slice\", since = \"1.9.0\")]\n     pub fn copy_from_slice(&mut self, src: &[T]) where T: Copy {\n         core_slice::SliceExt::copy_from_slice(self, src)\n@@ -1478,16 +1538,49 @@ impl<T> [T] {\n     ///\n     /// # Example\n     ///\n+    /// Swapping two elements across slices:\n+    ///\n     /// ```\n     /// #![feature(swap_with_slice)]\n     ///\n-    /// let mut slice1 = [1, 2, 3];\n-    /// let mut slice2 = [7, 8, 9];\n+    /// let mut slice1 = [0, 0];\n+    /// let mut slice2 = [1, 2, 3, 4];\n+    ///\n+    /// slice1.swap_with_slice(&mut slice2[2..]);\n+    ///\n+    /// assert_eq!(slice1, [3, 4]);\n+    /// assert_eq!(slice2, [1, 2, 0, 0]);\n+    /// ```\n+    ///\n+    /// Rust enforces that there can only be one mutable reference to a\n+    /// particular piece of data in a particular scope. Because of this,\n+    /// attempting to use `swap_with_slice` on a single slice will result in\n+    /// a compile failure:\n+    ///\n+    /// ```compile_fail\n+    /// #![feature(swap_with_slice)]\n     ///\n-    /// slice1.swap_with_slice(&mut slice2);\n-    /// assert_eq!(slice1, [7, 8, 9]);\n-    /// assert_eq!(slice2, [1, 2, 3]);\n+    /// let mut slice = [1, 2, 3, 4, 5];\n+    /// slice[..2].swap_with_slice(&mut slice[3..]); // compile fail!\n     /// ```\n+    ///\n+    /// To work around this, we can use [`split_at_mut`] to create two distinct\n+    /// mutable sub-slices from a slice:\n+    ///\n+    /// ```\n+    /// #![feature(swap_with_slice)]\n+    ///\n+    /// let mut slice = [1, 2, 3, 4, 5];\n+    ///\n+    /// {\n+    ///     let (left, right) = slice.split_at_mut(2);\n+    ///     left.swap_with_slice(&mut right[1..]);\n+    /// }\n+    ///\n+    /// assert_eq!(slice, [4, 5, 3, 1, 2]);\n+    /// ```\n+    ///\n+    /// [`split_at_mut`]: #method.split_at_mut\n     #[unstable(feature = \"swap_with_slice\", issue = \"44030\")]\n     pub fn swap_with_slice(&mut self, other: &mut [T]) {\n         core_slice::SliceExt::swap_with_slice(self, other)"}]}