{"sha": "19d1ec1dec74b549761b5561e7b722a11fb66ecd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5ZDFlYzFkZWM3NGI1NDk3NjFiNTU2MWU3YjcyMmExMWZiNjZlY2Q=", "commit": {"author": {"name": "Scyptnex", "email": "scyptnex@tzeidn.com", "date": "2015-09-24T00:22:06Z"}, "committer": {"name": "Scyptnex", "email": "scyptnex@tzeidn.com", "date": "2015-09-24T00:22:06Z"}, "message": "Fixes #339 and #272", "tree": {"sha": "2786a57722ba570f537e42479151f49999834435", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2786a57722ba570f537e42479151f49999834435"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19d1ec1dec74b549761b5561e7b722a11fb66ecd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19d1ec1dec74b549761b5561e7b722a11fb66ecd", "html_url": "https://github.com/rust-lang/rust/commit/19d1ec1dec74b549761b5561e7b722a11fb66ecd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19d1ec1dec74b549761b5561e7b722a11fb66ecd/comments", "author": null, "committer": null, "parents": [{"sha": "c14cfca0e3de3dfa5fd91d39a85c5b452e7756e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/c14cfca0e3de3dfa5fd91d39a85c5b452e7756e3", "html_url": "https://github.com/rust-lang/rust/commit/c14cfca0e3de3dfa5fd91d39a85c5b452e7756e3"}], "stats": {"total": 231, "additions": 181, "deletions": 50}, "files": [{"sha": "c633f59f21bb9c3257203486809fbb7ae0b38b0e", "filename": "src/expr.rs", "status": "modified", "additions": 72, "deletions": 44, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/19d1ec1dec74b549761b5561e7b722a11fb66ecd/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19d1ec1dec74b549761b5561e7b722a11fb66ecd/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=19d1ec1dec74b549761b5561e7b722a11fb66ecd", "patch": "@@ -320,6 +320,17 @@ fn rewrite_closure(capture: ast::CaptureClause,\n     Some(format!(\"{} {}\", prefix, try_opt!(body_rewrite)))\n }\n \n+fn nop_block_collapse(block_str: Option<String>) -> Option<String> {\n+    block_str.map(|block_str| {\n+        if block_str.starts_with(\"{\") &&\n+           (block_str[1..].find(|c: char| !c.is_whitespace()).unwrap() == block_str.len() - 2) {\n+            \"{}\".to_owned()\n+        } else {\n+            block_str.to_owned()\n+        }\n+    })\n+}\n+\n impl Rewrite for ast::Block {\n     fn rewrite(&self, context: &RewriteContext, width: usize, offset: Indent) -> Option<String> {\n         let user_str = context.snippet(self.span);\n@@ -620,6 +631,51 @@ fn is_simple_block(block: &ast::Block, codemap: &CodeMap) -> bool {\n     !contains_comment(&snippet)\n }\n \n+// inter-match-arm-comment-rules:\n+//  - all comments following a match arm before the start of the next arm\n+//    are about the second arm\n+fn rewrite_match_arm_comment(context: &RewriteContext,\n+                             missed_str: &str,\n+                             width: usize,\n+                             arm_indent: Indent,\n+                             arm_indent_str: &str)\n+                             -> String {\n+    // The leading \",\" is not part of the arm-comment\n+    let missed_str = match missed_str.find_uncommented(\",\") {\n+        Some(n) => &missed_str[n+1..],\n+        None => &missed_str[..],\n+    };\n+    // Nor the trailing \"}\" which closes the match\n+    let missed_str = match missed_str.find_uncommented(\"}\") {\n+        Some(n) => &missed_str[..n-1],\n+        None => &missed_str[..],\n+    };\n+\n+    let mut result = String::new();\n+    // any text not preceeded by a newline is pushed unmodified to the block\n+    let first_brk = missed_str.find(|c: char| c == '\\n').unwrap_or(0);\n+    result.push_str(&missed_str[..first_brk]);\n+    let missed_str = &missed_str[first_brk..]; // If missed_str had one newline, it starts with it\n+\n+    let first = missed_str.find(|c: char| !c.is_whitespace()).unwrap_or(missed_str.len());\n+    if missed_str[..first].chars().filter(|c| c == &'\\n').count() >= 2 {\n+        // Excessive vertical whitespace before comment should be preserved\n+        // TODO handle vertical whitespace better\n+        result.push('\\n');\n+    }\n+    let missed_str = missed_str[first..].trim();\n+    if !missed_str.is_empty() {\n+        result.push('\\n');\n+        result.push_str(arm_indent_str);\n+        result.push_str(&rewrite_comment(&missed_str,\n+                                         false,\n+                                         width,\n+                                         arm_indent,\n+                                         context.config));\n+    }\n+    return result;\n+}\n+\n fn rewrite_match(context: &RewriteContext,\n                  cond: &ast::Expr,\n                  arms: &[ast::Arm],\n@@ -647,32 +703,15 @@ fn rewrite_match(context: &RewriteContext,\n     for (i, arm) in arms.iter().enumerate() {\n         // Make sure we get the stuff between arms.\n         let missed_str = if i == 0 {\n-            context.snippet(mk_sp(open_brace_pos + BytePos(1), arm_start_pos(arm)))\n+            context.snippet(mk_sp(open_brace_pos, arm_start_pos(arm)))\n         } else {\n             context.snippet(mk_sp(arm_end_pos(&arms[i-1]), arm_start_pos(arm)))\n         };\n-        let missed_str = match missed_str.find_uncommented(\",\") {\n-            Some(n) => &missed_str[n+1..],\n-            None => &missed_str[..],\n-        };\n-        // first = first non-whitespace byte index.\n-        let first = missed_str.find(|c: char| !c.is_whitespace()).unwrap_or(missed_str.len());\n-        if missed_str[..first].chars().filter(|c| c == &'\\n').count() >= 2 {\n-            // There were multiple line breaks which got trimmed to nothing\n-            // that means there should be some vertical white space. Lets\n-            // replace that with just one blank line.\n-            result.push('\\n');\n-        }\n-        let missed_str = missed_str.trim();\n-        if !missed_str.is_empty() {\n-            result.push('\\n');\n-            result.push_str(&arm_indent_str);\n-            result.push_str(&rewrite_comment(&missed_str,\n-                                             false,\n-                                             width,\n-                                             arm_indent,\n-                                             context.config));\n-        }\n+        result.push_str(&rewrite_match_arm_comment(context,\n+                                                   &missed_str,\n+                                                   width,\n+                                                   arm_indent,\n+                                                   &arm_indent_str));\n         result.push('\\n');\n         result.push_str(&arm_indent_str);\n \n@@ -688,26 +727,11 @@ fn rewrite_match(context: &RewriteContext,\n         }\n     }\n     let last_comment = context.snippet(mk_sp(arm_end_pos(&arms[arms.len() - 1]), span.hi));\n-    let last_comment = match last_comment.find_uncommented(\",\") {\n-        Some(n) => &last_comment[n+1..],\n-        None => &last_comment[..],\n-    };\n-    let last_comment = match last_comment.find_uncommented(\"}\") {\n-        Some(n) => &last_comment[..n-1],\n-        None => &last_comment[..],\n-    };\n-    let last_comment = last_comment.trim();\n-\n+    result.push_str(&rewrite_match_arm_comment(context,\n+                                               &last_comment,\n+                                               width, arm_indent,\n+                                               &arm_indent_str));\n     result.push('\\n');\n-    if last_comment.len() > 0 {\n-        result.push_str(&arm_indent_str);\n-        result.push_str(&rewrite_comment(&last_comment,\n-                                         false,\n-                                         width,\n-                                         arm_indent,\n-                                         context.config));\n-        result.push('\\n');\n-    }\n     result.push_str(&(context.block_indent + context.overflow_indent).to_string(context.config));\n     result.push('}');\n     Some(result)\n@@ -817,7 +841,9 @@ impl Rewrite for ast::Arm {\n         // 4 = ` => `.len()\n         if context.config.max_width > line_start + comma.len() + 4 {\n             let budget = context.config.max_width - line_start - comma.len() - 4;\n-            if let Some(ref body_str) = body.rewrite(context, budget, line_indent + 4) {\n+            if let Some(ref body_str) = nop_block_collapse(body.rewrite(context,\n+                                                                        budget,\n+                                                                        line_indent + 4)) {\n                 if first_line_width(body_str) <= budget {\n                     return Some(format!(\"{}{} => {}{}\",\n                                         attr_str.trim_left(),\n@@ -835,7 +861,9 @@ impl Rewrite for ast::Arm {\n         }\n \n         let body_budget = try_opt!(width.checked_sub(context.config.tab_spaces));\n-        let body_str = try_opt!(body.rewrite(context, body_budget, context.block_indent));\n+        let body_str = try_opt!(nop_block_collapse(body.rewrite(context,\n+                                                                body_budget,\n+                                                                context.block_indent)));\n         Some(format!(\"{}{} =>\\n{}{},\",\n                      attr_str.trim_left(),\n                      pats_str,"}, {"sha": "565ab7213cfc0b02731682a50bdb93e665782e33", "filename": "tests/source/expr.rs", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/19d1ec1dec74b549761b5561e7b722a11fb66ecd/tests%2Fsource%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19d1ec1dec74b549761b5561e7b722a11fb66ecd/tests%2Fsource%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fexpr.rs?ref=19d1ec1dec74b549761b5561e7b722a11fb66ecd", "patch": "@@ -140,6 +140,64 @@ fn matches() {\n     }\n }\n \n+fn issue339() {\n+    match a {\n+        b => {}\n+        c => { }\n+        d => {\n+        }\n+        e => {\n+\n+\n+\n+        }\n+        // collapsing here is safe\n+        ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff => {\n+        }\n+        // collapsing here exceeds line length\n+        ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffg => {\n+        }\n+        h => { // comment above block\n+        }\n+        i => {\n+        } // comment below block\n+        j => {\n+            // comment inside block\n+        }\n+        j2 => {\n+            // comments inside...\n+        } // ... and after\n+        // TODO uncomment when vertical whitespace is handled better\n+        // k => {\n+        //\n+        //     // comment with WS above\n+        // }\n+        // l => {\n+        //     // comment with ws below\n+        //     \n+        // }\n+        m => {\n+        } n => { } o =>\n+        {\n+\n+        }\n+        p => { // Dont collapse me\n+        } q => { } r =>\n+        {\n+\n+        }\n+        s => 0, // s comment\n+        // t comment\n+        t => 1,\n+        u => 2,\n+        // TODO uncomment when block-support exists\n+        // v => {\n+        // } /* funky block\n+        //    * comment */\n+        // final comment\n+    }\n+}\n+\n fn arrays() {\n     let x = [0,\n          1,"}, {"sha": "f6d543ab1d9549da936bed4ef5021fc30b001366", "filename": "tests/target/expr.rs", "status": "modified", "additions": 50, "deletions": 4, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/19d1ec1dec74b549761b5561e7b722a11fb66ecd/tests%2Ftarget%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19d1ec1dec74b549761b5561e7b722a11fb66ecd/tests%2Ftarget%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fexpr.rs?ref=19d1ec1dec74b549761b5561e7b722a11fb66ecd", "patch": "@@ -169,13 +169,59 @@ fn issue184(source: &str) {\n \n fn matches() {\n     match 1 {\n-        1 => 1,\n-        // foo\n+        1 => 1, // foo\n         2 => 2,\n         // bar\n         3 => 3,\n-        _ => 0,\n-        // baz\n+        _ => 0, // baz\n+    }\n+}\n+\n+fn issue339() {\n+    match a {\n+        b => {}\n+        c => {}\n+        d => {}\n+        e => {}\n+        // collapsing here is safe\n+        ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff => {}\n+        // collapsing here exceeds line length\n+        ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffg => {\n+        }\n+        h => { // comment above block\n+        }\n+        i => {} // comment below block\n+        j => {\n+            // comment inside block\n+        }\n+        j2 => {\n+            // comments inside...\n+        } // ... and after\n+        // TODO uncomment when vertical whitespace is handled better\n+        // k => {\n+        //\n+        //     // comment with WS above\n+        // }\n+        // l => {\n+        //     // comment with ws below\n+        //\n+        // }\n+        m => {}\n+        n => {}\n+        o => {}\n+        p => { // Dont collapse me\n+        }\n+        q => {}\n+        r => {}\n+        s => 0, // s comment\n+        // t comment\n+        t => 1,\n+        u => 2,\n+        // TODO uncomment when block-support exists\n+        // v => {\n+        // } /* funky block\n+        //    * comment */\n+        // final comment\n     }\n }\n "}, {"sha": "36d91b785f4d03777fd44dd676fe6b1da759769a", "filename": "tests/target/match.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/19d1ec1dec74b549761b5561e7b722a11fb66ecd/tests%2Ftarget%2Fmatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19d1ec1dec74b549761b5561e7b722a11fb66ecd/tests%2Ftarget%2Fmatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmatch.rs?ref=19d1ec1dec74b549761b5561e7b722a11fb66ecd", "patch": "@@ -38,8 +38,7 @@ fn foo() {\n         _ => {}\n         ast::PathParameters::AngleBracketedParameters(ref data) if data.lifetimes.len() > 0 ||\n                                                                    data.types.len() > 0 ||\n-                                                                   data.bindings.len() > 0 => {\n-        }\n+                                                                   data.bindings.len() > 0 => {}\n     }\n \n     let whatever = match something {"}]}