{"sha": "75a15bf2757d372d7511bed70e1ad2c5814a1012", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1YTE1YmYyNzU3ZDM3MmQ3NTExYmVkNzBlMWFkMmM1ODE0YTEwMTI=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-03-15T15:22:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-15T15:22:52Z"}, "message": "Rollup merge of #83098 - camelid:more-doc-attr-check, r=davidtwco\n\nFind more invalid doc attributes\n\n- Lint on `#[doc(123)]`, `#[doc(\"hello\")]`, etc.\n- Lint every attribute; e.g., will now report two warnings for `#[doc(foo, bar)]`\n- Add hyphen to \"crate level\"\n- Display paths like `#[doc(foo::bar)]` correctly instead of as an empty string", "tree": {"sha": "20cc799c22168d37739d1d5ebe3d5a5caa2b4f1d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/20cc799c22168d37739d1d5ebe3d5a5caa2b4f1d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/75a15bf2757d372d7511bed70e1ad2c5814a1012", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgT3vNCRBK7hj4Ov3rIwAAdHIIAAJt3mKSiVazCkR+oPOiby2h\niILdEfabkEedZG/1chlTdCzSXIHqU44Wd70W+qAk+X+1RlRp2wxcZNzk4aO20vZ7\nJaVoQ4vOvr9c9PVB8hwm768BMvSxztG1yAQK0tGQM5/lFdMP1VTdq2yk6P98TupG\n0tJ5N+kMp2lCncNMp0JwnzgTkFv3FLPF4NBHQtouBquDmAUVjZaayEJ7Ixy3tqqD\n5zLGNi2BIcTjknnfd44RZoqXgI4BYsu5BNbNaqtNPSD9ForW8qzD1PufLmM+zyqK\ndnO3UFmPC72VwWHC/KU1smp02MpFAlsLGQ3GnR+qKwldeR1mYpSBHJzteTsVT0E=\n=52YO\n-----END PGP SIGNATURE-----\n", "payload": "tree 20cc799c22168d37739d1d5ebe3d5a5caa2b4f1d\nparent b8622f2b3bad72a3f4fd5fb6de88b55e04017c55\nparent 8f40e1180f65bdf7e88baa4bcc03d24baded9fca\nauthor Dylan DPC <dylan.dpc@gmail.com> 1615821772 +0100\ncommitter GitHub <noreply@github.com> 1615821772 +0100\n\nRollup merge of #83098 - camelid:more-doc-attr-check, r=davidtwco\n\nFind more invalid doc attributes\n\n- Lint on `#[doc(123)]`, `#[doc(\"hello\")]`, etc.\n- Lint every attribute; e.g., will now report two warnings for `#[doc(foo, bar)]`\n- Add hyphen to \"crate level\"\n- Display paths like `#[doc(foo::bar)]` correctly instead of as an empty string\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/75a15bf2757d372d7511bed70e1ad2c5814a1012", "html_url": "https://github.com/rust-lang/rust/commit/75a15bf2757d372d7511bed70e1ad2c5814a1012", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/75a15bf2757d372d7511bed70e1ad2c5814a1012/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8622f2b3bad72a3f4fd5fb6de88b55e04017c55", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8622f2b3bad72a3f4fd5fb6de88b55e04017c55", "html_url": "https://github.com/rust-lang/rust/commit/b8622f2b3bad72a3f4fd5fb6de88b55e04017c55"}, {"sha": "8f40e1180f65bdf7e88baa4bcc03d24baded9fca", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f40e1180f65bdf7e88baa4bcc03d24baded9fca", "html_url": "https://github.com/rust-lang/rust/commit/8f40e1180f65bdf7e88baa4bcc03d24baded9fca"}], "stats": {"total": 250, "additions": 195, "deletions": 55}, "files": [{"sha": "203d8acb5b470514e141a80c7022278bfeaeba7a", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/75a15bf2757d372d7511bed70e1ad2c5814a1012/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/75a15bf2757d372d7511bed70e1ad2c5814a1012/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=75a15bf2757d372d7511bed70e1ad2c5814a1012", "patch": "@@ -4247,6 +4247,7 @@ name = \"rustc_passes\"\n version = \"0.0.0\"\n dependencies = [\n  \"rustc_ast\",\n+ \"rustc_ast_pretty\",\n  \"rustc_attr\",\n  \"rustc_data_structures\",\n  \"rustc_errors\","}, {"sha": "4069fb2127e026a7e2c93b63efe05d5bed82018e", "filename": "compiler/rustc_passes/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/75a15bf2757d372d7511bed70e1ad2c5814a1012/compiler%2Frustc_passes%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/75a15bf2757d372d7511bed70e1ad2c5814a1012/compiler%2Frustc_passes%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2FCargo.toml?ref=75a15bf2757d372d7511bed70e1ad2c5814a1012", "patch": "@@ -19,3 +19,4 @@ rustc_serialize = { path = \"../rustc_serialize\" }\n rustc_span = { path = \"../rustc_span\" }\n rustc_trait_selection = { path = \"../rustc_trait_selection\" }\n rustc_lexer = { path = \"../rustc_lexer\" }\n+rustc_ast_pretty = { path = \"../rustc_ast_pretty\" }"}, {"sha": "9c606f3e4d45957e3f7c3e8236e3b81991193b02", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 64, "deletions": 46, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/75a15bf2757d372d7511bed70e1ad2c5814a1012/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75a15bf2757d372d7511bed70e1ad2c5814a1012/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=75a15bf2757d372d7511bed70e1ad2c5814a1012", "patch": "@@ -524,7 +524,7 @@ impl CheckAttrVisitor<'tcx> {\n                 .struct_span_err(\n                     meta.span(),\n                     &format!(\n-                        \"`#![doc({} = \\\"...\\\")]` isn't allowed as a crate level attribute\",\n+                        \"`#![doc({} = \\\"...\\\")]` isn't allowed as a crate-level attribute\",\n                         attr_name,\n                     ),\n                 )\n@@ -535,79 +535,97 @@ impl CheckAttrVisitor<'tcx> {\n     }\n \n     fn check_doc_attrs(&self, attr: &Attribute, hir_id: HirId, target: Target) -> bool {\n-        if let Some(mi) = attr.meta() {\n-            if let Some(list) = mi.meta_item_list() {\n-                for meta in list {\n-                    if meta.has_name(sym::alias) {\n-                        if !self.check_attr_crate_level(meta, hir_id, \"alias\")\n-                            || !self.check_doc_alias(meta, hir_id, target)\n+        let mut is_valid = true;\n+\n+        if let Some(list) = attr.meta().and_then(|mi| mi.meta_item_list().map(|l| l.to_vec())) {\n+            for meta in list {\n+                if let Some(i_meta) = meta.meta_item() {\n+                    match i_meta.name_or_empty() {\n+                        sym::alias\n+                            if !self.check_attr_crate_level(&meta, hir_id, \"alias\")\n+                                || !self.check_doc_alias(&meta, hir_id, target) =>\n                         {\n-                            return false;\n+                            is_valid = false\n                         }\n-                    } else if meta.has_name(sym::keyword) {\n-                        if !self.check_attr_crate_level(meta, hir_id, \"keyword\")\n-                            || !self.check_doc_keyword(meta, hir_id)\n+\n+                        sym::keyword\n+                            if !self.check_attr_crate_level(&meta, hir_id, \"keyword\")\n+                                || !self.check_doc_keyword(&meta, hir_id) =>\n                         {\n-                            return false;\n+                            is_valid = false\n                         }\n-                    } else if meta.has_name(sym::test) {\n-                        if CRATE_HIR_ID != hir_id {\n+\n+                        sym::test if CRATE_HIR_ID != hir_id => {\n                             self.tcx.struct_span_lint_hir(\n                                 INVALID_DOC_ATTRIBUTES,\n                                 hir_id,\n                                 meta.span(),\n                                 |lint| {\n                                     lint.build(\n-                                        \"`#![doc(test(...)]` is only allowed as a crate level attribute\"\n+                                        \"`#![doc(test(...)]` is only allowed \\\n+                                         as a crate-level attribute\",\n                                     )\n                                     .emit();\n                                 },\n                             );\n-                            return false;\n+                            is_valid = false;\n                         }\n-                    } else if let Some(i_meta) = meta.meta_item() {\n-                        if ![\n-                            sym::cfg,\n-                            sym::hidden,\n-                            sym::html_favicon_url,\n-                            sym::html_logo_url,\n-                            sym::html_no_source,\n-                            sym::html_playground_url,\n-                            sym::html_root_url,\n-                            sym::include,\n-                            sym::inline,\n-                            sym::issue_tracker_base_url,\n-                            sym::masked,\n-                            sym::no_default_passes, // deprecated\n-                            sym::no_inline,\n-                            sym::passes,  // deprecated\n-                            sym::plugins, // removed, but rustdoc warns about it itself\n-                            sym::primitive,\n-                            sym::spotlight,\n-                            sym::test,\n-                        ]\n-                        .iter()\n-                        .any(|m| i_meta.has_name(*m))\n-                        {\n+\n+                        // no_default_passes: deprecated\n+                        // passes: deprecated\n+                        // plugins: removed, but rustdoc warns about it itself\n+                        sym::alias\n+                        | sym::cfg\n+                        | sym::hidden\n+                        | sym::html_favicon_url\n+                        | sym::html_logo_url\n+                        | sym::html_no_source\n+                        | sym::html_playground_url\n+                        | sym::html_root_url\n+                        | sym::include\n+                        | sym::inline\n+                        | sym::issue_tracker_base_url\n+                        | sym::keyword\n+                        | sym::masked\n+                        | sym::no_default_passes\n+                        | sym::no_inline\n+                        | sym::passes\n+                        | sym::plugins\n+                        | sym::primitive\n+                        | sym::spotlight\n+                        | sym::test => {}\n+\n+                        _ => {\n                             self.tcx.struct_span_lint_hir(\n                                 INVALID_DOC_ATTRIBUTES,\n                                 hir_id,\n                                 i_meta.span,\n                                 |lint| {\n-                                    lint.build(&format!(\n+                                    let msg = format!(\n                                         \"unknown `doc` attribute `{}`\",\n-                                        i_meta.name_or_empty()\n-                                    ))\n-                                    .emit();\n+                                        rustc_ast_pretty::pprust::path_to_string(&i_meta.path),\n+                                    );\n+                                    lint.build(&msg).emit();\n                                 },\n                             );\n-                            return false;\n+                            is_valid = false;\n                         }\n                     }\n+                } else {\n+                    self.tcx.struct_span_lint_hir(\n+                        INVALID_DOC_ATTRIBUTES,\n+                        hir_id,\n+                        meta.span(),\n+                        |lint| {\n+                            lint.build(&format!(\"invalid `doc` attribute\")).emit();\n+                        },\n+                    );\n+                    is_valid = false;\n                 }\n             }\n         }\n-        true\n+\n+        is_valid\n     }\n \n     /// Checks if `#[cold]` is applied to a non-function. Returns `true` if valid."}, {"sha": "fc8095e03ca93d6b1dfba18cfe1ae134ef43adf6", "filename": "src/test/rustdoc-ui/doc-alias-crate-level.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75a15bf2757d372d7511bed70e1ad2c5814a1012/src%2Ftest%2Frustdoc-ui%2Fdoc-alias-crate-level.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/75a15bf2757d372d7511bed70e1ad2c5814a1012/src%2Ftest%2Frustdoc-ui%2Fdoc-alias-crate-level.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fdoc-alias-crate-level.stderr?ref=75a15bf2757d372d7511bed70e1ad2c5814a1012", "patch": "@@ -4,7 +4,7 @@ error: '\\'' character isn't allowed in `#[doc(alias = \"...\")]`\n LL | #[doc(alias = \"shouldn't work!\")]\n    |               ^^^^^^^^^^^^^^^^^\n \n-error: `#![doc(alias = \"...\")]` isn't allowed as a crate level attribute\n+error: `#![doc(alias = \"...\")]` isn't allowed as a crate-level attribute\n   --> $DIR/doc-alias-crate-level.rs:1:8\n    |\n LL | #![doc(alias = \"crate-level-not-working\")]"}, {"sha": "980d1c0e2077d272406075d834928dcf265e7ed3", "filename": "src/test/rustdoc-ui/doc-attr.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/75a15bf2757d372d7511bed70e1ad2c5814a1012/src%2Ftest%2Frustdoc-ui%2Fdoc-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75a15bf2757d372d7511bed70e1ad2c5814a1012/src%2Ftest%2Frustdoc-ui%2Fdoc-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fdoc-attr.rs?ref=75a15bf2757d372d7511bed70e1ad2c5814a1012", "patch": "@@ -8,3 +8,18 @@\n //~^ ERROR unknown `doc` attribute\n //~^^ WARN\n pub fn foo() {}\n+\n+#[doc(123)]\n+//~^ ERROR invalid `doc` attribute\n+//~| WARN\n+#[doc(\"hello\", \"bar\")]\n+//~^ ERROR invalid `doc` attribute\n+//~| WARN\n+//~| ERROR invalid `doc` attribute\n+//~| WARN\n+#[doc(foo::bar, crate::bar::baz = \"bye\")]\n+//~^ ERROR unknown `doc` attribute\n+//~| WARN\n+//~| ERROR unknown `doc` attribute\n+//~| WARN\n+fn bar() {}"}, {"sha": "cc2494c92e64951c25c674a21469c6974d53489d", "filename": "src/test/rustdoc-ui/doc-attr.stderr", "status": "modified", "additions": 46, "deletions": 1, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/75a15bf2757d372d7511bed70e1ad2c5814a1012/src%2Ftest%2Frustdoc-ui%2Fdoc-attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/75a15bf2757d372d7511bed70e1ad2c5814a1012/src%2Ftest%2Frustdoc-ui%2Fdoc-attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fdoc-attr.stderr?ref=75a15bf2757d372d7511bed70e1ad2c5814a1012", "patch": "@@ -13,6 +13,51 @@ LL | #![deny(warnings)]\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #82730 <https://github.com/rust-lang/rust/issues/82730>\n \n+error: invalid `doc` attribute\n+  --> $DIR/doc-attr.rs:12:7\n+   |\n+LL | #[doc(123)]\n+   |       ^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82730 <https://github.com/rust-lang/rust/issues/82730>\n+\n+error: invalid `doc` attribute\n+  --> $DIR/doc-attr.rs:15:7\n+   |\n+LL | #[doc(\"hello\", \"bar\")]\n+   |       ^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82730 <https://github.com/rust-lang/rust/issues/82730>\n+\n+error: invalid `doc` attribute\n+  --> $DIR/doc-attr.rs:15:16\n+   |\n+LL | #[doc(\"hello\", \"bar\")]\n+   |                ^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82730 <https://github.com/rust-lang/rust/issues/82730>\n+\n+error: unknown `doc` attribute `foo::bar`\n+  --> $DIR/doc-attr.rs:20:7\n+   |\n+LL | #[doc(foo::bar, crate::bar::baz = \"bye\")]\n+   |       ^^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82730 <https://github.com/rust-lang/rust/issues/82730>\n+\n+error: unknown `doc` attribute `crate::bar::baz`\n+  --> $DIR/doc-attr.rs:20:17\n+   |\n+LL | #[doc(foo::bar, crate::bar::baz = \"bye\")]\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82730 <https://github.com/rust-lang/rust/issues/82730>\n+\n error: unknown `doc` attribute `as_ptr`\n   --> $DIR/doc-attr.rs:3:8\n    |\n@@ -22,5 +67,5 @@ LL | #![doc(as_ptr)]\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #82730 <https://github.com/rust-lang/rust/issues/82730>\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 7 previous errors\n "}, {"sha": "643107318b9799f371828e3bf9441c8053b5cca1", "filename": "src/test/rustdoc-ui/doc-attr2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/75a15bf2757d372d7511bed70e1ad2c5814a1012/src%2Ftest%2Frustdoc-ui%2Fdoc-attr2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/75a15bf2757d372d7511bed70e1ad2c5814a1012/src%2Ftest%2Frustdoc-ui%2Fdoc-attr2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fdoc-attr2.stderr?ref=75a15bf2757d372d7511bed70e1ad2c5814a1012", "patch": "@@ -1,4 +1,4 @@\n-error: `#![doc(test(...)]` is only allowed as a crate level attribute\n+error: `#![doc(test(...)]` is only allowed as a crate-level attribute\n   --> $DIR/doc-attr2.rs:4:7\n    |\n LL | #[doc(test(no_crate_inject))]\n@@ -13,7 +13,7 @@ LL | #![deny(warnings)]\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #82730 <https://github.com/rust-lang/rust/issues/82730>\n \n-error: `#![doc(test(...)]` is only allowed as a crate level attribute\n+error: `#![doc(test(...)]` is only allowed as a crate-level attribute\n   --> $DIR/doc-attr2.rs:9:12\n    |\n LL |     #![doc(test(no_crate_inject))]"}, {"sha": "980d1c0e2077d272406075d834928dcf265e7ed3", "filename": "src/test/ui/attributes/doc-attr.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/75a15bf2757d372d7511bed70e1ad2c5814a1012/src%2Ftest%2Fui%2Fattributes%2Fdoc-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75a15bf2757d372d7511bed70e1ad2c5814a1012/src%2Ftest%2Fui%2Fattributes%2Fdoc-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fdoc-attr.rs?ref=75a15bf2757d372d7511bed70e1ad2c5814a1012", "patch": "@@ -8,3 +8,18 @@\n //~^ ERROR unknown `doc` attribute\n //~^^ WARN\n pub fn foo() {}\n+\n+#[doc(123)]\n+//~^ ERROR invalid `doc` attribute\n+//~| WARN\n+#[doc(\"hello\", \"bar\")]\n+//~^ ERROR invalid `doc` attribute\n+//~| WARN\n+//~| ERROR invalid `doc` attribute\n+//~| WARN\n+#[doc(foo::bar, crate::bar::baz = \"bye\")]\n+//~^ ERROR unknown `doc` attribute\n+//~| WARN\n+//~| ERROR unknown `doc` attribute\n+//~| WARN\n+fn bar() {}"}, {"sha": "cc2494c92e64951c25c674a21469c6974d53489d", "filename": "src/test/ui/attributes/doc-attr.stderr", "status": "modified", "additions": 46, "deletions": 1, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/75a15bf2757d372d7511bed70e1ad2c5814a1012/src%2Ftest%2Fui%2Fattributes%2Fdoc-attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/75a15bf2757d372d7511bed70e1ad2c5814a1012/src%2Ftest%2Fui%2Fattributes%2Fdoc-attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fdoc-attr.stderr?ref=75a15bf2757d372d7511bed70e1ad2c5814a1012", "patch": "@@ -13,6 +13,51 @@ LL | #![deny(warnings)]\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #82730 <https://github.com/rust-lang/rust/issues/82730>\n \n+error: invalid `doc` attribute\n+  --> $DIR/doc-attr.rs:12:7\n+   |\n+LL | #[doc(123)]\n+   |       ^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82730 <https://github.com/rust-lang/rust/issues/82730>\n+\n+error: invalid `doc` attribute\n+  --> $DIR/doc-attr.rs:15:7\n+   |\n+LL | #[doc(\"hello\", \"bar\")]\n+   |       ^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82730 <https://github.com/rust-lang/rust/issues/82730>\n+\n+error: invalid `doc` attribute\n+  --> $DIR/doc-attr.rs:15:16\n+   |\n+LL | #[doc(\"hello\", \"bar\")]\n+   |                ^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82730 <https://github.com/rust-lang/rust/issues/82730>\n+\n+error: unknown `doc` attribute `foo::bar`\n+  --> $DIR/doc-attr.rs:20:7\n+   |\n+LL | #[doc(foo::bar, crate::bar::baz = \"bye\")]\n+   |       ^^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82730 <https://github.com/rust-lang/rust/issues/82730>\n+\n+error: unknown `doc` attribute `crate::bar::baz`\n+  --> $DIR/doc-attr.rs:20:17\n+   |\n+LL | #[doc(foo::bar, crate::bar::baz = \"bye\")]\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82730 <https://github.com/rust-lang/rust/issues/82730>\n+\n error: unknown `doc` attribute `as_ptr`\n   --> $DIR/doc-attr.rs:3:8\n    |\n@@ -22,5 +67,5 @@ LL | #![doc(as_ptr)]\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #82730 <https://github.com/rust-lang/rust/issues/82730>\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 7 previous errors\n "}, {"sha": "643107318b9799f371828e3bf9441c8053b5cca1", "filename": "src/test/ui/attributes/doc-attr2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/75a15bf2757d372d7511bed70e1ad2c5814a1012/src%2Ftest%2Fui%2Fattributes%2Fdoc-attr2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/75a15bf2757d372d7511bed70e1ad2c5814a1012/src%2Ftest%2Fui%2Fattributes%2Fdoc-attr2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fdoc-attr2.stderr?ref=75a15bf2757d372d7511bed70e1ad2c5814a1012", "patch": "@@ -1,4 +1,4 @@\n-error: `#![doc(test(...)]` is only allowed as a crate level attribute\n+error: `#![doc(test(...)]` is only allowed as a crate-level attribute\n   --> $DIR/doc-attr2.rs:4:7\n    |\n LL | #[doc(test(no_crate_inject))]\n@@ -13,7 +13,7 @@ LL | #![deny(warnings)]\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #82730 <https://github.com/rust-lang/rust/issues/82730>\n \n-error: `#![doc(test(...)]` is only allowed as a crate level attribute\n+error: `#![doc(test(...)]` is only allowed as a crate-level attribute\n   --> $DIR/doc-attr2.rs:9:12\n    |\n LL |     #![doc(test(no_crate_inject))]"}, {"sha": "bd32609ade2967994b779d1f25b6e50ca0844e60", "filename": "src/test/ui/rustdoc/doc-alias-crate-level.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75a15bf2757d372d7511bed70e1ad2c5814a1012/src%2Ftest%2Fui%2Frustdoc%2Fdoc-alias-crate-level.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/75a15bf2757d372d7511bed70e1ad2c5814a1012/src%2Ftest%2Fui%2Frustdoc%2Fdoc-alias-crate-level.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frustdoc%2Fdoc-alias-crate-level.stderr?ref=75a15bf2757d372d7511bed70e1ad2c5814a1012", "patch": "@@ -4,7 +4,7 @@ error: '\\'' character isn't allowed in `#[doc(alias = \"...\")]`\n LL | #[doc(alias = \"shouldn't work!\")]\n    |               ^^^^^^^^^^^^^^^^^\n \n-error: `#![doc(alias = \"...\")]` isn't allowed as a crate level attribute\n+error: `#![doc(alias = \"...\")]` isn't allowed as a crate-level attribute\n   --> $DIR/doc-alias-crate-level.rs:5:8\n    |\n LL | #![doc(alias = \"not working!\")]"}, {"sha": "0679bb8c5a7a6f832bf70c587da1d289c67f7102", "filename": "src/test/ui/rustdoc/doc_keyword.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75a15bf2757d372d7511bed70e1ad2c5814a1012/src%2Ftest%2Fui%2Frustdoc%2Fdoc_keyword.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/75a15bf2757d372d7511bed70e1ad2c5814a1012/src%2Ftest%2Fui%2Frustdoc%2Fdoc_keyword.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frustdoc%2Fdoc_keyword.stderr?ref=75a15bf2757d372d7511bed70e1ad2c5814a1012", "patch": "@@ -10,7 +10,7 @@ error: `#[doc(keyword = \"...\")]` can only be used on modules\n LL | #[doc(keyword = \"hall\")]\n    |       ^^^^^^^^^^^^^^^^\n \n-error: `#![doc(keyword = \"...\")]` isn't allowed as a crate level attribute\n+error: `#![doc(keyword = \"...\")]` isn't allowed as a crate-level attribute\n   --> $DIR/doc_keyword.rs:4:8\n    |\n LL | #![doc(keyword = \"hello\")]"}]}