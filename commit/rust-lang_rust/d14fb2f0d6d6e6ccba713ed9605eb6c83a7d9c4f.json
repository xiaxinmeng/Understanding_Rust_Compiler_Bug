{"sha": "d14fb2f0d6d6e6ccba713ed9605eb6c83a7d9c4f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxNGZiMmYwZDZkNmU2Y2NiYTcxM2VkOTYwNWViNmM4M2E3ZDljNGY=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-04-21T22:23:10Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-04-21T22:23:10Z"}, "message": "rollup merge of #24635: tamird/llvm-3.5\n\nr? @alexcrichton", "tree": {"sha": "97865976d3a66f2e972637f2d60c4c653cf1b95f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/97865976d3a66f2e972637f2d60c4c653cf1b95f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d14fb2f0d6d6e6ccba713ed9605eb6c83a7d9c4f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d14fb2f0d6d6e6ccba713ed9605eb6c83a7d9c4f", "html_url": "https://github.com/rust-lang/rust/commit/d14fb2f0d6d6e6ccba713ed9605eb6c83a7d9c4f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d14fb2f0d6d6e6ccba713ed9605eb6c83a7d9c4f/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b1ce4957401d561da02973260b58a4fe58a1ebc", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b1ce4957401d561da02973260b58a4fe58a1ebc", "html_url": "https://github.com/rust-lang/rust/commit/6b1ce4957401d561da02973260b58a4fe58a1ebc"}, {"sha": "ba276adab596bafe48a27dc02dcc5867446a52b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba276adab596bafe48a27dc02dcc5867446a52b5", "html_url": "https://github.com/rust-lang/rust/commit/ba276adab596bafe48a27dc02dcc5867446a52b5"}], "stats": {"total": 109, "additions": 18, "deletions": 91}, "files": [{"sha": "fe9feb3538d15493fb8f425743b053dd4d84058a", "filename": "src/etc/mklldeps.py", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d14fb2f0d6d6e6ccba713ed9605eb6c83a7d9c4f/src%2Fetc%2Fmklldeps.py", "raw_url": "https://github.com/rust-lang/rust/raw/d14fb2f0d6d6e6ccba713ed9605eb6c83a7d9c4f/src%2Fetc%2Fmklldeps.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fmklldeps.py?ref=d14fb2f0d6d6e6ccba713ed9605eb6c83a7d9c4f", "patch": "@@ -46,13 +46,8 @@ def run(args):\n \n f.write(\"\\n\")\n \n-version = run([llconfig, '--version']).strip()\n-\n # LLVM libs\n-if version < '3.5':\n-    args = [llconfig, '--libs']\n-else:\n-    args = [llconfig, '--libs', '--system-libs']\n+args = [llconfig, '--libs', '--system-libs']\n \n args.extend(components)\n out = run(args)\n@@ -73,11 +68,6 @@ def run(args):\n         f.write(\", kind = \\\"static\\\"\")\n     f.write(\")]\\n\")\n \n-# llvm-config before 3.5 didn't have a system-libs flag\n-if version < '3.5':\n-    if os == 'win32':\n-        f.write(\"#[link(name = \\\"imagehlp\\\")]\")\n-\n # LLVM ldflags\n out = run([llconfig, '--ldflags'])\n for lib in out.strip().split(' '):"}, {"sha": "80e01154655e78ed499961e37d919e7161407c02", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d14fb2f0d6d6e6ccba713ed9605eb6c83a7d9c4f/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d14fb2f0d6d6e6ccba713ed9605eb6c83a7d9c4f/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=d14fb2f0d6d6e6ccba713ed9605eb6c83a7d9c4f", "patch": "@@ -2066,8 +2066,6 @@ extern {\n     pub fn LLVMRustDestroyArchive(AR: ArchiveRef);\n \n     pub fn LLVMRustSetDLLExportStorageClass(V: ValueRef);\n-    pub fn LLVMVersionMajor() -> c_int;\n-    pub fn LLVMVersionMinor() -> c_int;\n \n     pub fn LLVMRustGetSectionName(SI: SectionIteratorRef,\n                                   data: *mut *const c_char) -> c_int;"}, {"sha": "b8c45d4751ef8894022e26b28a800420b7e17f92", "filename": "src/librustc_trans/trans/context.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d14fb2f0d6d6e6ccba713ed9605eb6c83a7d9c4f/src%2Flibrustc_trans%2Ftrans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d14fb2f0d6d6e6ccba713ed9605eb6c83a7d9c4f/src%2Flibrustc_trans%2Ftrans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcontext.rs?ref=d14fb2f0d6d6e6ccba713ed9605eb6c83a7d9c4f", "patch": "@@ -878,16 +878,7 @@ fn declare_intrinsic(ccx: &CrateContext, key: & &'static str) -> Option<ValueRef\n     // were introduced in LLVM 3.4, so we case on that.\n     macro_rules! compatible_ifn {\n         ($name:expr, $cname:ident ($($arg:expr),*) -> $ret:expr) => (\n-            if unsafe { llvm::LLVMVersionMinor() >= 4 } {\n-                // The `if key == $name` is already in ifn!\n-                ifn!($name, fn($($arg),*) -> $ret);\n-            } else if *key == $name {\n-                let f = declare::declare_cfn(ccx, stringify!($cname),\n-                                             Type::func(&[$($arg),*], &$ret),\n-                                             ty::mk_nil(ccx.tcx()));\n-                ccx.intrinsics().borrow_mut().insert($name, f.clone());\n-                return Some(f);\n-            }\n+            ifn!($name, fn($($arg),*) -> $ret);\n         )\n     }\n "}, {"sha": "7c769eca74aabe71669823c41cf0febe067acdc4", "filename": "src/librustc_trans/trans/debuginfo.rs", "status": "modified", "additions": 2, "deletions": 20, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d14fb2f0d6d6e6ccba713ed9605eb6c83a7d9c4f/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d14fb2f0d6d6e6ccba713ed9605eb6c83a7d9c4f/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs?ref=d14fb2f0d6d6e6ccba713ed9605eb6c83a7d9c4f", "patch": "@@ -2653,26 +2653,8 @@ fn set_members_of_composite_type(cx: &CrateContext,\n         let mut composite_types_completed =\n             debug_context(cx).composite_types_completed.borrow_mut();\n         if composite_types_completed.contains(&composite_type_metadata) {\n-            let (llvm_version_major, llvm_version_minor) = unsafe {\n-                (llvm::LLVMVersionMajor(), llvm::LLVMVersionMinor())\n-            };\n-\n-            let actual_llvm_version = llvm_version_major * 1000000 + llvm_version_minor * 1000;\n-            let min_supported_llvm_version = 3 * 1000000 + 4 * 1000;\n-\n-            if actual_llvm_version < min_supported_llvm_version {\n-                cx.sess().warn(&format!(\"This version of rustc was built with LLVM \\\n-                                        {}.{}. Rustc just ran into a known \\\n-                                        debuginfo corruption problem thatoften \\\n-                                        occurs with LLVM versions below 3.4. \\\n-                                        Please use a rustc built with anewer \\\n-                                        version of LLVM.\",\n-                                       llvm_version_major,\n-                                       llvm_version_minor));\n-            } else {\n-                cx.sess().bug(\"debuginfo::set_members_of_composite_type() - \\\n-                               Already completed forward declaration re-encountered.\");\n-            }\n+            cx.sess().bug(\"debuginfo::set_members_of_composite_type() - \\\n+                           Already completed forward declaration re-encountered.\");\n         } else {\n             composite_types_completed.insert(composite_type_metadata);\n         }"}, {"sha": "6bfa80f9c40b360f5dd119494dc7987f60b30680", "filename": "src/librustc_trans/trans/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d14fb2f0d6d6e6ccba713ed9605eb6c83a7d9c4f/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d14fb2f0d6d6e6ccba713ed9605eb6c83a7d9c4f/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs?ref=d14fb2f0d6d6e6ccba713ed9605eb6c83a7d9c4f", "patch": "@@ -746,11 +746,7 @@ pub fn trans_intrinsic_call<'a, 'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n                     let src = to_arg_ty(bcx, llargs[2], tp_ty);\n                     let res = AtomicCmpXchg(bcx, ptr, cmp, src, order,\n                                             strongest_failure_ordering);\n-                    if unsafe { llvm::LLVMVersionMinor() >= 5 } {\n-                        ExtractValue(bcx, res, 0)\n-                    } else {\n-                        res\n-                    }\n+                    ExtractValue(bcx, res, 0)\n                 }\n \n                 \"load\" => {"}, {"sha": "7e0630fd242d39c83dfff871136a8d0118950208", "filename": "src/rustllvm/ExecutionEngineWrapper.cpp", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d14fb2f0d6d6e6ccba713ed9605eb6c83a7d9c4f/src%2Frustllvm%2FExecutionEngineWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/d14fb2f0d6d6e6ccba713ed9605eb6c83a7d9c4f/src%2Frustllvm%2FExecutionEngineWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FExecutionEngineWrapper.cpp?ref=d14fb2f0d6d6e6ccba713ed9605eb6c83a7d9c4f", "patch": "@@ -89,12 +89,12 @@ extern \"C\" LLVMExecutionEngineRef LLVMBuildExecutionEngine(\n     options.NoFramePointerElim = true;\n \n     ExecutionEngine *ee =\n-    #if LLVM_VERSION_MINOR <= 5\n-        EngineBuilder(unwrap(mod))\n-            .setMCJITMemoryManager(unwrap(mref))\n-    #else\n+    #if LLVM_VERSION_MINOR >= 6\n         EngineBuilder(std::unique_ptr<Module>(unwrap(mod)))\n             .setMCJITMemoryManager(std::unique_ptr<RustJITMemoryManager>(unwrap(mref)))\n+    #else\n+        EngineBuilder(unwrap(mod))\n+            .setMCJITMemoryManager(unwrap(mref))\n     #endif\n             .setEngineKind(EngineKind::JIT)\n             .setErrorStr(&error_str)"}, {"sha": "a2ab8040198ff7a3266bd58194556d2d7255fd31", "filename": "src/rustllvm/PassWrapper.cpp", "status": "modified", "additions": 3, "deletions": 16, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d14fb2f0d6d6e6ccba713ed9605eb6c83a7d9c4f/src%2Frustllvm%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/d14fb2f0d6d6e6ccba713ed9605eb6c83a7d9c4f/src%2Frustllvm%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FPassWrapper.cpp?ref=d14fb2f0d6d6e6ccba713ed9605eb6c83a7d9c4f", "patch": "@@ -92,9 +92,6 @@ LLVMRustCreateTargetMachine(const char *triple,\n     TargetOptions Options;\n     Options.PositionIndependentExecutable = PositionIndependentExecutable;\n     Options.NoFramePointerElim = NoFramePointerElim;\n-#if LLVM_VERSION_MINOR < 5\n-    Options.EnableSegmentedStacks = EnableSegmentedStacks;\n-#endif\n     Options.FloatABIType = FloatABI::Default;\n     Options.UseSoftFloat = UseSoftFloat;\n     if (UseSoftFloat) {\n@@ -128,10 +125,8 @@ LLVMRustAddAnalysisPasses(LLVMTargetMachineRef TM,\n     PassManagerBase *PM = unwrap(PMR);\n #if LLVM_VERSION_MINOR >= 6\n     PM->add(new DataLayoutPass());\n-#elif LLVM_VERSION_MINOR == 5\n-    PM->add(new DataLayoutPass(unwrap(M)));\n #else\n-    PM->add(new DataLayout(unwrap(M)));\n+    PM->add(new DataLayoutPass(unwrap(M)));\n #endif\n     unwrap(TM)->addAnalysisPasses(*PM);\n }\n@@ -202,10 +197,8 @@ LLVMRustWriteOutputFile(LLVMTargetMachineRef Target,\n   raw_fd_ostream OS(path, EC, sys::fs::F_None);\n   if (EC)\n     ErrorInfo = EC.message();\n-#elif LLVM_VERSION_MINOR >= 4\n-  raw_fd_ostream OS(path, ErrorInfo, sys::fs::F_None);\n #else\n-  raw_fd_ostream OS(path, ErrorInfo, raw_fd_ostream::F_Binary);\n+  raw_fd_ostream OS(path, ErrorInfo, sys::fs::F_None);\n #endif\n   if (ErrorInfo != \"\") {\n     LLVMRustSetLastError(ErrorInfo.c_str());\n@@ -230,19 +223,13 @@ LLVMRustPrintModule(LLVMPassManagerRef PMR,\n   raw_fd_ostream OS(path, EC, sys::fs::F_None);\n   if (EC)\n     ErrorInfo = EC.message();\n-#elif LLVM_VERSION_MINOR >= 4\n-  raw_fd_ostream OS(path, ErrorInfo, sys::fs::F_None);\n #else\n-  raw_fd_ostream OS(path, ErrorInfo, raw_fd_ostream::F_Binary);\n+  raw_fd_ostream OS(path, ErrorInfo, sys::fs::F_None);\n #endif\n \n   formatted_raw_ostream FOS(OS);\n \n-#if LLVM_VERSION_MINOR >= 5\n   PM->add(createPrintModulePass(FOS));\n-#else\n-  PM->add(createPrintModulePass(&FOS));\n-#endif\n \n   PM->run(*unwrap(M));\n }"}, {"sha": "fe0a7b454c17da8740caf1fe6d4765d0f3467fd2", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 6, "deletions": 16, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d14fb2f0d6d6e6ccba713ed9605eb6c83a7d9c4f/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/d14fb2f0d6d6e6ccba713ed9605eb6c83a7d9c4f/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=d14fb2f0d6d6e6ccba713ed9605eb6c83a7d9c4f", "patch": "@@ -412,7 +412,7 @@ extern \"C\" LLVMMetadataRef LLVMDIBuilderCreateStaticVariable(\n     bool isLocalToUnit,\n     LLVMValueRef Val,\n     LLVMMetadataRef Decl = NULL) {\n-#if LLVM_VERSION_MINOR == 6\n+#if LLVM_VERSION_MINOR >= 6\n     return wrap(Builder->createGlobalVariable(unwrapDI<DIDescriptor>(Context),\n #else\n     return wrap(Builder->createStaticVariable(unwrapDI<DIDescriptor>(Context),\n@@ -440,7 +440,7 @@ extern \"C\" LLVMMetadataRef LLVMDIBuilderCreateVariable(\n     int64_t* AddrOps,\n     unsigned AddrOpsCount,\n     unsigned ArgNo) {\n-#if LLVM_VERSION_MINOR < 6\n+#if LLVM_VERSION_MINOR == 5\n     if (AddrOpsCount > 0) {\n         SmallVector<llvm::Value *, 16> addr_ops;\n         llvm::Type *Int64Ty = Type::getInt64Ty(unwrap<MDNode>(Scope)->getContext());\n@@ -707,12 +707,12 @@ extern \"C\" void LLVMWriteValueToString(LLVMValueRef Value, RustStringRef str) {\n extern \"C\" bool\n LLVMRustLinkInExternalBitcode(LLVMModuleRef dst, char *bc, size_t len) {\n     Module *Dst = unwrap(dst);\n-#if LLVM_VERSION_MINOR == 5\n-    MemoryBuffer* buf = MemoryBuffer::getMemBufferCopy(StringRef(bc, len));\n-    ErrorOr<Module *> Src = llvm::getLazyBitcodeModule(buf, Dst->getContext());\n-#else\n+#if LLVM_VERSION_MINOR >= 6\n     std::unique_ptr<MemoryBuffer> buf = MemoryBuffer::getMemBufferCopy(StringRef(bc, len));\n     ErrorOr<Module *> Src = llvm::getLazyBitcodeModule(std::move(buf), Dst->getContext());\n+#else\n+    MemoryBuffer* buf = MemoryBuffer::getMemBufferCopy(StringRef(bc, len));\n+    ErrorOr<Module *> Src = llvm::getLazyBitcodeModule(buf, Dst->getContext());\n #endif\n     if (!Src) {\n         LLVMRustSetLastError(Src.getError().message().c_str());\n@@ -840,16 +840,6 @@ LLVMRustSetDLLExportStorageClass(LLVMValueRef Value) {\n     V->setDLLStorageClass(GlobalValue::DLLExportStorageClass);\n }\n \n-extern \"C\" int\n-LLVMVersionMinor() {\n-    return LLVM_VERSION_MINOR;\n-}\n-\n-extern \"C\" int\n-LLVMVersionMajor() {\n-    return LLVM_VERSION_MAJOR;\n-}\n-\n // Note that the two following functions look quite similar to the\n // LLVMGetSectionName function. Sadly, it appears that this function only\n // returns a char* pointer, which isn't guaranteed to be null-terminated. The"}, {"sha": "8a4330acf43417e831690e9f564207685de03e5e", "filename": "src/rustllvm/rustllvm.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d14fb2f0d6d6e6ccba713ed9605eb6c83a7d9c4f/src%2Frustllvm%2Frustllvm.h", "raw_url": "https://github.com/rust-lang/rust/raw/d14fb2f0d6d6e6ccba713ed9605eb6c83a7d9c4f/src%2Frustllvm%2Frustllvm.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2Frustllvm.h?ref=d14fb2f0d6d6e6ccba713ed9605eb6c83a7d9c4f", "patch": "@@ -46,17 +46,10 @@\n #include \"llvm-c/ExecutionEngine.h\"\n #include \"llvm-c/Object.h\"\n \n-#if LLVM_VERSION_MINOR >= 5\n #include \"llvm/IR/IRPrintingPasses.h\"\n #include \"llvm/IR/DebugInfo.h\"\n #include \"llvm/IR/DIBuilder.h\"\n #include \"llvm/Linker/Linker.h\"\n-#else\n-#include \"llvm/Assembly/PrintModulePass.h\"\n-#include \"llvm/DebugInfo.h\"\n-#include \"llvm/DIBuilder.h\"\n-#include \"llvm/Linker.h\"\n-#endif\n \n // Used by RustMCJITMemoryManager::getPointerToNamedFunction()\n // to get around glibc issues. See the function for more information."}]}