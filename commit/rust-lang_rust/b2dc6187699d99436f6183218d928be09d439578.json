{"sha": "b2dc6187699d99436f6183218d928be09d439578", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyZGM2MTg3Njk5ZDk5NDM2ZjYxODMyMThkOTI4YmUwOWQ0Mzk1Nzg=", "commit": {"author": {"name": "Linus F\u00e4rnstrand", "email": "faern@faern.net", "date": "2020-02-08T11:15:22Z"}, "committer": {"name": "Linus F\u00e4rnstrand", "email": "faern@faern.net", "date": "2020-02-12T19:20:56Z"}, "message": "Add usage recommendation to old float constants", "tree": {"sha": "836ef421f1254cfe2bc791a75f7466ec60ddc997", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/836ef421f1254cfe2bc791a75f7466ec60ddc997"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b2dc6187699d99436f6183218d928be09d439578", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b2dc6187699d99436f6183218d928be09d439578", "html_url": "https://github.com/rust-lang/rust/commit/b2dc6187699d99436f6183218d928be09d439578", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b2dc6187699d99436f6183218d928be09d439578/comments", "author": {"login": "faern", "id": 332294, "node_id": "MDQ6VXNlcjMzMjI5NA==", "avatar_url": "https://avatars.githubusercontent.com/u/332294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/faern", "html_url": "https://github.com/faern", "followers_url": "https://api.github.com/users/faern/followers", "following_url": "https://api.github.com/users/faern/following{/other_user}", "gists_url": "https://api.github.com/users/faern/gists{/gist_id}", "starred_url": "https://api.github.com/users/faern/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/faern/subscriptions", "organizations_url": "https://api.github.com/users/faern/orgs", "repos_url": "https://api.github.com/users/faern/repos", "events_url": "https://api.github.com/users/faern/events{/privacy}", "received_events_url": "https://api.github.com/users/faern/received_events", "type": "User", "site_admin": false}, "committer": {"login": "faern", "id": 332294, "node_id": "MDQ6VXNlcjMzMjI5NA==", "avatar_url": "https://avatars.githubusercontent.com/u/332294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/faern", "html_url": "https://github.com/faern", "followers_url": "https://api.github.com/users/faern/followers", "following_url": "https://api.github.com/users/faern/following{/other_user}", "gists_url": "https://api.github.com/users/faern/gists{/gist_id}", "starred_url": "https://api.github.com/users/faern/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/faern/subscriptions", "organizations_url": "https://api.github.com/users/faern/orgs", "repos_url": "https://api.github.com/users/faern/repos", "events_url": "https://api.github.com/users/faern/events{/privacy}", "received_events_url": "https://api.github.com/users/faern/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83191c2da6da6c13466f7f30568cdea02c761ca0", "url": "https://api.github.com/repos/rust-lang/rust/commits/83191c2da6da6c13466f7f30568cdea02c761ca0", "html_url": "https://github.com/rust-lang/rust/commit/83191c2da6da6c13466f7f30568cdea02c761ca0"}], "stats": {"total": 28, "additions": 28, "deletions": 0}, "files": [{"sha": "3a641ae94a4437a328e52749944538e5eca9d8fe", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b2dc6187699d99436f6183218d928be09d439578/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dc6187699d99436f6183218d928be09d439578/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=b2dc6187699d99436f6183218d928be09d439578", "patch": "@@ -17,17 +17,21 @@ use crate::mem;\n use crate::num::FpCategory;\n \n /// The radix or base of the internal representation of `f32`.\n+/// Use [`f32::RADIX`](../../std/primitive.f32.html#associatedconstant.RADIX) instead.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const RADIX: u32 = f32::RADIX;\n \n /// Number of significant digits in base 2.\n+/// Use [`f32::MANTISSA_DIGITS`](../../std/primitive.f32.html#associatedconstant.MANTISSA_DIGITS) instead.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const MANTISSA_DIGITS: u32 = f32::MANTISSA_DIGITS;\n /// Approximate number of significant digits in base 10.\n+/// Use [`f32::DIGITS`](../../std/primitive.f32.html#associatedconstant.DIGITS) instead.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const DIGITS: u32 = f32::DIGITS;\n \n /// [Machine epsilon] value for `f32`.\n+/// Use [`f32::EPSILON`](../../std/primitive.f32.html#associatedconstant.EPSILON) instead.\n ///\n /// This is the difference between `1.0` and the next larger representable number.\n ///\n@@ -36,36 +40,46 @@ pub const DIGITS: u32 = f32::DIGITS;\n pub const EPSILON: f32 = f32::EPSILON;\n \n /// Smallest finite `f32` value.\n+/// Use [`f32::MIN`](../../std/primitive.f32.html#associatedconstant.MIN) instead.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const MIN: f32 = f32::MIN;\n /// Smallest positive normal `f32` value.\n+/// Use [`f32::MIN_POSITIVE`](../../std/primitive.f32.html#associatedconstant.MIN_POSITIVE) instead.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const MIN_POSITIVE: f32 = f32::MIN_POSITIVE;\n /// Largest finite `f32` value.\n+/// Use [`f32::MAX`](../../std/primitive.f32.html#associatedconstant.MAX) instead.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const MAX: f32 = f32::MAX;\n \n /// One greater than the minimum possible normal power of 2 exponent.\n+/// Use [`f32::MIN_EXP`](../../std/primitive.f32.html#associatedconstant.MIN_EXP) instead.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const MIN_EXP: i32 = f32::MIN_EXP;\n /// Maximum possible power of 2 exponent.\n+/// Use [`f32::MAX_EXP`](../../std/primitive.f32.html#associatedconstant.MAX_EXP) instead.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const MAX_EXP: i32 = f32::MAX_EXP;\n \n /// Minimum possible normal power of 10 exponent.\n+/// Use [`f32::MIN_10_EXP`](../../std/primitive.f32.html#associatedconstant.MIN_10_EXP) instead.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const MIN_10_EXP: i32 = f32::MIN_10_EXP;\n /// Maximum possible power of 10 exponent.\n+/// Use [`f32::MAX_10_EXP`](../../std/primitive.f32.html#associatedconstant.MAX_10_EXP) instead.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const MAX_10_EXP: i32 = f32::MAX_10_EXP;\n \n /// Not a Number (NaN).\n+/// Use [`f32::NAN`](../../std/primitive.f32.html#associatedconstant.NAN) instead.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const NAN: f32 = f32::NAN;\n /// Infinity (\u221e).\n+/// Use [`f32::INFINITY`](../../std/primitive.f32.html#associatedconstant.INFINITY) instead.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const INFINITY: f32 = f32::INFINITY;\n /// Negative infinity (\u2212\u221e).\n+/// Use [`f32::NEG_INFINITY`](../../std/primitive.f32.html#associatedconstant.NEG_INFINITY) instead.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const NEG_INFINITY: f32 = f32::NEG_INFINITY;\n "}, {"sha": "121ed149294a356a35460b2c01c0e0774b3dc65b", "filename": "src/libcore/num/f64.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b2dc6187699d99436f6183218d928be09d439578/src%2Flibcore%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dc6187699d99436f6183218d928be09d439578/src%2Flibcore%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff64.rs?ref=b2dc6187699d99436f6183218d928be09d439578", "patch": "@@ -17,17 +17,21 @@ use crate::mem;\n use crate::num::FpCategory;\n \n /// The radix or base of the internal representation of `f64`.\n+/// Use [`f64::RADIX`](../../std/primitive.f64.html#associatedconstant.RADIX) instead.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const RADIX: u32 = f64::RADIX;\n \n /// Number of significant digits in base 2.\n+/// Use [`f64::MANTISSA_DIGITS`](../../std/primitive.f64.html#associatedconstant.MANTISSA_DIGITS) instead.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const MANTISSA_DIGITS: u32 = f64::MANTISSA_DIGITS;\n /// Approximate number of significant digits in base 10.\n+/// Use [`f64::DIGITS`](../../std/primitive.f64.html#associatedconstant.DIGITS) instead.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const DIGITS: u32 = f64::DIGITS;\n \n /// [Machine epsilon] value for `f64`.\n+/// Use [`f64::EPSILON`](../../std/primitive.f64.html#associatedconstant.EPSILON) instead.\n ///\n /// This is the difference between `1.0` and the next larger representable number.\n ///\n@@ -36,36 +40,46 @@ pub const DIGITS: u32 = f64::DIGITS;\n pub const EPSILON: f64 = f64::EPSILON;\n \n /// Smallest finite `f64` value.\n+/// Use [`f64::MIN`](../../std/primitive.f64.html#associatedconstant.MIN) instead.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const MIN: f64 = f64::MIN;\n /// Smallest positive normal `f64` value.\n+/// Use [`f64::MIN_POSITIVE`](../../std/primitive.f64.html#associatedconstant.MIN_POSITIVE) instead.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const MIN_POSITIVE: f64 = f64::MIN_POSITIVE;\n /// Largest finite `f64` value.\n+/// Use [`f64::MAX`](../../std/primitive.f64.html#associatedconstant.MAX) instead.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const MAX: f64 = f64::MAX;\n \n /// One greater than the minimum possible normal power of 2 exponent.\n+/// Use [`f64::MIN_EXP`](../../std/primitive.f64.html#associatedconstant.MIN_EXP) instead.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const MIN_EXP: i32 = f64::MIN_EXP;\n /// Maximum possible power of 2 exponent.\n+/// Use [`f64::MAX_EXP`](../../std/primitive.f64.html#associatedconstant.MAX_EXP) instead.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const MAX_EXP: i32 = f64::MAX_EXP;\n \n /// Minimum possible normal power of 10 exponent.\n+/// Use [`f64::MIN_10_EXP`](../../std/primitive.f64.html#associatedconstant.MIN_10_EXP) instead.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const MIN_10_EXP: i32 = f64::MIN_10_EXP;\n /// Maximum possible power of 10 exponent.\n+/// Use [`f64::MAX_10_EXP`](../../std/primitive.f64.html#associatedconstant.MAX_10_EXP) instead.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const MAX_10_EXP: i32 = f64::MAX_10_EXP;\n \n /// Not a Number (NaN).\n+/// Use [`f64::NAN`](../../std/primitive.f64.html#associatedconstant.NAN) instead.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const NAN: f64 = f64::NAN;\n /// Infinity (\u221e).\n+/// Use [`f64::INFINITY`](../../std/primitive.f64.html#associatedconstant.INFINITY) instead.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const INFINITY: f64 = f64::INFINITY;\n /// Negative infinity (\u2212\u221e).\n+/// Use [`f64::NEG_INFINITY`](../../std/primitive.f64.html#associatedconstant.NEG_INFINITY) instead.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const NEG_INFINITY: f64 = f64::NEG_INFINITY;\n "}]}