{"sha": "97692afda9e493db65c833b931a6971fb58352b2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3NjkyYWZkYTllNDkzZGI2NWM4MzNiOTMxYTY5NzFmYjU4MzUyYjI=", "commit": {"author": {"name": "Paul Daniel Faria", "email": "nashenas88@users.noreply.github.com", "date": "2017-11-02T01:25:37Z"}, "committer": {"name": "Paul Daniel Faria", "email": "nashenas88@users.noreply.github.com", "date": "2017-11-02T01:25:37Z"}, "message": "newindex_type macro: make index private by default and allow pub through config", "tree": {"sha": "c8555d14a7760ff690af4f461b03735e9378c133", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c8555d14a7760ff690af4f461b03735e9378c133"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97692afda9e493db65c833b931a6971fb58352b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97692afda9e493db65c833b931a6971fb58352b2", "html_url": "https://github.com/rust-lang/rust/commit/97692afda9e493db65c833b931a6971fb58352b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97692afda9e493db65c833b931a6971fb58352b2/comments", "author": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf1198eb1fea71f94d4f0c3c3e968eaf183dfa65", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf1198eb1fea71f94d4f0c3c3e968eaf183dfa65", "html_url": "https://github.com/rust-lang/rust/commit/bf1198eb1fea71f94d4f0c3c3e968eaf183dfa65"}], "stats": {"total": 109, "additions": 59, "deletions": 50}, "files": [{"sha": "cc30fdfaca6a32fcca5a33d5b378fe06a2f4cfbf", "filename": "src/librustc/hir/def_id.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97692afda9e493db65c833b931a6971fb58352b2/src%2Flibrustc%2Fhir%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97692afda9e493db65c833b931a6971fb58352b2/src%2Flibrustc%2Fhir%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef_id.rs?ref=97692afda9e493db65c833b931a6971fb58352b2", "patch": "@@ -16,7 +16,7 @@ use serialize::{self, Encoder, Decoder};\n use std::fmt;\n use std::u32;\n \n-newtype_index!(CrateNum nopub\n+newtype_index!(CrateNum\n     {\n         derive[Debug]\n         ENCODABLE = custom"}, {"sha": "89707839144ccdffb2a22be63a246f0f03012d8f", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/97692afda9e493db65c833b931a6971fb58352b2/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97692afda9e493db65c833b931a6971fb58352b2/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=97692afda9e493db65c833b931a6971fb58352b2", "patch": "@@ -156,7 +156,11 @@ pub struct BlockRemainder {\n     pub first_statement_index: FirstStatementIndex,\n }\n \n-newtype_index!(FirstStatementIndex { MAX = SCOPE_DATA_REMAINDER_MAX });\n+newtype_index!(FirstStatementIndex\n+    {\n+        pub idx\n+        MAX = SCOPE_DATA_REMAINDER_MAX\n+    });\n \n impl From<ScopeData> for Scope {\n     #[inline]"}, {"sha": "dc169c67a763274eaea9188f322f75fea8c4d9ea", "filename": "src/librustc_data_structures/indexed_vec.rs", "status": "modified", "additions": 53, "deletions": 48, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/97692afda9e493db65c833b931a6971fb58352b2/src%2Flibrustc_data_structures%2Findexed_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97692afda9e493db65c833b931a6971fb58352b2/src%2Flibrustc_data_structures%2Findexed_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Findexed_vec.rs?ref=97692afda9e493db65c833b931a6971fb58352b2", "patch": "@@ -47,16 +47,6 @@ macro_rules! newtype_index {\n         newtype_index!(\n             // Leave out derives marker so we can use its absence to ensure it comes first\n             @type         [$name]\n-            @pub          [pub]\n-            @max          [::std::u32::MAX]\n-            @debug_format [\"{}\"]);\n-    );\n-\n-    ($name:ident nopub) => (\n-        newtype_index!(\n-            // Leave out derives marker so we can use its absence to ensure it comes first\n-            @type         [$name]\n-            @pub          []\n             @max          [::std::u32::MAX]\n             @debug_format [\"{}\"]);\n     );\n@@ -66,29 +56,17 @@ macro_rules! newtype_index {\n         newtype_index!(\n             // Leave out derives marker so we can use its absence to ensure it comes first\n             @type         [$name]\n-            @pub          [pub]\n             @max          [::std::u32::MAX]\n             @debug_format [\"{}\"]\n                           $($tokens)+);\n     );\n \n-    // Define any constants\n-    ($name:ident nopub { $($tokens:tt)+ }) => (\n-        newtype_index!(\n-            // Leave out derives marker so we can use its absence to ensure it comes first\n-            @type         [$name]\n-            @pub          []\n-            @max          [::std::u32::MAX]\n-            @debug_format [unsafe {::std::intrinsics::type_name::<$name>() }]\n-                          $($tokens)+);\n-    );\n-\n     // ---- private rules ----\n \n     // Base case, user-defined constants (if any) have already been defined\n     (@derives      [$($derives:ident,)*]\n-     @type         [$type:ident]\n      @pub          [$($pub:tt)*]\n+     @type         [$type:ident]\n      @max          [$max:expr]\n      @debug_format [$debug_format:expr]) => (\n         #[derive(Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord, $($derives),*)]\n@@ -148,16 +126,43 @@ macro_rules! newtype_index {\n             @debug_format [$debug_format]);\n     );\n \n-    // Append comma to end of derives list if it's missing\n+    // Handle the case where someone wants to make the internal field public\n+    (@type         [$type:ident]\n+     @max          [$max:expr]\n+     @debug_format [$debug_format:expr]\n+                   pub idx\n+                   $($tokens:tt)*) => (\n+        newtype_index!(\n+            @pub          [pub]\n+            @type         [$type]\n+            @max          [$max]\n+            @debug_format [$debug_format]\n+                          $($tokens)*);\n+    );\n+\n+    // The default case is that the internal field is private\n     (@type         [$type:ident]\n-     @pub          [$($pub:tt)*]\n      @max          [$max:expr]\n      @debug_format [$debug_format:expr]\n-                   derive [$($derives:ident),*]\n                    $($tokens:tt)*) => (\n         newtype_index!(\n+            @pub          []\n             @type         [$type]\n+            @max          [$max]\n+            @debug_format [$debug_format]\n+                          $($tokens)*);\n+    );\n+\n+    // Append comma to end of derives list if it's missing\n+    (@pub          [$($pub:tt)*]\n+     @type         [$type:ident]\n+     @max          [$max:expr]\n+     @debug_format [$debug_format:expr]\n+                   derive [$($derives:ident),*]\n+                   $($tokens:tt)*) => (\n+        newtype_index!(\n             @pub          [$($pub)*]\n+            @type         [$type]\n             @max          [$max]\n             @debug_format [$debug_format]\n                           derive [$($derives,)*]\n@@ -166,142 +171,142 @@ macro_rules! newtype_index {\n \n     // By not including the @derives marker in this list nor in the default args, we can force it\n     // to come first if it exists. When encodable is custom, just use the derives list as-is.\n-    (@type         [$type:ident]\n-     @pub          [$($pub:tt)*]\n+    (@pub          [$($pub:tt)*]\n+     @type         [$type:ident]\n      @max          [$max:expr]\n      @debug_format [$debug_format:expr]\n                    derive [$($derives:ident,)+]\n                    ENCODABLE = custom\n                    $($tokens:tt)*) => (\n         newtype_index!(\n             @derives      [$($derives,)+]\n-            @type         [$type]\n             @pub          [$($pub)*]\n+            @type         [$type]\n             @max          [$max]\n             @debug_format [$debug_format]\n                           $($tokens)*);\n     );\n \n     // By not including the @derives marker in this list nor in the default args, we can force it\n     // to come first if it exists. When encodable isn't custom, add serialization traits by default.\n-    (@type         [$type:ident]\n-     @pub          [$($pub:tt)*]\n+    (@pub          [$($pub:tt)*]\n+     @type         [$type:ident]\n      @max          [$max:expr]\n      @debug_format [$debug_format:expr]\n                    derive [$($derives:ident,)+]\n                    $($tokens:tt)*) => (\n         newtype_index!(\n             @derives      [$($derives,)+ RustcDecodable, RustcEncodable,]\n-            @type         [$type]\n             @pub          [$($pub)*]\n+            @type         [$type]\n             @max          [$max]\n             @debug_format [$debug_format]\n                           $($tokens)*);\n     );\n \n     // The case where no derives are added, but encodable is overriden. Don't\n     // derive serialization traits\n-    (@type         [$type:ident]\n-     @pub          [$($pub:tt)*]\n+    (@pub          [$($pub:tt)*]\n+     @type         [$type:ident]\n      @max          [$max:expr]\n      @debug_format [$debug_format:expr]\n                    ENCODABLE = custom\n                    $($tokens:tt)*) => (\n         newtype_index!(\n             @derives      []\n-            @type         [$type]\n             @pub          [$($pub)*]\n+            @type         [$type]\n             @max          [$max]\n             @debug_format [$debug_format]\n                           $($tokens)*);\n     );\n \n     // The case where no derives are added, add serialization derives by default\n-    (@type         [$type:ident]\n-     @pub          [$($pub:tt)*]\n+    (@pub          [$($pub:tt)*]\n+     @type         [$type:ident]\n      @max          [$max:expr]\n      @debug_format [$debug_format:expr]\n                    $($tokens:tt)*) => (\n         newtype_index!(\n             @derives      [RustcDecodable, RustcEncodable,]\n-            @type         [$type]\n             @pub          [$($pub)*]\n+            @type         [$type]\n             @max          [$max]\n             @debug_format [$debug_format]\n                           $($tokens)*);\n     );\n \n     // Rewrite final without comma to one that includes comma\n     (@derives      [$($derives:ident,)*]\n-     @type         [$type:ident]\n      @pub          [$($pub:tt)*]\n+     @type         [$type:ident]\n      @max          [$max:expr]\n      @debug_format [$debug_format:expr]\n                    $name:ident = $constant:expr) => (\n         newtype_index!(\n             @derives      [$($derives,)*]\n-            @type         [$type]\n             @pub          [$($pub)*]\n+            @type         [$type]\n             @max          [$max]\n             @debug_format [$debug_format]\n                           $name = $constant,);\n     );\n \n     // Rewrite final const without comma to one that includes comma\n     (@derives      [$($derives:ident,)*]\n-     @type         [$type:ident]\n      @pub          [$($pub:tt)*]\n+     @type         [$type:ident]\n      @max          [$_max:expr]\n      @debug_format [$debug_format:expr]\n                    $(#[doc = $doc:expr])*\n                    const $name:ident = $constant:expr) => (\n         newtype_index!(\n             @derives      [$($derives,)*]\n-            @type         [$type]\n             @pub          [$($pub)*]\n+            @type         [$type]\n             @max          [$max]\n             @debug_format [$debug_format]\n                           $(#[doc = $doc])* const $name = $constant,);\n     );\n \n     // Replace existing default for max\n     (@derives      [$($derives:ident,)*]\n-     @type         [$type:ident]\n      @pub          [$($pub:tt)*]\n+     @type         [$type:ident]\n      @max          [$_max:expr]\n      @debug_format [$debug_format:expr]\n                    MAX = $max:expr,\n                    $($tokens:tt)*) => (\n         newtype_index!(\n             @derives      [$($derives,)*]\n-            @type         [$type]\n             @pub          [$($pub)*]\n+            @type         [$type]\n             @max          [$max]\n             @debug_format [$debug_format]\n                           $($tokens)*);\n     );\n \n     // Replace existing default for debug_format\n     (@derives      [$($derives:ident,)*]\n-     @type         [$type:ident]\n      @pub          [$($pub:tt)*]\n+     @type         [$type:ident]\n      @max          [$max:expr]\n      @debug_format [$_debug_format:expr]\n                    DEBUG_FORMAT = $debug_format:expr,\n                    $($tokens:tt)*) => (\n         newtype_index!(\n             @derives      [$($derives,)*]\n-            @type         [$type]\n             @pub          [$($pub)*]\n+            @type         [$type]\n             @max          [$max]\n             @debug_format [$debug_format]\n                           $($tokens)*);\n     );\n \n     // Assign a user-defined constant\n     (@derives      [$($derives:ident,)*]\n-     @type         [$type:ident]\n      @pub          [$($pub:tt)*]\n+     @type         [$type:ident]\n      @max          [$max:expr]\n      @debug_format [$debug_format:expr]\n                    $(#[doc = $doc:expr])*\n@@ -311,8 +316,8 @@ macro_rules! newtype_index {\n         pub const $name: $type = $type($constant);\n         newtype_index!(\n             @derives      [$($derives,)*]\n-            @type         [$type]\n             @pub          [$($pub)*]\n+            @type         [$type]\n             @max          [$max]\n             @debug_format [$debug_format]\n                           $($tokens)*);"}]}