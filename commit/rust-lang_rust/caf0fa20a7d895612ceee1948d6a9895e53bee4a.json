{"sha": "caf0fa20a7d895612ceee1948d6a9895e53bee4a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhZjBmYTIwYTdkODk1NjEyY2VlZTE5NDhkNmE5ODk1ZTUzYmVlNGE=", "commit": {"author": {"name": "Igor Aleksanov", "email": "popzxc@yandex.ru", "date": "2020-11-03T07:17:59Z"}, "committer": {"name": "Igor Aleksanov", "email": "popzxc@yandex.ru", "date": "2020-11-03T07:17:59Z"}, "message": "Provide only explicit constructor for RenderContext", "tree": {"sha": "f697771a9c97b1f8f7099b886c25bb7b8eebd7dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f697771a9c97b1f8f7099b886c25bb7b8eebd7dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/caf0fa20a7d895612ceee1948d6a9895e53bee4a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/caf0fa20a7d895612ceee1948d6a9895e53bee4a", "html_url": "https://github.com/rust-lang/rust/commit/caf0fa20a7d895612ceee1948d6a9895e53bee4a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/caf0fa20a7d895612ceee1948d6a9895e53bee4a/comments", "author": {"login": "popzxc", "id": 12111581, "node_id": "MDQ6VXNlcjEyMTExNTgx", "avatar_url": "https://avatars.githubusercontent.com/u/12111581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/popzxc", "html_url": "https://github.com/popzxc", "followers_url": "https://api.github.com/users/popzxc/followers", "following_url": "https://api.github.com/users/popzxc/following{/other_user}", "gists_url": "https://api.github.com/users/popzxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/popzxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/popzxc/subscriptions", "organizations_url": "https://api.github.com/users/popzxc/orgs", "repos_url": "https://api.github.com/users/popzxc/repos", "events_url": "https://api.github.com/users/popzxc/events{/privacy}", "received_events_url": "https://api.github.com/users/popzxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "popzxc", "id": 12111581, "node_id": "MDQ6VXNlcjEyMTExNTgx", "avatar_url": "https://avatars.githubusercontent.com/u/12111581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/popzxc", "html_url": "https://github.com/popzxc", "followers_url": "https://api.github.com/users/popzxc/followers", "following_url": "https://api.github.com/users/popzxc/following{/other_user}", "gists_url": "https://api.github.com/users/popzxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/popzxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/popzxc/subscriptions", "organizations_url": "https://api.github.com/users/popzxc/orgs", "repos_url": "https://api.github.com/users/popzxc/repos", "events_url": "https://api.github.com/users/popzxc/events{/privacy}", "received_events_url": "https://api.github.com/users/popzxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a214e15d38c7d97243e23e5e26fee5f4e26bb50", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a214e15d38c7d97243e23e5e26fee5f4e26bb50", "html_url": "https://github.com/rust-lang/rust/commit/2a214e15d38c7d97243e23e5e26fee5f4e26bb50"}], "stats": {"total": 30, "additions": 14, "deletions": 16}, "files": [{"sha": "d59f5ca05e5d65ca3b339658958c99054593ee91", "filename": "crates/completion/src/completions.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/caf0fa20a7d895612ceee1948d6a9895e53bee4a/crates%2Fcompletion%2Fsrc%2Fcompletions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caf0fa20a7d895612ceee1948d6a9895e53bee4a/crates%2Fcompletion%2Fsrc%2Fcompletions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions.rs?ref=caf0fa20a7d895612ceee1948d6a9895e53bee4a", "patch": "@@ -52,12 +52,12 @@ impl Completions {\n     }\n \n     pub(crate) fn add_field(&mut self, ctx: &CompletionContext, field: hir::Field, ty: &Type) {\n-        let item = Render::new(ctx.into()).add_field(field, ty);\n+        let item = Render::new(RenderContext::new(ctx)).add_field(field, ty);\n         self.add(item);\n     }\n \n     pub(crate) fn add_tuple_field(&mut self, ctx: &CompletionContext, field: usize, ty: &Type) {\n-        let item = Render::new(ctx.into()).add_tuple_field(field, ty);\n+        let item = Render::new(RenderContext::new(ctx)).add_tuple_field(field, ty);\n         self.add(item);\n     }\n \n@@ -67,7 +67,9 @@ impl Completions {\n         local_name: String,\n         resolution: &ScopeDef,\n     ) {\n-        if let Some(item) = Render::new(ctx.into()).render_resolution(local_name, resolution) {\n+        if let Some(item) =\n+            Render::new(RenderContext::new(ctx)).render_resolution(local_name, resolution)\n+        {\n             self.add(item);\n         }\n     }\n@@ -82,7 +84,7 @@ impl Completions {\n             Some(it) => it,\n             None => return,\n         };\n-        if let Some(item) = MacroRender::new(ctx.into(), name, macro_).render() {\n+        if let Some(item) = MacroRender::new(RenderContext::new(ctx), name, macro_).render() {\n             self.add(item);\n         }\n     }\n@@ -93,18 +95,18 @@ impl Completions {\n         func: hir::Function,\n         local_name: Option<String>,\n     ) {\n-        let item = FunctionRender::new(ctx.into(), local_name, func).render();\n+        let item = FunctionRender::new(RenderContext::new(ctx), local_name, func).render();\n         self.add(item)\n     }\n \n     pub(crate) fn add_const(&mut self, ctx: &CompletionContext, constant: hir::Const) {\n-        if let Some(item) = ConstRender::new(ctx.into(), constant).render() {\n+        if let Some(item) = ConstRender::new(RenderContext::new(ctx), constant).render() {\n             self.add(item);\n         }\n     }\n \n     pub(crate) fn add_type_alias(&mut self, ctx: &CompletionContext, type_alias: hir::TypeAlias) {\n-        if let Some(item) = TypeAliasRender::new(ctx.into(), type_alias).render() {\n+        if let Some(item) = TypeAliasRender::new(RenderContext::new(ctx), type_alias).render() {\n             self.add(item)\n         }\n     }\n@@ -115,7 +117,8 @@ impl Completions {\n         variant: hir::EnumVariant,\n         path: ModPath,\n     ) {\n-        let item = EnumVariantRender::new(ctx.into(), None, variant, Some(path)).render();\n+        let item =\n+            EnumVariantRender::new(RenderContext::new(ctx), None, variant, Some(path)).render();\n         self.add(item);\n     }\n \n@@ -125,7 +128,8 @@ impl Completions {\n         variant: hir::EnumVariant,\n         local_name: Option<String>,\n     ) {\n-        let item = EnumVariantRender::new(ctx.into(), local_name, variant, None).render();\n+        let item =\n+            EnumVariantRender::new(RenderContext::new(ctx), local_name, variant, None).render();\n         self.add(item);\n     }\n }"}, {"sha": "dfba817343496697a48e4df5e20b045d2a399d5a", "filename": "crates/completion/src/render.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/caf0fa20a7d895612ceee1948d6a9895e53bee4a/crates%2Fcompletion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caf0fa20a7d895612ceee1948d6a9895e53bee4a/crates%2Fcompletion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Frender.rs?ref=caf0fa20a7d895612ceee1948d6a9895e53bee4a", "patch": "@@ -36,7 +36,7 @@ pub(crate) struct RenderContext<'a> {\n }\n \n impl<'a> RenderContext<'a> {\n-    fn new(completion: &'a CompletionContext<'a>) -> RenderContext<'a> {\n+    pub(crate) fn new(completion: &'a CompletionContext<'a>) -> RenderContext<'a> {\n         RenderContext { completion }\n     }\n \n@@ -74,12 +74,6 @@ impl<'a> RenderContext<'a> {\n     }\n }\n \n-impl<'a> From<&'a CompletionContext<'a>> for RenderContext<'a> {\n-    fn from(ctx: &'a CompletionContext<'a>) -> RenderContext<'a> {\n-        RenderContext::new(ctx)\n-    }\n-}\n-\n impl<'a> Render<'a> {\n     pub(crate) fn new(ctx: RenderContext<'a>) -> Render<'a> {\n         Render { ctx }"}]}