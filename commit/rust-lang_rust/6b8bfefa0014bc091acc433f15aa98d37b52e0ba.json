{"sha": "6b8bfefa0014bc091acc433f15aa98d37b52e0ba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiOGJmZWZhMDAxNGJjMDkxYWNjNDMzZjE1YWE5OGQzN2I1MmUwYmE=", "commit": {"author": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2019-11-09T12:01:47Z"}, "committer": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2019-11-15T16:42:08Z"}, "message": "Add `IntRange::to_pat` and use it instead of custom `display()`", "tree": {"sha": "06c1b4ac6957145605c2b120e7785df3c38368f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06c1b4ac6957145605c2b120e7785df3c38368f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b8bfefa0014bc091acc433f15aa98d37b52e0ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b8bfefa0014bc091acc433f15aa98d37b52e0ba", "html_url": "https://github.com/rust-lang/rust/commit/6b8bfefa0014bc091acc433f15aa98d37b52e0ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b8bfefa0014bc091acc433f15aa98d37b52e0ba/comments", "author": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4232816be9d9075e139bd372ab80d17301b6ada7", "url": "https://api.github.com/repos/rust-lang/rust/commits/4232816be9d9075e139bd372ab80d17301b6ada7", "html_url": "https://github.com/rust-lang/rust/commit/4232816be9d9075e139bd372ab80d17301b6ada7"}], "stats": {"total": 31, "additions": 10, "deletions": 21}, "files": [{"sha": "c59f053f59de9ee601d82b31820682cc02002185", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 10, "deletions": 21, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/6b8bfefa0014bc091acc433f15aa98d37b52e0ba/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b8bfefa0014bc091acc433f15aa98d37b52e0ba/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=6b8bfefa0014bc091acc433f15aa98d37b52e0ba", "patch": "@@ -956,8 +956,7 @@ impl<'tcx> Constructor<'tcx> {\n                 end,\n             }),\n             IntRange(range) => {\n-                // TODO: do it more directly\n-                return range.clone().into_ctor(cx.tcx).apply(cx, ty, None.into_iter());\n+                return range.to_pat(cx.tcx);\n             }\n             NonExhaustive => PatKind::Wild,\n         };\n@@ -1398,19 +1397,6 @@ impl<'tcx> IntRange<'tcx> {\n         }\n     }\n \n-    /// Converts an `IntRange` to a `ConstantValue` or inclusive `ConstantRange`.\n-    /// TODO: Deprecated\n-    fn into_ctor(self, tcx: TyCtxt<'tcx>) -> Constructor<'tcx> {\n-        let bias = IntRange::signed_bias(tcx, self.ty);\n-        let (lo, hi) = self.range.into_inner();\n-        if lo == hi {\n-            let ty = ty::ParamEnv::empty().and(self.ty);\n-            ConstantValue(ty::Const::from_bits(tcx, lo ^ bias, ty), self.span)\n-        } else {\n-            ConstantRange(lo ^ bias, hi ^ bias, self.ty, RangeEnd::Included, self.span)\n-        }\n-    }\n-\n     /// Returns a collection of ranges that spans the values covered by `ranges`, subtracted\n     /// by the values covered by `self`: i.e., `ranges \\ self` (in set notation).\n     fn subtract_from(self, ranges: Vec<IntRange<'tcx>>) -> Vec<IntRange<'tcx>> {\n@@ -1474,7 +1460,7 @@ impl<'tcx> IntRange<'tcx> {\n         (lo == other_hi || hi == other_lo)\n     }\n \n-    fn display(&self, tcx: TyCtxt<'tcx>) -> String {\n+    fn to_pat(&self, tcx: TyCtxt<'tcx>) -> Pat<'tcx> {\n         let (lo, hi) = (self.range.start(), self.range.end());\n \n         let bias = IntRange::signed_bias(tcx, self.ty);\n@@ -1484,11 +1470,14 @@ impl<'tcx> IntRange<'tcx> {\n         let lo_const = ty::Const::from_bits(tcx, lo, ty);\n         let hi_const = ty::Const::from_bits(tcx, hi, ty);\n \n-        if lo == hi {\n-            format!(\"{}\", lo_const)\n+        let kind = if lo == hi {\n+            PatKind::Constant { value: lo_const }\n         } else {\n-            format!(\"{}{}{}\", lo_const, RangeEnd::Included, hi_const)\n-        }\n+            PatKind::Range(PatRange { lo: lo_const, hi: hi_const, end: RangeEnd::Included })\n+        };\n+\n+        // This is a brand new pattern, so we don't reuse `self.span`.\n+        Pat { ty: self.ty, span: DUMMY_SP, kind: Box::new(kind) }\n     }\n }\n \n@@ -2137,7 +2126,7 @@ fn lint_overlapping_patterns(\n                 int_range.span,\n                 &format!(\n                     \"this range overlaps on `{}`\",\n-                    IntRange { range: int_range.range, ty, span: DUMMY_SP }.display(tcx),\n+                    IntRange { range: int_range.range, ty, span: DUMMY_SP }.to_pat(tcx),\n                 ),\n             );\n         }"}]}