{"sha": "a9c2378b7dc365189178130d3d3b701aec3809aa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5YzIzNzhiN2RjMzY1MTg5MTc4MTMwZDNkM2I3MDFhZWMzODA5YWE=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-03-21T12:22:26Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-03-21T12:22:26Z"}, "message": "fix type of const params in associated types.", "tree": {"sha": "944bfa21ee0e5362d4f399c2329490d48dbe6496", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/944bfa21ee0e5362d4f399c2329490d48dbe6496"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9c2378b7dc365189178130d3d3b701aec3809aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9c2378b7dc365189178130d3d3b701aec3809aa", "html_url": "https://github.com/rust-lang/rust/commit/a9c2378b7dc365189178130d3d3b701aec3809aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9c2378b7dc365189178130d3d3b701aec3809aa/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4c675c476c18b1a11041193f2f59d695b126bc8", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4c675c476c18b1a11041193f2f59d695b126bc8", "html_url": "https://github.com/rust-lang/rust/commit/f4c675c476c18b1a11041193f2f59d695b126bc8"}], "stats": {"total": 58, "additions": 54, "deletions": 4}, "files": [{"sha": "45587e5e90fec8f14bc4b6afa0fef764901d8d03", "filename": "src/librustc_typeck/collect/type_of.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a9c2378b7dc365189178130d3d3b701aec3809aa/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9c2378b7dc365189178130d3d3b701aec3809aa/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs?ref=a9c2378b7dc365189178130d3d3b701aec3809aa", "patch": "@@ -256,15 +256,18 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                         // figure out which generic parameter it corresponds to and return\n                         // the relevant type.\n                         let generics = match path.res {\n-                            Res::Def(DefKind::Ctor(..), def_id) => {\n+                            Res::Def(DefKind::Ctor(..), def_id)\n+                            | Res::Def(DefKind::AssocTy, def_id) => {\n                                 tcx.generics_of(tcx.parent(def_id).unwrap())\n                             }\n                             Res::Def(_, def_id) => tcx.generics_of(def_id),\n-                            Res::Err => return tcx.types.err,\n                             res => {\n                                 tcx.sess.delay_span_bug(\n                                     DUMMY_SP,\n-                                    &format!(\"unexpected const parent path def {:?}\", res,),\n+                                    &format!(\n+                                        \"unexpected const parent path def, parent: {:?}, def: {:?}\",\n+                                        parent_node, res\n+                                    ),\n                                 );\n                                 return tcx.types.err;\n                             }\n@@ -284,7 +287,16 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                             .map(|param| tcx.type_of(param.def_id))\n                             // This is no generic parameter associated with the arg. This is\n                             // probably from an extra arg where one is not needed.\n-                            .unwrap_or(tcx.types.err)\n+                            .unwrap_or_else(|| {\n+                                tcx.sess.delay_span_bug(\n+                                    DUMMY_SP,\n+                                    &format!(\n+                                        \"missing generic parameter for `AnonConst`, parent {:?}\",\n+                                        parent_node\n+                                    ),\n+                                );\n+                                tcx.types.err\n+                            })\n                     } else {\n                         tcx.sess.delay_span_bug(\n                             DUMMY_SP,"}, {"sha": "461fe837dac44a105c8d55ab3cde18cbc9a9f660", "filename": "src/test/ui/const-generics/issues/issue-66906.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a9c2378b7dc365189178130d3d3b701aec3809aa/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66906.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9c2378b7dc365189178130d3d3b701aec3809aa/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66906.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66906.rs?ref=a9c2378b7dc365189178130d3d3b701aec3809aa", "patch": "@@ -0,0 +1,12 @@\n+// check-pass\n+\n+#![feature(const_generics)]\n+//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+\n+pub struct Tuple;\n+\n+pub trait Trait<const I: usize> {\n+    type Input: From<<Self as Trait<I>>::Input>;\n+}\n+\n+fn main() {}"}, {"sha": "f8710b67b687e153308643a4875012731a8d168a", "filename": "src/test/ui/const-generics/issues/issue-66906.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a9c2378b7dc365189178130d3d3b701aec3809aa/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66906.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9c2378b7dc365189178130d3d3b701aec3809aa/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66906.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66906.stderr?ref=a9c2378b7dc365189178130d3d3b701aec3809aa", "patch": "@@ -0,0 +1,8 @@\n+warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+  --> $DIR/issue-66906.rs:3:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+"}, {"sha": "58fac8e05114a68c8cb095f48a1cbdbbd02cdc26", "filename": "src/test/ui/const-generics/issues/issue-70167.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a9c2378b7dc365189178130d3d3b701aec3809aa/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70167.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9c2378b7dc365189178130d3d3b701aec3809aa/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70167.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70167.rs?ref=a9c2378b7dc365189178130d3d3b701aec3809aa", "patch": "@@ -0,0 +1,10 @@\n+// check-pass\n+\n+#![feature(const_generics)]\n+//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+\n+pub trait Trait<const N: usize>: From<<Self as Trait<N>>::Item> {\n+  type Item;\n+}\n+\n+fn main() {}"}, {"sha": "4ba3c204097dcaf05595b7b6eab3edfef6aeaf77", "filename": "src/test/ui/const-generics/issues/issue-70167.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a9c2378b7dc365189178130d3d3b701aec3809aa/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70167.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9c2378b7dc365189178130d3d3b701aec3809aa/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70167.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70167.stderr?ref=a9c2378b7dc365189178130d3d3b701aec3809aa", "patch": "@@ -0,0 +1,8 @@\n+warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+  --> $DIR/issue-70167.rs:3:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+"}]}