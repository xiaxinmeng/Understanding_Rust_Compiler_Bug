{"sha": "1fe87df104aac58f45075e2b60ac9a085d3571f8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmZTg3ZGYxMDRhYWM1OGY0NTA3NWUyYjYwYWM5YTA4NWQzNTcxZjg=", "commit": {"author": {"name": "Hirokazu Hata", "email": "h.hata.ai.t@gmail.com", "date": "2019-02-23T08:02:57Z"}, "committer": {"name": "Hirokazu Hata", "email": "h.hata.ai.t@gmail.com", "date": "2019-02-23T08:02:57Z"}, "message": "Fix tidy check errors", "tree": {"sha": "91ecce438403ae1f02ad2ffcb085860e78e6d151", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91ecce438403ae1f02ad2ffcb085860e78e6d151"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1fe87df104aac58f45075e2b60ac9a085d3571f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1fe87df104aac58f45075e2b60ac9a085d3571f8", "html_url": "https://github.com/rust-lang/rust/commit/1fe87df104aac58f45075e2b60ac9a085d3571f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1fe87df104aac58f45075e2b60ac9a085d3571f8/comments", "author": {"login": "h-michael", "id": 4556097, "node_id": "MDQ6VXNlcjQ1NTYwOTc=", "avatar_url": "https://avatars.githubusercontent.com/u/4556097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/h-michael", "html_url": "https://github.com/h-michael", "followers_url": "https://api.github.com/users/h-michael/followers", "following_url": "https://api.github.com/users/h-michael/following{/other_user}", "gists_url": "https://api.github.com/users/h-michael/gists{/gist_id}", "starred_url": "https://api.github.com/users/h-michael/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/h-michael/subscriptions", "organizations_url": "https://api.github.com/users/h-michael/orgs", "repos_url": "https://api.github.com/users/h-michael/repos", "events_url": "https://api.github.com/users/h-michael/events{/privacy}", "received_events_url": "https://api.github.com/users/h-michael/received_events", "type": "User", "site_admin": false}, "committer": {"login": "h-michael", "id": 4556097, "node_id": "MDQ6VXNlcjQ1NTYwOTc=", "avatar_url": "https://avatars.githubusercontent.com/u/4556097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/h-michael", "html_url": "https://github.com/h-michael", "followers_url": "https://api.github.com/users/h-michael/followers", "following_url": "https://api.github.com/users/h-michael/following{/other_user}", "gists_url": "https://api.github.com/users/h-michael/gists{/gist_id}", "starred_url": "https://api.github.com/users/h-michael/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/h-michael/subscriptions", "organizations_url": "https://api.github.com/users/h-michael/orgs", "repos_url": "https://api.github.com/users/h-michael/repos", "events_url": "https://api.github.com/users/h-michael/events{/privacy}", "received_events_url": "https://api.github.com/users/h-michael/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1932d7a52d8cdfdadbf165f2340de45e9e9ef9e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/1932d7a52d8cdfdadbf165f2340de45e9e9ef9e2", "html_url": "https://github.com/rust-lang/rust/commit/1932d7a52d8cdfdadbf165f2340de45e9e9ef9e2"}], "stats": {"total": 55, "additions": 45, "deletions": 10}, "files": [{"sha": "952541bb85f9bc26057626c36a403e7420dbf0cb", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1fe87df104aac58f45075e2b60ac9a085d3571f8/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fe87df104aac58f45075e2b60ac9a085d3571f8/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=1fe87df104aac58f45075e2b60ac9a085d3571f8", "patch": "@@ -220,7 +220,10 @@ impl<'a, 'tcx, 'rcx> AutoTraitFinder<'a, 'tcx, 'rcx> {\n         }\n     }\n \n-    fn get_lifetime(&self, region: Region<'_>, names_map: &FxHashMap<String, Lifetime>) -> Lifetime {\n+    fn get_lifetime(\n+        &self, region: Region<'_>,\n+        names_map: &FxHashMap<String, Lifetime>\n+    ) -> Lifetime {\n         self.region_name(region)\n             .map(|name| {\n                 names_map.get(&name).unwrap_or_else(|| {"}, {"sha": "9664cae5a68c4a4afaddf3191fd627957726d648", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1fe87df104aac58f45075e2b60ac9a085d3571f8/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fe87df104aac58f45075e2b60ac9a085d3571f8/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=1fe87df104aac58f45075e2b60ac9a085d3571f8", "patch": "@@ -35,7 +35,12 @@ use super::Clean;\n ///\n /// The returned value is `None` if the definition could not be inlined,\n /// and `Some` of a vector of items if it was successfully expanded.\n-pub fn try_inline(cx: &DocContext<'_, '_, '_>, def: Def, name: ast::Name, visited: &mut FxHashSet<DefId>)\n+pub fn try_inline(\n+    cx: &DocContext<'_, '_, '_>,\n+    def: Def,\n+    name: ast::Name,\n+    visited: &mut FxHashSet<DefId>\n+)\n                   -> Option<Vec<clean::Item>> {\n     let did = if let Some(did) = def.opt_def_id() {\n         did\n@@ -387,7 +392,11 @@ pub fn build_impl(cx: &DocContext<'_, '_, '_>, did: DefId, ret: &mut Vec<clean::\n     });\n }\n \n-fn build_module(cx: &DocContext<'_, '_, '_>, did: DefId, visited: &mut FxHashSet<DefId>) -> clean::Module {\n+fn build_module(\n+    cx: &DocContext<'_, '_, '_>,\n+    did: DefId,\n+    visited: &mut FxHashSet<DefId>\n+) -> clean::Module {\n     let mut items = Vec::new();\n     fill_in(cx, did, &mut items, visited);\n     return clean::Module {"}, {"sha": "172bd9180622f19e70ffd557ca45eef95c7053d5", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 23, "deletions": 5, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/1fe87df104aac58f45075e2b60ac9a085d3571f8/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fe87df104aac58f45075e2b60ac9a085d3571f8/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=1fe87df104aac58f45075e2b60ac9a085d3571f8", "patch": "@@ -3523,23 +3523,37 @@ pub struct Impl {\n     pub blanket_impl: Option<Type>,\n }\n \n-pub fn get_auto_traits_with_node_id(cx: &DocContext<'_, '_, '_>, id: ast::NodeId, name: String) -> Vec<Item> {\n+pub fn get_auto_traits_with_node_id(\n+    cx: &DocContext<'_, '_, '_>,\n+    id: ast::NodeId,\n+    name: String\n+) -> Vec<Item> {\n     let finder = AutoTraitFinder::new(cx);\n     finder.get_with_node_id(id, name)\n }\n \n-pub fn get_auto_traits_with_def_id(cx: &DocContext<'_, '_, '_>, id: DefId) -> Vec<Item> {\n+pub fn get_auto_traits_with_def_id(\n+    cx: &DocContext<'_, '_, '_>,\n+    id: DefId\n+) -> Vec<Item> {\n     let finder = AutoTraitFinder::new(cx);\n \n     finder.get_with_def_id(id)\n }\n \n-pub fn get_blanket_impls_with_node_id(cx: &DocContext<'_, '_, '_>, id: ast::NodeId, name: String) -> Vec<Item> {\n+pub fn get_blanket_impls_with_node_id(\n+    cx: &DocContext<'_, '_, '_>,\n+    id: ast::NodeId,\n+    name: String\n+) -> Vec<Item> {\n     let finder = BlanketImplFinder::new(cx);\n     finder.get_with_node_id(id, name)\n }\n \n-pub fn get_blanket_impls_with_def_id(cx: &DocContext<'_, '_, '_>, id: DefId) -> Vec<Item> {\n+pub fn get_blanket_impls_with_def_id(\n+    cx: &DocContext<'_, '_, '_>,\n+    id: DefId\n+) -> Vec<Item> {\n     let finder = BlanketImplFinder::new(cx);\n \n     finder.get_with_def_id(id)\n@@ -4095,7 +4109,11 @@ impl Clean<TypeBinding> for hir::TypeBinding {\n     }\n }\n \n-pub fn def_id_to_path(cx: &DocContext<'_, '_, '_>, did: DefId, name: Option<String>) -> Vec<String> {\n+pub fn def_id_to_path(\n+    cx: &DocContext<'_, '_, '_>,\n+    did: DefId,\n+    name: Option<String>\n+) -> Vec<String> {\n     let crate_name = name.unwrap_or_else(|| cx.tcx.crate_name(did.krate).to_string());\n     let relative = cx.tcx.def_path(did).data.into_iter().filter_map(|elem| {\n         // extern blocks have an empty name"}, {"sha": "5109e775ebf8113b742187e9c40fba27fbf96ee6", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1fe87df104aac58f45075e2b60ac9a085d3571f8/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fe87df104aac58f45075e2b60ac9a085d3571f8/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=1fe87df104aac58f45075e2b60ac9a085d3571f8", "patch": "@@ -2541,8 +2541,13 @@ fn render_markdown(w: &mut fmt::Formatter<'_>,\n            cx.codes))\n }\n \n-fn document_short(w: &mut fmt::Formatter<'_>, cx: &Context, item: &clean::Item, link: AssocItemLink<'_>,\n-                  prefix: &str, is_hidden: bool) -> fmt::Result {\n+fn document_short(\n+    w: &mut fmt::Formatter<'_>,\n+    cx: &Context,\n+    item: &clean::Item,\n+    link: AssocItemLink<'_>,\n+    prefix: &str, is_hidden: bool\n+) -> fmt::Result {\n     if let Some(s) = item.doc_value() {\n         let markdown = if s.contains('\\n') {\n             format!(\"{} [Read more]({})\","}]}