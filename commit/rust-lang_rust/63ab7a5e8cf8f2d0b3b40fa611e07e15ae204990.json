{"sha": "63ab7a5e8cf8f2d0b3b40fa611e07e15ae204990", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzYWI3YTVlOGNmOGYyZDBiM2I0MGZhNjExZTA3ZTE1YWUyMDQ5OTA=", "commit": {"author": {"name": "Areredify", "email": "misha-babenko@yandex.ru", "date": "2020-01-30T15:10:19Z"}, "committer": {"name": "Areredify", "email": "misha-babenko@yandex.ru", "date": "2020-01-30T15:46:22Z"}, "message": "lint all guard types, not just lock functions", "tree": {"sha": "25ff3ef5e282cbeec2a8290462d9b26afb0fe24d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25ff3ef5e282cbeec2a8290462d9b26afb0fe24d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63ab7a5e8cf8f2d0b3b40fa611e07e15ae204990", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63ab7a5e8cf8f2d0b3b40fa611e07e15ae204990", "html_url": "https://github.com/rust-lang/rust/commit/63ab7a5e8cf8f2d0b3b40fa611e07e15ae204990", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63ab7a5e8cf8f2d0b3b40fa611e07e15ae204990/comments", "author": {"login": "basil-cow", "id": 25266609, "node_id": "MDQ6VXNlcjI1MjY2NjA5", "avatar_url": "https://avatars.githubusercontent.com/u/25266609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/basil-cow", "html_url": "https://github.com/basil-cow", "followers_url": "https://api.github.com/users/basil-cow/followers", "following_url": "https://api.github.com/users/basil-cow/following{/other_user}", "gists_url": "https://api.github.com/users/basil-cow/gists{/gist_id}", "starred_url": "https://api.github.com/users/basil-cow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/basil-cow/subscriptions", "organizations_url": "https://api.github.com/users/basil-cow/orgs", "repos_url": "https://api.github.com/users/basil-cow/repos", "events_url": "https://api.github.com/users/basil-cow/events{/privacy}", "received_events_url": "https://api.github.com/users/basil-cow/received_events", "type": "User", "site_admin": false}, "committer": {"login": "basil-cow", "id": 25266609, "node_id": "MDQ6VXNlcjI1MjY2NjA5", "avatar_url": "https://avatars.githubusercontent.com/u/25266609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/basil-cow", "html_url": "https://github.com/basil-cow", "followers_url": "https://api.github.com/users/basil-cow/followers", "following_url": "https://api.github.com/users/basil-cow/following{/other_user}", "gists_url": "https://api.github.com/users/basil-cow/gists{/gist_id}", "starred_url": "https://api.github.com/users/basil-cow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/basil-cow/subscriptions", "organizations_url": "https://api.github.com/users/basil-cow/orgs", "repos_url": "https://api.github.com/users/basil-cow/repos", "events_url": "https://api.github.com/users/basil-cow/events{/privacy}", "received_events_url": "https://api.github.com/users/basil-cow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b88a2b295e51803a74ad8bb852549693815e0c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b88a2b295e51803a74ad8bb852549693815e0c0", "html_url": "https://github.com/rust-lang/rust/commit/9b88a2b295e51803a74ad8bb852549693815e0c0"}], "stats": {"total": 117, "additions": 72, "deletions": 45}, "files": [{"sha": "c2a404ebee7cc0830296946a00f52b6ee3149777", "filename": "clippy_lints/src/let_underscore.rs", "status": "modified", "additions": 38, "deletions": 38, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/63ab7a5e8cf8f2d0b3b40fa611e07e15ae204990/clippy_lints%2Fsrc%2Flet_underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63ab7a5e8cf8f2d0b3b40fa611e07e15ae204990/clippy_lints%2Fsrc%2Flet_underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_underscore.rs?ref=63ab7a5e8cf8f2d0b3b40fa611e07e15ae204990", "patch": "@@ -4,7 +4,7 @@ use rustc_hir::*;\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n-use crate::utils::{is_must_use_func_call, is_must_use_ty, match_def_path, paths, span_lint_and_help};\n+use crate::utils::{is_must_use_func_call, is_must_use_ty, match_type, paths, span_lint_and_help};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for `let _ = <expr>`\n@@ -31,12 +31,13 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for `let _ = sync_primitive.lock()`\n+    /// **What it does:** Checks for `let _ = sync_lock`\n     ///\n-    /// **Why is this bad?** This statement locks the synchronization\n-    /// primitive and immediately drops the lock, which is probably\n-    /// not intended. To extend lock lifetime to the end of the scope,\n-    /// use an underscore-prefixed name instead (i.e. _lock).\n+    /// **Why is this bad?** This statement immediately drops the lock instead of\n+    /// extending it's lifetime to the end of the scope, which is often not intended.\n+    /// To extend lock lifetime to the end of the scope, use an underscore-prefixed\n+    /// name instead (i.e. _lock). If you want to explicitly drop the lock,\n+    /// `std::mem::drop` conveys your intention better and is less error-prone.\n     ///\n     /// **Known problems:** None.\n     ///\n@@ -58,7 +59,11 @@ declare_clippy_lint! {\n \n declare_lint_pass!(LetUnderscore => [LET_UNDERSCORE_MUST_USE, LET_UNDERSCORE_LOCK]);\n \n-const LOCK_METHODS_PATHS: [&[&str]; 3] = [&paths::MUTEX_LOCK, &paths::RWLOCK_READ, &paths::RWLOCK_WRITE];\n+const SYNC_GUARD_PATHS: [&[&str]; 3] = [\n+    &paths::MUTEX_GUARD,\n+    &paths::RWLOCK_READ_GUARD,\n+    &paths::RWLOCK_WRITE_GUARD,\n+];\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LetUnderscore {\n     fn check_stmt(&mut self, cx: &LateContext<'_, '_>, stmt: &Stmt<'_>) {\n@@ -71,37 +76,32 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LetUnderscore {\n             if let PatKind::Wild = local.pat.kind;\n             if let Some(ref init) = local.init;\n             then {\n-                if_chain! {\n-                    if let ExprKind::MethodCall(_, _, _) = init.kind;\n-                    let method_did = cx.tables.type_dependent_def_id(init.hir_id).unwrap();\n-                    if LOCK_METHODS_PATHS.iter().any(|path| match_def_path(cx, method_did, path));\n-                    then {\n-                        span_lint_and_help(\n-                            cx,\n-                            LET_UNDERSCORE_LOCK,\n-                            stmt.span,\n-                            \"non-binding let on a synchronization lock\",\n-                            \"consider using an underscore-prefixed named binding\"\n-                        )\n-                    } else {\n-                        if is_must_use_ty(cx, cx.tables.expr_ty(init)) {\n-                            span_lint_and_help(\n-                                cx,\n-                                LET_UNDERSCORE_MUST_USE,\n-                                stmt.span,\n-                                \"non-binding let on an expression with `#[must_use]` type\",\n-                                \"consider explicitly using expression value\"\n-                            )\n-                        } else if is_must_use_func_call(cx, init) {\n-                            span_lint_and_help(\n-                                cx,\n-                                LET_UNDERSCORE_MUST_USE,\n-                                stmt.span,\n-                                \"non-binding let on a result of a `#[must_use]` function\",\n-                                \"consider explicitly using function result\"\n-                            )\n-                        }\n-                    }\n+                let check_ty = |ty| SYNC_GUARD_PATHS.iter().any(|path| match_type(cx, ty, path));\n+                if cx.tables.expr_ty(init).walk().any(check_ty) {\n+                    span_lint_and_help(\n+                        cx,\n+                        LET_UNDERSCORE_LOCK,\n+                        stmt.span,\n+                        \"non-binding let on a synchronization lock\",\n+                        \"consider using an underscore-prefixed named \\\n+                            binding or dropping explicitly with `std::mem::drop`\"\n+                    )\n+                } else if is_must_use_ty(cx, cx.tables.expr_ty(init)) {\n+                    span_lint_and_help(\n+                        cx,\n+                        LET_UNDERSCORE_MUST_USE,\n+                        stmt.span,\n+                        \"non-binding let on an expression with `#[must_use]` type\",\n+                        \"consider explicitly using expression value\"\n+                    )\n+                } else if is_must_use_func_call(cx, init) {\n+                    span_lint_and_help(\n+                        cx,\n+                        LET_UNDERSCORE_MUST_USE,\n+                        stmt.span,\n+                        \"non-binding let on a result of a `#[must_use]` function\",\n+                        \"consider explicitly using function result\"\n+                    )\n                 }\n             }\n         }"}, {"sha": "0af7f946fa9d5238ec4c4a91d3fb25f5973ff548", "filename": "clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/63ab7a5e8cf8f2d0b3b40fa611e07e15ae204990/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63ab7a5e8cf8f2d0b3b40fa611e07e15ae204990/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=63ab7a5e8cf8f2d0b3b40fa611e07e15ae204990", "patch": "@@ -58,7 +58,7 @@ pub const MEM_REPLACE: [&str; 3] = [\"core\", \"mem\", \"replace\"];\n pub const MEM_UNINITIALIZED: [&str; 3] = [\"core\", \"mem\", \"uninitialized\"];\n pub const MEM_ZEROED: [&str; 3] = [\"core\", \"mem\", \"zeroed\"];\n pub const MUTEX: [&str; 4] = [\"std\", \"sync\", \"mutex\", \"Mutex\"];\n-pub const MUTEX_LOCK: [&str; 5] = [\"std\", \"sync\", \"mutex\", \"Mutex\", \"lock\"];\n+pub const MUTEX_GUARD: [&str; 4] = [\"std\", \"sync\", \"mutex\", \"MutexGuard\"];\n pub const OPEN_OPTIONS: [&str; 3] = [\"std\", \"fs\", \"OpenOptions\"];\n pub const OPS_MODULE: [&str; 2] = [\"core\", \"ops\"];\n pub const OPTION: [&str; 3] = [\"core\", \"option\", \"Option\"];\n@@ -101,8 +101,8 @@ pub const REPEAT: [&str; 3] = [\"core\", \"iter\", \"repeat\"];\n pub const RESULT: [&str; 3] = [\"core\", \"result\", \"Result\"];\n pub const RESULT_ERR: [&str; 4] = [\"core\", \"result\", \"Result\", \"Err\"];\n pub const RESULT_OK: [&str; 4] = [\"core\", \"result\", \"Result\", \"Ok\"];\n-pub const RWLOCK_READ: [&str; 5] = [\"std\", \"sync\", \"rwlock\", \"RwLock\", \"read\"];\n-pub const RWLOCK_WRITE: [&str; 5] = [\"std\", \"sync\", \"rwlock\", \"RwLock\", \"write\"];\n+pub const RWLOCK_READ_GUARD: [&str; 4] = [\"std\", \"sync\", \"rwlock\", \"RwLockReadGuard\"];\n+pub const RWLOCK_WRITE_GUARD: [&str; 4] = [\"std\", \"sync\", \"rwlock\", \"RwLockWriteGuard\"];\n pub const SERDE_DE_VISITOR: [&str; 3] = [\"serde\", \"de\", \"Visitor\"];\n pub const SLICE_INTO_VEC: [&str; 4] = [\"alloc\", \"slice\", \"<impl [T]>\", \"into_vec\"];\n pub const SLICE_ITER: [&str; 3] = [\"core\", \"slice\", \"Iter\"];"}, {"sha": "88fb216a74329597eb2c0d2fe29f696b952ca30f", "filename": "tests/ui/let_underscore_lock.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/63ab7a5e8cf8f2d0b3b40fa611e07e15ae204990/tests%2Fui%2Flet_underscore_lock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63ab7a5e8cf8f2d0b3b40fa611e07e15ae204990/tests%2Fui%2Flet_underscore_lock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_underscore_lock.rs?ref=63ab7a5e8cf8f2d0b3b40fa611e07e15ae204990", "patch": "@@ -7,4 +7,7 @@ fn main() {\n     let _ = m.lock();\n     let _ = rw.read();\n     let _ = rw.write();\n+    let _ = m.try_lock();\n+    let _ = rw.try_read();\n+    let _ = rw.try_write();\n }"}, {"sha": "5d5f6059ef13e93b51387b3a2adca96142526727", "filename": "tests/ui/let_underscore_lock.stderr", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/63ab7a5e8cf8f2d0b3b40fa611e07e15ae204990/tests%2Fui%2Flet_underscore_lock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/63ab7a5e8cf8f2d0b3b40fa611e07e15ae204990/tests%2Fui%2Flet_underscore_lock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_underscore_lock.stderr?ref=63ab7a5e8cf8f2d0b3b40fa611e07e15ae204990", "patch": "@@ -5,23 +5,47 @@ LL |     let _ = m.lock();\n    |     ^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::let-underscore-lock` implied by `-D warnings`\n-   = help: consider using an underscore-prefixed named binding\n+   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n \n error: non-binding let on a synchronization lock\n   --> $DIR/let_underscore_lock.rs:8:5\n    |\n LL |     let _ = rw.read();\n    |     ^^^^^^^^^^^^^^^^^^\n    |\n-   = help: consider using an underscore-prefixed named binding\n+   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n \n error: non-binding let on a synchronization lock\n   --> $DIR/let_underscore_lock.rs:9:5\n    |\n LL |     let _ = rw.write();\n    |     ^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: consider using an underscore-prefixed named binding\n+   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n \n-error: aborting due to 3 previous errors\n+error: non-binding let on a synchronization lock\n+  --> $DIR/let_underscore_lock.rs:10:5\n+   |\n+LL |     let _ = m.try_lock();\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n+\n+error: non-binding let on a synchronization lock\n+  --> $DIR/let_underscore_lock.rs:11:5\n+   |\n+LL |     let _ = rw.try_read();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n+\n+error: non-binding let on a synchronization lock\n+  --> $DIR/let_underscore_lock.rs:12:5\n+   |\n+LL |     let _ = rw.try_write();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n+\n+error: aborting due to 6 previous errors\n "}]}