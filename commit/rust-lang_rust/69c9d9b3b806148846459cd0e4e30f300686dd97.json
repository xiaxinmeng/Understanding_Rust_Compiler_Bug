{"sha": "69c9d9b3b806148846459cd0e4e30f300686dd97", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5YzlkOWIzYjgwNjE0ODg0NjQ1OWNkMGU0ZTMwZjMwMDY4NmRkOTc=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-03-23T20:45:21Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-03-23T23:10:45Z"}, "message": "ignore reads of tracked state when there is no current task\n\nI realized that, even in the current system, such reads can't really do\nany harm. Because they are not part of a task, they will occur no matter\nwhat (only tasks can be skipped). If you leak the data you read into a\ntask, that is bad, but that is equally bad if you are in a task.\n\n*Writes* to tracked state, on the other hand, should never occur except\nfrom within a task (and the task then records what things you read to\ncompute it).\n\nOnce we complete the shift to on-demand, these properties will hold by\nconstruction (because the on-demand struct enforces stateless tasks\nwhere leaks are impossible -- except by having shared mutable state in\nthe tcx).", "tree": {"sha": "6169f432849f18c716bc5f04649261c17b39c6fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6169f432849f18c716bc5f04649261c17b39c6fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69c9d9b3b806148846459cd0e4e30f300686dd97", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69c9d9b3b806148846459cd0e4e30f300686dd97", "html_url": "https://github.com/rust-lang/rust/commit/69c9d9b3b806148846459cd0e4e30f300686dd97", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69c9d9b3b806148846459cd0e4e30f300686dd97/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3a5ff98eba2f81ec76b18cce50f113f59181cce", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3a5ff98eba2f81ec76b18cce50f113f59181cce", "html_url": "https://github.com/rust-lang/rust/commit/a3a5ff98eba2f81ec76b18cce50f113f59181cce"}], "stats": {"total": 22, "additions": 16, "deletions": 6}, "files": [{"sha": "5dbabcc923048482f8f06884ac3ec25c1ae7e82c", "filename": "src/librustc/dep_graph/edges.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/69c9d9b3b806148846459cd0e4e30f300686dd97/src%2Flibrustc%2Fdep_graph%2Fedges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69c9d9b3b806148846459cd0e4e30f300686dd97/src%2Flibrustc%2Fdep_graph%2Fedges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fedges.rs?ref=69c9d9b3b806148846459cd0e4e30f300686dd97", "patch": "@@ -101,11 +101,15 @@ impl<D: Clone + Debug + Eq + Hash> DepGraphEdges<D> {\n     }\n \n     /// Indicates that the current task `C` reads `v` by adding an\n-    /// edge from `v` to `C`. If there is no current task, panics. If\n-    /// you want to suppress this edge, use `ignore`.\n+    /// edge from `v` to `C`. If there is no current task, has no\n+    /// effect. Note that *reading* from tracked state is harmless if\n+    /// you are not in a task; what is bad is *writing* to tracked\n+    /// state (and leaking data that you read into a tracked task).\n     pub fn read(&mut self, v: DepNode<D>) {\n-        let source = self.make_node(v);\n-        self.add_edge_from_current_node(|current| (source, current))\n+        if self.current_node().is_some() {\n+            let source = self.make_node(v);\n+            self.add_edge_from_current_node(|current| (source, current))\n+        }\n     }\n \n     /// Indicates that the current task `C` writes `v` by adding an"}, {"sha": "bedb6ff2771f064e468b5789a0ffb0a04b33fc85", "filename": "src/librustc/dep_graph/shadow.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/69c9d9b3b806148846459cd0e4e30f300686dd97/src%2Flibrustc%2Fdep_graph%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69c9d9b3b806148846459cd0e4e30f300686dd97/src%2Flibrustc%2Fdep_graph%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fshadow.rs?ref=69c9d9b3b806148846459cd0e4e30f300686dd97", "patch": "@@ -80,7 +80,13 @@ impl ShadowGraph {\n \n             let mut stack = self.stack.borrow_mut();\n             match *message {\n-                DepMessage::Read(ref n) => self.check_edge(Some(Some(n)), top(&stack)),\n+                // It is ok to READ shared state outside of a\n+                // task. That can't do any harm (at least, the only\n+                // way it can do harm is by leaking that data into a\n+                // query or task, which would be a problem\n+                // anyway). What would be bad is WRITING to that\n+                // state.\n+                DepMessage::Read(_) => { }\n                 DepMessage::Write(ref n) => self.check_edge(top(&stack), Some(Some(n))),\n                 DepMessage::PushTask(ref n) => stack.push(Some(n.clone())),\n                 DepMessage::PushIgnore => stack.push(None),\n@@ -116,7 +122,7 @@ impl ShadowGraph {\n             (None, None) => unreachable!(),\n \n             // nothing on top of the stack\n-            (None, Some(n)) | (Some(n), None) => bug!(\"read/write of {:?} but no current task\", n),\n+            (None, Some(n)) | (Some(n), None) => bug!(\"write of {:?} but no current task\", n),\n \n             // this corresponds to an Ignore being top of the stack\n             (Some(None), _) | (_, Some(None)) => (),"}]}