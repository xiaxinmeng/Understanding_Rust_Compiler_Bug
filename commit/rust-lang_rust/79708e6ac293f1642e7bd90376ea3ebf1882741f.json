{"sha": "79708e6ac293f1642e7bd90376ea3ebf1882741f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5NzA4ZTZhYzI5M2YxNjQyZTdiZDkwMzc2ZWEzZWJmMTg4Mjc0MWY=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-21T17:21:06Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-21T17:21:06Z"}, "message": "rollup merge of #21462: ahmedcharles/remove-ratchet\n\nConflicts:\n\tsrc/libtest/lib.rs", "tree": {"sha": "156ba3aad6f04097cf8b06985538afb3e06f35c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/156ba3aad6f04097cf8b06985538afb3e06f35c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/79708e6ac293f1642e7bd90376ea3ebf1882741f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/79708e6ac293f1642e7bd90376ea3ebf1882741f", "html_url": "https://github.com/rust-lang/rust/commit/79708e6ac293f1642e7bd90376ea3ebf1882741f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/79708e6ac293f1642e7bd90376ea3ebf1882741f/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87c3ee861ec488827044e07d5d0cd7c8508c681f", "url": "https://api.github.com/repos/rust-lang/rust/commits/87c3ee861ec488827044e07d5d0cd7c8508c681f", "html_url": "https://github.com/rust-lang/rust/commit/87c3ee861ec488827044e07d5d0cd7c8508c681f"}, {"sha": "eb0091352d6f25c36222b3994f77c7695814956f", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb0091352d6f25c36222b3994f77c7695814956f", "html_url": "https://github.com/rust-lang/rust/commit/eb0091352d6f25c36222b3994f77c7695814956f"}], "stats": {"total": 249, "additions": 3, "deletions": 246}, "files": [{"sha": "98e031f863e859912a3c5508fd18a2e63b7139b7", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 3, "deletions": 246, "changes": 249, "blob_url": "https://github.com/rust-lang/rust/blob/79708e6ac293f1642e7bd90376ea3ebf1882741f/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79708e6ac293f1642e7bd90376ea3ebf1882741f/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=79708e6ac293f1642e7bd90376ea3ebf1882741f", "patch": "@@ -44,7 +44,6 @@ extern crate \"serialize\" as rustc_serialize;\n extern crate term;\n \n pub use self::TestFn::*;\n-pub use self::MetricChange::*;\n pub use self::ColorConfig::*;\n pub use self::TestResult::*;\n pub use self::TestName::*;\n@@ -62,7 +61,6 @@ use term::color::{Color, RED, YELLOW, GREEN, CYAN};\n use std::any::Any;\n use std::cmp;\n use std::collections::BTreeMap;\n-use std::f64;\n use std::fmt;\n use std::io::fs::PathExtensions;\n use std::io::stdio::StdWriter;\n@@ -81,8 +79,7 @@ use std::time::Duration;\n pub mod test {\n     pub use {Bencher, TestName, TestResult, TestDesc,\n              TestDescAndFn, TestOpts, TrFailed, TrIgnored, TrOk,\n-             Metric, MetricMap, MetricAdded, MetricRemoved,\n-             MetricChange, Improvement, Regression, LikelyNoise,\n+             Metric, MetricMap,\n              StaticTestFn, StaticTestName, DynTestName, DynTestFn,\n              run_test, test_main, test_main_static, filter_tests,\n              parse_opts, StaticBenchFn, ShouldFail};\n@@ -241,18 +238,6 @@ impl Clone for MetricMap {\n     }\n }\n \n-/// Analysis of a single change in metric\n-#[derive(Copy, PartialEq, Show)]\n-pub enum MetricChange {\n-    LikelyNoise,\n-    MetricAdded,\n-    MetricRemoved,\n-    Improvement(f64),\n-    Regression(f64)\n-}\n-\n-pub type MetricDiff = BTreeMap<String,MetricChange>;\n-\n // The default console test runner. It accepts the command line\n // arguments and a vector of test_descs.\n pub fn test_main(args: &[String], tests: Vec<TestDescAndFn> ) {\n@@ -516,22 +501,6 @@ impl<T: Writer> ConsoleTestState<T> {\n         self.write_pretty(\"bench\", term::color::CYAN)\n     }\n \n-    pub fn write_added(&mut self) -> io::IoResult<()> {\n-        self.write_pretty(\"added\", term::color::GREEN)\n-    }\n-\n-    pub fn write_improved(&mut self) -> io::IoResult<()> {\n-        self.write_pretty(\"improved\", term::color::GREEN)\n-    }\n-\n-    pub fn write_removed(&mut self) -> io::IoResult<()> {\n-        self.write_pretty(\"removed\", term::color::YELLOW)\n-    }\n-\n-    pub fn write_regressed(&mut self) -> io::IoResult<()> {\n-        self.write_pretty(\"regressed\", term::color::RED)\n-    }\n-\n     pub fn write_pretty(&mut self,\n                         word: &str,\n                         color: term::color::Color) -> io::IoResult<()> {\n@@ -655,55 +624,6 @@ impl<T: Writer> ConsoleTestState<T> {\n         Ok(())\n     }\n \n-    pub fn write_metric_diff(&mut self, diff: &MetricDiff) -> io::IoResult<()> {\n-        let mut noise = 0u;\n-        let mut improved = 0u;\n-        let mut regressed = 0u;\n-        let mut added = 0u;\n-        let mut removed = 0u;\n-\n-        for (k, v) in diff.iter() {\n-            match *v {\n-                LikelyNoise => noise += 1,\n-                MetricAdded => {\n-                    added += 1;\n-                    try!(self.write_added());\n-                    try!(self.write_plain(format!(\": {}\\n\", *k).as_slice()));\n-                }\n-                MetricRemoved => {\n-                    removed += 1;\n-                    try!(self.write_removed());\n-                    try!(self.write_plain(format!(\": {}\\n\", *k).as_slice()));\n-                }\n-                Improvement(pct) => {\n-                    improved += 1;\n-                    try!(self.write_plain(format!(\": {} \", *k).as_slice()));\n-                    try!(self.write_improved());\n-                    try!(self.write_plain(format!(\" by {:.2}%\\n\",\n-                                                  pct as f64).as_slice()));\n-                }\n-                Regression(pct) => {\n-                    regressed += 1;\n-                    try!(self.write_plain(format!(\": {} \", *k).as_slice()));\n-                    try!(self.write_regressed());\n-                    try!(self.write_plain(format!(\" by {:.2}%\\n\",\n-                                                  pct as f64).as_slice()));\n-                }\n-            }\n-        }\n-        try!(self.write_plain(format!(\"result of ratchet: {} metrics added, \\\n-                                        {} removed, {} improved, {} regressed, \\\n-                                        {} noise\\n\",\n-                                       added, removed, improved, regressed,\n-                                       noise).as_slice()));\n-        if regressed == 0 {\n-            try!(self.write_plain(\"updated ratchet file\\n\"));\n-        } else {\n-            try!(self.write_plain(\"left ratchet file untouched\\n\"));\n-        }\n-        Ok(())\n-    }\n-\n     pub fn write_run_finish(&mut self,\n                             ratchet_metrics: &Option<Path>,\n                             ratchet_pct: Option<f64>) -> io::IoResult<bool> {\n@@ -721,9 +641,7 @@ impl<T: Writer> ConsoleTestState<T> {\n                                                          forced to: {}%\\n\",\n                                                         pct).as_slice()))\n                 }\n-                let (diff, ok) = self.metrics.ratchet(pth, ratchet_pct);\n-                try!(self.write_metric_diff(&diff));\n-                ok\n+                true\n             }\n         };\n \n@@ -1116,63 +1034,6 @@ impl MetricMap {\n         write!(&mut file, \"{}\", json::as_json(map))\n     }\n \n-    /// Compare against another MetricMap. Optionally compare all\n-    /// measurements in the maps using the provided `noise_pct` as a\n-    /// percentage of each value to consider noise. If `None`, each\n-    /// measurement's noise threshold is independently chosen as the\n-    /// maximum of that measurement's recorded noise quantity in either\n-    /// map.\n-    pub fn compare_to_old(&self, old: &MetricMap,\n-                          noise_pct: Option<f64>) -> MetricDiff {\n-        let mut diff : MetricDiff = BTreeMap::new();\n-        let MetricMap(ref selfmap) = *self;\n-        let MetricMap(ref old) = *old;\n-        for (k, vold) in old.iter() {\n-            let r = match selfmap.get(k) {\n-                None => MetricRemoved,\n-                Some(v) => {\n-                    let delta = v.value - vold.value;\n-                    let noise = match noise_pct {\n-                        None => vold.noise.abs().max(v.noise.abs()),\n-                        Some(pct) => vold.value * pct / 100.0\n-                    };\n-                    if delta.abs() <= noise {\n-                        LikelyNoise\n-                    } else {\n-                        let pct = delta.abs() / vold.value.max(f64::EPSILON) * 100.0;\n-                        if vold.noise < 0.0 {\n-                            // When 'noise' is negative, it means we want\n-                            // to see deltas that go up over time, and can\n-                            // only tolerate slight negative movement.\n-                            if delta < 0.0 {\n-                                Regression(pct)\n-                            } else {\n-                                Improvement(pct)\n-                            }\n-                        } else {\n-                            // When 'noise' is positive, it means we want\n-                            // to see deltas that go down over time, and\n-                            // can only tolerate slight positive movements.\n-                            if delta < 0.0 {\n-                                Improvement(pct)\n-                            } else {\n-                                Regression(pct)\n-                            }\n-                        }\n-                    }\n-                }\n-            };\n-            diff.insert((*k).clone(), r);\n-        }\n-        let MetricMap(ref map) = *self;\n-        for (k, _) in map.iter() {\n-            if !diff.contains_key(k) {\n-                diff.insert((*k).clone(), MetricAdded);\n-            }\n-        }\n-        diff\n-    }\n-\n     /// Insert a named `value` (+/- `noise`) metric into the map. The value\n     /// must be non-negative. The `noise` indicates the uncertainty of the\n     /// metric, which doubles as the \"noise range\" of acceptable\n@@ -1194,33 +1055,6 @@ impl MetricMap {\n         let MetricMap(ref mut map) = *self;\n         map.insert(name.to_string(), m);\n     }\n-\n-    /// Attempt to \"ratchet\" an external metric file. This involves loading\n-    /// metrics from a metric file (if it exists), comparing against\n-    /// the metrics in `self` using `compare_to_old`, and rewriting the\n-    /// file to contain the metrics in `self` if none of the\n-    /// `MetricChange`s are `Regression`. Returns the diff as well\n-    /// as a boolean indicating whether the ratchet succeeded.\n-    pub fn ratchet(&self, p: &Path, pct: Option<f64>) -> (MetricDiff, bool) {\n-        let old = if p.exists() {\n-            MetricMap::load(p)\n-        } else {\n-            MetricMap::new()\n-        };\n-\n-        let diff : MetricDiff = self.compare_to_old(&old, pct);\n-        let ok = diff.iter().all(|(_, v)| {\n-            match *v {\n-                Regression(_) => false,\n-                _ => true\n-            }\n-        });\n-\n-        if ok {\n-            self.save(p).unwrap();\n-        }\n-        return (diff, ok)\n-    }\n }\n \n \n@@ -1362,8 +1196,7 @@ pub mod bench {\n mod tests {\n     use test::{TrFailed, TrIgnored, TrOk, filter_tests, parse_opts,\n                TestDesc, TestDescAndFn, TestOpts, run_test,\n-               Metric, MetricMap, MetricAdded, MetricRemoved,\n-               Improvement, Regression, LikelyNoise,\n+               Metric, MetricMap,\n                StaticTestName, DynTestName, DynTestFn, ShouldFail};\n     use std::io::TempDir;\n     use std::thunk::Thunk;\n@@ -1629,81 +1462,5 @@ mod tests {\n \n         m1.insert_metric(\"in-both-want-upwards-and-improved\", 1000.0, -10.0);\n         m2.insert_metric(\"in-both-want-upwards-and-improved\", 2000.0, -10.0);\n-\n-        let diff1 = m2.compare_to_old(&m1, None);\n-\n-        assert_eq!(*(diff1.get(&\"in-both-noise\".to_string()).unwrap()), LikelyNoise);\n-        assert_eq!(*(diff1.get(&\"in-first-noise\".to_string()).unwrap()), MetricRemoved);\n-        assert_eq!(*(diff1.get(&\"in-second-noise\".to_string()).unwrap()), MetricAdded);\n-        assert_eq!(*(diff1.get(&\"in-both-want-downwards-but-regressed\".to_string()).unwrap()),\n-                   Regression(100.0));\n-        assert_eq!(*(diff1.get(&\"in-both-want-downwards-and-improved\".to_string()).unwrap()),\n-                   Improvement(50.0));\n-        assert_eq!(*(diff1.get(&\"in-both-want-upwards-but-regressed\".to_string()).unwrap()),\n-                   Regression(50.0));\n-        assert_eq!(*(diff1.get(&\"in-both-want-upwards-and-improved\".to_string()).unwrap()),\n-                   Improvement(100.0));\n-        assert_eq!(diff1.len(), 7);\n-\n-        let diff2 = m2.compare_to_old(&m1, Some(200.0));\n-\n-        assert_eq!(*(diff2.get(&\"in-both-noise\".to_string()).unwrap()), LikelyNoise);\n-        assert_eq!(*(diff2.get(&\"in-first-noise\".to_string()).unwrap()), MetricRemoved);\n-        assert_eq!(*(diff2.get(&\"in-second-noise\".to_string()).unwrap()), MetricAdded);\n-        assert_eq!(*(diff2.get(&\"in-both-want-downwards-but-regressed\".to_string()).unwrap()),\n-                   LikelyNoise);\n-        assert_eq!(*(diff2.get(&\"in-both-want-downwards-and-improved\".to_string()).unwrap()),\n-                   LikelyNoise);\n-        assert_eq!(*(diff2.get(&\"in-both-want-upwards-but-regressed\".to_string()).unwrap()),\n-                   LikelyNoise);\n-        assert_eq!(*(diff2.get(&\"in-both-want-upwards-and-improved\".to_string()).unwrap()),\n-                   LikelyNoise);\n-        assert_eq!(diff2.len(), 7);\n-    }\n-\n-    #[test]\n-    pub fn ratchet_test() {\n-\n-        let dpth = TempDir::new(\"test-ratchet\").ok().expect(\"missing test for ratchet\");\n-        let pth = dpth.path().join(\"ratchet.json\");\n-\n-        let mut m1 = MetricMap::new();\n-        m1.insert_metric(\"runtime\", 1000.0, 2.0);\n-        m1.insert_metric(\"throughput\", 50.0, 2.0);\n-\n-        let mut m2 = MetricMap::new();\n-        m2.insert_metric(\"runtime\", 1100.0, 2.0);\n-        m2.insert_metric(\"throughput\", 50.0, 2.0);\n-\n-        m1.save(&pth).unwrap();\n-\n-        // Ask for a ratchet that should fail to advance.\n-        let (diff1, ok1) = m2.ratchet(&pth, None);\n-        assert_eq!(ok1, false);\n-        assert_eq!(diff1.len(), 2);\n-        assert_eq!(*(diff1.get(&\"runtime\".to_string()).unwrap()), Regression(10.0));\n-        assert_eq!(*(diff1.get(&\"throughput\".to_string()).unwrap()), LikelyNoise);\n-\n-        // Check that it was not rewritten.\n-        let m3 = MetricMap::load(&pth);\n-        let MetricMap(m3) = m3;\n-        assert_eq!(m3.len(), 2);\n-        assert_eq!(*(m3.get(&\"runtime\".to_string()).unwrap()), Metric::new(1000.0, 2.0));\n-        assert_eq!(*(m3.get(&\"throughput\".to_string()).unwrap()), Metric::new(50.0, 2.0));\n-\n-        // Ask for a ratchet with an explicit noise-percentage override,\n-        // that should advance.\n-        let (diff2, ok2) = m2.ratchet(&pth, Some(10.0));\n-        assert_eq!(ok2, true);\n-        assert_eq!(diff2.len(), 2);\n-        assert_eq!(*(diff2.get(&\"runtime\".to_string()).unwrap()), LikelyNoise);\n-        assert_eq!(*(diff2.get(&\"throughput\".to_string()).unwrap()), LikelyNoise);\n-\n-        // Check that it was rewritten.\n-        let m4 = MetricMap::load(&pth);\n-        let MetricMap(m4) = m4;\n-        assert_eq!(m4.len(), 2);\n-        assert_eq!(*(m4.get(&\"runtime\".to_string()).unwrap()), Metric::new(1100.0, 2.0));\n-        assert_eq!(*(m4.get(&\"throughput\".to_string()).unwrap()), Metric::new(50.0, 2.0));\n     }\n }"}]}