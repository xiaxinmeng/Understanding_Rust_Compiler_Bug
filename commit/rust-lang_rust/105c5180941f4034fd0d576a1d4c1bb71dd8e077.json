{"sha": "105c5180941f4034fd0d576a1d4c1bb71dd8e077", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwNWM1MTgwOTQxZjQwMzRmZDBkNTc2YTFkNGMxYmI3MWRkOGUwNzc=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-04-12T00:35:14Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-04-12T00:53:21Z"}, "message": "Abstract cs_eq for partial_eq", "tree": {"sha": "b7bb8c093d9b9d42ad2482e4bf44f31f1d7f5bae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7bb8c093d9b9d42ad2482e4bf44f31f1d7f5bae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/105c5180941f4034fd0d576a1d4c1bb71dd8e077", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/105c5180941f4034fd0d576a1d4c1bb71dd8e077", "html_url": "https://github.com/rust-lang/rust/commit/105c5180941f4034fd0d576a1d4c1bb71dd8e077", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/105c5180941f4034fd0d576a1d4c1bb71dd8e077/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "60dc4f8ec8729bd851b8ee8e3dac9abae1f62bef", "url": "https://api.github.com/repos/rust-lang/rust/commits/60dc4f8ec8729bd851b8ee8e3dac9abae1f62bef", "html_url": "https://github.com/rust-lang/rust/commit/60dc4f8ec8729bd851b8ee8e3dac9abae1f62bef"}], "stats": {"total": 77, "additions": 27, "deletions": 50}, "files": [{"sha": "81ca7e732283d07b3997627013904f7b15315d57", "filename": "src/libsyntax_ext/deriving/cmp/partial_eq.rs", "status": "modified", "additions": 27, "deletions": 50, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/105c5180941f4034fd0d576a1d4c1bb71dd8e077/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/105c5180941f4034fd0d576a1d4c1bb71dd8e077/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_eq.rs?ref=105c5180941f4034fd0d576a1d4c1bb71dd8e077", "patch": "@@ -26,73 +26,50 @@ pub fn expand_deriving_partial_eq(cx: &mut ExtCtxt,\n                                   push: &mut FnMut(Annotatable)) {\n     // structures are equal if all fields are equal, and non equal, if\n     // any fields are not equal or if the enum variants are different\n-    fn cs_eq(cx: &mut ExtCtxt, span: Span, substr: &Substructure) -> P<Expr> {\n-        cs_fold1(true, // use foldl\n-            |cx, span, subexpr, self_f, other_fs| {\n-                let other_f = match (other_fs.len(), other_fs.get(0)) {\n-                    (1, Some(o_f)) => o_f,\n-                    _ => cx.span_bug(span, \"not exactly 2 arguments in `derive(PartialEq)`\"),\n-                };\n+    fn cs_op(cx: &mut ExtCtxt,\n+             span: Span,\n+             substr: &Substructure,\n+             op: BinOpKind,\n+             combiner: BinOpKind,\n+             base: bool)\n+             -> P<Expr>\n+    {\n+        let op = |cx: &mut ExtCtxt, span: Span, self_f: P<Expr>, other_fs: &[P<Expr>]| {\n+            let other_f = match (other_fs.len(), other_fs.get(0)) {\n+                (1, Some(o_f)) => o_f,\n+                _ => cx.span_bug(span, \"not exactly 2 arguments in `derive(PartialEq)`\"),\n+            };\n \n-                let eq = cx.expr_binary(span, BinOpKind::Eq, self_f, other_f.clone());\n+            cx.expr_binary(span, op, self_f, other_f.clone())\n+        };\n \n-                cx.expr_binary(span, BinOpKind::And, subexpr, eq)\n-            },\n-            |cx, args| {\n-                match args {\n-                    Some((span, self_f, other_fs)) => {\n-                        // Special-case the base case to generate cleaner code.\n-                        let other_f = match (other_fs.len(), other_fs.get(0)) {\n-                            (1, Some(o_f)) => o_f,\n-                            _ => {\n-                                cx.span_bug(span, \"not exactly 2 arguments in `derive(PartialEq)`\")\n-                            }\n-                        };\n-\n-                        cx.expr_binary(span, BinOpKind::Eq, self_f, other_f.clone())\n-                    }\n-                    None => cx.expr_bool(span, true),\n-                }\n-            },\n-            Box::new(|cx, span, _, _| cx.expr_bool(span, false)),\n-            cx,\n-            span,\n-            substr)\n-    }\n-    fn cs_ne(cx: &mut ExtCtxt, span: Span, substr: &Substructure) -> P<Expr> {\n         cs_fold1(true, // use foldl\n             |cx, span, subexpr, self_f, other_fs| {\n-                let other_f = match (other_fs.len(), other_fs.get(0)) {\n-                    (1, Some(o_f)) => o_f,\n-                    _ => cx.span_bug(span, \"not exactly 2 arguments in `derive(PartialEq)`\"),\n-                };\n-\n-                let eq = cx.expr_binary(span, BinOpKind::Ne, self_f, other_f.clone());\n-\n-                cx.expr_binary(span, BinOpKind::Or, subexpr, eq)\n+                let eq = op(cx, span, self_f, other_fs);\n+                cx.expr_binary(span, combiner, subexpr, eq)\n             },\n             |cx, args| {\n                 match args {\n                     Some((span, self_f, other_fs)) => {\n                         // Special-case the base case to generate cleaner code.\n-                        let other_f = match (other_fs.len(), other_fs.get(0)) {\n-                            (1, Some(o_f)) => o_f,\n-                            _ => {\n-                                cx.span_bug(span, \"not exactly 2 arguments in `derive(PartialEq)`\")\n-                            }\n-                        };\n-\n-                        cx.expr_binary(span, BinOpKind::Ne, self_f, other_f.clone())\n+                        op(cx, span, self_f, other_fs)\n                     }\n-                    None => cx.expr_bool(span, false),\n+                    None => cx.expr_bool(span, base),\n                 }\n             },\n-            Box::new(|cx, span, _, _| cx.expr_bool(span, true)),\n+            Box::new(|cx, span, _, _| cx.expr_bool(span, !base)),\n             cx,\n             span,\n             substr)\n     }\n \n+    fn cs_eq(cx: &mut ExtCtxt, span: Span, substr: &Substructure) -> P<Expr> {\n+        cs_op(cx, span, substr, BinOpKind::Eq, BinOpKind::And, true)\n+    }\n+    fn cs_ne(cx: &mut ExtCtxt, span: Span, substr: &Substructure) -> P<Expr> {\n+        cs_op(cx, span, substr, BinOpKind::Ne, BinOpKind::Or, false)\n+    }\n+\n     macro_rules! md {\n         ($name:expr, $f:ident) => { {\n             let inline = cx.meta_word(span, Symbol::intern(\"inline\"));"}]}