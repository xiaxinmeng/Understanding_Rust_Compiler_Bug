{"sha": "38eece97ecc801811a8847cfd230e97d838398cd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4ZWVjZTk3ZWNjODAxODExYTg4NDdjZmQyMzBlOTdkODM4Mzk4Y2Q=", "commit": {"author": {"name": "Igor Matuszewski", "email": "Xanewok@gmail.com", "date": "2019-03-07T11:02:53Z"}, "committer": {"name": "Igor Matuszewski", "email": "Xanewok@gmail.com", "date": "2019-03-16T21:41:13Z"}, "message": "Redo indent calculation when adding missing impl members", "tree": {"sha": "ea004f0700919c0d5ca9161ab3ab466d783e051d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea004f0700919c0d5ca9161ab3ab466d783e051d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/38eece97ecc801811a8847cfd230e97d838398cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/38eece97ecc801811a8847cfd230e97d838398cd", "html_url": "https://github.com/rust-lang/rust/commit/38eece97ecc801811a8847cfd230e97d838398cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/38eece97ecc801811a8847cfd230e97d838398cd/comments", "author": {"login": "Xanewok", "id": 3093213, "node_id": "MDQ6VXNlcjMwOTMyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3093213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xanewok", "html_url": "https://github.com/Xanewok", "followers_url": "https://api.github.com/users/Xanewok/followers", "following_url": "https://api.github.com/users/Xanewok/following{/other_user}", "gists_url": "https://api.github.com/users/Xanewok/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xanewok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xanewok/subscriptions", "organizations_url": "https://api.github.com/users/Xanewok/orgs", "repos_url": "https://api.github.com/users/Xanewok/repos", "events_url": "https://api.github.com/users/Xanewok/events{/privacy}", "received_events_url": "https://api.github.com/users/Xanewok/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Xanewok", "id": 3093213, "node_id": "MDQ6VXNlcjMwOTMyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3093213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xanewok", "html_url": "https://github.com/Xanewok", "followers_url": "https://api.github.com/users/Xanewok/followers", "following_url": "https://api.github.com/users/Xanewok/following{/other_user}", "gists_url": "https://api.github.com/users/Xanewok/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xanewok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xanewok/subscriptions", "organizations_url": "https://api.github.com/users/Xanewok/orgs", "repos_url": "https://api.github.com/users/Xanewok/repos", "events_url": "https://api.github.com/users/Xanewok/events{/privacy}", "received_events_url": "https://api.github.com/users/Xanewok/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f616eea9c21ebbd217a42785eae1af3173689c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f616eea9c21ebbd217a42785eae1af3173689c2", "html_url": "https://github.com/rust-lang/rust/commit/2f616eea9c21ebbd217a42785eae1af3173689c2"}], "stats": {"total": 30, "additions": 21, "deletions": 9}, "files": [{"sha": "0888268e41dce90077cc8f8308b49de66a6c485c", "filename": "crates/ra_assists/src/add_missing_impl_members.rs", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/38eece97ecc801811a8847cfd230e97d838398cd/crates%2Fra_assists%2Fsrc%2Fadd_missing_impl_members.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38eece97ecc801811a8847cfd230e97d838398cd/crates%2Fra_assists%2Fsrc%2Fadd_missing_impl_members.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fadd_missing_impl_members.rs?ref=38eece97ecc801811a8847cfd230e97d838398cd", "patch": "@@ -90,15 +90,24 @@ pub(crate) fn add_missing_impl_members(mut ctx: AssistCtx<impl HirDatabase>) ->\n     let last_whitespace_node =\n         impl_item_list.syntax().children().filter_map(ast::Whitespace::cast).last()?.syntax();\n \n-    ctx.add_action(AssistId(\"add_impl_missing_members\"), \"add impl missing members\", |edit| {\n-        let func_bodies = missing_fns.into_iter().map(build_func_body).join(\"\\n\");\n+    ctx.add_action(AssistId(\"add_impl_missing_members\"), \"add missing impl members\", |edit| {\n+        let indent = {\n+            // FIXME: Find a way to get the indent already used in the file.\n+            // Now, we copy the indent of first item or indent with 4 spaces relative to impl block\n+            const DEFAULT_INDENT: &str = \"    \";\n+            let first_item = impl_item_list.impl_items().next();\n+            let first_item_indent = first_item.and_then(|i| leading_indent(i.syntax()));\n+            let impl_block_indent = || leading_indent(impl_node.syntax()).unwrap_or_default();\n+\n+            first_item_indent\n+                .map(ToOwned::to_owned)\n+                .unwrap_or_else(|| impl_block_indent().to_owned() + DEFAULT_INDENT)\n+        };\n+\n+        let mut func_bodies = missing_fns.into_iter().map(build_func_body);\n+        let func_bodies = func_bodies.join(\"\\n\");\n         let func_bodies = String::from(\"\\n\") + &func_bodies;\n-\n-        let first_impl_item = impl_item_list.impl_items().next();\n-        // FIXME: We should respect the indent of the first item from the item list or the indent of leading block + some default indent (4?)\n-        // Another approach is to not indent at all if there are no items here\n-        let indent = first_impl_item.and_then(|i| leading_indent(i.syntax())).unwrap_or_default();\n-        let func_bodies = reindent(&func_bodies, indent) + \"\\n\";\n+        let func_bodies = reindent(&func_bodies, &indent) + \"\\n\";\n \n         let changed_range = last_whitespace_node.range();\n         let replaced_text_range = TextUnit::of_str(&func_bodies);\n@@ -123,6 +132,7 @@ mod tests {\n trait Foo {\n     fn foo(&self);\n     fn bar(&self);\n+    fn baz(&self);\n }\n \n struct S;\n@@ -135,13 +145,15 @@ impl Foo for S {\n trait Foo {\n     fn foo(&self);\n     fn bar(&self);\n+    fn baz(&self);\n }\n \n struct S;\n \n impl Foo for S {\n     fn bar(&self) {}\n-    fn foo(&self) { unimplemented!() }<|>\n+    fn foo(&self) { unimplemented!() }\n+    fn baz(&self) { unimplemented!() }<|>\n }\",\n         );\n     }"}]}