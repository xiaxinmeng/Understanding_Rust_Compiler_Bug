{"sha": "54932dee1cf28afd5d670ba8cc8b8d0d93c7b830", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0OTMyZGVlMWNmMjhhZmQ1ZDY3MGJhOGNjOGI4ZDBkOTNjN2I4MzA=", "commit": {"author": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-09-07T09:54:47Z"}, "committer": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-09-07T09:54:47Z"}, "message": "Merge pull request #312 from Manishearth/pub_convention\n\nsplit wrong_self_convention in pub/default visibility part", "tree": {"sha": "e6cdc50481d6bb2fdeba89e0440ef4559aafd91c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e6cdc50481d6bb2fdeba89e0440ef4559aafd91c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/54932dee1cf28afd5d670ba8cc8b8d0d93c7b830", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/54932dee1cf28afd5d670ba8cc8b8d0d93c7b830", "html_url": "https://github.com/rust-lang/rust/commit/54932dee1cf28afd5d670ba8cc8b8d0d93c7b830", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/54932dee1cf28afd5d670ba8cc8b8d0d93c7b830/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4c28f85210d3357c061f88dd3e10825f5289414", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4c28f85210d3357c061f88dd3e10825f5289414", "html_url": "https://github.com/rust-lang/rust/commit/f4c28f85210d3357c061f88dd3e10825f5289414"}, {"sha": "e43f2d7e5480272e75b7583ffbfab4293715cda1", "url": "https://api.github.com/repos/rust-lang/rust/commits/e43f2d7e5480272e75b7583ffbfab4293715cda1", "html_url": "https://github.com/rust-lang/rust/commit/e43f2d7e5480272e75b7583ffbfab4293715cda1"}], "stats": {"total": 130, "additions": 70, "deletions": 60}, "files": [{"sha": "060eac942ba3ac1cf8077d1e46f2bdb296560fab", "filename": "README.md", "status": "modified", "additions": 60, "deletions": 59, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/54932dee1cf28afd5d670ba8cc8b8d0d93c7b830/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/54932dee1cf28afd5d670ba8cc8b8d0d93c7b830/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=54932dee1cf28afd5d670ba8cc8b8d0d93c7b830", "patch": "@@ -4,65 +4,66 @@\n A collection of lints that give helpful tips to newbies and catch oversights.\n \n ##Lints\n-There are 55 lints included in this crate:\n-\n-name                                                                                                 | default | meaning\n------------------------------------------------------------------------------------------------------|---------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n-[approx_constant](https://github.com/Manishearth/rust-clippy/wiki#approx_constant)                   | warn    | the approximate of a known float constant (in `std::f64::consts` or `std::f32::consts`) is found; suggests to use the constant\n-[bad_bit_mask](https://github.com/Manishearth/rust-clippy/wiki#bad_bit_mask)                         | warn    | expressions of the form `_ & mask == select` that will only ever return `true` or `false` (because in the example `select` containing bits that `mask` doesn't have)\n-[box_vec](https://github.com/Manishearth/rust-clippy/wiki#box_vec)                                   | warn    | usage of `Box<Vec<T>>`, vector elements are already on the heap\n-[cast_possible_truncation](https://github.com/Manishearth/rust-clippy/wiki#cast_possible_truncation) | allow   | casts that may cause truncation of the value, e.g `x as u8` where `x: u32`, or `x as i32` where `x: f32`\n-[cast_possible_wrap](https://github.com/Manishearth/rust-clippy/wiki#cast_possible_wrap)             | allow   | casts that may cause wrapping around the value, e.g `x as i32` where `x: u32` and `x > i32::MAX`\n-[cast_precision_loss](https://github.com/Manishearth/rust-clippy/wiki#cast_precision_loss)           | allow   | casts that cause loss of precision, e.g `x as f32` where `x: u64`\n-[cast_sign_loss](https://github.com/Manishearth/rust-clippy/wiki#cast_sign_loss)                     | allow   | casts from signed types to unsigned types, e.g `x as u32` where `x: i32`\n-[cmp_nan](https://github.com/Manishearth/rust-clippy/wiki#cmp_nan)                                   | deny    | comparisons to NAN (which will always return false, which is probably not intended)\n-[cmp_owned](https://github.com/Manishearth/rust-clippy/wiki#cmp_owned)                               | warn    | creating owned instances for comparing with others, e.g. `x == \"foo\".to_string()`\n-[collapsible_if](https://github.com/Manishearth/rust-clippy/wiki#collapsible_if)                     | warn    | two nested `if`-expressions can be collapsed into one, e.g. `if x { if y { foo() } }` can be written as `if x && y { foo() }`\n-[eq_op](https://github.com/Manishearth/rust-clippy/wiki#eq_op)                                       | warn    | equal operands on both sides of a comparison or bitwise combination (e.g. `x == x`)\n-[explicit_iter_loop](https://github.com/Manishearth/rust-clippy/wiki#explicit_iter_loop)             | warn    | for-looping over `_.iter()` or `_.iter_mut()` when `&_` or `&mut _` would do\n-[float_cmp](https://github.com/Manishearth/rust-clippy/wiki#float_cmp)                               | warn    | using `==` or `!=` on float values (as floating-point operations usually involve rounding errors, it is always better to check for approximate equality within small bounds)\n-[identity_op](https://github.com/Manishearth/rust-clippy/wiki#identity_op)                           | warn    | using identity operations, e.g. `x + 0` or `y / 1`\n-[ineffective_bit_mask](https://github.com/Manishearth/rust-clippy/wiki#ineffective_bit_mask)         | warn    | expressions where a bit mask will be rendered useless by a comparison, e.g. `(x | 1) > 2`\n-[inline_always](https://github.com/Manishearth/rust-clippy/wiki#inline_always)                       | warn    | `#[inline(always)]` is a bad idea in most cases\n-[iter_next_loop](https://github.com/Manishearth/rust-clippy/wiki#iter_next_loop)                     | warn    | for-looping over `_.next()` which is probably not intended\n-[len_without_is_empty](https://github.com/Manishearth/rust-clippy/wiki#len_without_is_empty)         | warn    | traits and impls that have `.len()` but not `.is_empty()`\n-[len_zero](https://github.com/Manishearth/rust-clippy/wiki#len_zero)                                 | warn    | checking `.len() == 0` or `.len() > 0` (or similar) when `.is_empty()` could be used instead\n-[let_and_return](https://github.com/Manishearth/rust-clippy/wiki#let_and_return)                     | warn    | creating a let-binding and then immediately returning it like `let x = expr; x` at the end of a function\n-[let_unit_value](https://github.com/Manishearth/rust-clippy/wiki#let_unit_value)                     | warn    | creating a let binding to a value of unit type, which usually can't be used afterwards\n-[linkedlist](https://github.com/Manishearth/rust-clippy/wiki#linkedlist)                             | warn    | usage of LinkedList, usually a vector is faster, or a more specialized data structure like a RingBuf\n-[match_ref_pats](https://github.com/Manishearth/rust-clippy/wiki#match_ref_pats)                     | warn    | a match has all arms prefixed with `&`; the match expression can be dereferenced instead\n-[min_max](https://github.com/Manishearth/rust-clippy/wiki#min_max)                                   | warn    | `min(_, max(_, _))` (or vice versa) with bounds clamping the result to a constant\n-[modulo_one](https://github.com/Manishearth/rust-clippy/wiki#modulo_one)                             | warn    | taking a number modulo 1, which always returns 0\n-[mut_mut](https://github.com/Manishearth/rust-clippy/wiki#mut_mut)                                   | warn    | usage of double-mut refs, e.g. `&mut &mut ...` (either copy'n'paste error, or shows a fundamental misunderstanding of references)\n-[needless_bool](https://github.com/Manishearth/rust-clippy/wiki#needless_bool)                       | warn    | if-statements with plain booleans in the then- and else-clause, e.g. `if p { true } else { false }`\n-[needless_lifetimes](https://github.com/Manishearth/rust-clippy/wiki#needless_lifetimes)             | warn    | using explicit lifetimes for references in function arguments when elision rules would allow omitting them\n-[needless_range_loop](https://github.com/Manishearth/rust-clippy/wiki#needless_range_loop)           | warn    | for-looping over a range of indices where an iterator over items would do\n-[needless_return](https://github.com/Manishearth/rust-clippy/wiki#needless_return)                   | warn    | using a return statement like `return expr;` where an expression would suffice\n-[non_ascii_literal](https://github.com/Manishearth/rust-clippy/wiki#non_ascii_literal)               | allow   | using any literal non-ASCII chars in a string literal; suggests using the \\\\u escape instead\n-[option_unwrap_used](https://github.com/Manishearth/rust-clippy/wiki#option_unwrap_used)             | allow   | using `Option.unwrap()`, which should at least get a better message using `expect()`\n-[precedence](https://github.com/Manishearth/rust-clippy/wiki#precedence)                             | warn    | catches operations where precedence may be unclear. See the wiki for a list of cases caught\n-[ptr_arg](https://github.com/Manishearth/rust-clippy/wiki#ptr_arg)                                   | allow   | fn arguments of the type `&Vec<...>` or `&String`, suggesting to use `&[...]` or `&str` instead, respectively\n-[range_step_by_zero](https://github.com/Manishearth/rust-clippy/wiki#range_step_by_zero)             | warn    | using Range::step_by(0), which produces an infinite iterator\n-[redundant_closure](https://github.com/Manishearth/rust-clippy/wiki#redundant_closure)               | warn    | using redundant closures, i.e. `|a| foo(a)` (which can be written as just `foo`)\n-[redundant_pattern](https://github.com/Manishearth/rust-clippy/wiki#redundant_pattern)               | warn    | using `name @ _` in a pattern\n-[result_unwrap_used](https://github.com/Manishearth/rust-clippy/wiki#result_unwrap_used)             | allow   | using `Result.unwrap()`, which might be better handled\n-[shadow_reuse](https://github.com/Manishearth/rust-clippy/wiki#shadow_reuse)                         | allow   | rebinding a name to an expression that re-uses the original value, e.g. `let x = x + 1`\n-[shadow_same](https://github.com/Manishearth/rust-clippy/wiki#shadow_same)                           | allow   | rebinding a name to itself, e.g. `let mut x = &mut x`\n-[shadow_unrelated](https://github.com/Manishearth/rust-clippy/wiki#shadow_unrelated)                 | warn    | The name is re-bound without even using the original value\n-[should_implement_trait](https://github.com/Manishearth/rust-clippy/wiki#should_implement_trait)     | warn    | defining a method that should be implementing a std trait\n-[single_match](https://github.com/Manishearth/rust-clippy/wiki#single_match)                         | warn    | a match statement with a single nontrivial arm (i.e, where the other arm is `_ => {}`) is used; recommends `if let` instead\n-[str_to_string](https://github.com/Manishearth/rust-clippy/wiki#str_to_string)                       | warn    | using `to_string()` on a str, which should be `to_owned()`\n-[string_add](https://github.com/Manishearth/rust-clippy/wiki#string_add)                             | allow   | using `x + ..` where x is a `String`; suggests using `push_str()` instead\n-[string_add_assign](https://github.com/Manishearth/rust-clippy/wiki#string_add_assign)               | allow   | using `x = x + ..` where x is a `String`; suggests using `push_str()` instead\n-[string_to_string](https://github.com/Manishearth/rust-clippy/wiki#string_to_string)                 | warn    | calling `String.to_string()` which is a no-op\n-[toplevel_ref_arg](https://github.com/Manishearth/rust-clippy/wiki#toplevel_ref_arg)                 | warn    | a function argument is declared `ref` (i.e. `fn foo(ref x: u8)`, but not `fn foo((ref x, ref y): (u8, u8))`)\n-[type_complexity](https://github.com/Manishearth/rust-clippy/wiki#type_complexity)                   | warn    | usage of very complex types; recommends factoring out parts into `type` definitions\n-[unicode_not_nfc](https://github.com/Manishearth/rust-clippy/wiki#unicode_not_nfc)                   | allow   | using a unicode literal not in NFC normal form (see http://www.unicode.org/reports/tr15/ for further information)\n-[unit_cmp](https://github.com/Manishearth/rust-clippy/wiki#unit_cmp)                                 | warn    | comparing unit values (which is always `true` or `false`, respectively)\n-[unused_collect](https://github.com/Manishearth/rust-clippy/wiki#unused_collect)                     | warn    | `collect()`ing an iterator without using the result; this is usually better written as a for loop\n-[while_let_loop](https://github.com/Manishearth/rust-clippy/wiki#while_let_loop)                     | warn    | `loop { if let { ... } else break }` can be written as a `while let` loop\n-[wrong_self_convention](https://github.com/Manishearth/rust-clippy/wiki#wrong_self_convention)       | warn    | defining a method named with an established prefix (like \"into_\") that takes `self` with the wrong convention\n-[zero_width_space](https://github.com/Manishearth/rust-clippy/wiki#zero_width_space)                 | deny    | using a zero-width space in a string literal, which is confusing\n+There are 56 lints included in this crate:\n+\n+name                                                                                                   | default | meaning\n+-------------------------------------------------------------------------------------------------------|---------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n+[approx_constant](https://github.com/Manishearth/rust-clippy/wiki#approx_constant)                     | warn    | the approximate of a known float constant (in `std::f64::consts` or `std::f32::consts`) is found; suggests to use the constant\n+[bad_bit_mask](https://github.com/Manishearth/rust-clippy/wiki#bad_bit_mask)                           | warn    | expressions of the form `_ & mask == select` that will only ever return `true` or `false` (because in the example `select` containing bits that `mask` doesn't have)\n+[box_vec](https://github.com/Manishearth/rust-clippy/wiki#box_vec)                                     | warn    | usage of `Box<Vec<T>>`, vector elements are already on the heap\n+[cast_possible_truncation](https://github.com/Manishearth/rust-clippy/wiki#cast_possible_truncation)   | allow   | casts that may cause truncation of the value, e.g `x as u8` where `x: u32`, or `x as i32` where `x: f32`\n+[cast_possible_wrap](https://github.com/Manishearth/rust-clippy/wiki#cast_possible_wrap)               | allow   | casts that may cause wrapping around the value, e.g `x as i32` where `x: u32` and `x > i32::MAX`\n+[cast_precision_loss](https://github.com/Manishearth/rust-clippy/wiki#cast_precision_loss)             | allow   | casts that cause loss of precision, e.g `x as f32` where `x: u64`\n+[cast_sign_loss](https://github.com/Manishearth/rust-clippy/wiki#cast_sign_loss)                       | allow   | casts from signed types to unsigned types, e.g `x as u32` where `x: i32`\n+[cmp_nan](https://github.com/Manishearth/rust-clippy/wiki#cmp_nan)                                     | deny    | comparisons to NAN (which will always return false, which is probably not intended)\n+[cmp_owned](https://github.com/Manishearth/rust-clippy/wiki#cmp_owned)                                 | warn    | creating owned instances for comparing with others, e.g. `x == \"foo\".to_string()`\n+[collapsible_if](https://github.com/Manishearth/rust-clippy/wiki#collapsible_if)                       | warn    | two nested `if`-expressions can be collapsed into one, e.g. `if x { if y { foo() } }` can be written as `if x && y { foo() }`\n+[eq_op](https://github.com/Manishearth/rust-clippy/wiki#eq_op)                                         | warn    | equal operands on both sides of a comparison or bitwise combination (e.g. `x == x`)\n+[explicit_iter_loop](https://github.com/Manishearth/rust-clippy/wiki#explicit_iter_loop)               | warn    | for-looping over `_.iter()` or `_.iter_mut()` when `&_` or `&mut _` would do\n+[float_cmp](https://github.com/Manishearth/rust-clippy/wiki#float_cmp)                                 | warn    | using `==` or `!=` on float values (as floating-point operations usually involve rounding errors, it is always better to check for approximate equality within small bounds)\n+[identity_op](https://github.com/Manishearth/rust-clippy/wiki#identity_op)                             | warn    | using identity operations, e.g. `x + 0` or `y / 1`\n+[ineffective_bit_mask](https://github.com/Manishearth/rust-clippy/wiki#ineffective_bit_mask)           | warn    | expressions where a bit mask will be rendered useless by a comparison, e.g. `(x | 1) > 2`\n+[inline_always](https://github.com/Manishearth/rust-clippy/wiki#inline_always)                         | warn    | `#[inline(always)]` is a bad idea in most cases\n+[iter_next_loop](https://github.com/Manishearth/rust-clippy/wiki#iter_next_loop)                       | warn    | for-looping over `_.next()` which is probably not intended\n+[len_without_is_empty](https://github.com/Manishearth/rust-clippy/wiki#len_without_is_empty)           | warn    | traits and impls that have `.len()` but not `.is_empty()`\n+[len_zero](https://github.com/Manishearth/rust-clippy/wiki#len_zero)                                   | warn    | checking `.len() == 0` or `.len() > 0` (or similar) when `.is_empty()` could be used instead\n+[let_and_return](https://github.com/Manishearth/rust-clippy/wiki#let_and_return)                       | warn    | creating a let-binding and then immediately returning it like `let x = expr; x` at the end of a function\n+[let_unit_value](https://github.com/Manishearth/rust-clippy/wiki#let_unit_value)                       | warn    | creating a let binding to a value of unit type, which usually can't be used afterwards\n+[linkedlist](https://github.com/Manishearth/rust-clippy/wiki#linkedlist)                               | warn    | usage of LinkedList, usually a vector is faster, or a more specialized data structure like a RingBuf\n+[match_ref_pats](https://github.com/Manishearth/rust-clippy/wiki#match_ref_pats)                       | warn    | a match has all arms prefixed with `&`; the match expression can be dereferenced instead\n+[min_max](https://github.com/Manishearth/rust-clippy/wiki#min_max)                                     | warn    | `min(_, max(_, _))` (or vice versa) with bounds clamping the result to a constant\n+[modulo_one](https://github.com/Manishearth/rust-clippy/wiki#modulo_one)                               | warn    | taking a number modulo 1, which always returns 0\n+[mut_mut](https://github.com/Manishearth/rust-clippy/wiki#mut_mut)                                     | warn    | usage of double-mut refs, e.g. `&mut &mut ...` (either copy'n'paste error, or shows a fundamental misunderstanding of references)\n+[needless_bool](https://github.com/Manishearth/rust-clippy/wiki#needless_bool)                         | warn    | if-statements with plain booleans in the then- and else-clause, e.g. `if p { true } else { false }`\n+[needless_lifetimes](https://github.com/Manishearth/rust-clippy/wiki#needless_lifetimes)               | warn    | using explicit lifetimes for references in function arguments when elision rules would allow omitting them\n+[needless_range_loop](https://github.com/Manishearth/rust-clippy/wiki#needless_range_loop)             | warn    | for-looping over a range of indices where an iterator over items would do\n+[needless_return](https://github.com/Manishearth/rust-clippy/wiki#needless_return)                     | warn    | using a return statement like `return expr;` where an expression would suffice\n+[non_ascii_literal](https://github.com/Manishearth/rust-clippy/wiki#non_ascii_literal)                 | allow   | using any literal non-ASCII chars in a string literal; suggests using the \\\\u escape instead\n+[option_unwrap_used](https://github.com/Manishearth/rust-clippy/wiki#option_unwrap_used)               | allow   | using `Option.unwrap()`, which should at least get a better message using `expect()`\n+[precedence](https://github.com/Manishearth/rust-clippy/wiki#precedence)                               | warn    | catches operations where precedence may be unclear. See the wiki for a list of cases caught\n+[ptr_arg](https://github.com/Manishearth/rust-clippy/wiki#ptr_arg)                                     | allow   | fn arguments of the type `&Vec<...>` or `&String`, suggesting to use `&[...]` or `&str` instead, respectively\n+[range_step_by_zero](https://github.com/Manishearth/rust-clippy/wiki#range_step_by_zero)               | warn    | using Range::step_by(0), which produces an infinite iterator\n+[redundant_closure](https://github.com/Manishearth/rust-clippy/wiki#redundant_closure)                 | warn    | using redundant closures, i.e. `|a| foo(a)` (which can be written as just `foo`)\n+[redundant_pattern](https://github.com/Manishearth/rust-clippy/wiki#redundant_pattern)                 | warn    | using `name @ _` in a pattern\n+[result_unwrap_used](https://github.com/Manishearth/rust-clippy/wiki#result_unwrap_used)               | allow   | using `Result.unwrap()`, which might be better handled\n+[shadow_reuse](https://github.com/Manishearth/rust-clippy/wiki#shadow_reuse)                           | allow   | rebinding a name to an expression that re-uses the original value, e.g. `let x = x + 1`\n+[shadow_same](https://github.com/Manishearth/rust-clippy/wiki#shadow_same)                             | allow   | rebinding a name to itself, e.g. `let mut x = &mut x`\n+[shadow_unrelated](https://github.com/Manishearth/rust-clippy/wiki#shadow_unrelated)                   | warn    | The name is re-bound without even using the original value\n+[should_implement_trait](https://github.com/Manishearth/rust-clippy/wiki#should_implement_trait)       | warn    | defining a method that should be implementing a std trait\n+[single_match](https://github.com/Manishearth/rust-clippy/wiki#single_match)                           | warn    | a match statement with a single nontrivial arm (i.e, where the other arm is `_ => {}`) is used; recommends `if let` instead\n+[str_to_string](https://github.com/Manishearth/rust-clippy/wiki#str_to_string)                         | warn    | using `to_string()` on a str, which should be `to_owned()`\n+[string_add](https://github.com/Manishearth/rust-clippy/wiki#string_add)                               | allow   | using `x + ..` where x is a `String`; suggests using `push_str()` instead\n+[string_add_assign](https://github.com/Manishearth/rust-clippy/wiki#string_add_assign)                 | allow   | using `x = x + ..` where x is a `String`; suggests using `push_str()` instead\n+[string_to_string](https://github.com/Manishearth/rust-clippy/wiki#string_to_string)                   | warn    | calling `String.to_string()` which is a no-op\n+[toplevel_ref_arg](https://github.com/Manishearth/rust-clippy/wiki#toplevel_ref_arg)                   | warn    | a function argument is declared `ref` (i.e. `fn foo(ref x: u8)`, but not `fn foo((ref x, ref y): (u8, u8))`)\n+[type_complexity](https://github.com/Manishearth/rust-clippy/wiki#type_complexity)                     | warn    | usage of very complex types; recommends factoring out parts into `type` definitions\n+[unicode_not_nfc](https://github.com/Manishearth/rust-clippy/wiki#unicode_not_nfc)                     | allow   | using a unicode literal not in NFC normal form (see http://www.unicode.org/reports/tr15/ for further information)\n+[unit_cmp](https://github.com/Manishearth/rust-clippy/wiki#unit_cmp)                                   | warn    | comparing unit values (which is always `true` or `false`, respectively)\n+[unused_collect](https://github.com/Manishearth/rust-clippy/wiki#unused_collect)                       | warn    | `collect()`ing an iterator without using the result; this is usually better written as a for loop\n+[while_let_loop](https://github.com/Manishearth/rust-clippy/wiki#while_let_loop)                       | warn    | `loop { if let { ... } else break }` can be written as a `while let` loop\n+[wrong_pub_self_convention](https://github.com/Manishearth/rust-clippy/wiki#wrong_pub_self_convention) | allow   | defining a public method named with an established prefix (like \"into_\") that takes `self` with the wrong convention\n+[wrong_self_convention](https://github.com/Manishearth/rust-clippy/wiki#wrong_self_convention)         | warn    | defining a method named with an established prefix (like \"into_\") that takes `self` with the wrong convention\n+[zero_width_space](https://github.com/Manishearth/rust-clippy/wiki#zero_width_space)                   | deny    | using a zero-width space in a string literal, which is confusing\n \n More to come, please [file an issue](https://github.com/Manishearth/rust-clippy/issues) if you have ideas!\n "}, {"sha": "fdb0f9751092de1623e1bd6e56e79453c098e446", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/54932dee1cf28afd5d670ba8cc8b8d0d93c7b830/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54932dee1cf28afd5d670ba8cc8b8d0d93c7b830/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=54932dee1cf28afd5d670ba8cc8b8d0d93c7b830", "patch": "@@ -91,6 +91,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_lint_group(\"clippy_pedantic\", vec![\n         methods::OPTION_UNWRAP_USED,\n         methods::RESULT_UNWRAP_USED,\n+        methods::WRONG_PUB_SELF_CONVENTION,\n         ptr_arg::PTR_ARG,\n         shadow::SHADOW_REUSE,\n         shadow::SHADOW_SAME,"}, {"sha": "b110d92e7f89c12ccac6f58019cd0320c4290cdf", "filename": "src/methods.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/54932dee1cf28afd5d670ba8cc8b8d0d93c7b830/src%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54932dee1cf28afd5d670ba8cc8b8d0d93c7b830/src%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmethods.rs?ref=54932dee1cf28afd5d670ba8cc8b8d0d93c7b830", "patch": "@@ -27,6 +27,9 @@ declare_lint!(pub SHOULD_IMPLEMENT_TRAIT, Warn,\n declare_lint!(pub WRONG_SELF_CONVENTION, Warn,\n               \"defining a method named with an established prefix (like \\\"into_\\\") that takes \\\n                `self` with the wrong convention\");\n+declare_lint!(pub WRONG_PUB_SELF_CONVENTION, Allow,\n+              \"defining a public method named with an established prefix (like \\\"into_\\\") that takes \\\n+               `self` with the wrong convention\");\n \n impl LintPass for MethodsPass {\n     fn get_lints(&self) -> LintArray {\n@@ -93,7 +96,12 @@ impl LintPass for MethodsPass {\n                     for &(prefix, self_kinds) in &CONVENTIONS {\n                         if name.as_str().starts_with(prefix) &&\n                                 !self_kinds.iter().any(|k| k.matches(&sig.explicit_self.node, is_copy)) {\n-                            span_lint(cx, WRONG_SELF_CONVENTION, sig.explicit_self.span, &format!(\n+                            let lint = if item.vis == Visibility::Public {\n+                                WRONG_PUB_SELF_CONVENTION\n+                            } else {\n+                                WRONG_SELF_CONVENTION\n+                            };\n+                            span_lint(cx, lint, sig.explicit_self.span, &format!(\n                                 \"methods called `{}*` usually take {}; consider choosing a less \\\n                                  ambiguous name\", prefix,\n                                 &self_kinds.iter().map(|k| k.description()).collect::<Vec<_>>().join(\" or \")));"}]}