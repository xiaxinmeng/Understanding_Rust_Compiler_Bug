{"sha": "8dea87d9f4928154a488dd0d8ccb78fe46bb3f57", "node_id": "C_kwDOAAsO6NoAKDhkZWE4N2Q5ZjQ5MjgxNTRhNDg4ZGQwZDhjY2I3OGZlNDZiYjNmNTc", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-10-05T03:45:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-05T03:45:14Z"}, "message": "Rollup merge of #102670 - lyming2007:issue-101866-fix, r=compiler-errors\n\nfollow-up fix about 101866 to print the self type.\n\n\tmodified:   compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs\n\tmodified:   src/test/ui/error-codes/E0283.stderr\n\tmodified:   src/test/ui/error-codes/E0790.stderr\n\tmodified:   src/test/ui/traits/static-method-generic-inference.stderr\n\tmodified:   src/test/ui/type/issue-101866.stderr", "tree": {"sha": "4006591fe3f9666a7dde10900cf842ec6714e077", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4006591fe3f9666a7dde10900cf842ec6714e077"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8dea87d9f4928154a488dd0d8ccb78fe46bb3f57", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjPP3KCRBK7hj4Ov3rIwAATlEIAA758GeBPPgvGpKL40T2OPDY\nsYKiuLdOjnMEFb5UI6MMRqjhY3LmvmF/8Kt6bLISzwz1Rlsxy1Z/f/a1Ew/HTrWx\nMwWgMM8Vj4eyc6uI4ZiRuns+jsn5GLZgOQFoRrG3Il9ZYoXZX1tph5L4E9oQKpbY\n1lqj7eo5YkR4P8x+VCyy2JYMdFFgxzIPcjVZAYfQ1bgvlPkQuIb5anFOXVoceNld\nGlbVglTaYx35015Oc5fFxliWOJ54q67PLdT0ifF6JCUHjV1o5KLUKFBZEB9TDkBe\nZzU6X40I8I+k8ePUSCTUBQ+0ZvoY7d0o308Y4mHUsFkQH0Mr1u8pcvLMz6mNGHg=\n=sR9/\n-----END PGP SIGNATURE-----\n", "payload": "tree 4006591fe3f9666a7dde10900cf842ec6714e077\nparent fd8be2c36e5495d3a6a85341e0059012be17973f\nparent 4f3b6ac91f58a2b1dbce8f8b967ceed0edd2f136\nauthor Michael Howell <michael@notriddle.com> 1664941514 -0700\ncommitter GitHub <noreply@github.com> 1664941514 -0700\n\nRollup merge of #102670 - lyming2007:issue-101866-fix, r=compiler-errors\n\nfollow-up fix about 101866 to print the self type.\n\n\tmodified:   compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs\n\tmodified:   src/test/ui/error-codes/E0283.stderr\n\tmodified:   src/test/ui/error-codes/E0790.stderr\n\tmodified:   src/test/ui/traits/static-method-generic-inference.stderr\n\tmodified:   src/test/ui/type/issue-101866.stderr\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8dea87d9f4928154a488dd0d8ccb78fe46bb3f57", "html_url": "https://github.com/rust-lang/rust/commit/8dea87d9f4928154a488dd0d8ccb78fe46bb3f57", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8dea87d9f4928154a488dd0d8ccb78fe46bb3f57/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd8be2c36e5495d3a6a85341e0059012be17973f", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd8be2c36e5495d3a6a85341e0059012be17973f", "html_url": "https://github.com/rust-lang/rust/commit/fd8be2c36e5495d3a6a85341e0059012be17973f"}, {"sha": "4f3b6ac91f58a2b1dbce8f8b967ceed0edd2f136", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f3b6ac91f58a2b1dbce8f8b967ceed0edd2f136", "html_url": "https://github.com/rust-lang/rust/commit/4f3b6ac91f58a2b1dbce8f8b967ceed0edd2f136"}], "stats": {"total": 32, "additions": 16, "deletions": 16}, "files": [{"sha": "6dcf9c4d26174c926458513db2a4ddd4bea8b940", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8dea87d9f4928154a488dd0d8ccb78fe46bb3f57/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dea87d9f4928154a488dd0d8ccb78fe46bb3f57/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=8dea87d9f4928154a488dd0d8ccb78fe46bb3f57", "patch": "@@ -2265,7 +2265,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n                             };\n                             let mut suggestions = vec![(\n                                 trait_path_segment.ident.span.shrink_to_lo(),\n-                                format!(\"<{} as \", self.tcx.def_path(impl_def_id).to_string_no_crate_verbose())\n+                                format!(\"<{} as \", self.tcx.type_of(impl_def_id))\n                             )];\n                             if let Some(generic_arg) = trait_path_segment.args {\n                                 let between_span = trait_path_segment.ident.span.between(generic_arg.span_ext);"}, {"sha": "90316c6e981d8af9b2f350f5414727b88824bf6f", "filename": "src/test/ui/error-codes/E0283.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8dea87d9f4928154a488dd0d8ccb78fe46bb3f57/src%2Ftest%2Fui%2Ferror-codes%2FE0283.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8dea87d9f4928154a488dd0d8ccb78fe46bb3f57/src%2Ftest%2Fui%2Ferror-codes%2FE0283.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0283.stderr?ref=8dea87d9f4928154a488dd0d8ccb78fe46bb3f57", "patch": "@@ -9,8 +9,8 @@ LL |     let cont: u32 = Generator::create();\n    |\n help: use a fully-qualified path to a specific available implementation (2 found)\n    |\n-LL |     let cont: u32 = <::Impl as Generator>::create();\n-   |                     ++++++++++          +\n+LL |     let cont: u32 = <Impl as Generator>::create();\n+   |                     ++++++++          +\n \n error[E0283]: type annotations needed\n   --> $DIR/E0283.rs:35:24"}, {"sha": "f68c0e7d220f369d4409d59e26baa99ecd954b7d", "filename": "src/test/ui/error-codes/E0790.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8dea87d9f4928154a488dd0d8ccb78fe46bb3f57/src%2Ftest%2Fui%2Ferror-codes%2FE0790.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8dea87d9f4928154a488dd0d8ccb78fe46bb3f57/src%2Ftest%2Fui%2Ferror-codes%2FE0790.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0790.stderr?ref=8dea87d9f4928154a488dd0d8ccb78fe46bb3f57", "patch": "@@ -9,8 +9,8 @@ LL |         MyTrait::my_fn();\n    |\n help: use the fully-qualified path to the only available implementation\n    |\n-LL |         <::inner::MyStruct as MyTrait>::my_fn();\n-   |         +++++++++++++++++++++        +\n+LL |         <MyStruct as MyTrait>::my_fn();\n+   |         ++++++++++++        +\n \n error[E0790]: cannot refer to the associated constant on trait without specifying the corresponding `impl` type\n   --> $DIR/E0790.rs:21:17\n@@ -23,8 +23,8 @@ LL |         let _ = MyTrait::MY_ASSOC_CONST;\n    |\n help: use the fully-qualified path to the only available implementation\n    |\n-LL |         let _ = <::inner::MyStruct as MyTrait>::MY_ASSOC_CONST;\n-   |                 +++++++++++++++++++++        +\n+LL |         let _ = <MyStruct as MyTrait>::MY_ASSOC_CONST;\n+   |                 ++++++++++++        +\n \n error[E0790]: cannot call associated function on trait without specifying the corresponding `impl` type\n   --> $DIR/E0790.rs:26:5\n@@ -37,8 +37,8 @@ LL |     inner::MyTrait::my_fn();\n    |\n help: use the fully-qualified path to the only available implementation\n    |\n-LL |     inner::<::inner::MyStruct as MyTrait>::my_fn();\n-   |            +++++++++++++++++++++        +\n+LL |     inner::<MyStruct as MyTrait>::my_fn();\n+   |            ++++++++++++        +\n \n error[E0790]: cannot refer to the associated constant on trait without specifying the corresponding `impl` type\n   --> $DIR/E0790.rs:30:13\n@@ -51,8 +51,8 @@ LL |     let _ = inner::MyTrait::MY_ASSOC_CONST;\n    |\n help: use the fully-qualified path to the only available implementation\n    |\n-LL |     let _ = inner::<::inner::MyStruct as MyTrait>::MY_ASSOC_CONST;\n-   |                    +++++++++++++++++++++        +\n+LL |     let _ = inner::<MyStruct as MyTrait>::MY_ASSOC_CONST;\n+   |                    ++++++++++++        +\n \n error[E0790]: cannot call associated function on trait without specifying the corresponding `impl` type\n   --> $DIR/E0790.rs:50:5\n@@ -65,8 +65,8 @@ LL |     MyTrait2::my_fn();\n    |\n help: use a fully-qualified path to a specific available implementation (2 found)\n    |\n-LL |     <::Impl1 as MyTrait2>::my_fn();\n-   |     +++++++++++         +\n+LL |     <Impl1 as MyTrait2>::my_fn();\n+   |     +++++++++         +\n \n error: aborting due to 5 previous errors\n "}, {"sha": "5f74d0c3b9260e5686593d89852bb77abed05823", "filename": "src/test/ui/traits/static-method-generic-inference.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8dea87d9f4928154a488dd0d8ccb78fe46bb3f57/src%2Ftest%2Fui%2Ftraits%2Fstatic-method-generic-inference.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8dea87d9f4928154a488dd0d8ccb78fe46bb3f57/src%2Ftest%2Fui%2Ftraits%2Fstatic-method-generic-inference.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fstatic-method-generic-inference.stderr?ref=8dea87d9f4928154a488dd0d8ccb78fe46bb3f57", "patch": "@@ -9,8 +9,8 @@ LL |     let _f: base::Foo = base::HasNew::new();\n    |\n help: use the fully-qualified path to the only available implementation\n    |\n-LL |     let _f: base::Foo = base::<::base::Foo as HasNew>::new();\n-   |                               +++++++++++++++       +\n+LL |     let _f: base::Foo = base::<Foo as HasNew>::new();\n+   |                               +++++++       +\n \n error: aborting due to previous error\n "}, {"sha": "fe99821198e205eb00187dca6df4a1439ed45bf5", "filename": "src/test/ui/type/issue-101866.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8dea87d9f4928154a488dd0d8ccb78fe46bb3f57/src%2Ftest%2Fui%2Ftype%2Fissue-101866.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8dea87d9f4928154a488dd0d8ccb78fe46bb3f57/src%2Ftest%2Fui%2Ftype%2Fissue-101866.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fissue-101866.stderr?ref=8dea87d9f4928154a488dd0d8ccb78fe46bb3f57", "patch": "@@ -10,7 +10,7 @@ LL |     TraitA::<i32>::func();\n help: use the fully-qualified path to the only available implementation\n    |\n LL -     TraitA::<i32>::func();\n-LL +     <::StructA as TraitA<i32>>::func();\n+LL +     <StructA as TraitA<i32>>::func();\n    |\n \n error: aborting due to previous error"}]}