{"sha": "1638c4b7496a96d1ccf53a12b916f6180e5b1f69", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2MzhjNGI3NDk2YTk2ZDFjY2Y1M2ExMmI5MTZmNjE4MGU1YjFmNjk=", "commit": {"author": {"name": "Raphael Speyer", "email": "rspeyer@gmail.com", "date": "2014-06-09T04:18:11Z"}, "committer": {"name": "Raphael Speyer", "email": "rspeyer@gmail.com", "date": "2014-06-09T04:18:11Z"}, "message": "Converted PortReader and ChanWriter to use Vec.", "tree": {"sha": "77dadffb34f962ab71d4bab1b4c235bec1580748", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77dadffb34f962ab71d4bab1b4c235bec1580748"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1638c4b7496a96d1ccf53a12b916f6180e5b1f69", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1638c4b7496a96d1ccf53a12b916f6180e5b1f69", "html_url": "https://github.com/rust-lang/rust/commit/1638c4b7496a96d1ccf53a12b916f6180e5b1f69", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1638c4b7496a96d1ccf53a12b916f6180e5b1f69/comments", "author": {"login": "rapha", "id": 29763, "node_id": "MDQ6VXNlcjI5NzYz", "avatar_url": "https://avatars.githubusercontent.com/u/29763?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rapha", "html_url": "https://github.com/rapha", "followers_url": "https://api.github.com/users/rapha/followers", "following_url": "https://api.github.com/users/rapha/following{/other_user}", "gists_url": "https://api.github.com/users/rapha/gists{/gist_id}", "starred_url": "https://api.github.com/users/rapha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rapha/subscriptions", "organizations_url": "https://api.github.com/users/rapha/orgs", "repos_url": "https://api.github.com/users/rapha/repos", "events_url": "https://api.github.com/users/rapha/events{/privacy}", "received_events_url": "https://api.github.com/users/rapha/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rapha", "id": 29763, "node_id": "MDQ6VXNlcjI5NzYz", "avatar_url": "https://avatars.githubusercontent.com/u/29763?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rapha", "html_url": "https://github.com/rapha", "followers_url": "https://api.github.com/users/rapha/followers", "following_url": "https://api.github.com/users/rapha/following{/other_user}", "gists_url": "https://api.github.com/users/rapha/gists{/gist_id}", "starred_url": "https://api.github.com/users/rapha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rapha/subscriptions", "organizations_url": "https://api.github.com/users/rapha/orgs", "repos_url": "https://api.github.com/users/rapha/repos", "events_url": "https://api.github.com/users/rapha/events{/privacy}", "received_events_url": "https://api.github.com/users/rapha/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bbd448a27c37dd95a9551c45606f865bff411a47", "url": "https://api.github.com/repos/rust-lang/rust/commits/bbd448a27c37dd95a9551c45606f865bff411a47", "html_url": "https://github.com/rust-lang/rust/commit/bbd448a27c37dd95a9551c45606f865bff411a47"}], "stats": {"total": 45, "additions": 23, "deletions": 22}, "files": [{"sha": "84b7242970aade29221014c7b18c6f51a6b7f32a", "filename": "src/libstd/io/comm_adapters.rs", "status": "modified", "additions": 23, "deletions": 22, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/1638c4b7496a96d1ccf53a12b916f6180e5b1f69/src%2Flibstd%2Fio%2Fcomm_adapters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1638c4b7496a96d1ccf53a12b916f6180e5b1f69/src%2Flibstd%2Fio%2Fcomm_adapters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fcomm_adapters.rs?ref=1638c4b7496a96d1ccf53a12b916f6180e5b1f69", "patch": "@@ -17,7 +17,8 @@ use option::{None, Option, Some};\n use result::{Ok, Err};\n use super::{Reader, Writer, IoResult};\n use str::StrSlice;\n-use slice::{bytes, CloneableVector, MutableVector, ImmutableVector};\n+use slice::{bytes, MutableVector, ImmutableVector};\n+use vec::Vec;\n \n /// Allows reading from a rx.\n ///\n@@ -30,22 +31,22 @@ use slice::{bytes, CloneableVector, MutableVector, ImmutableVector};\n /// # drop(tx);\n /// let mut reader = ChanReader::new(rx);\n ///\n-/// let mut buf = ~[0u8, ..100];\n+/// let mut buf = [0u8, ..100];\n /// match reader.read(buf) {\n ///     Ok(nread) => println!(\"Read {} bytes\", nread),\n ///     Err(e) => println!(\"read error: {}\", e),\n /// }\n /// ```\n pub struct ChanReader {\n-    buf: Option<~[u8]>,  // A buffer of bytes received but not consumed.\n-    pos: uint,           // How many of the buffered bytes have already be consumed.\n-    rx: Receiver<~[u8]>,   // The rx to pull data from.\n-    closed: bool,        // Whether the pipe this rx connects to has been closed.\n+    buf: Option<Vec<u8>>,  // A buffer of bytes received but not consumed.\n+    pos: uint,             // How many of the buffered bytes have already be consumed.\n+    rx: Receiver<Vec<u8>>, // The Receiver to pull data from.\n+    closed: bool,          // Whether the channel this Receiver connects to has been closed.\n }\n \n impl ChanReader {\n     /// Wraps a `Port` in a `ChanReader` structure\n-    pub fn new(rx: Receiver<~[u8]>) -> ChanReader {\n+    pub fn new(rx: Receiver<Vec<u8>>) -> ChanReader {\n         ChanReader {\n             buf: None,\n             pos: 0,\n@@ -99,12 +100,12 @@ impl Reader for ChanReader {\n /// writer.write(\"hello, world\".as_bytes());\n /// ```\n pub struct ChanWriter {\n-    tx: Sender<~[u8]>,\n+    tx: Sender<Vec<u8>>,\n }\n \n impl ChanWriter {\n     /// Wraps a channel in a `ChanWriter` structure\n-    pub fn new(tx: Sender<~[u8]>) -> ChanWriter {\n+    pub fn new(tx: Sender<Vec<u8>>) -> ChanWriter {\n         ChanWriter { tx: tx }\n     }\n }\n@@ -117,7 +118,7 @@ impl Clone for ChanWriter {\n \n impl Writer for ChanWriter {\n     fn write(&mut self, buf: &[u8]) -> IoResult<()> {\n-        self.tx.send_opt(buf.to_owned()).map_err(|_| {\n+        self.tx.send_opt(Vec::from_slice(buf)).map_err(|_| {\n             io::IoError {\n                 kind: io::BrokenPipe,\n                 desc: \"Pipe closed\",\n@@ -139,40 +140,40 @@ mod test {\n     fn test_rx_reader() {\n         let (tx, rx) = channel();\n         task::spawn(proc() {\n-          tx.send(box [1u8, 2u8]);\n-          tx.send(box []);\n-          tx.send(box [3u8, 4u8]);\n-          tx.send(box [5u8, 6u8]);\n-          tx.send(box [7u8, 8u8]);\n+          tx.send(vec![1u8, 2u8]);\n+          tx.send(vec![]);\n+          tx.send(vec![3u8, 4u8]);\n+          tx.send(vec![5u8, 6u8]);\n+          tx.send(vec![7u8, 8u8]);\n         });\n \n         let mut reader = ChanReader::new(rx);\n-        let mut buf = box [0u8, ..3];\n+        let mut buf = [0u8, ..3];\n \n \n         assert_eq!(Ok(0), reader.read([]));\n \n         assert_eq!(Ok(3), reader.read(buf));\n-        assert_eq!(box [1,2,3], buf);\n+        assert_eq!(&[1,2,3], buf.as_slice());\n \n         assert_eq!(Ok(3), reader.read(buf));\n-        assert_eq!(box [4,5,6], buf);\n+        assert_eq!(&[4,5,6], buf.as_slice());\n \n         assert_eq!(Ok(2), reader.read(buf));\n-        assert_eq!(box [7,8,6], buf);\n+        assert_eq!(&[7,8,6], buf.as_slice());\n \n         match reader.read(buf) {\n             Ok(..) => fail!(),\n             Err(e) => assert_eq!(e.kind, io::EndOfFile),\n         }\n-        assert_eq!(box [7,8,6], buf);\n+        assert_eq!(&[7,8,6], buf.as_slice());\n \n         // Ensure it continues to fail in the same way.\n         match reader.read(buf) {\n             Ok(..) => fail!(),\n             Err(e) => assert_eq!(e.kind, io::EndOfFile),\n         }\n-        assert_eq!(box [7,8,6], buf);\n+        assert_eq!(&[7,8,6], buf.as_slice());\n     }\n \n     #[test]\n@@ -181,7 +182,7 @@ mod test {\n         let mut writer = ChanWriter::new(tx);\n         writer.write_be_u32(42).unwrap();\n \n-        let wanted = box [0u8, 0u8, 0u8, 42u8];\n+        let wanted = vec![0u8, 0u8, 0u8, 42u8];\n         let got = task::try(proc() { rx.recv() }).unwrap();\n         assert_eq!(wanted, got);\n "}]}