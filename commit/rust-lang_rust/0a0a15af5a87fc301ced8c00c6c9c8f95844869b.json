{"sha": "0a0a15af5a87fc301ced8c00c6c9c8f95844869b", "node_id": "C_kwDOAAsO6NoAKDBhMGExNWFmNWE4N2ZjMzAxY2VkOGMwMGM2YzljOGY5NTg0NDg2OWI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-18T02:32:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-18T02:32:04Z"}, "message": "Auto merge of #2380 - RalfJung:isatty, r=RalfJung\n\nisatty tweaks\n\n`@saethlin` I realized we need to gate this behind the isolation flag, sorry. :/  The point of isolated mode is that it is 100% deterministic, so we cannot call host functions that might give different answers on different runs.", "tree": {"sha": "6b563204fcdf34a09580871f2bd9ee34ffeecab5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b563204fcdf34a09580871f2bd9ee34ffeecab5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a0a15af5a87fc301ced8c00c6c9c8f95844869b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a0a15af5a87fc301ced8c00c6c9c8f95844869b", "html_url": "https://github.com/rust-lang/rust/commit/0a0a15af5a87fc301ced8c00c6c9c8f95844869b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a0a15af5a87fc301ced8c00c6c9c8f95844869b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ec3425a8a6ce81dd99083f19bfc3eee6b8155d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ec3425a8a6ce81dd99083f19bfc3eee6b8155d4", "html_url": "https://github.com/rust-lang/rust/commit/8ec3425a8a6ce81dd99083f19bfc3eee6b8155d4"}, {"sha": "e30dd07139aa5bda7d690b20e9336edae3f42e4f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e30dd07139aa5bda7d690b20e9336edae3f42e4f", "html_url": "https://github.com/rust-lang/rust/commit/e30dd07139aa5bda7d690b20e9336edae3f42e4f"}], "stats": {"total": 26, "additions": 18, "deletions": 8}, "files": [{"sha": "1420279247f46d39465f3babe61cfeb7316fb48a", "filename": "src/shims/unix/fs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a0a15af5a87fc301ced8c00c6c9c8f95844869b/src%2Fshims%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a0a15af5a87fc301ced8c00c6c9c8f95844869b/src%2Fshims%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Funix%2Ffs.rs?ref=0a0a15af5a87fc301ced8c00c6c9c8f95844869b", "patch": "@@ -1694,7 +1694,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn isatty(&mut self, miri_fd: &OpTy<'tcx, Tag>) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n         #[cfg(unix)]\n-        {\n+        if matches!(this.machine.isolated_op, IsolatedOp::Allow) {\n             let miri_fd = this.read_scalar(miri_fd)?.to_i32()?;\n             if let Some(host_fd) =\n                 this.machine.file_handler.handles.get(&miri_fd).and_then(|fd| fd.as_unix_host_fd())\n@@ -1714,7 +1714,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             }\n         }\n         // We are attemping to use a Unix interface on a non-Unix platform, or we are on a Unix\n-        // platform and the passed file descriptor is not open.\n+        // platform and the passed file descriptor is not open, or isolation is enabled\n         // FIXME: It should be possible to emulate this at least on Windows by using\n         // GetConsoleMode.\n         let enotty = this.eval_libc(\"ENOTTY\")?;"}, {"sha": "ea3848a9749a74b80cb48499e5c0a14969894608", "filename": "tests/pass/libc.rs", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0a0a15af5a87fc301ced8c00c6c9c8f95844869b/tests%2Fpass%2Flibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a0a15af5a87fc301ced8c00c6c9c8f95844869b/tests%2Fpass%2Flibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Flibc.rs?ref=0a0a15af5a87fc301ced8c00c6c9c8f95844869b", "patch": "@@ -1,11 +1,12 @@\n //@ignore-windows: No libc on Windows\n //@compile-flags: -Zmiri-disable-isolation\n-\n #![feature(rustc_private)]\n \n+use std::fs::{remove_file, File};\n+use std::os::unix::io::AsRawFd;\n+\n extern crate libc;\n \n-#[cfg(any(target_os = \"linux\", target_os = \"freebsd\"))]\n fn tmp() -> std::path::PathBuf {\n     std::env::var(\"MIRI_TEMP\")\n         .map(std::path::PathBuf::from)\n@@ -15,9 +16,7 @@ fn tmp() -> std::path::PathBuf {\n #[cfg(any(target_os = \"linux\", target_os = \"freebsd\"))]\n fn test_posix_fadvise() {\n     use std::convert::TryInto;\n-    use std::fs::{remove_file, File};\n     use std::io::Write;\n-    use std::os::unix::io::AsRawFd;\n \n     let path = tmp().join(\"miri_test_libc_posix_fadvise.txt\");\n     // Cleanup before test\n@@ -44,9 +43,7 @@ fn test_posix_fadvise() {\n \n #[cfg(any(target_os = \"linux\"))]\n fn test_sync_file_range() {\n-    use std::fs::{remove_file, File};\n     use std::io::Write;\n-    use std::os::unix::io::AsRawFd;\n \n     let path = tmp().join(\"miri_test_libc_sync_file_range.txt\");\n     // Cleanup before test.\n@@ -319,6 +316,19 @@ fn test_isatty() {\n         libc::isatty(libc::STDIN_FILENO);\n         libc::isatty(libc::STDOUT_FILENO);\n         libc::isatty(libc::STDERR_FILENO);\n+\n+        // But when we open a file, it is definitely not a TTY.\n+        let path = tmp().join(\"notatty.txt\");\n+        // Cleanup before test.\n+        remove_file(&path).ok();\n+        let file = File::create(&path).unwrap();\n+\n+        assert_eq!(libc::isatty(file.as_raw_fd()), 0);\n+        assert_eq!(std::io::Error::last_os_error().raw_os_error().unwrap(), libc::ENOTTY);\n+\n+        // Cleanup after test.\n+        drop(file);\n+        remove_file(&path).unwrap();\n     }\n }\n "}]}