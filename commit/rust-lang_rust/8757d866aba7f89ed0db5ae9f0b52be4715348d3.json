{"sha": "8757d866aba7f89ed0db5ae9f0b52be4715348d3", "node_id": "C_kwDOAAsO6NoAKDg3NTdkODY2YWJhN2Y4OWVkMGRiNWFlOWYwYjUyYmU0NzE1MzQ4ZDM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-19T12:29:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-19T12:29:29Z"}, "message": "Auto merge of #2350 - RalfJung:remove-deprecated, r=oli-obk\n\nremove deprecated options\n\nThese have been deprecated a month ago and nobody said they need them. Is that enough time? We can also let this PR sit a little.\n\nCc https://github.com/rust-lang/miri/issues/2187 https://github.com/rust-lang/miri/issues/2188\n(keeping them open to track removing their supporting infrastructure in the core interpreter)", "tree": {"sha": "2d701036e71324d51222e24c7c6e6139c472f07f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d701036e71324d51222e24c7c6e6139c472f07f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8757d866aba7f89ed0db5ae9f0b52be4715348d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8757d866aba7f89ed0db5ae9f0b52be4715348d3", "html_url": "https://github.com/rust-lang/rust/commit/8757d866aba7f89ed0db5ae9f0b52be4715348d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8757d866aba7f89ed0db5ae9f0b52be4715348d3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9edbf3676b056e6cd4b887163703d454d5c3e8c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/9edbf3676b056e6cd4b887163703d454d5c3e8c3", "html_url": "https://github.com/rust-lang/rust/commit/9edbf3676b056e6cd4b887163703d454d5c3e8c3"}, {"sha": "49a6c230cb6ebfbafa282d59d119500c4064215e", "url": "https://api.github.com/repos/rust-lang/rust/commits/49a6c230cb6ebfbafa282d59d119500c4064215e", "html_url": "https://github.com/rust-lang/rust/commit/49a6c230cb6ebfbafa282d59d119500c4064215e"}], "stats": {"total": 365, "additions": 11, "deletions": 354}, "files": [{"sha": "d1dde153c47870457fbd5cc9b015ce1c2bbf3d29", "filename": "README.md", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8757d866aba7f89ed0db5ae9f0b52be4715348d3/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/8757d866aba7f89ed0db5ae9f0b52be4715348d3/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=8757d866aba7f89ed0db5ae9f0b52be4715348d3", "patch": "@@ -329,17 +329,6 @@ The remaining flags are for advanced use only, and more likely to change or be r\n Some of these are **unsound**, which means they can lead\n to Miri failing to detect cases of undefined behavior in a program.\n \n-* `-Zmiri-allow-uninit-numbers` disables the check to ensure that number types (integer and float\n-  types) always hold initialized data. (They must still be initialized when any actual operation,\n-  such as arithmetic, is performed.) Using this flag is **unsound** and\n-  [deprecated](https://github.com/rust-lang/miri/issues/2187). This has no effect when\n-  `-Zmiri-disable-validation` is present.\n-* `-Zmiri-allow-ptr-int-transmute` makes Miri more accepting of transmutation between pointers and\n-  integers via `mem::transmute` or union/pointer type punning. This has two effects: it disables the\n-  check against integers storing a pointer (i.e., data with provenance), thus allowing\n-  pointer-to-integer transmutation, and it treats integer-to-pointer transmutation as equivalent to\n-  a cast. Implies `-Zmiri-permissive-provenance`. Using this flag is **unsound** and\n-  [deprecated](https://github.com/rust-lang/miri/issues/2188).\n * `-Zmiri-disable-abi-check` disables checking [function ABI]. Using this flag\n   is **unsound**.\n * `-Zmiri-disable-alignment-check` disables checking pointer alignment, so you"}, {"sha": "0f464da175d03ea3180801dd50e504129178bff0", "filename": "src/bin/miri.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8757d866aba7f89ed0db5ae9f0b52be4715348d3/src%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8757d866aba7f89ed0db5ae9f0b52be4715348d3/src%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri.rs?ref=8757d866aba7f89ed0db5ae9f0b52be4715348d3", "patch": "@@ -328,19 +328,6 @@ fn main() {\n                 \"WARNING: the flag `-Zmiri-check-number-validity` no longer has any effect \\\n                         since it is now enabled by default\"\n             );\n-        } else if arg == \"-Zmiri-allow-uninit-numbers\" {\n-            eprintln!(\n-                \"WARNING: `-Zmiri-allow-uninit-numbers` is deprecated and planned to be removed. \\\n-                Please let us know at <https://github.com/rust-lang/miri/issues/2187> if you rely on this flag.\"\n-            );\n-            miri_config.allow_uninit_numbers = true;\n-        } else if arg == \"-Zmiri-allow-ptr-int-transmute\" {\n-            eprintln!(\n-                \"WARNING: `-Zmiri-allow-ptr-int-transmute` is deprecated and planned to be removed. \\\n-                Please let us know at <https://github.com/rust-lang/miri/issues/2188> if you rely on this flag.\"\n-            );\n-            miri_config.allow_ptr_int_transmute = true;\n-            miri_config.provenance_mode = ProvenanceMode::Permissive;\n         } else if arg == \"-Zmiri-disable-abi-check\" {\n             miri_config.check_abi = false;\n         } else if arg == \"-Zmiri-disable-isolation\" {\n@@ -378,7 +365,6 @@ fn main() {\n             eprintln!(\"WARNING: `-Zmiri-tag-raw-pointers` has no effect; it is enabled by default\");\n         } else if arg == \"-Zmiri-strict-provenance\" {\n             miri_config.provenance_mode = ProvenanceMode::Strict;\n-            miri_config.allow_ptr_int_transmute = false;\n         } else if arg == \"-Zmiri-permissive-provenance\" {\n             miri_config.provenance_mode = ProvenanceMode::Permissive;\n         } else if arg == \"-Zmiri-mute-stdout-stderr\" {"}, {"sha": "0ab85ef264d9d913dfe362831b1543e12e8c817a", "filename": "src/eval.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8757d866aba7f89ed0db5ae9f0b52be4715348d3/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8757d866aba7f89ed0db5ae9f0b52be4715348d3/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=8757d866aba7f89ed0db5ae9f0b52be4715348d3", "patch": "@@ -77,10 +77,6 @@ pub struct MiriConfig {\n     pub stacked_borrows: bool,\n     /// Controls alignment checking.\n     pub check_alignment: AlignmentCheck,\n-    /// Controls integer and float validity initialization checking.\n-    pub allow_uninit_numbers: bool,\n-    /// Controls how we treat ptr2int and int2ptr transmutes.\n-    pub allow_ptr_int_transmute: bool,\n     /// Controls function [ABI](Abi) checking.\n     pub check_abi: bool,\n     /// Action for an op requiring communication with the host.\n@@ -134,8 +130,6 @@ impl Default for MiriConfig {\n             validate: true,\n             stacked_borrows: true,\n             check_alignment: AlignmentCheck::Int,\n-            allow_uninit_numbers: false,\n-            allow_ptr_int_transmute: false,\n             check_abi: true,\n             isolated_op: IsolatedOp::Reject(RejectOpWith::Abort),\n             ignore_leaks: false,"}, {"sha": "0ffa067059f522291d9907c7c6141d258ab57d36", "filename": "src/intptrcast.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8757d866aba7f89ed0db5ae9f0b52be4715348d3/src%2Fintptrcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8757d866aba7f89ed0db5ae9f0b52be4715348d3/src%2Fintptrcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintptrcast.rs?ref=8757d866aba7f89ed0db5ae9f0b52be4715348d3", "patch": "@@ -107,19 +107,13 @@ impl<'mir, 'tcx> GlobalStateInner {\n     }\n \n     pub fn ptr_from_addr_transmute(\n-        ecx: &MiriEvalContext<'mir, 'tcx>,\n+        _ecx: &MiriEvalContext<'mir, 'tcx>,\n         addr: u64,\n     ) -> Pointer<Option<Tag>> {\n         trace!(\"Transmuting {:#x} to a pointer\", addr);\n \n-        let provenance = if ecx.machine.allow_ptr_int_transmute {\n-            // When we allow transmutes, treat them like casts: generating a wildcard pointer.\n-            Some(Tag::Wildcard)\n-        } else {\n-            // Usually, we consider transmuted pointers to be \"invalid\" (`None` provenance).\n-            None\n-        };\n-        Pointer::new(provenance, Size::from_bytes(addr))\n+        // We consider transmuted pointers to be \"invalid\" (`None` provenance).\n+        Pointer::new(None, Size::from_bytes(addr))\n     }\n \n     pub fn ptr_from_addr_cast("}, {"sha": "00d41cfb70a3802b901d21474e6df5b5b16edaaf", "filename": "src/machine.rs", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8757d866aba7f89ed0db5ae9f0b52be4715348d3/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8757d866aba7f89ed0db5ae9f0b52be4715348d3/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=8757d866aba7f89ed0db5ae9f0b52be4715348d3", "patch": "@@ -259,13 +259,6 @@ pub struct Evaluator<'mir, 'tcx> {\n     /// Whether to enforce the validity invariant.\n     pub(crate) validate: bool,\n \n-    /// Whether to allow uninitialized numbers (integers and floats).\n-    pub(crate) allow_uninit_numbers: bool,\n-\n-    /// Whether to allow ptr2int transmutes, and whether to allow *dereferencing* the result of an\n-    /// int2ptr transmute.\n-    pub(crate) allow_ptr_int_transmute: bool,\n-\n     /// Whether to enforce [ABI](Abi) of function calls.\n     pub(crate) enforce_abi: bool,\n \n@@ -372,8 +365,6 @@ impl<'mir, 'tcx> Evaluator<'mir, 'tcx> {\n             tls: TlsData::default(),\n             isolated_op: config.isolated_op,\n             validate: config.validate,\n-            allow_uninit_numbers: config.allow_uninit_numbers,\n-            allow_ptr_int_transmute: config.allow_ptr_int_transmute,\n             enforce_abi: config.check_abi,\n             file_handler: FileHandler::new(config.mute_stdout_stderr),\n             dir_handler: Default::default(),\n@@ -526,13 +517,13 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'mir, 'tcx> {\n     }\n \n     #[inline(always)]\n-    fn enforce_number_init(ecx: &MiriEvalContext<'mir, 'tcx>) -> bool {\n-        !ecx.machine.allow_uninit_numbers\n+    fn enforce_number_init(_ecx: &MiriEvalContext<'mir, 'tcx>) -> bool {\n+        true\n     }\n \n     #[inline(always)]\n-    fn enforce_number_no_provenance(ecx: &MiriEvalContext<'mir, 'tcx>) -> bool {\n-        !ecx.machine.allow_ptr_int_transmute\n+    fn enforce_number_no_provenance(_ecx: &MiriEvalContext<'mir, 'tcx>) -> bool {\n+        true\n     }\n \n     #[inline(always)]"}, {"sha": "708e0cafa90df624843c6a51933ab02ab24ac7d3", "filename": "tests/fail/validity/invalid_enum_tag_256variants_uninit.rs", "status": "removed", "additions": 0, "deletions": 272, "changes": 272, "blob_url": "https://github.com/rust-lang/rust/blob/9edbf3676b056e6cd4b887163703d454d5c3e8c3/tests%2Ffail%2Fvalidity%2Finvalid_enum_tag_256variants_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9edbf3676b056e6cd4b887163703d454d5c3e8c3/tests%2Ffail%2Fvalidity%2Finvalid_enum_tag_256variants_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fvalidity%2Finvalid_enum_tag_256variants_uninit.rs?ref=9edbf3676b056e6cd4b887163703d454d5c3e8c3", "patch": "@@ -1,272 +0,0 @@\n-// Even when uninit numbers are allowed, this enum is not.\n-//@compile-flags: -Zmiri-allow-uninit-numbers\n-#![allow(unused, deprecated, invalid_value)]\n-\n-#[derive(Copy, Clone)]\n-enum A {\n-    A0,\n-    A1,\n-    A2,\n-    A3,\n-    A4,\n-    A5,\n-    A6,\n-    A7,\n-    A8,\n-    A9,\n-    A10,\n-    A11,\n-    A12,\n-    A13,\n-    A14,\n-    A15,\n-    A16,\n-    A17,\n-    A18,\n-    A19,\n-    A20,\n-    A21,\n-    A22,\n-    A23,\n-    A24,\n-    A25,\n-    A26,\n-    A27,\n-    A28,\n-    A29,\n-    A30,\n-    A31,\n-    A32,\n-    A33,\n-    A34,\n-    A35,\n-    A36,\n-    A37,\n-    A38,\n-    A39,\n-    A40,\n-    A41,\n-    A42,\n-    A43,\n-    A44,\n-    A45,\n-    A46,\n-    A47,\n-    A48,\n-    A49,\n-    A50,\n-    A51,\n-    A52,\n-    A53,\n-    A54,\n-    A55,\n-    A56,\n-    A57,\n-    A58,\n-    A59,\n-    A60,\n-    A61,\n-    A62,\n-    A63,\n-    A64,\n-    A65,\n-    A66,\n-    A67,\n-    A68,\n-    A69,\n-    A70,\n-    A71,\n-    A72,\n-    A73,\n-    A74,\n-    A75,\n-    A76,\n-    A77,\n-    A78,\n-    A79,\n-    A80,\n-    A81,\n-    A82,\n-    A83,\n-    A84,\n-    A85,\n-    A86,\n-    A87,\n-    A88,\n-    A89,\n-    A90,\n-    A91,\n-    A92,\n-    A93,\n-    A94,\n-    A95,\n-    A96,\n-    A97,\n-    A98,\n-    A99,\n-    A100,\n-    A101,\n-    A102,\n-    A103,\n-    A104,\n-    A105,\n-    A106,\n-    A107,\n-    A108,\n-    A109,\n-    A110,\n-    A111,\n-    A112,\n-    A113,\n-    A114,\n-    A115,\n-    A116,\n-    A117,\n-    A118,\n-    A119,\n-    A120,\n-    A121,\n-    A122,\n-    A123,\n-    A124,\n-    A125,\n-    A126,\n-    A127,\n-    A128,\n-    A129,\n-    A130,\n-    A131,\n-    A132,\n-    A133,\n-    A134,\n-    A135,\n-    A136,\n-    A137,\n-    A138,\n-    A139,\n-    A140,\n-    A141,\n-    A142,\n-    A143,\n-    A144,\n-    A145,\n-    A146,\n-    A147,\n-    A148,\n-    A149,\n-    A150,\n-    A151,\n-    A152,\n-    A153,\n-    A154,\n-    A155,\n-    A156,\n-    A157,\n-    A158,\n-    A159,\n-    A160,\n-    A161,\n-    A162,\n-    A163,\n-    A164,\n-    A165,\n-    A166,\n-    A167,\n-    A168,\n-    A169,\n-    A170,\n-    A171,\n-    A172,\n-    A173,\n-    A174,\n-    A175,\n-    A176,\n-    A177,\n-    A178,\n-    A179,\n-    A180,\n-    A181,\n-    A182,\n-    A183,\n-    A184,\n-    A185,\n-    A186,\n-    A187,\n-    A188,\n-    A189,\n-    A190,\n-    A191,\n-    A192,\n-    A193,\n-    A194,\n-    A195,\n-    A196,\n-    A197,\n-    A198,\n-    A199,\n-    A200,\n-    A201,\n-    A202,\n-    A203,\n-    A204,\n-    A205,\n-    A206,\n-    A207,\n-    A208,\n-    A209,\n-    A210,\n-    A211,\n-    A212,\n-    A213,\n-    A214,\n-    A215,\n-    A216,\n-    A217,\n-    A218,\n-    A219,\n-    A220,\n-    A221,\n-    A222,\n-    A223,\n-    A224,\n-    A225,\n-    A226,\n-    A227,\n-    A228,\n-    A229,\n-    A230,\n-    A231,\n-    A232,\n-    A233,\n-    A234,\n-    A235,\n-    A236,\n-    A237,\n-    A238,\n-    A239,\n-    A240,\n-    A241,\n-    A242,\n-    A243,\n-    A244,\n-    A245,\n-    A246,\n-    A247,\n-    A248,\n-    A249,\n-    A250,\n-    A251,\n-    A252,\n-    A253,\n-    A254,\n-    A255,\n-}\n-\n-union MyUninit {\n-    init: (),\n-    uninit: A,\n-}\n-\n-fn main() {\n-    let _a = unsafe { MyUninit { init: () }.uninit }; //~ ERROR: constructing invalid value at .<enum-tag>: encountered uninitialized bytes, but expected a valid enum tag\n-}"}, {"sha": "c3ebf462b6d752244f7f16c636bef455200556bc", "filename": "tests/fail/validity/invalid_enum_tag_256variants_uninit.stderr", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9edbf3676b056e6cd4b887163703d454d5c3e8c3/tests%2Ffail%2Fvalidity%2Finvalid_enum_tag_256variants_uninit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9edbf3676b056e6cd4b887163703d454d5c3e8c3/tests%2Ffail%2Fvalidity%2Finvalid_enum_tag_256variants_uninit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fvalidity%2Finvalid_enum_tag_256variants_uninit.stderr?ref=9edbf3676b056e6cd4b887163703d454d5c3e8c3", "patch": "@@ -1,16 +0,0 @@\n-WARNING: `-Zmiri-allow-uninit-numbers` is deprecated and planned to be removed. Please let us know at <https://github.com/rust-lang/miri/issues/2187> if you rely on this flag.\n-error: Undefined Behavior: constructing invalid value at .<enum-tag>: encountered uninitialized bytes, but expected a valid enum tag\n-  --> $DIR/invalid_enum_tag_256variants_uninit.rs:LL:CC\n-   |\n-LL |     let _a = unsafe { MyUninit { init: () }.uninit };\n-   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<enum-tag>: encountered uninitialized bytes, but expected a valid enum tag\n-   |\n-   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n-   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n-   = note: inside `main` at $DIR/invalid_enum_tag_256variants_uninit.rs:LL:CC\n-\n-note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n-\n-error: aborting due to previous error\n-"}, {"sha": "f5fd27fa0d4ed187cc978781ad45218068255ab8", "filename": "tests/pass/move-uninit-primval.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8757d866aba7f89ed0db5ae9f0b52be4715348d3/tests%2Fpass%2Fmove-uninit-primval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8757d866aba7f89ed0db5ae9f0b52be4715348d3/tests%2Fpass%2Fmove-uninit-primval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fmove-uninit-primval.rs?ref=8757d866aba7f89ed0db5ae9f0b52be4715348d3", "patch": "@@ -1,13 +1,14 @@\n-//@compile-flags: -Zmiri-allow-uninit-numbers\n #![allow(deprecated)]\n \n+use std::mem;\n+\n struct Foo {\n-    _inner: i32,\n+    _inner: mem::MaybeUninit<i32>,\n }\n \n fn main() {\n     unsafe {\n-        let foo = Foo { _inner: std::mem::uninitialized() };\n+        let foo = Foo { _inner: mem::uninitialized() };\n         let _bar = foo;\n     }\n }"}, {"sha": "d9f2331fe7fa5f41735d34653ef3b9ec866efb8b", "filename": "tests/pass/move-uninit-primval.stderr", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9edbf3676b056e6cd4b887163703d454d5c3e8c3/tests%2Fpass%2Fmove-uninit-primval.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9edbf3676b056e6cd4b887163703d454d5c3e8c3/tests%2Fpass%2Fmove-uninit-primval.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fmove-uninit-primval.stderr?ref=9edbf3676b056e6cd4b887163703d454d5c3e8c3", "patch": "@@ -1 +0,0 @@\n-WARNING: `-Zmiri-allow-uninit-numbers` is deprecated and planned to be removed. Please let us know at <https://github.com/rust-lang/miri/issues/2187> if you rely on this flag."}, {"sha": "44f6fa2679853e9e851cc8ed44b40fb25945fc06", "filename": "tests/pass/uninit_number_ignored.rs", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9edbf3676b056e6cd4b887163703d454d5c3e8c3/tests%2Fpass%2Funinit_number_ignored.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9edbf3676b056e6cd4b887163703d454d5c3e8c3/tests%2Fpass%2Funinit_number_ignored.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Funinit_number_ignored.rs?ref=9edbf3676b056e6cd4b887163703d454d5c3e8c3", "patch": "@@ -1,8 +0,0 @@\n-//@compile-flags: -Zmiri-allow-uninit-numbers\n-// This test is adapted from https://github.com/rust-lang/miri/issues/1340#issue-600900312.\n-\n-fn main() {\n-    let _val1 = unsafe { std::mem::MaybeUninit::<usize>::uninit().assume_init() };\n-    let _val2 = unsafe { std::mem::MaybeUninit::<i32>::uninit().assume_init() };\n-    let _val3 = unsafe { std::mem::MaybeUninit::<f32>::uninit().assume_init() };\n-}"}, {"sha": "d9f2331fe7fa5f41735d34653ef3b9ec866efb8b", "filename": "tests/pass/uninit_number_ignored.stderr", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9edbf3676b056e6cd4b887163703d454d5c3e8c3/tests%2Fpass%2Funinit_number_ignored.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9edbf3676b056e6cd4b887163703d454d5c3e8c3/tests%2Fpass%2Funinit_number_ignored.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Funinit_number_ignored.stderr?ref=9edbf3676b056e6cd4b887163703d454d5c3e8c3", "patch": "@@ -1 +0,0 @@\n-WARNING: `-Zmiri-allow-uninit-numbers` is deprecated and planned to be removed. Please let us know at <https://github.com/rust-lang/miri/issues/2187> if you rely on this flag."}]}