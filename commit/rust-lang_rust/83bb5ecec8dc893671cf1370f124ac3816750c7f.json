{"sha": "83bb5ecec8dc893671cf1370f124ac3816750c7f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzYmI1ZWNlYzhkYzg5MzY3MWNmMTM3MGYxMjRhYzM4MTY3NTBjN2Y=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-25T17:35:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-25T17:35:33Z"}, "message": "Auto merge of #6202 - giraffate:fix_invalid_suggestion_in_needless_collect_test, r=flip1995\n\nFix an invalid suggestion in `needless_collect` test\n\nA test, https://github.com/rust-lang/rust-clippy/blob/master/tests/ui/needless_collect_indirect.rs#L11-L12, suggests following codes, but the suggested codes don't work. An example is here: https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=6947d9f2806a83f41cc5eb8e39b09d0b.\n```\nerror: avoid using `collect()` when not needed\n  --> $DIR/needless_collect_indirect.rs:11:5\n   |\nLL | /     let indirect_contains = sample.iter().collect::<VecDeque<_>>();\nLL | |     indirect_contains.contains(&&5);\n   | |____^\n   |\nhelp: Check if the original Iterator contains an element instead of collecting then checking\n   |\nLL |\nLL |     sample.iter().any(|x| x == &&5);\n```\n\nchangelog: none", "tree": {"sha": "13aaf4100e829e1503929f54d2a214f7740f7cc9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/13aaf4100e829e1503929f54d2a214f7740f7cc9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/83bb5ecec8dc893671cf1370f124ac3816750c7f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/83bb5ecec8dc893671cf1370f124ac3816750c7f", "html_url": "https://github.com/rust-lang/rust/commit/83bb5ecec8dc893671cf1370f124ac3816750c7f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/83bb5ecec8dc893671cf1370f124ac3816750c7f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15f6fb99e4fb7b80639fa6a1217c61c6e95e8792", "url": "https://api.github.com/repos/rust-lang/rust/commits/15f6fb99e4fb7b80639fa6a1217c61c6e95e8792", "html_url": "https://github.com/rust-lang/rust/commit/15f6fb99e4fb7b80639fa6a1217c61c6e95e8792"}, {"sha": "2f5d418011f80d99e0e4c8ddea3980b6cdc8332d", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f5d418011f80d99e0e4c8ddea3980b6cdc8332d", "html_url": "https://github.com/rust-lang/rust/commit/2f5d418011f80d99e0e4c8ddea3980b6cdc8332d"}], "stats": {"total": 32, "additions": 29, "deletions": 3}, "files": [{"sha": "c3f75f283f498494b27fd76d1c71c56fdd5a4cd3", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/83bb5ecec8dc893671cf1370f124ac3816750c7f/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83bb5ecec8dc893671cf1370f124ac3816750c7f/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=83bb5ecec8dc893671cf1370f124ac3816750c7f", "patch": "@@ -3001,7 +3001,14 @@ impl IterFunction {\n             IterFunctionKind::IntoIter => String::new(),\n             IterFunctionKind::Len => String::from(\".count()\"),\n             IterFunctionKind::IsEmpty => String::from(\".next().is_none()\"),\n-            IterFunctionKind::Contains(span) => format!(\".any(|x| x == {})\", snippet(cx, *span, \"..\")),\n+            IterFunctionKind::Contains(span) => {\n+                let s = snippet(cx, *span, \"..\");\n+                if let Some(stripped) = s.strip_prefix('&') {\n+                    format!(\".any(|x| x == {})\", stripped)\n+                } else {\n+                    format!(\".any(|x| x == *{})\", s)\n+                }\n+            },\n         }\n     }\n     fn get_suggestion_text(&self) -> &'static str {"}, {"sha": "4f6e53577273cf1b05cc33ca9aaed6a3260abf62", "filename": "tests/ui/needless_collect_indirect.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/83bb5ecec8dc893671cf1370f124ac3816750c7f/tests%2Fui%2Fneedless_collect_indirect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83bb5ecec8dc893671cf1370f124ac3816750c7f/tests%2Fui%2Fneedless_collect_indirect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_collect_indirect.rs?ref=83bb5ecec8dc893671cf1370f124ac3816750c7f", "patch": "@@ -16,4 +16,10 @@ fn main() {\n         .into_iter()\n         .map(|x| (*x, *x + 1))\n         .collect::<HashMap<_, _>>();\n+\n+    // #6202\n+    let a = \"a\".to_string();\n+    let sample = vec![a.clone(), \"b\".to_string(), \"c\".to_string()];\n+    let non_copy_contains = sample.into_iter().collect::<Vec<_>>();\n+    non_copy_contains.contains(&a);\n }"}, {"sha": "fb807da5f8abee5b3339dcfffe92eb6e16532264", "filename": "tests/ui/needless_collect_indirect.stderr", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/83bb5ecec8dc893671cf1370f124ac3816750c7f/tests%2Fui%2Fneedless_collect_indirect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83bb5ecec8dc893671cf1370f124ac3816750c7f/tests%2Fui%2Fneedless_collect_indirect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_collect_indirect.stderr?ref=83bb5ecec8dc893671cf1370f124ac3816750c7f", "patch": "@@ -48,8 +48,21 @@ LL | |     indirect_contains.contains(&&5);\n help: Check if the original Iterator contains an element instead of collecting then checking\n    |\n LL |     \n-LL |     sample.iter().any(|x| x == &&5);\n+LL |     sample.iter().any(|x| x == &5);\n    |\n \n-error: aborting due to 4 previous errors\n+error: avoid using `collect()` when not needed\n+  --> $DIR/needless_collect_indirect.rs:23:5\n+   |\n+LL | /     let non_copy_contains = sample.into_iter().collect::<Vec<_>>();\n+LL | |     non_copy_contains.contains(&a);\n+   | |____^\n+   |\n+help: Check if the original Iterator contains an element instead of collecting then checking\n+   |\n+LL |     \n+LL |     sample.into_iter().any(|x| x == a);\n+   |\n+\n+error: aborting due to 5 previous errors\n "}]}