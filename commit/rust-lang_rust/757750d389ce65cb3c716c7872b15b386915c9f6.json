{"sha": "757750d389ce65cb3c716c7872b15b386915c9f6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1Nzc1MGQzODljZTY1Y2IzYzcxNmM3ODcyYjE1YjM4NjkxNWM5ZjY=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-10-25T06:43:32Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-10-25T06:43:32Z"}, "message": "Merge #3346\n\n3346: Add lint for calling `mem::discriminant` on a non-enum type r=flip1995 a=HMPerson1\n\nAlso, if the type is a reference to an enum, we suggest removing `&`s and/or dereferencing.\r\n\r\nFixes #3342\n\nCo-authored-by: HMPerson1 <hmperson1@gmail.com>\nCo-authored-by: Philipp Krones <hello@philkrones.com>", "tree": {"sha": "cfe00b6ddb3e526f95ad8200b811e5991910fbc5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cfe00b6ddb3e526f95ad8200b811e5991910fbc5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/757750d389ce65cb3c716c7872b15b386915c9f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/757750d389ce65cb3c716c7872b15b386915c9f6", "html_url": "https://github.com/rust-lang/rust/commit/757750d389ce65cb3c716c7872b15b386915c9f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/757750d389ce65cb3c716c7872b15b386915c9f6/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "4c6201dceb31dac1fc5b6d3ed90e1cca240b958d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c6201dceb31dac1fc5b6d3ed90e1cca240b958d", "html_url": "https://github.com/rust-lang/rust/commit/4c6201dceb31dac1fc5b6d3ed90e1cca240b958d"}, {"sha": "d53e6f87e94c83651ad1e22f294f6f59d8d1b5d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/d53e6f87e94c83651ad1e22f294f6f59d8d1b5d1", "html_url": "https://github.com/rust-lang/rust/commit/d53e6f87e94c83651ad1e22f294f6f59d8d1b5d1"}], "stats": {"total": 262, "additions": 261, "deletions": 1}, "files": [{"sha": "9ad6514ee10b20caa4e6059d51fffadebbd26bab", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/757750d389ce65cb3c716c7872b15b386915c9f6/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/757750d389ce65cb3c716c7872b15b386915c9f6/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=757750d389ce65cb3c716c7872b15b386915c9f6", "patch": "@@ -744,6 +744,7 @@ All notable changes to this project will be documented in this file.\n [`match_same_arms`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#match_same_arms\n [`match_wild_err_arm`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#match_wild_err_arm\n [`maybe_infinite_iter`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#maybe_infinite_iter\n+[`mem_discriminant_non_enum`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#mem_discriminant_non_enum\n [`mem_forget`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#mem_forget\n [`mem_replace_option_with_none`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#mem_replace_option_with_none\n [`min_max`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#min_max"}, {"sha": "a13d8ecef666943d79a60f54611eab5c9b71e44a", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/757750d389ce65cb3c716c7872b15b386915c9f6/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/757750d389ce65cb3c716c7872b15b386915c9f6/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=757750d389ce65cb3c716c7872b15b386915c9f6", "patch": "@@ -9,7 +9,7 @@ We are currently in the process of discussing Clippy 1.0 via the RFC process in\n \n A collection of lints to catch common mistakes and improve your [Rust](https://github.com/rust-lang/rust) code.\n \n-[There are 281 lints included in this crate!](https://rust-lang-nursery.github.io/rust-clippy/master/index.html)\n+[There are 282 lints included in this crate!](https://rust-lang-nursery.github.io/rust-clippy/master/index.html)\n \n We have a bunch of lint categories to allow you to choose how much Clippy is supposed to ~~annoy~~ help you:\n "}, {"sha": "7a91890633a19d07c018e9542a2ade72836501b1", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/757750d389ce65cb3c716c7872b15b386915c9f6/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/757750d389ce65cb3c716c7872b15b386915c9f6/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=757750d389ce65cb3c716c7872b15b386915c9f6", "patch": "@@ -144,6 +144,7 @@ pub mod loops;\n pub mod map_clone;\n pub mod map_unit_fn;\n pub mod matches;\n+pub mod mem_discriminant;\n pub mod mem_forget;\n pub mod mem_replace;\n pub mod methods;\n@@ -398,6 +399,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n     reg.register_early_lint_pass(box doc::Doc::new(conf.doc_valid_idents.clone()));\n     reg.register_late_lint_pass(box neg_multiply::NegMultiply);\n     reg.register_early_lint_pass(box unsafe_removed_from_name::UnsafeNameRemoval);\n+    reg.register_late_lint_pass(box mem_discriminant::MemDiscriminant);\n     reg.register_late_lint_pass(box mem_forget::MemForget);\n     reg.register_late_lint_pass(box mem_replace::MemReplace);\n     reg.register_late_lint_pass(box arithmetic::Arithmetic::default());\n@@ -612,6 +614,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         matches::MATCH_REF_PATS,\n         matches::MATCH_WILD_ERR_ARM,\n         matches::SINGLE_MATCH,\n+        mem_discriminant::MEM_DISCRIMINANT_NON_ENUM,\n         mem_replace::MEM_REPLACE_OPTION_WITH_NONE,\n         methods::CHARS_LAST_CMP,\n         methods::CHARS_NEXT_CMP,\n@@ -924,6 +927,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         loops::NEVER_LOOP,\n         loops::REVERSE_RANGE_LOOP,\n         loops::WHILE_IMMUTABLE_CONDITION,\n+        mem_discriminant::MEM_DISCRIMINANT_NON_ENUM,\n         methods::CLONE_DOUBLE_REF,\n         methods::TEMPORARY_CSTRING_AS_PTR,\n         minmax::MIN_MAX,"}, {"sha": "c53c276991d1d02817f449ef7ac2ecf4321d6228", "filename": "clippy_lints/src/mem_discriminant.rs", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/757750d389ce65cb3c716c7872b15b386915c9f6/clippy_lints%2Fsrc%2Fmem_discriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/757750d389ce65cb3c716c7872b15b386915c9f6/clippy_lints%2Fsrc%2Fmem_discriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmem_discriminant.rs?ref=757750d389ce65cb3c716c7872b15b386915c9f6", "patch": "@@ -0,0 +1,95 @@\n+// Copyright 2014-2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+\n+use crate::rustc::hir::{Expr, ExprKind};\n+use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n+use crate::rustc_errors::Applicability;\n+use crate::utils::{match_def_path, opt_def_id, paths, snippet, span_lint_and_then, walk_ptrs_ty_depth};\n+use if_chain::if_chain;\n+\n+use std::iter;\n+\n+/// **What it does:** Checks for calls of `mem::discriminant()` on a non-enum type.\n+///\n+/// **Why is this bad?** The value of `mem::discriminant()` on non-enum types\n+/// is unspecified.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ```rust\n+/// mem::discriminant(&\"hello\");\n+/// mem::discriminant(&&Some(2));\n+/// ```\n+declare_clippy_lint! {\n+    pub MEM_DISCRIMINANT_NON_ENUM,\n+    correctness,\n+    \"calling mem::descriminant on non-enum type\"\n+}\n+\n+pub struct MemDiscriminant;\n+\n+impl LintPass for MemDiscriminant {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array![MEM_DISCRIMINANT_NON_ENUM]\n+    }\n+}\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MemDiscriminant {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n+        if_chain! {\n+            if let ExprKind::Call(ref func, ref func_args) = expr.node;\n+            // is `mem::discriminant`\n+            if let ExprKind::Path(ref func_qpath) = func.node;\n+            if let Some(def_id) = opt_def_id(cx.tables.qpath_def(func_qpath, func.hir_id));\n+            if match_def_path(cx.tcx, def_id, &paths::MEM_DISCRIMINANT);\n+            // type is non-enum\n+            let ty_param = cx.tables.node_substs(func.hir_id).type_at(0);\n+            if !ty_param.is_enum();\n+\n+            then {\n+                span_lint_and_then(\n+                    cx,\n+                    MEM_DISCRIMINANT_NON_ENUM,\n+                    expr.span,\n+                    &format!(\"calling `mem::discriminant` on non-enum type `{}`\", ty_param),\n+                    |db| {\n+                        // if this is a reference to an enum, suggest dereferencing\n+                        let (base_ty, ptr_depth) = walk_ptrs_ty_depth(ty_param);\n+                        if ptr_depth >= 1 && base_ty.is_enum() {\n+                            let param = &func_args[0];\n+\n+                            // cancel out '&'s first\n+                            let mut derefs_needed = ptr_depth;\n+                            let mut cur_expr = param;\n+                            while derefs_needed > 0  {\n+                                if let ExprKind::AddrOf(_, ref inner_expr) = cur_expr.node {\n+                                    derefs_needed -= 1;\n+                                    cur_expr = inner_expr;\n+                                } else {\n+                                    break;\n+                                }\n+                            }\n+\n+                            let derefs: String = iter::repeat('*').take(derefs_needed).collect();\n+                            db.span_suggestion_with_applicability(\n+                                param.span,\n+                                \"try dereferencing\",\n+                                format!(\"{}{}\", derefs, snippet(cx, cur_expr.span, \"<param>\")),\n+                                Applicability::MachineApplicable,\n+                            );\n+                        }\n+                    },\n+                )\n+            }\n+        }\n+    }\n+}"}, {"sha": "474f16679a7278bd4333a382dd19202d066752ae", "filename": "clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/757750d389ce65cb3c716c7872b15b386915c9f6/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/757750d389ce65cb3c716c7872b15b386915c9f6/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=757750d389ce65cb3c716c7872b15b386915c9f6", "patch": "@@ -55,6 +55,7 @@ pub const LATE_CONTEXT: [&str; 4] = [\"rustc\", \"lint\", \"context\", \"LateContext\"];\n pub const LINKED_LIST: [&str; 4] = [\"alloc\", \"collections\", \"linked_list\", \"LinkedList\"];\n pub const LINT: [&str; 3] = [\"rustc\", \"lint\", \"Lint\"];\n pub const LINT_ARRAY: [&str; 3] = [\"rustc\", \"lint\", \"LintArray\"];\n+pub const MEM_DISCRIMINANT: [&str; 3] = [\"core\", \"mem\", \"discriminant\"];\n pub const MEM_FORGET: [&str; 3] = [\"core\", \"mem\", \"forget\"];\n pub const MEM_REPLACE: [&str; 3] = [\"core\", \"mem\", \"replace\"];\n pub const MEM_UNINIT: [&str; 3] = [\"core\", \"mem\", \"uninitialized\"];"}, {"sha": "5ddd90ac8b57350d9ec94ac59b96a13270d44582", "filename": "tests/ui/mem_discriminant.rs", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/757750d389ce65cb3c716c7872b15b386915c9f6/tests%2Fui%2Fmem_discriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/757750d389ce65cb3c716c7872b15b386915c9f6/tests%2Fui%2Fmem_discriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmem_discriminant.rs?ref=757750d389ce65cb3c716c7872b15b386915c9f6", "patch": "@@ -0,0 +1,55 @@\n+// Copyright 2014-2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+\n+#![deny(clippy::mem_discriminant_non_enum)]\n+\n+use std::mem;\n+\n+enum Foo {\n+    One(usize),\n+    Two(u8),\n+}\n+\n+struct A(Foo);\n+\n+fn main() {\n+    // bad\n+    mem::discriminant(&\"hello\");\n+    mem::discriminant(&&Some(2));\n+    mem::discriminant(&&None::<u8>);\n+    mem::discriminant(&&Foo::One(5));\n+    mem::discriminant(&&Foo::Two(5));\n+    mem::discriminant(&A(Foo::One(0)));\n+\n+    let ro = &Some(3);\n+    let rro = &ro;\n+    mem::discriminant(&ro);\n+    mem::discriminant(rro);\n+    mem::discriminant(&rro);\n+\n+    macro_rules! mem_discriminant_but_in_a_macro {\n+        ($param:expr) => (mem::discriminant($param))\n+    }\n+\n+    mem_discriminant_but_in_a_macro!(&rro);\n+\n+    let rrrrro = &&&rro;\n+    mem::discriminant(&rrrrro);\n+    mem::discriminant(*rrrrro);\n+\n+    // ok\n+    mem::discriminant(&Some(2));\n+    mem::discriminant(&None::<u8>);\n+    mem::discriminant(&Foo::One(5));\n+    mem::discriminant(&Foo::Two(5));\n+    mem::discriminant(ro);\n+    mem::discriminant(*rro);\n+    mem::discriminant(****rrrrro);\n+}"}, {"sha": "6414e4c96d63bdacb54d42d4644c26b51221ae7c", "filename": "tests/ui/mem_discriminant.stderr", "status": "added", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/757750d389ce65cb3c716c7872b15b386915c9f6/tests%2Fui%2Fmem_discriminant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/757750d389ce65cb3c716c7872b15b386915c9f6/tests%2Fui%2Fmem_discriminant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmem_discriminant.stderr?ref=757750d389ce65cb3c716c7872b15b386915c9f6", "patch": "@@ -0,0 +1,104 @@\n+error: calling `mem::discriminant` on non-enum type `&str`\n+  --> $DIR/mem_discriminant.rs:24:5\n+   |\n+24 |     mem::discriminant(&\"hello\");\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/mem_discriminant.rs:11:9\n+   |\n+11 | #![deny(clippy::mem_discriminant_non_enum)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: calling `mem::discriminant` on non-enum type `&std::option::Option<i32>`\n+  --> $DIR/mem_discriminant.rs:25:5\n+   |\n+25 |     mem::discriminant(&&Some(2));\n+   |     ^^^^^^^^^^^^^^^^^^---------^\n+   |                       |\n+   |                       help: try dereferencing: `&Some(2)`\n+\n+error: calling `mem::discriminant` on non-enum type `&std::option::Option<u8>`\n+  --> $DIR/mem_discriminant.rs:26:5\n+   |\n+26 |     mem::discriminant(&&None::<u8>);\n+   |     ^^^^^^^^^^^^^^^^^^------------^\n+   |                       |\n+   |                       help: try dereferencing: `&None::<u8>`\n+\n+error: calling `mem::discriminant` on non-enum type `&Foo`\n+  --> $DIR/mem_discriminant.rs:27:5\n+   |\n+27 |     mem::discriminant(&&Foo::One(5));\n+   |     ^^^^^^^^^^^^^^^^^^-------------^\n+   |                       |\n+   |                       help: try dereferencing: `&Foo::One(5)`\n+\n+error: calling `mem::discriminant` on non-enum type `&Foo`\n+  --> $DIR/mem_discriminant.rs:28:5\n+   |\n+28 |     mem::discriminant(&&Foo::Two(5));\n+   |     ^^^^^^^^^^^^^^^^^^-------------^\n+   |                       |\n+   |                       help: try dereferencing: `&Foo::Two(5)`\n+\n+error: calling `mem::discriminant` on non-enum type `A`\n+  --> $DIR/mem_discriminant.rs:29:5\n+   |\n+29 |     mem::discriminant(&A(Foo::One(0)));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: calling `mem::discriminant` on non-enum type `&std::option::Option<i32>`\n+  --> $DIR/mem_discriminant.rs:33:5\n+   |\n+33 |     mem::discriminant(&ro);\n+   |     ^^^^^^^^^^^^^^^^^^---^\n+   |                       |\n+   |                       help: try dereferencing: `ro`\n+\n+error: calling `mem::discriminant` on non-enum type `&std::option::Option<i32>`\n+  --> $DIR/mem_discriminant.rs:34:5\n+   |\n+34 |     mem::discriminant(rro);\n+   |     ^^^^^^^^^^^^^^^^^^---^\n+   |                       |\n+   |                       help: try dereferencing: `*rro`\n+\n+error: calling `mem::discriminant` on non-enum type `&&std::option::Option<i32>`\n+  --> $DIR/mem_discriminant.rs:35:5\n+   |\n+35 |     mem::discriminant(&rro);\n+   |     ^^^^^^^^^^^^^^^^^^----^\n+   |                       |\n+   |                       help: try dereferencing: `*rro`\n+\n+error: calling `mem::discriminant` on non-enum type `&&std::option::Option<i32>`\n+  --> $DIR/mem_discriminant.rs:38:27\n+   |\n+38 |         ($param:expr) => (mem::discriminant($param))\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^\n+...\n+41 |     mem_discriminant_but_in_a_macro!(&rro);\n+   |     ---------------------------------------\n+   |     |                                |\n+   |     |                                help: try dereferencing: `*rro`\n+   |     in this macro invocation\n+\n+error: calling `mem::discriminant` on non-enum type `&&&&&std::option::Option<i32>`\n+  --> $DIR/mem_discriminant.rs:44:5\n+   |\n+44 |     mem::discriminant(&rrrrro);\n+   |     ^^^^^^^^^^^^^^^^^^-------^\n+   |                       |\n+   |                       help: try dereferencing: `****rrrrro`\n+\n+error: calling `mem::discriminant` on non-enum type `&&&std::option::Option<i32>`\n+  --> $DIR/mem_discriminant.rs:45:5\n+   |\n+45 |     mem::discriminant(*rrrrro);\n+   |     ^^^^^^^^^^^^^^^^^^-------^\n+   |                       |\n+   |                       help: try dereferencing: `****rrrrro`\n+\n+error: aborting due to 12 previous errors\n+"}]}