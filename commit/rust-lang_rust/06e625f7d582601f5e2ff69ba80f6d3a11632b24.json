{"sha": "06e625f7d582601f5e2ff69ba80f6d3a11632b24", "node_id": "C_kwDOAAsO6NoAKDA2ZTYyNWY3ZDU4MjYwMWY1ZTJmZjY5YmE4MGY2ZDNhMTE2MzJiMjQ", "commit": {"author": {"name": "John Kugelman", "email": "john@kugelman.name", "date": "2021-10-11T17:57:38Z"}, "committer": {"name": "John Kugelman", "email": "john@kugelman.name", "date": "2021-10-11T17:57:38Z"}, "message": "Add #[must_use] to as_type conversions", "tree": {"sha": "d2b9b88fb89cf0f074feeaa191cb9e22a4a9eee5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d2b9b88fb89cf0f074feeaa191cb9e22a4a9eee5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06e625f7d582601f5e2ff69ba80f6d3a11632b24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06e625f7d582601f5e2ff69ba80f6d3a11632b24", "html_url": "https://github.com/rust-lang/rust/commit/06e625f7d582601f5e2ff69ba80f6d3a11632b24", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06e625f7d582601f5e2ff69ba80f6d3a11632b24/comments", "author": {"login": "jkugelman", "id": 4551859, "node_id": "MDQ6VXNlcjQ1NTE4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/4551859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jkugelman", "html_url": "https://github.com/jkugelman", "followers_url": "https://api.github.com/users/jkugelman/followers", "following_url": "https://api.github.com/users/jkugelman/following{/other_user}", "gists_url": "https://api.github.com/users/jkugelman/gists{/gist_id}", "starred_url": "https://api.github.com/users/jkugelman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jkugelman/subscriptions", "organizations_url": "https://api.github.com/users/jkugelman/orgs", "repos_url": "https://api.github.com/users/jkugelman/repos", "events_url": "https://api.github.com/users/jkugelman/events{/privacy}", "received_events_url": "https://api.github.com/users/jkugelman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jkugelman", "id": 4551859, "node_id": "MDQ6VXNlcjQ1NTE4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/4551859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jkugelman", "html_url": "https://github.com/jkugelman", "followers_url": "https://api.github.com/users/jkugelman/followers", "following_url": "https://api.github.com/users/jkugelman/following{/other_user}", "gists_url": "https://api.github.com/users/jkugelman/gists{/gist_id}", "starred_url": "https://api.github.com/users/jkugelman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jkugelman/subscriptions", "organizations_url": "https://api.github.com/users/jkugelman/orgs", "repos_url": "https://api.github.com/users/jkugelman/repos", "events_url": "https://api.github.com/users/jkugelman/events{/privacy}", "received_events_url": "https://api.github.com/users/jkugelman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "86d6d2b7389fe1b339402c1798edae8b695fc9ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/86d6d2b7389fe1b339402c1798edae8b695fc9ef", "html_url": "https://github.com/rust-lang/rust/commit/86d6d2b7389fe1b339402c1798edae8b695fc9ef"}], "stats": {"total": 54, "additions": 54, "deletions": 0}, "files": [{"sha": "9bc9c6ef1629f1e4ba8e7cd66b63b872bea42358", "filename": "library/alloc/src/collections/binary_heap.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/06e625f7d582601f5e2ff69ba80f6d3a11632b24/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06e625f7d582601f5e2ff69ba80f6d3a11632b24/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs?ref=06e625f7d582601f5e2ff69ba80f6d3a11632b24", "patch": "@@ -1007,6 +1007,7 @@ impl<T> BinaryHeap<T> {\n     ///\n     /// io::sink().write(heap.as_slice()).unwrap();\n     /// ```\n+    #[must_use]\n     #[unstable(feature = \"binary_heap_as_slice\", issue = \"83659\")]\n     pub fn as_slice(&self) -> &[T] {\n         self.data.as_slice()"}, {"sha": "82e866c95045702e2a5b3f8fbfe08e678182b894", "filename": "library/alloc/src/collections/linked_list.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/06e625f7d582601f5e2ff69ba80f6d3a11632b24/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06e625f7d582601f5e2ff69ba80f6d3a11632b24/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs?ref=06e625f7d582601f5e2ff69ba80f6d3a11632b24", "patch": "@@ -1384,6 +1384,7 @@ impl<'a, T> CursorMut<'a, T> {\n     /// The lifetime of the returned `Cursor` is bound to that of the\n     /// `CursorMut`, which means it cannot outlive the `CursorMut` and that the\n     /// `CursorMut` is frozen for the lifetime of the `Cursor`.\n+    #[must_use]\n     #[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]\n     pub fn as_cursor(&self) -> Cursor<'_, T> {\n         Cursor { list: self.list, current: self.current, index: self.index }"}, {"sha": "c337b7c5a59018b04c6be590ef72e7bde04d309f", "filename": "library/alloc/src/rc.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/06e625f7d582601f5e2ff69ba80f6d3a11632b24/library%2Falloc%2Fsrc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06e625f7d582601f5e2ff69ba80f6d3a11632b24/library%2Falloc%2Fsrc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc.rs?ref=06e625f7d582601f5e2ff69ba80f6d3a11632b24", "patch": "@@ -2087,6 +2087,7 @@ impl<T: ?Sized> Weak<T> {\n     /// ```\n     ///\n     /// [`null`]: ptr::null\n+    #[must_use]\n     #[stable(feature = \"rc_as_ptr\", since = \"1.45.0\")]\n     pub fn as_ptr(&self) -> *const T {\n         let ptr: *mut RcBox<T> = NonNull::as_ptr(self.ptr);"}, {"sha": "4be8dddeda83d4c0b726aa35fa6b57ef75268163", "filename": "library/alloc/src/string.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/06e625f7d582601f5e2ff69ba80f6d3a11632b24/library%2Falloc%2Fsrc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06e625f7d582601f5e2ff69ba80f6d3a11632b24/library%2Falloc%2Fsrc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstring.rs?ref=06e625f7d582601f5e2ff69ba80f6d3a11632b24", "patch": "@@ -800,6 +800,7 @@ impl String {\n     /// assert_eq!(\"foo\", s.as_str());\n     /// ```\n     #[inline]\n+    #[must_use]\n     #[stable(feature = \"string_as_str\", since = \"1.7.0\")]\n     pub fn as_str(&self) -> &str {\n         self\n@@ -820,6 +821,7 @@ impl String {\n     /// assert_eq!(\"FOOBAR\", s_mut_str);\n     /// ```\n     #[inline]\n+    #[must_use]\n     #[stable(feature = \"string_as_str\", since = \"1.7.0\")]\n     pub fn as_mut_str(&mut self) -> &mut str {\n         self\n@@ -1160,6 +1162,7 @@ impl String {\n     /// assert_eq!(&[104, 101, 108, 108, 111], s.as_bytes());\n     /// ```\n     #[inline]\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn as_bytes(&self) -> &[u8] {\n         &self.vec\n@@ -1763,6 +1766,7 @@ impl FromUtf8Error {\n     ///\n     /// assert_eq!(&[0, 159], value.unwrap_err().as_bytes());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"from_utf8_error_as_bytes\", since = \"1.26.0\")]\n     pub fn as_bytes(&self) -> &[u8] {\n         &self.bytes[..]\n@@ -2779,6 +2783,7 @@ impl<'a> Drain<'a> {\n     /// let _ = drain.next().unwrap();\n     /// assert_eq!(drain.as_str(), \"bc\");\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"string_drain_as_str\", since = \"1.55.0\")]\n     pub fn as_str(&self) -> &str {\n         self.iter.as_str()"}, {"sha": "d0bbab514665fa5bd430f90ff4d0ad05d3a26d97", "filename": "library/alloc/src/sync.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06e625f7d582601f5e2ff69ba80f6d3a11632b24/library%2Falloc%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06e625f7d582601f5e2ff69ba80f6d3a11632b24/library%2Falloc%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync.rs?ref=06e625f7d582601f5e2ff69ba80f6d3a11632b24", "patch": "@@ -822,6 +822,7 @@ impl<T: ?Sized> Arc<T> {\n     /// assert_eq!(x_ptr, Arc::as_ptr(&y));\n     /// assert_eq!(unsafe { &*x_ptr }, \"hello\");\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rc_as_ptr\", since = \"1.45.0\")]\n     pub fn as_ptr(this: &Self) -> *const T {\n         let ptr: *mut ArcInner<T> = NonNull::as_ptr(this.ptr);\n@@ -1718,6 +1719,7 @@ impl<T: ?Sized> Weak<T> {\n     /// ```\n     ///\n     /// [`null`]: core::ptr::null \"ptr::null\"\n+    #[must_use]\n     #[stable(feature = \"weak_into_raw\", since = \"1.45.0\")]\n     pub fn as_ptr(&self) -> *const T {\n         let ptr: *mut ArcInner<T> = NonNull::as_ptr(self.ptr);"}, {"sha": "e643940d017ba690b5873a84ac36de9d86e47a95", "filename": "library/alloc/src/vec/drain.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/06e625f7d582601f5e2ff69ba80f6d3a11632b24/library%2Falloc%2Fsrc%2Fvec%2Fdrain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06e625f7d582601f5e2ff69ba80f6d3a11632b24/library%2Falloc%2Fsrc%2Fvec%2Fdrain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fdrain.rs?ref=06e625f7d582601f5e2ff69ba80f6d3a11632b24", "patch": "@@ -52,6 +52,7 @@ impl<'a, T, A: Allocator> Drain<'a, T, A> {\n     /// let _ = drain.next().unwrap();\n     /// assert_eq!(drain.as_slice(), &['b', 'c']);\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"vec_drain_as_slice\", since = \"1.46.0\")]\n     pub fn as_slice(&self) -> &[T] {\n         self.iter.as_slice()"}, {"sha": "b8ad7720e0c554590226f08f3d3da7dcbc4b307e", "filename": "library/core/src/fmt/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/06e625f7d582601f5e2ff69ba80f6d3a11632b24/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06e625f7d582601f5e2ff69ba80f6d3a11632b24/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs?ref=06e625f7d582601f5e2ff69ba80f6d3a11632b24", "patch": "@@ -491,6 +491,7 @@ impl<'a> Arguments<'a> {\n     /// ```\n     #[stable(feature = \"fmt_as_str\", since = \"1.52.0\")]\n     #[rustc_const_unstable(feature = \"const_arguments_as_str\", issue = \"none\")]\n+    #[must_use]\n     #[inline]\n     pub const fn as_str(&self) -> Option<&'static str> {\n         match (self.pieces, self.args) {"}, {"sha": "401267f5613ee0c478ec470f4fa7496527004478", "filename": "library/core/src/option.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06e625f7d582601f5e2ff69ba80f6d3a11632b24/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06e625f7d582601f5e2ff69ba80f6d3a11632b24/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=06e625f7d582601f5e2ff69ba80f6d3a11632b24", "patch": "@@ -657,6 +657,7 @@ impl<T> Option<T> {\n     ///\n     /// [&]: reference \"shared reference\"\n     #[inline]\n+    #[must_use]\n     #[stable(feature = \"pin\", since = \"1.33.0\")]\n     pub fn as_pin_ref(self: Pin<&Self>) -> Option<Pin<&T>> {\n         // SAFETY: `x` is guaranteed to be pinned because it comes from `self`\n@@ -668,6 +669,7 @@ impl<T> Option<T> {\n     ///\n     /// [&mut]: reference \"mutable reference\"\n     #[inline]\n+    #[must_use]\n     #[stable(feature = \"pin\", since = \"1.33.0\")]\n     pub fn as_pin_mut(self: Pin<&mut Self>) -> Option<Pin<&mut T>> {\n         // SAFETY: `get_unchecked_mut` is never used to move the `Option` inside `self`."}, {"sha": "af9daf829740164bb3cba41765427a09fa415d20", "filename": "library/core/src/ptr/non_null.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/06e625f7d582601f5e2ff69ba80f6d3a11632b24/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06e625f7d582601f5e2ff69ba80f6d3a11632b24/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs?ref=06e625f7d582601f5e2ff69ba80f6d3a11632b24", "patch": "@@ -119,6 +119,7 @@ impl<T: Sized> NonNull<T> {\n     ///\n     /// [the module documentation]: crate::ptr#safety\n     #[inline]\n+    #[must_use]\n     #[unstable(feature = \"ptr_as_uninit\", issue = \"75402\")]\n     pub unsafe fn as_uninit_ref<'a>(&self) -> &'a MaybeUninit<T> {\n         // SAFETY: the caller must guarantee that `self` meets all the\n@@ -151,6 +152,7 @@ impl<T: Sized> NonNull<T> {\n     ///\n     /// [the module documentation]: crate::ptr#safety\n     #[inline]\n+    #[must_use]\n     #[unstable(feature = \"ptr_as_uninit\", issue = \"75402\")]\n     pub unsafe fn as_uninit_mut<'a>(&mut self) -> &'a mut MaybeUninit<T> {\n         // SAFETY: the caller must guarantee that `self` meets all the\n@@ -264,6 +266,7 @@ impl<T: ?Sized> NonNull<T> {\n     /// ```\n     #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n     #[rustc_const_stable(feature = \"const_nonnull_as_ptr\", since = \"1.32.0\")]\n+    #[must_use]\n     #[inline]\n     pub const fn as_ptr(self) -> *mut T {\n         self.pointer as *mut T\n@@ -310,6 +313,7 @@ impl<T: ?Sized> NonNull<T> {\n     ///\n     /// [the module documentation]: crate::ptr#safety\n     #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n+    #[must_use]\n     #[inline]\n     pub unsafe fn as_ref<'a>(&self) -> &'a T {\n         // SAFETY: the caller must guarantee that `self` meets all the\n@@ -359,6 +363,7 @@ impl<T: ?Sized> NonNull<T> {\n     ///\n     /// [the module documentation]: crate::ptr#safety\n     #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n+    #[must_use]\n     #[inline]\n     pub unsafe fn as_mut<'a>(&mut self) -> &'a mut T {\n         // SAFETY: the caller must guarantee that `self` meets all the\n@@ -455,6 +460,7 @@ impl<T> NonNull<[T]> {\n     /// assert_eq!(slice.as_non_null_ptr(), NonNull::new(1 as *mut i8).unwrap());\n     /// ```\n     #[inline]\n+    #[must_use]\n     #[unstable(feature = \"slice_ptr_get\", issue = \"74265\")]\n     #[rustc_const_unstable(feature = \"slice_ptr_get\", issue = \"74265\")]\n     pub const fn as_non_null_ptr(self) -> NonNull<T> {\n@@ -474,6 +480,7 @@ impl<T> NonNull<[T]> {\n     /// assert_eq!(slice.as_mut_ptr(), 1 as *mut i8);\n     /// ```\n     #[inline]\n+    #[must_use]\n     #[unstable(feature = \"slice_ptr_get\", issue = \"74265\")]\n     #[rustc_const_unstable(feature = \"slice_ptr_get\", issue = \"74265\")]\n     pub const fn as_mut_ptr(self) -> *mut T {\n@@ -518,6 +525,7 @@ impl<T> NonNull<[T]> {\n     ///\n     /// [valid]: crate::ptr#safety\n     #[inline]\n+    #[must_use]\n     #[unstable(feature = \"ptr_as_uninit\", issue = \"75402\")]\n     pub unsafe fn as_uninit_slice<'a>(&self) -> &'a [MaybeUninit<T>] {\n         // SAFETY: the caller must uphold the safety contract for `as_uninit_slice`.\n@@ -579,6 +587,7 @@ impl<T> NonNull<[T]> {\n     /// # Ok::<_, std::alloc::AllocError>(())\n     /// ```\n     #[inline]\n+    #[must_use]\n     #[unstable(feature = \"ptr_as_uninit\", issue = \"75402\")]\n     pub unsafe fn as_uninit_slice_mut<'a>(&self) -> &'a mut [MaybeUninit<T>] {\n         // SAFETY: the caller must uphold the safety contract for `as_uninit_slice_mut`."}, {"sha": "5baceefb504a50d39a71216be6507d7137ba950f", "filename": "library/core/src/ptr/unique.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06e625f7d582601f5e2ff69ba80f6d3a11632b24/library%2Fcore%2Fsrc%2Fptr%2Funique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06e625f7d582601f5e2ff69ba80f6d3a11632b24/library%2Fcore%2Fsrc%2Fptr%2Funique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Funique.rs?ref=06e625f7d582601f5e2ff69ba80f6d3a11632b24", "patch": "@@ -112,6 +112,7 @@ impl<T: ?Sized> Unique<T> {\n     /// The resulting lifetime is bound to self so this behaves \"as if\"\n     /// it were actually an instance of T that is getting borrowed. If a longer\n     /// (unbound) lifetime is needed, use `&*my_ptr.as_ptr()`.\n+    #[must_use]\n     #[inline]\n     pub unsafe fn as_ref(&self) -> &T {\n         // SAFETY: the caller must guarantee that `self` meets all the\n@@ -124,6 +125,7 @@ impl<T: ?Sized> Unique<T> {\n     /// The resulting lifetime is bound to self so this behaves \"as if\"\n     /// it were actually an instance of T that is getting borrowed. If a longer\n     /// (unbound) lifetime is needed, use `&mut *my_ptr.as_ptr()`.\n+    #[must_use]\n     #[inline]\n     pub unsafe fn as_mut(&mut self) -> &mut T {\n         // SAFETY: the caller must guarantee that `self` meets all the"}, {"sha": "dbf97851b03e4e78294871ae94ba0d92f9836529", "filename": "library/core/src/slice/iter.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06e625f7d582601f5e2ff69ba80f6d3a11632b24/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06e625f7d582601f5e2ff69ba80f6d3a11632b24/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs?ref=06e625f7d582601f5e2ff69ba80f6d3a11632b24", "patch": "@@ -124,6 +124,7 @@ impl<'a, T> Iter<'a, T> {\n     /// // Now `as_slice` returns \"[2, 3]\":\n     /// println!(\"{:?}\", iter.as_slice());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"iter_to_slice\", since = \"1.4.0\")]\n     pub fn as_slice(&self) -> &'a [T] {\n         self.make_slice()\n@@ -298,6 +299,7 @@ impl<'a, T> IterMut<'a, T> {\n     /// // Now `as_slice` returns \"[2, 3]\":\n     /// assert_eq!(iter.as_slice(), &[2, 3]);\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"slice_iter_mut_as_slice\", since = \"1.53.0\")]\n     pub fn as_slice(&self) -> &[T] {\n         self.make_slice()"}, {"sha": "94cb81e9d41a1f2543c7b1afab56eccb0692b85d", "filename": "library/core/src/str/iter.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/06e625f7d582601f5e2ff69ba80f6d3a11632b24/library%2Fcore%2Fsrc%2Fstr%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06e625f7d582601f5e2ff69ba80f6d3a11632b24/library%2Fcore%2Fsrc%2Fstr%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fiter.rs?ref=06e625f7d582601f5e2ff69ba80f6d3a11632b24", "patch": "@@ -109,6 +109,7 @@ impl<'a> Chars<'a> {\n     /// assert_eq!(chars.as_str(), \"\");\n     /// ```\n     #[stable(feature = \"iter_to_slice\", since = \"1.4.0\")]\n+    #[must_use]\n     #[inline]\n     pub fn as_str(&self) -> &'a str {\n         // SAFETY: `Chars` is only made from a str, which guarantees the iter is valid UTF-8.\n@@ -185,6 +186,7 @@ impl<'a> CharIndices<'a> {\n     /// This has the same lifetime as the original slice, and so the\n     /// iterator can continue to be used while this exists.\n     #[stable(feature = \"iter_to_slice\", since = \"1.4.0\")]\n+    #[must_use]\n     #[inline]\n     pub fn as_str(&self) -> &'a str {\n         self.iter.as_str()\n@@ -1247,6 +1249,7 @@ impl<'a> SplitWhitespace<'a> {\n     /// assert_eq!(split.as_str(), \"\");\n     /// ```\n     #[inline]\n+    #[must_use]\n     #[unstable(feature = \"str_split_whitespace_as_str\", issue = \"77998\")]\n     pub fn as_str(&self) -> &'a str {\n         self.inner.iter.as_str()\n@@ -1302,6 +1305,7 @@ impl<'a> SplitAsciiWhitespace<'a> {\n     /// assert_eq!(split.as_str(), \"\");\n     /// ```\n     #[inline]\n+    #[must_use]\n     #[unstable(feature = \"str_split_whitespace_as_str\", issue = \"77998\")]\n     pub fn as_str(&self) -> &'a str {\n         if self.inner.iter.iter.finished {"}, {"sha": "607a0179ff4b9a515ca69bd02522291ea1e42788", "filename": "library/core/src/str/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/06e625f7d582601f5e2ff69ba80f6d3a11632b24/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06e625f7d582601f5e2ff69ba80f6d3a11632b24/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs?ref=06e625f7d582601f5e2ff69ba80f6d3a11632b24", "patch": "@@ -230,6 +230,7 @@ impl str {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_stable(feature = \"str_as_bytes\", since = \"1.39.0\")]\n+    #[must_use]\n     #[inline(always)]\n     #[allow(unused_attributes)]\n     pub const fn as_bytes(&self) -> &[u8] {\n@@ -274,6 +275,7 @@ impl str {\n     /// assert_eq!(\"\ud83c\udf54\u2208\ud83c\udf0f\", s);\n     /// ```\n     #[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]\n+    #[must_use]\n     #[inline(always)]\n     pub unsafe fn as_bytes_mut(&mut self) -> &mut [u8] {\n         // SAFETY: the cast from `&str` to `&[u8]` is safe since `str`\n@@ -304,6 +306,7 @@ impl str {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_stable(feature = \"rustc_str_as_ptr\", since = \"1.32.0\")]\n+    #[must_use]\n     #[inline]\n     pub const fn as_ptr(&self) -> *const u8 {\n         self as *const str as *const u8\n@@ -318,6 +321,7 @@ impl str {\n     /// It is your responsibility to make sure that the string slice only gets\n     /// modified in a way that it remains valid UTF-8.\n     #[stable(feature = \"str_as_mut_ptr\", since = \"1.36.0\")]\n+    #[must_use]\n     #[inline]\n     pub fn as_mut_ptr(&mut self) -> *mut u8 {\n         self as *mut str as *mut u8"}, {"sha": "3e853e28f14e9d2e243c15606531633f96059d89", "filename": "library/core/src/time.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/06e625f7d582601f5e2ff69ba80f6d3a11632b24/library%2Fcore%2Fsrc%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06e625f7d582601f5e2ff69ba80f6d3a11632b24/library%2Fcore%2Fsrc%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftime.rs?ref=06e625f7d582601f5e2ff69ba80f6d3a11632b24", "patch": "@@ -329,6 +329,7 @@ impl Duration {\n     /// [`subsec_nanos`]: Duration::subsec_nanos\n     #[stable(feature = \"duration\", since = \"1.3.0\")]\n     #[rustc_const_stable(feature = \"duration\", since = \"1.32.0\")]\n+    #[must_use]\n     #[inline]\n     pub const fn as_secs(&self) -> u64 {\n         self.secs\n@@ -412,6 +413,7 @@ impl Duration {\n     /// ```\n     #[stable(feature = \"duration_as_u128\", since = \"1.33.0\")]\n     #[rustc_const_stable(feature = \"duration_as_u128\", since = \"1.33.0\")]\n+    #[must_use]\n     #[inline]\n     pub const fn as_millis(&self) -> u128 {\n         self.secs as u128 * MILLIS_PER_SEC as u128 + (self.nanos / NANOS_PER_MILLI) as u128\n@@ -429,6 +431,7 @@ impl Duration {\n     /// ```\n     #[stable(feature = \"duration_as_u128\", since = \"1.33.0\")]\n     #[rustc_const_stable(feature = \"duration_as_u128\", since = \"1.33.0\")]\n+    #[must_use]\n     #[inline]\n     pub const fn as_micros(&self) -> u128 {\n         self.secs as u128 * MICROS_PER_SEC as u128 + (self.nanos / NANOS_PER_MICRO) as u128\n@@ -446,6 +449,7 @@ impl Duration {\n     /// ```\n     #[stable(feature = \"duration_as_u128\", since = \"1.33.0\")]\n     #[rustc_const_stable(feature = \"duration_as_u128\", since = \"1.33.0\")]\n+    #[must_use]\n     #[inline]\n     pub const fn as_nanos(&self) -> u128 {\n         self.secs as u128 * NANOS_PER_SEC as u128 + self.nanos as u128\n@@ -669,6 +673,7 @@ impl Duration {\n     /// assert_eq!(dur.as_secs_f64(), 2.7);\n     /// ```\n     #[stable(feature = \"duration_float\", since = \"1.38.0\")]\n+    #[must_use]\n     #[inline]\n     #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n     pub const fn as_secs_f64(&self) -> f64 {\n@@ -687,6 +692,7 @@ impl Duration {\n     /// assert_eq!(dur.as_secs_f32(), 2.7);\n     /// ```\n     #[stable(feature = \"duration_float\", since = \"1.38.0\")]\n+    #[must_use]\n     #[inline]\n     #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n     pub const fn as_secs_f32(&self) -> f32 {"}, {"sha": "8bf9f5dae6ea45e0cb24755bc602bb8fac3764cb", "filename": "library/std/src/ffi/c_str.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/06e625f7d582601f5e2ff69ba80f6d3a11632b24/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06e625f7d582601f5e2ff69ba80f6d3a11632b24/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs?ref=06e625f7d582601f5e2ff69ba80f6d3a11632b24", "patch": "@@ -297,6 +297,7 @@ impl FromVecWithNulError {\n     ///\n     /// assert_eq!(&bytes[..], value.unwrap_err().as_bytes());\n     /// ```\n+    #[must_use]\n     pub fn as_bytes(&self) -> &[u8] {\n         &self.bytes[..]\n     }\n@@ -616,6 +617,7 @@ impl CString {\n     /// assert_eq!(bytes, &[b'f', b'o', b'o']);\n     /// ```\n     #[inline]\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn as_bytes(&self) -> &[u8] {\n         // SAFETY: CString has a length at least 1\n@@ -635,6 +637,7 @@ impl CString {\n     /// assert_eq!(bytes, &[b'f', b'o', b'o', b'\\0']);\n     /// ```\n     #[inline]\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn as_bytes_with_nul(&self) -> &[u8] {\n         &self.inner\n@@ -653,6 +656,7 @@ impl CString {\n     ///            CStr::from_bytes_with_nul(b\"foo\\0\").expect(\"CStr::from_bytes_with_nul failed\"));\n     /// ```\n     #[inline]\n+    #[must_use]\n     #[stable(feature = \"as_c_str\", since = \"1.20.0\")]\n     pub fn as_c_str(&self) -> &CStr {\n         &*self\n@@ -1308,6 +1312,7 @@ impl CStr {\n     /// This way, the lifetime of the [`CString`] in `hello` encompasses\n     /// the lifetime of `ptr` and the `unsafe` block.\n     #[inline]\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_stable(feature = \"const_str_as_ptr\", since = \"1.32.0\")]\n     pub const fn as_ptr(&self) -> *const c_char {"}, {"sha": "844d866b3dd35ea680bbe65ca8a8403b090c654b", "filename": "library/std/src/ffi/os_str.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/06e625f7d582601f5e2ff69ba80f6d3a11632b24/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06e625f7d582601f5e2ff69ba80f6d3a11632b24/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs?ref=06e625f7d582601f5e2ff69ba80f6d3a11632b24", "patch": "@@ -136,6 +136,7 @@ impl OsString {\n     /// assert_eq!(os_string.as_os_str(), os_str);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     #[inline]\n     pub fn as_os_str(&self) -> &OsStr {\n         self"}, {"sha": "d741096893a69bbdfb1c4de6da1333a1686193e2", "filename": "library/std/src/os/unix/net/addr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/06e625f7d582601f5e2ff69ba80f6d3a11632b24/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Faddr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06e625f7d582601f5e2ff69ba80f6d3a11632b24/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Faddr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Faddr.rs?ref=06e625f7d582601f5e2ff69ba80f6d3a11632b24", "patch": "@@ -192,6 +192,7 @@ impl SocketAddr {\n     /// }\n     /// ```\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n+    #[must_use]\n     pub fn as_pathname(&self) -> Option<&Path> {\n         if let AddressKind::Pathname(path) = self.address() { Some(path) } else { None }\n     }"}, {"sha": "6ad7e1dfdfded640eff510aad24c6b780dd47931", "filename": "library/std/src/path.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/06e625f7d582601f5e2ff69ba80f6d3a11632b24/library%2Fstd%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06e625f7d582601f5e2ff69ba80f6d3a11632b24/library%2Fstd%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpath.rs?ref=06e625f7d582601f5e2ff69ba80f6d3a11632b24", "patch": "@@ -427,6 +427,7 @@ impl<'a> PrefixComponent<'a> {\n \n     /// Returns the raw [`OsStr`] slice for this prefix.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     #[inline]\n     pub fn as_os_str(&self) -> &'a OsStr {\n         self.raw\n@@ -676,6 +677,7 @@ impl<'a> Components<'a> {\n     ///\n     /// assert_eq!(Path::new(\"foo/bar.txt\"), components.as_path());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn as_path(&self) -> &'a Path {\n         let mut comps = self.clone();\n@@ -821,6 +823,7 @@ impl<'a> Iter<'a> {\n     /// assert_eq!(Path::new(\"foo/bar.txt\"), iter.as_path());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     #[inline]\n     pub fn as_path(&self) -> &'a Path {\n         self.inner.as_path()\n@@ -1186,6 +1189,7 @@ impl PathBuf {\n     /// assert_eq!(Path::new(\"/test\"), p.as_path());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     #[inline]\n     pub fn as_path(&self) -> &Path {\n         self\n@@ -1921,6 +1925,7 @@ impl Path {\n     /// assert_eq!(os_str, std::ffi::OsStr::new(\"foo.txt\"));\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     #[inline]\n     pub fn as_os_str(&self) -> &OsStr {\n         &self.inner"}, {"sha": "82847d83ad225a18bda264bdf25914bc875fcf37", "filename": "library/std/src/thread/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/06e625f7d582601f5e2ff69ba80f6d3a11632b24/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06e625f7d582601f5e2ff69ba80f6d3a11632b24/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs?ref=06e625f7d582601f5e2ff69ba80f6d3a11632b24", "patch": "@@ -1031,6 +1031,7 @@ impl ThreadId {\n     /// value is entirely opaque -- only equality testing is stable. Note that\n     /// it is not guaranteed which values new threads will return, and this may\n     /// change across Rust versions.\n+    #[must_use]\n     #[unstable(feature = \"thread_id_value\", issue = \"67939\")]\n     pub fn as_u64(&self) -> NonZeroU64 {\n         self.0"}]}