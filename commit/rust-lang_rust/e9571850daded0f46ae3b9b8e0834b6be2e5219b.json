{"sha": "e9571850daded0f46ae3b9b8e0834b6be2e5219b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5NTcxODUwZGFkZWQwZjQ2YWUzYjliOGUwODM0YjZiZTJlNTIxOWI=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-03-07T00:00:29Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-03-07T00:03:39Z"}, "message": "UTF-16-ify the win32 env routines.", "tree": {"sha": "e04b80f576b6d0e5fa10e0160e0617a8aedd0a61", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e04b80f576b6d0e5fa10e0160e0617a8aedd0a61"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e9571850daded0f46ae3b9b8e0834b6be2e5219b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e9571850daded0f46ae3b9b8e0834b6be2e5219b", "html_url": "https://github.com/rust-lang/rust/commit/e9571850daded0f46ae3b9b8e0834b6be2e5219b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e9571850daded0f46ae3b9b8e0834b6be2e5219b/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e3dd5a3ee170482f8e314b3f37aa2d1cc8da58c", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e3dd5a3ee170482f8e314b3f37aa2d1cc8da58c", "html_url": "https://github.com/rust-lang/rust/commit/0e3dd5a3ee170482f8e314b3f37aa2d1cc8da58c"}], "stats": {"total": 57, "additions": 44, "deletions": 13}, "files": [{"sha": "09af26336e05eb73bba6ab3c3f18a33c82a2cbf2", "filename": "src/libcore/libc.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e9571850daded0f46ae3b9b8e0834b6be2e5219b/src%2Flibcore%2Flibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9571850daded0f46ae3b9b8e0834b6be2e5219b/src%2Flibcore%2Flibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flibc.rs?ref=e9571850daded0f46ae3b9b8e0834b6be2e5219b", "patch": "@@ -1100,10 +1100,11 @@ mod funcs {\n \n         #[abi = \"stdcall\"]\n         native mod kernel32 {\n-            fn GetEnvironmentVariableA(n: LPCSTR,\n-                                       v: LPSTR,\n+            fn GetEnvironmentVariableW(n: LPCWSTR,\n+                                       v: LPWSTR,\n                                        nsize: DWORD) -> DWORD;\n-            fn SetEnvironmentVariableA(n: LPCSTR, v: LPCSTR) -> BOOL;\n+            fn SetEnvironmentVariableW(n: LPCWSTR, v: LPCWSTR) -> BOOL;\n+\n             fn GetModuleFileNameA(hModule: HMODULE,\n                                   lpFilename: LPSTR,\n                                   nSize: DWORD) -> DWORD;"}, {"sha": "ad18993c76273435fa3a6b070db1193b2646bd86", "filename": "src/libcore/os.rs", "status": "modified", "additions": 35, "deletions": 5, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/e9571850daded0f46ae3b9b8e0834b6be2e5219b/src%2Flibcore%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9571850daded0f46ae3b9b8e0834b6be2e5219b/src%2Flibcore%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fos.rs?ref=e9571850daded0f46ae3b9b8e0834b6be2e5219b", "patch": "@@ -50,7 +50,17 @@ fn as_c_charp<T>(s: str, f: fn(*c_char) -> T) -> T {\n     str::as_buf(s) {|b| f(b as *c_char) }\n }\n \n-// FIXME: UTF-16-ify this and revive win32 Unicode variant.\n+fn as_utf16_p<T>(s: str, f: fn(*u16) -> T) -> T {\n+    let t = str::to_utf16(s);\n+    // \"null terminate\"\n+    t += [0u16];\n+    vec::as_buf(t, f)\n+}\n+\n+\n+#[cfg(target_os = \"linux\")]\n+#[cfg(target_os = \"macos\")]\n+#[cfg(target_os = \"freebsd\")]\n fn getenv(n: str) -> option<str> unsafe {\n     let s = as_c_charp(n, libc::getenv);\n     ret if unsafe::reinterpret_cast(s) == 0 {\n@@ -61,6 +71,27 @@ fn getenv(n: str) -> option<str> unsafe {\n         };\n }\n \n+#[cfg(target_os = \"win32\")]\n+fn getenv(n: str) -> option<str> unsafe {\n+    import libc::types::os::arch::extra::*;\n+    import libc::funcs::extra::kernel32;\n+    as_utf16_p(n) {|u|\n+        let bufsize = 1023u;\n+        let buf = vec::to_mut(vec::init_elt(bufsize, 0u16));\n+        vec::as_mut_buf(buf) {|b|\n+            let k = kernel32::GetEnvironmentVariableW(u, b,\n+                                                      bufsize as DWORD);\n+            if k != (0 as DWORD) {\n+                let sub = vec::slice(buf, 0u, k as uint);\n+                option::some::<str>(str::from_utf16(sub))\n+            } else {\n+                option::none::<str>\n+            }\n+        }\n+    }\n+}\n+\n+\n #[cfg(target_os = \"linux\")]\n #[cfg(target_os = \"macos\")]\n #[cfg(target_os = \"freebsd\")]\n@@ -78,13 +109,12 @@ fn setenv(n: str, v: str) {\n \n \n #[cfg(target_os = \"win32\")]\n-// FIXME: UTF-16-ify this and switch to the W version.\n fn setenv(n: str, v: str) {\n     // FIXME: remove imports when export globs work properly.\n     import libc::funcs::extra::kernel32;\n-    as_c_charp(n) {|nbuf|\n-        as_c_charp(v) {|vbuf|\n-            kernel32::SetEnvironmentVariableA(nbuf, vbuf);\n+    as_utf16_p(n) {|nbuf|\n+        as_utf16_p(v) {|vbuf|\n+            kernel32::SetEnvironmentVariableW(nbuf, vbuf);\n         }\n     }\n }"}, {"sha": "5760cc8b066880b368c318b029ce1de4a2ec20c9", "filename": "src/libcore/str.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e9571850daded0f46ae3b9b8e0834b6be2e5219b/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9571850daded0f46ae3b9b8e0834b6be2e5219b/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=e9571850daded0f46ae3b9b8e0834b6be2e5219b", "patch": "@@ -1047,7 +1047,7 @@ Function: is_utf8\n \n Determines if a vector of bytes contains valid UTF-8\n */\n-fn is_utf8(v: [u8]) -> bool {\n+fn is_utf8(v: [const u8]) -> bool {\n     let i = 0u;\n     let total = vec::len::<u8>(v);\n     while i < total {\n@@ -1065,7 +1065,7 @@ fn is_utf8(v: [u8]) -> bool {\n }\n \n \n-fn is_utf16(v: [u16]) -> bool {\n+fn is_utf16(v: [const u16]) -> bool {\n     let len = v.len();\n     let i = 0u;\n     while (i < len) {\n@@ -1108,10 +1108,10 @@ fn to_utf16(s: str) -> [u16] {\n     ret u;\n }\n \n-fn utf16_chars(v: [u16], f: fn(char)) {\n+fn utf16_chars(v: [const u16], f: fn(char)) {\n     let len = v.len();\n     let i = 0u;\n-    while (i < len) {\n+    while (i < len && v[i] != 0u16) {\n         let u = v[i];\n \n         if  u <= 0xD7FF_u16 || u >= 0xE000_u16 {\n@@ -1133,7 +1133,7 @@ fn utf16_chars(v: [u16], f: fn(char)) {\n }\n \n \n-fn from_utf16(v: [u16]) -> str {\n+fn from_utf16(v: [const u16]) -> str {\n     let buf = \"\";\n     reserve(buf, v.len());\n     utf16_chars(v) {|ch| push_char(buf, ch); }"}]}