{"sha": "1d14fd17372b42c3343daf6adc9a520fdf5e9810", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkMTRmZDE3MzcyYjQyYzMzNDNkYWY2YWRjOWE1MjBmZGY1ZTk4MTA=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-27T20:22:20Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-27T20:22:20Z"}, "message": "Use Name::missing consistently", "tree": {"sha": "f94102d2fd9431abaa5447315f152838db5bf9fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f94102d2fd9431abaa5447315f152838db5bf9fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d14fd17372b42c3343daf6adc9a520fdf5e9810", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d14fd17372b42c3343daf6adc9a520fdf5e9810", "html_url": "https://github.com/rust-lang/rust/commit/1d14fd17372b42c3343daf6adc9a520fdf5e9810", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d14fd17372b42c3343daf6adc9a520fdf5e9810/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0bb667a7dfaecfefacf0b3b6cb1e483aac6747a", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0bb667a7dfaecfefacf0b3b6cb1e483aac6747a", "html_url": "https://github.com/rust-lang/rust/commit/c0bb667a7dfaecfefacf0b3b6cb1e483aac6747a"}], "stats": {"total": 85, "additions": 33, "deletions": 52}, "files": [{"sha": "38d66c2a7c2bbb2e05bd25b6e65426182e6ea1ba", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1d14fd17372b42c3343daf6adc9a520fdf5e9810/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d14fd17372b42c3343daf6adc9a520fdf5e9810/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=1d14fd17372b42c3343daf6adc9a520fdf5e9810", "patch": "@@ -330,7 +330,7 @@ impl Struct {\n         Some(self.module(db).krate())\n     }\n \n-    pub fn name(self, db: &impl DefDatabase) -> Option<Name> {\n+    pub fn name(self, db: &impl DefDatabase) -> Name {\n         db.struct_data(self.id.into()).name.clone()\n     }\n \n@@ -371,7 +371,7 @@ pub struct Union {\n }\n \n impl Union {\n-    pub fn name(self, db: &impl DefDatabase) -> Option<Name> {\n+    pub fn name(self, db: &impl DefDatabase) -> Name {\n         db.union_data(self.id).name.clone()\n     }\n \n@@ -420,7 +420,7 @@ impl Enum {\n         Some(self.module(db).krate())\n     }\n \n-    pub fn name(self, db: &impl DefDatabase) -> Option<Name> {\n+    pub fn name(self, db: &impl DefDatabase) -> Name {\n         db.enum_data(self.id).name.clone()\n     }\n \n@@ -433,11 +433,8 @@ impl Enum {\n     }\n \n     pub fn variant(self, db: &impl DefDatabase, name: &Name) -> Option<EnumVariant> {\n-        db.enum_data(self.id)\n-            .variants\n-            .iter()\n-            .find(|(_id, data)| data.name.as_ref() == Some(name))\n-            .map(|(id, _)| EnumVariant { parent: self, id })\n+        let id = db.enum_data(self.id).variant(name)?;\n+        Some(EnumVariant { parent: self, id })\n     }\n \n     pub fn ty(self, db: &impl HirDatabase) -> Type {\n@@ -459,7 +456,7 @@ impl EnumVariant {\n         self.parent\n     }\n \n-    pub fn name(self, db: &impl DefDatabase) -> Option<Name> {\n+    pub fn name(self, db: &impl DefDatabase) -> Name {\n         db.enum_data(self.parent.id).variants[self.id].name.clone()\n     }\n \n@@ -720,7 +717,7 @@ impl Trait {\n         Module { id: self.id.module(db) }\n     }\n \n-    pub fn name(self, db: &impl DefDatabase) -> Option<Name> {\n+    pub fn name(self, db: &impl DefDatabase) -> Name {\n         db.trait_data(self.id).name.clone()\n     }\n "}, {"sha": "3666529b0cbca54d2e03b56bb55a442cf670c05f", "filename": "crates/ra_hir_def/src/adt.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1d14fd17372b42c3343daf6adc9a520fdf5e9810/crates%2Fra_hir_def%2Fsrc%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d14fd17372b42c3343daf6adc9a520fdf5e9810/crates%2Fra_hir_def%2Fsrc%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fadt.rs?ref=1d14fd17372b42c3343daf6adc9a520fdf5e9810", "patch": "@@ -18,19 +18,19 @@ use crate::{\n /// Note that we use `StructData` for unions as well!\n #[derive(Debug, Clone, PartialEq, Eq)]\n pub struct StructData {\n-    pub name: Option<Name>,\n+    pub name: Name,\n     pub variant_data: Arc<VariantData>,\n }\n \n #[derive(Debug, Clone, PartialEq, Eq)]\n pub struct EnumData {\n-    pub name: Option<Name>,\n+    pub name: Name,\n     pub variants: Arena<LocalEnumVariantId, EnumVariantData>,\n }\n \n #[derive(Debug, Clone, PartialEq, Eq)]\n pub struct EnumVariantData {\n-    pub name: Option<Name>,\n+    pub name: Name,\n     pub variant_data: Arc<VariantData>,\n }\n \n@@ -51,14 +51,14 @@ pub struct StructFieldData {\n impl StructData {\n     pub(crate) fn struct_data_query(db: &impl DefDatabase, id: StructId) -> Arc<StructData> {\n         let src = id.source(db);\n-        let name = src.value.name().map(|n| n.as_name());\n+        let name = src.value.name().map_or_else(Name::missing, |n| n.as_name());\n         let variant_data = VariantData::new(src.value.kind());\n         let variant_data = Arc::new(variant_data);\n         Arc::new(StructData { name, variant_data })\n     }\n     pub(crate) fn union_data_query(db: &impl DefDatabase, id: UnionId) -> Arc<StructData> {\n         let src = id.source(db);\n-        let name = src.value.name().map(|n| n.as_name());\n+        let name = src.value.name().map_or_else(Name::missing, |n| n.as_name());\n         let variant_data = VariantData::new(\n             src.value\n                 .record_field_def_list()\n@@ -73,14 +73,14 @@ impl StructData {\n impl EnumData {\n     pub(crate) fn enum_data_query(db: &impl DefDatabase, e: EnumId) -> Arc<EnumData> {\n         let src = e.source(db);\n-        let name = src.value.name().map(|n| n.as_name());\n+        let name = src.value.name().map_or_else(Name::missing, |n| n.as_name());\n         let mut trace = Trace::new_for_arena();\n         lower_enum(&mut trace, &src.value);\n         Arc::new(EnumData { name, variants: trace.into_arena() })\n     }\n \n-    pub(crate) fn variant(&self, name: &Name) -> Option<LocalEnumVariantId> {\n-        let (id, _) = self.variants.iter().find(|(_id, data)| data.name.as_ref() == Some(name))?;\n+    pub fn variant(&self, name: &Name) -> Option<LocalEnumVariantId> {\n+        let (id, _) = self.variants.iter().find(|(_id, data)| &data.name == name)?;\n         Some(id)\n     }\n }\n@@ -104,7 +104,7 @@ fn lower_enum(\n         trace.alloc(\n             || var.clone(),\n             || EnumVariantData {\n-                name: var.name().map(|it| it.as_name()),\n+                name: var.name().map_or_else(Name::missing, |it| it.as_name()),\n                 variant_data: Arc::new(VariantData::new(var.kind())),\n             },\n         );"}, {"sha": "fee10b2375b784f1e770902f026baade40a39089", "filename": "crates/ra_hir_def/src/data.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1d14fd17372b42c3343daf6adc9a520fdf5e9810/crates%2Fra_hir_def%2Fsrc%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d14fd17372b42c3343daf6adc9a520fdf5e9810/crates%2Fra_hir_def%2Fsrc%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdata.rs?ref=1d14fd17372b42c3343daf6adc9a520fdf5e9810", "patch": "@@ -86,15 +86,15 @@ impl TypeAliasData {\n \n #[derive(Debug, Clone, PartialEq, Eq)]\n pub struct TraitData {\n-    pub name: Option<Name>,\n+    pub name: Name,\n     pub items: Vec<(Name, AssocItemId)>,\n     pub auto: bool,\n }\n \n impl TraitData {\n     pub(crate) fn trait_data_query(db: &impl DefDatabase, tr: TraitId) -> Arc<TraitData> {\n         let src = tr.source(db);\n-        let name = src.value.name().map(|n| n.as_name());\n+        let name = src.value.name().map_or_else(Name::missing, |n| n.as_name());\n         let auto = src.value.is_auto();\n         let ast_id_map = db.ast_id_map(src.file_id);\n \n@@ -104,7 +104,7 @@ impl TraitData {\n                 .impl_items()\n                 .map(|item_node| match item_node {\n                     ast::ImplItem::FnDef(it) => {\n-                        let name = it.name().map(|it| it.as_name()).unwrap_or_else(Name::missing);\n+                        let name = it.name().map_or_else(Name::missing, |it| it.as_name());\n                         let def = FunctionLoc {\n                             container,\n                             ast_id: AstId::new(src.file_id, ast_id_map.ast_id(&it)),\n@@ -114,7 +114,7 @@ impl TraitData {\n                         (name, def)\n                     }\n                     ast::ImplItem::ConstDef(it) => {\n-                        let name = it.name().map(|it| it.as_name()).unwrap_or_else(Name::missing);\n+                        let name = it.name().map_or_else(Name::missing, |it| it.as_name());\n                         let def = ConstLoc {\n                             container,\n                             ast_id: AstId::new(src.file_id, ast_id_map.ast_id(&it)),\n@@ -124,7 +124,7 @@ impl TraitData {\n                         (name, def)\n                     }\n                     ast::ImplItem::TypeAliasDef(it) => {\n-                        let name = it.name().map(|it| it.as_name()).unwrap_or_else(Name::missing);\n+                        let name = it.name().map_or_else(Name::missing, |it| it.as_name());\n                         let def = TypeAliasLoc {\n                             container,\n                             ast_id: AstId::new(src.file_id, ast_id_map.ast_id(&it)),\n@@ -214,6 +214,7 @@ impl ImplData {\n \n #[derive(Debug, Clone, PartialEq, Eq)]\n pub struct ConstData {\n+    /// const _: () = ();\n     pub name: Option<Name>,\n     pub type_ref: TypeRef,\n }"}, {"sha": "fd82451131b7ae3c69fa310377507fb673ba94fc", "filename": "crates/ra_hir_def/src/nameres/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d14fd17372b42c3343daf6adc9a520fdf5e9810/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d14fd17372b42c3343daf6adc9a520fdf5e9810/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=1d14fd17372b42c3343daf6adc9a520fdf5e9810", "patch": "@@ -362,7 +362,7 @@ where\n                         .variants\n                         .iter()\n                         .filter_map(|(local_id, variant_data)| {\n-                            let name = variant_data.name.clone()?;\n+                            let name = variant_data.name.clone();\n                             let variant = EnumVariantId { parent: e, local_id };\n                             let res = Resolution {\n                                 def: PerNs::both(variant.into(), variant.into()),"}, {"sha": "b45c8f82f4106bca0126e00f0800583322cf891f", "filename": "crates/ra_hir_ty/src/lib.rs", "status": "modified", "additions": 7, "deletions": 18, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/1d14fd17372b42c3343daf6adc9a520fdf5e9810/crates%2Fra_hir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d14fd17372b42c3343daf6adc9a520fdf5e9810/crates%2Fra_hir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Flib.rs?ref=1d14fd17372b42c3343daf6adc9a520fdf5e9810", "patch": "@@ -901,12 +901,10 @@ impl HirDisplay for ApplicationTy {\n                 let sig = f.db.callable_item_signature(def);\n                 let name = match def {\n                     CallableDef::FunctionId(ff) => f.db.function_data(ff).name.clone(),\n-                    CallableDef::StructId(s) => {\n-                        f.db.struct_data(s).name.clone().unwrap_or_else(Name::missing)\n-                    }\n+                    CallableDef::StructId(s) => f.db.struct_data(s).name.clone(),\n                     CallableDef::EnumVariantId(e) => {\n                         let enum_data = f.db.enum_data(e.parent);\n-                        enum_data.variants[e.local_id].name.clone().unwrap_or_else(Name::missing)\n+                        enum_data.variants[e.local_id].name.clone()\n                     }\n                 };\n                 match def {\n@@ -929,8 +927,7 @@ impl HirDisplay for ApplicationTy {\n                     AdtId::StructId(it) => f.db.struct_data(it).name.clone(),\n                     AdtId::UnionId(it) => f.db.union_data(it).name.clone(),\n                     AdtId::EnumId(it) => f.db.enum_data(it).name.clone(),\n-                }\n-                .unwrap_or_else(Name::missing);\n+                };\n                 write!(f, \"{}\", name)?;\n                 if self.parameters.len() > 0 {\n                     write!(f, \"<\")?;\n@@ -943,7 +940,7 @@ impl HirDisplay for ApplicationTy {\n                     ContainerId::TraitId(it) => it,\n                     _ => panic!(\"not an associated type\"),\n                 };\n-                let trait_name = f.db.trait_data(trait_).name.clone().unwrap_or_else(Name::missing);\n+                let trait_name = f.db.trait_data(trait_).name.clone();\n                 let name = f.db.type_alias_data(type_alias).name.clone();\n                 write!(f, \"{}::{}\", trait_name, name)?;\n                 if self.parameters.len() > 0 {\n@@ -971,8 +968,7 @@ impl HirDisplay for ProjectionTy {\n             return write!(f, \"\u2026\");\n         }\n \n-        let trait_name =\n-            f.db.trait_data(self.trait_(f.db)).name.clone().unwrap_or_else(Name::missing);\n+        let trait_name = f.db.trait_data(self.trait_(f.db)).name.clone();\n         write!(f, \"<{} as {}\", self.parameters[0].display(f.db), trait_name,)?;\n         if self.parameters.len() > 1 {\n             write!(f, \"<\")?;\n@@ -1021,14 +1017,7 @@ impl HirDisplay for Ty {\n                             // We assume that the self type is $0 (i.e. the\n                             // existential) here, which is the only thing that's\n                             // possible in actual Rust, and hence don't print it\n-                            write!(\n-                                f,\n-                                \"{}\",\n-                                f.db.trait_data(trait_ref.trait_)\n-                                    .name\n-                                    .clone()\n-                                    .unwrap_or_else(Name::missing)\n-                            )?;\n+                            write!(f, \"{}\", f.db.trait_data(trait_ref.trait_).name.clone())?;\n                             if trait_ref.substs.len() > 1 {\n                                 write!(f, \"<\")?;\n                                 f.write_joined(&trait_ref.substs[1..], \", \")?;\n@@ -1088,7 +1077,7 @@ impl TraitRef {\n         } else {\n             write!(f, \": \")?;\n         }\n-        write!(f, \"{}\", f.db.trait_data(self.trait_).name.clone().unwrap_or_else(Name::missing))?;\n+        write!(f, \"{}\", f.db.trait_data(self.trait_).name.clone())?;\n         if self.substs.len() > 1 {\n             write!(f, \"<\")?;\n             f.write_joined(&self.substs[1..], \", \")?;"}, {"sha": "97475fc0bbe8f2c77082aa3370c53b0f07df9d68", "filename": "crates/ra_ide/src/completion/presentation.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1d14fd17372b42c3343daf6adc9a520fdf5e9810/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d14fd17372b42c3343daf6adc9a520fdf5e9810/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs?ref=1d14fd17372b42c3343daf6adc9a520fdf5e9810", "patch": "@@ -267,10 +267,7 @@ impl Completions {\n \n     pub(crate) fn add_enum_variant(&mut self, ctx: &CompletionContext, variant: hir::EnumVariant) {\n         let is_deprecated = is_deprecated(variant, ctx.db);\n-        let name = match variant.name(ctx.db) {\n-            Some(it) => it,\n-            None => return,\n-        };\n+        let name = variant.name(ctx.db);\n         let detail_types = variant.fields(ctx.db).into_iter().map(|field| field.ty(ctx.db));\n         let detail = join(detail_types.map(|t| t.display(ctx.db).to_string()))\n             .separator(\", \")"}, {"sha": "324ad95526d655c51c467ceae58ae97faa2dfefc", "filename": "crates/ra_ide/src/display/function_signature.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1d14fd17372b42c3343daf6adc9a520fdf5e9810/crates%2Fra_ide%2Fsrc%2Fdisplay%2Ffunction_signature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d14fd17372b42c3343daf6adc9a520fdf5e9810/crates%2Fra_ide%2Fsrc%2Fdisplay%2Ffunction_signature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdisplay%2Ffunction_signature.rs?ref=1d14fd17372b42c3343daf6adc9a520fdf5e9810", "patch": "@@ -93,12 +93,9 @@ impl FunctionSignature {\n             _ => (),\n         };\n \n-        let parent_name = match variant.parent_enum(db).name(db) {\n-            Some(name) => name.to_string(),\n-            None => \"missing\".into(),\n-        };\n+        let parent_name = variant.parent_enum(db).name(db).to_string();\n \n-        let name = format!(\"{}::{}\", parent_name, variant.name(db).unwrap());\n+        let name = format!(\"{}::{}\", parent_name, variant.name(db));\n \n         let params = variant\n             .fields(db)"}]}