{"sha": "a1fd4fa848a11698b9a21bc937f5846dff87920e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExZmQ0ZmE4NDhhMTE2OThiOWEyMWJjOTM3ZjU4NDZkZmY4NzkyMGU=", "commit": {"author": {"name": "Taiki Endo", "email": "te316e89@gmail.com", "date": "2019-05-27T13:06:08Z"}, "committer": {"name": "Taiki Endo", "email": "te316e89@gmail.com", "date": "2019-07-27T03:28:03Z"}, "message": "Remove query for `.pin_type()`", "tree": {"sha": "f18ac4e7bdd21928866916f108fc726a0598b79f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f18ac4e7bdd21928866916f108fc726a0598b79f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1fd4fa848a11698b9a21bc937f5846dff87920e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1fd4fa848a11698b9a21bc937f5846dff87920e", "html_url": "https://github.com/rust-lang/rust/commit/a1fd4fa848a11698b9a21bc937f5846dff87920e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1fd4fa848a11698b9a21bc937f5846dff87920e/comments", "author": {"login": "taiki-e", "id": 43724913, "node_id": "MDQ6VXNlcjQzNzI0OTEz", "avatar_url": "https://avatars.githubusercontent.com/u/43724913?v=4", "gravatar_id": "", "url": "https://api.github.com/users/taiki-e", "html_url": "https://github.com/taiki-e", "followers_url": "https://api.github.com/users/taiki-e/followers", "following_url": "https://api.github.com/users/taiki-e/following{/other_user}", "gists_url": "https://api.github.com/users/taiki-e/gists{/gist_id}", "starred_url": "https://api.github.com/users/taiki-e/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/taiki-e/subscriptions", "organizations_url": "https://api.github.com/users/taiki-e/orgs", "repos_url": "https://api.github.com/users/taiki-e/repos", "events_url": "https://api.github.com/users/taiki-e/events{/privacy}", "received_events_url": "https://api.github.com/users/taiki-e/received_events", "type": "User", "site_admin": false}, "committer": {"login": "taiki-e", "id": 43724913, "node_id": "MDQ6VXNlcjQzNzI0OTEz", "avatar_url": "https://avatars.githubusercontent.com/u/43724913?v=4", "gravatar_id": "", "url": "https://api.github.com/users/taiki-e", "html_url": "https://github.com/taiki-e", "followers_url": "https://api.github.com/users/taiki-e/followers", "following_url": "https://api.github.com/users/taiki-e/following{/other_user}", "gists_url": "https://api.github.com/users/taiki-e/gists{/gist_id}", "starred_url": "https://api.github.com/users/taiki-e/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/taiki-e/subscriptions", "organizations_url": "https://api.github.com/users/taiki-e/orgs", "repos_url": "https://api.github.com/users/taiki-e/repos", "events_url": "https://api.github.com/users/taiki-e/events{/privacy}", "received_events_url": "https://api.github.com/users/taiki-e/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2eb957be0f6c31585c31815e6c423e7c1d75856", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2eb957be0f6c31585c31815e6c423e7c1d75856", "html_url": "https://github.com/rust-lang/rust/commit/e2eb957be0f6c31585c31815e6c423e7c1d75856"}], "stats": {"total": 83, "additions": 47, "deletions": 36}, "files": [{"sha": "d4b46e2003f08a5b9bb9a531bd878abc2cbd8a9a", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 32, "deletions": 34, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/a1fd4fa848a11698b9a21bc937f5846dff87920e/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1fd4fa848a11698b9a21bc937f5846dff87920e/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=a1fd4fa848a11698b9a21bc937f5846dff87920e", "patch": "@@ -2174,46 +2174,44 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                 false\n             };\n \n-            let mut self_arg = &inputs[0].node;\n-\n-            // Apply `self: &(mut) Self` elision rules even if nested in `Pin`.\n-            loop {\n-                if let hir::TyKind::Path(hir::QPath::Resolved(None, ref path)) = *self_arg {\n-                    if let Res::Def(DefKind::Struct, def_id) = path.res {\n-                        if self.tcx.lang_items().pin_type() == Some(def_id) {\n-                            if let Some(args) = path\n-                                .segments\n-                                .last()\n-                                .and_then(|segment| segment.args.as_ref())\n-                            {\n-                                if args.args.len() == 1 {\n-                                    if let GenericArg::Type(ty) = &args.args[0] {\n-                                        self_arg = &ty.node;\n-                                        // Keep dereferencing `self_arg` until we get to non-`Pin`\n-                                        // types.\n-                                        continue;\n-                                    }\n-                                }\n+            struct SelfVisitor<'a, F: FnMut(Res) -> bool> {\n+                is_self_ty: F,\n+                map: &'a NamedRegionMap,\n+                lifetime: Option<Region>,\n+            }\n+\n+            impl<'a, F: FnMut(Res) -> bool> Visitor<'a> for SelfVisitor<'a, F> {\n+                fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'a> {\n+                    NestedVisitorMap::None\n+                }\n+\n+                fn visit_ty(&mut self, ty: &'a hir::Ty) {\n+                    if let hir::TyKind::Rptr(lifetime_ref, ref mt) = ty.node {\n+                        if let hir::TyKind::Path(hir::QPath::Resolved(None, ref path)) = mt.ty.node\n+                        {\n+                            if (self.is_self_ty)(path.res) {\n+                                self.lifetime = self.map.defs.get(&lifetime_ref.hir_id).copied();\n+                                return;\n                             }\n                         }\n                     }\n+                    intravisit::walk_ty(self, ty)\n                 }\n-                break;\n             }\n \n-            if let hir::TyKind::Rptr(lifetime_ref, ref mt) = *self_arg {\n-                if let hir::TyKind::Path(hir::QPath::Resolved(None, ref path)) = mt.ty.node {\n-                    if is_self_ty(path.res) {\n-                        if let Some(&lifetime) = self.map.defs.get(&lifetime_ref.hir_id) {\n-                            let scope = Scope::Elision {\n-                                elide: Elide::Exact(lifetime),\n-                                s: self.scope,\n-                            };\n-                            self.with(scope, |_, this| this.visit_ty(output));\n-                            return;\n-                        }\n-                    }\n-                }\n+            let mut visitor = SelfVisitor {\n+                is_self_ty,\n+                map: self.map,\n+                lifetime: None,\n+            };\n+            visitor.visit_ty(&inputs[0]);\n+            if let Some(lifetime) = visitor.lifetime {\n+                let scope = Scope::Elision {\n+                    elide: Elide::Exact(lifetime),\n+                    s: self.scope,\n+                };\n+                self.with(scope, |_, this| this.visit_ty(output));\n+                return;\n             }\n         }\n "}, {"sha": "ba574eeb4609b05fa7361643ce21a38e6b270cea", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1fd4fa848a11698b9a21bc937f5846dff87920e/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1fd4fa848a11698b9a21bc937f5846dff87920e/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime.rs?ref=a1fd4fa848a11698b9a21bc937f5846dff87920e", "patch": "@@ -19,7 +19,7 @@ impl Foo {\n \n type Alias<T> = Pin<T>;\n impl Foo {\n-    fn bar<'a>(self: Alias<&Self>, arg: &'a ()) -> &() { arg }\n+    fn bar<'a>(self: Alias<&Self>, arg: &'a ()) -> Alias<&Self> { self }\n }\n \n struct Bar<T: Unpin, U: Unpin> {"}, {"sha": "fc5f94201b81aecc82b63c2e6e0b18061a490720", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_mismatch.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a1fd4fa848a11698b9a21bc937f5846dff87920e/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1fd4fa848a11698b9a21bc937f5846dff87920e/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch.rs?ref=a1fd4fa848a11698b9a21bc937f5846dff87920e", "patch": "@@ -10,4 +10,9 @@ impl Foo {\n     fn c(self: Pin<&Self>, f: &Foo, g: &Foo) -> (Pin<&Foo>, &Foo) { (self, f) } //~ ERROR E0623\n }\n \n+type Alias<T> = Pin<T>;\n+impl Foo {\n+    fn bar<'a>(self: Alias<&Self>, arg: &'a ()) -> &() { arg } //~ ERROR E0623\n+}\n+\n fn main() {}"}, {"sha": "3296e14f806e1822d61cc39f4139e224f38a8304", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_mismatch.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a1fd4fa848a11698b9a21bc937f5846dff87920e/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a1fd4fa848a11698b9a21bc937f5846dff87920e/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch.stderr?ref=a1fd4fa848a11698b9a21bc937f5846dff87920e", "patch": "@@ -14,5 +14,13 @@ LL |     fn c(self: Pin<&Self>, f: &Foo, g: &Foo) -> (Pin<&Foo>, &Foo) { (self,\n    |                               |\n    |                               this parameter and the return type are declared with different lifetimes...\n \n-error: aborting due to 2 previous errors\n+error[E0623]: lifetime mismatch\n+  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch.rs:15:58\n+   |\n+LL |     fn bar<'a>(self: Alias<&Self>, arg: &'a ()) -> &() { arg }\n+   |                                         ------     ---   ^^^ ...but data from `arg` is returned here\n+   |                                         |\n+   |                                         this parameter and the return type are declared with different lifetimes...\n+\n+error: aborting due to 3 previous errors\n "}]}