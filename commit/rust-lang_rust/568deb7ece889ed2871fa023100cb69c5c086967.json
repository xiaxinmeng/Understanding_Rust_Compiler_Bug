{"sha": "568deb7ece889ed2871fa023100cb69c5c086967", "node_id": "C_kwDOAAsO6NoAKDU2OGRlYjdlY2U4ODllZDI4NzFmYTAyMzEwMGNiNjljNWMwODY5Njc", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-02-12T17:14:28Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-05-11T14:35:09Z"}, "message": "Improve miri comments", "tree": {"sha": "89d8e533aeb2e9fc4ff0437c7f79d07a6ae5aed0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89d8e533aeb2e9fc4ff0437c7f79d07a6ae5aed0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/568deb7ece889ed2871fa023100cb69c5c086967", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/568deb7ece889ed2871fa023100cb69c5c086967", "html_url": "https://github.com/rust-lang/rust/commit/568deb7ece889ed2871fa023100cb69c5c086967", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/568deb7ece889ed2871fa023100cb69c5c086967/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "efb9c30ed2bef28812f47914dea3ae4f703e6870", "url": "https://api.github.com/repos/rust-lang/rust/commits/efb9c30ed2bef28812f47914dea3ae4f703e6870", "html_url": "https://github.com/rust-lang/rust/commit/efb9c30ed2bef28812f47914dea3ae4f703e6870"}], "stats": {"total": 15, "additions": 14, "deletions": 1}, "files": [{"sha": "167370ef4a8b6cfb2f5847889847c0896500b877", "filename": "src/tools/miri/src/shims/foreign_items.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/568deb7ece889ed2871fa023100cb69c5c086967/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/568deb7ece889ed2871fa023100cb69c5c086967/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fforeign_items.rs?ref=568deb7ece889ed2871fa023100cb69c5c086967", "patch": "@@ -358,7 +358,11 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n \n         match allocator_kind {\n             AllocatorKind::Global => {\n-                // `__rust_*` is defined by `#[global_allocator]` if `#[global_allocator]` is used\n+                // When `#[global_allocator]` is used, `__rust_*` is defined by the macro expansion\n+                // of this attribute rather than generated by the allocator shim. As such we have\n+                // to call the definition produced by `#[global_allocator]` instead of the shim like\n+                // in the case of `#[global_allocator]` not existing. Somewhat unintuitively doing\n+                // so is done by returning `NotSupported`.\n                 return Ok(EmulateByNameResult::NotSupported);\n             }\n             AllocatorKind::Default => {\n@@ -555,6 +559,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n             // Rust allocation\n             \"__rust_alloc\" | \"miri_alloc\" => {\n                 let default = |this: &mut MiriInterpCx<'mir, 'tcx>| {\n+                    // Only call `check_shim` when `#[global_allocator]` isn't used. The macro\n+                    // expansion of `#[global_allocator]` defines this symbol and `check_shim`\n+                    // checks that there exists no definition of a shim.\n                     let [size, align] = this.check_shim(abi, Abi::Rust, link_name, args)?;\n                     let size = this.read_target_usize(size)?;\n                     let align = this.read_target_usize(align)?;\n@@ -587,6 +594,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n             }\n             \"__rust_alloc_zeroed\" => {\n                 return this.emulate_allocator(|this| {\n+                    // See the comment for `__rust_alloc` why `check_shim` is only called in the\n+                    // default case.\n                     let [size, align] = this.check_shim(abi, Abi::Rust, link_name, args)?;\n                     let size = this.read_target_usize(size)?;\n                     let align = this.read_target_usize(align)?;\n@@ -610,6 +619,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n             }\n             \"__rust_dealloc\" | \"miri_dealloc\" => {\n                 let default = |this: &mut MiriInterpCx<'mir, 'tcx>| {\n+                    // See the comment for `__rust_alloc` why `check_shim` is only called in the\n+                    // default case.\n                     let [ptr, old_size, align] =\n                         this.check_shim(abi, Abi::Rust, link_name, args)?;\n                     let ptr = this.read_pointer(ptr)?;\n@@ -643,6 +654,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n             }\n             \"__rust_realloc\" => {\n                 return this.emulate_allocator(|this| {\n+                    // See the comment for `__rust_alloc` why `check_shim` is only called in the\n+                    // default case.\n                     let [ptr, old_size, align, new_size] =\n                         this.check_shim(abi, Abi::Rust, link_name, args)?;\n                     let ptr = this.read_pointer(ptr)?;"}]}