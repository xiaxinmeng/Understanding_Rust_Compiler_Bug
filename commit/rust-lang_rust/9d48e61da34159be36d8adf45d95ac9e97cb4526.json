{"sha": "9d48e61da34159be36d8adf45d95ac9e97cb4526", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkNDhlNjFkYTM0MTU5YmUzNmQ4YWRmNDVkOTVhYzllOTdjYjQ1MjY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-04-09T03:20:16Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-04-15T18:36:14Z"}, "message": "libc: Deglob reexports. #11870", "tree": {"sha": "304014a3023928a910bb490c579b3d0541a41ee8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/304014a3023928a910bb490c579b3d0541a41ee8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d48e61da34159be36d8adf45d95ac9e97cb4526", "comment_count": 9, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d48e61da34159be36d8adf45d95ac9e97cb4526", "html_url": "https://github.com/rust-lang/rust/commit/9d48e61da34159be36d8adf45d95ac9e97cb4526", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d48e61da34159be36d8adf45d95ac9e97cb4526/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "168b2d1a3f4569706fe4f9a2baee04e37f85d297", "url": "https://api.github.com/repos/rust-lang/rust/commits/168b2d1a3f4569706fe4f9a2baee04e37f85d297", "html_url": "https://github.com/rust-lang/rust/commit/168b2d1a3f4569706fe4f9a2baee04e37f85d297"}], "stats": {"total": 208, "additions": 147, "deletions": 61}, "files": [{"sha": "b809d26e3ce4c8c8c9002db640ab6ab4cb226380", "filename": "src/liblibc/lib.rs", "status": "modified", "additions": 147, "deletions": 61, "changes": 208, "blob_url": "https://github.com/rust-lang/rust/blob/9d48e61da34159be36d8adf45d95ac9e97cb4526/src%2Fliblibc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d48e61da34159be36d8adf45d95ac9e97cb4526/src%2Fliblibc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc%2Flib.rs?ref=9d48e61da34159be36d8adf45d95ac9e97cb4526", "patch": "@@ -79,73 +79,23 @@\n #[cfg(test)] extern crate test;\n #[cfg(test)] extern crate native;\n \n-// Initial glob-exports mean that all the contents of all the modules\n-// wind up exported, if you're interested in writing platform-specific code.\n-\n-pub use types::common::c95::*;\n-pub use types::common::c99::*;\n-pub use types::common::posix88::*;\n-pub use types::common::posix01::*;\n-pub use types::common::posix08::*;\n-pub use types::common::bsd44::*;\n-pub use types::os::common::posix01::*;\n-pub use types::os::common::bsd44::*;\n-pub use types::os::arch::c95::*;\n-pub use types::os::arch::c99::*;\n-pub use types::os::arch::posix88::*;\n-pub use types::os::arch::posix01::*;\n-pub use types::os::arch::posix08::*;\n-pub use types::os::arch::bsd44::*;\n-pub use types::os::arch::extra::*;\n-\n-pub use consts::os::c95::*;\n-pub use consts::os::c99::*;\n-pub use consts::os::posix88::*;\n-pub use consts::os::posix01::*;\n-pub use consts::os::posix08::*;\n-pub use consts::os::bsd44::*;\n-pub use consts::os::extra::*;\n-pub use consts::os::sysconf::*;\n-\n-pub use funcs::c95::ctype::*;\n-pub use funcs::c95::stdio::*;\n-pub use funcs::c95::stdlib::*;\n-pub use funcs::c95::string::*;\n-\n-pub use funcs::posix88::stat_::*;\n-pub use funcs::posix88::stdio::*;\n-pub use funcs::posix88::fcntl::*;\n-pub use funcs::posix88::dirent::*;\n-pub use funcs::posix88::unistd::*;\n-pub use funcs::posix88::mman::*;\n-\n-pub use funcs::posix01::stat_::*;\n-pub use funcs::posix01::unistd::*;\n-pub use funcs::posix01::glob::*;\n-pub use funcs::posix01::mman::*;\n-pub use funcs::posix08::unistd::*;\n-\n-pub use funcs::bsd43::*;\n-pub use funcs::bsd44::*;\n-pub use funcs::extra::*;\n-\n-#[cfg(target_os = \"win32\")]\n-pub use funcs::extra::kernel32::*;\n-#[cfg(target_os = \"win32\")]\n-pub use funcs::extra::msvcrt::*;\n-\n // Explicit export lists for the intersection (provided here) mean that\n // you can write more-platform-agnostic code if you stick to just these\n // symbols.\n \n pub use types::common::c95::{FILE, c_void, fpos_t};\n+pub use types::common::c99::{int8_t, int16_t, int32_t, int64_t};\n+pub use types::common::c99::{uint8_t, uint16_t, uint32_t, uint64_t};\n pub use types::common::posix88::{DIR, dirent_t};\n-pub use types::os::arch::c95::{c_char, c_double, c_float, c_int};\n+pub use types::os::common::bsd44::{addrinfo, in_addr, in6_addr, sockaddr_storage};\n+pub use types::os::common::bsd44::{ip_mreq, ip6_mreq, sockaddr, sockaddr_un};\n+pub use types::os::common::bsd44::{sa_family_t, sockaddr_in, sockaddr_in6, socklen_t};\n+pub use types::os::arch::c95::{c_char, c_double, c_float, c_int, c_uint};\n pub use types::os::arch::c95::{c_long, c_short, c_uchar, c_ulong};\n pub use types::os::arch::c95::{c_ushort, clock_t, ptrdiff_t};\n pub use types::os::arch::c95::{size_t, time_t};\n-pub use types::os::arch::c99::{c_longlong, c_ulonglong, intptr_t};\n-pub use types::os::arch::c99::{uintptr_t};\n+pub use types::os::arch::c99::{c_longlong, c_ulonglong};\n+pub use types::os::arch::c99::{intptr_t, uintptr_t};\n pub use types::os::arch::posix88::{dev_t, ino_t, mode_t};\n pub use types::os::arch::posix88::{off_t, pid_t, ssize_t};\n \n@@ -159,8 +109,15 @@ pub use consts::os::posix88::{O_RDONLY, O_RDWR, O_TRUNC, O_WRONLY};\n pub use consts::os::posix88::{R_OK, S_IEXEC, S_IFBLK, S_IFCHR};\n pub use consts::os::posix88::{S_IFDIR, S_IFIFO, S_IFMT, S_IFREG, S_IFLNK};\n pub use consts::os::posix88::{S_IREAD, S_IRUSR, S_IRWXU, S_IWUSR};\n-pub use consts::os::posix88::{STDERR_FILENO, STDIN_FILENO};\n+pub use consts::os::posix88::{STDERR_FILENO, STDIN_FILENO, S_IXUSR};\n pub use consts::os::posix88::{STDOUT_FILENO, W_OK, X_OK};\n+pub use consts::os::bsd44::{AF_INET, AF_INET6, SOCK_STREAM, SOCK_DGRAM};\n+pub use consts::os::bsd44::{IPPROTO_IP, IPPROTO_IPV6, IPPROTO_TCP, TCP_NODELAY};\n+pub use consts::os::bsd44::{SOL_SOCKET, SO_KEEPALIVE};\n+pub use consts::os::bsd44::{SO_REUSEADDR, SO_BROADCAST, SHUT_WR, IP_MULTICAST_LOOP};\n+pub use consts::os::bsd44::{IP_ADD_MEMBERSHIP, IP_DROP_MEMBERSHIP};\n+pub use consts::os::bsd44::{IPV6_ADD_MEMBERSHIP, IPV6_DROP_MEMBERSHIP};\n+pub use consts::os::bsd44::{IP_MULTICAST_TTL, IP_TTL};\n \n pub use funcs::c95::ctype::{isalnum, isalpha, iscntrl, isdigit};\n pub use funcs::c95::ctype::{islower, isprint, ispunct, isspace};\n@@ -169,7 +126,7 @@ pub use funcs::c95::ctype::{isupper, isxdigit, tolower, toupper};\n pub use funcs::c95::stdio::{fclose, feof, ferror, fflush, fgetc};\n pub use funcs::c95::stdio::{fgetpos, fgets, fopen, fputc, fputs};\n pub use funcs::c95::stdio::{fread, freopen, fseek, fsetpos, ftell};\n-pub use funcs::c95::stdio::{fwrite, perror, puts, remove, rewind};\n+pub use funcs::c95::stdio::{fwrite, perror, puts, remove, rename, rewind};\n pub use funcs::c95::stdio::{setbuf, setvbuf, tmpfile, ungetc};\n \n pub use funcs::c95::stdlib::{abs, atof, atoi, calloc, exit, _exit};\n@@ -192,6 +149,135 @@ pub use funcs::posix88::unistd::{execv, execve, execvp, getcwd};\n pub use funcs::posix88::unistd::{getpid, isatty, lseek, pipe, read};\n pub use funcs::posix88::unistd::{rmdir, unlink, write};\n \n+pub use funcs::bsd43::{socket, setsockopt, bind, send, recv, recvfrom};\n+pub use funcs::bsd43::{listen, sendto, accept, connect, getpeername, getsockname};\n+pub use funcs::bsd43::{shutdown};\n+\n+// But we also reexport most everything\n+// if you're interested in writing platform-specific code.\n+\n+// FIXME: This is a mess, but the design of this entire module needs to be\n+// reconsidered, so I'm not inclined to do better right now. As part of\n+// #11870 I removed all the pub globs here, leaving explicit reexports\n+// of everything that is actually used in-tree.\n+//\n+// So the following exports don't follow any particular plan.\n+\n+#[cfg(unix)] pub use consts::os::sysconf::{_SC_PAGESIZE};\n+#[cfg(unix)] pub use consts::os::posix88::{PROT_READ, PROT_WRITE, PROT_EXEC};\n+#[cfg(unix)] pub use consts::os::posix88::{MAP_FIXED, MAP_FILE, MAP_ANON, MAP_PRIVATE, MAP_FAILED};\n+#[cfg(unix)] pub use consts::os::posix88::{EACCES, EBADF, EINVAL, ENODEV, ENOMEM};\n+#[cfg(unix)] pub use consts::os::posix88::{ECONNREFUSED, ECONNRESET, EPERM, EPIPE};\n+#[cfg(unix)] pub use consts::os::posix88::{ENOTCONN, ECONNABORTED, EADDRNOTAVAIL, EINTR};\n+#[cfg(unix)] pub use consts::os::posix88::{EADDRINUSE, ENOENT, EISDIR, EAGAIN, EWOULDBLOCK};\n+#[cfg(unix)] pub use consts::os::posix88::{ECANCELED, SIGINT};\n+#[cfg(unix)] pub use consts::os::posix88::{SIGTERM, SIGKILL, SIGPIPE, PROT_NONE};\n+#[cfg(unix)] pub use consts::os::posix01::{SIG_IGN, WNOHANG};\n+#[cfg(unix)] pub use consts::os::bsd44::{AF_UNIX};\n+\n+#[cfg(unix)] pub use types::os::common::posix01::{pthread_t, timespec, timezone, timeval};\n+\n+#[cfg(unix)] pub use types::os::arch::c95::{suseconds_t};\n+#[cfg(unix)] pub use types::os::arch::posix88::{uid_t, gid_t};\n+#[cfg(unix)] pub use types::os::arch::posix01::{pthread_attr_t};\n+#[cfg(unix)] pub use types::os::arch::posix01::{stat, utimbuf};\n+#[cfg(unix)] pub use funcs::posix88::unistd::{sysconf, setgid, setsid, setuid, pread, pwrite};\n+#[cfg(unix)] pub use funcs::posix88::unistd::{getgid, getuid};\n+#[cfg(unix)] pub use funcs::posix88::unistd::{_PC_NAME_MAX, utime, nanosleep, pathconf, link};\n+#[cfg(unix)] pub use funcs::posix88::unistd::{chown};\n+#[cfg(unix)] pub use funcs::posix88::mman::{mmap, munmap, mprotect};\n+#[cfg(unix)] pub use funcs::posix88::dirent::{opendir, readdir_r, closedir};\n+#[cfg(unix)] pub use funcs::posix88::fcntl::{fcntl};\n+#[cfg(unix)] pub use funcs::posix01::stat_::{lstat};\n+#[cfg(unix)] pub use funcs::posix01::unistd::{fsync, ftruncate};\n+#[cfg(unix)] pub use funcs::posix01::unistd::{readlink, symlink};\n+\n+#[cfg(windows)] pub use consts::os::c95::{WSAECONNREFUSED, WSAECONNRESET, WSAEACCES};\n+#[cfg(windows)] pub use consts::os::c95::{WSAEWOULDBLOCK, WSAENOTCONN, WSAECONNABORTED};\n+#[cfg(windows)] pub use consts::os::c95::{WSAEADDRNOTAVAIL, WSAEADDRINUSE, WSAEINTR};\n+#[cfg(windows)] pub use consts::os::extra::{ERROR_INSUFFICIENT_BUFFER};\n+#[cfg(windows)] pub use consts::os::extra::{O_BINARY, O_NOINHERIT, PAGE_NOACCESS};\n+#[cfg(windows)] pub use consts::os::extra::{PAGE_READONLY, PAGE_READWRITE, PAGE_EXECUTE};\n+#[cfg(windows)] pub use consts::os::extra::{PAGE_EXECUTE_READ, PAGE_EXECUTE_READWRITE};\n+#[cfg(windows)] pub use consts::os::extra::{MEM_COMMIT, MEM_RESERVE, MEM_RELEASE};\n+#[cfg(windows)] pub use consts::os::extra::{FILE_MAP_READ, FILE_MAP_WRITE, FILE_MAP_EXECUTE};\n+#[cfg(windows)] pub use consts::os::extra::{ERROR_ALREADY_EXISTS, ERROR_NO_DATA};\n+#[cfg(windows)] pub use consts::os::extra::{ERROR_FILE_NOT_FOUND, ERROR_INVALID_NAME};\n+#[cfg(windows)] pub use consts::os::extra::{ERROR_BROKEN_PIPE, ERROR_INVALID_FUNCTION};\n+#[cfg(windows)] pub use consts::os::extra::{TRUE, FALSE, INFINITE};\n+#[cfg(windows)] pub use consts::os::extra::{PROCESS_TERMINATE, PROCESS_QUERY_INFORMATION};\n+#[cfg(windows)] pub use consts::os::extra::{STILL_ACTIVE, DETACHED_PROCESS};\n+#[cfg(windows)] pub use consts::os::extra::{CREATE_NEW_PROCESS_GROUP};\n+#[cfg(windows)] pub use consts::os::extra::{FILE_BEGIN, FILE_END, FILE_CURRENT};\n+#[cfg(windows)] pub use consts::os::extra::{FILE_GENERIC_READ, FILE_GENERIC_WRITE};\n+#[cfg(windows)] pub use consts::os::extra::{FILE_SHARE_READ, FILE_SHARE_WRITE, FILE_SHARE_DELETE};\n+#[cfg(windows)] pub use consts::os::extra::{TRUNCATE_EXISTING, CREATE_ALWAYS, OPEN_EXISTING};\n+#[cfg(windows)] pub use consts::os::extra::{CREATE_NEW, FILE_APPEND_DATA, FILE_WRITE_DATA};\n+#[cfg(windows)] pub use consts::os::extra::{OPEN_ALWAYS, FILE_ATTRIBUTE_NORMAL};\n+#[cfg(windows)] pub use consts::os::extra::{FILE_FLAG_BACKUP_SEMANTICS, INVALID_HANDLE_VALUE};\n+#[cfg(windows)] pub use consts::os::extra::{MOVEFILE_REPLACE_EXISTING};\n+#[cfg(windows)] pub use consts::os::extra::{GENERIC_READ, GENERIC_WRITE};\n+#[cfg(windows)] pub use consts::os::extra::{VOLUME_NAME_DOS, FILE_ATTRIBUTE_NORMAL};\n+#[cfg(windows)] pub use consts::os::extra::{PIPE_ACCESS_DUPLEX, FILE_FLAG_FIRST_PIPE_INSTANCE};\n+#[cfg(windows)] pub use consts::os::extra::{FILE_FLAG_OVERLAPPED, PIPE_TYPE_BYTE};\n+#[cfg(windows)] pub use consts::os::extra::{PIPE_READMODE_BYTE, PIPE_WAIT};\n+#[cfg(windows)] pub use consts::os::extra::{PIPE_UNLIMITED_INSTANCES, ERROR_ACCESS_DENIED};\n+#[cfg(windows)] pub use consts::os::extra::{FILE_WRITE_ATTRIBUTES, FILE_READ_ATTRIBUTES};\n+#[cfg(windows)] pub use consts::os::extra::{ERROR_PIPE_BUSY, ERROR_IO_PENDING};\n+#[cfg(windows)] pub use consts::os::extra::{ERROR_PIPE_CONNECTED};\n+#[cfg(windows)] pub use types::os::common::bsd44::{SOCKET};\n+#[cfg(windows)] pub use types::os::common::posix01::{stat, utimbuf};\n+#[cfg(windows)] pub use types::os::arch::extra::{HANDLE, BOOL, LPSECURITY_ATTRIBUTES};\n+#[cfg(windows)] pub use types::os::arch::extra::{LPCSTR, WORD, DWORD, BYTE, FILETIME};\n+#[cfg(windows)] pub use types::os::arch::extra::{LARGE_INTEGER, LPVOID, LONG};\n+#[cfg(windows)] pub use types::os::arch::extra::{time64_t, OVERLAPPED};\n+#[cfg(windows)] pub use types::os::arch::extra::{LPOVERLAPPED, SIZE_T, LPDWORD};\n+#[cfg(windows)] pub use funcs::c95::string::{wcslen};\n+#[cfg(windows)] pub use funcs::posix88::stat_::{wstat, wutime, wchmod, wrmdir};\n+#[cfg(windows)] pub use funcs::bsd43::{closesocket};\n+#[cfg(windows)] pub use funcs::extra::kernel32::{GetCurrentDirectoryW, GetLastError};\n+#[cfg(windows)] pub use funcs::extra::kernel32::{GetEnvironmentVariableW, SetEnvironmentVariableW};\n+#[cfg(windows)] pub use funcs::extra::kernel32::{GetModuleFileNameW, SetCurrentDirectoryW};\n+#[cfg(windows)] pub use funcs::extra::kernel32::{GetSystemInfo, VirtualAlloc, VirtualFree};\n+#[cfg(windows)] pub use funcs::extra::kernel32::{CreateFileMappingW, MapViewOfFile};\n+#[cfg(windows)] pub use funcs::extra::kernel32::{UnmapViewOfFile, CloseHandle};\n+#[cfg(windows)] pub use funcs::extra::kernel32::{WaitForSingleObject, GetSystemTimeAsFileTime};\n+#[cfg(windows)] pub use funcs::extra::kernel32::{QueryPerformanceCounter};\n+#[cfg(windows)] pub use funcs::extra::kernel32::{WaitForSingleObject, QueryPerformanceFrequency};\n+#[cfg(windows)] pub use funcs::extra::kernel32::{GetExitCodeProcess, TerminateProcess};\n+#[cfg(windows)] pub use funcs::extra::kernel32::{ReadFile, WriteFile, SetFilePointerEx};\n+#[cfg(windows)] pub use funcs::extra::kernel32::{FlushFileBuffers, SetEndOfFile, CreateFileW};\n+#[cfg(windows)] pub use funcs::extra::kernel32::{CreateDirectoryW, FindFirstFileW};\n+#[cfg(windows)] pub use funcs::extra::kernel32::{FindNextFileW, FindClose, DeleteFileW};\n+#[cfg(windows)] pub use funcs::extra::kernel32::{GetFinalPathNameByHandleW, CreateSymbolicLinkW};\n+#[cfg(windows)] pub use funcs::extra::kernel32::{CreateHardLinkW, CreateEventW};\n+#[cfg(windows)] pub use funcs::extra::kernel32::{FlushFileBuffers, CreateNamedPipeW};\n+#[cfg(windows)] pub use funcs::extra::kernel32::{SetNamedPipeHandleState, WaitNamedPipeW};\n+#[cfg(windows)] pub use funcs::extra::kernel32::{GetOverlappedResult, ConnectNamedPipe};\n+#[cfg(windows)] pub use funcs::extra::kernel32::{DisconnectNamedPipe, OpenProcess};\n+#[cfg(windows)] pub use funcs::extra::kernel32::{MoveFileExW, VirtualProtect};\n+#[cfg(windows)] pub use funcs::extra::msvcrt::{get_osfhandle, open_osfhandle};\n+\n+#[cfg(target_os = \"linux\")] #[cfg(target_os = \"android\")] #[cfg(target_os = \"freebsd\")]\n+pub use consts::os::posix01::{CLOCK_REALTIME, CLOCK_MONOTONIC};\n+\n+#[cfg(target_os = \"linux\")] #[cfg(target_os = \"android\")]\n+pub use funcs::posix01::unistd::{fdatasync};\n+\n+#[cfg(unix, not(target_os = \"freebsd\"))]\n+pub use consts::os::extra::{MAP_STACK};\n+\n+#[cfg(target_os = \"freebsd\")]\n+pub use consts::os::bsd44::{TCP_KEEPIDLE};\n+\n+#[cfg(target_os = \"macos\")]\n+pub use consts::os::bsd44::{TCP_KEEPALIVE};\n+#[cfg(target_os = \"macos\")]\n+pub use consts::os::extra::{F_FULLFSYNC};\n+#[cfg(target_os = \"macos\")]\n+pub use types::os::arch::extra::{mach_timebase_info};\n+\n+\n #[cfg(not(windows))]\n #[link(name = \"c\")]\n #[link(name = \"m\")]\n@@ -3028,7 +3114,6 @@ pub mod consts {\n             pub static MAP_PRIVATE : c_int = 0x0002;\n             pub static MAP_FIXED : c_int = 0x0010;\n             pub static MAP_ANON : c_int = 0x1000;\n-            pub static MAP_STACK : c_int = 0;\n \n             pub static MAP_FAILED : *c_void = -1 as *c_void;\n \n@@ -3274,6 +3359,7 @@ pub mod consts {\n             pub static MAP_HASSEMAPHORE : c_int = 0x0200;\n             pub static MAP_NOCACHE : c_int = 0x0400;\n             pub static MAP_JIT : c_int = 0x0800;\n+            pub static MAP_STACK : c_int = 0;\n         }\n         pub mod sysconf {\n             use types::os::arch::c95::c_int;"}]}