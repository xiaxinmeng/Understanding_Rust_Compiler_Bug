{"sha": "b982867a7349f84c17317599b59aeb5a7d8a83be", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5ODI4NjdhNzM0OWY4NGMxNzMxNzU5OWI1OWFlYjVhN2Q4YTgzYmU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-05-17T13:01:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-05-17T13:01:23Z"}, "message": "Auto merge of #60171 - matthewjasper:full-nll-compare-mode, r=pnkfelix\n\nUse -Zborrowck=mir for NLL compare mode\n\ncloses #56993\n\nr? @pnkfelix", "tree": {"sha": "1e74728d4b88f335cb3c21633fa7ce5cd3282637", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e74728d4b88f335cb3c21633fa7ce5cd3282637"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b982867a7349f84c17317599b59aeb5a7d8a83be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b982867a7349f84c17317599b59aeb5a7d8a83be", "html_url": "https://github.com/rust-lang/rust/commit/b982867a7349f84c17317599b59aeb5a7d8a83be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b982867a7349f84c17317599b59aeb5a7d8a83be/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39401465da4ce27aeeb2c2a26133ac35c63aa515", "url": "https://api.github.com/repos/rust-lang/rust/commits/39401465da4ce27aeeb2c2a26133ac35c63aa515", "html_url": "https://github.com/rust-lang/rust/commit/39401465da4ce27aeeb2c2a26133ac35c63aa515"}, {"sha": "be5fe051a843cfbbc1ba4fcd347b641417181b8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/be5fe051a843cfbbc1ba4fcd347b641417181b8f", "html_url": "https://github.com/rust-lang/rust/commit/be5fe051a843cfbbc1ba4fcd347b641417181b8f"}], "stats": {"total": 6166, "additions": 5202, "deletions": 964}, "files": [{"sha": "0f17976ef49653f872c87009ca6518c3d41dccf9", "filename": "src/test/codegen/enum-debug-niche-2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fcodegen%2Fenum-debug-niche-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fcodegen%2Fenum-debug-niche-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fenum-debug-niche-2.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -13,7 +13,6 @@\n // CHECK: {{.*}}DIDerivedType{{.*}}tag: DW_TAG_member,{{.*}}name: \"Error\",{{.*}}extraData: i64 0{{[,)].*}}\n \n #![feature(never_type)]\n-#![feature(nll)]\n \n #[derive(Copy, Clone)]\n pub struct Entity {"}, {"sha": "5165f9821fd88302c72db33115fe08fb4123f96b", "filename": "src/test/incremental/hashes/closure_expressions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fincremental%2Fhashes%2Fclosure_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fincremental%2Fhashes%2Fclosure_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fclosure_expressions.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -49,14 +49,14 @@ pub fn add_parameter() {\n // Change parameter pattern ----------------------------------------------------\n #[cfg(cfail1)]\n pub fn change_parameter_pattern() {\n-    let _ = |x: &u32| x;\n+    let _ = |x: (u32,)| x;\n }\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"HirBody, mir_built, typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_parameter_pattern() {\n-    let _ = |&x: &u32| x;\n+    let _ = |(x,): (u32,)| x;\n }\n \n "}, {"sha": "8348f9a77467888fe5b7273d7e76790a33f5fad9", "filename": "src/test/mir-opt/remove_fake_borrows.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fmir-opt%2Fremove_fake_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fmir-opt%2Fremove_fake_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fremove_fake_borrows.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -2,8 +2,6 @@\n \n // ignore-wasm32-bare\n \n-#![feature(nll)]\n-\n fn match_guard(x: Option<&&i32>, c: bool) -> i32 {\n     match x {\n         Some(0) if c => 0,"}, {"sha": "c62f98ea78d1ec1d460401bbfe9f0a3c5993073b", "filename": "src/test/run-fail/issue-51345.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Frun-fail%2Fissue-51345.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Frun-fail%2Fissue-51345.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fissue-51345.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,7 +1,5 @@\n // error-pattern: thread 'main' panicked at 'explicit panic'\n \n-#![feature(nll)]\n-\n fn main() {\n     let mut vec = vec![];\n     vec.push((vec.len(), panic!()));"}, {"sha": "96d2663500ef0e9ab8e72d1537098f09f850727a", "filename": "src/test/run-pass/borrowck/borrowck-multiple-borrows-interior-boxes.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-multiple-borrows-interior-boxes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-multiple-borrows-interior-boxes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-multiple-borrows-interior-boxes.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -3,8 +3,6 @@\n #![allow(unused_variables)]\n // Test case from #39963.\n \n-#![feature(nll)]\n-\n #[derive(Clone)]\n struct Foo(Option<Box<Foo>>, Option<Box<Foo>>);\n "}, {"sha": "fd0e346e2b42dee204376dcdd467c13bd0c46037", "filename": "src/test/run-pass/borrowck/borrowck-unused-mut-locals.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-unused-mut-locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-unused-mut-locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-unused-mut-locals.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-#![feature(nll)]\n #![deny(unused_mut)]\n \n #[derive(Debug)]"}, {"sha": "1242ae307d39c764fab8af0a1456eb3e4da0f732", "filename": "src/test/run-pass/borrowck/two-phase-bin-ops.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Frun-pass%2Fborrowck%2Ftwo-phase-bin-ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Frun-pass%2Fborrowck%2Ftwo-phase-bin-ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck%2Ftwo-phase-bin-ops.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,8 +1,4 @@\n // run-pass\n-// revisions: lxl nll\n-\n-#![cfg_attr(nll, feature(nll))]\n-\n use std::ops::{AddAssign, SubAssign, MulAssign, DivAssign, RemAssign};\n use std::ops::{BitAndAssign, BitOrAssign, BitXorAssign, ShlAssign, ShrAssign};\n "}, {"sha": "48362d0bb62822273b7d63db9867635399d59921", "filename": "src/test/run-pass/issues/issue-24535-allow-mutable-borrow-in-match-guard.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Frun-pass%2Fissues%2Fissue-24535-allow-mutable-borrow-in-match-guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Frun-pass%2Fissues%2Fissue-24535-allow-mutable-borrow-in-match-guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-24535-allow-mutable-borrow-in-match-guard.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -5,7 +5,6 @@\n // See further discussion on rust-lang/rust#24535,\n // rust-lang/rfcs#1006, and rust-lang/rfcs#107\n \n-#![feature(nll)]\n #![feature(bind_by_move_pattern_guards)]\n \n fn main() {"}, {"sha": "80d815379bec2fa7b272fbc17bcda278ddf2e601", "filename": "src/test/run-pass/issues/issue-48962.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Frun-pass%2Fissues%2Fissue-48962.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Frun-pass%2Fissues%2Fissue-48962.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-48962.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,7 +1,6 @@\n // run-pass\n #![allow(unused_must_use)]\n // Test that we are able to reinitialize box with moved referent\n-#![feature(nll)]\n static mut ORDER: [usize; 3] = [0, 0, 0];\n static mut INDEX: usize = 0;\n "}, {"sha": "15571e8bf5b286441a26e1bb2e9abab697fb3f2e", "filename": "src/test/run-pass/issues/issue-51345.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Frun-pass%2Fissues%2Fissue-51345.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Frun-pass%2Fissues%2Fissue-51345.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-51345.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n #![allow(unreachable_code)]\n-#![feature(nll)]\n \n fn main() {\n     let mut v = Vec::new();"}, {"sha": "9f4d57111bbe982dc4bf816230583c0089a3d1d6", "filename": "src/test/run-pass/nll/issue-47153-generic-const.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Frun-pass%2Fnll%2Fissue-47153-generic-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Frun-pass%2Fnll%2Fissue-47153-generic-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnll%2Fissue-47153-generic-const.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -3,7 +3,6 @@\n // Regression test for #47153: constants in a generic context (such as\n // a trait) used to ICE.\n \n-#![feature(nll)]\n #![allow(warnings)]\n \n trait Foo {"}, {"sha": "280bf081138cc96eacc943060a7a20fc19e21bce", "filename": "src/test/run-pass/nll/issue-47589.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Frun-pass%2Fnll%2Fissue-47589.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Frun-pass%2Fnll%2Fissue-47589.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnll%2Fissue-47589.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,7 +1,5 @@\n // run-pass\n \n-#![feature(nll)]\n-\n pub struct DescriptorSet<'a> {\n     pub slots: Vec<AttachInfo<'a, Resources>>\n }"}, {"sha": "3f8587eed41b99aaaccd78a36353f45c2946c914", "filename": "src/test/run-pass/nll/issue-48623-closure.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Frun-pass%2Fnll%2Fissue-48623-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Frun-pass%2Fnll%2Fissue-48623-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnll%2Fissue-48623-closure.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -2,8 +2,6 @@\n #![allow(path_statements)]\n #![allow(dead_code)]\n \n-#![feature(nll)]\n-\n struct WithDrop;\n \n impl Drop for WithDrop {"}, {"sha": "ba3eccff495e5c1ba6b5c68578ea929c4ba6c8a1", "filename": "src/test/run-pass/nll/issue-48623-generator.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Frun-pass%2Fnll%2Fissue-48623-generator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Frun-pass%2Fnll%2Fissue-48623-generator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnll%2Fissue-48623-generator.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -2,7 +2,6 @@\n #![allow(path_statements)]\n #![allow(dead_code)]\n \n-#![feature(nll)]\n #![feature(generators, generator_trait)]\n \n struct WithDrop;"}, {"sha": "55a2d231e19ff48922b5df0da4f85c04b735795c", "filename": "src/test/run-pass/nll/issue-50343.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Frun-pass%2Fnll%2Fissue-50343.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Frun-pass%2Fnll%2Fissue-50343.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnll%2Fissue-50343.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n \n-#![feature(nll)]\n #![deny(unused_mut)]\n \n fn main() {"}, {"sha": "69d7cdd83a6a1023964889e9c20077daa2ac9e87", "filename": "src/test/run-pass/nll/issue-50461-used-mut-from-moves.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Frun-pass%2Fnll%2Fissue-50461-used-mut-from-moves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Frun-pass%2Fnll%2Fissue-50461-used-mut-from-moves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnll%2Fissue-50461-used-mut-from-moves.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n \n-#![feature(nll)]\n #![deny(unused_mut)]\n \n struct Foo {"}, {"sha": "941c9eeb411d9ca5866da76c08bb523a1dca401d", "filename": "src/test/run-pass/nll/issue-53123-raw-pointer-cast.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Frun-pass%2Fnll%2Fissue-53123-raw-pointer-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Frun-pass%2Fnll%2Fissue-53123-raw-pointer-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnll%2Fissue-53123-raw-pointer-cast.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n \n-#![feature(nll)]\n #![allow(unused_variables)]\n \n pub trait TryTransform {"}, {"sha": "eb46b30b6b94a16e8d148af8a8d68a8dbb4dda35", "filename": "src/test/run-pass/nll/mutating_references.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Frun-pass%2Fnll%2Fmutating_references.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Frun-pass%2Fnll%2Fmutating_references.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnll%2Fmutating_references.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,7 +1,5 @@\n // run-pass\n \n-#![feature(nll)]\n-\n struct List<T> {\n     value: T,\n     next: Option<Box<List<T>>>,"}, {"sha": "84ac9bbd0ddc4246c9ef4025f289540093997f95", "filename": "src/test/run-pass/nll/process_or_insert_default.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Frun-pass%2Fnll%2Fprocess_or_insert_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Frun-pass%2Fnll%2Fprocess_or_insert_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnll%2Fprocess_or_insert_default.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,7 +1,5 @@\n // run-pass\n \n-#![feature(nll)]\n-\n use std::collections::HashMap;\n \n fn process_or_insert_default(map: &mut HashMap<usize, String>, key: usize) {"}, {"sha": "e59303d1f788f86dc10ff3095d2f2d4199676b9f", "filename": "src/test/run-pass/nll/rc-loop.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Frun-pass%2Fnll%2Frc-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Frun-pass%2Fnll%2Frc-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnll%2Frc-loop.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -6,8 +6,6 @@\n // `x`.  The lexical checker makes this very painful. The NLL checker\n // does not.\n \n-#![feature(nll)]\n-\n use std::rc::Rc;\n \n #[derive(Debug, PartialEq, Eq)]"}, {"sha": "ca99304f9b4a0b078aff7683abb651f727e07c5b", "filename": "src/test/ui/associated-types/associated-types-project-from-hrtb-in-fn-body.nll.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn-body.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn-body.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn-body.nll.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -0,0 +1,24 @@\n+error: lifetime may not live long enough\n+  --> $DIR/associated-types-project-from-hrtb-in-fn-body.rs:22:29\n+   |\n+LL | fn bar<'a, 'b, I : for<'x> Foo<&'x isize>>(\n+   |        --  -- lifetime `'b` defined here\n+   |        |\n+   |        lifetime `'a` defined here\n+...\n+LL |     let z: I::A = if cond { x } else { y };\n+   |                             ^ assignment requires that `'a` must outlive `'b`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/associated-types-project-from-hrtb-in-fn-body.rs:22:40\n+   |\n+LL | fn bar<'a, 'b, I : for<'x> Foo<&'x isize>>(\n+   |        --  -- lifetime `'b` defined here\n+   |        |\n+   |        lifetime `'a` defined here\n+...\n+LL |     let z: I::A = if cond { x } else { y };\n+   |                                        ^ assignment requires that `'b` must outlive `'a`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "d8506b9c8c81c777b0a37aaf1150947959b9b4ea", "filename": "src/test/ui/associated-types/associated-types-subtyping-1.nll.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-subtyping-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-subtyping-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-subtyping-1.nll.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -0,0 +1,24 @@\n+error: lifetime may not live long enough\n+  --> $DIR/associated-types-subtyping-1.rs:24:12\n+   |\n+LL | fn method2<'a,'b,T>(x: &'a T, y: &'b T)\n+   |            -- -- lifetime `'b` defined here\n+   |            |\n+   |            lifetime `'a` defined here\n+...\n+LL |     let a: <T as Trait<'a>>::Type = make_any();\n+   |            ^^^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'b` must outlive `'a`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/associated-types-subtyping-1.rs:35:13\n+   |\n+LL | fn method3<'a,'b,T>(x: &'a T, y: &'b T)\n+   |            -- -- lifetime `'b` defined here\n+   |            |\n+   |            lifetime `'a` defined here\n+...\n+LL |     let _c: <T as Trait<'a>>::Type = b;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'b` must outlive `'a`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "779e6dac92e252b032e2c31798aa7a2350191d13", "filename": "src/test/ui/associated-types/cache/project-fn-ret-contravariant.krisskross.nll.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.krisskross.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.krisskross.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.krisskross.nll.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -0,0 +1,24 @@\n+error: lifetime may not live long enough\n+  --> $DIR/project-fn-ret-contravariant.rs:45:4\n+   |\n+LL | fn transmute<'a,'b>(x: &'a u32, y: &'b u32) -> (&'a u32, &'b u32) {\n+   |              -- -- lifetime `'b` defined here\n+   |              |\n+   |              lifetime `'a` defined here\n+...\n+LL |    (a, b)\n+   |    ^^^^^^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/project-fn-ret-contravariant.rs:45:4\n+   |\n+LL | fn transmute<'a,'b>(x: &'a u32, y: &'b u32) -> (&'a u32, &'b u32) {\n+   |              -- -- lifetime `'b` defined here\n+   |              |\n+   |              lifetime `'a` defined here\n+...\n+LL |    (a, b)\n+   |    ^^^^^^ function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'b`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "f532c96ed2cc73ed21a190765b33a79a82eb24d5", "filename": "src/test/ui/associated-types/cache/project-fn-ret-contravariant.transmute.nll.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.transmute.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.transmute.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.transmute.nll.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -0,0 +1,10 @@\n+error: lifetime may not live long enough\n+  --> $DIR/project-fn-ret-contravariant.rs:38:4\n+   |\n+LL | fn baz<'a,'b>(x: &'a u32) -> &'static u32 {\n+   |        -- lifetime `'a` defined here\n+LL |    bar(foo, x)\n+   |    ^^^^^^^^^^^ returning this value requires that `'a` must outlive `'static`\n+\n+error: aborting due to previous error\n+"}, {"sha": "c45082fb0538f11d48d76c58519fd8e941eff1de", "filename": "src/test/ui/associated-types/cache/project-fn-ret-invariant.krisskross.nll.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.krisskross.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.krisskross.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.krisskross.nll.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -0,0 +1,24 @@\n+error: lifetime may not live long enough\n+  --> $DIR/project-fn-ret-invariant.rs:55:4\n+   |\n+LL | fn transmute<'a,'b>(x: Type<'a>, y: Type<'b>) -> (Type<'a>, Type<'b>) {\n+   |              -- -- lifetime `'b` defined here\n+   |              |\n+   |              lifetime `'a` defined here\n+...\n+LL |    (a, b)\n+   |    ^^^^^^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/project-fn-ret-invariant.rs:55:4\n+   |\n+LL | fn transmute<'a,'b>(x: Type<'a>, y: Type<'b>) -> (Type<'a>, Type<'b>) {\n+   |              -- -- lifetime `'b` defined here\n+   |              |\n+   |              lifetime `'a` defined here\n+...\n+LL |    (a, b)\n+   |    ^^^^^^ function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'b`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "2c11e7ffe930d215c2d2a024134478f57395228f", "filename": "src/test/ui/associated-types/cache/project-fn-ret-invariant.oneuse.nll.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.oneuse.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.oneuse.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.oneuse.nll.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -0,0 +1,24 @@\n+error: lifetime may not live long enough\n+  --> $DIR/project-fn-ret-invariant.rs:38:12\n+   |\n+LL | fn baz<'a,'b>(x: Type<'a>, y: Type<'b>) -> (Type<'a>, Type<'b>) {\n+   |        -- -- lifetime `'b` defined here\n+   |        |\n+   |        lifetime `'a` defined here\n+LL |    let f = foo; // <-- No consistent type can be inferred for `f` here.\n+LL |    let a = bar(f, x);\n+   |            ^^^^^^^^^ argument requires that `'a` must outlive `'b`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/project-fn-ret-invariant.rs:39:12\n+   |\n+LL | fn baz<'a,'b>(x: Type<'a>, y: Type<'b>) -> (Type<'a>, Type<'b>) {\n+   |        -- -- lifetime `'b` defined here\n+   |        |\n+   |        lifetime `'a` defined here\n+...\n+LL |    let b = bar(f, y);\n+   |            ^^^^^^^^^ argument requires that `'b` must outlive `'a`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "8be0ad6e88f3ad446cadee2c786b3152e80279d5", "filename": "src/test/ui/associated-types/cache/project-fn-ret-invariant.transmute.nll.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.transmute.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.transmute.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.transmute.nll.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -0,0 +1,11 @@\n+error: lifetime may not live long enough\n+  --> $DIR/project-fn-ret-invariant.rs:48:4\n+   |\n+LL | fn baz<'a,'b>(x: Type<'a>) -> Type<'static> {\n+   |        -- lifetime `'a` defined here\n+...\n+LL |    bar(foo, x)\n+   |    ^^^^^^^^^^^ returning this value requires that `'a` must outlive `'static`\n+\n+error: aborting due to previous error\n+"}, {"sha": "f66994b3f100a1d27f1afb7ad28286c363b8c502", "filename": "src/test/ui/borrowck/borrowck-anon-fields-variant.nll.stderr", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-anon-fields-variant.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-anon-fields-variant.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-anon-fields-variant.nll.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -0,0 +1,40 @@\n+error[E0503]: cannot use `y` because it was mutably borrowed\n+  --> $DIR/borrowck-anon-fields-variant.rs:17:7\n+   |\n+LL |       Foo::Y(ref mut a, _) => a,\n+   |              --------- borrow of `y.0` occurs here\n+...\n+LL |       Foo::Y(_, ref mut b) => b,\n+   |       ^^^^^^^^^^^^^^^^^^^^ use of borrowed `y.0`\n+...\n+LL |     *a += 1;\n+   |     ------- borrow later used here\n+\n+error[E0503]: cannot use `y` because it was mutably borrowed\n+  --> $DIR/borrowck-anon-fields-variant.rs:37:7\n+   |\n+LL |       Foo::Y(ref mut a, _) => a,\n+   |              --------- borrow of `y.0` occurs here\n+...\n+LL |       Foo::Y(ref mut b, _) => b,\n+   |       ^^^^^^^^^^^^^^^^^^^^ use of borrowed `y.0`\n+...\n+LL |     *a += 1;\n+   |     ------- borrow later used here\n+\n+error[E0499]: cannot borrow `y.0` as mutable more than once at a time\n+  --> $DIR/borrowck-anon-fields-variant.rs:37:14\n+   |\n+LL |       Foo::Y(ref mut a, _) => a,\n+   |              --------- first mutable borrow occurs here\n+...\n+LL |       Foo::Y(ref mut b, _) => b,\n+   |              ^^^^^^^^^ second mutable borrow occurs here\n+...\n+LL |     *a += 1;\n+   |     ------- first borrow later used here\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors have detailed explanations: E0499, E0503.\n+For more information about an error, try `rustc --explain E0499`."}, {"sha": "f1e1ae18839c4ed848c0a4fbdebe33faf8f76b87", "filename": "src/test/ui/borrowck/borrowck-describe-lvalue.nll.stderr", "status": "added", "additions": 366, "deletions": 0, "changes": 366, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.nll.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -0,0 +1,366 @@\n+error[E0499]: cannot borrow `x` as mutable more than once at a time\n+  --> $DIR/borrowck-describe-lvalue.rs:262:13\n+   |\n+LL |             let y = &mut x;\n+   |                     ------ first mutable borrow occurs here\n+LL |             &mut x;\n+   |             ^^^^^^ second mutable borrow occurs here\n+LL |             *y = 1;\n+   |             ------ first borrow later used here\n+\n+error[E0499]: cannot borrow `x` as mutable more than once at a time\n+  --> $DIR/borrowck-describe-lvalue.rs:272:20\n+   |\n+LL |                    let y = &mut x;\n+   |                            ------ first mutable borrow occurs here\n+LL |                    &mut x;\n+   |                    ^^^^^^ second mutable borrow occurs here\n+LL |                    *y = 1;\n+   |                    ------ first borrow later used here\n+\n+error: captured variable cannot escape `FnMut` closure body\n+  --> $DIR/borrowck-describe-lvalue.rs:270:16\n+   |\n+LL |              || {\n+   |               - inferred to be a `FnMut` closure\n+LL | /                || {\n+LL | |                    let y = &mut x;\n+LL | |                    &mut x;\n+LL | |                    *y = 1;\n+LL | |                    drop(y);\n+LL | |                 }\n+   | |_________________^ returns a closure that contains a reference to a captured variable, which then escapes the closure body\n+   |\n+   = note: `FnMut` closures only have access to their captured variables while they are executing...\n+   = note: ...therefore, they cannot allow references to captured variables to escape\n+\n+error[E0503]: cannot use `f.x` because it was mutably borrowed\n+  --> $DIR/borrowck-describe-lvalue.rs:41:9\n+   |\n+LL |         let x = f.x();\n+   |                 - borrow of `f` occurs here\n+LL |         f.x;\n+   |         ^^^ use of borrowed `f`\n+LL |         drop(x);\n+   |              - borrow later used here\n+\n+error[E0503]: cannot use `g.0` because it was mutably borrowed\n+  --> $DIR/borrowck-describe-lvalue.rs:48:9\n+   |\n+LL |         let x = g.x();\n+   |                 - borrow of `g` occurs here\n+LL |         g.0;\n+   |         ^^^ use of borrowed `g`\n+LL |         drop(x);\n+   |              - borrow later used here\n+\n+error[E0503]: cannot use `h.0` because it was mutably borrowed\n+  --> $DIR/borrowck-describe-lvalue.rs:55:9\n+   |\n+LL |         let x = &mut h.0;\n+   |                 -------- borrow of `h.0` occurs here\n+LL |         h.0;\n+   |         ^^^ use of borrowed `h.0`\n+LL |         drop(x);\n+   |              - borrow later used here\n+\n+error[E0503]: cannot use `e.0` because it was mutably borrowed\n+  --> $DIR/borrowck-describe-lvalue.rs:63:20\n+   |\n+LL |         let x = e.x();\n+   |                 - borrow of `e` occurs here\n+LL |         match e {\n+LL |             Baz::X(value) => value\n+   |                    ^^^^^ use of borrowed `e`\n+LL |         };\n+LL |         drop(x);\n+   |              - borrow later used here\n+\n+error[E0503]: cannot use `u.a` because it was mutably borrowed\n+  --> $DIR/borrowck-describe-lvalue.rs:71:9\n+   |\n+LL |         let x = &mut u.a;\n+   |                 -------- borrow of `u.a` occurs here\n+LL |         u.a;\n+   |         ^^^ use of borrowed `u.a`\n+LL |         drop(x);\n+   |              - borrow later used here\n+\n+error[E0503]: cannot use `f.x` because it was mutably borrowed\n+  --> $DIR/borrowck-describe-lvalue.rs:78:9\n+   |\n+LL |         let x = f.x();\n+   |                 - borrow of `*f` occurs here\n+LL |         f.x;\n+   |         ^^^ use of borrowed `*f`\n+LL |         drop(x);\n+   |              - borrow later used here\n+\n+error[E0503]: cannot use `g.0` because it was mutably borrowed\n+  --> $DIR/borrowck-describe-lvalue.rs:85:9\n+   |\n+LL |         let x = g.x();\n+   |                 - borrow of `*g` occurs here\n+LL |         g.0;\n+   |         ^^^ use of borrowed `*g`\n+LL |         drop(x);\n+   |              - borrow later used here\n+\n+error[E0503]: cannot use `h.0` because it was mutably borrowed\n+  --> $DIR/borrowck-describe-lvalue.rs:92:9\n+   |\n+LL |         let x = &mut h.0;\n+   |                 -------- borrow of `h.0` occurs here\n+LL |         h.0;\n+   |         ^^^ use of borrowed `h.0`\n+LL |         drop(x);\n+   |              - borrow later used here\n+\n+error[E0503]: cannot use `e.0` because it was mutably borrowed\n+  --> $DIR/borrowck-describe-lvalue.rs:100:20\n+   |\n+LL |         let x = e.x();\n+   |                 - borrow of `*e` occurs here\n+LL |         match *e {\n+LL |             Baz::X(value) => value\n+   |                    ^^^^^ use of borrowed `*e`\n+...\n+LL |         drop(x);\n+   |              - borrow later used here\n+\n+error[E0503]: cannot use `u.a` because it was mutably borrowed\n+  --> $DIR/borrowck-describe-lvalue.rs:109:9\n+   |\n+LL |         let x = &mut u.a;\n+   |                 -------- borrow of `u.a` occurs here\n+LL |         u.a;\n+   |         ^^^ use of borrowed `u.a`\n+LL |         drop(x);\n+   |              - borrow later used here\n+\n+error[E0503]: cannot use `v[..]` because it was mutably borrowed\n+  --> $DIR/borrowck-describe-lvalue.rs:117:15\n+   |\n+LL |         let x = &mut v;\n+   |                 ------ borrow of `v` occurs here\n+LL |         match v {\n+LL |             &[x, _, .., _, _] => println!(\"{}\", x),\n+   |               ^ use of borrowed `v`\n+...\n+LL |         drop(x);\n+   |              - borrow later used here\n+\n+error[E0503]: cannot use `v[..]` because it was mutably borrowed\n+  --> $DIR/borrowck-describe-lvalue.rs:122:18\n+   |\n+LL |         let x = &mut v;\n+   |                 ------ borrow of `v` occurs here\n+...\n+LL |             &[_, x, .., _, _] => println!(\"{}\", x),\n+   |                  ^ use of borrowed `v`\n+...\n+LL |         drop(x);\n+   |              - borrow later used here\n+\n+error[E0503]: cannot use `v[..]` because it was mutably borrowed\n+  --> $DIR/borrowck-describe-lvalue.rs:127:25\n+   |\n+LL |         let x = &mut v;\n+   |                 ------ borrow of `v` occurs here\n+...\n+LL |             &[_, _, .., x, _] => println!(\"{}\", x),\n+   |                         ^ use of borrowed `v`\n+...\n+LL |         drop(x);\n+   |              - borrow later used here\n+\n+error[E0503]: cannot use `v[..]` because it was mutably borrowed\n+  --> $DIR/borrowck-describe-lvalue.rs:132:28\n+   |\n+LL |         let x = &mut v;\n+   |                 ------ borrow of `v` occurs here\n+...\n+LL |             &[_, _, .., _, x] => println!(\"{}\", x),\n+   |                            ^ use of borrowed `v`\n+...\n+LL |         drop(x);\n+   |              - borrow later used here\n+\n+error[E0503]: cannot use `v[..]` because it was mutably borrowed\n+  --> $DIR/borrowck-describe-lvalue.rs:143:15\n+   |\n+LL |         let x = &mut v;\n+   |                 ------ borrow of `v` occurs here\n+LL |         match v {\n+LL |             &[x..] => println!(\"{:?}\", x),\n+   |               ^ use of borrowed `v`\n+...\n+LL |         drop(x);\n+   |              - borrow later used here\n+\n+error[E0503]: cannot use `v[..]` because it was mutably borrowed\n+  --> $DIR/borrowck-describe-lvalue.rs:148:18\n+   |\n+LL |         let x = &mut v;\n+   |                 ------ borrow of `v` occurs here\n+...\n+LL |             &[_, x..] => println!(\"{:?}\", x),\n+   |                  ^ use of borrowed `v`\n+...\n+LL |         drop(x);\n+   |              - borrow later used here\n+\n+error[E0503]: cannot use `v[..]` because it was mutably borrowed\n+  --> $DIR/borrowck-describe-lvalue.rs:153:15\n+   |\n+LL |         let x = &mut v;\n+   |                 ------ borrow of `v` occurs here\n+...\n+LL |             &[x.., _] => println!(\"{:?}\", x),\n+   |               ^ use of borrowed `v`\n+...\n+LL |         drop(x);\n+   |              - borrow later used here\n+\n+error[E0503]: cannot use `v[..]` because it was mutably borrowed\n+  --> $DIR/borrowck-describe-lvalue.rs:158:18\n+   |\n+LL |         let x = &mut v;\n+   |                 ------ borrow of `v` occurs here\n+...\n+LL |             &[_, x.., _] => println!(\"{:?}\", x),\n+   |                  ^ use of borrowed `v`\n+...\n+LL |         drop(x);\n+   |              - borrow later used here\n+\n+error[E0503]: cannot use `e` because it was mutably borrowed\n+  --> $DIR/borrowck-describe-lvalue.rs:171:13\n+   |\n+LL |         let x = &mut e;\n+   |                 ------ borrow of `e` occurs here\n+LL |         match e {\n+LL |             E::A(ref ax) =>\n+   |             ^^^^^^^^^^^^ use of borrowed `e`\n+...\n+LL |         drop(x);\n+   |              - borrow later used here\n+\n+error[E0502]: cannot borrow `e.0` as immutable because it is also borrowed as mutable\n+  --> $DIR/borrowck-describe-lvalue.rs:171:18\n+   |\n+LL |         let x = &mut e;\n+   |                 ------ mutable borrow occurs here\n+LL |         match e {\n+LL |             E::A(ref ax) =>\n+   |                  ^^^^^^ immutable borrow occurs here\n+...\n+LL |         drop(x);\n+   |              - mutable borrow later used here\n+\n+error[E0502]: cannot borrow `e.x` as immutable because it is also borrowed as mutable\n+  --> $DIR/borrowck-describe-lvalue.rs:175:23\n+   |\n+LL |         let x = &mut e;\n+   |                 ------ mutable borrow occurs here\n+...\n+LL |             E::B { x: ref bx } =>\n+   |                       ^^^^^^ immutable borrow occurs here\n+...\n+LL |         drop(x);\n+   |              - mutable borrow later used here\n+\n+error[E0502]: cannot borrow `s.y.0` as immutable because it is also borrowed as mutable\n+  --> $DIR/borrowck-describe-lvalue.rs:188:22\n+   |\n+LL |         let x = &mut s;\n+   |                 ------ mutable borrow occurs here\n+LL |         match s {\n+LL |             S  { y: (ref y0, _), .. } =>\n+   |                      ^^^^^^ immutable borrow occurs here\n+...\n+LL |         drop(x);\n+   |              - mutable borrow later used here\n+\n+error[E0502]: cannot borrow `s.x.y` as immutable because it is also borrowed as mutable\n+  --> $DIR/borrowck-describe-lvalue.rs:194:28\n+   |\n+LL |         let x = &mut s;\n+   |                 ------ mutable borrow occurs here\n+...\n+LL |             S  { x: F { y: ref x0, .. }, .. } =>\n+   |                            ^^^^^^ immutable borrow occurs here\n+...\n+LL |         drop(x);\n+   |              - mutable borrow later used here\n+\n+error[E0503]: cannot use `*v` because it was mutably borrowed\n+  --> $DIR/borrowck-describe-lvalue.rs:240:9\n+   |\n+LL |         let x = &mut v;\n+   |                 ------ borrow of `v` occurs here\n+LL |         v[0].y;\n+   |         ^^^^ use of borrowed `v`\n+...\n+LL |         drop(x);\n+   |              - borrow later used here\n+\n+error[E0503]: cannot use `v[_].y` because it was mutably borrowed\n+  --> $DIR/borrowck-describe-lvalue.rs:240:9\n+   |\n+LL |         let x = &mut v;\n+   |                 ------ borrow of `v` occurs here\n+LL |         v[0].y;\n+   |         ^^^^^^ use of borrowed `v`\n+...\n+LL |         drop(x);\n+   |              - borrow later used here\n+\n+error[E0502]: cannot borrow `v[..].x` as immutable because it is also borrowed as mutable\n+  --> $DIR/borrowck-describe-lvalue.rs:251:24\n+   |\n+LL |         let x = &mut v;\n+   |                 ------ mutable borrow occurs here\n+LL |         match v {\n+LL |             &[_, F {x: ref xf, ..}] => println!(\"{}\", xf),\n+   |                        ^^^^^^ immutable borrow occurs here\n+...\n+LL |         drop(x);\n+   |              - mutable borrow later used here\n+\n+error[E0502]: cannot borrow `*block.current` as immutable because it is also borrowed as mutable\n+  --> $DIR/borrowck-describe-lvalue.rs:210:29\n+   |\n+LL |             let x = &mut block;\n+   |                     ---------- mutable borrow occurs here\n+LL |             let p: &'a u8 = &*block.current;\n+   |                             ^^^^^^^^^^^^^^^ immutable borrow occurs here\n+...\n+LL |             drop(x);\n+   |                  - mutable borrow later used here\n+\n+error[E0502]: cannot borrow `*block.current` as immutable because it is also borrowed as mutable\n+  --> $DIR/borrowck-describe-lvalue.rs:227:33\n+   |\n+LL |             let x = &mut block;\n+   |                     ---------- mutable borrow occurs here\n+LL |             let p : *const u8 = &*(*block).current;\n+   |                                 ^^^^^^^^^^^^^^^^^^ immutable borrow occurs here\n+...\n+LL |             drop(x);\n+   |                  - mutable borrow later used here\n+\n+error[E0382]: use of moved value: `x`\n+  --> $DIR/borrowck-describe-lvalue.rs:282:22\n+   |\n+LL |                 drop(x);\n+   |                      - value moved here\n+LL |                 drop(x);\n+   |                      ^ value used here after move\n+   |\n+   = note: move occurs because `x` has type `std::vec::Vec<i32>`, which does not implement the `Copy` trait\n+\n+error: aborting due to 32 previous errors\n+\n+Some errors have detailed explanations: E0382, E0499, E0502, E0503.\n+For more information about an error, try `rustc --explain E0382`."}, {"sha": "3468f29fb1a23d7496ace1bb356ed1b9483da1ba", "filename": "src/test/ui/borrowck/borrowck-for-loop-head-linkage.nll.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-for-loop-head-linkage.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-for-loop-head-linkage.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-for-loop-head-linkage.nll.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -0,0 +1,27 @@\n+error[E0502]: cannot borrow `vector` as mutable because it is also borrowed as immutable\n+  --> $DIR/borrowck-for-loop-head-linkage.rs:7:9\n+   |\n+LL |     for &x in &vector {\n+   |               -------\n+   |               |\n+   |               immutable borrow occurs here\n+   |               immutable borrow later used here\n+LL |         let cap = vector.capacity();\n+LL |         vector.extend(repeat(0));\n+   |         ^^^^^^ mutable borrow occurs here\n+\n+error[E0502]: cannot borrow `vector` as mutable because it is also borrowed as immutable\n+  --> $DIR/borrowck-for-loop-head-linkage.rs:8:9\n+   |\n+LL |     for &x in &vector {\n+   |               -------\n+   |               |\n+   |               immutable borrow occurs here\n+   |               immutable borrow later used here\n+...\n+LL |         vector[1] = 5;\n+   |         ^^^^^^ mutable borrow occurs here\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0502`."}, {"sha": "86061c8cd6e87de991958b3f6c5b9da565a03aca", "filename": "src/test/ui/borrowck/borrowck-issue-48962.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-48962.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-48962.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-48962.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,5 +1,3 @@\n-#![feature(nll)]\n-\n struct Node {\n     elem: i32,\n     next: Option<Box<Node>>,"}, {"sha": "ee174f6736e1e72ebd85c94c4d432a0fdeecec0c", "filename": "src/test/ui/borrowck/borrowck-issue-48962.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-48962.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-48962.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-48962.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,5 +1,5 @@\n error[E0382]: use of moved value: `src`\n-  --> $DIR/borrowck-issue-48962.rs:16:5\n+  --> $DIR/borrowck-issue-48962.rs:14:5\n    |\n LL |     let mut src = &mut node;\n    |         ------- move occurs because `src` has type `&mut Node`, which does not implement the `Copy` trait\n@@ -9,7 +9,7 @@ LL |     src.next = None;\n    |     ^^^^^^^^ value used here after move\n \n error[E0382]: use of moved value: `src`\n-  --> $DIR/borrowck-issue-48962.rs:22:5\n+  --> $DIR/borrowck-issue-48962.rs:20:5\n    |\n LL |     let mut src = &mut (22, 44);\n    |         ------- move occurs because `src` has type `&mut (i32, i32)`, which does not implement the `Copy` trait"}, {"sha": "7e4a6322d5f5cd8179f788e0cd79f5db83c25f0d", "filename": "src/test/ui/borrowck/borrowck-mutate-in-guard.nll.stderr", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mutate-in-guard.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mutate-in-guard.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mutate-in-guard.nll.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -0,0 +1,41 @@\n+error[E0302]: cannot assign in a pattern guard\n+  --> $DIR/borrowck-mutate-in-guard.rs:10:25\n+   |\n+LL |         Enum::A(_) if { x = Enum::B(false); false } => 1,\n+   |                         ^^^^^^^^^^^^^^^^^^ assignment in pattern guard\n+\n+error[E0301]: cannot mutably borrow in a pattern guard\n+  --> $DIR/borrowck-mutate-in-guard.rs:15:38\n+   |\n+LL |         Enum::A(_) if { let y = &mut x; *y = Enum::B(false); false } => 1,\n+   |                                      ^ borrowed mutably in pattern guard\n+   |\n+   = help: add #![feature(bind_by_move_pattern_guards)] to the crate attributes to enable\n+\n+error[E0302]: cannot assign in a pattern guard\n+  --> $DIR/borrowck-mutate-in-guard.rs:15:41\n+   |\n+LL |         Enum::A(_) if { let y = &mut x; *y = Enum::B(false); false } => 1,\n+   |                                         ^^^^^^^^^^^^^^^^^^^ assignment in pattern guard\n+\n+error[E0510]: cannot assign `x` in match guard\n+  --> $DIR/borrowck-mutate-in-guard.rs:10:25\n+   |\n+LL |     match x {\n+   |           - value is immutable in match guard\n+LL |         Enum::A(_) if { x = Enum::B(false); false } => 1,\n+   |                         ^^^^^^^^^^^^^^^^^^ cannot assign\n+\n+error[E0510]: cannot mutably borrow `x` in match guard\n+  --> $DIR/borrowck-mutate-in-guard.rs:15:33\n+   |\n+LL |     match x {\n+   |           - value is immutable in match guard\n+...\n+LL |         Enum::A(_) if { let y = &mut x; *y = Enum::B(false); false } => 1,\n+   |                                 ^^^^^^ cannot mutably borrow\n+\n+error: aborting due to 5 previous errors\n+\n+Some errors have detailed explanations: E0301, E0302, E0510.\n+For more information about an error, try `rustc --explain E0301`."}, {"sha": "49c3f861ea9931278d78aea0c2c587dc672dd856", "filename": "src/test/ui/borrowck/borrowck-object-lifetime.nll.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-object-lifetime.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-object-lifetime.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-object-lifetime.nll.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -0,0 +1,23 @@\n+error[E0502]: cannot borrow `*x` as mutable because it is also borrowed as immutable\n+  --> $DIR/borrowck-object-lifetime.rs:20:13\n+   |\n+LL |     let y = x.borrowed();\n+   |             - immutable borrow occurs here\n+LL |     let z = x.mut_borrowed();\n+   |             ^ mutable borrow occurs here\n+LL |     y.use_ref();\n+   |     - immutable borrow later used here\n+\n+error[E0502]: cannot borrow `x` as mutable because it is also borrowed as immutable\n+  --> $DIR/borrowck-object-lifetime.rs:26:13\n+   |\n+LL |     let y = x.borrowed();\n+   |             - immutable borrow occurs here\n+LL |     let z = &mut x;\n+   |             ^^^^^^ mutable borrow occurs here\n+LL |     y.use_ref();\n+   |     - immutable borrow later used here\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0502`."}, {"sha": "e6d0f88e3ea8bf42014772180f1b04c99f0100e1", "filename": "src/test/ui/borrowck/borrowck-reborrow-from-shorter-lived-andmut.nll.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reborrow-from-shorter-lived-andmut.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reborrow-from-shorter-lived-andmut.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reborrow-from-shorter-lived-andmut.nll.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -0,0 +1,12 @@\n+error: lifetime may not live long enough\n+  --> $DIR/borrowck-reborrow-from-shorter-lived-andmut.rs:9:5\n+   |\n+LL | fn copy_borrowed_ptr<'a,'b>(p: &'a mut S<'b>) -> S<'b> {\n+   |                      -- -- lifetime `'b` defined here\n+   |                      |\n+   |                      lifetime `'a` defined here\n+LL |     S { pointer: &mut *p.pointer }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n+\n+error: aborting due to previous error\n+"}, {"sha": "20ab905fec46e591df83e2f5021d6e67c75fcd35", "filename": "src/test/ui/borrowck/issue-10876.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fborrowck%2Fissue-10876.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fborrowck%2Fissue-10876.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-10876.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,7 +1,5 @@\n // run-pass\n \n-#![feature(nll)]\n-\n enum Nat {\n     S(Box<Nat>),\n     Z"}, {"sha": "7d5acb95751ed99d467cfbb43e7cdb1838944316", "filename": "src/test/ui/borrowck/issue-51348-multi-ref-mut-in-guard.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fborrowck%2Fissue-51348-multi-ref-mut-in-guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fborrowck%2Fissue-51348-multi-ref-mut-in-guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-51348-multi-ref-mut-in-guard.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -8,8 +8,6 @@\n \n // run-pass\n \n-#![feature(nll)]\n-\n fn foo(x: &mut Result<(u32, u32), (u32, u32)>) -> u32 {\n     match *x {\n         Ok((ref mut v, _)) | Err((_, ref mut v)) if *v > 0 => { *v }"}, {"sha": "671e83dfadc8b326709adc993e0a298ca7f125f4", "filename": "src/test/ui/borrowck/issue-52713-bug.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fborrowck%2Fissue-52713-bug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fborrowck%2Fissue-52713-bug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-52713-bug.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -2,8 +2,6 @@\n // computing liveness that wound up accidentally causing the program\n // below to be accepted.\n \n-#![feature(nll)]\n-\n fn foo<'a>(x: &'a mut u32) -> u32 {\n     let mut x = 22;\n     let y = &x;"}, {"sha": "4abb6fb2c71868674dbf2266cd1c3afae61c9c71", "filename": "src/test/ui/borrowck/issue-52713-bug.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fborrowck%2Fissue-52713-bug.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fborrowck%2Fissue-52713-bug.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-52713-bug.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,5 +1,5 @@\n error[E0506]: cannot assign to `x` because it is borrowed\n-  --> $DIR/issue-52713-bug.rs:14:5\n+  --> $DIR/issue-52713-bug.rs:12:5\n    |\n LL |     let y = &x;\n    |             -- borrow of `x` occurs here"}, {"sha": "51df40016d8a78032e9d21ea4da358ec1a502d0f", "filename": "src/test/ui/borrowck/issue-54597-reject-move-out-of-borrow-via-pat.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fborrowck%2Fissue-54597-reject-move-out-of-borrow-via-pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fborrowck%2Fissue-54597-reject-move-out-of-borrow-via-pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-54597-reject-move-out-of-borrow-via-pat.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,5 +1,3 @@\n-#![feature(nll)]\n-\n #![allow(dead_code)]\n \n #[derive(Debug)]"}, {"sha": "519f1d6fb2791b3107f8530d56ea0b4456750dd9", "filename": "src/test/ui/borrowck/issue-54597-reject-move-out-of-borrow-via-pat.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fborrowck%2Fissue-54597-reject-move-out-of-borrow-via-pat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fborrowck%2Fissue-54597-reject-move-out-of-borrow-via-pat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-54597-reject-move-out-of-borrow-via-pat.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,5 +1,5 @@\n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/issue-54597-reject-move-out-of-borrow-via-pat.rs:16:13\n+  --> $DIR/issue-54597-reject-move-out-of-borrow-via-pat.rs:14:13\n    |\n LL |             *array\n    |             ^^^^^^"}, {"sha": "efa313a9d23f4c2ec6ae533dc923e881d6f79944", "filename": "src/test/ui/borrowck/issue-58776-borrowck-scans-children.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fborrowck%2Fissue-58776-borrowck-scans-children.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fborrowck%2Fissue-58776-borrowck-scans-children.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-58776-borrowck-scans-children.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,19 +1,11 @@\n-// ignore-compare-mode-nll\n-\n-// revisions: migrate nll\n-\n-#![cfg_attr(nll, feature(nll))]\n-\n fn main() {\n     let mut greeting = \"Hello world!\".to_string();\n     let res = (|| (|| &greeting)())();\n \n     greeting = \"DEALLOCATED\".to_string();\n-    //[migrate]~^ ERROR cannot assign\n-    //[nll]~^^ ERROR cannot assign\n+    //~^ ERROR cannot assign\n     drop(greeting);\n-    //[migrate]~^ ERROR cannot move\n-    //[nll]~^^ ERROR cannot move\n+    //~^ ERROR cannot move\n \n     println!(\"thread result: {:?}\", res);\n }"}, {"sha": "9b1d6fa7d357583c4ffc58d0f7f080fc60d5dfd0", "filename": "src/test/ui/borrowck/issue-58776-borrowck-scans-children.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fborrowck%2Fissue-58776-borrowck-scans-children.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fborrowck%2Fissue-58776-borrowck-scans-children.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-58776-borrowck-scans-children.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,5 +1,5 @@\n error[E0506]: cannot assign to `greeting` because it is borrowed\n-  --> $DIR/issue-58776-borrowck-scans-children.rs:11:5\n+  --> $DIR/issue-58776-borrowck-scans-children.rs:5:5\n    |\n LL |     let res = (|| (|| &greeting)())();\n    |                --      -------- borrow occurs due to use in closure\n@@ -13,7 +13,7 @@ LL |     println!(\"thread result: {:?}\", res);\n    |                                     --- borrow later used here\n \n error[E0505]: cannot move out of `greeting` because it is borrowed\n-  --> $DIR/issue-58776-borrowck-scans-children.rs:14:10\n+  --> $DIR/issue-58776-borrowck-scans-children.rs:7:10\n    |\n LL |     let res = (|| (|| &greeting)())();\n    |                --      -------- borrow occurs due to use in closure", "previous_filename": "src/test/ui/borrowck/issue-58776-borrowck-scans-children.nll.stderr"}, {"sha": "0da715bbdb76429b638fb4fe0aa464a946f2c5ea", "filename": "src/test/ui/borrowck/issue-7573.nll.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fborrowck%2Fissue-7573.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fborrowck%2Fissue-7573.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-7573.nll.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -0,0 +1,14 @@\n+error[E0521]: borrowed data escapes outside of closure\n+  --> $DIR/issue-7573.rs:21:9\n+   |\n+LL |     let mut lines_to_use: Vec<&CrateId> = Vec::new();\n+   |         ---------------- `lines_to_use` is declared here, outside of the closure body\n+LL |\n+LL |     let push_id = |installed_id: &CrateId| {\n+   |                    ------------ `installed_id` is a reference that is only valid in the closure body\n+...\n+LL |         lines_to_use.push(installed_id);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `installed_id` escapes the closure body here\n+\n+error: aborting due to previous error\n+"}, {"sha": "4797a9d456cc16c9bc3336024d4e1fa43cca7367", "filename": "src/test/ui/borrowck/regions-escape-bound-fn-2.nll.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-bound-fn-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-bound-fn-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-bound-fn-2.nll.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -0,0 +1,12 @@\n+error[E0521]: borrowed data escapes outside of closure\n+  --> $DIR/regions-escape-bound-fn-2.rs:8:18\n+   |\n+LL |     let mut x = None;\n+   |         ----- `x` is declared here, outside of the closure body\n+LL |     with_int(|y| x = Some(y));\n+   |               -  ^^^^^^^^^^^ `y` escapes the closure body here\n+   |               |\n+   |               `y` is a reference that is only valid in the closure body\n+\n+error: aborting due to previous error\n+"}, {"sha": "2b3a9816e454df8cc2c227395f978e48477122e7", "filename": "src/test/ui/borrowck/regions-escape-bound-fn.nll.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-bound-fn.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-bound-fn.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-bound-fn.nll.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -0,0 +1,12 @@\n+error[E0521]: borrowed data escapes outside of closure\n+  --> $DIR/regions-escape-bound-fn.rs:8:18\n+   |\n+LL |     let mut x: Option<&isize> = None;\n+   |         ----- `x` is declared here, outside of the closure body\n+LL |     with_int(|y| x = Some(y));\n+   |               -  ^^^^^^^^^^^ `y` escapes the closure body here\n+   |               |\n+   |               `y` is a reference that is only valid in the closure body\n+\n+error: aborting due to previous error\n+"}, {"sha": "8ceefd25344a45647f0e259ee4577784c46db5ae", "filename": "src/test/ui/borrowck/regions-escape-unboxed-closure.nll.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-unboxed-closure.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-unboxed-closure.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-unboxed-closure.nll.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -0,0 +1,12 @@\n+error[E0521]: borrowed data escapes outside of closure\n+  --> $DIR/regions-escape-unboxed-closure.rs:6:23\n+   |\n+LL |     let mut x: Option<&isize> = None;\n+   |         ----- `x` is declared here, outside of the closure body\n+LL |     with_int(&mut |y| x = Some(y));\n+   |                    -  ^^^^^^^^^^^ `y` escapes the closure body here\n+   |                    |\n+   |                    `y` is a reference that is only valid in the closure body\n+\n+error: aborting due to previous error\n+"}, {"sha": "12222342c95a1d7fbca0ed24924ba2ed7fc09be8", "filename": "src/test/ui/borrowck/two-phase-across-loop.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-across-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-across-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-across-loop.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,8 +1,6 @@\n // Test that a borrow which starts as a 2-phase borrow and gets\n // carried around a loop winds up conflicting with itself.\n \n-#![feature(nll)]\n-\n struct Foo { x: String }\n \n impl Foo {"}, {"sha": "38993a50bf6b20e84b192b15731e221c56a79c4c", "filename": "src/test/ui/borrowck/two-phase-across-loop.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-across-loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-across-loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-across-loop.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,5 +1,5 @@\n error[E0499]: cannot borrow `foo` as mutable more than once at a time\n-  --> $DIR/two-phase-across-loop.rs:19:22\n+  --> $DIR/two-phase-across-loop.rs:17:22\n    |\n LL |         strings.push(foo.get_string());\n    |                      ^^^ mutable borrow starts here in previous iteration of loop"}, {"sha": "bb646d7caf1e2ea917270a3ec137d3fb6e5e9b38", "filename": "src/test/ui/borrowck/two-phase-multi-mut.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-multi-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-multi-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-multi-mut.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,5 +1,3 @@\n-#![feature(nll)]\n-\n struct Foo {\n }\n "}, {"sha": "33fa4a3a15075ab5fc066359c21e5fe975634991", "filename": "src/test/ui/borrowck/two-phase-multi-mut.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-multi-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-multi-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-multi-mut.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,5 +1,5 @@\n error[E0499]: cannot borrow `foo` as mutable more than once at a time\n-  --> $DIR/two-phase-multi-mut.rs:13:5\n+  --> $DIR/two-phase-multi-mut.rs:11:5\n    |\n LL |     foo.method(&mut foo);\n    |     ^^^^------^--------^\n@@ -9,7 +9,7 @@ LL |     foo.method(&mut foo);\n    |     second mutable borrow occurs here\n \n error[E0499]: cannot borrow `foo` as mutable more than once at a time\n-  --> $DIR/two-phase-multi-mut.rs:13:16\n+  --> $DIR/two-phase-multi-mut.rs:11:16\n    |\n LL |     foo.method(&mut foo);\n    |     --- ------ ^^^^^^^^ second mutable borrow occurs here"}, {"sha": "d2ea5ab2077e577503f59f91e5adcf348d350dbb", "filename": "src/test/ui/borrowck/two-phase-reservation-sharing-interference-future-compat-lint.nll.stderr", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-future-compat-lint.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-future-compat-lint.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-future-compat-lint.nll.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -0,0 +1,36 @@\n+error[E0502]: cannot borrow `v` as mutable because it is also borrowed as immutable\n+  --> $DIR/two-phase-reservation-sharing-interference-future-compat-lint.rs:13:9\n+   |\n+LL |         let shared = &v;\n+   |                      -- immutable borrow occurs here\n+LL | \n+LL |         v.push(shared.len());\n+   |         ^      ------ immutable borrow later used here\n+   |         |\n+   |         mutable borrow occurs here\n+\n+error[E0502]: cannot borrow `v` as mutable because it is also borrowed as immutable\n+  --> $DIR/two-phase-reservation-sharing-interference-future-compat-lint.rs:24:9\n+   |\n+LL |         let shared = &v;\n+   |                      -- immutable borrow occurs here\n+LL | \n+LL |         v.push(shared.len());\n+   |         ^      ------ immutable borrow later used here\n+   |         |\n+   |         mutable borrow occurs here\n+\n+error[E0502]: cannot borrow `v` as mutable because it is also borrowed as immutable\n+  --> $DIR/two-phase-reservation-sharing-interference-future-compat-lint.rs:37:9\n+   |\n+LL |         let shared = &v;\n+   |                      -- immutable borrow occurs here\n+LL | \n+LL |         v.push(shared.len());\n+   |         ^      ------ immutable borrow later used here\n+   |         |\n+   |         mutable borrow occurs here\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0502`."}, {"sha": "a1afbb06390f8da53507f64c6fb26b3db5128339", "filename": "src/test/ui/c-variadic/variadic-ffi-4.nll.stderr", "status": "renamed", "additions": 26, "deletions": 18, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-4.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-4.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-4.nll.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,21 +1,21 @@\n error[E0621]: explicit lifetime required in the type of `ap`\n-  --> $DIR/variadic-ffi-5.rs:11:5\n+  --> $DIR/variadic-ffi-4.rs:8:5\n    |\n LL | pub unsafe extern \"C\" fn no_escape0<'a>(_: usize, ap: ...) -> VaList<'a> {\n    |                                                       --- help: add explicit lifetime `'a` to the type of `ap`: `core::ffi::VaList<'a>`\n LL |     ap\n    |     ^^ lifetime `'a` required\n \n error[E0621]: explicit lifetime required in the type of `ap`\n-  --> $DIR/variadic-ffi-5.rs:15:5\n+  --> $DIR/variadic-ffi-4.rs:12:5\n    |\n LL | pub unsafe extern \"C\" fn no_escape1(_: usize, ap: ...) -> VaList<'static> {\n    |                                                   --- help: add explicit lifetime `'static` to the type of `ap`: `core::ffi::VaList<'static>`\n LL |     ap\n    |     ^^ lifetime `'static` required\n \n error: lifetime may not live long enough\n-  --> $DIR/variadic-ffi-5.rs:19:33\n+  --> $DIR/variadic-ffi-4.rs:16:33\n    |\n LL |     let _ = ap.with_copy(|ap| { ap });\n    |                           ---   ^^ returning this value requires that `'1` must outlive `'2`\n@@ -24,40 +24,48 @@ LL |     let _ = ap.with_copy(|ap| { ap });\n    |                           has type `core::ffi::VaList<'1>`\n \n error: lifetime may not live long enough\n-  --> $DIR/variadic-ffi-5.rs:23:5\n+  --> $DIR/variadic-ffi-4.rs:20:5\n    |\n-LL | pub unsafe extern \"C\" fn no_escape3(_: usize, ap0: &mut VaList, mut ap1: ...) {\n-   |                                               ---               ------- has type `core::ffi::VaList<'1>`\n+LL | pub unsafe extern \"C\" fn no_escape3(_: usize, mut ap0: &mut VaList, mut ap1: ...) {\n+   |                                               -------               ------- has type `core::ffi::VaList<'1>`\n    |                                               |\n    |                                               has type `&mut core::ffi::VaList<'2>`\n LL |     *ap0 = ap1;\n    |     ^^^^^^^^^^ assignment requires that `'1` must outlive `'2`\n \n error: lifetime may not live long enough\n-  --> $DIR/variadic-ffi-5.rs:27:5\n+  --> $DIR/variadic-ffi-4.rs:24:5\n    |\n-LL | pub unsafe extern \"C\" fn no_escape4(_: usize, mut ap0: &mut VaList, mut ap1: ...) {\n-   |                                               -------               ------- has type `core::ffi::VaList<'2>`\n+LL | pub unsafe extern \"C\" fn no_escape4(_: usize, ap0: &mut VaList, mut ap1: ...) {\n+   |                                               ---               ------- has type `core::ffi::VaList<'2>`\n    |                                               |\n    |                                               has type `&mut core::ffi::VaList<'1>`\n LL |     ap0 = &mut ap1;\n    |     ^^^^^^^^^^^^^^ assignment requires that `'1` must outlive `'2`\n \n error: lifetime may not live long enough\n-  --> $DIR/variadic-ffi-5.rs:27:5\n+  --> $DIR/variadic-ffi-4.rs:24:5\n    |\n-LL | pub unsafe extern \"C\" fn no_escape4(_: usize, mut ap0: &mut VaList, mut ap1: ...) {\n-   |                                               -------               ------- has type `core::ffi::VaList<'1>`\n+LL | pub unsafe extern \"C\" fn no_escape4(_: usize, ap0: &mut VaList, mut ap1: ...) {\n+   |                                               ---               ------- has type `core::ffi::VaList<'1>`\n    |                                               |\n    |                                               has type `&mut core::ffi::VaList<'2>`\n LL |     ap0 = &mut ap1;\n    |     ^^^^^^^^^^^^^^ assignment requires that `'1` must outlive `'2`\n \n+error[E0384]: cannot assign to immutable argument `ap0`\n+  --> $DIR/variadic-ffi-4.rs:24:5\n+   |\n+LL | pub unsafe extern \"C\" fn no_escape4(_: usize, ap0: &mut VaList, mut ap1: ...) {\n+   |                                               --- help: make this binding mutable: `mut ap0`\n+LL |     ap0 = &mut ap1;\n+   |     ^^^^^^^^^^^^^^ cannot assign to immutable argument\n+\n error[E0597]: `ap1` does not live long enough\n-  --> $DIR/variadic-ffi-5.rs:27:11\n+  --> $DIR/variadic-ffi-4.rs:24:11\n    |\n-LL | pub unsafe extern \"C\" fn no_escape4(_: usize, mut ap0: &mut VaList, mut ap1: ...) {\n-   |                                                        - let's call the lifetime of this reference `'1`\n+LL | pub unsafe extern \"C\" fn no_escape4(_: usize, ap0: &mut VaList, mut ap1: ...) {\n+   |                                                    - let's call the lifetime of this reference `'1`\n LL |     ap0 = &mut ap1;\n    |     ------^^^^^^^^\n    |     |     |\n@@ -67,7 +75,7 @@ LL |     ap0 = &mut ap1;\n LL | }\n    |  - `ap1` dropped here while still borrowed\n \n-error: aborting due to 7 previous errors\n+error: aborting due to 8 previous errors\n \n-Some errors have detailed explanations: E0597, E0621.\n-For more information about an error, try `rustc --explain E0597`.\n+Some errors have detailed explanations: E0384, E0597, E0621.\n+For more information about an error, try `rustc --explain E0384`.", "previous_filename": "src/test/ui/c-variadic/variadic-ffi-5.stderr"}, {"sha": "fcc80d9b0cca0a2d62682fd5ae1490f22c0da6a0", "filename": "src/test/ui/c-variadic/variadic-ffi-5.rs", "status": "removed", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/39401465da4ce27aeeb2c2a26133ac35c63aa515/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39401465da4ce27aeeb2c2a26133ac35c63aa515/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-5.rs?ref=39401465da4ce27aeeb2c2a26133ac35c63aa515", "patch": "@@ -1,31 +0,0 @@\n-#![crate_type=\"lib\"]\n-#![no_std]\n-#![feature(c_variadic)]\n-// The tests in this file are similar to that of variadic-ffi-4, but this\n-// one enables nll.\n-#![feature(nll)]\n-\n-use core::ffi::VaList;\n-\n-pub unsafe extern \"C\" fn no_escape0<'a>(_: usize, ap: ...) -> VaList<'a> {\n-    ap //~ ERROR: explicit lifetime required\n-}\n-\n-pub unsafe extern \"C\" fn no_escape1(_: usize, ap: ...) -> VaList<'static> {\n-    ap //~ ERROR: explicit lifetime required\n-}\n-\n-pub unsafe extern \"C\" fn no_escape2(_: usize, ap: ...) {\n-    let _ = ap.with_copy(|ap| { ap }); //~ ERROR: lifetime may not live long enough\n-}\n-\n-pub unsafe extern \"C\" fn no_escape3(_: usize, ap0: &mut VaList, mut ap1: ...) {\n-    *ap0 = ap1; //~ ERROR: lifetime may not live long enough\n-}\n-\n-pub unsafe extern \"C\" fn no_escape4(_: usize, mut ap0: &mut VaList, mut ap1: ...) {\n-    ap0 = &mut ap1;\n-    //~^ ERROR: lifetime may not live long enough\n-    //~^^ ERROR: lifetime may not live long enough\n-    //~^^^ ERROR: `ap1` does not live long enough\n-}"}, {"sha": "7e4ac4e8ce65691612531ce5a833516dd07980bb", "filename": "src/test/ui/closure-expected-type/expect-fn-supply-fn.nll.stderr", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.nll.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -0,0 +1,53 @@\n+error[E0631]: type mismatch in closure arguments\n+  --> $DIR/expect-fn-supply-fn.rs:30:5\n+   |\n+LL |     with_closure_expecting_fn_with_free_region(|x: fn(&u32), y| {});\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ---------------- found signature of `fn(for<'r> fn(&'r u32), _) -> _`\n+   |     |\n+   |     expected signature of `fn(fn(&'a u32), &i32) -> _`\n+   |\n+note: required by `with_closure_expecting_fn_with_free_region`\n+  --> $DIR/expect-fn-supply-fn.rs:1:1\n+   |\n+LL | / fn with_closure_expecting_fn_with_free_region<F>(_: F)\n+LL | |     where F: for<'a> FnOnce(fn(&'a u32), &i32)\n+LL | | {\n+LL | | }\n+   | |_^\n+\n+error[E0631]: type mismatch in closure arguments\n+  --> $DIR/expect-fn-supply-fn.rs:37:5\n+   |\n+LL |     with_closure_expecting_fn_with_bound_region(|x: fn(&'x u32), y| {});\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ------------------- found signature of `fn(fn(&'x u32), _) -> _`\n+   |     |\n+   |     expected signature of `fn(for<'r> fn(&'r u32), &i32) -> _`\n+   |\n+note: required by `with_closure_expecting_fn_with_bound_region`\n+  --> $DIR/expect-fn-supply-fn.rs:6:1\n+   |\n+LL | / fn with_closure_expecting_fn_with_bound_region<F>(_: F)\n+LL | |     where F: FnOnce(fn(&u32), &i32)\n+LL | | {\n+LL | | }\n+   | |_^\n+\n+error[E0631]: type mismatch in closure arguments\n+  --> $DIR/expect-fn-supply-fn.rs:46:5\n+   |\n+LL |     with_closure_expecting_fn_with_bound_region(|x: Foo<'_>, y| {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ --------------- found signature of `for<'r> fn(fn(&'r u32), _) -> _`\n+   |     |\n+   |     expected signature of `fn(for<'r> fn(&'r u32), &i32) -> _`\n+   |\n+note: required by `with_closure_expecting_fn_with_bound_region`\n+  --> $DIR/expect-fn-supply-fn.rs:6:1\n+   |\n+LL | / fn with_closure_expecting_fn_with_bound_region<F>(_: F)\n+LL | |     where F: FnOnce(fn(&u32), &i32)\n+LL | | {\n+LL | | }\n+   | |_^\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "1d12e2f585e8d020737a59b1ca3e1680e1c20fbc", "filename": "src/test/ui/closures/closure-bounds-static-cant-capture-borrowed.nll.stderr", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-static-cant-capture-borrowed.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-static-cant-capture-borrowed.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-static-cant-capture-borrowed.nll.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -0,0 +1,37 @@\n+error[E0621]: explicit lifetime required in the type of `x`\n+  --> $DIR/closure-bounds-static-cant-capture-borrowed.rs:5:5\n+   |\n+LL |   fn foo(x: &()) {\n+   |             --- help: add explicit lifetime `'static` to the type of `x`: `&'static ()`\n+LL | /     bar(|| {\n+LL | |\n+LL | |         let _ = x;\n+LL | |     })\n+   | |______^ lifetime `'static` required\n+\n+error[E0373]: closure may outlive the current function, but it borrows `x`, which is owned by the current function\n+  --> $DIR/closure-bounds-static-cant-capture-borrowed.rs:5:9\n+   |\n+LL |     bar(|| {\n+   |         ^^ may outlive borrowed value `x`\n+LL |\n+LL |         let _ = x;\n+   |                 - `x` is borrowed here\n+   |\n+note: function requires argument type to outlive `'static`\n+  --> $DIR/closure-bounds-static-cant-capture-borrowed.rs:5:5\n+   |\n+LL | /     bar(|| {\n+LL | |\n+LL | |         let _ = x;\n+LL | |     })\n+   | |______^\n+help: to force the closure to take ownership of `x` (and any other referenced variables), use the `move` keyword\n+   |\n+LL |     bar(move || {\n+   |         ^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0373, E0621.\n+For more information about an error, try `rustc --explain E0373`."}, {"sha": "bbf75302d564ae91bccc73d000b07f222aa523fa", "filename": "src/test/ui/closures/closure-expected-type/expect-region-supply-region.nll.stderr", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fclosures%2Fclosure-expected-type%2Fexpect-region-supply-region.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fclosures%2Fclosure-expected-type%2Fexpect-region-supply-region.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-expected-type%2Fexpect-region-supply-region.nll.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -0,0 +1,42 @@\n+error[E0521]: borrowed data escapes outside of closure\n+  --> $DIR/expect-region-supply-region.rs:18:9\n+   |\n+LL |     let mut f: Option<&u32> = None;\n+   |         ----- `f` is declared here, outside of the closure body\n+LL |     closure_expecting_bound(|x| {\n+   |                              - `x` is a reference that is only valid in the closure body\n+LL |         f = Some(x);\n+   |         ^^^^^^^^^^^ `x` escapes the closure body here\n+\n+error[E0521]: borrowed data escapes outside of closure\n+  --> $DIR/expect-region-supply-region.rs:28:9\n+   |\n+LL |     let mut f: Option<&u32> = None;\n+   |         ----- `f` is declared here, outside of the closure body\n+LL |     closure_expecting_bound(|x: &u32| {\n+   |                              - `x` is a reference that is only valid in the closure body\n+LL |         f = Some(x);\n+   |         ^^^^^^^^^^^ `x` escapes the closure body here\n+\n+error: lifetime may not live long enough\n+  --> $DIR/expect-region-supply-region.rs:37:30\n+   |\n+LL | fn expect_bound_supply_named<'x>() {\n+   |                              -- lifetime `'x` defined here\n+...\n+LL |     closure_expecting_bound(|x: &'x u32| {\n+   |                              ^  - let's call the lifetime of this reference `'1`\n+   |                              |\n+   |                              requires that `'1` must outlive `'x`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/expect-region-supply-region.rs:37:30\n+   |\n+LL | fn expect_bound_supply_named<'x>() {\n+   |                              -- lifetime `'x` defined here\n+...\n+LL |     closure_expecting_bound(|x: &'x u32| {\n+   |                              ^ requires that `'x` must outlive `'static`\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "34f61ed5a347410315fd1b79154f36966b181ea7", "filename": "src/test/ui/consts/const-eval/promote_mutable_zst_mir_borrowck.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromote_mutable_zst_mir_borrowck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromote_mutable_zst_mir_borrowck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromote_mutable_zst_mir_borrowck.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,7 +1,5 @@\n // compile-pass\n \n-#![feature(nll)]\n-\n pub fn main() {\n     let y: &'static mut [u8; 0] = &mut [];\n }"}, {"sha": "30ab1f4d5ec0d0d0340217fc9c475dd6e9480617", "filename": "src/test/ui/consts/const_let_refutable.nll.stderr", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fconsts%2Fconst_let_refutable.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fconsts%2Fconst_let_refutable.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_let_refutable.nll.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -0,0 +1,31 @@\n+error[E0005]: refutable pattern in function argument: `&[]` not covered\n+  --> $DIR/const_let_refutable.rs:3:16\n+   |\n+LL | const fn slice([a, b]: &[i32]) -> i32 {\n+   |                ^^^^^^ pattern `&[]` not covered\n+\n+error[E0723]: can only call other `const fn` within a `const fn`, but `const std::ops::Add::add` is not stable as `const fn`\n+  --> $DIR/const_let_refutable.rs:4:5\n+   |\n+LL |     a + b\n+   |     ^^^^^\n+   |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n+\n+error[E0381]: use of possibly uninitialized variable: `a`\n+  --> $DIR/const_let_refutable.rs:4:5\n+   |\n+LL |     a + b\n+   |     ^ use of possibly uninitialized `a`\n+\n+error[E0381]: use of possibly uninitialized variable: `b`\n+  --> $DIR/const_let_refutable.rs:4:9\n+   |\n+LL |     a + b\n+   |         ^ use of possibly uninitialized `b`\n+\n+error: aborting due to 4 previous errors\n+\n+Some errors have detailed explanations: E0005, E0381, E0723.\n+For more information about an error, try `rustc --explain E0005`."}, {"sha": "f1947933d67074725646aec5cbfc339f5d461d4d", "filename": "src/test/ui/consts/issue-54224.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fconsts%2Fissue-54224.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fconsts%2Fissue-54224.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-54224.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,5 +1,3 @@\n-#![feature(nll)]\n-\n const FOO: Option<&[[u8; 3]]> = Some(&[*b\"foo\"]); //~ ERROR temporary value dropped while borrowed\n \n use std::borrow::Cow;"}, {"sha": "8dcb4daca3b707a564a8fc7f50bb13e6a2996299", "filename": "src/test/ui/consts/issue-54224.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fconsts%2Fissue-54224.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fconsts%2Fissue-54224.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-54224.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,5 +1,5 @@\n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/issue-54224.rs:3:39\n+  --> $DIR/issue-54224.rs:1:39\n    |\n LL | const FOO: Option<&[[u8; 3]]> = Some(&[*b\"foo\"]);\n    |                                 ------^^^^^^^^^-\n@@ -9,7 +9,7 @@ LL | const FOO: Option<&[[u8; 3]]> = Some(&[*b\"foo\"]);\n    |                                 using this value as a constant requires that borrow lasts for `'static`\n \n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/issue-54224.rs:11:57\n+  --> $DIR/issue-54224.rs:9:57\n    |\n LL | pub const Z: Cow<'static, [ [u8; 3] ]> = Cow::Borrowed(&[*b\"ABC\"]);\n    |                                          ---------------^^^^^^^^^-"}, {"sha": "8d962384a121ad00e37dc34be1e758e20bbf4e85", "filename": "src/test/ui/consts/min_const_fn/min_const_fn.nll.stderr", "status": "added", "additions": 328, "deletions": 0, "changes": 328, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.nll.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -0,0 +1,328 @@\n+error[E0493]: destructors cannot be evaluated at compile-time\n+  --> $DIR/min_const_fn.rs:37:25\n+   |\n+LL |     const fn into_inner(self) -> T { self.0 }\n+   |                         ^^^^ constant functions cannot evaluate destructors\n+\n+error[E0723]: mutable references in const fn are unstable\n+  --> $DIR/min_const_fn.rs:39:36\n+   |\n+LL |     const fn get_mut(&mut self) -> &mut T { &mut self.0 }\n+   |                                    ^^^^^^\n+   |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n+\n+error[E0493]: destructors cannot be evaluated at compile-time\n+  --> $DIR/min_const_fn.rs:44:28\n+   |\n+LL |     const fn into_inner_lt(self) -> T { self.0 }\n+   |                            ^^^^ constant functions cannot evaluate destructors\n+\n+error[E0723]: mutable references in const fn are unstable\n+  --> $DIR/min_const_fn.rs:46:42\n+   |\n+LL |     const fn get_mut_lt(&'a mut self) -> &mut T { &mut self.0 }\n+   |                                          ^^^^^^\n+   |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n+\n+error[E0493]: destructors cannot be evaluated at compile-time\n+  --> $DIR/min_const_fn.rs:51:27\n+   |\n+LL |     const fn into_inner_s(self) -> T { self.0 }\n+   |                           ^^^^ constant functions cannot evaluate destructors\n+\n+error[E0723]: mutable references in const fn are unstable\n+  --> $DIR/min_const_fn.rs:53:38\n+   |\n+LL |     const fn get_mut_s(&mut self) -> &mut T { &mut self.0 }\n+   |                                      ^^^^^^\n+   |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n+\n+error[E0723]: mutable references in const fn are unstable\n+  --> $DIR/min_const_fn.rs:58:39\n+   |\n+LL |     const fn get_mut_sq(&mut self) -> &mut T { &mut self.0 }\n+   |                                       ^^^^^^\n+   |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n+\n+error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n+  --> $DIR/min_const_fn.rs:76:16\n+   |\n+LL | const fn foo11<T: std::fmt::Display>(t: T) -> T { t }\n+   |                ^\n+   |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n+\n+error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n+  --> $DIR/min_const_fn.rs:78:18\n+   |\n+LL | const fn foo11_2<T: Send>(t: T) -> T { t }\n+   |                  ^\n+   |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n+\n+error[E0723]: only int, `bool` and `char` operations are stable in const fn\n+  --> $DIR/min_const_fn.rs:80:33\n+   |\n+LL | const fn foo19(f: f32) -> f32 { f * 2.0 }\n+   |                                 ^^^^^^^\n+   |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n+\n+error[E0723]: only int, `bool` and `char` operations are stable in const fn\n+  --> $DIR/min_const_fn.rs:82:35\n+   |\n+LL | const fn foo19_2(f: f32) -> f32 { 2.0 - f }\n+   |                                   ^^^^^^^\n+   |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n+\n+error[E0723]: only int and `bool` operations are stable in const fn\n+  --> $DIR/min_const_fn.rs:84:35\n+   |\n+LL | const fn foo19_3(f: f32) -> f32 { -f }\n+   |                                   ^^\n+   |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n+\n+error[E0723]: only int, `bool` and `char` operations are stable in const fn\n+  --> $DIR/min_const_fn.rs:86:43\n+   |\n+LL | const fn foo19_4(f: f32, g: f32) -> f32 { f / g }\n+   |                                           ^^^^^\n+   |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n+\n+error[E0723]: cannot access `static` items in const fn\n+  --> $DIR/min_const_fn.rs:90:27\n+   |\n+LL | const fn foo25() -> u32 { BAR }\n+   |                           ^^^\n+   |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n+\n+error[E0723]: cannot access `static` items in const fn\n+  --> $DIR/min_const_fn.rs:91:36\n+   |\n+LL | const fn foo26() -> &'static u32 { &BAR }\n+   |                                    ^^^^\n+   |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n+\n+error[E0723]: casting pointers to ints is unstable in const fn\n+  --> $DIR/min_const_fn.rs:92:42\n+   |\n+LL | const fn foo30(x: *const u32) -> usize { x as usize }\n+   |                                          ^^^^^^^^^^\n+   |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n+\n+error[E0723]: casting pointers to ints is unstable in const fn\n+  --> $DIR/min_const_fn.rs:94:63\n+   |\n+LL | const fn foo30_with_unsafe(x: *const u32) -> usize { unsafe { x as usize } }\n+   |                                                               ^^^^^^^^^^\n+   |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n+\n+error[E0723]: casting pointers to ints is unstable in const fn\n+  --> $DIR/min_const_fn.rs:96:42\n+   |\n+LL | const fn foo30_2(x: *mut u32) -> usize { x as usize }\n+   |                                          ^^^^^^^^^^\n+   |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n+\n+error[E0723]: casting pointers to ints is unstable in const fn\n+  --> $DIR/min_const_fn.rs:98:63\n+   |\n+LL | const fn foo30_2_with_unsafe(x: *mut u32) -> usize { unsafe { x as usize } }\n+   |                                                               ^^^^^^^^^^\n+   |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n+\n+error[E0723]: `if`, `match`, `&&` and `||` are not stable in const fn\n+  --> $DIR/min_const_fn.rs:100:38\n+   |\n+LL | const fn foo30_4(b: bool) -> usize { if b { 1 } else { 42 } }\n+   |                                      ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n+\n+error[E0723]: `if`, `match`, `&&` and `||` are not stable in const fn\n+  --> $DIR/min_const_fn.rs:102:29\n+   |\n+LL | const fn foo30_5(b: bool) { while b { } }\n+   |                             ^^^^^^^^^^^\n+   |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n+\n+error[E0723]: `if`, `match`, `&&` and `||` are not stable in const fn\n+  --> $DIR/min_const_fn.rs:104:44\n+   |\n+LL | const fn foo36(a: bool, b: bool) -> bool { a && b }\n+   |                                            ^^^^^^\n+   |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n+\n+error[E0723]: `if`, `match`, `&&` and `||` are not stable in const fn\n+  --> $DIR/min_const_fn.rs:106:44\n+   |\n+LL | const fn foo37(a: bool, b: bool) -> bool { a || b }\n+   |                                            ^^^^^^\n+   |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n+\n+error[E0723]: mutable references in const fn are unstable\n+  --> $DIR/min_const_fn.rs:108:14\n+   |\n+LL | const fn inc(x: &mut i32) { *x += 1 }\n+   |              ^\n+   |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n+\n+error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n+  --> $DIR/min_const_fn.rs:113:6\n+   |\n+LL | impl<T: std::fmt::Debug> Foo<T> {\n+   |      ^\n+   |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n+\n+error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n+  --> $DIR/min_const_fn.rs:118:6\n+   |\n+LL | impl<T: std::fmt::Debug + Sized> Foo<T> {\n+   |      ^\n+   |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n+\n+error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n+  --> $DIR/min_const_fn.rs:123:6\n+   |\n+LL | impl<T: Sync + Sized> Foo<T> {\n+   |      ^\n+   |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n+\n+error[E0723]: `impl Trait` in const fn is unstable\n+  --> $DIR/min_const_fn.rs:129:24\n+   |\n+LL | const fn no_rpit2() -> AlanTuring<impl std::fmt::Debug> { AlanTuring(0) }\n+   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n+\n+error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n+  --> $DIR/min_const_fn.rs:131:34\n+   |\n+LL | const fn no_apit2(_x: AlanTuring<impl std::fmt::Debug>) {}\n+   |                                  ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n+\n+error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n+  --> $DIR/min_const_fn.rs:133:22\n+   |\n+LL | const fn no_apit(_x: impl std::fmt::Debug) {}\n+   |                      ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n+\n+error[E0723]: `impl Trait` in const fn is unstable\n+  --> $DIR/min_const_fn.rs:134:23\n+   |\n+LL | const fn no_rpit() -> impl std::fmt::Debug {}\n+   |                       ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n+\n+error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n+  --> $DIR/min_const_fn.rs:135:23\n+   |\n+LL | const fn no_dyn_trait(_x: &dyn std::fmt::Debug) {}\n+   |                       ^^\n+   |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n+\n+error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n+  --> $DIR/min_const_fn.rs:136:32\n+   |\n+LL | const fn no_dyn_trait_ret() -> &'static dyn std::fmt::Debug { &() }\n+   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n+\n+error[E0515]: cannot return reference to temporary value\n+  --> $DIR/min_const_fn.rs:136:63\n+   |\n+LL | const fn no_dyn_trait_ret() -> &'static dyn std::fmt::Debug { &() }\n+   |                                                               ^--\n+   |                                                               ||\n+   |                                                               |temporary value created here\n+   |                                                               returns a reference to data owned by the current function\n+\n+error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n+  --> $DIR/min_const_fn.rs:144:41\n+   |\n+LL | const fn really_no_traits_i_mean_it() { (&() as &std::fmt::Debug, ()).1 }\n+   |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n+\n+error[E0723]: function pointers in const fn are unstable\n+  --> $DIR/min_const_fn.rs:147:21\n+   |\n+LL | const fn no_fn_ptrs(_x: fn()) {}\n+   |                     ^^\n+   |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n+\n+error[E0723]: function pointers in const fn are unstable\n+  --> $DIR/min_const_fn.rs:149:27\n+   |\n+LL | const fn no_fn_ptrs2() -> fn() { fn foo() {} foo }\n+   |                           ^^^^\n+   |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n+\n+error: aborting due to 37 previous errors\n+\n+Some errors have detailed explanations: E0515, E0723.\n+For more information about an error, try `rustc --explain E0515`."}, {"sha": "9ffb549057bc63cf0a3b5bd6d9d921a1d9035cfd", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_dyn.nll.stderr", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_dyn.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_dyn.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_dyn.nll.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -0,0 +1,31 @@\n+error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n+  --> $DIR/min_const_fn_dyn.rs:9:5\n+   |\n+LL |     x.0.field;\n+   |     ^^^^^^^^^\n+   |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n+\n+error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n+  --> $DIR/min_const_fn_dyn.rs:12:66\n+   |\n+LL | const fn no_inner_dyn_trait_ret() -> Hide { Hide(HasDyn { field: &0 }) }\n+   |                                                                  ^^\n+   |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/min_const_fn_dyn.rs:12:67\n+   |\n+LL | const fn no_inner_dyn_trait_ret() -> Hide { Hide(HasDyn { field: &0 }) }\n+   |                                                                  -^    - temporary value is freed at the end of this statement\n+   |                                                                  ||\n+   |                                                                  |creates a temporary which is freed while still in use\n+   |                                                                  cast requires that borrow lasts for `'static`\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors have detailed explanations: E0716, E0723.\n+For more information about an error, try `rustc --explain E0716`."}, {"sha": "dc21b9fe8cd1b655d380ba2fd0a00a4dbf5c175a", "filename": "src/test/ui/consts/promote_evaluation_unused_result.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fconsts%2Fpromote_evaluation_unused_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fconsts%2Fpromote_evaluation_unused_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fpromote_evaluation_unused_result.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,7 +1,5 @@\n //compile-pass\n \n-#![feature(nll)]\n-\n fn main() {\n \n     let _: &'static usize = &(loop {}, 1).1;"}, {"sha": "6b6eea36361bf3fef2087c8123a5c34324c1fbad", "filename": "src/test/ui/consts/promote_fn_calls.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fconsts%2Fpromote_fn_calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fconsts%2Fpromote_fn_calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fpromote_fn_calls.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,8 +1,6 @@\n // compile-pass\n // aux-build:promotable_const_fn_lib.rs\n \n-#![feature(nll)]\n-\n extern crate promotable_const_fn_lib;\n \n use promotable_const_fn_lib::{foo, Foo};"}, {"sha": "d982f350208e22ac7f1a87e587e3fab30c61c07e", "filename": "src/test/ui/consts/promote_fn_calls_std.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fconsts%2Fpromote_fn_calls_std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fconsts%2Fpromote_fn_calls_std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fpromote_fn_calls_std.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,7 +1,5 @@\n // compile-pass\n \n-#![feature(nll)]\n-\n fn main() {\n     let x: &'static u8 = &u8::max_value();\n     let x: &'static u16 = &u16::max_value();"}, {"sha": "aceabf3316479f259137065d8f7b15331e45ba72", "filename": "src/test/ui/continue-after-missing-main.nll.stderr", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fcontinue-after-missing-main.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fcontinue-after-missing-main.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcontinue-after-missing-main.nll.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -0,0 +1,7 @@\n+error[E0601]: `main` function not found in crate `continue_after_missing_main`\n+   |\n+   = note: consider adding a `main` function to `$DIR/continue-after-missing-main.rs`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0601`."}, {"sha": "01ee1c3a4d7fadbf7ec17219fcf79cff4a67648b", "filename": "src/test/ui/empty/empty-never-array.nll.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fempty%2Fempty-never-array.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fempty%2Fempty-never-array.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-never-array.nll.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -0,0 +1,23 @@\n+error[E0005]: refutable pattern in local binding: `T(_, _)` not covered\n+  --> $DIR/empty-never-array.rs:10:9\n+   |\n+LL | / enum Helper<T, U> {\n+LL | |     T(T, [!; 0]),\n+LL | |     #[allow(dead_code)]\n+LL | |     U(U),\n+LL | | }\n+   | |_- `Helper<T, U>` defined here\n+...\n+LL |       let Helper::U(u) = Helper::T(t, []);\n+   |           ^^^^^^^^^^^^ pattern `T(_, _)` not covered\n+\n+error[E0381]: use of possibly uninitialized variable: `u`\n+  --> $DIR/empty-never-array.rs:12:5\n+   |\n+LL |     u\n+   |     ^ use of possibly uninitialized `u`\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0005, E0381.\n+For more information about an error, try `rustc --explain E0005`."}, {"sha": "e5671ee49e65470c0e56afe6727e7df7ba167df0", "filename": "src/test/ui/error-codes/E0502.nll.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Ferror-codes%2FE0502.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Ferror-codes%2FE0502.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0502.nll.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -0,0 +1,13 @@\n+error[E0502]: cannot borrow `*a` as mutable because it is also borrowed as immutable\n+  --> $DIR/E0502.rs:4:9\n+   |\n+LL |     let ref y = a;\n+   |         ----- immutable borrow occurs here\n+LL |     bar(a);\n+   |         ^ mutable borrow occurs here\n+LL |     y.use_ref();\n+   |     - immutable borrow later used here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0502`."}, {"sha": "5140d1a9a7add00c84aa82def33936333a355888", "filename": "src/test/ui/error-codes/E0621-does-not-trigger-for-closures.nll.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Ferror-codes%2FE0621-does-not-trigger-for-closures.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Ferror-codes%2FE0621-does-not-trigger-for-closures.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0621-does-not-trigger-for-closures.nll.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -0,0 +1,11 @@\n+error: lifetime may not live long enough\n+  --> $DIR/E0621-does-not-trigger-for-closures.rs:15:45\n+   |\n+LL |     invoke(&x, |a, b| if a > b { a } else { b });\n+   |                    --                       ^ returning this value requires that `'1` must outlive `'2`\n+   |                    ||\n+   |                    |return type of closure is &'2 i32\n+   |                    has type `&'1 i32`\n+\n+error: aborting due to previous error\n+"}, {"sha": "f316644156dc5ec5dd74e9884282efca898fd1a5", "filename": "src/test/ui/existential_types/generic_type_does_not_live_long_enough.nll.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_type_does_not_live_long_enough.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_type_does_not_live_long_enough.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_type_does_not_live_long_enough.nll.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -0,0 +1,18 @@\n+error: at least one trait must be specified\n+  --> $DIR/generic_type_does_not_live_long_enough.rs:9:35\n+   |\n+LL | existential type WrongGeneric<T>: 'static;\n+   |                                   ^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/generic_type_does_not_live_long_enough.rs:6:18\n+   |\n+LL |     let z: i32 = x;\n+   |                  ^ expected i32, found opaque type\n+   |\n+   = note: expected type `i32`\n+              found type `WrongGeneric::<&{integer}>`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "4c157a05a5e050fcc992adbde7cba4d0677258e8", "filename": "src/test/ui/generator/auto-trait-regions.nll.stderr", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fgenerator%2Fauto-trait-regions.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fgenerator%2Fauto-trait-regions.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fauto-trait-regions.nll.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -0,0 +1,41 @@\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/auto-trait-regions.rs:44:24\n+   |\n+LL |         let a = A(&mut true, &mut true, No);\n+   |                        ^^^^                - temporary value is freed at the end of this statement\n+   |                        |\n+   |                        creates a temporary which is freed while still in use\n+LL |         yield;\n+LL |         assert_foo(a);\n+   |                    - borrow later used here\n+   |\n+   = note: consider using a `let` binding to create a longer lived value\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/auto-trait-regions.rs:44:35\n+   |\n+LL |         let a = A(&mut true, &mut true, No);\n+   |                                   ^^^^     - temporary value is freed at the end of this statement\n+   |                                   |\n+   |                                   creates a temporary which is freed while still in use\n+LL |         yield;\n+LL |         assert_foo(a);\n+   |                    - borrow later used here\n+   |\n+   = note: consider using a `let` binding to create a longer lived value\n+\n+error: higher-ranked subtype error\n+  --> $DIR/auto-trait-regions.rs:30:5\n+   |\n+LL |     assert_foo(gen);\n+   |     ^^^^^^^^^^^^^^^\n+\n+error: higher-ranked subtype error\n+  --> $DIR/auto-trait-regions.rs:48:5\n+   |\n+LL |     assert_foo(gen);\n+   |     ^^^^^^^^^^^^^^^\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0716`."}, {"sha": "41cb339f459113313440b56421fb18a76dd1ad88", "filename": "src/test/ui/generator/generator-region-requirements.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-region-requirements.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-region-requirements.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-region-requirements.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,8 +1,4 @@\n-// revisions: migrate nll\n-// ignore-compare-mode-nll\n-\n #![feature(generators, generator_trait)]\n-#![cfg_attr(nll, feature(nll))]\n use std::ops::{Generator, GeneratorState};\n use std::pin::Pin;\n \n@@ -14,8 +10,7 @@ fn dangle(x: &mut i32) -> &'static mut i32 {\n     loop {\n         match Pin::new(&mut g).resume() {\n             GeneratorState::Complete(c) => return c,\n-//[nll]~^ ERROR explicit lifetime required\n-//[migrate]~^^ ERROR explicit lifetime required\n+            //~^ ERROR explicit lifetime required\n             GeneratorState::Yielded(_) => (),\n         }\n     }"}, {"sha": "53d48bc4f56accc7af93fc3555b96cd3d3e5758b", "filename": "src/test/ui/generator/generator-region-requirements.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-region-requirements.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-region-requirements.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-region-requirements.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,5 +1,5 @@\n error[E0621]: explicit lifetime required in the type of `x`\n-  --> $DIR/generator-region-requirements.rs:16:51\n+  --> $DIR/generator-region-requirements.rs:12:51\n    |\n LL | fn dangle(x: &mut i32) -> &'static mut i32 {\n    |              -------- help: add explicit lifetime `'static` to the type of `x`: `&'static mut i32`", "previous_filename": "src/test/ui/generator/generator-region-requirements.nll.stderr"}, {"sha": "cee3e6d226c12dc47eaa8e3261b94c9624d491e9", "filename": "src/test/ui/generator/generator-with-nll.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-with-nll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-with-nll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-with-nll.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,5 +1,4 @@\n #![feature(generators)]\n-#![feature(nll)]\n \n fn main() {\n     || {"}, {"sha": "14199aeb93056cb3671f7ad93fdb8b3ceb019c22", "filename": "src/test/ui/generator/generator-with-nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-with-nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-with-nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-with-nll.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,5 +1,5 @@\n error[E0626]: borrow may still be in use when generator yields\n-  --> $DIR/generator-with-nll.rs:8:17\n+  --> $DIR/generator-with-nll.rs:7:17\n    |\n LL |         let b = &mut true;\n    |                 ^^^^^^^^^"}, {"sha": "312a91adca6785f7803940278ce731e65ba8e48f", "filename": "src/test/ui/hashmap-iter-value-lifetime.nll.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fhashmap-iter-value-lifetime.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fhashmap-iter-value-lifetime.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhashmap-iter-value-lifetime.nll.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -0,0 +1,15 @@\n+error[E0502]: cannot borrow `my_stuff` as mutable because it is also borrowed as immutable\n+  --> $DIR/hashmap-iter-value-lifetime.rs:7:5\n+   |\n+LL |     let (_, thing) = my_stuff.iter().next().unwrap();\n+   |                      -------- immutable borrow occurs here\n+LL | \n+LL |     my_stuff.clear();\n+   |     ^^^^^^^^ mutable borrow occurs here\n+LL | \n+LL |     println!(\"{}\", *thing);\n+   |                    ------ immutable borrow later used here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0502`."}, {"sha": "aa8e890c168dc3fdcfacdad7b8bbbdbd64bcee04", "filename": "src/test/ui/hashmap-lifetimes.nll.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fhashmap-lifetimes.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fhashmap-lifetimes.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhashmap-lifetimes.nll.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -0,0 +1,13 @@\n+error[E0502]: cannot borrow `my_stuff` as mutable because it is also borrowed as immutable\n+  --> $DIR/hashmap-lifetimes.rs:6:5\n+   |\n+LL |     let mut it = my_stuff.iter();\n+   |                  -------- immutable borrow occurs here\n+LL |     my_stuff.insert(1, 43);\n+   |     ^^^^^^^^ mutable borrow occurs here\n+LL |     it;\n+   |     -- immutable borrow later used here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0502`."}, {"sha": "070fe12a2849fa77ce3f57ead4cb15ff1f3550a5", "filename": "src/test/ui/hr-subtype/hr-subtype.free_inv_x_vs_free_inv_y.nll.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_inv_x_vs_free_inv_y.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_inv_x_vs_free_inv_y.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_inv_x_vs_free_inv_y.nll.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -0,0 +1,30 @@\n+error: lifetime may not live long enough\n+  --> $DIR/hr-subtype.rs:33:13\n+   |\n+LL |           fn subtype<'x,'y:'x,'z:'y>() {\n+   |                      -- -- lifetime `'y` defined here\n+   |                      |\n+   |                      lifetime `'x` defined here\n+LL |               gimme::<$t2>(None::<$t1>);\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^ argument requires that `'x` must outlive `'y`\n+...\n+LL | / check! { free_inv_x_vs_free_inv_y: (fn(Inv<'x>),\n+LL | |                                     fn(Inv<'y>)) }\n+   | |__________________________________________________- in this macro invocation\n+\n+error: lifetime may not live long enough\n+  --> $DIR/hr-subtype.rs:39:13\n+   |\n+LL |           fn supertype<'x,'y:'x,'z:'y>() {\n+   |                        -- -- lifetime `'y` defined here\n+   |                        |\n+   |                        lifetime `'x` defined here\n+LL |               gimme::<$t1>(None::<$t2>);\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^ argument requires that `'x` must outlive `'y`\n+...\n+LL | / check! { free_inv_x_vs_free_inv_y: (fn(Inv<'x>),\n+LL | |                                     fn(Inv<'y>)) }\n+   | |__________________________________________________- in this macro invocation\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "e140eaadd48a59cfc52428489c6f1697f002fce4", "filename": "src/test/ui/hr-subtype/hr-subtype.free_x_vs_free_y.nll.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_x_vs_free_y.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_x_vs_free_y.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_x_vs_free_y.nll.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -0,0 +1,16 @@\n+error: lifetime may not live long enough\n+  --> $DIR/hr-subtype.rs:39:13\n+   |\n+LL |           fn supertype<'x,'y:'x,'z:'y>() {\n+   |                        -- -- lifetime `'y` defined here\n+   |                        |\n+   |                        lifetime `'x` defined here\n+LL |               gimme::<$t1>(None::<$t2>);\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^ argument requires that `'x` must outlive `'y`\n+...\n+LL | / check! { free_x_vs_free_y: (fn(&'x u32),\n+LL | |                             fn(&'y u32)) }\n+   | |__________________________________________- in this macro invocation\n+\n+error: aborting due to previous error\n+"}, {"sha": "4de35d70c30a3d64be372a21fe519fa2d8ec6f5f", "filename": "src/test/ui/hrtb/hrtb-cache-issue-54302.nll.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-cache-issue-54302.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-cache-issue-54302.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-cache-issue-54302.nll.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -0,0 +1,8 @@\n+error: higher-ranked subtype error\n+  --> $DIR/hrtb-cache-issue-54302.rs:19:5\n+   |\n+LL |     assert_deserialize_owned::<&'static str>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "0522fc45d68f013cfb5d27104b2f4a19024f4df3", "filename": "src/test/ui/hrtb/hrtb-perfect-forwarding.nll.stderr", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-perfect-forwarding.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-perfect-forwarding.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-perfect-forwarding.nll.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -0,0 +1,77 @@\n+warning: function cannot return without recursing\n+  --> $DIR/hrtb-perfect-forwarding.rs:22:1\n+   |\n+LL | / fn no_hrtb<'b,T>(mut t: T)\n+LL | |     where T : Bar<&'b isize>\n+LL | | {\n+LL | |     // OK -- `T : Bar<&'b isize>`, and thus the impl above ensures that\n+LL | |     // `&mut T : Bar<&'b isize>`.\n+LL | |     no_hrtb(&mut t);\n+   | |     --------------- recursive call site\n+LL | | }\n+   | |_^ cannot return without recursing\n+   |\n+   = note: #[warn(unconditional_recursion)] on by default\n+   = help: a `loop` may express intention better if this is on purpose\n+\n+warning: function cannot return without recursing\n+  --> $DIR/hrtb-perfect-forwarding.rs:30:1\n+   |\n+LL | / fn bar_hrtb<T>(mut t: T)\n+LL | |     where T : for<'b> Bar<&'b isize>\n+LL | | {\n+LL | |     // OK -- `T : for<'b> Bar<&'b isize>`, and thus the impl above\n+...  |\n+LL | |     bar_hrtb(&mut t);\n+   | |     ---------------- recursive call site\n+LL | | }\n+   | |_^ cannot return without recursing\n+   |\n+   = help: a `loop` may express intention better if this is on purpose\n+\n+warning: function cannot return without recursing\n+  --> $DIR/hrtb-perfect-forwarding.rs:39:1\n+   |\n+LL | / fn foo_hrtb_bar_not<'b,T>(mut t: T)\n+LL | |     where T : for<'a> Foo<&'a isize> + Bar<&'b isize>\n+LL | | {\n+LL | |     // Not OK -- The forwarding impl for `Foo` requires that `Bar` also\n+...  |\n+LL | |     foo_hrtb_bar_not(&mut t);\n+   | |     ------------------------ recursive call site\n+LL | | }\n+   | |_^ cannot return without recursing\n+   |\n+   = help: a `loop` may express intention better if this is on purpose\n+\n+error: higher-ranked subtype error\n+  --> $DIR/hrtb-perfect-forwarding.rs:46:5\n+   |\n+LL |     foo_hrtb_bar_not(&mut t);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: lifetime may not live long enough\n+  --> $DIR/hrtb-perfect-forwarding.rs:46:5\n+   |\n+LL | fn foo_hrtb_bar_not<'b,T>(mut t: T)\n+   |                     -- lifetime `'b` defined here\n+...\n+LL |     foo_hrtb_bar_not(&mut t);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'b` must outlive `'static`\n+\n+warning: function cannot return without recursing\n+  --> $DIR/hrtb-perfect-forwarding.rs:49:1\n+   |\n+LL | / fn foo_hrtb_bar_hrtb<T>(mut t: T)\n+LL | |     where T : for<'a> Foo<&'a isize> + for<'b> Bar<&'b isize>\n+LL | | {\n+LL | |     // OK -- now we have `T : for<'b> Bar&'b isize>`.\n+LL | |     foo_hrtb_bar_hrtb(&mut t);\n+   | |     ------------------------- recursive call site\n+LL | | }\n+   | |_^ cannot return without recursing\n+   |\n+   = help: a `loop` may express intention better if this is on purpose\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "da30997a231110e28bc42c52f6e15765f26415f7", "filename": "src/test/ui/impl-header-lifetime-elision/dyn-trait.nll.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fdyn-trait.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fdyn-trait.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fdyn-trait.nll.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -0,0 +1,10 @@\n+error[E0521]: borrowed data escapes outside of function\n+  --> $DIR/dyn-trait.rs:20:5\n+   |\n+LL | fn with_dyn_debug_static<'a>(x: Box<dyn Debug + 'a>) {\n+   |                              - `x` is a reference that is only valid in the function body\n+LL |     static_val(x);\n+   |     ^^^^^^^^^^^^^ `x` escapes the function body here\n+\n+error: aborting due to previous error\n+"}, {"sha": "58d7875ccd03422453d43b4125a183ab7e7e6ae0", "filename": "src/test/ui/impl-trait/closure-calling-parent-fn.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fimpl-trait%2Fclosure-calling-parent-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fimpl-trait%2Fclosure-calling-parent-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fclosure-calling-parent-fn.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,5 +1,3 @@\n-#![feature(nll)]\n-\n // Regression test for #54593: the MIR type checker was going wrong\n // when a closure returns the `impl Copy` from its parent fn. It was\n // (incorrectly) replacing the `impl Copy` in its return type with the"}, {"sha": "4b7c04f1e43317a3eb380d71b95482c8ac596571", "filename": "src/test/ui/impl-trait/must_outlive_least_region_or_bound.nll.stderr", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.nll.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -0,0 +1,51 @@\n+error: lifetime may not live long enough\n+  --> $DIR/must_outlive_least_region_or_bound.rs:3:23\n+   |\n+LL | fn elided(x: &i32) -> impl Copy { x }\n+   |              -        ^^^^^^^^^ opaque type requires that `'1` must outlive `'static`\n+   |              |\n+   |              let's call the lifetime of this reference `'1`\n+help: to allow this impl Trait to capture borrowed data with lifetime `'1`, add `'_` as a constraint\n+   |\n+LL | fn elided(x: &i32) -> impl Copy + '_ { x }\n+   |                       ^^^^^^^^^^^^^^\n+\n+error: lifetime may not live long enough\n+  --> $DIR/must_outlive_least_region_or_bound.rs:6:32\n+   |\n+LL | fn explicit<'a>(x: &'a i32) -> impl Copy { x }\n+   |             --                 ^^^^^^^^^ opaque type requires that `'a` must outlive `'static`\n+   |             |\n+   |             lifetime `'a` defined here\n+help: to allow this impl Trait to capture borrowed data with lifetime `'a`, add `'a` as a constraint\n+   |\n+LL | fn explicit<'a>(x: &'a i32) -> impl Copy + 'a { x }\n+   |                                ^^^^^^^^^^^^^^\n+\n+error: lifetime may not live long enough\n+  --> $DIR/must_outlive_least_region_or_bound.rs:12:69\n+   |\n+LL | fn with_bound<'a>(x: &'a i32) -> impl LifetimeTrait<'a> + 'static { x }\n+   |               -- lifetime `'a` defined here                         ^ returning this value requires that `'a` must outlive `'static`\n+   |\n+   = help: consider replacing `'a` with `'static`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/must_outlive_least_region_or_bound.rs:17:61\n+   |\n+LL | fn move_lifetime_into_fn<'a, 'b>(x: &'a u32, y: &'b u32) -> impl Fn(&'a u32) {\n+   |                          --  -- lifetime `'b` defined here  ^^^^^^^^^^^^^^^^ opaque type requires that `'b` must outlive `'a`\n+   |                          |\n+   |                          lifetime `'a` defined here\n+\n+error[E0310]: the parameter type `T` may not live long enough\n+  --> $DIR/must_outlive_least_region_or_bound.rs:22:51\n+   |\n+LL | fn ty_param_wont_outlive_static<T:Debug>(x: T) -> impl Debug + 'static {\n+   |                                                   ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider adding an explicit lifetime bound `T: 'static`...\n+\n+error: aborting due to 5 previous errors\n+\n+For more information about this error, try `rustc --explain E0310`."}, {"sha": "adaa474474f674ec66ee2eb4ac7e961a0612021d", "filename": "src/test/ui/impl-trait/region-escape-via-bound-contravariant-closure.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fimpl-trait%2Fregion-escape-via-bound-contravariant-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fimpl-trait%2Fregion-escape-via-bound-contravariant-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fregion-escape-via-bound-contravariant-closure.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -9,7 +9,6 @@\n \n #![allow(dead_code)]\n #![feature(in_band_lifetimes)]\n-#![feature(nll)]\n \n fn foo(x: &'x u32) -> impl Fn() -> &'y u32\n where 'x: 'y"}, {"sha": "204c2ff304114de5beefd933118bcf39b26a5a70", "filename": "src/test/ui/impl-trait/region-escape-via-bound-contravariant.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fimpl-trait%2Fregion-escape-via-bound-contravariant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fimpl-trait%2Fregion-escape-via-bound-contravariant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fregion-escape-via-bound-contravariant.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -9,7 +9,6 @@\n \n #![allow(dead_code)]\n #![feature(in_band_lifetimes)]\n-#![feature(nll)]\n \n trait Trait<'a> { }\n "}, {"sha": "29243699e44fd11a00e210259009f3654856f41b", "filename": "src/test/ui/impl-trait/region-escape-via-bound.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fimpl-trait%2Fregion-escape-via-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fimpl-trait%2Fregion-escape-via-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fregion-escape-via-bound.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -5,7 +5,6 @@\n \n #![allow(dead_code)]\n #![feature(in_band_lifetimes)]\n-#![feature(nll)]\n \n use std::cell::Cell;\n "}, {"sha": "5c8e322f712d167f370846766c2b63649cfa8908", "filename": "src/test/ui/impl-trait/region-escape-via-bound.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fimpl-trait%2Fregion-escape-via-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fimpl-trait%2Fregion-escape-via-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fregion-escape-via-bound.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,11 +1,11 @@\n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/region-escape-via-bound.rs:16:29\n+  --> $DIR/region-escape-via-bound.rs:15:29\n    |\n LL | fn foo(x: Cell<&'x u32>) -> impl Trait<'y>\n    |                             ^^^^^^^^^^^^^^\n    |\n-note: hidden type `std::cell::Cell<&'x u32>` captures the lifetime 'x as defined on the function body at 18:7\n-  --> $DIR/region-escape-via-bound.rs:18:7\n+note: hidden type `std::cell::Cell<&'x u32>` captures the lifetime 'x as defined on the function body at 17:7\n+  --> $DIR/region-escape-via-bound.rs:17:7\n    |\n LL | where 'x: 'y\n    |       ^^"}, {"sha": "0bf120cf7ecc1901772c66b2184008d80351cd43", "filename": "src/test/ui/impl-trait/static-return-lifetime-infered.nll.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.nll.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -0,0 +1,26 @@\n+error: lifetime may not live long enough\n+  --> $DIR/static-return-lifetime-infered.rs:6:35\n+   |\n+LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> {\n+   |                         -         ^^^^^^^^^^^^^^^^^^^^^^^ opaque type requires that `'1` must outlive `'static`\n+   |                         |\n+   |                         let's call the lifetime of this reference `'1`\n+help: to allow this impl Trait to capture borrowed data with lifetime `'1`, add `'_` as a constraint\n+   |\n+LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> + '_ {\n+   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: lifetime may not live long enough\n+  --> $DIR/static-return-lifetime-infered.rs:10:37\n+   |\n+LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> {\n+   |                    --               ^^^^^^^^^^^^^^^^^^^^^^^ opaque type requires that `'a` must outlive `'static`\n+   |                    |\n+   |                    lifetime `'a` defined here\n+help: to allow this impl Trait to capture borrowed data with lifetime `'a`, add `'a` as a constraint\n+   |\n+LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> + 'a {\n+   |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "039cb62f86656a69f511b6364d7935181de85bde", "filename": "src/test/ui/impl-trait/type_parameters_captured.nll.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fimpl-trait%2Ftype_parameters_captured.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fimpl-trait%2Ftype_parameters_captured.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Ftype_parameters_captured.nll.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -0,0 +1,11 @@\n+error[E0310]: the parameter type `T` may not live long enough\n+  --> $DIR/type_parameters_captured.rs:7:20\n+   |\n+LL | fn foo<T>(x: T) -> impl Any + 'static {\n+   |                    ^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider adding an explicit lifetime bound `T: 'static`...\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0310`."}, {"sha": "f5aee2d2d7e5cd5df2b96de64f0c696cce717bbb", "filename": "src/test/ui/in-band-lifetimes/mismatched.nll.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched.nll.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -0,0 +1,20 @@\n+error[E0621]: explicit lifetime required in the type of `y`\n+  --> $DIR/mismatched.rs:4:42\n+   |\n+LL | fn foo(x: &'a u32, y: &u32) -> &'a u32 { y }\n+   |                       ----               ^ lifetime `'a` required\n+   |                       |\n+   |                       help: add explicit lifetime `'a` to the type of `y`: `&'a u32`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/mismatched.rs:6:46\n+   |\n+LL | fn foo2(x: &'a u32, y: &'b u32) -> &'a u32 { y }\n+   |             --          --                   ^ function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'b`\n+   |             |           |\n+   |             |           lifetime `'b` defined here\n+   |             lifetime `'a` defined here\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0621`."}, {"sha": "cd65bab2d4668688d6c83df001b8203c83bc4ee1", "filename": "src/test/ui/in-band-lifetimes/mismatched_trait_impl.nll.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.nll.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -0,0 +1,24 @@\n+error[E0495]: cannot infer an appropriate lifetime for lifetime parameter 'a in generic type due to conflicting requirements\n+  --> $DIR/mismatched_trait_impl.rs:9:5\n+   |\n+LL |     fn foo(&self, x: &u32, y: &'a u32) -> &'a u32 {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: first, the lifetime cannot outlive the anonymous lifetime #2 defined on the method body at 9:5...\n+  --> $DIR/mismatched_trait_impl.rs:9:5\n+   |\n+LL | /     fn foo(&self, x: &u32, y: &'a u32) -> &'a u32 {\n+LL | |         x\n+LL | |     }\n+   | |_____^\n+note: ...but the lifetime must also be valid for the lifetime 'a as defined on the method body at 9:32...\n+  --> $DIR/mismatched_trait_impl.rs:9:32\n+   |\n+LL |     fn foo(&self, x: &u32, y: &'a u32) -> &'a u32 {\n+   |                                ^^\n+   = note: ...so that the method type is compatible with trait:\n+           expected fn(&i32, &'a u32, &u32) -> &'a u32\n+              found fn(&i32, &u32, &u32) -> &u32\n+\n+error: aborting due to previous error\n+"}, {"sha": "45f29fd79565b09c70349ea23fb1915d6c465aca", "filename": "src/test/ui/issues/issue-10291.nll.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-10291.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-10291.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-10291.nll.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -0,0 +1,11 @@\n+error: lifetime may not live long enough\n+  --> $DIR/issue-10291.rs:3:9\n+   |\n+LL | fn test<'x>(x: &'x isize) {\n+   |         -- lifetime `'x` defined here\n+LL |     drop::<Box<for<'z> FnMut(&'z isize) -> &'z isize>>(Box::new(|z| {\n+LL |         x\n+   |         ^ returning this value requires that `'x` must outlive `'static`\n+\n+error: aborting due to previous error\n+"}, {"sha": "8368978deab1a03bf544778c89d3c2aee92cbdf8", "filename": "src/test/ui/issues/issue-13058.nll.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-13058.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-13058.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13058.nll.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -0,0 +1,12 @@\n+error[E0621]: explicit lifetime required in the type of `cont`\n+  --> $DIR/issue-13058.rs:14:21\n+   |\n+LL | fn check<'r, I: Iterator<Item=usize>, T: Itble<'r, usize, I>>(cont: &T) -> bool\n+   |                                                                     -- help: add explicit lifetime `'r` to the type of `cont`: `&'r T`\n+LL | {\n+LL |     let cont_iter = cont.iter();\n+   |                     ^^^^^^^^^^^ lifetime `'r` required\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0621`."}, {"sha": "f142e260a2313ade72cc4bc8b679deabaada9554", "filename": "src/test/ui/issues/issue-15034.nll.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-15034.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-15034.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-15034.nll.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -0,0 +1,11 @@\n+error[E0621]: explicit lifetime required in the type of `lexer`\n+  --> $DIR/issue-15034.rs:17:9\n+   |\n+LL |     pub fn new(lexer: &'a mut Lexer) -> Parser<'a> {\n+   |                       ------------- help: add explicit lifetime `'a` to the type of `lexer`: `&'a mut Lexer<'a>`\n+LL |         Parser { lexer: lexer }\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^ lifetime `'a` required\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0621`."}, {"sha": "a8495846b3610e544fd318ae296de9c89e3e4c8a", "filename": "src/test/ui/issues/issue-15381.nll.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-15381.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-15381.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-15381.nll.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -0,0 +1,16 @@\n+error[E0005]: refutable pattern in `for` loop binding: `&[]` not covered\n+  --> $DIR/issue-15381.rs:4:9\n+   |\n+LL |     for &[x,y,z] in values.chunks(3).filter(|&xs| xs.len() == 3) {\n+   |         ^^^^^^^^ pattern `&[]` not covered\n+\n+error[E0381]: borrow of possibly uninitialized variable: `y`\n+  --> $DIR/issue-15381.rs:6:26\n+   |\n+LL |         println!(\"y={}\", y);\n+   |                          ^ use of possibly uninitialized `y`\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0005, E0381.\n+For more information about an error, try `rustc --explain E0005`."}, {"sha": "ea6b69d1a76c6effed033a140295168d05a2125c", "filename": "src/test/ui/issues/issue-16683.nll.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-16683.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-16683.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16683.nll.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -0,0 +1,10 @@\n+error[E0521]: borrowed data escapes outside of function\n+  --> $DIR/issue-16683.rs:4:9\n+   |\n+LL |     fn b(&self) {\n+   |          ----- `self` is a reference that is only valid in the function body\n+LL |         self.a();\n+   |         ^^^^^^^^ `self` escapes the function body here\n+\n+error: aborting due to previous error\n+"}, {"sha": "7436ebd920ee2aed31a0af93681f28683334c31d", "filename": "src/test/ui/issues/issue-17728.nll.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-17728.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-17728.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17728.nll.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -0,0 +1,21 @@\n+error[E0308]: match arms have incompatible types\n+  --> $DIR/issue-17728.rs:109:14\n+   |\n+LL | /     match to_parse {\n+LL | |         \"w\" | \"west\" => RoomDirection::West,\n+LL | |         \"e\" | \"east\" => RoomDirection::East,\n+LL | |         \"n\" | \"north\" => RoomDirection::North,\n+...  |\n+LL | |         \"down\" => RoomDirection::Down,\n+   | |                   ------------------- this and all prior arms are found to be of type `RoomDirection`\n+LL | |         _ => None\n+   | |              ^^^^ expected enum `RoomDirection`, found enum `std::option::Option`\n+LL | |     }\n+   | |_____- `match` arms have incompatible types\n+   |\n+   = note: expected type `RoomDirection`\n+              found type `std::option::Option<_>`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "b9dc9da3683d60573078708872e7dd6d888cff84", "filename": "src/test/ui/issues/issue-17758.nll.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-17758.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-17758.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17758.nll.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -0,0 +1,10 @@\n+error[E0521]: borrowed data escapes outside of function\n+  --> $DIR/issue-17758.rs:7:9\n+   |\n+LL |     fn bar(&self) {\n+   |            ----- `self` is a reference that is only valid in the function body\n+LL |         self.foo();\n+   |         ^^^^^^^^^^ `self` escapes the function body here\n+\n+error: aborting due to previous error\n+"}, {"sha": "c7601caacdca3fb4e56bc147a45e82e0a05fb767", "filename": "src/test/ui/issues/issue-26217.nll.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-26217.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-26217.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26217.nll.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -0,0 +1,10 @@\n+error: lifetime may not live long enough\n+  --> $DIR/issue-26217.rs:4:5\n+   |\n+LL | fn bar<'a>() {\n+   |        -- lifetime `'a` defined here\n+LL |     foo::<&'a i32>();\n+   |     ^^^^^^^^^^^^^^ requires that `'a` must outlive `'static`\n+\n+error: aborting due to previous error\n+"}, {"sha": "5cf9856e4dc7e585f7748e7381ea7cee2067a8be", "filename": "src/test/ui/issues/issue-28848.nll.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-28848.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-28848.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28848.nll.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -0,0 +1,12 @@\n+error: lifetime may not live long enough\n+  --> $DIR/issue-28848.rs:10:5\n+   |\n+LL | pub fn foo<'a, 'b>(u: &'b ()) -> &'a () {\n+   |            --  -- lifetime `'b` defined here\n+   |            |\n+   |            lifetime `'a` defined here\n+LL |     Foo::<'a, 'b>::xmute(u)\n+   |     ^^^^^^^^^^^^^^^^^^^^ requires that `'b` must outlive `'a`\n+\n+error: aborting due to previous error\n+"}, {"sha": "bdc9fe43a8bd961fc33dfbda3e8fe56574dfe353", "filename": "src/test/ui/issues/issue-34721.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-34721.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-34721.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34721.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,5 +1,3 @@\n-#![feature(nll)]\n-\n pub trait Foo {\n     fn zero(self) -> Self;\n }"}, {"sha": "d5cede990a335116a3d8f631ae19745d6da8c0b7", "filename": "src/test/ui/issues/issue-34721.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-34721.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-34721.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34721.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,5 +1,5 @@\n error[E0382]: use of moved value: `x`\n-  --> $DIR/issue-34721.rs:27:9\n+  --> $DIR/issue-34721.rs:25:9\n    |\n LL |     pub fn baz<T: Foo>(x: T) -> T {\n    |                -       - move occurs because `x` has type `T`, which does not implement the `Copy` trait"}, {"sha": "776a724d3106af25ba69a9393465c34cc1408b54", "filename": "src/test/ui/issues/issue-40510-1.migrate.nll.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-40510-1.migrate.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-40510-1.migrate.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40510-1.migrate.nll.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -0,0 +1,13 @@\n+error: captured variable cannot escape `FnMut` closure body\n+  --> $DIR/issue-40510-1.rs:11:9\n+   |\n+LL |     || {\n+   |      - inferred to be a `FnMut` closure\n+LL |         &mut x\n+   |         ^^^^^^ returns a reference to a captured variable which escapes the closure body\n+   |\n+   = note: `FnMut` closures only have access to their captured variables while they are executing...\n+   = note: ...therefore, they cannot allow references to captured variables to escape\n+\n+error: aborting due to previous error\n+"}, {"sha": "17d1c48d075460b3ec368e72ef9a16922d726ab9", "filename": "src/test/ui/issues/issue-40510-1.migrate.stderr", "status": "renamed", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-40510-1.migrate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-40510-1.migrate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40510-1.migrate.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,5 +1,5 @@\n warning: captured variable cannot escape `FnMut` closure body\n-  --> $DIR/issue-40510-1.rs:8:9\n+  --> $DIR/issue-40510-1.rs:11:9\n    |\n LL |     || {\n    |      - inferred to be a `FnMut` closure\n@@ -11,3 +11,11 @@ LL |         &mut x\n    = warning: this error has been downgraded to a warning for backwards compatibility with previous releases\n    = warning: this represents potential undefined behavior in your code and this warning will become a hard error in the future\n \n+error: compilation successful\n+  --> $DIR/issue-40510-1.rs:20:1\n+   |\n+LL | fn main() {}\n+   | ^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+", "previous_filename": "src/test/ui/issues/issue-40510-1.stderr"}, {"sha": "776a724d3106af25ba69a9393465c34cc1408b54", "filename": "src/test/ui/issues/issue-40510-1.nll.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-40510-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-40510-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40510-1.nll.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -0,0 +1,13 @@\n+error: captured variable cannot escape `FnMut` closure body\n+  --> $DIR/issue-40510-1.rs:11:9\n+   |\n+LL |     || {\n+   |      - inferred to be a `FnMut` closure\n+LL |         &mut x\n+   |         ^^^^^^ returns a reference to a captured variable which escapes the closure body\n+   |\n+   = note: `FnMut` closures only have access to their captured variables while they are executing...\n+   = note: ...therefore, they cannot allow references to captured variables to escape\n+\n+error: aborting due to previous error\n+"}, {"sha": "6ecbeefd88115801d2b6a5f9a5204ac886f5df7f", "filename": "src/test/ui/issues/issue-40510-1.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-40510-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-40510-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40510-1.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,13 +1,21 @@\n-// compile-pass\n+#![feature(rustc_attrs)]\n #![allow(unused)]\n \n+// revisions: migrate nll\n+#![cfg_attr(nll, feature(nll))]\n+\n fn f() {\n     let mut x: Box<()> = Box::new(());\n \n     || {\n         &mut x\n     };\n+    //[migrate]~^^ WARNING captured variable cannot escape `FnMut` closure body\n+    //[migrate]~| WARNING this error has been downgraded to a warning\n+    //[migrate]~| WARNING this warning will become a hard error in the future\n+    //[nll]~^^^^^ ERROR captured variable cannot escape `FnMut` closure body\n }\n \n-\n+#[rustc_error]\n fn main() {}\n+//[migrate]~^ ERROR"}, {"sha": "a49475a8570a1edde617e98d5304ce50144eefc3", "filename": "src/test/ui/issues/issue-40510-3.migrate.nll.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-40510-3.migrate.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-40510-3.migrate.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40510-3.migrate.nll.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -0,0 +1,15 @@\n+error: captured variable cannot escape `FnMut` closure body\n+  --> $DIR/issue-40510-3.rs:11:9\n+   |\n+LL |       || {\n+   |        - inferred to be a `FnMut` closure\n+LL | /         || {\n+LL | |             x.push(())\n+LL | |         }\n+   | |_________^ returns a closure that contains a reference to a captured variable, which then escapes the closure body\n+   |\n+   = note: `FnMut` closures only have access to their captured variables while they are executing...\n+   = note: ...therefore, they cannot allow references to captured variables to escape\n+\n+error: aborting due to previous error\n+"}, {"sha": "692aa1053779ac586e5ec470064c6b18bd9b9ff9", "filename": "src/test/ui/issues/issue-40510-3.migrate.stderr", "status": "renamed", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-40510-3.migrate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-40510-3.migrate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40510-3.migrate.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,5 +1,5 @@\n warning: captured variable cannot escape `FnMut` closure body\n-  --> $DIR/issue-40510-3.rs:8:9\n+  --> $DIR/issue-40510-3.rs:11:9\n    |\n LL |       || {\n    |        - inferred to be a `FnMut` closure\n@@ -13,3 +13,11 @@ LL | |         }\n    = warning: this error has been downgraded to a warning for backwards compatibility with previous releases\n    = warning: this represents potential undefined behavior in your code and this warning will become a hard error in the future\n \n+error: compilation successful\n+  --> $DIR/issue-40510-3.rs:22:1\n+   |\n+LL | fn main() {}\n+   | ^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+", "previous_filename": "src/test/ui/issues/issue-40510-3.stderr"}, {"sha": "a49475a8570a1edde617e98d5304ce50144eefc3", "filename": "src/test/ui/issues/issue-40510-3.nll.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-40510-3.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-40510-3.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40510-3.nll.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -0,0 +1,15 @@\n+error: captured variable cannot escape `FnMut` closure body\n+  --> $DIR/issue-40510-3.rs:11:9\n+   |\n+LL |       || {\n+   |        - inferred to be a `FnMut` closure\n+LL | /         || {\n+LL | |             x.push(())\n+LL | |         }\n+   | |_________^ returns a closure that contains a reference to a captured variable, which then escapes the closure body\n+   |\n+   = note: `FnMut` closures only have access to their captured variables while they are executing...\n+   = note: ...therefore, they cannot allow references to captured variables to escape\n+\n+error: aborting due to previous error\n+"}, {"sha": "205d982363128d11d70c5d705580e2a3066284e5", "filename": "src/test/ui/issues/issue-40510-3.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-40510-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-40510-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40510-3.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,15 +1,23 @@\n-// compile-pass\n+#![feature(rustc_attrs)]\n #![allow(unused)]\n \n+// revisions: migrate nll\n+#![cfg_attr(nll, feature(nll))]\n+\n fn f() {\n     let mut x: Vec<()> = Vec::new();\n \n     || {\n         || {\n             x.push(())\n         }\n+        //[migrate]~^^^ WARNING captured variable cannot escape `FnMut` closure body\n+        //[migrate]~| WARNING this error has been downgraded to a warning\n+        //[migrate]~| WARNING this warning will become a hard error in the future\n+        //[nll]~^^^^^^ ERROR captured variable cannot escape `FnMut` closure body\n     };\n }\n \n-\n+#[rustc_error]\n fn main() {}\n+//[migrate]~^ ERROR"}, {"sha": "c688261fa1cb1c3670eaf75011d99f03613d73ba", "filename": "src/test/ui/issues/issue-45696-no-variant-box-recur.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-45696-no-variant-box-recur.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-45696-no-variant-box-recur.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-45696-no-variant-box-recur.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -6,11 +6,6 @@\n // We will explicitly test NLL, and migration modes; thus we will also skip the\n // automated compare-mode=nll.\n \n-// revisions: nll migrate\n-// ignore-compare-mode-nll\n-\n-#![cfg_attr(nll, feature(nll))]\n-\n // run-pass\n \n // This test has structs and functions that are by definition unusable"}, {"sha": "18af33c1821c0d6c7dfa4ba27422643a8eb4b3ff", "filename": "src/test/ui/issues/issue-46036.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-46036.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-46036.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46036.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,6 +1,5 @@\n // Issue 46036: [NLL] false edges on infinite loops\n // Infinite loops should create false edges to the cleanup block.\n-#![feature(nll)]\n \n struct Foo { x: &'static u32 }\n "}, {"sha": "49dd0e267b8ea8f187ad806f0cf1a23f4c34bf59", "filename": "src/test/ui/issues/issue-46036.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-46036.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-46036.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46036.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,5 +1,5 @@\n error[E0597]: `a` does not live long enough\n-  --> $DIR/issue-46036.rs:9:24\n+  --> $DIR/issue-46036.rs:8:24\n    |\n LL |     let foo = Foo { x: &a };\n    |                        ^^"}, {"sha": "c1fd7729bdefb6f3b36f739129321c7d4306b884", "filename": "src/test/ui/issues/issue-46983.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-46983.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-46983.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46983.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,5 +1,3 @@\n-#![feature(nll)]\n-\n fn foo(x: &u32) -> &'static u32 {\n     &*x\n     //~^ ERROR explicit lifetime required in the type of `x` [E0621]"}, {"sha": "8a4a6bdb39fa4202a72193a357f84533dd88ac04", "filename": "src/test/ui/issues/issue-46983.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-46983.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-46983.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46983.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,5 +1,5 @@\n error[E0621]: explicit lifetime required in the type of `x`\n-  --> $DIR/issue-46983.rs:4:5\n+  --> $DIR/issue-46983.rs:2:5\n    |\n LL | fn foo(x: &u32) -> &'static u32 {\n    |           ---- help: add explicit lifetime `'static` to the type of `x`: `&'static u32`"}, {"sha": "2f78ce0002ba3308bc713841993b9eccf873c3bd", "filename": "src/test/ui/issues/issue-47184.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-47184.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-47184.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-47184.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,5 +1,3 @@\n-#![feature(nll)]\n-\n fn main() {\n     let _vec: Vec<&'static String> = vec![&String::new()];\n     //~^ ERROR temporary value dropped while borrowed [E0716]"}, {"sha": "f97713b4ac438f4ca46858f42a63ffd3079ae69f", "filename": "src/test/ui/issues/issue-47184.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-47184.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-47184.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-47184.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,5 +1,5 @@\n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/issue-47184.rs:4:44\n+  --> $DIR/issue-47184.rs:2:44\n    |\n LL |     let _vec: Vec<&'static String> = vec![&String::new()];\n    |               --------------------         ^^^^^^^^^^^^^ - temporary value is freed at the end of this statement"}, {"sha": "ace6cdce841a7db557b136fc4f59421da42981b8", "filename": "src/test/ui/issues/issue-47646.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-47646.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-47646.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-47646.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,6 +1,3 @@\n-#![allow(warnings)]\n-#![feature(nll)]\n-\n use std::collections::BinaryHeap;\n \n fn main() {"}, {"sha": "c0b876368480653e7468728e05694ed309945bc1", "filename": "src/test/ui/issues/issue-47646.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-47646.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-47646.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-47646.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,5 +1,5 @@\n error[E0502]: cannot borrow `heap` as immutable because it is also borrowed as mutable\n-  --> $DIR/issue-47646.rs:12:30\n+  --> $DIR/issue-47646.rs:9:30\n    |\n LL |     let borrow = heap.peek_mut();\n    |                  ---- mutable borrow occurs here"}, {"sha": "74323317f195643a2ca754fab96e935d8ea35de1", "filename": "src/test/ui/issues/issue-47703-1.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-47703-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-47703-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-47703-1.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,6 +1,4 @@\n // compile-pass\n-#![allow(dead_code)]\n-#![feature(nll)]\n \n struct AtomicRefMut<'a> {\n     value: &'a mut i32,"}, {"sha": "377eeb67ae1b95d0f691faf7fde636a8a988ed6d", "filename": "src/test/ui/issues/issue-47703-tuple.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-47703-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-47703-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-47703-tuple.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,6 +1,4 @@\n // compile-pass\n-#![allow(dead_code)]\n-#![feature(nll)]\n \n struct WithDrop;\n "}, {"sha": "22f2a1f364d1d21fb4777e0605422fb4f04e3ba5", "filename": "src/test/ui/issues/issue-47703.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-47703.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-47703.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-47703.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,6 +1,4 @@\n // compile-pass\n-#![allow(dead_code)]\n-#![feature(nll)]\n \n struct MyStruct<'a> {\n     field: &'a mut (),"}, {"sha": "cefc872668cebd9c773753d08cf20fd9bd726522", "filename": "src/test/ui/issues/issue-47722.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-47722.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-47722.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-47722.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,10 +1,8 @@\n // compile-pass\n-#![allow(dead_code)]\n \n // Tests that automatic coercions from &mut T to *mut T\n // allow borrows of T to expire immediately - essentially, that\n // they work identically to 'foo as *mut T'\n-#![feature(nll)]\n \n struct SelfReference {\n     self_reference: *mut SelfReference,"}, {"sha": "334bd608add15afc59366363de6b1b4d33c608fe", "filename": "src/test/ui/issues/issue-47789.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-47789.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-47789.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-47789.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,9 +1,6 @@\n // compile-pass\n-#![allow(dead_code)]\n #![allow(non_upper_case_globals)]\n \n-#![feature(nll)]\n-\n static mut x: &'static u32 = &0;\n \n fn foo() {"}, {"sha": "ea325ea695f66a04c94b4eb8e00c7f783b228492", "filename": "src/test/ui/issues/issue-48132.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-48132.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-48132.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-48132.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -3,9 +3,6 @@\n \n // run-pass\n \n-#![feature(nll)]\n-#![allow(warnings)]\n-\n struct Inner<I, V> {\n     iterator: I,\n     item: V,"}, {"sha": "90e9858d741972a353d48ee62989b2de60c60de5", "filename": "src/test/ui/issues/issue-48179.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-48179.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-48179.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-48179.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -3,9 +3,6 @@\n \n // run-pass\n \n-#![feature(nll)]\n-#![allow(warnings)]\n-\n pub struct Container<T: Iterator> {\n     value: Option<T::Item>,\n }"}, {"sha": "f7fd04179f26e35e70216fb2fb87b3770c1d87d5", "filename": "src/test/ui/issues/issue-48803.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-48803.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-48803.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-48803.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,5 +1,3 @@\n-#![feature(nll)]\n-\n fn flatten<'a, 'b, T>(x: &'a &'b T) -> &'a T {\n     x\n }"}, {"sha": "2f94039c0c3a934af7970fa24cc473ce8f4e8c8f", "filename": "src/test/ui/issues/issue-48803.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-48803.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-48803.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-48803.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,5 +1,5 @@\n error[E0506]: cannot assign to `x` because it is borrowed\n-  --> $DIR/issue-48803.rs:12:5\n+  --> $DIR/issue-48803.rs:10:5\n    |\n LL |     let y = &x;\n    |             -- borrow of `x` occurs here"}, {"sha": "dd7b9eeb8d54e65bb20898718f52199ffed886c7", "filename": "src/test/ui/issues/issue-49579.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-49579.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-49579.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-49579.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,8 +1,6 @@\n // compile-pass\n // ignore-emscripten no i128 support\n \n-#![feature(nll)]\n-\n fn fibs(n: u32) -> impl Iterator<Item=u128> {\n     (0 .. n)\n     .scan((0, 1), |st, _| {"}, {"sha": "9c6f8d4532a70ab7d895afaedf103424a5ea11ff", "filename": "src/test/ui/issues/issue-49824.nll.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-49824.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-49824.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-49824.nll.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -0,0 +1,18 @@\n+error: captured variable cannot escape `FnMut` closure body\n+  --> $DIR/issue-49824.rs:10:9\n+   |\n+LL |       || {\n+   |        - inferred to be a `FnMut` closure\n+LL | /         || {\n+LL | |\n+LL | |\n+LL | |\n+LL | |             let _y = &mut x;\n+LL | |         }\n+   | |_________^ returns a closure that contains a reference to a captured variable, which then escapes the closure body\n+   |\n+   = note: `FnMut` closures only have access to their captured variables while they are executing...\n+   = note: ...therefore, they cannot allow references to captured variables to escape\n+\n+error: aborting due to previous error\n+"}, {"sha": "8eab7b2fa3ae9b215555e4633a4203d6619bee1b", "filename": "src/test/ui/issues/issue-51515.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-51515.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-51515.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-51515.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,5 +1,3 @@\n-#![feature(nll)]\n-\n fn main() {\n     let foo = &16;\n     //~^ HELP consider changing this to be a mutable reference"}, {"sha": "827bb8fe2b8920e5d651faec472e06985ccd585e", "filename": "src/test/ui/issues/issue-51515.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-51515.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-51515.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-51515.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,5 +1,5 @@\n error[E0594]: cannot assign to `*foo` which is behind a `&` reference\n-  --> $DIR/issue-51515.rs:7:5\n+  --> $DIR/issue-51515.rs:5:5\n    |\n LL |     let foo = &16;\n    |               --- help: consider changing this to be a mutable reference: `&mut 16`\n@@ -8,7 +8,7 @@ LL |     *foo = 32;\n    |     ^^^^^^^^^ `foo` is a `&` reference, so the data it refers to cannot be written\n \n error[E0594]: cannot assign to `*bar` which is behind a `&` reference\n-  --> $DIR/issue-51515.rs:12:5\n+  --> $DIR/issue-51515.rs:10:5\n    |\n LL |     let bar = foo;\n    |         --- help: consider changing this to be a mutable reference: `&mut i32`"}, {"sha": "911983445e6d6f434b63c779c942a6fff7ddde0b", "filename": "src/test/ui/issues/issue-52057.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-52057.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-52057.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-52057.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -4,8 +4,6 @@\n //\n // run-pass\n \n-#![feature(nll)]\n-\n pub trait Parser {\n     type Input;\n "}, {"sha": "eba875de2152b2926478aa96b4fa50d1adf3bff1", "filename": "src/test/ui/issues/issue-52213.nll.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-52213.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-52213.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-52213.nll.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -0,0 +1,13 @@\n+error: lifetime may not live long enough\n+  --> $DIR/issue-52213.rs:3:20\n+   |\n+LL | fn transmute_lifetime<'a, 'b, T>(t: &'a (T,)) -> &'b T {\n+   |                       --  -- lifetime `'b` defined here\n+   |                       |\n+   |                       lifetime `'a` defined here\n+LL |     match (&t,) {\n+LL |         ((u,),) => u,\n+   |                    ^ returning this value requires that `'a` must outlive `'b`\n+\n+error: aborting due to previous error\n+"}, {"sha": "20f19b2596716db6f8489ea84a7618681e80bfc7", "filename": "src/test/ui/issues/issue-52533-1.nll.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-52533-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-52533-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-52533-1.nll.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -0,0 +1,11 @@\n+error: lifetime may not live long enough\n+  --> $DIR/issue-52533-1.rs:9:18\n+   |\n+LL |     gimme(|x, y| y)\n+   |            -  -  ^ closure was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |            |  |\n+   |            |  has type `&Foo<'_, '1, u32>`\n+   |            has type `&Foo<'_, '2, u32>`\n+\n+error: aborting due to previous error\n+"}, {"sha": "c764736d79878858ef4224b407f6f3603da39571", "filename": "src/test/ui/issues/issue-52533.nll.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-52533.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-52533.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-52533.nll.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -0,0 +1,11 @@\n+error: lifetime may not live long enough\n+  --> $DIR/issue-52533.rs:5:16\n+   |\n+LL |     foo(|a, b| b)\n+   |          -  -  ^ closure was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |          |  |\n+   |          |  has type `&'1 u32`\n+   |          has type `&'2 u32`\n+\n+error: aborting due to previous error\n+"}, {"sha": "c58656330e12b38981e72d260f2aadc5667efa7f", "filename": "src/test/ui/issues/issue-52992.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-52992.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-52992.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-52992.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -4,8 +4,6 @@\n //\n // compile-pass\n \n-#![feature(nll)]\n-\n fn main() {}\n \n fn fail<'a>() -> Struct<'a, Generic<()>> {"}, {"sha": "4d3b3f80a97e53f804ef0d18618d7ea26d50c161", "filename": "src/test/ui/issues/issue-53568.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-53568.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-53568.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-53568.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -3,9 +3,6 @@\n //\n // compile-pass\n \n-#![feature(nll)]\n-#![allow(dead_code)]\n-\n trait Future {\n     type Item;\n }"}, {"sha": "7463a3f286f4cfeea1641ce9c3751fbfaac582ab", "filename": "src/test/ui/issues/issue-54302-cases.nll.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-54302-cases.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-54302-cases.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54302-cases.nll.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -0,0 +1,26 @@\n+error: higher-ranked subtype error\n+  --> $DIR/issue-54302-cases.rs:63:5\n+   |\n+LL |     <u32 as RefFoo<u32>>::ref_foo(a)\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: higher-ranked subtype error\n+  --> $DIR/issue-54302-cases.rs:69:5\n+   |\n+LL |     <i32 as RefFoo<i32>>::ref_foo(a)\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: higher-ranked subtype error\n+  --> $DIR/issue-54302-cases.rs:75:5\n+   |\n+LL |     <u64 as RefFoo<u64>>::ref_foo(a)\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: higher-ranked subtype error\n+  --> $DIR/issue-54302-cases.rs:81:5\n+   |\n+LL |     <i64 as RefFoo<i64>>::ref_foo(a)\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "e68de0312824dac08f14311bbc394c73f608e7ac", "filename": "src/test/ui/issues/issue-54302.nll.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-54302.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-54302.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54302.nll.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -0,0 +1,8 @@\n+error: higher-ranked subtype error\n+  --> $DIR/issue-54302.rs:13:5\n+   |\n+LL |     assert_deserialize_owned::<&'static str>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "8d3a4e72de411b88185c21909c5f404aa1030e43", "filename": "src/test/ui/issues/issue-54943-1.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-54943-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-54943-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54943-1.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,5 +1,3 @@\n-#![feature(nll)]\n-\n // This test is a minimal version of an ICE in the dropck-eyepatch tests\n // found in the fix for #54943.\n "}, {"sha": "41ca7c1498265b30c2be23281d86d1ea6dd900d9", "filename": "src/test/ui/issues/issue-54943-2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-54943-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-54943-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54943-2.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,5 +1,3 @@\n-#![feature(nll)]\n-\n // This test is a minimal version of an ICE in the dropck-eyepatch tests\n // found in the fix for #54943. In particular, this test is in unreachable\n // code as the initial fix for this ICE only worked if the code was reachable."}, {"sha": "59be0f983b9078fb7ed47495f96034d5256a7f93", "filename": "src/test/ui/issues/issue-54943.nll.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-54943.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-54943.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54943.nll.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -0,0 +1,11 @@\n+error: lifetime may not live long enough\n+  --> $DIR/issue-54943.rs:6:13\n+   |\n+LL | fn boo<'a>() {\n+   |        -- lifetime `'a` defined here\n+...\n+LL |     let x = foo::<&'a u32>();\n+   |             ^^^^^^^^^^^^^^ requires that `'a` must outlive `'static`\n+\n+error: aborting due to previous error\n+"}, {"sha": "85722300bf0064160093dcb2d0676d551eedaf23", "filename": "src/test/ui/issues/issue-54943.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-54943.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-54943.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54943.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,13 +1,10 @@\n-#![feature(nll)]\n-#![allow(warnings)]\n-\n fn foo<T: 'static>() { }\n \n fn boo<'a>() {\n     return;\n \n     let x = foo::<&'a u32>();\n-    //~^ ERROR lifetime may not live long enough\n+    //~^ ERROR\n }\n \n fn main() {}"}, {"sha": "d0f03f90c833013c3513bbd440e15cd5fab07a60", "filename": "src/test/ui/issues/issue-54943.stderr", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-54943.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-54943.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54943.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,11 +1,10 @@\n-error: lifetime may not live long enough\n-  --> $DIR/issue-54943.rs:9:13\n+error[E0477]: the type `&'a u32` does not fulfill the required lifetime\n+  --> $DIR/issue-54943.rs:6:13\n    |\n-LL | fn boo<'a>() {\n-   |        -- lifetime `'a` defined here\n-...\n LL |     let x = foo::<&'a u32>();\n-   |             ^^^^^^^^^^^^^^ requires that `'a` must outlive `'static`\n+   |             ^^^^^^^^^^^^^^\n+   |\n+   = note: type must satisfy the static lifetime\n \n error: aborting due to previous error\n "}, {"sha": "dd38bb62912513d36461c2d96cf57a38104ca292", "filename": "src/test/ui/issues/issue-55731.nll.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-55731.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-55731.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-55731.nll.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -0,0 +1,11 @@\n+error: higher-ranked subtype error\n+  --> $DIR/issue-55731.rs:48:5\n+   |\n+LL | /     multi(Map {\n+LL | |         i: Cloned(PhantomData),\n+LL | |         f: X,\n+LL | |     });\n+   | |______^\n+\n+error: aborting due to previous error\n+"}, {"sha": "5809a56cd4b6b638d5f6811fd8b72d28aebae0ab", "filename": "src/test/ui/issues/issue-55796.nll.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-55796.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-55796.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-55796.nll.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -0,0 +1,20 @@\n+error: lifetime may not live long enough\n+  --> $DIR/issue-55796.rs:16:9\n+   |\n+LL | pub trait Graph<'a> {\n+   |                 -- lifetime `'a` defined here\n+...\n+LL |         Box::new(self.out_edges(u).map(|e| e.target()))\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ returning this value requires that `'a` must outlive `'static`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/issue-55796.rs:21:9\n+   |\n+LL | pub trait Graph<'a> {\n+   |                 -- lifetime `'a` defined here\n+...\n+LL |         Box::new(self.in_edges(u).map(|e| e.target()))\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ returning this value requires that `'a` must outlive `'static`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "70310780b4330e5e2ce2686172213859ba2b690f", "filename": "src/test/ui/issues/issue-57843.nll.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-57843.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fissues%2Fissue-57843.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-57843.nll.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -0,0 +1,8 @@\n+error: higher-ranked subtype error\n+  --> $DIR/issue-57843.rs:23:9\n+   |\n+LL |     Foo(Box::new(|_| ()));\n+   |         ^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "c1f662fda610b41fcee81e8a9532361bd6e56331", "filename": "src/test/ui/kindck/kindck-impl-type-params.nll.stderr", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.nll.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -0,0 +1,63 @@\n+error[E0277]: `T` cannot be sent between threads safely\n+  --> $DIR/kindck-impl-type-params.rs:18:13\n+   |\n+LL |     let a = &t as &Gettable<T>;\n+   |             ^^ `T` cannot be sent between threads safely\n+   |\n+   = help: the trait `std::marker::Send` is not implemented for `T`\n+   = help: consider adding a `where T: std::marker::Send` bound\n+   = note: required because of the requirements on the impl of `Gettable<T>` for `S<T>`\n+   = note: required for the cast to the object type `dyn Gettable<T>`\n+\n+error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n+  --> $DIR/kindck-impl-type-params.rs:18:13\n+   |\n+LL |     let a = &t as &Gettable<T>;\n+   |             ^^ the trait `std::marker::Copy` is not implemented for `T`\n+   |\n+   = help: consider adding a `where T: std::marker::Copy` bound\n+   = note: required because of the requirements on the impl of `Gettable<T>` for `S<T>`\n+   = note: required for the cast to the object type `dyn Gettable<T>`\n+\n+error[E0277]: `T` cannot be sent between threads safely\n+  --> $DIR/kindck-impl-type-params.rs:25:27\n+   |\n+LL |     let a: &Gettable<T> = &t;\n+   |                           ^^ `T` cannot be sent between threads safely\n+   |\n+   = help: the trait `std::marker::Send` is not implemented for `T`\n+   = help: consider adding a `where T: std::marker::Send` bound\n+   = note: required because of the requirements on the impl of `Gettable<T>` for `S<T>`\n+   = note: required for the cast to the object type `dyn Gettable<T>`\n+\n+error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n+  --> $DIR/kindck-impl-type-params.rs:25:27\n+   |\n+LL |     let a: &Gettable<T> = &t;\n+   |                           ^^ the trait `std::marker::Copy` is not implemented for `T`\n+   |\n+   = help: consider adding a `where T: std::marker::Copy` bound\n+   = note: required because of the requirements on the impl of `Gettable<T>` for `S<T>`\n+   = note: required for the cast to the object type `dyn Gettable<T>`\n+\n+error[E0277]: the trait bound `std::string::String: std::marker::Copy` is not satisfied\n+  --> $DIR/kindck-impl-type-params.rs:38:13\n+   |\n+LL |     let a = t as Box<Gettable<String>>;\n+   |             ^ the trait `std::marker::Copy` is not implemented for `std::string::String`\n+   |\n+   = note: required because of the requirements on the impl of `Gettable<std::string::String>` for `S<std::string::String>`\n+   = note: required for the cast to the object type `dyn Gettable<std::string::String>`\n+\n+error[E0277]: the trait bound `foo3::Foo: std::marker::Copy` is not satisfied\n+  --> $DIR/kindck-impl-type-params.rs:46:33\n+   |\n+LL |     let a: Box<Gettable<Foo>> = t;\n+   |                                 ^ the trait `std::marker::Copy` is not implemented for `foo3::Foo`\n+   |\n+   = note: required because of the requirements on the impl of `Gettable<foo3::Foo>` for `S<foo3::Foo>`\n+   = note: required for the cast to the object type `dyn Gettable<foo3::Foo>`\n+\n+error: aborting due to 6 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "1df7412132bd9fa6b787c8d95a16c8e80927a2db", "filename": "src/test/ui/kindck/kindck-send-object1.nll.stderr", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object1.nll.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -0,0 +1,32 @@\n+error[E0277]: `(dyn Dummy + 'a)` cannot be shared between threads safely\n+  --> $DIR/kindck-send-object1.rs:10:5\n+   |\n+LL |     assert_send::<&'a Dummy>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^ `(dyn Dummy + 'a)` cannot be shared between threads safely\n+   |\n+   = help: the trait `std::marker::Sync` is not implemented for `(dyn Dummy + 'a)`\n+   = note: required because of the requirements on the impl of `std::marker::Send` for `&'a (dyn Dummy + 'a)`\n+note: required by `assert_send`\n+  --> $DIR/kindck-send-object1.rs:5:1\n+   |\n+LL | fn assert_send<T:Send+'static>() { }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0277]: `(dyn Dummy + 'a)` cannot be sent between threads safely\n+  --> $DIR/kindck-send-object1.rs:29:5\n+   |\n+LL |     assert_send::<Box<Dummy+'a>>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `(dyn Dummy + 'a)` cannot be sent between threads safely\n+   |\n+   = help: the trait `std::marker::Send` is not implemented for `(dyn Dummy + 'a)`\n+   = note: required because of the requirements on the impl of `std::marker::Send` for `std::ptr::Unique<(dyn Dummy + 'a)>`\n+   = note: required because it appears within the type `std::boxed::Box<(dyn Dummy + 'a)>`\n+note: required by `assert_send`\n+  --> $DIR/kindck-send-object1.rs:5:1\n+   |\n+LL | fn assert_send<T:Send+'static>() { }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "8b24563e920041d1c05668cf0779b4a5a3bf38df", "filename": "src/test/ui/lifetimes/lifetime-bound-will-change-warning.nll.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Flifetimes%2Flifetime-bound-will-change-warning.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Flifetimes%2Flifetime-bound-will-change-warning.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-bound-will-change-warning.nll.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -0,0 +1,20 @@\n+error[E0521]: borrowed data escapes outside of function\n+  --> $DIR/lifetime-bound-will-change-warning.rs:34:5\n+   |\n+LL | fn test2<'a>(x: &'a Box<Fn()+'a>) {\n+   |              - `x` is a reference that is only valid in the function body\n+LL |     // but ref_obj will not, so warn.\n+LL |     ref_obj(x)\n+   |     ^^^^^^^^^^ `x` escapes the function body here\n+\n+error[E0521]: borrowed data escapes outside of function\n+  --> $DIR/lifetime-bound-will-change-warning.rs:39:5\n+   |\n+LL | fn test2cc<'a>(x: &'a Box<Fn()+'a>) {\n+   |                - `x` is a reference that is only valid in the function body\n+LL |     // same as test2, but cross crate\n+LL |     lib::ref_obj(x)\n+   |     ^^^^^^^^^^^^^^^ `x` escapes the function body here\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "fc9093bb2e4b8dccf4bea23e621c6c97daecb5e4", "filename": "src/test/ui/lifetimes/lifetime-errors/ex1-return-one-existing-name-if-else-using-impl.nll.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl.nll.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -0,0 +1,13 @@\n+error: lifetime may not live long enough\n+  --> $DIR/ex1-return-one-existing-name-if-else-using-impl.rs:11:20\n+   |\n+LL |     fn foo<'a>(x: &i32, y: &'a i32) -> &'a i32 {\n+   |            --     - let's call the lifetime of this reference `'1`\n+   |            |\n+   |            lifetime `'a` defined here\n+LL | \n+LL |         if x > y { x } else { y }\n+   |                    ^ function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'1`\n+\n+error: aborting due to previous error\n+"}, {"sha": "3384c24da8fbe5589518e55817b1ce82906f73f0", "filename": "src/test/ui/lifetimes/lifetime-errors/ex1-return-one-existing-name-return-type-is-anon.nll.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-return-type-is-anon.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-return-type-is-anon.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-return-type-is-anon.nll.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -0,0 +1,13 @@\n+error: lifetime may not live long enough\n+  --> $DIR/ex1-return-one-existing-name-return-type-is-anon.rs:8:5\n+   |\n+LL |   fn foo<'a>(&self, x: &'a i32) -> &i32 {\n+   |          --  - let's call the lifetime of this reference `'1`\n+   |          |\n+   |          lifetime `'a` defined here\n+LL | \n+LL |     x\n+   |     ^ function was supposed to return data with lifetime `'1` but it is returning data with lifetime `'a`\n+\n+error: aborting due to previous error\n+"}, {"sha": "5ef29076e07bf0c6561cc493ba05c3af26fa2bef", "filename": "src/test/ui/lifetimes/lifetime-errors/ex1-return-one-existing-name-self-is-anon.nll.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-self-is-anon.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-self-is-anon.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-self-is-anon.nll.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -0,0 +1,13 @@\n+error: lifetime may not live long enough\n+  --> $DIR/ex1-return-one-existing-name-self-is-anon.rs:8:30\n+   |\n+LL |     fn foo<'a>(&self, x: &'a Foo) -> &'a Foo {\n+   |            --  - let's call the lifetime of this reference `'1`\n+   |            |\n+   |            lifetime `'a` defined here\n+LL | \n+LL |         if true { x } else { self }\n+   |                              ^^^^ function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'1`\n+\n+error: aborting due to previous error\n+"}, {"sha": "90d4754ebab82d7dfd91ac30c46e38c9855e3faf", "filename": "src/test/ui/lifetimes/lifetime-errors/ex2a-push-one-existing-name-2.nll.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2a-push-one-existing-name-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2a-push-one-existing-name-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2a-push-one-existing-name-2.nll.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -0,0 +1,11 @@\n+error[E0621]: explicit lifetime required in the type of `x`\n+  --> $DIR/ex2a-push-one-existing-name-2.rs:6:5\n+   |\n+LL | fn foo<'a>(x: Ref<i32>, y: &mut Vec<Ref<'a, i32>>) {\n+   |               -------- help: add explicit lifetime `'a` to the type of `x`: `Ref<'a, i32>`\n+LL |     y.push(x);\n+   |     ^^^^^^^^^ lifetime `'a` required\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0621`."}, {"sha": "a03e16b3b791989406c759cde525f850cfd754f4", "filename": "src/test/ui/lifetimes/lifetime-errors/ex2a-push-one-existing-name-early-bound.nll.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2a-push-one-existing-name-early-bound.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2a-push-one-existing-name-early-bound.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2a-push-one-existing-name-early-bound.nll.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -0,0 +1,12 @@\n+error[E0621]: explicit lifetime required in the type of `y`\n+  --> $DIR/ex2a-push-one-existing-name-early-bound.rs:8:5\n+   |\n+LL | fn baz<'a, 'b, T>(x: &mut Vec<&'a T>, y: &T)\n+   |                                          -- help: add explicit lifetime `'a` to the type of `y`: `&'a T`\n+...\n+LL |     x.push(y);\n+   |     ^^^^^^^^^ lifetime `'a` required\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0621`."}, {"sha": "487b34e3d18f4c3d6281b8893a9ea1d96b1d83c0", "filename": "src/test/ui/lifetimes/lifetime-errors/ex2a-push-one-existing-name.nll.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2a-push-one-existing-name.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2a-push-one-existing-name.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2a-push-one-existing-name.nll.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -0,0 +1,11 @@\n+error[E0621]: explicit lifetime required in the type of `y`\n+  --> $DIR/ex2a-push-one-existing-name.rs:6:5\n+   |\n+LL | fn foo<'a>(x: &mut Vec<Ref<'a, i32>>, y: Ref<i32>) {\n+   |                                          -------- help: add explicit lifetime `'a` to the type of `y`: `Ref<'a, i32>`\n+LL |     x.push(y);\n+   |     ^^^^^^^^^ lifetime `'a` required\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0621`."}, {"sha": "735f7a0dfc633cc4e66ca96deb14ed56ec9a9263", "filename": "src/test/ui/lifetimes/lifetime-errors/ex2b-push-no-existing-names.nll.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2b-push-no-existing-names.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2b-push-no-existing-names.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2b-push-no-existing-names.nll.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -0,0 +1,12 @@\n+error: lifetime may not live long enough\n+  --> $DIR/ex2b-push-no-existing-names.rs:6:5\n+   |\n+LL | fn foo(x: &mut Vec<Ref<i32>>, y: Ref<i32>) {\n+   |        -                      - has type `Ref<'1, i32>`\n+   |        |\n+   |        has type `&mut std::vec::Vec<Ref<'2, i32>>`\n+LL |     x.push(y);\n+   |     ^^^^^^^^^ argument requires that `'1` must outlive `'2`\n+\n+error: aborting due to previous error\n+"}, {"sha": "fbefa1f5667c75c5e60acb2a1cbf37b1cbe68c8c", "filename": "src/test/ui/lifetimes/lifetime-errors/ex2c-push-inference-variable.nll.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2c-push-inference-variable.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2c-push-inference-variable.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2c-push-inference-variable.nll.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -0,0 +1,13 @@\n+error: lifetime may not live long enough\n+  --> $DIR/ex2c-push-inference-variable.rs:7:5\n+   |\n+LL | fn foo<'a, 'b, 'c>(x: &'a mut Vec<Ref<'b, i32>>, y: Ref<'c, i32>) {\n+   |            --  -- lifetime `'c` defined here\n+   |            |\n+   |            lifetime `'b` defined here\n+LL |     let z = Ref { data: y.data };\n+LL |     x.push(z);\n+   |     ^^^^^^^^^ argument requires that `'c` must outlive `'b`\n+\n+error: aborting due to previous error\n+"}, {"sha": "d889eb4afdbe5843b3098d8a206a15b9633327d9", "filename": "src/test/ui/lifetimes/lifetime-errors/ex2d-push-inference-variable-2.nll.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2d-push-inference-variable-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2d-push-inference-variable-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2d-push-inference-variable-2.nll.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -0,0 +1,13 @@\n+error: lifetime may not live long enough\n+  --> $DIR/ex2d-push-inference-variable-2.rs:8:5\n+   |\n+LL | fn foo<'a, 'b, 'c>(x: &'a mut Vec<Ref<'b, i32>>, y: Ref<'c, i32>) {\n+   |            --  -- lifetime `'c` defined here\n+   |            |\n+   |            lifetime `'b` defined here\n+...\n+LL |     a.push(b);\n+   |     ^^^^^^^^^ argument requires that `'c` must outlive `'b`\n+\n+error: aborting due to previous error\n+"}, {"sha": "39eb4079352c313e53ad54fe6c52fc2a11968fe1", "filename": "src/test/ui/lifetimes/lifetime-errors/ex2e-push-inference-variable-3.nll.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2e-push-inference-variable-3.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2e-push-inference-variable-3.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2e-push-inference-variable-3.nll.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -0,0 +1,13 @@\n+error: lifetime may not live long enough\n+  --> $DIR/ex2e-push-inference-variable-3.rs:8:5\n+   |\n+LL | fn foo<'a, 'b, 'c>(x: &'a mut Vec<Ref<'b, i32>>, y: Ref<'c, i32>) {\n+   |            --  -- lifetime `'c` defined here\n+   |            |\n+   |            lifetime `'b` defined here\n+...\n+LL |     Vec::push(a, b);\n+   |     ^^^^^^^^^^^^^^^ argument requires that `'c` must outlive `'b`\n+\n+error: aborting due to previous error\n+"}, {"sha": "a94f9a799061a194c92e317c00feb577774cce86", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-2.nll.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-2.nll.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -0,0 +1,12 @@\n+error: lifetime may not live long enough\n+  --> $DIR/ex3-both-anon-regions-2.rs:2:5\n+   |\n+LL | fn foo(&mut (ref mut v, w): &mut (&u8, &u8), x: &u8) {\n+   |                                   -             - let's call the lifetime of this reference `'1`\n+   |                                   |\n+   |                                   let's call the lifetime of this reference `'2`\n+LL |     *v = x;\n+   |     ^^^^^^ assignment requires that `'1` must outlive `'2`\n+\n+error: aborting due to previous error\n+"}, {"sha": "779e2eb8b920588417086f76ef01debd2a77e0e6", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-3.nll.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-3.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-3.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-3.nll.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -0,0 +1,22 @@\n+error: lifetime may not live long enough\n+  --> $DIR/ex3-both-anon-regions-3.rs:2:5\n+   |\n+LL | fn foo(z: &mut Vec<(&u8,&u8)>, (x, y): (&u8, &u8)) {\n+   |                     -                   - let's call the lifetime of this reference `'1`\n+   |                     |\n+   |                     let's call the lifetime of this reference `'2`\n+LL |     z.push((x,y));\n+   |     ^^^^^^^^^^^^^ argument requires that `'1` must outlive `'2`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/ex3-both-anon-regions-3.rs:2:5\n+   |\n+LL | fn foo(z: &mut Vec<(&u8,&u8)>, (x, y): (&u8, &u8)) {\n+   |                         -                    - let's call the lifetime of this reference `'1`\n+   |                         |\n+   |                         let's call the lifetime of this reference `'2`\n+LL |     z.push((x,y));\n+   |     ^^^^^^^^^^^^^ argument requires that `'1` must outlive `'2`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "4c0ffe5c0901abcb6826b2bc33fcfe364fbb0bbc", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-both-are-structs-2.nll.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-2.nll.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -0,0 +1,12 @@\n+error: lifetime may not live long enough\n+  --> $DIR/ex3-both-anon-regions-both-are-structs-2.rs:7:5\n+   |\n+LL | fn foo(mut x: Ref, y: Ref) {\n+   |        -----       - has type `Ref<'_, '1>`\n+   |        |\n+   |        has type `Ref<'_, '2>`\n+LL |     x.b = y.b;\n+   |     ^^^^^^^^^ assignment requires that `'1` must outlive `'2`\n+\n+error: aborting due to previous error\n+"}, {"sha": "97c665347f6eca5e081f4a7347c034b706f242ba", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-both-are-structs-3.nll.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-3.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-3.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-3.nll.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -0,0 +1,13 @@\n+error: lifetime may not live long enough\n+  --> $DIR/ex3-both-anon-regions-both-are-structs-3.rs:7:5\n+   |\n+LL | fn foo(mut x: Ref) {\n+   |        -----\n+   |        |\n+   |        has type `Ref<'_, '1>`\n+   |        has type `Ref<'2, '_>`\n+LL |     x.a = x.b;\n+   |     ^^^^^^^^^ assignment requires that `'1` must outlive `'2`\n+\n+error: aborting due to previous error\n+"}, {"sha": "a39bb165806f2b2f7600420d05b3d235c82b0307", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-both-are-structs-earlybound-regions.nll.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-earlybound-regions.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-earlybound-regions.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-earlybound-regions.nll.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -0,0 +1,13 @@\n+error: lifetime may not live long enough\n+  --> $DIR/ex3-both-anon-regions-both-are-structs-earlybound-regions.rs:9:5\n+   |\n+LL | fn foo<'a, 'b>(mut x: Vec<Ref<'a>>, y: Ref<'b>)\n+   |        --  -- lifetime `'b` defined here\n+   |        |\n+   |        lifetime `'a` defined here\n+...\n+LL |     x.push(y);\n+   |     ^^^^^^^^^ argument requires that `'b` must outlive `'a`\n+\n+error: aborting due to previous error\n+"}, {"sha": "48ce5301adef3ceaaf5a7231cbb24459b9ac543c", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-both-are-structs-latebound-regions.nll.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-latebound-regions.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-latebound-regions.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-latebound-regions.nll.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -0,0 +1,12 @@\n+error: lifetime may not live long enough\n+  --> $DIR/ex3-both-anon-regions-both-are-structs-latebound-regions.rs:6:5\n+   |\n+LL | fn foo<'a, 'b>(mut x: Vec<Ref<'a>>, y: Ref<'b>) {\n+   |        --  -- lifetime `'b` defined here\n+   |        |\n+   |        lifetime `'a` defined here\n+LL |     x.push(y);\n+   |     ^^^^^^^^^ argument requires that `'b` must outlive `'a`\n+\n+error: aborting due to previous error\n+"}, {"sha": "f9c33c2480693b5cd7f4363ee70c279b9dc0e548", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-both-are-structs.nll.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs.nll.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -0,0 +1,12 @@\n+error: lifetime may not live long enough\n+  --> $DIR/ex3-both-anon-regions-both-are-structs.rs:6:5\n+   |\n+LL | fn foo(mut x: Vec<Ref>, y: Ref) {\n+   |        -----            - has type `Ref<'1>`\n+   |        |\n+   |        has type `std::vec::Vec<Ref<'2>>`\n+LL |     x.push(y);\n+   |     ^^^^^^^^^ argument requires that `'1` must outlive `'2`\n+\n+error: aborting due to previous error\n+"}, {"sha": "0996068398009c3abc995f6cd5d1edab666e64f6", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-latebound-regions.nll.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-latebound-regions.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-latebound-regions.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-latebound-regions.nll.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -0,0 +1,12 @@\n+error: lifetime may not live long enough\n+  --> $DIR/ex3-both-anon-regions-latebound-regions.rs:2:5\n+   |\n+LL | fn foo<'a,'b>(x: &mut Vec<&'a u8>, y: &'b u8) {\n+   |        -- -- lifetime `'b` defined here\n+   |        |\n+   |        lifetime `'a` defined here\n+LL |     x.push(y);\n+   |     ^^^^^^^^^ argument requires that `'b` must outlive `'a`\n+\n+error: aborting due to previous error\n+"}, {"sha": "5751c3194894e228583bcfed231c11d52877ddf3", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-one-is-struct-2.nll.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-2.nll.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -0,0 +1,21 @@\n+error: lifetime may not live long enough\n+  --> $DIR/ex3-both-anon-regions-one-is-struct-2.rs:4:5\n+   |\n+LL | fn foo(mut x: Ref, y: &u32) {\n+   |        -----          - let's call the lifetime of this reference `'2`\n+   |        |\n+   |        has type `Ref<'_, '1>`\n+LL |     y = x.b;\n+   |     ^^^^^^^ assignment requires that `'1` must outlive `'2`\n+\n+error[E0384]: cannot assign to immutable argument `y`\n+  --> $DIR/ex3-both-anon-regions-one-is-struct-2.rs:4:5\n+   |\n+LL | fn foo(mut x: Ref, y: &u32) {\n+   |                    - help: make this binding mutable: `mut y`\n+LL |     y = x.b;\n+   |     ^^^^^^^ cannot assign to immutable argument\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0384`."}, {"sha": "79e7e8e157d9510f375d001d525faea8b8f4e223", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-one-is-struct-3.nll.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-3.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-3.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-3.nll.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -0,0 +1,12 @@\n+error: lifetime may not live long enough\n+  --> $DIR/ex3-both-anon-regions-one-is-struct-3.rs:4:5\n+   |\n+LL | fn foo(mut y: Ref, x: &u32) {\n+   |        -----          - let's call the lifetime of this reference `'1`\n+   |        |\n+   |        has type `Ref<'_, '2>`\n+LL |     y.b = x;\n+   |     ^^^^^^^ assignment requires that `'1` must outlive `'2`\n+\n+error: aborting due to previous error\n+"}, {"sha": "53615fd1aba696264ceb114d1a300947bbaeb56b", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-one-is-struct-4.nll.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-4.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-4.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-4.nll.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -0,0 +1,12 @@\n+error: lifetime may not live long enough\n+  --> $DIR/ex3-both-anon-regions-one-is-struct-4.rs:4:5\n+   |\n+LL | fn foo(mut y: Ref, x: &u32) {\n+   |        -----          - let's call the lifetime of this reference `'1`\n+   |        |\n+   |        has type `Ref<'_, '2>`\n+LL |     y.b = x;\n+   |     ^^^^^^^ assignment requires that `'1` must outlive `'2`\n+\n+error: aborting due to previous error\n+"}, {"sha": "6ff44116737567f42649066c02208bc5cd2f5d17", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-one-is-struct.nll.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct.nll.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -0,0 +1,12 @@\n+error: lifetime may not live long enough\n+  --> $DIR/ex3-both-anon-regions-one-is-struct.rs:7:5\n+   |\n+LL | fn foo(mut x: Ref, y: &u32) {\n+   |        -----          - let's call the lifetime of this reference `'1`\n+   |        |\n+   |        has type `Ref<'_, '2>`\n+LL |     x.b = y;\n+   |     ^^^^^^^ assignment requires that `'1` must outlive `'2`\n+\n+error: aborting due to previous error\n+"}, {"sha": "1c258ad98ba108584b2f659a9f7f6a04af2203a7", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-return-type-is-anon.nll.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-return-type-is-anon.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-return-type-is-anon.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-return-type-is-anon.nll.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -0,0 +1,12 @@\n+error: lifetime may not live long enough\n+  --> $DIR/ex3-both-anon-regions-return-type-is-anon.rs:7:5\n+   |\n+LL |   fn foo<'a>(&self, x: &i32) -> &i32 {\n+   |              -         - let's call the lifetime of this reference `'1`\n+   |              |\n+   |              let's call the lifetime of this reference `'2`\n+LL |     x\n+   |     ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+\n+error: aborting due to previous error\n+"}, {"sha": "ffe39fdd8c9f5545af1d583a1fc046e2df3c4a4d", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-self-is-anon.nll.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-self-is-anon.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-self-is-anon.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-self-is-anon.nll.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -0,0 +1,12 @@\n+error: lifetime may not live long enough\n+  --> $DIR/ex3-both-anon-regions-self-is-anon.rs:7:19\n+   |\n+LL |     fn foo<'a>(&self, x: &Foo) -> &Foo {\n+   |                -         - let's call the lifetime of this reference `'1`\n+   |                |\n+   |                let's call the lifetime of this reference `'2`\n+LL |         if true { x } else { self }\n+   |                   ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+\n+error: aborting due to previous error\n+"}, {"sha": "33be98c64910d1efe6ad8d0a037be3ae0ae82f81", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-using-fn-items.nll.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-using-fn-items.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-using-fn-items.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-using-fn-items.nll.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -0,0 +1,21 @@\n+error[E0596]: cannot borrow `y` as mutable, as it is not declared as mutable\n+  --> $DIR/ex3-both-anon-regions-using-fn-items.rs:2:3\n+   |\n+LL | fn foo(x:fn(&u8, &u8), y: Vec<&u8>, z: &u8) {\n+   |                        - help: consider changing this to be mutable: `mut y`\n+LL |   y.push(z);\n+   |   ^ cannot borrow as mutable\n+\n+error: lifetime may not live long enough\n+  --> $DIR/ex3-both-anon-regions-using-fn-items.rs:2:3\n+   |\n+LL | fn foo(x:fn(&u8, &u8), y: Vec<&u8>, z: &u8) {\n+   |                               -        - let's call the lifetime of this reference `'1`\n+   |                               |\n+   |                               let's call the lifetime of this reference `'2`\n+LL |   y.push(z);\n+   |   ^^^^^^^^^ argument requires that `'1` must outlive `'2`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0596`."}, {"sha": "f3502674849ef474447f01ed5fc0105974230bdb", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-using-impl-items.nll.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-using-impl-items.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-using-impl-items.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-using-impl-items.nll.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -0,0 +1,12 @@\n+error: lifetime may not live long enough\n+  --> $DIR/ex3-both-anon-regions-using-impl-items.rs:6:9\n+   |\n+LL |     fn foo(x: &mut Vec<&u8>, y: &u8) {\n+   |                        -        - let's call the lifetime of this reference `'1`\n+   |                        |\n+   |                        let's call the lifetime of this reference `'2`\n+LL |         x.push(y);\n+   |         ^^^^^^^^^ argument requires that `'1` must outlive `'2`\n+\n+error: aborting due to previous error\n+"}, {"sha": "c4e7ff90069db0b8a180df1ac2a907c44c92a768", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-using-trait-objects.nll.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-using-trait-objects.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-using-trait-objects.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-using-trait-objects.nll.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -0,0 +1,21 @@\n+error[E0596]: cannot borrow `y` as mutable, as it is not declared as mutable\n+  --> $DIR/ex3-both-anon-regions-using-trait-objects.rs:2:3\n+   |\n+LL | fn foo(x:Box<Fn(&u8, &u8)> , y: Vec<&u8>, z: &u8) {\n+   |                              - help: consider changing this to be mutable: `mut y`\n+LL |   y.push(z);\n+   |   ^ cannot borrow as mutable\n+\n+error: lifetime may not live long enough\n+  --> $DIR/ex3-both-anon-regions-using-trait-objects.rs:2:3\n+   |\n+LL | fn foo(x:Box<Fn(&u8, &u8)> , y: Vec<&u8>, z: &u8) {\n+   |                                     -        - let's call the lifetime of this reference `'1`\n+   |                                     |\n+   |                                     let's call the lifetime of this reference `'2`\n+LL |   y.push(z);\n+   |   ^^^^^^^^^ argument requires that `'1` must outlive `'2`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0596`."}, {"sha": "6989acfa1963bce2c239ff5c274ac2d0ecaef0fb", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions.nll.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions.nll.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -0,0 +1,12 @@\n+error: lifetime may not live long enough\n+  --> $DIR/ex3-both-anon-regions.rs:2:5\n+   |\n+LL | fn foo(x: &mut Vec<&u8>, y: &u8) {\n+   |                    -        - let's call the lifetime of this reference `'1`\n+   |                    |\n+   |                    let's call the lifetime of this reference `'2`\n+LL |     x.push(y);\n+   |     ^^^^^^^^^ argument requires that `'1` must outlive `'2`\n+\n+error: aborting due to previous error\n+"}, {"sha": "832688f5162b346d28b19dccb86d64cd92d09575", "filename": "src/test/ui/lub-if.nll.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Flub-if.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Flub-if.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flub-if.nll.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -0,0 +1,20 @@\n+error: lifetime may not live long enough\n+  --> $DIR/lub-if.rs:28:9\n+   |\n+LL | pub fn opt_str2<'a>(maybestr: &'a Option<String>) -> &'static str {\n+   |                 -- lifetime `'a` defined here\n+...\n+LL |         s\n+   |         ^ returning this value requires that `'a` must outlive `'static`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/lub-if.rs:35:9\n+   |\n+LL | pub fn opt_str3<'a>(maybestr: &'a Option<String>) -> &'static str {\n+   |                 -- lifetime `'a` defined here\n+...\n+LL |         s\n+   |         ^ returning this value requires that `'a` must outlive `'static`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "3a344a77d2c2d779935c478cf2e15d2dfe8fdb1b", "filename": "src/test/ui/lub-match.nll.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Flub-match.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Flub-match.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flub-match.nll.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -0,0 +1,20 @@\n+error: lifetime may not live long enough\n+  --> $DIR/lub-match.rs:30:13\n+   |\n+LL | pub fn opt_str2<'a>(maybestr: &'a Option<String>) -> &'static str {\n+   |                 -- lifetime `'a` defined here\n+...\n+LL |             s\n+   |             ^ returning this value requires that `'a` must outlive `'static`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/lub-match.rs:39:13\n+   |\n+LL | pub fn opt_str3<'a>(maybestr: &'a Option<String>) -> &'static str {\n+   |                 -- lifetime `'a` defined here\n+...\n+LL |             s\n+   |             ^ returning this value requires that `'a` must outlive `'static`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "505b8db6a333251e4dc7b258bb54ff19c16e49b9", "filename": "src/test/ui/match/match-ref-mut-invariance.nll.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fmatch%2Fmatch-ref-mut-invariance.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fmatch%2Fmatch-ref-mut-invariance.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-ref-mut-invariance.nll.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -0,0 +1,12 @@\n+error: lifetime may not live long enough\n+  --> $DIR/match-ref-mut-invariance.rs:10:9\n+   |\n+LL | impl<'b> S<'b> {\n+   |      -- lifetime `'b` defined here\n+LL |     fn bar<'a>(&'a mut self) -> &'a mut &'a i32 {\n+   |            -- lifetime `'a` defined here\n+LL |         match self.0 { ref mut x => x }\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ returning this value requires that `'a` must outlive `'b`\n+\n+error: aborting due to previous error\n+"}, {"sha": "ab5f43d022281ee42c051c05765e9f70436113f3", "filename": "src/test/ui/match/match-ref-mut-let-invariance.nll.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fmatch%2Fmatch-ref-mut-let-invariance.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fmatch%2Fmatch-ref-mut-let-invariance.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-ref-mut-let-invariance.nll.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -0,0 +1,13 @@\n+error: lifetime may not live long enough\n+  --> $DIR/match-ref-mut-let-invariance.rs:11:9\n+   |\n+LL | impl<'b> S<'b> {\n+   |      -- lifetime `'b` defined here\n+LL |     fn bar<'a>(&'a mut self) -> &'a mut &'a i32 {\n+   |            -- lifetime `'a` defined here\n+LL |         let ref mut x = self.0;\n+LL |         x\n+   |         ^ returning this value requires that `'a` must outlive `'b`\n+\n+error: aborting due to previous error\n+"}, {"sha": "91d41e9b5794e844451ae977e34acdd295b82d50", "filename": "src/test/ui/mir-dataflow/def-inits-1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fmir-dataflow%2Fdef-inits-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fmir-dataflow%2Fdef-inits-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir-dataflow%2Fdef-inits-1.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,6 +1,5 @@\n // General test of maybe_uninits state computed by MIR dataflow.\n \n-#![feature(nll)]\n #![feature(core_intrinsics, rustc_attrs)]\n \n use std::intrinsics::rustc_peek;"}, {"sha": "48d8450489488823a0b51ac5a30cac8b3edd5591", "filename": "src/test/ui/mir-dataflow/def-inits-1.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fmir-dataflow%2Fdef-inits-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fmir-dataflow%2Fdef-inits-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir-dataflow%2Fdef-inits-1.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,23 +1,23 @@\n error: rustc_peek: bit not set\n-  --> $DIR/def-inits-1.rs:15:14\n+  --> $DIR/def-inits-1.rs:14:14\n    |\n LL |     unsafe { rustc_peek(&ret); }\n    |              ^^^^^^^^^^^^^^^^\n \n error: rustc_peek: bit not set\n-  --> $DIR/def-inits-1.rs:31:14\n+  --> $DIR/def-inits-1.rs:30:14\n    |\n LL |     unsafe { rustc_peek(&z); }\n    |              ^^^^^^^^^^^^^^\n \n error: rustc_peek: bit not set\n-  --> $DIR/def-inits-1.rs:34:14\n+  --> $DIR/def-inits-1.rs:33:14\n    |\n LL |     unsafe { rustc_peek(&y); }\n    |              ^^^^^^^^^^^^^^\n \n error: rustc_peek: bit not set\n-  --> $DIR/def-inits-1.rs:42:14\n+  --> $DIR/def-inits-1.rs:41:14\n    |\n LL |     unsafe { rustc_peek(&x); }\n    |              ^^^^^^^^^^^^^^"}, {"sha": "4a4786a2a73783fd223564f9e418492f2def71a6", "filename": "src/test/ui/mir-dataflow/inits-1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fmir-dataflow%2Finits-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fmir-dataflow%2Finits-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir-dataflow%2Finits-1.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,6 +1,5 @@\n // General test of maybe_inits state computed by MIR dataflow.\n \n-#![feature(nll)]\n #![feature(core_intrinsics, rustc_attrs)]\n \n use std::intrinsics::rustc_peek;"}, {"sha": "23d0679cb1ac180c30f583b78710fa609df69da2", "filename": "src/test/ui/mir-dataflow/inits-1.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fmir-dataflow%2Finits-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fmir-dataflow%2Finits-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir-dataflow%2Finits-1.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,17 +1,17 @@\n error: rustc_peek: bit not set\n-  --> $DIR/inits-1.rs:15:14\n+  --> $DIR/inits-1.rs:14:14\n    |\n LL |     unsafe { rustc_peek(&ret); }\n    |              ^^^^^^^^^^^^^^^^\n \n error: rustc_peek: bit not set\n-  --> $DIR/inits-1.rs:35:14\n+  --> $DIR/inits-1.rs:34:14\n    |\n LL |     unsafe { rustc_peek(&y); }\n    |              ^^^^^^^^^^^^^^\n \n error: rustc_peek: bit not set\n-  --> $DIR/inits-1.rs:43:14\n+  --> $DIR/inits-1.rs:42:14\n    |\n LL |     unsafe { rustc_peek(&x); }\n    |              ^^^^^^^^^^^^^^"}, {"sha": "66b3f458a5159f932f0e033fc358ee86d8b71995", "filename": "src/test/ui/mir-dataflow/uninits-1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fmir-dataflow%2Funinits-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fmir-dataflow%2Funinits-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir-dataflow%2Funinits-1.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,6 +1,5 @@\n // General test of maybe_uninits state computed by MIR dataflow.\n \n-#![feature(nll)]\n #![feature(core_intrinsics, rustc_attrs)]\n \n use std::intrinsics::rustc_peek;"}, {"sha": "5f6dbde212d0ae922896e41bfa70d97a94416cf2", "filename": "src/test/ui/mir-dataflow/uninits-1.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fmir-dataflow%2Funinits-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fmir-dataflow%2Funinits-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir-dataflow%2Funinits-1.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,29 +1,29 @@\n error: rustc_peek: bit not set\n-  --> $DIR/uninits-1.rs:19:14\n+  --> $DIR/uninits-1.rs:18:14\n    |\n LL |     unsafe { rustc_peek(&x) };\n    |              ^^^^^^^^^^^^^^\n \n error: rustc_peek: bit not set\n-  --> $DIR/uninits-1.rs:20:14\n+  --> $DIR/uninits-1.rs:19:14\n    |\n LL |     unsafe { rustc_peek(&y) };\n    |              ^^^^^^^^^^^^^^\n \n error: rustc_peek: bit not set\n-  --> $DIR/uninits-1.rs:21:14\n+  --> $DIR/uninits-1.rs:20:14\n    |\n LL |     unsafe { rustc_peek(&z) };\n    |              ^^^^^^^^^^^^^^\n \n error: rustc_peek: bit not set\n-  --> $DIR/uninits-1.rs:37:14\n+  --> $DIR/uninits-1.rs:36:14\n    |\n LL |     unsafe { rustc_peek(&x); }\n    |              ^^^^^^^^^^^^^^\n \n error: rustc_peek: bit not set\n-  --> $DIR/uninits-1.rs:45:14\n+  --> $DIR/uninits-1.rs:44:14\n    |\n LL |     unsafe { rustc_peek(&ret); }\n    |              ^^^^^^^^^^^^^^^^"}, {"sha": "2ccf1c7f9d6c67e5fd7a365c2e80e8ebab90a7a9", "filename": "src/test/ui/mir-dataflow/uninits-2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fmir-dataflow%2Funinits-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fmir-dataflow%2Funinits-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir-dataflow%2Funinits-2.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,6 +1,5 @@\n // General test of maybe_uninits state computed by MIR dataflow.\n \n-#![feature(nll)]\n #![feature(core_intrinsics, rustc_attrs)]\n \n use std::intrinsics::rustc_peek;"}, {"sha": "dcb61371994db2ee303da2e9d217064577652f1d", "filename": "src/test/ui/mir-dataflow/uninits-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fmir-dataflow%2Funinits-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fmir-dataflow%2Funinits-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir-dataflow%2Funinits-2.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,5 +1,5 @@\n error: rustc_peek: bit not set\n-  --> $DIR/uninits-2.rs:15:14\n+  --> $DIR/uninits-2.rs:14:14\n    |\n LL |     unsafe { rustc_peek(&x) };\n    |              ^^^^^^^^^^^^^^"}, {"sha": "42e28b9674b3097bc7cb340e2821ea3693d72b65", "filename": "src/test/ui/nll/borrow-use-issue-46875.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fborrow-use-issue-46875.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fborrow-use-issue-46875.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fborrow-use-issue-46875.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,5 +1,3 @@\n-#![feature(nll)]\n-\n // run-pass\n \n fn vec() {"}, {"sha": "7d3b00dfc716331612da2f98015de6795cf39957", "filename": "src/test/ui/nll/borrowck-thread-local-static-mut-borrow-outlives-fn.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fborrowck-thread-local-static-mut-borrow-outlives-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fborrowck-thread-local-static-mut-borrow-outlives-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fborrowck-thread-local-static-mut-borrow-outlives-fn.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -3,7 +3,6 @@\n //\n // FIXME(#54366) - We probably shouldn't allow #[thread_local] static mut to get a 'static lifetime.\n \n-#![feature(nll)]\n #![feature(thread_local)]\n \n #[thread_local]"}, {"sha": "d333356d964ce79e11411c81590c63410376f2ff", "filename": "src/test/ui/nll/borrowed-local-error.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fborrowed-local-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fborrowed-local-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fborrowed-local-error.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,5 +1,3 @@\n-#![feature(nll)]\n-\n fn gimme(x: &(u32,)) -> &u32 {\n     &x.0\n }"}, {"sha": "d629caa435319c355347a94dabec6360edff860e", "filename": "src/test/ui/nll/borrowed-local-error.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fborrowed-local-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fborrowed-local-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fborrowed-local-error.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,5 +1,5 @@\n error[E0597]: `v` does not live long enough\n-  --> $DIR/borrowed-local-error.rs:10:9\n+  --> $DIR/borrowed-local-error.rs:8:9\n    |\n LL |     let x = gimme({\n    |             ----- borrow later used by call"}, {"sha": "d4b05fb79316084ab9477e25da42e79c42e3fb6b", "filename": "src/test/ui/nll/borrowed-referent-issue-38899.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fborrowed-referent-issue-38899.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fborrowed-referent-issue-38899.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fborrowed-referent-issue-38899.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,7 +1,6 @@\n // Regression test for issue #38899\n \n #![feature(nll)]\n-#![allow(dead_code)]\n \n pub struct Block<'a> {\n     current: &'a u8,"}, {"sha": "38a6e27a0e5600ff199bfc8ea1bd9b199085ac85", "filename": "src/test/ui/nll/borrowed-referent-issue-38899.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fborrowed-referent-issue-38899.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fborrowed-referent-issue-38899.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fborrowed-referent-issue-38899.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,5 +1,5 @@\n error[E0502]: cannot borrow `*block.current` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowed-referent-issue-38899.rs:14:21\n+  --> $DIR/borrowed-referent-issue-38899.rs:13:21\n    |\n LL |     let x = &mut block;\n    |             ---------- mutable borrow occurs here"}, {"sha": "37d0e670d350d1d7f9b47a5588307de541e32ce6", "filename": "src/test/ui/nll/borrowed-temporary-error.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fborrowed-temporary-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fborrowed-temporary-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fborrowed-temporary-error.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,5 +1,3 @@\n-#![feature(nll)]\n-\n fn gimme(x: &(u32,)) -> &u32 {\n     &x.0\n }"}, {"sha": "2c6bd92641f608c7e7947ef2d410de46deb4f6ce", "filename": "src/test/ui/nll/borrowed-temporary-error.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fborrowed-temporary-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fborrowed-temporary-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fborrowed-temporary-error.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,5 +1,5 @@\n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/borrowed-temporary-error.rs:10:10\n+  --> $DIR/borrowed-temporary-error.rs:8:10\n    |\n LL |         &(v,)\n    |          ^^^^ creates a temporary which is freed while still in use"}, {"sha": "3f9b2f2924c2cf3d4c8a9c1bef71f0ccee5609f6", "filename": "src/test/ui/nll/borrowed-universal-error-2.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fborrowed-universal-error-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fborrowed-universal-error-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fborrowed-universal-error-2.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,6 +1,3 @@\n-#![feature(nll)]\n-#![allow(warnings)]\n-\n fn foo<'a>(x: &'a (u32,)) -> &'a u32 {\n     let v = 22;\n     &v"}, {"sha": "7213ed3bafb376062f20ade07dae380fefbcd88e", "filename": "src/test/ui/nll/borrowed-universal-error-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fborrowed-universal-error-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fborrowed-universal-error-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fborrowed-universal-error-2.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,5 +1,5 @@\n error[E0515]: cannot return reference to local variable `v`\n-  --> $DIR/borrowed-universal-error-2.rs:6:5\n+  --> $DIR/borrowed-universal-error-2.rs:3:5\n    |\n LL |     &v\n    |     ^^ returns a reference to data owned by the current function"}, {"sha": "fc9ffd47061b4556ecd418eec42dd103c64f5764", "filename": "src/test/ui/nll/borrowed-universal-error.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fborrowed-universal-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fborrowed-universal-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fborrowed-universal-error.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,6 +1,3 @@\n-#![feature(nll)]\n-#![allow(warnings)]\n-\n fn gimme(x: &(u32,)) -> &u32 {\n     &x.0\n }"}, {"sha": "88a2d8fcf8cc0eafe6c9393de9c303bbf653e973", "filename": "src/test/ui/nll/borrowed-universal-error.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fborrowed-universal-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fborrowed-universal-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fborrowed-universal-error.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,5 +1,5 @@\n error[E0515]: cannot return value referencing temporary value\n-  --> $DIR/borrowed-universal-error.rs:10:5\n+  --> $DIR/borrowed-universal-error.rs:7:5\n    |\n LL |     gimme(&(v,))\n    |     ^^^^^^^----^"}, {"sha": "9d2624a9d6fa628b2710da6ec316f9a31385e578", "filename": "src/test/ui/nll/capture-mut-ref.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fcapture-mut-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fcapture-mut-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fcapture-mut-ref.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,7 +1,6 @@\n // Check that capturing a mutable reference by move and assigning to its\n // referent doesn't make the unused mut lint think that it is mutable.\n \n-#![feature(nll)]\n #![deny(unused_mut)]\n \n fn mutable_upvar() {"}, {"sha": "883b2d05a7f51b75f48fd8f3c122a072a611a046", "filename": "src/test/ui/nll/capture-mut-ref.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fcapture-mut-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fcapture-mut-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fcapture-mut-ref.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,13 +1,13 @@\n error: variable does not need to be mutable\n-  --> $DIR/capture-mut-ref.rs:8:9\n+  --> $DIR/capture-mut-ref.rs:7:9\n    |\n LL |     let mut x = &mut 0;\n    |         ----^\n    |         |\n    |         help: remove this `mut`\n    |\n note: lint level defined here\n-  --> $DIR/capture-mut-ref.rs:5:9\n+  --> $DIR/capture-mut-ref.rs:4:9\n    |\n LL | #![deny(unused_mut)]\n    |         ^^^^^^^^^^"}, {"sha": "db6ac7d66ccc48363c8077f8802c4879a93bb6f6", "filename": "src/test/ui/nll/capture-ref-in-struct.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fcapture-ref-in-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fcapture-ref-in-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fcapture-ref-in-struct.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,9 +1,6 @@\n // Test that a structure which tries to store a pointer to `y` into\n // `p` (indirectly) fails to compile.\n \n-#![feature(rustc_attrs)]\n-#![feature(nll)]\n-\n struct SomeStruct<'a, 'b: 'a> {\n     p: &'a mut &'b i32,\n     y: &'b i32,"}, {"sha": "521e543bd269310b22917e285efd0096b00d9a85", "filename": "src/test/ui/nll/capture-ref-in-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fcapture-ref-in-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fcapture-ref-in-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fcapture-ref-in-struct.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,5 +1,5 @@\n error[E0597]: `y` does not live long enough\n-  --> $DIR/capture-ref-in-struct.rs:21:16\n+  --> $DIR/capture-ref-in-struct.rs:18:16\n    |\n LL |             y: &y,\n    |                ^^ borrowed value does not live long enough"}, {"sha": "2a59e80b25cd94903dd21fb3e1ce26f7c80a71a8", "filename": "src/test/ui/nll/closure-access-spans.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fclosure-access-spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fclosure-access-spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-access-spans.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,7 +1,5 @@\n // check that accesses due to a closure capture give a special note\n \n-#![feature(nll)]\n-\n fn closure_imm_capture_conflict(mut x: i32) {\n     let r = &mut x;\n     || x; //~ ERROR"}, {"sha": "4a8086905b7df297696c96cf66c8b7dc04117952", "filename": "src/test/ui/nll/closure-access-spans.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fclosure-access-spans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fclosure-access-spans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-access-spans.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,5 +1,5 @@\n error[E0502]: cannot borrow `x` as immutable because it is also borrowed as mutable\n-  --> $DIR/closure-access-spans.rs:7:5\n+  --> $DIR/closure-access-spans.rs:5:5\n    |\n LL |     let r = &mut x;\n    |             ------ mutable borrow occurs here\n@@ -11,7 +11,7 @@ LL |     r.use_mut();\n    |     - mutable borrow later used here\n \n error[E0499]: cannot borrow `x` as mutable more than once at a time\n-  --> $DIR/closure-access-spans.rs:13:5\n+  --> $DIR/closure-access-spans.rs:11:5\n    |\n LL |     let r = &mut x;\n    |             ------ first mutable borrow occurs here\n@@ -23,7 +23,7 @@ LL |     r.use_mut();\n    |     - first borrow later used here\n \n error[E0500]: closure requires unique access to `x` but it is already borrowed\n-  --> $DIR/closure-access-spans.rs:19:5\n+  --> $DIR/closure-access-spans.rs:17:5\n    |\n LL |     let r = &mut x;\n    |             ------ borrow occurs here\n@@ -35,7 +35,7 @@ LL |     r.use_mut();\n    |     - first borrow later used here\n \n error[E0503]: cannot use `x` because it was mutably borrowed\n-  --> $DIR/closure-access-spans.rs:25:13\n+  --> $DIR/closure-access-spans.rs:23:13\n    |\n LL |     let r = &mut x;\n    |             ------ borrow of `x` occurs here\n@@ -45,7 +45,7 @@ LL |     r.use_ref();\n    |     - borrow later used here\n \n error[E0505]: cannot move out of `x` because it is borrowed\n-  --> $DIR/closure-access-spans.rs:31:5\n+  --> $DIR/closure-access-spans.rs:29:5\n    |\n LL |     let r = &x;\n    |             -- borrow of `x` occurs here\n@@ -57,7 +57,7 @@ LL |     r.use_ref();\n    |     - borrow later used here\n \n error[E0382]: borrow of moved value: `x`\n-  --> $DIR/closure-access-spans.rs:37:5\n+  --> $DIR/closure-access-spans.rs:35:5\n    |\n LL | fn closure_imm_capture_moved(mut x: String) {\n    |                              ----- move occurs because `x` has type `std::string::String`, which does not implement the `Copy` trait\n@@ -69,7 +69,7 @@ LL |     || x.len();\n    |     value borrowed here after move\n \n error[E0382]: borrow of moved value: `x`\n-  --> $DIR/closure-access-spans.rs:42:5\n+  --> $DIR/closure-access-spans.rs:40:5\n    |\n LL | fn closure_mut_capture_moved(mut x: String) {\n    |                              ----- move occurs because `x` has type `std::string::String`, which does not implement the `Copy` trait\n@@ -81,7 +81,7 @@ LL |     || x = String::new();\n    |     value borrowed here after move\n \n error[E0382]: borrow of moved value: `x`\n-  --> $DIR/closure-access-spans.rs:47:5\n+  --> $DIR/closure-access-spans.rs:45:5\n    |\n LL | fn closure_unique_capture_moved(x: &mut String) {\n    |                                 - move occurs because `x` has type `&mut std::string::String`, which does not implement the `Copy` trait\n@@ -93,7 +93,7 @@ LL |     || *x = String::new();\n    |     value borrowed here after move\n \n error[E0382]: use of moved value: `x`\n-  --> $DIR/closure-access-spans.rs:52:5\n+  --> $DIR/closure-access-spans.rs:50:5\n    |\n LL | fn closure_move_capture_moved(x: &mut String) {\n    |                               - move occurs because `x` has type `&mut std::string::String`, which does not implement the `Copy` trait"}, {"sha": "b38f7900e8e5e89c7959ea6f85caedf40c77b9de", "filename": "src/test/ui/nll/closure-borrow-spans.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fclosure-borrow-spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fclosure-borrow-spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-borrow-spans.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,7 +1,5 @@\n // check that existing borrows due to a closure capture give a special note\n \n-#![feature(nll)]\n-\n fn move_while_borrowed(x: String) {\n     let f = || x.len();\n     let y = x; //~ ERROR"}, {"sha": "a3bcbbab3ec691214aaf7f9e946362a9b6683d8a", "filename": "src/test/ui/nll/closure-borrow-spans.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fclosure-borrow-spans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fclosure-borrow-spans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-borrow-spans.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,5 +1,5 @@\n error[E0505]: cannot move out of `x` because it is borrowed\n-  --> $DIR/closure-borrow-spans.rs:7:13\n+  --> $DIR/closure-borrow-spans.rs:5:13\n    |\n LL |     let f = || x.len();\n    |             -- - borrow occurs due to use in closure\n@@ -11,7 +11,7 @@ LL |     f.use_ref();\n    |     - borrow later used here\n \n error[E0502]: cannot borrow `x` as mutable because it is also borrowed as immutable\n-  --> $DIR/closure-borrow-spans.rs:13:13\n+  --> $DIR/closure-borrow-spans.rs:11:13\n    |\n LL |     let f = || x;\n    |             -- - first borrow occurs due to use of `x` in closure\n@@ -23,7 +23,7 @@ LL |     f.use_ref();\n    |     - immutable borrow later used here\n \n error[E0597]: `x` does not live long enough\n-  --> $DIR/closure-borrow-spans.rs:21:16\n+  --> $DIR/closure-borrow-spans.rs:19:16\n    |\n LL |         f = || x;\n    |             -- ^ borrowed value does not live long enough\n@@ -35,7 +35,7 @@ LL |     f.use_ref();\n    |     - borrow later used here\n \n error[E0506]: cannot assign to `x` because it is borrowed\n-  --> $DIR/closure-borrow-spans.rs:28:5\n+  --> $DIR/closure-borrow-spans.rs:26:5\n    |\n LL |     let f = || x;\n    |             -- - borrow occurs due to use in closure\n@@ -47,7 +47,7 @@ LL |     f.use_ref();\n    |     - borrow later used here\n \n error[E0503]: cannot use `x` because it was mutably borrowed\n-  --> $DIR/closure-borrow-spans.rs:34:13\n+  --> $DIR/closure-borrow-spans.rs:32:13\n    |\n LL |     let f = || x = 0;\n    |             -- - borrow occurs due to use of `x` in closure\n@@ -59,7 +59,7 @@ LL |     f.use_ref();\n    |     - borrow later used here\n \n error[E0502]: cannot borrow `x` as immutable because it is also borrowed as mutable\n-  --> $DIR/closure-borrow-spans.rs:40:13\n+  --> $DIR/closure-borrow-spans.rs:38:13\n    |\n LL |     let f = || x = 0;\n    |             -- - first borrow occurs due to use of `x` in closure\n@@ -71,7 +71,7 @@ LL |     f.use_ref();\n    |     - mutable borrow later used here\n \n error[E0499]: cannot borrow `x` as mutable more than once at a time\n-  --> $DIR/closure-borrow-spans.rs:46:13\n+  --> $DIR/closure-borrow-spans.rs:44:13\n    |\n LL |     let f = || x = 0;\n    |             -- - first borrow occurs due to use of `x` in closure\n@@ -83,7 +83,7 @@ LL |     f.use_ref();\n    |     - first borrow later used here\n \n error[E0597]: `x` does not live long enough\n-  --> $DIR/closure-borrow-spans.rs:54:16\n+  --> $DIR/closure-borrow-spans.rs:52:16\n    |\n LL |         f = || x = 0;\n    |             -- ^ borrowed value does not live long enough\n@@ -95,7 +95,7 @@ LL |     f.use_ref();\n    |     - borrow later used here\n \n error[E0506]: cannot assign to `x` because it is borrowed\n-  --> $DIR/closure-borrow-spans.rs:61:5\n+  --> $DIR/closure-borrow-spans.rs:59:5\n    |\n LL |     let f = || x = 0;\n    |             -- - borrow occurs due to use in closure\n@@ -107,7 +107,7 @@ LL |     f.use_ref();\n    |     - borrow later used here\n \n error[E0505]: cannot move out of `x` because it is borrowed\n-  --> $DIR/closure-borrow-spans.rs:67:13\n+  --> $DIR/closure-borrow-spans.rs:65:13\n    |\n LL |     let f = || *x = 0;\n    |             --  - borrow occurs due to use in closure\n@@ -119,7 +119,7 @@ LL |     f.use_ref();\n    |     - borrow later used here\n \n error[E0501]: cannot borrow `x` as immutable because previous closure requires unique access\n-  --> $DIR/closure-borrow-spans.rs:73:13\n+  --> $DIR/closure-borrow-spans.rs:71:13\n    |\n LL |     let f = || *x = 0;\n    |             --  - first borrow occurs due to use of `x` in closure\n@@ -131,7 +131,7 @@ LL |     f.use_ref();\n    |     - first borrow later used here\n \n error[E0501]: cannot borrow `x` as mutable because previous closure requires unique access\n-  --> $DIR/closure-borrow-spans.rs:79:13\n+  --> $DIR/closure-borrow-spans.rs:77:13\n    |\n LL |     let f = || *x = 0;\n    |             --  - first borrow occurs due to use of `x` in closure\n@@ -143,7 +143,7 @@ LL |     f.use_ref();\n    |     - first borrow later used here\n \n error[E0597]: `x` does not live long enough\n-  --> $DIR/closure-borrow-spans.rs:88:17\n+  --> $DIR/closure-borrow-spans.rs:86:17\n    |\n LL |         f = || *x = 0;\n    |             --  ^ borrowed value does not live long enough\n@@ -155,7 +155,7 @@ LL |     f.use_ref();\n    |     - borrow later used here\n \n error[E0506]: cannot assign to `*x` because it is borrowed\n-  --> $DIR/closure-borrow-spans.rs:95:5\n+  --> $DIR/closure-borrow-spans.rs:93:5\n    |\n LL |     let f = || *x = 0;\n    |             --  - borrow occurs due to use in closure"}, {"sha": "16d90b971745a70b86044dcdb7e4a6b0b6d84b65", "filename": "src/test/ui/nll/closure-captures.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fclosure-captures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fclosure-captures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-captures.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,8 +1,5 @@\n // Some cases with closures that might be problems\n \n-#![allow(unused)]\n-#![feature(nll)]\n-\n // Should have one error per assignment\n \n fn one_closure(x: i32) {"}, {"sha": "77f7d815eeb4c180122ccb2168ca6d81df092ce6", "filename": "src/test/ui/nll/closure-captures.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fclosure-captures.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fclosure-captures.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-captures.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,5 +1,5 @@\n error[E0594]: cannot assign to `x`, as it is not declared as mutable\n-  --> $DIR/closure-captures.rs:10:5\n+  --> $DIR/closure-captures.rs:7:5\n    |\n LL | fn one_closure(x: i32) {\n    |                - help: consider changing this to be mutable: `mut x`\n@@ -8,7 +8,7 @@ LL |     x = 1;\n    |     ^^^^^ cannot assign\n \n error[E0594]: cannot assign to `x`, as it is not declared as mutable\n-  --> $DIR/closure-captures.rs:12:5\n+  --> $DIR/closure-captures.rs:9:5\n    |\n LL | fn one_closure(x: i32) {\n    |                - help: consider changing this to be mutable: `mut x`\n@@ -17,7 +17,7 @@ LL |     x = 1;\n    |     ^^^^^ cannot assign\n \n error[E0594]: cannot assign to `x`, as it is not declared as mutable\n-  --> $DIR/closure-captures.rs:18:9\n+  --> $DIR/closure-captures.rs:15:9\n    |\n LL | fn two_closures(x: i32) {\n    |                 - help: consider changing this to be mutable: `mut x`\n@@ -26,7 +26,7 @@ LL |         x = 1;\n    |         ^^^^^ cannot assign\n \n error[E0594]: cannot assign to `x`, as it is not declared as mutable\n-  --> $DIR/closure-captures.rs:22:9\n+  --> $DIR/closure-captures.rs:19:9\n    |\n LL | fn two_closures(x: i32) {\n    |                 - help: consider changing this to be mutable: `mut x`\n@@ -35,15 +35,15 @@ LL |         x = 1;\n    |         ^^^^^ cannot assign\n \n error[E0596]: cannot borrow `x` as mutable, as it is a captured variable in a `Fn` closure\n-  --> $DIR/closure-captures.rs:30:9\n+  --> $DIR/closure-captures.rs:27:9\n    |\n LL |         ||\n    |         ^^ cannot borrow as mutable\n LL |          x = 1;}\n    |          - mutable borrow occurs due to use of `x` in closure\n    |\n help: consider changing this to accept closures that implement `FnMut`\n-  --> $DIR/closure-captures.rs:29:12\n+  --> $DIR/closure-captures.rs:26:12\n    |\n LL |       fn_ref(|| {\n    |  ____________^\n@@ -52,15 +52,15 @@ LL | |          x = 1;}\n    | |________________^\n \n error[E0596]: cannot borrow `x` as mutable, as it is a captured variable in a `Fn` closure\n-  --> $DIR/closure-captures.rs:34:9\n+  --> $DIR/closure-captures.rs:31:9\n    |\n LL |         ||\n    |         ^^ cannot borrow as mutable\n LL |     x = 1;});\n    |     - mutable borrow occurs due to use of `x` in closure\n    |\n help: consider changing this to accept closures that implement `FnMut`\n-  --> $DIR/closure-captures.rs:33:12\n+  --> $DIR/closure-captures.rs:30:12\n    |\n LL |       fn_ref(move || {\n    |  ____________^\n@@ -69,7 +69,7 @@ LL | |     x = 1;});\n    | |___________^\n \n error[E0594]: cannot assign to `x`, as it is not declared as mutable\n-  --> $DIR/closure-captures.rs:42:10\n+  --> $DIR/closure-captures.rs:39:10\n    |\n LL | fn two_closures_ref(x: i32) {\n    |                     - help: consider changing this to be mutable: `mut x`\n@@ -78,15 +78,15 @@ LL |          x = 1;}\n    |          ^^^^^ cannot assign\n \n error[E0596]: cannot borrow `x` as mutable, as it is a captured variable in a `Fn` closure\n-  --> $DIR/closure-captures.rs:41:9\n+  --> $DIR/closure-captures.rs:38:9\n    |\n LL |         ||\n    |         ^^ cannot borrow as mutable\n LL |          x = 1;}\n    |          - mutable borrow occurs due to use of `x` in closure\n    |\n help: consider changing this to accept closures that implement `FnMut`\n-  --> $DIR/closure-captures.rs:40:12\n+  --> $DIR/closure-captures.rs:37:12\n    |\n LL |       fn_ref(|| {\n    |  ____________^\n@@ -95,7 +95,7 @@ LL | |          x = 1;}\n    | |________________^\n \n error[E0594]: cannot assign to `x`, as it is not declared as mutable\n-  --> $DIR/closure-captures.rs:46:5\n+  --> $DIR/closure-captures.rs:43:5\n    |\n LL | fn two_closures_ref(x: i32) {\n    |                     - help: consider changing this to be mutable: `mut x`\n@@ -104,15 +104,15 @@ LL |     x = 1;});\n    |     ^^^^^ cannot assign\n \n error[E0596]: cannot borrow `x` as mutable, as it is a captured variable in a `Fn` closure\n-  --> $DIR/closure-captures.rs:45:9\n+  --> $DIR/closure-captures.rs:42:9\n    |\n LL |         ||\n    |         ^^ cannot borrow as mutable\n LL |     x = 1;});\n    |     - mutable borrow occurs due to use of `x` in closure\n    |\n help: consider changing this to accept closures that implement `FnMut`\n-  --> $DIR/closure-captures.rs:44:12\n+  --> $DIR/closure-captures.rs:41:12\n    |\n LL |       fn_ref(move || {\n    |  ____________^\n@@ -121,15 +121,15 @@ LL | |     x = 1;});\n    | |___________^\n \n error[E0596]: cannot borrow `x` as mutable, as it is a captured variable in a `Fn` closure\n-  --> $DIR/closure-captures.rs:51:9\n+  --> $DIR/closure-captures.rs:48:9\n    |\n LL |         ||\n    |         ^^ cannot borrow as mutable\n LL |         *x = 1;});\n    |          - mutable borrow occurs due to use of `x` in closure\n    |\n help: consider changing this to accept closures that implement `FnMut`\n-  --> $DIR/closure-captures.rs:50:12\n+  --> $DIR/closure-captures.rs:47:12\n    |\n LL |       fn_ref(|| {\n    |  ____________^\n@@ -138,15 +138,15 @@ LL | |         *x = 1;});\n    | |________________^\n \n error[E0596]: cannot borrow `x` as mutable, as it is a captured variable in a `Fn` closure\n-  --> $DIR/closure-captures.rs:54:9\n+  --> $DIR/closure-captures.rs:51:9\n    |\n LL |         ||\n    |         ^^ cannot borrow as mutable\n LL |         *x = 1;});\n    |          - mutable borrow occurs due to use of `x` in closure\n    |\n help: consider changing this to accept closures that implement `FnMut`\n-  --> $DIR/closure-captures.rs:53:12\n+  --> $DIR/closure-captures.rs:50:12\n    |\n LL |       fn_ref(move || {\n    |  ____________^"}, {"sha": "bf2431870a942cd27f31421fa0ef5616ea783dac", "filename": "src/test/ui/nll/closure-move-spans.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fclosure-move-spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fclosure-move-spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-move-spans.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,7 +1,5 @@\n // check that moves due to a closure capture give a special note\n \n-#![feature(nll)]\n-\n fn move_after_move(x: String) {\n     || x;\n     let y = x; //~ ERROR"}, {"sha": "972dbc6a61d089d518bfc97791efd2ce2044a953", "filename": "src/test/ui/nll/closure-move-spans.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fclosure-move-spans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fclosure-move-spans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-move-spans.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,5 +1,5 @@\n error[E0382]: use of moved value: `x`\n-  --> $DIR/closure-move-spans.rs:7:13\n+  --> $DIR/closure-move-spans.rs:5:13\n    |\n LL | fn move_after_move(x: String) {\n    |                    - move occurs because `x` has type `std::string::String`, which does not implement the `Copy` trait\n@@ -11,7 +11,7 @@ LL |     let y = x;\n    |             ^ value used here after move\n \n error[E0382]: borrow of moved value: `x`\n-  --> $DIR/closure-move-spans.rs:12:13\n+  --> $DIR/closure-move-spans.rs:10:13\n    |\n LL | fn borrow_after_move(x: String) {\n    |                      - move occurs because `x` has type `std::string::String`, which does not implement the `Copy` trait\n@@ -23,7 +23,7 @@ LL |     let y = &x;\n    |             ^^ value borrowed here after move\n \n error[E0382]: borrow of moved value: `x`\n-  --> $DIR/closure-move-spans.rs:17:13\n+  --> $DIR/closure-move-spans.rs:15:13\n    |\n LL | fn borrow_mut_after_move(mut x: String) {\n    |                          ----- move occurs because `x` has type `std::string::String`, which does not implement the `Copy` trait"}, {"sha": "8ed6554877eaea039a9c22c7e334a1b519ce032d", "filename": "src/test/ui/nll/closure-requirements/issue-58127-mutliple-requirements.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fissue-58127-mutliple-requirements.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fissue-58127-mutliple-requirements.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fissue-58127-mutliple-requirements.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,7 +1,3 @@\n-// revisions: migrate nll\n-//[migrate]compile-flags: -Z borrowck=migrate\n-#![cfg_attr(nll, feature(nll))]\n-\n // compile-pass\n \n // Test that we propagate region relations from closures precisely when there is"}, {"sha": "a9d2a07715d49532a5ad4da67f3d673169555992", "filename": "src/test/ui/nll/closure-requirements/propagate-multiple-requirements.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-multiple-requirements.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-multiple-requirements.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-multiple-requirements.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,8 +1,6 @@\n // Test that we propagate *all* requirements to the caller, not just the first\n // one.\n \n-#![feature(nll)]\n-\n fn once<S, T, U, F: FnOnce(S, T) -> U>(f: F, s: S, t: T) -> U {\n     f(s, t)\n }"}, {"sha": "2fec9bc62d1c7ecc9ba8374943141d0c4cd65c2f", "filename": "src/test/ui/nll/closure-requirements/propagate-multiple-requirements.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-multiple-requirements.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-multiple-requirements.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-multiple-requirements.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,5 +1,5 @@\n error[E0597]: `local_arr` does not live long enough\n-  --> $DIR/propagate-multiple-requirements.rs:17:14\n+  --> $DIR/propagate-multiple-requirements.rs:15:14\n    |\n LL |     let mut out: &mut &'static [i32] = &mut (&[1] as _);\n    |                  ------------------- type annotation requires that `local_arr` is borrowed for `'static`"}, {"sha": "6768250dcbc0aa447a9aaa7b686b42c343e80c79", "filename": "src/test/ui/nll/closure-use-spans.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fclosure-use-spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fclosure-use-spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-use-spans.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,7 +1,5 @@\n // check that liveness due to a closure capture gives a special note\n \n-#![feature(nll)]\n-\n fn use_as_borrow_capture(mut x: i32) {\n     let y = &x;\n     x = 0; //~ ERROR"}, {"sha": "ec7e0f308557db1530cce191ae9a46bd8fe1af0e", "filename": "src/test/ui/nll/closure-use-spans.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fclosure-use-spans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fclosure-use-spans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-use-spans.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,5 +1,5 @@\n error[E0506]: cannot assign to `x` because it is borrowed\n-  --> $DIR/closure-use-spans.rs:7:5\n+  --> $DIR/closure-use-spans.rs:5:5\n    |\n LL |     let y = &x;\n    |             -- borrow of `x` occurs here\n@@ -9,7 +9,7 @@ LL |     || *y;\n    |         - borrow later captured here by closure\n \n error[E0506]: cannot assign to `x` because it is borrowed\n-  --> $DIR/closure-use-spans.rs:13:5\n+  --> $DIR/closure-use-spans.rs:11:5\n    |\n LL |     let y = &mut x;\n    |             ------ borrow of `x` occurs here\n@@ -19,7 +19,7 @@ LL |     || *y = 1;\n    |         - borrow later captured here by closure\n \n error[E0506]: cannot assign to `x` because it is borrowed\n-  --> $DIR/closure-use-spans.rs:19:5\n+  --> $DIR/closure-use-spans.rs:17:5\n    |\n LL |     let y = &x;\n    |             -- borrow of `x` occurs here"}, {"sha": "491c186ecb5a018b54fffd2704f93ead8c5109b9", "filename": "src/test/ui/nll/closures-in-loops.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fclosures-in-loops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fclosures-in-loops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosures-in-loops.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,8 +1,6 @@\n // Test messages where a closure capture conflicts with itself because it's in\n // a loop.\n \n-#![feature(nll)]\n-\n fn repreated_move(x: String) {\n     for i in 0..10 {\n         || x; //~ ERROR"}, {"sha": "7603f9650b54a3ab80a1996a46d5f803331c6bab", "filename": "src/test/ui/nll/closures-in-loops.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fclosures-in-loops.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fclosures-in-loops.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosures-in-loops.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,5 +1,5 @@\n error[E0382]: use of moved value: `x`\n-  --> $DIR/closures-in-loops.rs:8:9\n+  --> $DIR/closures-in-loops.rs:6:9\n    |\n LL | fn repreated_move(x: String) {\n    |                   - move occurs because `x` has type `std::string::String`, which does not implement the `Copy` trait\n@@ -10,15 +10,15 @@ LL |         || x;\n    |         value moved into closure here, in previous iteration of loop\n \n error[E0499]: cannot borrow `x` as mutable more than once at a time\n-  --> $DIR/closures-in-loops.rs:15:16\n+  --> $DIR/closures-in-loops.rs:13:16\n    |\n LL |         v.push(|| x = String::new());\n    |                ^^ - borrows occur due to use of `x` in closure\n    |                |\n    |                mutable borrow starts here in previous iteration of loop\n \n error[E0524]: two closures require unique access to `x` at the same time\n-  --> $DIR/closures-in-loops.rs:22:16\n+  --> $DIR/closures-in-loops.rs:20:16\n    |\n LL |         v.push(|| *x = String::new());\n    |                ^^  - borrows occur due to use of `x` in closure"}, {"sha": "dde0ef7a5bb832fa55c00d8880e155ae0870bb6c", "filename": "src/test/ui/nll/constant-thread-locals-issue-47053.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fconstant-thread-locals-issue-47053.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fconstant-thread-locals-issue-47053.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fconstant-thread-locals-issue-47053.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,6 +1,5 @@\n // Regression test for issue #47053\n \n-#![feature(nll)]\n #![feature(thread_local)]\n \n #[thread_local]"}, {"sha": "8afb42d66a61a511e511b1a7ba5cff29e87b3e10", "filename": "src/test/ui/nll/constant-thread-locals-issue-47053.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fconstant-thread-locals-issue-47053.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fconstant-thread-locals-issue-47053.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fconstant-thread-locals-issue-47053.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,5 +1,5 @@\n error[E0594]: cannot assign to immutable static item `FOO`\n-  --> $DIR/constant-thread-locals-issue-47053.rs:10:5\n+  --> $DIR/constant-thread-locals-issue-47053.rs:9:5\n    |\n LL |     FOO = 6;\n    |     ^^^^^^^ cannot assign"}, {"sha": "f7243294669a62134f356638e1165a45a9978885", "filename": "src/test/ui/nll/decl-macro-illegal-copy.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fdecl-macro-illegal-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fdecl-macro-illegal-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fdecl-macro-illegal-copy.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,6 +1,5 @@\n // Regression test for #46314\n \n-#![feature(nll)]\n #![feature(decl_macro)]\n \n struct NonCopy(String);"}, {"sha": "7948485bd6866d6c5db220769a0b2ea14530addc", "filename": "src/test/ui/nll/decl-macro-illegal-copy.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fdecl-macro-illegal-copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fdecl-macro-illegal-copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fdecl-macro-illegal-copy.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,5 +1,5 @@\n error[E0382]: use of moved value: `wrapper.inner`\n-  --> $DIR/decl-macro-illegal-copy.rs:22:9\n+  --> $DIR/decl-macro-illegal-copy.rs:21:9\n    |\n LL |     $wrapper.inner\n    |     -------------- value moved here"}, {"sha": "279123069877f370f2171ba1ba519d52591cac36", "filename": "src/test/ui/nll/get_default.nll.stderr", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fget_default.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fget_default.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fget_default.nll.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -0,0 +1,48 @@\n+error[E0502]: cannot borrow `*map` as mutable because it is also borrowed as immutable\n+  --> $DIR/get_default.rs:21:17\n+   |\n+LL | fn ok(map: &mut Map) -> &String {\n+   |            - let's call the lifetime of this reference `'1`\n+LL |     loop {\n+LL |         match map.get() {\n+   |               --- immutable borrow occurs here\n+LL |             Some(v) => {\n+LL |                 return v;\n+   |                        - returning this value requires that `*map` is borrowed for `'1`\n+...\n+LL |                 map.set(String::new()); // Ideally, this would not error.\n+   |                 ^^^ mutable borrow occurs here\n+\n+error[E0502]: cannot borrow `*map` as mutable because it is also borrowed as immutable\n+  --> $DIR/get_default.rs:32:17\n+   |\n+LL | fn err(map: &mut Map) -> &String {\n+   |             - let's call the lifetime of this reference `'1`\n+LL |     loop {\n+LL |         match map.get() {\n+   |               --- immutable borrow occurs here\n+LL |             Some(v) => {\n+LL |                 map.set(String::new()); // Both AST and MIR error here\n+   |                 ^^^ mutable borrow occurs here\n+LL |\n+LL |                 return v;\n+   |                        - returning this value requires that `*map` is borrowed for `'1`\n+\n+error[E0502]: cannot borrow `*map` as mutable because it is also borrowed as immutable\n+  --> $DIR/get_default.rs:37:17\n+   |\n+LL | fn err(map: &mut Map) -> &String {\n+   |             - let's call the lifetime of this reference `'1`\n+LL |     loop {\n+LL |         match map.get() {\n+   |               --- immutable borrow occurs here\n+...\n+LL |                 return v;\n+   |                        - returning this value requires that `*map` is borrowed for `'1`\n+...\n+LL |                 map.set(String::new()); // Ideally, just AST would error here\n+   |                 ^^^ mutable borrow occurs here\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0502`."}, {"sha": "e75362750645ceb1a3e2899ea6203a86dc4c216e", "filename": "src/test/ui/nll/issue-16223.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-16223.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-16223.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-16223.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -15,7 +15,6 @@\n \n // compile-pass\n \n-#![feature(nll)]\n #![feature(box_patterns)]\n \n struct Root {"}, {"sha": "1fe4fffa324a63617a82590c90e642187ba58606", "filename": "src/test/ui/nll/issue-21114-ebfull.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-21114-ebfull.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-21114-ebfull.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-21114-ebfull.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,6 +1,4 @@\n-// (this works, but only in NLL)\n // compile-pass\n-#![feature(nll)]\n \n use std::collections::HashMap;\n use std::sync::Mutex;"}, {"sha": "80a85293e5a5cc165a303ec438bf4f9808d8cf0b", "filename": "src/test/ui/nll/issue-21114-kixunil.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-21114-kixunil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-21114-kixunil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-21114-kixunil.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,6 +1,4 @@\n-// (this works, but only in NLL)\n // compile-pass\n-#![feature(nll)]\n \n fn from_stdin(min: u64) -> Vec<u64> {\n     use std::io::BufRead;"}, {"sha": "906ea32b9c42d62fe8191c9fd0da05df89faaf59", "filename": "src/test/ui/nll/issue-21232-partial-init-and-erroneous-use.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-21232-partial-init-and-erroneous-use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-21232-partial-init-and-erroneous-use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-21232-partial-init-and-erroneous-use.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -8,8 +8,6 @@\n // meant to compile and run successfully once rust-lang/rust#54987 is\n // implemented.\n \n-#![feature(nll)]\n-\n struct D {\n     x: u32,\n     s: S,"}, {"sha": "153d9bdf3215d01b70aa6901dea5aedadcfc19bf", "filename": "src/test/ui/nll/issue-21232-partial-init-and-erroneous-use.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-21232-partial-init-and-erroneous-use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-21232-partial-init-and-erroneous-use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-21232-partial-init-and-erroneous-use.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,17 +1,17 @@\n error[E0381]: assign of possibly uninitialized variable: `d`\n-  --> $DIR/issue-21232-partial-init-and-erroneous-use.rs:30:5\n+  --> $DIR/issue-21232-partial-init-and-erroneous-use.rs:28:5\n    |\n LL |     d.x = 10;\n    |     ^^^^^^^^ use of possibly uninitialized `d`\n \n error[E0381]: assign of possibly uninitialized variable: `d`\n-  --> $DIR/issue-21232-partial-init-and-erroneous-use.rs:36:5\n+  --> $DIR/issue-21232-partial-init-and-erroneous-use.rs:34:5\n    |\n LL |     d.x = 10;\n    |     ^^^^^^^^ use of possibly uninitialized `d`\n \n error[E0382]: assign of moved value: `d`\n-  --> $DIR/issue-21232-partial-init-and-erroneous-use.rs:43:5\n+  --> $DIR/issue-21232-partial-init-and-erroneous-use.rs:41:5\n    |\n LL |     let mut d = D { x: 0, s: S{ y: 0, z: 0 } };\n    |         ----- move occurs because `d` has type `D`, which does not implement the `Copy` trait\n@@ -21,19 +21,19 @@ LL |     d.x = 10;\n    |     ^^^^^^^^ value assigned here after move\n \n error[E0381]: assign to part of possibly uninitialized variable: `d`\n-  --> $DIR/issue-21232-partial-init-and-erroneous-use.rs:49:5\n+  --> $DIR/issue-21232-partial-init-and-erroneous-use.rs:47:5\n    |\n LL |     d.s.y = 20;\n    |     ^^^^^^^^^^ use of possibly uninitialized `d.s`\n \n error[E0381]: assign to part of possibly uninitialized variable: `d`\n-  --> $DIR/issue-21232-partial-init-and-erroneous-use.rs:55:5\n+  --> $DIR/issue-21232-partial-init-and-erroneous-use.rs:53:5\n    |\n LL |     d.s.y = 20;\n    |     ^^^^^^^^^^ use of possibly uninitialized `d.s`\n \n error[E0382]: assign to part of moved value: `d`\n-  --> $DIR/issue-21232-partial-init-and-erroneous-use.rs:62:5\n+  --> $DIR/issue-21232-partial-init-and-erroneous-use.rs:60:5\n    |\n LL |     let mut d = D { x: 0, s: S{ y: 0, z: 0} };\n    |         ----- move occurs because `d` has type `D`, which does not implement the `Copy` trait"}, {"sha": "6357c3ccef1f8d515b45d30a2ed42217e31c2da3", "filename": "src/test/ui/nll/issue-22323-temp-destruction.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-22323-temp-destruction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-22323-temp-destruction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-22323-temp-destruction.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -3,8 +3,6 @@\n \n // compile-pass\n \n-#![feature(nll)]\n-\n fn main() {\n     let _s = construct().borrow().consume_borrowed();\n }"}, {"sha": "27e519005f62b473c49081e7fd9bcd8886f6c036", "filename": "src/test/ui/nll/issue-30104.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-30104.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-30104.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-30104.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -2,8 +2,6 @@\n \n // compile-pass\n \n-#![feature(nll)]\n-\n use std::ops::{Deref, DerefMut};\n \n fn box_two_field(v: &mut Box<(i32, i32)>) {"}, {"sha": "7e0ffd6cf36449353da44eda8d716969035062dc", "filename": "src/test/ui/nll/issue-32382-index-assoc-type-with-lifetime.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-32382-index-assoc-type-with-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-32382-index-assoc-type-with-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-32382-index-assoc-type-with-lifetime.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,4 +1,3 @@\n-#![feature(nll)]\n // compile-pass\n \n // rust-lang/rust#32382: Borrow checker used to complain about"}, {"sha": "c50473511f1168799d583879347b0c57c62411a1", "filename": "src/test/ui/nll/issue-43058.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-43058.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-43058.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-43058.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,7 +1,5 @@\n // compile-pass\n \n-#![feature(nll)]\n-\n use std::borrow::Cow;\n \n #[derive(Clone, Debug)]"}, {"sha": "8c0c356e967219ac62ab7c41f096d7845ecc1662", "filename": "src/test/ui/nll/issue-46589.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-46589.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-46589.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-46589.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,5 +1,3 @@\n-#![feature(nll)]\n-\n struct Foo;\n \n impl Foo {"}, {"sha": "397909a4366100bb26c0243782091f04cb44522b", "filename": "src/test/ui/nll/issue-46589.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-46589.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-46589.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-46589.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,5 +1,5 @@\n error[E0499]: cannot borrow `**other` as mutable more than once at a time\n-  --> $DIR/issue-46589.rs:19:21\n+  --> $DIR/issue-46589.rs:17:21\n    |\n LL |         *other = match (*other).get_self() {\n    |                        -------- first mutable borrow occurs here"}, {"sha": "3f8e0f5ad3d7a8859b3030e2bf27689efe481da1", "filename": "src/test/ui/nll/issue-47022.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-47022.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-47022.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-47022.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,8 +1,5 @@\n // compile-pass\n \n-#![allow(warnings)]\n-#![feature(nll)]\n-\n struct LoadedObject {\n     bodies: Vec<Body>,\n     color: Color,"}, {"sha": "207af380e62ddd58406a2b6391ada8725c30a968", "filename": "src/test/ui/nll/issue-47388.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-47388.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-47388.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-47388.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,4 +1,3 @@\n-#![feature(nll)]\n struct FancyNum {\n     num: u8,\n }"}, {"sha": "d4064b3f50a341a9056c7509b6f1cb7190c38b4c", "filename": "src/test/ui/nll/issue-47388.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-47388.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-47388.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-47388.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,5 +1,5 @@\n error[E0594]: cannot assign to `fancy_ref.num` which is behind a `&` reference\n-  --> $DIR/issue-47388.rs:9:5\n+  --> $DIR/issue-47388.rs:8:5\n    |\n LL |     let fancy_ref = &(&mut fancy);\n    |                     ------------- help: consider changing this to be a mutable reference: `&mut (&mut fancy)`"}, {"sha": "72ee7f88650e1b757c48594df8428f9ff28ac1ac", "filename": "src/test/ui/nll/issue-47470.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-47470.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-47470.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-47470.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -2,8 +2,6 @@\n // causing region relations not to be enforced at all the places where\n // they have to be enforced.\n \n-#![feature(nll)]\n-\n struct Foo<'a>(&'a ());\n trait Bar {\n     type Assoc;"}, {"sha": "0b1247d60ec67ce9658c064e077482e667cf4b84", "filename": "src/test/ui/nll/issue-47470.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-47470.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-47470.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-47470.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,5 +1,5 @@\n error[E0515]: cannot return reference to local variable `local`\n-  --> $DIR/issue-47470.rs:17:9\n+  --> $DIR/issue-47470.rs:15:9\n    |\n LL |         &local\n    |         ^^^^^^ returns a reference to data owned by the current function"}, {"sha": "47426cdfa57ef7a2745d815b42a5c748084d9c4e", "filename": "src/test/ui/nll/issue-48070.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-48070.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-48070.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-48070.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,8 +1,6 @@\n // run-pass\n // revisions: lxl nll\n \n-#![cfg_attr(nll, feature(nll))]\n-\n struct Foo {\n     x: u32\n }"}, {"sha": "16e29ab2a8ad2f6823d3c8b9ad3a65702b8abdbe", "filename": "src/test/ui/nll/issue-48697.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-48697.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-48697.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-48697.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,7 +1,5 @@\n // Regression test for #48697\n \n-#![feature(nll)]\n-\n fn foo(x: &i32) -> &i32 {\n     let z = 4;\n     let f = &|y| y;"}, {"sha": "f0c29b72b4298c23b5a14726e0bdeaba17d36983", "filename": "src/test/ui/nll/issue-48697.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-48697.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-48697.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-48697.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,5 +1,5 @@\n error[E0515]: cannot return value referencing local variable `z`\n-  --> $DIR/issue-48697.rs:9:5\n+  --> $DIR/issue-48697.rs:7:5\n    |\n LL |     let k = f(&z);\n    |               -- `z` is borrowed here"}, {"sha": "ec992959a66ca7bb3975426e47bd30fdbd96631c", "filename": "src/test/ui/nll/issue-50716-1.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-50716-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-50716-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-50716-1.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -3,12 +3,8 @@\n // bounds derived from `Sized` requirements\u201d that checks that the fixed compiler\n // accepts this code fragment with both AST and MIR borrow checkers.\n //\n-// revisions: migrate nll\n-//\n // compile-pass\n \n-#![cfg_attr(nll, feature(nll))]\n-\n struct Qey<Q: ?Sized>(Q);\n \n fn main() {}"}, {"sha": "38dd1b5f6fe733a77111f4a1367eea83d27c6509", "filename": "src/test/ui/nll/issue-50716.nll.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-50716.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-50716.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-50716.nll.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -0,0 +1,11 @@\n+error: lifetime may not live long enough\n+  --> $DIR/issue-50716.rs:14:14\n+   |\n+LL | fn foo<'a, T: 'static>(s: Box<<&'a T as A>::X>)\n+   |        -- lifetime `'a` defined here\n+...\n+LL |     let _x = *s;\n+   |              ^^ proving this value is `Sized` requires that `'a` must outlive `'static`\n+\n+error: aborting due to previous error\n+"}, {"sha": "c2fc345fa2ba2e6e13ff41d509055b15fcc4613f", "filename": "src/test/ui/nll/issue-50716.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-50716.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-50716.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-50716.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -2,8 +2,6 @@\n // Regression test for the issue #50716: NLL ignores lifetimes bounds\n // derived from `Sized` requirements\n \n-#![feature(nll)]\n-\n trait A {\n     type X: ?Sized;\n }"}, {"sha": "b19e3a9dfb345604f9a107b444d2d4b10c3432d0", "filename": "src/test/ui/nll/issue-50716.stderr", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-50716.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-50716.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-50716.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,11 +1,18 @@\n-error: lifetime may not live long enough\n-  --> $DIR/issue-50716.rs:16:14\n+error[E0308]: mismatched types\n+  --> $DIR/issue-50716.rs:14:9\n    |\n-LL | fn foo<'a, T: 'static>(s: Box<<&'a T as A>::X>)\n-   |        -- lifetime `'a` defined here\n-...\n LL |     let _x = *s;\n-   |              ^^ proving this value is `Sized` requires that `'a` must outlive `'static`\n+   |         ^^ lifetime mismatch\n+   |\n+   = note: expected type `std::marker::Sized`\n+              found type `std::marker::Sized`\n+note: the lifetime 'a as defined on the function body at 9:8...\n+  --> $DIR/issue-50716.rs:9:8\n+   |\n+LL | fn foo<'a, T: 'static>(s: Box<<&'a T as A>::X>)\n+   |        ^^\n+   = note: ...does not necessarily outlive the static lifetime\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "747bfe3a8a575ae6bcabde2f48e1703afc357d8f", "filename": "src/test/ui/nll/issue-51191.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-51191.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-51191.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-51191.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,5 +1,3 @@\n-#![feature(nll)]\n-\n struct Struct;\n \n impl Struct {"}, {"sha": "e226de15dc2f0b156013a0be8c77c41e77187015", "filename": "src/test/ui/nll/issue-51191.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-51191.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-51191.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-51191.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,5 +1,5 @@\n warning: function cannot return without recursing\n-  --> $DIR/issue-51191.rs:6:5\n+  --> $DIR/issue-51191.rs:4:5\n    |\n LL |     fn bar(self: &mut Self) {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ cannot return without recursing\n@@ -11,7 +11,7 @@ LL |         (&mut self).bar();\n    = help: a `loop` may express intention better if this is on purpose\n \n error[E0596]: cannot borrow `self` as mutable, as it is not declared as mutable\n-  --> $DIR/issue-51191.rs:8:9\n+  --> $DIR/issue-51191.rs:6:9\n    |\n LL |         (&mut self).bar();\n    |         ^^^^^^^^^^^\n@@ -20,27 +20,27 @@ LL |         (&mut self).bar();\n    |         try removing `&mut` here\n \n error[E0596]: cannot borrow `self` as mutable, as it is not declared as mutable\n-  --> $DIR/issue-51191.rs:13:9\n+  --> $DIR/issue-51191.rs:11:9\n    |\n LL |     fn imm(self) {\n    |            ---- help: consider changing this to be mutable: `mut self`\n LL |         (&mut self).bar();\n    |         ^^^^^^^^^^^ cannot borrow as mutable\n \n error[E0596]: cannot borrow `self` as mutable, as it is not declared as mutable\n-  --> $DIR/issue-51191.rs:22:9\n+  --> $DIR/issue-51191.rs:20:9\n    |\n LL |         (&mut self).bar();\n    |         ^^^^^^^^^^^ cannot borrow as mutable\n \n error[E0596]: cannot borrow data in a `&` reference as mutable\n-  --> $DIR/issue-51191.rs:22:9\n+  --> $DIR/issue-51191.rs:20:9\n    |\n LL |         (&mut self).bar();\n    |         ^^^^^^^^^^^ cannot borrow as mutable\n \n error[E0596]: cannot borrow `self` as mutable, as it is not declared as mutable\n-  --> $DIR/issue-51191.rs:28:9\n+  --> $DIR/issue-51191.rs:26:9\n    |\n LL |         (&mut self).bar();\n    |         ^^^^^^^^^^^"}, {"sha": "743415d58afadb3b01e53473bdf25210cf1742c7", "filename": "src/test/ui/nll/issue-51244.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-51244.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-51244.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-51244.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,5 +1,3 @@\n-#![feature(nll)]\n-\n fn main() {\n     let ref my_ref @ _ = 0;\n     *my_ref = 0;"}, {"sha": "8a7e71e0326a09540044b5757c38e898eae1cb3a", "filename": "src/test/ui/nll/issue-51244.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-51244.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-51244.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-51244.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,5 +1,5 @@\n error[E0594]: cannot assign to `*my_ref` which is behind a `&` reference\n-  --> $DIR/issue-51244.rs:5:5\n+  --> $DIR/issue-51244.rs:3:5\n    |\n LL |     let ref my_ref @ _ = 0;\n    |         -------------- help: consider changing this to be a mutable reference: `ref mut my_ref @ _`"}, {"sha": "12d0449abb19be4c1bc7755ab3f20b859f481215", "filename": "src/test/ui/nll/issue-51268.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-51268.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-51268.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-51268.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,7 +1,5 @@\n // ignore-tidy-linelength\n \n-#![feature(nll)]\n-\n struct Bar;\n \n impl Bar {"}, {"sha": "420c94f8e1bd292b1f6806719aa475c5825eabe4", "filename": "src/test/ui/nll/issue-51268.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-51268.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-51268.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-51268.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,5 +1,5 @@\n error[E0502]: cannot borrow `self.thing` as mutable because it is also borrowed as immutable\n-  --> $DIR/issue-51268.rs:18:9\n+  --> $DIR/issue-51268.rs:16:9\n    |\n LL |           self.thing.bar(|| {\n    |           ^          --- -- immutable borrow occurs here"}, {"sha": "b45477c7fb10deb96bda96da36d6a3c41c7082bd", "filename": "src/test/ui/nll/issue-51351.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-51351.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-51351.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-51351.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -8,8 +8,6 @@\n //\n // compile-pass\n \n-#![feature(nll)]\n-\n fn creash<'a>() {\n     let x: &'a () = &();\n }"}, {"sha": "691760eb91e52fb12816cf537af927283752867e", "filename": "src/test/ui/nll/issue-51512.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-51512.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-51512.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-51512.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,6 +1,3 @@\n-#![allow(warnings)]\n-#![feature(nll)]\n-\n fn main() {\n     let range = 0..1;\n     let r = range;"}, {"sha": "e591ca08290ebf74a7c8e2689009e463b2306bcf", "filename": "src/test/ui/nll/issue-51512.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-51512.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-51512.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-51512.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,5 +1,5 @@\n error[E0382]: use of moved value: `range`\n-  --> $DIR/issue-51512.rs:7:13\n+  --> $DIR/issue-51512.rs:4:13\n    |\n LL |     let range = 0..1;\n    |         ----- move occurs because `range` has type `std::ops::Range<i32>`, which does not implement the `Copy` trait"}, {"sha": "58416c31edde75d92e67597dead873540270d83c", "filename": "src/test/ui/nll/issue-52059-report-when-borrow-and-drop-conflict.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-52059-report-when-borrow-and-drop-conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-52059-report-when-borrow-and-drop-conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52059-report-when-borrow-and-drop-conflict.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -4,7 +4,6 @@\n // of the fact that the type implements Drop.\n \n #![feature(nll)]\n-#![allow(dead_code)]\n \n pub struct S<'a> { url: &'a mut String }\n "}, {"sha": "34259d06d38363e43ff342595f8956e65d5974b4", "filename": "src/test/ui/nll/issue-52059-report-when-borrow-and-drop-conflict.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-52059-report-when-borrow-and-drop-conflict.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-52059-report-when-borrow-and-drop-conflict.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52059-report-when-borrow-and-drop-conflict.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,5 +1,5 @@\n error[E0713]: borrow may still be in use when destructor runs\n-  --> $DIR/issue-52059-report-when-borrow-and-drop-conflict.rs:14:5\n+  --> $DIR/issue-52059-report-when-borrow-and-drop-conflict.rs:13:5\n    |\n LL | fn finish_1(s: S) -> &mut String {\n    |             - has type `S<'1>`\n@@ -9,7 +9,7 @@ LL | }\n    | - here, drop of `s` needs exclusive access to `*s.url`, because the type `S<'_>` implements the `Drop` trait\n \n error[E0713]: borrow may still be in use when destructor runs\n-  --> $DIR/issue-52059-report-when-borrow-and-drop-conflict.rs:19:13\n+  --> $DIR/issue-52059-report-when-borrow-and-drop-conflict.rs:18:13\n    |\n LL | fn finish_2(s: S) -> &mut String {\n    |             - has type `S<'1>`\n@@ -19,7 +19,7 @@ LL | }\n    | - here, drop of `s` needs exclusive access to `*s.url`, because the type `S<'_>` implements the `Drop` trait\n \n error[E0713]: borrow may still be in use when destructor runs\n-  --> $DIR/issue-52059-report-when-borrow-and-drop-conflict.rs:24:21\n+  --> $DIR/issue-52059-report-when-borrow-and-drop-conflict.rs:23:21\n    |\n LL | fn finish_3(s: S) -> &mut String {\n    |             - has type `S<'1>`\n@@ -29,7 +29,7 @@ LL | }\n    | - here, drop of `s` needs exclusive access to `*s.url`, because the type `S<'_>` implements the `Drop` trait\n \n error[E0509]: cannot move out of type `S<'_>`, which implements the `Drop` trait\n-  --> $DIR/issue-52059-report-when-borrow-and-drop-conflict.rs:29:13\n+  --> $DIR/issue-52059-report-when-borrow-and-drop-conflict.rs:28:13\n    |\n LL |     let p = s.url; p\n    |             ^^^^^"}, {"sha": "4b8e6c680753083bbed11e36234a7fe983e101fe", "filename": "src/test/ui/nll/issue-52078.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-52078.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-52078.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52078.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,6 +1,3 @@\n-#![feature(nll)]\n-#![allow(unused_variables)]\n-\n // Regression test for #52078: we were failing to infer a relationship\n // between `'a` and `'b` below due to inference variables introduced\n // during the normalization process."}, {"sha": "0414428e48150ca498a9baca8a23e96823ecebb0", "filename": "src/test/ui/nll/issue-52086.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-52086.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-52086.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52086.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,5 +1,3 @@\n-#![feature(nll)]\n-\n use std::rc::Rc;\n use std::sync::Arc;\n "}, {"sha": "da453fb1f921fb69bd70a036ae0d934148b3b4ee", "filename": "src/test/ui/nll/issue-52086.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-52086.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-52086.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52086.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,11 +1,11 @@\n error[E0507]: cannot move out of an `Rc`\n-  --> $DIR/issue-52086.rs:10:10\n+  --> $DIR/issue-52086.rs:8:10\n    |\n LL |     drop(x.field);\n    |          ^^^^^^^ cannot move out of an `Rc`\n \n error[E0507]: cannot move out of an `Arc`\n-  --> $DIR/issue-52086.rs:14:10\n+  --> $DIR/issue-52086.rs:12:10\n    |\n LL |     drop(y.field);\n    |          ^^^^^^^ cannot move out of an `Arc`"}, {"sha": "0d7ee0376924dc618028d5db3d1b02375ce180cd", "filename": "src/test/ui/nll/issue-52113.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-52113.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-52113.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52113.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,6 +1,3 @@\n-//\n-\n-#![allow(warnings)]\n #![feature(nll)]\n \n trait Bazinga {}"}, {"sha": "590963ded78bcfeb5eaca7206a0153c7c4314844", "filename": "src/test/ui/nll/issue-52113.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-52113.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-52113.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52113.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/issue-52113.rs:37:5\n+  --> $DIR/issue-52113.rs:34:5\n    |\n LL | fn produce_err<'a, 'b: 'a>(data: &'b mut Vec<&'b u32>, value: &'a u32) -> impl Bazinga + 'b {\n    |                --  -- lifetime `'b` defined here"}, {"sha": "d9ea3ae42c49e8004ef780bbc9bbc26af80d36d9", "filename": "src/test/ui/nll/issue-52534-1.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-52534-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-52534-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52534-1.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,6 +1,3 @@\n-#![feature(nll)]\n-#![allow(warnings)]\n-\n struct Test;\n \n impl Test {"}, {"sha": "743179f05c1afb7c0c4f9cb1ec4d66309620c143", "filename": "src/test/ui/nll/issue-52534-1.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-52534-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-52534-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52534-1.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,17 +1,17 @@\n error[E0515]: cannot return reference to local variable `x`\n-  --> $DIR/issue-52534-1.rs:9:9\n+  --> $DIR/issue-52534-1.rs:6:9\n    |\n LL |         &x\n    |         ^^ returns a reference to data owned by the current function\n \n error[E0515]: cannot return reference to local variable `x`\n-  --> $DIR/issue-52534-1.rs:16:5\n+  --> $DIR/issue-52534-1.rs:13:5\n    |\n LL |     &x\n    |     ^^ returns a reference to data owned by the current function\n \n error[E0515]: cannot return value referencing local variable `x`\n-  --> $DIR/issue-52534-1.rs:22:5\n+  --> $DIR/issue-52534-1.rs:19:5\n    |\n LL |     &&x\n    |     ^--\n@@ -20,7 +20,7 @@ LL |     &&x\n    |     returns a value referencing data owned by the current function\n \n error[E0515]: cannot return reference to temporary value\n-  --> $DIR/issue-52534-1.rs:22:5\n+  --> $DIR/issue-52534-1.rs:19:5\n    |\n LL |     &&x\n    |     ^--\n@@ -29,25 +29,25 @@ LL |     &&x\n    |     returns a reference to data owned by the current function\n \n error[E0515]: cannot return reference to local variable `x`\n-  --> $DIR/issue-52534-1.rs:29:5\n+  --> $DIR/issue-52534-1.rs:26:5\n    |\n LL |     &x\n    |     ^^ returns a reference to data owned by the current function\n \n error[E0515]: cannot return reference to local variable `x`\n-  --> $DIR/issue-52534-1.rs:35:5\n+  --> $DIR/issue-52534-1.rs:32:5\n    |\n LL |     &x\n    |     ^^ returns a reference to data owned by the current function\n \n error[E0515]: cannot return reference to local variable `x`\n-  --> $DIR/issue-52534-1.rs:41:5\n+  --> $DIR/issue-52534-1.rs:38:5\n    |\n LL |     &x\n    |     ^^ returns a reference to data owned by the current function\n \n error[E0515]: cannot return reference to local variable `x`\n-  --> $DIR/issue-52534-1.rs:47:5\n+  --> $DIR/issue-52534-1.rs:44:5\n    |\n LL |     &x\n    |     ^^ returns a reference to data owned by the current function"}, {"sha": "e416264ed09fd889f2a937d4353fc97c5c0fa094", "filename": "src/test/ui/nll/issue-52534-2.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-52534-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-52534-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52534-2.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,6 +1,3 @@\n-#![feature(nll)]\n-#![allow(warnings)]\n-\n fn foo(x: &u32) -> &u32 {\n     let y;\n "}, {"sha": "dd8a87f7e29aa8e152d72efbacc4d327c4553eae", "filename": "src/test/ui/nll/issue-52534-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-52534-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-52534-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52534-2.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,5 +1,5 @@\n error[E0597]: `x` does not live long enough\n-  --> $DIR/issue-52534-2.rs:9:9\n+  --> $DIR/issue-52534-2.rs:6:9\n    |\n LL |         y = &x\n    |         ^^^^^^ borrowed value does not live long enough"}, {"sha": "559d4c8591b34ece8a48031f9e98db5a202939de", "filename": "src/test/ui/nll/issue-52534.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-52534.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-52534.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52534.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,6 +1,3 @@\n-#![feature(nll)]\n-#![allow(warnings)]\n-\n fn foo(_: impl FnOnce(&u32) -> &u32) {\n }\n "}, {"sha": "b2b727fd438935f0c80be656aa1d9149b54b23ae", "filename": "src/test/ui/nll/issue-52534.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-52534.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-52534.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52534.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,5 +1,5 @@\n error[E0597]: `x` does not live long enough\n-  --> $DIR/issue-52534.rs:12:14\n+  --> $DIR/issue-52534.rs:9:14\n    |\n LL |     foo(|a| &x)\n    |          -   ^ `x` would have to be valid for `'0`...\n@@ -13,7 +13,7 @@ LL | }\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch04-02-references-and-borrowing.html#dangling-references>\n \n error[E0597]: `y` does not live long enough\n-  --> $DIR/issue-52534.rs:18:26\n+  --> $DIR/issue-52534.rs:15:26\n    |\n LL |     baz(|first, second| &y)\n    |          -----           ^ `y` would have to be valid for `'0`..."}, {"sha": "24a4267f653f47b86ea4b69777251bb6f4f15353", "filename": "src/test/ui/nll/issue-52663-span-decl-captured-variable.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-52663-span-decl-captured-variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-52663-span-decl-captured-variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52663-span-decl-captured-variable.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,5 +1,3 @@\n-#![feature(nll)]\n-\n fn expect_fn<F>(f: F) where F : Fn() {\n     f();\n }"}, {"sha": "8958bdf4c2a8d7779e3a819c6678e8348a98e948", "filename": "src/test/ui/nll/issue-52663-span-decl-captured-variable.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-52663-span-decl-captured-variable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-52663-span-decl-captured-variable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52663-span-decl-captured-variable.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,5 +1,5 @@\n error[E0507]: cannot move out of captured variable in an `Fn` closure\n-  --> $DIR/issue-52663-span-decl-captured-variable.rs:10:26\n+  --> $DIR/issue-52663-span-decl-captured-variable.rs:8:26\n    |\n LL |        let x = (vec![22], vec![44]);\n    |            - captured outer variable"}, {"sha": "e8e571aadc3680de679abe85fe1dc0319fd81427", "filename": "src/test/ui/nll/issue-52663-trait-object.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-52663-trait-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-52663-trait-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52663-trait-object.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,5 +1,4 @@\n #![feature(box_syntax)]\n-#![feature(nll)]\n \n trait Foo { fn get(&self); }\n "}, {"sha": "9262117f397553efdae9e8d3539dcc52fd5fecff", "filename": "src/test/ui/nll/issue-52663-trait-object.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-52663-trait-object.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-52663-trait-object.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52663-trait-object.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,5 +1,5 @@\n error[E0597]: `tmp0` does not live long enough\n-  --> $DIR/issue-52663-trait-object.rs:13:20\n+  --> $DIR/issue-52663-trait-object.rs:12:20\n    |\n LL |         let tmp1 = &tmp0;\n    |                    ^^^^^ borrowed value does not live long enough"}, {"sha": "e33528ac59e68293b8110f65dd93795be2357eee", "filename": "src/test/ui/nll/issue-52669.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-52669.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-52669.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52669.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,5 +1,3 @@\n-#![feature(nll)]\n-\n struct A {\n     b: B,\n }"}, {"sha": "db53e444b9e4a60dca5232390e5fad4fc2c9f309", "filename": "src/test/ui/nll/issue-52669.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-52669.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-52669.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52669.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,5 +1,5 @@\n error[E0382]: borrow of moved value: `a.b`\n-  --> $DIR/issue-52669.rs:15:5\n+  --> $DIR/issue-52669.rs:13:5\n    |\n LL | fn bar(mut a: A) -> B {\n    |        ----- move occurs because `a` has type `A`, which does not implement the `Copy` trait"}, {"sha": "e8b7b3333eb6b73b6e126c4e9881cd5821abdb5a", "filename": "src/test/ui/nll/issue-52742.nll.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-52742.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-52742.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52742.nll.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -0,0 +1,12 @@\n+error: lifetime may not live long enough\n+  --> $DIR/issue-52742.rs:14:9\n+   |\n+LL |     fn take_bar(&mut self, b: Bar<'_>) {\n+   |                 ---------         -- let's call this `'1`\n+   |                 |\n+   |                 has type `&mut Foo<'_, '2>`\n+LL |         self.y = b.z\n+   |         ^^^^^^^^^^^^ assignment requires that `'1` must outlive `'2`\n+\n+error: aborting due to previous error\n+"}, {"sha": "db9ddfff285b3c23776dcceba9fb5a5652ee4b45", "filename": "src/test/ui/nll/issue-52742.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-52742.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-52742.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52742.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,4 +1,3 @@\n-#![feature(nll)]\n #![feature(in_band_lifetimes)]\n \n struct Foo<'a, 'b> {\n@@ -13,7 +12,7 @@ struct Bar<'b> {\n impl Foo<'_, '_> {\n     fn take_bar(&mut self, b: Bar<'_>) {\n         self.y = b.z\n-        //~^ ERROR lifetime may not live long enough\n+        //~^ ERROR\n     }\n }\n "}, {"sha": "b982915800294ab0ddf41009cbce354d0aac4ad8", "filename": "src/test/ui/nll/issue-52742.stderr", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-52742.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-52742.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52742.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,12 +1,22 @@\n-error: lifetime may not live long enough\n-  --> $DIR/issue-52742.rs:15:9\n+error[E0312]: lifetime of reference outlives lifetime of borrowed content...\n+  --> $DIR/issue-52742.rs:14:18\n    |\n-LL |     fn take_bar(&mut self, b: Bar<'_>) {\n-   |                 ---------         -- let's call this `'1`\n-   |                 |\n-   |                 has type `&mut Foo<'_, '2>`\n LL |         self.y = b.z\n-   |         ^^^^^^^^^^^^ assignment requires that `'1` must outlive `'2`\n+   |                  ^^^\n+   |\n+note: ...the reference is valid for the lifetime '_ as defined on the impl at 12:10...\n+  --> $DIR/issue-52742.rs:12:10\n+   |\n+LL | impl Foo<'_, '_> {\n+   |          ^^\n+note: ...but the borrowed content is only valid for the anonymous lifetime #2 defined on the method body at 13:5\n+  --> $DIR/issue-52742.rs:13:5\n+   |\n+LL | /     fn take_bar(&mut self, b: Bar<'_>) {\n+LL | |         self.y = b.z\n+LL | |\n+LL | |     }\n+   | |_____^\n \n error: aborting due to previous error\n "}, {"sha": "7a47a77f6bb4ccb24dce60261dd8aa0674d01038", "filename": "src/test/ui/nll/issue-53119.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-53119.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-53119.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-53119.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,7 +1,5 @@\n // compile-pass\n \n-#![feature(nll)]\n-\n use std::ops::Deref;\n \n pub struct TypeFieldIterator<'a, T: 'a> {"}, {"sha": "cea458dcb65b92460b2ece1f38f46d9728a87600", "filename": "src/test/ui/nll/issue-53570.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-53570.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-53570.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-53570.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -8,10 +8,6 @@\n //\n // compile-pass\n \n-#![feature(nll)]\n-#![feature(rustc_attrs)]\n-#![allow(dead_code)]\n-\n use std::cell::{RefCell, Ref};\n \n trait AnyVec<'a> {"}, {"sha": "c7b6ac592483799312a704220611925a55414554", "filename": "src/test/ui/nll/issue-55288.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-55288.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-55288.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-55288.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,5 +1,3 @@\n-#![feature(nll)]\n-\n // run-pass\n \n struct Slice(&'static [&'static [u8]]);"}, {"sha": "521d4d33d8633f8a5a68ebbb9cc7e2578ab17d72", "filename": "src/test/ui/nll/issue-55344.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-55344.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-55344.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-55344.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,7 +1,5 @@\n // compile-pass\n \n-#![feature(nll)]\n-#![allow(unreachable_code)]\n #![deny(unused_mut)]\n \n pub fn foo() {"}, {"sha": "d0723047ac08c3f50e905e3cd0c82cdc132f0329", "filename": "src/test/ui/nll/issue-55394.nll.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-55394.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-55394.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-55394.nll.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -0,0 +1,12 @@\n+error: lifetime may not live long enough\n+  --> $DIR/issue-55394.rs:9:9\n+   |\n+LL |     fn new(bar: &mut Bar) -> Self {\n+   |                 -            ---- return type is Foo<'2>\n+   |                 |\n+   |                 let's call the lifetime of this reference `'1`\n+LL |         Foo { bar }\n+   |         ^^^^^^^^^^^ returning this value requires that `'1` must outlive `'2`\n+\n+error: aborting due to previous error\n+"}, {"sha": "f813d1c915cf62fe97d6dbb68175844f4cbf1117", "filename": "src/test/ui/nll/issue-55394.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-55394.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-55394.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-55394.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,5 +1,3 @@\n-#![feature(nll)]\n-\n struct Bar;\n \n struct Foo<'s> {\n@@ -8,7 +6,7 @@ struct Foo<'s> {\n \n impl Foo<'_> {\n     fn new(bar: &mut Bar) -> Self {\n-        Foo { bar } //~ERROR lifetime may not live long enough\n+        Foo { bar } //~ERROR\n     }\n }\n "}, {"sha": "ffb94ed7dd7c0eab3ee8a3bbe82708c546aacdaa", "filename": "src/test/ui/nll/issue-55394.stderr", "status": "modified", "additions": 24, "deletions": 7, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-55394.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-55394.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-55394.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,12 +1,29 @@\n-error: lifetime may not live long enough\n-  --> $DIR/issue-55394.rs:11:9\n+error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'s` due to conflicting requirements\n+  --> $DIR/issue-55394.rs:9:9\n    |\n-LL |     fn new(bar: &mut Bar) -> Self {\n-   |                 -            ---- return type is Foo<'2>\n-   |                 |\n-   |                 let's call the lifetime of this reference `'1`\n LL |         Foo { bar }\n-   |         ^^^^^^^^^^^ returning this value requires that `'1` must outlive `'2`\n+   |         ^^^\n+   |\n+note: first, the lifetime cannot outlive the anonymous lifetime #1 defined on the method body at 8:5...\n+  --> $DIR/issue-55394.rs:8:5\n+   |\n+LL | /     fn new(bar: &mut Bar) -> Self {\n+LL | |         Foo { bar }\n+LL | |     }\n+   | |_____^\n+note: ...so that reference does not outlive borrowed content\n+  --> $DIR/issue-55394.rs:9:15\n+   |\n+LL |         Foo { bar }\n+   |               ^^^\n+note: but, the lifetime must be valid for the lifetime '_ as defined on the impl at 7:10...\n+  --> $DIR/issue-55394.rs:7:10\n+   |\n+LL | impl Foo<'_> {\n+   |          ^^\n+   = note: ...so that the expression is assignable:\n+           expected Foo<'_>\n+              found Foo<'_>\n \n error: aborting due to previous error\n "}, {"sha": "4f797f26a1a7c4e16c1d4d0ac9179e0c5874243d", "filename": "src/test/ui/nll/issue-55401.nll.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-55401.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-55401.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-55401.nll.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -0,0 +1,11 @@\n+error: lifetime may not live long enough\n+  --> $DIR/issue-55401.rs:3:5\n+   |\n+LL | fn static_to_a_to_static_through_ref_in_tuple<'a>(x: &'a u32) -> &'static u32 {\n+   |                                               -- lifetime `'a` defined here\n+LL |     let (ref y, _z): (&'a u32, u32) = (&22, 44);\n+LL |     *y\n+   |     ^^ returning this value requires that `'a` must outlive `'static`\n+\n+error: aborting due to previous error\n+"}, {"sha": "fc45824e903c8134a237003e02596c1c77777fb4", "filename": "src/test/ui/nll/issue-55401.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-55401.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-55401.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-55401.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,5 +1,3 @@\n-#![feature(nll)]\n-\n fn static_to_a_to_static_through_ref_in_tuple<'a>(x: &'a u32) -> &'static u32 {\n     let (ref y, _z): (&'a u32, u32) = (&22, 44);\n     *y //~ ERROR"}, {"sha": "50debc6386f6add1b7b497d9e2a8ce931e112e42", "filename": "src/test/ui/nll/issue-55401.stderr", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-55401.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-55401.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-55401.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,11 +1,15 @@\n-error: lifetime may not live long enough\n-  --> $DIR/issue-55401.rs:5:5\n+error[E0312]: lifetime of reference outlives lifetime of borrowed content...\n+  --> $DIR/issue-55401.rs:3:5\n    |\n-LL | fn static_to_a_to_static_through_ref_in_tuple<'a>(x: &'a u32) -> &'static u32 {\n-   |                                               -- lifetime `'a` defined here\n-LL |     let (ref y, _z): (&'a u32, u32) = (&22, 44);\n LL |     *y\n-   |     ^^ returning this value requires that `'a` must outlive `'static`\n+   |     ^^\n+   |\n+   = note: ...the reference is valid for the static lifetime...\n+note: ...but the borrowed content is only valid for the lifetime 'a as defined on the function body at 1:47\n+  --> $DIR/issue-55401.rs:1:47\n+   |\n+LL | fn static_to_a_to_static_through_ref_in_tuple<'a>(x: &'a u32) -> &'static u32 {\n+   |                                               ^^\n \n error: aborting due to previous error\n "}, {"sha": "8fb8351cee26032d532ed773f18db9caaa616f2b", "filename": "src/test/ui/nll/issue-57265-return-type-wf-check.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-57265-return-type-wf-check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-57265-return-type-wf-check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-57265-return-type-wf-check.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,5 +1,3 @@\n-#![feature(nll)]\n-\n use std::any::Any;\n \n #[derive(Debug, Clone)]"}, {"sha": "20add62b91ddf19268958d33985f06cb506673c1", "filename": "src/test/ui/nll/issue-57265-return-type-wf-check.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-57265-return-type-wf-check.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-57265-return-type-wf-check.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-57265-return-type-wf-check.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,5 +1,5 @@\n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/issue-57265-return-type-wf-check.rs:22:23\n+  --> $DIR/issue-57265-return-type-wf-check.rs:20:23\n    |\n LL |     let (_, z) = foo(&\"hello\".to_string());\n    |                  -----^^^^^^^^^^^^^^^^^^^-- temporary value is freed at the end of this statement"}, {"sha": "e02d6a0cb5a3957bed3a62507555cc11f08c8588", "filename": "src/test/ui/nll/issue-57280-1.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-57280-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-57280-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-57280-1.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,5 +1,3 @@\n-#![feature(nll)]\n-\n // compile-pass\n \n trait Foo<'a> {"}, {"sha": "776a0d359cda6f163a6b308eef7ccc63d3894800", "filename": "src/test/ui/nll/issue-57280.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-57280.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-57280.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-57280.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,5 +1,3 @@\n-#![feature(nll)]\n-\n // compile-pass\n \n trait Foo {"}, {"sha": "c410f0b0bfb4da6fd4d8b73d1ec5298cf5666c8a", "filename": "src/test/ui/nll/issue-57989.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-57989.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-57989.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-57989.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,7 +1,5 @@\n // Test for ICE from issue 57989\n \n-#![feature(nll)]\n-\n fn f(x: &i32) {\n     let g = &x;\n     *x = 0;     //~ ERROR cannot assign to `*x` which is behind a `&` reference"}, {"sha": "00a9bab486855a62c61372d58ed2d1b6fa69bbd7", "filename": "src/test/ui/nll/issue-57989.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-57989.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-57989.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-57989.stderr?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,5 +1,5 @@\n error[E0594]: cannot assign to `*x` which is behind a `&` reference\n-  --> $DIR/issue-57989.rs:7:5\n+  --> $DIR/issue-57989.rs:5:5\n    |\n LL | fn f(x: &i32) {\n    |         ---- help: consider changing this to be a mutable reference: `&mut i32`\n@@ -8,7 +8,7 @@ LL |     *x = 0;\n    |     ^^^^^^ `x` is a `&` reference, so the data it refers to cannot be written\n \n error[E0506]: cannot assign to `*x` because it is borrowed\n-  --> $DIR/issue-57989.rs:7:5\n+  --> $DIR/issue-57989.rs:5:5\n    |\n LL |     let g = &x;\n    |             -- borrow of `*x` occurs here"}, {"sha": "0992e3a85ae94964023d9e2db4037b77640ee64b", "filename": "src/test/ui/nll/issue-58053.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-58053.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b982867a7349f84c17317599b59aeb5a7d8a83be/src%2Ftest%2Fui%2Fnll%2Fissue-58053.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-58053.rs?ref=b982867a7349f84c17317599b59aeb5a7d8a83be", "patch": "@@ -1,4 +1,3 @@\n-#![allow(warnings)]\n #![feature(nll)]\n \n fn main() {"}]}