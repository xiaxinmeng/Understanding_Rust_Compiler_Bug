{"sha": "cf96396fccbad2cce0f4a710d26951083a9864e6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmOTYzOTZmY2NiYWQyY2NlMGY0YTcxMGQyNjk1MTA4M2E5ODY0ZTY=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-05-27T12:40:27Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-05-27T12:41:44Z"}, "message": "make miri script smarter: auto-determine MIRI_SYSROOT, handle MIRI_TEST_TARGET", "tree": {"sha": "1d6a94590d80ada3e6b18ab986b80ee2f3c0347c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d6a94590d80ada3e6b18ab986b80ee2f3c0347c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf96396fccbad2cce0f4a710d26951083a9864e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf96396fccbad2cce0f4a710d26951083a9864e6", "html_url": "https://github.com/rust-lang/rust/commit/cf96396fccbad2cce0f4a710d26951083a9864e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf96396fccbad2cce0f4a710d26951083a9864e6/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb85ced8c730ad6a0f0518dfd7db3166a18e8108", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb85ced8c730ad6a0f0518dfd7db3166a18e8108", "html_url": "https://github.com/rust-lang/rust/commit/eb85ced8c730ad6a0f0518dfd7db3166a18e8108"}], "stats": {"total": 113, "additions": 76, "deletions": 37}, "files": [{"sha": "130072825e1cff22711940e0e796742d7ec9f7b9", "filename": "README.md", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cf96396fccbad2cce0f4a710d26951083a9864e6/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/cf96396fccbad2cce0f4a710d26951083a9864e6/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=cf96396fccbad2cce0f4a710d26951083a9864e6", "patch": "@@ -141,14 +141,16 @@ version of `rustc` that, instead of compiling your code, runs it.  It accepts\n all the same flags as `rustc` (though the ones only affecting code generation\n and linking obviously will have no effect) [and more][miri-flags].\n \n-Running the Miri driver requires some fiddling with environment variables, so the `miri` script helps you do that.\n-For example, you can run the driver on a particular file by doing\n+Running the Miri driver requires some fiddling with environment variables, so\n+the `miri` script helps you do that.  For example, you can run the driver on a\n+particular file by doing\n \n ```sh\n-./miri run tests/run-pass/format.rs # or whatever test you like\n+./miri run tests/run-pass/format.rs\n+./miri run tests/run-pass/hello.rs --target i686-unknown-linux-gnu\n ```\n \n-and you can run the test suite using\n+and you can run the test suite using:\n \n ```\n ./miri test"}, {"sha": "1d090c8827fd1c18429870927a66a7a8110e4654", "filename": "miri", "status": "modified", "additions": 61, "deletions": 18, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/cf96396fccbad2cce0f4a710d26951083a9864e6/miri", "raw_url": "https://github.com/rust-lang/rust/raw/cf96396fccbad2cce0f4a710d26951083a9864e6/miri", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/miri?ref=cf96396fccbad2cce0f4a710d26951083a9864e6", "patch": "@@ -7,33 +7,76 @@ SYSROOT=$(rustc --print sysroot)\n # We enable line-only debuginfo for backtraces.\n export RUSTFLAGS=\"-C link-args=-Wl,-rpath,$SYSROOT/lib/rustlib/$TARGET/lib -C debug-assertions -C debuginfo=1\"\n \n-COMMAND=\"$1\"\n-shift\n+## Helper functions\n \n-case \"$COMMAND\" in\n-install)\n-    exec cargo install --path \"$(dirname \"$0\")\" --force --locked --offline\n-    ;;\n-build|test|run)\n-    # Basic build\n-    cargo build --release\n-\n-    # We we want to just build, we are done.\n-    if [ \"$COMMAND\" = \"build\" ]; then exit 0; fi\n+# Build a sysroot and set MIRI_SYSROOT to use it.  Arguments are passed to `cargo miri setup`.\n+build_sysroot() {\n+    # Build once, for the user to see.\n+    cargo run --release --bin cargo-miri -- miri setup \"$@\"\n+    # Call again, to just set env var.\n+    eval $(cargo run --release -q --bin cargo-miri -- miri setup --env \"$@\")\n+    export MIRI_SYSROOT\n+}\n \n+# Prepare and set MIRI_SYSROOT.  Respects `MIRI_TEST_TARGET` and takes into account\n+# locally built vs. distributed rustc.\n+find_sysroot() {\n     # Get ourselves a sysroot\n     if [ -n \"$MIRI_SYSROOT\" ]; then\n-        # sysroot already set\n+        # Sysroot already set, use that.\n         true\n     elif echo \"$SYSROOT\" | egrep -q 'build/[^/]+/stage'; then\n-\t# a local rustc build, assume we have a proper libstd in $SYSROOT\n-\ttrue\n+        # A local rustc build.\n+        if [ -n \"$MIRI_TEST_TARGET\" ]; then\n+            # Foreign targets still need a build.  Use the rustc sources.\n+            export XARGO_RUST_SRC=\"$SYSROOT/../../../src\"\n+            build_sysroot --target \"$MIRI_TEST_TARGET\"\n+        else\n+\t    # Assume we have a proper host libstd in $SYSROOT.\n+\t    true\n+        fi\n     else\n-\t# we have to build a sysroot\n-\tcargo run --release --bin cargo-miri -- miri setup\n-\texport MIRI_SYSROOT=$HOME/.cache/miri/HOST\n+\t# We have to build a sysroot either way.\n+        if [ -n \"$MIRI_TEST_TARGET\" ]; then\n+            build_sysroot --target \"$MIRI_TEST_TARGET\"\n+        else\n+            build_sysroot\n+        fi\n     fi\n+}\n+\n+## Main\n+\n+COMMAND=\"$1\"\n+shift\n \n+case \"$COMMAND\" in\n+install)\n+    # \"--locked\" to respect the Cargo.lock file if it exists,\n+    # \"--offline\" to avoid querying the registry (for yanked packages).\n+    exec cargo \"$COMMAND\" --path \"$(dirname \"$0\")\" --force --locked --offline \"$@\"\n+    ;;\n+build)\n+    # Build, and let caller control flags.\n+    exec cargo \"$COMMAND\" --release \"$@\"\n+    ;;\n+test|run)\n+    # In \"run\" mode, scan for \"--target\" to set the \"MIRI_TEST_TARGET\" env var so\n+    # that we set the MIRI_SYSROOT up the right way.\n+    if [ \"$COMMAND\" = \"run\" ] && [ -z \"$MIRI_TEST_TARGET\" ]; then\n+        for ARG in \"$@\"; do\n+            if [ \"$LAST_ARG\" = \"--target\" ]; then\n+                # Found it!\n+                export MIRI_TEST_TARGET=\"$ARG\"\n+                break\n+            fi\n+            LAST_ARG=\"$ARG\"\n+        done\n+    fi\n+    # First build and get a sysroot.\n+    cargo build --release\n+    find_sysroot\n+    # Then run the actual command.\n     exec cargo \"$COMMAND\" --release \"$@\"\n     ;;\n esac"}, {"sha": "55c53e7361a515b5311c2fc5d6a898c50d92ae1b", "filename": "src/bin/cargo-miri.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cf96396fccbad2cce0f4a710d26951083a9864e6/src%2Fbin%2Fcargo-miri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf96396fccbad2cce0f4a710d26951083a9864e6/src%2Fbin%2Fcargo-miri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fcargo-miri.rs?ref=cf96396fccbad2cce0f4a710d26951083a9864e6", "patch": "@@ -243,6 +243,7 @@ path = \"lib.rs\"\n     File::create(dir.join(\"lib.rs\")).unwrap();\n     // Run xargo.\n     let target = get_arg_flag_value(\"--target\");\n+    let print_env = !ask_user && has_arg_flag(\"--env\"); // whether we just print the necessary environment variable\n     let mut command = Command::new(\"xargo\");\n     command.arg(\"build\").arg(\"-q\")\n         .current_dir(&dir)\n@@ -265,7 +266,9 @@ path = \"lib.rs\"\n     };\n     let sysroot = if is_host { dir.join(\"HOST\") } else { PathBuf::from(dir) };\n     std::env::set_var(\"MIRI_SYSROOT\", &sysroot);\n-    if !ask_user {\n+    if print_env {\n+        println!(\"MIRI_SYSROOT={}\", sysroot.display());\n+    } else if !ask_user {\n         println!(\"A libstd for Miri is now available in `{}`\", sysroot.display());\n     }\n }"}, {"sha": "dc98ca44ae58a3b336ed2452470548fa40cdd618", "filename": "travis.sh", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/cf96396fccbad2cce0f4a710d26951083a9864e6/travis.sh", "raw_url": "https://github.com/rust-lang/rust/raw/cf96396fccbad2cce0f4a710d26951083a9864e6/travis.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/travis.sh?ref=cf96396fccbad2cce0f4a710d26951083a9864e6", "patch": "@@ -3,36 +3,27 @@ set -euo pipefail\n \n # Determine configuration\n if [ \"$TRAVIS_OS_NAME\" == osx ]; then\n-  MIRI_SYSROOT_BASE=~/Library/Caches/miri.miri.miri/\n   FOREIGN_TARGET=i686-apple-darwin\n else\n-  MIRI_SYSROOT_BASE=~/.cache/miri/\n   FOREIGN_TARGET=i686-unknown-linux-gnu\n fi\n \n # Prepare\n echo \"Build and install miri\"\n-cargo build --release --all-features --all-targets\n-cargo install --all-features --force --path .\n-echo\n-\n-echo \"Get ourselves a MIR-full libstd for the host and a foreign architecture\"\n-cargo miri setup\n-cargo miri setup --target \"$FOREIGN_TARGET\"\n+./miri build --all-features --all-targets\n+./miri install\n echo\n \n # Test\n function run_tests {\n-  cargo test --release --all-features\n-  test-cargo-miri/run-test.py\n+    ./miri test\n+    test-cargo-miri/run-test.py\n }\n \n echo \"Test host architecture\"\n-export MIRI_SYSROOT=\"$MIRI_SYSROOT_BASE\"/HOST\n run_tests\n echo\n \n echo \"Test foreign architecture ($FOREIGN_TARGET)\"\n-export MIRI_SYSROOT=\"$MIRI_SYSROOT_BASE\" MIRI_TEST_TARGET=\"$FOREIGN_TARGET\"\n-run_tests\n+MIRI_TEST_TARGET=\"$FOREIGN_TARGET\" run_tests\n echo"}]}