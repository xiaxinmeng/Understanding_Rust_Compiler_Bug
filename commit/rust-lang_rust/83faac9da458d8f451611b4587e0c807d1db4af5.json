{"sha": "83faac9da458d8f451611b4587e0c807d1db4af5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzZmFhYzlkYTQ1OGQ4ZjQ1MTYxMWI0NTg3ZTBjODA3ZDFkYjRhZjU=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-03-22T14:21:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-22T14:21:24Z"}, "message": "Rollup merge of #82683 - jturner314:int-div-rem-doc-panic, r=nikomatsakis\n\nDocument panicking cases for integer division and remainder\n\nThis PR documents the cases when integer division and remainder operations panic. These operations panic in two cases: division by zero and overflow.\n\nIt's surprising that these operations always panic on overflow, unlike most other arithmetic operations, which panic on overflow only when `debug_assertions` is enabled. The panic on overflow for the remainder is also surprising because a return value of `0` would be reasonable in this case. (\"Overflow\" occurs only for `MIN % -1`.) Since the panics on overflow are somewhat surprising, they should be documented.\n\nI guess it's worth asking: is panic on overflow (even when `debug_assertions` is disabled) the intended behavior? If not, what's the best way forward?", "tree": {"sha": "e7cc15d9c3dd824df5c18da9ed8eb3edeebe94c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7cc15d9c3dd824df5c18da9ed8eb3edeebe94c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/83faac9da458d8f451611b4587e0c807d1db4af5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgWKflCRBK7hj4Ov3rIwAAdHIIACz3tqL6Vp88Vt0B5ioVuL21\niM73Pbniuvq1DIX1gy89mMSpa/KeJdBebjkQy4yf2nddSZ5G2IQd3Fr7nVNi3KAw\n68nSVvFVdYNb6zwUtgr0N1JGzSeC7KmF7xrNbCC6N6UzRIMSPqPbn6l44tQ0F09A\nhaIS5tGzt4U2tNL44dwcNUjXhcoxnSCIfKvKXA76FsYquBWWs3q/0xW4/ogY6+wx\nqU92+bOFag12D7GfxcNZCzFqdEM8oPnFv+4XvAWHIcr0rcQ2q1s9UNirjmhwVnFL\nrZ2yKEvIHQbTpAwXIsTL26Ivjz3p/PI/7fHW/T7hzdo/GVx7Reu6XDkSQ7CsfLo=\n=ASQJ\n-----END PGP SIGNATURE-----\n", "payload": "tree e7cc15d9c3dd824df5c18da9ed8eb3edeebe94c3\nparent 7bf8f82f72599528c82ad4c29dd9408645725f6a\nparent b45855032b3aad0ea0a48894f56cb9bb8fa361f2\nauthor Dylan DPC <dylan.dpc@gmail.com> 1616422884 +0100\ncommitter GitHub <noreply@github.com> 1616422884 +0100\n\nRollup merge of #82683 - jturner314:int-div-rem-doc-panic, r=nikomatsakis\n\nDocument panicking cases for integer division and remainder\n\nThis PR documents the cases when integer division and remainder operations panic. These operations panic in two cases: division by zero and overflow.\n\nIt's surprising that these operations always panic on overflow, unlike most other arithmetic operations, which panic on overflow only when `debug_assertions` is enabled. The panic on overflow for the remainder is also surprising because a return value of `0` would be reasonable in this case. (\"Overflow\" occurs only for `MIN % -1`.) Since the panics on overflow are somewhat surprising, they should be documented.\n\nI guess it's worth asking: is panic on overflow (even when `debug_assertions` is disabled) the intended behavior? If not, what's the best way forward?\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/83faac9da458d8f451611b4587e0c807d1db4af5", "html_url": "https://github.com/rust-lang/rust/commit/83faac9da458d8f451611b4587e0c807d1db4af5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/83faac9da458d8f451611b4587e0c807d1db4af5/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7bf8f82f72599528c82ad4c29dd9408645725f6a", "url": "https://api.github.com/repos/rust-lang/rust/commits/7bf8f82f72599528c82ad4c29dd9408645725f6a", "html_url": "https://github.com/rust-lang/rust/commit/7bf8f82f72599528c82ad4c29dd9408645725f6a"}, {"sha": "b45855032b3aad0ea0a48894f56cb9bb8fa361f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/b45855032b3aad0ea0a48894f56cb9bb8fa361f2", "html_url": "https://github.com/rust-lang/rust/commit/b45855032b3aad0ea0a48894f56cb9bb8fa361f2"}], "stats": {"total": 26, "additions": 20, "deletions": 6}, "files": [{"sha": "a0577b287ce24fa886e715298111b082e128f880", "filename": "library/core/src/ops/arith.rs", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/83faac9da458d8f451611b4587e0c807d1db4af5/library%2Fcore%2Fsrc%2Fops%2Farith.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83faac9da458d8f451611b4587e0c807d1db4af5/library%2Fcore%2Fsrc%2Fops%2Farith.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Farith.rs?ref=83faac9da458d8f451611b4587e0c807d1db4af5", "patch": "@@ -456,9 +456,13 @@ pub trait Div<Rhs = Self> {\n }\n \n macro_rules! div_impl_integer {\n-    ($($t:ty)*) => ($(\n+    ($(($($t:ty)*) => $panic:expr),*) => ($($(\n         /// This operation rounds towards zero, truncating any\n         /// fractional part of the exact result.\n+        ///\n+        /// # Panics\n+        ///\n+        #[doc = $panic]\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         impl Div for $t {\n             type Output = $t;\n@@ -468,10 +472,13 @@ macro_rules! div_impl_integer {\n         }\n \n         forward_ref_binop! { impl Div, div for $t, $t }\n-    )*)\n+    )*)*)\n }\n \n-div_impl_integer! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n+div_impl_integer! {\n+    (usize u8 u16 u32 u64 u128) => \"This operation will panic if `other == 0`.\",\n+    (isize i8 i16 i32 i64 i128) => \"This operation will panic if `other == 0` or the division results in overflow.\"\n+}\n \n macro_rules! div_impl_float {\n     ($($t:ty)*) => ($(\n@@ -549,9 +556,13 @@ pub trait Rem<Rhs = Self> {\n }\n \n macro_rules! rem_impl_integer {\n-    ($($t:ty)*) => ($(\n+    ($(($($t:ty)*) => $panic:expr),*) => ($($(\n         /// This operation satisfies `n % d == n - (n / d) * d`. The\n         /// result has the same sign as the left operand.\n+        ///\n+        /// # Panics\n+        ///\n+        #[doc = $panic]\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         impl Rem for $t {\n             type Output = $t;\n@@ -561,10 +572,13 @@ macro_rules! rem_impl_integer {\n         }\n \n         forward_ref_binop! { impl Rem, rem for $t, $t }\n-    )*)\n+    )*)*)\n }\n \n-rem_impl_integer! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n+rem_impl_integer! {\n+    (usize u8 u16 u32 u64 u128) => \"This operation will panic if `other == 0`.\",\n+    (isize i8 i16 i32 i64 i128) => \"This operation will panic if `other == 0` or if `self / other` results in overflow.\"\n+}\n \n macro_rules! rem_impl_float {\n     ($($t:ty)*) => ($("}]}