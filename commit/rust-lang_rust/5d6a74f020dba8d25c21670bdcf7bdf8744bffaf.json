{"sha": "5d6a74f020dba8d25c21670bdcf7bdf8744bffaf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkNmE3NGYwMjBkYmE4ZDI1YzIxNjcwYmRjZjdiZGY4NzQ0YmZmYWY=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-11-22T10:49:29Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-11-22T10:49:29Z"}, "message": "Only warn about unreachable range patterns when appropriate\n\nAlso simplifies the literal-munging, and moves it into ast_util\n\nCloses #1170", "tree": {"sha": "177145e47650762e53082f0fb4d24fba8deca76d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/177145e47650762e53082f0fb4d24fba8deca76d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d6a74f020dba8d25c21670bdcf7bdf8744bffaf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d6a74f020dba8d25c21670bdcf7bdf8744bffaf", "html_url": "https://github.com/rust-lang/rust/commit/5d6a74f020dba8d25c21670bdcf7bdf8744bffaf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d6a74f020dba8d25c21670bdcf7bdf8744bffaf/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8cc852af8ce3c7b59c06aaf41b44ff5fe90c4ced", "url": "https://api.github.com/repos/rust-lang/rust/commits/8cc852af8ce3c7b59c06aaf41b44ff5fe90c4ced", "html_url": "https://github.com/rust-lang/rust/commit/8cc852af8ce3c7b59c06aaf41b44ff5fe90c4ced"}], "stats": {"total": 290, "additions": 59, "deletions": 231}, "files": [{"sha": "380fcff24b6ad68dacdf15fa8305296fa2fd36fb", "filename": "src/comp/middle/check_alt.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5d6a74f020dba8d25c21670bdcf7bdf8744bffaf/src%2Fcomp%2Fmiddle%2Fcheck_alt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d6a74f020dba8d25c21670bdcf7bdf8744bffaf/src%2Fcomp%2Fmiddle%2Fcheck_alt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fcheck_alt.rs?ref=5d6a74f020dba8d25c21670bdcf7bdf8744bffaf", "patch": "@@ -1,5 +1,5 @@\n import syntax::ast::*;\n-import syntax::ast_util::{variant_def_ids, dummy_sp};\n+import syntax::ast_util::{variant_def_ids, dummy_sp, compare_lit, lit_eq};\n import syntax::visit;\n \n fn check_crate(tcx: ty::ctxt, crate: @crate) {\n@@ -66,11 +66,7 @@ fn pattern_supersedes(tcx: ty::ctxt, a: @pat, b: @pat) -> bool {\n       pat_wild. | pat_bind(_) { ret true; }\n       pat_lit(la) {\n         alt b.node {\n-          pat_lit(lb) { ret util::common::lit_eq(la, lb); }\n-          pat_range(beginb, endb) {\n-            ret util::common::lit_type_eq(la, beginb) &&\n-                util::common::lit_in_range(la, beginb, endb);\n-          }\n+          pat_lit(lb) { ret lit_eq(la, lb); }\n           _ { ret false; }\n         }\n       }\n@@ -110,12 +106,11 @@ fn pattern_supersedes(tcx: ty::ctxt, a: @pat, b: @pat) -> bool {\n       pat_range(begina, enda) {\n         alt b.node {\n           pat_lit(lb) {\n-            ret util::common::lit_type_eq(lb, begina) &&\n-                util::common::lit_in_range(lb, begina, enda);\n+            ret compare_lit(begina, lb) <= 0 && compare_lit(enda, lb) >= 0;\n           }\n           pat_range(beginb, endb) {\n-            ret util::common::lit_type_eq(begina, beginb) &&\n-                util::common::lit_ranges_overlap(begina, enda, beginb, endb);\n+            ret compare_lit(begina, beginb) <= 0 &&\n+                compare_lit(enda, endb) >= 0;\n           }\n           _ { ret false; }\n         }"}, {"sha": "5b7b7a59294a6063e19d624ad4cda2c5dfe25c86", "filename": "src/comp/middle/trans_alt.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5d6a74f020dba8d25c21670bdcf7bdf8744bffaf/src%2Fcomp%2Fmiddle%2Ftrans_alt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d6a74f020dba8d25c21670bdcf7bdf8744bffaf/src%2Fcomp%2Fmiddle%2Ftrans_alt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_alt.rs?ref=5d6a74f020dba8d25c21670bdcf7bdf8744bffaf", "patch": "@@ -7,10 +7,9 @@ import trans_build::*;\n import trans::{new_sub_block_ctxt, new_scope_block_ctxt, load_if_immediate};\n import syntax::ast;\n import syntax::ast_util;\n-import syntax::ast_util::dummy_sp;\n+import syntax::ast_util::{dummy_sp, lit_eq};\n import syntax::ast::def_id;\n import syntax::codemap::span;\n-import util::common::lit_eq;\n \n import trans_common::*;\n "}, {"sha": "e7c176656285025a3f92632d36ff3d1c67a79d5a", "filename": "src/comp/middle/tstate/auxiliary.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5d6a74f020dba8d25c21670bdcf7bdf8744bffaf/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d6a74f020dba8d25c21670bdcf7bdf8744bffaf/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs?ref=5d6a74f020dba8d25c21670bdcf7bdf8744bffaf", "patch": "@@ -5,7 +5,6 @@ import syntax::ast_util::*;\n import syntax::codemap::span;\n import syntax::visit;\n import std::map::{new_int_hash};\n-import util::common::{lit_eq};\n import syntax::print::pprust::path_to_str;\n import tstate::ann::{pre_and_post, pre_and_post_state, empty_ann, prestate,\n                      poststate, precond, postcond,"}, {"sha": "e950633284f117e8a807286e2ebb118f339201bc", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5d6a74f020dba8d25c21670bdcf7bdf8744bffaf/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d6a74f020dba8d25c21670bdcf7bdf8744bffaf/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=5d6a74f020dba8d25c21670bdcf7bdf8744bffaf", "patch": "@@ -1443,7 +1443,9 @@ fn arg_eq<T>(eq: fn(T, T) -> bool, a: @sp_constr_arg<T>, b: @sp_constr_arg<T>)\n         alt b.node { ast::carg_ident(t) { ret eq(s, t); } _ { ret false; } }\n       }\n       ast::carg_lit(l) {\n-        alt b.node { ast::carg_lit(m) { ret lit_eq(l, m); } _ { ret false; } }\n+        alt b.node {\n+          ast::carg_lit(m) { ret ast_util::lit_eq(l, m); } _ { ret false; }\n+        }\n       }\n     }\n }"}, {"sha": "0858833af6d3c9d4e608652445e29ba1020b7dd6", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 6, "deletions": 21, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/5d6a74f020dba8d25c21670bdcf7bdf8744bffaf/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d6a74f020dba8d25c21670bdcf7bdf8744bffaf/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=5d6a74f020dba8d25c21670bdcf7bdf8744bffaf", "patch": "@@ -1,6 +1,7 @@\n import syntax::{ast, ast_util};\n import ast::spanned;\n-import syntax::ast_util::{local_def, respan, ty_param_kind};\n+import syntax::ast_util::{local_def, respan, ty_param_kind, lit_is_numeric,\n+                          lit_types_match};\n import syntax::visit;\n import metadata::csearch;\n import driver::session;\n@@ -1252,24 +1253,7 @@ fn lit_as_float(l: @ast::lit) -> str {\n }\n \n fn valid_range_bounds(l1: @ast::lit, l2: @ast::lit) -> bool {\n-    alt l1.node {\n-      ast::lit_float(s1) | ast::lit_mach_float(_, s1) {\n-        let s2 = lit_as_float(l2);\n-        let f1 = std::float::from_str(s1);\n-        let f2 = std::float::from_str(s2);\n-        ret std::math::min(f1, f2) == f1\n-      }\n-      ast::lit_uint(_) | ast::lit_char(_) {\n-        let u1 = lit_as_uint(l1);\n-        let u2 = lit_as_uint(l2);\n-        ret std::math::min(u1, u2) == u1\n-      }\n-      _ {\n-        let i1 = lit_as_int(l1);\n-        let i2 = lit_as_int(l2);\n-        ret std::math::min(i1, i2) == i1\n-      }\n-    }\n+    ast_util::compare_lit(l1, l2) <= 0\n }\n \n // Pattern checking is top-down rather than bottom-up so that bindings get\n@@ -1284,8 +1268,9 @@ fn check_pat(fcx: @fn_ctxt, map: ast_util::pat_id_map, pat: @ast::pat,\n         write::ty_only_fixup(fcx, pat.id, typ);\n       }\n       ast::pat_range(begin, end) {\n-        if !util::common::lit_is_numeric(begin) ||\n-           !util::common::lit_is_numeric(end) {\n+        if !lit_types_match(begin, end) {\n+            fcx.ccx.tcx.sess.span_err(pat.span, \"mismatched types in range\");\n+        } else if !lit_is_numeric(begin) || !lit_is_numeric(end) {\n             fcx.ccx.tcx.sess.span_err(pat.span,\n                                       \"non-numeric type used in range\");\n         } else if !valid_range_bounds(begin, end) {"}, {"sha": "c68092da90d590c73d2bb135d1fc681b9660f82b", "filename": "src/comp/syntax/ast_util.rs", "status": "modified", "additions": 41, "deletions": 1, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/5d6a74f020dba8d25c21670bdcf7bdf8744bffaf/src%2Fcomp%2Fsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d6a74f020dba8d25c21670bdcf7bdf8744bffaf/src%2Fcomp%2Fsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast_util.rs?ref=5d6a74f020dba8d25c21670bdcf7bdf8744bffaf", "patch": "@@ -232,11 +232,51 @@ fn ret_by_ref(style: ret_style) -> bool {\n \n fn ty_param_kind(tp: ty_param) -> kind { tp.kind }\n \n+fn compare_lit(a: @lit, b: @lit) -> int {\n+    fn cmp<T>(a: T, b: T) -> int { a == b ? 0 : a < b ? -1 : 1 }\n+    alt (a.node, b.node) {\n+      (lit_int(a), lit_int(b)) |\n+      (lit_mach_int(_, a), lit_mach_int(_, b)) { cmp(a, b) }\n+      (lit_uint(a), lit_uint(b)) { cmp(a, b) }\n+      (lit_char(a), lit_char(b)) { cmp(a, b) }\n+      (lit_float(a), lit_float(b)) |\n+      (lit_mach_float(_, a), lit_mach_float(_, b)) {\n+        cmp(std::float::from_str(a), std::float::from_str(b))\n+      }\n+      (lit_str(a), lit_str(b)) { cmp(a, b) }\n+      (lit_nil., lit_nil.) { 0 }\n+      (lit_bool(a), lit_bool(b)) { cmp(a, b) }\n+    }\n+}\n+\n+fn lit_eq(a: @lit, b: @lit) -> bool { compare_lit(a, b) == 0 }\n+\n+fn lit_types_match(a: @lit, b: @lit) -> bool {\n+    alt (a.node, b.node) {\n+      (lit_int(_), lit_int(_)) | (lit_uint(_), lit_uint(_)) |\n+      (lit_char(_), lit_char(_)) | (lit_float(_), lit_float(_)) |\n+      (lit_str(_), lit_str(_)) | (lit_nil., lit_nil.) |\n+      (lit_bool(_), lit_bool(_ )) { true }\n+      (lit_mach_int(ta, _), lit_mach_int(tb, _)) |\n+      (lit_mach_float(ta, _), lit_mach_float(tb, _)) { ta == tb }\n+      _ { false }\n+    }\n+}\n+\n+fn lit_is_numeric(l: @ast::lit) -> bool {\n+    alt l.node {\n+      ast::lit_int(_) | ast::lit_char(_) | ast::lit_uint(_) |\n+      ast::lit_mach_int(_, _) | ast::lit_float(_) | ast::lit_mach_float(_,_) {\n+        true\n+      }\n+      _ { false }\n+    }\n+}\n+\n // Local Variables:\n // mode: rust\n // fill-column: 78;\n // indent-tabs-mode: nil\n // c-basic-offset: 4\n // buffer-file-coding-system: utf-8-unix\n // End:\n-"}, {"sha": "f4f6f9cec24b9982cb379812c33ce43fcd63f15d", "filename": "src/comp/util/common.rs", "status": "modified", "additions": 0, "deletions": 186, "changes": 186, "blob_url": "https://github.com/rust-lang/rust/blob/5d6a74f020dba8d25c21670bdcf7bdf8744bffaf/src%2Fcomp%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d6a74f020dba8d25c21670bdcf7bdf8744bffaf/src%2Fcomp%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Futil%2Fcommon.rs?ref=5d6a74f020dba8d25c21670bdcf7bdf8744bffaf", "patch": "@@ -81,192 +81,6 @@ fn local_rhs_span(l: @ast::local, def: span) -> span {\n     alt l.node.init { some(i) { ret i.expr.span; } _ { ret def; } }\n }\n \n-fn lit_is_numeric(l: @ast::lit) -> bool {\n-    alt l.node {\n-      ast::lit_int(_) | ast::lit_char(_) | ast::lit_uint(_) |\n-      ast::lit_mach_int(_, _) | ast::lit_float(_) | ast::lit_mach_float(_,_) {\n-        true\n-      }\n-      _ { false }\n-    }\n-}\n-\n-fn lit_type_eq(l: @ast::lit, m: @ast::lit) -> bool {\n-    alt l.node {\n-      ast::lit_str(_) {\n-        alt m.node { ast::lit_str(_) { true } _ { false } }\n-      }\n-      ast::lit_char(_) {\n-        alt m.node { ast::lit_char(_) { true } _ { false } }\n-      }\n-      ast::lit_int(_) {\n-        alt m.node { ast::lit_int(_) { true } _ { false } }\n-      }\n-      ast::lit_uint(_) {\n-        alt m.node { ast::lit_uint(_) { true } _ { false } }\n-      }\n-      ast::lit_mach_int(_, _) {\n-        alt m.node { ast::lit_mach_int(_, _) { true } _ { false } }\n-      }\n-      ast::lit_float(_) {\n-        alt m.node { ast::lit_float(_) { true } _ { false } }\n-      }\n-      ast::lit_mach_float(_, _) {\n-        alt m.node { ast::lit_mach_float(_, _) { true } _ { false } }\n-      }\n-      ast::lit_nil. {\n-        alt m.node { ast::lit_nil. { true } _ { false } }\n-      }\n-      ast::lit_bool(_) {\n-        alt m.node { ast::lit_bool(_) { true } _ { false } }\n-      }\n-    }\n-}\n-\n-fn lit_in_range(l: @ast::lit, m1: @ast::lit, m2: @ast::lit) -> bool {\n-    alt lits_to_range(m1, m2) {\n-      irange(i1, i2) {\n-        alt l.node {\n-          ast::lit_int(i3) | ast::lit_mach_int(_, i3) {\n-            i3 >= min(i1, i2) && i3 <= max(i1, i2)\n-          }\n-          _ { fail }\n-        }\n-      }\n-      urange(u1, u2) {\n-        alt l.node {\n-          ast::lit_uint(u3) {\n-            u3 >= min(u1, u2) && u3 <= max(u1, u2)\n-          }\n-          _ { fail }\n-        }\n-      }\n-      crange(c1, c2) {\n-        alt l.node {\n-          ast::lit_char(c3) {\n-            (c3 as uint) >= min(c1 as uint, c2 as uint) &&\n-            (c3 as uint) <= max(c1 as uint, c2 as uint)\n-          }\n-          _ { fail }\n-        }\n-      }\n-      frange(f1, f2) {\n-        alt l.node {\n-          ast::lit_float(f3) | ast::lit_mach_float(_, f3) {\n-            std::float::from_str(f3) >= min(f1, f2) &&\n-            std::float::from_str(f3) <= max(f1, f2)\n-          }\n-          _ { fail }\n-        }\n-      }\n-    }\n-}\n-\n-fn ranges_overlap<copy T>(a1: T, a2: T, b1: T, b2: T) -> bool {\n-    let min1 = min(a1, a2);\n-    let max1 = max(a1, a2);\n-    let min2 = min(b1, b2);\n-    let max2 = max(b1, b2);\n-    ret (min1 >= min2 && max1 <= max2) || (min1 <= min2 && max1 >= min2) ||\n-        (min1 >= min2 && min1 <= max2) || (max1 >= min2 && max1 <= max2);\n-}\n-\n-fn lit_ranges_overlap(a1: @ast::lit, a2: @ast::lit,\n-                      b1: @ast::lit, b2: @ast::lit) -> bool {\n-    alt lits_to_range(a1, a2) {\n-      irange(i1, i2) {\n-        alt lits_to_range(b1, b2) {\n-          irange(i3, i4) { ranges_overlap(i1, i2, i3, i4) }\n-          _ { fail }\n-        }\n-      }\n-      urange(u1, u2) {\n-        alt lits_to_range(b1, b2) {\n-          urange(u3, u4) { ranges_overlap(u1, u2, u3, u4) }\n-          _ { fail }\n-        }\n-      }\n-      crange(c1, c2) {\n-        alt lits_to_range(b1, b2) {\n-          crange(c3, c4) { ranges_overlap(c1, c2, c3, c4) }\n-          _ { fail }\n-        }\n-      }\n-      frange(f1, f2) {\n-        alt lits_to_range(b1, b2) {\n-          frange(f3, f4) { ranges_overlap(f1, f2, f3, f4) }\n-          _ { fail }\n-        }\n-      }\n-    }\n-}\n-\n-tag range {\n-    irange(int, int);\n-    urange(uint, uint);\n-    crange(char, char);\n-    frange(float, float);\n-}\n-\n-fn lits_to_range(l: @ast::lit, r: @ast::lit) -> range {\n-    alt l.node {\n-      ast::lit_int(i1) | ast::lit_mach_int(_, i1) {\n-        alt r.node { ast::lit_int(i2) { irange(i1, i2) } _ { fail } }\n-      }\n-      ast::lit_uint(u1) {\n-        alt r.node { ast::lit_uint(u2) { urange(u1, u2) } _ { fail } }\n-      }\n-      ast::lit_char(c1) {\n-        alt r.node { ast::lit_char(c2) { crange(c1, c2) } _ { fail } }\n-      }\n-      ast::lit_float(f1) | ast::lit_mach_float(_, f1) {\n-        alt r.node { ast::lit_float(f2) | ast::lit_mach_float(_, f2) {\n-          frange(std::float::from_str(f1), std::float::from_str(f2))\n-        }\n-        _ { fail } }\n-      }\n-      _ { fail }\n-    }\n-}\n-\n-fn lit_eq(l: @ast::lit, m: @ast::lit) -> bool {\n-    alt l.node {\n-      ast::lit_str(s) {\n-        alt m.node { ast::lit_str(t) { ret s == t } _ { ret false; } }\n-      }\n-      ast::lit_char(c) {\n-        alt m.node { ast::lit_char(d) { ret c == d; } _ { ret false; } }\n-      }\n-      ast::lit_int(i) {\n-        alt m.node { ast::lit_int(j) { ret i == j; } _ { ret false; } }\n-      }\n-      ast::lit_uint(i) {\n-        alt m.node { ast::lit_uint(j) { ret i == j; } _ { ret false; } }\n-      }\n-      ast::lit_mach_int(_, i) {\n-        alt m.node {\n-          ast::lit_mach_int(_, j) { ret i == j; }\n-          _ { ret false; }\n-        }\n-      }\n-      ast::lit_float(s) {\n-        alt m.node { ast::lit_float(t) { ret s == t; } _ { ret false; } }\n-      }\n-      ast::lit_mach_float(_, s) {\n-        alt m.node {\n-          ast::lit_mach_float(_, t) { ret s == t; }\n-          _ { ret false; }\n-        }\n-      }\n-      ast::lit_nil. {\n-        alt m.node { ast::lit_nil. { ret true; } _ { ret false; } }\n-      }\n-      ast::lit_bool(b) {\n-        alt m.node { ast::lit_bool(c) { ret b == c; } _ { ret false; } }\n-      }\n-    }\n-}\n-\n fn is_main_name(path: [ast::ident]) -> bool {\n     str::eq(option::get(std::vec::last(path)), \"main\")\n }"}, {"sha": "38ac1d76d98bba01260aaae33156a14d4f523eee", "filename": "src/test/compile-fail/alt-range-fail-dominate.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5d6a74f020dba8d25c21670bdcf7bdf8744bffaf/src%2Ftest%2Fcompile-fail%2Falt-range-fail-dominate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d6a74f020dba8d25c21670bdcf7bdf8744bffaf/src%2Ftest%2Fcompile-fail%2Falt-range-fail-dominate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Falt-range-fail-dominate.rs?ref=5d6a74f020dba8d25c21670bdcf7bdf8744bffaf", "patch": "@@ -3,7 +3,6 @@\n //error-pattern: unreachable\n //error-pattern: unreachable\n //error-pattern: unreachable\n-//error-pattern: unreachable\n \n fn main() {\n     alt 5u {\n@@ -12,13 +11,13 @@ fn main() {\n     };\n \n     alt 5u {\n+      3u to 6u { }\n       4u to 6u { }\n-      3u to 5u { }\n     };\n \n     alt 5u {\n       4u to 6u { }\n-      5u to 7u { }\n+      4u to 6u { }\n     };\n \n     alt 'c' {\n@@ -27,12 +26,7 @@ fn main() {\n     };\n \n     alt 1.0 {\n-      -5.0 to 5.0 {}\n-      0.0 to 6.5 {}\n-    };\n-\n-    alt 1.0 {\n-      0.02 {}\n       0.01 to 6.5 {}\n+      0.02 {}\n     };\n }\n\\ No newline at end of file"}]}