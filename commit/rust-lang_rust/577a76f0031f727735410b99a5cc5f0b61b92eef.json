{"sha": "577a76f0031f727735410b99a5cc5f0b61b92eef", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3N2E3NmYwMDMxZjcyNzczNTQxMGI5OWE1Y2M1ZjBiNjFiOTJlZWY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-03T14:47:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-03T14:47:13Z"}, "message": "Auto merge of #88597 - cjgillot:lower-global, r=petrochenkov\n\nMove global analyses from lowering to resolution\n\nSplit off https://github.com/rust-lang/rust/pull/87234\n\nr? `@petrochenkov`", "tree": {"sha": "60f9cfd8627c093755e9637a1f614f66e444b92a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/60f9cfd8627c093755e9637a1f614f66e444b92a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/577a76f0031f727735410b99a5cc5f0b61b92eef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/577a76f0031f727735410b99a5cc5f0b61b92eef", "html_url": "https://github.com/rust-lang/rust/commit/577a76f0031f727735410b99a5cc5f0b61b92eef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/577a76f0031f727735410b99a5cc5f0b61b92eef/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5799b2a73bd03d1d7b4a432fa0a0cb93e7288db", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5799b2a73bd03d1d7b4a432fa0a0cb93e7288db", "html_url": "https://github.com/rust-lang/rust/commit/c5799b2a73bd03d1d7b4a432fa0a0cb93e7288db"}, {"sha": "5e3cd6a8b29b312c796c5a83afd4a5fa21513f8e", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e3cd6a8b29b312c796c5a83afd4a5fa21513f8e", "html_url": "https://github.com/rust-lang/rust/commit/5e3cd6a8b29b312c796c5a83afd4a5fa21513f8e"}], "stats": {"total": 510, "additions": 231, "deletions": 279}, "files": [{"sha": "443698a796ddc63c2e8a250cbaf2461403909cac", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/577a76f0031f727735410b99a5cc5f0b61b92eef/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/577a76f0031f727735410b99a5cc5f0b61b92eef/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=577a76f0031f727735410b99a5cc5f0b61b92eef", "patch": "@@ -502,13 +502,6 @@ pub struct Crate {\n     pub attrs: Vec<Attribute>,\n     pub items: Vec<P<Item>>,\n     pub span: Span,\n-    /// The order of items in the HIR is unrelated to the order of\n-    /// items in the AST. However, we generate proc macro harnesses\n-    /// based on the AST order, and later refer to these harnesses\n-    /// from the HIR. This field keeps track of the order in which\n-    /// we generated proc macros harnesses, so that we can map\n-    /// HIR proc macros items back to their harness items.\n-    pub proc_macros: Vec<NodeId>,\n }\n \n /// Possible values inside of compile-time attribute lists."}, {"sha": "0231bca7aea784a1a79a958e973fd6c69f5ab6b4", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/577a76f0031f727735410b99a5cc5f0b61b92eef/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/577a76f0031f727735410b99a5cc5f0b61b92eef/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=577a76f0031f727735410b99a5cc5f0b61b92eef", "patch": "@@ -1059,7 +1059,7 @@ pub fn noop_visit_fn_header<T: MutVisitor>(header: &mut FnHeader, vis: &mut T) {\n // FIXME: Avoid visiting the crate as a `Mod` item, flat map only the inner items if possible,\n // or make crate visiting first class if necessary.\n pub fn noop_visit_crate<T: MutVisitor>(krate: &mut Crate, vis: &mut T) {\n-    visit_clobber(krate, |Crate { attrs, items, span, proc_macros }| {\n+    visit_clobber(krate, |Crate { attrs, items, span }| {\n         let item_vis =\n             Visibility { kind: VisibilityKind::Public, span: span.shrink_to_lo(), tokens: None };\n         let item = P(Item {\n@@ -1075,13 +1075,11 @@ pub fn noop_visit_crate<T: MutVisitor>(krate: &mut Crate, vis: &mut T) {\n \n         let len = items.len();\n         if len == 0 {\n-            Crate { attrs: vec![], items: vec![], span, proc_macros }\n+            Crate { attrs: vec![], items: vec![], span }\n         } else if len == 1 {\n             let Item { attrs, span, kind, .. } = items.into_iter().next().unwrap().into_inner();\n             match kind {\n-                ItemKind::Mod(_, ModKind::Loaded(items, ..)) => {\n-                    Crate { attrs, items, span, proc_macros }\n-                }\n+                ItemKind::Mod(_, ModKind::Loaded(items, ..)) => Crate { attrs, items, span },\n                 _ => panic!(\"visitor converted a module to not a module\"),\n             }\n         } else {"}, {"sha": "e0d4095d76907362e7b3ecb02dabc85f81b2438b", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/577a76f0031f727735410b99a5cc5f0b61b92eef/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/577a76f0031f727735410b99a5cc5f0b61b92eef/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=577a76f0031f727735410b99a5cc5f0b61b92eef", "patch": "@@ -378,15 +378,6 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                             this.lower_trait_ref(trait_ref, ImplTraitContext::disallowed())\n                         });\n \n-                        if let Some(ref trait_ref) = trait_ref {\n-                            if let Res::Def(DefKind::Trait, def_id) = trait_ref.path.res {\n-                                this.trait_impls\n-                                    .entry(def_id)\n-                                    .or_default()\n-                                    .push(lowered_trait_def_id);\n-                            }\n-                        }\n-\n                         let lowered_ty = this.lower_ty(ty, ImplTraitContext::disallowed());\n \n                         (trait_ref, lowered_ty)"}, {"sha": "8fd8075725b48c292ddb1dbcbd5d69c7c3012357", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 4, "deletions": 61, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/577a76f0031f727735410b99a5cc5f0b61b92eef/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/577a76f0031f727735410b99a5cc5f0b61b92eef/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=577a76f0031f727735410b99a5cc5f0b61b92eef", "patch": "@@ -39,7 +39,6 @@ use rustc_ast::node_id::NodeMap;\n use rustc_ast::token::{self, Token};\n use rustc_ast::tokenstream::{CanSynthesizeMissingTokens, TokenStream, TokenTree};\n use rustc_ast::visit::{self, AssocCtxt, Visitor};\n-use rustc_ast::walk_list;\n use rustc_ast::{self as ast, *};\n use rustc_ast_pretty::pprust;\n use rustc_data_structures::captures::Captures;\n@@ -48,7 +47,7 @@ use rustc_data_structures::sync::Lrc;\n use rustc_errors::{struct_span_err, Applicability};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Namespace, PartialRes, PerNS, Res};\n-use rustc_hir::def_id::{DefId, DefIdMap, DefPathHash, LocalDefId, CRATE_DEF_ID};\n+use rustc_hir::def_id::{DefId, DefPathHash, LocalDefId, CRATE_DEF_ID};\n use rustc_hir::definitions::{DefKey, DefPathData, Definitions};\n use rustc_hir::intravisit;\n use rustc_hir::{ConstArg, GenericArg, InferKind, ParamName};\n@@ -104,8 +103,6 @@ struct LoweringContext<'a, 'hir: 'a> {\n     owners: IndexVec<LocalDefId, Option<hir::OwnerNode<'hir>>>,\n     bodies: BTreeMap<hir::BodyId, hir::Body<'hir>>,\n \n-    trait_impls: BTreeMap<DefId, Vec<LocalDefId>>,\n-\n     modules: BTreeMap<LocalDefId, hir::ModuleItems>,\n \n     generator_kind: Option<hir::GeneratorKind>,\n@@ -158,8 +155,6 @@ struct LoweringContext<'a, 'hir: 'a> {\n \n     current_module: LocalDefId,\n \n-    type_def_lifetime_params: DefIdMap<usize>,\n-\n     current_hir_id_owner: (LocalDefId, u32),\n     item_local_id_counters: NodeMap<u32>,\n     node_id_to_hir_id: IndexVec<NodeId, Option<hir::HirId>>,\n@@ -171,7 +166,7 @@ struct LoweringContext<'a, 'hir: 'a> {\n pub trait ResolverAstLowering {\n     fn def_key(&mut self, id: DefId) -> DefKey;\n \n-    fn item_generics_num_lifetimes(&self, def: DefId, sess: &Session) -> usize;\n+    fn item_generics_num_lifetimes(&self, def: DefId) -> usize;\n \n     fn legacy_const_generic_args(&mut self, expr: &Expr) -> Option<Vec<usize>>;\n \n@@ -326,7 +321,6 @@ pub fn lower_crate<'a, 'hir>(\n         arena,\n         owners: IndexVec::default(),\n         bodies: BTreeMap::new(),\n-        trait_impls: BTreeMap::new(),\n         modules: BTreeMap::new(),\n         attrs: BTreeMap::default(),\n         catch_scopes: Vec::new(),\n@@ -335,7 +329,6 @@ pub fn lower_crate<'a, 'hir>(\n         is_in_trait_impl: false,\n         is_in_dyn_type: false,\n         anonymous_lifetime_mode: AnonymousLifetimeMode::PassThrough,\n-        type_def_lifetime_params: Default::default(),\n         current_module: CRATE_DEF_ID,\n         current_hir_id_owner: (CRATE_DEF_ID, 0),\n         item_local_id_counters: Default::default(),\n@@ -451,26 +444,8 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             fn visit_item(&mut self, item: &'tcx Item) {\n                 self.lctx.allocate_hir_id_counter(item.id);\n \n-                match item.kind {\n-                    ItemKind::Struct(_, ref generics)\n-                    | ItemKind::Union(_, ref generics)\n-                    | ItemKind::Enum(_, ref generics)\n-                    | ItemKind::TyAlias(box TyAliasKind(_, ref generics, ..))\n-                    | ItemKind::Trait(box TraitKind(_, _, ref generics, ..)) => {\n-                        let def_id = self.lctx.resolver.local_def_id(item.id);\n-                        let count = generics\n-                            .params\n-                            .iter()\n-                            .filter(|param| {\n-                                matches!(param.kind, ast::GenericParamKind::Lifetime { .. })\n-                            })\n-                            .count();\n-                        self.lctx.type_def_lifetime_params.insert(def_id.to_def_id(), count);\n-                    }\n-                    ItemKind::Use(ref use_tree) => {\n-                        self.allocate_use_tree_hir_id_counters(use_tree);\n-                    }\n-                    _ => {}\n+                if let ItemKind::Use(ref use_tree) = item.kind {\n+                    self.allocate_use_tree_hir_id_counters(use_tree);\n                 }\n \n                 visit::walk_item(self, item);\n@@ -485,23 +460,6 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 self.lctx.allocate_hir_id_counter(item.id);\n                 visit::walk_foreign_item(self, item);\n             }\n-\n-            fn visit_ty(&mut self, t: &'tcx Ty) {\n-                match t.kind {\n-                    // Mirrors the case in visit::walk_ty\n-                    TyKind::BareFn(ref f) => {\n-                        walk_list!(self, visit_generic_param, &f.generic_params);\n-                        // Mirrors visit::walk_fn_decl\n-                        for parameter in &f.decl.inputs {\n-                            // We don't lower the ids of argument patterns\n-                            self.visit_pat(&parameter.pat);\n-                            self.visit_ty(&parameter.ty)\n-                        }\n-                        self.visit_fn_ret_ty(&f.decl.output)\n-                    }\n-                    _ => visit::walk_ty(self, t),\n-                }\n-            }\n         }\n \n         self.lower_node_id(CRATE_NODE_ID);\n@@ -515,10 +473,6 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         self.owners.ensure_contains_elem(CRATE_DEF_ID, || None);\n         self.owners[CRATE_DEF_ID] = Some(hir::OwnerNode::Crate(module));\n \n-        let body_ids = body_ids(&self.bodies);\n-        let proc_macros =\n-            c.proc_macros.iter().map(|id| self.node_id_to_hir_id[*id].unwrap()).collect();\n-\n         let mut trait_map: FxHashMap<_, FxHashMap<_, _>> = FxHashMap::default();\n         for (k, v) in self.resolver.take_trait_map().into_iter() {\n             if let Some(Some(hir_id)) = self.node_id_to_hir_id.get(k) {\n@@ -551,10 +505,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         let krate = hir::Crate {\n             owners: self.owners,\n             bodies: self.bodies,\n-            body_ids,\n-            trait_impls: self.trait_impls,\n             modules: self.modules,\n-            proc_macros,\n             trait_map,\n             attrs: self.attrs,\n         };\n@@ -2749,14 +2700,6 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     }\n }\n \n-fn body_ids(bodies: &BTreeMap<hir::BodyId, hir::Body<'_>>) -> Vec<hir::BodyId> {\n-    // Sorting by span ensures that we get things in order within a\n-    // file, and also puts the files in a sensible order.\n-    let mut body_ids: Vec<_> = bodies.keys().cloned().collect();\n-    body_ids.sort_by_key(|b| bodies[b].value.span);\n-    body_ids\n-}\n-\n /// Helper struct for delayed construction of GenericArgs.\n struct GenericArgsCtor<'hir> {\n     args: SmallVec<[hir::GenericArg<'hir>; 4]>,"}, {"sha": "90a22b5c209522864143e6b40c2d20f2fa12af5e", "filename": "compiler/rustc_ast_lowering/src/path.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/577a76f0031f727735410b99a5cc5f0b61b92eef/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/577a76f0031f727735410b99a5cc5f0b61b92eef/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs?ref=577a76f0031f727735410b99a5cc5f0b61b92eef", "patch": "@@ -90,15 +90,8 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                         _ => ParenthesizedGenericArgs::Err,\n                     };\n \n-                    let num_lifetimes = type_def_id.map_or(0, |def_id| {\n-                        if let Some(&n) = self.type_def_lifetime_params.get(&def_id) {\n-                            return n;\n-                        }\n-                        assert!(!def_id.is_local());\n-                        let n = self.resolver.item_generics_num_lifetimes(def_id, self.sess);\n-                        self.type_def_lifetime_params.insert(def_id, n);\n-                        n\n-                    });\n+                    let num_lifetimes = type_def_id\n+                        .map_or(0, |def_id| self.resolver.item_generics_num_lifetimes(def_id));\n                     self.lower_path_segment(\n                         p.span,\n                         segment,"}, {"sha": "6f61e4cba0776acccf84358c781fa4bd2a4516fa", "filename": "compiler/rustc_builtin_macros/src/proc_macro_harness.rs", "status": "modified", "additions": 13, "deletions": 23, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/577a76f0031f727735410b99a5cc5f0b61b92eef/compiler%2Frustc_builtin_macros%2Fsrc%2Fproc_macro_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/577a76f0031f727735410b99a5cc5f0b61b92eef/compiler%2Frustc_builtin_macros%2Fsrc%2Fproc_macro_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fproc_macro_harness.rs?ref=577a76f0031f727735410b99a5cc5f0b61b92eef", "patch": "@@ -13,7 +13,6 @@ use rustc_span::source_map::SourceMap;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n use smallvec::smallvec;\n-use std::cell::RefCell;\n \n struct ProcMacroDerive {\n     id: NodeId,\n@@ -90,7 +89,7 @@ pub fn inject(\n         return krate;\n     }\n \n-    let decls = mk_decls(&mut krate, &mut cx, &macros);\n+    let decls = mk_decls(&mut cx, &macros);\n     krate.items.push(decls);\n \n     krate\n@@ -289,15 +288,7 @@ impl<'a> Visitor<'a> for CollectProcMacros<'a> {\n //              // ...\n //          ];\n //      }\n-fn mk_decls(\n-    ast_krate: &mut ast::Crate,\n-    cx: &mut ExtCtxt<'_>,\n-    macros: &[ProcMacro],\n-) -> P<ast::Item> {\n-    // We're the ones filling in this Vec,\n-    // so it should be empty to start with\n-    assert!(ast_krate.proc_macros.is_empty());\n-\n+fn mk_decls(cx: &mut ExtCtxt<'_>, macros: &[ProcMacro]) -> P<ast::Item> {\n     let expn_id = cx.resolver.expansion_for_ast_pass(\n         DUMMY_SP,\n         AstPass::ProcMacroHarness,\n@@ -316,26 +307,25 @@ fn mk_decls(\n     let attr = Ident::new(sym::attr, span);\n     let bang = Ident::new(sym::bang, span);\n \n-    let krate_ref = RefCell::new(ast_krate);\n-\n-    // We add NodeIds to 'krate.proc_macros' in the order\n+    // We add NodeIds to 'resolver.proc_macros' in the order\n     // that we generate expressions. The position of each NodeId\n     // in the 'proc_macros' Vec corresponds to its position\n     // in the static array that will be generated\n     let decls = {\n-        let local_path =\n-            |sp: Span, name| cx.expr_path(cx.path(sp.with_ctxt(span.ctxt()), vec![name]));\n-        let proc_macro_ty_method_path = |method| {\n+        let local_path = |cx: &ExtCtxt<'_>, sp: Span, name| {\n+            cx.expr_path(cx.path(sp.with_ctxt(span.ctxt()), vec![name]))\n+        };\n+        let proc_macro_ty_method_path = |cx: &ExtCtxt<'_>, method| {\n             cx.expr_path(cx.path(span, vec![proc_macro, bridge, client, proc_macro_ty, method]))\n         };\n         macros\n             .iter()\n             .map(|m| match m {\n                 ProcMacro::Derive(cd) => {\n-                    krate_ref.borrow_mut().proc_macros.push(cd.id);\n+                    cx.resolver.declare_proc_macro(cd.id);\n                     cx.expr_call(\n                         span,\n-                        proc_macro_ty_method_path(custom_derive),\n+                        proc_macro_ty_method_path(cx, custom_derive),\n                         vec![\n                             cx.expr_str(cd.span, cd.trait_name),\n                             cx.expr_vec_slice(\n@@ -345,23 +335,23 @@ fn mk_decls(\n                                     .map(|&s| cx.expr_str(cd.span, s))\n                                     .collect::<Vec<_>>(),\n                             ),\n-                            local_path(cd.span, cd.function_name),\n+                            local_path(cx, cd.span, cd.function_name),\n                         ],\n                     )\n                 }\n                 ProcMacro::Def(ca) => {\n-                    krate_ref.borrow_mut().proc_macros.push(ca.id);\n+                    cx.resolver.declare_proc_macro(ca.id);\n                     let ident = match ca.def_type {\n                         ProcMacroDefType::Attr => attr,\n                         ProcMacroDefType::Bang => bang,\n                     };\n \n                     cx.expr_call(\n                         span,\n-                        proc_macro_ty_method_path(ident),\n+                        proc_macro_ty_method_path(cx, ident),\n                         vec![\n                             cx.expr_str(ca.span, ca.function_name.name),\n-                            local_path(ca.span, ca.function_name),\n+                            local_path(cx, ca.span, ca.function_name),\n                         ],\n                     )\n                 }"}, {"sha": "35df8aae4babb99d5488b87b99234a5d4ce6d7d1", "filename": "compiler/rustc_expand/src/base.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/577a76f0031f727735410b99a5cc5f0b61b92eef/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/577a76f0031f727735410b99a5cc5f0b61b92eef/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbase.rs?ref=577a76f0031f727735410b99a5cc5f0b61b92eef", "patch": "@@ -894,6 +894,14 @@ pub trait ResolverExpand {\n     /// Decodes the proc-macro quoted span in the specified crate, with the specified id.\n     /// No caching is performed.\n     fn get_proc_macro_quoted_span(&self, krate: CrateNum, id: usize) -> Span;\n+\n+    /// The order of items in the HIR is unrelated to the order of\n+    /// items in the AST. However, we generate proc macro harnesses\n+    /// based on the AST order, and later refer to these harnesses\n+    /// from the HIR. This field keeps track of the order in which\n+    /// we generated proc macros harnesses, so that we can map\n+    /// HIR proc macros items back to their harness items.\n+    fn declare_proc_macro(&mut self, id: NodeId);\n }\n \n #[derive(Clone, Default)]"}, {"sha": "a43ef9bb1a0b0310d8d0fc6bee34674323cd1555", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/577a76f0031f727735410b99a5cc5f0b61b92eef/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/577a76f0031f727735410b99a5cc5f0b61b92eef/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=577a76f0031f727735410b99a5cc5f0b61b92eef", "patch": "@@ -672,20 +672,10 @@ pub struct ModuleItems {\n pub struct Crate<'hir> {\n     pub owners: IndexVec<LocalDefId, Option<OwnerNode<'hir>>>,\n     pub bodies: BTreeMap<BodyId, Body<'hir>>,\n-    pub trait_impls: BTreeMap<DefId, Vec<LocalDefId>>,\n-\n-    /// A list of the body ids written out in the order in which they\n-    /// appear in the crate. If you're going to process all the bodies\n-    /// in the crate, you should iterate over this list rather than the keys\n-    /// of bodies.\n-    pub body_ids: Vec<BodyId>,\n \n     /// A list of modules written out in the order in which they\n     /// appear in the crate. This includes the main crate module.\n     pub modules: BTreeMap<LocalDefId, ModuleItems>,\n-    /// A list of proc macro HirIds, written out in the order in which\n-    /// they are declared in the static array generated by proc_macro_harness.\n-    pub proc_macros: Vec<HirId>,\n \n     /// Map indicating what traits are in scope for places where this\n     /// is relevant; generated by resolve."}, {"sha": "7127ec57c08c32f7ff2da687e45bd29e0af9c5d6", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/577a76f0031f727735410b99a5cc5f0b61b92eef/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/577a76f0031f727735410b99a5cc5f0b61b92eef/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=577a76f0031f727735410b99a5cc5f0b61b92eef", "patch": "@@ -324,7 +324,7 @@ pub fn configure_and_expand(\n         };\n \n         let extern_mod_loaded = |ident: Ident, attrs, items, span| {\n-            let krate = ast::Crate { attrs, items, span, proc_macros: vec![] };\n+            let krate = ast::Crate { attrs, items, span };\n             pre_expansion_lint(sess, lint_store, &krate, &ident.name.as_str());\n             (krate.attrs, krate.items)\n         };"}, {"sha": "d8b9a4799760ef3d9cf79db8932c527a512de6ae", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/577a76f0031f727735410b99a5cc5f0b61b92eef/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/577a76f0031f727735410b99a5cc5f0b61b92eef/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=577a76f0031f727735410b99a5cc5f0b61b92eef", "patch": "@@ -454,7 +454,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         let table = self.tcx.resolutions(()).definitions.def_path_table();\n         if self.is_proc_macro {\n             for def_index in std::iter::once(CRATE_DEF_INDEX)\n-                .chain(self.tcx.hir().krate().proc_macros.iter().map(|p| p.owner.local_def_index))\n+                .chain(self.tcx.resolutions(()).proc_macros.iter().map(|p| p.local_def_index))\n             {\n                 let def_key = self.lazy(table.def_key(def_index));\n                 let def_path_hash = self.lazy(table.def_path_hash(def_index));\n@@ -1630,7 +1630,8 @@ impl EncodeContext<'a, 'tcx> {\n \n             let proc_macro_decls_static = tcx.proc_macro_decls_static(()).unwrap().local_def_index;\n             let stability = tcx.lookup_stability(DefId::local(CRATE_DEF_INDEX)).copied();\n-            let macros = self.lazy(hir.krate().proc_macros.iter().map(|p| p.owner.local_def_index));\n+            let macros =\n+                self.lazy(tcx.resolutions(()).proc_macros.iter().map(|p| p.local_def_index));\n             let spans = self.tcx.sess.parse_sess.proc_macro_quoted_spans();\n             for (i, span) in spans.into_iter().enumerate() {\n                 let span = self.lazy(span);\n@@ -1649,13 +1650,14 @@ impl EncodeContext<'a, 'tcx> {\n             // Normally, this information is encoded when we walk the items\n             // defined in this crate. However, we skip doing that for proc-macro crates,\n             // so we manually encode just the information that we need\n-            for proc_macro in &hir.krate().proc_macros {\n-                let id = proc_macro.owner.local_def_index;\n-                let mut name = hir.name(*proc_macro);\n-                let span = hir.span(*proc_macro);\n+            for &proc_macro in &tcx.resolutions(()).proc_macros {\n+                let id = proc_macro;\n+                let proc_macro = hir.local_def_id_to_hir_id(proc_macro);\n+                let mut name = hir.name(proc_macro);\n+                let span = hir.span(proc_macro);\n                 // Proc-macros may have attributes like `#[allow_internal_unstable]`,\n                 // so downstream crates need access to them.\n-                let attrs = hir.attrs(*proc_macro);\n+                let attrs = hir.attrs(proc_macro);\n                 let macro_kind = if tcx.sess.contains_name(attrs, sym::proc_macro) {\n                     MacroKind::Bang\n                 } else if tcx.sess.contains_name(attrs, sym::proc_macro_attribute) {\n@@ -1673,10 +1675,10 @@ impl EncodeContext<'a, 'tcx> {\n                     bug!(\"Unknown proc-macro type for item {:?}\", id);\n                 };\n \n-                let mut def_key = self.tcx.hir().def_key(proc_macro.owner);\n+                let mut def_key = self.tcx.hir().def_key(id);\n                 def_key.disambiguated_data.data = DefPathData::MacroNs(name);\n \n-                let def_id = DefId::local(id);\n+                let def_id = id.to_def_id();\n                 record!(self.tables.def_kind[def_id] <- DefKind::Macro(macro_kind));\n                 record!(self.tables.kind[def_id] <- EntryKind::ProcMacro(macro_kind));\n                 record!(self.tables.attributes[def_id] <- attrs);"}, {"sha": "34aee4f1b3b3fc24703738a8be4c59927c4532c0", "filename": "compiler/rustc_middle/src/hir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/577a76f0031f727735410b99a5cc5f0b61b92eef/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/577a76f0031f727735410b99a5cc5f0b61b92eef/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs?ref=577a76f0031f727735410b99a5cc5f0b61b92eef", "patch": "@@ -170,7 +170,7 @@ pub fn provide(providers: &mut Providers) {\n         }\n     };\n     providers.opt_def_kind = |tcx, def_id| tcx.hir().opt_def_kind(def_id.expect_local());\n-    providers.all_local_trait_impls = |tcx, ()| &tcx.hir_crate(()).trait_impls;\n+    providers.all_local_trait_impls = |tcx, ()| &tcx.resolutions(()).trait_impls;\n     providers.expn_that_defined = |tcx, id| {\n         let id = id.expect_local();\n         tcx.resolutions(()).definitions.expansion_that_defined(id)"}, {"sha": "d01ca27b8511895b78102b6c087c1cd496e33fb1", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/577a76f0031f727735410b99a5cc5f0b61b92eef/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/577a76f0031f727735410b99a5cc5f0b61b92eef/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=577a76f0031f727735410b99a5cc5f0b61b92eef", "patch": "@@ -44,6 +44,7 @@ use rustc_span::Span;\n use rustc_target::abi::Align;\n \n use std::cmp::Ordering;\n+use std::collections::BTreeMap;\n use std::hash::{Hash, Hasher};\n use std::ops::ControlFlow;\n use std::{fmt, ptr, str};\n@@ -132,6 +133,10 @@ pub struct ResolverOutputs {\n     /// via `extern crate` item and not `--extern` option or compiler built-in.\n     pub extern_prelude: FxHashMap<Symbol, bool>,\n     pub main_def: Option<MainDefinition>,\n+    pub trait_impls: BTreeMap<DefId, Vec<LocalDefId>>,\n+    /// A list of proc macro LocalDefIds, written out in the order in which\n+    /// they are declared in the static array generated by proc_macro_harness.\n+    pub proc_macros: Vec<LocalDefId>,\n }\n \n #[derive(Clone, Copy, Debug)]\n@@ -1677,16 +1682,12 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// crate. If you would prefer to iterate over the bodies\n     /// themselves, you can do `self.hir().krate().body_ids.iter()`.\n     pub fn body_owners(self) -> impl Iterator<Item = LocalDefId> + Captures<'tcx> + 'tcx {\n-        self.hir()\n-            .krate()\n-            .body_ids\n-            .iter()\n-            .map(move |&body_id| self.hir().body_owner_def_id(body_id))\n+        self.hir().krate().bodies.keys().map(move |&body_id| self.hir().body_owner_def_id(body_id))\n     }\n \n     pub fn par_body_owners<F: Fn(LocalDefId) + sync::Sync + sync::Send>(self, f: F) {\n-        par_iter(&self.hir().krate().body_ids)\n-            .for_each(|&body_id| f(self.hir().body_owner_def_id(body_id)));\n+        par_iter(&self.hir().krate().bodies)\n+            .for_each(|(&body_id, _)| f(self.hir().body_owner_def_id(body_id)));\n     }\n \n     pub fn provided_trait_methods(self, id: DefId) -> impl 'tcx + Iterator<Item = &'tcx AssocItem> {"}, {"sha": "10c73fd64bc198cece7158a1ea964629b8d985d8", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/577a76f0031f727735410b99a5cc5f0b61b92eef/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/577a76f0031f727735410b99a5cc5f0b61b92eef/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=577a76f0031f727735410b99a5cc5f0b61b92eef", "patch": "@@ -26,8 +26,7 @@ impl<'a> Parser<'a> {\n     /// Parses a source module as a crate. This is the main entry point for the parser.\n     pub fn parse_crate_mod(&mut self) -> PResult<'a, ast::Crate> {\n         let (attrs, items, span) = self.parse_mod(&token::Eof)?;\n-        let proc_macros = Vec::new(); // Filled in by `proc_macro_harness::inject()`.\n-        Ok(ast::Crate { attrs, items, span, proc_macros })\n+        Ok(ast::Crate { attrs, items, span })\n     }\n \n     /// Parses a `mod <foo> { ... }` or `mod <foo>;` item."}, {"sha": "7b65ab2acf6c454cf10a174a085dfa9930b4cb58", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/577a76f0031f727735410b99a5cc5f0b61b92eef/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/577a76f0031f727735410b99a5cc5f0b61b92eef/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=577a76f0031f727735410b99a5cc5f0b61b92eef", "patch": "@@ -952,6 +952,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n         match item.kind {\n             ItemKind::TyAlias(box TyAliasKind(_, ref generics, _, _))\n             | ItemKind::Fn(box FnKind(_, _, ref generics, _)) => {\n+                self.compute_num_lifetime_params(item.id, generics);\n                 self.with_generic_param_rib(generics, ItemRibKind(HasGenericParams::Yes), |this| {\n                     visit::walk_item(this, item)\n                 });\n@@ -960,6 +961,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n             ItemKind::Enum(_, ref generics)\n             | ItemKind::Struct(_, ref generics)\n             | ItemKind::Union(_, ref generics) => {\n+                self.compute_num_lifetime_params(item.id, generics);\n                 self.resolve_adt(item, generics);\n             }\n \n@@ -970,10 +972,12 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                 items: ref impl_items,\n                 ..\n             }) => {\n+                self.compute_num_lifetime_params(item.id, generics);\n                 self.resolve_implementation(generics, of_trait, &self_ty, item.id, impl_items);\n             }\n \n             ItemKind::Trait(box TraitKind(.., ref generics, ref bounds, ref trait_items)) => {\n+                self.compute_num_lifetime_params(item.id, generics);\n                 // Create a new rib for the trait-wide type parameters.\n                 self.with_generic_param_rib(generics, ItemRibKind(HasGenericParams::Yes), |this| {\n                     let local_def_id = this.r.local_def_id(item.id).to_def_id();\n@@ -1025,6 +1029,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n             }\n \n             ItemKind::TraitAlias(ref generics, ref bounds) => {\n+                self.compute_num_lifetime_params(item.id, generics);\n                 // Create a new rib for the trait-wide type parameters.\n                 self.with_generic_param_rib(generics, ItemRibKind(HasGenericParams::Yes), |this| {\n                     let local_def_id = this.r.local_def_id(item.id).to_def_id();\n@@ -1276,7 +1281,14 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n             this.with_self_rib(Res::SelfTy(None, None), |this| {\n                 // Resolve the trait reference, if necessary.\n                 this.with_optional_trait_ref(opt_trait_reference.as_ref(), |this, trait_id| {\n-                    let item_def_id = this.r.local_def_id(item_id).to_def_id();\n+                    let item_def_id = this.r.local_def_id(item_id);\n+\n+                    // Register the trait definitions from here.\n+                    if let Some(trait_id) = trait_id {\n+                        this.r.trait_impls.entry(trait_id).or_default().push(item_def_id);\n+                    }\n+\n+                    let item_def_id = item_def_id.to_def_id();\n                     this.with_self_rib(Res::SelfTy(trait_id, Some((item_def_id, false))), |this| {\n                         if let Some(trait_ref) = opt_trait_reference.as_ref() {\n                             // Resolve type arguments in the trait path.\n@@ -2463,6 +2475,16 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n             Some((ident.name, ns)),\n         )\n     }\n+\n+    fn compute_num_lifetime_params(&mut self, id: NodeId, generics: &Generics) {\n+        let def_id = self.r.local_def_id(id);\n+        let count = generics\n+            .params\n+            .iter()\n+            .filter(|param| matches!(param.kind, ast::GenericParamKind::Lifetime { .. }))\n+            .count();\n+        self.r.item_generics_num_lifetimes.insert(def_id, count);\n+    }\n }\n \n impl<'a> Resolver<'a> {"}, {"sha": "152d34fd63558df8e2c8caac358cae5b6f7f8608", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/577a76f0031f727735410b99a5cc5f0b61b92eef/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/577a76f0031f727735410b99a5cc5f0b61b92eef/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=577a76f0031f727735410b99a5cc5f0b61b92eef", "patch": "@@ -60,7 +60,7 @@ use rustc_span::{Span, DUMMY_SP};\n \n use smallvec::{smallvec, SmallVec};\n use std::cell::{Cell, RefCell};\n-use std::collections::BTreeSet;\n+use std::collections::{BTreeMap, BTreeSet};\n use std::ops::ControlFlow;\n use std::{cmp, fmt, iter, ptr};\n use tracing::debug;\n@@ -1030,8 +1030,14 @@ pub struct Resolver<'a> {\n     trait_impl_items: FxHashSet<LocalDefId>,\n \n     legacy_const_generic_args: FxHashMap<DefId, Option<Vec<usize>>>,\n+    /// Amount of lifetime parameters for each item in the crate.\n+    item_generics_num_lifetimes: FxHashMap<LocalDefId, usize>,\n \n     main_def: Option<MainDefinition>,\n+    trait_impls: BTreeMap<DefId, Vec<LocalDefId>>,\n+    /// A list of proc macro LocalDefIds, written out in the order in which\n+    /// they are declared in the static array generated by proc_macro_harness.\n+    proc_macros: Vec<NodeId>,\n }\n \n /// Nothing really interesting here; it just provides memory for the rest of the crate.\n@@ -1109,8 +1115,12 @@ impl ResolverAstLowering for Resolver<'_> {\n         }\n     }\n \n-    fn item_generics_num_lifetimes(&self, def_id: DefId, sess: &Session) -> usize {\n-        self.cstore().item_generics_num_lifetimes(def_id, sess)\n+    fn item_generics_num_lifetimes(&self, def_id: DefId) -> usize {\n+        if let Some(def_id) = def_id.as_local() {\n+            self.item_generics_num_lifetimes[&def_id]\n+        } else {\n+            self.cstore().item_generics_num_lifetimes(def_id, self.session)\n+        }\n     }\n \n     fn legacy_const_generic_args(&mut self, expr: &Expr) -> Option<Vec<usize>> {\n@@ -1390,7 +1400,10 @@ impl<'a> Resolver<'a> {\n             next_disambiguator: Default::default(),\n             trait_impl_items: Default::default(),\n             legacy_const_generic_args: Default::default(),\n+            item_generics_num_lifetimes: Default::default(),\n             main_def: Default::default(),\n+            trait_impls: Default::default(),\n+            proc_macros: Default::default(),\n         };\n \n         let root_parent_scope = ParentScope::module(graph_root, &resolver);\n@@ -1425,6 +1438,7 @@ impl<'a> Resolver<'a> {\n     }\n \n     pub fn into_outputs(self) -> ResolverOutputs {\n+        let proc_macros = self.proc_macros.iter().map(|id| self.local_def_id(*id)).collect();\n         let definitions = self.definitions;\n         let visibilities = self.visibilities;\n         let extern_crate_map = self.extern_crate_map;\n@@ -1448,10 +1462,13 @@ impl<'a> Resolver<'a> {\n                 .map(|(ident, entry)| (ident.name, entry.introduced_by_item))\n                 .collect(),\n             main_def,\n+            trait_impls: self.trait_impls,\n+            proc_macros,\n         }\n     }\n \n     pub fn clone_outputs(&self) -> ResolverOutputs {\n+        let proc_macros = self.proc_macros.iter().map(|id| self.local_def_id(*id)).collect();\n         ResolverOutputs {\n             definitions: self.definitions.clone(),\n             cstore: Box::new(self.cstore().clone()),\n@@ -1467,6 +1484,8 @@ impl<'a> Resolver<'a> {\n                 .map(|(ident, entry)| (ident.name, entry.introduced_by_item))\n                 .collect(),\n             main_def: self.main_def.clone(),\n+            trait_impls: self.trait_impls.clone(),\n+            proc_macros,\n         }\n     }\n "}, {"sha": "6dc3aa0888a8be605c2e114ecb6555cdd3db28a4", "filename": "compiler/rustc_resolve/src/macros.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/577a76f0031f727735410b99a5cc5f0b61b92eef/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/577a76f0031f727735410b99a5cc5f0b61b92eef/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs?ref=577a76f0031f727735410b99a5cc5f0b61b92eef", "patch": "@@ -466,6 +466,10 @@ impl<'a> ResolverExpand for Resolver<'a> {\n     fn get_proc_macro_quoted_span(&self, krate: CrateNum, id: usize) -> Span {\n         self.crate_loader.cstore().get_proc_macro_quoted_span_untracked(krate, id, self.session)\n     }\n+\n+    fn declare_proc_macro(&mut self, id: NodeId) {\n+        self.proc_macros.push(id)\n+    }\n }\n \n impl<'a> Resolver<'a> {"}, {"sha": "cb127880c62b315c41ee3bb6547ef463cd1358a4", "filename": "compiler/rustc_typeck/src/check_unused.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/577a76f0031f727735410b99a5cc5f0b61b92eef/compiler%2Frustc_typeck%2Fsrc%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/577a76f0031f727735410b99a5cc5f0b61b92eef/compiler%2Frustc_typeck%2Fsrc%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck_unused.rs?ref=577a76f0031f727735410b99a5cc5f0b61b92eef", "patch": "@@ -9,8 +9,7 @@ use rustc_span::{Span, Symbol};\n \n pub fn check_crate(tcx: TyCtxt<'_>) {\n     let mut used_trait_imports = FxHashSet::default();\n-    for &body_id in tcx.hir().krate().bodies.keys() {\n-        let item_def_id = tcx.hir().body_owner_def_id(body_id);\n+    for item_def_id in tcx.body_owners() {\n         let imports = tcx.used_trait_imports(item_def_id);\n         debug!(\"GatherVisitor: item_def_id={:?} with imports {:#?}\", item_def_id, imports);\n         used_trait_imports.extend(imports.iter());"}, {"sha": "7ac26a31872df4792b80aeb08af9b3658cae035f", "filename": "compiler/rustc_typeck/src/coherence/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/577a76f0031f727735410b99a5cc5f0b61b92eef/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/577a76f0031f727735410b99a5cc5f0b61b92eef/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fmod.rs?ref=577a76f0031f727735410b99a5cc5f0b61b92eef", "patch": "@@ -195,7 +195,7 @@ fn coherent_trait(tcx: TyCtxt<'_>, def_id: DefId) {\n }\n \n pub fn check_coherence(tcx: TyCtxt<'_>) {\n-    for &trait_def_id in tcx.hir().krate().trait_impls.keys() {\n+    for &trait_def_id in tcx.all_local_trait_impls(()).keys() {\n         tcx.ensure().coherent_trait(trait_def_id);\n     }\n "}, {"sha": "5edbcf4a2a7c939a327dc66b1a9e8042d31de97a", "filename": "src/test/ui/asm/type-check-1.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/577a76f0031f727735410b99a5cc5f0b61b92eef/src%2Ftest%2Fui%2Fasm%2Ftype-check-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/577a76f0031f727735410b99a5cc5f0b61b92eef/src%2Ftest%2Fui%2Fasm%2Ftype-check-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Ftype-check-1.stderr?ref=577a76f0031f727735410b99a5cc5f0b61b92eef", "patch": "@@ -25,6 +25,21 @@ LL |         let x = 0;\n LL |         asm!(\"{}\", const const_bar(x));\n    |                                    ^ non-constant value\n \n+error[E0308]: mismatched types\n+  --> $DIR/type-check-1.rs:48:26\n+   |\n+LL |         asm!(\"{}\", const 0f32);\n+   |                          ^^^^ expected integer, found `f32`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/type-check-1.rs:50:26\n+   |\n+LL |         asm!(\"{}\", const 0 as *mut u8);\n+   |                          ^^^^^^^^^^^^ expected integer, found *-ptr\n+   |\n+   = note:     expected type `{integer}`\n+           found raw pointer `*mut u8`\n+\n error: invalid asm output\n   --> $DIR/type-check-1.rs:10:29\n    |\n@@ -64,21 +79,6 @@ LL |         asm!(\"{}\", inout(reg) v[..]);\n    = help: the trait `Sized` is not implemented for `[u64]`\n    = note: all inline asm arguments must have a statically known size\n \n-error[E0308]: mismatched types\n-  --> $DIR/type-check-1.rs:48:26\n-   |\n-LL |         asm!(\"{}\", const 0f32);\n-   |                          ^^^^ expected integer, found `f32`\n-\n-error[E0308]: mismatched types\n-  --> $DIR/type-check-1.rs:50:26\n-   |\n-LL |         asm!(\"{}\", const 0 as *mut u8);\n-   |                          ^^^^^^^^^^^^ expected integer, found *-ptr\n-   |\n-   = note:     expected type `{integer}`\n-           found raw pointer `*mut u8`\n-\n error[E0308]: mismatched types\n   --> $DIR/type-check-1.rs:60:25\n    |"}, {"sha": "8961655ede36f6fc4dad99eeba8bb18096f636ba", "filename": "src/test/ui/ast-json/ast-json-noexpand-output.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/577a76f0031f727735410b99a5cc5f0b61b92eef/src%2Ftest%2Fui%2Fast-json%2Fast-json-noexpand-output.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/577a76f0031f727735410b99a5cc5f0b61b92eef/src%2Ftest%2Fui%2Fast-json%2Fast-json-noexpand-output.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fast-json%2Fast-json-noexpand-output.stdout?ref=577a76f0031f727735410b99a5cc5f0b61b92eef", "patch": "@@ -1 +1 @@\n-{\"attrs\":[{\"kind\":{\"variant\":\"Normal\",\"fields\":[{\"path\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"crate_type\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}],\"tokens\":null},\"args\":{\"variant\":\"Eq\",\"fields\":[{\"lo\":0,\"hi\":0},{\"kind\":{\"variant\":\"Interpolated\",\"fields\":[{\"variant\":\"NtExpr\",\"fields\":[{\"id\":0,\"kind\":{\"variant\":\"Lit\",\"fields\":[{\"token\":{\"kind\":\"Str\",\"symbol\":\"lib\",\"suffix\":null},\"kind\":{\"variant\":\"Str\",\"fields\":[\"lib\",\"Cooked\"]},\"span\":{\"lo\":0,\"hi\":0}}]},\"span\":{\"lo\":0,\"hi\":0},\"attrs\":{\"0\":null},\"tokens\":{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Literal\",\"fields\":[{\"kind\":\"Str\",\"symbol\":\"lib\",\"suffix\":null}]},\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"]]}}]}]},\"span\":{\"lo\":0,\"hi\":0}}]},\"tokens\":null},{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Pound\",\"span\":{\"lo\":0,\"hi\":0}}]},\"Joint\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Not\",\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"],[{\"variant\":\"Delimited\",\"fields\":[{\"open\":{\"lo\":0,\"hi\":0},\"close\":{\"lo\":0,\"hi\":0}},\"Bracket\",{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Ident\",\"fields\":[\"crate_type\",false]},\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Eq\",\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Literal\",\"fields\":[{\"kind\":\"Str\",\"symbol\":\"lib\",\"suffix\":null}]},\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"]]}]},\"Alone\"]]}]},\"id\":null,\"style\":\"Inner\",\"span\":{\"lo\":0,\"hi\":0}}],\"items\":[{\"attrs\":[],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"kind\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0},\"tokens\":null},\"ident\":{\"name\":\"core\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"ExternCrate\",\"fields\":[null]},\"tokens\":null}],\"span\":{\"lo\":0,\"hi\":0},\"proc_macros\":[]}\n+{\"attrs\":[{\"kind\":{\"variant\":\"Normal\",\"fields\":[{\"path\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"crate_type\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}],\"tokens\":null},\"args\":{\"variant\":\"Eq\",\"fields\":[{\"lo\":0,\"hi\":0},{\"kind\":{\"variant\":\"Interpolated\",\"fields\":[{\"variant\":\"NtExpr\",\"fields\":[{\"id\":0,\"kind\":{\"variant\":\"Lit\",\"fields\":[{\"token\":{\"kind\":\"Str\",\"symbol\":\"lib\",\"suffix\":null},\"kind\":{\"variant\":\"Str\",\"fields\":[\"lib\",\"Cooked\"]},\"span\":{\"lo\":0,\"hi\":0}}]},\"span\":{\"lo\":0,\"hi\":0},\"attrs\":{\"0\":null},\"tokens\":{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Literal\",\"fields\":[{\"kind\":\"Str\",\"symbol\":\"lib\",\"suffix\":null}]},\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"]]}}]}]},\"span\":{\"lo\":0,\"hi\":0}}]},\"tokens\":null},{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Pound\",\"span\":{\"lo\":0,\"hi\":0}}]},\"Joint\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Not\",\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"],[{\"variant\":\"Delimited\",\"fields\":[{\"open\":{\"lo\":0,\"hi\":0},\"close\":{\"lo\":0,\"hi\":0}},\"Bracket\",{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Ident\",\"fields\":[\"crate_type\",false]},\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Eq\",\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Literal\",\"fields\":[{\"kind\":\"Str\",\"symbol\":\"lib\",\"suffix\":null}]},\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"]]}]},\"Alone\"]]}]},\"id\":null,\"style\":\"Inner\",\"span\":{\"lo\":0,\"hi\":0}}],\"items\":[{\"attrs\":[],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"kind\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0},\"tokens\":null},\"ident\":{\"name\":\"core\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"ExternCrate\",\"fields\":[null]},\"tokens\":null}],\"span\":{\"lo\":0,\"hi\":0}}"}, {"sha": "082f04134ce8f387eebe81f373327ae5dd12fd8a", "filename": "src/test/ui/ast-json/ast-json-output.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/577a76f0031f727735410b99a5cc5f0b61b92eef/src%2Ftest%2Fui%2Fast-json%2Fast-json-output.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/577a76f0031f727735410b99a5cc5f0b61b92eef/src%2Ftest%2Fui%2Fast-json%2Fast-json-output.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fast-json%2Fast-json-output.stdout?ref=577a76f0031f727735410b99a5cc5f0b61b92eef", "patch": "@@ -1 +1 @@\n-{\"attrs\":[{\"kind\":{\"variant\":\"Normal\",\"fields\":[{\"path\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"crate_type\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}],\"tokens\":null},\"args\":{\"variant\":\"Eq\",\"fields\":[{\"lo\":0,\"hi\":0},{\"kind\":{\"variant\":\"Interpolated\",\"fields\":[{\"variant\":\"NtExpr\",\"fields\":[{\"id\":0,\"kind\":{\"variant\":\"Lit\",\"fields\":[{\"token\":{\"kind\":\"Str\",\"symbol\":\"lib\",\"suffix\":null},\"kind\":{\"variant\":\"Str\",\"fields\":[\"lib\",\"Cooked\"]},\"span\":{\"lo\":0,\"hi\":0}}]},\"span\":{\"lo\":0,\"hi\":0},\"attrs\":{\"0\":null},\"tokens\":{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Literal\",\"fields\":[{\"kind\":\"Str\",\"symbol\":\"lib\",\"suffix\":null}]},\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"]]}}]}]},\"span\":{\"lo\":0,\"hi\":0}}]},\"tokens\":null},{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Pound\",\"span\":{\"lo\":0,\"hi\":0}}]},\"Joint\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Not\",\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"],[{\"variant\":\"Delimited\",\"fields\":[{\"open\":{\"lo\":0,\"hi\":0},\"close\":{\"lo\":0,\"hi\":0}},\"Bracket\",{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Ident\",\"fields\":[\"crate_type\",false]},\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Eq\",\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Literal\",\"fields\":[{\"kind\":\"Str\",\"symbol\":\"lib\",\"suffix\":null}]},\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"]]}]},\"Alone\"]]}]},\"id\":null,\"style\":\"Inner\",\"span\":{\"lo\":0,\"hi\":0}}],\"items\":[{\"attrs\":[{\"kind\":{\"variant\":\"Normal\",\"fields\":[{\"path\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"prelude_import\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}],\"tokens\":null},\"args\":\"Empty\",\"tokens\":null},null]},\"id\":null,\"style\":\"Outer\",\"span\":{\"lo\":0,\"hi\":0}}],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"kind\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0},\"tokens\":null},\"ident\":{\"name\":\"\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"Use\",\"fields\":[{\"prefix\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"{{root}}\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null},{\"ident\":{\"name\":\"std\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null},{\"ident\":{\"name\":\"prelude\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null},{\"ident\":{\"name\":\"rust_2015\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}],\"tokens\":null},\"kind\":\"Glob\",\"span\":{\"lo\":0,\"hi\":0}}]},\"tokens\":null},{\"attrs\":[{\"kind\":{\"variant\":\"Normal\",\"fields\":[{\"path\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"macro_use\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}],\"tokens\":null},\"args\":\"Empty\",\"tokens\":null},null]},\"id\":null,\"style\":\"Outer\",\"span\":{\"lo\":0,\"hi\":0}}],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"kind\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0},\"tokens\":null},\"ident\":{\"name\":\"std\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"ExternCrate\",\"fields\":[null]},\"tokens\":null},{\"attrs\":[],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"kind\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0},\"tokens\":null},\"ident\":{\"name\":\"core\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"ExternCrate\",\"fields\":[null]},\"tokens\":null}],\"span\":{\"lo\":0,\"hi\":0},\"proc_macros\":[]}\n+{\"attrs\":[{\"kind\":{\"variant\":\"Normal\",\"fields\":[{\"path\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"crate_type\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}],\"tokens\":null},\"args\":{\"variant\":\"Eq\",\"fields\":[{\"lo\":0,\"hi\":0},{\"kind\":{\"variant\":\"Interpolated\",\"fields\":[{\"variant\":\"NtExpr\",\"fields\":[{\"id\":0,\"kind\":{\"variant\":\"Lit\",\"fields\":[{\"token\":{\"kind\":\"Str\",\"symbol\":\"lib\",\"suffix\":null},\"kind\":{\"variant\":\"Str\",\"fields\":[\"lib\",\"Cooked\"]},\"span\":{\"lo\":0,\"hi\":0}}]},\"span\":{\"lo\":0,\"hi\":0},\"attrs\":{\"0\":null},\"tokens\":{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Literal\",\"fields\":[{\"kind\":\"Str\",\"symbol\":\"lib\",\"suffix\":null}]},\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"]]}}]}]},\"span\":{\"lo\":0,\"hi\":0}}]},\"tokens\":null},{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Pound\",\"span\":{\"lo\":0,\"hi\":0}}]},\"Joint\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Not\",\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"],[{\"variant\":\"Delimited\",\"fields\":[{\"open\":{\"lo\":0,\"hi\":0},\"close\":{\"lo\":0,\"hi\":0}},\"Bracket\",{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Ident\",\"fields\":[\"crate_type\",false]},\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Eq\",\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Literal\",\"fields\":[{\"kind\":\"Str\",\"symbol\":\"lib\",\"suffix\":null}]},\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"]]}]},\"Alone\"]]}]},\"id\":null,\"style\":\"Inner\",\"span\":{\"lo\":0,\"hi\":0}}],\"items\":[{\"attrs\":[{\"kind\":{\"variant\":\"Normal\",\"fields\":[{\"path\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"prelude_import\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}],\"tokens\":null},\"args\":\"Empty\",\"tokens\":null},null]},\"id\":null,\"style\":\"Outer\",\"span\":{\"lo\":0,\"hi\":0}}],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"kind\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0},\"tokens\":null},\"ident\":{\"name\":\"\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"Use\",\"fields\":[{\"prefix\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"{{root}}\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null},{\"ident\":{\"name\":\"std\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null},{\"ident\":{\"name\":\"prelude\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null},{\"ident\":{\"name\":\"rust_2015\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}],\"tokens\":null},\"kind\":\"Glob\",\"span\":{\"lo\":0,\"hi\":0}}]},\"tokens\":null},{\"attrs\":[{\"kind\":{\"variant\":\"Normal\",\"fields\":[{\"path\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"macro_use\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}],\"tokens\":null},\"args\":\"Empty\",\"tokens\":null},null]},\"id\":null,\"style\":\"Outer\",\"span\":{\"lo\":0,\"hi\":0}}],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"kind\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0},\"tokens\":null},\"ident\":{\"name\":\"std\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"ExternCrate\",\"fields\":[null]},\"tokens\":null},{\"attrs\":[],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"kind\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0},\"tokens\":null},\"ident\":{\"name\":\"core\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"ExternCrate\",\"fields\":[null]},\"tokens\":null}],\"span\":{\"lo\":0,\"hi\":0}}"}, {"sha": "14e1667038965b772576cbc3106e1b071bcc5d9a", "filename": "src/test/ui/borrowck/issue-64453.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/577a76f0031f727735410b99a5cc5f0b61b92eef/src%2Ftest%2Fui%2Fborrowck%2Fissue-64453.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/577a76f0031f727735410b99a5cc5f0b61b92eef/src%2Ftest%2Fui%2Fborrowck%2Fissue-64453.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-64453.stderr?ref=577a76f0031f727735410b99a5cc5f0b61b92eef", "patch": "@@ -1,9 +1,3 @@\n-error[E0507]: cannot move out of static item `settings_dir`\n-  --> $DIR/issue-64453.rs:14:37\n-   |\n-LL |     let settings_data = from_string(settings_dir);\n-   |                                     ^^^^^^^^^^^^ move occurs because `settings_dir` has type `String`, which does not implement the `Copy` trait\n-\n error: `Arguments::<'a>::new_v1` is not yet stable as a const fn\n   --> $DIR/issue-64453.rs:4:31\n    |\n@@ -21,6 +15,12 @@ LL | static settings_dir: String = format!(\"\");\n    |\n    = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n+error[E0507]: cannot move out of static item `settings_dir`\n+  --> $DIR/issue-64453.rs:14:37\n+   |\n+LL |     let settings_data = from_string(settings_dir);\n+   |                                     ^^^^^^^^^^^^ move occurs because `settings_dir` has type `String`, which does not implement the `Copy` trait\n+\n error: aborting due to 3 previous errors\n \n Some errors have detailed explanations: E0015, E0507."}, {"sha": "8d779bee265cf2914c24c6f12b3272bb35578e5c", "filename": "src/test/ui/const-generics/type_mismatch.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/577a76f0031f727735410b99a5cc5f0b61b92eef/src%2Ftest%2Fui%2Fconst-generics%2Ftype_mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/577a76f0031f727735410b99a5cc5f0b61b92eef/src%2Ftest%2Fui%2Fconst-generics%2Ftype_mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftype_mismatch.stderr?ref=577a76f0031f727735410b99a5cc5f0b61b92eef", "patch": "@@ -4,12 +4,6 @@ error[E0308]: mismatched types\n LL |     bar::<N>()\n    |           ^ expected `u8`, found `usize`\n \n-error[E0308]: mismatched types\n-  --> $DIR/type_mismatch.rs:5:31\n-   |\n-LL | fn bar<const N: u8>() -> [u8; N] {}\n-   |                               ^ expected `usize`, found `u8`\n-\n error[E0308]: mismatched types\n   --> $DIR/type_mismatch.rs:5:26\n    |\n@@ -18,6 +12,12 @@ LL | fn bar<const N: u8>() -> [u8; N] {}\n    |    |\n    |    implicitly returns `()` as its body has no tail or `return` expression\n \n+error[E0308]: mismatched types\n+  --> $DIR/type_mismatch.rs:5:31\n+   |\n+LL | fn bar<const N: u8>() -> [u8; N] {}\n+   |                               ^ expected `usize`, found `u8`\n+\n error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0308`."}, {"sha": "33014a1500cf7061793586bf57f37ac5db885ea3", "filename": "src/test/ui/consts/const-extern-fn/const-extern-fn-requires-unsafe.mir.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/577a76f0031f727735410b99a5cc5f0b61b92eef/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-requires-unsafe.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/577a76f0031f727735410b99a5cc5f0b61b92eef/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-requires-unsafe.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-requires-unsafe.mir.stderr?ref=577a76f0031f727735410b99a5cc5f0b61b92eef", "patch": "@@ -1,16 +1,16 @@\n error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n-  --> $DIR/const-extern-fn-requires-unsafe.rs:11:5\n+  --> $DIR/const-extern-fn-requires-unsafe.rs:9:17\n    |\n-LL |     foo();\n-   |     ^^^^^ call to unsafe function\n+LL |     let a: [u8; foo()];\n+   |                 ^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n-  --> $DIR/const-extern-fn-requires-unsafe.rs:9:17\n+  --> $DIR/const-extern-fn-requires-unsafe.rs:11:5\n    |\n-LL |     let a: [u8; foo()];\n-   |                 ^^^^^ call to unsafe function\n+LL |     foo();\n+   |     ^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n "}, {"sha": "3349e9813a809e08a19bdc9e5ec2ca27c49d80db", "filename": "src/test/ui/consts/issue-66693.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/577a76f0031f727735410b99a5cc5f0b61b92eef/src%2Ftest%2Fui%2Fconsts%2Fissue-66693.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/577a76f0031f727735410b99a5cc5f0b61b92eef/src%2Ftest%2Fui%2Fconsts%2Fissue-66693.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-66693.stderr?ref=577a76f0031f727735410b99a5cc5f0b61b92eef", "patch": "@@ -1,11 +1,3 @@\n-error: argument to `panic!()` in a const context must have type `&str`\n-  --> $DIR/issue-66693.rs:13:5\n-   |\n-LL |     panic!(&1);\n-   |     ^^^^^^^^^^^\n-   |\n-   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n error: argument to `panic!()` in a const context must have type `&str`\n   --> $DIR/issue-66693.rs:6:15\n    |\n@@ -22,5 +14,13 @@ LL | static _FOO: () = panic!(true);\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n+error: argument to `panic!()` in a const context must have type `&str`\n+  --> $DIR/issue-66693.rs:13:5\n+   |\n+LL |     panic!(&1);\n+   |     ^^^^^^^^^^^\n+   |\n+   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n error: aborting due to 3 previous errors\n "}, {"sha": "a029948ca3b82bba510816c6dc1d7fdbd3c6dd3c", "filename": "src/test/ui/issues/issue-47486.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/577a76f0031f727735410b99a5cc5f0b61b92eef/src%2Ftest%2Fui%2Fissues%2Fissue-47486.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/577a76f0031f727735410b99a5cc5f0b61b92eef/src%2Ftest%2Fui%2Fissues%2Fissue-47486.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-47486.stderr?ref=577a76f0031f727735410b99a5cc5f0b61b92eef", "patch": "@@ -1,15 +1,15 @@\n+error[E0282]: type annotations needed\n+  --> $DIR/issue-47486.rs:3:31\n+   |\n+LL |     [0u8; std::mem::size_of::<_>()];\n+   |                               ^ cannot infer type\n+\n error[E0308]: mismatched types\n   --> $DIR/issue-47486.rs:2:10\n    |\n LL |     () < std::mem::size_of::<_>();\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found `usize`\n \n-error[E0282]: type annotations needed\n-  --> $DIR/issue-47486.rs:3:11\n-   |\n-LL |     [0u8; std::mem::size_of::<_>()];\n-   |           ^^^^^^^^^^^^^^^^^^^^^^ cannot infer type\n-\n error: aborting due to 2 previous errors\n \n Some errors have detailed explanations: E0282, E0308."}, {"sha": "d9dac5de6226c304f9c044686fb98ccabfddec5c", "filename": "src/test/ui/liveness/liveness-return-last-stmt-semi.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/577a76f0031f727735410b99a5cc5f0b61b92eef/src%2Ftest%2Fui%2Fliveness%2Fliveness-return-last-stmt-semi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/577a76f0031f727735410b99a5cc5f0b61b92eef/src%2Ftest%2Fui%2Fliveness%2Fliveness-return-last-stmt-semi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-return-last-stmt-semi.stderr?ref=577a76f0031f727735410b99a5cc5f0b61b92eef", "patch": "@@ -1,17 +1,3 @@\n-error[E0308]: mismatched types\n-  --> $DIR/liveness-return-last-stmt-semi.rs:4:41\n-   |\n-LL | macro_rules! test { () => { fn foo() -> i32 { 1; } } }\n-   |                                ---      ^^^    - help: consider removing this semicolon\n-   |                                |        |\n-   |                                |        expected `i32`, found `()`\n-   |                                implicitly returns `()` as its body has no tail or `return` expression\n-...\n-LL |     test!();\n-   |     -------- in this macro invocation\n-   |\n-   = note: this error originates in the macro `test` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n error[E0308]: mismatched types\n   --> $DIR/liveness-return-last-stmt-semi.rs:7:19\n    |\n@@ -38,6 +24,20 @@ LL | fn baz(x: u64) -> u32 {\n    |    |\n    |    implicitly returns `()` as its body has no tail or `return` expression\n \n+error[E0308]: mismatched types\n+  --> $DIR/liveness-return-last-stmt-semi.rs:4:41\n+   |\n+LL | macro_rules! test { () => { fn foo() -> i32 { 1; } } }\n+   |                                ---      ^^^    - help: consider removing this semicolon\n+   |                                |        |\n+   |                                |        expected `i32`, found `()`\n+   |                                implicitly returns `()` as its body has no tail or `return` expression\n+...\n+LL |     test!();\n+   |     -------- in this macro invocation\n+   |\n+   = note: this error originates in the macro `test` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0308`."}, {"sha": "127c49957c1e55b3032a14cc937d70113c57370c", "filename": "src/test/ui/proc-macro/attribute-with-error.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/577a76f0031f727735410b99a5cc5f0b61b92eef/src%2Ftest%2Fui%2Fproc-macro%2Fattribute-with-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/577a76f0031f727735410b99a5cc5f0b61b92eef/src%2Ftest%2Fui%2Fproc-macro%2Fattribute-with-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fattribute-with-error.stderr?ref=577a76f0031f727735410b99a5cc5f0b61b92eef", "patch": "@@ -1,3 +1,11 @@\n+error[E0308]: mismatched types\n+  --> $DIR/attribute-with-error.rs:25:22\n+   |\n+LL |         let a: i32 = \"foo\";\n+   |                ---   ^^^^^ expected `i32`, found `&str`\n+   |                |\n+   |                expected due to this\n+\n error[E0308]: mismatched types\n   --> $DIR/attribute-with-error.rs:10:18\n    |\n@@ -14,14 +22,6 @@ LL |     let b: i32 = \"f'oo\";\n    |            |\n    |            expected due to this\n \n-error[E0308]: mismatched types\n-  --> $DIR/attribute-with-error.rs:25:22\n-   |\n-LL |         let a: i32 = \"foo\";\n-   |                ---   ^^^^^ expected `i32`, found `&str`\n-   |                |\n-   |                expected due to this\n-\n error[E0308]: mismatched types\n   --> $DIR/attribute-with-error.rs:35:22\n    |"}, {"sha": "c85f057203146ffdc52157e9f903a196c862a5f2", "filename": "src/test/ui/repeat_count.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/577a76f0031f727735410b99a5cc5f0b61b92eef/src%2Ftest%2Fui%2Frepeat_count.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/577a76f0031f727735410b99a5cc5f0b61b92eef/src%2Ftest%2Fui%2Frepeat_count.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepeat_count.stderr?ref=577a76f0031f727735410b99a5cc5f0b61b92eef", "patch": "@@ -30,12 +30,6 @@ error[E0308]: mismatched types\n LL |     let e = [0; \"foo\"];\n    |                 ^^^^^ expected `usize`, found `&str`\n \n-error[E0308]: mismatched types\n-  --> $DIR/repeat_count.rs:31:17\n-   |\n-LL |     let g = [0; G { g: () }];\n-   |                 ^^^^^^^^^^^ expected `usize`, found struct `G`\n-\n error[E0308]: mismatched types\n   --> $DIR/repeat_count.rs:19:17\n    |\n@@ -63,6 +57,12 @@ help: change the type of the numeric literal from `u8` to `usize`\n LL |     let f = [0; 4usize];\n    |                 ~~~~~~\n \n+error[E0308]: mismatched types\n+  --> $DIR/repeat_count.rs:31:17\n+   |\n+LL |     let g = [0; G { g: () }];\n+   |                 ^^^^^^^^^^^ expected `usize`, found struct `G`\n+\n error: aborting due to 9 previous errors\n \n Some errors have detailed explanations: E0308, E0435."}, {"sha": "bb7919ebb7996338108f03caa21f05031f67647d", "filename": "src/test/ui/suggestions/impl-trait-with-missing-bounds.stderr", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/577a76f0031f727735410b99a5cc5f0b61b92eef/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-with-missing-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/577a76f0031f727735410b99a5cc5f0b61b92eef/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-with-missing-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-with-missing-bounds.stderr?ref=577a76f0031f727735410b99a5cc5f0b61b92eef", "patch": "@@ -1,20 +1,3 @@\n-error[E0277]: `<impl Iterator as Iterator>::Item` doesn't implement `Debug`\n-  --> $DIR/impl-trait-with-missing-bounds.rs:6:13\n-   |\n-LL |         qux(constraint);\n-   |             ^^^^^^^^^^ `<impl Iterator as Iterator>::Item` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n-   |\n-   = help: the trait `Debug` is not implemented for `<impl Iterator as Iterator>::Item`\n-note: required by a bound in `qux`\n-  --> $DIR/impl-trait-with-missing-bounds.rs:50:16\n-   |\n-LL | fn qux(_: impl std::fmt::Debug) {}\n-   |                ^^^^^^^^^^^^^^^ required by this bound in `qux`\n-help: introduce a type parameter with a trait bound instead of using `impl Trait`\n-   |\n-LL | fn foo<I: Iterator>(constraints: I) where <I as Iterator>::Item: Debug {\n-   |       +++++++++++++              ~  ++++++++++++++++++++++++++++++++++\n-\n error[E0277]: `<impl Iterator as Iterator>::Item` doesn't implement `Debug`\n   --> $DIR/impl-trait-with-missing-bounds.rs:14:13\n    |\n@@ -83,6 +66,23 @@ help: introduce a type parameter with a trait bound instead of using `impl Trait\n LL | fn bak<I: Iterator + std::fmt::Debug>(constraints: I) where <I as Iterator>::Item: Debug {\n    |       +++++++++++++++++++++++++++++++              ~  ++++++++++++++++++++++++++++++++++\n \n+error[E0277]: `<impl Iterator as Iterator>::Item` doesn't implement `Debug`\n+  --> $DIR/impl-trait-with-missing-bounds.rs:6:13\n+   |\n+LL |         qux(constraint);\n+   |             ^^^^^^^^^^ `<impl Iterator as Iterator>::Item` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n+   |\n+   = help: the trait `Debug` is not implemented for `<impl Iterator as Iterator>::Item`\n+note: required by a bound in `qux`\n+  --> $DIR/impl-trait-with-missing-bounds.rs:50:16\n+   |\n+LL | fn qux(_: impl std::fmt::Debug) {}\n+   |                ^^^^^^^^^^^^^^^ required by this bound in `qux`\n+help: introduce a type parameter with a trait bound instead of using `impl Trait`\n+   |\n+LL | fn foo<I: Iterator>(constraints: I) where <I as Iterator>::Item: Debug {\n+   |       +++++++++++++              ~  ++++++++++++++++++++++++++++++++++\n+\n error[E0277]: `<impl Iterator as Iterator>::Item` doesn't implement `Debug`\n   --> $DIR/impl-trait-with-missing-bounds.rs:45:13\n    |"}, {"sha": "1f41d2329ee9ef18780f4a6042f288072b37cabb", "filename": "src/test/ui/suggestions/suggest-ref-macro.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/577a76f0031f727735410b99a5cc5f0b61b92eef/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-ref-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/577a76f0031f727735410b99a5cc5f0b61b92eef/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-ref-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-ref-macro.stderr?ref=577a76f0031f727735410b99a5cc5f0b61b92eef", "patch": "@@ -1,11 +1,3 @@\n-error[E0308]: mismatched types\n-  --> $DIR/suggest-ref-macro.rs:8:1\n-   |\n-LL | #[hello]\n-   | ^^^^^^^^ expected `&mut i32`, found integer\n-   |\n-   = note: this error originates in the attribute macro `hello` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n error[E0308]: mismatched types\n   --> $DIR/suggest-ref-macro.rs:15:11\n    |\n@@ -29,6 +21,14 @@ LL |     bla!(456);\n    |          expected `&mut i32`, found integer\n    |          help: consider mutably borrowing here: `&mut 456`\n \n+error[E0308]: mismatched types\n+  --> $DIR/suggest-ref-macro.rs:8:1\n+   |\n+LL | #[hello]\n+   | ^^^^^^^^ expected `&mut i32`, found integer\n+   |\n+   = note: this error originates in the attribute macro `hello` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0308`."}, {"sha": "b52117cd19cca32b262e4228f63bd1f42c56dfa1", "filename": "src/test/ui/union/union-derive-clone.mirunsafeck.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/577a76f0031f727735410b99a5cc5f0b61b92eef/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.mirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/577a76f0031f727735410b99a5cc5f0b61b92eef/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.mirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.mirunsafeck.stderr?ref=577a76f0031f727735410b99a5cc5f0b61b92eef", "patch": "@@ -1,16 +1,3 @@\n-error[E0277]: the trait bound `U1: Copy` is not satisfied\n-  --> $DIR/union-derive-clone.rs:6:10\n-   |\n-LL | #[derive(Clone)]\n-   |          ^^^^^ the trait `Copy` is not implemented for `U1`\n-   |\n-note: required by a bound in `AssertParamIsCopy`\n-  --> $SRC_DIR/core/src/clone.rs:LL:COL\n-   |\n-LL | pub struct AssertParamIsCopy<T: Copy + ?Sized> {\n-   |                                 ^^^^ required by this bound in `AssertParamIsCopy`\n-   = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n error[E0599]: the method `clone` exists for union `U5<CloneNoCopy>`, but its trait bounds were not satisfied\n   --> $DIR/union-derive-clone.rs:38:15\n    |\n@@ -30,6 +17,19 @@ LL |     let w = u.clone();\n            `CloneNoCopy: Copy`\n            which is required by `U5<CloneNoCopy>: Clone`\n \n+error[E0277]: the trait bound `U1: Copy` is not satisfied\n+  --> $DIR/union-derive-clone.rs:6:10\n+   |\n+LL | #[derive(Clone)]\n+   |          ^^^^^ the trait `Copy` is not implemented for `U1`\n+   |\n+note: required by a bound in `AssertParamIsCopy`\n+  --> $SRC_DIR/core/src/clone.rs:LL:COL\n+   |\n+LL | pub struct AssertParamIsCopy<T: Copy + ?Sized> {\n+   |                                 ^^^^ required by this bound in `AssertParamIsCopy`\n+   = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n error: aborting due to 2 previous errors\n \n Some errors have detailed explanations: E0277, E0599."}, {"sha": "b52117cd19cca32b262e4228f63bd1f42c56dfa1", "filename": "src/test/ui/union/union-derive-clone.thirunsafeck.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/577a76f0031f727735410b99a5cc5f0b61b92eef/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.thirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/577a76f0031f727735410b99a5cc5f0b61b92eef/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.thirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.thirunsafeck.stderr?ref=577a76f0031f727735410b99a5cc5f0b61b92eef", "patch": "@@ -1,16 +1,3 @@\n-error[E0277]: the trait bound `U1: Copy` is not satisfied\n-  --> $DIR/union-derive-clone.rs:6:10\n-   |\n-LL | #[derive(Clone)]\n-   |          ^^^^^ the trait `Copy` is not implemented for `U1`\n-   |\n-note: required by a bound in `AssertParamIsCopy`\n-  --> $SRC_DIR/core/src/clone.rs:LL:COL\n-   |\n-LL | pub struct AssertParamIsCopy<T: Copy + ?Sized> {\n-   |                                 ^^^^ required by this bound in `AssertParamIsCopy`\n-   = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n error[E0599]: the method `clone` exists for union `U5<CloneNoCopy>`, but its trait bounds were not satisfied\n   --> $DIR/union-derive-clone.rs:38:15\n    |\n@@ -30,6 +17,19 @@ LL |     let w = u.clone();\n            `CloneNoCopy: Copy`\n            which is required by `U5<CloneNoCopy>: Clone`\n \n+error[E0277]: the trait bound `U1: Copy` is not satisfied\n+  --> $DIR/union-derive-clone.rs:6:10\n+   |\n+LL | #[derive(Clone)]\n+   |          ^^^^^ the trait `Copy` is not implemented for `U1`\n+   |\n+note: required by a bound in `AssertParamIsCopy`\n+  --> $SRC_DIR/core/src/clone.rs:LL:COL\n+   |\n+LL | pub struct AssertParamIsCopy<T: Copy + ?Sized> {\n+   |                                 ^^^^ required by this bound in `AssertParamIsCopy`\n+   = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n error: aborting due to 2 previous errors\n \n Some errors have detailed explanations: E0277, E0599."}]}