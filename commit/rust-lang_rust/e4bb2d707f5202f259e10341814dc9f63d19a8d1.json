{"sha": "e4bb2d707f5202f259e10341814dc9f63d19a8d1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0YmIyZDcwN2Y1MjAyZjI1OWUxMDM0MTgxNGRjOWY2M2QxOWE4ZDE=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-10T08:44:13Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-10T08:44:13Z"}, "message": "core: Rename vec::tail_n to vec::tailn to match other fns", "tree": {"sha": "8d672f1a856e716842dc873b52559b843a0767ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d672f1a856e716842dc873b52559b843a0767ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e4bb2d707f5202f259e10341814dc9f63d19a8d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e4bb2d707f5202f259e10341814dc9f63d19a8d1", "html_url": "https://github.com/rust-lang/rust/commit/e4bb2d707f5202f259e10341814dc9f63d19a8d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e4bb2d707f5202f259e10341814dc9f63d19a8d1/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0f0a704b0bd89eaae8cac0725ef9a2f29114a5b", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0f0a704b0bd89eaae8cac0725ef9a2f29114a5b", "html_url": "https://github.com/rust-lang/rust/commit/a0f0a704b0bd89eaae8cac0725ef9a2f29114a5b"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "2a7c583b61ddfa72514664c4c8c3b8f7acdb1f9f", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4bb2d707f5202f259e10341814dc9f63d19a8d1/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4bb2d707f5202f259e10341814dc9f63d19a8d1/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=e4bb2d707f5202f259e10341814dc9f63d19a8d1", "patch": "@@ -14,7 +14,7 @@ export to_mut;\n export from_mut;\n export head;\n export tail;\n-export tail_n;\n+export tailn;\n export init;\n export last;\n export last_opt;\n@@ -180,7 +180,7 @@ fn tail<T: copy>(v: [const T]) -> [T] {\n }\n \n #[doc = \"Returns all but the first `n` elements of a vector\"]\n-fn tail_n<T: copy>(v: [const T], n: uint) -> [T] {\n+fn tailn<T: copy>(v: [const T], n: uint) -> [T] {\n     slice(v, n, len(v))\n }\n "}, {"sha": "0fa55a0c0528ee92fa7b3de48e28efdad9945447", "filename": "src/rustc/middle/trans/impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4bb2d707f5202f259e10341814dc9f63d19a8d1/src%2Frustc%2Fmiddle%2Ftrans%2Fimpl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4bb2d707f5202f259e10341814dc9f63d19a8d1/src%2Frustc%2Fmiddle%2Ftrans%2Fimpl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fimpl.rs?ref=e4bb2d707f5202f259e10341814dc9f63d19a8d1", "patch": "@@ -126,7 +126,7 @@ fn trans_vtable_callee(bcx: block, env: callee_env, dict: ValueRef,\n     if (*method.tps).len() > 0u || ty::type_has_params(fty) {\n         let tydescs = [], tis = [];\n         let tptys = node_id_type_params(bcx, callee_id);\n-        for t in vec::tail_n(tptys, tptys.len() - (*method.tps).len()) {\n+        for t in vec::tailn(tptys, tptys.len() - (*method.tps).len()) {\n             let ti = none;\n             let td = get_tydesc(bcx, t, true, ti);\n             tis += [ti];"}, {"sha": "7ecb5b9aa34b9e31d9d87e7919d446d80695446c", "filename": "src/rustc/middle/typeck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4bb2d707f5202f259e10341814dc9f63d19a8d1/src%2Frustc%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4bb2d707f5202f259e10341814dc9f63d19a8d1/src%2Frustc%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck.rs?ref=e4bb2d707f5202f259e10341814dc9f63d19a8d1", "patch": "@@ -757,7 +757,7 @@ fn fixup_self_in_method_ty(cx: ty::ctxt, mty: ty::t, m_substs: [ty::t],\n                         let method_n_tps =\n                             (vec::len(m_substs) - vec::len(tps)) as int;\n                         if method_n_tps > 0 {\n-                            substs += vec::tail_n(m_substs, vec::len(m_substs)\n+                            substs += vec::tailn(m_substs, vec::len(m_substs)\n                                                   - (method_n_tps as uint));\n                         }\n                         // And then instantiate the self type using all those."}]}