{"sha": "173db39f916a1ae33b15543cd42a88113cf3114f", "node_id": "C_kwDOAAsO6NoAKDE3M2RiMzlmOTE2YTFhZTMzYjE1NTQzY2Q0MmE4ODExM2NmMzExNGY", "commit": {"author": {"name": "Antoni Boucher", "email": "bouanto@zoho.com", "date": "2022-10-09T18:15:45Z"}, "committer": {"name": "Antoni Boucher", "email": "bouanto@zoho.com", "date": "2022-10-09T18:24:35Z"}, "message": "Fix simd_select", "tree": {"sha": "87d8839de06422933dc5ac6b6784b44b495ed5b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/87d8839de06422933dc5ac6b6784b44b495ed5b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/173db39f916a1ae33b15543cd42a88113cf3114f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/173db39f916a1ae33b15543cd42a88113cf3114f", "html_url": "https://github.com/rust-lang/rust/commit/173db39f916a1ae33b15543cd42a88113cf3114f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/173db39f916a1ae33b15543cd42a88113cf3114f/comments", "author": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5ce7a9846ee9479549d153101351f917f858f02", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5ce7a9846ee9479549d153101351f917f858f02", "html_url": "https://github.com/rust-lang/rust/commit/e5ce7a9846ee9479549d153101351f917f858f02"}], "stats": {"total": 27, "additions": 24, "deletions": 3}, "files": [{"sha": "5b3166113e77fbf24b4d93b1eaece48bf809fcc5", "filename": "failing-ui-tests.txt", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/173db39f916a1ae33b15543cd42a88113cf3114f/failing-ui-tests.txt", "raw_url": "https://github.com/rust-lang/rust/raw/173db39f916a1ae33b15543cd42a88113cf3114f/failing-ui-tests.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/failing-ui-tests.txt?ref=173db39f916a1ae33b15543cd42a88113cf3114f", "patch": "@@ -33,7 +33,6 @@ src/test/ui/sepcomp/sepcomp-statics.rs\n src/test/ui/simd/intrinsic/generic-arithmetic-pass.rs\n src/test/ui/simd/intrinsic/generic-bitmask-pass.rs\n src/test/ui/simd/intrinsic/generic-gather-pass.rs\n-src/test/ui/simd/intrinsic/generic-select-pass.rs\n src/test/ui/simd/issue-17170.rs\n src/test/ui/simd/issue-39720.rs\n src/test/ui/simd/issue-85915-simd-ptrs.rs"}, {"sha": "32feb2c886b2c9900b9346f463fe900ce80c34bb", "filename": "failing-ui-tests12.txt", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/173db39f916a1ae33b15543cd42a88113cf3114f/failing-ui-tests12.txt", "raw_url": "https://github.com/rust-lang/rust/raw/173db39f916a1ae33b15543cd42a88113cf3114f/failing-ui-tests12.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/failing-ui-tests12.txt?ref=173db39f916a1ae33b15543cd42a88113cf3114f", "patch": "@@ -16,6 +16,7 @@ src/test/ui/simd/intrinsic/generic-cast-pointer-width.rs\n src/test/ui/simd/intrinsic/generic-comparison-pass.rs\n src/test/ui/simd/intrinsic/generic-elements-pass.rs\n src/test/ui/simd/intrinsic/generic-reduction-pass.rs\n+src/test/ui/simd/intrinsic/generic-select-pass.rs\n src/test/ui/simd/intrinsic/inlining-issue67557-ice.rs\n src/test/ui/simd/intrinsic/inlining-issue67557.rs\n src/test/ui/simd/monomorphize-shuffle-index.rs"}, {"sha": "b7342f507168c55fa33a9db32e1774d18d1b77dc", "filename": "src/builder.rs", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/173db39f916a1ae33b15543cd42a88113cf3114f/src%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/173db39f916a1ae33b15543cd42a88113cf3114f/src%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbuilder.rs?ref=173db39f916a1ae33b15543cd42a88113cf3114f", "patch": "@@ -1599,10 +1599,31 @@ impl<'a, 'gcc, 'tcx> Builder<'a, 'gcc, 'tcx> {\n \n     pub fn vector_select(&mut self, cond: RValue<'gcc>, then_val: RValue<'gcc>, else_val: RValue<'gcc>) -> RValue<'gcc> {\n         // cond is a vector of integers, not of bools.\n-        let cond_type = cond.get_type();\n-        let vector_type = cond_type.unqualified().dyncast_vector().expect(\"vector type\");\n+        let vector_type = cond.get_type().unqualified().dyncast_vector().expect(\"vector type\");\n         let num_units = vector_type.get_num_units();\n         let element_type = vector_type.get_element_type();\n+\n+        #[cfg(feature=\"master\")]\n+        let (cond, element_type) = {\n+            let then_val_vector_type = then_val.get_type().dyncast_vector().expect(\"vector type\");\n+            let then_val_element_type = then_val_vector_type.get_element_type();\n+            let then_val_element_size = then_val_element_type.get_size();\n+\n+            // NOTE: the mask needs to be of the same size as the other arguments in order for the &\n+            // operation to work.\n+            if then_val_element_size != element_type.get_size() {\n+                let new_element_type = self.type_ix(then_val_element_size as u64 * 8);\n+                let new_vector_type = self.context.new_vector_type(new_element_type, num_units as u64);\n+                let cond = self.context.convert_vector(None, cond, new_vector_type);\n+                (cond, new_element_type)\n+            }\n+            else {\n+                (cond, element_type)\n+            }\n+        };\n+\n+        let cond_type = cond.get_type();\n+\n         let zeros = vec![self.context.new_rvalue_zero(element_type); num_units];\n         let zeros = self.context.new_rvalue_from_vector(None, cond_type, &zeros);\n "}]}