{"sha": "e9a96c04336421dc5a9b453e73eee0dadc49623a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5YTk2YzA0MzM2NDIxZGM1YTliNDUzZTczZWVlMGRhZGM0OTYyM2E=", "commit": {"author": {"name": "Linus F\u00e4rnstrand", "email": "faern@faern.net", "date": "2018-07-20T07:09:48Z"}, "committer": {"name": "Linus F\u00e4rnstrand", "email": "faern@faern.net", "date": "2018-08-08T08:52:10Z"}, "message": "Move IPs to assoc consts", "tree": {"sha": "d29c6e53ac665da2a290572721037152e5d323ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d29c6e53ac665da2a290572721037152e5d323ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e9a96c04336421dc5a9b453e73eee0dadc49623a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e9a96c04336421dc5a9b453e73eee0dadc49623a", "html_url": "https://github.com/rust-lang/rust/commit/e9a96c04336421dc5a9b453e73eee0dadc49623a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e9a96c04336421dc5a9b453e73eee0dadc49623a/comments", "author": {"login": "faern", "id": 332294, "node_id": "MDQ6VXNlcjMzMjI5NA==", "avatar_url": "https://avatars.githubusercontent.com/u/332294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/faern", "html_url": "https://github.com/faern", "followers_url": "https://api.github.com/users/faern/followers", "following_url": "https://api.github.com/users/faern/following{/other_user}", "gists_url": "https://api.github.com/users/faern/gists{/gist_id}", "starred_url": "https://api.github.com/users/faern/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/faern/subscriptions", "organizations_url": "https://api.github.com/users/faern/orgs", "repos_url": "https://api.github.com/users/faern/repos", "events_url": "https://api.github.com/users/faern/events{/privacy}", "received_events_url": "https://api.github.com/users/faern/received_events", "type": "User", "site_admin": false}, "committer": {"login": "faern", "id": 332294, "node_id": "MDQ6VXNlcjMzMjI5NA==", "avatar_url": "https://avatars.githubusercontent.com/u/332294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/faern", "html_url": "https://github.com/faern", "followers_url": "https://api.github.com/users/faern/followers", "following_url": "https://api.github.com/users/faern/following{/other_user}", "gists_url": "https://api.github.com/users/faern/gists{/gist_id}", "starred_url": "https://api.github.com/users/faern/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/faern/subscriptions", "organizations_url": "https://api.github.com/users/faern/orgs", "repos_url": "https://api.github.com/users/faern/repos", "events_url": "https://api.github.com/users/faern/events{/privacy}", "received_events_url": "https://api.github.com/users/faern/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02c272db2d3fd63f564be43ca6b8b76c9ce42186", "url": "https://api.github.com/repos/rust-lang/rust/commits/02c272db2d3fd63f564be43ca6b8b76c9ce42186", "html_url": "https://github.com/rust-lang/rust/commit/02c272db2d3fd63f564be43ca6b8b76c9ce42186"}], "stats": {"total": 49, "additions": 21, "deletions": 28}, "files": [{"sha": "0bc968b6c5cda20b8937fba1ab76f2b1811865b0", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e9a96c04336421dc5a9b453e73eee0dadc49623a/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9a96c04336421dc5a9b453e73eee0dadc49623a/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=e9a96c04336421dc5a9b453e73eee0dadc49623a", "patch": "@@ -253,6 +253,7 @@\n #![feature(compiler_builtins_lib)]\n #![feature(const_fn)]\n #![feature(const_int_ops)]\n+#![feature(const_ip)]\n #![feature(core_intrinsics)]\n #![feature(dropck_eyepatch)]\n #![feature(exact_size_is_empty)]"}, {"sha": "c8d4dd733ad64c28ff3bc0ea9e958b20154f849a", "filename": "src/libstd/net/ip.rs", "status": "modified", "additions": 20, "deletions": 28, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/e9a96c04336421dc5a9b453e73eee0dadc49623a/src%2Flibstd%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9a96c04336421dc5a9b453e73eee0dadc49623a/src%2Flibstd%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fip.rs?ref=e9a96c04336421dc5a9b453e73eee0dadc49623a", "patch": "@@ -353,41 +353,37 @@ impl Ipv4Addr {\n         }\n     }\n \n-    /// Creates a new IPv4 address with the address pointing to localhost: 127.0.0.1.\n+    /// An IPv4 address with the address pointing to localhost: 127.0.0.1.\n     ///\n     /// # Examples\n     ///\n     /// ```\n     /// #![feature(ip_constructors)]\n     /// use std::net::Ipv4Addr;\n     ///\n-    /// let addr = Ipv4Addr::localhost();\n+    /// let addr = Ipv4Addr::LOCALHOST;\n     /// assert_eq!(addr, Ipv4Addr::new(127, 0, 0, 1));\n     /// ```\n     #[unstable(feature = \"ip_constructors\",\n                reason = \"requires greater scrutiny before stabilization\",\n                issue = \"44582\")]\n-    pub fn localhost() -> Ipv4Addr {\n-        Ipv4Addr::new(127, 0, 0, 1)\n-    }\n+    pub const LOCALHOST: Self = Ipv4Addr::new(127, 0, 0, 1);\n \n-    /// Creates a new IPv4 address representing an unspecified address: 0.0.0.0\n+    /// An IPv4 address representing an unspecified address: 0.0.0.0\n     ///\n     /// # Examples\n     ///\n     /// ```\n     /// #![feature(ip_constructors)]\n     /// use std::net::Ipv4Addr;\n     ///\n-    /// let addr = Ipv4Addr::unspecified();\n+    /// let addr = Ipv4Addr::UNSPECIFIED;\n     /// assert_eq!(addr, Ipv4Addr::new(0, 0, 0, 0));\n     /// ```\n     #[unstable(feature = \"ip_constructors\",\n                reason = \"requires greater scrutiny before stabilization\",\n                issue = \"44582\")]\n-    pub fn unspecified() -> Ipv4Addr {\n-        Ipv4Addr::new(0, 0, 0, 0)\n-    }\n+    pub const UNSPECIFIED: Self = Ipv4Addr::new(0, 0, 0, 0);\n \n     /// Returns the four eight-bit integers that make up this address.\n     ///\n@@ -878,41 +874,37 @@ impl Ipv6Addr {\n \n     }\n \n-    /// Creates a new IPv6 address representing localhost: `::1`.\n+    /// An IPv6 address representing localhost: `::1`.\n     ///\n     /// # Examples\n     ///\n     /// ```\n     /// #![feature(ip_constructors)]\n     /// use std::net::Ipv6Addr;\n     ///\n-    /// let addr = Ipv6Addr::localhost();\n+    /// let addr = Ipv6Addr::LOCALHOST;\n     /// assert_eq!(addr, Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 1));\n     /// ```\n     #[unstable(feature = \"ip_constructors\",\n                reason = \"requires greater scrutiny before stabilization\",\n                issue = \"44582\")]\n-    pub fn localhost() -> Ipv6Addr {\n-        Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 1)\n-    }\n+    pub const LOCALHOST: Self = Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 1);\n \n-    /// Creates a new IPv6 address representing the unspecified address: `::`\n+    /// An IPv6 address representing the unspecified address: `::`\n     ///\n     /// # Examples\n     ///\n     /// ```\n     /// #![feature(ip_constructors)]\n     /// use std::net::Ipv6Addr;\n     ///\n-    /// let addr = Ipv6Addr::unspecified();\n+    /// let addr = Ipv6Addr::UNSPECIFIED;\n     /// assert_eq!(addr, Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 0));\n     /// ```\n     #[unstable(feature = \"ip_constructors\",\n                reason = \"requires greater scrutiny before stabilization\",\n                issue = \"44582\")]\n-    pub fn unspecified() -> Ipv6Addr {\n-        Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 0)\n-    }\n+    pub const UNSPECIFIED: Self = Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 0);\n \n     /// Returns the eight 16-bit segments that make up this address.\n     ///\n@@ -1854,18 +1846,18 @@ mod tests {\n \n     #[test]\n     fn ipv4_from_constructors() {\n-        assert_eq!(Ipv4Addr::localhost(), Ipv4Addr::new(127, 0, 0, 1));\n-        assert!(Ipv4Addr::localhost().is_loopback());\n-        assert_eq!(Ipv4Addr::unspecified(), Ipv4Addr::new(0, 0, 0, 0));\n-        assert!(Ipv4Addr::unspecified().is_unspecified());\n+        assert_eq!(Ipv4Addr::LOCALHOST, Ipv4Addr::new(127, 0, 0, 1));\n+        assert!(Ipv4Addr::LOCALHOST.is_loopback());\n+        assert_eq!(Ipv4Addr::UNSPECIFIED, Ipv4Addr::new(0, 0, 0, 0));\n+        assert!(Ipv4Addr::UNSPECIFIED.is_unspecified());\n     }\n \n     #[test]\n     fn ipv6_from_contructors() {\n-        assert_eq!(Ipv6Addr::localhost(), Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 1));\n-        assert!(Ipv6Addr::localhost().is_loopback());\n-        assert_eq!(Ipv6Addr::unspecified(), Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 0));\n-        assert!(Ipv6Addr::unspecified().is_unspecified());\n+        assert_eq!(Ipv6Addr::LOCALHOST, Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 1));\n+        assert!(Ipv6Addr::LOCALHOST.is_loopback());\n+        assert_eq!(Ipv6Addr::UNSPECIFIED, Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 0));\n+        assert!(Ipv6Addr::UNSPECIFIED.is_unspecified());\n     }\n \n     #[test]"}]}