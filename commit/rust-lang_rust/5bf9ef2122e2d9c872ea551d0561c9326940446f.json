{"sha": "5bf9ef2122e2d9c872ea551d0561c9326940446f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViZjllZjIxMjJlMmQ5Yzg3MmVhNTUxZDA1NjFjOTMyNjk0MDQ0NmY=", "commit": {"author": {"name": "P1start", "email": "rewi-github@whanau.org", "date": "2014-10-18T02:39:44Z"}, "committer": {"name": "P1start", "email": "rewi-github@whanau.org", "date": "2014-11-02T03:12:23Z"}, "message": "Convert some notes to help messages\n\nCloses #18126.", "tree": {"sha": "5495f6ba64b0a2f984de9fdd65d2e235a9b7c35d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5495f6ba64b0a2f984de9fdd65d2e235a9b7c35d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5bf9ef2122e2d9c872ea551d0561c9326940446f", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5bf9ef2122e2d9c872ea551d0561c9326940446f", "html_url": "https://github.com/rust-lang/rust/commit/5bf9ef2122e2d9c872ea551d0561c9326940446f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5bf9ef2122e2d9c872ea551d0561c9326940446f/comments", "author": {"login": "ftxqxd", "id": 2055302, "node_id": "MDQ6VXNlcjIwNTUzMDI=", "avatar_url": "https://avatars.githubusercontent.com/u/2055302?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ftxqxd", "html_url": "https://github.com/ftxqxd", "followers_url": "https://api.github.com/users/ftxqxd/followers", "following_url": "https://api.github.com/users/ftxqxd/following{/other_user}", "gists_url": "https://api.github.com/users/ftxqxd/gists{/gist_id}", "starred_url": "https://api.github.com/users/ftxqxd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ftxqxd/subscriptions", "organizations_url": "https://api.github.com/users/ftxqxd/orgs", "repos_url": "https://api.github.com/users/ftxqxd/repos", "events_url": "https://api.github.com/users/ftxqxd/events{/privacy}", "received_events_url": "https://api.github.com/users/ftxqxd/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ftxqxd", "id": 2055302, "node_id": "MDQ6VXNlcjIwNTUzMDI=", "avatar_url": "https://avatars.githubusercontent.com/u/2055302?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ftxqxd", "html_url": "https://github.com/ftxqxd", "followers_url": "https://api.github.com/users/ftxqxd/followers", "following_url": "https://api.github.com/users/ftxqxd/following{/other_user}", "gists_url": "https://api.github.com/users/ftxqxd/gists{/gist_id}", "starred_url": "https://api.github.com/users/ftxqxd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ftxqxd/subscriptions", "organizations_url": "https://api.github.com/users/ftxqxd/orgs", "repos_url": "https://api.github.com/users/ftxqxd/repos", "events_url": "https://api.github.com/users/ftxqxd/events{/privacy}", "received_events_url": "https://api.github.com/users/ftxqxd/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3327ecca422046699315122345c6c050ab73804b", "url": "https://api.github.com/repos/rust-lang/rust/commits/3327ecca422046699315122345c6c050ab73804b", "html_url": "https://github.com/rust-lang/rust/commit/3327ecca422046699315122345c6c050ab73804b"}], "stats": {"total": 203, "additions": 123, "deletions": 80}, "files": [{"sha": "f1e01ce6660bca01ffd832b6aab6cd52f7702409", "filename": "src/doc/guide.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bf9ef2122e2d9c872ea551d0561c9326940446f/src%2Fdoc%2Fguide.md", "raw_url": "https://github.com/rust-lang/rust/raw/5bf9ef2122e2d9c872ea551d0561c9326940446f/src%2Fdoc%2Fguide.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide.md?ref=5bf9ef2122e2d9c872ea551d0561c9326940446f", "patch": "@@ -777,7 +777,7 @@ fn add_one(x: int) -> int {\n      x + 1;\n }\n \n-note: consider removing this semicolon:\n+help: consider removing this semicolon:\n      x + 1;\n           ^\n ```"}, {"sha": "073b6dae0c385dd41b0f9d50f453699b354cdbc0", "filename": "src/librustc/middle/borrowck/check_loans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bf9ef2122e2d9c872ea551d0561c9326940446f/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf9ef2122e2d9c872ea551d0561c9326940446f/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs?ref=5bf9ef2122e2d9c872ea551d0561c9326940446f", "patch": "@@ -789,7 +789,7 @@ impl<'a, 'tcx> CheckLoanCtxt<'a, 'tcx> {\n                         assignment_span,\n                         format!(\"cannot assign to {}\",\n                                 self.bccx.cmt_to_string(&*assignee_cmt)).as_slice());\n-                    self.bccx.span_note(\n+                    self.bccx.span_help(\n                         self.tcx().map.span(upvar_id.closure_expr_id),\n                         \"consider changing this closure to take self by mutable reference\");\n                 } else {"}, {"sha": "ab6ff08c9d4e8c65fd4e6b025cc6506899b26a60", "filename": "src/librustc/middle/borrowck/gather_loans/move_error.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5bf9ef2122e2d9c872ea551d0561c9326940446f/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmove_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf9ef2122e2d9c872ea551d0561c9326940446f/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmove_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmove_error.rs?ref=5bf9ef2122e2d9c872ea551d0561c9326940446f", "patch": "@@ -148,9 +148,12 @@ fn note_move_destination(bccx: &BorrowckCtxt,\n     if is_first_note {\n         bccx.span_note(\n             move_to_span,\n-            format!(\"attempting to move value to here (to prevent the move, \\\n+            \"attempting to move value to here\");\n+        bccx.span_help(\n+            move_to_span,\n+            format!(\"to prevent the move, \\\n                      use `ref {0}` or `ref mut {0}` to capture value by \\\n-                     reference)\",\n+                     reference\",\n                     pat_name).as_slice());\n     } else {\n         bccx.span_note(move_to_span,"}, {"sha": "4e2b280eba686c43e91b1f6f3f6b3dd902ce38c8", "filename": "src/librustc/middle/borrowck/mod.rs", "status": "modified", "additions": 30, "deletions": 21, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/5bf9ef2122e2d9c872ea551d0561c9326940446f/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf9ef2122e2d9c872ea551d0561c9326940446f/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs?ref=5bf9ef2122e2d9c872ea551d0561c9326940446f", "patch": "@@ -527,8 +527,8 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                                                   r).as_slice())\n                     }\n                 };\n-                let suggestion = move_suggestion(self.tcx, expr_ty,\n-                        \"moved by default (use `copy` to override)\");\n+                let (suggestion, _) = move_suggestion(self.tcx, expr_ty,\n+                        (\"moved by default\", \"\"));\n                 self.tcx.sess.span_note(\n                     expr_span,\n                     format!(\"`{}` moved here{} because it has type `{}`, which is {}\",\n@@ -540,13 +540,15 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n \n             move_data::MovePat => {\n                 let pat_ty = ty::node_id_to_type(self.tcx, the_move.id);\n-                self.tcx.sess.span_note(self.tcx.map.span(the_move.id),\n+                let span = self.tcx.map.span(the_move.id);\n+                self.tcx.sess.span_note(span,\n                     format!(\"`{}` moved here{} because it has type `{}`, \\\n-                             which is moved by default (use `ref` to \\\n-                             override)\",\n+                             which is moved by default\",\n                             ol,\n                             moved_lp_msg,\n                             pat_ty.user_string(self.tcx)).as_slice());\n+                self.tcx.sess.span_help(span,\n+                    \"use `ref` to override\");\n             }\n \n             move_data::Captured => {\n@@ -563,9 +565,9 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                                                   r).as_slice())\n                     }\n                 };\n-                let suggestion = move_suggestion(self.tcx, expr_ty,\n-                        \"moved by default (make a copy and \\\n-                         capture that instead to override)\");\n+                let (suggestion, help) = move_suggestion(self.tcx, expr_ty,\n+                        (\"moved by default\", \"make a copy and \\\n+                         capture that instead to override\"));\n                 self.tcx.sess.span_note(\n                     expr_span,\n                     format!(\"`{}` moved into closure environment here{} because it \\\n@@ -574,21 +576,23 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                             moved_lp_msg,\n                             expr_ty.user_string(self.tcx),\n                             suggestion).as_slice());\n+                self.tcx.sess.span_help(expr_span, help);\n             }\n         }\n \n-        fn move_suggestion(tcx: &ty::ctxt, ty: ty::t, default_msg: &'static str)\n-                          -> &'static str {\n+        fn move_suggestion(tcx: &ty::ctxt, ty: ty::t, default_msgs: (&'static str, &'static str))\n+                          -> (&'static str, &'static str) {\n             match ty::get(ty).sty {\n                 ty::ty_closure(box ty::ClosureTy {\n                         store: ty::RegionTraitStore(..),\n                         ..\n                     }) =>\n-                    \"a non-copyable stack closure (capture it in a new closure, \\\n-                     e.g. `|x| f(x)`, to override)\",\n+                    (\"a non-copyable stack closure\",\n+                     \"capture it in a new closure, e.g. `|x| f(x)`, to override\"),\n                 _ if ty::type_moves_by_default(tcx, ty) =>\n-                    \"non-copyable (perhaps you meant to use clone()?)\",\n-                _ => default_msg,\n+                    (\"non-copyable\",\n+                     \"perhaps you meant to use `clone()`?\"),\n+                _ => default_msgs,\n             }\n         }\n     }\n@@ -733,7 +737,7 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                 self.tcx.sess.span_err(span,\n                                        format!(\"{} in a captured outer \\\n                                                variable in an `Fn` closure\", prefix).as_slice());\n-                span_note!(self.tcx.sess, self.tcx.map.span(id),\n+                span_help!(self.tcx.sess, self.tcx.map.span(id),\n                            \"consider changing this closure to take self by mutable reference\");\n             }\n             mc::AliasableStatic(..) |\n@@ -750,7 +754,7 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n         }\n \n         if is_closure {\n-            self.tcx.sess.span_note(\n+            self.tcx.sess.span_help(\n                 span,\n                 \"closures behind references must be called via `&mut`\");\n         }\n@@ -770,7 +774,7 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                             _ => unreachable!()\n                         };\n                         if kind == ty::FnUnboxedClosureKind {\n-                            self.tcx.sess.span_note(\n+                            self.tcx.sess.span_help(\n                                 self.tcx.map.span(upvar_id.closure_expr_id),\n                                 \"consider changing this closure to take \\\n                                  self by mutable reference\");\n@@ -787,15 +791,20 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                     sub_scope,\n                     \"...\");\n                 let suggestion = if is_statement_scope(self.tcx, super_scope) {\n-                    \"; consider using a `let` binding to increase its lifetime\"\n+                    Some(\"consider using a `let` binding to increase its lifetime\")\n                 } else {\n-                    \"\"\n+                    None\n                 };\n-                note_and_explain_region(\n+                let span = note_and_explain_region(\n                     self.tcx,\n                     \"...but borrowed value is only valid for \",\n                     super_scope,\n-                    suggestion);\n+                    \"\");\n+                match (span, suggestion) {\n+                    (_, None) => {},\n+                    (Some(span), Some(msg)) => self.tcx.sess.span_help(span, msg),\n+                    (None, Some(msg)) => self.tcx.sess.help(msg),\n+                }\n             }\n \n             err_borrowed_pointer_too_short(loan_scope, ptr_scope) => {"}, {"sha": "15ca00f6a7fe9547ff472c664595c299c7bfadaf", "filename": "src/librustc/middle/dependency_format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bf9ef2122e2d9c872ea551d0561c9326940446f/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf9ef2122e2d9c872ea551d0561c9326940446f/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs?ref=5bf9ef2122e2d9c872ea551d0561c9326940446f", "patch": "@@ -213,7 +213,7 @@ fn add_library(sess: &session::Session,\n                 sess.err(format!(\"cannot satisfy dependencies so `{}` only \\\n                                   shows up once\",\n                                  data.name).as_slice());\n-                sess.note(\"having upstream crates all available in one format \\\n+                sess.help(\"having upstream crates all available in one format \\\n                            will likely make this go away\");\n             }\n         }"}, {"sha": "a11d5f6604ede5d5ad77197227bf2e04fea64fcb", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bf9ef2122e2d9c872ea551d0561c9326940446f/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf9ef2122e2d9c872ea551d0561c9326940446f/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=5bf9ef2122e2d9c872ea551d0561c9326940446f", "patch": "@@ -1568,7 +1568,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n                             hi: original_span.hi,\n                             expn_id: original_span.expn_id\n                         };\n-                        self.ir.tcx.sess.span_note(\n+                        self.ir.tcx.sess.span_help(\n                             span_semicolon, \"consider removing this semicolon:\");\n                     }\n                 }"}, {"sha": "9a059e5d90501f7bb3db4d5d0f1f3bfd17838d64", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bf9ef2122e2d9c872ea551d0561c9326940446f/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf9ef2122e2d9c872ea551d0561c9326940446f/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=5bf9ef2122e2d9c872ea551d0561c9326940446f", "patch": "@@ -5744,7 +5744,7 @@ impl<'a> Resolver<'a> {\n                                                  uses it like a function name\",\n                                                 wrong_name).as_slice());\n \n-                                self.session.span_note(expr.span,\n+                                self.session.span_help(expr.span,\n                                     format!(\"Did you mean to write: \\\n                                             `{} {{ /* fields */ }}`?\",\n                                             wrong_name).as_slice());"}, {"sha": "51a63a4f8b511b5412b1e1a08fb6749ada930274", "filename": "src/librustc/middle/typeck/astconv.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5bf9ef2122e2d9c872ea551d0561c9326940446f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf9ef2122e2d9c872ea551d0561c9326940446f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=5bf9ef2122e2d9c872ea551d0561c9326940446f", "patch": "@@ -172,18 +172,18 @@ pub fn opt_ast_region_to_region<'tcx, AC: AstConv<'tcx>, RS: RegionScope>(\n                                 }\n                             }\n                             if len == 1 {\n-                                span_note!(this.tcx().sess, default_span,\n+                                span_help!(this.tcx().sess, default_span,\n                                     \"this function's return type contains a borrowed value, but \\\n                                      the signature does not say which {} it is borrowed from\",\n                                     m);\n                             } else if len == 0 {\n-                                span_note!(this.tcx().sess, default_span,\n+                                span_help!(this.tcx().sess, default_span,\n                                     \"this function's return type contains a borrowed value, but \\\n                                      there is no value for it to be borrowed from\");\n-                                span_note!(this.tcx().sess, default_span,\n+                                span_help!(this.tcx().sess, default_span,\n                                     \"consider giving it a 'static lifetime\");\n                             } else {\n-                                span_note!(this.tcx().sess, default_span,\n+                                span_help!(this.tcx().sess, default_span,\n                                     \"this function's return type contains a borrowed value, but \\\n                                      the signature does not say whether it is borrowed from {}\",\n                                     m);\n@@ -302,7 +302,7 @@ fn ast_path_substs<'tcx,AC,RS>(\n         && !this.tcx().sess.features.borrow().default_type_params {\n         span_err!(this.tcx().sess, path.span, E0108,\n             \"default type parameters are experimental and possibly buggy\");\n-        span_note!(this.tcx().sess, path.span,\n+        span_help!(this.tcx().sess, path.span,\n             \"add #![feature(default_type_params)] to the crate attributes to enable\");\n     }\n \n@@ -1168,6 +1168,7 @@ fn ty_of_method_or_bare_fn<'tcx, AC: AstConv<'tcx>>(\n \n     let param_lifetimes: Vec<(String, uint)> = lifetimes_for_params.into_iter()\n                                                                    .map(|(n, v)| (n, v.len()))\n+                                                                   .filter(|&(_, l)| l != 0)\n                                                                    .collect();\n \n     let output_ty = match decl.output.node {"}, {"sha": "e2d66fa580fe553d6d383230643bb81436f5775f", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5bf9ef2122e2d9c872ea551d0561c9326940446f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf9ef2122e2d9c872ea551d0561c9326940446f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=5bf9ef2122e2d9c872ea551d0561c9326940446f", "patch": "@@ -1355,18 +1355,18 @@ fn check_cast(fcx: &FnCtxt,\n                     ast::MutImmutable => \"\"\n                 };\n                 if ty::type_is_trait(t_1) {\n-                    span_note!(fcx.tcx().sess, t.span, \"did you mean `&{}{}`?\", mtstr, tstr);\n+                    span_help!(fcx.tcx().sess, t.span, \"did you mean `&{}{}`?\", mtstr, tstr);\n                 } else {\n-                    span_note!(fcx.tcx().sess, span,\n+                    span_help!(fcx.tcx().sess, span,\n                                \"consider using an implicit coercion to `&{}{}` instead\",\n                                mtstr, tstr);\n                 }\n             }\n             ty::ty_uniq(..) => {\n-                span_note!(fcx.tcx().sess, t.span, \"did you mean `Box<{}>`?\", tstr);\n+                span_help!(fcx.tcx().sess, t.span, \"did you mean `Box<{}>`?\", tstr);\n             }\n             _ => {\n-                span_note!(fcx.tcx().sess, e.span,\n+                span_help!(fcx.tcx().sess, e.span,\n                            \"consider using a box or reference as appropriate\");\n             }\n         }\n@@ -2142,7 +2142,7 @@ fn try_overloaded_call<'a>(fcx: &FnCtxt,\n         if !fcx.tcx().sess.features.borrow().overloaded_calls {\n             span_err!(fcx.tcx().sess, call_expression.span, E0056,\n                 \"overloaded calls are experimental\");\n-            span_note!(fcx.tcx().sess, call_expression.span,\n+            span_help!(fcx.tcx().sess, call_expression.span,\n                 \"add `#![feature(overloaded_calls)]` to \\\n                 the crate attributes to enable\");\n         }\n@@ -3479,8 +3479,9 @@ fn check_expr_with_unifier(fcx: &FnCtxt,\n                     },\n                     expr_t, None);\n \n-                tcx.sess.span_note(field.span,\n-                    \"maybe a missing `()` to call it? If not, try an anonymous function.\");\n+                tcx.sess.span_help(field.span,\n+                    \"maybe a `()` to call it is missing? \\\n+                     If not, try an anonymous function\");\n             }\n \n             Err(_) => {\n@@ -4787,7 +4788,8 @@ pub fn check_instantiable(tcx: &ty::ctxt,\n     if !ty::is_instantiable(tcx, item_ty) {\n         span_err!(tcx.sess, sp, E0073,\n             \"this type cannot be instantiated without an \\\n-             instance of itself; consider using `Option<{}>`\",\n+             instance of itself\");\n+        span_help!(tcx.sess, sp, \"consider using `Option<{}>`\",\n             ppaux::ty_to_string(tcx, item_ty));\n         false\n     } else {"}, {"sha": "48bc3faadcd29eca0d9ca4643d928d34e778a6a0", "filename": "src/librustc/middle/typeck/check/vtable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bf9ef2122e2d9c872ea551d0561c9326940446f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf9ef2122e2d9c872ea551d0561c9326940446f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs?ref=5bf9ef2122e2d9c872ea551d0561c9326940446f", "patch": "@@ -521,7 +521,7 @@ fn note_obligation_cause(fcx: &FnCtxt,\n             span_note!(tcx.sess, obligation.cause.span,\n                       \"cannot implement a destructor on a \\\n                       structure or enumeration that does not satisfy Send\");\n-            span_note!(tcx.sess, obligation.cause.span,\n+            span_help!(tcx.sess, obligation.cause.span,\n                        \"use \\\"#[unsafe_destructor]\\\" on the implementation \\\n                        to force the compiler to allow this\");\n         }"}, {"sha": "bfa0f94a74751d466da59005e3294b4afcedcf4c", "filename": "src/librustc/middle/typeck/infer/error_reporting.rs", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/5bf9ef2122e2d9c872ea551d0561c9326940446f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf9ef2122e2d9c872ea551d0561c9326940446f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ferror_reporting.rs?ref=5bf9ef2122e2d9c872ea551d0561c9326940446f", "patch": "@@ -438,9 +438,12 @@ impl<'a, 'tcx> ErrorReporting for InferCtxt<'a, 'tcx> {\n                 self.tcx.sess.span_err(\n                     origin.span(),\n                     format!(\n-                        \"the parameter type `{}` may not live long enough; \\\n-                         consider adding an explicit lifetime bound `{}:{}`...\",\n-                        param_ty.user_string(self.tcx),\n+                        \"the parameter type `{}` may not live long enough\",\n+                        param_ty.user_string(self.tcx)).as_slice());\n+                self.tcx.sess.span_help(\n+                    origin.span(),\n+                    format!(\n+                        \"consider adding an explicit lifetime bound `{}: {}`...\",\n                         param_ty.user_string(self.tcx),\n                         sub.user_string(self.tcx)).as_slice());\n             }\n@@ -450,9 +453,12 @@ impl<'a, 'tcx> ErrorReporting for InferCtxt<'a, 'tcx> {\n                 self.tcx.sess.span_err(\n                     origin.span(),\n                     format!(\n-                        \"the parameter type `{}` may not live long enough; \\\n-                         consider adding an explicit lifetime bound `{}:'static`...\",\n-                        param_ty.user_string(self.tcx),\n+                        \"the parameter type `{}` may not live long enough\",\n+                        param_ty.user_string(self.tcx)).as_slice());\n+                self.tcx.sess.span_help(\n+                    origin.span(),\n+                    format!(\n+                        \"consider adding an explicit lifetime bound `{}: 'static`...\",\n                         param_ty.user_string(self.tcx)).as_slice());\n             }\n \n@@ -461,9 +467,12 @@ impl<'a, 'tcx> ErrorReporting for InferCtxt<'a, 'tcx> {\n                 self.tcx.sess.span_err(\n                     origin.span(),\n                     format!(\n-                        \"the parameter type `{}` may not live long enough; \\\n-                         consider adding an explicit lifetime bound to `{}`\",\n-                        param_ty.user_string(self.tcx),\n+                        \"the parameter type `{}` may not live long enough\",\n+                        param_ty.user_string(self.tcx)).as_slice());\n+                self.tcx.sess.span_help(\n+                    origin.span(),\n+                    format!(\n+                        \"consider adding an explicit lifetime bound to `{}`\",\n                         param_ty.user_string(self.tcx)).as_slice());\n                 note_and_explain_region(\n                     self.tcx,"}, {"sha": "b820780dbf9b6d34d209be2bdc20bbb0143aac66", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5bf9ef2122e2d9c872ea551d0561c9326940446f/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf9ef2122e2d9c872ea551d0561c9326940446f/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=5bf9ef2122e2d9c872ea551d0561c9326940446f", "patch": "@@ -48,16 +48,18 @@ pub trait UserString {\n pub fn note_and_explain_region(cx: &ctxt,\n                                prefix: &str,\n                                region: ty::Region,\n-                               suffix: &str) {\n+                               suffix: &str) -> Option<Span> {\n     match explain_region_and_span(cx, region) {\n       (ref str, Some(span)) => {\n         cx.sess.span_note(\n             span,\n             format!(\"{}{}{}\", prefix, *str, suffix).as_slice());\n+        Some(span)\n       }\n       (ref str, None) => {\n         cx.sess.note(\n             format!(\"{}{}{}\", prefix, *str, suffix).as_slice());\n+        None\n       }\n     }\n }"}, {"sha": "2d1d13f16d06d7164d30793403399daeddc3b0e3", "filename": "src/libsyntax/ext/bytes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5bf9ef2122e2d9c872ea551d0561c9326940446f/src%2Flibsyntax%2Fext%2Fbytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf9ef2122e2d9c872ea551d0561c9326940446f/src%2Flibsyntax%2Fext%2Fbytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbytes.rs?ref=5bf9ef2122e2d9c872ea551d0561c9326940446f", "patch": "@@ -22,10 +22,10 @@ pub fn expand_syntax_ext<'cx>(cx: &'cx mut ExtCtxt,\n                               tts: &[ast::TokenTree])\n                               -> Box<base::MacResult+'cx> {\n     cx.span_warn(sp, \"`bytes!` is deprecated, use `b\\\"foo\\\"` literals instead\");\n-    cx.parse_sess.span_diagnostic.span_note(sp,\n+    cx.parse_sess.span_diagnostic.span_help(sp,\n         \"see http://doc.rust-lang.org/reference.html#byte-and-byte-string-literals \\\n          for documentation\");\n-    cx.parse_sess.span_diagnostic.span_note(sp,\n+    cx.parse_sess.span_diagnostic.span_help(sp,\n         \"see https://github.com/rust-lang/rust/blob/master/src/etc/2014-06-rewrite-bytes-macros.py \\\n          for an automated migration\");\n "}, {"sha": "ff0cc9d0e5793da098fca8aeb73d849f99dcabf8", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bf9ef2122e2d9c872ea551d0561c9326940446f/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf9ef2122e2d9c872ea551d0561c9326940446f/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=5bf9ef2122e2d9c872ea551d0561c9326940446f", "patch": "@@ -131,7 +131,7 @@ impl<'a> Context<'a> {\n     fn gate_feature(&self, feature: &str, span: Span, explain: &str) {\n         if !self.has_feature(feature) {\n             self.span_handler.span_err(span, explain);\n-            self.span_handler.span_note(span, format!(\"add #![feature({})] to the \\\n+            self.span_handler.span_help(span, format!(\"add #![feature({})] to the \\\n                                                        crate attributes to enable\",\n                                                       feature).as_slice());\n         }"}, {"sha": "5e18c6bae48af68411bb73e90c430556a0eef630", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5bf9ef2122e2d9c872ea551d0561c9326940446f/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf9ef2122e2d9c872ea551d0561c9326940446f/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=5bf9ef2122e2d9c872ea551d0561c9326940446f", "patch": "@@ -2371,10 +2371,19 @@ impl<'a> Parser<'a> {\n                   token::LitFloat(n) => {\n                     self.bump();\n                     let last_span = self.last_span;\n+                    let fstr = n.as_str();\n                     self.span_err(last_span,\n                                   format!(\"unexpected token: `{}`\", n.as_str()).as_slice());\n-                    self.span_note(last_span,\n-                                   \"try parenthesizing the first index; e.g., `(foo.0).1`\");\n+                    if fstr.chars().all(|x| \"0123456789.\".contains_char(x)) {\n+                        let float = match from_str::<f64>(fstr) {\n+                            Some(f) => f,\n+                            None => continue,\n+                        };\n+                        self.span_help(last_span,\n+                            format!(\"try parenthesizing the first index; e.g., `(foo.{}){}`\",\n+                                    float.trunc() as uint,\n+                                    float.fract().to_string()[1..]).as_slice());\n+                    }\n                     self.abort_if_errors();\n \n                   }\n@@ -2578,7 +2587,7 @@ impl<'a> Parser<'a> {\n             token::Eof => {\n                 let open_braces = self.open_braces.clone();\n                 for sp in open_braces.iter() {\n-                    self.span_note(*sp, \"Did you mean to close this delimiter?\");\n+                    self.span_help(*sp, \"did you mean to close this delimiter?\");\n                 }\n                 // There shouldn't really be a span, but it's easier for the test runner\n                 // if we give it one\n@@ -5352,8 +5361,8 @@ impl<'a> Parser<'a> {\n             self.bump();\n             if self.eat_keyword(keywords::Mut) {\n                 let last_span = self.last_span;\n-                self.span_err(last_span, \"const globals cannot be mutable, \\\n-                                          did you mean to declare a static?\");\n+                self.span_err(last_span, \"const globals cannot be mutable\");\n+                self.span_help(last_span, \"did you mean to declare a static?\");\n             }\n             let (ident, item_, extra_attrs) = self.parse_item_const(None);\n             let last_span = self.last_span;"}, {"sha": "cd1101c05d15f3a270ee23b00518be1ffb4486a8", "filename": "src/test/compile-fail/borrowck-let-suggestion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bf9ef2122e2d9c872ea551d0561c9326940446f/src%2Ftest%2Fcompile-fail%2Fborrowck-let-suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf9ef2122e2d9c872ea551d0561c9326940446f/src%2Ftest%2Fcompile-fail%2Fborrowck-let-suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-let-suggestion.rs?ref=5bf9ef2122e2d9c872ea551d0561c9326940446f", "patch": "@@ -11,7 +11,7 @@\n fn f() {\n     let x = [1i].iter(); //~ ERROR borrowed value does not live long enough\n                          //~^^ NOTE reference must be valid for the block\n-                         //~^^ NOTE consider using a `let` binding to increase its lifetime\n+                         //~^^ HELP consider using a `let` binding to increase its lifetime\n }\n \n fn main() {"}, {"sha": "ed00d4131dbad3851f1f0830d97e87914f618779", "filename": "src/test/compile-fail/issue-11714.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bf9ef2122e2d9c872ea551d0561c9326940446f/src%2Ftest%2Fcompile-fail%2Fissue-11714.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf9ef2122e2d9c872ea551d0561c9326940446f/src%2Ftest%2Fcompile-fail%2Fissue-11714.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-11714.rs?ref=5bf9ef2122e2d9c872ea551d0561c9326940446f", "patch": "@@ -11,7 +11,7 @@\n fn blah() -> int { //~ ERROR not all control paths return a value\n     1i\n \n-    ; //~ NOTE consider removing this semicolon:\n+    ; //~ HELP consider removing this semicolon:\n }\n \n fn main() { }"}, {"sha": "c771970650d31e2bee64641e787dabc1c188d04f", "filename": "src/test/compile-fail/issue-13428.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5bf9ef2122e2d9c872ea551d0561c9326940446f/src%2Ftest%2Fcompile-fail%2Fissue-13428.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf9ef2122e2d9c872ea551d0561c9326940446f/src%2Ftest%2Fcompile-fail%2Fissue-13428.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-13428.rs?ref=5bf9ef2122e2d9c872ea551d0561c9326940446f", "patch": "@@ -15,12 +15,12 @@ fn foo() -> String {  //~ ERROR not all control paths return a value\n             \"world\")\n     // Put the trailing semicolon on its own line to test that the\n     // note message gets the offending semicolon exactly\n-    ;   //~ NOTE consider removing this semicolon\n+    ;   //~ HELP consider removing this semicolon\n }\n \n fn bar() -> String {  //~ ERROR not all control paths return a value\n     \"foobar\".to_string()\n-    ;   //~ NOTE consider removing this semicolon\n+    ;   //~ HELP consider removing this semicolon\n }\n \n pub fn main() {}"}, {"sha": "22e3e9ed09e7dbc0c70c896ac93dab7286f421b2", "filename": "src/test/compile-fail/issue-16747.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5bf9ef2122e2d9c872ea551d0561c9326940446f/src%2Ftest%2Fcompile-fail%2Fissue-16747.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf9ef2122e2d9c872ea551d0561c9326940446f/src%2Ftest%2Fcompile-fail%2Fissue-16747.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-16747.rs?ref=5bf9ef2122e2d9c872ea551d0561c9326940446f", "patch": "@@ -15,8 +15,9 @@ trait ListItem<'a> {\n trait Collection { fn len(&self) -> uint; }\n \n struct List<'a, T: ListItem<'a>> {\n-//~^ ERROR the parameter type `T` may not live long enough; consider adding an explicit lifetime bo\n-//~^^ NOTE ...so that the reference type `&'a [T]` does not outlive the data it points at\n+//~^ ERROR the parameter type `T` may not live long enough\n+//~^^ HELP consider adding an explicit lifetime bound\n+//~^^^ NOTE ...so that the reference type `&'a [T]` does not outlive the data it points at\n     slice: &'a [T]\n }\n "}, {"sha": "11c815da1c7f51e677ea85629d45f1acb827cbe4", "filename": "src/test/compile-fail/issue-17441.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5bf9ef2122e2d9c872ea551d0561c9326940446f/src%2Ftest%2Fcompile-fail%2Fissue-17441.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf9ef2122e2d9c872ea551d0561c9326940446f/src%2Ftest%2Fcompile-fail%2Fissue-17441.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17441.rs?ref=5bf9ef2122e2d9c872ea551d0561c9326940446f", "patch": "@@ -11,14 +11,14 @@\n fn main() {\n     let _foo = &[1u, 2] as [uint];\n     //~^ ERROR cast to unsized type: `&[uint, ..2]` as `[uint]`\n-    //~^^ NOTE consider using an implicit coercion to `&[uint]` instead\n+    //~^^ HELP consider using an implicit coercion to `&[uint]` instead\n     let _bar = box 1u as std::fmt::Show;\n     //~^ ERROR cast to unsized type: `Box<uint>` as `core::fmt::Show`\n-    //~^^ NOTE did you mean `Box<core::fmt::Show>`?\n+    //~^^ HELP did you mean `Box<core::fmt::Show>`?\n     let _baz = 1u as std::fmt::Show;\n     //~^ ERROR cast to unsized type: `uint` as `core::fmt::Show`\n-    //~^^ NOTE consider using a box or reference as appropriate\n+    //~^^ HELP consider using a box or reference as appropriate\n     let _quux = [1u, 2] as [uint];\n     //~^ ERROR cast to unsized type: `[uint, ..2]` as `[uint]`\n-    //~^^ NOTE consider using a box or reference as appropriate\n+    //~^^ HELP consider using a box or reference as appropriate\n }"}, {"sha": "12b9cf4ba8c0c145e365bcb35baf2ee780a29183", "filename": "src/test/compile-fail/issue-17718-const-mut.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5bf9ef2122e2d9c872ea551d0561c9326940446f/src%2Ftest%2Fcompile-fail%2Fissue-17718-const-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf9ef2122e2d9c872ea551d0561c9326940446f/src%2Ftest%2Fcompile-fail%2Fissue-17718-const-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17718-const-mut.rs?ref=5bf9ef2122e2d9c872ea551d0561c9326940446f", "patch": "@@ -9,7 +9,8 @@\n // except according to those terms.\n \n const\n-mut //~ ERROR: const globals cannot be mutable, did you mean to declare a static?\n+mut //~ ERROR: const globals cannot be mutable\n+//~^ HELP did you mean to declare a static?\n FOO: uint = 3;\n \n fn main() {"}, {"sha": "cc219a6acb5ef3bc40e4e517b54aea1876ce77a1", "filename": "src/test/compile-fail/issue-2354.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bf9ef2122e2d9c872ea551d0561c9326940446f/src%2Ftest%2Fcompile-fail%2Fissue-2354.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf9ef2122e2d9c872ea551d0561c9326940446f/src%2Ftest%2Fcompile-fail%2Fissue-2354.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2354.rs?ref=5bf9ef2122e2d9c872ea551d0561c9326940446f", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn foo() { //~ NOTE Did you mean to close this delimiter?\n+fn foo() { //~ HELP did you mean to close this delimiter?\n   match Some(x) {\n       Some(y) { panic!(); }\n       None    { panic!(); }"}, {"sha": "3e35e4a659d1ecdda12d1d9cabed1c0482d42905", "filename": "src/test/compile-fail/issue-6702.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bf9ef2122e2d9c872ea551d0561c9326940446f/src%2Ftest%2Fcompile-fail%2Fissue-6702.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf9ef2122e2d9c872ea551d0561c9326940446f/src%2Ftest%2Fcompile-fail%2Fissue-6702.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-6702.rs?ref=5bf9ef2122e2d9c872ea551d0561c9326940446f", "patch": "@@ -15,5 +15,5 @@ struct Monster {\n \n fn main() {\n     let _m = Monster(); //~ ERROR `Monster` is a structure name, but\n-    //~^ NOTE Did you mean to write: `Monster { /* fields */ }`?\n+    //~^ HELP Did you mean to write: `Monster { /* fields */ }`?\n }"}, {"sha": "5d96176434239cdcf6adcd8198956e96a74bd2a5", "filename": "src/test/compile-fail/lifetime-elision-return-type-requires-explicit-lifetime.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5bf9ef2122e2d9c872ea551d0561c9326940446f/src%2Ftest%2Fcompile-fail%2Flifetime-elision-return-type-requires-explicit-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf9ef2122e2d9c872ea551d0561c9326940446f/src%2Ftest%2Fcompile-fail%2Flifetime-elision-return-type-requires-explicit-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flifetime-elision-return-type-requires-explicit-lifetime.rs?ref=5bf9ef2122e2d9c872ea551d0561c9326940446f", "patch": "@@ -10,13 +10,13 @@\n \n // Lifetime annotation needed because we have no arguments.\n fn f() -> &int {    //~ ERROR missing lifetime specifier\n-//~^ NOTE there is no value for it to be borrowed from\n+//~^ HELP there is no value for it to be borrowed from\n     panic!()\n }\n \n // Lifetime annotation needed because we have two by-reference parameters.\n fn g(_x: &int, _y: &int) -> &int {    //~ ERROR missing lifetime specifier\n-//~^ NOTE the signature does not say whether it is borrowed from `_x` or `_y`\n+//~^ HELP the signature does not say whether it is borrowed from `_x` or `_y`\n     panic!()\n }\n \n@@ -27,7 +27,13 @@ struct Foo<'a> {\n // Lifetime annotation needed because we have two lifetimes: one as a parameter\n // and one on the reference.\n fn h(_x: &Foo) -> &int { //~ ERROR missing lifetime specifier\n-//~^ NOTE the signature does not say which one of `_x`'s 2 elided lifetimes it is borrowed from\n+//~^ HELP the signature does not say which one of `_x`'s 2 elided lifetimes it is borrowed from\n+    panic!()\n+}\n+\n+fn i(_x: int) -> &int { //~ ERROR missing lifetime specifier\n+//~^ HELP this function's return type contains a borrowed value\n+//~^^ HELP consider giving it a 'static lifetime\n     panic!()\n }\n "}, {"sha": "f2ea2ca96a59db03090c82498c1c60f7463a84b1", "filename": "src/test/compile-fail/liveness-return-last-stmt-semi.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5bf9ef2122e2d9c872ea551d0561c9326940446f/src%2Ftest%2Fcompile-fail%2Fliveness-return-last-stmt-semi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf9ef2122e2d9c872ea551d0561c9326940446f/src%2Ftest%2Fcompile-fail%2Fliveness-return-last-stmt-semi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-return-last-stmt-semi.rs?ref=5bf9ef2122e2d9c872ea551d0561c9326940446f", "patch": "@@ -14,12 +14,12 @@\n \n macro_rules! test ( () => { fn foo() -> int { 1i; } } )\n                                              //~^ ERROR not all control paths return a value\n-                                             //~^^ NOTE consider removing this semicolon\n+                                             //~^^ HELP consider removing this semicolon\n \n fn no_return() -> int {} //~ ERROR  not all control paths return a value\n \n fn bar(x: u32) -> u32 { //~ ERROR  not all control paths return a value\n-    x * 2; //~ NOTE consider removing this semicolon\n+    x * 2; //~ HELP consider removing this semicolon\n }\n \n fn baz(x: u64) -> u32 { //~ ERROR  not all control paths return a value"}, {"sha": "ddfa447f60e22cdfee1cfb252b57d5a43fcd867b", "filename": "src/test/compile-fail/method-missing-call.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5bf9ef2122e2d9c872ea551d0561c9326940446f/src%2Ftest%2Fcompile-fail%2Fmethod-missing-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf9ef2122e2d9c872ea551d0561c9326940446f/src%2Ftest%2Fcompile-fail%2Fmethod-missing-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmethod-missing-call.rs?ref=5bf9ef2122e2d9c872ea551d0561c9326940446f", "patch": "@@ -30,14 +30,14 @@ fn main() {\n     let point: Point = Point::new();\n     let px: int =  point\n                         .get_x;//~ ERROR attempted to take value of method `get_x` on type `Point`\n-                        //~^ NOTE maybe a missing `()` to call it? If not, try an anonymous\n+                        //~^ HELP maybe a `()` to call it is missing\n \n     // Ensure the span is useful\n     let ys = &[1i,2,3,4,5,6,7];\n     let a = ys.iter()\n               .map(|x| x)\n               .filter(|&&x| x == 1)\n               .filter_map; //~ ERROR attempted to take value of method `filter_map` on type\n-              //~^ NOTE maybe a missing `()` to call it? If not, try an anonymous function.\n+              //~^ HELP maybe a `()` to call it is missing\n }\n "}]}