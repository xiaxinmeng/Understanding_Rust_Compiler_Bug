{"sha": "5003b3dc31d422dd568eaa6d8339ecdb0df2c526", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwMDNiM2RjMzFkNDIyZGQ1NjhlYWE2ZDgzMzllY2RiMGRmMmM1MjY=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-03-04T18:24:11Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-03-18T19:09:00Z"}, "message": "Move IntEncodedWithFixedSize to rustc_serialize.", "tree": {"sha": "8c5fb09d0e436e679ca6f38bda388809bd280c80", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c5fb09d0e436e679ca6f38bda388809bd280c80"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5003b3dc31d422dd568eaa6d8339ecdb0df2c526", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5003b3dc31d422dd568eaa6d8339ecdb0df2c526", "html_url": "https://github.com/rust-lang/rust/commit/5003b3dc31d422dd568eaa6d8339ecdb0df2c526", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5003b3dc31d422dd568eaa6d8339ecdb0df2c526/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ce0fedb67fa66d50aa819ef8b12f1d89eb22d7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ce0fedb67fa66d50aa819ef8b12f1d89eb22d7d", "html_url": "https://github.com/rust-lang/rust/commit/0ce0fedb67fa66d50aa819ef8b12f1d89eb22d7d"}], "stats": {"total": 86, "additions": 49, "deletions": 37}, "files": [{"sha": "8d2654e2157b702ee86812aaa9f8e21eb0c41cb4", "filename": "compiler/rustc_middle/src/ty/query/on_disk_cache.rs", "status": "modified", "additions": 1, "deletions": 37, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/5003b3dc31d422dd568eaa6d8339ecdb0df2c526/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5003b3dc31d422dd568eaa6d8339ecdb0df2c526/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs?ref=5003b3dc31d422dd568eaa6d8339ecdb0df2c526", "patch": "@@ -17,7 +17,7 @@ use rustc_index::vec::{Idx, IndexVec};\n use rustc_query_system::dep_graph::DepContext;\n use rustc_query_system::query::QueryContext;\n use rustc_serialize::{\n-    opaque::{self, FileEncodeResult, FileEncoder},\n+    opaque::{self, FileEncodeResult, FileEncoder, IntEncodedWithFixedSize},\n     Decodable, Decoder, Encodable, Encoder,\n };\n use rustc_session::{CrateDisambiguator, Session};\n@@ -1180,42 +1180,6 @@ impl<'a, 'tcx> Encodable<CacheEncoder<'a, 'tcx, FileEncoder>> for [u8] {\n     }\n }\n \n-// An integer that will always encode to 8 bytes.\n-struct IntEncodedWithFixedSize(u64);\n-\n-impl IntEncodedWithFixedSize {\n-    pub const ENCODED_SIZE: usize = 8;\n-}\n-\n-impl<E: OpaqueEncoder> Encodable<E> for IntEncodedWithFixedSize {\n-    fn encode(&self, e: &mut E) -> Result<(), E::Error> {\n-        let start_pos = e.position();\n-        for i in 0..IntEncodedWithFixedSize::ENCODED_SIZE {\n-            ((self.0 >> (i * 8)) as u8).encode(e)?;\n-        }\n-        let end_pos = e.position();\n-        assert_eq!((end_pos - start_pos), IntEncodedWithFixedSize::ENCODED_SIZE);\n-        Ok(())\n-    }\n-}\n-\n-impl<'a> Decodable<opaque::Decoder<'a>> for IntEncodedWithFixedSize {\n-    fn decode(decoder: &mut opaque::Decoder<'a>) -> Result<IntEncodedWithFixedSize, String> {\n-        let mut value: u64 = 0;\n-        let start_pos = decoder.position();\n-\n-        for i in 0..IntEncodedWithFixedSize::ENCODED_SIZE {\n-            let byte: u8 = Decodable::decode(decoder)?;\n-            value |= (byte as u64) << (i * 8);\n-        }\n-\n-        let end_pos = decoder.position();\n-        assert_eq!((end_pos - start_pos), IntEncodedWithFixedSize::ENCODED_SIZE);\n-\n-        Ok(IntEncodedWithFixedSize(value))\n-    }\n-}\n-\n pub fn encode_query_results<'a, 'tcx, CTX, Q>(\n     tcx: CTX,\n     encoder: &mut CacheEncoder<'a, 'tcx, FileEncoder>,"}, {"sha": "8d833dbf88e246703adc8249c1c8a811ae95ff8d", "filename": "compiler/rustc_serialize/src/opaque.rs", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/5003b3dc31d422dd568eaa6d8339ecdb0df2c526/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5003b3dc31d422dd568eaa6d8339ecdb0df2c526/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs?ref=5003b3dc31d422dd568eaa6d8339ecdb0df2c526", "patch": "@@ -718,3 +718,51 @@ impl<'a> serialize::Decodable<Decoder<'a>> for Vec<u8> {\n         Ok(v)\n     }\n }\n+\n+// An integer that will always encode to 8 bytes.\n+pub struct IntEncodedWithFixedSize(pub u64);\n+\n+impl IntEncodedWithFixedSize {\n+    pub const ENCODED_SIZE: usize = 8;\n+}\n+\n+impl serialize::Encodable<Encoder> for IntEncodedWithFixedSize {\n+    fn encode(&self, e: &mut Encoder) -> EncodeResult {\n+        let start_pos = e.position();\n+        for i in 0..IntEncodedWithFixedSize::ENCODED_SIZE {\n+            ((self.0 >> (i * 8)) as u8).encode(e)?;\n+        }\n+        let end_pos = e.position();\n+        assert_eq!((end_pos - start_pos), IntEncodedWithFixedSize::ENCODED_SIZE);\n+        Ok(())\n+    }\n+}\n+\n+impl serialize::Encodable<FileEncoder> for IntEncodedWithFixedSize {\n+    fn encode(&self, e: &mut FileEncoder) -> FileEncodeResult {\n+        let start_pos = e.position();\n+        for i in 0..IntEncodedWithFixedSize::ENCODED_SIZE {\n+            ((self.0 >> (i * 8)) as u8).encode(e)?;\n+        }\n+        let end_pos = e.position();\n+        assert_eq!((end_pos - start_pos), IntEncodedWithFixedSize::ENCODED_SIZE);\n+        Ok(())\n+    }\n+}\n+\n+impl<'a> serialize::Decodable<Decoder<'a>> for IntEncodedWithFixedSize {\n+    fn decode(decoder: &mut Decoder<'a>) -> Result<IntEncodedWithFixedSize, String> {\n+        let mut value: u64 = 0;\n+        let start_pos = decoder.position();\n+\n+        for i in 0..IntEncodedWithFixedSize::ENCODED_SIZE {\n+            let byte: u8 = serialize::Decodable::decode(decoder)?;\n+            value |= (byte as u64) << (i * 8);\n+        }\n+\n+        let end_pos = decoder.position();\n+        assert_eq!((end_pos - start_pos), IntEncodedWithFixedSize::ENCODED_SIZE);\n+\n+        Ok(IntEncodedWithFixedSize(value))\n+    }\n+}"}]}