{"sha": "61cbc84480e4d3bf525836cef715ad2a904452f4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxY2JjODQ0ODBlNGQzYmY1MjU4MzZjZWY3MTVhZDJhOTA0NDUyZjQ=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2015-10-29T18:54:55Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2015-10-29T18:54:55Z"}, "message": "Make fields and macro defs exported", "tree": {"sha": "3166d6a6c17bf16b2ca4983468e73c23e333548c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3166d6a6c17bf16b2ca4983468e73c23e333548c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/61cbc84480e4d3bf525836cef715ad2a904452f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/61cbc84480e4d3bf525836cef715ad2a904452f4", "html_url": "https://github.com/rust-lang/rust/commit/61cbc84480e4d3bf525836cef715ad2a904452f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/61cbc84480e4d3bf525836cef715ad2a904452f4/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "243a524d060dcaf0b0381a8d5dea0a11b1474dfd", "url": "https://api.github.com/repos/rust-lang/rust/commits/243a524d060dcaf0b0381a8d5dea0a11b1474dfd", "html_url": "https://github.com/rust-lang/rust/commit/243a524d060dcaf0b0381a8d5dea0a11b1474dfd"}], "stats": {"total": 30, "additions": 6, "deletions": 24}, "files": [{"sha": "97ab9c2dfb7f9636a67ab068451af883c7204ad8", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/61cbc84480e4d3bf525836cef715ad2a904452f4/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61cbc84480e4d3bf525836cef715ad2a904452f4/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=61cbc84480e4d3bf525836cef715ad2a904452f4", "patch": "@@ -223,14 +223,8 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n                 continue\n             }\n \n-            match self.tcx.map.find(search_item) {\n-                Some(ref item) => self.propagate_node(item, search_item),\n-                None if search_item == ast::CRATE_NODE_ID => {}\n-                None => {\n-                    self.tcx.sess.bug(&format!(\"found unmapped ID in worklist: \\\n-                                               {}\",\n-                                              search_item))\n-                }\n+            if let Some(ref item) = self.tcx.map.find(search_item) {\n+                self.propagate_node(item, search_item);\n             }\n         }\n     }"}, {"sha": "aeed1c6f7940b8b590bf4201d0209f2a6af268f4", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/61cbc84480e4d3bf525836cef715ad2a904452f4/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61cbc84480e4d3bf525836cef715ad2a904452f4/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=61cbc84480e4d3bf525836cef715ad2a904452f4", "patch": "@@ -175,9 +175,7 @@ struct EmbargoVisitor<'a, 'tcx: 'a> {\n     // Items that are directly public without help of reexports or type aliases.\n     // These two fields are closely related to one another in that they are only\n     // used for generation of the `public_items` set, not for privacy checking at\n-    // all. Public items are mostly a subset of exported items with exception of\n-    // fields and exported macros - they are public, but not exported.\n-    // FIXME: Make fields and exported macros exported as well (requires fixing resulting ICEs)\n+    // all. Invariant: at any moment public items are a subset of exported items.\n     public_items: PublicItems,\n     prev_public: bool,\n }\n@@ -251,11 +249,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for EmbargoVisitor<'a, 'tcx> {\n                     self.maybe_insert_id(variant.node.data.id());\n                     for field in variant.node.data.fields() {\n                         // Variant fields are always public\n-                        if self.prev_public {\n-                            self.public_items.insert(field.node.id);\n-                        }\n-                        // FIXME: Make fields exported (requires fixing resulting ICEs)\n-                        // if self.prev_exported { self.exported_items.insert(field.node.id); }\n+                        self.maybe_insert_id(field.node.id);\n                     }\n                 }\n             }\n@@ -328,11 +322,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for EmbargoVisitor<'a, 'tcx> {\n                 for field in def.fields() {\n                     // Struct fields can be public or private, so lets check\n                     if field.node.kind.visibility() == hir::Public {\n-                        if self.prev_public {\n-                            self.public_items.insert(field.node.id);\n-                        }\n-                        // FIXME: Make fields exported (requires fixing resulting ICEs)\n-                        // if self.prev_exported { self.exported_items.insert(field.node.id); }\n+                        self.maybe_insert_id(field.node.id);\n                     }\n                 }\n             }\n@@ -403,9 +393,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for EmbargoVisitor<'a, 'tcx> {\n     }\n \n     fn visit_macro_def(&mut self, md: &'v hir::MacroDef) {\n-        self.public_items.insert(md.id);\n-        // FIXME: Make exported macros exported (requires fixing resulting ICEs)\n-        // self.exported_items.insert(md.id);\n+        self.maybe_insert_id(md.id);\n     }\n }\n "}]}