{"sha": "9d110847ab7f6aef56a8cd20cb6cea4fbcc51cd9", "node_id": "C_kwDOAAsO6NoAKDlkMTEwODQ3YWI3ZjZhZWY1NmE4Y2QyMGNiNmNlYTRmYmNjNTFjZDk", "commit": {"author": {"name": "Lukas Markeffsky", "email": "@", "date": "2023-02-05T14:29:07Z"}, "committer": {"name": "Lukas Markeffsky", "email": "@", "date": "2023-02-05T14:29:07Z"}, "message": "ReErased regions are local", "tree": {"sha": "ae1eee31a38c476c5f552437475f5c2482266561", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae1eee31a38c476c5f552437475f5c2482266561"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d110847ab7f6aef56a8cd20cb6cea4fbcc51cd9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d110847ab7f6aef56a8cd20cb6cea4fbcc51cd9", "html_url": "https://github.com/rust-lang/rust/commit/9d110847ab7f6aef56a8cd20cb6cea4fbcc51cd9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d110847ab7f6aef56a8cd20cb6cea4fbcc51cd9/comments", "author": null, "committer": null, "parents": [{"sha": "2a6ff729233c62d1d991da5ed4d01aa29e59d637", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a6ff729233c62d1d991da5ed4d01aa29e59d637", "html_url": "https://github.com/rust-lang/rust/commit/2a6ff729233c62d1d991da5ed4d01aa29e59d637"}], "stats": {"total": 27, "additions": 25, "deletions": 2}, "files": [{"sha": "4aa958878d4b304678644cd7eb50c5d92812371a", "filename": "compiler/rustc_type_ir/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9d110847ab7f6aef56a8cd20cb6cea4fbcc51cd9/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d110847ab7f6aef56a8cd20cb6cea4fbcc51cd9/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs?ref=9d110847ab7f6aef56a8cd20cb6cea4fbcc51cd9", "patch": "@@ -220,7 +220,8 @@ bitflags! {\n                                           // which is different from how types/const are freshened.\n                                           | TypeFlags::HAS_TY_FRESH.bits\n                                           | TypeFlags::HAS_CT_FRESH.bits\n-                                          | TypeFlags::HAS_FREE_LOCAL_REGIONS.bits;\n+                                          | TypeFlags::HAS_FREE_LOCAL_REGIONS.bits\n+                                          | TypeFlags::HAS_RE_ERASED.bits;\n \n         /// Does this have `Projection`?\n         const HAS_TY_PROJECTION           = 1 << 10;"}, {"sha": "14a45687875f849865d7d8168f74996cfef697e6", "filename": "tests/ui/mir/issue-107678-projection-with-lifetime.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9d110847ab7f6aef56a8cd20cb6cea4fbcc51cd9/tests%2Fui%2Fmir%2Fissue-107678-projection-with-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d110847ab7f6aef56a8cd20cb6cea4fbcc51cd9/tests%2Fui%2Fmir%2Fissue-107678-projection-with-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmir%2Fissue-107678-projection-with-lifetime.rs?ref=9d110847ab7f6aef56a8cd20cb6cea4fbcc51cd9", "patch": "@@ -0,0 +1,20 @@\n+// build-pass\n+\n+#![crate_type = \"lib\"]\n+\n+pub trait StreamOnce {\n+    type Error;\n+}\n+\n+pub trait ResetStream: StreamOnce {\n+    fn reset(&mut self) -> Result<(), Self::Error>;\n+}\n+\n+impl<'a> ResetStream for &'a str\n+    where Self: StreamOnce\n+{\n+    #[inline]\n+    fn reset(&mut self) -> Result<(), Self::Error> {\n+        Ok(())\n+    }\n+}"}, {"sha": "64683ae3a6ebd13c175e91fb9dce51109f22c756", "filename": "tests/ui/recursion/issue-83150.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d110847ab7f6aef56a8cd20cb6cea4fbcc51cd9/tests%2Fui%2Frecursion%2Fissue-83150.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d110847ab7f6aef56a8cd20cb6cea4fbcc51cd9/tests%2Fui%2Frecursion%2Fissue-83150.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frecursion%2Fissue-83150.stderr?ref=9d110847ab7f6aef56a8cd20cb6cea4fbcc51cd9", "patch": "@@ -9,9 +9,11 @@ LL |     func(&mut iter.map(|x| x + 1))\n    = help: a `loop` may express intention better if this is on purpose\n    = note: `#[warn(unconditional_recursion)]` on by default\n \n-error[E0275]: overflow evaluating the requirement `Map<&mut Map<&mut Map<&mut Map<..., ...>, ...>, ...>, ...>: Iterator`\n+error[E0275]: overflow evaluating the requirement `Map<&mut std::ops::Range<u8>, [closure@$DIR/issue-83150.rs:12:24: 12:27]>: Iterator`\n    |\n    = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`issue_83150`)\n+   = note: required for `&mut Map<&mut std::ops::Range<u8>, [closure@$DIR/issue-83150.rs:12:24: 12:27]>` to implement `Iterator`\n+   = note: 65 redundant requirements hidden\n    = note: required for `&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<..., ...>, ...>, ...>, ...>, ...>, ...>, ...>` to implement `Iterator`\n    = note: the full type name has been written to '$TEST_BUILD_DIR/recursion/issue-83150/issue-83150.long-type-hash.txt'\n "}]}