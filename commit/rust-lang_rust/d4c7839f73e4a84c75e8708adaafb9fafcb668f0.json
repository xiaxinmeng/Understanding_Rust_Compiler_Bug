{"sha": "d4c7839f73e4a84c75e8708adaafb9fafcb668f0", "node_id": "C_kwDOAAsO6NoAKGQ0Yzc4MzlmNzNlNGE4NGM3NWU4NzA4YWRhYWZiOWZhZmNiNjY4ZjA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-05T14:17:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-05T14:17:30Z"}, "message": "Auto merge of #95680 - Dylan-DPC:rollup-7jldtnz, r=Dylan-DPC\n\nRollup of 4 pull requests\n\nSuccessful merges:\n\n - #95525 (Suggest derivable trait on E0277 error)\n - #95654 (diagnostics: use correct span for const generics)\n - #95660 (Update panic docs to make it clearer when to use panic vs Result)\n - #95670 (Refactor: remove unused function parameters)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "082beb2bb24bc827923c1800c258baeabfc3afac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/082beb2bb24bc827923c1800c258baeabfc3afac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4c7839f73e4a84c75e8708adaafb9fafcb668f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4c7839f73e4a84c75e8708adaafb9fafcb668f0", "html_url": "https://github.com/rust-lang/rust/commit/d4c7839f73e4a84c75e8708adaafb9fafcb668f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "634770c0a7f8598164ab825cfe419cc8b03c36e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/634770c0a7f8598164ab825cfe419cc8b03c36e5", "html_url": "https://github.com/rust-lang/rust/commit/634770c0a7f8598164ab825cfe419cc8b03c36e5"}, {"sha": "68329648ac080aa4be26c2712aef283cd9ca6ea0", "url": "https://api.github.com/repos/rust-lang/rust/commits/68329648ac080aa4be26c2712aef283cd9ca6ea0", "html_url": "https://github.com/rust-lang/rust/commit/68329648ac080aa4be26c2712aef283cd9ca6ea0"}], "stats": {"total": 528, "additions": 453, "deletions": 75}, "files": [{"sha": "e7e82e651bb09ae0f7dd5518eb76d9530ed46cea", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=d4c7839f73e4a84c75e8708adaafb9fafcb668f0", "patch": "@@ -2068,7 +2068,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         hir::GenericParam {\n             hir_id,\n             name,\n-            span: self.lower_span(param.ident.span),\n+            span: self.lower_span(param.span()),\n             pure_wrt_drop: self.sess.contains_name(&param.attrs, sym::may_dangle),\n             bounds: self.arena.alloc_from_iter(bounds),\n             kind,"}, {"sha": "b945d687043b44d61df4f3e9295ed2a81f7a592b", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=d4c7839f73e4a84c75e8708adaafb9fafcb668f0", "patch": "@@ -772,14 +772,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             Some((issued_span, span)),\n         );\n \n-        self.suggest_using_local_if_applicable(\n-            &mut err,\n-            location,\n-            (place, span),\n-            gen_borrow_kind,\n-            issued_borrow,\n-            explanation,\n-        );\n+        self.suggest_using_local_if_applicable(&mut err, location, issued_borrow, explanation);\n \n         err\n     }\n@@ -789,8 +782,6 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         &self,\n         err: &mut Diagnostic,\n         location: Location,\n-        (place, span): (Place<'tcx>, Span),\n-        gen_borrow_kind: BorrowKind,\n         issued_borrow: &BorrowData<'tcx>,\n         explanation: BorrowExplanation,\n     ) {\n@@ -822,7 +813,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             return;\n         };\n         let inner_param_uses = find_all_local_uses::find(self.body, inner_param.local);\n-        let Some((inner_call_loc,inner_call_term)) = inner_param_uses.into_iter().find_map(|loc| {\n+        let Some((inner_call_loc, inner_call_term)) = inner_param_uses.into_iter().find_map(|loc| {\n             let Either::Right(term) = self.body.stmt_at(loc) else {\n                 debug!(\"{:?} is a statement, so it can't be a call\", loc);\n                 return None;\n@@ -833,7 +824,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             };\n             debug!(\"checking call args for uses of inner_param: {:?}\", args);\n             if args.contains(&Operand::Move(inner_param)) {\n-                Some((loc,term))\n+                Some((loc, term))\n             } else {\n                 None\n             }"}, {"sha": "9998c5bb087e17bfe1a38fa4d6482077f9995589", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=d4c7839f73e4a84c75e8708adaafb9fafcb668f0", "patch": "@@ -540,6 +540,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                         );\n                         self.note_version_mismatch(&mut err, &trait_ref);\n                         self.suggest_remove_await(&obligation, &mut err);\n+                        self.suggest_derive(&obligation, &mut err, trait_predicate);\n \n                         if Some(trait_ref.def_id()) == tcx.lang_items().try_trait() {\n                             self.suggest_await_before_try("}, {"sha": "7c3f306717a69e24665a9b16bd19aaa587cccfe9", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=d4c7839f73e4a84c75e8708adaafb9fafcb668f0", "patch": "@@ -189,6 +189,13 @@ pub trait InferCtxtExt<'tcx> {\n         err: &mut Diagnostic,\n         trait_ref: &ty::PolyTraitRef<'tcx>,\n     );\n+\n+    fn suggest_derive(\n+        &self,\n+        obligation: &PredicateObligation<'tcx>,\n+        err: &mut Diagnostic,\n+        trait_pred: ty::PolyTraitPredicate<'tcx>,\n+    );\n }\n \n fn predicate_constraint(generics: &hir::Generics<'_>, pred: String) -> (Span, String) {\n@@ -2651,6 +2658,68 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             _ => {}\n         }\n     }\n+\n+    fn suggest_derive(\n+        &self,\n+        obligation: &PredicateObligation<'tcx>,\n+        err: &mut Diagnostic,\n+        trait_pred: ty::PolyTraitPredicate<'tcx>,\n+    ) {\n+        let Some(diagnostic_name) = self.tcx.get_diagnostic_name(trait_pred.def_id()) else {\n+            return;\n+        };\n+        let (adt, substs) = match trait_pred.skip_binder().self_ty().kind() {\n+            ty::Adt(adt, substs) if adt.did().is_local() => (adt, substs),\n+            _ => return,\n+        };\n+        let can_derive = {\n+            let is_derivable_trait = match diagnostic_name {\n+                sym::Default => !adt.is_enum(),\n+                sym::PartialEq | sym::PartialOrd => {\n+                    let rhs_ty = trait_pred.skip_binder().trait_ref.substs.type_at(1);\n+                    trait_pred.skip_binder().self_ty() == rhs_ty\n+                }\n+                sym::Eq | sym::Ord | sym::Clone | sym::Copy | sym::Hash | sym::Debug => true,\n+                _ => false,\n+            };\n+            is_derivable_trait &&\n+                // Ensure all fields impl the trait.\n+                adt.all_fields().all(|field| {\n+                    let field_ty = field.ty(self.tcx, substs);\n+                    let trait_substs = match diagnostic_name {\n+                        sym::PartialEq | sym::PartialOrd => {\n+                            self.tcx.mk_substs_trait(field_ty, &[field_ty.into()])\n+                        }\n+                        _ => self.tcx.mk_substs_trait(field_ty, &[]),\n+                    };\n+                    let trait_pred = trait_pred.map_bound_ref(|tr| ty::TraitPredicate {\n+                        trait_ref: ty::TraitRef {\n+                            substs: trait_substs,\n+                            ..trait_pred.skip_binder().trait_ref\n+                        },\n+                        ..*tr\n+                    });\n+                    let field_obl = Obligation::new(\n+                        obligation.cause.clone(),\n+                        obligation.param_env,\n+                        trait_pred.to_predicate(self.tcx),\n+                    );\n+                    self.predicate_must_hold_modulo_regions(&field_obl)\n+                })\n+        };\n+        if can_derive {\n+            err.span_suggestion_verbose(\n+                self.tcx.def_span(adt.did()).shrink_to_lo(),\n+                &format!(\n+                    \"consider annotating `{}` with `#[derive({})]`\",\n+                    trait_pred.skip_binder().self_ty(),\n+                    diagnostic_name.to_string(),\n+                ),\n+                format!(\"#[derive({})]\\n\", diagnostic_name.to_string()),\n+                Applicability::MaybeIncorrect,\n+            );\n+        }\n+    }\n }\n \n /// Collect all the returned expressions within the input expression."}, {"sha": "d8206e789311481c97cf8c6f3339bd02759db883", "filename": "library/core/src/macros/panic.md", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/library%2Fcore%2Fsrc%2Fmacros%2Fpanic.md", "raw_url": "https://github.com/rust-lang/rust/raw/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/library%2Fcore%2Fsrc%2Fmacros%2Fpanic.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmacros%2Fpanic.md?ref=d4c7839f73e4a84c75e8708adaafb9fafcb668f0", "patch": "@@ -1,8 +1,7 @@\n Panics the current thread.\n \n This allows a program to terminate immediately and provide feedback\n-to the caller of the program. `panic!` should be used when a program reaches\n-an unrecoverable state.\n+to the caller of the program.\n \n This macro is the perfect way to assert conditions in example code and in\n tests. `panic!` is closely tied with the `unwrap` method of both\n@@ -21,13 +20,25 @@ Inside the hook a panic can be accessed as a `&dyn Any + Send`,\n which contains either a `&str` or `String` for regular `panic!()` invocations.\n To panic with a value of another other type, [`panic_any`] can be used.\n \n-[`Result`] enum is often a better solution for recovering from errors than\n-using the `panic!` macro. This macro should be used to avoid proceeding using\n-incorrect values, such as from external sources. Detailed information about\n-error handling is found in the [book].\n-\n See also the macro [`compile_error!`], for raising errors during compilation.\n \n+# When to use `panic!` vs `Result`\n+\n+The Rust model of error handling groups errors into two major categories:\n+recoverable and unrecoverable errors. For a recoverable error, such as a file\n+not found error, it\u2019s reasonable to report the problem to the user and retry\n+the operation. Unrecoverable errors are always symptoms of bugs, like trying to\n+access a location beyond the end of an array.\n+\n+The Rust language and standard library provides `Result` and `panic!` as parts\n+of two complementary systems for representing, reporting, propagating, reacting\n+to, and discarding errors for in these two categories.\n+\n+The `panic!` macro is provided to represent unrecoverable errors, whereas the\n+`Result` enum is provided to represent recoverable errors. For more detailed\n+information about error handling check out the [book] or the [`std::result`]\n+module docs.\n+\n [ounwrap]: Option::unwrap\n [runwrap]: Result::unwrap\n [`std::panic::set_hook()`]: ../std/panic/fn.set_hook.html\n@@ -36,6 +47,7 @@ See also the macro [`compile_error!`], for raising errors during compilation.\n [`Any`]: crate::any::Any\n [`format!`]: ../std/macro.format.html\n [book]: ../book/ch09-00-error-handling.html\n+[`std::result`]: ../std/result/index.html\n \n # Current implementation\n "}, {"sha": "eba1a8e2278b7d20b11c95c26f2f57c896395891", "filename": "src/test/ui/array-slice-vec/repeat_empty_ok.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Farray-slice-vec%2Frepeat_empty_ok.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Farray-slice-vec%2Frepeat_empty_ok.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Frepeat_empty_ok.stderr?ref=d4c7839f73e4a84c75e8708adaafb9fafcb668f0", "patch": "@@ -5,6 +5,10 @@ LL |     let headers = [Header{value: &[]}; 128];\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `Header<'_>`\n    |\n    = note: the `Copy` trait is required because the repeated element will be copied\n+help: consider annotating `Header<'_>` with `#[derive(Copy)]`\n+   |\n+LL | #[derive(Copy)]\n+   |\n \n error[E0277]: the trait bound `Header<'_>: Copy` is not satisfied\n   --> $DIR/repeat_empty_ok.rs:13:19\n@@ -13,6 +17,10 @@ LL |     let headers = [Header{value: &[0]}; 128];\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `Header<'_>`\n    |\n    = note: the `Copy` trait is required because the repeated element will be copied\n+help: consider annotating `Header<'_>` with `#[derive(Copy)]`\n+   |\n+LL | #[derive(Copy)]\n+   |\n \n error: aborting due to 2 previous errors\n "}, {"sha": "43541c5dfbcb54e4f9a39a62fc49a32dbacf670f", "filename": "src/test/ui/associated-types/defaults-suitability.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-suitability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-suitability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-suitability.stderr?ref=d4c7839f73e4a84c75e8708adaafb9fafcb668f0", "patch": "@@ -9,6 +9,10 @@ note: required by a bound in `Tr::Ty`\n    |\n LL |     type Ty: Clone = NotClone;\n    |              ^^^^^ required by this bound in `Tr::Ty`\n+help: consider annotating `NotClone` with `#[derive(Clone)]`\n+   |\n+LL | #[derive(Clone)]\n+   |\n \n error[E0277]: the trait bound `NotClone: Clone` is not satisfied\n   --> $DIR/defaults-suitability.rs:22:15\n@@ -24,6 +28,10 @@ LL |     Self::Ty: Clone,\n LL | {\n LL |     type Ty = NotClone;\n    |          -- required by a bound in this\n+help: consider annotating `NotClone` with `#[derive(Clone)]`\n+   |\n+LL | #[derive(Clone)]\n+   |\n \n error[E0277]: the trait bound `T: Clone` is not satisfied\n   --> $DIR/defaults-suitability.rs:28:23"}, {"sha": "0edc9a556b7f6090402256492f1069d6fe7aad27", "filename": "src/test/ui/associated-types/trait-with-supertraits-needing-sized-self.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fassociated-types%2Ftrait-with-supertraits-needing-sized-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fassociated-types%2Ftrait-with-supertraits-needing-sized-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Ftrait-with-supertraits-needing-sized-self.stderr?ref=d4c7839f73e4a84c75e8708adaafb9fafcb668f0", "patch": "@@ -8,7 +8,7 @@ note: required by a bound in `Add`\n   --> $SRC_DIR/core/src/ops/arith.rs:LL:COL\n    |\n LL | pub trait Add<Rhs = Self> {\n-   |               ^^^ required by this bound in `Add`\n+   |               ^^^^^^^^^^ required by this bound in `Add`\n help: consider further restricting `Self`\n    |\n LL | trait ArithmeticOps: Add<Output=Self> + Sub<Output=Self> + Mul<Output=Self> + Div<Output=Self> + Sized {}"}, {"sha": "0d12a948c68bdbc13a597f7a60a7c000e2ce6481", "filename": "src/test/ui/async-await/issues/issue-78654.full.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-78654.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-78654.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-78654.full.stderr?ref=d4c7839f73e4a84c75e8708adaafb9fafcb668f0", "patch": "@@ -5,10 +5,10 @@ LL | impl<const H: feature> Foo {\n    |               ^^^^^^^ not a type\n \n error[E0207]: the const parameter `H` is not constrained by the impl trait, self type, or predicates\n-  --> $DIR/issue-78654.rs:9:12\n+  --> $DIR/issue-78654.rs:9:6\n    |\n LL | impl<const H: feature> Foo {\n-   |            ^ unconstrained const parameter\n+   |      ^^^^^^^^^^^^^^^^ unconstrained const parameter\n    |\n    = note: expressions using a const parameter must map each value to a distinct output value\n    = note: proving the result of expressions other than the parameter are unique is not supported"}, {"sha": "0d12a948c68bdbc13a597f7a60a7c000e2ce6481", "filename": "src/test/ui/async-await/issues/issue-78654.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-78654.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-78654.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-78654.min.stderr?ref=d4c7839f73e4a84c75e8708adaafb9fafcb668f0", "patch": "@@ -5,10 +5,10 @@ LL | impl<const H: feature> Foo {\n    |               ^^^^^^^ not a type\n \n error[E0207]: the const parameter `H` is not constrained by the impl trait, self type, or predicates\n-  --> $DIR/issue-78654.rs:9:12\n+  --> $DIR/issue-78654.rs:9:6\n    |\n LL | impl<const H: feature> Foo {\n-   |            ^ unconstrained const parameter\n+   |      ^^^^^^^^^^^^^^^^ unconstrained const parameter\n    |\n    = note: expressions using a const parameter must map each value to a distinct output value\n    = note: proving the result of expressions other than the parameter are unique is not supported"}, {"sha": "4b2b05742538b35cea80d4c063fa720b68b38c85", "filename": "src/test/ui/const-generics/defaults/default-on-impl.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-on-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-on-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-on-impl.stderr?ref=d4c7839f73e4a84c75e8708adaafb9fafcb668f0", "patch": "@@ -1,8 +1,8 @@\n error: defaults for const parameters are only allowed in `struct`, `enum`, `type`, or `trait` definitions\n-  --> $DIR/default-on-impl.rs:3:12\n+  --> $DIR/default-on-impl.rs:3:6\n    |\n LL | impl<const N: usize = 1> Foo<N> {}\n-   |            ^\n+   |      ^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "c587a7e153fe38075257b122600db093f9414bb9", "filename": "src/test/ui/const-generics/generic_const_exprs/issue-76595.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-76595.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-76595.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-76595.stderr?ref=d4c7839f73e4a84c75e8708adaafb9fafcb668f0", "patch": "@@ -10,7 +10,7 @@ note: function defined here, with 2 generic parameters: `T`, `P`\n   --> $DIR/issue-76595.rs:10:4\n    |\n LL | fn test<T, const P: usize>() where Bool<{core::mem::size_of::<T>() > 4}>: True {\n-   |    ^^^^ -        -\n+   |    ^^^^ -  --------------\n help: add missing generic argument\n    |\n LL |     test::<2, P>();"}, {"sha": "a845454f762cf444a06e719ff8bfa4542634f9e1", "filename": "src/test/ui/const-generics/incorrect-number-of-const-args.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fconst-generics%2Fincorrect-number-of-const-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fconst-generics%2Fincorrect-number-of-const-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fincorrect-number-of-const-args.stderr?ref=d4c7839f73e4a84c75e8708adaafb9fafcb668f0", "patch": "@@ -10,7 +10,7 @@ note: function defined here, with 2 generic parameters: `X`, `Y`\n   --> $DIR/incorrect-number-of-const-args.rs:1:4\n    |\n LL | fn foo<const X: usize, const Y: usize>() -> usize {\n-   |    ^^^       -               -\n+   |    ^^^ --------------  --------------\n help: add missing generic argument\n    |\n LL |     foo::<0, Y>();\n@@ -28,7 +28,7 @@ note: function defined here, with 2 generic parameters: `X`, `Y`\n   --> $DIR/incorrect-number-of-const-args.rs:1:4\n    |\n LL | fn foo<const X: usize, const Y: usize>() -> usize {\n-   |    ^^^       -               -\n+   |    ^^^ --------------  --------------\n \n error: aborting due to 2 previous errors\n "}, {"sha": "ca9eb801dfce77962043f914d32843ace3a708f8", "filename": "src/test/ui/const-generics/issues/issue-68366.full.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68366.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68366.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68366.full.stderr?ref=d4c7839f73e4a84c75e8708adaafb9fafcb668f0", "patch": "@@ -1,17 +1,17 @@\n error[E0207]: the const parameter `N` is not constrained by the impl trait, self type, or predicates\n-  --> $DIR/issue-68366.rs:11:13\n+  --> $DIR/issue-68366.rs:11:7\n    |\n LL | impl <const N: usize> Collatz<{Some(N)}> {}\n-   |             ^ unconstrained const parameter\n+   |       ^^^^^^^^^^^^^^ unconstrained const parameter\n    |\n    = note: expressions using a const parameter must map each value to a distinct output value\n    = note: proving the result of expressions other than the parameter are unique is not supported\n \n error[E0207]: the const parameter `N` is not constrained by the impl trait, self type, or predicates\n-  --> $DIR/issue-68366.rs:17:12\n+  --> $DIR/issue-68366.rs:17:6\n    |\n LL | impl<const N: usize> Foo {}\n-   |            ^ unconstrained const parameter\n+   |      ^^^^^^^^^^^^^^ unconstrained const parameter\n    |\n    = note: expressions using a const parameter must map each value to a distinct output value\n    = note: proving the result of expressions other than the parameter are unique is not supported"}, {"sha": "3740ced90b1d772ab2bc7e808677708bc0ee2cc1", "filename": "src/test/ui/const-generics/issues/issue-68366.min.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68366.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68366.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68366.min.stderr?ref=d4c7839f73e4a84c75e8708adaafb9fafcb668f0", "patch": "@@ -8,19 +8,19 @@ LL | impl <const N: usize> Collatz<{Some(N)}> {}\n    = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error[E0207]: the const parameter `N` is not constrained by the impl trait, self type, or predicates\n-  --> $DIR/issue-68366.rs:11:13\n+  --> $DIR/issue-68366.rs:11:7\n    |\n LL | impl <const N: usize> Collatz<{Some(N)}> {}\n-   |             ^ unconstrained const parameter\n+   |       ^^^^^^^^^^^^^^ unconstrained const parameter\n    |\n    = note: expressions using a const parameter must map each value to a distinct output value\n    = note: proving the result of expressions other than the parameter are unique is not supported\n \n error[E0207]: the const parameter `N` is not constrained by the impl trait, self type, or predicates\n-  --> $DIR/issue-68366.rs:17:12\n+  --> $DIR/issue-68366.rs:17:6\n    |\n LL | impl<const N: usize> Foo {}\n-   |            ^ unconstrained const parameter\n+   |      ^^^^^^^^^^^^^^ unconstrained const parameter\n    |\n    = note: expressions using a const parameter must map each value to a distinct output value\n    = note: proving the result of expressions other than the parameter are unique is not supported"}, {"sha": "f7b8d80eeca7f03c73d7823f18d3e371b24b8a26", "filename": "src/test/ui/const-generics/issues/issue-86820.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-86820.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-86820.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-86820.stderr?ref=d4c7839f73e4a84c75e8708adaafb9fafcb668f0", "patch": "@@ -1,14 +1,14 @@\n error[E0053]: method `bit` has an incompatible const parameter type for trait\n-  --> $DIR/issue-86820.rs:17:18\n+  --> $DIR/issue-86820.rs:17:12\n    |\n LL |     fn bit<const I : usize>(self) -> bool {\n-   |                  ^\n+   |            ^^^^^^^^^^^^^^^\n    |\n note: the const parameter `I` has type `usize`, but the declaration in trait `Bits::bit` has type `u8`\n-  --> $DIR/issue-86820.rs:12:18\n+  --> $DIR/issue-86820.rs:12:12\n    |\n LL |     fn bit<const I : u8>(self) -> bool;\n-   |                  ^\n+   |            ^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "dedad2880c9e86ad3df490b9b833f7a95f1fd3d2", "filename": "src/test/ui/const-generics/min_const_generics/default_function_param.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fdefault_function_param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fdefault_function_param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fdefault_function_param.stderr?ref=d4c7839f73e4a84c75e8708adaafb9fafcb668f0", "patch": "@@ -1,8 +1,8 @@\n error: defaults for const parameters are only allowed in `struct`, `enum`, `type`, or `trait` definitions\n-  --> $DIR/default_function_param.rs:3:14\n+  --> $DIR/default_function_param.rs:3:8\n    |\n LL | fn foo<const SIZE: usize = 5usize>() {}\n-   |              ^^^^\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "acfdde8e1a01f16a45ee76e7f11e15ce22f96d84", "filename": "src/test/ui/const-generics/parser-error-recovery/issue-89013-no-kw.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013-no-kw.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013-no-kw.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013-no-kw.stderr?ref=d4c7839f73e4a84c75e8708adaafb9fafcb668f0", "patch": "@@ -17,7 +17,7 @@ note: trait defined here, with 1 generic parameter: `N`\n   --> $DIR/issue-89013-no-kw.rs:1:7\n    |\n LL | trait Foo<const N: usize> {\n-   |       ^^^       -\n+   |       ^^^ --------------\n help: add missing generic argument\n    |\n LL | impl Foo<N, N = 3> for Bar {"}, {"sha": "d2d58c496df2c898482e28c7c2ada6297ae2e519", "filename": "src/test/ui/const-generics/parser-error-recovery/issue-89013.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013.stderr?ref=d4c7839f73e4a84c75e8708adaafb9fafcb668f0", "patch": "@@ -29,7 +29,7 @@ note: trait defined here, with 1 generic parameter: `N`\n   --> $DIR/issue-89013.rs:1:7\n    |\n LL | trait Foo<const N: usize> {\n-   |       ^^^       -\n+   |       ^^^ --------------\n help: add missing generic argument\n    |\n LL | impl Foo<N, N = const 3> for Bar {"}, {"sha": "7326324b03ccacf6a433c6f99468a3365589318c", "filename": "src/test/ui/derives/derives-span-Clone-enum-struct-variant.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-enum-struct-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-enum-struct-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-enum-struct-variant.stderr?ref=d4c7839f73e4a84c75e8708adaafb9fafcb668f0", "patch": "@@ -8,6 +8,10 @@ LL |      x: Error\n    |      ^^^^^^^^ the trait `Clone` is not implemented for `Error`\n    |\n    = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `Error` with `#[derive(Clone)]`\n+   |\n+LL | #[derive(Clone)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "229a4f7d9ff9494c50ca3e2c2e29cb8310c6b880", "filename": "src/test/ui/derives/derives-span-Clone-enum.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-enum.stderr?ref=d4c7839f73e4a84c75e8708adaafb9fafcb668f0", "patch": "@@ -8,6 +8,10 @@ LL |      Error\n    |      ^^^^^ the trait `Clone` is not implemented for `Error`\n    |\n    = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `Error` with `#[derive(Clone)]`\n+   |\n+LL | #[derive(Clone)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "96bad9edad94c4a9e51c4e47125f900a73747a41", "filename": "src/test/ui/derives/derives-span-Clone-struct.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-struct.stderr?ref=d4c7839f73e4a84c75e8708adaafb9fafcb668f0", "patch": "@@ -8,6 +8,10 @@ LL |     x: Error\n    |     ^^^^^^^^ the trait `Clone` is not implemented for `Error`\n    |\n    = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `Error` with `#[derive(Clone)]`\n+   |\n+LL | #[derive(Clone)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "b61341e57e671cd0be5603bbc9d8526d94b3e272", "filename": "src/test/ui/derives/derives-span-Clone-tuple-struct.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-tuple-struct.stderr?ref=d4c7839f73e4a84c75e8708adaafb9fafcb668f0", "patch": "@@ -8,6 +8,10 @@ LL |     Error\n    |     ^^^^^ the trait `Clone` is not implemented for `Error`\n    |\n    = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `Error` with `#[derive(Clone)]`\n+   |\n+LL | #[derive(Clone)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "58a64a4f53bfc54b97e6f833e63737e2b30fe355", "filename": "src/test/ui/derives/derives-span-Debug-enum-struct-variant.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-enum-struct-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-enum-struct-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-enum-struct-variant.stderr?ref=d4c7839f73e4a84c75e8708adaafb9fafcb668f0", "patch": "@@ -10,6 +10,10 @@ LL |      x: Error\n    = help: the trait `Debug` is not implemented for `Error`\n    = note: add `#[derive(Debug)]` to `Error` or manually `impl Debug for Error`\n    = note: this error originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `Error` with `#[derive(Debug)]`\n+   |\n+LL | #[derive(Debug)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "e9bb5f960b04a90f77d042d9b50f18257a8500f1", "filename": "src/test/ui/derives/derives-span-Debug-enum.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-enum.stderr?ref=d4c7839f73e4a84c75e8708adaafb9fafcb668f0", "patch": "@@ -10,6 +10,10 @@ LL |      Error\n    = help: the trait `Debug` is not implemented for `Error`\n    = note: add `#[derive(Debug)]` to `Error` or manually `impl Debug for Error`\n    = note: this error originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `Error` with `#[derive(Debug)]`\n+   |\n+LL | #[derive(Debug)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "0a117c060ff383bef671c4840f4e39767e851b65", "filename": "src/test/ui/derives/derives-span-Debug-struct.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-struct.stderr?ref=d4c7839f73e4a84c75e8708adaafb9fafcb668f0", "patch": "@@ -10,6 +10,10 @@ LL |     x: Error\n    = help: the trait `Debug` is not implemented for `Error`\n    = note: add `#[derive(Debug)]` to `Error` or manually `impl Debug for Error`\n    = note: this error originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `Error` with `#[derive(Debug)]`\n+   |\n+LL | #[derive(Debug)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "f2e90a418455fbfca99b96bddcfac1d86f0b9967", "filename": "src/test/ui/derives/derives-span-Debug-tuple-struct.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-tuple-struct.stderr?ref=d4c7839f73e4a84c75e8708adaafb9fafcb668f0", "patch": "@@ -10,6 +10,10 @@ LL |     Error\n    = help: the trait `Debug` is not implemented for `Error`\n    = note: add `#[derive(Debug)]` to `Error` or manually `impl Debug for Error`\n    = note: this error originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `Error` with `#[derive(Debug)]`\n+   |\n+LL | #[derive(Debug)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "d4affd535eef4ea72313be6de5cbd25f0c32a93f", "filename": "src/test/ui/derives/derives-span-Default-struct.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fderives%2Fderives-span-Default-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fderives%2Fderives-span-Default-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Default-struct.stderr?ref=d4c7839f73e4a84c75e8708adaafb9fafcb668f0", "patch": "@@ -8,6 +8,10 @@ LL |     x: Error\n    |     ^^^^^^^^ the trait `Default` is not implemented for `Error`\n    |\n    = note: this error originates in the derive macro `Default` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `Error` with `#[derive(Default)]`\n+   |\n+LL | #[derive(Default)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "129351f599899ffab26414f77561697ca05aaaab", "filename": "src/test/ui/derives/derives-span-Default-tuple-struct.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fderives%2Fderives-span-Default-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fderives%2Fderives-span-Default-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Default-tuple-struct.stderr?ref=d4c7839f73e4a84c75e8708adaafb9fafcb668f0", "patch": "@@ -8,6 +8,10 @@ LL |     Error\n    |     ^^^^^ the trait `Default` is not implemented for `Error`\n    |\n    = note: this error originates in the derive macro `Default` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `Error` with `#[derive(Default)]`\n+   |\n+LL | #[derive(Default)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "e3fb234b96e4153b51ade0849d30f6a36c2a3a97", "filename": "src/test/ui/derives/derives-span-Eq-enum-struct-variant.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-enum-struct-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-enum-struct-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-enum-struct-variant.stderr?ref=d4c7839f73e4a84c75e8708adaafb9fafcb668f0", "patch": "@@ -13,6 +13,10 @@ note: required by a bound in `AssertParamIsEq`\n LL | pub struct AssertParamIsEq<T: Eq + ?Sized> {\n    |                               ^^ required by this bound in `AssertParamIsEq`\n    = note: this error originates in the derive macro `Eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `Error` with `#[derive(Eq)]`\n+   |\n+LL | #[derive(Eq)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "4e10c3f69e735a5df6d17b558f156aad35661078", "filename": "src/test/ui/derives/derives-span-Eq-enum.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-enum.stderr?ref=d4c7839f73e4a84c75e8708adaafb9fafcb668f0", "patch": "@@ -13,6 +13,10 @@ note: required by a bound in `AssertParamIsEq`\n LL | pub struct AssertParamIsEq<T: Eq + ?Sized> {\n    |                               ^^ required by this bound in `AssertParamIsEq`\n    = note: this error originates in the derive macro `Eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `Error` with `#[derive(Eq)]`\n+   |\n+LL | #[derive(Eq)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "bfdab052a2ed42167c6d6398d2dbbc5b8e11cba4", "filename": "src/test/ui/derives/derives-span-Eq-struct.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-struct.stderr?ref=d4c7839f73e4a84c75e8708adaafb9fafcb668f0", "patch": "@@ -13,6 +13,10 @@ note: required by a bound in `AssertParamIsEq`\n LL | pub struct AssertParamIsEq<T: Eq + ?Sized> {\n    |                               ^^ required by this bound in `AssertParamIsEq`\n    = note: this error originates in the derive macro `Eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `Error` with `#[derive(Eq)]`\n+   |\n+LL | #[derive(Eq)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "26b8be343336b95ac9f7947ccf639103d01ef928", "filename": "src/test/ui/derives/derives-span-Eq-tuple-struct.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-tuple-struct.stderr?ref=d4c7839f73e4a84c75e8708adaafb9fafcb668f0", "patch": "@@ -13,6 +13,10 @@ note: required by a bound in `AssertParamIsEq`\n LL | pub struct AssertParamIsEq<T: Eq + ?Sized> {\n    |                               ^^ required by this bound in `AssertParamIsEq`\n    = note: this error originates in the derive macro `Eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `Error` with `#[derive(Eq)]`\n+   |\n+LL | #[derive(Eq)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "fe5e0e96ac7af1290546d0ce0d52c326678d42b0", "filename": "src/test/ui/derives/derives-span-Hash-enum-struct-variant.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum-struct-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum-struct-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum-struct-variant.stderr?ref=d4c7839f73e4a84c75e8708adaafb9fafcb668f0", "patch": "@@ -8,6 +8,10 @@ LL |      x: Error\n    |      ^^^^^^^^ the trait `Hash` is not implemented for `Error`\n    |\n    = note: this error originates in the derive macro `Hash` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `Error` with `#[derive(Hash)]`\n+   |\n+LL | #[derive(Hash)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "99785b87ca83eef99d82a6b72095835e10f3a858", "filename": "src/test/ui/derives/derives-span-Hash-enum.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum.stderr?ref=d4c7839f73e4a84c75e8708adaafb9fafcb668f0", "patch": "@@ -8,6 +8,10 @@ LL |      Error\n    |      ^^^^^ the trait `Hash` is not implemented for `Error`\n    |\n    = note: this error originates in the derive macro `Hash` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `Error` with `#[derive(Hash)]`\n+   |\n+LL | #[derive(Hash)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "4db83dd130010c7996ee18a94ecd98e04d110622", "filename": "src/test/ui/derives/derives-span-Hash-struct.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-struct.stderr?ref=d4c7839f73e4a84c75e8708adaafb9fafcb668f0", "patch": "@@ -8,6 +8,10 @@ LL |     x: Error\n    |     ^^^^^^^^ the trait `Hash` is not implemented for `Error`\n    |\n    = note: this error originates in the derive macro `Hash` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `Error` with `#[derive(Hash)]`\n+   |\n+LL | #[derive(Hash)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "8660c97e69e1c47106fe3237bbbe338e4c83854a", "filename": "src/test/ui/derives/derives-span-Hash-tuple-struct.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-tuple-struct.stderr?ref=d4c7839f73e4a84c75e8708adaafb9fafcb668f0", "patch": "@@ -8,6 +8,10 @@ LL |     Error\n    |     ^^^^^ the trait `Hash` is not implemented for `Error`\n    |\n    = note: this error originates in the derive macro `Hash` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `Error` with `#[derive(Hash)]`\n+   |\n+LL | #[derive(Hash)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "6e48332c25067c5b5249fb4f85c904b21352661d", "filename": "src/test/ui/derives/derives-span-Ord-enum-struct-variant.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-enum-struct-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-enum-struct-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-enum-struct-variant.stderr?ref=d4c7839f73e4a84c75e8708adaafb9fafcb668f0", "patch": "@@ -8,6 +8,10 @@ LL |      x: Error\n    |      ^^^^^^^^ the trait `Ord` is not implemented for `Error`\n    |\n    = note: this error originates in the derive macro `Ord` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `Error` with `#[derive(Ord)]`\n+   |\n+LL | #[derive(Ord)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "b05cf0a057b233cb309e4e1c0ea4557b3f1a60d9", "filename": "src/test/ui/derives/derives-span-Ord-enum.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-enum.stderr?ref=d4c7839f73e4a84c75e8708adaafb9fafcb668f0", "patch": "@@ -8,6 +8,10 @@ LL |      Error\n    |      ^^^^^ the trait `Ord` is not implemented for `Error`\n    |\n    = note: this error originates in the derive macro `Ord` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `Error` with `#[derive(Ord)]`\n+   |\n+LL | #[derive(Ord)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "c4def34a83dad2166a990cda9db59f4123d84e60", "filename": "src/test/ui/derives/derives-span-Ord-struct.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-struct.stderr?ref=d4c7839f73e4a84c75e8708adaafb9fafcb668f0", "patch": "@@ -8,6 +8,10 @@ LL |     x: Error\n    |     ^^^^^^^^ the trait `Ord` is not implemented for `Error`\n    |\n    = note: this error originates in the derive macro `Ord` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `Error` with `#[derive(Ord)]`\n+   |\n+LL | #[derive(Ord)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "a3b288d0fb9cc2bc8af3d57a77cef5139efa5bd5", "filename": "src/test/ui/derives/derives-span-Ord-tuple-struct.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-tuple-struct.stderr?ref=d4c7839f73e4a84c75e8708adaafb9fafcb668f0", "patch": "@@ -8,6 +8,10 @@ LL |     Error\n    |     ^^^^^ the trait `Ord` is not implemented for `Error`\n    |\n    = note: this error originates in the derive macro `Ord` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `Error` with `#[derive(Ord)]`\n+   |\n+LL | #[derive(Ord)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "2d19aaf68afb1375889e113860babea228a42937", "filename": "src/test/ui/derives/derives-span-PartialOrd-enum-struct-variant.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-enum-struct-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-enum-struct-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-enum-struct-variant.stderr?ref=d4c7839f73e4a84c75e8708adaafb9fafcb668f0", "patch": "@@ -9,6 +9,10 @@ LL |      x: Error\n    |\n    = help: the trait `PartialOrd` is not implemented for `Error`\n    = note: this error originates in the derive macro `PartialOrd` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `Error` with `#[derive(PartialOrd)]`\n+   |\n+LL | #[derive(PartialOrd)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "dfbb8060ffa12d4568cf96b81fb91e3892caccf6", "filename": "src/test/ui/derives/derives-span-PartialOrd-enum.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-enum.stderr?ref=d4c7839f73e4a84c75e8708adaafb9fafcb668f0", "patch": "@@ -9,6 +9,10 @@ LL |      Error\n    |\n    = help: the trait `PartialOrd` is not implemented for `Error`\n    = note: this error originates in the derive macro `PartialOrd` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `Error` with `#[derive(PartialOrd)]`\n+   |\n+LL | #[derive(PartialOrd)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "ba63d86e8e46c53bbab26e11a9ff6237c4922db7", "filename": "src/test/ui/derives/derives-span-PartialOrd-struct.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-struct.stderr?ref=d4c7839f73e4a84c75e8708adaafb9fafcb668f0", "patch": "@@ -9,6 +9,10 @@ LL |     x: Error\n    |\n    = help: the trait `PartialOrd` is not implemented for `Error`\n    = note: this error originates in the derive macro `PartialOrd` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `Error` with `#[derive(PartialOrd)]`\n+   |\n+LL | #[derive(PartialOrd)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "7686ed8064e7986ee4e4226c5d5e1c3afd94f54f", "filename": "src/test/ui/derives/derives-span-PartialOrd-tuple-struct.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-tuple-struct.stderr?ref=d4c7839f73e4a84c75e8708adaafb9fafcb668f0", "patch": "@@ -9,6 +9,10 @@ LL |     Error\n    |\n    = help: the trait `PartialOrd` is not implemented for `Error`\n    = note: this error originates in the derive macro `PartialOrd` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `Error` with `#[derive(PartialOrd)]`\n+   |\n+LL | #[derive(PartialOrd)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "451058cd0ee01b7be0c341ebfab35e309a173766", "filename": "src/test/ui/derives/deriving-no-inner-impl-error-message.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fderives%2Fderiving-no-inner-impl-error-message.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fderives%2Fderiving-no-inner-impl-error-message.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderiving-no-inner-impl-error-message.stderr?ref=d4c7839f73e4a84c75e8708adaafb9fafcb668f0", "patch": "@@ -48,6 +48,10 @@ LL |     x: NoCloneOrEq\n    |     ^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `NoCloneOrEq`\n    |\n    = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `NoCloneOrEq` with `#[derive(Clone)]`\n+   |\n+LL | #[derive(Clone)]\n+   |\n \n error: aborting due to 3 previous errors\n "}, {"sha": "428be79617d7feebf7b1a147b16e203f8801c092", "filename": "src/test/ui/error-codes/E0277-3.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Ferror-codes%2FE0277-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Ferror-codes%2FE0277-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0277-3.rs?ref=d4c7839f73e4a84c75e8708adaafb9fafcb668f0", "patch": "@@ -0,0 +1,8 @@\n+fn foo<T: PartialEq>(_: T) {}\n+\n+struct S;\n+\n+fn main() {\n+    foo(S);\n+    //~^ ERROR can't compare `S` with `S`\n+}"}, {"sha": "0127e1ccc81ec0e64fd06b8766ab4682df3bb643", "filename": "src/test/ui/error-codes/E0277-3.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Ferror-codes%2FE0277-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Ferror-codes%2FE0277-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0277-3.stderr?ref=d4c7839f73e4a84c75e8708adaafb9fafcb668f0", "patch": "@@ -0,0 +1,22 @@\n+error[E0277]: can't compare `S` with `S`\n+  --> $DIR/E0277-3.rs:6:9\n+   |\n+LL |     foo(S);\n+   |     --- ^ no implementation for `S == S`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+   = help: the trait `PartialEq` is not implemented for `S`\n+note: required by a bound in `foo`\n+  --> $DIR/E0277-3.rs:1:11\n+   |\n+LL | fn foo<T: PartialEq>(_: T) {}\n+   |           ^^^^^^^^^ required by this bound in `foo`\n+help: consider annotating `S` with `#[derive(PartialEq)]`\n+   |\n+LL | #[derive(PartialEq)]\n+   |\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "a7d5c7ac39b09b718afc2f7d5ba0873b2993bee2", "filename": "src/test/ui/feature-gates/feature-gate-default_type_parameter_fallback.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-default_type_parameter_fallback.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-default_type_parameter_fallback.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-default_type_parameter_fallback.stderr?ref=d4c7839f73e4a84c75e8708adaafb9fafcb668f0", "patch": "@@ -2,7 +2,7 @@ error: defaults for type parameters are only allowed in `struct`, `enum`, `type`\n   --> $DIR/feature-gate-default_type_parameter_fallback.rs:3:8\n    |\n LL | fn avg<T=i32>(_: T) {}\n-   |        ^\n+   |        ^^^^^\n    |\n    = note: `#[deny(invalid_type_param_default)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n@@ -12,7 +12,7 @@ error: defaults for type parameters are only allowed in `struct`, `enum`, `type`\n   --> $DIR/feature-gate-default_type_parameter_fallback.rs:8:6\n    |\n LL | impl<T=i32> S<T> {}\n-   |      ^\n+   |      ^^^^^\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #36887 <https://github.com/rust-lang/rust/issues/36887>"}, {"sha": "c6fa02cb9a6b45d2e30aa2f55c12c4c3143a190c", "filename": "src/test/ui/generic-associated-types/issue-87429-associated-type-default.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87429-associated-type-default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87429-associated-type-default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87429-associated-type-default.stderr?ref=d4c7839f73e4a84c75e8708adaafb9fafcb668f0", "patch": "@@ -10,6 +10,10 @@ note: required by a bound in `Family2::Member`\n    |\n LL |     type Member<'a>: for<'b> PartialEq<Self::Member<'b>> = Foo;\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Family2::Member`\n+help: consider annotating `Foo` with `#[derive(PartialEq)]`\n+   |\n+LL | #[derive(PartialEq)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "015e0c7792fecbe936298cf21d28d2d4e2b47ae7", "filename": "src/test/ui/generic-associated-types/issue-87429-specialization.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87429-specialization.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87429-specialization.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87429-specialization.stderr?ref=d4c7839f73e4a84c75e8708adaafb9fafcb668f0", "patch": "@@ -20,6 +20,10 @@ note: required by a bound in `Family::Member`\n    |\n LL |     type Member<'a>: for<'b> PartialEq<Self::Member<'b>>;\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Family::Member`\n+help: consider annotating `Foo` with `#[derive(PartialEq)]`\n+   |\n+LL | #[derive(PartialEq)]\n+   |\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "fe9b670da799c451196921466dfe67884e8ce115", "filename": "src/test/ui/generics/generic-impl-more-params-with-defaults.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-impl-more-params-with-defaults.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-impl-more-params-with-defaults.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-impl-more-params-with-defaults.stderr?ref=d4c7839f73e4a84c75e8708adaafb9fafcb668f0", "patch": "@@ -10,7 +10,7 @@ note: struct defined here, with at most 2 generic parameters: `T`, `A`\n   --> $DIR/generic-impl-more-params-with-defaults.rs:5:8\n    |\n LL | struct Vec<T, A = Heap>(\n-   |        ^^^ -  -\n+   |        ^^^ -  --------\n \n error: aborting due to previous error\n "}, {"sha": "7f0198f0e842414932b260c27585e9c65375f20e", "filename": "src/test/ui/generics/generic-type-more-params-with-defaults.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-type-more-params-with-defaults.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-type-more-params-with-defaults.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-type-more-params-with-defaults.stderr?ref=d4c7839f73e4a84c75e8708adaafb9fafcb668f0", "patch": "@@ -10,7 +10,7 @@ note: struct defined here, with at most 2 generic parameters: `T`, `A`\n   --> $DIR/generic-type-more-params-with-defaults.rs:5:8\n    |\n LL | struct Vec<T, A = Heap>(\n-   |        ^^^ -  -\n+   |        ^^^ -  --------\n \n error: aborting due to previous error\n "}, {"sha": "6791182238c72d978041c2bb39edbdd1e69a6c5c", "filename": "src/test/ui/generics/issue-61631-default-type-param-can-reference-self-in-trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fgenerics%2Fissue-61631-default-type-param-can-reference-self-in-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fgenerics%2Fissue-61631-default-type-param-can-reference-self-in-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fissue-61631-default-type-param-can-reference-self-in-trait.stderr?ref=d4c7839f73e4a84c75e8708adaafb9fafcb668f0", "patch": "@@ -9,7 +9,7 @@ note: required by a bound in `Tsized`\n   --> $DIR/issue-61631-default-type-param-can-reference-self-in-trait.rs:17:14\n    |\n LL | trait Tsized<P: Sized = [Self]> {}\n-   |              ^ required by this bound in `Tsized`\n+   |              ^^^^^^^^^^^^^^^^^ required by this bound in `Tsized`\n \n error: aborting due to previous error\n "}, {"sha": "3b0834a5f51b271b10445bb67d466cc19b0ed5c6", "filename": "src/test/ui/generics/wrong-number-of-args.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fgenerics%2Fwrong-number-of-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fgenerics%2Fwrong-number-of-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fwrong-number-of-args.stderr?ref=d4c7839f73e4a84c75e8708adaafb9fafcb668f0", "patch": "@@ -287,7 +287,7 @@ note: struct defined here, with at most 3 generic parameters: `A`, `B`, `C`\n   --> $DIR/wrong-number-of-args.rs:78:12\n    |\n LL |     struct Ty<A, B, C = &'static str>;\n-   |            ^^ -  -  -\n+   |            ^^ -  -  ----------------\n \n error[E0107]: this struct takes at least 2 generic arguments but 0 generic arguments were supplied\n   --> $DIR/wrong-number-of-args.rs:96:14\n@@ -922,7 +922,7 @@ note: struct defined here, with at most 3 generic parameters: `K`, `V`, `S`\n   --> $SRC_DIR/std/src/collections/hash/map.rs:LL:COL\n    |\n LL | pub struct HashMap<K, V, S = RandomState> {\n-   |            ^^^^^^^ -  -  -\n+   |            ^^^^^^^ -  -  ---------------\n \n error[E0107]: this struct takes at least 2 generic arguments but 0 generic arguments were supplied\n   --> $DIR/wrong-number-of-args.rs:319:18"}, {"sha": "58a2f79efb4c643e5f0cecdfbbb25faf395064b1", "filename": "src/test/ui/impl-trait/where-allowed.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr?ref=d4c7839f73e4a84c75e8708adaafb9fafcb668f0", "patch": "@@ -293,7 +293,7 @@ error: defaults for type parameters are only allowed in `struct`, `enum`, `type`\n   --> $DIR/where-allowed.rs:234:7\n    |\n LL | impl <T = impl Debug> T {}\n-   |       ^\n+   |       ^^^^^^^^^^^^^^\n    |\n    = note: `#[deny(invalid_type_param_default)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n@@ -303,7 +303,7 @@ error: defaults for type parameters are only allowed in `struct`, `enum`, `type`\n   --> $DIR/where-allowed.rs:241:36\n    |\n LL | fn in_method_generic_param_default<T = impl Debug>(_: T) {}\n-   |                                    ^\n+   |                                    ^^^^^^^^^^^^^^\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #36887 <https://github.com/rust-lang/rust/issues/36887>"}, {"sha": "d70bf6e1d921c3618744544c4763648cd8057d27", "filename": "src/test/ui/issues/issue-20162.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fissues%2Fissue-20162.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fissues%2Fissue-20162.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20162.stderr?ref=d4c7839f73e4a84c75e8708adaafb9fafcb668f0", "patch": "@@ -9,6 +9,10 @@ note: required by a bound in `slice::<impl [T]>::sort`\n    |\n LL |         T: Ord,\n    |            ^^^ required by this bound in `slice::<impl [T]>::sort`\n+help: consider annotating `X` with `#[derive(Ord)]`\n+   |\n+LL | #[derive(Ord)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "266749376eb05427b9d43508a6adf14d89fe07c6", "filename": "src/test/ui/issues/issue-21160.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fissues%2Fissue-21160.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fissues%2Fissue-21160.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21160.stderr?ref=d4c7839f73e4a84c75e8708adaafb9fafcb668f0", "patch": "@@ -7,6 +7,10 @@ LL | struct Foo(Bar);\n    |            ^^^ the trait `Hash` is not implemented for `Bar`\n    |\n    = note: this error originates in the derive macro `Hash` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `Bar` with `#[derive(Hash)]`\n+   |\n+LL | #[derive(Hash)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "69ef876d2550222cac11e12ee43ae48facbfbe8d", "filename": "src/test/ui/issues/issue-34229.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fissues%2Fissue-34229.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fissues%2Fissue-34229.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34229.stderr?ref=d4c7839f73e4a84c75e8708adaafb9fafcb668f0", "patch": "@@ -8,6 +8,10 @@ LL | #[derive(PartialEq, PartialOrd)] struct Nope(Comparable);\n    |\n    = help: the trait `PartialOrd` is not implemented for `Comparable`\n    = note: this error originates in the derive macro `PartialOrd` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `Comparable` with `#[derive(PartialOrd)]`\n+   |\n+LL | #[derive(PartialEq)] #[derive(PartialOrd)]\n+   |                      +++++++++++++++++++++\n \n error: aborting due to previous error\n "}, {"sha": "fa2eaab5b417b21fd1021e3787a449b4cbb9db15", "filename": "src/test/ui/issues/issue-78957.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fissues%2Fissue-78957.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fissues%2Fissue-78957.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-78957.stderr?ref=d4c7839f73e4a84c75e8708adaafb9fafcb668f0", "patch": "@@ -2,13 +2,13 @@ error[E0518]: attribute should be applied to function or closure\n   --> $DIR/issue-78957.rs:5:16\n    |\n LL | pub struct Foo<#[inline] const N: usize>;\n-   |                ^^^^^^^^^       - not a function or closure\n+   |                ^^^^^^^^^ -------------- not a function or closure\n \n error: attribute should be applied to a function\n   --> $DIR/issue-78957.rs:7:16\n    |\n LL | pub struct Bar<#[cold] const N: usize>;\n-   |                ^^^^^^^       - not a function\n+   |                ^^^^^^^ -------------- not a function\n    |\n note: the lint level is defined here\n   --> $DIR/issue-78957.rs:1:9\n@@ -21,7 +21,7 @@ error[E0517]: attribute should be applied to a struct, enum, or union\n   --> $DIR/issue-78957.rs:10:23\n    |\n LL | pub struct Baz<#[repr(C)] const N: usize>;\n-   |                       ^         - not a struct, enum, or union\n+   |                       ^   -------------- not a struct, enum, or union\n \n error[E0518]: attribute should be applied to function or closure\n   --> $DIR/issue-78957.rs:13:17"}, {"sha": "1772d353fe4277a0f3f37ee4943b891261dea312", "filename": "src/test/ui/kindck/kindck-impl-type-params.nll.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.nll.stderr?ref=d4c7839f73e4a84c75e8708adaafb9fafcb668f0", "patch": "@@ -93,6 +93,10 @@ note: required because of the requirements on the impl of `Gettable<Foo>` for `S\n LL | impl<T: Send + Copy + 'static> Gettable<T> for S<T> {}\n    |                                ^^^^^^^^^^^     ^^^^\n    = note: required for the cast to the object type `dyn Gettable<Foo>`\n+help: consider annotating `Foo` with `#[derive(Copy)]`\n+   |\n+LL |     #[derive(Copy)]\n+   |\n \n error: aborting due to 6 previous errors\n "}, {"sha": "f227ac2477e6c33f68ca72268c195729aaf64fe8", "filename": "src/test/ui/kindck/kindck-impl-type-params.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.stderr?ref=d4c7839f73e4a84c75e8708adaafb9fafcb668f0", "patch": "@@ -101,6 +101,10 @@ note: required because of the requirements on the impl of `Gettable<Foo>` for `S\n LL | impl<T: Send + Copy + 'static> Gettable<T> for S<T> {}\n    |                                ^^^^^^^^^^^     ^^^^\n    = note: required for the cast to the object type `dyn Gettable<Foo>`\n+help: consider annotating `Foo` with `#[derive(Copy)]`\n+   |\n+LL |     #[derive(Copy)]\n+   |\n \n error: aborting due to 7 previous errors\n "}, {"sha": "803883460f08f4074adf2752a500673820a37b2c", "filename": "src/test/ui/malformed/malformed-derive-entry.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-derive-entry.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-derive-entry.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-derive-entry.stderr?ref=d4c7839f73e4a84c75e8708adaafb9fafcb668f0", "patch": "@@ -28,6 +28,10 @@ note: required by a bound in `Copy`\n LL | pub trait Copy: Clone {\n    |                 ^^^^^ required by this bound in `Copy`\n    = note: this error originates in the derive macro `Copy` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `Test1` with `#[derive(Clone)]`\n+   |\n+LL | #[derive(Clone)]\n+   |\n \n error[E0277]: the trait bound `Test2: Clone` is not satisfied\n   --> $DIR/malformed-derive-entry.rs:6:10\n@@ -41,6 +45,10 @@ note: required by a bound in `Copy`\n LL | pub trait Copy: Clone {\n    |                 ^^^^^ required by this bound in `Copy`\n    = note: this error originates in the derive macro `Copy` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `Test2` with `#[derive(Clone)]`\n+   |\n+LL | #[derive(Clone)]\n+   |\n \n error: aborting due to 5 previous errors\n "}, {"sha": "ed2766c000ec44ead22a07ae502c8e7c302c6f3a", "filename": "src/test/ui/mir/thir-constparam-temp.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fmir%2Fthir-constparam-temp.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fmir%2Fthir-constparam-temp.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fthir-constparam-temp.stderr?ref=d4c7839f73e4a84c75e8708adaafb9fafcb668f0", "patch": "@@ -13,10 +13,10 @@ note: mutable reference created due to call to this method\n LL |     fn mut_self(&mut self) {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n note: `const` item defined here\n-  --> $DIR/thir-constparam-temp.rs:13:14\n+  --> $DIR/thir-constparam-temp.rs:13:8\n    |\n LL | fn foo<const YIKES: Yikes>() {\n-   |              ^^^^^\n+   |        ^^^^^^^^^^^^^^^^^^\n \n warning: 1 warning emitted\n "}, {"sha": "c2515c40b1d778373235367e02fdfaefb501fb0b", "filename": "src/test/ui/mismatched_types/method-help-unsatisfied-bound.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fmismatched_types%2Fmethod-help-unsatisfied-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fmismatched_types%2Fmethod-help-unsatisfied-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fmethod-help-unsatisfied-bound.stderr?ref=d4c7839f73e4a84c75e8708adaafb9fafcb668f0", "patch": "@@ -11,6 +11,10 @@ note: required by a bound in `Result::<T, E>::unwrap`\n    |\n LL |         E: fmt::Debug,\n    |            ^^^^^^^^^^ required by this bound in `Result::<T, E>::unwrap`\n+help: consider annotating `Foo` with `#[derive(Debug)]`\n+   |\n+LL | #[derive(Debug)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "cbceec58eb1eb816e7f2ec3d0189cd4e68d76815", "filename": "src/test/ui/missing/missing-items/missing-type-parameter2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fmissing%2Fmissing-items%2Fmissing-type-parameter2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fmissing%2Fmissing-items%2Fmissing-type-parameter2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing%2Fmissing-items%2Fmissing-type-parameter2.stderr?ref=d4c7839f73e4a84c75e8708adaafb9fafcb668f0", "patch": "@@ -99,10 +99,10 @@ LL | impl X<{ N }> {}\n    |        +   +\n \n error: defaults for const parameters are only allowed in `struct`, `enum`, `type`, or `trait` definitions\n-  --> $DIR/missing-type-parameter2.rs:6:15\n+  --> $DIR/missing-type-parameter2.rs:6:9\n    |\n LL | impl<T, const A: u8 = 2> X<N> {}\n-   |               ^\n+   |         ^^^^^^^^^^^^^^^\n \n error[E0747]: unresolved item provided when a constant was expected\n   --> $DIR/missing-type-parameter2.rs:6:28"}, {"sha": "92909797c9679e38685da12858c0ff02e606abae", "filename": "src/test/ui/not-clone-closure.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fnot-clone-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fnot-clone-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnot-clone-closure.stderr?ref=d4c7839f73e4a84c75e8708adaafb9fafcb668f0", "patch": "@@ -11,6 +11,10 @@ LL |       let hello = hello.clone();\n    |                         ^^^^^ within `[closure@$DIR/not-clone-closure.rs:7:17: 9:6]`, the trait `Clone` is not implemented for `S`\n    |\n    = note: required because it appears within the type `[closure@$DIR/not-clone-closure.rs:7:17: 9:6]`\n+help: consider annotating `S` with `#[derive(Clone)]`\n+   |\n+LL | #[derive(Clone)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "417e01e491b471a5cdce49b2a51bae0f5c121f1f", "filename": "src/test/ui/on-unimplemented/no-debug.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fon-unimplemented%2Fno-debug.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fon-unimplemented%2Fno-debug.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fno-debug.stderr?ref=d4c7839f73e4a84c75e8708adaafb9fafcb668f0", "patch": "@@ -7,6 +7,10 @@ LL |     println!(\"{:?} {:?}\", Foo, Bar);\n    = help: the trait `Debug` is not implemented for `Foo`\n    = note: add `#[derive(Debug)]` to `Foo` or manually `impl Debug for Foo`\n    = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `Foo` with `#[derive(Debug)]`\n+   |\n+LL | #[derive(Debug)]\n+   |\n \n error[E0277]: `Bar` doesn't implement `Debug`\n   --> $DIR/no-debug.rs:10:32"}, {"sha": "f174215f257eb4aef305e771de54f45435d378b7", "filename": "src/test/ui/polymorphization/const_parameters/closures.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fpolymorphization%2Fconst_parameters%2Fclosures.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fpolymorphization%2Fconst_parameters%2Fclosures.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpolymorphization%2Fconst_parameters%2Fclosures.stderr?ref=d4c7839f73e4a84c75e8708adaafb9fafcb668f0", "patch": "@@ -11,7 +11,7 @@ error: item has unused generic parameters\n   --> $DIR/closures.rs:19:19\n    |\n LL | pub fn unused<const T: usize>() -> usize {\n-   |                     - generic parameter `T` is unused\n+   |               -------------- generic parameter `T` is unused\n LL |\n LL |     let add_one = |x: usize| x + 1;\n    |                   ^^^^^^^^^^^^^^^^\n@@ -20,13 +20,13 @@ error: item has unused generic parameters\n   --> $DIR/closures.rs:17:8\n    |\n LL | pub fn unused<const T: usize>() -> usize {\n-   |        ^^^^^^       - generic parameter `T` is unused\n+   |        ^^^^^^ -------------- generic parameter `T` is unused\n \n error: item has unused generic parameters\n   --> $DIR/closures.rs:28:19\n    |\n LL | pub fn used_parent<const T: usize>() -> usize {\n-   |                          - generic parameter `T` is unused\n+   |                    -------------- generic parameter `T` is unused\n LL |     let x: usize = T;\n LL |     let add_one = |x: usize| x + 1;\n    |                   ^^^^^^^^^^^^^^^^\n@@ -35,7 +35,7 @@ error: item has unused generic parameters\n   --> $DIR/closures.rs:48:13\n    |\n LL | pub fn unused_upvar<const T: usize>() -> usize {\n-   |                           - generic parameter `T` is unused\n+   |                     -------------- generic parameter `T` is unused\n LL |     let x: usize = T;\n LL |     let y = || x;\n    |             ^^^^"}, {"sha": "f2b5a73073892b5730edf5fdc54cc025837584ca", "filename": "src/test/ui/polymorphization/const_parameters/functions.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fpolymorphization%2Fconst_parameters%2Ffunctions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fpolymorphization%2Fconst_parameters%2Ffunctions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpolymorphization%2Fconst_parameters%2Ffunctions.stderr?ref=d4c7839f73e4a84c75e8708adaafb9fafcb668f0", "patch": "@@ -11,7 +11,7 @@ error: item has unused generic parameters\n   --> $DIR/functions.rs:15:8\n    |\n LL | pub fn unused<const T: usize>() {\n-   |        ^^^^^^       - generic parameter `T` is unused\n+   |        ^^^^^^ -------------- generic parameter `T` is unused\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "9cabb21e784adff9c0da3d333b29e72569567717", "filename": "src/test/ui/polymorphization/generators.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fpolymorphization%2Fgenerators.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fpolymorphization%2Fgenerators.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpolymorphization%2Fgenerators.stderr?ref=d4c7839f73e4a84c75e8708adaafb9fafcb668f0", "patch": "@@ -23,7 +23,7 @@ error: item has unused generic parameters\n   --> $DIR/generators.rs:60:5\n    |\n LL |   pub fn unused_const<const T: u32>() -> impl Generator<(), Yield = u32, Return = u32> + Unpin {\n-   |                             - generic parameter `T` is unused\n+   |                       ------------ generic parameter `T` is unused\n LL | /     || {\n LL | |\n LL | |         yield 1;"}, {"sha": "904413712cde12d9e78e8257fdc0f9f59d9dc5c2", "filename": "src/test/ui/repeat-to-run-dtor-twice.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Frepeat-to-run-dtor-twice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Frepeat-to-run-dtor-twice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepeat-to-run-dtor-twice.stderr?ref=d4c7839f73e4a84c75e8708adaafb9fafcb668f0", "patch": "@@ -5,6 +5,10 @@ LL |     let _ = [ a; 5 ];\n    |             ^^^^^^^^ the trait `Copy` is not implemented for `Foo`\n    |\n    = note: the `Copy` trait is required because the repeated element will be copied\n+help: consider annotating `Foo` with `#[derive(Copy)]`\n+   |\n+LL | #[derive(Copy)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "ea1f66d78a3786f87239963120858c3b0d23b613", "filename": "src/test/ui/rfc-2361-dbg-macro/dbg-macro-requires-debug.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-requires-debug.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-requires-debug.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-requires-debug.stderr?ref=d4c7839f73e4a84c75e8708adaafb9fafcb668f0", "patch": "@@ -7,6 +7,10 @@ LL |     let _: NotDebug = dbg!(NotDebug);\n    = help: the trait `Debug` is not implemented for `NotDebug`\n    = note: add `#[derive(Debug)]` to `NotDebug` or manually `impl Debug for NotDebug`\n    = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `NotDebug` with `#[derive(Debug)]`\n+   |\n+LL | #[derive(Debug)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "0a2a5f0f24578f27ae6faad85ff9b338aef9ce0d", "filename": "src/test/ui/rfc-2632-const-trait-impl/call-generic-method-nonconst.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-nonconst.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-nonconst.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-nonconst.stderr?ref=d4c7839f73e4a84c75e8708adaafb9fafcb668f0", "patch": "@@ -17,6 +17,10 @@ note: required by a bound in `equals_self`\n    |\n LL | const fn equals_self<T: ~const PartialEq>(t: &T) -> bool {\n    |                         ^^^^^^^^^^^^^^^^ required by this bound in `equals_self`\n+help: consider annotating `S` with `#[derive(PartialEq)]`\n+   |\n+LL | #[derive(PartialEq)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "5ef04936ea244b19b874c2005cdff16e87b0b77a", "filename": "src/test/ui/save-analysis/issue-89066.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fsave-analysis%2Fissue-89066.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fsave-analysis%2Fissue-89066.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsave-analysis%2Fissue-89066.stderr?ref=d4c7839f73e4a84c75e8708adaafb9fafcb668f0", "patch": "@@ -31,7 +31,7 @@ note: struct defined here, with 2 generic parameters: `T`, `N`\n   --> $DIR/issue-89066.rs:8:8\n    |\n LL | struct All<'a, T, const N: usize> {\n-   |        ^^^     -        -\n+   |        ^^^     -  --------------\n \n error: aborting due to 4 previous errors\n "}, {"sha": "2114594066861a517afb47854028e03b2fd4e2a2", "filename": "src/test/ui/specialization/issue-59435.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fspecialization%2Fissue-59435.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fspecialization%2Fissue-59435.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-59435.stderr?ref=d4c7839f73e4a84c75e8708adaafb9fafcb668f0", "patch": "@@ -9,6 +9,10 @@ note: required by a bound in `MyTrait::MyType`\n    |\n LL |     type MyType: Default;\n    |                  ^^^^^^^ required by this bound in `MyTrait::MyType`\n+help: consider annotating `MyStruct` with `#[derive(Default)]`\n+   |\n+LL | #[derive(Default)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "266291f62b45dcab76e7e766f6253d58d3e42a3a", "filename": "src/test/ui/structs/struct-path-alias-bounds.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-alias-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-alias-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-alias-bounds.stderr?ref=d4c7839f73e4a84c75e8708adaafb9fafcb668f0", "patch": "@@ -9,6 +9,10 @@ note: required by a bound in `S`\n    |\n LL | struct S<T: Clone> { a: T }\n    |             ^^^^^ required by this bound in `S`\n+help: consider annotating `NoClone` with `#[derive(Clone)]`\n+   |\n+LL | #[derive(Clone)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "75658f58c8a1b5c454613430723c2d2b74742a28", "filename": "src/test/ui/suggestions/derive-macro-missing-bounds.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fsuggestions%2Fderive-macro-missing-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fsuggestions%2Fderive-macro-missing-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fderive-macro-missing-bounds.stderr?ref=d4c7839f73e4a84c75e8708adaafb9fafcb668f0", "patch": "@@ -9,6 +9,10 @@ LL |     struct Outer<T>(Inner<T>);\n    = help: the trait `Debug` is not implemented for `a::Inner<T>`\n    = note: add `#[derive(Debug)]` to `a::Inner<T>` or manually `impl Debug for a::Inner<T>`\n    = note: this error originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `a::Inner<T>` with `#[derive(Debug)]`\n+   |\n+LL |     #[derive(Debug)]\n+   |\n help: consider introducing a `where` bound, but there might be an alternative better way to express this requirement\n    |\n LL |     struct Outer<T>(Inner<T>) where a::Inner<T>: Debug;"}, {"sha": "5d8d688a073ca9951b2da1ddb49c41c7228f93ac", "filename": "src/test/ui/suggestions/issue-84973-blacklist.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973-blacklist.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973-blacklist.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973-blacklist.stderr?ref=d4c7839f73e4a84c75e8708adaafb9fafcb668f0", "patch": "@@ -25,6 +25,10 @@ note: required by a bound in `f_clone`\n    |\n LL | fn f_clone<T: Clone>(t: T) {}\n    |               ^^^^^ required by this bound in `f_clone`\n+help: consider annotating `S` with `#[derive(Clone)]`\n+   |\n+LL | #[derive(Clone)]\n+   |\n \n error[E0277]: `[static generator@$DIR/issue-84973-blacklist.rs:17:13: 17:33]` cannot be unpinned\n   --> $DIR/issue-84973-blacklist.rs:17:5"}, {"sha": "3c06f4f88c1f91f9558685506a057100e3ddbe4e", "filename": "src/test/ui/suggestions/lifetimes/missing-lifetimes-in-signature-before-const.fixed", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-before-const.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-before-const.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-before-const.fixed?ref=d4c7839f73e4a84c75e8708adaafb9fafcb668f0", "patch": "@@ -0,0 +1,10 @@\n+// run-rustfix\n+// https://github.com/rust-lang/rust/issues/95616\n+\n+fn buggy_const<'a, const N: usize>(_a: &'a Option<[u8; N]>, _f: &'a str) -> &'a str { //~ERROR [E0106]\n+    return \"\";\n+}\n+\n+fn main() {\n+    buggy_const(&Some([69,69,69,69,0]), \"test\");\n+}"}, {"sha": "110468cbbc52e80e0233f55891c331bbe05aece6", "filename": "src/test/ui/suggestions/lifetimes/missing-lifetimes-in-signature-before-const.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-before-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-before-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-before-const.rs?ref=d4c7839f73e4a84c75e8708adaafb9fafcb668f0", "patch": "@@ -0,0 +1,10 @@\n+// run-rustfix\n+// https://github.com/rust-lang/rust/issues/95616\n+\n+fn buggy_const<const N: usize>(_a: &Option<[u8; N]>, _f: &str) -> &str { //~ERROR [E0106]\n+    return \"\";\n+}\n+\n+fn main() {\n+    buggy_const(&Some([69,69,69,69,0]), \"test\");\n+}"}, {"sha": "7b126c90ee797ac7ade0e9fd17d15b26435035c5", "filename": "src/test/ui/suggestions/lifetimes/missing-lifetimes-in-signature-before-const.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-before-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-before-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-before-const.stderr?ref=d4c7839f73e4a84c75e8708adaafb9fafcb668f0", "patch": "@@ -0,0 +1,15 @@\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/missing-lifetimes-in-signature-before-const.rs:4:67\n+   |\n+LL | fn buggy_const<const N: usize>(_a: &Option<[u8; N]>, _f: &str) -> &str {\n+   |                                    ----------------      ----     ^ expected named lifetime parameter\n+   |\n+   = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from `_a` or `_f`\n+help: consider introducing a named lifetime parameter\n+   |\n+LL | fn buggy_const<'a, const N: usize>(_a: &'a Option<[u8; N]>, _f: &'a str) -> &'a str {\n+   |                +++                      ++                       ++          ++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0106`."}, {"sha": "d7697dcc6405b410941fe57e09da8eb59dd07f50", "filename": "src/test/ui/traits/inductive-overflow/supertrait-auto-trait.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Fsupertrait-auto-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Fsupertrait-auto-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Fsupertrait-auto-trait.stderr?ref=d4c7839f73e4a84c75e8708adaafb9fafcb668f0", "patch": "@@ -24,6 +24,10 @@ note: required by a bound in `copy`\n    |\n LL | fn copy<T: Magic>(x: T) -> (T, T) { (x, x) }\n    |            ^^^^^ required by this bound in `copy`\n+help: consider annotating `NoClone` with `#[derive(Copy)]`\n+   |\n+LL | #[derive(Copy)]\n+   |\n \n error: aborting due to 2 previous errors\n "}, {"sha": "62a2a64ed142c859e8ff4df050c8d08f1dd7982b", "filename": "src/test/ui/traits/issue-71136.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Ftraits%2Fissue-71136.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Ftraits%2Fissue-71136.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-71136.stderr?ref=d4c7839f73e4a84c75e8708adaafb9fafcb668f0", "patch": "@@ -9,6 +9,10 @@ LL |     the_foos: Vec<Foo>,\n    |\n    = note: required because of the requirements on the impl of `Clone` for `Vec<Foo>`\n    = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `Foo` with `#[derive(Clone)]`\n+   |\n+LL | #[derive(Clone)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "b2edcc5526a4abf329785fae9802006c1e3c3a76", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use.stderr?ref=d4c7839f73e4a84c75e8708adaafb9fafcb668f0", "patch": "@@ -29,10 +29,10 @@ LL |     t\n    |     ^\n    |\n note: constant used multiple times\n-  --> $DIR/generic_duplicate_param_use.rs:12:22\n+  --> $DIR/generic_duplicate_param_use.rs:12:16\n    |\n LL | type TwoConsts<const X: usize, const Y: usize> = impl Debug;\n-   |                      ^               ^\n+   |                ^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "6c82d31e18d8bf6c02014202a894fb5793433e95", "filename": "src/test/ui/type-alias-impl-trait/generic_nondefining_use.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_nondefining_use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_nondefining_use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_nondefining_use.stderr?ref=d4c7839f73e4a84c75e8708adaafb9fafcb668f0", "patch": "@@ -26,10 +26,10 @@ LL |     7u32\n    |     ^^^^\n    |\n note: used non-generic constant `123_usize` for generic parameter\n-  --> $DIR/generic_nondefining_use.rs:11:21\n+  --> $DIR/generic_nondefining_use.rs:11:15\n    |\n LL | type OneConst<const X: usize> = impl Debug;\n-   |                     ^\n+   |               ^^^^^^^^^^^^^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "56a9b5317f76e49f2e78c280b5fceb723226a0a0", "filename": "src/test/ui/type/type-check-defaults.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Ftype%2Ftype-check-defaults.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Ftype%2Ftype-check-defaults.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check-defaults.stderr?ref=d4c7839f73e4a84c75e8708adaafb9fafcb668f0", "patch": "@@ -2,7 +2,7 @@ error[E0277]: a value of type `i32` cannot be built from an iterator over elemen\n   --> $DIR/type-check-defaults.rs:6:19\n    |\n LL | struct WellFormed<Z = Foo<i32, i32>>(Z);\n-   |                   ^ value of type `i32` cannot be built from `std::iter::Iterator<Item=i32>`\n+   |                   ^^^^^^^^^^^^^^^^^ value of type `i32` cannot be built from `std::iter::Iterator<Item=i32>`\n    |\n    = help: the trait `FromIterator<i32>` is not implemented for `i32`\n note: required by a bound in `Foo`\n@@ -15,7 +15,7 @@ error[E0277]: a value of type `i32` cannot be built from an iterator over elemen\n   --> $DIR/type-check-defaults.rs:8:27\n    |\n LL | struct WellFormedNoBounds<Z:?Sized = Foo<i32, i32>>(Z);\n-   |                           ^ value of type `i32` cannot be built from `std::iter::Iterator<Item=i32>`\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^ value of type `i32` cannot be built from `std::iter::Iterator<Item=i32>`\n    |\n    = help: the trait `FromIterator<i32>` is not implemented for `i32`\n note: required by a bound in `Foo`"}, {"sha": "c242a7de7abfb6959212bfa7cc74050e34abcfcf", "filename": "src/test/ui/union/union-derive-clone.mirunsafeck.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.mirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.mirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.mirunsafeck.stderr?ref=d4c7839f73e4a84c75e8708adaafb9fafcb668f0", "patch": "@@ -38,6 +38,10 @@ note: required by a bound in `AssertParamIsCopy`\n LL | pub struct AssertParamIsCopy<T: Copy + ?Sized> {\n    |                                 ^^^^ required by this bound in `AssertParamIsCopy`\n    = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `U1` with `#[derive(Copy)]`\n+   |\n+LL | #[derive(Copy)]\n+   |\n \n error: aborting due to 2 previous errors\n "}, {"sha": "c242a7de7abfb6959212bfa7cc74050e34abcfcf", "filename": "src/test/ui/union/union-derive-clone.thirunsafeck.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.thirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.thirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.thirunsafeck.stderr?ref=d4c7839f73e4a84c75e8708adaafb9fafcb668f0", "patch": "@@ -38,6 +38,10 @@ note: required by a bound in `AssertParamIsCopy`\n LL | pub struct AssertParamIsCopy<T: Copy + ?Sized> {\n    |                                 ^^^^ required by this bound in `AssertParamIsCopy`\n    = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `U1` with `#[derive(Copy)]`\n+   |\n+LL | #[derive(Copy)]\n+   |\n \n error: aborting due to 2 previous errors\n "}, {"sha": "99505f31639686770f8ecfb51ebb5daea54bd266", "filename": "src/test/ui/union/union-derive-eq.mirunsafeck.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Funion%2Funion-derive-eq.mirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Funion%2Funion-derive-eq.mirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-derive-eq.mirunsafeck.stderr?ref=d4c7839f73e4a84c75e8708adaafb9fafcb668f0", "patch": "@@ -13,6 +13,10 @@ note: required by a bound in `AssertParamIsEq`\n LL | pub struct AssertParamIsEq<T: Eq + ?Sized> {\n    |                               ^^ required by this bound in `AssertParamIsEq`\n    = note: this error originates in the derive macro `Eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `PartialEqNotEq` with `#[derive(Eq)]`\n+   |\n+LL | #[derive(Eq)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "99505f31639686770f8ecfb51ebb5daea54bd266", "filename": "src/test/ui/union/union-derive-eq.thirunsafeck.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Funion%2Funion-derive-eq.thirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Funion%2Funion-derive-eq.thirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-derive-eq.thirunsafeck.stderr?ref=d4c7839f73e4a84c75e8708adaafb9fafcb668f0", "patch": "@@ -13,6 +13,10 @@ note: required by a bound in `AssertParamIsEq`\n LL | pub struct AssertParamIsEq<T: Eq + ?Sized> {\n    |                               ^^ required by this bound in `AssertParamIsEq`\n    = note: this error originates in the derive macro `Eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `PartialEqNotEq` with `#[derive(Eq)]`\n+   |\n+LL | #[derive(Eq)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "e47920d3dfcf8d5496568fa1cf3d3fccdf110693", "filename": "src/test/ui/wf/wf-const-type.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fwf%2Fwf-const-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fwf%2Fwf-const-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-const-type.stderr?ref=d4c7839f73e4a84c75e8708adaafb9fafcb668f0", "patch": "@@ -10,6 +10,10 @@ note: required by a bound in `IsCopy`\n    |\n LL | struct IsCopy<T:Copy> { t: T }\n    |                 ^^^^ required by this bound in `IsCopy`\n+help: consider annotating `NotCopy` with `#[derive(Copy)]`\n+   |\n+LL | #[derive(Copy)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "4ae69cf2e1ff8bf456e7f100883a33499624574a", "filename": "src/test/ui/wf/wf-static-type.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fwf%2Fwf-static-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fwf%2Fwf-static-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-static-type.stderr?ref=d4c7839f73e4a84c75e8708adaafb9fafcb668f0", "patch": "@@ -10,6 +10,10 @@ note: required by a bound in `IsCopy`\n    |\n LL | struct IsCopy<T:Copy> { t: T }\n    |                 ^^^^ required by this bound in `IsCopy`\n+help: consider annotating `NotCopy` with `#[derive(Copy)]`\n+   |\n+LL | #[derive(Copy)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "c13552bc26eee730aba31adce9137ebcfc8bc9b6", "filename": "src/test/ui/where-clauses/where-clauses-method-unsatisfied.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clauses-method-unsatisfied.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clauses-method-unsatisfied.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clauses-method-unsatisfied.stderr?ref=d4c7839f73e4a84c75e8708adaafb9fafcb668f0", "patch": "@@ -11,6 +11,10 @@ note: required by a bound in `Foo::<T>::equals`\n    |\n LL |     fn equals(&self, u: &Foo<T>) -> bool where T : Eq {\n    |                                                    ^^ required by this bound in `Foo::<T>::equals`\n+help: consider annotating `Bar` with `#[derive(Eq)]`\n+   |\n+LL | #[derive(Eq)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "b1805a4522f4d1ff27e634699729d261d685017f", "filename": "src/test/ui/where-clauses/where-clauses-unsatisfied.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clauses-unsatisfied.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4c7839f73e4a84c75e8708adaafb9fafcb668f0/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clauses-unsatisfied.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clauses-unsatisfied.stderr?ref=d4c7839f73e4a84c75e8708adaafb9fafcb668f0", "patch": "@@ -9,6 +9,10 @@ note: required by a bound in `equal`\n    |\n LL | fn equal<T>(a: &T, b: &T) -> bool where T : Eq { a == b }\n    |                                             ^^ required by this bound in `equal`\n+help: consider annotating `Struct` with `#[derive(Eq)]`\n+   |\n+LL | #[derive(Eq)]\n+   |\n \n error: aborting due to previous error\n "}]}