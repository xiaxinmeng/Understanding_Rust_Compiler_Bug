{"sha": "742ef5864a437a86600dc2d93461d781240ede7c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0MmVmNTg2NGE0MzdhODY2MDBkYzJkOTM0NjFkNzgxMjQwZWRlN2M=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2018-07-30T13:07:51Z"}, "committer": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2018-08-17T04:27:08Z"}, "message": "Implement Iterator::size_hint for Elaborator.", "tree": {"sha": "4fd08cae2e1a04275bed379db4b5566163847e89", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4fd08cae2e1a04275bed379db4b5566163847e89"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/742ef5864a437a86600dc2d93461d781240ede7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/742ef5864a437a86600dc2d93461d781240ede7c", "html_url": "https://github.com/rust-lang/rust/commit/742ef5864a437a86600dc2d93461d781240ede7c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/742ef5864a437a86600dc2d93461d781240ede7c/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50503497492e9bab8bc8c5ad3fe403a3a80276d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/50503497492e9bab8bc8c5ad3fe403a3a80276d3", "html_url": "https://github.com/rust-lang/rust/commit/50503497492e9bab8bc8c5ad3fe403a3a80276d3"}], "stats": {"total": 4, "additions": 4, "deletions": 0}, "files": [{"sha": "40f13ac06f56fbed1439d69e2df4f9793004bafc", "filename": "src/librustc/traits/util.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/742ef5864a437a86600dc2d93461d781240ede7c/src%2Flibrustc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/742ef5864a437a86600dc2d93461d781240ede7c/src%2Flibrustc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Futil.rs?ref=742ef5864a437a86600dc2d93461d781240ede7c", "patch": "@@ -239,6 +239,10 @@ impl<'cx, 'gcx, 'tcx> Elaborator<'cx, 'gcx, 'tcx> {\n impl<'cx, 'gcx, 'tcx> Iterator for Elaborator<'cx, 'gcx, 'tcx> {\n     type Item = ty::Predicate<'tcx>;\n \n+    fn size_hint(&self) -> (usize, Option<usize>) {\n+        (self.stack.len(), None)\n+    }\n+\n     fn next(&mut self) -> Option<ty::Predicate<'tcx>> {\n         // Extract next item from top-most stack frame, if any.\n         let next_predicate = match self.stack.pop() {"}]}