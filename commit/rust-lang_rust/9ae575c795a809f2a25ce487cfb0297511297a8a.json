{"sha": "9ae575c795a809f2a25ce487cfb0297511297a8a", "node_id": "C_kwDOAAsO6NoAKDlhZTU3NWM3OTVhODA5ZjJhMjVjZTQ4N2NmYjAyOTc1MTEyOTdhOGE", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2021-11-20T04:51:44Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2021-11-23T18:34:17Z"}, "message": "Update test outputs", "tree": {"sha": "39edc125ef0c7fbd21391956de7919d4449aba3b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/39edc125ef0c7fbd21391956de7919d4449aba3b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ae575c795a809f2a25ce487cfb0297511297a8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ae575c795a809f2a25ce487cfb0297511297a8a", "html_url": "https://github.com/rust-lang/rust/commit/9ae575c795a809f2a25ce487cfb0297511297a8a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ae575c795a809f2a25ce487cfb0297511297a8a/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "471334e99617e20a2165b035241e6aa51bb29628", "url": "https://api.github.com/repos/rust-lang/rust/commits/471334e99617e20a2165b035241e6aa51bb29628", "html_url": "https://github.com/rust-lang/rust/commit/471334e99617e20a2165b035241e6aa51bb29628"}], "stats": {"total": 146, "additions": 73, "deletions": 73}, "files": [{"sha": "3e72d1c42fade86e0e4b36577ac0c37d0909123d", "filename": "src/test/mir-opt/inline/issue_78442.bar.Inline.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9ae575c795a809f2a25ce487cfb0297511297a8a/src%2Ftest%2Fmir-opt%2Finline%2Fissue_78442.bar.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9ae575c795a809f2a25ce487cfb0297511297a8a/src%2Ftest%2Fmir-opt%2Finline%2Fissue_78442.bar.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fissue_78442.bar.Inline.diff?ref=9ae575c795a809f2a25ce487cfb0297511297a8a", "patch": "@@ -19,16 +19,16 @@\n +         _4 = hide_foo() -> [return: bb1, unwind: bb3]; // scope 0 at $DIR/issue-78442.rs:11:5: 11:15\n                                            // mir::Constant\n                                            // + span: $DIR/issue-78442.rs:11:5: 11:13\n-                                           // + literal: Const { ty: fn() -> impl std::ops::Fn<()> {hide_foo}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: fn() -> impl Fn() -> () {hide_foo}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb1: {\n           _3 = &_4;                        // scope 0 at $DIR/issue-78442.rs:11:5: 11:15\n           StorageLive(_5);                 // scope 0 at $DIR/issue-78442.rs:11:5: 11:17\n--         _2 = <impl Fn<()> as Fn<()>>::call(move _3, move _5) -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/issue-78442.rs:11:5: 11:17\n+-         _2 = <impl Fn() -> () as Fn<()>>::call(move _3, move _5) -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/issue-78442.rs:11:5: 11:17\n -                                          // mir::Constant\n -                                          // + span: $DIR/issue-78442.rs:11:5: 11:15\n--                                          // + literal: Const { ty: for<'r> extern \"rust-call\" fn(&'r impl std::ops::Fn<()>, ()) -> <impl std::ops::Fn<()> as std::ops::FnOnce<()>>::Output {<impl std::ops::Fn<()> as std::ops::Fn<()>>::call}, val: Value(Scalar(<ZST>)) }\n+-                                          // + literal: Const { ty: for<'r> extern \"rust-call\" fn(&'r impl Fn() -> (), ()) -> <impl Fn() -> () as std::ops::FnOnce<()>>::Output {<impl Fn() -> () as std::ops::Fn<()>>::call}, val: Value(Scalar(<ZST>)) }\n +         _2 = move (*_3)() -> [return: bb5, unwind: bb3]; // scope 1 at $DIR/issue-78442.rs:11:5: 11:17\n       }\n   "}, {"sha": "622599a2d18d50d62ee2b06c43d211d4cc8b62d4", "filename": "src/test/mir-opt/inline/issue_78442.bar.RevealAll.diff", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9ae575c795a809f2a25ce487cfb0297511297a8a/src%2Ftest%2Fmir-opt%2Finline%2Fissue_78442.bar.RevealAll.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9ae575c795a809f2a25ce487cfb0297511297a8a/src%2Ftest%2Fmir-opt%2Finline%2Fissue_78442.bar.RevealAll.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fissue_78442.bar.RevealAll.diff?ref=9ae575c795a809f2a25ce487cfb0297511297a8a", "patch": "@@ -5,8 +5,8 @@\n       debug _baz => _1;                    // in scope 0 at $DIR/issue-78442.rs:9:5: 9:9\n       let mut _0: ();                      // return place in scope 0 at $DIR/issue-78442.rs:10:3: 10:3\n       let _2: ();                          // in scope 0 at $DIR/issue-78442.rs:11:5: 11:17\n--     let mut _3: &impl std::ops::Fn<()>;  // in scope 0 at $DIR/issue-78442.rs:11:5: 11:15\n--     let _4: impl std::ops::Fn<()>;       // in scope 0 at $DIR/issue-78442.rs:11:5: 11:15\n+-     let mut _3: &impl Fn() -> ();        // in scope 0 at $DIR/issue-78442.rs:11:5: 11:15\n+-     let _4: impl Fn() -> ();             // in scope 0 at $DIR/issue-78442.rs:11:5: 11:15\n +     let mut _3: &fn() {foo};             // in scope 0 at $DIR/issue-78442.rs:11:5: 11:15\n +     let _4: fn() {foo};                  // in scope 0 at $DIR/issue-78442.rs:11:5: 11:15\n       let mut _5: ();                      // in scope 0 at $DIR/issue-78442.rs:11:5: 11:17\n@@ -18,17 +18,17 @@\n           _4 = hide_foo() -> [return: bb1, unwind: bb4]; // scope 0 at $DIR/issue-78442.rs:11:5: 11:15\n                                            // mir::Constant\n                                            // + span: $DIR/issue-78442.rs:11:5: 11:13\n-                                           // + literal: Const { ty: fn() -> impl std::ops::Fn<()> {hide_foo}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: fn() -> impl Fn() -> () {hide_foo}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb1: {\n           _3 = &_4;                        // scope 0 at $DIR/issue-78442.rs:11:5: 11:15\n           StorageLive(_5);                 // scope 0 at $DIR/issue-78442.rs:11:5: 11:17\n           nop;                             // scope 0 at $DIR/issue-78442.rs:11:5: 11:17\n-          _2 = <impl Fn<()> as Fn<()>>::call(move _3, move _5) -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/issue-78442.rs:11:5: 11:17\n+          _2 = <impl Fn() -> () as Fn<()>>::call(move _3, move _5) -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/issue-78442.rs:11:5: 11:17\n                                            // mir::Constant\n                                            // + span: $DIR/issue-78442.rs:11:5: 11:15\n-                                           // + literal: Const { ty: for<'r> extern \"rust-call\" fn(&'r impl std::ops::Fn<()>, ()) -> <impl std::ops::Fn<()> as std::ops::FnOnce<()>>::Output {<impl std::ops::Fn<()> as std::ops::Fn<()>>::call}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: for<'r> extern \"rust-call\" fn(&'r impl Fn() -> (), ()) -> <impl Fn() -> () as std::ops::FnOnce<()>>::Output {<impl Fn() -> () as std::ops::Fn<()>>::call}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb2: {"}, {"sha": "aae562ae72243d34023d060ebe4979b482b2a8b5", "filename": "src/test/ui/associated-types/issue-87261.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9ae575c795a809f2a25ce487cfb0297511297a8a/src%2Ftest%2Fui%2Fassociated-types%2Fissue-87261.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ae575c795a809f2a25ce487cfb0297511297a8a/src%2Ftest%2Fui%2Fassociated-types%2Fissue-87261.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-87261.rs?ref=9ae575c795a809f2a25ce487cfb0297511297a8a", "patch": "@@ -83,17 +83,17 @@ fn main() {\n     //~^ ERROR type mismatch resolving `<impl DerivedTrait as Trait>::Associated == ()`\n \n     accepts_trait(returns_opaque_foo());\n-    //~^ ERROR type mismatch resolving `<impl Trait + Foo as Trait>::Associated == ()`\n+    //~^ ERROR type mismatch resolving `<impl Foo + Trait as Trait>::Associated == ()`\n \n     accepts_trait(returns_opaque_derived_foo());\n-    //~^ ERROR type mismatch resolving `<impl DerivedTrait + Foo as Trait>::Associated == ()`\n+    //~^ ERROR type mismatch resolving `<impl Foo + DerivedTrait as Trait>::Associated == ()`\n \n     accepts_generic_trait(returns_opaque_generic());\n     //~^ ERROR type mismatch resolving `<impl GenericTrait<()> as GenericTrait<()>>::Associated == ()`\n \n     accepts_generic_trait(returns_opaque_generic_foo());\n-    //~^ ERROR type mismatch resolving `<impl GenericTrait<()> + Foo as GenericTrait<()>>::Associated == ()`\n+    //~^ ERROR type mismatch resolving `<impl Foo + GenericTrait<()> as GenericTrait<()>>::Associated == ()`\n \n     accepts_generic_trait(returns_opaque_generic_duplicate());\n-    //~^ ERROR type mismatch resolving `<impl GenericTrait<()> + GenericTrait<u8> as GenericTrait<()>>::Associated == ()`\n+    //~^ ERROR type mismatch resolving `<impl GenericTrait<u8> + GenericTrait<()> as GenericTrait<()>>::Associated == ()`\n }"}, {"sha": "c00b48abc1c330993d5755fe471e48949a225c4f", "filename": "src/test/ui/associated-types/issue-87261.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9ae575c795a809f2a25ce487cfb0297511297a8a/src%2Ftest%2Fui%2Fassociated-types%2Fissue-87261.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ae575c795a809f2a25ce487cfb0297511297a8a/src%2Ftest%2Fui%2Fassociated-types%2Fissue-87261.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-87261.stderr?ref=9ae575c795a809f2a25ce487cfb0297511297a8a", "patch": "@@ -160,7 +160,7 @@ help: consider constraining the associated type `<impl DerivedTrait as Trait>::A\n LL | fn returns_opaque_derived() -> impl DerivedTrait<Associated = ()> + 'static {\n    |                                                 +++++++++++++++++\n \n-error[E0271]: type mismatch resolving `<impl Trait + Foo as Trait>::Associated == ()`\n+error[E0271]: type mismatch resolving `<impl Foo + Trait as Trait>::Associated == ()`\n   --> $DIR/issue-87261.rs:85:5\n    |\n LL | fn returns_opaque_foo() -> impl Trait + Foo {\n@@ -170,18 +170,18 @@ LL |     accepts_trait(returns_opaque_foo());\n    |     ^^^^^^^^^^^^^ expected `()`, found associated type\n    |\n    = note:    expected unit type `()`\n-           found associated type `<impl Trait + Foo as Trait>::Associated`\n+           found associated type `<impl Foo + Trait as Trait>::Associated`\n note: required by a bound in `accepts_trait`\n   --> $DIR/issue-87261.rs:43:27\n    |\n LL | fn accepts_trait<T: Trait<Associated = ()>>(_: T) {}\n    |                           ^^^^^^^^^^^^^^^ required by this bound in `accepts_trait`\n-help: consider constraining the associated type `<impl Trait + Foo as Trait>::Associated` to `()`\n+help: consider constraining the associated type `<impl Foo + Trait as Trait>::Associated` to `()`\n    |\n LL | fn returns_opaque_foo() -> impl Trait<Associated = ()> + Foo {\n    |                                      +++++++++++++++++\n \n-error[E0271]: type mismatch resolving `<impl DerivedTrait + Foo as Trait>::Associated == ()`\n+error[E0271]: type mismatch resolving `<impl Foo + DerivedTrait as Trait>::Associated == ()`\n   --> $DIR/issue-87261.rs:88:5\n    |\n LL | fn returns_opaque_derived_foo() -> impl DerivedTrait + Foo {\n@@ -191,8 +191,8 @@ LL |     accepts_trait(returns_opaque_derived_foo());\n    |     ^^^^^^^^^^^^^ expected `()`, found associated type\n    |\n    = note:    expected unit type `()`\n-           found associated type `<impl DerivedTrait + Foo as Trait>::Associated`\n-   = help: consider constraining the associated type `<impl DerivedTrait + Foo as Trait>::Associated` to `()`\n+           found associated type `<impl Foo + DerivedTrait as Trait>::Associated`\n+   = help: consider constraining the associated type `<impl Foo + DerivedTrait as Trait>::Associated` to `()`\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n note: required by a bound in `accepts_trait`\n   --> $DIR/issue-87261.rs:43:27\n@@ -221,7 +221,7 @@ help: consider constraining the associated type `<impl GenericTrait<()> as Gener\n LL | fn returns_opaque_generic() -> impl GenericTrait<(), Associated = ()> + 'static {\n    |                                                    +++++++++++++++++\n \n-error[E0271]: type mismatch resolving `<impl GenericTrait<()> + Foo as GenericTrait<()>>::Associated == ()`\n+error[E0271]: type mismatch resolving `<impl Foo + GenericTrait<()> as GenericTrait<()>>::Associated == ()`\n   --> $DIR/issue-87261.rs:94:5\n    |\n LL | fn returns_opaque_generic_foo() -> impl GenericTrait<()> + Foo {\n@@ -231,18 +231,18 @@ LL |     accepts_generic_trait(returns_opaque_generic_foo());\n    |     ^^^^^^^^^^^^^^^^^^^^^ expected `()`, found associated type\n    |\n    = note:    expected unit type `()`\n-           found associated type `<impl GenericTrait<()> + Foo as GenericTrait<()>>::Associated`\n+           found associated type `<impl Foo + GenericTrait<()> as GenericTrait<()>>::Associated`\n note: required by a bound in `accepts_generic_trait`\n   --> $DIR/issue-87261.rs:44:46\n    |\n LL | fn accepts_generic_trait<T: GenericTrait<(), Associated = ()>>(_: T) {}\n    |                                              ^^^^^^^^^^^^^^^ required by this bound in `accepts_generic_trait`\n-help: consider constraining the associated type `<impl GenericTrait<()> + Foo as GenericTrait<()>>::Associated` to `()`\n+help: consider constraining the associated type `<impl Foo + GenericTrait<()> as GenericTrait<()>>::Associated` to `()`\n    |\n LL | fn returns_opaque_generic_foo() -> impl GenericTrait<(), Associated = ()> + Foo {\n    |                                                        +++++++++++++++++\n \n-error[E0271]: type mismatch resolving `<impl GenericTrait<()> + GenericTrait<u8> as GenericTrait<()>>::Associated == ()`\n+error[E0271]: type mismatch resolving `<impl GenericTrait<u8> + GenericTrait<()> as GenericTrait<()>>::Associated == ()`\n   --> $DIR/issue-87261.rs:97:5\n    |\n LL | fn returns_opaque_generic_duplicate() -> impl GenericTrait<()> + GenericTrait<u8> {\n@@ -252,8 +252,8 @@ LL |     accepts_generic_trait(returns_opaque_generic_duplicate());\n    |     ^^^^^^^^^^^^^^^^^^^^^ expected `()`, found associated type\n    |\n    = note:    expected unit type `()`\n-           found associated type `<impl GenericTrait<()> + GenericTrait<u8> as GenericTrait<()>>::Associated`\n-   = help: consider constraining the associated type `<impl GenericTrait<()> + GenericTrait<u8> as GenericTrait<()>>::Associated` to `()`\n+           found associated type `<impl GenericTrait<u8> + GenericTrait<()> as GenericTrait<()>>::Associated`\n+   = help: consider constraining the associated type `<impl GenericTrait<u8> + GenericTrait<()> as GenericTrait<()>>::Associated` to `()`\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n note: required by a bound in `accepts_generic_trait`\n   --> $DIR/issue-87261.rs:44:46"}, {"sha": "e3832767203bbb6c5845b92ffbfc456d5ee71a87", "filename": "src/test/ui/async-await/async-block-control-flow-static-semantics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9ae575c795a809f2a25ce487cfb0297511297a8a/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ae575c795a809f2a25ce487cfb0297511297a8a/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.rs?ref=9ae575c795a809f2a25ce487cfb0297511297a8a", "patch": "@@ -15,16 +15,16 @@ fn return_targets_async_block_not_fn() -> u8 {\n         return 0u8;\n     };\n     let _: &dyn Future<Output = ()> = &block;\n-    //~^ ERROR type mismatch resolving `<impl Future as Future>::Output == ()`\n+    //~^ ERROR type mismatch\n }\n \n async fn return_targets_async_block_not_async_fn() -> u8 {\n-    //~^ ERROR mismatched types\n+    //~^ ERROR mismatched types [E0308]\n     let block = async {\n         return 0u8;\n     };\n     let _: &dyn Future<Output = ()> = &block;\n-    //~^ ERROR type mismatch resolving `<impl Future as Future>::Output == ()`\n+    //~^ ERROR type mismatch resolving `<impl Future<Output = [async output]> as Future>::Output == ()`\n }\n \n fn no_break_in_async_block() {"}, {"sha": "fe864c65b7cf24ca510d7366305295ad7dc021a0", "filename": "src/test/ui/async-await/async-block-control-flow-static-semantics.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9ae575c795a809f2a25ce487cfb0297511297a8a/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ae575c795a809f2a25ce487cfb0297511297a8a/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.stderr?ref=9ae575c795a809f2a25ce487cfb0297511297a8a", "patch": "@@ -31,7 +31,7 @@ LL | |\n LL | | }\n    | |_^ expected `u8`, found `()`\n \n-error[E0271]: type mismatch resolving `<impl Future as Future>::Output == ()`\n+error[E0271]: type mismatch resolving `<impl Future<Output = [async output]> as Future>::Output == ()`\n   --> $DIR/async-block-control-flow-static-semantics.rs:26:39\n    |\n LL |     let _: &dyn Future<Output = ()> = &block;\n@@ -47,7 +47,7 @@ LL | fn return_targets_async_block_not_fn() -> u8 {\n    |    |\n    |    implicitly returns `()` as its body has no tail or `return` expression\n \n-error[E0271]: type mismatch resolving `<impl Future as Future>::Output == ()`\n+error[E0271]: type mismatch resolving `<impl Future<Output = [async output]> as Future>::Output == ()`\n   --> $DIR/async-block-control-flow-static-semantics.rs:17:39\n    |\n LL |     let _: &dyn Future<Output = ()> = &block;"}, {"sha": "4a45d8d2a942344a55427e35341450aec65e3478", "filename": "src/test/ui/async-await/generator-desc.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9ae575c795a809f2a25ce487cfb0297511297a8a/src%2Ftest%2Fui%2Fasync-await%2Fgenerator-desc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ae575c795a809f2a25ce487cfb0297511297a8a/src%2Ftest%2Fui%2Fasync-await%2Fgenerator-desc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fgenerator-desc.stderr?ref=9ae575c795a809f2a25ce487cfb0297511297a8a", "patch": "@@ -46,8 +46,8 @@ LL | pub const fn from_generator<T>(gen: T) -> impl Future<Output = T::Return>\n    |                                           the expected opaque type\n    |                                           the found opaque type\n    |\n-   = note: expected opaque type `impl Future` (`async` closure body)\n-              found opaque type `impl Future` (`async` closure body)\n+   = note: expected opaque type `impl Future<Output = [async output]>` (`async` closure body)\n+              found opaque type `impl Future<Output = [async output]>` (`async` closure body)\n \n error: aborting due to 3 previous errors\n "}, {"sha": "b61694ad53e5b1a869bc521c519907aca5ae35fb", "filename": "src/test/ui/async-await/issue-67252-unnamed-future.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ae575c795a809f2a25ce487cfb0297511297a8a/src%2Ftest%2Fui%2Fasync-await%2Fissue-67252-unnamed-future.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ae575c795a809f2a25ce487cfb0297511297a8a/src%2Ftest%2Fui%2Fasync-await%2Fissue-67252-unnamed-future.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-67252-unnamed-future.stderr?ref=9ae575c795a809f2a25ce487cfb0297511297a8a", "patch": "@@ -4,7 +4,7 @@ error: future cannot be sent between threads safely\n LL |     spawn(async {\n    |     ^^^^^ future created by async block is not `Send`\n    |\n-   = help: within `impl Future`, the trait `Send` is not implemented for `*mut ()`\n+   = help: within `impl Future<Output = [async output]>`, the trait `Send` is not implemented for `*mut ()`\n note: future is not `Send` as this value is used across an await\n   --> $DIR/issue-67252-unnamed-future.rs:20:9\n    |"}, {"sha": "a8c2ebe12fa1837eff54e5529e839d9cb079fec7", "filename": "src/test/ui/async-await/issue-68112.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9ae575c795a809f2a25ce487cfb0297511297a8a/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ae575c795a809f2a25ce487cfb0297511297a8a/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.stderr?ref=9ae575c795a809f2a25ce487cfb0297511297a8a", "patch": "@@ -44,13 +44,13 @@ LL |     require_send(send_fut);\n    = note: required because of the requirements on the impl of `Send` for `Arc<RefCell<i32>>`\n    = note: required because it appears within the type `[static generator@$DIR/issue-68112.rs:47:31: 47:36]`\n    = note: required because it appears within the type `from_generator::GenFuture<[static generator@$DIR/issue-68112.rs:47:31: 47:36]>`\n-   = note: required because it appears within the type `impl Future`\n+   = note: required because it appears within the type `impl Future<Output = [async output]>`\n    = note: required because it appears within the type `impl Future<Output = Arc<RefCell<i32>>>`\n    = note: required because it appears within the type `impl Future<Output = Arc<RefCell<i32>>>`\n    = note: required because it appears within the type `{ResumeTy, impl Future<Output = Arc<RefCell<i32>>>, (), i32, Ready<i32>}`\n    = note: required because it appears within the type `[static generator@$DIR/issue-68112.rs:55:26: 59:6]`\n    = note: required because it appears within the type `from_generator::GenFuture<[static generator@$DIR/issue-68112.rs:55:26: 59:6]>`\n-   = note: required because it appears within the type `impl Future`\n+   = note: required because it appears within the type `impl Future<Output = [async output]>`\n note: required by a bound in `require_send`\n   --> $DIR/issue-68112.rs:11:25\n    |"}, {"sha": "6ebefbebe536260f327b9ea2c3143c8dfeb0c84e", "filename": "src/test/ui/async-await/issues/issue-65436-raw-ptr-not-send.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ae575c795a809f2a25ce487cfb0297511297a8a/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65436-raw-ptr-not-send.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ae575c795a809f2a25ce487cfb0297511297a8a/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65436-raw-ptr-not-send.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65436-raw-ptr-not-send.stderr?ref=9ae575c795a809f2a25ce487cfb0297511297a8a", "patch": "@@ -4,7 +4,7 @@ error: future cannot be sent between threads safely\n LL |     assert_send(async {\n    |     ^^^^^^^^^^^ future created by async block is not `Send`\n    |\n-   = help: within `impl Future`, the trait `Send` is not implemented for `*const u8`\n+   = help: within `impl Future<Output = [async output]>`, the trait `Send` is not implemented for `*const u8`\n note: future is not `Send` as this value is used across an await\n   --> $DIR/issue-65436-raw-ptr-not-send.rs:14:9\n    |"}, {"sha": "42c6de201276869e8d137ae7adb63ed077412a89", "filename": "src/test/ui/entry-point/imported_main_const_fn_item_type_forbidden.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ae575c795a809f2a25ce487cfb0297511297a8a/src%2Ftest%2Fui%2Fentry-point%2Fimported_main_const_fn_item_type_forbidden.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ae575c795a809f2a25ce487cfb0297511297a8a/src%2Ftest%2Fui%2Fentry-point%2Fimported_main_const_fn_item_type_forbidden.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fentry-point%2Fimported_main_const_fn_item_type_forbidden.stderr?ref=9ae575c795a809f2a25ce487cfb0297511297a8a", "patch": "@@ -21,7 +21,7 @@ LL |     type MainFn = impl Fn();\n LL |     pub const BAR: MainFn = bar;\n    |                             ^^^ expected opaque type, found fn item\n    |\n-   = note: expected opaque type `impl Fn<()>`\n+   = note: expected opaque type `impl Fn() -> ()`\n                   found fn item `fn() {bar}`\n \n error: could not find defining uses"}, {"sha": "a7d7a732548869911355fdea83ebb0616c5f2bd6", "filename": "src/test/ui/generator/issue-68112.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9ae575c795a809f2a25ce487cfb0297511297a8a/src%2Ftest%2Fui%2Fgenerator%2Fissue-68112.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ae575c795a809f2a25ce487cfb0297511297a8a/src%2Ftest%2Fui%2Fgenerator%2Fissue-68112.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fissue-68112.stderr?ref=9ae575c795a809f2a25ce487cfb0297511297a8a", "patch": "@@ -9,7 +9,7 @@ note: generator is not `Send` as this value is used across a yield\n   --> $DIR/issue-68112.rs:31:9\n    |\n LL |         let _non_send_gen = make_non_send_generator();\n-   |             ------------- has type `impl Generator` which is not `Send`\n+   |             ------------- has type `impl Generator<Return = Arc<RefCell<i32>>>` which is not `Send`\n LL |         yield;\n    |         ^^^^^ yield occurs here, with `_non_send_gen` maybe used later\n LL |     };\n@@ -29,9 +29,9 @@ LL |     require_send(send_gen);\n    = help: the trait `Sync` is not implemented for `RefCell<i32>`\n    = note: required because of the requirements on the impl of `Send` for `Arc<RefCell<i32>>`\n    = note: required because it appears within the type `[generator@$DIR/issue-68112.rs:38:5: 41:6]`\n-   = note: required because it appears within the type `impl Generator`\n-   = note: required because it appears within the type `impl Generator`\n-   = note: required because it appears within the type `{impl Generator, ()}`\n+   = note: required because it appears within the type `impl Generator<Return = Arc<RefCell<i32>>>`\n+   = note: required because it appears within the type `impl Generator<Return = Arc<RefCell<i32>>>`\n+   = note: required because it appears within the type `{impl Generator<Return = Arc<RefCell<i32>>>, ()}`\n    = note: required because it appears within the type `[generator@$DIR/issue-68112.rs:48:20: 51:6]`\n note: required by a bound in `require_send`\n   --> $DIR/issue-68112.rs:22:25"}, {"sha": "2ca180029ae7f4f1bca7af922a0af7b7f1eed229", "filename": "src/test/ui/impl-trait/auto-trait-leak2.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9ae575c795a809f2a25ce487cfb0297511297a8a/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ae575c795a809f2a25ce487cfb0297511297a8a/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak2.stderr?ref=9ae575c795a809f2a25ce487cfb0297511297a8a", "patch": "@@ -2,16 +2,16 @@ error[E0277]: `Rc<Cell<i32>>` cannot be sent between threads safely\n   --> $DIR/auto-trait-leak2.rs:13:10\n    |\n LL | fn before() -> impl Fn(i32) {\n-   |                ------------ within this `impl Fn<(i32,)>`\n+   |                ------------ within this `impl Fn(i32) -> ()`\n ...\n LL |     send(before());\n    |     ---- ^^^^^^^^ `Rc<Cell<i32>>` cannot be sent between threads safely\n    |     |\n    |     required by a bound introduced by this call\n    |\n-   = help: within `impl Fn<(i32,)>`, the trait `Send` is not implemented for `Rc<Cell<i32>>`\n+   = help: within `impl Fn(i32) -> ()`, the trait `Send` is not implemented for `Rc<Cell<i32>>`\n    = note: required because it appears within the type `[closure@$DIR/auto-trait-leak2.rs:7:5: 7:22]`\n-   = note: required because it appears within the type `impl Fn<(i32,)>`\n+   = note: required because it appears within the type `impl Fn(i32) -> ()`\n note: required by a bound in `send`\n   --> $DIR/auto-trait-leak2.rs:10:12\n    |\n@@ -27,11 +27,11 @@ LL |     send(after());\n    |     required by a bound introduced by this call\n ...\n LL | fn after() -> impl Fn(i32) {\n-   |               ------------ within this `impl Fn<(i32,)>`\n+   |               ------------ within this `impl Fn(i32) -> ()`\n    |\n-   = help: within `impl Fn<(i32,)>`, the trait `Send` is not implemented for `Rc<Cell<i32>>`\n+   = help: within `impl Fn(i32) -> ()`, the trait `Send` is not implemented for `Rc<Cell<i32>>`\n    = note: required because it appears within the type `[closure@$DIR/auto-trait-leak2.rs:24:5: 24:22]`\n-   = note: required because it appears within the type `impl Fn<(i32,)>`\n+   = note: required because it appears within the type `impl Fn(i32) -> ()`\n note: required by a bound in `send`\n   --> $DIR/auto-trait-leak2.rs:10:12\n    |"}, {"sha": "a519397806e0703ee7e83076dc191016722e607f", "filename": "src/test/ui/impl-trait/issue-55872-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ae575c795a809f2a25ce487cfb0297511297a8a/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ae575c795a809f2a25ce487cfb0297511297a8a/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.rs?ref=9ae575c795a809f2a25ce487cfb0297511297a8a", "patch": "@@ -13,7 +13,7 @@ impl<S> Bar for S {\n     type E = impl std::marker::Copy;\n     fn foo<T>() -> Self::E {\n         //~^ ERROR type parameter `T` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n-        //~| ERROR the trait bound `impl Future: Copy` is not satisfied [E0277]\n+        //~| ERROR the trait bound `impl Future<Output = [async output]>: Copy` is not satisfied\n         async {}\n     }\n }"}, {"sha": "97545ba3d1124c755df086a10ff9195b445ef00f", "filename": "src/test/ui/impl-trait/issue-55872-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9ae575c795a809f2a25ce487cfb0297511297a8a/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ae575c795a809f2a25ce487cfb0297511297a8a/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.stderr?ref=9ae575c795a809f2a25ce487cfb0297511297a8a", "patch": "@@ -1,8 +1,8 @@\n-error[E0277]: the trait bound `impl Future: Copy` is not satisfied\n+error[E0277]: the trait bound `impl Future<Output = [async output]>: Copy` is not satisfied\n   --> $DIR/issue-55872-2.rs:14:20\n    |\n LL |     fn foo<T>() -> Self::E {\n-   |                    ^^^^^^^ the trait `Copy` is not implemented for `impl Future`\n+   |                    ^^^^^^^ the trait `Copy` is not implemented for `impl Future<Output = [async output]>`\n \n error: type parameter `T` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n   --> $DIR/issue-55872-2.rs:14:28"}, {"sha": "e57fbf104dc6f5413643c60337b23cb82eb62bdf", "filename": "src/test/ui/impl-trait/issue-72911.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9ae575c795a809f2a25ce487cfb0297511297a8a/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-72911.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ae575c795a809f2a25ce487cfb0297511297a8a/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-72911.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-72911.stderr?ref=9ae575c795a809f2a25ce487cfb0297511297a8a", "patch": "@@ -19,14 +19,14 @@ LL |\n LL |     lint_files().flat_map(|f| gather_from_file(&f))\n    |     -----------------------------------------------\n    |     |\n-   |     returning here with type `FlatMap<impl Iterator, [type error], [closure@$DIR/issue-72911.rs:9:27: 9:51]>`\n-   |     returning here with type `FlatMap<impl Iterator, [type error], [closure@$DIR/issue-72911.rs:9:27: 9:51]>`\n+   |     returning here with type `FlatMap<impl Iterator<Item = [type error]>, [type error], [closure@$DIR/issue-72911.rs:9:27: 9:51]>`\n+   |     returning here with type `FlatMap<impl Iterator<Item = [type error]>, [type error], [closure@$DIR/issue-72911.rs:9:27: 9:51]>`\n ...\n LL | fn gather_from_file(dir_entry: &foo::MissingItem) -> impl Iterator<Item = Lint> {\n-   |                                                      -------------------------- returning this opaque type `FlatMap<impl Iterator, [type error], [closure@$DIR/issue-72911.rs:9:27: 9:51]>`\n+   |                                                      -------------------------- returning this opaque type `FlatMap<impl Iterator<Item = [type error]>, [type error], [closure@$DIR/issue-72911.rs:9:27: 9:51]>`\n ...\n LL | fn lint_files() -> impl Iterator<Item = foo::MissingItem> {\n-   |                    -------------------------------------- returning this opaque type `FlatMap<impl Iterator, [type error], [closure@$DIR/issue-72911.rs:9:27: 9:51]>`\n+   |                    -------------------------------------- returning this opaque type `FlatMap<impl Iterator<Item = [type error]>, [type error], [closure@$DIR/issue-72911.rs:9:27: 9:51]>`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "9b7d225a53eee45cb379fe8270724f676cb248cb", "filename": "src/test/ui/impl-trait/issue-87450.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9ae575c795a809f2a25ce487cfb0297511297a8a/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-87450.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ae575c795a809f2a25ce487cfb0297511297a8a/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-87450.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-87450.stderr?ref=9ae575c795a809f2a25ce487cfb0297511297a8a", "patch": "@@ -17,10 +17,10 @@ LL | fn foo() -> impl Fn() {\n    |             ^^^^^^^^^ recursive opaque type\n ...\n LL |     wrap(wrap(wrap(wrap(wrap(wrap(wrap(foo())))))))\n-   |     ----------------------------------------------- returning here with type `impl Fn<()>`\n+   |     ----------------------------------------------- returning here with type `impl Fn() -> ()`\n ...\n LL | fn wrap(f: impl Fn()) -> impl Fn() {\n-   |                          --------- returning this opaque type `impl Fn<()>`\n+   |                          --------- returning this opaque type `impl Fn() -> ()`\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "130678de2370cd47ed6978b7c50ef91a15a443d9", "filename": "src/test/ui/impl-trait/issues/issue-78722.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ae575c795a809f2a25ce487cfb0297511297a8a/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ae575c795a809f2a25ce487cfb0297511297a8a/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.stderr?ref=9ae575c795a809f2a25ce487cfb0297511297a8a", "patch": "@@ -15,7 +15,7 @@ LL | pub const fn from_generator<T>(gen: T) -> impl Future<Output = T::Return>\n    |                                           ------------------------------- the found opaque type\n    |\n    = note: expected opaque type `impl Future<Output = u8>`\n-              found opaque type `impl Future`\n+              found opaque type `impl Future<Output = [async output]>`\n    = note: distinct uses of `impl Trait` result in different opaque types\n \n error: aborting due to previous error"}, {"sha": "d65bddf7cfa3f6d0e0a791e03f6e26e52930a205", "filename": "src/test/ui/impl-trait/issues/issue-86201.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ae575c795a809f2a25ce487cfb0297511297a8a/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-86201.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ae575c795a809f2a25ce487cfb0297511297a8a/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-86201.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-86201.stderr?ref=9ae575c795a809f2a25ce487cfb0297511297a8a", "patch": "@@ -7,7 +7,7 @@ LL |\n LL | static STATIC_FN: FunType = some_fn;\n    |                             ^^^^^^^ expected opaque type, found fn item\n    |\n-   = note: expected opaque type `impl Fn<()>`\n+   = note: expected opaque type `impl Fn<()> + FnOnce<()>`\n                   found fn item `fn() {some_fn}`\n \n error: could not find defining uses"}, {"sha": "65ef436129e91be2ea798b57df1622b18e361fa5", "filename": "src/test/ui/issues/issue-59494.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ae575c795a809f2a25ce487cfb0297511297a8a/src%2Ftest%2Fui%2Fissues%2Fissue-59494.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ae575c795a809f2a25ce487cfb0297511297a8a/src%2Ftest%2Fui%2Fissues%2Fissue-59494.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-59494.rs?ref=9ae575c795a809f2a25ce487cfb0297511297a8a", "patch": "@@ -19,5 +19,5 @@ fn main() {\n     let g = |(a, _)| a;\n     let t7 = |env| |a| |b| t7p(f, g)(((env, a), b));\n     let t8 = t8n(t7, t7p(f, g));\n-    //~^ ERROR: expected a `Fn<(_,)>` closure, found `impl Fn<(((_, _), _),)>\n+    //~^ ERROR: expected a `Fn<(_,)>` closure, found `impl Fn(((_, _), _)) -> ()` [E0277]\n }"}, {"sha": "0af54f567f0ffcd91c2114bdecac944567c60aba", "filename": "src/test/ui/issues/issue-59494.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9ae575c795a809f2a25ce487cfb0297511297a8a/src%2Ftest%2Fui%2Fissues%2Fissue-59494.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ae575c795a809f2a25ce487cfb0297511297a8a/src%2Ftest%2Fui%2Fissues%2Fissue-59494.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-59494.stderr?ref=9ae575c795a809f2a25ce487cfb0297511297a8a", "patch": "@@ -1,12 +1,12 @@\n-error[E0277]: expected a `Fn<(_,)>` closure, found `impl Fn<(((_, _), _),)>`\n+error[E0277]: expected a `Fn<(_,)>` closure, found `impl Fn(((_, _), _)) -> ()`\n   --> $DIR/issue-59494.rs:21:22\n    |\n LL |     let t8 = t8n(t7, t7p(f, g));\n-   |              ---     ^^^^^^^^^ expected an `Fn<(_,)>` closure, found `impl Fn<(((_, _), _),)>`\n+   |              ---     ^^^^^^^^^ expected an `Fn<(_,)>` closure, found `impl Fn(((_, _), _)) -> ()`\n    |              |\n    |              required by a bound introduced by this call\n    |\n-   = help: the trait `Fn<(_,)>` is not implemented for `impl Fn<(((_, _), _),)>`\n+   = help: the trait `Fn<(_,)>` is not implemented for `impl Fn(((_, _), _)) -> ()`\n note: required by a bound in `t8n`\n   --> $DIR/issue-59494.rs:5:45\n    |"}, {"sha": "717ca4986f700e6e0fca62692bfb1790f8eb656f", "filename": "src/test/ui/lint/lint-ctypes-73251-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ae575c795a809f2a25ce487cfb0297511297a8a/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ae575c795a809f2a25ce487cfb0297511297a8a/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-2.rs?ref=9ae575c795a809f2a25ce487cfb0297511297a8a", "patch": "@@ -33,7 +33,7 @@ fn use_of_b() -> AliasB {\n }\n \n extern \"C\" {\n-    pub fn lint_me() -> <AliasB as TraitB>::Assoc; //~ ERROR: uses type `impl TraitA`\n+    pub fn lint_me() -> <AliasB as TraitB>::Assoc; //~ ERROR: uses type `impl TraitA<Assoc = u32>`\n }\n \n fn main() {}"}, {"sha": "d7e10db441ec23eb11ca485e468a1bb96785682b", "filename": "src/test/ui/lint/lint-ctypes-73251-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ae575c795a809f2a25ce487cfb0297511297a8a/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ae575c795a809f2a25ce487cfb0297511297a8a/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-2.stderr?ref=9ae575c795a809f2a25ce487cfb0297511297a8a", "patch": "@@ -1,4 +1,4 @@\n-error: `extern` block uses type `impl TraitA`, which is not FFI-safe\n+error: `extern` block uses type `impl TraitA<Assoc = u32>`, which is not FFI-safe\n   --> $DIR/lint-ctypes-73251-2.rs:36:25\n    |\n LL |     pub fn lint_me() -> <AliasB as TraitB>::Assoc;"}, {"sha": "efdc4037b6356ab900adac3de365dbc1875de0d2", "filename": "src/test/ui/lint/opaque-ty-ffi-unsafe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ae575c795a809f2a25ce487cfb0297511297a8a/src%2Ftest%2Fui%2Flint%2Fopaque-ty-ffi-unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ae575c795a809f2a25ce487cfb0297511297a8a/src%2Ftest%2Fui%2Flint%2Fopaque-ty-ffi-unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fopaque-ty-ffi-unsafe.rs?ref=9ae575c795a809f2a25ce487cfb0297511297a8a", "patch": "@@ -9,7 +9,7 @@ pub fn ret_closure() -> A {\n \n extern \"C\" {\n     pub fn a(_: A);\n-    //~^ ERROR `extern` block uses type `impl Fn<()>`, which is not FFI-safe\n+    //~^ ERROR `extern` block uses type `impl Fn() -> ()`, which is not FFI-safe [improper_ctypes]\n }\n \n fn main() {}"}, {"sha": "c77d8c0c18bc8caa24c38d899ec29bd1b152cd28", "filename": "src/test/ui/lint/opaque-ty-ffi-unsafe.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ae575c795a809f2a25ce487cfb0297511297a8a/src%2Ftest%2Fui%2Flint%2Fopaque-ty-ffi-unsafe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ae575c795a809f2a25ce487cfb0297511297a8a/src%2Ftest%2Fui%2Flint%2Fopaque-ty-ffi-unsafe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fopaque-ty-ffi-unsafe.stderr?ref=9ae575c795a809f2a25ce487cfb0297511297a8a", "patch": "@@ -1,4 +1,4 @@\n-error: `extern` block uses type `impl Fn<()>`, which is not FFI-safe\n+error: `extern` block uses type `impl Fn() -> ()`, which is not FFI-safe\n   --> $DIR/opaque-ty-ffi-unsafe.rs:11:17\n    |\n LL |     pub fn a(_: A);"}, {"sha": "31168e29eb82fc583e800d035bd4e2d329c527ed", "filename": "src/test/ui/pattern/non-structural-match-types.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ae575c795a809f2a25ce487cfb0297511297a8a/src%2Ftest%2Fui%2Fpattern%2Fnon-structural-match-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ae575c795a809f2a25ce487cfb0297511297a8a/src%2Ftest%2Fui%2Fpattern%2Fnon-structural-match-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fnon-structural-match-types.stderr?ref=9ae575c795a809f2a25ce487cfb0297511297a8a", "patch": "@@ -4,7 +4,7 @@ error: `[closure@$DIR/non-structural-match-types.rs:9:17: 9:22]` cannot be used\n LL |         const { || {} } => {},\n    |         ^^^^^^^^^^^^^^^\n \n-error: `impl Future` cannot be used in patterns\n+error: `impl Future<Output = [async output]>` cannot be used in patterns\n   --> $DIR/non-structural-match-types.rs:12:9\n    |\n LL |         const { async {} } => {},"}, {"sha": "550ed4b03b03937d2fe73fbff637f155ea662c48", "filename": "src/test/ui/suggestions/expected-boxed-future-isnt-pinned.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ae575c795a809f2a25ce487cfb0297511297a8a/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ae575c795a809f2a25ce487cfb0297511297a8a/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.stderr?ref=9ae575c795a809f2a25ce487cfb0297511297a8a", "patch": "@@ -81,7 +81,7 @@ LL |   pub const fn from_generator<T>(gen: T) -> impl Future<Output = T::Return>\n    |                                             ------------------------------- the found opaque type\n    |\n    = note:   expected struct `Pin<Box<(dyn Future<Output = i32> + Send + 'static)>>`\n-           found opaque type `impl Future`\n+           found opaque type `impl Future<Output = [async output]>`\n help: you need to pin and box this expression\n    |\n LL ~     Box::pin(async {"}, {"sha": "101e7aecc0226dc431b3a9175da281c6e1920d00", "filename": "src/test/ui/suggestions/fn-ctor-passed-as-arg-where-it-should-have-been-called.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9ae575c795a809f2a25ce487cfb0297511297a8a/src%2Ftest%2Fui%2Fsuggestions%2Ffn-ctor-passed-as-arg-where-it-should-have-been-called.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ae575c795a809f2a25ce487cfb0297511297a8a/src%2Ftest%2Fui%2Fsuggestions%2Ffn-ctor-passed-as-arg-where-it-should-have-been-called.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffn-ctor-passed-as-arg-where-it-should-have-been-called.stderr?ref=9ae575c795a809f2a25ce487cfb0297511297a8a", "patch": "@@ -1,11 +1,11 @@\n-error[E0277]: the trait bound `fn() -> impl T {foo}: T` is not satisfied\n+error[E0277]: the trait bound `fn() -> impl T<O = ()> {foo}: T` is not satisfied\n   --> $DIR/fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:17:9\n    |\n LL | fn foo() -> impl T<O=()> { S }\n    |    --- consider calling this function\n ...\n LL |     bar(foo);\n-   |     --- ^^^ the trait `T` is not implemented for `fn() -> impl T {foo}`\n+   |     --- ^^^ the trait `T` is not implemented for `fn() -> impl T<O = ()> {foo}`\n    |     |\n    |     required by a bound introduced by this call\n    |"}, {"sha": "5878b26fddbc78453ae0dde1501c75a310f9a9d3", "filename": "src/test/ui/type-alias-impl-trait/issue-89686.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ae575c795a809f2a25ce487cfb0297511297a8a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-89686.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ae575c795a809f2a25ce487cfb0297511297a8a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-89686.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-89686.rs?ref=9ae575c795a809f2a25ce487cfb0297511297a8a", "patch": "@@ -5,7 +5,7 @@\n use std::future::Future;\n \n type G<'a, T> = impl Future<Output = ()>;\n-//~^ ERROR: type mismatch resolving `<impl Future as Future>::Output == ()`\n+//~^ ERROR: type mismatch resolving `<impl Future<Output = [async output]> as Future>::Output == ()`\n //~| ERROR: the trait bound `T: Trait` is not satisfied\n \n trait Trait {"}, {"sha": "19ed9a7476c1b872bded84d1f988665a2067bfca", "filename": "src/test/ui/type-alias-impl-trait/issue-89686.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9ae575c795a809f2a25ce487cfb0297511297a8a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-89686.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ae575c795a809f2a25ce487cfb0297511297a8a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-89686.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-89686.stderr?ref=9ae575c795a809f2a25ce487cfb0297511297a8a", "patch": "@@ -1,4 +1,4 @@\n-error[E0271]: type mismatch resolving `<impl Future as Future>::Output == ()`\n+error[E0271]: type mismatch resolving `<impl Future<Output = [async output]> as Future>::Output == ()`\n   --> $DIR/issue-89686.rs:7:17\n    |\n LL | type G<'a, T> = impl Future<Output = ()>;\n@@ -13,8 +13,8 @@ LL | pub const fn from_generator<T>(gen: T) -> impl Future<Output = T::Return>\n    |                                           ------------------------------- the found opaque type\n    |\n    = note:    expected unit type `()`\n-           found associated type `<impl Future as Future>::Output`\n-   = help: consider constraining the associated type `<impl Future as Future>::Output` to `()`\n+           found associated type `<impl Future<Output = [async output]> as Future>::Output`\n+   = help: consider constraining the associated type `<impl Future<Output = [async output]> as Future>::Output` to `()`\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error[E0277]: the trait bound `T: Trait` is not satisfied"}]}