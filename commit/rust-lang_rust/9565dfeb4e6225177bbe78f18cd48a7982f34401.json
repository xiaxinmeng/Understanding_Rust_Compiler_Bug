{"sha": "9565dfeb4e6225177bbe78f18cd48a7982f34401", "node_id": "C_kwDOAAsO6NoAKDk1NjVkZmViNGU2MjI1MTc3YmJlNzhmMThjZDQ4YTc5ODJmMzQ0MDE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-28T19:28:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-28T19:28:41Z"}, "message": "Auto merge of #103683 - fee1-dead-contrib:fix-deferred-cast-checks-constness, r=oli-obk\n\nRetain ParamEnv constness when running deferred cast checks\n\nFixes #103677.", "tree": {"sha": "d6b77aaa61b3e1cbda708ef6fce2384e7d281782", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d6b77aaa61b3e1cbda708ef6fce2384e7d281782"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9565dfeb4e6225177bbe78f18cd48a7982f34401", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9565dfeb4e6225177bbe78f18cd48a7982f34401", "html_url": "https://github.com/rust-lang/rust/commit/9565dfeb4e6225177bbe78f18cd48a7982f34401", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9565dfeb4e6225177bbe78f18cd48a7982f34401/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77e7b74ad5c0c449fa378faf5edf33dd2e6fed87", "url": "https://api.github.com/repos/rust-lang/rust/commits/77e7b74ad5c0c449fa378faf5edf33dd2e6fed87", "html_url": "https://github.com/rust-lang/rust/commit/77e7b74ad5c0c449fa378faf5edf33dd2e6fed87"}, {"sha": "a990b4c1d04921e346a8d56c0f0efed0121b4bce", "url": "https://api.github.com/repos/rust-lang/rust/commits/a990b4c1d04921e346a8d56c0f0efed0121b4bce", "html_url": "https://github.com/rust-lang/rust/commit/a990b4c1d04921e346a8d56c0f0efed0121b4bce"}], "stats": {"total": 38, "additions": 33, "deletions": 5}, "files": [{"sha": "60157c3b9abe0f4c4fa7b24ca10d612185de8fb6", "filename": "compiler/rustc_hir_typeck/src/cast.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9565dfeb4e6225177bbe78f18cd48a7982f34401/compiler%2Frustc_hir_typeck%2Fsrc%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9565dfeb4e6225177bbe78f18cd48a7982f34401/compiler%2Frustc_hir_typeck%2Fsrc%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcast.rs?ref=9565dfeb4e6225177bbe78f18cd48a7982f34401", "patch": "@@ -60,6 +60,8 @@ pub struct CastCheck<'tcx> {\n     cast_ty: Ty<'tcx>,\n     cast_span: Span,\n     span: Span,\n+    /// whether the cast is made in a const context or not.\n+    pub constness: hir::Constness,\n }\n \n /// The kind of pointer and associated metadata (thin, length or vtable) - we\n@@ -210,9 +212,10 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n         cast_ty: Ty<'tcx>,\n         cast_span: Span,\n         span: Span,\n+        constness: hir::Constness,\n     ) -> Result<CastCheck<'tcx>, ErrorGuaranteed> {\n         let expr_span = expr.span.find_ancestor_inside(span).unwrap_or(expr.span);\n-        let check = CastCheck { expr, expr_ty, expr_span, cast_ty, cast_span, span };\n+        let check = CastCheck { expr, expr_ty, expr_span, cast_ty, cast_span, span, constness };\n \n         // For better error messages, check for some obviously unsized\n         // cases now. We do a more thorough check at the end, once"}, {"sha": "9fde62a81a1a666704152916dd50dcd36a8a2c94", "filename": "compiler/rustc_hir_typeck/src/expr.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9565dfeb4e6225177bbe78f18cd48a7982f34401/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9565dfeb4e6225177bbe78f18cd48a7982f34401/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs?ref=9565dfeb4e6225177bbe78f18cd48a7982f34401", "patch": "@@ -1272,7 +1272,15 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         } else {\n             // Defer other checks until we're done type checking.\n             let mut deferred_cast_checks = self.deferred_cast_checks.borrow_mut();\n-            match cast::CastCheck::new(self, e, t_expr, t_cast, t.span, expr.span) {\n+            match cast::CastCheck::new(\n+                self,\n+                e,\n+                t_expr,\n+                t_cast,\n+                t.span,\n+                expr.span,\n+                self.param_env.constness(),\n+            ) {\n                 Ok(cast_check) => {\n                     debug!(\n                         \"check_expr_cast: deferring cast from {:?} to {:?}: {:?}\","}, {"sha": "8e0fcb56c7f37155dc714fe0afc0117a6f5e794f", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/checks.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9565dfeb4e6225177bbe78f18cd48a7982f34401/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9565dfeb4e6225177bbe78f18cd48a7982f34401/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs?ref=9565dfeb4e6225177bbe78f18cd48a7982f34401", "patch": "@@ -33,16 +33,27 @@ use rustc_span::{self, sym, Span};\n use rustc_trait_selection::traits::{self, ObligationCauseCode, SelectionContext};\n \n use std::iter;\n+use std::mem;\n use std::ops::ControlFlow;\n use std::slice;\n \n impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n-    pub(in super::super) fn check_casts(&self) {\n-        let mut deferred_cast_checks = self.deferred_cast_checks.borrow_mut();\n+    pub(in super::super) fn check_casts(&mut self) {\n+        // don't hold the borrow to deferred_cast_checks while checking to avoid borrow checker errors\n+        // when writing to `self.param_env`.\n+        let mut deferred_cast_checks = mem::take(&mut *self.deferred_cast_checks.borrow_mut());\n+\n         debug!(\"FnCtxt::check_casts: {} deferred checks\", deferred_cast_checks.len());\n         for cast in deferred_cast_checks.drain(..) {\n+            let prev_env = self.param_env;\n+            self.param_env = self.param_env.with_constness(cast.constness);\n+\n             cast.check(self);\n+\n+            self.param_env = prev_env;\n         }\n+\n+        *self.deferred_cast_checks.borrow_mut() = deferred_cast_checks;\n     }\n \n     pub(in super::super) fn check_transmutes(&self) {"}, {"sha": "d81724a3685ae0e23555e65c3b85e918e3a1d670", "filename": "src/test/ui/rfc-2632-const-trait-impl/issue-103677.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9565dfeb4e6225177bbe78f18cd48a7982f34401/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fissue-103677.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9565dfeb4e6225177bbe78f18cd48a7982f34401/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fissue-103677.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fissue-103677.rs?ref=9565dfeb4e6225177bbe78f18cd48a7982f34401", "patch": "@@ -0,0 +1,5 @@\n+// check-pass\n+\n+const _: fn(&String) = |s| { &*s as &str; };\n+\n+fn main() {}"}, {"sha": "641cdf5d330e1a21e13b2a1205e33a97fc6eac6e", "filename": "src/tools/clippy/clippy_lints/src/transmute/utils.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9565dfeb4e6225177bbe78f18cd48a7982f34401/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftransmute%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9565dfeb4e6225177bbe78f18cd48a7982f34401/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftransmute%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftransmute%2Futils.rs?ref=9565dfeb4e6225177bbe78f18cd48a7982f34401", "patch": "@@ -3,6 +3,7 @@ use rustc_hir_typeck::{cast, FnCtxt, Inherited};\n use rustc_lint::LateContext;\n use rustc_middle::ty::{cast::CastKind, Ty};\n use rustc_span::DUMMY_SP;\n+use rustc_hir as hir;\n \n // check if the component types of the transmuted collection and the result have different ABI,\n // size or alignment\n@@ -56,7 +57,7 @@ fn check_cast<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>, from_ty: Ty<'tcx>\n         if let Ok(check) = cast::CastCheck::new(\n             &fn_ctxt, e, from_ty, to_ty,\n             // We won't show any error to the user, so we don't care what the span is here.\n-            DUMMY_SP, DUMMY_SP,\n+            DUMMY_SP, DUMMY_SP, hir::Constness::NotConst,\n         ) {\n             let res = check.do_check(&fn_ctxt);\n "}]}