{"sha": "955e0f42fc098430293ffa6acba61db135114e81", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1NWUwZjQyZmMwOTg0MzAyOTNmZmE2YWNiYTYxZGIxMzUxMTRlODE=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-05-27T01:02:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-05-27T01:02:11Z"}, "message": "Rollup merge of #85719 - elichai:cstring-into_inner-inline, r=m-ou-se\n\nAdd inline attr to CString::into_inner so it can optimize out NonNull checks\n\nIt seems that currently if you convert any of the standard library's container to a pointer and then to a NonNull pointer, all will optimize out the NULL check except `CString`(https://godbolt.org/z/YPKW9G5xn),\nbecause for some reason `CString::into_inner` isn't inlined even though it's a private function that should compile into a simple `mov` instruction.\n\nAdding a simple `#[inline]` attribute solves this, code example:\n```rust\nuse std::ffi::CString;\nuse std::ptr::NonNull;\n\npub fn cstring_nonull(mut n: CString) -> NonNull<i8> {\n    NonNull::new(CString::into_raw(n)).unwrap()\n}\n```\n\nassembly before:\n```asm\n__ZN3wat14cstring_nonull17h371c755bcad76294E:\n\t.cfi_startproc\n\tpushq\t%rbp\n\t.cfi_def_cfa_offset 16\n\t.cfi_offset %rbp, -16\n\tmovq\t%rsp, %rbp\n\t.cfi_def_cfa_register %rbp\n\tcallq\t__ZN3std3ffi5c_str7CString10into_inner17h28ece07b276e2878E\n\ttestq\t%rax, %rax\n\tje\tLBB0_2\n\tpopq\t%rbp\n\tretq\nLBB0_2:\n\tleaq\tl___unnamed_1(%rip), %rdi\n\tleaq\tl___unnamed_2(%rip), %rdx\n\tmovl\t$43, %esi\n\tcallq\t__ZN4core9panicking5panic17h92a83fa9085a8f73E\n\t.cfi_endproc\n\n\t.section\t__TEXT,__const\nl___unnamed_1:\n\t.ascii\t\"called `Option::unwrap()` on a `None` value\"\n\nl___unnamed_3:\n\t.ascii\t\"wat.rs\"\n\n\t.section\t__DATA,__const\n\t.p2align\t3\nl___unnamed_2:\n\t.quad\tl___unnamed_3\n\t.asciz\t\"\\006\\000\\000\\000\\000\\000\\000\\000\\006\\000\\000\\000(\\000\\000\"\n```\n\nAssembly after:\n```asm\n__ZN3wat14cstring_nonull17h9645eb9341fb25d7E:\n\t.cfi_startproc\n\tpushq\t%rbp\n\t.cfi_def_cfa_offset 16\n\t.cfi_offset %rbp, -16\n\tmovq\t%rsp, %rbp\n\t.cfi_def_cfa_register %rbp\n\tmovq\t%rdi, %rax\n\tpopq\t%rbp\n\tretq\n\t.cfi_endproc\n```\n\n(Related discussion on zulip: https://rust-lang.zulipchat.com/#narrow/stream/219381-t-libs/topic/NonNull.20From.3CBox.3CT.3E.3E)", "tree": {"sha": "a419ad1e5da5b748d0c234852b03144ebe9173db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a419ad1e5da5b748d0c234852b03144ebe9173db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/955e0f42fc098430293ffa6acba61db135114e81", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgru+TCRBK7hj4Ov3rIwAAnmEIALNVKa1hPcfmEDr0F+QGTPp1\nbf+SYhpSwmCte8NeHWvcRHsGjs6nGh6jb87s2J/mW5cEGBBYLXCd7u87SwQBjTao\nV7n6FO6DfToZLSF8iwN/nNegvcZ3IQ7ZJ+pyNt52Jh1ghq+EkpEKKqSRKkb1SxnI\nqWa5YHmOwzGHvhbkxmZqy7UIhuLr2uUUyvK/4Dfz5d8zrZ6YPew82AmsPDE6AH+G\n8m7X6vmhOPIVK0bzJ5vQnxgjK+RnVUPw5JjfNH08t8JBi/TLgjZilHozhBaIvRVq\n5YdVGoRL6JVcwqsT7DFFqRewt2pCXTGmR81ufSt/CzjQ74SJJGlz/0dXhw0Ktg4=\n=7VWE\n-----END PGP SIGNATURE-----\n", "payload": "tree a419ad1e5da5b748d0c234852b03144ebe9173db\nparent de1d7dbd0fad3da8c783fcbef742df3e60409bb7\nparent 45099e6cf6d44bb9cefdda42823794fab2df2703\nauthor Dylan DPC <dylan.dpc@gmail.com> 1622077331 +0200\ncommitter GitHub <noreply@github.com> 1622077331 +0200\n\nRollup merge of #85719 - elichai:cstring-into_inner-inline, r=m-ou-se\n\nAdd inline attr to CString::into_inner so it can optimize out NonNull checks\n\nIt seems that currently if you convert any of the standard library's container to a pointer and then to a NonNull pointer, all will optimize out the NULL check except `CString`(https://godbolt.org/z/YPKW9G5xn),\nbecause for some reason `CString::into_inner` isn't inlined even though it's a private function that should compile into a simple `mov` instruction.\n\nAdding a simple `#[inline]` attribute solves this, code example:\n```rust\nuse std::ffi::CString;\nuse std::ptr::NonNull;\n\npub fn cstring_nonull(mut n: CString) -> NonNull<i8> {\n    NonNull::new(CString::into_raw(n)).unwrap()\n}\n```\n\nassembly before:\n```asm\n__ZN3wat14cstring_nonull17h371c755bcad76294E:\n\t.cfi_startproc\n\tpushq\t%rbp\n\t.cfi_def_cfa_offset 16\n\t.cfi_offset %rbp, -16\n\tmovq\t%rsp, %rbp\n\t.cfi_def_cfa_register %rbp\n\tcallq\t__ZN3std3ffi5c_str7CString10into_inner17h28ece07b276e2878E\n\ttestq\t%rax, %rax\n\tje\tLBB0_2\n\tpopq\t%rbp\n\tretq\nLBB0_2:\n\tleaq\tl___unnamed_1(%rip), %rdi\n\tleaq\tl___unnamed_2(%rip), %rdx\n\tmovl\t$43, %esi\n\tcallq\t__ZN4core9panicking5panic17h92a83fa9085a8f73E\n\t.cfi_endproc\n\n\t.section\t__TEXT,__const\nl___unnamed_1:\n\t.ascii\t\"called `Option::unwrap()` on a `None` value\"\n\nl___unnamed_3:\n\t.ascii\t\"wat.rs\"\n\n\t.section\t__DATA,__const\n\t.p2align\t3\nl___unnamed_2:\n\t.quad\tl___unnamed_3\n\t.asciz\t\"\\006\\000\\000\\000\\000\\000\\000\\000\\006\\000\\000\\000(\\000\\000\"\n```\n\nAssembly after:\n```asm\n__ZN3wat14cstring_nonull17h9645eb9341fb25d7E:\n\t.cfi_startproc\n\tpushq\t%rbp\n\t.cfi_def_cfa_offset 16\n\t.cfi_offset %rbp, -16\n\tmovq\t%rsp, %rbp\n\t.cfi_def_cfa_register %rbp\n\tmovq\t%rdi, %rax\n\tpopq\t%rbp\n\tretq\n\t.cfi_endproc\n```\n\n(Related discussion on zulip: https://rust-lang.zulipchat.com/#narrow/stream/219381-t-libs/topic/NonNull.20From.3CBox.3CT.3E.3E)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/955e0f42fc098430293ffa6acba61db135114e81", "html_url": "https://github.com/rust-lang/rust/commit/955e0f42fc098430293ffa6acba61db135114e81", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/955e0f42fc098430293ffa6acba61db135114e81/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de1d7dbd0fad3da8c783fcbef742df3e60409bb7", "url": "https://api.github.com/repos/rust-lang/rust/commits/de1d7dbd0fad3da8c783fcbef742df3e60409bb7", "html_url": "https://github.com/rust-lang/rust/commit/de1d7dbd0fad3da8c783fcbef742df3e60409bb7"}, {"sha": "45099e6cf6d44bb9cefdda42823794fab2df2703", "url": "https://api.github.com/repos/rust-lang/rust/commits/45099e6cf6d44bb9cefdda42823794fab2df2703", "html_url": "https://github.com/rust-lang/rust/commit/45099e6cf6d44bb9cefdda42823794fab2df2703"}], "stats": {"total": 1, "additions": 1, "deletions": 0}, "files": [{"sha": "be7e099b73a24f325c49243ba2f14d71b55d1fb3", "filename": "library/std/src/ffi/c_str.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/955e0f42fc098430293ffa6acba61db135114e81/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/955e0f42fc098430293ffa6acba61db135114e81/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs?ref=955e0f42fc098430293ffa6acba61db135114e81", "patch": "@@ -672,6 +672,7 @@ impl CString {\n     }\n \n     /// Bypass \"move out of struct which implements [`Drop`] trait\" restriction.\n+    #[inline]\n     fn into_inner(self) -> Box<[u8]> {\n         // Rationale: `mem::forget(self)` invalidates the previous call to `ptr::read(&self.inner)`\n         // so we use `ManuallyDrop` to ensure `self` is not dropped."}]}