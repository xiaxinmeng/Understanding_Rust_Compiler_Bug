{"sha": "408a086f97992f4b035e20303242c527e32b2491", "node_id": "C_kwDOAAsO6NoAKDQwOGEwODZmOTc5OTJmNGIwMzVlMjAzMDMyNDJjNTI3ZTMyYjI0OTE", "commit": {"author": {"name": "Ellen", "email": "supbscripter@gmail.com", "date": "2022-01-12T23:38:32Z"}, "committer": {"name": "Ellen", "email": "supbscripter@gmail.com", "date": "2022-01-15T01:16:55Z"}, "message": "unrevert # 88557", "tree": {"sha": "b1ec0d3ab89e5f36492f0a65c00b04bc1fbe245b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b1ec0d3ab89e5f36492f0a65c00b04bc1fbe245b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/408a086f97992f4b035e20303242c527e32b2491", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/408a086f97992f4b035e20303242c527e32b2491", "html_url": "https://github.com/rust-lang/rust/commit/408a086f97992f4b035e20303242c527e32b2491", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/408a086f97992f4b035e20303242c527e32b2491/comments", "author": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "committer": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dec8ed438c530a3b722a5ee881c9fef180cc97b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/dec8ed438c530a3b722a5ee881c9fef180cc97b1", "html_url": "https://github.com/rust-lang/rust/commit/dec8ed438c530a3b722a5ee881c9fef180cc97b1"}], "stats": {"total": 33, "additions": 5, "deletions": 28}, "files": [{"sha": "185d64eab707ac4c99222ded595518d8dff9309a", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 5, "deletions": 28, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/408a086f97992f4b035e20303242c527e32b2491/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/408a086f97992f4b035e20303242c527e32b2491/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=408a086f97992f4b035e20303242c527e32b2491", "patch": "@@ -813,9 +813,10 @@ fn contains_illegal_self_type_reference<'tcx, T: TypeFoldable<'tcx>>(\n             }\n         }\n \n-        fn visit_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n-            self.visit_ty(ct.ty)?;\n-\n+        fn visit_unevaluated_const(\n+            &mut self,\n+            uv: ty::Unevaluated<'tcx>,\n+        ) -> ControlFlow<Self::BreakTy> {\n             // Constants can only influence object safety if they reference `Self`.\n             // This is only possible for unevaluated constants, so we walk these here.\n             //\n@@ -829,7 +830,7 @@ fn contains_illegal_self_type_reference<'tcx, T: TypeFoldable<'tcx>>(\n             // This shouldn't really matter though as we can't really use any\n             // constants which are not considered const evaluatable.\n             use rustc_middle::thir::abstract_const::Node;\n-            if let Ok(Some(ct)) = AbstractConst::from_const(self.tcx, ct) {\n+            if let Ok(Some(ct)) = AbstractConst::new(self.tcx, uv.shrink()) {\n                 const_evaluatable::walk_abstract_const(self.tcx, ct, |node| {\n                     match node.root(self.tcx) {\n                         Node::Leaf(leaf) => self.visit_const(leaf),\n@@ -843,30 +844,6 @@ fn contains_illegal_self_type_reference<'tcx, T: TypeFoldable<'tcx>>(\n                 ControlFlow::CONTINUE\n             }\n         }\n-\n-        fn visit_predicate(&mut self, pred: ty::Predicate<'tcx>) -> ControlFlow<Self::BreakTy> {\n-            if let ty::PredicateKind::ConstEvaluatable(uv) = pred.kind().skip_binder() {\n-                // FIXME(generic_const_exprs): We should probably deduplicate the logic for\n-                // `AbstractConst`s here, it might make sense to change `ConstEvaluatable` to\n-                // take a `ty::Const` instead.\n-                use rustc_middle::thir::abstract_const::Node;\n-                if let Ok(Some(ct)) = AbstractConst::new(self.tcx, uv) {\n-                    const_evaluatable::walk_abstract_const(self.tcx, ct, |node| {\n-                        match node.root(self.tcx) {\n-                            Node::Leaf(leaf) => self.visit_const(leaf),\n-                            Node::Cast(_, _, ty) => self.visit_ty(ty),\n-                            Node::Binop(..) | Node::UnaryOp(..) | Node::FunctionCall(_, _) => {\n-                                ControlFlow::CONTINUE\n-                            }\n-                        }\n-                    })\n-                } else {\n-                    ControlFlow::CONTINUE\n-                }\n-            } else {\n-                pred.super_visit_with(self)\n-            }\n-        }\n     }\n \n     value"}]}