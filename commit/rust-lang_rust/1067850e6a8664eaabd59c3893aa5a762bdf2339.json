{"sha": "1067850e6a8664eaabd59c3893aa5a762bdf2339", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwNjc4NTBlNmE4NjY0ZWFhYmQ1OWMzODkzYWE1YTc2MmJkZjIzMzk=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-04-21T00:00:25Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-05-02T15:49:24Z"}, "message": "refactor the Emitter trait\n\nThere is now a CoreEmitter that everything desugars to, but without\nlosing any information. Also remove RenderSpan::FileLine. This lets the\nrustc_driver tests build.", "tree": {"sha": "5fc2c3e18e724dcad3ecd8e0817c56f9640cc6bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5fc2c3e18e724dcad3ecd8e0817c56f9640cc6bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1067850e6a8664eaabd59c3893aa5a762bdf2339", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1067850e6a8664eaabd59c3893aa5a762bdf2339", "html_url": "https://github.com/rust-lang/rust/commit/1067850e6a8664eaabd59c3893aa5a762bdf2339", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1067850e6a8664eaabd59c3893aa5a762bdf2339/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d022f299359c341d2f57ab5425855556fc83937", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d022f299359c341d2f57ab5425855556fc83937", "html_url": "https://github.com/rust-lang/rust/commit/9d022f299359c341d2f57ab5425855556fc83937"}], "stats": {"total": 205, "additions": 92, "deletions": 113}, "files": [{"sha": "f2448d50b22bc1b04bc4d79679735e3f8b799ba4", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1067850e6a8664eaabd59c3893aa5a762bdf2339/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1067850e6a8664eaabd59c3893aa5a762bdf2339/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=1067850e6a8664eaabd59c3893aa5a762bdf2339", "patch": "@@ -34,9 +34,9 @@ use std::cell::RefCell;\n use std::rc::Rc;\n use syntax::ast;\n use syntax::abi::Abi;\n-use syntax::codemap::{MultiSpan, CodeMap, DUMMY_SP};\n+use syntax::codemap::{CodeMap, DUMMY_SP};\n use syntax::errors;\n-use syntax::errors::emitter::Emitter;\n+use syntax::errors::emitter::{CoreEmitter, Emitter};\n use syntax::errors::{Level, RenderSpan};\n use syntax::parse::token;\n use syntax::feature_gate::UnstableFeatures;\n@@ -78,12 +78,13 @@ fn remove_message(e: &mut ExpectErrorEmitter, msg: &str, lvl: Level) {\n     }\n }\n \n-impl Emitter for ExpectErrorEmitter {\n-    fn emit(&mut self,\n-            _sp: Option<&MultiSpan>,\n-            msg: &str,\n-            _: Option<&str>,\n-            lvl: Level) {\n+impl CoreEmitter for ExpectErrorEmitter {\n+    fn emit_message(&mut self,\n+                    _sp: &RenderSpan,\n+                    msg: &str,\n+                    _: Option<&str>,\n+                    lvl: Level,\n+                    _is_header: bool) {\n         remove_message(self, msg, lvl);\n     }\n }"}, {"sha": "a35048f89c114ec4b5bf68e36c9b6f8f090d4871", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1067850e6a8664eaabd59c3893aa5a762bdf2339/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1067850e6a8664eaabd59c3893aa5a762bdf2339/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=1067850e6a8664eaabd59c3893aa5a762bdf2339", "patch": "@@ -20,8 +20,8 @@ use {CrateTranslation, ModuleTranslation};\n use util::common::time;\n use util::common::path2cstr;\n use syntax::codemap::MultiSpan;\n-use syntax::errors::{self, Handler, Level};\n-use syntax::errors::emitter::RudimentaryEmitter;\n+use syntax::errors::{self, Handler, Level, RenderSpan};\n+use syntax::errors::emitter::CoreEmitter;\n \n use std::collections::HashMap;\n use std::ffi::{CStr, CString};\n@@ -100,11 +100,13 @@ impl SharedEmitter {\n     }\n }\n \n-impl RudimentaryEmitter for SharedEmitter {\n-    fn emit_rudimentary(&mut self,\n-                        msg: &str,\n-                        code: Option<&str>,\n-                        lvl: Level) {\n+impl CoreEmitter for SharedEmitter {\n+    fn emit_message(&mut self,\n+                    _rsp: &RenderSpan,\n+                    msg: &str,\n+                    code: Option<&str>,\n+                    lvl: Level,\n+                    _is_header: bool) {\n         self.buffer.lock().unwrap().push(Diagnostic {\n             msg: msg.to_string(),\n             code: code.map(|s| s.to_string()),"}, {"sha": "2b29de7fd7135eb278c4a8cdb7c9f4ce0c4e4be9", "filename": "src/libsyntax/errors/emitter.rs", "status": "modified", "additions": 73, "deletions": 90, "changes": 163, "blob_url": "https://github.com/rust-lang/rust/blob/1067850e6a8664eaabd59c3893aa5a762bdf2339/src%2Flibsyntax%2Ferrors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1067850e6a8664eaabd59c3893aa5a762bdf2339/src%2Flibsyntax%2Ferrors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ferrors%2Femitter.rs?ref=1067850e6a8664eaabd59c3893aa5a762bdf2339", "patch": "@@ -24,6 +24,8 @@ use std::io;\n use std::rc::Rc;\n use term;\n \n+/// Emitter trait for emitting errors. Do not implement this directly:\n+/// implement `CoreEmitter` instead.\n pub trait Emitter {\n     /// Emit a standalone diagnostic message.\n     fn emit(&mut self, span: &MultiSpan, msg: &str, code: Option<&str>, lvl: Level);\n@@ -32,27 +34,44 @@ pub trait Emitter {\n     fn emit_struct(&mut self, db: &DiagnosticBuilder);\n }\n \n-/// A core trait that can only handle very simple messages: those\n-/// without spans or any real structure. Used only in specific contexts.\n-pub trait RudimentaryEmitter {\n-    fn emit_rudimentary(&mut self, msg: &str, code: Option<&str>, lvl: Level);\n+pub trait CoreEmitter {\n+    fn emit_message(&mut self,\n+                    rsp: &RenderSpan,\n+                    msg: &str,\n+                    code: Option<&str>,\n+                    lvl: Level,\n+                    is_header: bool);\n }\n \n-impl<T: RudimentaryEmitter> Emitter for T {\n+impl<T: CoreEmitter> Emitter for T {\n     fn emit(&mut self,\n             msp: &MultiSpan,\n             msg: &str,\n             code: Option<&str>,\n             lvl: Level) {\n-        assert!(msp.primary_span().is_none(), \"Rudimenatry emitters can't handle spans\");\n-        self.emit_rudimentary(msg, code, lvl);\n+        self.emit_message(&FullSpan(msp.clone()),\n+                          msg,\n+                          code,\n+                          lvl,\n+                          true);\n     }\n \n     fn emit_struct(&mut self, db: &DiagnosticBuilder) {\n-        self.emit(&db.span, &db.message, db.code.as_ref().map(|s| &**s), db.level);\n+        self.emit_message(&FullSpan(db.span.clone()),\n+                          &db.message,\n+                          db.code.as_ref().map(|s| &**s),\n+                          db.level,\n+                          true);\n         for child in &db.children {\n-            assert!(child.render_span.is_none(), \"Rudimentary emitters can't handle render spans\");\n-            self.emit(&child.span, &child.message, None, child.level);\n+            let render_span = child.render_span\n+                                   .clone()\n+                                   .unwrap_or_else(\n+                                       || FullSpan(child.span.clone()));\n+            self.emit_message(&render_span,\n+                              &child.message,\n+                              None,\n+                              child.level,\n+                              false);\n         }\n     }\n }\n@@ -83,11 +102,14 @@ pub struct BasicEmitter {\n     dst: Destination,\n }\n \n-impl RudimentaryEmitter for BasicEmitter {\n-    fn emit_rudimentary(&mut self,\n-                        msg: &str,\n-                        code: Option<&str>,\n-                        lvl: Level) {\n+impl CoreEmitter for BasicEmitter {\n+    fn emit_message(&mut self,\n+                    _rsp: &RenderSpan,\n+                    msg: &str,\n+                    code: Option<&str>,\n+                    lvl: Level,\n+                    _is_header: bool) {\n+        // we ignore the span as we have no access to a codemap at this point\n         if let Err(e) = print_diagnostic(&mut self.dst, \"\", lvl, msg, code) {\n             panic!(\"failed to print diagnostics: {:?}\", e);\n         }\n@@ -112,28 +134,16 @@ pub struct EmitterWriter {\n     first: bool,\n }\n \n-impl Emitter for EmitterWriter {\n-    fn emit(&mut self,\n-            msp: &MultiSpan,\n-            msg: &str,\n-            code: Option<&str>,\n-            lvl: Level) {\n-        self.emit_multispan(msp, msg, code, lvl, true);\n-    }\n-\n-    fn emit_struct(&mut self, db: &DiagnosticBuilder) {\n-        self.emit_multispan(&db.span, &db.message,\n-            db.code.as_ref().map(|s| &**s), db.level, true);\n-\n-        for child in &db.children {\n-            match child.render_span {\n-                Some(ref sp) =>\n-                    self.emit_renderspan(sp, &child.message,\n-                        child.level),\n-                None =>\n-                    self.emit_multispan(&child.span,\n-                        &child.message, None, child.level, false),\n-            }\n+impl CoreEmitter for EmitterWriter {\n+    fn emit_message(&mut self,\n+                    rsp: &RenderSpan,\n+                    msg: &str,\n+                    code: Option<&str>,\n+                    lvl: Level,\n+                    is_header: bool) {\n+        match self.emit_message_(rsp, msg, code, lvl, is_header) {\n+            Ok(()) => { }\n+            Err(e) => panic!(\"failed to emit error: {}\", e)\n         }\n     }\n }\n@@ -173,83 +183,56 @@ impl EmitterWriter {\n         EmitterWriter { dst: Raw(dst), registry: registry, cm: code_map, first: true }\n     }\n \n-    fn emit_multispan(&mut self,\n-                      span: &MultiSpan,\n-                      msg: &str,\n-                      code: Option<&str>,\n-                      lvl: Level,\n-                      is_header: bool) {\n+    fn emit_message_(&mut self,\n+                     rsp: &RenderSpan,\n+                     msg: &str,\n+                     code: Option<&str>,\n+                     lvl: Level,\n+                     is_header: bool)\n+                     -> io::Result<()> {\n         if is_header {\n             if self.first {\n                 self.first = false;\n             } else {\n-                match write!(self.dst, \"\\n\") {\n-                    Ok(_) => { }\n-                    Err(e) => {\n-                        panic!(\"failed to print diagnostics: {:?}\", e)\n-                    }\n-                }\n+                write!(self.dst, \"\\n\")?;\n             }\n         }\n \n-        let error = match span.primary_span() {\n-            Some(COMMAND_LINE_SP) => {\n-                self.emit_(&FileLine(span.clone()), msg, code, lvl)\n-            }\n-            Some(DUMMY_SP) | None => {\n-                print_diagnostic(&mut self.dst, \"\", lvl, msg, code)\n-            }\n-            Some(_) => {\n-                self.emit_(&FullSpan(span.clone()), msg, code, lvl)\n-            }\n-        };\n-\n-        if let Err(e) = error {\n-            panic!(\"failed to print diagnostics: {:?}\", e);\n-        }\n-    }\n-\n-    fn emit_renderspan(&mut self, sp: &RenderSpan, msg: &str, lvl: Level) {\n-        if let Err(e) = self.emit_(sp, msg, None, lvl) {\n-            panic!(\"failed to print diagnostics: {:?}\", e);\n-        }\n-    }\n-\n-    fn emit_(&mut self,\n-             rsp: &RenderSpan,\n-             msg: &str,\n-             code: Option<&str>,\n-             lvl: Level)\n-             -> io::Result<()> {\n-        let msp = rsp.span();\n-        let primary_span = msp.primary_span();\n-\n         match code {\n             Some(code) if self.registry.as_ref()\n-                          .and_then(|registry| registry.find_description(code)).is_some() =>\n-            {\n+                                       .and_then(|registry| registry.find_description(code))\n+                                       .is_some() => {\n                 let code_with_explain = String::from(\"--explain \") + code;\n                 print_diagnostic(&mut self.dst, \"\", lvl, msg, Some(&code_with_explain))?\n             }\n-            _ => print_diagnostic(&mut self.dst, \"\", lvl, msg, code)?\n+            _ => {\n+                print_diagnostic(&mut self.dst, \"\", lvl, msg, code)?\n+            }\n         }\n \n+        // Watch out for various nasty special spans; don't try to\n+        // print any filename or anything for those.\n+        match rsp.span().primary_span() {\n+            Some(COMMAND_LINE_SP) | Some(DUMMY_SP) => {\n+                return Ok(());\n+            }\n+            _ => { }\n+        }\n+\n+        // Otherwise, print out the snippet etc as needed.\n         match *rsp {\n-            FullSpan(_) => {\n+            FullSpan(ref msp) => {\n                 self.highlight_lines(msp, lvl)?;\n-                if let Some(primary_span) = primary_span {\n+                if let Some(primary_span) = msp.primary_span() {\n                     self.print_macro_backtrace(primary_span)?;\n                 }\n             }\n             Suggestion(ref suggestion) => {\n                 self.highlight_suggestion(suggestion)?;\n-                if let Some(primary_span) = primary_span {\n+                if let Some(primary_span) = rsp.span().primary_span() {\n                     self.print_macro_backtrace(primary_span)?;\n                 }\n             }\n-            FileLine(..) => {\n-                // no source text in this case!\n-            }\n         }\n \n         Ok(())"}, {"sha": "93c6268ccaea15ecc35661c747b1bfa6aa126258", "filename": "src/libsyntax/errors/json.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1067850e6a8664eaabd59c3893aa5a762bdf2339/src%2Flibsyntax%2Ferrors%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1067850e6a8664eaabd59c3893aa5a762bdf2339/src%2Flibsyntax%2Ferrors%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ferrors%2Fjson.rs?ref=1067850e6a8664eaabd59c3893aa5a762bdf2339", "patch": "@@ -294,7 +294,6 @@ impl DiagnosticSpan {\n \n     fn from_render_span(rsp: &RenderSpan, je: &JsonEmitter) -> Vec<DiagnosticSpan> {\n         match *rsp {\n-            RenderSpan::FileLine(ref msp) |\n             RenderSpan::FullSpan(ref msp) =>\n                 DiagnosticSpan::from_multispan(msp, je),\n             RenderSpan::Suggestion(ref suggestion) =>\n@@ -356,7 +355,6 @@ impl DiagnosticCode {\n impl JsonEmitter {\n     fn render(&self, render_span: &RenderSpan) -> Option<String> {\n         match *render_span {\n-            RenderSpan::FileLine(_) |\n             RenderSpan::FullSpan(_) => {\n                 None\n             }"}, {"sha": "d533ffb981a6b913c0cd81f645e5156a0cf5c408", "filename": "src/libsyntax/errors/mod.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1067850e6a8664eaabd59c3893aa5a762bdf2339/src%2Flibsyntax%2Ferrors%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1067850e6a8664eaabd59c3893aa5a762bdf2339/src%2Flibsyntax%2Ferrors%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ferrors%2Fmod.rs?ref=1067850e6a8664eaabd59c3893aa5a762bdf2339", "patch": "@@ -38,10 +38,6 @@ pub enum RenderSpan {\n     /// of hypothetical source code, where each `String` is spliced\n     /// into the lines in place of the code covered by each span.\n     Suggestion(CodeSuggestion),\n-\n-    /// A FileLine renders with just a line for the message prefixed\n-    /// by file:linenum.\n-    FileLine(MultiSpan),\n }\n \n #[derive(Clone)]\n@@ -54,8 +50,7 @@ impl RenderSpan {\n     fn span(&self) -> &MultiSpan {\n         match *self {\n             FullSpan(ref msp) |\n-            Suggestion(CodeSuggestion { ref msp, .. }) |\n-            FileLine(ref msp) =>\n+            Suggestion(CodeSuggestion { ref msp, .. }) =>\n                 msp\n         }\n     }"}]}