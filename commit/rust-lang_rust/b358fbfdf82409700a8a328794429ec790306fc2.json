{"sha": "b358fbfdf82409700a8a328794429ec790306fc2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzNThmYmZkZjgyNDA5NzAwYThhMzI4Nzk0NDI5ZWM3OTAzMDZmYzI=", "commit": {"author": {"name": "Paul Daniel Faria", "email": "Nashenas88@users.noreply.github.com", "date": "2020-05-24T06:10:34Z"}, "committer": {"name": "Paul Daniel Faria", "email": "Nashenas88@users.noreply.github.com", "date": "2020-06-27T14:09:29Z"}, "message": "Add tests covering unsafe blocks, more attempts to get call expr tests passing", "tree": {"sha": "c21ff40842d2141f2b3043d3ccef9e9222157ed8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c21ff40842d2141f2b3043d3ccef9e9222157ed8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b358fbfdf82409700a8a328794429ec790306fc2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b358fbfdf82409700a8a328794429ec790306fc2", "html_url": "https://github.com/rust-lang/rust/commit/b358fbfdf82409700a8a328794429ec790306fc2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b358fbfdf82409700a8a328794429ec790306fc2/comments", "author": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "daf1cac9f87023d37a4418ea24ed615c9706258b", "url": "https://api.github.com/repos/rust-lang/rust/commits/daf1cac9f87023d37a4418ea24ed615c9706258b", "html_url": "https://github.com/rust-lang/rust/commit/daf1cac9f87023d37a4418ea24ed615c9706258b"}], "stats": {"total": 87, "additions": 86, "deletions": 1}, "files": [{"sha": "04668f486c95d36d414955c14114ab22f3b7f828", "filename": "crates/ra_hir_ty/src/expr.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b358fbfdf82409700a8a328794429ec790306fc2/crates%2Fra_hir_ty%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b358fbfdf82409700a8a328794429ec790306fc2/crates%2Fra_hir_ty%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fexpr.rs?ref=b358fbfdf82409700a8a328794429ec790306fc2", "patch": "@@ -329,13 +329,28 @@ pub fn unsafe_expressions(\n         match expr {\n             Expr::Call { callee, .. } => {\n                 if infer\n-                    .method_resolution(*callee)\n+                    .method_resolution(/* id */ *callee)\n                     .map(|func| db.function_data(func).is_unsafe)\n                     .unwrap_or(false)\n                 {\n                     unsafe_expr_ids.push(id);\n                 }\n             }\n+            Expr::MethodCall {/*_receiver, method_name,*/ .. } => {\n+                // let receiver_ty = &infer.type_of_expr[*receiver];\n+                // receiver_ty\n+                if infer\n+                    .method_resolution(id)\n+                    .map(|func| {\n+                        db.function_data(func).is_unsafe\n+                    })\n+                    .unwrap_or_else(|| {\n+                        false\n+                    })\n+                {\n+                    unsafe_expr_ids.push(id);\n+                }\n+            }\n             Expr::UnaryOp { expr, op: UnaryOp::Deref } => {\n                 if let Ty::Apply(ApplicationTy { ctor: TypeCtor::RawPtr(..), .. }) = &infer[*expr] {\n                     unsafe_expr_ids.push(id);"}, {"sha": "c1f6fbab83596ed4e47290b7ffd0abc8cb6ace0b", "filename": "crates/ra_hir_ty/src/tests.rs", "status": "modified", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/b358fbfdf82409700a8a328794429ec790306fc2/crates%2Fra_hir_ty%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b358fbfdf82409700a8a328794429ec790306fc2/crates%2Fra_hir_ty%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests.rs?ref=b358fbfdf82409700a8a328794429ec790306fc2", "patch": "@@ -602,6 +602,76 @@ fn missing_unsafe() {\n     assert_snapshot!(diagnostics, @r#\"\"fn missing_unsafe() {\\n    HasUnsafe.unsafe_fn();\\n}\": Missing unsafe keyword on fn\"#);\n }\n \n+#[test]\n+fn no_missing_unsafe_diagnostic_with_raw_ptr_in_unsafe_block() {\n+    let diagnostics = TestDB::with_files(\n+        r\"\n+//- /lib.rs\n+fn nothing_to_see_move_along() {\n+    unsafe {\n+        let x = &5 as *usize;\n+        let y = *x;\n+    }\n+}\n+\",\n+    )\n+    .diagnostics()\n+    .0;\n+\n+    assert_snapshot!(diagnostics, @\"\");\n+}\n+\n+#[test]\n+fn no_missing_unsafe_diagnostic_with_unsafe_call_in_unsafe_block() {\n+    let diagnostics = TestDB::with_files(\n+        r\"\n+//- /lib.rs\n+unsafe fn unsafe_fn() {\n+    let x = &5 as *usize;\n+    let y = *x;\n+}\n+\n+fn nothing_to_see_move_along() {\n+    unsafe {\n+        unsafe_fn();\n+    }\n+}\n+\",\n+    )\n+    .diagnostics()\n+    .0;\n+\n+    assert_snapshot!(diagnostics, @\"\");\n+}\n+\n+#[test]\n+fn no_missing_unsafe_diagnostic_with_unsafe_method_call_in_unsafe_block() {\n+    let diagnostics = TestDB::with_files(\n+        r\"\n+//- /lib.rs\n+struct HasUnsafe;\n+\n+impl HasUnsafe {\n+    unsafe fn unsafe_fn() {\n+        let x = &5 as *usize;\n+        let y = *x;\n+    }\n+}\n+\n+fn nothing_to_see_move_along() {\n+    unsafe {\n+        HasUnsafe.unsafe_fn();\n+    }\n+}\n+\n+\",\n+    )\n+    .diagnostics()\n+    .0;\n+\n+    assert_snapshot!(diagnostics, @\"\");\n+}\n+\n #[test]\n fn unnecessary_unsafe_diagnostic() {\n     let diagnostics = TestDB::with_files("}]}