{"sha": "e536e64702a12898ba7156c66de40b652ac21db1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1MzZlNjQ3MDJhMTI4OThiYTcxNTZjNjZkZTQwYjY1MmFjMjFkYjE=", "commit": {"author": {"name": "Pramod Bisht", "email": "pramodpsb@outlook.com", "date": "2018-10-02T05:51:02Z"}, "committer": {"name": "Pramod Bisht", "email": "pramodpsb@outlook.com", "date": "2018-10-02T05:51:02Z"}, "message": "Consolidate pattern check errors\n\nwe are consolidating `cannot bind by-move and by-ref in the same\npattern` message present on the different lines into single diagnostic\nmessage.\n\nTo do this, we are first gathering those spans into the vector\nafter that we are throwing them with the help of MultiSpan in\na separate block.\n\nAddresses: #53840", "tree": {"sha": "90df5bbe78b8f9fb1e936eef56991f7fa7e2a918", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/90df5bbe78b8f9fb1e936eef56991f7fa7e2a918"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e536e64702a12898ba7156c66de40b652ac21db1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e536e64702a12898ba7156c66de40b652ac21db1", "html_url": "https://github.com/rust-lang/rust/commit/e536e64702a12898ba7156c66de40b652ac21db1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e536e64702a12898ba7156c66de40b652ac21db1/comments", "author": {"login": "PramodBisht", "id": 2766842, "node_id": "MDQ6VXNlcjI3NjY4NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/2766842?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PramodBisht", "html_url": "https://github.com/PramodBisht", "followers_url": "https://api.github.com/users/PramodBisht/followers", "following_url": "https://api.github.com/users/PramodBisht/following{/other_user}", "gists_url": "https://api.github.com/users/PramodBisht/gists{/gist_id}", "starred_url": "https://api.github.com/users/PramodBisht/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PramodBisht/subscriptions", "organizations_url": "https://api.github.com/users/PramodBisht/orgs", "repos_url": "https://api.github.com/users/PramodBisht/repos", "events_url": "https://api.github.com/users/PramodBisht/events{/privacy}", "received_events_url": "https://api.github.com/users/PramodBisht/received_events", "type": "User", "site_admin": false}, "committer": {"login": "PramodBisht", "id": 2766842, "node_id": "MDQ6VXNlcjI3NjY4NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/2766842?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PramodBisht", "html_url": "https://github.com/PramodBisht", "followers_url": "https://api.github.com/users/PramodBisht/followers", "following_url": "https://api.github.com/users/PramodBisht/following{/other_user}", "gists_url": "https://api.github.com/users/PramodBisht/gists{/gist_id}", "starred_url": "https://api.github.com/users/PramodBisht/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PramodBisht/subscriptions", "organizations_url": "https://api.github.com/users/PramodBisht/orgs", "repos_url": "https://api.github.com/users/PramodBisht/repos", "events_url": "https://api.github.com/users/PramodBisht/events{/privacy}", "received_events_url": "https://api.github.com/users/PramodBisht/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de3d640f59c4fa4a09faf2a8d6b0a812aaa6d6cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/de3d640f59c4fa4a09faf2a8d6b0a812aaa6d6cb", "html_url": "https://github.com/rust-lang/rust/commit/de3d640f59c4fa4a09faf2a8d6b0a812aaa6d6cb"}], "stats": {"total": 81, "additions": 67, "deletions": 14}, "files": [{"sha": "f2ae5774da875f8eb014635cbcef5e05ba42f894", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 20, "deletions": 14, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/e536e64702a12898ba7156c66de40b652ac21db1/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e536e64702a12898ba7156c66de40b652ac21db1/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=e536e64702a12898ba7156c66de40b652ac21db1", "patch": "@@ -35,7 +35,7 @@ use std::slice;\n \n use syntax::ast;\n use syntax::ptr::P;\n-use syntax_pos::{Span, DUMMY_SP};\n+use syntax_pos::{Span, DUMMY_SP, MultiSpan};\n \n struct OuterVisitor<'a, 'tcx: 'a> { tcx: TyCtxt<'a, 'tcx, 'tcx> }\n \n@@ -527,8 +527,8 @@ fn check_legality_of_move_bindings(cx: &MatchVisitor,\n             }\n         })\n     }\n-\n-    let check_move = |p: &Pat, sub: Option<&Pat>| {\n+    let span_vec = &mut Vec::new();\n+    let check_move = |p: &Pat, sub: Option<&Pat>, span_vec: &mut Vec<Span>| {\n         // check legality of moving out of the enum\n \n         // x @ Foo(..) is legal, but x @ Foo(y) isn't.\n@@ -546,16 +546,8 @@ fn check_legality_of_move_bindings(cx: &MatchVisitor,\n                           crate attributes to enable\");\n             }\n             err.emit();\n-        } else if let Some(by_ref_span) = by_ref_span {\n-            struct_span_err!(\n-                cx.tcx.sess,\n-                p.span,\n-                E0009,\n-                \"cannot bind by-move and by-ref in the same pattern\",\n-            )\n-            .span_label(p.span, \"by-move pattern here\")\n-            .span_label(by_ref_span, \"both by-ref and by-move used\")\n-            .emit();\n+        } else if let Some(_by_ref_span) = by_ref_span {\n+            span_vec.push(p.span);\n         }\n     };\n \n@@ -567,7 +559,7 @@ fn check_legality_of_move_bindings(cx: &MatchVisitor,\n                         ty::BindByValue(..) => {\n                             let pat_ty = cx.tables.node_id_to_type(p.hir_id);\n                             if pat_ty.moves_by_default(cx.tcx, cx.param_env, pat.span) {\n-                                check_move(p, sub.as_ref().map(|p| &**p));\n+                                check_move(p, sub.as_ref().map(|p| &**p), span_vec);\n                             }\n                         }\n                         _ => {}\n@@ -579,6 +571,20 @@ fn check_legality_of_move_bindings(cx: &MatchVisitor,\n             true\n         });\n     }\n+    if !span_vec.is_empty(){\n+        let span = MultiSpan::from_spans(span_vec.clone());\n+        let mut err = struct_span_err!(\n+            cx.tcx.sess,\n+            span,\n+            E0009,\n+            \"cannot bind by-move and by-ref in the same pattern\",\n+        );\n+        err.span_label(by_ref_span.unwrap(), \"both by-ref and by-move used\");\n+        for span in span_vec.iter(){\n+            err.span_label(*span, \"by-move pattern here\");\n+        }\n+        err.emit();\n+    }\n }\n \n /// Ensures that a pattern guard doesn't borrow by mutable reference or"}, {"sha": "ece3caf78e21845dbd89f16139d60d3abc07407c", "filename": "src/test/ui/issue-53840.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e536e64702a12898ba7156c66de40b652ac21db1/src%2Ftest%2Fui%2Fissue-53840.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e536e64702a12898ba7156c66de40b652ac21db1/src%2Ftest%2Fui%2Fissue-53840.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-53840.rs?ref=e536e64702a12898ba7156c66de40b652ac21db1", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+enum E {\n+    Foo(String, String, String),\n+}\n+\n+struct Bar {\n+    a: String,\n+    b: String,\n+}\n+\n+fn main() {\n+    let bar = Bar { a: \"1\".to_string(), b: \"2\".to_string() };\n+    match E::Foo(\"\".into(), \"\".into(), \"\".into()) {\n+        E::Foo(a, b, ref c) => {}\n+    }\n+    match bar {\n+        Bar {a, ref b} => {}\n+    }\n+}"}, {"sha": "961e4c0ff6286ab907d0b02d901b7e76105ff757", "filename": "src/test/ui/issue-53840.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e536e64702a12898ba7156c66de40b652ac21db1/src%2Ftest%2Fui%2Fissue-53840.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e536e64702a12898ba7156c66de40b652ac21db1/src%2Ftest%2Fui%2Fissue-53840.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-53840.stderr?ref=e536e64702a12898ba7156c66de40b652ac21db1", "patch": "@@ -0,0 +1,20 @@\n+error[E0009]: cannot bind by-move and by-ref in the same pattern\n+  --> $DIR/issue-53840.rs:22:16\n+   |\n+LL |         E::Foo(a, b, ref c) => {}\n+   |                ^  ^  ----- both by-ref and by-move used\n+   |                |  |\n+   |                |  by-move pattern here\n+   |                by-move pattern here\n+\n+error[E0009]: cannot bind by-move and by-ref in the same pattern\n+  --> $DIR/issue-53840.rs:25:14\n+   |\n+LL |         Bar {a, ref b} => {}\n+   |              ^  ----- both by-ref and by-move used\n+   |              |\n+   |              by-move pattern here\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0009`."}]}