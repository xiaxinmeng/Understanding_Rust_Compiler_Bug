{"sha": "8f6e32d9216c8f5f29fe782af2d9a91083987503", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmNmUzMmQ5MjE2YzhmNWYyOWZlNzgyYWYyZDlhOTEwODM5ODc1MDM=", "commit": {"author": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2016-06-27T15:17:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-06-27T15:17:14Z"}, "message": "Merge pull request #1045 from oli-obk/more_transmutes\n\nlint transmuting references to pointer", "tree": {"sha": "3b6d4a4b10f405be97417553094ebf39294fdc15", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b6d4a4b10f405be97417553094ebf39294fdc15"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f6e32d9216c8f5f29fe782af2d9a91083987503", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f6e32d9216c8f5f29fe782af2d9a91083987503", "html_url": "https://github.com/rust-lang/rust/commit/8f6e32d9216c8f5f29fe782af2d9a91083987503", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f6e32d9216c8f5f29fe782af2d9a91083987503/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "60cc87baba4f5ea457f4b696c00fb15031bfecb6", "url": "https://api.github.com/repos/rust-lang/rust/commits/60cc87baba4f5ea457f4b696c00fb15031bfecb6", "html_url": "https://github.com/rust-lang/rust/commit/60cc87baba4f5ea457f4b696c00fb15031bfecb6"}, {"sha": "a469ee1061fbccd4dda79e07017d35189e367b0e", "url": "https://api.github.com/repos/rust-lang/rust/commits/a469ee1061fbccd4dda79e07017d35189e367b0e", "html_url": "https://github.com/rust-lang/rust/commit/a469ee1061fbccd4dda79e07017d35189e367b0e"}], "stats": {"total": 134, "additions": 79, "deletions": 55}, "files": [{"sha": "0d68789e0be874f24e3be6afa7711a40eb36ec29", "filename": "clippy_lints/src/transmute.rs", "status": "modified", "additions": 64, "deletions": 55, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/8f6e32d9216c8f5f29fe782af2d9a91083987503/clippy_lints%2Fsrc%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f6e32d9216c8f5f29fe782af2d9a91083987503/clippy_lints%2Fsrc%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute.rs?ref=8f6e32d9216c8f5f29fe782af2d9a91083987503", "patch": "@@ -1,6 +1,5 @@\n use rustc::lint::*;\n use rustc::ty::TypeVariants::{TyRawPtr, TyRef};\n-use rustc::ty;\n use rustc::hir::*;\n use utils::{match_def_path, paths, snippet_opt, span_lint, span_lint_and_then};\n \n@@ -66,66 +65,76 @@ impl LateLintPass for Transmute {\n                     let from_ty = cx.tcx.expr_ty(&args[0]);\n                     let to_ty = cx.tcx.expr_ty(e);\n \n-                    if from_ty == to_ty {\n-                        span_lint(cx,\n-                                  USELESS_TRANSMUTE,\n-                                  e.span,\n-                                  &format!(\"transmute from a type (`{}`) to itself\", from_ty));\n-                    } else if is_ptr_to(to_ty, from_ty) {\n-                        span_lint(cx,\n-                                  CROSSPOINTER_TRANSMUTE,\n-                                  e.span,\n-                                  &format!(\"transmute from a type (`{}`) to a pointer to that type (`{}`)\",\n-                                           from_ty,\n-                                           to_ty));\n-                    } else if is_ptr_to(from_ty, to_ty) {\n-                        span_lint(cx,\n-                                  CROSSPOINTER_TRANSMUTE,\n-                                  e.span,\n-                                  &format!(\"transmute from a type (`{}`) to the type that it points to (`{}`)\",\n-                                           from_ty,\n-                                           to_ty));\n-                    } else {\n-                        check_ptr_to_ref(cx, from_ty, to_ty, e, &args[0]);\n-                    }\n-                }\n-            }\n-        }\n-    }\n-}\n+                    match (&from_ty.sty, &to_ty.sty) {\n+                        _ if from_ty == to_ty => span_lint(\n+                            cx,\n+                            USELESS_TRANSMUTE,\n+                            e.span,\n+                            &format!(\"transmute from a type (`{}`) to itself\", from_ty),\n+                        ),\n+                        (&TyRef(_, rty), &TyRawPtr(ptr_ty)) => span_lint_and_then(\n+                            cx,\n+                            USELESS_TRANSMUTE,\n+                            e.span,\n+                            \"transmute from a reference to a pointer\",\n+                            |db| {\n+                                if let Some(arg) = snippet_opt(cx, args[0].span) {\n+                                    let sugg = if ptr_ty == rty {\n+                                        format!(\"{} as {}\", arg, to_ty)\n+                                    } else {\n+                                        format!(\"{} as {} as {}\", arg, cx.tcx.mk_ptr(rty), to_ty)\n+                                    };\n \n-fn is_ptr_to(from: ty::Ty, to: ty::Ty) -> bool {\n-    if let TyRawPtr(from_ptr) = from.sty {\n-        from_ptr.ty == to\n-    } else {\n-        false\n-    }\n-}\n+                                    db.span_suggestion(e.span, \"try\", sugg);\n+                                }\n+                            },\n+                        ),\n+                        (&TyRawPtr(from_ptr), _) if from_ptr.ty == to_ty => span_lint(\n+                            cx,\n+                            CROSSPOINTER_TRANSMUTE,\n+                            e.span,\n+                            &format!(\"transmute from a type (`{}`) to the type that it points to (`{}`)\",\n+                                     from_ty,\n+                                     to_ty),\n+                        ),\n+                        (_, &TyRawPtr(to_ptr)) if to_ptr.ty == from_ty => span_lint(\n+                            cx,\n+                            CROSSPOINTER_TRANSMUTE,\n+                            e.span,\n+                            &format!(\"transmute from a type (`{}`) to a pointer to that type (`{}`)\",\n+                                     from_ty,\n+                                     to_ty),\n+                        ),\n+                        (&TyRawPtr(from_pty), &TyRef(_, to_rty)) => span_lint_and_then(\n+                            cx,\n+                            TRANSMUTE_PTR_TO_REF,\n+                            e.span,\n+                            &format!(\"transmute from a pointer type (`{}`) to a reference type (`{}`)\",\n+                                    from_ty,\n+                                    to_ty),\n+                            |db| {\n+                                if let Some(arg) = snippet_opt(cx, args[0].span) {\n+                                    let (deref, cast) = if to_rty.mutbl == Mutability::MutMutable {\n+                                        (\"&mut *\", \"*mut\")\n+                                    } else {\n+                                        (\"&*\", \"*const\")\n+                                    };\n \n-fn check_ptr_to_ref<'tcx>(cx: &LateContext, from_ty: ty::Ty<'tcx>, to_ty: ty::Ty<'tcx>, e: &Expr, arg: &Expr) {\n-    if let TyRawPtr(ref from_pty) = from_ty.sty {\n-        if let TyRef(_, ref to_rty) = to_ty.sty {\n-            let mess = format!(\"transmute from a pointer type (`{}`) to a reference type (`{}`)\",\n-                               from_ty,\n-                               to_ty);\n-            span_lint_and_then(cx, TRANSMUTE_PTR_TO_REF, e.span, &mess, |db| {\n-                if let Some(arg) = snippet_opt(cx, arg.span) {\n-                    let (deref, cast) = if to_rty.mutbl == Mutability::MutMutable {\n-                        (\"&mut *\", \"*mut\")\n-                    } else {\n-                        (\"&*\", \"*const\")\n-                    };\n \n+                                    let sugg = if from_pty.ty == to_rty.ty {\n+                                        format!(\"{}{}\", deref, arg)\n+                                    } else {\n+                                        format!(\"{}({} as {} {})\", deref, arg, cast, to_rty.ty)\n+                                    };\n \n-                    let sugg = if from_pty.ty == to_rty.ty {\n-                        format!(\"{}{}\", deref, arg)\n-                    } else {\n-                        format!(\"{}({} as {} {})\", deref, arg, cast, to_rty.ty)\n+                                    db.span_suggestion(e.span, \"try\", sugg);\n+                                }\n+                            },\n+                        ),\n+                        _ => return,\n                     };\n-\n-                    db.span_suggestion(e.span, \"try\", sugg);\n                 }\n-            });\n+            }\n         }\n     }\n }"}, {"sha": "4cd19f9bec9c453be7353c009a9cd661841bd359", "filename": "tests/compile-fail/transmute.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8f6e32d9216c8f5f29fe782af2d9a91083987503/tests%2Fcompile-fail%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f6e32d9216c8f5f29fe782af2d9a91083987503/tests%2Fcompile-fail%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ftransmute.rs?ref=8f6e32d9216c8f5f29fe782af2d9a91083987503", "patch": "@@ -21,6 +21,21 @@ unsafe fn _generic<'a, T, U: 'a>(t: &'a T) {\n     //~^ ERROR transmute from a type (`&'a T`) to itself\n \n     let _: &'a U = core::intrinsics::transmute(t);\n+\n+    let _: *const T = core::intrinsics::transmute(t);\n+    //~^ ERROR transmute from a reference to a pointer\n+    //~| HELP try\n+    //~| SUGGESTION = t as *const T\n+\n+    let _: *mut T = core::intrinsics::transmute(t);\n+    //~^ ERROR transmute from a reference to a pointer\n+    //~| HELP try\n+    //~| SUGGESTION = t as *const T as *mut T\n+\n+    let _: *const U = core::intrinsics::transmute(t);\n+    //~^ ERROR transmute from a reference to a pointer\n+    //~| HELP try\n+    //~| SUGGESTION = t as *const T as *const U\n }\n \n #[deny(transmute_ptr_to_ref)]"}]}