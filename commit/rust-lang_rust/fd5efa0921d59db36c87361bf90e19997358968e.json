{"sha": "fd5efa0921d59db36c87361bf90e19997358968e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkNWVmYTA5MjFkNTlkYjM2Yzg3MzYxYmY5MGUxOTk5NzM1ODk2OGU=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-12-30T20:20:17Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-12-31T14:56:28Z"}, "message": "Fix potential_stores_for_load", "tree": {"sha": "b04d7097f7fabf8ead672cd66cd046a4ae42056f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b04d7097f7fabf8ead672cd66cd046a4ae42056f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd5efa0921d59db36c87361bf90e19997358968e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd5efa0921d59db36c87361bf90e19997358968e", "html_url": "https://github.com/rust-lang/rust/commit/fd5efa0921d59db36c87361bf90e19997358968e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd5efa0921d59db36c87361bf90e19997358968e/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6c2db2aea720b8f93d9840bfe929b1837951168", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6c2db2aea720b8f93d9840bfe929b1837951168", "html_url": "https://github.com/rust-lang/rust/commit/d6c2db2aea720b8f93d9840bfe929b1837951168"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "4153892a673be70e829dcad3f81a18645166f7be", "filename": "src/optimize/stack2reg.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd5efa0921d59db36c87361bf90e19997358968e/src%2Foptimize%2Fstack2reg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd5efa0921d59db36c87361bf90e19997358968e/src%2Foptimize%2Fstack2reg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foptimize%2Fstack2reg.rs?ref=fd5efa0921d59db36c87361bf90e19997358968e", "patch": "@@ -34,12 +34,12 @@ struct StackSlotUsage {\n impl StackSlotUsage {\n     fn potential_stores_for_load(&self, ctx: &Context, load: Inst) -> Vec<Inst> {\n         self.stack_store.iter().cloned().filter(|&store| {\n-            match spatial_overlap(&ctx.func, load, store) {\n+            match spatial_overlap(&ctx.func, store, load) {\n                 SpatialOverlap::No => false, // Can never be the source of the loaded value.\n                 SpatialOverlap::Partial | SpatialOverlap::Full => true,\n             }\n         }).filter(|&store| {\n-            match temporal_order(ctx, load, store) {\n+            match temporal_order(ctx, store, load) {\n                 TemporalOrder::NeverBefore => false, // Can never be the source of the loaded value.\n                 TemporalOrder::MaybeBefore | TemporalOrder::DefinitivelyBefore => true,\n             }"}]}