{"sha": "e00e4611a82641c61dd694ce9aa675b9d8ecf9a8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwMGU0NjExYTgyNjQxYzYxZGQ2OTRjZTlhYTY3NWI5ZDhlY2Y5YTg=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-13T21:29:02Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-14T01:16:34Z"}, "message": "libcollections: convert `TreeSet` binops to by value", "tree": {"sha": "0a0ac8c09abcd27f5a77d5057da31692588ca619", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a0ac8c09abcd27f5a77d5057da31692588ca619"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e00e4611a82641c61dd694ce9aa675b9d8ecf9a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e00e4611a82641c61dd694ce9aa675b9d8ecf9a8", "html_url": "https://github.com/rust-lang/rust/commit/e00e4611a82641c61dd694ce9aa675b9d8ecf9a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e00e4611a82641c61dd694ce9aa675b9d8ecf9a8/comments", "author": null, "committer": null, "parents": [{"sha": "308460400bbab1383a61e1e61238a9c730d30ed9", "url": "https://api.github.com/repos/rust-lang/rust/commits/308460400bbab1383a61e1e61238a9c730d30ed9", "html_url": "https://github.com/rust-lang/rust/commit/308460400bbab1383a61e1e61238a9c730d30ed9"}], "stats": {"total": 104, "additions": 100, "deletions": 4}, "files": [{"sha": "1d3ec2eb7f2f68d752e5bbd693fffa253300e1b8", "filename": "src/libcollections/tree/set.rs", "status": "modified", "additions": 100, "deletions": 4, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/e00e4611a82641c61dd694ce9aa675b9d8ecf9a8/src%2Flibcollections%2Ftree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e00e4611a82641c61dd694ce9aa675b9d8ecf9a8/src%2Flibcollections%2Ftree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftree%2Fset.rs?ref=e00e4611a82641c61dd694ce9aa675b9d8ecf9a8", "patch": "@@ -668,6 +668,8 @@ impl<'a, T: Ord> Iterator<&'a T> for UnionItems<'a, T> {\n }\n \n #[unstable = \"matches collection reform specification, waiting for dust to settle\"]\n+// NOTE(stage0): Remove impl after a snapshot\n+#[cfg(stage0)]\n impl<T: Ord + Clone> BitOr<TreeSet<T>, TreeSet<T>> for TreeSet<T> {\n     /// Returns the union of `self` and `rhs` as a new `TreeSet<T>`.\n     ///\n@@ -689,6 +691,30 @@ impl<T: Ord + Clone> BitOr<TreeSet<T>, TreeSet<T>> for TreeSet<T> {\n }\n \n #[unstable = \"matches collection reform specification, waiting for dust to settle\"]\n+#[cfg(not(stage0))]  // NOTE(stage0): Remove cfg after a snapshot\n+impl<'a, 'b, T: Ord + Clone> BitOr<&'b TreeSet<T>, TreeSet<T>> for &'a TreeSet<T> {\n+    /// Returns the union of `self` and `rhs` as a new `TreeSet<T>`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::collections::TreeSet;\n+    ///\n+    /// let a: TreeSet<int> = vec![1, 2, 3].into_iter().collect();\n+    /// let b: TreeSet<int> = vec![3, 4, 5].into_iter().collect();\n+    ///\n+    /// let set: TreeSet<int> = &a | &b;\n+    /// let v: Vec<int> = set.into_iter().collect();\n+    /// assert_eq!(v, vec![1, 2, 3, 4, 5]);\n+    /// ```\n+    fn bitor(self, rhs: &TreeSet<T>) -> TreeSet<T> {\n+        self.union(rhs).cloned().collect()\n+    }\n+}\n+\n+#[unstable = \"matches collection reform specification, waiting for dust to settle\"]\n+// NOTE(stage0): Remove impl after a snapshot\n+#[cfg(stage0)]\n impl<T: Ord + Clone> BitAnd<TreeSet<T>, TreeSet<T>> for TreeSet<T> {\n     /// Returns the intersection of `self` and `rhs` as a new `TreeSet<T>`.\n     ///\n@@ -710,6 +736,30 @@ impl<T: Ord + Clone> BitAnd<TreeSet<T>, TreeSet<T>> for TreeSet<T> {\n }\n \n #[unstable = \"matches collection reform specification, waiting for dust to settle\"]\n+#[cfg(not(stage0))]  // NOTE(stage0): Remove cfg after a snapshot\n+impl<'a, 'b, T: Ord + Clone> BitAnd<&'b TreeSet<T>, TreeSet<T>> for &'a TreeSet<T> {\n+    /// Returns the intersection of `self` and `rhs` as a new `TreeSet<T>`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::collections::TreeSet;\n+    ///\n+    /// let a: TreeSet<int> = vec![1, 2, 3].into_iter().collect();\n+    /// let b: TreeSet<int> = vec![2, 3, 4].into_iter().collect();\n+    ///\n+    /// let set: TreeSet<int> = &a & &b;\n+    /// let v: Vec<int> = set.into_iter().collect();\n+    /// assert_eq!(v, vec![2, 3]);\n+    /// ```\n+    fn bitand(self, rhs: &TreeSet<T>) -> TreeSet<T> {\n+        self.intersection(rhs).cloned().collect()\n+    }\n+}\n+\n+#[unstable = \"matches collection reform specification, waiting for dust to settle\"]\n+// NOTE(stage0): Remove impl after a snapshot\n+#[cfg(stage0)]\n impl<T: Ord + Clone> BitXor<TreeSet<T>, TreeSet<T>> for TreeSet<T> {\n     /// Returns the symmetric difference of `self` and `rhs` as a new `TreeSet<T>`.\n     ///\n@@ -731,6 +781,30 @@ impl<T: Ord + Clone> BitXor<TreeSet<T>, TreeSet<T>> for TreeSet<T> {\n }\n \n #[unstable = \"matches collection reform specification, waiting for dust to settle\"]\n+#[cfg(not(stage0))]  // NOTE(stage0): Remove cfg after a snapshot\n+impl<'a, 'b, T: Ord + Clone> BitXor<&'b TreeSet<T>, TreeSet<T>> for &'a TreeSet<T> {\n+    /// Returns the symmetric difference of `self` and `rhs` as a new `TreeSet<T>`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::collections::TreeSet;\n+    ///\n+    /// let a: TreeSet<int> = vec![1, 2, 3].into_iter().collect();\n+    /// let b: TreeSet<int> = vec![3, 4, 5].into_iter().collect();\n+    ///\n+    /// let set: TreeSet<int> = &a ^ &b;\n+    /// let v: Vec<int> = set.into_iter().collect();\n+    /// assert_eq!(v, vec![1, 2, 4, 5]);\n+    /// ```\n+    fn bitxor(self, rhs: &TreeSet<T>) -> TreeSet<T> {\n+        self.symmetric_difference(rhs).cloned().collect()\n+    }\n+}\n+\n+#[unstable = \"matches collection reform specification, waiting for dust to settle\"]\n+// NOTE(stage0): Remove impl after a snapshot\n+#[cfg(stage0)]\n impl<T: Ord + Clone> Sub<TreeSet<T>, TreeSet<T>> for TreeSet<T> {\n     /// Returns the difference of `self` and `rhs` as a new `TreeSet<T>`.\n     ///\n@@ -751,6 +825,28 @@ impl<T: Ord + Clone> Sub<TreeSet<T>, TreeSet<T>> for TreeSet<T> {\n     }\n }\n \n+#[unstable = \"matches collection reform specification, waiting for dust to settle\"]\n+#[cfg(not(stage0))]  // NOTE(stage0): Remove cfg after a snapshot\n+impl<'a, 'b, T: Ord + Clone> Sub<&'b TreeSet<T>, TreeSet<T>> for &'a TreeSet<T> {\n+    /// Returns the difference of `self` and `rhs` as a new `TreeSet<T>`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::collections::TreeSet;\n+    ///\n+    /// let a: TreeSet<int> = vec![1, 2, 3].into_iter().collect();\n+    /// let b: TreeSet<int> = vec![3, 4, 5].into_iter().collect();\n+    ///\n+    /// let set: TreeSet<int> = &a - &b;\n+    /// let v: Vec<int> = set.into_iter().collect();\n+    /// assert_eq!(v, vec![1, 2]);\n+    /// ```\n+    fn sub(self, rhs: &TreeSet<T>) -> TreeSet<T> {\n+        self.difference(rhs).cloned().collect()\n+    }\n+}\n+\n impl<T: Ord> FromIterator<T> for TreeSet<T> {\n     fn from_iter<Iter: Iterator<T>>(iter: Iter) -> TreeSet<T> {\n         let mut set = TreeSet::new();\n@@ -1032,7 +1128,7 @@ mod test {\n         let a: TreeSet<int> = vec![1, 3, 5, 9, 11, 16, 19, 24].into_iter().collect();\n         let b: TreeSet<int> = vec![-2, 1, 5, 9, 13, 19].into_iter().collect();\n \n-        let set: TreeSet<int> = a | b;\n+        let set: TreeSet<int> = &a | &b;\n         let v: Vec<int> = set.into_iter().collect();\n         assert_eq!(v, vec![-2, 1, 3, 5, 9, 11, 13, 16, 19, 24]);\n     }\n@@ -1042,7 +1138,7 @@ mod test {\n         let a: TreeSet<int> = vec![11, 1, 3, 77, 103, 5, -5].into_iter().collect();\n         let b: TreeSet<int> = vec![2, 11, 77, -9, -42, 5, 3].into_iter().collect();\n \n-        let set: TreeSet<int> = a & b;\n+        let set: TreeSet<int> = &a & &b;\n         let v: Vec<int> = set.into_iter().collect();\n         assert_eq!(v, vec![3, 5, 11, 77]);\n     }\n@@ -1052,7 +1148,7 @@ mod test {\n         let a: TreeSet<int> = vec![1, 3, 5, 9, 11].into_iter().collect();\n         let b: TreeSet<int> = vec![-2, 3, 9, 14, 22].into_iter().collect();\n \n-        let set: TreeSet<int> = a ^ b;\n+        let set: TreeSet<int> = &a ^ &b;\n         let v: Vec<int> = set.into_iter().collect();\n         assert_eq!(v, vec![-2, 1, 5, 11, 14, 22]);\n     }\n@@ -1062,7 +1158,7 @@ mod test {\n         let a: TreeSet<int> = vec![-5, 11, 22, 33, 40, 42].into_iter().collect();\n         let b: TreeSet<int> = vec![-12, -5, 14, 23, 34, 38, 39, 50].into_iter().collect();\n \n-        let set: TreeSet<int> = a - b;\n+        let set: TreeSet<int> = &a - &b;\n         let v: Vec<int> = set.into_iter().collect();\n         assert_eq!(v, vec![11, 22, 33, 40, 42]);\n     }"}]}