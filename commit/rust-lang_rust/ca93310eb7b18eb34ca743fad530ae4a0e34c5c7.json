{"sha": "ca93310eb7b18eb34ca743fad530ae4a0e34c5c7", "node_id": "C_kwDOAAsO6NoAKGNhOTMzMTBlYjdiMThlYjM0Y2E3NDNmYWQ1MzBhZTRhMGUzNGM1Yzc", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2023-01-25T19:22:00Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2023-01-25T19:22:00Z"}, "message": "rustdoc: Use rustdoc-reachable set to prune extern impls", "tree": {"sha": "2d6a424d5e49bceb1daf8b720f43d3f4701f78ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d6a424d5e49bceb1daf8b720f43d3f4701f78ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca93310eb7b18eb34ca743fad530ae4a0e34c5c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca93310eb7b18eb34ca743fad530ae4a0e34c5c7", "html_url": "https://github.com/rust-lang/rust/commit/ca93310eb7b18eb34ca743fad530ae4a0e34c5c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca93310eb7b18eb34ca743fad530ae4a0e34c5c7/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "957bc606dd638e28dea6c39f6678d5f9977c8cf2", "url": "https://api.github.com/repos/rust-lang/rust/commits/957bc606dd638e28dea6c39f6678d5f9977c8cf2", "html_url": "https://github.com/rust-lang/rust/commit/957bc606dd638e28dea6c39f6678d5f9977c8cf2"}], "stats": {"total": 14, "additions": 9, "deletions": 5}, "files": [{"sha": "920028dd63c8f4abb4046c5fa84cbad3fd8e90d3", "filename": "src/librustdoc/passes/collect_intra_doc_links/early.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ca93310eb7b18eb34ca743fad530ae4a0e34c5c7/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links%2Fearly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca93310eb7b18eb34ca743fad530ae4a0e34c5c7/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links%2Fearly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links%2Fearly.rs?ref=ca93310eb7b18eb34ca743fad530ae4a0e34c5c7", "patch": "@@ -118,6 +118,10 @@ impl<'ra> EarlyDocLinkResolver<'_, 'ra> {\n         }\n     }\n \n+    fn is_doc_reachable(&self, def_id: DefId) -> bool {\n+        self.extern_doc_reachable.contains(&def_id) || self.local_doc_reachable.contains(&def_id)\n+    }\n+\n     /// Add traits in scope for links in impls collected by the `collect-intra-doc-links` pass.\n     /// That pass filters impls using type-based information, but we don't yet have such\n     /// information here, so we just conservatively calculate traits in scope for *all* modules\n@@ -148,10 +152,10 @@ impl<'ra> EarlyDocLinkResolver<'_, 'ra> {\n                 // privacy, private traits and impls from other crates are never documented in\n                 // the current crate, and links in their doc comments are not resolved.\n                 for &(trait_def_id, impl_def_id, simplified_self_ty) in &all_trait_impls {\n-                    if self.resolver.cstore().visibility_untracked(trait_def_id).is_public()\n-                        && simplified_self_ty.and_then(|ty| ty.def()).map_or(true, |ty_def_id| {\n-                            self.resolver.cstore().visibility_untracked(ty_def_id).is_public()\n-                        })\n+                    if self.is_doc_reachable(trait_def_id)\n+                        && simplified_self_ty\n+                            .and_then(|ty| ty.def())\n+                            .map_or(true, |ty_def_id| self.is_doc_reachable(ty_def_id))\n                     {\n                         if self.visited_mods.insert(trait_def_id) {\n                             self.resolve_doc_links_extern_impl(trait_def_id, false);\n@@ -160,7 +164,7 @@ impl<'ra> EarlyDocLinkResolver<'_, 'ra> {\n                     }\n                 }\n                 for (ty_def_id, impl_def_id) in all_inherent_impls {\n-                    if self.resolver.cstore().visibility_untracked(ty_def_id).is_public() {\n+                    if self.is_doc_reachable(ty_def_id) {\n                         self.resolve_doc_links_extern_impl(impl_def_id, true);\n                     }\n                 }"}]}