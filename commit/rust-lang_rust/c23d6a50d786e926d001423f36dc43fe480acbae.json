{"sha": "c23d6a50d786e926d001423f36dc43fe480acbae", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyM2Q2YTUwZDc4NmU5MjZkMDAxNDIzZjM2ZGM0M2ZlNDgwYWNiYWU=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-05-11T00:18:04Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-05-11T00:18:04Z"}, "message": "Preliminary groundwork for intrinsic module, reflection interface.", "tree": {"sha": "ad2c2fad91816d82340d09c4019961c75611c8b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad2c2fad91816d82340d09c4019961c75611c8b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c23d6a50d786e926d001423f36dc43fe480acbae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c23d6a50d786e926d001423f36dc43fe480acbae", "html_url": "https://github.com/rust-lang/rust/commit/c23d6a50d786e926d001423f36dc43fe480acbae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c23d6a50d786e926d001423f36dc43fe480acbae/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "664b82a6b79f3aea1d8d00c1e5e7e1e89fcaf71a", "url": "https://api.github.com/repos/rust-lang/rust/commits/664b82a6b79f3aea1d8d00c1e5e7e1e89fcaf71a", "html_url": "https://github.com/rust-lang/rust/commit/664b82a6b79f3aea1d8d00c1e5e7e1e89fcaf71a"}], "stats": {"total": 291, "additions": 291, "deletions": 0}, "files": [{"sha": "e119ae840e61f1567b82ef0a2bce29e2d561fde6", "filename": "src/librustsyntax/codemap.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c23d6a50d786e926d001423f36dc43fe480acbae/src%2Flibrustsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c23d6a50d786e926d001423f36dc43fe480acbae/src%2Flibrustsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fcodemap.rs?ref=c23d6a50d786e926d001423f36dc43fe480acbae", "patch": "@@ -12,6 +12,7 @@ export mk_substr_filename;\n export lookup_char_pos;\n export adjust_span;\n export span_to_str;\n+export span_to_filename;\n export span_to_lines;\n export file_lines;\n export get_line;\n@@ -170,6 +171,11 @@ fn span_to_str(sp: span, cm: codemap) -> str {\n \n type file_lines = {file: filemap, lines: [uint]};\n \n+fn span_to_filename(sp: span, cm: codemap::codemap) -> filename {\n+    let lo = lookup_char_pos(cm, sp.lo);\n+    ret lo.file.name;\n+}\n+\n fn span_to_lines(sp: span, cm: codemap::codemap) -> @file_lines {\n     let lo = lookup_char_pos(cm, sp.lo);\n     let hi = lookup_char_pos(cm, sp.hi);"}, {"sha": "170ba112e312710320a038f020e4407db2150ddd", "filename": "src/librustsyntax/ext/base.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c23d6a50d786e926d001423f36dc43fe480acbae/src%2Flibrustsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c23d6a50d786e926d001423f36dc43fe480acbae/src%2Flibrustsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fext%2Fbase.rs?ref=c23d6a50d786e926d001423f36dc43fe480acbae", "patch": "@@ -31,6 +31,8 @@ fn syntax_expander_table() -> hashmap<str, syntax_extension> {\n     syntax_expanders.insert(\"auto_serialize\",\n                             item_decorator(ext::auto_serialize::expand));\n     syntax_expanders.insert(\"env\", builtin(ext::env::expand_syntax_ext));\n+    syntax_expanders.insert(\"include_str\",\n+                            builtin(ext::include::str::expand_syntax_ext));\n     syntax_expanders.insert(\"macro\",\n                             macro_defining(ext::simplext::add_new_extension));\n     syntax_expanders.insert(\"concat_idents\","}, {"sha": "a31d2835e8a259818c293ddbfcf606a63b3b42fa", "filename": "src/librustsyntax/ext/include.rs", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/c23d6a50d786e926d001423f36dc43fe480acbae/src%2Flibrustsyntax%2Fext%2Finclude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c23d6a50d786e926d001423f36dc43fe480acbae/src%2Flibrustsyntax%2Fext%2Finclude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fext%2Finclude.rs?ref=c23d6a50d786e926d001423f36dc43fe480acbae", "patch": "@@ -0,0 +1,59 @@\n+/*\n+ * The compiler code necessary to support the #include and #include_str\n+ * extensions.  Eventually this should all get sucked into either the compiler\n+ * syntax extension plugin interface.\n+ */\n+\n+import diagnostic::span_handler;\n+import base::*;\n+export str;\n+\n+// FIXME: implement plain #include, restarting the parser on the included\n+// file. Currently only implement #include_str.\n+\n+mod str {\n+    fn expand_syntax_ext(cx: ext_ctxt, sp: codemap::span, arg: ast::mac_arg,\n+                         _body: ast::mac_body) -> @ast::expr {\n+        let arg = get_mac_arg(cx,sp,arg);\n+        let args: [@ast::expr] =\n+            alt arg.node {\n+              ast::expr_vec(elts, _) { elts }\n+              _ {\n+                cx.span_fatal(sp, \"#include_str requires arguments \\\n+                                   of the form `[...]`.\")\n+              }\n+            };\n+        if vec::len::<@ast::expr>(args) != 1u {\n+            cx.span_fatal(sp, \"malformed #include_str call\");\n+        }\n+        let mut path = expr_to_str(cx, args[0], \"#include_str requires \\\n+                                                 a string\");\n+\n+        // NB: relative paths are resolved relative to the compilation unit\n+        if !path::path_is_absolute(path) {\n+            let cu = codemap::span_to_filename(sp, cx.codemap());\n+            let dir = path::dirname(cu);\n+            path = path::connect(dir, path);\n+        }\n+\n+        alt io::read_whole_file_str(path) {\n+          result::ok(src) { ret make_new_str(cx, sp, src); }\n+          result::err(e) {\n+            cx.parse_sess().span_diagnostic.handler().fatal(e)\n+          }\n+        }\n+    }\n+}\n+\n+fn make_new_str(cx: ext_ctxt, sp: codemap::span, s: str) -> @ast::expr {\n+    ret make_new_lit(cx, sp, ast::lit_str(s));\n+}\n+//\n+// Local Variables:\n+// mode: rust\n+// fill-column: 78;\n+// indent-tabs-mode: nil\n+// c-basic-offset: 4\n+// buffer-file-coding-system: utf-8-unix\n+// End:\n+//"}, {"sha": "ab3fc2072ae36f4924cb116918670833c565457e", "filename": "src/librustsyntax/parse.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c23d6a50d786e926d001423f36dc43fe480acbae/src%2Flibrustsyntax%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c23d6a50d786e926d001423f36dc43fe480acbae/src%2Flibrustsyntax%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fparse.rs?ref=c23d6a50d786e926d001423f36dc43fe480acbae", "patch": "@@ -8,6 +8,7 @@ export parse_crate_from_file;\n export parse_crate_from_crate_file;\n export parse_crate_from_source_str;\n export parse_expr_from_source_str;\n+export parse_item_from_source_str;\n export parse_from_source_str;\n \n import parser::parser;\n@@ -93,6 +94,17 @@ fn parse_expr_from_source_str(name: str, source: @str, cfg: ast::crate_cfg,\n     ret r;\n }\n \n+fn parse_item_from_source_str(name: str, source: @str, cfg: ast::crate_cfg,\n+                              +attrs: [ast::attribute], vis: ast::visibility,\n+                              sess: parse_sess) -> option<@ast::item> {\n+    let p = new_parser_from_source_str(\n+        sess, cfg, name, codemap::fss_none, source);\n+    let r = parser::parse_item(p, attrs, vis);\n+    sess.chpos = p.reader.chpos;\n+    sess.byte_pos = sess.byte_pos + p.reader.pos;\n+    ret r;\n+}\n+\n fn parse_from_source_str<T>(f: fn (p: parser) -> T,\n                             name: str, ss: codemap::file_substr,\n                             source: @str, cfg: ast::crate_cfg,"}, {"sha": "293238aac3c50198110c4ca436aa8a3d68982d4b", "filename": "src/librustsyntax/rustsyntax.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c23d6a50d786e926d001423f36dc43fe480acbae/src%2Flibrustsyntax%2Frustsyntax.rc", "raw_url": "https://github.com/rust-lang/rust/raw/c23d6a50d786e926d001423f36dc43fe480acbae/src%2Flibrustsyntax%2Frustsyntax.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Frustsyntax.rc?ref=c23d6a50d786e926d001423f36dc43fe480acbae", "patch": "@@ -63,6 +63,7 @@ mod ext {\n     mod simplext;\n     mod concat_idents;\n     mod ident_to_str;\n+    mod include;\n     mod log_syntax;\n     mod auto_serialize;\n }"}, {"sha": "7f737403da814f955c5b083ea72fcb396501f9da", "filename": "src/rustc/driver/driver.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c23d6a50d786e926d001423f36dc43fe480acbae/src%2Frustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c23d6a50d786e926d001423f36dc43fe480acbae/src%2Frustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fdriver%2Fdriver.rs?ref=c23d6a50d786e926d001423f36dc43fe480acbae", "patch": "@@ -148,6 +148,10 @@ fn compile_upto(sess: session, cfg: ast::crate_cfg,\n \n     if upto == cu_expand { ret {crate: crate, tcx: none}; }\n \n+    crate =\n+        time(time_passes, \"intrinsic injection\",\n+             bind front::intrinsic_inject::inject_intrinsic(sess, crate));\n+\n     crate =\n         time(time_passes, \"core injection\",\n              bind front::core_inject::maybe_inject_libcore_ref(sess, crate));"}, {"sha": "e389b30715bdc15ff15427450f37f27037df8dfd", "filename": "src/rustc/front/intrinsic.rs", "status": "added", "additions": 140, "deletions": 0, "changes": 140, "blob_url": "https://github.com/rust-lang/rust/blob/c23d6a50d786e926d001423f36dc43fe480acbae/src%2Frustc%2Ffront%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c23d6a50d786e926d001423f36dc43fe480acbae/src%2Frustc%2Ffront%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Ffront%2Fintrinsic.rs?ref=c23d6a50d786e926d001423f36dc43fe480acbae", "patch": "@@ -0,0 +1,140 @@\n+// NB: this file is #include_str'ed into the compiler, re-parsed\n+// and injected into each crate the compiler builds. Keep it small.\n+\n+mod intrinsic {\n+\n+    // import rusti::visit_ty;\n+    // import rusti::visit_val;\n+    // import rusti::visit_val_pair;\n+\n+    export ty_visitor, val_visitor, val_pair_visitor;\n+\n+    fn macros() {\n+        // Present for side-effect of defining intrinsic macros.\n+        #macro([#error[f, ...], log(core::error, #fmt[f, ...])]);\n+        #macro([#warn[f, ...], log(core::warn, #fmt[f, ...])]);\n+        #macro([#info[f, ...], log(core::info, #fmt[f, ...])]);\n+        #macro([#debug[f, ...], log(core::debug, #fmt[f, ...])]);\n+    }\n+\n+    iface ty_visitor {\n+        fn visit_nil();\n+        fn visit_bool();\n+\n+        fn visit_int();\n+        fn visit_i8();\n+        fn visit_i16();\n+        fn visit_i32();\n+        fn visit_i64();\n+\n+        fn visit_uint();\n+        fn visit_u8();\n+        fn visit_u16();\n+        fn visit_u32();\n+        fn visit_u64();\n+\n+        fn visit_float();\n+        fn visit_f32();\n+        fn visit_f64();\n+        fn visit_str();\n+\n+        fn visit_vec(cells_mut: bool,\n+                     visit_cell: fn(uint, self));\n+\n+        fn visit_box(inner_mut: bool,\n+                     visit_inner: fn(self));\n+\n+        fn visit_uniq(inner_mut: bool,\n+                      visit_inner: fn(self));\n+\n+        fn visit_ptr(inner_mut: bool,\n+                     visit_inner: fn(self));\n+\n+        fn visit_rptr(inner_mut: bool,\n+                      visit_inner: fn(self));\n+\n+        fn visit_rec(n_fields: uint,\n+                     field_name: fn(uint) -> str/&,\n+                     field_mut: fn(uint) -> bool,\n+                     visit_field: fn(uint, self));\n+        fn visit_tup(n_fields: uint,\n+                     visit_field: fn(uint, self));\n+        fn visit_enum(n_variants: uint,\n+                      variant: uint,\n+                      variant_name: fn(uint) -> str/&,\n+                      visit_variant: fn(uint, self));\n+    }\n+\n+    iface val_visitor {\n+\n+        // Basic types we can visit directly.\n+        fn visit_nil();\n+        fn visit_bool(b: &bool);\n+\n+        fn visit_int(i: &int);\n+        fn visit_i8(i: &i8);\n+        fn visit_i16(i: &i16);\n+        fn visit_i32(i: &i32);\n+        fn visit_i64(i: &i64);\n+\n+        fn visit_uint(u: &uint);\n+        fn visit_u8(i: &i8);\n+        fn visit_u16(i: &i16);\n+        fn visit_u32(i: &i32);\n+        fn visit_u64(i: &i64);\n+\n+        fn visit_float(f: &float);\n+        fn visit_f32(f: &f32);\n+        fn visit_f64(f: &f64);\n+\n+        // Vecs and strs we can provide a stub view of.\n+        fn visit_str(repr: &vec::unsafe::vec_repr,\n+                     visit_cell: fn(uint,self));\n+\n+        fn visit_vec(repr: &vec::unsafe::vec_repr,\n+                     cells_mut: bool,\n+                     visit_cell: fn(uint, self));\n+\n+        fn visit_box(mem: *u8,\n+                     inner_mut: bool,\n+                     visit_inner: fn(self));\n+\n+        fn visit_uniq(mem: *u8,\n+                      inner_mut: bool,\n+                      visit_inner: fn(self));\n+\n+        fn visit_ptr(mem: *u8,\n+                     inner_mut: bool,\n+                     visit_inner: fn(self));\n+\n+        fn visit_rptr(mem: *u8,\n+                      inner_mut: bool,\n+                      visit_inner: fn(self));\n+\n+        // Aggregates we can't really provide anything useful for\n+        // beyond a *u8. You really have to know what you're doing.\n+        fn visit_rec(mem: *u8,\n+                     n_fields: uint,\n+                     field_name: fn(uint) -> str/&,\n+                     field_mut: fn(uint) -> bool,\n+                     visit_field: fn(uint, self));\n+        fn visit_tup(mem: *u8,\n+                     n_fields: uint,\n+                     visit_field: fn(uint, self));\n+        fn visit_enum(mem: *u8,\n+                      n_variants: uint,\n+                      variant: uint,\n+                      variant_name: fn(uint) -> str/&,\n+                      visit_variant: fn(uint, self));\n+    }\n+\n+    iface val_pair_visitor {\n+    }\n+\n+    #[abi = \"rust-intrinsic\"]\n+    native mod rusti {\n+        // fn visit_ty<T,V:ty_visitor>(tv: V);\n+        // fn visit_val<T,V:val_visitor>(v: &T, vv: V);\n+        // fn visit_val_pair<T,V:val_pair_visitor>(a: &T, b: &T, vpv: &V);\n+    }\n+}"}, {"sha": "d2eaf2c895584920b5956f7b18ee8c1cd1491089", "filename": "src/rustc/front/intrinsic_inject.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c23d6a50d786e926d001423f36dc43fe480acbae/src%2Frustc%2Ffront%2Fintrinsic_inject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c23d6a50d786e926d001423f36dc43fe480acbae/src%2Frustc%2Ffront%2Fintrinsic_inject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Ffront%2Fintrinsic_inject.rs?ref=c23d6a50d786e926d001423f36dc43fe480acbae", "patch": "@@ -0,0 +1,30 @@\n+import driver::session::session;\n+import syntax::parse;\n+import syntax::ast;\n+\n+export inject_intrinsic;\n+\n+fn inject_intrinsic(sess: session,\n+                    crate: @ast::crate) -> @ast::crate {\n+\n+    // FIXME: upgrade this to #include_str(\"intrinsic.rs\");\n+    let intrinsic_module = @\"mod intrinsic { }\";\n+\n+    let item = parse::parse_item_from_source_str(\"intrinsic\",\n+                                                 intrinsic_module,\n+                                                 sess.opts.cfg,\n+                                                 [], ast::public,\n+                                                 sess.parse_sess);\n+    let item =\n+        alt item {\n+          some(i) { i }\n+          none {\n+            sess.fatal(\"no item found in intrinsic module\");\n+          }\n+        };\n+\n+    let items = [item] + crate.node.module.items;\n+\n+    ret @{node: {module: { items: items with crate.node.module }\n+                 with crate.node} with *crate }\n+}"}, {"sha": "4ecbdb7a1c12a5a76468e28edda579915522eb73", "filename": "src/rustc/middle/trans/native.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c23d6a50d786e926d001423f36dc43fe480acbae/src%2Frustc%2Fmiddle%2Ftrans%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c23d6a50d786e926d001423f36dc43fe480acbae/src%2Frustc%2Fmiddle%2Ftrans%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fnative.rs?ref=c23d6a50d786e926d001423f36dc43fe480acbae", "patch": "@@ -834,6 +834,29 @@ fn trans_intrinsic(ccx: @crate_ctxt, decl: ValueRef, item: @ast::native_item,\n         Store(bcx, C_bool(ty::type_needs_drop(ccx.tcx, tp_ty)),\n               fcx.llretptr);\n       }\n+      \"visit_ty\" {\n+        let vp_ty = substs.tys[1], _llvp_ty = type_of::type_of(ccx, vp_ty);\n+        let visitor = get_param(decl, first_real_arg);\n+        // FIXME: implement a proper iface-call. Nontrivial.\n+        Call(bcx, visitor, []);\n+      }\n+\n+      \"visit_val\" {\n+        let vp_ty = substs.tys[1], _llvp_ty = type_of::type_of(ccx, vp_ty);\n+        let val = get_param(decl, first_real_arg);\n+        let visitor = get_param(decl, first_real_arg + 1u);\n+        // FIXME: implement a proper iface-call. Nontrivial.\n+        Call(bcx, visitor, [val]);\n+      }\n+\n+      \"visit_val_pair\" {\n+        let vp_ty = substs.tys[1], _llvp_ty = type_of::type_of(ccx, vp_ty);\n+        let a = get_param(decl, first_real_arg);\n+        let b = get_param(decl, first_real_arg + 1u);\n+        let visitor = get_param(decl, first_real_arg + 2u);\n+        // FIXME: implement a proper iface-call. Nontrivial.\n+        Call(bcx, visitor, [a, b]);\n+      }\n     }\n     build_return(bcx);\n     finish_fn(fcx, lltop);"}, {"sha": "7e132ffbee6f69df972b57449b79c5ada41b61e2", "filename": "src/rustc/middle/typeck.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c23d6a50d786e926d001423f36dc43fe480acbae/src%2Frustc%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c23d6a50d786e926d001423f36dc43fe480acbae/src%2Frustc%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck.rs?ref=c23d6a50d786e926d001423f36dc43fe480acbae", "patch": "@@ -2072,6 +2072,19 @@ fn check_intrinsic_type(ccx: @crate_ctxt, it: @ast::native_item) {\n       \"addr_of\" { (1u, [arg(ast::by_ref, param(ccx, 0u))],\n                    ty::mk_imm_ptr(tcx, param(ccx, 0u))) }\n       \"needs_drop\" { (1u, [], ty::mk_bool(tcx)) }\n+\n+      \"visit_ty\" { (2u, [arg(ast::by_ref, param(ccx, 1u))],\n+                    ty::mk_nil(tcx)) }\n+\n+      \"visit_val\" { (2u, [arg(ast::by_ref, param(ccx, 0u)),\n+                          arg(ast::by_ref, param(ccx, 1u))],\n+                     ty::mk_nil(tcx)) }\n+\n+      \"visit_val_pair\" { (2u, [arg(ast::by_ref, param(ccx, 0u)),\n+                               arg(ast::by_ref, param(ccx, 0u)),\n+                               arg(ast::by_ref, param(ccx, 1u))],\n+                          ty::mk_nil(tcx)) }\n+\n       other {\n         tcx.sess.span_err(it.span, \"unrecognized intrinsic function: `\" +\n                           other + \"`\");"}, {"sha": "1f0b7798fe0cdd6c2ba77d8a843df613e0e3e83e", "filename": "src/rustc/rustc.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c23d6a50d786e926d001423f36dc43fe480acbae/src%2Frustc%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/c23d6a50d786e926d001423f36dc43fe480acbae/src%2Frustc%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Frustc.rc?ref=c23d6a50d786e926d001423f36dc43fe480acbae", "patch": "@@ -76,6 +76,7 @@ mod front {\n     mod config;\n     mod test;\n     mod core_inject;\n+    mod intrinsic_inject;\n }\n \n mod back {"}]}