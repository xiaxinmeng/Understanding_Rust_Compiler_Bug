{"sha": "bf98aa6fb8e02db15ad18d517145f13a5bed2921", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmOThhYTZmYjhlMDJkYjE1YWQxOGQ1MTcxNDVmMTNhNWJlZDI5MjE=", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-03-08T18:59:58Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-03-08T19:15:13Z"}, "message": "Fix redundant closure with macros", "tree": {"sha": "be0689771b0c3aaf134b3da12eb90a6f90d973fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be0689771b0c3aaf134b3da12eb90a6f90d973fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf98aa6fb8e02db15ad18d517145f13a5bed2921", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf98aa6fb8e02db15ad18d517145f13a5bed2921", "html_url": "https://github.com/rust-lang/rust/commit/bf98aa6fb8e02db15ad18d517145f13a5bed2921", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf98aa6fb8e02db15ad18d517145f13a5bed2921/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d02ca3b81b54aa8d9cf07597297a8d74ebdb7dfe", "url": "https://api.github.com/repos/rust-lang/rust/commits/d02ca3b81b54aa8d9cf07597297a8d74ebdb7dfe", "html_url": "https://github.com/rust-lang/rust/commit/d02ca3b81b54aa8d9cf07597297a8d74ebdb7dfe"}], "stats": {"total": 86, "additions": 72, "deletions": 14}, "files": [{"sha": "ab385fc1f8a51a1f3111c11ef23d0b7e6abd4764", "filename": "clippy_lints/src/eta_reduction.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/bf98aa6fb8e02db15ad18d517145f13a5bed2921/clippy_lints%2Fsrc%2Feta_reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf98aa6fb8e02db15ad18d517145f13a5bed2921/clippy_lints%2Fsrc%2Feta_reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feta_reduction.rs?ref=bf98aa6fb8e02db15ad18d517145f13a5bed2921", "patch": "@@ -10,6 +10,8 @@ use crate::utils::{\n     implements_trait, is_adjusted, iter_input_pats, snippet_opt, span_lint_and_sugg, span_lint_and_then,\n     type_is_unsafe_function,\n };\n+use clippy_utils::higher;\n+use clippy_utils::higher::VecArgs;\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for closures which just call another function where\n@@ -74,7 +76,10 @@ impl<'tcx> LateLintPass<'tcx> for EtaReduction {\n         match expr.kind {\n             ExprKind::Call(_, args) | ExprKind::MethodCall(_, _, args, _) => {\n                 for arg in args {\n-                    check_closure(cx, arg)\n+                    // skip `foo(macro!())`\n+                    if arg.span.ctxt() == expr.span.ctxt() {\n+                        check_closure(cx, arg)\n+                    }\n                 }\n             },\n             _ => (),\n@@ -87,6 +92,23 @@ fn check_closure(cx: &LateContext<'_>, expr: &Expr<'_>) {\n         let body = cx.tcx.hir().body(eid);\n         let ex = &body.value;\n \n+        if ex.span.ctxt() != expr.span.ctxt() {\n+            if let Some(VecArgs::Vec(&[])) = higher::vec_macro(cx, ex) {\n+                // replace `|| vec![]` with `Vec::new`\n+                span_lint_and_sugg(\n+                    cx,\n+                    REDUNDANT_CLOSURE,\n+                    expr.span,\n+                    \"redundant closure found\",\n+                    \"remove closure as shown\",\n+                    \"std::vec::Vec::new\".into(),\n+                    Applicability::MachineApplicable,\n+                );\n+            }\n+            // skip `foo(|| macro!())`\n+            return;\n+        }\n+\n         if_chain!(\n             if let ExprKind::Call(ref caller, ref args) = ex.kind;\n "}, {"sha": "2be2283e3fdd2f2a0e8704f7352de4c2a13a295a", "filename": "tests/ui/eta.fixed", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/bf98aa6fb8e02db15ad18d517145f13a5bed2921/tests%2Fui%2Feta.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/bf98aa6fb8e02db15ad18d517145f13a5bed2921/tests%2Fui%2Feta.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feta.fixed?ref=bf98aa6fb8e02db15ad18d517145f13a5bed2921", "patch": "@@ -16,10 +16,25 @@\n \n use std::path::PathBuf;\n \n+macro_rules! mac {\n+    () => {\n+        foobar()\n+    };\n+}\n+\n+macro_rules! closure_mac {\n+    () => {\n+        |n| foo(n)\n+    };\n+}\n+\n fn main() {\n     let a = Some(1u8).map(foo);\n     meta(foo);\n     let c = Some(1u8).map(|a| {1+2; foo}(a));\n+    true.then(|| mac!()); // don't lint function in macro expansion\n+    Some(1).map(closure_mac!()); // don't lint closure in macro expansion\n+    let _: Option<Vec<u8>> = true.then(std::vec::Vec::new); // special case vec!\n     let d = Some(1u8).map(|a| foo((|b| foo2(b))(a))); //is adjusted?\n     all(&[1, 2, 3], &2, |x, y| below(x, y)); //is adjusted\n     unsafe {"}, {"sha": "f0373f9ccf67336f4c50d47fd8b3ae621477da0c", "filename": "tests/ui/eta.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/bf98aa6fb8e02db15ad18d517145f13a5bed2921/tests%2Fui%2Feta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf98aa6fb8e02db15ad18d517145f13a5bed2921/tests%2Fui%2Feta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feta.rs?ref=bf98aa6fb8e02db15ad18d517145f13a5bed2921", "patch": "@@ -16,10 +16,25 @@\n \n use std::path::PathBuf;\n \n+macro_rules! mac {\n+    () => {\n+        foobar()\n+    };\n+}\n+\n+macro_rules! closure_mac {\n+    () => {\n+        |n| foo(n)\n+    };\n+}\n+\n fn main() {\n     let a = Some(1u8).map(|a| foo(a));\n     meta(|a| foo(a));\n     let c = Some(1u8).map(|a| {1+2; foo}(a));\n+    true.then(|| mac!()); // don't lint function in macro expansion\n+    Some(1).map(closure_mac!()); // don't lint closure in macro expansion\n+    let _: Option<Vec<u8>> = true.then(|| vec![]); // special case vec!\n     let d = Some(1u8).map(|a| foo((|b| foo2(b))(a))); //is adjusted?\n     all(&[1, 2, 3], &&2, |x, y| below(x, y)); //is adjusted\n     unsafe {"}, {"sha": "34d6dd463117526ada00018ac3d36bc2eaa2309d", "filename": "tests/ui/eta.stderr", "status": "modified", "additions": 19, "deletions": 13, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/bf98aa6fb8e02db15ad18d517145f13a5bed2921/tests%2Fui%2Feta.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bf98aa6fb8e02db15ad18d517145f13a5bed2921/tests%2Fui%2Feta.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feta.stderr?ref=bf98aa6fb8e02db15ad18d517145f13a5bed2921", "patch": "@@ -1,80 +1,86 @@\n error: redundant closure found\n-  --> $DIR/eta.rs:20:27\n+  --> $DIR/eta.rs:32:27\n    |\n LL |     let a = Some(1u8).map(|a| foo(a));\n    |                           ^^^^^^^^^^ help: remove closure as shown: `foo`\n    |\n    = note: `-D clippy::redundant-closure` implied by `-D warnings`\n \n error: redundant closure found\n-  --> $DIR/eta.rs:21:10\n+  --> $DIR/eta.rs:33:10\n    |\n LL |     meta(|a| foo(a));\n    |          ^^^^^^^^^^ help: remove closure as shown: `foo`\n \n+error: redundant closure found\n+  --> $DIR/eta.rs:37:40\n+   |\n+LL |     let _: Option<Vec<u8>> = true.then(|| vec![]); // special case vec!\n+   |                                        ^^^^^^^^^ help: remove closure as shown: `std::vec::Vec::new`\n+\n error: this expression borrows a reference (`&u8`) that is immediately dereferenced by the compiler\n-  --> $DIR/eta.rs:24:21\n+  --> $DIR/eta.rs:39:21\n    |\n LL |     all(&[1, 2, 3], &&2, |x, y| below(x, y)); //is adjusted\n    |                     ^^^ help: change this to: `&2`\n    |\n    = note: `-D clippy::needless-borrow` implied by `-D warnings`\n \n error: redundant closure found\n-  --> $DIR/eta.rs:31:27\n+  --> $DIR/eta.rs:46:27\n    |\n LL |     let e = Some(1u8).map(|a| generic(a));\n    |                           ^^^^^^^^^^^^^^ help: remove closure as shown: `generic`\n \n error: redundant closure found\n-  --> $DIR/eta.rs:74:51\n+  --> $DIR/eta.rs:89:51\n    |\n LL |     let e = Some(TestStruct { some_ref: &i }).map(|a| a.foo());\n    |                                                   ^^^^^^^^^^^ help: remove closure as shown: `TestStruct::foo`\n    |\n    = note: `-D clippy::redundant-closure-for-method-calls` implied by `-D warnings`\n \n error: redundant closure found\n-  --> $DIR/eta.rs:76:51\n+  --> $DIR/eta.rs:91:51\n    |\n LL |     let e = Some(TestStruct { some_ref: &i }).map(|a| a.trait_foo());\n    |                                                   ^^^^^^^^^^^^^^^^^ help: remove closure as shown: `TestTrait::trait_foo`\n \n error: redundant closure found\n-  --> $DIR/eta.rs:79:42\n+  --> $DIR/eta.rs:94:42\n    |\n LL |     let e = Some(&mut vec![1, 2, 3]).map(|v| v.clear());\n    |                                          ^^^^^^^^^^^^^ help: remove closure as shown: `std::vec::Vec::clear`\n \n error: redundant closure found\n-  --> $DIR/eta.rs:84:29\n+  --> $DIR/eta.rs:99:29\n    |\n LL |     let e = Some(\"str\").map(|s| s.to_string());\n    |                             ^^^^^^^^^^^^^^^^^ help: remove closure as shown: `std::string::ToString::to_string`\n \n error: redundant closure found\n-  --> $DIR/eta.rs:86:27\n+  --> $DIR/eta.rs:101:27\n    |\n LL |     let e = Some('a').map(|s| s.to_uppercase());\n    |                           ^^^^^^^^^^^^^^^^^^^^ help: remove closure as shown: `char::to_uppercase`\n \n error: redundant closure found\n-  --> $DIR/eta.rs:89:65\n+  --> $DIR/eta.rs:104:65\n    |\n LL |     let e: std::vec::Vec<char> = vec!['a', 'b', 'c'].iter().map(|c| c.to_ascii_uppercase()).collect();\n    |                                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove closure as shown: `char::to_ascii_uppercase`\n \n error: redundant closure found\n-  --> $DIR/eta.rs:172:27\n+  --> $DIR/eta.rs:187:27\n    |\n LL |     let a = Some(1u8).map(|a| foo_ptr(a));\n    |                           ^^^^^^^^^^^^^^ help: remove closure as shown: `foo_ptr`\n \n error: redundant closure found\n-  --> $DIR/eta.rs:177:27\n+  --> $DIR/eta.rs:192:27\n    |\n LL |     let a = Some(1u8).map(|a| closure(a));\n    |                           ^^^^^^^^^^^^^^ help: remove closure as shown: `closure`\n \n-error: aborting due to 12 previous errors\n+error: aborting due to 13 previous errors\n "}]}