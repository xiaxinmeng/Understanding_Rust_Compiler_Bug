{"sha": "80dff186416180423fe8117cbd19930a6c813ed9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwZGZmMTg2NDE2MTgwNDIzZmU4MTE3Y2JkMTk5MzBhNmM4MTNlZDk=", "commit": {"author": {"name": "g3xzh", "email": "g3xzh@yahoo.com", "date": "2013-11-20T21:19:48Z"}, "committer": {"name": "g3xzh", "email": "g3xzh@yahoo.com", "date": "2013-11-22T11:24:16Z"}, "message": "Add more benchmark tests to vec.rs\n\nNew benchmark tests in vec.rs:\n`push`, `starts_with_same_vector`, `starts_with_single_element`,\n`starts_with_diff_one_element_end`, `ends_with_same_vector`,\n`ends_with_single_element`, `ends_with_diff_one_element_beginning` and\n`contains_last_element`", "tree": {"sha": "32875567b909308897e944be21d48cd771ece37d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/32875567b909308897e944be21d48cd771ece37d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/80dff186416180423fe8117cbd19930a6c813ed9", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/80dff186416180423fe8117cbd19930a6c813ed9", "html_url": "https://github.com/rust-lang/rust/commit/80dff186416180423fe8117cbd19930a6c813ed9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/80dff186416180423fe8117cbd19930a6c813ed9/comments", "author": {"login": "g3xzh", "id": 5985993, "node_id": "MDQ6VXNlcjU5ODU5OTM=", "avatar_url": "https://avatars.githubusercontent.com/u/5985993?v=4", "gravatar_id": "", "url": "https://api.github.com/users/g3xzh", "html_url": "https://github.com/g3xzh", "followers_url": "https://api.github.com/users/g3xzh/followers", "following_url": "https://api.github.com/users/g3xzh/following{/other_user}", "gists_url": "https://api.github.com/users/g3xzh/gists{/gist_id}", "starred_url": "https://api.github.com/users/g3xzh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/g3xzh/subscriptions", "organizations_url": "https://api.github.com/users/g3xzh/orgs", "repos_url": "https://api.github.com/users/g3xzh/repos", "events_url": "https://api.github.com/users/g3xzh/events{/privacy}", "received_events_url": "https://api.github.com/users/g3xzh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "g3xzh", "id": 5985993, "node_id": "MDQ6VXNlcjU5ODU5OTM=", "avatar_url": "https://avatars.githubusercontent.com/u/5985993?v=4", "gravatar_id": "", "url": "https://api.github.com/users/g3xzh", "html_url": "https://github.com/g3xzh", "followers_url": "https://api.github.com/users/g3xzh/followers", "following_url": "https://api.github.com/users/g3xzh/following{/other_user}", "gists_url": "https://api.github.com/users/g3xzh/gists{/gist_id}", "starred_url": "https://api.github.com/users/g3xzh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/g3xzh/subscriptions", "organizations_url": "https://api.github.com/users/g3xzh/orgs", "repos_url": "https://api.github.com/users/g3xzh/repos", "events_url": "https://api.github.com/users/g3xzh/events{/privacy}", "received_events_url": "https://api.github.com/users/g3xzh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76d484805074dba56dc544db15702ee542cd0711", "url": "https://api.github.com/repos/rust-lang/rust/commits/76d484805074dba56dc544db15702ee542cd0711", "html_url": "https://github.com/rust-lang/rust/commit/76d484805074dba56dc544db15702ee542cd0711"}], "stats": {"total": 72, "additions": 70, "deletions": 2}, "files": [{"sha": "5cc344fdfc1ab6189c7bf4f4ee6893a6b8787531", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 70, "deletions": 2, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/80dff186416180423fe8117cbd19930a6c813ed9/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80dff186416180423fe8117cbd19930a6c813ed9/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=80dff186416180423fe8117cbd19930a6c813ed9", "patch": "@@ -3862,10 +3862,10 @@ mod bench {\n     }\n \n     #[bench]\n-    fn add(b: &mut BenchHarness) {\n+    fn add(bh: &mut BenchHarness) {\n         let xs: &[int] = [5, ..10];\n         let ys: &[int] = [5, ..10];\n-        do b.iter() {\n+        do bh.iter() {\n             xs + ys;\n         }\n     }\n@@ -3885,4 +3885,72 @@ mod bench {\n             xss.connect_vec(&0);\n         }\n     }\n+\n+    #[bench]\n+    fn push(bh: &mut BenchHarness) {\n+        let mut vec: ~[uint] = ~[0u];\n+        do bh.iter() {\n+            vec.push(0);\n+        }\n+    }\n+\n+    #[bench]\n+    fn starts_with_same_vector(bh: &mut BenchHarness) {\n+        let vec: ~[uint] = vec::from_fn(100, |i| i);\n+        do bh.iter() {\n+            vec.starts_with(vec);\n+        }\n+    }\n+\n+    #[bench]\n+    fn starts_with_single_element(bh: &mut BenchHarness) {\n+        let vec: ~[uint] = ~[0u];\n+        do bh.iter() {\n+            vec.starts_with(vec);\n+        }\n+    }\n+\n+    #[bench]\n+    fn starts_with_diff_one_element_at_end(bh: &mut BenchHarness) {\n+        let vec: ~[uint] = vec::from_fn(100, |i| i);\n+        let mut match_vec: ~[uint] = vec::from_fn(99, |i| i);\n+        match_vec.push(0);\n+        do bh.iter() {\n+            vec.starts_with(match_vec);\n+        }\n+    }\n+\n+    #[bench]\n+    fn ends_with_same_vector(bh: &mut BenchHarness) {\n+        let vec: ~[uint] = vec::from_fn(100, |i| i);\n+        do bh.iter() {\n+            vec.ends_with(vec);\n+        }\n+    }\n+\n+    #[bench]\n+    fn ends_with_single_element(bh: &mut BenchHarness) {\n+        let vec: ~[uint] = ~[0u];\n+        do bh.iter() {\n+            vec.ends_with(vec);\n+        }\n+    }\n+\n+    #[bench]\n+    fn ends_with_diff_one_element_at_beginning(bh: &mut BenchHarness) {\n+        let vec: ~[uint] = vec::from_fn(100, |i| i);\n+        let mut match_vec: ~[uint] = vec::from_fn(100, |i| i);\n+        match_vec[0] = 200;\n+        do bh.iter() {\n+            vec.starts_with(match_vec);\n+        }\n+    }\n+\n+    #[bench]\n+    fn contains_last_element(bh: &mut BenchHarness) {\n+        let vec: ~[uint] = vec::from_fn(100, |i| i);\n+        do bh.iter() {\n+                vec.contains(&99u);\n+        }\n+    }\n }"}]}