{"sha": "1a8a0a77b14c44d98501cd9fb0f14ed88d4c38d9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhOGEwYTc3YjE0YzQ0ZDk4NTAxY2Q5ZmIwZjE0ZWQ4OGQ0YzM4ZDk=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-11T02:02:41Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-11T02:02:57Z"}, "message": "Camel case std::serialization", "tree": {"sha": "420e9a1642cc6265bee4490f5fd6404b0d709599", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/420e9a1642cc6265bee4490f5fd6404b0d709599"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a8a0a77b14c44d98501cd9fb0f14ed88d4c38d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a8a0a77b14c44d98501cd9fb0f14ed88d4c38d9", "html_url": "https://github.com/rust-lang/rust/commit/1a8a0a77b14c44d98501cd9fb0f14ed88d4c38d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a8a0a77b14c44d98501cd9fb0f14ed88d4c38d9/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8b3eaae820f87a5d51fe382aef5e9f8256beb29", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8b3eaae820f87a5d51fe382aef5e9f8256beb29", "html_url": "https://github.com/rust-lang/rust/commit/f8b3eaae820f87a5d51fe382aef5e9f8256beb29"}], "stats": {"total": 129, "additions": 66, "deletions": 63}, "files": [{"sha": "4b634677583b144f5fc9ff2c850eb8187632347c", "filename": "src/libstd/ebml.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a8a0a77b14c44d98501cd9fb0f14ed88d4c38d9/src%2Flibstd%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a8a0a77b14c44d98501cd9fb0f14ed88d4c38d9/src%2Flibstd%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Febml.rs?ref=1a8a0a77b14c44d98501cd9fb0f14ed88d4c38d9", "patch": "@@ -340,7 +340,7 @@ impl ebml::Writer: SerializerPriv {\n     }\n }\n \n-impl ebml::Writer: serialization::serializer {\n+impl ebml::Writer: serialization::Serializer {\n     fn emit_nil() {}\n \n     fn emit_uint(v: uint) { self.wr_tagged_u64(EsUint as uint, v as u64); }\n@@ -462,7 +462,7 @@ priv impl EbmlDeserializer {\n     }\n }\n \n-impl EbmlDeserializer: serialization::deserializer {\n+impl EbmlDeserializer: serialization::Deserializer {\n     fn read_nil() -> () { () }\n \n     fn read_u64() -> u64 { ebml::doc_as_u64(self.next_doc(EsU64)) }"}, {"sha": "fa4c41dfa136470195d682ae6b5d2776d42dce8a", "filename": "src/libstd/prettyprint.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a8a0a77b14c44d98501cd9fb0f14ed88d4c38d9/src%2Flibstd%2Fprettyprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a8a0a77b14c44d98501cd9fb0f14ed88d4c38d9/src%2Flibstd%2Fprettyprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprettyprint.rs?ref=1a8a0a77b14c44d98501cd9fb0f14ed88d4c38d9", "patch": "@@ -3,9 +3,9 @@\n \n use io::Writer;\n use io::WriterUtil;\n-use serialization::serializer;\n+use serialization::Serializer;\n \n-impl Writer: serializer {\n+impl Writer: Serializer {\n     fn emit_nil() {\n         self.write_str(~\"()\")\n     }"}, {"sha": "64254d5b2e553ee14dfcfdb8761763eb32b6aaa6", "filename": "src/libstd/serialization.rs", "status": "modified", "additions": 47, "deletions": 41, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/1a8a0a77b14c44d98501cd9fb0f14ed88d4c38d9/src%2Flibstd%2Fserialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a8a0a77b14c44d98501cd9fb0f14ed88d4c38d9/src%2Flibstd%2Fserialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fserialization.rs?ref=1a8a0a77b14c44d98501cd9fb0f14ed88d4c38d9", "patch": "@@ -1,12 +1,18 @@\n //! Support code for serialization.\n \n-use core;\n+// XXX remove\n+#[cfg(stage0)]\n+#[allow(non_camel_case_types)]\n+type serializer = Serializer;\n+#[cfg(stage0)]\n+#[allow(non_camel_case_types)]\n+type deserializer = Deserializer;\n \n /*\n Core serialization interfaces.\n */\n \n-trait serializer {\n+trait Serializer {\n     // Primitive types:\n     fn emit_nil();\n     fn emit_uint(v: uint);\n@@ -39,7 +45,7 @@ trait serializer {\n     fn emit_tup_elt(idx: uint, f: fn());\n }\n \n-trait deserializer {\n+trait Deserializer {\n     // Primitive types:\n     fn read_nil() -> ();\n \n@@ -83,7 +89,7 @@ trait deserializer {\n //\n // In some cases, these should eventually be coded as traits.\n \n-fn emit_from_vec<S: serializer, T>(s: S, v: ~[T], f: fn(T)) {\n+fn emit_from_vec<S: Serializer, T>(s: S, v: ~[T], f: fn(T)) {\n     do s.emit_vec(vec::len(v)) {\n         do vec::iteri(v) |i,e| {\n             do s.emit_vec_elt(i) {\n@@ -93,155 +99,155 @@ fn emit_from_vec<S: serializer, T>(s: S, v: ~[T], f: fn(T)) {\n     }\n }\n \n-fn read_to_vec<D: deserializer, T: Copy>(d: D, f: fn() -> T) -> ~[T] {\n+fn read_to_vec<D: Deserializer, T: Copy>(d: D, f: fn() -> T) -> ~[T] {\n     do d.read_vec |len| {\n         do vec::from_fn(len) |i| {\n             d.read_vec_elt(i, || f())\n         }\n     }\n }\n \n-trait serializer_helpers {\n+trait SerializerHelpers {\n     fn emit_from_vec<T>(v: ~[T], f: fn(T));\n }\n \n-impl<S: serializer> S: serializer_helpers {\n+impl<S: Serializer> S: SerializerHelpers {\n     fn emit_from_vec<T>(v: ~[T], f: fn(T)) {\n         emit_from_vec(self, v, f)\n     }\n }\n \n-trait deserializer_helpers {\n+trait DeserializerHelpers {\n     fn read_to_vec<T: Copy>(f: fn() -> T) -> ~[T];\n }\n \n-impl<D: deserializer> D: deserializer_helpers {\n+impl<D: Deserializer> D: DeserializerHelpers {\n     fn read_to_vec<T: Copy>(f: fn() -> T) -> ~[T] {\n         read_to_vec(self, f)\n     }\n }\n \n-fn serialize_uint<S: serializer>(s: S, v: uint) {\n+fn serialize_uint<S: Serializer>(s: S, v: uint) {\n     s.emit_uint(v);\n }\n \n-fn deserialize_uint<D: deserializer>(d: D) -> uint {\n+fn deserialize_uint<D: Deserializer>(d: D) -> uint {\n     d.read_uint()\n }\n \n-fn serialize_u8<S: serializer>(s: S, v: u8) {\n+fn serialize_u8<S: Serializer>(s: S, v: u8) {\n     s.emit_u8(v);\n }\n \n-fn deserialize_u8<D: deserializer>(d: D) -> u8 {\n+fn deserialize_u8<D: Deserializer>(d: D) -> u8 {\n     d.read_u8()\n }\n \n-fn serialize_u16<S: serializer>(s: S, v: u16) {\n+fn serialize_u16<S: Serializer>(s: S, v: u16) {\n     s.emit_u16(v);\n }\n \n-fn deserialize_u16<D: deserializer>(d: D) -> u16 {\n+fn deserialize_u16<D: Deserializer>(d: D) -> u16 {\n     d.read_u16()\n }\n \n-fn serialize_u32<S: serializer>(s: S, v: u32) {\n+fn serialize_u32<S: Serializer>(s: S, v: u32) {\n     s.emit_u32(v);\n }\n \n-fn deserialize_u32<D: deserializer>(d: D) -> u32 {\n+fn deserialize_u32<D: Deserializer>(d: D) -> u32 {\n     d.read_u32()\n }\n \n-fn serialize_u64<S: serializer>(s: S, v: u64) {\n+fn serialize_u64<S: Serializer>(s: S, v: u64) {\n     s.emit_u64(v);\n }\n \n-fn deserialize_u64<D: deserializer>(d: D) -> u64 {\n+fn deserialize_u64<D: Deserializer>(d: D) -> u64 {\n     d.read_u64()\n }\n \n-fn serialize_int<S: serializer>(s: S, v: int) {\n+fn serialize_int<S: Serializer>(s: S, v: int) {\n     s.emit_int(v);\n }\n \n-fn deserialize_int<D: deserializer>(d: D) -> int {\n+fn deserialize_int<D: Deserializer>(d: D) -> int {\n     d.read_int()\n }\n \n-fn serialize_i8<S: serializer>(s: S, v: i8) {\n+fn serialize_i8<S: Serializer>(s: S, v: i8) {\n     s.emit_i8(v);\n }\n \n-fn deserialize_i8<D: deserializer>(d: D) -> i8 {\n+fn deserialize_i8<D: Deserializer>(d: D) -> i8 {\n     d.read_i8()\n }\n \n-fn serialize_i16<S: serializer>(s: S, v: i16) {\n+fn serialize_i16<S: Serializer>(s: S, v: i16) {\n     s.emit_i16(v);\n }\n \n-fn deserialize_i16<D: deserializer>(d: D) -> i16 {\n+fn deserialize_i16<D: Deserializer>(d: D) -> i16 {\n     d.read_i16()\n }\n \n-fn serialize_i32<S: serializer>(s: S, v: i32) {\n+fn serialize_i32<S: Serializer>(s: S, v: i32) {\n     s.emit_i32(v);\n }\n \n-fn deserialize_i32<D: deserializer>(d: D) -> i32 {\n+fn deserialize_i32<D: Deserializer>(d: D) -> i32 {\n     d.read_i32()\n }\n \n-fn serialize_i64<S: serializer>(s: S, v: i64) {\n+fn serialize_i64<S: Serializer>(s: S, v: i64) {\n     s.emit_i64(v);\n }\n \n-fn deserialize_i64<D: deserializer>(d: D) -> i64 {\n+fn deserialize_i64<D: Deserializer>(d: D) -> i64 {\n     d.read_i64()\n }\n \n-fn serialize_str<S: serializer>(s: S, v: &str) {\n+fn serialize_str<S: Serializer>(s: S, v: &str) {\n     s.emit_str(v);\n }\n \n-fn deserialize_str<D: deserializer>(d: D) -> ~str {\n+fn deserialize_str<D: Deserializer>(d: D) -> ~str {\n     d.read_str()\n }\n \n-fn serialize_float<S: serializer>(s: S, v: float) {\n+fn serialize_float<S: Serializer>(s: S, v: float) {\n     s.emit_float(v);\n }\n \n-fn deserialize_float<D: deserializer>(d: D) -> float {\n+fn deserialize_float<D: Deserializer>(d: D) -> float {\n     d.read_float()\n }\n \n-fn serialize_f32<S: serializer>(s: S, v: f32) {\n+fn serialize_f32<S: Serializer>(s: S, v: f32) {\n     s.emit_f32(v);\n }\n \n-fn deserialize_f32<D: deserializer>(d: D) -> f32 {\n+fn deserialize_f32<D: Deserializer>(d: D) -> f32 {\n     d.read_f32()\n }\n \n-fn serialize_f64<S: serializer>(s: S, v: f64) {\n+fn serialize_f64<S: Serializer>(s: S, v: f64) {\n     s.emit_f64(v);\n }\n \n-fn deserialize_f64<D: deserializer>(d: D) -> f64 {\n+fn deserialize_f64<D: Deserializer>(d: D) -> f64 {\n     d.read_f64()\n }\n \n-fn serialize_bool<S: serializer>(s: S, v: bool) {\n+fn serialize_bool<S: Serializer>(s: S, v: bool) {\n     s.emit_bool(v);\n }\n \n-fn deserialize_bool<D: deserializer>(d: D) -> bool {\n+fn deserialize_bool<D: Deserializer>(d: D) -> bool {\n     d.read_bool()\n }\n \n-fn serialize_Option<S: serializer,T>(s: S, v: Option<T>, st: fn(T)) {\n+fn serialize_Option<S: Serializer,T>(s: S, v: Option<T>, st: fn(T)) {\n     do s.emit_enum(~\"option\") {\n         match v {\n           None => do s.emit_enum_variant(~\"none\", 0u, 0u) {\n@@ -256,7 +262,7 @@ fn serialize_Option<S: serializer,T>(s: S, v: Option<T>, st: fn(T)) {\n     }\n }\n \n-fn deserialize_Option<D: deserializer,T: Copy>(d: D, st: fn() -> T)\n+fn deserialize_Option<D: Deserializer,T: Copy>(d: D, st: fn() -> T)\n     -> Option<T> {\n     do d.read_enum(~\"option\") {\n         do d.read_enum_variant |i| {"}, {"sha": "3442725cbdb2eecea41401f7c8868e4f40cd42d5", "filename": "src/libstd/std.rc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1a8a0a77b14c44d98501cd9fb0f14ed88d4c38d9/src%2Flibstd%2Fstd.rc", "raw_url": "https://github.com/rust-lang/rust/raw/1a8a0a77b14c44d98501cd9fb0f14ed88d4c38d9/src%2Flibstd%2Fstd.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstd.rc?ref=1a8a0a77b14c44d98501cd9fb0f14ed88d4c38d9", "patch": "@@ -91,7 +91,6 @@ mod unicode;\n // Compiler support modules\n \n mod test;\n-#[allow(non_camel_case_types)] // XXX\n mod serialization;\n \n // Local Variables:"}, {"sha": "3d3fd5bfd11f2e67a8a473748f6413f3452f4f80", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1a8a0a77b14c44d98501cd9fb0f14ed88d4c38d9/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a8a0a77b14c44d98501cd9fb0f14ed88d4c38d9/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=1a8a0a77b14c44d98501cd9fb0f14ed88d4c38d9", "patch": "@@ -1,8 +1,8 @@\n // The Rust abstract syntax tree.\n \n use codemap::{span, filename};\n-use std::serialization::{serializer,\n-                            deserializer,\n+use std::serialization::{Serializer,\n+                            Deserializer,\n                             serialize_Option,\n                             deserialize_Option,\n                             serialize_uint,\n@@ -38,15 +38,15 @@ macro_rules! interner_key (\n         (-3 as uint, 0u)))\n )\n \n-fn serialize_ident<S: serializer>(s: S, i: ident) {\n+fn serialize_ident<S: Serializer>(s: S, i: ident) {\n     let intr = match unsafe{task::local_data_get(interner_key!())}{\n         None => fail ~\"serialization: TLS interner not set up\",\n         Some(intr) => intr\n     };\n \n     s.emit_str(*(*intr).get(i));\n }\n-fn deserialize_ident<D: deserializer>(d: D) -> ident  {\n+fn deserialize_ident<D: Deserializer>(d: D) -> ident  {\n     let intr = match unsafe{task::local_data_get(interner_key!())}{\n         None => fail ~\"deserialization: TLS interner not set up\",\n         Some(intr) => intr"}, {"sha": "1bb207adfc23c4f44abf424d6f3253cc4bdb8620", "filename": "src/libsyntax/ext/auto_serialize.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a8a0a77b14c44d98501cd9fb0f14ed88d4c38d9/src%2Flibsyntax%2Fext%2Fauto_serialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a8a0a77b14c44d98501cd9fb0f14ed88d4c38d9/src%2Flibsyntax%2Fext%2Fauto_serialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fauto_serialize.rs?ref=1a8a0a77b14c44d98501cd9fb0f14ed88d4c38d9", "patch": "@@ -583,7 +583,7 @@ fn mk_ser_fn(cx: ext_ctxt, span: span, name: ast::ident,\n         ast::bound_trait(cx.ty_path(span,\n                                     ~[cx.ident_of(~\"std\"),\n                                       cx.ident_of(~\"serialization\"),\n-                                      cx.ident_of(~\"serializer\")],\n+                                      cx.ident_of(~\"Serializer\")],\n                                     ~[]))];\n \n     let ser_tps: ~[ast::ty_param] =\n@@ -789,7 +789,7 @@ fn mk_deser_fn(cx: ext_ctxt, span: span,\n         ast::bound_trait(cx.ty_path(\n             span,\n             ~[cx.ident_of(~\"std\"), cx.ident_of(~\"serialization\"),\n-              cx.ident_of(~\"deserializer\")],\n+              cx.ident_of(~\"Deserializer\")],\n             ~[]))];\n \n     let deser_tps: ~[ast::ty_param] ="}, {"sha": "5f1bdf2ff3e9e49570ea4c0047550b28f982e87e", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a8a0a77b14c44d98501cd9fb0f14ed88d4c38d9/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a8a0a77b14c44d98501cd9fb0f14ed88d4c38d9/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=1a8a0a77b14c44d98501cd9fb0f14ed88d4c38d9", "patch": "@@ -1,8 +1,8 @@\n use util::interner;\n use util::interner::interner;\n use std::map::{HashMap, str_hash};\n-use std::serialization::{serializer,\n-                            deserializer,\n+use std::serialization::{Serializer,\n+                            Deserializer,\n                             serialize_uint,\n                             deserialize_uint,\n                             serialize_i64,"}, {"sha": "2bbfdfbe0e5a2f7fa07b308b7e1aad9ad51e6b8c", "filename": "src/rustc/metadata/encoder.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a8a0a77b14c44d98501cd9fb0f14ed88d4c38d9/src%2Frustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a8a0a77b14c44d98501cd9fb0f14ed88d4c38d9/src%2Frustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fencoder.rs?ref=1a8a0a77b14c44d98501cd9fb0f14ed88d4c38d9", "patch": "@@ -16,8 +16,6 @@ use middle::ty::node_id_to_type;\n use middle::resolve;\n use syntax::ast_map;\n use syntax::attr;\n-use std::serialization::serializer;\n-use std::ebml::serializer;\n use str::to_bytes;\n use syntax::ast;\n use syntax::diagnostic::span_handler;"}, {"sha": "85e4a5f2e1827b8c6e1cc912813407a24164a65d", "filename": "src/rustc/middle/astencode.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1a8a0a77b14c44d98501cd9fb0f14ed88d4c38d9/src%2Frustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a8a0a77b14c44d98501cd9fb0f14ed88d4c38d9/src%2Frustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fastencode.rs?ref=1a8a0a77b14c44d98501cd9fb0f14ed88d4c38d9", "patch": "@@ -11,11 +11,11 @@ use std::ebml;\n use std::ebml::Writer;\n use std::ebml::get_doc;\n use std::map::HashMap;\n-use std::serialization::serializer;\n-use std::serialization::deserializer;\n-use std::serialization::serializer_helpers;\n-use std::serialization::deserializer_helpers;\n-use std::prettyprint::serializer;\n+use std::serialization::Serializer;\n+use std::serialization::Deserializer;\n+use std::serialization::SerializerHelpers;\n+use std::serialization::DeserializerHelpers;\n+use std::prettyprint::Serializer;\n use middle::{ty, typeck};\n use middle::typeck::{method_origin, method_map_entry,\n                         serialize_method_map_entry,\n@@ -189,7 +189,7 @@ trait def_id_serializer_helpers {\n     fn emit_def_id(did: ast::def_id);\n }\n \n-impl<S: serializer> S: def_id_serializer_helpers {\n+impl<S: Serializer> S: def_id_serializer_helpers {\n     fn emit_def_id(did: ast::def_id) {\n         ast::serialize_def_id(self, did)\n     }\n@@ -199,7 +199,7 @@ trait def_id_deserializer_helpers {\n     fn read_def_id(xcx: extended_decode_ctxt) -> ast::def_id;\n }\n \n-impl<D: deserializer> D: def_id_deserializer_helpers {\n+impl<D: Deserializer> D: def_id_deserializer_helpers {\n \n     fn read_def_id(xcx: extended_decode_ctxt) -> ast::def_id {\n         let did = ast::deserialize_def_id(self);"}]}