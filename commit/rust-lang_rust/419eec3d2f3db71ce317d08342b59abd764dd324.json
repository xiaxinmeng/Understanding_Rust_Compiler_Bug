{"sha": "419eec3d2f3db71ce317d08342b59abd764dd324", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxOWVlYzNkMmYzZGI3MWNlMzE3ZDA4MzQyYjU5YWJkNzY0ZGQzMjQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-09-05T19:50:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-09-05T19:50:06Z"}, "message": "Merge #1771\n\n1771: Further tweak for macro_use on extern crate r=matklad a=uHOOCCOOHu\n\nSome more tweaks to #1743 to behave more like `rustc`\r\n1. Hoist macros from `#[macro_use] extern crate`, so that they can be used before `extern crate`.\r\n2. Implicit `#[macro_use]` for `prelude` if exists\r\n\n\nCo-authored-by: uHOOCCOOHu <hooccooh1896@gmail.com>", "tree": {"sha": "6059313b802495854f264c1ab39f23997dad3042", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6059313b802495854f264c1ab39f23997dad3042"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/419eec3d2f3db71ce317d08342b59abd764dd324", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdcWbuCRBK7hj4Ov3rIwAAdHIIAKz0gl+ivTi4/CCPdRuARB2H\nobtcbu8S5wijeEqDUP06hjE8y4B8ZGmOxWqdRWeg+8WnNbadDU71JtF/yZS1byAy\nvQFfTtyvj/+IDbb+A86AQOiNx3ae3O9v8m+VBjHWdGRBLlwAQXzZAFSUV9e7D7fO\nqQ5NjmKIRX+vJbX5ZbaZQLCI/+Dty3jnrfDXPu2Rb9fU5xYn8PcBcQGEPW6DjFGc\ns9cGjo5rh1dRpNo1YcBiiEDqYeBld/UtNOmSAQ5NhX4+VofifbTsbyCJDVqy5OFR\nbaYGrtnHxA90DSpeSNNrTsts5eCcpd1IL5c8zXmrgWP1y7tfYh4EyiXMBiTYNvs=\n=AeDx\n-----END PGP SIGNATURE-----\n", "payload": "tree 6059313b802495854f264c1ab39f23997dad3042\nparent c705fff309ef5ec41c37339ba0bb61d3b24b515d\nparent 67d33cc21a84e38d97cbf2cedcafac0089aa9162\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1567713006 +0000\ncommitter GitHub <noreply@github.com> 1567713006 +0000\n\nMerge #1771\n\n1771: Further tweak for macro_use on extern crate r=matklad a=uHOOCCOOHu\n\nSome more tweaks to #1743 to behave more like `rustc`\r\n1. Hoist macros from `#[macro_use] extern crate`, so that they can be used before `extern crate`.\r\n2. Implicit `#[macro_use]` for `prelude` if exists\r\n\n\nCo-authored-by: uHOOCCOOHu <hooccooh1896@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/419eec3d2f3db71ce317d08342b59abd764dd324", "html_url": "https://github.com/rust-lang/rust/commit/419eec3d2f3db71ce317d08342b59abd764dd324", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/419eec3d2f3db71ce317d08342b59abd764dd324/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c705fff309ef5ec41c37339ba0bb61d3b24b515d", "url": "https://api.github.com/repos/rust-lang/rust/commits/c705fff309ef5ec41c37339ba0bb61d3b24b515d", "html_url": "https://github.com/rust-lang/rust/commit/c705fff309ef5ec41c37339ba0bb61d3b24b515d"}, {"sha": "67d33cc21a84e38d97cbf2cedcafac0089aa9162", "url": "https://api.github.com/repos/rust-lang/rust/commits/67d33cc21a84e38d97cbf2cedcafac0089aa9162", "html_url": "https://github.com/rust-lang/rust/commit/67d33cc21a84e38d97cbf2cedcafac0089aa9162"}], "stats": {"total": 109, "additions": 91, "deletions": 18}, "files": [{"sha": "fe119b97c54b6f11102718777d386ce6cea270bd", "filename": "crates/ra_hir/src/marks.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/419eec3d2f3db71ce317d08342b59abd764dd324/crates%2Fra_hir%2Fsrc%2Fmarks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419eec3d2f3db71ce317d08342b59abd764dd324/crates%2Fra_hir%2Fsrc%2Fmarks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fmarks.rs?ref=419eec3d2f3db71ce317d08342b59abd764dd324", "patch": "@@ -12,4 +12,5 @@ test_utils::marks!(\n     trait_resolution_on_fn_type\n     infer_while_let\n     macro_rules_from_other_crates_are_visible_with_macro_use\n+    prelude_is_macro_use\n );"}, {"sha": "5af26f953a61ac7e6224d1e98e5b375353dc89f8", "filename": "crates/ra_hir/src/nameres/collector.rs", "status": "modified", "additions": 30, "deletions": 15, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/419eec3d2f3db71ce317d08342b59abd764dd324/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419eec3d2f3db71ce317d08342b59abd764dd324/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs?ref=419eec3d2f3db71ce317d08342b59abd764dd324", "patch": "@@ -183,11 +183,14 @@ where\n \n         if let Some(ModuleDef::Module(m)) = res.take_types() {\n             tested_by!(macro_rules_from_other_crates_are_visible_with_macro_use);\n+            self.import_all_macros_exported(m);\n+        }\n+    }\n \n-            let item_map = self.db.crate_def_map(m.krate);\n-            for (name, &macro_id) in &item_map.exported_macros {\n-                self.global_macro_scope.insert(name.clone(), macro_id);\n-            }\n+    fn import_all_macros_exported(&mut self, module: Module) {\n+        let item_map = self.db.crate_def_map(module.krate);\n+        for (name, &macro_id) in &item_map.exported_macros {\n+            self.global_macro_scope.insert(name.clone(), macro_id);\n         }\n     }\n \n@@ -520,20 +523,32 @@ where\n     DB: DefDatabase,\n {\n     fn collect(&mut self, items: &[raw::RawItem]) {\n+        // Prelude module is always considered to be `#[macro_use]`.\n+        if let Some(prelude_module) = self.def_collector.def_map.prelude {\n+            tested_by!(prelude_is_macro_use);\n+            self.def_collector.import_all_macros_exported(prelude_module);\n+        }\n+\n+        // This should be processed eagerly instead of deferred to resolving.\n+        // `#[macro_use] extern crate` is hoisted to imports macros before collecting\n+        // any other items.\n+        for item in items {\n+            if let raw::RawItem::Import(import_id) = *item {\n+                let import = self.raw_items[import_id].clone();\n+                if import.is_extern_crate && import.is_macro_use {\n+                    self.def_collector.import_macros_from_extern_crate(&import);\n+                }\n+            }\n+        }\n+\n         for item in items {\n             match *item {\n                 raw::RawItem::Module(m) => self.collect_module(&self.raw_items[m]),\n-                raw::RawItem::Import(import_id) => {\n-                    let import = self.raw_items[import_id].clone();\n-                    // This should be processed eagerly instead of deferred to resolving.\n-                    // Otherwise, since it will only mutate `global_macro_scope`\n-                    // without `update` names in `mod`s, unresolved macros cannot be expanded.\n-                    if import.is_extern_crate && import.is_macro_use {\n-                        self.def_collector.import_macros_from_extern_crate(&import);\n-                    }\n-\n-                    self.def_collector.unresolved_imports.push((self.module_id, import_id, import));\n-                }\n+                raw::RawItem::Import(import_id) => self.def_collector.unresolved_imports.push((\n+                    self.module_id,\n+                    import_id,\n+                    self.raw_items[import_id].clone(),\n+                )),\n                 raw::RawItem::Def(def) => self.define_def(&self.raw_items[def]),\n                 raw::RawItem::Macro(mac) => self.collect_macro(&self.raw_items[mac]),\n             }"}, {"sha": "aece1515b5b294ec087caf88a32d9e4dcaadef91", "filename": "crates/ra_hir/src/nameres/tests/macros.rs", "status": "modified", "additions": 60, "deletions": 3, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/419eec3d2f3db71ce317d08342b59abd764dd324/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419eec3d2f3db71ce317d08342b59abd764dd324/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs?ref=419eec3d2f3db71ce317d08342b59abd764dd324", "patch": "@@ -144,16 +144,16 @@ fn macro_rules_from_other_crates_are_visible_with_macro_use() {\n     let map = def_map_with_crate_graph(\n         \"\n         //- /main.rs\n-        #[macro_use]\n-        extern crate foo;\n-\n         structs!(Foo);\n         structs_priv!(Bar);\n         structs_not_exported!(MacroNotResolved1);\n         crate::structs!(MacroNotResolved2);\n \n         mod bar;\n \n+        #[macro_use]\n+        extern crate foo;\n+\n         //- /bar.rs\n         structs!(Baz);\n         crate::structs!(MacroNotResolved3);\n@@ -191,3 +191,60 @@ fn macro_rules_from_other_crates_are_visible_with_macro_use() {\n    \u22eeBaz: t v\n     \"###);\n }\n+\n+#[test]\n+fn prelude_is_macro_use() {\n+    covers!(prelude_is_macro_use);\n+    let map = def_map_with_crate_graph(\n+        \"\n+        //- /main.rs\n+        structs!(Foo);\n+        structs_priv!(Bar);\n+        structs_outside!(Out);\n+        crate::structs!(MacroNotResolved2);\n+\n+        mod bar;\n+\n+        //- /bar.rs\n+        structs!(Baz);\n+        crate::structs!(MacroNotResolved3);\n+\n+        //- /lib.rs\n+        #[prelude_import]\n+        use self::prelude::*;\n+\n+        mod prelude {\n+            #[macro_export]\n+            macro_rules! structs {\n+                ($i:ident) => { struct $i; }\n+            }\n+\n+            mod priv_mod {\n+                #[macro_export]\n+                macro_rules! structs_priv {\n+                    ($i:ident) => { struct $i; }\n+                }\n+            }\n+        }\n+\n+        #[macro_export]\n+        macro_rules! structs_outside {\n+            ($i:ident) => { struct $i; }\n+        }\n+        \",\n+        crate_graph! {\n+            \"main\": (\"/main.rs\", [\"foo\"]),\n+            \"foo\": (\"/lib.rs\", []),\n+        },\n+    );\n+    assert_snapshot!(map, @r###\"\n+   \u22eecrate\n+   \u22eeBar: t v\n+   \u22eeFoo: t v\n+   \u22eeOut: t v\n+   \u22eebar: t\n+   \u22ee\n+   \u22eecrate::bar\n+   \u22eeBaz: t v\n+    \"###);\n+}"}]}