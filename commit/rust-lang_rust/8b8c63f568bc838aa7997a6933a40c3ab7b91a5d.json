{"sha": "8b8c63f568bc838aa7997a6933a40c3ab7b91a5d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiOGM2M2Y1NjhiYzgzOGFhNzk5N2E2OTMzYTQwYzNhYjdiOTFhNWQ=", "commit": {"author": {"name": "Long Louis Bui", "email": "louisbui2000@gmail.com", "date": "2020-09-30T19:13:12Z"}, "committer": {"name": "Eduardo Broto", "email": "ebroto@tutanota.com", "date": "2020-10-02T21:12:40Z"}, "message": "changed non_copy_const lints to warn by default", "tree": {"sha": "995b61af0627e796900a1793ca150e9c10dc57e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/995b61af0627e796900a1793ca150e9c10dc57e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b8c63f568bc838aa7997a6933a40c3ab7b91a5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b8c63f568bc838aa7997a6933a40c3ab7b91a5d", "html_url": "https://github.com/rust-lang/rust/commit/8b8c63f568bc838aa7997a6933a40c3ab7b91a5d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b8c63f568bc838aa7997a6933a40c3ab7b91a5d/comments", "author": {"login": "longlb", "id": 32045614, "node_id": "MDQ6VXNlcjMyMDQ1NjE0", "avatar_url": "https://avatars.githubusercontent.com/u/32045614?v=4", "gravatar_id": "", "url": "https://api.github.com/users/longlb", "html_url": "https://github.com/longlb", "followers_url": "https://api.github.com/users/longlb/followers", "following_url": "https://api.github.com/users/longlb/following{/other_user}", "gists_url": "https://api.github.com/users/longlb/gists{/gist_id}", "starred_url": "https://api.github.com/users/longlb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/longlb/subscriptions", "organizations_url": "https://api.github.com/users/longlb/orgs", "repos_url": "https://api.github.com/users/longlb/repos", "events_url": "https://api.github.com/users/longlb/events{/privacy}", "received_events_url": "https://api.github.com/users/longlb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ebroto", "id": 816908, "node_id": "MDQ6VXNlcjgxNjkwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/816908?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebroto", "html_url": "https://github.com/ebroto", "followers_url": "https://api.github.com/users/ebroto/followers", "following_url": "https://api.github.com/users/ebroto/following{/other_user}", "gists_url": "https://api.github.com/users/ebroto/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebroto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebroto/subscriptions", "organizations_url": "https://api.github.com/users/ebroto/orgs", "repos_url": "https://api.github.com/users/ebroto/repos", "events_url": "https://api.github.com/users/ebroto/events{/privacy}", "received_events_url": "https://api.github.com/users/ebroto/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0eac45db4c065cd45fde8413623b9fc338fee4b", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0eac45db4c065cd45fde8413623b9fc338fee4b", "html_url": "https://github.com/rust-lang/rust/commit/f0eac45db4c065cd45fde8413623b9fc338fee4b"}], "stats": {"total": 36, "additions": 28, "deletions": 8}, "files": [{"sha": "71bd7c4f82a44738613f225cf2624816e05f07ce", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b8c63f568bc838aa7997a6933a40c3ab7b91a5d/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b8c63f568bc838aa7997a6933a40c3ab7b91a5d/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=8b8c63f568bc838aa7997a6933a40c3ab7b91a5d", "patch": "@@ -1604,6 +1604,8 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&mut_reference::UNNECESSARY_MUT_PASSED),\n         LintId::of(&neg_multiply::NEG_MULTIPLY),\n         LintId::of(&new_without_default::NEW_WITHOUT_DEFAULT),\n+        LintId::of(&non_copy_const::BORROW_INTERIOR_MUTABLE_CONST),\n+        LintId::of(&non_copy_const::DECLARE_INTERIOR_MUTABLE_CONST),\n         LintId::of(&non_expressive_names::JUST_UNDERSCORES_AND_DIGITS),\n         LintId::of(&non_expressive_names::MANY_SINGLE_CHAR_NAMES),\n         LintId::of(&panic_unimplemented::PANIC_PARAMS),\n@@ -1760,8 +1762,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&misc::FLOAT_CMP),\n         LintId::of(&misc::MODULO_ONE),\n         LintId::of(&mut_key::MUTABLE_KEY_TYPE),\n-        LintId::of(&non_copy_const::BORROW_INTERIOR_MUTABLE_CONST),\n-        LintId::of(&non_copy_const::DECLARE_INTERIOR_MUTABLE_CONST),\n         LintId::of(&open_options::NONSENSICAL_OPEN_OPTIONS),\n         LintId::of(&option_env_unwrap::OPTION_ENV_UNWRAP),\n         LintId::of(&ptr::MUT_FROM_REF),"}, {"sha": "7b662eae7753eef1571c09880064486ec15f2cd5", "filename": "clippy_lints/src/non_copy_const.rs", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/8b8c63f568bc838aa7997a6933a40c3ab7b91a5d/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b8c63f568bc838aa7997a6933a40c3ab7b91a5d/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_copy_const.rs?ref=8b8c63f568bc838aa7997a6933a40c3ab7b91a5d", "patch": "@@ -1,6 +1,6 @@\n //! Checks for uses of const which the type is not `Freeze` (`Cell`-free).\n //!\n-//! This lint is **deny** by default.\n+//! This lint is **warn** by default.\n \n use std::ptr;\n \n@@ -17,6 +17,8 @@ use rustc_typeck::hir_ty_to_ty;\n use crate::utils::{in_constant, qpath_res, span_lint_and_then};\n use if_chain::if_chain;\n \n+// FIXME: this is a correctness problem but there's no suitable\n+// warn-by-default category.\n declare_clippy_lint! {\n     /// **What it does:** Checks for declaration of `const` items which is interior\n     /// mutable (e.g., contains a `Cell`, `Mutex`, `AtomicXxxx`, etc.).\n@@ -34,6 +36,15 @@ declare_clippy_lint! {\n     /// `std::sync::ONCE_INIT` constant). In this case the use of `const` is legit,\n     /// and this lint should be suppressed.\n     ///\n+    /// When an enum has variants with interior mutability, use of its non interior mutable\n+    /// variants can generate false positives. See issue\n+    /// [#3962](https://github.com/rust-lang/rust-clippy/issues/3962)\n+    ///\n+    /// Types that have underlying or potential interior mutability trigger the lint whether\n+    /// the interior mutable field is used or not. See issues\n+    /// [#5812](https://github.com/rust-lang/rust-clippy/issues/5812) and\n+    /// [#3825](https://github.com/rust-lang/rust-clippy/issues/3825)\n+    ///\n     /// **Example:**\n     /// ```rust\n     /// use std::sync::atomic::{AtomicUsize, Ordering::SeqCst};\n@@ -49,10 +60,12 @@ declare_clippy_lint! {\n     /// assert_eq!(STATIC_ATOM.load(SeqCst), 9); // use a `static` item to refer to the same instance\n     /// ```\n     pub DECLARE_INTERIOR_MUTABLE_CONST,\n-    correctness,\n+    style,\n     \"declaring `const` with interior mutability\"\n }\n \n+// FIXME: this is a correctness problem but there's no suitable\n+// warn-by-default category.\n declare_clippy_lint! {\n     /// **What it does:** Checks if `const` items which is interior mutable (e.g.,\n     /// contains a `Cell`, `Mutex`, `AtomicXxxx`, etc.) has been borrowed directly.\n@@ -64,7 +77,14 @@ declare_clippy_lint! {\n     ///\n     /// The `const` value should be stored inside a `static` item.\n     ///\n-    /// **Known problems:** None\n+    /// **Known problems:** When an enum has variants with interior mutability, use of its non\n+    /// interior mutable variants can generate false positives. See issue\n+    /// [#3962](https://github.com/rust-lang/rust-clippy/issues/3962)\n+    ///\n+    /// Types that have underlying or potential interior mutability trigger the lint whether\n+    /// the interior mutable field is used or not. See issues\n+    /// [#5812](https://github.com/rust-lang/rust-clippy/issues/5812) and\n+    /// [#3825](https://github.com/rust-lang/rust-clippy/issues/3825)\n     ///\n     /// **Example:**\n     /// ```rust\n@@ -81,7 +101,7 @@ declare_clippy_lint! {\n     /// assert_eq!(STATIC_ATOM.load(SeqCst), 9); // use a `static` item to refer to the same instance\n     /// ```\n     pub BORROW_INTERIOR_MUTABLE_CONST,\n-    correctness,\n+    style,\n     \"referencing `const` with interior mutability\"\n }\n "}, {"sha": "ccdfac3a34b45836c8f8d2cf5b609c61786fe2e5", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b8c63f568bc838aa7997a6933a40c3ab7b91a5d/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b8c63f568bc838aa7997a6933a40c3ab7b91a5d/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=8b8c63f568bc838aa7997a6933a40c3ab7b91a5d", "patch": "@@ -110,7 +110,7 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n     },\n     Lint {\n         name: \"borrow_interior_mutable_const\",\n-        group: \"correctness\",\n+        group: \"style\",\n         desc: \"referencing `const` with interior mutability\",\n         deprecation: None,\n         module: \"non_copy_const\",\n@@ -334,7 +334,7 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n     },\n     Lint {\n         name: \"declare_interior_mutable_const\",\n-        group: \"correctness\",\n+        group: \"style\",\n         desc: \"declaring `const` with interior mutability\",\n         deprecation: None,\n         module: \"non_copy_const\","}]}