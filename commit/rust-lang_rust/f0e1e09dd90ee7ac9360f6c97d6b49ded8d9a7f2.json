{"sha": "f0e1e09dd90ee7ac9360f6c97d6b49ded8d9a7f2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwZTFlMDlkZDkwZWU3YWM5MzYwZjZjOTdkNmI0OWRlZDhkOWE3ZjI=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-02-03T00:40:52Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-02-09T06:58:49Z"}, "message": "Review changes", "tree": {"sha": "84ef58cd6e5aeddb28618679b562181486f664a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84ef58cd6e5aeddb28618679b562181486f664a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f0e1e09dd90ee7ac9360f6c97d6b49ded8d9a7f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f0e1e09dd90ee7ac9360f6c97d6b49ded8d9a7f2", "html_url": "https://github.com/rust-lang/rust/commit/f0e1e09dd90ee7ac9360f6c97d6b49ded8d9a7f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f0e1e09dd90ee7ac9360f6c97d6b49ded8d9a7f2/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cacd6b66f1ba4dc24f57cfeda4a41fc6eeb35762", "url": "https://api.github.com/repos/rust-lang/rust/commits/cacd6b66f1ba4dc24f57cfeda4a41fc6eeb35762", "html_url": "https://github.com/rust-lang/rust/commit/cacd6b66f1ba4dc24f57cfeda4a41fc6eeb35762"}], "stats": {"total": 100, "additions": 61, "deletions": 39}, "files": [{"sha": "cd664b7388cd877c9bdb7e0e500ccef519963c8d", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0e1e09dd90ee7ac9360f6c97d6b49ded8d9a7f2/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0e1e09dd90ee7ac9360f6c97d6b49ded8d9a7f2/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=f0e1e09dd90ee7ac9360f6c97d6b49ded8d9a7f2", "patch": "@@ -36,8 +36,8 @@ use syntax::parse::token::InternedString;\n use getopts;\n use std::collections::HashMap;\n use std::collections::hash_map::Entry::{Occupied, Vacant};\n+use std::env;\n use std::fmt;\n-use std::os;\n \n use llvm;\n "}, {"sha": "d82c160fdee9b543fc65d58fa75960c7631daf86", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f0e1e09dd90ee7ac9360f6c97d6b49ded8d9a7f2/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0e1e09dd90ee7ac9360f6c97d6b49ded8d9a7f2/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=f0e1e09dd90ee7ac9360f6c97d6b49ded8d9a7f2", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -27,6 +27,7 @@ use rustc_trans::back::write;\n use rustc_trans::trans;\n use rustc_typeck as typeck;\n use rustc_privacy;\n+use super::Compilation;\n \n use serialize::json;\n \n@@ -55,7 +56,7 @@ pub fn compile_input(sess: Session,\n             let state = $make_state;\n             (control.$point.callback)(state);\n         }\n-        if control.$point.stop {\n+        if control.$point.stop == Compilation::Stop {\n             return;\n         }\n     })}\n@@ -206,14 +207,14 @@ impl<'a> CompileController<'a> {\n }\n \n pub struct PhaseController<'a> {\n-    pub stop: bool,\n+    pub stop: Compilation,\n     pub callback: Box<Fn(CompileState) -> () + 'a>,\n }\n \n impl<'a> PhaseController<'a> {\n     pub fn basic() -> PhaseController<'a> {\n         PhaseController {\n-            stop: false,\n+            stop: Compilation::Continue,\n             callback: box |_| {},\n         }\n     }"}, {"sha": "0c936698e6d9aaaf71501d7948706b172f7e9394", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 46, "deletions": 27, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/f0e1e09dd90ee7ac9360f6c97d6b49ded8d9a7f2/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0e1e09dd90ee7ac9360f6c97d6b49ded8d9a7f2/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=f0e1e09dd90ee7ac9360f6c97d6b49ded8d9a7f2", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2014-2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -108,8 +108,9 @@ pub fn run(args: Vec<String>) -> int {\n pub fn run_compiler<'a>(args: &[String],\n                         callbacks: &mut CompilerCalls<'a>) {\n     macro_rules! do_or_return {($expr: expr) => {\n-        if $expr {\n-            return;\n+        match $expr {\n+            Compilation::Stop => return,\n+            Compilation::Continue => {}\n         }\n     }}\n \n@@ -144,7 +145,7 @@ pub fn run_compiler<'a>(args: &[String],\n     // It is somewhat unfortunate that this is hardwired in - this is forced by\n     // the fact that pretty_print_input requires the session by value.\n     let pretty = callbacks.parse_pretty(&sess, &matches);\n-        match pretty.into_iter().next() {\n+    match pretty {\n         Some((ppm, opt_uii)) => {\n             pretty::pretty_print_input(sess, cfg, &input, ppm, opt_uii, ofile);\n             return;\n@@ -180,26 +181,43 @@ fn make_input(free_matches: &[String]) -> Option<(Input, Option<Path>)> {\n     }\n }\n \n+// Whether to stop or continue compilation.\n+#[derive(Copy, Debug, Eq, PartialEq)]\n+pub enum Compilation {\n+    Stop,\n+    Continue,\n+}\n+\n+impl Compilation {\n+    pub fn and_then<F: FnOnce() -> Compilation>(self, next: F) -> Compilation {\n+        match self {\n+            Compilation::Stop => Compilation::Stop,\n+            Compilation::Continue => next()\n+        }\n+    }\n+}\n+\n // A trait for customising the compilation process. Offers a number of hooks for\n // executing custom code or customising input.\n pub trait CompilerCalls<'a> {\n     // Hook for a callback early in the process of handling arguments. This will\n     // be called straight after options have been parsed but before anything\n-    // else (e.g., selecting input and output). Return true to terminate compilation,\n-    // false to continue.\n-    fn early_callback(&mut self, &getopts::Matches, &diagnostics::registry::Registry) -> bool;\n+    // else (e.g., selecting input and output).\n+    fn early_callback(&mut self,\n+                      &getopts::Matches,\n+                      &diagnostics::registry::Registry)\n+                      -> Compilation;\n \n     // Hook for a callback late in the process of handling arguments. This will\n     // be called just before actual compilation starts (and before build_controller\n-    // is called), after all arguments etc. have been completely handled. Return\n-    // true to terminate compilation, false to continue.\n+    // is called), after all arguments etc. have been completely handled.\n     fn late_callback(&mut self,\n                      &getopts::Matches,\n                      &Session,\n                      &Input,\n                      &Option<Path>,\n                      &Option<Path>)\n-                     -> bool;\n+                     -> Compilation;\n \n     // Called after we extract the input from the arguments. Gives the implementer\n     // an opportunity to change the inputs or to add some custom input handling.\n@@ -253,7 +271,7 @@ impl<'a> CompilerCalls<'a> for RustcDefaultCalls {\n     fn early_callback(&mut self,\n                       matches: &getopts::Matches,\n                       descriptions: &diagnostics::registry::Registry)\n-                      -> bool {\n+                      -> Compilation {\n         match matches.opt_str(\"explain\") {\n             Some(ref code) => {\n                 match descriptions.find_description(&code[]) {\n@@ -264,12 +282,12 @@ impl<'a> CompilerCalls<'a> for RustcDefaultCalls {\n                         early_error(&format!(\"no extended information for {}\", code)[]);\n                     }\n                 }\n-                return true;\n+                return Compilation::Stop;\n             },\n             None => ()\n         }\n \n-        return false;\n+        return Compilation::Continue;\n     }\n \n     fn no_input(&mut self,\n@@ -288,7 +306,8 @@ impl<'a> CompilerCalls<'a> for RustcDefaultCalls {\n                     return None;\n                 }\n                 let sess = build_session(sopts.clone(), None, descriptions.clone());\n-                if RustcDefaultCalls::print_crate_info(&sess, None, odir, ofile) {\n+                let should_stop = RustcDefaultCalls::print_crate_info(&sess, None, odir, ofile);\n+                if should_stop == Compilation::Stop {\n                     return None;\n                 }\n                 early_error(\"no input filename given\");\n@@ -328,9 +347,9 @@ impl<'a> CompilerCalls<'a> for RustcDefaultCalls {\n                      input: &Input,\n                      odir: &Option<Path>,\n                      ofile: &Option<Path>)\n-                     -> bool {\n-        RustcDefaultCalls::print_crate_info(sess, Some(input), odir, ofile) ||\n-            RustcDefaultCalls::list_metadata(sess, matches, input)\n+                     -> Compilation {\n+        RustcDefaultCalls::print_crate_info(sess, Some(input), odir, ofile).and_then(\n+            || RustcDefaultCalls::list_metadata(sess, matches, input))\n     }\n \n     fn build_controller(&mut self, sess: &Session) -> CompileController<'a> {\n@@ -339,19 +358,19 @@ impl<'a> CompilerCalls<'a> for RustcDefaultCalls {\n         if sess.opts.parse_only ||\n            sess.opts.show_span.is_some() ||\n            sess.opts.debugging_opts.ast_json_noexpand {\n-            control.after_parse.stop = true;\n+            control.after_parse.stop = Compilation::Stop;\n         }\n \n         if sess.opts.no_analysis || sess.opts.debugging_opts.ast_json {\n-            control.after_write_deps.stop = true;\n+            control.after_write_deps.stop = Compilation::Stop;\n         }\n \n         if sess.opts.no_trans {\n-            control.after_analysis.stop = true;\n+            control.after_analysis.stop = Compilation::Stop;\n         }\n \n         if !sess.opts.output_types.iter().any(|&i| i == config::OutputTypeExe) {\n-            control.after_llvm.stop = true;\n+            control.after_llvm.stop = Compilation::Stop;\n         }\n \n         if sess.opts.debugging_opts.save_analysis {\n@@ -373,7 +392,7 @@ impl RustcDefaultCalls {\n     pub fn list_metadata(sess: &Session,\n                          matches: &getopts::Matches,\n                          input: &Input)\n-                         -> bool {\n+                         -> Compilation {\n         let r = matches.opt_strs(\"Z\");\n         if r.contains(&(\"ls\".to_string())) {\n             match input {\n@@ -388,20 +407,20 @@ impl RustcDefaultCalls {\n                     early_error(\"cannot list metadata for stdin\");\n                 }\n             }\n-            return true;\n+            return Compilation::Stop;\n         }\n \n-        return false;\n+        return Compilation::Continue;\n     }\n \n \n     fn print_crate_info(sess: &Session,\n                         input: Option<&Input>,\n                         odir: &Option<Path>,\n                         ofile: &Option<Path>)\n-                        -> bool {\n+                        -> Compilation {\n         if sess.opts.prints.len() == 0 {\n-            return false\n+            return Compilation::Continue;\n         }\n \n         let attrs = input.map(|input| parse_crate_attrs(sess, input));\n@@ -440,7 +459,7 @@ impl RustcDefaultCalls {\n                 }\n             }\n         }\n-        return true;\n+        return Compilation::Stop;\n     }\n }\n "}, {"sha": "e43c3a6da3ac70893479bb7bbcb86698eae4b32e", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0e1e09dd90ee7ac9360f6c97d6b49ded8d9a7f2/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0e1e09dd90ee7ac9360f6c97d6b49ded8d9a7f2/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=f0e1e09dd90ee7ac9360f6c97d6b49ded8d9a7f2", "patch": "@@ -23,7 +23,7 @@ use testing;\n use rustc::session::{self, config};\n use rustc::session::config::get_unstable_features_setting;\n use rustc::session::search_paths::{SearchPaths, PathKind};\n-use rustc_driver::driver;\n+use rustc_driver::{driver, Compilation};\n use syntax::ast;\n use syntax::codemap::{CodeMap, dummy_spanned};\n use syntax::diagnostic;\n@@ -178,7 +178,7 @@ fn runtest(test: &str, cratename: &str, libs: SearchPaths,\n     let libdir = sess.target_filesearch(PathKind::All).get_lib_path();\n     let mut control = driver::CompileController::basic();\n     if no_run {\n-        control.after_analysis.stop = true;\n+        control.after_analysis.stop = Compilation::Stop;\n     }\n     driver::compile_input(sess, cfg, &input, &out, &None, None, control);\n "}, {"sha": "9e164522d77a60db51fd8c6e693eecb7587b36a2", "filename": "src/test/run-pass-fulldeps/compiler-calls.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f0e1e09dd90ee7ac9360f6c97d6b49ded8d9a7f2/src%2Ftest%2Frun-pass-fulldeps%2Fcompiler-calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0e1e09dd90ee7ac9360f6c97d6b49ded8d9a7f2/src%2Ftest%2Frun-pass-fulldeps%2Fcompiler-calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fcompiler-calls.rs?ref=f0e1e09dd90ee7ac9360f6c97d6b49ded8d9a7f2", "patch": "@@ -10,6 +10,8 @@\n \n // Test that the CompilerCalls interface to the compiler works.\n \n+// ignore-android\n+\n #![feature(rustc_private)]\n #![feature(core)]\n \n@@ -20,7 +22,7 @@ extern crate syntax;\n \n use rustc::session::Session;\n use rustc::session::config::{self, Input};\n-use rustc_driver::{driver, CompilerCalls};\n+use rustc_driver::{driver, CompilerCalls, Compilation};\n use syntax::diagnostics;\n \n \n@@ -32,9 +34,9 @@ impl<'a> CompilerCalls<'a> for TestCalls {\n     fn early_callback(&mut self,\n                       _: &getopts::Matches,\n                       _: &diagnostics::registry::Registry)\n-                      -> bool {\n+                      -> Compilation {\n         self.count *= 2;\n-        false\n+        Compilation::Continue\n     }\n \n     fn late_callback(&mut self,\n@@ -43,9 +45,9 @@ impl<'a> CompilerCalls<'a> for TestCalls {\n                      _: &Input,\n                      _: &Option<Path>,\n                      _: &Option<Path>)\n-                     -> bool {\n+                     -> Compilation {\n         self.count *= 3;\n-        true\n+        Compilation::Stop\n     }\n \n     fn some_input(&mut self, input: Input, input_path: Option<Path>) -> (Input, Option<Path>) {"}]}