{"sha": "45a03f153fe4da92a579108bff135cc822cd8700", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1YTAzZjE1M2ZlNGRhOTJhNTc5MTA4YmZmMTM1Y2M4MjJjZDg3MDA=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2017-09-22T13:07:51Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2017-09-23T17:47:46Z"}, "message": "incr.comp.: Make #[rustc_dirty/clean] test for fingerprint equality instead of DepNode existence.", "tree": {"sha": "7a73caf137855b5f566adcacba3450184e439c36", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a73caf137855b5f566adcacba3450184e439c36"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45a03f153fe4da92a579108bff135cc822cd8700", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45a03f153fe4da92a579108bff135cc822cd8700", "html_url": "https://github.com/rust-lang/rust/commit/45a03f153fe4da92a579108bff135cc822cd8700", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45a03f153fe4da92a579108bff135cc822cd8700/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a50d127ddc8a40c526d3409159a328517a6ff84", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a50d127ddc8a40c526d3409159a328517a6ff84", "html_url": "https://github.com/rust-lang/rust/commit/2a50d127ddc8a40c526d3409159a328517a6ff84"}], "stats": {"total": 121, "additions": 33, "deletions": 88}, "files": [{"sha": "a6d39a918631c67c49e5d5855618c5404a2b3878", "filename": "src/librustc_incremental/persist/dirty_clean.rs", "status": "modified", "additions": 25, "deletions": 80, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/45a03f153fe4da92a579108bff135cc822cd8700/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45a03f153fe4da92a579108bff135cc822cd8700/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs?ref=45a03f153fe4da92a579108bff135cc822cd8700", "patch": "@@ -8,18 +8,17 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Debugging code to test the state of the dependency graph just\n-//! after it is loaded from disk and just after it has been saved.\n+//! Debugging code to test fingerprints computed for query results.\n //! For each node marked with `#[rustc_clean]` or `#[rustc_dirty]`,\n-//! we will check that a suitable node for that item either appears\n-//! or does not appear in the dep-graph, as appropriate:\n+//! we will compare the fingerprint from the current and from the previous\n+//! compilation session as appropriate:\n //!\n //! - `#[rustc_dirty(label=\"TypeckTables\", cfg=\"rev2\")]` if we are\n-//!   in `#[cfg(rev2)]`, then there MUST NOT be a node\n-//!   `DepNode::TypeckTables(X)` where `X` is the def-id of the\n-//!   current node.\n+//!   in `#[cfg(rev2)]`, then the fingerprints associated with\n+//!   `DepNode::TypeckTables(X)` must be DIFFERENT (`X` is the def-id of the\n+//!   current node).\n //! - `#[rustc_clean(label=\"TypeckTables\", cfg=\"rev2\")]` same as above,\n-//!   except that the node MUST exist.\n+//!   except that the fingerprints must be the SAME.\n //!\n //! Errors are reported if we are in the suitable configuration but\n //! the required condition is not met.\n@@ -40,9 +39,7 @@\n //! previous revision to compare things to.\n //!\n \n-use super::data::DepNodeIndex;\n-use super::load::DirtyNodes;\n-use rustc::dep_graph::{DepGraphQuery, DepNode, DepKind};\n+use rustc::dep_graph::DepNode;\n use rustc::hir;\n use rustc::hir::def_id::DefId;\n use rustc::hir::itemlikevisit::ItemLikeVisitor;\n@@ -51,41 +48,22 @@ use rustc::ich::{Fingerprint, ATTR_DIRTY, ATTR_CLEAN, ATTR_DIRTY_METADATA,\n                  ATTR_CLEAN_METADATA};\n use syntax::ast::{self, Attribute, NestedMetaItem};\n use rustc_data_structures::fx::{FxHashSet, FxHashMap};\n-use rustc_data_structures::indexed_vec::IndexVec;\n use syntax_pos::Span;\n use rustc::ty::TyCtxt;\n \n const LABEL: &'static str = \"label\";\n const CFG: &'static str = \"cfg\";\n \n-pub fn check_dirty_clean_annotations<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                                               nodes: &IndexVec<DepNodeIndex, DepNode>,\n-                                               dirty_inputs: &DirtyNodes) {\n+pub fn check_dirty_clean_annotations<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     // can't add `#[rustc_dirty]` etc without opting in to this feature\n     if !tcx.sess.features.borrow().rustc_attrs {\n         return;\n     }\n \n     let _ignore = tcx.dep_graph.in_ignore();\n-    let dirty_inputs: FxHashSet<DepNode> =\n-        dirty_inputs.keys()\n-                    .filter_map(|dep_node_index| {\n-                        let dep_node = nodes[*dep_node_index];\n-                        if dep_node.extract_def_id(tcx).is_some() {\n-                            Some(dep_node)\n-                        } else {\n-                            None\n-                        }\n-                    })\n-                    .collect();\n-\n-    let query = tcx.dep_graph.query();\n-    debug!(\"query-nodes: {:?}\", query.nodes());\n     let krate = tcx.hir.krate();\n     let mut dirty_clean_visitor = DirtyCleanVisitor {\n         tcx,\n-        query: &query,\n-        dirty_inputs,\n         checked_attrs: FxHashSet(),\n     };\n     krate.visit_all_item_likes(&mut dirty_clean_visitor);\n@@ -105,8 +83,6 @@ pub fn check_dirty_clean_annotations<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n pub struct DirtyCleanVisitor<'a, 'tcx:'a> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    query: &'a DepGraphQuery,\n-    dirty_inputs: FxHashSet<DepNode>,\n     checked_attrs: FxHashSet<ast::AttrId>,\n }\n \n@@ -143,59 +119,28 @@ impl<'a, 'tcx> DirtyCleanVisitor<'a, 'tcx> {\n     fn assert_dirty(&self, item_span: Span, dep_node: DepNode) {\n         debug!(\"assert_dirty({:?})\", dep_node);\n \n-        match dep_node.kind {\n-            DepKind::Krate |\n-            DepKind::Hir |\n-            DepKind::HirBody => {\n-                // HIR nodes are inputs, so if we are asserting that the HIR node is\n-                // dirty, we check the dirty input set.\n-                if !self.dirty_inputs.contains(&dep_node) {\n-                    let dep_node_str = self.dep_node_str(&dep_node);\n-                    self.tcx.sess.span_err(\n-                        item_span,\n-                        &format!(\"`{}` not found in dirty set, but should be dirty\",\n-                                 dep_node_str));\n-                }\n-            }\n-            _ => {\n-                // Other kinds of nodes would be targets, so check if\n-                // the dep-graph contains the node.\n-                if self.query.contains_node(&dep_node) {\n-                    let dep_node_str = self.dep_node_str(&dep_node);\n-                    self.tcx.sess.span_err(\n-                        item_span,\n-                        &format!(\"`{}` found in dep graph, but should be dirty\", dep_node_str));\n-                }\n-            }\n+        let current_fingerprint = self.tcx.dep_graph.fingerprint_of(&dep_node);\n+        let prev_fingerprint = self.tcx.dep_graph.prev_fingerprint_of(&dep_node);\n+\n+        if current_fingerprint == prev_fingerprint {\n+            let dep_node_str = self.dep_node_str(&dep_node);\n+            self.tcx.sess.span_err(\n+                item_span,\n+                &format!(\"`{}` should be dirty but is not\", dep_node_str));\n         }\n     }\n \n     fn assert_clean(&self, item_span: Span, dep_node: DepNode) {\n         debug!(\"assert_clean({:?})\", dep_node);\n \n-        match dep_node.kind {\n-            DepKind::Krate |\n-            DepKind::Hir |\n-            DepKind::HirBody => {\n-                // For HIR nodes, check the inputs.\n-                if self.dirty_inputs.contains(&dep_node) {\n-                    let dep_node_str = self.dep_node_str(&dep_node);\n-                    self.tcx.sess.span_err(\n-                        item_span,\n-                        &format!(\"`{}` found in dirty-node set, but should be clean\",\n-                                 dep_node_str));\n-                }\n-            }\n-            _ => {\n-                // Otherwise, check if the dep-node exists.\n-                if !self.query.contains_node(&dep_node) {\n-                    let dep_node_str = self.dep_node_str(&dep_node);\n-                    self.tcx.sess.span_err(\n-                        item_span,\n-                        &format!(\"`{}` not found in dep graph, but should be clean\",\n-                                 dep_node_str));\n-                }\n-            }\n+        let current_fingerprint = self.tcx.dep_graph.fingerprint_of(&dep_node);\n+        let prev_fingerprint = self.tcx.dep_graph.prev_fingerprint_of(&dep_node);\n+\n+        if current_fingerprint != prev_fingerprint {\n+            let dep_node_str = self.dep_node_str(&dep_node);\n+            self.tcx.sess.span_err(\n+                item_span,\n+                &format!(\"`{}` should be clean but is not\", dep_node_str));\n         }\n     }\n "}, {"sha": "6d019a25ed3ec4cc83ba4d2132a78b032ae005fc", "filename": "src/librustc_incremental/persist/load.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/45a03f153fe4da92a579108bff135cc822cd8700/src%2Flibrustc_incremental%2Fpersist%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45a03f153fe4da92a579108bff135cc822cd8700/src%2Flibrustc_incremental%2Fpersist%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fload.rs?ref=45a03f153fe4da92a579108bff135cc822cd8700", "patch": "@@ -23,7 +23,6 @@ use rustc_serialize::opaque::Decoder;\n use std::path::{Path};\n \n use super::data::*;\n-use super::dirty_clean;\n use super::fs::*;\n use super::file_format;\n use super::work_product;\n@@ -186,9 +185,6 @@ pub fn decode_dep_graph<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     // dirty.\n     reconcile_work_products(tcx, work_products, &clean_work_products);\n \n-    dirty_clean::check_dirty_clean_annotations(tcx,\n-                                               &serialized_dep_graph.nodes,\n-                                               &dirty_raw_nodes);\n     Ok(())\n }\n "}, {"sha": "83a618211dad3c5b213ebbc677ca5b155f6f434a", "filename": "src/librustc_incremental/persist/save.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/45a03f153fe4da92a579108bff135cc822cd8700/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45a03f153fe4da92a579108bff135cc822cd8700/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs?ref=45a03f153fe4da92a579108bff135cc822cd8700", "patch": "@@ -89,6 +89,7 @@ pub fn save_dep_graph<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 |e| encode_dep_graph_new(tcx, e));\n     });\n \n+    dirty_clean::check_dirty_clean_annotations(tcx);\n     dirty_clean::check_dirty_clean_metadata(tcx,\n                                             &prev_metadata_hashes,\n                                             &current_metadata_hashes);"}, {"sha": "6d54cf53660a9ce62e75c3e9fa78879cc04a7249", "filename": "src/test/incremental/dirty_clean.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/45a03f153fe4da92a579108bff135cc822cd8700/src%2Ftest%2Fincremental%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45a03f153fe4da92a579108bff135cc822cd8700/src%2Ftest%2Fincremental%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fdirty_clean.rs?ref=45a03f153fe4da92a579108bff135cc822cd8700", "patch": "@@ -37,14 +37,14 @@ mod y {\n \n     #[rustc_clean(label=\"TypeckTables\", cfg=\"cfail2\")]\n     pub fn y() {\n-        //[cfail2]~^ ERROR `TypeckTables(y::y)` not found in dep graph, but should be clean\n+        //[cfail2]~^ ERROR `TypeckTables(y::y)` should be clean but is not\n         x::x();\n     }\n }\n \n mod z {\n     #[rustc_dirty(label=\"TypeckTables\", cfg=\"cfail2\")]\n     pub fn z() {\n-        //[cfail2]~^ ERROR `TypeckTables(z::z)` found in dep graph, but should be dirty\n+        //[cfail2]~^ ERROR `TypeckTables(z::z)` should be dirty but is not\n     }\n }"}, {"sha": "8f84266d5a4e5f7037ff4808780a6d05cb4a7034", "filename": "src/test/incremental/hashes/enum_defs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45a03f153fe4da92a579108bff135cc822cd8700/src%2Ftest%2Fincremental%2Fhashes%2Fenum_defs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45a03f153fe4da92a579108bff135cc822cd8700/src%2Ftest%2Fincremental%2Fhashes%2Fenum_defs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fenum_defs.rs?ref=45a03f153fe4da92a579108bff135cc822cd8700", "patch": "@@ -143,7 +143,7 @@ enum EnumChangeValueCStyleVariant1 {\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail2\")]\n+#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n #[rustc_metadata_dirty(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]"}, {"sha": "760975b292f95fc01bfc64fc41b679354e76b6e3", "filename": "src/test/incremental/string_constant.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/45a03f153fe4da92a579108bff135cc822cd8700/src%2Ftest%2Fincremental%2Fstring_constant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45a03f153fe4da92a579108bff135cc822cd8700/src%2Ftest%2Fincremental%2Fstring_constant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fstring_constant.rs?ref=45a03f153fe4da92a579108bff135cc822cd8700", "patch": "@@ -27,7 +27,8 @@ mod x {\n     }\n \n     #[cfg(rpass2)]\n-    #[rustc_dirty(label=\"TypeckTables\", cfg=\"rpass2\")]\n+    #[rustc_dirty(label=\"HirBody\", cfg=\"rpass2\")]\n+    #[rustc_dirty(label=\"MirOptimized\", cfg=\"rpass2\")]\n     pub fn x() {\n         println!(\"{}\", \"2\");\n     }\n@@ -37,6 +38,7 @@ mod y {\n     use x;\n \n     #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"MirOptimized\", cfg=\"rpass2\")]\n     pub fn y() {\n         x::x();\n     }\n@@ -46,6 +48,7 @@ mod z {\n     use y;\n \n     #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"MirOptimized\", cfg=\"rpass2\")]\n     pub fn z() {\n         y::y();\n     }"}]}