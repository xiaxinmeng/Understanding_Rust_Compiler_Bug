{"sha": "a11c26f6acb1b8890c36196e88371840c01e201d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExMWMyNmY2YWNiMWI4ODkwYzM2MTk2ZTg4MzcxODQwYzAxZTIwMWQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-05-27T11:23:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-05-27T11:23:45Z"}, "message": "Auto merge of #42109 - Keruspe:master, r=alexcrichton\n\nrustbuild: don't create a source tarball when installing\n\nThis splits Install out of Dist as it is not a full dist anymore, and creates the source tarball only for the Dist command.\nThis will allow splitting install in a few rules if we want as it's done for other phases.", "tree": {"sha": "eff466edb232e3e22c524500057b84c38d51e5d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eff466edb232e3e22c524500057b84c38d51e5d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a11c26f6acb1b8890c36196e88371840c01e201d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a11c26f6acb1b8890c36196e88371840c01e201d", "html_url": "https://github.com/rust-lang/rust/commit/a11c26f6acb1b8890c36196e88371840c01e201d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a11c26f6acb1b8890c36196e88371840c01e201d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e7908f616745573a11ad7dfad245f12be0069da", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e7908f616745573a11ad7dfad245f12be0069da", "html_url": "https://github.com/rust-lang/rust/commit/3e7908f616745573a11ad7dfad245f12be0069da"}, {"sha": "d0ea705a160bbd4c3537aeca317000d7b78a8a8b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0ea705a160bbd4c3537aeca317000d7b78a8a8b", "html_url": "https://github.com/rust-lang/rust/commit/d0ea705a160bbd4c3537aeca317000d7b78a8a8b"}], "stats": {"total": 354, "additions": 210, "deletions": 144}, "files": [{"sha": "dbb5bf9ce38d63204d32cba2561c59350c9efe88", "filename": "README.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a11c26f6acb1b8890c36196e88371840c01e201d/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/a11c26f6acb1b8890c36196e88371840c01e201d/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=a11c26f6acb1b8890c36196e88371840c01e201d", "patch": "@@ -35,15 +35,15 @@ Read [\"Installing Rust\"] from [The Book].\n 3. Build and install:\n \n     ```sh\n-    $ ./x.py build && sudo ./x.py dist --install\n+    $ ./x.py build && sudo ./x.py install\n     ```\n \n     > ***Note:*** Install locations can be adjusted by copying the config file\n     > from `./src/bootstrap/config.toml.example` to `./config.toml`, and\n     > adjusting the `prefix` option under `[install]`. Various other options are\n     > also supported, and are documented in the config file.\n \n-    When complete, `sudo ./x.py dist --install` will place several programs into\n+    When complete, `sudo ./x.py install` will place several programs into\n     `/usr/local/bin`: `rustc`, the Rust compiler, and `rustdoc`, the\n     API-documentation tool. This install does not include [Cargo],\n     Rust's package manager, which you may also want to build.\n@@ -96,7 +96,7 @@ build.\n 4. Navigate to Rust's source code (or clone it), then build it:\n \n    ```sh\n-   $ ./x.py build && ./x.py dist --install\n+   $ ./x.py build && ./x.py install\n    ```\n \n #### MSVC"}, {"sha": "0eb6c4c82c4dd7df5dffe4400d4255622cc8b574", "filename": "src/bootstrap/config.toml.example", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a11c26f6acb1b8890c36196e88371840c01e201d/src%2Fbootstrap%2Fconfig.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/a11c26f6acb1b8890c36196e88371840c01e201d/src%2Fbootstrap%2Fconfig.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.toml.example?ref=a11c26f6acb1b8890c36196e88371840c01e201d", "patch": "@@ -314,3 +314,9 @@\n # Note that this address should not contain a trailing slash as file names will\n # be appended to it.\n #upload-addr = \"https://example.com/folder\"\n+\n+# Whether to build a plain source tarball to upload\n+# We disable that on Windows not to override the one already uploaded on S3\n+# as the one built on Windows will contain backslashes in paths causing problems\n+# on linux\n+#src-tarball = true"}, {"sha": "c50165c5e3904d6b5174f3b63042205e13548078", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 91, "deletions": 91, "changes": 182, "blob_url": "https://github.com/rust-lang/rust/blob/a11c26f6acb1b8890c36196e88371840c01e201d/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a11c26f6acb1b8890c36196e88371840c01e201d/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=a11c26f6acb1b8890c36196e88371840c01e201d", "patch": "@@ -30,11 +30,11 @@ use {Build, Compiler, Mode};\n use channel;\n use util::{cp_r, libdir, is_dylib, cp_filtered, copy, exe};\n \n-fn pkgname(build: &Build, component: &str) -> String {\n+pub fn pkgname(build: &Build, component: &str) -> String {\n     if component == \"cargo\" {\n         format!(\"{}-{}\", component, build.cargo_package_vers())\n     } else if component == \"rls\" {\n-        format!(\"{}-{}\", component, build.package_vers(&build.release_num(\"rls\")))\n+        format!(\"{}-{}\", component, build.rls_package_vers())\n     } else {\n         assert!(component.starts_with(\"rust\"));\n         format!(\"{}-{}\", component, build.rust_package_vers())\n@@ -489,38 +489,7 @@ pub fn analysis(build: &Build, compiler: &Compiler, target: &str) {\n     t!(fs::remove_dir_all(&image));\n }\n \n-const CARGO_VENDOR_VERSION: &'static str = \"0.1.4\";\n-\n-/// Creates the `rust-src` installer component and the plain source tarball\n-pub fn rust_src(build: &Build) {\n-    if !build.config.rust_dist_src {\n-        return\n-    }\n-\n-    println!(\"Dist src\");\n-\n-    // Make sure that the root folder of tarball has the correct name\n-    let plain_name = format!(\"rustc-{}-src\", build.rust_package_vers());\n-    let plain_dst_src = tmpdir(build).join(&plain_name);\n-    let _ = fs::remove_dir_all(&plain_dst_src);\n-    t!(fs::create_dir_all(&plain_dst_src));\n-\n-    // This is the set of root paths which will become part of the source package\n-    let src_files = [\n-        \"COPYRIGHT\",\n-        \"LICENSE-APACHE\",\n-        \"LICENSE-MIT\",\n-        \"CONTRIBUTING.md\",\n-        \"README.md\",\n-        \"RELEASES.md\",\n-        \"configure\",\n-        \"x.py\",\n-    ];\n-    let src_dirs = [\n-        \"man\",\n-        \"src\",\n-    ];\n-\n+fn copy_src_dirs(build: &Build, src_dirs: &[&str], dst_dir: &Path) {\n     let filter_fn = move |path: &Path| {\n         let spath = match path.to_str() {\n             Some(path) => path,\n@@ -549,60 +518,16 @@ pub fn rust_src(build: &Build) {\n     };\n \n     // Copy the directories using our filter\n-    for item in &src_dirs {\n-        let dst = &plain_dst_src.join(item);\n-        t!(fs::create_dir(dst));\n+    for item in src_dirs {\n+        let dst = &dst_dir.join(item);\n+        t!(fs::create_dir_all(dst));\n         cp_filtered(&build.src.join(item), dst, &filter_fn);\n     }\n-    // Copy the files normally\n-    for item in &src_files {\n-        copy(&build.src.join(item), &plain_dst_src.join(item));\n-    }\n-\n-    // If we're building from git sources, we need to vendor a complete distribution.\n-    if build.src_is_git {\n-        // Get cargo-vendor installed, if it isn't already.\n-        let mut has_cargo_vendor = false;\n-        let mut cmd = Command::new(&build.cargo);\n-        for line in output(cmd.arg(\"install\").arg(\"--list\")).lines() {\n-            has_cargo_vendor |= line.starts_with(\"cargo-vendor \");\n-        }\n-        if !has_cargo_vendor {\n-            let mut cmd = Command::new(&build.cargo);\n-            cmd.arg(\"install\")\n-               .arg(\"--force\")\n-               .arg(\"--debug\")\n-               .arg(\"--vers\").arg(CARGO_VENDOR_VERSION)\n-               .arg(\"cargo-vendor\")\n-               .env(\"RUSTC\", &build.rustc);\n-            build.run(&mut cmd);\n-        }\n-\n-        // Vendor all Cargo dependencies\n-        let mut cmd = Command::new(&build.cargo);\n-        cmd.arg(\"vendor\")\n-           .current_dir(&plain_dst_src.join(\"src\"));\n-        build.run(&mut cmd);\n-    }\n-\n-    // Create the version file\n-    write_file(&plain_dst_src.join(\"version\"), build.rust_version().as_bytes());\n-\n-    // Create plain source tarball\n-    let mut tarball = rust_src_location(build);\n-    tarball.set_extension(\"\"); // strip .gz\n-    tarball.set_extension(\"\"); // strip .tar\n-    if let Some(dir) = tarball.parent() {\n-        t!(fs::create_dir_all(dir));\n-    }\n-    let mut cmd = rust_installer(build);\n-    cmd.arg(\"tarball\")\n-       .arg(\"--input\").arg(&plain_name)\n-       .arg(\"--output\").arg(&tarball)\n-       .arg(\"--work-dir=.\")\n-       .current_dir(tmpdir(build));\n-    build.run(&mut cmd);\n+}\n \n+/// Creates the `rust-src` installer component\n+pub fn rust_src(build: &Build) {\n+    println!(\"Dist src\");\n \n     let name = pkgname(build, \"rust-src\");\n     let image = tmpdir(build).join(format!(\"{}-image\", name));\n@@ -636,11 +561,7 @@ pub fn rust_src(build: &Build) {\n         \"src/rustc/libc_shim\",\n     ];\n \n-    for item in &std_src_dirs {\n-        let dst = &dst_src.join(item);\n-        t!(fs::create_dir_all(dst));\n-        cp_r(&plain_dst_src.join(item), dst);\n-    }\n+    copy_src_dirs(build, &std_src_dirs[..], &dst_src);\n \n     // Create source tarball in rust-installer format\n     let mut cmd = rust_installer(build);\n@@ -657,7 +578,86 @@ pub fn rust_src(build: &Build) {\n     build.run(&mut cmd);\n \n     t!(fs::remove_dir_all(&image));\n-    t!(fs::remove_dir_all(&plain_dst_src));\n+}\n+\n+const CARGO_VENDOR_VERSION: &'static str = \"0.1.4\";\n+\n+/// Creates the plain source tarball\n+pub fn plain_source_tarball(build: &Build) {\n+    println!(\"Create plain source tarball\");\n+\n+    // Make sure that the root folder of tarball has the correct name\n+    let plain_name = format!(\"{}-src\", pkgname(build, \"rustc\"));\n+    let plain_dst_src = tmpdir(build).join(&plain_name);\n+    let _ = fs::remove_dir_all(&plain_dst_src);\n+    t!(fs::create_dir_all(&plain_dst_src));\n+\n+    // This is the set of root paths which will become part of the source package\n+    let src_files = [\n+        \"COPYRIGHT\",\n+        \"LICENSE-APACHE\",\n+        \"LICENSE-MIT\",\n+        \"CONTRIBUTING.md\",\n+        \"README.md\",\n+        \"RELEASES.md\",\n+        \"configure\",\n+        \"x.py\",\n+    ];\n+    let src_dirs = [\n+        \"man\",\n+        \"src\",\n+    ];\n+\n+    copy_src_dirs(build, &src_dirs[..], &plain_dst_src);\n+\n+    // Copy the files normally\n+    for item in &src_files {\n+        copy(&build.src.join(item), &plain_dst_src.join(item));\n+    }\n+\n+    // Create the version file\n+    write_file(&plain_dst_src.join(\"version\"), build.rust_version().as_bytes());\n+\n+    // If we're building from git sources, we need to vendor a complete distribution.\n+    if build.src_is_git {\n+        // Get cargo-vendor installed, if it isn't already.\n+        let mut has_cargo_vendor = false;\n+        let mut cmd = Command::new(&build.cargo);\n+        for line in output(cmd.arg(\"install\").arg(\"--list\")).lines() {\n+            has_cargo_vendor |= line.starts_with(\"cargo-vendor \");\n+        }\n+        if !has_cargo_vendor {\n+            let mut cmd = Command::new(&build.cargo);\n+            cmd.arg(\"install\")\n+               .arg(\"--force\")\n+               .arg(\"--debug\")\n+               .arg(\"--vers\").arg(CARGO_VENDOR_VERSION)\n+               .arg(\"cargo-vendor\")\n+               .env(\"RUSTC\", &build.rustc);\n+            build.run(&mut cmd);\n+        }\n+\n+        // Vendor all Cargo dependencies\n+        let mut cmd = Command::new(&build.cargo);\n+        cmd.arg(\"vendor\")\n+           .current_dir(&plain_dst_src.join(\"src\"));\n+        build.run(&mut cmd);\n+    }\n+\n+    // Create plain source tarball\n+    let mut tarball = rust_src_location(build);\n+    tarball.set_extension(\"\"); // strip .gz\n+    tarball.set_extension(\"\"); // strip .tar\n+    if let Some(dir) = tarball.parent() {\n+        t!(fs::create_dir_all(dir));\n+    }\n+    let mut cmd = rust_installer(build);\n+    cmd.arg(\"tarball\")\n+       .arg(\"--input\").arg(&plain_name)\n+       .arg(\"--output\").arg(&tarball)\n+       .arg(\"--work-dir=.\")\n+       .current_dir(tmpdir(build));\n+    build.run(&mut cmd);\n }\n \n fn install(src: &Path, dstdir: &Path, perms: u32) {"}, {"sha": "fe4e18ab622cde83e701d96014314189a8775849", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a11c26f6acb1b8890c36196e88371840c01e201d/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a11c26f6acb1b8890c36196e88371840c01e201d/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=a11c26f6acb1b8890c36196e88371840c01e201d", "patch": "@@ -69,7 +69,9 @@ pub enum Subcommand {\n     Clean,\n     Dist {\n         paths: Vec<PathBuf>,\n-        install: bool,\n+    },\n+    Install {\n+        paths: Vec<PathBuf>,\n     },\n }\n \n@@ -85,7 +87,8 @@ Subcommands:\n     bench       Build and run some benchmarks\n     doc         Build documentation\n     clean       Clean out build directories\n-    dist        Build and/or install distribution artifacts\n+    dist        Build distribution artifacts\n+    install     Install distribution artifacts\n \n To learn more about a subcommand, run `./x.py <subcommand> -h`\");\n \n@@ -125,7 +128,8 @@ To learn more about a subcommand, run `./x.py <subcommand> -h`\");\n                                         || (s == \"bench\")\n                                         || (s == \"doc\")\n                                         || (s == \"clean\")\n-                                        || (s == \"dist\"));\n+                                        || (s == \"dist\")\n+                                        || (s == \"install\"));\n         let subcommand = match possible_subcommands.first() {\n             Some(s) => s,\n             None => {\n@@ -139,7 +143,6 @@ To learn more about a subcommand, run `./x.py <subcommand> -h`\");\n         match subcommand.as_str() {\n             \"test\"  => { opts.optmulti(\"\", \"test-args\", \"extra arguments\", \"ARGS\"); },\n             \"bench\" => { opts.optmulti(\"\", \"test-args\", \"extra arguments\", \"ARGS\"); },\n-            \"dist\"  => { opts.optflag(\"\", \"install\", \"run installer as well\"); },\n             _ => { },\n         };\n \n@@ -281,7 +284,11 @@ Arguments:\n             \"dist\" => {\n                 Subcommand::Dist {\n                     paths: paths,\n-                    install: matches.opt_present(\"install\"),\n+                }\n+            }\n+            \"install\" => {\n+                Subcommand::Install {\n+                    paths: paths,\n                 }\n             }\n             _ => {"}, {"sha": "21e21628dc9471249753b50ca7731f8902427f23", "filename": "src/bootstrap/install.rs", "status": "modified", "additions": 38, "deletions": 30, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/a11c26f6acb1b8890c36196e88371840c01e201d/src%2Fbootstrap%2Finstall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a11c26f6acb1b8890c36196e88371840c01e201d/src%2Fbootstrap%2Finstall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Finstall.rs?ref=a11c26f6acb1b8890c36196e88371840c01e201d", "patch": "@@ -19,7 +19,7 @@ use std::path::{Path, PathBuf, Component};\n use std::process::Command;\n \n use Build;\n-use dist::{sanitize_sh, tmpdir};\n+use dist::{pkgname, sanitize_sh, tmpdir};\n \n pub struct Installer<'a> {\n     build: &'a Build,\n@@ -29,6 +29,13 @@ pub struct Installer<'a> {\n     bindir: PathBuf,\n     libdir: PathBuf,\n     mandir: PathBuf,\n+    empty_dir: PathBuf,\n+}\n+\n+impl<'a> Drop for Installer<'a> {\n+    fn drop(&mut self) {\n+        t!(fs::remove_dir_all(&self.empty_dir));\n+    }\n }\n \n impl<'a> Installer<'a> {\n@@ -61,6 +68,10 @@ impl<'a> Installer<'a> {\n         let libdir = add_destdir(&libdir, &destdir);\n         let mandir = add_destdir(&mandir, &destdir);\n \n+        let empty_dir = build.out.join(\"tmp/empty_dir\");\n+\n+        t!(fs::create_dir_all(&empty_dir));\n+\n         Installer {\n             build,\n             prefix,\n@@ -69,52 +80,49 @@ impl<'a> Installer<'a> {\n             bindir,\n             libdir,\n             mandir,\n+            empty_dir,\n         }\n     }\n \n-    /// Installs everything.\n-    pub fn install(&self, stage: u32, host: &str) {\n-        let empty_dir = self.build.out.join(\"tmp/empty_dir\");\n-        t!(fs::create_dir_all(&empty_dir));\n-\n-        if self.build.config.docs {\n-            self.install_sh(\"docs\", \"rust-docs\", &self.build.rust_package_vers(),\n-                            stage, Some(host), &empty_dir);\n-        }\n+    pub fn install_docs(&self, stage: u32, host: &str) {\n+        self.install_sh(\"docs\", \"rust-docs\", stage, Some(host));\n+    }\n \n+    pub fn install_std(&self, stage: u32) {\n         for target in self.build.config.target.iter() {\n-            self.install_sh(\"std\", \"rust-std\", &self.build.rust_package_vers(),\n-                            stage, Some(target), &empty_dir);\n+            self.install_sh(\"std\", \"rust-std\", stage, Some(target));\n         }\n+    }\n \n-        if self.build.config.extended {\n-            self.install_sh(\"cargo\", \"cargo\", &self.build.cargo_package_vers(),\n-                            stage, Some(host), &empty_dir);\n-            self.install_sh(\"rls\", \"rls\", &self.build.rls_package_vers(),\n-                            stage, Some(host), &empty_dir);\n-            self.install_sh(\"analysis\", \"rust-analysis\", &self.build.rust_package_vers(),\n-                            stage, Some(host), &empty_dir);\n-            self.install_sh(\"src\", \"rust-src\", &self.build.rust_package_vers(),\n-                            stage, None, &empty_dir);\n-        }\n+    pub fn install_cargo(&self, stage: u32, host: &str) {\n+        self.install_sh(\"cargo\", \"cargo\", stage, Some(host));\n+    }\n \n-        self.install_sh(\"rustc\", \"rustc\", &self.build.rust_package_vers(),\n-                        stage, Some(host), &empty_dir);\n+    pub fn install_rls(&self, stage: u32, host: &str) {\n+        self.install_sh(\"rls\", \"rls\", stage, Some(host));\n+    }\n+\n+    pub fn install_analysis(&self, stage: u32, host: &str) {\n+        self.install_sh(\"analysis\", \"rust-analysis\", stage, Some(host));\n+    }\n \n-        t!(fs::remove_dir_all(&empty_dir));\n+    pub fn install_src(&self, stage: u32) {\n+        self.install_sh(\"src\", \"rust-src\", stage, None);\n+    }\n+    pub fn install_rustc(&self, stage: u32, host: &str) {\n+        self.install_sh(\"rustc\", \"rustc\", stage, Some(host));\n     }\n \n-    fn install_sh(&self, package: &str, name: &str, version: &str,\n-                  stage: u32, host: Option<&str>,  empty_dir: &Path) {\n+    fn install_sh(&self, package: &str, name: &str, stage: u32, host: Option<&str>) {\n         println!(\"Install {} stage{} ({:?})\", package, stage, host);\n         let package_name = if let Some(host) = host {\n-            format!(\"{}-{}-{}\", name, version, host)\n+            format!(\"{}-{}\", pkgname(self.build, name), host)\n         } else {\n-            format!(\"{}-{}\", name, version)\n+            pkgname(self.build, name)\n         };\n \n         let mut cmd = Command::new(\"sh\");\n-        cmd.current_dir(empty_dir)\n+        cmd.current_dir(&self.empty_dir)\n            .arg(sanitize_sh(&tmpdir(self.build).join(&package_name).join(\"install.sh\")))\n            .arg(format!(\"--prefix={}\", sanitize_sh(&self.prefix)))\n            .arg(format!(\"--sysconfdir={}\", sanitize_sh(&self.sysconfdir)))"}, {"sha": "47c792a510b1b265e1cf9225c8420b400df3898d", "filename": "src/bootstrap/mk/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a11c26f6acb1b8890c36196e88371840c01e201d/src%2Fbootstrap%2Fmk%2FMakefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/a11c26f6acb1b8890c36196e88371840c01e201d/src%2Fbootstrap%2Fmk%2FMakefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fmk%2FMakefile.in?ref=a11c26f6acb1b8890c36196e88371840c01e201d", "patch": "@@ -69,7 +69,7 @@ distcheck:\n \t$(Q)$(BOOTSTRAP) dist $(BOOTSTRAP_ARGS)\n \t$(Q)$(BOOTSTRAP) test distcheck $(BOOTSTRAP_ARGS)\n install:\n-\t$(Q)$(BOOTSTRAP) dist --install $(BOOTSTRAP_ARGS)\n+\t$(Q)$(BOOTSTRAP) install $(BOOTSTRAP_ARGS)\n tidy:\n \t$(Q)$(BOOTSTRAP) test src/tools/tidy $(BOOTSTRAP_ARGS)\n prepare:"}, {"sha": "16029a8a0cccd49c68fb55bf675fd6ac6a818f2b", "filename": "src/bootstrap/step.rs", "status": "modified", "additions": 59, "deletions": 14, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/a11c26f6acb1b8890c36196e88371840c01e201d/src%2Fbootstrap%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a11c26f6acb1b8890c36196e88371840c01e201d/src%2Fbootstrap%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fstep.rs?ref=a11c26f6acb1b8890c36196e88371840c01e201d", "patch": "@@ -492,6 +492,7 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n          .host(true)\n          .run(move |s| check::docs(build, &s.compiler()));\n     rules.test(\"check-distcheck\", \"distcheck\")\n+         .dep(|s| s.name(\"dist-plain-source-tarball\"))\n          .dep(|s| s.name(\"dist-src\"))\n          .run(move |_| check::distcheck(build));\n \n@@ -734,6 +735,13 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n                  dist::mingw(build, s.target)\n              }\n          });\n+    rules.dist(\"dist-plain-source-tarball\", \"src\")\n+         .default(build.config.rust_dist_src)\n+         .host(true)\n+         .only_build(true)\n+         .only_host_build(true)\n+         .dep(move |s| tool_rust_installer(build, s))\n+         .run(move |_| dist::plain_source_tarball(build));\n     rules.dist(\"dist-src\", \"src\")\n          .default(true)\n          .host(true)\n@@ -759,9 +767,6 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n          .dep(|s| s.name(\"tool-rls\"))\n          .dep(move |s| tool_rust_installer(build, s))\n          .run(move |s| dist::rls(build, s.stage, s.target));\n-    rules.dist(\"install\", \"path/to/nowhere\")\n-         .dep(|s| s.name(\"default:dist\"))\n-         .run(move |s| install::Installer::new(build).install(s.stage, s.target));\n     rules.dist(\"dist-cargo\", \"cargo\")\n          .host(true)\n          .only_host_build(true)\n@@ -789,6 +794,47 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n          .dep(move |s| s.name(\"tool-build-manifest\").target(&build.config.build).stage(0))\n          .run(move |_| dist::hash_and_sign(build));\n \n+    rules.install(\"install-docs\", \"src/doc\")\n+         .default(build.config.docs)\n+         .only_host_build(true)\n+         .dep(|s| s.name(\"dist-docs\"))\n+         .run(move |s| install::Installer::new(build).install_docs(s.stage, s.target));\n+    rules.install(\"install-std\", \"src/libstd\")\n+         .default(true)\n+         .only_host_build(true)\n+         .dep(|s| s.name(\"dist-std\"))\n+         .run(move |s| install::Installer::new(build).install_std(s.stage));\n+    rules.install(\"install-cargo\", \"cargo\")\n+         .default(build.config.extended)\n+         .host(true)\n+         .only_host_build(true)\n+         .dep(|s| s.name(\"dist-cargo\"))\n+         .run(move |s| install::Installer::new(build).install_cargo(s.stage, s.target));\n+    rules.install(\"install-rls\", \"rls\")\n+         .default(build.config.extended)\n+         .host(true)\n+         .only_host_build(true)\n+         .dep(|s| s.name(\"dist-rls\"))\n+         .run(move |s| install::Installer::new(build).install_rls(s.stage, s.target));\n+    rules.install(\"install-analysis\", \"analysis\")\n+         .default(build.config.extended)\n+         .only_host_build(true)\n+         .dep(|s| s.name(\"dist-analysis\"))\n+         .run(move |s| install::Installer::new(build).install_analysis(s.stage, s.target));\n+    rules.install(\"install-src\", \"src\")\n+         .default(build.config.extended)\n+         .host(true)\n+         .only_build(true)\n+         .only_host_build(true)\n+         .dep(|s| s.name(\"dist-src\"))\n+         .run(move |s| install::Installer::new(build).install_src(s.stage));\n+    rules.install(\"install-rustc\", \"src/librustc\")\n+         .default(true)\n+         .host(true)\n+         .only_host_build(true)\n+         .dep(|s| s.name(\"dist-rustc\"))\n+         .run(move |s| install::Installer::new(build).install_rustc(s.stage, s.target));\n+\n     rules.verify();\n     return rules;\n \n@@ -902,6 +948,7 @@ enum Kind {\n     Bench,\n     Dist,\n     Doc,\n+    Install,\n }\n \n impl<'a> Rule<'a> {\n@@ -1033,6 +1080,12 @@ impl<'a> Rules<'a> {\n         self.rule(name, path, Kind::Dist)\n     }\n \n+    /// Same as `build`, but for `Kind::Install`.\n+    fn install<'b>(&'b mut self, name: &'a str, path: &'a str)\n+                -> RuleBuilder<'a, 'b> {\n+        self.rule(name, path, Kind::Install)\n+    }\n+\n     fn rule<'b>(&'b mut self,\n                 name: &'a str,\n                 path: &'a str,\n@@ -1073,6 +1126,7 @@ invalid rule dependency graph detected, was a rule added and maybe typo'd?\n             \"test\" => Kind::Test,\n             \"bench\" => Kind::Bench,\n             \"dist\" => Kind::Dist,\n+            \"install\" => Kind::Install,\n             _ => return None,\n         };\n         let rules = self.rules.values().filter(|r| r.kind == kind);\n@@ -1122,13 +1176,8 @@ invalid rule dependency graph detected, was a rule added and maybe typo'd?\n             Subcommand::Doc { ref paths } => (Kind::Doc, &paths[..]),\n             Subcommand::Test { ref paths, test_args: _ } => (Kind::Test, &paths[..]),\n             Subcommand::Bench { ref paths, test_args: _ } => (Kind::Bench, &paths[..]),\n-            Subcommand::Dist { ref paths, install } => {\n-                if install {\n-                    return vec![self.sbuild.name(\"install\")]\n-                } else {\n-                    (Kind::Dist, &paths[..])\n-                }\n-            }\n+            Subcommand::Dist { ref paths } => (Kind::Dist, &paths[..]),\n+            Subcommand::Install { ref paths } => (Kind::Install, &paths[..]),\n             Subcommand::Clean => panic!(),\n         };\n \n@@ -1347,10 +1396,6 @@ mod tests {\n     use config::Config;\n     use flags::Flags;\n \n-    macro_rules! a {\n-        ($($a:expr),*) => (vec![$($a.to_string()),*])\n-    }\n-\n     fn build(args: &[&str],\n              extra_host: &[&str],\n              extra_target: &[&str]) -> Build {"}]}