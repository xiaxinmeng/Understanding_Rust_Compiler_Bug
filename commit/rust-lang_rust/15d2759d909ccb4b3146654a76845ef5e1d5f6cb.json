{"sha": "15d2759d909ccb4b3146654a76845ef5e1d5f6cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1ZDI3NTlkOTA5Y2NiNGIzMTQ2NjU0YTc2ODQ1ZWY1ZTFkNWY2Y2I=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-04-12T16:51:08Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-05-15T13:20:19Z"}, "message": "Rename `has_type_parameters` to `requires_monomorphization`", "tree": {"sha": "503cb190e45846541ee8fac349a3e2990066fd42", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/503cb190e45846541ee8fac349a3e2990066fd42"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15d2759d909ccb4b3146654a76845ef5e1d5f6cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15d2759d909ccb4b3146654a76845ef5e1d5f6cb", "html_url": "https://github.com/rust-lang/rust/commit/15d2759d909ccb4b3146654a76845ef5e1d5f6cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15d2759d909ccb4b3146654a76845ef5e1d5f6cb/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9622dc5c67b06c9e6bac9dae9899aed3a4da9c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9622dc5c67b06c9e6bac9dae9899aed3a4da9c1", "html_url": "https://github.com/rust-lang/rust/commit/a9622dc5c67b06c9e6bac9dae9899aed3a4da9c1"}], "stats": {"total": 20, "additions": 11, "deletions": 9}, "files": [{"sha": "218be48da24d50be130c675fcb3ba3d31b5847a8", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/15d2759d909ccb4b3146654a76845ef5e1d5f6cb/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15d2759d909ccb4b3146654a76845ef5e1d5f6cb/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=15d2759d909ccb4b3146654a76845ef5e1d5f6cb", "patch": "@@ -819,13 +819,15 @@ impl<'a, 'gcx, 'tcx> Generics {\n         })\n     }\n \n-    pub fn has_type_parameters(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> bool {\n-        if self.types().count() != 0 {\n+    pub fn requires_monomorphization(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> bool {\n+        if self.params.iter().any(|p| {\n+            if let GenericParam::Type(_) = p { true } else { false }\n+        }) {\n             return true;\n         }\n         if let Some(parent_def_id) = self.parent {\n             let parent = tcx.generics_of(parent_def_id);\n-            parent.has_type_parameters(tcx)\n+            parent.requires_monomorphization(tcx)\n         } else {\n             false\n         }"}, {"sha": "3de90abd9663f84213e90addb6ccd7292e228a9b", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/15d2759d909ccb4b3146654a76845ef5e1d5f6cb/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15d2759d909ccb4b3146654a76845ef5e1d5f6cb/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=15d2759d909ccb4b3146654a76845ef5e1d5f6cb", "patch": "@@ -929,7 +929,7 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n                 hir::ImplItemKind::Const(..) => true,\n                 hir::ImplItemKind::Method(ref sig, _) => {\n                     let generics = self.tcx.generics_of(def_id);\n-                    let needs_inline = (generics.has_type_parameters(self.tcx) ||\n+                    let needs_inline = (generics.requires_monomorphization(self.tcx) ||\n                                         tcx.trans_fn_attrs(def_id).requests_inline()) &&\n                                         !self.metadata_output_only();\n                     let is_const_fn = sig.constness == hir::Constness::Const;"}, {"sha": "2bc4e651dd35797c25a020252e7801deb9228b21", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/15d2759d909ccb4b3146654a76845ef5e1d5f6cb/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15d2759d909ccb4b3146654a76845ef5e1d5f6cb/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=15d2759d909ccb4b3146654a76845ef5e1d5f6cb", "patch": "@@ -1076,7 +1076,7 @@ impl<'b, 'a, 'v> RootCollector<'b, 'a, 'v> {\n \n fn item_has_type_parameters<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> bool {\n     let generics = tcx.generics_of(def_id);\n-    generics.has_type_parameters(tcx)\n+    generics.requires_monomorphization(tcx)\n }\n \n fn create_mono_items_for_default_impls<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,"}, {"sha": "80603959ec202fdd0542d64941bedd7c2ff94a0b", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/15d2759d909ccb4b3146654a76845ef5e1d5f6cb/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15d2759d909ccb4b3146654a76845ef5e1d5f6cb/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=15d2759d909ccb4b3146654a76845ef5e1d5f6cb", "patch": "@@ -184,7 +184,7 @@ impl<'b, 'a, 'tcx:'b> ConstPropagator<'b, 'a, 'tcx> {\n             // evaluate the promoted and replace the constant with the evaluated result\n             Literal::Promoted { index } => {\n                 let generics = self.tcx.generics_of(self.source.def_id);\n-                if generics.has_type_parameters(self.tcx) {\n+                if generics.requires_monomorphization(self.tcx) {\n                     // FIXME: can't handle code with generics\n                     return None;\n                 }\n@@ -295,7 +295,7 @@ impl<'b, 'a, 'tcx:'b> ConstPropagator<'b, 'a, 'tcx> {\n                     self.source.def_id\n                 };\n                 let generics = self.tcx.generics_of(def_id);\n-                if generics.has_type_parameters(self.tcx) {\n+                if generics.requires_monomorphization(self.tcx) {\n                     // FIXME: can't handle code with generics\n                     return None;\n                 }\n@@ -317,7 +317,7 @@ impl<'b, 'a, 'tcx:'b> ConstPropagator<'b, 'a, 'tcx> {\n                     self.source.def_id\n                 };\n                 let generics = self.tcx.generics_of(def_id);\n-                if generics.has_type_parameters(self.tcx) {\n+                if generics.requires_monomorphization(self.tcx) {\n                     // FIXME: can't handle code with generics\n                     return None;\n                 }"}, {"sha": "d77855220691d31113a8ef018b636552baf1e02e", "filename": "src/librustc_trans/back/symbol_export.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/15d2759d909ccb4b3146654a76845ef5e1d5f6cb/src%2Flibrustc_trans%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15d2759d909ccb4b3146654a76845ef5e1d5f6cb/src%2Flibrustc_trans%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fsymbol_export.rs?ref=15d2759d909ccb4b3146654a76845ef5e1d5f6cb", "patch": "@@ -117,7 +117,7 @@ fn reachable_non_generics_provider<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 }) => {\n                     let def_id = tcx.hir.local_def_id(node_id);\n                     let generics = tcx.generics_of(def_id);\n-                    if !generics.has_type_parameters(tcx) &&\n+                    if !generics.requires_monomorphization(tcx) &&\n                         // Functions marked with #[inline] are only ever translated\n                         // with \"internal\" linkage and are never exported.\n                         !Instance::mono(tcx, def_id).def.requires_local(tcx) {"}]}