{"sha": "0ad89819457e7067884597e9a816dab483377ed5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhZDg5ODE5NDU3ZTcwNjc4ODQ1OTdlOWE4MTZkYWI0ODMzNzdlZDU=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-09-15T16:44:17Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-09-15T16:46:53Z"}, "message": "Inline with_interner", "tree": {"sha": "b2647d805fa42455f30124a3bf77dc0b681cd441", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b2647d805fa42455f30124a3bf77dc0b681cd441"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ad89819457e7067884597e9a816dab483377ed5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ad89819457e7067884597e9a816dab483377ed5", "html_url": "https://github.com/rust-lang/rust/commit/0ad89819457e7067884597e9a816dab483377ed5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ad89819457e7067884597e9a816dab483377ed5/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05c09cb62d05df0ccb65503992a7dae3b8b12b08", "url": "https://api.github.com/repos/rust-lang/rust/commits/05c09cb62d05df0ccb65503992a7dae3b8b12b08", "html_url": "https://github.com/rust-lang/rust/commit/05c09cb62d05df0ccb65503992a7dae3b8b12b08"}], "stats": {"total": 14, "additions": 5, "deletions": 9}, "files": [{"sha": "95ab19b55d2561605dba2f8d9995205bf7bece6e", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0ad89819457e7067884597e9a816dab483377ed5/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ad89819457e7067884597e9a816dab483377ed5/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=0ad89819457e7067884597e9a816dab483377ed5", "patch": "@@ -1624,14 +1624,15 @@ impl Symbol {\n \n     /// Maps a string to its interned representation.\n     pub fn intern(string: &str) -> Self {\n-        with_interner(|interner| interner.intern(string))\n+        with_session_globals(|session_globals| session_globals.symbol_interner.intern(string))\n     }\n \n     /// Convert to a `SymbolStr`. This is a slowish operation because it\n     /// requires locking the symbol interner.\n     pub fn as_str(self) -> SymbolStr {\n-        with_interner(|interner| unsafe {\n-            SymbolStr { string: std::mem::transmute::<&str, &str>(interner.get(self)) }\n+        with_session_globals(|session_globals| {\n+            let symbol_str = session_globals.symbol_interner.get(self);\n+            unsafe { SymbolStr { string: std::mem::transmute::<&str, &str>(symbol_str) } }\n         })\n     }\n \n@@ -1640,7 +1641,7 @@ impl Symbol {\n     }\n \n     pub fn len(self) -> usize {\n-        with_interner(|interner| interner.get(self).len())\n+        with_session_globals(|session_globals| session_globals.symbol_interner.get(self).len())\n     }\n \n     pub fn is_empty(self) -> bool {\n@@ -1879,11 +1880,6 @@ impl Ident {\n     }\n }\n \n-#[inline]\n-fn with_interner<T, F: FnOnce(&Interner) -> T>(f: F) -> T {\n-    with_session_globals(|session_globals| f(&session_globals.symbol_interner))\n-}\n-\n /// An alternative to [`Symbol`], useful when the chars within the symbol need to\n /// be accessed. It deliberately has limited functionality and should only be\n /// used for temporary values."}]}