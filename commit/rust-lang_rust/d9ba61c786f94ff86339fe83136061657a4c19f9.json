{"sha": "d9ba61c786f94ff86339fe83136061657a4c19f9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5YmE2MWM3ODZmOTRmZjg2MzM5ZmU4MzEzNjA2MTY1N2E0YzE5Zjk=", "commit": {"author": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2013-07-10T20:44:58Z"}, "committer": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2013-09-06T20:35:11Z"}, "message": "ident->name in NamedField, elsewhere", "tree": {"sha": "2589e1d9a90da80126d854143622c831cd3b0800", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2589e1d9a90da80126d854143622c831cd3b0800"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9ba61c786f94ff86339fe83136061657a4c19f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9ba61c786f94ff86339fe83136061657a4c19f9", "html_url": "https://github.com/rust-lang/rust/commit/d9ba61c786f94ff86339fe83136061657a4c19f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9ba61c786f94ff86339fe83136061657a4c19f9/comments", "author": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ab2cfdae610374760b86a8b6069baf365970f2f", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ab2cfdae610374760b86a8b6069baf365970f2f", "html_url": "https://github.com/rust-lang/rust/commit/9ab2cfdae610374760b86a8b6069baf365970f2f"}], "stats": {"total": 17, "additions": 9, "deletions": 8}, "files": [{"sha": "cdae2f5e066c1f3c1eab4cbd64c8a32862532997", "filename": "src/librustc/middle/borrowck/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9ba61c786f94ff86339fe83136061657a4c19f9/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9ba61c786f94ff86339fe83136061657a4c19f9/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs?ref=d9ba61c786f94ff86339fe83136061657a4c19f9", "patch": "@@ -788,7 +788,7 @@ impl BorrowckCtxt {\n                 match fname {\n                     mc::NamedField(ref fname) => {\n                         out.push_char('.');\n-                        out.push_str(token::ident_to_str(fname));\n+                        out.push_str(token::interner_get(*fname));\n                     }\n                     mc::PositionalField(idx) => {\n                         out.push_char('#'); // invent a notation here"}, {"sha": "22e6bc3ac2febee28fa8f296d84e3c607381e535", "filename": "src/librustc/middle/entry.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9ba61c786f94ff86339fe83136061657a4c19f9/src%2Flibrustc%2Fmiddle%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9ba61c786f94ff86339fe83136061657a4c19f9/src%2Flibrustc%2Fmiddle%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fentry.rs?ref=d9ba61c786f94ff86339fe83136061657a4c19f9", "patch": "@@ -81,7 +81,7 @@ pub fn find_entry_point(session: Session, crate: &Crate, ast_map: ast_map::map)\n fn find_item(item: @item, ctxt: @mut EntryContext, visitor: &mut EntryVisitor) {\n     match item.node {\n         item_fn(*) => {\n-            if item.ident == special_idents::main {\n+            if item.ident.name == special_idents::main.name {\n                 match ctxt.ast_map.find(&item.id) {\n                     Some(&ast_map::node_item(_, path)) => {\n                         if path.len() == 0 {"}, {"sha": "0f5dd8cda7a99f180bb35312b31f18920d0e899c", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d9ba61c786f94ff86339fe83136061657a4c19f9/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9ba61c786f94ff86339fe83136061657a4c19f9/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=d9ba61c786f94ff86339fe83136061657a4c19f9", "patch": "@@ -56,6 +56,7 @@ use syntax::ast::{MutImmutable, MutMutable};\n use syntax::ast;\n use syntax::codemap::Span;\n use syntax::print::pprust;\n+use syntax::parse::token;\n \n #[deriving(Eq)]\n pub enum categorization {\n@@ -99,7 +100,7 @@ pub enum InteriorKind {\n \n #[deriving(Eq, IterBytes)]\n pub enum FieldName {\n-    NamedField(ast::Ident),\n+    NamedField(ast::Name),\n     PositionalField(uint)\n }\n \n@@ -619,7 +620,7 @@ impl mem_categorization_ctxt {\n         @cmt_ {\n             id: node.id(),\n             span: node.span(),\n-            cat: cat_interior(base_cmt, InteriorField(NamedField(f_name))),\n+            cat: cat_interior(base_cmt, InteriorField(NamedField(f_name.name))),\n             mutbl: base_cmt.mutbl.inherit(),\n             ty: f_ty\n         }\n@@ -1224,9 +1225,9 @@ pub fn ptr_sigil(ptr: PointerKind) -> ~str {\n }\n \n impl Repr for InteriorKind {\n-    fn repr(&self, tcx: ty::ctxt) -> ~str {\n+    fn repr(&self, _tcx: ty::ctxt) -> ~str {\n         match *self {\n-            InteriorField(NamedField(fld)) => tcx.sess.str_of(fld).to_owned(),\n+            InteriorField(NamedField(fld)) => token::interner_get(fld).to_owned(),\n             InteriorField(PositionalField(i)) => fmt!(\"#%?\", i),\n             InteriorElement(_) => ~\"[]\",\n         }"}, {"sha": "55783e3568ea6b42854380f0cdf2e78672be7e42", "filename": "src/librustc/middle/moves.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9ba61c786f94ff86339fe83136061657a4c19f9/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9ba61c786f94ff86339fe83136061657a4c19f9/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmoves.rs?ref=d9ba61c786f94ff86339fe83136061657a4c19f9", "patch": "@@ -429,7 +429,7 @@ impl VisitContext {\n                     // specified and (2) have a type that\n                     // moves-by-default:\n                     let consume_with = with_fields.iter().any(|tf| {\n-                        !fields.iter().any(|f| f.ident == tf.ident) &&\n+                        !fields.iter().any(|f| f.ident.name == tf.ident.name) &&\n                             ty::type_moves_by_default(self.tcx, tf.mt.ty)\n                     });\n "}, {"sha": "d6f61c6328a0bbf883506b948b3b1d624742b0eb", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9ba61c786f94ff86339fe83136061657a4c19f9/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9ba61c786f94ff86339fe83136061657a4c19f9/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=d9ba61c786f94ff86339fe83136061657a4c19f9", "patch": "@@ -206,7 +206,7 @@ impl PrivacyVisitor {\n     fn check_field(&mut self, span: Span, id: ast::DefId, ident: ast::Ident) {\n         let fields = ty::lookup_struct_fields(self.tcx, id);\n         for field in fields.iter() {\n-            if field.ident != ident { loop; }\n+            if field.ident.name != ident.name { loop; }\n             if field.vis == private {\n                 self.tcx.sess.span_err(span, fmt!(\"field `%s` is private\",\n                                              token::ident_to_str(&ident)));"}]}