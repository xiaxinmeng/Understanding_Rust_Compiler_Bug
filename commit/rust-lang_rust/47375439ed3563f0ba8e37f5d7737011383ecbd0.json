{"sha": "47375439ed3563f0ba8e37f5d7737011383ecbd0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3Mzc1NDM5ZWQzNTYzZjBiYThlMzdmNWQ3NzM3MDExMzgzZWNiZDA=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-05-29T23:20:54Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-05-29T23:20:54Z"}, "message": "remove useless invocations of universally_quantify_from_sty() in method lookup", "tree": {"sha": "dccf09a925db07a600f2652b559858ee54b54d89", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dccf09a925db07a600f2652b559858ee54b54d89"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/47375439ed3563f0ba8e37f5d7737011383ecbd0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/47375439ed3563f0ba8e37f5d7737011383ecbd0", "html_url": "https://github.com/rust-lang/rust/commit/47375439ed3563f0ba8e37f5d7737011383ecbd0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/47375439ed3563f0ba8e37f5d7737011383ecbd0/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37b78b48e3a4476602a6bda968e126a4ef397818", "url": "https://api.github.com/repos/rust-lang/rust/commits/37b78b48e3a4476602a6bda968e126a4ef397818", "html_url": "https://github.com/rust-lang/rust/commit/37b78b48e3a4476602a6bda968e126a4ef397818"}], "stats": {"total": 28, "additions": 9, "deletions": 19}, "files": [{"sha": "1b35e6ae271183ef53e49d8c8f0113295f04fae7", "filename": "src/rustc/middle/typeck/check/method.rs", "status": "modified", "additions": 9, "deletions": 19, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/47375439ed3563f0ba8e37f5d7737011383ecbd0/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47375439ed3563f0ba8e37f5d7737011383ecbd0/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=47375439ed3563f0ba8e37f5d7737011383ecbd0", "patch": "@@ -201,27 +201,17 @@ impl methods for lookup {\n                 // Check whether this impl has a method with the right name.\n                 for im.methods.find({|m| m.ident == self.m_name}).each {|m|\n \n-                    // determine the `self` with fresh variables for\n-                    // each parameter:\n-                    let {substs: self_substs, ty: self_ty} =\n+                    // determine the `self` of the impl with fresh\n+                    // variables for each parameter:\n+                    let {substs: impl_substs, ty: impl_ty} =\n                         impl_self_ty(self.fcx, im.did);\n \n-                    // Here \"self\" refers to the callee side...\n-                    let self_ty =\n-                        universally_quantify_from_sty(\n-                            self.fcx, self.expr.span, [self_ty],\n-                            ty::get(self_ty).struct);\n-\n-                    // ... and \"ty\" refers to the caller side.\n-                    let ty = self.self_ty;\n-\n                     // if we can assign the caller to the callee, that's a\n                     // potential match.  Collect those in the vector.\n-                    alt self.fcx.can_mk_subty(ty, self_ty) {\n+                    alt self.fcx.can_mk_subty(self.self_ty, impl_ty) {\n                       result::err(_) { /* keep looking */ }\n                       result::ok(_) {\n-                        results += [(ty, self_ty, self_substs,\n-                                     m.n_tps, m.did)];\n+                        results += [(impl_ty, impl_substs, m.n_tps, m.did)];\n                       }\n                     }\n                 }\n@@ -237,7 +227,7 @@ impl methods for lookup {\n                     // but I cannot for the life of me figure out how to\n                     // annotate resolve to preserve this information.\n                     for results.eachi { |i, result|\n-                        let (_, _, _, _, did) = result;\n+                        let (_, _, _, did) = result;\n                         let span = if did.crate == ast::local_crate {\n                             alt check self.tcx().items.get(did.node) {\n                               ast_map::node_method(m, _, _) { m.span }\n@@ -253,8 +243,8 @@ impl methods for lookup {\n                     }\n                 }\n \n-                let (ty, self_ty, self_substs, n_tps, did) = results[0];\n-                alt self.fcx.mk_subty(ty, self_ty) {\n+                let (impl_ty, impl_substs, n_tps, did) = results[0];\n+                alt self.fcx.mk_subty(self.self_ty, impl_ty) {\n                   result::ok(_) {}\n                   result::err(_) {\n                     self.tcx().sess.span_bug(\n@@ -264,7 +254,7 @@ impl methods for lookup {\n                 }\n                 let fty = self.ty_from_did(did);\n                 ret some(self.write_mty_from_fty(\n-                    self_substs, n_tps, fty,\n+                    impl_substs, n_tps, fty,\n                     method_static(did)));\n             }\n         }"}]}