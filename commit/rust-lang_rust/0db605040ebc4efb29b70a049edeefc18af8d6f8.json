{"sha": "0db605040ebc4efb29b70a049edeefc18af8d6f8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkYjYwNTA0MGViYzRlZmIyOWI3MGEwNDllZGVlZmMxOGFmOGQ2Zjg=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-09-28T15:00:27Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-09-28T15:00:27Z"}, "message": "Use CallConv::triple_default instead of hard coding SystemV\n\nFixes #718", "tree": {"sha": "912e57136f088a383ef019761737feeefd4bfbd3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/912e57136f088a383ef019761737feeefd4bfbd3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0db605040ebc4efb29b70a049edeefc18af8d6f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0db605040ebc4efb29b70a049edeefc18af8d6f8", "html_url": "https://github.com/rust-lang/rust/commit/0db605040ebc4efb29b70a049edeefc18af8d6f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0db605040ebc4efb29b70a049edeefc18af8d6f8/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44792f108949048c8945a29e6eee6a35c282f210", "url": "https://api.github.com/repos/rust-lang/rust/commits/44792f108949048c8945a29e6eee6a35c282f210", "html_url": "https://github.com/rust-lang/rust/commit/44792f108949048c8945a29e6eee6a35c282f210"}], "stats": {"total": 32, "additions": 18, "deletions": 14}, "files": [{"sha": "8d4038065e946df9291746ab9001e77b116ea09d", "filename": "src/abi/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0db605040ebc4efb29b70a049edeefc18af8d6f8/src%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0db605040ebc4efb29b70a049edeefc18af8d6f8/src%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fmod.rs?ref=0db605040ebc4efb29b70a049edeefc18af8d6f8", "patch": "@@ -26,8 +26,8 @@ fn clif_sig_from_fn_sig<'tcx>(\n         abi => abi,\n     };\n     let (call_conv, inputs, output): (CallConv, Vec<Ty>, Ty) = match abi {\n-        Abi::Rust => (CallConv::SystemV, sig.inputs().to_vec(), sig.output()),\n-        Abi::C => (CallConv::SystemV, sig.inputs().to_vec(), sig.output()),\n+        Abi::Rust => (crate::default_call_conv(tcx.sess), sig.inputs().to_vec(), sig.output()),\n+        Abi::C => (crate::default_call_conv(tcx.sess), sig.inputs().to_vec(), sig.output()),\n         Abi::RustCall => {\n             assert_eq!(sig.inputs().len(), 2);\n             let extra_args = match sig.inputs().last().unwrap().kind {\n@@ -36,10 +36,10 @@ fn clif_sig_from_fn_sig<'tcx>(\n             };\n             let mut inputs: Vec<Ty> = vec![sig.inputs()[0]];\n             inputs.extend(extra_args.types());\n-            (CallConv::SystemV, inputs, sig.output())\n+            (crate::default_call_conv(tcx.sess), inputs, sig.output())\n         }\n         Abi::System => unreachable!(),\n-        Abi::RustIntrinsic => (CallConv::SystemV, sig.inputs().to_vec(), sig.output()),\n+        Abi::RustIntrinsic => (crate::default_call_conv(tcx.sess), sig.inputs().to_vec(), sig.output()),\n         _ => unimplemented!(\"unsupported abi {:?}\", sig.abi),\n     };\n \n@@ -142,7 +142,7 @@ impl<'tcx, B: Backend + 'static> FunctionCx<'_, 'tcx, B> {\n         let sig = Signature {\n             params: input_tys.iter().cloned().map(AbiParam::new).collect(),\n             returns: output_tys.iter().cloned().map(AbiParam::new).collect(),\n-            call_conv: CallConv::SystemV,\n+            call_conv: crate::default_call_conv(self.tcx.sess),\n         };\n         let func_id = self\n             .module"}, {"sha": "c4222a858aba54292012cf0d733d321cf63f0116", "filename": "src/allocator.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0db605040ebc4efb29b70a049edeefc18af8d6f8/src%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0db605040ebc4efb29b70a049edeefc18af8d6f8/src%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fallocator.rs?ref=0db605040ebc4efb29b70a049edeefc18af8d6f8", "patch": "@@ -21,14 +21,14 @@ pub fn codegen(tcx: TyCtxt<'_>, module: &mut Module<impl Backend + 'static>) ->\n     if any_dynamic_crate {\n         false\n     } else if let Some(kind) = *tcx.sess.allocator_kind.get() {\n-        codegen_inner(module, kind);\n+        codegen_inner(tcx.sess, module, kind);\n         true\n     } else {\n         false\n     }\n }\n \n-pub fn codegen_inner(module: &mut Module<impl Backend + 'static>, kind: AllocatorKind) {\n+pub fn codegen_inner(sess: &Session, module: &mut Module<impl Backend + 'static>, kind: AllocatorKind) {\n     let usize_ty = module.target_config().pointer_type();\n \n     for method in ALLOCATOR_METHODS {\n@@ -55,7 +55,7 @@ pub fn codegen_inner(module: &mut Module<impl Backend + 'static>, kind: Allocato\n         };\n \n         let sig = Signature {\n-            call_conv: CallConv::SystemV,\n+            call_conv: crate::default_call_conv(sess),\n             params: arg_tys.iter().cloned().map(AbiParam::new).collect(),\n             returns: output.into_iter().map(AbiParam::new).collect(),\n         };"}, {"sha": "c8b1720850009b6dde45bbc7d8205f359781bb31", "filename": "src/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0db605040ebc4efb29b70a049edeefc18af8d6f8/src%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0db605040ebc4efb29b70a049edeefc18af8d6f8/src%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver.rs?ref=0db605040ebc4efb29b70a049edeefc18af8d6f8", "patch": "@@ -61,7 +61,7 @@ fn run_jit(tcx: TyCtxt<'_>, log: &mut Option<File>) -> ! {\n         returns: vec![AbiParam::new(\n             jit_module.target_config().pointer_type(), /*isize*/\n         )],\n-        call_conv: CallConv::SystemV,\n+        call_conv: crate::default_call_conv(tcx.sess),\n     };\n     let main_func_id = jit_module\n         .declare_function(\"main\", Linkage::Import, &sig)"}, {"sha": "44aa2151a75410722ee4bf069a72b2f994ac6e6e", "filename": "src/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0db605040ebc4efb29b70a049edeefc18af8d6f8/src%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0db605040ebc4efb29b70a049edeefc18af8d6f8/src%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics.rs?ref=0db605040ebc4efb29b70a049edeefc18af8d6f8", "patch": "@@ -1063,7 +1063,7 @@ pub fn codegen_intrinsic_call<'tcx>(\n         try, (v f, v data, v _local_ptr) {\n             // FIXME once unwinding is supported, change this to actually catch panics\n             let f_sig = fx.bcx.func.import_signature(Signature {\n-                call_conv: cranelift::codegen::isa::CallConv::SystemV,\n+                call_conv: crate::default_call_conv(fx.tcx.sess),\n                 params: vec![AbiParam::new(fx.bcx.func.dfg.value_type(data))],\n                 returns: vec![],\n             });"}, {"sha": "efa666bc9ebbaa1ba4ca8189f6b1af04dc83d963", "filename": "src/lib.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0db605040ebc4efb29b70a049edeefc18af8d6f8/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0db605040ebc4efb29b70a049edeefc18af8d6f8/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=0db605040ebc4efb29b70a049edeefc18af8d6f8", "patch": "@@ -225,7 +225,7 @@ impl CodegenBackend for CraneliftCodegenBackend {\n \n         sess.profiler(|p| p.start_activity(\"link_crate\"));\n         rustc::util::common::time(sess, \"linking\", || {\n-            let target_cpu = target_triple(sess).to_string();\n+            let target_cpu = crate::target_triple(sess).to_string();\n             link_binary::<crate::archive::ArArchiveBuilder<'_>>(\n                 sess,\n                 &codegen_results,\n@@ -244,6 +244,10 @@ fn target_triple(sess: &Session) -> target_lexicon::Triple {\n     sess.target.target.llvm_target.parse().unwrap()\n }\n \n+fn default_call_conv(sess: &Session) -> CallConv {\n+    CallConv::triple_default(&target_triple(sess))\n+}\n+\n fn build_isa(sess: &Session, enable_pic: bool) -> Box<dyn isa::TargetIsa + 'static> {\n     let mut flags_builder = settings::builder();\n     if enable_pic {\n@@ -279,7 +283,7 @@ fn build_isa(sess: &Session, enable_pic: bool) -> Box<dyn isa::TargetIsa + 'stat\n         }\n     }*/\n \n-    let target_triple = target_triple(sess);\n+    let target_triple = crate::target_triple(sess);\n     let flags = settings::Flags::new(flags_builder);\n     cranelift::codegen::isa::lookup(target_triple)\n         .unwrap()"}, {"sha": "788b65a8230262256933adc14b506e541e35d014", "filename": "src/main_shim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0db605040ebc4efb29b70a049edeefc18af8d6f8/src%2Fmain_shim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0db605040ebc4efb29b70a049edeefc18af8d6f8/src%2Fmain_shim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmain_shim.rs?ref=0db605040ebc4efb29b70a049edeefc18af8d6f8", "patch": "@@ -41,7 +41,7 @@ pub fn maybe_create_entry_wrapper(tcx: TyCtxt<'_>, module: &mut Module<impl Back\n             returns: vec![AbiParam::new(\n                 m.target_config().pointer_type(), /*isize*/\n             )],\n-            call_conv: CallConv::SystemV,\n+            call_conv: crate::default_call_conv(tcx.sess),\n         };\n \n         let cmain_func_id = m"}, {"sha": "e5e8a532ed9814492ed47e04b12d72ea89bf4eb8", "filename": "src/trap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0db605040ebc4efb29b70a049edeefc18af8d6f8/src%2Ftrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0db605040ebc4efb29b70a049edeefc18af8d6f8/src%2Ftrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftrap.rs?ref=0db605040ebc4efb29b70a049edeefc18af8d6f8", "patch": "@@ -7,7 +7,7 @@ fn codegen_print(fx: &mut FunctionCx<'_, '_, impl cranelift_module::Backend>, ms\n             \"puts\",\n             Linkage::Import,\n             &Signature {\n-                call_conv: CallConv::SystemV,\n+                call_conv: crate::default_call_conv(fx.tcx.sess),\n                 params: vec![AbiParam::new(pointer_ty(fx.tcx))],\n                 returns: vec![],\n             },"}]}