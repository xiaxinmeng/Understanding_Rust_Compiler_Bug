{"sha": "4055fe83f671abe8b3e3fa7118d271692b13ca2b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwNTVmZTgzZjY3MWFiZThiM2UzZmE3MTE4ZDI3MTY5MmIxM2NhMmI=", "commit": {"author": {"name": "Andrew Paseltiner", "email": "apaseltiner@gmail.com", "date": "2013-03-20T15:36:16Z"}, "committer": {"name": "Andrew Paseltiner", "email": "apaseltiner@gmail.com", "date": "2013-03-22T10:24:19Z"}, "message": "std: replace uses of old deriving attribute with new one", "tree": {"sha": "e8d631d719aed233d81e58e3f8b5972863fdf930", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8d631d719aed233d81e58e3f8b5972863fdf930"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4055fe83f671abe8b3e3fa7118d271692b13ca2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4055fe83f671abe8b3e3fa7118d271692b13ca2b", "html_url": "https://github.com/rust-lang/rust/commit/4055fe83f671abe8b3e3fa7118d271692b13ca2b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4055fe83f671abe8b3e3fa7118d271692b13ca2b/comments", "author": {"login": "apasel422", "id": 8644784, "node_id": "MDQ6VXNlcjg2NDQ3ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/8644784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apasel422", "html_url": "https://github.com/apasel422", "followers_url": "https://api.github.com/users/apasel422/followers", "following_url": "https://api.github.com/users/apasel422/following{/other_user}", "gists_url": "https://api.github.com/users/apasel422/gists{/gist_id}", "starred_url": "https://api.github.com/users/apasel422/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apasel422/subscriptions", "organizations_url": "https://api.github.com/users/apasel422/orgs", "repos_url": "https://api.github.com/users/apasel422/repos", "events_url": "https://api.github.com/users/apasel422/events{/privacy}", "received_events_url": "https://api.github.com/users/apasel422/received_events", "type": "User", "site_admin": false}, "committer": {"login": "apasel422", "id": 8644784, "node_id": "MDQ6VXNlcjg2NDQ3ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/8644784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apasel422", "html_url": "https://github.com/apasel422", "followers_url": "https://api.github.com/users/apasel422/followers", "following_url": "https://api.github.com/users/apasel422/following{/other_user}", "gists_url": "https://api.github.com/users/apasel422/gists{/gist_id}", "starred_url": "https://api.github.com/users/apasel422/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apasel422/subscriptions", "organizations_url": "https://api.github.com/users/apasel422/orgs", "repos_url": "https://api.github.com/users/apasel422/repos", "events_url": "https://api.github.com/users/apasel422/events{/privacy}", "received_events_url": "https://api.github.com/users/apasel422/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98e8fe12d232bd77d46c75e69236d11277732e82", "url": "https://api.github.com/repos/rust-lang/rust/commits/98e8fe12d232bd77d46c75e69236d11277732e82", "html_url": "https://github.com/rust-lang/rust/commit/98e8fe12d232bd77d46c75e69236d11277732e82"}], "stats": {"total": 42, "additions": 21, "deletions": 21}, "files": [{"sha": "64d28dcde834c1cce093cbf034ac5a4913cdee35", "filename": "src/libstd/deque.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4055fe83f671abe8b3e3fa7118d271692b13ca2b/src%2Flibstd%2Fdeque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4055fe83f671abe8b3e3fa7118d271692b13ca2b/src%2Flibstd%2Fdeque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdeque.rs?ref=4055fe83f671abe8b3e3fa7118d271692b13ca2b", "patch": "@@ -253,15 +253,15 @@ mod tests {\n         fail_unless!(*deq.get(3) == d);\n     }\n \n-    #[deriving_eq]\n+    #[deriving(Eq)]\n     enum Taggy { One(int), Two(int, int), Three(int, int, int), }\n \n-    #[deriving_eq]\n+    #[deriving(Eq)]\n     enum Taggypar<T> {\n         Onepar(int), Twopar(int, int), Threepar(int, int, int),\n     }\n \n-    #[deriving_eq]\n+    #[deriving(Eq)]\n     struct RecCy {\n         x: int,\n         y: int,"}, {"sha": "de8a8f343816ca721976813992fdd53888663ba8", "filename": "src/libstd/getopts.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4055fe83f671abe8b3e3fa7118d271692b13ca2b/src%2Flibstd%2Fgetopts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4055fe83f671abe8b3e3fa7118d271692b13ca2b/src%2Flibstd%2Fgetopts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fgetopts.rs?ref=4055fe83f671abe8b3e3fa7118d271692b13ca2b", "patch": "@@ -86,20 +86,20 @@ use core::option::{Some, None};\n use core::str;\n use core::vec;\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum Name {\n     Long(~str),\n     Short(char),\n }\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum HasArg { Yes, No, Maybe, }\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum Occur { Req, Optional, Multi, }\n \n /// A description of a possible option\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct Opt {\n     name: Name,\n     hasarg: HasArg,\n@@ -146,14 +146,14 @@ pub fn optmulti(name: &str) -> Opt {\n     return Opt {name: mkname(name), hasarg: Yes, occur: Multi};\n }\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n enum Optval { Val(~str), Given, }\n \n /**\n  * The result of checking command line arguments. Contains a vector\n  * of matches and a vector of free strings.\n  */\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct Matches {\n     opts: ~[Opt],\n     vals: ~[~[Optval]],\n@@ -179,7 +179,7 @@ fn find_opt(opts: &[Opt], nm: Name) -> Option<uint> {\n  * The type returned when the command line does not conform to the\n  * expected format. Pass this value to <fail_str> to get an error message.\n  */\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum Fail_ {\n     ArgumentMissing(~str),\n     UnrecognizedOption(~str),\n@@ -446,7 +446,7 @@ pub fn opt_default(mm: &Matches, nm: &str, def: &str) -> Option<~str> {\n                            _      => Some::<~str>(str::from_slice(def)) }\n }\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum FailType {\n     ArgumentMissing_,\n     UnrecognizedOption_,\n@@ -469,7 +469,7 @@ pub mod groups {\n     /** one group of options, e.g., both -h and --help, along with\n      * their shared description and properties\n      */\n-    #[deriving_eq]\n+    #[deriving(Eq)]\n     pub struct OptGroup {\n         short_name: ~str,\n         long_name: ~str,"}, {"sha": "eb1c249be695042f6eb158618c9578c9dc4d23b5", "filename": "src/libstd/list.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4055fe83f671abe8b3e3fa7118d271692b13ca2b/src%2Flibstd%2Flist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4055fe83f671abe8b3e3fa7118d271692b13ca2b/src%2Flibstd%2Flist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flist.rs?ref=4055fe83f671abe8b3e3fa7118d271692b13ca2b", "patch": "@@ -15,7 +15,7 @@ use core::option::*;\n use core::prelude::*;\n use core::vec;\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum List<T> {\n     Cons(T, @List<T>),\n     Nil,"}, {"sha": "6fb4f6747a3ee189517e3ccdbd2992aad70f5353", "filename": "src/libstd/net_url.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4055fe83f671abe8b3e3fa7118d271692b13ca2b/src%2Flibstd%2Fnet_url.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4055fe83f671abe8b3e3fa7118d271692b13ca2b/src%2Flibstd%2Fnet_url.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_url.rs?ref=4055fe83f671abe8b3e3fa7118d271692b13ca2b", "patch": "@@ -25,7 +25,7 @@ use core::to_str::ToStr;\n use core::to_str;\n use core::uint;\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n struct Url {\n     scheme: ~str,\n     user: Option<UserInfo>,\n@@ -36,7 +36,7 @@ struct Url {\n     fragment: Option<~str>\n }\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n struct UserInfo {\n     user: ~str,\n     pass: Option<~str>\n@@ -398,7 +398,7 @@ pub pure fn get_scheme(rawurl: &str) -> Result<(~str, ~str), ~str> {\n     return Err(~\"url: Scheme must be terminated with a colon.\");\n }\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n enum Input {\n     Digit, // all digits\n     Hex, // digits and letters a-f"}, {"sha": "3593ccc5ae89890c6b6926061bf577f19f1ad8ca", "filename": "src/libstd/semver.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4055fe83f671abe8b3e3fa7118d271692b13ca2b/src%2Flibstd%2Fsemver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4055fe83f671abe8b3e3fa7118d271692b13ca2b/src%2Flibstd%2Fsemver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsemver.rs?ref=4055fe83f671abe8b3e3fa7118d271692b13ca2b", "patch": "@@ -19,7 +19,7 @@ use core::str;\n use core::to_str::ToStr;\n use core::uint;\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum Identifier {\n     Numeric(uint),\n     AlphaNumeric(~str)\n@@ -60,7 +60,7 @@ impl ToStr for Identifier {\n }\n \n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct Version {\n     major: uint,\n     minor: uint,"}, {"sha": "1829e29826fd8da00c621bd33c5176f27c53141c", "filename": "src/libstd/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4055fe83f671abe8b3e3fa7118d271692b13ca2b/src%2Flibstd%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4055fe83f671abe8b3e3fa7118d271692b13ca2b/src%2Flibstd%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftest.rs?ref=4055fe83f671abe8b3e3fa7118d271692b13ca2b", "patch": "@@ -188,13 +188,13 @@ pub fn parse_opts(args: &[~str]) -> OptRes {\n     either::Left(test_opts)\n }\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct BenchSamples {\n     ns_iter_samples: ~[f64],\n     mb_s: uint\n }\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum TestResult { TrOk, TrFailed, TrIgnored, TrBench(BenchSamples) }\n \n struct ConsoleTestState {"}, {"sha": "f8b4337e437f2203e77e4f2a9ada2b7860c7d2c8", "filename": "src/libstd/workcache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4055fe83f671abe8b3e3fa7118d271692b13ca2b/src%2Flibstd%2Fworkcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4055fe83f671abe8b3e3fa7118d271692b13ca2b/src%2Flibstd%2Fworkcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fworkcache.rs?ref=4055fe83f671abe8b3e3fa7118d271692b13ca2b", "patch": "@@ -96,7 +96,7 @@ use core::mutable::Mut;\n *\n */\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n #[auto_encode]\n #[auto_decode]\n struct WorkKey {"}]}