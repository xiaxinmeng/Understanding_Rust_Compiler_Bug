{"sha": "c1084a3ada125b83c03c40b1f304f2f34abf0da0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxMDg0YTNhZGExMjViODNjMDNjNDBiMWYzMDRmMmYzNGFiZjBkYTA=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-09-11T08:15:58Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-09-17T00:16:46Z"}, "message": "Changes to tests", "tree": {"sha": "3c9c280bc530fd3b4d33522957b92027d85c799d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c9c280bc530fd3b4d33522957b92027d85c799d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1084a3ada125b83c03c40b1f304f2f34abf0da0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1084a3ada125b83c03c40b1f304f2f34abf0da0", "html_url": "https://github.com/rust-lang/rust/commit/c1084a3ada125b83c03c40b1f304f2f34abf0da0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1084a3ada125b83c03c40b1f304f2f34abf0da0/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d21bfff78cd949ce72be57d3528c4f6985190feb", "url": "https://api.github.com/repos/rust-lang/rust/commits/d21bfff78cd949ce72be57d3528c4f6985190feb", "html_url": "https://github.com/rust-lang/rust/commit/d21bfff78cd949ce72be57d3528c4f6985190feb"}], "stats": {"total": 54, "additions": 20, "deletions": 34}, "files": [{"sha": "7004dac3d4f40d1d56833ed5c6acc0ea35909f67", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c1084a3ada125b83c03c40b1f304f2f34abf0da0/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1084a3ada125b83c03c40b1f304f2f34abf0da0/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=c1084a3ada125b83c03c40b1f304f2f34abf0da0", "patch": "@@ -505,10 +505,10 @@ pub trait LintContext: Sized {\n impl<'a> EarlyContext<'a> {\n     fn new(sess: &'a Session,\n            krate: &'a ast::Crate) -> EarlyContext<'a> {\n-        // We want to own the lint store, so move it out of the session.\n+        // We want to own the lint store, so move it out of the session. Remember\n+        // to put it back later...\n         let lint_store = mem::replace(&mut *sess.lint_store.borrow_mut(),\n                                       LintStore::new());\n-\n         EarlyContext {\n             sess: sess,\n             krate: krate,"}, {"sha": "ff2780918f7bdc6c3c2017b794fa9848e66fbd19", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c1084a3ada125b83c03c40b1f304f2f34abf0da0/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1084a3ada125b83c03c40b1f304f2f34abf0da0/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=c1084a3ada125b83c03c40b1f304f2f34abf0da0", "patch": "@@ -129,6 +129,9 @@ pub fn compile_input(sess: Session,\n                                                                      &ast_map.krate(),\n                                                                      &id[..]));\n \n+        time(sess.time_passes(), \"early lint checks\", || {\n+            lint::check_ast_crate(&sess, &expanded_crate)\n+        });\n \n         phase_3_run_analysis_passes(sess,\n                                     ast_map,\n@@ -597,10 +600,6 @@ pub fn phase_2_configure_and_expand(sess: &Session,\n         sess.abort_if_errors();\n     });\n \n-    time(time_passes, \"early lint checks\", || {\n-        lint::check_ast_crate(sess, &krate)\n-    });\n-\n     Some(krate)\n }\n "}, {"sha": "927b3e1cba98887de38262ba53a22a65ac169a3e", "filename": "src/test/auxiliary/lint_for_crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1084a3ada125b83c03c40b1f304f2f34abf0da0/src%2Ftest%2Fauxiliary%2Flint_for_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1084a3ada125b83c03c40b1f304f2f34abf0da0/src%2Ftest%2Fauxiliary%2Flint_for_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Flint_for_crate.rs?ref=c1084a3ada125b83c03c40b1f304f2f34abf0da0", "patch": "@@ -17,7 +17,7 @@\n extern crate rustc_front;\n extern crate syntax;\n \n-use rustc::lint::{Context, LintPass, LintPassObject, LintArray};\n+use rustc::lint::{Context, LintContext, LintPass, LintPassObject, LintArray};\n use rustc::plugin::Registry;\n use rustc_front::hir;\n use syntax::attr;"}, {"sha": "45393913578e5a2880f569c1498e161f6c196937", "filename": "src/test/auxiliary/lint_group_plugin_test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1084a3ada125b83c03c40b1f304f2f34abf0da0/src%2Ftest%2Fauxiliary%2Flint_group_plugin_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1084a3ada125b83c03c40b1f304f2f34abf0da0/src%2Ftest%2Fauxiliary%2Flint_group_plugin_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Flint_group_plugin_test.rs?ref=c1084a3ada125b83c03c40b1f304f2f34abf0da0", "patch": "@@ -20,7 +20,7 @@ extern crate rustc_front;\n extern crate rustc;\n \n use rustc_front::hir;\n-use rustc::lint::{Context, LintPass, LintPassObject, LintArray};\n+use rustc::lint::{Context, LintContext, LintPass, LintPassObject, LintArray};\n use rustc::plugin::Registry;\n \n declare_lint!(TEST_LINT, Warn, \"Warn about items named 'lintme'\");"}, {"sha": "0dedd78abee05608e70da26202d547f9dbf894a3", "filename": "src/test/auxiliary/lint_plugin_test.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c1084a3ada125b83c03c40b1f304f2f34abf0da0/src%2Ftest%2Fauxiliary%2Flint_plugin_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1084a3ada125b83c03c40b1f304f2f34abf0da0/src%2Ftest%2Fauxiliary%2Flint_plugin_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Flint_plugin_test.rs?ref=c1084a3ada125b83c03c40b1f304f2f34abf0da0", "patch": "@@ -13,15 +13,15 @@\n #![feature(plugin_registrar)]\n #![feature(box_syntax, rustc_private)]\n \n-extern crate rustc_front;\n+extern crate syntax;\n \n // Load rustc as a plugin to get macros\n #[macro_use]\n extern crate rustc;\n \n-use rustc::lint::{Context, LintPass, LintPassObject, LintArray};\n+use rustc::lint::{EarlyContext, LintContext, LintPass, LintPassObject, LintArray};\n use rustc::plugin::Registry;\n-use rustc_front::hir;\n+use syntax::ast;\n declare_lint!(TEST_LINT, Warn, \"Warn about items named 'lintme'\");\n \n struct Pass;\n@@ -31,7 +31,7 @@ impl LintPass for Pass {\n         lint_array!(TEST_LINT)\n     }\n \n-    fn check_item(&mut self, cx: &Context, it: &hir::Item) {\n+    fn check_ast_item(&mut self, cx: &EarlyContext, it: &ast::Item) {\n         if it.ident.name == \"lintme\" {\n             cx.span_lint(TEST_LINT, it.span, \"item is named 'lintme'\");\n         }"}, {"sha": "0d666a4920038aa40254183d496ccf73c9a72af6", "filename": "src/test/compile-fail/autoderef-full-lval.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c1084a3ada125b83c03c40b1f304f2f34abf0da0/src%2Ftest%2Fcompile-fail%2Fautoderef-full-lval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1084a3ada125b83c03c40b1f304f2f34abf0da0/src%2Ftest%2Fcompile-fail%2Fautoderef-full-lval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fautoderef-full-lval.rs?ref=c1084a3ada125b83c03c40b1f304f2f34abf0da0", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n struct clam {"}, {"sha": "f3417fafe90375ed9996d8b917d90137e123a375", "filename": "src/test/compile-fail/borrow-tuple-fields.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c1084a3ada125b83c03c40b1f304f2f34abf0da0/src%2Ftest%2Fcompile-fail%2Fborrow-tuple-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1084a3ada125b83c03c40b1f304f2f34abf0da0/src%2Ftest%2Fcompile-fail%2Fborrow-tuple-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrow-tuple-fields.rs?ref=c1084a3ada125b83c03c40b1f304f2f34abf0da0", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n struct Foo(Box<isize>, isize);"}, {"sha": "52a4950022d1e13364ae8a26ac5edac2b50e5e8f", "filename": "src/test/compile-fail/cast-as-bool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1084a3ada125b83c03c40b1f304f2f34abf0da0/src%2Ftest%2Fcompile-fail%2Fcast-as-bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1084a3ada125b83c03c40b1f304f2f34abf0da0/src%2Ftest%2Fcompile-fail%2Fcast-as-bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcast-as-bool.rs?ref=c1084a3ada125b83c03c40b1f304f2f34abf0da0", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn main() {\n-    let u = (5 as bool);\n+    let u = 5 as bool;\n     //~^ ERROR cannot cast as `bool`\n     //~^^ HELP compare with zero instead\n }"}, {"sha": "9cfeaca6dfadf2a3120577f8accc69dc03f448db", "filename": "src/test/compile-fail/dropck_arr_cycle_checked.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c1084a3ada125b83c03c40b1f304f2f34abf0da0/src%2Ftest%2Fcompile-fail%2Fdropck_arr_cycle_checked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1084a3ada125b83c03c40b1f304f2f34abf0da0/src%2Ftest%2Fcompile-fail%2Fdropck_arr_cycle_checked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdropck_arr_cycle_checked.rs?ref=c1084a3ada125b83c03c40b1f304f2f34abf0da0", "patch": "@@ -19,7 +19,6 @@ use std::cell::Cell;\n use id::Id;\n \n mod s {\n-    #![allow(unstable)]\n     use std::sync::atomic::{AtomicUsize, Ordering};\n \n     static S_COUNT: AtomicUsize = AtomicUsize::new(0);"}, {"sha": "d36293a484d4e3cb638ac934da2bb2fe39fd4435", "filename": "src/test/compile-fail/dropck_tarena_cycle_checked.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1084a3ada125b83c03c40b1f304f2f34abf0da0/src%2Ftest%2Fcompile-fail%2Fdropck_tarena_cycle_checked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1084a3ada125b83c03c40b1f304f2f34abf0da0/src%2Ftest%2Fcompile-fail%2Fdropck_tarena_cycle_checked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdropck_tarena_cycle_checked.rs?ref=c1084a3ada125b83c03c40b1f304f2f34abf0da0", "patch": "@@ -16,7 +16,6 @@\n //  which is a reduction of this code to more directly show the reason\n //  for the error message we see here.)\n \n-#![allow(unstable)]\n #![feature(const_fn)]\n \n extern crate arena;\n@@ -26,7 +25,6 @@ use std::cell::Cell;\n use id::Id;\n \n mod s {\n-    #![allow(unstable)]\n     use std::sync::atomic::{AtomicUsize, Ordering};\n \n     static S_COUNT: AtomicUsize = AtomicUsize::new(0);"}, {"sha": "600c794109ccf97bd23539a210de22ca7e6534b4", "filename": "src/test/compile-fail/dropck_tarena_unsound_drop.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1084a3ada125b83c03c40b1f304f2f34abf0da0/src%2Ftest%2Fcompile-fail%2Fdropck_tarena_unsound_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1084a3ada125b83c03c40b1f304f2f34abf0da0/src%2Ftest%2Fcompile-fail%2Fdropck_tarena_unsound_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdropck_tarena_unsound_drop.rs?ref=c1084a3ada125b83c03c40b1f304f2f34abf0da0", "patch": "@@ -19,8 +19,6 @@\n // (Also compare against dropck_tarena_cycle_checked.rs, from which\n // this was reduced to better understand its error message.)\n \n-#![allow(unstable)]\n-\n extern crate arena;\n \n use arena::TypedArena;"}, {"sha": "caf25e68d568ca3af4bd8691822507ca8e1abf06", "filename": "src/test/compile-fail/dropck_vec_cycle_checked.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c1084a3ada125b83c03c40b1f304f2f34abf0da0/src%2Ftest%2Fcompile-fail%2Fdropck_vec_cycle_checked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1084a3ada125b83c03c40b1f304f2f34abf0da0/src%2Ftest%2Fcompile-fail%2Fdropck_vec_cycle_checked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdropck_vec_cycle_checked.rs?ref=c1084a3ada125b83c03c40b1f304f2f34abf0da0", "patch": "@@ -18,7 +18,6 @@ use std::cell::Cell;\n use id::Id;\n \n mod s {\n-    #![allow(unstable)]\n     use std::sync::atomic::{AtomicUsize, Ordering};\n \n     static S_COUNT: AtomicUsize = AtomicUsize::new(0);"}, {"sha": "f06882875fd9b4650d29f17b0caf019a30cd7153", "filename": "src/test/compile-fail/for-loop-hygiene.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1084a3ada125b83c03c40b1f304f2f34abf0da0/src%2Ftest%2Fcompile-fail%2Ffor-loop-hygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1084a3ada125b83c03c40b1f304f2f34abf0da0/src%2Ftest%2Fcompile-fail%2Ffor-loop-hygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffor-loop-hygiene.rs?ref=c1084a3ada125b83c03c40b1f304f2f34abf0da0", "patch": "@@ -11,8 +11,6 @@\n // for-loops are expanded in the front end, and use an `iter` ident in their expansion. Check that\n // `iter` is not accessible inside the for loop.\n \n-#![allow(unstable)]\n-\n fn main() {\n     for _ in 0..10 {\n         iter.next();  //~ error: unresolved name `iter`"}, {"sha": "c7d6443663241a27392acbc03f13f6ad8fa700fa", "filename": "src/test/compile-fail/issue-17283.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1084a3ada125b83c03c40b1f304f2f34abf0da0/src%2Ftest%2Fcompile-fail%2Fissue-17283.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1084a3ada125b83c03c40b1f304f2f34abf0da0/src%2Ftest%2Fcompile-fail%2Fissue-17283.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17283.rs?ref=c1084a3ada125b83c03c40b1f304f2f34abf0da0", "patch": "@@ -11,6 +11,8 @@\n // Test that the parser does not attempt to parse struct literals\n // within assignments in if expressions.\n \n+#![allow(unused_parens)]\n+\n struct Foo {\n     foo: usize\n }"}, {"sha": "f98cf6575d6ec5b2340b65bd2b8cd27462762b81", "filename": "src/test/compile-fail/issue-23729.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1084a3ada125b83c03c40b1f304f2f34abf0da0/src%2Ftest%2Fcompile-fail%2Fissue-23729.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1084a3ada125b83c03c40b1f304f2f34abf0da0/src%2Ftest%2Fcompile-fail%2Fissue-23729.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-23729.rs?ref=c1084a3ada125b83c03c40b1f304f2f34abf0da0", "patch": "@@ -26,7 +26,7 @@ fn main() {\n                     self.pos += 1;\n                     Some(next_val)\n                 } else {\n-                    let next_val = (self.mem[0] + self.mem[1]);\n+                    let next_val = self.mem[0] + self.mem[1];\n                     self.mem[0] = self.mem[1];\n                     self.mem[1] = next_val;\n                     Some(next_val)"}, {"sha": "d34738282eb268e0d90f430307433a333dfa13f4", "filename": "src/test/compile-fail/lint-visible-private-types.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c1084a3ada125b83c03c40b1f304f2f34abf0da0/src%2Ftest%2Fcompile-fail%2Flint-visible-private-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1084a3ada125b83c03c40b1f304f2f34abf0da0/src%2Ftest%2Fcompile-fail%2Flint-visible-private-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-visible-private-types.rs?ref=c1084a3ada125b83c03c40b1f304f2f34abf0da0", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![deny(visible_private_types)]\n #![allow(dead_code)]\n #![crate_type=\"lib\"]\n "}, {"sha": "cd320ba148aba8fe02323db6fa3fcbae88ac67f3", "filename": "src/test/compile-fail/loop-does-not-diverge.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1084a3ada125b83c03c40b1f304f2f34abf0da0/src%2Ftest%2Fcompile-fail%2Floop-does-not-diverge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1084a3ada125b83c03c40b1f304f2f34abf0da0/src%2Ftest%2Fcompile-fail%2Floop-does-not-diverge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Floop-does-not-diverge.rs?ref=c1084a3ada125b83c03c40b1f304f2f34abf0da0", "patch": "@@ -18,5 +18,5 @@ fn forever() -> ! {\n }\n \n fn main() {\n-  if (1 == 2) { forever(); }\n+  if 1 == 2 { forever(); }\n }"}, {"sha": "b6f197987bab1df73c4b5a3552f229f36f9234a3", "filename": "src/test/compile-fail/variance-trait-bounds.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c1084a3ada125b83c03c40b1f304f2f34abf0da0/src%2Ftest%2Fcompile-fail%2Fvariance-trait-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1084a3ada125b83c03c40b1f304f2f34abf0da0/src%2Ftest%2Fcompile-fail%2Fvariance-trait-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvariance-trait-bounds.rs?ref=c1084a3ada125b83c03c40b1f304f2f34abf0da0", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![deny(bivariance)]\n #![allow(dead_code)]\n #![feature(rustc_attrs)]\n "}, {"sha": "2fd8bf20c79974beef8c80e77077a1dd8dedf268", "filename": "src/test/compile-fail/variance-types.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c1084a3ada125b83c03c40b1f304f2f34abf0da0/src%2Ftest%2Fcompile-fail%2Fvariance-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1084a3ada125b83c03c40b1f304f2f34abf0da0/src%2Ftest%2Fcompile-fail%2Fvariance-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvariance-types.rs?ref=c1084a3ada125b83c03c40b1f304f2f34abf0da0", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![deny(bivariance)]\n #![allow(dead_code)]\n #![feature(rustc_attrs)]\n "}, {"sha": "c8f4326bb28241a32531d13b70a2aed201c2a09b", "filename": "src/test/compile-fail/vec-must-not-hide-type-from-dropck.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c1084a3ada125b83c03c40b1f304f2f34abf0da0/src%2Ftest%2Fcompile-fail%2Fvec-must-not-hide-type-from-dropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1084a3ada125b83c03c40b1f304f2f34abf0da0/src%2Ftest%2Fcompile-fail%2Fvec-must-not-hide-type-from-dropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvec-must-not-hide-type-from-dropck.rs?ref=c1084a3ada125b83c03c40b1f304f2f34abf0da0", "patch": "@@ -29,7 +29,6 @@ use std::cell::Cell;\n use id::Id;\n \n mod s {\n-    #![allow(unstable)]\n     use std::sync::atomic::{AtomicUsize, Ordering};\n \n     static S_COUNT: AtomicUsize = AtomicUsize::new(0);"}, {"sha": "835f7fc96c63fb5e9c6ef6976b32a63daab8a945", "filename": "src/test/pretty/issue-4264.pp", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c1084a3ada125b83c03c40b1f304f2f34abf0da0/src%2Ftest%2Fpretty%2Fissue-4264.pp", "raw_url": "https://github.com/rust-lang/rust/raw/c1084a3ada125b83c03c40b1f304f2f34abf0da0/src%2Ftest%2Fpretty%2Fissue-4264.pp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fissue-4264.pp?ref=c1084a3ada125b83c03c40b1f304f2f34abf0da0", "patch": "@@ -27,10 +27,9 @@\n     let _: [(); (1 as usize)] = ([(() as ())] as [(); 1]);\n \n     let _ =\n-        (((&((([(1 as i32), (2 as i32), (3 as i32)] as [i32; 3])) as [i32; 3])\n-              as &[i32; 3]) as *const _ as *const [i32; 3]) as\n-            *const [i32; (3 as usize)] as *const [i32; 3]);\n-\n+        (((&([(1 as i32), (2 as i32), (3 as i32)] as [i32; 3]) as &[i32; 3])\n+             as *const _ as *const [i32; 3]) as *const [i32; (3 as usize)] as\n+            *const [i32; 3]);\n \n \n "}, {"sha": "6fc12d3a750782318340272e23a5b0288286b8e9", "filename": "src/test/run-make/execution-engine/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1084a3ada125b83c03c40b1f304f2f34abf0da0/src%2Ftest%2Frun-make%2Fexecution-engine%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1084a3ada125b83c03c40b1f304f2f34abf0da0/src%2Ftest%2Frun-make%2Fexecution-engine%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fexecution-engine%2Ftest.rs?ref=c1084a3ada125b83c03c40b1f304f2f34abf0da0", "patch": "@@ -228,7 +228,7 @@ fn compile_program(input: &str, sysroot: PathBuf)\n         let ast_map = driver::make_map(&sess, &mut hir_forest);\n \n         driver::phase_3_run_analysis_passes(\n-            sess, ast_map, &krate, &arenas, id, MakeGlobMap::No, |tcx, analysis| {\n+            sess, ast_map, &arenas, id, MakeGlobMap::No, |tcx, analysis| {\n \n             let trans = driver::phase_4_translate_to_llvm(tcx, analysis);\n "}]}