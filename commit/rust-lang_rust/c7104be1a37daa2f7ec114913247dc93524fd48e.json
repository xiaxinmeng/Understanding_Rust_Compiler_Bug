{"sha": "c7104be1a37daa2f7ec114913247dc93524fd48e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3MTA0YmUxYTM3ZGFhMmY3ZWMxMTQ5MTMyNDdkYzkzNTI0ZmQ0OGU=", "commit": {"author": {"name": "Fourchaux", "email": "jprodi04@gmail.com", "date": "2017-08-15T19:45:21Z"}, "committer": {"name": "Fourchaux", "email": "jprodi04@gmail.com", "date": "2017-08-15T19:56:30Z"}, "message": "Fix typos & us spellings", "tree": {"sha": "1d476ec4954f7cf8bdd9f508a51762ffbc41be84", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d476ec4954f7cf8bdd9f508a51762ffbc41be84"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c7104be1a37daa2f7ec114913247dc93524fd48e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c7104be1a37daa2f7ec114913247dc93524fd48e", "html_url": "https://github.com/rust-lang/rust/commit/c7104be1a37daa2f7ec114913247dc93524fd48e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c7104be1a37daa2f7ec114913247dc93524fd48e/comments", "author": {"login": "Fourchaux", "id": 4992512, "node_id": "MDQ6VXNlcjQ5OTI1MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/4992512?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Fourchaux", "html_url": "https://github.com/Fourchaux", "followers_url": "https://api.github.com/users/Fourchaux/followers", "following_url": "https://api.github.com/users/Fourchaux/following{/other_user}", "gists_url": "https://api.github.com/users/Fourchaux/gists{/gist_id}", "starred_url": "https://api.github.com/users/Fourchaux/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Fourchaux/subscriptions", "organizations_url": "https://api.github.com/users/Fourchaux/orgs", "repos_url": "https://api.github.com/users/Fourchaux/repos", "events_url": "https://api.github.com/users/Fourchaux/events{/privacy}", "received_events_url": "https://api.github.com/users/Fourchaux/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Fourchaux", "id": 4992512, "node_id": "MDQ6VXNlcjQ5OTI1MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/4992512?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Fourchaux", "html_url": "https://github.com/Fourchaux", "followers_url": "https://api.github.com/users/Fourchaux/followers", "following_url": "https://api.github.com/users/Fourchaux/following{/other_user}", "gists_url": "https://api.github.com/users/Fourchaux/gists{/gist_id}", "starred_url": "https://api.github.com/users/Fourchaux/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Fourchaux/subscriptions", "organizations_url": "https://api.github.com/users/Fourchaux/orgs", "repos_url": "https://api.github.com/users/Fourchaux/repos", "events_url": "https://api.github.com/users/Fourchaux/events{/privacy}", "received_events_url": "https://api.github.com/users/Fourchaux/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82be83cf744611a016fb09ae1afbffc04b3ed2e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/82be83cf744611a016fb09ae1afbffc04b3ed2e1", "html_url": "https://github.com/rust-lang/rust/commit/82be83cf744611a016fb09ae1afbffc04b3ed2e1"}], "stats": {"total": 118, "additions": 59, "deletions": 59}, "files": [{"sha": "f92b47035e336b1d99fa7be296a9b5d02815b582", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7104be1a37daa2f7ec114913247dc93524fd48e/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7104be1a37daa2f7ec114913247dc93524fd48e/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=c7104be1a37daa2f7ec114913247dc93524fd48e", "patch": "@@ -444,7 +444,7 @@ impl Build {\n     }\n \n     /// Returns the root output directory for all Cargo output in a given stage,\n-    /// running a particular compiler, wehther or not we're building the\n+    /// running a particular compiler, whether or not we're building the\n     /// standard library, and targeting the specified architecture.\n     fn cargo_out(&self,\n                  compiler: Compiler,"}, {"sha": "0a307e72bf61d1a2e391949eaec721eb5f77230a", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7104be1a37daa2f7ec114913247dc93524fd48e/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7104be1a37daa2f7ec114913247dc93524fd48e/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=c7104be1a37daa2f7ec114913247dc93524fd48e", "patch": "@@ -11,7 +11,7 @@\n //! Compilation of native dependencies like LLVM.\n //!\n //! Native projects like LLVM unfortunately aren't suited just yet for\n-//! compilation in build scripts that Cargo has. This is because thie\n+//! compilation in build scripts that Cargo has. This is because the\n //! compilation takes a *very* long time but also because we don't want to\n //! compile LLVM 3 times as part of a normal bootstrap (we want it cached).\n //!"}, {"sha": "fc6585a9f951d6d58c6bb29dbe27ee5eed5eb1b4", "filename": "src/liballoc/allocator.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c7104be1a37daa2f7ec114913247dc93524fd48e/src%2Fliballoc%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7104be1a37daa2f7ec114913247dc93524fd48e/src%2Fliballoc%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fallocator.rs?ref=c7104be1a37daa2f7ec114913247dc93524fd48e", "patch": "@@ -293,7 +293,7 @@ impl Layout {\n     /// Creates a layout describing the record for `self` followed by\n     /// `next` with no additional padding between the two. Since no\n     /// padding is inserted, the alignment of `next` is irrelevant,\n-    /// and is not incoporated *at all* into the resulting layout.\n+    /// and is not incorporated *at all* into the resulting layout.\n     ///\n     /// Returns `(k, offset)`, where `k` is layout of the concatenated\n     /// record and `offset` is the relative location, in bytes, of the\n@@ -528,7 +528,7 @@ pub unsafe trait Alloc {\n     ///   to allocate that block of memory.\n     unsafe fn dealloc(&mut self, ptr: *mut u8, layout: Layout);\n \n-    /// Allocator-specific method for signalling an out-of-memory\n+    /// Allocator-specific method for signaling an out-of-memory\n     /// condition.\n     ///\n     /// `oom` aborts the thread or process, optionally performing\n@@ -539,7 +539,7 @@ pub unsafe trait Alloc {\n     /// unsatisfied allocation request (signaled by an error such as\n     /// `AllocErr::Exhausted`), and wish to abandon computation rather\n     /// than attempt to recover locally. Such clients should pass the\n-    /// signalling error value back into `oom`, where the allocator\n+    /// signaling error value back into `oom`, where the allocator\n     /// may incorporate that error value into its diagnostic report\n     /// before aborting.\n     ///"}, {"sha": "4d1ff3cbe139e1cbbfda4509fa63ae1814da33da", "filename": "src/liballoc/btree/node.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7104be1a37daa2f7ec114913247dc93524fd48e/src%2Fliballoc%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7104be1a37daa2f7ec114913247dc93524fd48e/src%2Fliballoc%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fbtree%2Fnode.rs?ref=c7104be1a37daa2f7ec114913247dc93524fd48e", "patch": "@@ -763,7 +763,7 @@ impl<Node: Copy, Type> Clone for Handle<Node, Type> {\n }\n \n impl<Node, Type> Handle<Node, Type> {\n-    /// Retrieves the node that contains the edge of key/value pair this handle pointes to.\n+    /// Retrieves the node that contains the edge of key/value pair this handle points to.\n     pub fn into_node(self) -> Node {\n         self.node\n     }"}, {"sha": "fbd71536806c3a25e1c6c8e55877a4263cb68516", "filename": "src/liballoc/raw_vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c7104be1a37daa2f7ec114913247dc93524fd48e/src%2Fliballoc%2Fraw_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7104be1a37daa2f7ec114913247dc93524fd48e/src%2Fliballoc%2Fraw_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fraw_vec.rs?ref=c7104be1a37daa2f7ec114913247dc93524fd48e", "patch": "@@ -544,12 +544,12 @@ impl<T, A: Alloc> RawVec<T, A> {\n     /// Attempts to ensure that the buffer contains at least enough space to hold\n     /// `used_cap + needed_extra_cap` elements. If it doesn't already have\n     /// enough capacity, will reallocate in place enough space plus comfortable slack\n-    /// space to get amortized `O(1)` behaviour. Will limit this behaviour\n+    /// space to get amortized `O(1)` behavior. Will limit this behaviour\n     /// if it would needlessly cause itself to panic.\n     ///\n     /// If `used_cap` exceeds `self.cap()`, this may fail to actually allocate\n     /// the requested space. This is not really unsafe, but the unsafe\n-    /// code *you* write that relies on the behaviour of this function may break.\n+    /// code *you* write that relies on the behavior of this function may break.\n     ///\n     /// Returns true if the reallocation attempt has succeeded, or false otherwise.\n     ///"}, {"sha": "12960fed04550cfba525cf42952039fb1b0bdcaf", "filename": "src/libcore/num/dec2flt/rawfp.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c7104be1a37daa2f7ec114913247dc93524fd48e/src%2Flibcore%2Fnum%2Fdec2flt%2Frawfp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7104be1a37daa2f7ec114913247dc93524fd48e/src%2Flibcore%2Fnum%2Fdec2flt%2Frawfp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fdec2flt%2Frawfp.rs?ref=c7104be1a37daa2f7ec114913247dc93524fd48e", "patch": "@@ -102,10 +102,10 @@ pub trait RawFloat : Float + Copy + Debug + LowerExp\n     /// The number of bits in the exponent.\n     const EXP_BITS: u8;\n \n-    /// The number of bits in the singificand, *including* the hidden bit.\n+    /// The number of bits in the significand, *including* the hidden bit.\n     const SIG_BITS: u8;\n \n-    /// The number of bits in the singificand, *excluding* the hidden bit.\n+    /// The number of bits in the significand, *excluding* the hidden bit.\n     const EXPLICIT_SIG_BITS: u8;\n \n     /// The maximum legal exponent in fractional representation.\n@@ -123,7 +123,7 @@ pub trait RawFloat : Float + Copy + Debug + LowerExp\n     /// `MIN_EXP` for integral representation, i.e., with the shift applied.\n     const MIN_EXP_INT: i16;\n \n-    /// The maximum normalized singificand in integral representation.\n+    /// The maximum normalized significand in integral representation.\n     const MAX_SIG: u64;\n \n     /// The minimal normalized significand in integral representation."}, {"sha": "78326c3e6391a1b36b0ff2db9a1afbb8bd86539a", "filename": "src/libcore/ops/try.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7104be1a37daa2f7ec114913247dc93524fd48e/src%2Flibcore%2Fops%2Ftry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7104be1a37daa2f7ec114913247dc93524fd48e/src%2Flibcore%2Fops%2Ftry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Ftry.rs?ref=c7104be1a37daa2f7ec114913247dc93524fd48e", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-/// A trait for customizing the behaviour of the `?` operator.\n+/// A trait for customizing the behavior of the `?` operator.\n ///\n /// A type implementing `Try` is one that has a canonical way to view it\n /// in terms of a success/failure dichotomy.  This trait allows both"}, {"sha": "510e01db0e965ed190343d11552ce3343ad52b0f", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7104be1a37daa2f7ec114913247dc93524fd48e/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7104be1a37daa2f7ec114913247dc93524fd48e/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=c7104be1a37daa2f7ec114913247dc93524fd48e", "patch": "@@ -1632,7 +1632,7 @@ unsafe fn atomic_xor<T>(dst: *mut T, val: T, order: Ordering) -> T {\n ///\n ///     pub fn lock(&self) {\n ///         while !self.flag.compare_and_swap(false, true, Ordering::Relaxed) {}\n-///         // This fence syncronizes-with store in `unlock`.\n+///         // This fence synchronizes-with store in `unlock`.\n ///         fence(Ordering::Acquire);\n ///     }\n ///"}, {"sha": "a27240b11ef901b856138ad49f74e3d2af0e7b03", "filename": "src/libgraphviz/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c7104be1a37daa2f7ec114913247dc93524fd48e/src%2Flibgraphviz%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7104be1a37daa2f7ec114913247dc93524fd48e/src%2Flibgraphviz%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgraphviz%2Flib.rs?ref=c7104be1a37daa2f7ec114913247dc93524fd48e", "patch": "@@ -11,7 +11,7 @@\n //! Generate files suitable for use with [Graphviz](http://www.graphviz.org/)\n //!\n //! The `render` function generates output (e.g. an `output.dot` file) for\n-//! use with [Graphviz](http://www.graphviz.org/) by walking a labelled\n+//! use with [Graphviz](http://www.graphviz.org/) by walking a labeled\n //! graph. (Graphviz can then automatically lay out the nodes and edges\n //! of the graph, and also optionally render the graph as an image or\n //! other [output formats](\n@@ -150,7 +150,7 @@\n //!\n //! The output from this example renders four nodes that make up the\n //! Hasse-diagram for the subsets of the set `{x, y}`. Each edge is\n-//! labelled with the &sube; character (specified using the HTML character\n+//! labeled with the &sube; character (specified using the HTML character\n //! entity `&sube`).\n //!\n //! ```rust\n@@ -789,7 +789,7 @@ mod tests {\n     }\n \n     struct LabelledGraph {\n-        /// The name for this graph. Used for labelling generated `digraph`.\n+        /// The name for this graph. Used for labeling generated `digraph`.\n         name: &'static str,\n \n         /// Each node is an index into `node_labels`; these labels are"}, {"sha": "45ece4a5a8880a9b4b27b95106cca05376981091", "filename": "src/librand/distributions/gamma.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7104be1a37daa2f7ec114913247dc93524fd48e/src%2Flibrand%2Fdistributions%2Fgamma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7104be1a37daa2f7ec114913247dc93524fd48e/src%2Flibrand%2Fdistributions%2Fgamma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fgamma.rs?ref=c7104be1a37daa2f7ec114913247dc93524fd48e", "patch": "@@ -254,7 +254,7 @@ impl IndependentSample<f64> for ChiSquared {\n \n /// The Fisher F distribution `F(m, n)`.\n ///\n-/// This distribution is equivalent to the ratio of two normalised\n+/// This distribution is equivalent to the ratio of two normalized\n /// chi-squared distributions, that is, `F(m,n) = (\u03c7\u00b2(m)/m) /\n /// (\u03c7\u00b2(n)/n)`.\n pub struct FisherF {"}, {"sha": "96ce0905e384da72f72f008acd0f8be8dc71fad7", "filename": "src/librand/isaac.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c7104be1a37daa2f7ec114913247dc93524fd48e/src%2Flibrand%2Fisaac.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7104be1a37daa2f7ec114913247dc93524fd48e/src%2Flibrand%2Fisaac.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fisaac.rs?ref=c7104be1a37daa2f7ec114913247dc93524fd48e", "patch": "@@ -76,7 +76,7 @@ impl IsaacRng {\n         rng\n     }\n \n-    /// Initialises `self`. If `use_rsl` is true, then use the current value\n+    /// Initializes `self`. If `use_rsl` is true, then use the current value\n     /// of `rsl` as a seed, otherwise construct one algorithmically (not\n     /// randomly).\n     fn init(&mut self, use_rsl: bool) {\n@@ -367,7 +367,7 @@ impl Isaac64Rng {\n         rng\n     }\n \n-    /// Initialises `self`. If `use_rsl` is true, then use the current value\n+    /// Initializes `self`. If `use_rsl` is true, then use the current value\n     /// of `rsl` as a seed, otherwise construct one algorithmically (not\n     /// randomly).\n     fn init(&mut self, use_rsl: bool) {"}, {"sha": "18c6b4140de88a5ba5a836293645aa79bfe155dd", "filename": "src/librand/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7104be1a37daa2f7ec114913247dc93524fd48e/src%2Flibrand%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7104be1a37daa2f7ec114913247dc93524fd48e/src%2Flibrand%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Flib.rs?ref=c7104be1a37daa2f7ec114913247dc93524fd48e", "patch": "@@ -180,7 +180,7 @@ pub trait Rng: Sized {\n     /// This method does *not* have a requirement to bear any fixed\n     /// relationship to the other methods, for example, it does *not*\n     /// have to result in the same output as progressively filling\n-    /// `dest` with `self.gen::<u8>()`, and any such behaviour should\n+    /// `dest` with `self.gen::<u8>()`, and any such behavior should\n     /// not be relied upon.\n     ///\n     /// This method should guarantee that `dest` is entirely filled"}, {"sha": "3d5067ba2fa336b299187a5a37ed02ce2c34d6cd", "filename": "src/librand/reseeding.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7104be1a37daa2f7ec114913247dc93524fd48e/src%2Flibrand%2Freseeding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7104be1a37daa2f7ec114913247dc93524fd48e/src%2Flibrand%2Freseeding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Freseeding.rs?ref=c7104be1a37daa2f7ec114913247dc93524fd48e", "patch": "@@ -24,7 +24,7 @@ pub struct ReseedingRng<R, Rsdr> {\n     rng: R,\n     generation_threshold: usize,\n     bytes_generated: usize,\n-    /// Controls the behaviour when reseeding the RNG.\n+    /// Controls the behavior when reseeding the RNG.\n     pub reseeder: Rsdr,\n }\n "}, {"sha": "8cd229a2adf63007ed2587daf75c00e3327304ec", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7104be1a37daa2f7ec114913247dc93524fd48e/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7104be1a37daa2f7ec114913247dc93524fd48e/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=c7104be1a37daa2f7ec114913247dc93524fd48e", "patch": "@@ -731,7 +731,7 @@ impl<'hir> Map<'hir> {\n \n     /// Returns the nearest enclosing scope. A scope is an item or block.\n     /// FIXME it is not clear to me that all items qualify as scopes - statics\n-    /// and associated types probably shouldn't, for example. Behaviour in this\n+    /// and associated types probably shouldn't, for example. Behavior in this\n     /// regard should be expected to be highly unstable.\n     pub fn get_enclosing_scope(&self, id: NodeId) -> Option<NodeId> {\n         match self.walk_parent_nodes(id, |node| match *node {"}, {"sha": "d608d09d05498051c1a4383a3ff848fefb3b71f0", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7104be1a37daa2f7ec114913247dc93524fd48e/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7104be1a37daa2f7ec114913247dc93524fd48e/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=c7104be1a37daa2f7ec114913247dc93524fd48e", "patch": "@@ -24,7 +24,7 @@\n //! a span, but also more information so that we can generate a meaningful\n //! error message.\n //!\n-//! Having a catalogue of all the different reasons an error can arise is\n+//! Having a catalog of all the different reasons an error can arise is\n //! also useful for other reasons, like cross-referencing FAQs etc, though\n //! we are not really taking advantage of this yet.\n //!"}, {"sha": "639a330dc6e67dffdb4d7026154f3a8bd2556030", "filename": "src/librustc/infer/resolve.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7104be1a37daa2f7ec114913247dc93524fd48e/src%2Flibrustc%2Finfer%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7104be1a37daa2f7ec114913247dc93524fd48e/src%2Flibrustc%2Finfer%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fresolve.rs?ref=c7104be1a37daa2f7ec114913247dc93524fd48e", "patch": "@@ -46,7 +46,7 @@ impl<'a, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for OpportunisticTypeResolver<'a, 'g\n }\n \n /// The opportunistic type and region resolver is similar to the\n-/// opportunistic type resolver, but also opportunistly resolves\n+/// opportunistic type resolver, but also opportunistically resolves\n /// regions. It is useful for canonicalization.\n pub struct OpportunisticTypeAndRegionResolver<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     infcx: &'a InferCtxt<'a, 'gcx, 'tcx>,"}, {"sha": "92b159a55f49accf590bef6b6a1ec935fcc3d50b", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7104be1a37daa2f7ec114913247dc93524fd48e/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7104be1a37daa2f7ec114913247dc93524fd48e/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=c7104be1a37daa2f7ec114913247dc93524fd48e", "patch": "@@ -101,7 +101,7 @@ pub struct FutureIncompatibleInfo {\n     pub reference: &'static str // e.g., a URL for an issue/PR/RFC or error code\n }\n \n-/// The targed of the `by_name` map, which accounts for renaming/deprecation.\n+/// The target of the `by_name` map, which accounts for renaming/deprecation.\n enum TargetLint {\n     /// A direct lint target\n     Id(LintId),"}, {"sha": "45a3080ed91ff3e5e4389e76e2a83ab5dfc0b888", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7104be1a37daa2f7ec114913247dc93524fd48e/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7104be1a37daa2f7ec114913247dc93524fd48e/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=c7104be1a37daa2f7ec114913247dc93524fd48e", "patch": "@@ -72,7 +72,7 @@ use mir::transform::MirSource;\n ///  (M1.): Misc extent of the whole `let a = ...;` statement.\n ///  (M2.): Misc extent of the `f()` expression.\n ///  (M3.): Misc extent of the `f().g(..)` expression.\n-///  (M4.): Misc extent of the block labelled `'b:`.\n+///  (M4.): Misc extent of the block labeled `'b:`.\n ///  (M5.): Misc extent of the `let x = d();` statement\n ///  (D6.): DestructionScope for temporaries created during M5.\n ///  (R7.): Remainder extent for block `'b:`, stmt 0 (let x = ...)."}, {"sha": "74c3408c4c2f61837d9e3e7fb4841b7080ee0518", "filename": "src/librustc/mir/traversal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7104be1a37daa2f7ec114913247dc93524fd48e/src%2Flibrustc%2Fmir%2Ftraversal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7104be1a37daa2f7ec114913247dc93524fd48e/src%2Flibrustc%2Fmir%2Ftraversal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftraversal.rs?ref=c7104be1a37daa2f7ec114913247dc93524fd48e", "patch": "@@ -216,7 +216,7 @@ impl<'a, 'tcx> Iterator for Postorder<'a, 'tcx> {\n ///\n /// Reverse postorder is the reverse order of a postorder traversal.\n /// This is different to a preorder traversal and represents a natural\n-/// linearisation of control-flow.\n+/// linearization of control-flow.\n ///\n /// ```text\n ///"}, {"sha": "78e47693caaf138a47d6baaeee3cf9dd95a0654b", "filename": "src/librustc/traits/fulfill.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7104be1a37daa2f7ec114913247dc93524fd48e/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7104be1a37daa2f7ec114913247dc93524fd48e/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ffulfill.rs?ref=c7104be1a37daa2f7ec114913247dc93524fd48e", "patch": "@@ -37,7 +37,7 @@ impl<'tcx> ForestObligation for PendingPredicateObligation<'tcx> {\n /// consists of a list of obligations that must be (eventually)\n /// satisfied. The job is to track which are satisfied, which yielded\n /// errors, and which are still pending. At any point, users can call\n-/// `select_where_possible`, and the fulfilment context will try to do\n+/// `select_where_possible`, and the fulfillment context will try to do\n /// selection, retaining only those obligations that remain\n /// ambiguous. This may be helpful in pushing type inference\n /// along. Once all type inference constraints have been generated, the"}, {"sha": "adcf2ddd408afc0d54900bef4d1a930445a1d0ef", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7104be1a37daa2f7ec114913247dc93524fd48e/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7104be1a37daa2f7ec114913247dc93524fd48e/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=c7104be1a37daa2f7ec114913247dc93524fd48e", "patch": "@@ -851,7 +851,7 @@ pub struct GlobalCtxt<'tcx> {\n \n     /// A vector of every trait accessible in the whole crate\n     /// (i.e. including those from subcrates). This is used only for\n-    /// error reporting, and so is lazily initialised and generally\n+    /// error reporting, and so is lazily initialized and generally\n     /// shouldn't taint the common path (hence the RefCell).\n     pub all_traits: RefCell<Option<Vec<DefId>>>,\n }"}, {"sha": "3629709e6a48de19a1f0843f26d4b7f88099f353", "filename": "src/librustc/ty/inhabitedness/def_id_forest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7104be1a37daa2f7ec114913247dc93524fd48e/src%2Flibrustc%2Fty%2Finhabitedness%2Fdef_id_forest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7104be1a37daa2f7ec114913247dc93524fd48e/src%2Flibrustc%2Fty%2Finhabitedness%2Fdef_id_forest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finhabitedness%2Fdef_id_forest.rs?ref=c7104be1a37daa2f7ec114913247dc93524fd48e", "patch": "@@ -26,7 +26,7 @@ pub struct DefIdForest {\n     /// The minimal set of DefIds required to represent the whole set.\n     /// If A and B are DefIds in the DefIdForest, and A is a descendant\n     /// of B, then only B will be in root_ids.\n-    /// We use a SmallVec here because (for its use for cacheing inhabitedness)\n+    /// We use a SmallVec here because (for its use for caching inhabitedness)\n     /// its rare that this will contain even two ids.\n     root_ids: SmallVec<[DefId; 1]>,\n }"}, {"sha": "4e2440d83fe1ddd1644785ef57032ac1e70f5356", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7104be1a37daa2f7ec114913247dc93524fd48e/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7104be1a37daa2f7ec114913247dc93524fd48e/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=c7104be1a37daa2f7ec114913247dc93524fd48e", "patch": "@@ -739,7 +739,7 @@ pub type Region<'tcx> = &'tcx RegionKind;\n ///\n /// The process of doing that is called \"skolemization\". The bound regions\n /// are replaced by skolemized markers, which don't satisfy any relation\n-/// not explicity provided.\n+/// not explicitly provided.\n ///\n /// There are 2 kinds of skolemized regions in rustc: `ReFree` and\n /// `ReSkolemized`. When checking an item's body, `ReFree` is supposed"}, {"sha": "52306de74cb8babac54713eacc81b271d7ea7b33", "filename": "src/librustc_data_structures/accumulate_vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7104be1a37daa2f7ec114913247dc93524fd48e/src%2Flibrustc_data_structures%2Faccumulate_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7104be1a37daa2f7ec114913247dc93524fd48e/src%2Flibrustc_data_structures%2Faccumulate_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Faccumulate_vec.rs?ref=c7104be1a37daa2f7ec114913247dc93524fd48e", "patch": "@@ -13,7 +13,7 @@\n //! Space for up to N elements is provided on the stack.  If more elements are collected, Vec is\n //! used to store the values on the heap.\n //!\n-//! The N above is determined by Array's implementor, by way of an associatated constant.\n+//! The N above is determined by Array's implementor, by way of an associated constant.\n \n use std::ops::{Deref, DerefMut};\n use std::iter::{self, IntoIterator, FromIterator};"}, {"sha": "de44509ef2fd81c17b0543acf39d2af91cdfa620", "filename": "src/librustc_data_structures/ivar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7104be1a37daa2f7ec114913247dc93524fd48e/src%2Flibrustc_data_structures%2Fivar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7104be1a37daa2f7ec114913247dc93524fd48e/src%2Flibrustc_data_structures%2Fivar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fivar.rs?ref=c7104be1a37daa2f7ec114913247dc93524fd48e", "patch": "@@ -14,7 +14,7 @@ use std::cell::Cell;\n /// A write-once variable. When constructed, it is empty, and\n /// can only be set once.\n ///\n-/// Ivars ensure that data that can only be initialised once. A full\n+/// Ivars ensure that data that can only be initialized once. A full\n /// implementation is used for concurrency and blocks on a read of an\n /// unfulfilled value. This implementation is more minimal and panics\n /// if you attempt to read the value before it has been set. It is also"}, {"sha": "74738e61b446775aebb84e80e6e974fffae5f609", "filename": "src/librustc_data_structures/small_vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7104be1a37daa2f7ec114913247dc93524fd48e/src%2Flibrustc_data_structures%2Fsmall_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7104be1a37daa2f7ec114913247dc93524fd48e/src%2Flibrustc_data_structures%2Fsmall_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fsmall_vec.rs?ref=c7104be1a37daa2f7ec114913247dc93524fd48e", "patch": "@@ -14,7 +14,7 @@\n //! used to store the values on the heap. SmallVec is similar to AccumulateVec, but adds\n //! the ability to push elements.\n //!\n-//! The N above is determined by Array's implementor, by way of an associatated constant.\n+//! The N above is determined by Array's implementor, by way of an associated constant.\n \n use std::ops::{Deref, DerefMut};\n use std::iter::{IntoIterator, FromIterator};"}, {"sha": "7a0ad166d0c9bd79012233a911e966e41b11493c", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7104be1a37daa2f7ec114913247dc93524fd48e/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7104be1a37daa2f7ec114913247dc93524fd48e/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=c7104be1a37daa2f7ec114913247dc93524fd48e", "patch": "@@ -306,7 +306,7 @@ pub fn source_name(input: &Input) -> String {\n     }\n }\n \n-/// CompileController is used to customise compilation, it allows compilation to\n+/// CompileController is used to customize compilation, it allows compilation to\n /// be stopped and/or to call arbitrary code at various points in compilation.\n /// It also allows for various flags to be set to influence what information gets\n /// collected during compilation."}, {"sha": "6f2ce105a484857f7da5a157735c96d677609b46", "filename": "src/librustc_errors/diagnostic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c7104be1a37daa2f7ec114913247dc93524fd48e/src%2Flibrustc_errors%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7104be1a37daa2f7ec114913247dc93524fd48e/src%2Flibrustc_errors%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic.rs?ref=c7104be1a37daa2f7ec114913247dc93524fd48e", "patch": "@@ -93,9 +93,9 @@ impl Diagnostic {\n     }\n \n     /// Cancel the diagnostic (a structured diagnostic must either be emitted or\n-    /// cancelled or it will panic when dropped).\n+    /// canceled or it will panic when dropped).\n     /// BEWARE: if this DiagnosticBuilder is an error, then creating it will\n-    /// bump the error count on the Handler and cancelling it won't undo that.\n+    /// bump the error count on the Handler and canceling it won't undo that.\n     /// If you want to decrement the error count you should use `Handler::cancel`.\n     pub fn cancel(&mut self) {\n         self.level = Level::Cancelled;"}, {"sha": "c9fb3d902d029226c2bed5cdb50124d8220eb9bd", "filename": "src/librustc_errors/diagnostic_builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7104be1a37daa2f7ec114913247dc93524fd48e/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7104be1a37daa2f7ec114913247dc93524fd48e/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic_builder.rs?ref=c7104be1a37daa2f7ec114913247dc93524fd48e", "patch": "@@ -198,7 +198,7 @@ impl<'a> Debug for DiagnosticBuilder<'a> {\n     }\n }\n \n-/// Destructor bomb - a `DiagnosticBuilder` must be either emitted or cancelled\n+/// Destructor bomb - a `DiagnosticBuilder` must be either emitted or canceled\n /// or we emit a bug.\n impl<'a> Drop for DiagnosticBuilder<'a> {\n     fn drop(&mut self) {"}, {"sha": "10dd579932a63b0ae192da05068587c7dadca856", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7104be1a37daa2f7ec114913247dc93524fd48e/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7104be1a37daa2f7ec114913247dc93524fd48e/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=c7104be1a37daa2f7ec114913247dc93524fd48e", "patch": "@@ -822,7 +822,7 @@ impl EmitterWriter {\n             .map(|_| \" \")\n             .collect::<String>();\n \n-        /// Return wether `style`, or the override if present and the style is `NoStyle`.\n+        /// Return whether `style`, or the override if present and the style is `NoStyle`.\n         fn style_or_override(style: Style, override_style: Option<Style>) -> Style {\n             if let Some(o) = override_style {\n                 if style == Style::NoStyle {"}, {"sha": "52e3fcc1b474c638de8d64c6b4672ba45ba9e01f", "filename": "src/librustc_errors/snippet.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7104be1a37daa2f7ec114913247dc93524fd48e/src%2Flibrustc_errors%2Fsnippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7104be1a37daa2f7ec114913247dc93524fd48e/src%2Flibrustc_errors%2Fsnippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fsnippet.rs?ref=c7104be1a37daa2f7ec114913247dc93524fd48e", "patch": "@@ -141,7 +141,7 @@ pub struct Annotation {\n }\n \n impl Annotation {\n-    /// Wether this annotation is a vertical line placeholder.\n+    /// Whether this annotation is a vertical line placeholder.\n     pub fn is_line(&self) -> bool {\n         if let AnnotationType::MultilineLine(_) = self.annotation_type {\n             true"}, {"sha": "0ad8d1789167df38a7cb9e0a882a64b42d7a2c65", "filename": "src/librustc_incremental/persist/preds/compress/construct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7104be1a37daa2f7ec114913247dc93524fd48e/src%2Flibrustc_incremental%2Fpersist%2Fpreds%2Fcompress%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7104be1a37daa2f7ec114913247dc93524fd48e/src%2Flibrustc_incremental%2Fpersist%2Fpreds%2Fcompress%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fpreds%2Fcompress%2Fconstruct.rs?ref=c7104be1a37daa2f7ec114913247dc93524fd48e", "patch": "@@ -14,7 +14,7 @@\n //! representation of the DAG):\n //!\n //! - SCCs, in the form of a union-find repr that can convert each node to\n-//!   its *cycle head* (an arbitrarly chosen representative from the cycle)\n+//!   its *cycle head* (an arbitrarily chosen representative from the cycle)\n //! - a vector of *leaf nodes*, just a convenience\n //! - a vector of *parents* for each node (in some cases, nodes have no parents,\n //!   or their parent is another member of same cycle; in that case, the vector"}, {"sha": "8863d4ea5ea8ace42a98c71ca388f2c68dbc9c0a", "filename": "src/librustc_trans/attributes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7104be1a37daa2f7ec114913247dc93524fd48e/src%2Flibrustc_trans%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7104be1a37daa2f7ec114913247dc93524fd48e/src%2Flibrustc_trans%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fattributes.rs?ref=c7104be1a37daa2f7ec114913247dc93524fd48e", "patch": "@@ -47,7 +47,7 @@ pub fn unwind(val: ValueRef, can_unwind: bool) {\n     Attribute::NoUnwind.toggle_llfn(Function, val, !can_unwind);\n }\n \n-/// Tell LLVM whether it should optimise function for size.\n+/// Tell LLVM whether it should optimize function for size.\n #[inline]\n #[allow(dead_code)] // possibly useful function\n pub fn set_optimize_for_size(val: ValueRef, optimize: bool) {"}, {"sha": "68eb21338a9721708021075399a387d438c72871", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7104be1a37daa2f7ec114913247dc93524fd48e/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7104be1a37daa2f7ec114913247dc93524fd48e/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=c7104be1a37daa2f7ec114913247dc93524fd48e", "patch": "@@ -664,7 +664,7 @@ fn check_for_rustc_errors_attr(tcx: TyCtxt) {\n     }\n }\n \n-/// Create the `main` function which will initialise the rust runtime and call\n+/// Create the `main` function which will initialize the rust runtime and call\n /// users main function.\n fn maybe_create_entry_wrapper(ccx: &CrateContext) {\n     let (main_def_id, span) = match *ccx.sess().entry_fn.borrow() {"}, {"sha": "93dca03e1ff8ee71a90239a574472d7f90bc8f4a", "filename": "src/librustc_trans/debuginfo/doc.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c7104be1a37daa2f7ec114913247dc93524fd48e/src%2Flibrustc_trans%2Fdebuginfo%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7104be1a37daa2f7ec114913247dc93524fd48e/src%2Flibrustc_trans%2Fdebuginfo%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fdoc.rs?ref=c7104be1a37daa2f7ec114913247dc93524fd48e", "patch": "@@ -92,7 +92,7 @@\n //! encounters a recursive reference, it will hit the cache and does not try to\n //! describe the type anew.\n //!\n-//! This behaviour is encapsulated in the 'RecursiveTypeDescription' enum,\n+//! This behavior is encapsulated in the 'RecursiveTypeDescription' enum,\n //! which represents a kind of continuation, storing all state needed to\n //! continue traversal at the type members after the type has been registered\n //! with the cache. (This implementation approach might be a tad over-\n@@ -156,13 +156,13 @@\n //! (2) Structs, enums and traits have a multipart identifier\n //!\n //!     (1) The first part is the SVH (strict version hash) of the crate they\n-//!          wereoriginally defined in\n+//!          were originally defined in\n //!\n //!     (2) The second part is the ast::NodeId of the definition in their\n-//!          originalcrate\n+//!          original crate\n //!\n //!     (3) The final part is a concatenation of the type IDs of their concrete\n-//!          typearguments if they are generic types.\n+//!          type arguments if they are generic types.\n //!\n //! (3) Tuple-, pointer and function types are structurally identified, which\n //!     means that they are equivalent if their component types are equivalent"}, {"sha": "7ce53ca2927ef0a540f2ac3fd85261438fe6b49c", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7104be1a37daa2f7ec114913247dc93524fd48e/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7104be1a37daa2f7ec114913247dc93524fd48e/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=c7104be1a37daa2f7ec114913247dc93524fd48e", "patch": "@@ -106,7 +106,7 @@ pub enum Class {\n }\n \n /// Trait that controls writing the output of syntax highlighting. Users should\n-/// implement this trait to customise writing output.\n+/// implement this trait to customize writing output.\n ///\n /// The classifier will call into the `Writer` implementation as it finds spans\n /// of text to highlight. Exactly how that text should be highlighted is up to"}, {"sha": "585a94f5f633b6b27ee078b52baa680eb04b0172", "filename": "src/librustdoc/html/toc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7104be1a37daa2f7ec114913247dc93524fd48e/src%2Flibrustdoc%2Fhtml%2Ftoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7104be1a37daa2f7ec114913247dc93524fd48e/src%2Flibrustdoc%2Fhtml%2Ftoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Ftoc.rs?ref=c7104be1a37daa2f7ec114913247dc93524fd48e", "patch": "@@ -95,7 +95,7 @@ impl TocBuilder {\n     /// self.top_level, D is in C.children, and C, E, F, G are in\n     /// self.chain.\n     ///\n-    /// When we attempt to push H, we realise that first G is not the\n+    /// When we attempt to push H, we realize that first G is not the\n     /// parent (level is too high) so it is popped from chain and put\n     /// into F.children, then F isn't the parent (level is equal, aka\n     /// sibling), so it's also popped and put into E.children."}, {"sha": "1c3f296bed96cbde9251c72a4c6c4ef3b0fe165e", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7104be1a37daa2f7ec114913247dc93524fd48e/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7104be1a37daa2f7ec114913247dc93524fd48e/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=c7104be1a37daa2f7ec114913247dc93524fd48e", "patch": "@@ -400,7 +400,7 @@ pub fn main_args(args: &[String]) -> isize {\n     })\n }\n \n-/// Prints an uniformised error message on the standard error output\n+/// Prints an uniformized error message on the standard error output\n fn print_error<T>(error_message: T) where T: Display {\n     writeln!(\n         &mut io::stderr(),"}, {"sha": "7392a153e3b87a5ace60736fd78d6f75db204013", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7104be1a37daa2f7ec114913247dc93524fd48e/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7104be1a37daa2f7ec114913247dc93524fd48e/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=c7104be1a37daa2f7ec114913247dc93524fd48e", "patch": "@@ -830,7 +830,7 @@ impl CStr {\n     ///\n     /// It is your responsibility to make sure that the underlying memory is not\n     /// freed too early. For example, the following code will cause undefined\n-    /// behaviour when `ptr` is used inside the `unsafe` block:\n+    /// behavior when `ptr` is used inside the `unsafe` block:\n     ///\n     /// ```no_run\n     /// use std::ffi::{CString};"}, {"sha": "a40a9329ed9bf85fe0ce95e3f0dbc9d09b67ab90", "filename": "src/libstd/ffi/os_str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7104be1a37daa2f7ec114913247dc93524fd48e/src%2Flibstd%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7104be1a37daa2f7ec114913247dc93524fd48e/src%2Flibstd%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fos_str.rs?ref=c7104be1a37daa2f7ec114913247dc93524fd48e", "patch": "@@ -123,7 +123,7 @@ impl OsString {\n \n     /// Creates a new `OsString` with the given capacity.\n     ///\n-    /// The string will be able to hold exactly `capacity` lenth units of other\n+    /// The string will be able to hold exactly `capacity` length units of other\n     /// OS strings without reallocating. If `capacity` is 0, the string will not\n     /// allocate.\n     ///"}, {"sha": "403685a4b8e0be9de12f829cd28171b53db39e15", "filename": "src/libstd/sync/once.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7104be1a37daa2f7ec114913247dc93524fd48e/src%2Flibstd%2Fsync%2Fonce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7104be1a37daa2f7ec114913247dc93524fd48e/src%2Flibstd%2Fsync%2Fonce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fonce.rs?ref=c7104be1a37daa2f7ec114913247dc93524fd48e", "patch": "@@ -387,7 +387,7 @@ impl Drop for Finish {\n impl OnceState {\n     /// Returns whether the associated [`Once`] has been poisoned.\n     ///\n-    /// Once an initalization routine for a [`Once`] has panicked it will forever\n+    /// Once an initialization routine for a [`Once`] has panicked it will forever\n     /// indicate to future forced initialization routines that it is poisoned.\n     ///\n     /// [`Once`]: struct.Once.html"}, {"sha": "59ae2a74a6ddd2ceabedcf37498398aa7f19990a", "filename": "src/libstd/sys/redox/args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7104be1a37daa2f7ec114913247dc93524fd48e/src%2Flibstd%2Fsys%2Fredox%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7104be1a37daa2f7ec114913247dc93524fd48e/src%2Flibstd%2Fsys%2Fredox%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fargs.rs?ref=c7104be1a37daa2f7ec114913247dc93524fd48e", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Global initialization and retreival of command line arguments.\n+//! Global initialization and retrieval of command line arguments.\n //!\n //! On some platforms these are stored during runtime startup,\n //! and on some they are retrieved from the system on demand."}, {"sha": "810d2d40c05f44f07b19b02fd133189a3dd83172", "filename": "src/libstd/sys/unix/args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7104be1a37daa2f7ec114913247dc93524fd48e/src%2Flibstd%2Fsys%2Funix%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7104be1a37daa2f7ec114913247dc93524fd48e/src%2Flibstd%2Fsys%2Funix%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fargs.rs?ref=c7104be1a37daa2f7ec114913247dc93524fd48e", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Global initialization and retreival of command line arguments.\n+//! Global initialization and retrieval of command line arguments.\n //!\n //! On some platforms these are stored during runtime startup,\n //! and on some they are retrieved from the system on demand."}, {"sha": "83feb595bce51ed42c2a2afba13c28f7ee9122ba", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7104be1a37daa2f7ec114913247dc93524fd48e/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7104be1a37daa2f7ec114913247dc93524fd48e/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=c7104be1a37daa2f7ec114913247dc93524fd48e", "patch": "@@ -560,7 +560,7 @@ pub fn current() -> Thread {\n /// implementing low-level shared resources or synchronization primitives.\n ///\n /// However programmers will usually prefer to use, [`channel`]s, [`Condvar`]s,\n-/// [`Mutex`]es or [`join`] for their synchronisation routines, as they avoid\n+/// [`Mutex`]es or [`join`] for their synchronization routines, as they avoid\n /// thinking about thread scheduling.\n ///\n /// Note that [`channel`]s for example are implemented using this primitive."}, {"sha": "5b893505b34d2aac1a14488de4d6e45d0f3186d1", "filename": "src/libstd/time/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7104be1a37daa2f7ec114913247dc93524fd48e/src%2Flibstd%2Ftime%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7104be1a37daa2f7ec114913247dc93524fd48e/src%2Flibstd%2Ftime%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime%2Fmod.rs?ref=c7104be1a37daa2f7ec114913247dc93524fd48e", "patch": "@@ -112,7 +112,7 @@ pub struct Instant(time::Instant);\n ///            println!(\"{}\", elapsed.as_secs());\n ///        }\n ///        Err(e) => {\n-///            // an error occured!\n+///            // an error occurred!\n ///            println!(\"Error: {:?}\", e);\n ///        }\n ///    }"}, {"sha": "dbd7a2ca162b2191785b428cb958de83010e32a2", "filename": "src/libsyntax/json.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7104be1a37daa2f7ec114913247dc93524fd48e/src%2Flibsyntax%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7104be1a37daa2f7ec114913247dc93524fd48e/src%2Flibsyntax%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fjson.rs?ref=c7104be1a37daa2f7ec114913247dc93524fd48e", "patch": "@@ -11,7 +11,7 @@\n //! A JSON emitter for errors.\n //!\n //! This works by converting errors to a simplified structural format (see the\n-//! structs at the start of the file) and then serialising them. These should\n+//! structs at the start of the file) and then serializing them. These should\n //! contain as much information about the error as possible.\n //!\n //! The format of the JSON output should be considered *unstable*. For now the"}, {"sha": "64f76ebb4a2b1b67511d96b683ec2e6d474a554c", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7104be1a37daa2f7ec114913247dc93524fd48e/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7104be1a37daa2f7ec114913247dc93524fd48e/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=c7104be1a37daa2f7ec114913247dc93524fd48e", "patch": "@@ -23,7 +23,7 @@\n //!   and lifetimes for methods.)\n //! - Additional bounds on the type parameters (`TraitDef.additional_bounds`)\n //!\n-//! The most important thing for implementers is the `Substructure` and\n+//! The most important thing for implementors is the `Substructure` and\n //! `SubstructureFields` objects. The latter groups 5 possibilities of the\n //! arguments:\n //!"}]}