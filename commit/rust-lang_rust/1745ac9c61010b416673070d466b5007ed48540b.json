{"sha": "1745ac9c61010b416673070d466b5007ed48540b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3NDVhYzljNjEwMTBiNDE2NjczMDcwZDQ2NmI1MDA3ZWQ0ODU0MGI=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-03-15T14:44:19Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-03-15T14:44:19Z"}, "message": "Remove tests from astencode.rs\n\nThey mysteriously fail on Windows, and Niko assures me this code is about\nbe replaced anyway.", "tree": {"sha": "ccb573bc091b2ec6f59dcc24cfb4ac667b92d3ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ccb573bc091b2ec6f59dcc24cfb4ac667b92d3ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1745ac9c61010b416673070d466b5007ed48540b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1745ac9c61010b416673070d466b5007ed48540b", "html_url": "https://github.com/rust-lang/rust/commit/1745ac9c61010b416673070d466b5007ed48540b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1745ac9c61010b416673070d466b5007ed48540b/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e3f1096bbd1598465696f77f764cca448a72dce", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e3f1096bbd1598465696f77f764cca448a72dce", "html_url": "https://github.com/rust-lang/rust/commit/2e3f1096bbd1598465696f77f764cca448a72dce"}], "stats": {"total": 116, "additions": 0, "deletions": 116}, "files": [{"sha": "5cd46fd67903446cb1ff8ff9355b6bb5a52b9249", "filename": "src/rustc/metadata/astencode.rs", "status": "modified", "additions": 0, "deletions": 116, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/1745ac9c61010b416673070d466b5007ed48540b/src%2Frustc%2Fmetadata%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1745ac9c61010b416673070d466b5007ed48540b/src%2Frustc%2Fmetadata%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fastencode.rs?ref=1745ac9c61010b416673070d466b5007ed48540b", "patch": "@@ -901,119 +901,3 @@ fn decode_side_tables(xcx: extended_decode_ctxt,\n         #debug[\">< Side table doc loaded\"];\n     }\n }\n-\n-// ______________________________________________________________________\n-// Testing of astencode_gen\n-\n-#[cfg(test)]\n-fn encode_item_ast(ebml_w: ebml::writer, item: @ast::item) {\n-    ebml_w.wr_tag(c::tag_tree as uint) {||\n-        astencode_gen::serialize_syntax_ast_item(ebml_w, *item);\n-    }\n-}\n-\n-#[cfg(test)]\n-fn decode_item_ast(par_doc: ebml::doc) -> @ast::item {\n-    let chi_doc = par_doc[c::tag_tree];\n-    let d = ebml::ebml_deserializer(chi_doc);\n-    @astencode_gen::deserialize_syntax_ast_item(d)\n-}\n-\n-#[cfg(test)]\n-fn new_parse_sess() -> parser::parse_sess {\n-    let cm = codemap::new_codemap();\n-    let handler = diagnostic::mk_handler(option::none);\n-    let sess = @{\n-        cm: cm,\n-        mutable next_id: 1,\n-        span_diagnostic: diagnostic::mk_span_handler(handler, cm),\n-        mutable chpos: 0u,\n-        mutable byte_pos: 0u\n-    };\n-    ret sess;\n-}\n-\n-#[cfg(test)]\n-iface fake_ext_ctxt {\n-    fn session() -> fake_session;\n-}\n-\n-#[cfg(test)]\n-type fake_options = {cfg: ast::crate_cfg};\n-\n-#[cfg(test)]\n-type fake_session = {opts: @fake_options,\n-                     parse_sess: parser::parse_sess};\n-\n-#[cfg(test)]\n-impl of fake_ext_ctxt for fake_session {\n-    fn session() -> fake_session {self}\n-}\n-\n-#[cfg(test)]\n-fn mk_ctxt() -> fake_ext_ctxt {\n-    let opts : fake_options = {cfg: []};\n-    {opts: @opts, parse_sess: new_parse_sess()} as fake_ext_ctxt\n-}\n-\n-#[cfg(test)]\n-fn roundtrip(in_item: @ast::item) {\n-    #debug[\"in_item = %s\", pprust::item_to_str(in_item)];\n-    let mbuf = io::mem_buffer();\n-    let ebml_w = ebml::writer(io::mem_buffer_writer(mbuf));\n-    encode_item_ast(ebml_w, in_item);\n-    let ebml_doc = ebml::doc(@io::mem_buffer_buf(mbuf));\n-    let out_item = decode_item_ast(ebml_doc);\n-    #debug[\"out_item = %s\", pprust::item_to_str(out_item)];\n-    assert in_item == out_item;\n-}\n-\n-#[test]\n-fn test_basic() {\n-    let ext_cx = mk_ctxt();\n-    roundtrip(#ast(item){\n-        fn foo() {}\n-    });\n-}\n-\n-#[test]\n-fn test_smalltalk() {\n-    let ext_cx = mk_ctxt();\n-    roundtrip(#ast(item){\n-        fn foo() -> int { 3 + 4 } // first smalltalk program ever executed.\n-    });\n-}\n-\n-#[test]\n-fn test_more() {\n-    let ext_cx = mk_ctxt();\n-    roundtrip(#ast(item){\n-        fn foo(x: uint, y: uint) -> uint {\n-            let z = x + y;\n-            ret z;\n-        }\n-    });\n-}\n-\n-#[test]\n-fn test_simplification() {\n-    let ext_cx = mk_ctxt();\n-    let item_in = ast::ii_item(#ast(item) {\n-        fn new_int_alist<B: copy>() -> alist<int, B> {\n-            fn eq_int(&&a: int, &&b: int) -> bool { a == b }\n-            ret {eq_fn: eq_int, mut data: []};\n-        }\n-    });\n-    let item_out = simplify_ast(item_in);\n-    let item_exp = ast::ii_item(#ast(item) {\n-        fn new_int_alist<B: copy>() -> alist<int, B> {\n-            ret {eq_fn: eq_int, mut data: []};\n-        }\n-    });\n-    alt (item_out, item_exp) {\n-      (ast::ii_item(item_out), ast::ii_item(item_exp)) {\n-        assert pprust::item_to_str(item_out) == pprust::item_to_str(item_exp);\n-      }\n-      _ { fail; }\n-    }\n-}"}]}