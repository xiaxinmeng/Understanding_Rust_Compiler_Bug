{"sha": "ca9b5664c3c4a052a044d63725239ff2e56136f4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhOWI1NjY0YzNjNGEwNTJhMDQ0ZDYzNzI1MjM5ZmYyZTU2MTM2ZjQ=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2016-11-03T20:19:33Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2016-11-12T17:00:50Z"}, "message": "rustc: move closure upvar types to the closure substs\n\nThis moves closures to the (DefId, Substs) scheme like all other items,\nand saves a word from the size of TyS now that Substs is 2 words.", "tree": {"sha": "cc41fd12efb663deb62c8e52731d10aa1863dbe8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc41fd12efb663deb62c8e52731d10aa1863dbe8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca9b5664c3c4a052a044d63725239ff2e56136f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca9b5664c3c4a052a044d63725239ff2e56136f4", "html_url": "https://github.com/rust-lang/rust/commit/ca9b5664c3c4a052a044d63725239ff2e56136f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca9b5664c3c4a052a044d63725239ff2e56136f4/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3af8c8505255555023e4cb7c6c4f297ce22d80d", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3af8c8505255555023e4cb7c6c4f297ce22d80d", "html_url": "https://github.com/rust-lang/rust/commit/f3af8c8505255555023e4cb7c6c4f297ce22d80d"}], "stats": {"total": 271, "additions": 179, "deletions": 92}, "files": [{"sha": "24716c4795134609dd1525848a1993c6804ee998", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca9b5664c3c4a052a044d63725239ff2e56136f4/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca9b5664c3c4a052a044d63725239ff2e56136f4/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=ca9b5664c3c4a052a044d63725239ff2e56136f4", "patch": "@@ -1657,7 +1657,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     {\n         if let InferTables::Local(tables) = self.tables {\n             if let Some(ty) = tables.borrow().closure_tys.get(&def_id) {\n-                return ty.subst(self.tcx, substs.func_substs);\n+                return ty.subst(self.tcx, substs.substs);\n             }\n         }\n "}, {"sha": "8c0d70c6d602b731b054452e74799357bb3a8887", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ca9b5664c3c4a052a044d63725239ff2e56136f4/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca9b5664c3c4a052a044d63725239ff2e56136f4/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=ca9b5664c3c4a052a044d63725239ff2e56136f4", "patch": "@@ -40,6 +40,7 @@\n #![feature(rustc_private)]\n #![feature(slice_patterns)]\n #![feature(staged_api)]\n+#![feature(unboxed_closures)]\n #![cfg_attr(stage0, feature(question_mark))]\n #![cfg_attr(test, feature(test))]\n "}, {"sha": "6f6534cb2064a56be8e02ce5ada885c1bc8b732e", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ca9b5664c3c4a052a044d63725239ff2e56136f4/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca9b5664c3c4a052a044d63725239ff2e56136f4/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=ca9b5664c3c4a052a044d63725239ff2e56136f4", "patch": "@@ -1912,16 +1912,16 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                 tys.to_vec()\n             }\n \n-            ty::TyClosure(_, ref substs) => {\n+            ty::TyClosure(def_id, ref substs) => {\n                 // FIXME(#27086). We are invariant w/r/t our\n-                // substs.func_substs, but we don't see them as\n+                // func_substs, but we don't see them as\n                 // constituent types; this seems RIGHT but also like\n                 // something that a normal type couldn't simulate. Is\n                 // this just a gap with the way that PhantomData and\n                 // OIBIT interact? That is, there is no way to say\n                 // \"make me invariant with respect to this TYPE, but\n                 // do not act as though I can reach it\"\n-                substs.upvar_tys.to_vec()\n+                substs.upvar_tys(def_id, self.tcx()).collect()\n             }\n \n             // for `PhantomData<T>`, we pass `T`"}, {"sha": "9f80c2487fb2cca52651b36a9d0acad719e0f3ff", "filename": "src/librustc/ty/contents.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ca9b5664c3c4a052a044d63725239ff2e56136f4/src%2Flibrustc%2Fty%2Fcontents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca9b5664c3c4a052a044d63725239ff2e56136f4/src%2Flibrustc%2Fty%2Fcontents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontents.rs?ref=ca9b5664c3c4a052a044d63725239ff2e56136f4", "patch": "@@ -98,10 +98,11 @@ impl TypeContents {\n         TC::OwnsOwned | (*self & TC::OwnsAll)\n     }\n \n-    pub fn union<T, F>(v: &[T], mut f: F) -> TypeContents where\n-        F: FnMut(&T) -> TypeContents,\n+    pub fn union<I, T, F>(v: I, mut f: F) -> TypeContents where\n+        I: IntoIterator<Item=T>,\n+        F: FnMut(T) -> TypeContents,\n     {\n-        v.iter().fold(TC::None, |tc, ty| tc | f(ty))\n+        v.into_iter().fold(TC::None, |tc, ty| tc | f(ty))\n     }\n \n     pub fn has_dtor(&self) -> bool {\n@@ -215,8 +216,10 @@ impl<'a, 'tcx> ty::TyS<'tcx> {\n                 }\n                 ty::TyStr => TC::None,\n \n-                ty::TyClosure(_, ref substs) => {\n-                    TypeContents::union(&substs.upvar_tys, |ty| tc_ty(tcx, &ty, cache))\n+                ty::TyClosure(def_id, ref substs) => {\n+                    TypeContents::union(\n+                        substs.upvar_tys(def_id, tcx),\n+                        |ty| tc_ty(tcx, &ty, cache))\n                 }\n \n                 ty::TyTuple(ref tys) => {"}, {"sha": "45450456e8a6583e1b9e93861df9b1c627ce6103", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ca9b5664c3c4a052a044d63725239ff2e56136f4/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca9b5664c3c4a052a044d63725239ff2e56136f4/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=ca9b5664c3c4a052a044d63725239ff2e56136f4", "patch": "@@ -1446,12 +1446,10 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n \n     pub fn mk_closure(self,\n                       closure_id: DefId,\n-                      substs: &'tcx Substs<'tcx>,\n-                      tys: &[Ty<'tcx>])\n+                      substs: &'tcx Substs<'tcx>)\n                       -> Ty<'tcx> {\n         self.mk_closure_from_closure_substs(closure_id, ClosureSubsts {\n-            func_substs: substs,\n-            upvar_tys: self.intern_type_list(tys)\n+            substs: substs\n         })\n     }\n \n@@ -1574,4 +1572,3 @@ impl<T, R, E> InternIteratorElement<T, R> for Result<T, E> {\n         Ok(f(&iter.collect::<Result<AccumulateVec<[_; 8]>, _>>()?))\n     }\n }\n-"}, {"sha": "2c09b89beb2322a8f972235f0b9835fca6addff7", "filename": "src/librustc/ty/flags.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ca9b5664c3c4a052a044d63725239ff2e56136f4/src%2Flibrustc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca9b5664c3c4a052a044d63725239ff2e56136f4/src%2Flibrustc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fflags.rs?ref=ca9b5664c3c4a052a044d63725239ff2e56136f4", "patch": "@@ -88,8 +88,7 @@ impl FlagComputation {\n             &ty::TyClosure(_, ref substs) => {\n                 self.add_flags(TypeFlags::HAS_TY_CLOSURE);\n                 self.add_flags(TypeFlags::HAS_LOCAL_NAMES);\n-                self.add_substs(&substs.func_substs);\n-                self.add_tys(&substs.upvar_tys);\n+                self.add_substs(&substs.substs);\n             }\n \n             &ty::TyInfer(infer) => {"}, {"sha": "5ee1c3678d675df1aba5a4567112dd7a986b40ee", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ca9b5664c3c4a052a044d63725239ff2e56136f4/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca9b5664c3c4a052a044d63725239ff2e56136f4/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=ca9b5664c3c4a052a044d63725239ff2e56136f4", "patch": "@@ -631,7 +631,9 @@ impl<'a, 'gcx, 'tcx> Struct {\n \n             // Perhaps one of the upvars of this closure is non-zero\n             // Let's recurse and find out!\n-            (_, &ty::TyClosure(_, ty::ClosureSubsts { upvar_tys: tys, .. })) |\n+            (_, &ty::TyClosure(def_id, ref substs)) => {\n+                Struct::non_zero_field_path(infcx, substs.upvar_tys(def_id, tcx))\n+            }\n             // Can we use one of the fields in this tuple?\n             (_, &ty::TyTuple(tys)) => {\n                 Struct::non_zero_field_path(infcx, tys.iter().cloned())\n@@ -961,7 +963,13 @@ impl<'a, 'gcx, 'tcx> Layout {\n             }\n \n             // Tuples and closures.\n-            ty::TyClosure(_, ty::ClosureSubsts { upvar_tys: tys, .. }) |\n+            ty::TyClosure(def_id, ref substs) => {\n+                let mut st = Struct::new(dl, false);\n+                let tys = substs.upvar_tys(def_id, tcx);\n+                st.extend(dl, tys.map(|ty| ty.layout(infcx)), ty)?;\n+                Univariant { variant: st, non_zero: false }\n+            }\n+\n             ty::TyTuple(tys) => {\n                 let mut st = Struct::new(dl, false);\n                 st.extend(dl, tys.iter().map(|ty| ty.layout(infcx)), ty)?;"}, {"sha": "1de54f49a55227d4a8361c2bf97c558d45c2221e", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ca9b5664c3c4a052a044d63725239ff2e56136f4/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca9b5664c3c4a052a044d63725239ff2e56136f4/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=ca9b5664c3c4a052a044d63725239ff2e56136f4", "patch": "@@ -2544,12 +2544,12 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         // tables by typeck; else, it will be retreived from\n         // the external crate metadata.\n         if let Some(ty) = self.tables.borrow().closure_tys.get(&def_id) {\n-            return ty.subst(self, substs.func_substs);\n+            return ty.subst(self, substs.substs);\n         }\n \n         let ty = self.sess.cstore.closure_ty(self.global_tcx(), def_id);\n         self.tables.borrow_mut().closure_tys.insert(def_id, ty.clone());\n-        ty.subst(self, substs.func_substs)\n+        ty.subst(self, substs.substs)\n     }\n \n     /// Given the def_id of an impl, return the def_id of the trait it implements."}, {"sha": "e3d13f593954f6ee8ba39356cecdda23e22d5e1c", "filename": "src/librustc/ty/outlives.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ca9b5664c3c4a052a044d63725239ff2e56136f4/src%2Flibrustc%2Fty%2Foutlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca9b5664c3c4a052a044d63725239ff2e56136f4/src%2Flibrustc%2Fty%2Foutlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Foutlives.rs?ref=ca9b5664c3c4a052a044d63725239ff2e56136f4", "patch": "@@ -72,7 +72,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         // in the `subtys` iterator (e.g., when encountering a\n         // projection).\n         match ty.sty {\n-            ty::TyClosure(_, ref substs) => {\n+            ty::TyClosure(def_id, ref substs) => {\n                 // FIXME(#27086). We do not accumulate from substs, since they\n                 // don't represent reachable data. This means that, in\n                 // practice, some of the lifetime parameters might not\n@@ -110,7 +110,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                 // what func/type parameters are used and unused,\n                 // taking into consideration UFCS and so forth.\n \n-                for &upvar_ty in substs.upvar_tys {\n+                for upvar_ty in substs.upvar_tys(def_id, *self) {\n                     self.compute_components(upvar_ty, out);\n                 }\n             }"}, {"sha": "2a01bad33c52e398a7a49b349cfaeb99e5c810a4", "filename": "src/librustc/ty/relate.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ca9b5664c3c4a052a044d63725239ff2e56136f4/src%2Flibrustc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca9b5664c3c4a052a044d63725239ff2e56136f4/src%2Flibrustc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Frelate.rs?ref=ca9b5664c3c4a052a044d63725239ff2e56136f4", "patch": "@@ -534,13 +534,8 @@ impl<'tcx> Relate<'tcx> for ty::ClosureSubsts<'tcx> {\n                            -> RelateResult<'tcx, ty::ClosureSubsts<'tcx>>\n         where R: TypeRelation<'a, 'gcx, 'tcx>, 'gcx: 'a+'tcx, 'tcx: 'a\n     {\n-        let substs = relate_substs(relation, None, a.func_substs, b.func_substs)?;\n-        assert_eq!(a.upvar_tys.len(), b.upvar_tys.len());\n-        Ok(ty::ClosureSubsts {\n-            func_substs: substs,\n-            upvar_tys: relation.tcx().mk_type_list(\n-                a.upvar_tys.iter().zip(b.upvar_tys).map(|(a, b)| relation.relate(a, b)))?\n-        })\n+        let substs = relate_substs(relation, None, a.substs, b.substs)?;\n+        Ok(ty::ClosureSubsts { substs: substs })\n     }\n }\n "}, {"sha": "e73be23a42c76d068416337e3ef2cd89e8d0f8b3", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ca9b5664c3c4a052a044d63725239ff2e56136f4/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca9b5664c3c4a052a044d63725239ff2e56136f4/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=ca9b5664c3c4a052a044d63725239ff2e56136f4", "patch": "@@ -198,11 +198,8 @@ impl<'tcx, T: Lift<'tcx>> Lift<'tcx> for ty::Binder<T> {\n impl<'a, 'tcx> Lift<'tcx> for ty::ClosureSubsts<'a> {\n     type Lifted = ty::ClosureSubsts<'tcx>;\n     fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'b, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n-        tcx.lift(&(self.func_substs, self.upvar_tys)).map(|(substs, upvar_tys)| {\n-            ty::ClosureSubsts {\n-                func_substs: substs,\n-                upvar_tys: upvar_tys\n-            }\n+        tcx.lift(&self.substs).map(|substs| {\n+            ty::ClosureSubsts { substs: substs }\n         })\n     }\n }\n@@ -654,13 +651,12 @@ impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::Region {\n impl<'tcx> TypeFoldable<'tcx> for ty::ClosureSubsts<'tcx> {\n     fn super_fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, folder: &mut F) -> Self {\n         ty::ClosureSubsts {\n-            func_substs: self.func_substs.fold_with(folder),\n-            upvar_tys: self.upvar_tys.fold_with(folder),\n+            substs: self.substs.fold_with(folder),\n         }\n     }\n \n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n-        self.func_substs.visit_with(visitor) || self.upvar_tys.visit_with(visitor)\n+        self.substs.visit_with(visitor)\n     }\n }\n "}, {"sha": "56466d596829804ecb89bc77c2355979b0a2d13e", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ca9b5664c3c4a052a044d63725239ff2e56136f4/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca9b5664c3c4a052a044d63725239ff2e56136f4/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=ca9b5664c3c4a052a044d63725239ff2e56136f4", "patch": "@@ -11,6 +11,7 @@\n //! This module contains TypeVariants and its major components\n \n use hir::def_id::DefId;\n+\n use middle::region;\n use ty::subst::Substs;\n use ty::{self, AdtDef, ToPredicate, TypeFlags, Ty, TyCtxt, TypeFoldable};\n@@ -254,15 +255,23 @@ pub enum TypeVariants<'tcx> {\n /// handle). Plus it fixes an ICE. :P\n #[derive(Copy, Clone, PartialEq, Eq, Hash, Debug, RustcEncodable, RustcDecodable)]\n pub struct ClosureSubsts<'tcx> {\n-    /// Lifetime and type parameters from the enclosing function.\n+    /// Lifetime and type parameters from the enclosing function,\n+    /// concatenated with the types of the upvars.\n+    ///\n     /// These are separated out because trans wants to pass them around\n     /// when monomorphizing.\n-    pub func_substs: &'tcx Substs<'tcx>,\n+    pub substs: &'tcx Substs<'tcx>,\n+}\n \n-    /// The types of the upvars. The list parallels the freevars and\n-    /// `upvar_borrows` lists. These are kept distinct so that we can\n-    /// easily index into them.\n-    pub upvar_tys: &'tcx Slice<Ty<'tcx>>\n+impl<'a, 'gcx, 'acx, 'tcx> ClosureSubsts<'tcx> {\n+    #[inline]\n+    pub fn upvar_tys(self, def_id: DefId, tcx: TyCtxt<'a, 'gcx, 'acx>) ->\n+        impl Iterator<Item=Ty<'tcx>> + 'tcx\n+    {\n+        let generics = tcx.item_generics(def_id);\n+        self.substs[self.substs.len()-generics.own_count()..].iter().map(\n+            |t| t.as_type().expect(\"unexpected region in upvars\"))\n+    }\n }\n \n #[derive(Clone, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n@@ -1234,7 +1243,7 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n                 substs.regions().collect()\n             }\n             TyClosure(_, ref substs) => {\n-                substs.func_substs.regions().collect()\n+                substs.substs.regions().collect()\n             }\n             TyProjection(ref data) => {\n                 data.trait_ref.substs.regions().collect()"}, {"sha": "76d512a20b26e20c6e0b650e9912066c378df52e", "filename": "src/librustc/ty/subst.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ca9b5664c3c4a052a044d63725239ff2e56136f4/src%2Flibrustc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca9b5664c3c4a052a044d63725239ff2e56136f4/src%2Flibrustc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsubst.rs?ref=ca9b5664c3c4a052a044d63725239ff2e56136f4", "patch": "@@ -274,6 +274,20 @@ impl<'a, 'gcx, 'tcx> Substs<'tcx> {\n         let defs = tcx.item_generics(source_ancestor);\n         tcx.mk_substs(target_substs.iter().chain(&self[defs.own_count()..]).cloned())\n     }\n+\n+    pub fn extend_with_types(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>,\n+                             types: &[Ty<'tcx>])\n+                             -> &'tcx Substs<'tcx> {\n+        tcx.mk_substs(\n+            self[..].iter().cloned().chain(\n+                types.iter().map(|a| Kind::from(*a)))\n+        )\n+    }\n+\n+    pub fn truncate_to(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>, generics: &ty::Generics<'tcx>)\n+                       -> &'tcx Substs<'tcx> {\n+        tcx.mk_substs(self.iter().take(generics.count()).cloned())\n+    }\n }\n \n impl<'tcx> TypeFoldable<'tcx> for &'tcx Substs<'tcx> {"}, {"sha": "7d3e380a3b59076ef5a10bb7a841336171f62a35", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ca9b5664c3c4a052a044d63725239ff2e56136f4/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca9b5664c3c4a052a044d63725239ff2e56136f4/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=ca9b5664c3c4a052a044d63725239ff2e56136f4", "patch": "@@ -11,6 +11,7 @@\n //! misc. type-system utilities too small to deserve their own file\n \n use hir::def_id::DefId;\n+use hir::map::DefPathData;\n use infer::InferCtxt;\n use hir::map as ast_map;\n use hir::pat_util;\n@@ -390,6 +391,16 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         // (e.g. calling `foo.0.clone()` of `Foo<T:Clone>`).\n         return !self.has_attr(dtor_method, \"unsafe_destructor_blind_to_params\");\n     }\n+\n+    pub fn closure_base_def_id(&self, def_id: DefId) -> DefId {\n+        let mut def_id = def_id;\n+        while self.def_key(def_id).disambiguated_data.data == DefPathData::ClosureExpr {\n+            def_id = self.parent_def_id(def_id).unwrap_or_else(|| {\n+                bug!(\"closure {:?} has no parent\", def_id);\n+            });\n+        }\n+        def_id\n+    }\n }\n \n /// When hashing a type this ends up affecting properties like symbol names. We"}, {"sha": "a6ecfd2fb70668405327f35d7ba2eb6064bc7d35", "filename": "src/librustc/ty/walk.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ca9b5664c3c4a052a044d63725239ff2e56136f4/src%2Flibrustc%2Fty%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca9b5664c3c4a052a044d63725239ff2e56136f4/src%2Flibrustc%2Fty%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwalk.rs?ref=ca9b5664c3c4a052a044d63725239ff2e56136f4", "patch": "@@ -97,8 +97,7 @@ fn push_subtypes<'tcx>(stack: &mut Vec<Ty<'tcx>>, parent_ty: Ty<'tcx>) {\n             stack.extend(substs.types().rev());\n         }\n         ty::TyClosure(_, ref substs) => {\n-            stack.extend(substs.func_substs.types().rev());\n-            stack.extend(substs.upvar_tys.iter().cloned().rev());\n+            stack.extend(substs.substs.types().rev());\n         }\n         ty::TyTuple(ts) => {\n             stack.extend(ts.iter().cloned().rev());"}, {"sha": "a63c7ba6a25ce9fd093ac59754e692372e2c66c9", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ca9b5664c3c4a052a044d63725239ff2e56136f4/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca9b5664c3c4a052a044d63725239ff2e56136f4/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=ca9b5664c3c4a052a044d63725239ff2e56136f4", "patch": "@@ -907,13 +907,14 @@ impl<'tcx> fmt::Display for ty::TypeVariants<'tcx> {\n             }\n             TyStr => write!(f, \"str\"),\n             TyClosure(did, substs) => ty::tls::with(|tcx| {\n+                let upvar_tys = substs.upvar_tys(did, tcx);\n                 write!(f, \"[closure\")?;\n \n                 if let Some(node_id) = tcx.map.as_local_node_id(did) {\n                     write!(f, \"@{:?}\", tcx.map.span(node_id))?;\n                     let mut sep = \" \";\n                     tcx.with_freevars(node_id, |freevars| {\n-                        for (freevar, upvar_ty) in freevars.iter().zip(substs.upvar_tys) {\n+                        for (freevar, upvar_ty) in freevars.iter().zip(upvar_tys) {\n                             let def_id = freevar.def.def_id();\n                             let node_id = tcx.map.as_local_node_id(def_id).unwrap();\n                             write!(f,\n@@ -930,7 +931,7 @@ impl<'tcx> fmt::Display for ty::TypeVariants<'tcx> {\n                     // visible in trans bug reports, I imagine.\n                     write!(f, \"@{:?}\", did)?;\n                     let mut sep = \" \";\n-                    for (index, upvar_ty) in substs.upvar_tys.iter().enumerate() {\n+                    for (index, upvar_ty) in upvar_tys.enumerate() {\n                         write!(f, \"{}{}:{}\", sep, index, upvar_ty)?;\n                         sep = \", \";\n                     }"}, {"sha": "cdb19d164bf290d94432f7ec9e278121a39a3944", "filename": "src/librustc_borrowck/borrowck/mir/elaborate_drops.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ca9b5664c3c4a052a044d63725239ff2e56136f4/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca9b5664c3c4a052a044d63725239ff2e56136f4/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Felaborate_drops.rs?ref=ca9b5664c3c4a052a044d63725239ff2e56136f4", "patch": "@@ -709,9 +709,11 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n             ty::TyAdt(def, substs) => {\n                 self.open_drop_for_adt(c, def, substs)\n             }\n-            ty::TyTuple(tys) | ty::TyClosure(_, ty::ClosureSubsts {\n-                upvar_tys: tys, ..\n-            }) => {\n+            ty::TyClosure(def_id, substs) => {\n+                let tys : Vec<_> = substs.upvar_tys(def_id, self.tcx).collect();\n+                self.open_drop_for_tuple(c, &tys)\n+            }\n+            ty::TyTuple(tys) => {\n                 self.open_drop_for_tuple(c, tys)\n             }\n             ty::TyBox(ty) => {"}, {"sha": "4d7aa43ce42dbe8ec0a49bd30b53ab82ef483895", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca9b5664c3c4a052a044d63725239ff2e56136f4/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca9b5664c3c4a052a044d63725239ff2e56136f4/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=ca9b5664c3c4a052a044d63725239ff2e56136f4", "patch": "@@ -1059,7 +1059,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             ty: None,\n             inherent_impls: LazySeq::empty(),\n             variances: LazySeq::empty(),\n-            generics: None,\n+            generics: Some(self.encode_generics(def_id)),\n             predicates: None,\n \n             ast: None,"}, {"sha": "24c1ca574a01baf6731adc2fefcb8cdf700a52a7", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ca9b5664c3c4a052a044d63725239ff2e56136f4/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca9b5664c3c4a052a044d63725239ff2e56136f4/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=ca9b5664c3c4a052a044d63725239ff2e56136f4", "patch": "@@ -521,8 +521,8 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n             };\n             let upvars = cx.tcx.with_freevars(expr.id, |freevars| {\n                 freevars.iter()\n-                    .enumerate()\n-                    .map(|(i, fv)| capture_freevar(cx, expr, fv, substs.upvar_tys[i]))\n+                    .zip(substs.upvar_tys(def_id, cx.tcx))\n+                    .map(|(fv, ty)| capture_freevar(cx, expr, fv, ty))\n                     .collect()\n             });\n             ExprKind::Closure {"}, {"sha": "79bb14b7336c1a0bb28d63f4374b9e1a334a7b78", "filename": "src/librustc_mir/transform/type_check.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ca9b5664c3c4a052a044d63725239ff2e56136f4/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca9b5664c3c4a052a044d63725239ff2e56136f4/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs?ref=ca9b5664c3c4a052a044d63725239ff2e56136f4", "patch": "@@ -274,9 +274,15 @@ impl<'a, 'b, 'gcx, 'tcx> TypeVerifier<'a, 'b, 'gcx, 'tcx> {\n                 ty::TyAdt(adt_def, substs) if adt_def.is_univariant() => {\n                         (&adt_def.variants[0], substs)\n                     }\n-                ty::TyTuple(tys) | ty::TyClosure(_, ty::ClosureSubsts {\n-                    upvar_tys: tys, ..\n-                }) => {\n+                ty::TyClosure(def_id, substs) => {\n+                    return match substs.upvar_tys(def_id, tcx).nth(field.index()) {\n+                        Some(ty) => Ok(ty),\n+                        None => Err(FieldAccessError::OutOfRange {\n+                            field_count: substs.upvar_tys(def_id, tcx).count()\n+                        })\n+                    }\n+                }\n+                ty::TyTuple(tys) => {\n                     return match tys.get(field.index()) {\n                         Some(&ty) => Ok(ty),\n                         None => Err(FieldAccessError::OutOfRange {"}, {"sha": "c3340281d073254a08a9420dc5e34df0191e23cd", "filename": "src/librustc_trans/adt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ca9b5664c3c4a052a044d63725239ff2e56136f4/src%2Flibrustc_trans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca9b5664c3c4a052a044d63725239ff2e56136f4/src%2Flibrustc_trans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fadt.rs?ref=ca9b5664c3c4a052a044d63725239ff2e56136f4", "patch": "@@ -108,9 +108,9 @@ fn compute_fields<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>,\n             }).collect::<Vec<_>>()\n         },\n         ty::TyTuple(fields) => fields.to_vec(),\n-        ty::TyClosure(_, substs) => {\n+        ty::TyClosure(def_id, substs) => {\n             if variant_index > 0 { bug!(\"{} is a closure, which only has one variant\", t);}\n-            substs.upvar_tys.to_vec()\n+            substs.upvar_tys(def_id, cx.tcx()).collect()\n         },\n         _ => bug!(\"{} is not a type that can have fields.\", t)\n     }"}, {"sha": "0cefc49cb425eb42020b7a6f23b2438ca69444e4", "filename": "src/librustc_trans/closure.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ca9b5664c3c4a052a044d63725239ff2e56136f4/src%2Flibrustc_trans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca9b5664c3c4a052a044d63725239ff2e56136f4/src%2Flibrustc_trans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fclosure.rs?ref=ca9b5664c3c4a052a044d63725239ff2e56136f4", "patch": "@@ -49,7 +49,7 @@ fn get_or_create_closure_declaration<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n     // duplicate declarations\n     let tcx = ccx.tcx();\n     let substs = tcx.erase_regions(&substs);\n-    let instance = Instance::new(closure_id, substs.func_substs);\n+    let instance = Instance::new(closure_id, substs.substs);\n \n     if let Some(&llfn) = ccx.instances().borrow().get(&instance) {\n         debug!(\"get_or_create_closure_declaration(): found closure {:?}: {:?}\",\n@@ -99,8 +99,7 @@ pub fn trans_closure_body_via_mir<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n     let tcx = ccx.tcx();\n     let _icx = push_ctxt(\"closure::trans_closure_expr\");\n \n-    let param_substs = closure_substs.func_substs;\n-    let instance = Instance::new(closure_def_id, param_substs);\n+    let instance = Instance::new(closure_def_id, closure_substs.substs);\n \n     // If we have not done so yet, translate this closure's body\n     if  !ccx.instances().borrow().contains_key(&instance) {\n@@ -138,7 +137,7 @@ pub fn trans_closure_body_via_mir<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n \n         trans_closure(ccx,\n                       llfn,\n-                      Instance::new(closure_def_id, param_substs),\n+                      instance,\n                       &sig,\n                       Abi::RustCall);\n "}, {"sha": "a79719a4d2272fa71fc26bebda8e44a2da16a505", "filename": "src/librustc_trans/collector.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ca9b5664c3c4a052a044d63725239ff2e56136f4/src%2Flibrustc_trans%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca9b5664c3c4a052a044d63725239ff2e56136f4/src%2Flibrustc_trans%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcollector.rs?ref=ca9b5664c3c4a052a044d63725239ff2e56136f4", "patch": "@@ -452,7 +452,7 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n \n                 let concrete_substs = monomorphize::apply_param_substs(self.scx,\n                                                                        self.param_substs,\n-                                                                       &substs.func_substs);\n+                                                                       &substs.substs);\n                 let concrete_substs = self.scx.tcx().erase_regions(&concrete_substs);\n \n                 let visitor = MirNeighborCollector {\n@@ -797,8 +797,8 @@ fn find_drop_glue_neighbors<'a, 'tcx>(scx: &SharedCrateContext<'a, 'tcx>,\n                 }\n             }\n         }\n-        ty::TyClosure(_, substs) => {\n-            for upvar_ty in substs.upvar_tys {\n+        ty::TyClosure(def_id, substs) => {\n+            for upvar_ty in substs.upvar_tys(def_id, scx.tcx()) {\n                 let upvar_ty = glue::get_drop_glue_type(scx.tcx(), upvar_ty);\n                 if glue::type_needs_drop(scx.tcx(), upvar_ty) {\n                     output.push(TransItem::DropGlue(DropGlueKind::Ty(upvar_ty)));"}, {"sha": "6f3a7262152074bbcbe4ced765b2bf62c08f952f", "filename": "src/librustc_trans/common.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ca9b5664c3c4a052a044d63725239ff2e56136f4/src%2Flibrustc_trans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca9b5664c3c4a052a044d63725239ff2e56136f4/src%2Flibrustc_trans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcommon.rs?ref=ca9b5664c3c4a052a044d63725239ff2e56136f4", "patch": "@@ -109,7 +109,16 @@ pub fn type_pair_fields<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, ty: Ty<'tcx>)\n             Some([monomorphize::field_ty(ccx.tcx(), substs, &fields[0]),\n                   monomorphize::field_ty(ccx.tcx(), substs, &fields[1])])\n         }\n-        ty::TyClosure(_, ty::ClosureSubsts { upvar_tys: tys, .. }) |\n+        ty::TyClosure(def_id, substs) => {\n+            let mut tys = substs.upvar_tys(def_id, ccx.tcx());\n+            tys.next().and_then(|first_ty| tys.next().and_then(|second_ty| {\n+                if tys.next().is_some() {\n+                    None\n+                } else {\n+                    Some([first_ty, second_ty])\n+                }\n+            }))\n+        }\n         ty::TyTuple(tys) => {\n             if tys.len() != 2 {\n                 return None;"}, {"sha": "5b9ef78ddc22e86f0dd4abc5e112b74fa820415b", "filename": "src/librustc_trans/debuginfo/metadata.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ca9b5664c3c4a052a044d63725239ff2e56136f4/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca9b5664c3c4a052a044d63725239ff2e56136f4/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs?ref=ca9b5664c3c4a052a044d63725239ff2e56136f4", "patch": "@@ -574,10 +574,11 @@ pub fn type_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n             MetadataCreationResult::new(pointer_type_metadata(cx, t, fn_metadata), false)\n \n         }\n-        ty::TyClosure(_, ref substs) => {\n+        ty::TyClosure(def_id, substs) => {\n+            let upvar_tys : Vec<_> = substs.upvar_tys(def_id, cx.tcx()).collect();\n             prepare_tuple_metadata(cx,\n                                    t,\n-                                   &substs.upvar_tys,\n+                                   &upvar_tys,\n                                    unique_type_id,\n                                    usage_site_span).finalize(cx)\n         }"}, {"sha": "482275d298bc0e14c309f097669851dbec423b81", "filename": "src/librustc_trans/debuginfo/mod.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ca9b5664c3c4a052a044d63725239ff2e56136f4/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca9b5664c3c4a052a044d63725239ff2e56136f4/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs?ref=ca9b5664c3c4a052a044d63725239ff2e56136f4", "patch": "@@ -25,7 +25,6 @@ use llvm::{ModuleRef, ContextRef, ValueRef};\n use llvm::debuginfo::{DIFile, DIType, DIScope, DIBuilderRef, DISubprogram, DIArray,\n                       FlagPrototyped};\n use rustc::hir::def_id::DefId;\n-use rustc::hir::map::DefPathData;\n use rustc::ty::subst::Substs;\n \n use abi::Abi;\n@@ -248,21 +247,19 @@ pub fn create_function_debug_context<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n     };\n \n     // Find the enclosing function, in case this is a closure.\n-    let mut fn_def_id = instance.def;\n-    let mut def_key = cx.tcx().def_key(fn_def_id);\n+    let def_key = cx.tcx().def_key(instance.def);\n     let mut name = def_key.disambiguated_data.data.to_string();\n     let name_len = name.len();\n-    while def_key.disambiguated_data.data == DefPathData::ClosureExpr {\n-        fn_def_id.index = def_key.parent.expect(\"closure without a parent?\");\n-        def_key = cx.tcx().def_key(fn_def_id);\n-    }\n+\n+    let fn_def_id = cx.tcx().closure_base_def_id(instance.def);\n \n     // Get_template_parameters() will append a `<...>` clause to the function\n     // name if necessary.\n     let generics = cx.tcx().item_generics(fn_def_id);\n+    let substs = instance.substs.truncate_to(cx.tcx(), generics);\n     let template_parameters = get_template_parameters(cx,\n                                                       &generics,\n-                                                      instance.substs,\n+                                                      substs,\n                                                       file_metadata,\n                                                       &mut name);\n "}, {"sha": "d6d4d33923f1a91fb4529461eb54996c693bd2af", "filename": "src/librustc_trans/glue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ca9b5664c3c4a052a044d63725239ff2e56136f4/src%2Flibrustc_trans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca9b5664c3c4a052a044d63725239ff2e56136f4/src%2Flibrustc_trans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fglue.rs?ref=ca9b5664c3c4a052a044d63725239ff2e56136f4", "patch": "@@ -531,8 +531,8 @@ fn drop_structural_ty<'blk, 'tcx>(cx: Block<'blk, 'tcx>,\n \n     let mut cx = cx;\n     match t.sty {\n-        ty::TyClosure(_, ref substs) => {\n-            for (i, upvar_ty) in substs.upvar_tys.iter().enumerate() {\n+        ty::TyClosure(def_id, substs) => {\n+            for (i, upvar_ty) in substs.upvar_tys(def_id, cx.tcx()).enumerate() {\n                 let llupvar = adt::trans_field_ptr(cx, t, value, Disr(0), i);\n                 cx = drop_ty(cx, llupvar, upvar_ty, DebugLoc::None);\n             }"}, {"sha": "12b17c26cbc41dbec9d3eb7a4b27bb67531b9fc6", "filename": "src/librustc_trans/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ca9b5664c3c4a052a044d63725239ff2e56136f4/src%2Flibrustc_trans%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca9b5664c3c4a052a044d63725239ff2e56136f4/src%2Flibrustc_trans%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fmod.rs?ref=ca9b5664c3c4a052a044d63725239ff2e56136f4", "patch": "@@ -470,8 +470,8 @@ fn arg_local_refs<'bcx, 'tcx>(bcx: &BlockAndBuilder<'bcx, 'tcx>,\n             } else {\n                 (arg_ty, false)\n             };\n-            let upvar_tys = if let ty::TyClosure(_, ref substs) = closure_ty.sty {\n-                &substs.upvar_tys[..]\n+            let upvar_tys = if let ty::TyClosure(def_id, substs) = closure_ty.sty {\n+                substs.upvar_tys(def_id, tcx)\n             } else {\n                 bug!(\"upvar_decls with non-closure arg0 type `{}`\", closure_ty);\n             };"}, {"sha": "16bc7e212cf5437cddf109fe4e6b5c9f75fab432", "filename": "src/librustc_trans/trans_item.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ca9b5664c3c4a052a044d63725239ff2e56136f4/src%2Flibrustc_trans%2Ftrans_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca9b5664c3c4a052a044d63725239ff2e56136f4/src%2Flibrustc_trans%2Ftrans_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans_item.rs?ref=ca9b5664c3c4a052a044d63725239ff2e56136f4", "patch": "@@ -477,12 +477,14 @@ pub fn push_unique_type_name<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 push_unique_type_name(tcx, sig.output, output);\n             }\n         },\n-        ty::TyClosure(def_id, ref closure_substs) => {\n+        ty::TyClosure(def_id, closure_substs) => {\n             push_item_name(tcx, def_id, output);\n             output.push_str(\"{\");\n             output.push_str(&format!(\"{}:{}\", def_id.krate, def_id.index.as_usize()));\n             output.push_str(\"}\");\n-            push_type_params(tcx, closure_substs.func_substs, &[], output);\n+            let generics = tcx.item_generics(tcx.closure_base_def_id(def_id));\n+            let substs = closure_substs.substs.truncate_to(tcx, generics);\n+            push_type_params(tcx, substs, &[], output);\n         }\n         ty::TyError |\n         ty::TyInfer(_) |"}, {"sha": "d48a129dfe1cd9432065b0086bd40cf3d35c268e", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 34, "deletions": 4, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/ca9b5664c3c4a052a044d63725239ff2e56136f4/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca9b5664c3c4a052a044d63725239ff2e56136f4/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=ca9b5664c3c4a052a044d63725239ff2e56136f4", "patch": "@@ -14,10 +14,13 @@ use super::{check_fn, Expectation, FnCtxt};\n \n use astconv::AstConv;\n use rustc::ty::{self, ToPolyTraitRef, Ty};\n+use rustc::util::common::MemoizationMap;\n use std::cmp;\n use syntax::abi::Abi;\n use rustc::hir;\n \n+use syntax::parse::token;\n+\n impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     pub fn check_expr_closure(&self,\n                               expr: &hir::Expr,\n@@ -48,6 +51,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                      expected_sig: Option<ty::FnSig<'tcx>>)\n                      -> Ty<'tcx> {\n         let expr_def_id = self.tcx.map.local_def_id(expr.id);\n+        let base_def_id = self.tcx.closure_base_def_id(expr_def_id);\n \n         debug!(\"check_closure opt_kind={:?} expected_sig={:?}\",\n                opt_kind,\n@@ -62,16 +66,42 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         // Create type variables (for now) to represent the transformed\n         // types of upvars. These will be unified during the upvar\n         // inference phase (`upvar.rs`).\n-        let num_upvars = self.tcx.with_freevars(expr.id, |fv| fv.len());\n+        let base_generics = self.tcx.item_generics(base_def_id);\n+        // provide junk type parameter defs - the only place that\n+        // cares about anything but the length is instantiation,\n+        // and we don't do that for closures.\n+        let upvar_decls : Vec<_> = self.tcx.with_freevars(expr.id, |fv| {\n+            fv.iter().enumerate().map(|(i, _)| ty::TypeParameterDef {\n+                index: (base_generics.count() as u32) + (i as u32),\n+                name: token::intern(\"<upvar>\"),\n+                def_id: expr_def_id,\n+                default_def_id: base_def_id,\n+                default: None,\n+                object_lifetime_default: ty::ObjectLifetimeDefault::BaseDefault,\n+                pure_wrt_drop: false,\n+            }).collect()\n+        });\n+        let num_upvars = upvar_decls.len();\n+\n+        self.tcx.generics.memoize(expr_def_id, || self.tcx.alloc_generics(ty::Generics {\n+            parent: Some(base_def_id),\n+            parent_regions: base_generics.parent_regions + (base_generics.regions.len() as u32),\n+            parent_types: base_generics.parent_types + (base_generics.types.len() as u32),\n+            regions: vec![],\n+            types: upvar_decls,\n+            has_self: false,\n+        }));\n+\n         let upvar_tys = self.next_ty_vars(num_upvars);\n \n         debug!(\"check_closure: expr.id={:?} upvar_tys={:?}\",\n                expr.id,\n                upvar_tys);\n \n-        let closure_type = self.tcx.mk_closure(expr_def_id,\n-                                               self.parameter_environment.free_substs,\n-                                               &upvar_tys);\n+        let closure_type = self.tcx.mk_closure(\n+            expr_def_id,\n+            self.parameter_environment.free_substs.extend_with_types(self.tcx, &upvar_tys)\n+        );\n \n         let fn_sig = self.tcx\n             .liberate_late_bound_regions(self.tcx.region_maps.call_site_extent(expr.id, body.id),"}, {"sha": "09e1f6592c170d08c6831092198b2a5b7ed53d0e", "filename": "src/librustc_typeck/check/dropck.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ca9b5664c3c4a052a044d63725239ff2e56136f4/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca9b5664c3c4a052a044d63725239ff2e56136f4/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs?ref=ca9b5664c3c4a052a044d63725239ff2e56136f4", "patch": "@@ -482,8 +482,14 @@ fn iterate_over_potentially_unsafe_regions_in_type<'a, 'b, 'gcx, 'tcx>(\n             Ok(())\n         }\n \n-        ty::TyTuple(tys) |\n-        ty::TyClosure(_, ty::ClosureSubsts { upvar_tys: tys, .. }) => {\n+        ty::TyClosure(def_id, substs) => {\n+            for ty in substs.upvar_tys(def_id, tcx) {\n+                iterate_over_potentially_unsafe_regions_in_type(cx, context, ty, depth+1)?\n+            }\n+            Ok(())\n+        }\n+\n+        ty::TyTuple(tys) => {\n             for ty in tys {\n                 iterate_over_potentially_unsafe_regions_in_type(cx, context, ty, depth+1)?\n             }"}, {"sha": "1ea47107c3b18cc9f88e974d5c62f29512d173a3", "filename": "src/librustc_typeck/check/upvar.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ca9b5664c3c4a052a044d63725239ff2e56136f4/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca9b5664c3c4a052a044d63725239ff2e56136f4/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs?ref=ca9b5664c3c4a052a044d63725239ff2e56136f4", "patch": "@@ -183,8 +183,8 @@ impl<'a, 'gcx, 'tcx> AdjustBorrowKind<'a, 'gcx, 'tcx> {\n         // inference algorithm will reject it).\n \n         // Extract the type variables UV0...UVn.\n-        let closure_substs = match self.fcx.node_ty(id).sty {\n-            ty::TyClosure(_, ref substs) => substs,\n+        let (def_id, closure_substs) = match self.fcx.node_ty(id).sty {\n+            ty::TyClosure(def_id, substs) => (def_id, substs),\n             ref t => {\n                 span_bug!(\n                     span,\n@@ -197,7 +197,9 @@ impl<'a, 'gcx, 'tcx> AdjustBorrowKind<'a, 'gcx, 'tcx> {\n         let final_upvar_tys = self.final_upvar_tys(id);\n         debug!(\"analyze_closure: id={:?} closure_substs={:?} final_upvar_tys={:?}\",\n                id, closure_substs, final_upvar_tys);\n-        for (&upvar_ty, final_upvar_ty) in closure_substs.upvar_tys.iter().zip(final_upvar_tys) {\n+        for (upvar_ty, final_upvar_ty) in\n+            closure_substs.upvar_tys(def_id, self.fcx.tcx).zip(final_upvar_tys)\n+        {\n             self.fcx.demand_eqtype(span, final_upvar_ty, upvar_ty);\n         }\n "}]}