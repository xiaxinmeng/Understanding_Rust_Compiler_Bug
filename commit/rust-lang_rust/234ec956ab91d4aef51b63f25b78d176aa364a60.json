{"sha": "234ec956ab91d4aef51b63f25b78d176aa364a60", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzNGVjOTU2YWI5MWQ0YWVmNTFiNjNmMjViNzhkMTc2YWEzNjRhNjA=", "commit": {"author": {"name": "Wim Looman", "email": "git@nemo157.com", "date": "2020-08-09T12:01:19Z"}, "committer": {"name": "Wim Looman", "email": "git@nemo157.com", "date": "2020-08-09T12:20:11Z"}, "message": "Render longhand multiple crate/target features nicer", "tree": {"sha": "63b1d2d298ccb0cd2f70a37453fdded15eef2436", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/63b1d2d298ccb0cd2f70a37453fdded15eef2436"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/234ec956ab91d4aef51b63f25b78d176aa364a60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/234ec956ab91d4aef51b63f25b78d176aa364a60", "html_url": "https://github.com/rust-lang/rust/commit/234ec956ab91d4aef51b63f25b78d176aa364a60", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/234ec956ab91d4aef51b63f25b78d176aa364a60/comments", "author": {"login": "Nemo157", "id": 81079, "node_id": "MDQ6VXNlcjgxMDc5", "avatar_url": "https://avatars.githubusercontent.com/u/81079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nemo157", "html_url": "https://github.com/Nemo157", "followers_url": "https://api.github.com/users/Nemo157/followers", "following_url": "https://api.github.com/users/Nemo157/following{/other_user}", "gists_url": "https://api.github.com/users/Nemo157/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nemo157/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nemo157/subscriptions", "organizations_url": "https://api.github.com/users/Nemo157/orgs", "repos_url": "https://api.github.com/users/Nemo157/repos", "events_url": "https://api.github.com/users/Nemo157/events{/privacy}", "received_events_url": "https://api.github.com/users/Nemo157/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nemo157", "id": 81079, "node_id": "MDQ6VXNlcjgxMDc5", "avatar_url": "https://avatars.githubusercontent.com/u/81079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nemo157", "html_url": "https://github.com/Nemo157", "followers_url": "https://api.github.com/users/Nemo157/followers", "following_url": "https://api.github.com/users/Nemo157/following{/other_user}", "gists_url": "https://api.github.com/users/Nemo157/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nemo157/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nemo157/subscriptions", "organizations_url": "https://api.github.com/users/Nemo157/orgs", "repos_url": "https://api.github.com/users/Nemo157/repos", "events_url": "https://api.github.com/users/Nemo157/events{/privacy}", "received_events_url": "https://api.github.com/users/Nemo157/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8de713e26cb0f8e8ae4a7ecb0bf8a413b539926", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8de713e26cb0f8e8ae4a7ecb0bf8a413b539926", "html_url": "https://github.com/rust-lang/rust/commit/a8de713e26cb0f8e8ae4a7ecb0bf8a413b539926"}], "stats": {"total": 55, "additions": 51, "deletions": 4}, "files": [{"sha": "3741d517f6afd3d09a77401bbfc21e132a8854b3", "filename": "src/librustdoc/clean/cfg.rs", "status": "modified", "additions": 49, "deletions": 2, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/234ec956ab91d4aef51b63f25b78d176aa364a60/src%2Flibrustdoc%2Fclean%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/234ec956ab91d4aef51b63f25b78d176aa364a60/src%2Flibrustdoc%2Fclean%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fcfg.rs?ref=234ec956ab91d4aef51b63f25b78d176aa364a60", "patch": "@@ -324,21 +324,68 @@ impl<'a> fmt::Display for Html<'a> {\n \n             Cfg::Any(ref sub_cfgs) => {\n                 let separator = if sub_cfgs.iter().all(Cfg::is_simple) { \" or \" } else { \", or \" };\n+\n+                let short_longhand = !self.1 && {\n+                    let all_crate_features = sub_cfgs\n+                        .iter()\n+                        .all(|sub_cfg| matches!(sub_cfg, Cfg::Cfg(sym::feature, Some(_))));\n+                    let all_target_features = sub_cfgs\n+                        .iter()\n+                        .all(|sub_cfg| matches!(sub_cfg, Cfg::Cfg(sym::target_feature, Some(_))));\n+\n+                    if all_crate_features {\n+                        fmt.write_str(\"crate features \")?;\n+                        true\n+                    } else if all_target_features {\n+                        fmt.write_str(\"target features \")?;\n+                        true\n+                    } else {\n+                        false\n+                    }\n+                };\n+\n                 for (i, sub_cfg) in sub_cfgs.iter().enumerate() {\n                     if i != 0 {\n                         fmt.write_str(separator)?;\n                     }\n-                    write_with_opt_paren(fmt, !sub_cfg.is_all(), Html(sub_cfg, self.1))?;\n+                    if let (true, Cfg::Cfg(_, Some(feat))) = (short_longhand, sub_cfg) {\n+                        write!(fmt, \"<code>{}</code>\", feat)?;\n+                    } else {\n+                        write_with_opt_paren(fmt, !sub_cfg.is_all(), Html(sub_cfg, self.1))?;\n+                    }\n                 }\n                 Ok(())\n             }\n \n             Cfg::All(ref sub_cfgs) => {\n+                let short_longhand = !self.1 && {\n+                    let all_crate_features = sub_cfgs\n+                        .iter()\n+                        .all(|sub_cfg| matches!(sub_cfg, Cfg::Cfg(sym::feature, Some(_))));\n+                    let all_target_features = sub_cfgs\n+                        .iter()\n+                        .all(|sub_cfg| matches!(sub_cfg, Cfg::Cfg(sym::target_feature, Some(_))));\n+\n+                    if all_crate_features {\n+                        fmt.write_str(\"crate features \")?;\n+                        true\n+                    } else if all_target_features {\n+                        fmt.write_str(\"target features \")?;\n+                        true\n+                    } else {\n+                        false\n+                    }\n+                };\n+\n                 for (i, sub_cfg) in sub_cfgs.iter().enumerate() {\n                     if i != 0 {\n                         fmt.write_str(\" and \")?;\n                     }\n-                    write_with_opt_paren(fmt, !sub_cfg.is_simple(), Html(sub_cfg, self.1))?;\n+                    if let (true, Cfg::Cfg(_, Some(feat))) = (short_longhand, sub_cfg) {\n+                        write!(fmt, \"<code>{}</code>\", feat)?;\n+                    } else {\n+                        write_with_opt_paren(fmt, !sub_cfg.is_simple(), Html(sub_cfg, self.1))?;\n+                    }\n                 }\n                 Ok(())\n             }"}, {"sha": "99d02bc288c4ae2ff0756821ba87141239bcee6e", "filename": "src/test/rustdoc/duplicate-cfg.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/234ec956ab91d4aef51b63f25b78d176aa364a60/src%2Ftest%2Frustdoc%2Fduplicate-cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/234ec956ab91d4aef51b63f25b78d176aa364a60/src%2Ftest%2Frustdoc%2Fduplicate-cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fduplicate-cfg.rs?ref=234ec956ab91d4aef51b63f25b78d176aa364a60", "patch": "@@ -18,15 +18,15 @@ pub mod bar {\n }\n \n // @has 'foo/baz/struct.Baz.html'\n-// @has '-' '//*[@class=\"stab portability\"]' 'This is supported on crate feature sync and crate feature send only.'\n+// @has '-' '//*[@class=\"stab portability\"]' 'This is supported on crate features sync and send only.'\n #[doc(cfg(all(feature = \"sync\", feature = \"send\")))]\n pub mod baz {\n     #[doc(cfg(feature = \"sync\"))]\n     pub struct Baz;\n }\n \n // @has 'foo/qux/struct.Qux.html'\n-// @has '-' '//*[@class=\"stab portability\"]' 'This is supported on crate feature sync and crate feature send only.'\n+// @has '-' '//*[@class=\"stab portability\"]' 'This is supported on crate features sync and send only.'\n #[doc(cfg(feature = \"sync\"))]\n pub mod qux {\n     #[doc(cfg(all(feature = \"sync\", feature = \"send\")))]"}]}