{"sha": "d42a3fbd69e5051c803d37d47fc91f41deacf069", "node_id": "C_kwDOAAsO6NoAKGQ0MmEzZmJkNjllNTA1MWM4MDNkMzdkNDdmYzkxZjQxZGVhY2YwNjk", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-02-17T17:16:43Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-02-18T20:36:39Z"}, "message": "Assume we can normalize trait default method RPITITs in param-env instead", "tree": {"sha": "ee635cc8e5d2264313c7e5f13426ea0245fd5ca8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee635cc8e5d2264313c7e5f13426ea0245fd5ca8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d42a3fbd69e5051c803d37d47fc91f41deacf069", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d42a3fbd69e5051c803d37d47fc91f41deacf069", "html_url": "https://github.com/rust-lang/rust/commit/d42a3fbd69e5051c803d37d47fc91f41deacf069", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d42a3fbd69e5051c803d37d47fc91f41deacf069/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be55ad53a1da73203e73ad3ff8ef0bad6c955e6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/be55ad53a1da73203e73ad3ff8ef0bad6c955e6c", "html_url": "https://github.com/rust-lang/rust/commit/be55ad53a1da73203e73ad3ff8ef0bad6c955e6c"}], "stats": {"total": 85, "additions": 81, "deletions": 4}, "files": [{"sha": "5743f086f89b4b31adc3e108c7ff9ea00f1bffee", "filename": "compiler/rustc_hir_analysis/src/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d42a3fbd69e5051c803d37d47fc91f41deacf069/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d42a3fbd69e5051c803d37d47fc91f41deacf069/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=d42a3fbd69e5051c803d37d47fc91f41deacf069", "patch": "@@ -1599,7 +1599,7 @@ fn check_return_position_impl_trait_in_trait_bounds<'tcx>(\n     {\n         for arg in fn_output.walk() {\n             if let ty::GenericArgKind::Type(ty) = arg.unpack()\n-                && let ty::Alias(ty::Projection, proj) = ty.kind()\n+                && let ty::Alias(ty::Opaque, proj) = ty.kind()\n                 && tcx.def_kind(proj.def_id) == DefKind::ImplTraitPlaceholder\n                 && tcx.impl_trait_in_trait_parent(proj.def_id) == fn_def_id.to_def_id()\n             {"}, {"sha": "ca46cf29919f850b1d5f6997ef809df1646f03c6", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d42a3fbd69e5051c803d37d47fc91f41deacf069/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d42a3fbd69e5051c803d37d47fc91f41deacf069/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=d42a3fbd69e5051c803d37d47fc91f41deacf069", "patch": "@@ -4,7 +4,7 @@ use crate::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use crate::mir;\n use crate::ty::layout::IntegerExt;\n use crate::ty::{\n-    self, ir::TypeFolder, DefIdTree, FallibleTypeFolder, Ty, TyCtxt, TypeFoldable,\n+    self, ir::TypeFolder, DefIdTree, FallibleTypeFolder, ToPredicate, Ty, TyCtxt, TypeFoldable,\n     TypeSuperFoldable,\n };\n use crate::ty::{GenericArgKind, SubstsRef};\n@@ -865,6 +865,26 @@ impl<'tcx> TypeFolder<TyCtxt<'tcx>> for OpaqueTypeExpander<'tcx> {\n         }\n         t\n     }\n+\n+    fn fold_predicate(&mut self, p: ty::Predicate<'tcx>) -> ty::Predicate<'tcx> {\n+        if let ty::PredicateKind::Clause(clause) = p.kind().skip_binder()\n+            && let ty::Clause::Projection(projection_pred) = clause\n+        {\n+            p.kind()\n+                .rebind(ty::ProjectionPredicate {\n+                    projection_ty: projection_pred.projection_ty.fold_with(self),\n+                    // Don't fold the term on the RHS of the projection predicate.\n+                    // This is because for default trait methods with RPITITs, we\n+                    // install a `NormalizesTo(Projection(RPITIT) -> Opaque(RPITIT))`\n+                    // predicate, which would trivially cause a cycle when we do\n+                    // anything that requires `ParamEnv::with_reveal_all_normalized`.\n+                    term: projection_pred.term,\n+                })\n+                .to_predicate(self.tcx)\n+        } else {\n+            p.super_fold_with(self)\n+        }\n+    }\n }\n \n impl<'tcx> Ty<'tcx> {"}, {"sha": "f1af0073e4da95564b15b22585c0d63a45ec0d38", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 59, "deletions": 2, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/d42a3fbd69e5051c803d37d47fc91f41deacf069/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d42a3fbd69e5051c803d37d47fc91f41deacf069/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=d42a3fbd69e5051c803d37d47fc91f41deacf069", "patch": "@@ -1,8 +1,12 @@\n-use rustc_data_structures::fx::FxIndexSet;\n+use rustc_data_structures::fx::{FxHashSet, FxIndexSet};\n use rustc_hir as hir;\n+use rustc_hir::def::DefKind;\n use rustc_index::bit_set::BitSet;\n+#[cfg(not(bootstrap))]\n+use rustc_middle::ty::ir::TypeVisitable;\n use rustc_middle::ty::{\n-    self, Binder, EarlyBinder, Predicate, PredicateKind, ToPredicate, Ty, TyCtxt,\n+    self, ir::TypeVisitor, Binder, EarlyBinder, Predicate, PredicateKind, ToPredicate, Ty, TyCtxt,\n+    TypeSuperVisitable,\n };\n use rustc_session::config::TraitSolver;\n use rustc_span::def_id::{DefId, CRATE_DEF_ID};\n@@ -136,6 +140,19 @@ fn param_env(tcx: TyCtxt<'_>, def_id: DefId) -> ty::ParamEnv<'_> {\n         predicates.extend(environment);\n     }\n \n+    if tcx.def_kind(def_id) == DefKind::AssocFn\n+        && tcx.associated_item(def_id).container == ty::AssocItemContainer::TraitContainer\n+    {\n+        let sig = tcx.fn_sig(def_id).subst_identity();\n+        sig.visit_with(&mut ImplTraitInTraitFinder {\n+            tcx,\n+            fn_def_id: def_id,\n+            bound_vars: sig.bound_vars(),\n+            predicates: &mut predicates,\n+            seen: FxHashSet::default(),\n+        });\n+    }\n+\n     let local_did = def_id.as_local();\n     let hir_id = local_did.map(|def_id| tcx.hir().local_def_id_to_hir_id(def_id));\n \n@@ -222,6 +239,46 @@ fn param_env(tcx: TyCtxt<'_>, def_id: DefId) -> ty::ParamEnv<'_> {\n     traits::normalize_param_env_or_error(tcx, unnormalized_env, cause)\n }\n \n+/// Walk through a function type, gathering all RPITITs and installing a\n+/// `NormalizesTo(Projection(RPITIT) -> Opaque(RPITIT))` predicate into the\n+/// predicates list. This allows us to observe that an RPITIT projects to\n+/// its corresponding opaque within the body of a default-body trait method.\n+struct ImplTraitInTraitFinder<'a, 'tcx> {\n+    tcx: TyCtxt<'tcx>,\n+    predicates: &'a mut Vec<Predicate<'tcx>>,\n+    fn_def_id: DefId,\n+    bound_vars: &'tcx ty::List<ty::BoundVariableKind>,\n+    seen: FxHashSet<DefId>,\n+}\n+\n+impl<'tcx> TypeVisitor<TyCtxt<'tcx>> for ImplTraitInTraitFinder<'_, 'tcx> {\n+    fn visit_ty(&mut self, ty: Ty<'tcx>) -> std::ops::ControlFlow<Self::BreakTy> {\n+        if let ty::Alias(ty::Projection, alias_ty) = *ty.kind()\n+            && self.tcx.def_kind(alias_ty.def_id) == DefKind::ImplTraitPlaceholder\n+            && self.tcx.impl_trait_in_trait_parent(alias_ty.def_id) == self.fn_def_id\n+            && self.seen.insert(alias_ty.def_id)\n+        {\n+            self.predicates.push(\n+                ty::Binder::bind_with_vars(\n+                    ty::ProjectionPredicate {\n+                        projection_ty: alias_ty,\n+                        term: self.tcx.mk_alias(ty::Opaque, alias_ty).into(),\n+                    },\n+                    self.bound_vars,\n+                )\n+                .to_predicate(self.tcx),\n+            );\n+\n+            for bound in self.tcx.item_bounds(alias_ty.def_id).subst_iter(self.tcx, alias_ty.substs)\n+            {\n+                bound.visit_with(self);\n+            }\n+        }\n+\n+        ty.super_visit_with(self)\n+    }\n+}\n+\n /// Elaborate the environment.\n ///\n /// Collect a list of `Predicate`'s used for building the `ParamEnv`. Adds `TypeWellFormedFromEnv`'s"}]}