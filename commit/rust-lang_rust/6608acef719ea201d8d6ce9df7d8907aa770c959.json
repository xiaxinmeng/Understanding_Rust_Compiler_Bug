{"sha": "6608acef719ea201d8d6ce9df7d8907aa770c959", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2MDhhY2VmNzE5ZWEyMDFkOGQ2Y2U5ZGY3ZDg5MDdhYTc3MGM5NTk=", "commit": {"author": {"name": "Jay Somedon", "email": "jay.somedon@outlook.com", "date": "2020-12-11T14:14:42Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2021-03-04T01:05:23Z"}, "message": "Read version of rustc that compiled proc macro\n\nWith Jay Somedon <jay.somedon@outlook.com>", "tree": {"sha": "77492b99ecc7dc57b34b4d2a9e4a9fd7f8a908d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77492b99ecc7dc57b34b4d2a9e4a9fd7f8a908d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6608acef719ea201d8d6ce9df7d8907aa770c959", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6608acef719ea201d8d6ce9df7d8907aa770c959", "html_url": "https://github.com/rust-lang/rust/commit/6608acef719ea201d8d6ce9df7d8907aa770c959", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6608acef719ea201d8d6ce9df7d8907aa770c959/comments", "author": {"login": "jsomedon", "id": 2172297, "node_id": "MDQ6VXNlcjIxNzIyOTc=", "avatar_url": "https://avatars.githubusercontent.com/u/2172297?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsomedon", "html_url": "https://github.com/jsomedon", "followers_url": "https://api.github.com/users/jsomedon/followers", "following_url": "https://api.github.com/users/jsomedon/following{/other_user}", "gists_url": "https://api.github.com/users/jsomedon/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsomedon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsomedon/subscriptions", "organizations_url": "https://api.github.com/users/jsomedon/orgs", "repos_url": "https://api.github.com/users/jsomedon/repos", "events_url": "https://api.github.com/users/jsomedon/events{/privacy}", "received_events_url": "https://api.github.com/users/jsomedon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7275750e42103b5877faeb0fcaff30c9f8a92ea1", "url": "https://api.github.com/repos/rust-lang/rust/commits/7275750e42103b5877faeb0fcaff30c9f8a92ea1", "html_url": "https://github.com/rust-lang/rust/commit/7275750e42103b5877faeb0fcaff30c9f8a92ea1"}], "stats": {"total": 112, "additions": 100, "deletions": 12}, "files": [{"sha": "b61fd2e9812146ed941254535675140a505158cb", "filename": "Cargo.lock", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/6608acef719ea201d8d6ce9df7d8907aa770c959/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/6608acef719ea201d8d6ce9df7d8907aa770c959/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=6608acef719ea201d8d6ce9df7d8907aa770c959", "patch": "@@ -80,7 +80,7 @@ dependencies = [\n  \"cfg-if\",\n  \"libc\",\n  \"miniz_oxide\",\n- \"object\",\n+ \"object 0.23.0\",\n  \"rustc-demangle\",\n ]\n \n@@ -1008,6 +1008,16 @@ dependencies = [\n  \"libc\",\n ]\n \n+[[package]]\n+name = \"object\"\n+version = \"0.22.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"8d3b63360ec3cb337817c2dbd47ab4a0f170d285d8e5a2064600f3def1402397\"\n+dependencies = [\n+ \"flate2\",\n+ \"wasmparser\",\n+]\n+\n [[package]]\n name = \"object\"\n version = \"0.23.0\"\n@@ -1154,8 +1164,10 @@ dependencies = [\n  \"crossbeam-channel\",\n  \"jod-thread\",\n  \"log\",\n+ \"object 0.22.0\",\n  \"serde\",\n  \"serde_json\",\n+ \"snap\",\n  \"stdx\",\n  \"tt\",\n ]\n@@ -1168,7 +1180,7 @@ dependencies = [\n  \"libloading\",\n  \"mbe\",\n  \"memmap2\",\n- \"object\",\n+ \"object 0.23.0\",\n  \"proc_macro_api\",\n  \"proc_macro_test\",\n  \"serde_derive\",\n@@ -1540,6 +1552,12 @@ dependencies = [\n  \"serde\",\n ]\n \n+[[package]]\n+name = \"snap\"\n+version = \"1.0.4\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"dc725476a1398f0480d56cd0ad381f6f32acf2642704456f8f59a35df464b59a\"\n+\n [[package]]\n name = \"socket2\"\n version = \"0.3.19\"\n@@ -1880,6 +1898,12 @@ dependencies = [\n  \"winapi-util\",\n ]\n \n+[[package]]\n+name = \"wasmparser\"\n+version = \"0.57.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"32fddd575d477c6e9702484139cf9f23dcd554b06d185ed0f56c857dd3a47aa6\"\n+\n [[package]]\n name = \"winapi\"\n version = \"0.3.9\""}, {"sha": "a72ae236af9f0b8893c265386e6ff421c2331495", "filename": "crates/proc_macro_api/Cargo.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6608acef719ea201d8d6ce9df7d8907aa770c959/crates%2Fproc_macro_api%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/6608acef719ea201d8d6ce9df7d8907aa770c959/crates%2Fproc_macro_api%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_api%2FCargo.toml?ref=6608acef719ea201d8d6ce9df7d8907aa770c959", "patch": "@@ -19,3 +19,5 @@ jod-thread = \"0.1.1\"\n tt = { path = \"../tt\", version = \"0.0.0\" }\n base_db = { path = \"../base_db\", version = \"0.0.0\" }\n stdx = { path = \"../stdx\", version = \"0.0.0\" }\n+snap = \"1\"\n+object = \"0.22.0\""}, {"sha": "cec85474670cc0aaab1b226cd7f461f46877f34c", "filename": "crates/proc_macro_api/src/lib.rs", "status": "modified", "additions": 72, "deletions": 10, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/6608acef719ea201d8d6ce9df7d8907aa770c959/crates%2Fproc_macro_api%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6608acef719ea201d8d6ce9df7d8907aa770c959/crates%2Fproc_macro_api%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_api%2Fsrc%2Flib.rs?ref=6608acef719ea201d8d6ce9df7d8907aa770c959", "patch": "@@ -5,16 +5,11 @@\n //! is used to provide basic infrastructure for communication between two\n //! processes: Client (RA itself), Server (the external program)\n \n-mod rpc;\n-mod process;\n pub mod msg;\n+mod process;\n+mod rpc;\n \n-use std::{\n-    ffi::OsStr,\n-    io,\n-    path::{Path, PathBuf},\n-    sync::Arc,\n-};\n+use std::{ffi::OsStr, fs::read as fsread, io::{self, Read}, path::{Path, PathBuf}, sync::Arc};\n \n use base_db::{Env, ProcMacro};\n use tt::{SmolStr, Subtree};\n@@ -23,6 +18,9 @@ use crate::process::{ProcMacroProcessSrv, ProcMacroProcessThread};\n \n pub use rpc::{ExpansionResult, ExpansionTask, ListMacrosResult, ListMacrosTask, ProcMacroKind};\n \n+use object::read::{File as BinaryFile, Object, ObjectSection};\n+use snap::read::FrameDecoder as SnapDecoder;\n+\n #[derive(Debug, Clone)]\n struct ProcMacroProcessExpander {\n     process: Arc<ProcMacroProcessSrv>,\n@@ -71,7 +69,10 @@ impl ProcMacroClient {\n         args: impl IntoIterator<Item = impl AsRef<OsStr>>,\n     ) -> io::Result<ProcMacroClient> {\n         let (thread, process) = ProcMacroProcessSrv::run(process_path, args)?;\n-        Ok(ProcMacroClient { process: Arc::new(process), thread })\n+        Ok(ProcMacroClient {\n+            process: Arc::new(process),\n+            thread,\n+        })\n     }\n \n     pub fn by_dylib_path(&self, dylib_path: &Path) -> Vec<ProcMacro> {\n@@ -98,8 +99,69 @@ impl ProcMacroClient {\n                     dylib_path: dylib_path.into(),\n                 });\n \n-                ProcMacro { name, kind, expander }\n+                ProcMacro {\n+                    name,\n+                    kind,\n+                    expander,\n+                }\n             })\n             .collect()\n     }\n+\n+    // This is used inside self.read_version() to locate the \".rustc\" section\n+    // from a proc macro crate's binary file.\n+    fn read_section<'a>(&self, dylib_binary: &'a [u8], section_name: &str) -> &'a [u8] {\n+        BinaryFile::parse(dylib_binary)\n+            .unwrap()\n+            .section_by_name(section_name)\n+            .unwrap()\n+            .data()\n+            .unwrap()\n+    }\n+\n+    // Check the version of rustc that was used to compile a proc macro crate's\n+    // binary file.\n+    // A proc macro crate binary's \".rustc\" section has following byte layout:\n+    // * [b'r',b'u',b's',b't',0,0,0,5] is the first 8 bytes\n+    // * ff060000 734e6150 is followed, it's the snappy format magic bytes,\n+    //   means bytes from here(including this sequence) are compressed in\n+    //   snappy compression format. Version info is here inside, so decompress\n+    //   this.\n+    // The bytes you get after decompressing the snappy format portion has\n+    // following layout:\n+    // * [b'r',b'u',b's',b't',0,0,0,5] is the first 8 bytes(again)\n+    // * [crate root bytes] next 4 bytes is to store crate root position,\n+    //   according to rustc's source code comment\n+    // * [length byte] next 1 byte tells us how many bytes we should read next\n+    //   for the version string's utf8 bytes\n+    // * [version string bytes encoded in utf8] <- GET THIS BOI\n+    // * [some more bytes that we don really care but still there] :-)\n+    // Check this issue for more about the bytes layout:\n+    // https://github.com/rust-analyzer/rust-analyzer/issues/6174\n+    fn read_version(&self, dylib_path: &Path) -> String {\n+        let dylib_binary = fsread(dylib_path).unwrap();\n+\n+        let dot_rustc = self.read_section(&dylib_binary, \".rustc\");\n+\n+        let snappy_portion = &dot_rustc[8..];\n+\n+        let mut snappy_decoder = SnapDecoder::new(snappy_portion);\n+\n+        // the bytes before version string bytes, so this basically is:\n+        // 8 bytes for [b'r',b'u',b's',b't',0,0,0,5]\n+        // 4 bytes for [crate root bytes]\n+        // 1 byte for length of version string\n+        // so 13 bytes in total, and we should check the 13th byte\n+        // to know the length\n+        let mut bytes_before_version = [0u8; 13];\n+        snappy_decoder\n+            .read_exact(&mut bytes_before_version)\n+            .unwrap();\n+        let length = bytes_before_version[12]; // what? can't use -1 indexing?\n+\n+        let mut version_string_utf8 = vec![0u8; length as usize];\n+        snappy_decoder.read_exact(&mut version_string_utf8).unwrap();\n+        let version_string = String::from_utf8(version_string_utf8).unwrap();\n+        version_string\n+    }\n }"}]}