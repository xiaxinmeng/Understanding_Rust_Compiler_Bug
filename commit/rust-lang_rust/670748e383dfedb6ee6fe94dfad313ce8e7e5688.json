{"sha": "670748e383dfedb6ee6fe94dfad313ce8e7e5688", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3MDc0OGUzODNkZmVkYjZlZTZmZTk0ZGZhZDMxM2NlOGU3ZTU2ODg=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-01-15T13:55:13Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2013-01-18T00:54:11Z"}, "message": "implement set difference", "tree": {"sha": "11619b98f796d0579a351b94adf6b6bbd74669ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11619b98f796d0579a351b94adf6b6bbd74669ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/670748e383dfedb6ee6fe94dfad313ce8e7e5688", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/670748e383dfedb6ee6fe94dfad313ce8e7e5688", "html_url": "https://github.com/rust-lang/rust/commit/670748e383dfedb6ee6fe94dfad313ce8e7e5688", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/670748e383dfedb6ee6fe94dfad313ce8e7e5688/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b3ecc9ffccb4fb8dd36d39339432c36e6f68fd1", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b3ecc9ffccb4fb8dd36d39339432c36e6f68fd1", "html_url": "https://github.com/rust-lang/rust/commit/3b3ecc9ffccb4fb8dd36d39339432c36e6f68fd1"}], "stats": {"total": 64, "additions": 57, "deletions": 7}, "files": [{"sha": "fe3fe9888a31a3420a9c17c8dff98a0eb512d5a3", "filename": "src/libstd/treemap.rs", "status": "modified", "additions": 57, "deletions": 7, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/670748e383dfedb6ee6fe94dfad313ce8e7e5688/src%2Flibstd%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/670748e383dfedb6ee6fe94dfad313ce8e7e5688/src%2Flibstd%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftreemap.rs?ref=670748e383dfedb6ee6fe94dfad313ce8e7e5688", "patch": "@@ -243,20 +243,46 @@ impl <T: Ord> TreeSet<T> {\n     }\n \n     /// Visit the values (in-order) representing the difference\n-    pure fn difference(&self, _other: &TreeSet<T>,\n-                       _f: fn(&T) -> bool) {\n-        fail ~\"not yet implemented\" // TODO\n+    pure fn difference(&self, other: &TreeSet<T>, f: fn(&T) -> bool) {\n+        unsafe { // purity workaround\n+            let mut x = self.map.iter();\n+            let mut y = other.map.iter();\n+\n+            let mut a = x.next();\n+            let mut b = y.next();\n+\n+            while a.is_some() {\n+                if b.is_none() {\n+                    while a.is_some() {\n+                        let (a1, _) = a.unwrap();\n+                        if !f(a1) { return }\n+                        a = x.next();\n+                    }\n+                    return\n+                }\n+\n+                let (a1, _) = a.unwrap();\n+                let (b1, _) = b.unwrap();\n+\n+                if a1 < b1 {\n+                    if !f(a1) { return }\n+                    a = x.next();\n+                } else {\n+                    if !(b1 < a1) { a = x.next() }\n+                    b = y.next();\n+                }\n+            }\n+        }\n     }\n \n     /// Visit the values (in-order) representing the symmetric difference\n     pure fn symmetric_difference(&self, _other: &TreeSet<T>,\n                                  _f: fn(&T) -> bool) {\n-        fail ~\"not yet implemented\" // TODO\n+        fail ~\"not yet implemented\"\n     }\n \n     /// Visit the values (in-order) representing the intersection\n-    pure fn intersection(&self, other: &TreeSet<T>,\n-                         f: fn(&T) -> bool) {\n+    pure fn intersection(&self, other: &TreeSet<T>, f: fn(&T) -> bool) {\n         // FIXME: this is a naive O(n*log(m)) implementation, could be O(n)\n         for self.each |x| {\n             if other.contains(x) {\n@@ -267,7 +293,7 @@ impl <T: Ord> TreeSet<T> {\n \n     /// Visit the values (in-order) representing the union\n     pure fn union(&self, _other: &TreeSet<T>, _f: fn(&T) -> bool) {\n-        fail ~\"not yet implemented\" // TODO\n+        fail ~\"not yet implemented\"\n     }\n }\n \n@@ -806,4 +832,28 @@ mod test_set {\n         }\n         assert i == expected.len();\n     }\n+\n+    #[test]\n+    fn test_difference() {\n+        let mut a = TreeSet::new();\n+        let mut b = TreeSet::new();\n+\n+        a.insert(1);\n+        a.insert(3);\n+        a.insert(5);\n+        a.insert(9);\n+        a.insert(11);\n+\n+        b.insert(3);\n+        b.insert(9);\n+\n+        let mut i = 0;\n+        let expected = [1, 5, 11];\n+        for a.difference(&b) |x| {\n+            io::println(fmt!(\"%?\", x));\n+            assert *x == expected[i];\n+            i += 1\n+        }\n+        assert i == expected.len();\n+    }\n }"}]}