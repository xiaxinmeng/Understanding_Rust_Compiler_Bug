{"sha": "67087a1b4ee06ce42fd8abe5825f9af96a41e83d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3MDg3YTFiNGVlMDZjZTQyZmQ4YWJlNTgyNWY5YWY5NmE0MWU4M2Q=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-20T09:33:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-20T09:33:11Z"}, "message": "Auto merge of #6717 - booleancoercion:master, r=llogiq\n\nAdd the from_str_radix_10 lint\n\nchangelog: added the new `from_str_radix_10` which sometimes replaces calls to `primitive::from_str_radix` to `str::parse`\n\nThis is ready to be merged, although maybe the category should be `pedantic` instead of `style`? I'm not sure where it fits better.\n\nCloses #6713.", "tree": {"sha": "cf97650cae8a2258c8a4d2fe70618d65ca2b3a5f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf97650cae8a2258c8a4d2fe70618d65ca2b3a5f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/67087a1b4ee06ce42fd8abe5825f9af96a41e83d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/67087a1b4ee06ce42fd8abe5825f9af96a41e83d", "html_url": "https://github.com/rust-lang/rust/commit/67087a1b4ee06ce42fd8abe5825f9af96a41e83d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/67087a1b4ee06ce42fd8abe5825f9af96a41e83d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27466329171403231b0a263a52575a5e793f38e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/27466329171403231b0a263a52575a5e793f38e5", "html_url": "https://github.com/rust-lang/rust/commit/27466329171403231b0a263a52575a5e793f38e5"}, {"sha": "c4b8d87ab96cb6ef44685d928adeb9915b06f71f", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4b8d87ab96cb6ef44685d928adeb9915b06f71f", "html_url": "https://github.com/rust-lang/rust/commit/c4b8d87ab96cb6ef44685d928adeb9915b06f71f"}], "stats": {"total": 211, "additions": 211, "deletions": 0}, "files": [{"sha": "2ec8b3d98f835d580fa214e3fef9c43bcef82005", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/67087a1b4ee06ce42fd8abe5825f9af96a41e83d/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/67087a1b4ee06ce42fd8abe5825f9af96a41e83d/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=67087a1b4ee06ce42fd8abe5825f9af96a41e83d", "patch": "@@ -2093,6 +2093,7 @@ Released 2018-09-13\n [`forget_ref`]: https://rust-lang.github.io/rust-clippy/master/index.html#forget_ref\n [`from_iter_instead_of_collect`]: https://rust-lang.github.io/rust-clippy/master/index.html#from_iter_instead_of_collect\n [`from_over_into`]: https://rust-lang.github.io/rust-clippy/master/index.html#from_over_into\n+[`from_str_radix_10`]: https://rust-lang.github.io/rust-clippy/master/index.html#from_str_radix_10\n [`future_not_send`]: https://rust-lang.github.io/rust-clippy/master/index.html#future_not_send\n [`get_last_with_len`]: https://rust-lang.github.io/rust-clippy/master/index.html#get_last_with_len\n [`get_unwrap`]: https://rust-lang.github.io/rust-clippy/master/index.html#get_unwrap"}, {"sha": "0933f9830147c4f3d13f8757469d5df7cac80b17", "filename": "clippy_lints/src/from_str_radix_10.rs", "status": "added", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/67087a1b4ee06ce42fd8abe5825f9af96a41e83d/clippy_lints%2Fsrc%2Ffrom_str_radix_10.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67087a1b4ee06ce42fd8abe5825f9af96a41e83d/clippy_lints%2Fsrc%2Ffrom_str_radix_10.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffrom_str_radix_10.rs?ref=67087a1b4ee06ce42fd8abe5825f9af96a41e83d", "patch": "@@ -0,0 +1,101 @@\n+use if_chain::if_chain;\n+use rustc_errors::Applicability;\n+use rustc_hir::{def, Expr, ExprKind, PrimTy, QPath, TyKind};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::ty::Ty;\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::symbol::sym;\n+\n+use crate::utils::is_type_diagnostic_item;\n+use crate::utils::span_lint_and_sugg;\n+use crate::utils::sugg::Sugg;\n+\n+declare_clippy_lint! {\n+    /// **What it does:**\n+    /// Checks for function invocations of the form `primitive::from_str_radix(s, 10)`\n+    ///\n+    /// **Why is this bad?**\n+    /// This specific common use case can be rewritten as `s.parse::<primitive>()`\n+    /// (and in most cases, the turbofish can be removed), which reduces code length\n+    /// and complexity.\n+    ///\n+    /// **Known problems:**\n+    /// This lint may suggest using (&<expression>).parse() instead of <expression>.parse() directly\n+    /// in some cases, which is correct but adds unnecessary complexity to the code.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```ignore\n+    /// let input: &str = get_input();\n+    /// let num = u16::from_str_radix(input, 10)?;\n+    /// ```\n+    /// Use instead:\n+    /// ```ignore\n+    /// let input: &str = get_input();\n+    /// let num: u16 = input.parse()?;\n+    /// ```\n+    pub FROM_STR_RADIX_10,\n+    style,\n+    \"from_str_radix with radix 10\"\n+}\n+\n+declare_lint_pass!(FromStrRadix10 => [FROM_STR_RADIX_10]);\n+\n+impl LateLintPass<'tcx> for FromStrRadix10 {\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, exp: &Expr<'tcx>) {\n+        if_chain! {\n+            if let ExprKind::Call(maybe_path, arguments) = &exp.kind;\n+            if let ExprKind::Path(QPath::TypeRelative(ty, pathseg)) = &maybe_path.kind;\n+\n+            // check if the first part of the path is some integer primitive\n+            if let TyKind::Path(ty_qpath) = &ty.kind;\n+            let ty_res = cx.qpath_res(ty_qpath, ty.hir_id);\n+            if let def::Res::PrimTy(prim_ty) = ty_res;\n+            if matches!(prim_ty, PrimTy::Int(_) | PrimTy::Uint(_));\n+\n+            // check if the second part of the path indeed calls the associated\n+            // function `from_str_radix`\n+            if pathseg.ident.name.as_str() == \"from_str_radix\";\n+\n+            // check if the second argument is a primitive `10`\n+            if arguments.len() == 2;\n+            if let ExprKind::Lit(lit) = &arguments[1].kind;\n+            if let rustc_ast::ast::LitKind::Int(10, _) = lit.node;\n+\n+            then {\n+                let expr = if let ExprKind::AddrOf(_, _, expr) = &arguments[0].kind {\n+                    let ty = cx.typeck_results().expr_ty(expr);\n+                    if is_ty_stringish(cx, ty) {\n+                        expr\n+                    } else {\n+                        &arguments[0]\n+                    }\n+                } else {\n+                    &arguments[0]\n+                };\n+\n+                let sugg = Sugg::hir_with_applicability(\n+                    cx,\n+                    expr,\n+                    \"<string>\",\n+                    &mut Applicability::MachineApplicable\n+                ).maybe_par();\n+\n+                span_lint_and_sugg(\n+                    cx,\n+                    FROM_STR_RADIX_10,\n+                    exp.span,\n+                    \"this call to `from_str_radix` can be replaced with a call to `str::parse`\",\n+                    \"try\",\n+                    format!(\"{}.parse::<{}>()\", sugg, prim_ty.name_str()),\n+                    Applicability::MaybeIncorrect\n+                );\n+            }\n+        }\n+    }\n+}\n+\n+/// Checks if a Ty is `String` or `&str`\n+fn is_ty_stringish(cx: &LateContext<'_>, ty: Ty<'_>) -> bool {\n+    is_type_diagnostic_item(cx, ty, sym::string_type) || is_type_diagnostic_item(cx, ty, sym::str)\n+}"}, {"sha": "67e490584e8e5bdd71fdd6e049bda3ebff17180d", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/67087a1b4ee06ce42fd8abe5825f9af96a41e83d/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67087a1b4ee06ce42fd8abe5825f9af96a41e83d/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=67087a1b4ee06ce42fd8abe5825f9af96a41e83d", "patch": "@@ -211,6 +211,7 @@ mod floating_point_arithmetic;\n mod format;\n mod formatting;\n mod from_over_into;\n+mod from_str_radix_10;\n mod functions;\n mod future_not_send;\n mod get_last_with_len;\n@@ -639,6 +640,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &formatting::SUSPICIOUS_ELSE_FORMATTING,\n         &formatting::SUSPICIOUS_UNARY_OP_FORMATTING,\n         &from_over_into::FROM_OVER_INTO,\n+        &from_str_radix_10::FROM_STR_RADIX_10,\n         &functions::DOUBLE_MUST_USE,\n         &functions::MUST_USE_CANDIDATE,\n         &functions::MUST_USE_UNIT,\n@@ -1259,6 +1261,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(move || box types::PtrAsPtr::new(msrv));\n     store.register_late_pass(|| box case_sensitive_file_extension_comparisons::CaseSensitiveFileExtensionComparisons);\n     store.register_late_pass(|| box redundant_slicing::RedundantSlicing);\n+    store.register_late_pass(|| box from_str_radix_10::FromStrRadix10);\n \n     store.register_group(true, \"clippy::restriction\", Some(\"clippy_restriction\"), vec![\n         LintId::of(&arithmetic::FLOAT_ARITHMETIC),\n@@ -1472,6 +1475,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&formatting::SUSPICIOUS_ELSE_FORMATTING),\n         LintId::of(&formatting::SUSPICIOUS_UNARY_OP_FORMATTING),\n         LintId::of(&from_over_into::FROM_OVER_INTO),\n+        LintId::of(&from_str_radix_10::FROM_STR_RADIX_10),\n         LintId::of(&functions::DOUBLE_MUST_USE),\n         LintId::of(&functions::MUST_USE_UNIT),\n         LintId::of(&functions::NOT_UNSAFE_PTR_ARG_DEREF),\n@@ -1728,6 +1732,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&formatting::SUSPICIOUS_ELSE_FORMATTING),\n         LintId::of(&formatting::SUSPICIOUS_UNARY_OP_FORMATTING),\n         LintId::of(&from_over_into::FROM_OVER_INTO),\n+        LintId::of(&from_str_radix_10::FROM_STR_RADIX_10),\n         LintId::of(&functions::DOUBLE_MUST_USE),\n         LintId::of(&functions::MUST_USE_UNIT),\n         LintId::of(&functions::RESULT_UNIT_ERR),"}, {"sha": "2f2ea04847a98da6a11b1e49544e505f19968138", "filename": "tests/ui/from_str_radix_10.rs", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/67087a1b4ee06ce42fd8abe5825f9af96a41e83d/tests%2Fui%2Ffrom_str_radix_10.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67087a1b4ee06ce42fd8abe5825f9af96a41e83d/tests%2Fui%2Ffrom_str_radix_10.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffrom_str_radix_10.rs?ref=67087a1b4ee06ce42fd8abe5825f9af96a41e83d", "patch": "@@ -0,0 +1,52 @@\n+#![warn(clippy::from_str_radix_10)]\n+\n+mod some_mod {\n+    // fake function that shouldn't trigger the lint\n+    pub fn from_str_radix(_: &str, _: u32) -> Result<(), std::num::ParseIntError> {\n+        unimplemented!()\n+    }\n+}\n+\n+// fake function that shouldn't trigger the lint\n+fn from_str_radix(_: &str, _: u32) -> Result<(), std::num::ParseIntError> {\n+    unimplemented!()\n+}\n+\n+// to test parenthesis addition\n+struct Test;\n+\n+impl std::ops::Add<Test> for Test {\n+    type Output = &'static str;\n+\n+    fn add(self, _: Self) -> Self::Output {\n+        \"304\"\n+    }\n+}\n+\n+fn main() -> Result<(), Box<dyn std::error::Error>> {\n+    // all of these should trigger the lint\n+    u32::from_str_radix(\"30\", 10)?;\n+    i64::from_str_radix(\"24\", 10)?;\n+    isize::from_str_radix(\"100\", 10)?;\n+    u8::from_str_radix(\"7\", 10)?;\n+    u16::from_str_radix(&(\"10\".to_owned() + \"5\"), 10)?;\n+    i128::from_str_radix(Test + Test, 10)?;\n+\n+    let string = \"300\";\n+    i32::from_str_radix(string, 10)?;\n+\n+    let stringier = \"400\".to_string();\n+    i32::from_str_radix(&stringier, 10)?;\n+\n+    // none of these should trigger the lint\n+    u16::from_str_radix(\"20\", 3)?;\n+    i32::from_str_radix(\"45\", 12)?;\n+    usize::from_str_radix(\"10\", 16)?;\n+    i128::from_str_radix(\"10\", 13)?;\n+    some_mod::from_str_radix(\"50\", 10)?;\n+    some_mod::from_str_radix(\"50\", 6)?;\n+    from_str_radix(\"50\", 10)?;\n+    from_str_radix(\"50\", 6)?;\n+\n+    Ok(())\n+}"}, {"sha": "471bf52a9a7ed92156e0dbcabf8d644ac9bf1ad9", "filename": "tests/ui/from_str_radix_10.stderr", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/67087a1b4ee06ce42fd8abe5825f9af96a41e83d/tests%2Fui%2Ffrom_str_radix_10.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/67087a1b4ee06ce42fd8abe5825f9af96a41e83d/tests%2Fui%2Ffrom_str_radix_10.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffrom_str_radix_10.stderr?ref=67087a1b4ee06ce42fd8abe5825f9af96a41e83d", "patch": "@@ -0,0 +1,52 @@\n+error: this call to `from_str_radix` can be replaced with a call to `str::parse`\n+  --> $DIR/from_str_radix_10.rs:28:5\n+   |\n+LL |     u32::from_str_radix(\"30\", 10)?;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `\"30\".parse::<u32>()`\n+   |\n+   = note: `-D clippy::from-str-radix-10` implied by `-D warnings`\n+\n+error: this call to `from_str_radix` can be replaced with a call to `str::parse`\n+  --> $DIR/from_str_radix_10.rs:29:5\n+   |\n+LL |     i64::from_str_radix(\"24\", 10)?;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `\"24\".parse::<i64>()`\n+\n+error: this call to `from_str_radix` can be replaced with a call to `str::parse`\n+  --> $DIR/from_str_radix_10.rs:30:5\n+   |\n+LL |     isize::from_str_radix(\"100\", 10)?;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `\"100\".parse::<isize>()`\n+\n+error: this call to `from_str_radix` can be replaced with a call to `str::parse`\n+  --> $DIR/from_str_radix_10.rs:31:5\n+   |\n+LL |     u8::from_str_radix(\"7\", 10)?;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `\"7\".parse::<u8>()`\n+\n+error: this call to `from_str_radix` can be replaced with a call to `str::parse`\n+  --> $DIR/from_str_radix_10.rs:32:5\n+   |\n+LL |     u16::from_str_radix(&(\"10\".to_owned() + \"5\"), 10)?;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `((\"10\".to_owned() + \"5\")).parse::<u16>()`\n+\n+error: this call to `from_str_radix` can be replaced with a call to `str::parse`\n+  --> $DIR/from_str_radix_10.rs:33:5\n+   |\n+LL |     i128::from_str_radix(Test + Test, 10)?;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `(Test + Test).parse::<i128>()`\n+\n+error: this call to `from_str_radix` can be replaced with a call to `str::parse`\n+  --> $DIR/from_str_radix_10.rs:36:5\n+   |\n+LL |     i32::from_str_radix(string, 10)?;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `string.parse::<i32>()`\n+\n+error: this call to `from_str_radix` can be replaced with a call to `str::parse`\n+  --> $DIR/from_str_radix_10.rs:39:5\n+   |\n+LL |     i32::from_str_radix(&stringier, 10)?;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `stringier.parse::<i32>()`\n+\n+error: aborting due to 8 previous errors\n+"}]}