{"sha": "fc0ba2c8b6c144a8bda60b8267fcbbdc8ed48084", "node_id": "C_kwDOAAsO6NoAKGZjMGJhMmM4YjZjMTQ0YThiZGE2MGI4MjY3ZmNiYmRjOGVkNDgwODQ", "commit": {"author": {"name": "Xiretza", "email": "xiretza@xiretza.xyz", "date": "2022-10-05T19:40:56Z"}, "committer": {"name": "Xiretza", "email": "xiretza@xiretza.xyz", "date": "2023-02-01T20:49:45Z"}, "message": "Use AddToDiagnostic for \"use latest edition\" help", "tree": {"sha": "9f0e1fa35cbf28c5edc4adacf260da1495616d6b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f0e1fa35cbf28c5edc4adacf260da1495616d6b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc0ba2c8b6c144a8bda60b8267fcbbdc8ed48084", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc0ba2c8b6c144a8bda60b8267fcbbdc8ed48084", "html_url": "https://github.com/rust-lang/rust/commit/fc0ba2c8b6c144a8bda60b8267fcbbdc8ed48084", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc0ba2c8b6c144a8bda60b8267fcbbdc8ed48084/comments", "author": {"login": "Xiretza", "id": 3107142, "node_id": "MDQ6VXNlcjMxMDcxNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3107142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xiretza", "html_url": "https://github.com/Xiretza", "followers_url": "https://api.github.com/users/Xiretza/followers", "following_url": "https://api.github.com/users/Xiretza/following{/other_user}", "gists_url": "https://api.github.com/users/Xiretza/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xiretza/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xiretza/subscriptions", "organizations_url": "https://api.github.com/users/Xiretza/orgs", "repos_url": "https://api.github.com/users/Xiretza/repos", "events_url": "https://api.github.com/users/Xiretza/events{/privacy}", "received_events_url": "https://api.github.com/users/Xiretza/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Xiretza", "id": 3107142, "node_id": "MDQ6VXNlcjMxMDcxNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3107142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xiretza", "html_url": "https://github.com/Xiretza", "followers_url": "https://api.github.com/users/Xiretza/followers", "following_url": "https://api.github.com/users/Xiretza/following{/other_user}", "gists_url": "https://api.github.com/users/Xiretza/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xiretza/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xiretza/subscriptions", "organizations_url": "https://api.github.com/users/Xiretza/orgs", "repos_url": "https://api.github.com/users/Xiretza/repos", "events_url": "https://api.github.com/users/Xiretza/events{/privacy}", "received_events_url": "https://api.github.com/users/Xiretza/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e36e7cebe4db494478982f80db2f928f59802d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e36e7cebe4db494478982f80db2f928f59802d6", "html_url": "https://github.com/rust-lang/rust/commit/0e36e7cebe4db494478982f80db2f928f59802d6"}], "stats": {"total": 78, "additions": 53, "deletions": 25}, "files": [{"sha": "632f819e58433bc162080b7570f8b39f5a7e73dc", "filename": "compiler/rustc_errors/src/diagnostic.rs", "status": "modified", "additions": 36, "deletions": 12, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/fc0ba2c8b6c144a8bda60b8267fcbbdc8ed48084/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc0ba2c8b6c144a8bda60b8267fcbbdc8ed48084/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs?ref=fc0ba2c8b6c144a8bda60b8267fcbbdc8ed48084", "patch": "@@ -555,18 +555,6 @@ impl Diagnostic {\n         self\n     }\n \n-    /// Help the user upgrade to the latest edition.\n-    /// This is factored out to make sure it does the right thing with `Cargo.toml`.\n-    pub fn help_use_latest_edition(&mut self) -> &mut Self {\n-        if std::env::var_os(\"CARGO\").is_some() {\n-            self.help(&format!(\"set `edition = \\\"{}\\\"` in `Cargo.toml`\", LATEST_STABLE_EDITION));\n-        } else {\n-            self.help(&format!(\"pass `--edition {}` to `rustc`\", LATEST_STABLE_EDITION));\n-        }\n-        self.note(\"for more on editions, read https://doc.rust-lang.org/edition-guide\");\n-        self\n-    }\n-\n     /// Disallow attaching suggestions this diagnostic.\n     /// Any suggestions attached e.g. with the `span_suggestion_*` methods\n     /// (before and after the call to `disable_suggestions`) will be ignored.\n@@ -1083,3 +1071,39 @@ impl PartialEq for Diagnostic {\n         self.keys() == other.keys()\n     }\n }\n+\n+pub enum HelpUseLatestEdition {\n+    Cargo,\n+    Standalone,\n+}\n+\n+impl HelpUseLatestEdition {\n+    pub fn new() -> Self {\n+        if std::env::var_os(\"CARGO\").is_some() { Self::Cargo } else { Self::Standalone }\n+    }\n+}\n+\n+impl AddToDiagnostic for HelpUseLatestEdition {\n+    fn add_to_diagnostic_with<F>(self, diag: &mut Diagnostic, f: F)\n+    where\n+        F: Fn(&mut Diagnostic, SubdiagnosticMessage) -> SubdiagnosticMessage,\n+    {\n+        let msg = f(\n+            diag,\n+            match self {\n+                Self::Cargo => {\n+                    format!(\"set `edition = \\\"{}\\\"` in `Cargo.toml`\", LATEST_STABLE_EDITION)\n+                }\n+                Self::Standalone => {\n+                    format!(\"pass `--edition {}` to `rustc`\", LATEST_STABLE_EDITION)\n+                }\n+            }\n+            .into(),\n+        );\n+        diag.help(msg);\n+\n+        let msg =\n+            f(diag, \"for more on editions, read https://doc.rust-lang.org/edition-guide\".into());\n+        diag.note(msg);\n+    }\n+}"}, {"sha": "3064d2bedbe125ffac7985e43a20f2b2ad29741c", "filename": "compiler/rustc_errors/src/diagnostic_builder.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fc0ba2c8b6c144a8bda60b8267fcbbdc8ed48084/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc0ba2c8b6c144a8bda60b8267fcbbdc8ed48084/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs?ref=fc0ba2c8b6c144a8bda60b8267fcbbdc8ed48084", "patch": "@@ -669,7 +669,6 @@ impl<'a, G: EmissionGuarantee> DiagnosticBuilder<'a, G> {\n         sp: impl Into<MultiSpan>,\n         msg: impl Into<SubdiagnosticMessage>,\n     ) -> &mut Self);\n-    forward!(pub fn help_use_latest_edition(&mut self,) -> &mut Self);\n     forward!(pub fn set_is_lint(&mut self,) -> &mut Self);\n \n     forward!(pub fn disable_suggestions(&mut self,) -> &mut Self);"}, {"sha": "05cfebbfe8acad1921130c6a92d393e79e6f8609", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc0ba2c8b6c144a8bda60b8267fcbbdc8ed48084/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc0ba2c8b6c144a8bda60b8267fcbbdc8ed48084/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=fc0ba2c8b6c144a8bda60b8267fcbbdc8ed48084", "patch": "@@ -378,7 +378,7 @@ pub struct DelayedBugPanic;\n \n pub use diagnostic::{\n     AddToDiagnostic, DecorateLint, Diagnostic, DiagnosticArg, DiagnosticArgValue, DiagnosticId,\n-    DiagnosticStyledString, IntoDiagnosticArg, SubDiagnostic,\n+    DiagnosticStyledString, HelpUseLatestEdition, IntoDiagnosticArg, SubDiagnostic,\n };\n pub use diagnostic_builder::{DiagnosticBuilder, EmissionGuarantee, Noted};\n pub use diagnostic_impls::{DiagnosticArgFromDisplay, DiagnosticSymbolList};"}, {"sha": "3054e1c8ac211730b976cb1e0cd839b7109592c5", "filename": "compiler/rustc_hir_typeck/src/expr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fc0ba2c8b6c144a8bda60b8267fcbbdc8ed48084/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc0ba2c8b6c144a8bda60b8267fcbbdc8ed48084/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs?ref=fc0ba2c8b6c144a8bda60b8267fcbbdc8ed48084", "patch": "@@ -23,8 +23,8 @@ use rustc_ast as ast;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stack::ensure_sufficient_stack;\n use rustc_errors::{\n-    pluralize, struct_span_err, Applicability, Diagnostic, DiagnosticBuilder, DiagnosticId,\n-    ErrorGuaranteed, StashKey,\n+    pluralize, struct_span_err, AddToDiagnostic, Applicability, Diagnostic, DiagnosticBuilder,\n+    DiagnosticId, ErrorGuaranteed, HelpUseLatestEdition, StashKey,\n };\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, DefKind, Res};\n@@ -2433,7 +2433,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             // We know by construction that `<expr>.await` is either on Rust 2015\n             // or results in `ExprKind::Await`. Suggest switching the edition to 2018.\n             err.note(\"to `.await` a `Future`, switch to Rust 2018 or later\");\n-            err.help_use_latest_edition();\n+            HelpUseLatestEdition::new().add_to_diagnostic(&mut err);\n         }\n \n         err.emit();"}, {"sha": "ae59cb4bbe0ba1ba50221cd058149f903baa8422", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fc0ba2c8b6c144a8bda60b8267fcbbdc8ed48084/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc0ba2c8b6c144a8bda60b8267fcbbdc8ed48084/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=fc0ba2c8b6c144a8bda60b8267fcbbdc8ed48084", "patch": "@@ -39,8 +39,8 @@ use rustc_ast::{Arm, Async, BlockCheckMode, Expr, ExprKind, Label, Movability, R\n use rustc_ast::{ClosureBinder, MetaItemLit, StmtKind};\n use rustc_ast_pretty::pprust;\n use rustc_errors::{\n-    Applicability, Diagnostic, DiagnosticBuilder, ErrorGuaranteed, IntoDiagnostic, PResult,\n-    StashKey,\n+    AddToDiagnostic, Applicability, Diagnostic, DiagnosticBuilder, ErrorGuaranteed,\n+    HelpUseLatestEdition, IntoDiagnostic, PResult, StashKey,\n };\n use rustc_session::errors::{report_lit_error, ExprParenthesesNeeded};\n use rustc_session::lint::builtin::BREAK_WITH_LABEL_AND_LOOP;\n@@ -2927,7 +2927,7 @@ impl<'a> Parser<'a> {\n         let mut async_block_err = |e: &mut Diagnostic, span: Span| {\n             recover_async = true;\n             e.span_label(span, \"`async` blocks are only allowed in Rust 2018 or later\");\n-            e.help_use_latest_edition();\n+            HelpUseLatestEdition::new().add_to_diagnostic(e);\n         };\n \n         while self.token != token::CloseDelim(close_delim) {"}, {"sha": "d72c7d8cabc6085f1a740cbe6bcba30a9162bb50", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/fc0ba2c8b6c144a8bda60b8267fcbbdc8ed48084/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc0ba2c8b6c144a8bda60b8267fcbbdc8ed48084/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=fc0ba2c8b6c144a8bda60b8267fcbbdc8ed48084", "patch": "@@ -16,7 +16,10 @@ use rustc_ast::{EnumDef, FieldDef, Generics, TraitRef, Ty, TyKind, Variant, Vari\n use rustc_ast::{FnHeader, ForeignItem, Path, PathSegment, Visibility, VisibilityKind};\n use rustc_ast::{MacCall, MacDelimiter};\n use rustc_ast_pretty::pprust;\n-use rustc_errors::{struct_span_err, Applicability, IntoDiagnostic, PResult, StashKey};\n+use rustc_errors::{\n+    struct_span_err, AddToDiagnostic, Applicability, HelpUseLatestEdition, IntoDiagnostic, PResult,\n+    StashKey,\n+};\n use rustc_span::edition::Edition;\n use rustc_span::lev_distance::lev_distance;\n use rustc_span::source_map::{self, Span};\n@@ -2445,10 +2448,12 @@ impl<'a> Parser<'a> {\n     fn ban_async_in_2015(&self, span: Span) {\n         if span.rust_2015() {\n             let diag = self.diagnostic();\n-            struct_span_err!(diag, span, E0670, \"`async fn` is not permitted in Rust 2015\")\n-                .span_label(span, \"to use `async fn`, switch to Rust 2018 or later\")\n-                .help_use_latest_edition()\n-                .emit();\n+\n+            let mut e =\n+                struct_span_err!(diag, span, E0670, \"`async fn` is not permitted in Rust 2015\");\n+            e.span_label(span, \"to use `async fn`, switch to Rust 2018 or later\");\n+            HelpUseLatestEdition::new().add_to_diagnostic(&mut e);\n+            e.emit();\n         }\n     }\n "}]}