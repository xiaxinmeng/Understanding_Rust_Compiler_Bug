{"sha": "af3795721cd9ffc591eeeb077df16d3658be150f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmMzc5NTcyMWNkOWZmYzU5MWVlZWIwNzdkZjE2ZDM2NThiZTE1MGY=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2015-02-25T20:05:07Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-05-21T15:47:30Z"}, "message": "syntax: parse `const fn` for free functions and inherent methods.", "tree": {"sha": "045c56da8c0228dd3eed799475c86a0d8ff1dcc4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/045c56da8c0228dd3eed799475c86a0d8ff1dcc4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af3795721cd9ffc591eeeb077df16d3658be150f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af3795721cd9ffc591eeeb077df16d3658be150f", "html_url": "https://github.com/rust-lang/rust/commit/af3795721cd9ffc591eeeb077df16d3658be150f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af3795721cd9ffc591eeeb077df16d3658be150f/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc6318d2be4d9eb62af9170958fd48ef45e4a74e", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc6318d2be4d9eb62af9170958fd48ef45e4a74e", "html_url": "https://github.com/rust-lang/rust/commit/bc6318d2be4d9eb62af9170958fd48ef45e4a74e"}], "stats": {"total": 306, "additions": 218, "deletions": 88}, "files": [{"sha": "744b743a337a9b582b616f3f825444c212f27ea3", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af3795721cd9ffc591eeeb077df16d3658be150f/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3795721cd9ffc591eeeb077df16d3658be150f/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=af3795721cd9ffc591eeeb077df16d3658be150f", "patch": "@@ -1049,7 +1049,7 @@ fn encode_info_for_item(ecx: &EncodeContext,\n         encode_stability(rbml_w, stab);\n         rbml_w.end_tag();\n       }\n-      ast::ItemFn(ref decl, _, _, ref generics, _) => {\n+      ast::ItemFn(ref decl, _, _, _, ref generics, _) => {\n         add_to_index(item, rbml_w, index);\n         rbml_w.start_tag(tag_items_data_item);\n         encode_def_id(rbml_w, def_id);\n@@ -1967,7 +1967,7 @@ fn encode_reachable_extern_fns(ecx: &EncodeContext, rbml_w: &mut Encoder) {\n \n     for id in ecx.reachable {\n         if let Some(ast_map::NodeItem(i)) = ecx.tcx.map.find(*id) {\n-            if let ast::ItemFn(_, _, abi, ref generics, _) = i.node {\n+            if let ast::ItemFn(_, _, _, abi, ref generics, _) = i.node {\n                 if abi != abi::Rust && !generics.is_type_parameterized() {\n                     rbml_w.wr_tagged_u32(tag_reachable_extern_fn_id, *id);\n                 }"}, {"sha": "963d8cf61bc74909d1bd9493f2d8729c49a8a286", "filename": "src/librustc/middle/effect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af3795721cd9ffc591eeeb077df16d3658be150f/src%2Flibrustc%2Fmiddle%2Feffect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3795721cd9ffc591eeeb077df16d3658be150f/src%2Flibrustc%2Fmiddle%2Feffect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Feffect.rs?ref=af3795721cd9ffc591eeeb077df16d3658be150f", "patch": "@@ -87,8 +87,8 @@ impl<'a, 'tcx, 'v> Visitor<'v> for EffectCheckVisitor<'a, 'tcx> {\n                 block: &'v ast::Block, span: Span, _: ast::NodeId) {\n \n         let (is_item_fn, is_unsafe_fn) = match fn_kind {\n-            visit::FkItemFn(_, _, fn_style, _, _) =>\n-                (true, fn_style == ast::Unsafety::Unsafe),\n+            visit::FkItemFn(_, _, unsafety, _, _) =>\n+                (true, unsafety == ast::Unsafety::Unsafe),\n             visit::FkMethod(_, sig, _) =>\n                 (true, sig.unsafety == ast::Unsafety::Unsafe),\n             _ => (false, false),"}, {"sha": "4ec5cf03364973d241a6c1a19242dc62a522f617", "filename": "src/librustc/middle/infer/error_reporting.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/af3795721cd9ffc591eeeb077df16d3658be150f/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3795721cd9ffc591eeeb077df16d3658be150f/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs?ref=af3795721cd9ffc591eeeb077df16d3658be150f", "patch": "@@ -158,6 +158,7 @@ trait ErrorReportingHelpers<'tcx> {\n     fn give_expl_lifetime_param(&self,\n                                 decl: &ast::FnDecl,\n                                 unsafety: ast::Unsafety,\n+                                constness: ast::Constness,\n                                 ident: ast::Ident,\n                                 opt_explicit_self: Option<&ast::ExplicitSelf_>,\n                                 generics: &ast::Generics,\n@@ -826,8 +827,9 @@ impl<'a, 'tcx> ErrorReporting<'tcx> for InferCtxt<'a, 'tcx> {\n             Some(ref node) => match *node {\n                 ast_map::NodeItem(ref item) => {\n                     match item.node {\n-                        ast::ItemFn(ref fn_decl, pur, _, ref gen, _) => {\n-                            Some((fn_decl, gen, pur, item.ident, None, item.span))\n+                        ast::ItemFn(ref fn_decl, unsafety, constness, _, ref gen, _) => {\n+                            Some((fn_decl, gen, unsafety, constness,\n+                                  item.ident, None, item.span))\n                         },\n                         _ => None\n                     }\n@@ -838,6 +840,7 @@ impl<'a, 'tcx> ErrorReporting<'tcx> for InferCtxt<'a, 'tcx> {\n                             Some((&sig.decl,\n                                   &sig.generics,\n                                   sig.unsafety,\n+                                  sig.constness,\n                                   item.ident,\n                                   Some(&sig.explicit_self.node),\n                                   item.span))\n@@ -852,6 +855,7 @@ impl<'a, 'tcx> ErrorReporting<'tcx> for InferCtxt<'a, 'tcx> {\n                             Some((&sig.decl,\n                                   &sig.generics,\n                                   sig.unsafety,\n+                                  sig.constness,\n                                   item.ident,\n                                   Some(&sig.explicit_self.node),\n                                   item.span))\n@@ -863,12 +867,12 @@ impl<'a, 'tcx> ErrorReporting<'tcx> for InferCtxt<'a, 'tcx> {\n             },\n             None => None\n         };\n-        let (fn_decl, generics, unsafety, ident, expl_self, span)\n+        let (fn_decl, generics, unsafety, constness, ident, expl_self, span)\n                                     = node_inner.expect(\"expect item fn\");\n         let rebuilder = Rebuilder::new(self.tcx, fn_decl, expl_self,\n                                        generics, same_regions, &life_giver);\n         let (fn_decl, expl_self, generics) = rebuilder.rebuild();\n-        self.give_expl_lifetime_param(&fn_decl, unsafety, ident,\n+        self.give_expl_lifetime_param(&fn_decl, unsafety, constness, ident,\n                                       expl_self.as_ref(), &generics, span);\n     }\n }\n@@ -1423,12 +1427,13 @@ impl<'a, 'tcx> ErrorReportingHelpers<'tcx> for InferCtxt<'a, 'tcx> {\n     fn give_expl_lifetime_param(&self,\n                                 decl: &ast::FnDecl,\n                                 unsafety: ast::Unsafety,\n+                                constness: ast::Constness,\n                                 ident: ast::Ident,\n                                 opt_explicit_self: Option<&ast::ExplicitSelf_>,\n                                 generics: &ast::Generics,\n                                 span: codemap::Span) {\n-        let suggested_fn = pprust::fun_to_string(decl, unsafety, ident,\n-                                              opt_explicit_self, generics);\n+        let suggested_fn = pprust::fun_to_string(decl, unsafety, constness, ident,\n+                                                 opt_explicit_self, generics);\n         let msg = format!(\"consider using an explicit lifetime \\\n                            parameter as shown: {}\", suggested_fn);\n         self.tcx.sess.span_help(span, &msg[..]);\n@@ -1710,7 +1715,7 @@ fn lifetimes_in_scope(tcx: &ty::ctxt,\n     let method_id_opt = match tcx.map.find(parent) {\n         Some(node) => match node {\n             ast_map::NodeItem(item) => match item.node {\n-                ast::ItemFn(_, _, _, ref gen, _) => {\n+                ast::ItemFn(_, _, _, _, ref gen, _) => {\n                     taken.push_all(&gen.lifetimes);\n                     None\n                 },"}, {"sha": "f374c9749c250680ca334810fb1b5c27c4e1f83a", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/af3795721cd9ffc591eeeb077df16d3658be150f/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3795721cd9ffc591eeeb077df16d3658be150f/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=af3795721cd9ffc591eeeb077df16d3658be150f", "patch": "@@ -46,7 +46,7 @@ fn item_might_be_inlined(item: &ast::Item) -> bool {\n \n     match item.node {\n         ast::ItemImpl(_, _, ref generics, _, _, _) |\n-        ast::ItemFn(_, _, _, ref generics, _) => {\n+        ast::ItemFn(_, _, _, _, ref generics, _) => {\n             generics_require_inlining(generics)\n         }\n         _ => false,\n@@ -256,7 +256,7 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n             // but all other rust-only interfaces can be private (they will not\n             // participate in linkage after this product is produced)\n             if let ast_map::NodeItem(item) = *node {\n-                if let ast::ItemFn(_, _, abi, _, _) = item.node {\n+                if let ast::ItemFn(_, _, _, abi, _, _) = item.node {\n                     if abi != abi::Rust {\n                         self.reachable_symbols.insert(search_item);\n                     }\n@@ -273,7 +273,7 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n         match *node {\n             ast_map::NodeItem(item) => {\n                 match item.node {\n-                    ast::ItemFn(_, _, _, _, ref search_block) => {\n+                    ast::ItemFn(_, _, _, _, _, ref search_block) => {\n                         if item_might_be_inlined(&*item) {\n                             visit::walk_block(self, &**search_block)\n                         }"}, {"sha": "467e404581187886e5cd2013d67fff84658f5752", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3795721cd9ffc591eeeb077df16d3658be150f/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3795721cd9ffc591eeeb077df16d3658be150f/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=af3795721cd9ffc591eeeb077df16d3658be150f", "patch": "@@ -154,7 +154,7 @@ impl<'a, 'v> Visitor<'v> for LifetimeContext<'a> {\n     fn visit_fn(&mut self, fk: visit::FnKind<'v>, fd: &'v ast::FnDecl,\n                 b: &'v ast::Block, s: Span, _: ast::NodeId) {\n         match fk {\n-            visit::FkItemFn(_, generics, _, _, _) => {\n+            visit::FkItemFn(_, generics, _, _, _, _) => {\n                 self.visit_early_late(subst::FnSpace, generics, |this| {\n                     this.walk_fn(fk, fd, b, s)\n                 })"}, {"sha": "8a9e957f02afaa8fb3739aed5027a98fa143ebfa", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3795721cd9ffc591eeeb077df16d3658be150f/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3795721cd9ffc591eeeb077df16d3658be150f/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=af3795721cd9ffc591eeeb077df16d3658be150f", "patch": "@@ -23,7 +23,7 @@ use syntax::{attr, visit};\n use syntax::ast;\n use syntax::ast::{Attribute, Block, Crate, DefId, FnDecl, NodeId, Variant};\n use syntax::ast::{Item, Generics, StructField};\n-use syntax::ast_util::is_local;\n+use syntax::ast_util::{is_local, PostExpansionMethod};\n use syntax::attr::{Stability, AttrMetaMethods};\n use syntax::visit::{FnKind, Visitor};\n use syntax::feature_gate::emit_feature_err;"}, {"sha": "2765fd638600a7adc523e6b314c454546de18795", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3795721cd9ffc591eeeb077df16d3658be150f/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3795721cd9ffc591eeeb077df16d3658be150f/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=af3795721cd9ffc591eeeb077df16d3658be150f", "patch": "@@ -2428,7 +2428,7 @@ impl<'a, 'tcx> ParameterEnvironment<'a, 'tcx> {\n             }\n             Some(ast_map::NodeItem(item)) => {\n                 match item.node {\n-                    ast::ItemFn(_, _, _, _, ref body) => {\n+                    ast::ItemFn(_, _, _, _, _, ref body) => {\n                         // We assume this is a function.\n                         let fn_def_id = ast_util::local_def(id);\n                         let fn_scheme = lookup_item_type(cx, fn_def_id);"}, {"sha": "abf0332b4a22fb8a2e3b3d01ac93969ab4360af5", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af3795721cd9ffc591eeeb077df16d3658be150f/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3795721cd9ffc591eeeb077df16d3658be150f/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=af3795721cd9ffc591eeeb077df16d3658be150f", "patch": "@@ -977,7 +977,7 @@ impl LintPass for NonSnakeCase {\n                 },\n                 _ => (),\n             },\n-            visit::FkItemFn(ident, _, _, _, _) => {\n+            visit::FkItemFn(ident, _, _, _, _, _) => {\n                 self.check_snake_case(cx, \"function\", &token::get_ident(ident), Some(span))\n             },\n             _ => (),\n@@ -1853,7 +1853,7 @@ impl LintPass for UnconditionalRecursion {\n                               ast::NodeId, ast::NodeId, ast::Ident, ast::NodeId) -> bool;\n \n         let (name, checker) = match fn_kind {\n-            visit::FkItemFn(name, _, _, _, _) => (name, id_refers_to_this_fn as F),\n+            visit::FkItemFn(name, _, _, _, _, _) => (name, id_refers_to_this_fn as F),\n             visit::FkMethod(name, _, _) => (name, id_refers_to_this_method as F),\n             // closures can't recur, so they don't matter.\n             visit::FkFnBlock => return"}, {"sha": "30d5a4f111ba43e9b41bdd3636c52e947ae7714d", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3795721cd9ffc591eeeb077df16d3658be150f/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3795721cd9ffc591eeeb077df16d3658be150f/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=af3795721cd9ffc591eeeb077df16d3658be150f", "patch": "@@ -425,7 +425,7 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                     .define_value(DefConst(local_def(item.id)), sp, modifiers);\n                 parent.clone()\n             }\n-            ItemFn(_, _, _, _, _) => {\n+            ItemFn(_, _, _, _, _, _) => {\n                 let name_bindings = self.add_child(name, parent, ForbidDuplicateValues, sp);\n \n                 let def = DefFn(local_def(item.id), false);"}, {"sha": "1723313f015e595e143192f3ad878651fc65d7e0", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3795721cd9ffc591eeeb077df16d3658be150f/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3795721cd9ffc591eeeb077df16d3658be150f/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=af3795721cd9ffc591eeeb077df16d3658be150f", "patch": "@@ -1809,7 +1809,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                                                                ItemRibKind),\n                                              |this| visit::walk_item(this, item));\n             }\n-            ItemFn(_, _, _, ref generics, _) => {\n+            ItemFn(_, _, _, _, ref generics, _) => {\n                 self.with_type_parameter_rib(HasTypeParameters(generics,\n                                                                FnSpace,\n                                                                ItemRibKind),"}, {"sha": "f21837ed10d0907836904b0d313f184fb13c5665", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/af3795721cd9ffc591eeeb077df16d3658be150f/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3795721cd9ffc591eeeb077df16d3658be150f/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=af3795721cd9ffc591eeeb077df16d3658be150f", "patch": "@@ -1073,7 +1073,7 @@ fn build_cfg(tcx: &ty::ctxt, id: ast::NodeId) -> (ast::NodeId, Option<cfg::CFG>)\n     let blk = match tcx.map.find(id) {\n         Some(ast_map::NodeItem(i)) => {\n             match i.node {\n-                ast::ItemFn(_, _, _, _, ref blk) => {\n+                ast::ItemFn(_, _, _, _, _, ref blk) => {\n                     blk\n                 }\n                 _ => tcx.sess.bug(\"unexpected item variant in has_nested_returns\")\n@@ -1966,7 +1966,7 @@ pub fn trans_item(ccx: &CrateContext, item: &ast::Item) {\n     let from_external = ccx.external_srcs().borrow().contains_key(&item.id);\n \n     match item.node {\n-      ast::ItemFn(ref decl, _fn_style, abi, ref generics, ref body) => {\n+      ast::ItemFn(ref decl, _, _, abi, ref generics, ref body) => {\n         if !generics.is_type_parameterized() {\n             let trans_everywhere = attr::requests_inline(&item.attrs);\n             // Ignore `trans_everywhere` for cross-crate inlined items\n@@ -2336,7 +2336,7 @@ pub fn get_item_val(ccx: &CrateContext, id: ast::NodeId) -> ValueRef {\n                     }\n                 }\n \n-                ast::ItemFn(_, _, abi, _, _) => {\n+                ast::ItemFn(_, _, _, abi, _, _) => {\n                     let sym = sym();\n                     let llfn = if abi == Rust {\n                         register_fn(ccx, i.span, sym, i.id, ty)"}, {"sha": "9a53c3f0bcdf588790a9c23493f4591af07454b3", "filename": "src/librustc_trans/trans/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3795721cd9ffc591eeeb077df16d3658be150f/src%2Flibrustc_trans%2Ftrans%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3795721cd9ffc591eeeb077df16d3658be150f/src%2Flibrustc_trans%2Ftrans%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Finline.rs?ref=af3795721cd9ffc591eeeb077df16d3658be150f", "patch": "@@ -55,7 +55,7 @@ fn instantiate_inline(ccx: &CrateContext, fn_id: ast::DefId)\n             trans_item(ccx, &**item);\n \n             let linkage = match item.node {\n-                ast::ItemFn(_, _, _, ref generics, _) => {\n+                ast::ItemFn(_, _, _, _, ref generics, _) => {\n                     if generics.is_type_parameterized() {\n                         // Generics have no symbol, so they can't be given any\n                         // linkage."}, {"sha": "d086aa93a6f6b37d891427bd86e8df069b00d9e9", "filename": "src/librustc_trans/trans/monomorphize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3795721cd9ffc591eeeb077df16d3658be150f/src%2Flibrustc_trans%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3795721cd9ffc591eeeb077df16d3658be150f/src%2Flibrustc_trans%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmonomorphize.rs?ref=af3795721cd9ffc591eeeb077df16d3658be150f", "patch": "@@ -177,7 +177,7 @@ pub fn monomorphic_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n         ast_map::NodeItem(i) => {\n             match *i {\n               ast::Item {\n-                  node: ast::ItemFn(ref decl, _, abi, _, ref body),\n+                  node: ast::ItemFn(ref decl, _, _, abi, _, ref body),\n                   ..\n               } => {\n                   let d = mk_lldecl(abi);"}, {"sha": "344d525d4cbf4bf3776a0140befaeaaa7d48cad2", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af3795721cd9ffc591eeeb077df16d3658be150f/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3795721cd9ffc591eeeb077df16d3658be150f/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=af3795721cd9ffc591eeeb077df16d3658be150f", "patch": "@@ -741,7 +741,7 @@ pub fn check_item_type<'a,'tcx>(ccx: &CrateCtxt<'a,'tcx>, it: &'tcx ast::Item) {\n                             &enum_definition.variants,\n                             it.id);\n       }\n-      ast::ItemFn(_, _, _, _, _) => {} // entirely within check_item_body\n+      ast::ItemFn(..) => {} // entirely within check_item_body\n       ast::ItemImpl(_, _, _, _, _, ref impl_items) => {\n           debug!(\"ItemImpl {} with id {}\", token::get_ident(it.ident), it.id);\n           match ty::impl_trait_ref(ccx.tcx, local_def(it.id)) {\n@@ -796,7 +796,7 @@ pub fn check_item_body<'a,'tcx>(ccx: &CrateCtxt<'a,'tcx>, it: &'tcx ast::Item) {\n            ty::item_path_str(ccx.tcx, local_def(it.id)));\n     let _indenter = indenter();\n     match it.node {\n-      ast::ItemFn(ref decl, _, _, _, ref body) => {\n+      ast::ItemFn(ref decl, _, _, _, _, ref body) => {\n         let fn_pty = ty::lookup_item_type(ccx.tcx, ast_util::local_def(it.id));\n         let param_env = ParameterEnvironment::for_item(ccx.tcx, it.id);\n         check_bare_fn(ccx, &**decl, &**body, it.id, it.span, fn_pty.ty, param_env);"}, {"sha": "48876c2a1889a38cefefd5cfc3ae2809c166af30", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af3795721cd9ffc591eeeb077df16d3658be150f/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3795721cd9ffc591eeeb077df16d3658be150f/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=af3795721cd9ffc591eeeb077df16d3658be150f", "patch": "@@ -1440,7 +1440,7 @@ fn compute_type_scheme_of_item<'a,'tcx>(ccx: &CrateCtxt<'a,'tcx>,\n             let ty = ccx.icx(&()).to_ty(&ExplicitRscope, &**t);\n             ty::TypeScheme { ty: ty, generics: ty::Generics::empty() }\n         }\n-        ast::ItemFn(ref decl, unsafety, abi, ref generics, _) => {\n+        ast::ItemFn(ref decl, unsafety, _, abi, ref generics, _) => {\n             let ty_generics = ty_generics_for_fn(ccx, generics, &ty::Generics::empty());\n             let tofd = astconv::ty_of_bare_fn(&ccx.icx(generics), unsafety, abi, &**decl);\n             let ty = ty::mk_bare_fn(tcx, Some(local_def(it.id)), tcx.mk_bare_fn(tofd));\n@@ -1492,7 +1492,7 @@ fn convert_typed_item<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n         ast::ItemStatic(..) | ast::ItemConst(..) => {\n             ty::GenericPredicates::empty()\n         }\n-        ast::ItemFn(_, _, _, ref ast_generics, _) => {\n+        ast::ItemFn(_, _, _, _, ref ast_generics, _) => {\n             ty_generic_predicates_for_fn(ccx, ast_generics, &ty::GenericPredicates::empty())\n         }\n         ast::ItemTy(_, ref generics) => {"}, {"sha": "88ce75486a202711035993347f956f6d13293da0", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af3795721cd9ffc591eeeb077df16d3658be150f/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3795721cd9ffc591eeeb077df16d3658be150f/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=af3795721cd9ffc591eeeb077df16d3658be150f", "patch": "@@ -215,7 +215,7 @@ fn check_main_fn_ty(ccx: &CrateCtxt,\n             match tcx.map.find(main_id) {\n                 Some(ast_map::NodeItem(it)) => {\n                     match it.node {\n-                        ast::ItemFn(_, _, _, ref ps, _)\n+                        ast::ItemFn(_, _, _, _, ref ps, _)\n                         if ps.is_parameterized() => {\n                             span_err!(ccx.tcx.sess, main_span, E0131,\n                                       \"main function is not allowed to have type parameters\");\n@@ -262,7 +262,7 @@ fn check_start_fn_ty(ccx: &CrateCtxt,\n             match tcx.map.find(start_id) {\n                 Some(ast_map::NodeItem(it)) => {\n                     match it.node {\n-                        ast::ItemFn(_,_,_,ref ps,_)\n+                        ast::ItemFn(_,_,_,_,ref ps,_)\n                         if ps.is_parameterized() => {\n                             span_err!(tcx.sess, start_span, E0132,\n                                       \"start function is not allowed to have type parameters\");"}, {"sha": "9c64b7b4ab623dcb3aa303e32aff7f6046ff7651", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3795721cd9ffc591eeeb077df16d3658be150f/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3795721cd9ffc591eeeb077df16d3658be150f/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=af3795721cd9ffc591eeeb077df16d3658be150f", "patch": "@@ -175,6 +175,7 @@ fn build_external_function(cx: &DocContext, tcx: &ty::ctxt, did: ast::DefId) ->\n         decl: decl,\n         generics: (&t.generics, &predicates, subst::FnSpace).clean(cx),\n         unsafety: style,\n+        constness: ast::Constness::NotConst,\n         abi: abi,\n     }\n }\n@@ -348,6 +349,7 @@ pub fn build_impl(cx: &DocContext,\n                     }) => {\n                         clean::MethodItem(clean::Method {\n                             unsafety: unsafety,\n+                            constness: ast::Constness::NotConst,\n                             decl: decl,\n                             self_: self_,\n                             generics: generics,"}, {"sha": "c2ae8020f284cf2a0cf97e6b62b3296f4a3b18c1", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/af3795721cd9ffc591eeeb077df16d3658be150f/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3795721cd9ffc591eeeb077df16d3658be150f/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=af3795721cd9ffc591eeeb077df16d3658be150f", "patch": "@@ -989,6 +989,7 @@ pub struct Method {\n     pub generics: Generics,\n     pub self_: SelfTy,\n     pub unsafety: ast::Unsafety,\n+    pub constness: ast::Constness,\n     pub decl: FnDecl,\n     pub abi: abi::Abi\n }\n@@ -1010,7 +1011,8 @@ impl Clean<Method> for ast::MethodSig {\n         Method {\n             generics: self.generics.clean(cx),\n             self_: self.explicit_self.node.clean(cx),\n-            unsafety: self.unsafety.clone(),\n+            unsafety: self.unsafety,\n+            constness: self.constness,\n             decl: decl,\n             abi: self.abi\n         }\n@@ -1075,7 +1077,8 @@ pub struct Function {\n     pub decl: FnDecl,\n     pub generics: Generics,\n     pub unsafety: ast::Unsafety,\n-    pub abi: abi::Abi\n+    pub constness: ast::Constness,\n+    pub abi: abi::Abi,\n }\n \n impl Clean<Item> for doctree::Function {\n@@ -1091,6 +1094,7 @@ impl Clean<Item> for doctree::Function {\n                 decl: self.decl.clean(cx),\n                 generics: self.generics.clean(cx),\n                 unsafety: self.unsafety,\n+                constness: self.constness,\n                 abi: self.abi,\n             }),\n         }\n@@ -2453,6 +2457,7 @@ impl Clean<Item> for ast::ForeignItem {\n                     generics: generics.clean(cx),\n                     unsafety: ast::Unsafety::Unsafe,\n                     abi: abi::Rust,\n+                    constness: ast::Constness::NotConst,\n                 })\n             }\n             ast::ForeignItemStatic(ref ty, mutbl) => {"}, {"sha": "cadd43ec6bfd8eee0c380883c677d55603c4bbb4", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/af3795721cd9ffc591eeeb077df16d3658be150f/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3795721cd9ffc591eeeb077df16d3658be150f/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=af3795721cd9ffc591eeeb077df16d3658be150f", "patch": "@@ -133,6 +133,7 @@ pub struct Function {\n     pub vis: ast::Visibility,\n     pub stab: Option<attr::Stability>,\n     pub unsafety: ast::Unsafety,\n+    pub constness: ast::Constness,\n     pub whence: Span,\n     pub generics: ast::Generics,\n     pub abi: abi::Abi,"}, {"sha": "a68e21aa01d9dee7c6491443646249c242d066a3", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/af3795721cd9ffc591eeeb077df16d3658be150f/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3795721cd9ffc591eeeb077df16d3658be150f/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=af3795721cd9ffc591eeeb077df16d3658be150f", "patch": "@@ -35,6 +35,10 @@ pub struct VisSpace(pub Option<ast::Visibility>);\n /// space after it.\n #[derive(Copy, Clone)]\n pub struct UnsafetySpace(pub ast::Unsafety);\n+/// Similarly to VisSpace, this structure is used to render a function constness\n+/// with a space after it.\n+#[derive(Copy)]\n+pub struct ConstnessSpace(pub ast::Constness);\n /// Wrapper struct for properly emitting a method declaration.\n pub struct Method<'a>(pub &'a clean::SelfTy, pub &'a clean::FnDecl);\n /// Similar to VisSpace, but used for mutability\n@@ -63,6 +67,12 @@ impl UnsafetySpace {\n     }\n }\n \n+impl ConstnessSpace {\n+    pub fn get(&self) -> ast::Constness {\n+        let ConstnessSpace(v) = *self; v\n+    }\n+}\n+\n impl<'a, T: fmt::Display> fmt::Display for CommaSep<'a, T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         for (i, item) in self.0.iter().enumerate() {\n@@ -607,6 +617,15 @@ impl fmt::Display for UnsafetySpace {\n     }\n }\n \n+impl fmt::Display for ConstnessSpace {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        match self.get() {\n+            ast::Constness::Const => write!(f, \"const \"),\n+            ast::Constness::NotConst => Ok(())\n+        }\n+    }\n+}\n+\n impl fmt::Display for clean::Import {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {"}, {"sha": "582f17168991ffd2ffd6a6c0fc614bdc8ab49daf", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 20, "deletions": 13, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/af3795721cd9ffc591eeeb077df16d3658be150f/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3795721cd9ffc591eeeb077df16d3658be150f/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=af3795721cd9ffc591eeeb077df16d3658be150f", "patch": "@@ -63,6 +63,7 @@ use clean;\n use doctree;\n use fold::DocFolder;\n use html::escape::Escape;\n+use html::format::{ConstnessSpace};\n use html::format::{TyParamBounds, WhereClause, href, AbiSpace};\n use html::format::{VisSpace, Method, UnsafetySpace, MutableSpace};\n use html::highlight;\n@@ -1753,11 +1754,12 @@ fn item_static(w: &mut fmt::Formatter, it: &clean::Item,\n \n fn item_function(w: &mut fmt::Formatter, it: &clean::Item,\n                  f: &clean::Function) -> fmt::Result {\n-    try!(write!(w, \"<pre class='rust fn'>{vis}{unsafety}{abi}fn \\\n+    try!(write!(w, \"<pre class='rust fn'>{vis}{unsafety}{abi}{constness}fn \\\n                     {name}{generics}{decl}{where_clause}</pre>\",\n            vis = VisSpace(it.visibility),\n            unsafety = UnsafetySpace(f.unsafety),\n            abi = AbiSpace(f.abi),\n+           constness = ConstnessSpace(f.constness),\n            name = it.name.as_ref().unwrap(),\n            generics = f.generics,\n            where_clause = WhereClause(&f.generics),\n@@ -1957,10 +1959,16 @@ fn assoc_type(w: &mut fmt::Formatter, it: &clean::Item,\n \n fn render_assoc_item(w: &mut fmt::Formatter, meth: &clean::Item,\n                      link: AssocItemLink) -> fmt::Result {\n-    fn method(w: &mut fmt::Formatter, it: &clean::Item,\n-              unsafety: ast::Unsafety, abi: abi::Abi,\n-              g: &clean::Generics, selfty: &clean::SelfTy,\n-              d: &clean::FnDecl, link: AssocItemLink) -> fmt::Result {\n+    fn method(w: &mut fmt::Formatter,\n+              it: &clean::Item,\n+              unsafety: ast::Unsafety,\n+              constness: ast::Constness,\n+              abi: abi::Abi,\n+              g: &clean::Generics,\n+              selfty: &clean::SelfTy,\n+              d: &clean::FnDecl,\n+              link: AssocItemLink)\n+              -> fmt::Result {\n         use syntax::abi::Abi;\n \n         let name = it.name.as_ref().unwrap();\n@@ -1971,12 +1979,10 @@ fn render_assoc_item(w: &mut fmt::Formatter, meth: &clean::Item,\n                 href(did).map(|p| format!(\"{}{}\", p.0, anchor)).unwrap_or(anchor)\n             }\n         };\n-        write!(w, \"{}{}fn <a href='{href}' class='fnname'>{name}</a>\\\n+        write!(w, \"{}{}{}fn <a href='{href}' class='fnname'>{name}</a>\\\n                    {generics}{decl}{where_clause}\",\n-               match unsafety {\n-                   ast::Unsafety::Unsafe => \"unsafe \",\n-                   _ => \"\",\n-               },\n+               UnsafetySpace(unsafety),\n+               ConstnessSpace(constness),\n                match abi {\n                    Abi::Rust => String::new(),\n                    a => format!(\"extern {} \", a.to_string())\n@@ -1989,11 +1995,12 @@ fn render_assoc_item(w: &mut fmt::Formatter, meth: &clean::Item,\n     }\n     match meth.inner {\n         clean::TyMethodItem(ref m) => {\n-            method(w, meth, m.unsafety, m.abi, &m.generics, &m.self_, &m.decl,\n-                   link)\n+            method(w, meth, m.unsafety, ast::Constness::NotConst,\n+                   m.abi, &m.generics, &m.self_, &m.decl, link)\n         }\n         clean::MethodItem(ref m) => {\n-            method(w, meth, m.unsafety, m.abi, &m.generics, &m.self_, &m.decl,\n+            method(w, meth, m.unsafety, m.constness,\n+                   m.abi, &m.generics, &m.self_, &m.decl,\n                    link)\n         }\n         clean::AssociatedConstItem(ref ty, ref default) => {"}, {"sha": "92348aa648dc6ffc33e391a87dc93608b2f7de99", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/af3795721cd9ffc591eeeb077df16d3658be150f/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3795721cd9ffc591eeeb077df16d3658be150f/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=af3795721cd9ffc591eeeb077df16d3658be150f", "patch": "@@ -123,7 +123,9 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n \n     pub fn visit_fn(&mut self, item: &ast::Item,\n                     name: ast::Ident, fd: &ast::FnDecl,\n-                    unsafety: &ast::Unsafety, abi: &abi::Abi,\n+                    unsafety: &ast::Unsafety,\n+                    constness: ast::Constness,\n+                    _abi: &abi::Abi,\n                     gen: &ast::Generics) -> Function {\n         debug!(\"Visiting fn\");\n         Function {\n@@ -136,6 +138,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             whence: item.span,\n             generics: gen.clone(),\n             unsafety: *unsafety,\n+            constness: constness,\n             abi: *abi,\n         }\n     }\n@@ -291,8 +294,9 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                 om.enums.push(self.visit_enum_def(item, name, ed, gen)),\n             ast::ItemStruct(ref sd, ref gen) =>\n                 om.structs.push(self.visit_struct_def(item, name, &**sd, gen)),\n-            ast::ItemFn(ref fd, ref pur, ref abi, ref gen, _) =>\n-                om.fns.push(self.visit_fn(item, name, &**fd, pur, abi, gen)),\n+            ast::ItemFn(ref fd, unsafety, constness, ref abi, ref gen, _) =>\n+                om.fns.push(self.visit_fn(item, name, &**fd, unsafety,\n+                                          constness, abi, gen)),\n             ast::ItemTy(ref ty, ref gen) => {\n                 let t = Typedef {\n                     ty: ty.clone(),"}, {"sha": "bd7fb441bf53ea4760e91f58115cdcddc790b0d4", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/af3795721cd9ffc591eeeb077df16d3658be150f/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3795721cd9ffc591eeeb077df16d3658be150f/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=af3795721cd9ffc591eeeb077df16d3658be150f", "patch": "@@ -1475,6 +1475,12 @@ pub enum Unsafety {\n     Normal,\n }\n \n+#[derive(Copy, Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n+pub enum Constness {\n+    Const,\n+    NotConst,\n+}\n+\n impl fmt::Display for Unsafety {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         fmt::Display::fmt(match *self {\n@@ -1543,6 +1549,7 @@ pub enum ExplicitSelf_ {\n pub type ExplicitSelf = Spanned<ExplicitSelf_>;\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n+             Constness,\n pub struct Mod {\n     /// A span from the first token past `{` to the last token until `}`.\n     /// For `mod foo;`, the inner span ranges from the first token\n@@ -1761,7 +1768,7 @@ pub enum Item_ {\n     /// A `const` item\n     ItemConst(P<Ty>, P<Expr>),\n     /// A function declaration\n-    ItemFn(P<FnDecl>, Unsafety, Abi, Generics, P<Block>),\n+    ItemFn(P<FnDecl>, Unsafety, Constness, Abi, Generics, P<Block>),\n     /// A module\n     ItemMod(Mod),\n     /// An external module"}, {"sha": "8b2b2fbeca1407280d0bab046705bafad6a0eda1", "filename": "src/libsyntax/ast_map/blocks.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/af3795721cd9ffc591eeeb077df16d3658be150f/src%2Flibsyntax%2Fast_map%2Fblocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3795721cd9ffc591eeeb077df16d3658be150f/src%2Flibsyntax%2Fast_map%2Fblocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map%2Fblocks.rs?ref=af3795721cd9ffc591eeeb077df16d3658be150f", "patch": "@@ -120,6 +120,7 @@ struct ItemFnParts<'a> {\n     ident:    ast::Ident,\n     decl:     &'a ast::FnDecl,\n     unsafety: ast::Unsafety,\n+    constness: ast::Constness,\n     abi:      abi::Abi,\n     vis:      ast::Visibility,\n     generics: &'a ast::Generics,\n@@ -180,7 +181,7 @@ impl<'a> FnLikeNode<'a> {\n \n     pub fn kind(self) -> visit::FnKind<'a> {\n         let item = |p: ItemFnParts<'a>| -> visit::FnKind<'a> {\n-            visit::FkItemFn(p.ident, p.generics, p.unsafety, p.abi, p.vis)\n+            visit::FkItemFn(p.ident, p.generics, p.unsafety, p.abi, p.constness, p.vis)\n         };\n         let closure = |_: ClosureParts| {\n             visit::FkFnBlock\n@@ -204,10 +205,19 @@ impl<'a> FnLikeNode<'a> {\n     {\n         match self.node {\n             ast_map::NodeItem(i) => match i.node {\n-                ast::ItemFn(ref decl, unsafety, abi, ref generics, ref block) =>\n-                    item_fn(ItemFnParts{\n-                        ident: i.ident, decl: &**decl, unsafety: unsafety, body: &**block,\n-                        generics: generics, abi: abi, vis: i.vis, id: i.id, span: i.span\n+                ast::ItemFn(ref decl, unsafety, constness, ref abi, ref generics, ref block) =>\n+                    item_fn(ItemFnParts {\n+                        id: i.id,\n+                        ident: i.ident,\n+                        decl: &**decl,\n+                        unsafety: unsafety,\n+                        constness: constness,\n+                        body: &**block,\n+                        generics: generics,\n+                        abi: abi,\n+                        vis: i.vis,\n+                        constness: constness,\n+                        span: i.span\n                     }),\n                 _ => panic!(\"item FnLikeNode that is not fn-like\"),\n             },"}, {"sha": "45db8cc7b25a5ade6f55bc2a09f471691c5205d9", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/af3795721cd9ffc591eeeb077df16d3658be150f/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3795721cd9ffc591eeeb077df16d3658be150f/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=af3795721cd9ffc591eeeb077df16d3658be150f", "patch": "@@ -251,6 +251,7 @@ pub fn impl_pretty_name(trait_ref: &Option<TraitRef>, ty: Option<&Ty>) -> Ident\n     token::gensym_ident(&pretty[..])\n }\n \n+                 _,\n pub fn struct_field_visibility(field: ast::StructField) -> Visibility {\n     match field.node.kind {\n         ast::NamedField(_, v) | ast::UnnamedField(v) => v"}, {"sha": "8a80e291a538405f38c11e9911be3d3421fa855c", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/af3795721cd9ffc591eeeb077df16d3658be150f/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3795721cd9ffc591eeeb077df16d3658be150f/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=af3795721cd9ffc591eeeb077df16d3658be150f", "patch": "@@ -1034,6 +1034,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n                   Vec::new(),\n                   ast::ItemFn(self.fn_decl(inputs, output),\n                               ast::Unsafety::Normal,\n+                              ast::Constness::NotConst,\n                               abi::Rust,\n                               generics,\n                               body))"}, {"sha": "eab6c3ae7251a1f41a2e58e7baacce72b966aca5", "filename": "src/libsyntax/ext/deriving/generic/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/af3795721cd9ffc591eeeb077df16d3658be150f/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3795721cd9ffc591eeeb077df16d3658be150f/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs?ref=af3795721cd9ffc591eeeb077df16d3658be150f", "patch": "@@ -880,6 +880,7 @@ impl<'a> MethodDef<'a> {\n                 abi: abi,\n                 explicit_self: explicit_self,\n                 unsafety: unsafety,\n+                constness: ast::Constness::NotConst,\n                 decl: fn_decl\n             }, body_block)\n         })"}, {"sha": "912cc841a642b6fa24cb55dddda67031952ec5c8", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/af3795721cd9ffc591eeeb077df16d3658be150f/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3795721cd9ffc591eeeb077df16d3658be150f/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=af3795721cd9ffc591eeeb077df16d3658be150f", "patch": "@@ -513,11 +513,12 @@ pub fn expand_item(it: P<ast::Item>, fld: &mut MacroExpander)\n /// Expand item_underscore\n fn expand_item_underscore(item: ast::Item_, fld: &mut MacroExpander) -> ast::Item_ {\n     match item {\n-        ast::ItemFn(decl, fn_style, abi, generics, body) => {\n+        ast::ItemFn(decl, unsafety, constness, abi, generics, body) => {\n             let (rewritten_fn_decl, rewritten_body)\n                 = expand_and_rename_fn_decl_and_block(decl, body, fld);\n             let expanded_generics = fold::noop_fold_generics(generics,fld);\n-            ast::ItemFn(rewritten_fn_decl, fn_style, abi, expanded_generics, rewritten_body)\n+            ast::ItemFn(rewritten_fn_decl, unsafety, constness, abi,\n+                        expanded_generics, rewritten_body)\n         }\n         _ => noop_fold_item_underscore(item, fld)\n     }"}, {"sha": "84546679b23b2a88d8392973339b575eccd799a0", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af3795721cd9ffc591eeeb077df16d3658be150f/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3795721cd9ffc591eeeb077df16d3658be150f/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=af3795721cd9ffc591eeeb077df16d3658be150f", "patch": "@@ -641,12 +641,12 @@ impl<'a, 'v> Visitor<'v> for PostExpansionVisitor<'a> {\n                 span: Span,\n                 _node_id: NodeId) {\n         match fn_kind {\n-            visit::FkItemFn(_, _, _, abi, _) if abi == Abi::RustIntrinsic => {\n+            visit::FkItemFn(_, _, _, _, abi, _) if abi == Abi::RustIntrinsic => {\n                 self.gate_feature(\"intrinsics\",\n                                   span,\n                                   \"intrinsics are subject to change\")\n             }\n-            visit::FkItemFn(_, _, _, abi, _) |\n+            visit::FkItemFn(_, _, _, _, abi, _) |\n             visit::FkMethod(_, &ast::MethodSig { abi, .. }, _) if abi == Abi::RustCall => {\n                 self.gate_feature(\"unboxed_closures\",\n                                   span,"}, {"sha": "c2382eaf82e372c002c2af587a9ae6d84cc29edf", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/af3795721cd9ffc591eeeb077df16d3658be150f/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3795721cd9ffc591eeeb077df16d3658be150f/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=af3795721cd9ffc591eeeb077df16d3658be150f", "patch": "@@ -917,10 +917,11 @@ pub fn noop_fold_item_underscore<T: Folder>(i: Item_, folder: &mut T) -> Item_ {\n         ItemConst(t, e) => {\n             ItemConst(folder.fold_ty(t), folder.fold_expr(e))\n         }\n-        ItemFn(decl, unsafety, abi, generics, body) => {\n+        ItemFn(decl, unsafety, constness, abi, generics, body) => {\n             ItemFn(\n                 folder.fold_fn_decl(decl),\n                 unsafety,\n+                constness,\n                 abi,\n                 folder.fold_generics(generics),\n                 folder.fold_block(body)\n@@ -1126,6 +1127,8 @@ pub fn noop_fold_method_sig<T: Folder>(sig: MethodSig, folder: &mut T) -> Method\n         unsafety: sig.unsafety,\n         decl: folder.fold_fn_decl(sig.decl)\n     }\n+                     constness,\n+                         constness,\n }\n \n pub fn noop_fold_pat<T: Folder>(p: P<Pat>, folder: &mut T) -> P<Pat> {"}, {"sha": "6fba8fd47fdce9b300d49720351b8111cf93ec3f", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 39, "deletions": 12, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/af3795721cd9ffc591eeeb077df16d3658be150f/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3795721cd9ffc591eeeb077df16d3658be150f/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=af3795721cd9ffc591eeeb077df16d3658be150f", "patch": "@@ -17,7 +17,7 @@ use ast::{Public, Unsafety};\n use ast::{Mod, BiAdd, Arg, Arm, Attribute, BindByRef, BindByValue};\n use ast::{BiBitAnd, BiBitOr, BiBitXor, BiRem, BiLt, BiGt, Block};\n use ast::{BlockCheckMode, CaptureByRef, CaptureByValue, CaptureClause};\n-use ast::{ConstImplItem, ConstTraitItem, Crate, CrateConfig};\n+use ast::{Constness, ConstImplItem, ConstTraitItem, Crate, CrateConfig};\n use ast::{Decl, DeclItem, DeclLocal, DefaultBlock, DefaultReturn};\n use ast::{UnDeref, BiDiv, EMPTY_CTXT, EnumDef, ExplicitSelf};\n use ast::{Expr, Expr_, ExprAddrOf, ExprMatch, ExprAgain};\n@@ -1175,7 +1175,7 @@ impl<'a> Parser<'a> {\n                 };\n                 (ident, ConstTraitItem(ty, default))\n             } else {\n-                let style = try!(p.parse_unsafety());\n+                let unsafety = try!(p.parse_unsafety());\n                 let abi = if try!(p.eat_keyword(keywords::Extern)) {\n                     try!(p.parse_opt_abi()).unwrap_or(abi::C)\n                 } else {\n@@ -1195,7 +1195,8 @@ impl<'a> Parser<'a> {\n \n                 generics.where_clause = try!(p.parse_where_clause());\n                 let sig = ast::MethodSig {\n-                    unsafety: style,\n+                    unsafety: unsafety,\n+                    constness: ast::Constness::NotConst;\n                     decl: d,\n                     generics: generics,\n                     abi: abi,\n@@ -4359,12 +4360,16 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Parse an item-position function declaration.\n-    fn parse_item_fn(&mut self, unsafety: Unsafety, abi: abi::Abi) -> PResult<ItemInfo> {\n+    fn parse_item_fn(&mut self,\n+                     unsafety: Unsafety,\n+                     constness: Constness,\n+                     abi: abi::Abi)\n+                     -> PResult<ItemInfo> {\n         let (ident, mut generics) = try!(self.parse_fn_header());\n         let decl = try!(self.parse_fn_decl(false));\n         generics.where_clause = try!(self.parse_where_clause());\n         let (inner_attrs, body) = try!(self.parse_inner_attrs_and_block());\n-        Ok((ident, ItemFn(decl, unsafety, abi, generics, body), Some(inner_attrs)))\n+        Ok((ident, ItemFn(decl, unsafety, constness, abi, generics, body), Some(inner_attrs)))\n     }\n \n     /// Parse an impl item.\n@@ -4445,11 +4450,17 @@ impl<'a> Parser<'a> {\n             }\n             Ok((token::special_idents::invalid, vec![], ast::MacImplItem(m)))\n         } else {\n-            let unsafety = try!(self.parse_unsafety());\n-            let abi = if try!(self.eat_keyword(keywords::Extern)) {\n-                try!(self.parse_opt_abi()).unwrap_or(abi::C)\n+            let is_const_fn = !is_trait_impl && self.eat_keyword(keywords::Const);\n+            let (constness, unsafety, abi) = if is_const_fn {\n+                (Constness::Const, Unsafety::Normal, abi::Rust)\n             } else {\n-                abi::Rust\n+                let unsafety = try!(self.parse_unsafety());\n+                let abi = if try!(self.eat_keyword(keywords::Extern)) {\n+                    try!(self.parse_opt_abi()).unwrap_or(abi::C)\n+                } else {\n+                    abi::Rust\n+                };\n+                (Constness::NotConst, unsafety, abi)\n             };\n             try!(self.expect_keyword(keywords::Fn));\n             let ident = try!(self.parse_ident());\n@@ -4464,6 +4475,7 @@ impl<'a> Parser<'a> {\n                 abi: abi,\n                 explicit_self: explicit_self,\n                 unsafety: unsafety,\n+                constness: constness;\n                 decl: decl\n              }, body)))\n         }\n@@ -5252,7 +5264,7 @@ impl<'a> Parser<'a> {\n                 // EXTERN FUNCTION ITEM\n                 let abi = opt_abi.unwrap_or(abi::C);\n                 let (ident, item_, extra_attrs) =\n-                    try!(self.parse_item_fn(Unsafety::Normal, abi));\n+                    try!(self.parse_item_fn(Unsafety::Normal, Constness::NotConst, abi));\n                 let last_span = self.last_span;\n                 let item = self.mk_item(lo,\n                                         last_span.hi,\n@@ -5287,6 +5299,21 @@ impl<'a> Parser<'a> {\n             return Ok(Some(item));\n         }\n         if try!(self.eat_keyword(keywords::Const) ){\n+            if self.check_keyword(keywords::Fn) {\n+                // CONST FUNCTION ITEM\n+                self.bump();\n+                let (ident, item_, extra_attrs) =\n+                    self.parse_item_fn(Unsafety::Normal, Constness::Const, abi::Rust);\n+                let last_span = self.last_span;\n+                let item = self.mk_item(lo,\n+                                        last_span.hi,\n+                                        ident,\n+                                        item_,\n+                                        visibility,\n+                                        maybe_append(attrs, extra_attrs));\n+                return Ok(item);\n+            }\n+\n             // CONST ITEM\n             if try!(self.eat_keyword(keywords::Mut) ){\n                 let last_span = self.last_span;\n@@ -5340,7 +5367,7 @@ impl<'a> Parser<'a> {\n             // FUNCTION ITEM\n             try!(self.bump());\n             let (ident, item_, extra_attrs) =\n-                try!(self.parse_item_fn(Unsafety::Normal, abi::Rust));\n+                try!(self.parse_item_fn(Unsafety::Normal, Constness::NotConst, abi::Rust));\n             let last_span = self.last_span;\n             let item = self.mk_item(lo,\n                                     last_span.hi,\n@@ -5361,7 +5388,7 @@ impl<'a> Parser<'a> {\n             };\n             try!(self.expect_keyword(keywords::Fn));\n             let (ident, item_, extra_attrs) =\n-                try!(self.parse_item_fn(Unsafety::Unsafe, abi));\n+                try!(self.parse_item_fn(Unsafety::Unsafe, Constness::NotConst, abi));\n             let last_span = self.last_span;\n             let item = self.mk_item(lo,\n                                     last_span.hi,"}, {"sha": "5889b968f41461dbb10a617b356c2dd734daa8db", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 41, "deletions": 8, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/af3795721cd9ffc591eeeb077df16d3658be150f/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3795721cd9ffc591eeeb077df16d3658be150f/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=af3795721cd9ffc591eeeb077df16d3658be150f", "patch": "@@ -378,12 +378,28 @@ pub fn ident_to_string(id: &ast::Ident) -> String {\n     to_string(|s| s.print_ident(*id))\n }\n \n+<<<<<<< HEAD\n pub fn fun_to_string(decl: &ast::FnDecl, unsafety: ast::Unsafety, name: ast::Ident,\n                   opt_explicit_self: Option<&ast::ExplicitSelf_>,\n                   generics: &ast::Generics) -> String {\n     to_string(|s| {\n+||||||| parent of 61a958e... syntax: parse `const fn` for free functions and inherent methods.\n+pub fn fun_to_string(decl: &ast::FnDecl, unsafety: ast::Unsafety, name: ast::Ident,\n+                  opt_explicit_self: Option<&ast::ExplicitSelf_>,\n+                  generics: &ast::Generics) -> String {\n+    $to_string(|s| {\n+=======\n+pub fn fun_to_string(decl: &ast::FnDecl,\n+                     unsafety: ast::Unsafety,\n+                     constness: ast::Constness,\n+                     name: ast::Ident,\n+                     opt_explicit_self: Option<&ast::ExplicitSelf_>,\n+                     generics: &ast::Generics)\n+                     -> String {\n+    $to_string(|s| {\n+>>>>>>> 61a958e... syntax: parse `const fn` for free functions and inherent methods.\n         try!(s.head(\"\"));\n-        try!(s.print_fn(decl, unsafety, abi::Rust, Some(name),\n+        try!(s.print_fn(decl, unsafety, constness, abi::Rust, Some(name),\n                         generics, opt_explicit_self, ast::Inherited));\n         try!(s.end()); // Close the head box\n         s.end() // Close the outer box\n@@ -740,7 +756,8 @@ impl<'a> State<'a> {\n         match item.node {\n             ast::ForeignItemFn(ref decl, ref generics) => {\n                 try!(self.head(\"\"));\n-                try!(self.print_fn(&**decl, ast::Unsafety::Normal,\n+                try!(self.print_fn(decl, ast::Unsafety::Normal,\n+                                   ast::Constness::NotConst,\n                                    abi::Rust, Some(item.ident),\n                                    generics, None, item.vis));\n                 try!(self.end()); // end head-ibox\n@@ -866,11 +883,12 @@ impl<'a> State<'a> {\n                 try!(word(&mut self.s, \";\"));\n                 try!(self.end()); // end the outer cbox\n             }\n-            ast::ItemFn(ref decl, unsafety, abi, ref typarams, ref body) => {\n+            ast::ItemFn(ref decl, unsafety, constness, abi, ref typarams, ref body) => {\n                 try!(self.head(\"\"));\n                 try!(self.print_fn(\n                     decl,\n                     unsafety,\n+                    constness,\n                     abi,\n                     Some(item.ident),\n                     typarams,\n@@ -1241,6 +1259,7 @@ impl<'a> State<'a> {\n                             -> io::Result<()> {\n         self.print_fn(&m.decl,\n                       m.unsafety,\n+                      m.constness,\n                       m.abi,\n                       Some(ident),\n                       &m.generics,\n@@ -2335,12 +2354,13 @@ impl<'a> State<'a> {\n     pub fn print_fn(&mut self,\n                     decl: &ast::FnDecl,\n                     unsafety: ast::Unsafety,\n+                    constness: ast::Constness,\n                     abi: abi::Abi,\n                     name: Option<ast::Ident>,\n                     generics: &ast::Generics,\n                     opt_explicit_self: Option<&ast::ExplicitSelf_>,\n                     vis: ast::Visibility) -> io::Result<()> {\n-        try!(self.print_fn_header_info(unsafety, abi, vis));\n+        try!(self.print_fn_header_info(unsafety, constness, abi, vis));\n \n         if let Some(name) = name {\n             try!(self.nbsp());\n@@ -2726,8 +2746,13 @@ impl<'a> State<'a> {\n                 predicates: Vec::new(),\n             },\n         };\n-        try!(self.print_fn(decl, unsafety, abi, name,\n-                           &generics, opt_explicit_self,\n+        try!(self.print_fn(decl,\n+                           unsafety,\n+                           ast::Constness::NotConst,\n+                           abi,\n+                           name,\n+                           generics,\n+                           opt_explicit_self,\n                            ast::Inherited));\n         self.end()\n     }\n@@ -2976,11 +3001,17 @@ impl<'a> State<'a> {\n \n     pub fn print_fn_header_info(&mut self,\n                                 unsafety: ast::Unsafety,\n+                                constness: ast::Constness,\n                                 abi: abi::Abi,\n                                 vis: ast::Visibility) -> io::Result<()> {\n         try!(word(&mut self.s, &visibility_qualified(vis, \"\")));\n         try!(self.print_unsafety(unsafety));\n \n+        match constness {\n+            ast::Constness::NotConst => {}\n+            ast::Constness::Const => try!(self.word_nbsp(\"unsafe\"))\n+        }\n+\n         if abi != abi::Rust {\n             try!(self.word_nbsp(\"extern\"));\n             try!(self.word_nbsp(&abi.to_string()));\n@@ -3018,8 +3049,10 @@ mod tests {\n             variadic: false\n         };\n         let generics = ast_util::empty_generics();\n-        assert_eq!(fun_to_string(&decl, ast::Unsafety::Normal, abba_ident,\n-                               None, &generics),\n+        assert_eq!(fun_to_string(&decl, ast::Unsafety::Normal,\n+                                 ast::Constness::NotConst,\n+                                 abba_ident,\n+                                 None, &generics),\n                    \"fn abba()\");\n     }\n "}, {"sha": "c680d5bbbdf7ad24581aacf11fd08e6b97edc0a3", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/af3795721cd9ffc591eeeb077df16d3658be150f/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3795721cd9ffc591eeeb077df16d3658be150f/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=af3795721cd9ffc591eeeb077df16d3658be150f", "patch": "@@ -123,7 +123,7 @@ impl<'a> fold::Folder for TestHarnessGenerator<'a> {\n \n         let i = if is_test_fn(&self.cx, &*i) || is_bench_fn(&self.cx, &*i) {\n             match i.node {\n-                ast::ItemFn(_, ast::Unsafety::Unsafe, _, _, _) => {\n+                ast::ItemFn(_, ast::Unsafety::Unsafe, _, _, _, _) => {\n                     let diag = self.cx.span_diagnostic;\n                     panic!(diag.span_fatal(i.span, \"unsafe functions cannot be used for tests\"));\n                 }\n@@ -320,7 +320,7 @@ fn is_test_fn(cx: &TestCtxt, i: &ast::Item) -> bool {\n \n     fn has_test_signature(i: &ast::Item) -> HasTestSignature {\n         match &i.node {\n-          &ast::ItemFn(ref decl, _, _, ref generics, _) => {\n+          &ast::ItemFn(ref decl, _, _, _, ref generics, _) => {\n             let no_output = match decl.output {\n                 ast::DefaultReturn(..) => true,\n                 ast::Return(ref t) if t.node == ast::TyTup(vec![]) => true,\n@@ -356,7 +356,7 @@ fn is_bench_fn(cx: &TestCtxt, i: &ast::Item) -> bool {\n \n     fn has_test_signature(i: &ast::Item) -> bool {\n         match i.node {\n-            ast::ItemFn(ref decl, _, _, ref generics, _) => {\n+            ast::ItemFn(ref decl, _, _, _, ref generics, _) => {\n                 let input_cnt = decl.inputs.len();\n                 let no_output = match decl.output {\n                     ast::DefaultReturn(..) => true,\n@@ -469,7 +469,9 @@ fn mk_main(cx: &mut TestCtxt) -> P<ast::Item> {\n     let main_ret_ty = ecx.ty(sp, ast::TyTup(vec![]));\n     let main_body = ecx.block_all(sp, vec![call_test_main], None);\n     let main = ast::ItemFn(ecx.fn_decl(vec![], main_ret_ty),\n-                           ast::Unsafety::Normal, ::abi::Rust, empty_generics(), main_body);\n+                           ast::Unsafety::Normal,\n+                           ast::Constness::NotConst,\n+                           ::abi::Rust, empty_generics(), main_body);\n     let main = P(ast::Item {\n         ident: token::str_to_ident(\"main\"),\n         attrs: vec![main_attr],"}, {"sha": "b9b81bd7c6f8e0cf0057044f698c12f8b9eb98bf", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/af3795721cd9ffc591eeeb077df16d3658be150f/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3795721cd9ffc591eeeb077df16d3658be150f/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=af3795721cd9ffc591eeeb077df16d3658be150f", "patch": "@@ -35,7 +35,7 @@ use owned_slice::OwnedSlice;\n #[derive(Copy, Clone)]\n pub enum FnKind<'a> {\n     /// fn foo() or extern \"Abi\" fn foo()\n-    FkItemFn(Ident, &'a Generics, Unsafety, Abi, Visibility),\n+    FkItemFn(Ident, &'a Generics, Unsafety, Constness, Abi, Visibility),\n \n     /// fn foo(&self)\n     FkMethod(Ident, &'a MethodSig, Option<Visibility>),\n@@ -246,8 +246,9 @@ pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item) {\n             visitor.visit_ty(&**typ);\n             visitor.visit_expr(&**expr);\n         }\n-        ItemFn(ref declaration, fn_style, abi, ref generics, ref body) => {\n-            visitor.visit_fn(FkItemFn(item.ident, generics, fn_style, abi, item.vis),\n+        ItemFn(ref declaration, unsafety, constness, abi, ref generics, ref body) => {\n+            visitor.visit_fn(FkItemFn(item.ident, generics, unsafety,\n+                                      constness, abi, item.vis),\n                              &**declaration,\n                              &**body,\n                              item.span,"}]}