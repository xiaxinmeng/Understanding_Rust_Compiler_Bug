{"sha": "0d1754e8bf6942b4c1d24d7c923438782129ba5a", "node_id": "C_kwDOAAsO6NoAKDBkMTc1NGU4YmY2OTQyYjRjMWQyNGQ3YzkyMzQzODc4MjEyOWJhNWE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-05T19:05:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-05T19:05:36Z"}, "message": "Auto merge of #90583 - willcrichton:example-analyzer, r=jyn514\n\nFix ICE when rustdoc is scraping examples inside of a proc macro\n\nThis PR provides a clearer semantics for how --scrape-examples interacts with macros. If an expression's span AND it's enclosing item's span both are not `from_expansion`, then the example will be scraped. The added test case `rustdoc-scrape-examples-macros` shows a variety of situations.\n\n* A macro-rules macro that takes a function call as input: good\n* A macro-rules macro that generates a function call as output: bad\n* A proc-macro that generates a function call as output: bad\n* An attribute macro that generates a function call as output: bad\n* An attribute macro that takes a function call as input: good, if the proc macro is designed to propagate the input spans\n\nI ran this updated rustdoc on pyo3 and confirmed that it successfully scrapes examples from inside a proc macro, eg\n\n<img width=\"1013\" alt=\"Screen Shot 2021-11-04 at 1 11 28 PM\" src=\"https://user-images.githubusercontent.com/663326/140412691-81a3bb6b-a448-4a1b-a293-f7a795553634.png\">\n\n(cc `@mejrs)`\n\nAdditionally, this PR fixes an ordering bug in the highlighting logic.\n\nFixes https://github.com/rust-lang/rust/issues/90567.\n\nr? `@jyn514`", "tree": {"sha": "4776ca716504a5a1c13ac8a9062b90f62115d60d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4776ca716504a5a1c13ac8a9062b90f62115d60d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d1754e8bf6942b4c1d24d7c923438782129ba5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d1754e8bf6942b4c1d24d7c923438782129ba5a", "html_url": "https://github.com/rust-lang/rust/commit/0d1754e8bf6942b4c1d24d7c923438782129ba5a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d1754e8bf6942b4c1d24d7c923438782129ba5a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "045612b8b97b344d55c13b9aad3cfb3e98405b77", "url": "https://api.github.com/repos/rust-lang/rust/commits/045612b8b97b344d55c13b9aad3cfb3e98405b77", "html_url": "https://github.com/rust-lang/rust/commit/045612b8b97b344d55c13b9aad3cfb3e98405b77"}, {"sha": "82b23be3c1c79b2326964ae6aa4eebd788bab691", "url": "https://api.github.com/repos/rust-lang/rust/commits/82b23be3c1c79b2326964ae6aa4eebd788bab691", "html_url": "https://github.com/rust-lang/rust/commit/82b23be3c1c79b2326964ae6aa4eebd788bab691"}], "stats": {"total": 155, "additions": 142, "deletions": 13}, "files": [{"sha": "e177a11303643d645ef0a9aac29cfaff9bc54047", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0d1754e8bf6942b4c1d24d7c923438782129ba5a/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d1754e8bf6942b4c1d24d7c923438782129ba5a/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=0d1754e8bf6942b4c1d24d7c923438782129ba5a", "patch": "@@ -270,12 +270,18 @@ struct Decorations {\n \n impl Decorations {\n     fn new(info: DecorationInfo) -> Self {\n-        let (starts, ends) = info\n+        // Extract tuples (start, end, kind) into separate sequences of (start, kind) and (end).\n+        let (mut starts, mut ends): (Vec<_>, Vec<_>) = info\n             .0\n             .into_iter()\n             .map(|(kind, ranges)| ranges.into_iter().map(move |(lo, hi)| ((lo, kind), hi)))\n             .flatten()\n             .unzip();\n+\n+        // Sort the sequences in document order.\n+        starts.sort_by_key(|(lo, _)| *lo);\n+        ends.sort();\n+\n         Decorations { starts, ends }\n     }\n }"}, {"sha": "1b5a750455248610ae2295adf7a0d33d7e23e343", "filename": "src/librustdoc/scrape_examples.rs", "status": "modified", "additions": 27, "deletions": 9, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/0d1754e8bf6942b4c1d24d7c923438782129ba5a/src%2Flibrustdoc%2Fscrape_examples.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d1754e8bf6942b4c1d24d7c923438782129ba5a/src%2Flibrustdoc%2Fscrape_examples.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fscrape_examples.rs?ref=0d1754e8bf6942b4c1d24d7c923438782129ba5a", "patch": "@@ -10,7 +10,6 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_hir::{\n     self as hir,\n     intravisit::{self, Visitor},\n-    HirId,\n };\n use rustc_interface::interface;\n use rustc_macros::{Decodable, Encodable};\n@@ -83,15 +82,10 @@ crate struct CallLocation {\n \n impl CallLocation {\n     fn new(\n-        tcx: TyCtxt<'_>,\n         expr_span: rustc_span::Span,\n-        expr_id: HirId,\n+        enclosing_item_span: rustc_span::Span,\n         source_file: &SourceFile,\n     ) -> Self {\n-        let enclosing_item_span =\n-            tcx.hir().span_with_body(tcx.hir().get_parent_item(expr_id)).source_callsite();\n-        assert!(enclosing_item_span.contains(expr_span));\n-\n         CallLocation {\n             call_expr: SyntaxRange::new(expr_span, source_file),\n             enclosing_item: SyntaxRange::new(enclosing_item_span, source_file),\n@@ -168,13 +162,29 @@ where\n         // If this span comes from a macro expansion, then the source code may not actually show\n         // a use of the given item, so it would be a poor example. Hence, we skip all uses in macros.\n         if span.from_expansion() {\n+            trace!(\"Rejecting expr from macro: {:?}\", span);\n+            return;\n+        }\n+\n+        // If the enclosing item has a span coming from a proc macro, then we also don't want to include\n+        // the example.\n+        let enclosing_item_span = tcx.hir().span_with_body(tcx.hir().get_parent_item(ex.hir_id));\n+        if enclosing_item_span.from_expansion() {\n+            trace!(\"Rejecting expr ({:?}) from macro item: {:?}\", span, enclosing_item_span);\n             return;\n         }\n \n+        assert!(\n+            enclosing_item_span.contains(span),\n+            \"Attempted to scrape call at [{:?}] whose enclosing item [{:?}] doesn't contain the span of the call.\",\n+            span,\n+            enclosing_item_span\n+        );\n+\n         // Save call site if the function resolves to a concrete definition\n         if let ty::FnDef(def_id, _) = ty.kind() {\n-            // Ignore functions not from the crate being documented\n             if self.target_crates.iter().all(|krate| *krate != def_id.krate) {\n+                trace!(\"Rejecting expr from crate not being documented: {:?}\", span);\n                 return;\n             }\n \n@@ -198,7 +208,8 @@ where\n                 let fn_key = tcx.def_path_hash(*def_id);\n                 let fn_entries = self.calls.entry(fn_key).or_default();\n \n-                let location = CallLocation::new(tcx, span, ex.hir_id, &file);\n+                trace!(\"Including expr: {:?}\", span);\n+                let location = CallLocation::new(span, enclosing_item_span, &file);\n                 fn_entries.entry(abs_path).or_insert_with(mk_call_data).locations.push(location);\n             }\n         }\n@@ -240,6 +251,13 @@ crate fn run(\n         let mut finder = FindCalls { calls: &mut calls, tcx, map: tcx.hir(), cx, target_crates };\n         tcx.hir().visit_all_item_likes(&mut finder.as_deep_visitor());\n \n+        // Sort call locations within a given file in document order\n+        for fn_calls in calls.values_mut() {\n+            for file_calls in fn_calls.values_mut() {\n+                file_calls.locations.sort_by_key(|loc| loc.call_expr.byte_span.0);\n+            }\n+        }\n+\n         // Save output to provided path\n         let mut encoder = FileEncoder::new(options.output_path).map_err(|e| e.to_string())?;\n         calls.encode(&mut encoder).map_err(|e| e.to_string())?;"}, {"sha": "4934e875da6f1d9149c2aabbee518422a0f55810", "filename": "src/test/run-make-fulldeps/rustdoc-scrape-examples-macros/Makefile", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0d1754e8bf6942b4c1d24d7c923438782129ba5a/src%2Ftest%2Frun-make-fulldeps%2Frustdoc-scrape-examples-macros%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/0d1754e8bf6942b4c1d24d7c923438782129ba5a/src%2Ftest%2Frun-make-fulldeps%2Frustdoc-scrape-examples-macros%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Frustdoc-scrape-examples-macros%2FMakefile?ref=0d1754e8bf6942b4c1d24d7c923438782129ba5a", "patch": "@@ -0,0 +1,18 @@\n+-include ../../run-make-fulldeps/tools.mk\n+\n+OUTPUT_DIR := \"$(TMPDIR)/rustdoc\"\n+DYLIB_NAME := $(shell echo | $(RUSTC) --crate-name foobar_macro --crate-type dylib --print file-names -)\n+\n+all:\n+\t$(RUSTC) src/proc.rs --crate-name foobar_macro --edition=2021 --crate-type proc-macro --emit=dep-info,link\n+\n+\t$(RUSTC) src/lib.rs --crate-name foobar --edition=2021 --crate-type lib --emit=dep-info,link\n+\n+\t$(RUSTDOC) examples/ex.rs --crate-name ex --crate-type bin --output $(OUTPUT_DIR) \\\n+\t\t--extern foobar=$(TMPDIR)/libfoobar.rlib --extern foobar_macro=$(TMPDIR)/$(DYLIB_NAME) \\\n+\t\t-Z unstable-options --scrape-examples-output-path $(TMPDIR)/ex.calls --scrape-examples-target-crate foobar\n+\n+\t$(RUSTDOC) src/lib.rs --crate-name foobar --crate-type lib --output $(OUTPUT_DIR) \\\n+\t\t-Z unstable-options --with-examples $(TMPDIR)/ex.calls\n+\n+\t$(HTMLDOCCK) $(OUTPUT_DIR) src/lib.rs"}, {"sha": "4d8c8b30e311021cf9373e11e33f121fdea3c9e1", "filename": "src/test/run-make-fulldeps/rustdoc-scrape-examples-macros/examples/ex.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/0d1754e8bf6942b4c1d24d7c923438782129ba5a/src%2Ftest%2Frun-make-fulldeps%2Frustdoc-scrape-examples-macros%2Fexamples%2Fex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d1754e8bf6942b4c1d24d7c923438782129ba5a/src%2Ftest%2Frun-make-fulldeps%2Frustdoc-scrape-examples-macros%2Fexamples%2Fex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Frustdoc-scrape-examples-macros%2Fexamples%2Fex.rs?ref=0d1754e8bf6942b4c1d24d7c923438782129ba5a", "patch": "@@ -0,0 +1,27 @@\n+extern crate foobar;\n+extern crate foobar_macro;\n+\n+use foobar::*;\n+use foobar_macro::*;\n+\n+a_proc_macro!(); // no\n+\n+#[an_attr_macro]\n+fn a() {\n+  f(); // no\n+}\n+\n+#[an_attr_macro(with_span)]\n+fn b() {\n+  f(); // yes\n+}\n+\n+fn c() {\n+  a_rules_macro!(f()); // yes\n+}\n+\n+fn d() {\n+  a_rules_macro!(()); // no\n+}\n+\n+fn main(){}"}, {"sha": "bac3970a4d37f9d9f8a34b4005f430cfdc8ecfa4", "filename": "src/test/run-make-fulldeps/rustdoc-scrape-examples-macros/src/lib.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0d1754e8bf6942b4c1d24d7c923438782129ba5a/src%2Ftest%2Frun-make-fulldeps%2Frustdoc-scrape-examples-macros%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d1754e8bf6942b4c1d24d7c923438782129ba5a/src%2Ftest%2Frun-make-fulldeps%2Frustdoc-scrape-examples-macros%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Frustdoc-scrape-examples-macros%2Fsrc%2Flib.rs?ref=0d1754e8bf6942b4c1d24d7c923438782129ba5a", "patch": "@@ -0,0 +1,12 @@\n+// Scraped example should only include line numbers for items b and c in ex.rs\n+// @!has foobar/fn.f.html '//*[@class=\"line-numbers\"]' '14'\n+// @has foobar/fn.f.html '//*[@class=\"line-numbers\"]' '15'\n+// @has foobar/fn.f.html '//*[@class=\"line-numbers\"]' '21'\n+// @!has foobar/fn.f.html '//*[@class=\"line-numbers\"]' '22'\n+\n+pub fn f() {}\n+\n+#[macro_export]\n+macro_rules! a_rules_macro {\n+  ($e:expr) => { ($e, foobar::f()); }\n+}"}, {"sha": "46e518fdf6af8fa127792aed4f35f6487c75e9c9", "filename": "src/test/run-make-fulldeps/rustdoc-scrape-examples-macros/src/proc.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/0d1754e8bf6942b4c1d24d7c923438782129ba5a/src%2Ftest%2Frun-make-fulldeps%2Frustdoc-scrape-examples-macros%2Fsrc%2Fproc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d1754e8bf6942b4c1d24d7c923438782129ba5a/src%2Ftest%2Frun-make-fulldeps%2Frustdoc-scrape-examples-macros%2Fsrc%2Fproc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Frustdoc-scrape-examples-macros%2Fsrc%2Fproc.rs?ref=0d1754e8bf6942b4c1d24d7c923438782129ba5a", "patch": "@@ -0,0 +1,39 @@\n+extern crate proc_macro;\n+use proc_macro::*;\n+\n+#[proc_macro]\n+pub fn a_proc_macro(_item: TokenStream) -> TokenStream {\n+    \"fn ex() { foobar::f(); }\".parse().unwrap()\n+}\n+\n+// inserts foobar::f() to the end of the function\n+#[proc_macro_attribute]\n+pub fn an_attr_macro(attr: TokenStream, item: TokenStream) -> TokenStream {\n+    let new_call: TokenStream = \"foobar::f();\".parse().unwrap();\n+\n+    let mut tokens = item.into_iter();\n+\n+    let fn_tok = tokens.next().unwrap();\n+    let ident_tok = tokens.next().unwrap();\n+    let args_tok = tokens.next().unwrap();\n+    let body = match tokens.next().unwrap() {\n+        TokenTree::Group(g) => {\n+            let new_g = Group::new(g.delimiter(), new_call);\n+            let mut outer_g = Group::new(\n+                g.delimiter(),\n+                [TokenTree::Group(g.clone()), TokenTree::Group(new_g)].into_iter().collect(),\n+            );\n+\n+            if attr.to_string() == \"with_span\" {\n+                outer_g.set_span(g.span());\n+            }\n+\n+            TokenTree::Group(outer_g)\n+        }\n+        _ => unreachable!(),\n+    };\n+\n+    let tokens = vec![fn_tok, ident_tok, args_tok, body].into_iter().collect::<TokenStream>();\n+\n+    tokens\n+}"}, {"sha": "05c18007b0c718bfe72aadf237fc18ae89c197f2", "filename": "src/test/run-make/rustdoc-scrape-examples-ordering/examples/ex1.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d1754e8bf6942b4c1d24d7c923438782129ba5a/src%2Ftest%2Frun-make%2Frustdoc-scrape-examples-ordering%2Fexamples%2Fex1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d1754e8bf6942b4c1d24d7c923438782129ba5a/src%2Ftest%2Frun-make%2Frustdoc-scrape-examples-ordering%2Fexamples%2Fex1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-scrape-examples-ordering%2Fexamples%2Fex1.rs?ref=0d1754e8bf6942b4c1d24d7c923438782129ba5a", "patch": "@@ -1,8 +1,10 @@\n fn main() {\n-    foobar::ok();\n+    foobar::ok(0);\n \n     // this is a\n \n+    //  ..\n+\n     // BIG\n \n     // item"}, {"sha": "de21d9061f8dcc4c49cc76d2b1263f46d3f19acf", "filename": "src/test/run-make/rustdoc-scrape-examples-ordering/examples/ex2.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0d1754e8bf6942b4c1d24d7c923438782129ba5a/src%2Ftest%2Frun-make%2Frustdoc-scrape-examples-ordering%2Fexamples%2Fex2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d1754e8bf6942b4c1d24d7c923438782129ba5a/src%2Ftest%2Frun-make%2Frustdoc-scrape-examples-ordering%2Fexamples%2Fex2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-scrape-examples-ordering%2Fexamples%2Fex2.rs?ref=0d1754e8bf6942b4c1d24d7c923438782129ba5a", "patch": "@@ -1,4 +1,8 @@\n fn main() {\n-    foobar::ok();\n+    foobar::ok(1);\n     // small item\n }\n+\n+fn f() {\n+    foobar::ok(2);\n+}"}, {"sha": "5afffffdf9976f84854352224888f49ea786889c", "filename": "src/test/run-make/rustdoc-scrape-examples-ordering/src/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0d1754e8bf6942b4c1d24d7c923438782129ba5a/src%2Ftest%2Frun-make%2Frustdoc-scrape-examples-ordering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d1754e8bf6942b4c1d24d7c923438782129ba5a/src%2Ftest%2Frun-make%2Frustdoc-scrape-examples-ordering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-scrape-examples-ordering%2Fsrc%2Flib.rs?ref=0d1754e8bf6942b4c1d24d7c923438782129ba5a", "patch": "@@ -1,4 +1,7 @@\n // @has foobar/fn.ok.html '//*[@class=\"docblock scraped-example-list\"]' 'ex2'\n // @has foobar/fn.ok.html '//*[@class=\"more-scraped-examples\"]' 'ex1'\n+// @has foobar/fn.ok.html '//*[@class=\"highlight focus\"]' '1'\n+// @has foobar/fn.ok.html '//*[@class=\"highlight\"]' '2'\n+// @has foobar/fn.ok.html '//*[@class=\"highlight focus\"]' '0'\n \n-pub fn ok() {}\n+pub fn ok(_x: i32) {}"}]}