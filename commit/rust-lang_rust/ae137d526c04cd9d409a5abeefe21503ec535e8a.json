{"sha": "ae137d526c04cd9d409a5abeefe21503ec535e8a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlMTM3ZDUyNmMwNGNkOWQ0MDlhNWFiZWVmZTIxNTAzZWM1MzVlOGE=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-11-02T07:34:38Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-11-02T07:34:38Z"}, "message": "Merge #3397 #3398\n\n3397: UI test cleanup: Extract expect_fun_call tests r=matthiaskrgr a=phansch\n\nNote that the new stderr file does not include a `shadow-unrelated`\r\nerror, because the new UI test file does not use `#![warn(clippy::all)]`\r\n\r\ncc #2038 \n\n3398: UI test cleanup: Extract match_overlapping_arm tests r=matthiaskrgr a=phansch\n\ncc #2038\n\nCo-authored-by: Philipp Hansch <dev@phansch.net>", "tree": {"sha": "a657ae84085c38599ffc0a75746507a8b7f40ba6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a657ae84085c38599ffc0a75746507a8b7f40ba6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae137d526c04cd9d409a5abeefe21503ec535e8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae137d526c04cd9d409a5abeefe21503ec535e8a", "html_url": "https://github.com/rust-lang/rust/commit/ae137d526c04cd9d409a5abeefe21503ec535e8a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae137d526c04cd9d409a5abeefe21503ec535e8a/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "0ad5b9b9e08e84f80a4baccd11209553f1e64b2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ad5b9b9e08e84f80a4baccd11209553f1e64b2a", "html_url": "https://github.com/rust-lang/rust/commit/0ad5b9b9e08e84f80a4baccd11209553f1e64b2a"}, {"sha": "26569f3dde0d0de2f19fb8d17bf14bf969dd5ace", "url": "https://api.github.com/repos/rust-lang/rust/commits/26569f3dde0d0de2f19fb8d17bf14bf969dd5ace", "html_url": "https://github.com/rust-lang/rust/commit/26569f3dde0d0de2f19fb8d17bf14bf969dd5ace"}, {"sha": "e5af43d4262d66a1dc850d765da99f0fc3c783d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5af43d4262d66a1dc850d765da99f0fc3c783d2", "html_url": "https://github.com/rust-lang/rust/commit/e5af43d4262d66a1dc850d765da99f0fc3c783d2"}], "stats": {"total": 742, "additions": 379, "deletions": 363}, "files": [{"sha": "cf764c43694a101c4a6f37e088df07b1cd695854", "filename": "tests/ui/expect_fun_call.rs", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/ae137d526c04cd9d409a5abeefe21503ec535e8a/tests%2Fui%2Fexpect_fun_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae137d526c04cd9d409a5abeefe21503ec535e8a/tests%2Fui%2Fexpect_fun_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexpect_fun_call.rs?ref=ae137d526c04cd9d409a5abeefe21503ec535e8a", "patch": "@@ -0,0 +1,69 @@\n+// Copyright 2014-2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![warn(clippy::expect_fun_call)]\n+#![allow(clippy::useless_format)]\n+\n+/// Checks implementation of the `EXPECT_FUN_CALL` lint\n+\n+fn expect_fun_call() {\n+    struct Foo;\n+\n+    impl Foo {\n+        fn new() -> Self { Foo }\n+\n+        fn expect(&self, msg: &str) {\n+            panic!(\"{}\", msg)\n+        }\n+    }\n+\n+    let with_some = Some(\"value\");\n+    with_some.expect(\"error\");\n+\n+    let with_none: Option<i32> = None;\n+    with_none.expect(\"error\");\n+\n+    let error_code = 123_i32;\n+    let with_none_and_format: Option<i32> = None;\n+    with_none_and_format.expect(&format!(\"Error {}: fake error\", error_code));\n+\n+    let with_none_and_as_str: Option<i32> = None;\n+    with_none_and_as_str.expect(format!(\"Error {}: fake error\", error_code).as_str());\n+\n+    let with_ok: Result<(), ()> = Ok(());\n+    with_ok.expect(\"error\");\n+\n+    let with_err: Result<(), ()> = Err(());\n+    with_err.expect(\"error\");\n+\n+    let error_code = 123_i32;\n+    let with_err_and_format: Result<(), ()> = Err(());\n+    with_err_and_format.expect(&format!(\"Error {}: fake error\", error_code));\n+\n+    let with_err_and_as_str: Result<(), ()> = Err(());\n+    with_err_and_as_str.expect(format!(\"Error {}: fake error\", error_code).as_str());\n+\n+    let with_dummy_type = Foo::new();\n+    with_dummy_type.expect(\"another test string\");\n+\n+    let with_dummy_type_and_format = Foo::new();\n+    with_dummy_type_and_format.expect(&format!(\"Error {}: fake error\", error_code));\n+\n+    let with_dummy_type_and_as_str = Foo::new();\n+    with_dummy_type_and_as_str.expect(format!(\"Error {}: fake error\", error_code).as_str());\n+\n+    //Issue #2979 - this should not lint\n+    let msg = \"bar\";\n+    Some(\"foo\").expect(msg);\n+\n+    Some(\"foo\").expect({ &format!(\"error\") });\n+    Some(\"foo\").expect(format!(\"error\").as_ref());\n+}\n+\n+fn main() {}"}, {"sha": "6b1550b21956052fc3fd7b5d09a7c17afc64db25", "filename": "tests/ui/expect_fun_call.stderr", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/ae137d526c04cd9d409a5abeefe21503ec535e8a/tests%2Fui%2Fexpect_fun_call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ae137d526c04cd9d409a5abeefe21503ec535e8a/tests%2Fui%2Fexpect_fun_call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexpect_fun_call.stderr?ref=ae137d526c04cd9d409a5abeefe21503ec535e8a", "patch": "@@ -0,0 +1,40 @@\n+error: use of `expect` followed by a function call\n+  --> $DIR/expect_fun_call.rs:34:26\n+   |\n+34 |     with_none_and_format.expect(&format!(\"Error {}: fake error\", error_code));\n+   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| panic!(\"Error {}: fake error\", error_code))`\n+   |\n+   = note: `-D clippy::expect-fun-call` implied by `-D warnings`\n+\n+error: use of `expect` followed by a function call\n+  --> $DIR/expect_fun_call.rs:37:26\n+   |\n+37 |     with_none_and_as_str.expect(format!(\"Error {}: fake error\", error_code).as_str());\n+   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| panic!(\"Error {}: fake error\", error_code))`\n+\n+error: use of `expect` followed by a function call\n+  --> $DIR/expect_fun_call.rs:47:25\n+   |\n+47 |     with_err_and_format.expect(&format!(\"Error {}: fake error\", error_code));\n+   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|_| panic!(\"Error {}: fake error\", error_code))`\n+\n+error: use of `expect` followed by a function call\n+  --> $DIR/expect_fun_call.rs:50:25\n+   |\n+50 |     with_err_and_as_str.expect(format!(\"Error {}: fake error\", error_code).as_str());\n+   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|_| panic!(\"Error {}: fake error\", error_code))`\n+\n+error: use of `expect` followed by a function call\n+  --> $DIR/expect_fun_call.rs:65:17\n+   |\n+65 |     Some(\"foo\").expect({ &format!(\"error\") });\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| { let msg = { &format!(\"error\") }; panic!(msg) }))`\n+\n+error: use of `expect` followed by a function call\n+  --> $DIR/expect_fun_call.rs:66:17\n+   |\n+66 |     Some(\"foo\").expect(format!(\"error\").as_ref());\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| panic!(\"error\"))`\n+\n+error: aborting due to 6 previous errors\n+"}, {"sha": "1f2c3f8a8910e5715d873ed6562b1973d9ad7759", "filename": "tests/ui/match_overlapping_arm.rs", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/ae137d526c04cd9d409a5abeefe21503ec535e8a/tests%2Fui%2Fmatch_overlapping_arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae137d526c04cd9d409a5abeefe21503ec535e8a/tests%2Fui%2Fmatch_overlapping_arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_overlapping_arm.rs?ref=ae137d526c04cd9d409a5abeefe21503ec535e8a", "patch": "@@ -0,0 +1,75 @@\n+// Copyright 2014-2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(exclusive_range_pattern)]\n+#![warn(clippy::match_overlapping_arm)]\n+#![allow(clippy::redundant_pattern_matching)]\n+\n+/// Tests for match_overlapping_arm\n+\n+fn overlapping() {\n+    const FOO : u64 = 2;\n+\n+    match 42 {\n+        0 ... 10 => println!(\"0 ... 10\"),\n+        0 ... 11 => println!(\"0 ... 11\"),\n+        _ => (),\n+    }\n+\n+    match 42 {\n+        0 ... 5 => println!(\"0 ... 5\"),\n+        6 ... 7 => println!(\"6 ... 7\"),\n+        FOO ... 11 => println!(\"0 ... 11\"),\n+        _ => (),\n+    }\n+\n+    match 42 {\n+        2 => println!(\"2\"),\n+        0 ... 5 => println!(\"0 ... 5\"),\n+        _ => (),\n+    }\n+\n+    match 42 {\n+        2 => println!(\"2\"),\n+        0 ... 2 => println!(\"0 ... 2\"),\n+        _ => (),\n+    }\n+\n+    match 42 {\n+        0 ... 10 => println!(\"0 ... 10\"),\n+        11 ... 50 => println!(\"11 ... 50\"),\n+        _ => (),\n+    }\n+\n+    match 42 {\n+        2 => println!(\"2\"),\n+        0 .. 2 => println!(\"0 .. 2\"),\n+        _ => (),\n+    }\n+\n+    match 42 {\n+        0 .. 10 => println!(\"0 .. 10\"),\n+        10 .. 50 => println!(\"10 .. 50\"),\n+        _ => (),\n+    }\n+\n+    match 42 {\n+        0 .. 11 => println!(\"0 .. 11\"),\n+        0 ... 11 => println!(\"0 ... 11\"),\n+        _ => (),\n+    }\n+\n+    if let None = Some(42) {\n+        // nothing\n+    } else if let None = Some(42) {\n+        // another nothing :-)\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "4f9d8ac768397139205bf7ae663f66adb13eb30d", "filename": "tests/ui/match_overlapping_arm.stderr", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/ae137d526c04cd9d409a5abeefe21503ec535e8a/tests%2Fui%2Fmatch_overlapping_arm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ae137d526c04cd9d409a5abeefe21503ec535e8a/tests%2Fui%2Fmatch_overlapping_arm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_overlapping_arm.stderr?ref=ae137d526c04cd9d409a5abeefe21503ec535e8a", "patch": "@@ -0,0 +1,63 @@\n+error: some ranges overlap\n+  --> $DIR/match_overlapping_arm.rs:20:9\n+   |\n+20 |         0 ... 10 => println!(\"0 ... 10\"),\n+   |         ^^^^^^^^\n+   |\n+   = note: `-D clippy::match-overlapping-arm` implied by `-D warnings`\n+note: overlaps with this\n+  --> $DIR/match_overlapping_arm.rs:21:9\n+   |\n+21 |         0 ... 11 => println!(\"0 ... 11\"),\n+   |         ^^^^^^^^\n+\n+error: some ranges overlap\n+  --> $DIR/match_overlapping_arm.rs:26:9\n+   |\n+26 |         0 ... 5 => println!(\"0 ... 5\"),\n+   |         ^^^^^^^\n+   |\n+note: overlaps with this\n+  --> $DIR/match_overlapping_arm.rs:28:9\n+   |\n+28 |         FOO ... 11 => println!(\"0 ... 11\"),\n+   |         ^^^^^^^^^^\n+\n+error: some ranges overlap\n+  --> $DIR/match_overlapping_arm.rs:34:9\n+   |\n+34 |         0 ... 5 => println!(\"0 ... 5\"),\n+   |         ^^^^^^^\n+   |\n+note: overlaps with this\n+  --> $DIR/match_overlapping_arm.rs:33:9\n+   |\n+33 |         2 => println!(\"2\"),\n+   |         ^\n+\n+error: some ranges overlap\n+  --> $DIR/match_overlapping_arm.rs:40:9\n+   |\n+40 |         0 ... 2 => println!(\"0 ... 2\"),\n+   |         ^^^^^^^\n+   |\n+note: overlaps with this\n+  --> $DIR/match_overlapping_arm.rs:39:9\n+   |\n+39 |         2 => println!(\"2\"),\n+   |         ^\n+\n+error: some ranges overlap\n+  --> $DIR/match_overlapping_arm.rs:63:9\n+   |\n+63 |         0 .. 11 => println!(\"0 .. 11\"),\n+   |         ^^^^^^^\n+   |\n+note: overlaps with this\n+  --> $DIR/match_overlapping_arm.rs:64:9\n+   |\n+64 |         0 ... 11 => println!(\"0 ... 11\"),\n+   |         ^^^^^^^^\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "c7630b0533d2e9e3b9620ee11dec5764a01f20d5", "filename": "tests/ui/matches.rs", "status": "modified", "additions": 0, "deletions": 59, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/ae137d526c04cd9d409a5abeefe21503ec535e8a/tests%2Fui%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae137d526c04cd9d409a5abeefe21503ec535e8a/tests%2Fui%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatches.rs?ref=ae137d526c04cd9d409a5abeefe21503ec535e8a", "patch": "@@ -74,65 +74,6 @@ fn ref_pats() {\n     }\n }\n \n-fn overlapping() {\n-    const FOO : u64 = 2;\n-\n-    match 42 {\n-        0 ... 10 => println!(\"0 ... 10\"),\n-        0 ... 11 => println!(\"0 ... 11\"),\n-        _ => (),\n-    }\n-\n-    match 42 {\n-        0 ... 5 => println!(\"0 ... 5\"),\n-        6 ... 7 => println!(\"6 ... 7\"),\n-        FOO ... 11 => println!(\"0 ... 11\"),\n-        _ => (),\n-    }\n-\n-    match 42 {\n-        2 => println!(\"2\"),\n-        0 ... 5 => println!(\"0 ... 5\"),\n-        _ => (),\n-    }\n-\n-    match 42 {\n-        2 => println!(\"2\"),\n-        0 ... 2 => println!(\"0 ... 2\"),\n-        _ => (),\n-    }\n-\n-    match 42 {\n-        0 ... 10 => println!(\"0 ... 10\"),\n-        11 ... 50 => println!(\"11 ... 50\"),\n-        _ => (),\n-    }\n-\n-    match 42 {\n-        2 => println!(\"2\"),\n-        0 .. 2 => println!(\"0 .. 2\"),\n-        _ => (),\n-    }\n-\n-    match 42 {\n-        0 .. 10 => println!(\"0 .. 10\"),\n-        10 .. 50 => println!(\"10 .. 50\"),\n-        _ => (),\n-    }\n-\n-    match 42 {\n-        0 .. 11 => println!(\"0 .. 11\"),\n-        0 ... 11 => println!(\"0 ... 11\"),\n-        _ => (),\n-    }\n-\n-    if let None = Some(42) {\n-        // nothing\n-    } else if let None = Some(42) {\n-        // another nothing :-)\n-    }\n-}\n-\n fn match_wild_err_arm() {\n     let x: Result<i32, &str> = Ok(3);\n "}, {"sha": "aebb166d3bcd41d8341732aab51031af1b892819", "filename": "tests/ui/matches.stderr", "status": "modified", "additions": 107, "deletions": 168, "changes": 275, "blob_url": "https://github.com/rust-lang/rust/blob/ae137d526c04cd9d409a5abeefe21503ec535e8a/tests%2Fui%2Fmatches.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ae137d526c04cd9d409a5abeefe21503ec535e8a/tests%2Fui%2Fmatches.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatches.stderr?ref=ae137d526c04cd9d409a5abeefe21503ec535e8a", "patch": "@@ -88,276 +88,215 @@ help: try\n 72 |     if let None = b {\n    |            ^^^^   ^\n \n-error: some ranges overlap\n-  --> $DIR/matches.rs:81:9\n-   |\n-81 |         0 ... 10 => println!(\"0 ... 10\"),\n-   |         ^^^^^^^^\n-   |\n-   = note: `-D clippy::match-overlapping-arm` implied by `-D warnings`\n-note: overlaps with this\n-  --> $DIR/matches.rs:82:9\n-   |\n-82 |         0 ... 11 => println!(\"0 ... 11\"),\n-   |         ^^^^^^^^\n-\n-error: some ranges overlap\n-  --> $DIR/matches.rs:87:9\n-   |\n-87 |         0 ... 5 => println!(\"0 ... 5\"),\n-   |         ^^^^^^^\n+error: Err(_) will match all errors, maybe not a good idea\n+  --> $DIR/matches.rs:83:9\n    |\n-note: overlaps with this\n-  --> $DIR/matches.rs:89:9\n+83 |         Err(_) => panic!(\"err\")\n+   |         ^^^^^^\n    |\n-89 |         FOO ... 11 => println!(\"0 ... 11\"),\n-   |         ^^^^^^^^^^\n+   = note: `-D clippy::match-wild-err-arm` implied by `-D warnings`\n+   = note: to remove this warning, match each error separately or use unreachable macro\n \n-error: some ranges overlap\n-  --> $DIR/matches.rs:95:9\n-   |\n-95 |         0 ... 5 => println!(\"0 ... 5\"),\n-   |         ^^^^^^^\n+error: this `match` has identical arm bodies\n+  --> $DIR/matches.rs:82:18\n    |\n-note: overlaps with this\n-  --> $DIR/matches.rs:94:9\n+82 |         Ok(_) => println!(\"ok\"),\n+   |                  ^^^^^^^^^^^^^^\n    |\n-94 |         2 => println!(\"2\"),\n-   |         ^\n-\n-error: some ranges overlap\n-   --> $DIR/matches.rs:101:9\n-    |\n-101 |         0 ... 2 => println!(\"0 ... 2\"),\n-    |         ^^^^^^^\n-    |\n-note: overlaps with this\n-   --> $DIR/matches.rs:100:9\n-    |\n-100 |         2 => println!(\"2\"),\n-    |         ^\n-\n-error: some ranges overlap\n-   --> $DIR/matches.rs:124:9\n-    |\n-124 |         0 .. 11 => println!(\"0 .. 11\"),\n-    |         ^^^^^^^\n-    |\n-note: overlaps with this\n-   --> $DIR/matches.rs:125:9\n-    |\n-125 |         0 ... 11 => println!(\"0 ... 11\"),\n-    |         ^^^^^^^^\n-\n-error: Err(_) will match all errors, maybe not a good idea\n-   --> $DIR/matches.rs:142:9\n-    |\n-142 |         Err(_) => panic!(\"err\")\n-    |         ^^^^^^\n-    |\n-    = note: `-D clippy::match-wild-err-arm` implied by `-D warnings`\n-    = note: to remove this warning, match each error separately or use unreachable macro\n-\n-error: this `match` has identical arm bodies\n-   --> $DIR/matches.rs:141:18\n-    |\n-141 |         Ok(_) => println!(\"ok\"),\n-    |                  ^^^^^^^^^^^^^^\n-    |\n-    = note: `-D clippy::match-same-arms` implied by `-D warnings`\n+   = note: `-D clippy::match-same-arms` implied by `-D warnings`\n note: same as this\n-   --> $DIR/matches.rs:140:18\n-    |\n-140 |         Ok(3) => println!(\"ok\"),\n-    |                  ^^^^^^^^^^^^^^\n+  --> $DIR/matches.rs:81:18\n+   |\n+81 |         Ok(3) => println!(\"ok\"),\n+   |                  ^^^^^^^^^^^^^^\n note: consider refactoring into `Ok(3) | Ok(_)`\n-   --> $DIR/matches.rs:140:18\n-    |\n-140 |         Ok(3) => println!(\"ok\"),\n-    |                  ^^^^^^^^^^^^^^\n-    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+  --> $DIR/matches.rs:81:18\n+   |\n+81 |         Ok(3) => println!(\"ok\"),\n+   |                  ^^^^^^^^^^^^^^\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: Err(_) will match all errors, maybe not a good idea\n-   --> $DIR/matches.rs:148:9\n-    |\n-148 |         Err(_) => {panic!()}\n-    |         ^^^^^^\n-    |\n-    = note: to remove this warning, match each error separately or use unreachable macro\n+  --> $DIR/matches.rs:89:9\n+   |\n+89 |         Err(_) => {panic!()}\n+   |         ^^^^^^\n+   |\n+   = note: to remove this warning, match each error separately or use unreachable macro\n \n error: this `match` has identical arm bodies\n-   --> $DIR/matches.rs:147:18\n-    |\n-147 |         Ok(_) => println!(\"ok\"),\n-    |                  ^^^^^^^^^^^^^^\n-    |\n+  --> $DIR/matches.rs:88:18\n+   |\n+88 |         Ok(_) => println!(\"ok\"),\n+   |                  ^^^^^^^^^^^^^^\n+   |\n note: same as this\n-   --> $DIR/matches.rs:146:18\n-    |\n-146 |         Ok(3) => println!(\"ok\"),\n-    |                  ^^^^^^^^^^^^^^\n+  --> $DIR/matches.rs:87:18\n+   |\n+87 |         Ok(3) => println!(\"ok\"),\n+   |                  ^^^^^^^^^^^^^^\n note: consider refactoring into `Ok(3) | Ok(_)`\n-   --> $DIR/matches.rs:146:18\n-    |\n-146 |         Ok(3) => println!(\"ok\"),\n-    |                  ^^^^^^^^^^^^^^\n-    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+  --> $DIR/matches.rs:87:18\n+   |\n+87 |         Ok(3) => println!(\"ok\"),\n+   |                  ^^^^^^^^^^^^^^\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: Err(_) will match all errors, maybe not a good idea\n-   --> $DIR/matches.rs:154:9\n-    |\n-154 |         Err(_) => {panic!();}\n-    |         ^^^^^^\n-    |\n-    = note: to remove this warning, match each error separately or use unreachable macro\n+  --> $DIR/matches.rs:95:9\n+   |\n+95 |         Err(_) => {panic!();}\n+   |         ^^^^^^\n+   |\n+   = note: to remove this warning, match each error separately or use unreachable macro\n \n error: this `match` has identical arm bodies\n-   --> $DIR/matches.rs:153:18\n-    |\n-153 |         Ok(_) => println!(\"ok\"),\n-    |                  ^^^^^^^^^^^^^^\n-    |\n+  --> $DIR/matches.rs:94:18\n+   |\n+94 |         Ok(_) => println!(\"ok\"),\n+   |                  ^^^^^^^^^^^^^^\n+   |\n note: same as this\n-   --> $DIR/matches.rs:152:18\n-    |\n-152 |         Ok(3) => println!(\"ok\"),\n-    |                  ^^^^^^^^^^^^^^\n+  --> $DIR/matches.rs:93:18\n+   |\n+93 |         Ok(3) => println!(\"ok\"),\n+   |                  ^^^^^^^^^^^^^^\n note: consider refactoring into `Ok(3) | Ok(_)`\n-   --> $DIR/matches.rs:152:18\n-    |\n-152 |         Ok(3) => println!(\"ok\"),\n-    |                  ^^^^^^^^^^^^^^\n-    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+  --> $DIR/matches.rs:93:18\n+   |\n+93 |         Ok(3) => println!(\"ok\"),\n+   |                  ^^^^^^^^^^^^^^\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: this `match` has identical arm bodies\n-   --> $DIR/matches.rs:160:18\n+   --> $DIR/matches.rs:101:18\n     |\n-160 |         Ok(_) => println!(\"ok\"),\n+101 |         Ok(_) => println!(\"ok\"),\n     |                  ^^^^^^^^^^^^^^\n     |\n note: same as this\n-   --> $DIR/matches.rs:159:18\n+   --> $DIR/matches.rs:100:18\n     |\n-159 |         Ok(3) => println!(\"ok\"),\n+100 |         Ok(3) => println!(\"ok\"),\n     |                  ^^^^^^^^^^^^^^\n note: consider refactoring into `Ok(3) | Ok(_)`\n-   --> $DIR/matches.rs:159:18\n+   --> $DIR/matches.rs:100:18\n     |\n-159 |         Ok(3) => println!(\"ok\"),\n+100 |         Ok(3) => println!(\"ok\"),\n     |                  ^^^^^^^^^^^^^^\n     = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: this `match` has identical arm bodies\n-   --> $DIR/matches.rs:167:18\n+   --> $DIR/matches.rs:108:18\n     |\n-167 |         Ok(_) => println!(\"ok\"),\n+108 |         Ok(_) => println!(\"ok\"),\n     |                  ^^^^^^^^^^^^^^\n     |\n note: same as this\n-   --> $DIR/matches.rs:166:18\n+   --> $DIR/matches.rs:107:18\n     |\n-166 |         Ok(3) => println!(\"ok\"),\n+107 |         Ok(3) => println!(\"ok\"),\n     |                  ^^^^^^^^^^^^^^\n note: consider refactoring into `Ok(3) | Ok(_)`\n-   --> $DIR/matches.rs:166:18\n+   --> $DIR/matches.rs:107:18\n     |\n-166 |         Ok(3) => println!(\"ok\"),\n+107 |         Ok(3) => println!(\"ok\"),\n     |                  ^^^^^^^^^^^^^^\n     = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: this `match` has identical arm bodies\n-   --> $DIR/matches.rs:173:18\n+   --> $DIR/matches.rs:114:18\n     |\n-173 |         Ok(_) => println!(\"ok\"),\n+114 |         Ok(_) => println!(\"ok\"),\n     |                  ^^^^^^^^^^^^^^\n     |\n note: same as this\n-   --> $DIR/matches.rs:172:18\n+   --> $DIR/matches.rs:113:18\n     |\n-172 |         Ok(3) => println!(\"ok\"),\n+113 |         Ok(3) => println!(\"ok\"),\n     |                  ^^^^^^^^^^^^^^\n note: consider refactoring into `Ok(3) | Ok(_)`\n-   --> $DIR/matches.rs:172:18\n+   --> $DIR/matches.rs:113:18\n     |\n-172 |         Ok(3) => println!(\"ok\"),\n+113 |         Ok(3) => println!(\"ok\"),\n     |                  ^^^^^^^^^^^^^^\n     = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: this `match` has identical arm bodies\n-   --> $DIR/matches.rs:179:18\n+   --> $DIR/matches.rs:120:18\n     |\n-179 |         Ok(_) => println!(\"ok\"),\n+120 |         Ok(_) => println!(\"ok\"),\n     |                  ^^^^^^^^^^^^^^\n     |\n note: same as this\n-   --> $DIR/matches.rs:178:18\n+   --> $DIR/matches.rs:119:18\n     |\n-178 |         Ok(3) => println!(\"ok\"),\n+119 |         Ok(3) => println!(\"ok\"),\n     |                  ^^^^^^^^^^^^^^\n note: consider refactoring into `Ok(3) | Ok(_)`\n-   --> $DIR/matches.rs:178:18\n+   --> $DIR/matches.rs:119:18\n     |\n-178 |         Ok(3) => println!(\"ok\"),\n+119 |         Ok(3) => println!(\"ok\"),\n     |                  ^^^^^^^^^^^^^^\n     = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: this `match` has identical arm bodies\n-   --> $DIR/matches.rs:200:29\n+   --> $DIR/matches.rs:141:29\n     |\n-200 |         (Ok(_), Some(x)) => println!(\"ok {}\", x),\n+141 |         (Ok(_), Some(x)) => println!(\"ok {}\", x),\n     |                             ^^^^^^^^^^^^^^^^^^^^\n     |\n note: same as this\n-   --> $DIR/matches.rs:199:29\n+   --> $DIR/matches.rs:140:29\n     |\n-199 |         (Ok(x), Some(_)) => println!(\"ok {}\", x),\n+140 |         (Ok(x), Some(_)) => println!(\"ok {}\", x),\n     |                             ^^^^^^^^^^^^^^^^^^^^\n note: consider refactoring into `(Ok(x), Some(_)) | (Ok(_), Some(x))`\n-   --> $DIR/matches.rs:199:29\n+   --> $DIR/matches.rs:140:29\n     |\n-199 |         (Ok(x), Some(_)) => println!(\"ok {}\", x),\n+140 |         (Ok(x), Some(_)) => println!(\"ok {}\", x),\n     |                             ^^^^^^^^^^^^^^^^^^^^\n     = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: this `match` has identical arm bodies\n-   --> $DIR/matches.rs:215:18\n+   --> $DIR/matches.rs:156:18\n     |\n-215 |         Ok(_) => println!(\"ok\"),\n+156 |         Ok(_) => println!(\"ok\"),\n     |                  ^^^^^^^^^^^^^^\n     |\n note: same as this\n-   --> $DIR/matches.rs:214:18\n+   --> $DIR/matches.rs:155:18\n     |\n-214 |         Ok(3) => println!(\"ok\"),\n+155 |         Ok(3) => println!(\"ok\"),\n     |                  ^^^^^^^^^^^^^^\n note: consider refactoring into `Ok(3) | Ok(_)`\n-   --> $DIR/matches.rs:214:18\n+   --> $DIR/matches.rs:155:18\n     |\n-214 |         Ok(3) => println!(\"ok\"),\n+155 |         Ok(3) => println!(\"ok\"),\n     |                  ^^^^^^^^^^^^^^\n     = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: use as_ref() instead\n-   --> $DIR/matches.rs:222:33\n+   --> $DIR/matches.rs:163:33\n     |\n-222 |       let borrowed: Option<&()> = match owned {\n+163 |       let borrowed: Option<&()> = match owned {\n     |  _________________________________^\n-223 | |         None => None,\n-224 | |         Some(ref v) => Some(v),\n-225 | |     };\n+164 | |         None => None,\n+165 | |         Some(ref v) => Some(v),\n+166 | |     };\n     | |_____^ help: try this: `owned.as_ref()`\n     |\n     = note: `-D clippy::match-as-ref` implied by `-D warnings`\n \n error: use as_mut() instead\n-   --> $DIR/matches.rs:228:39\n+   --> $DIR/matches.rs:169:39\n     |\n-228 |       let borrow_mut: Option<&mut ()> = match mut_owned {\n+169 |       let borrow_mut: Option<&mut ()> = match mut_owned {\n     |  _______________________________________^\n-229 | |         None => None,\n-230 | |         Some(ref mut v) => Some(v),\n-231 | |     };\n+170 | |         None => None,\n+171 | |         Some(ref mut v) => Some(v),\n+172 | |     };\n     | |_____^ help: try this: `mut_owned.as_mut()`\n \n-error: aborting due to 26 previous errors\n+error: aborting due to 21 previous errors\n "}, {"sha": "03bd7e1f084909f2b3fd620e6ee9881701f02c35", "filename": "tests/ui/methods.rs", "status": "modified", "additions": 0, "deletions": 55, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/ae137d526c04cd9d409a5abeefe21503ec535e8a/tests%2Fui%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae137d526c04cd9d409a5abeefe21503ec535e8a/tests%2Fui%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.rs?ref=ae137d526c04cd9d409a5abeefe21503ec535e8a", "patch": "@@ -353,61 +353,6 @@ fn or_fun_call() {\n     let _ = stringy.unwrap_or(\"\".to_owned());\n }\n \n-/// Checks implementation of the `EXPECT_FUN_CALL` lint\n-fn expect_fun_call() {\n-    struct Foo;\n-\n-    impl Foo {\n-        fn new() -> Self { Foo }\n-\n-        fn expect(&self, msg: &str) {\n-            panic!(\"{}\", msg)\n-        }\n-    }\n-\n-    let with_some = Some(\"value\");\n-    with_some.expect(\"error\");\n-\n-    let with_none: Option<i32> = None;\n-    with_none.expect(\"error\");\n-\n-    let error_code = 123_i32;\n-    let with_none_and_format: Option<i32> = None;\n-    with_none_and_format.expect(&format!(\"Error {}: fake error\", error_code));\n-\n-    let with_none_and_as_str: Option<i32> = None;\n-    with_none_and_as_str.expect(format!(\"Error {}: fake error\", error_code).as_str());\n-\n-    let with_ok: Result<(), ()> = Ok(());\n-    with_ok.expect(\"error\");\n-\n-    let with_err: Result<(), ()> = Err(());\n-    with_err.expect(\"error\");\n-\n-    let error_code = 123_i32;\n-    let with_err_and_format: Result<(), ()> = Err(());\n-    with_err_and_format.expect(&format!(\"Error {}: fake error\", error_code));\n-\n-    let with_err_and_as_str: Result<(), ()> = Err(());\n-    with_err_and_as_str.expect(format!(\"Error {}: fake error\", error_code).as_str());\n-\n-    let with_dummy_type = Foo::new();\n-    with_dummy_type.expect(\"another test string\");\n-\n-    let with_dummy_type_and_format = Foo::new();\n-    with_dummy_type_and_format.expect(&format!(\"Error {}: fake error\", error_code));\n-\n-    let with_dummy_type_and_as_str = Foo::new();\n-    with_dummy_type_and_as_str.expect(format!(\"Error {}: fake error\", error_code).as_str());\n-\n-    //Issue #2979 - this should not lint\n-    let msg = \"bar\";\n-    Some(\"foo\").expect(msg);\n-\n-    Some(\"foo\").expect({ &format!(\"error\") });\n-    Some(\"foo\").expect(format!(\"error\").as_ref());\n-}\n-\n /// Checks implementation of `ITER_NTH` lint\n fn iter_nth() {\n     let mut some_vec = vec![0, 1, 2, 3];"}, {"sha": "985070f37540d7dd60f3fd5e6413fb615bbad122", "filename": "tests/ui/methods.stderr", "status": "modified", "additions": 25, "deletions": 81, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/ae137d526c04cd9d409a5abeefe21503ec535e8a/tests%2Fui%2Fmethods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ae137d526c04cd9d409a5abeefe21503ec535e8a/tests%2Fui%2Fmethods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.stderr?ref=ae137d526c04cd9d409a5abeefe21503ec535e8a", "patch": "@@ -323,139 +323,83 @@ error: use of `unwrap_or` followed by a function call\n 353 |     let _ = stringy.unwrap_or(\"\".to_owned());\n     |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| \"\".to_owned())`\n \n-error: `error_code` is shadowed by `123_i32`\n-   --> $DIR/methods.rs:387:9\n-    |\n-387 |     let error_code = 123_i32;\n-    |         ^^^^^^^^^^\n-    |\n-    = note: `-D clippy::shadow-unrelated` implied by `-D warnings`\n-note: initialization happens here\n-   --> $DIR/methods.rs:387:22\n-    |\n-387 |     let error_code = 123_i32;\n-    |                      ^^^^^^^\n-note: previous binding is here\n-   --> $DIR/methods.rs:374:9\n-    |\n-374 |     let error_code = 123_i32;\n-    |         ^^^^^^^^^^\n-\n-error: use of `expect` followed by a function call\n-   --> $DIR/methods.rs:376:26\n-    |\n-376 |     with_none_and_format.expect(&format!(\"Error {}: fake error\", error_code));\n-    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| panic!(\"Error {}: fake error\", error_code))`\n-    |\n-    = note: `-D clippy::expect-fun-call` implied by `-D warnings`\n-\n-error: use of `expect` followed by a function call\n-   --> $DIR/methods.rs:379:26\n-    |\n-379 |     with_none_and_as_str.expect(format!(\"Error {}: fake error\", error_code).as_str());\n-    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| panic!(\"Error {}: fake error\", error_code))`\n-\n-error: use of `expect` followed by a function call\n-   --> $DIR/methods.rs:389:25\n-    |\n-389 |     with_err_and_format.expect(&format!(\"Error {}: fake error\", error_code));\n-    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|_| panic!(\"Error {}: fake error\", error_code))`\n-\n-error: use of `expect` followed by a function call\n-   --> $DIR/methods.rs:392:25\n-    |\n-392 |     with_err_and_as_str.expect(format!(\"Error {}: fake error\", error_code).as_str());\n-    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|_| panic!(\"Error {}: fake error\", error_code))`\n-\n-error: use of `expect` followed by a function call\n-   --> $DIR/methods.rs:407:17\n-    |\n-407 |     Some(\"foo\").expect({ &format!(\"error\") });\n-    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| { let msg = { &format!(\"error\") }; panic!(msg) }))`\n-\n-error: use of `expect` followed by a function call\n-   --> $DIR/methods.rs:408:17\n-    |\n-408 |     Some(\"foo\").expect(format!(\"error\").as_ref());\n-    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| panic!(\"error\"))`\n-\n error: called `.iter().nth()` on a Vec. Calling `.get()` is both faster and more readable\n-   --> $DIR/methods.rs:419:23\n+   --> $DIR/methods.rs:364:23\n     |\n-419 |         let bad_vec = some_vec.iter().nth(3);\n+364 |         let bad_vec = some_vec.iter().nth(3);\n     |                       ^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = note: `-D clippy::iter-nth` implied by `-D warnings`\n \n error: called `.iter().nth()` on a slice. Calling `.get()` is both faster and more readable\n-   --> $DIR/methods.rs:420:26\n+   --> $DIR/methods.rs:365:26\n     |\n-420 |         let bad_slice = &some_vec[..].iter().nth(3);\n+365 |         let bad_slice = &some_vec[..].iter().nth(3);\n     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter().nth()` on a slice. Calling `.get()` is both faster and more readable\n-   --> $DIR/methods.rs:421:31\n+   --> $DIR/methods.rs:366:31\n     |\n-421 |         let bad_boxed_slice = boxed_slice.iter().nth(3);\n+366 |         let bad_boxed_slice = boxed_slice.iter().nth(3);\n     |                               ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter().nth()` on a VecDeque. Calling `.get()` is both faster and more readable\n-   --> $DIR/methods.rs:422:29\n+   --> $DIR/methods.rs:367:29\n     |\n-422 |         let bad_vec_deque = some_vec_deque.iter().nth(3);\n+367 |         let bad_vec_deque = some_vec_deque.iter().nth(3);\n     |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter_mut().nth()` on a Vec. Calling `.get_mut()` is both faster and more readable\n-   --> $DIR/methods.rs:427:23\n+   --> $DIR/methods.rs:372:23\n     |\n-427 |         let bad_vec = some_vec.iter_mut().nth(3);\n+372 |         let bad_vec = some_vec.iter_mut().nth(3);\n     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter_mut().nth()` on a slice. Calling `.get_mut()` is both faster and more readable\n-   --> $DIR/methods.rs:430:26\n+   --> $DIR/methods.rs:375:26\n     |\n-430 |         let bad_slice = &some_vec[..].iter_mut().nth(3);\n+375 |         let bad_slice = &some_vec[..].iter_mut().nth(3);\n     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter_mut().nth()` on a VecDeque. Calling `.get_mut()` is both faster and more readable\n-   --> $DIR/methods.rs:433:29\n+   --> $DIR/methods.rs:378:29\n     |\n-433 |         let bad_vec_deque = some_vec_deque.iter_mut().nth(3);\n+378 |         let bad_vec_deque = some_vec_deque.iter_mut().nth(3);\n     |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `skip(x).next()` on an iterator. This is more succinctly expressed by calling `nth(x)`\n-   --> $DIR/methods.rs:445:13\n+   --> $DIR/methods.rs:390:13\n     |\n-445 |     let _ = some_vec.iter().skip(42).next();\n+390 |     let _ = some_vec.iter().skip(42).next();\n     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = note: `-D clippy::iter-skip-next` implied by `-D warnings`\n \n error: called `skip(x).next()` on an iterator. This is more succinctly expressed by calling `nth(x)`\n-   --> $DIR/methods.rs:446:13\n+   --> $DIR/methods.rs:391:13\n     |\n-446 |     let _ = some_vec.iter().cycle().skip(42).next();\n+391 |     let _ = some_vec.iter().cycle().skip(42).next();\n     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `skip(x).next()` on an iterator. This is more succinctly expressed by calling `nth(x)`\n-   --> $DIR/methods.rs:447:13\n+   --> $DIR/methods.rs:392:13\n     |\n-447 |     let _ = (1..10).skip(10).next();\n+392 |     let _ = (1..10).skip(10).next();\n     |             ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `skip(x).next()` on an iterator. This is more succinctly expressed by calling `nth(x)`\n-   --> $DIR/methods.rs:448:14\n+   --> $DIR/methods.rs:393:14\n     |\n-448 |     let _ = &some_vec[..].iter().skip(3).next();\n+393 |     let _ = &some_vec[..].iter().skip(3).next();\n     |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: used unwrap() on an Option value. If you don't want to handle the None case gracefully, consider using expect() to provide a better panic message\n-   --> $DIR/methods.rs:457:13\n+   --> $DIR/methods.rs:402:13\n     |\n-457 |     let _ = opt.unwrap();\n+402 |     let _ = opt.unwrap();\n     |             ^^^^^^^^^^^^\n     |\n     = note: `-D clippy::option-unwrap-used` implied by `-D warnings`\n \n-error: aborting due to 57 previous errors\n+error: aborting due to 50 previous errors\n "}]}