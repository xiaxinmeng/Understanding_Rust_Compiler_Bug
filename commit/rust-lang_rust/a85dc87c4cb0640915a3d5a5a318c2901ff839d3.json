{"sha": "a85dc87c4cb0640915a3d5a5a318c2901ff839d3", "node_id": "C_kwDOAAsO6NoAKGE4NWRjODdjNGNiMDY0MDkxNWEzZDVhNWEzMThjMjkwMWZmODM5ZDM", "commit": {"author": {"name": "Serial", "email": "69764315+Serial-ATA@users.noreply.github.com", "date": "2022-04-21T15:01:18Z"}, "committer": {"name": "Serial", "email": "69764315+Serial-ATA@users.noreply.github.com", "date": "2022-04-24T14:08:31Z"}, "message": "Add `large_include_file` lint", "tree": {"sha": "c4e86495975b14813b49ae0421cda7bd23b5e576", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c4e86495975b14813b49ae0421cda7bd23b5e576"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a85dc87c4cb0640915a3d5a5a318c2901ff839d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a85dc87c4cb0640915a3d5a5a318c2901ff839d3", "html_url": "https://github.com/rust-lang/rust/commit/a85dc87c4cb0640915a3d5a5a318c2901ff839d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a85dc87c4cb0640915a3d5a5a318c2901ff839d3/comments", "author": {"login": "Serial-ATA", "id": 69764315, "node_id": "MDQ6VXNlcjY5NzY0MzE1", "avatar_url": "https://avatars.githubusercontent.com/u/69764315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Serial-ATA", "html_url": "https://github.com/Serial-ATA", "followers_url": "https://api.github.com/users/Serial-ATA/followers", "following_url": "https://api.github.com/users/Serial-ATA/following{/other_user}", "gists_url": "https://api.github.com/users/Serial-ATA/gists{/gist_id}", "starred_url": "https://api.github.com/users/Serial-ATA/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Serial-ATA/subscriptions", "organizations_url": "https://api.github.com/users/Serial-ATA/orgs", "repos_url": "https://api.github.com/users/Serial-ATA/repos", "events_url": "https://api.github.com/users/Serial-ATA/events{/privacy}", "received_events_url": "https://api.github.com/users/Serial-ATA/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Serial-ATA", "id": 69764315, "node_id": "MDQ6VXNlcjY5NzY0MzE1", "avatar_url": "https://avatars.githubusercontent.com/u/69764315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Serial-ATA", "html_url": "https://github.com/Serial-ATA", "followers_url": "https://api.github.com/users/Serial-ATA/followers", "following_url": "https://api.github.com/users/Serial-ATA/following{/other_user}", "gists_url": "https://api.github.com/users/Serial-ATA/gists{/gist_id}", "starred_url": "https://api.github.com/users/Serial-ATA/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Serial-ATA/subscriptions", "organizations_url": "https://api.github.com/users/Serial-ATA/orgs", "repos_url": "https://api.github.com/users/Serial-ATA/repos", "events_url": "https://api.github.com/users/Serial-ATA/events{/privacy}", "received_events_url": "https://api.github.com/users/Serial-ATA/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9d31e71beacf97ce44d3cf677e5616c720051dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9d31e71beacf97ce44d3cf677e5616c720051dd", "html_url": "https://github.com/rust-lang/rust/commit/a9d31e71beacf97ce44d3cf677e5616c720051dd"}], "stats": {"total": 137, "additions": 136, "deletions": 1}, "files": [{"sha": "c88ead99fa6f76e4810a867655df06fa683a2550", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a85dc87c4cb0640915a3d5a5a318c2901ff839d3/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/a85dc87c4cb0640915a3d5a5a318c2901ff839d3/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=a85dc87c4cb0640915a3d5a5a318c2901ff839d3", "patch": "@@ -3478,6 +3478,7 @@ Released 2018-09-13\n [`large_const_arrays`]: https://rust-lang.github.io/rust-clippy/master/index.html#large_const_arrays\n [`large_digit_groups`]: https://rust-lang.github.io/rust-clippy/master/index.html#large_digit_groups\n [`large_enum_variant`]: https://rust-lang.github.io/rust-clippy/master/index.html#large_enum_variant\n+[`large_include_file`]: https://rust-lang.github.io/rust-clippy/master/index.html#large_include_file\n [`large_stack_arrays`]: https://rust-lang.github.io/rust-clippy/master/index.html#large_stack_arrays\n [`large_types_passed_by_value`]: https://rust-lang.github.io/rust-clippy/master/index.html#large_types_passed_by_value\n [`len_without_is_empty`]: https://rust-lang.github.io/rust-clippy/master/index.html#len_without_is_empty"}, {"sha": "5ed275726c530e387af847ae117c5aefad06e395", "filename": "clippy_lints/src/large_include_file.rs", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/a85dc87c4cb0640915a3d5a5a318c2901ff839d3/clippy_lints%2Fsrc%2Flarge_include_file.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a85dc87c4cb0640915a3d5a5a318c2901ff839d3/clippy_lints%2Fsrc%2Flarge_include_file.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flarge_include_file.rs?ref=a85dc87c4cb0640915a3d5a5a318c2901ff839d3", "patch": "@@ -0,0 +1,86 @@\n+use clippy_utils::diagnostics::span_lint_and_note;\n+use clippy_utils::is_lint_allowed;\n+use clippy_utils::macros::root_macro_call_first_node;\n+use rustc_ast::LitKind;\n+use rustc_hir::Expr;\n+use rustc_hir::ExprKind;\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_session::{declare_tool_lint, impl_lint_pass};\n+use rustc_span::sym;\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for the inclusion of large files via `include_bytes!()`\n+    /// and `include_str!()`\n+    ///\n+    /// ### Why is this bad?\n+    /// Including large files can increase the size of the binary\n+    ///\n+    /// ### Example\n+    /// ```rust,ignore\n+    /// let included_str = include_str!(\"very_large_file.txt\");\n+    /// let included_bytes = include_bytes!(\"very_large_file.txt);\n+    /// ```\n+    ///\n+    /// Instead, you can load the file at runtime:\n+    /// ```rust,ignore\n+    /// use std::fs;\n+    ///\n+    /// let string = fs::read_to_string(\"very_large_file.txt\")?;\n+    /// let bytes = fs::read(\"very_large_file.txt\")?;\n+    /// ```\n+    #[clippy::version = \"1.62.0\"]\n+    pub LARGE_INCLUDE_FILE,\n+    restriction,\n+    \"including a large file\"\n+}\n+\n+pub struct LargeIncludeFile {\n+    max_file_size: u64,\n+}\n+\n+impl LargeIncludeFile {\n+    #[must_use]\n+    pub fn new(max_file_size: u64) -> Self {\n+        Self { max_file_size }\n+    }\n+}\n+\n+impl_lint_pass!(LargeIncludeFile => [LARGE_INCLUDE_FILE]);\n+\n+impl LateLintPass<'_> for LargeIncludeFile {\n+    fn check_expr(&mut self, cx: &LateContext<'_>, expr: &'_ Expr<'_>) {\n+        if_chain! {\n+            if let Some(macro_call) = root_macro_call_first_node(cx, expr);\n+            if !is_lint_allowed(cx, LARGE_INCLUDE_FILE, expr.hir_id);\n+            if cx.tcx.is_diagnostic_item(sym::include_bytes_macro, macro_call.def_id)\n+            || cx.tcx.is_diagnostic_item(sym::include_str_macro, macro_call.def_id);\n+            if let ExprKind::Lit(lit) = &expr.kind;\n+            then {\n+                let len = match &lit.node {\n+                    // include_bytes\n+                    LitKind::ByteStr(bstr) => bstr.len(),\n+                    // include_str\n+                    LitKind::Str(sym, _) => sym.as_str().len(),\n+                    _ => return,\n+                };\n+\n+                if len as u64 <= self.max_file_size {\n+                    return;\n+                }\n+\n+                span_lint_and_note(\n+                    cx,\n+                    LARGE_INCLUDE_FILE,\n+                    expr.span,\n+                    \"attempted to include a large file\",\n+                    None,\n+                    &format!(\n+                        \"the configuration allows a maximum size of {} bytes\",\n+                        self.max_file_size\n+                    ),\n+                );\n+            }\n+        }\n+    }\n+}"}, {"sha": "e362431602794ac299aaa541e8da72a4dd724b09", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a85dc87c4cb0640915a3d5a5a318c2901ff839d3/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a85dc87c4cb0640915a3d5a5a318c2901ff839d3/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=a85dc87c4cb0640915a3d5a5a318c2901ff839d3", "patch": "@@ -209,6 +209,7 @@ store.register_lints(&[\n     iter_not_returning_iterator::ITER_NOT_RETURNING_ITERATOR,\n     large_const_arrays::LARGE_CONST_ARRAYS,\n     large_enum_variant::LARGE_ENUM_VARIANT,\n+    large_include_file::LARGE_INCLUDE_FILE,\n     large_stack_arrays::LARGE_STACK_ARRAYS,\n     len_zero::COMPARISON_TO_EMPTY,\n     len_zero::LEN_WITHOUT_IS_EMPTY,"}, {"sha": "77ec6c83ba4b4d8b5d6691fb0391382582e14686", "filename": "clippy_lints/src/lib.register_restriction.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a85dc87c4cb0640915a3d5a5a318c2901ff839d3/clippy_lints%2Fsrc%2Flib.register_restriction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a85dc87c4cb0640915a3d5a5a318c2901ff839d3/clippy_lints%2Fsrc%2Flib.register_restriction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_restriction.rs?ref=a85dc87c4cb0640915a3d5a5a318c2901ff839d3", "patch": "@@ -27,6 +27,7 @@ store.register_group(true, \"clippy::restriction\", Some(\"clippy_restriction\"), ve\n     LintId::of(indexing_slicing::INDEXING_SLICING),\n     LintId::of(inherent_impl::MULTIPLE_INHERENT_IMPL),\n     LintId::of(integer_division::INTEGER_DIVISION),\n+    LintId::of(large_include_file::LARGE_INCLUDE_FILE),\n     LintId::of(let_underscore::LET_UNDERSCORE_MUST_USE),\n     LintId::of(literal_representation::DECIMAL_LITERAL_REPRESENTATION),\n     LintId::of(map_err_ignore::MAP_ERR_IGNORE),"}, {"sha": "57d48e17627051ae977564bebe331b20679d2172", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a85dc87c4cb0640915a3d5a5a318c2901ff839d3/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a85dc87c4cb0640915a3d5a5a318c2901ff839d3/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=a85dc87c4cb0640915a3d5a5a318c2901ff839d3", "patch": "@@ -262,6 +262,7 @@ mod items_after_statements;\n mod iter_not_returning_iterator;\n mod large_const_arrays;\n mod large_enum_variant;\n+mod large_include_file;\n mod large_stack_arrays;\n mod len_zero;\n mod let_if_seq;\n@@ -884,6 +885,8 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_early_pass(|| Box::new(pub_use::PubUse));\n     store.register_late_pass(|| Box::new(format_push_string::FormatPushString));\n     store.register_late_pass(|| Box::new(bytes_count_to_len::BytesCountToLen));\n+    let max_include_file_size = conf.max_include_file_size;\n+    store.register_late_pass(move || Box::new(large_include_file::LargeIncludeFile::new(max_include_file_size)));\n     // add lints here, do not remove this comment, it's used in `new_lint`\n }\n "}, {"sha": "74b0168a1794be449f2c285effd37b27938a27ac", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a85dc87c4cb0640915a3d5a5a318c2901ff839d3/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a85dc87c4cb0640915a3d5a5a318c2901ff839d3/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=a85dc87c4cb0640915a3d5a5a318c2901ff839d3", "patch": "@@ -312,6 +312,10 @@ define_Conf! {\n     (max_suggested_slice_pattern_length: u64 = 3),\n     /// Lint: AWAIT_HOLDING_INVALID_TYPE\n     (await_holding_invalid_types: Vec<crate::utils::conf::DisallowedType> = Vec::new()),\n+    /// Lint: LARGE_INCLUDE_FILE.\n+    ///\n+    /// The maximum size of a file included via `include_bytes!()` or `include_str!()`, in bytes\n+    (max_include_file_size: u64 = 1_000_000),\n }\n \n /// Search for the configuration file."}, {"sha": "ea34bf9fbe01d2d9391064b919ef9142a8c36396", "filename": "tests/ui-toml/large_include_file/clippy.toml", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a85dc87c4cb0640915a3d5a5a318c2901ff839d3/tests%2Fui-toml%2Flarge_include_file%2Fclippy.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a85dc87c4cb0640915a3d5a5a318c2901ff839d3/tests%2Fui-toml%2Flarge_include_file%2Fclippy.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Flarge_include_file%2Fclippy.toml?ref=a85dc87c4cb0640915a3d5a5a318c2901ff839d3", "patch": "@@ -0,0 +1 @@\n+max-include-file-size = 600"}, {"sha": "f3dbb6ad1cf59a4d4aa385ab5365aef2d9dc9ac2", "filename": "tests/ui-toml/large_include_file/large_include_file.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a85dc87c4cb0640915a3d5a5a318c2901ff839d3/tests%2Fui-toml%2Flarge_include_file%2Flarge_include_file.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a85dc87c4cb0640915a3d5a5a318c2901ff839d3/tests%2Fui-toml%2Flarge_include_file%2Flarge_include_file.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Flarge_include_file%2Flarge_include_file.rs?ref=a85dc87c4cb0640915a3d5a5a318c2901ff839d3", "patch": "@@ -0,0 +1,16 @@\n+#![warn(clippy::large_include_file)]\n+\n+// Good\n+const GOOD_INCLUDE_BYTES: &[u8; 581] = include_bytes!(\"large_include_file.rs\");\n+const GOOD_INCLUDE_STR: &str = include_str!(\"large_include_file.rs\");\n+\n+#[allow(clippy::large_include_file)]\n+const ALLOWED_TOO_BIG_INCLUDE_BYTES: &[u8; 654] = include_bytes!(\"too_big.txt\");\n+#[allow(clippy::large_include_file)]\n+const ALLOWED_TOO_BIG_INCLUDE_STR: &str = include_str!(\"too_big.txt\");\n+\n+// Bad\n+const TOO_BIG_INCLUDE_BYTES: &[u8; 654] = include_bytes!(\"too_big.txt\");\n+const TOO_BIG_INCLUDE_STR: &str = include_str!(\"too_big.txt\");\n+\n+fn main() {}"}, {"sha": "6a685a58318b9b16d0b6d4189f2bae64eae86216", "filename": "tests/ui-toml/large_include_file/large_include_file.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a85dc87c4cb0640915a3d5a5a318c2901ff839d3/tests%2Fui-toml%2Flarge_include_file%2Flarge_include_file.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a85dc87c4cb0640915a3d5a5a318c2901ff839d3/tests%2Fui-toml%2Flarge_include_file%2Flarge_include_file.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Flarge_include_file%2Flarge_include_file.stderr?ref=a85dc87c4cb0640915a3d5a5a318c2901ff839d3", "patch": "@@ -0,0 +1,21 @@\n+error: attempted to include a large file\n+  --> $DIR/large_include_file.rs:13:43\n+   |\n+LL | const TOO_BIG_INCLUDE_BYTES: &[u8; 654] = include_bytes!(\"too_big.txt\");\n+   |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::large-include-file` implied by `-D warnings`\n+   = note: the configuration allows a maximum size of 600 bytes\n+   = note: this error originates in the macro `include_bytes` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: attempted to include a large file\n+  --> $DIR/large_include_file.rs:14:35\n+   |\n+LL | const TOO_BIG_INCLUDE_STR: &str = include_str!(\"too_big.txt\");\n+   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the configuration allows a maximum size of 600 bytes\n+   = note: this error originates in the macro `include_str` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "9829c46bc00f63cc6a1dedc8677cb754f2d39b71", "filename": "tests/ui-toml/large_include_file/too_big.txt", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a85dc87c4cb0640915a3d5a5a318c2901ff839d3/tests%2Fui-toml%2Flarge_include_file%2Ftoo_big.txt", "raw_url": "https://github.com/rust-lang/rust/raw/a85dc87c4cb0640915a3d5a5a318c2901ff839d3/tests%2Fui-toml%2Flarge_include_file%2Ftoo_big.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Flarge_include_file%2Ftoo_big.txt?ref=a85dc87c4cb0640915a3d5a5a318c2901ff839d3", "patch": "@@ -0,0 +1 @@\n+Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Maecenas accumsan lacus vel facilisis volutpat. Etiam dignissim diam quis enim lobortis scelerisque fermentum dui faucibus. Tellus id interdum velit laoreet id donec ultrices. Est ultricies integer quis auctor elit sed vulputate. Erat velit scelerisque in dictum non consectetur a erat nam. Sed blandit libero volutpat sed. Tortor condimentum lacinia quis vel eros. Enim ut tellus elementum sagittis vitae et leo duis. Congue mauris rhoncus aenean vel elit scelerisque. Id consectetur purus ut faucibus pulvinar elementum integer.\n\\ No newline at end of file"}, {"sha": "8701809b4daaaa8901bafbfc9479ac4874244899", "filename": "tests/ui-toml/toml_unknown_key/conf_unknown_key.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a85dc87c4cb0640915a3d5a5a318c2901ff839d3/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a85dc87c4cb0640915a3d5a5a318c2901ff839d3/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr?ref=a85dc87c4cb0640915a3d5a5a318c2901ff839d3", "patch": "@@ -1,4 +1,4 @@\n-error: error reading Clippy's configuration file `$DIR/clippy.toml`: unknown field `foobar`, expected one of `avoid-breaking-exported-api`, `msrv`, `blacklisted-names`, `cognitive-complexity-threshold`, `cyclomatic-complexity-threshold`, `doc-valid-idents`, `too-many-arguments-threshold`, `type-complexity-threshold`, `single-char-binding-names-threshold`, `too-large-for-stack`, `enum-variant-name-threshold`, `enum-variant-size-threshold`, `verbose-bit-mask-threshold`, `literal-representation-threshold`, `trivial-copy-size-limit`, `pass-by-value-size-limit`, `too-many-lines-threshold`, `array-size-threshold`, `vec-box-size-threshold`, `max-trait-bounds`, `max-struct-bools`, `max-fn-params-bools`, `warn-on-all-wildcard-imports`, `disallowed-methods`, `disallowed-types`, `unreadable-literal-lint-fractions`, `upper-case-acronyms-aggressive`, `cargo-ignore-publish`, `standard-macro-braces`, `enforced-import-renames`, `allowed-scripts`, `enable-raw-pointer-heuristic-for-send`, `max-suggested-slice-pattern-length`, `await-holding-invalid-types`, `third-party` at line 5 column 1\n+error: error reading Clippy's configuration file `$DIR/clippy.toml`: unknown field `foobar`, expected one of `avoid-breaking-exported-api`, `msrv`, `blacklisted-names`, `cognitive-complexity-threshold`, `cyclomatic-complexity-threshold`, `doc-valid-idents`, `too-many-arguments-threshold`, `type-complexity-threshold`, `single-char-binding-names-threshold`, `too-large-for-stack`, `enum-variant-name-threshold`, `enum-variant-size-threshold`, `verbose-bit-mask-threshold`, `literal-representation-threshold`, `trivial-copy-size-limit`, `pass-by-value-size-limit`, `too-many-lines-threshold`, `array-size-threshold`, `vec-box-size-threshold`, `max-trait-bounds`, `max-struct-bools`, `max-fn-params-bools`, `warn-on-all-wildcard-imports`, `disallowed-methods`, `disallowed-types`, `unreadable-literal-lint-fractions`, `upper-case-acronyms-aggressive`, `cargo-ignore-publish`, `standard-macro-braces`, `enforced-import-renames`, `allowed-scripts`, `enable-raw-pointer-heuristic-for-send`, `max-suggested-slice-pattern-length`, `await-holding-invalid-types`, `max-include-file-size`, `third-party` at line 5 column 1\n \n error: aborting due to previous error\n "}]}