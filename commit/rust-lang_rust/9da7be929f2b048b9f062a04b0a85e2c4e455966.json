{"sha": "9da7be929f2b048b9f062a04b0a85e2c4e455966", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkYTdiZTkyOWYyYjA0OGI5ZjA2MmEwNGIwYTg1ZTJjNGU0NTU5NjY=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2015-06-11T02:43:12Z"}, "committer": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2015-06-11T02:43:12Z"}, "message": "Merge pull request #101 from nrc/test\n\nAdd a terrible, but useful, test which I used locally", "tree": {"sha": "da84bd9c766331dc9e465c9f74b208219f3e3067", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da84bd9c766331dc9e465c9f74b208219f3e3067"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9da7be929f2b048b9f062a04b0a85e2c4e455966", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9da7be929f2b048b9f062a04b0a85e2c4e455966", "html_url": "https://github.com/rust-lang/rust/commit/9da7be929f2b048b9f062a04b0a85e2c4e455966", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9da7be929f2b048b9f062a04b0a85e2c4e455966/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8931fb0926b8cc4dbfe9abd45d7db5be9b5ecaf7", "url": "https://api.github.com/repos/rust-lang/rust/commits/8931fb0926b8cc4dbfe9abd45d7db5be9b5ecaf7", "html_url": "https://github.com/rust-lang/rust/commit/8931fb0926b8cc4dbfe9abd45d7db5be9b5ecaf7"}, {"sha": "caa10d408bed55d43684747bb0068b9facb5af9f", "url": "https://api.github.com/repos/rust-lang/rust/commits/caa10d408bed55d43684747bb0068b9facb5af9f", "html_url": "https://github.com/rust-lang/rust/commit/caa10d408bed55d43684747bb0068b9facb5af9f"}], "stats": {"total": 297, "additions": 297, "deletions": 0}, "files": [{"sha": "f325337c75871cda39b075aa8d5eda7b7a22d06d", "filename": "tests/source/doc.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9da7be929f2b048b9f062a04b0a85e2c4e455966/tests%2Fsource%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9da7be929f2b048b9f062a04b0a85e2c4e455966/tests%2Fsource%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fdoc.rs?ref=9da7be929f2b048b9f062a04b0a85e2c4e455966", "patch": "@@ -0,0 +1,3 @@\n+\n+// sadfsdfa\n+//sdffsdfasdf"}, {"sha": "024817353dad8f534b00fbd4bc55b8c50f2df930", "filename": "tests/source/multiple.rs", "status": "added", "additions": 127, "deletions": 0, "changes": 127, "blob_url": "https://github.com/rust-lang/rust/blob/9da7be929f2b048b9f062a04b0a85e2c4e455966/tests%2Fsource%2Fmultiple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9da7be929f2b048b9f062a04b0a85e2c4e455966/tests%2Fsource%2Fmultiple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fmultiple.rs?ref=9da7be929f2b048b9f062a04b0a85e2c4e455966", "patch": "@@ -0,0 +1,127 @@\n+// Test of lots of random stuff.\n+// FIXME split this into multiple, self-contained tests.\n+\n+\n+#[attr1] extern crate foo;\n+#[attr2] #[attr3] extern crate foo;\n+#[attr1]extern crate foo;\n+#[attr2]#[attr3]extern crate foo;\n+\n+use std::cell::*;\n+use std::{any, ascii, self, borrow, boxed, char, borrow, boxed, char, borrow, borrow, boxed, char, borrow, boxed, char, borrow, boxed, char, borrow, boxed, char, borrow, boxed, char, borrow, boxed, char, borrow, boxed, char, borrow, boxed, char};\n+\n+mod doc;\n+mod other;\n+\n+\n+// sfdgfffffffffffffffffffffffffffffffffffffffffffffffffffffff ffffffffffffffffffffffffffffffffffffffffff\n+\n+                                                         fn foo(a: isize,\n+     b: u32, /* blah blah */\n+         c: f64) {\n+\n+}\n+\n+fn foo() where 'a: 'b, for<'a> D<'b>: 'a {\n+    hello!()\n+}\n+\n+fn baz<'a: 'b /* comment on 'a */, T: SomsssssssssssssssssssssssssssssssssssssssssssssssssssssseType /* comment on T */>(a: A, b: B /* comment on b */, c: C) -> Bob {\n+    #[attr1] extern crate foo;\n+    #[attr2] #[attr3] extern crate foo;\n+    #[attr1]extern crate foo;\n+    #[attr2]#[attr3]extern crate foo;\n+}\n+\n+#[rustfmt_skip]\n+fn qux(a: dadsfa,   // Comment 1\n+       b: sdfasdfa, // Comment 2\n+       c: dsfdsafa) // Comment 3\n+{\n+\n+}\n+\n+/// Blah blah blah.\n+impl Bar {\n+    fn foo(&mut self, a: sdfsdfcccccccccccccccccccccccccccccccccccccccccccccccccccccccc, // comment on a\n+           b: sdfasdfsdfasfs /*closing comment*/ ) -> isize {}\n+\n+    /// Blah blah blah.\n+    pub fn f2(self) {\n+        (foo, bar)\n+    }\n+\n+    #[an_attribute]\n+    fn f3(self) -> Dog {\n+    }\n+}\n+\n+/// The `nodes` and `edges` method each return instantiations of\n+/// `Cow<[T]>` to leave implementers the freedom to create\n+\n+/// entirely new vectors or to pass back slices into internally owned\n+/// vectors.\n+pub trait GraphWalk<'a, N, E> {\n+    /// Returns all the nodes in this graph.\n+    fn nodes(&'a self) -> Nodes<'a, N>;\n+    /// Returns all of the edges in this graph.\n+    fn edges(&'a self) -> Edges<'a, E>;\n+    /// The source node for `edge`.\n+    fn source(&'a self, edge: &E) -> N;\n+    /// The target node for `edge`.\n+    fn target(&'a self, edge: &E) -> N;\n+}\n+\n+/// A Doc comment\n+#[AnAttribute]\n+pub struct Foo {\n+    #[rustfmt_skip]\n+    f :   SomeType, // Comment beside a field\n+    f :   SomeType, // Comment beside a field\n+    // Comment on a field\n+    g: SomeOtherType,\n+    /// A doc comment on a field\n+    h: AThirdType,}\n+\n+struct Bar;\n+\n+// With a where clause and generics.\n+pub struct Foo<'a, Y: Baz>\n+    where X: Whatever\n+{\n+    f: SomeType, // Comment beside a field\n+}\n+\n+fn main() {\n+    for i in 0i32..4 {\n+        println!(\"{}\", i);\n+    }\n+\n+\n+    while true {\n+        hello();\n+    }\n+\n+        let rc = Cell::new(42usize,42usize, Cell::new(42usize, remaining_widthremaining_widthremaining_widthremaining_width), 42usize);\n+    let rc = RefCell::new(42usize,remaining_width,           remaining_width);  // a comment\n+      let x = \"Hello!!!!!!!!! abcd  abcd abcd abcd abcd abcd\\n abcd abcd abcd abcd abcd abcd abcd abcd abcd \\\n+                   abcd  abcd abcd abcd abcd abcd abcd abcd abcd abcd \\\n+                    abcd abcd abcd abcd abcd abcd abcd abcd abcd abcd abcd abcd abcd abcd abcd abcd abcd abcd abcd abcd abcd abcd abcd\";  }\n+\n+\n+fn struct_lits() {\n+    let x = Bar;\n+    // Comment\n+    let y = Foo { a: x };\n+    Foo { a: foo() /* comment*/, /* comment*/ b: bar(), ..something };\n+    Fooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo { a: foo(), b: bar(), };\n+    Fooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo {\n+        // Comment\n+        a: foo(), // Comment\n+        // Comment\n+        b: bar(), // Comment\n+    };\n+\n+    Foo { a: Bar,\n+          b: foo() };\n+}"}, {"sha": "dfce84fcdc477bb869cf76e8f33b6f3019417757", "filename": "tests/source/other.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9da7be929f2b048b9f062a04b0a85e2c4e455966/tests%2Fsource%2Fother.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9da7be929f2b048b9f062a04b0a85e2c4e455966/tests%2Fsource%2Fother.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fother.rs?ref=9da7be929f2b048b9f062a04b0a85e2c4e455966", "patch": "@@ -0,0 +1,5 @@\n+// Part of multiple.rs\n+\n+fn bob() {\n+    println!(\"hello other!\");\n+}"}, {"sha": "f325337c75871cda39b075aa8d5eda7b7a22d06d", "filename": "tests/target/doc.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9da7be929f2b048b9f062a04b0a85e2c4e455966/tests%2Ftarget%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9da7be929f2b048b9f062a04b0a85e2c4e455966/tests%2Ftarget%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fdoc.rs?ref=9da7be929f2b048b9f062a04b0a85e2c4e455966", "patch": "@@ -0,0 +1,3 @@\n+\n+// sadfsdfa\n+//sdffsdfasdf"}, {"sha": "0e89af29c15076aef8b8509151fc5d48fd9d3077", "filename": "tests/target/multiple.rs", "status": "added", "additions": 154, "deletions": 0, "changes": 154, "blob_url": "https://github.com/rust-lang/rust/blob/9da7be929f2b048b9f062a04b0a85e2c4e455966/tests%2Ftarget%2Fmultiple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9da7be929f2b048b9f062a04b0a85e2c4e455966/tests%2Ftarget%2Fmultiple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmultiple.rs?ref=9da7be929f2b048b9f062a04b0a85e2c4e455966", "patch": "@@ -0,0 +1,154 @@\n+// Test of lots of random stuff.\n+// FIXME split this into multiple, self-contained tests.\n+\n+\n+#[attr1]\n+extern crate foo;\n+#[attr2]\n+#[attr3]\n+extern crate foo;\n+#[attr1]\n+extern crate foo;\n+#[attr2]\n+#[attr3]\n+extern crate foo;\n+\n+use std::cell::*;\n+use std::{self, any, ascii, borrow, boxed, char, borrow, boxed, char, borrow,\n+          borrow, boxed, char, borrow, boxed, char, borrow, boxed, char,\n+          borrow, boxed, char, borrow, boxed, char, borrow, boxed, char,\n+          borrow, boxed, char, borrow, boxed, char};\n+\n+mod doc;\n+mod other;\n+\n+\n+// sfdgfffffffffffffffffffffffffffffffffffffffffffffffffffffff ffffffffffffffffffffffffffffffffffffffffff\n+\n+fn foo(a: isize, b: u32 /* blah blah */, c: f64) {\n+\n+}\n+\n+fn foo()\n+    where 'a: 'b,\n+          for<'a> D<'b>: 'a\n+{\n+    hello!()\n+}\n+\n+fn baz<'a: 'b, /* comment on 'a */\n+       T: SomsssssssssssssssssssssssssssssssssssssssssssssssssssssseType /* comment on T */>\n+    (a: A,\n+     b: B, /* comment on b */\n+     c: C)\n+     -> Bob {\n+    #[attr1]\n+    extern crate foo;\n+    #[attr2]\n+    #[attr3]\n+    extern crate foo;\n+    #[attr1]\n+    extern crate foo;\n+    #[attr2]\n+    #[attr3]\n+    extern crate foo;\n+}\n+\n+#[rustfmt_skip]\n+fn qux(a: dadsfa,   // Comment 1\n+       b: sdfasdfa, // Comment 2\n+       c: dsfdsafa) // Comment 3\n+{\n+\n+}\n+\n+/// Blah blah blah.\n+impl Bar {\n+    fn foo(&mut self,\n+           a: sdfsdfcccccccccccccccccccccccccccccccccccccccccccccccccccccccc, // comment on a\n+           b: sdfasdfsdfasfs /*closing comment*/)\n+           -> isize {\n+    }\n+\n+    /// Blah blah blah.\n+    pub fn f2(self) {\n+        (foo, bar)\n+    }\n+\n+    #[an_attribute]\n+    fn f3(self) -> Dog {\n+    }\n+}\n+\n+/// The `nodes` and `edges` method each return instantiations of\n+/// `Cow<[T]>` to leave implementers the freedom to create\n+\n+/// entirely new vectors or to pass back slices into internally owned\n+/// vectors.\n+pub trait GraphWalk<'a, N, E> {\n+    /// Returns all the nodes in this graph.\n+    fn nodes(&'a self) -> Nodes<'a, N>;\n+    /// Returns all of the edges in this graph.\n+    fn edges(&'a self) -> Edges<'a, E>;\n+    /// The source node for `edge`.\n+    fn source(&'a self, edge: &E) -> N;\n+    /// The target node for `edge`.\n+    fn target(&'a self, edge: &E) -> N;\n+}\n+\n+/// A Doc comment\n+#[AnAttribute]\n+pub struct Foo {\n+    #[rustfmt_skip]\n+    f :   SomeType, // Comment beside a field\n+    f: SomeType, // Comment beside a field\n+    // Comment on a field\n+    g: SomeOtherType,\n+    /// A doc comment on a field\n+    h: AThirdType,\n+}\n+\n+struct Bar;\n+\n+// With a where clause and generics.\n+pub struct Foo<'a, Y: Baz>\n+    where X: Whatever\n+{\n+    f: SomeType, // Comment beside a field\n+}\n+\n+fn main() {\n+    for i in 0i32..4 {\n+        println!(\"{}\", i);\n+    }\n+\n+\n+    while true {\n+        hello();\n+    }\n+\n+    let rc = Cell::new(42usize,\n+                       42usize,\n+                       Cell::new(42usize,\n+                                 remaining_widthremaining_widthremaining_widthremaining_width),\n+                       42usize);\n+    let rc = RefCell::new(42usize, remaining_width, remaining_width);  // a comment\n+    let x = \"Hello!!!!!!!!! abcd  abcd abcd abcd abcd abcd\\n abcd abcd abcd abcd abcd abcd abcd \\\n+             abcd abcd abcd  abcd abcd abcd abcd abcd abcd abcd abcd abcd abcd abcd abcd abcd abcd \\\n+             abcd abcd abcd abcd abcd abcd abcd abcd abcd abcd abcd abcd abcd abcd abcd abcd abcd \\\n+             abcd\";\n+}\n+\n+\n+fn struct_lits() {\n+    let x = Bar;\n+    // Comment\n+    let y = Foo { a: x };\n+    Foo { a: foo(), b: bar(), ..something };\n+    Fooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo { a: foo(),\n+                                                                               b: bar(), };\n+    Fooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo { a: foo(),\n+                                                                                         b: bar(), };\n+\n+    Foo { a: Bar, b: foo() };\n+}"}, {"sha": "dfce84fcdc477bb869cf76e8f33b6f3019417757", "filename": "tests/target/other.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9da7be929f2b048b9f062a04b0a85e2c4e455966/tests%2Ftarget%2Fother.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9da7be929f2b048b9f062a04b0a85e2c4e455966/tests%2Ftarget%2Fother.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fother.rs?ref=9da7be929f2b048b9f062a04b0a85e2c4e455966", "patch": "@@ -0,0 +1,5 @@\n+// Part of multiple.rs\n+\n+fn bob() {\n+    println!(\"hello other!\");\n+}"}]}