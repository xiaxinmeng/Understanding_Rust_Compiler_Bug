{"sha": "b8feb63345b70f98c33ce68e844d9334b9a6f847", "node_id": "C_kwDOAAsO6NoAKGI4ZmViNjMzNDViNzBmOThjMzNjZTY4ZTg0NGQ5MzM0YjlhNmY4NDc", "commit": {"author": {"name": "Nikita Tomashevich", "email": "quant3234@gmail.com", "date": "2023-01-22T15:16:47Z"}, "committer": {"name": "IQuant", "email": "quant3234@gmail.com", "date": "2023-02-14T15:31:45Z"}, "message": "Port WhereClauseSuggestions", "tree": {"sha": "515c2e391c004360f25451966d57370618d45e1f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/515c2e391c004360f25451966d57370618d45e1f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b8feb63345b70f98c33ce68e844d9334b9a6f847", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b8feb63345b70f98c33ce68e844d9334b9a6f847", "html_url": "https://github.com/rust-lang/rust/commit/b8feb63345b70f98c33ce68e844d9334b9a6f847", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b8feb63345b70f98c33ce68e844d9334b9a6f847/comments", "author": {"login": "IntQuant", "id": 25219447, "node_id": "MDQ6VXNlcjI1MjE5NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/25219447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/IntQuant", "html_url": "https://github.com/IntQuant", "followers_url": "https://api.github.com/users/IntQuant/followers", "following_url": "https://api.github.com/users/IntQuant/following{/other_user}", "gists_url": "https://api.github.com/users/IntQuant/gists{/gist_id}", "starred_url": "https://api.github.com/users/IntQuant/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/IntQuant/subscriptions", "organizations_url": "https://api.github.com/users/IntQuant/orgs", "repos_url": "https://api.github.com/users/IntQuant/repos", "events_url": "https://api.github.com/users/IntQuant/events{/privacy}", "received_events_url": "https://api.github.com/users/IntQuant/received_events", "type": "User", "site_admin": false}, "committer": {"login": "IntQuant", "id": 25219447, "node_id": "MDQ6VXNlcjI1MjE5NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/25219447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/IntQuant", "html_url": "https://github.com/IntQuant", "followers_url": "https://api.github.com/users/IntQuant/followers", "following_url": "https://api.github.com/users/IntQuant/following{/other_user}", "gists_url": "https://api.github.com/users/IntQuant/gists{/gist_id}", "starred_url": "https://api.github.com/users/IntQuant/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/IntQuant/subscriptions", "organizations_url": "https://api.github.com/users/IntQuant/orgs", "repos_url": "https://api.github.com/users/IntQuant/repos", "events_url": "https://api.github.com/users/IntQuant/events{/privacy}", "received_events_url": "https://api.github.com/users/IntQuant/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d590dc3039d49cb8b54f3aec380d43b3ed5e2dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d590dc3039d49cb8b54f3aec380d43b3ed5e2dd", "html_url": "https://github.com/rust-lang/rust/commit/8d590dc3039d49cb8b54f3aec380d43b3ed5e2dd"}], "stats": {"total": 57, "additions": 40, "deletions": 17}, "files": [{"sha": "f7e1420d76c43d2959304fd12fc637b12a666613", "filename": "compiler/rustc_error_messages/locales/en-US/infer.ftl", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b8feb63345b70f98c33ce68e844d9334b9a6f847/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Finfer.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/b8feb63345b70f98c33ce68e844d9334b9a6f847/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Finfer.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Finfer.ftl?ref=b8feb63345b70f98c33ce68e844d9334b9a6f847", "patch": "@@ -327,3 +327,6 @@ infer_ril_introduced_here = `'static` requirement introduced here\n infer_ril_introduced_by = requirement introduced by this return type\n infer_ril_because_of = because of this returned expression\n infer_ril_static_introduced_by = \"`'static` lifetime requirement introduced by the return type\n+\n+infer_where_remove = remove the `where` clause\n+infer_where_copy_predicates = copy the `where` clause predicates from the trait"}, {"sha": "7fa04043edf4dbae56ac498925ae4ca7090df054", "filename": "compiler/rustc_infer/src/errors/mod.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b8feb63345b70f98c33ce68e844d9334b9a6f847/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8feb63345b70f98c33ce68e844d9334b9a6f847/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs?ref=b8feb63345b70f98c33ce68e844d9334b9a6f847", "patch": "@@ -980,3 +980,29 @@ pub struct RefLongerThanData<'a> {\n     #[subdiagnostic]\n     pub notes: Vec<note_and_explain::RegionExplanation<'a>>,\n }\n+\n+#[derive(Subdiagnostic)]\n+pub enum WhereClauseSuggestions {\n+    #[suggestion(\n+        infer_where_remove,\n+        code = \"\",\n+        applicability = \"machine-applicable\",\n+        style = \"verbose\"\n+    )]\n+    Remove {\n+        #[primary_span]\n+        span: Span,\n+    },\n+    #[suggestion(\n+        infer_where_copy_predicates,\n+        code = \"{space}where {}\",\n+        applicability = \"machine-applicable\",\n+        style = \"verbose\"\n+    )]\n+    CopyPredicates {\n+        #[primary_span]\n+        span: Span,\n+        space: &'static str,\n+        trait_predicates: String,\n+    },\n+}"}, {"sha": "e0e89158a58386ec0e7eb4dd944dfef060e089c7", "filename": "compiler/rustc_infer/src/infer/error_reporting/note.rs", "status": "modified", "additions": 11, "deletions": 17, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b8feb63345b70f98c33ce68e844d9334b9a6f847/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8feb63345b70f98c33ce68e844d9334b9a6f847/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs?ref=b8feb63345b70f98c33ce68e844d9334b9a6f847", "patch": "@@ -1,12 +1,11 @@\n use crate::errors::{\n     note_and_explain, FullfillReqLifetime, LfBoundNotSatisfied, OutlivesBound, OutlivesContent,\n-    RefLongerThanData, RegionOriginNote,\n+    RefLongerThanData, RegionOriginNote, WhereClauseSuggestions,\n };\n use crate::infer::error_reporting::{note_and_explain_region, TypeErrCtxt};\n use crate::infer::{self, SubregionOrigin};\n use rustc_errors::{\n-    fluent, AddToDiagnostic, Applicability, Diagnostic, DiagnosticBuilder, ErrorGuaranteed,\n-    IntoDiagnostic,\n+    fluent, AddToDiagnostic, Diagnostic, DiagnosticBuilder, ErrorGuaranteed, IntoDiagnostic,\n };\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_middle::traits::ObligationCauseCode;\n@@ -325,22 +324,17 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n \n         let Some(generics) = self.tcx.hir().get_generics(impl_item_def_id) else { return; };\n \n-        if trait_predicates.is_empty() {\n-            err.span_suggestion_verbose(\n-                generics.where_clause_span,\n-                \"remove the `where` clause\",\n-                String::new(),\n-                Applicability::MachineApplicable,\n-            );\n+        let suggestion = if trait_predicates.is_empty() {\n+            WhereClauseSuggestions::Remove { span: generics.where_clause_span }\n         } else {\n             let space = if generics.where_clause_span.is_empty() { \" \" } else { \"\" };\n-            err.span_suggestion_verbose(\n-                generics.where_clause_span,\n-                \"copy the `where` clause predicates from the trait\",\n-                format!(\"{space}where {}\", trait_predicates.join(\", \")),\n-                Applicability::MachineApplicable,\n-            );\n-        }\n+            WhereClauseSuggestions::CopyPredicates {\n+                span: generics.where_clause_span,\n+                space,\n+                trait_predicates: trait_predicates.join(\", \"),\n+            }\n+        };\n+        err.subdiagnostic(suggestion);\n     }\n \n     pub(super) fn report_placeholder_failure("}]}