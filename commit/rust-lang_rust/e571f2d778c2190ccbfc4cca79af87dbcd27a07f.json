{"sha": "e571f2d778c2190ccbfc4cca79af87dbcd27a07f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1NzFmMmQ3NzhjMjE5MGNjYmZjNGNjYTc5YWY4N2RiY2QyN2EwN2Y=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-12-29T11:01:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-12-29T11:01:11Z"}, "message": "Auto merge of #38571 - nrc:emit-metadata-change, r=alexcrichton\n\nChange --crate-type metadata to --emit=metadata\n\nWIP", "tree": {"sha": "a9f3e9e855259802a563f0cfba08bf100ab9c921", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a9f3e9e855259802a563f0cfba08bf100ab9c921"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e571f2d778c2190ccbfc4cca79af87dbcd27a07f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e571f2d778c2190ccbfc4cca79af87dbcd27a07f", "html_url": "https://github.com/rust-lang/rust/commit/e571f2d778c2190ccbfc4cca79af87dbcd27a07f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e571f2d778c2190ccbfc4cca79af87dbcd27a07f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ebc293bcd3fb4122c9be889b7338a9c3089f53ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/ebc293bcd3fb4122c9be889b7338a9c3089f53ce", "html_url": "https://github.com/rust-lang/rust/commit/ebc293bcd3fb4122c9be889b7338a9c3089f53ce"}, {"sha": "b059a80d4c3911a9e59d517930ee6928b329cc35", "url": "https://api.github.com/repos/rust-lang/rust/commits/b059a80d4c3911a9e59d517930ee6928b329cc35", "html_url": "https://github.com/rust-lang/rust/commit/b059a80d4c3911a9e59d517930ee6928b329cc35"}], "stats": {"total": 231, "additions": 154, "deletions": 77}, "files": [{"sha": "e60d0533c9f8166be71f6991e22e84c36a43ab71", "filename": "src/librustc/middle/dependency_format.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e571f2d778c2190ccbfc4cca79af87dbcd27a07f/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e571f2d778c2190ccbfc4cca79af87dbcd27a07f/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs?ref=e571f2d778c2190ccbfc4cca79af87dbcd27a07f", "patch": "@@ -103,6 +103,10 @@ pub fn calculate(sess: &session::Session) {\n \n fn calculate_type(sess: &session::Session,\n                   ty: config::CrateType) -> DependencyList {\n+    if !sess.opts.output_types.should_trans() {\n+        return Vec::new();\n+    }\n+\n     match ty {\n         // If the global prefer_dynamic switch is turned off, first attempt\n         // static linkage (this can fail).\n@@ -114,7 +118,7 @@ fn calculate_type(sess: &session::Session,\n \n         // No linkage happens with rlibs, we just needed the metadata (which we\n         // got long ago), so don't bother with anything.\n-        config::CrateTypeRlib | config::CrateTypeMetadata => return Vec::new(),\n+        config::CrateTypeRlib => return Vec::new(),\n \n         // Staticlibs and cdylibs must have all static dependencies. If any fail\n         // to be found, we generate some nice pretty errors."}, {"sha": "765d93742d8fbc4f521b629bfb5f29094bd8b2cb", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e571f2d778c2190ccbfc4cca79af87dbcd27a07f/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e571f2d778c2190ccbfc4cca79af87dbcd27a07f/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=e571f2d778c2190ccbfc4cca79af87dbcd27a07f", "patch": "@@ -139,7 +139,7 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n     fn new(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> ReachableContext<'a, 'tcx> {\n         let any_library = tcx.sess.crate_types.borrow().iter().any(|ty| {\n             *ty == config::CrateTypeRlib || *ty == config::CrateTypeDylib ||\n-            *ty == config::CrateTypeProcMacro || *ty == config::CrateTypeMetadata\n+            *ty == config::CrateTypeProcMacro\n         });\n         ReachableContext {\n             tcx: tcx,"}, {"sha": "acb506878e6b65eb94f45d772dab26fe388ec647", "filename": "src/librustc/middle/weak_lang_items.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e571f2d778c2190ccbfc4cca79af87dbcd27a07f/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e571f2d778c2190ccbfc4cca79af87dbcd27a07f/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs?ref=e571f2d778c2190ccbfc4cca79af87dbcd27a07f", "patch": "@@ -75,8 +75,7 @@ fn verify(sess: &Session, items: &lang_items::LanguageItems) {\n             config::CrateTypeCdylib |\n             config::CrateTypeExecutable |\n             config::CrateTypeStaticlib => true,\n-            config::CrateTypeRlib |\n-            config::CrateTypeMetadata => false,\n+            config::CrateTypeRlib => false,\n         }\n     });\n     if !needs_check {"}, {"sha": "b3cb5ace45bc04e702d8b16a506f48f1b9277cea", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 36, "deletions": 10, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/e571f2d778c2190ccbfc4cca79af87dbcd27a07f/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e571f2d778c2190ccbfc4cca79af87dbcd27a07f/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=e571f2d778c2190ccbfc4cca79af87dbcd27a07f", "patch": "@@ -73,6 +73,7 @@ pub enum OutputType {\n     Bitcode,\n     Assembly,\n     LlvmAssembly,\n+    Metadata,\n     Object,\n     Exe,\n     DepInfo,\n@@ -86,7 +87,8 @@ impl OutputType {\n             OutputType::Bitcode |\n             OutputType::Assembly |\n             OutputType::LlvmAssembly |\n-            OutputType::Object => false,\n+            OutputType::Object |\n+            OutputType::Metadata => false,\n         }\n     }\n \n@@ -96,6 +98,7 @@ impl OutputType {\n             OutputType::Assembly => \"asm\",\n             OutputType::LlvmAssembly => \"llvm-ir\",\n             OutputType::Object => \"obj\",\n+            OutputType::Metadata => \"metadata\",\n             OutputType::Exe => \"link\",\n             OutputType::DepInfo => \"dep-info\",\n         }\n@@ -107,6 +110,7 @@ impl OutputType {\n             OutputType::Assembly => \"s\",\n             OutputType::LlvmAssembly => \"ll\",\n             OutputType::Object => \"o\",\n+            OutputType::Metadata => \"rmeta\",\n             OutputType::DepInfo => \"d\",\n             OutputType::Exe => \"\",\n         }\n@@ -152,6 +156,19 @@ impl OutputTypes {\n     pub fn values<'a>(&'a self) -> BTreeMapValuesIter<'a, OutputType, Option<PathBuf>> {\n         self.0.values()\n     }\n+\n+    // True if any of the output types require codegen or linking.\n+    pub fn should_trans(&self) -> bool {\n+        self.0.keys().any(|k| match *k {\n+            OutputType::Bitcode |\n+            OutputType::Assembly |\n+            OutputType::LlvmAssembly |\n+            OutputType::Object |\n+            OutputType::Exe => true,\n+            OutputType::Metadata |\n+            OutputType::DepInfo => false,\n+        })\n+    }\n }\n \n \n@@ -482,7 +499,6 @@ pub enum CrateType {\n     CrateTypeStaticlib,\n     CrateTypeCdylib,\n     CrateTypeProcMacro,\n-    CrateTypeMetadata,\n }\n \n #[derive(Clone, Hash)]\n@@ -1159,12 +1175,12 @@ pub fn rustc_short_optgroups() -> Vec<RustcOptGroup> {\n                              assumed.\", \"[KIND=]NAME\"),\n         opt::multi_s(\"\", \"crate-type\", \"Comma separated list of types of crates\n                                     for the compiler to emit\",\n-                   \"[bin|lib|rlib|dylib|cdylib|staticlib|metadata]\"),\n+                   \"[bin|lib|rlib|dylib|cdylib|staticlib]\"),\n         opt::opt_s(\"\", \"crate-name\", \"Specify the name of the crate being built\",\n                \"NAME\"),\n         opt::multi_s(\"\", \"emit\", \"Comma separated list of types of output for \\\n                               the compiler to emit\",\n-                 \"[asm|llvm-bc|llvm-ir|obj|link|dep-info]\"),\n+                 \"[asm|llvm-bc|llvm-ir|obj|metadata|link|dep-info]\"),\n         opt::multi_s(\"\", \"print\", \"Comma separated list of compiler information to \\\n                                print on stdout\", &print_opts.join(\"|\")),\n         opt::flagmulti_s(\"g\",  \"\",  \"Equivalent to -C debuginfo=2\"),\n@@ -1293,7 +1309,7 @@ pub fn build_session_options_and_crate_config(matches: &getopts::Matches)\n     };\n \n     let unparsed_crate_types = matches.opt_strs(\"crate-type\");\n-    let crate_types = parse_crate_types_from_list(unparsed_crate_types)\n+    let (crate_types, emit_metadata) = parse_crate_types_from_list(unparsed_crate_types)\n         .unwrap_or_else(|e| early_error(error_format, &e[..]));\n \n     let mut lint_opts = vec![];\n@@ -1327,6 +1343,7 @@ pub fn build_session_options_and_crate_config(matches: &getopts::Matches)\n                     \"llvm-ir\" => OutputType::LlvmAssembly,\n                     \"llvm-bc\" => OutputType::Bitcode,\n                     \"obj\" => OutputType::Object,\n+                    \"metadata\" => OutputType::Metadata,\n                     \"link\" => OutputType::Exe,\n                     \"dep-info\" => OutputType::DepInfo,\n                     part => {\n@@ -1339,7 +1356,9 @@ pub fn build_session_options_and_crate_config(matches: &getopts::Matches)\n             }\n         }\n     };\n-    if output_types.is_empty() {\n+    if emit_metadata {\n+        output_types.insert(OutputType::Metadata, None);\n+    } else if output_types.is_empty() {\n         output_types.insert(OutputType::Exe, None);\n     }\n \n@@ -1541,8 +1560,10 @@ pub fn build_session_options_and_crate_config(matches: &getopts::Matches)\n     cfg)\n }\n \n-pub fn parse_crate_types_from_list(list_list: Vec<String>) -> Result<Vec<CrateType>, String> {\n+pub fn parse_crate_types_from_list(list_list: Vec<String>)\n+                                   -> Result<(Vec<CrateType>, bool), String> {\n     let mut crate_types: Vec<CrateType> = Vec::new();\n+    let mut emit_metadata = false;\n     for unparsed_crate_type in &list_list {\n         for part in unparsed_crate_type.split(',') {\n             let new_part = match part {\n@@ -1553,7 +1574,13 @@ pub fn parse_crate_types_from_list(list_list: Vec<String>) -> Result<Vec<CrateTy\n                 \"cdylib\"    => CrateTypeCdylib,\n                 \"bin\"       => CrateTypeExecutable,\n                 \"proc-macro\" => CrateTypeProcMacro,\n-                \"metadata\"  => CrateTypeMetadata,\n+                // FIXME(#38640) remove this when Cargo is fixed.\n+                \"metadata\"  => {\n+                    early_warn(ErrorOutputType::default(), \"--crate-type=metadata is deprecated, \\\n+                                                            prefer --emit=metadata\");\n+                    emit_metadata = true;\n+                    CrateTypeRlib\n+                }\n                 _ => {\n                     return Err(format!(\"unknown crate type: `{}`\",\n                                        part));\n@@ -1565,7 +1592,7 @@ pub fn parse_crate_types_from_list(list_list: Vec<String>) -> Result<Vec<CrateTy\n         }\n     }\n \n-    return Ok(crate_types);\n+    return Ok((crate_types, emit_metadata));\n }\n \n pub mod nightly_options {\n@@ -1638,7 +1665,6 @@ impl fmt::Display for CrateType {\n             CrateTypeStaticlib => \"staticlib\".fmt(f),\n             CrateTypeCdylib => \"cdylib\".fmt(f),\n             CrateTypeProcMacro => \"proc-macro\".fmt(f),\n-            CrateTypeMetadata => \"metadata\".fmt(f),\n         }\n     }\n }"}, {"sha": "291f0e0d50d8fa4ea83421224d030e2ff741ad36", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e571f2d778c2190ccbfc4cca79af87dbcd27a07f/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e571f2d778c2190ccbfc4cca79af87dbcd27a07f/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=e571f2d778c2190ccbfc4cca79af87dbcd27a07f", "patch": "@@ -1182,9 +1182,6 @@ pub fn collect_crate_types(session: &Session, attrs: &[ast::Attribute]) -> Vec<c\n                          Some(ref n) if *n == \"rlib\" => {\n                              Some(config::CrateTypeRlib)\n                          }\n-                         Some(ref n) if *n == \"metadata\" => {\n-                             Some(config::CrateTypeMetadata)\n-                         }\n                          Some(ref n) if *n == \"dylib\" => {\n                              Some(config::CrateTypeDylib)\n                          }"}, {"sha": "5ceec9edda3d07a5aaef494ac70e3b864b7018e1", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e571f2d778c2190ccbfc4cca79af87dbcd27a07f/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e571f2d778c2190ccbfc4cca79af87dbcd27a07f/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=e571f2d778c2190ccbfc4cca79af87dbcd27a07f", "patch": "@@ -493,7 +493,8 @@ impl<'a> CompilerCalls<'a> for RustcDefaultCalls {\n             control.after_hir_lowering.stop = Compilation::Stop;\n         }\n \n-        if !sess.opts.output_types.keys().any(|&i| i == OutputType::Exe) {\n+        if !sess.opts.output_types.keys().any(|&i| i == OutputType::Exe ||\n+                                                   i == OutputType::Metadata) {\n             control.after_llvm.stop = Compilation::Stop;\n         }\n "}, {"sha": "724c164b3b41af747310df2a02c2917b6fb30310", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e571f2d778c2190ccbfc4cca79af87dbcd27a07f/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e571f2d778c2190ccbfc4cca79af87dbcd27a07f/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=e571f2d778c2190ccbfc4cca79af87dbcd27a07f", "patch": "@@ -799,8 +799,7 @@ impl<'a> CrateLoader<'a> {\n                 config::CrateTypeProcMacro |\n                 config::CrateTypeCdylib |\n                 config::CrateTypeStaticlib => need_lib_alloc = true,\n-                config::CrateTypeRlib |\n-                config::CrateTypeMetadata => {}\n+                config::CrateTypeRlib => {}\n             }\n         }\n         if !need_lib_alloc && !need_exe_alloc { return }"}, {"sha": "defbb44448a9f3a5f4b7ce77ecc494086f5a9f61", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 71, "deletions": 39, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/e571f2d778c2190ccbfc4cca79af87dbcd27a07f/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e571f2d778c2190ccbfc4cca79af87dbcd27a07f/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=e571f2d778c2190ccbfc4cca79af87dbcd27a07f", "patch": "@@ -191,7 +191,8 @@ pub fn link_binary(sess: &Session,\n     let mut out_filenames = Vec::new();\n     for &crate_type in sess.crate_types.borrow().iter() {\n         // Ignore executable crates if we have -Z no-trans, as they will error.\n-        if sess.opts.debugging_opts.no_trans &&\n+        if (sess.opts.debugging_opts.no_trans ||\n+            !sess.opts.output_types.should_trans()) &&\n            crate_type == config::CrateTypeExecutable {\n             continue;\n         }\n@@ -200,15 +201,16 @@ pub fn link_binary(sess: &Session,\n            bug!(\"invalid output type `{:?}` for target os `{}`\",\n                 crate_type, sess.opts.target_triple);\n         }\n-        let out_file = link_binary_output(sess, trans, crate_type, outputs,\n-                                          crate_name);\n-        out_filenames.push(out_file);\n+        let mut out_files = link_binary_output(sess, trans, crate_type, outputs, crate_name);\n+        out_filenames.append(&mut out_files);\n     }\n \n     // Remove the temporary object file and metadata if we aren't saving temps\n     if !sess.opts.cg.save_temps {\n-        for obj in object_filenames(trans, outputs) {\n-            remove(sess, &obj);\n+        if sess.opts.output_types.should_trans() {\n+            for obj in object_filenames(trans, outputs) {\n+                remove(sess, &obj);\n+            }\n         }\n         remove(sess, &outputs.with_extension(\"metadata.o\"));\n     }\n@@ -254,18 +256,25 @@ fn is_writeable(p: &Path) -> bool {\n     }\n }\n \n+fn filename_for_metadata(sess: &Session, crate_name: &str, outputs: &OutputFilenames) -> PathBuf {\n+    let out_filename = outputs.single_output_file.clone()\n+        .unwrap_or(outputs\n+            .out_directory\n+            .join(&format!(\"lib{}{}.rmeta\", crate_name, sess.opts.cg.extra_filename)));\n+    check_file_is_writeable(&out_filename, sess);\n+    out_filename\n+}\n+\n pub fn filename_for_input(sess: &Session,\n                           crate_type: config::CrateType,\n                           crate_name: &str,\n                           outputs: &OutputFilenames) -> PathBuf {\n     let libname = format!(\"{}{}\", crate_name, sess.opts.cg.extra_filename);\n+\n     match crate_type {\n         config::CrateTypeRlib => {\n             outputs.out_directory.join(&format!(\"lib{}.rlib\", libname))\n         }\n-        config::CrateTypeMetadata => {\n-            outputs.out_directory.join(&format!(\"lib{}.rmeta\", libname))\n-        }\n         config::CrateTypeCdylib |\n         config::CrateTypeProcMacro |\n         config::CrateTypeDylib => {\n@@ -323,52 +332,75 @@ pub fn each_linked_rlib(sess: &Session,\n     }\n }\n \n+fn out_filename(sess: &Session,\n+                crate_type: config::CrateType,\n+                outputs: &OutputFilenames,\n+                crate_name: &str)\n+                -> PathBuf {\n+    let default_filename = filename_for_input(sess, crate_type, crate_name, outputs);\n+    let out_filename = outputs.outputs.get(&OutputType::Exe)\n+                              .and_then(|s| s.to_owned())\n+                              .or_else(|| outputs.single_output_file.clone())\n+                              .unwrap_or(default_filename);\n+\n+    check_file_is_writeable(&out_filename, sess);\n+\n+    out_filename\n+}\n+\n+// Make sure files are writeable.  Mac, FreeBSD, and Windows system linkers\n+// check this already -- however, the Linux linker will happily overwrite a\n+// read-only file.  We should be consistent.\n+fn check_file_is_writeable(file: &Path, sess: &Session) {\n+    if !is_writeable(file) {\n+        sess.fatal(&format!(\"output file {} is not writeable -- check its \\\n+                            permissions\", file.display()));\n+    }\n+}\n+\n fn link_binary_output(sess: &Session,\n                       trans: &CrateTranslation,\n                       crate_type: config::CrateType,\n                       outputs: &OutputFilenames,\n-                      crate_name: &str) -> PathBuf {\n+                      crate_name: &str) -> Vec<PathBuf> {\n     let objects = object_filenames(trans, outputs);\n-    let default_filename = filename_for_input(sess, crate_type, crate_name,\n-                                              outputs);\n-    let out_filename = outputs.outputs.get(&OutputType::Exe)\n-                              .and_then(|s| s.to_owned())\n-                              .or_else(|| outputs.single_output_file.clone())\n-                              .unwrap_or(default_filename);\n \n-    // Make sure files are writeable.  Mac, FreeBSD, and Windows system linkers\n-    // check this already -- however, the Linux linker will happily overwrite a\n-    // read-only file.  We should be consistent.\n-    for file in objects.iter().chain(Some(&out_filename)) {\n-        if !is_writeable(file) {\n-            sess.fatal(&format!(\"output file {} is not writeable -- check its \\\n-                                permissions\", file.display()));\n-        }\n+    for file in &objects {\n+        check_file_is_writeable(file, sess);\n     }\n \n     let tmpdir = match TempDir::new(\"rustc\") {\n         Ok(tmpdir) => tmpdir,\n         Err(err) => sess.fatal(&format!(\"couldn't create a temp dir: {}\", err)),\n     };\n \n-    match crate_type {\n-        config::CrateTypeRlib => {\n-            link_rlib(sess, Some(trans), &objects, &out_filename,\n-                      tmpdir.path()).build();\n-        }\n-        config::CrateTypeStaticlib => {\n-            link_staticlib(sess, &objects, &out_filename, tmpdir.path());\n-        }\n-        config::CrateTypeMetadata => {\n-            emit_metadata(sess, trans, &out_filename);\n-        }\n-        _ => {\n-            link_natively(sess, crate_type, &objects, &out_filename, trans,\n-                          outputs, tmpdir.path());\n+    let mut out_filenames = vec![];\n+\n+    if outputs.outputs.contains_key(&OutputType::Metadata) {\n+        let out_filename = filename_for_metadata(sess, crate_name, outputs);\n+        emit_metadata(sess, trans, &out_filename);\n+        out_filenames.push(out_filename);\n+    }\n+\n+    if outputs.outputs.should_trans() {\n+        let out_filename = out_filename(sess, crate_type, outputs, crate_name);\n+        match crate_type {\n+            config::CrateTypeRlib => {\n+                link_rlib(sess, Some(trans), &objects, &out_filename,\n+                          tmpdir.path()).build();\n+            }\n+            config::CrateTypeStaticlib => {\n+                link_staticlib(sess, &objects, &out_filename, tmpdir.path());\n+            }\n+            _ => {\n+                link_natively(sess, crate_type, &objects, &out_filename, trans,\n+                              outputs, tmpdir.path());\n+            }\n         }\n+        out_filenames.push(out_filename);\n     }\n \n-    out_filename\n+    out_filenames\n }\n \n fn object_filenames(trans: &CrateTranslation,"}, {"sha": "0ef3f351a2a4bffdb58292beb058e482a73416cc", "filename": "src/librustc_trans/back/lto.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e571f2d778c2190ccbfc4cca79af87dbcd27a07f/src%2Flibrustc_trans%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e571f2d778c2190ccbfc4cca79af87dbcd27a07f/src%2Flibrustc_trans%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flto.rs?ref=e571f2d778c2190ccbfc4cca79af87dbcd27a07f", "patch": "@@ -34,7 +34,6 @@ pub fn crate_type_allows_lto(crate_type: config::CrateType) -> bool {\n \n         config::CrateTypeDylib     |\n         config::CrateTypeRlib      |\n-        config::CrateTypeMetadata  |\n         config::CrateTypeProcMacro => false,\n     }\n }"}, {"sha": "5f16291892387fb6b2622895a4979b37625b0618", "filename": "src/librustc_trans/back/symbol_export.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e571f2d778c2190ccbfc4cca79af87dbcd27a07f/src%2Flibrustc_trans%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e571f2d778c2190ccbfc4cca79af87dbcd27a07f/src%2Flibrustc_trans%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fsymbol_export.rs?ref=e571f2d778c2190ccbfc4cca79af87dbcd27a07f", "patch": "@@ -149,7 +149,6 @@ pub fn crate_export_threshold(crate_type: config::CrateType)\n         config::CrateTypeProcMacro  |\n         config::CrateTypeCdylib     => SymbolExportLevel::C,\n         config::CrateTypeRlib       |\n-        config::CrateTypeMetadata   |\n         config::CrateTypeDylib      => SymbolExportLevel::Rust,\n     }\n }"}, {"sha": "dac1e3b8dc1ce6a65ddf6d73a6105822cf6d3ad1", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e571f2d778c2190ccbfc4cca79af87dbcd27a07f/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e571f2d778c2190ccbfc4cca79af87dbcd27a07f/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=e571f2d778c2190ccbfc4cca79af87dbcd27a07f", "patch": "@@ -701,8 +701,8 @@ pub fn run_passes(sess: &Session,\n \n     for output_type in output_types.keys() {\n         match *output_type {\n-            OutputType::Bitcode => { modules_config.emit_bc = true; },\n-            OutputType::LlvmAssembly => { modules_config.emit_ir = true; },\n+            OutputType::Bitcode => { modules_config.emit_bc = true; }\n+            OutputType::LlvmAssembly => { modules_config.emit_ir = true; }\n             OutputType::Assembly => {\n                 modules_config.emit_asm = true;\n                 // If we're not using the LLVM assembler, this function\n@@ -711,8 +711,9 @@ pub fn run_passes(sess: &Session,\n                 if !sess.opts.output_types.contains_key(&OutputType::Assembly) {\n                     metadata_config.emit_obj = true;\n                 }\n-            },\n-            OutputType::Object => { modules_config.emit_obj = true; },\n+            }\n+            OutputType::Object => { modules_config.emit_obj = true; }\n+            OutputType::Metadata => { metadata_config.emit_obj = true; }\n             OutputType::Exe => {\n                 modules_config.emit_obj = true;\n                 metadata_config.emit_obj = true;\n@@ -853,6 +854,7 @@ pub fn run_passes(sess: &Session,\n                 user_wants_objects = true;\n                 copy_if_one_unit(OutputType::Object, true);\n             }\n+            OutputType::Metadata |\n             OutputType::Exe |\n             OutputType::DepInfo => {}\n         }"}, {"sha": "47b76658bdd1481689e5c960e8c7862004c232df", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e571f2d778c2190ccbfc4cca79af87dbcd27a07f/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e571f2d778c2190ccbfc4cca79af87dbcd27a07f/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=e571f2d778c2190ccbfc4cca79af87dbcd27a07f", "patch": "@@ -807,8 +807,7 @@ fn write_metadata(cx: &SharedCrateContext,\n             config::CrateTypeStaticlib |\n             config::CrateTypeCdylib => MetadataKind::None,\n \n-            config::CrateTypeRlib |\n-            config::CrateTypeMetadata => MetadataKind::Uncompressed,\n+            config::CrateTypeRlib => MetadataKind::Uncompressed,\n \n             config::CrateTypeDylib |\n             config::CrateTypeProcMacro => MetadataKind::Compressed,\n@@ -1191,7 +1190,7 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n     // Skip crate items and just output metadata in -Z no-trans mode.\n     if tcx.sess.opts.debugging_opts.no_trans ||\n-       tcx.sess.crate_types.borrow().iter().all(|ct| ct == &config::CrateTypeMetadata) {\n+       tcx.sess.opts.output_types.contains_key(&config::OutputType::Metadata) {\n         let linker_info = LinkerInfo::new(&shared_ccx, &ExportedSymbols::empty());\n         return CrateTranslation {\n             modules: modules,"}, {"sha": "4207fc2373b1749ad49c929fe83655c1778cf4a2", "filename": "src/test/compile-fail/auxiliary/rmeta_meta.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e571f2d778c2190ccbfc4cca79af87dbcd27a07f/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Frmeta_meta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e571f2d778c2190ccbfc4cca79af87dbcd27a07f/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Frmeta_meta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Frmeta_meta.rs?ref=e571f2d778c2190ccbfc4cca79af87dbcd27a07f", "patch": "@@ -9,8 +9,9 @@\n // except according to those terms.\n \n // no-prefer-dynamic\n+// compile-flags: --emit=metadata\n \n-#![crate_type=\"metadata\"]\n+#![crate_type=\"rlib\"]\n \n pub struct Foo {\n     pub field: i32,"}, {"sha": "dde559b018cde55ecbc1f7fdac6f8cefc68e5262", "filename": "src/test/compile-fail/rmeta-lib-pass.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e571f2d778c2190ccbfc4cca79af87dbcd27a07f/src%2Ftest%2Fcompile-fail%2Frmeta-lib-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e571f2d778c2190ccbfc4cca79af87dbcd27a07f/src%2Ftest%2Fcompile-fail%2Frmeta-lib-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frmeta-lib-pass.rs?ref=e571f2d778c2190ccbfc4cca79af87dbcd27a07f", "patch": "@@ -8,15 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// compile-flags: --emit=metadata\n // aux-build:rmeta_rlib.rs\n // no-prefer-dynamic\n // must-compile-successfully\n \n // Check that building a metadata crate works with a dependent, rlib crate.\n // This is a cfail test since there is no executable to run.\n \n-#![crate_type=\"metadata\"]\n-\n extern crate rmeta_rlib;\n use rmeta_rlib::Foo;\n "}, {"sha": "5b24da79a7e63a953d6eebadc9f997e3319a962a", "filename": "src/test/compile-fail/rmeta-pass.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e571f2d778c2190ccbfc4cca79af87dbcd27a07f/src%2Ftest%2Fcompile-fail%2Frmeta-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e571f2d778c2190ccbfc4cca79af87dbcd27a07f/src%2Ftest%2Fcompile-fail%2Frmeta-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frmeta-pass.rs?ref=e571f2d778c2190ccbfc4cca79af87dbcd27a07f", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// compile-flags: --emit=metadata\n // aux-build:rmeta_meta.rs\n // no-prefer-dynamic\n // must-compile-successfully\n@@ -16,8 +17,6 @@\n // crate.\n // This is a cfail test since there is no executable to run.\n \n-#![crate_type=\"metadata\"]\n-\n extern crate rmeta_meta;\n use rmeta_meta::Foo;\n "}, {"sha": "3e7019e0ccc0eb510f6c76e6f5ee239d3af308b9", "filename": "src/test/compile-fail/rmeta-priv-warn.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e571f2d778c2190ccbfc4cca79af87dbcd27a07f/src%2Ftest%2Fcompile-fail%2Frmeta-priv-warn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e571f2d778c2190ccbfc4cca79af87dbcd27a07f/src%2Ftest%2Fcompile-fail%2Frmeta-priv-warn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frmeta-priv-warn.rs?ref=e571f2d778c2190ccbfc4cca79af87dbcd27a07f", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: --emit=metadata\n+// no-prefer-dynamic\n+// must-compile-successfully\n+\n+#[deny(warnings)]\n+\n+// Test that we don't get warnings for non-pub main when only emitting metadata.\n+// (#38273)\n+\n+fn main() {\n+}"}, {"sha": "edcf98d99647654b66eb4d6c47f7b82e5b8d8ef3", "filename": "src/test/compile-fail/rmeta.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e571f2d778c2190ccbfc4cca79af87dbcd27a07f/src%2Ftest%2Fcompile-fail%2Frmeta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e571f2d778c2190ccbfc4cca79af87dbcd27a07f/src%2Ftest%2Fcompile-fail%2Frmeta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frmeta.rs?ref=e571f2d778c2190ccbfc4cca79af87dbcd27a07f", "patch": "@@ -9,11 +9,10 @@\n // except according to those terms.\n \n // no-prefer-dynamic\n+// compile-flags: --emit=metadata\n \n // Check that building a metadata crate finds an error.\n \n-#![crate_type=\"metadata\"]\n-\n fn main() {\n     let _ = Foo; //~ ERROR unresolved value `Foo`\n }"}, {"sha": "ffeb5bc3b858f26261364c70dc2059af9f25349f", "filename": "src/test/compile-fail/rmeta_meta_main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e571f2d778c2190ccbfc4cca79af87dbcd27a07f/src%2Ftest%2Fcompile-fail%2Frmeta_meta_main.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e571f2d778c2190ccbfc4cca79af87dbcd27a07f/src%2Ftest%2Fcompile-fail%2Frmeta_meta_main.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frmeta_meta_main.rs?ref=e571f2d778c2190ccbfc4cca79af87dbcd27a07f", "patch": "@@ -8,13 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// compile-flags: --emit=metadata\n // aux-build:rmeta_meta.rs\n // no-prefer-dynamic\n \n // Check that building a metadata crate finds an error with a dependent,\n // metadata-only crate.\n \n-#![crate_type=\"metadata\"]\n \n extern crate rmeta_meta;\n use rmeta_meta::Foo;"}, {"sha": "c3cfe89ee5c3e9cca6b80d7a3721a682bc9e301d", "filename": "src/test/run-pass/auxiliary/rmeta_rmeta.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e571f2d778c2190ccbfc4cca79af87dbcd27a07f/src%2Ftest%2Frun-pass%2Fauxiliary%2Frmeta_rmeta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e571f2d778c2190ccbfc4cca79af87dbcd27a07f/src%2Ftest%2Frun-pass%2Fauxiliary%2Frmeta_rmeta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauxiliary%2Frmeta_rmeta.rs?ref=e571f2d778c2190ccbfc4cca79af87dbcd27a07f", "patch": "@@ -9,8 +9,9 @@\n // except according to those terms.\n \n // no-prefer-dynamic\n+// compile-flags: --emit=metadata\n \n-#![crate_type=\"metadata\"]\n+#![crate_type=\"rlib\"]\n #![crate_name=\"rmeta_aux\"]\n \n pub struct Foo {"}]}