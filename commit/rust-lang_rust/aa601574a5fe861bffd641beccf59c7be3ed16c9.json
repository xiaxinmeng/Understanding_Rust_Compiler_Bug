{"sha": "aa601574a5fe861bffd641beccf59c7be3ed16c9", "node_id": "C_kwDOAAsO6NoAKGFhNjAxNTc0YTVmZTg2MWJmZmQ2NDFiZWNjZjU5YzdiZTNlZDE2Yzk", "commit": {"author": {"name": "Nixon Enraght-Moony", "email": "nixon.emoony@gmail.com", "date": "2022-02-18T21:58:49Z"}, "committer": {"name": "Nixon Enraght-Moony", "email": "nixon.emoony@gmail.com", "date": "2022-02-18T23:31:33Z"}, "message": "rustdoc-json: Better Header Type\n\n- Make ABI an enum, instead of being stringly typed\n- Replace Qualifier HashSet with 3 bools\n- Merge ABI field into header, as they always occor together", "tree": {"sha": "82bf50fbe2a858a5649a90afad4ad84e9c8c5903", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82bf50fbe2a858a5649a90afad4ad84e9c8c5903"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa601574a5fe861bffd641beccf59c7be3ed16c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa601574a5fe861bffd641beccf59c7be3ed16c9", "html_url": "https://github.com/rust-lang/rust/commit/aa601574a5fe861bffd641beccf59c7be3ed16c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa601574a5fe861bffd641beccf59c7be3ed16c9/comments", "author": {"login": "aDotInTheVoid", "id": 28781354, "node_id": "MDQ6VXNlcjI4NzgxMzU0", "avatar_url": "https://avatars.githubusercontent.com/u/28781354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aDotInTheVoid", "html_url": "https://github.com/aDotInTheVoid", "followers_url": "https://api.github.com/users/aDotInTheVoid/followers", "following_url": "https://api.github.com/users/aDotInTheVoid/following{/other_user}", "gists_url": "https://api.github.com/users/aDotInTheVoid/gists{/gist_id}", "starred_url": "https://api.github.com/users/aDotInTheVoid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aDotInTheVoid/subscriptions", "organizations_url": "https://api.github.com/users/aDotInTheVoid/orgs", "repos_url": "https://api.github.com/users/aDotInTheVoid/repos", "events_url": "https://api.github.com/users/aDotInTheVoid/events{/privacy}", "received_events_url": "https://api.github.com/users/aDotInTheVoid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aDotInTheVoid", "id": 28781354, "node_id": "MDQ6VXNlcjI4NzgxMzU0", "avatar_url": "https://avatars.githubusercontent.com/u/28781354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aDotInTheVoid", "html_url": "https://github.com/aDotInTheVoid", "followers_url": "https://api.github.com/users/aDotInTheVoid/followers", "following_url": "https://api.github.com/users/aDotInTheVoid/following{/other_user}", "gists_url": "https://api.github.com/users/aDotInTheVoid/gists{/gist_id}", "starred_url": "https://api.github.com/users/aDotInTheVoid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aDotInTheVoid/subscriptions", "organizations_url": "https://api.github.com/users/aDotInTheVoid/orgs", "repos_url": "https://api.github.com/users/aDotInTheVoid/repos", "events_url": "https://api.github.com/users/aDotInTheVoid/events{/privacy}", "received_events_url": "https://api.github.com/users/aDotInTheVoid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8c56fa8c30821129b0960180f528d4a1a4f9316", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8c56fa8c30821129b0960180f528d4a1a4f9316", "html_url": "https://github.com/rust-lang/rust/commit/b8c56fa8c30821129b0960180f528d4a1a4f9316"}], "stats": {"total": 95, "additions": 58, "deletions": 37}, "files": [{"sha": "5087bdd37e8bb73018ba9dccc633d410a37a618a", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aa601574a5fe861bffd641beccf59c7be3ed16c9/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa601574a5fe861bffd641beccf59c7be3ed16c9/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=aa601574a5fe861bffd641beccf59c7be3ed16c9", "patch": "@@ -2777,6 +2777,10 @@ impl FnHeader {\n     pub fn is_const(&self) -> bool {\n         matches!(&self.constness, Constness::Const)\n     }\n+\n+    pub fn is_unsafe(&self) -> bool {\n+        matches!(&self.unsafety, Unsafety::Unsafe)\n+    }\n }\n \n #[derive(Debug, HashStable_Generic)]"}, {"sha": "d4aedb41ddb18e8f459895d4f403b4be02080720", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 25, "deletions": 23, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/aa601574a5fe861bffd641beccf59c7be3ed16c9/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa601574a5fe861bffd641beccf59c7be3ed16c9/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=aa601574a5fe861bffd641beccf59c7be3ed16c9", "patch": "@@ -12,14 +12,14 @@ use rustc_hir::{def::CtorKind, def_id::DefId};\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_span::def_id::CRATE_DEF_INDEX;\n use rustc_span::Pos;\n+use rustc_target::spec::abi::Abi as RustcAbi;\n \n use rustdoc_json_types::*;\n \n use crate::clean::utils::print_const_expr;\n use crate::clean::{self, ItemId};\n use crate::formats::item_type::ItemType;\n use crate::json::JsonRenderer;\n-use std::collections::HashSet;\n \n impl JsonRenderer<'_> {\n     pub(super) fn convert_item(&self, item: clean::Item) -> Option<Item> {\n@@ -271,22 +271,28 @@ crate fn from_ctor_kind(struct_type: CtorKind) -> StructType {\n     }\n }\n \n-crate fn from_fn_header(header: &rustc_hir::FnHeader) -> HashSet<Qualifiers> {\n-    let mut v = HashSet::new();\n-\n-    if let rustc_hir::Unsafety::Unsafe = header.unsafety {\n-        v.insert(Qualifiers::Unsafe);\n-    }\n-\n-    if let rustc_hir::IsAsync::Async = header.asyncness {\n-        v.insert(Qualifiers::Async);\n+crate fn from_fn_header(header: &rustc_hir::FnHeader) -> Header {\n+    Header {\n+        async_: header.is_async(),\n+        const_: header.is_const(),\n+        unsafe_: header.is_unsafe(),\n+        abi: convert_abi(header.abi),\n     }\n+}\n \n-    if let rustc_hir::Constness::Const = header.constness {\n-        v.insert(Qualifiers::Const);\n+fn convert_abi(a: RustcAbi) -> Abi {\n+    match a {\n+        RustcAbi::Rust => Abi::Rust,\n+        RustcAbi::C { unwind } => Abi::C { unwind },\n+        RustcAbi::Cdecl { unwind } => Abi::Cdecl { unwind },\n+        RustcAbi::Stdcall { unwind } => Abi::Stdcall { unwind },\n+        RustcAbi::Fastcall { unwind } => Abi::Fastcall { unwind },\n+        RustcAbi::Aapcs { unwind } => Abi::Aapcs { unwind },\n+        RustcAbi::Win64 { unwind } => Abi::Win64 { unwind },\n+        RustcAbi::SysV64 { unwind } => Abi::SysV64 { unwind },\n+        RustcAbi::System { unwind } => Abi::System { unwind },\n+        _ => Abi::Other(a.to_string()),\n     }\n-\n-    v\n }\n \n impl FromWithTcx<clean::Function> for Function {\n@@ -296,7 +302,6 @@ impl FromWithTcx<clean::Function> for Function {\n             decl: decl.into_tcx(tcx),\n             generics: generics.into_tcx(tcx),\n             header: from_fn_header(&header),\n-            abi: header.abi.to_string(),\n         }\n     }\n }\n@@ -465,16 +470,14 @@ impl FromWithTcx<clean::BareFunctionDecl> for FunctionPointer {\n     fn from_tcx(bare_decl: clean::BareFunctionDecl, tcx: TyCtxt<'_>) -> Self {\n         let clean::BareFunctionDecl { unsafety, generic_params, decl, abi } = bare_decl;\n         FunctionPointer {\n-            header: if let rustc_hir::Unsafety::Unsafe = unsafety {\n-                let mut hs = HashSet::new();\n-                hs.insert(Qualifiers::Unsafe);\n-                hs\n-            } else {\n-                HashSet::new()\n+            header: Header {\n+                unsafe_: matches!(unsafety, rustc_hir::Unsafety::Unsafe),\n+                const_: false,\n+                async_: false,\n+                abi: convert_abi(abi),\n             },\n             generic_params: generic_params.into_iter().map(|x| x.into_tcx(tcx)).collect(),\n             decl: decl.into_tcx(tcx),\n-            abi: abi.to_string(),\n         }\n     }\n }\n@@ -554,7 +557,6 @@ crate fn from_function_method(\n         decl: decl.into_tcx(tcx),\n         generics: generics.into_tcx(tcx),\n         header: from_fn_header(&header),\n-        abi: header.abi.to_string(),\n         has_body,\n     }\n }"}, {"sha": "be9bbc7391d752a9d7a631a3f5e6308e853ac018", "filename": "src/rustdoc-json-types/lib.rs", "status": "modified", "additions": 29, "deletions": 14, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/aa601574a5fe861bffd641beccf59c7be3ed16c9/src%2Frustdoc-json-types%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa601574a5fe861bffd641beccf59c7be3ed16c9/src%2Frustdoc-json-types%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc-json-types%2Flib.rs?ref=aa601574a5fe861bffd641beccf59c7be3ed16c9", "patch": "@@ -3,13 +3,13 @@\n //! These types are the public API exposed through the `--output-format json` flag. The [`Crate`]\n //! struct is the root of the JSON blob and all other items are contained within.\n \n-use std::collections::{HashMap, HashSet};\n+use std::collections::HashMap;\n use std::path::PathBuf;\n \n use serde::{Deserialize, Serialize};\n \n /// rustdoc format-version.\n-pub const FORMAT_VERSION: u32 = 10;\n+pub const FORMAT_VERSION: u32 = 11;\n \n /// A `Crate` is the root of the emitted JSON blob. It contains all type/documentation information\n /// about the language items in the local crate, as well as info about external items to allow\n@@ -287,29 +287,45 @@ pub enum StructType {\n     Unit,\n }\n \n-#[non_exhaustive]\n #[derive(Clone, Debug, Serialize, Deserialize, PartialEq, Eq, Hash)]\n-#[serde(rename_all = \"snake_case\")]\n-pub enum Qualifiers {\n-    Const,\n-    Unsafe,\n-    Async,\n+pub struct Header {\n+    #[serde(rename = \"const\")]\n+    pub const_: bool,\n+    #[serde(rename = \"unsafe\")]\n+    pub unsafe_: bool,\n+    #[serde(rename = \"async\")]\n+    pub async_: bool,\n+    pub abi: Abi,\n+}\n+\n+#[derive(Clone, Debug, Serialize, Deserialize, PartialEq, Eq, Hash)]\n+pub enum Abi {\n+    // We only have a concrete listing here for stable ABI's because their are so many\n+    // See rustc_ast_passes::feature_gate::PostExpansionVisitor::check_abi for the list\n+    Rust,\n+    C { unwind: bool },\n+    Cdecl { unwind: bool },\n+    Stdcall { unwind: bool },\n+    Fastcall { unwind: bool },\n+    Aapcs { unwind: bool },\n+    Win64 { unwind: bool },\n+    SysV64 { unwind: bool },\n+    System { unwind: bool },\n+    Other(String),\n }\n \n #[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n pub struct Function {\n     pub decl: FnDecl,\n     pub generics: Generics,\n-    pub header: HashSet<Qualifiers>,\n-    pub abi: String,\n+    pub header: Header,\n }\n \n #[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n pub struct Method {\n     pub decl: FnDecl,\n     pub generics: Generics,\n-    pub header: HashSet<Qualifiers>,\n-    pub abi: String,\n+    pub header: Header,\n     pub has_body: bool,\n }\n \n@@ -426,8 +442,7 @@ pub enum Type {\n pub struct FunctionPointer {\n     pub decl: FnDecl,\n     pub generic_params: Vec<GenericParamDef>,\n-    pub header: HashSet<Qualifiers>,\n-    pub abi: String,\n+    pub header: Header,\n }\n \n #[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]"}]}