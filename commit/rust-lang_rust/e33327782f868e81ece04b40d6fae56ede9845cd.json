{"sha": "e33327782f868e81ece04b40d6fae56ede9845cd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzMzMyNzc4MmY4NjhlODFlY2UwNGI0MGQ2ZmFlNTZlZGU5ODQ1Y2Q=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-04-14T22:07:31Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-04-28T09:49:55Z"}, "message": "Move a few queries to using an arena.", "tree": {"sha": "2c7ce82333afaf651c746dba2fe7466f9993ec28", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c7ce82333afaf651c746dba2fe7466f9993ec28"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e33327782f868e81ece04b40d6fae56ede9845cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e33327782f868e81ece04b40d6fae56ede9845cd", "html_url": "https://github.com/rust-lang/rust/commit/e33327782f868e81ece04b40d6fae56ede9845cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e33327782f868e81ece04b40d6fae56ede9845cd/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b789834ddfd96bfa7c28524d8d43535cb0fd7dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b789834ddfd96bfa7c28524d8d43535cb0fd7dc", "html_url": "https://github.com/rust-lang/rust/commit/0b789834ddfd96bfa7c28524d8d43535cb0fd7dc"}], "stats": {"total": 30, "additions": 17, "deletions": 13}, "files": [{"sha": "0eae17b5f5645ee3717afeb315ce5c0ac2a0467e", "filename": "src/librustc_codegen_llvm/attributes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e33327782f868e81ece04b40d6fae56ede9845cd/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e33327782f868e81ece04b40d6fae56ede9845cd/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fattributes.rs?ref=e33327782f868e81ece04b40d6fae56ede9845cd", "patch": "@@ -252,7 +252,7 @@ pub fn from_fn_attrs(cx: &CodegenCx<'ll, 'tcx>, llfn: &'ll Value, instance: ty::\n         inline(cx, llfn, attributes::InlineAttr::Hint);\n     }\n \n-    inline(cx, llfn, codegen_fn_attrs.inline);\n+    inline(cx, llfn, codegen_fn_attrs.inline.clone());\n \n     // The `uwtable` attribute according to LLVM is:\n     //"}, {"sha": "e57c51b9eefbed3ac48c3dbf78e6576d46d96b65", "filename": "src/librustc_middle/query/mod.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e33327782f868e81ece04b40d6fae56ede9845cd/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e33327782f868e81ece04b40d6fae56ede9845cd/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fquery%2Fmod.rs?ref=e33327782f868e81ece04b40d6fae56ede9845cd", "patch": "@@ -367,10 +367,12 @@ rustc_queries! {\n         query associated_item_def_ids(_: DefId) -> &'tcx [DefId] {}\n \n         /// Maps from a trait item to the trait item \"descriptor\".\n-        query associated_item(_: DefId) -> ty::AssocItem {}\n+        query associated_item(_: DefId) -> ty::AssocItem {\n+            storage(ArenaCacheSelector<'tcx>)\n+        }\n \n         /// Collects the associated items defined on a trait or impl.\n-        query associated_items(key: DefId) -> ty::AssociatedItems {\n+        query associated_items(key: DefId) -> ty::AssociatedItems<'tcx> {\n             storage(ArenaCacheSelector<'tcx>)\n             desc { |tcx| \"collecting associated items of {}\", tcx.def_path_str(key) }\n         }\n@@ -395,6 +397,7 @@ rustc_queries! {\n         query unsafety_check_result(key: LocalDefId) -> mir::UnsafetyCheckResult {\n             desc { |tcx| \"unsafety-checking `{}`\", tcx.def_path_str(key.to_def_id()) }\n             cache_on_disk_if { true }\n+            storage(ArenaCacheSelector<'tcx>)\n         }\n \n         /// HACK: when evaluated, this reports a \"unsafe derive on repr(packed)\" error\n@@ -644,6 +647,7 @@ rustc_queries! {\n \n     Codegen {\n         query codegen_fn_attrs(_: DefId) -> CodegenFnAttrs {\n+            storage(ArenaCacheSelector<'tcx>)\n             cache_on_disk_if { true }\n         }\n     }"}, {"sha": "5dee8cf7bdfca91be2d22fc6e971522d3774f7a1", "filename": "src/librustc_middle/ty/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e33327782f868e81ece04b40d6fae56ede9845cd/src%2Flibrustc_middle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e33327782f868e81ece04b40d6fae56ede9845cd/src%2Flibrustc_middle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fmod.rs?ref=e33327782f868e81ece04b40d6fae56ede9845cd", "patch": "@@ -257,13 +257,13 @@ impl AssocItem {\n /// it is relatively expensive. Instead, items are indexed by `Symbol` and hygienic comparison is\n /// done only on items with the same name.\n #[derive(Debug, Clone, PartialEq, HashStable)]\n-pub struct AssociatedItems {\n-    items: SortedIndexMultiMap<u32, Symbol, ty::AssocItem>,\n+pub struct AssociatedItems<'tcx> {\n+    items: SortedIndexMultiMap<u32, Symbol, &'tcx ty::AssocItem>,\n }\n \n-impl AssociatedItems {\n+impl<'tcx> AssociatedItems<'tcx> {\n     /// Constructs an `AssociatedItems` map from a series of `ty::AssocItem`s in definition order.\n-    pub fn new(items_in_def_order: impl IntoIterator<Item = ty::AssocItem>) -> Self {\n+    pub fn new(items_in_def_order: impl IntoIterator<Item = &'tcx ty::AssocItem>) -> Self {\n         let items = items_in_def_order.into_iter().map(|item| (item.ident.name, item)).collect();\n         AssociatedItems { items }\n     }\n@@ -273,15 +273,15 @@ impl AssociatedItems {\n     /// New code should avoid relying on definition order. If you need a particular associated item\n     /// for a known trait, make that trait a lang item instead of indexing this array.\n     pub fn in_definition_order(&self) -> impl '_ + Iterator<Item = &ty::AssocItem> {\n-        self.items.iter().map(|(_, v)| v)\n+        self.items.iter().map(|(_, v)| *v)\n     }\n \n     /// Returns an iterator over all associated items with the given name, ignoring hygiene.\n     pub fn filter_by_name_unhygienic(\n         &self,\n         name: Symbol,\n     ) -> impl '_ + Iterator<Item = &ty::AssocItem> {\n-        self.items.get_by_key(&name)\n+        self.items.get_by_key(&name).map(|v| *v)\n     }\n \n     /// Returns an iterator over all associated items with the given name.\n@@ -2672,7 +2672,7 @@ impl<'tcx> TyCtxt<'tcx> {\n             .and_then(|def_id| self.hir().get(self.hir().as_local_hir_id(def_id)).ident())\n     }\n \n-    pub fn opt_associated_item(self, def_id: DefId) -> Option<AssocItem> {\n+    pub fn opt_associated_item(self, def_id: DefId) -> Option<&'tcx AssocItem> {\n         let is_associated_item = if let Some(def_id) = def_id.as_local() {\n             match self.hir().get(self.hir().as_local_hir_id(def_id)) {\n                 Node::TraitItem(_) | Node::ImplItem(_) => true,"}, {"sha": "69bfad6b139991ab00bb9d521bfbd80478f37224", "filename": "src/librustc_mir_build/lints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e33327782f868e81ece04b40d6fae56ede9845cd/src%2Flibrustc_mir_build%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e33327782f868e81ece04b40d6fae56ede9845cd/src%2Flibrustc_mir_build%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Flints.rs?ref=e33327782f868e81ece04b40d6fae56ede9845cd", "patch": "@@ -24,7 +24,7 @@ crate fn check<'tcx>(tcx: TyCtxt<'tcx>, body: &Body<'tcx>, def_id: LocalDefId) {\n             Some(AssocItem {\n                 container: AssocItemContainer::TraitContainer(trait_def_id), ..\n             }) => {\n-                let trait_substs_count = tcx.generics_of(trait_def_id).count();\n+                let trait_substs_count = tcx.generics_of(*trait_def_id).count();\n                 &InternalSubsts::identity_for_item(tcx, def_id.to_def_id())[..trait_substs_count]\n             }\n             _ => &[],"}, {"sha": "1a86babbc46cf723c808282e175d41dd71fc53a8", "filename": "src/librustc_passes/reachable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e33327782f868e81ece04b40d6fae56ede9845cd/src%2Flibrustc_passes%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e33327782f868e81ece04b40d6fae56ede9845cd/src%2Flibrustc_passes%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Freachable.rs?ref=e33327782f868e81ece04b40d6fae56ede9845cd", "patch": "@@ -23,7 +23,7 @@ use rustc_target::spec::abi::Abi;\n // Returns true if the given item must be inlined because it may be\n // monomorphized or it was marked with `#[inline]`. This will only return\n // true for functions.\n-fn item_might_be_inlined(tcx: TyCtxt<'tcx>, item: &hir::Item<'_>, attrs: CodegenFnAttrs) -> bool {\n+fn item_might_be_inlined(tcx: TyCtxt<'tcx>, item: &hir::Item<'_>, attrs: &CodegenFnAttrs) -> bool {\n     if attrs.requests_inline() {\n         return true;\n     }"}, {"sha": "b65f1cd6fac4e4327a13ba002dd98db4b794ee4b", "filename": "src/librustc_ty/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e33327782f868e81ece04b40d6fae56ede9845cd/src%2Flibrustc_ty%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e33327782f868e81ece04b40d6fae56ede9845cd/src%2Flibrustc_ty%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ty%2Fty.rs?ref=e33327782f868e81ece04b40d6fae56ede9845cd", "patch": "@@ -220,7 +220,7 @@ fn associated_item_def_ids(tcx: TyCtxt<'_>, def_id: DefId) -> &[DefId] {\n     }\n }\n \n-fn associated_items(tcx: TyCtxt<'_>, def_id: DefId) -> ty::AssociatedItems {\n+fn associated_items(tcx: TyCtxt<'_>, def_id: DefId) -> ty::AssociatedItems<'_> {\n     let items = tcx.associated_item_def_ids(def_id).iter().map(|did| tcx.associated_item(*did));\n     ty::AssociatedItems::new(items)\n }"}]}