{"sha": "c86f4109fdd83fef1ea69c0f3c878ace0aa7c56f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4NmY0MTA5ZmRkODNmZWYxZWE2OWMwZjNjODc4YWNlMGFhN2M1NmY=", "commit": {"author": {"name": "JarredAllen", "email": "jarredallen73@gmail.com", "date": "2020-07-23T16:15:16Z"}, "committer": {"name": "JarredAllen", "email": "jarredallen73@gmail.com", "date": "2020-08-03T04:34:17Z"}, "message": "Split indirect collects into their own test case", "tree": {"sha": "5f60bf2e340815a641a5be716c7fd67699c3ed0a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f60bf2e340815a641a5be716c7fd67699c3ed0a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c86f4109fdd83fef1ea69c0f3c878ace0aa7c56f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c86f4109fdd83fef1ea69c0f3c878ace0aa7c56f", "html_url": "https://github.com/rust-lang/rust/commit/c86f4109fdd83fef1ea69c0f3c878ace0aa7c56f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c86f4109fdd83fef1ea69c0f3c878ace0aa7c56f/comments", "author": {"login": "JarredAllen", "id": 19656507, "node_id": "MDQ6VXNlcjE5NjU2NTA3", "avatar_url": "https://avatars.githubusercontent.com/u/19656507?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JarredAllen", "html_url": "https://github.com/JarredAllen", "followers_url": "https://api.github.com/users/JarredAllen/followers", "following_url": "https://api.github.com/users/JarredAllen/following{/other_user}", "gists_url": "https://api.github.com/users/JarredAllen/gists{/gist_id}", "starred_url": "https://api.github.com/users/JarredAllen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JarredAllen/subscriptions", "organizations_url": "https://api.github.com/users/JarredAllen/orgs", "repos_url": "https://api.github.com/users/JarredAllen/repos", "events_url": "https://api.github.com/users/JarredAllen/events{/privacy}", "received_events_url": "https://api.github.com/users/JarredAllen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JarredAllen", "id": 19656507, "node_id": "MDQ6VXNlcjE5NjU2NTA3", "avatar_url": "https://avatars.githubusercontent.com/u/19656507?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JarredAllen", "html_url": "https://github.com/JarredAllen", "followers_url": "https://api.github.com/users/JarredAllen/followers", "following_url": "https://api.github.com/users/JarredAllen/following{/other_user}", "gists_url": "https://api.github.com/users/JarredAllen/gists{/gist_id}", "starred_url": "https://api.github.com/users/JarredAllen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JarredAllen/subscriptions", "organizations_url": "https://api.github.com/users/JarredAllen/orgs", "repos_url": "https://api.github.com/users/JarredAllen/repos", "events_url": "https://api.github.com/users/JarredAllen/events{/privacy}", "received_events_url": "https://api.github.com/users/JarredAllen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3657c92ac978f69667b9c8bb46e51bc602b3d7ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/3657c92ac978f69667b9c8bb46e51bc602b3d7ee", "html_url": "https://github.com/rust-lang/rust/commit/3657c92ac978f69667b9c8bb46e51bc602b3d7ee"}], "stats": {"total": 146, "additions": 110, "deletions": 36}, "files": [{"sha": "be37dc16b9a3effcc6aec5b4fd92f1de7a2412c5", "filename": "tests/ui/needless_collect.fixed", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c86f4109fdd83fef1ea69c0f3c878ace0aa7c56f/tests%2Fui%2Fneedless_collect.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/c86f4109fdd83fef1ea69c0f3c878ace0aa7c56f/tests%2Fui%2Fneedless_collect.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_collect.fixed?ref=c86f4109fdd83fef1ea69c0f3c878ace0aa7c56f", "patch": "@@ -18,15 +18,4 @@ fn main() {\n     sample.iter().collect::<HashSet<_>>().len();\n     // Neither should this\n     sample.iter().collect::<BTreeSet<_>>().len();\n-    let indirect_positive = sample.iter().collect::<Vec<_>>();\n-    indirect_positive\n-        .into_iter()\n-        .map(|x| (x, x + 1))\n-        .collect::<HashMap<_, _>>();\n-    let indirect_negative = sample.iter().collect::<Vec<_>>();\n-    indirect_negative.len();\n-    indirect_negative\n-        .iter()\n-        .map(|x| (*x, *x + 1))\n-        .collect::<HashMap<_, _>>();\n }"}, {"sha": "7ee603afeb0778e74bc67e24d25919660c89ee87", "filename": "tests/ui/needless_collect.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c86f4109fdd83fef1ea69c0f3c878ace0aa7c56f/tests%2Fui%2Fneedless_collect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c86f4109fdd83fef1ea69c0f3c878ace0aa7c56f/tests%2Fui%2Fneedless_collect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_collect.rs?ref=c86f4109fdd83fef1ea69c0f3c878ace0aa7c56f", "patch": "@@ -18,15 +18,4 @@ fn main() {\n     sample.iter().collect::<HashSet<_>>().len();\n     // Neither should this\n     sample.iter().collect::<BTreeSet<_>>().len();\n-    let indirect_positive = sample.iter().collect::<Vec<_>>();\n-    indirect_positive\n-        .into_iter()\n-        .map(|x| (x, x + 1))\n-        .collect::<HashMap<_, _>>();\n-    let indirect_negative = sample.iter().collect::<Vec<_>>();\n-    indirect_negative.len();\n-    indirect_negative\n-        .iter()\n-        .map(|x| (*x, *x + 1))\n-        .collect::<HashMap<_, _>>();\n }"}, {"sha": "9113aad90dd7cc120e89748f5df590f74878f174", "filename": "tests/ui/needless_collect.stderr", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c86f4109fdd83fef1ea69c0f3c878ace0aa7c56f/tests%2Fui%2Fneedless_collect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c86f4109fdd83fef1ea69c0f3c878ace0aa7c56f/tests%2Fui%2Fneedless_collect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_collect.stderr?ref=c86f4109fdd83fef1ea69c0f3c878ace0aa7c56f", "patch": "@@ -1,21 +1,10 @@\n-error: avoid using `collect()` when not needed\n-  --> $DIR/needless_collect.rs:21:5\n-   |\n-LL |     let indirect_positive = sample.iter().collect::<Vec<_>>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `-D clippy::needless-collect` implied by `-D warnings`\n-help: Use the original Iterator instead of collecting it and then producing a new one\n-   |\n-LL |     \n-LL |     sample.iter()\n-   |\n-\n error: avoid using `collect()` when not needed\n   --> $DIR/needless_collect.rs:11:29\n    |\n LL |     let len = sample.iter().collect::<Vec<_>>().len();\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `count()`\n+   |\n+   = note: `-D clippy::needless-collect` implied by `-D warnings`\n \n error: avoid using `collect()` when not needed\n   --> $DIR/needless_collect.rs:12:15\n@@ -35,5 +24,5 @@ error: avoid using `collect()` when not needed\n LL |     sample.iter().map(|x| (x, x)).collect::<HashMap<_, _>>().len();\n    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `count()`\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 4 previous errors\n "}, {"sha": "136af42a9fefb82a7b1372351dde67d7150d3826", "filename": "tests/ui/needless_collect_indirect.fixed", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c86f4109fdd83fef1ea69c0f3c878ace0aa7c56f/tests%2Fui%2Fneedless_collect_indirect.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/c86f4109fdd83fef1ea69c0f3c878ace0aa7c56f/tests%2Fui%2Fneedless_collect_indirect.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_collect_indirect.fixed?ref=c86f4109fdd83fef1ea69c0f3c878ace0aa7c56f", "patch": "@@ -0,0 +1,26 @@\n+// run-rustfix\n+\n+#[allow(unused)]\n+\n+use std::collections::{HashMap, VecDeque};\n+\n+fn main() {\n+    let sample = [1; 5];\n+    let indirect_iter = sample.iter().collect::<Vec<_>>();\n+    indirect_iter\n+        .into_iter()\n+        .map(|x| (x, x + 1))\n+        .collect::<HashMap<_, _>>();\n+    let indirect_len = sample.iter().collect::<VecDeque<_>>();\n+    indirect_len.len();\n+    let indirect_empty = sample.iter().collect::<VecDeque<_>>();\n+    indirect_empty.is_empty();\n+    let indirect_contains = sample.iter().collect::<VecDeque<_>>();\n+    indirect_contains.contains(&&5);\n+    let indirect_negative = sample.iter().collect::<Vec<_>>();\n+    indirect_negative.len();\n+    indirect_negative\n+        .into_iter()\n+        .map(|x| (*x, *x + 1))\n+        .collect::<HashMap<_, _>>();\n+}"}, {"sha": "136af42a9fefb82a7b1372351dde67d7150d3826", "filename": "tests/ui/needless_collect_indirect.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c86f4109fdd83fef1ea69c0f3c878ace0aa7c56f/tests%2Fui%2Fneedless_collect_indirect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c86f4109fdd83fef1ea69c0f3c878ace0aa7c56f/tests%2Fui%2Fneedless_collect_indirect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_collect_indirect.rs?ref=c86f4109fdd83fef1ea69c0f3c878ace0aa7c56f", "patch": "@@ -0,0 +1,26 @@\n+// run-rustfix\n+\n+#[allow(unused)]\n+\n+use std::collections::{HashMap, VecDeque};\n+\n+fn main() {\n+    let sample = [1; 5];\n+    let indirect_iter = sample.iter().collect::<Vec<_>>();\n+    indirect_iter\n+        .into_iter()\n+        .map(|x| (x, x + 1))\n+        .collect::<HashMap<_, _>>();\n+    let indirect_len = sample.iter().collect::<VecDeque<_>>();\n+    indirect_len.len();\n+    let indirect_empty = sample.iter().collect::<VecDeque<_>>();\n+    indirect_empty.is_empty();\n+    let indirect_contains = sample.iter().collect::<VecDeque<_>>();\n+    indirect_contains.contains(&&5);\n+    let indirect_negative = sample.iter().collect::<Vec<_>>();\n+    indirect_negative.len();\n+    indirect_negative\n+        .into_iter()\n+        .map(|x| (*x, *x + 1))\n+        .collect::<HashMap<_, _>>();\n+}"}, {"sha": "5058c171ac23f786e58ed26e63207b6fbb1c029a", "filename": "tests/ui/needless_collect_indirect.stderr", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/c86f4109fdd83fef1ea69c0f3c878ace0aa7c56f/tests%2Fui%2Fneedless_collect_indirect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c86f4109fdd83fef1ea69c0f3c878ace0aa7c56f/tests%2Fui%2Fneedless_collect_indirect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_collect_indirect.stderr?ref=c86f4109fdd83fef1ea69c0f3c878ace0aa7c56f", "patch": "@@ -0,0 +1,55 @@\n+error: avoid using `collect()` when not needed\n+  --> $DIR/needless_collect_indirect.rs:9:5\n+   |\n+LL | /     let indirect_iter = sample.iter().collect::<Vec<_>>();\n+LL | |     indirect_iter\n+   | |____^\n+   |\n+   = note: `-D clippy::needless-collect` implied by `-D warnings`\n+help: Use the original Iterator instead of collecting it and then producing a new one\n+   |\n+LL |     \n+LL |     sample.iter()\n+   |\n+\n+error: avoid using `collect()` when not needed\n+  --> $DIR/needless_collect_indirect.rs:14:5\n+   |\n+LL | /     let indirect_len = sample.iter().collect::<VecDeque<_>>();\n+LL | |     indirect_len.len();\n+   | |____^\n+   |\n+help: Take the original Iterator's count instead of collecting it and finding the length\n+   |\n+LL |     \n+LL |     sample.iter().count();\n+   |\n+\n+error: avoid using `collect()` when not needed\n+  --> $DIR/needless_collect_indirect.rs:16:5\n+   |\n+LL | /     let indirect_empty = sample.iter().collect::<VecDeque<_>>();\n+LL | |     indirect_empty.is_empty();\n+   | |____^\n+   |\n+help: Check if the original Iterator has anything instead of collecting it and seeing if it's empty\n+   |\n+LL |     \n+LL |     sample.iter().next().is_none();\n+   |\n+\n+error: avoid using `collect()` when not needed\n+  --> $DIR/needless_collect_indirect.rs:18:5\n+   |\n+LL | /     let indirect_contains = sample.iter().collect::<VecDeque<_>>();\n+LL | |     indirect_contains.contains(&&5);\n+   | |____^\n+   |\n+help: Check if the original Iterator contains an element instead of collecting then checking\n+   |\n+LL |     \n+LL |     sample.iter().any(|x| x == &&5);\n+   |\n+\n+error: aborting due to 4 previous errors\n+"}]}