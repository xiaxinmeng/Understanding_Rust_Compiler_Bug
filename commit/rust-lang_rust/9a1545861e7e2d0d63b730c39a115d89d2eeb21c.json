{"sha": "9a1545861e7e2d0d63b730c39a115d89d2eeb21c", "node_id": "C_kwDOAAsO6NoAKDlhMTU0NTg2MWU3ZTJkMGQ2M2I3MzBjMzlhMTE1ZDg5ZDJlZWIyMWM", "commit": {"author": {"name": "SLASHLogin", "email": "loginmlgxd@gmail.com", "date": "2022-10-30T18:26:12Z"}, "committer": {"name": "SLASHLogin", "email": "loginmlgxd@gmail.com", "date": "2022-11-09T13:56:21Z"}, "message": "Simplify existing Diagnostic implementations", "tree": {"sha": "b891b24d68513c9e1817ecce6b9905cc0f7bb1f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b891b24d68513c9e1817ecce6b9905cc0f7bb1f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a1545861e7e2d0d63b730c39a115d89d2eeb21c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a1545861e7e2d0d63b730c39a115d89d2eeb21c", "html_url": "https://github.com/rust-lang/rust/commit/9a1545861e7e2d0d63b730c39a115d89d2eeb21c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a1545861e7e2d0d63b730c39a115d89d2eeb21c/comments", "author": {"login": "SLASHLogin", "id": 24846525, "node_id": "MDQ6VXNlcjI0ODQ2NTI1", "avatar_url": "https://avatars.githubusercontent.com/u/24846525?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SLASHLogin", "html_url": "https://github.com/SLASHLogin", "followers_url": "https://api.github.com/users/SLASHLogin/followers", "following_url": "https://api.github.com/users/SLASHLogin/following{/other_user}", "gists_url": "https://api.github.com/users/SLASHLogin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SLASHLogin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SLASHLogin/subscriptions", "organizations_url": "https://api.github.com/users/SLASHLogin/orgs", "repos_url": "https://api.github.com/users/SLASHLogin/repos", "events_url": "https://api.github.com/users/SLASHLogin/events{/privacy}", "received_events_url": "https://api.github.com/users/SLASHLogin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SLASHLogin", "id": 24846525, "node_id": "MDQ6VXNlcjI0ODQ2NTI1", "avatar_url": "https://avatars.githubusercontent.com/u/24846525?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SLASHLogin", "html_url": "https://github.com/SLASHLogin", "followers_url": "https://api.github.com/users/SLASHLogin/followers", "following_url": "https://api.github.com/users/SLASHLogin/following{/other_user}", "gists_url": "https://api.github.com/users/SLASHLogin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SLASHLogin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SLASHLogin/subscriptions", "organizations_url": "https://api.github.com/users/SLASHLogin/orgs", "repos_url": "https://api.github.com/users/SLASHLogin/repos", "events_url": "https://api.github.com/users/SLASHLogin/events{/privacy}", "received_events_url": "https://api.github.com/users/SLASHLogin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3728e95596fa937eac9188af0ffe177e94635a5b", "url": "https://api.github.com/repos/rust-lang/rust/commits/3728e95596fa937eac9188af0ffe177e94635a5b", "html_url": "https://github.com/rust-lang/rust/commit/3728e95596fa937eac9188af0ffe177e94635a5b"}], "stats": {"total": 107, "additions": 55, "deletions": 52}, "files": [{"sha": "a8b47633519aabc39689ab19a7138c269b11440c", "filename": "compiler/rustc_codegen_llvm/src/attributes.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9a1545861e7e2d0d63b730c39a115d89d2eeb21c/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a1545861e7e2d0d63b730c39a115d89d2eeb21c/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs?ref=9a1545861e7e2d0d63b730c39a115d89d2eeb21c", "patch": "@@ -396,8 +396,11 @@ pub fn from_fn_attrs<'ll, 'tcx>(\n             .map_or_else(|| cx.tcx.def_span(instance.def_id()), |a| a.span);\n         cx.tcx\n             .sess\n-            .create_err(TargetFeatureDisableOrEnable { features: f, span: Some(span) })\n-            .subdiagnostic(MissingFeatures)\n+            .create_err(TargetFeatureDisableOrEnable {\n+                features: f,\n+                span: Some(span),\n+                missing_features: Some(MissingFeatures),\n+            })\n             .emit();\n         return;\n     }"}, {"sha": "44896a8e8febfd8e4e8441520c430a9e79012b34", "filename": "compiler/rustc_codegen_llvm/src/errors.rs", "status": "modified", "additions": 28, "deletions": 33, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/9a1545861e7e2d0d63b730c39a115d89d2eeb21c/compiler%2Frustc_codegen_llvm%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a1545861e7e2d0d63b730c39a115d89d2eeb21c/compiler%2Frustc_codegen_llvm%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Ferrors.rs?ref=9a1545861e7e2d0d63b730c39a115d89d2eeb21c", "patch": "@@ -8,34 +8,28 @@ use rustc_errors::IntoDiagnostic;\n use rustc_macros::{Diagnostic, Subdiagnostic};\n use rustc_span::Span;\n \n-pub(crate) enum UnknownCTargetFeature<'a> {\n-    UnknownFeaturePrefix { feature: &'a str },\n-    UnknownFeature { feature: &'a str, rust_feature: Option<&'a str> },\n-}\n-\n-impl IntoDiagnostic<'_, ()> for UnknownCTargetFeature<'_> {\n-    fn into_diagnostic(self, sess: &'_ Handler) -> DiagnosticBuilder<'_, ()> {\n-        match self {\n-            UnknownCTargetFeature::UnknownFeaturePrefix { feature } => {\n-                let mut diag = sess.struct_warn(fluent::codegen_llvm_unknown_ctarget_feature);\n-                diag.set_arg(\"feature\", feature);\n-                diag.note(fluent::codegen_llvm_unknown_feature_prefix);\n-                diag\n-            }\n-            UnknownCTargetFeature::UnknownFeature { feature, rust_feature } => {\n-                let mut diag = sess.struct_warn(fluent::codegen_llvm_unknown_ctarget_feature);\n-                diag.set_arg(\"feature\", feature);\n-                diag.note(fluent::codegen_llvm_unknown_feature);\n-                if let Some(rust_feature) = rust_feature {\n-                    diag.help(fluent::codegen_llvm_rust_feature);\n-                    diag.set_arg(\"rust_feature\", rust_feature);\n-                } else {\n-                    diag.note(fluent::codegen_llvm_unknown_feature_fill_request);\n-                }\n-                diag\n-            }\n-        }\n-    }\n+#[derive(Diagnostic)]\n+#[diag(codegen_llvm_unknown_ctarget_feature_prefix)]\n+#[note]\n+pub(crate) struct UnknownCTargetFeaturePrefix<'a> {\n+    pub feature: &'a str,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(codegen_llvm_unknown_ctarget_feature)]\n+#[note]\n+pub(crate) struct UnknownCTargetFeature<'a> {\n+    pub feature: &'a str,\n+    #[subdiagnostic]\n+    pub rust_feature: PossibleFeature<'a>,\n+}\n+\n+#[derive(Subdiagnostic)]\n+pub(crate) enum PossibleFeature<'a> {\n+    #[help(possible_feature)]\n+    Some { rust_feature: &'a str },\n+    #[help(consider_filing_feature_request)]\n+    None,\n }\n \n #[derive(Diagnostic)]\n@@ -131,6 +125,7 @@ pub(crate) struct FailParsingTargetMachineConfigToTargetMachine {\n pub(crate) struct TargetFeatureDisableOrEnable<'a> {\n     pub features: &'a [&'a str],\n     pub span: Option<Span>,\n+    pub missing_features: Option<MissingFeatures>,\n }\n \n #[derive(Subdiagnostic)]\n@@ -139,13 +134,13 @@ pub(crate) struct MissingFeatures;\n \n impl IntoDiagnostic<'_, ErrorGuaranteed> for TargetFeatureDisableOrEnable<'_> {\n     fn into_diagnostic(self, sess: &'_ Handler) -> DiagnosticBuilder<'_, ErrorGuaranteed> {\n-        let mut diag = if let Some(span) = self.span {\n-            let mut diag = sess.struct_err(fluent::codegen_llvm_target_feature_disable_or_enable);\n+        let mut diag = sess.struct_err(fluent::codegen_llvm_target_feature_disable_or_enable);\n+        if let Some(span) = self.span {\n             diag.set_span(span);\n-            diag\n-        } else {\n-            sess.struct_err(fluent::codegen_llvm_target_feature_disable_or_enable)\n         };\n+        if let Some(missing_features) = self.missing_features {\n+            diag.subdiagnostic(missing_features);\n+        }\n         diag.set_arg(\"features\", self.features.join(\", \"));\n         diag\n     }"}, {"sha": "e1f54356228d3ea60163ec928322caf5d82fbc88", "filename": "compiler/rustc_codegen_llvm/src/llvm_util.rs", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9a1545861e7e2d0d63b730c39a115d89d2eeb21c/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a1545861e7e2d0d63b730c39a115d89d2eeb21c/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs?ref=9a1545861e7e2d0d63b730c39a115d89d2eeb21c", "patch": "@@ -1,5 +1,8 @@\n use crate::back::write::create_informational_target_machine;\n-use crate::errors::{TargetFeatureDisableOrEnable, UnknownCTargetFeature};\n+use crate::errors::{\n+    PossibleFeature, TargetFeatureDisableOrEnable, UnknownCTargetFeature,\n+    UnknownCTargetFeaturePrefix,\n+};\n use crate::llvm;\n use libc::c_int;\n use rustc_codegen_ssa::target_features::{\n@@ -435,9 +438,7 @@ pub(crate) fn global_llvm_features(sess: &Session, diagnostics: bool) -> Vec<Str\n                 Some(c @ '+' | c @ '-') => c,\n                 Some(_) => {\n                     if diagnostics {\n-                        sess.emit_warning(UnknownCTargetFeature::UnknownFeaturePrefix {\n-                            feature: s,\n-                        });\n+                        sess.emit_warning(UnknownCTargetFeaturePrefix { feature: s });\n                     }\n                     return None;\n                 }\n@@ -454,7 +455,15 @@ pub(crate) fn global_llvm_features(sess: &Session, diagnostics: bool) -> Vec<Str\n                         None\n                     }\n                 });\n-                sess.emit_warning(UnknownCTargetFeature::UnknownFeature { feature, rust_feature });\n+                let unknown_feature = if let Some(rust_feature) = rust_feature {\n+                    UnknownCTargetFeature {\n+                        feature,\n+                        rust_feature: PossibleFeature::Some { rust_feature },\n+                    }\n+                } else {\n+                    UnknownCTargetFeature { feature, rust_feature: PossibleFeature::None }\n+                };\n+                sess.emit_warning(unknown_feature);\n             }\n \n             if diagnostics {\n@@ -482,7 +491,8 @@ pub(crate) fn global_llvm_features(sess: &Session, diagnostics: bool) -> Vec<Str\n     if diagnostics && let Some(f) = check_tied_features(sess, &featsmap) {\n         sess.emit_err(TargetFeatureDisableOrEnable {\n             features: f,\n-            span: None\n+            span: None,\n+            missing_features: None,\n         });\n     }\n "}, {"sha": "a105b4a64e99e04d35d072ebe5d7c352a70ba9f2", "filename": "compiler/rustc_error_messages/locales/en-US/codegen_llvm.ftl", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9a1545861e7e2d0d63b730c39a115d89d2eeb21c/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fcodegen_llvm.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/9a1545861e7e2d0d63b730c39a115d89d2eeb21c/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fcodegen_llvm.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fcodegen_llvm.ftl?ref=9a1545861e7e2d0d63b730c39a115d89d2eeb21c", "patch": "@@ -1,17 +1,12 @@\n codegen_llvm_unknown_ctarget_feature =\n     unknown feature specified for `-Ctarget-feature`: `{$feature}`\n+    .note = it is still passed through to the codegen backend\n+    .possible_feature = you might have meant: `{$rust_feature}`\n+    .consider_filing_feature_request = consider filing a feature request\n \n-codegen_llvm_unknown_feature_prefix =\n-    features must begin with a `+` to enable or `-` to disable it\n-\n-codegen_llvm_unknown_feature =\n-    it is still passed through to the codegen backend\n-\n-codegen_llvm_rust_feature =\n-    you might have meant: `{$rust_feature}`\n-\n-codegen_llvm_unknown_feature_fill_request =\n-    consider filing a feature request\n+codegen_llvm_unknown_ctarget_feature_prefix =\n+    unknown feature specified for `-Ctarget-feature`: `{$feature}`\n+    .note = features must begin with a `+` to enable or `-` to disable it\n \n codegen_llvm_error_creating_import_library =\n     Error creating import library for {$lib_name}: {$error}"}]}