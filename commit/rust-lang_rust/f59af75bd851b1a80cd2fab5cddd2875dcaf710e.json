{"sha": "f59af75bd851b1a80cd2fab5cddd2875dcaf710e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1OWFmNzViZDg1MWIxYTgwY2QyZmFiNWNkZGQyODc1ZGNhZjcxMGU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-03-15T05:42:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-03-15T05:42:41Z"}, "message": "Auto merge of #23381 - Manishearth:rollup, r=Manishearth\n\nr? @Manishearth", "tree": {"sha": "76f70db97242b979242100f8796d39c848e7ff08", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/76f70db97242b979242100f8796d39c848e7ff08"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f59af75bd851b1a80cd2fab5cddd2875dcaf710e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f59af75bd851b1a80cd2fab5cddd2875dcaf710e", "html_url": "https://github.com/rust-lang/rust/commit/f59af75bd851b1a80cd2fab5cddd2875dcaf710e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f59af75bd851b1a80cd2fab5cddd2875dcaf710e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "66853af9af79fdc4fb8e659c8b1f890918749d5f", "url": "https://api.github.com/repos/rust-lang/rust/commits/66853af9af79fdc4fb8e659c8b1f890918749d5f", "html_url": "https://github.com/rust-lang/rust/commit/66853af9af79fdc4fb8e659c8b1f890918749d5f"}, {"sha": "d66d0b3ac2e45071e40f0e2f3d38aec85cd3c941", "url": "https://api.github.com/repos/rust-lang/rust/commits/d66d0b3ac2e45071e40f0e2f3d38aec85cd3c941", "html_url": "https://github.com/rust-lang/rust/commit/d66d0b3ac2e45071e40f0e2f3d38aec85cd3c941"}], "stats": {"total": 206, "additions": 85, "deletions": 121}, "files": [{"sha": "760203ae5cf4e275f0c2905f504aa69a0182d56b", "filename": "configure", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f59af75bd851b1a80cd2fab5cddd2875dcaf710e/configure", "raw_url": "https://github.com/rust-lang/rust/raw/f59af75bd851b1a80cd2fab5cddd2875dcaf710e/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=f59af75bd851b1a80cd2fab5cddd2875dcaf710e", "patch": "@@ -823,11 +823,11 @@ then\n     LLVM_VERSION=$($LLVM_CONFIG --version)\n \n     case $LLVM_VERSION in\n-        (3.[2-6]*)\n+        (3.[5-6]*)\n             msg \"found ok version of LLVM: $LLVM_VERSION\"\n             ;;\n         (*)\n-            err \"bad LLVM version: $LLVM_VERSION, need >=3.0svn\"\n+            err \"bad LLVM version: $LLVM_VERSION, need >=3.5\"\n             ;;\n     esac\n fi"}, {"sha": "b9f2cf1cce89c730dbe08f3ccf49ffa879b3c43c", "filename": "mk/main.mk", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f59af75bd851b1a80cd2fab5cddd2875dcaf710e/mk%2Fmain.mk", "raw_url": "https://github.com/rust-lang/rust/raw/f59af75bd851b1a80cd2fab5cddd2875dcaf710e/mk%2Fmain.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fmain.mk?ref=f59af75bd851b1a80cd2fab5cddd2875dcaf710e", "patch": "@@ -290,6 +290,7 @@ LLVM_VERSION_$(1)=$$(shell \"$$(LLVM_CONFIG_$(1))\" --version)\n LLVM_BINDIR_$(1)=$$(shell \"$$(LLVM_CONFIG_$(1))\" --bindir)\n LLVM_INCDIR_$(1)=$$(shell \"$$(LLVM_CONFIG_$(1))\" --includedir)\n LLVM_LIBDIR_$(1)=$$(shell \"$$(LLVM_CONFIG_$(1))\" --libdir)\n+LLVM_LIBDIR_RUSTFLAGS_$(1)=-L \"$$(LLVM_LIBDIR_$(1))\"\n LLVM_LIBS_$(1)=$$(shell \"$$(LLVM_CONFIG_$(1))\" --libs $$(LLVM_COMPONENTS))\n LLVM_LDFLAGS_$(1)=$$(shell \"$$(LLVM_CONFIG_$(1))\" --ldflags)\n # On FreeBSD, it may search wrong headers (that are for pre-installed LLVM),"}, {"sha": "0a41f363649db3c12e9b007c0db5259f460512f9", "filename": "mk/target.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f59af75bd851b1a80cd2fab5cddd2875dcaf710e/mk%2Ftarget.mk", "raw_url": "https://github.com/rust-lang/rust/raw/f59af75bd851b1a80cd2fab5cddd2875dcaf710e/mk%2Ftarget.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftarget.mk?ref=f59af75bd851b1a80cd2fab5cddd2875dcaf710e", "patch": "@@ -84,7 +84,7 @@ $$(TLIB$(1)_T_$(2)_H_$(3))/stamp.$(4): \\\n \t    $$(subst @,,$$(STAGE$(1)_T_$(2)_H_$(3))) \\\n \t\t$$(RUST_LIB_FLAGS_ST$(1)) \\\n \t\t-L \"$$(RT_OUTPUT_DIR_$(2))\" \\\n-\t\t-L \"$$(LLVM_LIBDIR_$(2))\" \\\n+\t\t$$(LLVM_LIBDIR_RUSTFLAGS_$(2)) \\\n \t\t$$(LLVM_STDCPP_RUSTFLAGS_$(2)) \\\n \t\t$$(RUSTFLAGS_$(4)) \\\n \t\t--out-dir $$(@D) \\"}, {"sha": "48e50e47d4d1a7d487651e72374082176953e66d", "filename": "mk/tests.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f59af75bd851b1a80cd2fab5cddd2875dcaf710e/mk%2Ftests.mk", "raw_url": "https://github.com/rust-lang/rust/raw/f59af75bd851b1a80cd2fab5cddd2875dcaf710e/mk%2Ftests.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftests.mk?ref=f59af75bd851b1a80cd2fab5cddd2875dcaf710e", "patch": "@@ -372,7 +372,7 @@ $(3)/stage$(1)/test/$(4)test-$(2)$$(X_$(2)): \\\n \t$(Q)CFG_LLVM_LINKAGE_FILE=$$(LLVM_LINKAGE_PATH_$(3)) \\\n \t    $$(subst @,,$$(STAGE$(1)_T_$(2)_H_$(3))) -o $$@ $$< --test \\\n \t\t-L \"$$(RT_OUTPUT_DIR_$(2))\" \\\n-\t\t-L \"$$(LLVM_LIBDIR_$(2))\" \\\n+\t\t$$(LLVM_LIBDIR_RUSTFLAGS_$(2)) \\\n \t\t$$(RUSTFLAGS_$(4))\n \n endef"}, {"sha": "bf4c2d903570beb740a577f35be0c5612c65d10d", "filename": "src/doc/trpl/closures.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f59af75bd851b1a80cd2fab5cddd2875dcaf710e/src%2Fdoc%2Ftrpl%2Fclosures.md", "raw_url": "https://github.com/rust-lang/rust/raw/f59af75bd851b1a80cd2fab5cddd2875dcaf710e/src%2Fdoc%2Ftrpl%2Fclosures.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fclosures.md?ref=f59af75bd851b1a80cd2fab5cddd2875dcaf710e", "patch": "@@ -68,7 +68,7 @@ is that a moving closure always takes ownership of all variables that\n it uses. Ordinary closures, in contrast, just create a reference into\n the enclosing stack frame. Moving closures are most useful with Rust's\n concurrency features, and so we'll just leave it at this for\n-now. We'll talk about them more in the \"Threads\" section of the guide.\n+now. We'll talk about them more in the \"Concurrency\" chapter of the book.\n \n ## Accepting closures as arguments\n "}, {"sha": "4a16db63950ddd0ff76983b8df988bea5b5ffc91", "filename": "src/doc/trpl/concurrency.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f59af75bd851b1a80cd2fab5cddd2875dcaf710e/src%2Fdoc%2Ftrpl%2Fconcurrency.md", "raw_url": "https://github.com/rust-lang/rust/raw/f59af75bd851b1a80cd2fab5cddd2875dcaf710e/src%2Fdoc%2Ftrpl%2Fconcurrency.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fconcurrency.md?ref=f59af75bd851b1a80cd2fab5cddd2875dcaf710e", "patch": "@@ -339,7 +339,7 @@ fn main() {\n         });\n     }\n \n-   rx.recv().ok().expect(\"Could not recieve answer\");\n+   rx.recv().ok().expect(\"Could not receive answer\");\n }\n ```\n "}, {"sha": "59be8c6704fd455ae9ca4ea2fe6fdd0b3a343654", "filename": "src/doc/trpl/method-syntax.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f59af75bd851b1a80cd2fab5cddd2875dcaf710e/src%2Fdoc%2Ftrpl%2Fmethod-syntax.md", "raw_url": "https://github.com/rust-lang/rust/raw/f59af75bd851b1a80cd2fab5cddd2875dcaf710e/src%2Fdoc%2Ftrpl%2Fmethod-syntax.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fmethod-syntax.md?ref=f59af75bd851b1a80cd2fab5cddd2875dcaf710e", "patch": "@@ -187,13 +187,13 @@ impl CircleBuilder {\n     }\n \n     fn coordinate(&mut self, coordinate: f64) -> &mut CircleBuilder {\n-\tself.coordinate = coordinate;\n-\tself\n+        self.coordinate = coordinate;\n+        self\n     }\n \n     fn radius(&mut self, radius: f64) -> &mut CircleBuilder {\n-\tself.radius = radius;\n-\tself\n+        self.radius = radius;\n+        self\n     }\n \n     fn finalize(&self) -> Circle {"}, {"sha": "3c5d97445058b2d7ed3743a35192bb3bf4d5c910", "filename": "src/librustc/session/search_paths.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f59af75bd851b1a80cd2fab5cddd2875dcaf710e/src%2Flibrustc%2Fsession%2Fsearch_paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f59af75bd851b1a80cd2fab5cddd2875dcaf710e/src%2Flibrustc%2Fsession%2Fsearch_paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fsearch_paths.rs?ref=f59af75bd851b1a80cd2fab5cddd2875dcaf710e", "patch": "@@ -10,6 +10,7 @@\n \n use std::slice;\n use std::path::{Path, PathBuf};\n+use session::early_error;\n \n #[derive(Clone, Debug)]\n pub struct SearchPaths {\n@@ -50,6 +51,9 @@ impl SearchPaths {\n         } else {\n             (PathKind::All, path)\n         };\n+        if path.is_empty() {\n+            early_error(\"empty search path given via `-L`\");\n+        }\n         self.paths.push((kind, PathBuf::new(path)));\n     }\n "}, {"sha": "f6f82c65374bd2bf9f0f8f5c2be28576892d6c28", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f59af75bd851b1a80cd2fab5cddd2875dcaf710e/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f59af75bd851b1a80cd2fab5cddd2875dcaf710e/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=f59af75bd851b1a80cd2fab5cddd2875dcaf710e", "patch": "@@ -811,7 +811,7 @@ impl NonCamelCaseTypes {\n                 if i == 0 {\n                     c.to_uppercase().collect::<String>()\n                 } else {\n-                    c.to_string()\n+                    c.to_lowercase().collect()\n                 }\n             )).collect::<Vec<_>>().concat()\n         }"}, {"sha": "2fd79c1ddb48d9fc285fb11c0f96a283330339bf", "filename": "src/librustc_trans/trans/tvec.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f59af75bd851b1a80cd2fab5cddd2875dcaf710e/src%2Flibrustc_trans%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f59af75bd851b1a80cd2fab5cddd2875dcaf710e/src%2Flibrustc_trans%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Ftvec.rs?ref=f59af75bd851b1a80cd2fab5cddd2875dcaf710e", "patch": "@@ -293,7 +293,7 @@ pub fn write_content<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                 }\n                 SaveIn(lldest) => {\n                     match ty::eval_repeat_count(bcx.tcx(), &**count_expr) {\n-                        0 => bcx,\n+                        0 => expr::trans_into(bcx, &**element, Ignore),\n                         1 => expr::trans_into(bcx, &**element, SaveIn(lldest)),\n                         count => {\n                             let elem = unpack_datum!(bcx, expr::trans(bcx, &**element));\n@@ -410,8 +410,12 @@ pub fn iter_vec_loop<'blk, 'tcx, F>(bcx: Block<'blk, 'tcx>,\n     F: FnOnce(Block<'blk, 'tcx>, ValueRef, Ty<'tcx>) -> Block<'blk, 'tcx>,\n {\n     let _icx = push_ctxt(\"tvec::iter_vec_loop\");\n-    let fcx = bcx.fcx;\n \n+    if bcx.unreachable.get() {\n+        return bcx;\n+    }\n+\n+    let fcx = bcx.fcx;\n     let loop_bcx = fcx.new_temp_block(\"expr_repeat\");\n     let next_bcx = fcx.new_temp_block(\"expr_repeat: next\");\n "}, {"sha": "9a87c03f1c407dfd01262f630486b9b9cf2b2de6", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 12, "deletions": 108, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/f59af75bd851b1a80cd2fab5cddd2875dcaf710e/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/f59af75bd851b1a80cd2fab5cddd2875dcaf710e/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=f59af75bd851b1a80cd2fab5cddd2875dcaf710e", "patch": "@@ -14,11 +14,7 @@\n #include \"llvm/IR/DiagnosticInfo.h\"\n #include \"llvm/IR/DiagnosticPrinter.h\"\n \n-#if LLVM_VERSION_MINOR >= 5\n #include \"llvm/IR/CallSite.h\"\n-#else\n-#include \"llvm/Support/CallSite.h\"\n-#endif\n \n //===----------------------------------------------------------------------===\n //\n@@ -33,7 +29,6 @@ using namespace llvm::object;\n \n static char *LastError;\n \n-#if LLVM_VERSION_MINOR >= 5\n extern \"C\" LLVMMemoryBufferRef\n LLVMRustCreateMemoryBufferWithContentsOfFile(const char *Path) {\n   ErrorOr<std::unique_ptr<MemoryBuffer>> buf_or = MemoryBuffer::getFile(Path,\n@@ -45,18 +40,6 @@ LLVMRustCreateMemoryBufferWithContentsOfFile(const char *Path) {\n   }\n   return wrap(buf_or.get().release());\n }\n-#else\n-extern \"C\" LLVMMemoryBufferRef\n-LLVMRustCreateMemoryBufferWithContentsOfFile(const char *Path) {\n-  OwningPtr<MemoryBuffer> buf;\n-  error_code err = MemoryBuffer::getFile(Path, buf, -1, false);\n-  if (err) {\n-      LLVMRustSetLastError(err.message().c_str());\n-      return NULL;\n-  }\n-  return wrap(buf.take());\n-}\n-#endif\n \n extern \"C\" char *LLVMRustGetLastError(void) {\n   char *ret = LastError;\n@@ -116,7 +99,6 @@ extern \"C\" void LLVMAddCallSiteAttribute(LLVMValueRef Instr, unsigned index, uin\n }\n \n \n-#if LLVM_VERSION_MINOR >= 5\n extern \"C\" void LLVMAddDereferenceableCallSiteAttr(LLVMValueRef Instr, unsigned idx, uint64_t b) {\n   CallSite Call = CallSite(unwrap<Instruction>(Instr));\n   AttrBuilder B;\n@@ -126,9 +108,6 @@ extern \"C\" void LLVMAddDereferenceableCallSiteAttr(LLVMValueRef Instr, unsigned\n                                        AttributeSet::get(Call->getContext(),\n                                                          idx, B)));\n }\n-#else\n-extern \"C\" void LLVMAddDereferenceableCallSiteAttr(LLVMValueRef, unsigned, uint64_t) {}\n-#endif\n \n extern \"C\" void LLVMAddFunctionAttribute(LLVMValueRef Fn, unsigned index, uint64_t Val) {\n   Function *A = unwrap<Function>(Fn);\n@@ -137,16 +116,12 @@ extern \"C\" void LLVMAddFunctionAttribute(LLVMValueRef Fn, unsigned index, uint64\n   A->addAttributes(index, AttributeSet::get(A->getContext(), index, B));\n }\n \n-#if LLVM_VERSION_MINOR >= 5\n extern \"C\" void LLVMAddDereferenceableAttr(LLVMValueRef Fn, unsigned index, uint64_t bytes) {\n   Function *A = unwrap<Function>(Fn);\n   AttrBuilder B;\n   B.addDereferenceableAttr(bytes);\n   A->addAttributes(index, AttributeSet::get(A->getContext(), index, B));\n }\n-#else\n-extern \"C\" void LLVMAddDereferenceableAttr(LLVMValueRef, unsigned, uint64_t) {}\n-#endif\n \n extern \"C\" void LLVMAddFunctionAttrString(LLVMValueRef Fn, unsigned index, const char *Name) {\n   Function *F = unwrap<Function>(Fn);\n@@ -199,10 +174,8 @@ extern \"C\" LLVMValueRef LLVMBuildAtomicCmpXchg(LLVMBuilderRef B,\n                                                AtomicOrdering order,\n                                                AtomicOrdering failure_order) {\n     return wrap(unwrap(B)->CreateAtomicCmpXchg(unwrap(target), unwrap(old),\n-                                               unwrap(source), order\n-#if LLVM_VERSION_MINOR >= 5\n-                                               , failure_order\n-#endif\n+                                               unwrap(source), order,\n+                                               failure_order\n                                                ));\n }\n extern \"C\" LLVMValueRef LLVMBuildAtomicFence(LLVMBuilderRef B, AtomicOrdering order) {\n@@ -247,11 +220,7 @@ DIT unwrapDI(LLVMMetadataRef ref) {\n     return DIT(ref ? unwrap<MDNode>(ref) : NULL);\n }\n \n-#if LLVM_VERSION_MINOR >= 5\n extern \"C\" const uint32_t LLVMRustDebugMetadataVersion = DEBUG_METADATA_VERSION;\n-#else\n-extern \"C\" const uint32_t LLVMRustDebugMetadataVersion = 1;\n-#endif\n \n extern \"C\" void LLVMRustAddModuleFlag(LLVMModuleRef M,\n                                       const char *name,\n@@ -383,10 +352,8 @@ extern \"C\" LLVMMetadataRef LLVMDIBuilderCreateStructType(\n         unwrapDI<DIType>(DerivedFrom),\n         unwrapDI<DIArray>(Elements),\n         RunTimeLang,\n-        unwrapDI<DIType>(VTableHolder)\n-#if LLVM_VERSION_MINOR >= 4\n-        ,UniqueId\n-#endif\n+        unwrapDI<DIType>(VTableHolder),\n+        UniqueId\n         ));\n }\n \n@@ -465,8 +432,8 @@ extern \"C\" LLVMMetadataRef LLVMDIBuilderCreateVariable(\n #if LLVM_VERSION_MINOR < 6\n     if (AddrOpsCount > 0) {\n         SmallVector<llvm::Value *, 16> addr_ops;\n-        llvm::Type *Int64Ty = Type::getInt64Ty(VMContext);\n-        for (int i = 0; i < AddrOpsCount; ++i)\n+        llvm::Type *Int64Ty = Type::getInt64Ty(unwrap<MDNode>(Scope)->getContext());\n+        for (unsigned i = 0; i < AddrOpsCount; ++i)\n             addr_ops.push_back(ConstantInt::get(Int64Ty, AddrOps[i]));\n \n         return wrap(Builder->createComplexVariable(\n@@ -522,7 +489,11 @@ extern \"C\" LLVMMetadataRef LLVMDIBuilderGetOrCreateArray(\n     LLVMMetadataRef* Ptr,\n     unsigned Count) {\n     return wrap(Builder->getOrCreateArray(\n+#if LLVM_VERSION_MINOR >= 6\n         ArrayRef<Metadata*>(unwrap(Ptr), Count)));\n+#else\n+        ArrayRef<Value*>(reinterpret_cast<Value**>(Ptr), Count)));\n+#endif\n }\n \n extern \"C\" LLVMValueRef LLVMDIBuilderInsertDeclareAtEnd(\n@@ -627,19 +598,11 @@ extern \"C\" LLVMMetadataRef LLVMDIBuilderCreateUnionType(\n         AlignInBits,\n         Flags,\n         unwrapDI<DIArray>(Elements),\n-        RunTimeLang\n-#if LLVM_VERSION_MINOR >= 4\n-        ,UniqueId\n-#endif\n+        RunTimeLang,\n+        UniqueId\n         ));\n }\n \n-#if LLVM_VERSION_MINOR < 5\n-extern \"C\" void LLVMSetUnnamedAddr(LLVMValueRef Value, LLVMBool Unnamed) {\n-    unwrap<GlobalValue>(Value)->setUnnamedAddr(Unnamed);\n-}\n-#endif\n-\n extern \"C\" LLVMMetadataRef LLVMDIBuilderCreateTemplateTypeParameter(\n     DIBuilderRef Builder,\n     LLVMMetadataRef Scope,\n@@ -730,7 +693,6 @@ extern \"C\" void LLVMWriteValueToString(LLVMValueRef Value, RustStringRef str) {\n     os << \")\";\n }\n \n-#if LLVM_VERSION_MINOR >= 5\n extern \"C\" bool\n LLVMRustLinkInExternalBitcode(LLVMModuleRef dst, char *bc, size_t len) {\n     Module *Dst = unwrap(dst);\n@@ -763,28 +725,7 @@ LLVMRustLinkInExternalBitcode(LLVMModuleRef dst, char *bc, size_t len) {\n     }\n     return true;\n }\n-#else\n-extern \"C\" bool\n-LLVMRustLinkInExternalBitcode(LLVMModuleRef dst, char *bc, size_t len) {\n-    Module *Dst = unwrap(dst);\n-    MemoryBuffer* buf = MemoryBuffer::getMemBufferCopy(StringRef(bc, len));\n-    std::string Err;\n-    Module *Src = llvm::getLazyBitcodeModule(buf, Dst->getContext(), &Err);\n-    if (!Src) {\n-        LLVMRustSetLastError(Err.c_str());\n-        delete buf;\n-        return false;\n-    }\n-\n-    if (Linker::LinkModules(Dst, Src, Linker::DestroySource, &Err)) {\n-        LLVMRustSetLastError(Err.c_str());\n-        return false;\n-    }\n-    return true;\n-}\n-#endif\n \n-#if LLVM_VERSION_MINOR >= 5\n extern \"C\" void*\n LLVMRustOpenArchive(char *path) {\n     ErrorOr<std::unique_ptr<MemoryBuffer>> buf_or = MemoryBuffer::getFile(path,\n@@ -817,23 +758,6 @@ LLVMRustOpenArchive(char *path) {\n \n     return ret;\n }\n-#else\n-extern \"C\" void*\n-LLVMRustOpenArchive(char *path) {\n-    OwningPtr<MemoryBuffer> buf;\n-    error_code err = MemoryBuffer::getFile(path, buf, -1, false);\n-    if (err) {\n-        LLVMRustSetLastError(err.message().c_str());\n-        return NULL;\n-    }\n-    Archive *ret = new Archive(buf.take(), err);\n-    if (err) {\n-        LLVMRustSetLastError(err.message().c_str());\n-        return NULL;\n-    }\n-    return ret;\n-}\n-#endif\n \n extern \"C\" const char*\n #if LLVM_VERSION_MINOR >= 6\n@@ -844,21 +768,12 @@ LLVMRustArchiveReadSection(OwningBinary<Archive> *ob, char *name, size_t *size)\n LLVMRustArchiveReadSection(Archive *ar, char *name, size_t *size) {\n #endif\n \n-#if LLVM_VERSION_MINOR >= 5\n     Archive::child_iterator child = ar->child_begin(),\n                               end = ar->child_end();\n     for (; child != end; ++child) {\n         ErrorOr<StringRef> name_or_err = child->getName();\n         if (name_or_err.getError()) continue;\n         StringRef sect_name = name_or_err.get();\n-#else\n-    Archive::child_iterator child = ar->begin_children(),\n-                              end = ar->end_children();\n-    for (; child != end; ++child) {\n-        StringRef sect_name;\n-        error_code err = child->getName(sect_name);\n-        if (err) continue;\n-#endif\n         if (sect_name.trim(\" \") == name) {\n             StringRef buf = child->getBuffer();\n             *size = buf.size();\n@@ -877,18 +792,11 @@ LLVMRustDestroyArchive(Archive *ar) {\n     delete ar;\n }\n \n-#if LLVM_VERSION_MINOR >= 5\n extern \"C\" void\n LLVMRustSetDLLExportStorageClass(LLVMValueRef Value) {\n     GlobalValue *V = unwrap<GlobalValue>(Value);\n     V->setDLLStorageClass(GlobalValue::DLLExportStorageClass);\n }\n-#else\n-extern \"C\" void\n-LLVMRustSetDLLExportStorageClass(LLVMValueRef Value) {\n-    LLVMSetLinkage(Value, LLVMDLLExportLinkage);\n-}\n-#endif\n \n extern \"C\" int\n LLVMVersionMinor() {\n@@ -918,11 +826,7 @@ inline section_iterator *unwrap(LLVMSectionIteratorRef SI) {\n extern \"C\" int\n LLVMRustGetSectionName(LLVMSectionIteratorRef SI, const char **ptr) {\n     StringRef ret;\n-#if LLVM_VERSION_MINOR >= 5\n     if (std::error_code ec = (*unwrap(SI))->getName(ret))\n-#else\n-    if (error_code ec = (*unwrap(SI))->getName(ret))\n-#endif\n       report_fatal_error(ec.message());\n     *ptr = ret.data();\n     return ret.size();"}, {"sha": "f6d3d62d0bf753bb0814887238f715610a8e34b8", "filename": "src/test/compile-fail/lint-non-camel-case-types.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f59af75bd851b1a80cd2fab5cddd2875dcaf710e/src%2Ftest%2Fcompile-fail%2Flint-non-camel-case-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f59af75bd851b1a80cd2fab5cddd2875dcaf710e/src%2Ftest%2Fcompile-fail%2Flint-non-camel-case-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-non-camel-case-types.rs?ref=f59af75bd851b1a80cd2fab5cddd2875dcaf710e", "patch": "@@ -11,6 +11,9 @@\n #![forbid(non_camel_case_types)]\n #![allow(dead_code)]\n \n+struct ONE_TWO_THREE;\n+//~^ ERROR type `ONE_TWO_THREE` should have a camel case name such as `OneTwoThree`\n+\n struct foo { //~ ERROR type `foo` should have a camel case name such as `Foo`\n     bar: isize,\n }"}, {"sha": "2bf61cbe24ca30e6e8fda66a8b048cbe6c5c5e95", "filename": "src/test/compile-fail/manual-link-bad-search-path.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f59af75bd851b1a80cd2fab5cddd2875dcaf710e/src%2Ftest%2Fcompile-fail%2Fmanual-link-bad-search-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f59af75bd851b1a80cd2fab5cddd2875dcaf710e/src%2Ftest%2Fcompile-fail%2Fmanual-link-bad-search-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmanual-link-bad-search-path.rs?ref=f59af75bd851b1a80cd2fab5cddd2875dcaf710e", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags:-L native=\n+// error-pattern: empty search path given via `-L`\n+\n+fn main() {\n+}"}, {"sha": "b120d3222fa21985a70259998cb6fc4dbae0de99", "filename": "src/test/run-fail/issue-23354-2.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f59af75bd851b1a80cd2fab5cddd2875dcaf710e/src%2Ftest%2Frun-fail%2Fissue-23354-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f59af75bd851b1a80cd2fab5cddd2875dcaf710e/src%2Ftest%2Frun-fail%2Fissue-23354-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fissue-23354-2.rs?ref=f59af75bd851b1a80cd2fab5cddd2875dcaf710e", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// error-pattern:panic evaluated\n+\n+#[allow(unused_variables)]\n+fn main() {\n+    // This used to trigger an LLVM assertion during compilation\n+    let x = [panic!(\"panic evaluated\"); 2];\n+}"}, {"sha": "f6b937c82595b4bf18af89b2ce888172710cd23a", "filename": "src/test/run-fail/issue-23354.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f59af75bd851b1a80cd2fab5cddd2875dcaf710e/src%2Ftest%2Frun-fail%2Fissue-23354.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f59af75bd851b1a80cd2fab5cddd2875dcaf710e/src%2Ftest%2Frun-fail%2Fissue-23354.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fissue-23354.rs?ref=f59af75bd851b1a80cd2fab5cddd2875dcaf710e", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// error-pattern:panic evaluated\n+\n+#[allow(unused_variables)]\n+fn main() {\n+    let x = [panic!(\"panic evaluated\"); 0];\n+}"}]}