{"sha": "6f03bd09ff6ef6402b68b32485f0d25e7f6c0c01", "node_id": "C_kwDOAAsO6NoAKDZmMDNiZDA5ZmY2ZWY2NDAyYjY4YjMyNDg1ZjBkMjVlN2Y2YzBjMDE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-02-04T17:42:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-04T17:42:13Z"}, "message": "Rollup merge of #91589 - derekdreery:arc_unwrap_or_clone, r=m-ou-se\n\nimpl `Arc::unwrap_or_clone`\n\nThe function gets the inner value, cloning only if necessary. The conversation started on [`irlo`](https://internals.rust-lang.org/t/arc-into-inner/15707). If the reviewer think the PR has potential to be merged, and does not need an RFC, then I will create the corresponding tracking issues and update the PR.\n\n## Alternative names\n\n - `into_inner`\n - `make_owned`\n - `make_unique`\n - `take_*` (`take_inner`?)", "tree": {"sha": "d63552075a2c9c2962cfea48482bf25911a20696", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d63552075a2c9c2962cfea48482bf25911a20696"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f03bd09ff6ef6402b68b32485f0d25e7f6c0c01", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh/WV2CRBK7hj4Ov3rIwAA9s0IALAXpsHVwkOZ8GTm4QIbn3WE\niBS2Q46EowH5lNPw8767VGlqfjS1JaFjusN3wIQMfe/sUVza068k31cSHJK+yKLh\n8P5fuQ14mQ/iuSpoQxN5o9Y/k0wyYbdZ+2tElHOfhc9yrH+K14pkxR/Db6v0kcHS\nEUtckWuOkSzTFh/6fwPcErOl1d/4irjNnGU/chB7Z/ZJCch+7z4orG7GMVXtBLTq\n/S7dxpKmlSnOGdxynMXZMhJ2y+AVbsx/OIoGZ0CORJRhUxoFmlM3GwfvIjqbZIM5\nlxQM4L0/k5Ow/dAS+KQRZe+LhMOWAbrEzO3Vn3dO8G44jaiZXAQMEU/SyLo1KvM=\n=Cqui\n-----END PGP SIGNATURE-----\n", "payload": "tree d63552075a2c9c2962cfea48482bf25911a20696\nparent 2fe9a32ed209b93ddd08cab174dfffefc1409a9c\nparent f5e6d16d000e0aa73833de909de44e8dcc8589ed\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1643996533 +0100\ncommitter GitHub <noreply@github.com> 1643996533 +0100\n\nRollup merge of #91589 - derekdreery:arc_unwrap_or_clone, r=m-ou-se\n\nimpl `Arc::unwrap_or_clone`\n\nThe function gets the inner value, cloning only if necessary. The conversation started on [`irlo`](https://internals.rust-lang.org/t/arc-into-inner/15707). If the reviewer think the PR has potential to be merged, and does not need an RFC, then I will create the corresponding tracking issues and update the PR.\n\n## Alternative names\n\n - `into_inner`\n - `make_owned`\n - `make_unique`\n - `take_*` (`take_inner`?)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f03bd09ff6ef6402b68b32485f0d25e7f6c0c01", "html_url": "https://github.com/rust-lang/rust/commit/6f03bd09ff6ef6402b68b32485f0d25e7f6c0c01", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f03bd09ff6ef6402b68b32485f0d25e7f6c0c01/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2fe9a32ed209b93ddd08cab174dfffefc1409a9c", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fe9a32ed209b93ddd08cab174dfffefc1409a9c", "html_url": "https://github.com/rust-lang/rust/commit/2fe9a32ed209b93ddd08cab174dfffefc1409a9c"}, {"sha": "f5e6d16d000e0aa73833de909de44e8dcc8589ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5e6d16d000e0aa73833de909de44e8dcc8589ed", "html_url": "https://github.com/rust-lang/rust/commit/f5e6d16d000e0aa73833de909de44e8dcc8589ed"}], "stats": {"total": 70, "additions": 70, "deletions": 0}, "files": [{"sha": "3065169e5e2cbcc296c2fe748b9849d22f7b6c8c", "filename": "library/alloc/src/rc.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/6f03bd09ff6ef6402b68b32485f0d25e7f6c0c01/library%2Falloc%2Fsrc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f03bd09ff6ef6402b68b32485f0d25e7f6c0c01/library%2Falloc%2Fsrc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc.rs?ref=6f03bd09ff6ef6402b68b32485f0d25e7f6c0c01", "patch": "@@ -1203,6 +1203,41 @@ impl<T: Clone> Rc<T> {\n         // reference to the allocation.\n         unsafe { &mut this.ptr.as_mut().value }\n     }\n+\n+    /// If we have the only reference to `T` then unwrap it. Otherwise, clone `T` and return the\n+    /// clone.\n+    ///\n+    /// Assuming `rc_t` is of type `Rc<T>`, this function is functionally equivalent to\n+    /// `(*rc_t).clone()`, but will avoid cloning the inner value where possible.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(arc_unwrap_or_clone)]\n+    /// # use std::{ptr, rc::Rc};\n+    /// let inner = String::from(\"test\");\n+    /// let ptr = inner.as_ptr();\n+    ///\n+    /// let rc = Rc::new(inner);\n+    /// let inner = Rc::unwrap_or_clone(rc);\n+    /// // The inner value was not cloned\n+    /// assert!(ptr::eq(ptr, inner.as_ptr()));\n+    ///\n+    /// let rc = Rc::new(inner);\n+    /// let rc2 = rc.clone();\n+    /// let inner = Rc::unwrap_or_clone(rc);\n+    /// // Because there were 2 references, we had to clone the inner value.\n+    /// assert!(!ptr::eq(ptr, inner.as_ptr()));\n+    /// // `rc2` is the last reference, so when we unwrap it we get back\n+    /// // the original `String`.\n+    /// let inner = Rc::unwrap_or_clone(rc2);\n+    /// assert!(ptr::eq(ptr, inner.as_ptr()));\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"arc_unwrap_or_clone\", issue = \"93610\")]\n+    pub fn unwrap_or_clone(this: Self) -> T {\n+        Rc::try_unwrap(this).unwrap_or_else(|rc| (*rc).clone())\n+    }\n }\n \n impl Rc<dyn Any> {"}, {"sha": "7e7670aad6425fc1bc6476687a60c48ab6396961", "filename": "library/alloc/src/sync.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/6f03bd09ff6ef6402b68b32485f0d25e7f6c0c01/library%2Falloc%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f03bd09ff6ef6402b68b32485f0d25e7f6c0c01/library%2Falloc%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync.rs?ref=6f03bd09ff6ef6402b68b32485f0d25e7f6c0c01", "patch": "@@ -1477,6 +1477,41 @@ impl<T: Clone> Arc<T> {\n         // either unique to begin with, or became one upon cloning the contents.\n         unsafe { Self::get_mut_unchecked(this) }\n     }\n+\n+    /// If we have the only reference to `T` then unwrap it. Otherwise, clone `T` and return the\n+    /// clone.\n+    ///\n+    /// Assuming `arc_t` is of type `Arc<T>`, this function is functionally equivalent to\n+    /// `(*arc_t).clone()`, but will avoid cloning the inner value where possible.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(arc_unwrap_or_clone)]\n+    /// # use std::{ptr, sync::Arc};\n+    /// let inner = String::from(\"test\");\n+    /// let ptr = inner.as_ptr();\n+    ///\n+    /// let arc = Arc::new(inner);\n+    /// let inner = Arc::unwrap_or_clone(arc);\n+    /// // The inner value was not cloned\n+    /// assert!(ptr::eq(ptr, inner.as_ptr()));\n+    ///\n+    /// let arc = Arc::new(inner);\n+    /// let arc2 = arc.clone();\n+    /// let inner = Arc::unwrap_or_clone(arc);\n+    /// // Because there were 2 references, we had to clone the inner value.\n+    /// assert!(!ptr::eq(ptr, inner.as_ptr()));\n+    /// // `arc2` is the last reference, so when we unwrap it we get back\n+    /// // the original `String`.\n+    /// let inner = Arc::unwrap_or_clone(arc2);\n+    /// assert!(ptr::eq(ptr, inner.as_ptr()));\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"arc_unwrap_or_clone\", issue = \"93610\")]\n+    pub fn unwrap_or_clone(this: Self) -> T {\n+        Arc::try_unwrap(this).unwrap_or_else(|arc| (*arc).clone())\n+    }\n }\n \n impl<T: ?Sized> Arc<T> {"}]}