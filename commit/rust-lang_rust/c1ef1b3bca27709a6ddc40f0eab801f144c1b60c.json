{"sha": "c1ef1b3bca27709a6ddc40f0eab801f144c1b60c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxZWYxYjNiY2EyNzcwOWE2ZGRjNDBmMGVhYjgwMWYxNDRjMWI2MGM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-17T10:30:53Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-24T05:28:56Z"}, "message": "defatalize ProcMacroDerive::expand\n\nAlso remove ExtCtxt::struct_span_fatal.", "tree": {"sha": "0ccc063c1432a1e6d2933f6e0b1f17f80ae5c673", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ccc063c1432a1e6d2933f6e0b1f17f80ae5c673"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1ef1b3bca27709a6ddc40f0eab801f144c1b60c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1ef1b3bca27709a6ddc40f0eab801f144c1b60c", "html_url": "https://github.com/rust-lang/rust/commit/c1ef1b3bca27709a6ddc40f0eab801f144c1b60c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1ef1b3bca27709a6ddc40f0eab801f144c1b60c/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce8880d1d8b10cfaebc44449a37b6ad9fc628cb9", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce8880d1d8b10cfaebc44449a37b6ad9fc628cb9", "html_url": "https://github.com/rust-lang/rust/commit/ce8880d1d8b10cfaebc44449a37b6ad9fc628cb9"}], "stats": {"total": 77, "additions": 44, "deletions": 33}, "files": [{"sha": "c107a7f2409b8b7a8695bacf90ca62c5fe92f004", "filename": "src/librustc_expand/base.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c1ef1b3bca27709a6ddc40f0eab801f144c1b60c/src%2Flibrustc_expand%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1ef1b3bca27709a6ddc40f0eab801f144c1b60c/src%2Flibrustc_expand%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fbase.rs?ref=c1ef1b3bca27709a6ddc40f0eab801f144c1b60c", "patch": "@@ -1020,9 +1020,6 @@ impl<'a> ExtCtxt<'a> {\n     pub fn struct_span_err<S: Into<MultiSpan>>(&self, sp: S, msg: &str) -> DiagnosticBuilder<'a> {\n         self.parse_sess.span_diagnostic.struct_span_err(sp, msg)\n     }\n-    pub fn struct_span_fatal<S: Into<MultiSpan>>(&self, sp: S, msg: &str) -> DiagnosticBuilder<'a> {\n-        self.parse_sess.span_diagnostic.struct_span_fatal(sp, msg)\n-    }\n \n     /// Emit `msg` attached to `sp`, and stop compilation immediately.\n     ///"}, {"sha": "df7bf9438c3d03c2d175105b4b88175506c0b74e", "filename": "src/librustc_expand/proc_macro.rs", "status": "modified", "additions": 8, "deletions": 17, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/c1ef1b3bca27709a6ddc40f0eab801f144c1b60c/src%2Flibrustc_expand%2Fproc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1ef1b3bca27709a6ddc40f0eab801f144c1b60c/src%2Flibrustc_expand%2Fproc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fproc_macro.rs?ref=c1ef1b3bca27709a6ddc40f0eab801f144c1b60c", "patch": "@@ -5,7 +5,7 @@ use rustc_ast::ast::{self, ItemKind, MetaItemKind, NestedMetaItem};\n use rustc_ast::token;\n use rustc_ast::tokenstream::{self, TokenStream};\n use rustc_data_structures::sync::Lrc;\n-use rustc_errors::{Applicability, ErrorReported, FatalError};\n+use rustc_errors::{Applicability, ErrorReported};\n use rustc_span::symbol::sym;\n use rustc_span::{Span, DUMMY_SP};\n \n@@ -86,8 +86,7 @@ impl MultiItemModifier for ProcMacroDerive {\n             | Annotatable::Expr(_) => {\n                 ecx.span_err(\n                     span,\n-                    \"proc-macro derives may only be \\\n-                                    applied to a struct, enum, or union\",\n+                    \"proc-macro derives may only be applied to a struct, enum, or union\",\n                 );\n                 return ExpandResult::Ready(Vec::new());\n             }\n@@ -97,8 +96,7 @@ impl MultiItemModifier for ProcMacroDerive {\n             _ => {\n                 ecx.span_err(\n                     span,\n-                    \"proc-macro derives may only be \\\n-                                    applied to a struct, enum, or union\",\n+                    \"proc-macro derives may only be applied to a struct, enum, or union\",\n                 );\n                 return ExpandResult::Ready(Vec::new());\n             }\n@@ -111,20 +109,16 @@ impl MultiItemModifier for ProcMacroDerive {\n         let stream = match self.client.run(&EXEC_STRATEGY, server, input) {\n             Ok(stream) => stream,\n             Err(e) => {\n-                let msg = \"proc-macro derive panicked\";\n-                let mut err = ecx.struct_span_fatal(span, msg);\n+                let mut err = ecx.struct_span_err(span, \"proc-macro derive panicked\");\n                 if let Some(s) = e.as_str() {\n                     err.help(&format!(\"message: {}\", s));\n                 }\n-\n                 err.emit();\n-                FatalError.raise();\n+                return ExpandResult::Ready(vec![]);\n             }\n         };\n \n         let error_count_before = ecx.parse_sess.span_diagnostic.err_count();\n-        let msg = \"proc-macro derive produced unparseable tokens\";\n-\n         let mut parser =\n             rustc_parse::stream_to_parser(ecx.parse_sess, stream, Some(\"proc-macro derive\"));\n         let mut items = vec![];\n@@ -134,18 +128,15 @@ impl MultiItemModifier for ProcMacroDerive {\n                 Ok(None) => break,\n                 Ok(Some(item)) => items.push(Annotatable::Item(item)),\n                 Err(mut err) => {\n-                    // FIXME: handle this better\n-                    err.cancel();\n-                    ecx.struct_span_fatal(span, msg).emit();\n-                    FatalError.raise();\n+                    err.emit();\n+                    break;\n                 }\n             }\n         }\n \n         // fail if there have been errors emitted\n         if ecx.parse_sess.span_diagnostic.err_count() > error_count_before {\n-            ecx.struct_span_fatal(span, msg).emit();\n-            FatalError.raise();\n+            ecx.struct_span_err(span, \"proc-macro derive produced unparseable tokens\").emit();\n         }\n \n         ExpandResult::Ready(items)"}, {"sha": "cb5188b5fb43fd4c0e374a7e3fb58a8b3d0fdb78", "filename": "src/test/ui/proc-macro/derive-bad.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c1ef1b3bca27709a6ddc40f0eab801f144c1b60c/src%2Ftest%2Fui%2Fproc-macro%2Fderive-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1ef1b3bca27709a6ddc40f0eab801f144c1b60c/src%2Ftest%2Fui%2Fproc-macro%2Fderive-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fderive-bad.rs?ref=c1ef1b3bca27709a6ddc40f0eab801f144c1b60c", "patch": "@@ -3,11 +3,9 @@\n #[macro_use]\n extern crate derive_bad;\n \n-#[derive(\n-    A\n-)]\n-//~^^ ERROR proc-macro derive produced unparseable tokens\n+#[derive(A)]\n+//~^ ERROR proc-macro derive produced unparseable tokens\n //~| ERROR expected `:`, found `}`\n-struct A;\n+struct A; //~ ERROR the name `A` is defined multiple times\n \n fn main() {}"}, {"sha": "bc5ed9815238adf026d3e4d5130641585feda6f4", "filename": "src/test/ui/proc-macro/derive-bad.stderr", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c1ef1b3bca27709a6ddc40f0eab801f144c1b60c/src%2Ftest%2Fui%2Fproc-macro%2Fderive-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1ef1b3bca27709a6ddc40f0eab801f144c1b60c/src%2Ftest%2Fui%2Fproc-macro%2Fderive-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fderive-bad.stderr?ref=c1ef1b3bca27709a6ddc40f0eab801f144c1b60c", "patch": "@@ -1,16 +1,28 @@\n error: expected `:`, found `}`\n-  --> $DIR/derive-bad.rs:7:5\n+  --> $DIR/derive-bad.rs:6:10\n    |\n-LL |     A\n-   |     ^ expected `:`\n+LL | #[derive(A)]\n+   |          ^ expected `:`\n    |\n    = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: proc-macro derive produced unparseable tokens\n-  --> $DIR/derive-bad.rs:7:5\n+  --> $DIR/derive-bad.rs:6:10\n    |\n-LL |     A\n-   |     ^\n+LL | #[derive(A)]\n+   |          ^\n \n-error: aborting due to 2 previous errors\n+error[E0428]: the name `A` is defined multiple times\n+  --> $DIR/derive-bad.rs:9:1\n+   |\n+LL | #[derive(A)]\n+   |          - previous definition of the type `A` here\n+...\n+LL | struct A;\n+   | ^^^^^^^^^ `A` redefined here\n+   |\n+   = note: `A` must be defined only once in the type namespace of this module\n+\n+error: aborting due to 3 previous errors\n \n+For more information about this error, try `rustc --explain E0428`."}, {"sha": "5c43a564c00c2a3b502d4980cc3e74d1d15b384e", "filename": "src/test/ui/proc-macro/issue-36935.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c1ef1b3bca27709a6ddc40f0eab801f144c1b60c/src%2Ftest%2Fui%2Fproc-macro%2Fissue-36935.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1ef1b3bca27709a6ddc40f0eab801f144c1b60c/src%2Ftest%2Fui%2Fproc-macro%2Fissue-36935.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-36935.rs?ref=c1ef1b3bca27709a6ddc40f0eab801f144c1b60c", "patch": "@@ -5,6 +5,7 @@ extern crate test_macros;\n \n #[derive(Identity, Panic)] //~ ERROR proc-macro derive panicked\n struct Baz {\n+    //~^ ERROR the name `Baz` is defined multiple times\n     a: i32,\n     b: i32,\n }"}, {"sha": "2b2e28fdb2fda4ecd081b957bda9c7eb2e2274fa", "filename": "src/test/ui/proc-macro/issue-36935.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c1ef1b3bca27709a6ddc40f0eab801f144c1b60c/src%2Ftest%2Fui%2Fproc-macro%2Fissue-36935.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1ef1b3bca27709a6ddc40f0eab801f144c1b60c/src%2Ftest%2Fui%2Fproc-macro%2Fissue-36935.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-36935.stderr?ref=c1ef1b3bca27709a6ddc40f0eab801f144c1b60c", "patch": "@@ -6,5 +6,17 @@ LL | #[derive(Identity, Panic)]\n    |\n    = help: message: panic-derive\n \n-error: aborting due to previous error\n+error[E0428]: the name `Baz` is defined multiple times\n+  --> $DIR/issue-36935.rs:7:1\n+   |\n+LL | struct Baz {\n+   | ^^^^^^^^^^\n+   | |\n+   | `Baz` redefined here\n+   | previous definition of the type `Baz` here\n+   |\n+   = note: `Baz` must be defined only once in the type namespace of this module\n+\n+error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0428`."}]}