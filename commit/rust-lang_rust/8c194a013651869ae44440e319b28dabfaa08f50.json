{"sha": "8c194a013651869ae44440e319b28dabfaa08f50", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjMTk0YTAxMzY1MTg2OWFlNDQ0NDBlMzE5YjI4ZGFiZmFhMDhmNTA=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-19T01:44:25Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T21:01:24Z"}, "message": "librustc: De-`@mut` `CrateContext::module_data`", "tree": {"sha": "ac243ba77d20321ff44c558e6c17a29ad1f3ddd8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac243ba77d20321ff44c558e6c17a29ad1f3ddd8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c194a013651869ae44440e319b28dabfaa08f50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c194a013651869ae44440e319b28dabfaa08f50", "html_url": "https://github.com/rust-lang/rust/commit/8c194a013651869ae44440e319b28dabfaa08f50", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c194a013651869ae44440e319b28dabfaa08f50/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1185fcc437e13cd1d492509361c29d05ee2548f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/1185fcc437e13cd1d492509361c29d05ee2548f6", "html_url": "https://github.com/rust-lang/rust/commit/1185fcc437e13cd1d492509361c29d05ee2548f6"}], "stats": {"total": 49, "additions": 35, "deletions": 14}, "files": [{"sha": "a4da7520ffe6f8759635ffc75dc96ca3cc977aa3", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/8c194a013651869ae44440e319b28dabfaa08f50/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c194a013651869ae44440e319b28dabfaa08f50/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=8c194a013651869ae44440e319b28dabfaa08f50", "patch": "@@ -2917,14 +2917,19 @@ pub fn decl_gc_metadata(ccx: &mut CrateContext, llmod_id: &str) {\n     unsafe {\n         llvm::LLVMSetGlobalConstant(gc_metadata, True);\n         lib::llvm::SetLinkage(gc_metadata, lib::llvm::ExternalLinkage);\n-        ccx.module_data.insert(~\"_gc_module_metadata\", gc_metadata);\n+\n+        let mut module_data = ccx.module_data.borrow_mut();\n+        module_data.get().insert(~\"_gc_module_metadata\", gc_metadata);\n     }\n }\n \n pub fn create_module_map(ccx: &mut CrateContext) -> (ValueRef, uint) {\n     let str_slice_type = Type::struct_([Type::i8p(), ccx.int_type], false);\n     let elttype = Type::struct_([str_slice_type, ccx.int_type], false);\n-    let maptype = Type::array(&elttype, ccx.module_data.len() as u64);\n+    let maptype = {\n+        let module_data = ccx.module_data.borrow();\n+        Type::array(&elttype, module_data.get().len() as u64)\n+    };\n     let map = \"_rust_mod_map\".with_c_str(|buf| {\n         unsafe {\n             llvm::LLVMAddGlobal(ccx.llmod, maptype.to_ref(), buf)\n@@ -2936,16 +2941,22 @@ pub fn create_module_map(ccx: &mut CrateContext) -> (ValueRef, uint) {\n     // This is not ideal, but the borrow checker doesn't\n     // like the multiple borrows. At least, it doesn't\n     // like them on the current snapshot. (2013-06-14)\n-    let mut keys = ~[];\n-    for (k, _) in ccx.module_data.iter() {\n-        keys.push(k.to_managed());\n-    }\n+    let keys = {\n+        let mut keys = ~[];\n+        let module_data = ccx.module_data.borrow();\n+        for (k, _) in module_data.get().iter() {\n+            keys.push(k.to_managed());\n+        }\n+        keys\n+    };\n \n     for key in keys.iter() {\n-            let val = *ccx.module_data.find_equiv(key).unwrap();\n+            let llestrval = C_estr_slice(ccx, *key);\n+            let module_data = ccx.module_data.borrow();\n+            let val = *module_data.get().find_equiv(key).unwrap();\n             let v_ptr = p2i(ccx, val);\n             let elt = C_struct([\n-                C_estr_slice(ccx, *key),\n+                llestrval,\n                 v_ptr\n             ], false);\n             elts.push(elt);"}, {"sha": "4474890cc759ef26c32b3f4c8500e0c895c937c7", "filename": "src/librustc/middle/trans/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8c194a013651869ae44440e319b28dabfaa08f50/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c194a013651869ae44440e319b28dabfaa08f50/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs?ref=8c194a013651869ae44440e319b28dabfaa08f50", "patch": "@@ -91,7 +91,7 @@ pub struct CrateContext {\n \n      impl_method_cache: RefCell<HashMap<(ast::DefId, ast::Name), ast::DefId>>,\n \n-     module_data: HashMap<~str, ValueRef>,\n+     module_data: RefCell<HashMap<~str, ValueRef>>,\n      lltypes: HashMap<ty::t, Type>,\n      llsizingtypes: HashMap<ty::t, Type>,\n      adt_reprs: HashMap<ty::t, @adt::Repr>,\n@@ -202,7 +202,7 @@ impl CrateContext {\n                   const_values: RefCell::new(HashMap::new()),\n                   extern_const_values: RefCell::new(HashMap::new()),\n                   impl_method_cache: RefCell::new(HashMap::new()),\n-                  module_data: HashMap::new(),\n+                  module_data: RefCell::new(HashMap::new()),\n                   lltypes: HashMap::new(),\n                   llsizingtypes: HashMap::new(),\n                   adt_reprs: HashMap::new(),"}, {"sha": "388ba68b4d5b6bea9d03a7eaf59355832e883f22", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8c194a013651869ae44440e319b28dabfaa08f50/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c194a013651869ae44440e319b28dabfaa08f50/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=8c194a013651869ae44440e319b28dabfaa08f50", "patch": "@@ -1813,8 +1813,15 @@ pub fn trans_log_level(bcx: @Block) -> DatumBlock {\n         (modpath, modname)\n     };\n \n-    let global = if ccx.module_data.contains_key(&modname) {\n-        ccx.module_data.get_copy(&modname)\n+    let module_data_exists;\n+    {\n+        let module_data = ccx.module_data.borrow();\n+        module_data_exists = module_data.get().contains_key(&modname);\n+    }\n+\n+    let global = if module_data_exists {\n+        let mut module_data = ccx.module_data.borrow_mut();\n+        module_data.get().get_copy(&modname)\n     } else {\n         let s = link::mangle_internal_name_by_path_and_seq(\n             ccx, modpath, \"loglevel\");\n@@ -1827,8 +1834,11 @@ pub fn trans_log_level(bcx: @Block) -> DatumBlock {\n             llvm::LLVMSetInitializer(global, C_null(Type::i32()));\n             lib::llvm::SetLinkage(global, lib::llvm::InternalLinkage);\n         }\n-        ccx.module_data.insert(modname, global);\n-        global\n+        {\n+            let mut module_data = ccx.module_data.borrow_mut();\n+            module_data.get().insert(modname, global);\n+            global\n+        }\n     };\n \n     return immediate_rvalue_bcx(bcx, Load(bcx, global), ty::mk_u32());"}]}