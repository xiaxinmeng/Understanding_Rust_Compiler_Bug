{"sha": "7dc466f91f3f6bf44d72430bf760277cd4eebf3a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkYzQ2NmY5MWYzZjZiZjQ0ZDcyNDMwYmY3NjAyNzdjZDRlZWJmM2E=", "commit": {"author": {"name": "Olivier Saut", "email": "osaut@airpost.net", "date": "2013-05-17T21:11:18Z"}, "committer": {"name": "Olivier Saut", "email": "osaut@airpost.net", "date": "2013-05-17T21:11:18Z"}, "message": "Correct the example given for a future, add punctuation where necessary", "tree": {"sha": "2eb583d3a49e0cac33b43738629bde4d45ef4677", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2eb583d3a49e0cac33b43738629bde4d45ef4677"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7dc466f91f3f6bf44d72430bf760277cd4eebf3a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7dc466f91f3f6bf44d72430bf760277cd4eebf3a", "html_url": "https://github.com/rust-lang/rust/commit/7dc466f91f3f6bf44d72430bf760277cd4eebf3a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7dc466f91f3f6bf44d72430bf760277cd4eebf3a/comments", "author": null, "committer": null, "parents": [{"sha": "ff081980e7b5005d3e06ea539819ad98656d4a9b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff081980e7b5005d3e06ea539819ad98656d4a9b", "html_url": "https://github.com/rust-lang/rust/commit/ff081980e7b5005d3e06ea539819ad98656d4a9b"}], "stats": {"total": 14, "additions": 8, "deletions": 6}, "files": [{"sha": "2ae61293a8fdd56deb87ad67182665373a21c0e6", "filename": "src/libstd/future.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7dc466f91f3f6bf44d72430bf760277cd4eebf3a/src%2Flibstd%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dc466f91f3f6bf44d72430bf760277cd4eebf3a/src%2Flibstd%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffuture.rs?ref=7dc466f91f3f6bf44d72430bf760277cd4eebf3a", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -15,9 +15,11 @@\n  * # Example\n  *\n  * ~~~\n- * let delayed_fib = future::spawn {|| fib(5000) };\n+ * # fn fib(n: uint) -> uint {42};\n+ * # fn make_a_sandwich() {};  \n+ * let mut delayed_fib = std::future::spawn (|| fib(5000) );\n  * make_a_sandwich();\n- * io::println(fmt!(\"fib(5000) = %?\", delayed_fib.get()))\n+ * println(fmt!(\"fib(5000) = %?\", delayed_fib.get()))\n  * ~~~\n  */\n \n@@ -51,7 +53,7 @@ priv enum FutureState<A> {\n /// Methods on the `future` type\n pub impl<A:Copy> Future<A> {\n     fn get(&mut self) -> A {\n-        //! Get the value of the future\n+        //! Get the value of the future.\n         *(self.get_ref())\n     }\n }\n@@ -87,7 +89,7 @@ pub impl<A> Future<A> {\n \n pub fn from_value<A>(val: A) -> Future<A> {\n     /*!\n-     * Create a future from a value\n+     * Create a future from a value.\n      *\n      * The value is immediately available and calling `get` later will\n      * not block.\n@@ -117,7 +119,7 @@ pub fn from_fn<A>(f: ~fn() -> A) -> Future<A> {\n     /*!\n      * Create a future from a function.\n      *\n-     * The first time that the value is requested it will be retreived by\n+     * The first time that the value is requested it will be retrieved by\n      * calling the function.  Note that this function is a local\n      * function. It is not spawned into another task.\n      */"}]}