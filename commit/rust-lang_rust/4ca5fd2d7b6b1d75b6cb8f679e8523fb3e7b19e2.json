{"sha": "4ca5fd2d7b6b1d75b6cb8f679e8523fb3e7b19e2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjYTVmZDJkN2I2YjFkNzViNmNiOGY2NzllODUyM2ZiM2U3YjE5ZTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-20T05:30:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-20T05:30:12Z"}, "message": "Auto merge of #71232 - eddyb:print-const-adts, r=oli-obk\n\nty/print: pretty-print constant aggregates (arrays, tuples and ADTs).\n\nOddly enough, we don't have any UI tests showing this off in types, only `mir-opt` tests.\nHowever, the pretty form should show up in the test output diff of #71018, if this PR is merged first.\n\n<hr/>\n\nExamples of before/after:\n|`Option<bool>`|\n|:-:|\n|`{transmute(0x01): std::option::Option<bool>}`|\n| :sparkles: \u2193\u2193\u2193 :sparkles: |\n|`std::option::Option::<bool>::Some(true)`|\n\n| `RawVec<u32>` |\n|:-:|\n| `ByRef { alloc: Allocation { bytes: [4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), undef_mask: UndefMask { blocks: [65535], len: Size { raw: 16 } }, size: Size { raw: 16 }, align: Align { pow2: 3 }, mutability: Not, extra: () }, offset: Size { raw: 0 } }: alloc::raw_vec::RawVec::<u32>`|\n| :sparkles: \u2193\u2193\u2193 :sparkles: |\n|`alloc::raw_vec::RawVec::<u32> { ptr: std::ptr::Unique::<u32> { pointer: {0x4 as *const u32}, _marker: std::marker::PhantomData::<u32> }, cap: 0usize, alloc: std::alloc::Global }`|\n\n<hr/>\n\nThis PR is a prerequisite for #61486, *sort of*, in that we need to be able to pretty-print values in order to even consider how we might mangle them.\nWe still don't have pretty-printing for constants of reference types, @oli-obk has the necessary support logic in a PR but I didn't want to interfere with that.\n\n<hr/>\n\nEach commit should be reviewed separately, as I've fixed a couple deficiencies along the way.\n\nr? @oli-obk cc @rust-lang/wg-mir-opt @varkor @yodaldevoid", "tree": {"sha": "15895a5eccc7ab4a7124fc9124b47f778618dc56", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/15895a5eccc7ab4a7124fc9124b47f778618dc56"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ca5fd2d7b6b1d75b6cb8f679e8523fb3e7b19e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ca5fd2d7b6b1d75b6cb8f679e8523fb3e7b19e2", "html_url": "https://github.com/rust-lang/rust/commit/4ca5fd2d7b6b1d75b6cb8f679e8523fb3e7b19e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ca5fd2d7b6b1d75b6cb8f679e8523fb3e7b19e2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b2f8dbba39dd4167f22a7026674a585c3d907d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b2f8dbba39dd4167f22a7026674a585c3d907d8", "html_url": "https://github.com/rust-lang/rust/commit/9b2f8dbba39dd4167f22a7026674a585c3d907d8"}, {"sha": "eccb28e3d67460f77331eb5ecceab36181831946", "url": "https://api.github.com/repos/rust-lang/rust/commits/eccb28e3d67460f77331eb5ecceab36181831946", "html_url": "https://github.com/rust-lang/rust/commit/eccb28e3d67460f77331eb5ecceab36181831946"}], "stats": {"total": 231, "additions": 128, "deletions": 103}, "files": [{"sha": "70ae2fd8ac9fdf09c20ef931654e10c5b3d11456", "filename": "src/librustc_middle/mir/mod.rs", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/4ca5fd2d7b6b1d75b6cb8f679e8523fb3e7b19e2/src%2Flibrustc_middle%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ca5fd2d7b6b1d75b6cb8f679e8523fb3e7b19e2/src%2Flibrustc_middle%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Fmod.rs?ref=4ca5fd2d7b6b1d75b6cb8f679e8523fb3e7b19e2", "patch": "@@ -2242,39 +2242,41 @@ impl<'tcx> Debug for Rvalue<'tcx> {\n             }\n \n             Aggregate(ref kind, ref places) => {\n-                fn fmt_tuple(fmt: &mut Formatter<'_>, places: &[Operand<'_>]) -> fmt::Result {\n-                    let mut tuple_fmt = fmt.debug_tuple(\"\");\n+                let fmt_tuple = |fmt: &mut Formatter<'_>, name: &str| {\n+                    let mut tuple_fmt = fmt.debug_tuple(name);\n                     for place in places {\n                         tuple_fmt.field(place);\n                     }\n                     tuple_fmt.finish()\n-                }\n+                };\n \n                 match **kind {\n                     AggregateKind::Array(_) => write!(fmt, \"{:?}\", places),\n \n-                    AggregateKind::Tuple => match places.len() {\n-                        0 => write!(fmt, \"()\"),\n-                        1 => write!(fmt, \"({:?},)\", places[0]),\n-                        _ => fmt_tuple(fmt, places),\n-                    },\n+                    AggregateKind::Tuple => {\n+                        if places.is_empty() {\n+                            write!(fmt, \"()\")\n+                        } else {\n+                            fmt_tuple(fmt, \"\")\n+                        }\n+                    }\n \n                     AggregateKind::Adt(adt_def, variant, substs, _user_ty, _) => {\n                         let variant_def = &adt_def.variants[variant];\n \n-                        let f = &mut *fmt;\n-                        ty::tls::with(|tcx| {\n+                        let name = ty::tls::with(|tcx| {\n+                            let mut name = String::new();\n                             let substs = tcx.lift(&substs).expect(\"could not lift for printing\");\n-                            FmtPrinter::new(tcx, f, Namespace::ValueNS)\n+                            FmtPrinter::new(tcx, &mut name, Namespace::ValueNS)\n                                 .print_def_path(variant_def.def_id, substs)?;\n-                            Ok(())\n+                            Ok(name)\n                         })?;\n \n                         match variant_def.ctor_kind {\n-                            CtorKind::Const => Ok(()),\n-                            CtorKind::Fn => fmt_tuple(fmt, places),\n+                            CtorKind::Const => fmt.write_str(&name),\n+                            CtorKind::Fn => fmt_tuple(fmt, &name),\n                             CtorKind::Fictive => {\n-                                let mut struct_fmt = fmt.debug_struct(\"\");\n+                                let mut struct_fmt = fmt.debug_struct(&name);\n                                 for (field, place) in variant_def.fields.iter().zip(places) {\n                                     struct_fmt.field(&field.ident.as_str(), place);\n                                 }"}, {"sha": "1b94966c3477d5b46a3a21d0c564fe2824b68586", "filename": "src/librustc_middle/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ca5fd2d7b6b1d75b6cb8f679e8523fb3e7b19e2/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ca5fd2d7b6b1d75b6cb8f679e8523fb3e7b19e2/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fquery%2Fmod.rs?ref=4ca5fd2d7b6b1d75b6cb8f679e8523fb3e7b19e2", "patch": "@@ -574,7 +574,7 @@ rustc_queries! {\n             desc { \"extract field of const\" }\n         }\n \n-        /// Destructure a constant ADT or array into its variant indent and its\n+        /// Destructure a constant ADT or array into its variant index and its\n         /// field values.\n         query destructure_const(\n             key: ty::ParamEnvAnd<'tcx, &'tcx ty::Const<'tcx>>"}, {"sha": "a8825e8fc614eec845908264cdeb46da86796b2d", "filename": "src/librustc_middle/ty/print/pretty.rs", "status": "modified", "additions": 75, "deletions": 52, "changes": 127, "blob_url": "https://github.com/rust-lang/rust/blob/4ca5fd2d7b6b1d75b6cb8f679e8523fb3e7b19e2/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ca5fd2d7b6b1d75b6cb8f679e8523fb3e7b19e2/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs?ref=4ca5fd2d7b6b1d75b6cb8f679e8523fb3e7b19e2", "patch": "@@ -9,7 +9,7 @@ use rustc_apfloat::Float;\n use rustc_ast::ast;\n use rustc_attr::{SignedInt, UnsignedInt};\n use rustc_hir as hir;\n-use rustc_hir::def::{DefKind, Namespace};\n+use rustc_hir::def::{CtorKind, DefKind, Namespace};\n use rustc_hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_hir::definitions::{DefPathData, DisambiguatedDefPathData};\n use rustc_span::symbol::{kw, Symbol};\n@@ -498,16 +498,9 @@ pub trait PrettyPrinter<'tcx>:\n             }\n             ty::Never => p!(write(\"!\")),\n             ty::Tuple(ref tys) => {\n-                p!(write(\"(\"));\n-                let mut tys = tys.iter();\n-                if let Some(&ty) = tys.next() {\n-                    p!(print(ty), write(\",\"));\n-                    if let Some(&ty) = tys.next() {\n-                        p!(write(\" \"), print(ty));\n-                        for &ty in tys {\n-                            p!(write(\", \"), print(ty));\n-                        }\n-                    }\n+                p!(write(\"(\"), comma_sep(tys.iter().copied()));\n+                if tys.len() == 1 {\n+                    p!(write(\",\"));\n                 }\n                 p!(write(\")\"))\n             }\n@@ -570,15 +563,10 @@ pub trait PrettyPrinter<'tcx>:\n                     let def_key = self.tcx().def_key(def_id);\n                     if let Some(name) = def_key.disambiguated_data.data.get_opt_name() {\n                         p!(write(\"{}\", name));\n-                        let mut substs = substs.iter();\n                         // FIXME(eddyb) print this with `print_def_path`.\n-                        if let Some(first) = substs.next() {\n-                            p!(write(\"::<\"));\n-                            p!(print(first));\n-                            for subst in substs {\n-                                p!(write(\", \"), print(subst));\n-                            }\n-                            p!(write(\">\"));\n+                        if !substs.is_empty() {\n+                            p!(write(\"::\"));\n+                            p!(generic_delimiters(|cx| cx.comma_sep(substs.iter().copied())));\n                         }\n                         return Ok(self);\n                     }\n@@ -850,16 +838,12 @@ pub trait PrettyPrinter<'tcx>:\n     ) -> Result<Self, Self::Error> {\n         define_scoped_cx!(self);\n \n-        p!(write(\"(\"));\n-        let mut inputs = inputs.iter();\n-        if let Some(&ty) = inputs.next() {\n-            p!(print(ty));\n-            for &ty in inputs {\n-                p!(write(\", \"), print(ty));\n-            }\n-            if c_variadic {\n-                p!(write(\", ...\"));\n+        p!(write(\"(\"), comma_sep(inputs.iter().copied()));\n+        if c_variadic {\n+            if !inputs.is_empty() {\n+                p!(write(\", \"));\n             }\n+            p!(write(\"...\"));\n         }\n         p!(write(\")\"));\n         if !output.is_unit() {\n@@ -1050,19 +1034,6 @@ pub trait PrettyPrinter<'tcx>:\n             }\n             // For function type zsts just printing the path is enough\n             (Scalar::Raw { size: 0, .. }, ty::FnDef(d, s)) => p!(print_value_path(*d, s)),\n-            // Empty tuples are frequently occurring, so don't print the fallback.\n-            (Scalar::Raw { size: 0, .. }, ty::Tuple(ts)) if ts.is_empty() => p!(write(\"()\")),\n-            // Zero element arrays have a trivial representation.\n-            (\n-                Scalar::Raw { size: 0, .. },\n-                ty::Array(\n-                    _,\n-                    ty::Const {\n-                        val: ty::ConstKind::Value(ConstValue::Scalar(Scalar::Raw { data: 0, .. })),\n-                        ..\n-                    },\n-                ),\n-            ) => p!(write(\"[]\")),\n             // Nontrivial types with scalar bit representation\n             (Scalar::Raw { data, size }, _) => {\n                 let print = |mut this: Self| {\n@@ -1131,14 +1102,14 @@ pub trait PrettyPrinter<'tcx>:\n         define_scoped_cx!(self);\n \n         if self.tcx().sess.verbose() {\n-            p!(write(\"ConstValue({:?}: {:?})\", ct, ty));\n+            p!(write(\"ConstValue({:?}: \", ct), print(ty), write(\")\"));\n             return Ok(self);\n         }\n \n         let u8_type = self.tcx().types.u8;\n \n         match (ct, &ty.kind) {\n-            (ConstValue::Scalar(scalar), _) => self.pretty_print_const_scalar(scalar, ty, print_ty),\n+            // Byte/string slices, printed as (byte) string literals.\n             (\n                 ConstValue::Slice { data, start, end },\n                 ty::Ref(_, ty::TyS { kind: ty::Slice(t), .. }, _),\n@@ -1172,6 +1143,66 @@ pub trait PrettyPrinter<'tcx>:\n                 p!(pretty_print_byte_str(byte_str));\n                 Ok(self)\n             }\n+\n+            // Aggregates, printed as array/tuple/struct/variant construction syntax.\n+            //\n+            // NB: the `has_param_types_or_consts` check ensures that we can use\n+            // the `destructure_const` query with an empty `ty::ParamEnv` without\n+            // introducing ICEs (e.g. via `layout_of`) from missing bounds.\n+            // E.g. `transmute([0usize; 2]): (u8, *mut T)` needs to know `T: Sized`\n+            // to be able to destructure the tuple into `(0u8, *mut T)\n+            //\n+            // FIXME(eddyb) for `--emit=mir`/`-Z dump-mir`, we should provide the\n+            // correct `ty::ParamEnv` to allow printing *all* constant values.\n+            (_, ty::Array(..) | ty::Tuple(..) | ty::Adt(..)) if !ty.has_param_types_or_consts() => {\n+                let contents = self.tcx().destructure_const(\n+                    ty::ParamEnv::reveal_all()\n+                        .and(self.tcx().mk_const(ty::Const { val: ty::ConstKind::Value(ct), ty })),\n+                );\n+                let fields = contents.fields.iter().copied();\n+\n+                match ty.kind {\n+                    ty::Array(..) => {\n+                        p!(write(\"[\"), comma_sep(fields), write(\"]\"));\n+                    }\n+                    ty::Tuple(..) => {\n+                        p!(write(\"(\"), comma_sep(fields));\n+                        if contents.fields.len() == 1 {\n+                            p!(write(\",\"));\n+                        }\n+                        p!(write(\")\"));\n+                    }\n+                    ty::Adt(def, substs) => {\n+                        let variant_def = &def.variants[contents.variant];\n+                        p!(print_value_path(variant_def.def_id, substs));\n+\n+                        match variant_def.ctor_kind {\n+                            CtorKind::Const => {}\n+                            CtorKind::Fn => {\n+                                p!(write(\"(\"), comma_sep(fields), write(\")\"));\n+                            }\n+                            CtorKind::Fictive => {\n+                                p!(write(\" {{ \"));\n+                                let mut first = true;\n+                                for (field_def, field) in variant_def.fields.iter().zip(fields) {\n+                                    if !first {\n+                                        p!(write(\", \"));\n+                                    }\n+                                    p!(write(\"{}: \", field_def.ident), print(field));\n+                                    first = false;\n+                                }\n+                                p!(write(\" }}\"));\n+                            }\n+                        }\n+                    }\n+                    _ => unreachable!(),\n+                }\n+\n+                Ok(self)\n+            }\n+\n+            (ConstValue::Scalar(scalar), _) => self.pretty_print_const_scalar(scalar, ty, print_ty),\n+\n             // FIXME(oli-obk): also pretty print arrays and other aggregate constants by reading\n             // their fields instead of just dumping the memory.\n             _ => {\n@@ -1910,15 +1941,7 @@ define_print_and_forward_display! {\n     (self, cx):\n \n     &'tcx ty::List<Ty<'tcx>> {\n-        p!(write(\"{{\"));\n-        let mut tys = self.iter();\n-        if let Some(&ty) = tys.next() {\n-            p!(print(ty));\n-            for &ty in tys {\n-                p!(write(\", \"), print(ty));\n-            }\n-        }\n-        p!(write(\"}}\"))\n+        p!(write(\"{{\"), comma_sep(self.iter().copied()), write(\"}}\"))\n     }\n \n     ty::TypeAndMut<'tcx> {"}, {"sha": "753c64d6c32982388dbbb00c891d898c1082fd10", "filename": "src/test/mir-opt/const_prop/discriminant/32bit/rustc.main.ConstProp.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ca5fd2d7b6b1d75b6cb8f679e8523fb3e7b19e2/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant%2F32bit%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4ca5fd2d7b6b1d75b6cb8f679e8523fb3e7b19e2/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant%2F32bit%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant%2F32bit%2Frustc.main.ConstProp.diff?ref=4ca5fd2d7b6b1d75b6cb8f679e8523fb3e7b19e2", "patch": "@@ -15,8 +15,8 @@\n           StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/discriminant.rs:6:9: 6:10\n           StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/discriminant.rs:6:13: 6:64\n           StorageLive(_3);                 // bb0[2]: scope 0 at $DIR/discriminant.rs:6:34: 6:44\n--         _3 = std::option::Option::<bool>::Some(const true,); // bb0[3]: scope 0 at $DIR/discriminant.rs:6:34: 6:44\n-+         _3 = const {transmute(0x01): std::option::Option<bool>}; // bb0[3]: scope 0 at $DIR/discriminant.rs:6:34: 6:44\n+-         _3 = std::option::Option::<bool>::Some(const true); // bb0[3]: scope 0 at $DIR/discriminant.rs:6:34: 6:44\n++         _3 = const std::option::Option::<bool>::Some(true); // bb0[3]: scope 0 at $DIR/discriminant.rs:6:34: 6:44\n                                            // ty::Const\n -                                          // + ty: bool\n +                                          // + ty: std::option::Option<bool>"}, {"sha": "1d8e945f87a6d09a211cf58928b70a32edb46d91", "filename": "src/test/mir-opt/const_prop/discriminant/64bit/rustc.main.ConstProp.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ca5fd2d7b6b1d75b6cb8f679e8523fb3e7b19e2/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant%2F64bit%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4ca5fd2d7b6b1d75b6cb8f679e8523fb3e7b19e2/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant%2F64bit%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant%2F64bit%2Frustc.main.ConstProp.diff?ref=4ca5fd2d7b6b1d75b6cb8f679e8523fb3e7b19e2", "patch": "@@ -15,8 +15,8 @@\n           StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/discriminant.rs:6:9: 6:10\n           StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/discriminant.rs:6:13: 6:64\n           StorageLive(_3);                 // bb0[2]: scope 0 at $DIR/discriminant.rs:6:34: 6:44\n--         _3 = std::option::Option::<bool>::Some(const true,); // bb0[3]: scope 0 at $DIR/discriminant.rs:6:34: 6:44\n-+         _3 = const {transmute(0x01): std::option::Option<bool>}; // bb0[3]: scope 0 at $DIR/discriminant.rs:6:34: 6:44\n+-         _3 = std::option::Option::<bool>::Some(const true); // bb0[3]: scope 0 at $DIR/discriminant.rs:6:34: 6:44\n++         _3 = const std::option::Option::<bool>::Some(true); // bb0[3]: scope 0 at $DIR/discriminant.rs:6:34: 6:44\n                                            // ty::Const\n -                                          // + ty: bool\n +                                          // + ty: std::option::Option<bool>"}, {"sha": "3256e59e3eba9e5095b2d25941f5013fba479ce9", "filename": "src/test/mir-opt/deaggregator_test_enum_2/rustc.test1.Deaggregator.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ca5fd2d7b6b1d75b6cb8f679e8523fb3e7b19e2/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_enum_2%2Frustc.test1.Deaggregator.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4ca5fd2d7b6b1d75b6cb8f679e8523fb3e7b19e2/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_enum_2%2Frustc.test1.Deaggregator.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_enum_2%2Frustc.test1.Deaggregator.diff?ref=4ca5fd2d7b6b1d75b6cb8f679e8523fb3e7b19e2", "patch": "@@ -18,7 +18,7 @@\n       bb1: {\n           StorageLive(_5);                 // bb1[0]: scope 0 at $DIR/deaggregator_test_enum_2.rs:13:16: 13:17\n           _5 = _2;                         // bb1[1]: scope 0 at $DIR/deaggregator_test_enum_2.rs:13:16: 13:17\n--         _0 = Foo::B(move _5,);           // bb1[2]: scope 0 at $DIR/deaggregator_test_enum_2.rs:13:9: 13:18\n+-         _0 = Foo::B(move _5);            // bb1[2]: scope 0 at $DIR/deaggregator_test_enum_2.rs:13:9: 13:18\n -         StorageDead(_5);                 // bb1[3]: scope 0 at $DIR/deaggregator_test_enum_2.rs:13:17: 13:18\n -         goto -> bb3;                     // bb1[4]: scope 0 at $DIR/deaggregator_test_enum_2.rs:10:5: 14:6\n +         ((_0 as B).0: i32) = move _5;    // bb1[2]: scope 0 at $DIR/deaggregator_test_enum_2.rs:13:9: 13:18\n@@ -30,7 +30,7 @@\n       bb2: {\n           StorageLive(_4);                 // bb2[0]: scope 0 at $DIR/deaggregator_test_enum_2.rs:11:16: 11:17\n           _4 = _2;                         // bb2[1]: scope 0 at $DIR/deaggregator_test_enum_2.rs:11:16: 11:17\n--         _0 = Foo::A(move _4,);           // bb2[2]: scope 0 at $DIR/deaggregator_test_enum_2.rs:11:9: 11:18\n+-         _0 = Foo::A(move _4);            // bb2[2]: scope 0 at $DIR/deaggregator_test_enum_2.rs:11:9: 11:18\n -         StorageDead(_4);                 // bb2[3]: scope 0 at $DIR/deaggregator_test_enum_2.rs:11:17: 11:18\n -         goto -> bb3;                     // bb2[4]: scope 0 at $DIR/deaggregator_test_enum_2.rs:10:5: 14:6\n +         ((_0 as A).0: i32) = move _4;    // bb2[2]: scope 0 at $DIR/deaggregator_test_enum_2.rs:11:9: 11:18"}, {"sha": "7d3ae6a16b2a895f9b441a0d8bd2fe7c0000594c", "filename": "src/test/mir-opt/deaggregator_test_multiple/rustc.test.Deaggregator.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ca5fd2d7b6b1d75b6cb8f679e8523fb3e7b19e2/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_multiple%2Frustc.test.Deaggregator.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4ca5fd2d7b6b1d75b6cb8f679e8523fb3e7b19e2/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_multiple%2Frustc.test.Deaggregator.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_multiple%2Frustc.test.Deaggregator.diff?ref=4ca5fd2d7b6b1d75b6cb8f679e8523fb3e7b19e2", "patch": "@@ -13,12 +13,12 @@\n           StorageLive(_2);                 // bb0[0]: scope 0 at $DIR/deaggregator_test_multiple.rs:10:6: 10:15\n           StorageLive(_3);                 // bb0[1]: scope 0 at $DIR/deaggregator_test_multiple.rs:10:13: 10:14\n           _3 = _1;                         // bb0[2]: scope 0 at $DIR/deaggregator_test_multiple.rs:10:13: 10:14\n--         _2 = Foo::A(move _3,);           // bb0[3]: scope 0 at $DIR/deaggregator_test_multiple.rs:10:6: 10:15\n+-         _2 = Foo::A(move _3);            // bb0[3]: scope 0 at $DIR/deaggregator_test_multiple.rs:10:6: 10:15\n -         StorageDead(_3);                 // bb0[4]: scope 0 at $DIR/deaggregator_test_multiple.rs:10:14: 10:15\n -         StorageLive(_4);                 // bb0[5]: scope 0 at $DIR/deaggregator_test_multiple.rs:10:17: 10:26\n -         StorageLive(_5);                 // bb0[6]: scope 0 at $DIR/deaggregator_test_multiple.rs:10:24: 10:25\n -         _5 = _1;                         // bb0[7]: scope 0 at $DIR/deaggregator_test_multiple.rs:10:24: 10:25\n--         _4 = Foo::A(move _5,);           // bb0[8]: scope 0 at $DIR/deaggregator_test_multiple.rs:10:17: 10:26\n+-         _4 = Foo::A(move _5);            // bb0[8]: scope 0 at $DIR/deaggregator_test_multiple.rs:10:17: 10:26\n -         StorageDead(_5);                 // bb0[9]: scope 0 at $DIR/deaggregator_test_multiple.rs:10:25: 10:26\n -         _0 = [move _2, move _4];         // bb0[10]: scope 0 at $DIR/deaggregator_test_multiple.rs:10:5: 10:27\n -         StorageDead(_4);                 // bb0[11]: scope 0 at $DIR/deaggregator_test_multiple.rs:10:26: 10:27"}, {"sha": "5d5f9dcc61d79594e650f585795b1180b863d3d7", "filename": "src/test/mir-opt/generator-storage-dead-unwind/rustc.main-{{closure}}.StateTransform.before.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ca5fd2d7b6b1d75b6cb8f679e8523fb3e7b19e2/src%2Ftest%2Fmir-opt%2Fgenerator-storage-dead-unwind%2Frustc.main-%7B%7Bclosure%7D%7D.StateTransform.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4ca5fd2d7b6b1d75b6cb8f679e8523fb3e7b19e2/src%2Ftest%2Fmir-opt%2Fgenerator-storage-dead-unwind%2Frustc.main-%7B%7Bclosure%7D%7D.StateTransform.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgenerator-storage-dead-unwind%2Frustc.main-%7B%7Bclosure%7D%7D.StateTransform.before.mir?ref=4ca5fd2d7b6b1d75b6cb8f679e8523fb3e7b19e2", "patch": "@@ -21,15 +21,15 @@ yields ()\n \n     bb0: {\n         StorageLive(_3);                 // bb0[0]: scope 0 at $DIR/generator-storage-dead-unwind.rs:23:13: 23:14\n-        _3 = Foo(const 5i32,);           // bb0[1]: scope 0 at $DIR/generator-storage-dead-unwind.rs:23:17: 23:23\n+        _3 = Foo(const 5i32);            // bb0[1]: scope 0 at $DIR/generator-storage-dead-unwind.rs:23:17: 23:23\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000005))\n                                          // mir::Constant\n                                          // + span: $DIR/generator-storage-dead-unwind.rs:23:21: 23:22\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000005)) }\n         StorageLive(_4);                 // bb0[2]: scope 1 at $DIR/generator-storage-dead-unwind.rs:24:13: 24:14\n-        _4 = Bar(const 6i32,);           // bb0[3]: scope 1 at $DIR/generator-storage-dead-unwind.rs:24:17: 24:23\n+        _4 = Bar(const 6i32);            // bb0[3]: scope 1 at $DIR/generator-storage-dead-unwind.rs:24:17: 24:23\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000006))"}, {"sha": "dbab6ceffdcfff849f1a1e8511594800902c99bf", "filename": "src/test/mir-opt/generator-tiny/rustc.main-{{closure}}.generator_resume.0.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ca5fd2d7b6b1d75b6cb8f679e8523fb3e7b19e2/src%2Ftest%2Fmir-opt%2Fgenerator-tiny%2Frustc.main-%7B%7Bclosure%7D%7D.generator_resume.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4ca5fd2d7b6b1d75b6cb8f679e8523fb3e7b19e2/src%2Ftest%2Fmir-opt%2Fgenerator-tiny%2Frustc.main-%7B%7Bclosure%7D%7D.generator_resume.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgenerator-tiny%2Frustc.main-%7B%7Bclosure%7D%7D.generator_resume.0.mir?ref=4ca5fd2d7b6b1d75b6cb8f679e8523fb3e7b19e2", "patch": "@@ -34,7 +34,7 @@ fn main::{{closure}}#0(_1: std::pin::Pin<&mut [generator@$DIR/generator-tiny.rs:\n         StorageLive(_6);                 // bb2[0]: scope 1 at $DIR/generator-tiny.rs:21:13: 21:18\n         StorageLive(_7);                 // bb2[1]: scope 1 at $DIR/generator-tiny.rs:21:13: 21:18\n         _7 = ();                         // bb2[2]: scope 1 at $DIR/generator-tiny.rs:21:13: 21:18\n-        _0 = std::ops::GeneratorState::<(), ()>::Yielded(move _7,); // bb2[3]: scope 1 at $DIR/generator-tiny.rs:21:13: 21:18\n+        _0 = std::ops::GeneratorState::<(), ()>::Yielded(move _7); // bb2[3]: scope 1 at $DIR/generator-tiny.rs:21:13: 21:18\n         discriminant((*(_1.0: &mut [generator@$DIR/generator-tiny.rs:18:16: 24:6 {u8, HasDrop, ()}]))) = 3; // bb2[4]: scope 1 at $DIR/generator-tiny.rs:21:13: 21:18\n         return;                          // bb2[5]: scope 1 at $DIR/generator-tiny.rs:21:13: 21:18\n     }"}, {"sha": "7f2f7cdb176682a6b69fee9a6ac6c159d20e114d", "filename": "src/test/mir-opt/inline/inline-into-box-place/32bit/rustc.main.Inline.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ca5fd2d7b6b1d75b6cb8f679e8523fb3e7b19e2/src%2Ftest%2Fmir-opt%2Finline%2Finline-into-box-place%2F32bit%2Frustc.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4ca5fd2d7b6b1d75b6cb8f679e8523fb3e7b19e2/src%2Ftest%2Fmir-opt%2Finline%2Finline-into-box-place%2F32bit%2Frustc.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline-into-box-place%2F32bit%2Frustc.main.Inline.diff?ref=4ca5fd2d7b6b1d75b6cb8f679e8523fb3e7b19e2", "patch": "@@ -19,7 +19,7 @@\n           _2 = Box(std::vec::Vec<u32>);    // bb0[2]: scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n -         (*_2) = const std::vec::Vec::<u32>::new() -> [return: bb2, unwind: bb4]; // bb0[3]: scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n +         _4 = &mut (*_2);                 // bb0[3]: scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n-+         ((*_4).0: alloc::raw_vec::RawVec<u32>) = const ByRef { alloc: Allocation { bytes: [4, 0, 0, 0, 0, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), undef_mask: UndefMask { blocks: [255], len: Size { raw: 8 } }, size: Size { raw: 8 }, align: Align { pow2: 2 }, mutability: Not, extra: () }, offset: Size { raw: 0 } }: alloc::raw_vec::RawVec::<u32>; // bb0[4]: scope 2 at $SRC_DIR/liballoc/vec.rs:LL:COL\n++         ((*_4).0: alloc::raw_vec::RawVec<u32>) = const alloc::raw_vec::RawVec::<u32> { ptr: std::ptr::Unique::<u32> { pointer: {0x4 as *const u32}, _marker: std::marker::PhantomData::<u32> }, cap: 0usize, alloc: std::alloc::Global }; // bb0[4]: scope 2 at $SRC_DIR/liballoc/vec.rs:LL:COL\n                                            // ty::Const\n -                                          // + ty: fn() -> std::vec::Vec<u32> {std::vec::Vec::<u32>::new}\n -                                          // + val: Value(Scalar(<ZST>))"}, {"sha": "b968b33ac5274d42c7f0a90d063ab5021469f09b", "filename": "src/test/mir-opt/inline/inline-into-box-place/64bit/rustc.main.Inline.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ca5fd2d7b6b1d75b6cb8f679e8523fb3e7b19e2/src%2Ftest%2Fmir-opt%2Finline%2Finline-into-box-place%2F64bit%2Frustc.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4ca5fd2d7b6b1d75b6cb8f679e8523fb3e7b19e2/src%2Ftest%2Fmir-opt%2Finline%2Finline-into-box-place%2F64bit%2Frustc.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline-into-box-place%2F64bit%2Frustc.main.Inline.diff?ref=4ca5fd2d7b6b1d75b6cb8f679e8523fb3e7b19e2", "patch": "@@ -19,7 +19,7 @@\n           _2 = Box(std::vec::Vec<u32>);    // bb0[2]: scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n -         (*_2) = const std::vec::Vec::<u32>::new() -> [return: bb2, unwind: bb4]; // bb0[3]: scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n +         _4 = &mut (*_2);                 // bb0[3]: scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n-+         ((*_4).0: alloc::raw_vec::RawVec<u32>) = const ByRef { alloc: Allocation { bytes: [4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), undef_mask: UndefMask { blocks: [65535], len: Size { raw: 16 } }, size: Size { raw: 16 }, align: Align { pow2: 3 }, mutability: Not, extra: () }, offset: Size { raw: 0 } }: alloc::raw_vec::RawVec::<u32>; // bb0[4]: scope 2 at $SRC_DIR/liballoc/vec.rs:LL:COL\n++         ((*_4).0: alloc::raw_vec::RawVec<u32>) = const alloc::raw_vec::RawVec::<u32> { ptr: std::ptr::Unique::<u32> { pointer: {0x4 as *const u32}, _marker: std::marker::PhantomData::<u32> }, cap: 0usize, alloc: std::alloc::Global }; // bb0[4]: scope 2 at $SRC_DIR/liballoc/vec.rs:LL:COL\n                                            // ty::Const\n -                                          // + ty: fn() -> std::vec::Vec<u32> {std::vec::Vec::<u32>::new}\n -                                          // + val: Value(Scalar(<ZST>))"}, {"sha": "fe376f2a0486db05e019cb5915eb9940ea72e476", "filename": "src/test/mir-opt/issue-41888/rustc.main.ElaborateDrops.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ca5fd2d7b6b1d75b6cb8f679e8523fb3e7b19e2/src%2Ftest%2Fmir-opt%2Fissue-41888%2Frustc.main.ElaborateDrops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4ca5fd2d7b6b1d75b6cb8f679e8523fb3e7b19e2/src%2Ftest%2Fmir-opt%2Fissue-41888%2Frustc.main.ElaborateDrops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-41888%2Frustc.main.ElaborateDrops.after.mir?ref=4ca5fd2d7b6b1d75b6cb8f679e8523fb3e7b19e2", "patch": "@@ -80,7 +80,7 @@ fn main() -> () {\n         StorageLive(_3);                 // bb5[0]: scope 1 at $DIR/issue-41888.rs:9:13: 9:20\n         StorageLive(_4);                 // bb5[1]: scope 1 at $DIR/issue-41888.rs:9:18: 9:19\n         _4 = K;                          // bb5[2]: scope 1 at $DIR/issue-41888.rs:9:18: 9:19\n-        _3 = E::F(move _4,);             // bb5[3]: scope 1 at $DIR/issue-41888.rs:9:13: 9:20\n+        _3 = E::F(move _4);              // bb5[3]: scope 1 at $DIR/issue-41888.rs:9:13: 9:20\n         StorageDead(_4);                 // bb5[4]: scope 1 at $DIR/issue-41888.rs:9:19: 9:20\n         goto -> bb14;                    // bb5[5]: scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n     }"}, {"sha": "8970cc83f2b3c49b508fde73e6b521b3f9c3d627", "filename": "src/test/mir-opt/issue-62289/rustc.test.ElaborateDrops.before.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ca5fd2d7b6b1d75b6cb8f679e8523fb3e7b19e2/src%2Ftest%2Fmir-opt%2Fissue-62289%2Frustc.test.ElaborateDrops.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4ca5fd2d7b6b1d75b6cb8f679e8523fb3e7b19e2/src%2Ftest%2Fmir-opt%2Fissue-62289%2Frustc.test.ElaborateDrops.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-62289%2Frustc.test.ElaborateDrops.before.mir?ref=4ca5fd2d7b6b1d75b6cb8f679e8523fb3e7b19e2", "patch": "@@ -115,7 +115,7 @@ fn test() -> std::option::Option<std::boxed::Box<u32>> {\n \n     bb12: {\n         StorageDead(_2);                 // bb12[0]: scope 0 at $DIR/issue-62289.rs:9:20: 9:21\n-        _0 = std::option::Option::<std::boxed::Box<u32>>::Some(move _1,); // bb12[1]: scope 0 at $DIR/issue-62289.rs:9:5: 9:22\n+        _0 = std::option::Option::<std::boxed::Box<u32>>::Some(move _1); // bb12[1]: scope 0 at $DIR/issue-62289.rs:9:5: 9:22\n         drop(_1) -> bb13;                // bb12[2]: scope 0 at $DIR/issue-62289.rs:9:21: 9:22\n     }\n "}, {"sha": "0f8b6cc9c841baedadfff40776bda7c7b6aa1705", "filename": "src/test/mir-opt/match_false_edges/rustc.full_tested_match.PromoteTemps.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ca5fd2d7b6b1d75b6cb8f679e8523fb3e7b19e2/src%2Ftest%2Fmir-opt%2Fmatch_false_edges%2Frustc.full_tested_match.PromoteTemps.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4ca5fd2d7b6b1d75b6cb8f679e8523fb3e7b19e2/src%2Ftest%2Fmir-opt%2Fmatch_false_edges%2Frustc.full_tested_match.PromoteTemps.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_false_edges%2Frustc.full_tested_match.PromoteTemps.after.mir?ref=4ca5fd2d7b6b1d75b6cb8f679e8523fb3e7b19e2", "patch": "@@ -26,7 +26,7 @@ fn full_tested_match() -> () {\n     bb0: {\n         StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/match_false_edges.rs:15:13: 19:6\n         StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/match_false_edges.rs:15:19: 15:27\n-        _2 = std::option::Option::<i32>::Some(const 42i32,); // bb0[2]: scope 0 at $DIR/match_false_edges.rs:15:19: 15:27\n+        _2 = std::option::Option::<i32>::Some(const 42i32); // bb0[2]: scope 0 at $DIR/match_false_edges.rs:15:19: 15:27\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x0000002a))"}, {"sha": "2cf6c97ae22653ba772530ceb54082f359634101", "filename": "src/test/mir-opt/match_false_edges/rustc.full_tested_match2.PromoteTemps.before.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ca5fd2d7b6b1d75b6cb8f679e8523fb3e7b19e2/src%2Ftest%2Fmir-opt%2Fmatch_false_edges%2Frustc.full_tested_match2.PromoteTemps.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4ca5fd2d7b6b1d75b6cb8f679e8523fb3e7b19e2/src%2Ftest%2Fmir-opt%2Fmatch_false_edges%2Frustc.full_tested_match2.PromoteTemps.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_false_edges%2Frustc.full_tested_match2.PromoteTemps.before.mir?ref=4ca5fd2d7b6b1d75b6cb8f679e8523fb3e7b19e2", "patch": "@@ -25,7 +25,7 @@ fn full_tested_match2() -> () {\n     bb0: {\n         StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/match_false_edges.rs:26:13: 30:6\n         StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/match_false_edges.rs:26:19: 26:27\n-        _2 = std::option::Option::<i32>::Some(const 42i32,); // bb0[2]: scope 0 at $DIR/match_false_edges.rs:26:19: 26:27\n+        _2 = std::option::Option::<i32>::Some(const 42i32); // bb0[2]: scope 0 at $DIR/match_false_edges.rs:26:19: 26:27\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x0000002a))"}, {"sha": "7bba0b20d8ebcaa854a2cf81ffadb69a726c9fab", "filename": "src/test/mir-opt/match_false_edges/rustc.main.PromoteTemps.before.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ca5fd2d7b6b1d75b6cb8f679e8523fb3e7b19e2/src%2Ftest%2Fmir-opt%2Fmatch_false_edges%2Frustc.main.PromoteTemps.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4ca5fd2d7b6b1d75b6cb8f679e8523fb3e7b19e2/src%2Ftest%2Fmir-opt%2Fmatch_false_edges%2Frustc.main.PromoteTemps.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_false_edges%2Frustc.main.PromoteTemps.before.mir?ref=4ca5fd2d7b6b1d75b6cb8f679e8523fb3e7b19e2", "patch": "@@ -36,7 +36,7 @@ fn main() -> () {\n     bb0: {\n         StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/match_false_edges.rs:35:13: 40:6\n         StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/match_false_edges.rs:35:19: 35:26\n-        _2 = std::option::Option::<i32>::Some(const 1i32,); // bb0[2]: scope 0 at $DIR/match_false_edges.rs:35:19: 35:26\n+        _2 = std::option::Option::<i32>::Some(const 1i32); // bb0[2]: scope 0 at $DIR/match_false_edges.rs:35:19: 35:26\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000001))"}, {"sha": "cf423d06efb5f01e5793bfd751d3b160825a5667", "filename": "src/test/mir-opt/packed-struct-drop-aligned/32bit/rustc.main.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4ca5fd2d7b6b1d75b6cb8f679e8523fb3e7b19e2/src%2Ftest%2Fmir-opt%2Fpacked-struct-drop-aligned%2F32bit%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4ca5fd2d7b6b1d75b6cb8f679e8523fb3e7b19e2/src%2Ftest%2Fmir-opt%2Fpacked-struct-drop-aligned%2F32bit%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fpacked-struct-drop-aligned%2F32bit%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir?ref=4ca5fd2d7b6b1d75b6cb8f679e8523fb3e7b19e2", "patch": "@@ -16,27 +16,27 @@ fn main() -> () {\n         StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/packed-struct-drop-aligned.rs:6:9: 6:14\n         StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/packed-struct-drop-aligned.rs:6:24: 6:42\n         StorageLive(_3);                 // bb0[2]: scope 0 at $DIR/packed-struct-drop-aligned.rs:6:32: 6:41\n-        _3 = Droppy(const 0usize,);      // bb0[3]: scope 0 at $DIR/packed-struct-drop-aligned.rs:6:32: 6:41\n+        _3 = Droppy(const 0usize);       // bb0[3]: scope 0 at $DIR/packed-struct-drop-aligned.rs:6:32: 6:41\n                                          // ty::Const\n                                          // + ty: usize\n                                          // + val: Value(Scalar(0x00000000))\n                                          // mir::Constant\n                                          // + span: $DIR/packed-struct-drop-aligned.rs:6:39: 6:40\n                                          // + literal: Const { ty: usize, val: Value(Scalar(0x00000000)) }\n-        _2 = Aligned(move _3,);          // bb0[4]: scope 0 at $DIR/packed-struct-drop-aligned.rs:6:24: 6:42\n+        _2 = Aligned(move _3);           // bb0[4]: scope 0 at $DIR/packed-struct-drop-aligned.rs:6:24: 6:42\n         StorageDead(_3);                 // bb0[5]: scope 0 at $DIR/packed-struct-drop-aligned.rs:6:41: 6:42\n-        _1 = Packed(move _2,);           // bb0[6]: scope 0 at $DIR/packed-struct-drop-aligned.rs:6:17: 6:43\n+        _1 = Packed(move _2);            // bb0[6]: scope 0 at $DIR/packed-struct-drop-aligned.rs:6:17: 6:43\n         StorageDead(_2);                 // bb0[7]: scope 0 at $DIR/packed-struct-drop-aligned.rs:6:42: 6:43\n         StorageLive(_4);                 // bb0[8]: scope 1 at $DIR/packed-struct-drop-aligned.rs:7:11: 7:29\n         StorageLive(_5);                 // bb0[9]: scope 1 at $DIR/packed-struct-drop-aligned.rs:7:19: 7:28\n-        _5 = Droppy(const 0usize,);      // bb0[10]: scope 1 at $DIR/packed-struct-drop-aligned.rs:7:19: 7:28\n+        _5 = Droppy(const 0usize);       // bb0[10]: scope 1 at $DIR/packed-struct-drop-aligned.rs:7:19: 7:28\n                                          // ty::Const\n                                          // + ty: usize\n                                          // + val: Value(Scalar(0x00000000))\n                                          // mir::Constant\n                                          // + span: $DIR/packed-struct-drop-aligned.rs:7:26: 7:27\n                                          // + literal: Const { ty: usize, val: Value(Scalar(0x00000000)) }\n-        _4 = Aligned(move _5,);          // bb0[11]: scope 1 at $DIR/packed-struct-drop-aligned.rs:7:11: 7:29\n+        _4 = Aligned(move _5);           // bb0[11]: scope 1 at $DIR/packed-struct-drop-aligned.rs:7:11: 7:29\n         StorageDead(_5);                 // bb0[12]: scope 1 at $DIR/packed-struct-drop-aligned.rs:7:28: 7:29\n         StorageLive(_6);                 // bb0[13]: scope 1 at $DIR/packed-struct-drop-aligned.rs:7:5: 7:8\n         _6 = move (_1.0: Aligned);       // bb0[14]: scope 1 at $DIR/packed-struct-drop-aligned.rs:7:5: 7:8"}, {"sha": "09b398e960420232574ecd7df7bddd76963ce4ff", "filename": "src/test/mir-opt/packed-struct-drop-aligned/64bit/rustc.main.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4ca5fd2d7b6b1d75b6cb8f679e8523fb3e7b19e2/src%2Ftest%2Fmir-opt%2Fpacked-struct-drop-aligned%2F64bit%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4ca5fd2d7b6b1d75b6cb8f679e8523fb3e7b19e2/src%2Ftest%2Fmir-opt%2Fpacked-struct-drop-aligned%2F64bit%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fpacked-struct-drop-aligned%2F64bit%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir?ref=4ca5fd2d7b6b1d75b6cb8f679e8523fb3e7b19e2", "patch": "@@ -16,27 +16,27 @@ fn main() -> () {\n         StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/packed-struct-drop-aligned.rs:6:9: 6:14\n         StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/packed-struct-drop-aligned.rs:6:24: 6:42\n         StorageLive(_3);                 // bb0[2]: scope 0 at $DIR/packed-struct-drop-aligned.rs:6:32: 6:41\n-        _3 = Droppy(const 0usize,);      // bb0[3]: scope 0 at $DIR/packed-struct-drop-aligned.rs:6:32: 6:41\n+        _3 = Droppy(const 0usize);       // bb0[3]: scope 0 at $DIR/packed-struct-drop-aligned.rs:6:32: 6:41\n                                          // ty::Const\n                                          // + ty: usize\n                                          // + val: Value(Scalar(0x0000000000000000))\n                                          // mir::Constant\n                                          // + span: $DIR/packed-struct-drop-aligned.rs:6:39: 6:40\n                                          // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000000)) }\n-        _2 = Aligned(move _3,);          // bb0[4]: scope 0 at $DIR/packed-struct-drop-aligned.rs:6:24: 6:42\n+        _2 = Aligned(move _3);           // bb0[4]: scope 0 at $DIR/packed-struct-drop-aligned.rs:6:24: 6:42\n         StorageDead(_3);                 // bb0[5]: scope 0 at $DIR/packed-struct-drop-aligned.rs:6:41: 6:42\n-        _1 = Packed(move _2,);           // bb0[6]: scope 0 at $DIR/packed-struct-drop-aligned.rs:6:17: 6:43\n+        _1 = Packed(move _2);            // bb0[6]: scope 0 at $DIR/packed-struct-drop-aligned.rs:6:17: 6:43\n         StorageDead(_2);                 // bb0[7]: scope 0 at $DIR/packed-struct-drop-aligned.rs:6:42: 6:43\n         StorageLive(_4);                 // bb0[8]: scope 1 at $DIR/packed-struct-drop-aligned.rs:7:11: 7:29\n         StorageLive(_5);                 // bb0[9]: scope 1 at $DIR/packed-struct-drop-aligned.rs:7:19: 7:28\n-        _5 = Droppy(const 0usize,);      // bb0[10]: scope 1 at $DIR/packed-struct-drop-aligned.rs:7:19: 7:28\n+        _5 = Droppy(const 0usize);       // bb0[10]: scope 1 at $DIR/packed-struct-drop-aligned.rs:7:19: 7:28\n                                          // ty::Const\n                                          // + ty: usize\n                                          // + val: Value(Scalar(0x0000000000000000))\n                                          // mir::Constant\n                                          // + span: $DIR/packed-struct-drop-aligned.rs:7:26: 7:27\n                                          // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000000)) }\n-        _4 = Aligned(move _5,);          // bb0[11]: scope 1 at $DIR/packed-struct-drop-aligned.rs:7:11: 7:29\n+        _4 = Aligned(move _5);           // bb0[11]: scope 1 at $DIR/packed-struct-drop-aligned.rs:7:11: 7:29\n         StorageDead(_5);                 // bb0[12]: scope 1 at $DIR/packed-struct-drop-aligned.rs:7:28: 7:29\n         StorageLive(_6);                 // bb0[13]: scope 1 at $DIR/packed-struct-drop-aligned.rs:7:5: 7:8\n         _6 = move (_1.0: Aligned);       // bb0[14]: scope 1 at $DIR/packed-struct-drop-aligned.rs:7:5: 7:8"}, {"sha": "125f69b0bc2883bab5a05756f249fff5369938b3", "filename": "src/test/mir-opt/retag/rustc.main.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ca5fd2d7b6b1d75b6cb8f679e8523fb3e7b19e2/src%2Ftest%2Fmir-opt%2Fretag%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4ca5fd2d7b6b1d75b6cb8f679e8523fb3e7b19e2/src%2Ftest%2Fmir-opt%2Fretag%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretag%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir?ref=4ca5fd2d7b6b1d75b6cb8f679e8523fb3e7b19e2", "patch": "@@ -67,7 +67,7 @@ fn main() -> () {\n         StorageLive(_3);                 // bb0[3]: scope 1 at $DIR/retag.rs:32:13: 32:14\n         StorageLive(_4);                 // bb0[4]: scope 1 at $DIR/retag.rs:32:17: 32:24\n         StorageLive(_5);                 // bb0[5]: scope 1 at $DIR/retag.rs:32:17: 32:24\n-        _5 = Test(const 0i32,);          // bb0[6]: scope 1 at $DIR/retag.rs:32:17: 32:24\n+        _5 = Test(const 0i32);           // bb0[6]: scope 1 at $DIR/retag.rs:32:17: 32:24\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000000))\n@@ -170,7 +170,7 @@ fn main() -> () {\n         StorageLive(_19);                // bb5[4]: scope 7 at $DIR/retag.rs:47:5: 47:24\n         StorageLive(_20);                // bb5[5]: scope 7 at $DIR/retag.rs:47:5: 47:12\n         StorageLive(_21);                // bb5[6]: scope 7 at $DIR/retag.rs:47:5: 47:12\n-        _21 = Test(const 0i32,);         // bb5[7]: scope 7 at $DIR/retag.rs:47:5: 47:12\n+        _21 = Test(const 0i32);          // bb5[7]: scope 7 at $DIR/retag.rs:47:5: 47:12\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000000))"}, {"sha": "855ead7ea0554cb45c30faecbbcefdf7f7a1012b", "filename": "src/test/mir-opt/simplify-locals-removes-unused-consts/rustc.main.SimplifyLocals.diff", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4ca5fd2d7b6b1d75b6cb8f679e8523fb3e7b19e2/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-consts%2Frustc.main.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4ca5fd2d7b6b1d75b6cb8f679e8523fb3e7b19e2/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-consts%2Frustc.main.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-consts%2Frustc.main.SimplifyLocals.diff?ref=4ca5fd2d7b6b1d75b6cb8f679e8523fb3e7b19e2", "patch": "@@ -24,7 +24,7 @@\n -         StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:13:21: 13:23\n -         _2 = const ();                   // bb0[2]: scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:13:21: 13:23\n +         StorageLive(_1);                 // bb0[0]: scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:5: 14:22\n-+         _1 = const use_zst(const {transmute(()): ((), ())}) -> bb1; // bb0[1]: scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:5: 14:22\n++         _1 = const use_zst(const ((), ())) -> bb1; // bb0[1]: scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:5: 14:22\n                                            // ty::Const\n -                                          // + ty: ()\n -                                          // + val: Value(Scalar(<ZST>))\n@@ -39,7 +39,7 @@\n -                                          // mir::Constant\n -                                          // + span: $DIR/simplify-locals-removes-unused-consts.rs:13:25: 13:27\n -                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n--         _1 = const {transmute(()): ((), ())}; // bb0[5]: scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:13:20: 13:28\n+-         _1 = const ((), ());             // bb0[5]: scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:13:20: 13:28\n -                                          // ty::Const\n -                                          // + ty: ((), ())\n -                                          // + val: Value(Scalar(<ZST>))\n@@ -68,7 +68,7 @@\n -                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n -         StorageDead(_7);                 // bb0[14]: scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:20: 14:21\n -         StorageDead(_6);                 // bb0[15]: scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:20: 14:21\n--         _4 = const use_zst(const {transmute(()): ((), ())}) -> bb1; // bb0[16]: scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:5: 14:22\n+-         _4 = const use_zst(const ((), ())) -> bb1; // bb0[16]: scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:5: 14:22\n -                                          // ty::Const\n                                            // + ty: fn(((), ())) {use_zst}\n                                            // + val: Value(Scalar(<ZST>))\n@@ -88,7 +88,7 @@\n -         StorageLive(_8);                 // bb1[1]: scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:5: 16:35\n -         StorageLive(_10);                // bb1[2]: scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:12: 16:30\n -         StorageLive(_11);                // bb1[3]: scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:12: 16:28\n--         _11 = const {transmute(0x28): Temp}; // bb1[4]: scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:12: 16:28\n+-         _11 = const Temp { x: 40u8 };    // bb1[4]: scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:12: 16:28\n +         StorageDead(_1);                 // bb1[0]: scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:22: 14:23\n +         StorageLive(_2);                 // bb1[1]: scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:5: 16:35\n +         _2 = const use_u8(const 42u8) -> bb2; // bb1[2]: scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:5: 16:35"}, {"sha": "799521b09a6fe7d0073b5fae389c559df781e1db", "filename": "src/test/mir-opt/storage_ranges/rustc.main.nll.0.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ca5fd2d7b6b1d75b6cb8f679e8523fb3e7b19e2/src%2Ftest%2Fmir-opt%2Fstorage_ranges%2Frustc.main.nll.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4ca5fd2d7b6b1d75b6cb8f679e8523fb3e7b19e2/src%2Ftest%2Fmir-opt%2Fstorage_ranges%2Frustc.main.nll.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fstorage_ranges%2Frustc.main.nll.0.mir?ref=4ca5fd2d7b6b1d75b6cb8f679e8523fb3e7b19e2", "patch": "@@ -50,7 +50,7 @@ fn main() -> () {\n         StorageLive(_4);                 // bb0[5]: scope 1 at $DIR/storage_ranges.rs:6:18: 6:25\n         StorageLive(_5);                 // bb0[6]: scope 1 at $DIR/storage_ranges.rs:6:23: 6:24\n         _5 = _1;                         // bb0[7]: scope 1 at $DIR/storage_ranges.rs:6:23: 6:24\n-        _4 = std::option::Option::<i32>::Some(move _5,); // bb0[8]: scope 1 at $DIR/storage_ranges.rs:6:18: 6:25\n+        _4 = std::option::Option::<i32>::Some(move _5); // bb0[8]: scope 1 at $DIR/storage_ranges.rs:6:18: 6:25\n         StorageDead(_5);                 // bb0[9]: scope 1 at $DIR/storage_ranges.rs:6:24: 6:25\n         _3 = &_4;                        // bb0[10]: scope 1 at $DIR/storage_ranges.rs:6:17: 6:25\n         FakeRead(ForLet, _3);            // bb0[11]: scope 1 at $DIR/storage_ranges.rs:6:13: 6:14"}]}