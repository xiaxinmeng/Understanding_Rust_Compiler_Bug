{"sha": "f7b8ae1ee7793bd9b34ecea27037a01159cd5d7a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3YjhhZTFlZTc3OTNiZDliMzRlY2VhMjcwMzdhMDExNTljZDVkN2E=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2019-07-24T14:15:12Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2019-07-25T12:17:28Z"}, "message": "Simplify the hints display", "tree": {"sha": "089f1e5dafc83b9fa63391d06bc274acef297361", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/089f1e5dafc83b9fa63391d06bc274acef297361"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7b8ae1ee7793bd9b34ecea27037a01159cd5d7a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7b8ae1ee7793bd9b34ecea27037a01159cd5d7a", "html_url": "https://github.com/rust-lang/rust/commit/f7b8ae1ee7793bd9b34ecea27037a01159cd5d7a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7b8ae1ee7793bd9b34ecea27037a01159cd5d7a/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "169e69d217600062f6299f7f9521f3f2776d0333", "url": "https://api.github.com/repos/rust-lang/rust/commits/169e69d217600062f6299f7f9521f3f2776d0333", "html_url": "https://github.com/rust-lang/rust/commit/169e69d217600062f6299f7f9521f3f2776d0333"}], "stats": {"total": 60, "additions": 6, "deletions": 54}, "files": [{"sha": "cc6620d362a95b080af890b3f2e9ae31b39cf3d5", "filename": "editors/code/src/commands/inlay_hints.ts", "status": "modified", "additions": 6, "deletions": 53, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/f7b8ae1ee7793bd9b34ecea27037a01159cd5d7a/editors%2Fcode%2Fsrc%2Fcommands%2Finlay_hints.ts", "raw_url": "https://github.com/rust-lang/rust/raw/f7b8ae1ee7793bd9b34ecea27037a01159cd5d7a/editors%2Fcode%2Fsrc%2Fcommands%2Finlay_hints.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Finlay_hints.ts?ref=f7b8ae1ee7793bd9b34ecea27037a01159cd5d7a", "patch": "@@ -1,5 +1,5 @@\n import * as vscode from 'vscode';\n-import { DecorationOptions, Range, TextDocumentChangeEvent, TextDocumentContentChangeEvent, TextEditor } from 'vscode';\n+import { Range, TextDocumentChangeEvent, TextDocumentContentChangeEvent, TextEditor } from 'vscode';\n import { TextDocumentIdentifier } from 'vscode-languageclient';\n import { Server } from '../server';\n \n@@ -20,7 +20,6 @@ const typeHintDecorationType = vscode.window.createTextEditorDecorationType({\n });\n \n export class HintsUpdater {\n-    private currentDecorations = new Map<string, DecorationOptions[]>();\n     private displayHints = true;\n \n     public async loadHints(editor: vscode.TextEditor | undefined): Promise<void> {\n@@ -29,16 +28,9 @@ export class HintsUpdater {\n         }\n     }\n \n-    public dropHints(document: vscode.TextDocument) {\n-        if (this.displayHints) {\n-            this.currentDecorations.delete(document.uri.toString());\n-        }\n-    }\n-\n     public async toggleHintsDisplay(displayHints: boolean): Promise<void> {\n         if (this.displayHints !== displayHints) {\n             this.displayHints = displayHints;\n-            this.currentDecorations.clear();\n \n             if (displayHints) {\n                 return this.updateHints();\n@@ -64,26 +56,12 @@ export class HintsUpdater {\n             return;\n         }\n \n-        const documentUri = document.uri.toString();\n-        const documentDecorators = this.currentDecorations.get(documentUri) || [];\n-\n-        if (documentDecorators.length > 0) {\n-            // FIXME a dbg! in the handlers.rs of the server causes\n-            // an endless storm of events with `cause.contentChanges` with the dbg messages, why?\n-            const changesFromFile = cause !== undefined ? cause.contentChanges.filter(changeEvent => this.isEventInFile(document.lineCount, changeEvent)) : [];\n-            if (changesFromFile.length === 0) {\n-                return;\n-            }\n-\n-            const firstShiftedLine = this.getFirstShiftedLine(changesFromFile);\n-            if (firstShiftedLine !== null) {\n-                const unchangedDecorations = documentDecorators.filter(decoration => decoration.range.start.line < firstShiftedLine);\n-                if (unchangedDecorations.length !== documentDecorators.length) {\n-                    await editor.setDecorations(typeHintDecorationType, unchangedDecorations);\n-                }\n-            }\n+        // If the dbg! macro is used in the lsp-server, an endless stream of events with `cause.contentChanges` with the dbg messages.\n+        // Should not be a real situation, but better to filter such things out.\n+        if (cause !== undefined && cause.contentChanges.filter(changeEvent => this.isEventInFile(document.lineCount, changeEvent)).length === 0) {\n+            return;\n         }\n-        return await this.updateDecorationsFromServer(documentUri, editor);\n+        return await this.updateDecorationsFromServer(document.uri.toString(), editor);\n     }\n \n     private isEventInFile(documentLineCount: number, event: TextDocumentContentChangeEvent): boolean {\n@@ -95,30 +73,6 @@ export class HintsUpdater {\n         }\n     }\n \n-    private getFirstShiftedLine(changeEvents: TextDocumentContentChangeEvent[]): number | null {\n-        let topmostUnshiftedLine: number | null = null;\n-\n-        changeEvents\n-            .filter(event => this.isShiftingChange(event))\n-            .forEach(event => {\n-                const shiftedLineNumber = event.range.start.line;\n-                if (topmostUnshiftedLine === null || topmostUnshiftedLine > shiftedLineNumber) {\n-                    topmostUnshiftedLine = shiftedLineNumber;\n-                }\n-            });\n-\n-        return topmostUnshiftedLine;\n-    }\n-\n-    private isShiftingChange(event: TextDocumentContentChangeEvent) {\n-        const eventText = event.text;\n-        if (eventText.length === 0) {\n-            return !event.range.isSingleLine;\n-        } else {\n-            return eventText.indexOf('\\n') >= 0 || eventText.indexOf('\\r') >= 0;\n-        }\n-    }\n-\n     private async updateDecorationsFromServer(documentUri: string, editor: TextEditor): Promise<void> {\n         const newHints = await this.queryHints(documentUri) || [];\n         const newDecorations = newHints.map(hint => (\n@@ -127,7 +81,6 @@ export class HintsUpdater {\n                 renderOptions: { after: { contentText: `: ${hint.label}` } },\n             }\n         ));\n-        this.currentDecorations.set(documentUri, newDecorations);\n         return editor.setDecorations(typeHintDecorationType, newDecorations);\n     }\n "}, {"sha": "3965b881aaedb01dc61a9fdfecb05585ffde0702", "filename": "editors/code/src/extension.ts", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f7b8ae1ee7793bd9b34ecea27037a01159cd5d7a/editors%2Fcode%2Fsrc%2Fextension.ts", "raw_url": "https://github.com/rust-lang/rust/raw/f7b8ae1ee7793bd9b34ecea27037a01159cd5d7a/editors%2Fcode%2Fsrc%2Fextension.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fextension.ts?ref=f7b8ae1ee7793bd9b34ecea27037a01159cd5d7a", "patch": "@@ -154,7 +154,6 @@ export function activate(context: vscode.ExtensionContext) {\n         hintsUpdater.loadHints(vscode.window.activeTextEditor).then(() => {\n             vscode.window.onDidChangeActiveTextEditor(editor => hintsUpdater.loadHints(editor));\n             vscode.workspace.onDidChangeTextDocument(e => hintsUpdater.updateHints(e));\n-            vscode.workspace.onDidCloseTextDocument(document => hintsUpdater.dropHints(document));\n             vscode.workspace.onDidChangeConfiguration(_ => hintsUpdater.toggleHintsDisplay(Server.config.displayInlayHints));\n         });\n     }"}]}