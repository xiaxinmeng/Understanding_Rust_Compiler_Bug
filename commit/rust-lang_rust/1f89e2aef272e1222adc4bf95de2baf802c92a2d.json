{"sha": "1f89e2aef272e1222adc4bf95de2baf802c92a2d", "node_id": "C_kwDOAAsO6NoAKDFmODllMmFlZjI3MmUxMjIyYWRjNGJmOTVkZTJiYWY4MDJjOTJhMmQ", "commit": {"author": {"name": "Boxy", "email": "supbscripter@gmail.com", "date": "2023-02-10T14:29:28Z"}, "committer": {"name": "Boxy", "email": "supbscripter@gmail.com", "date": "2023-02-10T14:33:13Z"}, "message": "emit `AliasEq` when relating type and const aliases", "tree": {"sha": "2ced6bf98dd4d9865f4bfe748b75d5942f014663", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ced6bf98dd4d9865f4bfe748b75d5942f014663"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f89e2aef272e1222adc4bf95de2baf802c92a2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f89e2aef272e1222adc4bf95de2baf802c92a2d", "html_url": "https://github.com/rust-lang/rust/commit/1f89e2aef272e1222adc4bf95de2baf802c92a2d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f89e2aef272e1222adc4bf95de2baf802c92a2d/comments", "author": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "committer": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "23ab2464befc41d74e04cc2259366a439b346cb9", "url": "https://api.github.com/repos/rust-lang/rust/commits/23ab2464befc41d74e04cc2259366a439b346cb9", "html_url": "https://github.com/rust-lang/rust/commit/23ab2464befc41d74e04cc2259366a439b346cb9"}], "stats": {"total": 304, "additions": 157, "deletions": 147}, "files": [{"sha": "8dd06187877c864c79c5394fda5586eeac987276", "filename": "compiler/rustc_borrowck/src/type_check/relate_tys.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1f89e2aef272e1222adc4bf95de2baf802c92a2d/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f89e2aef272e1222adc4bf95de2baf802c92a2d/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs?ref=1f89e2aef272e1222adc4bf95de2baf802c92a2d", "patch": "@@ -1,4 +1,4 @@\n-use rustc_infer::infer::nll_relate::{NormalizationStrategy, TypeRelating, TypeRelatingDelegate};\n+use rustc_infer::infer::nll_relate::{TypeRelating, TypeRelatingDelegate};\n use rustc_infer::infer::NllRegionVariableOrigin;\n use rustc_infer::traits::PredicateObligations;\n use rustc_middle::mir::ConstraintCategory;\n@@ -140,10 +140,6 @@ impl<'tcx> TypeRelatingDelegate<'tcx> for NllTypeRelatingDelegate<'_, '_, 'tcx>\n         );\n     }\n \n-    fn normalization() -> NormalizationStrategy {\n-        NormalizationStrategy::Eager\n-    }\n-\n     fn forbid_inference_vars() -> bool {\n         true\n     }"}, {"sha": "0c97217bd6a5dbda676e00acd798c5a650d6e7a3", "filename": "compiler/rustc_infer/src/infer/canonical/query_response.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1f89e2aef272e1222adc4bf95de2baf802c92a2d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f89e2aef272e1222adc4bf95de2baf802c92a2d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs?ref=1f89e2aef272e1222adc4bf95de2baf802c92a2d", "patch": "@@ -12,7 +12,7 @@ use crate::infer::canonical::{\n     Canonical, CanonicalQueryResponse, CanonicalVarValues, Certainty, OriginalQueryValues,\n     QueryOutlivesConstraint, QueryRegionConstraints, QueryResponse,\n };\n-use crate::infer::nll_relate::{NormalizationStrategy, TypeRelating, TypeRelatingDelegate};\n+use crate::infer::nll_relate::{TypeRelating, TypeRelatingDelegate};\n use crate::infer::region_constraints::{Constraint, RegionConstraintData};\n use crate::infer::{InferCtxt, InferOk, InferResult, NllRegionVariableOrigin};\n use crate::traits::query::{Fallible, NoSolution};\n@@ -717,10 +717,6 @@ impl<'tcx> TypeRelatingDelegate<'tcx> for QueryTypeRelatingDelegate<'_, 'tcx> {\n         });\n     }\n \n-    fn normalization() -> NormalizationStrategy {\n-        NormalizationStrategy::Eager\n-    }\n-\n     fn forbid_inference_vars() -> bool {\n         true\n     }"}, {"sha": "cb1e14aaeaf9fe8bcd23e6dd1ed37390b88e6e95", "filename": "compiler/rustc_infer/src/infer/combine.rs", "status": "modified", "additions": 58, "deletions": 29, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/1f89e2aef272e1222adc4bf95de2baf802c92a2d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f89e2aef272e1222adc4bf95de2baf802c92a2d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs?ref=1f89e2aef272e1222adc4bf95de2baf802c92a2d", "patch": "@@ -38,8 +38,8 @@ use rustc_middle::ty::error::{ExpectedFound, TypeError};\n use rustc_middle::ty::relate::{self, Relate, RelateResult, TypeRelation};\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::{\n-    self, FallibleTypeFolder, InferConst, Ty, TyCtxt, TypeFoldable, TypeSuperFoldable,\n-    TypeVisitable,\n+    self, AliasKind, FallibleTypeFolder, InferConst, ToPredicate, Ty, TyCtxt, TypeFoldable,\n+    TypeSuperFoldable, TypeVisitable,\n };\n use rustc_middle::ty::{IntType, UintType};\n use rustc_span::{Span, DUMMY_SP};\n@@ -74,7 +74,7 @@ impl<'tcx> InferCtxt<'tcx> {\n         b: Ty<'tcx>,\n     ) -> RelateResult<'tcx, Ty<'tcx>>\n     where\n-        R: TypeRelation<'tcx>,\n+        R: ObligationEmittingRelation<'tcx>,\n     {\n         let a_is_expected = relation.a_is_expected();\n \n@@ -122,6 +122,15 @@ impl<'tcx> InferCtxt<'tcx> {\n                 Err(TypeError::Sorts(ty::relate::expected_found(relation, a, b)))\n             }\n \n+            (ty::Alias(AliasKind::Projection, _), _) if self.tcx.trait_solver_next() => {\n+                relation.register_type_equate_obligation(a.into(), b.into());\n+                Ok(b)\n+            }\n+            (_, ty::Alias(AliasKind::Projection, _)) if self.tcx.trait_solver_next() => {\n+                relation.register_type_equate_obligation(b.into(), a.into());\n+                Ok(a)\n+            }\n+\n             _ => ty::relate::super_relate_tys(relation, a, b),\n         }\n     }\n@@ -133,7 +142,7 @@ impl<'tcx> InferCtxt<'tcx> {\n         b: ty::Const<'tcx>,\n     ) -> RelateResult<'tcx, ty::Const<'tcx>>\n     where\n-        R: ConstEquateRelation<'tcx>,\n+        R: ObligationEmittingRelation<'tcx>,\n     {\n         debug!(\"{}.consts({:?}, {:?})\", relation.tag(), a, b);\n         if a == b {\n@@ -169,15 +178,15 @@ impl<'tcx> InferCtxt<'tcx> {\n                 // FIXME(#59490): Need to remove the leak check to accommodate\n                 // escaping bound variables here.\n                 if !a.has_escaping_bound_vars() && !b.has_escaping_bound_vars() {\n-                    relation.const_equate_obligation(a, b);\n+                    relation.register_const_equate_obligation(a, b);\n                 }\n                 return Ok(b);\n             }\n             (_, ty::ConstKind::Unevaluated(..)) if self.tcx.lazy_normalization() => {\n                 // FIXME(#59490): Need to remove the leak check to accommodate\n                 // escaping bound variables here.\n                 if !a.has_escaping_bound_vars() && !b.has_escaping_bound_vars() {\n-                    relation.const_equate_obligation(a, b);\n+                    relation.register_const_equate_obligation(a, b);\n                 }\n                 return Ok(a);\n             }\n@@ -435,32 +444,21 @@ impl<'infcx, 'tcx> CombineFields<'infcx, 'tcx> {\n         Ok(Generalization { ty, needs_wf })\n     }\n \n-    pub fn add_const_equate_obligation(\n+    pub fn register_obligations(&mut self, obligations: PredicateObligations<'tcx>) {\n+        self.obligations.extend(obligations.into_iter());\n+    }\n+\n+    pub fn register_predicates(\n         &mut self,\n-        a_is_expected: bool,\n-        a: ty::Const<'tcx>,\n-        b: ty::Const<'tcx>,\n+        obligations: impl IntoIterator<Item = impl ToPredicate<'tcx>>,\n     ) {\n-        let predicate = if a_is_expected {\n-            ty::PredicateKind::ConstEquate(a, b)\n-        } else {\n-            ty::PredicateKind::ConstEquate(b, a)\n-        };\n-        self.obligations.push(Obligation::new(\n-            self.tcx(),\n-            self.trace.cause.clone(),\n-            self.param_env,\n-            ty::Binder::dummy(predicate),\n-        ));\n+        self.obligations.extend(obligations.into_iter().map(|to_pred| {\n+            Obligation::new(self.infcx.tcx, self.trace.cause.clone(), self.param_env, to_pred)\n+        }))\n     }\n \n     pub fn mark_ambiguous(&mut self) {\n-        self.obligations.push(Obligation::new(\n-            self.tcx(),\n-            self.trace.cause.clone(),\n-            self.param_env,\n-            ty::Binder::dummy(ty::PredicateKind::Ambiguous),\n-        ));\n+        self.register_predicates([ty::Binder::dummy(ty::PredicateKind::Ambiguous)]);\n     }\n }\n \n@@ -775,11 +773,42 @@ impl<'tcx> TypeRelation<'tcx> for Generalizer<'_, 'tcx> {\n     }\n }\n \n-pub trait ConstEquateRelation<'tcx>: TypeRelation<'tcx> {\n+pub trait ObligationEmittingRelation<'tcx>: TypeRelation<'tcx> {\n+    /// Register obligations that must hold in order for this relation to hold\n+    fn register_obligations(&mut self, obligations: PredicateObligations<'tcx>);\n+\n+    /// Register predicates that must hold in order for this relation to hold. Uses\n+    /// a default obligation cause, [`ObligationEmittingRelation::register_obligations`] should\n+    /// be used if control over the obligaton causes is required.\n+    fn register_predicates(\n+        &mut self,\n+        obligations: impl IntoIterator<Item = impl ToPredicate<'tcx>>,\n+    );\n+\n     /// Register an obligation that both constants must be equal to each other.\n     ///\n     /// If they aren't equal then the relation doesn't hold.\n-    fn const_equate_obligation(&mut self, a: ty::Const<'tcx>, b: ty::Const<'tcx>);\n+    fn register_const_equate_obligation(&mut self, a: ty::Const<'tcx>, b: ty::Const<'tcx>) {\n+        let (a, b) = if self.a_is_expected() { (a, b) } else { (b, a) };\n+\n+        self.register_predicates([ty::Binder::dummy(if self.tcx().trait_solver_next() {\n+            ty::PredicateKind::AliasEq(a.into(), b.into())\n+        } else {\n+            ty::PredicateKind::ConstEquate(a, b)\n+        })]);\n+    }\n+\n+    /// Register an obligation that both types must be equal to each other.\n+    ///\n+    /// If they aren't equal then the relation doesn't hold.\n+    fn register_type_equate_obligation(&mut self, a: Ty<'tcx>, b: Ty<'tcx>) {\n+        let (a, b) = if self.a_is_expected() { (a, b) } else { (b, a) };\n+\n+        self.register_predicates([ty::Binder::dummy(ty::PredicateKind::AliasEq(\n+            a.into(),\n+            b.into(),\n+        ))]);\n+    }\n }\n \n fn int_unification_error<'tcx>("}, {"sha": "742c01efff60352f5f995516571780c56af37d07", "filename": "compiler/rustc_infer/src/infer/equate.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1f89e2aef272e1222adc4bf95de2baf802c92a2d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fequate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f89e2aef272e1222adc4bf95de2baf802c92a2d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fequate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fequate.rs?ref=1f89e2aef272e1222adc4bf95de2baf802c92a2d", "patch": "@@ -1,4 +1,6 @@\n-use super::combine::{CombineFields, ConstEquateRelation, RelationDir};\n+use crate::traits::PredicateObligations;\n+\n+use super::combine::{CombineFields, ObligationEmittingRelation, RelationDir};\n use super::Subtype;\n \n use rustc_middle::ty::relate::{self, Relate, RelateResult, TypeRelation};\n@@ -198,8 +200,15 @@ impl<'tcx> TypeRelation<'tcx> for Equate<'_, '_, 'tcx> {\n     }\n }\n \n-impl<'tcx> ConstEquateRelation<'tcx> for Equate<'_, '_, 'tcx> {\n-    fn const_equate_obligation(&mut self, a: ty::Const<'tcx>, b: ty::Const<'tcx>) {\n-        self.fields.add_const_equate_obligation(self.a_is_expected, a, b);\n+impl<'tcx> ObligationEmittingRelation<'tcx> for Equate<'_, '_, 'tcx> {\n+    fn register_predicates(\n+        &mut self,\n+        obligations: impl IntoIterator<Item = impl ty::ToPredicate<'tcx>>,\n+    ) {\n+        self.fields.register_predicates(obligations);\n+    }\n+\n+    fn register_obligations(&mut self, obligations: PredicateObligations<'tcx>) {\n+        self.fields.register_obligations(obligations);\n     }\n }"}, {"sha": "74abca7bbea36bbfd1f7b5a8c76189d3f593cde0", "filename": "compiler/rustc_infer/src/infer/glb.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1f89e2aef272e1222adc4bf95de2baf802c92a2d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fglb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f89e2aef272e1222adc4bf95de2baf802c92a2d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fglb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fglb.rs?ref=1f89e2aef272e1222adc4bf95de2baf802c92a2d", "patch": "@@ -1,12 +1,11 @@\n //! Greatest lower bound. See [`lattice`].\n \n-use super::combine::CombineFields;\n+use super::combine::{CombineFields, ObligationEmittingRelation};\n use super::lattice::{self, LatticeDir};\n use super::InferCtxt;\n use super::Subtype;\n \n-use crate::infer::combine::ConstEquateRelation;\n-use crate::traits::{ObligationCause, PredicateObligation};\n+use crate::traits::{ObligationCause, PredicateObligations};\n use rustc_middle::ty::relate::{Relate, RelateResult, TypeRelation};\n use rustc_middle::ty::{self, Ty, TyCtxt};\n \n@@ -136,10 +135,6 @@ impl<'combine, 'infcx, 'tcx> LatticeDir<'infcx, 'tcx> for Glb<'combine, 'infcx,\n         &self.fields.trace.cause\n     }\n \n-    fn add_obligations(&mut self, obligations: Vec<PredicateObligation<'tcx>>) {\n-        self.fields.obligations.extend(obligations)\n-    }\n-\n     fn relate_bound(&mut self, v: Ty<'tcx>, a: Ty<'tcx>, b: Ty<'tcx>) -> RelateResult<'tcx, ()> {\n         let mut sub = self.fields.sub(self.a_is_expected);\n         sub.relate(v, a)?;\n@@ -152,8 +147,15 @@ impl<'combine, 'infcx, 'tcx> LatticeDir<'infcx, 'tcx> for Glb<'combine, 'infcx,\n     }\n }\n \n-impl<'tcx> ConstEquateRelation<'tcx> for Glb<'_, '_, 'tcx> {\n-    fn const_equate_obligation(&mut self, a: ty::Const<'tcx>, b: ty::Const<'tcx>) {\n-        self.fields.add_const_equate_obligation(self.a_is_expected, a, b);\n+impl<'tcx> ObligationEmittingRelation<'tcx> for Glb<'_, '_, 'tcx> {\n+    fn register_predicates(\n+        &mut self,\n+        obligations: impl IntoIterator<Item = impl ty::ToPredicate<'tcx>>,\n+    ) {\n+        self.fields.register_predicates(obligations);\n+    }\n+\n+    fn register_obligations(&mut self, obligations: PredicateObligations<'tcx>) {\n+        self.fields.register_obligations(obligations);\n     }\n }"}, {"sha": "f377ac1d19e9c66a0554c7e113e45353f91e66de", "filename": "compiler/rustc_infer/src/infer/lattice.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1f89e2aef272e1222adc4bf95de2baf802c92a2d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flattice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f89e2aef272e1222adc4bf95de2baf802c92a2d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flattice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flattice.rs?ref=1f89e2aef272e1222adc4bf95de2baf802c92a2d", "patch": "@@ -17,11 +17,12 @@\n //!\n //! [lattices]: https://en.wikipedia.org/wiki/Lattice_(order)\n \n+use super::combine::ObligationEmittingRelation;\n use super::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use super::InferCtxt;\n \n-use crate::traits::{ObligationCause, PredicateObligation};\n-use rustc_middle::ty::relate::{RelateResult, TypeRelation};\n+use crate::traits::ObligationCause;\n+use rustc_middle::ty::relate::RelateResult;\n use rustc_middle::ty::TyVar;\n use rustc_middle::ty::{self, Ty};\n \n@@ -30,13 +31,11 @@ use rustc_middle::ty::{self, Ty};\n ///\n /// GLB moves \"down\" the lattice (to smaller values); LUB moves\n /// \"up\" the lattice (to bigger values).\n-pub trait LatticeDir<'f, 'tcx>: TypeRelation<'tcx> {\n+pub trait LatticeDir<'f, 'tcx>: ObligationEmittingRelation<'tcx> {\n     fn infcx(&self) -> &'f InferCtxt<'tcx>;\n \n     fn cause(&self) -> &ObligationCause<'tcx>;\n \n-    fn add_obligations(&mut self, obligations: Vec<PredicateObligation<'tcx>>);\n-\n     fn define_opaque_types(&self) -> bool;\n \n     // Relates the type `v` to `a` and `b` such that `v` represents\n@@ -113,7 +112,7 @@ where\n         | (_, &ty::Alias(ty::Opaque, ty::AliasTy { def_id, .. }))\n             if this.define_opaque_types() && def_id.is_local() =>\n         {\n-            this.add_obligations(\n+            this.register_obligations(\n                 infcx\n                     .handle_opaque_type(a, b, this.a_is_expected(), this.cause(), this.param_env())?\n                     .obligations,"}, {"sha": "f997171b97f2740a07029830f81967b16b39c98e", "filename": "compiler/rustc_infer/src/infer/lub.rs", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/1f89e2aef272e1222adc4bf95de2baf802c92a2d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f89e2aef272e1222adc4bf95de2baf802c92a2d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flub.rs?ref=1f89e2aef272e1222adc4bf95de2baf802c92a2d", "patch": "@@ -1,12 +1,11 @@\n //! Least upper bound. See [`lattice`].\n \n-use super::combine::CombineFields;\n+use super::combine::{CombineFields, ObligationEmittingRelation};\n use super::lattice::{self, LatticeDir};\n use super::InferCtxt;\n use super::Subtype;\n \n-use crate::infer::combine::ConstEquateRelation;\n-use crate::traits::{ObligationCause, PredicateObligation};\n+use crate::traits::{ObligationCause, PredicateObligations};\n use rustc_middle::ty::relate::{Relate, RelateResult, TypeRelation};\n use rustc_middle::ty::{self, Ty, TyCtxt};\n \n@@ -127,12 +126,6 @@ impl<'tcx> TypeRelation<'tcx> for Lub<'_, '_, 'tcx> {\n     }\n }\n \n-impl<'tcx> ConstEquateRelation<'tcx> for Lub<'_, '_, 'tcx> {\n-    fn const_equate_obligation(&mut self, a: ty::Const<'tcx>, b: ty::Const<'tcx>) {\n-        self.fields.add_const_equate_obligation(self.a_is_expected, a, b);\n-    }\n-}\n-\n impl<'combine, 'infcx, 'tcx> LatticeDir<'infcx, 'tcx> for Lub<'combine, 'infcx, 'tcx> {\n     fn infcx(&self) -> &'infcx InferCtxt<'tcx> {\n         self.fields.infcx\n@@ -142,10 +135,6 @@ impl<'combine, 'infcx, 'tcx> LatticeDir<'infcx, 'tcx> for Lub<'combine, 'infcx,\n         &self.fields.trace.cause\n     }\n \n-    fn add_obligations(&mut self, obligations: Vec<PredicateObligation<'tcx>>) {\n-        self.fields.obligations.extend(obligations)\n-    }\n-\n     fn relate_bound(&mut self, v: Ty<'tcx>, a: Ty<'tcx>, b: Ty<'tcx>) -> RelateResult<'tcx, ()> {\n         let mut sub = self.fields.sub(self.a_is_expected);\n         sub.relate(a, v)?;\n@@ -157,3 +146,16 @@ impl<'combine, 'infcx, 'tcx> LatticeDir<'infcx, 'tcx> for Lub<'combine, 'infcx,\n         self.fields.define_opaque_types\n     }\n }\n+\n+impl<'tcx> ObligationEmittingRelation<'tcx> for Lub<'_, '_, 'tcx> {\n+    fn register_predicates(\n+        &mut self,\n+        obligations: impl IntoIterator<Item = impl ty::ToPredicate<'tcx>>,\n+    ) {\n+        self.fields.register_predicates(obligations);\n+    }\n+\n+    fn register_obligations(&mut self, obligations: PredicateObligations<'tcx>) {\n+        self.fields.register_obligations(obligations)\n+    }\n+}"}, {"sha": "e77924900a07119f857d8b2502b29f1f457ef045", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1f89e2aef272e1222adc4bf95de2baf802c92a2d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f89e2aef272e1222adc4bf95de2baf802c92a2d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=1f89e2aef272e1222adc4bf95de2baf802c92a2d", "patch": "@@ -4,6 +4,7 @@ pub use self::LateBoundRegionConversionTime::*;\n pub use self::RegionVariableOrigin::*;\n pub use self::SubregionOrigin::*;\n pub use self::ValuePairs::*;\n+pub use combine::ObligationEmittingRelation;\n \n use self::opaque_types::OpaqueTypeStorage;\n pub(crate) use self::undo_log::{InferCtxtUndoLogs, Snapshot, UndoLog};"}, {"sha": "1dd5062acaf05cb28220b34cdc69d2426bcbfce7", "filename": "compiler/rustc_infer/src/infer/nll_relate/mod.rs", "status": "modified", "additions": 20, "deletions": 69, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/1f89e2aef272e1222adc4bf95de2baf802c92a2d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f89e2aef272e1222adc4bf95de2baf802c92a2d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs?ref=1f89e2aef272e1222adc4bf95de2baf802c92a2d", "patch": "@@ -21,11 +21,10 @@\n //!   thing we relate in chalk are basically domain goals and their\n //!   constituents)\n \n-use crate::infer::combine::ConstEquateRelation;\n use crate::infer::InferCtxt;\n use crate::infer::{ConstVarValue, ConstVariableValue};\n use crate::infer::{TypeVariableOrigin, TypeVariableOriginKind};\n-use crate::traits::{Obligation, PredicateObligation};\n+use crate::traits::{Obligation, PredicateObligations};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_middle::traits::ObligationCause;\n use rustc_middle::ty::error::TypeError;\n@@ -36,11 +35,7 @@ use rustc_span::Span;\n use std::fmt::Debug;\n use std::ops::ControlFlow;\n \n-#[derive(PartialEq)]\n-pub enum NormalizationStrategy {\n-    Lazy,\n-    Eager,\n-}\n+use super::combine::ObligationEmittingRelation;\n \n pub struct TypeRelating<'me, 'tcx, D>\n where\n@@ -92,7 +87,7 @@ pub trait TypeRelatingDelegate<'tcx> {\n         info: ty::VarianceDiagInfo<'tcx>,\n     );\n \n-    fn register_obligations(&mut self, obligations: Vec<PredicateObligation<'tcx>>);\n+    fn register_obligations(&mut self, obligations: PredicateObligations<'tcx>);\n \n     /// Creates a new universe index. Used when instantiating placeholders.\n     fn create_next_universe(&mut self) -> ty::UniverseIndex;\n@@ -125,9 +120,6 @@ pub trait TypeRelatingDelegate<'tcx> {\n     /// relation stating that `'?0: 'a`).\n     fn generalize_existential(&mut self, universe: ty::UniverseIndex) -> ty::Region<'tcx>;\n \n-    /// Define the normalization strategy to use, eager or lazy.\n-    fn normalization() -> NormalizationStrategy;\n-\n     /// Enables some optimizations if we do not expect inference variables\n     /// in the RHS of the relation.\n     fn forbid_inference_vars() -> bool;\n@@ -265,38 +257,6 @@ where\n         self.delegate.push_outlives(sup, sub, info);\n     }\n \n-    /// Relate a projection type and some value type lazily. This will always\n-    /// succeed, but we push an additional `ProjectionEq` goal depending\n-    /// on the value type:\n-    /// - if the value type is any type `T` which is not a projection, we push\n-    ///   `ProjectionEq(projection = T)`.\n-    /// - if the value type is another projection `other_projection`, we create\n-    ///   a new inference variable `?U` and push the two goals\n-    ///   `ProjectionEq(projection = ?U)`, `ProjectionEq(other_projection = ?U)`.\n-    fn relate_projection_ty(\n-        &mut self,\n-        projection_ty: ty::AliasTy<'tcx>,\n-        value_ty: Ty<'tcx>,\n-    ) -> Ty<'tcx> {\n-        use rustc_span::DUMMY_SP;\n-\n-        match *value_ty.kind() {\n-            ty::Alias(ty::Projection, other_projection_ty) => {\n-                let var = self.infcx.next_ty_var(TypeVariableOrigin {\n-                    kind: TypeVariableOriginKind::MiscVariable,\n-                    span: DUMMY_SP,\n-                });\n-                // FIXME(lazy-normalization): This will always ICE, because the recursive\n-                // call will end up in the _ arm below.\n-                self.relate_projection_ty(projection_ty, var);\n-                self.relate_projection_ty(other_projection_ty, var);\n-                var\n-            }\n-\n-            _ => bug!(\"should never be invoked with eager normalization\"),\n-        }\n-    }\n-\n     /// Relate a type inference variable with a value type. This works\n     /// by creating a \"generalization\" G of the value where all the\n     /// lifetimes are replaced with fresh inference values. This\n@@ -335,12 +295,6 @@ where\n                 return Ok(value_ty);\n             }\n \n-            ty::Alias(ty::Projection, projection_ty)\n-                if D::normalization() == NormalizationStrategy::Lazy =>\n-            {\n-                return Ok(self.relate_projection_ty(projection_ty, self.infcx.tcx.mk_ty_var(vid)));\n-            }\n-\n             _ => (),\n         }\n \n@@ -627,18 +581,6 @@ where\n                 self.relate_opaques(a, b)\n             }\n \n-            (&ty::Alias(ty::Projection, projection_ty), _)\n-                if D::normalization() == NormalizationStrategy::Lazy =>\n-            {\n-                Ok(self.relate_projection_ty(projection_ty, b))\n-            }\n-\n-            (_, &ty::Alias(ty::Projection, projection_ty))\n-                if D::normalization() == NormalizationStrategy::Lazy =>\n-            {\n-                Ok(self.relate_projection_ty(projection_ty, a))\n-            }\n-\n             _ => {\n                 debug!(?a, ?b, ?self.ambient_variance);\n \n@@ -813,17 +755,26 @@ where\n     }\n }\n \n-impl<'tcx, D> ConstEquateRelation<'tcx> for TypeRelating<'_, 'tcx, D>\n+impl<'tcx, D> ObligationEmittingRelation<'tcx> for TypeRelating<'_, 'tcx, D>\n where\n     D: TypeRelatingDelegate<'tcx>,\n {\n-    fn const_equate_obligation(&mut self, a: ty::Const<'tcx>, b: ty::Const<'tcx>) {\n-        self.delegate.register_obligations(vec![Obligation::new(\n-            self.tcx(),\n-            ObligationCause::dummy(),\n-            self.param_env(),\n-            ty::Binder::dummy(ty::PredicateKind::ConstEquate(a, b)),\n-        )]);\n+    fn register_predicates(\n+        &mut self,\n+        obligations: impl IntoIterator<Item = impl ty::ToPredicate<'tcx>>,\n+    ) {\n+        self.delegate.register_obligations(\n+            obligations\n+                .into_iter()\n+                .map(|to_pred| {\n+                    Obligation::new(self.tcx(), ObligationCause::dummy(), self.param_env(), to_pred)\n+                })\n+                .collect(),\n+        );\n+    }\n+\n+    fn register_obligations(&mut self, obligations: PredicateObligations<'tcx>) {\n+        self.delegate.register_obligations(obligations);\n     }\n }\n "}, {"sha": "bf1b34415470c5fde25357c65c1bb7da9667fedb", "filename": "compiler/rustc_infer/src/infer/sub.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1f89e2aef272e1222adc4bf95de2baf802c92a2d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fsub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f89e2aef272e1222adc4bf95de2baf802c92a2d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fsub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fsub.rs?ref=1f89e2aef272e1222adc4bf95de2baf802c92a2d", "patch": "@@ -1,8 +1,7 @@\n use super::combine::{CombineFields, RelationDir};\n-use super::SubregionOrigin;\n+use super::{ObligationEmittingRelation, SubregionOrigin};\n \n-use crate::infer::combine::ConstEquateRelation;\n-use crate::traits::Obligation;\n+use crate::traits::{Obligation, PredicateObligations};\n use rustc_middle::ty::relate::{Cause, Relate, RelateResult, TypeRelation};\n use rustc_middle::ty::visit::TypeVisitable;\n use rustc_middle::ty::TyVar;\n@@ -228,8 +227,15 @@ impl<'tcx> TypeRelation<'tcx> for Sub<'_, '_, 'tcx> {\n     }\n }\n \n-impl<'tcx> ConstEquateRelation<'tcx> for Sub<'_, '_, 'tcx> {\n-    fn const_equate_obligation(&mut self, a: ty::Const<'tcx>, b: ty::Const<'tcx>) {\n-        self.fields.add_const_equate_obligation(self.a_is_expected, a, b);\n+impl<'tcx> ObligationEmittingRelation<'tcx> for Sub<'_, '_, 'tcx> {\n+    fn register_predicates(\n+        &mut self,\n+        obligations: impl IntoIterator<Item = impl ty::ToPredicate<'tcx>>,\n+    ) {\n+        self.fields.register_predicates(obligations);\n+    }\n+\n+    fn register_obligations(&mut self, obligations: PredicateObligations<'tcx>) {\n+        self.fields.register_obligations(obligations);\n     }\n }"}, {"sha": "bf36b3e5ada298b18b67405e4580d5c4b6e99506", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f89e2aef272e1222adc4bf95de2baf802c92a2d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f89e2aef272e1222adc4bf95de2baf802c92a2d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=1f89e2aef272e1222adc4bf95de2baf802c92a2d", "patch": "@@ -2230,6 +2230,10 @@ impl<'tcx> TyCtxt<'tcx> {\n             })\n         )\n     }\n+\n+    pub fn trait_solver_next(self) -> bool {\n+        self.sess.opts.unstable_opts.trait_solver == rustc_session::config::TraitSolver::Next\n+    }\n }\n \n impl<'tcx> TyCtxtAt<'tcx> {"}, {"sha": "9474c70cb535e8aeaae5068c48a2f4dfbacbef0e", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/method_chain.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1f89e2aef272e1222adc4bf95de2baf802c92a2d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmethod_chain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f89e2aef272e1222adc4bf95de2baf802c92a2d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmethod_chain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmethod_chain.rs?ref=1f89e2aef272e1222adc4bf95de2baf802c92a2d", "patch": "@@ -1,5 +1,7 @@\n use crate::infer::InferCtxt;\n \n+use rustc_infer::infer::ObligationEmittingRelation;\n+use rustc_infer::traits::PredicateObligations;\n use rustc_middle::ty::error::TypeError;\n use rustc_middle::ty::relate::{self, Relate, RelateResult, TypeRelation};\n use rustc_middle::ty::{self, Ty, TyCtxt};\n@@ -88,3 +90,16 @@ impl<'a, 'tcx> TypeRelation<'tcx> for CollectAllMismatches<'a, 'tcx> {\n         Ok(a.rebind(self.relate(a.skip_binder(), b.skip_binder())?))\n     }\n }\n+\n+impl<'tcx> ObligationEmittingRelation<'tcx> for CollectAllMismatches<'_, 'tcx> {\n+    fn register_obligations(&mut self, _obligations: PredicateObligations<'tcx>) {\n+        // FIXME(deferred_projection_equality)\n+    }\n+\n+    fn register_predicates(\n+        &mut self,\n+        _obligations: impl IntoIterator<Item = impl ty::ToPredicate<'tcx>>,\n+    ) {\n+        // FIXME(deferred_projection_equality)\n+    }\n+}"}]}