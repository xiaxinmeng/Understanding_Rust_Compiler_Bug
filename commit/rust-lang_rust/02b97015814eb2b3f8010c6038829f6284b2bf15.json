{"sha": "02b97015814eb2b3f8010c6038829f6284b2bf15", "node_id": "C_kwDOAAsO6NoAKDAyYjk3MDE1ODE0ZWIyYjNmODAxMGM2MDM4ODI5ZjYyODRiMmJmMTU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-07-16T20:30:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-16T20:30:51Z"}, "message": "Rollup merge of #99287 - GuillaumeGomez:rustdoc-json-double-export, r=notriddle\n\n[rustdoc-json] JSON no longer inlines\n\nFixes #98007.\nFixes #96161.\nFixes https://github.com/rust-lang/rust/issues/83057.\nFixes https://github.com/rust-lang/rust/issues/83720.\n\nI took over #93518 and applied the comments and added more tests.\n\nThere was one thing missing (which is in the second commit): if a non-exported item was used in a public API but not reexported, it was still missing.\n\ncc `@CraftSpider` `@Urgau` `@Enselic`\n\nr? `@notriddle`", "tree": {"sha": "f8991b86e5b950f5d0126abd6fda27e179a99cdb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8991b86e5b950f5d0126abd6fda27e179a99cdb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/02b97015814eb2b3f8010c6038829f6284b2bf15", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi0x/8CRBK7hj4Ov3rIwAAR2EIAJM3BDCSMMLjbxJokOoDaYUV\nmIuCj/dHVI65aiWXjXLUycLz/PK4YaZliO2IwV/ZZnuRLw/L7T9EexkJG9Fsz2IN\nn7/TjKuxaxxL5JFaIK1AdHAQKV7rGY2w5Jhuo4y3bG9VgjPl8jt6l+uPQ4Y5dfon\nrxasi6yuTHjbpNkOm3gaVxuZYg4IraW4w3Tged9JlZZzDYVIJtut9DrMi4gVREWG\nTrhxTLZct7HVIQirBX8SHe7nb50mOhpxvFzVWJ9atxeiz6F+vSuvd8cchj+Mg9sK\n9x1DPtHInm8mjTmMJ9Wtp03A9Ix+HcAI4JriEI2x+AJ1NTsnPbM2sWqJ6q7nM8s=\n=sFEl\n-----END PGP SIGNATURE-----\n", "payload": "tree f8991b86e5b950f5d0126abd6fda27e179a99cdb\nparent fa298beb7941eaab01960630bfad13e40317ad00\nparent b95b1389c50f000683c7c2fc5f8713cb5d3bfa96\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1658003451 +0200\ncommitter GitHub <noreply@github.com> 1658003451 +0200\n\nRollup merge of #99287 - GuillaumeGomez:rustdoc-json-double-export, r=notriddle\n\n[rustdoc-json] JSON no longer inlines\n\nFixes #98007.\nFixes #96161.\nFixes https://github.com/rust-lang/rust/issues/83057.\nFixes https://github.com/rust-lang/rust/issues/83720.\n\nI took over #93518 and applied the comments and added more tests.\n\nThere was one thing missing (which is in the second commit): if a non-exported item was used in a public API but not reexported, it was still missing.\n\ncc `@CraftSpider` `@Urgau` `@Enselic`\n\nr? `@notriddle`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/02b97015814eb2b3f8010c6038829f6284b2bf15", "html_url": "https://github.com/rust-lang/rust/commit/02b97015814eb2b3f8010c6038829f6284b2bf15", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/02b97015814eb2b3f8010c6038829f6284b2bf15/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa298beb7941eaab01960630bfad13e40317ad00", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa298beb7941eaab01960630bfad13e40317ad00", "html_url": "https://github.com/rust-lang/rust/commit/fa298beb7941eaab01960630bfad13e40317ad00"}, {"sha": "b95b1389c50f000683c7c2fc5f8713cb5d3bfa96", "url": "https://api.github.com/repos/rust-lang/rust/commits/b95b1389c50f000683c7c2fc5f8713cb5d3bfa96", "html_url": "https://github.com/rust-lang/rust/commit/b95b1389c50f000683c7c2fc5f8713cb5d3bfa96"}], "stats": {"total": 229, "additions": 194, "deletions": 35}, "files": [{"sha": "d6260b8ca06e48f0082982a905b40b4a43c2a3e2", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/02b97015814eb2b3f8010c6038829f6284b2bf15/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02b97015814eb2b3f8010c6038829f6284b2bf15/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=02b97015814eb2b3f8010c6038829f6284b2bf15", "patch": "@@ -2120,8 +2120,9 @@ fn clean_use_statement<'tcx>(\n     // forcefully don't inline if this is not public or if the\n     // #[doc(no_inline)] attribute is present.\n     // Don't inline doc(hidden) imports so they can be stripped at a later stage.\n-    let mut denied = !(visibility.is_public()\n-        || (cx.render_options.document_private && is_visible_from_parent_mod))\n+    let mut denied = cx.output_format.is_json()\n+        || !(visibility.is_public()\n+            || (cx.render_options.document_private && is_visible_from_parent_mod))\n         || pub_underscore\n         || attrs.iter().any(|a| {\n             a.has_name(sym::doc)"}, {"sha": "0e9a9e0e506464bd2fd2bb585374942c840bc8ff", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/02b97015814eb2b3f8010c6038829f6284b2bf15/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02b97015814eb2b3f8010c6038829f6284b2bf15/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=02b97015814eb2b3f8010c6038829f6284b2bf15", "patch": "@@ -81,6 +81,8 @@ pub(crate) struct DocContext<'tcx> {\n     pub(crate) inlined: FxHashSet<ItemId>,\n     /// Used by `calculate_doc_coverage`.\n     pub(crate) output_format: OutputFormat,\n+    /// Used by `strip_private`.\n+    pub(crate) show_coverage: bool,\n }\n \n impl<'tcx> DocContext<'tcx> {\n@@ -381,6 +383,7 @@ pub(crate) fn run_global_ctxt(\n         inlined: FxHashSet::default(),\n         output_format,\n         render_options,\n+        show_coverage,\n     };\n \n     // Small hack to force the Sized trait to be present."}, {"sha": "2598b9b0b28c20e982287ac7ee0eca48d972d056", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 26, "deletions": 4, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/02b97015814eb2b3f8010c6038829f6284b2bf15/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02b97015814eb2b3f8010c6038829f6284b2bf15/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=02b97015814eb2b3f8010c6038829f6284b2bf15", "patch": "@@ -43,7 +43,16 @@ impl JsonRenderer<'_> {\n         let span = item.span(self.tcx);\n         let clean::Item { name, attrs: _, kind: _, visibility, item_id, cfg: _ } = item;\n         let inner = match *item.kind {\n-            clean::StrippedItem(_) | clean::KeywordItem(_) => return None,\n+            clean::KeywordItem(_) => return None,\n+            clean::StrippedItem(ref inner) => {\n+                match &**inner {\n+                    // We document non-empty stripped modules as with `Module::is_stripped` set to\n+                    // `true`, to prevent contained items from being orphaned for downstream users,\n+                    // as JSON does no inlining.\n+                    clean::ModuleItem(m) if !m.items.is_empty() => from_clean_item(item, self.tcx),\n+                    _ => return None,\n+                }\n+            }\n             _ => from_clean_item(item, self.tcx),\n         };\n         Some(Item {\n@@ -220,7 +229,9 @@ fn from_clean_item(item: clean::Item, tcx: TyCtxt<'_>) -> ItemEnum {\n     let header = item.fn_header(tcx);\n \n     match *item.kind {\n-        ModuleItem(m) => ItemEnum::Module(Module { is_crate, items: ids(m.items, tcx) }),\n+        ModuleItem(m) => {\n+            ItemEnum::Module(Module { is_crate, items: ids(m.items, tcx), is_stripped: false })\n+        }\n         ImportItem(i) => ItemEnum::Import(i.into_tcx(tcx)),\n         StructItem(s) => ItemEnum::Struct(s.into_tcx(tcx)),\n         UnionItem(u) => ItemEnum::Union(u.into_tcx(tcx)),\n@@ -257,8 +268,19 @@ fn from_clean_item(item: clean::Item, tcx: TyCtxt<'_>) -> ItemEnum {\n             bounds: b.into_iter().map(|x| x.into_tcx(tcx)).collect(),\n             default: Some(t.item_type.unwrap_or(t.type_).into_tcx(tcx)),\n         },\n-        // `convert_item` early returns `None` for striped items and keywords.\n-        StrippedItem(_) | KeywordItem(_) => unreachable!(),\n+        // `convert_item` early returns `None` for stripped items and keywords.\n+        KeywordItem(_) => unreachable!(),\n+        StrippedItem(inner) => {\n+            match *inner {\n+                ModuleItem(m) => ItemEnum::Module(Module {\n+                    is_crate,\n+                    items: ids(m.items, tcx),\n+                    is_stripped: true,\n+                }),\n+                // `convert_item` early returns `None` for stripped items we're not including\n+                _ => unreachable!(),\n+            }\n+        }\n         ExternCrateItem { ref src } => ItemEnum::ExternCrate {\n             name: name.as_ref().unwrap().to_string(),\n             rename: src.map(|x| x.to_string()),"}, {"sha": "6364d00d0624e5a938eaca00b7167253a2bec21c", "filename": "src/librustdoc/json/mod.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/02b97015814eb2b3f8010c6038829f6284b2bf15/src%2Flibrustdoc%2Fjson%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02b97015814eb2b3f8010c6038829f6284b2bf15/src%2Flibrustdoc%2Fjson%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fmod.rs?ref=02b97015814eb2b3f8010c6038829f6284b2bf15", "patch": "@@ -21,6 +21,7 @@ use rustc_span::def_id::LOCAL_CRATE;\n use rustdoc_json_types as types;\n \n use crate::clean::types::{ExternalCrate, ExternalLocation};\n+use crate::clean::ItemKind;\n use crate::config::RenderOptions;\n use crate::docfs::PathError;\n use crate::error::Error;\n@@ -175,6 +176,14 @@ impl<'tcx> FormatRenderer<'tcx> for JsonRenderer<'tcx> {\n     /// the hashmap because certain items (traits and types) need to have their mappings for trait\n     /// implementations filled out before they're inserted.\n     fn item(&mut self, item: clean::Item) -> Result<(), Error> {\n+        trace!(\"rendering {} {:?}\", item.type_(), item.name);\n+\n+        // Flatten items that recursively store other items. We include orphaned items from\n+        // stripped modules and etc that are otherwise reachable.\n+        if let ItemKind::StrippedItem(inner) = &*item.kind {\n+            inner.inner_items().for_each(|i| self.item(i.clone()).unwrap());\n+        }\n+\n         // Flatten items that recursively store other items\n         item.kind.inner_items().for_each(|i| self.item(i.clone()).unwrap());\n "}, {"sha": "9ba841a31cf9545b71a207ffb4cd7958dae6e72c", "filename": "src/librustdoc/passes/strip_private.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/02b97015814eb2b3f8010c6038829f6284b2bf15/src%2Flibrustdoc%2Fpasses%2Fstrip_private.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02b97015814eb2b3f8010c6038829f6284b2bf15/src%2Flibrustdoc%2Fpasses%2Fstrip_private.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fstrip_private.rs?ref=02b97015814eb2b3f8010c6038829f6284b2bf15", "patch": "@@ -24,6 +24,7 @@ pub(crate) fn strip_private(mut krate: clean::Crate, cx: &mut DocContext<'_>) ->\n             retained: &mut retained,\n             access_levels: &cx.cache.access_levels,\n             update_retained: true,\n+            is_json_output: cx.output_format.is_json() && !cx.show_coverage,\n         };\n         krate = ImportStripper.fold_crate(stripper.fold_crate(krate));\n     }"}, {"sha": "5f2f50e712b532f9f822608de8bb928aebd9ab52", "filename": "src/librustdoc/passes/stripper.rs", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/02b97015814eb2b3f8010c6038829f6284b2bf15/src%2Flibrustdoc%2Fpasses%2Fstripper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02b97015814eb2b3f8010c6038829f6284b2bf15/src%2Flibrustdoc%2Fpasses%2Fstripper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fstripper.rs?ref=02b97015814eb2b3f8010c6038829f6284b2bf15", "patch": "@@ -3,14 +3,29 @@ use rustc_hir::def_id::DefId;\n use rustc_middle::middle::privacy::AccessLevels;\n use std::mem;\n \n-use crate::clean::{self, Item, ItemIdSet};\n+use crate::clean::{self, Item, ItemId, ItemIdSet};\n use crate::fold::{strip_item, DocFolder};\n use crate::formats::cache::Cache;\n \n pub(crate) struct Stripper<'a> {\n     pub(crate) retained: &'a mut ItemIdSet,\n     pub(crate) access_levels: &'a AccessLevels<DefId>,\n     pub(crate) update_retained: bool,\n+    pub(crate) is_json_output: bool,\n+}\n+\n+impl<'a> Stripper<'a> {\n+    // We need to handle this differently for the JSON output because some non exported items could\n+    // be used in public API. And so, we need these items as well. `is_exported` only checks if they\n+    // are in the public API, which is not enough.\n+    #[inline]\n+    fn is_item_reachable(&self, item_id: ItemId) -> bool {\n+        if self.is_json_output {\n+            self.access_levels.is_reachable(item_id.expect_def_id())\n+        } else {\n+            self.access_levels.is_exported(item_id.expect_def_id())\n+        }\n+    }\n }\n \n impl<'a> DocFolder for Stripper<'a> {\n@@ -45,9 +60,8 @@ impl<'a> DocFolder for Stripper<'a> {\n             | clean::TraitAliasItem(..)\n             | clean::MacroItem(..)\n             | clean::ForeignTypeItem => {\n-                if i.item_id.is_local()\n-                    && !self.access_levels.is_exported(i.item_id.expect_def_id())\n-                {\n+                let item_id = i.item_id;\n+                if item_id.is_local() && !self.is_item_reachable(item_id) {\n                     debug!(\"Stripper: stripping {:?} {:?}\", i.type_(), i.name);\n                     return None;\n                 }"}, {"sha": "ca7a20bf3688a934fd2a36a937c253e8f40f0b5f", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02b97015814eb2b3f8010c6038829f6284b2bf15/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02b97015814eb2b3f8010c6038829f6284b2bf15/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=02b97015814eb2b3f8010c6038829f6284b2bf15", "patch": "@@ -190,6 +190,10 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n     ) -> bool {\n         debug!(\"maybe_inline_local res: {:?}\", res);\n \n+        if self.cx.output_format.is_json() {\n+            return false;\n+        }\n+\n         let tcx = self.cx.tcx;\n         let Some(res_did) = res.opt_def_id() else {\n             return false;"}, {"sha": "761e94c7ebbc44d66df46c8dab17b9c3b1c9cffe", "filename": "src/rustdoc-json-types/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/02b97015814eb2b3f8010c6038829f6284b2bf15/src%2Frustdoc-json-types%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02b97015814eb2b3f8010c6038829f6284b2bf15/src%2Frustdoc-json-types%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc-json-types%2Flib.rs?ref=02b97015814eb2b3f8010c6038829f6284b2bf15", "patch": "@@ -9,7 +9,7 @@ use std::path::PathBuf;\n use serde::{Deserialize, Serialize};\n \n /// rustdoc format-version.\n-pub const FORMAT_VERSION: u32 = 15;\n+pub const FORMAT_VERSION: u32 = 16;\n \n /// A `Crate` is the root of the emitted JSON blob. It contains all type/documentation information\n /// about the language items in the local crate, as well as info about external items to allow\n@@ -245,6 +245,9 @@ pub enum ItemEnum {\n pub struct Module {\n     pub is_crate: bool,\n     pub items: Vec<Id>,\n+    /// If `true`, this module is not part of the public API, but it contains\n+    /// items that are re-exported as public API.\n+    pub is_stripped: bool,\n }\n \n #[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]"}, {"sha": "5c4ccf996a54f6e7fc726031254aea8ec8391aad", "filename": "src/test/rustdoc-json/doc_hidden_failure.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/02b97015814eb2b3f8010c6038829f6284b2bf15/src%2Ftest%2Frustdoc-json%2Fdoc_hidden_failure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02b97015814eb2b3f8010c6038829f6284b2bf15/src%2Ftest%2Frustdoc-json%2Fdoc_hidden_failure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fdoc_hidden_failure.rs?ref=02b97015814eb2b3f8010c6038829f6284b2bf15", "patch": "@@ -0,0 +1,22 @@\n+// Regression test for <https://github.com/rust-lang/rust/issues/98007>.\n+\n+#![feature(no_core)]\n+#![no_core]\n+\n+mod auto {\n+    mod action_row {\n+        pub struct ActionRowBuilder;\n+    }\n+\n+    #[doc(hidden)]\n+    pub mod builders {\n+        pub use super::action_row::ActionRowBuilder;\n+    }\n+}\n+\n+// @count doc_hidden_failure.json \"$.index[*][?(@.name=='builders')]\" 2\n+pub use auto::*;\n+\n+pub mod builders {\n+    pub use crate::auto::builders::*;\n+}"}, {"sha": "4a835673a596bcd05404f43d34082bf2785f2a9d", "filename": "src/test/rustdoc-json/reexport/auxiliary/pub-struct.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/02b97015814eb2b3f8010c6038829f6284b2bf15/src%2Ftest%2Frustdoc-json%2Freexport%2Fauxiliary%2Fpub-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02b97015814eb2b3f8010c6038829f6284b2bf15/src%2Ftest%2Frustdoc-json%2Freexport%2Fauxiliary%2Fpub-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Freexport%2Fauxiliary%2Fpub-struct.rs?ref=02b97015814eb2b3f8010c6038829f6284b2bf15", "patch": "@@ -0,0 +1 @@\n+pub struct Foo;"}, {"sha": "ba1cfd8a0b5775ba6dab6a52e887ea6d47ab8a1d", "filename": "src/test/rustdoc-json/reexport/glob_extern.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/02b97015814eb2b3f8010c6038829f6284b2bf15/src%2Ftest%2Frustdoc-json%2Freexport%2Fglob_extern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02b97015814eb2b3f8010c6038829f6284b2bf15/src%2Ftest%2Frustdoc-json%2Freexport%2Fglob_extern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Freexport%2Fglob_extern.rs?ref=02b97015814eb2b3f8010c6038829f6284b2bf15", "patch": "@@ -3,15 +3,16 @@\n #![no_core]\n #![feature(no_core)]\n \n-// @!has glob_extern.json \"$.index[*][?(@.name=='mod1')]\"\n+// @is glob_extern.json \"$.index[*][?(@.name=='mod1')].kind\" \\\"module\\\"\n+// @is glob_extern.json \"$.index[*][?(@.name=='mod1')].inner.is_stripped\" \"true\"\n mod mod1 {\n     extern \"C\" {\n-        // @set public_fn_id = - \"$.index[*][?(@.name=='public_fn')].id\"\n+        // @has - \"$.index[*][?(@.name=='public_fn')].id\"\n         pub fn public_fn();\n         // @!has - \"$.index[*][?(@.name=='private_fn')]\"\n         fn private_fn();\n     }\n }\n \n-// @has - \"$.index[*][?(@.name=='glob_extern')].inner.items[*]\" $public_fn_id\n+// @is - \"$.index[*][?(@.kind=='import')].inner.glob\" true\n pub use mod1::*;"}, {"sha": "e6a44748c25fbd3b162f5e89096fb036f1cf3031", "filename": "src/test/rustdoc-json/reexport/glob_private.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/02b97015814eb2b3f8010c6038829f6284b2bf15/src%2Ftest%2Frustdoc-json%2Freexport%2Fglob_private.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02b97015814eb2b3f8010c6038829f6284b2bf15/src%2Ftest%2Frustdoc-json%2Freexport%2Fglob_private.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Freexport%2Fglob_private.rs?ref=02b97015814eb2b3f8010c6038829f6284b2bf15", "patch": "@@ -3,25 +3,30 @@\n #![no_core]\n #![feature(no_core)]\n \n-// @!has glob_private.json \"$.index[*][?(@.name=='mod1')]\"\n+// @is glob_private.json \"$.index[*][?(@.name=='mod1')].kind\" \\\"module\\\"\n+// @is glob_private.json \"$.index[*][?(@.name=='mod1')].inner.is_stripped\" \"true\"\n mod mod1 {\n-    // @!has - \"$.index[*][?(@.name=='mod2')]\"\n+    // @is - \"$.index[*][?(@.name=='mod2')].kind\" \\\"module\\\"\n+    // @is - \"$.index[*][?(@.name=='mod2')].inner.is_stripped\" \"true\"\n     mod mod2 {\n         // @set m2pub_id = - \"$.index[*][?(@.name=='Mod2Public')].id\"\n         pub struct Mod2Public;\n \n         // @!has - \"$.index[*][?(@.name=='Mod2Private')]\"\n         struct Mod2Private;\n     }\n+\n+    // @has - \"$.index[*][?(@.kind=='import' && @.inner.name=='mod2')]\"\n     pub use self::mod2::*;\n \n     // @set m1pub_id = - \"$.index[*][?(@.name=='Mod1Public')].id\"\n     pub struct Mod1Public;\n-\n     // @!has - \"$.index[*][?(@.name=='Mod1Private')]\"\n     struct Mod1Private;\n }\n+\n+// @has - \"$.index[*][?(@.kind=='import' && @.inner.name=='mod1')]\"\n pub use mod1::*;\n \n-// @has - \"$.index[*][?(@.name=='glob_private')].inner.items[*]\" $m2pub_id\n-// @has - \"$.index[*][?(@.name=='glob_private')].inner.items[*]\" $m1pub_id\n+// @has - \"$.index[*][?(@.name=='mod2')].inner.items[*]\" $m2pub_id\n+// @has - \"$.index[*][?(@.name=='mod1')].inner.items[*]\" $m1pub_id"}, {"sha": "7bf10a986861658005557d7ed770e7f071d61d07", "filename": "src/test/rustdoc-json/reexport/in_root_and_mod.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/02b97015814eb2b3f8010c6038829f6284b2bf15/src%2Ftest%2Frustdoc-json%2Freexport%2Fin_root_and_mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02b97015814eb2b3f8010c6038829f6284b2bf15/src%2Ftest%2Frustdoc-json%2Freexport%2Fin_root_and_mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Freexport%2Fin_root_and_mod.rs?ref=02b97015814eb2b3f8010c6038829f6284b2bf15", "patch": "@@ -1,15 +1,17 @@\n #![feature(no_core)]\n #![no_core]\n \n+// @is in_root_and_mod.json \"$.index[*][?(@.name=='foo')].kind\" \\\"module\\\"\n+// @is in_root_and_mod.json \"$.index[*][?(@.name=='foo')].inner.is_stripped\" \"true\"\n mod foo {\n-    // @set foo_id = in_root_and_mod.json \"$.index[*][?(@.name=='Foo')].id\"\n+    // @has - \"$.index[*][?(@.name=='Foo')]\"\n     pub struct Foo;\n }\n \n-// @has - \"$.index[*][?(@.name=='in_root_and_mod')].inner.items[*]\" $foo_id\n+// @has - \"$.index[*][?(@.kind=='import' && @.inner.source=='foo::Foo')]\"\n pub use foo::Foo;\n \n pub mod bar {\n-    // @has - \"$.index[*][?(@.name=='bar')].inner.items[*]\" $foo_id\n+    // @has - \"$.index[*][?(@.kind=='import' && @.inner.source=='crate::foo::Foo')]\"\n     pub use crate::foo::Foo;\n }"}, {"sha": "327b0f45fdd54d6af4f01cb9628381c88d0ff9ac", "filename": "src/test/rustdoc-json/reexport/private_twice_one_inline.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/02b97015814eb2b3f8010c6038829f6284b2bf15/src%2Ftest%2Frustdoc-json%2Freexport%2Fprivate_twice_one_inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02b97015814eb2b3f8010c6038829f6284b2bf15/src%2Ftest%2Frustdoc-json%2Freexport%2Fprivate_twice_one_inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Freexport%2Fprivate_twice_one_inline.rs?ref=02b97015814eb2b3f8010c6038829f6284b2bf15", "patch": "@@ -0,0 +1,18 @@\n+// aux-build:pub-struct.rs\n+\n+// Test for the ICE in rust/83057\n+// Am external type re-exported with different attributes shouldn't cause an error\n+\n+#![no_core]\n+#![feature(no_core)]\n+\n+extern crate pub_struct as foo;\n+\n+#[doc(inline)]\n+pub use foo::Foo;\n+\n+pub mod bar {\n+    pub use foo::Foo;\n+}\n+\n+// @count private_twice_one_inline.json \"$.index[*][?(@.kind=='import')]\" 2"}, {"sha": "36d6a50d385a21ecee5cceb7f6f4025cf4b05fee", "filename": "src/test/rustdoc-json/reexport/private_two_names.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/02b97015814eb2b3f8010c6038829f6284b2bf15/src%2Ftest%2Frustdoc-json%2Freexport%2Fprivate_two_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02b97015814eb2b3f8010c6038829f6284b2bf15/src%2Ftest%2Frustdoc-json%2Freexport%2Fprivate_two_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Freexport%2Fprivate_two_names.rs?ref=02b97015814eb2b3f8010c6038829f6284b2bf15", "patch": "@@ -0,0 +1,17 @@\n+// Test for the ICE in rust/83720\n+// A pub-in-private type re-exported under two different names shouldn't cause an error\n+\n+#![no_core]\n+#![feature(no_core)]\n+\n+// @is private_two_names.json \"$.index[*][?(@.name=='style')].kind\" \\\"module\\\"\n+// @is private_two_names.json \"$.index[*][?(@.name=='style')].inner.is_stripped\" \"true\"\n+mod style {\n+    // @has - \"$.index[*](?(@.name=='Color'))\"\n+    pub struct Color;\n+}\n+\n+// @has - \"$.index[*][?(@.kind=='import' && @.inner.name=='Color')]\"\n+pub use style::Color;\n+// @has - \"$.index[*][?(@.kind=='import' && @.inner.name=='Colour')]\"\n+pub use style::Color as Colour;"}, {"sha": "2476399bd561cdfcf3bfed9656ac7848302bbc6b", "filename": "src/test/rustdoc-json/reexport/rename_private.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/02b97015814eb2b3f8010c6038829f6284b2bf15/src%2Ftest%2Frustdoc-json%2Freexport%2Frename_private.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02b97015814eb2b3f8010c6038829f6284b2bf15/src%2Ftest%2Frustdoc-json%2Freexport%2Frename_private.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Freexport%2Frename_private.rs?ref=02b97015814eb2b3f8010c6038829f6284b2bf15", "patch": "@@ -2,13 +2,13 @@\n \n #![no_core]\n #![feature(no_core)]\n-// @!has rename_private.json \"$.index[*][?(@.name=='inner')]\"\n+\n+// @is rename_private.json \"$.index[*][?(@.name=='inner')].kind\" \\\"module\\\"\n+// @is rename_private.json \"$.index[*][?(@.name=='inner')].inner.is_stripped\" \"true\"\n mod inner {\n-    // @!has - \"$.index[*][?(@.name=='Public')]\"\n+    // @has - \"$.index[*][?(@.name=='Public')]\"\n     pub struct Public;\n }\n \n-// @set newname_id = - \"$.index[*][?(@.name=='NewName')].id\"\n-// @is - \"$.index[*][?(@.name=='NewName')].kind\" \\\"struct\\\"\n-// @has - \"$.index[*][?(@.name=='rename_private')].inner.items[*]\" $newname_id\n+// @is - \"$.index[*][?(@.kind=='import')].inner.name\" \\\"NewName\\\"\n pub use inner::Public as NewName;"}, {"sha": "eedddd6a7bb48182f86b5aea8d58c0f7035a480c", "filename": "src/test/rustdoc-json/reexport/same_type_reexported_more_than_once.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/02b97015814eb2b3f8010c6038829f6284b2bf15/src%2Ftest%2Frustdoc-json%2Freexport%2Fsame_type_reexported_more_than_once.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02b97015814eb2b3f8010c6038829f6284b2bf15/src%2Ftest%2Frustdoc-json%2Freexport%2Fsame_type_reexported_more_than_once.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Freexport%2Fsame_type_reexported_more_than_once.rs?ref=02b97015814eb2b3f8010c6038829f6284b2bf15", "patch": "@@ -1,15 +1,13 @@\n-// Regression test for https://github.com/rust-lang/rust/issues/97432.\n+// Regression test for <https://github.com/rust-lang/rust/issues/97432>.\n \n #![feature(no_core)]\n #![no_std]\n #![no_core]\n \n // @has same_type_reexported_more_than_once.json\n-// @set trait_id = - \"$.index[*][?(@.name=='Trait')].id\"\n-// @has - \"$.index[*][?(@.name=='same_type_reexported_more_than_once')].inner.items[*]\" $trait_id\n+// @has - \"$.index[*][?(@.name=='Trait')]\"\n pub use inner::Trait;\n-// @set reexport_id = - \"$.index[*][?(@.name=='Reexport')].id\"\n-// @has - \"$.index[*][?(@.name=='same_type_reexported_more_than_once')].inner.items[*]\" $reexport_id\n+// @has - \"$.index[*].inner[?(@.name=='Reexport')].id\"\n pub use inner::Trait as Reexport;\n \n mod inner {"}, {"sha": "5ec13e403aef694a01cb05be115926afab93b8d9", "filename": "src/test/rustdoc-json/reexport/simple_private.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/02b97015814eb2b3f8010c6038829f6284b2bf15/src%2Ftest%2Frustdoc-json%2Freexport%2Fsimple_private.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02b97015814eb2b3f8010c6038829f6284b2bf15/src%2Ftest%2Frustdoc-json%2Freexport%2Fsimple_private.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Freexport%2Fsimple_private.rs?ref=02b97015814eb2b3f8010c6038829f6284b2bf15", "patch": "@@ -1,13 +1,15 @@\n // edition:2018\n-\n #![no_core]\n #![feature(no_core)]\n \n-// @!has simple_private.json \"$.index[*][?(@.name=='inner')]\"\n+// @is simple_private.json \"$.index[*][?(@.name=='inner')].kind\" \\\"module\\\"\n+// @is simple_private.json \"$.index[*][?(@.name=='inner')].inner.is_stripped\" \"true\"\n mod inner {\n     // @set pub_id = - \"$.index[*][?(@.name=='Public')].id\"\n     pub struct Public;\n }\n \n-// @has - \"$.index[*][?(@.name=='simple_private')].inner.items[*]\" $pub_id\n+// @is - \"$.index[*][?(@.kind=='import')].inner.name\" \\\"Public\\\"\n pub use inner::Public;\n+\n+// @has - \"$.index[*][?(@.name=='inner')].inner.items[*]\" $pub_id"}, {"sha": "6b324d0090a154ef3954e50a60abbb960e3bad86", "filename": "src/test/rustdoc-json/return_private.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/02b97015814eb2b3f8010c6038829f6284b2bf15/src%2Ftest%2Frustdoc-json%2Freturn_private.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02b97015814eb2b3f8010c6038829f6284b2bf15/src%2Ftest%2Frustdoc-json%2Freturn_private.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Freturn_private.rs?ref=02b97015814eb2b3f8010c6038829f6284b2bf15", "patch": "@@ -0,0 +1,15 @@\n+// Regression test for <https://github.com/rust-lang/rust/issues/96161>.\n+// ignore-tidy-linelength\n+\n+#![feature(no_core)]\n+#![no_core]\n+\n+mod secret {\n+    pub struct Secret;\n+}\n+\n+// @is return_private.json \"$.index[*][?(@.name=='get_secret')].kind\" \\\"function\\\"\n+// @is return_private.json \"$.index[*][?(@.name=='get_secret')].inner.decl.output.inner.name\" \\\"secret::Secret\\\"\n+pub fn get_secret() -> secret::Secret {\n+    secret::Secret\n+}"}, {"sha": "91f9f02ad7b47342aae502b827ba7ca0b5bf2686", "filename": "src/test/rustdoc-json/stripped_modules.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/02b97015814eb2b3f8010c6038829f6284b2bf15/src%2Ftest%2Frustdoc-json%2Fstripped_modules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02b97015814eb2b3f8010c6038829f6284b2bf15/src%2Ftest%2Frustdoc-json%2Fstripped_modules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fstripped_modules.rs?ref=02b97015814eb2b3f8010c6038829f6284b2bf15", "patch": "@@ -0,0 +1,21 @@\n+#![no_core]\n+#![feature(no_core)]\n+\n+// @!has stripped_modules.json \"$.index[*][?(@.name=='no_pub_inner')]\"\n+mod no_pub_inner {\n+    fn priv_inner() {}\n+}\n+\n+// @!has - \"$.index[*][?(@.name=='pub_inner_unreachable')]\"\n+mod pub_inner_unreachable {\n+    // @!has - \"$.index[*][?(@.name=='pub_inner_1')]\"\n+    pub fn pub_inner_1() {}\n+}\n+\n+// @has - \"$.index[*][?(@.name=='pub_inner_reachable')]\"\n+mod pub_inner_reachable {\n+    // @has - \"$.index[*][?(@.name=='pub_inner_2')]\"\n+    pub fn pub_inner_2() {}\n+}\n+\n+pub use pub_inner_reachable::pub_inner_2;"}]}