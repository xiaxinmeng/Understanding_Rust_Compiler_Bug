{"sha": "1a3edecbf21eef7f39bbf3a7bf38fb72fdc6af61", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhM2VkZWNiZjIxZWVmN2YzOWJiZjNhN2JmMzhmYjcyZmRjNmFmNjE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-06-14T04:25:12Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-06-14T04:25:12Z"}, "message": "Revert \"Revert \"Remove all usage of the global LLVMContextRef\"\"\n\nThis reverts commit 541c657a738006d78171aa261125a6a46f283b35.", "tree": {"sha": "db4b323a85138df7b7c18056e23ec3f5acd1190c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/db4b323a85138df7b7c18056e23ec3f5acd1190c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a3edecbf21eef7f39bbf3a7bf38fb72fdc6af61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a3edecbf21eef7f39bbf3a7bf38fb72fdc6af61", "html_url": "https://github.com/rust-lang/rust/commit/1a3edecbf21eef7f39bbf3a7bf38fb72fdc6af61", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a3edecbf21eef7f39bbf3a7bf38fb72fdc6af61/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7755018074a7802e47ae61f69f5e2b5364a12eb8", "url": "https://api.github.com/repos/rust-lang/rust/commits/7755018074a7802e47ae61f69f5e2b5364a12eb8", "html_url": "https://github.com/rust-lang/rust/commit/7755018074a7802e47ae61f69f5e2b5364a12eb8"}], "stats": {"total": 243, "additions": 130, "deletions": 113}, "files": [{"sha": "0e9ea982d9f4c4fd067be0a2107cd6c89f98a0a7", "filename": "src/librustc/lib/llvm.rs", "status": "modified", "additions": 7, "deletions": 64, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/1a3edecbf21eef7f39bbf3a7bf38fb72fdc6af61/src%2Flibrustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a3edecbf21eef7f39bbf3a7bf38fb72fdc6af61/src%2Flibrustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib%2Fllvm.rs?ref=1a3edecbf21eef7f39bbf3a7bf38fb72fdc6af61", "patch": "@@ -239,23 +239,21 @@ pub mod llvm {\n         #[fast_ffi]\n         pub unsafe fn LLVMContextCreate() -> ContextRef;\n         #[fast_ffi]\n-        pub unsafe fn LLVMGetGlobalContext() -> ContextRef;\n-        #[fast_ffi]\n         pub unsafe fn LLVMContextDispose(C: ContextRef);\n         #[fast_ffi]\n         pub unsafe fn LLVMGetMDKindIDInContext(C: ContextRef,\n                                            Name: *c_char,\n                                            SLen: c_uint)\n                                         -> c_uint;\n-        #[fast_ffi]\n-        pub unsafe fn LLVMGetMDKindID(Name: *c_char, SLen: c_uint) -> c_uint;\n \n         /* Create and destroy modules. */\n         #[fast_ffi]\n         pub unsafe fn LLVMModuleCreateWithNameInContext(ModuleID: *c_char,\n                                                     C: ContextRef)\n                                                  -> ModuleRef;\n         #[fast_ffi]\n+        pub unsafe fn LLVMGetModuleContext(M: ModuleRef) -> ContextRef;\n+        #[fast_ffi]\n         pub unsafe fn LLVMDisposeModule(M: ModuleRef);\n \n         /** Data layout. See Module::getDataLayout. */\n@@ -300,18 +298,6 @@ pub mod llvm {\n         pub unsafe fn LLVMIntTypeInContext(C: ContextRef,\n                                            NumBits: c_uint) -> TypeRef;\n \n-        #[fast_ffi]\n-        pub unsafe fn LLVMInt1Type() -> TypeRef;\n-        #[fast_ffi]\n-        pub unsafe fn LLVMInt8Type() -> TypeRef;\n-        #[fast_ffi]\n-        pub unsafe fn LLVMInt16Type() -> TypeRef;\n-        #[fast_ffi]\n-        pub unsafe fn LLVMInt32Type() -> TypeRef;\n-        #[fast_ffi]\n-        pub unsafe fn LLVMInt64Type() -> TypeRef;\n-        #[fast_ffi]\n-        pub unsafe fn LLVMIntType(NumBits: c_uint) -> TypeRef;\n         #[fast_ffi]\n         pub unsafe fn LLVMGetIntTypeWidth(IntegerTy: TypeRef) -> c_uint;\n \n@@ -327,17 +313,6 @@ pub mod llvm {\n         #[fast_ffi]\n         pub unsafe fn LLVMPPCFP128TypeInContext(C: ContextRef) -> TypeRef;\n \n-        #[fast_ffi]\n-        pub unsafe fn LLVMFloatType() -> TypeRef;\n-        #[fast_ffi]\n-        pub unsafe fn LLVMDoubleType() -> TypeRef;\n-        #[fast_ffi]\n-        pub unsafe fn LLVMX86FP80Type() -> TypeRef;\n-        #[fast_ffi]\n-        pub unsafe fn LLVMFP128Type() -> TypeRef;\n-        #[fast_ffi]\n-        pub unsafe fn LLVMPPCFP128Type() -> TypeRef;\n-\n         /* Operations on function types */\n         #[fast_ffi]\n         pub unsafe fn LLVMFunctionType(ReturnType: TypeRef,\n@@ -361,11 +336,6 @@ pub mod llvm {\n                                               ElementCount: c_uint,\n                                               Packed: Bool) -> TypeRef;\n         #[fast_ffi]\n-        pub unsafe fn LLVMStructType(ElementTypes: *TypeRef,\n-                                     ElementCount: c_uint,\n-                                     Packed: Bool)\n-                                  -> TypeRef;\n-        #[fast_ffi]\n         pub unsafe fn LLVMCountStructElementTypes(StructTy: TypeRef)\n                                                -> c_uint;\n         #[fast_ffi]\n@@ -403,13 +373,6 @@ pub mod llvm {\n         #[fast_ffi]\n         pub unsafe fn LLVMMetadataTypeInContext(C: ContextRef) -> TypeRef;\n \n-        #[fast_ffi]\n-        pub unsafe fn LLVMVoidType() -> TypeRef;\n-        #[fast_ffi]\n-        pub unsafe fn LLVMLabelType() -> TypeRef;\n-        #[fast_ffi]\n-        pub unsafe fn LLVMMetadataType() -> TypeRef;\n-\n         /* Operations on all values */\n         #[fast_ffi]\n         pub unsafe fn LLVMTypeOf(Val: ValueRef) -> TypeRef;\n@@ -482,15 +445,11 @@ pub mod llvm {\n                                         SLen: c_uint)\n                                      -> ValueRef;\n         #[fast_ffi]\n-        pub unsafe fn LLVMMDString(Str: *c_char, SLen: c_uint) -> ValueRef;\n-        #[fast_ffi]\n         pub unsafe fn LLVMMDNodeInContext(C: ContextRef,\n                                       Vals: *ValueRef,\n                                       Count: c_uint)\n                                    -> ValueRef;\n         #[fast_ffi]\n-        pub unsafe fn LLVMMDNode(Vals: *ValueRef, Count: c_uint) -> ValueRef;\n-        #[fast_ffi]\n         pub unsafe fn LLVMAddNamedMetadataOperand(M: ModuleRef, Str: *c_char,\n                                        Val: ValueRef);\n \n@@ -544,20 +503,11 @@ pub mod llvm {\n                                                Packed: Bool) -> ValueRef;\n \n         #[fast_ffi]\n-        pub unsafe fn LLVMConstString(Str: *c_char,\n-                                      Length: c_uint,\n-                                      DontNullTerminate: Bool)\n-                                   -> ValueRef;\n-        #[fast_ffi]\n         pub unsafe fn LLVMConstArray(ElementTy: TypeRef,\n                                      ConstantVals: *ValueRef,\n                                      Length: c_uint)\n                                   -> ValueRef;\n         #[fast_ffi]\n-        pub unsafe fn LLVMConstStruct(ConstantVals: *ValueRef,\n-                                      Count: c_uint,\n-                                      Packed: Bool) -> ValueRef;\n-        #[fast_ffi]\n         pub unsafe fn LLVMConstVector(ScalarConstantVals: *ValueRef,\n                                       Size: c_uint) -> ValueRef;\n \n@@ -970,15 +920,6 @@ pub mod llvm {\n                                                     BB: BasicBlockRef,\n                                                     Name: *c_char)\n                                                  -> BasicBlockRef;\n-\n-        #[fast_ffi]\n-        pub unsafe fn LLVMAppendBasicBlock(Fn: ValueRef,\n-                                       Name: *c_char)\n-                                    -> BasicBlockRef;\n-        #[fast_ffi]\n-        pub unsafe fn LLVMInsertBasicBlock(InsertBeforeBB: BasicBlockRef,\n-                                       Name: *c_char)\n-                                    -> BasicBlockRef;\n         #[fast_ffi]\n         pub unsafe fn LLVMDeleteBasicBlock(BB: BasicBlockRef);\n \n@@ -1039,8 +980,6 @@ pub mod llvm {\n         #[fast_ffi]\n         pub unsafe fn LLVMCreateBuilderInContext(C: ContextRef) -> BuilderRef;\n         #[fast_ffi]\n-        pub unsafe fn LLVMCreateBuilder() -> BuilderRef;\n-        #[fast_ffi]\n         pub unsafe fn LLVMPositionBuilder(Builder: BuilderRef,\n                                           Block: BasicBlockRef,\n                                           Instr: ValueRef);\n@@ -1893,7 +1832,8 @@ pub mod llvm {\n \n         /** Parses LLVM asm in the given file */\n         #[fast_ffi]\n-        pub unsafe fn LLVMRustParseAssemblyFile(Filename: *c_char)\n+        pub unsafe fn LLVMRustParseAssemblyFile(Filename: *c_char,\n+                                                C: ContextRef)\n                                              -> ModuleRef;\n \n         #[fast_ffi]\n@@ -1909,6 +1849,9 @@ pub mod llvm {\n         #[fast_ffi]\n         pub unsafe fn LLVMRustPrintPassTimings();\n \n+        #[fast_ffi]\n+        pub unsafe fn LLVMRustStartMultithreading() -> bool;\n+\n         #[fast_ffi]\n         pub unsafe fn LLVMStructCreateNamed(C: ContextRef, Name: *c_char)\n                                          -> TypeRef;"}, {"sha": "3f6a37bf864b5727b1b052e1a3750272ec00711a", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 32, "deletions": 10, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/1a3edecbf21eef7f39bbf3a7bf38fb72fdc6af61/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a3edecbf21eef7f39bbf3a7bf38fb72fdc6af61/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=1a3edecbf21eef7f39bbf3a7bf38fb72fdc6af61", "patch": "@@ -29,7 +29,7 @@ use back::link::{mangle_exported_name};\n use back::{link, abi, upcall};\n use driver::session;\n use driver::session::Session;\n-use lib::llvm::{ModuleRef, ValueRef, TypeRef, BasicBlockRef};\n+use lib::llvm::{ContextRef, ModuleRef, ValueRef, TypeRef, BasicBlockRef};\n use lib::llvm::{True, False};\n use lib::llvm::{llvm, mk_target_data, mk_type_names};\n use lib;\n@@ -73,6 +73,7 @@ use core::libc::c_uint;\n use core::str;\n use core::uint;\n use core::vec;\n+use core::local_data;\n use extra::time;\n use syntax::ast::ident;\n use syntax::ast_map::{path, path_elt_to_str, path_name};\n@@ -1187,7 +1188,7 @@ pub fn new_block(cx: fn_ctxt, parent: Option<block>, kind: block_kind,\n     };\n     unsafe {\n         let llbb = str::as_c_str(cx.ccx.sess.str_of(s), |buf| {\n-            llvm::LLVMAppendBasicBlock(cx.llfn, buf)\n+            llvm::LLVMAppendBasicBlockInContext(cx.ccx.llcx, cx.llfn, buf)\n         });\n         let bcx = mk_block(llbb,\n                            parent,\n@@ -1554,11 +1555,12 @@ pub struct BasicBlocks {\n // Creates the standard set of basic blocks for a function\n pub fn mk_standard_basic_blocks(llfn: ValueRef) -> BasicBlocks {\n     unsafe {\n+        let cx = task_llcx();\n         BasicBlocks {\n             sa: str::as_c_str(\"static_allocas\",\n-                           |buf| llvm::LLVMAppendBasicBlock(llfn, buf)),\n+                           |buf| llvm::LLVMAppendBasicBlockInContext(cx, llfn, buf)),\n             rt: str::as_c_str(\"return\",\n-                           |buf| llvm::LLVMAppendBasicBlock(llfn, buf))\n+                           |buf| llvm::LLVMAppendBasicBlockInContext(cx, llfn, buf))\n         }\n     }\n }\n@@ -2341,7 +2343,7 @@ pub fn create_entry_wrapper(ccx: @CrateContext,\n         };\n         let llbb = str::as_c_str(\"top\", |buf| {\n             unsafe {\n-                llvm::LLVMAppendBasicBlock(llfn, buf)\n+                llvm::LLVMAppendBasicBlockInContext(ccx.llcx, llfn, buf)\n             }\n         });\n         let bld = ccx.builder.B;\n@@ -2659,10 +2661,10 @@ pub fn declare_intrinsics(llmod: ModuleRef) -> HashMap<&'static str, ValueRef> {\n                            T_void()));\n     let memcpy32 =\n         decl_cdecl_fn(llmod, \"llvm.memcpy.p0i8.p0i8.i32\",\n-                      T_fn(copy T_memcpy32_args, T_void()));\n+                      T_fn(T_memcpy32_args, T_void()));\n     let memcpy64 =\n         decl_cdecl_fn(llmod, \"llvm.memcpy.p0i8.p0i8.i64\",\n-                      T_fn(copy T_memcpy64_args, T_void()));\n+                      T_fn(T_memcpy64_args, T_void()));\n     let memmove32 =\n         decl_cdecl_fn(llmod, \"llvm.memmove.p0i8.p0i8.i32\",\n                       T_fn(T_memcpy32_args, T_void()));\n@@ -3038,9 +3040,13 @@ pub fn trans_crate(sess: session::Session,\n     let llmod_id = link_meta.name.to_owned() + \".rc\";\n \n     unsafe {\n+        if !llvm::LLVMRustStartMultithreading() {\n+            sess.bug(\"couldn't enable multi-threaded LLVM\");\n+        }\n+        let llcx = llvm::LLVMContextCreate();\n+        set_task_llcx(llcx);\n         let llmod = str::as_c_str(llmod_id, |buf| {\n-            llvm::LLVMModuleCreateWithNameInContext\n-                (buf, llvm::LLVMGetGlobalContext())\n+            llvm::LLVMModuleCreateWithNameInContext(buf, llcx)\n         });\n         let data_layout: &str = sess.targ_cfg.target_strs.data_layout;\n         let targ_triple: &str = sess.targ_cfg.target_strs.target_triple;\n@@ -3071,6 +3077,7 @@ pub fn trans_crate(sess: session::Session,\n         let ccx = @CrateContext {\n               sess: sess,\n               llmod: llmod,\n+              llcx: llcx,\n               td: td,\n               tn: tn,\n               externs: @mut HashMap::new(),\n@@ -3124,7 +3131,9 @@ pub fn trans_crate(sess: session::Session,\n               int_type: int_type,\n               float_type: float_type,\n               opaque_vec_type: T_opaque_vec(targ_cfg),\n-              builder: BuilderRef_res(unsafe { llvm::LLVMCreateBuilder() }),\n+              builder: BuilderRef_res(unsafe {\n+                  llvm::LLVMCreateBuilderInContext(llcx)\n+              }),\n               shape_cx: mk_ctxt(llmod),\n               crate_map: crate_map,\n               uses_gc: @mut false,\n@@ -3172,3 +3181,16 @@ pub fn trans_crate(sess: session::Session,\n         return (llmod, link_meta);\n     }\n }\n+\n+fn task_local_llcx_key(_v: @ContextRef) {}\n+\n+pub fn task_llcx() -> ContextRef {\n+    let opt = unsafe { local_data::local_data_get(task_local_llcx_key) };\n+    *opt.expect(\"task-local LLVMContextRef wasn't ever set!\")\n+}\n+\n+fn set_task_llcx(c: ContextRef) {\n+    unsafe {\n+        local_data::local_data_set(task_local_llcx_key, @c);\n+    }\n+}"}, {"sha": "af10845181008cd1f779879eae2704a2d615125a", "filename": "src/librustc/middle/trans/build.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1a3edecbf21eef7f39bbf3a7bf38fb72fdc6af61/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a3edecbf21eef7f39bbf3a7bf38fb72fdc6af61/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs?ref=1a3edecbf21eef7f39bbf3a7bf38fb72fdc6af61", "patch": "@@ -564,7 +564,8 @@ pub fn LoadRangeAssert(cx: block, PointerVal: ValueRef, lo: c_ulonglong,\n \n         do vec::as_imm_buf([min, max]) |ptr, len| {\n             llvm::LLVMSetMetadata(value, lib::llvm::MD_range as c_uint,\n-                                  llvm::LLVMMDNode(ptr, len as c_uint));\n+                                  llvm::LLVMMDNodeInContext(cx.fcx.ccx.llcx,\n+                                                            ptr, len as c_uint));\n         }\n     }\n "}, {"sha": "366c0a90a4c2cf75ad5b139f3fdca2b1dc024366", "filename": "src/librustc/middle/trans/cabi_mips.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1a3edecbf21eef7f39bbf3a7bf38fb72fdc6af61/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_mips.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a3edecbf21eef7f39bbf3a7bf38fb72fdc6af61/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_mips.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_mips.rs?ref=1a3edecbf21eef7f39bbf3a7bf38fb72fdc6af61", "patch": "@@ -19,6 +19,7 @@ use lib::llvm::{llvm, TypeRef, Integer, Pointer, Float, Double};\n use lib::llvm::{Struct, Array, Attribute};\n use lib::llvm::{StructRetAttribute};\n use lib::llvm::True;\n+use middle::trans::base::task_llcx;\n use middle::trans::common::*;\n use middle::trans::cabi::*;\n \n@@ -166,7 +167,7 @@ fn coerce_to_int(size: uint) -> ~[TypeRef] {\n     let r = size % 32;\n     if r > 0 {\n         unsafe {\n-            args.push(llvm::LLVMIntType(r as c_uint))\n+            args.push(llvm::LLVMIntTypeInContext(task_llcx(), r as c_uint))\n         }\n     }\n "}, {"sha": "4804058609a32c5bb92facdc5492ed985d558977", "filename": "src/librustc/middle/trans/closure.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a3edecbf21eef7f39bbf3a7bf38fb72fdc6af61/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a3edecbf21eef7f39bbf3a7bf38fb72fdc6af61/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs?ref=1a3edecbf21eef7f39bbf3a7bf38fb72fdc6af61", "patch": "@@ -327,7 +327,9 @@ pub fn load_environment(fcx: fn_ctxt,\n                 str::as_c_str(\"load_env\",\n                               |buf|\n                               unsafe {\n-                                llvm::LLVMAppendBasicBlock(fcx.llfn, buf)\n+                                llvm::LLVMAppendBasicBlockInContext(fcx.ccx.llcx,\n+                                                                    fcx.llfn,\n+                                                                    buf)\n                               });\n             fcx.llloadenv = Some(ll);\n             ll"}, {"sha": "7e47fc47bffcce30acc7791a5b2c73111c313b8a", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 47, "deletions": 26, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/1a3edecbf21eef7f39bbf3a7bf38fb72fdc6af61/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a3edecbf21eef7f39bbf3a7bf38fb72fdc6af61/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=1a3edecbf21eef7f39bbf3a7bf38fb72fdc6af61", "patch": "@@ -17,7 +17,7 @@ use back::{abi, upcall};\n use driver::session;\n use driver::session::Session;\n use lib::llvm::{ModuleRef, ValueRef, TypeRef, BasicBlockRef, BuilderRef};\n-use lib::llvm::{True, False, Bool};\n+use lib::llvm::{ContextRef, True, False, Bool};\n use lib::llvm::{llvm, TargetData, TypeNames, associate_type, name_has_type};\n use lib;\n use metadata::common::LinkMeta;\n@@ -161,6 +161,7 @@ pub type ExternMap = @mut HashMap<@str, ValueRef>;\n pub struct CrateContext {\n      sess: session::Session,\n      llmod: ModuleRef,\n+     llcx: ContextRef,\n      td: TargetData,\n      tn: @TypeNames,\n      externs: ExternMap,\n@@ -798,30 +799,44 @@ impl block_ {\n \n // LLVM type constructors.\n pub fn T_void() -> TypeRef {\n-    unsafe {\n-        return llvm::LLVMVoidType();\n-    }\n+    unsafe { return llvm::LLVMVoidTypeInContext(base::task_llcx()); }\n }\n \n pub fn T_nil() -> TypeRef {\n     return T_struct([], false)\n }\n \n-pub fn T_metadata() -> TypeRef { unsafe { return llvm::LLVMMetadataType(); } }\n+pub fn T_metadata() -> TypeRef {\n+    unsafe { return llvm::LLVMMetadataTypeInContext(base::task_llcx()); }\n+}\n \n-pub fn T_i1() -> TypeRef { unsafe { return llvm::LLVMInt1Type(); } }\n+pub fn T_i1() -> TypeRef {\n+    unsafe { return llvm::LLVMInt1TypeInContext(base::task_llcx()); }\n+}\n \n-pub fn T_i8() -> TypeRef { unsafe { return llvm::LLVMInt8Type(); } }\n+pub fn T_i8() -> TypeRef {\n+    unsafe { return llvm::LLVMInt8TypeInContext(base::task_llcx()); }\n+}\n \n-pub fn T_i16() -> TypeRef { unsafe { return llvm::LLVMInt16Type(); } }\n+pub fn T_i16() -> TypeRef {\n+    unsafe { return llvm::LLVMInt16TypeInContext(base::task_llcx()); }\n+}\n \n-pub fn T_i32() -> TypeRef { unsafe { return llvm::LLVMInt32Type(); } }\n+pub fn T_i32() -> TypeRef {\n+    unsafe { return llvm::LLVMInt32TypeInContext(base::task_llcx()); }\n+}\n \n-pub fn T_i64() -> TypeRef { unsafe { return llvm::LLVMInt64Type(); } }\n+pub fn T_i64() -> TypeRef {\n+    unsafe { return llvm::LLVMInt64TypeInContext(base::task_llcx()); }\n+}\n \n-pub fn T_f32() -> TypeRef { unsafe { return llvm::LLVMFloatType(); } }\n+pub fn T_f32() -> TypeRef {\n+    unsafe { return llvm::LLVMFloatTypeInContext(base::task_llcx()); }\n+}\n \n-pub fn T_f64() -> TypeRef { unsafe { return llvm::LLVMDoubleType(); } }\n+pub fn T_f64() -> TypeRef {\n+    unsafe { return llvm::LLVMDoubleTypeInContext(base::task_llcx()); }\n+}\n \n pub fn T_bool() -> TypeRef { return T_i8(); }\n \n@@ -881,8 +896,8 @@ pub fn T_size_t(targ_cfg: @session::config) -> TypeRef {\n pub fn T_fn(inputs: &[TypeRef], output: TypeRef) -> TypeRef {\n     unsafe {\n         return llvm::LLVMFunctionType(output, to_ptr(inputs),\n-                                   inputs.len() as c_uint,\n-                                   False);\n+                                      inputs.len() as c_uint,\n+                                      False);\n     }\n }\n \n@@ -904,16 +919,18 @@ pub fn T_root(t: TypeRef, addrspace: addrspace) -> TypeRef {\n \n pub fn T_struct(elts: &[TypeRef], packed: bool) -> TypeRef {\n     unsafe {\n-        return llvm::LLVMStructType(to_ptr(elts),\n-                                    elts.len() as c_uint,\n-                                    packed as Bool);\n+        return llvm::LLVMStructTypeInContext(base::task_llcx(),\n+                                             to_ptr(elts),\n+                                             elts.len() as c_uint,\n+                                             packed as Bool);\n     }\n }\n \n pub fn T_named_struct(name: &str) -> TypeRef {\n     unsafe {\n-        let c = llvm::LLVMGetGlobalContext();\n-        return str::as_c_str(name, |buf| llvm::LLVMStructCreateNamed(c, buf));\n+        return str::as_c_str(name, |buf| {\n+            llvm::LLVMStructCreateNamed(base::task_llcx(), buf)\n+        });\n     }\n }\n \n@@ -1167,7 +1184,8 @@ pub fn C_cstr(cx: @CrateContext, s: @str) -> ValueRef {\n         }\n \n         let sc = do str::as_c_str(s) |buf| {\n-            llvm::LLVMConstString(buf, s.len() as c_uint, False)\n+            llvm::LLVMConstStringInContext(cx.llcx, buf, s.len() as c_uint,\n+                                           False)\n         };\n         let g =\n             str::as_c_str(fmt!(\"str%u\", (cx.names)(\"str\").name),\n@@ -1196,7 +1214,8 @@ pub fn C_estr_slice(cx: @CrateContext, s: @str) -> ValueRef {\n pub fn C_postr(s: &str) -> ValueRef {\n     unsafe {\n         return do str::as_c_str(s) |buf| {\n-            llvm::LLVMConstString(buf, s.len() as c_uint, False)\n+            llvm::LLVMConstStringInContext(base::task_llcx(),\n+                                           buf, s.len() as c_uint, False)\n         };\n     }\n }\n@@ -1215,15 +1234,17 @@ pub fn C_zero_byte_arr(size: uint) -> ValueRef {\n pub fn C_struct(elts: &[ValueRef]) -> ValueRef {\n     unsafe {\n         do vec::as_imm_buf(elts) |ptr, len| {\n-            llvm::LLVMConstStruct(ptr, len as c_uint, False)\n+            llvm::LLVMConstStructInContext(base::task_llcx(),\n+                                           ptr, len as c_uint, False)\n         }\n     }\n }\n \n pub fn C_packed_struct(elts: &[ValueRef]) -> ValueRef {\n     unsafe {\n         do vec::as_imm_buf(elts) |ptr, len| {\n-            llvm::LLVMConstStruct(ptr, len as c_uint, True)\n+            llvm::LLVMConstStructInContext(base::task_llcx(),\n+                                           ptr, len as c_uint, True)\n         }\n     }\n }\n@@ -1239,21 +1260,21 @@ pub fn C_named_struct(T: TypeRef, elts: &[ValueRef]) -> ValueRef {\n pub fn C_array(ty: TypeRef, elts: &[ValueRef]) -> ValueRef {\n     unsafe {\n         return llvm::LLVMConstArray(ty, vec::raw::to_ptr(elts),\n-                                 elts.len() as c_uint);\n+                                    elts.len() as c_uint);\n     }\n }\n \n pub fn C_bytes(bytes: &[u8]) -> ValueRef {\n     unsafe {\n-        return llvm::LLVMConstString(\n+        return llvm::LLVMConstStringInContext(base::task_llcx(),\n             cast::transmute(vec::raw::to_ptr(bytes)),\n             bytes.len() as c_uint, True);\n     }\n }\n \n pub fn C_bytes_plus_null(bytes: &[u8]) -> ValueRef {\n     unsafe {\n-        return llvm::LLVMConstString(\n+        return llvm::LLVMConstStringInContext(base::task_llcx(),\n             cast::transmute(vec::raw::to_ptr(bytes)),\n             bytes.len() as c_uint, False);\n     }"}, {"sha": "3bb9d4abab0f7b0de404e7c0c86b72f06c5c95c5", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1a3edecbf21eef7f39bbf3a7bf38fb72fdc6af61/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a3edecbf21eef7f39bbf3a7bf38fb72fdc6af61/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=1a3edecbf21eef7f39bbf3a7bf38fb72fdc6af61", "patch": "@@ -13,6 +13,7 @@ use core::prelude::*;\n use driver::session;\n use lib::llvm::ValueRef;\n use lib::llvm::llvm;\n+use middle::trans::base::task_llcx;\n use middle::trans::common::*;\n use middle::trans::machine;\n use middle::trans::type_of;\n@@ -61,7 +62,9 @@ static DW_ATE_unsigned_char: int = 0x08;\n fn llstr(s: &str) -> ValueRef {\n     do str::as_c_str(s) |sbuf| {\n         unsafe {\n-            llvm::LLVMMDString(sbuf, s.len() as libc::c_uint)\n+            llvm::LLVMMDStringInContext(task_llcx(),\n+                                        sbuf,\n+                                        s.len() as libc::c_uint)\n         }\n     }\n }\n@@ -79,7 +82,9 @@ fn lli1(bval: bool) -> ValueRef {\n }\n fn llmdnode(elems: &[ValueRef]) -> ValueRef {\n     unsafe {\n-        llvm::LLVMMDNode(vec::raw::to_ptr(elems), elems.len() as libc::c_uint)\n+        llvm::LLVMMDNodeInContext(task_llcx(),\n+                                  vec::raw::to_ptr(elems),\n+                                  elems.len() as libc::c_uint)\n     }\n }\n fn llunused() -> ValueRef {"}, {"sha": "2fff45678bcb54b203524770e8fd20c64f8a0d6e", "filename": "src/librustc/middle/trans/type_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a3edecbf21eef7f39bbf3a7bf38fb72fdc6af61/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a3edecbf21eef7f39bbf3a7bf38fb72fdc6af61/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs?ref=1a3edecbf21eef7f39bbf3a7bf38fb72fdc6af61", "patch": "@@ -58,7 +58,7 @@ pub fn type_of_fn(cx: @CrateContext, inputs: &[ty::t], output: ty::t)\n         if output_is_immediate {\n             T_fn(atys, lloutputtype)\n         } else {\n-            T_fn(atys, llvm::LLVMVoidType())\n+            T_fn(atys, llvm::LLVMVoidTypeInContext(cx.llcx))\n         }\n     }\n }"}, {"sha": "1a97c806027d541e9018344423bf9a2ce1175adb", "filename": "src/librusti/rusti.rc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a3edecbf21eef7f39bbf3a7bf38fb72fdc6af61/src%2Flibrusti%2Frusti.rc", "raw_url": "https://github.com/rust-lang/rust/raw/1a3edecbf21eef7f39bbf3a7bf38fb72fdc6af61/src%2Flibrusti%2Frusti.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrusti%2Frusti.rc?ref=1a3edecbf21eef7f39bbf3a7bf38fb72fdc6af61", "patch": "@@ -648,5 +648,9 @@ mod tests {\n             fn f() {}\n             f()\n         \");\n+\n+        debug!(\"regression test for #5803\");\n+        run_cmds([\"spawn( || println(\\\"Please don't segfault\\\") );\",\n+                  \"do spawn { println(\\\"Please?\\\"); }\"]);\n     }\n }"}, {"sha": "17eb0f50b9bcdbd16d11b8042401944fcb883898", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 24, "deletions": 5, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/1a3edecbf21eef7f39bbf3a7bf38fb72fdc6af61/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/1a3edecbf21eef7f39bbf3a7bf38fb72fdc6af61/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=1a3edecbf21eef7f39bbf3a7bf38fb72fdc6af61", "patch": "@@ -447,9 +447,10 @@ LLVMRustWriteOutputFile(LLVMPassManagerRef PMR,\n   return true;\n }\n \n-extern \"C\" LLVMModuleRef LLVMRustParseAssemblyFile(const char *Filename) {\n+extern \"C\" LLVMModuleRef LLVMRustParseAssemblyFile(LLVMContextRef C,\n+                                                   const char *Filename) {\n   SMDiagnostic d;\n-  Module *m = ParseAssemblyFile(Filename, d, getGlobalContext());\n+  Module *m = ParseAssemblyFile(Filename, d, *unwrap(C));\n   if (m) {\n     return wrap(m);\n   } else {\n@@ -499,9 +500,6 @@ extern \"C\" LLVMValueRef LLVMGetOrInsertFunction(LLVMModuleRef M,\n extern \"C\" LLVMTypeRef LLVMMetadataTypeInContext(LLVMContextRef C) {\n   return wrap(Type::getMetadataTy(*unwrap(C)));\n }\n-extern \"C\" LLVMTypeRef LLVMMetadataType(void) {\n-  return LLVMMetadataTypeInContext(LLVMGetGlobalContext());\n-}\n \n extern \"C\" LLVMValueRef LLVMBuildAtomicLoad(LLVMBuilderRef B,\n                                             LLVMValueRef source,\n@@ -561,3 +559,24 @@ extern \"C\" LLVMValueRef LLVMInlineAsm(LLVMTypeRef Ty,\n                                Constraints, HasSideEffects,\n                                IsAlignStack, (InlineAsm::AsmDialect) Dialect));\n }\n+\n+/**\n+ * This function is intended to be a threadsafe interface into enabling a\n+ * multithreaded LLVM. This is invoked at the start of the translation phase of\n+ * compilation to ensure that LLVM is ready.\n+ *\n+ * All of trans properly isolates LLVM with the use of a different\n+ * LLVMContextRef per task, thus allowing parallel compilation of different\n+ * crates in the same process. At the time of this writing, the use case for\n+ * this is unit tests for rusti, but there are possible other applications.\n+ */\n+extern \"C\" bool LLVMRustStartMultithreading() {\n+    static Mutex lock;\n+    bool ret = true;\n+    assert(lock.acquire());\n+    if (!LLVMIsMultithreaded()) {\n+        ret = LLVMStartMultithreaded();\n+    }\n+    assert(lock.release());\n+    return ret;\n+}"}, {"sha": "f8c68d798b9afb83485e60ef2d9fed8e67739296", "filename": "src/rustllvm/rustllvm.def.in", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1a3edecbf21eef7f39bbf3a7bf38fb72fdc6af61/src%2Frustllvm%2Frustllvm.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/1a3edecbf21eef7f39bbf3a7bf38fb72fdc6af61/src%2Frustllvm%2Frustllvm.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2Frustllvm.def.in?ref=1a3edecbf21eef7f39bbf3a7bf38fb72fdc6af61", "patch": "@@ -10,6 +10,7 @@ LLVMRustExecuteJIT\n LLVMRustParseBitcode\n LLVMRustParseAssemblyFile\n LLVMRustPrintPassTimings\n+LLVMRustStartMultithreading\n LLVMCreateObjectFile\n LLVMDisposeObjectFile\n LLVMGetSections\n@@ -319,7 +320,6 @@ LLVMGetFunctionAttr\n LLVMGetFunctionCallConv\n LLVMGetGC\n LLVMGetGlobalContext\n-LLVMGetGlobalContext\n LLVMGetGlobalParent\n LLVMGetGlobalPassRegistry\n LLVMGetIncomingBlock\n@@ -500,7 +500,6 @@ LLVMMDNode\n LLVMMDNodeInContext\n LLVMMDString\n LLVMMDStringInContext\n-LLVMMetadataType\n LLVMMetadataTypeInContext\n LLVMModuleCreateWithName\n LLVMModuleCreateWithNameInContext"}]}