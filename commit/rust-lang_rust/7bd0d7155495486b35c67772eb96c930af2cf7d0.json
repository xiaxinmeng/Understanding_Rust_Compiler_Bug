{"sha": "7bd0d7155495486b35c67772eb96c930af2cf7d0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiZDBkNzE1NTQ5NTQ4NmIzNWM2Nzc3MmViOTZjOTMwYWYyY2Y3ZDA=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2012-12-11T17:19:20Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-12-17T03:27:06Z"}, "message": "priority_queue: avoid copy with top and maybe_top", "tree": {"sha": "3c77aeba9bc9955e87eb3ab5687763c09567558f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c77aeba9bc9955e87eb3ab5687763c09567558f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7bd0d7155495486b35c67772eb96c930af2cf7d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7bd0d7155495486b35c67772eb96c930af2cf7d0", "html_url": "https://github.com/rust-lang/rust/commit/7bd0d7155495486b35c67772eb96c930af2cf7d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7bd0d7155495486b35c67772eb96c930af2cf7d0/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e00c3b05e110ab4b3cf6d60e29c59fad2b5921d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/e00c3b05e110ab4b3cf6d60e29c59fad2b5921d6", "html_url": "https://github.com/rust-lang/rust/commit/e00c3b05e110ab4b3cf6d60e29c59fad2b5921d6"}], "stats": {"total": 23, "additions": 12, "deletions": 11}, "files": [{"sha": "d73722dc55b9b5eb10486f788bdd4e6a430e0b58", "filename": "src/libstd/priority_queue.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/7bd0d7155495486b35c67772eb96c930af2cf7d0/src%2Flibstd%2Fpriority_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bd0d7155495486b35c67772eb96c930af2cf7d0/src%2Flibstd%2Fpriority_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpriority_queue.rs?ref=7bd0d7155495486b35c67772eb96c930af2cf7d0", "patch": "@@ -8,10 +8,10 @@ pub struct PriorityQueue <T: Copy Ord>{\n \n impl <T: Copy Ord> PriorityQueue<T> {\n     /// Returns the greatest item in the queue - fails if empty\n-    pure fn top(&self) -> T { self.data[0] }\n+    pure fn top(&self) -> &self/T { &self.data[0] }\n \n     /// Returns the greatest item in the queue - None if empty\n-    pure fn maybe_top(&self) -> Option<T> {\n+    pure fn maybe_top(&self) -> Option<&self/T> {\n         if self.is_empty() { None } else { Some(self.top()) }\n     }\n \n@@ -151,7 +151,7 @@ mod tests {\n         let mut sorted = merge_sort(data, le);\n         let mut heap = from_vec(data);\n         while heap.is_not_empty() {\n-            assert heap.top() == sorted.last();\n+            assert *heap.top() == sorted.last();\n             assert heap.pop() == sorted.pop();\n         }\n     }\n@@ -160,22 +160,22 @@ mod tests {\n     fn test_push() {\n         let mut heap = from_vec(~[2, 4, 9]);\n         assert heap.len() == 3;\n-        assert heap.top() == 9;\n+        assert *heap.top() == 9;\n         heap.push(11);\n         assert heap.len() == 4;\n-        assert heap.top() == 11;\n+        assert *heap.top() == 11;\n         heap.push(5);\n         assert heap.len() == 5;\n-        assert heap.top() == 11;\n+        assert *heap.top() == 11;\n         heap.push(27);\n         assert heap.len() == 6;\n-        assert heap.top() == 27;\n+        assert *heap.top() == 27;\n         heap.push(3);\n         assert heap.len() == 7;\n-        assert heap.top() == 27;\n+        assert *heap.top() == 27;\n         heap.push(103);\n         assert heap.len() == 8;\n-        assert heap.top() == 103;\n+        assert *heap.top() == 103;\n     }\n \n     #[test]\n@@ -241,11 +241,12 @@ mod tests {\n \n     #[test]\n     #[should_fail]\n-    fn test_empty_top() { from_vec::<int>(~[]).top(); }\n+    fn test_empty_top() { let empty = from_vec::<int>(~[]); empty.top(); }\n \n     #[test]\n     fn test_empty_maybe_top() {\n-        assert from_vec::<int>(~[]).maybe_top().is_none();\n+        let empty = from_vec::<int>(~[]);\n+        assert empty.maybe_top().is_none();\n     }\n \n     #[test]"}]}