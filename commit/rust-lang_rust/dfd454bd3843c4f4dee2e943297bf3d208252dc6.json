{"sha": "dfd454bd3843c4f4dee2e943297bf3d208252dc6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmZDQ1NGJkMzg0M2M0ZjRkZWUyZTk0MzI5N2JmM2QyMDgyNTJkYzY=", "commit": {"author": {"name": "Alexis Bourget", "email": "alexis.bourget@gmail.com", "date": "2020-06-28T18:20:32Z"}, "committer": {"name": "Alexis Bourget", "email": "alexis.bourget@gmail.com", "date": "2020-06-28T18:20:32Z"}, "message": "Apply suggestions, reformulating some paragraphs and improving some examples", "tree": {"sha": "caa9e6afc5b7dd898fd9ba0ba0ed3909134b419e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/caa9e6afc5b7dd898fd9ba0ba0ed3909134b419e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dfd454bd3843c4f4dee2e943297bf3d208252dc6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dfd454bd3843c4f4dee2e943297bf3d208252dc6", "html_url": "https://github.com/rust-lang/rust/commit/dfd454bd3843c4f4dee2e943297bf3d208252dc6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dfd454bd3843c4f4dee2e943297bf3d208252dc6/comments", "author": {"login": "poliorcetics", "id": 7951708, "node_id": "MDQ6VXNlcjc5NTE3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7951708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poliorcetics", "html_url": "https://github.com/poliorcetics", "followers_url": "https://api.github.com/users/poliorcetics/followers", "following_url": "https://api.github.com/users/poliorcetics/following{/other_user}", "gists_url": "https://api.github.com/users/poliorcetics/gists{/gist_id}", "starred_url": "https://api.github.com/users/poliorcetics/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poliorcetics/subscriptions", "organizations_url": "https://api.github.com/users/poliorcetics/orgs", "repos_url": "https://api.github.com/users/poliorcetics/repos", "events_url": "https://api.github.com/users/poliorcetics/events{/privacy}", "received_events_url": "https://api.github.com/users/poliorcetics/received_events", "type": "User", "site_admin": false}, "committer": {"login": "poliorcetics", "id": 7951708, "node_id": "MDQ6VXNlcjc5NTE3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7951708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poliorcetics", "html_url": "https://github.com/poliorcetics", "followers_url": "https://api.github.com/users/poliorcetics/followers", "following_url": "https://api.github.com/users/poliorcetics/following{/other_user}", "gists_url": "https://api.github.com/users/poliorcetics/gists{/gist_id}", "starred_url": "https://api.github.com/users/poliorcetics/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poliorcetics/subscriptions", "organizations_url": "https://api.github.com/users/poliorcetics/orgs", "repos_url": "https://api.github.com/users/poliorcetics/repos", "events_url": "https://api.github.com/users/poliorcetics/events{/privacy}", "received_events_url": "https://api.github.com/users/poliorcetics/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2bbc2b3de42f3b14ccc8b62c2acffc8840177777", "url": "https://api.github.com/repos/rust-lang/rust/commits/2bbc2b3de42f3b14ccc8b62c2acffc8840177777", "html_url": "https://github.com/rust-lang/rust/commit/2bbc2b3de42f3b14ccc8b62c2acffc8840177777"}], "stats": {"total": 74, "additions": 36, "deletions": 38}, "files": [{"sha": "d84ed1c93dee41ab38c1c9ac4410432f350e5899", "filename": "src/libstd/keyword_docs.rs", "status": "modified", "additions": 36, "deletions": 38, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/dfd454bd3843c4f4dee2e943297bf3d208252dc6/src%2Flibstd%2Fkeyword_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfd454bd3843c4f4dee2e943297bf3d208252dc6/src%2Flibstd%2Fkeyword_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fkeyword_docs.rs?ref=dfd454bd3843c4f4dee2e943297bf3d208252dc6", "patch": "@@ -1030,22 +1030,39 @@ mod self_upper_keyword {}\n //\n /// A place that is valid for the duration of a program.\n ///\n-/// A `static` item is similar to a [`const`] item in that it lives for the\n-/// entire duration of the program and need to have its type explicited, with a\n-/// `static` lifetime, outliving any other lifetime. Added to that, `static`\n-/// items represent a precise memory location.\n+/// A static item is a value which is valid for the entire duration of your\n+/// program (a `'static` lifetime).\n+///\n+/// On the surface, `static` items seem very similar to [`const`]s: both contain\n+/// a value, both require type annotations and both can only be initialized with\n+/// constant functions and values. However, `static`s are notably different in\n+/// that they represent a location in memory. That means that you can have\n+/// references to `static` items and potentially even modify them, making them\n+/// essentially global variables.\n ///\n /// Static items do not call [`drop`] at the end of the program.\n ///\n /// There are two types of `static` items: those declared in association with\n /// the [`mut`] keyword and those without.\n ///\n+/// Items that are both static and owned cannot be moved:\n+///\n+/// ```rust,compile_fail,E0507\n+/// static VEC: Vec<u32> = vec![];\n+///\n+/// fn move_vec(v: Vec<u32>) -> Vec<u32> {\n+///     v\n+/// }\n+///\n+/// move_vec(VEC);\n+/// ```\n+///\n /// # Simple `static`s\n ///\n-/// Non-[`mut`] `static` items that contain a type that is not interior mutable\n-/// may be placed in read-only memory. All access to a `static` item are\n-/// considered safe but some restrictions apply. See the [Reference] for more\n-/// information.\n+/// Accessing non-[`mut`] `static` items is considered safe, but some\n+/// restrictions apply. Most notably, the type of a `static` value needs to\n+/// implement the [`Sync`] trait, ruling out interior mutability containers\n+/// like [`RefCell`]. See the [Reference] for more information.\n ///\n /// ```rust\n /// static FOO: [i32; 5] = [1, 2, 3, 4, 5];\n@@ -1054,43 +1071,22 @@ mod self_upper_keyword {}\n /// let r2 = &FOO as *const _;\n /// // With a strictly read-only static, references will have the same adress\n /// assert_eq!(r1, r2);\n+/// // A static item is used just like a variable\n+/// println!(\"{:?}\", FOO);\n /// ```\n ///\n /// # Mutable `static`s\n ///\n /// If a `static` item is declared with the [`mut`] keyword, then it is allowed\n-/// to be modified by the program. To make concurrency bugs hard to run into,\n-/// all access to a `static mut` require an [`unsafe`] block. Care should be\n-/// taken to ensure access (both read and write) are thread-safe.\n+/// to be modified by the program. However, accessing mutable `static`s can\n+/// cause undefined behavior in a number of ways, for example due to data races\n+/// in a multithreaded context. As such, all accesses to mutable `static`s\n+/// require an [`unsafe`] block.\n ///\n-/// Despite their unsafety, mutable `static`s are very useful: they can be used\n-/// to represent global state shared by the whole program or be used in\n+/// Despite their unsafety, mutable `static`s are necessary in many contexts:\n+/// they can be used to represent global state shared by the whole program or in\n /// [`extern`] blocks to bind to variables from C libraries.\n ///\n-/// As global state:\n-///\n-/// ```rust\n-/// # #![allow(unused_variables)]\n-/// # fn main() {}\n-/// # fn atomic_add(_: &mut u32, _: u32) -> u32 { 2 }\n-/// static mut LEVELS: u32 = 0;\n-///\n-/// // This violates the idea of no shared state, and this doesn't internally\n-/// // protect against races, so this function is `unsafe`\n-/// unsafe fn bump_levels_unsafe1() -> u32 {\n-///     let ret = LEVELS;\n-///     LEVELS += 1;\n-///     return ret;\n-/// }\n-///\n-/// // Assuming that we have an atomic_add function which returns the old value,\n-/// // this function is \"safe\" but the meaning of the return value may not be\n-/// // what callers expect, so it's still marked as `unsafe`\n-/// unsafe fn bump_levels_unsafe2() -> u32 {\n-///     return atomic_add(&mut LEVELS, 1);\n-/// }\n-/// ```\n-///\n /// In an [`extern`] block:\n ///\n /// ```rust,no_run\n@@ -1108,7 +1104,9 @@ mod self_upper_keyword {}\n /// [`mut`]: keyword.mut.html\n /// [`unsafe`]: keyword.unsafe.html\n /// [`drop`]: mem/fn.drop.html\n-/// [Reference]: ../reference/items/static-items.html#static-items\n+/// [`Sync`]: marker/trait.Sync.html\n+/// [`RefCell`]: cell/struct.RefCell.html\n+/// [Reference]: ../reference/items/static-items.html\n mod static_keyword {}\n \n #[doc(keyword = \"struct\")]"}]}