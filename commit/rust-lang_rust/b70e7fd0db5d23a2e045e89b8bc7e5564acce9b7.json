{"sha": "b70e7fd0db5d23a2e045e89b8bc7e5564acce9b7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3MGU3ZmQwZGI1ZDIzYTJlMDQ1ZTg5YjhiYzdlNTU2NGFjY2U5Yjc=", "commit": {"author": {"name": "CAD97", "email": "cad97@cad97.com", "date": "2020-02-03T19:54:02Z"}, "committer": {"name": "CAD97", "email": "cad97@cad97.com", "date": "2020-04-08T06:11:55Z"}, "message": "Add inherent impls for unchecked math intrinsics", "tree": {"sha": "7918a311ba6ea3ed024a1fb7f4ef995cd60f207d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7918a311ba6ea3ed024a1fb7f4ef995cd60f207d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b70e7fd0db5d23a2e045e89b8bc7e5564acce9b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b70e7fd0db5d23a2e045e89b8bc7e5564acce9b7", "html_url": "https://github.com/rust-lang/rust/commit/b70e7fd0db5d23a2e045e89b8bc7e5564acce9b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b70e7fd0db5d23a2e045e89b8bc7e5564acce9b7/comments", "author": {"login": "CAD97", "id": 5992217, "node_id": "MDQ6VXNlcjU5OTIyMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5992217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CAD97", "html_url": "https://github.com/CAD97", "followers_url": "https://api.github.com/users/CAD97/followers", "following_url": "https://api.github.com/users/CAD97/following{/other_user}", "gists_url": "https://api.github.com/users/CAD97/gists{/gist_id}", "starred_url": "https://api.github.com/users/CAD97/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CAD97/subscriptions", "organizations_url": "https://api.github.com/users/CAD97/orgs", "repos_url": "https://api.github.com/users/CAD97/repos", "events_url": "https://api.github.com/users/CAD97/events{/privacy}", "received_events_url": "https://api.github.com/users/CAD97/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CAD97", "id": 5992217, "node_id": "MDQ6VXNlcjU5OTIyMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5992217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CAD97", "html_url": "https://github.com/CAD97", "followers_url": "https://api.github.com/users/CAD97/followers", "following_url": "https://api.github.com/users/CAD97/following{/other_user}", "gists_url": "https://api.github.com/users/CAD97/gists{/gist_id}", "starred_url": "https://api.github.com/users/CAD97/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CAD97/subscriptions", "organizations_url": "https://api.github.com/users/CAD97/orgs", "repos_url": "https://api.github.com/users/CAD97/repos", "events_url": "https://api.github.com/users/CAD97/events{/privacy}", "received_events_url": "https://api.github.com/users/CAD97/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42abbd8878d3b67238f3611b0587c704ba94f39c", "url": "https://api.github.com/repos/rust-lang/rust/commits/42abbd8878d3b67238f3611b0587c704ba94f39c", "html_url": "https://github.com/rust-lang/rust/commit/42abbd8878d3b67238f3611b0587c704ba94f39c"}], "stats": {"total": 102, "additions": 102, "deletions": 0}, "files": [{"sha": "db533d154c990b3d5ffd1a5a28b953043760254c", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/b70e7fd0db5d23a2e045e89b8bc7e5564acce9b7/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b70e7fd0db5d23a2e045e89b8bc7e5564acce9b7/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=b70e7fd0db5d23a2e045e89b8bc7e5564acce9b7", "patch": "@@ -697,6 +697,23 @@ $EndFeature, \"\n             }\n         }\n \n+        doc_comment! {\n+            concat!(\"Unchecked integer addition. Computes `self + rhs, assuming overflow\n+cannot occur. This results in undefined behavior when `self + rhs > \", stringify!($SelfT),\n+\"::max_value()` or `self + rhs < \", stringify!($SelfT), \"::min_value()`.\"),\n+            #[unstable(\n+                feature = \"unchecked_math\",\n+                reason = \"niche optimization path\",\n+                issue = \"none\",\n+            )]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n+            #[inline]\n+            pub unsafe fn unchecked_add(self, rhs: Self) -> Self {\n+                intrinsics::unchecked_add(self, rhs)\n+            }\n+        }\n+\n         doc_comment! {\n             concat!(\"Checked integer subtraction. Computes `self - rhs`, returning `None` if\n overflow occurred.\n@@ -722,6 +739,23 @@ $EndFeature, \"\n             }\n         }\n \n+        doc_comment! {\n+            concat!(\"Unchecked integer subtraction. Computes `self - rhs, assuming overflow\n+cannot occur. This results in undefined behavior when `self - rhs > \", stringify!($SelfT),\n+\"::max_value()` or `self - rhs < \", stringify!($SelfT), \"::min_value()`.\"),\n+            #[unstable(\n+                feature = \"unchecked_math\",\n+                reason = \"niche optimization path\",\n+                issue = \"none\",\n+            )]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n+            #[inline]\n+            pub unsafe fn unchecked_sub(self, rhs: Self) -> Self {\n+                intrinsics::unchecked_sub(self, rhs)\n+            }\n+        }\n+\n         doc_comment! {\n             concat!(\"Checked integer multiplication. Computes `self * rhs`, returning `None` if\n overflow occurred.\n@@ -747,6 +781,23 @@ $EndFeature, \"\n             }\n         }\n \n+        doc_comment! {\n+            concat!(\"Unchecked integer multiplication. Computes `self * rhs, assuming overflow\n+cannot occur. This results in undefined behavior when `self * rhs > \", stringify!($SelfT),\n+\"::max_value()` or `self * rhs < \", stringify!($SelfT), \"::min_value()`.\"),\n+            #[unstable(\n+                feature = \"unchecked_math\",\n+                reason = \"niche optimization path\",\n+                issue = \"none\",\n+            )]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n+            #[inline]\n+            pub unsafe fn unchecked_mul(self, rhs: Self) -> Self {\n+                intrinsics::unchecked_mul(self, rhs)\n+            }\n+        }\n+\n         doc_comment! {\n             concat!(\"Checked integer division. Computes `self / rhs`, returning `None` if `rhs == 0`\n or the division results in overflow.\n@@ -2884,6 +2935,23 @@ assert_eq!((\", stringify!($SelfT), \"::MAX - 2).checked_add(3), None);\", $EndFeat\n             }\n         }\n \n+        doc_comment! {\n+            concat!(\"Unchecked integer addition. Computes `self + rhs, assuming overflow\n+cannot occur. This results in undefined behavior when `self + rhs > \", stringify!($SelfT),\n+\"::max_value()` or `self + rhs < \", stringify!($SelfT), \"::min_value()`.\"),\n+            #[unstable(\n+                feature = \"unchecked_math\",\n+                reason = \"niche optimization path\",\n+                issue = \"none\",\n+            )]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n+            #[inline]\n+            pub unsafe fn unchecked_add(self, rhs: Self) -> Self {\n+                intrinsics::unchecked_add(self, rhs)\n+            }\n+        }\n+\n         doc_comment! {\n             concat!(\"Checked integer subtraction. Computes `self - rhs`, returning\n `None` if overflow occurred.\n@@ -2907,6 +2975,23 @@ assert_eq!(0\", stringify!($SelfT), \".checked_sub(1), None);\", $EndFeature, \"\n             }\n         }\n \n+        doc_comment! {\n+            concat!(\"Unchecked integer subtraction. Computes `self - rhs, assuming overflow\n+cannot occur. This results in undefined behavior when `self - rhs > \", stringify!($SelfT),\n+\"::max_value()` or `self - rhs < \", stringify!($SelfT), \"::min_value()`.\"),\n+            #[unstable(\n+                feature = \"unchecked_math\",\n+                reason = \"niche optimization path\",\n+                issue = \"none\",\n+            )]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n+            #[inline]\n+            pub unsafe fn unchecked_sub(self, rhs: Self) -> Self {\n+                intrinsics::unchecked_sub(self, rhs)\n+            }\n+        }\n+\n         doc_comment! {\n             concat!(\"Checked integer multiplication. Computes `self * rhs`, returning\n `None` if overflow occurred.\n@@ -2930,6 +3015,23 @@ assert_eq!(\", stringify!($SelfT), \"::MAX.checked_mul(2), None);\", $EndFeature, \"\n             }\n         }\n \n+        doc_comment! {\n+            concat!(\"Unchecked integer multiplication. Computes `self * rhs, assuming overflow\n+cannot occur. This results in undefined behavior when `self * rhs > \", stringify!($SelfT),\n+\"::max_value()` or `self * rhs < \", stringify!($SelfT), \"::min_value()`.\"),\n+            #[unstable(\n+                feature = \"unchecked_math\",\n+                reason = \"niche optimization path\",\n+                issue = \"none\",\n+            )]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n+            #[inline]\n+            pub unsafe fn unchecked_mul(self, rhs: Self) -> Self {\n+                intrinsics::unchecked_mul(self, rhs)\n+            }\n+        }\n+\n         doc_comment! {\n             concat!(\"Checked integer division. Computes `self / rhs`, returning `None`\n if `rhs == 0`."}]}