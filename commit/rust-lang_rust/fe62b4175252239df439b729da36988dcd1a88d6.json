{"sha": "fe62b4175252239df439b729da36988dcd1a88d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlNjJiNDE3NTI1MjIzOWRmNDM5YjcyOWRhMzY5ODhkY2QxYTg4ZDY=", "commit": {"author": {"name": "Ulrik Sverdrup", "email": "bluss@users.noreply.github.com", "date": "2016-09-16T09:30:34Z"}, "committer": {"name": "Ulrik Sverdrup", "email": "bluss@users.noreply.github.com", "date": "2016-09-16T09:30:34Z"}, "message": "Clarify Index/IndexMut trait docs\n\nUse examples and placeholder variable names with more meaning, to not\nmake it so abstract.", "tree": {"sha": "2a2f104efa6231d8fb7686e278f861ec82ccaa31", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a2f104efa6231d8fb7686e278f861ec82ccaa31"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe62b4175252239df439b729da36988dcd1a88d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe62b4175252239df439b729da36988dcd1a88d6", "html_url": "https://github.com/rust-lang/rust/commit/fe62b4175252239df439b729da36988dcd1a88d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe62b4175252239df439b729da36988dcd1a88d6/comments", "author": {"login": "bluss", "id": 3209739, "node_id": "MDQ6VXNlcjMyMDk3Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/3209739?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bluss", "html_url": "https://github.com/bluss", "followers_url": "https://api.github.com/users/bluss/followers", "following_url": "https://api.github.com/users/bluss/following{/other_user}", "gists_url": "https://api.github.com/users/bluss/gists{/gist_id}", "starred_url": "https://api.github.com/users/bluss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bluss/subscriptions", "organizations_url": "https://api.github.com/users/bluss/orgs", "repos_url": "https://api.github.com/users/bluss/repos", "events_url": "https://api.github.com/users/bluss/events{/privacy}", "received_events_url": "https://api.github.com/users/bluss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bluss", "id": 3209739, "node_id": "MDQ6VXNlcjMyMDk3Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/3209739?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bluss", "html_url": "https://github.com/bluss", "followers_url": "https://api.github.com/users/bluss/followers", "following_url": "https://api.github.com/users/bluss/following{/other_user}", "gists_url": "https://api.github.com/users/bluss/gists{/gist_id}", "starred_url": "https://api.github.com/users/bluss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bluss/subscriptions", "organizations_url": "https://api.github.com/users/bluss/orgs", "repos_url": "https://api.github.com/users/bluss/repos", "events_url": "https://api.github.com/users/bluss/events{/privacy}", "received_events_url": "https://api.github.com/users/bluss/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5dbf8a0f8843c5466c3866cc2a288c0ef7051d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5dbf8a0f8843c5466c3866cc2a288c0ef7051d2", "html_url": "https://github.com/rust-lang/rust/commit/a5dbf8a0f8843c5466c3866cc2a288c0ef7051d2"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "892d711c0dce03da29e684cc378047de2207b332", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/fe62b4175252239df439b729da36988dcd1a88d6/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe62b4175252239df439b729da36988dcd1a88d6/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=fe62b4175252239df439b729da36988dcd1a88d6", "patch": "@@ -1873,7 +1873,7 @@ macro_rules! shr_assign_impl_all {\n shr_assign_impl_all! { u8 u16 u32 u64 usize i8 i16 i32 i64 isize }\n \n /// The `Index` trait is used to specify the functionality of indexing operations\n-/// like `arr[idx]` when used in an immutable context.\n+/// like `container[index]` when used in an immutable context.\n ///\n /// # Examples\n ///\n@@ -1924,50 +1924,50 @@ pub trait Index<Idx: ?Sized> {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     type Output: ?Sized;\n \n-    /// The method for the indexing (`Foo[Bar]`) operation\n+    /// The method for the indexing (`container[index]`) operation\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn index(&self, index: Idx) -> &Self::Output;\n }\n \n /// The `IndexMut` trait is used to specify the functionality of indexing\n-/// operations like `arr[idx]`, when used in a mutable context.\n+/// operations like `container[index]`, when used in a mutable context.\n ///\n /// # Examples\n ///\n-/// A trivial implementation of `IndexMut`. When `Foo[Bar]` happens, it ends up\n-/// calling `index_mut`, and therefore, `main` prints `Indexing!`.\n+/// A trivial implementation of `IndexMut` for a type `Foo`. When `&mut Foo[2]`\n+/// happens, it ends up calling `index_mut`, and therefore, `main` prints\n+/// `Mutable indexing with 2!`.\n ///\n /// ```\n /// use std::ops::{Index, IndexMut};\n ///\n /// #[derive(Copy, Clone)]\n /// struct Foo;\n-/// struct Bar;\n ///\n-/// impl Index<Bar> for Foo {\n+/// impl Index<usize> for Foo {\n ///     type Output = Foo;\n ///\n-///     fn index<'a>(&'a self, _index: Bar) -> &'a Foo {\n+///     fn index(&self, _index: usize) -> &Foo {\n ///         self\n ///     }\n /// }\n ///\n-/// impl IndexMut<Bar> for Foo {\n-///     fn index_mut<'a>(&'a mut self, _index: Bar) -> &'a mut Foo {\n-///         println!(\"Indexing!\");\n+/// impl IndexMut<usize> for Foo {\n+///     fn index_mut(&mut self, index: usize) -> &mut Foo {\n+///         println!(\"Mutable indexing with {}!\", index);\n ///         self\n ///     }\n /// }\n ///\n /// fn main() {\n-///     &mut Foo[Bar];\n+///     &mut Foo[2];\n /// }\n /// ```\n #[lang = \"index_mut\"]\n #[rustc_on_unimplemented = \"the type `{Self}` cannot be mutably indexed by `{Idx}`\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait IndexMut<Idx: ?Sized>: Index<Idx> {\n-    /// The method for the indexing (`Foo[Bar]`) operation\n+    /// The method for the mutable indexing (`container[index]`) operation\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn index_mut(&mut self, index: Idx) -> &mut Self::Output;\n }"}]}