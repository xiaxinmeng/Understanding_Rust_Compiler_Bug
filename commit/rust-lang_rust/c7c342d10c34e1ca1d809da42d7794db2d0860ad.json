{"sha": "c7c342d10c34e1ca1d809da42d7794db2d0860ad", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3YzM0MmQxMGMzNGUxY2ExZDgwOWRhNDJkNzc5NGRiMmQwODYwYWQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-10-18T10:17:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-10-18T10:17:14Z"}, "message": "auto merge of #18103 : pcwalton/rust/bitflags-inline, r=thestinger\n\nServo really wants this.\r\n\r\nr? @nick29581", "tree": {"sha": "28a827ab43a34a4e967657d8a122482c0ddb4aec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28a827ab43a34a4e967657d8a122482c0ddb4aec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c7c342d10c34e1ca1d809da42d7794db2d0860ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c7c342d10c34e1ca1d809da42d7794db2d0860ad", "html_url": "https://github.com/rust-lang/rust/commit/c7c342d10c34e1ca1d809da42d7794db2d0860ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c7c342d10c34e1ca1d809da42d7794db2d0860ad/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b064a59cc84409829b536071073dca5e8dd209e", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b064a59cc84409829b536071073dca5e8dd209e", "html_url": "https://github.com/rust-lang/rust/commit/4b064a59cc84409829b536071073dca5e8dd209e"}, {"sha": "416e6ecf8c392a0346b0a46bc5712e4371602922", "url": "https://api.github.com/repos/rust-lang/rust/commits/416e6ecf8c392a0346b0a46bc5712e4371602922", "html_url": "https://github.com/rust-lang/rust/commit/416e6ecf8c392a0346b0a46bc5712e4371602922"}], "stats": {"total": 11, "additions": 11, "deletions": 0}, "files": [{"sha": "fb5934c6af63413e9bf11a75f7f4e06c06d689b0", "filename": "src/libstd/bitflags.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c7c342d10c34e1ca1d809da42d7794db2d0860ad/src%2Flibstd%2Fbitflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7c342d10c34e1ca1d809da42d7794db2d0860ad/src%2Flibstd%2Fbitflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbitflags.rs?ref=c7c342d10c34e1ca1d809da42d7794db2d0860ad", "patch": "@@ -127,22 +127,26 @@ macro_rules! bitflags {\n \n         impl $BitFlags {\n             /// Returns an empty set of flags.\n+            #[inline]\n             pub fn empty() -> $BitFlags {\n                 $BitFlags { bits: 0 }\n             }\n \n             /// Returns the set containing all flags.\n+            #[inline]\n             pub fn all() -> $BitFlags {\n                 $BitFlags { bits: $($value)|+ }\n             }\n \n             /// Returns the raw value of the flags currently stored.\n+            #[inline]\n             pub fn bits(&self) -> $T {\n                 self.bits\n             }\n \n             /// Convert from underlying bit representation, unless that\n             /// representation contains bits that do not correspond to a flag.\n+            #[inline]\n             pub fn from_bits(bits: $T) -> ::std::option::Option<$BitFlags> {\n                 if (bits & !$BitFlags::all().bits()) != 0 {\n                     ::std::option::None\n@@ -153,21 +157,25 @@ macro_rules! bitflags {\n \n             /// Convert from underlying bit representation, dropping any bits\n             /// that do not correspond to flags.\n+            #[inline]\n             pub fn from_bits_truncate(bits: $T) -> $BitFlags {\n                 $BitFlags { bits: bits } & $BitFlags::all()\n             }\n \n             /// Returns `true` if no flags are currently stored.\n+            #[inline]\n             pub fn is_empty(&self) -> bool {\n                 *self == $BitFlags::empty()\n             }\n \n             /// Returns `true` if all flags are currently set.\n+            #[inline]\n             pub fn is_all(&self) -> bool {\n                 *self == $BitFlags::all()\n             }\n \n             /// Returns `true` if there are flags common to both `self` and `other`.\n+            #[inline]\n             pub fn intersects(&self, other: $BitFlags) -> bool {\n                 !(self & other).is_empty()\n             }\n@@ -179,16 +187,19 @@ macro_rules! bitflags {\n             }\n \n             /// Inserts the specified flags in-place.\n+            #[inline]\n             pub fn insert(&mut self, other: $BitFlags) {\n                 self.bits |= other.bits;\n             }\n \n             /// Removes the specified flags in-place.\n+            #[inline]\n             pub fn remove(&mut self, other: $BitFlags) {\n                 self.bits &= !other.bits;\n             }\n \n             /// Toggles the specified flags in-place.\n+            #[inline]\n             pub fn toggle(&mut self, other: $BitFlags) {\n                 self.bits ^= other.bits;\n             }"}]}