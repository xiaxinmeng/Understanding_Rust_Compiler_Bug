{"sha": "906c3601fa2369cf519e063399070ecb245144e0", "node_id": "C_kwDOAAsO6NoAKDkwNmMzNjAxZmEyMzY5Y2Y1MTllMDYzMzk5MDcwZWNiMjQ1MTQ0ZTA", "commit": {"author": {"name": "Ben Kimock", "email": "kimockb@gmail.com", "date": "2022-11-27T23:38:29Z"}, "committer": {"name": "Ben Kimock", "email": "kimockb@gmail.com", "date": "2022-11-29T14:24:01Z"}, "message": "Adjust inlining attributes around panic_immediate_abort", "tree": {"sha": "0da15f02d9236072cbbbbb1e96478755be20b3fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0da15f02d9236072cbbbbb1e96478755be20b3fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/906c3601fa2369cf519e063399070ecb245144e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/906c3601fa2369cf519e063399070ecb245144e0", "html_url": "https://github.com/rust-lang/rust/commit/906c3601fa2369cf519e063399070ecb245144e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/906c3601fa2369cf519e063399070ecb245144e0/comments", "author": {"login": "saethlin", "id": 12105168, "node_id": "MDQ6VXNlcjEyMTA1MTY4", "avatar_url": "https://avatars.githubusercontent.com/u/12105168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saethlin", "html_url": "https://github.com/saethlin", "followers_url": "https://api.github.com/users/saethlin/followers", "following_url": "https://api.github.com/users/saethlin/following{/other_user}", "gists_url": "https://api.github.com/users/saethlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/saethlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saethlin/subscriptions", "organizations_url": "https://api.github.com/users/saethlin/orgs", "repos_url": "https://api.github.com/users/saethlin/repos", "events_url": "https://api.github.com/users/saethlin/events{/privacy}", "received_events_url": "https://api.github.com/users/saethlin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "saethlin", "id": 12105168, "node_id": "MDQ6VXNlcjEyMTA1MTY4", "avatar_url": "https://avatars.githubusercontent.com/u/12105168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saethlin", "html_url": "https://github.com/saethlin", "followers_url": "https://api.github.com/users/saethlin/followers", "following_url": "https://api.github.com/users/saethlin/following{/other_user}", "gists_url": "https://api.github.com/users/saethlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/saethlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saethlin/subscriptions", "organizations_url": "https://api.github.com/users/saethlin/orgs", "repos_url": "https://api.github.com/users/saethlin/repos", "events_url": "https://api.github.com/users/saethlin/events{/privacy}", "received_events_url": "https://api.github.com/users/saethlin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b833ad56f46a0bbe0e8729512812a161e7dae28a", "url": "https://api.github.com/repos/rust-lang/rust/commits/b833ad56f46a0bbe0e8729512812a161e7dae28a", "html_url": "https://github.com/rust-lang/rust/commit/b833ad56f46a0bbe0e8729512812a161e7dae28a"}], "stats": {"total": 50, "additions": 26, "deletions": 24}, "files": [{"sha": "a704a00faaafadbbdedb51a3d1cb457dcb3992ed", "filename": "library/core/src/panicking.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/906c3601fa2369cf519e063399070ecb245144e0/library%2Fcore%2Fsrc%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/906c3601fa2369cf519e063399070ecb245144e0/library%2Fcore%2Fsrc%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fpanicking.rs?ref=906c3601fa2369cf519e063399070ecb245144e0", "patch": "@@ -38,10 +38,9 @@ use crate::panic::{Location, PanicInfo};\n /// site as much as possible (so that `panic!()` has as low an impact\n /// on (e.g.) the inlining of other functions as possible), by moving\n /// the actual formatting into this shared place.\n-#[cold]\n // If panic_immediate_abort, inline the abort call,\n // otherwise avoid inlining because of it is cold path.\n-#[cfg_attr(not(feature = \"panic_immediate_abort\"), inline(never))]\n+#[cfg_attr(not(feature = \"panic_immediate_abort\"), inline(never), cold)]\n #[cfg_attr(feature = \"panic_immediate_abort\", inline)]\n #[track_caller]\n #[lang = \"panic_fmt\"] // needed for const-evaluated panics\n@@ -67,8 +66,7 @@ pub const fn panic_fmt(fmt: fmt::Arguments<'_>) -> ! {\n \n /// Like panic_fmt, but without unwinding and track_caller to reduce the impact on codesize.\n /// Also just works on `str`, as a `fmt::Arguments` needs more space to be passed.\n-#[cold]\n-#[cfg_attr(not(feature = \"panic_immediate_abort\"), inline(never))]\n+#[cfg_attr(not(feature = \"panic_immediate_abort\"), inline(never), cold)]\n #[cfg_attr(feature = \"panic_immediate_abort\", inline)]\n #[rustc_nounwind]\n pub fn panic_str_nounwind(msg: &'static str) -> ! {\n@@ -96,10 +94,9 @@ pub fn panic_str_nounwind(msg: &'static str) -> ! {\n // above.\n \n /// The underlying implementation of libcore's `panic!` macro when no formatting is used.\n-#[cold]\n // never inline unless panic_immediate_abort to avoid code\n // bloat at the call sites as much as possible\n-#[cfg_attr(not(feature = \"panic_immediate_abort\"), inline(never))]\n+#[cfg_attr(not(feature = \"panic_immediate_abort\"), inline(never), cold)]\n #[cfg_attr(feature = \"panic_immediate_abort\", inline)]\n #[track_caller]\n #[rustc_const_unstable(feature = \"core_panic\", issue = \"none\")]\n@@ -138,8 +135,8 @@ pub const fn panic_display<T: fmt::Display>(x: &T) -> ! {\n     panic_fmt(format_args!(\"{}\", *x));\n }\n \n-#[cold]\n-#[cfg_attr(not(feature = \"panic_immediate_abort\"), inline(never))]\n+#[cfg_attr(not(feature = \"panic_immediate_abort\"), inline(never), cold)]\n+#[cfg_attr(feature = \"panic_immediate_abort\", inline)]\n #[track_caller]\n #[lang = \"panic_bounds_check\"] // needed by codegen for panic on OOB array/slice access\n fn panic_bounds_check(index: usize, len: usize) -> ! {\n@@ -154,8 +151,8 @@ fn panic_bounds_check(index: usize, len: usize) -> ! {\n ///\n /// This function is called directly by the codegen backend, and must not have\n /// any extra arguments (including those synthesized by track_caller).\n-#[cold]\n-#[inline(never)]\n+#[cfg_attr(not(feature = \"panic_immediate_abort\"), inline(never), cold)]\n+#[cfg_attr(feature = \"panic_immediate_abort\", inline)]\n #[lang = \"panic_no_unwind\"] // needed by codegen for panic in nounwind function\n #[rustc_nounwind]\n fn panic_no_unwind() -> ! {\n@@ -185,7 +182,8 @@ pub enum AssertKind {\n }\n \n /// Internal function for `assert_eq!` and `assert_ne!` macros\n-#[cold]\n+#[cfg_attr(not(feature = \"panic_immediate_abort\"), inline(never), cold)]\n+#[cfg_attr(feature = \"panic_immediate_abort\", inline)]\n #[track_caller]\n #[doc(hidden)]\n pub fn assert_failed<T, U>(\n@@ -202,7 +200,8 @@ where\n }\n \n /// Internal function for `assert_match!`\n-#[cold]\n+#[cfg_attr(not(feature = \"panic_immediate_abort\"), inline(never), cold)]\n+#[cfg_attr(feature = \"panic_immediate_abort\", inline)]\n #[track_caller]\n #[doc(hidden)]\n pub fn assert_matches_failed<T: fmt::Debug + ?Sized>(\n@@ -221,6 +220,8 @@ pub fn assert_matches_failed<T: fmt::Debug + ?Sized>(\n }\n \n /// Non-generic version of the above functions, to avoid code bloat.\n+#[cfg_attr(not(feature = \"panic_immediate_abort\"), inline(never), cold)]\n+#[cfg_attr(feature = \"panic_immediate_abort\", inline)]\n #[track_caller]\n fn assert_failed_inner(\n     kind: AssertKind,"}, {"sha": "c295a0e06458d910a104c3242b711c1dc9e3081c", "filename": "library/core/src/slice/index.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/906c3601fa2369cf519e063399070ecb245144e0/library%2Fcore%2Fsrc%2Fslice%2Findex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/906c3601fa2369cf519e063399070ecb245144e0/library%2Fcore%2Fsrc%2Fslice%2Findex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Findex.rs?ref=906c3601fa2369cf519e063399070ecb245144e0", "patch": "@@ -31,9 +31,8 @@ where\n     }\n }\n \n-#[cfg_attr(not(feature = \"panic_immediate_abort\"), inline(never))]\n+#[cfg_attr(not(feature = \"panic_immediate_abort\"), inline(never), cold)]\n #[cfg_attr(feature = \"panic_immediate_abort\", inline)]\n-#[cold]\n #[track_caller]\n #[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]\n const fn slice_start_index_len_fail(index: usize, len: usize) -> ! {\n@@ -48,19 +47,20 @@ const fn slice_start_index_len_fail(index: usize, len: usize) -> ! {\n }\n \n // FIXME const-hack\n+#[inline]\n #[track_caller]\n fn slice_start_index_len_fail_rt(index: usize, len: usize) -> ! {\n     panic!(\"range start index {index} out of range for slice of length {len}\");\n }\n \n+#[inline]\n #[track_caller]\n const fn slice_start_index_len_fail_ct(_: usize, _: usize) -> ! {\n     panic!(\"slice start index is out of range for slice\");\n }\n \n-#[cfg_attr(not(feature = \"panic_immediate_abort\"), inline(never))]\n+#[cfg_attr(not(feature = \"panic_immediate_abort\"), inline(never), cold)]\n #[cfg_attr(feature = \"panic_immediate_abort\", inline)]\n-#[cold]\n #[track_caller]\n #[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]\n const fn slice_end_index_len_fail(index: usize, len: usize) -> ! {\n@@ -71,19 +71,20 @@ const fn slice_end_index_len_fail(index: usize, len: usize) -> ! {\n }\n \n // FIXME const-hack\n+#[inline]\n #[track_caller]\n fn slice_end_index_len_fail_rt(index: usize, len: usize) -> ! {\n     panic!(\"range end index {index} out of range for slice of length {len}\");\n }\n \n+#[inline]\n #[track_caller]\n const fn slice_end_index_len_fail_ct(_: usize, _: usize) -> ! {\n     panic!(\"slice end index is out of range for slice\");\n }\n \n-#[cfg_attr(not(feature = \"panic_immediate_abort\"), inline(never))]\n+#[cfg_attr(not(feature = \"panic_immediate_abort\"), inline(never), cold)]\n #[cfg_attr(feature = \"panic_immediate_abort\", inline)]\n-#[cold]\n #[track_caller]\n #[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]\n const fn slice_index_order_fail(index: usize, end: usize) -> ! {\n@@ -92,27 +93,27 @@ const fn slice_index_order_fail(index: usize, end: usize) -> ! {\n }\n \n // FIXME const-hack\n+#[inline]\n #[track_caller]\n fn slice_index_order_fail_rt(index: usize, end: usize) -> ! {\n     panic!(\"slice index starts at {index} but ends at {end}\");\n }\n \n+#[inline]\n #[track_caller]\n const fn slice_index_order_fail_ct(_: usize, _: usize) -> ! {\n     panic!(\"slice index start is larger than end\");\n }\n \n-#[cfg_attr(not(feature = \"panic_immediate_abort\"), inline(never))]\n+#[cfg_attr(not(feature = \"panic_immediate_abort\"), inline(never), cold)]\n #[cfg_attr(feature = \"panic_immediate_abort\", inline)]\n-#[cold]\n #[track_caller]\n const fn slice_start_index_overflow_fail() -> ! {\n     panic!(\"attempted to index slice from after maximum usize\");\n }\n \n-#[cfg_attr(not(feature = \"panic_immediate_abort\"), inline(never))]\n+#[cfg_attr(not(feature = \"panic_immediate_abort\"), inline(never), cold)]\n #[cfg_attr(feature = \"panic_immediate_abort\", inline)]\n-#[cold]\n #[track_caller]\n const fn slice_end_index_overflow_fail() -> ! {\n     panic!(\"attempted to index slice up to maximum usize\");"}, {"sha": "1039835bbbdfe5430d9f5175ed28b7b4d11ef883", "filename": "library/std/src/panicking.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/906c3601fa2369cf519e063399070ecb245144e0/library%2Fstd%2Fsrc%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/906c3601fa2369cf519e063399070ecb245144e0/library%2Fstd%2Fsrc%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpanicking.rs?ref=906c3601fa2369cf519e063399070ecb245144e0", "patch": "@@ -594,8 +594,8 @@ pub fn begin_panic_handler(info: &PanicInfo<'_>) -> ! {\n // lang item for CTFE panic support\n // never inline unless panic_immediate_abort to avoid code\n // bloat at the call sites as much as possible\n-#[cfg_attr(not(feature = \"panic_immediate_abort\"), inline(never))]\n-#[cold]\n+#[cfg_attr(not(feature = \"panic_immediate_abort\"), inline(never), cold)]\n+#[cfg_attr(feature = \"panic_immediate_abort\", inline)]\n #[track_caller]\n #[rustc_do_not_const_check] // hooked by const-eval\n pub const fn begin_panic<M: Any + Send>(msg: M) -> ! {"}]}