{"sha": "dab967afdc76904c971d5ac5f5f46e31272a9827", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhYjk2N2FmZGM3NjkwNGM5NzFkNWFjNWY1ZjQ2ZTMxMjcyYTk4Mjc=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2019-07-16T07:02:36Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2019-08-16T15:11:18Z"}, "message": "Use `alloc::Global` in `Box::new_uninit`", "tree": {"sha": "f1c767f0df9be420cb1036e8b58dcaaab11c0845", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1c767f0df9be420cb1036e8b58dcaaab11c0845"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dab967afdc76904c971d5ac5f5f46e31272a9827", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dab967afdc76904c971d5ac5f5f46e31272a9827", "html_url": "https://github.com/rust-lang/rust/commit/dab967afdc76904c971d5ac5f5f46e31272a9827", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dab967afdc76904c971d5ac5f5f46e31272a9827/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4eeb623e9ee35db03ec3281dcfd1c61194312404", "url": "https://api.github.com/repos/rust-lang/rust/commits/4eeb623e9ee35db03ec3281dcfd1c61194312404", "html_url": "https://github.com/rust-lang/rust/commit/4eeb623e9ee35db03ec3281dcfd1c61194312404"}], "stats": {"total": 10, "additions": 6, "deletions": 4}, "files": [{"sha": "9f6b16bbef33c50105a185424640496b0ac0e74c", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dab967afdc76904c971d5ac5f5f46e31272a9827/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dab967afdc76904c971d5ac5f5f46e31272a9827/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=dab967afdc76904c971d5ac5f5f46e31272a9827", "patch": "@@ -94,7 +94,7 @@ use core::ptr::{self, NonNull, Unique};\n use core::slice;\n use core::task::{Context, Poll};\n \n-use crate::alloc;\n+use crate::alloc::{self, Global, Alloc};\n use crate::vec::Vec;\n use crate::raw_vec::RawVec;\n use crate::str::from_boxed_utf8_unchecked;\n@@ -144,9 +144,11 @@ impl<T> Box<T> {\n     #[unstable(feature = \"new_uninit\", issue = \"0\")]\n     pub fn new_uninit() -> Box<mem::MaybeUninit<T>> {\n         let layout = alloc::Layout::new::<mem::MaybeUninit<T>>();\n-        let ptr = unsafe { alloc::alloc(layout) };\n-        let unique = Unique::new(ptr).unwrap_or_else(|| alloc::handle_alloc_error(layout));\n-        Box(unique.cast())\n+        let ptr = unsafe {\n+            Global.alloc(layout)\n+                .unwrap_or_else(|_| alloc::handle_alloc_error(layout))\n+        };\n+        Box(ptr.cast().into())\n     }\n \n     /// Constructs a new `Pin<Box<T>>`. If `T` does not implement `Unpin`, then"}]}