{"sha": "a108d55ce634b6f71462c82966b791f18136360e", "node_id": "C_kwDOAAsO6NoAKGExMDhkNTVjZTYzNGI2ZjcxNDYyYzgyOTY2Yjc5MWYxODEzNjM2MGU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-12-18T16:01:58Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-12-18T16:04:32Z"}, "message": "don't restuct references just to reborrow", "tree": {"sha": "b97c3fb756857ff073519cf404b46a5628458b0b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b97c3fb756857ff073519cf404b46a5628458b0b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a108d55ce634b6f71462c82966b791f18136360e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a108d55ce634b6f71462c82966b791f18136360e", "html_url": "https://github.com/rust-lang/rust/commit/a108d55ce634b6f71462c82966b791f18136360e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a108d55ce634b6f71462c82966b791f18136360e/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35a99eef32a2b7b9d8e77dde539f869e522d181f", "url": "https://api.github.com/repos/rust-lang/rust/commits/35a99eef32a2b7b9d8e77dde539f869e522d181f", "html_url": "https://github.com/rust-lang/rust/commit/35a99eef32a2b7b9d8e77dde539f869e522d181f"}], "stats": {"total": 83, "additions": 41, "deletions": 42}, "files": [{"sha": "6c0faf37a63ce453b906185924ccb6d420dffb09", "filename": "compiler/rustc_codegen_llvm/src/back/lto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a108d55ce634b6f71462c82966b791f18136360e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a108d55ce634b6f71462c82966b791f18136360e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs?ref=a108d55ce634b6f71462c82966b791f18136360e", "patch": "@@ -425,7 +425,7 @@ fn thin_lto(\n         info!(\"going for that thin, thin LTO\");\n \n         let green_modules: FxHashMap<_, _> =\n-            cached_modules.iter().map(|&(_, ref wp)| (wp.cgu_name.clone(), wp.clone())).collect();\n+            cached_modules.iter().map(|(_, wp)| (wp.cgu_name.clone(), wp.clone())).collect();\n \n         let full_scope_len = modules.len() + serialized_modules.len() + cached_modules.len();\n         let mut thin_buffers = Vec::with_capacity(modules.len());"}, {"sha": "a1c77ec0cfca7b7f24a90324cf10bb666b0f0a17", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a108d55ce634b6f71462c82966b791f18136360e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a108d55ce634b6f71462c82966b791f18136360e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=a108d55ce634b6f71462c82966b791f18136360e", "patch": "@@ -722,7 +722,7 @@ fn link_natively<'a>(\n \n     linker::disable_localization(&mut cmd);\n \n-    for &(ref k, ref v) in sess.target.link_env.as_ref() {\n+    for (k, v) in sess.target.link_env.as_ref() {\n         cmd.env(k.as_ref(), v.as_ref());\n     }\n     for k in sess.target.link_env_remove.as_ref() {"}, {"sha": "0268659d3b9a13d8515eace64f9d4d2851945bec", "filename": "compiler/rustc_codegen_ssa/src/back/linker.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a108d55ce634b6f71462c82966b791f18136360e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a108d55ce634b6f71462c82966b791f18136360e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs?ref=a108d55ce634b6f71462c82966b791f18136360e", "patch": "@@ -108,7 +108,7 @@ pub fn get_linker<'a>(\n     if sess.target.is_like_msvc {\n         if let Some(ref tool) = msvc_tool {\n             cmd.args(tool.args());\n-            for &(ref k, ref v) in tool.env() {\n+            for (k, v) in tool.env() {\n                 if k == \"PATH\" {\n                     new_path.extend(env::split_paths(v));\n                     msvc_changed_path = true;"}, {"sha": "986b6d655300168046dad275e318667b1adff014", "filename": "compiler/rustc_const_eval/src/interpret/cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a108d55ce634b6f71462c82966b791f18136360e/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a108d55ce634b6f71462c82966b791f18136360e/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs?ref=a108d55ce634b6f71462c82966b791f18136360e", "patch": "@@ -332,7 +332,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                     Immediate::new_slice(ptr, length.eval_usize(*self.tcx, self.param_env), self);\n                 self.write_immediate(val, dest)\n             }\n-            (&ty::Dynamic(ref data_a, ..), &ty::Dynamic(ref data_b, ..)) => {\n+            (ty::Dynamic(data_a, ..), ty::Dynamic(data_b, ..)) => {\n                 let val = self.read_immediate(src)?;\n                 if data_a.principal() == data_b.principal() {\n                     // A NOP cast that doesn't actually change anything, should be allowed even with mismatching vtables."}, {"sha": "0b8847f827df1aa6ad9b8a056ccadba7d03ed9aa", "filename": "compiler/rustc_expand/src/mbe/macro_check.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a108d55ce634b6f71462c82966b791f18136360e/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a108d55ce634b6f71462c82966b791f18136360e/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_check.rs?ref=a108d55ce634b6f71462c82966b791f18136360e", "patch": "@@ -468,7 +468,7 @@ fn check_nested_occurrences(\n                 // We check that the meta-variable is correctly used.\n                 check_occurrences(sess, node_id, tt, macros, binders, ops, valid);\n             }\n-            (NestedMacroState::MacroName, &TokenTree::Delimited(_, ref del))\n+            (NestedMacroState::MacroName, TokenTree::Delimited(_, del))\n                 if del.delim == Delimiter::Parenthesis =>\n             {\n                 state = NestedMacroState::MacroNameParen;\n@@ -483,7 +483,7 @@ fn check_nested_occurrences(\n                     valid,\n                 );\n             }\n-            (NestedMacroState::MacroNameParen, &TokenTree::Delimited(_, ref del))\n+            (NestedMacroState::MacroNameParen, TokenTree::Delimited(_, del))\n                 if del.delim == Delimiter::Brace =>\n             {\n                 state = NestedMacroState::Empty;"}, {"sha": "320c533a66e5d0bfc1b47367765394d928277d10", "filename": "compiler/rustc_expand/src/mbe/macro_rules.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a108d55ce634b6f71462c82966b791f18136360e/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a108d55ce634b6f71462c82966b791f18136360e/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs?ref=a108d55ce634b6f71462c82966b791f18136360e", "patch": "@@ -792,7 +792,7 @@ impl<'tt> FirstSets<'tt> {\n                 TokenTree::Sequence(sp, ref seq_rep) => {\n                     let subfirst_owned;\n                     let subfirst = match self.first.get(&sp.entire()) {\n-                        Some(&Some(ref subfirst)) => subfirst,\n+                        Some(Some(subfirst)) => subfirst,\n                         Some(&None) => {\n                             subfirst_owned = self.first(&seq_rep.tts);\n                             &subfirst_owned"}, {"sha": "87abd01c7fd8fb90679ad147f38cea605db1b80c", "filename": "compiler/rustc_hir_typeck/src/demand.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a108d55ce634b6f71462c82966b791f18136360e/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a108d55ce634b6f71462c82966b791f18136360e/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs?ref=a108d55ce634b6f71462c82966b791f18136360e", "patch": "@@ -1275,7 +1275,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             };\n \n         match (&expected_ty.kind(), &checked_ty.kind()) {\n-            (&ty::Int(ref exp), &ty::Int(ref found)) => {\n+            (ty::Int(exp), ty::Int(found)) => {\n                 let (f2e_is_fallible, e2f_is_fallible) = match (exp.bit_width(), found.bit_width())\n                 {\n                     (Some(exp), Some(found)) if exp < found => (true, false),\n@@ -1288,7 +1288,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 suggest_to_change_suffix_or_into(err, f2e_is_fallible, e2f_is_fallible);\n                 true\n             }\n-            (&ty::Uint(ref exp), &ty::Uint(ref found)) => {\n+            (ty::Uint(exp), ty::Uint(found)) => {\n                 let (f2e_is_fallible, e2f_is_fallible) = match (exp.bit_width(), found.bit_width())\n                 {\n                     (Some(exp), Some(found)) if exp < found => (true, false),\n@@ -1321,7 +1321,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 suggest_to_change_suffix_or_into(err, f2e_is_fallible, e2f_is_fallible);\n                 true\n             }\n-            (&ty::Float(ref exp), &ty::Float(ref found)) => {\n+            (ty::Float(exp), ty::Float(found)) => {\n                 if found.bit_width() < exp.bit_width() {\n                     suggest_to_change_suffix_or_into(err, false, true);\n                 } else if literal_is_ty_suffixed(expr) {\n@@ -1357,7 +1357,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 }\n                 true\n             }\n-            (&ty::Float(ref exp), &ty::Uint(ref found)) => {\n+            (ty::Float(exp), ty::Uint(found)) => {\n                 // if `found` is `None` (meaning found is `usize`), don't suggest `.into()`\n                 if exp.bit_width() > found.bit_width().unwrap_or(256) {\n                     err.multipart_suggestion_verbose(\n@@ -1386,7 +1386,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 }\n                 true\n             }\n-            (&ty::Float(ref exp), &ty::Int(ref found)) => {\n+            (ty::Float(exp), ty::Int(found)) => {\n                 // if `found` is `None` (meaning found is `isize`), don't suggest `.into()`\n                 if exp.bit_width() > found.bit_width().unwrap_or(256) {\n                     err.multipart_suggestion_verbose("}, {"sha": "edbbb7272ac77d899b02d2aa3116a2decf497c04", "filename": "compiler/rustc_hir_typeck/src/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a108d55ce634b6f71462c82966b791f18136360e/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a108d55ce634b6f71462c82966b791f18136360e/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs?ref=a108d55ce634b6f71462c82966b791f18136360e", "patch": "@@ -1874,7 +1874,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // I don't use 'is_range_literal' because only double-sided, half-open ranges count.\n         if let ExprKind::Struct(\n                 QPath::LangItem(LangItem::Range, ..),\n-                &[ref range_start, ref range_end],\n+                [range_start, range_end],\n                 _,\n             ) = last_expr_field.expr.kind\n             && let variant_field ="}, {"sha": "ca4c50c49aae253dc973cb4b9c8730bc108b7003", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a108d55ce634b6f71462c82966b791f18136360e/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a108d55ce634b6f71462c82966b791f18136360e/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs?ref=a108d55ce634b6f71462c82966b791f18136360e", "patch": "@@ -754,7 +754,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     return true\n                 }\n             }\n-            &hir::FnRetTy::Return(ref ty) => {\n+            hir::FnRetTy::Return(ty) => {\n                 // Only point to return type if the expected type is the return type, as if they\n                 // are not, the expectation must have been caused by something else.\n                 debug!(\"suggest_missing_return_type: return type {:?} node {:?}\", ty, ty.kind);"}, {"sha": "b4bf9f4bcc767a3688f7a9b2965cf399c46d718e", "filename": "compiler/rustc_incremental/src/assert_dep_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a108d55ce634b6f71462c82966b791f18136360e/compiler%2Frustc_incremental%2Fsrc%2Fassert_dep_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a108d55ce634b6f71462c82966b791f18136360e/compiler%2Frustc_incremental%2Fsrc%2Fassert_dep_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fassert_dep_graph.rs?ref=a108d55ce634b6f71462c82966b791f18136360e", "patch": "@@ -249,7 +249,7 @@ fn dump_graph(query: &DepGraphQuery) {\n         // dump a .txt file with just the edges:\n         let txt_path = format!(\"{}.txt\", path);\n         let mut file = BufWriter::new(File::create(&txt_path).unwrap());\n-        for &(ref source, ref target) in &edges {\n+        for (source, target) in &edges {\n             write!(file, \"{:?} -> {:?}\\n\", source, target).unwrap();\n         }\n     }"}, {"sha": "ac455055b430375ce8aa245d092498ed9a67e199", "filename": "compiler/rustc_infer/src/traits/project.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a108d55ce634b6f71462c82966b791f18136360e/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a108d55ce634b6f71462c82966b791f18136360e/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fproject.rs?ref=a108d55ce634b6f71462c82966b791f18136360e", "patch": "@@ -200,7 +200,7 @@ impl<'tcx> ProjectionCache<'_, 'tcx> {\n     pub fn complete(&mut self, key: ProjectionCacheKey<'tcx>, result: EvaluationResult) {\n         let mut map = self.map();\n         match map.get(&key) {\n-            Some(&ProjectionCacheEntry::NormalizedTy { ref ty, complete: _ }) => {\n+            Some(ProjectionCacheEntry::NormalizedTy { ty, complete: _ }) => {\n                 info!(\"ProjectionCacheEntry::complete({:?}) - completing {:?}\", key, ty);\n                 let mut ty = ty.clone();\n                 if result.must_apply_considering_regions() {"}, {"sha": "0417f375588cc8a0500e17307b1878efa69ff603", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a108d55ce634b6f71462c82966b791f18136360e/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a108d55ce634b6f71462c82966b791f18136360e/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=a108d55ce634b6f71462c82966b791f18136360e", "patch": "@@ -438,18 +438,18 @@ impl LintStore {\n                         return CheckLintNameResult::Tool(Ok(&lint_ids));\n                     }\n                 },\n-                Some(&Id(ref id)) => return CheckLintNameResult::Tool(Ok(slice::from_ref(id))),\n+                Some(Id(id)) => return CheckLintNameResult::Tool(Ok(slice::from_ref(id))),\n                 // If the lint was registered as removed or renamed by the lint tool, we don't need\n                 // to treat tool_lints and rustc lints different and can use the code below.\n                 _ => {}\n             }\n         }\n         match self.by_name.get(&complete_name) {\n-            Some(&Renamed(ref new_name, _)) => CheckLintNameResult::Warning(\n+            Some(Renamed(new_name, _)) => CheckLintNameResult::Warning(\n                 format!(\"lint `{}` has been renamed to `{}`\", complete_name, new_name),\n                 Some(new_name.to_owned()),\n             ),\n-            Some(&Removed(ref reason)) => CheckLintNameResult::Warning(\n+            Some(Removed(reason)) => CheckLintNameResult::Warning(\n                 format!(\"lint `{}` has been removed: {}\", complete_name, reason),\n                 None,\n             ),\n@@ -470,7 +470,7 @@ impl LintStore {\n                     CheckLintNameResult::Ok(&lint_ids)\n                 }\n             },\n-            Some(&Id(ref id)) => CheckLintNameResult::Ok(slice::from_ref(id)),\n+            Some(Id(id)) => CheckLintNameResult::Ok(slice::from_ref(id)),\n             Some(&Ignored) => CheckLintNameResult::Ok(&[]),\n         }\n     }\n@@ -513,7 +513,7 @@ impl LintStore {\n                     CheckLintNameResult::Tool(Err((Some(&lint_ids), complete_name)))\n                 }\n             },\n-            Some(&Id(ref id)) => {\n+            Some(Id(id)) => {\n                 CheckLintNameResult::Tool(Err((Some(slice::from_ref(id)), complete_name)))\n             }\n             Some(other) => {"}, {"sha": "3b8df61a0eab771a704f9ed9006bbd1807b612fa", "filename": "compiler/rustc_lint/src/unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a108d55ce634b6f71462c82966b791f18136360e/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a108d55ce634b6f71462c82966b791f18136360e/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Funused.rs?ref=a108d55ce634b6f71462c82966b791f18136360e", "patch": "@@ -1279,7 +1279,7 @@ impl UnusedImportBraces {\n     fn check_use_tree(&self, cx: &EarlyContext<'_>, use_tree: &ast::UseTree, item: &ast::Item) {\n         if let ast::UseTreeKind::Nested(ref items) = use_tree.kind {\n             // Recursively check nested UseTrees\n-            for &(ref tree, _) in items {\n+            for (tree, _) in items {\n                 self.check_use_tree(cx, tree, item);\n             }\n "}, {"sha": "96f15a6f758f2aa9b09fa8a24278429c89a6e1a1", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a108d55ce634b6f71462c82966b791f18136360e/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a108d55ce634b6f71462c82966b791f18136360e/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=a108d55ce634b6f71462c82966b791f18136360e", "patch": "@@ -1849,7 +1849,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         // the assumption that they are numbered 1 to n.\n         // FIXME (#2166): This is not nearly enough to support correct versioning\n         // but is enough to get transitive crate dependencies working.\n-        self.lazy_array(deps.iter().map(|&(_, ref dep)| dep))\n+        self.lazy_array(deps.iter().map(|(_, dep)| dep))\n     }\n \n     fn encode_lib_features(&mut self) -> LazyArray<(Symbol, Option<Symbol>)> {\n@@ -1986,7 +1986,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         self.lazy_array(\n             exported_symbols\n                 .iter()\n-                .filter(|&&(ref exported_symbol, _)| match *exported_symbol {\n+                .filter(|&(exported_symbol, _)| match *exported_symbol {\n                     ExportedSymbol::NoDefId(symbol_name) => symbol_name != metadata_symbol_name,\n                     _ => true,\n                 })"}, {"sha": "1e289fc4abec3d4817d49f5521690e0792b193be", "filename": "compiler/rustc_middle/src/mir/tcx.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a108d55ce634b6f71462c82966b791f18136360e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a108d55ce634b6f71462c82966b791f18136360e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs?ref=a108d55ce634b6f71462c82966b791f18136360e", "patch": "@@ -235,7 +235,7 @@ impl<'tcx> Operand<'tcx> {\n     {\n         match self {\n             &Operand::Copy(ref l) | &Operand::Move(ref l) => l.ty(local_decls, tcx).ty,\n-            &Operand::Constant(ref c) => c.literal.ty(),\n+            Operand::Constant(c) => c.literal.ty(),\n         }\n     }\n }"}, {"sha": "042b89bc4b01f6b4a5271e9ec4dc5d51611fabcd", "filename": "compiler/rustc_middle/src/ty/flags.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a108d55ce634b6f71462c82966b791f18136360e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a108d55ce634b6f71462c82966b791f18136360e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs?ref=a108d55ce634b6f71462c82966b791f18136360e", "patch": "@@ -95,7 +95,7 @@ impl FlagComputation {\n                 self.add_flags(TypeFlags::STILL_FURTHER_SPECIALIZABLE);\n             }\n \n-            &ty::Generator(_, ref substs, _) => {\n+            ty::Generator(_, substs, _) => {\n                 let substs = substs.as_generator();\n                 let should_remove_further_specializable =\n                     !self.flags.contains(TypeFlags::STILL_FURTHER_SPECIALIZABLE);\n@@ -186,7 +186,7 @@ impl FlagComputation {\n \n             &ty::Slice(tt) => self.add_ty(tt),\n \n-            &ty::RawPtr(ref m) => {\n+            ty::RawPtr(m) => {\n                 self.add_ty(m.ty);\n             }\n "}, {"sha": "4d34ca3d66b5fd20b86a7b9fbbec7b0e51f60bdd", "filename": "compiler/rustc_middle/src/ty/relate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a108d55ce634b6f71462c82966b791f18136360e/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a108d55ce634b6f71462c82966b791f18136360e/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs?ref=a108d55ce634b6f71462c82966b791f18136360e", "patch": "@@ -428,7 +428,7 @@ pub fn super_relate_tys<'tcx, R: TypeRelation<'tcx>>(\n             Ok(a)\n         }\n \n-        (&ty::Param(ref a_p), &ty::Param(ref b_p)) if a_p.index == b_p.index => Ok(a),\n+        (ty::Param(a_p), ty::Param(b_p)) if a_p.index == b_p.index => Ok(a),\n \n         (ty::Placeholder(p1), ty::Placeholder(p2)) if p1 == p2 => Ok(a),\n "}, {"sha": "6c10704c5db51a64d7b73c93a2fcb1e2ca731b52", "filename": "compiler/rustc_mir_build/src/build/matches/test.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a108d55ce634b6f71462c82966b791f18136360e/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a108d55ce634b6f71462c82966b791f18136360e/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs?ref=a108d55ce634b6f71462c82966b791f18136360e", "patch": "@@ -551,16 +551,15 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             //\n             // FIXME(#29623) we could use PatKind::Range to rule\n             // things out here, in some cases.\n-            (\n-                &TestKind::SwitchInt { switch_ty: _, ref options },\n-                &PatKind::Constant { ref value },\n-            ) if is_switch_ty(match_pair.pattern.ty) => {\n+            (TestKind::SwitchInt { switch_ty: _, options }, PatKind::Constant { value })\n+                if is_switch_ty(match_pair.pattern.ty) =>\n+            {\n                 let index = options.get_index_of(value).unwrap();\n                 self.candidate_without_match_pair(match_pair_index, candidate);\n                 Some(index)\n             }\n \n-            (&TestKind::SwitchInt { switch_ty: _, ref options }, &PatKind::Range(ref range)) => {\n+            (TestKind::SwitchInt { switch_ty: _, options }, PatKind::Range(range)) => {\n                 let not_contained =\n                     self.values_not_contained_in_range(&*range, options).unwrap_or(false);\n \n@@ -578,7 +577,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n \n             (\n                 &TestKind::Len { len: test_len, op: BinOp::Eq },\n-                &PatKind::Slice { ref prefix, ref slice, ref suffix },\n+                PatKind::Slice { prefix, slice, suffix },\n             ) => {\n                 let pat_len = (prefix.len() + suffix.len()) as u64;\n                 match (test_len.cmp(&pat_len), slice) {\n@@ -615,7 +614,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n \n             (\n                 &TestKind::Len { len: test_len, op: BinOp::Ge },\n-                &PatKind::Slice { ref prefix, ref slice, ref suffix },\n+                PatKind::Slice { prefix, slice, suffix },\n             ) => {\n                 // the test is `$actual_len >= test_len`\n                 let pat_len = (prefix.len() + suffix.len()) as u64;\n@@ -651,7 +650,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 }\n             }\n \n-            (&TestKind::Range(ref test), &PatKind::Range(ref pat)) => {\n+            (TestKind::Range(test), PatKind::Range(pat)) => {\n                 use std::cmp::Ordering::*;\n \n                 if test == pat {\n@@ -678,7 +677,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 no_overlap\n             }\n \n-            (&TestKind::Range(ref range), &PatKind::Constant { value }) => {\n+            (TestKind::Range(range), &PatKind::Constant { value }) => {\n                 if let Some(false) = self.const_range_contains(&*range, value) {\n                     // `value` is not contained in the testing range,\n                     // so `value` can be matched only if this test fails."}, {"sha": "272386f313e8d0736aecdd274652c4374e1fca6e", "filename": "compiler/rustc_passes/src/hir_stats.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a108d55ce634b6f71462c82966b791f18136360e/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a108d55ce634b6f71462c82966b791f18136360e/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs?ref=a108d55ce634b6f71462c82966b791f18136360e", "patch": "@@ -121,7 +121,7 @@ impl<'k> StatCollector<'k> {\n \n     fn print(&self, title: &str, prefix: &str) {\n         let mut nodes: Vec<_> = self.nodes.iter().collect();\n-        nodes.sort_by_key(|&(_, ref node)| node.stats.count * node.stats.size);\n+        nodes.sort_by_key(|(_, node)| node.stats.count * node.stats.size);\n \n         let total_size = nodes.iter().map(|(_, node)| node.stats.count * node.stats.size).sum();\n \n@@ -147,7 +147,7 @@ impl<'k> StatCollector<'k> {\n             );\n             if !node.subnodes.is_empty() {\n                 let mut subnodes: Vec<_> = node.subnodes.iter().collect();\n-                subnodes.sort_by_key(|&(_, ref subnode)| subnode.count * subnode.size);\n+                subnodes.sort_by_key(|(_, subnode)| subnode.count * subnode.size);\n \n                 for (label, subnode) in subnodes {\n                     let size = subnode.count * subnode.size;"}, {"sha": "cf63599626866203f41feeaca0bf156bd9d0ce75", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a108d55ce634b6f71462c82966b791f18136360e/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a108d55ce634b6f71462c82966b791f18136360e/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=a108d55ce634b6f71462c82966b791f18136360e", "patch": "@@ -576,7 +576,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                 // Ensure there is at most one `self` in the list\n                 let self_spans = items\n                     .iter()\n-                    .filter_map(|&(ref use_tree, _)| {\n+                    .filter_map(|(use_tree, _)| {\n                         if let ast::UseTreeKind::Simple(..) = use_tree.kind {\n                             if use_tree.ident().name == kw::SelfLower {\n                                 return Some(use_tree.span);"}, {"sha": "01a9b1000882bd5c77a20b64a697a57ea409d260", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a108d55ce634b6f71462c82966b791f18136360e/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a108d55ce634b6f71462c82966b791f18136360e/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=a108d55ce634b6f71462c82966b791f18136360e", "patch": "@@ -1323,7 +1323,7 @@ pub fn build_session(\n     let warnings_allow = sopts\n         .lint_opts\n         .iter()\n-        .rfind(|&&(ref key, _)| *key == \"warnings\")\n+        .rfind(|&(key, _)| *key == \"warnings\")\n         .map_or(false, |&(_, level)| level == lint::Allow);\n     let cap_lints_allow = sopts.lint_cap.map_or(false, |cap| cap == lint::Allow);\n     let can_emit_warnings = !(warnings_allow || cap_lints_allow);"}, {"sha": "d0c842a0b890bc634bb418ca4c8f44fa87650013", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a108d55ce634b6f71462c82966b791f18136360e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a108d55ce634b6f71462c82966b791f18136360e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=a108d55ce634b6f71462c82966b791f18136360e", "patch": "@@ -226,7 +226,7 @@ impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n             let arg_length = arguments.len();\n             let distinct = matches!(other, &[ArgKind::Tuple(..)]);\n             match (arg_length, arguments.get(0)) {\n-                (1, Some(&ArgKind::Tuple(_, ref fields))) => {\n+                (1, Some(ArgKind::Tuple(_, fields))) => {\n                     format!(\"a single {}-tuple as argument\", fields.len())\n                 }\n                 _ => format!("}]}