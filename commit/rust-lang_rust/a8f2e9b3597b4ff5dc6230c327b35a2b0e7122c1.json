{"sha": "a8f2e9b3597b4ff5dc6230c327b35a2b0e7122c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4ZjJlOWIzNTk3YjRmZjVkYzYyMzBjMzI3YjM1YTJiMGU3MTIyYzE=", "commit": {"author": {"name": "Ulrik Sverdrup", "email": "bluss@users.noreply.github.com", "date": "2016-04-21T19:35:39Z"}, "committer": {"name": "Ulrik Sverdrup", "email": "bluss@users.noreply.github.com", "date": "2016-06-14T13:51:49Z"}, "message": "specialize zip: Specialize .zip() for TrustedRandomAccess iterators\n\nThis allows common iterator compositions like a.zip(b) where a, b\nare slice::{Iter, IterMut} compile to *much* better code.", "tree": {"sha": "7feff33deeffe7de7869cbb613beafe4602d1834", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7feff33deeffe7de7869cbb613beafe4602d1834"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8f2e9b3597b4ff5dc6230c327b35a2b0e7122c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8f2e9b3597b4ff5dc6230c327b35a2b0e7122c1", "html_url": "https://github.com/rust-lang/rust/commit/a8f2e9b3597b4ff5dc6230c327b35a2b0e7122c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8f2e9b3597b4ff5dc6230c327b35a2b0e7122c1/comments", "author": {"login": "bluss", "id": 3209739, "node_id": "MDQ6VXNlcjMyMDk3Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/3209739?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bluss", "html_url": "https://github.com/bluss", "followers_url": "https://api.github.com/users/bluss/followers", "following_url": "https://api.github.com/users/bluss/following{/other_user}", "gists_url": "https://api.github.com/users/bluss/gists{/gist_id}", "starred_url": "https://api.github.com/users/bluss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bluss/subscriptions", "organizations_url": "https://api.github.com/users/bluss/orgs", "repos_url": "https://api.github.com/users/bluss/repos", "events_url": "https://api.github.com/users/bluss/events{/privacy}", "received_events_url": "https://api.github.com/users/bluss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bluss", "id": 3209739, "node_id": "MDQ6VXNlcjMyMDk3Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/3209739?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bluss", "html_url": "https://github.com/bluss", "followers_url": "https://api.github.com/users/bluss/followers", "following_url": "https://api.github.com/users/bluss/following{/other_user}", "gists_url": "https://api.github.com/users/bluss/gists{/gist_id}", "starred_url": "https://api.github.com/users/bluss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bluss/subscriptions", "organizations_url": "https://api.github.com/users/bluss/orgs", "repos_url": "https://api.github.com/users/bluss/repos", "events_url": "https://api.github.com/users/bluss/events{/privacy}", "received_events_url": "https://api.github.com/users/bluss/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "592eaa5bb39eef95a06ba9ec75c708592287da07", "url": "https://api.github.com/repos/rust-lang/rust/commits/592eaa5bb39eef95a06ba9ec75c708592287da07", "html_url": "https://github.com/rust-lang/rust/commit/592eaa5bb39eef95a06ba9ec75c708592287da07"}], "stats": {"total": 142, "additions": 121, "deletions": 21}, "files": [{"sha": "8fb71295a88a6901adebe767a99c1a9c81b268c5", "filename": "src/libcore/iter/iterator.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a8f2e9b3597b4ff5dc6230c327b35a2b0e7122c1/src%2Flibcore%2Fiter%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8f2e9b3597b4ff5dc6230c327b35a2b0e7122c1/src%2Flibcore%2Fiter%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fiterator.rs?ref=a8f2e9b3597b4ff5dc6230c327b35a2b0e7122c1", "patch": "@@ -23,6 +23,7 @@ use super::{Chain, Cycle, Cloned, Enumerate, Filter, FilterMap, FlatMap, Fuse,\n use super::ChainState;\n use super::{DoubleEndedIterator, ExactSizeIterator, Extend, FromIterator,\n             IntoIterator};\n+use super::ZipImpl;\n \n fn _assert_is_object_safe(_: &Iterator<Item=()>) {}\n \n@@ -383,7 +384,7 @@ pub trait Iterator {\n     fn zip<U>(self, other: U) -> Zip<Self, U::IntoIter> where\n         Self: Sized, U: IntoIterator\n     {\n-        Zip{a: self, b: other.into_iter()}\n+        Zip::new(self, other.into_iter())\n     }\n \n     /// Takes a closure and creates an iterator which calls that closure on each"}, {"sha": "c07a15ebc06d66a72b9e9178eb84e8529dc32a8e", "filename": "src/libcore/iter/mod.rs", "status": "modified", "additions": 119, "deletions": 20, "changes": 139, "blob_url": "https://github.com/rust-lang/rust/blob/a8f2e9b3597b4ff5dc6230c327b35a2b0e7122c1/src%2Flibcore%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8f2e9b3597b4ff5dc6230c327b35a2b0e7122c1/src%2Flibcore%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fmod.rs?ref=a8f2e9b3597b4ff5dc6230c327b35a2b0e7122c1", "patch": "@@ -302,6 +302,7 @@\n use clone::Clone;\n use cmp;\n use fmt;\n+use iter_private::TrustedRandomAccess;\n use ops::FnMut;\n use option::Option::{self, Some, None};\n use usize;\n@@ -622,7 +623,9 @@ impl<A, B> DoubleEndedIterator for Chain<A, B> where\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Zip<A, B> {\n     a: A,\n-    b: B\n+    b: B,\n+    index: usize,\n+    len: usize,\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -631,29 +634,13 @@ impl<A, B> Iterator for Zip<A, B> where A: Iterator, B: Iterator\n     type Item = (A::Item, B::Item);\n \n     #[inline]\n-    fn next(&mut self) -> Option<(A::Item, B::Item)> {\n-        self.a.next().and_then(|x| {\n-            self.b.next().and_then(|y| {\n-                Some((x, y))\n-            })\n-        })\n+    fn next(&mut self) -> Option<Self::Item> {\n+        ZipImpl::next(self)\n     }\n \n     #[inline]\n     fn size_hint(&self) -> (usize, Option<usize>) {\n-        let (a_lower, a_upper) = self.a.size_hint();\n-        let (b_lower, b_upper) = self.b.size_hint();\n-\n-        let lower = cmp::min(a_lower, b_lower);\n-\n-        let upper = match (a_upper, b_upper) {\n-            (Some(x), Some(y)) => Some(cmp::min(x,y)),\n-            (Some(x), None) => Some(x),\n-            (None, Some(y)) => Some(y),\n-            (None, None) => None\n-        };\n-\n-        (lower, upper)\n+        ZipImpl::size_hint(self)\n     }\n }\n \n@@ -664,6 +651,51 @@ impl<A, B> DoubleEndedIterator for Zip<A, B> where\n {\n     #[inline]\n     fn next_back(&mut self) -> Option<(A::Item, B::Item)> {\n+        ZipImpl::next_back(self)\n+    }\n+}\n+\n+// Zip specialization trait\n+#[doc(hidden)]\n+trait ZipImpl<A, B> {\n+    type Item;\n+    fn new(a: A, b: B) -> Self;\n+    fn next(&mut self) -> Option<Self::Item>;\n+    fn size_hint(&self) -> (usize, Option<usize>);\n+    fn next_back(&mut self) -> Option<Self::Item>\n+        where A: DoubleEndedIterator + ExactSizeIterator,\n+              B: DoubleEndedIterator + ExactSizeIterator;\n+}\n+\n+// General Zip impl\n+#[doc(hidden)]\n+impl<A, B> ZipImpl<A, B> for Zip<A, B>\n+    where A: Iterator, B: Iterator\n+{\n+    type Item = (A::Item, B::Item);\n+    default fn new(a: A, b: B) -> Self {\n+        Zip {\n+            a: a,\n+            b: b,\n+            index: 0, // not used in general case\n+            len: 0,\n+        }\n+    }\n+\n+    #[inline]\n+    default fn next(&mut self) -> Option<(A::Item, B::Item)> {\n+        self.a.next().and_then(|x| {\n+            self.b.next().and_then(|y| {\n+                Some((x, y))\n+            })\n+        })\n+    }\n+\n+    #[inline]\n+    default fn next_back(&mut self) -> Option<(A::Item, B::Item)>\n+        where A: DoubleEndedIterator + ExactSizeIterator,\n+              B: DoubleEndedIterator + ExactSizeIterator\n+    {\n         let a_sz = self.a.len();\n         let b_sz = self.b.len();\n         if a_sz != b_sz {\n@@ -680,6 +712,73 @@ impl<A, B> DoubleEndedIterator for Zip<A, B> where\n             _ => unreachable!(),\n         }\n     }\n+\n+    #[inline]\n+    default fn size_hint(&self) -> (usize, Option<usize>) {\n+        let (a_lower, a_upper) = self.a.size_hint();\n+        let (b_lower, b_upper) = self.b.size_hint();\n+\n+        let lower = cmp::min(a_lower, b_lower);\n+\n+        let upper = match (a_upper, b_upper) {\n+            (Some(x), Some(y)) => Some(cmp::min(x,y)),\n+            (Some(x), None) => Some(x),\n+            (None, Some(y)) => Some(y),\n+            (None, None) => None\n+        };\n+\n+        (lower, upper)\n+    }\n+}\n+\n+#[doc(hidden)]\n+impl<A, B> ZipImpl<A, B> for Zip<A, B>\n+    where A: TrustedRandomAccess, B: TrustedRandomAccess\n+{\n+    fn new(a: A, b: B) -> Self {\n+        let len = cmp::min(a.len(), b.len());\n+        Zip {\n+            a: a,\n+            b: b,\n+            index: 0,\n+            len: len,\n+        }\n+    }\n+\n+    #[inline]\n+    fn next(&mut self) -> Option<(A::Item, B::Item)> {\n+        if self.index < self.len {\n+            let i = self.index;\n+            self.index += 1;\n+            unsafe {\n+                Some((self.a.get_unchecked(i), self.b.get_unchecked(i)))\n+            }\n+        } else {\n+            None\n+        }\n+    }\n+\n+    #[inline]\n+    fn size_hint(&self) -> (usize, Option<usize>) {\n+        let len = self.len - self.index;\n+        (len, Some(len))\n+    }\n+\n+    #[inline]\n+    fn next_back(&mut self) -> Option<(A::Item, B::Item)>\n+        where A: DoubleEndedIterator + ExactSizeIterator,\n+              B: DoubleEndedIterator + ExactSizeIterator\n+    {\n+        if self.index < self.len {\n+            self.len -= 1;\n+            let i = self.len;\n+            unsafe {\n+                Some((self.a.get_unchecked(i), self.b.get_unchecked(i)))\n+            }\n+        } else {\n+            None\n+        }\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}]}