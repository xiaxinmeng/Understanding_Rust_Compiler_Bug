{"sha": "57a8804ef991b04aed5414fbf668f444c9050c73", "node_id": "C_kwDOAAsO6NoAKDU3YTg4MDRlZjk5MWIwNGFlZDU0MTRmYmY2NjhmNDQ0YzkwNTBjNzM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-22T20:29:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-22T20:29:53Z"}, "message": "Auto merge of #8007 - birkenfeld:octal_escapes, r=xFrednet\n\nAdd new lint `octal_escapes`\n\nThis checks for sequences in strings that would be octal character\nescapes in C, but are not supported in Rust.  It suggests either\nto use the `\\x00` escape, or an equivalent hex escape if the octal\nwas intended.\n\nFixes #7981\n\n---\n\n*Please write a short comment explaining your change (or \"none\" for internal only changes)*\n\nchangelog: Add new lint [`octal_escapes`], which checks for literals like `\"\\033[0m\"`.", "tree": {"sha": "1b667aab85b397d1ab43160044332d8e5d241f0f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b667aab85b397d1ab43160044332d8e5d241f0f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/57a8804ef991b04aed5414fbf668f444c9050c73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/57a8804ef991b04aed5414fbf668f444c9050c73", "html_url": "https://github.com/rust-lang/rust/commit/57a8804ef991b04aed5414fbf668f444c9050c73", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/57a8804ef991b04aed5414fbf668f444c9050c73/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "40275945334b71eabd87e8d651fa1cd53e274aed", "url": "https://api.github.com/repos/rust-lang/rust/commits/40275945334b71eabd87e8d651fa1cd53e274aed", "html_url": "https://github.com/rust-lang/rust/commit/40275945334b71eabd87e8d651fa1cd53e274aed"}, {"sha": "1210bb40d35829672744c1d58f3614723a7e1bad", "url": "https://api.github.com/repos/rust-lang/rust/commits/1210bb40d35829672744c1d58f3614723a7e1bad", "html_url": "https://github.com/rust-lang/rust/commit/1210bb40d35829672744c1d58f3614723a7e1bad"}], "stats": {"total": 307, "additions": 307, "deletions": 0}, "files": [{"sha": "401557b3eacd73fe36e46c5346bfb8f9dd066ba5", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/57a8804ef991b04aed5414fbf668f444c9050c73/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/57a8804ef991b04aed5414fbf668f444c9050c73/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=57a8804ef991b04aed5414fbf668f444c9050c73", "patch": "@@ -3056,6 +3056,7 @@ Released 2018-09-13\n [`nonsensical_open_options`]: https://rust-lang.github.io/rust-clippy/master/index.html#nonsensical_open_options\n [`nonstandard_macro_braces`]: https://rust-lang.github.io/rust-clippy/master/index.html#nonstandard_macro_braces\n [`not_unsafe_ptr_arg_deref`]: https://rust-lang.github.io/rust-clippy/master/index.html#not_unsafe_ptr_arg_deref\n+[`octal_escapes`]: https://rust-lang.github.io/rust-clippy/master/index.html#octal_escapes\n [`ok_expect`]: https://rust-lang.github.io/rust-clippy/master/index.html#ok_expect\n [`op_ref`]: https://rust-lang.github.io/rust-clippy/master/index.html#op_ref\n [`option_as_ref_deref`]: https://rust-lang.github.io/rust-clippy/master/index.html#option_as_ref_deref"}, {"sha": "612240135ac637ecb9b6c937d3f747ac508345ad", "filename": "clippy_lints/src/lib.register_all.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/57a8804ef991b04aed5414fbf668f444c9050c73/clippy_lints%2Fsrc%2Flib.register_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57a8804ef991b04aed5414fbf668f444c9050c73/clippy_lints%2Fsrc%2Flib.register_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_all.rs?ref=57a8804ef991b04aed5414fbf668f444c9050c73", "patch": "@@ -219,6 +219,7 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(non_expressive_names::JUST_UNDERSCORES_AND_DIGITS),\n     LintId::of(non_octal_unix_permissions::NON_OCTAL_UNIX_PERMISSIONS),\n     LintId::of(non_send_fields_in_send_ty::NON_SEND_FIELDS_IN_SEND_TY),\n+    LintId::of(octal_escapes::OCTAL_ESCAPES),\n     LintId::of(open_options::NONSENSICAL_OPEN_OPTIONS),\n     LintId::of(option_env_unwrap::OPTION_ENV_UNWRAP),\n     LintId::of(overflow_check_conditional::OVERFLOW_CHECK_CONDITIONAL),"}, {"sha": "19c35a5e5f401b713cb6cfbfb1e7ea9927be3aba", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/57a8804ef991b04aed5414fbf668f444c9050c73/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57a8804ef991b04aed5414fbf668f444c9050c73/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=57a8804ef991b04aed5414fbf668f444c9050c73", "patch": "@@ -380,6 +380,7 @@ store.register_lints(&[\n     non_octal_unix_permissions::NON_OCTAL_UNIX_PERMISSIONS,\n     non_send_fields_in_send_ty::NON_SEND_FIELDS_IN_SEND_TY,\n     nonstandard_macro_braces::NONSTANDARD_MACRO_BRACES,\n+    octal_escapes::OCTAL_ESCAPES,\n     open_options::NONSENSICAL_OPEN_OPTIONS,\n     option_env_unwrap::OPTION_ENV_UNWRAP,\n     option_if_let_else::OPTION_IF_LET_ELSE,"}, {"sha": "414bfc42fdfcdabe6fecf7e701c1474b61ccf774", "filename": "clippy_lints/src/lib.register_suspicious.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/57a8804ef991b04aed5414fbf668f444c9050c73/clippy_lints%2Fsrc%2Flib.register_suspicious.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57a8804ef991b04aed5414fbf668f444c9050c73/clippy_lints%2Fsrc%2Flib.register_suspicious.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_suspicious.rs?ref=57a8804ef991b04aed5414fbf668f444c9050c73", "patch": "@@ -16,6 +16,7 @@ store.register_group(true, \"clippy::suspicious\", Some(\"clippy_suspicious\"), vec!\n     LintId::of(methods::SUSPICIOUS_MAP),\n     LintId::of(mut_key::MUTABLE_KEY_TYPE),\n     LintId::of(non_send_fields_in_send_ty::NON_SEND_FIELDS_IN_SEND_TY),\n+    LintId::of(octal_escapes::OCTAL_ESCAPES),\n     LintId::of(suspicious_trait_impl::SUSPICIOUS_ARITHMETIC_IMPL),\n     LintId::of(suspicious_trait_impl::SUSPICIOUS_OP_ASSIGN_IMPL),\n ])"}, {"sha": "3dafdf8f0d5e2f29beb2f536dc46cca2c56aa6ef", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57a8804ef991b04aed5414fbf668f444c9050c73/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57a8804ef991b04aed5414fbf668f444c9050c73/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=57a8804ef991b04aed5414fbf668f444c9050c73", "patch": "@@ -312,6 +312,7 @@ mod non_expressive_names;\n mod non_octal_unix_permissions;\n mod non_send_fields_in_send_ty;\n mod nonstandard_macro_braces;\n+mod octal_escapes;\n mod open_options;\n mod option_env_unwrap;\n mod option_if_let_else;\n@@ -849,6 +850,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| Box::new(match_str_case_mismatch::MatchStrCaseMismatch));\n     store.register_late_pass(move || Box::new(format_args::FormatArgs));\n     store.register_late_pass(|| Box::new(trailing_empty_array::TrailingEmptyArray));\n+    store.register_early_pass(|| Box::new(octal_escapes::OctalEscapes));\n     // add lints here, do not remove this comment, it's used in `new_lint`\n }\n "}, {"sha": "9c971437645455c1331dc96ba6c1fdcb92bbaf04", "filename": "clippy_lints/src/octal_escapes.rs", "status": "added", "additions": 150, "deletions": 0, "changes": 150, "blob_url": "https://github.com/rust-lang/rust/blob/57a8804ef991b04aed5414fbf668f444c9050c73/clippy_lints%2Fsrc%2Foctal_escapes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57a8804ef991b04aed5414fbf668f444c9050c73/clippy_lints%2Fsrc%2Foctal_escapes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foctal_escapes.rs?ref=57a8804ef991b04aed5414fbf668f444c9050c73", "patch": "@@ -0,0 +1,150 @@\n+use clippy_utils::diagnostics::span_lint_and_then;\n+use rustc_ast::ast::{Expr, ExprKind};\n+use rustc_ast::token::{Lit, LitKind};\n+use rustc_errors::Applicability;\n+use rustc_lint::{EarlyContext, EarlyLintPass};\n+use rustc_middle::lint::in_external_macro;\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::Span;\n+use std::fmt::Write;\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for `\\0` escapes in string and byte literals that look like octal\n+    /// character escapes in C.\n+    ///\n+    /// ### Why is this bad?\n+    ///\n+    /// C and other languages support octal character escapes in strings, where\n+    /// a backslash is followed by up to three octal digits. For example, `\\033`\n+    /// stands for the ASCII character 27 (ESC). Rust does not support this\n+    /// notation, but has the escape code `\\0` which stands for a null\n+    /// byte/character, and any following digits do not form part of the escape\n+    /// sequence. Therefore, `\\033` is not a compiler error but the result may\n+    /// be surprising.\n+    ///\n+    /// ### Known problems\n+    /// The actual meaning can be the intended one. `\\x00` can be used in these\n+    /// cases to be unambigious.\n+    ///\n+    /// The lint does not trigger for format strings in `print!()`, `write!()`\n+    /// and friends since the string is already preprocessed when Clippy lints\n+    /// can see it.\n+    ///\n+    /// # Example\n+    /// ```rust\n+    /// // Bad\n+    /// let one = \"\\033[1m Bold? \\033[0m\";  // \\033 intended as escape\n+    /// let two = \"\\033\\0\";                 // \\033 intended as null-3-3\n+    ///\n+    /// // Good\n+    /// let one = \"\\x1b[1mWill this be bold?\\x1b[0m\";\n+    /// let two = \"\\x0033\\x00\";\n+    /// ```\n+    #[clippy::version = \"1.58.0\"]\n+    pub OCTAL_ESCAPES,\n+    suspicious,\n+    \"string escape sequences looking like octal characters\"\n+}\n+\n+declare_lint_pass!(OctalEscapes => [OCTAL_ESCAPES]);\n+\n+impl EarlyLintPass for OctalEscapes {\n+    fn check_expr(&mut self, cx: &EarlyContext<'tcx>, expr: &Expr) {\n+        if in_external_macro(cx.sess, expr.span) {\n+            return;\n+        }\n+\n+        if let ExprKind::Lit(lit) = &expr.kind {\n+            if matches!(lit.token.kind, LitKind::Str) {\n+                check_lit(cx, &lit.token, lit.span, true);\n+            } else if matches!(lit.token.kind, LitKind::ByteStr) {\n+                check_lit(cx, &lit.token, lit.span, false);\n+            }\n+        }\n+    }\n+}\n+\n+fn check_lit(cx: &EarlyContext<'tcx>, lit: &Lit, span: Span, is_string: bool) {\n+    let contents = lit.symbol.as_str();\n+    let mut iter = contents.char_indices().peekable();\n+    let mut found = vec![];\n+\n+    // go through the string, looking for \\0[0-7][0-7]?\n+    while let Some((from, ch)) = iter.next() {\n+        if ch == '\\\\' {\n+            if let Some((_, '0')) = iter.next() {\n+                // collect up to two further octal digits\n+                if let Some((mut to, '0'..='7')) = iter.next() {\n+                    if let Some((_, '0'..='7')) = iter.peek() {\n+                        to += 1;\n+                    }\n+                    found.push((from, to + 1));\n+                }\n+            }\n+        }\n+    }\n+\n+    if found.is_empty() {\n+        return;\n+    }\n+\n+    // construct two suggestion strings, one with \\x escapes with octal meaning\n+    // as in C, and one with \\x00 for null bytes.\n+    let mut suggest_1 = if is_string { \"\\\"\" } else { \"b\\\"\" }.to_string();\n+    let mut suggest_2 = suggest_1.clone();\n+    let mut index = 0;\n+    for (from, to) in found {\n+        suggest_1.push_str(&contents[index..from]);\n+        suggest_2.push_str(&contents[index..from]);\n+\n+        // construct a replacement escape\n+        // the maximum value is \\077, or \\x3f, so u8 is sufficient here\n+        if let Ok(n) = u8::from_str_radix(&contents[from + 1..to], 8) {\n+            write!(&mut suggest_1, \"\\\\x{:02x}\", n).unwrap();\n+        }\n+\n+        // append the null byte as \\x00 and the following digits literally\n+        suggest_2.push_str(\"\\\\x00\");\n+        suggest_2.push_str(&contents[from + 2..to]);\n+\n+        index = to;\n+    }\n+    suggest_1.push_str(&contents[index..]);\n+    suggest_1.push('\"');\n+    suggest_2.push_str(&contents[index..]);\n+    suggest_2.push('\"');\n+\n+    span_lint_and_then(\n+        cx,\n+        OCTAL_ESCAPES,\n+        span,\n+        &format!(\n+            \"octal-looking escape in {} literal\",\n+            if is_string { \"string\" } else { \"byte string\" }\n+        ),\n+        |diag| {\n+            diag.help(&format!(\n+                \"octal escapes are not supported, `\\\\0` is always a null {}\",\n+                if is_string { \"character\" } else { \"byte\" }\n+            ));\n+            // suggestion 1: equivalent hex escape\n+            diag.span_suggestion(\n+                span,\n+                \"if an octal escape was intended, use the hexadecimal representation instead\",\n+                suggest_1,\n+                Applicability::MaybeIncorrect,\n+            );\n+            // suggestion 2: unambiguous null byte\n+            diag.span_suggestion(\n+                span,\n+                &format!(\n+                    \"if the null {} is intended, disambiguate using\",\n+                    if is_string { \"character\" } else { \"byte\" }\n+                ),\n+                suggest_2,\n+                Applicability::MaybeIncorrect,\n+            );\n+        },\n+    );\n+}"}, {"sha": "53145ef0fd2029dd5252f3749caf4638b3243355", "filename": "tests/ui/octal_escapes.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/57a8804ef991b04aed5414fbf668f444c9050c73/tests%2Fui%2Foctal_escapes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57a8804ef991b04aed5414fbf668f444c9050c73/tests%2Fui%2Foctal_escapes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foctal_escapes.rs?ref=57a8804ef991b04aed5414fbf668f444c9050c73", "patch": "@@ -0,0 +1,20 @@\n+#![warn(clippy::octal_escapes)]\n+\n+fn main() {\n+    let _bad1 = \"\\033[0m\";\n+    let _bad2 = b\"\\033[0m\";\n+    let _bad3 = \"\\\\\\033[0m\";\n+    // maximum 3 digits (\\012 is the escape)\n+    let _bad4 = \"\\01234567\";\n+    let _bad5 = \"\\0\\03\";\n+    let _bad6 = \"Text-\\055\\077-MoreText\";\n+    let _bad7 = \"EvenMoreText-\\01\\02-ShortEscapes\";\n+    let _bad8 = \"\u9508\\01\u9508\";\n+    let _bad9 = \"\u9508\\011\u9508\";\n+\n+    let _good1 = \"\\\\033[0m\";\n+    let _good2 = \"\\0\\\\0\";\n+    let _good3 = \"\\0\\0\";\n+    let _good4 = \"X\\0\\0X\";\n+    let _good5 = \"\u9508\\0\u9508\";\n+}"}, {"sha": "54f5bbb0fc43abe0c32c79f1f240a72db21e6ed5", "filename": "tests/ui/octal_escapes.stderr", "status": "added", "additions": 131, "deletions": 0, "changes": 131, "blob_url": "https://github.com/rust-lang/rust/blob/57a8804ef991b04aed5414fbf668f444c9050c73/tests%2Fui%2Foctal_escapes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57a8804ef991b04aed5414fbf668f444c9050c73/tests%2Fui%2Foctal_escapes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foctal_escapes.stderr?ref=57a8804ef991b04aed5414fbf668f444c9050c73", "patch": "@@ -0,0 +1,131 @@\n+error: octal-looking escape in string literal\n+  --> $DIR/octal_escapes.rs:4:17\n+   |\n+LL |     let _bad1 = \"/033[0m\";\n+   |                 ^^^^^^^^^\n+   |\n+   = note: `-D clippy::octal-escapes` implied by `-D warnings`\n+   = help: octal escapes are not supported, `/0` is always a null character\n+help: if an octal escape was intended, use the hexadecimal representation instead\n+   |\n+LL |     let _bad1 = \"/x1b[0m\";\n+   |                 ~~~~~~~~~\n+help: if the null character is intended, disambiguate using\n+   |\n+LL |     let _bad1 = \"/x0033[0m\";\n+   |                 ~~~~~~~~~~~\n+\n+error: octal-looking escape in byte string literal\n+  --> $DIR/octal_escapes.rs:5:17\n+   |\n+LL |     let _bad2 = b\"/033[0m\";\n+   |                 ^^^^^^^^^^\n+   |\n+   = help: octal escapes are not supported, `/0` is always a null byte\n+help: if an octal escape was intended, use the hexadecimal representation instead\n+   |\n+LL |     let _bad2 = b\"/x1b[0m\";\n+   |                 ~~~~~~~~~~\n+help: if the null byte is intended, disambiguate using\n+   |\n+LL |     let _bad2 = b\"/x0033[0m\";\n+   |                 ~~~~~~~~~~~~\n+\n+error: octal-looking escape in string literal\n+  --> $DIR/octal_escapes.rs:6:17\n+   |\n+LL |     let _bad3 = \"//033[0m\";\n+   |                 ^^^^^^^^^^^\n+   |\n+   = help: octal escapes are not supported, `/0` is always a null character\n+help: if an octal escape was intended, use the hexadecimal representation instead\n+   |\n+LL |     let _bad3 = \"//x1b[0m\";\n+   |                 ~~~~~~~~~~~\n+help: if the null character is intended, disambiguate using\n+   |\n+LL |     let _bad3 = \"//x0033[0m\";\n+   |                 ~~~~~~~~~~~~~\n+\n+error: octal-looking escape in string literal\n+  --> $DIR/octal_escapes.rs:8:17\n+   |\n+LL |     let _bad4 = \"/01234567\";\n+   |                 ^^^^^^^^^^^\n+   |\n+   = help: octal escapes are not supported, `/0` is always a null character\n+help: if an octal escape was intended, use the hexadecimal representation instead\n+   |\n+LL |     let _bad4 = \"/x0a34567\";\n+   |                 ~~~~~~~~~~~\n+help: if the null character is intended, disambiguate using\n+   |\n+LL |     let _bad4 = \"/x001234567\";\n+   |                 ~~~~~~~~~~~~~\n+\n+error: octal-looking escape in string literal\n+  --> $DIR/octal_escapes.rs:10:17\n+   |\n+LL |     let _bad6 = \"Text-/055/077-MoreText\";\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: octal escapes are not supported, `/0` is always a null character\n+help: if an octal escape was intended, use the hexadecimal representation instead\n+   |\n+LL |     let _bad6 = \"Text-/x2d/x3f-MoreText\";\n+   |                 ~~~~~~~~~~~~~~~~~~~~~~~~\n+help: if the null character is intended, disambiguate using\n+   |\n+LL |     let _bad6 = \"Text-/x0055/x0077-MoreText\";\n+   |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+error: octal-looking escape in string literal\n+  --> $DIR/octal_escapes.rs:11:17\n+   |\n+LL |     let _bad7 = \"EvenMoreText-/01/02-ShortEscapes\";\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: octal escapes are not supported, `/0` is always a null character\n+help: if an octal escape was intended, use the hexadecimal representation instead\n+   |\n+LL |     let _bad7 = \"EvenMoreText-/x01/x02-ShortEscapes\";\n+   |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+help: if the null character is intended, disambiguate using\n+   |\n+LL |     let _bad7 = \"EvenMoreText-/x001/x002-ShortEscapes\";\n+   |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+error: octal-looking escape in string literal\n+  --> $DIR/octal_escapes.rs:12:17\n+   |\n+LL |     let _bad8 = \"\u9508/01\u9508\";\n+   |                 ^^^^^^^^^\n+   |\n+   = help: octal escapes are not supported, `/0` is always a null character\n+help: if an octal escape was intended, use the hexadecimal representation instead\n+   |\n+LL |     let _bad8 = \"\u9508/x01\u9508\";\n+   |                 ~~~~~~~~~~\n+help: if the null character is intended, disambiguate using\n+   |\n+LL |     let _bad8 = \"\u9508/x001\u9508\";\n+   |                 ~~~~~~~~~~~\n+\n+error: octal-looking escape in string literal\n+  --> $DIR/octal_escapes.rs:13:17\n+   |\n+LL |     let _bad9 = \"\u9508/011\u9508\";\n+   |                 ^^^^^^^^^^\n+   |\n+   = help: octal escapes are not supported, `/0` is always a null character\n+help: if an octal escape was intended, use the hexadecimal representation instead\n+   |\n+LL |     let _bad9 = \"\u9508/x09\u9508\";\n+   |                 ~~~~~~~~~~\n+help: if the null character is intended, disambiguate using\n+   |\n+LL |     let _bad9 = \"\u9508/x0011\u9508\";\n+   |                 ~~~~~~~~~~~~\n+\n+error: aborting due to 8 previous errors\n+"}]}