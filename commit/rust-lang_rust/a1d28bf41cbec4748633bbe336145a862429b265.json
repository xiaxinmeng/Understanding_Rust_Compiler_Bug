{"sha": "a1d28bf41cbec4748633bbe336145a862429b265", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExZDI4YmY0MWNiZWM0NzQ4NjMzYmJlMzM2MTQ1YTg2MjQyOWIyNjU=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2017-08-14T15:28:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-08-14T15:28:31Z"}, "message": "Merge pull request #1872 from sinkuu/remove_newline\n\nRemove blank lines at start or end of block", "tree": {"sha": "868140274c71a9cc32ec16ec38f8026ee130f318", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/868140274c71a9cc32ec16ec38f8026ee130f318"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1d28bf41cbec4748633bbe336145a862429b265", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1d28bf41cbec4748633bbe336145a862429b265", "html_url": "https://github.com/rust-lang/rust/commit/a1d28bf41cbec4748633bbe336145a862429b265", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1d28bf41cbec4748633bbe336145a862429b265/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16920fb5c50a0ea8aee97fb381a8d92c2c215e38", "url": "https://api.github.com/repos/rust-lang/rust/commits/16920fb5c50a0ea8aee97fb381a8d92c2c215e38", "html_url": "https://github.com/rust-lang/rust/commit/16920fb5c50a0ea8aee97fb381a8d92c2c215e38"}, {"sha": "f9ee060eae6324a15f90e772b3db4d71f4141a6f", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9ee060eae6324a15f90e772b3db4d71f4141a6f", "html_url": "https://github.com/rust-lang/rust/commit/f9ee060eae6324a15f90e772b3db4d71f4141a6f"}], "stats": {"total": 132, "additions": 105, "deletions": 27}, "files": [{"sha": "2c0ec3a84dcb9a43820895861c8a496e3410afab", "filename": "src/bin/cargo-fmt.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a1d28bf41cbec4748633bbe336145a862429b265/src%2Fbin%2Fcargo-fmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1d28bf41cbec4748633bbe336145a862429b265/src%2Fbin%2Fcargo-fmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fcargo-fmt.rs?ref=a1d28bf41cbec4748633bbe336145a862429b265", "patch": "@@ -271,7 +271,6 @@ fn get_targets(workspace_hitlist: WorkspaceHitlist) -> Result<Vec<Target>, std::\n         std::io::ErrorKind::NotFound,\n         str::from_utf8(&output.stderr).unwrap(),\n     ))\n-\n }\n \n fn target_from_json(jtarget: &Value) -> Target {"}, {"sha": "88bd3222fcb85fe90f43bed09386b9982cc95979", "filename": "src/bin/rustfmt.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a1d28bf41cbec4748633bbe336145a862429b265/src%2Fbin%2Frustfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1d28bf41cbec4748633bbe336145a862429b265/src%2Fbin%2Frustfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Frustfmt.rs?ref=a1d28bf41cbec4748633bbe336145a862429b265", "patch": "@@ -102,7 +102,6 @@ fn match_cli_path_or_file(\n     config_path: Option<PathBuf>,\n     input_file: &Path,\n ) -> FmtResult<(Config, Option<PathBuf>)> {\n-\n     if let Some(config_file) = config_path {\n         let toml = Config::from_toml_path(config_file.as_ref())?;\n         return Ok((toml, Some(config_file)));"}, {"sha": "11d64dc073fb04aeb3456a8780691bad126685f2", "filename": "src/config.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a1d28bf41cbec4748633bbe336145a862429b265/src%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1d28bf41cbec4748633bbe336145a862429b265/src%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig.rs?ref=a1d28bf41cbec4748633bbe336145a862429b265", "patch": "@@ -606,7 +606,9 @@ create_config! {\n                                               tuple patterns\";\n     combine_control_expr: bool, true, \"Combine control expressions with funciton calls.\";\n     struct_field_align_threshold: usize, 0, \"Align struct fields if their diffs fits within \\\n-                                             threshold.\"\n+                                             threshold.\";\n+    remove_blank_lines_at_start_or_end_of_block: bool, true,\n+        \"Remove blank lines at start or end of a block\";\n }\n \n #[cfg(test)]"}, {"sha": "b9da6d83813ccd7b2cbadbe55189175353f14c69", "filename": "src/expr.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a1d28bf41cbec4748633bbe336145a862429b265/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1d28bf41cbec4748633bbe336145a862429b265/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=a1d28bf41cbec4748633bbe336145a862429b265", "patch": "@@ -2937,7 +2937,6 @@ fn choose_rhs(\n }\n \n fn prefer_next_line(orig_rhs: &str, next_line_rhs: &str) -> bool {\n-\n     fn count_line_breaks(src: &str) -> usize {\n         src.chars().filter(|&x| x == '\\n').count()\n     }"}, {"sha": "72724da1c1189b031ecde43ed68c2b8e48e938cf", "filename": "src/filemap.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a1d28bf41cbec4748633bbe336145a862429b265/src%2Ffilemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1d28bf41cbec4748633bbe336145a862429b265/src%2Ffilemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffilemap.rs?ref=a1d28bf41cbec4748633bbe336145a862429b265", "patch": "@@ -90,7 +90,6 @@ pub fn write_file<T>(\n where\n     T: Write,\n {\n-\n     fn source_and_formatted_text(\n         text: &StringBuffer,\n         filename: &str,"}, {"sha": "61ef03b1687475c8bc647050f5f9f96e9426b466", "filename": "src/types.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1d28bf41cbec4748633bbe336145a862429b265/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1d28bf41cbec4748633bbe336145a862429b265/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=a1d28bf41cbec4748633bbe336145a862429b265", "patch": "@@ -404,7 +404,6 @@ where\n     } else {\n         Some(format!(\"{}{}\", args, output))\n     }\n-\n }\n \n fn type_bound_colon(context: &RewriteContext) -> &'static str {\n@@ -601,7 +600,6 @@ impl Rewrite for ast::TyParam {\n             result.push_str(&join_bounds(context, shape, &strs));\n         }\n         if let Some(ref def) = self.default {\n-\n             let eq_str = match context.config.type_punctuation_density() {\n                 TypeDensity::Compressed => \"=\",\n                 TypeDensity::Wide => \" = \","}, {"sha": "6faaf8805b3d3fc251207fde730b8914ae66b00d", "filename": "src/visitor.rs", "status": "modified", "additions": 69, "deletions": 4, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/a1d28bf41cbec4748633bbe336145a862429b265/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1d28bf41cbec4748633bbe336145a862429b265/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=a1d28bf41cbec4748633bbe336145a862429b265", "patch": "@@ -12,12 +12,13 @@ use std::cmp;\n \n use strings::string_buffer::StringBuffer;\n use syntax::{ast, ptr, visit};\n-use syntax::codemap::{self, BytePos, CodeMap, Span};\n+use syntax::attr::HasAttrs;\n+use syntax::codemap::{self, BytePos, CodeMap, Pos, Span};\n use syntax::parse::ParseSess;\n \n use {Indent, Shape, Spanned};\n use codemap::{LineRangeUtils, SpanUtils};\n-use comment::{contains_comment, FindUncommented};\n+use comment::{contains_comment, CodeCharKind, CommentCodeSlices, FindUncommented};\n use comment::rewrite_comment;\n use config::{BraceStyle, Config};\n use expr::{format_expr, ExprType};\n@@ -131,6 +132,48 @@ impl<'a> FmtVisitor<'a> {\n         self.block_indent = self.block_indent.block_indent(self.config);\n         self.buffer.push_str(\"{\");\n \n+        if self.config.remove_blank_lines_at_start_or_end_of_block() {\n+            if let Some(first_stmt) = b.stmts.first() {\n+                let attr_lo = inner_attrs\n+                    .and_then(|attrs| {\n+                        utils::inner_attributes(attrs)\n+                            .first()\n+                            .map(|attr| attr.span.lo)\n+                    })\n+                    .or_else(|| {\n+                        // Attributes for an item in a statement position\n+                        // do not belong to the statement. (rust-lang/rust#34459)\n+                        if let ast::StmtKind::Item(ref item) = first_stmt.node {\n+                            item.attrs.first()\n+                        } else {\n+                            first_stmt.attrs().first()\n+                        }.and_then(|attr| {\n+                            // Some stmts can have embedded attributes.\n+                            // e.g. `match { #![attr] ... }`\n+                            let attr_lo = attr.span.lo;\n+                            if attr_lo < first_stmt.span.lo {\n+                                Some(attr_lo)\n+                            } else {\n+                                None\n+                            }\n+                        })\n+                    });\n+\n+                let snippet =\n+                    self.snippet(mk_sp(self.last_pos, attr_lo.unwrap_or(first_stmt.span.lo)));\n+                let len = CommentCodeSlices::new(&snippet).nth(0).and_then(\n+                    |(kind, _, s)| if kind == CodeCharKind::Normal {\n+                        s.rfind('\\n')\n+                    } else {\n+                        None\n+                    },\n+                );\n+                if let Some(len) = len {\n+                    self.last_pos = self.last_pos + BytePos::from_usize(len);\n+                }\n+            }\n+        }\n+\n         // Format inner attributes if available.\n         if let Some(attrs) = inner_attrs {\n             self.visit_attrs(attrs, ast::AttrStyle::Inner);\n@@ -148,17 +191,39 @@ impl<'a> FmtVisitor<'a> {\n             }\n         }\n \n+        let mut remove_len = BytePos(0);\n+        if self.config.remove_blank_lines_at_start_or_end_of_block() {\n+            if let Some(stmt) = b.stmts.last() {\n+                let snippet = self.snippet(mk_sp(\n+                    stmt.span.hi,\n+                    source!(self, b.span).hi - brace_compensation,\n+                ));\n+                let len = CommentCodeSlices::new(&snippet)\n+                    .last()\n+                    .and_then(|(kind, _, s)| {\n+                        if kind == CodeCharKind::Normal && s.trim().is_empty() {\n+                            Some(s.len())\n+                        } else {\n+                            None\n+                        }\n+                    });\n+                if let Some(len) = len {\n+                    remove_len = BytePos::from_usize(len);\n+                }\n+            }\n+        }\n+\n         let mut unindent_comment = self.is_if_else_block && !b.stmts.is_empty();\n         if unindent_comment {\n-            let end_pos = source!(self, b.span).hi - brace_compensation;\n+            let end_pos = source!(self, b.span).hi - brace_compensation - remove_len;\n             let snippet = self.get_context().snippet(mk_sp(self.last_pos, end_pos));\n             unindent_comment = snippet.contains(\"//\") || snippet.contains(\"/*\");\n         }\n         // FIXME: we should compress any newlines here to just one\n         if unindent_comment {\n             self.block_indent = self.block_indent.block_unindent(self.config);\n         }\n-        self.format_missing_with_indent(source!(self, b.span).hi - brace_compensation);\n+        self.format_missing_with_indent(source!(self, b.span).hi - brace_compensation - remove_len);\n         if unindent_comment {\n             self.block_indent = self.block_indent.block_indent(self.config);\n         }"}, {"sha": "e3d489411ad2815698625685b71feb9f8b26bf90", "filename": "tests/source/fn-simple.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a1d28bf41cbec4748633bbe336145a862429b265/tests%2Fsource%2Ffn-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1d28bf41cbec4748633bbe336145a862429b265/tests%2Fsource%2Ffn-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Ffn-simple.rs?ref=a1d28bf41cbec4748633bbe336145a862429b265", "patch": "@@ -51,5 +51,4 @@ pub fn waltz(cwd: &Path) -> CliAssert {\n             formatted_comment = rewrite_comment(comment, block_style, width, offset, formatting_fig);\n         }\n     }\n-\n }"}, {"sha": "75cee57f10db61c9f2bc9e16dea4c84b4041161e", "filename": "tests/source/indent_match_arms.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a1d28bf41cbec4748633bbe336145a862429b265/tests%2Fsource%2Findent_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1d28bf41cbec4748633bbe336145a862429b265/tests%2Fsource%2Findent_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Findent_match_arms.rs?ref=a1d28bf41cbec4748633bbe336145a862429b265", "patch": "@@ -23,5 +23,4 @@ fn main() {\n         },\n         _ => \"something else\",\n     }\n-\n }"}, {"sha": "4c60859e6cf3919bd1a731d0922e01fe270b3d72", "filename": "tests/source/issue-510.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a1d28bf41cbec4748633bbe336145a862429b265/tests%2Fsource%2Fissue-510.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1d28bf41cbec4748633bbe336145a862429b265/tests%2Fsource%2Fissue-510.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-510.rs?ref=a1d28bf41cbec4748633bbe336145a862429b265", "patch": "@@ -3,7 +3,6 @@ fn solve_inline_size_constraints(&self,\n block: &mut BlockFlow,\n input: &ISizeConstraintInput)\n -> ISizeConstraintSolution {\n-\n let (inline_start,inline_size,margin_inline_start,margin_inline_end) =\n match (inline_startssssssxxxxxxsssssxxxxxxxxxssssssxxx,inline_startssssssxxxxxxsssssxxxxxxxxxssssssxxx) {\n (MaybeAuto::Auto, MaybeAuto::Auto, MaybeAuto::Auto) => {"}, {"sha": "377843cbc8b4fbef5664ac805095a6515e3d60d8", "filename": "tests/source/remove_blank_lines.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a1d28bf41cbec4748633bbe336145a862429b265/tests%2Fsource%2Fremove_blank_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1d28bf41cbec4748633bbe336145a862429b265/tests%2Fsource%2Fremove_blank_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fremove_blank_lines.rs?ref=a1d28bf41cbec4748633bbe336145a862429b265", "patch": "@@ -0,0 +1,22 @@\n+fn main() {\n+\n+\n+\n+\n+    let x = 1;\n+\n+\n+\n+\n+}\n+\n+fn foo() {\n+\n+    #![attribute]\n+\n+    let x = 1;\n+\n+    // comment\n+\n+\n+}"}, {"sha": "73cab841e2e61771b20818cbd9695b2f6255528b", "filename": "tests/source/spaces-within-angle-brackets.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a1d28bf41cbec4748633bbe336145a862429b265/tests%2Fsource%2Fspaces-within-angle-brackets.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1d28bf41cbec4748633bbe336145a862429b265/tests%2Fsource%2Fspaces-within-angle-brackets.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fspaces-within-angle-brackets.rs?ref=a1d28bf41cbec4748633bbe336145a862429b265", "patch": "@@ -31,7 +31,6 @@ fn foo<T, E>(a: T, b: E) {\n }\n \n fn foo<T: Send, E: Send>(a: T, b: E) {\n-\n     foo::<u32, str>(10, \"bar\");\n \n     let opt: Option<u32>;"}, {"sha": "dba8d7cf01309dbb281da9a41f1bf3dfc8834d6a", "filename": "tests/source/spaces-within-parens.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a1d28bf41cbec4748633bbe336145a862429b265/tests%2Fsource%2Fspaces-within-parens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1d28bf41cbec4748633bbe336145a862429b265/tests%2Fsource%2Fspaces-within-parens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fspaces-within-parens.rs?ref=a1d28bf41cbec4748633bbe336145a862429b265", "patch": "@@ -14,7 +14,6 @@ struct TupleStruct2(u32, u32);\n fn fooEmpty() {}\n \n fn foo(e: E, _: u32) -> (u32, u32) {\n-\n     // Tuples\n     let t1 = ();\n     let t2 = (1,);"}, {"sha": "d0466cacdd54f1dc19556634b72f9aa79c53f197", "filename": "tests/source/spaces-within-square-brackets.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a1d28bf41cbec4748633bbe336145a862429b265/tests%2Fsource%2Fspaces-within-square-brackets.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1d28bf41cbec4748633bbe336145a862429b265/tests%2Fsource%2Fspaces-within-square-brackets.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fspaces-within-square-brackets.rs?ref=a1d28bf41cbec4748633bbe336145a862429b265", "patch": "@@ -1,7 +1,6 @@\n // rustfmt-spaces_within_square_brackets: true\n \n fn main() {\n-\n     let arr: [i32; 5] = [1, 2, 3, 4, 5];\n     let arr: [i32; 500] = [0; 500];\n "}, {"sha": "d7d9e961bc443a00b5c1a81250f6ed3ebd399bde", "filename": "tests/source/struct_tuple_visual.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1d28bf41cbec4748633bbe336145a862429b265/tests%2Fsource%2Fstruct_tuple_visual.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1d28bf41cbec4748633bbe336145a862429b265/tests%2Fsource%2Fstruct_tuple_visual.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fstruct_tuple_visual.rs?ref=a1d28bf41cbec4748633bbe336145a862429b265", "patch": "@@ -3,7 +3,6 @@\n // rustfmt-error_on_line_overflow: false\n // rustfmt-struct_lit_style: Visual\n fn foo() {\n-\n     Fooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo(f(), b());\n \n     Foooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo(// Comment\n@@ -35,5 +34,4 @@ fn foo() {\n             //              /|\\   \\\n             //             o o o   o\n             G)\n-\n }"}, {"sha": "a9640937f60628940541d438d84f57fba5063023", "filename": "tests/target/fn-simple.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a1d28bf41cbec4748633bbe336145a862429b265/tests%2Ftarget%2Ffn-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1d28bf41cbec4748633bbe336145a862429b265/tests%2Ftarget%2Ffn-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ffn-simple.rs?ref=a1d28bf41cbec4748633bbe336145a862429b265", "patch": "@@ -96,5 +96,4 @@ pub fn waltz(cwd: &Path) -> CliAssert {\n                 rewrite_comment(comment, block_style, width, offset, formatting_fig);\n         }\n     }\n-\n }"}, {"sha": "8d5e7ef78874ad870890f101d1f1dfce728ae63b", "filename": "tests/target/indent_match_arms.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a1d28bf41cbec4748633bbe336145a862429b265/tests%2Ftarget%2Findent_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1d28bf41cbec4748633bbe336145a862429b265/tests%2Ftarget%2Findent_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Findent_match_arms.rs?ref=a1d28bf41cbec4748633bbe336145a862429b265", "patch": "@@ -23,5 +23,4 @@ fn main() {\n     },\n     _ => \"something else\",\n     }\n-\n }"}, {"sha": "a166b68498fa0672a96bb31fab427cf935472fed", "filename": "tests/target/issue-510.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a1d28bf41cbec4748633bbe336145a862429b265/tests%2Ftarget%2Fissue-510.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1d28bf41cbec4748633bbe336145a862429b265/tests%2Ftarget%2Fissue-510.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-510.rs?ref=a1d28bf41cbec4748633bbe336145a862429b265", "patch": "@@ -4,7 +4,6 @@ impl ISizeAndMarginsComputer for AbsoluteNonReplaced {\n         block: &mut BlockFlow,\n         input: &ISizeConstraintInput,\n     ) -> ISizeConstraintSolution {\n-\n         let (inline_start, inline_size, margin_inline_start, margin_inline_end) = match (\n             inline_startssssssxxxxxxsssssxxxxxxxxxssssssxxx,\n             inline_startssssssxxxxxxsssssxxxxxxxxxssssssxxx,"}, {"sha": "00de4a829f2fcf42034771687013dcb40247001f", "filename": "tests/target/remove_blank_lines.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a1d28bf41cbec4748633bbe336145a862429b265/tests%2Ftarget%2Fremove_blank_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1d28bf41cbec4748633bbe336145a862429b265/tests%2Ftarget%2Fremove_blank_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fremove_blank_lines.rs?ref=a1d28bf41cbec4748633bbe336145a862429b265", "patch": "@@ -0,0 +1,11 @@\n+fn main() {\n+    let x = 1;\n+}\n+\n+fn foo() {\n+    #![attribute]\n+\n+    let x = 1;\n+\n+    // comment\n+}"}, {"sha": "89335b602a423f71695041221be800d1f3b482a0", "filename": "tests/target/spaces-within-angle-brackets.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a1d28bf41cbec4748633bbe336145a862429b265/tests%2Ftarget%2Fspaces-within-angle-brackets.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1d28bf41cbec4748633bbe336145a862429b265/tests%2Ftarget%2Fspaces-within-angle-brackets.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fspaces-within-angle-brackets.rs?ref=a1d28bf41cbec4748633bbe336145a862429b265", "patch": "@@ -31,7 +31,6 @@ fn foo< T, E >(a: T, b: E) {\n }\n \n fn foo< T: Send, E: Send >(a: T, b: E) {\n-\n     foo::< u32, str >(10, \"bar\");\n \n     let opt: Option< u32 >;"}, {"sha": "651386c618bfd4d008e1dcc3be061462fd6f0469", "filename": "tests/target/spaces-within-parens.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a1d28bf41cbec4748633bbe336145a862429b265/tests%2Ftarget%2Fspaces-within-parens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1d28bf41cbec4748633bbe336145a862429b265/tests%2Ftarget%2Fspaces-within-parens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fspaces-within-parens.rs?ref=a1d28bf41cbec4748633bbe336145a862429b265", "patch": "@@ -14,7 +14,6 @@ struct TupleStruct2( u32, u32 );\n fn fooEmpty() {}\n \n fn foo( e: E, _: u32 ) -> ( u32, u32 ) {\n-\n     // Tuples\n     let t1 = ();\n     let t2 = ( 1, );"}, {"sha": "cb468d6b59e62b2a1388c93e2e7a21d823a0f3b7", "filename": "tests/target/spaces-within-square-brackets.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a1d28bf41cbec4748633bbe336145a862429b265/tests%2Ftarget%2Fspaces-within-square-brackets.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1d28bf41cbec4748633bbe336145a862429b265/tests%2Ftarget%2Fspaces-within-square-brackets.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fspaces-within-square-brackets.rs?ref=a1d28bf41cbec4748633bbe336145a862429b265", "patch": "@@ -1,7 +1,6 @@\n // rustfmt-spaces_within_square_brackets: true\n \n fn main() {\n-\n     let arr: [ i32; 5 ] = [ 1, 2, 3, 4, 5 ];\n     let arr: [ i32; 500 ] = [ 0; 500 ];\n "}, {"sha": "02811668bcba9152173e5e5338f4d7ed272da43d", "filename": "tests/target/struct_tuple_visual.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1d28bf41cbec4748633bbe336145a862429b265/tests%2Ftarget%2Fstruct_tuple_visual.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1d28bf41cbec4748633bbe336145a862429b265/tests%2Ftarget%2Fstruct_tuple_visual.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fstruct_tuple_visual.rs?ref=a1d28bf41cbec4748633bbe336145a862429b265", "patch": "@@ -3,7 +3,6 @@\n // rustfmt-error_on_line_overflow: false\n // rustfmt-struct_lit_style: Visual\n fn foo() {\n-\n     Fooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo(f(), b());\n \n     Foooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo(\n@@ -45,5 +44,4 @@ fn foo() {\n         //             o o o   o\n         G,\n     )\n-\n }"}]}