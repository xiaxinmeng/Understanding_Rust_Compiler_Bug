{"sha": "e4e880df37d5daff3dec8adf1629df45fd8a6132", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0ZTg4MGRmMzdkNWRhZmYzZGVjOGFkZjE2MjlkZjQ1ZmQ4YTYxMzI=", "commit": {"author": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2015-11-11T15:58:41Z"}, "committer": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2015-11-11T23:30:17Z"}, "message": "Const-eval array element repetition count", "tree": {"sha": "d3658d1bbea35e246b96cf73a099064857006634", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3658d1bbea35e246b96cf73a099064857006634"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e4e880df37d5daff3dec8adf1629df45fd8a6132", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e4e880df37d5daff3dec8adf1629df45fd8a6132", "html_url": "https://github.com/rust-lang/rust/commit/e4e880df37d5daff3dec8adf1629df45fd8a6132", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e4e880df37d5daff3dec8adf1629df45fd8a6132/comments", "author": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db89a75a801622db9673f4175f645330b29509c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/db89a75a801622db9673f4175f645330b29509c4", "html_url": "https://github.com/rust-lang/rust/commit/db89a75a801622db9673f4175f645330b29509c4"}], "stats": {"total": 31, "additions": 23, "deletions": 8}, "files": [{"sha": "ed9d7560a4b48866b358fd12ba7c16a30c585951", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e4e880df37d5daff3dec8adf1629df45fd8a6132/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4e880df37d5daff3dec8adf1629df45fd8a6132/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=e4e880df37d5daff3dec8adf1629df45fd8a6132", "patch": "@@ -17,7 +17,6 @@ use hair::cx::block;\n use hair::cx::pattern::PatNode;\n use hair::cx::to_ref::ToRef;\n use rustc::front::map;\n-use rustc::middle::const_eval;\n use rustc::middle::def;\n use rustc::middle::region::CodeExtent;\n use rustc::middle::pat_util;\n@@ -81,10 +80,9 @@ impl<'tcx> Mirror<'tcx> for &'tcx hir::Expr {\n                 }\n             }\n \n-            hir::ExprLit(..) => {\n-                let value = const_eval::eval_const_expr(cx.tcx, self);\n-                ExprKind::Literal { literal: Literal::Value { value: value } }\n-            }\n+            hir::ExprLit(..) => ExprKind::Literal {\n+                literal: cx.const_eval_literal(self)\n+            },\n \n             hir::ExprBinary(op, ref lhs, ref rhs) => {\n                 if cx.tcx.is_method_call(self.id) {\n@@ -273,8 +271,17 @@ impl<'tcx> Mirror<'tcx> for &'tcx hir::Expr {\n \n             // Now comes the rote stuff:\n \n-            hir::ExprRepeat(ref v, ref c) =>\n-                ExprKind::Repeat { value: v.to_ref(), count: c.to_ref() },\n+            hir::ExprRepeat(ref v, ref c) => ExprKind::Repeat {\n+                value: v.to_ref(),\n+                count: Expr {\n+                    ty: cx.tcx.expr_ty(c),\n+                    temp_lifetime: None,\n+                    span: c.span,\n+                    kind: ExprKind::Literal {\n+                        literal: cx.const_eval_literal(c)\n+                    }\n+                }.to_ref()\n+            },\n             hir::ExprRet(ref v) =>\n                 ExprKind::Return { value: v.to_ref() },\n             hir::ExprBreak(label) =>"}, {"sha": "0373dab150ecf0cf5e67198240bfacd87512ab56", "filename": "src/librustc_mir/hair/cx/mod.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e4e880df37d5daff3dec8adf1629df45fd8a6132/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4e880df37d5daff3dec8adf1629df45fd8a6132/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs?ref=e4e880df37d5daff3dec8adf1629df45fd8a6132", "patch": "@@ -18,13 +18,14 @@\n use hair::*;\n use repr::*;\n \n-use rustc::middle::const_eval::ConstVal;\n+use rustc::middle::const_eval::{self, ConstVal};\n use rustc::middle::def_id::DefId;\n use rustc::middle::infer::InferCtxt;\n use rustc::middle::subst::{Subst, Substs};\n use rustc::middle::ty::{self, Ty};\n use syntax::codemap::Span;\n use syntax::parse::token;\n+use rustc_front::hir;\n \n #[derive(Copy, Clone)]\n pub struct Cx<'a, 'tcx: 'a> {\n@@ -73,6 +74,10 @@ impl<'a,'tcx:'a> Cx<'a, 'tcx> {\n         Literal::Value { value: ConstVal::Bool(false) }\n     }\n \n+    pub fn const_eval_literal(&mut self, e: &hir::Expr) -> Literal<'tcx> {\n+        Literal::Value { value: const_eval::eval_const_expr(self.tcx, e) }\n+    }\n+\n     pub fn partial_eq(&mut self, ty: Ty<'tcx>) -> ItemRef<'tcx> {\n         let eq_def_id = self.tcx.lang_items.eq_trait().unwrap();\n         self.cmp_method_ref(eq_def_id, \"eq\", ty)"}, {"sha": "af3a20245de9e49b796416a1adb6cae8eb8e9209", "filename": "src/librustc_mir/hair/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e4e880df37d5daff3dec8adf1629df45fd8a6132/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4e880df37d5daff3dec8adf1629df45fd8a6132/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fmod.rs?ref=e4e880df37d5daff3dec8adf1629df45fd8a6132", "patch": "@@ -210,6 +210,9 @@ pub enum ExprKind<'tcx> {\n     },\n     Repeat {\n         value: ExprRef<'tcx>,\n+        // FIXME(#29789): Add a separate hair::Constant<'tcx> so this could be more explicit about\n+        // its contained data. Currently this should only contain expression of ExprKind::Literal\n+        // kind.\n         count: ExprRef<'tcx>,\n     },\n     Vec {"}]}