{"sha": "b4295b9fb0789b9c354d17457dc60a7ca13119a6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0Mjk1YjlmYjA3ODliOWMzNTRkMTc0NTdkYzYwYTdjYTEzMTE5YTY=", "commit": {"author": {"name": "Kevin Yeh", "email": "kevinyeah@utexas.edu", "date": "2015-11-26T19:14:10Z"}, "committer": {"name": "Kevin Yeh", "email": "kevinyeah@utexas.edu", "date": "2015-11-26T20:38:45Z"}, "message": "Fix spans for macros", "tree": {"sha": "529c1d03904930623c8a66b39fe9c070633ba60c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/529c1d03904930623c8a66b39fe9c070633ba60c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4295b9fb0789b9c354d17457dc60a7ca13119a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4295b9fb0789b9c354d17457dc60a7ca13119a6", "html_url": "https://github.com/rust-lang/rust/commit/b4295b9fb0789b9c354d17457dc60a7ca13119a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4295b9fb0789b9c354d17457dc60a7ca13119a6/comments", "author": {"login": "kyeah", "id": 2308368, "node_id": "MDQ6VXNlcjIzMDgzNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/2308368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kyeah", "html_url": "https://github.com/kyeah", "followers_url": "https://api.github.com/users/kyeah/followers", "following_url": "https://api.github.com/users/kyeah/following{/other_user}", "gists_url": "https://api.github.com/users/kyeah/gists{/gist_id}", "starred_url": "https://api.github.com/users/kyeah/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kyeah/subscriptions", "organizations_url": "https://api.github.com/users/kyeah/orgs", "repos_url": "https://api.github.com/users/kyeah/repos", "events_url": "https://api.github.com/users/kyeah/events{/privacy}", "received_events_url": "https://api.github.com/users/kyeah/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kyeah", "id": 2308368, "node_id": "MDQ6VXNlcjIzMDgzNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/2308368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kyeah", "html_url": "https://github.com/kyeah", "followers_url": "https://api.github.com/users/kyeah/followers", "following_url": "https://api.github.com/users/kyeah/following{/other_user}", "gists_url": "https://api.github.com/users/kyeah/gists{/gist_id}", "starred_url": "https://api.github.com/users/kyeah/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kyeah/subscriptions", "organizations_url": "https://api.github.com/users/kyeah/orgs", "repos_url": "https://api.github.com/users/kyeah/repos", "events_url": "https://api.github.com/users/kyeah/events{/privacy}", "received_events_url": "https://api.github.com/users/kyeah/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ba44607fe09c4fb98a52ca2149b0c9869a87b4c", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ba44607fe09c4fb98a52ca2149b0c9869a87b4c", "html_url": "https://github.com/rust-lang/rust/commit/2ba44607fe09c4fb98a52ca2149b0c9869a87b4c"}], "stats": {"total": 9, "additions": 6, "deletions": 3}, "files": [{"sha": "74b8fdea538bf04e3551d046a808a63c579e444d", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b4295b9fb0789b9c354d17457dc60a7ca13119a6/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4295b9fb0789b9c354d17457dc60a7ca13119a6/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=b4295b9fb0789b9c354d17457dc60a7ca13119a6", "patch": "@@ -3253,7 +3253,7 @@ impl<'a> Parser<'a> {\n                         let tts = try!(self.parse_seq_to_end(&token::CloseDelim(delim),\n                                 seq_sep_none(), |p| p.parse_token_tree()));\n                         let mac = Mac_ { path: path, tts: tts, ctxt: EMPTY_CTXT };\n-                        pat = PatMac(codemap::Spanned {node: mac, span: self.span});\n+                        pat = PatMac(codemap::Spanned {node: mac, span: mk_sp(lo, self.span.hi)});\n                     } else {\n                         // Parse ident @ pat\n                         // This can give false positives and parse nullary enums,\n@@ -4475,6 +4475,7 @@ impl<'a> Parser<'a> {\n             let last_span = self.last_span;\n             self.complain_if_pub_macro(vis, last_span);\n \n+            let lo = self.span.lo;\n             let pth = try!(self.parse_path(NoTypesAllowed));\n             try!(self.expect(&token::Not));\n \n@@ -4485,7 +4486,7 @@ impl<'a> Parser<'a> {\n                                             |p| p.parse_token_tree()));\n             let m_ = Mac_ { path: pth, tts: tts, ctxt: EMPTY_CTXT };\n             let m: ast::Mac = codemap::Spanned { node: m_,\n-                                                span: mk_sp(self.span.lo,\n+                                                span: mk_sp(lo,\n                                                             self.span.hi) };\n             if delim != token::Brace {\n                 try!(self.expect(&token::Semi))\n@@ -5513,6 +5514,8 @@ impl<'a> Parser<'a> {\n             let last_span = self.last_span;\n             self.complain_if_pub_macro(visibility, last_span);\n \n+            let mac_lo = self.span.lo;\n+\n             // item macro.\n             let pth = try!(self.parse_path(NoTypesAllowed));\n             try!(self.expect(&token::Not));\n@@ -5533,7 +5536,7 @@ impl<'a> Parser<'a> {\n             // single-variant-enum... :\n             let m = Mac_ { path: pth, tts: tts, ctxt: EMPTY_CTXT };\n             let m: ast::Mac = codemap::Spanned { node: m,\n-                                             span: mk_sp(self.span.lo,\n+                                             span: mk_sp(mac_lo,\n                                                          self.span.hi) };\n \n             if delim != token::Brace {"}]}