{"sha": "4f50e6f41ec8b55a6dc52066dc15fa5d17b8e39b", "node_id": "C_kwDOAAsO6NoAKDRmNTBlNmY0MWVjOGI1NWE2ZGM1MjA2NmRjMTVmYTVkMTdiOGUzOWI", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-09-14T23:42:25Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-10-14T05:47:09Z"}, "message": "Remove CastCheckResult since it's unused", "tree": {"sha": "aae6c09f1d3f4f580aab7f956dab01d58228b610", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aae6c09f1d3f4f580aab7f956dab01d58228b610"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f50e6f41ec8b55a6dc52066dc15fa5d17b8e39b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f50e6f41ec8b55a6dc52066dc15fa5d17b8e39b", "html_url": "https://github.com/rust-lang/rust/commit/4f50e6f41ec8b55a6dc52066dc15fa5d17b8e39b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f50e6f41ec8b55a6dc52066dc15fa5d17b8e39b/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c3f077c7ad58e3dae45fc09e9645c235337c3419", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3f077c7ad58e3dae45fc09e9645c235337c3419", "html_url": "https://github.com/rust-lang/rust/commit/c3f077c7ad58e3dae45fc09e9645c235337c3419"}], "stats": {"total": 29, "additions": 17, "deletions": 12}, "files": [{"sha": "102f7541c8ce13853190069a112c8a4ee3e14a9f", "filename": "clippy_lints/src/transmute/utils.rs", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/4f50e6f41ec8b55a6dc52066dc15fa5d17b8e39b/clippy_lints%2Fsrc%2Ftransmute%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f50e6f41ec8b55a6dc52066dc15fa5d17b8e39b/clippy_lints%2Fsrc%2Ftransmute%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Futils.rs?ref=4f50e6f41ec8b55a6dc52066dc15fa5d17b8e39b", "patch": "@@ -1,15 +1,16 @@\n use rustc_hir::Expr;\n-use rustc_hir_analysis::check::{\n-    cast::{self, CastCheckResult},\n-    FnCtxt, Inherited,\n-};\n+use rustc_hir_analysis::check::{cast, FnCtxt, Inherited};\n use rustc_lint::LateContext;\n use rustc_middle::ty::{cast::CastKind, Ty};\n use rustc_span::DUMMY_SP;\n \n // check if the component types of the transmuted collection and the result have different ABI,\n // size or alignment\n-pub(super) fn is_layout_incompatible<'tcx>(cx: &LateContext<'tcx>, from: Ty<'tcx>, to: Ty<'tcx>) -> bool {\n+pub(super) fn is_layout_incompatible<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    from: Ty<'tcx>,\n+    to: Ty<'tcx>,\n+) -> bool {\n     if let Ok(from) = cx.tcx.try_normalize_erasing_regions(cx.param_env, from)\n         && let Ok(to) = cx.tcx.try_normalize_erasing_regions(cx.param_env, to)\n         && let Ok(from_layout) = cx.tcx.layout_of(cx.param_env.and(from))\n@@ -32,7 +33,9 @@ pub(super) fn can_be_expressed_as_pointer_cast<'tcx>(\n     from_ty: Ty<'tcx>,\n     to_ty: Ty<'tcx>,\n ) -> bool {\n-    use CastKind::{AddrPtrCast, ArrayPtrCast, FnPtrAddrCast, FnPtrPtrCast, PtrAddrCast, PtrPtrCast};\n+    use CastKind::{\n+        AddrPtrCast, ArrayPtrCast, FnPtrAddrCast, FnPtrPtrCast, PtrAddrCast, PtrPtrCast,\n+    };\n     matches!(\n         check_cast(cx, e, from_ty, to_ty),\n         Some(PtrPtrCast | PtrAddrCast | AddrPtrCast | ArrayPtrCast | FnPtrPtrCast | FnPtrAddrCast)\n@@ -43,20 +46,22 @@ pub(super) fn can_be_expressed_as_pointer_cast<'tcx>(\n /// the cast. In certain cases, including some invalid casts from array references\n /// to pointers, this may cause additional errors to be emitted and/or ICE error\n /// messages. This function will panic if that occurs.\n-fn check_cast<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>, from_ty: Ty<'tcx>, to_ty: Ty<'tcx>) -> Option<CastKind> {\n+fn check_cast<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    e: &'tcx Expr<'_>,\n+    from_ty: Ty<'tcx>,\n+    to_ty: Ty<'tcx>,\n+) -> Option<CastKind> {\n     let hir_id = e.hir_id;\n     let local_def_id = hir_id.owner.def_id;\n \n     Inherited::build(cx.tcx, local_def_id).enter(|inherited| {\n         let fn_ctxt = FnCtxt::new(&inherited, cx.param_env, hir_id);\n \n         // If we already have errors, we can't be sure we can pointer cast.\n-        assert!(\n-            !fn_ctxt.errors_reported_since_creation(),\n-            \"Newly created FnCtxt contained errors\"\n-        );\n+        assert!(!fn_ctxt.errors_reported_since_creation(), \"Newly created FnCtxt contained errors\");\n \n-        if let CastCheckResult::Deferred(check) = cast::check_cast(\n+        if let Ok(check) = cast::CastCheck::new(\n             &fn_ctxt, e, from_ty, to_ty,\n             // We won't show any error to the user, so we don't care what the span is here.\n             DUMMY_SP, DUMMY_SP,"}]}