{"sha": "49d43468a8182e4e0fda4a15e969266ceba86809", "node_id": "C_kwDOAAsO6NoAKDQ5ZDQzNDY4YTgxODJlNGUwZmRhNGExNWU5NjkyNjZjZWJhODY4MDk", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-12-27T20:33:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-12-27T20:33:38Z"}, "message": "Rollup merge of #106189 - alexhrao:master, r=Nilstrieb\n\nFix UnsafeCell Documentation Spelling Error\n\nThis fixes the spelling of \"deallocated\" (instead of the original \"deallocted\") In the `cell.rs` source file. Honestly probably not worth the time to evaluate, but since it doesn't involve any code change, I figure why not?", "tree": {"sha": "87838ae2f08ca9d02c260dc55d73dd2fec06ec69", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/87838ae2f08ca9d02c260dc55d73dd2fec06ec69"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/49d43468a8182e4e0fda4a15e969266ceba86809", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjq1aiCRBK7hj4Ov3rIwAAswkIACDNlYsBj7FlgM2Rt1VgFPbQ\ncWcUPVeC7N65hsQyXJa5b5RVdI0/NGZ/XgymTt4aOyn/8H+1+tHKx7DUeAMJc/pE\ngyuvDeuYR2AZ2Sp6r62fyRRbQn2ScpPjaC/MDD0Rs24YB0Hrg64/NkL1EF4UEUJS\nzBIR1TXy3RMTn6EW49qvaBy/d/Vi8KCAp5fC1dVIuJk8UftktZ8HbSn2DUzKAqN9\nJQJjXnoVrpIoGOYn9Xu9U3pj/fFVfYHqoHVHegy+yWAXV8qEBM6G28R8WtlXLAiD\npHCQqh2wObrr9eozxS/IY4j3CBo1uGUjTyxJiNL+ipoo5Y85f+a/KYEolpnvuS0=\n=SiTn\n-----END PGP SIGNATURE-----\n", "payload": "tree 87838ae2f08ca9d02c260dc55d73dd2fec06ec69\nparent 79730d6e32b7e4fb5f6774eccac4d3a6debdd1b7\nparent b026167eb96720c44fc584d2184b3039c44b6932\nauthor Michael Goulet <michael@errs.io> 1672173218 -0800\ncommitter GitHub <noreply@github.com> 1672173218 -0800\n\nRollup merge of #106189 - alexhrao:master, r=Nilstrieb\n\nFix UnsafeCell Documentation Spelling Error\n\nThis fixes the spelling of \"deallocated\" (instead of the original \"deallocted\") In the `cell.rs` source file. Honestly probably not worth the time to evaluate, but since it doesn't involve any code change, I figure why not?\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/49d43468a8182e4e0fda4a15e969266ceba86809", "html_url": "https://github.com/rust-lang/rust/commit/49d43468a8182e4e0fda4a15e969266ceba86809", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/49d43468a8182e4e0fda4a15e969266ceba86809/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79730d6e32b7e4fb5f6774eccac4d3a6debdd1b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/79730d6e32b7e4fb5f6774eccac4d3a6debdd1b7", "html_url": "https://github.com/rust-lang/rust/commit/79730d6e32b7e4fb5f6774eccac4d3a6debdd1b7"}, {"sha": "b026167eb96720c44fc584d2184b3039c44b6932", "url": "https://api.github.com/repos/rust-lang/rust/commits/b026167eb96720c44fc584d2184b3039c44b6932", "html_url": "https://github.com/rust-lang/rust/commit/b026167eb96720c44fc584d2184b3039c44b6932"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "ba93165cf53a2d3d989c13f2fa88664ea2257856", "filename": "library/core/src/cell.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49d43468a8182e4e0fda4a15e969266ceba86809/library%2Fcore%2Fsrc%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49d43468a8182e4e0fda4a15e969266ceba86809/library%2Fcore%2Fsrc%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell.rs?ref=49d43468a8182e4e0fda4a15e969266ceba86809", "patch": "@@ -1783,7 +1783,7 @@ impl<T: ?Sized + fmt::Display> fmt::Display for RefMut<'_, T> {\n /// until the reference expires. As a special exception, given an `&T`, any part of it that is\n /// inside an `UnsafeCell<_>` may be deallocated during the lifetime of the reference, after the\n /// last time the reference is used (dereferenced or reborrowed). Since you cannot deallocate a part\n-/// of what a reference points to, this means the memory an `&T` points to can be deallocted only if\n+/// of what a reference points to, this means the memory an `&T` points to can be deallocated only if\n /// *every part of it* (including padding) is inside an `UnsafeCell`.\n ///\n ///     However, whenever a `&UnsafeCell<T>` is constructed or dereferenced, it must still point to"}]}