{"sha": "ff49b806283050c9e095e0352560256522356c3b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmNDliODA2MjgzMDUwYzllMDk1ZTAzNTI1NjAyNTY1MjIzNTZjM2I=", "commit": {"author": {"name": "Caleb Cartwright", "email": "calebcartwright@users.noreply.github.com", "date": "2019-07-06T05:17:35Z"}, "committer": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2019-07-06T05:17:35Z"}, "message": "fix: handling of --all when dep name and dir name differ (#3664)", "tree": {"sha": "3ffa93c349a121139121551ab45c85984297d873", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ffa93c349a121139121551ab45c85984297d873"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff49b806283050c9e095e0352560256522356c3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff49b806283050c9e095e0352560256522356c3b", "html_url": "https://github.com/rust-lang/rust/commit/ff49b806283050c9e095e0352560256522356c3b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff49b806283050c9e095e0352560256522356c3b/comments", "author": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44149d6ba4054b80e9d7009431eb2c5e501bb1fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/44149d6ba4054b80e9d7009431eb2c5e501bb1fe", "html_url": "https://github.com/rust-lang/rust/commit/44149d6ba4054b80e9d7009431eb2c5e501bb1fe"}], "stats": {"total": 34, "additions": 24, "deletions": 10}, "files": [{"sha": "c063d8eb4194f23dd2a4ebb59519071ddc1b60e3", "filename": "src/cargo-fmt/main.rs", "status": "modified", "additions": 24, "deletions": 10, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/ff49b806283050c9e095e0352560256522356c3b/src%2Fcargo-fmt%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff49b806283050c9e095e0352560256522356c3b/src%2Fcargo-fmt%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcargo-fmt%2Fmain.rs?ref=ff49b806283050c9e095e0352560256522356c3b", "patch": "@@ -247,7 +247,7 @@ fn get_targets(strategy: &CargoFmtStrategy) -> Result<BTreeSet<Target>, io::Erro\n }\n \n fn get_targets_root_only(targets: &mut BTreeSet<Target>) -> Result<(), io::Error> {\n-    let metadata = get_cargo_metadata(None)?;\n+    let metadata = get_cargo_metadata(None, false)?;\n     let current_dir = env::current_dir()?.canonicalize()?;\n     let current_dir_manifest = current_dir.join(\"Cargo.toml\");\n     let workspace_root_path = PathBuf::from(&metadata.workspace_root).canonicalize()?;\n@@ -282,7 +282,8 @@ fn get_targets_recursive(\n     mut targets: &mut BTreeSet<Target>,\n     visited: &mut BTreeSet<String>,\n ) -> Result<(), io::Error> {\n-    let metadata = get_cargo_metadata(manifest_path)?;\n+    let metadata = get_cargo_metadata(manifest_path, false)?;\n+    let metadata_with_deps = get_cargo_metadata(manifest_path, true)?;\n \n     for package in metadata.packages {\n         add_targets(&package.targets, &mut targets);\n@@ -293,11 +294,19 @@ fn get_targets_recursive(\n                 continue;\n             }\n \n-            let mut manifest_path = PathBuf::from(&package.manifest_path);\n-\n-            manifest_path.pop();\n-            manifest_path.push(&dependency.name);\n-            manifest_path.push(\"Cargo.toml\");\n+            let dependency_package = metadata_with_deps\n+                .packages\n+                .iter()\n+                .find(|p| p.name == dependency.name);\n+            let manifest_path = if dependency_package.is_some() {\n+                PathBuf::from(&dependency_package.unwrap().manifest_path)\n+            } else {\n+                let mut package_manifest_path = PathBuf::from(&package.manifest_path);\n+                package_manifest_path.pop();\n+                package_manifest_path.push(&dependency.name);\n+                package_manifest_path.push(\"Cargo.toml\");\n+                package_manifest_path\n+            };\n \n             if manifest_path.exists() {\n                 visited.insert(dependency.name);\n@@ -313,7 +322,7 @@ fn get_targets_with_hitlist(\n     hitlist: &[String],\n     targets: &mut BTreeSet<Target>,\n ) -> Result<(), io::Error> {\n-    let metadata = get_cargo_metadata(None)?;\n+    let metadata = get_cargo_metadata(None, false)?;\n \n     let mut workspace_hitlist: BTreeSet<&String> = BTreeSet::from_iter(hitlist);\n \n@@ -399,9 +408,14 @@ fn run_rustfmt(\n         .unwrap_or(SUCCESS))\n }\n \n-fn get_cargo_metadata(manifest_path: Option<&Path>) -> Result<cargo_metadata::Metadata, io::Error> {\n+fn get_cargo_metadata(\n+    manifest_path: Option<&Path>,\n+    include_deps: bool,\n+) -> Result<cargo_metadata::Metadata, io::Error> {\n     let mut cmd = cargo_metadata::MetadataCommand::new();\n-    cmd.no_deps();\n+    if !include_deps {\n+        cmd.no_deps();\n+    }\n     if let Some(manifest_path) = manifest_path {\n         cmd.manifest_path(manifest_path);\n     }"}]}