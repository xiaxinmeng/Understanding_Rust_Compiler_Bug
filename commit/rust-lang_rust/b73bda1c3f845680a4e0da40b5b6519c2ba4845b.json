{"sha": "b73bda1c3f845680a4e0da40b5b6519c2ba4845b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3M2JkYTFjM2Y4NDU2ODBhNGUwZGE0MGI1YjY1MTljMmJhNDg0NWI=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-11-07T12:31:02Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-11-07T12:31:02Z"}, "message": "Fix warnings", "tree": {"sha": "5b619ceb6a54c46b4e9f7d1376927ad209b7e7aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b619ceb6a54c46b4e9f7d1376927ad209b7e7aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b73bda1c3f845680a4e0da40b5b6519c2ba4845b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b73bda1c3f845680a4e0da40b5b6519c2ba4845b", "html_url": "https://github.com/rust-lang/rust/commit/b73bda1c3f845680a4e0da40b5b6519c2ba4845b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b73bda1c3f845680a4e0da40b5b6519c2ba4845b/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "648f491977546945afa31587390041d3fdb17c61", "url": "https://api.github.com/repos/rust-lang/rust/commits/648f491977546945afa31587390041d3fdb17c61", "html_url": "https://github.com/rust-lang/rust/commit/648f491977546945afa31587390041d3fdb17c61"}], "stats": {"total": 17, "additions": 3, "deletions": 14}, "files": [{"sha": "d1bff9ac524bfdcf356a3c812818e4afe4b52ed1", "filename": "src/allocator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b73bda1c3f845680a4e0da40b5b6519c2ba4845b/src%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b73bda1c3f845680a4e0da40b5b6519c2ba4845b/src%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fallocator.rs?ref=b73bda1c3f845680a4e0da40b5b6519c2ba4845b", "patch": "@@ -13,7 +13,7 @@ use crate::prelude::*;\n use rustc::middle::allocator::AllocatorKind;\n use rustc_allocator::{ALLOCATOR_METHODS, AllocatorTy};\n \n-pub fn codegen(tcx: TyCtxt, module: &mut Module<impl Backend + 'static>, kind: AllocatorKind) {\n+pub fn codegen(module: &mut Module<impl Backend + 'static>, kind: AllocatorKind) {\n     let usize_ty = module.target_config().pointer_type();\n \n     for method in ALLOCATOR_METHODS {"}, {"sha": "c4a33695fe25ca40215c74c6f1e082181a6d770f", "filename": "src/common.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b73bda1c3f845680a4e0da40b5b6519c2ba4845b/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b73bda1c3f845680a4e0da40b5b6519c2ba4845b/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=b73bda1c3f845680a4e0da40b5b6519c2ba4845b", "patch": "@@ -205,17 +205,6 @@ impl<'tcx> CValue<'tcx> {\n         }\n     }\n \n-    pub fn expect_byref(self) -> (Value, TyLayout<'tcx>) {\n-        match self {\n-            CValue::ByRef(value, layout) => (value, layout),\n-            CValue::ByVal(_, _) => bug!(\"Expected CValue::ByRef, found CValue::ByVal: {:?}\", self),\n-            CValue::ByValPair(_, _, _) => bug!(\n-                \"Expected CValue::ByRef, found CValue::ByValPair: {:?}\",\n-                self\n-            ),\n-        }\n-    }\n-\n     pub fn value_field<'a>(\n         self,\n         fx: &mut FunctionCx<'a, 'tcx, impl Backend>,"}, {"sha": "7cce688712338490d250364ce4999d519c793b54", "filename": "src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b73bda1c3f845680a4e0da40b5b6519c2ba4845b/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b73bda1c3f845680a4e0da40b5b6519c2ba4845b/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=b73bda1c3f845680a4e0da40b5b6519c2ba4845b", "patch": "@@ -363,7 +363,7 @@ fn codegen_mono_items<'a, 'tcx: 'a>(\n             match err.downcast::<NonFatal>() {\n                 Ok(non_fatal) => {\n                     if cfg!(debug_assertions) {\n-                        writeln!(log.as_mut().unwrap(), \"{}\", &non_fatal.0);\n+                        writeln!(log.as_mut().unwrap(), \"{}\", &non_fatal.0).unwrap();\n                     }\n                     tcx.sess.err(&non_fatal.0)\n                 }\n@@ -382,7 +382,7 @@ fn codegen_mono_items<'a, 'tcx: 'a>(\n         });\n     if any_dynamic_crate {\n     } else if let Some(kind) = *tcx.sess.allocator_kind.get() {\n-        allocator::codegen(tcx, module, kind);\n+        allocator::codegen(module, kind);\n     }\n \n     ccx.finalize(tcx, module);"}]}