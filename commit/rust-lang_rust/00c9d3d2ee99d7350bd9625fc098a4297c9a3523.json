{"sha": "00c9d3d2ee99d7350bd9625fc098a4297c9a3523", "node_id": "C_kwDOAAsO6NoAKDAwYzlkM2QyZWU5OWQ3MzUwYmQ5NjI1ZmMwOThhNDI5N2M5YTM1MjM", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-09-04T21:11:50Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-09-08T01:54:59Z"}, "message": "Avoid source-map call in operator error", "tree": {"sha": "de0a42d36338581e6ec8411ff8410fd627bbd1ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de0a42d36338581e6ec8411ff8410fd627bbd1ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/00c9d3d2ee99d7350bd9625fc098a4297c9a3523", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/00c9d3d2ee99d7350bd9625fc098a4297c9a3523", "html_url": "https://github.com/rust-lang/rust/commit/00c9d3d2ee99d7350bd9625fc098a4297c9a3523", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/00c9d3d2ee99d7350bd9625fc098a4297c9a3523/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2804e6ec2c29a5c7368600ea173b890e2655c3d", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2804e6ec2c29a5c7368600ea173b890e2655c3d", "html_url": "https://github.com/rust-lang/rust/commit/c2804e6ec2c29a5c7368600ea173b890e2655c3d"}], "stats": {"total": 44, "additions": 20, "deletions": 24}, "files": [{"sha": "fa0fac93276daccb86dfda9eb021ee706522dd4e", "filename": "compiler/rustc_typeck/src/check/op.rs", "status": "modified", "additions": 15, "deletions": 19, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/00c9d3d2ee99d7350bd9625fc098a4297c9a3523/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00c9d3d2ee99d7350bd9625fc098a4297c9a3523/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs?ref=00c9d3d2ee99d7350bd9625fc098a4297c9a3523", "patch": "@@ -313,7 +313,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             // error types are considered \"builtin\"\n             Err(_) if lhs_ty.references_error() || rhs_ty.references_error() => self.tcx.ty_error(),\n             Err(errors) => {\n-                let source_map = self.tcx.sess.source_map();\n                 let (mut err, missing_trait, use_output) = match is_assign {\n                     IsAssign::Yes => {\n                         let mut err = struct_span_err!(\n@@ -448,24 +447,21 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         )\n                         .is_ok()\n                     {\n-                        if let Ok(lstring) = source_map.span_to_snippet(lhs_expr.span) {\n-                            let msg = &format!(\n-                                \"`{}{}` can be used on `{}`, you can dereference `{}`\",\n-                                op.node.as_str(),\n-                                match is_assign {\n-                                    IsAssign::Yes => \"=\",\n-                                    IsAssign::No => \"\",\n-                                },\n-                                lhs_deref_ty.peel_refs(),\n-                                lstring,\n-                            );\n-                            err.span_suggestion_verbose(\n-                                lhs_expr.span.shrink_to_lo(),\n-                                msg,\n-                                \"*\",\n-                                rustc_errors::Applicability::MachineApplicable,\n-                            );\n-                        }\n+                        let msg = &format!(\n+                            \"`{}{}` can be used on `{}` if you dereference the left-hand side\",\n+                            op.node.as_str(),\n+                            match is_assign {\n+                                IsAssign::Yes => \"=\",\n+                                IsAssign::No => \"\",\n+                            },\n+                            lhs_deref_ty,\n+                        );\n+                        err.span_suggestion_verbose(\n+                            lhs_expr.span.shrink_to_lo(),\n+                            msg,\n+                            \"*\",\n+                            rustc_errors::Applicability::MachineApplicable,\n+                        );\n                     }\n                 };\n "}, {"sha": "34826d2f4bf7ab2932657a08c53a606ded25d406", "filename": "src/test/ui/binop/binary-op-on-double-ref.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00c9d3d2ee99d7350bd9625fc098a4297c9a3523/src%2Ftest%2Fui%2Fbinop%2Fbinary-op-on-double-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/00c9d3d2ee99d7350bd9625fc098a4297c9a3523/src%2Ftest%2Fui%2Fbinop%2Fbinary-op-on-double-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fbinary-op-on-double-ref.stderr?ref=00c9d3d2ee99d7350bd9625fc098a4297c9a3523", "patch": "@@ -6,7 +6,7 @@ LL |         x % 2 == 0\n    |         |\n    |         &&{integer}\n    |\n-help: `%` can be used on `{integer}`, you can dereference `x`\n+help: `%` can be used on `&{integer}` if you dereference the left-hand side\n    |\n LL |         *x % 2 == 0\n    |         +"}, {"sha": "e394cf8206edef45077760f28886f310e09c0e3c", "filename": "src/test/ui/typeck/assign-non-lval-derefmut.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/00c9d3d2ee99d7350bd9625fc098a4297c9a3523/src%2Ftest%2Fui%2Ftypeck%2Fassign-non-lval-derefmut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/00c9d3d2ee99d7350bd9625fc098a4297c9a3523/src%2Ftest%2Fui%2Ftypeck%2Fassign-non-lval-derefmut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fassign-non-lval-derefmut.stderr?ref=00c9d3d2ee99d7350bd9625fc098a4297c9a3523", "patch": "@@ -19,7 +19,7 @@ LL |     x.lock().unwrap() += 1;\n    |     |\n    |     cannot use `+=` on type `MutexGuard<'_, usize>`\n    |\n-help: `+=` can be used on `usize`, you can dereference `x.lock().unwrap()`\n+help: `+=` can be used on `usize` if you dereference the left-hand side\n    |\n LL |     *x.lock().unwrap() += 1;\n    |     +\n@@ -47,7 +47,7 @@ LL |     y += 1;\n    |     |\n    |     cannot use `+=` on type `MutexGuard<'_, usize>`\n    |\n-help: `+=` can be used on `usize`, you can dereference `y`\n+help: `+=` can be used on `usize` if you dereference the left-hand side\n    |\n LL |     *y += 1;\n    |     +"}, {"sha": "cbdc960baab8e7cafaa456825299b800c3c122ad", "filename": "src/test/ui/typeck/assign-non-lval-mut-ref.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/00c9d3d2ee99d7350bd9625fc098a4297c9a3523/src%2Ftest%2Fui%2Ftypeck%2Fassign-non-lval-mut-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/00c9d3d2ee99d7350bd9625fc098a4297c9a3523/src%2Ftest%2Fui%2Ftypeck%2Fassign-non-lval-mut-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fassign-non-lval-mut-ref.stderr?ref=00c9d3d2ee99d7350bd9625fc098a4297c9a3523", "patch": "@@ -19,7 +19,7 @@ LL |     x.last_mut().unwrap() += 1;\n    |     |\n    |     cannot use `+=` on type `&mut usize`\n    |\n-help: `+=` can be used on `usize`, you can dereference `x.last_mut().unwrap()`\n+help: `+=` can be used on `usize` if you dereference the left-hand side\n    |\n LL |     *x.last_mut().unwrap() += 1;\n    |     +\n@@ -45,7 +45,7 @@ LL |     y += 1;\n    |     |\n    |     cannot use `+=` on type `&mut usize`\n    |\n-help: `+=` can be used on `usize`, you can dereference `y`\n+help: `+=` can be used on `usize` if you dereference the left-hand side\n    |\n LL |     *y += 1;\n    |     +"}]}