{"sha": "dac95a3ad8507fcad5fa64656ededd4cffc5b996", "node_id": "C_kwDOAAsO6NoAKGRhYzk1YTNhZDg1MDdmY2FkNWZhNjQ2NTZlZGVkZDRjZmZjNWI5OTY", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-06-06T21:27:46Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-06-07T00:16:02Z"}, "message": "rename AllocationMap \u2192 RangeObjectMap", "tree": {"sha": "8b0ae32d71e5b88171d04a7b1653e43d22b345a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b0ae32d71e5b88171d04a7b1653e43d22b345a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dac95a3ad8507fcad5fa64656ededd4cffc5b996", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dac95a3ad8507fcad5fa64656ededd4cffc5b996", "html_url": "https://github.com/rust-lang/rust/commit/dac95a3ad8507fcad5fa64656ededd4cffc5b996", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dac95a3ad8507fcad5fa64656ededd4cffc5b996/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d98bd9838554f3d33512db6fae6fa67cede1afaf", "url": "https://api.github.com/repos/rust-lang/rust/commits/d98bd9838554f3d33512db6fae6fa67cede1afaf", "html_url": "https://github.com/rust-lang/rust/commit/d98bd9838554f3d33512db6fae6fa67cede1afaf"}], "stats": {"total": 33, "additions": 16, "deletions": 17}, "files": [{"sha": "5f8bba802728cd739019abdff10d27270bd30467", "filename": "src/concurrency/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dac95a3ad8507fcad5fa64656ededd4cffc5b996/src%2Fconcurrency%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dac95a3ad8507fcad5fa64656ededd4cffc5b996/src%2Fconcurrency%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconcurrency%2Fmod.rs?ref=dac95a3ad8507fcad5fa64656ededd4cffc5b996", "patch": "@@ -1,3 +1,3 @@\n-mod allocation_map;\n pub mod data_race;\n+mod range_object_map;\n pub mod weak_memory;"}, {"sha": "2bb32803023923090114dc9c4c0cc8f61eda3a63", "filename": "src/concurrency/range_object_map.rs", "status": "renamed", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/dac95a3ad8507fcad5fa64656ededd4cffc5b996/src%2Fconcurrency%2Frange_object_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dac95a3ad8507fcad5fa64656ededd4cffc5b996/src%2Fconcurrency%2Frange_object_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconcurrency%2Frange_object_map.rs?ref=dac95a3ad8507fcad5fa64656ededd4cffc5b996", "patch": "@@ -1,7 +1,6 @@\n-//! Implements a map from allocation ranges to data.\n-//! This is somewhat similar to RangeMap, but the ranges\n-//! and data are discrete and non-splittable. An allocation in the\n-//! map will always have the same range until explicitly removed\n+//! Implements a map from allocation ranges to data. This is somewhat similar to RangeMap, but the\n+//! ranges and data are discrete and non-splittable -- they represent distinct \"objects\". An\n+//! allocation in the map will always have the same range until explicitly removed\n \n use rustc_target::abi::Size;\n use std::ops::{Index, IndexMut, Range};\n@@ -20,7 +19,7 @@ struct Elem<T> {\n type Position = usize;\n \n #[derive(Clone, Debug)]\n-pub struct AllocationMap<T> {\n+pub struct RangeObjectMap<T> {\n     v: Vec<Elem<T>>,\n }\n \n@@ -34,7 +33,7 @@ pub enum AccessType {\n     ImperfectlyOverlapping(Range<Position>),\n }\n \n-impl<T> AllocationMap<T> {\n+impl<T> RangeObjectMap<T> {\n     pub fn new() -> Self {\n         Self { v: Vec::new() }\n     }\n@@ -135,15 +134,15 @@ impl<T> AllocationMap<T> {\n     }\n }\n \n-impl<T> Index<Position> for AllocationMap<T> {\n+impl<T> Index<Position> for RangeObjectMap<T> {\n     type Output = T;\n \n     fn index(&self, pos: Position) -> &Self::Output {\n         &self.v[pos].data\n     }\n }\n \n-impl<T> IndexMut<Position> for AllocationMap<T> {\n+impl<T> IndexMut<Position> for RangeObjectMap<T> {\n     fn index_mut(&mut self, pos: Position) -> &mut Self::Output {\n         &mut self.v[pos].data\n     }\n@@ -159,7 +158,7 @@ mod tests {\n     fn empty_map() {\n         // FIXME: make Size::from_bytes const\n         let four = Size::from_bytes(4);\n-        let map = AllocationMap::<()>::new();\n+        let map = RangeObjectMap::<()>::new();\n \n         // Correctly tells where we should insert the first element (at position 0)\n         assert_eq!(map.find_offset(Size::from_bytes(3)), Err(0));\n@@ -173,7 +172,7 @@ mod tests {\n     fn no_overlapping_inserts() {\n         let four = Size::from_bytes(4);\n \n-        let mut map = AllocationMap::<&str>::new();\n+        let mut map = RangeObjectMap::<&str>::new();\n \n         // |_|_|_|_|#|#|#|#|_|_|_|_|...\n         //  0 1 2 3 4 5 6 7 8 9 a b c d\n@@ -187,7 +186,7 @@ mod tests {\n     fn boundaries() {\n         let four = Size::from_bytes(4);\n \n-        let mut map = AllocationMap::<&str>::new();\n+        let mut map = RangeObjectMap::<&str>::new();\n \n         // |#|#|#|#|_|_|...\n         //  0 1 2 3 4 5\n@@ -215,7 +214,7 @@ mod tests {\n     fn perfectly_overlapping() {\n         let four = Size::from_bytes(4);\n \n-        let mut map = AllocationMap::<&str>::new();\n+        let mut map = RangeObjectMap::<&str>::new();\n \n         // |#|#|#|#|_|_|...\n         //  0 1 2 3 4 5\n@@ -241,7 +240,7 @@ mod tests {\n     fn straddling() {\n         let four = Size::from_bytes(4);\n \n-        let mut map = AllocationMap::<&str>::new();\n+        let mut map = RangeObjectMap::<&str>::new();\n \n         // |_|_|_|_|#|#|#|#|_|_|_|_|...\n         //  0 1 2 3 4 5 6 7 8 9 a b c d", "previous_filename": "src/concurrency/allocation_map.rs"}, {"sha": "be3963a93f072307831bfdbd23e43be47bc3d939", "filename": "src/concurrency/weak_memory.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dac95a3ad8507fcad5fa64656ededd4cffc5b996/src%2Fconcurrency%2Fweak_memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dac95a3ad8507fcad5fa64656ededd4cffc5b996/src%2Fconcurrency%2Fweak_memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconcurrency%2Fweak_memory.rs?ref=dac95a3ad8507fcad5fa64656ededd4cffc5b996", "patch": "@@ -85,8 +85,8 @@ use rustc_data_structures::fx::FxHashMap;\n use crate::{AtomicReadOp, AtomicRwOp, AtomicWriteOp, Tag, VClock, VTimestamp, VectorIdx};\n \n use super::{\n-    allocation_map::{AccessType, AllocationMap},\n     data_race::{GlobalState, ThreadClockSet},\n+    range_object_map::{AccessType, RangeObjectMap},\n };\n \n pub type AllocExtra = StoreBufferAlloc;\n@@ -101,7 +101,7 @@ const STORE_BUFFER_LIMIT: usize = 128;\n pub struct StoreBufferAlloc {\n     /// Store buffer of each atomic object in this allocation\n     // Behind a RefCell because we need to allocate/remove on read access\n-    store_buffers: RefCell<AllocationMap<StoreBuffer>>,\n+    store_buffers: RefCell<RangeObjectMap<StoreBuffer>>,\n }\n \n #[derive(Debug, Clone, PartialEq, Eq)]\n@@ -134,7 +134,7 @@ struct StoreElement {\n \n impl StoreBufferAlloc {\n     pub fn new_allocation() -> Self {\n-        Self { store_buffers: RefCell::new(AllocationMap::new()) }\n+        Self { store_buffers: RefCell::new(RangeObjectMap::new()) }\n     }\n \n     /// Checks if the range imperfectly overlaps with existing buffers"}]}